commit fc11cebc2b0483357aa30df11a0290cdc9ae01be
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 28 01:47:22 2011 -0800

    Refactoring docs and removing deprecated/duplicated crud from install

diff --git a/docs/changelog/index.rst b/docs/changelog/index.rst
index 011b5f3372..9c7463b6fe 100644
--- a/docs/changelog/index.rst
+++ b/docs/changelog/index.rst
@@ -301,7 +301,7 @@ Version 1.6.9
 * Fixed a bug to ensure template information is only added if its the correct loader
 
 Version 1.6.8.1
--------------
+---------------
 
 * Search will now show when unauthenticated (e.g. when SENTRY_PUBLIC is enabled)
 
@@ -360,6 +360,6 @@ Version 1.6.0
 * SearchFilter now allows searching by message reference id
 * Added Sentry404CatchMiddleware
 * Added SentryResponseErrorIdMiddleware
-* The `request` argument can now be passed into any create_from_ method.
+* The `request` argument can now be passed into any ``create_from_`` method.
 
 (History beyond 1.6.0 is not present)
\ No newline at end of file
diff --git a/docs/technical/index.rst b/docs/client/index.rst
similarity index 78%
rename from docs/technical/index.rst
rename to docs/client/index.rst
index caedebab75..b00f1fdd49 100644
--- a/docs/technical/index.rst
+++ b/docs/client/index.rst
@@ -1,76 +1,9 @@
-Extending Sentry
-================
-
-There are several interfaces currently available to extend Sentry. These are a work in
-progress and the API is not frozen.
-
-Bundled Plugins
----------------
-
-Sentry includes several plugins by default. To enable a plugin, it's as simple as adding it to
-your ``INSTALLED_APPS``::
-
-	INSTALLED_APPS = [
-	  ...
-	  'sentry.plugins.sentry_servers',
-	  'sentry.plugins.sentry_sites',
-	  'sentry.plugins.sentry_urls',
-	]
-
-.. data:: sentry.plugins.sentry_server
-    :noindex:
-
-    Enables a list of most seen servers in the message details sidebar, as well
-    as a dedicated panel to view all servers a message has been seen on.
-
-    ::
-
-    	INSTALLED_APPS = [
-    	  'sentry.plugins.sentry_servers',
-    	]
-
-.. data:: sentry.plugins.sentry_urls
-    :noindex:
-
-    Enables a list of most seen urls in the message details sidebar, as well
-    as a dedicated panel to view all urls a message has been seen on.
-
-    ::
-
-    	INSTALLED_APPS = [
-    	  'sentry.plugins.sentry_urls',
-    	]
-
-.. data:: sentry.plugins.sentry_sites
-    :noindex:
-
-    .. versionadded:: 1.3.13
-
-    Enables a list of most seen sites in the message details sidebar, as well
-    as a dedicated panel to view all sites a message has been seen on.
-
-    ::
-
-    	INSTALLED_APPS = [
-    	  'sentry.plugins.sentry_sites',
-    	]
-
-Writing a Plugin
-----------------
-
-*The plugin interface is a work in progress and the API is not frozen.**
-
-More and better docs coming soon.
-
-.. note::
-
-   If you write a plugin be prepared to maintain it until we're content with the API.
+Clients
+=======
 
 Writing a Client
 ----------------
 
-*work in progress!*
-
 For an example client, you may want to take a look at `Raven <http://github.com/dcramer/raven>`_.
 
 This section describes how to write a Sentry client.  As far as the
diff --git a/docs/index.rst b/docs/index.rst
index 0fb042a09c..44882b58c5 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -11,8 +11,9 @@ easily trace them in your application.
 
    install/index
    config/index
+   client/index
    interfaces/index
-   technical/index
+   plugins/index
    contributing/index
    changelog/index
 
diff --git a/docs/install/index.rst b/docs/install/index.rst
index 9e7f095f29..cb78869854 100644
--- a/docs/install/index.rst
+++ b/docs/install/index.rst
@@ -11,72 +11,39 @@ Or with *setuptools*::
 
 You now have two choices:
 
-1. Run an integrated setup where your webapp runs both the Sentry client and server.
-
-   If you run on a single web server, or don't expect high load, this is the quickest
-   configuration to get up and running.
-
-2. (Recommended) Runs the server in a separate web instance to isolate your application.
+1. **(Recommended)** Run the server in a separate web instance to isolate your application.
 
    The recommended setup for apps which have any kind of quality of service requirements.
    Your Sentry server (web) application will run in its own environment which ensures the
    most compatibility with your application, as well as ensuring it does not impact your
    primary application servers.
 
-Uprading from 1.x
------------------
+2. Run an integrated setup where your webapp runs both the Sentry client and server.
 
-If you are upgrading Sentry from a 1.x version, you should take note that the database migrations
-are much more significant than they were in the past. We recommend performing them **before**
-upgrading the actual Sentry server.
-
-This includes several new tables (such as Project), and alters on almost all existing tables. It
-also means it needs to backfill the project_id column on all related tables.
-
-Integrating with an existing Django install
--------------------------------------------
-
-The integrated setup is the easiest to get up and running. It simply requires you to plug the Sentry application into your existing
-Django project. Once installed, you simply need to update your settings.py and add ``sentry`` and ``raven.contrib.django`` to ``INSTALLED_APPS``::
-
-	INSTALLED_APPS = (
-	    'django.contrib.admin',
-	    'django.contrib.auth',
-	    'django.contrib.contenttypes',
-	    'django.contrib.sessions',
-
-	    'sentry',
-	    'raven.contrib.django',
-	    ...
-	)
-
-.. note:: Raven is a seperate project, and the official Python client for Sentry.
-
-You will also need to add ``sentry.web.urls`` to your url patterns::
-
-	urlpatterns = patterns('',
-	    (r'^sentry/', include('sentry.web.urls')),
-	)
-
-We also highly recommend setting ``TEMPLATE_DEBUG=True`` in your environment (not to be confused with ``DEBUG``). This will allow
-Sentry to receive template debug information when it hits a syntax error.
-
-Finally, run ``python manage.py syncdb`` to create the database tables.
+   If you run on a single web server, or don't expect high load, this is the quickest
+   configuration to get up and running.
 
-.. note::
+Upgrading
+---------
 
-   We recommend using South for migrations. Initial migrations have already been created for Sentry in sentry/migrations/ so you only need to run ``python manage.py migrate sentry`` instead of ``syncdb``
+Upgrading Sentry simply requires you to run migrations and restart your web services. We recommend
+you run the migrations from a separate install so that they can be completed before updating the
+code which runs the webserver.
 
-.. seealso::
+To run the migrations, simply run ``sentry upgrade`` in your environment.
 
-   See :doc:`../technical/index` for information on additional plugins and functionality included.
+Upgrading from 1.x
+~~~~~~~~~~~~~~~~~~
 
-Upgrading
-~~~~~~~~~
+If you are upgrading Sentry from a 1.x version, you should take note that the database migrations
+are much more significant than they were in the past. We recommend performing them **before**
+upgrading the actual Sentry server.
 
-Upgrading Sentry is fairly painless with South migrations. If you're not using South then you're on your own::
+This includes several new tables (such as Project), and alters on almost all existing tables. It
+also means it needs to backfill the project_id column on all related tables.
 
-	python manage.py migrate sentry
+It is important to note that you should **upgrade the Sentry server before upgrading your clients**
+as the server maintains backwards compatible with the 1.x API, but many clients will not.
 
 Running a Sentry Server
 -----------------------
@@ -101,14 +68,13 @@ Sentry provides the start, stop, and restart commands available via the command
 
 .. note::
 
-   The ``start`` command will also automatically run the ``upgrade`` command, which handles data and schema migrations.
+   Calling ``sentry start`` will also automatically launch all required services, as well as
+   run ``upgrade`` command, which handles data and schema migrations.
 
 The configuration for the server is based on ``sentry.conf.server``, which contains a basic Django project configuration, as well
-as the default Sentry configuration values. It will use SQLite for the database, and Haystack using Whoosh. If you specify your own
-configuration via --config, you will likely want to preface the file with importing the global defaults::
+as the default Sentry configuration values. It will use SQLite for the database.::
 
-    #!/usr/bin/env python
-    # filename: /etc/sentry.conf.py
+    # ~/.sentry/sentry.conf.py
 
     DATABASES = {
         'default': {
@@ -126,52 +92,72 @@ configuration via --config, you will likely want to preface the file with import
     SENTRY_WEB_PORT = 9000
     SENTRY_KEY = '0123456789abcde'
 
-By default, Sentry will also look for ``~/.sentry/sentry.conf.py`` and load it if it exists, and ``--config`` is not passed.
+By default, Sentry will look for ``~/.sentry/sentry.conf.py`` and load it if it exists, and ``--config`` is not passed.
 
 .. note::
 
    The default database is SQLite, which generally does not perform very well.
 
+Configuring a Proxy
+~~~~~~~~~~~~~~~~~~~
 
-Configuring a Sentry WSGI app
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+By default, Sentry runs on port 9000. Even if you change this, under normal conditions you won't be able to bind to
+port 80. To get around this (and to avoid running Sentry as a privileged user, which you shouldn't), we recommend
+you setup a simple web proxy.
 
-If you need more flexibility in your Sentry server, you may want to setup the server project manually. While this guide does not
-cover configuring your webserver, it does describe the required attributes of your WSGI app to run in a standalone server mode.
+Proxying with Apache
+````````````````````
 
-First you're going to need to add Sentry to your server's INSTALLED_APPS::
+Apache requires the use of mod_proxy for forwarding requests::
 
-	INSTALLED_APPS = [
-	  ...
-	  'sentry',
-	  # We recommend adding the client to capture errors
-	  # seen on this server as well
-	  'raven.contrib.django',
-	]
+    ProxyPass / http://localhost:9000
+    ProxyPassReverse / http://localhost:9000
 
-You will also need to ensure that your ``SENTRY_KEY`` matches across your client and server configurations::
+Proxying with Nginx
+```````````````````
 
-	SENTRY_KEY = '0123456789abcde'
+You'll use the builtin HttpProxyModule within Nginx to handle proxying::
 
+    location / {
+      proxy_pass         http://localhost:9000;
+      proxy_redirect     off;
 
-Configure your Clients
-~~~~~~~~~~~~~~~~~~~~~~
+      proxy_set_header   Host             $host;
+      proxy_set_header   X-Real-IP        $remote_addr;
+      proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
+    }
 
-On each of your application servers, you will need to configure Sentry to communicate with your remote Sentry server.
+Integrating with an existing Django install
+-------------------------------------------
+
+The integrated setup is not recommended for production environments, but can be fairly easy to get up and running. It
+simply requires you to plug the Sentry application into your existing Django project. Once installed, you simply
+need to update your settings.py and add ``sentry`` and ``raven.contrib.django`` to ``INSTALLED_APPS``::
+
+    INSTALLED_APPS = (
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+
+        'sentry',
+        'raven.contrib.django',
+        ...
+    )
+
+.. note:: Raven is a seperate project, and the official Python client for Sentry.
 
-Start with adding the client to your ``INSTALLED_APPS``::
+You will also need to add ``sentry.web.urls`` to your url patterns::
 
-	INSTALLED_APPS = [
-	  ...
-	  'raven.contrib.django',
-	]
+    urlpatterns = patterns('',
+        (r'^sentry/', include('sentry.web.urls')),
+    )
 
-Add the ``SENTRY_SERVERS`` configuration variable, to point to the absolute location to the ``/store/`` view on your
-Sentry server::
+We also highly recommend setting ``TEMPLATE_DEBUG = True`` in your environment (not to be confused with ``DEBUG``). This will allow
+Sentry to receive template debug information when it hits a syntax error.
 
-	# This should be the absolute URI of sentries store view
-	SENTRY_SERVERS = ['http://your.sentry.server/sentry/store/']
+Finally, run ``python manage.py syncdb`` to create the database tables.
 
-You will also need to ensure that your ``SENTRY_KEY`` matches across your client and server configurations::
+.. note::
 
-	SENTRY_KEY = '0123456789abcde'
+   We recommend using South for migrations. Initial migrations have already been created for Sentry in sentry/migrations/ so you only need to run ``python manage.py migrate sentry`` instead of ``syncdb``
diff --git a/docs/interfaces/index.rst b/docs/interfaces/index.rst
index 9494fc07dd..55d5fe1611 100644
--- a/docs/interfaces/index.rst
+++ b/docs/interfaces/index.rst
@@ -1,12 +1,11 @@
 Interfaces
 ==========
 
-.. contents::
-    :local:
-.. currentmodule:: disqus.interfaces
-
 Sentry implements data interfaces for storing structured data. At it's core, an interface describes what it's storing, and optionally how it's data should be rendered.
 
+Bundled Interfaces
+------------------
+
 .. class:: sentry.interfaces.Message
 
     A standard message consisting of a ``message`` arg, and an optional
@@ -141,3 +140,8 @@ Sentry implements data interfaces for storing structured data. At it's core, an
             "query": "SELECT 1"
             "engine": "psycopg2"
         }
+
+Writing an Interface
+--------------------
+
+TODO
diff --git a/docs/plugins/index.rst b/docs/plugins/index.rst
new file mode 100644
index 0000000000..cb783ccd3a
--- /dev/null
+++ b/docs/plugins/index.rst
@@ -0,0 +1,68 @@
+Plugins
+=======
+
+There are several interfaces currently available to extend Sentry. These are a work in
+progress and the API is not frozen.
+
+Bundled Plugins
+---------------
+
+Sentry includes several plugins by default. To enable a plugin, it's as simple as adding it to
+your ``INSTALLED_APPS``::
+
+	INSTALLED_APPS = [
+	  ...
+	  'sentry.plugins.sentry_servers',
+	  'sentry.plugins.sentry_sites',
+	  'sentry.plugins.sentry_urls',
+	]
+
+.. data:: sentry.plugins.sentry_server
+    :noindex:
+
+    Enables a list of most seen servers in the message details sidebar, as well
+    as a dedicated panel to view all servers a message has been seen on.
+
+    ::
+
+    	INSTALLED_APPS = [
+    	  'sentry.plugins.sentry_servers',
+    	]
+
+.. data:: sentry.plugins.sentry_urls
+    :noindex:
+
+    Enables a list of most seen urls in the message details sidebar, as well
+    as a dedicated panel to view all urls a message has been seen on.
+
+    ::
+
+    	INSTALLED_APPS = [
+    	  'sentry.plugins.sentry_urls',
+    	]
+
+.. data:: sentry.plugins.sentry_sites
+    :noindex:
+
+    .. versionadded:: 1.3.13
+
+    Enables a list of most seen sites in the message details sidebar, as well
+    as a dedicated panel to view all sites a message has been seen on.
+
+    ::
+
+    	INSTALLED_APPS = [
+    	  'sentry.plugins.sentry_sites',
+    	]
+
+Writing a Plugin
+----------------
+
+*The plugin interface is a work in progress and the API is not frozen.**
+
+More and better docs coming soon.
+
+.. note::
+
+   If you write a plugin be prepared to maintain it until we're content with the API.
+
