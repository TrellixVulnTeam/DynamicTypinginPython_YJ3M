commit 04b79515a4579320f36eabc264bcd2995e244a8c
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 24 16:10:05 2016 -0700

    Add raw_stacktrace to exceptions
    
    - Remove orig_* on frames
    - Add raw_stacktrace from JavaScript frames
    
    @getsentry/ui @getsentry/javascript

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index cbfa4d9258..02dfe027d1 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -53,6 +53,15 @@ class SingleException(Interface):
         else:
             stacktrace = None
 
+        if data.get('raw_stacktrace') and data['raw_stacktrace'].get('frames'):
+            raw_stacktrace = Stacktrace.to_python(
+                data['raw_stacktrace'],
+                has_system_frames=has_system_frames,
+                slim_frames=slim_frames,
+            )
+        else:
+            raw_stacktrace = None
+
         type = data.get('type')
         value = data.get('value')
         if not type and ':' in value.split(' ', 1)[0]:
@@ -69,6 +78,7 @@ class SingleException(Interface):
             'value': value,
             'module': trim(data.get('module'), 128),
             'stacktrace': stacktrace,
+            'raw_stacktrace': raw_stacktrace,
         }
 
         return cls(**kwargs)
@@ -79,11 +89,17 @@ class SingleException(Interface):
         else:
             stacktrace = None
 
+        if self.raw_stacktrace:
+            raw_stacktrace = self.raw_stacktrace.to_json()
+        else:
+            raw_stacktrace = None
+
         return {
             'type': self.type,
             'value': self.value,
             'module': self.module,
             'stacktrace': stacktrace,
+            'raw_stacktrace': raw_stacktrace,
         }
 
     def get_api_context(self, is_public=False):
@@ -92,11 +108,17 @@ class SingleException(Interface):
         else:
             stacktrace = None
 
+        if self.raw_stacktrace:
+            raw_stacktrace = self.raw_stacktrace.get_api_context(is_public=is_public)
+        else:
+            raw_stacktrace = None
+
         return {
             'type': self.type,
             'value': unicode(self.value) if self.value else None,
             'module': self.module,
             'stacktrace': stacktrace,
+            'rawStacktrace': raw_stacktrace,
         }
 
     def get_alias(self):
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 6bff4648cf..028c7a535b 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -501,6 +501,7 @@ class SourceProcessor(object):
         self.ensure_module_names(frames)
         self.fix_culprit(data, stacktraces)
         self.update_stacktraces(stacktraces)
+        self.add_raw_stacktraces(data)
 
         return data
 
@@ -522,6 +523,27 @@ class SourceProcessor(object):
         for raw, interface in stacktraces:
             raw.update(interface.to_json())
 
+    def add_raw_stacktraces(self, data):
+        try:
+            values = data['sentry.interfaces.Exception']['values']
+        except KeyError:
+            return
+
+        for exc in values:
+            if not exc.get('stacktrace'):
+                continue
+
+            raw_frames = []
+            for frame in exc['stacktrace']['frames']:
+                try:
+                    # TODO(dcramer): we should refactor this to avoid this
+                    # push/pop process
+                    raw_frames.append(frame['data'].pop('raw'))
+                except KeyError:
+                    raw_frames.append(frame.copy())
+
+            exc['raw_stacktrace'] = {'frames': raw_frames}
+
     def ensure_module_names(self, frames):
         # TODO(dcramer): this doesn't really fit well with generic URLs so we
         # whitelist it to http/https
@@ -578,12 +600,10 @@ class SourceProcessor(object):
                     })
 
                 # Store original data in annotation
+                # HACK(dcramer): we stuff things into raw which gets popped off
+                # later when adding the raw_stacktrace attribute.
                 frame.data = {
-                    'orig_lineno': frame.lineno,
-                    'orig_colno': frame.colno,
-                    'orig_function': frame.function,
-                    'orig_abs_path': frame.abs_path,
-                    'orig_filename': frame.filename,
+                    'raw': frame.to_json(),
                     'sourcemap': sourcemap_label,
                 }
 
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 4e23394b10..2132e95af6 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -174,6 +174,7 @@ class SingleExceptionTest(TestCase):
             'value': self.interface.value,
             'module': self.interface.module,
             'stacktrace': None,
+            'raw_stacktrace': None,
         }
 
     def test_get_hash(self):
