commit 73e1c2e82f59f208d2f51bb02741ec8335e113a0
Author: Colleen O'Rourke <colleen@sentry.io>
Date:   Thu Jun 4 16:21:05 2020 -0700

    fix(Amazon SQS): Find out which field is causing log failure (#19195)
    
    * fix(Amazon SQS): Find out which field is causing log failure

diff --git a/src/sentry_plugins/amazon_sqs/plugin.py b/src/sentry_plugins/amazon_sqs/plugin.py
index 46a7bf3e33..03acf54e15 100644
--- a/src/sentry_plugins/amazon_sqs/plugin.py
+++ b/src/sentry_plugins/amazon_sqs/plugin.py
@@ -120,7 +120,6 @@ class AmazonSQSPlugin(CorePluginMixin, DataForwardingPlugin):
             )
 
             message = {"QueueUrl": queue_url, "MessageBody": message}
-
             # need a MessageGroupId for FIFO queues
             # note that if MessageGroupId is specified for non-FIFO, this will fail
             if message_group_id:
@@ -132,20 +131,26 @@ class AmazonSQSPlugin(CorePluginMixin, DataForwardingPlugin):
                 message["MessageDeduplicationId"] = uuid4().hex
             client.send_message(**message)
         except ClientError as e:
-            if six.text_type(e).startswith("An error occurred (AccessDenied)"):
+            if six.text_type(e).startswith(
+                "An error occurred (InvalidClientTokenId)"
+            ) or six.text_type(e).startswith("An error occurred (AccessDenied)"):
                 # If there's an issue with the user's token then we can't do
                 # anything to recover. Just log and continue.
                 metrics_name = "sentry_plugins.amazon_sqs.access_token_invalid"
                 logger.info(
                     metrics_name,
                     extra={
-                        "queue_url": queue_url,
-                        "access_key": access_key,
-                        "region": region,
                         "project_id": event.project.id,
                         "organization_id": event.project.organization_id,
                     },
                 )
+                logger.info(
+                    metrics_name, extra={"organization_id": event.project.organization_id},
+                )
+                logger.info(
+                    metrics_name, extra={"project_id": event.project.id},
+                )
+                logger.info(metrics_name)
                 metrics.incr(
                     metrics_name,
                     tags={
@@ -159,12 +164,8 @@ class AmazonSQSPlugin(CorePluginMixin, DataForwardingPlugin):
                 logger.info(
                     metrics_name,
                     extra={
-                        "queue_url": queue_url,
-                        "access_key": access_key,
-                        "region": region,
                         "project_id": event.project.id,
                         "organization_id": event.project.organization_id,
-                        "message_group_id": message_group_id,
                     },
                 )
                 metrics.incr(
diff --git a/tests/sentry_plugins/amazon_sqs/test_plugin.py b/tests/sentry_plugins/amazon_sqs/test_plugin.py
index 12062a3a31..50fdbe6244 100644
--- a/tests/sentry_plugins/amazon_sqs/test_plugin.py
+++ b/tests/sentry_plugins/amazon_sqs/test_plugin.py
@@ -71,7 +71,7 @@ class AmazonSQSPluginTest(PluginTestCase):
             {"Error": {"Code": "AccessDenied", "Message": "Hello"}}, "SendMessage"
         )
         self.run_test()
-        assert len(logger.info.call_args_list) == 1
+        assert len(logger.info.call_args_list) == 4
         assert (
             logger.info.call_args_list[0][0][0] == "sentry_plugins.amazon_sqs.access_token_invalid"
         )
