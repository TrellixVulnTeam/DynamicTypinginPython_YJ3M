commit a0cae5a583b2e118c8399cdaa9b82a3364b69f8f
Author: David Cramer <dcramer@David-Cramers-MacBook.local>
Date:   Wed Mar 10 21:46:58 2010 -0800

    Update all imports to be absolute. Add South migrations. Add get_absolute_url on Error/ErrorBatch entries.

diff --git a/.gitignore b/.gitignore
index 50b82d2290..41d352f203 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,7 @@
 /build
 /dist
 /django_db_log.egg-info
-*.pyc
\ No newline at end of file
+*.pyc
+/django-db-log-*
+*.log
+pip-log.txt
\ No newline at end of file
diff --git a/README.rst b/README.rst
index abfd30ed06..a90a7fdca4 100644
--- a/README.rst
+++ b/README.rst
@@ -8,7 +8,12 @@ Logs Django exceptions to your database handler.
 Upgrading
 =========
 
-The first thing you will want to do is confirm your database matches. Do this by verifying your version, or simply taking a look at the changes::
+If you use South migrations, simply run::
+
+	python manage.py migrate djangodblog
+
+
+Otherwise, the first thing you will want to do is confirm your database matches. Do this by verifying your version, or simply taking a look at the changes::
 
 	python manage.py sql djangodblog > dblog.sql
 	mysqldump -d --skip-opt -uroot -p yourdatabase djangodblog_error djangodblog_errorbatch > dblog.cur.sql
@@ -16,7 +21,7 @@ The first thing you will want to do is confirm your database matches. Do this by
 
 Note: the above example is using MySQL, and isn't going to give anywhere near a precise diff.
 
-Review the diff, then make any changes which appear nescesary.
+Review the diff, then make any changes which appear necessary.
 
 ###############
 Notable Changes
@@ -31,6 +36,10 @@ Install
 
 The easiest way to install the package is via setuptools::
 
+	pip install django-db-log
+
+OR, if you're not quite on the same page (work on that), with setuptools::
+
 	easy_install django-db-log
 
 Once installed, update your settings.py and add the middleware and installed apps settings::
@@ -114,7 +123,7 @@ Usage
 You will find two new admin panels in the automatically built Django administration:
 
 * Errors (Error)
-* Error batches (ErrorBatch)
+* Error summaries (ErrorBatch)
 
 It will store every single error inside of the `Errors` model, and it will store a collective, or summary, of errors inside of `Error batches` (this is more useful for most cases). If you are using this on multiple sites with the same database, the `Errors` table also contains the SITE_ID for which it the error appeared on.
 
@@ -154,4 +163,4 @@ Notes
 =====
 
 * django-db-log will automatically integrate with django-idmapper.
-* Multi-db support (via ``DBLOG_DATABASE``) will most likely not work in Django 1.2
\ No newline at end of file
+* django-db-log supports South migrations.
\ No newline at end of file
diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
index c8edf9bb24..d60854a22e 100644
--- a/djangodblog/__init__.py
+++ b/djangodblog/__init__.py
@@ -1 +1 @@
-__version__ = (1, 6, 0, 'multidb')
\ No newline at end of file
+__version__ = (1, 6, 0)
\ No newline at end of file
diff --git a/djangodblog/admin.py b/djangodblog/admin.py
index 19bfd039d8..23305dd57d 100644
--- a/djangodblog/admin.py
+++ b/djangodblog/admin.py
@@ -1,6 +1,6 @@
 from django.contrib import admin
 
-from models import ErrorBatch, Error
+from djangodblog.models import ErrorBatch, Error
 
 class ErrorBatchAdmin(admin.ModelAdmin):
     list_display    = ('shortened_url', 'logger', 'server_name', 'times_seen', 'last_seen')
diff --git a/djangodblog/handlers.py b/djangodblog/handlers.py
index 172ea5e99a..cbea4e4e95 100644
--- a/djangodblog/handlers.py
+++ b/djangodblog/handlers.py
@@ -1,4 +1,4 @@
-from models import Error
+from djangodblog.models import Error
 
 from django.conf import settings
 
diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index 704262aad5..1eb31944eb 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -22,15 +22,6 @@ assert not DBLOG_DATABASE_USING or django.VERSION >= (1, 2), 'The `DBLOG_DATABAS
 
 class DBLogManager(models.Manager):
     use_for_related_fields = True
-    
-    def _get_settings(self):
-        options = getattr(settings, 'DBLOG_DATABASE', None)
-        if options:
-            if 'DATABASE_PORT' not in options:
-                options['DATABASE_PORT'] = ''
-            if 'DATABASE_OPTIONS' not in options:
-                options['DATABASE_OPTIONS'] = {}
-        return options
 
     def get_query_set(self):
         qs = super(DBLogManager, self).get_query_set()
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index 45901d623b..974636b934 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -1,7 +1,7 @@
 from django.conf import settings
 from django.http import Http404
 
-from models import Error
+from djangodblog.models import Error
 
 __all__ = ('DBLogMiddleware',)
 
diff --git a/djangodblog/migrations/0001_initial.py b/djangodblog/migrations/0001_initial.py
new file mode 100644
index 0000000000..263fc0ec55
--- /dev/null
+++ b/djangodblog/migrations/0001_initial.py
@@ -0,0 +1,92 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+    
+    def forwards(self, orm):
+        
+        # Adding model 'ErrorBatch'
+        db.create_table('djangodblog_errorbatch', (
+            ('status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0, db_column='is_resolved')),
+            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('server_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
+            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(default=40, db_index=True, blank=True)),
+            ('class_name', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=128, null=True, blank=True)),
+            ('checksum', self.gf('django.db.models.fields.CharField')(max_length=32, db_index=True)),
+            ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
+            ('traceback', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
+            ('logger', self.gf('django.db.models.fields.CharField')(default='root', max_length=64, db_index=True, blank=True)),
+            ('message', self.gf('django.db.models.fields.TextField')()),
+            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('djangodblog', ['ErrorBatch'])
+
+        # Adding unique constraint on 'ErrorBatch', fields ['logger', 'server_name', 'checksum']
+        db.create_unique('djangodblog_errorbatch', ['logger', 'server_name', 'checksum'])
+
+        # Adding model 'Error'
+        db.create_table('djangodblog_error', (
+            ('server_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
+            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(default=40, db_index=True, blank=True)),
+            ('class_name', self.gf('django.db.models.fields.CharField')(max_length=128, null=True, blank=True)),
+            ('traceback', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
+            ('logger', self.gf('django.db.models.fields.CharField')(default='root', max_length=64, db_index=True, blank=True)),
+            ('datetime', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
+            ('message', self.gf('django.db.models.fields.TextField')()),
+        ))
+        db.send_create_signal('djangodblog', ['Error'])
+    
+    
+    def backwards(self, orm):
+        
+        # Deleting model 'ErrorBatch'
+        db.delete_table('djangodblog_errorbatch')
+
+        # Removing unique constraint on 'ErrorBatch', fields ['logger', 'server_name', 'checksum']
+        db.delete_unique('djangodblog_errorbatch', ['logger', 'server_name', 'checksum'])
+
+        # Deleting model 'Error'
+        db.delete_table('djangodblog_error')
+    
+    
+    models = {
+        'djangodblog.error': {
+            'Meta': {'object_name': 'Error'},
+            'class_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'djangodblog.errorbatch': {
+            'Meta': {'unique_together': "(('logger', 'server_name', 'checksum'),)", 'object_name': 'ErrorBatch'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_column': "'is_resolved'"}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        }
+    }
+    
+    complete_apps = ['djangodblog']
diff --git a/djangodblog/migrations/__init__.py b/djangodblog/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/djangodblog/models.py b/djangodblog/models.py
index cb905e0218..b905f190ad 100644
--- a/djangodblog/models.py
+++ b/djangodblog/models.py
@@ -10,8 +10,8 @@ except ImportError:
 
 import datetime
 
-from manager import DBLogManager
-from utils import JSONDictField
+from djangodblog.manager import DBLogManager
+from djangodblog.utils import JSONDictField
 
 __all__ = ('Error', 'ErrorBatch')
 
@@ -70,6 +70,9 @@ class ErrorBatch(Model):
         return "%s: %s" % (self.class_name, message)
     error.short_description = 'Error'
 
+    def get_absolute_url(self):
+        return self.url
+
 class Error(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
     class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True)
@@ -84,4 +87,7 @@ class Error(Model):
     objects         = DBLogManager()
 
     def __unicode__(self):
-        return "%s: %s" % (self.class_name, self.message)
\ No newline at end of file
+        return "%s: %s" % (self.class_name, self.message)
+
+    def get_absolute_url(self):
+        return self.url
\ No newline at end of file
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index 22894c112b..93762c3ce5 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -5,9 +5,9 @@ from django.conf import settings
 from django.db import models
 from django.utils.encoding import smart_unicode
 
-from models import Error, ErrorBatch
-from middleware import DBLogMiddleware
-from utils import JSONDictField
+from djangodblog.models import Error, ErrorBatch
+from djangodblog.middleware import DBLogMiddleware
+from djangodblog.utils import JSONDictField
 import logging
 
 class RequestFactory(Client):
@@ -55,11 +55,13 @@ class DBLogTestCase(TestCase):
         Error.objects.all().delete()
         ErrorBatch.objects.all().delete()
 
+
         logger = logging.getLogger()
+        logger.setLevel(logging.DEBUG)
         for h in logger.handlers:
+            # TODO: fix this, for now, I don't care.
             logger.removeHandler(h)
 
-        logger.setLevel(logging.DEBUG)
         logger.addHandler(DBLogHandler())
 
         logger.error('This is a test error')
@@ -113,7 +115,7 @@ class DBLogTestCase(TestCase):
         last = Error.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
-        self.assertEquals(last.level, logging.FATAL)
+        self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
         
     def testAPI(self):
@@ -132,7 +134,7 @@ class DBLogTestCase(TestCase):
         last = Error.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
-        self.assertEquals(last.level, logging.FATAL)
+        self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
         
         Error.objects.create_from_text('This is an error', level=logging.DEBUG)
@@ -146,15 +148,7 @@ class DBLogTestCase(TestCase):
         
         
     def testAlternateDatabase(self):
-        settings.DBLOG_DATABASE = dict(
-            DATABASE_HOST=settings.DATABASE_HOST,
-            DATABASE_PORT=settings.DATABASE_PORT,
-            DATABASE_NAME=settings.DATABASE_NAME,
-            DATABASE_USER=settings.DATABASE_USER,
-            DATABASE_PASSWORD=settings.DATABASE_PASSWORD,
-            DATABASE_OPTIONS=settings.DATABASE_OPTIONS,
-            TIME_ZONE=settings.TIME_ZONE,
-        )
+        settings.DBLOG_USING = 'default'
         
         Error.objects.all().delete()
         ErrorBatch.objects.all().delete()
@@ -171,7 +165,7 @@ class DBLogTestCase(TestCase):
         last = Error.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
-        self.assertEquals(last.level, logging.FATAL)
+        self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
 
         settings.DBLOG_DATABASE = None
\ No newline at end of file
