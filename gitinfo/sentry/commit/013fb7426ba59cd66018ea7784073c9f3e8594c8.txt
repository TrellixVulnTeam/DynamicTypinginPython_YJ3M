commit 013fb7426ba59cd66018ea7784073c9f3e8594c8
Author: Yuri Baburov <burchik@gmail.com>
Date:   Mon Dec 6 23:23:58 2010 +0600

    Added locks.

diff --git a/sentry/client/async.py b/sentry/client/async.py
index c376eafbff..6f3cda4e8b 100644
--- a/sentry/client/async.py
+++ b/sentry/client/async.py
@@ -1,6 +1,6 @@
 from Queue import Queue
 from sentry.client.base import SentryClient
-from threading import Thread
+from threading import Thread, Lock
 
 class SentryAsyncClient(SentryClient):
     """This client uses a single background thread to dispatch errors."""
@@ -9,23 +9,35 @@ class SentryAsyncClient(SentryClient):
     def __init__(self):
         """Starts the task thread."""
         self.queue = Queue(-1)
-        self.running = True
-        self._thread = Thread(target=self._target)
-        self._thread.setDaemon(True)
-        self._thread.start()
+        self._lock = Lock()
+        self._thread = None
+        self.start()
+
+    def start(self):
+        self._lock.acquire()
+        try:
+            if not self._thread:
+                self._thread = Thread(target=self._target)
+                self._thread.setDaemon(False)
+                self._thread.start()
+        finally:
+            self._lock.release()
 
     def stop(self):
         """Stops the task thread. Synchronous!"""
-        if self.running:
-            self.queue.put_nowait(self._terminator)
-            self._thread.join()
-            self._thread = None
+        self._lock.acquire()
+        try:
+            if self._thread:
+                self.queue.put_nowait(self._terminator)
+                self._thread.join()
+                self._thread = None
+        finally:
+            self._lock.release()
 
     def _target(self):
         while 1:
             record = self.queue.get()
             if record is self._terminator:
-                self.running = False
                 break
             self.send_remote_sync(**record)
 
