commit a195d583d1b5e9cd2858e2493148b222c66f9af0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Mar 26 12:59:42 2018 -0700

    feat(ui): Add "remove team" modal (#7778)
    
    * fix(svg): Use "currentColor" for `icon-trash`
    * test(js): Add `tick` helper for tests
    * remove TeamStore global

diff --git a/.eslintrc b/.eslintrc
index 50ade85cfc..8bc716367e 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -24,6 +24,7 @@
     "sinon": false,
     "MockApiClient": true,
     "TestStubs": true,
+    "tick": true,
     "Raven": true,
     "jest": true
   },
diff --git a/src/sentry/static/sentry/app/actionCreators/teams.jsx b/src/sentry/static/sentry/app/actionCreators/teams.jsx
index 26d3752237..d2afce803f 100644
--- a/src/sentry/static/sentry/app/actionCreators/teams.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/teams.jsx
@@ -1,4 +1,6 @@
 import TeamActions from '../actions/teamActions';
+import {tct} from '../locale';
+import {addSuccessMessage, addErrorMessage} from './indicator';
 
 const doCallback = (params = {}, name, ...args) => {
   if (typeof params[name] === 'function') {
@@ -93,3 +95,34 @@ export function leaveTeam(api, params, options) {
     },
   });
 }
+
+export function removeTeam(api, params, options) {
+  TeamActions.removeTeam(params.teamId);
+
+  return api
+    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {
+      method: 'DELETE',
+    })
+    .then(
+      data => {
+        TeamActions.removeTeamSuccess(params.teamId, data);
+        addSuccessMessage(
+          tct('[team] has been removed from [organization]', {
+            team: `#${params.teamId}`,
+            organization: params.orgId,
+          })
+        );
+        return data;
+      },
+      err => {
+        TeamActions.removeTeamError(params.teamId, err);
+        addErrorMessage(
+          tct('Unable to remove [team] from [organization]', {
+            team: `#${params.teamId}`,
+            organization: params.orgId,
+          })
+        );
+        throw err;
+      }
+    );
+}
diff --git a/src/sentry/static/sentry/app/actions/teamActions.jsx b/src/sentry/static/sentry/app/actions/teamActions.jsx
index e0fd9ae667..16b925b5a2 100644
--- a/src/sentry/static/sentry/app/actions/teamActions.jsx
+++ b/src/sentry/static/sentry/app/actions/teamActions.jsx
@@ -10,6 +10,9 @@ let TeamActions = Reflux.createActions([
   'fetchDetails',
   'fetchDetailsSuccess',
   'fetchDetailsError',
+  'removeTeam',
+  'removeTeamSuccess',
+  'removeTeamError',
 ]);
 
 export default TeamActions;
diff --git a/src/sentry/static/sentry/app/icons/icon-trash.svg b/src/sentry/static/sentry/app/icons/icon-trash.svg
index 79ff08a873..9f2a0fac23 100644
--- a/src/sentry/static/sentry/app/icons/icon-trash.svg
+++ b/src/sentry/static/sentry/app/icons/icon-trash.svg
@@ -5,7 +5,7 @@
     <desc>Created with Sketch.</desc>
     <defs></defs>
     <g id="Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
-        <g id="icon-trash" fill="#493E54">
+        <g id="icon-trash" fill="currentColor">
             <g id="Trash-Icon-Dark">
                 <path d="M6.44444444,8.8817842e-14 L17.5555556,8.8817842e-14 L6.44444444,8.8817842e-14 Z M22,6 L22,19.2 C22,21.8509668 20.0101544,24 17.5555556,24 L6.44444444,24 C3.98984556,24 2,21.8509668 2,19.2 L2,6 L4,6 L4,19.5 C4,20.8807119 5.03009485,22 6.30078125,22 L17.8046875,22 C19.0753739,22 20.1054687,20.8807119 20.1054687,19.5 L20.1054687,6 L22,6 Z" id="Combined-Shape" fill-rule="nonzero"></path>
                 <rect id="Rectangle-54" fill-rule="evenodd" x="0" y="4" width="24" height="2" rx="1"></rect>
@@ -16,4 +16,4 @@
             </g>
         </g>
     </g>
-</svg>
\ No newline at end of file
+</svg>
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 24970848a6..f015800b3f 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -8,6 +8,7 @@ const TeamStore = Reflux.createStore({
 
     this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
     this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);
+    this.listenTo(TeamActions.removeTeamSuccess, this.onRemoveSuccess);
   },
 
   reset() {
@@ -46,6 +47,10 @@ const TeamStore = Reflux.createStore({
     this.trigger(new Set([itemId]));
   },
 
+  onRemoveSuccess(slug) {
+    this.loadInitialData(this.items.filter(team => team.slug !== slug));
+  },
+
   getById(id) {
     return this.items.find(item => item.id.toString() === id.toString()) || null;
   },
@@ -63,6 +68,4 @@ const TeamStore = Reflux.createStore({
   },
 });
 
-window.TeamStore = TeamStore;
-
 export default TeamStore;
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
index ac3149f528..f9d5c17ee9 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
@@ -3,7 +3,8 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {addErrorMessage, addLoadingMessage} from '../../../actionCreators/indicator';
-import {t} from '../../../locale';
+import {removeTeam} from '../../../actionCreators/teams';
+import {t, tct} from '../../../locale';
 import AsyncView from '../../asyncView';
 import Form from '../components/forms/form';
 import JsonForm from '../components/forms/jsonForm';
@@ -12,8 +13,9 @@ import teamSettingsFields from '../../../data/forms/teamSettingsFields';
 import Panel from '../components/panel';
 import Field from '../components/forms/field';
 import PanelHeader from '../components/panelHeader';
-import Link from '../../../components/link';
+import Button from '../../../components/buttons/button';
 import SentryTypes from '../../../proptypes';
+import Confirm from '../../../components/confirm';
 
 export default class TeamSettings extends AsyncView {
   static propTypes = {
@@ -51,10 +53,14 @@ export default class TeamSettings extends AsyncView {
       this.setState({loading: true});
     }
   };
+  handleRemoveTeam = () => {
+    removeTeam(this.api, this.props.params).then(data => {
+      this.props.router.push(`/settings/${this.props.params.orgId}/teams/`);
+    });
+  };
 
   renderBody() {
     let team = this.props.team;
-    let {teamId, orgId} = this.props.params;
 
     let access = new Set(this.context.organization.access);
 
@@ -86,15 +92,17 @@ export default class TeamSettings extends AsyncView {
               )}
             >
               <div>
-                <Link
-                  href={`/organizations/${orgId}/teams/${teamId}/remove/`}
-                  className="btn btn-danger"
+                <Confirm
+                  onConfirm={this.handleRemoveTeam}
                   priority="danger"
-                  size="small"
-                  title={t('Remove Team')}
+                  message={tct('Are you sure you want to remove the team [team]?', {
+                    team: `#${team.slug}`,
+                  })}
                 >
-                  {t('Remove Team')}
-                </Link>
+                  <Button icon="icon-trash" priority="danger" title={t('Remove Team')}>
+                    {t('Remove Team')}
+                  </Button>
+                </Confirm>
               </div>
             </Field>
           </Panel>
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 21f2c0f825..38ef5000bd 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -20,6 +20,9 @@ jest.unmock('jquery');
 Enzyme.configure({adapter: new Adapter()});
 Enzyme.configure({disableLifecycleMethods: true});
 
+// This is so we can use async/await in tests instead of wrapping with `setTimeout`
+window.tick = () => new Promise(resolve => setTimeout(resolve));
+
 window.$ = window.jQuery = jQuery;
 window.sinon = sinon;
 window.scrollTo = sinon.spy();
diff --git a/tests/js/spec/views/teamSettings.spec.jsx b/tests/js/spec/views/teamSettings.spec.jsx
index a544579f10..52e17f0e1c 100644
--- a/tests/js/spec/views/teamSettings.spec.jsx
+++ b/tests/js/spec/views/teamSettings.spec.jsx
@@ -3,6 +3,7 @@ import React from 'react';
 import {mount, shallow} from 'enzyme';
 
 import TeamSettings from 'app/views/settings/team/teamSettings.old';
+import TeamStore from 'app/stores/teamStore';
 import NewTeamSettings from 'app/views/settings/team/teamSettings';
 
 const childContextTypes = {
@@ -117,4 +118,73 @@ describe('NewTeamSettings', function() {
       done();
     }, 1);
   });
+
+  it('needs team:admin in order to see remove team button', function() {
+    let team = TestStubs.Team();
+
+    let wrapper = mount(
+      <NewTeamSettings
+        routes={[]}
+        params={{orgId: 'org', teamId: team.slug}}
+        team={team}
+        onTeamChange={() => {}}
+      />,
+      TestStubs.routerContext([{organization: TestStubs.Organization({access: []})}])
+    );
+
+    expect(
+      wrapper
+        .find('PanelHeader')
+        .last()
+        .text()
+    ).not.toBe('Remove Team');
+  });
+
+  it('can remove team', async function() {
+    let team = TestStubs.Team();
+    let deleteMock = MockApiClient.addMockResponse({
+      url: `/teams/org/${team.slug}/`,
+      method: 'DELETE',
+    });
+    let routerPushMock = jest.fn();
+    let teamStoreTriggerMock = jest.fn();
+    sinon.stub(TeamStore, 'trigger', teamStoreTriggerMock);
+    TeamStore.loadInitialData([
+      {
+        slug: 'team-slug',
+      },
+    ]);
+
+    let wrapper = mount(
+      <NewTeamSettings
+        router={{push: routerPushMock}}
+        routes={[]}
+        params={{orgId: 'org', teamId: team.slug}}
+        team={team}
+        onTeamChange={() => {}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    // Click "Remove Team button
+    wrapper.find('Button[priority="danger"]').simulate('click');
+
+    TeamStore.trigger.reset();
+
+    // Wait for modal
+    wrapper.find('ModalDialog Button[priority="danger"]').simulate('click');
+    expect(deleteMock).toHaveBeenCalledWith(
+      `/teams/org/${team.slug}/`,
+      expect.objectContaining({
+        method: 'DELETE',
+      })
+    );
+
+    await tick();
+    expect(routerPushMock).toHaveBeenCalledWith('/settings/org/teams/');
+
+    expect(TeamStore.items).toEqual([]);
+
+    TeamStore.trigger.restore();
+  });
 });
