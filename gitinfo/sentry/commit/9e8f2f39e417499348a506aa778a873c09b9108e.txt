commit 9e8f2f39e417499348a506aa778a873c09b9108e
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Dec 19 15:57:39 2017 -0800

    ref(project-settings): Convert issue tracking page to React (#6707)
    
    ref(settings): Convert issue tracking page to React

diff --git a/src/sentry/static/sentry/app/components/pluginList.jsx b/src/sentry/static/sentry/app/components/pluginList.jsx
index 386e4fc828..5c5a822daf 100644
--- a/src/sentry/static/sentry/app/components/pluginList.jsx
+++ b/src/sentry/static/sentry/app/components/pluginList.jsx
@@ -25,12 +25,13 @@ export default React.createClass({
       `/projects/${organization.slug}/${project.slug}/plugins/${plugin.id}/`,
       {
         method: 'POST',
-        success: () => this.props.onEnablePlugin(plugin),
-        error: error => {
-          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+        success: () => {
+          IndicatorStore.remove(loadingIndicator);
+          this.props.onEnablePlugin(plugin);
         },
-        complete: () => {
+        error: error => {
           IndicatorStore.remove(loadingIndicator);
+          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
         },
       }
     );
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 89db71ee9e..d6d5dc3227 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -79,6 +79,7 @@ import ProjectKeyDetails from './views/projectKeyDetails';
 import ProjectKeys from './views/projectKeys';
 import ProjectPicker from './views/settings/components/projectPicker';
 import ProjectProcessingIssues from './views/projectProcessingIssues';
+import ProjectIssueTracking from './views/projectIssueTracking';
 import ProjectReleaseTracking from './views/projectReleaseTracking';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
@@ -267,6 +268,12 @@ const projectSettingsRoutes = [
     name="Alert Rules"
     component={errorHandler(ProjectAlertRules)}
   />,
+  <Route
+    key="issue-tracking/"
+    path="issue-tracking/"
+    name="Issue Tracking"
+    component={errorHandler(ProjectIssueTracking)}
+  />,
   <Route
     key="release-tracking/"
     path="release-tracking/"
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
index c745a30d09..c08df2d0b8 100644
--- a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -1,27 +1,56 @@
-import PropTypes from 'prop-types';
 import React from 'react';
-import PluginConfig from '../components/pluginConfig';
+import PropTypes from 'prop-types';
+import AsyncView from './asyncView';
+import PluginList from '../components/pluginList';
+
+import {t} from '../locale';
 
-class ProjectIssueTracking extends React.Component {
+export default class ProjectIssueTracking extends AsyncView {
   static propTypes = {
-    organization: PropTypes.object.isRequired,
-    project: PropTypes.object.isRequired,
-    dataList: PropTypes.array.isRequired,
+    organization: PropTypes.object,
+    project: PropTypes.object,
   };
 
-  render() {
-    if (!this.props.dataList.length) {
-      return null;
-    }
+  getEndpoints() {
+    let {projectId, orgId} = this.props.params;
+    return [['plugins', `/projects/${orgId}/${projectId}/plugins/`]];
+  }
 
-    return (
-      <div>
-        {this.props.dataList.map(data => {
-          return <PluginConfig data={data} {...this.props} key={data.id} />;
-        })}
-      </div>
-    );
+  renderBody() {
+    let {organization, project} = this.props;
+
+    let issueTrackingPlugins = this.state.plugins.filter(function(plugin) {
+      return plugin.type === 'issue-tracking' && plugin.hasConfiguration;
+    });
+
+    if (issueTrackingPlugins.length) {
+      return (
+        <div className="ref-issue-tracking-settings">
+          <h2>{t('Issue Tracking')}</h2>
+          <p>
+            Enabling Issue Tracking will let you quickly create tasks within your existing
+            tools. You'll find the new action on an issue's details page. Once you create
+            an issue, you'll find a helpful annotation and link to the task in your
+            project management tool.
+          </p>
+          <PluginList
+            organization={organization}
+            project={project}
+            pluginList={issueTrackingPlugins}
+            onEnablePlugin={this.fetchData}
+            onDisablePlugin={this.fetchData}
+          />
+        </div>
+      );
+    } else {
+      return (
+        <div className="alert alert-info alert-block">
+          <p>
+            There are no issue tracker integrations available. Ask your Sentry team about
+            integrating with your favorite project management tools.
+          </p>
+        </div>
+      );
+    }
   }
 }
-
-export default ProjectIssueTracking;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 24282a56ad..8ab88fa179 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -107,9 +107,9 @@ const ProjectSettings = React.createClass({
               {t('Alerts')}
             </ListLink>
             <ListLink to={`/${orgId}/${projectId}/settings/tags/`}>{t('Tags')}</ListLink>
-            <li>
-              <a href={`${settingsUrlRoot}/issue-tracking/`}>{t('Issue Tracking')}</a>
-            </li>
+            <ListLink to={`/${orgId}/${projectId}/settings/issue-tracking/`}>
+              {t('Issue Tracking')}
+            </ListLink>
             {access.has('project:write') && (
               <ListLink
                 to={`/${orgId}/${projectId}/settings/release-tracking/`}
diff --git a/src/sentry/templates/sentry/project-issue-tracking.html b/src/sentry/templates/sentry/project-issue-tracking.html
deleted file mode 100644
index d4ef36983f..0000000000
--- a/src/sentry/templates/sentry/project-issue-tracking.html
+++ /dev/null
@@ -1,78 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_plugins %}
-
-{% block title %}{% trans "Issue Tracking" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  <div class="ref-issue-tracking-settings">
-    <h2>{% trans "Issue Tracking" %}</h2>
-
-    <p>Enabling Issue Tracking will let you quickly create tasks within your existing tools.
-      You'll find the new action on an issue's details page. Once you create an issue, you'll
-      find a helpful annotation and link to the task in your project management tool. </p>
-
-    {% if enabled_plugins or other_plugins %}
-      {% for plugin, content in enabled_plugins %}
-        <div class="box">
-          <div class="box-header">
-            {% if plugin.can_disable %}
-              <form method="POST" class="pull-right">
-                {% csrf_token %}
-                <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
-                <button type="submit" class="btn btn-sm btn-default" name="op" value="disable">Disable</button>
-              </form>
-            {% endif %}
-            <h3>{{ plugin.get_title }}</h3>
-          </div>
-          <div class="box-content with-padding">
-            {{ content }}
-          </div>
-        </div>
-      {% endfor %}
-
-      <div id="issue_plugins"></div>
-
-      {% if other_plugins %}
-        <div class="box">
-          <div class="box-header">
-            <h3>{% trans "Inactive Integrations" %}</h3>
-          </div>
-          <div class="box-content with-padding">
-            <ul class="integration-list">
-              {% for plugin in other_plugins %}
-                <li>
-                  <form method="POST">
-                    {% csrf_token %}
-                    <input type="hidden" name="op" value="enable" />
-                    <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
-                    <button type="submit">
-                      <div class="icon-integration icon-{{ plugin.slug }}"></div>
-                      {{ plugin.get_title }}
-                    </button>
-                  </form>
-                </li>
-              {% endfor %}
-            </ul>
-          </div>
-        </div>
-      {% endif %}
-    {% else %}
-      <div class="alert alert-info alert-block">
-        <p>There are no issue tracker integrations available. Ask your Sentry team about integrating with your favorite project management tools.</p>
-      </div>
-    {% endif %}
-  </div>
-
-  <script>
-  $(function(){
-    ReactDOM.render(React.createFactory(Sentry.ProjectIssueTracking)({
-      project: {% serialize project %},
-      organization: {% serialize organization %},
-      dataList: {% serialize issue_v2_plugins %}
-    }), document.getElementById('issue_plugins'));
-  });
-  </script>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 566e587ce7..851bee3624 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -34,16 +34,16 @@
     <li{% if page == 'details' %} class="active"{% endif %}>
         <a href="{% url 'sentry-manage-project' project.organization.slug project.slug %}">{% trans "General" %}</a>
     </li>
-    <li{% if page == 'alerts' %} class="active"{% endif %}>
+    <li>
         <a href="{% absolute_uri '/{}/{}/settings/alerts/' project.organization.slug project.slug %}">{% trans "Alerts" %}</a>
     </li>
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/tags/' project.organization.slug project.slug %}">{% trans "Tags" %}</a>
     </li>
-    <li{% if page == 'issue-tracking' %} class="active"{% endif %}>
-        <a href="{% url 'sentry-project-issue-tracking' project.organization.slug project.slug %}">{% trans "Issue Tracking" %}</a>
+    <li>
+        <a href="{% absolute_uri '/{}/{}/settings/issue-tracking' project.organization.slug project.slug %}">{% trans "Issue Tracking" %}</a>
     </li>
-    <li{% if page == 'release-tracking' %} class="active"{% endif %}>
+    <li>
         <a href="{% absolute_uri '/{}/{}/settings/release-tracking/' project.organization.slug project.slug %}">{% trans "Release Tracking" %}</a>
     </li>
     <li>
@@ -97,8 +97,8 @@
         <a href="{% absolute_uri '/{}/{}/settings/plugins/' project.organization.slug project.slug %}">{% trans "All Integrations" %}</a>
       </li>
       {% for p in plugins %}
-        <li{% if page == 'plugin' and plugin.slug == p.slug %} class="active"{% endif %}>
-            <a href="{% absolute_uri '/{}/{}/settings/plugins/' project.organization.slug project.slug p.slug %}">{{ p.get_title }}</a>
+        <li>
+          <a href="{% absolute_uri '/{}/{}/settings/plugins/' project.organization.slug project.slug p.slug %}">{{ p.get_title }}</a>
         </li>
       {% endfor %}
     </ul>
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
deleted file mode 100644
index d89a47e12e..0000000000
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ /dev/null
@@ -1,89 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.http import HttpResponseRedirect, HttpResponse
-from django.utils.safestring import mark_safe
-
-from sentry import constants
-from sentry.api.serializers import serialize
-from sentry.api.serializers.models.plugin import PluginSerializer
-from sentry.plugins import plugins, IssueTrackingPlugin, IssueTrackingPlugin2
-from sentry.signals import plugin_enabled
-from sentry.web.frontend.base import ProjectView
-
-
-class ProjectIssueTrackingView(ProjectView):
-    required_scope = 'project:write'
-
-    def _iter_plugins(self):
-        for plugin in plugins.all(version=1):
-            if not (
-                isinstance(plugin, IssueTrackingPlugin) or isinstance(plugin, IssueTrackingPlugin2)
-            ):
-                continue
-            yield plugin
-
-    def _handle_enable_plugin(self, request, project):
-        plugin = plugins.get(request.POST['plugin'])
-        plugin.enable(project)
-
-        plugin_enabled.send(plugin=plugin, project=project, user=request.user, sender=self)
-
-        messages.add_message(
-            request,
-            messages.SUCCESS,
-            constants.OK_PLUGIN_ENABLED.format(name=plugin.get_title()),
-        )
-
-    def _handle_disable_plugin(self, request, project):
-        plugin = plugins.get(request.POST['plugin'])
-        plugin.disable(project)
-        messages.add_message(
-            request,
-            messages.SUCCESS,
-            constants.OK_PLUGIN_DISABLED.format(name=plugin.get_title()),
-        )
-
-    def handle(self, request, organization, team, project):
-        if request.method == 'POST':
-            op = request.POST.get('op')
-            if op == 'enable':
-                self._handle_enable_plugin(request, project)
-                return HttpResponseRedirect(request.path)
-            elif op == 'disable':
-                self._handle_disable_plugin(request, project)
-                return HttpResponseRedirect(request.path)
-
-        enabled_plugins = []
-        other_plugins = []
-        issue_v2_plugins = []
-        for plugin in self._iter_plugins():
-            if plugin.is_enabled(project):
-                if isinstance(plugin, IssueTrackingPlugin2):
-                    issue_v2_plugins.append(plugin)
-                    continue
-                content = plugin.get_issue_doc_html()
-
-                form = plugin.project_conf_form
-                if form is not None:
-                    view = plugin.configure(request=request, project=project)
-                    if isinstance(view, HttpResponse):
-                        return view
-                elif content:
-                    enabled_plugins.append((plugin, mark_safe(content)))
-                enabled_plugins.append((plugin, mark_safe(content + view)))
-            elif plugin.can_configure_for_project(project):
-                other_plugins.append(plugin)
-
-        context = {
-            'page':
-            'issue-tracking',
-            'enabled_plugins':
-            enabled_plugins,
-            'other_plugins':
-            other_plugins,
-            'issue_v2_plugins':
-            serialize(issue_v2_plugins, request.user, PluginSerializer(project=project)),
-        }
-
-        return self.respond('sentry/project-issue-tracking.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 20b2c9c0fb..b609f584d0 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -44,7 +44,6 @@ from sentry.web.frontend.organization_integration_setup import \
     OrganizationIntegrationSetupView
 from sentry.web.frontend.out import OutView
 from sentry.web.frontend.organization_members import OrganizationMembersView
-from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
 from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
 from sentry.web.frontend.reactivate_account import ReactivateAccountView
@@ -416,11 +415,6 @@ urlpatterns += patterns(
         react_page_view,
         name='sentry-manage-project'
     ),
-    url(
-        r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/issue-tracking/$',
-        ProjectIssueTrackingView.as_view(),
-        name='sentry-project-issue-tracking'
-    ),
     url(
         r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/remove/$',
         RemoveProjectView.as_view(),
diff --git a/tests/sentry/web/frontend/test_project_issue_tracking.py b/tests/sentry/web/frontend/test_project_issue_tracking.py
deleted file mode 100644
index ba9f38e655..0000000000
--- a/tests/sentry/web/frontend/test_project_issue_tracking.py
+++ /dev/null
@@ -1,31 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class ProjectIssueTrackingTest(TestCase):
-    def setUp(self):
-        super(ProjectIssueTrackingTest, self).setUp()
-        self.owner = self.create_user()
-        self.organization = self.create_organization(owner=self.owner)
-        self.team = self.create_team(organization=self.organization)
-        self.project = self.create_project(team=self.team)
-
-    @fixture
-    def path(self):
-        return reverse(
-            'sentry-project-issue-tracking', args=[
-                self.organization.slug,
-                self.project.slug,
-            ]
-        )
-
-    def test_renders_with_context(self):
-        self.login_as(self.owner)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/project-issue-tracking.html')
-        assert resp.context['project'] == self.project
