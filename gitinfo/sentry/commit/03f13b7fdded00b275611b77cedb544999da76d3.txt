commit 03f13b7fdded00b275611b77cedb544999da76d3
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Oct 6 08:30:42 2011 -0700

    Switch to django-nose runner

diff --git a/runtests.py b/runtests.py
index 85491e52cb..e0e0a12fb3 100644
--- a/runtests.py
+++ b/runtests.py
@@ -68,7 +68,7 @@ if not settings.configured:
     import djcelery
     djcelery.setup_loader()
 
-from django.test.simple import run_tests
+from django_nose import NoseTestSuiteRunner
 
 def runtests(*test_args, **kwargs):
     if 'south' in settings.INSTALLED_APPS:
@@ -78,18 +78,15 @@ def runtests(*test_args, **kwargs):
     if not test_args:
         test_args = ['tests']
 
-    failures = run_tests(test_args,
-        verbosity=kwargs.get('verbosity', 1),
-        interactive=kwargs.get('interactive', False),
-        failfast=kwargs.get('failfast'),
-    )
+    test_runner = NoseTestSuiteRunner(**kwargs)
 
+    failures = test_runner.run_tests(test_args)
     sys.exit(failures)
 
 if __name__ == '__main__':
     parser = OptionParser()
-    parser.add_option('--failfast', action='store_true', default=False, dest='failfast')
-
+    parser.add_option('--verbosity', dest='verbosity', action='store', default=1, type=int)
+    parser.add_options(NoseTestSuiteRunner.options)
     (options, args) = parser.parse_args()
 
-    runtests(failfast=options.failfast, *args)
\ No newline at end of file
+    runtests(*args, **options.__dict__)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index ca4ddc79b1..f3a7013793 100755
--- a/setup.py
+++ b/setup.py
@@ -12,6 +12,9 @@ except ImportError:
 tests_require = [
     'Django>=1.2,<1.4',
 
+    'nose',
+    'django-nose',
+
     # celery
     'django-celery',
 
diff --git a/tests/testcases.py b/tests/testcases.py
new file mode 100644
index 0000000000..0ba8f7c0a5
--- /dev/null
+++ b/tests/testcases.py
@@ -0,0 +1,90 @@
+import base64
+import time
+
+from sentry.conf import settings
+from sentry.utils import json, transform, get_signature, get_auth_header
+from sentry.utils.compat import pickle
+from sentry.utils.compat.db import connections
+
+from django.core.management import call_command
+from django.core.urlresolvers import reverse
+from django.db import DEFAULT_DB_ALIAS
+from django.test import TestCase, TransactionTestCase
+from django.test.client import Client
+
+class TestCase(TestCase):
+    ## Helper methods for posting
+
+    urls = 'tests.urls'
+
+    def _postWithKey(self, data):
+        resp = self.client.post(reverse('sentry-store'), {
+            'data': base64.b64encode(pickle.dumps(transform(data))),
+            'key': settings.KEY,
+        })
+        return resp
+
+    def _postWithSignature(self, data):
+        ts = time.time()
+        message = base64.b64encode(json.dumps(transform(data)))
+        sig = get_signature(message, ts)
+
+        resp = self.client.post(reverse('sentry-store'), message,
+            content_type='application/octet-stream',
+            HTTP_AUTHORIZATION=get_auth_header(sig, ts, '_postWithSignature'),
+        )
+        return resp
+
+class TransactionTestCase(TransactionTestCase):
+    """
+    Subclass of ``django.test.TransactionTestCase`` that quickly tears down
+    fixtures and doesn't `flush` on setup.  This enables tests to be run in
+    any order.
+    """
+    tags = ['transaction']
+
+    multi_db = True
+    databases = None
+
+    def __call__(self, result=None):
+        """
+        Wrapper around default __call__ method to perform common Django test
+        set up. This means that user-defined Test Cases aren't required to
+        include a call to super().setUp().
+        """
+        self.client = Client()
+        try:
+            self._pre_setup()
+        except (KeyboardInterrupt, SystemExit):
+            raise
+        except Exception:
+            import sys
+            result.addError(self, sys.exc_info())
+            return
+        try:
+            super(TransactionTestCase, self).__call__(result)
+        finally:
+            try:
+                self._post_teardown()
+            except (KeyboardInterrupt, SystemExit):
+                raise
+            except Exception:
+                import sys
+                result.addError(self, sys.exc_info())
+                return
+
+    def _get_databases(self):
+        if getattr(self, 'multi_db', False):
+            return connections
+        return [DEFAULT_DB_ALIAS]
+
+    def _fixture_setup(self):
+        for db in self._get_databases():
+            if hasattr(self, 'fixtures') and self.fixtures:
+                # We have to use this slightly awkward syntax due to the fact
+                # that we're using *args and **kwargs together.
+                call_command('loaddata', *self.fixtures, **{'verbosity': 0, 'database': db})
+
+    def _fixture_teardown(self):
+        for db in self._get_databases():
+            call_command('flush', verbosity=0, interactive=False, database=db)
\ No newline at end of file
diff --git a/tests/tests.py b/tests/tests.py
index 4d84d5f1dd..fd73cdd435 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -2,20 +2,17 @@
 
 from __future__ import absolute_import
 
-import base64
 import datetime
 import getpass
 import logging
 import os.path
 import socket
-import time
 
 from django.conf import settings as django_settings
 from django.contrib.auth.models import User
 from django.core import mail
 from django.core.urlresolvers import reverse
 from django.core.signals import got_request_exception
-from django.test import TestCase, TransactionTestCase
 from django.template import TemplateSyntaxError
 from django.utils.encoding import smart_unicode
 from django.utils.functional import lazy
@@ -26,13 +23,13 @@ from sentry.client.models import get_client
 from sentry.conf import settings
 from sentry.models import Message, GroupedMessage, MessageCountByMinute, \
                           FilterValue, MessageFilterValue
-from sentry.utils import json, transform, get_signature, get_auth_header, \
-                         MockDjangoRequest
+from sentry.utils import transform, MockDjangoRequest
 from sentry.utils.compat import pickle
 from sentry.web.views import get_login_url
 
 from tests.models import TestModel, DuplicateKeyModel
-from tests.utils import TestServerThread, conditional_on_module
+from tests.testcases import TestCase, TransactionTestCase
+from tests.utils import TestServerThread, conditional_on_module, Settings
 
 # class NullHandler(logging.Handler):
 #     def emit(self, record):
@@ -50,62 +47,7 @@ logger = logging.getLogger('sentry.test')
 logger.addHandler(SentryHandler())
 logger.setLevel(logging.DEBUG)
 
-class Settings(object):
-    """
-    Allows you to define settings that are required for this function to work.
-
-    >>> with Settings(SENTRY_LOGIN_URL='foo'): #doctest: +SKIP
-    >>>     print settings.SENTRY_LOGIN_URL #doctest: +SKIP
-    """
-
-    NotDefined = object()
-
-    def __init__(self, **overrides):
-        self.overrides = overrides
-        self._orig = {}
-
-    def __enter__(self):
-        for k, v in self.overrides.iteritems():
-            self._orig[k] = getattr(django_settings, k, self.NotDefined)
-            setattr(django_settings, k, v)
-            if k.startswith('SENTRY_'):
-                setattr(settings, k.split('SENTRY_', 1)[1], v)
-
-    def __exit__(self, exc_type, exc_value, traceback):
-        for k, v in self._orig.iteritems():
-            if v is self.NotDefined:
-                delattr(django_settings, k)
-                if k.startswith('SENTRY_'):
-                    delattr(settings, k.split('SENTRY_', 1)[1])
-            else:
-                setattr(django_settings, k, v)
-                if k.startswith('SENTRY_'):
-                    setattr(settings, k.split('SENTRY_', 1)[1], v)
-
-class BaseTestCase(TestCase):
-    ## Helper methods for posting
-
-    urls = 'tests.urls'
-
-    def _postWithKey(self, data):
-        resp = self.client.post(reverse('sentry-store'), {
-            'data': base64.b64encode(pickle.dumps(transform(data))),
-            'key': settings.KEY,
-        })
-        return resp
-
-    def _postWithSignature(self, data):
-        ts = time.time()
-        message = base64.b64encode(json.dumps(transform(data)))
-        sig = get_signature(message, ts)
-
-        resp = self.client.post(reverse('sentry-store'), message,
-            content_type='application/octet-stream',
-            HTTP_AUTHORIZATION=get_auth_header(sig, ts, '_postWithSignature'),
-        )
-        return resp
-
-class SentryTest(BaseTestCase):
+class SentryTest(TestCase):
     ## Fixture setup/teardown
 
     def setUp(self):
@@ -1014,7 +956,7 @@ class SentryTest(BaseTestCase):
     #     self.assertEquals(group.times_seen, 1000)
     #     self.assertNotEquals(Message.objects.count(), 400)
 
-class SentryViewsTest(BaseTestCase):
+class SentryViewsTest(TestCase):
     fixtures = ['tests/fixtures/views.json']
 
     def setUp(self):
@@ -1089,7 +1031,7 @@ class SentryViewsTest(BaseTestCase):
         group = GroupedMessage.objects.get(pk=2)
         self.assertEquals(resp.context['group'], group)
 
-class SentryRemoteTest(BaseTestCase):
+class SentryRemoteTest(TestCase):
 
     def setUp(self):
         settings.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
@@ -1260,10 +1202,10 @@ class SentryRemoteServerTest(TransactionTestCase):
         logger.addHandler(logging.StreamHandler())
 
     def tearDown(self):
-        self.stop_test_server()
+        self.stop_dummy_server()
         settings.REMOTE_URL = None
 
-    def start_test_server(self, host='localhost', port=None):
+    def start_dummy_server(self, host='localhost', port=None):
         """Creates a live test server object (instance of WSGIServer)."""
         if not port:
             for port in xrange(8001, 8050):
@@ -1289,24 +1231,24 @@ class SentryRemoteServerTest(TransactionTestCase):
         if self.server_thread.error:
             raise self.server_thread.error
 
-    def stop_test_server(self):
+    def stop_dummy_server(self):
         if self.server_thread:
             settings.REMOTE_URL = self._orig_remote_url
             self.server_thread.join()
 
     def test_process(self):
-        self.start_test_server()
+        self.start_dummy_server()
         message_id = SentryClient().process(message='hello')
-        self.stop_test_server()
+        self.stop_dummy_server()
 
         self.assertTrue(message_id)
         instance = Message.objects.all().order_by('-id')[0]
         self.assertEquals(instance.message, 'hello')
 
     def test_external(self):
-        self.start_test_server()
+        self.start_dummy_server()
         path = reverse('sentry-raise-exc')
-        self.stop_test_server()
+        self.stop_dummy_server()
 
         self.assertRaises(Exception, self.client.get, path)
         instance = Message.objects.all().order_by('-id')[0]
@@ -1316,9 +1258,9 @@ class SentryRemoteServerTest(TransactionTestCase):
     def test_timestamp(self):
         timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
 
-        self.start_test_server()
+        self.start_dummy_server()
         message_id = SentryClient().process(message='hello', timestamp=timestamp)
-        self.stop_test_server()
+        self.stop_dummy_server()
 
         self.assertTrue(message_id)
         instance = Message.objects.all().order_by('-id')[0]
@@ -1328,7 +1270,7 @@ class SentryRemoteServerTest(TransactionTestCase):
         self.assertEquals(group.first_seen, timestamp)
         self.assertEquals(group.last_seen, timestamp)
 
-class SentryFeedsTest(BaseTestCase):
+class SentryFeedsTest(TestCase):
     fixtures = ['tests/fixtures/feeds.json']
 
     def test_message_feed(self):
@@ -1349,7 +1291,7 @@ class SentryFeedsTest(BaseTestCase):
         self.assertTrue('<link>http://testserver/group/1</link>' in response.content, response.content)
         self.assertTrue('<title>(1) TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
 
-class SentryMailTest(BaseTestCase):
+class SentryMailTest(TestCase):
     fixtures = ['tests/fixtures/mail.json']
 
     def setUp(self):
@@ -1416,7 +1358,7 @@ class SentryMailTest(BaseTestCase):
 
         self.assertTrue('http://example.com/group/2' in out.body, out.body)
 
-class SentryHelpersTest(BaseTestCase):
+class SentryHelpersTest(TestCase):
     def test_get_db_engine(self):
         from sentry.utils import get_db_engine
         _databases = getattr(django_settings, 'DATABASES', {}).copy()
@@ -1446,7 +1388,7 @@ class SentryHelpersTest(BaseTestCase):
         versions = get_versions(['sentry.client'])
         self.assertEquals(versions.get('sentry'), sentry.VERSION)
 
-class SentryTransformTest(BaseTestCase):
+class SentryTransformTest(TestCase):
     def test_bad_string(self):
         x = 'The following character causes problems: \xd4'
 
@@ -1479,7 +1421,7 @@ class SentryTransformTest(BaseTestCase):
         self.assertEquals(keys[0], 'foo')
         self.assertTrue(isinstance(keys[0], str))
 
-class SentryClientTest(BaseTestCase):
+class SentryClientTest(TestCase):
     def setUp(self):
         self._client = settings.CLIENT
 
@@ -1559,7 +1501,7 @@ class SentryClientTest(BaseTestCase):
     #
     #     settings.CLIENT = 'sentry.client.base.SentryClient'
 
-class SentryCleanupTest(BaseTestCase):
+class SentryCleanupTest(TestCase):
     fixtures = ['tests/fixtures/cleanup.json']
 
     def test_simple(self):
@@ -1634,7 +1576,7 @@ class SentryCleanupTest(BaseTestCase):
         self.assertEquals(MessageCountByMinute.objects.count(), 0)
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
-class SentrySearchTest(BaseTestCase):
+class SentrySearchTest(TestCase):
     @conditional_on_module('haystack')
     def test_build_index(self):
         from sentry.web.views import get_search_query_set
@@ -1644,7 +1586,7 @@ class SentrySearchTest(BaseTestCase):
         self.assertEquals(qs.count(), 1)
         self.assertEquals(qs[0:1][0].message, 'test search error')
 
-class SentryPluginTest(BaseTestCase):
+class SentryPluginTest(TestCase):
     def test_registration(self):
         from sentry.plugins import GroupActionProvider
         self.assertEquals(len(GroupActionProvider.plugins), 4)
diff --git a/tests/utils.py b/tests/utils.py
index ccc669b14b..86c922ab91 100644
--- a/tests/utils.py
+++ b/tests/utils.py
@@ -2,10 +2,12 @@ import socket
 import threading
 import warnings
 
+from django.conf import settings as django_settings
 from django.core.handlers.wsgi import WSGIHandler
 from django.core.management import call_command
 from django.core.servers import basehttp
 
+from sentry.conf import settings
 from sentry.utils.compat.db import connections
 
 class StoppableWSGIServer(basehttp.WSGIServer):
@@ -80,4 +82,36 @@ def conditional_on_module(module):
             else:
                 return func(self, *args, **kwargs)
         return inner
-    return wrapped
\ No newline at end of file
+    return wrapped
+
+class Settings(object):
+    """
+    Allows you to define settings that are required for this function to work.
+
+    >>> with Settings(SENTRY_LOGIN_URL='foo'): #doctest: +SKIP
+    >>>     print settings.SENTRY_LOGIN_URL #doctest: +SKIP
+    """
+
+    NotDefined = object()
+
+    def __init__(self, **overrides):
+        self.overrides = overrides
+        self._orig = {}
+
+    def __enter__(self):
+        for k, v in self.overrides.iteritems():
+            self._orig[k] = getattr(django_settings, k, self.NotDefined)
+            setattr(django_settings, k, v)
+            if k.startswith('SENTRY_'):
+                setattr(settings, k.split('SENTRY_', 1)[1], v)
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        for k, v in self._orig.iteritems():
+            if v is self.NotDefined:
+                delattr(django_settings, k)
+                if k.startswith('SENTRY_'):
+                    delattr(settings, k.split('SENTRY_', 1)[1])
+            else:
+                setattr(django_settings, k, v)
+                if k.startswith('SENTRY_'):
+                    setattr(settings, k.split('SENTRY_', 1)[1], v)
\ No newline at end of file
