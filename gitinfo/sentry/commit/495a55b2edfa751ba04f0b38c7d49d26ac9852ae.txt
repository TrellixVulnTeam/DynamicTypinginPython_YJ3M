commit 495a55b2edfa751ba04f0b38c7d49d26ac9852ae
Author: Mark Story <mark@mark-story.com>
Date:   Mon Apr 15 15:54:48 2019 -0400

    feat(saved-searches) Move create saved search button to search bar. (#12781)
    
    Move the create search button based on new mockups. Right now, newly
    created searches do not show up in the saved search picker, but that
    work is happening separately.
    
    Fixes SEN-476

diff --git a/src/sentry/static/sentry/app/components/smartSearchBar.jsx b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
index bf800ba948..ee8b716091 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
@@ -20,6 +20,7 @@ import Button from 'app/components/button';
 import InlineSvg from 'app/components/inlineSvg';
 import MemberListStore from 'app/stores/memberListStore';
 import SearchDropdown from 'app/views/stream/searchDropdown';
+import CreateSavedSearchButton from 'app/views/stream/createSavedSearchButton';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
@@ -629,7 +630,13 @@ class SmartSearchBar extends React.Component {
   };
 
   render() {
-    const {className, dropdownClassName, disabled} = this.props;
+    const {
+      className,
+      dropdownClassName,
+      organization,
+      placeholder,
+      disabled,
+    } = this.props;
 
     return (
       <div
@@ -646,7 +653,7 @@ class SmartSearchBar extends React.Component {
             <input
               type="text"
               className="search-input form-control"
-              placeholder={this.props.placeholder}
+              placeholder={placeholder}
               name="query"
               ref={this.searchInput}
               autoComplete="off"
@@ -657,9 +664,13 @@ class SmartSearchBar extends React.Component {
               onKeyDown={this.onKeyDown}
               onChange={this.onQueryChange}
               onClick={this.onInputClick}
-              disabled={this.props.disabled}
+              disabled={disabled}
             />
             <span className="icon-search" />
+            <CreateSavedSearchButton
+              query={this.state.query}
+              organization={organization}
+            />
             {this.state.query !== '' && (
               <React.Fragment>
                 {this.props.hasPinnedSearch && (
diff --git a/src/sentry/static/sentry/app/icons/icon-add-to-list.svg b/src/sentry/static/sentry/app/icons/icon-add-to-list.svg
index 1ee1c6614f..39055d7b0e 100644
--- a/src/sentry/static/sentry/app/icons/icon-add-to-list.svg
+++ b/src/sentry/static/sentry/app/icons/icon-add-to-list.svg
@@ -1 +1 @@
-<svg width="16" height="11" xmlns="http://www.w3.org/2000/svg"><g fill="#493E54" fill-rule="evenodd"><path d="M8.256 2c-.112.318-.19.653-.229 1H.5a.5.5 0 0 1 0-1h7.756zM8.758 6c.253.378.561.715.913 1H.5a.5.5 0 0 1 0-1h8.258z"/><rect y="10" width="12" height="1" rx=".5"/><path d="M12 4h-2a.5.5 0 0 1 0-1h2V1a.5.5 0 0 1 1 0v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0V4z" fill-rule="nonzero"/></g></svg>
\ No newline at end of file
+<svg width="16" height="11" xmlns="http://www.w3.org/2000/svg"><g fill="currentColor" fill-rule="evenodd"><path d="M8.256 2c-.112.318-.19.653-.229 1H.5a.5.5 0 0 1 0-1h7.756zM8.758 6c.253.378.561.715.913 1H.5a.5.5 0 0 1 0-1h8.258z"/><rect y="10" width="12" height="1" rx=".5"/><path d="M12 4h-2a.5.5 0 0 1 0-1h2V1a.5.5 0 0 1 1 0v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0V4z" fill-rule="nonzero"/></g></svg>
diff --git a/src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx b/src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx
new file mode 100644
index 0000000000..c90269ca28
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx
@@ -0,0 +1,166 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import Modal from 'react-bootstrap/lib/Modal';
+
+import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import Access from 'app/components/acl/access';
+import Feature from 'app/components/acl/feature';
+import Button from 'app/components/button';
+import Tooltip from 'app/components/tooltip';
+import {createSavedSearch} from 'app/actionCreators/savedSearches';
+import {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';
+import {TextField} from 'app/components/forms';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+
+class CreateSavedSearchButton extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+    query: PropTypes.string.isRequired,
+    organization: SentryTypes.Organization.isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      isModalOpen: false,
+      isSaving: false,
+      query: props.query,
+      name: '',
+      error: null,
+    };
+  }
+
+  onSubmit = e => {
+    const {api, organization} = this.props;
+
+    e.preventDefault();
+
+    this.setState({isSaving: true});
+
+    addLoadingMessage(t('Saving Changes'));
+
+    createSavedSearch(api, organization.slug, this.state.name, this.state.query)
+      .then(data => {
+        this.onToggle();
+        this.setState({
+          error: null,
+          isSaving: false,
+        });
+        clearIndicators();
+      })
+      .catch(err => {
+        let error = t('Unable to save your changes.');
+        if (err.responseJSON && err.responseJSON.detail) {
+          error = err.responseJSON.detail;
+        }
+        this.setState({
+          error,
+          isSaving: false,
+        });
+        clearIndicators();
+      });
+  };
+
+  onToggle = event => {
+    this.setState({
+      isModalOpen: !this.state.isModalOpen,
+    });
+
+    if (event) {
+      event.preventDefault();
+      event.stopPropagation();
+    }
+  };
+
+  handleChangeName = val => {
+    this.setState({name: val});
+  };
+
+  handleChangeQuery = val => {
+    this.setState({query: val});
+  };
+
+  render() {
+    const {isSaving, isModalOpen, error} = this.state;
+    const {organization, query} = this.props;
+
+    return (
+      <Feature organization={organization} features={['org-saved-searches']}>
+        <Access organization={organization} access={['org:write']}>
+          <Tooltip title={t('Add to organization filter list')}>
+            <StyledButton
+              size="zero"
+              borderless
+              onClick={this.onToggle}
+              data-test-id="save-current-search"
+              icon="icon-add-to-list"
+            />
+          </Tooltip>
+          <Modal show={isModalOpen} animation={false} onHide={this.onToggle}>
+            <form onSubmit={this.onSubmit}>
+              <div className="modal-header">
+                <h4>{t('Save Current Search')}</h4>
+              </div>
+
+              <div className="modal-body">
+                {this.state.error && (
+                  <div className="alert alert-error alert-block">{error}</div>
+                )}
+
+                <p>{t('All team members will now have access to this search.')}</p>
+                <TextField
+                  key="name"
+                  name="name"
+                  label={t('Name')}
+                  placeholder="e.g. My Search Results"
+                  required={true}
+                  onChange={this.handleChangeName}
+                />
+                <TextField
+                  key="query"
+                  name="query"
+                  label={t('Query')}
+                  value={query}
+                  required={true}
+                  onChange={this.handleChangeQuery}
+                />
+              </div>
+              <div className="modal-footer">
+                <Button
+                  priority="default"
+                  size="small"
+                  disabled={isSaving}
+                  onClick={this.onToggle}
+                  style={{marginRight: space(1)}}
+                >
+                  {t('Cancel')}
+                </Button>
+                <Button priority="primary" size="small" disabled={isSaving}>
+                  {t('Save')}
+                </Button>
+              </div>
+            </form>
+          </Modal>
+        </Access>
+      </Feature>
+    );
+  }
+}
+
+const StyledButton = styled(Button)`
+  position: absolute;
+  top: 9px;
+  right: 52px;
+
+  & svg {
+    color: ${p => p.theme.gray6};
+  }
+  &:hover svg {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
+export default withApi(CreateSavedSearchButton);
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 621352500f..b964484398 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -104,7 +104,6 @@ class StreamFilters extends React.Component {
             <OrganizationSavedSearchSelector
               organization={organization}
               savedSearchList={savedSearchList}
-              onSavedSearchCreate={onSavedSearchCreate}
               onSavedSearchSelect={onSavedSearchSelect}
               onSavedSearchDelete={onSavedSearchDelete}
               query={query}
diff --git a/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
index e46411b0c1..077a644fd3 100644
--- a/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 import styled from 'react-emotion';
-import Modal from 'react-bootstrap/lib/Modal';
 
 import {t} from 'app/locale';
 import Access from 'app/components/acl/access';
@@ -12,22 +11,17 @@ import DropdownButton from 'app/components/dropdownButton';
 import DropdownMenu from 'app/components/dropdownMenu';
 import InlineSvg from 'app/components/inlineSvg';
 import SentryTypes from 'app/sentryTypes';
-import {TextField} from 'app/components/forms';
 import space from 'app/styles/space';
-import withApi from 'app/utils/withApi';
-import {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';
-import {createSavedSearch} from 'app/actionCreators/savedSearches';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 
 export default class OrganizationSavedSearchSelector extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
     savedSearchList: PropTypes.array.isRequired,
-    onSavedSearchCreate: PropTypes.func.isRequired,
     onSavedSearchSelect: PropTypes.func.isRequired,
     onSavedSearchDelete: PropTypes.func.isRequired,
-    query: PropTypes.string.isRequired,
     searchId: PropTypes.string,
+    query: PropTypes.string,
   };
 
   getTitle() {
@@ -85,8 +79,6 @@ export default class OrganizationSavedSearchSelector extends React.Component {
   }
 
   render() {
-    const {organization, query, onSavedSearchCreate} = this.props;
-
     return (
       <Container>
         <DropdownMenu alwaysRenderMenu={true}>
@@ -101,20 +93,6 @@ export default class OrganizationSavedSearchSelector extends React.Component {
                 </StyledDropdownButton>
                 <MenuContainer {...getMenuProps({isStyled: true})} isOpen={isOpen}>
                   {this.renderList()}
-                  <Access
-                    organization={organization}
-                    access={['org:write']}
-                    renderNoAccessMessage={false}
-                  >
-                    <StyledMenuItem divider={true} />
-                    <ButtonBar>
-                      <SaveSearchButton
-                        query={query}
-                        organization={organization}
-                        onSave={onSavedSearchCreate}
-                      />
-                    </ButtonBar>
-                  </Access>
                 </MenuContainer>
               </React.Fragment>
             );
@@ -125,139 +103,6 @@ export default class OrganizationSavedSearchSelector extends React.Component {
   }
 }
 
-const SaveSearchButton = withApi(
-  class SaveSearchButton extends React.Component {
-    static propTypes = {
-      api: PropTypes.object.isRequired,
-      query: PropTypes.string.isRequired,
-      organization: SentryTypes.Organization.isRequired,
-      onSave: PropTypes.func.isRequired,
-    };
-
-    constructor(props) {
-      super(props);
-      this.state = {
-        isModalOpen: false,
-        isSaving: false,
-        query: props.query,
-        name: '',
-        error: null,
-      };
-    }
-
-    onSubmit = e => {
-      const {api, organization, onSave} = this.props;
-
-      e.preventDefault();
-
-      this.setState({isSaving: true});
-
-      addLoadingMessage(t('Saving Changes'));
-
-      createSavedSearch(api, organization.slug, this.state.name, this.state.query)
-        .then(data => {
-          onSave(data);
-          this.onToggle();
-          this.setState({
-            error: null,
-            isSaving: false,
-          });
-          clearIndicators();
-        })
-        .catch(err => {
-          let error = t('Unable to save your changes.');
-          if (err.responseJSON && err.responseJSON.detail) {
-            error = err.responseJSON.detail;
-          }
-          this.setState({
-            error,
-            isSaving: false,
-          });
-          clearIndicators();
-        });
-    };
-
-    onToggle = event => {
-      this.setState({
-        isModalOpen: !this.state.isModalOpen,
-      });
-
-      if (event) {
-        event.stopPropagation();
-      }
-    };
-
-    handleChangeName = val => {
-      this.setState({name: val});
-    };
-
-    handleChangeQuery = val => {
-      this.setState({query: val});
-    };
-
-    render() {
-      const {isSaving, isModalOpen} = this.state;
-
-      return (
-        <React.Fragment>
-          <Button
-            size="xsmall"
-            onClick={this.onToggle}
-            data-test-id="save-current-search"
-          >
-            {t('Save Current Search')}
-          </Button>
-          <Modal show={isModalOpen} animation={false} onHide={this.onToggle}>
-            <form onSubmit={this.onSubmit}>
-              <div className="modal-header">
-                <h4>{t('Save Current Search')}</h4>
-              </div>
-
-              <div className="modal-body">
-                {this.state.error && (
-                  <div className="alert alert-error alert-block">{this.state.error}</div>
-                )}
-
-                <p>{t('All team members will now have access to this search.')}</p>
-                <TextField
-                  key="name"
-                  name="name"
-                  label={t('Name')}
-                  placeholder="e.g. My Search Results"
-                  required={true}
-                  onChange={this.handleChangeName}
-                />
-                <TextField
-                  key="query"
-                  name="query"
-                  label={t('Query')}
-                  value={this.props.query}
-                  required={true}
-                  onChange={this.handleChangeQuery}
-                />
-              </div>
-              <div className="modal-footer">
-                <Button
-                  priority="default"
-                  size="small"
-                  disabled={isSaving}
-                  onClick={this.onToggle}
-                  style={{marginRight: space(1)}}
-                >
-                  {t('Cancel')}
-                </Button>
-                <Button priority="primary" size="small" disabled={isSaving}>
-                  {t('Save')}
-                </Button>
-              </div>
-            </form>
-          </Modal>
-        </React.Fragment>
-      );
-    }
-  }
-);
-
 const Container = styled.div`
   position: relative;
   display: block;
@@ -370,15 +215,3 @@ const EmptyItem = styled.li`
   padding: 8px 10px 5px;
   font-style: italic;
 `;
-
-const ButtonBar = styled.li`
-  padding: ${space(0.5)} ${space(1)};
-  display: flex;
-  justify-content: space-between;
-
-  & a {
-    /* need to override .dropdown-menu li a in shared-components.less */
-    padding: 0 !important;
-    line-height: 1 !important;
-  }
-`;
diff --git a/tests/js/spec/components/smartSearchBar.spec.jsx b/tests/js/spec/components/smartSearchBar.spec.jsx
index b0a260c95d..33db02513e 100644
--- a/tests/js/spec/components/smartSearchBar.spec.jsx
+++ b/tests/js/spec/components/smartSearchBar.spec.jsx
@@ -33,9 +33,8 @@ describe('removeSpace()', function() {
 });
 
 describe('SmartSearchBar', function() {
-  let options;
+  let options, organization, supportedTags;
   let environmentTagValuesMock;
-  let supportedTags;
   const tagValuesMock = jest.fn(() => Promise.resolve([]));
 
   beforeEach(function() {
@@ -43,9 +42,10 @@ describe('SmartSearchBar', function() {
     TagStore.onLoadTagsSuccess(TestStubs.Tags());
     tagValuesMock.mockClear();
     supportedTags = {};
+    organization = TestStubs.Organization({id: '123'});
 
     options = {
-      context: {organization: {id: '123'}},
+      context: {organization},
     };
 
     environmentTagValuesMock = MockApiClient.addMockResponse({
@@ -227,6 +227,7 @@ describe('SmartSearchBar', function() {
       const wrapper = mount(
         <SmartSearchBar
           onSearch={stubbedOnSearch}
+          organization={organization}
           orgId="123"
           projectId="456"
           query="is:unresolved"
@@ -245,6 +246,7 @@ describe('SmartSearchBar', function() {
     it('invokes onSearch() when search is cleared', async function() {
       jest.useRealTimers();
       const props = {
+        organization,
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved',
@@ -266,6 +268,7 @@ describe('SmartSearchBar', function() {
       projectId: '456',
       query: '',
       defaultQuery: 'is:unresolved',
+      organization,
       supportedTags,
     };
     const wrapper = mount(<SmartSearchBar {...props} />, options);
@@ -281,6 +284,7 @@ describe('SmartSearchBar', function() {
         orgId: '123',
         projectId: '456',
         query: '',
+        organization,
         supportedTags,
       };
       const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
@@ -295,6 +299,7 @@ describe('SmartSearchBar', function() {
         orgId: '123',
         projectId: '456',
         query: 'fu',
+        organization,
         supportedTags,
       };
       jest.useRealTimers();
@@ -313,6 +318,7 @@ describe('SmartSearchBar', function() {
         orgId: '123',
         projectId: '456',
         query: '!fu',
+        organization,
         supportedTags,
       };
       jest.useRealTimers();
@@ -331,6 +337,7 @@ describe('SmartSearchBar', function() {
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved fu',
+        organization,
         supportedTags,
       };
       jest.useRealTimers();
@@ -352,6 +359,7 @@ describe('SmartSearchBar', function() {
         projectId: '456',
         query: 'environment:production',
         excludeEnvironment: true,
+        organization,
         supportedTags,
       };
       const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
@@ -370,6 +378,7 @@ describe('SmartSearchBar', function() {
         orgId: '123',
         projectId: '456',
         query: 'timesSeen:',
+        organization,
         supportedTags,
       };
       const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
diff --git a/tests/js/spec/views/stream/createSavedSearchButton.spec.jsx b/tests/js/spec/views/stream/createSavedSearchButton.spec.jsx
new file mode 100644
index 0000000000..f8a81ddae0
--- /dev/null
+++ b/tests/js/spec/views/stream/createSavedSearchButton.spec.jsx
@@ -0,0 +1,83 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import CreateSavedSearchButton from 'app/views/stream/createSavedSearchButton';
+
+describe('CreateSavedSearchButton', function() {
+  let wrapper, organization, createMock;
+
+  beforeEach(function() {
+    organization = TestStubs.Organization({
+      features: ['org-saved-searches'],
+      access: ['org:write'],
+    });
+    wrapper = mount(
+      <CreateSavedSearchButton
+        organization={organization}
+        query="is:unresolved assigned:lyn@sentry.io"
+      />,
+      TestStubs.routerContext()
+    );
+
+    createMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/searches/',
+      method: 'POST',
+      body: {id: '1', name: 'test', query: 'is:unresolved assigned:lyn@sentry.io'},
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  describe('saves a search', function() {
+    it('clicking save search opens modal', function() {
+      expect(wrapper.find('ModalDialog')).toHaveLength(0);
+      wrapper.find('button[data-test-id="save-current-search"]').simulate('click');
+      expect(wrapper.find('ModalDialog')).toHaveLength(1);
+    });
+
+    it('saves a search', async function() {
+      wrapper.find('button[data-test-id="save-current-search"]').simulate('click');
+      wrapper.find('#id-name').simulate('change', {target: {value: 'new search name'}});
+      wrapper
+        .find('ModalDialog')
+        .find('Button[priority="primary"]')
+        .simulate('submit');
+
+      await tick();
+      expect(createMock).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: {
+            name: 'new search name',
+            query: 'is:unresolved assigned:lyn@sentry.io',
+            type: 0,
+          },
+        })
+      );
+    });
+
+    it('hides button if no feature', function() {
+      const orgWithoutFeature = TestStubs.Organization({
+        features: [],
+        access: ['org:write'],
+      });
+      wrapper.setProps({organization: orgWithoutFeature});
+
+      const button = wrapper.find('StyledButton');
+      expect(button).toHaveLength(0);
+    });
+
+    it('hides button if no access', function() {
+      const orgWithoutAccess = TestStubs.Organization({
+        features: ['org-saved-searches'],
+        access: ['org:read'],
+      });
+      wrapper.setProps({organization: orgWithoutAccess});
+
+      const button = wrapper.find('StyledButton');
+      expect(button).toHaveLength(0);
+    });
+  });
+});
diff --git a/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx b/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx
index 18242008bd..c866d9e787 100644
--- a/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx
+++ b/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx
@@ -4,7 +4,7 @@ import {mount} from 'enzyme';
 import OrganizationSavedSearchSelector from 'app/views/stream/organizationSavedSearchSelector';
 
 describe('OrganizationSavedSearchSelector', function() {
-  let wrapper, onCreate, onSelect, onDelete, organization, savedSearchList, createMock;
+  let wrapper, onCreate, onSelect, onDelete, organization, savedSearchList;
   beforeEach(function() {
     organization = TestStubs.Organization({access: ['org:write']});
     onSelect = jest.fn();
@@ -37,12 +37,6 @@ describe('OrganizationSavedSearchSelector', function() {
       />,
       TestStubs.routerContext()
     );
-
-    createMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/searches/',
-      method: 'POST',
-      body: {id: '1', name: 'test', query: 'is:unresolved assigned:lyn@sentry.io'},
-    });
   });
 
   afterEach(function() {
@@ -133,37 +127,4 @@ describe('OrganizationSavedSearchSelector', function() {
       expect(onDelete).toHaveBeenCalledWith(savedSearchList[1]);
     });
   });
-
-  describe('saves a search', function() {
-    it('clicking save search opens modal', function() {
-      wrapper.find('DropdownButton').simulate('click');
-      expect(wrapper.find('ModalDialog')).toHaveLength(0);
-      wrapper.find('Button[data-test-id="save-current-search"]').simulate('click');
-      expect(wrapper.find('ModalDialog')).toHaveLength(1);
-    });
-
-    it('saves a search', async function() {
-      wrapper.find('DropdownButton').simulate('click');
-      wrapper.find('Button[data-test-id="save-current-search"]').simulate('click');
-      wrapper.find('#id-name').simulate('change', {target: {value: 'test'}});
-      wrapper
-        .find('ModalDialog')
-        .find('Button[priority="primary"]')
-        .simulate('submit');
-
-      await tick();
-      expect(createMock).toHaveBeenCalled();
-      expect(onCreate).toHaveBeenCalled();
-    });
-
-    it('hides save search button if no access', function() {
-      const orgWithoutAccess = TestStubs.Organization({access: ['org:read']});
-
-      wrapper.setProps({organization: orgWithoutAccess});
-
-      const button = wrapper.find('SaveSearchButton');
-
-      expect(button).toHaveLength(0);
-    });
-  });
 });
