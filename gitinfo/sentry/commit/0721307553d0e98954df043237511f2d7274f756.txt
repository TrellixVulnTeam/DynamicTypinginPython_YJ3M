commit 0721307553d0e98954df043237511f2d7274f756
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 19 16:27:21 2016 -0700

    ui: migrate project settings to React
    
    - add various needed attributes to endpoint + serializer

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index cddb377cec..0fd9e807aa 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -9,6 +9,7 @@ from django.db import IntegrityError, transaction
 from django.utils import timezone
 from rest_framework import serializers, status
 from rest_framework.response import Response
+
 from sentry import features
 from sentry.utils.data_filters import FilterTypes
 from sentry.api.base import DocSection
@@ -16,6 +17,7 @@ from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.project import DetailedProjectSerializer
+from sentry.api.serializers.rest_framework import ListField, OriginField
 from sentry.models import (
     AuditLogEntryEvent, Group, GroupStatus, Project, ProjectBookmark, ProjectStatus,
     UserOption, Team,
@@ -71,12 +73,9 @@ def clean_newline_inputs(value, case_insensitive=True):
 class ProjectMemberSerializer(serializers.Serializer):
     isBookmarked = serializers.BooleanField()
     isSubscribed = serializers.BooleanField()
-    platform = serializers.CharField(required=False)
 
 
-class ProjectAdminSerializer(serializers.Serializer):
-    isBookmarked = serializers.BooleanField()
-    isSubscribed = serializers.BooleanField()
+class ProjectAdminSerializer(ProjectMemberSerializer):
     name = serializers.CharField(max_length=200)
     slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50)
     team = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50)
@@ -84,6 +83,18 @@ class ProjectAdminSerializer(serializers.Serializer):
     digestsMaxDelay = serializers.IntegerField(min_value=60, max_value=3600)
     subjectPrefix = serializers.CharField(max_length=200)
     subjectTemplate = serializers.CharField(max_length=200)
+    securityToken = serializers.RegexField(r'^[-a-zA-Z0-9+/=\s]+$', max_length=255)
+    securityTokenHeader = serializers.RegexField(r'^[a-zA-Z0-9_\-]+$', max_length=20)
+    verifySSL = serializers.BooleanField(required=False)
+    defaultEnvironment = serializers.CharField(required=False)
+    dataScrubber = serializers.BooleanField(required=False)
+    dataScrubberDefaults = serializers.BooleanField(required=False)
+    sensitiveFields = ListField(child=serializers.CharField(), required=False)
+    safeFields = ListField(child=serializers.CharField(), required=False)
+    scrubIPAddresses = serializers.BooleanField(required=False)
+    scrapeJavaScript = serializers.BooleanField(required=False)
+    allowedDomains = ListField(child=OriginField(), required=False)
+    resolveAge = serializers.IntegerField(required=False)
     platform = serializers.CharField(required=False)
 
     def validate_digestsMaxDelay(self, attrs, source):
@@ -93,6 +104,19 @@ class ProjectAdminSerializer(serializers.Serializer):
             )
         return attrs
 
+    def validate_slug(self, attrs, source):
+        slug = attrs[source]
+        project = self.context['project']
+        other = Project.objects.filter(
+            slug=slug,
+            organization=project.organization,
+        ).exclude(id=project.id).first()
+        if other is not None:
+            raise serializers.ValidationError(
+                'Another project (%s) is already using that slug' % other.name
+            )
+        return attrs
+
 
 class RelaxedProjectPermission(ProjectPermission):
     scope_map = {
@@ -166,8 +190,6 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                                      the bookmark flag.
         :param int digestsMinDelay:
         :param int digestsMaxDelay:
-        :param object options: optional options to override in the
-                               project settings.
         :auth: required
         """
         has_project_write = (
@@ -180,7 +202,14 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         else:
             serializer_cls = ProjectMemberSerializer
 
-        serializer = serializer_cls(data=request.DATA, partial=True)
+        serializer = serializer_cls(
+            data=request.DATA,
+            partial=True,
+            context={
+                'project': project,
+                'request': request,
+            },
+        )
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
@@ -257,6 +286,30 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         if result.get('subjectTemplate'):
             project.update_option('mail:subject_template',
                                   result['subjectTemplate'])
+        if result.get('defaultEnvironment'):
+            project.update_option('sentry:default_environment', result['defaultEnvironment'])
+        if result.get('scrubIPAddresses') is not None:
+            project.update_option('sentry:scrub_ip_address', result['scrubIPAddresses'])
+        if result.get('securityToken'):
+            project.update_option('sentry:token', result['securityToken'])
+        if result.get('securityTokenHeader'):
+            project.update_option('sentry:token_header', result['securityTokenHeader'])
+        if result.get('verifySSL') is not None:
+            project.update_option('sentry:verify_ssl', result['verifySSL'])
+        if result.get('dataScrubber') is not None:
+            project.update_option('sentry:scrub_data', result['dataScrubber'])
+        if result.get('dataScrubberDefaults') is not None:
+            project.update_option('sentry:scrub_defaults', result['dataScrubberDefaults'])
+        if result.get('sensitiveFields') is not None:
+            project.update_option('sentry:sensitive_fields', result['sensitiveFields'])
+        if result.get('safeFields') is not None:
+            project.update_option('sentry:safe_fields', result['safeFields'])
+        if result.get('resolveAge'):
+            project.update_option('sentry:resolve_age', result['resolveAge'])
+        if result.get('scrapeJavaScript') is not None:
+            project.update_option('sentry:scrape_javascript', result['scrapeJavaScript'])
+        if result.get('allowedDomains') is not None:
+            project.update_option('sentry:origins', result['allowedDomains'])
 
         if result.get('isSubscribed'):
             UserOption.objects.set_value(
@@ -267,6 +320,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 user=request.user, key='mail:alert', value=0, project=project
             )
 
+        # TODO(dcramer): rewrite options to use standard API config
         if has_project_write:
             options = request.DATA.get('options', {})
             if 'sentry:origins' in options:
@@ -296,6 +350,21 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     [s.strip().lower()
                      for s in options['sentry:sensitive_fields']]
                 )
+            if 'sentry:scrub_ip_address' in options:
+                project.update_option(
+                    'sentry:scrub_ip_address',
+                    bool(options['sentry:scrub_ip_address']),
+                )
+            if 'mail:subject_prefix' in options:
+                project.update_option(
+                    'mail:subject_prefix',
+                    options['mail:subject_prefix'],
+                )
+            if 'sentry:default_environment' in options:
+                project.update_option(
+                    'sentry:default_environment',
+                    options['sentry:default_environment'],
+                )
             if 'sentry:csp_ignored_sources_defaults' in options:
                 project.update_option(
                     'sentry:csp_ignored_sources_defaults',
@@ -306,6 +375,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     'sentry:csp_ignored_sources',
                     clean_newline_inputs(options['sentry:csp_ignored_sources'])
                 )
+            if 'sentry:blacklisted_ips' in options:
+                project.update_option(
+                    'sentry:blacklisted_ips',
+                    clean_newline_inputs(options['sentry:blacklisted_ips']),
+                )
             if 'feedback:branding' in options:
                 project.update_option(
                     'feedback:branding', '1' if options['feedback:branding'] else '0'
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index cee13d86a2..772feda1f5 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -8,7 +8,7 @@ from django.db.models import Q
 from django.db.models.aggregates import Count
 from django.utils import timezone
 
-from sentry import tsdb
+from sentry import tsdb, options
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.constants import StatsPeriod
@@ -187,6 +187,11 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
             'sentry:blacklisted_ips',
             'sentry:releases',
             'sentry:error_messages',
+            'sentry:scrape_javascript',
+            'sentry:token',
+            'sentry:token_header',
+            'sentry:verify_ssl',
+            'sentry:scrub_ip_address',
             'feedback:branding',
             'digests:mail:minimum_delay',
             'digests:mail:maximum_delay',
@@ -280,19 +285,6 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                 'latestRelease':
                 attrs['latest_release'],
                 'options': {
-                    'sentry:origins':
-                    '\n'.join(attrs['options'].get(
-                        'sentry:origins', ['*']) or []),
-                    'sentry:resolve_age':
-                    int(attrs['options'].get('sentry:resolve_age', 0)),
-                    'sentry:scrub_data':
-                    bool(attrs['options'].get('sentry:scrub_data', True)),
-                    'sentry:scrub_defaults':
-                    bool(attrs['options'].get('sentry:scrub_defaults', True)),
-                    'sentry:safe_fields':
-                    attrs['options'].get('sentry:safe_fields', []),
-                    'sentry:sensitive_fields':
-                    attrs['options'].get('sentry:sensitive_fields', []),
                     'sentry:csp_ignored_sources_defaults':
                     bool(attrs['options'].get(
                         'sentry:csp_ignored_sources_defaults', True)),
@@ -326,10 +318,28 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                     digests.maximum_delay,
                 ),
                 'subjectPrefix':
-                attrs['options'].get('mail:subject_prefix'),
+                attrs['options'].get('mail:subject_prefix', options.get('mail.subject-prefix')),
+                'allowedDomains':
+                attrs['options'].get(
+                    'sentry:origins', ['*']),
+                'resolveAge':
+                int(attrs['options'].get('sentry:resolve_age', 0)),
+                'dataScrubber':
+                bool(attrs['options'].get('sentry:scrub_data', True)),
+                'dataScrubberDefaults':
+                bool(attrs['options'].get('sentry:scrub_defaults', True)),
+                'safeFields':
+                attrs['options'].get('sentry:safe_fields', []),
+                'sensitiveFields':
+                attrs['options'].get('sentry:sensitive_fields', []),
                 'subjectTemplate':
                 attrs['options'].get(
                     'mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
+                'securityToken': attrs['options'].get('sentry:token') or obj.get_security_token(),
+                'securityTokenHeader': attrs['options'].get('sentry:token_header') or 'X-Sentry-Token',
+                'verifySSL': bool(attrs['options'].get('sentry:verify_ssl', False)),
+                'scrubIPAddresses': bool(attrs['options'].get('sentry:scrub_ip_address', False)),
+                'scrapeJavaScript': bool(attrs['options'].get('sentry:scrape_javascript', True)),
                 'organization':
                 attrs['org'],
                 'plugins':
diff --git a/src/sentry/api/serializers/rest_framework/origin.py b/src/sentry/api/serializers/rest_framework/origin.py
new file mode 100644
index 0000000000..526498ec7e
--- /dev/null
+++ b/src/sentry/api/serializers/rest_framework/origin.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+
+from sentry.utils.http import parse_uri_match
+
+
+class OriginField(serializers.CharField):
+    # Special case origins that don't fit the normal regex pattern, but are valid
+    WHITELIST_ORIGINS = ('*')
+
+    def from_native(self, data):
+        rv = super(OriginField, self).from_native(data)
+        if not rv:
+            return
+        if not self.is_valid_origin(rv):
+            raise serializers.ValidationError('%r is not an acceptable domain' % rv)
+        return rv
+
+    def is_valid_origin(self, value):
+        if value in self.WHITELIST_ORIGINS:
+            return True
+
+        bits = parse_uri_match(value)
+        # ports are not supported on matching expressions (yet)
+        if ':' in bits.domain:
+            return False
+
+        return True
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 6c7fcff208..002c7918da 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -16,6 +16,7 @@ from django.conf import settings
 from django.db import IntegrityError, models, transaction
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
+from uuid import uuid1
 
 from sentry.app import locks
 from sentry.constants import ObjectStatus
@@ -314,3 +315,11 @@ class Project(Model):
             return False
         else:
             return True
+
+    def get_security_token(self):
+        # TODO(dcramer): this update should happen within a lock
+        security_token = self.get_option('sentry:token', None)
+        if security_token is None:
+            security_token = uuid1().hex
+            self.update_option('sentry:token', security_token)
+        return security_token
diff --git a/src/sentry/static/sentry/app/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
index 4d3481b51d..d1718ab893 100644
--- a/src/sentry/static/sentry/app/components/forms/apiForm.jsx
+++ b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
@@ -48,6 +48,7 @@ export default class ApiForm extends Form {
           },
           error: error => {
             IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('There was an error saving your changes.'), 'error');
             this.onSubmitError(error);
           },
         });
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index fd0a28dd32..fbf54fdb69 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -62,8 +62,9 @@ export default class Form extends React.Component {
   onSubmitSuccess = data => {
     let curData = this.state.data;
     let newData = {};
-    Object.keys(data).forEach(k => {
-      if (curData.hasOwnProperty(k)) newData[k] = data[k];
+    Object.keys(curData).forEach(k => {
+      if (data.hasOwnProperty(k)) newData[k] = data[k];
+      else newData[k] = curData[k];
     });
 
     this.setState({
diff --git a/src/sentry/static/sentry/app/components/forms/genericField.jsx b/src/sentry/static/sentry/app/components/forms/genericField.jsx
index 67edd1eecf..e5f2509736 100644
--- a/src/sentry/static/sentry/app/components/forms/genericField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/genericField.jsx
@@ -31,7 +31,8 @@ export default class GenericField extends React.Component {
   render() {
     let config = this.props.config;
     let required = defined(config.required) ? config.required : true;
-    let props = Object.assign(Object.assign({}, config), {
+    let props = {
+      ...config,
       value: this.props.formData[config.name],
       onChange: this.props.onChange,
       label: config.label + (required ? '*' : ''),
@@ -46,7 +47,7 @@ export default class GenericField extends React.Component {
         defined(config.help) && config.help !== '' ? (
           <span dangerouslySetInnerHTML={{__html: config.help}} />
         ) : null,
-    });
+    };
 
     switch (config.type) {
       case 'secret':
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 8174d2be36..800c4f5aca 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -67,16 +67,16 @@ const ProjectHeader = React.createClass({
             </a>
           </BookmarkToggle>
           {access.has('project:write') && (
-            <a
+            <Link
               className={
                 navSection == 'settings'
                   ? 'btn btn-sm btn-default active'
                   : 'btn btn-sm btn-default'
               }
-              href={`/${org.slug}/${project.slug}/settings/`}
+              to={`/${org.slug}/${project.slug}/settings/`}
             >
               <span className="icon icon-settings" /> {t('Project Settings')}
-            </a>
+            </Link>
           )}
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 4f0a1c8228..0c1fe7d580 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -68,6 +68,7 @@ import ProjectDetails from './views/projectDetails';
 import ProjectDocsContext from './views/projectInstall/docsContext';
 import ProjectEvents from './views/projectEvents';
 import ProjectFilters from './views/projectFilters';
+import ProjectGeneralSettings from './views/projectGeneralSettings';
 import ProjectGettingStarted from './views/projectInstall/gettingStarted';
 import ProjectInstallOverview from './views/projectInstall/overview';
 import ProjectInstallPlatform from './views/projectInstall/platform';
@@ -226,8 +227,13 @@ const orgSettingsRoutes = [
 ];
 
 const projectSettingsRoutes = [
-  <IndexRedirect key="projects-index" to="alerts/" />,
-
+  <IndexRedirect key="projects-index" to="settings/" />,
+  <Route
+    key="settings/"
+    path="settings/"
+    name="General"
+    component={errorHandler(ProjectGeneralSettings)}
+  />,
   <Route
     key="alerts/"
     name="Alerts"
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
new file mode 100644
index 0000000000..5d70a7c120
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -0,0 +1,279 @@
+import React from 'react';
+
+import {
+  ApiForm,
+  BooleanField,
+  RangeField,
+  Select2Field,
+  TextareaField,
+  TextField,
+} from '../components/forms';
+import {t, tct} from '../locale';
+import AsyncView from './asyncView';
+
+class ListAsTextareaField extends TextareaField {
+  getValue(props, context) {
+    let value = super.getValue(props, context);
+    return value ? value.join('\n') : '';
+  }
+
+  coerceValue(value) {
+    return value.split('\n');
+  }
+}
+
+export default class ProjectGeneralSettings extends AsyncView {
+  static contextTypes = {
+    organization: React.PropTypes.object.isRequired,
+  };
+
+  getEndpoint() {
+    let {orgId, projectId} = this.props.params;
+    return `/projects/${orgId}/${projectId}/`;
+  }
+
+  getTeamChoices() {
+    return this.context.organization.teams
+      .filter(o => o.isMember)
+      .map(o => [o.id, o.slug]);
+  }
+
+  getResolveAgeAllowedValues() {
+    let i = 0;
+    let values = [];
+    while (i <= 168) {
+      values.push(i);
+      if (i < 12) {
+        i += 1;
+      } else if (i < 24) {
+        i += 3;
+      } else if (i < 36) {
+        i += 6;
+      } else if (i < 48) {
+        i += 12;
+      } else {
+        i += 24;
+      }
+    }
+    return values;
+  }
+
+  formatResolveAgeLabel(val) {
+    val = parseInt(val, 10);
+    if (val === 0) {
+      return 'Disabled';
+    } else if (val > 23 && val % 24 === 0) {
+      val = val / 24;
+      return val + ' day' + (val != 1 ? 's' : '');
+    }
+    return val + ' hour' + (val != 1 ? 's' : '');
+  }
+
+  renderBody() {
+    let project = this.state.data;
+    let initialData = {
+      name: project.name,
+      slug: project.slug,
+      allowedDomains: project.allowedDomains,
+      resolveAge: project.resolveAge,
+      dataScrubber: project.dataScrubber,
+      dataScrubberDefaults: project.dataScrubberDefaults,
+      sensitiveFields: project.sensitiveFields,
+      safeFields: project.safeFields,
+      defaultEnvironment: project.defaultEnvironment,
+      subjectPrefix: project.subjectPrefix,
+      scrubIpAddress: project.scrubIPAddresses,
+      securityToken: project.securityToken,
+      securityHeader: project.securityHeader,
+      securityTokenHeader: project.securityTokenHeader,
+      verifySSL: project.verifySSL,
+      scrapeJavaScript: project.scrapeJavaScript,
+    };
+
+    let teamChoices = this.getTeamChoices();
+
+    return (
+      <div>
+        <h2>{t('Project Settings')}</h2>
+        <ApiForm
+          initialData={initialData}
+          apiMethod="PUT"
+          apiEndpoint={this.getEndpoint()}
+        >
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Project Details')}</h3>
+            </div>
+            <div className="box-content with-padding">
+              <TextField
+                name="name"
+                label={t('Project Name')}
+                required={true}
+                placeholder={t('e.g. My Service Name')}
+              />
+              <TextField
+                name="slug"
+                label={t('Short name')}
+                required={true}
+                help={t('A unique ID used to identify this project.')}
+              />
+              {teamChoices.length > 1 ? (
+                <Select2Field
+                  name="team"
+                  label={t('Team')}
+                  required={true}
+                  choices={this.getTeamChoices()}
+                />
+              ) : null}
+            </div>
+          </div>
+
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Email')}</h3>
+            </div>
+            <div className="box-content with-padding">
+              <TextField
+                name="subjectPrefix"
+                label={t('Subject prefix')}
+                help={t('Choose a custom prefix for emails from this project.')}
+              />
+            </div>
+          </div>
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Event Settings')}</h3>
+            </div>
+            <div className="box-content with-padding">
+              <TextField
+                name="defaultEnvironment"
+                label={t('Default environment')}
+                help={t('The default selected environment when viewing issues.')}
+                placeholder={t('e.g. production')}
+              />
+              <RangeField
+                name="resolveAge"
+                label={t('Auto resolve')}
+                help={t(
+                  "Automatically resolve an issue if it hasn't been seen for this amount of time."
+                )}
+                min={0}
+                max={168}
+                step={1}
+                allowedValues={this.getResolveAgeAllowedValues()}
+                formatLabel={this.formatResolveAgeLabel}
+              />
+              <p>
+                <small>
+                  <strong>
+                    Note: Enabling auto resolve will immediately resolve anything that has
+                    not been seen within this period of time. There is no undo!
+                  </strong>
+                </small>
+              </p>
+            </div>
+          </div>
+
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Data Privacy')}</h3>
+            </div>
+            <div className="box-content with-padding">
+              <BooleanField
+                name="dataScrubber"
+                label={t('Data scrubber')}
+                help={t('Enable server-side data scrubbing.')}
+              />
+              <BooleanField
+                name="dataScrubberDefaults"
+                label={t('Use default scrubbers')}
+                help={t(
+                  'Apply default scrubbers to prevent things like passwords and credit cards from being stored.'
+                )}
+              />
+              <ListAsTextareaField
+                name="sensitiveFields"
+                label={t('Additional sensitive fields')}
+                help={t(
+                  'Additional field names to match against when scrubbing data. Separate multiple entries with a newline.'
+                )}
+                placeholder={t('e.g. email')}
+              />
+              <ListAsTextareaField
+                name="safeFields"
+                label={t('Safe fields')}
+                help={t(
+                  'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
+                )}
+                placeholder={t('e.g. email')}
+              />
+              <BooleanField
+                name="scrubIPAddresses"
+                label={t("Don't store IP Addresses")}
+                help={t('Prevent IP addresses from being stored for new events.')}
+              />
+            </div>
+          </div>
+
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Client Security')}</h3>
+            </div>
+            <div className="box-content with-padding">
+              <p>
+                {tct(
+                  'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',
+                  {
+                    link: <a href="https://github.com/getsentry/raven-js">raven-js</a>,
+                  }
+                )}{' '}
+                {tct(
+                  'This will restrict requests based on the [Origin] and [Referer] headers.',
+                  {
+                    Origin: <code>Origin</code>,
+                    Referer: <code>Referer</code>,
+                  }
+                )}
+              </p>
+              <ListAsTextareaField
+                name="allowedDomains"
+                label={t('Allowed domains')}
+                help={t('Separate multiple entries with a newline.')}
+                placeholder={t('e.g. https://example.com or example.com')}
+              />
+              <BooleanField
+                name="scrapeJavaScript"
+                label={t('Enable JavaScript source fetching')}
+                help={t(
+                  'Allow Sentry to scrape missing JavaScript source context when possible.'
+                )}
+              />
+              <TextField
+                name="securityToken"
+                label={t('Security token')}
+                help={t(
+                  'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
+                )}
+              />
+              <TextField
+                name="securityTokenHeader"
+                label={t('Security token header')}
+                help={t(
+                  'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
+                )}
+                placeholder={t('e.g. X-Sentry-Token')}
+              />
+              <BooleanField
+                name="verifySSL"
+                label={t('Verify TLS/SSL')}
+                help={t(
+                  'Outbound requests will verify TLS (sometimes known as SSL) connections.'
+                )}
+              />
+            </div>
+          </div>
+        </ApiForm>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index e85eba77c4..f3678da521 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -87,9 +87,9 @@ const ProjectSettings = React.createClass({
         <div className="col-md-2">
           <h6 className="nav-header">{t('Configuration')}</h6>
           <ul className="nav nav-stacked">
-            <li>
-              <a href={`${settingsUrlRoot}/`}>{t('General')}</a>
-            </li>
+            <ListLink to={`/${orgId}/${projectId}/settings/`} index={true}>
+              {t('General')}
+            </ListLink>
             <ListLink
               to={`/${orgId}/${projectId}/settings/alerts/`}
               isActive={loc => path.indexOf(loc.pathname) === 0}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index f1d9aebedb..7f946bd77c 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -29,66 +29,6 @@
 {% endblock %}
 
 {% block main %}
-  <h2>{% trans "Project Settings" %}</h2>
-  <form class="form-stacked" action="" method="post" id="project_settings">
-    {% csrf_token %}
-
-    {{ form|as_crispy_errors }}
-
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Project Details" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        {{ form.name|as_crispy_field }}
-        {{ form.slug|as_crispy_field }}
-        {{ form.team|as_crispy_field }}
-      </div>
-    </div>
-
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Email" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        {{ form.mail_subject_prefix|as_crispy_field }}
-      </div>
-    </div>
-
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Event Settings" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        {{ form.default_environment|as_crispy_field }}
-        {{ form.resolve_age|as_crispy_field }}
-        <p><small><strong>Note: Enabling auto resolve will immediately resolve anything that has not been seen within this period of time. There is no undo!</strong></small></p>
-        {{ form.scrub_data|as_crispy_field }}
-        {{ form.scrub_defaults|as_crispy_field }}
-        {{ form.sensitive_fields|as_crispy_field }}
-        {{ form.safe_fields|as_crispy_field }}
-        {{ form.scrub_ip_address|as_crispy_field }}
-      </div>
-    </div>
-
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Client Security" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        {% with form.origins as field %}
-        <p>{% blocktrans with 'https://github.com/getsentry/raven-js' as link %}Configure origin URLs which Sentry should accept events from. This is used for communication with clients like <a href="{{ link }}">raven-js</a>.{% endblocktrans %}
-        <br>
-        {% blocktrans %}This will restrict requests based on the <code>Origin</code> and <code>Referer</code> headers.{% endblocktrans %}</p>
-        {{ field|as_crispy_field }}
-        {% endwith %}
-        {{ form.scrape_javascript|as_crispy_field }}
-        {{ form.token|as_crispy_field }}
-        {{ form.token_header|as_crispy_field }}
-        {{ form.verify_ssl|as_crispy_field }}
-      </div>
-    </div>
-
     <div class="box">
       <div class="box-header">
         <h3>{% trans "Remove Project" %}</h3>
@@ -127,61 +67,8 @@
       </div>
     </div>
 
-    <div class="form-actions">
-      <button type="submit" class="btn btn-primary btn-lg">{% trans "Save Changes" %}</button>
-    </div>
-  </form>
-
   <script>
   (function(){
-    var formatHours = function(val) {
-      val = parseInt(val, 10);
-      if (val === 0) {
-          return 'Disabled';
-      } else if (val > 23 && val % 24 === 0) {
-          val = (val / 24);
-          return val + ' day' + (val != 1 ? 's' : '');
-      }
-      return val + ' hour' + (val != 1 ? 's' : '');
-    }
-
-    $("input[type=range]").each(function(n, el){
-      var $el = $(el),
-          min = parseInt($el.attr('min'), 10),
-          max = parseInt($el.attr('max'), 10),
-          step = parseInt($el.attr('step'), 10),
-          values = [],
-          $value = $('<span class="value"></span>');
-
-      var i = min;
-      while (i <= max) {
-        values.push(i);
-        if (i < 12) {
-          i += 1;
-        } else if (i < 24) {
-          i += 3;
-        } else if (i < 36) {
-          i += 6;
-        } else if (i < 48) {
-          i += 12;
-        } else {
-          i += 24;
-        }
-      }
-
-      $el.on("slider:ready", function(event, data) {
-        $value.appendTo(data.el);
-        $value.html(formatHours(data.value));
-      }).on("slider:changed", function(event, data) {
-        $value.html(formatHours(data.value));
-      }).simpleSlider({
-        range: [min, max],
-        step: step,
-        allowedValues: values,
-        snap: true
-      });
-    });
-
     $.each({{ form.org_overrides|to_json|safe }}, function(n, value) {
       if ($('#id_' + value).attr('disabled')) {
         $('<span/>').addClass('disabled-indicator tip')
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
deleted file mode 100644
index 4b33c149b0..0000000000
--- a/src/sentry/web/frontend/project_settings.py
+++ /dev/null
@@ -1,354 +0,0 @@
-from __future__ import absolute_import
-
-import re
-
-from django import forms
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils.safestring import mark_safe
-from django.utils.translation import ugettext_lazy as _
-from uuid import uuid1
-
-from sentry import options
-from sentry.models import AuditLogEntryEvent, Project, Team
-from sentry.web.forms.fields import (
-    CustomTypedChoiceField,
-    RangeField,
-    OriginsField,
-)
-from sentry.web.frontend.base import ProjectView
-
-BLANK_CHOICE = [("", "")]
-
-
-class EditProjectForm(forms.ModelForm):
-    name = forms.CharField(
-        label=_('Project Name'),
-        max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('Production')})
-    )
-    slug = forms.SlugField(
-        label=_('Short name'),
-        help_text=_('A unique ID used to identify this project.'),
-    )
-    team = CustomTypedChoiceField(choices=(), coerce=int, required=False)
-    origins = OriginsField(
-        label=_('Allowed Domains'),
-        required=False,
-        help_text=_('Separate multiple entries with a newline.')
-    )
-    token = forms.CharField(
-        label=_('Security token'),
-        help_text=_(
-            'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
-        ),
-        required=True,
-    )
-    token_header = forms.CharField(
-        label=_('Security token header'),
-        help_text=_(
-            'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
-        ),
-        widget=forms.TextInput(attrs={
-            'placeholder': _('X-Sentry-Token'),
-        }),
-        required=False,
-    )
-    verify_ssl = forms.BooleanField(
-        label=_('Verify TLS/SSL'),
-        help_text=_('Outbound requests will verify TLS (sometimes known as SSL) connections.'),
-        required=False,
-    )
-    resolve_age = RangeField(
-        label=_('Auto resolve'),
-        required=False,
-        min_value=0,
-        max_value=720,
-        step_value=1,
-        help_text=_(
-            'Automatically resolve an issue if it hasn\'t been seen for this amount of time.'
-        )
-    )
-    scrub_data = forms.BooleanField(
-        label=_('Data Scrubber'), help_text=_('Enable server-side data scrubbing.'), required=False
-    )
-    scrub_defaults = forms.BooleanField(
-        label=_('Use Default Scrubbers'),
-        help_text=_(
-            'Apply default scrubbers to prevent things like passwords and credit cards from being stored.'
-        ),
-        required=False
-    )
-    sensitive_fields = forms.CharField(
-        label=_('Additional sensitive fields'),
-        help_text=_(
-            'Additional field names to match against when scrubbing data. Separate multiple entries with a newline.'
-        ),
-        widget=forms.Textarea(
-            attrs={
-                'placeholder': mark_safe(_('e.g. email')),
-                'class': 'span8',
-                'rows': '3',
-            }
-        ),
-        required=False,
-    )
-    safe_fields = forms.CharField(
-        label=_('Safe fields'),
-        help_text=_(
-            'Field names which data scrubbers should ignore. '
-            'Separate multiple entries with a newline.'
-        ),
-        widget=forms.Textarea(
-            attrs={
-                'placeholder': mark_safe(_('e.g. email')),
-                'class': 'span8',
-                'rows': '3',
-            }
-        ),
-        required=False,
-    )
-    scrub_ip_address = forms.BooleanField(
-        label=_('Don\'t store IP Addresses'),
-        help_text=_('Prevent IP addresses from being stored for new events.'),
-        required=False
-    )
-
-    # JavaScript options
-    scrape_javascript = forms.BooleanField(
-        label=_('Enable JavaScript source fetching'),
-        help_text=_('Allow Sentry to scrape missing JavaScript source context when possible.'),
-        required=False,
-    )
-
-    # Options that are overridden by Organization level settings
-    org_overrides = ('scrub_data', 'scrub_defaults', 'scrub_ip_address')
-
-    default_environment = forms.CharField(
-        label=_('Default Environment'),
-        help_text=_('The default selected environment when viewing issues.'),
-        widget=forms.TextInput(attrs={'placeholder': _('e.g. production')}),
-        required=False,
-    )
-    mail_subject_prefix = forms.CharField(
-        label=_('Subject Prefix'),
-        required=False,
-        help_text=_('Choose a custom prefix for emails from this project.')
-    )
-
-    class Meta:
-        fields = ('name', 'team', 'slug')
-        model = Project
-
-    def __init__(self, request, organization, team_list, data, instance, *args, **kwargs):
-        # First, we need to check for the value overrides from the Organization options
-        # We need to do this before `initial` gets passed into the Form.
-        disabled = []
-        if 'initial' in kwargs:
-            for opt in self.org_overrides:
-                value = bool(organization.get_option('sentry:require_%s' % (opt, ), False))
-                if value:
-                    disabled.append(opt)
-                    kwargs['initial'][opt] = value
-
-        super(EditProjectForm, self).__init__(data=data, instance=instance, *args, **kwargs)
-
-        self.organization = organization
-        self.team_list = team_list
-
-        self.fields['team'].choices = self.get_team_choices(team_list, instance.team)
-        self.fields['team'].widget.choices = self.fields['team'].choices
-
-        # After the Form is initialized, we now need to disable the fields that have been
-        # overridden from Organization options.
-        for opt in disabled:
-            self.fields[opt].widget.attrs['disabled'] = 'disabled'
-
-    def get_team_label(self, team):
-        return '%s (%s)' % (team.name, team.slug)
-
-    def get_team_choices(self, team_list, default=None):
-        sorted_team_list = sorted(team_list, key=lambda x: x.name)
-
-        choices = []
-        for team in sorted_team_list:
-            # TODO: optimize queries
-            choices.append((team.id, self.get_team_label(team)))
-
-        if default is None:
-            choices.insert(0, (-1, mark_safe('&ndash;' * 8)))
-        elif default not in sorted_team_list:
-            choices.insert(0, (default.id, self.get_team_label(default)))
-
-        return choices
-
-    def clean_sensitive_fields(self):
-        value = self.cleaned_data.get('sensitive_fields')
-        if not value:
-            return
-
-        return filter(bool, (v.lower().strip() for v in value.split('\n')))
-
-    def clean_safe_fields(self):
-        value = self.cleaned_data.get('safe_fields')
-        if not value:
-            return
-
-        return filter(bool, (v.lower().strip() for v in value.split('\n')))
-
-    def clean_team(self):
-        value = self.cleaned_data.get('team')
-        if not value:
-            return
-
-        # TODO: why is this not already an int?
-        value = int(value)
-        if value == -1:
-            return
-
-        if self.instance.team and value == self.instance.team.id:
-            return self.instance.team
-
-        for team in self.team_list:
-            if value == team.id:
-                return team
-
-        raise forms.ValidationError('Unable to find chosen team')
-
-    def clean_slug(self):
-        slug = self.cleaned_data.get('slug')
-        if not slug:
-            return
-        other = Project.objects.filter(
-            slug=slug, organization=self.organization
-        ).exclude(id=self.instance.id).first()
-        if other is not None:
-            raise forms.ValidationError(
-                'Another project (%s) is already '
-                'using that slug' % other.name
-            )
-        return slug
-
-    def clean_token(self):
-        token = self.cleaned_data.get('token')
-        if not token:
-            return
-        token_re = r'^[-a-zA-Z0-9+/= ]{1,255}$'
-        if not re.match(token_re, token):
-            raise forms.ValidationError('Invalid security token, must be: %s' % token_re)
-        return token
-
-    def clean_token_header(self):
-        token_header = self.cleaned_data.get('token_header')
-        if not token_header:
-            return
-        header_re = r'^[a-zA-Z0-9-]{1,20}$'
-        if not re.match(header_re, token_header):
-            raise forms.ValidationError('Invalid header value, must be: %s' % header_re)
-        return token_header
-
-
-class ProjectSettingsView(ProjectView):
-    required_scope = 'project:write'
-
-    def get_form(self, request, project):
-        organization = project.organization
-        team_list = [
-            t for t in Team.objects.get_for_user(
-                organization=organization,
-                user=request.user,
-            ) if request.access.has_team_scope(t, self.required_scope)
-        ]
-
-        # TODO(dcramer): this update should happen within a lock
-        security_token = project.get_option('sentry:token', None)
-        if security_token is None:
-            security_token = uuid1().hex
-            project.update_option('sentry:token', security_token)
-
-        return EditProjectForm(
-            request,
-            organization,
-            team_list,
-            request.POST or None,
-            instance=project,
-            initial={
-                'origins':
-                '\n'.join(project.get_option('sentry:origins', ['*'])),
-                'token':
-                security_token,
-                'token_header':
-                project.get_option('sentry:token_header'),
-                'verify_ssl':
-                bool(project.get_option('sentry:verify_ssl', False)),
-                'resolve_age':
-                int(project.get_option('sentry:resolve_age', 0)),
-                'scrub_data':
-                bool(project.get_option('sentry:scrub_data', True)),
-                'scrub_defaults':
-                bool(project.get_option('sentry:scrub_defaults', True)),
-                'sensitive_fields':
-                '\n'.join(project.get_option('sentry:sensitive_fields', None) or []),
-                'safe_fields':
-                '\n'.join(project.get_option('sentry:safe_fields', None) or []),
-                'scrub_ip_address':
-                bool(project.get_option('sentry:scrub_ip_address', False)),
-                'scrape_javascript':
-                bool(project.get_option('sentry:scrape_javascript', True)),
-                'default_environment':
-                project.get_option('sentry:default_environment'),
-                'mail_subject_prefix':
-                project.get_option('mail:subject_prefix', options.get('mail.subject-prefix')),
-            },
-        )
-
-    def handle(self, request, organization, team, project):
-        form = self.get_form(request, project)
-
-        if form.is_valid():
-            project = form.save()
-            for opt in (
-                'origins', 'token', 'token_header', 'verify_ssl', 'resolve_age', 'scrub_data',
-                'scrub_defaults', 'sensitive_fields', 'safe_fields', 'scrub_ip_address',
-                'scrape_javascript', 'default_environment', 'mail_subject_prefix',
-            ):
-                opt_key = 'sentry:{}'.format(opt)
-
-                # Value can't be overridden if set on the org level
-                if opt in form.org_overrides and organization.get_option(opt_key, False):
-                    continue
-                if opt == 'mail_subject_prefix':
-                    key = 'mail:subject_prefix'
-                else:
-                    key = 'sentry:%s' % (opt, )
-                value = form.cleaned_data.get(opt)
-                if value is None:
-                    project.delete_option(key)
-                else:
-                    project.update_option(key, value)
-
-            self.create_audit_entry(
-                request,
-                organization=organization,
-                target_object=project.id,
-                event=AuditLogEntryEvent.PROJECT_EDIT,
-                data=project.get_audit_log_data(),
-            )
-
-            messages.add_message(
-                request, messages.SUCCESS, _('Changes to your project were saved.')
-            )
-
-            redirect = reverse(
-                'sentry-manage-project', args=[project.organization.slug, project.slug]
-            )
-
-            return HttpResponseRedirect(redirect)
-
-        context = {
-            'form': form,
-            'page': 'details',
-        }
-
-        return self.respond('sentry/projects/manage.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index d9455a4aaf..c695185690 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -46,7 +46,6 @@ from sentry.web.frontend.out import OutView
 from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
 from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
-from sentry.web.frontend.project_settings import ProjectSettingsView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
 from sentry.web.frontend.reactivate_account import ReactivateAccountView
 from sentry.web.frontend.release_webhook import ReleaseWebhookView
@@ -413,7 +412,7 @@ urlpatterns += patterns(
     # Settings - Projects
     url(
         r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/$',
-        ProjectSettingsView.as_view(),
+        react_page_view,
         name='sentry-manage-project'
     ),
     url(
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 01b5092271..9929f9137e 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -65,28 +65,13 @@ class ProjectDetailsTest(APITestCase):
 
 
 class ProjectUpdateTest(APITestCase):
-    def test_simple(self):
-        project = self.project  # force creation
+    def setUp(self):
+        super(ProjectUpdateTest, self).setUp()
+        self.path = reverse('sentry-api-0-project-details', kwargs={
+            'organization_slug': self.project.organization.slug,
+            'project_slug': self.project.slug,
+        })
         self.login_as(user=self.user)
-        url = reverse(
-            'sentry-api-0-project-details',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-            }
-        )
-        resp = self.client.put(
-            url, data={
-                'name': 'hello world',
-                'slug': 'foobar',
-                'platform': 'cocoa',
-            }
-        )
-        assert resp.status_code == 200, resp.content
-        project = Project.objects.get(id=project.id)
-        assert project.name == 'hello world'
-        assert project.slug == 'foobar'
-        assert project.platform == 'cocoa'
 
     def test_team_changes(self):
         project = self.create_project()
@@ -126,9 +111,10 @@ class ProjectUpdateTest(APITestCase):
         assert resp.status_code == 400, resp.content
         assert resp.data['detail'][0] == 'The new team is not found.'
         project = Project.objects.get(id=project.id)
+
         assert project.team == self.team
 
-    def test_member_changes(self):
+    def test_simple_member_restriction(self):
         project = self.create_project()
         user = self.create_user('bar@example.com')
         self.create_member(
@@ -137,24 +123,15 @@ class ProjectUpdateTest(APITestCase):
             teams=[project.team],
             role='member',
         )
-        self.login_as(user=user)
-        url = reverse(
-            'sentry-api-0-project-details',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-            }
-        )
-        response = self.client.put(
-            url, data={
-                'isBookmarked': 'true',
-            }
-        )
-        assert response.status_code == 200
-
-        assert ProjectBookmark.objects.filter(
+        self.login_as(user)
+        resp = self.client.put(self.path, data={
+            'slug': 'zzz',
+            'isBookmarked': 'true',
+        })
+        assert resp.status_code == 403
+        assert not ProjectBookmark.objects.filter(
             user=user,
-            project_id=project.id,
+            project_id=self.project.id,
         ).exists()
 
     def test_member_changes_permission_denied(self):
@@ -189,16 +166,41 @@ class ProjectUpdateTest(APITestCase):
             project_id=project.id,
         ).exists()
 
+    def test_name(self):
+        resp = self.client.put(self.path, data={
+            'name': 'hello world',
+        })
+        assert resp.status_code == 200, resp.content
+        project = Project.objects.get(id=self.project.id)
+        assert project.name == 'hello world'
+
+    def test_slug(self):
+        resp = self.client.put(self.path, data={
+            'slug': 'foobar',
+        })
+        assert resp.status_code == 200, resp.content
+        project = Project.objects.get(id=self.project.id)
+        assert project.slug == 'foobar'
+
+    def test_invalid_slug(self):
+        new_project = self.create_project()
+        resp = self.client.put(self.path, data={
+            'slug': new_project.slug,
+        })
+
+        assert resp.status_code == 400
+        project = Project.objects.get(id=self.project.id)
+        assert project.slug != new_project.slug
+
+    def test_platform(self):
+        resp = self.client.put(self.path, data={
+            'platform': 'cocoa',
+        })
+        assert resp.status_code == 200, resp.content
+        project = Project.objects.get(id=self.project.id)
+        assert project.platform == 'cocoa'
+
     def test_options(self):
-        project = self.project  # force creation
-        self.login_as(user=self.user)
-        url = reverse(
-            'sentry-api-0-project-details',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-            }
-        )
         options = {
             'sentry:origins': 'foo\nbar',
             'sentry:resolve_age': 1,
@@ -213,9 +215,9 @@ class ProjectUpdateTest(APITestCase):
             'filters:error_messages': 'TypeError*\n*: integer division by modulo or zero',
         }
         with self.feature('projects:custom-inbound-filters'):
-            resp = self.client.put(url, data={'options': options})
+            resp = self.client.put(self.path, data={'options': options})
         assert resp.status_code == 200, resp.content
-        project = Project.objects.get(id=project.id)
+        project = Project.objects.get(id=self.project.id)
         assert project.get_option('sentry:origins', []) == options['sentry:origins'].split('\n')
         assert project.get_option('sentry:resolve_age', 0) == options['sentry:resolve_age']
         assert project.get_option('sentry:scrub_data', True) == options['sentry:scrub_data']
@@ -234,69 +236,132 @@ class ProjectUpdateTest(APITestCase):
         ]
 
     def test_bookmarks(self):
-        project = self.project  # force creation
-        self.login_as(user=self.user)
-        url = reverse(
-            'sentry-api-0-project-details',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-            }
-        )
-        resp = self.client.put(
-            url, data={
-                'isBookmarked': 'true',
-            }
-        )
-        assert resp.status_code == 200, resp.content
-        assert ProjectBookmark.objects.filter(
-            project_id=project.id,
-            user=self.user,
-        ).exists()
-
-        resp = self.client.put(
-            url, data={
-                'isBookmarked': 'false',
-            }
-        )
+        resp = self.client.put(self.path, data={
+            'isBookmarked': 'false',
+        })
         assert resp.status_code == 200, resp.content
         assert not ProjectBookmark.objects.filter(
-            project_id=project.id,
+            project_id=self.project.id,
             user=self.user,
         ).exists()
 
     def test_subscription(self):
-        project = self.project  # force creation
-        self.login_as(user=self.user)
-        url = reverse(
-            'sentry-api-0-project-details',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-            }
-        )
-        resp = self.client.put(
-            url, data={
-                'isSubscribed': 'true',
-            }
-        )
+        resp = self.client.put(self.path, data={
+            'isSubscribed': 'true',
+        })
         assert resp.status_code == 200, resp.content
         assert UserOption.objects.get(
             user=self.user,
-            project=project,
+            project=self.project,
         ).value == 1
 
-        resp = self.client.put(
-            url, data={
-                'isSubscribed': 'false',
-            }
-        )
+        resp = self.client.put(self.path, data={
+            'isSubscribed': 'false',
+        })
         assert resp.status_code == 200, resp.content
         assert UserOption.objects.get(
             user=self.user,
-            project=project,
+            project=self.project,
         ).value == 0
 
+    def test_security_token(self):
+        resp = self.client.put(self.path, data={
+            'securityToken': 'fizzbuzz',
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_security_token() == 'fizzbuzz'
+        assert resp.data['securityToken'] == 'fizzbuzz'
+
+    def test_security_token_header(self):
+        resp = self.client.put(self.path, data={
+            'securityTokenHeader': 'X-Hello-World',
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:token_header') == 'X-Hello-World'
+        assert resp.data['securityTokenHeader'] == 'X-Hello-World'
+
+    def test_verify_ssl(self):
+        resp = self.client.put(self.path, data={
+            'verifySSL': False,
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:verify_ssl') is False
+        assert resp.data['verifySSL'] is False
+
+    def test_scrub_ip_address(self):
+        resp = self.client.put(self.path, data={
+            'scrubIPAddresses': True,
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:scrub_ip_address') is True
+        assert resp.data['scrubIPAddresses'] is True
+
+    def test_scrape_javascript(self):
+        resp = self.client.put(self.path, data={
+            'scrapeJavaScript': False,
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:scrape_javascript') is False
+        assert resp.data['scrapeJavaScript'] is False
+
+    def test_default_environment(self):
+        resp = self.client.put(self.path, data={
+            'defaultEnvironment': 'dev',
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:default_environment') == 'dev'
+        assert resp.data['defaultEnvironment'] == 'dev'
+
+    def test_resolve_age(self):
+        resp = self.client.put(self.path, data={
+            'resolveAge': 5,
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:resolve_age') == 5
+        assert resp.data['resolveAge'] == 5
+
+    def test_allowed_domains(self):
+        resp = self.client.put(self.path, data={
+            'allowedDomains': ['foobar.com', 'https://example.com'],
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:origins') == ['foobar.com', 'https://example.com']
+        assert resp.data['allowedDomains'] == ['foobar.com', 'https://example.com']
+
+    def test_safe_fields(self):
+        resp = self.client.put(self.path, data={
+            'safeFields': ['foobar.com', 'https://example.com'],
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:safe_fields') == [
+            'foobar.com', 'https://example.com']
+        assert resp.data['safeFields'] == ['foobar.com', 'https://example.com']
+
+    def test_sensitive_fields(self):
+        resp = self.client.put(self.path, data={
+            'sensitiveFields': ['foobar.com', 'https://example.com'],
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:sensitive_fields') == [
+            'foobar.com', 'https://example.com']
+        assert resp.data['sensitiveFields'] == ['foobar.com', 'https://example.com']
+
+    def test_data_scrubber(self):
+        resp = self.client.put(self.path, data={
+            'dataScrubber': False,
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:scrub_data') is False
+        assert resp.data['dataScrubber'] is False
+
+    def test_data_scrubber_defaults(self):
+        resp = self.client.put(self.path, data={
+            'dataScrubberDefaults': False,
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:scrub_defaults') is False
+        assert resp.data['dataScrubberDefaults'] is False
+
 
 class ProjectDeleteTest(APITestCase):
     @mock.patch('sentry.api.endpoints.project_details.uuid4')
diff --git a/tests/sentry/web/frontend/test_project_settings.py b/tests/sentry/web/frontend/test_project_settings.py
deleted file mode 100644
index 97497a0ba2..0000000000
--- a/tests/sentry/web/frontend/test_project_settings.py
+++ /dev/null
@@ -1,91 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import Project
-from sentry.testutils import TestCase
-from sentry.web.frontend.project_settings import OriginsField
-
-
-class OriginsFieldTest(TestCase):
-    @fixture
-    def field(self):
-        return OriginsField()
-
-    def test_supports_wildcards(self):
-        value = '*'
-        result = self.field.clean(value)
-        self.assertEquals(result, ['*'])
-
-    def test_supports_wildcard_domains(self):
-        value = '*.example.com'
-        result = self.field.clean(value)
-        self.assertEquals(result, ['*.example.com'])
-
-    def test_supports_base_domains(self):
-        value = 'example.com'
-        result = self.field.clean(value)
-        self.assertEquals(result, ['example.com'])
-
-    def test_does_not_support_port(self):
-        value = 'http://example.com:80'
-        with self.assertRaises(forms.ValidationError):
-            self.field.clean(value)
-
-        value = 'example.com:80'
-        with self.assertRaises(forms.ValidationError):
-            self.field.clean(value)
-
-    def test_doesnt_support_domain_with_port(self):
-        value = 'example.com:80'
-        with self.assertRaises(forms.ValidationError):
-            self.field.clean(value)
-
-    def test_doesnt_support_wildcard_domain_with_port(self):
-        value = '*.example.com:80'
-        with self.assertRaises(forms.ValidationError):
-            self.field.clean(value)
-
-    def test_supports_localhost(self):
-        value = 'localhost'
-        result = self.field.clean(value)
-        self.assertEquals(result, ['localhost'])
-
-
-class ProjectSettingsTest(TestCase):
-    def setUp(self):
-        super(ProjectSettingsTest, self).setUp()
-        self.owner = self.create_user()
-        self.organization = self.create_organization(owner=self.owner)
-        self.team = self.create_team(organization=self.organization)
-        self.project = self.create_project(team=self.team)
-
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-project', args=[self.organization.slug, self.project.slug])
-
-    def test_renders_with_context(self):
-        self.login_as(self.owner)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/projects/manage.html')
-        assert resp.context['project'] == self.project
-
-    def test_valid_params(self):
-        self.login_as(self.owner)
-        resp = self.client.post(
-            self.path, {
-                'name': 'bar',
-                'slug': self.project.slug,
-                'team': self.team.id,
-                'scrub_data': '1',
-                'token': 'Basic Zm9vOmJhcg==',
-                'token_header': 'Authorization'
-            }
-        )
-        assert resp.status_code == 302
-        self.assertEquals(resp['Location'], 'http://testserver' + self.path)
-        project = Project.objects.get(id=self.project.id)
-        assert project.name == 'bar'
