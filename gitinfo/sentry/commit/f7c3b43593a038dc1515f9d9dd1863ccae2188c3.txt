commit f7c3b43593a038dc1515f9d9dd1863ccae2188c3
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 10 17:05:09 2012 -0500

    Change all updates in Group.objects.from_kwargs to use the new Buffer backend

diff --git a/sentry/buffer/base.py b/sentry/buffer/base.py
index 19b152e2c0..ee11f1bffc 100644
--- a/sentry/buffer/base.py
+++ b/sentry/buffer/base.py
@@ -27,11 +27,17 @@ class Buffer(object):
     def __init__(self, **options):
         pass
 
-    def incr(self, model, columns, filters):
+    def incr(self, model, columns, filters, extra=None):
         """
         >>> incr(Group, columns={'times_seen': 1}, filters={'pk': group.pk})
         """
-        maybe_delay(process_incr, model=model, columns=columns, filters=filters)
-
-    def process(self, model, columns, filters):
-        model.objects.filter(**filters).update(**dict((c, F(c) + v) for c, v in columns.iteritems()))
+        maybe_delay(process_incr, model=model, columns=columns, filters=filters, extra=extra)
+
+    def process(self, model, columns, filters, extra=None):
+        update_kwargs = dict((c, F(c) + v) for c, v in columns.iteritems())
+        if extra:
+            update_kwargs.update(extra)
+        model.objects.create_or_update(
+            defaults=update_kwargs,
+            **filters
+        )
diff --git a/sentry/buffer/redis.py b/sentry/buffer/redis.py
index 348f52662f..64bf7090bc 100644
--- a/sentry/buffer/redis.py
+++ b/sentry/buffer/redis.py
@@ -40,13 +40,13 @@ class RedisBuffer(Buffer):
             md5('&'.join('%s=%s' % (k, self._map_column(model, k, v)) for k, v in sorted(filters.iteritems()))).hexdigest(),
             column)
 
-    def incr(self, model, columns, filters):
+    def incr(self, model, columns, filters, **kwargs):
         with self.conn.map() as conn:
             for column, amount in columns.iteritems():
                 conn.incr(self._make_key(model, filters, column), amount)
-        super(RedisBuffer, self).incr(model, columns, filters)
+        super(RedisBuffer, self).incr(model, columns, filters, **kwargs)
 
-    def process(self, model, columns, filters):
+    def process(self, model, columns, filters, **kwargs):
         results = {}
         with self.conn.map() as conn:
             for column, amount in columns.iteritems():
@@ -55,4 +55,4 @@ class RedisBuffer(Buffer):
         results = dict((k, int(v)) for k, v in results.iteritems() if int(v or 0) > 0)
         if not results:
             return
-        super(RedisBuffer, self).process(model, results, filters)
+        super(RedisBuffer, self).process(model, results, filters, **kwargs)
diff --git a/sentry/manager.py b/sentry/manager.py
index c175bd3884..21f23e204b 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -22,6 +22,7 @@ from django.db.models.signals import post_save, post_delete, post_init, class_pr
 from django.utils.encoding import force_unicode, smart_str
 
 from raven.utils.encoding import to_string
+from sentry import app
 from sentry.conf import settings
 from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
@@ -452,7 +453,8 @@ class GroupManager(BaseManager, ChartMixin):
         return event
 
     def _create_group(self, event, **kwargs):
-        from sentry.models import FilterValue, STATUS_RESOLVED
+        from sentry.models import ProjectCountByMinute, MessageCountByMinute, FilterValue, \
+          MessageFilterValue, STATUS_RESOLVED
 
         date = event.datetime
         time_spent = event.time_spent
@@ -478,25 +480,31 @@ class GroupManager(BaseManager, ChartMixin):
                 g.delete()
             group, is_new = groups[0], False
 
+        update_kwargs = {
+            'times_seen': 1,
+        }
+        if time_spent:
+            update_kwargs.update({
+                'time_spent_total': time_spent,
+                'time_spent_count': 1,
+            })
+
         if not is_new:
             if group.status == STATUS_RESOLVED:
                 # Group has changed from resolved -> unresolved
                 is_new = True
             silence_timedelta = date - group.last_seen
             silence = silence_timedelta.days * 86400 + silence_timedelta.seconds
-            update_kwargs = {
+
+            app.buffer.incr(self.model, update_kwargs, {
+                'pk': group.pk,
+            }, {
                 'status': 0,
                 'last_seen': date,
-                'times_seen': F('times_seen') + 1,
                 'score': ScoreClause(group),
-            }
-            if time_spent:
-                update_kwargs.update({
-                    'time_spent_total': F('time_spent_total') + time_spent,
-                    'time_spent_count': F('time_spent_count') + 1,
-                })
-            group.update(**update_kwargs)
+            })
         else:
+            # TODO: this update is useless
             group.update(score=ScoreClause(group))
             silence = 0
 
@@ -513,25 +521,16 @@ class GroupManager(BaseManager, ChartMixin):
             minutes = date.minute
         normalized_datetime = date.replace(second=0, microsecond=0, minute=minutes)
 
-        update_kwargs = {
-            'times_seen': F('times_seen') + 1,
-        }
-        if time_spent:
-            update_kwargs.update({
-                'time_spent_total': F('time_spent_total') + time_spent,
-                'time_spent_count': F('time_spent_count') + 1,
-            })
-
-        group.messagecountbyminute_set.create_or_update(
-            project=project,
-            date=normalized_datetime,
-            defaults=update_kwargs
-        )
+        app.buffer.incr(MessageCountByMinute, update_kwargs, {
+            'group': group,
+            'project': project,
+            'date': normalized_datetime,
+        })
 
-        project.projectcountbyminute_set.create_or_update(
-            date=normalized_datetime,
-            defaults=update_kwargs
-        )
+        app.buffer.incr(ProjectCountByMinute, update_kwargs, {
+            'project': project,
+            'date': normalized_datetime,
+        })
 
         for key, value in (
                 ('server_name', event.server_name),
@@ -547,15 +546,16 @@ class GroupManager(BaseManager, ChartMixin):
                 value=value,
             )
 
-            group.messagefiltervalue_set.create_or_update(
-                project=project,
-                key=key,
-                value=value,
-                defaults=dict(
-                    times_seen=F('times_seen') + 1,
-                    last_seen=date,
-                )
-            )
+            app.buffer.incr(MessageFilterValue, {
+                'times_seen': 1,
+            }, {
+                'group': group,
+                'project': project,
+                'key': key,
+                'value': value,
+            }, {
+                'last_seen': date,
+            })
 
         return group, is_new, is_sample
 
diff --git a/tests/sentry/buffer/base/tests.py b/tests/sentry/buffer/base/tests.py
index 398b1901af..7b5d7ab8a6 100644
--- a/tests/sentry/buffer/base/tests.py
+++ b/tests/sentry/buffer/base/tests.py
@@ -20,7 +20,7 @@ class BufferTest(TestCase):
         columns = {'times_seen': 1}
         filters = {'pk': 1}
         self.buf.incr(model, columns, filters)
-        maybe_delay.assert_called_once_with(process_incr, model=model, columns=columns, filters=filters)
+        maybe_delay.assert_called_once_with(process_incr, model=model, columns=columns, filters=filters, extra=None)
 
     def test_process_saves_data(self):
         group = Group.objects.create(project=Project(id=1))
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index f53bbdcc52..e41d0ae586 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -37,7 +37,7 @@ class RedisBufferTest(TestCase):
         columns = {'times_seen': 1}
         filters = {'pk': 1}
         self.buf.incr(model, columns, filters)
-        maybe_delay.assert_called_once_with(process_incr, model=model, columns=columns, filters=filters)
+        maybe_delay.assert_called_once_with(process_incr, model=model, columns=columns, filters=filters, extra=None)
 
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.base.maybe_delay', mock.Mock())
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 15bfbb183a..92c650a478 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -6,7 +6,8 @@ import datetime
 import mock
 
 from sentry.interfaces import Interface
-from sentry.models import Event, Group, Project
+from sentry.models import Event, Group, Project, MessageCountByMinute, ProjectCountByMinute, \
+  FilterValue, MessageFilterValue
 
 from tests.base import TestCase
 
@@ -128,3 +129,33 @@ class SentryManagerTest(TestCase):
         # ensure that calling it again doesnt raise a db error
         Group.objects.from_kwargs(1, event_id=1, message='foo')
         self.assertEquals(Event.objects.count(), 1)
+
+    def test_does_update_messagecountbyminute(self):
+        event = Group.objects.from_kwargs(1, message='foo')
+        inst = MessageCountByMinute.objects.filter(group=event.group)
+        self.assertTrue(inst.exists())
+        inst = inst.get()
+        self.assertEquals(inst.times_seen, 1)
+
+        event = Group.objects.from_kwargs(1, message='foo')
+        inst = MessageCountByMinute.objects.get(group=event.group)
+        self.assertEquals(inst.times_seen, 2)
+
+    def test_does_update_projectcountbyminute(self):
+        event = Group.objects.from_kwargs(1, message='foo')
+        inst = ProjectCountByMinute.objects.filter(project=event.project)
+        self.assertTrue(inst.exists())
+        inst = inst.get()
+        self.assertEquals(inst.times_seen, 1)
+
+        event = Group.objects.from_kwargs(1, message='foo')
+        inst = ProjectCountByMinute.objects.get(project=event.project)
+        self.assertEquals(inst.times_seen, 2)
+
+    def test_updates_group(self):
+        Group.objects.from_kwargs(1, message='foo', checksum='a' * 32)
+        event = Group.objects.from_kwargs(1, message='foo', checksum='a' * 32)
+
+        group = Group.objects.get(pk=event.group_id)
+
+        self.assertEquals(group.times_seen, 2)
