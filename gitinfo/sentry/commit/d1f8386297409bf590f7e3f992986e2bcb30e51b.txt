commit d1f8386297409bf590f7e3f992986e2bcb30e51b
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Aug 7 20:00:13 2016 -0700

    Improve rendering of LevelCondition

diff --git a/src/sentry/rules/conditions/level.py b/src/sentry/rules/conditions/level.py
index 90df9f3722..ec50ca0383 100644
--- a/src/sentry/rules/conditions/level.py
+++ b/src/sentry/rules/conditions/level.py
@@ -21,35 +21,34 @@ LEVEL_CHOICES = OrderedDict([
 ])
 
 
-class LevelMatchType(object):
+class MatchType(object):
     EQUAL = 'eq'
     LESS_OR_EQUAL = 'lte'
     GREATER_OR_EQUAL = 'gte'
 
 
+MATCH_CHOICES = OrderedDict([
+    (MatchType.EQUAL, 'equal'),
+    (MatchType.LESS_OR_EQUAL, 'less than or equal to'),
+    (MatchType.GREATER_OR_EQUAL, 'greater than or equal to')
+])
+
+
 class LevelEventForm(forms.Form):
     level = forms.ChoiceField(
         choices=LEVEL_CHOICES.items(),
-        initial=30)
+        initial=30,
+    )
     match = forms.ChoiceField(
-        choices=(
-            (LevelMatchType.EQUAL, 'equal'),
-            (LevelMatchType.LESS_OR_EQUAL, 'less than or equal to'),
-            (LevelMatchType.GREATER_OR_EQUAL, 'greater than or equal to')),
-        initial=LevelMatchType.GREATER_OR_EQUAL)
+        choices=MATCH_CHOICES.items(),
+        initial=MatchType.GREATER_OR_EQUAL,
+    )
 
 
 class LevelCondition(EventCondition):
     form_cls = LevelEventForm
     label = 'An event\'s level is {match} {level}'
 
-    def render_label(self):
-        data = {
-            'match': self.data['match'],
-            'level': LEVEL_CHOICES[self.data['level']],
-        }
-        return self.label.format(**data)
-
     def passes(self, event, state, **kwargs):
         desired_level = self.get_option('level')
         desired_match = self.get_option('match')
@@ -65,10 +64,17 @@ class LevelCondition(EventCondition):
         except KeyError:
             return False
 
-        if desired_match == LevelMatchType.EQUAL:
+        if desired_match == MatchType.EQUAL:
             return level == desired_level
-        elif desired_match == LevelMatchType.GREATER_OR_EQUAL:
+        elif desired_match == MatchType.GREATER_OR_EQUAL:
             return level >= desired_level
-        elif desired_match == LevelMatchType.LESS_OR_EQUAL:
+        elif desired_match == MatchType.LESS_OR_EQUAL:
             return level <= desired_level
         return False
+
+    def render_label(self):
+        data = {
+            'level': LEVEL_CHOICES[self.data['level']],
+            'match': MATCH_CHOICES[self.data['match']],
+        }
+        return self.label.format(**data)
