commit b6608aa88f3ac5fcf433e78019cb492cd2680357
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Wed Feb 5 11:57:49 2020 -0800

    feat: Show plugins in Integration Directory (#16810)
    
    Problem
    Need to show legacy plugins connected to existing projects in the Integration Directory.
    
    Solution
    Show plugins in the Integration Directory if they are connected to projects. Plugins that do not have any connections are not shown. If a connected plugin has an equivalent first-class integration, the tag of (Legacy) will be added to the title. Covers Jira, Bitbucket, Github, Slack, PagerDuty, Clubhouse, and VSTS.

diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index d8b8e56e07..a9724272a0 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -7,10 +7,10 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import {
   Organization,
   Integration,
-  Plugin,
   SentryApp,
   IntegrationProvider,
   SentryAppInstallation,
+  PluginWithProjectList,
 } from 'app/types';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {RequestOptions} from 'app/api';
@@ -24,6 +24,7 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import MigrationWarnings from 'app/views/organizationIntegrations/migrationWarnings';
 import PermissionAlert from 'app/views/settings/organization/permissionAlert';
 import ProviderRow from 'app/views/organizationIntegrations/integrationProviderRow';
+import PluginRow from 'app/views/organizationIntegrations/integrationPluginRow';
 import IntegrationDirectoryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow/integrationDirectoryApplicationRow';
 import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
@@ -33,7 +34,7 @@ import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 import SearchInput from 'app/components/forms/searchInput';
 
-type AppOrProvider = SentryApp | IntegrationProvider;
+type AppOrProviderOrPlugin = SentryApp | IntegrationProvider | PluginWithProjectList;
 
 type Props = RouteComponentProps<{orgId: string}, {}> & {
   organization: Organization;
@@ -43,7 +44,7 @@ type Props = RouteComponentProps<{orgId: string}, {}> & {
 type State = {
   integrations: Integration[];
   newlyInstalledIntegrationId: string;
-  plugins: Plugin[];
+  plugins: PluginWithProjectList[];
   appInstalls: SentryAppInstallation[];
   orgOwnedApps: SentryApp[];
   publishedApps: SentryApp[];
@@ -51,8 +52,14 @@ type State = {
   extraApp?: SentryApp;
 };
 
-function isSentryApp(integration: AppOrProvider): integration is SentryApp {
-  return (integration as SentryApp).uuid !== undefined;
+function isSentryApp(integration: AppOrProviderOrPlugin): integration is SentryApp {
+  return !!(integration as SentryApp).uuid;
+}
+
+function isPlugin(
+  integration: AppOrProviderOrPlugin
+): integration is PluginWithProjectList {
+  return integration.hasOwnProperty('shortName');
 }
 
 class OrganizationIntegrations extends AsyncComponent<
@@ -95,14 +102,13 @@ class OrganizationIntegrations extends AsyncComponent<
 
   getEndpoints(): ([string, string, any] | [string, string])[] {
     const {orgId} = this.props.params;
-    const query = {plugins: ['vsts', 'github', 'bitbucket']};
     const baseEndpoints: ([string, string, any] | [string, string])[] = [
       ['config', `/organizations/${orgId}/config/integrations/`],
       ['integrations', `/organizations/${orgId}/integrations/`],
-      ['plugins', `/organizations/${orgId}/plugins/`, {query}],
       ['orgOwnedApps', `/organizations/${orgId}/sentry-apps/`],
       ['publishedApps', '/sentry-apps/', {query: {status: 'published'}}],
       ['appInstalls', `/organizations/${orgId}/sentry-app-installations/`],
+      ['plugins', `/organizations/${orgId}/plugins/configs/`],
     ];
     /**
      * optional app to load for super users
@@ -195,7 +201,7 @@ class OrganizationIntegrations extends AsyncComponent<
   };
 
   //Returns 0 if uninstalled, 1 if pending, and 2 if installed
-  getInstallValue(integration: AppOrProvider) {
+  getInstallValue(integration: AppOrProviderOrPlugin) {
     const {integrations} = this.state;
     if (isSentryApp(integration)) {
       const install = this.getAppInstall(integration);
@@ -203,11 +209,13 @@ class OrganizationIntegrations extends AsyncComponent<
         return install.status === 'pending' ? 1 : 2;
       }
       return 0;
+    } else if (isPlugin(integration)) {
+      return integration.projectList.length > 0 ? 2 : 0;
     }
     return integrations.find(i => i.provider.key === integration.key) ? 2 : 0;
   }
 
-  sortIntegrations(integrations: AppOrProvider[]) {
+  sortIntegrations(integrations: AppOrProviderOrPlugin[]) {
     return integrations
       .sort((a, b) => a.name.localeCompare(b.name))
       .sort((a, b) => this.getInstallValue(b) - this.getInstallValue(a));
@@ -229,6 +237,32 @@ class OrganizationIntegrations extends AsyncComponent<
     );
   };
 
+  renderPlugin = (plugin: PluginWithProjectList) => {
+    //find the integration installations for that provider
+    if (plugin.projectList.length) {
+      const legacyIds = [
+        'jira',
+        'bitbucket',
+        'github',
+        'slack',
+        'pagerduty',
+        'clubhouse',
+        'vsts',
+      ];
+      const isLegacy = legacyIds.includes(plugin.id);
+      return (
+        <PluginRow
+          key={`row-plugin-${plugin.id}`}
+          data-test-id="integration-row"
+          plugin={plugin}
+          isLegacy={isLegacy}
+          organization={this.props.organization}
+        />
+      );
+    }
+    return null;
+  };
+
   //render either an internal or non-internal app
   renderSentryApp = (app: SentryApp) => {
     const {organization} = this.props;
@@ -260,16 +294,18 @@ class OrganizationIntegrations extends AsyncComponent<
     return null;
   };
 
-  renderIntegration = (integration: AppOrProvider) => {
+  renderIntegration = (integration: AppOrProviderOrPlugin) => {
     if (isSentryApp(integration)) {
       return this.renderSentryApp(integration);
+    } else if (isPlugin(integration)) {
+      return this.renderPlugin(integration);
     }
     return this.renderProvider(integration);
   };
 
   renderBody() {
     const {orgId} = this.props.params;
-    const {reloading, orgOwnedApps, publishedApps, extraApp} = this.state;
+    const {reloading, orgOwnedApps, publishedApps, extraApp, plugins} = this.state;
     const published = publishedApps || [];
     // If we have an extra app in state from query parameter, add it as org owned app
     if (extraApp) {
@@ -290,8 +326,9 @@ class OrganizationIntegrations extends AsyncComponent<
      */
 
     const publicApps = published.concat(orgOwned.filter(a => a.status === 'published'));
+
     const publicIntegrations = this.sortIntegrations(
-      (publicApps as AppOrProvider[]).concat(this.providers)
+      (publicApps as AppOrProviderOrPlugin[]).concat(this.providers).concat(plugins)
     );
 
     const title = t('Integrations');
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx
new file mode 100644
index 0000000000..7c1fe6ab1e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx
@@ -0,0 +1,116 @@
+import {withTheme} from 'emotion-theming';
+import React from 'react';
+import styled from '@emotion/styled';
+import Link from 'app/components/links/link';
+import {PanelItem} from 'app/components/panels';
+import {t} from 'app/locale';
+import CircleIndicator from 'app/components/circleIndicator';
+import PluginIcon from 'app/plugins/components/pluginIcon';
+import space from 'app/styles/space';
+import {PluginWithProjectList, Organization} from 'app/types';
+
+type Props = {
+  plugin: PluginWithProjectList;
+  isLegacy: boolean;
+  organization: Organization;
+};
+
+export default class PluginRow extends React.Component<Props> {
+  get isEnabled() {
+    // It's possible to only have items in projectList that are disabled configs (enabled=false).
+    // But for the purpose of showing things that are installed, that might be OK.
+    return this.props.plugin.projectList.length > 0;
+  }
+
+  render() {
+    const {
+      plugin,
+      isLegacy,
+      organization: {slug},
+    } = this.props;
+
+    return (
+      <PanelItem p={0} flexDirection="column" data-test-id={plugin.id}>
+        <FlexContainer>
+          <PluginIcon size={36} pluginId={plugin.id} />
+          <Container>
+            <ProviderName to={`/settings/${slug}/plugins/${plugin.slug}`}>
+              {`${plugin.name} ${isLegacy ? '(Legacy)' : ''}`}
+            </ProviderName>
+            <ProviderDetails>
+              <Status enabled={this.isEnabled} />
+              <StyledLink
+                to={`/settings/${slug}/plugins/${plugin.slug}?tab=configurations`}
+              >{`${plugin.projectList.length} Configurations`}</StyledLink>
+            </ProviderDetails>
+          </Container>
+        </FlexContainer>
+      </PanelItem>
+    );
+  }
+}
+
+const Flex = styled('div')`
+  display: flex;
+`;
+
+const FlexContainer = styled(Flex)`
+  align-items: center;
+  padding: ${space(2)};
+`;
+
+const Container = styled('div')`
+  flex: 1;
+  padding: 0 ${space(2)};
+`;
+
+const ProviderName = styled(Link)`
+  font-weight: bold;
+  color: ${props => props.theme.textColor};
+`;
+
+const ProviderDetails = styled(Flex)`
+  align-items: center;
+  margin-top: 6px;
+  font-size: 0.8em;
+`;
+
+type StatusProps = {
+  enabled: boolean;
+  theme?: any; //TS complains if we don't make this optional
+};
+
+const Status = styled(
+  withTheme((props: StatusProps) => {
+    const {enabled, theme, ...p} = props;
+    return (
+      <StatusWrapper>
+        <CircleIndicator
+          enabled={enabled}
+          size={6}
+          color={enabled ? theme.success : theme.gray2}
+        />
+        <div {...p}>{enabled ? t('Installed') : t('Not Installed')}</div>
+      </StatusWrapper>
+    );
+  })
+)`
+  color: ${(p: StatusProps) => (p.enabled ? p.theme.success : p.theme.gray2)};
+  margin-left: ${space(0.5)};
+  margin-right: ${space(0.75)};
+  &:after {
+    content: '|';
+    color: ${p => p.theme.gray1};
+    margin-left: ${space(0.75)};
+    font-weight: normal;
+  }
+`;
+
+const StatusWrapper = styled('div')`
+  display: flex;
+  align-items: center;
+`;
+
+const StyledLink = styled(Link)`
+  color: ${p => p.theme.gray2};
+`;
