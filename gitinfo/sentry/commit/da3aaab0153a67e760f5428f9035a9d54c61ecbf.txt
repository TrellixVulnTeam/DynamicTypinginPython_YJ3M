commit da3aaab0153a67e760f5428f9035a9d54c61ecbf
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 22 12:39:04 2014 -0800

    Upgrade Django to 1.6

diff --git a/conftest.py b/conftest.py
index bc5a80d531..0c9e797979 100644
--- a/conftest.py
+++ b/conftest.py
@@ -28,9 +28,6 @@ def pytest_configure(config):
             'ENGINE': 'django.db.backends.postgresql_psycopg2',
             'USER': 'postgres',
             'NAME': 'sentry',
-            'OPTIONS': {
-                'autocommit': True,
-            }
         })
     elif test_db == 'sqlite':
         settings.DATABASES['default'].update({
diff --git a/docs/quickstart/index.rst b/docs/quickstart/index.rst
index b372035e09..c73824886a 100644
--- a/docs/quickstart/index.rst
+++ b/docs/quickstart/index.rst
@@ -145,9 +145,6 @@ is not a fully supported database and should not be used in production**.
             'PASSWORD': '',
             'HOST': '',
             'PORT': '',
-            'OPTIONS': {
-                'autocommit': True,
-            }
         }
     }
 
diff --git a/setup.cfg b/setup.cfg
index 183cc4a52b..8c22b088cf 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -6,7 +6,7 @@ norecursedirs=bin dist docs	htmlcov script hooks node_modules .* {args}
 [flake8]
 ignore = F999,E501,E128,E124,F841
 max-line-length = 100
-exclude = .tox,.git,*/migrations/*,*/static/CACHE/*,docs
+exclude = .tox,.git,*/migrations/*,*/static/CACHE/*,docs/*
 
 [wheel]
 universal = 1
diff --git a/setup.py b/setup.py
index 39df9f491d..1400864a34 100755
--- a/setup.py
+++ b/setup.py
@@ -70,7 +70,7 @@ install_requires = [
     'BeautifulSoup>=3.2.1,<3.3.0',
     'celery>=3.0.15,<3.1.0',
     'cssutils>=0.9.9,<0.10.0',
-    'Django>=1.5.8,<1.6',
+    'Django>=1.6.0,<1.7',
     'django-bitfield>=1.7.0,<1.8.0',
     'django-celery>=3.0.11,<3.1.0',
     'django-crispy-forms>=1.2.3,<1.3.0',
diff --git a/src/sentry/admin.py b/src/sentry/admin.py
index f1a74191b4..1953a41f4a 100644
--- a/src/sentry/admin.py
+++ b/src/sentry/admin.py
@@ -164,7 +164,7 @@ class UserAdmin(admin.ModelAdmin):
 
     @sensitive_post_parameters_m
     @csrf_protect_m
-    @transaction.commit_on_success
+    @transaction.atomic
     def add_view(self, request, form_url='', extra_context=None):
         # It's an error for a user to have add permission but NOT change
         # permission for users. If we allowed such users to add users, they
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 7bd23d481c..e6323752f8 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -56,6 +56,9 @@ DATABASES = {
     }
 }
 
+ATOMIC_REQUESTS = False
+AUTOCOMMIT = True
+
 if 'DATABASE_URL' in os.environ:
     url = urlparse.urlparse(os.environ['DATABASE_URL'])
 
diff --git a/src/sentry/db/models/query.py b/src/sentry/db/models/query.py
index e6589d736b..3a36f90063 100644
--- a/src/sentry/db/models/query.py
+++ b/src/sentry/db/models/query.py
@@ -1,6 +1,6 @@
 """
-sentry.db.query
-~~~~~~~~~~~~~~~
+sentry.db.models.query
+~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
@@ -8,7 +8,7 @@ sentry.db.query
 
 from __future__ import absolute_import
 
-from django.db import router, transaction, IntegrityError
+from django.db import IntegrityError, router, transaction
 from django.db.models.expressions import ExpressionNode
 from django.db.models.signals import post_save
 
@@ -77,9 +77,9 @@ def create_or_update(model, using=None, **kwargs):
         else:
             create_kwargs[k] = v
     try:
-        return objects.create(**create_kwargs), True
+        with transaction.atomic():
+            return objects.create(**create_kwargs), True
     except IntegrityError:
-        transaction.rollback_unless_managed(using=using)
         affected = objects.filter(**kwargs).update(**defaults)
 
     return affected, False
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index bdd949e99b..ad2a012590 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -223,7 +223,7 @@ class EventManager(object):
         return data
 
     @suppress_exceptions
-    @transaction.commit_on_success
+    @transaction.atomic
     def save(self, project, raw=False):
         # TODO: culprit should default to "most recent" frame in stacktraces when
         # it's not provided.
@@ -317,23 +317,18 @@ class EventManager(object):
 
         # save the event unless its been sampled
         if not is_sample:
-            sid = transaction.savepoint(using=using)
             try:
-                event.save()
+                with transaction.atomic():
+                    event.save()
             except IntegrityError:
-                transaction.savepoint_rollback(sid, using=using)
                 return event
-            transaction.savepoint_commit(sid, using=using)
 
-        sid = transaction.savepoint(using=using)
         try:
-            EventMapping.objects.create(
-                project=project, group=group, event_id=event_id)
+            with transaction.atomic():
+                EventMapping.objects.create(
+                    project=project, group=group, event_id=event_id)
         except IntegrityError:
-            transaction.savepoint_rollback(sid, using=using)
             return event
-        transaction.savepoint_commit(sid, using=using)
-        transaction.commit_unless_managed(using=using)
 
         if not raw:
             post_process_group.delay(
@@ -446,10 +441,6 @@ class EventManager(object):
         else:
             is_regression = False
 
-            # We need to commit because the queue can run too fast and hit
-            # an issue with the group not existing before the buffers run
-            transaction.commit_unless_managed(using=group._state.db)
-
         # Determine if we've sampled enough data to store this event
         if is_new:
             is_sample = False
@@ -458,6 +449,10 @@ class EventManager(object):
         else:
             is_sample = True
 
+        # We need to commit because the queue can run too fast and hit
+        # an issue with the group not existing before the buffers run
+        transaction.commit(using=group._state.db)
+
         # Rounded down to the nearest interval
         safe_execute(Group.objects.add_tags, group, tags)
 
@@ -491,7 +486,7 @@ class EventManager(object):
                 active_at__gte=date - timedelta(seconds=5),
             ).update(active_at=date, status=GroupStatus.UNRESOLVED))
 
-            transaction.commit_unless_managed(using=group._state.db)
+            transaction.commit(using=group._state.db)
 
             group.active_at = date
             group.status = GroupStatus.UNRESOLVED
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index f0ce5eee8c..cee61e2d22 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -9,7 +9,7 @@ from __future__ import absolute_import
 
 import progressbar
 
-from django.db import transaction, IntegrityError
+from django.db import IntegrityError, transaction
 from django.db.models import ForeignKey
 from django.db.models.deletion import Collector
 from django.db.models.signals import pre_delete, pre_save, post_save, post_delete
@@ -254,16 +254,12 @@ def merge_into(self, other, callback=lambda x: x, using='default'):
             if send_signals:
                 pre_save.send(created=True, **signal_kwargs)
 
-            sid = transaction.savepoint(using=using)
-
             try:
-                model.objects.filter(pk=obj.pk).update(**update_kwargs)
+                with transaction.atomic():
+                    model.objects.using(using).filter(pk=obj.pk).update(**update_kwargs)
             except IntegrityError:
                 # duplicate key exists, destroy the relations
-                transaction.savepoint_rollback(sid, using=using)
-                model.objects.filter(pk=obj.pk).delete()
-            else:
-                transaction.savepoint_commit(sid, using=using)
+                model.objects.using(using).filter(pk=obj.pk).delete()
 
             if send_signals:
                 post_save.send(created=True, **signal_kwargs)
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index fbec0fa7bd..f2d27c5f52 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -43,11 +43,6 @@ DATABASES = {
         'PASSWORD': '',
         'HOST': '',
         'PORT': '',
-
-        # If you're using Postgres, we recommend turning on autocommit
-        # 'OPTIONS': {
-        #     'autocommit': True,
-        # }
     }
 }
 
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index cf43874609..45f8ab0172 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -8,20 +8,21 @@ sentry.utils.safe
 from __future__ import absolute_import, print_function
 
 import logging
+import six
 
 from django.conf import settings
 from django.db import transaction
 
 from sentry.utils.strings import truncatechars
 
-import six
-
 
 def safe_execute(func, *args, **kwargs):
+    # TODO: we should make smart savepoints (only executing the savepoint server
+    # side if we execute a query)
     try:
-        result = func(*args, **kwargs)
-    except Exception as e:
-        transaction.rollback_unless_managed()
+        with transaction.atomic():
+            result = func(*args, **kwargs)
+    except Exception, e:
         if hasattr(func, 'im_class'):
             cls = func.im_class
         else:
diff --git a/src/sentry/web/forms/edit_organization_member.py b/src/sentry/web/forms/edit_organization_member.py
index df7a84739d..33da29ec07 100644
--- a/src/sentry/web/forms/edit_organization_member.py
+++ b/src/sentry/web/forms/edit_organization_member.py
@@ -7,6 +7,7 @@ from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
     OrganizationMemberType, Team
 )
+from sentry.web.forms.fields import CustomTypedChoiceField
 
 MEMBERSHIP_CHOICES = (
     (OrganizationMemberType.MEMBER, _('Member')),
@@ -16,7 +17,7 @@ MEMBERSHIP_CHOICES = (
 
 
 class EditOrganizationMemberForm(forms.ModelForm):
-    type = forms.TypedChoiceField(label=_('Membership Type'), choices=(), coerce=int)
+    type = CustomTypedChoiceField(label=_('Membership Type'), choices=(), coerce=int)
     has_global_access = forms.BooleanField(
         label=_('This member should have access to all teams within the organization.'),
         required=False,
@@ -38,7 +39,6 @@ class EditOrganizationMemberForm(forms.ModelForm):
             m for m in MEMBERSHIP_CHOICES
             if m[0] >= authorizing_access
         ]
-
         self.fields['teams'].queryset = Team.objects.filter(
             organization=self.instance.organization,
         )
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index d717ea1cb5..b8722edf59 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -11,7 +11,9 @@ import six
 
 from django.forms.widgets import RadioFieldRenderer, TextInput, Widget
 from django.forms.util import flatatt
-from django.forms import Field, CharField, IntegerField, ValidationError
+from django.forms import (
+    Field, CharField, IntegerField, TypedChoiceField, ValidationError
+)
 from django.utils.encoding import force_unicode
 from django.utils.html import format_html
 from django.utils.safestring import mark_safe
@@ -20,6 +22,25 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.models import User
 
 
+class CustomTypedChoiceField(TypedChoiceField):
+    # A patched version of TypedChoiceField which correctly validates a 0
+    # as a real input that may be invalid
+    # See https://github.com/django/django/pull/3774
+    def validate(self, value):
+        """
+        Validates that the input is in self.choices.
+        """
+        super(CustomTypedChoiceField, self).validate(value)
+        # this will validate itself twice due to the internal ChoiceField
+        # validation
+        if value is not None and not self.valid_value(value):
+            raise ValidationError(
+                self.error_messages['invalid_choice'],
+                code='invalid_choice',
+                params={'value': value},
+            )
+
+
 class RangeInput(TextInput):
     input_type = 'range'
 
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 9cb31d2f67..dfef037fd7 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -71,7 +71,7 @@ def login(request):
 
 @csrf_protect
 @never_cache
-@transaction.commit_on_success
+@transaction.atomic
 def register(request):
     from django.conf import settings
 
@@ -203,7 +203,7 @@ def recover_confirm(request, user_id, hash):
 @never_cache
 @login_required
 @sudo_required
-@transaction.commit_on_success
+@transaction.atomic
 def settings(request):
     form = AccountSettingsForm(request.user, request.POST or None, initial={
         'email': request.user.email,
@@ -228,7 +228,7 @@ def settings(request):
 @never_cache
 @login_required
 @sudo_required
-@transaction.commit_on_success
+@transaction.atomic
 def appearance_settings(request):
     from django.conf import settings
 
@@ -257,7 +257,7 @@ def appearance_settings(request):
 @never_cache
 @login_required
 @sudo_required
-@transaction.commit_on_success
+@transaction.atomic
 def notification_settings(request):
     settings_form = NotificationSettingsForm(request.user, request.POST or None)
 
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 245c61a82b..4245900fea 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -113,7 +113,7 @@ def manage_users(request):
 
 
 @requires_admin
-@transaction.commit_on_success
+@transaction.atomic
 @csrf_protect
 def create_new_user(request):
     if not request.user.is_superuser:
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index ff2c23f2a0..119e1913bb 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -52,6 +52,7 @@ class OrganizationMemberSettingsView(OrganizationView):
         try:
             member = OrganizationMember.objects.get(id=member_id)
         except OrganizationMember.DoesNotExist:
+            print("cannot find member id")
             return self.redirect(reverse('sentry'))
 
         if request.POST.get('op') == 'reinvite' and member.is_pending:
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 6fdee769bc..ea6dd681e1 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -13,7 +13,7 @@ from sentry.models import (
 )
 from sentry.permissions import can_remove_project, can_set_public_projects
 from sentry.plugins import plugins
-from sentry.web.forms.fields import RangeField
+from sentry.web.forms.fields import CustomTypedChoiceField, RangeField
 from sentry.web.frontend.base import ProjectView
 
 
@@ -69,7 +69,7 @@ class EditProjectForm(forms.ModelForm):
         widget=forms.Select(attrs={'data-placeholder': _('Select a platform')}))
     public = forms.BooleanField(required=False,
         help_text=_('Imply public access to any event for this project.'))
-    team = forms.TypedChoiceField(choices=(), coerce=int, required=False)
+    team = CustomTypedChoiceField(choices=(), coerce=int, required=False)
     origins = OriginsField(label=_('Allowed Domains'), required=False,
         help_text=_('Separate multiple entries with a newline.'))
     resolve_age = RangeField(help_text=_('Treat an event as resolved if it hasn\'t been seen for this amount of time.'),
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 20d90b49b4..96386f6851 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -4,6 +4,7 @@ from __future__ import absolute_import, print_function
 
 import datetime
 import json
+import logging
 import mock
 import zlib
 
@@ -69,6 +70,11 @@ DEPENDENCY_TEST_DATA = {
 }
 
 
+class AssertHandler(logging.Handler):
+    def emit(self, entry):
+        raise AssertionError(entry.message)
+
+
 class RavenIntegrationTest(TestCase):
     """
     This mocks the test server and specifically tests behavior that would
@@ -81,13 +87,19 @@ class RavenIntegrationTest(TestCase):
         self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create(user=self.user)[0]
 
-    def sendRemote(self, url, data, headers={}):
-        # TODO: make this install a temporary handler which raises an assertion error
-        import logging
+        self.configure_sentry_errors()
+
+    def configure_sentry_errors(self):
+        assert_handler = AssertHandler()
         sentry_errors = logging.getLogger('sentry.errors')
-        sentry_errors.addHandler(logging.StreamHandler())
+        sentry_errors.addHandler(assert_handler)
         sentry_errors.setLevel(logging.DEBUG)
 
+        def remove_handler():
+            sentry_errors.handlers.pop(sentry_errors.handlers.index(assert_handler))
+        self.addCleanup(remove_handler)
+
+    def sendRemote(self, url, data, headers={}):
         content_type = headers.pop('Content-Type', None)
         headers = dict(('HTTP_' + k.replace('-', '_').upper(), v) for k, v in headers.iteritems())
         resp = self.client.post(
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index b9f1c6ee36..3055adf384 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -30,14 +30,14 @@ class OptionsManagerTest(TestCase):
         assert self.manager.get('foo') == ''
 
     def test_db_unavailable(self):
-        with patch.object(Option.objects, 'get_query_set', side_effect=Exception()):
+        with patch.object(Option.objects, 'get_queryset', side_effect=Exception()):
             # we can't update options if the db is unavailable
             with self.assertRaises(Exception):
                 self.manager.set('foo', 'bar')
 
         self.manager.set('foo', 'bar')
 
-        with patch.object(Option.objects, 'get_query_set', side_effect=Exception()):
+        with patch.object(Option.objects, 'get_queryset', side_effect=Exception()):
             assert self.manager.get('foo') == 'bar'
 
             with patch.object(self.manager.cache, 'get', side_effect=Exception()):
@@ -50,7 +50,7 @@ class OptionsManagerTest(TestCase):
         self.manager.set('foo', 'bar')
 
         with self.settings(SENTRY_OPTIONS={'foo': 'baz'}):
-            with patch.object(Option.objects, 'get_query_set', side_effect=Exception()):
+            with patch.object(Option.objects, 'get_queryset', side_effect=Exception()):
                 with patch.object(self.manager.cache, 'get', side_effect=Exception()):
                     assert self.manager.get('foo') == 'baz'
 
