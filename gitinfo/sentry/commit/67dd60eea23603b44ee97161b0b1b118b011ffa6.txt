commit 67dd60eea23603b44ee97161b0b1b118b011ffa6
Author: josh <josh@jrl.ninja>
Date:   Thu Nov 21 17:26:44 2019 -0800

    fix(django 1.10): invalid kwarg red herring (#15757)

diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 023443f3b8..dc6aae221f 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -85,8 +85,13 @@ class EventCommon(object):
 
     @group.setter
     def group(self, group):
-        self.group_id = group.id
-        self._group_cache = group
+        # guard against None to not fail on AttributeError
+        # otherwise Django 1.10 will swallow it in db.models.base init, but
+        # consequently fail to remove from kwargs, and you'll get the red herring
+        # TypeError: 'group' is an invalid keyword argument for this function.
+        if group is not None:
+            self.group_id = group.id
+            self._group_cache = group
 
     @property
     def project(self):
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index fba7ed3e9f..1e08d9ce2d 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -142,7 +142,7 @@ class GroupDetailsTest(APITestCase):
         superuser = self.create_user(is_superuser=True)
         self.login_as(user=superuser, superuser=True)
 
-        group = self.create_group(title="Oh no")
+        group = self.create_group()
         url = u"/api/0/issues/{}/".format(group.id)
         response = self.client.get(url, format="json")
 
diff --git a/tests/sentry/models/test_groupsubscription.py b/tests/sentry/models/test_groupsubscription.py
index e696b8ada0..4d297f648d 100644
--- a/tests/sentry/models/test_groupsubscription.py
+++ b/tests/sentry/models/test_groupsubscription.py
@@ -65,7 +65,7 @@ class SubscribeTest(TestCase):
 
     def test_actor_team(self):
         org = self.create_organization()
-        group = self.create_group(organization=org)
+        group = self.create_group()
         user = self.create_user()
         team = self.create_team(organization=org)
         self.create_member(
diff --git a/tests/sentry/rules/conditions/test_level_event.py b/tests/sentry/rules/conditions/test_level_event.py
index 530f4507c6..0ca16b294c 100644
--- a/tests/sentry/rules/conditions/test_level_event.py
+++ b/tests/sentry/rules/conditions/test_level_event.py
@@ -38,7 +38,7 @@ class LevelConditionTest(RuleTestCase):
         self.assertPasses(rule, event)
 
     def test_without_tag(self):
-        event = self.create_event(event_id="a" * 32, tags={})
+        event = self.create_event(event_id="a" * 32)
         rule = self.get_rule(data={"match": MatchType.EQUAL, "level": "30"})
         self.assertDoesNotPass(rule, event)
 
diff --git a/tests/snuba/api/endpoints/test_organization_group_index.py b/tests/snuba/api/endpoints/test_organization_group_index.py
index a8a9b55e05..cbffde3446 100644
--- a/tests/snuba/api/endpoints/test_organization_group_index.py
+++ b/tests/snuba/api/endpoints/test_organization_group_index.py
@@ -548,9 +548,7 @@ class GroupUpdateTest(APITestCase, SnubaTestCase):
 
         integration = Integration.objects.create(provider="example", name="Example")
         integration.add_organization(org, self.user)
-        group = self.create_group(
-            status=GroupStatus.UNRESOLVED, organization=org, first_seen=self.min_ago
-        )
+        group = self.create_group(status=GroupStatus.UNRESOLVED, first_seen=self.min_ago)
         self.create_event(group=group, datetime=self.min_ago)
 
         OrganizationIntegration.objects.filter(
diff --git a/tests/snuba/api/endpoints/test_project_group_index.py b/tests/snuba/api/endpoints/test_project_group_index.py
index 6762579edc..5ce8d70ad5 100644
--- a/tests/snuba/api/endpoints/test_project_group_index.py
+++ b/tests/snuba/api/endpoints/test_project_group_index.py
@@ -423,7 +423,7 @@ class GroupUpdateTest(APITestCase, SnubaTestCase):
 
         integration = Integration.objects.create(provider="example", name="Example")
         integration.add_organization(org, self.user)
-        group = self.create_group(status=GroupStatus.UNRESOLVED, organization=org)
+        group = self.create_group(status=GroupStatus.UNRESOLVED)
 
         OrganizationIntegration.objects.filter(
             integration_id=integration.id, organization_id=group.organization.id
diff --git a/tests/snuba/api/serializers/test_group.py b/tests/snuba/api/serializers/test_group.py
index a9e70806e9..b979f78008 100644
--- a/tests/snuba/api/serializers/test_group.py
+++ b/tests/snuba/api/serializers/test_group.py
@@ -40,14 +40,14 @@ class GroupSerializerSnubaTest(APITestCase, SnubaTestCase):
         self.week_ago = before_now(days=7)
 
     def test_permalink(self):
-        group = self.create_group(title="Oh no")
+        group = self.create_group()
         result = serialize(group, self.user, serializer=GroupSerializerSnuba())
         assert "http://" in result["permalink"]
         assert "{}/issues/{}".format(group.organization.slug, group.id) in result["permalink"]
 
     def test_permalink_outside_org(self):
         outside_user = self.create_user()
-        group = self.create_group(title="Oh no")
+        group = self.create_group()
         result = serialize(group, outside_user, serializer=GroupSerializerSnuba())
         assert result["permalink"] is None
 
