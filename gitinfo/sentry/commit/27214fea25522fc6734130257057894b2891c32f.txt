commit 27214fea25522fc6734130257057894b2891c32f
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 18 20:12:26 2014 -0700

    Convert edit rule page to Angular

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index a7875e1dd6..c179539449 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -422,6 +422,7 @@ SENTRY_STATIC_BUNDLES = {
 
                 "sentry/app/controllers/default.js",
                 "sentry/app/controllers/deleteTeam.js",
+                "sentry/app/controllers/editProjectRule.js",
                 "sentry/app/controllers/groupDetails.js",
                 "sentry/app/controllers/manageAccessGroupMembers.js",
                 "sentry/app/controllers/manageAccessGroupProjects.js",
@@ -450,12 +451,7 @@ SENTRY_STATIC_BUNDLES = {
 
                 "sentry/app/init.js",
 
-                "sentry/app/base.js",
                 "sentry/app/charts.js",
-                "sentry/app/collections.js",
-                "sentry/app/models.js",
-                "sentry/app/templates.js",
-                "sentry/app/views.js",
                 "sentry/app/utils.js",
             ],
         },
diff --git a/src/sentry/static/sentry/app/base.js b/src/sentry/static/sentry/app/base.js
deleted file mode 100644
index d3792be0ee..0000000000
--- a/src/sentry/static/sentry/app/base.js
+++ /dev/null
@@ -1,383 +0,0 @@
-(function(){
-    'use strict';
-
-    var appConfig = window.SentryConfig;
-
-    var BasePage = Backbone.View.extend({
-
-        defaults: {
-            // can this view stream updates?
-            canStream: false,
-            // should this view default to streaming updates?
-            realtime: false
-        },
-
-        initialize: function(data){
-            Backbone.View.prototype.initialize.apply(this, arguments);
-
-            if (_.isUndefined(data))
-                data = {};
-
-            this.options = $.extend({}, this.defaults, this.options, data);
-
-            this.views = {};
-            this.initializeAjaxTabs();
-        },
-
-        initializeAjaxTabs: function(){
-            $('a[data-toggle=ajtab]').click(_.bind(function(e){
-                var $tab = $(e.target),
-                    uri = $tab.attr('data-uri'),
-                    view_id = $tab.attr('href').substr(1),
-                    view = this.getView(view_id, uri),
-                    $cont, $parent;
-
-                e.preventDefault();
-
-                if (!uri)
-                    return view.reset();
-
-                $cont = $('#' + view_id);
-                $parent = $cont.parent();
-                $parent.css('opacity', 0.6);
-
-                $.ajax({
-                    url: uri,
-                    dataType: 'json',
-                    success: function(data){
-                        view.reset(data);
-                        $parent.css('opacity', 1);
-                        $tab.tab('show');
-                    },
-                    error: function(){
-                        $cont.html('<p>There was an error fetching data from the server.</p>');
-                    }
-                });
-            }, this));
-
-            // initialize active tabs
-            $('li.active a[data-toggle=ajtab]').click();
-        },
-
-        makeDefaultView: function(id){
-            return new app.views.GroupListView({
-                className: 'events small',
-                id: id,
-                maxItems: 5,
-                stream: this.options.stream,
-                realtime: this.options.realtime,
-                model: app.models.Group
-            });
-        },
-
-        getView: function(id, uri){
-            if (!this.views[id])
-                this.views[id] = this.makeDefaultView(id);
-            var view = this.views[id];
-            view.options.pollUrl = uri;
-            return view;
-        }
-
-    });
-
-    $.extend(app, {
-        BasePage: BasePage,
-
-        WallPage: BasePage.extend({
-            initialize: function(){
-                BasePage.prototype.initialize.apply(this, {
-                    realtime: true,
-                    pollTime: 3000
-                });
-
-                this.sparkline = $('.chart');
-                this.sparkline.height(this.sparkline.parent().height());
-                this.stats = $('#stats');
-
-                _.bindAll(this, 'refreshStats', 'refreshSparkline');
-
-                this.refreshSparkline();
-                this.refreshStats();
-            },
-
-            makeDefaultView: function(id){
-                return new app.views.GroupListView({
-                    className: 'events',
-                    id: id,
-                    maxItems: 5,
-                    stream: this.options.stream,
-                    realtime: this.options.realtime,
-                    model: app.models.Group
-                });
-            },
-
-            refreshSparkline: function(){
-                $.ajax({
-                    url: this.sparkline.attr('data-api-url'),
-                    type: 'get',
-                    dataType: 'json',
-                    data: {
-                        since: new Date().getTime() / 1000 - 3600 * 24,
-                        resolution: '1h'
-                    },
-                    success: _.bind(function(data){
-                        for (var i = 0; i < data.length; i++) {
-                            // set timestamp to be in millis
-                            data[i][0] = data[i][0] * 1000;
-                        }
-                        this.sparkline.empty();
-                        $.plot(this.sparkline, [{
-                                data: data,
-                                color: '#52566c',
-                                shadowSize: 0,
-                                lines: {
-                                    lineWidth: 2,
-                                    show: true,
-                                    fill: true,
-                                    fillColor: '#232428'
-                                }
-                            }], {
-                                yaxis: {
-                                    min: 0
-                                },
-                                grid: {
-                                    show: false
-                                },
-                                hoverable: false,
-                                legend: {
-                                    noColumns: 5
-                                },
-                                lines: {
-                                    show: false
-                                }
-                            }
-                        );
-
-                        window.setTimeout(this.refreshSparkline, 10000);
-                    }, this)
-                });
-            },
-
-            refreshStats: function(){
-                $.ajax({
-                    url: this.stats.attr('data-uri'),
-                    dataType: 'json',
-                    success: _.bind(function(data){
-                        this.stats.find('[data-stat]').each(function(){
-                            var $this = $(this);
-                            var new_count = data[$this.attr('data-stat')];
-                            var counter = $this.find('big');
-                            var digit = counter.find('span');
-
-                            if (digit.is(':animated'))
-                                return false;
-
-                            if (counter.data('count') == new_count) {
-                                // We are already showing this number
-                                return false;
-                            }
-
-                            counter.data('count', new_count);
-
-                            var replacement = $('<span></span>', {
-                                css: {
-                                    top: '-2.1em',
-                                    opacity: 0
-                                },
-                                text: new_count
-                            });
-
-                            // The .static class is added when the animation
-                            // completes. This makes it run smoother.
-
-                            digit.before(replacement).animate({
-                                top: '2.5em',
-                                opacity: 0
-                            }, 'fast', function(){
-                                digit.remove();
-                            });
-
-                            replacement.delay(100).animate({
-                                top: 0,
-                                opacity: 1
-                            }, 'fast');
-
-                        });
-                        window.setTimeout(this.refreshStats, 1000);
-                    }, this)
-                });
-            }
-
-        }),
-
-        NewProjectRulePage: BasePage.extend({
-
-            initialize: function(data){
-                BasePage.prototype.initialize.apply(this, arguments);
-
-                _.bindAll(this, 'addAction', 'addCondition', 'parseFormData');
-
-                this.actions_by_id = {};
-                this.conditions_by_id = {};
-                this.el = $(data.el);
-                this.action_sel = this.el.find('select[id="action-select"]');
-                this.action_table = this.el.find('table.action-list');
-                this.action_table_body = this.action_table.find('tbody');
-                this.condition_sel = this.el.find('select[id="condition-select"]');
-                this.condition_table = this.el.find('table.condition-list');
-                this.condition_table_body = this.condition_table.find('tbody');
-
-                this.action_sel.empty();
-                this.action_sel.append($('<option></option>'));
-                $.each(data.actions, _.bind(function(_, action) {
-                    var opt = $('<option></option>');
-                    opt.attr({
-                        value: action.id
-                    });
-                    opt.text(action.label);
-                    opt.appendTo(this.action_sel);
-
-                    this.actions_by_id[action.id] = action;
-                }, this));
-
-                this.condition_sel.empty();
-                this.condition_sel.append($('<option></option>'));
-                $.each(data.conditions, _.bind(function(_, condition) {
-                    var opt = $('<option></option>');
-                    opt.attr({
-                        value: condition.id
-                    });
-                    opt.text(condition.label);
-                    opt.appendTo(this.condition_sel);
-
-                    this.conditions_by_id[condition.id] = condition;
-                }, this));
-
-                this.action_sel.selectize();
-                this.condition_sel.selectize();
-
-                this.action_sel.change(_.bind(function(){
-                    this.addAction(this.action_sel.val());
-                }, this));
-                this.condition_sel.change(_.bind(function(){
-                    this.addCondition(this.condition_sel.val());
-                }, this));
-
-                this.parseFormData(data.form_data, data.form_errors);
-            },
-
-            parseFormData: function(form_data, form_errors) {
-                // start by parsing into condition/action bits
-                var data = {
-                        action: {},
-                        action_match: form_data.action_match || 'all',
-                        condition: {},
-                        label: form_data.label || ''
-                    };
-
-                form_errors = form_errors || {};
-
-                $.each(form_data, function(key, value){
-                    var matches = key.match(/^(condition|action)\[(\d+)\]\[(.+)\]$/);
-                    var type, num;
-                    if (!matches) {
-                        return;
-                    }
-                    type = matches[1];
-                    num = matches[2];
-                    if (data[type][num] === undefined) {
-                        data[type][num] = {};
-                    }
-                    data[type][num][matches[3]] = value;
-                });
-
-                this.el.find('input[name=label]').val(data.label);
-                this.el.find('select[name="action_match"]').val(data.action_match);
-
-                $.each(_.sortBy(data.condition), _.bind(function(num, item){
-                    this.addCondition(item.id, item, form_errors['condition[' + num + ']'] || false);
-                }, this));
-                $.each(_.sortBy(data.action), _.bind(function(num, item){
-                    this.addAction(item.id, item, form_errors['action[' + num + ']'] || false);
-                }, this));
-            },
-
-            addCondition: function(id, options, has_errors) {
-                var node = this.conditions_by_id[id],
-                    row = $('<tr></tr>'),
-                    remove_btn = $('<button class="btn btn-default btn-sm"><span class="icon-trash"></span></button>'),
-                    num = this.condition_table_body.find('tr').length,
-                    html = $('<div>' + node.html + '</div>'),
-                    prefix = 'condition[' + num + ']',
-                    id_field = $('<input type="hidden" name="' + prefix + '[id]" value="' + node.id + '">');
-
-                has_errors = has_errors || false;
-                options = options || {};
-
-                if (has_errors) {
-                    row.addClass('error');
-                }
-
-                html.find('select').selectize();
-
-                // we need to update the id of all form elements
-                html.find('input, select, textarea').each(function(_, el){
-                    var $el = $(el),
-                        name = $el.attr('name');
-                    $el.attr('name', prefix + '[' + name + ']');
-                    $el.val(options[name] || '');
-                });
-                row.append($('<td></td>').append(html).append(id_field));
-                row.append($('<td class="align-right"></td>').append(remove_btn));
-                row.appendTo(this.condition_table_body);
-
-                remove_btn.click(function(){
-                    row.remove();
-                    return false;
-                });
-
-                this.condition_sel.data("selectize").clear();
-                this.condition_table.show();
-            },
-
-            addAction: function(id, options, has_errors) {
-                var node = this.actions_by_id[id],
-                    row = $('<tr></tr>'),
-                    remove_btn = $('<button class="btn btn-default btn-sm"><span class="icon-trash"></span></button>'),
-                    num = this.action_table_body.find('tr').length,
-                    html = $('<div>' + node.html + '</div>'),
-                    prefix = 'action[' + num + ']',
-                    id_field = $('<input type="hidden" name="' + prefix + '[id]" value="' + node.id + '">');
-
-                has_errors = has_errors || false;
-                options = options || {};
-
-                if (has_errors) {
-                    row.addClass('error');
-                }
-
-                html.find('select').selectize();
-
-                // we need to update the id of all form elements
-                html.find('input, select, textarea').each(function(_, el){
-                    var $el = $(el),
-                        name = $el.attr('name');
-                    $el.attr('name', prefix + '[' + name + ']');
-                    $el.val(options[name] || '');
-                });
-                row.append($('<td></td>').append(html).append(id_field));
-                row.append($('<td class="align-right"></td>').append(remove_btn));
-                row.appendTo(this.action_table_body);
-
-                remove_btn.click(function(){
-                    row.remove();
-                    return false;
-                });
-
-                this.action_sel.data("selectize").clear();
-                this.action_table.show();
-            }
-
-        })
-    });
-}());
diff --git a/src/sentry/static/sentry/app/collections.js b/src/sentry/static/sentry/app/collections.js
deleted file mode 100644
index 1bbc461a9e..0000000000
--- a/src/sentry/static/sentry/app/collections.js
+++ /dev/null
@@ -1,11 +0,0 @@
-(function(){
-  'use strict';
-
-  app.collections = {
-    ScoredList: Backbone.Collection.extend({
-      comparator: function(member){
-        return -member.get('score');
-      }
-    })
-  };
-}());
diff --git a/src/sentry/static/sentry/app/controllers/editProjectRule.js b/src/sentry/static/sentry/app/controllers/editProjectRule.js
new file mode 100644
index 0000000000..737c245678
--- /dev/null
+++ b/src/sentry/static/sentry/app/controllers/editProjectRule.js
@@ -0,0 +1,166 @@
+(function(){
+  'use strict';
+
+  var RuleEditor = function(el, data){
+    var self = this;
+
+    this.actions_by_id = {};
+    this.conditions_by_id = {};
+    this.el = $(el);
+
+    this.action_sel = this.el.find('select[id="action-select"]');
+    this.action_table = this.el.find('table.action-list');
+    this.action_table_body = this.action_table.find('tbody');
+    this.condition_sel = this.el.find('select[id="condition-select"]');
+    this.condition_table = this.el.find('table.condition-list');
+    this.condition_table_body = this.condition_table.find('tbody');
+
+    this.action_sel[0].selectize.load(function(callback) {
+      callback($.map(data.actions, function(item){
+        self.actions_by_id[item.id] = item;
+        return {text: item.label, value: item.id};
+      }));
+    });
+
+    this.condition_sel[0].selectize.load(function(callback) {
+      callback($.map(data.conditions, function(item){
+        self.conditions_by_id[item.id] = item;
+        return {text: item.label, value: item.id};
+      }));
+    });
+
+    this.action_sel.change(function(){
+      var val = $(this).val();
+      if (val) {
+        self.addAction(val);
+      }
+    });
+    this.condition_sel.change(function(){
+      var val = $(this).val();
+      if (val) {
+        self.addCondition(val);
+      }
+    });
+
+    this.parseFormData(data.formData, data.formErrors);
+  };
+
+  RuleEditor.prototype.parseFormData = function(form_data, form_errors) {
+    // start by parsing into condition/action bits
+    var data = {
+      action: {},
+      action_match: form_data.action_match || 'all',
+      condition: {},
+      label: form_data.label || ''
+    }, self = this;
+
+    form_errors = form_errors || {};
+
+    $.each(form_data, function(key, value){
+      var matches = key.match(/^(condition|action)\[(\d+)\]\[(.+)\]$/);
+      var type, num;
+      if (!matches) {
+        return;
+      }
+      type = matches[1];
+      num = matches[2];
+      if (data[type][num] === undefined) {
+        data[type][num] = {};
+      }
+      data[type][num][matches[3]] = value;
+    });
+
+    this.el.find('input[name=label]').val(data.label);
+    this.el.find('select[name="action_match"]').val(data.action_match);
+
+    $.each(data.condition, function(num, item){
+      self.addCondition(item.id, item, form_errors['condition[' + num + ']'] || false);
+    });
+    $.each(data.action, function(num, item){
+      self.addAction(item.id, item, form_errors['action[' + num + ']'] || false);
+    });
+  };
+
+  RuleEditor.prototype.addCondition = function(id, options, has_errors) {
+    var node = this.conditions_by_id[id],
+    row = $('<tr></tr>'),
+    remove_btn = $('<button class="btn btn-default btn-sm"><span class="icon-trash"></span></button>'),
+    num = this.condition_table_body.find('tr').length,
+    html = $('<div>' + node.html + '</div>'),
+    prefix = 'condition[' + num + ']',
+    id_field = $('<input type="hidden" name="' + prefix + '[id]" value="' + node.id + '">');
+
+    has_errors = has_errors || false;
+    options = options || {};
+
+    if (has_errors) {
+      row.addClass('error');
+    }
+
+    html.find('select').selectize();
+
+    // we need to update the id of all form elements
+    html.find('input, select, textarea').each(function(_, el){
+      var $el = $(el),
+      name = $el.attr('name');
+      $el.attr('name', prefix + '[' + name + ']');
+      $el.val(options[name] || '');
+    });
+    row.append($('<td></td>').append(html).append(id_field));
+    row.append($('<td class="align-right"></td>').append(remove_btn));
+    row.appendTo(this.condition_table_body);
+
+    remove_btn.click(function(){
+      row.remove();
+      return false;
+    });
+
+    this.condition_sel.data("selectize").clear();
+    this.condition_table.show();
+  };
+
+  RuleEditor.prototype.addAction = function(id, options, has_errors) {
+    var node = this.actions_by_id[id],
+    row = $('<tr></tr>'),
+    remove_btn = $('<button class="btn btn-default btn-sm"><span class="icon-trash"></span></button>'),
+    num = this.action_table_body.find('tr').length,
+    html = $('<div>' + node.html + '</div>'),
+    prefix = 'action[' + num + ']',
+    id_field = $('<input type="hidden" name="' + prefix + '[id]" value="' + node.id + '">');
+
+    has_errors = has_errors || false;
+    options = options || {};
+
+    if (has_errors) {
+      row.addClass('error');
+    }
+
+    html.find('select').selectize();
+
+    // we need to update the id of all form elements
+    html.find('input, select, textarea').each(function(_, el){
+      var $el = $(el),
+      name = $el.attr('name');
+      $el.attr('name', prefix + '[' + name + ']');
+      $el.val(options[name] || '');
+    });
+    row.append($('<td></td>').append(html).append(id_field));
+    row.append($('<td class="align-right"></td>').append(remove_btn));
+    row.appendTo(this.action_table_body);
+
+    remove_btn.click(function(){
+      row.remove();
+      return false;
+    });
+
+    this.action_sel.data("selectize").clear();
+    this.action_table.show();
+  };
+
+  SentryApp.controller('EditProjectRuleCtrl', ['$scope', function($scope){
+    // TODO(dcramer): we need to clean this up somehow
+    new RuleEditor(document.forms.editRuleForm,
+                   window.SentryApp.ruleData);
+  }]);
+
+}());
diff --git a/src/sentry/static/sentry/app/models.js b/src/sentry/static/sentry/app/models.js
deleted file mode 100644
index 3ea27b1210..0000000000
--- a/src/sentry/static/sentry/app/models.js
+++ /dev/null
@@ -1,18 +0,0 @@
-(function(){
-  'use strict';
-
-  app.models = {
-    Group: Backbone.Model.extend({
-      defaults: {
-        count: 0,
-        version: 0,
-        annotations: [],
-        tags: [],
-        versions: [],
-        hasSeen: false,
-        isBookmarked: false,
-        historicalData: []
-      }
-    })
-  };
-}());
diff --git a/src/sentry/static/sentry/app/templates.js b/src/sentry/static/sentry/app/templates.js
deleted file mode 100644
index 208aff4617..0000000000
--- a/src/sentry/static/sentry/app/templates.js
+++ /dev/null
@@ -1,49 +0,0 @@
-/*jshint multistr:true */
-
-(function(){
-  'use strict';
-
-  var groupTemplate = '<div class="event-details event-cell"> \
-  <div class="checkbox"> \
-      <input type="checkbox"> \
-  </div> \
-  <h3><a href="<%= permalink %>"><%= title %></a></h3> \
-  <div class="event-meta"> \
-      <% if (timeSpent) { %><time><%= Math.round(timeSpent) %>ms</time> &middot;<% } %> \
-      <span class="message"><%= message %></span> \
-      &middot; <time><%= firstSeen %></time> \
-  </div> \
-</div> \
-<div class="event-assignee event-cell"> \
-  <div class="user-selector"> \
-    <div class="btn-group"> \
-      <a href="#" class="btn btn-sm btn-default dropdown-toggle"> \
-        <img src="http://github.com/benvinegar.png" class="avatar"> \
-        <span aria-hidden="true" class="icon-arrow-down"></span> \
-      </a> \
-      <div class="dropdown-menu"> \
-        <input type="text" class="form-control input-sm" placeholder="Filter people"> \
-        <ul> \
-          <li><a href="#"><img src="http://github.com/dcramer.png" class="avatar"> David Cramer</a></li> \
-          <li><a href="#"><img src="http://github.com/ckj.png" class="avatar"> Chris Jennings</a></li> \
-          <li><a href="#"><img src="http://github.com/mattrobenolt.png" class="avatar"> Matt Robenolt</a></li> \
-          <li><a href="#"><img src="http://github.com/byk.png" class="avatar"> Red Lobster</a></li> \
-        </ul> \
-      </div> \
-    </div> \
-  </div> \
-</div> \
-<div class="hidden-sm hidden-xs event-graph align-right event-cell"> \
-    <span class="sparkline"></span> \
-</div> \
-<div class="hidden-xs event-occurrences align-center event-cell"> \
-  <span><%= utils.formatNumber(count) %></span> \
-</div> \
-<div class="hidden-xs event-users align-right event-cell"> \
-  <span>209</span> \
-</div>';
-
-  app.templates = {
-    group: groupTemplate
-  };
-}());
diff --git a/src/sentry/static/sentry/app/views.js b/src/sentry/static/sentry/app/views.js
deleted file mode 100644
index 4d158a21cf..0000000000
--- a/src/sentry/static/sentry/app/views.js
+++ /dev/null
@@ -1,506 +0,0 @@
-(function(){
-    'use strict';
-
-    var appConfig = window.SentryConfig;
-
-    app.views = {};
-    app.views.GroupView = Backbone.View.extend({
-        tagName: 'li',
-        className: 'group',
-        template: _.template(app.templates.group),
-
-        initialize: function(){
-            Backbone.View.prototype.initialize.apply(this, arguments);
-
-            _.bindAll(this, 'updateCount', 'updateAllAnnotations', 'updateAnnotation', 'updateLastSeen',
-                'updateResolved', 'updateHasSeen', 'renderSparkline', 'updateBookmarked',
-                'render');
-
-            this.model.on({
-                'change:count': this.updateCount,
-                'change:annotations': this.updateAllAnnotations,
-                'change:lastSeen': this.updateLastSeen,
-                'change:isBookmarked': this.updateBookmarked,
-                'change:isResolved': this.updateResolved,
-                'change:hasSeen': this.updateHasSeen,
-                'change:historicalData': this.renderSparkline
-            }, this);
-        },
-
-        render: function(){
-            var data = this.model.toJSON();
-            data.projectUrl = appConfig.urlPrefix + '/' + appConfig.selectedTeam.slug +
-                '/' + data.project.slug + '/';
-            data.loggerUrl = data.projectUrl + '?logger=' + data.logger;
-            data.utils = app.utils;
-
-            this.$el.html(this.template(data));
-            this.$el.attr('data-id', this.model.id);
-            this.$el.addClass(this.getLevelClassName());
-            this.$el.find('a[data-action=resolve]').click(_.bind(function(e){
-                e.preventDefault();
-                if (this.model.get('isResolved')) {
-                    this.unresolve();
-                } else {
-                    this.resolve();
-                }
-            }, this));
-            this.$el.find('a[data-action=bookmark]').click(_.bind(function(e){
-                e.preventDefault();
-                this.bookmark();
-            }, this));
-            this.updateLastSeen();
-            this.renderSparkline();
-            this.updateResolved();
-            this.updateHasSeen();
-            this.updateBookmarked();
-        },
-
-        updateBookmarked: function(){
-            if (this.model.get('isBookmarked')) {
-                this.$el.find('a[data-action=bookmark]').addClass('checked');
-            } else {
-                this.$el.find('a[data-action=bookmark]').removeClass('checked');
-            }
-        },
-
-        updateResolved: function(){
-            if (this.model.get('isResolved')) {
-                this.$el.addClass('resolved');
-            } else {
-                this.$el.removeClass('resolved');
-            }
-        },
-
-        updateHasSeen: function(){
-            if (this.model.get('hasSeen')) {
-                this.$el.addClass('seen');
-            } else {
-                this.$el.removeClass('seen');
-            }
-        },
-
-        renderSparkline: function(obj){
-            var data = this.model.get('historicalData');
-            if (!data || !data.length)
-                return;
-
-            this.$el.addClass('with-sparkline');
-
-            app.charts.createSparkline(this.$el.find('.sparkline'), data);
-        },
-
-        resolve: function(){
-            $.ajax({
-                url: this.getResolveUrl(),
-                type: 'post',
-                dataType: 'json',
-                success: _.bind(function(response) {
-                    this.model.set('version', response.version + 5000);
-                    this.model.set('isResolved', true);
-                }, this)
-            });
-        },
-
-        unresolve: function(){
-            $.ajax({
-                url: this.getUnresolveUrl(),
-                type: 'post',
-                dataType: 'json',
-                success: _.bind(function(response) {
-                    this.model.set('version', response.version + 5000);
-                    this.model.set('isResolved', false);
-                }, this)
-            });
-        },
-
-        getResolveUrl: function(){
-            return appConfig.urlPrefix + '/api/' + appConfig.selectedTeam.slug + '/' +
-                    appConfig.selectedProject.slug + '/group/' + this.model.get('id') +
-                    '/set/resolved/';
-        },
-
-        getUnresolveUrl: function(){
-            return appConfig.urlPrefix + '/api/' + appConfig.selectedTeam.slug + '/' +
-                    appConfig.selectedProject.slug + '/group/' + this.model.get('id') +
-                    '/set/unresolved/';
-        },
-
-        getBookmarkUrl: function(){
-            return appConfig.urlPrefix + '/api/' + appConfig.selectedTeam.slug + '/' + appConfig.selectedProject.slug + '/bookmark/';
-        },
-
-        bookmark: function(){
-            $.ajax({
-                url: this.getBookmarkUrl(),
-                type: 'post',
-                dataType: 'json',
-                data: {
-                    gid: this.model.get('id')
-                },
-                success: _.bind(function(response){
-                    this.model.set('version', response.version);
-                    this.model.set('isBookmarked', response.isBookmarked);
-                }, this)
-            });
-        },
-
-        getLevelClassName: function(){
-            return 'level-' + this.model.get('levelName');
-        },
-
-        updateLastSeen: function(){
-            var dt = moment(this.model.get('lastSeen'));
-            this.$el.find('.last-seen')
-                .text(dt.fromNow())
-                .data('datetime', this.model.get('lastSeen'))
-                .attr('title', dt.format('llll'));
-        },
-
-        updateCount: function(){
-            var new_count = app.utils.formatNumber(this.model.get('count'));
-            var counter = this.$el.find('.count');
-            var digit = counter.find('span');
-
-            if (digit.is(':animated'))
-                return false;
-
-            if (counter.data('count') == new_count) {
-                // We are already showing this number
-                return false;
-            }
-
-            counter.data('count', new_count);
-
-            var replacement = $('<span></span>', {
-                css: {
-                    top: '-2.1em',
-                    opacity: 0
-                },
-                text: new_count
-            });
-
-            // The .static class is added when the animation
-            // completes. This makes it run smoother.
-
-            digit.before(replacement).animate({
-                top: '2.5em',
-                opacity: 0
-            }, 'fast', function(){
-                digit.remove();
-            });
-
-            replacement.delay(100).animate({
-                top: 0,
-                opacity: 1
-            }, 'fast');
-        },
-
-        updateAnnotation: function(annotation){
-            var value = annotation.count;
-            if (value === null)
-                return;
-            var new_count = app.utils.formatNumber(value);
-            var counter = this.$el.find('.annotation[data-tag="' + annotation.label + '"]');
-            var digit = counter.find('span');
-
-            if (digit.is(':animated'))
-                return false;
-
-            if (counter.data('count') == new_count) {
-                // We are already showing this number
-                return false;
-            }
-
-            counter.data('count', new_count);
-
-            var replacement = $('<span></span>', {
-                css: {
-                    top: '-2.1em',
-                    opacity: 0
-                },
-                text: new_count
-            });
-
-            // The .static class is added when the animation
-            // completes. This makes it run smoother.
-
-            digit.before(replacement).animate({
-                top: '2.5em',
-                opacity: 0
-            }, 'fast', function(){
-                digit.remove();
-            });
-
-            replacement.delay(100).animate({
-                top: 0,
-                opacity: 1
-            }, 'fast');
-        },
-
-        updateAllAnnotations: function(){
-            var self = this;
-            $.each(this.model.get('annotations'), function(index, annotation){
-                self.updateAnnotation(annotation);
-            });
-        }
-
-    });
-
-    app.views.OrderedElementsView = Backbone.View.extend({
-
-        emptyMessage: '<div class="empty-message"><h2>No events to show.</h2><p>We\'ll notify you if that changes. In the meantime why not take a moment to become more familiar with Sentry.</p><p class="links"><a href="docs/">Installation instructions</a> <a href="settings/">Project settings</a></p></div>',
-        loadingMessage: '<p>Loading...</p>',
-        model: app.models.Group,
-
-        defaults: {
-            maxItems: 50,
-            view: Backbone.View
-        },
-
-        initialize: function(data){
-            if (_.isUndefined(data))
-                data = {};
-
-            var members = data.members;
-
-            Backbone.View.prototype.initialize.apply(this, arguments);
-
-            this.options = $.extend({}, this.defaults, this.options, data);
-
-            this.$wrapper = $('#' + this.id);
-            this.$parent = $('<ul></ul>');
-            this.$empty = $('<li class="empty"></li>');
-            this.$wrapper.html(this.$parent);
-
-            if (this.options.className)
-                this.$parent.addClass(this.options.className);
-
-            _.bindAll(this, 'renderMemberInContainer', 'unrenderMember', 'reSortMembers');
-
-            this.collection = new app.collections.ScoredList([], {
-                model: data.model
-            });
-            this.collection.on('add', this.renderMemberInContainer, this);
-            this.collection.on('remove', this.unrenderMember, this);
-            this.collection.on('reset', this.reSortMembers, this);
-
-            delete data.members;
-
-            this.reset(members);
-        },
-
-        reset: function(members){
-            this.$parent.empty();
-            this.setEmpty();
-
-            if (members === undefined) {
-                this.$empty.html(this.loadingMessage);
-                this.collection.reset();
-                this.setEmpty();
-                this.loaded = false;
-            } else {
-                this.$empty.html(this.emptyMessage);
-                this.collection.reset(members);
-                this.loaded = true;
-            }
-        },
-
-        setEmpty: function(){
-            this.$parent.html(this.$empty);
-            $('.stream-actions').hide();
-        },
-
-        extend: function(data){
-            for (var i=0; i<data.length; i++) {
-                this.addMember(data[i]);
-            }
-        },
-
-        addMember: function(member){
-            var existing = this.collection.get(member.id);
-            if (!existing) {
-                if (this.collection.length >= this.options.maxItems) {
-                    // bail early if the score is too low
-                    if (member.score < this.collection.last().get('score'))
-                        return;
-
-                    // make sure we limit the number shown
-                    while (this.collection.length >= this.options.maxItems)
-                        this.collection.pop();
-                }
-            } else if (member.version && existing.get('version') >= member.version) {
-                return;
-            }
-            this.collection.add(member, {merge: true});
-        },
-
-        reSortMembers: function(){
-            this.collection.each(_.bind(function(member){
-                this.renderMemberInContainer(member);
-            }, this));
-        },
-
-        updateMember: function(member, options){
-            if (_.isUndefined(options))
-                options = {};
-
-            var existing = this.collection.get(member.id);
-            if (existing.get('version') >= member.get('version'))
-                return;
-
-            this.collection.add(member, {
-                merge: true,
-                sort: options.sort !== false ? true : false
-            });
-
-        },
-
-        hasMember: function(member){
-            return (this.collection.get(member.id) ? true : false);
-        },
-
-        removeMember: function(member){
-            this.collection.remove(member);
-        },
-
-        renderMemberInContainer: function(member){
-            var new_pos = this.collection.indexOf(member),
-                $el, $rel;
-
-            this.$parent.find('li.empty').remove();
-            $('.stream-actions').show();
-
-            $el = $('#' + this.id + member.id);
-
-            if (!$el.length) {
-                // create the element if it does not yet exist
-                $el = this.renderMember(member);
-            } else if ($el.index() === new_pos) {
-                // if the row was already present, ensure it moved
-                return;
-            }
-
-            // top item
-            if (new_pos === 0) {
-                this.$parent.prepend($el);
-            } else {
-                // find existing item at new position
-                $rel = $('#' + this.id + this.collection.at(new_pos).id);
-                if (!$rel.length) {
-                    this.$parent.append($el);
-                } else if ($el.id !== $rel.id) {
-                    // TODO: why do we get here?
-                    $el.insertBefore($rel);
-                } else {
-
-                    return;
-                }
-            }
-
-            if (this.loaded)
-                $el.addClass("new").delay(100).removeClass("new");
-        },
-
-        renderMember: function(member){
-            var view = new this.options.view({
-                model: member,
-                id: this.id + member.id
-            });
-            view.render();
-            return view.$el;
-        },
-
-        unrenderMember: function(member){
-            this.$parent.find('#' + this.id + member.id).remove();
-            if (!this.$parent.find('li').length)
-                this.setEmpty();
-        }
-
-    });
-
-    app.views.GroupListView = app.views.OrderedElementsView.extend({
-
-        defaults: {
-            realtime: false,
-            stream: false,
-            pollUrl: null,
-            pollTime: 1000,
-            tickTime: 100
-        },
-
-        initialize: function(data){
-            if (_.isUndefined(data))
-                data = {};
-
-            data.model = app.models.Group;
-            data.view = app.views.GroupView;
-
-            app.views.OrderedElementsView.prototype.initialize.call(this, data);
-
-            this.options = $.extend({}, this.defaults, this.options, data);
-
-            this.queue = new app.collections.ScoredList([], {
-                model: data.model
-            });
-
-            this.cursor = null;
-
-            _.bindAll(this, 'poll', 'pollSuccess', 'pollFailure', 'tick');
-
-            this.poll();
-
-            window.setInterval(this.tick, this.options.tickTime);
-        },
-
-        tick: function(){
-            if (!this.queue.length)
-                return;
-
-            var item = this.queue.pop();
-            if (this.options.canStream){
-                this.addMember(item);
-            } else if (this.hasMember(item)) {
-                this.updateMember(item, {
-                    sort: false
-                });
-            }
-        },
-
-        pollSuccess: function(groups){
-            if (!groups.length)
-                return window.setTimeout(this.poll, this.options.pollTime * 5);
-
-            this.cursor = groups[groups.length - 1].score;
-
-            this.queue.add(groups, {merge: true});
-
-            window.setTimeout(this.poll, this.options.pollTime);
-        },
-
-        pollFailure: function(jqXHR, textStatus, errorThrown){
-            // if an error happened lets give the server a bit of time before we poll again
-            window.setTimeout(this.poll, this.options.pollTime * 10);
-        },
-
-        poll: function(){
-            var data;
-
-            if (!this.options.realtime || !this.options.pollUrl)
-                return window.setTimeout(this.poll, this.options.pollTime);
-
-            data = app.utils.getQueryParams();
-            data.cursor = this.cursor || undefined;
-
-            $.ajax({
-                url: this.options.pollUrl,
-                type: 'GET',
-                dataType: 'json',
-                data: data,
-                success: this.pollSuccess,
-                error: this.pollFailure
-            });
-        }
-
-    });
-}());
diff --git a/src/sentry/templates/sentry/projects/rules/new.html b/src/sentry/templates/sentry/projects/rules/new.html
index 03b96be1fd..f3747550ef 100644
--- a/src/sentry/templates/sentry/projects/rules/new.html
+++ b/src/sentry/templates/sentry/projects/rules/new.html
@@ -4,6 +4,8 @@
 {% load i18n %}
 {% load sentry_helpers %}
 
+{% block controller %}EditProjectRuleCtrl{% endblock %}
+
 {% block inner %}
     <h2>
         {% if rule.id %}
@@ -14,77 +16,74 @@
         <small>Applying to Events</small>
     </h2>
 
-    <div id="new-rule-form">
-        <form method="POST" action=".">
-            {% csrf_token %}
+    <form method="POST" action="." name="editRuleForm">
+        {% csrf_token %}
 
-            {% if not form_is_valid %}
-                <div class="alert-block alert alert-error">
-                    <p>{% trans "There were errors with your submission. Please ensure all options are filled out correctly." %}</p>
-                </div>
-            {% endif %}
+        {% if not form_is_valid %}
+            <div class="alert-block alert alert-error">
+                <p>{% trans "There were errors with your submission. Please ensure all options are filled out correctly." %}</p>
+            </div>
+        {% endif %}
 
-            {{ form|as_crispy_errors }}
+        {{ form|as_crispy_errors }}
 
 
-            <div class="box">
-              <div class="box-header">
-                <h3>{% trans "Rule label:" %}</h3>
-              </div>
-              <div class="box-content" style="padding: 10px;">
-                <input type="text" name="label" class="form-control" placeholder="{% trans "e.g. My Rule Name" %}">
+        <div class="box">
+          <div class="box-header">
+            <h3>{% trans "Rule label:" %}</h3>
+          </div>
+          <div class="box-content" style="padding: 10px;">
+            <input type="text" name="label" class="form-control" placeholder="{% trans "e.g. My Rule Name" %}">
+          </div>
+        </div>
+
+        <div class="box">
+            <div class="box-header" style="padding-top: 5px; padding-bottom: 0px; font-weight: 500">
+                Every time <select name="action_match" style="width:100px;" class="select2-small select2-inline">
+                    <option value="all">all of</option>
+                    <option value="any">any of</option>
+                    <option value="none">none of</option>
+                </select> these conditions are met:
+            </div>
+            <div class="box-content" style="padding: 0 10px 6px;">
+              <table class="condition-list table table-light" style="margin-bottom: 10px;">
+                  <col>
+                  <col style="width: 25%; text-align: right">
+                  <tbody></tbody>
+              </table>
+              <div class="controls">
+                  <select id="condition-select" placeholder="add a condition"></select>
               </div>
             </div>
+        </div>
 
-            <div class="box">
-                <div class="box-header" style="padding-top: 5px; padding-bottom: 0px; font-weight: 500">
-                    Every time <select name="action_match" style="width:100px;" class="select2-small select2-inline">
-                        <option value="all">all of</option>
-                        <option value="any">any of</option>
-                        <option value="none">none of</option>
-                    </select> these conditions are met:
-                </div>
-                <div class="box-content" style="padding: 0 10px 6px;">
-                  <table class="condition-list table table-light" style="margin-bottom: 10px;">
-                      <col>
-                      <col style="width: 25%; text-align: right">
-                      <tbody></tbody>
-                  </table>
-                  <div class="controls">
-                      <select id="condition-select" placeholder="add a condition"></select>
-                  </div>
-                </div>
+        <div class="box">
+            <div class="box-header">
+                <h3>Take these actions:</h3>
             </div>
-
-            <div class="box">
-                <div class="box-header">
-                    <h3>Take these actions:</h3>
-                </div>
-                <div class="box-content" style="padding: 0 10px 6px;">
-                  <table class="action-list table table-light" style="margin-bottom: 10px;">
-                      <col>
-                      <col style="width: 25%; text-align: right">
-                      <tbody></tbody>
-                  </table>
-                  <div class="controls">
-                      <select id="action-select" placeholder="add an action"></select>
-                  </div>
-                </div>
+            <div class="box-content" style="padding: 0 10px 6px;">
+              <table class="action-list table table-light" style="margin-bottom: 10px;">
+                  <col>
+                  <col style="width: 25%; text-align: right">
+                  <tbody></tbody>
+              </table>
+              <div class="controls">
+                  <select id="action-select" placeholder="add an action"></select>
+              </div>
             </div>
+        </div>
 
-            <div class="actions">
-                <button type="submit" class="btn btn-primary">{% trans "Save Rule" %}</button>
-            </div>
-        </form>
-    </div>
+        <div class="actions">
+            <button type="submit" class="btn btn-primary">{% trans "Save Rule" %}</button>
+        </div>
+    </form>
 
     <script>
-    new app.NewProjectRulePage({
-        el: '#new-rule-form',
-        actions: {{ action_list|safe }},
-        conditions: {{ condition_list|safe }},
-        form_data: {{ form_data|to_json|safe }},
-        form_errors: {{ form_errors|to_json|safe }}
-    });
+    window.SentryApp.ruleData = {
+      actions: {{ action_list|safe }},
+      conditions: {{ condition_list|safe }},
+      formData: {{ form_data|to_json|safe }},
+      formErrors: {{ form_errors|to_json|safe }}
+    };
     </script>
 {% endblock %}
