commit ebf1c27232017f828b681e3b3bb4642f9bd8306a
Author: josh <josh@jrl.ninja>
Date:   Fri Dec 13 10:39:36 2019 -0800

    ref: prevent lookups for Bit and BitHandler under Django 1.9, 1.10 (#16093)

diff --git a/src/bitfield/models.py b/src/bitfield/models.py
index a4415bb78c..4b50b4be3d 100644
--- a/src/bitfield/models.py
+++ b/src/bitfield/models.py
@@ -5,7 +5,7 @@ import six
 from django.db.models.fields import BigIntegerField, Field
 
 from bitfield.forms import BitFormField
-from bitfield.query import BitQueryLookupWrapper
+from bitfield.query import BitQueryExactLookupStub
 from bitfield.types import Bit, BitHandler
 
 # Count binary capacity. Truncate "0b" prefix from binary form.
@@ -135,21 +135,17 @@ class BitField(BigIntegerField):
         return int(value)
 
     def get_db_prep_lookup(self, lookup_type, value, connection, prepared=False):
-        if isinstance(getattr(value, "expression", None), Bit):
-            value = value.expression
         if isinstance(value, (BitHandler, Bit)):
-            return [value.mask]
+            raise NotImplementedError("get_db_prep_lookup not supported with types Bit, BitHandler")
+
         return BigIntegerField.get_db_prep_lookup(
             self, lookup_type=lookup_type, value=value, connection=connection, prepared=prepared
         )
 
     def get_prep_lookup(self, lookup_type, value):
-        if isinstance(getattr(value, "expression", None), Bit):
-            value = value.expression
         if isinstance(value, Bit):
-            if lookup_type in ("exact",):
-                return value
-            raise TypeError("Lookup type %r not supported with `Bit` type." % lookup_type)
+            raise NotImplementedError("Lookup type %r not supported with Bit type." % lookup_type)
+
         return BigIntegerField.get_prep_lookup(self, lookup_type, value)
 
     def to_python(self, value):
@@ -177,4 +173,4 @@ class BitField(BigIntegerField):
         return name, path, args, kwargs
 
 
-BitField.register_lookup(BitQueryLookupWrapper)
+BitField.register_lookup(BitQueryExactLookupStub)
diff --git a/src/bitfield/query.py b/src/bitfield/query.py
index f9a632014e..be0c6829df 100644
--- a/src/bitfield/query.py
+++ b/src/bitfield/query.py
@@ -2,22 +2,16 @@ from __future__ import absolute_import
 
 from bitfield.types import Bit, BitHandler
 
-from django.db.models.lookups import Lookup
+from django.db.models.lookups import Exact
 
 
-class BitQueryLookupWrapper(Lookup):
-    def process_lhs(self, qn, connection, lhs=None):
-        lhs_sql, params = super(BitQueryLookupWrapper, self).process_lhs(qn, connection, lhs)
-        if self.rhs:
-            lhs_sql = lhs_sql + " & %s"
-        else:
-            lhs_sql = lhs_sql + " | %s"
-        params.extend(self.process_rhs(qn, connection)[1])
-        return lhs_sql, params
-
+class BitQueryExactLookupStub(Exact):
     def get_db_prep_lookup(self, value, connection, prepared=False):
-        v = value.mask if isinstance(value, (BitHandler, Bit)) else value
-        return super(BitQueryLookupWrapper, self).get_db_prep_lookup(v, connection)
+        if isinstance(value, (BitHandler, Bit)):
+            raise NotImplementedError("get_db_prep_lookup not supported for Bit, BitHandler")
+        return super(BitQueryExactLookupStub, self).get_db_prep_lookup(value, connection)
 
     def get_prep_lookup(self):
+        if isinstance(self.rhs, (Bit,)):
+            raise NotImplementedError("get_db_prep_lookup not supported for Bit")
         return self.rhs
diff --git a/tests/sentry/db/models/fields/bitfield/test_bitfield.py b/tests/sentry/db/models/fields/bitfield/test_bitfield.py
index 3a64470e1e..4dc1a22267 100644
--- a/tests/sentry/db/models/fields/bitfield/test_bitfield.py
+++ b/tests/sentry/db/models/fields/bitfield/test_bitfield.py
@@ -233,7 +233,9 @@ class BitFieldTest(TestCase):
         self.assertTrue(instance.flags.FLAG_1)
         self.assertTrue(instance.flags.FLAG_3)
         self.assertFalse(
-            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_0).exists()
+            BitFieldTestModel.objects.filter(
+                flags=F("flags").bitor(BitFieldTestModel.flags.FLAG_0)
+            ).exists()
         )
 
         BitFieldTestModel.objects.filter(pk=instance.pk).update(
