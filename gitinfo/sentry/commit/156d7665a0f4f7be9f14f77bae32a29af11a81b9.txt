commit 156d7665a0f4f7be9f14f77bae32a29af11a81b9
Author: Eric Feng <eric@getsentry.com>
Date:   Fri Jul 15 16:14:24 2016 -0700

    Account notifications classview
    
    Change account notifications to classview
    
    /cc @getsentry/team

diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 96eb31d925..0b9251d591 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -38,3 +38,5 @@ member_invited = BetterSignal(providing_args=["member", "user"])
 member_joined = BetterSignal(providing_args=["member"])
 issue_tracker_used = BetterSignal(providing_args=["plugin", "project", "user"])
 plugin_enabled = BetterSignal(providing_args=["plugin", "project", "user"])
+
+email_verified = BetterSignal(providing_args=["email"])
diff --git a/src/sentry/templates/sentry/account/notifications.html b/src/sentry/templates/sentry/account/notifications.html
index 9b0ec880ca..ad98d07ccb 100644
--- a/src/sentry/templates/sentry/account/notifications.html
+++ b/src/sentry/templates/sentry/account/notifications.html
@@ -108,6 +108,9 @@
             {% include "sentry/partial/form_base.html" %}
         {% endfor %}
 
+        {% block hosted_notifications %}
+        {% endblock %}
+
         <fieldset class="form-actions">
             <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
         </fieldset>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index f7e861631b..d29cb62cd6 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -345,7 +345,11 @@ class AppearanceSettingsForm(forms.Form):
 
 
 class NotificationSettingsForm(forms.Form):
-    alert_email = forms.EmailField(label=_('Email'), help_text=_('Designate an alternative email address to send email notifications to.'), required=False)
+    alert_email = forms.EmailField(
+        label=_('Email'),
+        help_text=_('Designate an alternative email address to send email notifications to.'),
+        required=False
+    )
     subscribe_by_default = forms.BooleanField(
         label=_('Subscribe to alerts for projects by default'),
         required=False,
@@ -358,6 +362,7 @@ class NotificationSettingsForm(forms.Form):
     def __init__(self, user, *args, **kwargs):
         self.user = user
         super(NotificationSettingsForm, self).__init__(*args, **kwargs)
+
         self.fields['alert_email'].initial = UserOption.objects.get_value(
             user=self.user,
             project=None,
diff --git a/src/sentry/web/frontend/account_notification.py b/src/sentry/web/frontend/account_notification.py
new file mode 100644
index 0000000000..a9eaa6b6d0
--- /dev/null
+++ b/src/sentry/web/frontend/account_notification.py
@@ -0,0 +1,81 @@
+from __future__ import absolute_import
+
+import itertools
+
+from django.contrib import messages
+from django.core.context_processors import csrf
+from django.db import transaction
+from django.http import HttpResponseRedirect
+from django.views.decorators.cache import never_cache
+from django.views.decorators.csrf import csrf_protect
+from django.utils.decorators import method_decorator
+
+from sudo.decorators import sudo_required
+
+from sentry.models import (
+    Project, ProjectStatus
+)
+from sentry.plugins import plugins
+from sentry.web.forms.accounts import ProjectEmailOptionsForm, NotificationSettingsForm
+from sentry.web.decorators import login_required
+from sentry.web.frontend.base import BaseView
+from sentry.web.helpers import render_to_response
+from sentry.utils.auth import get_auth_providers
+from sentry.utils.safe import safe_execute
+
+
+class AccountNotificationView(BaseView):
+    notification_settings_form = NotificationSettingsForm
+
+    @method_decorator(csrf_protect)
+    @method_decorator(never_cache)
+    @method_decorator(login_required)
+    @method_decorator(sudo_required)
+    @method_decorator(transaction.atomic)
+    def handle(self, request):
+        settings_form = self.notification_settings_form(request.user, request.POST or None)
+
+        project_list = list(Project.objects.filter(
+            team__organizationmemberteam__organizationmember__user=request.user,
+            team__organizationmemberteam__is_active=True,
+            status=ProjectStatus.VISIBLE,
+        ).distinct())
+
+        project_forms = [
+            (project, ProjectEmailOptionsForm(
+                project, request.user,
+                request.POST or None,
+                prefix='project-%s' % (project.id,)
+            ))
+            for project in sorted(project_list, key=lambda x: (
+                x.team.name if x.team else None, x.name))
+        ]
+
+        ext_forms = []
+        for plugin in plugins.all():
+            for form in safe_execute(plugin.get_notification_forms, _with_transaction=False) or ():
+                form = safe_execute(form, plugin, request.user, request.POST or None, prefix=plugin.slug,
+                                    _with_transaction=False)
+                if not form:
+                    continue
+                ext_forms.append(form)
+
+        if request.POST:
+            all_forms = list(itertools.chain(
+                [settings_form], ext_forms, (f for _, f in project_forms)
+            ))
+            if all(f.is_valid() for f in all_forms):
+                for form in all_forms:
+                    form.save()
+                messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
+                return HttpResponseRedirect(request.path)
+
+        context = csrf(request)
+        context.update({
+            'settings_form': settings_form,
+            'project_forms': project_forms,
+            'ext_forms': ext_forms,
+            'page': 'notifications',
+            'AUTH_PROVIDERS': get_auth_providers(),
+        })
+        return render_to_response('sentry/account/notifications.html', context, request)
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 528f6b1786..380da8addd 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -7,8 +7,6 @@ sentry.web.frontend.accounts
 """
 from __future__ import absolute_import
 
-import itertools
-
 from django.contrib import messages
 from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
@@ -22,18 +20,16 @@ from django.utils.translation import ugettext as _
 from sudo.decorators import sudo_required
 
 from sentry.models import (
-    UserEmail, LostPasswordHash, Project, ProjectStatus, UserOption, Authenticator
+    UserEmail, LostPasswordHash, Project, UserOption, Authenticator
 )
-from sentry.plugins import plugins
+from sentry.signals import email_verified
 from sentry.web.decorators import login_required, signed_auth_required
 from sentry.web.forms.accounts import (
-    AccountSettingsForm, NotificationSettingsForm, AppearanceSettingsForm,
+    AccountSettingsForm, AppearanceSettingsForm,
     RecoverPasswordForm, ChangePasswordRecoverForm,
-    ProjectEmailOptionsForm
 )
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers, get_login_redirect
-from sentry.utils.safe import safe_execute
 
 
 def send_password_recovery_mail(user):
@@ -153,6 +149,7 @@ def confirm_email(request, user_id, hash):
         email.is_verified = True
         email.validation_hash = ''
         email.save()
+        email_verified.send(email=email.email, sender=email)
     messages.add_message(request, level, msg)
     return HttpResponseRedirect(reverse('sentry-account-settings'))
 
@@ -273,60 +270,6 @@ def appearance_settings(request):
     return render_to_response('sentry/account/appearance.html', context, request)
 
 
-@csrf_protect
-@never_cache
-@login_required
-@sudo_required
-@transaction.atomic
-def notification_settings(request):
-    settings_form = NotificationSettingsForm(request.user, request.POST or None)
-
-    project_list = list(Project.objects.filter(
-        team__organizationmemberteam__organizationmember__user=request.user,
-        team__organizationmemberteam__is_active=True,
-        status=ProjectStatus.VISIBLE,
-    ).distinct())
-
-    project_forms = [
-        (project, ProjectEmailOptionsForm(
-            project, request.user,
-            request.POST or None,
-            prefix='project-%s' % (project.id,)
-        ))
-        for project in sorted(project_list, key=lambda x: (
-            x.team.name if x.team else None, x.name))
-    ]
-
-    ext_forms = []
-    for plugin in plugins.all():
-        for form in safe_execute(plugin.get_notification_forms, _with_transaction=False) or ():
-            form = safe_execute(form, plugin, request.user, request.POST or None, prefix=plugin.slug,
-                                _with_transaction=False)
-            if not form:
-                continue
-            ext_forms.append(form)
-
-    if request.POST:
-        all_forms = list(itertools.chain(
-            [settings_form], ext_forms, (f for _, f in project_forms)
-        ))
-        if all(f.is_valid() for f in all_forms):
-            for form in all_forms:
-                form.save()
-            messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
-            return HttpResponseRedirect(request.path)
-
-    context = csrf(request)
-    context.update({
-        'settings_form': settings_form,
-        'project_forms': project_forms,
-        'ext_forms': ext_forms,
-        'page': 'notifications',
-        'AUTH_PROVIDERS': get_auth_providers(),
-    })
-    return render_to_response('sentry/account/notifications.html', context, request)
-
-
 @csrf_protect
 @never_cache
 @signed_auth_required
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index a2e651639b..6c2ccf3fde 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -17,6 +17,7 @@ from sentry.web.frontend import accounts, admin, generic, accounts_twofactor
 from sentry.web.frontend.accept_organization_invite import \
     AcceptOrganizationInviteView
 from sentry.web.frontend.account_security import AccountSecurityView
+from sentry.web.frontend.account_notification import AccountNotificationView
 from sentry.web.frontend.admin_queue import AdminQueueView
 from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.twofactor import TwoFactorAuthView, u2f_appid
@@ -258,7 +259,7 @@ urlpatterns += patterns(
         name='sentry-account-settings-appearance'),
     url(r'^account/settings/identities/$', accounts.list_identities,
         name='sentry-account-settings-identities'),
-    url(r'^account/settings/notifications/$', accounts.notification_settings,
+    url(r'^account/settings/notifications/$', AccountNotificationView.as_view(),
         name='sentry-account-settings-notifications'),
     url(r'^account/settings/security/$', AccountSecurityView.as_view(),
         name='sentry-account-security'),
