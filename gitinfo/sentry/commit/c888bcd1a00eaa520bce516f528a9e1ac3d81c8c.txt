commit c888bcd1a00eaa520bce516f528a9e1ac3d81c8c
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 22 17:25:19 2015 +0200

    Abstract status checks into extensible system

diff --git a/src/sentry/status_checks/__init__.py b/src/sentry/status_checks/__init__.py
new file mode 100644
index 0000000000..68722c2251
--- /dev/null
+++ b/src/sentry/status_checks/__init__.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+__all__ = ('check_all', 'Problem', 'StatusCheck')
+
+from .base import Problem, StatusCheck  # NOQA
+from .celery_ping import CeleryPingCheck
+
+checks = [
+    CeleryPingCheck,
+]
+
+
+def check_all():
+    problems = []
+    for cls in checks:
+        problems.extend(cls().check())
+    return problems
diff --git a/src/sentry/status_checks/base.py b/src/sentry/status_checks/base.py
new file mode 100644
index 0000000000..d4c1250184
--- /dev/null
+++ b/src/sentry/status_checks/base.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+
+class Problem(object):
+    def __init__(self, message):
+        self.message = unicode(message)
+
+    def __str__(self):
+        return self.message.encode('utf-8')
+
+    def __unicode__(self):
+        return self.message
+
+
+class StatusCheck(object):
+    def check(self):
+        """
+        Perform required checks and return a list of ``Problem`` instances.
+        """
+        raise NotImplementedError
diff --git a/src/sentry/status_checks/celery_ping.py b/src/sentry/status_checks/celery_ping.py
new file mode 100644
index 0000000000..b5f282748a
--- /dev/null
+++ b/src/sentry/status_checks/celery_ping.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from time import time
+
+from sentry import options
+
+from .base import StatusCheck, Problem
+
+
+class CeleryPingCheck(StatusCheck):
+    def check(self):
+        last_ping = options.get('sentry:last_worker_ping') or 0
+        if last_ping >= time() - 300:
+            return
+
+        return [
+            Problem("Background workers haven't checked in recently. This can mean an issue with your configuration or a serious backlog in tasks."),
+        ]
diff --git a/src/sentry/templatetags/sentry_status.py b/src/sentry/templatetags/sentry_status.py
index e1d50ab698..dffb0efc92 100644
--- a/src/sentry/templatetags/sentry_status.py
+++ b/src/sentry/templatetags/sentry_status.py
@@ -1,22 +1,15 @@
 from __future__ import absolute_import, print_function
 
 from django import template
-from time import time
 
-from sentry import options
+from sentry import status_checks
 
 register = template.Library()
 
-ERR_WORKERS_LONG_PING = "Background workers haven't checked in recently. This can mean an issue with your configuration or a serious backlog in tasks."
-
 
 @register.inclusion_tag('sentry/partial/system-status.html', takes_context=True)
 def show_system_status(context):
-    problems = []
-
-    last_ping = options.get('sentry:last_worker_ping') or 0
-    if last_ping < time() - 300:
-        problems.append(ERR_WORKERS_LONG_PING)
+    problems = status_checks.check_all()
 
     return {
         'problems': problems,
