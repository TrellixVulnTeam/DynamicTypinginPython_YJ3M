commit a21aa219a1e91234489283630ba9d36b49177461
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 29 15:27:42 2016 -0700

    Initial workflow configuration
    
    - Move activity emails to new workflow setting (breaks off from alerts)
    - Only email participating users on events
    - Break up activity notifications into new simplified abstraction
    - Add resolved, resolved in release, regression, and unassigned emails
    - Improve debug flows
    - Add acceptance tests for activity emails

diff --git a/src/sentry/plugins/sentry_mail/activity/__init__.py b/src/sentry/plugins/sentry_mail/activity/__init__.py
new file mode 100644
index 0000000000..b1eefd31d8
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/__init__.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from sentry.models import Activity
+
+from .assigned import AssignedActivityEmail
+from .note import NoteActivityEmail
+from .regression import RegressionActivityEmail
+from .resolved import ResolvedActivityEmail
+from .resolved_in_release import ResolvedInReleaseActivityEmail
+from .unassigned import UnassignedActivityEmail
+
+emails = {
+    Activity.ASSIGNED: AssignedActivityEmail,
+    Activity.NOTE: NoteActivityEmail,
+    Activity.SET_REGRESSION: RegressionActivityEmail,
+    Activity.SET_RESOLVED: ResolvedActivityEmail,
+    Activity.SET_RESOLVED_IN_RELEASE: ResolvedInReleaseActivityEmail,
+    Activity.UNASSIGNED: UnassignedActivityEmail,
+}
diff --git a/src/sentry/plugins/sentry_mail/activity/assigned.py b/src/sentry/plugins/sentry_mail/activity/assigned.py
new file mode 100644
index 0000000000..a83dbeec11
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/assigned.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from sentry.models import User
+
+from .base import ActivityEmail
+
+
+class AssignedActivityEmail(ActivityEmail):
+    def get_activity_name(self):
+        return 'Assigned'
+
+    def get_description(self):
+        activity = self.activity
+        data = activity.data
+        if activity.user_id and str(activity.user_id) == data['assignee']:
+            return u'{author} assigned {an issue} to themselves'
+
+        try:
+            assignee = User.objects.get_from_cache(id=data['assignee'])
+        except User.DoesNotExist:
+            pass
+        else:
+            return u'{author} assigned {an issue} to {assignee}', {
+                'assignee': assignee.get_display_name(),
+            }
+
+        if data.get('assigneeEmail'):
+            return u'{author} assigned {an issue} to {assignee}', {
+                'assignee': data['assigneeEmail'],
+            }
+
+        return u'{author} assigned {an issue} to an unknown user'
diff --git a/src/sentry/plugins/sentry_mail/activity/base.py b/src/sentry/plugins/sentry_mail/activity/base.py
new file mode 100644
index 0000000000..b640bb4372
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/base.py
@@ -0,0 +1,253 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.utils.html import escape, mark_safe
+
+from sentry import options
+from sentry.models import GroupSubscription, ProjectOption, UserAvatar
+from sentry.utils.avatar import get_email_avatar
+from sentry.utils.email import MessageBuilder, group_id_to_email
+from sentry.utils.http import absolute_uri
+from sentry.utils.linksign import generate_signed_link
+
+
+class ActivityEmail(object):
+    def __init__(self, activity):
+        self.activity = activity
+        self.project = activity.project
+        self.organization = self.project.organization
+        self.group = activity.group
+
+    def _get_subject_prefix(self):
+        prefix = ProjectOption.objects.get_value(
+            project=self.project,
+            key='subject_prefix',
+        )
+        if not prefix:
+            prefix = options.get('mail.subject-prefix')
+        return prefix
+
+    def should_email(self):
+        return True
+
+    def get_participants(self):
+        # TODO(dcramer): not used yet today except by Release's
+        if not self.group:
+            return []
+        return [
+            u for u in
+            GroupSubscription.objects.get_participants(
+                group=self.group,
+            )
+            if u != self.activity.user
+        ]
+
+    def get_template(self):
+        return 'sentry/emails/activity/generic.txt'
+
+    def get_html_template(self):
+        return 'sentry/emails/activity/generic.html'
+
+    def get_project_link(self):
+        return absolute_uri('/{}/{}/'.format(
+            self.organization.slug,
+            self.project.slug,
+        ))
+
+    def get_group_link(self):
+        return absolute_uri('/{}/{}/issues/{}/'.format(
+            self.organization.slug,
+            self.project.slug,
+            self.group.id,
+        ))
+
+    def get_base_context(self):
+        activity = self.activity
+
+        context = {
+            'data': activity.data,
+            'author': activity.user,
+            'project': self.project,
+            'project_link': self.get_project_link(),
+        }
+        if activity.group:
+            context.update(self.get_group_context())
+        return context
+
+    def get_group_context(self):
+        group_link = self.get_group_link()
+        activity_link = '{}activity/'.format(group_link)
+
+        return {
+            'group': self.group,
+            'link': group_link,
+            'activity_link': activity_link,
+        }
+
+    def get_email_type(self):
+        return 'notify.activity.{}'.format(
+            self.activity.get_type_display(),
+        )
+
+    def get_subject(self):
+        group = self.group
+
+        return '[%s] %s: %s' % (
+            self.project.get_full_name().encode('utf-8'),
+            group.get_level_display().upper().encode('utf-8'),
+            group.message_short.encode('utf-8')
+        )
+
+    def get_context(self):
+        description = self.get_description()
+        try:
+            description, params, html_params = description
+        except ValueError:
+            try:
+                description, params = description
+                html_params = params
+            except ValueError:
+                params, html_params = {}, {}
+
+        return {
+            'activity_name': self.get_activity_name(),
+            'text_description': self.description_as_text(
+                description, params),
+            'html_description': self.description_as_html(
+                description, html_params),
+        }
+
+    def get_headers(self):
+        project = self.project
+        group = self.group
+
+        headers = {
+            'X-Sentry-Team': project.team.slug,
+            'X-Sentry-Project': project.slug,
+        }
+
+        if group:
+            headers.update({
+                'X-Sentry-Logger': group.logger,
+                'X-Sentry-Logger-Level': group.get_level_display(),
+                'X-Sentry-Reply-To': group_id_to_email(group.id),
+            })
+
+        return headers
+
+    def get_description(self):
+        raise NotImplementedError
+
+    def avatar_as_html(self):
+        user = self.activity.user
+        if not user:
+            return '<span class="avatar sentry"></span>'
+        avatar_type = user.get_avatar_type()
+        if avatar_type == 'upload':
+            return '<img class="avatar" src="{}" />'.format(
+                escape(self._get_user_avatar_url(user))
+            )
+        elif avatar_type == 'letter_avatar':
+            return get_email_avatar(
+                user.get_display_name(), user.get_label(), 20, False)
+        else:
+            return get_email_avatar(
+                user.get_display_name(), user.get_label(), 20, True)
+
+    def _get_user_avatar_url(self, user, size=20):
+        try:
+            avatar = UserAvatar.objects.get(user=user)
+        except UserAvatar.DoesNotExist:
+            return ''
+
+        url = reverse('sentry-user-avatar-url', args=[avatar.ident])
+        if size:
+            url = '{}?s={}'.format(url, int(size))
+        return absolute_uri(url)
+
+    def description_as_text(self, description, params):
+        user = self.activity.user
+        if user:
+            name = user.name or user.email
+        else:
+            name = u'Sentry'
+
+        context = {
+            'author': name,
+            'an issue': u'an issue',
+        }
+        context.update(params)
+
+        return description.format(**context)
+
+    def description_as_html(self, description, params):
+        user = self.activity.user
+        if user:
+            name = user.get_display_name()
+        else:
+            name = 'Sentry'
+
+        fmt = u'<span class="avatar-container">{}</span> <strong>{}</strong>'
+
+        author = mark_safe(fmt.format(
+            self.avatar_as_html(),
+            escape(name),
+        ))
+
+        an_issue = u'<a href="{}">an issue</a>'.format(
+            escape(self.get_group_link()),
+        )
+
+        context = {
+            'author': author,
+            'an issue': an_issue,
+        }
+        context.update(params)
+
+        return mark_safe(description.format(**context))
+
+    def send(self):
+        if not self.should_email():
+            return
+
+        users = self.get_participants()
+        if not users:
+            return
+
+        activity = self.activity
+        project = self.project
+        group = self.group
+
+        context = self.get_base_context()
+        context.update(self.get_context())
+
+        subject_prefix = self._get_subject_prefix()
+
+        subject = u'{}{}'.format(
+            subject_prefix,
+            self.get_subject(),
+        )
+        template = self.get_template()
+        html_template = self.get_html_template()
+        email_type = self.get_email_type()
+        headers = self.get_headers()
+
+        for user in users:
+            context['unsubscribe_link'] = generate_signed_link(
+                user.id,
+                'sentry-account-email-unsubscribe-project',
+                kwargs={'project_id': project.id},
+            )
+
+            msg = MessageBuilder(
+                subject=subject,
+                template=template,
+                html_template=html_template,
+                headers=headers,
+                type=email_type,
+                context=context,
+                reference=activity,
+                reply_reference=group,
+            )
+            msg.add_users([user.id], project=project)
+            msg.send_async()
diff --git a/src/sentry/plugins/sentry_mail/activity/note.py b/src/sentry/plugins/sentry_mail/activity/note.py
new file mode 100644
index 0000000000..2986e112d9
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/note.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from .base import ActivityEmail
+
+
+class NoteActivityEmail(ActivityEmail):
+    def get_context(self):
+        return {}
+
+    def get_template(self):
+        return 'sentry/emails/activity/note.txt'
+
+    def get_html_template(self):
+        return 'sentry/emails/activity/note.html'
diff --git a/src/sentry/plugins/sentry_mail/activity/regression.py b/src/sentry/plugins/sentry_mail/activity/regression.py
new file mode 100644
index 0000000000..0f87ffe097
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/regression.py
@@ -0,0 +1,30 @@
+from __future__ import absolute_import
+
+from django.utils.html import escape
+
+from sentry.utils.http import absolute_uri
+
+from .base import ActivityEmail
+
+
+class RegressionActivityEmail(ActivityEmail):
+    def get_activity_name(self):
+        return 'Regression'
+
+    def get_description(self):
+        data = self.activity.data
+        if data.get('version'):
+            return u'{author} marked {an issue} as a regression in {version}', {
+                'version': data['version']
+            }, {
+                'version': u'<a href="{}">{}</a>'.format(
+                    absolute_uri('/{}/{}/releases/{}/'.format(
+                        self.organization.slug,
+                        self.project.slug,
+                        data['version'],
+                    )),
+                    escape(data['version']),
+                )
+            }
+
+        return u'{author} marked {an issue} as a regression'
diff --git a/src/sentry/plugins/sentry_mail/activity/resolved.py b/src/sentry/plugins/sentry_mail/activity/resolved.py
new file mode 100644
index 0000000000..185d3c1397
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/resolved.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from .base import ActivityEmail
+
+
+class ResolvedActivityEmail(ActivityEmail):
+    def get_activity_name(self):
+        return 'Resolved Issue'
+
+    def get_description(self):
+        return u'{author} marked {an issue} as resolved'
diff --git a/src/sentry/plugins/sentry_mail/activity/resolved_in_release.py b/src/sentry/plugins/sentry_mail/activity/resolved_in_release.py
new file mode 100644
index 0000000000..1d532ed924
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/resolved_in_release.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+from django.utils.html import escape
+
+from sentry.utils.http import absolute_uri
+
+from .base import ActivityEmail
+
+
+class ResolvedInReleaseActivityEmail(ActivityEmail):
+    def get_activity_name(self):
+        return 'Resolved Issue'
+
+    def get_description(self):
+        data = self.activity.data
+        if data.get('version'):
+            return u'{author} marked {an issue} as resolved in {version}', {
+                'version': data['version'],
+            }, {
+                'version': u'<a href="{}">{}</a>'.format(
+                    absolute_uri('/{}/{}/releases/{}/'.format(
+                        self.organization.slug,
+                        self.project.slug,
+                        data['version'],
+                    )),
+                    escape(data['version']),
+                )
+            }
+        return u'{author} marked {an issue} as resolved in an upcoming release'
diff --git a/src/sentry/plugins/sentry_mail/activity/unassigned.py b/src/sentry/plugins/sentry_mail/activity/unassigned.py
new file mode 100644
index 0000000000..94b20488f6
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/unassigned.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from .base import ActivityEmail
+
+
+class UnassignedActivityEmail(ActivityEmail):
+    def get_activity_name(self):
+        return 'Unassigned'
+
+    def get_description(self):
+        return u'{author} unassigned {an issue}'
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 5938c8131b..2473e89280 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -19,11 +19,6 @@ from django.utils.safestring import mark_safe
 
 from sentry import options
 from sentry.digests.utilities import get_digest_metadata
-from sentry.models import (
-    Activity,
-    Release,
-    UserOption,
-)
 from sentry.plugins import register
 from sentry.plugins.base.structs import Notification
 from sentry.plugins.bases.notify import NotificationPlugin
@@ -32,8 +27,9 @@ from sentry.utils.email import MessageBuilder, group_id_to_email
 from sentry.utils.http import absolute_uri
 from sentry.utils.linksign import generate_signed_link
 
-NOTSET = object()
+from .activity import emails
 
+NOTSET = object()
 
 logger = logging.getLogger(__name__)
 
@@ -241,100 +237,15 @@ class MailPlugin(NotificationPlugin):
             )
 
     def notify_about_activity(self, activity):
-        if activity.type not in (Activity.NOTE, Activity.ASSIGNED, Activity.RELEASE):
-            return
-
-        candidate_ids = set(self.get_send_to(activity.project))
-
-        # Never send a notification to the user that performed the action.
-        candidate_ids.discard(activity.user_id)
-
-        if activity.type == Activity.ASSIGNED:
-            # Only notify the assignee, and only if they are in the candidate set.
-            recipient_ids = candidate_ids & set(map(int, (activity.data['assignee'],)))
-        elif activity.type == Activity.NOTE:
-            recipient_ids = candidate_ids - set(
-                UserOption.objects.filter(
-                    user__in=candidate_ids,
-                    key='subscribe_notes',
-                    value=u'0',
-                ).values_list('user', flat=True)
-            )
-        else:
-            recipient_ids = candidate_ids
-
-        if not recipient_ids:
-            return
-
-        project = activity.project
-        org = project.organization
-        group = activity.group
-
-        headers = {}
-
-        context = {
-            'data': activity.data,
-            'author': activity.user,
-            'project': project,
-            'project_link': absolute_uri(reverse('sentry-stream', kwargs={
-                'organization_slug': org.slug,
-                'project_id': project.slug,
-            })),
-        }
-
-        if group:
-            group_link = absolute_uri('/{}/{}/issues/{}/'.format(
-                org.slug, project.slug, group.id
+        email_cls = emails.get(activity.type)
+        if not email_cls:
+            logger.debug('No email associated with activity type `{}`'.format(
+                activity.get_type_display(),
             ))
-            activity_link = '{}activity/'.format(group_link)
-
-            headers.update({
-                'X-Sentry-Reply-To': group_id_to_email(group.id),
-            })
-
-            context.update({
-                'group': group,
-                'link': group_link,
-                'activity_link': activity_link,
-            })
-
-        # TODO(dcramer): abstract each activity email into its own helper class
-        if activity.type == Activity.RELEASE:
-            context.update({
-                'release': Release.objects.get(
-                    version=activity.data['version'],
-                    project=project,
-                ),
-                'release_link': absolute_uri('/{}/{}/releases/{}/'.format(
-                    org.slug,
-                    project.slug,
-                    activity.data['version'],
-                )),
-            })
-
-        template_name = activity.get_type_display()
-
-        if group:
-            subject = group.get_email_subject()
-        elif activity.type == Activity.RELEASE:
-            subject = 'Release %s' % activity.data['version']
-        else:
-            raise NotImplementedError
+            return
 
-        for user_id in recipient_ids:
-            self.add_unsubscribe_link(context, user_id, project)
-            self._send_mail(
-                project=project,
-                send_to=[user_id],
-                subject=subject,
-                type='notify.activity.{}'.format(template_name),
-                context=context,
-                template='sentry/emails/activity/{}.txt'.format(template_name),
-                html_template='sentry/emails/activity/{}.html'.format(template_name),
-                headers=headers,
-                reference=activity,
-                reply_reference=group,
-            )
+        email = email_cls(activity)
+        email.send()
 
 
 # Legacy compatibility
diff --git a/src/sentry/templates/sentry/debug/mail/preview.html b/src/sentry/templates/sentry/debug/mail/preview.html
index 4619b13b38..94154ad8fd 100644
--- a/src/sentry/templates/sentry/debug/mail/preview.html
+++ b/src/sentry/templates/sentry/debug/mail/preview.html
@@ -1 +1,63 @@
-{{ preview.html_body|safe }}
+<div style="padding: 20px; border-bottom: 1px solid #ddd; background: #fff; margin-bottom: 20px;">
+  <div style="width: 500; margin: 0 auto">
+    <label for="event" style="margin-right: 10px">Selection:</label>
+    <select id="event" style="width: 200px; margin-right: 20px;">
+      <option></option>
+      <optgroup label="Activity">
+        <option value="mail/assigned/">Assigned</option>
+        <option value="mail/assigned/self/">Assigned (Self)</option>
+        <option value="mail/note/">Note</option>
+        <option value="mail/regression/">Regression</option>
+        <option value="mail/regression/release/">Regression (w/ Release)</option>
+        <option value="mail/resolved/">Resolved</option>
+        <option value="mail/resolved-in-release/">Resolved In Release</option>
+        <option value="mail/resolved-in-release/upcoming/">Resolved In Release (Upcoming)</option>
+        <option value="mail/unassigned/">Unassigned</option>
+      </optgroup>
+      <optgroup label="Alerts">
+        <option value="mail/new-event/">New Event</option>
+      </optgroup>
+      <optgroup label="Account">
+        <option value="mail/confirm-email/">Confirm Email</option>
+        <option value="mail/recover-account/">Reset Password</option>
+      </optgroup>
+      <optgroup label="Membership">
+        <option value="mail/request-access/">Access Requested</option>
+        <option value="mail/access-approved/">Access Approved</option>
+        <option value="mail/invitation/">Membership Invite</option>
+      </optgroup>
+    </select>
+
+    <label for="format" style="margin-right: 10px">Format:</label>
+    <select id="format" style="width: 100px">
+      <option value="html">HTML</option>
+      <option value="txt" {% if format == 'txt' %} selected="selected"{% endif %}>Plaintext</option>
+    </select>
+  </div>
+</div>
+
+<script type="text/javascript">
+function selectEmail(e) {
+  var value = e.target.value;
+  window.location.href = '/debug/' + value;
+}
+
+function selectFormat(e) {
+  var value = e.target.value;
+  window.location.href = window.location.pathname + '?format=' + value;
+}
+
+var eventSelect = document.getElementById('event');
+eventSelect.addEventListener('change', selectEmail);
+
+var formatSelect = document.getElementById('format');
+formatSelect.addEventListener('change', selectFormat);
+</script>
+
+<div id="preview">
+  {% if format == 'txt' %}
+    <pre>{{ preview.text_body|safe }}</pre>
+  {% else %}
+    {{ preview.html_body|safe }}
+  {% endif %}
+</div>
diff --git a/src/sentry/templates/sentry/emails/activity/assigned.html b/src/sentry/templates/sentry/emails/activity/assigned.html
deleted file mode 100644
index 4768225c54..0000000000
--- a/src/sentry/templates/sentry/emails/activity/assigned.html
+++ /dev/null
@@ -1,33 +0,0 @@
-{% extends "sentry/emails/base.html" %}
-
-{% load sentry_helpers %}
-{% load sentry_assets %}
-
-{% block preheader %}
-  {{ author.get_display_name }} assigned you an issue in {{ group.organization.name }}/{{ group.project.name }}.
-{% endblock %}
-
-{% block header %}
-  <a href="{{ link }}" class="btn">View on Sentry</a>
-  {{ block.super }}
-{% endblock %}
-
-{% block main %}
-  <h2>Assigned</h2>
-
-  <p>
-    <strong>
-      <span class="avatar-container">
-        {% if author.get_avatar_type == 'upload' %}
-          <img class="avatar" src="{% profile_photo_url author.id size 20 %}">
-        {% elif author.get_avatar_type == 'letter_avatar' %}
-          {% email_avatar author.get_display_name author.get_label size 20 try_gravatar False %}
-        {% else %}
-          {% email_avatar author.get_display_name author.get_label size 20 %}
-        {% endif %}
-      </span>
-      {{ author.get_display_name }}</strong> assigned this issue to you in <strong>{{ group.organization.name }}/{{ group.project.name }}</strong>.
-  </p>
-
-  {% include "sentry/emails/group_header.html" %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/activity/generic.html b/src/sentry/templates/sentry/emails/activity/generic.html
new file mode 100644
index 0000000000..eb0b92bb3f
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/activity/generic.html
@@ -0,0 +1,17 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load sentry_helpers %}
+{% load sentry_assets %}
+
+{% block header %}
+  <a href="{{ link }}" class="btn">View on Sentry</a>
+  {{ block.super }}
+{% endblock %}
+
+{% block main %}
+  <h2>{{ activity_name }}</h2>
+
+  <p>{{ html_description }}</p>
+
+  {% include "sentry/emails/group_header.html" %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/activity/assigned.txt b/src/sentry/templates/sentry/emails/activity/generic.txt
similarity index 67%
rename from src/sentry/templates/sentry/emails/activity/assigned.txt
rename to src/sentry/templates/sentry/emails/activity/generic.txt
index 13d3472a69..84a73db7b5 100644
--- a/src/sentry/templates/sentry/emails/activity/assigned.txt
+++ b/src/sentry/templates/sentry/emails/activity/generic.txt
@@ -1,10 +1,11 @@
 {% spaceless %}
 {% autoescape off %}
-{{ author.get_display_name }} assigned this event to you.
+# {{ activity_name }}
 
+{{ text_description }}
 
-Details
--------
+
+## Issue Details
 
 {{ group.message_short }}
 
diff --git a/src/sentry/templates/sentry/emails/activity/note.html b/src/sentry/templates/sentry/emails/activity/note.html
index 1b045449e7..fd015743c5 100644
--- a/src/sentry/templates/sentry/emails/activity/note.html
+++ b/src/sentry/templates/sentry/emails/activity/note.html
@@ -3,10 +3,6 @@
 {% load sentry_helpers %}
 {% load sentry_assets %}
 
-{% block preheader %}
-  New comment by {{ author.get_display_name }} in {{ group.project.get_full_name }}.
-{% endblock %}
-
 {% block header %}
   <a href="{{ activity_link }}" class="btn">View on Sentry</a>
   {{ block.super }}
diff --git a/src/sentry/templates/sentry/emails/activity/note.txt b/src/sentry/templates/sentry/emails/activity/note.txt
index eb98a935c4..33e62c59a8 100644
--- a/src/sentry/templates/sentry/emails/activity/note.txt
+++ b/src/sentry/templates/sentry/emails/activity/note.txt
@@ -1,12 +1,13 @@
 {% spaceless %}
 {% autoescape off %}
-A new note was posted on an event in Sentry:
+# New Comment
+
+{{ author.get_display_name }} left a new comment:
 
 {{ data.text }}
 
 
-Details
--------
+## Details
 
 {{ group.message_short }}
 
diff --git a/src/sentry/templates/sentry/emails/group_header.html b/src/sentry/templates/sentry/emails/group_header.html
index 4ef02ea7f6..8538dca146 100644
--- a/src/sentry/templates/sentry/emails/group_header.html
+++ b/src/sentry/templates/sentry/emails/group_header.html
@@ -23,7 +23,7 @@
           {% if group.avg_time_spent %}
             <span class="time-spent">{{ group.avg_time_spent|duration }}</span>
           {% endif %}
-          in <a href="{% absolute_uri project_link %}"><strong>{{ group.project.get_full_name }}</strong></a>
+          in <a href="{% absolute_uri project_link %}"><strong>{{ group.project.organization.slug }}/{{ group.project.slug }}</strong></a>
         </p>
       </td>
       <td class="group-level">
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index fff1ae2423..dd88a7b10c 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -186,15 +186,15 @@ class NotificationSettingsForm(forms.Form):
     subscribe_by_default = forms.ChoiceField(
         label=_('Alerts'),
         choices=(
-            ('1', _('Automatically subscribe to notifications for new projects')),
-            ('0', _('Do not subscribe to notifications for new projects')),
+            ('1', _('Automatically subscribe to alerts for new projects')),
+            ('0', _('Do not subscribe to alerts for new projects')),
         ), required=False,
         widget=forms.Select(attrs={'class': 'input-xxlarge'}))
-    subscribe_notes = forms.ChoiceField(
-        label=_('Notes'),
+    workflow_notifications = forms.ChoiceField(
+        label=_('Workflow Notifications'),
         choices=(
-            ('1', _('Get notified about new notes')),
-            ('0', _('Do not subscribe to note notifications')),
+            ('0', _('Get notified about changes for all issues')),
+            ('1', _('Only notify me when I\'m participating on an issue')),
         ), required=False,
         widget=forms.Select(attrs={'class': 'input-xxlarge'}))
 
@@ -213,11 +213,11 @@ class NotificationSettingsForm(forms.Form):
             key='subscribe_by_default',
             default='1',
         )
-        self.fields['subscribe_notes'].initial = UserOption.objects.get_value(
+        self.fields['workflow_notifications'].initial = UserOption.objects.get_value(
             user=self.user,
             project=None,
-            key='subscribe_notes',
-            default='1',
+            key='workflow:notifications',
+            default='0',
         )
 
     def get_title(self):
@@ -239,8 +239,8 @@ class NotificationSettingsForm(forms.Form):
         UserOption.objects.set_value(
             user=self.user,
             project=None,
-            key='subscribe_notes',
-            value=self.cleaned_data['subscribe_notes'],
+            key='workflow_notifications',
+            value=self.cleaned_data['workflow_notifications'],
         )
 
 
diff --git a/src/sentry/web/frontend/debug/debug_assigned_email.py b/src/sentry/web/frontend/debug/debug_assigned_email.py
new file mode 100644
index 0000000000..d7c1443db1
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_assigned_email.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+from sentry.models import Activity
+
+from .mail import ActivityMailDebugView
+
+
+class DebugAssignedEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {
+            'type': Activity.ASSIGNED,
+            'user': request.user,
+            'data': {
+                'assignee': '10000000',
+                'assigneeEmail': 'foo@example.com',
+            }
+        }
+
+
+class DebugSelfAssignedEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {
+            'type': Activity.ASSIGNED,
+            'user': request.user,
+            'data': {
+                'assignee': str(request.user.id),
+                'assigneeEmail': request.user.email,
+            }
+        }
diff --git a/src/sentry/web/frontend/debug/debug_note_email.py b/src/sentry/web/frontend/debug/debug_note_email.py
new file mode 100644
index 0000000000..807ca94724
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_note_email.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry.models import Activity
+
+from .mail import ActivityMailDebugView
+
+
+class DebugNoteEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {
+            'type': Activity.NOTE,
+            'user': request.user,
+            'data': {
+                'text': 'This is an example note!',
+            },
+        }
diff --git a/src/sentry/web/frontend/debug/debug_regression_email.py b/src/sentry/web/frontend/debug/debug_regression_email.py
new file mode 100644
index 0000000000..3de202ac23
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_regression_email.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from sentry.models import Activity
+
+from .mail import ActivityMailDebugView
+
+
+class DebugRegressionEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {'type': Activity.SET_REGRESSION}
+
+
+class DebugRegressionReleaseEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {
+            'type': Activity.SET_REGRESSION,
+            'data': {
+                'version': 'abcdef',
+            }
+        }
diff --git a/src/sentry/web/frontend/debug/debug_resolved_email.py b/src/sentry/web/frontend/debug/debug_resolved_email.py
new file mode 100644
index 0000000000..c2fd378893
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_resolved_email.py
@@ -0,0 +1,10 @@
+from __future__ import absolute_import
+
+from sentry.models import Activity
+
+from .mail import ActivityMailDebugView
+
+
+class DebugResolvedEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {'type': Activity.SET_RESOLVED}
diff --git a/src/sentry/web/frontend/debug/debug_resolved_in_release_email.py b/src/sentry/web/frontend/debug/debug_resolved_in_release_email.py
new file mode 100644
index 0000000000..39cb3a8e31
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_resolved_in_release_email.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import
+
+from sentry.models import Activity
+
+from .mail import ActivityMailDebugView
+
+
+class DebugResolvedInReleaseEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {
+            'type': Activity.SET_RESOLVED_IN_RELEASE,
+            'data': {
+                'version': 'abcdef',
+            },
+        }
+
+
+class DebugResolvedInReleaseUpcomingEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {
+            'type': Activity.SET_RESOLVED_IN_RELEASE,
+            'data': {
+                'version': '',
+            },
+        }
diff --git a/src/sentry/web/frontend/debug/debug_unassigned_email.py b/src/sentry/web/frontend/debug/debug_unassigned_email.py
new file mode 100644
index 0000000000..b2ecfcdd82
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_unassigned_email.py
@@ -0,0 +1,13 @@
+from __future__ import absolute_import
+
+from sentry.models import Activity
+
+from .mail import ActivityMailDebugView
+
+
+class DebugUnassignedEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {
+            'type': Activity.UNASSIGNED,
+            'user': request.user,
+        }
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 199f2cd65a..451fe6ecde 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -19,6 +19,7 @@ from django.contrib.webdesign.lorem_ipsum import (
 )
 from django.core.urlresolvers import reverse
 from django.utils.safestring import mark_safe
+from django.views.generic import View
 
 from sentry.constants import LOG_LEVELS
 from sentry.digests import Record
@@ -38,6 +39,7 @@ from sentry.models import (
     Rule,
     Team,
 )
+from sentry.plugins.sentry_mail.activity import emails
 from sentry.utils.dates import to_timestamp
 from sentry.utils.samples import load_data
 from sentry.utils.email import inline_css
@@ -72,6 +74,74 @@ class MailPreview(object):
         })
 
 
+class ActivityMailPreview(object):
+    def __init__(self, activity):
+        self.email = emails.get(activity.type)(activity)
+
+    def get_context(self):
+        context = self.email.get_base_context()
+        context.update(self.email.get_context())
+        return context
+
+    def text_body(self):
+        return render_to_string(self.email.get_template(), self.get_context())
+
+    def html_body(self):
+        try:
+            return inline_css(render_to_string(
+                self.email.get_html_template(), self.get_context()))
+        except Exception:
+            import traceback
+            traceback.print_exc()
+            raise
+
+
+class ActivityMailDebugView(View):
+    def get(self, request):
+        org = Organization(
+            id=1,
+            slug='organization',
+            name='My Company',
+        )
+        team = Team(
+            id=1,
+            slug='team',
+            name='My Team',
+            organization=org,
+        )
+        project = Project(
+            id=1,
+            organization=org,
+            team=team,
+            slug='project',
+            name='My Project',
+        )
+
+        group = Group(
+            id=1,
+            project=project,
+            message='This is an example event.',
+        )
+
+        event = Event(
+            id=1,
+            project=project,
+            group=group,
+            message=group.message,
+            data=load_data('python'),
+        )
+
+        activity = Activity(
+            group=event.group, project=event.project,
+            **self.get_activity(request, event)
+        )
+
+        return render_to_response('sentry/debug/mail/preview.html', {
+            'preview': ActivityMailPreview(activity),
+            'format': request.GET.get('format'),
+        })
+
+
 @login_required
 def new_event(request):
     platform = request.GET.get('platform', 'python')
@@ -138,110 +208,6 @@ def new_event(request):
     ).render()
 
 
-@login_required
-def new_note(request):
-
-    org = Organization(
-        id=1,
-        slug='example',
-        name='Example',
-    )
-    team = Team(
-        id=1,
-        slug='example',
-        name='Example',
-        organization=org,
-    )
-    project = Project(
-        id=1,
-        slug='example',
-        name='Example',
-        team=team,
-        organization=org,
-    )
-    group = Group(
-        id=1,
-        project=project,
-        message='This is an example event.',
-    )
-    event = Event(
-        id=1,
-        project=project,
-        group=group,
-        message=group.message,
-        data=load_data('python'),
-    )
-    note = Activity(
-        group=event.group, project=event.project,
-        type=Activity.NOTE, user=request.user,
-        data={'text': 'This is an example note!'},
-    )
-
-    return MailPreview(
-        html_template='sentry/emails/activity/note.html',
-        text_template='sentry/emails/activity/note.txt',
-        context={
-            'data': note.data,
-            'author': note.user,
-            'date': note.datetime,
-            'group': group,
-            'link': group.get_absolute_url(),
-        },
-    ).render()
-
-
-@login_required
-def assigned(request):
-
-    org = Organization(
-        id=1,
-        slug='example',
-        name='Example',
-    )
-    team = Team(
-        id=1,
-        slug='example',
-        name='Example',
-        organization=org,
-    )
-    project = Project(
-        id=1,
-        slug='example',
-        name='Example',
-        team=team,
-        organization=org,
-    )
-    group = Group(
-        id=1,
-        project=project,
-        message='This is an example event.',
-    )
-    event = Event(
-        id=1,
-        project=project,
-        group=group,
-        message=group.message,
-        data=load_data('python'),
-    )
-    assigned = Activity(
-        group=event.group, project=event.project,
-        type=Activity.ASSIGNED, user=request.user,
-        data={'text': 'This is an example note!', 'assignee': 'foo@example.com'},
-    )
-
-    return MailPreview(
-        html_template='sentry/emails/activity/assigned.html',
-        text_template='sentry/emails/activity/assigned.txt',
-        context={
-            'data': assigned.data,
-            'author': assigned.user,
-            'date': assigned.datetime,
-            'group': group,
-            'link': group.get_absolute_url(),
-        },
-    ).render()
-
-
 @login_required
 def digest(request):
     seed = request.GET.get('seed', str(time.time()))
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 33ef1301a6..91fa8991a1 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -103,23 +103,57 @@ urlpatterns = patterns('')
 if getattr(settings, 'DEBUG_VIEWS', settings.DEBUG):
     from django.views.generic import TemplateView
     import sentry.web.frontend.debug.mail
-    from sentry.web.frontend.debug.debug_trigger_error import DebugTriggerErrorView
-    from sentry.web.frontend.debug.debug_error_embed import DebugErrorPageEmbedView
-    from sentry.web.frontend.debug.debug_new_release_email import DebugNewReleaseEmailView
+    from sentry.web.frontend.debug.debug_assigned_email import (
+        DebugAssignedEmailView, DebugSelfAssignedEmailView
+    )
+    from sentry.web.frontend.debug.debug_trigger_error import (
+        DebugTriggerErrorView
+    )
+    from sentry.web.frontend.debug.debug_error_embed import (
+        DebugErrorPageEmbedView
+    )
+    from sentry.web.frontend.debug.debug_new_release_email import (
+        DebugNewReleaseEmailView
+    )
+    from sentry.web.frontend.debug.debug_note_email import DebugNoteEmailView
+    from sentry.web.frontend.debug.debug_regression_email import (
+        DebugRegressionEmailView, DebugRegressionReleaseEmailView
+    )
+    from sentry.web.frontend.debug.debug_resolved_email import (
+        DebugResolvedEmailView
+    )
+    from sentry.web.frontend.debug.debug_resolved_in_release_email import (
+        DebugResolvedInReleaseEmailView, DebugResolvedInReleaseUpcomingEmailView
+    )
+    from sentry.web.frontend.debug.debug_unassigned_email import (
+        DebugUnassignedEmailView
+    )
     from sentry.web.frontend.debug import debug_auth_views
 
     urlpatterns += patterns(
         '',
         url(r'^debug/mail/new-event/$',
             sentry.web.frontend.debug.mail.new_event),
-        url(r'^debug/mail/new-note/$',
-            sentry.web.frontend.debug.mail.new_note),
+        url(r'^debug/mail/note/$',
+            DebugNoteEmailView.as_view()),
         url(r'^debug/mail/new-release/$',
             DebugNewReleaseEmailView.as_view()),
         url(r'^debug/mail/assigned/$',
-            sentry.web.frontend.debug.mail.assigned),
+            DebugAssignedEmailView.as_view()),
+        url(r'^debug/mail/assigned/self/$',
+            DebugSelfAssignedEmailView.as_view()),
         url(r'^debug/mail/digest/$',
             sentry.web.frontend.debug.mail.digest),
+        url(r'^debug/mail/regression/$',
+            DebugRegressionEmailView.as_view()),
+        url(r'^debug/mail/regression/release/$',
+            DebugRegressionReleaseEmailView.as_view()),
+        url(r'^debug/mail/resolved/$',
+            DebugResolvedEmailView.as_view()),
+        url(r'^debug/mail/resolved-in-release/$',
+            DebugResolvedInReleaseEmailView.as_view()),
+        url(r'^debug/mail/resolved-in-release/upcoming/$',
+            DebugResolvedInReleaseUpcomingEmailView.as_view()),
         url(r'^debug/mail/request-access/$',
             sentry.web.frontend.debug.mail.request_access),
         url(r'^debug/mail/access-approved/$',
@@ -130,6 +164,8 @@ if getattr(settings, 'DEBUG_VIEWS', settings.DEBUG):
             sentry.web.frontend.debug.mail.confirm_email),
         url(r'^debug/mail/recover-account/$',
             sentry.web.frontend.debug.mail.recover_account),
+        url(r'^debug/mail/unassigned/$',
+            DebugUnassignedEmailView.as_view()),
         url(r'^debug/embed/error-page/$',
             DebugErrorPageEmbedView.as_view()),
         url(r'^debug/trigger-error/$',
diff --git a/tests/acceptance/test_activity_emails.py b/tests/acceptance/test_activity_emails.py
new file mode 100644
index 0000000000..43ce7718ef
--- /dev/null
+++ b/tests/acceptance/test_activity_emails.py
@@ -0,0 +1,100 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class ActivityEmailsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ActivityEmailsTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.login_as(self.user)
+
+    def test_assigned_html(self):
+        self.browser.get('/debug/mail/assigned/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('assigned email html')
+
+    def test_assigned_txt(self):
+        self.browser.get('/debug/mail/assigned/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('assigned email txt')
+
+    def test_assigned_self_html(self):
+        self.browser.get('/debug/mail/assigned/self/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('assigned_self email html')
+
+    def test_assigned_self_txt(self):
+        self.browser.get('/debug/mail/assigned/self/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('assigned_self email txt')
+
+    def test_note_html(self):
+        self.browser.get('/debug/mail/note/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('note email html')
+
+    def test_note_txt(self):
+        self.browser.get('/debug/mail/note/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('note email txt')
+
+    def test_regression_html(self):
+        self.browser.get('/debug/mail/regression/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('regression email html')
+
+    def test_regression_txt(self):
+        self.browser.get('/debug/mail/regression/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('regression email txt')
+
+    def test_regression_with_version_html(self):
+        self.browser.get('/debug/mail/regression/release/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('regression_with_version email html')
+
+    def test_regression_with_version_txt(self):
+        self.browser.get('/debug/mail/regression/release/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('regression_with_version email txt')
+
+    def test_resolved_html(self):
+        self.browser.get('/debug/mail/resolved/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('resolved email html')
+
+    def test_resolved_txt(self):
+        self.browser.get('/debug/mail/resolved/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('resolved email txt')
+
+    def test_resolved_in_release_html(self):
+        self.browser.get('/debug/mail/resolved-in-release/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('resolved_in_release email html')
+
+    def test_resolved_in_release_txt(self):
+        self.browser.get('/debug/mail/resolved-in-release/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('resolved_in_release email txt')
+
+    def test_resolved_in_release_upcoming_html(self):
+        self.browser.get('/debug/mail/resolved-in-release/upcoming/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('resolved_in_release_upcoming email html')
+
+    def test_resolved_in_release_upcoming_txt(self):
+        self.browser.get('/debug/mail/resolved-in-release/upcoming/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('resolved_in_release_upcoming email txt')
+
+    def test_unassigned_html(self):
+        self.browser.get('/debug/mail/unassigned/?format=html')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('unassigned email html')
+
+    def test_unassigned_txt(self):
+        self.browser.get('/debug/mail/unassigned/?format=txt')
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('unassigned email txt')
