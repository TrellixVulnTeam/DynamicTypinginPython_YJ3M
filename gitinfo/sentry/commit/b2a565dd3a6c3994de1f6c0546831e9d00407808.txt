commit b2a565dd3a6c3994de1f6c0546831e9d00407808
Author: Matte Noble <me@mattenoble.com>
Date:   Mon Aug 27 10:23:51 2018 -0700

    feat(integrations): VSTS Marketplace Extension (#9289)
    
    This adds the underlying pieces necessary for our VSTS Markertplace
    Extension.
    
    It has a slightly different setup process than the "normal" VSTS
    integration. Instead of choosing the VSTS Account, you choose the Sentry
    Organization. Other than that, it's the same process as installing the
    "normal" integration.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 2416ab29d6..2a3826558e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1261,6 +1261,7 @@ SENTRY_DEFAULT_INTEGRATIONS = (
     'sentry.integrations.github_enterprise.GitHubEnterpriseIntegrationProvider',
     'sentry.integrations.jira.JiraIntegrationProvider',
     'sentry.integrations.vsts.VstsIntegrationProvider',
+    'sentry.integrations.vsts_extension.VstsExtensionIntegrationProvider',
 )
 
 SENTRY_INTERNAL_INTEGRATIONS = (
@@ -1269,6 +1270,7 @@ SENTRY_INTERNAL_INTEGRATIONS = (
     'github_enterprise',
     'jira',
     'vsts',
+    'vsts-extension',
 )
 
 
diff --git a/src/sentry/identity/__init__.py b/src/sentry/identity/__init__.py
index 52b49dadba..d488f83fc4 100644
--- a/src/sentry/identity/__init__.py
+++ b/src/sentry/identity/__init__.py
@@ -8,6 +8,7 @@ from .slack import *  # NOQA
 from .github import *  # NOQA
 from .github_enterprise import *  # NOQA
 from .vsts import *  # NOQA
+from .vsts_extension import *  # NOQA
 from .bitbucket import *  # NOQA
 
 
@@ -24,4 +25,5 @@ register(SlackIdentityProvider)  # NOQA
 register(GitHubIdentityProvider)  # NOQA
 register(GitHubEnterpriseIdentityProvider)  # NOQA
 register(VSTSIdentityProvider)  # NOQA
+register(VstsExtensionIdentityProvider)  # NOQA
 register(BitbucketIdentityProvider)  # NOQA
diff --git a/src/sentry/identity/vsts_extension/__init__.py b/src/sentry/identity/vsts_extension/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/identity/vsts_extension/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/identity/vsts_extension/provider.py b/src/sentry/identity/vsts_extension/provider.py
new file mode 100644
index 0000000000..97a7219fb3
--- /dev/null
+++ b/src/sentry/identity/vsts_extension/provider.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.identity.vsts.provider import VSTSIdentityProvider
+
+
+class VstsExtensionIdentityProvider(VSTSIdentityProvider):
+    """
+    Functions exactly the same as ``VSTSIdentityProvider``.
+
+    This class is necessary because of how Integration Pipelines look up
+    sibling/dependent classes using ``key``.
+
+    The IntegrationProvider for the VSTS Extension is slightly different from
+    the VSTS version, so it requires a new class. Hence, the Identity portion
+    also requires a new class; this one.
+    """
+
+    key = 'vsts-extension'
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 289d618dbb..ea8083c5e5 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -51,9 +51,16 @@ class IntegrationProvider(PipelineProvider):
     it provides (such as extensions provided).
     """
 
-    # a unique identifier (e.g. 'slack')
+    # a unique identifier (e.g. 'slack').
+    # Used to lookup sibling classes and the ``key`` used when creating
+    # Integration objects.
     key = None
 
+    # a unique identifier to use when creating the ``Integration`` object.
+    # Only needed when you want to create the above object with something other
+    # than ``key``. See: VstsExtensionIntegrationProvider.
+    _integration_key = None
+
     # a human readable name (e.g. 'Slack')
     name = None
 
@@ -90,6 +97,10 @@ class IntegrationProvider(PipelineProvider):
 
         return cls.integration_cls(model, organization_id, **kwargs)
 
+    @property
+    def integration_key(self):
+        return self._integration_key or self.key
+
     def get_logger(self):
         return logging.getLogger('sentry.integration.%s' % (self.key, ))
 
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 235ce82789..984a18381f 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -122,3 +122,13 @@ class ExampleIntegrationProvider(IntegrationProvider):
         >>> def setup(self):
         >>>     bindings.add('repository.provider', GitHubRepositoryProvider, key='github')
         """
+
+
+class AliasedIntegration(ExampleIntegration):
+    pass
+
+
+class AliasedIntegrationProvider(ExampleIntegrationProvider):
+    key = 'aliased'
+    integration_key = 'example'
+    name = 'Integration Key Example'
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index 0753220caa..245cc00f7c 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -64,7 +64,7 @@ class IntegrationPipeline(Pipeline):
     def _finish_pipeline(self, data):
         if 'reinstall_id' in data:
             self.integration = Integration.objects.get(
-                provider=self.provider.key,
+                provider=self.provider.integration_key,
                 id=data['reinstall_id'],
             )
             self.integration.update(external_id=data['external_id'], status=ObjectStatus.VISIBLE)
@@ -72,11 +72,14 @@ class IntegrationPipeline(Pipeline):
 
         elif 'expect_exists' in data:
             self.integration = Integration.objects.get(
-                provider=self.provider.key,
+                provider=self.provider.integration_key,
                 external_id=data['external_id'],
             )
         else:
-            self.integration = ensure_integration(self.provider.key, data)
+            self.integration = ensure_integration(
+                self.provider.integration_key,
+                data,
+            )
 
         # Does this integration provide a user identity for the user setting up
         # the integration?
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index 9b595ceca9..76b953f610 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -257,7 +257,7 @@ class VstsIntegrationProvider(IntegrationProvider):
 
         identity_pipeline_view = NestedPipelineView(
             bind_key='identity',
-            provider_key='vsts',
+            provider_key=self.key,
             pipeline_cls=IdentityProviderPipeline,
             config=identity_pipeline_config,
         )
diff --git a/src/sentry/integrations/vsts_extension/__init__.py b/src/sentry/integrations/vsts_extension/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/vsts_extension/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/vsts_extension/integration.py b/src/sentry/integrations/vsts_extension/integration.py
new file mode 100644
index 0000000000..cf2a8b3c85
--- /dev/null
+++ b/src/sentry/integrations/vsts_extension/integration.py
@@ -0,0 +1,55 @@
+from __future__ import absolute_import
+
+from django.contrib import messages
+from django.http import HttpResponseRedirect
+
+from sentry.integrations.vsts.integration import (
+    VstsIntegrationProvider, AccountConfigView,
+)
+from sentry.pipeline import PipelineView
+from sentry.utils.http import absolute_uri
+
+
+class VstsExtensionIntegrationProvider(VstsIntegrationProvider):
+    key = 'vsts-extension'
+    integration_key = 'vsts'
+
+    def get_pipeline_views(self):
+        views = super(VstsExtensionIntegrationProvider, self).get_pipeline_views()
+        views = [view for view in views if not isinstance(view, AccountConfigView)]
+        views.append(VstsExtensionFinishedView())
+        return views
+
+    def build_integration(self, state):
+        # Normally this is saved into the ``identity`` state, but for some
+        # reason it gets wiped out in the NestedPipeline. Instead, we'll store
+        # it in it's own key (``vsts``) to be used down the line in
+        # ``VSTSOrganizationSelectionView``.
+        state['account'] = {
+            'AccountId': state['vsts']['AccountId'],
+            'AccountName': state['vsts']['AccountName'],
+        }
+
+        state['instance'] = '{}.visualstudio.com'.format(
+            state['vsts']['AccountName']
+        )
+
+        return super(
+            VstsExtensionIntegrationProvider,
+            self
+        ).build_integration(state)
+
+
+class VstsExtensionFinishedView(PipelineView):
+    def dispatch(self, request, pipeline):
+        pipeline.finish_pipeline()
+
+        messages.add_message(request, messages.SUCCESS, 'VSTS Extension installed.')
+
+        # TODO: replace with whatever we decide the finish step is.
+        return HttpResponseRedirect(
+            absolute_uri('/settings/{}/integrations/vsts-extension/{}/'.format(
+                pipeline.organization.slug,
+                pipeline.integration.id,
+            ))
+        )
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 602dfac674..80ef9d2a79 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -200,19 +200,22 @@ def register_extensions():
 
     from sentry import integrations
     from sentry.integrations.bitbucket import BitbucketIntegrationProvider
-    from sentry.integrations.example import ExampleIntegrationProvider
+    from sentry.integrations.example import ExampleIntegrationProvider, AliasedIntegrationProvider
     from sentry.integrations.github import GitHubIntegrationProvider
     from sentry.integrations.github_enterprise import GitHubEnterpriseIntegrationProvider
     from sentry.integrations.jira import JiraIntegrationProvider
     from sentry.integrations.slack import SlackIntegrationProvider
     from sentry.integrations.vsts import VstsIntegrationProvider
+    from sentry.integrations.vsts_extension import VstsExtensionIntegrationProvider
     integrations.register(BitbucketIntegrationProvider)
     integrations.register(ExampleIntegrationProvider)
+    integrations.register(AliasedIntegrationProvider)
     integrations.register(GitHubIntegrationProvider)
     integrations.register(GitHubEnterpriseIntegrationProvider)
     integrations.register(JiraIntegrationProvider)
     integrations.register(SlackIntegrationProvider)
     integrations.register(VstsIntegrationProvider)
+    integrations.register(VstsExtensionIntegrationProvider)
 
     from sentry.plugins import bindings
     from sentry.plugins.providers.dummy import DummyRepositoryProvider
diff --git a/tests/sentry/integrations/test_pipeline.py b/tests/sentry/integrations/test_pipeline.py
index 7c98228ef2..b28adc2ccb 100644
--- a/tests/sentry/integrations/test_pipeline.py
+++ b/tests/sentry/integrations/test_pipeline.py
@@ -1,25 +1,33 @@
 from __future__ import absolute_import
 
+from mock import patch
+
 from sentry.models import Identity, Integration, OrganizationIntegration
 from sentry.testutils import IntegrationTestCase
-from sentry.integrations.example import ExampleIntegrationProvider
+from sentry.integrations.example import (
+    ExampleIntegrationProvider,
+    AliasedIntegrationProvider,
+)
+
+
+def naive_build_integration(data):
+    return data
 
 
+@patch('sentry.integrations.example.ExampleIntegrationProvider.build_integration',
+       side_effect=naive_build_integration)
 class FinishPipelineTestCase(IntegrationTestCase):
     provider = ExampleIntegrationProvider
 
     def setUp(self):
         super(FinishPipelineTestCase, self).setUp()
-        self.original_build_integration = self.provider.build_integration
-        self.provider.build_integration = lambda self, data: data
         self.external_id = 'dummy_id-123'
         self.provider.needs_default_identity = False
 
     def tearDown(self):
-        self.provider.build_integration = self.original_build_integration
-        self.provider.needs_default_identity = False
+        super(FinishPipelineTestCase, self).tearDown()
 
-    def test_with_data(self):
+    def test_with_data(self, *args):
         data = {
             'external_id': self.external_id,
             'name': 'Name',
@@ -41,7 +49,27 @@ class FinishPipelineTestCase(IntegrationTestCase):
             integration_id=integration.id,
         ).exists()
 
-    def test_with_expect_exists(self):
+    def test_aliased_integration_key(self, *args):
+        self.provider = AliasedIntegrationProvider
+        self.setUp()
+
+        data = {
+            'external_id': self.external_id,
+            'name': 'Name',
+            'metadata': {'url': 'https://example.com'},
+        }
+        self.pipeline.state.data = data
+        resp = self.pipeline.finish_pipeline()
+
+        self.assertDialogSuccess(resp)
+
+        # Creates the Integration using ``integration_key`` instead of ``key``
+        assert Integration.objects.filter(
+            provider=self.provider.integration_key,
+            external_id=self.external_id,
+        ).exists()
+
+    def test_with_expect_exists(self, *args):
         old_integration = Integration.objects.create(
             provider=self.provider.key,
             external_id=self.external_id,
@@ -64,7 +92,7 @@ class FinishPipelineTestCase(IntegrationTestCase):
             integration_id=integration.id,
         ).exists()
 
-    def test_expect_exists_does_not_update(self):
+    def test_expect_exists_does_not_update(self, *args):
         old_integration = Integration.objects.create(
             provider=self.provider.key,
             external_id=self.external_id,
@@ -91,7 +119,7 @@ class FinishPipelineTestCase(IntegrationTestCase):
             integration_id=integration.id,
         ).exists()
 
-    def test_with_default_id(self):
+    def test_with_default_id(self, *args):
         self.provider.needs_default_identity = True
         data = {
             'external_id': self.external_id,
@@ -125,7 +153,7 @@ class FinishPipelineTestCase(IntegrationTestCase):
         assert org_integration.default_auth_id is not None
         assert Identity.objects.filter(id=org_integration.default_auth_id).exists()
 
-    def test_default_identity_does_not_update(self):
+    def test_default_identity_does_not_update(self, *args):
         self.provider.needs_default_identity = True
         old_identity_id = 234567
         integration = Integration.objects.create(
diff --git a/tests/sentry/integrations/vsts_extension/test_provider.py b/tests/sentry/integrations/vsts_extension/test_provider.py
new file mode 100644
index 0000000000..61ee6acbb9
--- /dev/null
+++ b/tests/sentry/integrations/vsts_extension/test_provider.py
@@ -0,0 +1,47 @@
+from __future__ import absolute_import
+
+from mock import patch
+
+from sentry.integrations.vsts import VstsIntegrationProvider
+from sentry.integrations.vsts_extension import (
+    VstsExtensionIntegrationProvider,
+    VstsExtensionFinishedView,
+)
+from sentry.testutils import TestCase
+
+
+class VstsExtensionIntegrationProviderTest(TestCase):
+    def setUp(self):
+        self.provider = VstsExtensionIntegrationProvider()
+
+    def test_get_pipeline_views(self):
+        # Should be same as the VSTS integration, but with a different last
+        # step.
+        views = self.provider.get_pipeline_views()
+        vsts_views = VstsIntegrationProvider().get_pipeline_views()
+
+        assert isinstance(views[0], type(vsts_views[0]))
+        assert isinstance(views[-1], VstsExtensionFinishedView)
+
+    @patch('sentry.integrations.vsts.integration.get_user_info')
+    @patch('sentry.integrations.vsts.integration.VstsIntegrationProvider.create_subscription')
+    def test_build_integration(self, create_sub, get_user_info):
+        get_user_info.return_value = {'id': '987'}
+        create_sub.return_value = (1, 'sharedsecret')
+
+        integration = self.provider.build_integration({
+            'vsts': {
+                'AccountId': '123',
+                'AccountName': 'test',
+            },
+            'identity': {
+                'data': {
+                    'access_token': '123',
+                    'expires_in': '3600',
+                    'refresh_token': '321',
+                },
+            },
+        })
+
+        assert integration['external_id'] == '123'
+        assert integration['name'] == 'test'
