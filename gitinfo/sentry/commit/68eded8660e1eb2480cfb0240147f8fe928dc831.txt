commit 68eded8660e1eb2480cfb0240147f8fe928dc831
Author: David Cramer <dcramer@gmail.com>
Date:   Sun May 27 15:44:55 2012 -0700

    Refactor all tag-based plugins to a main class which handles all interface hooks

diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index 5baae7f162..9a1a5baa17 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -130,10 +130,11 @@ INSTALLED_APPS = (
     'kombu.transport.django',
     'raven.contrib.django',
     'sentry',
+    'sentry.plugins.sentry_mail',
     'sentry.plugins.sentry_servers',
-    'sentry.plugins.sentry_urls',
     'sentry.plugins.sentry_sites',
-    'sentry.plugins.sentry_mail',
+    'sentry.plugins.sentry_urls',
+    'sentry.plugins.sentry_useragents',
     'south',
 )
 
diff --git a/sentry/constants.py b/sentry/constants.py
index cb5fdbbc4b..a4ccc38267 100644
--- a/sentry/constants.py
+++ b/sentry/constants.py
@@ -12,22 +12,22 @@ SORT_OPTIONS = SortedDict((
     ('accel_60', _('Trending: %(minutes)d minutes' % {'minutes': 60})),
 ))
 SORT_CLAUSES = {
-    'priority': 'score',
-    'date': 'EXTRACT(EPOCH FROM last_seen)',
-    'new': 'EXTRACT(EPOCH FROM first_seen)',
-    'freq': 'times_seen',
-    'tottime': 'time_spent_total',
-    'avgtime': '(time_spent_total / time_spent_count)',
+    'priority': 'sentry_groupedmessage.score',
+    'date': 'EXTRACT(EPOCH FROM sentry_groupedmessage.last_seen)',
+    'new': 'EXTRACT(EPOCH FROM sentry_groupedmessage.first_seen)',
+    'freq': 'sentry_groupedmessage.times_seen',
+    'tottime': 'sentry_groupedmessage.time_spent_total',
+    'avgtime': '(sentry_groupedmessage.time_spent_total / sentry_groupedmessage.time_spent_count)',
 }
 SQLITE_SORT_CLAUSES = SORT_CLAUSES.copy()
 SQLITE_SORT_CLAUSES.update({
-    'date': 'last_seen',
-    'new': 'first_seen',
+    'date': 'sentry_groupedmessage.last_seen',
+    'new': 'sentry_groupedmessage.first_seen',
 })
 MYSQL_SORT_CLAUSES = SORT_CLAUSES.copy()
 MYSQL_SORT_CLAUSES.update({
-    'date': 'UNIX_TIMESTAMP(last_seen)',
-    'new': 'UNIX_TIMESTAMP(first_seen)',
+    'date': 'UNIX_TIMESTAMP(sentry_groupedmessage.last_seen)',
+    'new': 'UNIX_TIMESTAMP(sentry_groupedmessage.first_seen)',
 })
 SEARCH_SORT_OPTIONS = SortedDict((
     ('score', _('Score')),
diff --git a/sentry/filters/base.py b/sentry/filters/base.py
index 4f0183c6c2..f71ec14603 100644
--- a/sentry/filters/base.py
+++ b/sentry/filters/base.py
@@ -25,6 +25,7 @@ class Filter(object):
     default = ''
     show_label = True
     types = [Group, Event]
+    max_choices = 26
 
     def __init__(self, request, project):
         self.request = request
@@ -33,28 +34,36 @@ class Filter(object):
     def is_set(self):
         return bool(self.get_value())
 
+    def get_label(self):
+        return self.label
+
+    def get_column(self):
+        return self.column
+
     def get_value(self):
         return self.request.GET.get(self.get_query_param(), self.default) or ''
 
     def get_query_param(self):
-        return getattr(self, 'query_param', self.column)
+        return getattr(self, 'query_param', self.get_column())
 
     def get_widget(self):
         return self.widget(self, self.request)
 
     def get_query_string(self):
-        column = self.column
+        column = self.get_column()
         query_dict = self.request.GET.copy()
         if 'p' in query_dict:
             del query_dict['p']
         if column in query_dict:
-            del query_dict[self.column]
+            del query_dict[column]
         return '?' + query_dict.urlencode()
 
     def get_choices(self):
-        return SortedDict((l, l) for l in FilterValue.objects.filter(project=self.project, key=self.column)\
-                                                     .values_list('value', flat=True)\
-                                                     .order_by('value'))
+        return SortedDict((l, l)
+            for l in FilterValue.objects.filter(
+                project=self.project,
+                key=self.column,
+            ).values_list('value', flat=True).order_by('value')[:self.max_choices])
 
     def get_query_set(self, queryset):
         kwargs = {self.column: self.get_value()}
diff --git a/sentry/filters/widgets.py b/sentry/filters/widgets.py
index 97b1d2eb74..b15d71115d 100644
--- a/sentry/filters/widgets.py
+++ b/sentry/filters/widgets.py
@@ -31,11 +31,14 @@ class TextWidget(Widget):
         ))
 
 
-class ChoiceWidget(Widget):
+class ChoiceWidget(TextWidget):
     allow_any = True
 
     def render(self, value, **kwargs):
         choices = self.filter.get_choices()
+        if len(choices) == self.filter.max_choices:
+            return super(ChoiceWidget, self).render(value, **kwargs)
+
         query_string = self.get_query_string()
         column = self.filter.get_query_param()
 
diff --git a/sentry/manager.py b/sentry/manager.py
index 81efeab81e..344d088091 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -577,16 +577,8 @@ class GroupManager(BaseManager, ChartMixin):
             'date': normalized_datetime,
         })
 
-        http = event.interfaces.get('sentry.interfaces.Http')
-        if http:
-            url = http.url
-        else:
-            url = None
-
+        # TODO: should we move this into a TagPlugin?
         for key, value in (
-                ('server_name', event.server_name),
-                ('site', event.site),
-                ('url', url),
                 ('logger', event.logger),
             ):
             if not value:
diff --git a/sentry/plugins/bases/tag.py b/sentry/plugins/bases/tag.py
new file mode 100644
index 0000000000..2a35e406d9
--- /dev/null
+++ b/sentry/plugins/bases/tag.py
@@ -0,0 +1,112 @@
+"""
+sentry.plugins.bases.tag
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry import app
+from sentry.filters import Filter
+from sentry.models import Event, FilterValue, MessageFilterValue
+from sentry.plugins import Plugin
+from django.db.models import Sum
+
+
+def create_tag_filter(plugin):
+    class TagFilter(Filter):
+        label = plugin.tag_label
+        column = plugin.tag
+
+        def get_query_set(self, queryset):
+            col, val = self.get_column(), self.get_value()
+            if queryset.model == Event:
+                queryset = queryset.filter(**dict(
+                    group__messagefiltervalue__key=col,
+                    group__messagefiltervalue__value=val,
+                ))
+            else:
+                queryset = queryset.filter(**dict(
+                    messagefiltervalue__key=col,
+                    messagefiltervalue__value=val,
+                ))
+            return queryset.distinct()
+
+    TagFilter.__name__ = plugin.tag.title() + 'TagFilter'
+
+    return TagFilter
+
+
+class TagPlugin(Plugin):
+    tag = None
+    tag_label = None
+    index_template = 'sentry/plugins/bases/tag/index.html'
+    widget_template = 'sentry/plugins/bases/tag/widget.html'
+
+    def get_tag_values(self, event):
+        """
+        Must return a list of values.
+
+        >>> get_tag_pairs(event)
+        [tag1, tag2, tag3]
+        """
+        raise NotImplementedError
+
+    def get_unique_tags(self, group):
+        return group.messagefiltervalue_set.filter(
+            key=self.tag,
+        ).values_list(
+            'value',
+        ).annotate(
+            times_seen=Sum('times_seen'),
+        ).values_list(
+            'value',
+            'times_seen',
+            'first_seen',
+            'last_seen',
+        ).order_by('-times_seen')
+
+    def panels(self, request, group, panel_list, **kwargs):
+        panel_list.append((self.get_title(), self.get_url(group)))
+        return panel_list
+
+    def view(self, request, group, **kwargs):
+        return self.render(self.index_template, {
+            'title': self.get_title(),
+            'tag_label': self.tag_label,
+            'tag_name': self.tag,
+            'unique_tags': self.get_unique_tags(group),
+            'group': group,
+        })
+
+    def widget(self, request, group, **kwargs):
+        return self.render(self.widget_template, {
+            'title': self.get_title(),
+            'tag_label': self.tag_label,
+            'tag_name': self.tag,
+            'unique_tags': list(self.get_unique_tags(group)[:10]),
+            'group': group,
+        })
+
+    def post_process(self, group, event, is_new, is_sample, **kwargs):
+        for value in self.get_tag_values(event):
+            FilterValue.objects.get_or_create(
+                project=group.project,
+                key=self.tag,
+                value=value,
+            )
+
+            app.buffer.incr(MessageFilterValue, {
+                'times_seen': 1,
+            }, {
+                'group': group,
+                'project': group.project,
+                'key': self.tag,
+                'value': value,
+            }, {
+                'last_seen': group.last_seen,
+            })
+
+    def get_filters(self, project=None, **kwargs):
+        if not hasattr(type(self), '_filter_class'):
+            self._filter_class = create_tag_filter(self)
+        return [self._filter_class]
diff --git a/sentry/plugins/sentry_servers/models.py b/sentry/plugins/sentry_servers/models.py
index 150b5ae8ae..b026ec4a9c 100644
--- a/sentry/plugins/sentry_servers/models.py
+++ b/sentry/plugins/sentry_servers/models.py
@@ -7,12 +7,12 @@ sentry.plugins.sentry_servers.models
 """
 import sentry
 
-from django.db.models import Sum
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.filters import Filter
 from sentry.models import Event
-from sentry.plugins import Plugin, register
+from sentry.plugins import register
+from sentry.plugins.bases.tag import TagPlugin
 
 
 class ServerNameFilter(Filter):
@@ -26,7 +26,7 @@ class ServerNameFilter(Filter):
             return queryset.filter(event_set__server_name=self.get_value()).distinct()
 
 
-class ServersPlugin(Plugin):
+class ServersPlugin(TagPlugin):
     """
     Adds additional support for showing information about servers including:
 
@@ -38,30 +38,15 @@ class ServersPlugin(Plugin):
     version = sentry.VERSION
     author = "Sentry Team"
     author_url = "https://github.com/dcramer/sentry"
+    tag = 'server_name'
+    tag_label = _('Server Name')
 
-    def get_unique_servers(self, group):
-        return group.messagefiltervalue_set.filter(key='server_name')\
-                    .values_list('value')\
-                    .annotate(times_seen=Sum('times_seen'))\
-                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
-                    .order_by('-times_seen')
-
-    def panels(self, request, group, panel_list, **kwargs):
-        panel_list.append((self.get_title(), self.get_url(group)))
-        return panel_list
-
-    def view(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_servers/index.html', {
-            'unique_servers': self.get_unique_servers(group),
-            'group': group,
-        })
-
-    def widget(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_servers/widget.html', {
-            'unique_servers': list(self.get_unique_servers(group)[:10]),
-            'group': group,
-        })
+    def get_tag_values(self, event):
+        if not event.server_name:
+            return []
+        return [event.server_name]
 
     def get_filters(self, project=None, **kwargs):
         return [ServerNameFilter]
+
 register(ServersPlugin)
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
deleted file mode 100644
index 26aded254a..0000000000
--- a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
+++ /dev/null
@@ -1,43 +0,0 @@
-{% extends "sentry/groups/details.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block inner %}
-    {% paginate unique_servers from request as server_list per_page 25 %}
-
-    {% if server_list.objects %}
-        {{ server_list.paging }}
-
-        <table class="table table-bordered table-striped">
-            <colgroup>
-                <col>
-                <col style="width: 100px;">
-                <col style="width: 120px;">
-                <col style="width: 120px;">
-            </colgroup>
-            <thead>
-                <tr>
-                    <th>{% trans "Server Name" %}</th>
-                    <td style="text-align:center">{% trans "Times Seen" %}</th>
-                    <td style="text-align:center">{% trans "First Seen" %}</th>
-                    <td style="text-align:center">{% trans "Last Seen" %}</th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for server_name, times_seen, first_seen, last_seen in server_list.objects %}
-                    <tr>
-                        <td><a href="{% url sentry group.project.slug %}?server_name={{ server_name }}">{{ server_name }}</a></td>
-                        <td style="text-align:center">{{ times_seen|small_count }}</td>
-                        <td style="text-align:center">{% if first_seen %}{{ first_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
-                        <td style="text-align:center">{% if last_seen %}{{ last_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-
-        {{ server_list.paging }}
-    {% else %}
-        <p class="alert alert-notice">{% trans "There are no records recorded for this event." %}</p>
-    {% endif %}
-{% endblock %}
\ No newline at end of file
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
deleted file mode 100644
index d3d419599f..0000000000
--- a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
+++ /dev/null
@@ -1,12 +0,0 @@
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% if unique_servers %}
-    <h6>{% trans "Servers" %}</h6>
-
-    <ul class="server-list">
-        {% for server, times_seen, _, _ in unique_servers %}
-            <li><span class="count">{{ times_seen|small_count }}</span> <a href="{% url sentry group.project.slug %}?server_name={{ server }}">{{ server }}</a></li>
-        {% endfor %}
-    </ul>
-{% endif %}
diff --git a/sentry/plugins/sentry_sites/models.py b/sentry/plugins/sentry_sites/models.py
index 8ee4efadbf..932c15a023 100644
--- a/sentry/plugins/sentry_sites/models.py
+++ b/sentry/plugins/sentry_sites/models.py
@@ -7,36 +7,18 @@ sentry.plugins.sentry_sites.models
 """
 import sentry
 
-from django.conf import settings as django_settings
-from django.db.models import Sum
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.conf import settings
 from sentry.filters import Filter
 from sentry.models import Event
-from sentry.plugins import Plugin, register
+from sentry.plugins import register
+from sentry.plugins.bases.tag import TagPlugin
 
 
 class SiteFilter(Filter):
     label = _('Site')
     column = 'site'
 
-    def process(self, data):
-        if 'site' in data:
-            return data
-        if settings.SITE is None:
-            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
-                from django.contrib.sites.models import Site
-                try:
-                    settings.SITE = Site.objects.get_current().name
-                except Site.DoesNotExist:
-                    settings.SITE = ''
-            else:
-                settings.SITE = ''
-        if settings.SITE:
-            data['site'] = settings.SITE
-        return data
-
     def get_query_set(self, queryset):
         if queryset.model == Event:
             return queryset.filter(site=self.get_value()).distinct()
@@ -44,7 +26,7 @@ class SiteFilter(Filter):
             return queryset.filter(event_set__site=self.get_value()).distinct()
 
 
-class SitesPlugin(Plugin):
+class SitesPlugin(TagPlugin):
     """
     Adds additional support for showing information about sites including:
 
@@ -56,30 +38,15 @@ class SitesPlugin(Plugin):
     version = sentry.VERSION
     author = "Sentry Team"
     author_url = "https://github.com/dcramer/sentry"
+    tag = 'site'
+    tag_label = _('Site')
 
-    def get_unique_sites(self, group):
-        return group.messagefiltervalue_set.filter(key='site')\
-                    .values_list('value')\
-                    .annotate(times_seen=Sum('times_seen'))\
-                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
-                    .order_by('-times_seen')
-
-    def panels(self, request, group, panel_list, **kwargs):
-        panel_list.append((self.get_title(), self.get_url(group)))
-        return panel_list
-
-    def view(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_sites/index.html', {
-            'group': group,
-            'unique_sites': self.get_unique_sites(group),
-        })
-
-    def widget(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_sites/widget.html', {
-            'group': group,
-            'unique_sites': list(self.get_unique_sites(group)[:10]),
-        })
+    def get_tag_values(self, event):
+        if not event.site:
+            return []
+        return [event.site]
 
     def get_filters(self, project=None, **kwargs):
         return [SiteFilter]
+
 register(SitesPlugin)
diff --git a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html
deleted file mode 100644
index 4e3ac2c2b3..0000000000
--- a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html
+++ /dev/null
@@ -1,12 +0,0 @@
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% if unique_sites %}
-    <h6>{% trans "Sites" %}</h6>
-
-    <ul class="server-list">
-        {% for site, times_seen, _, _ in unique_sites %}
-            <li><span class="count">{{ times_seen|small_count }}</span> <a href="{% url sentry group.project.slug %}?site={{ site }}">{{ site }}</a></li>
-        {% endfor %}
-    </ul>
-{% endif %}
diff --git a/sentry/plugins/sentry_urls/models.py b/sentry/plugins/sentry_urls/models.py
index 341772b066..a51c018eda 100644
--- a/sentry/plugins/sentry_urls/models.py
+++ b/sentry/plugins/sentry_urls/models.py
@@ -7,13 +7,13 @@ sentry.plugins.sentry_urls.models
 """
 import sentry
 
-from django.db.models import Sum
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.plugins import Plugin, register
+from sentry.plugins import register
+from sentry.plugins.bases.tag import TagPlugin
 
 
-class UrlsPlugin(Plugin):
+class UrlsPlugin(TagPlugin):
     """
     Adds additional support for showing information about urls including:
 
@@ -25,27 +25,15 @@ class UrlsPlugin(Plugin):
     version = sentry.VERSION
     author = "Sentry Team"
     author_url = "https://github.com/dcramer/sentry"
+    tag = 'url'
+    tag_label = _('URL')
+
+    def get_tag_values(self, event):
+        http = event.interfaces.get('sentry.interfaces.Http')
+        if not http:
+            return []
+        if not http.url:
+            return []
+        return [http.url]
 
-    def get_unique_urls(self, group):
-        return group.messagefiltervalue_set.filter(key='url')\
-                    .values_list('value')\
-                    .annotate(times_seen=Sum('times_seen'))\
-                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
-                    .order_by('-times_seen')
-
-    def panels(self, request, group, panel_list, **kwargs):
-        panel_list.append((self.get_title(), self.get_url(group)))
-        return panel_list
-
-    def view(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_urls/index.html', {
-            'group': group,
-            'unique_urls': self.get_unique_urls(group),
-        })
-
-    def widget(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_urls/widget.html', {
-            'group': group,
-            'unique_urls': list(self.get_unique_urls(group)[:10]),
-        })
 register(UrlsPlugin)
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
deleted file mode 100644
index 9e59ba4428..0000000000
--- a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
+++ /dev/null
@@ -1,43 +0,0 @@
-{% extends "sentry/groups/details.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block inner %}
-    {% paginate unique_urls from request as url_list per_page 25 %}
-
-    {% if url_list.objects %}
-        {{ url_list.paging }}
-
-        <table class="table table-bordered table-striped">
-            <colgroup>
-                <col>
-                <col style="width: 100px;">
-                <col style="width: 120px;">
-                <col style="width: 120px;">
-            </colgroup>
-            <thead>
-                <tr>
-                    <th>{% trans "URL" %}</th>
-                    <td style="text-align:center">{% trans "Times Seen" %}</th>
-                    <td style="text-align:center">{% trans "First Seen" %}</th>
-                    <td style="text-align:center">{% trans "Last Seen" %}</th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for url, times_seen, first_seen, last_seen in url_list.objects %}
-                    <tr>
-                        <td><a href="{{ url }}">{{ url }}</a></td>
-                        <td style="text-align:center">{{ times_seen|small_count }}</td>
-                        <td style="text-align:center">{% if first_seen %}{{ first_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
-                        <td style="text-align:center">{% if last_seen %}{{ last_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-
-        {{ url_list.paging }}
-    {% else %}
-        <p class="alert alert-notice">{% trans "There are no records recorded for this event." %}</p>
-    {% endif %}
-{% endblock %}
\ No newline at end of file
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
deleted file mode 100644
index 203484da72..0000000000
--- a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
+++ /dev/null
@@ -1,12 +0,0 @@
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% if unique_urls %}
-    <h6>{% trans "URLs" %}</h6>
-
-    <ul class="url-list">
-        {% for link, times_seen, _, _ in unique_urls %}
-            <li><span class="count">{{ times_seen|small_count }}</span> <a href="{{ link }}">{{ link }}</a></li>
-        {% endfor %}
-    </ul>
-{% endif %}
\ No newline at end of file
diff --git a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html b/sentry/templates/sentry/plugins/bases/tag/index.html
similarity index 78%
rename from sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
rename to sentry/templates/sentry/plugins/bases/tag/index.html
index 93d0252515..538008e8b3 100644
--- a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
+++ b/sentry/templates/sentry/plugins/bases/tag/index.html
@@ -4,10 +4,10 @@
 {% load sentry_helpers %}
 
 {% block inner %}
-    {% paginate unique_sites from request as site_list per_page 25 %}
+    {% paginate unique_tags from request as tag_list per_page 25 %}
 
-    {% if site_list.objects %}
-        {{ site_list.paging }}
+    {% if tag_list.objects %}
+        {{ tag_list.paging }}
 
         <table class="table table-bordered table-striped">
             <colgroup>
@@ -18,16 +18,16 @@
             </colgroup>
             <thead>
                 <tr>
-                    <th>{% trans "Site Name" %}</th>
+                    <th>{{ tag_label }}</th>
                     <td style="text-align:center">{% trans "Times Seen" %}</th>
                     <td style="text-align:center">{% trans "First Seen" %}</th>
                     <td style="text-align:center">{% trans "Last Seen" %}</th>
                 </tr>
             </thead>
             <tbody>
-                {% for site, times_seen, first_seen, last_seen in site_list.objects %}
+                {% for tag_value, times_seen, first_seen, last_seen in tag_list.objects %}
                     <tr>
-                        <td><a href="{% url sentry group.project.slug %}?site={{ site }}">{{ site }}</a></td>
+                        <td><a href="{% url sentry group.project.slug %}?{{ tag }}={{ tag_value }}">{{ tag_value }}</a></td>
                         <td style="text-align:center">{{ times_seen|small_count }}</td>
                         <td style="text-align:center">{% if first_seen %}{{ first_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
                         <td style="text-align:center">{% if last_seen %}{{ last_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
@@ -36,7 +36,7 @@
             </tbody>
         </table>
 
-        {{ site_list.paging }}
+        {{ tag_list.paging }}
     {% else %}
         <p class="alert alert-notice">{% trans "There are no records recorded for this event." %}</p>
     {% endif %}
diff --git a/sentry/templates/sentry/plugins/bases/tag/widget.html b/sentry/templates/sentry/plugins/bases/tag/widget.html
new file mode 100644
index 0000000000..79ee648306
--- /dev/null
+++ b/sentry/templates/sentry/plugins/bases/tag/widget.html
@@ -0,0 +1,12 @@
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% if unique_tags %}
+    <h6>{{ title }}</h6>
+
+    <ul>
+        {% for tag_value, times_seen, _, _ in unique_tags %}
+            <li><span class="count">{{ times_seen|small_count }}</span> <a href="{% url sentry group.project.slug %}?{{ tag_name }}={{ tag_value }}">{{ tag_value }}</a></li>
+        {% endfor %}
+    </ul>
+{% endif %}
