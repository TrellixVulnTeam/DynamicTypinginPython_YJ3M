commit 36f3c350d710f1ad989d42b8cce6d9b9071b9888
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 16 16:26:14 2015 -0700

    Basic implementation of curl view

diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 03fa526ded..af4291dea5 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -10,10 +10,8 @@ from __future__ import absolute_import
 
 __all__ = ('Http',)
 
-from Cookie import SmartCookie
 from django.conf import settings
 from django.utils.translation import ugettext as _
-from pipes import quote
 from urllib import urlencode
 from urlparse import parse_qsl, urlsplit, urlunsplit
 
@@ -129,9 +127,7 @@ class Http(Interface):
 
         body = data.get('data')
         # TODO(dcramer): a list as a body is not even close to valid
-        if isinstance(body, (list, tuple)):
-            body = trim_dict(dict(enumerate(body)))
-        elif isinstance(body, dict):
+        if isinstance(body, dict):
             body = trim_dict(dict(
                 (k, v or '')
                 for k, v in body.iteritems()
@@ -181,32 +177,6 @@ class Http(Interface):
             'query_string': self.query_string,
         })
 
-    def to_curl(self):
-        method = self.method.upper() if self.method else 'GET'
-        if self.cookies:
-            try:
-                cookies = SmartCookie(self.cookies)
-            except Exception:
-                pass
-            else:
-                # The Cookie header is already yanked out of the headers dict
-                # inside `to_python` so we can just safely re-set it.
-                self.headers['Cookie'] = ';'.join(c.output(attrs=[], header='') for c in cookies.values()).strip()
-        bits = []
-        if method != 'GET':
-            bits.append('-X' + method)
-            data = self.data
-            if isinstance(data, dict):
-                data = urlencode(format_body(data))
-            if isinstance(data, basestring):
-                bits.append('--data ' + quote(data))
-        bits.append(quote(self.full_url))
-        for header in self.headers.iteritems():
-            bits.append('-H ' + quote('%s: %s' % header))
-        if 'gzip' in self.headers.get('Accept-Encoding', ''):
-            bits.append('--compressed')
-        return 'curl ' + ' '.join(bits)
-
     def get_alias(self):
         return 'request'
 
diff --git a/src/sentry/static/sentry/app/components/interfaces/request.jsx b/src/sentry/static/sentry/app/components/interfaces/request.jsx
index f788c534c3..60be0a3b7f 100644
--- a/src/sentry/static/sentry/app/components/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/request.jsx
@@ -1,9 +1,10 @@
 var React = require("react");
+var jQuery = require("jquery");
 
 var ConfigStore = require("../../stores/configStore");
 var GroupEventDataSection = require("../eventDataSection");
 var PropTypes = require("../../proptypes");
-var utils = require("../../utils");
+var {defined, objectIsEmpty} = require("../../utils");
 
 var ClippedBox = React.createClass({
   propTypes: {
@@ -92,6 +93,93 @@ var RequestActions = React.createClass({
   }
 });
 
+var CurlHttpContent = React.createClass({
+  escapeQuotes(v) {
+    return v.replace(/"/g, '\\"');
+  },
+
+  // TODO(dcramer): support cookies
+  getCurlCommand() {
+    var data = this.props.data;
+    var result = 'curl';
+    if (defined(data.method) && data.method !== 'GET') {
+      result += ' \\\n -X ' + method;
+    }
+    if (defined(data.headers['Accept-Encoding']) && data.headers['Accept-Encoding'].indexOf('gzip') === 1) {
+      result += ' \\\n --compressed';
+    }
+    for (var key in data.headers) {
+      result += ' \\\n -H "' + key + ': ' + this.escapeQuotes(data.headers[key]) + '"';
+    }
+    if (typeof data.data === "string") {
+      result += ' \\\n  --data "' + this.escapeQuotes(data.data) + '"';
+    } else if (defined(data.data)) {
+      result += ' \\\n  --data "' + this.escapeQuotes(jQuery.param(data.data)) + '"';
+    }
+    result += ' \\\n ' + data.url;
+    return result;
+  },
+
+  render() {
+    return <pre>{this.getCurlCommand()}</pre>;
+  }
+});
+
+var RawHttpContent = React.createClass({
+  render() {
+    return null;
+  }
+});
+
+var RichHttpContent = React.createClass({
+  render(){
+    var data = this.props.data;
+
+    var headers = [];
+    for (var key in data.headers) {
+      headers.push(<dt key={'dt-' + key }>{key}</dt>);
+      headers.push(<dd key={'dd-' + key }><pre>{data.headers[key]}</pre></dd>);
+    }
+
+    return (
+      <div>
+        {data.query_string &&
+          <ClippedBox title="Query String">
+            <pre>{data.query_string}</pre>
+          </ClippedBox>
+        }
+        {data.fragment &&
+          <ClippedBox title="Fragment">
+            <pre>{data.fragment}</pre>
+          </ClippedBox>
+        }
+        {data.data &&
+          <ClippedBox title="Body">
+            <pre>{data.data}</pre>
+          </ClippedBox>
+        }
+        {data.cookies &&
+          <ClippedBox title="Cookies" defaultCollapsed>
+            <pre>{JSON.stringify(data.cookies, null, 2)}</pre>
+          </ClippedBox>
+        }
+        {!objectIsEmpty(data.headers) &&
+          <ClippedBox title="Headers">
+            <DefinitionList data={data.headers} />
+          </ClippedBox>
+        }
+        {!objectIsEmpty(data.env) &&
+          <ClippedBox title="Environment" defaultCollapsed>
+            <dl className="vars">
+              <DefinitionList data={data.env} />
+            </dl>
+          </ClippedBox>
+        }
+      </div>
+    );
+  }
+});
+
 var RequestInterface = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -106,10 +194,23 @@ var RequestInterface = React.createClass({
     project: PropTypes.Project
   },
 
-  render: function(){
+  getInitialState() {
+    return {
+      view: "rich"
+    };
+  },
+
+  toggleView(value) {
+    this.setState({
+      view: value
+    });
+  },
+
+  render() {
     var group = this.props.group;
     var evt = this.props.event;
     var data = this.props.data;
+    var view = this.state.view;
 
     var fullUrl = data.url;
     if (data.query_string) {
@@ -119,12 +220,6 @@ var RequestInterface = React.createClass({
       fullUrl = fullUrl + '#' + data.fragment;
     }
 
-    var headers = [];
-    for (var key in data.headers) {
-      headers.push(<dt key={'dt-' + key }>{key}</dt>);
-      headers.push(<dd key={'dd-' + key }><pre>{data.headers[key]}</pre></dd>);
-    }
-
     // lol
     var parsedUrl = document.createElement("a");
     parsedUrl.href = fullUrl;
@@ -142,9 +237,12 @@ var RequestInterface = React.createClass({
           }
         </div>
         <div className="btn-group">
-          <a className="btn btn-default btn-sm active">Rich</a>
-          <a className="btn btn-default btn-sm"><code>curl</code></a>
-          <a className="btn btn-default btn-sm">Raw</a>
+          <a className={(view === "rich" ? "active" : "") + " btn btn-default btn-sm"}
+             onClick={this.toggleView.bind(this, "rich")}>Rich</a>
+          <a className={(view === "curl" ? "active" : "") + " btn btn-default btn-sm"}
+             onClick={this.toggleView.bind(this, "curl")}><code>curl</code></a>
+          <a className={(view === "raw" ? "active" : "") + " btn btn-default btn-sm"}
+             onClick={this.toggleView.bind(this, "raw")}>Raw</a>
         </div>
       </div>
     );
@@ -155,38 +253,13 @@ var RequestInterface = React.createClass({
           event={evt}
           type={this.props.type}
           title={title}>
-        {data.query_string &&
-          <ClippedBox title="Query String">
-            <pre>{data.query_string}</pre>
-          </ClippedBox>
-        }
-        {data.fragment &&
-          <ClippedBox title="Fragment">
-            <pre>{data.fragment}</pre>
-          </ClippedBox>
-        }
-        {data.data &&
-          <ClippedBox title="Body">
-            <pre>{data.data}</pre>
-          </ClippedBox>
-        }
-        {data.cookies &&
-          <ClippedBox title="Cookies" defaultCollapsed>
-            <pre>{JSON.stringify(data.cookies, null, 2)}</pre>
-          </ClippedBox>
-        }
-        {!utils.objectIsEmpty(data.headers) &&
-          <ClippedBox title="Headers">
-            <DefinitionList data={data.headers} />
-          </ClippedBox>
-        }
-        {!utils.objectIsEmpty(data.env) &&
-          <ClippedBox title="Environment" defaultCollapsed>
-            <dl className="vars">
-              <DefinitionList data={data.env} />
-            </dl>
-          </ClippedBox>
-        }
+        {view === "rich" ?
+          <RichHttpContent data={data} />
+        : (view === "curl" ?
+          <CurlHttpContent data={data} />
+        :
+          <RawHttpContent data={data} />
+        )}
       </GroupEventDataSection>
     );
   }
