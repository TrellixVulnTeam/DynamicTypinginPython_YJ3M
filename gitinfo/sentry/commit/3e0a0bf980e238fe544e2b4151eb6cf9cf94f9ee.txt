commit 3e0a0bf980e238fe544e2b4151eb6cf9cf94f9ee
Author: josh <josh@jrl.ninja>
Date:   Tue Dec 10 11:21:48 2019 -0800

    Revert "feat: add and fix bitfield tests on Django 1.9, 1.10, bring back Exact lookup support and refactor lookup style (#16022)" (#16032)
    
    This reverts commit c1eddb7b9d0da7df3f78e64bc92ee3200b236508.

diff --git a/bin/load-mocks b/bin/load-mocks
index 8c62b950a5..bea1235841 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -15,6 +15,7 @@ from uuid import uuid4
 import six
 from django.conf import settings
 from django.db import IntegrityError, transaction
+from django.db.models import F
 from django.utils import timezone
 from loremipsum import Generator
 from pytz import utc
@@ -372,7 +373,7 @@ def main(num_events=1, extra_events=False):
             if not project.first_event:
                 project.update(first_event=project.date_added)
             if not project.flags.has_releases:
-                project.update(flags=Project.flags.has_releases)
+                project.update(flags=F("flags").bitor(Project.flags.has_releases))
 
             monitor, created = Monitor.objects.get_or_create(
                 name=next(MONITOR_NAMES),
diff --git a/src/bitfield/__init__.py b/src/bitfield/__init__.py
index 8d64294299..d2248ae1fc 100644
--- a/src/bitfield/__init__.py
+++ b/src/bitfield/__init__.py
@@ -1,3 +1,7 @@
+"""
+django-bitfield
+~~~~~~~~~~~~~~~
+"""
 from __future__ import absolute_import
 
 from bitfield.models import Bit, BitHandler, BitField  # NOQA
diff --git a/src/bitfield/admin.py b/src/bitfield/admin.py
index f2231df88a..4d3c1d9dfc 100644
--- a/src/bitfield/admin.py
+++ b/src/bitfield/admin.py
@@ -12,6 +12,10 @@ from bitfield.compat import bitor
 
 
 class BitFieldListFilter(FieldListFilter):
+    """
+    BitField list filter.
+    """
+
     def __init__(self, field, request, params, model, model_admin, field_path):
         self.lookup_kwarg = field_path
         self.lookup_val = int(request.GET.get(self.lookup_kwarg, 0))
diff --git a/src/bitfield/models.py b/src/bitfield/models.py
index 18a4b65296..bea2eca5ac 100644
--- a/src/bitfield/models.py
+++ b/src/bitfield/models.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-import six
-
 from django.db.models.fields import BigIntegerField, Field
 
 from bitfield.forms import BitFormField
@@ -138,7 +136,13 @@ class BitField(BigIntegerField):
         if isinstance(getattr(value, "expression", None), Bit):
             value = value.expression
         if isinstance(value, (BitHandler, Bit)):
-            return [value.mask]
+            if hasattr(self, "class_lookups"):
+                # Django 1.7+
+                return [value.mask]
+            else:
+                return BitQueryLookupWrapper(
+                    self.model._meta.db_table, self.db_column or self.name, value
+                )
         return BigIntegerField.get_db_prep_lookup(
             self, lookup_type=lookup_type, value=value, connection=connection, prepared=prepared
         )
@@ -154,15 +158,6 @@ class BitField(BigIntegerField):
         if isinstance(value, Bit):
             value = value.mask
         if not isinstance(value, BitHandler):
-            # Regression for #1425: fix bad data that was created resulting
-            # in negative values for flags.  Compute the value that would
-            # have been visible ot the application to preserve compatibility.
-            if isinstance(value, six.integer_types) and value < 0:
-                new_value = 0
-                for bit_number, _ in enumerate(self.flags):
-                    new_value |= value & (2 ** bit_number)
-                value = new_value
-
             value = BitHandler(value, self.flags, self.labels)
         else:
             # Ensure flags are consistent for unpickling
@@ -175,4 +170,7 @@ class BitField(BigIntegerField):
         return name, path, args, kwargs
 
 
-BitField.register_lookup(BitQueryLookupWrapper)
+try:
+    BitField.register_lookup(BitQueryLookupWrapper)
+except AttributeError:
+    pass
diff --git a/src/bitfield/query.py b/src/bitfield/query.py
index bfa51a37fb..6cfba07db5 100644
--- a/src/bitfield/query.py
+++ b/src/bitfield/query.py
@@ -2,22 +2,46 @@ from __future__ import absolute_import
 
 from bitfield.types import Bit, BitHandler
 
-from django.db.models.lookups import Exact
 
+class BitQueryLookupWrapper(object):
+    def __init__(self, alias, column, bit):
+        self.table_alias = alias
+        self.column = column
+        self.bit = bit
 
-class BitQueryLookupWrapper(Exact):
-    def process_lhs(self, qn, connection, lhs=None):
-        lhs_sql, params = super(BitQueryLookupWrapper, self).process_lhs(qn, connection, lhs)
-        if self.rhs:
-            lhs_sql = lhs_sql + " & %s"
-        else:
-            lhs_sql = lhs_sql + " | %s"
-        params.extend(self.process_rhs(qn, connection)[1])
-        return lhs_sql, params
+    def as_sql(self, qn, connection=None):
+        """
+        Create the proper SQL fragment. This inserts something like
+        "(T0.flags & value) != 0".
 
-    def get_db_prep_lookup(self, value, connection, prepared=False):
-        v = value.mask if isinstance(value, (BitHandler, Bit)) else value
-        return super(BitQueryLookupWrapper, self).get_db_prep_lookup(v, connection)
+        This will be called by Where.as_sql()
+        """
+        if self.bit:
+            return ("(%s.%s | %d)" % (qn(self.table_alias), qn(self.column), self.bit.mask), [])
+        return ("(%s.%s & %d)" % (qn(self.table_alias), qn(self.column), self.bit.mask), [])
 
-    def get_prep_lookup(self):
-        return self.rhs
+
+try:
+    # Django 1.7+
+    from django.db.models.lookups import Lookup
+
+    class BitQueryLookupWrapper(Lookup):  # NOQA
+        def process_lhs(self, qn, connection, lhs=None):
+            lhs_sql, params = super(BitQueryLookupWrapper, self).process_lhs(qn, connection, lhs)
+            if self.rhs:
+                lhs_sql = lhs_sql + " & %s"
+            else:
+                lhs_sql = lhs_sql + " | %s"
+            params.extend(self.process_rhs(qn, connection)[1])
+            return lhs_sql, params
+
+        def get_db_prep_lookup(self, value, connection, prepared=False):
+            v = value.mask if isinstance(value, (BitHandler, Bit)) else value
+            return super(BitQueryLookupWrapper, self).get_db_prep_lookup(v, connection)
+
+        def get_prep_lookup(self):
+            return self.rhs
+
+
+except ImportError:
+    pass
diff --git a/src/bitfield/types.py b/src/bitfield/types.py
index 67d24ead79..0cf60f526d 100644
--- a/src/bitfield/types.py
+++ b/src/bitfield/types.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import django
 import six
 
 from six import string_types
@@ -11,6 +12,10 @@ def cmp(a, b):
 
 
 class Bit(object):
+    """
+    Represents a single Bit.
+    """
+
     def __init__(self, number, is_set=True):
         self.number = number
         self.is_set = bool(is_set)
@@ -22,6 +27,11 @@ class Bit(object):
     def __repr__(self):
         return "<%s: number=%d, is_set=%s>" % (self.__class__.__name__, self.number, self.is_set)
 
+    # def __str__(self):
+    #     if self.is_set:
+    #         return 'Yes'
+    #     return 'No'
+
     def __int__(self):
         return self.mask
 
@@ -250,14 +260,15 @@ class BitHandler(object):
         return self._labels[flag]
 
 
-from django.core.exceptions import ImproperlyConfigured
+if django.VERSION[:2] >= (1, 8):
+    from django.core.exceptions import ImproperlyConfigured
 
-# We need to register adapters in Django 1.8 in order to prevent
-# "ProgrammingError: can't adapt type"
-try:
-    from django.db.backends.postgresql_psycopg2.base import Database
+    # We need to register adapters in Django 1.8 in order to prevent
+    # "ProgrammingError: can't adapt type"
+    try:
+        from django.db.backends.postgresql_psycopg2.base import Database
 
-    Database.extensions.register_adapter(Bit, lambda x: Database.extensions.AsIs(int(x)))
-    Database.extensions.register_adapter(BitHandler, lambda x: Database.extensions.AsIs(int(x)))
-except ImproperlyConfigured:
-    pass
+        Database.extensions.register_adapter(Bit, lambda x: Database.extensions.AsIs(int(x)))
+        Database.extensions.register_adapter(BitHandler, lambda x: Database.extensions.AsIs(int(x)))
+    except ImproperlyConfigured:
+        pass
diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index 99350facd2..e9bc3de740 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 import six
 
 from django.db import transaction
-from django.db.models import Q
+from django.db.models import Q, F
 from rest_framework import serializers
 from rest_framework.response import Response
 from django.conf import settings
@@ -134,9 +134,9 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
                     ssoFlag = OrganizationMember.flags["sso:linked"]
                     ssoLinked = "true" in value
                     if ssoLinked:
-                        queryset = queryset.filter(flags=ssoFlag)
+                        queryset = queryset.filter(flags=F("flags").bitor(ssoFlag))
                     else:
-                        queryset = queryset.filter(flags=~ssoFlag)
+                        queryset = queryset.filter(flags=F("flags").bitand(~ssoFlag))
 
                 elif key == "has2fa":
                     has2fa = "true" in value
diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index 3d994991dd..8fafefb73c 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from django.db.models import F
 from rest_framework import status
 from rest_framework.response import Response
 
@@ -41,7 +42,7 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
     def get(self, request, project, key_id):
         try:
             key = ProjectKey.objects.get(
-                project=project, public_key=key_id, roles=ProjectKey.roles.store
+                project=project, public_key=key_id, roles=F("roles").bitor(ProjectKey.roles.store)
             )
         except ProjectKey.DoesNotExist:
             raise ResourceDoesNotExist
@@ -65,7 +66,7 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
         """
         try:
             key = ProjectKey.objects.get(
-                project=project, public_key=key_id, roles=ProjectKey.roles.store
+                project=project, public_key=key_id, roles=F("roles").bitor(ProjectKey.roles.store)
             )
         except ProjectKey.DoesNotExist:
             raise ResourceDoesNotExist
@@ -133,7 +134,7 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
         """
         try:
             key = ProjectKey.objects.get(
-                project=project, public_key=key_id, roles=ProjectKey.roles.store
+                project=project, public_key=key_id, roles=F("roles").bitor(ProjectKey.roles.store)
             )
         except ProjectKey.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/endpoints/project_key_stats.py b/src/sentry/api/endpoints/project_key_stats.py
index b6c7d3f6ae..645bd40590 100644
--- a/src/sentry/api/endpoints/project_key_stats.py
+++ b/src/sentry/api/endpoints/project_key_stats.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 
 from collections import OrderedDict
+from django.db.models import F
 from rest_framework.response import Response
 
 from sentry import tsdb
@@ -16,7 +17,7 @@ class ProjectKeyStatsEndpoint(ProjectEndpoint, StatsMixin):
     def get(self, request, project, key_id):
         try:
             key = ProjectKey.objects.get(
-                project=project, public_key=key_id, roles=ProjectKey.roles.store
+                project=project, public_key=key_id, roles=F("roles").bitor(ProjectKey.roles.store)
             )
         except ProjectKey.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/endpoints/project_keys.py b/src/sentry/api/endpoints/project_keys.py
index 3e167386a8..b52e03ea81 100644
--- a/src/sentry/api/endpoints/project_keys.py
+++ b/src/sentry/api/endpoints/project_keys.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from django.db.models import F
 from rest_framework import status
 from rest_framework.response import Response
 
@@ -44,7 +45,9 @@ class ProjectKeysEndpoint(ProjectEndpoint):
         :pparam string project_slug: the slug of the project the client keys
                                      belong to.
         """
-        queryset = ProjectKey.objects.filter(project=project, roles=ProjectKey.roles.store)
+        queryset = ProjectKey.objects.filter(
+            project=project, roles=F("roles").bitor(ProjectKey.roles.store)
+        )
         status = request.GET.get("status")
         if status == "active":
             queryset = queryset.filter(status=ProjectKeyStatus.ACTIVE)
diff --git a/src/sentry/api/endpoints/user_subscriptions.py b/src/sentry/api/endpoints/user_subscriptions.py
index eaeb413186..eab0d237a4 100644
--- a/src/sentry/api/endpoints/user_subscriptions.py
+++ b/src/sentry/api/endpoints/user_subscriptions.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from django.db.models import F
 from django.utils import timezone
 from rest_framework import serializers
 
@@ -109,6 +110,6 @@ class UserSubscriptionsEndpoint(UserEndpoint):
 
         newsletter.create_or_update_subscriptions(user, **kwargs)
 
-        user.update(flags=~User.flags.newsletter_consent_prompt)
+        user.update(flags=F("flags").bitand(~User.flags.newsletter_consent_prompt))
 
         return self.respond(status=204)
diff --git a/src/sentry/api/serializers/models/auth_provider.py b/src/sentry/api/serializers/models/auth_provider.py
index 2e0f5b45ec..b27d53a4e5 100644
--- a/src/sentry/api/serializers/models/auth_provider.py
+++ b/src/sentry/api/serializers/models/auth_provider.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import six
 
+from django.db.models import F
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import AuthProvider, OrganizationMember
 from sentry.utils.http import absolute_uri
@@ -12,7 +14,8 @@ class AuthProviderSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         organization = obj.organization
         pending_links_count = OrganizationMember.objects.filter(
-            organization=organization, flags=~OrganizationMember.flags["sso:linked"]
+            organization=organization,
+            flags=F("flags").bitand(~OrganizationMember.flags["sso:linked"]),
         ).count()
 
         login_url = organization.get_url()
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 9f3cf1c56e..0e820579d5 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -8,6 +8,7 @@ from django.conf import settings
 from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.db import IntegrityError, transaction
+from django.db.models import F
 from django.http import HttpResponseRedirect
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
@@ -480,7 +481,7 @@ def handle_new_user(auth_provider, organization, request, identity):
     )
 
     if settings.TERMS_URL and settings.PRIVACY_URL:
-        user.update(flags=User.flags.newsletter_consent_prompt)
+        user.update(flags=F("flags").bitor(User.flags.newsletter_consent_prompt))
 
     try:
         with transaction.atomic():
@@ -826,7 +827,7 @@ class AuthHelper(object):
         if not require_2fa or not require_2fa.is_set:
             return
 
-        self.organization.update(flags=~Organization.flags.require_2fa)
+        self.organization.update(flags=F("flags").bitand(~Organization.flags.require_2fa))
 
         logger.info(
             "Require 2fa disabled during sso setup", extra={"organization_id": self.organization.id}
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 36d8d82b5c..a76778c0c1 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -6,6 +6,7 @@ import six
 import itertools
 
 from django.db import models, IntegrityError, transaction
+from django.db.models import F
 from django.utils import timezone
 from time import time
 
@@ -167,7 +168,7 @@ class Release(Model):
                 release.add_project(project)
                 if not project.flags.has_releases:
                     project.flags.has_releases = True
-                    project.update(flags=Project.flags.has_releases)
+                    project.update(flags=F("flags").bitor(Project.flags.has_releases))
 
             # TODO(dcramer): upon creating a new release, check if it should be
             # the new "latest release" for this project
@@ -259,7 +260,7 @@ class Release(Model):
                 ReleaseProject.objects.create(project=project, release=self)
                 if not project.flags.has_releases:
                     project.flags.has_releases = True
-                    project.update(flags=Project.flags.has_releases)
+                    project.update(flags=F("flags").bitor(Project.flags.has_releases))
         except IntegrityError:
             return False
         else:
diff --git a/src/sentry/tasks/auth.py b/src/sentry/tasks/auth.py
index 391e24c2c5..f624acf41b 100644
--- a/src/sentry/tasks/auth.py
+++ b/src/sentry/tasks/auth.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import, print_function
 import logging
 
 from django.db import IntegrityError
+from django.db.models import F
 
 from sentry import options
 from sentry.models import (
@@ -33,7 +34,7 @@ def email_missing_links(org_id, actor_id, provider_key, **kwargs):
         return
 
     member_list = OrganizationMember.objects.filter(
-        organization=org, flags=~OrganizationMember.flags["sso:linked"]
+        organization=org, flags=F("flags").bitand(~OrganizationMember.flags["sso:linked"])
     )
     for member in member_list:
         member.send_sso_link_email(actor, provider)
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index d23d917fdb..cf85b997dd 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -135,7 +135,8 @@ class OrganizationAuthSettingsView(OrganizationView):
             )
 
         pending_links_count = OrganizationMember.objects.filter(
-            organization=organization, flags=~OrganizationMember.flags["sso:linked"]
+            organization=organization,
+            flags=F("flags").bitand(~OrganizationMember.flags["sso:linked"]),
         ).count()
 
         context = {
diff --git a/src/sentry/web/frontend/setup_wizard.py b/src/sentry/web/frontend/setup_wizard.py
index 8506a7832c..13553bd57d 100644
--- a/src/sentry/web/frontend/setup_wizard.py
+++ b/src/sentry/web/frontend/setup_wizard.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from django.db.models import F
+
 from sentry import roles
 from sentry.cache import default_cache
 from sentry.models import ApiToken
@@ -50,7 +52,7 @@ class SetupWizardView(BaseView):
                 keys = list(
                     ProjectKey.objects.filter(
                         project=project,
-                        roles=ProjectKey.roles.store,
+                        roles=F("roles").bitor(ProjectKey.roles.store),
                         status=ProjectKeyStatus.ACTIVE,
                     )
                 )
diff --git a/tests/acceptance/test_accept_organization_invite.py b/tests/acceptance/test_accept_organization_invite.py
index a15f0ce8a2..94d2c8f366 100644
--- a/tests/acceptance/test_accept_organization_invite.py
+++ b/tests/acceptance/test_accept_organization_invite.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from django.db.models import F
+
 from sentry.testutils import AcceptanceTestCase
 from sentry.models import Organization, AuthProvider
 
@@ -31,13 +33,13 @@ class AcceptOrganizationInviteTest(AcceptanceTestCase):
         assert self.browser.element_exists('[aria-label="create-account"]')
 
     def test_invite_2fa_enforced_org(self):
-        self.org.update(flags=Organization.flags.require_2fa)
+        self.org.update(flags=F("flags").bitor(Organization.flags.require_2fa))
         self.browser.get(self.member.get_invite_link().split("/", 3)[-1])
         self.browser.wait_until('[data-test-id="accept-invite"]')
         assert not self.browser.element_exists_by_test_id("2fa-warning")
 
         self.login_as(self.user)
-        self.org.update(flags=Organization.flags.require_2fa)
+        self.org.update(flags=F("flags").bitor(Organization.flags.require_2fa))
         self.browser.get(self.member.get_invite_link().split("/", 3)[-1])
         self.browser.wait_until('[data-test-id="accept-invite"]')
         assert self.browser.element_exists_by_test_id("2fa-warning")
diff --git a/tests/sentry/db/models/fields/bitfield/__init__.py b/tests/bitfield/__init__.py
similarity index 100%
rename from tests/sentry/db/models/fields/bitfield/__init__.py
rename to tests/bitfield/__init__.py
diff --git a/tests/bitfield/forms.py b/tests/bitfield/forms.py
new file mode 100644
index 0000000000..d78a2fb376
--- /dev/null
+++ b/tests/bitfield/forms.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from django import forms
+
+from .models import BitFieldTestModel
+
+
+class BitFieldTestModelForm(forms.ModelForm):
+    class Meta:
+        model = BitFieldTestModel
+        exclude = tuple()
diff --git a/tests/bitfield/models.py b/tests/bitfield/models.py
new file mode 100644
index 0000000000..8ca51db4a5
--- /dev/null
+++ b/tests/bitfield/models.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from django.db import models
+
+from bitfield import BitField
+
+
+class BitFieldTestModel(models.Model):
+    flags = BitField(
+        flags=("FLAG_0", "FLAG_1", "FLAG_2", "FLAG_3"), default=3, db_column="another_name"
+    )
diff --git a/tests/sentry/db/models/fields/bitfield/test_bitfield.py b/tests/bitfield/tests.py
similarity index 97%
rename from tests/sentry/db/models/fields/bitfield/test_bitfield.py
rename to tests/bitfield/tests.py
index 7449798a91..bb190ae577 100644
--- a/tests/sentry/db/models/fields/bitfield/test_bitfield.py
+++ b/tests/bitfield/tests.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import pickle
 import six
 
-from django import forms
 from django.db import connection, models
 from django.db.models import F
 from django.test import TestCase
@@ -11,20 +10,8 @@ from django.test import TestCase
 from bitfield import Bit, BitField, BitHandler
 from bitfield.compat import bitand, bitor
 
-
-class BitFieldTestModel(models.Model):
-    class Meta:
-        app_label = "sentry"
-
-    flags = BitField(
-        flags=("FLAG_0", "FLAG_1", "FLAG_2", "FLAG_3"), default=3, db_column="another_name"
-    )
-
-
-class BitFieldTestModelForm(forms.ModelForm):
-    class Meta:
-        model = BitFieldTestModel
-        exclude = tuple()
+from .forms import BitFieldTestModelForm
+from .models import BitFieldTestModel
 
 
 class BitHandlerTest(TestCase):
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 4709f0dd8e..9120b1188f 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from datetime import timedelta
 
+from django.db.models import F
 from django.test import RequestFactory
 from django.utils import timezone
 from exam import fixture
@@ -37,7 +38,7 @@ class OrganizationPermissionBase(TestCase):
 
 class OrganizationPermissionTest(OrganizationPermissionBase):
     def org_require_2fa(self):
-        self.org.update(flags=Organization.flags.require_2fa)
+        self.org.update(flags=F("flags").bitor(Organization.flags.require_2fa))
         assert self.org.flags.require_2fa.is_set is True
 
     def test_regular_user(self):
diff --git a/tests/sentry/api/endpoints/test_accept_organization_invite.py b/tests/sentry/api/endpoints/test_accept_organization_invite.py
index e6f7ce309c..f4f903c426 100644
--- a/tests/sentry/api/endpoints/test_accept_organization_invite.py
+++ b/tests/sentry/api/endpoints/test_accept_organization_invite.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from six.moves.urllib.parse import parse_qsl
 from django.core.urlresolvers import reverse
+from django.db.models import F
 from datetime import timedelta
 
 from sentry.models import (
@@ -24,7 +25,7 @@ class AcceptInviteTest(TestCase):
         self.user = self.create_user("bar@example.com")
 
     def _require_2fa_for_organization(self):
-        self.organization.update(flags=Organization.flags.require_2fa)
+        self.organization.update(flags=F("flags").bitor(Organization.flags.require_2fa))
         assert self.organization.flags.require_2fa.is_set
 
     def _assert_pending_invite_cookie_set(self, response, om):
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index 39129b3f4f..8d2a981e4f 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -4,6 +4,7 @@ import six
 
 from django.core import mail
 from django.core.urlresolvers import reverse
+from django.db.models import F
 from mock import patch
 
 from sentry.models import (
@@ -569,7 +570,7 @@ class ResetOrganizationMember2faTest(APITestCase):
         self.login_as(self.owner)
         TotpInterface().enroll(self.owner)
 
-        self.org.update(flags=Organization.flags.require_2fa)
+        self.org.update(flags=F("flags").bitor(Organization.flags.require_2fa))
         assert self.org.flags.require_2fa.is_set is True
 
         self.assert_cannot_remove_authenticators()
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_details.py b/tests/sentry/api/endpoints/test_user_authenticator_details.py
index 2f17f5d007..2dd6fff499 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_details.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_details.py
@@ -5,6 +5,7 @@ import mock
 import six
 
 from django.core.urlresolvers import reverse
+from django.db.models import F
 from django.conf import settings
 from django.utils import timezone
 
@@ -30,7 +31,7 @@ class UserAuthenticatorDetailsTest(APITestCase):
 
     def _require_2fa_for_organization(self):
         organization = self.create_organization(name="test monkey", owner=self.user)
-        organization.update(flags=Organization.flags.require_2fa)
+        organization.update(flags=F("flags").bitor(Organization.flags.require_2fa))
 
     def test_wrong_auth_id(self):
         url = reverse(
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
index 63b9e3bda6..5ff62ef0fe 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
@@ -5,6 +5,7 @@ import mock
 from six.moves.urllib.parse import parse_qsl
 from django.core.urlresolvers import reverse
 from django.conf import settings
+from django.db.models import F
 
 from sentry.models import (
     AuditLogEntry,
@@ -170,7 +171,7 @@ class AcceptOrganizationInviteTest(APITestCase):
         self.assertFalse(Authenticator.objects.user_has_2fa(self.user))
 
     def require_2fa_for_organization(self):
-        self.organization.update(flags=Organization.flags.require_2fa)
+        self.organization.update(flags=F("flags").bitor(Organization.flags.require_2fa))
         self.assertTrue(self.organization.flags.require_2fa.is_set)
 
     def _assert_pending_invite_cookie_set(self, response, om):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 8fd503f49c..9e9ef8da8a 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -9,6 +9,7 @@ import pytz
 import six
 from django.contrib.auth.models import AnonymousUser
 from django.core import mail
+from django.db.models import F
 from django.utils import timezone
 from exam import fixture
 from mock import Mock
@@ -446,7 +447,7 @@ class MailPluginSignalsTest(TestCase):
         assert msg.to == [self.user.email]
 
     def test_user_feedback__enhanced_privacy(self):
-        self.organization.update(flags=Organization.flags.enhanced_privacy)
+        self.organization.update(flags=F("flags").bitor(Organization.flags.enhanced_privacy))
         assert self.organization.flags.enhanced_privacy.is_set is True
         UserOption.objects.set_value(
             user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
