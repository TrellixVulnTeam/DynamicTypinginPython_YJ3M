commit bba468c374d6954090223a88b1f5a5af733b4bcd
Author: David Wang <davidw1339@gmail.com>
Date:   Fri Nov 1 10:17:55 2019 -0700

    feat(discover2): Add initial metrics for Discover2 (Dwang's list) (#15379)
    
    Added metrics to track the following events happening in discover 2
    More details here: https://www.notion.so/sentry/0d7d602c42ef4f388d4c0bc4f549d91d?v=8f19a9f88f24474e82f2a690336d1d52

diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index d3d0c7303d..c47ef48cd6 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -1,6 +1,7 @@
 import _ from 'lodash';
 import {Query} from 'history';
 
+import {NewQuery} from 'app/stores/discoverSavedQueriesStore';
 import {Project} from 'app/types/index';
 import {appendTagCondition} from 'app/utils/queryString';
 
@@ -271,3 +272,18 @@ export function generateQueryWithTag(
 
   return query;
 }
+
+/**
+ * Takes in a DiscoverV2 NewQuery object and returns a Partial containing
+ * the desired fields to populate into reload analytics
+ */
+export function extractAnalyticsQueryFields(payload: NewQuery): Partial<NewQuery> {
+  const {projects, fields, fieldnames, query, tags} = payload;
+  return {
+    projects,
+    fields,
+    fieldnames,
+    query,
+    tags,
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/events.tsx b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
index bfb7864bdd..fc0b7b3701 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/events.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
@@ -4,6 +4,7 @@ import * as ReactRouter from 'react-router';
 import {Location} from 'history';
 import {omit, uniqBy} from 'lodash';
 
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {Organization} from 'app/types';
 import space from 'app/styles/space';
 import SearchBar from 'app/views/events/searchBar';
@@ -59,6 +60,13 @@ export default class Events extends React.Component<EventsProps> {
       pathname: location.pathname,
       query: newQuery,
     });
+
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.y_axis_change',
+      eventName: "Discoverv2: Change chart's y axis",
+      organization_id: this.props.organization.id,
+      y_axis_value: value,
+    });
   };
 
   renderTagsTable = () => {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
index 128d5591da..1b5379a77d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
@@ -8,6 +8,7 @@ import {Location} from 'history';
 
 import {Organization} from 'app/types';
 import {t} from 'app/locale';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import SentryTypes from 'app/sentryTypes';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import {PageContent, PageHeader} from 'app/styles/organization';
@@ -59,7 +60,19 @@ class EventsV2 extends React.Component<Props> {
 
       return (
         <LinkContainer key={index}>
-          <Link to={to}>{eventView.name}</Link>
+          <Link
+            to={to}
+            onClick={() => {
+              trackAnalyticsEvent({
+                eventKey: 'discover_v2.prebuilt_query_click',
+                eventName: 'Discoverv2: Click a pre-built query',
+                organization_id: this.props.organization.id,
+                query_name: eventView.name,
+              });
+            }}
+          >
+            {eventView.name}
+          </Link>
         </LinkContainer>
       );
     });
diff --git a/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx b/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx
index 1bf9658ee5..c74e057250 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx
@@ -6,6 +6,8 @@ import {Location} from 'history';
 import {Client} from 'app/api';
 import {Organization} from 'app/types';
 import {t} from 'app/locale';
+import {extractAnalyticsQueryFields} from 'app/utils';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {createSavedQuery} from 'app/actionCreators/discoverSavedQueries';
 import {addSuccessMessage} from 'app/actionCreators/indicator';
 import DropdownControl from 'app/components/dropdownControl';
@@ -32,6 +34,18 @@ type State = {
   queryName: string;
 };
 
+// Used for resolving the event name for an analytics event
+const EVENT_NAME_EXISTING_MAP = {
+  request: 'Discoverv2: Request to save a saved query as a new query',
+  success: 'Discoverv2: Successfully saved a saved query as a new query',
+  failed: 'Discoverv2: Failed to save a saved query as a new query',
+};
+const EVENT_NAME_NEW_MAP = {
+  request: 'Discoverv2: Request to save a new query',
+  success: 'Discoverv2: Successfully saved a new query',
+  failed: 'Discoverv2: Failed to save a new query',
+};
+
 class EventsSaveQueryButton extends React.Component<Props, State> {
   state = {
     queryName: '',
@@ -58,15 +72,39 @@ class EventsSaveQueryButton extends React.Component<Props, State> {
       payload.name = this.state.queryName;
     }
 
-    createSavedQuery(api, organization.slug, payload).then(saved => {
-      const view = EventView.fromSavedQuery(saved);
-      addSuccessMessage(t('Query saved'));
+    const editingExistingQuery = this.props.isEditingExistingQuery;
+    trackAnalyticsEvent({
+      ...this.getAnalyticsEventKeyName(editingExistingQuery, 'request'),
+      organization_id: organization.id,
+      ...extractAnalyticsQueryFields(payload),
+    });
 
-      browserHistory.push({
-        pathname: location.pathname,
-        query: view.generateQueryStringObject(),
+    createSavedQuery(api, organization.slug, payload)
+      .then(saved => {
+        const view = EventView.fromSavedQuery(saved);
+        addSuccessMessage(t('Query saved'));
+
+        browserHistory.push({
+          pathname: location.pathname,
+          query: view.generateQueryStringObject(),
+        });
+
+        trackAnalyticsEvent({
+          ...this.getAnalyticsEventKeyName(editingExistingQuery, 'success'),
+          organization_id: organization.id,
+          ...extractAnalyticsQueryFields(payload),
+        });
+      })
+      .catch((err: Error) => {
+        trackAnalyticsEvent({
+          ...this.getAnalyticsEventKeyName(editingExistingQuery, 'failed'),
+          organization_id: organization.id,
+          ...extractAnalyticsQueryFields(payload),
+          error:
+            (err && err.message) ||
+            `Could not save a ${editingExistingQuery ? 'existing' : 'new'} query`,
+        });
       });
-    });
   };
 
   handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
@@ -74,6 +112,25 @@ class EventsSaveQueryButton extends React.Component<Props, State> {
     this.setState({queryName: value});
   };
 
+  getAnalyticsEventKeyName(
+    editingExistingQuery: boolean,
+    type: 'request' | 'success' | 'failed'
+  ) {
+    const eventKey =
+      (editingExistingQuery
+        ? 'discover_v2.save_existing_query_'
+        : 'discover_v2.save_new_query_') + type;
+
+    const eventName = editingExistingQuery
+      ? EVENT_NAME_EXISTING_MAP[type]
+      : EVENT_NAME_NEW_MAP[type];
+
+    return {
+      eventKey,
+      eventName,
+    };
+  }
+
   render() {
     const newQueryLabel = this.props.isEditingExistingQuery
       ? t('Save as...')
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx
index 4424325041..f05484d4b7 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx
@@ -6,6 +6,8 @@ import {browserHistory} from 'react-router';
 import space from 'app/styles/space';
 import {Client} from 'app/api';
 import {t} from 'app/locale';
+import {extractAnalyticsQueryFields} from 'app/utils';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import Button from 'app/components/button';
 import {Organization} from 'app/types';
 import {
@@ -63,16 +65,40 @@ class SavedQueryButtonGroup extends React.Component<Props> {
 
     const {organization, api, eventView} = this.props;
 
-    deleteSavedQuery(api, organization.slug, eventView.id!).then(() => {
-      addSuccessMessage(t('Query deleted'));
-
-      // redirect to the primary discover2 page
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.delete_query_request',
+      eventName: 'Discoverv2: Request to delete a saved query',
+      organization_id: organization.id,
+      ...extractAnalyticsQueryFields(eventView.toNewQuery()),
+    });
 
-      browserHistory.push({
-        pathname: location.pathname,
-        query: {},
+    deleteSavedQuery(api, organization.slug, eventView.id!)
+      .then(() => {
+        addSuccessMessage(t('Query deleted'));
+
+        // redirect to the primary discover2 page
+
+        browserHistory.push({
+          pathname: location.pathname,
+          query: {},
+        });
+
+        trackAnalyticsEvent({
+          eventKey: 'discover_v2.delete_query_success',
+          eventName: 'Discoverv2: Successfully deleted a saved query',
+          organization_id: organization.id,
+          ...extractAnalyticsQueryFields(eventView.toNewQuery()),
+        });
+      })
+      .catch((err: Error) => {
+        trackAnalyticsEvent({
+          eventKey: 'discover_v2.delete_query_failed',
+          eventName: 'Discoverv2: Failed to delete a saved query',
+          organization_id: organization.id,
+          ...extractAnalyticsQueryFields(eventView.toNewQuery()),
+          error: (err && err.message) || 'Failed to delete query',
+        });
       });
-    });
   };
 
   renderDeleteButton = () => {
@@ -95,13 +121,36 @@ class SavedQueryButtonGroup extends React.Component<Props> {
 
     const payload = eventView.toNewQuery();
 
-    updateSavedQuery(api, organization.slug, payload).then(_saved => {
-      addSuccessMessage(t('Query updated'));
-
-      // NOTE: there is no need to convert _saved into an EventView and push it
-      //       to the browser history, since this.props.eventView already
-      //       derives from location.
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.update_query_request',
+      eventName: 'Discoverv2: Request to update a saved query',
+      organization_id: organization.id,
+      ...extractAnalyticsQueryFields(payload),
     });
+
+    updateSavedQuery(api, organization.slug, payload)
+      .then(_saved => {
+        addSuccessMessage(t('Query updated'));
+
+        trackAnalyticsEvent({
+          eventKey: 'discover_v2.update_query_success',
+          eventName: 'Discoverv2: Successfully updated a saved query',
+          organization_id: organization.id,
+          ...extractAnalyticsQueryFields(payload),
+        });
+        // NOTE: there is no need to convert _saved into an EventView and push it
+        //       to the browser history, since this.props.eventView already
+        //       derives from location.
+      })
+      .catch((err: Error) => {
+        trackAnalyticsEvent({
+          eventKey: 'discover_v2.update_query_failed',
+          eventName: 'Discoverv2: Failed to update a saved query',
+          organization_id: organization.id,
+          ...extractAnalyticsQueryFields(payload),
+          error: (err && err.message) || 'Failed to update a query',
+        });
+      });
   };
 
   isQueryModified = (): boolean => {
