commit 9c1e6e8f835fce0851009ce1cf5e5b7594d1ffdb
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 17 12:59:28 2015 -0800

    Add is:assigned and is:unassigned to search api

diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 4213a42b80..c700dd2f48 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -23,8 +23,8 @@ class SearchBackend(object):
 
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, assigned_to=None, first_release=None,
-              sort_by='date', date_filter='last_seen', date_from=None,
-              date_to=None, cursor=None, limit=100):
+              sort_by='date', date_filter='last_seen', unassigned=None,
+              date_from=None, date_to=None, cursor=None, limit=100):
         """
         The return value should be a CursorResult.
 
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 760455a8b5..af3fb8a640 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -22,8 +22,8 @@ from sentry.utils.db import get_db_engine
 class DjangoSearchBackend(SearchBackend):
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, assigned_to=None, first_release=None,
-              sort_by='date', date_filter='last_seen', date_from=None,
-              date_to=None, cursor=None, limit=100):
+              sort_by='date', date_filter='last_seen', unassigned=None,
+              date_from=None, date_to=None, cursor=None, limit=100):
         from sentry.models import Group, GroupStatus
 
         queryset = Group.objects.filter(project=project)
@@ -59,6 +59,10 @@ class DjangoSearchBackend(SearchBackend):
                 assignee_set__project=project,
                 assignee_set__user=assigned_to,
             )
+        elif unassigned in (True, False):
+            queryset = queryset.filter(
+                assignee_set__isnull=unassigned,
+            )
 
         if first_release:
             queryset = queryset.filter(
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 28a7cb2be0..e7b0c46929 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -78,10 +78,15 @@ def parse_query(project, query, user):
             if key == 'query':
                 results['query'].append(value)
             elif key == 'is':
-                try:
-                    results['status'] = STATUS_CHOICES[value]
-                except KeyError:
-                    pass
+                if value == 'unassigned':
+                    results['unassigned'] = True
+                elif value == 'assigned':
+                    results['unassigned'] = False
+                else:
+                    try:
+                        results['status'] = STATUS_CHOICES[value]
+                    except KeyError:
+                        pass
             elif key == 'assigned':
                 if value == 'me':
                     results['assigned_to'] = user
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index 2c641450ba..ae88aef195 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -25,7 +25,9 @@ const StreamTagStore = Reflux.createStore({
         values: [
           'resolved',
           'unresolved',
-          'muted'
+          'muted',
+          'assigned',
+          'unassigned'
         ],
         predefined: true
       },
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index b34cff42a9..92a2481b8e 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -65,7 +65,7 @@ const SearchBar = React.createClass({
         {
           title: t('Status'),
           desc: t('State of an event'),
-          example: 'is:resolved, unresolved, muted',
+          example: 'is:resolved, unresolved, muted, assigned, unassigned',
           className: 'icon-toggle',
           value: 'is:'
         },
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index 36d929530a..eb7a9014be 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -4,7 +4,7 @@ from __future__ import absolute_import
 
 from datetime import datetime, timedelta
 
-from sentry.models import GroupBookmark, GroupStatus, GroupTagValue
+from sentry.models import GroupAssignee, GroupBookmark, GroupStatus, GroupTagValue
 from sentry.search.django.backend import DjangoSearchBackend
 from sentry.testutils import TestCase
 
@@ -75,6 +75,12 @@ class DjangoSearchBackendTest(TestCase):
             project=self.group2.project,
         )
 
+        GroupAssignee.objects.create(
+            user=self.user,
+            group=self.group2,
+            project=self.group2.project,
+        )
+
     def test_query(self):
         results = self.backend.query(self.project1, query='foo')
         assert len(results) == 1
@@ -182,3 +188,17 @@ class DjangoSearchBackendTest(TestCase):
         )
         assert len(results) == 1
         assert results[0] == self.group2
+
+    def test_unassigned(self):
+        results = self.backend.query(self.project1, unassigned=True)
+        assert len(results) == 1
+        assert results[0] == self.group1
+
+        results = self.backend.query(self.project1, unassigned=False)
+        assert len(results) == 1
+        assert results[0] == self.group2
+
+    def test_assigned_to(self):
+        results = self.backend.query(self.project1, assigned_to=self.user)
+        assert len(results) == 1
+        assert results[0] == self.group2
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index db4fea24ff..437461134d 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -98,3 +98,11 @@ class ParseQueryTest(TestCase):
         )
         result = self.parse_query('user:username:foobar')
         assert result['tags']['sentry:user'] == euser.tag_value
+
+    def test_is_unassigned(self):
+        result = self.parse_query('is:unassigned')
+        assert result == {'unassigned': True, 'tags': {}, 'query': ''}
+
+    def test_is_assigned(self):
+        result = self.parse_query('is:assigned')
+        assert result == {'unassigned': False, 'tags': {}, 'query': ''}
