commit 0f45ba4d8fb4daf3b61f8bd09ee45b771600ddac
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Oct 9 11:44:07 2018 -0700

    feat(discover): Calculate row heights (#10033)
    
    Calculate row heights dynamically based on content of cells in that row.
    Max row height is 3 rows of text.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
index 81689c8de6..8da8b0b4a9 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
@@ -12,7 +12,14 @@ import InlineSvg from 'app/components/inlineSvg';
 import Panel from 'app/components/panels/panel';
 import {getDisplayValue, getDisplayText} from './utils';
 
-const TABLE_ROW_HEIGHT = 41; // Includes 1px for border
+const TABLE_ROW_HEIGHT = 30;
+const TABLE_ROW_BORDER = 1;
+const TABLE_ROW_HEIGHT_WITH_BORDER = TABLE_ROW_HEIGHT + TABLE_ROW_BORDER;
+const MIN_COL_WIDTH = 100;
+const MAX_COL_WIDTH = 500;
+const LINK_COL_WIDTH = 40;
+const CELL_PADDING = 20;
+const VISIBLE_ROWS = 12;
 
 /**
  * Renders results in a table as well as a query summary (timing, rows returned)
@@ -92,10 +99,6 @@ export default class ResultTable extends React.Component {
   // less than 20 columns of data to check.
   // Adds an empty column at the end with the remaining table width if any.
   getColumnWidths = tableWidth => {
-    const MIN_COL_WIDTH = 100;
-    const MAX_COL_WIDTH = 400;
-    const LINK_COL_WIDTH = 40;
-
     const {query, data: {data}} = this.props;
     const cols = this.getColumnList();
 
@@ -115,7 +118,7 @@ export default class ResultTable extends React.Component {
 
         // Ensure size is within max and min bounds, add 20px for cell padding
         const width = Math.max(
-          Math.min(Math.max(...sizes) + 20, MAX_COL_WIDTH),
+          Math.min(Math.max(...sizes) + CELL_PADDING, MAX_COL_WIDTH),
           MIN_COL_WIDTH
         );
 
@@ -139,6 +142,29 @@ export default class ResultTable extends React.Component {
     return widths;
   };
 
+  getRowHeight = (rowIndex, columnsToCheck) => {
+    const {data: {data}} = this.props;
+
+    if (rowIndex === 0) {
+      return TABLE_ROW_HEIGHT_WITH_BORDER;
+    }
+
+    const row = data[rowIndex - 1]; // -1 offset due to header row
+    const colWidths = columnsToCheck.map(col => {
+      return this.measureText(getDisplayText(row[col]), false);
+    });
+    const maxColWidth = Math.max(...colWidths, 0);
+
+    // Number of rows to be rendered based on text content divided by cell width
+    // Apply a min of 1 and max of 3
+    const rows = Math.max(
+      Math.min(Math.ceil(maxColWidth / (MAX_COL_WIDTH - CELL_PADDING)), 3),
+      1
+    );
+
+    return TABLE_ROW_HEIGHT * rows + TABLE_ROW_BORDER;
+  };
+
   getColumnList = () => {
     const {query, data: {meta}} = this.props;
 
@@ -172,13 +198,24 @@ export default class ResultTable extends React.Component {
     // Add one column at the end to make sure table spans full width
     const colCount = cols.length + (showEventLinks ? 1 : 0) + 1;
 
-    const maxVisibleResults = Math.min(data.length, 10);
+    const maxVisibleResults = Math.min(data.length, VISIBLE_ROWS);
 
     return (
       <GridContainer visibleRows={maxVisibleResults + 1}>
         <AutoSizer>
           {({width, height}) => {
             const columnWidths = this.getColumnWidths(width);
+
+            // Since calculating row height might be expensive, we'll only
+            // perform the check against a subset of columns (where col width
+            // has exceeded the max value)
+            const columnsToCheck = columnWidths.reduce((acc, colWidth, idx) => {
+              if (colWidth === MAX_COL_WIDTH) {
+                acc.push(cols[idx].name);
+              }
+              return acc;
+            }, []);
+
             return (
               <MultiGrid
                 ref={ref => (this.grid = ref)}
@@ -187,7 +224,7 @@ export default class ResultTable extends React.Component {
                 rowCount={data.length + 1}
                 columnCount={colCount}
                 fixedRowCount={1}
-                rowHeight={TABLE_ROW_HEIGHT}
+                rowHeight={({index}) => this.getRowHeight(index, columnsToCheck)}
                 columnWidth={({index}) => columnWidths[index]}
                 cellRenderer={this.cellRenderer}
               />
@@ -211,7 +248,7 @@ export default class ResultTable extends React.Component {
 
 const GridContainer = styled(({visibleRows, ...props}) => <Panel {...props} />)`
   height: ${p =>
-    p.visibleRows * TABLE_ROW_HEIGHT +
+    p.visibleRows * TABLE_ROW_HEIGHT_WITH_BORDER +
     2}px; /* cell height + cell border + top and bottom Panel border */
   overflow: hidden;
 
@@ -224,7 +261,7 @@ const Cell = styled('div')`
   ${p => !p.isOddRow && `background-color: ${p.theme.whiteDark};`} ${p =>
       `text-align: ${p.align};`} overflow: scroll;
   font-size: 14px;
-  line-height: 40px;
+  line-height: ${TABLE_ROW_HEIGHT}px;
   padding: 0 10px;
   border-top: 1px solid ${p => p.theme.borderLight};
 
diff --git a/tests/js/spec/views/organizationDiscover/result/table.spec.jsx b/tests/js/spec/views/organizationDiscover/result/table.spec.jsx
index f4d3cfd535..ca041ec0dd 100644
--- a/tests/js/spec/views/organizationDiscover/result/table.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/table.spec.jsx
@@ -32,4 +32,36 @@ describe('ResultTable', function() {
     const widths = wrapper.instance().getColumnWidths(500);
     expect(widths).toEqual([341, 40, 117]);
   });
+
+  it('getRowHeight()', function() {
+    const mockCanvas = {
+      getContext: () => ({
+        measureText: text => {
+          const lengths = {
+            '"long-text"': 3000,
+            '"medium-text"': 600,
+            '"short-text"': 200,
+          };
+          return {width: lengths[text] || 300};
+        },
+      }),
+    };
+
+    const columnsToCheck = ['col1'];
+
+    wrapper.instance().canvas = mockCanvas;
+
+    wrapper.setProps({
+      data: {
+        data: [{col1: 'short-text'}, {col1: 'medium-text'}, {col1: 'long-text'}],
+        meta: [{name: 'col1'}],
+      },
+      query: {fields: ['col1'], aggregations: []},
+    });
+
+    expect(wrapper.instance().getRowHeight(0, columnsToCheck)).toBe(31);
+    expect(wrapper.instance().getRowHeight(1, columnsToCheck)).toBe(31);
+    expect(wrapper.instance().getRowHeight(2, columnsToCheck)).toBe(61);
+    expect(wrapper.instance().getRowHeight(3, columnsToCheck)).toBe(91);
+  });
 });
