commit 63536d15adc9401d4f137e3f40922c746210935c
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 11 19:03:26 2014 -0700

    Cleanup to group usage
    
    - Add GroupStatus
    - Refactor delete/update endpoints
    
    cherry-pick 2cc85a5bceb03b70db0044f41cbeef23dd1d7fc4

diff --git a/src/sentry/api/endpoints/group_delete.py b/src/sentry/api/endpoints/group_delete.py
deleted file mode 100644
index 2a0c4b07b4..0000000000
--- a/src/sentry/api/endpoints/group_delete.py
+++ /dev/null
@@ -1,20 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
-from sentry.models import Group
-
-from rest_framework.response import Response
-
-
-class GroupDeleteEndpoint(Endpoint):
-    def post(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
-        group.delete()
-
-        return Response()
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index d76790d5fe..821b0298dd 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -1,14 +1,36 @@
-from __future__ import absolute_import
+from __future__ import absolute_import, print_function
 
+from django.utils import timezone
+from rest_framework import serializers
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.base import DocSection, Endpoint
 from sentry.api.permissions import assert_perm
+from sentry.api.fields import UserField
 from sentry.api.serializers import serialize
-from sentry.models import Activity, Group, GroupSeen
+from sentry.db.models.query import create_or_update
+from sentry.models import (
+    Activity, Group, GroupAssignee, GroupBookmark, GroupSeen, GroupStatus
+)
+
+STATUS_CHOICES = {
+    'resolved': GroupStatus.RESOLVED,
+    'unresolved': GroupStatus.UNRESOLVED,
+    'muted': GroupStatus.MUTED,
+}
+
+
+class GroupSerializer(serializers.Serializer):
+    status = serializers.ChoiceField(choices=zip(
+        STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
+    ))
+    isBookmarked = serializers.BooleanField()
+    assignedTo = UserField()
 
 
 class GroupDetailsEndpoint(Endpoint):
+    doc_section = DocSection.EVENTS
+
     def _get_activity(self, request, group, num=7):
         activity_items = set()
         activity = []
@@ -63,3 +85,122 @@ class GroupDetailsEndpoint(Endpoint):
         })
 
         return Response(data)
+
+    def put(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user, request.auth)
+
+        serializer = GroupSerializer(data=request.DATA, partial=True)
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.object
+
+        if result.get('assignedTo') and not group.project.has_access(result['assignedTo']):
+            return Response(status=400)
+
+        if result.get('status') == 'resolved':
+            now = timezone.now()
+
+            group.resolved_at = now
+            group.status = GroupStatus.RESOLVED
+
+            happened = Group.objects.filter(
+                id=group.id,
+            ).exclude(status=GroupStatus.RESOLVED).update(
+                status=GroupStatus.RESOLVED,
+                resolved_at=now,
+            )
+
+            if happened:
+                create_or_update(
+                    Activity,
+                    project=group.project,
+                    group=group,
+                    type=Activity.SET_RESOLVED,
+                    user=request.user,
+                )
+        elif result.get('status'):
+            group.status = STATUS_CHOICES[result['status']]
+            group.save()
+
+        if result.get('isBookmarked'):
+            GroupBookmark.objects.get_or_create(
+                project=group.project,
+                group=group,
+                user=request.user,
+            )
+        elif result.get('isBookmarked') is False:
+            GroupBookmark.objects.filter(
+                group=group,
+                user=request.user,
+            ).delete()
+
+        if 'assignedTo' in result:
+            now = timezone.now()
+
+            if result['assignedTo']:
+                assignee, created = GroupAssignee.objects.get_or_create(
+                    group=group,
+                    defaults={
+                        'project': group.project,
+                        'user': result['assignedTo'],
+                        'date_added': now,
+                    }
+                )
+
+                if not created:
+                    affected = GroupAssignee.objects.filter(
+                        group=group,
+                    ).exclude(
+                        user=result['assignedTo'],
+                    ).update(
+                        user=result['assignedTo'],
+                        date_added=now
+                    )
+                else:
+                    affected = True
+
+                if affected:
+                    create_or_update(
+                        Activity,
+                        project=group.project,
+                        group=group,
+                        type=Activity.ASSIGNED,
+                        user=request.user,
+                        data={
+                            'assignee': result['assignedTo'].id,
+                        }
+                    )
+
+            else:
+                affected = GroupAssignee.objects.filter(
+                    group=group,
+                ).delete()
+
+                if affected:
+                    create_or_update(
+                        Activity,
+                        project=group.project,
+                        group=group,
+                        type=Activity.UNASSIGNED,
+                        user=request.user,
+                    )
+
+        return Response(serialize(group, request.user))
+
+    def delete(self, request, group_id):
+        from sentry.tasks.deletion import delete_group
+
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user, request.auth)
+
+        delete_group.delay(object_id=group.id)
+
+        return Response(status=202)
diff --git a/src/sentry/api/fields/__init__.py b/src/sentry/api/fields/__init__.py
new file mode 100644
index 0000000000..95f423c00b
--- /dev/null
+++ b/src/sentry/api/fields/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+from .user import *  # NOQA
diff --git a/src/sentry/api/fields/user.py b/src/sentry/api/fields/user.py
new file mode 100644
index 0000000000..2ff62c5706
--- /dev/null
+++ b/src/sentry/api/fields/user.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import, print_function
+
+from rest_framework import serializers
+
+from sentry.models import User
+from sentry.utils.auth import find_users
+
+
+class UserField(serializers.WritableField):
+    def to_native(self, obj):
+        return obj.username
+
+    def from_native(self, data):
+        if not data:
+            return None
+
+        if data.isdigit():
+            try:
+                return User.objects.get(id=data)
+            except User.DoesNotExist:
+                pass
+
+        try:
+            return find_users(data)[0]
+        except IndexError:
+            raise serializers.ValidationError('Unable to find user')
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index c58fbc7ad2..e40f855e80 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -10,7 +10,6 @@ from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_resolve import GroupResolveEndpoint
 from .endpoints.group_bookmark import GroupBookmarkEndpoint
 from .endpoints.group_markseen import GroupMarkSeenEndpoint
-from .endpoints.group_delete import GroupDeleteEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
 from .endpoints.group_notes import GroupNotesEndpoint
@@ -110,9 +109,6 @@ urlpatterns = patterns(
     url(r'^groups/(?P<group_id>\d+)/markseen/$',
         GroupMarkSeenEndpoint.as_view(),
         name='sentry-api-0-group-markseen'),
-    url(r'^groups/(?P<group_id>\d+)/delete/$',
-        GroupDeleteEndpoint.as_view(),
-        name='sentry-api-0-group-delete'),
     url(r'^groups/(?P<group_id>\d+)/events/$',
         GroupEventsEndpoint.as_view(),
         name='sentry-api-0-group-events'),
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 900a1dcce3..0baf201408 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -20,17 +20,23 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.app import buffer, tsdb
 from sentry.constants import (
-    LOG_LEVELS, STATUS_LEVELS, MAX_CULPRIT_LENGTH, STATUS_RESOLVED,
-    STATUS_UNRESOLVED, STATUS_MUTED, MAX_TAG_VALUE_LENGTH
+    LOG_LEVELS, MAX_CULPRIT_LENGTH, MAX_TAG_VALUE_LENGTH
 )
 from sentry.db.models import (
-    BaseManager, BoundedIntegerField, BoundedPositiveIntegerField,
-    Model, GzippedDictField, sane_repr
+    BaseManager, BoundedIntegerField, BoundedPositiveIntegerField, Model,
+    GzippedDictField, sane_repr
 )
 from sentry.utils.http import absolute_uri
 from sentry.utils.strings import truncatechars, strip
 
 
+# TODO(dcramer): pull in enum library
+class GroupStatus(object):
+    UNRESOLVED = 0
+    RESOLVED = 1
+    MUTED = 2
+
+
 class GroupManager(BaseManager):
     use_for_related_fields = True
 
@@ -114,8 +120,11 @@ class Group(Model):
     checksum = models.CharField(max_length=32, db_index=True)
     num_comments = BoundedPositiveIntegerField(default=0, null=True)
     platform = models.CharField(max_length=64, null=True)
-    status = BoundedPositiveIntegerField(
-        default=0, choices=STATUS_LEVELS, db_index=True)
+    status = BoundedPositiveIntegerField(default=0, choices=(
+        (GroupStatus.UNRESOLVED, _('Unresolved')),
+        (GroupStatus.RESOLVED, _('Resolved')),
+        (GroupStatus.MUTED, _('Muted')),
+    ), db_index=True)
     times_seen = BoundedPositiveIntegerField(default=1, db_index=True)
     last_seen = models.DateTimeField(default=timezone.now, db_index=True)
     first_seen = models.DateTimeField(default=timezone.now, db_index=True)
@@ -177,14 +186,14 @@ class Group(Model):
         return self.last_seen < timezone.now() - timedelta(hours=int(resolve_age))
 
     def is_muted(self):
-        return self.get_status() == STATUS_MUTED
+        return self.get_status() == GroupStatus.MUTED
 
     def is_resolved(self):
-        return self.get_status() == STATUS_RESOLVED
+        return self.get_status() == GroupStatus.RESOLVED
 
     def get_status(self):
-        if self.status == STATUS_UNRESOLVED and self.is_over_resolve_age():
-            return STATUS_RESOLVED
+        if self.status == GroupStatus.UNRESOLVED and self.is_over_resolve_age():
+            return GroupStatus.RESOLVED
         return self.status
 
     def get_score(self):
diff --git a/tests/sentry/api/endpoints/test_group_delete.py b/tests/sentry/api/endpoints/test_group_delete.py
deleted file mode 100644
index 42d120f927..0000000000
--- a/tests/sentry/api/endpoints/test_group_delete.py
+++ /dev/null
@@ -1,21 +0,0 @@
-from django.core.urlresolvers import reverse
-
-from sentry.models import Group
-from sentry.testutils import APITestCase
-
-
-class GroupDeleteTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-
-        url = reverse('sentry-api-0-group-delete', kwargs={
-            'group_id': group.id
-        })
-        response = self.client.post(url, format='json')
-
-        assert response.status_code == 200, response.content
-
-        group = Group.objects.filter(id=group.id).exists()
-        assert not group
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index eb513eb0d8..3522ddc228 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -1,4 +1,10 @@
+from __future__ import absolute_import, print_function
+
 from django.core.urlresolvers import reverse
+
+from sentry.models import (
+    Activity, Group, GroupAssignee, GroupBookmark, GroupStatus
+)
 from sentry.testutils import APITestCase
 
 
@@ -15,3 +21,100 @@ class GroupDetailsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert response.data['id'] == str(group.id)
+
+
+class GroupUpdateTest(APITestCase):
+    def test_resolve(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-details', kwargs={
+            'group_id': group.id,
+        })
+        response = self.client.put(url, data={
+            'status': 'resolved',
+        }, format='json')
+        assert response.status_code == 200, response.content
+
+        group = Group.objects.get(
+            id=group.id,
+            project=group.project.id,
+        )
+        assert group.status == GroupStatus.RESOLVED
+
+    def test_bookmark(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-details', kwargs={
+            'group_id': group.id
+        })
+        response = self.client.put(url, data={
+            'isBookmarked': '1',
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+
+        # ensure we've created the bookmark
+        assert GroupBookmark.objects.filter(
+            group=group, user=self.user).exists()
+
+    def test_assign(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-details', kwargs={
+            'group_id': group.id
+        })
+        response = self.client.put(url, data={
+            'assignedTo': self.user.username,
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert GroupAssignee.objects.filter(
+            group=group, user=self.user
+        ).exists()
+
+        assert Activity.objects.filter(
+            group=group, user=self.user, type=Activity.ASSIGNED,
+        ).count() == 1
+
+        response = self.client.put(url, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert GroupAssignee.objects.filter(
+            group=group, user=self.user
+        ).exists()
+
+        response = self.client.put(url, data={
+            'assignedTo': '',
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert not GroupAssignee.objects.filter(
+            group=group, user=self.user
+        ).exists()
+
+
+class GroupDeleteTest(APITestCase):
+    def test_delete(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-details', kwargs={
+            'group_id': group.id
+        })
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            response = self.client.delete(url, format='json')
+
+        assert response.status_code == 202, response.content
+
+        group = Group.objects.filter(id=group.id).exists()
+        assert not group
