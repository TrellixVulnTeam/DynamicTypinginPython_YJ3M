commit 76f299b30b9894717581705f6c95cb393f8a9e7c
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Fri Oct 18 14:29:17 2019 -0700

    feat(api): Allow invite requests to be approved (#15099)

diff --git a/src/sentry/api/endpoints/organization_invite_request_details.py b/src/sentry/api/endpoints/organization_invite_request_details.py
index a3f32a0661..b7d34a5634 100644
--- a/src/sentry/api/endpoints/organization_invite_request_details.py
+++ b/src/sentry/api/endpoints/organization_invite_request_details.py
@@ -1,14 +1,194 @@
 from __future__ import absolute_import
 
+from django.db.models import Q
+from django.conf import settings
+from rest_framework import serializers, status
+from rest_framework.response import Response
 
-from sentry.api.bases.organization import OrganizationEndpoint
+from sentry import roles, features
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationPermission
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize, OrganizationMemberWithTeamsSerializer
+from sentry.models import AuditLogEntryEvent, InviteStatus, OrganizationMember
+from sentry.signals import member_invited
+
+from .organization_member_details import get_allowed_roles
+from .organization_member_index import OrganizationMemberSerializer, save_team_assignments
+
+ERR_CANNOT_INVITE = "Your organization is not allowed to invite members."
+ERR_INSUFFICIENT_ROLE = "You do not have permission to invite that role."
+ERR_JOIN_REQUESTS_DISABLED = "Your organization does not allow requests to join."
+
+
+class ApproveInviteRequestSerializer(serializers.Serializer):
+    approve = serializers.BooleanField(required=True, write_only=True)
+
+    def validate_approve(self, approve):
+        request = self.context["request"]
+        organization = self.context["organization"]
+        member = self.context["member"]
+        allowed_roles = self.context["allowed_roles"]
+
+        if not features.has("organizations:invite-members", organization, actor=request.user):
+            raise serializers.ValidationError(ERR_CANNOT_INVITE)
+
+        if (
+            organization.get_option("sentry:join_requests") is False
+            and member.invite_status == InviteStatus.REQUESTED_TO_JOIN.value
+        ):
+            raise serializers.ValidationError(ERR_JOIN_REQUESTS_DISABLED)
+
+        # members cannot invite roles higher than their own
+        if member.role not in {r.id for r in allowed_roles}:
+            raise serializers.ValidationError(ERR_INSUFFICIENT_ROLE)
+
+        return approve
+
+
+class InviteRequestPermissions(OrganizationPermission):
+    scope_map = {
+        "GET": ["member:read", "member:write", "member:admin"],
+        "PUT": ["member:write", "member:admin"],
+        "DELETE": ["member:admin"],
+    }
 
 
 class OrganizationInviteRequestDetailsEndpoint(OrganizationEndpoint):
-    def get(self, request, organization):
-        # TODO(epurkhiser): Add listing of invite requests
-        pass
+    permission_classes = (InviteRequestPermissions,)
+
+    def _get_member(self, organization, member_id):
+        try:
+            return OrganizationMember.objects.get(
+                Q(invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value)
+                | Q(invite_status=InviteStatus.REQUESTED_TO_JOIN.value),
+                organization=organization,
+                user__isnull=True,
+                id=member_id,
+            )
+        except ValueError:
+            raise OrganizationMember.DoesNotExist()
+
+    def get(self, request, organization, member_id):
+        try:
+            member = self._get_member(organization, member_id)
+        except OrganizationMember.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return Response(
+            serialize(member, serializer=OrganizationMemberWithTeamsSerializer()),
+            status=status.HTTP_200_OK,
+        )
+
+    def put(self, request, organization, member_id):
+        """
+        Update an invite request to Organization
+        ````````````````````````````````````````
+
+        Update and/or approve an invite request to an organization.
+
+        :pparam string organization_slug: the slug of the organization the member will belong to
+        :param string member_id: the member ID
+        :param boolean approve: allows the member to be invited
+        :param string role: the suggested role of the new member
+        :param array teams: the suggested slugs of the teams the member should belong to.
+
+        :auth: required
+        """
+
+        try:
+            member = self._get_member(organization, member_id)
+        except OrganizationMember.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = OrganizationMemberSerializer(
+            data=request.data,
+            context={"organization": organization, "allowed_roles": roles.get_all()},
+            partial=True,
+        )
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+        result = serializer.validated_data
+
+        if result.get("role"):
+            member.update(role=result["role"])
+
+        if "teams" in result:
+            save_team_assignments(member, result["teams"])
+
+        if "approve" in request.data:
+            _, allowed_roles = get_allowed_roles(request, organization)
+
+            serializer = ApproveInviteRequestSerializer(
+                data=request.data,
+                context={
+                    "request": request,
+                    "organization": organization,
+                    "member": member,
+                    "allowed_roles": allowed_roles,
+                },
+            )
+
+            if not serializer.is_valid():
+                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+            result = serializer.validated_data
+
+            if result.get("approve") and not member.invite_approved:
+                member.approve_invite()
+                member.save()
+
+                if settings.SENTRY_ENABLE_INVITES:
+                    member.send_invite_email()
+                    member_invited.send_robust(
+                        member=member,
+                        user=request.user,
+                        sender=self,
+                        referrer=request.data.get("referrer"),
+                    )
+
+                self.create_audit_entry(
+                    request=request,
+                    organization_id=organization.id,
+                    target_object=member.id,
+                    data=member.get_audit_log_data(),
+                    event=AuditLogEntryEvent.MEMBER_INVITE
+                    if settings.SENTRY_ENABLE_INVITES
+                    else AuditLogEntryEvent.MEMBER_ADD,
+                )
+
+        return Response(
+            serialize(member, serializer=OrganizationMemberWithTeamsSerializer()),
+            status=status.HTTP_200_OK,
+        )
+
+    def delete(self, request, organization, member_id):
+        """
+        Delete an invite request to Organization
+        ````````````````````````````````````````
+
+        Delete an invite request to an organization.
+
+        :pparam string organization_slug: the slug of the organization the member would belong to
+        :param string member_id: the member ID
+
+        :auth: required
+        """
+
+        try:
+            member = self._get_member(organization, member_id)
+        except OrganizationMember.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        member.delete()
+
+        self.create_audit_entry(
+            request=request,
+            organization_id=organization.id,
+            target_object=member.id,
+            data=member.get_audit_log_data(),
+            event=AuditLogEntryEvent.INVITE_REQUEST_REMOVE,
+        )
 
-    def put(self, request, organization):
-        # TODO(epurkhiser): Handle accepting invite
-        pass
+        return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/api/endpoints/organization_invite_request_index.py b/src/sentry/api/endpoints/organization_invite_request_index.py
index 5cf0dc8990..7f95f93955 100644
--- a/src/sentry/api/endpoints/organization_invite_request_index.py
+++ b/src/sentry/api/endpoints/organization_invite_request_index.py
@@ -1,12 +1,14 @@
 from __future__ import absolute_import
 
 from django.db import transaction
+from django.db.models import Q
 from rest_framework.response import Response
 
-from sentry.app import locks
 from sentry import roles, features
+from sentry.app import locks
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationPermission
-from sentry.api.serializers import serialize
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize, OrganizationMemberWithTeamsSerializer
 from sentry.models import AuditLogEntryEvent, OrganizationMember, InviteStatus
 from sentry.utils.retries import TimedRetryPolicy
 
@@ -24,8 +26,21 @@ class OrganizationInviteRequestIndexEndpoint(OrganizationEndpoint):
     permission_classes = (InviteRequestPermissions,)
 
     def get(self, request, organization):
-        # TODO(epurkhiser): Add listing of invite requests
-        pass
+        queryset = OrganizationMember.objects.filter(
+            Q(user__isnull=True),
+            Q(invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value)
+            | Q(invite_status=InviteStatus.REQUESTED_TO_JOIN.value),
+            organization=organization,
+        ).order_by("invite_status", "email")
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            on_results=lambda x: serialize(
+                x, request.user, OrganizationMemberWithTeamsSerializer()
+            ),
+            paginator_cls=OffsetPaginator,
+        )
 
     def post(self, request, organization):
         """
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index 8236bff06e..e39ace7186 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -33,6 +33,7 @@ class OrganizationMemberSerializer(Serializer):
                 "sso:invalid": bool(getattr(obj.flags, "sso:invalid")),
             },
             "dateCreated": obj.date_added,
+            "inviteStatus": obj.get_invite_status_name(),
         }
         return d
 
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index 842b735558..dc61ec515d 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -95,6 +95,7 @@ class AuditLogEntryEvent(object):
     INTERNAL_INTEGRATION_REMOVE_TOKEN = 136
 
     INVITE_REQUEST_ADD = 140
+    INVITE_REQUEST_REMOVE = 141
 
 
 class AuditLogEntry(Model):
@@ -177,6 +178,7 @@ class AuditLogEntry(Model):
             (AuditLogEntryEvent.PLAN_CHANGED, "plan.changed"),
             (AuditLogEntryEvent.PLAN_CANCELLED, "plan.cancelled"),
             (AuditLogEntryEvent.INVITE_REQUEST_ADD, "invite-request.create"),
+            (AuditLogEntryEvent.INVITE_REQUEST_REMOVE, "invite-request.remove"),
         )
     )
     ip_address = models.GenericIPAddressField(null=True, unpack_ipv4=True)
@@ -377,5 +379,7 @@ class AuditLogEntry(Model):
             return "revoked a token for internal integration %s" % (self.data["sentry_app"])
         elif self.event == AuditLogEntryEvent.INVITE_REQUEST_ADD:
             return "request added to invite %s" % (self.data["email"],)
+        elif self.event == AuditLogEntryEvent.INVITE_REQUEST_REMOVE:
+            return "removed the invite request for %s" % (self.data["email"],)
 
         return ""
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index ee7f45fd49..522724ff56 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -156,6 +156,15 @@ class OrganizationMember(Model):
         now = timezone.now()
         self.token_expires_at = now + timedelta(days=INVITE_DAYS_VALID)
 
+    def approve_invite(self):
+        self.invite_status = InviteStatus.APPROVED.value
+        self.regenerate_token()
+
+    def get_invite_status_name(self):
+        if self.invite_status is None:
+            return
+        return invite_status_names[self.invite_status]
+
     @property
     def invite_approved(self):
         return self.invite_status == InviteStatus.APPROVED.value
diff --git a/tests/sentry/api/endpoints/test_organization_invite_request_details.py b/tests/sentry/api/endpoints/test_organization_invite_request_details.py
new file mode 100644
index 0000000000..98dcb7146f
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_invite_request_details.py
@@ -0,0 +1,289 @@
+from __future__ import absolute_import
+
+from exam import fixture
+from mock import patch
+
+from sentry.models import (
+    AuditLogEntry,
+    AuditLogEntryEvent,
+    OrganizationMember,
+    OrganizationMemberTeam,
+    OrganizationOption,
+    InviteStatus,
+)
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import Feature
+
+
+class InviteRequestBase(APITestCase):
+    endpoint = "sentry-api-0-organization-invite-request-detail"
+
+    @fixture
+    def org(self):
+        return self.create_organization(owner=self.user)
+
+    @fixture
+    def team(self):
+        return self.create_team(organization=self.org)
+
+    @fixture
+    def member(self):
+        return self.create_member(organization=self.org, user=self.create_user(), role="member")
+
+    @fixture
+    def manager(self):
+        return self.create_member(organization=self.org, user=self.create_user(), role="manager")
+
+    @fixture
+    def invite_request(self):
+        return self.create_member(
+            email="test@example.com",
+            organization=self.org,
+            role="owner",
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+
+    @fixture
+    def request_to_join(self):
+        return self.create_member(
+            email="example@gmail.com",
+            organization=self.org,
+            role="member",
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+
+
+class OrganizationInviteRequestGetTest(InviteRequestBase):
+    def test_get_invalid(self):
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, "123")
+        assert resp.status_code == 404
+
+    def test_get_invite_request(self):
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id)
+
+        assert resp.status_code == 200
+        assert resp.data["email"] == self.invite_request.email
+        assert resp.data["inviteStatus"] == "requested_to_be_invited"
+        assert resp.data["teams"] == []
+
+        resp = self.get_response(self.org.slug, self.request_to_join.id)
+
+        assert resp.status_code == 200
+        assert resp.data["email"] == self.request_to_join.email
+        assert resp.data["inviteStatus"] == "requested_to_join"
+        assert resp.data["teams"] == []
+
+
+class OrganizationInviteRequestDeleteTest(InviteRequestBase):
+    method = "delete"
+
+    def test_owner_can_delete_invite_request(self):
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id)
+
+        assert resp.status_code == 204
+        assert not OrganizationMember.objects.filter(id=self.invite_request.id).exists()
+
+        audit_log = AuditLogEntry.objects.get(
+            organization=self.org, actor=self.user, event=AuditLogEntryEvent.INVITE_REQUEST_REMOVE
+        )
+        assert audit_log.data == self.invite_request.get_audit_log_data()
+
+    def test_member_cannot_delete_invite_request(self):
+        self.login_as(user=self.member.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id)
+
+        assert resp.status_code == 403
+        assert OrganizationMember.objects.filter(id=self.invite_request.id).exists()
+
+
+class OrganizationInviteRequestUpdateTest(InviteRequestBase):
+    method = "put"
+
+    def test_owner_can_update_role(self):
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id, role="admin")
+
+        assert resp.status_code == 200
+        assert resp.data["role"] == "admin"
+        assert resp.data["inviteStatus"] == "requested_to_be_invited"
+
+        assert OrganizationMember.objects.filter(id=self.invite_request.id, role="admin").exists()
+
+    def test_owner_can_update_teams(self):
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id, teams=[self.team.slug])
+
+        assert resp.status_code == 200
+        assert resp.data["teams"] == [self.team.slug]
+        assert resp.data["inviteStatus"] == "requested_to_be_invited"
+
+        assert OrganizationMemberTeam.objects.filter(
+            organizationmember=self.invite_request.id, team=self.team
+        ).exists()
+
+    def test_teams_with_partial_update(self):
+        OrganizationMemberTeam.objects.create(
+            organizationmember=self.invite_request, team=self.team
+        )
+
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id, role="manager")
+
+        assert resp.status_code == 200
+        assert resp.data["role"] == "manager"
+        assert resp.data["inviteStatus"] == "requested_to_be_invited"
+
+        assert OrganizationMemberTeam.objects.filter(
+            organizationmember=self.invite_request.id, team=self.team
+        ).exists()
+
+    def test_can_remove_teams(self):
+        OrganizationMemberTeam.objects.create(
+            organizationmember=self.invite_request, team=self.team
+        )
+
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id, teams=[])
+
+        assert resp.status_code == 200
+        assert resp.data["inviteStatus"] == "requested_to_be_invited"
+
+        assert not OrganizationMemberTeam.objects.filter(
+            organizationmember=self.invite_request.id, team=self.team
+        ).exists()
+
+    def test_member_cannot_update_invite_request(self):
+        self.login_as(user=self.member.user)
+        resp = self.get_response(self.org.slug, self.request_to_join.id, role="admin")
+        assert resp.status_code == 403
+
+
+class OrganizaitonInviteRequestApproveTest(InviteRequestBase):
+    method = "put"
+
+    @patch.object(OrganizationMember, "send_invite_email")
+    def test_owner_can_approve_invite_request(self, mock_invite_email):
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id, approve=1)
+
+        assert resp.status_code == 200
+        assert resp.data["inviteStatus"] == "approved"
+        assert mock_invite_email.call_count == 1
+
+        audit_log = AuditLogEntry.objects.get(
+            organization=self.org, actor=self.user, event=AuditLogEntryEvent.MEMBER_INVITE
+        )
+        member = OrganizationMember.objects.get(
+            id=self.invite_request.id, invite_status=InviteStatus.APPROVED.value
+        )
+
+        assert audit_log.data == member.get_audit_log_data()
+
+    def test_member_cannot_approve_invite_request(self):
+        self.invite_request.inviter = self.member.user
+        self.invite_request.save()
+
+        self.login_as(user=self.member.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id, approve=1)
+
+        assert resp.status_code == 403
+
+    @patch.object(OrganizationMember, "send_invite_email")
+    def test_approve_requires_invite_members_feature(self, mock_invite_email):
+        self.login_as(user=self.user)
+
+        with Feature({"organizations:invite-members": False}):
+            resp = self.get_response(self.org.slug, self.invite_request.id, approve=1)
+            assert resp.status_code == 400
+            assert mock_invite_email.call_count == 0
+
+    @patch.object(OrganizationMember, "send_invite_email")
+    def test_cannot_approve_join_request_with_disabled_setting(self, mock_invite_email):
+        OrganizationOption.objects.create(
+            organization_id=self.org.id, key="sentry:join_requests", value=False
+        )
+
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.request_to_join.id, approve=1)
+
+        assert resp.status_code == 400
+        assert mock_invite_email.call_count == 0
+
+        # can still approve invite request
+        resp = self.get_response(self.org.slug, self.invite_request.id, approve=1)
+        assert resp.status_code == 200
+
+    @patch.object(OrganizationMember, "send_invite_email")
+    def test_can_approve_join_request_with_enabled_setting(self, mock_invite_email):
+        OrganizationOption.objects.create(
+            organization_id=self.org.id, key="sentry:join_requests", value=True
+        )
+
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug, self.request_to_join.id, approve=1)
+
+        assert resp.status_code == 200
+        assert mock_invite_email.call_count == 1
+
+    @patch.object(OrganizationMember, "send_invite_email")
+    def test_email_not_sent_without_invites_enabled(self, mock_invite_email):
+        self.login_as(user=self.user)
+
+        with self.settings(SENTRY_ENABLE_INVITES=False):
+            resp = self.get_response(self.org.slug, self.invite_request.id, approve=1)
+
+        assert resp.status_code == 200
+        assert mock_invite_email.call_count == 0
+
+        assert OrganizationMember.objects.filter(
+            id=self.invite_request.id, invite_status=InviteStatus.APPROVED.value
+        ).exists()
+
+    @patch.object(OrganizationMember, "send_invite_email")
+    def test_owner_can_update_and_approve(self, mock_invite_email):
+        self.login_as(user=self.user)
+        resp = self.get_response(
+            self.org.slug, self.request_to_join.id, approve=1, role="admin", teams=[self.team.slug]
+        )
+
+        assert resp.status_code == 200
+        assert resp.data["role"] == "admin"
+        assert resp.data["inviteStatus"] == "approved"
+
+        assert OrganizationMember.objects.filter(
+            id=self.request_to_join.id, role="admin", invite_status=InviteStatus.APPROVED.value
+        ).exists()
+
+        assert OrganizationMemberTeam.objects.filter(
+            organizationmember=self.request_to_join.id, team=self.team
+        ).exists()
+
+        assert mock_invite_email.call_count == 1
+
+    @patch.object(OrganizationMember, "send_invite_email")
+    def test_manager_cannot_approve_owner(self, mock_invite_email):
+        self.login_as(user=self.manager.user)
+        resp = self.get_response(self.org.slug, self.invite_request.id, approve=1)
+
+        assert resp.status_code == 400
+        assert OrganizationMember.objects.filter(
+            id=self.invite_request.id,
+            role="owner",
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        ).exists()
+        assert mock_invite_email.call_count == 0
+
+    def test_manager_can_approve_manager(self):
+        self.login_as(user=self.manager.user)
+        invite_request = self.create_member(
+            email="hello@example.com",
+            organization=self.org,
+            role="manager",
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+        resp = self.get_response(self.org.slug, invite_request.id, approve=1)
+
+        assert resp.status_code == 200
diff --git a/tests/sentry/api/endpoints/test_organization_invite_request_index.py b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
index 59d6b036a6..5ddfa90ccc 100644
--- a/tests/sentry/api/endpoints/test_organization_invite_request_index.py
+++ b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
@@ -1,11 +1,45 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
+from exam import fixture
 
 from sentry.testutils import APITestCase
 from sentry.models import OrganizationMember, OrganizationMemberTeam, InviteStatus
 
 
+class OrganizationInviteRequestListTest(APITestCase):
+    endpoint = "sentry-api-0-organization-invite-request-index"
+
+    @fixture
+    def org(self):
+        return self.create_organization(owner=self.user)
+
+    def setUp(self):
+        self.invite_request = self.create_member(
+            email="test@example.com",
+            organization=self.org,
+            role="member",
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+        self.request_to_join = self.create_member(
+            email="example@gmail.com",
+            organization=self.org,
+            role="member",
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+        resp = self.get_response(self.org.slug)
+
+        assert resp.status_code == 200
+        assert len(resp.data) == 2
+        assert resp.data[0]["email"] == self.invite_request.email
+        assert resp.data[0]["inviteStatus"] == "requested_to_be_invited"
+        assert resp.data[1]["email"] == self.request_to_join.email
+        assert resp.data[1]["inviteStatus"] == "requested_to_join"
+
+
 class OrganizationInviteRequestCreateTest(APITestCase):
     def setUp(self):
         self.user = self.create_user("foo@localhost")
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index d63554323b..196ffb4d5c 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -8,7 +8,7 @@ from django.utils import timezone
 from mock import patch
 
 from sentry.auth import manager
-from sentry.models import OrganizationMember, INVITE_DAYS_VALID
+from sentry.models import InviteStatus, OrganizationMember, INVITE_DAYS_VALID
 from sentry.testutils import TestCase
 
 
@@ -172,3 +172,17 @@ class OrganizationMemberTest(TestCase):
         )
         OrganizationMember.delete_expired(timezone.now())
         assert OrganizationMember.objects.get(id=member.id)
+
+    def test_approve_invite(self):
+        organization = self.create_organization()
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            role="member",
+            email="test@example.com",
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+        assert not member.invite_approved
+
+        member.approve_invite()
+        assert member.invite_approved
+        member.invite_status == InviteStatus.APPROVED.value
