commit 41d6d0521553b6c52e28889dd37e26860796413c
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jul 18 14:14:03 2018 -0700

    fix(integrations): Ensure that only one subscription is created per VSTS integration (#9078)
    
    * Added vsts subscription only one per integration change.:
    
    * changed srtucture to subscription and also added tests to ensure it's only created once.

diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index 5ff170fa25..000240b2ea 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -6,6 +6,7 @@ from django import forms
 from django.utils.translation import ugettext as _
 
 from sentry import http
+from sentry.models import Integration as IntegrationModel
 from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.exceptions import ApiError
 from sentry.integrations.vsts.issues import VstsIssueSync
@@ -166,18 +167,14 @@ class VstsIntegrationProvider(IntegrationProvider):
         account = state['account']
         instance = state['instance']
         user = get_user_info(data['access_token'])
-        subscription_id, subscription_secret = self.create_subscription(
-            instance, account['AccountId'], oauth_data)
         scopes = sorted(VSTSIdentityProvider.oauth_scopes)
 
-        return {
+        integration = {
             'name': account['AccountName'],
             'external_id': account['AccountId'],
             'metadata': {
                 'domain_name': instance,
                 'scopes': scopes,
-                'subscription_id': subscription_id,
-                'subscription_secret': subscription_secret,
             },
             'user_identity': {
                 'type': 'vsts',
@@ -187,6 +184,18 @@ class VstsIntegrationProvider(IntegrationProvider):
             },
         }
 
+        try:
+            IntegrationModel.objects.get(provider='vsts', external_id=account['AccountId'])
+        except IntegrationModel.DoesNotExist:
+            subscription_id, subscription_secret = self.create_subscription(
+                instance, account['AccountId'], oauth_data)
+            integration['metadata']['subscription'] = {
+                'id': subscription_id,
+                'secret': subscription_secret,
+            }
+
+        return integration
+
     def create_subscription(self, instance, account_id, oauth_data):
         webhook = WorkItemWebhook()
         subscription, shared_secret = webhook.create_subscription(
diff --git a/src/sentry/integrations/vsts/webhooks.py b/src/sentry/integrations/vsts/webhooks.py
index 31920d91d0..200a4d656d 100644
--- a/src/sentry/integrations/vsts/webhooks.py
+++ b/src/sentry/integrations/vsts/webhooks.py
@@ -38,7 +38,7 @@ class WorkItemWebhook(Endpoint):
         return self.respond()
 
     def check_webhook_secret(self, request, integration):
-        assert integration.metadata['subscription_secret'] == request.META['HTTP_SHARED_SECRET']
+        assert integration.metadata['subscription']['secret'] == request.META['HTTP_SHARED_SECRET']
 
     def handle_updated_workitem(self, data, integration):
         external_issue_key = data['resource']['workItemId']
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index d5aef8135f..ebbb0c8b08 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -56,6 +56,8 @@ class VstsIntegrationProviderTest(TestCase):
         assert integration_dict['name'] == 'sentry'
         assert integration_dict['external_id'] == '123435'
         assert integration_dict['metadata']['domain_name'] == 'sentry.visualstudio.com'
+        assert integration_dict['metadata']['subscription']['id'] == CREATE_SUBSCRIPTION['publisherInputs']['tfsSubscriptionId']
+        assert integration_dict['metadata']['subscription']['secret'] is not None
 
         assert integration_dict['user_identity']['type'] == 'vsts'
         assert integration_dict['user_identity']['external_id'] == 'user1-subject-desc'
@@ -67,6 +69,30 @@ class VstsIntegrationProviderTest(TestCase):
         assert integration_dict['user_identity']['data']['refresh_token'] == 'rxxx-xxxx'
         assert integration_dict['user_identity']['data']['token_type'] == 'jwt-bearer'
 
+    @responses.activate
+    def test_subscription_created_once(self):
+        external_id = '123-VSTS'
+        Integration.objects.create(
+            provider='vsts',
+            external_id=external_id,
+            name='vsts_name',
+            metadata={},
+        )
+        state = {
+            'account': {'AccountName': 'sentry', 'AccountId': external_id},
+            'instance': 'sentry.visualstudio.com',
+            'identity': {
+                'data': {
+                    'access_token': 'xxx-xxxx',
+                    'expires_in': '3600',
+                    'refresh_token': 'rxxx-xxxx',
+                    'token_type': 'jwt-bearer',
+                },
+            },
+        }
+        integration_dict = self.integration.build_integration(state)
+        assert 'subscription' not in integration_dict['metadata']
+
 
 class VstsIntegrationTest(APITestCase):
     def setUp(self):
diff --git a/tests/sentry/integrations/vsts/test_webhooks.py b/tests/sentry/integrations/vsts/test_webhooks.py
index a7bcbb1076..1f71370b7d 100644
--- a/tests/sentry/integrations/vsts/test_webhooks.py
+++ b/tests/sentry/integrations/vsts/test_webhooks.py
@@ -28,7 +28,10 @@ class VstsWebhookWorkItemTest(APITestCase):
             name='vsts_name',
             metadata={
                  'domain_name': 'instance.visualstudio.com',
-                 'subscription_secret': self.shared_secret,
+                 'subscription': {
+                     'id': 1234,
+                     'secret': self.shared_secret,
+                 }
             }
         )
         self.identity_provider = IdentityProvider.objects.create(type='vsts')
