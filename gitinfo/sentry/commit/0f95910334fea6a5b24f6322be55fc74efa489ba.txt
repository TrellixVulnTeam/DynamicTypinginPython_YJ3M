commit 0f95910334fea6a5b24f6322be55fc74efa489ba
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jun 10 18:14:31 2019 -0700

    ref(sentry10): Remove unused withEnvironmentInQueryString helper

diff --git a/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx b/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
deleted file mode 100644
index 7ae4eaf9cf..0000000000
--- a/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import {browserHistory} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import Reflux from 'reflux';
-import createReactClass from 'create-react-class';
-import qs from 'query-string';
-
-import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
-import getDisplayName from 'app/utils/getDisplayName';
-import EnvironmentStore from 'app/stores/environmentStore';
-import LatestContextStore from 'app/stores/latestContextStore';
-
-const withEnvironmentInQueryString = WrappedComponent =>
-  createReactClass({
-    displayName: `withEnvironmentInQueryString(${getDisplayName(WrappedComponent)})`,
-
-    propTypes: {
-      location: PropTypes.object,
-    },
-
-    mixins: [Reflux.listenTo(LatestContextStore, 'onLatestContextChange')],
-
-    getInitialState() {
-      const latestContext = LatestContextStore.getInitialState();
-      return {
-        environment: latestContext.environment,
-        organization: latestContext.organization,
-      };
-    },
-
-    componentWillMount() {
-      const {environment} = this.state;
-      const {query, pathname} = this.props.location;
-      const isDefaultEnvironment = environment === EnvironmentStore.getDefault();
-
-      // Update the query string to match environment if they are not in sync
-      if (environment) {
-        if (environment.name !== query.environment) {
-          if (isDefaultEnvironment) {
-            delete query.environment;
-          } else {
-            query.environment = environment.name;
-          }
-          browserHistory.replace(`${pathname}?${qs.stringify(query)}`);
-        }
-      } else {
-        if (environment === null && !isDefaultEnvironment) {
-          query.environment = ALL_ENVIRONMENTS_KEY;
-          browserHistory.replace(`${pathname}?${qs.stringify(query)}`);
-        }
-      }
-    },
-
-    onLatestContextChange({environment, organization}) {
-      const environmentHasChanged = environment !== this.state.environment;
-      const defaultEnvironment = EnvironmentStore.getDefault();
-
-      if (environmentHasChanged) {
-        const {query, pathname} = this.props.location;
-        if (environment === defaultEnvironment) {
-          // We never show environment in the query string if it's the default one
-          delete query.environment;
-        } else {
-          // We show ?environment=__all_environments__ in the query string if 'All environments'
-          // is selected and that is not the default
-          const envName = environment ? environment.name : ALL_ENVIRONMENTS_KEY;
-          query.environment = envName;
-        }
-        browserHistory.push(`${pathname}?${qs.stringify(query)}`);
-      }
-
-      this.setState({
-        environment,
-        organization,
-      });
-    },
-
-    render() {
-      const environment = this.state.environment;
-
-      return <WrappedComponent environment={environment} {...this.props} />;
-    },
-  });
-
-export default withEnvironmentInQueryString;
diff --git a/tests/js/spec/utils/withEnvironmentInQueryString.spec.jsx b/tests/js/spec/utils/withEnvironmentInQueryString.spec.jsx
deleted file mode 100644
index 2f663424a9..0000000000
--- a/tests/js/spec/utils/withEnvironmentInQueryString.spec.jsx
+++ /dev/null
@@ -1,91 +0,0 @@
-import React from 'react';
-import {shallow} from 'enzyme';
-import {browserHistory} from 'react-router';
-
-import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-import LatestContextStore from 'app/stores/latestContextStore';
-
-class BasicComponent extends React.Component {
-  render() {
-    return <div>test component</div>;
-  }
-}
-
-const WrappedComponent = withEnvironmentInQueryString(BasicComponent);
-
-describe('withEnvironmentInQueryString', function() {
-  beforeEach(function() {
-    browserHistory.replace = jest.fn();
-    LatestContextStore.onSetActiveOrganization({});
-  });
-
-  describe('updates environment', function() {
-    let wrapper;
-    beforeEach(function() {
-      LatestContextStore.onSetActiveEnvironment({
-        name: 'prod',
-      });
-
-      wrapper = shallow(
-        <WrappedComponent location={{pathname: 'http://lol/', query: {}}} />,
-        TestStubs.routerContext()
-      );
-    });
-
-    it('passes environment prop to component', function() {
-      expect(wrapper.prop('environment').name).toBe('prod');
-    });
-
-    it('replaces browser history', function() {
-      expect(browserHistory.replace).toHaveBeenCalledWith('http://lol/?environment=prod');
-    });
-  });
-
-  describe('handles correct environment value', function() {
-    let wrapper;
-    beforeEach(function() {
-      LatestContextStore.onSetActiveEnvironment({
-        name: 'prod',
-      });
-
-      wrapper = shallow(
-        <WrappedComponent
-          location={{pathname: 'http://lol', query: {environment: 'prod'}}}
-        />,
-        TestStubs.routerContext()
-      );
-    });
-
-    it('passes environment prop to component', function() {
-      expect(wrapper.prop('environment').name).toBe('prod');
-    });
-
-    it('does not replace browser history', function() {
-      expect(browserHistory.replace).not.toHaveBeenCalled();
-    });
-  });
-
-  describe('removes invalid environment value', function() {
-    let wrapper;
-    beforeEach(function() {
-      LatestContextStore.onSetActiveEnvironment({name: 'staging'});
-
-      wrapper = shallow(
-        <WrappedComponent
-          location={{pathname: 'http://lol/', query: {environment: 'prod'}}}
-        />,
-        TestStubs.routerContext()
-      );
-    });
-
-    it('passes environment prop to component', function() {
-      expect(wrapper.prop('environment').name).toBe('staging');
-    });
-
-    it('replaces browser history', function() {
-      expect(browserHistory.replace).toHaveBeenCalledWith(
-        'http://lol/?environment=staging'
-      );
-    });
-  });
-});
