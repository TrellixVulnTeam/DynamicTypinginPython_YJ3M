commit 6bb41c54914fec90b6fda876e46acd256b23b69d
Author: Max Bittker <maxbittker@gmail.com>
Date:   Thu Oct 19 16:09:59 2017 -0700

    feat(workflow): React multi-member invite (#6054)
    
    * new invite member flow in react, supports comma separated multi-invite
    
    * organization_member_index and organization_member_details endpoint improvements

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 27240a4a60..fa486ea4e0 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -6,9 +6,13 @@ from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry import roles
-from sentry.api.bases.organization import (OrganizationEndpoint, OrganizationPermission)
+from sentry.api.bases.organization import (
+    OrganizationEndpoint, OrganizationPermission)
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.models import (AuditLogEntryEvent, AuthIdentity, AuthProvider, OrganizationMember)
+from sentry.api.serializers import serialize, RoleSerializer
+
+from sentry.models import (
+    AuditLogEntryEvent, AuthIdentity, AuthProvider, OrganizationMember)
 from sentry.signals import sso_enabled
 
 ERR_NO_AUTH = 'You cannot remove this member with an unauthenticated API request.'
@@ -22,6 +26,28 @@ ERR_ONLY_OWNER = 'You cannot remove the only remaining owner of the organization
 ERR_UNINVITABLE = 'You cannot send an invitation to a user who is already a full member.'
 
 
+def get_allowed_roles(request, organization, member=None):
+    can_admin = request.access.has_scope('member:admin')
+
+    allowed_roles = []
+    if can_admin and not request.is_superuser():
+        acting_member = member or OrganizationMember.objects.get(
+            user=request.user,
+            organization=organization,
+        )
+        if member and roles.get(acting_member.role).priority < roles.get(member.role).priority:
+            can_admin = False
+        else:
+            allowed_roles = [
+                r for r in roles.get_all()
+                if r.priority <= roles.get(acting_member.role).priority
+            ]
+            can_admin = bool(allowed_roles)
+    elif request.is_superuser():
+        allowed_roles = roles.get_all()
+    return (can_admin, allowed_roles, )
+
+
 class OrganizationMemberSerializer(serializers.Serializer):
     reinvite = serializers.BooleanField()
 
@@ -71,13 +97,35 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
 
         return True
 
+    def get(self, request, organization, member_id):
+        """Currently only returns allowed invite roles for member invite"""
+
+        try:
+            member = self._get_member(request, organization, member_id)
+        except OrganizationMember.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        _, allowed_roles = get_allowed_roles(request, organization, member)
+
+        allowed_roles = [{'role': serialize(r, serializer=RoleSerializer()),
+                          'allowed': r in allowed_roles} for r in roles.get_all()]
+
+        context = serialize(
+            member,
+        )
+
+        context['allowed_roles'] = allowed_roles
+
+        return Response(context)
+
     def put(self, request, organization, member_id):
         try:
             om = self._get_member(request, organization, member_id)
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        serializer = OrganizationMemberSerializer(data=request.DATA, partial=True)
+        serializer = OrganizationMemberSerializer(
+            data=request.DATA, partial=True)
         if not serializer.is_valid():
             return Response(status=400)
 
diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index 5b1c4165d9..0acc8eb021 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -1,13 +1,24 @@
 from __future__ import absolute_import
 import six
 
+from django.db import transaction, IntegrityError
 from django.db.models import Q
+from rest_framework import serializers
+from rest_framework.response import Response
+from django.conf import settings
 
-from sentry.api.bases.organization import (OrganizationEndpoint, OrganizationPermission)
+from sentry.app import locks
+from sentry import roles
+from sentry.api.bases.organization import (
+    OrganizationEndpoint, OrganizationPermission)
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.models import OrganizationMember
+from sentry.api.serializers.rest_framework import ListField
+from sentry.models import AuditLogEntryEvent, OrganizationMember, OrganizationMemberTeam, Team, TeamStatus
 from sentry.search.utils import tokenize_query
+from sentry.signals import member_invited
+from .organization_member_details import get_allowed_roles
+from sentry.utils.retries import TimedRetryPolicy
 
 
 class MemberPermission(OrganizationPermission):
@@ -19,9 +30,28 @@ class MemberPermission(OrganizationPermission):
     }
 
 
+class OrganizationMemberSerializer(serializers.Serializer):
+    email = serializers.EmailField(max_length=75, required=True)
+    role = serializers.ChoiceField(choices=roles.get_choices(), required=True)
+    teams = ListField(required=False, allow_null=False)
+
+
 class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
     permission_classes = (MemberPermission, )
 
+    @transaction.atomic
+    def save_team_assignments(self, organization_member, teams):
+        # teams may be empty
+        OrganizationMemberTeam.objects.filter(
+            organizationmember=organization_member).delete()
+        OrganizationMemberTeam.objects.bulk_create(
+            [
+                OrganizationMemberTeam(
+                    team=team, organizationmember=organization_member)
+                for team in teams
+            ]
+        )
+
     def get(self, request, organization):
         queryset = OrganizationMember.objects.filter(
             Q(user__is_active=True) | Q(user__isnull=True),
@@ -34,7 +64,8 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
             for key, value in six.iteritems(tokens):
                 if key == 'email':
                     queryset = queryset.filter(
-                        Q(user__email__in=value) | Q(user__emails__email__in=value)
+                        Q(user__email__in=value) | Q(
+                            user__emails__email__in=value)
                     )
 
         return self.paginate(
@@ -43,3 +74,85 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
             on_results=lambda x: serialize(x, request.user),
             paginator_cls=OffsetPaginator,
         )
+
+    def post(self, request, organization):
+        """
+        Add a Member to Organization
+        ````````````````````````````
+
+        Invite a member to the organization.
+
+        :pparam string organization_slug: the slug of the organization the member will belong to
+        :param string email: the email address to invite
+        :param string role: the role of the new member
+        :param array teams: the slugs of the teams the member should belong to.
+
+        :auth: required
+        """
+        # TODO: If the member already exists, should this still update the role and team?
+        # For now, it doesn't, but simply returns the existing object
+
+        serializer = OrganizationMemberSerializer(data=request.DATA)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.object
+
+        _, allowed_roles = get_allowed_roles(request, organization)
+
+        # ensure listed teams are real teams
+        teams = list(Team.objects.filter(
+            organization=organization,
+            status=TeamStatus.VISIBLE,
+            slug__in=result['teams'],
+        ))
+
+        if len(set(result['teams'])) != len(teams):
+            return Response({'teams': 'Invalid team'}, 400)
+
+        if not result['role'] in {r.id for r in allowed_roles}:
+            return Response({'role': 'You do not have permission to invite that role.'}, 403)
+
+        # This is needed because `email` field is case sensitive, but from a user perspective,
+        # Sentry treats email as case-insensitive (Eric@example.com equals eric@example.com).
+
+        existing = OrganizationMember.objects.filter(
+            organization=organization,
+            user__email__iexact=result['email'],
+            user__is_active=True,
+        ).exists()
+
+        if existing:
+            return Response({'email': 'The user %s is already a member' % result['email']}, 409)
+
+        om = OrganizationMember(
+            organization=organization,
+            email=result['email'],
+            role=result['role'])
+
+        if settings.SENTRY_ENABLE_INVITES:
+            om.token = om.generate_token()
+
+        try:
+            with transaction.atomic():
+                om.save()
+        except IntegrityError:
+            return Response({'email': 'The user %s is already a member' % result['email']}, 409)
+
+        lock = locks.get('org:member:{}'.format(om.id), duration=5)
+        with TimedRetryPolicy(10)(lock.acquire):
+            self.save_team_assignments(om, teams)
+
+        if settings.SENTRY_ENABLE_INVITES:
+            om.send_invite_email()
+            member_invited.send(member=om, user=request.user, sender=self)
+
+        self.create_audit_entry(
+            request=request,
+            organization_id=organization.id,
+            target_object=om.id,
+            event=AuditLogEntryEvent.MEMBER_INVITE if settings.SENTRY_ENABLE_INVITES else AuditLogEntryEvent.MEMBER_ADD,
+        )
+
+        return Response(serialize(om), status=201)
diff --git a/src/sentry/api/serializers/models/role.py b/src/sentry/api/serializers/models/role.py
new file mode 100644
index 0000000000..d083d3a459
--- /dev/null
+++ b/src/sentry/api/serializers/models/role.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+import six
+from sentry.api.serializers import Serializer
+
+
+class RoleSerializer(Serializer):
+
+    def serialize(self, obj, attrs, *args, **kwargs):
+        return {
+            'id': six.text_type(obj.id),
+            'name': obj.name,
+            'desc': obj.desc,
+            'scopes': obj.scopes,
+            'is_global': obj.is_global,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index a1c971b58e..8c7a05508b 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -147,13 +147,15 @@ urlpatterns = patterns(
         ApiAuthorizationsEndpoint.as_view(),
         name='sentry-api-0-api-authorizations'
     ),
-    url(r'^api-tokens/$', ApiTokensEndpoint.as_view(), name='sentry-api-0-api-tokens'),
+    url(r'^api-tokens/$', ApiTokensEndpoint.as_view(),
+        name='sentry-api-0-api-tokens'),
 
     # Auth
     url(r'^auth/$', AuthIndexEndpoint.as_view(), name='sentry-api-0-auth'),
 
     # Broadcasts
-    url(r'^broadcasts/$', BroadcastIndexEndpoint.as_view(), name='sentry-api-0-broadcast-index'),
+    url(r'^broadcasts/$', BroadcastIndexEndpoint.as_view(),
+        name='sentry-api-0-broadcast-index'),
 
     # Users
     url(r'^users/$', UserIndexEndpoint.as_view(), name='sentry-api-0-user-index'),
@@ -401,7 +403,8 @@ urlpatterns = patterns(
     ),
 
     # Projects
-    url(r'^projects/$', ProjectIndexEndpoint.as_view(), name='sentry-api-0-projects'),
+    url(r'^projects/$', ProjectIndexEndpoint.as_view(),
+        name='sentry-api-0-projects'),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/$',
         ProjectDetailsEndpoint.as_view(),
@@ -745,12 +748,14 @@ urlpatterns = patterns(
     ),
 
     # Internal
-    url(r'^internal/health/$', SystemHealthEndpoint.as_view(), name='sentry-api-0-system-health'),
+    url(r'^internal/health/$', SystemHealthEndpoint.as_view(),
+        name='sentry-api-0-system-health'),
     url(
         r'^internal/options/$', SystemOptionsEndpoint.as_view(), name='sentry-api-0-system-options'
     ),
     url(r'^internal/queue/tasks/$', InternalQueueTasksEndpoint.as_view()),
-    url(r'^internal/stats/$', InternalStatsEndpoint.as_view(), name='sentry-api-0-internal-stats'),
+    url(r'^internal/stats/$', InternalStatsEndpoint.as_view(),
+        name='sentry-api-0-internal-stats'),
     url(r'^$', IndexEndpoint.as_view(), name='sentry-api-index'),
     url(r'^', CatchallEndpoint.as_view(), name='sentry-api-catchall'),
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 46d719e8f1..f21d1487a1 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -854,7 +854,7 @@ SENTRY_SMTP_DISABLED_BACKENDS = frozenset(
 # make projects public
 SENTRY_ALLOW_PUBLIC_PROJECTS = True
 
-# Can users be invited to organizations?
+# Will an invite be sent when a member is added to an organization?
 SENTRY_ENABLE_INVITES = True
 
 # Default to not sending the Access-Control-Allow-Origin header on api/store
diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index 8850c38cce..fcd57819da 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -12,6 +12,7 @@ export class Client {
       statusCode: 200,
       body: '',
       method: 'GET',
+      callCount: 0,
       ...response
     });
   }
@@ -22,6 +23,10 @@ export class Client {
     });
   }
 
+  static getCallCount(response) {
+    return Client.findMockResponse(response.url, response).callCount;
+  }
+
   clear() {}
 
   merge(params, options) {
@@ -49,6 +54,7 @@ export class Client {
           responseJSON: null
         });
     } else if (response.statusCode !== 200) {
+      response.callCount++;
       options.error &&
         options.error({
           status: response.statusCode,
@@ -56,6 +62,7 @@ export class Client {
           responseJSON: response.body
         });
     } else {
+      response.callCount++;
       options.success &&
         options.success(response.body, {}, {getResponseHeader: () => {}});
     }
diff --git a/src/sentry/static/sentry/app/components/forms/textField.jsx b/src/sentry/static/sentry/app/components/forms/textField.jsx
index 6c2d5bdab3..40f0e5e235 100644
--- a/src/sentry/static/sentry/app/components/forms/textField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/textField.jsx
@@ -1,6 +1,17 @@
+import PropTypes from 'prop-types';
 import InputField from './inputField';
 
 export default class TextField extends InputField {
+  static propTypes = {
+    spellCheck: PropTypes.string
+  };
+
+  getAttributes() {
+    return {
+      spellCheck: this.props.spellCheck
+    };
+  }
+
   getType() {
     return 'text';
   }
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 2ee99343af..2dbb26dcdf 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -1,5 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import classnames from 'classnames';
+
 import ListLink from '../listLink';
 import OrganizationState from '../../mixins/organizationState';
 import HookStore from '../../stores/hookStore';
@@ -75,7 +77,12 @@ const HomeSidebar = React.createClass({
             <h6 className="nav-header with-divider">{t('Manage')}</h6>
             <ul className="nav nav-stacked">
               {access.has('org:read') &&
-                <li>
+                <li
+                  className={classnames({
+                    active: /^\/organizations\/[^\/]+\/members\/new\/$/.test(
+                      this.context.location.pathname
+                    )
+                  })}>
                   <a href={`/organizations/${orgId}/members/`}>
                     {t('Members')}&nbsp;
                     {access.has('org:write') &&
diff --git a/src/sentry/static/sentry/app/components/radio.jsx b/src/sentry/static/sentry/app/components/radio.jsx
new file mode 100644
index 0000000000..5b59e6dc1b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/radio.jsx
@@ -0,0 +1,18 @@
+import React from 'react';
+import classNames from 'classnames';
+
+const Radio = React.createClass({
+  getDefaultProps() {
+    return {
+      checked: false
+    };
+  },
+
+  render() {
+    let {className, ...otherProps} = this.props;
+    let cx = classNames('radio-select', className);
+    return <input type="radio" className={cx} {...otherProps} />;
+  }
+});
+
+export default Radio;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index d4eb8c9b07..067e73531a 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -84,6 +84,7 @@ import RouteNotFound from './views/routeNotFound';
 import SetCallsignsAction from './views/requiredAdminActions/setCallsigns';
 import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
+import InviteMember from './views/inviteMember/inviteMember';
 import TeamCreate from './views/teamCreate';
 import TeamDetails from './views/teamDetails';
 import TeamMembers from './views/teamMembers';
@@ -123,6 +124,7 @@ const orgSettingsRoutes = [
     path="rate-limits/"
     component={errorHandler(OrganizationRateLimits)}
   />,
+  <Route key="members/new/" path="members/new/" component={errorHandler(InviteMember)} />,
   <Route key="repos" path="repos/" component={errorHandler(OrganizationRepositories)} />,
   <Route key="settings" path="settings/" component={errorHandler(OrganizationSettings)} />
 ];
diff --git a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
new file mode 100644
index 0000000000..0ee3ca9b38
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
@@ -0,0 +1,174 @@
+import React from 'react';
+import classNames from 'classnames';
+
+import OrganizationState from '../../mixins/organizationState';
+import ApiMixin from '../../mixins/apiMixin';
+import AlertActions from '../../actions/alertActions';
+
+import Button from '../../components/buttons/button';
+import LoadingIndicator from '../../components/loadingIndicator';
+import TextField from '../../components/forms/textField';
+
+import RoleSelect from './roleSelect';
+import TeamSelect from './teamSelect';
+
+import ConfigStore from '../../stores/configStore';
+import {t} from '../../locale';
+
+const InviteMember = React.createClass({
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    let {teams} = this.getOrganization();
+
+    //select team if there's only one
+    let initialTeamSelection = teams.length === 1 ? [teams[0].slug] : [];
+
+    return {
+      selectedTeams: new Set(initialTeamSelection),
+      roleList: [],
+      selectedRole: 'member',
+      email: '',
+      loading: true,
+      error: undefined
+    };
+  },
+
+  componentDidMount() {
+    let {slug} = this.getOrganization();
+    this.api.request(`/organizations/${slug}/members/me/`, {
+      method: 'GET',
+      success: ({allowed_roles}) => {
+        this.setState({roleList: allowed_roles, loading: false});
+        if (allowed_roles.filter(({_, allowed}) => allowed).length === 0) {
+          //not allowed to invite, redirect
+          this.redirectToMemberPage();
+        }
+      },
+      error: error => {
+        Raven.captureMessage('data fetch error ', {
+          extra: {error, state: this.state}
+        });
+      }
+    });
+  },
+
+  redirectToMemberPage() {
+    let {slug} = this.getOrganization();
+    window.location.href = `/organizations/${slug}/members/`;
+  },
+
+  splitEmails(text) {
+    return text.split(',').map(e => e.trim()).filter(e => e);
+  },
+
+  inviteUser(email) {
+    let {slug} = this.getOrganization();
+    let {selectedTeams, selectedRole} = this.state;
+
+    return new Promise((resolve, reject) => {
+      this.api.request(`/organizations/${slug}/members/`, {
+        method: 'POST',
+        data: {
+          email,
+          user: email,
+          teams: Array.from(selectedTeams.keys()),
+          role: selectedRole
+        },
+        success: () => {
+          AlertActions.addAlert({
+            message: `Added ${email}`,
+            type: 'success'
+          });
+          resolve();
+        },
+        error: err => {
+          if (err.status === 409) {
+            AlertActions.addAlert({
+              message: `User already exists: ${email}`,
+              type: 'info'
+            });
+            resolve();
+          } else {
+            reject(err.responseJSON);
+          }
+        }
+      });
+    });
+  },
+
+  submit() {
+    let {email} = this.state;
+    let emails = this.splitEmails(email);
+    if (!emails.length) return;
+    this.setState({loading: true});
+
+    Promise.all(emails.map(this.inviteUser))
+      .then(() => setTimeout(this.redirectToMemberPage, 3000))
+      .catch(error => {
+        if (!error.email && !error.role) {
+          Raven.captureMessage('unkown error ', {
+            extra: {error, state: this.state}
+          });
+        }
+        this.setState({error, loading: false});
+      });
+  },
+
+  toggleTeam(slug) {
+    let {selectedTeams} = this.state;
+    if (selectedTeams.has(slug)) {
+      selectedTeams.delete(slug);
+    } else {
+      selectedTeams.add(slug);
+    }
+    this.setState({selectedTeams});
+  },
+
+  render() {
+    let {error, loading, roleList, selectedRole, selectedTeams} = this.state;
+    let {teams} = this.getOrganization();
+    let {invitesEnabled} = ConfigStore.getConfig();
+    return (
+      <div>
+        <h3>{t('Add Member to Organization')}</h3>
+        <p>
+          {invitesEnabled
+            ? t(
+                'Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one. Multiple emails delimited by commas.'
+              )
+            : t(
+                'You may add a user by their username if they already have an account. Multiple inputs delimited by commas.'
+              )}
+        </p>
+        <div className={classNames({'has-error': error && error.email})}>
+          {loading && <LoadingIndicator mini className="pull-right" />}
+          <TextField
+            name="email"
+            label={invitesEnabled ? t('Email') + '(s)' : t('Username') + '(s)'}
+            placeholder="e.g. teammate@example.com"
+            spellCheck="false"
+            onChange={v => this.setState({email: v})}
+          />
+          {error && error.email && <p className="error">{error.email}</p>}
+        </div>
+        {error && error.role && <p className="error alert-error">{error.role}</p>}
+        <RoleSelect
+          roleList={roleList}
+          selectedRole={selectedRole}
+          setRole={slug => this.setState({selectedRole: slug})}
+        />
+        <TeamSelect
+          teams={teams}
+          selectedTeams={selectedTeams}
+          toggleTeam={this.toggleTeam}
+        />
+        <Button priority="primary" className="invite-member-submit" onClick={this.submit}>
+          {t('Add Member')}
+        </Button>
+      </div>
+    );
+  }
+});
+
+export default InviteMember;
diff --git a/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx b/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx
new file mode 100644
index 0000000000..e4bcde0966
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx
@@ -0,0 +1,48 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import Radio from '../../components/radio';
+
+import {t} from '../../locale';
+
+const RoleSelect = React.createClass({
+  propTypes: {
+    selectedRole: PropTypes.string,
+    roleList: PropTypes.array,
+    setRole: PropTypes.func
+  },
+
+  render() {
+    let {roleList, selectedRole} = this.props;
+
+    return (
+      <div className="new-invite-team box">
+        <div className="box-header">
+          <h4>{t('Role') + ':'}</h4>
+        </div>
+        <div className="box-content with-padding">
+          <ul className="radio-inputs">
+            {roleList.map(({role, allowed}, i) => {
+              let {desc, name, id} = role;
+              return (
+                <li
+                  className="radio"
+                  key={id}
+                  onClick={() => allowed && this.props.setRole(id)}
+                  style={allowed ? {} : {color: 'grey', cursor: 'default'}}>
+                  <label style={allowed ? {} : {cursor: 'default'}}>
+                    <Radio id={id} value={name} checked={id === selectedRole} readOnly />
+                    {name}
+                    <div className="help-block">{desc}</div>
+                  </label>
+                </li>
+              );
+            })}
+          </ul>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default RoleSelect;
diff --git a/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx b/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx
new file mode 100644
index 0000000000..2e1fc24cd1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx
@@ -0,0 +1,46 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import Checkbox from '../../components/checkbox';
+
+import {t} from '../../locale';
+
+const TeamSelect = React.createClass({
+  propTypes: {
+    selectedTeams: PropTypes.instanceOf(Set),
+    teams: PropTypes.array,
+    toggleTeam: PropTypes.func
+  },
+
+  render() {
+    let {teams, selectedTeams, toggleTeam} = this.props;
+    //no need to select a team when there's only one option
+    if (teams.length < 2) return null;
+    return (
+      <div className="new-invite-team box">
+        <div className="box-header">
+          <h4>{t('Team') + ':'}</h4>
+        </div>
+        <div className="grouping-controls team-choices row box-content with-padding">
+          {teams.map(({slug, name}, i) => (
+            <div
+              key={slug}
+              onClick={e => {
+                e.preventDefault();
+                toggleTeam(slug);
+              }}
+              className="col-md-3">
+              <label className="checkbox">
+                <Checkbox id={slug} value={name} checked={selectedTeams.has(slug)} />
+                {name}
+                <span className="team-slug">{slug}</span>
+              </label>
+            </div>
+          ))}
+        </div>
+      </div>
+    );
+  }
+});
+
+export default TeamSelect;
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/index.jsx b/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
index a25ece59ab..db4f870abe 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
@@ -43,6 +43,7 @@ const OnboardingProject = React.createClass({
     this.setWarning(this.props.name);
     if (this.props.name) this.props.next();
   },
+
   renderTeamPicker() {
     let {team, teams, setTeam} = this.props;
     if (teams.length < 2) return null;
@@ -90,7 +91,7 @@ const OnboardingProject = React.createClass({
           </div>
           {this.renderTeamPicker()}
           <div>
-            <button className="btn btn-primary submit-new-team" onClick={this.submit}>
+            <button className="btn btn-primary new-project-submit" onClick={this.submit}>
               {t('Create Project')}
             </button>
           </div>
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 84ee09f16e..bcdd9fece4 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -2954,7 +2954,7 @@ ul.radio-inputs {
     margin-right: 10px;
     margin-bottom: 10px;
     margin-left: 0;
-    display: inline-block;
+    display: block;
     font-weight: normal;
 
     label {
diff --git a/src/sentry/templates/sentry/create-organization-member.html b/src/sentry/templates/sentry/create-organization-member.html
deleted file mode 100644
index b33d5aa33e..0000000000
--- a/src/sentry/templates/sentry/create-organization-member.html
+++ /dev/null
@@ -1,46 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load i18n %}
-{% load crispy_forms_tags %}
-
-{% block title %}{% trans "Add Member to Organization" %} | {{ block.super }}{% endblock %}
-{% block sub-header %}{% endblock %}
-
-{% block modal_header_link %}
-  {% url 'sentry-organization-members' organization.slug %}
-{% endblock %}
-
-{% block modal_header_extra %}
-  <span class="back-to">Back to Member List</span>
-{% endblock %}
-
-{% block main %}
-  <h2 class="p-b-1 m-b-1 b-b-1">{% trans "Add Member to Organization" %}</h2>
-
-  {% block new_member_form_template_hook %}{% endblock %}
-
-  {% if is_invite %}
-    <p>{% trans "Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one." %}</p>
-  {% else %}
-    <p>{% trans "You may add a user by their username if they already have an account." %}</p>
-  {% endif %}
-
-  <form class="form-stacked" action="" method="post">
-    {% csrf_token %}
-
-    {{ form|as_crispy_errors }}
-
-    {% if is_invite %}
-      {{ form.email|as_crispy_field }}
-    {% else %}
-      {{ form.user|as_crispy_field }}
-    {% endif %}
-
-    {% include "sentry/partial/members/_roles.html" %}
-    {% include "sentry/partial/members/_teams.html" %}
-
-    <div class="form-actions">
-      <button type="submit" class="btn btn-primary">{% trans "Add Member" %}</button>
-    </div>
-  </form>
-{% endblock %}
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index c299c45607..9c956b56cc 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -123,6 +123,7 @@ def get_react_config(context):
             'level': msg.tags,
         } for msg in messages],
         'isOnPremise': settings.SENTRY_ONPREMISE,
+        'invitesEnabled': settings.SENTRY_ENABLE_INVITES,
         'gravatarBaseUrl': settings.SENTRY_GRAVATAR_BASE_URL,
     }
     if user and user.is_authenticated():
diff --git a/src/sentry/web/forms/add_organization_member.py b/src/sentry/web/forms/add_organization_member.py
deleted file mode 100644
index 7056207320..0000000000
--- a/src/sentry/web/forms/add_organization_member.py
+++ /dev/null
@@ -1,46 +0,0 @@
-from __future__ import absolute_import
-
-from django.db import transaction, IntegrityError
-
-from sentry.models import (
-    AuditLogEntry,
-    AuditLogEntryEvent,
-    OrganizationMember,
-)
-from sentry.web.forms.fields import UserField
-from sentry.web.forms.base_organization_member import BaseOrganizationMemberForm
-
-
-class AddOrganizationMemberForm(BaseOrganizationMemberForm):
-    user = UserField()
-
-    class Meta:
-        fields = ('user', 'role')
-        model = OrganizationMember
-
-    def save(self, actor, organization, ip_address):
-        om = super(AddOrganizationMemberForm, self).save(commit=False)
-        om.organization = organization
-
-        with transaction.atomic():
-            try:
-                om.save()
-            except IntegrityError:
-                return OrganizationMember.objects.get(
-                    user=om.user,
-                    organization=organization,
-                ), False
-
-        self.save_team_assignments(om)
-
-        AuditLogEntry.objects.create(
-            organization=organization,
-            actor=actor,
-            ip_address=ip_address,
-            target_object=om.id,
-            target_user=om.user,
-            event=AuditLogEntryEvent.MEMBER_ADD,
-            data=om.get_audit_log_data(),
-        )
-
-        return om, True
diff --git a/src/sentry/web/forms/invite_organization_member.py b/src/sentry/web/forms/invite_organization_member.py
deleted file mode 100644
index fe2787979f..0000000000
--- a/src/sentry/web/forms/invite_organization_member.py
+++ /dev/null
@@ -1,63 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.db import transaction, IntegrityError
-
-from sentry.models import (
-    AuditLogEntry,
-    AuditLogEntryEvent,
-    OrganizationMember,
-)
-from sentry.signals import member_invited
-from sentry.web.forms.base_organization_member import BaseOrganizationMemberForm
-
-
-class InviteOrganizationMemberForm(BaseOrganizationMemberForm):
-    # override this to ensure the field is required
-    email = forms.EmailField()
-
-    class Meta:
-        fields = ('email', 'role')
-        model = OrganizationMember
-
-    def save(self, actor, organization, ip_address):
-        om = super(InviteOrganizationMemberForm, self).save(commit=False)
-        om.organization = organization
-        om.token = om.generate_token()
-
-        try:
-            existing = OrganizationMember.objects.filter(
-                organization=organization,
-                user__email__iexact=om.email,
-                user__is_active=True,
-            )[0]
-        except IndexError:
-            pass
-        else:
-            return existing, False
-
-        sid = transaction.savepoint(using='default')
-        try:
-            om.save()
-        except IntegrityError:
-            transaction.savepoint_rollback(sid, using='default')
-            return OrganizationMember.objects.get(
-                email__iexact=om.email,
-                organization=organization,
-            ), False
-        transaction.savepoint_commit(sid, using='default')
-
-        self.save_team_assignments(om)
-
-        AuditLogEntry.objects.create(
-            organization=organization,
-            actor=actor,
-            ip_address=ip_address,
-            target_object=om.id,
-            event=AuditLogEntryEvent.MEMBER_INVITE,
-            data=om.get_audit_log_data(),
-        )
-        member_invited.send(member=om, user=actor, sender=InviteOrganizationMemberForm)
-        om.send_invite_email()
-
-        return om, True
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
deleted file mode 100644
index 088f1212ed..0000000000
--- a/src/sentry/web/frontend/create_organization_member.py
+++ /dev/null
@@ -1,79 +0,0 @@
-from __future__ import absolute_import
-
-from django.conf import settings
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry import roles
-from sentry.models import Team, TeamStatus
-from sentry.signals import member_invited
-from sentry.web.frontend.base import OrganizationView
-from sentry.web.forms.invite_organization_member import InviteOrganizationMemberForm
-from sentry.web.forms.add_organization_member import AddOrganizationMemberForm
-
-
-class CreateOrganizationMemberView(OrganizationView):
-    required_scope = 'org:write'
-
-    def get_form(self, request, organization, all_teams, allowed_roles):
-
-        # If there is only one possible team to join, select it by default
-        initial_teams = []
-        if len(all_teams) == 1:
-            initial_teams = all_teams
-
-        initial = {'role': organization.default_role, 'teams': initial_teams}
-
-        if settings.SENTRY_ENABLE_INVITES:
-            form_cls = InviteOrganizationMemberForm
-        else:
-            form_cls = AddOrganizationMemberForm
-
-        return form_cls(
-            data=request.POST or None,
-            all_teams=all_teams,
-            allowed_roles=allowed_roles,
-            initial=initial,
-        )
-
-    def handle(self, request, organization):
-        can_admin, allowed_roles = self.get_allowed_roles(request, organization)
-
-        all_teams = Team.objects.filter(organization=organization, status=TeamStatus.VISIBLE)
-
-        form = self.get_form(request, organization, all_teams, allowed_roles)
-        if form.is_valid():
-            om, created = form.save(request.user, organization, request.META['REMOTE_ADDR'])
-
-            user_display = form.cleaned_data.get('email', None)
-            if not user_display:
-                user_display = form.cleaned_data['user']
-
-            if created:
-                messages.add_message(
-                    request, messages.SUCCESS,
-                    _('The organization member %s was added.') % user_display
-                )
-
-                member_invited.send(member=om, user=request.user, sender=self)
-
-            else:
-                messages.add_message(
-                    request, messages.INFO,
-                    _('The organization member %s already exists.') % user_display
-                )
-
-            redirect = reverse('sentry-organization-members', args=[organization.slug])
-
-            return HttpResponseRedirect(redirect)
-
-        context = {
-            'form': form,
-            'is_invite': settings.SENTRY_ENABLE_INVITES,
-            'role_list': [(r, r in allowed_roles) for r in roles.get_all()],
-            'all_teams': list(all_teams),
-        }
-
-        return self.respond('sentry/create-organization-member.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 51e6e7ee4c..2b88277ccb 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -25,8 +25,6 @@ from sentry.web.frontend.auth_organization_login import \
     AuthOrganizationLoginView
 from sentry.web.frontend.auth_provider_login import AuthProviderLoginView
 from sentry.web.frontend.auth_close import AuthCloseView
-from sentry.web.frontend.create_organization_member import \
-    CreateOrganizationMemberView
 from sentry.web.frontend.error_page_embed import ErrorPageEmbedView
 from sentry.web.frontend.group_event_json import GroupEventJsonView
 from sentry.web.frontend.group_plugin_action import GroupPluginActionView
@@ -103,7 +101,8 @@ urlpatterns += patterns(
     '',
     # Store endpoints first since they are the most active
     url(r'^api/store/$', api.StoreView.as_view(), name='sentry-api-store'),
-    url(r'^api/(?P<project_id>[\w_-]+)/store/$', api.StoreView.as_view(), name='sentry-api-store'),
+    url(r'^api/(?P<project_id>[\w_-]+)/store/$',
+        api.StoreView.as_view(), name='sentry-api-store'),
     url(
         r'^api/(?P<project_id>\d+)/csp-report/$',
         api.CspReportView.as_view(),
@@ -134,7 +133,8 @@ urlpatterns += patterns(
         ReleaseWebhookView.as_view(),
         name='sentry-release-hook'
     ),
-    url(r'^api/embed/error-page/$', ErrorPageEmbedView.as_view(), name='sentry-error-page-embed'),
+    url(r'^api/embed/error-page/$', ErrorPageEmbedView.as_view(),
+        name='sentry-error-page-embed'),
 
     # OAuth
     url(r'^oauth/authorize/$', OAuthAuthorizeView.as_view()),
@@ -164,12 +164,14 @@ urlpatterns += patterns(
     url(r'^auth/2fa/u2fappid\.json$', u2f_appid, name='sentry-u2f-app-id'),
     url(r'^auth/sso/$', AuthProviderLoginView.as_view(), name='sentry-auth-sso'),
     url(r'^auth/logout/$', AuthLogoutView.as_view(), name='sentry-logout'),
-    url(r'^auth/reactivate/$', ReactivateAccountView.as_view(), name='sentry-reactivate-account'),
+    url(r'^auth/reactivate/$', ReactivateAccountView.as_view(),
+        name='sentry-reactivate-account'),
     url(r'^auth/register/$', AuthLoginView.as_view(), name='sentry-register'),
     url(r'^auth/close/$', AuthCloseView.as_view(), name='sentry-auth-close'),
 
     # Account
-    url(r'^login-redirect/$', accounts.login_redirect, name='sentry-login-redirect'),
+    url(r'^login-redirect/$', accounts.login_redirect,
+        name='sentry-login-redirect'),
     url(r'^account/sudo/$', SudoView.as_view(), name='sentry-sudo'),
     url(
         r'^account/confirm-email/$',
@@ -187,7 +189,8 @@ urlpatterns += patterns(
         accounts.recover_confirm,
         name='sentry-account-recover-confirm'
     ),
-    url(r'^account/settings/$', accounts.account_settings, name='sentry-account-settings'),
+    url(r'^account/settings/$', accounts.account_settings,
+        name='sentry-account-settings'),
     url(
         r'^account/settings/2fa/$', accounts.twofactor_settings, name='sentry-account-settings-2fa'
     ),
@@ -246,7 +249,8 @@ urlpatterns += patterns(
         AccountSecurityView.as_view(),
         name='sentry-account-security'
     ),
-    url(r'^account/settings/emails/$', accounts.show_emails, name='sentry-account-settings-emails'),
+    url(r'^account/settings/emails/$', accounts.show_emails,
+        name='sentry-account-settings-emails'),
 
     # compatibility
     url(
@@ -263,20 +267,27 @@ urlpatterns += patterns(
         UnsubscribeIssueNotificationsView.as_view(),
         name='sentry-account-email-unsubscribe-issue'
     ),
-    url(r'^account/remove/$', RemoveAccountView.as_view(), name='sentry-remove-account'),
+    url(r'^account/remove/$', RemoveAccountView.as_view(),
+        name='sentry-remove-account'),
     url(r'^account/settings/social/', include('social_auth.urls')),
     url(r'^account/', generic_react_page_view),
     url(r'^onboarding/', generic_react_page_view),
 
     # Admin
-    url(r'^manage/status/environment/$', admin.status_env, name='sentry-admin-status'),
-    url(r'^manage/status/packages/$', admin.status_packages, name='sentry-admin-packages-status'),
-    url(r'^manage/status/mail/$', admin.status_mail, name='sentry-admin-mail-status'),
-    url(r'^manage/status/warnings/$', admin.status_warnings, name='sentry-admin-warnings-status'),
+    url(r'^manage/status/environment/$',
+        admin.status_env, name='sentry-admin-status'),
+    url(r'^manage/status/packages/$', admin.status_packages,
+        name='sentry-admin-packages-status'),
+    url(r'^manage/status/mail/$', admin.status_mail,
+        name='sentry-admin-mail-status'),
+    url(r'^manage/status/warnings/$', admin.status_warnings,
+        name='sentry-admin-warnings-status'),
 
     # Admin - Users
-    url(r'^manage/users/new/$', admin.create_new_user, name='sentry-admin-new-user'),
-    url(r'^manage/users/(?P<user_id>\d+)/$', admin.edit_user, name='sentry-admin-edit-user'),
+    url(r'^manage/users/new/$', admin.create_new_user,
+        name='sentry-admin-new-user'),
+    url(r'^manage/users/(?P<user_id>\d+)/$',
+        admin.edit_user, name='sentry-admin-edit-user'),
     url(
         r'^manage/users/(?P<user_id>\d+)/remove/$',
         admin.remove_user,
@@ -294,12 +305,14 @@ urlpatterns += patterns(
     # Legacy Redirects
     url(
         r'^docs/?$',
-        RedirectView.as_view(url='https://docs.sentry.io/hosted/', permanent=False),
+        RedirectView.as_view(
+            url='https://docs.sentry.io/hosted/', permanent=False),
         name='sentry-docs-redirect'
     ),
     url(
         r'^docs/api/?$',
-        RedirectView.as_view(url='https://docs.sentry.io/hosted/api/', permanent=False),
+        RedirectView.as_view(
+            url='https://docs.sentry.io/hosted/api/', permanent=False),
         name='sentry-api-docs-redirect'
     ),
     url(r'^api/$', generic_react_page_view, name='sentry-api'),
@@ -310,7 +323,8 @@ urlpatterns += patterns(
         name='sentry-accept-project-transfer'),
 
     # Organizations
-    url(r'^(?P<organization_slug>[\w_-]+)/$', react_page_view, name='sentry-organization-home'),
+    url(r'^(?P<organization_slug>[\w_-]+)/$',
+        react_page_view, name='sentry-organization-home'),
     url(r'^organizations/new/$', generic_react_page_view),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/$',
@@ -338,7 +352,7 @@ urlpatterns += patterns(
     ),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/members/new/$',
-        CreateOrganizationMemberView.as_view(),
+        react_page_view,
         name='sentry-create-organization-member'
     ),
     url(
@@ -356,7 +370,8 @@ urlpatterns += patterns(
         RemoveTeamView.as_view(),
         name='sentry-remove-team'
     ),
-    url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/new/$', react_page_view),
+    url(
+        r'^organizations/(?P<organization_slug>[\w_-]+)/teams/new/$', react_page_view),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/remove/$',
         RemoveOrganizationView.as_view(),
@@ -374,7 +389,8 @@ urlpatterns += patterns(
     ),
 
     # need to catch settings and force it to react
-    url(r'^organizations/(?P<organization_slug>[\w_-]+)/settings/', react_page_view),
+    url(
+        r'^organizations/(?P<organization_slug>[\w_-]+)/settings/', react_page_view),
 
     # Settings - Projects
     url(
@@ -458,7 +474,8 @@ urlpatterns += patterns(
     url(r'favicon\.ico$', lambda r: HttpResponse(status=404)),
 
     # crossdomain.xml
-    url(r'^crossdomain\.xml$', api.crossdomain_xml_index, name='sentry-api-crossdomain-xml-index'),
+    url(r'^crossdomain\.xml$', api.crossdomain_xml_index,
+        name='sentry-api-crossdomain-xml-index'),
 
     # plugins
     # XXX(dcramer): preferably we'd be able to use 'integrations' as the URL
diff --git a/src/south/test_shim.py b/src/south/test_shim.py
deleted file mode 100644
index fdf39f3f62..0000000000
--- a/src/south/test_shim.py
+++ /dev/null
@@ -1,6 +0,0 @@
-"""
-This file is needed as 1.6 only finds tests in files labelled test_*,
-and ignores tests/__init__.py.
-"""
-
-from south.tests import *
diff --git a/tests/acceptance/test_create_organization_member.py b/tests/acceptance/test_create_organization_member.py
index f988cce5a5..ddc72e737e 100644
--- a/tests/acceptance/test_create_organization_member.py
+++ b/tests/acceptance/test_create_organization_member.py
@@ -11,7 +11,13 @@ class CreateOrganizationMemberTest(AcceptanceTestCase):
             name='Rowdy Tiger',
             owner=None,
         )
-        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.team = self.create_team(
+            organization=self.org, name='Mariachi Band')
+        self.team = self.create_team(
+            organization=self.org, name='Other Team')
+        self.team = self.create_team(
+            organization=self.org, name='team three')
+
         self.create_member(
             user=self.user,
             organization=self.org,
@@ -22,7 +28,18 @@ class CreateOrganizationMemberTest(AcceptanceTestCase):
 
     def test_invite(self):
         """
-        Add by username (on-premises / by configuration only)
+        Add by email
         """
-        self.browser.get('/organizations/{}/members/new/'.format(self.org.slug))
+        self.browser.get(
+            '/organizations/{}/members/new/'.format(self.org.slug))
+        self.browser.wait_until_not('.loading')
+        self.browser.element('.checkbox').click()
+
+        self.browser.element(
+            'input#id-email').send_keys('test@gmail.com, invalidemail')
+
         self.browser.snapshot(name='invite organization member')
+        self.browser.click('.invite-member-submit')
+
+        self.browser.wait_until_not('.loading')
+        self.browser.wait_until('.alert-success')
diff --git a/tests/acceptance/test_create_project.py b/tests/acceptance/test_create_project.py
index 20e2c3ed5a..4c730aefb2 100644
--- a/tests/acceptance/test_create_project.py
+++ b/tests/acceptance/test_create_project.py
@@ -36,7 +36,7 @@ class CreateProjectTest(AcceptanceTestCase):
         self.browser.click('.platformicon-java')
         self.browser.snapshot(name='create project')
 
-        self.browser.click('.submit-new-team')
+        self.browser.click('.new-project-submit')
         self.browser.wait_until_not('.loading')
 
         assert Project.objects.get(team__organization=self.org, name='Java')
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
new file mode 100644
index 0000000000..8e2d7dca1a
--- /dev/null
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -0,0 +1,584 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`CreateProject render() should render 1`] = `
+<div>
+  <h3>
+    Add Member to Organization
+  </h3>
+  <p>
+    Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one. Multiple emails delimited by commas.
+  </p>
+  <div
+    className=""
+  >
+    <LoadingIndicator
+      className="pull-right"
+      mini={true}
+    />
+    <TextField
+      disabled={false}
+      hideErrorMessage={false}
+      label="Email(s)"
+      name="email"
+      onChange={[Function]}
+      placeholder="e.g. teammate@example.com"
+      required={false}
+      spellCheck="false"
+    />
+  </div>
+  <RoleSelect
+    roleList={Array []}
+    selectedRole="member"
+    setRole={[Function]}
+  />
+  <TeamSelect
+    selectedTeams={Array []}
+    teams={
+      Array [
+        Object {
+          "hasAccess": true,
+          "id": "1",
+          "name": "bar",
+          "slug": "bar",
+        },
+        Object {
+          "hasAccess": false,
+          "id": "2",
+          "name": "foo",
+          "slug": "foo",
+        },
+      ]
+    }
+    toggleTeam={[Function]}
+  />
+  <Button
+    className="invite-member-submit"
+    disabled={false}
+    onClick={[Function]}
+    priority="primary"
+  >
+    Add Member
+  </Button>
+</div>
+`;
+
+exports[`CreateProject render() should render no team select when there is only one option 1`] = `
+<InviteMember
+  params={
+    Object {
+      "orgId": "testOrg",
+    }
+  }
+>
+  <div>
+    <h3>
+      Add Member to Organization
+    </h3>
+    <p>
+      Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one. Multiple emails delimited by commas.
+    </p>
+    <div
+      className=""
+    >
+      <TextField
+        disabled={false}
+        hideErrorMessage={false}
+        label="Email(s)"
+        name="email"
+        onChange={[Function]}
+        placeholder="e.g. teammate@example.com"
+        required={false}
+        spellCheck="false"
+      >
+        <div
+          className="control-group"
+        >
+          <div
+            className="controls"
+          >
+            <label
+              className="control-label"
+              htmlFor="id-email"
+            >
+              Email(s)
+            </label>
+            <input
+              className="form-control"
+              disabled={false}
+              id="id-email"
+              onChange={[Function]}
+              placeholder="e.g. teammate@example.com"
+              required={false}
+              spellCheck="false"
+              type="text"
+              value=""
+            />
+          </div>
+        </div>
+      </TextField>
+    </div>
+    <RoleSelect
+      roleList={
+        Array [
+          Object {
+            "allowed": true,
+            "role": Object {
+              "desc": "a normal member",
+              "id": "1",
+              "name": "member",
+            },
+          },
+        ]
+      }
+      selectedRole="member"
+      setRole={[Function]}
+    >
+      <div
+        className="new-invite-team box"
+      >
+        <div
+          className="box-header"
+        >
+          <h4>
+            Role:
+          </h4>
+        </div>
+        <div
+          className="box-content with-padding"
+        >
+          <ul
+            className="radio-inputs"
+          >
+            <li
+              className="radio"
+              onClick={[Function]}
+              style={Object {}}
+            >
+              <label
+                style={Object {}}
+              >
+                <Radio
+                  checked={false}
+                  id="1"
+                  readOnly={true}
+                  value="member"
+                >
+                  <input
+                    checked={false}
+                    className="radio-select"
+                    id="1"
+                    readOnly={true}
+                    type="radio"
+                    value="member"
+                  />
+                </Radio>
+                member
+                <div
+                  className="help-block"
+                >
+                  a normal member
+                </div>
+              </label>
+            </li>
+          </ul>
+        </div>
+      </div>
+    </RoleSelect>
+    <TeamSelect
+      selectedTeams={
+        Array [
+          "bar",
+        ]
+      }
+      teams={
+        Array [
+          Object {
+            "hasAccess": true,
+            "id": "1",
+            "name": "bar",
+            "slug": "bar",
+          },
+        ]
+      }
+      toggleTeam={[Function]}
+    />
+    <Button
+      className="invite-member-submit"
+      disabled={false}
+      onClick={[Function]}
+      priority="primary"
+    >
+      <button
+        className="invite-member-submit button button-primary"
+        disabled={false}
+        onClick={[Function]}
+        role="button"
+      >
+        <FlowLayout
+          truncate={false}
+        >
+          <div
+            className="flow-layout"
+          >
+            <span
+              className="button-label"
+            >
+              Add Member
+            </span>
+          </div>
+        </FlowLayout>
+      </button>
+    </Button>
+  </div>
+</InviteMember>
+`;
+
+exports[`CreateProject render() should render roles when available and allowed, and handle submitting 1`] = `
+<InviteMember
+  params={
+    Object {
+      "orgId": "testOrg",
+    }
+  }
+>
+  <div>
+    <h3>
+      Add Member to Organization
+    </h3>
+    <p>
+      Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one. Multiple emails delimited by commas.
+    </p>
+    <div
+      className=""
+    >
+      <TextField
+        disabled={false}
+        hideErrorMessage={false}
+        label="Email(s)"
+        name="email"
+        onChange={[Function]}
+        placeholder="e.g. teammate@example.com"
+        required={false}
+        spellCheck="false"
+      >
+        <div
+          className="control-group"
+        >
+          <div
+            className="controls"
+          >
+            <label
+              className="control-label"
+              htmlFor="id-email"
+            >
+              Email(s)
+            </label>
+            <input
+              className="form-control"
+              disabled={false}
+              id="id-email"
+              onChange={[Function]}
+              placeholder="e.g. teammate@example.com"
+              required={false}
+              spellCheck="false"
+              type="text"
+              value=""
+            />
+          </div>
+        </div>
+      </TextField>
+    </div>
+    <RoleSelect
+      roleList={
+        Array [
+          Object {
+            "allowed": true,
+            "role": Object {
+              "desc": "a normal member",
+              "id": "1",
+              "name": "member",
+            },
+          },
+          Object {
+            "allowed": true,
+            "role": Object {
+              "desc": "another role",
+              "id": "2",
+              "name": "bar",
+            },
+          },
+        ]
+      }
+      selectedRole="1"
+      setRole={[Function]}
+    >
+      <div
+        className="new-invite-team box"
+      >
+        <div
+          className="box-header"
+        >
+          <h4>
+            Role:
+          </h4>
+        </div>
+        <div
+          className="box-content with-padding"
+        >
+          <ul
+            className="radio-inputs"
+          >
+            <li
+              className="radio"
+              onClick={[Function]}
+              style={Object {}}
+            >
+              <label
+                style={Object {}}
+              >
+                <Radio
+                  checked={true}
+                  id="1"
+                  readOnly={true}
+                  value="member"
+                >
+                  <input
+                    checked={true}
+                    className="radio-select"
+                    id="1"
+                    readOnly={true}
+                    type="radio"
+                    value="member"
+                  />
+                </Radio>
+                member
+                <div
+                  className="help-block"
+                >
+                  a normal member
+                </div>
+              </label>
+            </li>
+            <li
+              className="radio"
+              onClick={[Function]}
+              style={Object {}}
+            >
+              <label
+                style={Object {}}
+              >
+                <Radio
+                  checked={false}
+                  id="2"
+                  readOnly={true}
+                  value="bar"
+                >
+                  <input
+                    checked={false}
+                    className="radio-select"
+                    id="2"
+                    readOnly={true}
+                    type="radio"
+                    value="bar"
+                  />
+                </Radio>
+                bar
+                <div
+                  className="help-block"
+                >
+                  another role
+                </div>
+              </label>
+            </li>
+          </ul>
+        </div>
+      </div>
+    </RoleSelect>
+    <TeamSelect
+      selectedTeams={
+        Array [
+          "bar",
+        ]
+      }
+      teams={
+        Array [
+          Object {
+            "hasAccess": true,
+            "id": "1",
+            "name": "bar",
+            "slug": "bar",
+          },
+          Object {
+            "hasAccess": false,
+            "id": "2",
+            "name": "foo",
+            "slug": "foo",
+          },
+        ]
+      }
+      toggleTeam={[Function]}
+    >
+      <div
+        className="new-invite-team box"
+      >
+        <div
+          className="box-header"
+        >
+          <h4>
+            Team:
+          </h4>
+        </div>
+        <div
+          className="grouping-controls team-choices row box-content with-padding"
+        >
+          <div
+            className="col-md-3"
+            onClick={[Function]}
+          >
+            <label
+              className="checkbox"
+            >
+              <Checkbox
+                checked={true}
+                id="bar"
+                value="bar"
+              >
+                <input
+                  checked={true}
+                  className="chk-select"
+                  id="bar"
+                  type="checkbox"
+                  value="bar"
+                />
+              </Checkbox>
+              bar
+              <span
+                className="team-slug"
+              >
+                bar
+              </span>
+            </label>
+          </div>
+          <div
+            className="col-md-3"
+            onClick={[Function]}
+          >
+            <label
+              className="checkbox"
+            >
+              <Checkbox
+                checked={false}
+                id="foo"
+                value="foo"
+              >
+                <input
+                  checked={false}
+                  className="chk-select"
+                  id="foo"
+                  type="checkbox"
+                  value="foo"
+                />
+              </Checkbox>
+              foo
+              <span
+                className="team-slug"
+              >
+                foo
+              </span>
+            </label>
+          </div>
+        </div>
+      </div>
+    </TeamSelect>
+    <Button
+      className="invite-member-submit"
+      disabled={false}
+      onClick={[Function]}
+      priority="primary"
+    >
+      <button
+        className="invite-member-submit button button-primary"
+        disabled={false}
+        onClick={[Function]}
+        role="button"
+      >
+        <FlowLayout
+          truncate={false}
+        >
+          <div
+            className="flow-layout"
+          >
+            <span
+              className="button-label"
+            >
+              Add Member
+            </span>
+          </div>
+        </FlowLayout>
+      </button>
+    </Button>
+  </div>
+</InviteMember>
+`;
+
+exports[`CreateProject render() should use invite/add language based on config 1`] = `
+<div>
+  <h3>
+    Add Member to Organization
+  </h3>
+  <p>
+    You may add a user by their username if they already have an account. Multiple inputs delimited by commas.
+  </p>
+  <div
+    className=""
+  >
+    <LoadingIndicator
+      className="pull-right"
+      mini={true}
+    />
+    <TextField
+      disabled={false}
+      hideErrorMessage={false}
+      label="Username(s)"
+      name="email"
+      onChange={[Function]}
+      placeholder="e.g. teammate@example.com"
+      required={false}
+      spellCheck="false"
+    />
+  </div>
+  <RoleSelect
+    roleList={Array []}
+    selectedRole="member"
+    setRole={[Function]}
+  />
+  <TeamSelect
+    selectedTeams={Array []}
+    teams={
+      Array [
+        Object {
+          "hasAccess": true,
+          "id": "1",
+          "name": "bar",
+          "slug": "bar",
+        },
+        Object {
+          "hasAccess": false,
+          "id": "2",
+          "name": "foo",
+          "slug": "foo",
+        },
+      ]
+    }
+    toggleTeam={[Function]}
+  />
+  <Button
+    className="invite-member-submit"
+    disabled={false}
+    onClick={[Function]}
+    priority="primary"
+  >
+    Add Member
+  </Button>
+</div>
+`;
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
new file mode 100644
index 0000000000..4cd0c92550
--- /dev/null
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -0,0 +1,182 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+import _ from 'lodash';
+import InviteMember from 'app/views/inviteMember/inviteMember';
+import {Client} from 'app/api';
+import ConfigStore from 'app/stores/configStore';
+
+jest.mock('app/api');
+jest.mock('jquery');
+
+describe('CreateProject', function() {
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+    this.sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: true});
+    Client.clearMockResponses();
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe('render()', function() {
+    const baseProps = {
+      params: {
+        orgId: 'testOrg'
+      }
+    };
+
+    const baseContext = {
+      context: {
+        organization: {
+          id: '1',
+          slug: 'testOrg',
+          teams: [
+            {slug: 'bar', id: '1', name: 'bar', hasAccess: true},
+            {slug: 'foo', id: '2', name: 'foo', hasAccess: false}
+          ]
+        },
+        router: TestStubs.router(),
+        location: {query: {}}
+      },
+      childContextTypes: {
+        organization: React.PropTypes.object,
+        location: React.PropTypes.object,
+        router: React.PropTypes.object
+      }
+    };
+
+    it('should render', function() {
+      let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('should render no team select when there is only one option', function() {
+      Client.addMockResponse({
+        url: '/organizations/testOrg/members/me/',
+        body: {
+          allowed_roles: [
+            {
+              role: {
+                id: '1',
+                name: 'member',
+                desc: 'a normal member'
+              },
+              allowed: true
+            }
+          ]
+        }
+      });
+
+      let context = _.cloneDeep(baseContext);
+
+      context.context.organization.teams = context.context.organization.teams.slice(0, 1);
+
+      let wrapper = mount(<InviteMember {...baseProps} />, context);
+
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('should use invite/add language based on config', function() {
+      this.sandbox.restore(ConfigStore, 'getConfig');
+      this.sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: false});
+
+      let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
+
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('should redirect when no roles available', function() {
+      Client.addMockResponse({
+        url: '/organizations/testOrg/members/me/',
+        body: {
+          allowed_roles: [
+            {
+              role: {
+                id: '1',
+                name: 'member',
+                desc: 'a normal member'
+              },
+              allowed: false
+            }
+          ]
+        }
+      });
+
+      let handleSubmitStub = this.sandbox.stub(
+        InviteMember.prototype,
+        'redirectToMemberPage'
+      );
+      // 👺 ⚠️ this is a hack to defeat the method auto binding so we can fully stub the method. It would not be neccessary with es6 class components and it relies on react internals so it's fragile - maxbittker
+      const index =
+        InviteMember.prototype.__reactAutoBindPairs.indexOf('redirectToMemberPage') + 1;
+      InviteMember.prototype.__reactAutoBindPairs[index] = handleSubmitStub;
+
+      let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+
+      expect(handleSubmitStub.callCount).toEqual(1);
+      expect(wrapper.state('loading')).toBe(false);
+    });
+
+    it('should render roles when available and allowed, and handle submitting', function(
+      done
+    ) {
+      Client.addMockResponse({
+        url: '/organizations/testOrg/members/me/',
+        body: {
+          allowed_roles: [
+            {
+              role: {id: '1', name: 'member', desc: 'a normal member'},
+              allowed: true
+            },
+            {
+              role: {id: '2', name: 'bar', desc: 'another role'},
+              allowed: true
+            }
+          ]
+        }
+      });
+
+      let inviteRequest = {
+        url: '/organizations/testOrg/members/',
+        method: 'POST',
+        statusCode: 200,
+        body: {}
+      };
+
+      Client.addMockResponse(inviteRequest);
+
+      let wrapper;
+
+      // 👺 ⚠️ this is a hack to defeat the method auto binding so we can fully stub the method. It would not be neccessary with es6 class components and it relies on react internals so it's fragile - maxbittker
+      const index =
+        InviteMember.prototype.__reactAutoBindPairs.indexOf('redirectToMemberPage') + 1;
+
+      InviteMember.prototype.__reactAutoBindPairs[index] = () => {
+        expect(Client.getCallCount(inviteRequest)).toBe(3);
+        expect(wrapper.state('loading')).toBe(true);
+        done();
+      };
+
+      wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+
+      expect(wrapper.state('loading')).toBe(false);
+
+      let node = wrapper.find('.radio').first();
+      node.props().onClick();
+
+      node = wrapper.find('.team-choices > div').first();
+      node.props().onClick({preventDefault: () => {}});
+
+      expect(wrapper).toMatchSnapshot();
+
+      node = wrapper.find('.invite-member-submit').first();
+      node.props().onClick({preventDefault: () => {}});
+      expect(wrapper.state('loading')).toBe(false);
+
+      wrapper.setState({email: 'test@email.com, test2@email.com, test3@email.com, '});
+
+      node.props().onClick({preventDefault: () => {}});
+    });
+  });
+});
diff --git a/tests/js/spec/views/onboarding/__snapshots__/createProject.spec.jsx.snap b/tests/js/spec/views/onboarding/__snapshots__/createProject.spec.jsx.snap
index 97a2ad1e68..0bb6a10f3e 100644
--- a/tests/js/spec/views/onboarding/__snapshots__/createProject.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/__snapshots__/createProject.spec.jsx.snap
@@ -757,7 +757,7 @@ exports[`CreateProject render() should deal with incorrect platform name if its
           </div>
           <div>
             <button
-              className="btn btn-primary submit-new-team"
+              className="btn btn-primary new-project-submit"
               onClick={[Function]}
             >
               Create Project
@@ -1122,7 +1122,7 @@ exports[`CreateProject render() should fill in platform name if its provided by
           </div>
           <div>
             <button
-              className="btn btn-primary submit-new-team"
+              className="btn btn-primary new-project-submit"
               onClick={[Function]}
             >
               Create Project
@@ -1877,7 +1877,7 @@ exports[`CreateProject render() should fill in project name if its empty when pl
           </div>
           <div>
             <button
-              className="btn btn-primary submit-new-team"
+              className="btn btn-primary new-project-submit"
               onClick={[Function]}
             >
               Create Project
diff --git a/tests/js/spec/views/onboarding/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/__snapshots__/index.spec.jsx.snap
index 83a1793931..ebc2e6c26a 100644
--- a/tests/js/spec/views/onboarding/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/__snapshots__/index.spec.jsx.snap
@@ -814,7 +814,7 @@ exports[`OnboardingWizard render() should render and respond to click events 1`]
               </div>
               <div>
                 <button
-                  className="btn btn-primary submit-new-team"
+                  className="btn btn-primary new-project-submit"
                   onClick={[Function]}
                 >
                   Create Project
@@ -1624,7 +1624,7 @@ exports[`OnboardingWizard render() should render and respond to click events 2`]
               </div>
               <div>
                 <button
-                  className="btn btn-primary submit-new-team"
+                  className="btn btn-primary new-project-submit"
                   onClick={[Function]}
                 >
                   Create Project
diff --git a/tests/js/spec/views/onboarding/project/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/project/__snapshots__/index.spec.jsx.snap
index f1be60b5b6..7186dcee75 100644
--- a/tests/js/spec/views/onboarding/project/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/project/__snapshots__/index.spec.jsx.snap
@@ -56,7 +56,7 @@ exports[`Project render() should render NotFound if no matching organization 1`]
     </div>
     <div>
       <button
-        className="btn btn-primary submit-new-team"
+        className="btn btn-primary new-project-submit"
         onClick={[Function]}
       >
         Create Project
@@ -797,7 +797,7 @@ exports[`Project render() should set required class on empty submit 1`] = `
       </div>
       <div>
         <button
-          className="btn btn-primary submit-new-team"
+          className="btn btn-primary new-project-submit"
           onClick={[Function]}
         >
           Create Project
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index 4717298605..6b795255c0 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -1,20 +1,23 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
+from django.core import mail
 
 from sentry.testutils import APITestCase
+from sentry.models import OrganizationMember, OrganizationMemberTeam
 
 
 class OrganizationMemberListTest(APITestCase):
     def setUp(self):
-        self.user_1 = self.create_user('foo@localhost', username='foo')
+        self.owner_user = self.create_user('foo@localhost', username='foo')
         self.user_2 = self.create_user('bar@localhost', username='bar')
         self.create_user('baz@localhost', username='baz')
 
-        self.org = self.create_organization(owner=self.user_1)
+        self.org = self.create_organization(owner=self.owner_user)
         self.org.member_set.create(user=self.user_2)
+        self.team = self.create_team(organization=self.org)
 
-        self.login_as(user=self.user_1)
+        self.login_as(user=self.owner_user)
 
         self.url = reverse(
             'sentry-api-0-organization-member-index', kwargs={
@@ -28,19 +31,214 @@ class OrganizationMemberListTest(APITestCase):
         assert response.status_code == 200
         assert len(response.data) == 2
         assert response.data[0]['email'] == self.user_2.email
-        assert response.data[1]['email'] == self.user_1.email
+        assert response.data[1]['email'] == self.owner_user.email
 
     def test_email_query(self):
         response = self.client.get(self.url + "?query=email:foo@localhost")
 
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['email'] == self.user_1.email
+        assert response.data[0]['email'] == self.owner_user.email
 
     def test_user_email_email_query(self):
-        self.create_useremail(self.user_1, 'baz@localhost')
+        self.create_useremail(self.owner_user, 'baz@localhost')
         response = self.client.get(self.url + "?query=email:baz@localhost")
 
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['email'] == self.user_1.email
+        assert response.data[0]['email'] == self.owner_user.email
+
+    def test_owner_invites(self):
+        self.login_as(user=self.owner_user)
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'owner', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 201
+        assert response.data['email'] == 'eric@localhost'
+
+    def test_valid_for_invites(self):
+        self.login_as(user=self.owner_user)
+
+        with self.settings(SENTRY_ENABLE_INVITES=True), self.tasks():
+            resp = self.client.post(
+                self.url,
+                {'email': 'foo@example.com',
+                 'role': 'admin',
+                 'teams': [
+                     self.team.slug,
+                 ]}
+            )
+        assert resp.status_code == 201
+
+        member = OrganizationMember.objects.get(
+            organization=self.org,
+            email='foo@example.com',
+        )
+
+        assert member.user is None
+        assert member.role == 'admin'
+
+        om_teams = OrganizationMemberTeam.objects.filter(
+            organizationmember=member.id)
+
+        assert len(om_teams) == 1
+        assert om_teams[0].team_id == self.team.id
+
+        assert len(mail.outbox) == 1
+        assert mail.outbox[0].to == ['foo@example.com']
+        assert mail.outbox[0].subject == 'Join {} in using Sentry'.format(
+            self.org.name)
+
+    def test_existing_user_for_invite(self):
+        self.login_as(user=self.owner_user)
+
+        user = self.create_user('foobar@example.com')
+
+        member = OrganizationMember.objects.create(
+            organization=self.org,
+            user=user,
+            role='member',
+        )
+
+        with self.settings(SENTRY_ENABLE_INVITES=True):
+            resp = self.client.post(
+                self.url, {'email': user.email, 'role': 'member', 'teams': [
+                    self.team.slug,
+                ]})
+
+        assert resp.status_code == 409
+
+        member = OrganizationMember.objects.get(id=member.id)
+
+        assert member.email is None
+        assert member.role == 'member'
+
+    def test_valid_for_direct_add(self):
+        self.login_as(user=self.owner_user)
+
+        user = self.create_user('baz@example.com')
+
+        with self.settings(SENTRY_ENABLE_INVITES=False):
+            resp = self.client.post(
+                self.url, {'email': user.email, 'role': 'member', 'teams': [
+                    self.team.slug,
+                ]})
+
+        assert resp.status_code == 201
+
+        member = OrganizationMember.objects.get(
+            organization=self.org,
+            email=user.email,
+        )
+        assert len(mail.outbox) == 0
+        assert member.role == 'member'
+
+    def test_invalid_user_for_direct_add(self):
+        self.login_as(user=self.owner_user)
+
+        with self.settings(SENTRY_ENABLE_INVITES=False):
+            resp = self.client.post(
+                self.url, {'email': 'notexisting@example.com', 'role': 'admin', 'teams': [
+                    self.team.slug,
+                ]})
+
+        assert resp.status_code == 201
+
+        member = OrganizationMember.objects.get(
+            organization=self.org,
+            email='notexisting@example.com',
+        )
+        assert len(mail.outbox) == 0
+        # todo(maxbittker) this test is a false positive, need to figure out why
+        assert member.role == 'admin'
+
+    # permission role stuff:
+    def test_manager_invites(self):
+        manager_user = self.create_user('manager@localhost')
+        self.manager = self.create_member(
+            user=manager_user, organization=self.org, role='manager')
+        self.login_as(user=manager_user)
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'owner', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 403
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'manager', 'teams': [self.team.slug]
+            })
+        assert response.status_code == 201
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'member', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 409
+
+    def test_admin_invites(self):
+        admin_user = self.create_user('admin22@localhost')
+        self.admin = self.create_member(
+            user=admin_user, organization=self.org, role='admin')
+
+        self.login_as(user=admin_user)
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'owner', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 403
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'manager', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 403
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'member', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 403  # is this one right?
+
+    def test_member_invites(self):
+        member_user = self.create_user('member@localhost')
+        self.admin = self.create_member(
+            user=member_user, organization=self.org, role='member')
+
+        self.login_as(user=member_user)
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'owner', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 403
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'manager', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 403
+
+        response = self.client.post(
+            self.url, {
+                'email': 'eric@localhost', 'role': 'member', 'teams': [self.team.slug]
+            })
+
+        assert response.status_code == 403
+
+    def test_duplicate_email_invites(self):
+        pass
+
+    def test_no_team_invites(self):
+        pass
diff --git a/tests/sentry/web/frontend/test_create_organization_member.py b/tests/sentry/web/frontend/test_create_organization_member.py
deleted file mode 100644
index 8d45120375..0000000000
--- a/tests/sentry/web/frontend/test_create_organization_member.py
+++ /dev/null
@@ -1,147 +0,0 @@
-from __future__ import absolute_import
-
-from django.core import mail
-from django.core.urlresolvers import reverse
-
-from sentry.models import OrganizationMember, OrganizationMemberTeam
-from sentry.testutils import PermissionTestCase, TestCase
-
-
-class CreateOrganizationMemberPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(CreateOrganizationMemberPermissionTest, self).setUp()
-        self.path = reverse('sentry-create-organization-member', args=[self.organization.slug])
-
-    def test_teamless_admin_cannot_load(self):
-        self.assert_teamless_admin_cannot_access(self.path)
-
-    def test_owner_can_load(self):
-        self.assert_owner_can_access(self.path)
-
-    def test_member_cannot_load(self):
-        self.assert_member_cannot_access(self.path)
-
-
-class CreateOrganizationMemberTest(TestCase):
-    def test_renders_with_team_preselected(self):
-        # If org has just one team, it is selected by default
-        organization = self.create_organization()
-        team = self.create_team(name='foo', organization=organization)
-        path = reverse('sentry-create-organization-member', args=[organization.slug])
-        self.login_as(self.user)
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/create-organization-member.html')
-        assert resp.context['organization'] == organization
-        assert resp.context['form']
-        assert resp.context['form'].initial['teams'][0] == team
-
-    def test_renders_no_teams_seleced(self):
-        # With multiple teams, *no* teams are selected by default
-        organization = self.create_organization()
-        self.create_team(name='one', organization=organization)
-        self.create_team(name='two', organization=organization)
-        path = reverse('sentry-create-organization-member', args=[organization.slug])
-        self.login_as(self.user)
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/create-organization-member.html')
-        assert resp.context['organization'] == organization
-        assert resp.context['form']
-        assert len(resp.context['form'].initial['teams']) == 0
-
-    def test_valid_for_invites(self):
-        organization = self.create_organization(name='Default')
-        team = self.create_team(name='foo', organization=organization)
-
-        path = reverse('sentry-create-organization-member', args=[organization.slug])
-        self.login_as(self.user)
-
-        with self.settings(SENTRY_ENABLE_INVITES=True), self.tasks():
-            resp = self.client.post(
-                path, {'email': 'foo@example.com',
-                       'role': 'admin',
-                       'teams': [
-                           team.id,
-                       ]}
-            )
-        assert resp.status_code == 302
-
-        member = OrganizationMember.objects.get(
-            organization=organization,
-            email='foo@example.com',
-        )
-
-        assert member.user is None
-        assert member.role == 'admin'
-
-        om_teams = OrganizationMemberTeam.objects.filter(organizationmember=member)
-
-        assert len(om_teams) == 1
-        assert om_teams[0].team_id == team.id
-
-        redirect_uri = reverse('sentry-organization-members', args=[organization.slug])
-        assert resp['Location'] == 'http://testserver' + redirect_uri
-
-        assert len(mail.outbox) == 1
-        assert mail.outbox[0].to == ['foo@example.com']
-        assert mail.outbox[0].subject == 'Join Default in using Sentry'
-
-    def test_existing_user_for_invite(self):
-        organization = self.create_organization()
-        path = reverse('sentry-create-organization-member', args=[organization.slug])
-        self.login_as(self.user)
-
-        user = self.create_user('foo@example.com')
-
-        member = OrganizationMember.objects.create(
-            organization=organization,
-            user=user,
-            role='member',
-        )
-
-        with self.settings(SENTRY_ENABLE_INVITES=True):
-            resp = self.client.post(path, {'email': 'foo@example.com', 'role': 'member'})
-
-        assert resp.status_code == 302
-
-        member = OrganizationMember.objects.get(id=member.id)
-
-        assert member.email is None
-        assert member.role == 'member'
-
-        redirect_uri = reverse('sentry-organization-members', args=[organization.slug])
-        assert resp['Location'] == 'http://testserver' + redirect_uri
-
-    def test_valid_for_direct_add(self):
-        organization = self.create_organization()
-        path = reverse('sentry-create-organization-member', args=[organization.slug])
-        self.login_as(self.user)
-
-        user = self.create_user('foo@example.com')
-
-        with self.settings(SENTRY_ENABLE_INVITES=False):
-            resp = self.client.post(path, {'user': 'foo@example.com', 'role': 'admin'})
-        assert resp.status_code == 302
-
-        member = OrganizationMember.objects.get(
-            organization=organization,
-            user=user,
-        )
-
-        assert member.email is None
-        assert member.role == 'admin'
-
-        redirect_uri = reverse('sentry-organization-members', args=[organization.slug])
-        assert resp['Location'] == 'http://testserver' + redirect_uri
-
-    def test_invalid_user_for_direct_add(self):
-        organization = self.create_organization()
-        path = reverse('sentry-create-organization-member', args=[organization.slug])
-        self.login_as(self.user)
-
-        with self.settings(SENTRY_ENABLE_INVITES=False):
-            resp = self.client.post(path, {'user': 'bar@example.com', 'role': 'member'})
-
-        assert resp.status_code == 200
-        assert 'user' in resp.context['form'].errors
