commit 05757d1f5101524077ec9f16b3a0087384490ea6
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Sep 7 13:59:30 2018 -0700

    ref(integrations): Map over errors to form responses (#9534)

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 4c75c88334..17fd741943 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -71,7 +71,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
 
         external_issue_id = request.DATA.get('externalIssue')
         if not external_issue_id:
-            return Response({'detail': 'External ID required'}, status=400)
+            return Response({'externalIssue': ['Issue ID is required']}, status=400)
 
         organization_id = group.project.organization_id
         try:
@@ -90,8 +90,10 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         installation = integration.get_installation(organization_id)
         try:
             data = installation.get_issue(external_issue_id, data=request.DATA)
+        except IntegrationFormError as exc:
+            return Response(exc.field_errors, status=400)
         except IntegrationError as exc:
-            return Response({'detail': exc.message}, status=400)
+            return Response({'non_field_errors': [exc.message]}, status=400)
 
         defaults = {
             'title': data.get('title'),
@@ -117,7 +119,12 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         else:
             external_issue.update(**defaults)
 
-        installation.after_link_issue(external_issue, data=request.DATA)
+        try:
+            installation.after_link_issue(external_issue, data=request.DATA)
+        except IntegrationFormError as exc:
+            return Response(exc.field_errors, status=400)
+        except IntegrationError as exc:
+            return Response({'non_field_errors': [exc.message]}, status=400)
 
         try:
             with transaction.atomic():
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index b9301db3c0..a0d114e17b 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -56,6 +56,9 @@ class BitbucketIntegration(Integration, BitbucketIssueBasicMixin, RepositoryMixi
     def username(self):
         return self.model.name
 
+    def error_message_from_json(self, data):
+        return data.get('error', {}).get('message', 'unknown error')
+
     def get_repositories(self, query=None):
         if not query:
             resp = self.get_client().get_repos(self.username)
diff --git a/src/sentry/integrations/bitbucket/issues.py b/src/sentry/integrations/bitbucket/issues.py
index 95367a40ae..5a87b476ab 100644
--- a/src/sentry/integrations/bitbucket/issues.py
+++ b/src/sentry/integrations/bitbucket/issues.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from sentry.integrations.issues import IssueBasicMixin
-from sentry.integrations.exceptions import ApiError, IntegrationError
+from sentry.integrations.exceptions import ApiError, IntegrationFormError
 
 
 ISSUE_TYPES = (
@@ -13,12 +13,6 @@ PRIORITIES = (
     ('blocker', 'Blocker'),
 )
 
-ERR_404 = (
-    'Bitbucket returned a 404. Please make sure that '
-    'the repo exists, you have access to it, and it has '
-    'issue tracking enabled.'
-)
-
 
 class BitbucketIssueBasicMixin(IssueBasicMixin):
 
@@ -27,16 +21,19 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
         return u'https://bitbucket.org/{}/issues/{}'.format(repo, issue_id)
 
     def get_repo_choices(self, **kwargs):
-
         try:
             repos = self.get_repositories()
         except ApiError:
-            repo_choices = []
-        else:
-            repo_choices = [(repo['identifier'], repo['name']) for repo in repos]
+            return [], None
 
+        repo_choices = [(repo['identifier'], repo['name']) for repo in repos]
         params = kwargs.get('params', {})
-        default_repo = params.get('repo', repo_choices[0][0])
+
+        try:
+            default_repo = params.get('repo', repo_choices[0][0])
+        except IndexError:
+            return repo_choices, None
+
         return repo_choices, default_repo
 
     def get_create_issue_config(self, group, **kwargs):
@@ -96,8 +93,8 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
             'label': 'Issue',
             'default': '',
             'type': 'select',
+            'required': True,
             'url': autocomplete_url,
-
         }, {
             'name': 'comment',
             'label': 'Comment',
@@ -110,7 +107,14 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
 
     def create_issue(self, data, **kwargs):
         client = self.get_client()
-        issue = client.create_issue(data.get('repo'), data)
+        if not data.get('repo'):
+            raise IntegrationFormError({'repo': ['Repository is required']})
+
+        try:
+            issue = client.create_issue(data.get('repo'), data)
+        except ApiError as e:
+            self.raise_error(e)
+
         return {
             'key': issue['id'],
             'title': issue['title'],
@@ -129,11 +133,6 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
             'repo': repo,
         }
 
-    def message_from_error(self, exc):
-        if isinstance(exc, ApiError) and exc.code == 404:
-            return ERR_404
-        return super(BitbucketIssueBasicMixin, self).message_from_error(exc)
-
     def make_external_key(self, data):
         return u'{}#{}'.format(data['repo'], data['key'])
 
@@ -144,10 +143,9 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
         repo, issue_num = external_issue.key.split('#')
 
         if not repo:
-            raise IntegrationError('repo must be provided')
-
+            raise IntegrationFormError({'repo': 'Repository is required'})
         if not issue_num:
-            raise IntegrationError('issue number must be provided')
+            raise IntegrationFormError({'externalIssue': 'Issue ID is required'})
 
         comment = data.get('comment')
         if comment:
@@ -158,4 +156,4 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
                     data={'content': {'raw': comment}}
                 )
             except ApiError as e:
-                raise IntegrationError(self.message_from_error(e))
+                self.raise_error(e)
