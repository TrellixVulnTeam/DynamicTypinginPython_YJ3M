commit c081a1a198cf949ed2ed94a65316a1599662128e
Author: Mark Story <mark@mark-story.com>
Date:   Fri Mar 29 11:29:34 2019 -0400

    fix(ui) Remove teams by slug instead of by object (#12591)
    
    Currently selected teams may not always be in the loaded state which
    contains the first 100 teams. This results in the find() failing and
    downstream actions failing. Removing by slug avoids this problem and
    gives enough context to make delete API calls.
    
    I've added more tests to the invite member view as there wasn't any
    coverage around adding/removing teams.
    
    Fixes SEN-441
    Fixes JAVASCRIPT-5XX

diff --git a/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx b/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
index b22c854227..f11b6b21e4 100644
--- a/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
@@ -62,9 +62,8 @@ class TeamSelect extends React.Component {
     this.props.onAddTeam(team);
   };
 
-  handleRemove = value => {
-    const team = this.state.teams.find(tm => tm.slug === value);
-    this.props.onRemoveTeam(team);
+  handleRemove = teamSlug => {
+    this.props.onRemoveTeam(teamSlug);
   };
 
   renderTeamAddDropDown() {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index d11dbe596e..3f366eee47 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -205,9 +205,9 @@ const InviteMember = createReactClass({
     this.setState({selectedTeams});
   },
 
-  handleRemoveTeam(team) {
+  handleRemoveTeam(teamSlug) {
     const {selectedTeams} = this.state;
-    selectedTeams.delete(team.slug);
+    selectedTeams.delete(teamSlug);
 
     this.setState({selectedTeams});
   },
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
index 510bebd437..540b09d1da 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
@@ -121,13 +121,13 @@ class OrganizationMemberDetail extends AsyncView {
     this.setState({member});
   };
 
-  handleRemoveTeam = team => {
+  handleRemoveTeam = removedTeam => {
     const {member} = this.state;
 
     this.setState({
       member: {
         ...member,
-        teams: member.teams.filter(teamSlug => teamSlug !== team.slug),
+        teams: member.teams.filter(slug => slug !== removedTeam),
       },
     });
   };
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
index e2eb868dcf..fa0cb2a500 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
@@ -27,26 +27,26 @@ class ProjectTeams extends AsyncView {
     );
   };
 
-  handleRemove = team => {
+  handleRemove = teamSlug => {
     if (this.state.loading) {
       return;
     }
 
     const {orgId, projectId} = this.props.params;
 
-    removeTeamFromProject(this.api, orgId, projectId, team.slug)
-      .then(() => this.handleRemovedTeam(team))
+    removeTeamFromProject(this.api, orgId, projectId, teamSlug)
+      .then(() => this.handleRemovedTeam(teamSlug))
       .catch(() => {
-        addErrorMessage(t('Could not remove the %s team', team.slug));
+        addErrorMessage(t('Could not remove the %s team', teamSlug));
         this.setState({loading: false});
       });
   };
 
-  handleRemovedTeam = removedTeam => {
+  handleRemovedTeam = teamSlug => {
     this.setState(prevState => {
       return {
         projectTeams: this.state.projectTeams.filter(team => {
-          return team.slug !== removedTeam.slug;
+          return team.slug !== teamSlug;
         }),
       };
     });
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index 943be987ac..a9beec0144 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -1,6 +1,6 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`CreateProject should render loading 1`] = `
+exports[`InviteMember should render loading 1`] = `
 <div>
   <SettingsPageHeading
     noTitleStyles={false}
@@ -13,7 +13,7 @@ exports[`CreateProject should render loading 1`] = `
 </div>
 `;
 
-exports[`CreateProject should render roles when available and allowed, and handle submitting 1`] = `
+exports[`InviteMember should render roles when available and allowed, and handle submitting 1`] = `
 <InviteMember
   location={
     Object {
@@ -700,7 +700,7 @@ exports[`CreateProject should render roles when available and allowed, and handl
 </InviteMember>
 `;
 
-exports[`CreateProject should use invite/add language based on config 1`] = `
+exports[`InviteMember should use invite/add language based on config 1`] = `
 <TextBlock>
   You may add a user by their username if they already have an account. Multiple inputs delimited by commas.
 </TextBlock>
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index 3bd8140e00..17e6cd8680 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -7,7 +7,7 @@ import ConfigStore from 'app/stores/configStore';
 jest.mock('app/api');
 jest.mock('jquery');
 
-describe('CreateProject', function() {
+describe('InviteMember', function() {
   const baseProps = {
     params: {
       orgId: 'testOrg',
@@ -47,8 +47,6 @@ describe('CreateProject', function() {
     });
   });
 
-  afterEach(function() {});
-
   it('should render loading', function() {
     const wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
     expect(wrapper).toMatchSnapshot();
@@ -229,4 +227,105 @@ describe('CreateProject', function() {
     expect(wrapper.find('.has-error #id-email')).toHaveLength(1);
     expect(wrapper.find('.has-error .error').text()).toBe('Enter a valid email address.');
   });
+
+  it('allows teams to be removed', async function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/me/',
+      body: {
+        roles: [
+          {id: '1', name: 'member', desc: 'a normal member', allowed: true},
+          {id: '2', name: 'bar', desc: 'another role', allowed: true},
+        ],
+      },
+    });
+    const inviteRequest = MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/',
+      method: 'POST',
+      statusCode: 200,
+    });
+
+    const wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+    // Wait for team list to load
+    await tick();
+
+    // set the email address
+    wrapper.find('input[name="email"]').simulate('change', {
+      target: {value: 'test@example.com'},
+    });
+
+    // Select new team to join
+    // Open the dropdown
+    wrapper.find('TeamSelect DropdownButton').simulate('click');
+
+    // Click the first item
+    wrapper
+      .find('TeamSelect TeamDropdownElement')
+      .first()
+      .simulate('click');
+
+    // Remove our one team
+    const button = wrapper.find('TeamSelect TeamRow Button');
+    expect(button).toHaveLength(1);
+    button.simulate('click');
+
+    // Save Member
+    wrapper.find('Button[priority="primary"]').simulate('click');
+
+    expect(inviteRequest).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: expect.objectContaining({
+          teams: [],
+        }),
+      })
+    );
+  });
+
+  it('allows teams to be added', async function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/me/',
+      body: {
+        roles: [
+          {id: '1', name: 'member', desc: 'a normal member', allowed: true},
+          {id: '2', name: 'bar', desc: 'another role', allowed: true},
+        ],
+      },
+    });
+    const inviteRequest = MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/',
+      method: 'POST',
+      statusCode: 200,
+    });
+    const wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+
+    // Wait for team list to fetch.
+    await wrapper.update();
+
+    // set the email address
+    wrapper.find('input[name="email"]').simulate('change', {
+      target: {value: 'test@example.com'},
+    });
+
+    // Select new team to join
+    // Open the dropdown
+    wrapper.find('TeamSelect DropdownButton').simulate('click');
+
+    // Click the first item
+    wrapper
+      .find('TeamSelect TeamDropdownElement')
+      .first()
+      .simulate('click');
+
+    // Save Member
+    wrapper.find('Button[priority="primary"]').simulate('click');
+
+    expect(inviteRequest).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: expect.objectContaining({
+          teams: ['bar'],
+        }),
+      })
+    );
+  });
 });
diff --git a/tests/js/spec/views/projectTeams.spec.jsx b/tests/js/spec/views/projectTeams.spec.jsx
index 49f9ac681f..caad1df347 100644
--- a/tests/js/spec/views/projectTeams.spec.jsx
+++ b/tests/js/spec/views/projectTeams.spec.jsx
@@ -127,6 +127,85 @@ describe('ProjectTeams', function() {
     );
   });
 
+  it('removes team from project when project team is not in org list', async function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/teams/`,
+      method: 'GET',
+      body: [team, team2],
+    });
+
+    const endpoint = `/projects/${org.slug}/${project.slug}/teams/${team.slug}/`;
+    const mock = MockApiClient.addMockResponse({
+      url: endpoint,
+      method: 'DELETE',
+    });
+
+    const endpoint2 = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
+    const mock2 = MockApiClient.addMockResponse({
+      url: endpoint2,
+      method: 'DELETE',
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/teams/`,
+      method: 'GET',
+      body: [
+        TestStubs.Team({
+          id: '3',
+          slug: 'team-slug-3',
+          name: 'Team Name 3',
+          hasAccess: true,
+        }),
+      ],
+    });
+
+    const wrapper = mount(
+      <ProjectTeams
+        params={{orgId: org.slug, projectId: project.slug}}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+    // Wait for team list to fetch.
+    await wrapper.update();
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // Click "Remove"
+    wrapper
+      .find('PanelBody Button')
+      .first()
+      .simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      endpoint,
+      expect.objectContaining({
+        method: 'DELETE',
+      })
+    );
+
+    await tick();
+
+    // Remove second team
+    wrapper
+      .update()
+      .find('PanelBody Button')
+      .first()
+      .simulate('click');
+
+    // Modal opens because this is the last team in project
+    // Click confirm
+    wrapper.find('ModalDialog Button[priority="primary"]').simulate('click');
+
+    expect(mock2).toHaveBeenCalledWith(
+      endpoint2,
+      expect.objectContaining({
+        method: 'DELETE',
+      })
+    );
+  });
+
   it('can associate a team with project', async function() {
     const endpoint = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
     const mock = MockApiClient.addMockResponse({
