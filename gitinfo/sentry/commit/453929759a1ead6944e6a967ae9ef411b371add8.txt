commit 453929759a1ead6944e6a967ae9ef411b371add8
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Jan 8 09:57:01 2020 -0800

    feat(auth): adds saml2 providers (#16254)

diff --git a/setup.py b/setup.py
index d25652fa4a..101c9b2cd1 100755
--- a/setup.py
+++ b/setup.py
@@ -107,7 +107,12 @@ setup(
         "console_scripts": ["sentry = sentry.runner:main"],
         "sentry.apps": [
             # TODO: This can be removed once the getsentry tests no longer check for this app
+            "auth_auth0 = sentry.auth.providers.saml2.auth0",
             "auth_github = sentry.auth.providers.github",
+            "auth_okta = sentry.auth.providers.saml2.okta",
+            "auth_onelogin = sentry.auth.providers.saml2.onelogin",
+            "auth_rippling = sentry.auth.providers.saml2.rippling",
+            "auth_saml2 = sentry.auth.providers.saml2.generic",
             "jira_ac = sentry_plugins.jira_ac",
             "jira = sentry_plugins.jira",
             "freight = sentry_plugins.freight",
diff --git a/src/sentry/auth/providers/saml2/__init__.py b/src/sentry/auth/providers/saml2/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/auth/providers/saml2/auth0/__init__.py b/src/sentry/auth/providers/saml2/auth0/__init__.py
new file mode 100644
index 0000000000..847c429780
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/auth0/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+default_app_config = "sentry.auth.providers.saml2.auth0.apps.Config"
diff --git a/src/sentry/auth/providers/saml2/auth0/apps.py b/src/sentry/auth/providers/saml2/auth0/apps.py
new file mode 100644
index 0000000000..18bf1fc292
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/auth0/apps.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from django.apps import AppConfig
+
+
+class Config(AppConfig):
+    name = "sentry.auth.providers.saml2.auth0"
+
+    def ready(self):
+        from sentry.auth import register
+
+        from .provider import Auth0SAML2Provider
+
+        register("auth0", Auth0SAML2Provider)
diff --git a/src/sentry/auth/providers/saml2/auth0/provider.py b/src/sentry/auth/providers/saml2/auth0/provider.py
new file mode 100644
index 0000000000..ba6de47348
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/auth0/provider.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import, print_function
+
+from sentry.auth.providers.saml2.provider import SAML2Provider, Attributes
+from sentry.auth.providers.saml2.views import make_simple_setup
+from sentry.auth.providers.saml2.forms import URLMetadataForm
+
+
+SelectIdP = make_simple_setup(URLMetadataForm, "sentry_auth_auth0/select-idp.html")
+
+
+class Auth0SAML2Provider(SAML2Provider):
+    name = "Auth0"
+
+    def get_saml_setup_pipeline(self):
+        return [SelectIdP()]
+
+    def attribute_mapping(self):
+        return {
+            Attributes.IDENTIFIER: "user_id",
+            Attributes.USER_EMAIL: "email",
+            # Auth0 does not provider first / last names
+            Attributes.FIRST_NAME: "name",
+            Attributes.LAST_NAME: None,
+        }
diff --git a/src/sentry/auth/providers/saml2/auth0/templates/sentry_auth_auth0/select-idp.html b/src/sentry/auth/providers/saml2/auth0/templates/sentry_auth_auth0/select-idp.html
new file mode 100644
index 0000000000..045a16c441
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/auth0/templates/sentry_auth_auth0/select-idp.html
@@ -0,0 +1,30 @@
+{% extends "sentry/bases/modal.html" %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %}narrow auth{% endblock %}
+{% block modal_header_signout %}{% endblock %}
+
+{% block title %}{% trans "Register Auth0" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+<h3>{% trans "Register Auth0" %}</h3>
+
+<p>
+  As part of Auth0 SSO provisioning, you must to provide the Auth0 identity
+  provider Metadata URL to Sentry.
+</p>
+
+<form method="post" class="form-stacked">
+  {% csrf_token %}
+  {% include "sentry/partial/form_base.html" %}
+  <input type="hidden" name="provider" value="auth0" />
+
+  <fieldset class="form-actions">
+    <button type="submit" class="btn btn-primary" name="action_save">{% trans "Continue" %}</button>
+    <a class="pull-right" style="margin-top: 7px" href="https://docs.sentry.io/learn/sso/#auth0">
+      Need help finding your Metadata URL?
+    </a>
+  </fieldset>
+</form>
+{% endblock %}
diff --git a/src/sentry/auth/providers/saml2/forms.py b/src/sentry/auth/providers/saml2/forms.py
new file mode 100644
index 0000000000..7fcba61e13
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/forms.py
@@ -0,0 +1,122 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.utils.encoding import force_text
+from django.utils.translation import ugettext_lazy as _
+from onelogin.saml2.idp_metadata_parser import OneLogin_Saml2_IdPMetadataParser
+
+from django.forms.utils import ErrorList
+
+from sentry.http import safe_urlopen
+
+
+def extract_idp_data_from_parsed_data(data):
+    """
+    Transform data returned by the OneLogin_Saml2_IdPMetadataParser into the
+    expected IdP dict shape.
+    """
+    idp = data.get("idp", {})
+
+    # In some scenarios the IDP sticks the x509cert in the x509certMulti
+    # parameter
+    cert = idp.get("x509cert", idp.get("x509certMulti", {}).get("signing", [None])[0])
+
+    return {
+        "entity_id": idp.get("entityId"),
+        "sso_url": idp.get("singleSignOnService", {}).get("url"),
+        "slo_url": idp.get("singleLogoutService", {}).get("url"),
+        "x509cert": cert,
+    }
+
+
+def process_url(form):
+    url = form.cleaned_data["metadata_url"]
+    response = safe_urlopen(url)
+    data = OneLogin_Saml2_IdPMetadataParser.parse(response.content)
+    return extract_idp_data_from_parsed_data(data)
+
+
+def process_xml(form):
+    # cast unicode xml to byte string so lxml won't complain when trying to
+    # parse a xml document with a type declaration.
+    xml = form.cleaned_data["metadata_xml"].encode("utf8")
+    data = OneLogin_Saml2_IdPMetadataParser.parse(xml)
+    return extract_idp_data_from_parsed_data(data)
+
+
+class URLMetadataForm(forms.Form):
+    metadata_url = forms.URLField(label="Metadata URL")
+    processor = process_url
+
+
+class XMLMetadataForm(forms.Form):
+    metadata_xml = forms.CharField(label="Metadata XML", widget=forms.Textarea)
+    processor = process_xml
+
+
+class SAMLForm(forms.Form):
+    entity_id = forms.CharField(label="Entity ID")
+    sso_url = forms.URLField(label="Single Sign On URL")
+    slo_url = forms.URLField(label="Single Log Out URL", required=False)
+    x509cert = forms.CharField(label="x509 public certificate", widget=forms.Textarea)
+    processor = lambda d: d.cleaned_data
+
+
+def process_metadata(form_cls, request, helper):
+    form = form_cls()
+
+    if "action_save" not in request.POST:
+        return form
+
+    form = form_cls(request.POST)
+
+    if not form.is_valid():
+        return form
+
+    try:
+        data = form_cls.processor(form)
+    except Exception:
+        errors = form._errors.setdefault("__all__", ErrorList())
+        errors.append("Failed to parse provided SAML2 metadata")
+        return form
+
+    saml_form = SAMLForm(data)
+    if not saml_form.is_valid():
+        field_errors = [
+            "%s: %s" % (k, ", ".join([force_text(i) for i in v]))
+            for k, v in saml_form.errors.items()
+        ]
+        error_list = ", ".join(field_errors)
+
+        errors = form._errors.setdefault("__all__", ErrorList())
+        errors.append(u"Invalid metadata: {}".format(error_list))
+        return form
+
+    helper.bind_state("idp", data)
+
+    # Data is bound, do not respond with a form to signal the nexts steps
+    return None
+
+
+class AttributeMappingForm(forms.Form):
+    # NOTE: These fields explicitly map to the sentry.auth.saml2.Attributes keys
+    identifier = forms.CharField(
+        label="IdP User ID",
+        widget=forms.TextInput(attrs={"placeholder": "eg. user.uniqueID"}),
+        help_text=_(
+            "The IdPs unique ID attribute key for the user. This is "
+            "what Sentry will used to identify the users identity from "
+            "the identity provider."
+        ),
+    )
+    user_email = forms.CharField(
+        label="User Email",
+        widget=forms.TextInput(attrs={"placeholder": "eg. user.email"}),
+        help_text=_(
+            "The IdPs email address attribute key for the "
+            "user. Upon initial linking this will be used to identify "
+            "the user in Sentry."
+        ),
+    )
+    first_name = forms.CharField(label="First Name", required=False)
+    last_name = forms.CharField(label="Last Name", required=False)
diff --git a/src/sentry/auth/providers/saml2/generic/__init__.py b/src/sentry/auth/providers/saml2/generic/__init__.py
new file mode 100644
index 0000000000..ca48d9eb6b
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/generic/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+default_app_config = "sentry.auth.providers.saml2.generic.apps.Config"
diff --git a/src/sentry/auth/providers/saml2/generic/apps.py b/src/sentry/auth/providers/saml2/generic/apps.py
new file mode 100644
index 0000000000..ec7dd17f3d
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/generic/apps.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from django.apps import AppConfig
+
+
+class Config(AppConfig):
+    name = "sentry.auth.providers.saml2.generic"
+
+    def ready(self):
+        from sentry.auth import register
+
+        from .provider import GenericSAML2Provider
+
+        register("saml2", GenericSAML2Provider)
diff --git a/src/sentry/auth/providers/saml2/generic/provider.py b/src/sentry/auth/providers/saml2/generic/provider.py
new file mode 100644
index 0000000000..47447ff04a
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/generic/provider.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import, print_function
+
+from sentry.auth.providers.saml2.provider import SAML2Provider
+
+from .views import SAML2ConfigureView, SelectIdP, MapAttributes
+
+
+class GenericSAML2Provider(SAML2Provider):
+    name = "SAML2"
+
+    def get_configure_view(self):
+        return SAML2ConfigureView.as_view()
+
+    def get_saml_setup_pipeline(self):
+        return [SelectIdP(), MapAttributes()]
diff --git a/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/configure.html b/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/configure.html
new file mode 100644
index 0000000000..a7c350b467
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/configure.html
@@ -0,0 +1,20 @@
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+<div class="pull-right">
+  <a target="_blank" href="{{ sp_metadata_url }}">{% trans "Service Provider Metadata" %}</a>
+</div>
+
+<legend style="margin-top: 0;">Identity Provider Metadata</legend>
+{{ forms.saml|as_crispy_errors }}
+
+{% for field in forms.saml %}
+    {{ field|as_crispy_field }}
+{% endfor %}
+
+<legend>Attribute Mappings</legend>
+{{ forms.attrs|as_crispy_errors }}
+
+{% for field in forms.attrs %}
+    {{ field|as_crispy_field }}
+{% endfor %}
diff --git a/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/map-attributes.html b/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/map-attributes.html
new file mode 100644
index 0000000000..7828ea4413
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/map-attributes.html
@@ -0,0 +1,36 @@
+{% extends "sentry/bases/modal.html" %}
+{% load crispy_forms_tags %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %}narrow auth{% endblock %}
+{% block modal_header_signout %}{% endblock %}
+
+{% block title %}{% trans "SAML2 Setup" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+<h3>Map Identity Provider Attributes</h3>
+
+<form action="" method="post" class="form-stacked">
+  {% csrf_token %}
+  <input type="hidden" name="provider" value="saml2" />
+
+  <p>
+    Configure the mapping of IdP attribute keys. Consult your Identity
+    Provider's documentation for the appropriate keys.
+  </p>
+
+  {{ form|as_crispy_errors }}
+
+  {% for field in form %}
+      {{ field|as_crispy_field }}
+  {% endfor %}
+
+  <fieldset class="form-actions">
+    <button
+      type="submit"
+      class="btn btn-primary"
+      name="save_mappings" value="url">{% trans "Save Attributes" %}</button>
+  </fieldset>
+</form>
+{% endblock %}
diff --git a/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/select-idp.html b/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/select-idp.html
new file mode 100644
index 0000000000..975e7be95d
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/generic/templates/sentry_auth_saml2/select-idp.html
@@ -0,0 +1,90 @@
+{% extends "sentry/bases/modal.html" %}
+{% load crispy_forms_tags %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %}narrow auth{% endblock %}
+{% block modal_header_signout %}{% endblock %}
+
+{% block title %}{% trans "SAML2 Setup" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+<h3>Register Identity Provider</h3>
+
+<ul class="nav nav-tabs auth-toggle border-bottom">
+  <li {% if op == "url" %} class="active"{% endif %}>
+    <a href="#metadata-url" data-toggle="tab">Metadata URL</a>
+  </li>
+  <li {% if op == "xml" %} class="active"{% endif %}>
+    <a href="#xml" data-toggle="tab">XML</a>
+  </li>
+  <li {% if op == "idp" %} class="active"{% endif %}>
+    <a href="#idp-data" data-toggle="tab">IdP Data</a>
+  </li>
+</ul>
+
+<form action="" method="post" class="form-stacked">
+  {% csrf_token %}
+
+  {% if plugin %}
+      <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
+  {% endif %}
+
+  <input type="hidden" name="provider" value="saml2" />
+
+  <div class="tab-content">
+    <div class="tab-pane {% if op == "url" %}active{% endif %}" id="metadata-url">
+      <p>Provide a Metadata URL to retrieve the IdP details.</p>
+
+      {{ forms.url|as_crispy_errors }}
+
+      {% for field in forms.url %}
+          {{ field|as_crispy_field }}
+      {% endfor %}
+
+      <fieldset class="form-actions">
+        <button
+          type="submit"
+          class="btn btn-primary"
+          name="action_save" value="url">{% trans "Get metadata" %}</button>
+      </fieldset>
+    </div>
+
+    <div class="tab-pane {% if op == "xml" %}active{% endif %}" id="xml">
+      <p>Provide the raw Metadata XML IdP details.</p>
+
+      {{ forms.xml|as_crispy_errors }}
+
+      {% for field in forms.xml %}
+          {{ field|as_crispy_field }}
+      {% endfor %}
+
+      <fieldset class="form-actions">
+        <button
+          type="submit"
+          class="btn btn-primary"
+          name="action_save" value="xml">{% trans "Parse Metadata" %}</button>
+      </fieldset>
+    </div>
+
+    <div class="tab-pane {% if op == "idp" %}active{% endif %}" id="idp-data">
+      <p>
+        Provide your individual Identity Provider metadata fields.
+      </p>
+
+      {{ forms.idp|as_crispy_errors }}
+
+      {% for field in forms.idp %}
+          {{ field|as_crispy_field }}
+      {% endfor %}
+
+      <fieldset class="form-actions">
+        <button
+          type="submit"
+          class="btn btn-primary"
+          name="action_save" value="idp">{% trans "Save Metadata" %}</button>
+      </fieldset>
+    </div>
+  </div>
+</form>
+{% endblock %}
diff --git a/src/sentry/auth/providers/saml2/generic/views.py b/src/sentry/auth/providers/saml2/generic/views.py
new file mode 100644
index 0000000000..2711396e90
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/generic/views.py
@@ -0,0 +1,73 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+
+from sentry.auth.view import AuthView, ConfigureView
+from sentry.utils.http import absolute_uri
+
+from sentry.auth.providers.saml2.forms import (
+    AttributeMappingForm,
+    SAMLForm,
+    URLMetadataForm,
+    XMLMetadataForm,
+    process_metadata,
+)
+
+
+class SAML2ConfigureView(ConfigureView):
+    def dispatch(self, request, organization, provider):
+        sp_metadata_url = absolute_uri(
+            reverse("sentry-auth-organization-saml-metadata", args=[organization.slug])
+        )
+
+        if request.method != "POST":
+            saml_form = SAMLForm(provider.config["idp"])
+            attr_mapping_form = AttributeMappingForm(provider.config["attribute_mapping"])
+        else:
+            saml_form = SAMLForm(request.POST)
+            attr_mapping_form = AttributeMappingForm(request.POST)
+
+            if saml_form.is_valid() and attr_mapping_form.is_valid():
+                provider.config["idp"] = saml_form.cleaned_data
+                provider.config["attr_mapping_form"] = attr_mapping_form.cleaned_data
+                provider.save()
+
+        return self.render(
+            "sentry_auth_saml2/configure.html",
+            {
+                "sp_metadata_url": sp_metadata_url,
+                "forms": {"saml": saml_form, "attrs": attr_mapping_form},
+            },
+        )
+
+
+class SelectIdP(AuthView):
+    def handle(self, request, helper):
+        op = "url"
+
+        forms = {"url": URLMetadataForm(), "xml": XMLMetadataForm(), "idp": SAMLForm()}
+
+        if "action_save" in request.POST:
+            op = request.POST["action_save"]
+            form_cls = forms[op].__class__
+            forms[op] = process_metadata(form_cls, request, helper)
+
+        # process_metadata will return None when the action was successful and
+        # data was bound to the helper.
+        if not forms[op]:
+            return helper.next_step()
+
+        return self.respond("sentry_auth_saml2/select-idp.html", {"op": op, "forms": forms})
+
+
+class MapAttributes(AuthView):
+    def handle(self, request, helper):
+        if "save_mappings" not in request.POST:
+            form = AttributeMappingForm()
+        else:
+            form = AttributeMappingForm(request.POST)
+            if form.is_valid():
+                helper.bind_state("attribute_mapping", form.cleaned_data)
+                return helper.next_step()
+
+        return self.respond("sentry_auth_saml2/map-attributes.html", {"form": form})
diff --git a/src/sentry/auth/providers/saml2/okta/__init__.py b/src/sentry/auth/providers/saml2/okta/__init__.py
new file mode 100644
index 0000000000..858e2af6d1
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/okta/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+default_app_config = "sentry.auth.providers.saml2.okta.apps.Config"
diff --git a/src/sentry/auth/providers/saml2/okta/apps.py b/src/sentry/auth/providers/saml2/okta/apps.py
new file mode 100644
index 0000000000..15ee0bf951
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/okta/apps.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from django.apps import AppConfig
+
+
+class Config(AppConfig):
+    name = "sentry.auth.providers.saml2.okta"
+
+    def ready(self):
+        from sentry.auth import register
+
+        from .provider import OktaSAML2Provider
+
+        register("okta", OktaSAML2Provider)
diff --git a/src/sentry/auth/providers/saml2/okta/provider.py b/src/sentry/auth/providers/saml2/okta/provider.py
new file mode 100644
index 0000000000..bb3d0d3a06
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/okta/provider.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import, print_function
+
+from sentry.auth.providers.saml2.provider import SAML2Provider, Attributes
+from sentry.auth.providers.saml2.views import make_simple_setup
+from sentry.auth.providers.saml2.forms import URLMetadataForm
+
+
+SelectIdP = make_simple_setup(URLMetadataForm, "sentry_auth_okta/select-idp.html")
+
+
+class OktaSAML2Provider(SAML2Provider):
+    name = "Okta"
+
+    def get_saml_setup_pipeline(self):
+        return [SelectIdP()]
+
+    def attribute_mapping(self):
+        return {
+            Attributes.IDENTIFIER: "identifier",
+            Attributes.USER_EMAIL: "email",
+            Attributes.FIRST_NAME: "firstName",
+            Attributes.LAST_NAME: "lastName",
+        }
diff --git a/src/sentry/auth/providers/saml2/okta/templates/sentry_auth_okta/select-idp.html b/src/sentry/auth/providers/saml2/okta/templates/sentry_auth_okta/select-idp.html
new file mode 100644
index 0000000000..2efa2320ab
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/okta/templates/sentry_auth_okta/select-idp.html
@@ -0,0 +1,30 @@
+{% extends "sentry/bases/modal.html" %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %}narrow auth{% endblock %}
+{% block modal_header_signout %}{% endblock %}
+
+{% block title %}{% trans "Register Okta" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+  <h3>{% trans "Register Okta" %}</h3>
+
+  <p>
+    As part of Okta SSO provisioning, you must to provide the Okta
+    identity provider Metadata URL to Sentry.
+  </p>
+
+  <form method="post" class="form-stacked">
+    {% csrf_token %}
+    {% include "sentry/partial/form_base.html" %}
+    <input type="hidden" name="provider" value="okta" />
+
+    <fieldset class="form-actions">
+      <button type="submit" class="btn btn-primary" name="action_save">{% trans "Continue" %}</button>
+      <a class="pull-right" style="margin-top: 7px" href="https://docs.sentry.io/learn/sso/#okta">
+        Need help finding your Metadata URL?
+      </a>
+    </fieldset>
+  </form>
+{% endblock %}
diff --git a/src/sentry/auth/providers/saml2/onelogin/__init__.py b/src/sentry/auth/providers/saml2/onelogin/__init__.py
new file mode 100644
index 0000000000..e01f8b1031
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/onelogin/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+default_app_config = "sentry.auth.providers.saml2.onelogin.apps.Config"
diff --git a/src/sentry/auth/providers/saml2/onelogin/apps.py b/src/sentry/auth/providers/saml2/onelogin/apps.py
new file mode 100644
index 0000000000..89acc08922
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/onelogin/apps.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from django.apps import AppConfig
+
+
+class Config(AppConfig):
+    name = "sentry.auth.providers.saml2.onelogin"
+
+    def ready(self):
+        from sentry.auth import register
+
+        from .provider import OneLoginSAML2Provider
+
+        register("onelogin", OneLoginSAML2Provider)
diff --git a/src/sentry/auth/providers/saml2/onelogin/provider.py b/src/sentry/auth/providers/saml2/onelogin/provider.py
new file mode 100644
index 0000000000..3617eac40e
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/onelogin/provider.py
@@ -0,0 +1,30 @@
+from __future__ import absolute_import, print_function
+
+from django import forms
+
+from sentry.auth.providers.saml2.provider import SAML2Provider, Attributes
+from sentry.auth.providers.saml2.views import make_simple_setup
+from sentry.auth.providers.saml2.forms import URLMetadataForm
+
+
+# Onelogin specifically calls their Metadata URL a 'Issuer URL'
+class OneLoginURLMetadataForm(URLMetadataForm):
+    metadata_url = forms.URLField(label="Issuer URL")
+
+
+SelectIdP = make_simple_setup(OneLoginURLMetadataForm, "sentry_auth_onelogin/select-idp.html")
+
+
+class OneLoginSAML2Provider(SAML2Provider):
+    name = "OneLogin"
+
+    def get_saml_setup_pipeline(self):
+        return [SelectIdP()]
+
+    def attribute_mapping(self):
+        return {
+            Attributes.IDENTIFIER: "PersonImmutableID",
+            Attributes.USER_EMAIL: "User.email",
+            Attributes.FIRST_NAME: "User.FirstName",
+            Attributes.LAST_NAME: "User.LastName",
+        }
diff --git a/src/sentry/auth/providers/saml2/onelogin/templates/sentry_auth_onelogin/select-idp.html b/src/sentry/auth/providers/saml2/onelogin/templates/sentry_auth_onelogin/select-idp.html
new file mode 100644
index 0000000000..f49671e458
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/onelogin/templates/sentry_auth_onelogin/select-idp.html
@@ -0,0 +1,30 @@
+{% extends "sentry/bases/modal.html" %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %}narrow auth{% endblock %}
+{% block modal_header_signout %}{% endblock %}
+
+{% block title %}{% trans "Register OneLogin" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+<h3>{% trans "Register OneLogin" %}</h3>
+
+<p>
+  As part of OneLogin SSO provisioning, you must to provide the OneLogin
+  identity provider Issuer URL to Sentry.
+</p>
+
+<form method="post" class="form-stacked">
+  {% csrf_token %}
+  {% include "sentry/partial/form_base.html" %}
+  <input type="hidden" name="provider" value="onelogin" />
+
+  <fieldset class="form-actions">
+    <button type="submit" class="btn btn-primary" name="action_save">{% trans "Continue" %}</button>
+    <a class="pull-right" style="margin-top: 7px" href="https://docs.sentry.io/learn/sso/#onelogin">
+      Need help finding your Issuer URL?
+    </a>
+  </fieldset>
+</form>
+{% endblock %}
diff --git a/src/sentry/auth/providers/saml2.py b/src/sentry/auth/providers/saml2/provider.py
similarity index 100%
rename from src/sentry/auth/providers/saml2.py
rename to src/sentry/auth/providers/saml2/provider.py
diff --git a/src/sentry/auth/providers/saml2/rippling/__init__.py b/src/sentry/auth/providers/saml2/rippling/__init__.py
new file mode 100644
index 0000000000..8f138bcb1f
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/rippling/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+default_app_config = "sentry.auth.providers.saml2.rippling.apps.Config"
diff --git a/src/sentry/auth/providers/saml2/rippling/apps.py b/src/sentry/auth/providers/saml2/rippling/apps.py
new file mode 100644
index 0000000000..61b9a54c1c
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/rippling/apps.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from django.apps import AppConfig
+
+
+class Config(AppConfig):
+    name = "sentry.auth.providers.saml2.rippling"
+
+    def ready(self):
+        from sentry.auth import register
+
+        from .provider import RipplingSAML2Provider
+
+        register("rippling", RipplingSAML2Provider)
diff --git a/src/sentry/auth/providers/saml2/rippling/provider.py b/src/sentry/auth/providers/saml2/rippling/provider.py
new file mode 100644
index 0000000000..839d8c14d6
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/rippling/provider.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import, print_function
+
+from sentry.auth.view import AuthView
+from sentry.auth.providers.saml2.provider import SAML2Provider, Attributes
+from sentry.auth.providers.saml2.views import make_simple_setup
+from sentry.auth.providers.saml2.forms import URLMetadataForm
+
+
+SelectIdP = make_simple_setup(URLMetadataForm, "sentry_auth_rippling/select-idp.html")
+
+
+class WaitForCompletion(AuthView):
+    """
+    Rippling provides the Metadata URL during initial application setup, before
+    configuration values have been saved, thus we cannot immediately attempt to
+    create an identity for the setting up the SSO.
+
+    This is simply an extra step to wait for them to complete that.
+    """
+
+    def handle(self, request, helper):
+        if "continue_setup" in request.POST:
+            return helper.next_step()
+
+        return self.respond("sentry_auth_rippling/wait-for-completion.html")
+
+
+class RipplingSAML2Provider(SAML2Provider):
+    name = "Rippling"
+
+    # Rippling is currently it's own feature
+    required_feature = "organizations:sso-rippling"
+
+    def get_saml_setup_pipeline(self):
+        return [SelectIdP(), WaitForCompletion()]
+
+    def attribute_mapping(self):
+        return {
+            Attributes.IDENTIFIER: "user_id",
+            Attributes.USER_EMAIL: "urn:oid:1.2.840.113549.1.9.1.1",
+            Attributes.FIRST_NAME: "first_name",
+            Attributes.LAST_NAME: "last_name",
+        }
diff --git a/src/sentry/auth/providers/saml2/rippling/templates/sentry_auth_rippling/select-idp.html b/src/sentry/auth/providers/saml2/rippling/templates/sentry_auth_rippling/select-idp.html
new file mode 100644
index 0000000000..184ff51911
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/rippling/templates/sentry_auth_rippling/select-idp.html
@@ -0,0 +1,30 @@
+{% extends "sentry/bases/modal.html" %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %}narrow auth{% endblock %}
+{% block modal_header_signout %}{% endblock %}
+
+{% block title %}{% trans "Register Rippling" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+<h3>{% trans "Register Rippling" %}</h3>
+
+<p>
+  As part of Rippling SSO provisioning, you must to provide the Rippling
+  identity provider Metadata URL to Sentry.
+</p>
+
+<form method="post" class="form-stacked">
+  {% csrf_token %}
+  {% include "sentry/partial/form_base.html" %}
+  <input type="hidden" name="provider" value="rippling" />
+
+  <fieldset class="form-actions">
+    <button type="submit" class="btn btn-primary" name="action_save">{% trans "Continue" %}</button>
+    <a class="pull-right" style="margin-top: 7px" href="https://docs.sentry.io/learn/sso/#rippling">
+      Need help finding your Metadata URL?
+    </a>
+  </fieldset>
+</form>
+{% endblock %}
diff --git a/src/sentry/auth/providers/saml2/rippling/templates/sentry_auth_rippling/wait-for-completion.html b/src/sentry/auth/providers/saml2/rippling/templates/sentry_auth_rippling/wait-for-completion.html
new file mode 100644
index 0000000000..c6b80119e0
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/rippling/templates/sentry_auth_rippling/wait-for-completion.html
@@ -0,0 +1,25 @@
+{% extends "sentry/bases/modal.html" %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %}narrow auth{% endblock %}
+{% block modal_header_signout %}{% endblock %}
+
+{% block title %}{% trans "Register Rippling" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+<p>
+  Before completing your Rippling SSO auth setup on Sentry, you will need
+  to complete the rippling app setup. Click <strong>Complete Setup</strong>
+  once done.
+</p>
+
+<form method="post" class="form-stacked">
+  {% csrf_token %}
+  <input type="hidden" name="provider" value="rippling" />
+
+  <fieldset class="form-actions">
+    <button type="submit" class="btn btn-primary" name="continue_setup">{% trans "Complete Setup" %}</button>
+  </fieldset>
+</form>
+{% endblock %}
diff --git a/src/sentry/auth/providers/saml2/views.py b/src/sentry/auth/providers/saml2/views.py
new file mode 100644
index 0000000000..68f20c863e
--- /dev/null
+++ b/src/sentry/auth/providers/saml2/views.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from sentry.auth.view import AuthView
+from sentry.auth.providers.saml2.forms import process_metadata
+
+
+def make_simple_setup(form_cls, template_path):
+    class SelectIdP(AuthView):
+        def handle(self, request, helper):
+            form = process_metadata(form_cls, request, helper)
+
+            if form:
+                return self.respond(template_path, {"form": form})
+            else:
+                return helper.next_step()
+
+    return SelectIdP
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 1a83c7bd1e..e94a3087a5 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -22,7 +22,7 @@ from sentry.web.frontend.pipeline_advancer import PipelineAdvancerView
 from sentry.web.frontend.mailgun_inbound_webhook import MailgunInboundWebhookView
 from sentry.web.frontend.oauth_authorize import OAuthAuthorizeView
 from sentry.web.frontend.oauth_token import OAuthTokenView
-from sentry.auth.providers.saml2 import SAML2AcceptACSView, SAML2SLSView, SAML2MetadataView
+from sentry.auth.providers.saml2.provider import SAML2AcceptACSView, SAML2SLSView, SAML2MetadataView
 from sentry.web.frontend.organization_avatar import OrganizationAvatarPhotoView
 from sentry.web.frontend.organization_auth_settings import OrganizationAuthSettingsView
 from sentry.web.frontend.organization_integration_setup import OrganizationIntegrationSetupView
diff --git a/tests/sentry/auth/providers/test_saml2.py b/tests/sentry/auth/providers/test_saml2.py
index dcceb098b2..c06f024181 100644
--- a/tests/sentry/auth/providers/test_saml2.py
+++ b/tests/sentry/auth/providers/test_saml2.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import, print_function
 import pytest
 import mock
 
-from sentry.auth.providers.saml2 import SAML2Provider, Attributes
+from sentry.auth.providers.saml2.provider import SAML2Provider, Attributes
 
 from sentry.auth.exceptions import IdentityNotValid
 from sentry.models import AuthProvider
diff --git a/tests/sentry/web/frontend/test_auth_saml2.py b/tests/sentry/web/frontend/test_auth_saml2.py
index 98d6354113..fd8fdea67f 100644
--- a/tests/sentry/web/frontend/test_auth_saml2.py
+++ b/tests/sentry/web/frontend/test_auth_saml2.py
@@ -11,7 +11,7 @@ from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import models
 
-from sentry.auth.providers.saml2 import SAML2Provider, Attributes, HAS_SAML2
+from sentry.auth.providers.saml2.provider import SAML2Provider, Attributes, HAS_SAML2
 from sentry.models import (
     AuditLogEntry,
     AuditLogEntryEvent,
