commit 79d6af248419b83d3c3b2b16c68e7a32f853d3db
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 14 22:07:44 2015 -0700

    Improve superuser behavior
    
    - Ensure superusers are members of all teams
      This has the caveat that they currently cant leave teams (to hide them from the dash)
    
    - Use `is_active_superuser` everywhere

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 1d33679528..b295c04a91 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -103,7 +103,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if request.user.is_authenticated() and not request.user.is_superuser:
+        if request.user.is_authenticated() and not request.user.is_active_superuser():
             try:
                 acting_member = OrganizationMember.objects.get(
                     organization=organization,
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index a19e35de84..eb287681e7 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -43,7 +43,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
 
     def _can_access(self, request, member):
         # TODO(dcramer): ideally org owners/admins could perform these actions
-        if request.user.is_superuser:
+        if request.user.is_active_superuser():
             return True
 
         if not request.user.is_authenticated():
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index dbd762976c..dc25fcf62c 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -47,6 +47,6 @@ class ScopedPermission(permissions.BasePermission):
 
 class SuperuserPermission(permissions.BasePermission):
     def has_permission(self, request, view):
-        if request.user.is_superuser:
+        if request.user.is_active_superuser():
             return True
         return False
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 365723aab1..6ff11a039c 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -14,7 +14,9 @@ from sentry.models import (
 @register(Team)
 class TeamSerializer(Serializer):
     def get_attrs(self, item_list, user):
-        if user.is_authenticated():
+        if user.is_active_superuser():
+            memberships = frozenset([i.id for i in item_list])
+        elif user.is_authenticated():
             memberships = frozenset(
                 OrganizationMemberTeam.objects.filter(
                     organizationmember__user=user,
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index 11b5b5a576..2e766f31a8 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -49,7 +49,7 @@ def from_user(user, organization):
     if not organization:
         return DEFAULT
 
-    if user.is_superuser:
+    if user.is_active_superuser():
         return Access(
             scopes=settings.SENTRY_SCOPES,
             is_active=True,
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index cb0d93583e..b1172606f7 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -37,7 +37,7 @@ class TeamManager(BaseManager):
             status=TeamStatus.VISIBLE
         )
 
-        if user.is_superuser or settings.SENTRY_PUBLIC:
+        if user.is_active_superuser() or settings.SENTRY_PUBLIC:
             team_list = list(base_team_qs)
 
         else:
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 075892eb81..edbb287d2a 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -70,11 +70,11 @@ class User(BaseModel, AbstractBaseUser):
 
     def has_perm(self, perm_name):
         warnings.warn('User.has_perm is deprecated', DeprecationWarning)
-        return self.is_superuser
+        return self.is_active_superuser()
 
     def has_module_perms(self, app_label):
         # the admin requires this method
-        return self.is_superuser
+        return self.is_active_superuser()
 
     def get_display_name(self):
         return self.first_name or self.email or self.username
diff --git a/src/sentry/utils/debug.py b/src/sentry/utils/debug.py
index 80cd3b8efa..0058535a47 100644
--- a/src/sentry/utils/debug.py
+++ b/src/sentry/utils/debug.py
@@ -31,7 +31,7 @@ class ProfileMiddleware(object):
             return False
         if settings.DEBUG:
             return True
-        if hasattr(request, 'user') and request.user.is_superuser:
+        if hasattr(request, 'user') and request.user.is_active_superuser():
             return True
         return False
 
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 15d110ce56..ae380ac956 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -116,7 +116,7 @@ def manage_users(request):
 @transaction.atomic
 @csrf_protect
 def create_new_user(request):
-    if not request.user.is_superuser:
+    if not request.user.is_active_superuser():
         return HttpResponseRedirect(reverse('sentry'))
 
     form = NewUserForm(request.POST or None, initial={
@@ -176,7 +176,7 @@ def create_new_user(request):
 @requires_admin
 @csrf_protect
 def edit_user(request, user_id):
-    if not request.user.is_superuser:
+    if not request.user.is_active_superuser():
         return HttpResponseRedirect(reverse('sentry'))
 
     try:
diff --git a/src/sentry/web/frontend/admin_queue.py b/src/sentry/web/frontend/admin_queue.py
index 9fa626af89..fe44fa57c9 100644
--- a/src/sentry/web/frontend/admin_queue.py
+++ b/src/sentry/web/frontend/admin_queue.py
@@ -6,7 +6,7 @@ from sentry.web.frontend.base import BaseView
 
 class AdminQueueView(BaseView):
     def has_permission(self, request):
-        return request.user.is_superuser
+        return request.user.is_active_superuser()
 
     def handle(self, request):
         context = {
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index eef31b6c34..ab2c061874 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -38,7 +38,7 @@ class OrganizationMixin(object):
             organization_slug = request.session.get('activeorg')
 
         if organization_slug is not None:
-            if request.user.is_superuser:
+            if request.user.is_active_superuser():
                 try:
                     active_organization = Organization.objects.get_from_cache(
                         slug=organization_slug,
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index b96d0a6f3c..a81c5e2ad4 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -61,7 +61,7 @@ class OrganizationMemberSettingsView(OrganizationView):
 
         can_admin = request.access.has_scope('member:delete')
 
-        if can_admin and not request.user.is_superuser:
+        if can_admin and not request.user.is_active_superuser():
             acting_member = OrganizationMember.objects.get(
                 user=request.user,
                 organization=organization,
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 8b83f65651..988c96bc5f 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -41,7 +41,7 @@ class TeamSettingsView(TeamView):
 
             return HttpResponseRedirect(reverse('sentry-manage-team', args=[organization.slug, team.slug]))
 
-        if request.user.is_superuser:
+        if request.user.is_active_superuser():
             can_remove_team = True
         else:
             can_remove_team = request.access.has_team_scope(team, 'team:delete')
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 1ea87fe2a0..6933622fbd 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -37,7 +37,7 @@ def group_is_public(group, user):
     if not user.is_authenticated():
         return True
     # superusers can always view events
-    if user.is_superuser:
+    if user.is_active_superuser():
         return False
     # project owners can view events
     if group.project in Project.objects.get_for_user(team=group.project.team, user=user):
