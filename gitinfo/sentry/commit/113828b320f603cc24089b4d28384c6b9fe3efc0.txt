commit 113828b320f603cc24089b4d28384c6b9fe3efc0
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Dec 2 17:51:41 2015 -0800

    Remove digest feature switches.
    
    Resolves GH-2388.

diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 957223ab23..adb8524635 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -9,8 +9,6 @@ default_manager = FeatureManager()
 default_manager.add('auth:register')
 default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)
-default_manager.add('projects:digests:deliver', ProjectFeature)
-default_manager.add('projects:digests:store', ProjectFeature)
 default_manager.add('projects:quotas', ProjectFeature)
 default_manager.add('projects:user-reports', ProjectFeature)
 default_manager.add('projects:plugins', ProjectPluginFeature)
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 512710e830..4d128dde4f 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -11,7 +11,6 @@ import logging
 
 from django import forms
 
-from sentry import features
 from sentry.app import (
     digests,
     ratelimiter,
@@ -69,32 +68,19 @@ class NotificationPlugin(Plugin):
         if hasattr(self, 'notify_digest'):
             project = event.group.project
 
-            # If digest delivery is disabled, we still need to send a
-            # notification -- we also need to check rate limits, since
-            # ``should_notify`` skips this step if the plugin supports digests.
-            if not features.has('projects:digests:deliver', project):
-                if self.__is_rate_limited(event.group, event):
-                    logger = logging.getLogger('sentry.plugins.{0}'.format(self.get_conf_key()))
-                    logger.info('Notification for project %r dropped due to rate limiting', project)
-                    return
-
-                notification = Notification(event=event, rules=rules)
-                self.notify(notification)
-
-            if features.has('projects:digests:store', project):
-                get_digest_option = lambda key: ProjectOption.objects.get_value(
-                    project,
-                    '{0}:digests:{1}'.format(self.get_conf_key(), key),
-                )
-                digest_key = unsplit_key(self, event.group.project)
-                immediate_delivery = digests.add(
-                    digest_key,
-                    event_to_record(event, rules),
-                    increment_delay=get_digest_option('increment_delay'),
-                    maximum_delay=get_digest_option('maximum_delay'),
-                )
-                if immediate_delivery:
-                    deliver_digest.delay(digest_key)
+            get_digest_option = lambda key: ProjectOption.objects.get_value(
+                project,
+                '{0}:digests:{1}'.format(self.get_conf_key(), key),
+            )
+            digest_key = unsplit_key(self, event.group.project)
+            immediate_delivery = digests.add(
+                digest_key,
+                event_to_record(event, rules),
+                increment_delay=get_digest_option('increment_delay'),
+                maximum_delay=get_digest_option('maximum_delay'),
+            )
+            if immediate_delivery:
+                deliver_digest.delay(digest_key)
 
         else:
             notification = Notification(event=event, rules=rules)
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 13b3c397a4..22103143d2 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -18,7 +18,6 @@ from django.template.loader import render_to_string
 from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
-from sentry import features
 from sentry.digests.utilities import get_digest_metadata
 from sentry.models import (
     Activity,
@@ -207,9 +206,7 @@ class MailPlugin(NotificationPlugin):
                 key=lambda record: record.timestamp,
             )
             notification = Notification(record.value.event, rules=record.value.rules)
-
-            if features.has('projects:digests:deliver', project):
-                return self.notify(notification)
+            return self.notify(notification)
 
         context = {
             'start': start,
@@ -232,7 +229,7 @@ class MailPlugin(NotificationPlugin):
             context=context,
         )
 
-        if message is not None and features.has('projects:digests:deliver', project):
+        if message is not None:
             message.send()
 
     def notify_about_activity(self, activity):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 206952a922..19e3877f36 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -9,7 +9,6 @@ from django.utils import timezone
 from exam import fixture
 from mock import Mock
 
-from sentry import features
 from sentry.digests.notifications import (
     build_digest,
     event_to_record,
@@ -235,12 +234,7 @@ class MailPluginTest(TestCase):
 
     @mock.patch.object(MailPlugin, 'notify', side_effect=MailPlugin.notify, autospec=True)
     @mock.patch.object(MessageBuilder, 'send', autospec=True)
-    @mock.patch.object(features, 'has')
-    def test_notify_digest(self, has, send, notify):
-        has.side_effect = lambda label, *a, **k: {
-            'projects:digests:deliver': True,
-        }.get(label, False)
-
+    def test_notify_digest(self, send, notify):
         project = self.event.project
         rule = project.rule_set.all()[0]
         digest = build_digest(
@@ -256,12 +250,7 @@ class MailPluginTest(TestCase):
 
     @mock.patch.object(MailPlugin, 'notify', side_effect=MailPlugin.notify, autospec=True)
     @mock.patch.object(MessageBuilder, 'send', autospec=True)
-    @mock.patch.object(features, 'has')
-    def test_notify_digest_single_record(self, has, send, notify):
-        has.side_effect = lambda label, *a, **k: {
-            'projects:digests:deliver': True,
-        }.get(label, False)
-
+    def test_notify_digest_single_record(self, send, notify):
         project = self.event.project
         rule = project.rule_set.all()[0]
         digest = build_digest(
