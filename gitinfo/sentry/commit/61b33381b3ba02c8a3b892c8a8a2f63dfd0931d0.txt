commit 61b33381b3ba02c8a3b892c8a8a2f63dfd0931d0
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Mar 8 17:14:07 2018 -0800

    feat(slack): Implement config UI

diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index c223de9daf..5c7591d24f 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -13,6 +13,7 @@ IntegrationMetadata = namedtuple('IntegrationMetadata', [
     'author',       # The integration author's name
     'issue_url',    # URL where issues should be opened
     'source_url',   # URL to view the source
+    'aspects',      # A map of integration specific 'aspects' to the aspect config.
 ])
 
 
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index d308401b21..92977522a8 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -16,11 +16,19 @@ Define a relationship between Sentry and your Slack workspace(s).
    specified channel.
 """
 
+alert_link = {
+    'text': 'Looking to send Sentry alerts to Slack? Add an **Alert Rule** for this project.',
+    'link': '/settings/organization/{orgId}/project/{projectId}/alerts/rules/'
+}
+
 metadata = IntegrationMetadata(
     description=DESCRIPTION.strip(),
     author='The Sentry Team',
     issue_url='https://github.com/getsentry/sentry/issues/new?title=Slack%20Integration:%20&labels=Component%3A%20Integrations',
-    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/slack'
+    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/slack',
+    aspects={
+        'alert_link': alert_link,
+    }
 )
 
 
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 9ef393e760..ee31cc7dbd 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -360,6 +360,15 @@ const projectSettingsRoutes = (
       name="Integration Details"
       component={errorHandler(ProjectPluginDetails)}
     />
+    // XXX(epurkhiser): This lives under project configurations for now until
+    // we've migrated enough integrations that it can live at the org level.
+    <Route
+      path="integrations/:providerKey/"
+      name="Integration Configuration"
+      componentPromise={() =>
+        import(/* webpackChunkName: "OrganizationIntegrationConfig" */ './views/organizationIntegrationConfig')}
+      component={errorHandler(LazyLoad)}
+    />,
     <Route
       path="install/"
       name="Basic Configuration"
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx b/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx
new file mode 100644
index 0000000000..d5e4f511db
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx
@@ -0,0 +1,307 @@
+import {Flex, Box} from 'grid-emotion';
+import React from 'react';
+import styled from 'react-emotion';
+import _ from 'lodash';
+
+import {sortArray} from '../utils';
+import {t} from '../locale';
+import AlertLink from '../components/alertLink';
+import AsyncView from './asyncView';
+import Button from '../components/buttons/button';
+import Confirm from '../components/confirm';
+import EmptyMessage from './settings/components/emptyMessage';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import Panel from './settings/components/panel';
+import PanelBody from './settings/components/panelBody';
+import PanelHeader from './settings/components/panelHeader';
+import PanelItem from './settings/components/panelItem';
+import PluginIcon from '../plugins/components/pluginIcon';
+import SettingsPageHeader from './settings/components/settingsPageHeader';
+import marked from '../utils/marked';
+
+const IntegrationIcon = styled.img`
+  height: 32px;
+  width: 32px;
+  border-radius: 3px;
+  display: block;
+`;
+
+const IntegrationName = styled.div`
+  font-size: 1.6rem;
+  margin-bottom: 3px;
+`;
+
+const DomainName = styled.div`
+  color: ${p => p.theme.gray3};
+  font-size: 1.4rem;
+`;
+
+const Details = styled(Flex)`
+  font-size: 1.5rem;
+  line-height: 2.1rem;
+`;
+
+const Description = styled.div`
+  li {
+    margin-bottom: 6px;
+  }
+`;
+
+const AuthorName = styled.div`
+  color: ${p => p.theme.gray2};
+`;
+
+const MetadataLink = styled.a`
+  display: block;
+  margin-bottom: 6px;
+`;
+
+const alertLinkMarkedRenderer = new marked.Renderer();
+alertLinkMarkedRenderer.paragraph = s => s;
+
+function computeCenteredWindow(width, height) {
+  const screenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
+  const screenTop = window.screenTop != undefined ? window.screenTop : screen.top;
+  const innerWidth = window.innerWidth
+    ? window.innerWidth
+    : document.documentElement.clientWidth
+      ? document.documentElement.clientWidth
+      : screen.width;
+
+  const innerHeight = window.innerHeight
+    ? window.innerHeight
+    : document.documentElement.clientHeight
+      ? document.documentElement.clientHeight
+      : screen.height;
+
+  const left = innerWidth / 2 - width / 2 + screenLeft;
+  const top = innerHeight / 2 - height / 2 + screenTop;
+
+  return {left, top};
+}
+
+export default class OrganizationIntegrationConfig extends AsyncView {
+  componentDidMount() {
+    this.dialog = null;
+    window.addEventListener('message', this.receiveMessage, false);
+  }
+
+  componentWillUnmount() {
+    super.componentWillUnmount();
+    window.removeEventListener('message', this.receiveMessage);
+
+    if (this.dialog !== null) {
+      this.dialog.close();
+    }
+  }
+
+  getProvider() {
+    const {config} = this.state;
+
+    if (config !== null) {
+      return config.providers.find(p => p.key == this.props.params.providerKey) || null;
+    }
+
+    return null;
+  }
+
+  getTitle() {
+    const provider = this.getProvider();
+
+    if (provider === null) {
+      return 'Global Integrations';
+    }
+
+    return `${provider.name} Integration`;
+  }
+
+  getEndpoints() {
+    const {orgId} = this.props.params;
+
+    return [
+      ['config', `/organizations/${orgId}/config/integrations/`],
+      ['itemList', `/organizations/${orgId}/integrations/`],
+    ];
+  }
+
+  handleAddIntegration = provider => {
+    const name = 'sentryAddIntegration';
+
+    const {url, width, height} = provider.setupDialog;
+    const {left, top} = computeCenteredWindow(width, height);
+
+    this.dialog = window.open(
+      url,
+      name,
+      `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`
+    );
+
+    this.dialog.focus();
+    this.dialog.onclose = () => document.location.refresh();
+  };
+
+  receiveMessage = message => {
+    if (message.origin !== document.origin) {
+      return;
+    }
+
+    if (message.source !== this.dialog) {
+      return;
+    }
+
+    this.dialog = null;
+
+    const {success, data} = message.data;
+
+    if (!success) {
+      IndicatorStore.addError(t('Unable to add Integration'));
+      return;
+    }
+
+    // Merge the new integration into the list. If we're updating an
+    // integration ovewrrite the old integration.
+    const keyedItems = _.keyBy(this.state.itemList, 'id');
+    const itemList = sortArray(
+      Object.values({...keyedItems, [data.id]: data}),
+      i => i.name
+    );
+
+    IndicatorStore.addSuccess(t('Integration Added'));
+    this.setState({itemList});
+  };
+
+  handleDeleteIntegration = integration => {
+    const {orgId} = this.props.params;
+    const saveIndicator = IndicatorStore.add(t('Removing Integration'));
+
+    const options = {
+      method: 'DELETE',
+      success: () => {
+        this.setState({
+          itemList: this.state.itemList.filter(item => item.id !== integration.id),
+        });
+        IndicatorStore.addSuccess(t('Integration removed'));
+      },
+      error: () => IndicatorStore.addError(t('Failed to remove Integration')),
+      complete: () => IndicatorStore.remove(saveIndicator),
+    };
+
+    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);
+  };
+
+  renderAlertLink(provider) {
+    const config = provider.metadata.aspects.alert_link;
+
+    if (config === undefined) {
+      return undefined;
+    }
+
+    const linkHtml = marked(config.text, {renderer: alertLinkMarkedRenderer});
+    let link = config.link;
+
+    for (const key in this.props.params) {
+      link = link.replace(`{${key}}`, this.props.params[key]);
+    }
+
+    return (
+      <AlertLink to={link}>
+        <span dangerouslySetInnerHTML={{__html: linkHtml}} />
+      </AlertLink>
+    );
+  }
+
+  renderBody() {
+    const {providerKey} = this.props.params;
+
+    const integrations = this.state.itemList.filter(i => i.provider.key === providerKey);
+    const provider = this.getProvider();
+
+    if (provider === null) {
+      return <LoadingError message={t('Invalid integration provider')} />;
+    }
+
+    const titleIcon = <PluginIcon size={28} pluginId={provider.key} />;
+
+    // TODO(epurkhiser): Workspaces needs to get genericised into the integration
+    const header = (
+      <PanelHeader disablePadding hasButtons>
+        <Flex align="center">
+          <Box px={2} flex="1">
+            {t('Workspaces')}
+          </Box>
+          <Box mr={1}>
+            <Button size="xsmall" onClick={() => this.handleAddIntegration(provider)}>
+              <span className="icon icon-add" /> {t('Add Workspace')}
+            </Button>
+          </Box>
+        </Flex>
+      </PanelHeader>
+    );
+
+    let integrationList = integrations.map(integration => {
+      return (
+        <PanelItem p={0} py={2} key={integration.id}>
+          <Box pl={2}>
+            <IntegrationIcon src={integration.icon} />
+          </Box>
+          <Box px={2} flex={1}>
+            <IntegrationName>{integration.name}</IntegrationName>
+            <DomainName>{integration.domain_name}</DomainName>
+          </Box>
+          <Box mr={1} pr={2}>
+            <Confirm
+              message={t(
+                'Removing this inegration will disable the integration for all projects. Are you sure you want to remove this integration?'
+              )}
+              onConfirm={() => this.handleDeleteIntegration(integration)}
+            >
+              <Button size="small">
+                <span className="icon icon-trash" style={{margin: 0}} />
+              </Button>
+            </Confirm>
+          </Box>
+        </PanelItem>
+      );
+    });
+
+    if (integrationList.length === 0) {
+      integrationList = (
+        <EmptyMessage>{t('No %s integrations configured.', provider.name)}</EmptyMessage>
+      );
+    }
+
+    return (
+      <React.Fragment>
+        <SettingsPageHeader title={provider.name} icon={titleIcon} />
+
+        <Panel>
+          {header}
+          <PanelBody>{integrationList}</PanelBody>
+        </Panel>
+
+        {this.renderAlertLink(provider)}
+
+        <hr />
+
+        <h5>{t('%s Integration', provider.name)}</h5>
+        <Details>
+          <Box width={5 / 8}>
+            <Description
+              dangerouslySetInnerHTML={{__html: marked(provider.metadata.description)}}
+            />
+            <AuthorName>{t('By %s', provider.metadata.author)}</AuthorName>
+          </Box>
+          <Box ml={60}>
+            <MetadataLink href={provider.metadata.issue_url}>
+              {t('Report an Issue')}
+            </MetadataLink>
+            <MetadataLink href={provider.metadata.source_url}>
+              {t('View Source')}
+            </MetadataLink>
+          </Box>
+        </Details>
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
index c7b2963734..01163c7cb1 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
@@ -1,13 +1,20 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 
+import {t} from '../../locale';
 import {fetchPlugins, enablePlugin, disablePlugin} from '../../actionCreators/plugins';
 import withPlugins from '../../utils/withPlugins';
 import ProjectPlugins from './projectPlugins';
+import OrganizationIntegrations from './organizationIntegrations';
 import SentryTypes from '../../proptypes';
+import SettingsPageHeader from '../settings/components/settingsPageHeader';
 
 class ProjectPluginsContainer extends React.Component {
   static propTypes = {
     plugins: SentryTypes.PluginsStore,
+    organization: PropTypes.shape({
+      features: PropTypes.arrayOf(PropTypes.string),
+    }),
   };
 
   componentDidMount() {
@@ -26,16 +33,30 @@ class ProjectPluginsContainer extends React.Component {
 
   render() {
     let {loading, error, plugins} = this.props.plugins || {};
+    const {features} = this.props.organization;
 
-    return (
-      <ProjectPlugins
-        {...this.props}
-        onError={this.fetchData}
-        onChange={this.handleChange}
-        loading={loading}
-        error={error}
-        plugins={plugins}
+    const globalIntegrations = features.includes('integrations-v3') ? (
+      <OrganizationIntegrations
+        orgId={this.props.params.orgId}
+        projectId={this.props.params.projectId}
       />
+    ) : null;
+
+    return (
+      <React.Fragment>
+        <SettingsPageHeader title={t('Integrations')} />
+
+        {globalIntegrations}
+
+        <ProjectPlugins
+          {...this.props}
+          onError={this.fetchData}
+          onChange={this.handleChange}
+          loading={loading}
+          error={error}
+          plugins={plugins}
+        />
+      </React.Fragment>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx b/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
new file mode 100644
index 0000000000..54a92403ca
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
@@ -0,0 +1,71 @@
+import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from '../../locale';
+import AsyncComponent from '../../components/asyncComponent';
+import Link from '../../components/link';
+import Panel from '../settings/components/panel';
+import PanelBody from '../settings/components/panelBody';
+import PanelHeader from '../settings/components/panelHeader';
+import PluginIcon from '../../plugins/components/pluginIcon';
+import PanelItem from '../settings/components/panelItem';
+import theme from '../../utils/theme';
+
+const ProviderName = styled.div`
+  font-size: 16px;
+  font-weight: bold;
+  margin-bottom: 3px;
+`;
+
+const TeamName = styled.div`
+  color: ${p => p.theme.gray2};
+  font-size: 14px;
+`;
+
+export default class OrganizationIntegrations extends AsyncComponent {
+  static propTypes = {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+  };
+
+  getEndpoints() {
+    let {orgId} = this.props;
+    return [['config', `/organizations/${orgId}/config/integrations/`]];
+  }
+
+  renderBody() {
+    let {orgId, projectId} = this.props;
+
+    const integrations = this.state.config.providers.map(provider => (
+      <PanelItem key={provider.key}>
+        <Box>
+          <PluginIcon size={32} pluginId={provider.key} />
+        </Box>
+        <Box px={2} flex={1}>
+          <ProviderName>
+            <Link
+              to={`/settings/organization/${orgId}/project/${projectId}/integrations/${provider.key}/`}
+              css={{color: theme.gray5}}
+            >
+              {provider.name}
+            </Link>
+          </ProviderName>
+          <TeamName>{provider.metadata.author}</TeamName>
+        </Box>
+      </PanelItem>
+    ));
+
+    return (
+      <Panel>
+        <PanelHeader disablePadding={true}>
+          <Box px={2} flex="1">
+            {t('Global Integrations')}
+          </Box>
+        </PanelHeader>
+        <PanelBody>{integrations}</PanelBody>
+      </Panel>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx b/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
index 3ff020c3ab..e7a7df30d8 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
@@ -6,7 +6,6 @@ import LoadingIndicator from '../../components/loadingIndicator';
 import ProjectPluginRow from './projectPluginRow';
 import RouteError from '../routeError';
 import SentryTypes from '../../proptypes';
-import SettingsPageHeader from '../settings/components/settingsPageHeader';
 
 class ProjectPlugins extends React.Component {
   static propTypes = {
@@ -23,37 +22,35 @@ class ProjectPlugins extends React.Component {
     let hasError = error;
     let isLoading = !hasError && loading;
 
-    return (
-      <div>
-        <SettingsPageHeader title={t('Integrations')} />
+    if (hasError) {
+      return <RouteError error={error} component={this} onRetry={onError} />;
+    }
 
-        {hasError && <RouteError error={error} component={this} onRetry={onError} />}
-        {isLoading && <LoadingIndicator />}
+    if (isLoading) {
+      return <LoadingIndicator />;
+    }
 
-        {!isLoading &&
-          !hasError && (
-            <div className="panel panel-default">
-              <table className="table integrations simple">
-                <thead>
-                  <tr>
-                    <th colSpan={2}>{t('Integration')}</th>
-                    <th className="align-right">{t('Enabled')}</th>
-                  </tr>
-                </thead>
-                <tbody>
-                  {plugins.map(plugin => (
-                    <ProjectPluginRow
-                      key={plugin.id}
-                      projectId={projectId}
-                      orgId={orgId}
-                      {...plugin}
-                      onChange={onChange}
-                    />
-                  ))}
-                </tbody>
-              </table>
-            </div>
-          )}
+    return (
+      <div className="panel panel-default">
+        <table className="table integrations simple">
+          <thead>
+            <tr>
+              <th colSpan={2}>{t('Legacy Integration')}</th>
+              <th className="align-right">{t('Enabled')}</th>
+            </tr>
+          </thead>
+          <tbody>
+            {plugins.map(plugin => (
+              <ProjectPluginRow
+                key={plugin.id}
+                projectId={projectId}
+                orgId={orgId}
+                {...plugin}
+                onChange={onChange}
+              />
+            ))}
+          </tbody>
+        </table>
       </div>
     );
   }
diff --git a/tests/js/setup.js b/tests/js/setup.js
index d782178334..8110eb9d89 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -398,7 +398,7 @@ window.TestStubs = {
 
   GitHubRepositoryProvider: params => {
     return {
-      id: 'github',
+      key: 'github',
       name: 'GitHub',
       config: [
         {
@@ -419,31 +419,49 @@ window.TestStubs = {
       key: 'github',
       name: 'GitHub',
       config: [],
-      setupUri: '/github-integration-setup-uri/',
+      setupDialog: {
+        url: '/github-integration-setup-uri/',
+        width: 100,
+        height: 100,
+      },
+      metadata: {
+        description: '*markdown* formatted _description_',
+        author: 'Morty',
+        issue_url: 'http://example.com/integration_issue_url',
+        source_url: 'http://example.com/integration_source_url',
+        aspects: {
+          alert_link: {
+            text: 'This is a *alert link* with markdown formatting',
+            link: '/url/with/params/{orgId}/',
+          },
+        },
+      },
       ...params,
     };
   },
 
-  Group: () => {
+  GitHubIntegration: params => {
     return {
+      domain_name: 'gtithub.com/test-integration',
+      icon: 'http://example.com/integration_icon.png',
       id: '1',
-      stats: {
-        '24h': [[1517281200, 2], [1517310000, 1]],
-        '30d': [[1514764800, 1], [1515024000, 122]],
+      name: 'Test Integration',
+      provider: {
+        name: 'GitHub',
+        key: 'github',
       },
-      tags: [],
+      ...params,
     };
   },
 
-  Integration: params => {
+  Group: () => {
     return {
-      id: '4',
-      name: 'repo-name',
-      provider: {
-        key: 'github',
-        name: 'GitHub',
+      id: '1',
+      stats: {
+        '24h': [[1517281200, 2], [1517310000, 1]],
+        '30d': [[1514764800, 1], [1515024000, 122]],
       },
-      ...params,
+      tags: [],
     };
   },
 
diff --git a/tests/js/spec/views/__snapshots__/organizationIntegrationConfig.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationIntegrationConfig.spec.jsx.snap
new file mode 100644
index 0000000000..0c9e0f7c13
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationIntegrationConfig.spec.jsx.snap
@@ -0,0 +1,749 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationIntegrationConfig render() with one integration renders 1`] = `
+.glamor-8 {
+  font-size: 14px;
+  box-shadow: inset 0 -1px 0;
+  margin: -20px 0 30px;
+}
+
+.glamor-6 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+}
+
+.glamor-2 {
+  box-sizing: border-box;
+  padding-right: 8px;
+}
+
+.glamor-0 {
+  position: relative;
+  height: 28px;
+  width: 28px;
+  border-radius: 2px;
+  border: 0;
+  background-color: #fff;
+  display: inline-block;
+  background-size: contain;
+  background-position: center center;
+  background-repeat: no-repeat;
+  background-image: url();
+}
+
+.glamor-4 {
+  font-size: 20px;
+  font-weight: bold;
+  margin: 20px 0;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-43 {
+  background: #fff;
+  border: 1px solid;
+  margin-bottom: NaNpx;
+  position: relative;
+}
+
+.glamor-23 {
+  border-bottom: 1px solid;
+  border-radius: 0 0;
+  text-transform: uppercase;
+  font-size: 13px;
+  line-height: 1;
+  padding: 8px 0;
+}
+
+.glamor-19 {
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-17 {
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-10 {
+  box-sizing: border-box;
+  padding-left: 16px;
+  padding-right: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-12 {
+  box-sizing: border-box;
+  margin-right: 8px;
+}
+
+.glamor-39 {
+  box-sizing: border-box;
+  padding: 0px;
+  padding-top: 16px;
+  padding-bottom: 16px;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  border-bottom: 1px solid;
+}
+
+.glamor-39:last-child {
+  border: 0;
+}
+
+.glamor-29 {
+  box-sizing: border-box;
+  padding-left: 16px;
+}
+
+.glamor-27 {
+  height: 32px;
+  width: 32px;
+  border-radius: 3px;
+  display: block;
+}
+
+.glamor-31 {
+  font-size: 1.6rem;
+  margin-bottom: 3px;
+}
+
+.glamor-33 {
+  font-size: 1.4rem;
+}
+
+.glamor-37 {
+  box-sizing: border-box;
+  margin-right: 8px;
+  padding-right: 16px;
+}
+
+.glamor-49 {
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  border: 1px dashed;
+  padding: NaNpx;
+  margin-bottom: NaNpx;
+  border-radius: 0.25em;
+  -webkit-transition: 0.2s border-color;
+  transition: 0.2s border-color;
+}
+
+.glamor-45 {
+  -webkit-box-flex: 1;
+  -webkit-flex-grow: 1;
+  -ms-flex-positive: 1;
+  flex-grow: 1;
+}
+
+.glamor-47 {
+  vertical-align: middle;
+}
+
+.glamor-69 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  font-size: 1.5rem;
+  line-height: 2.1rem;
+}
+
+.glamor-61 {
+  box-sizing: border-box;
+  width: 62.5%;
+}
+
+.glamor-57 li {
+  margin-bottom: 6px;
+}
+
+.glamor-67 {
+  box-sizing: border-box;
+  margin-left: 60px;
+}
+
+.glamor-63 {
+  display: block;
+  margin-bottom: 6px;
+}
+
+<OrganizationIntegrationConfig
+  params={
+    Object {
+      "orgId": "org-slug",
+      "providerKey": "github",
+    }
+  }
+>
+  <SideEffect(DocumentTitle)
+    title="GitHub Integration - Sentry"
+  >
+    <DocumentTitle
+      title="GitHub Integration - Sentry"
+    >
+      <SettingsPageHeading
+        icon={
+          <PluginIcon
+            pluginId="github"
+            size={28}
+          />
+        }
+        title="GitHub"
+      >
+        <Wrapper>
+          <div
+            className="glamor-8 glamor-9"
+          >
+            <Flex
+              align="center"
+            >
+              <Base
+                align="center"
+                className="glamor-6"
+              >
+                <div
+                  className="glamor-6"
+                  is={null}
+                >
+                  <Box
+                    pr={1}
+                  >
+                    <Base
+                      className="glamor-2"
+                      pr={1}
+                    >
+                      <div
+                        className="glamor-2"
+                        is={null}
+                      >
+                        <PluginIcon
+                          pluginId="github"
+                          size={28}
+                        >
+                          <IntegrationIcon
+                            image={Object {}}
+                            size={28}
+                          >
+                            <div
+                              className="glamor-0 glamor-1"
+                              size={28}
+                            />
+                          </IntegrationIcon>
+                        </PluginIcon>
+                      </div>
+                    </Base>
+                  </Box>
+                  <Title>
+                    <div
+                      className="glamor-4 glamor-5"
+                    >
+                      GitHub
+                    </div>
+                  </Title>
+                </div>
+              </Base>
+            </Flex>
+          </div>
+        </Wrapper>
+      </SettingsPageHeading>
+      <Panel>
+        <div
+          className="glamor-43 glamor-44"
+        >
+          <PanelHeader
+            disablePadding={true}
+            hasButtons={true}
+          >
+            <StyledPanelHeader
+              disablePadding={true}
+              hasButtons={true}
+            >
+              <Component
+                className="glamor-23 glamor-24"
+                disablePadding={true}
+                hasButtons={true}
+              >
+                <div
+                  className="glamor-23 glamor-24"
+                >
+                  <StyledPanelHeading>
+                    <Component
+                      className="glamor-19 glamor-16"
+                    >
+                      <PanelHeading
+                        className="glamor-19 glamor-16"
+                      >
+                        <div
+                          className="glamor-16 glamor-17 glamor-18"
+                        >
+                          <Flex
+                            align="center"
+                          >
+                            <Base
+                              align="center"
+                              className="glamor-6"
+                            >
+                              <div
+                                className="glamor-6"
+                                is={null}
+                              >
+                                <Box
+                                  flex="1"
+                                  px={2}
+                                >
+                                  <Base
+                                    className="glamor-10"
+                                    flex="1"
+                                    px={2}
+                                  >
+                                    <div
+                                      className="glamor-10"
+                                      is={null}
+                                    >
+                                      Workspaces
+                                    </div>
+                                  </Base>
+                                </Box>
+                                <Box
+                                  mr={1}
+                                >
+                                  <Base
+                                    className="glamor-12"
+                                    mr={1}
+                                  >
+                                    <div
+                                      className="glamor-12"
+                                      is={null}
+                                    >
+                                      <Button
+                                        disabled={false}
+                                        onClick={[Function]}
+                                        size="xsmall"
+                                      >
+                                        <button
+                                          className="button button-default button-xs"
+                                          disabled={false}
+                                          onClick={[Function]}
+                                          role="button"
+                                        >
+                                          <FlowLayout
+                                            truncate={false}
+                                          >
+                                            <div
+                                              className="flow-layout"
+                                            >
+                                              <span
+                                                className="button-label"
+                                              >
+                                                <span
+                                                  className="icon icon-add"
+                                                />
+                                                 
+                                                Add Workspace
+                                              </span>
+                                            </div>
+                                          </FlowLayout>
+                                        </button>
+                                      </Button>
+                                    </div>
+                                  </Base>
+                                </Box>
+                              </div>
+                            </Base>
+                          </Flex>
+                        </div>
+                      </PanelHeading>
+                    </Component>
+                  </StyledPanelHeading>
+                </div>
+              </Component>
+            </StyledPanelHeader>
+          </PanelHeader>
+          <PanelBody
+            direction="column"
+            disablePadding={true}
+            flex={false}
+          >
+            <div
+              className=""
+            >
+              <PanelItem
+                key="1"
+                p={0}
+                py={2}
+              >
+                <StyledPanelItem
+                  p={0}
+                  py={2}
+                >
+                  <Base
+                    className="glamor-39 glamor-40"
+                    p={0}
+                    py={2}
+                  >
+                    <div
+                      className="glamor-39 glamor-40"
+                      is={null}
+                    >
+                      <Box
+                        pl={2}
+                      >
+                        <Base
+                          className="glamor-29"
+                          pl={2}
+                        >
+                          <div
+                            className="glamor-29"
+                            is={null}
+                          >
+                            <IntegrationIcon
+                              src="http://example.com/integration_icon.png"
+                            >
+                              <img
+                                className="glamor-27 glamor-28"
+                                src="http://example.com/integration_icon.png"
+                              />
+                            </IntegrationIcon>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        flex={1}
+                        px={2}
+                      >
+                        <Base
+                          className="glamor-10"
+                          flex={1}
+                          px={2}
+                        >
+                          <div
+                            className="glamor-10"
+                            is={null}
+                          >
+                            <IntegrationName>
+                              <div
+                                className="glamor-31 glamor-32"
+                              >
+                                Test Integration
+                              </div>
+                            </IntegrationName>
+                            <DomainName>
+                              <div
+                                className="glamor-33 glamor-34"
+                              >
+                                gtithub.com/test-integration
+                              </div>
+                            </DomainName>
+                          </div>
+                        </Base>
+                      </Box>
+                      <Box
+                        mr={1}
+                        pr={2}
+                      >
+                        <Base
+                          className="glamor-37"
+                          mr={1}
+                          pr={2}
+                        >
+                          <div
+                            className="glamor-37"
+                            is={null}
+                          >
+                            <Confirm
+                              cancelText="Cancel"
+                              confirmText="Confirm"
+                              message="Removing this inegration will disable the integration for all projects. Are you sure you want to remove this integration?"
+                              onConfirm={[Function]}
+                              priority="primary"
+                            >
+                              <Button
+                                disabled={false}
+                                onClick={[Function]}
+                                size="small"
+                              >
+                                <button
+                                  className="button button-default button-sm"
+                                  disabled={false}
+                                  onClick={[Function]}
+                                  role="button"
+                                >
+                                  <FlowLayout
+                                    truncate={false}
+                                  >
+                                    <div
+                                      className="flow-layout"
+                                    >
+                                      <span
+                                        className="button-label"
+                                      >
+                                        <span
+                                          className="icon icon-trash"
+                                          style={
+                                            Object {
+                                              "margin": 0,
+                                            }
+                                          }
+                                        />
+                                      </span>
+                                    </div>
+                                  </FlowLayout>
+                                </button>
+                              </Button>
+                              <Modal
+                                animation={false}
+                                autoFocus={true}
+                                backdrop={true}
+                                bsClass="modal"
+                                dialogComponentClass={[Function]}
+                                enforceFocus={true}
+                                keyboard={true}
+                                manager={
+                                  ModalManager {
+                                    "add": [Function],
+                                    "containers": Array [],
+                                    "data": Array [],
+                                    "handleContainerOverflow": true,
+                                    "hideSiblingNodes": true,
+                                    "isTopModal": [Function],
+                                    "modals": Array [],
+                                    "remove": [Function],
+                                  }
+                                }
+                                onHide={[Function]}
+                                renderBackdrop={[Function]}
+                                restoreFocus={true}
+                                show={false}
+                              >
+                                <Modal
+                                  autoFocus={true}
+                                  backdrop={true}
+                                  backdropClassName="modal-backdrop"
+                                  containerClassName="modal-open"
+                                  enforceFocus={true}
+                                  keyboard={true}
+                                  manager={
+                                    ModalManager {
+                                      "add": [Function],
+                                      "containers": Array [],
+                                      "data": Array [],
+                                      "handleContainerOverflow": true,
+                                      "hideSiblingNodes": true,
+                                      "isTopModal": [Function],
+                                      "modals": Array [],
+                                      "remove": [Function],
+                                    }
+                                  }
+                                  onEntering={[Function]}
+                                  onExited={[Function]}
+                                  onHide={[Function]}
+                                  renderBackdrop={[Function]}
+                                  restoreFocus={true}
+                                  show={false}
+                                />
+                              </Modal>
+                            </Confirm>
+                          </div>
+                        </Base>
+                      </Box>
+                    </div>
+                  </Base>
+                </StyledPanelItem>
+              </PanelItem>
+            </div>
+          </PanelBody>
+        </div>
+      </Panel>
+      <AlertLink
+        to="/url/with/params/org-slug/"
+      >
+        <Component
+          className="glamor-49 glamor-50"
+          to="/url/with/params/org-slug/"
+        >
+          <Link
+            className="glamor-49 glamor-50"
+            to="/url/with/params/org-slug/"
+          >
+            <Link
+              className="glamor-49 glamor-50"
+              onlyActiveOnIndex={false}
+              style={Object {}}
+              to="/url/with/params/org-slug/"
+            >
+              <a
+                className="glamor-49 glamor-50"
+                onClick={[Function]}
+                style={Object {}}
+              >
+                <AlertLinkText>
+                  <div
+                    className="glamor-45 glamor-46"
+                  >
+                    <span
+                      dangerouslySetInnerHTML={
+                        Object {
+                          "__html": "This is a <em>alert link</em> with markdown formatting",
+                        }
+                      }
+                    />
+                  </div>
+                </AlertLinkText>
+                <InlineSvg
+                  size="1em"
+                  src="icon-chevron-right"
+                >
+                  <StyledSvg
+                    className=""
+                    height="1em"
+                    style={Object {}}
+                    viewBox={Object {}}
+                    width="1em"
+                  >
+                    <svg
+                      className="glamor-47 glamor-48"
+                      height="1em"
+                      style={Object {}}
+                      viewBox={Object {}}
+                      width="1em"
+                    >
+                      <use
+                        href="#test"
+                        xlinkHref="#test"
+                      />
+                    </svg>
+                  </StyledSvg>
+                </InlineSvg>
+              </a>
+            </Link>
+          </Link>
+        </Component>
+      </AlertLink>
+      <hr />
+      <h5>
+        GitHub Integration
+      </h5>
+      <Details>
+        <Base
+          className="glamor-69 glamor-70"
+        >
+          <div
+            className="glamor-69 glamor-70"
+            is={null}
+          >
+            <Box
+              width={0.625}
+            >
+              <Base
+                className="glamor-61"
+                width={0.625}
+              >
+                <div
+                  className="glamor-61"
+                  is={null}
+                >
+                  <Description
+                    dangerouslySetInnerHTML={
+                      Object {
+                        "__html": "<p><em>markdown</em> formatted <em>description</em></p>
+",
+                      }
+                    }
+                  >
+                    <div
+                      className="glamor-57 glamor-58"
+                      dangerouslySetInnerHTML={
+                        Object {
+                          "__html": "<p><em>markdown</em> formatted <em>description</em></p>
+",
+                        }
+                      }
+                    />
+                  </Description>
+                  <AuthorName>
+                    <div
+                      className="glamor-59 glamor-60"
+                    >
+                      By Morty
+                    </div>
+                  </AuthorName>
+                </div>
+              </Base>
+            </Box>
+            <Box
+              ml={60}
+            >
+              <Base
+                className="glamor-67"
+                ml={60}
+              >
+                <div
+                  className="glamor-67"
+                  is={null}
+                >
+                  <MetadataLink
+                    href="http://example.com/integration_issue_url"
+                  >
+                    <a
+                      className="glamor-63 glamor-64"
+                      href="http://example.com/integration_issue_url"
+                    >
+                      Report an Issue
+                    </a>
+                  </MetadataLink>
+                  <MetadataLink
+                    href="http://example.com/integration_source_url"
+                  >
+                    <a
+                      className="glamor-63 glamor-64"
+                      href="http://example.com/integration_source_url"
+                    >
+                      View Source
+                    </a>
+                  </MetadataLink>
+                </div>
+              </Base>
+            </Box>
+          </div>
+        </Base>
+      </Details>
+    </DocumentTitle>
+  </SideEffect(DocumentTitle)>
+</OrganizationIntegrationConfig>
+`;
+
+exports[`OrganizationIntegrationConfig render() without any integrations Displays an error for an invalid provider key 1`] = `
+<SideEffect(DocumentTitle)
+  title="Global Integrations - Sentry"
+>
+  <LoadingError
+    message="Invalid integration provider"
+  />
+</SideEffect(DocumentTitle)>
+`;
diff --git a/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
index b2317cd4e0..3c162399e4 100644
--- a/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
@@ -217,7 +217,7 @@ exports[`OrganizationIntegrations render() with a provider renders with a reposi
           >
             <tbody>
               <tr
-                key="4"
+                key="1"
               >
                 <td
                   style={
@@ -244,7 +244,7 @@ exports[`OrganizationIntegrations render() with a provider renders with a reposi
                 </td>
                 <td>
                   <strong>
-                    repo-name
+                    Test Integration
                   </strong>
                    —
                    
diff --git a/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
index 933d4bec5b..d96432d7d8 100644
--- a/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
@@ -30,7 +30,7 @@ exports[`OrganizationRepositories renders with a repository 1`] = `
                     "type": "text",
                   },
                 ],
-                "id": "github",
+                "key": "github",
                 "name": "GitHub",
               }
             }
@@ -147,7 +147,7 @@ exports[`OrganizationRepositories renders with github provider 1`] = `
                     "type": "text",
                   },
                 ],
-                "id": "github",
+                "key": "github",
                 "name": "GitHub",
               }
             }
diff --git a/tests/js/spec/views/organizationIntegrationConfig.spec.jsx b/tests/js/spec/views/organizationIntegrationConfig.spec.jsx
new file mode 100644
index 0000000000..0e0eb90028
--- /dev/null
+++ b/tests/js/spec/views/organizationIntegrationConfig.spec.jsx
@@ -0,0 +1,161 @@
+/*global global*/
+import React from 'react';
+import {mount, shallow} from 'enzyme';
+
+import OrganizationIntegrationConfig from 'app/views/organizationIntegrationConfig';
+import {Client} from 'app/api';
+
+describe('OrganizationIntegrationConfig', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+  });
+
+  describe('render()', function() {
+    const org = TestStubs.Organization();
+    const provider = TestStubs.GitHubIntegrationProvider();
+    const integration = TestStubs.GitHubIntegration();
+    const params = {
+      orgId: org.slug,
+      providerKey: provider.key,
+    };
+    const routerContext = TestStubs.routerContext();
+
+    describe('without any integrations', function() {
+      beforeEach(function() {
+        Client.addMockResponse({
+          url: `/organizations/${org.slug}/integrations/`,
+          body: [],
+        });
+        Client.addMockResponse({
+          url: `/organizations/${org.slug}/config/integrations/`,
+          body: {providers: [provider]},
+        });
+      });
+
+      it('Displays an empty list', function() {
+        const wrapper = shallow(
+          <OrganizationIntegrationConfig params={params} />,
+          routerContext
+        );
+        expect(wrapper.find('PanelBody EmptyMessage').exists()).toBe(true);
+      });
+
+      it('Displays an error for an invalid provider key', function() {
+        const invalidKeyParams = {...params, providerKey: 'bad-key'};
+        const wrapper = shallow(
+          <OrganizationIntegrationConfig params={invalidKeyParams} />,
+          routerContext
+        );
+        expect(wrapper).toMatchSnapshot();
+      });
+    });
+
+    describe('with one integration', function() {
+      beforeEach(function() {
+        Client.addMockResponse({
+          url: `/organizations/${org.slug}/integrations/`,
+          body: [integration],
+        });
+        Client.addMockResponse({
+          url: `/organizations/${org.slug}/config/integrations/`,
+          body: {providers: [provider]},
+        });
+      });
+
+      it('renders', function() {
+        const wrapper = mount(
+          <OrganizationIntegrationConfig params={params} />,
+          routerContext
+        );
+        expect(wrapper).toMatchSnapshot();
+      });
+
+      it('opens a dialog on integration add', function() {
+        const wrapper = mount(
+          <OrganizationIntegrationConfig params={params} />,
+          routerContext
+        );
+
+        const focus = jest.fn();
+        const open = jest.fn().mockReturnValue({focus});
+        global.open = open;
+
+        wrapper.find('PanelHeading Button').simulate('click');
+        expect(open.mock.calls.length).toBe(1);
+        expect(focus.mock.calls.length).toBe(1);
+        expect(open.mock.calls[0][2]).toBe(
+          'scrollbars=yes,width=100,height=100,top=334,left=462'
+        );
+      });
+
+      it('Adds an integration on dialog completion', function() {
+        const wrapper = mount(
+          <OrganizationIntegrationConfig params={params} />,
+          routerContext
+        );
+
+        wrapper.instance().receiveMessage({
+          source: null,
+          origin: 'null',
+          data: {
+            success: true,
+            data: {
+              id: '2',
+              domain_name: 'new-integration.github.com',
+              icon: 'http://example.com/new-integration-icon.png',
+              name: 'New Integration',
+              provider: integration.provider,
+            },
+          },
+        });
+
+        expect(wrapper.instance().state.itemList.length).toBe(2);
+      });
+
+      it('Merges existing integrations', function() {
+        const wrapper = mount(
+          <OrganizationIntegrationConfig params={params} />,
+          routerContext
+        );
+
+        const updatedIntegration = {
+          id: '1',
+          domain_name: 'updated-integration.github.com',
+          icon: 'http://example.com/updated-integration-icon.png',
+          name: 'Updated Integration',
+          provider: integration.provider,
+        };
+
+        wrapper.instance().receiveMessage({
+          source: null,
+          origin: 'null',
+          data: {
+            success: true,
+            data: updatedIntegration,
+          },
+        });
+
+        expect(wrapper.instance().state.itemList.length).toBe(1);
+        expect(wrapper.instance().state.itemList[0]).toBe(updatedIntegration);
+      });
+
+      it('Deletes an integration', function() {
+        const wrapper = mount(
+          <OrganizationIntegrationConfig params={params} />,
+          routerContext
+        );
+
+        Client.addMockResponse({
+          url: `/organizations/${org.slug}/integrations/${integration.id}/`,
+          method: 'DELETE',
+          statusCode: 200,
+        });
+
+        wrapper.find('PanelBody Button').simulate('click');
+        wrapper.find('PanelBody Modal Button[priority="primary"]').simulate('click');
+
+        expect(wrapper.find('PanelBody EmptyMessage').exists()).toBe(true);
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/views/organizationIntegrations.spec.jsx b/tests/js/spec/views/organizationIntegrations.spec.jsx
index f50e36d4ef..a0d4e0b3b5 100644
--- a/tests/js/spec/views/organizationIntegrations.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations.spec.jsx
@@ -84,7 +84,7 @@ describe('OrganizationIntegrations', function() {
       it('renders with a repository', function() {
         Client.addMockResponse({
           url: '/organizations/org-slug/integrations/',
-          body: [TestStubs.Integration()],
+          body: [TestStubs.GitHubIntegration()],
         });
         let wrapper = mount(<OrganizationIntegrations params={{orgId: 'org-slug'}} />, {
           context: {
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
index d9e08e1544..df9d7cc1de 100644
--- a/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
@@ -1,70 +1,65 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`ProjectPlugins renders 1`] = `
-<div>
-  <SettingsPageHeading
-    title="Integrations"
-  />
-  <div
-    className="panel panel-default"
+<div
+  className="panel panel-default"
+>
+  <table
+    className="table integrations simple"
   >
-    <table
-      className="table integrations simple"
-    >
-      <thead>
-        <tr>
-          <th
-            colSpan={2}
-          >
-            Integration
-          </th>
-          <th
-            className="align-right"
-          >
-            Enabled
-          </th>
-        </tr>
-      </thead>
-      <tbody>
-        <ProjectPluginRow
-          assets={Array []}
-          author={
-            Object {
-              "name": "Sentry Team",
-              "url": "https://github.com/getsentry/sentry",
-            }
+    <thead>
+      <tr>
+        <th
+          colSpan={2}
+        >
+          Legacy Integration
+        </th>
+        <th
+          className="align-right"
+        >
+          Enabled
+        </th>
+      </tr>
+    </thead>
+    <tbody>
+      <ProjectPluginRow
+        assets={Array []}
+        author={
+          Object {
+            "name": "Sentry Team",
+            "url": "https://github.com/getsentry/sentry",
           }
-          canDisable={true}
-          enabled={false}
-          hasConfiguration={true}
-          id="amazon-sqs"
-          key="amazon-sqs"
-          name="Amazon SQS"
-          orgId="org-slug"
-          projectId="project-slug"
-          slug="amazon-sqs"
-          version="8.23.0.dev0"
-        />
-        <ProjectPluginRow
-          assets={Array []}
-          author={
-            Object {
-              "name": "Sentry Team",
-              "url": "https://github.com/getsentry/sentry",
-            }
+        }
+        canDisable={true}
+        enabled={false}
+        hasConfiguration={true}
+        id="amazon-sqs"
+        key="amazon-sqs"
+        name="Amazon SQS"
+        orgId="org-slug"
+        projectId="project-slug"
+        slug="amazon-sqs"
+        version="8.23.0.dev0"
+      />
+      <ProjectPluginRow
+        assets={Array []}
+        author={
+          Object {
+            "name": "Sentry Team",
+            "url": "https://github.com/getsentry/sentry",
           }
-          canDisable={false}
-          enabled={true}
-          id="github"
-          key="github"
-          name="GitHub"
-          orgId="org-slug"
-          projectId="project-slug"
-          slug="github"
-          version="8.23.0.dev0"
-        />
-      </tbody>
-    </table>
-  </div>
+        }
+        canDisable={false}
+        enabled={true}
+        id="github"
+        key="github"
+        name="GitHub"
+        orgId="org-slug"
+        projectId="project-slug"
+        slug="github"
+        version="8.23.0.dev0"
+      />
+    </tbody>
+  </table>
 </div>
 `;
diff --git a/tests/js/spec/views/projectPlugins/index.spec.jsx b/tests/js/spec/views/projectPlugins/index.spec.jsx
index f255f9a666..c0447cd125 100644
--- a/tests/js/spec/views/projectPlugins/index.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/index.spec.jsx
@@ -8,13 +8,26 @@ import {fetchPlugins, enablePlugin, disablePlugin} from 'app/actionCreators/plug
 jest.mock('app/actionCreators/plugins');
 
 describe('ProjectPluginsContainer', function() {
-  let org, project, plugins, wrapper;
+  let org, project, plugins, wrapper, params, organization;
 
   beforeEach(function() {
     org = TestStubs.Organization();
     project = TestStubs.Project();
     plugins = TestStubs.Plugins();
+    params = {
+      orgId: org.slug,
+      projectId: project.slug,
+    };
+    organization = {
+      id: org.slug,
+      features: ['integrations-v3'],
+    };
 
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/config/integrations/`,
+      method: 'GET',
+      body: {providers: [TestStubs.GitHubIntegrationProvider()]},
+    });
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/plugins/`,
       method: 'GET',
@@ -28,18 +41,15 @@ describe('ProjectPluginsContainer', function() {
       url: `/projects/${org.slug}/${project.slug}/plugins/github/`,
       method: 'DELETE',
     });
-    wrapper = mount(
-      <ProjectPlugins params={{orgId: org.slug, projectId: project.slug}} />,
-      {
-        context: {
-          router: TestStubs.router(),
-        },
+    wrapper = mount(<ProjectPlugins params={params} organization={organization} />, {
+      context: {
+        router: TestStubs.router(),
+      },
 
-        childContextTypes: {
-          router: PropTypes.object,
-        },
-      }
-    );
+      childContextTypes: {
+        router: PropTypes.object,
+      },
+    });
   });
 
   it('calls `fetchPlugins` action creator after mount', function() {
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
index ac6309ff0c..41862cf164 100644
--- a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
@@ -16,6 +16,11 @@ describe('PluginNavigation Integration', function() {
     project = TestStubs.Project();
     plugins = TestStubs.Plugins();
 
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/config/integrations/`,
+      method: 'GET',
+      body: {providers: [TestStubs.GitHubIntegrationProvider()]},
+    });
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/plugins/`,
       method: 'GET',
@@ -39,10 +44,14 @@ describe('PluginNavigation Integration', function() {
   describe('with PluginNavigation', function() {
     beforeEach(async function() {
       let params = {orgId: org.slug, projectId: project.slug};
+      let organization = {
+        id: org.slug,
+        features: ['integrations-v3'],
+      };
 
       wrapper = mount(
         <div>
-          <ProjectPlugins params={params} />
+          <ProjectPlugins params={params} organization={organization} />
           <PluginNavigation urlRoot="/" />
         </div>,
         {
diff --git a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
index 787f170e2b..05fba182c8 100644
--- a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
@@ -7,16 +7,32 @@ describe('ProjectPlugins', function() {
   let plugins = TestStubs.Plugins();
   let org = TestStubs.Organization();
   let project = TestStubs.Project();
-  let params = {orgId: org.slug, projectId: project.slug};
+  let params = {
+    orgId: org.slug,
+    projectId: project.slug,
+  };
 
   it('renders', function() {
-    wrapper = shallow(<ProjectPlugins params={params} plugins={plugins} />);
+    wrapper = shallow(
+      <ProjectPlugins
+        params={params}
+        plugins={plugins}
+        organization={{features: ['integrations-v3']}}
+      />
+    );
 
     expect(wrapper).toMatchSnapshot();
   });
 
   it('has loading state', function() {
-    wrapper = shallow(<ProjectPlugins params={params} loading plugins={[]} />);
+    wrapper = shallow(
+      <ProjectPlugins
+        params={params}
+        loading
+        plugins={[]}
+        organization={{features: ['integrations-v3']}}
+      />
+    );
 
     expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
   });
@@ -27,6 +43,7 @@ describe('ProjectPlugins', function() {
         params={params}
         plugins={null}
         loading
+        organization={{features: ['integrations-v3']}}
         error={new Error('An error')}
       />
     );
@@ -40,6 +57,7 @@ describe('ProjectPlugins', function() {
         params={params}
         plugins={[]}
         loading
+        organization={{features: ['integrations-v3']}}
         error={new Error('An error')}
       />
     );
