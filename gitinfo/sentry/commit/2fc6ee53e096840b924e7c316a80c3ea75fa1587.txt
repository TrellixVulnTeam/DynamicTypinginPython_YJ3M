commit 2fc6ee53e096840b924e7c316a80c3ea75fa1587
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Apr 8 11:26:44 2019 -0700

    ref(app-platform): Allow for async select form fields (#12550)
    
    * async requests for form fields
    
    * add comment about debounce

diff --git a/src/sentry/api/endpoints/sentry_app_installation_external_requests.py b/src/sentry/api/endpoints/sentry_app_installation_external_requests.py
index ad19e6ad9e..6d83298dcd 100644
--- a/src/sentry/api/endpoints/sentry_app_installation_external_requests.py
+++ b/src/sentry/api/endpoints/sentry_app_installation_external_requests.py
@@ -26,7 +26,9 @@ class SentryAppInstallationExternalRequestsEndpoint(SentryAppInstallationBaseEnd
         kwargs = {
             'install': installation,
             'uri': request.GET.get('uri'),
+            'query': request.GET.get('query'),
         }
+
         if project:
             kwargs.update({'project': project})
 
diff --git a/src/sentry/mediators/external_requests/select_requester.py b/src/sentry/mediators/external_requests/select_requester.py
index 776a8f26d9..bd937ab9da 100644
--- a/src/sentry/mediators/external_requests/select_requester.py
+++ b/src/sentry/mediators/external_requests/select_requester.py
@@ -28,6 +28,7 @@ class SelectRequester(Mediator):
     install = Param('sentry.models.SentryAppInstallation')
     project = Param('sentry.models.Project', required=False)
     uri = Param(six.string_types)
+    query = Param(six.string_types, required=False)
 
     def call(self):
         return self._make_request()
@@ -41,6 +42,9 @@ class SelectRequester(Mediator):
         if self.project:
             query['projectSlug'] = self.project.slug
 
+        if self.query:
+            query['query'] = self.query
+
         urlparts[4] = urlencode(query)
         return urlunparse(urlparts)
 
@@ -54,14 +58,15 @@ class SelectRequester(Mediator):
             )
 
             response = json.loads(body)
-        except Exception:
+        except Exception as e:
             logger.info(
                 'select-requester.error',
                 extra={
                     'sentry_app': self.sentry_app.slug,
                     'install': self.install.uuid,
-                    'project': self.project.slug,
+                    'project': self.project and self.project.slug,
                     'uri': self.uri,
+                    'error_message': e.message,
                 }
             )
             response = {}
diff --git a/src/sentry/mediators/sentry_app_components/preparer.py b/src/sentry/mediators/sentry_app_components/preparer.py
index 5916d166df..27b7789961 100644
--- a/src/sentry/mediators/sentry_app_components/preparer.py
+++ b/src/sentry/mediators/sentry_app_components/preparer.py
@@ -54,7 +54,8 @@ class Preparer(Mediator):
             field.update({'choices': field['options']})
 
         if 'uri' in field:
-            field.update(self._request(field['uri']))
+            if 'async' not in field:
+                field.update(self._request(field['uri']))
 
     def _request(self, uri):
         return SelectRequester.run(
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx
index 2c3eccf115..c47aeffd80 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import PropTypes from 'prop-types';
+import {debounce} from 'lodash';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
@@ -8,9 +9,11 @@ import Form from 'app/views/settings/components/forms/form';
 import SentryTypes from 'app/sentryTypes';
 import {t} from 'app/locale';
 import ExternalIssueStore from 'app/stores/externalIssueStore';
+import withApi from 'app/utils/withApi';
 
 class SentryAppExternalIssueForm extends React.Component {
   static propTypes = {
+    api: PropTypes.object.isRequired,
     group: SentryTypes.Group.isRequired,
     sentryAppInstallation: PropTypes.object,
     config: PropTypes.object.isRequired,
@@ -29,6 +32,50 @@ class SentryAppExternalIssueForm extends React.Component {
     addErrorMessage(t('Unable to %s %s issue.', action, appName));
   };
 
+  getOptions = (field, input) => {
+    return new Promise(resolve => {
+      this.debouncedOptionLoad(field, input, resolve);
+    });
+  };
+
+  debouncedOptionLoad = debounce(
+    // debounce is used to prevent making a request for every input change and
+    // instead makes the requests every 200ms
+    (field, input, resolve) => {
+      const install = this.props.sentryAppInstallation;
+      const projectId = this.props.group.project.id;
+
+      this.props.api
+        .requestPromise(`/sentry-app-installations/${install.uuid}/external-requests/`, {
+          query: {
+            projectId,
+            uri: field.uri,
+            query: input,
+          },
+        })
+        .then(data => {
+          const options = (data.choices || []).map(([value, label]) => ({value, label}));
+          return resolve({options});
+        });
+    },
+    200,
+    {trailing: true}
+  );
+
+  fieldProps = field => {
+    return field.uri
+      ? {
+          loadOptions: input => this.getOptions(field, input),
+          async: true,
+          cache: false,
+          onSelectResetsInput: false,
+          onCloseResetsInput: false,
+          onBlurResetsInput: false,
+          autoload: false,
+        }
+      : {};
+  };
+
   getFieldDefault(field) {
     const {group} = this.props;
     if (field.type == 'textarea') {
@@ -108,6 +155,7 @@ class SentryAppExternalIssueForm extends React.Component {
               stacked
               flexibleControlStateSize
               required={true}
+              {...this.fieldProps(field)}
             />
           );
         })}
@@ -126,6 +174,7 @@ class SentryAppExternalIssueForm extends React.Component {
               inline={false}
               stacked
               flexibleControlStateSize
+              {...this.fieldProps(field)}
             />
           );
         })}
@@ -134,4 +183,5 @@ class SentryAppExternalIssueForm extends React.Component {
   }
 }
 
-export default SentryAppExternalIssueForm;
+export {SentryAppExternalIssueForm};
+export default withApi(SentryAppExternalIssueForm);
diff --git a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
index 4c3c09a1b7..1be31baf2e 100644
--- a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
+++ b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import {mount} from 'enzyme';
+import {Client} from 'app/api';
 
 import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import SentryAppExternalIssueForm from 'app/components/group/sentryAppExternalIssueForm';
@@ -30,6 +31,7 @@ describe('SentryAppExternalIssueForm', () => {
           sentryAppInstallation={sentryAppInstallation}
           config={component.schema}
           action="create"
+          api={new Client()}
         />,
         TestStubs.routerContext()
       );
@@ -87,6 +89,7 @@ describe('SentryAppExternalIssueForm', () => {
           sentryAppInstallation={sentryAppInstallation}
           config={component.schema}
           action="link"
+          api={new Client()}
         />,
         TestStubs.routerContext()
       );
@@ -121,3 +124,90 @@ describe('SentryAppExternalIssueForm', () => {
     });
   });
 });
+
+describe('SentryAppExternalIssueForm Async Field', () => {
+  let wrapper;
+  let group;
+  let sentryApp;
+  let sentryAppInstallation;
+  const component = {
+    uuid: 'ed517da4-a324-44c0-aeea-1894cd9923fb',
+    type: 'issue-link',
+    schema: {
+      create: {
+        required_fields: [
+          {
+            type: 'select',
+            name: 'numbers',
+            label: 'Numbers',
+            uri: '/sentry/numbers',
+            url: '/sentry/numbers',
+            async: true,
+          },
+        ],
+      },
+      link: {
+        required_fields: [
+          {
+            type: 'text',
+            name: 'issue',
+            label: 'Issue',
+          },
+        ],
+      },
+    },
+    sentryApp: {
+      uuid: 'b468fed3-afba-4917-80d6-bdac99c1ec05',
+      slug: 'foo',
+      name: 'Foo',
+    },
+  };
+
+  beforeEach(() => {
+    group = TestStubs.Group({
+      title: 'ApiError: Broken',
+      shortId: 'SEN123',
+      permalink: 'https://sentry.io/organizations/sentry/issues/123/?project=1',
+    });
+    sentryApp = TestStubs.SentryApp();
+    sentryAppInstallation = TestStubs.SentryAppInstallation({sentryApp});
+  });
+
+  afterEach(() => {
+    Client.clearMockResponses();
+  });
+
+  describe('renders', () => {
+    it('renders each required_fields field', async function() {
+      Client.addMockResponse({
+        method: 'GET',
+        url:
+          '/sentry-app-installations/d950595e-cba2-46f6-8a94-b79e42806f98/external-requests/',
+        body: {
+          choices: [[1, 'Issue 1'], [2, 'Issue 2']],
+        },
+      });
+
+      wrapper = mount(
+        <SentryAppExternalIssueForm
+          group={group}
+          sentryAppInstallation={sentryAppInstallation}
+          config={component.schema}
+          action="create"
+          api={new Client()}
+        />,
+        TestStubs.routerContext()
+      );
+      wrapper.find('input#numbers').simulate('change', {target: {value: 'I'}});
+      await tick();
+      wrapper.update();
+
+      const optionLabelSelector = label => {
+        return `[aria-label="${label}"]`;
+      };
+
+      expect(wrapper.find(optionLabelSelector('Issue 1')).exists()).toBe(true);
+      expect(wrapper.find(optionLabelSelector('Issue 2')).exists()).toBe(true);
+    });
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py b/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py
index d4bdfb17bd..0e45a8b210 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py
@@ -48,7 +48,8 @@ class SentryAppInstallationExternalRequestsEndpointTest(APITestCase):
             status=200,
             content_type='application/json',
         )
-        url = self.url + u'?projectId={}&uri={}'.format(self.project.id, '/get-projects')
+        url = self.url + \
+            u'?projectId={}&uri={}&query={}'.format(self.project.id, '/get-projects', 'proj')
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         assert response.data == {
