commit 97d503e454aa714c99a7c7322349f7937b871b2f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Dec 4 18:53:47 2015 -0800

    Add the ability to silence the logger when getting an option
    
    This is just needed to make the CLI less noisy when doing `sentry
    upgrade` since we donâ€™t have a database even set up yet.

diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index a49356f537..046cc4fb7e 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -94,7 +94,7 @@ class OptionsManager(object):
                 return self.store.make_key(key, '', object, DEFAULT_FLAGS, 0, 0)
             raise UnknownOption(key)
 
-    def get(self, key):
+    def get(self, key, silent=False):
         """
         Get the value of an option, falling back to the local configuration.
 
@@ -108,7 +108,7 @@ class OptionsManager(object):
         opt = self.lookup_key(key)
 
         if not (opt.flags & FLAG_NOSTORE):
-            result = self.store.get(opt)
+            result = self.store.get(opt, silent=silent)
             if result is not None:
                 return result
 
diff --git a/src/sentry/options/store.py b/src/sentry/options/store.py
index d88c36b94c..0f3ddd8c9d 100644
--- a/src/sentry/options/store.py
+++ b/src/sentry/options/store.py
@@ -67,15 +67,15 @@ class OptionsStore(object):
     def make_key(self, name, default, type, flags, ttl, grace):
         return Key(name, default, type, flags, int(ttl), int(grace), _make_cache_key(name))
 
-    def get(self, key):
+    def get(self, key, silent=False):
         """
         Fetches a value from the options store.
         """
-        result = self.get_cache(key)
+        result = self.get_cache(key, silent=silent)
         if result is not None:
             return result
 
-        result = self.get_store(key)
+        result = self.get_store(key, silent=silent)
         if result is not None:
             return result
 
@@ -83,7 +83,7 @@ class OptionsStore(object):
         # in local cache that's possibly stale
         return self.get_local_cache(key, force_grace=True)
 
-    def get_cache(self, key):
+    def get_cache(self, key, silent=False):
         """
         First check agaist our local in-process cache, falling
         back to the network cache.
@@ -96,7 +96,8 @@ class OptionsStore(object):
         try:
             value = self.cache.get(cache_key)
         except Exception:
-            logger.warn(CACHE_FETCH_ERR, key.name, exc_info=True)
+            if not silent:
+                logger.warn(CACHE_FETCH_ERR, key.name, exc_info=True)
             value = None
         else:
             if key.ttl > 0:
@@ -148,7 +149,7 @@ class OptionsStore(object):
         # in grace, too bad. The value is considered bad.
         return None
 
-    def get_store(self, key):
+    def get_store(self, key, silent=False):
         """
         Attempt to fetch value from the database. If successful,
         also set it back in the cache.
@@ -165,7 +166,8 @@ class OptionsStore(object):
         except self.model.DoesNotExist:
             value = None
         except Exception as e:
-            logger.exception(unicode(e))
+            if not silent:
+                logger.exception(unicode(e))
             value = None
         else:
             # we only attempt to populate the cache if we were previously
@@ -175,7 +177,8 @@ class OptionsStore(object):
             try:
                 self.set_cache(key, value)
             except Exception:
-                logger.warn(CACHE_UPDATE_ERR, key.name, exc_info=True)
+                if not silent:
+                    logger.warn(CACHE_UPDATE_ERR, key.name, exc_info=True)
         return value
 
     def set(self, key, value):
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index e6c195d09e..4ce501e32e 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -209,7 +209,7 @@ def apply_legacy_settings(settings):
 
     if not hasattr(settings, 'SENTRY_URL_PREFIX'):
         from sentry import options
-        url_prefix = options.get('system.url-prefix')
+        url_prefix = options.get('system.url-prefix', silent=True)
         if not url_prefix:
             # HACK: We need to have some value here for backwards compatibility
             url_prefix = 'http://sentry.example.com'
