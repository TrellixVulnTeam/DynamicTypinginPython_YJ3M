commit b5ada7326cd1e3976e8903a636c1413c2606c291
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jan 19 18:08:02 2013 -0800

    Add basic activity feed support

diff --git a/src/sentry/migrations/0082_auto__add_activity__add_field_group_num_comments__add_field_event_num_.py b/src/sentry/migrations/0082_auto__add_activity__add_field_group_num_comments__add_field_event_num_.py
new file mode 100644
index 0000000000..85b6889ce3
--- /dev/null
+++ b/src/sentry/migrations/0082_auto__add_activity__add_field_group_num_comments__add_field_event_num_.py
@@ -0,0 +1,319 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'Activity'
+        db.create_table('sentry_activity', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('project', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Project'])),
+            ('group', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Group'], null=True)),
+            ('event', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Event'], null=True)),
+            ('type', self.gf('django.db.models.fields.PositiveIntegerField')()),
+            ('ident', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
+            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], null=True)),
+            ('datetime', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('data', self.gf('django.db.models.fields.TextField')(null=True)),
+        ))
+        db.send_create_signal('sentry', ['Activity'])
+
+        # Adding field 'Group.num_comments'
+        db.add_column('sentry_groupedmessage', 'num_comments',
+                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
+                      keep_default=False)
+
+        # Adding field 'Event.num_comments'
+        db.add_column('sentry_message', 'num_comments',
+                      self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True),
+                      keep_default=False)
+
+
+    def backwards(self, orm):
+        # Deleting model 'Activity'
+        db.delete_table('sentry_activity')
+
+        # Deleting field 'Group.num_comments'
+        db.delete_column('sentry_groupedmessage', 'num_comments')
+
+        # Deleting field 'Event.num_comments'
+        db.delete_column('sentry_message', 'num_comments')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
+        },
+        'sentry.affecteduserbygroup': {
+            'Meta': {'unique_together': "(('project', 'tuser', 'group'),)", 'object_name': 'AffectedUserByGroup'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'tuser': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.TrackedUser']", 'null': 'True'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filterkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'FilterKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'users_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'unique': 'True', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
+            'user_added': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.trackeduser': {
+            'Meta': {'unique_together': "(('project', 'ident'),)", 'object_name': 'TrackedUser'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'num_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models.py b/src/sentry/models.py
index b0c2567c33..54e75d51b2 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -40,7 +40,7 @@ from sentry.constants import (STATUS_LEVELS, MEMBER_TYPES,  # NOQA
 from sentry.manager import (GroupManager, ProjectManager,
     MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager,
     UserOptionManager, FilterKeyManager, TeamManager)
-from sentry.signals import buffer_incr_complete
+from sentry.signals import buffer_incr_complete, regression_signal
 from sentry.utils import cached_property, MockDjangoRequest
 from sentry.utils.models import Model, GzippedDictField, update
 from sentry.utils.imports import import_string
@@ -368,6 +368,7 @@ class MessageBase(Model):
     culprit = models.CharField(max_length=200, blank=True, null=True, db_column='view')
     checksum = models.CharField(max_length=32, db_index=True)
     data = GzippedDictField(blank=True, null=True)
+    num_comments = models.PositiveIntegerField(default=0, null=True)
     platform = models.CharField(max_length=64, null=True)
 
     class Meta:
@@ -888,6 +889,53 @@ class AffectedUserByGroup(Model):
                                                           self.ident)
 
 
+class Activity(models.Model):
+    COMMENT = 0
+    SET_RESOLVED = 1
+    SET_UNRESOLVED = 2
+    SET_MUTED = 3
+    SET_PUBLIC = 4
+    SET_PRIVATE = 5
+    SET_REGRESSION = 6
+
+    TYPE = (
+        # (TYPE, verb-slug)
+        (COMMENT, 'comment'),
+        (SET_RESOLVED, 'set_resolved'),
+        (SET_UNRESOLVED, 'set_unresolved'),
+        (SET_MUTED, 'set_muted'),
+        (SET_PUBLIC, 'set_public'),
+        (SET_PRIVATE, 'set_private'),
+        (SET_REGRESSION, 'set_regression'),
+    )
+
+    project = models.ForeignKey(Project)
+    group = models.ForeignKey(Group, null=True)
+    event = models.ForeignKey(Event, null=True)
+    # index on (type, ident)
+    type = models.PositiveIntegerField(choices=TYPE)
+    ident = models.CharField(max_length=64, null=True)
+    # if the user is not set, it's assumed to be the system
+    user = models.ForeignKey(User, null=True)
+    datetime = models.DateTimeField(default=timezone.now)
+    data = GzippedDictField(null=True)
+
+    def save(self, *args, **kwargs):
+        created = bool(not self.id)
+
+        super(Activity, self).save(*args, **kwargs)
+
+        if not created:
+            return
+
+        # HACK: support Group.num_comments
+        if self.type == Activity.COMMENT:
+            self.group.update(num_comments=F('num_comments') + 1)
+
+            if self.event:
+                self.event.update(num_comments=F('num_comments') + 1)
+
+
 ### django-indexer
 
 
@@ -1034,6 +1082,15 @@ def record_user_count(filters, created, **kwargs):
     })
 
 
+@regression_signal.connect(weak=False)
+def create_regression_activity(instance, **kwargs):
+    Activity.objects.create(
+        project=instance.project,
+        group=instance,
+        type=Activity.SET_REGRESSION,
+    )
+
+
 # Signal registration
 post_syncdb.connect(
     create_default_project,
diff --git a/src/sentry/templates/sentry/partial/_event_details.html b/src/sentry/templates/sentry/partial/_event_details.html
index 412e15e56a..ae27616dfb 100644
--- a/src/sentry/templates/sentry/partial/_event_details.html
+++ b/src/sentry/templates/sentry/partial/_event_details.html
@@ -1,6 +1,21 @@
 {% load i18n %}
+{% load sentry_activity %}
 {% load sentry_helpers %}
 
+{% if activity %}
+    <hr>
+    <ul class="activity">
+        {% for item in activity %}
+            {% with item|render_activity as out %}
+                {% if out %}
+                    <li class="item item-{{ item.get_type_display }}">{{ out }}</li>
+                {% endif %}
+            {% endwith %}
+        {% endfor %}
+    </ul>
+    <hr>
+{% endif %}
+
 {% for interface, interface_html in interface_list %}
     <div id="{{ interface.get_slug }}">
         {{ interface_html }}
@@ -58,4 +73,4 @@
             {% endfor %}
         </table>
     </div>
-{% endif %}
\ No newline at end of file
+{% endif %}
diff --git a/src/sentry/templatetags/sentry_activity.py b/src/sentry/templatetags/sentry_activity.py
new file mode 100644
index 0000000000..9567317daa
--- /dev/null
+++ b/src/sentry/templatetags/sentry_activity.py
@@ -0,0 +1,49 @@
+"""
+sentry.templatetags.sentry_activity
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django import template
+from django.utils.html import escape, linebreaks
+from django.utils.safestring import mark_safe
+
+from sentry.models import Activity
+from sentry.templatetags.sentry_helpers import timesince
+
+
+register = template.Library()
+
+
+ACTIVITY_ACTION_STRINGS = {
+    Activity.COMMENT: 'left a comment',
+    Activity.SET_RESOLVED: 'marked this event as resolved',
+    Activity.SET_UNRESOLVED: 'marked this event as unresolved',
+    Activity.SET_MUTED: 'marked this event as muted',
+    Activity.SET_PUBLIC: 'made this event public',
+    Activity.SET_PRIVATE: 'made this event private',
+    Activity.SET_REGRESSION: 'marked this event as a regression',
+}
+
+
+@register.filter
+def render_activity(item):
+    if not item.group:
+        # not implemented
+        return
+
+    action_str = ACTIVITY_ACTION_STRINGS[item.type]
+
+    if item.user:
+        name = item.user.first_name or item.user.email
+        output = '<p><strong>%s</strong> %s' % (escape(name), action_str)
+    else:
+        output = 'The system %s' % (action_str,)
+
+    output += ' &mdash; %s</p>' % (timesince(item.datetime),)
+
+    if item.type == Activity.COMMENT:
+        output += linebreaks(item.data['body'])
+
+    return mark_safe(output)
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 7afede9bfb..51aa6be9bf 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -20,12 +20,14 @@ from django.views.decorators.csrf import csrf_exempt
 from django.views.decorators.vary import vary_on_cookie
 from django.views.generic.base import View as BaseView
 from sentry.conf import settings
-from sentry.constants import MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED
-from sentry.coreapi import project_from_auth_vars, \
-  decode_and_decompress_data, safely_load_json_string, validate_data, \
-  insert_data_to_database, APIError, APIForbidden, extract_auth_vars
+from sentry.constants import (MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED,
+    STATUS_RESOLVED)
+from sentry.coreapi import (project_from_auth_vars,
+    decode_and_decompress_data, safely_load_json_string, validate_data,
+    insert_data_to_database, APIError, APIForbidden, extract_auth_vars)
 from sentry.exceptions import InvalidData
-from sentry.models import Group, GroupBookmark, Project, ProjectCountByMinute, FilterValue
+from sentry.models import (Group, GroupBookmark, Project, ProjectCountByMinute,
+    FilterValue, Activity)
 from sentry.plugins import plugins
 from sentry.utils import json
 from sentry.utils.cache import cache
@@ -289,6 +291,7 @@ def resolve(request, project):
     gid = request.REQUEST.get('gid')
     if not gid:
         return HttpResponseForbidden()
+
     try:
         group = Group.objects.get(pk=gid)
     except Group.DoesNotExist:
@@ -296,13 +299,23 @@ def resolve(request, project):
 
     now = timezone.now()
 
-    Group.objects.filter(pk=group.pk).update(
-        status=1,
+    happened = Group.objects.filter(
+        pk=group.pk,
+    ).exclude(status=STATUS_RESOLVED).update(
+        status=STATUS_RESOLVED,
         resolved_at=now,
     )
-    group.status = 1
+    group.status = STATUS_RESOLVED
     group.resolved_at = now
 
+    if happened:
+        Activity.objects.create(
+            project=project,
+            group=group,
+            type=Activity.SET_RESOLVED,
+            user=request.user,
+        )
+
     return to_json(group, request)
 
 
@@ -316,7 +329,15 @@ def make_group_public(request, project, group_id):
     except Group.DoesNotExist:
         return HttpResponseForbidden()
 
-    group.update(is_public=True)
+    happened = group.update(is_public=True)
+
+    if happened:
+        Activity.objects.create(
+            project=project,
+            group=group,
+            type=Activity.SET_PUBLIC,
+            user=request.user,
+        )
 
     return to_json(group, request)
 
@@ -331,7 +352,15 @@ def make_group_private(request, project, group_id):
     except Group.DoesNotExist:
         return HttpResponseForbidden()
 
-    group.update(is_public=False)
+    happened = group.update(is_public=False)
+
+    if happened:
+        Activity.objects.create(
+            project=project,
+            group=group,
+            type=Activity.SET_PRIVATE,
+            user=request.user,
+        )
 
     return to_json(group, request)
 
@@ -346,7 +375,14 @@ def mute_group(request, project, group_id):
     except Group.DoesNotExist:
         return HttpResponseForbidden()
 
-    group.update(status=STATUS_MUTED)
+    happened = group.update(status=STATUS_MUTED)
+    if happened:
+        Activity.objects.create(
+            project=project,
+            group=group,
+            type=Activity.SET_MUTED,
+            user=request.user,
+        )
 
     return to_json(group, request)
 
@@ -361,7 +397,14 @@ def unmute_group(request, project, group_id):
     except Group.DoesNotExist:
         return HttpResponseForbidden()
 
-    group.update(status=STATUS_UNRESOLVED)
+    happened = group.update(status=STATUS_UNRESOLVED)
+    if happened:
+        Activity.objects.create(
+            project=project,
+            group=group,
+            type=Activity.SET_UNRESOLVED,
+            user=request.user,
+        )
 
     return to_json(group, request)
 
@@ -422,8 +465,9 @@ def clear(request, project):
         project=project,
     )
 
+    # TODO: should we record some kind of global event in Activity?
     event_list = response['event_list']
-    event_list.update(status=1)
+    event_list.update(status=STATUS_RESOLVED)
 
     data = []
     response = HttpResponse(json.dumps(data))
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index ad896925d6..c8be75a18c 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -21,7 +21,7 @@ from sentry.constants import (SORT_OPTIONS, SEARCH_SORT_OPTIONS,
     SORT_CLAUSES, MYSQL_SORT_CLAUSES, SQLITE_SORT_CLAUSES, MEMBER_USER,
     SCORE_CLAUSES, MYSQL_SCORE_CLAUSES, SQLITE_SCORE_CLAUSES)
 from sentry.filters import get_filters
-from sentry.models import Group, Event, SearchDocument
+from sentry.models import Group, Event, SearchDocument, Activity
 from sentry.permissions import can_admin_group
 from sentry.plugins import plugins
 from sentry.utils import json
@@ -255,9 +255,13 @@ def render_with_group_context(group, template, context, request=None):
 
 @has_group_access
 def group(request, project, group):
+    activity = Activity.objects.filter(
+        group=group,
+    ).order_by('-datetime').select_related('user')
 
     return render_with_group_context(group, 'sentry/groups/details.html', {
         'page': 'details',
+        'activity': activity,
     }, request)
 
 
