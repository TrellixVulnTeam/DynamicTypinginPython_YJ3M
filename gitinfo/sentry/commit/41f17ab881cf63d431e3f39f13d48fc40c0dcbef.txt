commit 41f17ab881cf63d431e3f39f13d48fc40c0dcbef
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 11 15:31:03 2015 -0700

    Basic import/export functionality for core metadata

diff --git a/src/sentry/management/commands/export.py b/src/sentry/management/commands/export.py
new file mode 100644
index 0000000000..288db7c612
--- /dev/null
+++ b/src/sentry/management/commands/export.py
@@ -0,0 +1,120 @@
+from __future__ import absolute_import, print_function
+
+import sys
+
+from django.core import serializers
+from django.core.management.base import BaseCommand
+from django.db.models import get_app
+
+
+def sort_dependencies(app_list):
+    """
+    Similar to Django's except that we discard the important of natural keys
+    when sorting dependencies (i.e. it works without them).
+    """
+    from django.db.models import get_model, get_models
+
+    # Process the list of models, and get the list of dependencies
+    model_dependencies = []
+    models = set()
+    for app, model_list in app_list:
+        if model_list is None:
+            model_list = get_models(app)
+
+        for model in model_list:
+            models.add(model)
+            # Add any explicitly defined dependencies
+            if hasattr(model, 'natural_key'):
+                deps = getattr(model.natural_key, 'dependencies', [])
+                if deps:
+                    deps = [get_model(*d.split('.')) for d in deps]
+            else:
+                deps = []
+
+            # Now add a dependency for any FK relation with a model that
+            # defines a natural key
+            for field in model._meta.fields:
+                if hasattr(field.rel, 'to'):
+                    rel_model = field.rel.to
+                    if rel_model != model:
+                        deps.append(rel_model)
+
+            # Also add a dependency for any simple M2M relation with a model
+            # that defines a natural key.  M2M relations with explicit through
+            # models don't count as dependencies.
+            for field in model._meta.many_to_many:
+                rel_model = field.rel.to
+                if rel_model != model:
+                    deps.append(rel_model)
+            model_dependencies.append((model, deps))
+
+    model_dependencies.reverse()
+    # Now sort the models to ensure that dependencies are met. This
+    # is done by repeatedly iterating over the input list of models.
+    # If all the dependencies of a given model are in the final list,
+    # that model is promoted to the end of the final list. This process
+    # continues until the input list is empty, or we do a full iteration
+    # over the input models without promoting a model to the final list.
+    # If we do a full iteration without a promotion, that means there are
+    # circular dependencies in the list.
+    model_list = []
+    while model_dependencies:
+        skipped = []
+        changed = False
+        while model_dependencies:
+            model, deps = model_dependencies.pop()
+
+            # If all of the models in the dependency list are either already
+            # on the final model list, or not on the original serialization list,
+            # then we've found another model with all it's dependencies satisfied.
+            found = True
+            for candidate in ((d not in models or d in model_list) for d in deps):
+                if not candidate:
+                    found = False
+            if found:
+                model_list.append(model)
+                changed = True
+            else:
+                skipped.append((model, deps))
+        if not changed:
+            raise RuntimeError("Can't resolve dependencies for %s in serialized app list." %
+                ', '.join('%s.%s' % (model._meta.app_label, model._meta.object_name)
+                for model, deps in sorted(skipped, key=lambda obj: obj[0].__name__))
+            )
+        model_dependencies = skipped
+
+    return model_list
+
+
+class Command(BaseCommand):
+    help = 'Exports core metadata for the Sentry installation.'
+
+    def yield_objects(self):
+        app = get_app('sentry')
+
+        # Collate the objects to be serialized.
+        for model in sort_dependencies([(app, None)]):
+            if not getattr(model, '__core__', True):
+                sys.stderr.write(">> Skipping model <%s>\n" % (model.__name__,))
+                continue
+
+            if model._meta.proxy:
+                sys.stderr.write(">> Skipping model <%s>\n" % (model.__name__,))
+                continue
+
+            queryset = model._base_manager.order_by(model._meta.pk.name)
+            for obj in queryset.iterator():
+                yield obj
+
+    def handle(self, dest=None, **options):
+        if not dest:
+            sys.stderr.write('Usage: sentry export [dest]')
+            sys.exit(1)
+
+        if dest == '-':
+            dest = sys.stdout
+        else:
+            dest = open(dest, 'wb')
+
+        sys.stderr.write('>> Beggining export\n')
+        serializers.serialize("json", self.yield_objects(), indent=2, stream=dest)
diff --git a/src/sentry/management/commands/import.py b/src/sentry/management/commands/import.py
new file mode 100644
index 0000000000..381b9f5ba7
--- /dev/null
+++ b/src/sentry/management/commands/import.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import, print_function
+
+import sys
+
+from django.core import serializers
+from django.core.management.base import BaseCommand
+
+
+class Command(BaseCommand):
+    help = 'Imports data from a Sentry export.'
+
+    def handle(self, src=None, **options):
+        if not src:
+            sys.stderr.write('Usage: sentry import [src]')
+            sys.exit(1)
+
+        if src == '-':
+            src = sys.stdin
+        else:
+            src = open(src, 'rb')
+
+        for obj in serializers.deserialize("json", src, stream=True):
+            obj.save()
diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index b297bfb24a..009ba52c64 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -19,6 +19,8 @@ from sentry.db.models import (
 
 
 class Activity(Model):
+    __core__ = False
+
     SET_RESOLVED = 1
     SET_UNRESOLVED = 2
     SET_MUTED = 3
diff --git a/src/sentry/models/alert.py b/src/sentry/models/alert.py
index 7cc286284b..524a16754b 100644
--- a/src/sentry/models/alert.py
+++ b/src/sentry/models/alert.py
@@ -26,6 +26,8 @@ class AlertStatus(object):
 
 
 class Alert(Model):
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project')
     group = FlexibleForeignKey('sentry.Group', null=True)
     datetime = models.DateTimeField(default=timezone.now)
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index a4728aae4e..fd1327cbb2 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -57,6 +57,8 @@ class AuditLogEntryEvent(object):
 
 
 class AuditLogEntry(Model):
+    __core__ = False
+
     organization = FlexibleForeignKey('sentry.Organization')
     actor_label = models.CharField(max_length=64, null=True, blank=True)
     # if the entry was created via a user
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index b683d5bbb8..e48f6e821d 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -28,6 +28,8 @@ class Event(Model):
     """
     An individual event.
     """
+    __core__ = False
+
     group = FlexibleForeignKey('sentry.Group', blank=True, null=True, related_name="event_set")
     event_id = models.CharField(max_length=32, null=True, db_column="message_id")
     project = FlexibleForeignKey('sentry.Project', null=True)
diff --git a/src/sentry/models/eventmapping.py b/src/sentry/models/eventmapping.py
index d080b35291..6f7aa262b9 100644
--- a/src/sentry/models/eventmapping.py
+++ b/src/sentry/models/eventmapping.py
@@ -14,6 +14,8 @@ from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 
 
 class EventMapping(Model):
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project')
     group = FlexibleForeignKey('sentry.Group')
     event_id = models.CharField(max_length=32)
diff --git a/src/sentry/models/file.py b/src/sentry/models/file.py
index 8c54ca4efd..e1d084b58b 100644
--- a/src/sentry/models/file.py
+++ b/src/sentry/models/file.py
@@ -22,6 +22,8 @@ ONE_DAY = 60 * 60 * 24
 
 
 class File(Model):
+    __core__ = False
+
     name = models.CharField(max_length=128)
     storage = models.CharField(max_length=128, null=True)
     storage_options = JSONField()
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index ccf309bcab..d605a2310a 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -89,6 +89,8 @@ class Group(Model):
     """
     Aggregated message which summarizes a set of Events.
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project', null=True)
     logger = models.CharField(
         max_length=64, blank=True, default=DEFAULT_LOGGER_NAME, db_index=True)
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index 4982bd0b5f..ebac150627 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -19,6 +19,8 @@ class GroupAssignee(Model):
     Identifies an assignment relationship between a user and an
     aggregated event (Group).
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project', related_name="assignee_set")
     group = FlexibleForeignKey('sentry.Group', related_name="assignee_set", unique=True)
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, related_name="sentry_assignee_set")
diff --git a/src/sentry/models/groupbookmark.py b/src/sentry/models/groupbookmark.py
index 910aa55b66..d87b505083 100644
--- a/src/sentry/models/groupbookmark.py
+++ b/src/sentry/models/groupbookmark.py
@@ -17,6 +17,8 @@ class GroupBookmark(Model):
     Identifies a bookmark relationship between a user and an
     aggregated event (Group).
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project', related_name="bookmark_set")
     group = FlexibleForeignKey('sentry.Group', related_name="bookmark_set")
     # namespace related_name on User since we don't own the model
diff --git a/src/sentry/models/grouphash.py b/src/sentry/models/grouphash.py
index c71719dcc5..87c1476a69 100644
--- a/src/sentry/models/grouphash.py
+++ b/src/sentry/models/grouphash.py
@@ -13,6 +13,8 @@ from sentry.db.models import FlexibleForeignKey, Model
 
 
 class GroupHash(Model):
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project', null=True)
     hash = models.CharField(max_length=32, db_index=True)
     group = FlexibleForeignKey('sentry.Group', null=True)
diff --git a/src/sentry/models/groupmeta.py b/src/sentry/models/groupmeta.py
index f39e96656d..dd94a74a53 100644
--- a/src/sentry/models/groupmeta.py
+++ b/src/sentry/models/groupmeta.py
@@ -107,6 +107,8 @@ class GroupMeta(Model):
     Generally useful for things like storing metadata
     provided by plugins.
     """
+    __core__ = False
+
     group = FlexibleForeignKey('sentry.Group')
     key = models.CharField(max_length=64)
     value = models.TextField()
diff --git a/src/sentry/models/grouprulestatus.py b/src/sentry/models/grouprulestatus.py
index a420269766..54f1be34fe 100644
--- a/src/sentry/models/grouprulestatus.py
+++ b/src/sentry/models/grouprulestatus.py
@@ -14,6 +14,8 @@ from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 
 
 class GroupRuleStatus(Model):
+    __core__ = False
+
     ACTIVE = 0
     INACTIVE = 1
 
diff --git a/src/sentry/models/groupseen.py b/src/sentry/models/groupseen.py
index 8441da9202..be9f773129 100644
--- a/src/sentry/models/groupseen.py
+++ b/src/sentry/models/groupseen.py
@@ -18,6 +18,8 @@ class GroupSeen(Model):
     """
     Track when a group is last seen by a user.
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project')
     group = FlexibleForeignKey('sentry.Group')
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, db_index=False)
diff --git a/src/sentry/models/grouptagkey.py b/src/sentry/models/grouptagkey.py
index b7992ff99e..555857626e 100644
--- a/src/sentry/models/grouptagkey.py
+++ b/src/sentry/models/grouptagkey.py
@@ -22,6 +22,8 @@ class GroupTagKey(Model):
 
     An example key might be "url" or "server_name".
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project', null=True)
     group = FlexibleForeignKey('sentry.Group')
     key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
diff --git a/src/sentry/models/grouptagvalue.py b/src/sentry/models/grouptagvalue.py
index 22fcc6c1b3..a6c80ca63a 100644
--- a/src/sentry/models/grouptagvalue.py
+++ b/src/sentry/models/grouptagvalue.py
@@ -25,6 +25,8 @@ class GroupTagValue(Model):
     Stores the total number of messages seen by a group matching
     the given filter.
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project', null=True, related_name='grouptag')
     group = FlexibleForeignKey('sentry.Group', related_name='grouptag')
     times_seen = BoundedPositiveIntegerField(default=0)
diff --git a/src/sentry/models/lostpasswordhash.py b/src/sentry/models/lostpasswordhash.py
index a4d1e63831..f390c002b5 100644
--- a/src/sentry/models/lostpasswordhash.py
+++ b/src/sentry/models/lostpasswordhash.py
@@ -19,6 +19,8 @@ from sentry.utils.http import absolute_uri
 
 
 class LostPasswordHash(Model):
+    __core__ = False
+
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, unique=True)
     hash = models.CharField(max_length=32)
     date_added = models.DateTimeField(default=timezone.now)
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index afc38d2f19..ecceb56c02 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -29,6 +29,9 @@ class OrganizationStatus(object):
 
 
 class OrganizationManager(BaseManager):
+    # def get_by_natural_key(self, slug):
+    #     return self.get(slug=slug)
+
     def get_for_user(self, user, access=None):
         """
         Returns a set of all organizations a user has access to.
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 3cbb07dade..b6ec2f613d 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -19,6 +19,8 @@ class Release(Model):
     A release is generally created when a new version is pushed into a
     production state.
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project')
     version = models.CharField(max_length=64)
     # ref might be the branch name being released
diff --git a/src/sentry/models/releasefile.py b/src/sentry/models/releasefile.py
index 2b399f724e..5769ebc1c7 100644
--- a/src/sentry/models/releasefile.py
+++ b/src/sentry/models/releasefile.py
@@ -20,6 +20,8 @@ class ReleaseFile(Model):
 
     The ident of the file should be sha1(name) and must be unique per release.
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project')
     release = FlexibleForeignKey('sentry.Release')
     file = FlexibleForeignKey('sentry.File')
diff --git a/src/sentry/models/tagkey.py b/src/sentry/models/tagkey.py
index 0c0d484d9c..ddab2e20e8 100644
--- a/src/sentry/models/tagkey.py
+++ b/src/sentry/models/tagkey.py
@@ -48,6 +48,8 @@ class TagKey(Model):
     """
     Stores references to available filters keys.
     """
+    __core__ = False
+
     DEFAULT_URL_NAME = 'sentry-explore-tag'
     URL_NAMES = {
         'sentry:user': 'sentry-users',
diff --git a/src/sentry/models/tagvalue.py b/src/sentry/models/tagvalue.py
index 09e48da17f..5d3fbdea32 100644
--- a/src/sentry/models/tagvalue.py
+++ b/src/sentry/models/tagvalue.py
@@ -23,6 +23,8 @@ class TagValue(Model):
     """
     Stores references to available filters.
     """
+    __core__ = False
+
     project = FlexibleForeignKey('sentry.Project', null=True)
     key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
     value = models.CharField(max_length=MAX_TAG_VALUE_LENGTH)
