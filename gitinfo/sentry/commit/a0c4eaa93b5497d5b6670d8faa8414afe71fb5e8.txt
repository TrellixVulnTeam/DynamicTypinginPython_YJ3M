commit a0c4eaa93b5497d5b6670d8faa8414afe71fb5e8
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 28 12:30:23 2017 -0700

    ui: various improvements and tests
    
    - expand test suite to cover additional form components
    - fix various cases of not propagating context in es6 classes

diff --git a/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx b/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
index 8ab4767055..9c662b53d5 100644
--- a/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
+++ b/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
@@ -16,8 +16,8 @@ const callbackWithArgs = function(callback, ...args) {
 };
 
 class PluginComponentBase extends React.Component {
-  constructor(props) {
-    super(props);
+  constructor(props, context) {
+    super(props, context);
 
     [
       'onLoadSuccess',
diff --git a/src/sentry/static/sentry/app/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
index cbcd0c9340..84f679840f 100644
--- a/src/sentry/static/sentry/app/components/forms/apiForm.jsx
+++ b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
@@ -14,8 +14,8 @@ export default class ApiForm extends Form {
     apiEndpoint: React.PropTypes.string.isRequired
   };
 
-  constructor(props) {
-    super(props);
+  constructor(props, context) {
+    super(props, context);
     this.api = new Client();
   }
 
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index b8062c9c28..44fbfa2b79 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -27,8 +27,8 @@ export default class Form extends React.Component {
     form: React.PropTypes.object.isRequired
   };
 
-  constructor(props) {
-    super(props);
+  constructor(props, context) {
+    super(props, context);
     this.state = {
       data: {...this.props.initialData},
       errors: {},
diff --git a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
index 76c8374151..73426c1797 100644
--- a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
@@ -5,6 +5,7 @@ import FormField from './formField';
 
 export default class MultipleCheckboxField extends FormField {
   static propTypes = {
+    ...FormField.propTypes,
     choices: React.PropTypes.array.isRequired
   };
 
diff --git a/src/sentry/static/sentry/app/components/forms/numberField.jsx b/src/sentry/static/sentry/app/components/forms/numberField.jsx
index bf77e406e0..6a1b3c20da 100644
--- a/src/sentry/static/sentry/app/components/forms/numberField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/numberField.jsx
@@ -1,6 +1,17 @@
+import React from 'react';
 import InputField from './inputField';
 
 export default class NumberField extends InputField {
+  static propTypes = {
+    ...InputField.propTypes,
+    min: React.PropTypes.number,
+    max: React.PropTypes.number
+  };
+
+  coerceValue(value) {
+    return parseInt(value, 10);
+  }
+
   getType() {
     return 'number';
   }
diff --git a/src/sentry/static/sentry/app/components/forms/passwordField.jsx b/src/sentry/static/sentry/app/components/forms/passwordField.jsx
index f201b7d56d..fb1bfd68ce 100644
--- a/src/sentry/static/sentry/app/components/forms/passwordField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/passwordField.jsx
@@ -1,37 +1,33 @@
 import React from 'react';
 import InputField from './inputField';
-import {FormState} from '.';
+import {FormState} from './state';
 
-class PasswordField extends InputField {
-  constructor(props) {
-    super(props);
+// TODO(dcramer): im not entirely sure this is working correctly with
+// value propagation in all scenarios
+export default class PasswordField extends InputField {
+  static propTypes = {
+    ...InputField.propTypes,
+    hasSavedValue: React.PropTypes.bool,
+    prefix: React.PropTypes.string
+  };
 
-    this.startEdit = this.startEdit.bind(this);
-    this.cancelEdit = this.cancelEdit.bind(this);
+  static defaultProps = {
+    ...InputField.defaultProps,
+    hasSavedValue: false,
+    prefix: ''
+  };
 
-    this.state.editing = false;
-  }
-
-  getType() {
-    return 'password';
-  }
+  constructor(props, context) {
+    super(props, context);
 
-  cancelEdit(ev) {
-    ev.preventDefault();
-    this.setState(
-      {
-        value: '',
-        editing: false
-      },
-      () => {
-        this.props.onChange('');
-      }
-    );
+    this.state.editing = false;
   }
 
   componentWillReceiveProps(nextProps) {
     // close edit mode after successful save
+    // TODO(dcramer): this needs to work with this.context.form
     if (
+      this.props.formState &&
       this.props.formState === FormState.SAVING &&
       nextProps.formState === FormState.READY
     ) {
@@ -41,15 +37,31 @@ class PasswordField extends InputField {
     }
   }
 
-  startEdit(ev) {
-    ev.preventDefault();
+  getType() {
+    return 'password';
+  }
+
+  cancelEdit = e => {
+    e.preventDefault();
+    this.setState(
+      {
+        editing: false
+      },
+      () => {
+        this.setValue('');
+      }
+    );
+  };
+
+  startEdit = e => {
+    e.preventDefault();
     this.setState({
       editing: true
     });
-  }
+  };
 
   getField() {
-    if (!this.props.has_saved_value) {
+    if (!this.props.hasSavedValue) {
       return super.getField();
     }
 
@@ -60,7 +72,7 @@ class PasswordField extends InputField {
             {super.getField()}
           </div>
           <div>
-            <a href="#" onClick={this.cancelEdit}>Cancel</a>
+            <a onClick={this.cancelEdit}>Cancel</a>
           </div>
         </div>
       );
@@ -70,16 +82,9 @@ class PasswordField extends InputField {
           <span>
             {this.props.prefix + new Array(21 - this.props.prefix.length).join('*')}
           </span>
-          {!this.props.disabled && <a href="#" onClick={this.startEdit}>Edit</a>}
+          {!this.props.disabled && <a onClick={this.startEdit}>Edit</a>}
         </div>
       );
     }
   }
 }
-
-PasswordField.defaultProps = Object.assign({}, InputField.defaultProps, {
-  has_saved_value: false,
-  prefix: ''
-});
-
-export default PasswordField;
diff --git a/src/sentry/static/sentry/app/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
index ea1ad67b04..2a4a7f2c16 100644
--- a/src/sentry/static/sentry/app/components/forms/rangeField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
@@ -1,9 +1,35 @@
+import React from 'react';
 import jQuery from 'jquery';
 import ReactDOM from 'react-dom';
 
 import InputField from './inputField';
 
 export default class RangeField extends InputField {
+  static formatMinutes = value => {
+    value = value / 60;
+    return `${value} minute${value != 1 ? 's' : ''}`;
+  };
+
+  static propTypes = {
+    ...InputField.propTypes,
+    min: React.PropTypes.number,
+    max: React.PropTypes.number,
+    step: React.PropTypes.number,
+    snap: React.PropTypes.bool,
+    allowedValues: React.PropTypes.arrayOf(React.PropTypes.number)
+  };
+
+  static defaultProps = {
+    ...InputField.defaultProps,
+    onChange: value => {},
+    formatLabel: value => value,
+    min: 0,
+    max: 100,
+    step: 1,
+    snap: true,
+    allowedValues: null
+  };
+
   componentDidMount() {
     super.componentDidMount();
     this.attachSlider();
@@ -58,18 +84,3 @@ export default class RangeField extends InputField {
     return 'range';
   }
 }
-
-RangeField.formatMinutes = value => {
-  value = value / 60;
-  return `${value} minute${value != 1 ? 's' : ''}`;
-};
-
-RangeField.defaultProps = {
-  onChange: value => {},
-  formatLabel: value => value,
-  min: 0,
-  max: 100,
-  step: 1,
-  snap: true,
-  allowedValues: null
-};
diff --git a/src/sentry/static/sentry/app/components/selectInput.jsx b/src/sentry/static/sentry/app/components/selectInput.jsx
index 3817125658..0953c400b7 100644
--- a/src/sentry/static/sentry/app/components/selectInput.jsx
+++ b/src/sentry/static/sentry/app/components/selectInput.jsx
@@ -56,7 +56,7 @@ const SelectInput = React.createClass({
     this.destroy();
   },
 
-  getValue() {
+  getSelect2Value() {
     return this.select2.getValue();
   },
 
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index c241b257f6..c3aa640796 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -7,8 +7,8 @@ import LoadingIndicator from '../../components/loadingIndicator';
 import {t, tct} from '../../locale';
 
 class PluginSettings extends PluginComponentBase {
-  constructor(props) {
-    super(props);
+  constructor(props, context) {
+    super(props, context);
 
     Object.assign(this.state, {
       fieldList: null,
diff --git a/src/sentry/static/sentry/app/views/asyncView.jsx b/src/sentry/static/sentry/app/views/asyncView.jsx
index 510eebf033..bd7ca69758 100644
--- a/src/sentry/static/sentry/app/views/asyncView.jsx
+++ b/src/sentry/static/sentry/app/views/asyncView.jsx
@@ -7,8 +7,8 @@ import RouteError from './routeError';
 import {Client} from '../api';
 
 class AsyncView extends React.Component {
-  constructor(props) {
-    super(props);
+  constructor(props, context) {
+    super(props, context);
 
     this.fetchData = AsyncView.errorHandler(this, this.fetchData.bind(this));
     this.render = AsyncView.errorHandler(this, this.render.bind(this));
diff --git a/src/sentry/static/sentry/app/views/organizationRepositories.jsx b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
index 183ef17bb2..0d1c9ccd94 100644
--- a/src/sentry/static/sentry/app/views/organizationRepositories.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
@@ -17,8 +17,8 @@ const UNKNOWN_ERROR = {
 };
 
 class AddRepositoryLink extends PluginComponentBase {
-  constructor(props) {
-    super(props);
+  constructor(props, context) {
+    super(props, context);
 
     Object.assign(this.state, {
       isModalOpen: false,
diff --git a/tests/js/spec/components/forms/__snapshots__/emailField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/emailField.spec.jsx.snap
new file mode 100644
index 0000000000..d39bc4040a
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/emailField.spec.jsx.snap
@@ -0,0 +1,61 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`EmailField render() renders 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="email"
+      value=""
+    />
+  </div>
+</div>
+`;
+
+exports[`EmailField render() renders with form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="email"
+      value="foo@example.com"
+    />
+  </div>
+</div>
+`;
+
+exports[`EmailField render() renders with value 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="email"
+      value="foo@example.com"
+    />
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/forms/__snapshots__/numberField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/numberField.spec.jsx.snap
new file mode 100644
index 0000000000..d32abe9bb2
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/numberField.spec.jsx.snap
@@ -0,0 +1,82 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`NumberField render() renders 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="number"
+      value=""
+    />
+  </div>
+</div>
+`;
+
+exports[`NumberField render() renders with form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="number"
+      value={5}
+    />
+  </div>
+</div>
+`;
+
+exports[`NumberField render() renders with optional attributes 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      max={100}
+      onChange={[Function]}
+      required={false}
+      type="number"
+      value=""
+    />
+  </div>
+</div>
+`;
+
+exports[`NumberField render() renders with value 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="number"
+      value={5}
+    />
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/forms/__snapshots__/passwordField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/passwordField.spec.jsx.snap
new file mode 100644
index 0000000000..e799003ba2
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/passwordField.spec.jsx.snap
@@ -0,0 +1,61 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`PasswordField render() renders 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="password"
+      value=""
+    />
+  </div>
+</div>
+`;
+
+exports[`PasswordField render() renders with form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="password"
+      value="foobar"
+    />
+  </div>
+</div>
+`;
+
+exports[`PasswordField render() renders with value 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      required={false}
+      type="password"
+      value="foobar"
+    />
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/forms/__snapshots__/rangeField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/rangeField.spec.jsx.snap
new file mode 100644
index 0000000000..927fa8da51
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/rangeField.spec.jsx.snap
@@ -0,0 +1,93 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RangeField render() renders 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      max={100}
+      min={0}
+      onChange={[Function]}
+      required={false}
+      step={1}
+      type="range"
+      value=""
+    />
+  </div>
+</div>
+`;
+
+exports[`RangeField render() renders with form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      max={100}
+      min={0}
+      onChange={[Function]}
+      required={false}
+      step={1}
+      type="range"
+      value={2}
+    />
+  </div>
+</div>
+`;
+
+exports[`RangeField render() renders with optional attributes 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      max={3}
+      min={0}
+      onChange={[Function]}
+      required={false}
+      step={1}
+      type="range"
+      value=""
+    />
+  </div>
+</div>
+`;
+
+exports[`RangeField render() renders with value 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      max={100}
+      min={0}
+      onChange={[Function]}
+      required={false}
+      step={1}
+      type="range"
+      value={2}
+    />
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/forms/emailField.spec.jsx b/tests/js/spec/components/forms/emailField.spec.jsx
new file mode 100644
index 0000000000..b8394592e4
--- /dev/null
+++ b/tests/js/spec/components/forms/emailField.spec.jsx
@@ -0,0 +1,33 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+
+import {EmailField} from 'app/components/forms';
+
+describe('EmailField', function() {
+  describe('render()', function() {
+    it('renders', function() {
+      let wrapper = shallow(<EmailField name="fieldName" />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with value', function() {
+      let wrapper = shallow(<EmailField name="fieldName" value="foo@example.com" />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with form context', function() {
+      let wrapper = shallow(<EmailField name="fieldName" />, {
+        context: {
+          form: {
+            data: {
+              fieldName: 'foo@example.com'
+            },
+            errors: {}
+          }
+        }
+      });
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/components/forms/numberField.spec.jsx b/tests/js/spec/components/forms/numberField.spec.jsx
new file mode 100644
index 0000000000..261a615d48
--- /dev/null
+++ b/tests/js/spec/components/forms/numberField.spec.jsx
@@ -0,0 +1,38 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+
+import {NumberField} from 'app/components/forms';
+
+describe('NumberField', function() {
+  describe('render()', function() {
+    it('renders', function() {
+      let wrapper = shallow(<NumberField name="fieldName" />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with optional attributes', function() {
+      let wrapper = shallow(<NumberField name="fieldName" min={0} max={100} />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with value', function() {
+      let wrapper = shallow(<NumberField name="fieldName" value={5} />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with form context', function() {
+      let wrapper = shallow(<NumberField name="fieldName" />, {
+        context: {
+          form: {
+            data: {
+              fieldName: 5
+            },
+            errors: {}
+          }
+        }
+      });
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/components/forms/passwordField.spec.jsx b/tests/js/spec/components/forms/passwordField.spec.jsx
new file mode 100644
index 0000000000..99468ca121
--- /dev/null
+++ b/tests/js/spec/components/forms/passwordField.spec.jsx
@@ -0,0 +1,33 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+
+import {PasswordField} from 'app/components/forms';
+
+describe('PasswordField', function() {
+  describe('render()', function() {
+    it('renders', function() {
+      let wrapper = shallow(<PasswordField name="fieldName" />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with value', function() {
+      let wrapper = shallow(<PasswordField name="fieldName" value="foobar" />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with form context', function() {
+      let wrapper = shallow(<PasswordField name="fieldName" />, {
+        context: {
+          form: {
+            data: {
+              fieldName: 'foobar'
+            },
+            errors: {}
+          }
+        }
+      });
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/components/forms/rangeField.spec.jsx b/tests/js/spec/components/forms/rangeField.spec.jsx
new file mode 100644
index 0000000000..4aaae78181
--- /dev/null
+++ b/tests/js/spec/components/forms/rangeField.spec.jsx
@@ -0,0 +1,47 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+
+import {RangeField} from 'app/components/forms';
+
+describe('RangeField', function() {
+  describe('render()', function() {
+    it('renders', function() {
+      let wrapper = shallow(<RangeField name="fieldName" />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with optional attributes', function() {
+      let wrapper = shallow(
+        <RangeField
+          name="fieldName"
+          min={0}
+          max={3}
+          step={1}
+          snap={false}
+          allowedValues={[1, 2, 3]}
+        />
+      );
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with value', function() {
+      let wrapper = shallow(<RangeField name="fieldName" value={2} />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+
+    it('renders with form context', function() {
+      let wrapper = shallow(<RangeField name="fieldName" />, {
+        context: {
+          form: {
+            data: {
+              fieldName: 2
+            },
+            errors: {}
+          }
+        }
+      });
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+  });
+});
