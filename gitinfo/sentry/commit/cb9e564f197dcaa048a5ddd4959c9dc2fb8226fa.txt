commit cb9e564f197dcaa048a5ddd4959c9dc2fb8226fa
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon May 18 14:29:27 2020 +0200

    ref: Always render AnnotatedText even without meta (#18840)
    
    
    
    Always render an AnnotatedText even if there is no metadata. This will
    become useful for further experiments around data privacy.
    
    Also start using contextBlockV2 for custom contexts, and remove the now
    unused contextBlock.jsx.

diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index d822fb965d..de0ba35dd2 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -130,14 +130,7 @@ class ContextData extends React.Component {
     const {preserveQuotes, meta, withAnnotatedText} = this.props;
 
     function getValueWithAnnotatedText(v, meta) {
-      return (
-        <AnnotatedText
-          value={v}
-          chunks={meta.chunks}
-          remarks={meta.rem}
-          errors={meta.err}
-        />
-      );
+      return <AnnotatedText value={v} meta={meta} />;
     }
 
     /*eslint no-shadow:0*/
@@ -151,10 +144,9 @@ class ContextData extends React.Component {
       } else if (isString(value)) {
         const valueInfo = analyzeStringForRepr(value);
 
-        const valueToBeReturned =
-          withAnnotatedText && meta
-            ? getValueWithAnnotatedText(valueInfo.repr, meta)
-            : valueInfo.repr;
+        const valueToBeReturned = withAnnotatedText
+          ? getValueWithAnnotatedText(valueInfo.repr, meta)
+          : valueInfo.repr;
 
         const out = [
           <span
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryDevice.tsx b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryDevice.tsx
index aaf6f33df9..adb42e38c4 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryDevice.tsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryDevice.tsx
@@ -44,17 +44,7 @@ const ContextSummaryDevice = ({data}: Props) => {
     return (
       <DeviceName value={data.model}>
         {deviceName => {
-          if (!meta) {
-            return deviceName;
-          }
-          return (
-            <AnnotatedText
-              value={deviceName}
-              chunks={meta.chunks}
-              remarks={meta.rem}
-              errors={meta.err}
-            />
-          );
+          return <AnnotatedText value={deviceName} meta={meta} />;
         }}
       </DeviceName>
     );
@@ -91,16 +81,7 @@ const ContextSummaryDevice = ({data}: Props) => {
       {subTitle && (
         <ParagraphOverflow>
           <Subject>{subTitle.subject}</Subject>
-          {subTitle.meta ? (
-            <AnnotatedText
-              value={subTitle.value}
-              chunks={subTitle.meta.chunks}
-              remarks={subTitle.meta.rem}
-              errors={subTitle.meta.err}
-            />
-          ) : (
-            subTitle.value
-          )}
+          <AnnotatedText value={subTitle.value} meta={subTitle.meta} />
         </ParagraphOverflow>
       )}
     </div>
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryGPU.tsx b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryGPU.tsx
index e9b6a4e53a..38696dee29 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryGPU.tsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryGPU.tsx
@@ -34,18 +34,8 @@ const ContextSummaryGPU = ({data}: Props) => {
 
   const renderName = () => {
     const meta = getMeta(data, 'name');
-    if (!meta) {
-      return data.name;
-    }
 
-    return (
-      <AnnotatedText
-        value={data.name}
-        chunks={meta.chunks}
-        remarks={meta.rem}
-        errors={meta.err}
-      />
-    );
+    return <AnnotatedText value={data.name} meta={meta} />;
   };
 
   let className = generateClassName(data.name);
@@ -74,16 +64,7 @@ const ContextSummaryGPU = ({data}: Props) => {
       <h3>{renderName()}</h3>
       <ParagraphOverflow>
         <Subject>{versionElement.subject}</Subject>
-        {versionElement.meta ? (
-          <AnnotatedText
-            value={versionElement.value}
-            chunks={versionElement.meta.chunks}
-            remarks={versionElement.meta.rem}
-            errors={versionElement.meta.err}
-          />
-        ) : (
-          versionElement.value
-        )}
+        <AnnotatedText value={versionElement.value} meta={versionElement.meta} />
       </ParagraphOverflow>
     </div>
   );
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryGeneric.tsx b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryGeneric.tsx
index e2ea65948e..a45289a7ee 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryGeneric.tsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryGeneric.tsx
@@ -27,18 +27,7 @@ const ContextSummaryGeneric = ({data, unknownTitle}: Props) => {
 
   const renderValue = (key: keyof Data) => {
     const meta = getMeta(data, key);
-    if (!meta) {
-      return data[key];
-    }
-
-    return (
-      <AnnotatedText
-        value={data[key]}
-        chunks={meta.chunks}
-        remarks={meta.rem}
-        errors={meta.err}
-      />
-    );
+    return <AnnotatedText value={data[key]} meta={meta} />;
   };
 
   const className = generateClassName(data.name);
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryOS.tsx b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryOS.tsx
index a594592442..35b8bc75ab 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryOS.tsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryOS.tsx
@@ -35,18 +35,7 @@ const ContextSummaryOS = ({data}: Props) => {
 
   const renderName = () => {
     const meta = getMeta(data, 'name');
-    if (!meta) {
-      return data.name;
-    }
-
-    return (
-      <AnnotatedText
-        value={data.name}
-        chunks={meta.chunks}
-        remarks={meta.rem}
-        errors={meta.err}
-      />
-    );
+    return <AnnotatedText value={data.name} meta={meta} />;
   };
 
   const getVersionElement = (): VersionElement => {
@@ -81,16 +70,7 @@ const ContextSummaryOS = ({data}: Props) => {
       <h3>{renderName()}</h3>
       <ParagraphOverflow>
         <Subject>{versionElement.subject}</Subject>
-        {versionElement.meta ? (
-          <AnnotatedText
-            value={versionElement.value}
-            chunks={versionElement.meta.chunks}
-            remarks={versionElement.meta.rem}
-            errors={versionElement.meta.err}
-          />
-        ) : (
-          versionElement.value
-        )}
+        <AnnotatedText value={versionElement.value} meta={versionElement.meta} />
       </ParagraphOverflow>
     </div>
   );
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryUser.tsx b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryUser.tsx
index 78b04b67e0..cfb62dbf9b 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryUser.tsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary/contextSummaryUser.tsx
@@ -50,16 +50,7 @@ const ContextSummaryUser = ({data}: Props) => {
     return (
       <ParagraphOverflow>
         <Subject>{userDetails.subject}</Subject>
-        {userDetails.meta ? (
-          <AnnotatedText
-            value={userDetails.value}
-            chunks={userDetails.meta.chunks}
-            remarks={userDetails.meta.rem}
-            errors={userDetails.meta.err}
-          />
-        ) : (
-          userDetails.value
-        )}
+        <AnnotatedText value={userDetails.value} meta={userDetails.meta} />
       </ParagraphOverflow>
     );
   };
@@ -113,16 +104,7 @@ const ContextSummaryUser = ({data}: Props) => {
             gravatar={false}
           />
           <h3 data-test-id="user-title">
-            {userTitle.meta ? (
-              <AnnotatedText
-                value={userTitle.value}
-                chunks={userTitle.meta.chunks}
-                remarks={userTitle.meta.rem}
-                errors={userTitle.meta.err}
-              />
-            ) : (
-              userTitle.value
-            )}
+            <AnnotatedText value={userTitle.value} meta={userTitle.meta} />
           </h3>
         </React.Fragment>
       ) : (
diff --git a/src/sentry/static/sentry/app/components/events/contexts/app/app.tsx b/src/sentry/static/sentry/app/components/events/contexts/app/app.tsx
index 383bacdb15..98aaab7d3a 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/app/app.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/app/app.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import ContextBlock from 'app/components/events/contexts/contextBlock';
 
 import getAppKnownData from './getAppKnownData';
 import {AppData, AppKnownDataType} from './types';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
deleted file mode 100644
index bdf8bc4ea4..0000000000
--- a/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
+++ /dev/null
@@ -1,55 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import sortBy from 'lodash/sortBy';
-
-import {defined} from 'app/utils';
-import ErrorBoundary from 'app/components/errorBoundary';
-import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';
-
-class ContextBlock extends React.Component {
-  static propTypes = {
-    data: PropTypes.object.isRequired,
-    knownData: PropTypes.array,
-  };
-
-  render() {
-    let data = [];
-    const className = `context-block context-block-${this.props.data.type}`;
-
-    (this.props.knownData || []).forEach(([key, value]) => {
-      let allowSkip = false;
-      if (key[0] === '?') {
-        allowSkip = true;
-        key = key.substr(1);
-      }
-      if (!defined(value)) {
-        if (allowSkip) {
-          return;
-        }
-        value = 'n/a';
-      }
-      data.push([key, value]);
-    });
-
-    const extraData = [];
-    for (const key in this.props.data) {
-      if (key !== 'type' && key !== 'title') {
-        extraData.push([key, this.props.data[key]]);
-      }
-    }
-
-    if (extraData.length > 0) {
-      data = data.concat(sortBy(extraData, key => key));
-    }
-
-    return (
-      <div className={className}>
-        <ErrorBoundary mini>
-          <KeyValueList data={data} isSorted={false} isContextData />
-        </ErrorBoundary>
-      </div>
-    );
-  }
-}
-
-export default ContextBlock;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/contextBlockV2.tsx b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/components/events/contexts/contextBlockV2.tsx
rename to src/sentry/static/sentry/app/components/events/contexts/contextBlock.tsx
diff --git a/src/sentry/static/sentry/app/components/events/contexts/default.jsx b/src/sentry/static/sentry/app/components/events/contexts/default.jsx
index ec406ce8bc..be81a33cb0 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/default.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/default.jsx
@@ -9,8 +9,18 @@ class DefaultContextType extends React.Component {
     data: PropTypes.object.isRequired,
   };
 
+  getKnownData() {
+    return Object.entries(this.props.data)
+      .filter(([k]) => k !== 'type' && k !== 'title')
+      .map(([k, v]) => ({
+        key: k,
+        subject: k,
+        value: v,
+      }));
+  }
+
   render() {
-    return <ContextBlock data={this.props.data} alias={this.props.alias} />;
+    return <ContextBlock knownData={this.getKnownData()} alias={this.props.alias} />;
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device/device.tsx b/src/sentry/static/sentry/app/components/events/contexts/device/device.tsx
index e6d8a4db7e..5476122ca6 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/device/device.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device/device.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import ContextBlock from 'app/components/events/contexts/contextBlock';
 
 import {DeviceData, DeviceKnownDataType} from './types';
 import getDeviceKnownData from './getDeviceKnownData';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu/gpu.tsx b/src/sentry/static/sentry/app/components/events/contexts/gpu/gpu.tsx
index 1f9831e7f1..2b941804e7 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/gpu/gpu.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/gpu/gpu.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import ContextBlock from 'app/components/events/contexts/contextBlock';
 
 import getOperatingSystemKnownData from './getGPUKnownData';
 import {GPUData, GPUKnownDataType} from './types';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/operatingSystem.tsx b/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/operatingSystem.tsx
index 7ea5c40e5a..68cb6b0da8 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/operatingSystem.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/operatingSystem/operatingSystem.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import ContextBlock from 'app/components/events/contexts/contextBlock';
 
 import getOperatingSystemKnownData from './getOperatingSystemKnownData';
 import {OperatingSystemKnownData, OperatingSystemKnownDataType} from './types';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/runtime/runtime.tsx b/src/sentry/static/sentry/app/components/events/contexts/runtime/runtime.tsx
index 95f563e78a..fc026dc16c 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/runtime/runtime.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/runtime/runtime.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import ContextBlock from 'app/components/events/contexts/contextBlock';
 
 import getRuntimeKnownData from './getRuntimeKnownData';
 import {RuntimeData, RuntimeKnownDataType} from './types';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx b/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx
index cca0667125..86c39af51c 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx
@@ -3,7 +3,7 @@ import React from 'react';
 import UserAvatar from 'app/components/avatar/userAvatar';
 import {AvatarUser as UserType} from 'app/types';
 import {removeFilterMaskedEntries} from 'app/components/events/interfaces/utils';
-import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import ContextBlock from 'app/components/events/contexts/contextBlock';
 import ErrorBoundary from 'app/components/errorBoundary';
 import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';
 import {defined} from 'app/utils';
diff --git a/src/sentry/static/sentry/app/components/events/eventExtraData/eventDataContent.tsx b/src/sentry/static/sentry/app/components/events/eventExtraData/eventDataContent.tsx
index 92c9bc9f82..7cbf031246 100644
--- a/src/sentry/static/sentry/app/components/events/eventExtraData/eventDataContent.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventExtraData/eventDataContent.tsx
@@ -1,7 +1,7 @@
 import React from 'react';
 
 import {defined} from 'app/utils';
-import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import ContextBlock from 'app/components/events/contexts/contextBlock';
 
 import getEventExtraDataKnownData from './getEventExtraDataKnownData';
 
diff --git a/src/sentry/static/sentry/app/components/events/eventTags/eventTagsPill.tsx b/src/sentry/static/sentry/app/components/events/eventTags/eventTagsPill.tsx
index 76268686d7..a0ac30cb1a 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags/eventTagsPill.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags/eventTagsPill.tsx
@@ -46,18 +46,7 @@ const EventTagsPill = ({
           <Version version={tag.value} anchor={false} tooltipRawVersion truncate />
         ) : (
           <DeviceName value={tag.value}>
-            {deviceName =>
-              meta ? (
-                <AnnotatedText
-                  value={deviceName}
-                  chunks={meta.chunks}
-                  remarks={meta.rem}
-                  errors={meta.err}
-                />
-              ) : (
-                deviceName
-              )
-            }
+            {deviceName => <AnnotatedText value={deviceName} meta={meta} />}
           </DeviceName>
         )}
       </Link>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbCustomRendererValue.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbCustomRendererValue.tsx
index c739efb30c..e868fe9348 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbCustomRendererValue.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbCustomRendererValue.tsx
@@ -9,18 +9,7 @@ type Props = {
 };
 
 function getBreadcrumbCustomRendererValue({value, meta}: Props) {
-  if (!meta) {
-    return value;
-  }
-
-  return (
-    <AnnotatedText
-      value={value}
-      chunks={meta.chunks}
-      remarks={meta.rem}
-      errors={meta.err}
-    />
-  );
+  return <AnnotatedText value={value} meta={meta} />;
 }
 
 export default getBreadcrumbCustomRendererValue;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx
index 7a0fa07539..cc7f2135b5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx
@@ -74,16 +74,10 @@ const FrameDefaultTitle = ({frame, platform}: Props) => {
     title.push(
       <Tooltip key={pathName.key} title={frame.absPath} disabled={!enablePathTooltip}>
         <code key="filename" className="filename">
-          {pathName.meta ? (
-            <AnnotatedText
-              value={<Truncate value={pathName.value} maxLength={100} leftTrim />}
-              chunks={pathName.meta.chunks}
-              remarks={pathName.meta.rem}
-              errors={pathName.meta.err}
-            />
-          ) : (
-            <Truncate value={pathName.value} maxLength={100} leftTrim />
-          )}
+          <AnnotatedText
+            value={<Truncate value={pathName.value} maxLength={100} leftTrim />}
+            meta={pathName.meta}
+          />
         </code>
       </Tooltip>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx
index 68076ad4a3..10946db56b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx
@@ -72,18 +72,7 @@ class FrameFunctionName extends React.Component<Props, State> {
       return valueOutput;
     }
 
-    if (!valueOutput.meta) {
-      return valueOutput.value;
-    }
-
-    return (
-      <AnnotatedText
-        value={valueOutput.value}
-        chunks={valueOutput.meta.chunks}
-        remarks={valueOutput.meta.rem}
-        errors={valueOutput.meta.err}
-      />
-    );
+    return <AnnotatedText value={valueOutput.value} meta={valueOutput.meta} />;
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
index c3959cdac6..70b12c4db3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
@@ -51,19 +51,12 @@ class frameRegistersValue extends React.Component<Props, State> {
 
   render() {
     const formattedValue = this.formatValue();
+    const {meta} = this.props;
+
     return (
       <InlinePre data-test-id="frame-registers-value">
         <FixedWidth>
-          {this.props.meta ? (
-            <AnnotatedText
-              vakue={formattedValue}
-              chunks={this.props.meta.chunks}
-              remarks={this.props.meta.rem}
-              errors={this.props.meta.err}
-            />
-          ) : (
-            formattedValue
-          )}
+          <AnnotatedText value={formattedValue} meta={meta} />
         </FixedWidth>
         <Tooltip title={this.tooltipTitle()}>
           <Toggle className="icon-filter" onClick={this.toggleView} />
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
index 1ecc2076d0..42d8ac625b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
@@ -62,16 +62,7 @@ const KeyValueList = ({
                     </ContextData>
                   ) : (
                     <pre className="val-string">
-                      {meta ? (
-                        <AnnotatedText
-                          value={dataValue}
-                          chunks={meta.chunks}
-                          remarks={meta.rem}
-                          errors={meta.err}
-                        />
-                      ) : (
-                        dataValue
-                      )}
+                      <AnnotatedText value={dataValue} meta={meta} />
                       {subjectIcon}
                     </pre>
                   )}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx
index 338d82e6a1..bc42fa4bd4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx
@@ -29,21 +29,6 @@ const RichHttpContentClippedBoxBodySection = ({
       return null;
     }
 
-    if (meta && typeof value === 'string') {
-      return (
-        // <pre> is wrapping AnnotatedText to avoid breaking certain tooltips (untested, yolo)
-        <pre>
-          <AnnotatedText
-            value={value}
-            chunks={meta.chunks}
-            remarks={meta.rem}
-            errors={meta.err}
-            data-test-id="rich-http-content-body-context-data"
-          />
-        </pre>
-      );
-    }
-
     switch (inferredContentType) {
       case 'application/json':
         return (
@@ -70,7 +55,11 @@ const RichHttpContentClippedBoxBodySection = ({
       default:
         return (
           <pre data-test-id="rich-http-content-body-section-pre">
-            {JSON.stringify(value, null, 2)}
+            <AnnotatedText
+              value={value && JSON.stringify(value, null, 2)}
+              meta={meta}
+              data-test-id="rich-http-content-body-context-data"
+            />
           </pre>
         );
     }
diff --git a/src/sentry/static/sentry/app/components/events/meta/annotated.tsx b/src/sentry/static/sentry/app/components/events/meta/annotated.tsx
index b1d4095037..9bbeb05daa 100644
--- a/src/sentry/static/sentry/app/components/events/meta/annotated.tsx
+++ b/src/sentry/static/sentry/app/components/events/meta/annotated.tsx
@@ -11,7 +11,6 @@ type Props<Values> = {
   children: (value: string | null | React.ReactNode) => React.ReactNode | string;
 };
 
-type ReturnedMetaValue = string | number | boolean | null;
 /**
  * Returns the value of `object[prop]` and returns an annotated component if
  * there is meta data
@@ -22,29 +21,10 @@ const Annotated = <Values extends {}>({
   objectKey,
   required = false,
 }: Props<Values>) => {
-  const getToBeReturnedMetaValue = (
-    metaValue: ReturnedMetaValue
-  ): React.ReactNode | ReturnedMetaValue => {
-    if (typeof metaValue === 'number' || typeof metaValue === 'boolean') {
-      return metaValue;
-    }
-
-    return metaValue || null;
-  };
   return (
     <MetaData object={object} prop={objectKey} required={required}>
       {(value, meta) => {
-        let toBeReturned = getToBeReturnedMetaValue(value);
-        if (meta) {
-          toBeReturned = (
-            <AnnotatedText
-              value={value}
-              chunks={meta.chunks}
-              remarks={meta.rem}
-              errors={meta.err}
-            />
-          );
-        }
+        const toBeReturned = <AnnotatedText value={value} meta={meta} />;
         return isFunction(children) ? children(toBeReturned) : toBeReturned;
       }}
     </MetaData>
diff --git a/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx b/src/sentry/static/sentry/app/components/events/meta/annotatedText.tsx
similarity index 68%
rename from src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
rename to src/sentry/static/sentry/app/components/events/meta/annotatedText.tsx
index b792f35ab0..5d2707d8fe 100644
--- a/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
+++ b/src/sentry/static/sentry/app/components/events/meta/annotatedText.tsx
@@ -1,10 +1,10 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
 import InlineSvg from 'app/components/inlineSvg';
 import Tooltip from 'app/components/tooltip';
 import {t, tn} from 'app/locale';
+import {Chunks, Meta, MetaError} from 'app/types';
 
 const REMARKS = {
   a: 'Annotated',
@@ -21,6 +21,11 @@ const KNOWN_RULES = {
   '!config': 'SDK configuration',
 };
 
+type Props = {
+  value: React.ReactNode;
+  meta?: Meta;
+};
+
 function getTooltipText(remark, rule) {
   const remark_title = REMARKS[remark];
   const rule_title = KNOWN_RULES[rule] || t('PII rule "%s"', rule);
@@ -31,7 +36,7 @@ function getTooltipText(remark, rule) {
   }
 }
 
-function renderChunk(chunk) {
+function renderChunk(chunk: Chunks): React.ReactElement {
   if (chunk.type === 'redaction') {
     const title = getTooltipText(chunk.remark, chunk.rule_id);
     return (
@@ -44,36 +49,36 @@ function renderChunk(chunk) {
   return <span>{chunk.text}</span>;
 }
 
-function renderChunks(chunks) {
+function renderChunks(chunks: Array<Chunks>): React.ReactElement {
   const spans = chunks.map((chunk, key) => React.cloneElement(renderChunk(chunk), {key}));
 
-  return <Chunks>{spans}</Chunks>;
+  return <ChunksSpan>{spans}</ChunksSpan>;
 }
 
-function renderValue(value, chunks, errors, remarks) {
-  if (chunks.length > 1) {
-    return renderChunks(chunks);
+function renderValue(value: React.ReactNode, meta?: Meta): React.ReactNode {
+  if (meta?.chunks?.length && meta.chunks.length > 1) {
+    return renderChunks(meta.chunks);
   }
 
-  let element = null;
-  if (value) {
+  let element = value;
+  if (value && meta) {
     element = <Redaction>{value}</Redaction>;
-  } else if (errors && errors.length) {
+  } else if (meta?.err?.length) {
     element = <Placeholder>invalid</Placeholder>;
-  } else if (remarks && remarks.length) {
+  } else if (meta?.rem?.length) {
     element = <Placeholder>redacted</Placeholder>;
   }
 
-  if (remarks && remarks.length) {
-    const title = getTooltipText(remarks[0][1], remarks[0][0]);
+  if (meta?.rem?.length) {
+    const title = getTooltipText(meta.rem[0][1], meta.rem[0][0]);
     element = <Tooltip title={title}>{element}</Tooltip>;
   }
 
   return element;
 }
 
-function getErrorMessage(error) {
-  const errorMessage = [];
+function getErrorMessage(error: MetaError) {
+  const errorMessage: string[] = [];
   if (error[0]) {
     errorMessage.push(error[0]);
   }
@@ -84,7 +89,7 @@ function getErrorMessage(error) {
   return errorMessage.join(': ');
 }
 
-function renderErrors(errors) {
+function renderErrors(errors: Array<MetaError>) {
   if (!errors.length) {
     return null;
   }
@@ -107,26 +112,19 @@ function renderErrors(errors) {
   );
 }
 
-const AnnotatedText = ({value, chunks, errors, remarks, ...props}) => (
-  <span {...props}>
-    {renderValue(value, chunks, errors, remarks)} {renderErrors(errors)}
-  </span>
-);
-
-AnnotatedText.propTypes = {
-  value: PropTypes.node,
-  chunks: PropTypes.array,
-  errors: PropTypes.array,
-  remarks: PropTypes.array,
-};
-
-AnnotatedText.defaultProps = {
-  chunks: [],
-  errors: [],
-  remarks: [],
-};
+class AnnotatedText extends React.Component<Props, {}> {
+  render() {
+    const {value, meta, ...props} = this.props;
+    return (
+      <span {...props}>
+        {renderValue(value, meta)}
+        {meta?.err && renderErrors(meta.err)}
+      </span>
+    );
+  }
+}
 
-const Chunks = styled('span')`
+const ChunksSpan = styled('span')`
   span {
     display: inline;
   }
diff --git a/src/sentry/static/sentry/app/components/tooltip.tsx b/src/sentry/static/sentry/app/components/tooltip.tsx
index 48f964f021..46696e3b4b 100644
--- a/src/sentry/static/sentry/app/components/tooltip.tsx
+++ b/src/sentry/static/sentry/app/components/tooltip.tsx
@@ -15,7 +15,7 @@ type DefaultProps = {
 };
 
 type Props = DefaultProps & {
-  children: React.ReactElement;
+  children: React.ReactNode;
   disabled?: boolean;
   title: React.ReactNode;
   popperStyle?: React.CSSProperties;
@@ -141,7 +141,7 @@ class Tooltip extends React.Component<Props, State> {
     }
   };
 
-  renderTrigger(children: React.ReactElement, ref: React.Ref<HTMLElement>) {
+  renderTrigger(children: React.ReactNode, ref: React.Ref<HTMLElement>) {
     const propList: {[key: string]: any} = {
       'aria-describedby': this.tooltipId,
       onFocus: this.handleOpen,
@@ -155,7 +155,7 @@ class Tooltip extends React.Component<Props, State> {
     // Because we can't rely on the child element implementing forwardRefs we wrap
     // it with a span tag so that popper has ref
 
-    if (typeof children.type === 'string') {
+    if (React.isValidElement(children) && typeof children.type === 'string') {
       // Basic DOM nodes can be cloned and have more props applied.
       return React.cloneElement(children, {
         ...propList,
diff --git a/src/sentry/static/sentry/app/plugins/baseContext.jsx b/src/sentry/static/sentry/app/plugins/baseContext.jsx
deleted file mode 100644
index 3af927ba1e..0000000000
--- a/src/sentry/static/sentry/app/plugins/baseContext.jsx
+++ /dev/null
@@ -1,23 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import ContextBlock from 'app/components/events/contexts/contextBlock';
-
-class BaseContext extends React.Component {
-  render() {
-    return <ContextBlock data={this.props.data} alias={this.props.alias} />;
-  }
-}
-
-BaseContext.displayName = 'BaseContext';
-
-BaseContext.propTypes = {
-  alias: PropTypes.string.isRequired,
-  data: PropTypes.object.isRequired,
-};
-
-BaseContext.getTitle = function(value) {
-  return value;
-};
-
-export default BaseContext;
diff --git a/src/sentry/static/sentry/app/plugins/index.jsx b/src/sentry/static/sentry/app/plugins/index.jsx
index bab2f4273b..c4f0d47e2d 100644
--- a/src/sentry/static/sentry/app/plugins/index.jsx
+++ b/src/sentry/static/sentry/app/plugins/index.jsx
@@ -1,6 +1,5 @@
 import Registry from 'app/plugins/registry';
 import BasePlugin from 'app/plugins/basePlugin';
-import BaseContext from 'app/plugins/baseContext';
 import DefaultIssuePlugin from 'app/plugins/defaultIssuePlugin';
 
 import SessionStackPlugin from './sessionstack';
@@ -22,7 +21,6 @@ registry.add('jira', Jira);
 export {BasePlugin, registry, DefaultIssuePlugin};
 
 export default {
-  BaseContext,
   BasePlugin,
   DefaultIssuePlugin,
 
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index cc5f6a2fe0..6edc4cec99 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1129,10 +1129,13 @@ export type Level = 'error' | 'fatal' | 'info' | 'warning' | 'sample';
 export type Meta = {
   chunks: Array<Chunks>;
   len: number;
-  rem: Array<Array<string | number>>;
-  err: Array<any>;
+  rem: Array<MetaRemark>;
+  err: Array<MetaError>;
 };
 
+export type MetaError = [string, any];
+export type MetaRemark = Array<string | number>;
+
 export type Chunks = {
   text: string;
   type: string;
diff --git a/tests/acceptance/test_issue_details.py b/tests/acceptance/test_issue_details.py
index 85e00edf10..9a6ad44aee 100644
--- a/tests/acceptance/test_issue_details.py
+++ b/tests/acceptance/test_issue_details.py
@@ -62,7 +62,7 @@ class IssueDetailsTest(AcceptanceTestCase, SnubaTestCase):
     def test_python_rawbody_event(self):
         event = self.create_sample_event(platform="python-rawbody")
         self.page.visit_issue(self.org.slug, event.group.id)
-        self.browser.move_to('[data-test-id="rich-http-content-body-context-data"]')
+        self.browser.move_to('[data-test-id="rich-http-content-body-section-pre"]')
         self.browser.snapshot("issue details python raw body")
 
     def test_python_formdata_event(self):
diff --git a/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap b/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
index a85b60bf90..eb667728a4 100644
--- a/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
+++ b/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
@@ -284,13 +284,19 @@ exports[`GpuSummary render() renders name and vendor 1`] = `
     className="context-item-icon"
   />
   <h3>
-    Mali-T880
+    <AnnotatedText
+      meta={null}
+      value="Mali-T880"
+    />
   </h3>
   <ParagraphOverflow>
     <Subject>
       Vendor:
     </Subject>
-    ARM
+    <AnnotatedText
+      meta={null}
+      value="ARM"
+    />
   </ParagraphOverflow>
 </div>
 `;
@@ -303,13 +309,18 @@ exports[`GpuSummary render() renders unknown when no vendor 1`] = `
     className="context-item-icon"
   />
   <h3>
-    Apple A8 GPU
+    <AnnotatedText
+      meta={null}
+      value="Apple A8 GPU"
+    />
   </h3>
   <ParagraphOverflow>
     <Subject>
       Vendor:
     </Subject>
-    Unknown
+    <AnnotatedText
+      value="Unknown"
+    />
   </ParagraphOverflow>
 </div>
 `;
@@ -322,13 +333,19 @@ exports[`OsSummary render() renders the kernel version when no version 1`] = `
     className="context-item-icon"
   />
   <h3>
-    Mac OS X
+    <AnnotatedText
+      meta={null}
+      value="Mac OS X"
+    />
   </h3>
   <ParagraphOverflow>
     <Subject>
       Kernel:
     </Subject>
-    17.5.0
+    <AnnotatedText
+      meta={null}
+      value="17.5.0"
+    />
   </ParagraphOverflow>
 </div>
 `;
@@ -341,13 +358,19 @@ exports[`OsSummary render() renders the version string 1`] = `
     className="context-item-icon"
   />
   <h3>
-    Mac OS X
+    <AnnotatedText
+      meta={null}
+      value="Mac OS X"
+    />
   </h3>
   <ParagraphOverflow>
     <Subject>
       Version:
     </Subject>
-    10.13.4
+    <AnnotatedText
+      meta={null}
+      value="10.13.4"
+    />
   </ParagraphOverflow>
 </div>
 `;
@@ -360,13 +383,18 @@ exports[`OsSummary render() renders unknown when no version 1`] = `
     className="context-item-icon"
   />
   <h3>
-    Mac OS X
+    <AnnotatedText
+      meta={null}
+      value="Mac OS X"
+    />
   </h3>
   <ParagraphOverflow>
     <Subject>
       Version:
     </Subject>
-    Unknown
+    <AnnotatedText
+      value="Unknown"
+    />
   </ParagraphOverflow>
 </div>
 `;
diff --git a/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap b/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
index 32c0212f30..c35539fbc4 100644
--- a/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
+++ b/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
@@ -158,17 +158,18 @@ exports[`CrashContent renders with meta data 1`] = `
                   className="exc-message css-1q8nviw-StyledPre e1jgwng30"
                 >
                   <AnnotatedText
-                    chunks={Array []}
-                    errors={Array []}
-                    remarks={
-                      Array [
-                        Array [
-                          "device_id",
-                          "p",
-                          11,
-                          51,
+                    meta={
+                      Object {
+                        "len": 29,
+                        "rem": Array [
+                          Array [
+                            "device_id",
+                            "p",
+                            11,
+                            51,
+                          ],
                         ],
-                      ]
+                      }
                     }
                     value="python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err"
                   >
@@ -201,7 +202,7 @@ exports[`CrashContent renders with meta data 1`] = `
                                 >
                                   <Redaction>
                                     <span
-                                      className="css-1vnqw28-Redaction e1p1th7g1"
+                                      className="css-1vnqw28-Redaction e186salf1"
                                     >
                                       python err A949AE01EBB07300D62AE0178F0944DD21F8C98C err
                                     </span>
@@ -212,7 +213,6 @@ exports[`CrashContent renders with meta data 1`] = `
                           </Reference>
                         </Manager>
                       </Tooltip>
-                       
                     </span>
                   </AnnotatedText>
                 </pre>
diff --git a/tests/js/spec/components/events/contextSummary.spec.jsx b/tests/js/spec/components/events/contextSummary.spec.jsx
index fdbc2e32e7..fed4f0fd58 100644
--- a/tests/js/spec/components/events/contextSummary.spec.jsx
+++ b/tests/js/spec/components/events/contextSummary.spec.jsx
@@ -254,7 +254,12 @@ describe('UserSummary', function() {
       };
 
       const wrapper1 = shallow(<ContextSummaryUser data={user1} />);
-      expect(wrapper1.find('[data-test-id="user-title"]').text()).toEqual(user1.email);
+      expect(
+        wrapper1
+          .find('[data-test-id="user-title"]')
+          .render()
+          .text()
+      ).toEqual(user1.email);
 
       const user2 = {
         ip_address: '12.31.20.12',
@@ -265,9 +270,12 @@ describe('UserSummary', function() {
       };
 
       const wrapper2 = shallow(<ContextSummaryUser data={user2} />);
-      expect(wrapper2.find('[data-test-id="user-title"]').text()).toEqual(
-        user2.ip_address
-      );
+      expect(
+        wrapper2
+          .find('[data-test-id="user-title"]')
+          .render()
+          .text()
+      ).toEqual(user2.ip_address);
 
       const user3 = {
         id: '26',
@@ -277,7 +285,12 @@ describe('UserSummary', function() {
       };
 
       const wrapper3 = shallow(<ContextSummaryUser data={user3} />);
-      expect(wrapper3.find('[data-test-id="user-title"]').text()).toEqual(user3.id);
+      expect(
+        wrapper3
+          .find('[data-test-id="user-title"]')
+          .render()
+          .text()
+      ).toEqual(user3.id);
 
       const user4 = {
         username: 'maiseythedog',
@@ -286,7 +299,12 @@ describe('UserSummary', function() {
       };
 
       const wrapper4 = shallow(<ContextSummaryUser data={user4} />);
-      expect(wrapper4.find('[data-test-id="user-title"]').text()).toEqual(user4.username);
+      expect(
+        wrapper4
+          .find('[data-test-id="user-title"]')
+          .render()
+          .text()
+      ).toEqual(user4.username);
     });
 
     it('renders NoSummary if no email, IP, id, or username', function() {
diff --git a/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap b/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap
index 88795451f1..a28110063f 100644
--- a/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap
+++ b/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap
@@ -13,7 +13,14 @@ Array [
         <span
           className="css-5okdek-FixedWidth e1e1y5ql1"
         >
-          0x00007fff9300bf70
+          <AnnotatedText
+            meta={null}
+            value="0x00007fff9300bf70"
+          >
+            <span>
+              0x00007fff9300bf70
+            </span>
+          </AnnotatedText>
         </span>
       </FixedWidth>
       <Tooltip
@@ -67,7 +74,14 @@ Array [
       <span
         className="css-5okdek-FixedWidth e1e1y5ql1"
       >
-        0x00007fff9300bf70
+        <AnnotatedText
+          meta={null}
+          value="0x00007fff9300bf70"
+        >
+          <span>
+            0x00007fff9300bf70
+          </span>
+        </AnnotatedText>
       </span>
     </FixedWidth>
     <Tooltip
@@ -123,7 +137,14 @@ Array [
         <span
           className="css-5okdek-FixedWidth e1e1y5ql1"
         >
-          0x0000000000000000
+          <AnnotatedText
+            meta={null}
+            value="0x0000000000000000"
+          >
+            <span>
+              0x0000000000000000
+            </span>
+          </AnnotatedText>
         </span>
       </FixedWidth>
       <Tooltip
@@ -177,7 +198,14 @@ Array [
       <span
         className="css-5okdek-FixedWidth e1e1y5ql1"
       >
-        0x0000000000000000
+        <AnnotatedText
+          meta={null}
+          value="0x0000000000000000"
+        >
+          <span>
+            0x0000000000000000
+          </span>
+        </AnnotatedText>
       </span>
     </FixedWidth>
     <Tooltip
@@ -233,7 +261,14 @@ Array [
         <span
           className="css-5okdek-FixedWidth e1e1y5ql1"
         >
-          0x0000000000000000
+          <AnnotatedText
+            meta={null}
+            value="0x0000000000000000"
+          >
+            <span>
+              0x0000000000000000
+            </span>
+          </AnnotatedText>
         </span>
       </FixedWidth>
       <Tooltip
@@ -287,7 +322,14 @@ Array [
       <span
         className="css-5okdek-FixedWidth e1e1y5ql1"
       >
-        0x0000000000000000
+        <AnnotatedText
+          meta={null}
+          value="0x0000000000000000"
+        >
+          <span>
+            0x0000000000000000
+          </span>
+        </AnnotatedText>
       </span>
     </FixedWidth>
     <Tooltip
@@ -348,7 +390,14 @@ Array [
         <span
           className="css-5okdek-FixedWidth e1e1y5ql1"
         >
-          0x00007fff9300bf70
+          <AnnotatedText
+            meta={null}
+            value="0x00007fff9300bf70"
+          >
+            <span>
+              0x00007fff9300bf70
+            </span>
+          </AnnotatedText>
         </span>
       </FixedWidth>
       <Tooltip
@@ -402,7 +451,14 @@ Array [
       <span
         className="css-5okdek-FixedWidth e1e1y5ql1"
       >
-        0x00007fff9300bf70
+        <AnnotatedText
+          meta={null}
+          value="0x00007fff9300bf70"
+        >
+          <span>
+            0x00007fff9300bf70
+          </span>
+        </AnnotatedText>
       </span>
     </FixedWidth>
     <Tooltip
@@ -458,7 +514,14 @@ Array [
         <span
           className="css-5okdek-FixedWidth e1e1y5ql1"
         >
-          0x0000000000000000
+          <AnnotatedText
+            meta={null}
+            value="0x0000000000000000"
+          >
+            <span>
+              0x0000000000000000
+            </span>
+          </AnnotatedText>
         </span>
       </FixedWidth>
       <Tooltip
@@ -512,7 +575,14 @@ Array [
       <span
         className="css-5okdek-FixedWidth e1e1y5ql1"
       >
-        0x0000000000000000
+        <AnnotatedText
+          meta={null}
+          value="0x0000000000000000"
+        >
+          <span>
+            0x0000000000000000
+          </span>
+        </AnnotatedText>
       </span>
     </FixedWidth>
     <Tooltip
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
index c37feb8d02..c3bceacd24 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
@@ -21,7 +21,7 @@ describe('HttpRenderer', function() {
 
       const summaryLine = httpRendererWrapper.prop('summary');
 
-      const summaryLineWrapper = shallow(summaryLine);
+      const summaryLineWrapper = shallow(summaryLine).render();
       expect(summaryLineWrapper.find('strong').text()).toEqual('POST ');
       expect(
         summaryLineWrapper
diff --git a/tests/js/spec/components/events/meta/annotated.spec.jsx b/tests/js/spec/components/events/meta/annotated.spec.jsx
index 9f3d195fae..0c553be89f 100644
--- a/tests/js/spec/components/events/meta/annotated.spec.jsx
+++ b/tests/js/spec/components/events/meta/annotated.spec.jsx
@@ -35,7 +35,11 @@ describe('Annotated', () => {
           {mock}
         </Annotated>
       );
-      expect(mock).toHaveBeenCalledWith('foo');
+      expect(mock.mock.calls[0][0].props).toEqual(
+        expect.objectContaining({
+          value: 'foo',
+        })
+      );
     });
 
     it('does not error if prop does not exist on object', () => {
@@ -54,7 +58,11 @@ describe('Annotated', () => {
           {mock}
         </Annotated>
       );
-      expect(mock).toHaveBeenCalledWith(0);
+      expect(mock.mock.calls[0][0].props).toEqual(
+        expect.objectContaining({
+          value: 0,
+        })
+      );
     });
 
     it('renders a boolean', () => {
@@ -66,7 +74,11 @@ describe('Annotated', () => {
           {mock}
         </Annotated>
       );
-      expect(mock).toHaveBeenCalledWith(false);
+      expect(mock.mock.calls[0][0].props).toEqual(
+        expect.objectContaining({
+          value: false,
+        })
+      );
     });
 
     it('ignores empty meta data', () => {
@@ -87,7 +99,11 @@ describe('Annotated', () => {
           {mock}
         </Annotated>
       );
-      expect(mock).toHaveBeenCalledWith('foo');
+      expect(mock.mock.calls[0][0].props).toEqual(
+        expect.objectContaining({
+          value: 'foo',
+        })
+      );
     });
 
     it('does not call render prop if required and value is falsy and no meta', () => {
@@ -105,7 +121,8 @@ describe('Annotated', () => {
 
   describe('with meta', () => {
     it('annotates errors', () => {
-      const obj = createEvent('foo', {err: ['something']});
+      const meta = {err: ['something']};
+      const obj = createEvent('foo', meta);
 
       mount(
         <Annotated object={obj} objectKey="value">
@@ -116,15 +133,18 @@ describe('Annotated', () => {
       expect(mock.mock.calls[0][0].props).toEqual(
         expect.objectContaining({
           value: 'foo',
-          chunks: [],
-          remarks: [],
-          errors: ['something'],
+          meta: {
+            chunks: [],
+            rem: [],
+            ...meta,
+          },
         })
       );
     });
 
     it('annotates remarks and chunks', () => {
-      const obj = createEvent('foo', {rem: [{type: 't'}], chunks: [{text: 'foo'}]});
+      const meta = {rem: [{type: 't'}], chunks: [{text: 'foo'}]};
+      const obj = createEvent('foo', meta);
 
       mount(
         <Annotated object={obj} objectKey="value">
@@ -135,15 +155,17 @@ describe('Annotated', () => {
       expect(mock.mock.calls[0][0].props).toEqual(
         expect.objectContaining({
           value: 'foo',
-          remarks: [{type: 't'}],
-          chunks: [{text: 'foo'}],
-          errors: [],
+          meta: {
+            err: [],
+            ...meta,
+          },
         })
       );
     });
 
     it('annotates redacted text', () => {
-      const obj = createEvent(null, {err: ['something']});
+      const meta = {err: ['something']};
+      const obj = createEvent(null, meta);
 
       mount(
         <Annotated object={obj} objectKey="value">
@@ -154,9 +176,11 @@ describe('Annotated', () => {
       expect(mock.mock.calls[0][0].props).toEqual(
         expect.objectContaining({
           value: null,
-          chunks: [],
-          remarks: [],
-          errors: ['something'],
+          meta: {
+            rem: [],
+            chunks: [],
+            ...meta,
+          },
         })
       );
     });
diff --git a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
index 1d9c9371cb..c5925f8728 100644
--- a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
@@ -634,7 +634,14 @@ exports[`SharedGroupDetails renders 1`] = `
                                             <ErrorBoundary
                                               mini={true}
                                             >
-                                              Blocked script
+                                              <AnnotatedText
+                                                meta={null}
+                                                value="Blocked script"
+                                              >
+                                                <span>
+                                                  Blocked script
+                                                </span>
+                                              </AnnotatedText>
                                             </ErrorBoundary>
                                           </MetaData>
                                         </Annotated>
