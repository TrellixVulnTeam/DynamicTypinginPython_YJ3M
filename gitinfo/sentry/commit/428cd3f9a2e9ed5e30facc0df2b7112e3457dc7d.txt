commit 428cd3f9a2e9ed5e30facc0df2b7112e3457dc7d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jun 26 09:08:58 2018 -0700

    feat(settings): Allow access to Release Tracking for all (#8777)
    
    Previously we would hide the link from the settings menu if you did not
    have `project:write` access, however the release tracking settings page
    was being linked from other sources.
    
    The API returns a 403 if you do not have write access, so users would
    see an error message when trying to access the page.
    
    Instead, lets allow the API request to fail on 403s, and render the page
    with placeholder values for token and webhook URL.

diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
index 77058291cd..d16d8762d4 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
@@ -48,7 +48,6 @@ export default function getConfiguration({project}) {
         {
           path: `${pathPrefix}/release-tracking/`,
           title: t('Releases'),
-          show: ({access}) => access.has('project:write'),
         },
         {
           path: `${pathPrefix}/ownership/`,
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx b/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx
index 93e6937334..e2d2a8d1a4 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx
@@ -1,23 +1,27 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {t, tct} from 'app/locale';
+import Alert from 'app/components/alert';
 import AsyncView from 'app/views/asyncView';
 import AutoSelectText from 'app/components/autoSelectText';
 import Button from 'app/components/buttons/button';
 import Confirm from 'app/components/confirm';
 import DynamicWrapper from 'app/components/dynamicWrapper';
-import getDynamicText from 'app/utils/getDynamicText';
 import Field from 'app/views/settings/components/forms/field';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import PluginList from 'app/components/pluginList';
 import SentryTypes from 'app/proptypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
+import getDynamicText from 'app/utils/getDynamicText';
 import withPlugins from 'app/utils/withPlugins';
 
+const TOKEN_PLACEHOLDER = 'YOUR_TOKEN';
+const WEBHOOK_PLACEHOLDER = 'YOUR_WEBHOOK_URL';
+
 class ProjectReleaseTracking extends AsyncView {
   static propTypes = {
     organization: PropTypes.object,
@@ -32,7 +36,15 @@ class ProjectReleaseTracking extends AsyncView {
   getEndpoints() {
     let {orgId, projectId} = this.props.params;
 
-    return [['data', `/projects/${orgId}/${projectId}/releases/token/`]];
+    // Allow 403s
+    return [
+      [
+        'data',
+        `/projects/${orgId}/${projectId}/releases/token/`,
+        {},
+        {allowError: err => err && err.status === 403},
+      ],
+    ];
   }
 
   handleRegenerateToken = () => {
@@ -58,7 +70,7 @@ class ProjectReleaseTracking extends AsyncView {
   };
 
   getReleaseWebhookIntructions() {
-    let {webhookUrl} = this.state.data;
+    let {webhookUrl} = this.state.data || {webhookUrl: WEBHOOK_PLACEHOLDER};
     return (
       'curl ' +
       webhookUrl +
@@ -76,7 +88,7 @@ class ProjectReleaseTracking extends AsyncView {
     return (
       '// See SDK documentation for language specific usage.' +
       '\n' +
-      "Raven.config('your dsn', {" +
+      "Raven.config('YOUR_DSN', {" +
       '\n' +
       '  ' +
       "release: '0e4fdef81448dcfa0e16ecc4433ff3997aa53572'" +
@@ -87,6 +99,7 @@ class ProjectReleaseTracking extends AsyncView {
 
   renderBody() {
     let {organization, project, plugins} = this.props;
+    let hasWrite = organization.access.includes('project:write');
 
     if (plugins.loading) {
       return <LoadingIndicator />;
@@ -96,14 +109,25 @@ class ProjectReleaseTracking extends AsyncView {
       p => p.type === 'release-tracking' && p.hasConfiguration
     );
 
-    let {token, webhookUrl} = this.state.data;
+    let {token, webhookUrl} = this.state.data || {
+      token: TOKEN_PLACEHOLDER,
+      webhookUrl: WEBHOOK_PLACEHOLDER,
+    };
 
-    token = getDynamicText({value: token, fixed: '__TOKEN__'});
-    webhookUrl = getDynamicText({value: webhookUrl, fixed: '__WEBHOOK_URL__'});
+    token = token && getDynamicText({value: token, fixed: '__TOKEN__'});
+    webhookUrl =
+      webhookUrl && getDynamicText({value: webhookUrl, fixed: '__WEBHOOK_URL__'});
 
     return (
       <div>
         <SettingsPageHeader title={t('Release Tracking')} />
+        {!hasWrite && (
+          <Alert icon="icon-circle-exclamation" type="warning">
+            {t(
+              'You do not have sufficient permissions to access Release tokens, placeholders are displayed below.'
+            )}
+          </Alert>
+        )}
         <p>
           {t(
             'Configure release tracking for this project to automatically record new releases of your application.'
@@ -151,13 +175,14 @@ class ProjectReleaseTracking extends AsyncView {
             >
               <div>
                 <Confirm
+                  disabled={!hasWrite}
                   priority="danger"
                   onConfirm={this.handleRegenerateToken}
                   message={t(
                     'Are you sure you want to regenerate your token? Your current token will no longer be usable.'
                   )}
                 >
-                  <Button type="button" priority="danger">
+                  <Button type="button" priority="danger" disabled={!hasWrite}>
                     {t('Regenerate Token')}
                   </Button>
                 </Confirm>
