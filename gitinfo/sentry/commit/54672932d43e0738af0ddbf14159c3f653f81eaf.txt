commit 54672932d43e0738af0ddbf14159c3f653f81eaf
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Mon Jan 30 14:28:55 2017 -0800

    Remove unused code

diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index cb402672ce..92c555ffe2 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -67,56 +67,6 @@ def get_users_for_commits(item_list):
 
 @register(Release)
 class ReleaseSerializer(Serializer):
-    def _get_users_for_commits(self, release_commits, org_id):
-        """
-        Returns a dictionary of author_id => user, if a Sentry
-        user object exists for that email. If there is no matching
-        Sentry user, a {user, email} dict representation of that
-        author is returned.
-
-        e.g.
-        {
-            1: serialized(<User id=1>),
-            2: {email: 'not-a-user@example.com', name: 'dunno'},
-            ...
-        }
-        """
-        authors = set(rc.commit.author for rc in release_commits if rc.commit.author is not None)
-        if not len(authors):
-            return {}
-
-        # Filter users based on the emails provided in the commits
-        user_emails = UserEmail.objects.filter(
-            in_iexact('email', [a.email for a in authors]),
-        ).order_by('id')
-
-        # Filter users belonging to the organization associated with
-        # the release
-        users = User.objects.filter(
-            id__in=[ue.user_id for ue in user_emails],
-            sentry_orgmember_set__organization_id=org_id
-        )
-        users_by_id = dict((user.id, serialize(user)) for user in users)
-
-        # Figure out which email address matches to a user
-        users_by_email = {}
-        for user_email in user_emails:
-            if user_email.email in users_by_email:
-                pass
-
-            user = users_by_id.get(user_email.user_id)
-            if user:
-                users_by_email[user_email.email] = user
-
-        author_objs = {}
-        for author in authors:
-            author_objs[author.id] = users_by_email.get(author.email, {
-                "name": author.name,
-                "email": author.email
-            })
-
-        return author_objs
-
     def _get_commit_metadata(self, item_list, user):
         """
         Returns a dictionary of release_id => commit metadata,
