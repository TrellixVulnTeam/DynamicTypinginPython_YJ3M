commit f453965c31aeb210b05a01765f02d57aef2e3a98
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 12 10:24:28 2015 -0700

    Remove plugin permission hooks

diff --git a/CHANGES b/CHANGES
index b7916c70fe..77d3c0058f 100644
--- a/CHANGES
+++ b/CHANGES
@@ -7,6 +7,7 @@ Version 7.8.0
   capture far more events with improved console formatting.
 - The 'sentry' user can no longer be removed.
 - The Cassandra nodestore backend was broken, and this has been resolved.
+- The ``has_perm`` plugin hook is no longer used.
 
 
 Version 7.7.0
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index a251438559..59e768398d 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -15,7 +15,6 @@ from functools import wraps
 
 from sentry import features
 from sentry.models import OrganizationMemberType
-from sentry.plugins import plugins
 from sentry.utils.cache import cached_for_request
 
 
@@ -98,10 +97,6 @@ def can_create_projects(user, team):
     if not is_team_admin(user, team):
         return False
 
-    result = plugins.first('has_perm', user, 'add_project', team)
-    if result is False:
-        return result
-
     return True
 
 
@@ -114,14 +109,7 @@ def can_set_public_projects(user):
     if user.is_superuser:
         return True
 
-    result = plugins.first('has_perm', user, 'set_project_public')
-    if result is None:
-        result = settings.SENTRY_ALLOW_PUBLIC_PROJECTS
-
-    if result is False:
-        return result
-
-    return True
+    return settings.SENTRY_ALLOW_PUBLIC_PROJECTS
 
 
 @requires_login
@@ -155,10 +143,6 @@ def can_add_organization_member(user, organization):
     if not is_organization_admin(user, organization):
         return False
 
-    result = plugins.first('has_perm', user, 'add_organization_member', organization)
-    if result is False:
-        return False
-
     return True
 
 
@@ -172,10 +156,6 @@ def can_manage_organization_member(user, member, perm):
     if not is_organization_admin(user, member.organization):
         return False
 
-    result = plugins.first('has_perm', user, perm, member)
-    if result is False:
-        return False
-
     return True
 
 
@@ -198,10 +178,6 @@ def can_remove_project(user, project):
     if not is_project_admin(user, project):
         return False
 
-    result = plugins.first('has_perm', user, 'remove_project', project)
-    if result is False:
-        return False
-
     return True
 
 
@@ -213,10 +189,6 @@ def can_add_project_key(user, project):
     if not is_project_admin(user, project):
         return False
 
-    result = plugins.first('has_perm', user, 'add_project_key', project)
-    if result is False:
-        return False
-
     return True
 
 
@@ -230,10 +202,6 @@ def can_edit_project_key(user, key):
     if not is_project_admin(user, project):
         return False
 
-    result = plugins.first('has_perm', user, 'edit_project_key', project, key)
-    if result is False:
-        return False
-
     return True
 
 
@@ -247,8 +215,4 @@ def can_remove_project_key(user, key):
     if not is_project_admin(user, project):
         return False
 
-    result = plugins.first('has_perm', user, 'remove_project_key', project, key)
-    if result is False:
-        return False
-
     return True
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 2de4bf9d31..ba9873789e 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -329,29 +329,8 @@ class IPlugin(local, PluggableViewMixin):
     # Server side signals which do not have request context
 
     def has_perm(self, user, perm, *objects, **kwargs):
-        """
-        Given a user, a permission name, and an optional list of objects
-        within context, returns an override value for a permission.
-
-        :param user: either an instance of ``AnonymousUser`` or ``User``.
-        :param perm: a string, such as "edit_project"
-        :param objects: an optional list of objects
-
-        If your plugin does not modify this permission, simply return ``None``.
-
-        For example, has perm might be called like so:
-
-        >>> has_perm(user, 'add_project')
-
-        It also might be called with more context:
-
-        >>> has_perm(user, 'edit_project', project)
-
-        Or with even more context:
-
-        >>> has_perm(user, 'configure_project_plugin', project, plugin)
-        """
-        return None
+        # DEPRECATED: No longer used.
+        pass
 
     def missing_perm_response(self, request, perm, *args, **objects):
         """
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index d6f523083f..9831712e3b 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -43,7 +43,6 @@ from sentry.models import (
     Activity, User
 )
 from sentry.signals import event_received
-from sentry.plugins import plugins
 from sentry.quotas.base import RateLimit
 from sentry.utils import json, metrics
 from sentry.utils.data_scrubber import SensitiveDataFilter
@@ -317,13 +316,6 @@ class StoreView(APIView):
                 (app.tsdb.models.organization_total_received, project.organization_id),
             ])
 
-        # TODO(dcramer): remove create_event perm hooks
-        result = plugins.first('has_perm', request.user, 'create_event', project,
-                               version=1)
-        if result is False:
-            metrics.incr('events.dropped', 1)
-            raise APIForbidden('Creation of this event was blocked due to a plugin')
-
         content_encoding = request.META.get('HTTP_CONTENT_ENCODING', '')
 
         if content_encoding == 'gzip':
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 9ff6dc1d01..605fb056ab 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -12,7 +12,6 @@ from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Project, Team
 )
 from sentry.permissions import can_remove_project, can_set_public_projects
-from sentry.plugins import plugins
 from sentry.web.forms.fields import (
     CustomTypedChoiceField, RangeField, OriginsField
 )
@@ -148,10 +147,6 @@ class ProjectSettingsView(ProjectView):
         if request.user.is_superuser:
             return True
 
-        result = plugins.first('has_perm', request.user, 'edit_project', project)
-        if result is False:
-            return False
-
         return True
 
     def get_form(self, request, project):
diff --git a/src/sentry/web/frontend/projects/keys.py b/src/sentry/web/frontend/projects/keys.py
index 75a8799a9a..9621b37e9b 100644
--- a/src/sentry/web/frontend/projects/keys.py
+++ b/src/sentry/web/frontend/projects/keys.py
@@ -22,7 +22,6 @@ from sentry.models import (
 from sentry.permissions import (
     can_remove_project_key, can_add_project_key, can_edit_project_key
 )
-from sentry.plugins import plugins
 from sentry.web.decorators import has_access
 from sentry.web.forms.projectkeys import EditProjectKeyForm
 from sentry.web.helpers import render_to_response
@@ -31,10 +30,6 @@ from sentry.web.helpers import render_to_response
 @has_access(MEMBER_ADMIN)
 @csrf_protect
 def manage_project_keys(request, organization, project):
-    result = plugins.first('has_perm', request.user, 'edit_project', project)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
     key_list = list(ProjectKey.objects.filter(
         project=project,
     ).order_by('-id'))
diff --git a/src/sentry/web/frontend/projects/plugins.py b/src/sentry/web/frontend/projects/plugins.py
index 84073456e2..3c4a6eb956 100644
--- a/src/sentry/web/frontend/projects/plugins.py
+++ b/src/sentry/web/frontend/projects/plugins.py
@@ -23,10 +23,6 @@ from sentry.web.helpers import render_to_response, plugin_config
 @has_access(MEMBER_ADMIN)
 @csrf_protect
 def manage_plugins(request, organization, project):
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
     if request.POST:
         enabled = set(request.POST.getlist('plugin'))
         for plugin in plugins.all(version=None):
@@ -61,10 +57,6 @@ def configure_project_plugin(request, organization, project, slug):
     if not plugin.can_enable_for_projects():
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
 
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
     form = plugin.project_conf_form
     if form is None:
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
@@ -103,10 +95,6 @@ def reset_project_plugin(request, organization, project, slug):
     if not plugin.is_enabled(project):
         return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
 
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
     plugin.reset_options(project=project)
 
     return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
@@ -125,10 +113,6 @@ def enable_project_plugin(request, organization, project, slug):
     if plugin.is_enabled(project) or not plugin.can_enable_for_projects():
         return HttpResponseRedirect(redirect_to)
 
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
     plugin.set_option('enabled', True, project)
 
     return HttpResponseRedirect(redirect_to)
@@ -147,10 +131,6 @@ def disable_project_plugin(request, organization, project, slug):
     if not (plugin.can_disable and plugin.is_enabled(project) and plugin.can_enable_for_projects()):
         return HttpResponseRedirect(redirect_to)
 
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
     plugin.set_option('enabled', False, project)
 
     return HttpResponseRedirect(redirect_to)
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index f0ad2d5fc8..e6957e598d 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -11,7 +11,6 @@ from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, Team, OrganizationMember,
     OrganizationMemberType
 )
-from sentry.plugins import plugins
 from sentry.web.frontend.base import TeamView
 
 
@@ -28,10 +27,6 @@ class TeamSettingsView(TeamView):
         return EditTeamForm(request.POST or None, instance=team)
 
     def handle(self, request, organization, team):
-        result = plugins.first('has_perm', request.user, 'edit_team', team)
-        if result is False and not request.user.is_superuser:
-            return HttpResponseRedirect(reverse('sentry'))
-
         form = self.get_form(request, team)
         if form.is_valid():
             team = form.save()
