commit a78b4f23da88248ab0a125ba1fc1fa3f9459a57a
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 25 15:53:50 2017 -0800

    [notifications] allow configurable email subjects for alerts (#4639)

diff --git a/CHANGES b/CHANGES
index 275289a779..6d1a661537 100644
--- a/CHANGES
+++ b/CHANGES
@@ -12,6 +12,7 @@ Version 8.13 (Unreleased)
 - The legacy API keys feature is now disabled by default.
 - Show Images Loaded section for cocoa events with version number.
 - Fixed bug where workflow notification subject may not include a custom email prefix.
+- Added configurable subject templates for individual alert emails (`mail:subject_template` option).
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 24e72d5865..e74162fbae 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -17,7 +17,7 @@ from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.app import digests
 from sentry.models import (
     AuditLogEntryEvent, Group, GroupStatus, Project, ProjectBookmark,
-    ProjectStatus, UserOption
+    ProjectStatus, UserOption, DEFAULT_SUBJECT_TEMPLATE
 )
 from sentry.plugins import plugins
 from sentry.tasks.deletion import delete_project
@@ -83,6 +83,8 @@ class ProjectAdminSerializer(serializers.Serializer):
     slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50)
     digestsMinDelay = serializers.IntegerField(min_value=60, max_value=3600)
     digestsMaxDelay = serializers.IntegerField(min_value=60, max_value=3600)
+    subjectPrefix = serializers.CharField(max_length=200)
+    subjectTemplate = serializers.CharField(max_length=200)
 
     def validate_digestsMaxDelay(self, attrs, source):
         if attrs[source] < attrs['digestsMinDelay']:
@@ -159,6 +161,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'digestsMaxDelay': project.get_option(
                 'digests:mail:maximum_delay', digests.maximum_delay,
             ),
+            'subjectPrefix': project.get_option('mail:subject_prefix'),
+            'subjectTemplate': project.get_option('mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
         })
 
         include = set(filter(bool, request.GET.get('include', '').split(',')))
@@ -239,6 +243,10 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             project.update_option('digests:mail:minimum_delay', result['digestsMinDelay'])
         if result.get('digestsMaxDelay'):
             project.update_option('digests:mail:maximum_delay', result['digestsMaxDelay'])
+        if result.get('subjectPrefix'):
+            project.update_option('mail:subject_prefix', result['subjectPrefix'])
+        if result.get('subjectTemplate'):
+            project.update_option('mail:subject_template', result['subjectTemplate'])
 
         if result.get('isSubscribed'):
             UserOption.objects.set_value(request.user, project, 'mail:alert', 1)
@@ -297,6 +305,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'digestsMaxDelay': project.get_option(
                 'digests:mail:maximum_delay', digests.maximum_delay,
             ),
+            'subjectPrefix': project.get_option('mail:subject_prefix'),
+            'subjectTemplate': project.get_option('mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
         })
 
         return Response(data)
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 3247b3c004..2125bf7980 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -8,6 +8,7 @@ sentry.models.event
 from __future__ import absolute_import
 
 import six
+import string
 import warnings
 
 from collections import OrderedDict
@@ -23,6 +24,7 @@ from sentry.db.models import (
 from sentry.interfaces.base import get_interface
 from sentry.utils.cache import memoize
 from sentry.utils.safe import safe_execute
+from sentry.utils.strings import truncatechars
 
 
 class Event(Model):
@@ -264,8 +266,47 @@ class Event(Model):
         return ''
 
     def get_email_subject(self):
-        return '[%s] %s: %s' % (
-            self.project.get_full_name().encode('utf-8'),
-            six.text_type(self.get_tag('level')).upper().encode('utf-8'),
-            self.title.encode('utf-8')
+        template = self.project.get_option('mail:subject_template')
+        if template:
+            template = EventSubjectTemplate(template)
+        else:
+            template = DEFAULT_SUBJECT_TEMPLATE
+        return truncatechars(
+            template.safe_substitute(
+                EventSubjectTemplateData(self),
+            ).encode('utf-8'),
+            128,
         )
+
+
+class EventSubjectTemplate(string.Template):
+    idpattern = r'(tag:)?[_a-z][_a-z0-9]*'
+
+
+class EventSubjectTemplateData(object):
+    tag_aliases = {
+        'release': 'sentry:release',
+    }
+
+    def __init__(self, event):
+        self.event = event
+
+    def __getitem__(self, name):
+        if name.startswith('tag:'):
+            name = name[4:]
+            value = self.event.get_tag(self.tag_aliases.get(name, name))
+            if value is None:
+                raise KeyError
+            return six.text_type(value)
+        elif name == 'project':
+            return self.event.project.get_full_name()
+        elif name == 'projectID':
+            return self.event.project.slug
+        elif name == 'orgID':
+            return self.event.organization.slug
+        elif name == 'title':
+            return self.event.title
+        raise KeyError
+
+
+DEFAULT_SUBJECT_TEMPLATE = EventSubjectTemplate('[$project] ${tag:level}: $title')
diff --git a/src/sentry/plugins/sentry_mail/activity/base.py b/src/sentry/plugins/sentry_mail/activity/base.py
index d3bf8fcbad..3cb3052ee1 100644
--- a/src/sentry/plugins/sentry_mail/activity/base.py
+++ b/src/sentry/plugins/sentry_mail/activity/base.py
@@ -106,7 +106,7 @@ class ActivityEmail(object):
 
         return u'[%s] %s: %s' % (
             self.project.get_full_name(),
-            group.get_level_display().upper(),
+            group.get_level_display(),
             group.title
         )
 
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index afac2dfc0b..9d54aa312b 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -5,10 +5,10 @@ import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import ListLink from '../components/listLink';
 import PluginConfig from '../components/pluginConfig';
-import {FormState, RangeField} from '../components/forms';
+import {FormState, RangeField, TextField} from '../components/forms';
 import {t, tct} from '../locale';
 
-const ProjectDigestSettings = React.createClass({
+const DigestSettings = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
@@ -136,6 +136,105 @@ const ProjectDigestSettings = React.createClass({
   },
 });
 
+const GeneralSettings = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    initialData: React.PropTypes.object,
+    onSave: React.PropTypes.func.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      formData: Object.assign({}, this.props.initialData),
+      errors: {},
+    };
+  },
+
+  onFieldChange(name, value) {
+    this.setState({
+      formData: {
+        ...this.state.formData,
+        [name]: value,
+      }
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      let {orgId, projectId} = this.props;
+      this.api.request(`/projects/${orgId}/${projectId}/`, {
+        method: 'PUT',
+        data: this.state.formData,
+        success: (data) => {
+          this.props.onSave(data);
+          this.setState({
+            state: FormState.READY,
+            errors: {},
+          });
+        },
+        error: (error) => {
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON,
+          });
+        },
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
+      });
+    });
+  },
+
+
+  render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let {errors, formData} = this.state;
+    let hasChanges = !underscore.isEqual(this.props.initialData, formData);
+    return (
+      <div className="box">
+        <div className="box-header">
+          <h3>{t('Email Settings')}</h3>
+        </div>
+
+        <div className="box-content with-padding">
+          <form onSubmit={this.onSubmit} className="form-stacked">
+            {this.state.state === FormState.ERROR &&
+              <div className="alert alert-error alert-block">
+                {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
+              </div>
+            }
+
+            <TextField
+                key="subjectTemplate"
+                label={t('Subject template')}
+                value={formData.subjectTemplate}
+                required={false}
+                error={errors.subjectTemplate}
+                onChange={this.onFieldChange.bind(this, 'subjectTemplate')}
+                help="The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, and ${tag:key}, such as ${tag:environment} or ${tag:release}." />
+
+            <fieldset className="form-actions align-right">
+              <button type="submit" className="btn btn-primary"
+                      disabled={isSaving || !hasChanges}>{t('Save Changes')}</button>
+            </fieldset>
+          </form>
+        </div>
+      </div>
+    );
+  },
+});
+
 const InactivePlugins = React.createClass({
   propTypes: {
     plugins: React.PropTypes.array.isRequired,
@@ -201,6 +300,16 @@ const ProjectAlertSettings = React.createClass({
     });
   },
 
+  onGeneralChange(data) {
+    // TODO(dcramer): propagate this in a more correct way
+    this.setState({
+      project: {
+        ...this.state.project,
+        subjectTemplate: data.subjectTemplate,
+      },
+    });
+  },
+
   enablePlugin(plugin) {
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     let {orgId, projectId} = this.props.params;
@@ -260,7 +369,15 @@ const ProjectAlertSettings = React.createClass({
           )}
         </div>
 
-        <ProjectDigestSettings
+        <GeneralSettings
+          orgId={orgId}
+          projectId={projectId}
+          initialData={{
+            'subjectTemplate': project.subjectTemplate
+          }}
+          onSave={this.onGeneralChange} />
+
+        <DigestSettings
           orgId={orgId}
           projectId={projectId}
           initialData={{
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index 947eb63740..b1b3223b1b 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -23,13 +23,27 @@ class EventTest(TestCase):
             event_id='a' * 32, group=self.group, tags={'level': 'info'},
             message='Foo bar')
         event2 = self.create_event(
-            event_id='b' * 32, group=self.group, tags={'level': 'error'},
+            event_id='b' * 32, group=self.group, tags={'level': 'ERROR'},
             message='Foo bar')
         self.group.level = 30
 
-        assert event1.get_email_subject() == '[foo Bar] INFO: Foo bar'
+        assert event1.get_email_subject() == '[foo Bar] info: Foo bar'
         assert event2.get_email_subject() == '[foo Bar] ERROR: Foo bar'
 
+    def test_email_subject_with_template(self):
+        self.project.update_option('mail:subject_template', '$project ${tag:environment}@${tag:release} $$ $title ${tag:invalid} $invalid')
+
+        event1 = self.create_event(
+            event_id='a' * 32, group=self.group, tags={
+                'level': 'info',
+                'environment': 'production',
+                'sentry:release': '0'
+            },
+            message='baz',
+        )
+
+        assert event1.get_email_subject() == 'foo Bar production@0 $ baz ${tag:invalid} $invalid'
+
 
 class EventGetLegacyMessageTest(TestCase):
     def test_message(self):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 2dc778dd0b..848a045a05 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -47,7 +47,7 @@ class MailPluginTest(TestCase):
             self.plugin.notify(notification)
 
         msg = mail.outbox[0]
-        assert msg.subject == '[Sentry] [foo Bar] ERROR: Hello world'
+        assert msg.subject == '[Sentry] [foo Bar] error: Hello world'
         assert 'my rule' in msg.alternatives[0][0]
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
@@ -136,7 +136,7 @@ class MailPluginTest(TestCase):
         args, kwargs = _send_mail.call_args
         self.assertEquals(kwargs.get('project'), self.project)
         self.assertEquals(kwargs.get('reference'), group)
-        assert kwargs.get('subject') == u"[{0} {1}] ERROR: hello world".format(
+        assert kwargs.get('subject') == u"[{0} {1}] error: hello world".format(
             self.team.name, self.project.name)
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
@@ -169,7 +169,7 @@ class MailPluginTest(TestCase):
 
         assert _send_mail.call_count is 1
         args, kwargs = _send_mail.call_args
-        assert kwargs.get('subject') == u"[{0} {1}] ERROR: hello world".format(
+        assert kwargs.get('subject') == u"[{0} {1}] error: hello world".format(
             self.team.name, self.project.name)
 
     def test_get_sendable_users(self):
@@ -236,7 +236,7 @@ class MailPluginTest(TestCase):
 
         assert len(mail.outbox) == 1
         msg = mail.outbox[0]
-        assert msg.subject == u'[Sentry] [foo Bar] ERROR: רונית מגן'
+        assert msg.subject == u'[Sentry] [foo Bar] error: רונית מגן'
 
     def test_get_digest_subject(self):
         assert self.plugin.get_digest_subject(
@@ -318,7 +318,7 @@ class MailPluginTest(TestCase):
 
         msg = mail.outbox[0]
 
-        assert msg.subject == 'Re: [Sentry] [foo Bar] ERROR: \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
+        assert msg.subject == 'Re: [Sentry] [foo Bar] error: \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
         assert msg.to == [self.user.email]
 
     def test_note(self):
@@ -343,7 +343,7 @@ class MailPluginTest(TestCase):
 
         msg = mail.outbox[0]
 
-        assert msg.subject == 'Re: [Sentry] [foo Bar] ERROR: \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
+        assert msg.subject == 'Re: [Sentry] [foo Bar] error: \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
         assert msg.to == [self.user.email]
 
 
