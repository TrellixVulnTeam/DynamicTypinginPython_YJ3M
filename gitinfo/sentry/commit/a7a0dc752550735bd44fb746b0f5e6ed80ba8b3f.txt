commit a7a0dc752550735bd44fb746b0f5e6ed80ba8b3f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Aug 15 19:04:11 2019 -0400

    ref(ts): Convert `app/utils/attachmentUrl`, `<EventAttachments>` and `<FileSize>` (#14355)
    
    * Also refactors out `grid-emotion`

diff --git a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
deleted file mode 100644
index 3fd6fe0305..0000000000
--- a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
+++ /dev/null
@@ -1,128 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import {Box} from 'grid-emotion';
-
-import Button from 'app/components/button';
-import FileSize from 'app/components/fileSize';
-
-import {t} from 'app/locale';
-import {Panel, PanelBody, PanelItem} from 'app/components/panels';
-import withApi from 'app/utils/withApi';
-import AttachmentUrl from 'app/utils/attachmentUrl';
-
-class EventAttachments extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-    event: PropTypes.object.isRequired,
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-  };
-
-  state = {
-    attachmentList: undefined,
-    expanded: false,
-  };
-
-  componentDidMount() {
-    this.fetchData(this.props.event);
-  }
-
-  componentDidUpdate(prevProps) {
-    let doFetch = false;
-    if (!prevProps.event && this.props.event) {
-      // going from having no event to having an event
-      doFetch = true;
-    } else if (this.props.event && this.props.event.id !== prevProps.event.id) {
-      doFetch = true;
-    }
-
-    if (doFetch) {
-      this.fetchData(this.props.event);
-    }
-  }
-
-  fetchData(event) {
-    // TODO(dcramer): this API request happens twice, and we need a store for it
-    if (!event) {
-      return;
-    }
-    this.props.api.request(
-      `/projects/${this.props.orgId}/${this.props.projectId}/events/${
-        event.id
-      }/attachments/`,
-      {
-        success: (data, _, jqXHR) => {
-          this.setState({
-            attachmentList: data,
-          });
-        },
-        error: error => {
-          this.setState({
-            attachmentList: undefined,
-          });
-        },
-      }
-    );
-  }
-
-  render() {
-    const {attachmentList} = this.state;
-    if (!(attachmentList && attachmentList.length)) {
-      return null;
-    }
-
-    return (
-      <div className="box">
-        <div className="box-header">
-          <h3>
-            {t('Attachments')} ({attachmentList.length})
-          </h3>
-          <Panel>
-            <PanelBody>
-              {attachmentList.map(attachment => {
-                return (
-                  <PanelItem key={attachment.id} align="center">
-                    <Box
-                      flex={10}
-                      pr={1}
-                      style={{wordWrap: 'break-word', wordBreak: 'break-all'}}
-                    >
-                      <strong>{attachment.name}</strong>
-                    </Box>
-                    <Box flex={1} textAlign="right">
-                      <FileSize bytes={attachment.size} />
-                    </Box>
-                    <Box flex={1} textAlign="center">
-                      <AttachmentUrl
-                        projectId={this.props.projectId}
-                        event={this.props.event}
-                        attachment={attachment}
-                      >
-                        {downloadUrl => (
-                          <Button
-                            size="xsmall"
-                            icon="icon-download"
-                            href={downloadUrl}
-                            disabled={!downloadUrl}
-                            title={
-                              !downloadUrl &&
-                              t('Insufficient permissions to download attachments')
-                            }
-                          >
-                            {t('Download')}
-                          </Button>
-                        )}
-                      </AttachmentUrl>
-                    </Box>
-                  </PanelItem>
-                );
-              })}
-            </PanelBody>
-          </Panel>
-        </div>
-      </div>
-    );
-  }
-}
-
-export default withApi(EventAttachments);
diff --git a/src/sentry/static/sentry/app/components/events/eventAttachments.tsx b/src/sentry/static/sentry/app/components/events/eventAttachments.tsx
new file mode 100644
index 0000000000..5cb1a96ea9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventAttachments.tsx
@@ -0,0 +1,147 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Client} from 'app/api';
+import {Event, EventAttachment} from 'app/types';
+import {Panel, PanelBody, PanelItem} from 'app/components/panels';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import {t} from 'app/locale';
+import AttachmentUrl from 'app/utils/attachmentUrl';
+import Button from 'app/components/button';
+import FileSize from 'app/components/fileSize';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+
+type Props = {
+  api: Client;
+  event: Event;
+  orgId: string;
+  projectId: string;
+};
+
+type State = {
+  attachmentList: EventAttachment[] | null;
+  expanded: boolean;
+};
+
+class EventAttachments extends React.Component<Props, State> {
+  static propTypes: any = {
+    api: PropTypes.object.isRequired,
+    event: PropTypes.object.isRequired,
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+  };
+
+  state: State = {
+    attachmentList: null,
+    expanded: false,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    let doFetch = false;
+    if (!prevProps.event && this.props.event) {
+      // going from having no event to having an event
+      doFetch = true;
+    } else if (this.props.event && this.props.event.id !== prevProps.event.id) {
+      doFetch = true;
+    }
+
+    if (doFetch) {
+      this.fetchData();
+    }
+  }
+
+  // TODO(dcramer): this API request happens twice, and we need a store for it
+  async fetchData() {
+    const {event} = this.props;
+
+    if (!event) {
+      return;
+    }
+
+    try {
+      const data = await this.props.api.requestPromise(
+        `/projects/${this.props.orgId}/${this.props.projectId}/events/${
+          event.id
+        }/attachments/`
+      );
+
+      this.setState({
+        attachmentList: data,
+      });
+    } catch (_err) {
+      // TODO: Error-handling
+      this.setState({
+        attachmentList: null,
+      });
+    }
+  }
+
+  render() {
+    const {attachmentList} = this.state;
+
+    if (!attachmentList || !attachmentList.length) {
+      return null;
+    }
+
+    return (
+      <div className="box">
+        <div className="box-header">
+          <h3>
+            {t('Attachments')} ({attachmentList.length})
+          </h3>
+          <Panel>
+            <PanelBody>
+              {attachmentList.map(attachment => {
+                return (
+                  <PanelItem key={attachment.id} align="center">
+                    <AttachmentName>{attachment.name}</AttachmentName>
+                    <FileSizeWithGap bytes={attachment.size} />
+                    <AttachmentUrl
+                      projectId={this.props.projectId}
+                      event={this.props.event}
+                      attachment={attachment}
+                    >
+                      {downloadUrl => (
+                        <Button
+                          size="xsmall"
+                          icon="icon-download"
+                          href={downloadUrl || ''}
+                          disabled={!downloadUrl}
+                          title={
+                            !downloadUrl &&
+                            t('Insufficient permissions to download attachments')
+                          }
+                        >
+                          {t('Download')}
+                        </Button>
+                      )}
+                    </AttachmentUrl>
+                  </PanelItem>
+                );
+              })}
+            </PanelBody>
+          </Panel>
+        </div>
+      </div>
+    );
+  }
+}
+
+export default withApi<Props>(EventAttachments);
+
+const AttachmentName = styled('div')`
+  flex: 1;
+  margin-right: ${space(2)};
+  font-weight: bold;
+  ${overflowEllipsis};
+`;
+
+const FileSizeWithGap = styled(FileSize)`
+  margin-right: ${space(2)};
+`;
diff --git a/src/sentry/static/sentry/app/components/fileSize.jsx b/src/sentry/static/sentry/app/components/fileSize.jsx
deleted file mode 100644
index 08d8e61e40..0000000000
--- a/src/sentry/static/sentry/app/components/fileSize.jsx
+++ /dev/null
@@ -1,20 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import {formatBytes} from 'app/utils';
-import getDynamicText from 'app/utils/getDynamicText';
-
-class FileSize extends React.Component {
-  static propTypes = {
-    bytes: PropTypes.number.isRequired,
-  };
-
-  render() {
-    return (
-      <span>
-        {getDynamicText({value: formatBytes(this.props.bytes), fixed: 'xx KB'})}
-      </span>
-    );
-  }
-}
-
-export default FileSize;
diff --git a/src/sentry/static/sentry/app/components/fileSize.tsx b/src/sentry/static/sentry/app/components/fileSize.tsx
new file mode 100644
index 0000000000..5e53c14133
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/fileSize.tsx
@@ -0,0 +1,26 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {formatBytes} from 'app/utils';
+import getDynamicText from 'app/utils/getDynamicText';
+
+type Props = {
+  className?: string;
+  bytes: number;
+};
+
+function FileSize(props: Props) {
+  const {className, bytes} = props;
+
+  return (
+    <span className={className}>
+      {getDynamicText({value: formatBytes(bytes), fixed: 'xx KB'})}
+    </span>
+  );
+}
+
+FileSize.propTypes = {
+  className: PropTypes.string,
+  bytes: PropTypes.number.isRequired,
+};
+
+export default FileSize;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 4b26db9673..8d8843acf9 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -6,6 +6,25 @@ export type Organization = {
   features: string[];
 };
 
+export type OrganizationDetailed = Organization & {
+  isDefault: boolean;
+  defaultRole: string;
+  availableRoles: {id: string; name: string}[];
+  openMembership: boolean;
+  require2FA: boolean;
+  allowSharedIssues: boolean;
+  enhancedPrivacy: boolean;
+  dataScrubber: boolean;
+  dataScrubberDefaults: boolean;
+  sensitiveFields: string[];
+  safeFields: string[];
+  storeCrashReports: boolean;
+  attachmentsRole: string;
+  scrubIPAddresses: boolean;
+  scrapeJavaScript: boolean;
+  trustedRelays: string[];
+};
+
 export type Project = {
   id: string;
   slug: string;
@@ -35,6 +54,16 @@ export type EventMetadata = {
   function?: string;
 };
 
+export type EventAttachment = {
+  id: string;
+  dateCreated: string;
+  headers: Object;
+  name: string;
+  sha1: string;
+  size: number;
+  type: string;
+};
+
 // This type is incomplete
 export type Event = {
   id: string;
diff --git a/src/sentry/static/sentry/app/utils/attachmentUrl.jsx b/src/sentry/static/sentry/app/utils/attachmentUrl.tsx
similarity index 75%
rename from src/sentry/static/sentry/app/utils/attachmentUrl.jsx
rename to src/sentry/static/sentry/app/utils/attachmentUrl.tsx
index cabd2a6d20..0579404569 100644
--- a/src/sentry/static/sentry/app/utils/attachmentUrl.jsx
+++ b/src/sentry/static/sentry/app/utils/attachmentUrl.tsx
@@ -1,12 +1,21 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import SentryTypes from 'app/sentryTypes';
+import {OrganizationDetailed, Event, EventAttachment} from 'app/types';
 import ConfigStore from 'app/stores/configStore';
 import MemberListStore from 'app/stores/memberListStore';
 import withOrganization from 'app/utils/withOrganization';
+import SentryTypes from 'app/sentryTypes';
+
+type Props = {
+  organization: OrganizationDetailed;
+  projectId: string;
+  event: Event;
+  attachment: EventAttachment;
+  children: (downloadUrl: string | null) => React.ReactNode;
+};
 
-class AttachmentUrl extends React.PureComponent {
+class AttachmentUrl extends React.PureComponent<Props> {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -39,16 +48,16 @@ class AttachmentUrl extends React.PureComponent {
     return currentIndex >= requiredIndex;
   }
 
-  getDownloadUrl(attachment) {
-    const {organization, event, projectId} = this.props;
+  getDownloadUrl() {
+    const {attachment, organization, event, projectId} = this.props;
     return `/api/0/projects/${organization.slug}/${projectId}/events/${
       event.id
     }/attachments/${attachment.id}/?download=1`;
   }
 
   render() {
-    const {attachment, children} = this.props;
-    return children(this.hasAttachmentsRole() ? this.getDownloadUrl(attachment) : null);
+    const {children} = this.props;
+    return children(this.hasAttachmentsRole() ? this.getDownloadUrl() : null);
   }
 }
 
