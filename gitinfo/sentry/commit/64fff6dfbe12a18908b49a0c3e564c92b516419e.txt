commit 64fff6dfbe12a18908b49a0c3e564c92b516419e
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Aug 19 10:39:24 2019 -0700

    feat(app-platform): Track schema errors for sentry apps (#14408)

diff --git a/src/sentry/analytics/events/sentry_app_schema_validation_error.py b/src/sentry/analytics/events/sentry_app_schema_validation_error.py
new file mode 100644
index 0000000000..08bdc05b2d
--- /dev/null
+++ b/src/sentry/analytics/events/sentry_app_schema_validation_error.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class SentryAppSchemaValidationError(analytics.Event):
+    type = 'sentry_app.schema_validation_error'
+
+    attributes = (
+        analytics.Attribute('schema'),
+        analytics.Attribute('user_id'),
+        analytics.Attribute('sentry_app_id', required=False),
+        analytics.Attribute('sentry_app_name'),
+        analytics.Attribute('organization_id'),
+        analytics.Attribute('error_message'),
+    )
+
+
+analytics.register(SentryAppSchemaValidationError)
diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index e8d9c50d4f..6a9d7dbf93 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -2,11 +2,16 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import features
+import logging
+
+from sentry import features, analytics
 from sentry.api.bases.sentryapps import SentryAppBaseEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import SentryAppSerializer
 from sentry.mediators.sentry_apps import Updater, Destroyer
+from sentry.utils import json
+
+logger = logging.getLogger(__name__)
 
 
 class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
@@ -57,6 +62,22 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
             )
 
             return Response(serialize(updated_app, request.user))
+
+        # log any errors with schema
+        if "schema" in serializer.errors:
+            for error_message in serializer.errors["schema"]:
+                name = "sentry_app.schema_validation_error"
+                log_info = {
+                    "schema": json.dumps(request.data["schema"]),
+                    "user_id": request.user.id,
+                    "sentry_app_id": sentry_app.id,
+                    "sentry_app_name": sentry_app.name,
+                    "organization_id": sentry_app.owner.id,
+                    "error_message": error_message,
+                }
+                logger.info(name, extra=log_info)
+                analytics.record(name, **log_info)
+
         return Response(serializer.errors, status=400)
 
     def delete(self, request, sentry_app):
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index 778f2352a2..b570556b5f 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -2,7 +2,9 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import features
+import logging
+
+from sentry import features, analytics
 from sentry.auth.superuser import is_active_superuser
 from sentry.api.bases import SentryAppsBaseEndpoint
 from sentry.api.paginator import OffsetPaginator
@@ -12,6 +14,10 @@ from sentry.constants import SentryAppStatus
 from sentry.features.helpers import requires_feature
 from sentry.mediators.sentry_apps import Creator, InternalCreator
 from sentry.models import SentryApp
+from sentry.utils import json
+
+
+logger = logging.getLogger(__name__)
 
 
 class SentryAppsEndpoint(SentryAppsBaseEndpoint):
@@ -86,6 +92,20 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             sentry_app = creator.run(request=request, **data)
 
             return Response(serialize(sentry_app), status=201)
+
+        # log any errors with schema
+        if "schema" in serializer.errors:
+            for error_message in serializer.errors["schema"]:
+                name = "sentry_app.schema_validation_error"
+                log_info = {
+                    "schema": json.dumps(data["schema"]),
+                    "user_id": request.user.id,
+                    "sentry_app_name": data["name"],
+                    "organization_id": organization.id,
+                    "error_message": error_message,
+                }
+                logger.info(name, extra=log_info)
+                analytics.record(name, **log_info)
         return Response(serializer.errors, status=400)
 
     def _get_user_org(self, request):
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 114c4e512a..6f8933c17d 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -6,6 +6,7 @@ from sentry.models import SentryApp
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import with_feature
 from sentry.utils import json
+from mock import patch
 
 
 class SentryAppDetailsTest(APITestCase):
@@ -251,6 +252,26 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
         )
         assert response.status_code == 200
 
+    @patch("sentry.analytics.record")
+    @with_feature("organizations:sentry-apps")
+    def test_bad_schema(self, record):
+        self.login_as(user=self.user)
+        app = self.create_sentry_app(name="SampleApp", organization=self.org)
+        url = reverse("sentry-api-0-sentry-app-details", args=[app.slug])
+        schema = {"bad_key": "bad_value"}
+        response = self.client.put(url, data={"schema": schema}, format="json")
+        assert response.status_code == 400
+        assert response.data == {"schema": ["'elements' is a required property"]}
+        record.assert_called_with(
+            "sentry_app.schema_validation_error",
+            user_id=self.user.id,
+            organization_id=self.org.id,
+            sentry_app_id=app.id,
+            sentry_app_name="SampleApp",
+            error_message="'elements' is a required property",
+            schema=json.dumps(schema),
+        )
+
 
 class DeleteSentryAppDetailsTest(SentryAppDetailsTest):
     @with_feature("organizations:sentry-apps")
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index c8911abd3a..e0e99c913c 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 import re
 
+from mock import patch
 from django.core.urlresolvers import reverse
 
 from sentry.constants import SentryAppStatus
@@ -296,8 +297,9 @@ class PostSentryAppsTest(SentryAppsTest):
         assert response.status_code == 400
         assert response.data == {"events": ["issue webhooks require the event:read permission."]}
 
+    @patch("sentry.analytics.record")
     @with_feature("organizations:sentry-apps")
-    def test_wrong_schema_format(self):
+    def test_wrong_schema_format(self, record):
         self.login_as(user=self.user)
         kwargs = {
             "schema": {
@@ -324,6 +326,15 @@ class PostSentryAppsTest(SentryAppsTest):
         assert response.status_code == 400
         assert response.data == {"schema": ["['#general'] is too short"]}
 
+        record.assert_called_with(
+            "sentry_app.schema_validation_error",
+            user_id=self.user.id,
+            organization_id=self.org.id,
+            sentry_app_name="MyApp",
+            error_message="['#general'] is too short",
+            schema='{"elements":[{"required_fields":[{"label":"Channel","type":"select","options":[["#general"]],"name":"channel"}],"type":"alert-rule-action"}]}',
+        )
+
     @with_feature(["organizations:sentry-apps", "organizations:integrations-event-hooks"])
     def test_can_create_with_error_created_hook_with_flag(self):
         self.login_as(user=self.user)
