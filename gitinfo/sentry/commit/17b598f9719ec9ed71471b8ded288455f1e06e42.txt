commit 17b598f9719ec9ed71471b8ded288455f1e06e42
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Oct 4 15:11:05 2015 -0700

    Remove non-functional Elastic Search backend

diff --git a/.travis.yml b/.travis.yml
index 7109951626..3f22d4f470 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,7 +1,6 @@
 sudo: false
 language: python
 services:
-  - elasticsearch
   - memcached
   - riak
   - mysql
diff --git a/setup.py b/setup.py
index b8df588305..ff9793cefa 100755
--- a/setup.py
+++ b/setup.py
@@ -60,7 +60,6 @@ tests_require = [
     'casscache',
     'cqlsh',
     'datadog',
-    'elasticsearch',
     'httpretty',
     'pytest-cov>=1.4',
     'pytest-timeout',
diff --git a/src/sentry/search/elastic_search/__init__.py b/src/sentry/search/elastic_search/__init__.py
deleted file mode 100644
index b0860a4bae..0000000000
--- a/src/sentry/search/elastic_search/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import, print_function
diff --git a/src/sentry/search/elastic_search/backend.py b/src/sentry/search/elastic_search/backend.py
deleted file mode 100644
index 8cdc3cb750..0000000000
--- a/src/sentry/search/elastic_search/backend.py
+++ /dev/null
@@ -1,224 +0,0 @@
-"""
-sentry.search.elastic_search.backend
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-
-
-GET /_search
-{
-  'query': {
-    'bool': {
-      'must': [
-        { 'match': {
-            'title':  {
-              'query': 'War and Peace',
-              'boost': 2
-        }}},
-      ]
-    }
-  }
-}
-
-- has_child query
-- curator (rotate indexes/etc)
-- index templates
-- allocate 50% memory to ES (needs file cache)
-- aggregates/graph?
-- allocation/routing for cluster key
-- snapshots
-- kopf plugin
-- kibana/marvel
-
-"""
-
-from __future__ import absolute_import, print_function
-
-from elasticsearch import Elasticsearch
-
-from sentry.search.base import SearchBackend
-from sentry.utils.cursors import CursorResult
-
-
-class ElasticSearchBackend(SearchBackend):
-    def __init__(self, hosts=None, index_prefix='', **options):
-        self.index_prefix = index_prefix
-        self.backend = Elasticsearch(hosts, **options)
-
-    def _get_index(self, group):
-        return self.index_prefix + 'sentry-1'
-
-    def index(self, event):
-        group = event.group
-
-        data = {
-            'message': group.message,
-            'project_id': group.project_id,
-            'first_seen': group.first_seen,
-            'last_seen': group.last_seen,
-            'times_seen': group.times_seen,
-            'score': group.score,
-            'status': group.status,
-        }
-
-        self.backend.index(
-            index=self._get_index(group),
-            doc_type='group',
-            id=group.id,
-            body=data,
-        )
-
-        data = dict(
-            ('tag:{0}'.format(k), v)
-            for k, v in event.get_tags()
-        )
-
-        self.backend.index(
-            index=self._get_index(group),
-            doc_type='event',
-            id=event.event_id,
-            body=data,
-            parent=group.id,
-        )
-
-    def query(self, project, query=None, status=None, tags=None,
-              bookmarked_by=None, assigned_to=None, sort_by='date',
-              date_filter='last_seen', date_from=None, date_to=None,
-              cursor=None, limit=100):
-
-        query_body = {
-            'filter': {
-                'and': [
-                    {'term': {'project_id': project.id}},
-                ],
-            },
-        }
-        if query:
-            query_body['query'] = {'match': {'message': query}}
-
-        if status is not None:
-            query_body['filter']['and'].append({'term': {'status': status}})
-
-        if tags:
-            # TODO(dcramer): filter might be too expensive here, need to confirm
-            query_body['filter']['and'].append({'has_child': {
-                'type': 'event',
-                'filter': {
-                    'and': [
-                        {'term': {'tag:{0}'.format(k): v}}
-                        for k, v in tags.iteritems()
-                    ]
-                },
-            }})
-
-        # TODO(dcramer): filter might be too expensive here, need to confirm
-        if date_to and date_from:
-            query_body['filter']['and'].append({
-                'range': {date_filter: {
-                    'gte': date_from,
-                    'lte': date_to,
-                }}
-            })
-        elif date_from:
-            query_body['filter']['and'].append({
-                'range': {date_filter: {
-                    'gte': date_from,
-                }}
-            })
-        elif date_to:
-            query_body['filter']['and'].append({
-                'range': {date_filter: {
-                    'lte': date_to,
-                }}
-            })
-
-        if bookmarked_by:
-            # TODO(dcramer): we could store an array on each event similar to how
-            # we are doing tags? should we just make bookmarked events a special
-            # thing that isn't searchable?
-            raise NotImplementedError
-
-        if assigned_to:
-            # TODO(dcramer):
-            raise NotImplementedError
-
-        if sort_by == 'date':
-            sort_clause = [{'last_seen': {'order': 'desc'}}]
-        elif sort_by == 'new':
-            sort_clause = [{'first_seen': {'order': 'desc'}}]
-        elif sort_by == 'priority':
-            sort_clause = [{'score': {'order': 'desc'}}]
-        elif sort_by == 'freq':
-            sort_clause = [{'times_seen': {'order': 'desc'}}]
-        elif sort_by == 'tottime':
-            raise NotImplementedError
-        elif sort_by == 'avgtime':
-            raise NotImplementedError
-        else:
-            raise ValueError('Invalid sort_by: %s' % (sort_by,))
-
-        results = self.backend.search(
-            index=self.index_prefix + 'sentry-1',
-            doc_type='group',
-            body={
-                'query': {'filtered': query_body},
-                'sort': sort_clause,
-                'size': limit,
-                # 'from': offset,
-            },
-        )
-        if not results.get('hits'):
-            return CursorResult(
-                results=[],
-                cursor=cursor,
-                limit=limit,
-            )
-
-        instance_ids = [int(n['_id']) for n in results['hits']['hits']]
-
-        return CursorResult.from_ids(
-            id_list=instance_ids,
-            cursor=cursor,
-            limit=limit,
-            # TODO(dcramer): implement cursors
-            key=lambda x: x.id,
-        )
-
-    def upgrade(self):
-        self.backend.indices.put_template(
-            name='sentry',
-            body={
-                'template': self.index_prefix + 'sentry-*',
-                'mappings': {
-                    'group': {
-                        '_source': {'enabled': False},
-                        '_routing': {
-                            'required': True,
-                            'path': 'project_id',
-                        },
-                        'properties': {
-                            'message': {
-                                'type': 'string',
-                            },
-                            'project_id': {
-                                'type': 'long',
-                                'index': 'not_analyzed',
-                            },
-                            'first_seen': {
-                                'type': 'date',
-                            },
-                            'last_seen': {
-                                'type': 'date',
-                            },
-                        },
-                    },
-                    'event': {
-                        '_source': {'enabled': False},
-                        '_parent': {
-                            'type': 'group',
-                        },
-                    }
-                },
-            },
-        )
diff --git a/src/sentry/testutils/skips.py b/src/sentry/testutils/skips.py
index 01db5afa1b..d05c7a8a88 100644
--- a/src/sentry/testutils/skips.py
+++ b/src/sentry/testutils/skips.py
@@ -37,17 +37,3 @@ def cassandra_is_available():
 requires_cassandra = pytest.mark.skipif(
     not cassandra_is_available(),
     reason="requires cassandra server running")
-
-
-def elastic_search_is_available():
-    try:
-        socket.create_connection(('127.0.0.1', 9200), 1.0)
-    except socket.error:
-        return False
-    else:
-        return True
-
-
-requires_elastic_search = pytest.mark.skipif(
-    not elastic_search_is_available(),
-    reason="requires elastic search server running")
diff --git a/tests/sentry/search/elastic_search/__init__.py b/tests/sentry/search/elastic_search/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/search/elastic_search/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/search/elastic_search/test_backend.py b/tests/sentry/search/elastic_search/test_backend.py
deleted file mode 100644
index 4b0c1e3017..0000000000
--- a/tests/sentry/search/elastic_search/test_backend.py
+++ /dev/null
@@ -1,209 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-import pytest
-
-from datetime import datetime, timedelta
-
-from sentry.models import GroupBookmark, GroupStatus, GroupTagValue
-from sentry.search.elastic_search.backend import ElasticSearchBackend
-from sentry.testutils import TestCase
-from sentry.testutils.skips import requires_elastic_search
-
-
-@requires_elastic_search
-class ElasticSearchTest(TestCase):
-    def create_backend(self):
-        return ElasticSearchBackend(index_prefix='test-')
-
-    def setUp(self):
-        self.backend = self.create_backend()
-
-        from elasticsearch import Elasticsearch
-
-        self.conn = Elasticsearch()
-        try:
-            self.conn.indices.delete(index='test-sentry-1')
-        except Exception:
-            pass
-
-        self.backend = self.create_backend()
-        self.backend.upgrade()
-
-        self.project1 = self.create_project(name='foo')
-        self.project2 = self.create_project(name='bar')
-
-        self.group1 = self.create_group(
-            project=self.project1,
-            checksum='a' * 32,
-            message='foo',
-            times_seen=5,
-            status=GroupStatus.UNRESOLVED,
-            last_seen=datetime(2013, 8, 13, 3, 8, 24, 880386),
-            first_seen=datetime(2013, 7, 13, 3, 8, 24, 880386),
-        )
-        self.event1 = self.create_event(
-            event_id='a' * 32,
-            group=self.group1,
-            tags={
-                'server': 'example.com',
-                'env': 'production',
-            }
-        )
-
-        self.group2 = self.create_group(
-            project=self.project1,
-            checksum='b' * 32,
-            message='bar',
-            times_seen=10,
-            status=GroupStatus.RESOLVED,
-            last_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
-            first_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
-        )
-        self.event2 = self.create_event(
-            event_id='b' * 32,
-            group=self.group2,
-            tags={
-                'server': 'example.com',
-                'env': 'staging',
-                'url': 'http://example.com',
-            }
-        )
-
-        for key, value in self.event1.data['tags']:
-            GroupTagValue.objects.create(
-                group=self.group1,
-                key=key,
-                value=value,
-            )
-        for key, value in self.event2.data['tags']:
-            GroupTagValue.objects.create(
-                group=self.group2,
-                key=key,
-                value=value,
-            )
-
-        GroupBookmark.objects.create(
-            user=self.user,
-            group=self.group2,
-            project=self.group2.project,
-        )
-
-        self.backend.index(self.event1)
-        self.backend.index(self.event2)
-
-        self.conn.indices.refresh(index='test-sentry-1')
-
-    def test_query(self):
-        backend = self.create_backend()
-
-        results = self.backend.query(self.project1, query='foo')
-        assert len(results) == 1
-        assert results[0] == self.group1
-
-        results = self.backend.query(self.project1, query='bar')
-        assert len(results) == 1
-        assert results[0] == self.group2
-
-    def test_sort(self):
-        backend = self.create_backend()
-
-        results = self.backend.query(self.project1, sort_by='date')
-        assert len(results) == 2
-        assert results[0] == self.group1
-        assert results[1] == self.group2
-
-        results = self.backend.query(self.project1, sort_by='new')
-        assert len(results) == 2
-        assert results[0] == self.group2
-        assert results[1] == self.group1
-
-        results = self.backend.query(self.project1, sort_by='freq')
-        assert len(results) == 2
-        assert results[0] == self.group2
-        assert results[1] == self.group1
-
-    def test_status(self):
-        results = self.backend.query(self.project1, status=GroupStatus.UNRESOLVED)
-        assert len(results) == 1
-        assert results[0] == self.group1
-
-        results = self.backend.query(self.project1, status=GroupStatus.RESOLVED)
-        assert len(results) == 1
-        assert results[0] == self.group2
-
-    @pytest.mark.xfail
-    def test_tags(self):
-        results = self.backend.query(self.project1, tags={'env': 'staging'})
-        assert len(results) == 1
-        assert results[0] == self.group2
-
-        results = self.backend.query(self.project1, tags={'env': 'example.com'})
-        assert len(results) == 0
-
-    def test_project(self):
-        results = self.backend.query(self.project2)
-        assert len(results) == 0
-
-    @pytest.mark.xfail
-    def test_bookmarked_by(self):
-        results = self.backend.query(self.project1, bookmarked_by=self.user)
-        assert len(results) == 1
-        assert results[0] == self.group2
-
-    def test_limit(self):
-        results = self.backend.query(self.project1, limit=1)
-        assert len(results) == 1
-
-        results = self.backend.query(self.project1, limit=2)
-        assert len(results) == 2
-
-    def test_first_seen_date_filter(self):
-        backend = self.create_backend()
-
-        results = self.backend.query(
-            self.project1, date_from=self.group2.first_seen,
-            date_filter='first_seen')
-        assert len(results) == 1
-        assert results[0] == self.group2
-
-        results = self.backend.query(
-            self.project1, date_to=self.group1.first_seen + timedelta(minutes=1),
-            date_filter='first_seen')
-        assert len(results) == 1
-        assert results[0] == self.group1
-
-        results = self.backend.query(
-            self.project1,
-            date_from=self.group1.first_seen,
-            date_to=self.group1.first_seen + timedelta(minutes=1),
-            date_filter='first_seen',
-        )
-        assert len(results) == 1
-        assert results[0] == self.group1
-
-    def test_last_seen_date_filter(self):
-        backend = self.create_backend()
-
-        results = self.backend.query(
-            self.project1, date_from=self.group1.last_seen,
-            date_filter='last_seen')
-        assert len(results) == 1
-        assert results[0] == self.group1
-
-        results = self.backend.query(
-            self.project1,
-            date_to=self.group1.last_seen - timedelta(minutes=1),
-            date_filter='last_seen')
-        assert len(results) == 1
-        assert results[0] == self.group2
-
-        results = self.backend.query(
-            self.project1,
-            date_from=self.group2.last_seen,
-            date_to=self.group1.last_seen - timedelta(minutes=1),
-            date_filter='last_seen',
-        )
-        assert len(results) == 1
-        assert results[0] == self.group2
