commit ba088f48b01be8dcc46c37b910210ca2caf574d3
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Apr 4 19:06:37 2018 -0700

    fix(api): Correct various broadcast output for admins
    
    - Ensure userCount is always available to admins
    - Dont restrict admins to active broadcasts

diff --git a/src/sentry/api/endpoints/broadcast_details.py b/src/sentry/api/endpoints/broadcast_details.py
index 92f4cb439f..fae0f1947e 100644
--- a/src/sentry/api/endpoints/broadcast_details.py
+++ b/src/sentry/api/endpoints/broadcast_details.py
@@ -9,7 +9,7 @@ from rest_framework.permissions import IsAuthenticated
 
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.serializers import serialize
+from sentry.api.serializers import serialize, AdminBroadcastSerializer, BroadcastSerializer
 from sentry.api.validators import AdminBroadcastValidator, BroadcastValidator
 from sentry.auth.superuser import is_active_superuser
 from sentry.models import Broadcast, BroadcastSeen
@@ -22,7 +22,7 @@ class BroadcastDetailsEndpoint(Endpoint):
 
     def _get_broadcast(self, request, broadcast_id):
         if is_active_superuser(request) and request.access.has_permission('broadcasts.admin'):
-            queryset = Broadcast.objects
+            queryset = Broadcast.objects.all()
         else:
             queryset = Broadcast.objects.filter(
                 Q(date_expires__isnull=True) | Q(date_expires__gt=timezone.now()),
@@ -40,10 +40,11 @@ class BroadcastDetailsEndpoint(Endpoint):
         return BroadcastValidator
 
     def _serialize_response(self, request, broadcast):
-        context = serialize(broadcast, request.user)
         if is_active_superuser(request):
-            context['userCount'] = BroadcastSeen.objects.filter(broadcast=broadcast).count()
-        return self.respond(context)
+            serializer_cls = AdminBroadcastSerializer
+        else:
+            serializer_cls = BroadcastSerializer
+        return self.respond(serialize(broadcast, request.user, serializer=serializer_cls()))
 
     def get(self, request, broadcast_id):
         broadcast = self._get_broadcast(request, broadcast_id)
diff --git a/src/sentry/api/endpoints/broadcast_index.py b/src/sentry/api/endpoints/broadcast_index.py
index d647e69eb1..cd798981f8 100644
--- a/src/sentry/api/endpoints/broadcast_index.py
+++ b/src/sentry/api/endpoints/broadcast_index.py
@@ -11,7 +11,7 @@ from rest_framework.permissions import IsAuthenticated
 
 from sentry.api.base import Endpoint
 from sentry.api.paginator import DateTimePaginator
-from sentry.api.serializers import serialize
+from sentry.api.serializers import serialize, AdminBroadcastSerializer, BroadcastSerializer
 from sentry.api.validators import AdminBroadcastValidator, BroadcastValidator
 from sentry.auth.superuser import is_active_superuser
 from sentry.db.models.query import in_icontains
@@ -24,13 +24,19 @@ logger = logging.getLogger('sentry')
 class BroadcastIndexEndpoint(Endpoint):
     permission_classes = (IsAuthenticated, )
 
+    def _serialize_objects(self, items, request):
+        if is_active_superuser(request):
+            serializer_cls = AdminBroadcastSerializer
+        else:
+            serializer_cls = BroadcastSerializer
+
+        return serialize(items, request.user, serializer=serializer_cls())
+
     def get(self, request):
         if request.GET.get('show') == 'all' and is_active_superuser(
                 request) and request.access.has_permission('broadcasts.admin'):
             # superusers can slice and dice
-            queryset = Broadcast.objects.filter(
-                Q(date_expires__isnull=True) | Q(date_expires__gt=timezone.now()),
-            )
+            queryset = Broadcast.objects.all()
         else:
             # only allow active broadcasts if they're not a superuser
             queryset = Broadcast.objects.filter(
@@ -84,7 +90,7 @@ class BroadcastIndexEndpoint(Endpoint):
             request=request,
             queryset=queryset,
             order_by=order_by,
-            on_results=lambda x: serialize(x, request.user),
+            on_results=lambda x: self._serialize_objects(x, request),
             paginator_cls=paginator_cls,
         )
 
@@ -164,4 +170,4 @@ class BroadcastIndexEndpoint(Endpoint):
             except IntegrityError:
                 pass
 
-        return self.respond(serialize(broadcast, request.user))
+        return self.respond(self._serialize_objects(broadcast, request))
diff --git a/src/sentry/api/serializers/models/broadcast.py b/src/sentry/api/serializers/models/broadcast.py
index 940dcfb30f..7e04f342a4 100644
--- a/src/sentry/api/serializers/models/broadcast.py
+++ b/src/sentry/api/serializers/models/broadcast.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import six
 
+from django.db.models import Count
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import Broadcast, BroadcastSeen
 
@@ -34,3 +36,22 @@ class BroadcastSerializer(Serializer):
             'dateExpires': obj.date_expires,
             'hasSeen': attrs['seen'],
         }
+
+
+class AdminBroadcastSerializer(BroadcastSerializer):
+    def get_attrs(self, item_list, user):
+        attrs = super(AdminBroadcastSerializer, self).get_attrs(item_list, user)
+        counts = dict(BroadcastSeen.objects.filter(broadcast__in=item_list).values(
+            'broadcast',
+        ).distinct().annotate(
+            user_count=Count('broadcast')
+        ).values_list('broadcast', 'user_count'))
+
+        for item in attrs:
+            attrs[item]['user_count'] = counts.get(item.id, 0)
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        context = super(AdminBroadcastSerializer, self).serialize(obj, attrs, user)
+        context['userCount'] = attrs['user_count']
+        return context
