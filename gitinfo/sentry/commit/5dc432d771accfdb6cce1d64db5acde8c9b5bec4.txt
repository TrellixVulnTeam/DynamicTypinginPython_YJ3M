commit 5dc432d771accfdb6cce1d64db5acde8c9b5bec4
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed May 17 16:24:07 2017 -0700

    fix race condition between deploy creation and fetch_commits (#5396)
    
    * wip - fix race condition between deploy creation and fetch_commits
    
    * add tests for notify_maybe
    
    * rename notify_maybe to notify_if_ready
    
    * update fetch_commits test
    
    * fix test after changing default
    
    * bump lock duration to 30 seconds

diff --git a/src/sentry/api/endpoints/release_deploys.py b/src/sentry/api/endpoints/release_deploys.py
index 4820d68458..2e37fead04 100644
--- a/src/sentry/api/endpoints/release_deploys.py
+++ b/src/sentry/api/endpoints/release_deploys.py
@@ -13,7 +13,7 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.app import locks
-from sentry.models import Activity, Deploy, Environment, Release
+from sentry.models import Deploy, Environment, Release
 from sentry.utils.retries import TimedRetryPolicy
 
 
@@ -138,23 +138,7 @@ class ReleaseDeploysEndpoint(OrganizationReleasesBaseEndpoint):
                     date_started=result.get('dateStarted'),
                 )
 
-            activity = None
-            for project in release.projects.all():
-                activity = Activity.objects.create(
-                    type=Activity.DEPLOY,
-                    project=project,
-                    ident=release.version,
-                    data={
-                        'version': release.version,
-                        'deploy_id': deploy.id,
-                        'environment': env.name
-                    },
-                    datetime=deploy.date_finished,
-                )
-            # Somewhat hacky, only send notification for one
-            # Deploy Activity record because it will cover all projects
-            if activity is not None:
-                activity.send_notification()
+            Deploy.notify_if_ready(deploy.id)
 
             # This is the closest status code that makes sense, and we want
             # a unique 2xx response code so people can understand when
diff --git a/src/sentry/models/deploy.py b/src/sentry/models/deploy.py
index d5908aba8b..15bbbb7c37 100644
--- a/src/sentry/models/deploy.py
+++ b/src/sentry/models/deploy.py
@@ -8,9 +8,11 @@ from __future__ import absolute_import
 from django.db import models
 from django.utils import timezone
 
+from sentry.app import locks
 from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model
 )
+from sentry.utils.retries import TimedRetryPolicy
 
 
 class Deploy(Model):
@@ -23,8 +25,70 @@ class Deploy(Model):
     date_started = models.DateTimeField(null=True, blank=True)
     name = models.CharField(max_length=64, null=True, blank=True)
     url = models.URLField(null=True, blank=True)
-    notified = models.NullBooleanField(null=True, db_index=True)
+    notified = models.NullBooleanField(null=True, db_index=True, default=False)
 
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_deploy'
+
+    @staticmethod
+    def get_lock_key(deploy_id):
+        return 'deploy-notify:%s' % deploy_id
+
+    @classmethod
+    def notify_if_ready(cls, deploy_id, fetch_complete=False):
+        """
+        create activity and send deploy notifications
+        if they haven't been sent
+        """
+        from sentry.models import Activity, Environment, ReleaseCommit, ReleaseHeadCommit
+
+        lock_key = cls.get_lock_key(deploy_id)
+        lock = locks.get(lock_key, duration=30)
+        with TimedRetryPolicy(10)(lock.acquire):
+            deploy = cls.objects.filter(
+                id=deploy_id,
+            ).select_related('release').get()
+            if deploy.notified:
+                return
+
+            release = deploy.release
+            environment = Environment.objects.get(
+                organization_id=deploy.organization_id,
+                id=deploy.environment_id,
+            )
+
+            if not fetch_complete:
+                release_has_commits = ReleaseCommit.objects.filter(
+                    organization_id=release.organization_id,
+                    release=release,
+                ).exists()
+
+                if not release_has_commits:
+                    # check if we have head commits, which
+                    # would indicate that we're waiting for
+                    # fetch_commits to complete
+                    if ReleaseHeadCommit.objects.filter(
+                        organization_id=release.organization_id,
+                        release=release,
+                    ).exists():
+                        return
+
+            activity = None
+            for project in deploy.release.projects.all():
+                activity = Activity.objects.create(
+                    type=Activity.DEPLOY,
+                    project=project,
+                    ident=release.version,
+                    data={
+                        'version': release.version,
+                        'deploy_id': deploy.id,
+                        'environment': environment.name,
+                    },
+                    datetime=deploy.date_finished,
+                )
+            # Somewhat hacky, only send notification for one
+            # Deploy Activity record because it will cover all projects
+            if activity is not None:
+                activity.send_notification()
+                deploy.update(notified=True)
diff --git a/src/sentry/tasks/commits.py b/src/sentry/tasks/commits.py
index 588bb6761e..acf3551e77 100644
--- a/src/sentry/tasks/commits.py
+++ b/src/sentry/tasks/commits.py
@@ -4,7 +4,7 @@ import logging
 import six
 
 from sentry.exceptions import InvalidIdentity, PluginError
-from sentry.models import Release, ReleaseHeadCommit, Repository, User
+from sentry.models import Deploy, Release, ReleaseHeadCommit, Repository, User
 from sentry.plugins import bindings
 from sentry.tasks.base import instrumented_task, retry
 
@@ -72,3 +72,10 @@ def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
 
     if commit_list:
         release.set_commits(commit_list)
+        deploys = Deploy.objects.filter(
+            organization_id=release.organization_id,
+            release=release,
+            notified=False,
+        ).values_list('id', flat=True)
+        for d_id in deploys:
+            Deploy.notify_if_ready(d_id, fetch_complete=True)
diff --git a/tests/sentry/models/test_deploy.py b/tests/sentry/models/test_deploy.py
new file mode 100644
index 0000000000..2f57442c3c
--- /dev/null
+++ b/tests/sentry/models/test_deploy.py
@@ -0,0 +1,153 @@
+from __future__ import absolute_import
+
+from sentry.models import (
+    Activity, Commit, Deploy, Environment, Release, ReleaseHeadCommit
+)
+
+from sentry.testutils import TestCase
+
+
+class DeployNotifyTest(TestCase):
+
+    def test_already_notified(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+        release = Release.objects.create(
+            version='a' * 40,
+            organization=org,
+        )
+        release.add_project(project)
+        env = Environment.objects.create(
+            name='production',
+            organization_id=org.id,
+        )
+
+        deploy = Deploy.objects.create(
+            release=release,
+            organization_id=org.id,
+            environment_id=env.id,
+            notified=True,
+        )
+
+        Deploy.notify_if_ready(deploy.id)
+
+        # make sure no activity has been created
+        assert not Activity.objects.filter(
+            type=Activity.DEPLOY,
+            project=project,
+            ident=release.version,
+        ).exists()
+
+    def test_no_commits_no_head_commits(self):
+        # case where there are not commits, but also no head commit,
+        # so we shouldn't bother waiting to notify
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+        release = Release.objects.create(
+            version='a' * 40,
+            organization=org,
+        )
+        release.add_project(project)
+        env = Environment.objects.create(
+            name='production',
+            organization_id=org.id,
+        )
+
+        deploy = Deploy.objects.create(
+            release=release,
+            organization_id=org.id,
+            environment_id=env.id,
+        )
+
+        Deploy.notify_if_ready(deploy.id)
+
+        # make sure activity has been created
+        assert Activity.objects.filter(
+            type=Activity.DEPLOY,
+            project=project,
+            ident=release.version,
+        ).exists()
+        assert Activity.objects.get(
+            type=Activity.DEPLOY,
+            project=project,
+            ident=release.version,
+        ).data['deploy_id'] == deploy.id
+        assert Deploy.objects.get(id=deploy.id).notified is True
+
+    def test_head_commits_fetch_not_complete(self):
+        # case where there are not commits, but there are head
+        # commits, indicating we should wait to notify
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+        release = Release.objects.create(
+            version='a' * 40,
+            organization=org,
+        )
+        release.add_project(project)
+        ReleaseHeadCommit.objects.create(
+            release=release,
+            organization_id=org.id,
+            repository_id=5,
+            commit=Commit.objects.create(
+                key='b' * 40,
+                repository_id=5,
+                organization_id=org.id,
+            )
+        )
+        env = Environment.objects.create(
+            name='production',
+            organization_id=org.id,
+        )
+
+        deploy = Deploy.objects.create(
+            release=release,
+            organization_id=org.id,
+            environment_id=env.id,
+        )
+
+        Deploy.notify_if_ready(deploy.id)
+
+        # make sure activity has been created
+        assert not Activity.objects.filter(
+            type=Activity.DEPLOY,
+            project=project,
+            ident=release.version,
+        ).exists()
+        assert Deploy.objects.get(id=deploy.id).notified is False
+
+    def test_no_commits_fetch_complete(self):
+        # case where they've created a deploy and
+        # we've tried to fetch commits, but there
+        # weren't any
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+        release = Release.objects.create(
+            version='a' * 40,
+            organization=org,
+        )
+        release.add_project(project)
+        env = Environment.objects.create(
+            name='production',
+            organization_id=org.id,
+        )
+
+        deploy = Deploy.objects.create(
+            release=release,
+            organization_id=org.id,
+            environment_id=env.id,
+        )
+
+        Deploy.notify_if_ready(deploy.id, fetch_complete=True)
+
+        # make sure activity has been created
+        assert Activity.objects.filter(
+            type=Activity.DEPLOY,
+            project=project,
+            ident=release.version,
+        ).exists()
+        assert Activity.objects.get(
+            type=Activity.DEPLOY,
+            project=project,
+            ident=release.version,
+        ).data['deploy_id'] == deploy.id
+        assert Deploy.objects.get(id=deploy.id).notified is True
diff --git a/tests/sentry/tasks/test_commits.py b/tests/sentry/tasks/test_commits.py
index aec94ed96b..927b1a2ad2 100644
--- a/tests/sentry/tasks/test_commits.py
+++ b/tests/sentry/tasks/test_commits.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
-from sentry.models import Commit, Release, ReleaseHeadCommit, Repository
+from mock import patch
+
+from sentry.models import Commit, Deploy, Release, ReleaseHeadCommit, Repository
 from sentry.tasks.commits import fetch_commits
 from sentry.testutils import TestCase
 
@@ -43,13 +45,20 @@ class FetchCommits(TestCase):
             version='12345678',
         )
 
+        deploy = Deploy.objects.create(
+            organization_id=org.id,
+            release=release2,
+            environment_id=5,
+        )
+
         with self.tasks():
-            fetch_commits(
-                release_id=release2.id,
-                user_id=self.user.id,
-                refs=refs,
-                previous_release_id=release.id,
-            )
+            with patch.object(Deploy, 'notify_if_ready') as mock_notify_if_ready:
+                fetch_commits(
+                    release_id=release2.id,
+                    user_id=self.user.id,
+                    refs=refs,
+                    previous_release_id=release.id,
+                )
 
         commit_list = list(Commit.objects.filter(
             releasecommit__release=release2,
@@ -66,3 +75,5 @@ class FetchCommits(TestCase):
         assert commit_list[2].repository_id == repo.id
         assert commit_list[2].organization_id == org.id
         assert commit_list[2].key == 'b' * 40
+
+        mock_notify_if_ready.assert_called_with(deploy.id, fetch_complete=True)
