commit 7e02a5f993688554862047fb8a7cd11e7ae4e9f0
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Jan 4 19:42:42 2016 -0800

    Cache static files by default

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 325077e550..ce45a4951b 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -262,7 +262,7 @@ INSTALLED_APPS = (
 )
 
 STATIC_ROOT = os.path.realpath(os.path.join(PROJECT_ROOT, 'static'))
-STATIC_URL = '/_static/'
+STATIC_URL = '/_static/{version}/'
 
 STATICFILES_FINDERS = (
     "django.contrib.staticfiles.finders.FileSystemFinder",
diff --git a/src/sentry/middleware/locale.py b/src/sentry/middleware/locale.py
index f6fbc6cfc6..13d4e9edb3 100644
--- a/src/sentry/middleware/locale.py
+++ b/src/sentry/middleware/locale.py
@@ -18,6 +18,14 @@ from sentry.utils.safe import safe_execute
 
 class SentryLocaleMiddleware(LocaleMiddleware):
     def process_request(self, request):
+        # No locale for static media
+        # This avoids touching user session, which means we avoid
+        # setting `Vary: Cookie` as a response header which will
+        # break HTTP caching entirely.
+        self.__is_static = request.path_info[:9] == '/_static/'
+        if self.__is_static:
+            return
+
         safe_execute(self.load_user_conf, request,
                      _with_transaction=False)
 
@@ -36,3 +44,11 @@ class SentryLocaleMiddleware(LocaleMiddleware):
             user=request.user, project=None, key='timezone', default=None)
         if timezone:
             request.timezone = pytz.timezone(timezone)
+
+    def process_response(self, request, response):
+        # If static bound, we don't want to run the normal process_response since this
+        # adds an extra `Vary: Accept-Language`. Static files don't need this and is
+        # less effective for caching.
+        if self.__is_static:
+            return response
+        return super(SentryLocaleMiddleware, self).process_response(request, response)
diff --git a/src/sentry/web/frontend/generic.py b/src/sentry/web/frontend/generic.py
index f2401c849a..4ae6f593ce 100644
--- a/src/sentry/web/frontend/generic.py
+++ b/src/sentry/web/frontend/generic.py
@@ -20,6 +20,7 @@ def static_media(request, **kwargs):
 
     module = kwargs.get('module')
     path = kwargs.get('path', '')
+    version = kwargs.get('version')
 
     if module:
         path = '%s/%s' % (module, path)
@@ -29,6 +30,11 @@ def static_media(request, **kwargs):
     # We need CORS for font files
     if path.endswith(('.eot', '.ttf', '.woff', '.js')):
         response['Access-Control-Allow-Origin'] = '*'
+
+    # If we have a version, we can cache it FOREVER
+    if version is not None:
+        response['Cache-Control'] = 'max-age=315360000'
+
     return response
 
 
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index e027bd45a3..f743f66d8d 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -127,7 +127,8 @@ urlpatterns += patterns(
     url(r'^api/(?P<project_id>\d+)/csp-report/$', api.CspReportView.as_view(),
         name='sentry-api-csp-report'),
 
-    url(r'^_static/(?P<module>[^/]+)/(?P<path>.*)$', generic.static_media,
+    # The static version is either a 10 digit timestamp, or a 32 char md5 hash
+    url(r'^_static/(?:(?P<version>\d{10}|[a-f0-9]{32})/)?(?P<module>[^/]+)/(?P<path>.*)$', generic.static_media,
         name='sentry-media'),
 
     # API
