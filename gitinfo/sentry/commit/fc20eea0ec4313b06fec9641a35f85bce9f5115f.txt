commit fc20eea0ec4313b06fec9641a35f85bce9f5115f
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 14 17:58:46 2016 -0700

    Expand Audit Log features
    
    - Move to React
    - Pagination
    - Event type filter
    
    /cc @getsentry/ui @getsentry/api

diff --git a/src/sentry/api/endpoints/organization_auditlogs.py b/src/sentry/api/endpoints/organization_auditlogs.py
new file mode 100644
index 0000000000..4b78e4930e
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_auditlogs.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+from sentry.api.bases import OrganizationEndpoint
+from sentry.api.paginator import DateTimePaginator
+from sentry.api.serializers import serialize
+from sentry.models import AuditLogEntry
+
+EVENT_REVERSE_MAP = {
+    v: k
+    for k, v in AuditLogEntry._meta.get_field('event').choices
+}
+
+
+class OrganizationAuditLogsEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        queryset = AuditLogEntry.objects.filter(
+            organization=organization,
+        ).select_related('actor')
+
+        event = request.GET.get('event')
+        if event:
+            try:
+                queryset = queryset.filter(
+                    event=EVENT_REVERSE_MAP[event],
+                )
+            except KeyError:
+                queryset = queryset.none()
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            paginator_cls=DateTimePaginator,
+            order_by='-datetime',
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/serializers/models/auditlogentry.py b/src/sentry/api/serializers/models/auditlogentry.py
new file mode 100644
index 0000000000..21b7e952ec
--- /dev/null
+++ b/src/sentry/api/serializers/models/auditlogentry.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import AuditLogEntry
+
+
+@register(AuditLogEntry)
+class AuditLogEntrySerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        # TODO(dcramer); assert on relations
+        actors = {
+            d['id']: d
+            for d in serialize(set(i.actor for i in item_list if i.actor_id), user)
+        }
+
+        return {
+            item: {
+                'actor': actors[str(item.actor_id)] if item.actor_id else {
+                    'name': item.get_actor_name(),
+                },
+            } for item in item_list
+        }
+
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': str(obj.id),
+            'actor': attrs['actor'],
+            'event': obj.get_event_display(),
+            'ipAddress': obj.ip_address,
+            'note': obj.get_note(),
+            'data': obj.data,
+            'dateCreated': obj.datetime,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e29f99bb08..4acc96f49e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -23,6 +23,7 @@ from .endpoints.internal_stats import InternalStatsEndpoint
 from .endpoints.legacy_project_redirect import LegacyProjectRedirectEndpoint
 from .endpoints.organization_access_request_details import OrganizationAccessRequestDetailsEndpoint
 from .endpoints.organization_activity import OrganizationActivityEndpoint
+from .endpoints.organization_auditlogs import OrganizationAuditLogsEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_slugs import SlugsUpdateEndpoint
@@ -122,6 +123,9 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/activity/$',
         OrganizationActivityEndpoint.as_view(),
         name='sentry-api-0-organization-activity'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/audit-logs/$',
+        OrganizationAuditLogsEndpoint.as_view(),
+        name='sentry-api-0-organization-audit-logs'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/issues/new/$',
         OrganizationIssuesNewEndpoint.as_view(),
         name='sentry-api-0-organization-issues-new'),
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index 89aab33f2b..11c21421c6 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -70,6 +70,7 @@ class AuditLogEntry(Model):
     target_object = BoundedPositiveIntegerField(null=True)
     target_user = FlexibleForeignKey('sentry.User', null=True, blank=True,
                                     related_name='audit_targets')
+    # TODO(dcramer): we want to compile this mapping into JSX for the UI
     event = BoundedPositiveIntegerField(choices=(
         # We emulate github a bit with event naming
         (AuditLogEntryEvent.MEMBER_INVITE, 'member.invite'),
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 8ad6db4df0..18366ca8b6 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -77,7 +77,7 @@ const HomeSidebar = React.createClass({
                 <li><a href={urlPrefix + '/api-keys/'}>{t('API Keys')}</a></li>
               }
               {access.has('org:write') &&
-                <li><a href={urlPrefix + '/audit-log/'}>{t('Audit Log')}</a></li>
+                <ListLink to={`/organizations/${orgId}/audit-log/`}>{t('Audit Log')}</ListLink>
               }
               {access.has('org:write') &&
                 <ListLink to={`/organizations/${orgId}/rate-limits/`}>{t('Rate Limits')}</ListLink>
diff --git a/src/sentry/static/sentry/app/components/selectInput.jsx b/src/sentry/static/sentry/app/components/selectInput.jsx
index 195ec7a9dc..a7a4268c6e 100644
--- a/src/sentry/static/sentry/app/components/selectInput.jsx
+++ b/src/sentry/static/sentry/app/components/selectInput.jsx
@@ -48,7 +48,9 @@ const SelectInput = React.createClass({
   },
 
   create() {
-    this.select2 = jQuery(this.refs.select).select2();
+    this.select2 = jQuery(this.refs.select).select2({
+      width: 'element'
+    });
     this.select2.on('change', this.onChange);
   },
 
@@ -61,17 +63,8 @@ const SelectInput = React.createClass({
   },
 
   render() {
-    let opts = {
-        ref: 'select',
-        disabled: this.props.disabled,
-        required: this.props.required,
-        multiple: this.props.multiple,
-        placeholder: this.props.placeholder,
-        className: this.props.className,
-        value: this.props.value,
-    };
     return (
-      <select {...opts}>
+      <select ref="select" {...this.props}>
         {this.props.children}
       </select>
     );
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index adc9f56282..130c3cebd7 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -18,6 +18,7 @@ import GroupUserReports from './views/groupUserReports';
 import MyIssuesAssignedToMe from './views/myIssues/assignedToMe';
 import MyIssuesBookmarked from './views/myIssues/bookmarked';
 import MyIssuesViewed from './views/myIssues/viewed';
+import OrganizationAuditLog from './views/organizationAuditLog';
 import OrganizationDashboard from './views/organizationDashboard';
 import OrganizationDetails from './views/organizationDetails';
 import OrganizationRateLimits from './views/organizationRateLimits';
@@ -75,6 +76,7 @@ let routes = (
     <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
       <IndexRoute component={errorHandler(OrganizationDashboard)}/>
 
+      <Route path="/organizations/:orgId/audit-log/" component={errorHandler(OrganizationAuditLog)} />
       <Route path="/organizations/:orgId/teams/" component={errorHandler(OrganizationTeams)} />
       <Route path="/organizations/:orgId/all-teams/" component={errorHandler(OrganizationTeams)}>
         <IndexRoute component={errorHandler(AllTeamsList)}/>
diff --git a/src/sentry/static/sentry/app/views/organizationAuditLog.jsx b/src/sentry/static/sentry/app/views/organizationAuditLog.jsx
new file mode 100644
index 0000000000..05599526d4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationAuditLog.jsx
@@ -0,0 +1,205 @@
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+import {History} from 'react-router';
+
+import ApiMixin from '../mixins/apiMixin';
+import DateTime from '../components/dateTime';
+import Gravatar from '../components/gravatar';
+import LoadingIndicator from '../components/loadingIndicator';
+import LoadingError from '../components/loadingError';
+import OrganizationHomeContainer from '../components/organizations/homeContainer';
+import OrganizationState from '../mixins/organizationState';
+import Pagination from '../components/pagination';
+import SelectInput from '../components/selectInput';
+
+import {t} from '../locale';
+
+const EVENT_TYPES = [
+  'member.invite',
+  'member.add',
+  'member.accept-invite',
+  'member.remove',
+  'member.edit',
+  'member.join-team',
+  'member.leave-team',
+  'team.create',
+  'team.edit',
+  'team.remove',
+  'project.create',
+  'project.edit',
+  'project.remove',
+  'project.set-public',
+  'project.set-private',
+  'org.create',
+  'org.edit',
+  'org.remove',
+  'tagkey.remove',
+  'projectkey.create',
+  'projectkey.edit',
+  'projectkey.remove',
+  'projectkey.enable',
+  'projectkey.disable',
+  'sso.enable',
+  'sso.disable',
+  'sso.edit',
+  'sso-identity.link',
+  'api-key.create',
+  'api-key.edit',
+  'api-key.remove'
+].sort();
+
+
+const OrganizationAuditLog = React.createClass({
+  mixins: [
+    ApiMixin,
+    History,
+    OrganizationState,
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      entryList: [],
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.location.search !== this.props.location.search ||
+        nextProps.params.orgId !== this.props.params.orgId) {
+      this.remountComponent();
+    }
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+    });
+
+    this.api.request(this.getEndpoint(), {
+      query: this.props.location.query,
+      success: (data, _, jqXHR) => {
+        this.setState({
+          loading: false,
+          error: false,
+          entryList: data,
+          pageLinks: jqXHR.getResponseHeader('Link'),
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/audit-logs/`;
+  },
+
+  getTitle() {
+    let org = this.context.organization;
+    return `${org.name} Audit Log`;
+  },
+
+  onEventSelect(sel) {
+    let value = sel.val();
+    if (this.props.location.query.event === value) {
+      return;
+    }
+    let queryParams = {
+      event: value,
+    };
+    this.history.pushState(null, this.props.location.pathname, queryParams);
+  },
+
+  renderResults() {
+    if (this.state.entryList.length === 0) {
+      return <tr><td colSpan="4">{t('No results found.')}</td></tr>;
+    }
+
+    return this.state.entryList.map((entry) => {
+      return (
+        <tr key={entry.id}>
+          <td className="table-user-info">
+            {entry.actor.email &&
+              <Gravatar user={entry.actor} />
+            }
+            <h5>{entry.actor.name}</h5>
+            {entry.note}
+          </td>
+          <td>{entry.event}</td>
+          <td>{entry.ipAddress}</td>
+          <td>
+            <DateTime date={entry.dateCreated} />
+          </td>
+        </tr>
+      );
+    });
+  },
+
+  render() {
+    let currentEventType = this.props.location.query.event;
+
+    return (
+      <DocumentTitle title={this.getTitle()}>
+        <OrganizationHomeContainer>
+          <h3>{t('Audit Log')}</h3>
+
+          <div className="pull-right">
+            <form className="form-horizontal" style={{marginBottom: 20}}>
+              <div className="control-group">
+                <div className="controls">
+                  <SelectInput name="event" onChange={this.onEventSelect}
+                               value={currentEventType} style={{width: 250}}>
+                    <option key="any" value="">{t('Any')}</option>
+                    {EVENT_TYPES.map((eventType) => {
+                      return <option key={eventType}>{eventType}</option>;
+                    })}
+                  </SelectInput>
+                </div>
+              </div>
+            </form>
+          </div>
+
+          <p>{t('Sentry keeps track of important events within your organization.')}</p>
+
+          <table className="table">
+            <thead>
+              <tr>
+                <th>{t('Member')}</th>
+                <th>{t('Action')}</th>
+                <th>{t('IP')}</th>
+                <th>{t('Time')}</th>
+              </tr>
+            </thead>
+            <tbody>
+              {(this.state.loading ?
+                <tr><td colSpan="4"><LoadingIndicator /></td></tr>
+              : (this.state.error ?
+                <tr><td colSpan="4"><LoadingError onRetry={this.fetchData} /></td></tr>
+              :
+                this.renderResults()
+              ))}
+            </tbody>
+          </table>
+          {this.state.pageLinks &&
+            <Pagination pageLinks={this.state.pageLinks} {...this.props} />
+          }
+        </OrganizationHomeContainer>
+      </DocumentTitle>
+    );
+  },
+});
+
+export default OrganizationAuditLog;
diff --git a/src/sentry/static/sentry/less/includes/select2.less b/src/sentry/static/sentry/less/includes/select2.less
index 14dd0d3648..10ecb64a20 100644
--- a/src/sentry/static/sentry/less/includes/select2.less
+++ b/src/sentry/static/sentry/less/includes/select2.less
@@ -11,7 +11,6 @@
   padding: 4px 10px 3px;
   top: -1px;
   box-shadow: 0 1px 1px rgba(0, 0, 0, .05);
-  max-width: 180px;
 }
 
 .select2-container,
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 8c4e542259..a0bf652da4 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -347,7 +347,7 @@ table.table {
       .square(36px);
       position: absolute;
       left: 20px;
-      top: 18px;
+      top: 14px;
     }
   }
 
diff --git a/src/sentry/templates/sentry/bases/organization.html b/src/sentry/templates/sentry/bases/organization.html
index 9f3fbd220c..81ca834c62 100644
--- a/src/sentry/templates/sentry/bases/organization.html
+++ b/src/sentry/templates/sentry/bases/organization.html
@@ -70,11 +70,7 @@
       </li>
     {% endif %}
     {% if ACCESS.org_write %}
-      <li class="{% block org_auditlog_nav %}{% endblock %}">
-        <a href="{% url 'sentry-organization-audit-log' organization.slug %}">
-          {% trans "Audit Log" %}
-        </a>
-      </li>
+      <li><a href="{% absolute_uri '/organizations/{}/audit-logs/' organization.slug %}">{% trans "Audit Log" %}</a></li>
       <li><a href="{% absolute_uri '/organizations/{}/rate-limits/' organization.slug %}">{% trans "Rate Limits" %}</li></a>
       <li class="{% block org_settings_nav %}{% endblock %}">
         <a href="{% url 'sentry-organization-settings' organization.slug %}">
diff --git a/src/sentry/web/frontend/organization_audit_log.py b/src/sentry/web/frontend/organization_audit_log.py
deleted file mode 100644
index 8788a9b87d..0000000000
--- a/src/sentry/web/frontend/organization_audit_log.py
+++ /dev/null
@@ -1,19 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.models import AuditLogEntry
-from sentry.web.frontend.base import OrganizationView
-
-
-class OrganizationAuditLogView(OrganizationView):
-    required_scope = 'org:write'
-
-    def get(self, request, organization):
-        queryset = AuditLogEntry.objects.filter(
-            organization=organization,
-        ).select_related('actor', 'target_user').order_by('-datetime')
-
-        context = {
-            'audit_log_queryset': queryset,
-        }
-
-        return self.respond('sentry/organization-audit-log.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 03ff840c5d..1b95855c7a 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -41,7 +41,6 @@ from sentry.web.frontend.mailgun_inbound_webhook import \
 from sentry.web.frontend.organization_api_key_settings import \
     OrganizationApiKeySettingsView
 from sentry.web.frontend.organization_api_keys import OrganizationApiKeysView
-from sentry.web.frontend.organization_audit_log import OrganizationAuditLogView
 from sentry.web.frontend.organization_auth_settings import \
     OrganizationAuthSettingsView
 from sentry.web.frontend.organization_member_settings import \
@@ -254,8 +253,6 @@ urlpatterns += patterns(
         name='sentry-organization-api-key-settings'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/auth/$', OrganizationAuthSettingsView.as_view(),
         name='sentry-organization-auth-settings'),
-    url(r'^organizations/(?P<organization_slug>[\w_-]+)/audit-log/$', OrganizationAuditLogView.as_view(),
-        name='sentry-organization-audit-log'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/members/$', OrganizationMembersView.as_view(),
         name='sentry-organization-members'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/members/new/$', CreateOrganizationMemberView.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_auditlogs.py b/tests/sentry/api/endpoints/test_organization_auditlogs.py
new file mode 100644
index 0000000000..54e5a0ef49
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_auditlogs.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import AuditLogEntry, AuditLogEntryEvent
+from sentry.testutils import APITestCase
+
+
+class OrganizationAuditLogsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+        org2 = self.create_organization(owner=self.user, name='baz')
+
+        entry1 = AuditLogEntry.objects.create(
+            organization=org,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            actor=self.user,
+        )
+        entry2 = AuditLogEntry.objects.create(
+            organization=org,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            actor=self.user,
+        )
+        AuditLogEntry.objects.create(
+            organization=org2,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            actor=self.user,
+        )
+
+        url = reverse('sentry-api-0-organization-audit-logs', args=[org.slug])
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert response.data[0]['id'] == str(entry2.id)
+        assert response.data[1]['id'] == str(entry1.id)
diff --git a/tests/sentry/web/frontend/test_organization_audit_log.py b/tests/sentry/web/frontend/test_organization_audit_log.py
deleted file mode 100644
index 68a623792a..0000000000
--- a/tests/sentry/web/frontend/test_organization_audit_log.py
+++ /dev/null
@@ -1,45 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import AuditLogEntry, AuditLogEntryEvent
-from sentry.testutils import TestCase, PermissionTestCase
-
-
-class OrganizationAuditLogPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(OrganizationAuditLogPermissionTest, self).setUp()
-        self.path = reverse('sentry-organization-audit-log', args=[self.organization.slug])
-
-    def test_teamless_admin_cannot_load(self):
-        self.assert_teamless_admin_cannot_access(self.path)
-
-    def test_member_cannot_load(self):
-        self.assert_member_cannot_access(self.path)
-
-    def test_owner_can_load(self):
-        self.assert_owner_can_access(self.path)
-
-
-class OrganizationAuditLogTest(TestCase):
-    def test_renders_with_context(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-
-        path = reverse('sentry-organization-audit-log', args=[organization.slug])
-
-        AuditLogEntry.objects.create(
-            organization=organization,
-            actor=self.user,
-            event=AuditLogEntryEvent.ORG_ADD,
-        )
-
-        self.login_as(self.user)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/organization-audit-log.html')
-
-        assert resp.context['organization'] == organization
-        assert len(resp.context['audit_log_queryset']) == 1
