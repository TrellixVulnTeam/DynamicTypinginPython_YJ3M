commit 9687f99edbbf10ac5ff8fe121d79f0a2a02c2887
Author: Dena Mwangi <dena@getsentry.com>
Date:   Thu Jul 19 10:41:22 2018 -0700

    feat(experiment): Restricted auth paywall experiment (#8836)
    
    * Add SSO paywall for free and trialing org admins

diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 4516e11c40..246883aeee 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -143,6 +143,14 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         if features.has('organizations:event-attachments', obj, actor=user):
             feature_list.append('event-attachments')
 
+        # this is slightly gross but necessary until we have the get on the endpoint
+        # to give the frontend a way to know when to log exposures
+        sso_experiment = features.has('organizations:sso-paywall-experiment', obj, actor=user)
+        if sso_experiment:
+            feature_list.append('sso-paywall-experiment-treatment')
+        elif sso_experiment is False:
+            feature_list.append('sso-paywall-experiment-control')
+
         context = super(DetailedOrganizationSerializer, self).serialize(obj, attrs, user)
         max_rate = quotas.get_maximum_quota(obj)
         context['quota'] = {
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 20a9f0f983..816057aaaa 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -28,6 +28,7 @@ default_manager.add('organizations:unreleased-changes', OrganizationFeature)  #
 default_manager.add('organizations:environments', OrganizationFeature)  # NOQA
 default_manager.add('organizations:relay', OrganizationFeature)  # NOQA
 default_manager.add('organizations:health', OrganizationFeature)  # NOQA
+default_manager.add('organizations:sso-paywall-experiment', OrganizationFeature)  # NOQA
 default_manager.add('projects:similarity-view', ProjectFeature)  # NOQA
 default_manager.add('projects:global-events', ProjectFeature)  # NOQA
 default_manager.add('projects:plugins', ProjectPluginFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/components/hookOrDefault.jsx b/src/sentry/static/sentry/app/components/hookOrDefault.jsx
new file mode 100644
index 0000000000..f297ab3aa7
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/hookOrDefault.jsx
@@ -0,0 +1,58 @@
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import HookStore from 'app/stores/hookStore';
+
+/**
+ * Use this instead of the usual ternery operator when using getsentry hooks. So in lieu of
+ *		HookStore.get('component:org-auth-view').length
+ *		 ? HookStore.get('component:org-auth-view')[0]()
+ *		 : OrganizationAuth
+ *
+ * do this instead
+ *  	HookOrDefault({hookName:'component:org-auth-view', defaultComponent: OrganizationAuth})
+ *
+ *
+ * Note, you will need to add the hookstore function in getsentry first and then register
+ * it within sentry as a validHookName
+ * See: https://github.com/getsentry/getsentry/blob/master/static/getsentry/gsApp/index.jsx
+ *		/app/stores/hookStore.jsx
+ *
+ * @param {String} name The name of the hook as listed in hookstore.add(hookName, callback)
+ * @param {Component} defaultComponent Component that will be shown if no hook is available
+ *
+ */
+
+function HookOrDefault({hookName, defaultComponent}) {
+  const HookOrDefaultComponent = createReactClass({
+    displayName: 'HookOrDefaultComponent',
+    mixins: [Reflux.listenTo(HookStore, 'handleHooks')],
+
+    getInitialState() {
+      return {
+        hooks: HookStore.get(hookName),
+      };
+    },
+
+    handleHooks(hookNameFromStore, hooks) {
+      // Make sure that the incoming hook update matches this component's hook name
+      if (hookName !== hookNameFromStore) return;
+
+      this.setState(state => ({
+        hooks,
+      }));
+    },
+
+    render() {
+      let HookComponent =
+        this.state.hooks && this.state.hooks.length > 0
+          ? this.state.hooks[0]()
+          : defaultComponent;
+      return <HookComponent {...this.props} />;
+    },
+  });
+  return HookOrDefaultComponent;
+}
+
+export default HookOrDefault;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 0942535d80..c8565e7aec 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -11,6 +11,7 @@ import GroupSimilarView from 'app/views/groupSimilar/groupSimilarView';
 import GroupTagValues from 'app/views/groupTagValues';
 import GroupTags from 'app/views/groupTags';
 import GroupUserFeedback from 'app/views/groupUserFeedback';
+import HookOrDefault from 'app/components/hookOrDefault';
 import HookStore from 'app/stores/hookStore';
 import LazyLoad from 'app/components/lazyLoad';
 import MyIssuesAssignedToMe from 'app/views/myIssues/assignedToMe';
@@ -20,6 +21,7 @@ import NewProject from 'app/views/projectInstall/newProject';
 import OnboardingConfigure from 'app/views/onboarding/configure/index';
 import OnboardingWizard from 'app/views/onboarding/index';
 import OrganizationActivity from 'app/views/organizationActivity';
+import OrganizationAuth from 'app/views/settings/organizationAuth/index';
 import OrganizationContext from 'app/views/organizationContext';
 import OrganizationCreate from 'app/views/organizationCreate';
 import OrganizationDashboard from 'app/views/organizationDashboard';
@@ -469,9 +471,10 @@ function routes() {
       <Route
         path="auth/"
         name="Auth Providers"
-        componentPromise={() =>
-          import(/*webpackChunkName: OrganizationAuth*/ './views/settings/organizationAuth')}
-        component={errorHandler(LazyLoad)}
+        component={HookOrDefault({
+          hookName: 'component:org-auth-view',
+          defaultComponent: OrganizationAuth,
+        })}
       />
 
       <Route path="members/" name="Members">
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 46ce52743b..67d178c4f8 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -20,6 +20,7 @@ let validHookNames = new Set([
   'issue:secondary-column',
   'analytics:onboarding-complete',
   'analytics:event',
+  'analytics:log-experiment',
   'sidebar:organization-dropdown-menu',
 ]);
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
index d78e224d5b..7b98914c9f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
@@ -4,12 +4,14 @@ import React from 'react';
 
 import SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';
 import SentryTypes from 'app/sentryTypes';
+import HookStore from 'app/stores/hookStore';
 
 class SettingsNavigation extends React.Component {
   static propTypes = {
     hooks: PropTypes.array,
     hookConfigs: PropTypes.array,
     navigationObjects: PropTypes.arrayOf(SentryTypes.NavigationObject).isRequired,
+    organization: SentryTypes.Organization,
   };
 
   static defaultProps = {
@@ -17,6 +19,28 @@ class SettingsNavigation extends React.Component {
     hookConfigs: [],
   };
 
+  componentDidMount() {
+    let {organization} = this.props;
+    if (!organization) return;
+    let features = organization.features;
+
+    //Experiment variant is already assigned - this logs the exposure i.e. when the user gets to the settings page
+    let treatment = features.includes('sso-paywall-experiment-treatment');
+    let control = features.includes('sso-paywall-experiment-control');
+
+    // Only want to log the people in the experiment
+    if (!treatment && !control) return;
+
+    let data = {
+      experiment_name: 'SSOPaywallExperiment',
+      unit_name: 'org_id',
+      unit_id: parseInt(organization.id, 10),
+      params: `{exposed: ${treatment ? 1 : 0}}`,
+    };
+
+    HookStore.get('analytics:log-experiment').forEach(cb => cb(data));
+  }
+
   render() {
     let {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;
     let navWithHooks = navigationObjects.concat(hookConfigs);
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index 626f40ad44..c44c8a6a25 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -39,7 +39,9 @@ const organizationNavigation = [
       {
         path: `${pathPrefix}/auth/`,
         title: t('Auth'),
-        show: ({access, features}) => features.has('sso') && access.has('org:admin'),
+        show: ({access, features}) =>
+          (features.has('sso') || features.has('sso-paywall-experiment-treatment')) &&
+          access.has('org:admin'),
         description: t('Configure single sign-on'),
       },
       {
