commit a1cc0a2834e42b6ef5bc9e2acad6dc885b0270ab
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Sep 25 11:52:17 2018 -0700

    feat(integrations): Gitlab on Prem Client (#9721)
    
    * Added rough draft of client
    
    * added correct auth info.
    
    * Got client working
    
    * revised build_api_url
    
    * Changed provider and integration so that they use the build_api_url from the client function.
    
    * fixed circular import

diff --git a/src/sentry/identity/gitlab/provider.py b/src/sentry/identity/gitlab/provider.py
index 29650cb4a9..1154371cda 100644
--- a/src/sentry/identity/gitlab/provider.py
+++ b/src/sentry/identity/gitlab/provider.py
@@ -7,7 +7,7 @@ from sentry.identity.oauth2 import OAuth2Provider
 def get_user_info(access_token, installation_data):
     session = http.build_session()
     resp = session.get(
-        u'https://{}/api/v4/user'.format(installation_data['url']),
+        u'{}/api/v4/user'.format(installation_data['url']),
         headers={
             'Accept': 'application/json',
             'Authorization': 'Bearer %s' % access_token,
diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
new file mode 100644
index 0000000000..b9a92acd62
--- /dev/null
+++ b/src/sentry/integrations/gitlab/client.py
@@ -0,0 +1,103 @@
+from __future__ import absolute_import
+
+from six.moves.urllib.parse import quote
+
+from sentry.integrations.client import ApiClient, OAuth2RefreshMixin
+from sentry.integrations.exceptions import ApiError
+
+API_VERSION = u'/api/v4'
+
+
+class GitLabApiClientPath(object):
+    group = u'/groups/{group}'
+    issue = u'/projects/{project}/issues/{issue}'
+    issues = u'/projects/{project}/issues'
+    members = u'/projects/{project}/members'
+    notes = u'/projects/{project}/issues/{issue}/notes'
+    project = u'/projects/{project}'
+    user = u'/user'
+
+    @staticmethod
+    def build_api_url(base_url, path):
+        return u'{base_url}{api}{path}'.format(
+            base_url=base_url,
+            api=API_VERSION,
+            path=path,
+        )
+
+
+class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
+
+    def __init__(self, installation):
+        self.installation = installation
+        verify_ssl = self.metadata['verify_ssl']
+        super(GitLabApiClient, self).__init__(verify_ssl)
+
+    @property
+    def identity(self):
+        return self.installation.default_identity
+
+    @property
+    def metadata(self):
+        return self.installation.model.metadata
+
+    def request(self, method, path, data=None, params=None, api_preview=False):
+        # TODO(lb): Refresh auth
+        # self.check_auth(redirect_url=self.oauth_redirect_url)
+        access_token = self.identity.data['access_token']
+        headers = {
+            'Authorization': u'Bearer {}'.format(access_token)
+        }
+        return self._request(
+            method,
+            GitLabApiClientPath.build_api_url(
+                self.metadata['base_url'],
+                path
+            ),
+            headers=headers, data=data, params=params
+        )
+
+    def get_user(self):
+        return self.get(GitLabApiClientPath.user)
+
+    def get_project(self, project):
+        return self.get(
+            GitLabApiClientPath.project.format(
+                project=quote(project, safe='')
+            )
+        )
+
+    def get_issue(self, project, issue_id):
+        try:
+            return self.get(
+                GitLabApiClientPath.issue.format(
+                    project=quote(project, safe=''),
+                    issue=issue_id
+                )
+            )
+        except IndexError:
+            raise ApiError('Issue not found with ID', 404)
+
+    def create_issue(self, project, data):
+        return self.post(
+            GitLabApiClientPath.issues.format(
+                project=quote(project, safe='')
+            ),
+            data=data,
+        )
+
+    def create_note(self, project, issue_iid, data):
+        return self.post(
+            GitLabApiClientPath.notes.format(
+                project=quote(project, safe=''),
+                issue=issue_iid,
+            ),
+            data=data,
+        )
+
+    def list_project_members(self, project):
+        return self.get(
+            GitLabApiClientPath.members.format(
+                project=quote(project, safe='')
+            ),
+        )
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index d7320644a3..5cd81c1203 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -13,6 +13,7 @@ from sentry.integrations import IntegrationInstallation, IntegrationFeatures, In
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
 
+from .client import GitLabApiClient, GitLabApiClientPath
 
 DESCRIPTION = """
 Fill me out
@@ -33,8 +34,15 @@ metadata = IntegrationMetadata(
 
 class GitlabIntegration(IntegrationInstallation):
 
+    def __init__(self, *args, **kwargs):
+        super(GitlabIntegration, self).__init__(*args, **kwargs)
+        self.default_identity = None
+
     def get_client(self):
-        pass
+        if self.default_identity is None:
+            self.default_identity = self.get_default_identity()
+
+        return GitLabApiClient(self)
 
 
 class InstallationForm(forms.Form):
@@ -92,13 +100,12 @@ class InstallationConfigView(PipelineView):
         form = InstallationForm(request.POST)
         if form.is_valid():
             form_data = form.cleaned_data
-            form_data['url'] = urlparse(form_data['url']).netloc
 
             pipeline.bind_state('installation_data', form_data)
 
             pipeline.bind_state('oauth_config_information', {
-                "access_token_url": u"https://{}/oauth/token".format(form_data.get('url')),
-                "authorize_url": u"https://{}/oauth/authorize".format(form_data.get('url')),
+                "access_token_url": u"{}/oauth/token".format(form_data.get('url')),
+                "authorize_url": u"{}/oauth/authorize".format(form_data.get('url')),
                 "client_id": form_data.get('client_id'),
                 "client_secret": form_data.get('client_secret'),
                 "verify_ssl": form_data.get('verify_ssl')
@@ -179,8 +186,12 @@ class GitlabIntegrationProvider(IntegrationProvider):
     def get_group_info(self, access_token, installation_data):
         session = http.build_session()
         resp = session.get(
-            u'https://{}/api/v4/groups/{}'.format(
-                installation_data['url'], installation_data['group']),
+            GitLabApiClientPath.build_api_url(
+                base_url=installation_data['url'],
+                path=GitLabApiClientPath.group.format(
+                    group=installation_data['group'],
+                )
+            ),
             headers={
                 'Accept': 'application/json',
                 'Authorization': 'Bearer %s' % access_token,
@@ -204,12 +215,13 @@ class GitlabIntegrationProvider(IntegrationProvider):
 
         integration = {
             'name': group['name'],
-            'external_id': u'{}:{}'.format(base_url, group['id']),
+            'external_id': u'{}:{}'.format(urlparse(base_url).netloc, group['id']),
             'metadata': {
                 'icon': group['avatar_url'],
                 'domain_name': group['web_url'].replace('https://', ''),
                 'scopes': scopes,
                 'verify_ssl': state['installation_data']['verify_ssl'],
+                'base_url': base_url,
             },
             'user_identity': {
                 'type': 'gitlab',
diff --git a/tests/sentry/integrations/gitlab/test_integration.py b/tests/sentry/integrations/gitlab/test_integration.py
index 4a5b6bd32d..22f7886d01 100644
--- a/tests/sentry/integrations/gitlab/test_integration.py
+++ b/tests/sentry/integrations/gitlab/test_integration.py
@@ -99,6 +99,7 @@ class GitlabIntegrationTest(IntegrationTestCase):
             u'icon': u'https://gitlab.example.com/uploads/group/avatar/4/foo.jpg',
             u'domain_name': u'gitlab.example.com/groups/cool-group',
             u'verify_ssl': True,
+            u'base_url': 'https://gitlab.example.com'
         }
         oi = OrganizationIntegration.objects.get(
             integration=integration,
