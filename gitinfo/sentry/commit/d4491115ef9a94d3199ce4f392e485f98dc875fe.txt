commit d4491115ef9a94d3199ce4f392e485f98dc875fe
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Nov 7 16:04:39 2019 -0800

    ref(ui): Shuffle things around so that we can store unsaved Triggers in Incident Rules (#15381)
    
    * wip
    
    * revert adding `routes` to RouterProps type
    
    * wip
    
    * ops
    
    * fix merges
    
    * fix optional trigger

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 9baf9d7ff3..091ba1eac8 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -2,7 +2,6 @@ import {SpanEntry} from 'app/components/events/interfaces/spans/types';
 import {API_SCOPES} from 'app/constants';
 import {Field} from 'app/views/settings/components/forms/type';
 import {Params} from 'react-router/lib/Router';
-import {PlainRoute} from 'react-router/lib/Route';
 import {Location} from 'history';
 
 export type ObjectStatus =
@@ -589,7 +588,6 @@ export type SentryAppComponent = {
 export type RouterProps = {
   params: Params;
   location: Location;
-  routes: PlainRoute[];
 };
 
 export type ActiveExperiments = {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
index 592fd85986..fd0d1420d3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
@@ -26,8 +26,8 @@ function isRenderFunc(func: React.ReactNode | Function): func is RenderFunc {
 }
 
 type Props = {
-  apiMethod: APIRequestMethod;
-  apiEndpoint: string;
+  apiMethod?: APIRequestMethod;
+  apiEndpoint?: string;
   children: React.ReactNode | RenderFunc;
   className?: string;
   cancelLabel?: string;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
index 61fbc66b8e..04bc2fcc26 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
@@ -392,10 +392,10 @@ class FormModel {
    */
   @action
   saveForm() {
-    this.validateForm();
-    if (this.isError) {
+    if (!this.validateForm()) {
       return null;
     }
+
     let saveSnapshot: SaveSnapshot = this.createSnapshot();
 
     const request = this.doApiRequest({
@@ -661,9 +661,14 @@ class FormModel {
     this.setFieldState(id, FormState.SAVING, false);
   }
 
+  /**
+   * Returns true if there are no errors
+   */
   @action
-  validateForm() {
+  validateForm(): boolean {
     Array.from(this.fieldDescriptor.keys()).forEach(id => !this.validateField(id));
+
+    return !this.isError;
   }
 
   @action
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
index fe7c56a06d..7c713a5367 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
@@ -1,10 +1,10 @@
 import {Client} from 'app/api';
-import {IncidentRule, Trigger} from './types';
+import {SavedIncidentRule, Trigger} from './types';
 
 export function deleteRule(
   api: Client,
   orgId: string,
-  rule: IncidentRule
+  rule: SavedIncidentRule
 ): Promise<void> {
   return api.requestPromise(`/organizations/${orgId}/alert-rules/${rule.id}/`, {
     method: 'DELETE',
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
index 794bd34c39..2c9e1f121b 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
@@ -1,37 +1,45 @@
 import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
+import {AlertRuleAggregations} from 'app/views/settings/incidentRules/types';
+import {Organization, Project} from 'app/types';
 import recreateRoute from 'app/utils/recreateRoute';
+import withOrganization from 'app/utils/withOrganization';
+import withProject from 'app/utils/withProject';
 
 import RuleForm from './ruleForm';
 
-type RouteParams = {
-  orgId: string;
-  projectId: string;
+const DEFAULT_METRIC = [AlertRuleAggregations.TOTAL];
+const DEFAULT_RULE = {
+  aggregations: DEFAULT_METRIC,
+  query: '',
+  timeWindow: 60,
+  triggers: [],
 };
-type Props = {};
 
-class IncidentRulesCreate extends React.Component<
-  RouteComponentProps<RouteParams, {}> & Props
-> {
+type Props = {
+  organization: Organization;
+  project: Project;
+};
+
+class IncidentRulesCreate extends React.Component<RouteComponentProps<{}, {}> & Props> {
   handleSubmitSuccess = data => {
-    const {params, routes, location} = this.props;
+    const {params, routes, router, location} = this.props;
 
-    this.props.router.push(
-      recreateRoute(`${data.id}/`, {params, routes, location, stepBack: -1})
-    );
+    router.push(recreateRoute(`${data.id}/`, {params, routes, location, stepBack: -1}));
   };
 
   render() {
-    const {orgId, projectId} = this.props.params;
+    const {organization, project} = this.props;
 
     return (
       <RuleForm
-        orgId={orgId}
-        projectId={projectId}
+        organization={organization}
         onSubmitSuccess={this.handleSubmitSuccess}
+        rule={{...DEFAULT_RULE, projects: [project.slug]}}
       />
     );
   }
 }
-export default IncidentRulesCreate;
+
+export default withOrganization(withProject(IncidentRulesCreate));
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
index 64abeb77de..59d61155ba 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -1,20 +1,10 @@
 import {RouteComponentProps} from 'react-router/lib/Router';
-import {findIndex} from 'lodash';
 import React from 'react';
-import styled, {css} from 'react-emotion';
 
-import {IncidentRule, Trigger} from 'app/views/settings/incidentRules/types';
+import {IncidentRule} from 'app/views/settings/incidentRules/types';
 import {Organization, Project} from 'app/types';
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {deleteTrigger} from 'app/views/settings/incidentRules/actions';
-import {openModal} from 'app/actionCreators/modal';
-import {t, tct} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
-import Button from 'app/components/button';
 import RuleForm from 'app/views/settings/incidentRules/ruleForm';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import TriggersList from 'app/views/settings/incidentRules/triggers/list';
-import TriggersModal from 'app/views/settings/incidentRules/triggers/modal';
 import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
 
@@ -48,142 +38,15 @@ class IncidentRulesDetails extends AsyncView<
     ];
   }
 
-  openTriggersModal = (trigger?: Trigger) => {
-    const {organization, projects} = this.props;
-    const {rule} = this.state;
-
-    openModal(
-      ({closeModal}) => (
-        <TriggersModal
-          organization={organization}
-          projects={projects}
-          rule={rule}
-          trigger={trigger}
-          closeModal={closeModal}
-          onSubmitSuccess={trigger ? this.handleEditedTrigger : this.handleAddedTrigger}
-        />
-      ),
-      {
-        dialogClassName: css`
-          width: 80%;
-          margin-left: -40%;
-        `,
-      }
-    );
-  };
-
-  handleAddedTrigger = (trigger: Trigger) => {
-    this.setState(({rule}) => ({
-      rule: {
-        ...rule,
-        triggers: [...rule.triggers, trigger],
-      },
-    }));
-  };
-
-  handleEditedTrigger = (trigger: Trigger) => {
-    this.setState(({rule}) => {
-      const triggerIndex = findIndex(rule.triggers, ({id}) => id === trigger.id);
-      const triggers = [...rule.triggers];
-      triggers.splice(triggerIndex, 1, trigger);
-
-      return {
-        rule: {
-          ...rule,
-          triggers,
-        },
-      };
-    });
-  };
-
-  handleNewTrigger = () => {
-    this.openTriggersModal();
-  };
-
-  handleEditTrigger = (trigger: Trigger) => {
-    this.openTriggersModal(trigger);
-  };
-
-  handleDeleteTrigger = async (trigger: Trigger) => {
-    const {organization} = this.props;
-
-    // Optimistically update
-    const triggerIndex = findIndex(this.state.rule.triggers, ({id}) => id === trigger.id);
-    const triggersAfterDelete = [...this.state.rule.triggers];
-    triggersAfterDelete.splice(triggerIndex, 1);
-
-    this.setState(({rule}) => {
-      return {
-        rule: {
-          ...rule,
-          triggers: triggersAfterDelete,
-        },
-      };
-    });
-
-    try {
-      await deleteTrigger(this.api, organization.slug, trigger);
-    } catch (err) {
-      addErrorMessage(
-        tct('There was a problem deleting trigger: [label]', {label: trigger.label})
-      );
-
-      // Add trigger back to list
-      this.setState(({rule}) => {
-        const triggers = [...rule.triggers];
-        triggers.splice(triggerIndex, 0, trigger);
-
-        return {
-          rule: {
-            ...rule,
-            triggers,
-          },
-        };
-      });
-    }
-  };
-
   renderBody() {
-    const {orgId, projectId, incidentRuleId} = this.props.params;
+    const {organization, params} = this.props;
+    const {incidentRuleId} = params;
     const {rule} = this.state;
 
     return (
-      <React.Fragment>
-        <RuleForm
-          saveOnBlur
-          projectId={projectId}
-          orgId={orgId}
-          incidentRuleId={incidentRuleId}
-          initialData={rule}
-        />
-
-        <TriggersHeader
-          title={t('Triggers')}
-          action={
-            <Button
-              size="small"
-              priority="primary"
-              icon="icon-circle-add"
-              disabled={!rule}
-              onClick={this.handleNewTrigger}
-            >
-              {t('New Trigger')}
-            </Button>
-          }
-        />
-
-        <TriggersList
-          triggers={rule.triggers}
-          onDelete={this.handleDeleteTrigger}
-          onEdit={this.handleEditTrigger}
-        />
-      </React.Fragment>
+      <RuleForm organization={organization} incidentRuleId={incidentRuleId} rule={rule} />
     );
   }
 }
 
 export default withProjects(withOrganization(IncidentRulesDetails));
-
-const TriggersHeader = styled(SettingsPageHeader)`
-  margin: 0;
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
index bd311faeb4..b8007e6e1b 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
@@ -13,12 +13,12 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
 
-import {IncidentRule} from './types';
+import {SavedIncidentRule} from './types';
 import {deleteRule} from './actions';
 import getMetricDisplayName from './utils/getMetricDisplayName';
 
 type State = {
-  rules: IncidentRule[];
+  rules: SavedIncidentRule[];
 } & AsyncView['state'];
 
 type RouteParams = {
@@ -35,7 +35,7 @@ class IncidentRulesList extends AsyncView<Props, State> {
     return [['rules', `/organizations/${orgId}/alert-rules/`] as [string, string]];
   }
 
-  handleRemoveRule = async (rule: IncidentRule) => {
+  handleRemoveRule = async (rule: SavedIncidentRule) => {
     const {orgId} = this.props.params;
 
     // Optimistic update
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
deleted file mode 100644
index e7b34c55b9..0000000000
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
+++ /dev/null
@@ -1,167 +0,0 @@
-import React from 'react';
-
-import {Client} from 'app/api';
-import {Organization} from 'app/types';
-import {t} from 'app/locale';
-import Form from 'app/views/settings/components/forms/form';
-import FormField from 'app/views/settings/components/forms/formField';
-import JsonForm from 'app/views/settings/components/forms/jsonForm';
-import SearchBar from 'app/views/events/searchBar';
-import withApi from 'app/utils/withApi';
-import withOrganization from 'app/utils/withOrganization';
-
-import {AlertRuleAggregations, IncidentRule, TimeWindow} from './types';
-import getMetricDisplayName from './utils/getMetricDisplayName';
-
-const DEFAULT_METRIC = [AlertRuleAggregations.TOTAL];
-
-type Props = {
-  api: Client;
-  organization: Organization;
-  initialData?: IncidentRule;
-};
-
-type TimeWindowMapType = {[key in TimeWindow]: string};
-
-const TIME_WINDOW_MAP: TimeWindowMapType = {
-  [TimeWindow.ONE_MINUTE]: t('1 minute'),
-  [TimeWindow.FIVE_MINUTES]: t('5 minutes'),
-  [TimeWindow.TEN_MINUTES]: t('10 minutes'),
-  [TimeWindow.FIFTEEN_MINUTES]: t('15 minutes'),
-  [TimeWindow.THIRTY_MINUTES]: t('30 minutes'),
-  [TimeWindow.ONE_HOUR]: t('1 hour'),
-  [TimeWindow.TWO_HOURS]: t('2 hours'),
-  [TimeWindow.FOUR_HOURS]: t('4 hours'),
-  [TimeWindow.ONE_DAY]: t('24 hours'),
-};
-
-class RuleForm extends React.Component<Props> {
-  render() {
-    const {organization} = this.props;
-
-    return (
-      <JsonForm
-        forms={[
-          {
-            title: t('Metric'),
-            fields: [
-              {
-                name: 'name',
-                type: 'text',
-                label: t('Name'),
-                help: t('Give your Incident Rule a name so it is easy to manage later'),
-                placeholder: t('My Incident Rule Name'),
-                required: true,
-              },
-              {
-                name: 'aggregations',
-                type: 'select',
-                label: t('Metric'),
-                help: t('Choose which metric to trigger on'),
-                choices: [
-                  [
-                    AlertRuleAggregations.UNIQUE_USERS,
-                    getMetricDisplayName(AlertRuleAggregations.UNIQUE_USERS),
-                  ],
-                  [
-                    AlertRuleAggregations.TOTAL,
-                    getMetricDisplayName(AlertRuleAggregations.TOTAL),
-                  ],
-                ],
-                required: true,
-                setValue: value => (value && value.length ? value[0] : value),
-                getValue: value => [value],
-              },
-              {
-                name: 'query',
-                type: 'custom',
-                label: t('Filter'),
-                defaultValue: '',
-                placeholder: 'error.type:TypeError',
-                help: t(
-                  'You can apply standard Sentry filter syntax to filter by status, user, etc.'
-                ),
-                Component: props => {
-                  return (
-                    <FormField {...props}>
-                      {({onChange, onBlur, onKeyDown}) => {
-                        return (
-                          <SearchBar
-                            useFormWrapper={false}
-                            organization={organization}
-                            onChange={onChange}
-                            onBlur={onBlur}
-                            onKeyDown={onKeyDown}
-                            onSearch={query => onChange(query, {})}
-                          />
-                        );
-                      }}
-                    </FormField>
-                  );
-                },
-              },
-              {
-                name: 'timeWindow',
-                type: 'select',
-                label: t('Time Window'),
-                help: t('The time window to use when evaluating the Metric'),
-                choices: Object.entries(TIME_WINDOW_MAP),
-                required: true,
-              },
-            ],
-          },
-        ]}
-      />
-    );
-  }
-}
-
-type RuleFormContainerProps = {
-  initialData?: IncidentRule;
-  orgId: string;
-  projectId: string;
-  incidentRuleId?: string;
-  saveOnBlur?: boolean;
-} & React.ComponentProps<typeof RuleForm> & {
-    onSubmitSuccess?: Form['props']['onSubmitSuccess'];
-  };
-
-function RuleFormContainer({
-  orgId,
-  projectId,
-  incidentRuleId,
-  initialData,
-  saveOnBlur,
-  onSubmitSuccess,
-  ...props
-}: RuleFormContainerProps) {
-  return (
-    <Form
-      apiMethod={incidentRuleId ? 'PUT' : 'POST'}
-      apiEndpoint={`/organizations/${orgId}/alert-rules/${
-        incidentRuleId ? `${incidentRuleId}/` : ''
-      }`}
-      initialData={{
-        query: '',
-        aggregations: DEFAULT_METRIC,
-        projects: [projectId],
-        includeAllProjects: false,
-        excludedProjects: [],
-
-        // TODO(incidents): Temp values
-        alertThreshold: 5,
-        resolveThreshold: 1,
-        thresholdType: 0,
-        timeWindow: 60,
-        ...initialData,
-      }}
-      saveOnBlur={saveOnBlur}
-      onSubmitSuccess={onSubmitSuccess}
-    >
-      <RuleForm initialData={initialData} {...props} />
-    </Form>
-  );
-}
-
-export {RuleFormContainer};
-export default withApi(withOrganization(RuleFormContainer));
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
new file mode 100644
index 0000000000..1a163e36e4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -0,0 +1,137 @@
+import {findIndex} from 'lodash';
+import React from 'react';
+
+import {Project} from 'app/types';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {deleteTrigger} from 'app/views/settings/incidentRules/actions';
+import {tct} from 'app/locale';
+import Form from 'app/views/settings/components/forms/form';
+import RuleForm from 'app/views/settings/incidentRules/ruleForm/ruleForm';
+import SentryTypes from 'app/sentryTypes';
+import Triggers from 'app/views/settings/incidentRules/triggers';
+import withApi from 'app/utils/withApi';
+import withConfig from 'app/utils/withConfig';
+import withProject from 'app/utils/withProject';
+
+import {IncidentRule, Trigger} from '../types';
+
+type Props = {
+  project: Project;
+  rule: IncidentRule;
+  incidentRuleId?: string;
+} & Pick<React.ComponentProps<typeof RuleForm>, 'api' | 'config' | 'organization'> & {
+    onSubmitSuccess?: Form['props']['onSubmitSuccess'];
+  };
+
+type State = {
+  rule: IncidentRule;
+};
+
+class RuleFormContainer extends React.Component<Props, State> {
+  static contextTypes = {
+    project: SentryTypes.Project,
+  };
+
+  state = {
+    rule: this.props.rule,
+    projects: [this.props.project],
+  };
+
+  handleAddTrigger = (trigger: Trigger) => {
+    this.setState(({rule}) => ({
+      rule: {
+        ...rule,
+        triggers: [...rule.triggers, trigger],
+      },
+    }));
+  };
+
+  handleEditTrigger = (trigger: Trigger) => {
+    this.setState(({rule}) => {
+      const triggerIndex = findIndex(rule.triggers, ({id}) => id === trigger.id);
+      const triggers = [...rule.triggers];
+      triggers.splice(triggerIndex, 1, trigger);
+
+      return {
+        rule: {
+          ...rule,
+          triggers,
+        },
+      };
+    });
+  };
+
+  handleDeleteTrigger = async (trigger: Trigger) => {
+    const {api, organization} = this.props;
+
+    // Optimistically update
+    const triggerIndex = findIndex(this.state.rule.triggers, ({id}) => id === trigger.id);
+    const triggersAfterDelete = [...this.state.rule.triggers];
+    triggersAfterDelete.splice(triggerIndex, 1);
+
+    this.setState(({rule}) => {
+      return {
+        rule: {
+          ...rule,
+          triggers: triggersAfterDelete,
+        },
+      };
+    });
+
+    // Trigger is potentially unsaved if it does not have an id, so don't try to remove from server
+    if (!trigger.id) {
+      return;
+    }
+
+    try {
+      await deleteTrigger(api, organization.slug, trigger);
+    } catch (err) {
+      addErrorMessage(
+        tct('There was a problem deleting trigger: [label]', {label: trigger.label})
+      );
+
+      // Add trigger back to list
+      this.setState(({rule}) => {
+        const triggers = [...rule.triggers];
+        triggers.splice(triggerIndex, 0, trigger);
+
+        return {
+          rule: {
+            ...rule,
+            triggers,
+          },
+        };
+      });
+    }
+  };
+
+  render() {
+    const {api, config, organization, incidentRuleId, onSubmitSuccess} = this.props;
+    const {rule} = this.state;
+
+    return (
+      <Form
+        apiMethod={incidentRuleId ? 'PUT' : 'POST'}
+        apiEndpoint={`/organizations/${organization.slug}/alert-rules/${
+          incidentRuleId ? `${incidentRuleId}/` : ''
+        }`}
+        initialData={rule}
+        saveOnBlur={false}
+        onSubmitSuccess={onSubmitSuccess}
+      >
+        <RuleForm api={api} config={config} organization={organization} rule={rule} />
+        <Triggers
+          rule={rule}
+          organization={organization}
+          incidentRuleId={incidentRuleId}
+          onDelete={this.handleDeleteTrigger}
+          onEdit={this.handleEditTrigger}
+          onAdd={this.handleAddTrigger}
+        />
+      </Form>
+    );
+  }
+}
+
+export {RuleFormContainer};
+export default withConfig(withApi(withProject(RuleFormContainer)));
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/ruleForm.tsx
new file mode 100644
index 0000000000..58c6c79d75
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/ruleForm.tsx
@@ -0,0 +1,117 @@
+import React from 'react';
+
+import {Client} from 'app/api';
+import {Config, Organization} from 'app/types';
+import {t} from 'app/locale';
+import FormField from 'app/views/settings/components/forms/formField';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import SearchBar from 'app/views/events/searchBar';
+
+import {AlertRuleAggregations, IncidentRule, TimeWindow} from '../types';
+import getMetricDisplayName from '../utils/getMetricDisplayName';
+
+type Props = {
+  api: Client;
+  config: Config;
+  organization: Organization;
+  rule?: IncidentRule;
+};
+
+type TimeWindowMapType = {[key in TimeWindow]: string};
+
+const TIME_WINDOW_MAP: TimeWindowMapType = {
+  [TimeWindow.ONE_MINUTE]: t('1 minute'),
+  [TimeWindow.FIVE_MINUTES]: t('5 minutes'),
+  [TimeWindow.TEN_MINUTES]: t('10 minutes'),
+  [TimeWindow.FIFTEEN_MINUTES]: t('15 minutes'),
+  [TimeWindow.THIRTY_MINUTES]: t('30 minutes'),
+  [TimeWindow.ONE_HOUR]: t('1 hour'),
+  [TimeWindow.TWO_HOURS]: t('2 hours'),
+  [TimeWindow.FOUR_HOURS]: t('4 hours'),
+  [TimeWindow.ONE_DAY]: t('24 hours'),
+};
+
+class RuleForm extends React.Component<Props> {
+  render() {
+    const {organization} = this.props;
+
+    return (
+      <React.Fragment>
+        <JsonForm
+          forms={[
+            {
+              title: t('Metric'),
+              fields: [
+                {
+                  name: 'name',
+                  type: 'text',
+                  label: t('Name'),
+                  help: t('Give your Incident Rule a name so it is easy to manage later'),
+                  placeholder: t('My Incident Rule Name'),
+                  required: true,
+                },
+                {
+                  name: 'aggregations',
+                  type: 'select',
+                  label: t('Metric'),
+                  help: t('Choose which metric to trigger on'),
+                  choices: [
+                    [
+                      AlertRuleAggregations.UNIQUE_USERS,
+                      getMetricDisplayName(AlertRuleAggregations.UNIQUE_USERS),
+                    ],
+                    [
+                      AlertRuleAggregations.TOTAL,
+                      getMetricDisplayName(AlertRuleAggregations.TOTAL),
+                    ],
+                  ],
+                  required: true,
+                  setValue: value => (value && value.length ? value[0] : value),
+                  getValue: value => [value],
+                },
+                {
+                  name: 'query',
+                  type: 'custom',
+                  label: t('Filter'),
+                  defaultValue: '',
+                  placeholder: 'error.type:TypeError',
+                  help: t(
+                    'You can apply standard Sentry filter syntax to filter by status, user, etc.'
+                  ),
+                  Component: props => {
+                    return (
+                      <FormField {...props}>
+                        {({onChange, onBlur, onKeyDown}) => {
+                          return (
+                            <SearchBar
+                              useFormWrapper={false}
+                              organization={organization}
+                              onChange={onChange}
+                              onBlur={onBlur}
+                              onKeyDown={onKeyDown}
+                              onSearch={query => onChange(query, {})}
+                            />
+                          );
+                        }}
+                      </FormField>
+                    );
+                  },
+                },
+                {
+                  name: 'timeWindow',
+                  type: 'select',
+                  label: t('Time Window'),
+                  help: t('The time window to use when evaluating the Metric'),
+                  choices: Object.entries(TIME_WINDOW_MAP),
+                  required: true,
+                },
+              ],
+            },
+          ]}
+        />
+      </React.Fragment>
+    );
+  }
+}
+
+export default RuleForm;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
index 4f4c88f1e7..d861003948 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
@@ -12,11 +12,11 @@ import theme from 'app/utils/theme';
 type Props = {
   xAxis: EChartOption.XAxis;
   data: Series[];
-  alertThreshold: number | null;
-  resolveThreshold: number | null;
-  isInverted: boolean;
-  onChangeIncidentThreshold: (alertThreshold: number) => void;
-  onChangeResolutionThreshold: (resolveThreshold: number) => void;
+  alertThreshold?: number | null;
+  resolveThreshold?: number | null;
+  isInverted?: boolean;
+  onChangeIncidentThreshold?: (alertThreshold: number) => void;
+  onChangeResolutionThreshold?: (resolveThreshold: number) => void;
   maxValue?: number;
 };
 
@@ -88,8 +88,12 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
       return;
     }
 
+    const {onChangeIncidentThreshold} = this.props;
     const alertThreshold = this.chartRef.convertFromPixel({gridIndex: 0}, pos)[1];
-    this.props.onChangeIncidentThreshold(alertThreshold);
+
+    if (typeof onChangeIncidentThreshold === 'function') {
+      onChangeIncidentThreshold(alertThreshold);
+    }
   };
 
   setResolutionThreshold = (pos: [number, number]) => {
@@ -97,8 +101,12 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
       return;
     }
 
+    const {onChangeResolutionThreshold} = this.props;
     const boundary = this.chartRef.convertFromPixel({gridIndex: 0}, pos)[1];
-    this.props.onChangeResolutionThreshold(boundary);
+
+    if (typeof onChangeResolutionThreshold === 'function') {
+      onChangeResolutionThreshold(boundary);
+    }
   };
 
   handleRef = (ref: ReactEchartsRef): void => {
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
index c32c507357..46a13dee83 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
@@ -19,13 +19,16 @@ type Props = {
   config: Config;
   organization: Organization;
   projects: Project[];
-  rule: IncidentRule;
-  isInverted: boolean;
-  timeWindow: number;
-  alertThreshold: number | null;
-  resolveThreshold: number | null;
-  onChangeIncidentThreshold: (alertThreshold: number) => void;
-  onChangeResolutionThreshold: (resolveThreshold: number) => void;
+
+  query: IncidentRule['query'];
+  timeWindow: IncidentRule['timeWindow'];
+  aggregations: IncidentRule['aggregations'];
+
+  isInverted?: boolean;
+  alertThreshold?: number | null;
+  resolveThreshold?: number | null;
+  onChangeIncidentThreshold?: (alertThreshold: number) => void;
+  onChangeResolutionThreshold?: (resolveThreshold: number) => void;
 };
 
 class TriggersChart extends React.Component<Props> {
@@ -38,26 +41,21 @@ class TriggersChart extends React.Component<Props> {
       alertThreshold,
       resolveThreshold,
       isInverted,
-      rule,
+      timeWindow,
+      query,
+      aggregations,
     } = this.props;
-    const {timeWindow} = rule;
-
-    const projectIdsFromRule = rule.projects.map(project => {
-      const found = projects.find(({slug}) => project === slug);
-      return found ? Number(found.id) : -1;
-    });
 
     return (
       <EventsRequest
         api={api}
         organization={organization}
-        project={projectIdsFromRule}
+        query={query}
+        project={projects.map(({id}) => Number(id))}
         interval={`${timeWindow}s`}
         period={getPeriodForTimeWindow(timeWindow)}
         yAxis={
-          rule.aggregations[0] === AlertRuleAggregations.TOTAL
-            ? 'event_count'
-            : 'user_count'
+          aggregations[0] === AlertRuleAggregations.TOTAL ? 'event_count' : 'user_count'
         }
         includePrevious={false}
       >
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
index bfb935f8fd..94b18ac38b 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
@@ -1,3 +1,5 @@
+import FormModel from 'app/views/settings/components/forms/model';
+
 import {debounce} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -19,6 +21,7 @@ import {
   AlertRuleThreshold,
   AlertRuleThresholdType,
   IncidentRule,
+  UnsavedTrigger,
   Trigger,
   Action,
   TargetType,
@@ -212,10 +215,11 @@ class TriggerForm extends React.Component<Props, State> {
             config={config}
             organization={organization}
             projects={projects}
-            rule={rule}
             isInverted={isInverted}
             alertThreshold={alertThreshold}
             resolveThreshold={resolveThreshold}
+            query={rule.query}
+            aggregations={rule.aggregations}
             timeWindow={rule.timeWindow}
             onChangeIncidentThreshold={this.handleChangeIncidentThreshold}
             onChangeResolutionThreshold={this.handleChangeResolutionThreshold}
@@ -269,12 +273,12 @@ class TriggerForm extends React.Component<Props, State> {
 }
 
 type TriggerFormContainerProps = {
-  orgId: string;
   organization: Organization;
+  rule: IncidentRule;
   projects: Project[];
-} & React.ComponentProps<typeof TriggerForm> & {
-    onSubmitSuccess?: Form['props']['onSubmitSuccess'];
-  };
+  trigger?: Trigger;
+  onSave: (trigger: UnsavedTrigger) => void;
+} & React.ComponentProps<typeof TriggerForm>;
 
 type TriggerFormContainerState = {
   actions: Action[];
@@ -284,31 +288,32 @@ class TriggerFormContainer extends AsyncComponent<
   TriggerFormContainerProps & AsyncComponent['props'],
   TriggerFormContainerState & AsyncComponent['state']
 > {
-  constructor(props, context) {
-    super(props, context);
-    this.state = {
-      ...this.state,
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
       actions: [],
     };
   }
 
   componentDidMount() {
-    const {orgId} = this.props;
+    const {organization} = this.props;
 
-    fetchOrgMembers(this.api, orgId);
+    fetchOrgMembers(this.api, organization.slug);
   }
 
   getEndpoints(): [string, string][] {
-    const {orgId, rule, trigger} = this.props;
+    const {organization, rule, trigger} = this.props;
 
-    if (!trigger) {
+    if (!trigger || !trigger.id) {
       return [];
     }
 
     return [
       [
         'actions',
-        `/organizations/${orgId}/alert-rules/${rule.id}/triggers/${trigger.id}/actions/`,
+        `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/${
+          trigger.id
+        }/actions/`,
       ],
     ];
   }
@@ -328,9 +333,9 @@ class TriggerFormContainer extends AsyncComponent<
   };
 
   handleChangeAction = (index: number, action: Action): void => {
-    const {api, orgId, rule, trigger} = this.props;
+    const {api, organization, rule, trigger} = this.props;
     this.setState(state => {
-      addOrUpdateAction(api, orgId, rule, action, trigger);
+      addOrUpdateAction(api, organization.slug, rule, action, trigger);
 
       return {
         actions: replaceAtArrayIndex(state.actions, index, action),
@@ -338,33 +343,33 @@ class TriggerFormContainer extends AsyncComponent<
     });
   };
 
+  handleSubmit = (data, _onSuccess, _onError, _e, model: FormModel) => {
+    if (!model.validateForm()) {
+      return;
+    }
+
+    this.props.onSave(data as Trigger);
+  };
+
   renderLoading() {
     return this.renderBody();
   }
 
   renderBody() {
-    const {
-      orgId,
-      onSubmitSuccess,
-      rule,
-      trigger,
-      organization,
-      projects,
-      ...props
-    } = this.props;
+    const {organization, rule, trigger, projects, ...props} = this.props;
 
     return (
       <Form
         apiMethod={trigger ? 'PUT' : 'POST'}
-        apiEndpoint={`/organizations/${orgId}/alert-rules/${rule.id}/triggers/${
-          trigger ? `${trigger.id}/` : ''
-        }`}
+        apiEndpoint={`/organizations/${organization.slug}/alert-rules/${
+          rule.id
+        }/triggers/${trigger ? `${trigger.id}/` : ''}`}
         initialData={{
           thresholdType: AlertRuleThresholdType.ABOVE,
           ...trigger,
         }}
         saveOnBlur={false}
-        onSubmitSuccess={onSubmitSuccess}
+        onSubmit={this.handleSubmit}
         submitLabel={trigger ? t('Update Trigger') : t('Create Trigger')}
       >
         <TriggerForm
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
new file mode 100644
index 0000000000..7828e90b5e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
@@ -0,0 +1,92 @@
+import React from 'react';
+import styled, {css} from 'react-emotion';
+
+import {IncidentRule, Trigger} from 'app/views/settings/incidentRules/types';
+import {Organization, Project} from 'app/types';
+import {openModal} from 'app/actionCreators/modal';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import TriggersList from 'app/views/settings/incidentRules/triggers/list';
+import TriggersModal from 'app/views/settings/incidentRules/triggers/modal';
+import withProjects from 'app/utils/withProjects';
+
+type Props = {
+  organization: Organization;
+  projects: Project[];
+  incidentRuleId?: string;
+  rule: IncidentRule;
+
+  onAdd: (trigger: Trigger) => void;
+  onEdit: (trigger: Trigger) => void;
+  onDelete: (trigger: Trigger) => void;
+};
+
+class Triggers extends React.Component<Props> {
+  openTriggersModal = (trigger?: Trigger) => {
+    const {organization, projects, rule, onAdd, onEdit} = this.props;
+
+    openModal(
+      ({closeModal}) => (
+        <TriggersModal
+          organization={organization}
+          projects={projects}
+          rule={rule}
+          trigger={trigger}
+          closeModal={closeModal}
+          onSave={trigger ? onEdit : onAdd}
+        />
+      ),
+      {
+        dialogClassName: css`
+          width: 80%;
+          margin-left: -40%;
+        `,
+      }
+    );
+  };
+
+  handleNewTrigger = () => {
+    this.openTriggersModal();
+  };
+
+  handleEditTrigger = (trigger: Trigger) => {
+    this.openTriggersModal(trigger);
+  };
+
+  render() {
+    const {rule, onDelete} = this.props;
+
+    return (
+      <React.Fragment>
+        <TriggersHeader
+          title={t('Triggers')}
+          action={
+            <Button
+              type="button"
+              size="small"
+              priority="primary"
+              icon="icon-circle-add"
+              disabled={!rule}
+              onClick={this.handleNewTrigger}
+            >
+              {t('New Trigger')}
+            </Button>
+          }
+        />
+
+        <TriggersList
+          triggers={rule.triggers}
+          onDelete={onDelete}
+          onEdit={this.handleEditTrigger}
+        />
+      </React.Fragment>
+    );
+  }
+}
+
+export default withProjects(Triggers);
+
+const TriggersHeader = styled(SettingsPageHeader)`
+  margin: 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx
index 059697290e..e68411610f 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx
@@ -40,13 +40,13 @@ export default class TriggersList extends React.Component<Props> {
         </PanelHeaderGrid>
         <PanelBody>
           {isEmpty && <EmptyMessage>{t('No triggers added')}</EmptyMessage>}
-          {triggers.map(trigger => {
+          {triggers.map((trigger, index) => {
             const [mainCondition, secondaryCondition] = getTriggerConditionDisplayName(
               trigger
             );
 
             return (
-              <Grid key={trigger.id}>
+              <Grid key={trigger.id || `new-${index}`}>
                 <Label>{trigger.label}</Label>
                 <Condition>
                   <MainCondition>{mainCondition}</MainCondition>
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx
index 4978676fcb..cdd0657042 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx
@@ -1,10 +1,13 @@
 import React from 'react';
 import styled from 'react-emotion';
 
-import {IncidentRule, Trigger} from 'app/views/settings/incidentRules/types';
+import {
+  IncidentRule,
+  UnsavedTrigger,
+  Trigger,
+} from 'app/views/settings/incidentRules/types';
 import {Organization, Project} from 'app/types';
-import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import {t, tct} from 'app/locale';
+import {t} from 'app/locale';
 import TriggerForm from 'app/views/settings/incidentRules/triggers/form';
 import space from 'app/styles/space';
 
@@ -14,40 +17,27 @@ type Props = {
   rule: IncidentRule;
   closeModal: Function;
   trigger?: Trigger;
-  onSubmitSuccess: Function;
+  onSave: (trigger: UnsavedTrigger) => void;
 };
 
 class TriggersModal extends React.Component<Props> {
-  handleSubmitSuccess = (newTrigger: Trigger) => {
-    const {onSubmitSuccess, closeModal, trigger} = this.props;
+  handleSave = (newTrigger: Trigger) => {
+    const {onSave, closeModal} = this.props;
 
-    if (trigger) {
-      addSuccessMessage(
-        tct('Successfully updated trigger: [label]', {label: newTrigger.label})
-      );
-    } else {
-      addSuccessMessage(
-        tct('Successfully saved trigger: [label]', {label: newTrigger.label})
-      );
-    }
-    onSubmitSuccess(newTrigger);
+    onSave(newTrigger);
     closeModal();
   };
 
-  handleSubmitError = () => {
-    addErrorMessage(t('There was a problem saving trigger'));
-  };
-
   render() {
     const {organization, projects, rule, trigger} = this.props;
+
     return (
       <div>
         <TinyHeader>{t('Trigger for')}</TinyHeader>
         <RuleName>{rule.name}</RuleName>
         <TriggerForm
           organization={organization}
-          orgId={organization.slug}
-          onSubmitSuccess={this.handleSubmitSuccess}
+          onSave={this.handleSave}
           projects={projects}
           rule={rule}
           trigger={trigger}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index 6cc343f32c..4275396bdc 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -30,20 +30,24 @@ export type SavedTrigger = UnsavedTrigger & {
 
 export type Trigger = Partial<SavedTrigger> & UnsavedTrigger;
 
-export type IncidentRule = {
+export type UnsavedIncidentRule = {
   aggregations: AlertRuleAggregations[];
-  dateAdded: string;
-  dateModified: string;
-  id: string;
-  name: string;
   projects: string[];
   query: string;
-  status: number;
-  thresholdType: AlertRuleThresholdType;
   timeWindow: number;
   triggers: Trigger[];
 };
 
+export type SavedIncidentRule = UnsavedIncidentRule & {
+  dateAdded: string;
+  dateModified: string;
+  id: string;
+  status: number;
+  name: string;
+};
+
+export type IncidentRule = Partial<SavedIncidentRule> & UnsavedIncidentRule;
+
 export enum TimeWindow {
   ONE_MINUTE = 60,
   FIVE_MINUTES = 300,
diff --git a/tests/js/spec/views/settings/incidentRules/details.spec.jsx b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
index be37ded73f..192fc2e30e 100644
--- a/tests/js/spec/views/settings/incidentRules/details.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
@@ -28,23 +28,25 @@ describe('Incident Rules Details', function() {
       url: `/organizations/${organization.slug}/alert-rules/${rule.id}/`,
       body: rule,
     });
-    const createTrigger = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/`,
-      method: 'POST',
-      body: (_, options) =>
-        TestStubs.IncidentTrigger({
-          ...options.data,
-          id: '123',
-        }),
-    });
-    const updateTrigger = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/123/`,
-      method: 'PUT',
-      body: (_, options) =>
-        TestStubs.IncidentTrigger({
-          ...options.data,
-        }),
-    });
+
+    // TODO: Implement creating/saving triggers
+    // const createTrigger = MockApiClient.addMockResponse({
+    // url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/`,
+    // method: 'POST',
+    // body: (_, options) =>
+    // TestStubs.IncidentTrigger({
+    // ...options.data,
+    // id: '123',
+    // }),
+    // });
+    // const updateTrigger = MockApiClient.addMockResponse({
+    // url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/123/`,
+    // method: 'PUT',
+    // body: (_, options) =>
+    // TestStubs.IncidentTrigger({
+    // ...options.data,
+    // }),
+    // });
 
     MockApiClient.addMockResponse({
       url: `/organizations/${organization.slug}/alert-rules/${
@@ -88,17 +90,6 @@ describe('Incident Rules Details', function() {
 
     // Save Trigger
     wrapper.find('TriggersModal button[aria-label="Create Trigger"]').simulate('submit');
-    expect(createTrigger).toHaveBeenLastCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: {
-          label: 'New Trigger',
-          alertThreshold: 13,
-          resolveThreshold: 12,
-          thresholdType: 0,
-        },
-      })
-    );
 
     // New Trigger should be in list
     await tick();
@@ -138,19 +129,7 @@ describe('Incident Rules Details', function() {
 
     // Save Trigger
     wrapper.find('TriggersModal button[aria-label="Update Trigger"]').simulate('submit');
-    expect(updateTrigger).toHaveBeenLastCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: expect.objectContaining({
-          alertRuleId: '4',
-          alertThreshold: 13,
-          id: '123',
-          label: 'New Trigger!!',
-          resolveThreshold: 12,
-          thresholdType: 0,
-        }),
-      })
-    );
+
     // New Trigger should be in list
     await tick();
     await tick(); // tick#2 - flakiness
@@ -166,14 +145,20 @@ describe('Incident Rules Details', function() {
 
     // Attempt and fail to delete trigger
     let deleteTrigger = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/123`,
+      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/1`,
       method: 'DELETE',
       statusCode: 400,
     });
+    const deleteUndefinedTrigger = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/alert-rules/${
+        rule.id
+      }/triggers/undefined`,
+      method: 'DELETE',
+    });
 
     wrapper
       .find('TriggersList button[aria-label="Delete Trigger"]')
-      .last()
+      .first()
       .simulate('click');
 
     wrapper.find('Confirm button[aria-label="Confirm"]').simulate('click');
@@ -186,16 +171,11 @@ describe('Incident Rules Details', function() {
     expect(
       wrapper
         .find('TriggersList Label')
-        .last()
+        .first()
         .text()
-    ).toBe('New Trigger!!');
-
-    // Actually delete trigger
-    deleteTrigger = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/123`,
-      method: 'DELETE',
-    });
+    ).toBe('Trigger');
 
+    // Remove unsaved trigger from list
     wrapper
       .find('TriggersList button[aria-label="Delete Trigger"]')
       .last()
@@ -206,13 +186,35 @@ describe('Incident Rules Details', function() {
     await tick();
     wrapper.update();
 
-    expect(deleteTrigger).toHaveBeenCalled();
+    expect(deleteUndefinedTrigger).not.toHaveBeenCalled();
 
+    // The last trigger is now the first trigger
     expect(
       wrapper
         .find('TriggersList Label')
         .last()
         .text()
     ).toBe('Trigger');
+
+    // Actually delete saved trigger
+    deleteTrigger = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/1`,
+      method: 'DELETE',
+    });
+
+    wrapper
+      .find('TriggersList button[aria-label="Delete Trigger"]')
+      .last()
+      .simulate('click');
+
+    wrapper.find('Confirm button[aria-label="Confirm"]').simulate('click');
+
+    await tick();
+    wrapper.update();
+
+    expect(deleteTrigger).toHaveBeenCalled();
+
+    // No triggers left
+    expect(wrapper.find('TriggersList Label')).toHaveLength(0);
   });
 });
diff --git a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
index b9a5b8a2af..5f175903c9 100644
--- a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
@@ -8,13 +8,7 @@ describe('Incident Rules Form', function() {
   const {organization, project, routerContext} = initializeOrg();
   const createWrapper = props =>
     mountWithTheme(
-      <RuleFormContainer
-        organization={organization}
-        orgId={organization.slug}
-        projectId="project-slug"
-        projects={[project, TestStubs.Project({slug: 'project-2', id: '3'})]}
-        {...props}
-      />,
+      <RuleFormContainer organization={organization} project={project} {...props} />,
       routerContext
     );
 
@@ -39,7 +33,15 @@ describe('Incident Rules Form', function() {
      * Note this isn't necessarily the desired behavior, as it is just documenting the behavior
      */
     it('creates a rule', async function() {
-      const wrapper = createWrapper();
+      const wrapper = createWrapper({
+        rule: {
+          aggregations: [0],
+          query: '',
+          projects: [project.slug],
+          timeWindow: 60,
+          triggers: [],
+        },
+      });
 
       // Enter in name so we can submit
       wrapper
@@ -52,10 +54,6 @@ describe('Incident Rules Form', function() {
         expect.objectContaining({
           data: expect.objectContaining({
             name: 'Incident Rule',
-
-            // Note, backend handles this when ideally `includeAllProjects: true` should only send excludedProjects,
-            // and `includeAllProjects: false` send `projects`
-            includeAllProjects: false,
             projects: ['project-slug'],
           }),
         })
@@ -78,21 +76,21 @@ describe('Incident Rules Form', function() {
     it('edits metric', async function() {
       const wrapper = createWrapper({
         incidentRuleId: rule.id,
-        initialData: rule,
-        saveOnBlur: true,
+        rule,
       });
 
       wrapper
         .find('input[name="name"]')
-        .simulate('change', {target: {value: 'new name'}})
-        .simulate('blur');
+        .simulate('change', {target: {value: 'new name'}});
+
+      wrapper.find('form').simulate('submit');
 
       expect(editRule).toHaveBeenLastCalledWith(
         expect.anything(),
         expect.objectContaining({
-          data: {
+          data: expect.objectContaining({
             name: 'new name',
-          },
+          }),
         })
       );
       editRule.mockReset();
diff --git a/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx b/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
index c4c57eb83f..a975dd4481 100644
--- a/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
@@ -12,7 +12,7 @@ describe('Incident Rules -> Triggers Modal', function() {
     mountWithTheme(
       <TriggersModal
         organization={organization}
-        projects={[project, TestStubs.Project({slug: 'project-2', id: '3'})]}
+        projects={[project]}
         rule={rule}
         {...props}
       />,
diff --git a/webpack.config.js b/webpack.config.js
index 8905e964df..4decf8e4df 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -230,6 +230,9 @@ const appConfig = {
           },
           {
             loader: 'ts-loader',
+            options: {
+              transpileOnly: false,
+            },
           },
         ],
       },
