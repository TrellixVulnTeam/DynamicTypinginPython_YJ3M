commit c3983a13355add598cf5824738a843c5b17389a0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue May 7 10:33:35 2019 -0700

    ref(mixins): Remove remaining ApiMixin usage (#13085)
    
    This removes the last components using ApiMixin

diff --git a/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
index bdc30c0c86..2126aa9d82 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
@@ -1,23 +1,19 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-
 import createReactClass from 'create-react-class';
 
-import ApiMixin from 'app/mixins/apiMixin';
-import StackedBarChart from 'app/components/stackedBarChart';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
+import StackedBarChart from 'app/components/stackedBarChart';
+import withApi from 'app/utils/withApi';
 
-export default createReactClass({
-  displayName: 'apiChart',
-
+const ApiChart = createReactClass({
   propTypes: {
+    api: PropTypes.object.isRequired,
     since: PropTypes.number.isRequired,
     resolution: PropTypes.string.isRequired,
   },
 
-  mixins: [ApiMixin],
-
   getInitialState() {
     return {
       error: false,
@@ -48,7 +44,7 @@ export default createReactClass({
     ];
 
     statNameList.forEach(statName => {
-      this.api.request('/internal/stats/', {
+      this.props.api.request('/internal/stats/', {
         method: 'GET',
         data: {
           since: this.props.since,
@@ -132,3 +128,5 @@ export default createReactClass({
     );
   },
 });
+
+export default withApi(ApiChart);
diff --git a/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
index 34174e3a09..c7728088e5 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
@@ -1,23 +1,21 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-
 import createReactClass from 'create-react-class';
 
-import ApiMixin from 'app/mixins/apiMixin';
-import StackedBarChart from 'app/components/stackedBarChart';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
+import StackedBarChart from 'app/components/stackedBarChart';
+import withApi from 'app/utils/withApi';
 
-export default createReactClass({
+const EventChart = createReactClass({
   displayName: 'eventChart',
 
   propTypes: {
+    api: PropTypes.object.isRequired,
     since: PropTypes.number.isRequired,
     resolution: PropTypes.string.isRequired,
   },
 
-  mixins: [ApiMixin],
-
   getInitialState() {
     return {
       error: false,
@@ -47,7 +45,7 @@ export default createReactClass({
     statNameList.forEach(statName => {
       // query the organization stats via a separate call as its possible the project stats
       // are too heavy
-      this.api.request('/internal/stats/', {
+      this.props.api.request('/internal/stats/', {
         method: 'GET',
         data: {
           since: this.props.since,
@@ -156,3 +154,5 @@ export default createReactClass({
     );
   },
 });
+
+export default withApi(EventChart);
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 7ad7aac308..32c7128be3 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -1,20 +1,19 @@
 import $ from 'jquery';
-import {injectGlobal} from 'emotion';
 import {ThemeProvider} from 'emotion-theming';
+import {Tracing} from '@sentry/integrations';
+import {getCurrentHub} from '@sentry/browser';
+import {injectGlobal} from 'emotion';
 import Cookies from 'js-cookie';
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import keydown from 'react-keydown';
-import {getCurrentHub} from '@sentry/browser';
-import {Tracing} from '@sentry/integrations';
 
 import {openCommandPalette} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
 import AlertActions from 'app/actions/alertActions';
 import Alerts from 'app/components/alerts';
-import ApiMixin from 'app/mixins/apiMixin';
 import AssistantHelper from 'app/components/assistant/helper';
 import ConfigStore from 'app/stores/configStore';
 import ErrorBoundary from 'app/components/errorBoundary';
@@ -25,8 +24,9 @@ import InstallWizard from 'app/views/installWizard';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import NewsletterConsent from 'app/views/newsletterConsent';
 import OrganizationsStore from 'app/stores/organizationsStore';
-import theme from 'app/utils/theme';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
+import theme from 'app/utils/theme';
+import withApi from 'app/utils/withApi';
 
 function getAlertTypeForProblem(problem) {
   switch (problem.severity) {
@@ -41,6 +41,7 @@ const App = createReactClass({
   displayName: 'App',
 
   propTypes: {
+    api: PropTypes.object.isRequired,
     routes: PropTypes.array,
   },
 
@@ -48,7 +49,7 @@ const App = createReactClass({
     location: PropTypes.object,
   },
 
-  mixins: [ApiMixin, Reflux.listenTo(ConfigStore, 'onConfigStoreChange')],
+  mixins: [Reflux.listenTo(ConfigStore, 'onConfigStoreChange')],
 
   getInitialState() {
     const user = ConfigStore.get('user');
@@ -67,7 +68,7 @@ const App = createReactClass({
   },
 
   componentWillMount() {
-    this.api.request('/organizations/', {
+    this.props.api.request('/organizations/', {
       query: {
         member: '1',
       },
@@ -85,7 +86,7 @@ const App = createReactClass({
       },
     });
 
-    this.api.request('/internal/health/', {
+    this.props.api.request('/internal/health/', {
       success: data => {
         if (data && data.problems) {
           data.problems.forEach(problem => {
@@ -245,7 +246,7 @@ const App = createReactClass({
   },
 });
 
-export default App;
+export default withApi(App);
 
 injectGlobal`
 body {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
index d1e0eabed0..fd06adf6c9 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
@@ -14,7 +14,6 @@ import {
 } from 'app/actionCreators/indicator';
 import {getOrganizationState} from 'app/mixins/organizationState';
 import {t, tct} from 'app/locale';
-import ApiMixin from 'app/mixins/apiMixin';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
 import ClippedBox from 'app/components/clippedBox';
@@ -33,6 +32,7 @@ const KeyRow = createReactClass({
   displayName: 'KeyRow',
 
   propTypes: {
+    api: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
@@ -41,8 +41,6 @@ const KeyRow = createReactClass({
     onRemove: PropTypes.func.isRequired,
   },
 
-  mixins: [ApiMixin],
-
   getInitialState() {
     return {
       loading: false,
@@ -57,7 +55,7 @@ const KeyRow = createReactClass({
 
     const loadingIndicator = addLoadingMessage(t('Saving changes..'));
     const {orgId, projectId, data} = this.props;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
       method: 'DELETE',
       success: (d, _, jqXHR) => {
         this.props.onRemove();
@@ -81,7 +79,7 @@ const KeyRow = createReactClass({
     }
     const loadingIndicator = addLoadingMessage(t('Saving changes..'));
     const {orgId, projectId, data} = this.props;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
       method: 'PUT',
       data: params,
       success: (d, _, jqXHR) => {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index 0d1ddd11f4..766493ba32 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -13,7 +13,6 @@ import {
 } from 'app/actionCreators/indicator';
 import {t, tct} from 'app/locale';
 import Access from 'app/components/acl/access';
-import ApiMixin from 'app/mixins/apiMixin';
 import AsyncView from 'app/views/asyncView';
 import BooleanField from 'app/views/settings/components/forms/booleanField';
 import Button from 'app/components/button';
@@ -56,8 +55,9 @@ const RATE_LIMIT_FORMAT_MAP = new Map([
 const formatRateLimitWindow = val => RATE_LIMIT_FORMAT_MAP.get(val);
 
 const KeyStats = createReactClass({
-  displayName: 'KeyStats',
-  mixins: [ApiMixin],
+  propTypes: {
+    api: PropTypes.object.isRequired,
+  },
 
   getInitialState() {
     const until = Math.floor(new Date().getTime() / 1000);
@@ -79,7 +79,7 @@ const KeyStats = createReactClass({
 
   fetchData() {
     const {keyId, orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/stats/`, {
+    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/stats/`, {
       query: {
         since: this.state.since,
         until: this.state.until,
@@ -297,12 +297,11 @@ const KeySettings = createReactClass({
   displayName: 'KeySettings',
 
   propTypes: {
+    api: PropTypes.object.isRequired,
     data: SentryTypes.ProjectKey.isRequired,
     onRemove: PropTypes.func.isRequired,
   },
 
-  mixins: [ApiMixin],
-
   getInitialState() {
     return {loading: false};
   },
@@ -314,7 +313,7 @@ const KeySettings = createReactClass({
 
     const loadingIndicator = addLoadingMessage(t('Saving changes..'));
     const {keyId, orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
+    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
       method: 'DELETE',
       success: (d, _, jqXHR) => {
         this.props.onRemove();
@@ -496,9 +495,14 @@ export default class ProjectKeyDetails extends AsyncView {
         <SettingsPageHeader title={t('Key Details')} />
         <PermissionAlert />
 
-        <KeyStats params={params} />
+        <KeyStats api={this.api} params={params} />
 
-        <KeySettings params={params} data={data} onRemove={this.handleRemove} />
+        <KeySettings
+          api={this.api}
+          params={params}
+          data={data}
+          onRemove={this.handleRemove}
+        />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
index 6d31a602d1..7cc03163f9 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
@@ -4,7 +4,6 @@ import React from 'react';
 import createReactClass from 'create-react-class';
 
 import {t} from 'app/locale';
-import ApiMixin from 'app/mixins/apiMixin';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
@@ -25,8 +24,6 @@ const ServiceHookRow = createReactClass({
     onToggleActive: PropTypes.func.isRequired,
   },
 
-  mixins: [ApiMixin],
-
   getInitialState() {
     return {
       loading: false,
