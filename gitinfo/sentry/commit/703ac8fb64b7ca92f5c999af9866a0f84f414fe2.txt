commit 703ac8fb64b7ca92f5c999af9866a0f84f414fe2
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 27 13:52:50 2016 -0700

    Fix various behavior with JavaScript devices

diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index a4a442792b..1ec42e9e3c 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -16,6 +16,7 @@ from sentry.interfaces.base import Interface
 
 __all__ = ('Contexts',)
 
+EMPTY_VALUES = frozenset(('', None))
 
 context_types = {}
 
@@ -35,7 +36,8 @@ class ContextType(object):
         self.alias = alias
         ctx_data = {}
         for key, value in trim(data).iteritems():
-            ctx_data[force_text(key)] = force_text(value)
+            if value not in EMPTY_VALUES:
+                ctx_data[force_text(key)] = force_text(value)
         self.data = ctx_data
 
     def to_json(self):
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index 2dda5d9474..e37cdbd907 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -13,18 +13,21 @@ def preprocess_event(data):
     if data.get('platform') != 'javascript':
         return
 
-    project = Project.objects.get_from_cache(
-        id=data['project'],
-    )
+    if settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT:
+        project = Project.objects.get_from_cache(
+            id=data['project'],
+        )
 
-    allow_scraping = bool(project.get_option('sentry:scrape_javascript', True))
+        allow_scraping = bool(project.get_option('sentry:scrape_javascript', True))
+
+        processor = SourceProcessor(
+            project=project,
+            allow_scraping=allow_scraping,
+        )
+        processor.process(data)
 
-    processor = SourceProcessor(
-        project=project,
-        allow_scraping=allow_scraping,
-    )
-    data = processor.process(data)
     inject_device_data(data)
+
     return data
 
 
@@ -47,6 +50,14 @@ def parse_user_agent(data):
     return None
 
 
+def _get_version(user_agent):
+    return '.'.join(value for value in [
+        user_agent['major'],
+        user_agent['minor'],
+        user_agent.get('patch'),
+    ] if value) or None
+
+
 def inject_browser_context(data, user_agent):
     ua = user_agent['user_agent']
     try:
@@ -54,10 +65,7 @@ def inject_browser_context(data, user_agent):
             return
         data['contexts']['browser'] = {
             'name': ua['family'],
-            'version': '.'.join(value for value in [
-                ua['major'],
-                ua['minor'],
-            ] if value),
+            'version': _get_version(ua),
         }
     except KeyError:
         pass
@@ -70,11 +78,7 @@ def inject_os_context(data, user_agent):
             return
         data['contexts']['os'] = {
             'name': ua['family'],
-            'version': '.'.join(value for value in [
-                ua['major'],
-                ua['minor'],
-                ua['patch'],
-            ] if value),
+            'version': _get_version(ua),
         }
     except KeyError:
         pass
@@ -113,6 +117,4 @@ class JavascriptPlugin(Plugin2):
         return False
 
     def get_event_preprocessors(self, **kwargs):
-        if not settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT:
-            return []
         return [preprocess_event]
diff --git a/src/sentry/plugins/sentry_useragents/models.py b/src/sentry/plugins/sentry_useragents/models.py
index 6ef1ace7dd..591de44e17 100644
--- a/src/sentry/plugins/sentry_useragents/models.py
+++ b/src/sentry/plugins/sentry_useragents/models.py
@@ -24,7 +24,7 @@ class UserAgentPlugin(TagPlugin):
         contexts = event.interfaces.get('contexts')
         # disable tagging if contexts are present
         if contexts:
-            return
+            return []
 
         http = event.interfaces.get('sentry.interfaces.Http')
         if not http:
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 84b53cface..a4b75d9558 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -21,6 +21,34 @@ def load_fixture(name):
 
 
 class JavascriptIntegrationTest(TestCase):
+    def test_adds_contexts(self):
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'sentry.interfaces.Http': {
+                'url': 'http://example.com',
+                'headers': [
+                    ['User-Agent', 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36'],
+                ],
+            }
+        }
+
+        resp = self._postWithHeader(data)
+        assert resp.status_code, 200
+
+        event = Event.objects.get()
+        contexts = event.interfaces['contexts'].to_json()
+        assert contexts.get('os') == {
+            'name': 'Windows 8',
+            'type': 'os',
+        }
+        assert contexts['browser'] == {
+            'name': 'Chrome',
+            'type': 'browser',
+            'version': '28.0.1500',
+        }
+        assert contexts.get('device') is None
+
     @patch('sentry.lang.javascript.processor.fetch_file')
     def test_source_expansion(self, mock_fetch_file):
         data = {
