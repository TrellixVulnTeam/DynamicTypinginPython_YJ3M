commit 1ede77317a5367dff4a2ef1687f9a5a09a81f518
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Oct 29 15:39:27 2018 -0700

    fix(discover): Fix datetime field handling in conditions (#10298)
    
    Handle "timestamp" and "received" fields as datetime rather than
    strings. Do not allow LIKE and NOT LIKE conditions on these fields,
    cast values to date time format.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
index 8d1a9cf505..b50a969ec2 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
@@ -71,7 +71,7 @@ export default class Condition extends React.Component {
     const stringOnlyOperators = new Set(['LIKE', 'NOT LIKE']);
 
     return CONDITION_OPERATORS.filter(operator => {
-      if (colType === 'number') {
+      if (colType === 'number' || colType === 'datetime') {
         return !stringOnlyOperators.has(operator);
       }
 
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
index efb785d9a9..6df94a984e 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
@@ -1,3 +1,5 @@
+import moment from 'moment';
+
 import {CONDITION_OPERATORS} from '../data';
 
 const specialConditions = new Set(['IS NULL', 'IS NOT NULL']);
@@ -18,9 +20,12 @@ export function isValidCondition(condition, cols) {
   const isColValid = columns.has(condition[0]);
   const isOperatorValid = allOperators.has(condition[1]);
 
+  const colType = (cols.find(col => col.name === condition[0]) || {}).type;
+
   const isValueValid =
     specialConditions.has(condition[1]) ||
-    typeof condition[2] === (cols.find(col => col.name === condition[0]) || {}).type;
+    (colType === 'datetime' && condition[2] !== null) ||
+    colType === typeof condition[2];
 
   return isColValid && isOperatorValid && isValueValid;
 }
@@ -93,6 +98,11 @@ export function getExternal(internal, columns) {
         external[2] = false;
       }
     }
+
+    if (type === 'datetime') {
+      const date = moment.utc(external[2]);
+      external[2] = date.isValid() ? date.format() : null;
+    }
   }
 
   return external;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index cfe40dacad..a0f53ae86b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -2,6 +2,7 @@ const TYPES = {
   STRING: 'string',
   NUMBER: 'number',
   BOOLEAN: 'boolean',
+  DATETIME: 'datetime',
 };
 
 export const PROMOTED_TAGS = [
@@ -37,8 +38,8 @@ export const COLUMNS = [
   {name: 'platform', type: TYPES.STRING},
   {name: 'message', type: TYPES.STRING},
   {name: 'primary_hash', type: TYPES.STRING},
-  {name: 'timestamp', type: TYPES.STRING}, // TODO: handling datetime as string for now
-  {name: 'received', type: TYPES.STRING}, // TODO: handling datetime as string for now
+  {name: 'timestamp', type: TYPES.DATETIME},
+  {name: 'received', type: TYPES.DATETIME},
 
   {name: 'user_id', type: TYPES.STRING},
   {name: 'username', type: TYPES.STRING},
diff --git a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
index d322d89d27..df59b4cac3 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
@@ -30,6 +30,7 @@ describe('Condition', function() {
       const columns = [
         {name: 'col1', type: 'string'},
         {name: 'col2', type: 'number'},
+        {name: 'col3', type: 'datetime'},
         {name: 'exception_stacks.type', type: 'string'},
       ];
       wrapper = mount(
@@ -55,6 +56,19 @@ describe('Condition', function() {
       expect(options[0]).toEqual({value: 'col2 >', label: 'col2 >'});
     });
 
+    it('renders operator options for datetime column', function() {
+      const options = wrapper.instance().filterOptions([], 'col3');
+      expect(options).toHaveLength(8);
+      expect(options[0]).toEqual({value: 'col3 >', label: 'col3 >'});
+      expect(options[1]).toEqual({value: 'col3 <', label: 'col3 <'});
+      expect(options[2]).toEqual({value: 'col3 >=', label: 'col3 >='});
+      expect(options[3]).toEqual({value: 'col3 <=', label: 'col3 <='});
+      expect(options[4]).toEqual({value: 'col3 =', label: 'col3 ='});
+      expect(options[5]).toEqual({value: 'col3 !=', label: 'col3 !='});
+      expect(options[6]).toEqual({value: 'col3 IS NULL', label: 'col3 IS NULL'});
+      expect(options[7]).toEqual({value: 'col3 IS NOT NULL', label: 'col3 IS NOT NULL'});
+    });
+
     it('limits operators to = and != for array fields', function() {
       const options = wrapper.instance().filterOptions([], 'exception_stacks.type');
       expect(options).toHaveLength(2);
diff --git a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
index fd056f2eeb..1c91adffc2 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
@@ -50,6 +50,10 @@ describe('Conditions', function() {
     conditionList.forEach(({internal, external}) => {
       expect(getExternal(internal, COLUMNS)).toEqual(external);
     });
+
+    // datetime fields are expanded
+    const expected = ['received', '=', '2018-05-05T00:00:00Z'];
+    expect(getExternal('received = 2018-05-05', COLUMNS)).toEqual(expected);
   });
 
   it('getInternal()', function() {
