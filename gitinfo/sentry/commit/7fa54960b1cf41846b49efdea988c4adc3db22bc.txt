commit 7fa54960b1cf41846b49efdea988c4adc3db22bc
Author: Mark Story <mark@sentry.io>
Date:   Tue Jan 14 13:12:45 2020 -0500

    fix(discover2) Scale results up when sampling is enabled (#16441)
    
    The results in production when sampling is on are far too low. With
    a sampling of 0.1 (turbo mode) the results appear to be 1/10th of what
    they should be. Multiplying results back up should get us closer to 100%
    in the tag bars vs. the <10% we have today.

diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index 295907f550..4142654245 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -474,9 +474,12 @@ def get_facets(query, params, limit=10, referrer=None):
         return []
 
     # TODO(mark) Make the sampling rate scale based on the result size and scaling factor in
-    # sentry.options.
-    # To test the lowest acceptable sampling rate, we use turbo mode.
-    turbo_values = key_names["data"][0]["count"] > 10000
+    # sentry.options. To test the lowest acceptable sampling rate, we use 0.1 which
+    # is equivalent to turbo. We don't use turbo though as we need to re-scale data, and
+    # using turbo could cause results to be wrong if the value of turbo is changed in snuba.
+    sample_rate = 0.1 if key_names["data"][0]["count"] > 10000 else None
+    # Rescale the results if we're sampling
+    multiplier = 1 / sample_rate if sample_rate is not None else 1
 
     fetch_projects = False
     if len(params.get("project_id", [])) > 1:
@@ -496,10 +499,13 @@ def get_facets(query, params, limit=10, referrer=None):
             orderby="-count",
             dataset=Dataset.Discover,
             referrer=referrer,
-            turbo=turbo_values,
+            sample=sample_rate,
         )
         results.extend(
-            [FacetResult("project", r["project_id"], r["count"]) for r in project_values["data"]]
+            [
+                FacetResult("project", r["project_id"], int(r["count"]) * multiplier)
+                for r in project_values["data"]
+            ]
         )
 
     # Get tag counts for our top tags. Fetching them individually
@@ -518,8 +524,13 @@ def get_facets(query, params, limit=10, referrer=None):
             limit=TOP_VALUES_DEFAULT_LIMIT,
             dataset=Dataset.Discover,
             referrer=referrer,
-            turbo=turbo_values,
+            sample=sample_rate,
+        )
+        results.extend(
+            [
+                FacetResult(tag_name, r[tag], int(r["count"]) * multiplier)
+                for r in tag_values["data"]
+            ]
         )
-        results.extend([FacetResult(tag_name, r[tag], int(r["count"])) for r in tag_values["data"]])
 
     return results
