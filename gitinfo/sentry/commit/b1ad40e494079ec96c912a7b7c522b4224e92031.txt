commit b1ad40e494079ec96c912a7b7c522b4224e92031
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jun 3 12:33:22 2019 -0700

    ref(ui): Refactor dropdown menus into `<DropdownBubble>` (#13464)
    
    This is the presentational menu that appears when you click something.

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index ee69c578c5..c0ab01cb7d 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -4,7 +4,6 @@ import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
-import {StyledMenu} from 'app/components/dropdownAutoCompleteMenu';
 import {assignToUser, assignToActor, clearAssignment} from 'app/actionCreators/group';
 import {t} from 'app/locale';
 import {valueIsEqual, buildUserId, buildTeamId} from 'app/utils';
@@ -12,6 +11,7 @@ import ActorAvatar from 'app/components/actorAvatar';
 import Avatar from 'app/components/avatar';
 import ConfigStore from 'app/stores/configStore';
 import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownBubble from 'app/components/dropdownBubble';
 import GroupStore from 'app/stores/groupStore';
 import Highlight from 'app/components/highlight';
 import InlineSvg from 'app/components/inlineSvg';
@@ -343,7 +343,7 @@ const AssigneeSelector = styled(AssigneeSelectorComponent)`
 
   /* manually align menu underneath dropdown caret */
   /* stylelint-disable-next-line no-duplicate-selectors */
-  ${StyledMenu} {
+  ${DropdownBubble} {
     right: -14px;
   }
 `;
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
index f03f4110a3..90aeddda39 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -3,13 +3,14 @@ import {Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import _ from 'lodash';
-import styled, {css} from 'react-emotion';
+import styled from 'react-emotion';
 
 import {t} from 'app/locale';
 import AutoComplete from 'app/components/autoComplete';
+import DropdownBubble from 'app/components/dropdownBubble';
 import Input from 'app/views/settings/components/forms/controls/input';
-import space from 'app/styles/space';
 import LoadingIndicator from 'app/components/loadingIndicator';
+import space from 'app/styles/space';
 
 const ItemObjectPropType = {
   value: PropTypes.any,
@@ -403,7 +404,7 @@ class DropdownAutoCompleteMenu extends React.Component {
               })}
 
               {isOpen && (
-                <StyledMenu
+                <BubbleWithMinWidth
                   className={className}
                   {...getMenuProps({
                     ...menuProps,
@@ -462,7 +463,7 @@ class DropdownAutoCompleteMenu extends React.Component {
                       <LabelWithPadding>{renderedFooter}</LabelWithPadding>
                     )}
                   </div>
-                </StyledMenu>
+                </BubbleWithMinWidth>
               )}
             </AutoCompleteRoot>
           );
@@ -472,71 +473,6 @@ class DropdownAutoCompleteMenu extends React.Component {
   }
 }
 
-/**
- * If `blendCorner` is false, then we apply border-radius to all corners
- *
- * Otherwise apply radius to opposite side of `alignMenu`
- */
-const getMenuBorderRadius = ({blendCorner, alignMenu, theme}) => {
-  const radius = theme.borderRadius;
-  if (!blendCorner) {
-    return css`
-      border-radius: ${radius};
-    `;
-  }
-
-  const hasTopLeftRadius = alignMenu !== 'left';
-  const hasTopRightRadius = !hasTopLeftRadius;
-
-  return css`
-    border-radius: ${hasTopLeftRadius ? radius : 0} ${hasTopRightRadius ? radius : 0}
-      ${radius} ${radius};
-  `;
-};
-
-const getMenuArrow = ({menuWithArrow, alignMenu}) => {
-  if (!menuWithArrow) {
-    return '';
-  }
-  const alignRight = alignMenu === 'right';
-
-  return css`
-    top: 32px;
-
-    &::before {
-      width: 0;
-      height: 0;
-      border-left: 9px solid transparent;
-      border-right: 9px solid transparent;
-      border-bottom: 9px solid rgba(52, 60, 69, 0.35);
-      content: '';
-      display: block;
-      position: absolute;
-      top: -9px;
-      left: 10px;
-      z-index: -2;
-      ${alignRight && 'left: auto;'};
-      ${alignRight && 'right: 10px;'};
-    }
-
-    &:after {
-      width: 0;
-      height: 0;
-      border-left: 8px solid transparent;
-      border-right: 8px solid transparent;
-      border-bottom: 8px solid #fff;
-      content: '';
-      display: block;
-      position: absolute;
-      top: -8px;
-      left: 11px;
-      z-index: -1;
-      ${alignRight && 'left: auto;'};
-      ${alignRight && 'right: 11px;'};
-    }
-  `;
-};
-
 const AutoCompleteRoot = styled(({isOpen, ...props}) => <div {...props} />)`
   position: relative;
   display: inline-block;
@@ -629,25 +565,6 @@ const GroupLabel = styled('div')`
   padding: ${space(0.25)} ${space(1)};
 `;
 
-const StyledMenu = styled('div')`
-  background: #fff;
-  border: 1px solid ${p => p.theme.borderDark};
-  position: absolute;
-  top: calc(100% - 1px);
-  min-width: 250px;
-  z-index: ${p =>
-    p.theme.zIndex.dropdownAutocomplete
-      .menu}; /* This is needed to be able to cover e.g. pagination buttons, but also be below dropdown actor button's zindex */
-  right: 0;
-  box-shadow: ${p => p.theme.dropShadowLight};
-  overflow: hidden;
-
-  ${getMenuBorderRadius};
-  ${({alignMenu}) => (alignMenu === 'left' ? 'left: 0;' : '')};
-
-  ${getMenuArrow};
-`;
-
 const StyledItemList = styled('div')`
   max-height: ${p =>
     typeof p.maxHeight === 'number' ? `${p.maxHeight}px` : p.maxHeight};
@@ -661,6 +578,10 @@ const EmptyMessage = styled('div')`
   text-transform: none;
 `;
 
+const BubbleWithMinWidth = styled(DropdownBubble)`
+  min-width: 250px;
+`;
+
 export default DropdownAutoCompleteMenu;
 
-export {StyledMenu, AutoCompleteRoot};
+export {AutoCompleteRoot};
diff --git a/src/sentry/static/sentry/app/components/dropdownBubble.jsx b/src/sentry/static/sentry/app/components/dropdownBubble.jsx
new file mode 100644
index 0000000000..d95fe602d1
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/dropdownBubble.jsx
@@ -0,0 +1,97 @@
+import styled, {css} from 'react-emotion';
+
+/**
+ * If `blendCorner` is false, then we apply border-radius to all corners
+ *
+ * Otherwise apply radius to opposite side of `alignMenu` *unles it is fixed width*
+ *
+ * @param {Object} options These are "props" that get passed down (I don't think there's a good way to define propTypes otherwise)
+ * @param {Boolean} options.blendWithActor If this is true, will make corners blend with its opener (so no border radius)
+ * @param {Boolean} options.blendCorner If this is true, will make a single corner blended with actor (depends on anchor orientation)
+ * @param {String} options.alignMenu Can align the menu either "left" or "right"
+ * @param {String} options.width The width of the menu
+ */
+const getMenuBorderRadius = ({blendWithActor, blendCorner, alignMenu, width, theme}) => {
+  const radius = theme.borderRadius;
+  if (!blendCorner) {
+    return css`
+      border-radius: ${radius};
+    `;
+  }
+
+  // If menu width is the same width as the control
+  const isFullWidth = width === '100%';
+
+  // No top border radius if widths match
+  const hasTopLeftRadius = !blendWithActor && !isFullWidth && alignMenu !== 'left';
+  const hasTopRightRadius = !blendWithActor && !isFullWidth && !hasTopLeftRadius;
+
+  return css`
+    border-radius: ${hasTopLeftRadius ? radius : 0} ${hasTopRightRadius ? radius : 0}
+      ${radius} ${radius};
+  `;
+};
+
+const getMenuArrow = ({menuWithArrow, alignMenu}) => {
+  if (!menuWithArrow) {
+    return '';
+  }
+  const alignRight = alignMenu === 'right';
+
+  return css`
+    top: 32px;
+
+    &::before {
+      width: 0;
+      height: 0;
+      border-left: 9px solid transparent;
+      border-right: 9px solid transparent;
+      border-bottom: 9px solid rgba(52, 60, 69, 0.35);
+      content: '';
+      display: block;
+      position: absolute;
+      top: -9px;
+      left: 10px;
+      z-index: -2;
+      ${alignRight && 'left: auto;'};
+      ${alignRight && 'right: 10px;'};
+    }
+
+    &:after {
+      width: 0;
+      height: 0;
+      border-left: 8px solid transparent;
+      border-right: 8px solid transparent;
+      border-bottom: 8px solid #fff;
+      content: '';
+      display: block;
+      position: absolute;
+      top: -8px;
+      left: 11px;
+      z-index: -1;
+      ${alignRight && 'left: auto;'};
+      ${alignRight && 'right: 11px;'};
+    }
+  `;
+};
+
+const DropdownBubble = styled('div')`
+  background: ${p => p.theme.background};
+  border: 1px solid ${p => p.theme.borderDark};
+  position: absolute;
+  top: calc(100% - 1px);
+  ${p => (p.width ? `width: ${p.width}` : '')};
+  z-index: ${p =>
+    p.theme.zIndex.dropdownAutocomplete
+      .menu}; /* This is needed to be able to cover e.g. pagination buttons, but also be below dropdown actor button's zindex */
+  right: 0;
+  box-shadow: ${p => p.theme.dropShadowLight};
+  overflow: hidden;
+
+  ${getMenuBorderRadius};
+  ${({alignMenu}) => (alignMenu === 'left' ? 'left: 0;' : '')};
+
+  ${getMenuArrow};
+`;
+
+export default DropdownBubble;
diff --git a/src/sentry/static/sentry/app/components/dropdownControl.jsx b/src/sentry/static/sentry/app/components/dropdownControl.jsx
index d3284681c8..aff8743e12 100644
--- a/src/sentry/static/sentry/app/components/dropdownControl.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownControl.jsx
@@ -1,10 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-
 import styled from 'react-emotion';
+
+import DropdownBubble from 'app/components/dropdownBubble';
 import DropdownButton from 'app/components/dropdownButton';
-import MenuItem from 'app/components/menuItem';
 import DropdownMenu from 'app/components/dropdownMenu';
+import MenuItem from 'app/components/menuItem';
 import space from 'app/styles/space';
 
 /*
@@ -31,10 +32,12 @@ class DropdownControl extends React.Component {
     alignRight: PropTypes.bool,
     // Props to pass to DropdownButton
     buttonProps: PropTypes.object,
+    // This makes the dropdown menu blend (e.g. corners are not rounded) with its
+    // actor (opener) component
+    blendWithActor: PropTypes.bool,
   };
 
   static defaultProps = {
-    menuOffset: '39px',
     alwaysRenderMenu: true,
     menuWidth: '100%',
   };
@@ -55,7 +58,14 @@ class DropdownControl extends React.Component {
   }
 
   render() {
-    const {children, alwaysRenderMenu, alignRight, menuOffset, menuWidth} = this.props;
+    const {
+      children,
+      alwaysRenderMenu,
+      alignRight,
+      menuOffset,
+      menuWidth,
+      blendWithActor,
+    } = this.props;
 
     return (
       <Container>
@@ -66,10 +76,12 @@ class DropdownControl extends React.Component {
                 {this.renderButton(isOpen, getActorProps)}
                 <MenuContainer
                   {...getMenuProps({isStyled: true})}
-                  alignRight={alignRight}
-                  menuWidth={menuWidth}
+                  alignMenu={alignRight ? 'right' : 'left'}
+                  width={menuWidth}
                   menuOffset={menuOffset}
                   isOpen={isOpen}
+                  blendCorner
+                  blendWithActor={blendWithActor}
                 >
                   {children}
                 </MenuContainer>
@@ -95,23 +107,10 @@ const StyledDropdownButton = styled(
   font-weight: normal;
 `;
 
-const MenuContainer = styled('ul')`
+const MenuContainer = styled(DropdownBubble.withComponent('ul'))`
   list-style: none;
-  width: ${p => p.menuWidth};
-
-  position: absolute;
-  top: ${p => p.menuOffset};
-  ${p => p.alignRight && 'right: 0'};
   padding: 0;
   margin: 0;
-  z-index: ${p => p.theme.zIndex.dropdownAutocomplete.menu};
-
-  background: ${p => p.theme.background};
-  border-radius: ${p => p.theme.borderRadiusBottom};
-  box-shadow: ${p => p.theme.dropShadowLight};
-  border: 1px solid ${p => p.theme.borderDark};
-  overflow: hidden;
-
   display: ${p => (p.isOpen ? 'block' : 'none')};
 `;
 
diff --git a/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
index b5989e8296..8b9d5bb98b 100644
--- a/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
@@ -82,6 +82,7 @@ export default class OrganizationSavedSearchSelector extends React.Component {
       <Container>
         <DropdownControl
           menuWidth="375px"
+          blendWithActor
           button={({isOpen, getActorProps}) => (
             <StyledDropdownButton {...getActorProps({isStyled: true})} isOpen={isOpen}>
               <ButtonTitle>{this.getTitle()}</ButtonTitle>
diff --git a/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap b/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
index 5aaa852d19..d618cb3622 100644
--- a/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
@@ -57,7 +57,7 @@ exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
             className="css-6v04yn-AutoCompleteRoot ejumqxq0"
           >
             Click Me!
-            <StyledMenu
+            <BubbleWithMinWidth
               blendCorner={true}
               innerRef={[Function]}
               onClick={[Function]}
@@ -66,7 +66,7 @@ exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
               onMouseLeave={[Function]}
             >
               <div
-                className="css-awg01w-StyledMenu-getMenuBorderRadius ejumqxq8"
+                className="css-1w57aoy-DropdownBubble-getMenuBorderRadius-BubbleWithMinWidth ejumqxq10"
                 onClick={[Function]}
                 onMouseDown={[Function]}
                 onMouseEnter={[Function]}
@@ -119,7 +119,7 @@ exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
                     maxHeight={300}
                   >
                     <div
-                      className="css-5kh8cy-StyledItemList ejumqxq9"
+                      className="css-5kh8cy-StyledItemList ejumqxq8"
                       data-test-id="autocomplete-list"
                     >
                       <LabelWithBorder
@@ -171,7 +171,7 @@ exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
                   </StyledItemList>
                 </div>
               </div>
-            </StyledMenu>
+            </BubbleWithMinWidth>
           </div>
         </Component>
       </AutoCompleteRoot>
@@ -236,7 +236,7 @@ exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
             className="css-6v04yn-AutoCompleteRoot ejumqxq0"
           >
             Click Me!
-            <StyledMenu
+            <BubbleWithMinWidth
               blendCorner={true}
               innerRef={[Function]}
               onClick={[Function]}
@@ -245,7 +245,7 @@ exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
               onMouseLeave={[Function]}
             >
               <div
-                className="css-awg01w-StyledMenu-getMenuBorderRadius ejumqxq8"
+                className="css-1w57aoy-DropdownBubble-getMenuBorderRadius-BubbleWithMinWidth ejumqxq10"
                 onClick={[Function]}
                 onMouseDown={[Function]}
                 onMouseEnter={[Function]}
@@ -298,7 +298,7 @@ exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
                     maxHeight={300}
                   >
                     <div
-                      className="css-5kh8cy-StyledItemList ejumqxq9"
+                      className="css-5kh8cy-StyledItemList ejumqxq8"
                       data-test-id="autocomplete-list"
                     >
                       <AutoCompleteItem
@@ -350,7 +350,7 @@ exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
                   </StyledItemList>
                 </div>
               </div>
-            </StyledMenu>
+            </BubbleWithMinWidth>
           </div>
         </Component>
       </AutoCompleteRoot>
diff --git a/tests/js/spec/components/dropdownAutoComplete.spec.jsx b/tests/js/spec/components/dropdownAutoComplete.spec.jsx
index a02624665f..bb9e2c919c 100644
--- a/tests/js/spec/components/dropdownAutoComplete.spec.jsx
+++ b/tests/js/spec/components/dropdownAutoComplete.spec.jsx
@@ -35,10 +35,10 @@ describe('DropdownAutoComplete', function() {
       routerContext
     );
     wrapper.find('Actor[role="button"]').simulate('click');
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
 
     wrapper.find('Actor[role="button"]').simulate('click');
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
   });
 
   it('toggles dropdown menu when actor is clicked', function() {
@@ -49,8 +49,8 @@ describe('DropdownAutoComplete', function() {
       routerContext
     );
     wrapper.find('Actor[role="button"]').simulate('click');
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
     wrapper.find('Actor[role="button"]').simulate('click');
-    expect(wrapper.find('StyledMenu')).toHaveLength(0);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(0);
   });
 });
diff --git a/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx b/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
index 7c8b6403c4..fbcb8c5a10 100644
--- a/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
+++ b/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
@@ -30,59 +30,59 @@ describe('Settings Breadcrumb Dropdown', function() {
     wrapper.find('Crumb').simulate('mouseEnter');
     jest.runAllTimers();
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
 
     wrapper.find('Crumb').simulate('mouseLeave');
     // wonder what happens when this arg is negative o_O
     jest.advanceTimersByTime(CLOSE_DELAY - 10);
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
     jest.advanceTimersByTime(10);
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(0);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(0);
   });
 
   it('closes immediately after selecting an item', function() {
     wrapper.find('Crumb').simulate('mouseEnter');
     jest.runAllTimers();
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
 
     wrapper
       .find('AutoCompleteItem')
       .first()
       .simulate('click');
-    expect(wrapper.find('StyledMenu')).toHaveLength(0);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(0);
   });
 
   it('stays open when hovered over crumb and then into dropdown menu', function() {
     wrapper.find('Crumb').simulate('mouseEnter');
     jest.runAllTimers();
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
 
     wrapper.find('Crumb').simulate('mouseLeave');
-    wrapper.find('StyledMenu').simulate('mouseEnter');
+    wrapper.find('BubbleWithMinWidth').simulate('mouseEnter');
     jest.runAllTimers();
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
   });
 
   it('closes after entering dropdown and then leaving dropdown', function() {
     wrapper.find('Crumb').simulate('mouseEnter');
     jest.runAllTimers();
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
 
     wrapper.find('Crumb').simulate('mouseLeave');
-    wrapper.find('StyledMenu').simulate('mouseEnter');
+    wrapper.find('BubbleWithMinWidth').simulate('mouseEnter');
     jest.runAllTimers();
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(1);
 
-    wrapper.find('StyledMenu').simulate('mouseLeave');
+    wrapper.find('BubbleWithMinWidth').simulate('mouseLeave');
     jest.runAllTimers();
     wrapper.update();
-    expect(wrapper.find('StyledMenu')).toHaveLength(0);
+    expect(wrapper.find('BubbleWithMinWidth')).toHaveLength(0);
   });
 });
