commit 81e0652fac6fd42af21f7ef41f99070bd0dad6c8
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Aug 27 14:17:45 2015 -0700

    Render headers properly now that API returns tuples

diff --git a/src/sentry/static/sentry/app/components/interfaces/request.jsx b/src/sentry/static/sentry/app/components/interfaces/request.jsx
index 7e950021aa..d1417b9942 100644
--- a/src/sentry/static/sentry/app/components/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/request.jsx
@@ -1,24 +1,27 @@
 import React from "react";
-import jQuery from "jquery";
 import ConfigStore from "../../stores/configStore";
 import ClippedBox from "../../components/clippedBox";
 import GroupEventDataSection from "../eventDataSection";
 import PropTypes from "../../proptypes";
-import {defined, objectIsEmpty} from "../../utils";
+import {objectIsEmpty} from "../../utils";
+import {getCurlCommand} from "./utils";
 
-var DefinitionList = React.createClass({
+export var DefinitionList = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired
   },
 
   render() {
-    var children = [];
-    var data = this.props.data;
-    for (var key in data) {
-      children.push(<dt key={'dt-' + key }>{key}</dt>);
-      children.push(<dd key={'dd-' + key }><pre>{data[key]}</pre></dd>);
-    }
-    return <dl className="vars">{children}</dl>;
+    return (
+      <dl className="vars">
+        {this.props.data.map(function ([key, value]) {
+            return [
+              <dt key={'dt-' + key }>{key}</dt>,
+              <dd key={'dd-' + key }><pre>{value}</pre></dd>
+            ];
+        })}
+      </dl>
+    );
   }
 });
 
@@ -40,51 +43,14 @@ var RequestActions = React.createClass({
   }
 });
 
-var CurlHttpContent = React.createClass({
-  escapeQuotes(v) {
-    return v.replace(/"/g, '\\"');
-  },
+export var RichHttpContent = React.createClass({
 
-  // TODO(dcramer): support cookies
-  getCurlCommand() {
-    var data = this.props.data;
-    var result = 'curl';
-    if (defined(data.method) && data.method !== 'GET') {
-      result += ' \\\n -X ' + data.method;
-    }
-    if (defined(data.headers['Accept-Encoding']) && data.headers['Accept-Encoding'].indexOf('gzip') === 1) {
-      result += ' \\\n --compressed';
-    }
-    for (var key in data.headers) {
-      result += ' \\\n -H "' + key + ': ' + this.escapeQuotes(data.headers[key]) + '"';
-    }
-    if (typeof data.data === "string") {
-      result += ' \\\n --data "' + this.escapeQuotes(data.data) + '"';
-    } else if (defined(data.data)) {
-      result += ' \\\n --data "' + this.escapeQuotes(jQuery.param(data.data)) + '"';
-    }
-    result += ' \\\n ' + data.url;
-    if (defined(data.query) && data.query) {
-      result += '?' + data.query;
-    }
-    return result;
+  objectToTupleArray(obj) {
+    return Object.keys(obj).map((k) => [k, obj[k]]);
   },
 
-  render() {
-    return <pre>{this.getCurlCommand()}</pre>;
-  }
-});
-
-
-var RichHttpContent = React.createClass({
   render(){
-    var data = this.props.data;
-
-    var headers = [];
-    for (var key in data.headers) {
-      headers.push(<dt key={'dt-' + key }>{key}</dt>);
-      headers.push(<dd key={'dd-' + key }><pre>{data.headers[key]}</pre></dd>);
-    }
+    let data = this.props.data;
 
     return (
       <div>
@@ -105,7 +71,7 @@ var RichHttpContent = React.createClass({
         }
         {data.cookies &&
           <ClippedBox title="Cookies" defaultCollapsed>
-            <pre>{JSON.stringify(data.cookies, null, 2)}</pre>
+            <DefinitionList data={data.cookies} />
           </ClippedBox>
         }
         {!objectIsEmpty(data.headers) &&
@@ -115,9 +81,7 @@ var RichHttpContent = React.createClass({
         }
         {!objectIsEmpty(data.env) &&
           <ClippedBox title="Environment" defaultCollapsed>
-            <dl className="vars">
-              <DefinitionList data={data.env} />
-            </dl>
+            <DefinitionList data={this.objectToTupleArray(data.env)}/>
           </ClippedBox>
         }
       </div>
@@ -200,7 +164,7 @@ var RequestInterface = React.createClass({
           title={title}
           wrapTitle={false}>
         {view === "curl" ?
-          <CurlHttpContent data={data} />
+          <pre>{getCurlCommand(data)}</pre>
         :
           <RichHttpContent data={data} />
         }
diff --git a/src/sentry/static/sentry/app/components/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/interfaces/utils.jsx
new file mode 100644
index 0000000000..297fbc91f5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/interfaces/utils.jsx
@@ -0,0 +1,37 @@
+import {defined} from "../../utils";
+
+export function escapeQuotes(v) {
+  return v.replace(/"/g, '\\"');
+}
+
+// TODO(dcramer): support cookies
+export function getCurlCommand(data) {
+  var result = 'curl';
+
+  if (defined(data.method) && data.method !== 'GET') {
+    result += ' \\\n -X ' + data.method;
+  }
+
+  // TODO(benvinegar): just gzip? what about deflate?
+  let compressed = data.headers.find(h => h[0] === 'Accept-Encoding' && h[1].indexOf('gzip') !== -1);
+  if (compressed) {
+    result += ' \\\n --compressed';
+  }
+
+  for (let header of data.headers) {
+    result += ' \\\n -H "' + header[0] + ': ' + escapeQuotes(header[1]) + '"';
+  }
+
+  if (typeof data.data === "string") {
+    result += ' \\\n --data "' + escapeQuotes(data.data) + '"';
+  } else if (defined(data.data)) {
+    result += ' \\\n --data "' + escapeQuotes(jQuery.param(data.data)) + '"';
+  }
+
+  result += ' \\\n ' + data.url;
+
+  if (defined(data.query) && data.query) {
+    result += '?' + data.query;
+  }
+  return result;
+}
diff --git a/tests/js/spec/components/interfaces/request.spec.jsx b/tests/js/spec/components/interfaces/request.spec.jsx
new file mode 100644
index 0000000000..1a2c8def1b
--- /dev/null
+++ b/tests/js/spec/components/interfaces/request.spec.jsx
@@ -0,0 +1,61 @@
+import React from "react/addons";
+var TestUtils = React.addons.TestUtils;
+import stubReactComponents from "../../../helpers/stubReactComponent";
+
+import {RichHttpContent, DefinitionList} from "app/components/interfaces/request";
+import ClippedBox from "app/components/clippedBox";
+
+describe("request", function() {
+  beforeEach(function () {
+    this.sandbox = sinon.sandbox.create();
+  });
+
+  afterEach(function () {
+    this.sandbox.restore();
+  });
+
+  describe("RichHttpContent", function () {
+    beforeEach(function () {
+      stubReactComponents(this.sandbox, [ClippedBox, DefinitionList]);
+    });
+
+    describe("objectToTupleArray", function () {
+      it("should convert a key/value object to an array of key/value tuples", function () {
+        var data = {
+          query: '',
+          data: '',
+          headers: [],
+          cookies: [],
+          env: {}
+        };
+
+        var elem = TestUtils.renderIntoDocument(<RichHttpContent data={data} />);
+        expect(elem.objectToTupleArray({
+          foo: 'bar',
+          bar: 'baz'
+        })).to.eql([
+          ['foo', 'bar'], ['bar', 'baz']
+        ]);
+      });
+    });
+  });
+
+  describe('DefinitionList', function () {
+    describe("render", function () {
+      it("should render a definition list of key/value pairs", function () {
+        var data = [
+          ['a', 'x'], ['b', 'y']
+        ];
+        var elem = TestUtils.renderIntoDocument(<DefinitionList data={data} />);
+
+        var dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
+        expect(dts[0].getDOMNode().textContent).to.eql('a');
+        expect(dts[1].getDOMNode().textContent).to.eql('b');
+
+        var dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
+        expect(dds[0].getDOMNode().textContent).to.eql('x');
+        expect(dds[1].getDOMNode().textContent).to.eql('y');
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/components/interfaces/utils.spec.jsx b/tests/js/spec/components/interfaces/utils.spec.jsx
new file mode 100644
index 0000000000..5014cdaa75
--- /dev/null
+++ b/tests/js/spec/components/interfaces/utils.spec.jsx
@@ -0,0 +1,82 @@
+import {getCurlCommand} from "app/components/interfaces/utils";
+
+
+describe("components/interfaces/utils", function() {
+  describe("getCurlCommand()", function() {
+    it("should convert an http request object to an equivalent unix curl command string", function () {
+      getCurlCommand({
+        "cookies": [
+          [
+            "foo",
+            "bar"
+          ],
+          [
+            "biz",
+            "baz"
+          ]
+        ],
+        "url": "http:\/\/example.com\/foo",
+        "headers": [
+          [
+            "Content-Type",
+            "application\/json"
+          ],
+          [
+            "Referer",
+            "http:\/\/example.com"
+          ],
+          [
+            "User-Agent",
+            "Mozilla\/5.0 (Windows NT 6.2; WOW64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/28.0.1500.72 Safari\/537.36"
+          ]
+        ],
+        "env": {
+          "ENV": "prod"
+        },
+        "fragment": "",
+        "query": "foo=bar",
+        "data": "{\"hello\": \"world\"}",
+        "method": "GET"
+      }).should.eql('curl \\\n' +
+        ' -H "Content-Type: application/json" \\\n' +
+        ' -H "Referer: http://example.com" \\\n' +
+        ' -H "User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36" \\\n' +
+        ' --data "{\\"hello\\": \\"world\\"}" \\\n' +
+        ' http://example.com/foo?foo=bar'
+      );
+
+      // --compressed (because Accept-Encoding: gzip)
+      getCurlCommand({
+        "url": "http:\/\/example.com\/foo",
+        "headers": [
+          [
+            "Content-Type",
+            "application\/json"
+          ],
+          [
+            "Referer",
+            "http:\/\/example.com"
+          ],
+          [
+            "Accept-Encoding",
+            "gzip"
+          ]
+        ],
+        "env": {
+          "ENV": "prod"
+        },
+        "fragment": "",
+        "query": "foo=bar",
+        "data": "{\"hello\": \"world\"}",
+        "method": "GET"
+      }).should.eql('curl \\\n' +
+        ' --compressed \\\n' +
+        ' -H "Content-Type: application/json" \\\n' +
+        ' -H "Referer: http://example.com" \\\n' +
+        ' -H "Accept-Encoding: gzip" \\\n' +
+        ' --data "{\\"hello\\": \\"world\\"}" \\\n' +
+        ' http://example.com/foo?foo=bar'
+      );
+    });
+  });
+});
