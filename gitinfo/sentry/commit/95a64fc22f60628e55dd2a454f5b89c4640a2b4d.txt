commit 95a64fc22f60628e55dd2a454f5b89c4640a2b4d
Author: Billy Vong <billy@sentry.io>
Date:   Fri Dec 1 14:39:13 2017 -0800

    fix teams selector, scrub ip address, fix emptying certain project settings fields + add tests

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index d66af216ac..fdf028a2c4 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -91,7 +91,7 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
     dataScrubberDefaults = serializers.BooleanField(required=False)
     sensitiveFields = ListField(child=serializers.CharField(), required=False)
     safeFields = ListField(child=serializers.CharField(), required=False)
-    scrubIPAddresses = serializers.BooleanField(required=False)
+    scrubIpAddresses = serializers.BooleanField(required=False)
     scrapeJavaScript = serializers.BooleanField(required=False)
     allowedDomains = ListField(child=OriginField(), required=False)
     resolveAge = serializers.IntegerField(required=False)
@@ -288,19 +288,19 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         if result.get('digestsMaxDelay'):
             project.update_option(
                 'digests:mail:maximum_delay', result['digestsMaxDelay'])
-        if result.get('subjectPrefix'):
+        if result.get('subjectPrefix') is not None:
             project.update_option('mail:subject_prefix',
                                   result['subjectPrefix'])
         if result.get('subjectTemplate'):
             project.update_option('mail:subject_template',
                                   result['subjectTemplate'])
-        if result.get('defaultEnvironment'):
+        if result.get('defaultEnvironment') is not None:
             project.update_option('sentry:default_environment', result['defaultEnvironment'])
-        if result.get('scrubIPAddresses') is not None:
-            project.update_option('sentry:scrub_ip_address', result['scrubIPAddresses'])
-        if result.get('securityToken'):
+        if result.get('scrubIpAddresses') is not None:
+            project.update_option('sentry:scrub_ip_address', result['scrubIpAddresses'])
+        if result.get('securityToken') is not None:
             project.update_option('sentry:token', result['securityToken'])
-        if result.get('securityTokenHeader'):
+        if result.get('securityTokenHeader') is not None:
             project.update_option('sentry:token_header', result['securityTokenHeader'])
         if result.get('verifySSL') is not None:
             project.update_option('sentry:verify_ssl', result['verifySSL'])
@@ -312,8 +312,12 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             project.update_option('sentry:sensitive_fields', result['sensitiveFields'])
         if result.get('safeFields') is not None:
             project.update_option('sentry:safe_fields', result['safeFields'])
-        if result.get('resolveAge'):
-            project.update_option('sentry:resolve_age', result['resolveAge'])
+        # resolveAge can be None
+        if 'resolveAge' in result:
+            project.update_option(
+                'sentry:resolve_age',
+                0 if result.get('resolveAge') is None else int(
+                    result['resolveAge']))
         if result.get('scrapeJavaScript') is not None:
             project.update_option('sentry:scrape_javascript', result['scrapeJavaScript'])
         if result.get('allowedDomains'):
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 772feda1f5..057b2f7004 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -336,9 +336,9 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                 attrs['options'].get(
                     'mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
                 'securityToken': attrs['options'].get('sentry:token') or obj.get_security_token(),
-                'securityTokenHeader': attrs['options'].get('sentry:token_header') or 'X-Sentry-Token',
+                'securityTokenHeader': attrs['options'].get('sentry:token_header'),
                 'verifySSL': bool(attrs['options'].get('sentry:verify_ssl', False)),
-                'scrubIPAddresses': bool(attrs['options'].get('sentry:scrub_ip_address', False)),
+                'scrubIpAddresses': bool(attrs['options'].get('sentry:scrub_ip_address', False)),
                 'scrapeJavaScript': bool(attrs['options'].get('sentry:scrape_javascript', True)),
                 'organization':
                 attrs['org'],
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index 2a1fe8dfce..ddd49b5327 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -67,7 +67,7 @@ export default class FormField extends React.PureComponent {
       return props.value;
     }
     if (form && form.data.hasOwnProperty(props.name)) {
-      return form.data[props.name];
+      return form.data[props.name] || '';
     }
     return props.defaultValue || '';
   }
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 5d70a7c120..7670293c62 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -18,7 +18,7 @@ class ListAsTextareaField extends TextareaField {
   }
 
   coerceValue(value) {
-    return value.split('\n');
+    return value ? value.split('\n') : [];
   }
 }
 
@@ -35,7 +35,7 @@ export default class ProjectGeneralSettings extends AsyncView {
   getTeamChoices() {
     return this.context.organization.teams
       .filter(o => o.isMember)
-      .map(o => [o.id, o.slug]);
+      .map(o => [o.slug, o.slug]);
   }
 
   getResolveAgeAllowedValues() {
@@ -74,6 +74,7 @@ export default class ProjectGeneralSettings extends AsyncView {
     let initialData = {
       name: project.name,
       slug: project.slug,
+      team: project.team && project.team.slug,
       allowedDomains: project.allowedDomains,
       resolveAge: project.resolveAge,
       dataScrubber: project.dataScrubber,
@@ -82,7 +83,7 @@ export default class ProjectGeneralSettings extends AsyncView {
       safeFields: project.safeFields,
       defaultEnvironment: project.defaultEnvironment,
       subjectPrefix: project.subjectPrefix,
-      scrubIpAddress: project.scrubIPAddresses,
+      scrubIpAddresses: project.scrubIpAddresses,
       securityToken: project.securityToken,
       securityHeader: project.securityHeader,
       securityTokenHeader: project.securityTokenHeader,
@@ -120,6 +121,7 @@ export default class ProjectGeneralSettings extends AsyncView {
               {teamChoices.length > 1 ? (
                 <Select2Field
                   name="team"
+                  className="control-group"
                   label={t('Team')}
                   required={true}
                   choices={this.getTeamChoices()}
@@ -208,7 +210,7 @@ export default class ProjectGeneralSettings extends AsyncView {
                 placeholder={t('e.g. email')}
               />
               <BooleanField
-                name="scrubIPAddresses"
+                name="scrubIpAddresses"
                 label={t("Don't store IP Addresses")}
                 help={t('Prevent IP addresses from being stored for new events.')}
               />
@@ -238,7 +240,7 @@ export default class ProjectGeneralSettings extends AsyncView {
               <ListAsTextareaField
                 name="allowedDomains"
                 label={t('Allowed domains')}
-                help={t('Separate multiple entries with a newline.')}
+                help={t('Separate multiple entries with a newline. Cannot be empty.')}
                 placeholder={t('e.g. https://example.com or example.com')}
               />
               <BooleanField
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 9929f9137e..871d6456b8 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -272,6 +272,14 @@ class ProjectUpdateTest(APITestCase):
         assert self.project.get_security_token() == 'fizzbuzz'
         assert resp.data['securityToken'] == 'fizzbuzz'
 
+        # can delete
+        resp = self.client.put(self.path, data={
+            'securityToken': '',
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_security_token() == ''
+        assert resp.data['securityToken'] == ''
+
     def test_security_token_header(self):
         resp = self.client.put(self.path, data={
             'securityTokenHeader': 'X-Hello-World',
@@ -280,6 +288,14 @@ class ProjectUpdateTest(APITestCase):
         assert self.project.get_option('sentry:token_header') == 'X-Hello-World'
         assert resp.data['securityTokenHeader'] == 'X-Hello-World'
 
+        # can delete
+        resp = self.client.put(self.path, data={
+            'securityTokenHeader': '',
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:token_header') == ''
+        assert resp.data['securityTokenHeader'] == ''
+
     def test_verify_ssl(self):
         resp = self.client.put(self.path, data={
             'verifySSL': False,
@@ -290,11 +306,18 @@ class ProjectUpdateTest(APITestCase):
 
     def test_scrub_ip_address(self):
         resp = self.client.put(self.path, data={
-            'scrubIPAddresses': True,
+            'scrubIpAddresses': True,
         })
         assert resp.status_code == 200, resp.content
         assert self.project.get_option('sentry:scrub_ip_address') is True
-        assert resp.data['scrubIPAddresses'] is True
+        assert resp.data['scrubIpAddresses'] is True
+
+        resp = self.client.put(self.path, data={
+            'scrubIpAddresses': False,
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:scrub_ip_address') is False
+        assert resp.data['scrubIpAddresses'] is False
 
     def test_scrape_javascript(self):
         resp = self.client.put(self.path, data={
@@ -312,6 +335,13 @@ class ProjectUpdateTest(APITestCase):
         assert self.project.get_option('sentry:default_environment') == 'dev'
         assert resp.data['defaultEnvironment'] == 'dev'
 
+        resp = self.client.put(self.path, data={
+            'defaultEnvironment': '',
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:default_environment') == ''
+        assert resp.data['defaultEnvironment'] == ''
+
     def test_resolve_age(self):
         resp = self.client.put(self.path, data={
             'resolveAge': 5,
@@ -320,6 +350,14 @@ class ProjectUpdateTest(APITestCase):
         assert self.project.get_option('sentry:resolve_age') == 5
         assert resp.data['resolveAge'] == 5
 
+        # can set to 0 or delete
+        resp = self.client.put(self.path, data={
+            'resolveAge': '',
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:resolve_age') == 0
+        assert resp.data['resolveAge'] == 0
+
     def test_allowed_domains(self):
         resp = self.client.put(self.path, data={
             'allowedDomains': ['foobar.com', 'https://example.com'],
@@ -328,6 +366,14 @@ class ProjectUpdateTest(APITestCase):
         assert self.project.get_option('sentry:origins') == ['foobar.com', 'https://example.com']
         assert resp.data['allowedDomains'] == ['foobar.com', 'https://example.com']
 
+        # cannot be empty
+        resp = self.client.put(self.path, data={
+            'allowedDomains': '',
+        })
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option('sentry:origins') == ['foobar.com', 'https://example.com']
+        assert resp.data['allowedDomains'] == ['foobar.com', 'https://example.com']
+
     def test_safe_fields(self):
         resp = self.client.put(self.path, data={
             'safeFields': ['foobar.com', 'https://example.com'],
