commit 32aeb06ec1b6e3083b2b98237eb494aefa626b8a
Author: Mark Story <mark@mark-story.com>
Date:   Tue Apr 23 16:00:27 2019 -0400

    fix(jira) Don't 500 when oauth tokens are revoked (#12886)
    
    If an oauth token is revoked or expired we shouldn't 500 when handling
    jira & jira server webhooks. Instead we can reply with a 400 and hope
    that one day the user deletes the webhook.
    
    Fixes SENTRY-9PF
    Fixes SENTRY-AA2

diff --git a/src/sentry/integrations/exceptions.py b/src/sentry/integrations/exceptions.py
index 1c7d93dda2..0cc4cbf09c 100644
--- a/src/sentry/integrations/exceptions.py
+++ b/src/sentry/integrations/exceptions.py
@@ -43,7 +43,7 @@ class ApiHostError(ApiError):
 
     @classmethod
     def from_exception(cls, exception):
-        if hasattr(exception, 'request'):
+        if getattr(exception, 'request'):
             return cls.from_request(exception.request)
         return cls('Unable to reach host')
 
diff --git a/src/sentry/integrations/jira_server/integration.py b/src/sentry/integrations/jira_server/integration.py
index 6b21813ebd..1453ee4eaf 100644
--- a/src/sentry/integrations/jira_server/integration.py
+++ b/src/sentry/integrations/jira_server/integration.py
@@ -179,7 +179,10 @@ class OAuthLoginView(PipelineView):
 
             return self.redirect(authorize_url)
         except ApiError as error:
-            logger.info('identity.jira-server.request-token', extra={'error': error})
+            logger.info('identity.jira-server.request-token', extra={
+                'url': config.get('url'),
+                'error': error
+            })
             return pipeline.error('Could not fetch a request token from Jira')
 
 
diff --git a/src/sentry/integrations/jira_server/webhooks.py b/src/sentry/integrations/jira_server/webhooks.py
index 11be08a146..c1f0845f6d 100644
--- a/src/sentry/integrations/jira_server/webhooks.py
+++ b/src/sentry/integrations/jira_server/webhooks.py
@@ -6,6 +6,7 @@ import six
 from django.views.decorators.csrf import csrf_exempt
 
 from sentry.api.base import Endpoint
+from sentry.integrations.exceptions import ApiError
 from sentry.integrations.jira.webhooks import (
     handle_assignee_change,
     handle_status_change
@@ -69,7 +70,14 @@ class JiraIssueUpdatedWebhook(Endpoint):
             logger.info('missing-changelog', extra={'integration_id': integration.id})
             return self.respond()
 
-        handle_assignee_change(integration, data)
-        handle_status_change(integration, data)
-
-        return self.respond()
+        try:
+            handle_assignee_change(integration, data)
+            handle_status_change(integration, data)
+        except ApiError as err:
+            logger.info('sync-failed', extra={
+                'token': token,
+                'error': six.text_type(err)
+            })
+            return self.respond(status=400)
+        else:
+            return self.respond()
diff --git a/tests/sentry/integrations/jira_server/test_webhooks.py b/tests/sentry/integrations/jira_server/test_webhooks.py
index a874ab1033..67e3f4b1c1 100644
--- a/tests/sentry/integrations/jira_server/test_webhooks.py
+++ b/tests/sentry/integrations/jira_server/test_webhooks.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import
 
 import jwt
+import responses
 
 from django.core.urlresolvers import reverse
 from exam import fixture
 from mock import patch
+from requests.exceptions import ConnectionError
 
 from sentry.integrations.jira_server.integration import JiraServerIntegration
 from sentry.models import (
@@ -17,7 +19,7 @@ from sentry.testutils import APITestCase
 from .testutils import EXAMPLE_PRIVATE_KEY
 
 
-class JiraWebhookEndpointTest(APITestCase):
+class JiraServerWebhookEndpointTest(APITestCase):
 
     @fixture
     def integration(self):
@@ -172,3 +174,45 @@ class JiraWebhookEndpointTest(APITestCase):
                 'issue': payload['issue'],
             }
         )
+
+    @responses.activate
+    def test_post_update_status_token_error(self):
+        responses.add(
+            method=responses.GET,
+            url='https://jira.example.org/rest/api/2/status',
+            body=ConnectionError()
+        )
+        project = self.create_project()
+        self.create_group(project=project)
+        integration = self.integration
+        installation = integration.get_installation(self.organization.id)
+        installation.update_organization_config({'sync_status_reverse': True})
+
+        payload = {
+            'changelog': {
+                'items': [
+                    {
+                        'from': '10101',
+                        'field': 'status',
+                        'fromString': 'In Progress',
+                        'to': '10102',
+                        'toString': 'Done',
+                        'fieldtype': 'jira',
+                        'fieldId': 'status'
+                    }
+                ],
+                'id': 12345
+            },
+            'issue': {
+                'project': {
+                    'key': 'APP',
+                    'id': '10000',
+                },
+                'key': 'APP-1'
+            }
+        }
+        token = self.jwt_token
+        path = reverse('sentry-extensions-jiraserver-issue-updated', args=[token])
+        resp = self.client.post(path, data=payload)
+
+        assert resp.status_code == 400
