commit 325283b884c87819efdf2ba305b407fd83a3bc40
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 5 21:24:56 2012 -0700

    Allow tags to be passed in Group.objects.from_kwargs

diff --git a/sentry/manager.py b/sentry/manager.py
index 8e2acf05fe..0565508f00 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -377,6 +377,7 @@ class GroupManager(BaseManager, ChartMixin):
         site = kwargs.pop('site', None)
         date = kwargs.pop('timestamp', None) or datetime.datetime.utcnow()
         checksum = kwargs.pop('checksum', None)
+        tags = kwargs.pop('tags', [])
 
         # We must convert date to local time so Django doesn't mess it up
         # based on TIME_ZONE
@@ -443,7 +444,7 @@ class GroupManager(BaseManager, ChartMixin):
                     warnings.warn(exc)
 
         try:
-            group, is_new, is_sample = self._create_group(event, **group_kwargs)
+            group, is_new, is_sample = self._create_group(event, tags=tags, **group_kwargs)
         except Exception, exc:
             # TODO: should we mail admins when there are failures?
             try:
@@ -486,9 +487,8 @@ class GroupManager(BaseManager, ChartMixin):
 
         return event
 
-    def _create_group(self, event, **kwargs):
-        from sentry.models import ProjectCountByMinute, MessageCountByMinute, FilterValue, \
-          MessageFilterValue, STATUS_RESOLVED
+    def _create_group(self, event, tags=None, **kwargs):
+        from sentry.models import ProjectCountByMinute, MessageCountByMinute, STATUS_RESOLVED
 
         date = event.datetime
         time_spent = event.time_spent
@@ -537,6 +537,10 @@ class GroupManager(BaseManager, ChartMixin):
                     'active_at': date,
                     'status': 0,
                 })
+                group.status = 0
+                group.active_at = date
+
+            group.last_seen = max(event.datetime, group.last_seen)
 
             silence_timedelta = date - group.last_seen
             silence = silence_timedelta.days * 86400 + silence_timedelta.seconds
@@ -577,13 +581,24 @@ class GroupManager(BaseManager, ChartMixin):
             'date': normalized_datetime,
         })
 
-        # TODO: should we move this into a TagPlugin?
-        for key, value in (
-                ('logger', event.logger),
-            ):
-            if not value:
-                continue
+        if not tags:
+            tags = []
+        else:
+            tags = list(tags)
 
+        tags += [('logger', event.logger)]
+
+        self.add_tags(group, tags)
+
+        return group, is_new, is_sample
+
+    def add_tags(self, group, tags):
+        from sentry.models import FilterValue, MessageFilterValue
+
+        project = group.project
+        date = group.last_seen
+
+        for key, value in itertools.ifilter(bool, tags):
             FilterValue.objects.get_or_create(
                 project=project,
                 key=key,
@@ -601,8 +616,6 @@ class GroupManager(BaseManager, ChartMixin):
                 'last_seen': date,
             })
 
-        return group, is_new, is_sample
-
     def get_by_natural_key(self, logger, culprit, checksum):
         return self.get(logger=logger, view=culprit, checksum=checksum)
 
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 332fa4317e..1df76d5a28 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -214,6 +214,26 @@ class SentryManagerTest(TestCase):
         self.assertEquals(len(group_list), 1)
         self.assertEquals(group_list[0], group)
 
+    def test_add_tags(self):
+        event = Group.objects.from_kwargs(1, message='rrr')
+        group = event.group
+        Group.objects.add_tags(group, tags=(('foo', 'bar'), ('foo', 'baz'), ('biz', 'boz')))
+
+        self.assertEquals(group.messagefiltervalue_set.filter(key='foo').count(), 2)
+        results = list(group.messagefiltervalue_set.filter(key='foo').order_by('id'))
+        res = results[0]
+        self.assertEquals(res.value, 'bar')
+        self.assertEquals(res.times_seen, 1)
+        res = results[1]
+        self.assertEquals(res.value, 'baz')
+        self.assertEquals(res.times_seen, 1)
+
+        self.assertEquals(group.messagefiltervalue_set.filter(key='biz').count(), 1)
+        results = list(group.messagefiltervalue_set.filter(key='biz').order_by('id'))
+        res = results[0]
+        self.assertEquals(res.value, 'boz')
+        self.assertEquals(res.times_seen, 1)
+
 
 class SearchManagerTest(TestCase):
     def test_search(self):
