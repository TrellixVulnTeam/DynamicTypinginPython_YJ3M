commit 0b7a916122713b03294a599cfd1d7c094a703d6b
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Apr 30 15:46:07 2020 +0200

    ref(ui): Moved Event ID Status inline (#18544)

diff --git a/src/sentry/static/sentry/app/components/forms/formField.tsx b/src/sentry/static/sentry/app/components/forms/formField.tsx
index e51058b261..3cb7bb2f4a 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.tsx
@@ -199,9 +199,14 @@ export default class FormField<
           {this.getField()}
           {this.renderDisabledReason()}
           {defined(help) && <p className="help-block">{help}</p>}
-          {shouldShowErrorMessage && <p className="error">{error}</p>}
+          {shouldShowErrorMessage && <ErrorMessage>{error}</ErrorMessage>}
         </div>
       </div>
     );
   }
 }
+
+const ErrorMessage = styled('p')`
+  font-size: ${p => p.theme.fontSizeMedium};
+  color: ${p => p.theme.red};
+`;
diff --git a/src/sentry/static/sentry/app/icons/iconCheckmark.tsx b/src/sentry/static/sentry/app/icons/iconCheckmark.tsx
index 82829249ee..11566a282b 100644
--- a/src/sentry/static/sentry/app/icons/iconCheckmark.tsx
+++ b/src/sentry/static/sentry/app/icons/iconCheckmark.tsx
@@ -12,7 +12,7 @@ export const IconCheckmark = React.forwardRef(function IconCheckmark(
   }: IconProps,
   ref: React.Ref<SVGSVGElement>
 ) {
-  const color = providedColor;
+  const color = theme[providedColor] ?? providedColor;
   const size = theme.iconSizes[providedSize] ?? providedSize;
 
   return (
diff --git a/src/sentry/static/sentry/app/icons/iconClose.tsx b/src/sentry/static/sentry/app/icons/iconClose.tsx
index cf4b5cc362..b9218a91e1 100644
--- a/src/sentry/static/sentry/app/icons/iconClose.tsx
+++ b/src/sentry/static/sentry/app/icons/iconClose.tsx
@@ -12,7 +12,7 @@ export const IconClose = React.forwardRef(function IconClose(
   }: IconProps,
   ref: React.Ref<SVGSVGElement>
 ) {
-  const color = providedColor;
+  const color = theme[providedColor] ?? providedColor;
   const size = theme.iconSizes[providedSize] ?? providedSize;
 
   return (
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
index b176d3591f..cd8ab1aead 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
@@ -5,10 +5,9 @@ import isEqual from 'lodash/isEqual';
 import TextField from 'app/components/forms/textField';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
-import ControlState from 'app/views/settings/components/forms/field/controlState';
-import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 
 import DataPrivacyRulesPanelFormField from './dataPrivacyRulesFormField';
+import DataPrivacyRulesFormEventIdStatusIcon from './dataPrivacyRulesFormEventIdStatusIcon';
 import {EventIdStatus} from './types';
 
 type EventId = {
@@ -22,24 +21,6 @@ type Props = {
   disabled?: boolean;
 };
 
-const loadEventIdStatus = (status?: EventIdStatus) => {
-  switch (status) {
-    case EventIdStatus.INVALID:
-      addErrorMessage(t("That's not a valid event ID"));
-      break;
-    case EventIdStatus.ERROR:
-      addErrorMessage(t('Something went wrong while fetching the suggestions'));
-      break;
-    case EventIdStatus.NOT_FOUND:
-      addErrorMessage(t('The chosen event was not found in projects you have access to'));
-      break;
-    case EventIdStatus.LOADED:
-      addSuccessMessage(t('Successfully loaded event for autocompletion'));
-      break;
-    default:
-  }
-};
-
 type State = {
   value: string;
   status?: EventIdStatus;
@@ -58,16 +39,9 @@ class DataPrivacyRulesFormEventId extends React.Component<Props, State> {
   }
 
   loadState = () => {
-    this.setState(
-      {
-        ...this.props.eventId,
-      },
-      this.loadStatus
-    );
-  };
-
-  loadStatus = () => {
-    loadEventIdStatus(this.state.status);
+    this.setState({
+      ...this.props.eventId,
+    });
   };
 
   handleChange = (value: string) => {
@@ -85,7 +59,7 @@ class DataPrivacyRulesFormEventId extends React.Component<Props, State> {
     const {value} = this.state;
 
     if (value && value.length !== 32) {
-      this.setState({status: EventIdStatus.INVALID}, this.loadStatus);
+      this.setState({status: EventIdStatus.INVALID});
       return false;
     }
 
@@ -108,6 +82,30 @@ class DataPrivacyRulesFormEventId extends React.Component<Props, State> {
     }
   };
 
+  handleClickIconClose = () => {
+    this.setState({
+      value: '',
+      status: undefined,
+    });
+  };
+
+  getErrorMessage = (): string | undefined => {
+    const {status} = this.state;
+
+    switch (status) {
+      case EventIdStatus.INVALID:
+        return t('This event ID is invalid.');
+      case EventIdStatus.ERROR:
+        return t(
+          'An error occurred while fetching the suggestions based on this Event ID.'
+        );
+      case EventIdStatus.NOT_FOUND:
+        return t('The chosen event ID was not found in projects you have access to.');
+      default:
+        return undefined;
+    }
+  };
+
   render() {
     const {disabled} = this.props;
     const {value, status} = this.state;
@@ -129,12 +127,13 @@ class DataPrivacyRulesFormEventId extends React.Component<Props, State> {
             onKeyDown={this.handleKeyDown}
             onBlur={this.handleBlur}
             showStatus={status !== EventIdStatus.LOADED}
+            error={this.getErrorMessage()}
           />
           <Status>
-            {status === EventIdStatus.LOADING && <ControlState isSaving />}
-            {status === EventIdStatus.INVALID && <ControlState error />}
-            {status === EventIdStatus.ERROR && <ControlState error />}
-            {status === EventIdStatus.NOT_FOUND && <ControlState error />}
+            <DataPrivacyRulesFormEventIdStatusIcon
+              onClickIconClose={this.handleClickIconClose}
+              status={status}
+            />
           </Status>
         </EventIdFieldWrapper>
       </DataPrivacyRulesPanelFormField>
@@ -154,8 +153,12 @@ const StyledTextField = styled(TextField)<{showStatus: boolean}>`
 `;
 
 const Status = styled('div')`
+  height: 40px;
   position: absolute;
-  right: 0;
+  right: ${space(1.5)};
+  top: 0;
+  display: flex;
+  align-items: center;
 `;
 
 const EventIdFieldWrapper = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx
new file mode 100644
index 0000000000..90a040720d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventIdStatusIcon.tsx
@@ -0,0 +1,44 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import ControlState from 'app/views/settings/components/forms/field/controlState';
+import {t} from 'app/locale';
+import Tooltip from 'app/components/tooltip';
+import {IconClose, IconCheckmark} from 'app/icons';
+
+import {EventIdStatus} from './types';
+
+type Props = {
+  onClickIconClose: () => void;
+  status?: EventIdStatus;
+};
+
+const DataPrivacyRulesFormEventIdStatusIcon = ({status, onClickIconClose}: Props) => {
+  switch (status) {
+    case EventIdStatus.ERROR:
+    case EventIdStatus.INVALID:
+    case EventIdStatus.NOT_FOUND:
+      return (
+        <CloseIcon onClick={onClickIconClose}>
+          <Tooltip title={t('Clear Event ID')}>
+            <IconClose color="red" />
+          </Tooltip>
+        </CloseIcon>
+      );
+    case EventIdStatus.LOADING:
+      return <ControlState isSaving />;
+    case EventIdStatus.LOADED:
+      return <IconCheckmark color="green" />;
+    default:
+      return null;
+  }
+};
+
+export default DataPrivacyRulesFormEventIdStatusIcon;
+
+const CloseIcon = styled('div')`
+  cursor: pointer;
+  :first-child {
+    line-height: 0;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
index 132e2a9ecc..0d888fc8b0 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
@@ -403,9 +403,8 @@ const Wrapper = styled('div')`
   width: 100%;
 `;
 
-const StyledTextField = styled(TextField)<{error?: string}>`
+const StyledTextField = styled(TextField)`
   width: 100%;
-  font-size: ${p => p.theme.fontSizeSmall};
   height: 40px;
   input {
     height: 40px;
diff --git a/src/sentry/static/sentry/less/forms.less b/src/sentry/static/sentry/less/forms.less
index 1372ecd52c..5854f4ce93 100644
--- a/src/sentry/static/sentry/less/forms.less
+++ b/src/sentry/static/sentry/less/forms.less
@@ -154,7 +154,14 @@ label {
 }
 
 .has-error .form-control {
-  border-color: @red-dark;
+  border-color: #c9c0d1;
+  box-shadow: inset 0 2px 0 rgba(0, 0, 0, 0.04);
+}
+
+.has-error .form-control:focus {
+  border-color: #a598b2;
+  box-shadow: inset 0 2px 0 rgba(0, 0, 0, 0.04), 0 0 6px rgba(177, 171, 225, 0.3);
+  outline: none;
 }
 
 .error,
@@ -168,7 +175,7 @@ label {
 .has-error.checkbox label,
 .has-error.radio-inline label,
 .has-error.checkbox-inline label {
-  color: @red-dark;
+  color: @red;
 }
 
 input.form-control[disabled],
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap
similarity index 94%
rename from tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
rename to tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap
index 7a29278158..6e105b96b3 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap
@@ -1,6 +1,6 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
+exports[`DataPrivacyRulesFormSource default render 1`] = `
 <DataPrivacyRulesFormSource
   onChange={[MockFunction]}
   suggestions={
@@ -82,7 +82,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
       >
         <TextField
           autoComplete="off"
-          className="css-a4jb6d-StyledTextField e5vbseb1"
+          className="css-jvghga-StyledTextField e5vbseb1"
           disabled={false}
           hideErrorMessage={false}
           name="from"
@@ -94,7 +94,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
           value="$string"
         >
           <div
-            className="css-a4jb6d-StyledTextField e5vbseb1 control-group"
+            className="css-jvghga-StyledTextField e5vbseb1 control-group"
           >
             <div
               className="controls"
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesFormSource.spec.tsx
similarity index 99%
rename from tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx
rename to tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesFormSource.spec.tsx
index e642284a3d..8ceac9e5ce 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesFormSource.spec.tsx
@@ -23,7 +23,7 @@ function renderComponent({
   );
 }
 
-describe('DataPrivacyRulesPanelSelectorField', () => {
+describe('DataPrivacyRulesFormSource', () => {
   it('default render', () => {
     const wrapper = renderComponent({});
     expect(wrapper.find('input').prop('value')).toBe('$string');
