commit 0f5d4b1b020d2e6029f744dbf4524c155f184de0
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Dec 10 14:06:58 2018 -0800

    feat(discover): Select and clear text for aggregations + conditions (#10934)
    
    Allows users to select all text and clear in a consistent way.
    Closes APP-849

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
index 9c8f22f1ba..afa6781995 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
@@ -1,4 +1,6 @@
 import React from 'react';
+
+import {Value} from 'react-select';
 import PropTypes from 'prop-types';
 import {Box} from 'grid-emotion';
 import SelectControl from 'app/components/forms/selectControl';
@@ -20,6 +22,7 @@ export default class Aggregation extends React.Component {
     super(props);
     this.state = {
       inputValue: '',
+      isOpen: false,
     };
   }
 
@@ -67,7 +70,7 @@ export default class Aggregation extends React.Component {
     if (option.value === 'uniq' || option.value === 'avg') {
       this.setState({inputValue: option.value}, this.focus);
     } else {
-      this.setState({inputValue: option.value});
+      this.setState({inputValue: option.value, isOpen: false});
       this.props.onChange(getExternal(option.value));
     }
   };
@@ -76,24 +79,39 @@ export default class Aggregation extends React.Component {
     if (this.state.inputValue === '') {
       this.setState({
         inputValue: getInternal(this.props.value),
+        isOpen: true,
       });
     }
   };
 
   inputRenderer = props => {
+    const onChange = evt => {
+      if (evt.target.value === '') {
+        // React select won't trigger an onChange event when a value is completely
+        // cleared, so we'll force this before calling onChange
+        this.setState({inputValue: evt.target.value}, props.onChange(evt));
+      } else {
+        props.onChange(evt);
+      }
+    };
+
     return (
       <input
         type="text"
         {...props}
-        value={props.value || this.state.inputValue}
+        onChange={onChange}
+        value={this.state.inputValue}
         style={{width: '100%', border: 0, backgroundColor: 'transparent'}}
       />
     );
   };
 
-  valueRenderer = option => {
-    const hideValue = this.state.inputValue;
-    return hideValue ? '' : option.value;
+  valueComponent = props => {
+    if (this.state.isOpen) {
+      return null;
+    }
+
+    return <Value {...props} />;
   };
 
   handleInputChange = value => {
@@ -122,7 +140,7 @@ export default class Aggregation extends React.Component {
           backspaceRemoves={false}
           deleteRemoves={false}
           inputRenderer={this.inputRenderer}
-          valueRenderer={this.valueRenderer}
+          valueComponent={this.valueComponent}
           onInputChange={this.handleInputChange}
           disabled={this.props.disabled}
         />
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
index 5a769c3257..c08cb43cc4 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import {Value} from 'react-select';
 import PropTypes from 'prop-types';
 import {Box} from 'grid-emotion';
 import {t} from 'app/locale';
@@ -22,6 +23,7 @@ export default class Condition extends React.Component {
     super(props);
     this.state = {
       inputValue: '',
+      isOpen: false,
     };
   }
 
@@ -36,6 +38,7 @@ export default class Condition extends React.Component {
       this.setState(
         {
           inputValue: '',
+          isOpen: false,
         },
         this.props.onChange(external)
       );
@@ -55,6 +58,7 @@ export default class Condition extends React.Component {
     if (this.state.inputValue === '') {
       this.setState({
         inputValue: getInternal(this.props.value),
+        isOpen: true,
       });
     }
   };
@@ -127,19 +131,33 @@ export default class Condition extends React.Component {
   };
 
   inputRenderer = props => {
+    const onChange = evt => {
+      if (evt.target.value === '') {
+        // React select won't trigger an onChange event when a value is completely
+        // cleared, so we'll force this before calling onChange
+        this.setState({inputValue: evt.target.value}, props.onChange(evt));
+      } else {
+        props.onChange(evt);
+      }
+    };
+
     return (
       <input
         type="text"
         {...props}
+        onChange={onChange}
         value={this.state.inputValue}
         style={{width: '100%', border: 0, zIndex: 1000, backgroundColor: 'transparent'}}
       />
     );
   };
 
-  valueRenderer = option => {
-    const hideValue = this.state.inputValue;
-    return hideValue ? '' : option.value;
+  valueComponent = props => {
+    if (this.state.inputValue) {
+      return null;
+    }
+
+    return <Value {...props} />;
   };
 
   shouldKeyDownEventCreateNewOption = keyCode => {
@@ -195,7 +213,7 @@ export default class Condition extends React.Component {
           deleteRemoves={false}
           isValidNewOption={this.isValidNewOption}
           inputRenderer={this.inputRenderer}
-          valueRenderer={this.valueRenderer}
+          valueComponent={this.valueComponent}
           onInputChange={this.handleInputChange}
           onBlur={this.handleBlur}
           creatable={true}
