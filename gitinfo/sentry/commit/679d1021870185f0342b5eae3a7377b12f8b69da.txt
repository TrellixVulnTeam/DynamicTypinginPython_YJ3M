commit 679d1021870185f0342b5eae3a7377b12f8b69da
Author: 0x6a6f7368 <joshua.r.li.98@gmail.com>
Date:   Wed Jul 11 17:03:40 2018 -0700

    build: upgrade to latest flake8 (3.5.0) (#9000)

diff --git a/requirements-dev.txt b/requirements-dev.txt
index 29cc454004..5a4ad0fcc9 100644
--- a/requirements-dev.txt
+++ b/requirements-dev.txt
@@ -1,5 +1,5 @@
-autopep8
+autopep8>=1.3.5,<1.4.0
 Babel
-flake8>=2.6,<2.7
+flake8>=3.5.0<3.6.0
 isort>=4.2.2,<4.3.0
-pycodestyle>=2.0,<2.1
+pycodestyle>=2.3,<2.4.0
diff --git a/src/bitfield/forms.py b/src/bitfield/forms.py
index c0e2676a27..79a86001a5 100644
--- a/src/bitfield/forms.py
+++ b/src/bitfield/forms.py
@@ -43,11 +43,11 @@ class BitFormField(IntegerField):
     def __init__(self, choices=(), widget=BitFieldCheckboxSelectMultiple, *args, **kwargs):
         if isinstance(kwargs['initial'], int):
             iv = kwargs['initial']
-            l = []
+            L = []
             for i in range(0, 63):
                 if (1 << i) & iv > 0:
-                    l += [choices[i][0]]
-            kwargs['initial'] = l
+                    L += [choices[i][0]]
+            kwargs['initial'] = L
         self.widget = widget
         super(BitFormField, self).__init__(widget=widget, *args, **kwargs)
         self.choices = self.widget.choices = choices
diff --git a/src/sentry/api/endpoints/user_authenticator_enroll.py b/src/sentry/api/endpoints/user_authenticator_enroll.py
index a77efa7930..c3cf96bb9d 100644
--- a/src/sentry/api/endpoints/user_authenticator_enroll.py
+++ b/src/sentry/api/endpoints/user_authenticator_enroll.py
@@ -55,6 +55,7 @@ class U2fRestSerializer(serializers.Serializer):
         required=True,
     )
 
+
 serializer_map = {
     'totp': TotpRestSerializer,
     'sms': SmsRestSerializer,
diff --git a/src/sentry/api/serializers/models/authenticator.py b/src/sentry/api/serializers/models/authenticator.py
index a02bd85dba..d45d766af9 100644
--- a/src/sentry/api/serializers/models/authenticator.py
+++ b/src/sentry/api/serializers/models/authenticator.py
@@ -38,5 +38,6 @@ class SmsInterfaceSerializer(AuthenticatorInterfaceSerializer):
         data['phone'] = obj.phone_number
         return data
 
+
 for interface in RecoveryCodeInterface, TotpInterface, U2fInterface:
     register(interface)(AuthenticatorInterfaceSerializer)
diff --git a/src/sentry/db/models/fields/citext.py b/src/sentry/db/models/fields/citext.py
index 35089f1504..84e919e913 100644
--- a/src/sentry/db/models/fields/citext.py
+++ b/src/sentry/db/models/fields/citext.py
@@ -64,4 +64,5 @@ def create_citext_extension(db, **kwargs):
         except Exception:
             pass
 
+
 pre_syncdb.connect(create_citext_extension)
diff --git a/src/sentry/db/models/utils.py b/src/sentry/db/models/utils.py
index a8e217c002..f077c8faec 100644
--- a/src/sentry/db/models/utils.py
+++ b/src/sentry/db/models/utils.py
@@ -21,6 +21,7 @@ from sentry.db.exceptions import CannotResolveExpression
 class _UnknownType(object):
     pass
 
+
 try:
     from django.db.models.expressions import ExpressionNode
     Value = _UnknownType
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index c63a0bfbbf..2e1da9c9dc 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -26,6 +26,7 @@ class ExampleSetupView(PipelineView):
 
         return HttpResponse(self.TEMPLATE)
 
+
 DESCRIPTION = """
 This is an example integration
 
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index 22ded0696c..d787e4190a 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -34,6 +34,7 @@ def apierror(message="Invalid data"):
     from sentry.coreapi import APIForbidden
     raise APIForbidden(message)
 
+
 PAIRS = {
     'type': 'array',
     'items': {
diff --git a/src/sentry/lang/javascript/errorlocale.py b/src/sentry/lang/javascript/errorlocale.py
index 3cd678cef8..4b5639b88d 100644
--- a/src/sentry/lang/javascript/errorlocale.py
+++ b/src/sentry/lang/javascript/errorlocale.py
@@ -51,6 +51,7 @@ def find_translation(message):
 def format_message(message, data):
     return message.replace('%s', data)
 
+
 message_type_regexp = re.compile('^(?P<type>[a-zA-Z]*Error): (?P<message>.*)')
 
 
diff --git a/src/sentry/lint/engine.py b/src/sentry/lint/engine.py
index 130cebcdec..97af32cf65 100644
--- a/src/sentry/lint/engine.py
+++ b/src/sentry/lint/engine.py
@@ -114,7 +114,7 @@ def get_python_files(file_list=None):
 
 # parseable is a no-op
 def py_lint(file_list, parseable=False):
-    from flake8.engine import get_style_guide
+    from flake8.api.legacy import get_style_guide
 
     file_list = get_python_files(file_list)
     flake8_style = get_style_guide(parse_argv=True)
diff --git a/src/sentry/models/groupenvironment.py b/src/sentry/models/groupenvironment.py
index ea74823a36..f35674ee54 100644
--- a/src/sentry/models/groupenvironment.py
+++ b/src/sentry/models/groupenvironment.py
@@ -44,6 +44,7 @@ class GroupEnvironment(Model):
 
         return instance, created
 
+
 post_delete.connect(
     lambda instance, **kwargs: cache.delete(
         GroupEnvironment._get_cache_key(
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 461d7d8098..cc7d223c5c 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -305,5 +305,6 @@ class User(BaseModel, AbstractBaseUser):
     def clear_lost_passwords(self):
         LostPasswordHash.objects.filter(user=self).delete()
 
+
 # HACK(dcramer): last_login needs nullable for Django 1.8
 User._meta.get_field('last_login').null = True
diff --git a/src/sentry/receivers/auth.py b/src/sentry/receivers/auth.py
index 95a8157588..edcb2a9c62 100644
--- a/src/sentry/receivers/auth.py
+++ b/src/sentry/receivers/auth.py
@@ -36,6 +36,7 @@ def remove_lost_password_hashes(sender, user, **kwargs):
     # Remove pending password recovery hashes; user was able to login
     user.clear_lost_passwords()
 
+
 user_logged_in.disconnect(update_last_login)
 user_logged_in.connect(
     safe_update_last_login,
diff --git a/src/sentry/utils/colors.py b/src/sentry/utils/colors.py
index e1631177b5..376c9f0a65 100644
--- a/src/sentry/utils/colors.py
+++ b/src/sentry/utils/colors.py
@@ -4,7 +4,7 @@ import hashlib
 import colorsys
 
 
-def get_hashed_color(string, l=0.5, s=0.5):
+def get_hashed_color(string, l=0.5, s=0.5):  # noqa: E741
     val = int(hashlib.md5(string.encode('utf-8')).hexdigest()[:3], 16)
     tup = colorsys.hls_to_rgb(val / 4096.0, l, s)
     return '#%02x%02x%02x' % (int(tup[0] * 255), int(tup[1] * 255), int(tup[2] * 255), )
diff --git a/src/sentry/utils/data_filters.py b/src/sentry/utils/data_filters.py
index 2b67527359..2f8cc120f2 100644
--- a/src/sentry/utils/data_filters.py
+++ b/src/sentry/utils/data_filters.py
@@ -28,6 +28,7 @@ class FilterStatKeys(object):
     CORS = 'cors'
     DISCARDED_HASH = 'discarded-hash'
 
+
 FILTER_STAT_KEYS_TO_VALUES = {
     FilterStatKeys.IP_ADDRESS: tsdb.models.project_total_received_ip_address,
     FilterStatKeys.RELEASE_VERSION: tsdb.models.project_total_received_release_version,
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index caedb08b18..883aff1fee 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -35,6 +35,7 @@ def timer(name, prefix='snuba.client'):
     finally:
         metrics.timing('{}.{}'.format(prefix, name), time.time() - t)
 
+
 _snuba_pool = urllib3.connectionpool.connection_from_url(
     settings.SENTRY_SNUBA,
     retries=False,
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 6203f553de..e71e35233b 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -227,13 +227,19 @@ def alert(request):
         make_group_generator(random, project),
     )
 
+    data = load_data(platform)
+    data['tags'] = [
+        ('logger', 'javascript'), ('environment', 'prod'), ('level', 'error'),
+        ('device', 'Other')
+    ]
+
     event = Event(
         id=1,
         event_id='44f1419e73884cd2b45c79918f4b6dc4',
         project=project,
         group=group,
         message=group.message,
-        data=load_data(platform),
+        data=data,
         datetime=to_datetime(
             random.randint(
                 to_timestamp(group.first_seen),
@@ -262,10 +268,6 @@ def alert(request):
             'interfaces': interface_list,
             'tags': event.get_tags(),
             'project_label': project.slug,
-            'tags': [
-                ('logger', 'javascript'), ('environment', 'prod'), ('level', 'error'),
-                ('device', 'Other')
-            ],
             'commits': [{
                 # TODO(dcramer): change to use serializer
                 "repository": {"status": "active", "name": "Example Repo", "url": "https://github.com/example/example", "dateCreated": "2018-02-28T23:39:22.402Z", "provider": {"id": "github", "name": "GitHub"}, "id": "1"},
diff --git a/tests/fixtures/emails/alert.txt b/tests/fixtures/emails/alert.txt
index 1c1e27f370..f0d4e039ee 100644
--- a/tests/fixtures/emails/alert.txt
+++ b/tests/fixtures/emails/alert.txt
@@ -14,10 +14,10 @@ Suspect Commits
 Tags
 ----
 
-* logger = javascript
+* device = Other
 * environment = prod
 * level = error
-* device = Other
+* logger = javascript
 
 
 Stacktrace
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 2b5a0a6ad3..4971aee1a0 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -214,7 +214,6 @@ class ProjectUpdateTest(APITestCase):
 
     def test_options(self):
         options = {
-            'sentry:origins': 'foo\nbar',
             'sentry:resolve_age': 1,
             'sentry:scrub_data': False,
             'sentry:scrub_defaults': False,
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index 6c60307bc3..5ff33bff62 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -271,12 +271,6 @@ class BasicResolvingIntegrationTest(TestCase):
                     }
                 ]
             },
-            "contexts": {
-                "os": {
-                    "name": "iOS",
-                    "version": "9.3.0"
-                }
-            },
             "sentry.interfaces.Exception": {
                 "values": [
                     {
@@ -633,12 +627,6 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                     }
                 ]
             },
-            "contexts": {
-                "os": {
-                    "name": "iOS",
-                    "version": "9.3.0"
-                }
-            },
             "sentry.interfaces.Exception": {
                 "values": [
                     {
@@ -788,12 +776,6 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                     }
                 ]
             },
-            "contexts": {
-                "os": {
-                    "name": "iOS",
-                    "version": "9.3.0"
-                }
-            },
             "sentry.interfaces.Exception": {
                 "values": [
                     {
