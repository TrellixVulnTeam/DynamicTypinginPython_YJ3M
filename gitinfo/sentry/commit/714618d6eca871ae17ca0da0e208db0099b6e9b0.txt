commit 714618d6eca871ae17ca0da0e208db0099b6e9b0
Author: andy <andy@whiskeymedia.com>
Date:   Fri Sep 24 14:11:26 2010 -0700

    added the abiliy for multiple site's to log into a single sentry instance. this can be achieveed by using the django.contrib.sites framework, or by specifying a SENTRY_SITE in the client settings manually.

diff --git a/runtests.py b/runtests.py
index e1c1acf440..36cb6886c8 100644
--- a/runtests.py
+++ b/runtests.py
@@ -17,6 +17,7 @@ if not settings.configured:
             'django.contrib.auth',
             'django.contrib.admin',
             'django.contrib.sessions',
+            'django.contrib.sites',
 
             # Included to fix Disqus' test Django which solves IntegrityMessage case
             'django.contrib.contenttypes',
@@ -31,6 +32,7 @@ if not settings.configured:
         ],
         ROOT_URLCONF='',
         DEBUG=False,
+        SITE_ID=1,
     )
 
 from django.test.simple import run_tests
diff --git a/sentry/feeds.py b/sentry/feeds.py
index 2b62927371..bc440e0ef4 100644
--- a/sentry/feeds.py
+++ b/sentry/feeds.py
@@ -51,6 +51,8 @@ class MessageFeed(object):
             qs = qs.filter(server_name=request.GET['server_name'])
         elif request.GET.get('logger'):
             qs = qs.filter(logger=request.GET['logger'])
+        elif request.GET.get('site'):
+            qs = qs.filter(site=request.GET['site'])
         return qs
 
     def get_order_field(self, request):
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index 9188f3103f..b4e75fb18b 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -1,8 +1,9 @@
 # Widget api is pretty ugly
+from django.conf import settings as django_settings
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
-from sentry.settings import LOG_LEVELS
+from sentry import settings
 
 class Widget(object):
     def __init__(self, filter, request):
@@ -118,9 +119,31 @@ class ServerNameFilter(SentryFilter):
     def get_query_set(self, queryset):
         return queryset.filter(message_set__server_name=self.get_value()).distinct()
 
+class SiteFilter(SentryFilter):
+    label = 'Site'
+    column = 'site'
+
+    def process(self, data):
+        if 'site' in data:
+            return data
+        if settings.SITE is None:
+            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
+                from django.contrib.sites.models import Site
+                try:
+                    settings.SITE = Site.objects.get_current().name
+                except Site.DoesNotExist:
+                    settings.SITE = ''
+            else:
+                settings.SITE = ''
+        data['site'] = settings.SITE
+        return data
+
+    def get_query_set(self, queryset):
+        return queryset.filter(message_set__site=self.get_value()).distinct()
+
 class LevelFilter(SentryFilter):
     label = 'Level'
     column = 'level'
     
     def get_choices(self):
-        return SortedDict((str(k), v) for k, v in LOG_LEVELS)
\ No newline at end of file
+        return SortedDict((str(k), v) for k, v in settings.LOG_LEVELS)
\ No newline at end of file
diff --git a/sentry/manager.py b/sentry/manager.py
index 2ad1ddc722..8888b61294 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -34,6 +34,7 @@ class SentryManager(models.Manager):
         logger_name = kwargs.pop('logger', 'root')
         url = kwargs.pop('url', None)
         server_name = kwargs.pop('server_name', settings.CLIENT)
+        site = kwargs.pop('site', None)
         data = kwargs.pop('data', {}) or {}
 
         if url:
@@ -71,11 +72,13 @@ class SentryManager(models.Manager):
                 data=data,
                 url=url,
                 server_name=server_name,
+                site=site,
                 checksum=checksum,
                 group=group,
                 **kwargs
             )
             FilterValue.objects.get_or_create(key='server_name', value=server_name)
+            FilterValue.objects.get_or_create(key='site', value=site)
             FilterValue.objects.get_or_create(key='logger', value=logger_name)
         except Exception, exc:
             # TODO: should we mail admins when there are failures?
diff --git a/sentry/migrations/0007_auto__add_field_message_site.py b/sentry/migrations/0007_auto__add_field_message_site.py
new file mode 100644
index 0000000000..a3baccad23
--- /dev/null
+++ b/sentry/migrations/0007_auto__add_field_message_site.py
@@ -0,0 +1,62 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding field 'Message.site'
+        db.add_column('sentry_message', 'site', self.gf('django.db.models.fields.CharField')(default='', max_length=128, db_index=True), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Deleting field 'Message.site'
+        db.delete_column('sentry_message', 'site')
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '255'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '128', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index a78706cfbc..43c11e50b7 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -209,12 +209,21 @@ class GroupedMessage(MessageBase):
                    .values('server_name', 'times_seen')\
                    .order_by('-times_seen')
 
+    @property
+    def unique_sites(self):
+        return self.message_set.filter(site__isnull=False)\
+                   .values_list('site', 'logger', 'view', 'checksum')\
+                   .annotate(times_seen=Count('site'))\
+                   .values('site', 'times_seen')\
+                   .order_by('-times_seen')
+
 class Message(MessageBase):
     group           = models.ForeignKey(GroupedMessage, blank=True, null=True, related_name="message_set")
     datetime        = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     data            = GzippedDictField(blank=True, null=True)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
     server_name     = models.CharField(max_length=128, db_index=True)
+    site            = models.CharField(max_length=128, db_index=True, default='')
 
     class Meta:
         verbose_name = _('message')
@@ -268,6 +277,7 @@ class FilterValue(models.Model):
     FILTER_KEYS = (
         ('server_name', _('server name')),
         ('logger', _('logger')),
+        ('site', _('site')),
     )
     
     key = models.CharField(choices=FILTER_KEYS, max_length=32)
diff --git a/sentry/settings.py b/sentry/settings.py
index e6bf853ab1..d519d9819e 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -20,6 +20,7 @@ FILTERS = getattr(settings, 'SENTRY_FILTERS', (
     'sentry.filters.LoggerFilter',
     'sentry.filters.LevelFilter',
     'sentry.filters.ServerNameFilter',
+    'sentry.filters.SiteFilter',
 ))
 
 KEY = getattr(settings, 'SENTRY_KEY', md5_constructor(settings.SECRET_KEY).hexdigest())
@@ -55,4 +56,10 @@ else:
 
 CLIENT = getattr(settings, 'SENTRY_CLIENT', default_client)
 
-NAME = getattr(settings, 'SENTRY_NAME', socket.gethostname())
\ No newline at end of file
+NAME = getattr(settings, 'SENTRY_NAME', socket.gethostname())
+
+# We allow setting the site name either by explicitly setting it with the
+# SENTRY_SITE setting, or using the django.contrib.sites framework for
+# fetching the current site. Since we can't reliably query the database
+# from this module, the specific logic is within the SiteFilter
+SITE = getattr(settings, 'SENTRY_SITE', None)
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index bde28ae6de..cc9d64786c 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -487,8 +487,10 @@ class SentryTestCase(TestCase):
         settings.MIDDLEWARE_CLASSES = orig
 
     def testSettingName(self):
-        orig = settings.NAME
+        orig_name = settings.NAME
+        orig_site = settings.SITE
         settings.NAME = 'foo'
+        settings.SITE = 'bar'
         
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
 
@@ -500,9 +502,11 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, 'view exception')
         self.assertEquals(last.server_name, 'foo')
+        self.assertEquals(last.site, 'bar')
         self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
         
-        settings.NAME = orig
+        settings.NAME = orig_name
+        settings.SITE = orig_site
 
     def testExclusionViewPath(self):
         try: Message.objects.get(pk=1341324)
@@ -625,7 +629,7 @@ class RemoteSentryTest(TestCase):
         self.assertEquals(resp.content, 'Bad data')
 
     def testCorrectData(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40}
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
             'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
             'key': settings.KEY,
@@ -635,9 +639,10 @@ class RemoteSentryTest(TestCase):
         self.assertEquals(instance.message, 'hello')
         self.assertEquals(instance.server_name, 'not_dcramer.local')
         self.assertEquals(instance.level, 40)
+        self.assertEquals(instance.site, 'not_a_real_site')
 
     def testUngzippedData(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40}
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
             'data': base64.b64encode(pickle.dumps(transform(kwargs))),
             'key': settings.KEY,
@@ -646,12 +651,16 @@ class RemoteSentryTest(TestCase):
         instance = Message.objects.get()
         self.assertEquals(instance.message, 'hello')
         self.assertEquals(instance.server_name, 'not_dcramer.local')
+        self.assertEquals(instance.site, 'not_a_real_site')
         self.assertEquals(instance.level, 40)
 
     def testByteSequence(self):
         """
         invalid byte sequence for encoding "UTF8": 0xedb7af
         """
+        # TODO:
+        # add 'site' to data in fixtures/bad_data.json, then assert it's set correctly below
+
         fname = os.path.join(os.path.dirname(__file__), 'fixtures/bad_data.json')
         data = open(fname).read()
         
@@ -837,4 +846,4 @@ class SentryManageTest(TestCase):
         command = Command()
         command.handle(days=1)
         
-        self.assertEquals(Message.objects.count(), 0)
\ No newline at end of file
+        self.assertEquals(Message.objects.count(), 0)
