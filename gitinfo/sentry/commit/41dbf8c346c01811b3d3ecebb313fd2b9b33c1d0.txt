commit 41dbf8c346c01811b3d3ecebb313fd2b9b33c1d0
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 31 12:40:10 2011 -0800

    Refactor permissions to use simple groups rather than fine grained permissions

diff --git a/sentry/migrations/0029_auto__del_field_projectmember_is_superuser__del_field_projectmember_pe.py b/sentry/migrations/0029_auto__del_field_projectmember_is_superuser__del_field_projectmember_pe.py
new file mode 100644
index 0000000000..683b35d236
--- /dev/null
+++ b/sentry/migrations/0029_auto__del_field_projectmember_is_superuser__del_field_projectmember_pe.py
@@ -0,0 +1,172 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Deleting field 'ProjectMember.is_superuser'
+        db.delete_column('sentry_projectmember', 'is_superuser')
+
+        # Deleting field 'ProjectMember.permissions'
+        db.delete_column('sentry_projectmember', 'permissions')
+
+        # Adding field 'ProjectMember.type'
+        db.add_column('sentry_projectmember', 'type', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Adding field 'ProjectMember.is_superuser'
+        db.add_column('sentry_projectmember', 'is_superuser', self.gf('django.db.models.fields.BooleanField')(default=False), keep_default=False)
+
+        # User chose to not deal with backwards NULL issues for 'ProjectMember.permissions'
+        raise RuntimeError("Cannot reverse this migration. 'ProjectMember.permissions' and its values cannot be restored.")
+
+        # Deleting field 'ProjectMember.type'
+        db.delete_column('sentry_projectmember', 'type')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoptions': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'ProjectOptions'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index aefc2e551d..4e3bcb206c 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -34,9 +34,11 @@ from sentry.templatetags.sentry_helpers import truncatechars
 
 __all__ = ('Event', 'Group')
 
+STATUS_UNRESOLVED = 0
+STATUS_RESOLVED = 1
 STATUS_LEVELS = (
-    (0, _('unresolved')),
-    (1, _('resolved')),
+    (STATUS_UNRESOLVED, _('unresolved')),
+    (STATUS_RESOLVED, _('resolved')),
 )
 
 # These are predefined builtin's
@@ -46,18 +48,14 @@ FILTER_KEYS = (
     ('site', _('site')),
 )
 
-PERMISSIONS = (
-    ('read_message', 'View events'),
-    ('change_message_status', 'Change event status'),
-    ('add_member', 'Add project members'),
-    ('change_member', 'Change project members'),
-    ('delete_member', 'Delete project members'),
-    ('add_message', 'Store new events'),
-    ('change_project', 'Change project details'),
-    ('remove_project', 'Delete or merge project'),
-    ('change_project_options', 'Change project options'),
+MEMBER_OWNER = 0
+MEMBER_USER = 50
+MEMBER_SYSTEM = 100
+MEMBER_TYPES = (
+    (0, _('owner')),
+    (50, _('user')),
+    (100, _('system agent')),
 )
-PERMISSIONS_DICT = dict(PERMISSIONS)
 
 PROJECT_OPTIONS = (
     # ('event_cutoff', 'Time (in seconds) before an event should be trimmed'),
@@ -104,10 +102,9 @@ class ProjectOptions(Model):
 class ProjectMember(Model):
     project = models.ForeignKey(Project, related_name="member_set")
     user = models.ForeignKey(User, related_name="project_set")
-    is_superuser = models.BooleanField(default=False)
     public_key = models.CharField(max_length=32, unique=True, null=True)
     secret_key = models.CharField(max_length=32, unique=True, null=True)
-    permissions = BitField(flags=[p[0] for p in PERMISSIONS])
+    type = models.IntegerField(choices=MEMBER_TYPES, default=MEMBER_OWNER)
     date_added = models.DateTimeField(default=datetime.now)
 
     class Meta:
@@ -120,11 +117,6 @@ class ProjectMember(Model):
             self.secret_key = ProjectMember.generate_api_key()
         super(ProjectMember, self).save(*args, **kwargs)
 
-    def has_perm(self, flag):
-        if self.is_superuser:
-            return True
-        return getattr(self.permissions, flag, False)
-
     @classmethod
     def generate_api_key(cls):
         return uuid.uuid4().hex
@@ -462,7 +454,7 @@ def create_default_project(created_models, verbosity=2, **kwargs):
             ProjectMember.objects.create(
                 project=project,
                 user=owner,
-                is_superuser=True,
+                type=MEMBER_OWNER,
             )
 
         if verbosity > 0:
diff --git a/sentry/templates/sentry/dashboard.html b/sentry/templates/sentry/dashboard.html
index 0c717e5eb7..e188835a0d 100644
--- a/sentry/templates/sentry/dashboard.html
+++ b/sentry/templates/sentry/dashboard.html
@@ -8,17 +8,25 @@
 
 {% block content %}
     <div class="span16">
-        <div class="alert-message info">Select a project to view the stream of events...</div>
-        <ul class="sparkline-grid">
-            {% for project in project_list %}
-                <li>
-                    <a href="{% url sentry project.pk %}">
-                        <h3>{{ project.name }}</h3>
-                        <div class="sparkline" data-project="{{ project.pk }}" data-api-url="{% url sentry-ajax project.pk %}"></div>
-                    </a>
-                </li>
-            {% endfor %}
-        </ul>
+        {% if project_list %}
+            <div class="alert-message info">Select a project to view the stream of events...</div>
+            <ul class="sparkline-grid">
+                {% for project in project_list %}
+                    <li>
+                        <a href="{% url sentry project.pk %}">
+                            <h3>{{ project.name }}</h3>
+                            <div class="sparkline" data-project="{{ project.pk }}" data-api-url="{% url sentry-ajax project.pk %}"></div>
+                        </a>
+                    </li>
+                {% endfor %}
+            </ul>
+        {% else %}
+            {% if can_create_projects %}
+                <div class="alert-message info">You do not have access to any projects. Would you like to <a href="{% url sentry-new-project %}">create a new project</a>?</div>
+            {% else %}
+                <div class="alert-message notice">You do not have access to any projects. Ask an administrator to add you as a member.</div>
+            {% endif %}
+        {% endif %}
     </div>
 {% endblock %}
 
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index 3388c7559a..ca94bc567f 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -70,18 +70,11 @@
             </tr>
         </thead>
         <tbody>
-            {% for member, user, permissions in member_list %}
+            {% for member, user in member_list %}
                 <tr>
                     <td><a href="{% url sentry-edit-project-member project.pk member.pk %}">{{ user.username }}</a></td>
                     <td>
-                        {% if member.is_superuser %}
-                            <strong>superuser</strong>
-                        {% else %}
-                            {% for perm in permissions %}
-                                {{ perm }}
-                                {% if not loop.last %}, {% endif %}
-                            {% endfor %}
-                        {% endif %}
+                        {{ member.get_type_display }}
                     </td>
                     <td>
                         {% if user == project.owner %}
diff --git a/sentry/templates/sentry/projects/members/edit.html b/sentry/templates/sentry/projects/members/edit.html
index 6627b36259..e4d47b2023 100644
--- a/sentry/templates/sentry/projects/members/edit.html
+++ b/sentry/templates/sentry/projects/members/edit.html
@@ -42,19 +42,11 @@
             <div class="page-header">
                 <h2>{% trans "Access" %}</h2>
             </div>
-            <div class="clearfix{% if form.is_superuser.errors %} error{% endif %}">
-                <div class="input">
-                    <label>{{ form.is_superuser }} This member is a <strong>superuser</strong></label>
-                </div>
-                {% if form.is_superuser.help_text %}
-                    <span class="help-block">{{ form.is_superuser.help_text }}</span>
-                {% endif %}
-            </div>
-            <div class="clearfix{% if form.permissions.errors %} error{% endif %}">
-                {{ form.permissions.label_tag }}
-                <div class="input">{{ form.permissions }}</div>
-                {% if form.permissions.help_text %}
-                    <span class="help-block">{{ form.permissions.help_text }}</span>
+            <div class="clearfix{% if form.type.errors %} error{% endif %}">
+                {{ form.type.label_tag }}
+                <div class="input">{{ form.type }}</div>
+                {% if form.type.help_text %}
+                    <span class="help-block">{{ form.type.help_text }}</span>
                 {% endif %}
             </div>
         </fieldset>
diff --git a/sentry/templates/sentry/projects/members/new.html b/sentry/templates/sentry/projects/members/new.html
index b92b90241f..55148e0e34 100644
--- a/sentry/templates/sentry/projects/members/new.html
+++ b/sentry/templates/sentry/projects/members/new.html
@@ -38,19 +38,11 @@
             <div class="page-header">
                 <h2>{% trans "Access" %}</h2>
             </div>
-            <div class="clearfix{% if form.is_superuser.errors %} error{% endif %}">
-                <div class="input">
-                    <label>{{ form.is_superuser }} This member is a <strong>superuser</strong></label>
-                </div>
-                {% if form.is_superuser.help_text %}
-                    <span class="help-block">{{ form.is_superuser.help_text }}</span>
-                {% endif %}
-            </div>
-            <div class="clearfix{% if form.permissions.errors %} error{% endif %}">
-                {{ form.permissions.label_tag }}
-                <div class="input">{{ form.permissions }}</div>
-                {% if form.permissions.help_text %}
-                    <span class="help-block">{{ form.permissions.help_text }}</span>
+            <div class="clearfix{% if form.type.errors %} error{% endif %}">
+                {{ form.type.label_tag }}
+                <div class="input">{{ form.type }}</div>
+                {% if form.type.help_text %}
+                    <span class="help-block">{{ form.type.help_text }}</span>
                 {% endif %}
             </div>
         </fieldset>
diff --git a/sentry/web/api.py b/sentry/web/api.py
index ef81d31e67..26bde1d27f 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -14,6 +14,7 @@ from sentry.coreapi import (parse_auth_header, project_from_auth_vars, project_f
                             project_from_id, decode_and_decompress_data, safely_load_json_string,
                             ensure_valid_project_id, insert_data_to_database, APIError, APIUnauthorized)
 
+
 def extract_auth_vars(request):
     if request.META.get('HTTP_X_SENTRY_AUTH', '').startswith('Sentry'):
         # Auth version 3.0 (same as 2.0, diff header)
@@ -24,6 +25,7 @@ def extract_auth_vars(request):
     else:
         return None
 
+
 @csrf_exempt
 @require_http_methods(['POST'])
 def store(request):
@@ -52,4 +54,4 @@ def store(request):
     except APIError, error:
         return HttpResponse(error.msg, status=error.http_status)
     return HttpResponse('')
-    
+
diff --git a/sentry/web/decorators.py b/sentry/web/decorators.py
index ab03dde471..2ccb25f4b5 100644
--- a/sentry/web/decorators.py
+++ b/sentry/web/decorators.py
@@ -6,21 +6,23 @@ from sentry.models import Project
 from sentry.web.helpers import get_project_list, render_to_response, get_login_url
 
 
-def can_manage(perm_or_func=None):
+def has_access(group_or_func=None):
     """
     Tests and transforms project_id for permissions based on the requesting user. Passes
     the actual project instance to the decorated view.
 
-    >>> @can_manage('read_message')
+    The default permission scope is 'user'.
+
+    >>> @has_access('owner')
     >>> def foo(request, project):
     >>>     return
 
-    >>> @can_manage
+    >>> @has_access
     >>> def foo(request, project):
     >>>     return
     """
-    if callable(perm_or_func):
-        return can_manage(None)(perm_or_func)
+    if callable(group_or_func):
+        return has_access(None)(group_or_func)
 
     def wrapped(func):
         def _wrapped(request, project_id=None, *args, **kwargs):
@@ -36,7 +38,7 @@ def can_manage(perm_or_func=None):
                 return func(request, project, *args, **kwargs)
 
             if project_id:
-                project_list = get_project_list(request.user, perm_or_func)
+                project_list = get_project_list(request.user, group_or_func)
 
                 try:
                     project = project_list[int(project_id)]
diff --git a/sentry/web/forms.py b/sentry/web/forms.py
index 0721fb9fad..d31ef0fd07 100644
--- a/sentry/web/forms.py
+++ b/sentry/web/forms.py
@@ -1,13 +1,9 @@
-from bitfield import BitHandler
-from itertools import chain
-
 from django import forms
 from django.contrib.auth.models import User
 from django.utils.encoding import force_unicode
-from django.utils.html import conditional_escape
 from django.utils.safestring import mark_safe
 
-from sentry.models import Project, ProjectMember, PERMISSIONS
+from sentry.models import Project, ProjectMember
 from sentry.interfaces import Http
 
 
@@ -24,58 +20,6 @@ class RadioFieldRenderer(forms.widgets.RadioFieldRenderer):
                 % force_unicode(w) for w in self]))
 
 
-class CheckboxSelectMultiple(forms.CheckboxSelectMultiple):
-    """
-    This is identical to Django's builtin widget, except that
-    it renders as <ul.inputs-list>. Would be great if we didn't
-    have to create this stupid code, but Django widgets are not
-    flexible.
-    """
-    def render(self, name, value, attrs=None, choices=()):
-        if value is None:
-            value = []
-        has_id = attrs and 'id' in attrs
-        final_attrs = self.build_attrs(attrs, name=name)
-        output = [u'<ul class="inputs-list">']
-        # Normalize to strings
-        str_values = set([force_unicode(v) for v in value])
-        for i, (option_value, option_label) in enumerate(chain(self.choices, choices)):
-            # If an ID attribute was given, add a numeric index as a suffix,
-            # so that the checkboxes don't all have the same ID attribute.
-            if has_id:
-                final_attrs = dict(final_attrs, id='%s_%s' % (attrs['id'], i))
-                label_for = u' for="%s"' % final_attrs['id']
-            else:
-                label_for = ''
-
-            cb = forms.CheckboxInput(final_attrs, check_test=lambda value: value in str_values)
-            option_value = force_unicode(option_value)
-            rendered_cb = cb.render(name, option_value)
-            option_label = conditional_escape(force_unicode(option_label))
-            output.append(u'<li><label%s>%s %s</label></li>' % (label_for, rendered_cb, option_label))
-        output.append(u'</ul>')
-        return mark_safe(u'\n'.join(output))
-
-
-class BitFieldCheckboxSelectMultiple(CheckboxSelectMultiple):
-    def render(self, name, value, attrs=None, choices=()):
-        if value is not None:
-            value = [k for k, v in value if v]
-        return super(BitFieldCheckboxSelectMultiple, self).render(
-          name, value, attrs=attrs, choices=choices)
-
-    def _has_changed(self, initial, data):
-        if initial is None:
-            initial = []
-        if data is None:
-            data = []
-        if initial != data:
-            return True
-        initial_set = set([force_unicode(value) for value in initial])
-        data_set = set([force_unicode(value) for value in data])
-        return data_set != initial_set
-
-
 class UserField(forms.CharField):
     class widget(forms.widgets.TextInput):
         def render(self, name, value, attrs=None):
@@ -134,27 +78,14 @@ class EditProjectForm(forms.ModelForm):
 
 
 class BaseProjectMemberForm(forms.ModelForm):
-    permissions = forms.MultipleChoiceField(choices=PERMISSIONS, widget=BitFieldCheckboxSelectMultiple(), required=False)
-    is_superuser = forms.BooleanField(required=False, help_text="Grants the user all permissions")
-
     class Meta:
-        fields = ('is_superuser', 'permissions')
+        fields = ('type',)
         model = ProjectMember
 
     def __init__(self, project, *args, **kwargs):
         self.project = project
         super(BaseProjectMemberForm, self).__init__(*args, **kwargs)
 
-    def clean_permissions(self):
-        value = self.cleaned_data['permissions']
-        if not value:
-            return 0
-
-        result = BitHandler(0, ProjectMember.permissions.keys())
-        for k in value:
-            setattr(result, k, True)
-        return int(result)
-
 
 EditProjectMemberForm = BaseProjectMemberForm
 
@@ -163,7 +94,7 @@ class NewProjectMemberForm(BaseProjectMemberForm):
     user = UserField()
 
     class Meta:
-        fields = ('user', 'is_superuser', 'permissions')
+        fields = ('user', 'type')
         model = ProjectMember
 
     def clean_user(self):
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index 3a5a7ddb31..05154cd1b8 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -6,14 +6,14 @@ from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
 from sentry.models import Event
-from sentry.web.decorators import login_required, can_manage, render_to_response
+from sentry.web.decorators import login_required, has_access, render_to_response
 from sentry.web.forms import ReplayForm
 from sentry.utils import get_filters
 from sentry.replays import Replayer
 
 
 @login_required
-@can_manage('read_message')
+@has_access
 def event_list(request, project):
     filters = []
     for filter_ in get_filters(Event):
diff --git a/sentry/web/frontend/generic.py b/sentry/web/frontend/generic.py
index 5fa5b37eeb..2c59936893 100644
--- a/sentry/web/frontend/generic.py
+++ b/sentry/web/frontend/generic.py
@@ -11,7 +11,8 @@ from sentry import environment
 from sentry.conf import settings
 from sentry.plugins import GroupActionProvider
 from sentry.web.decorators import login_required
-from sentry.web.helpers import get_project_list, render_to_response
+from sentry.web.helpers import get_project_list, render_to_response, \
+  get_login_url
 
 
 @login_required
@@ -19,6 +20,8 @@ def dashboard(request):
     project_list = get_project_list(request.user)
     if len(project_list) == 1:
         return HttpResponseRedirect(reverse('sentry', kwargs={'project_id': project_list.keys()[0]}))
+    if len(project_list) == 0 and not request.user.is_authenticated():
+        return HttpResponseRedirect(get_login_url())
     return render_to_response('sentry/dashboard.html', request=request)
 
 
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 58ceb24b82..13f2aa4316 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -23,7 +23,7 @@ from sentry.conf import settings
 from sentry.models import Group, Event, Project
 from sentry.plugins import GroupActionProvider
 from sentry.utils import get_filters, json
-from sentry.web.decorators import can_manage, login_required
+from sentry.web.decorators import has_access, login_required
 from sentry.web.helpers import render_to_response, \
     get_project_list
 
@@ -33,7 +33,7 @@ event_re = re.compile(r'^(?P<event_id>[a-z0-9]{32})\$(?P<checksum>[a-z0-9]{32})$
 
 @login_required
 @csrf_exempt
-@can_manage
+@has_access
 def ajax_handler(request, project):
     # TODO: remove this awful idea of an API
     op = request.REQUEST.get('op')
@@ -167,7 +167,7 @@ def ajax_handler(request, project):
 
 
 @login_required
-@can_manage('read_message')
+@has_access
 def search(request, project):
     query = request.GET.get('q')
 
@@ -219,7 +219,7 @@ def search(request, project):
 
 
 @login_required
-@can_manage('read_message')
+@has_access
 def group_list(request, project):
     filters = []
     for filter_ in get_filters(Group):
@@ -285,7 +285,7 @@ def group_list(request, project):
 
 
 @login_required
-@can_manage('read_message')
+@has_access
 def group_json(request, project, group_id):
     group = get_object_or_404(Group, pk=group_id)
 
@@ -314,7 +314,7 @@ def group_json(request, project, group_id):
 
 
 @login_required
-@can_manage('read_message')
+@has_access
 def group(request, project, group_id):
     group = get_object_or_404(Group, pk=group_id)
 
@@ -339,7 +339,7 @@ def group(request, project, group_id):
 
 
 @login_required
-@can_manage('read_message')
+@has_access
 def group_event_list(request, project, group_id):
     group = get_object_or_404(Group, pk=group_id)
 
@@ -357,7 +357,7 @@ def group_event_list(request, project, group_id):
 
 
 @login_required
-@can_manage('read_message')
+@has_access
 def group_event_details(request, project, group_id, event_id):
     group = get_object_or_404(Group, pk=group_id)
 
@@ -377,7 +377,7 @@ def group_event_details(request, project, group_id, event_id):
 
 
 @login_required
-@can_manage('read_message')
+@has_access
 def group_plugin_action(request, project, group_id, slug):
     group = get_object_or_404(Group, pk=group_id)
 
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index cb5ac69c26..c4a46a781e 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -3,8 +3,8 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect, HttpResponseForbidden
 from django.views.decorators.csrf import csrf_protect
 
-from sentry.models import PERMISSIONS_DICT
-from sentry.web.decorators import login_required, can_manage, \
+from sentry.models import MEMBER_USER, MEMBER_OWNER
+from sentry.web.decorators import login_required, has_access, \
      permission_required
 from sentry.web.forms import EditProjectForm, NewProjectForm, \
      EditProjectMemberForm, NewProjectMemberForm, RemoveProjectForm
@@ -14,7 +14,6 @@ from sentry.web.helpers import render_to_response, get_project_list
 @login_required
 def project_list(request):
     return render_to_response('sentry/projects/list.html', {
-        'can_create_projects': request.user.has_perm('sentry.add_project'),
         'project_list': get_project_list(request.user, hidden=True).values(),
     }, request)
 
@@ -30,7 +29,7 @@ def new_project(request):
 
         project.member_set.create(
             user=project.owner,
-            is_superuser=True,
+            type=MEMBER_OWNER,
         )
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
 
@@ -43,7 +42,7 @@ def new_project(request):
 
 
 @login_required
-@can_manage('remove_project')
+@has_access('remove_project')
 @csrf_protect
 def remove_project(request, project):
     project_list = filter(lambda x: x != project, get_project_list(request.user).itervalues())
@@ -74,7 +73,7 @@ def remove_project(request, project):
 
 
 @login_required
-@can_manage('change_project')
+@has_access('change_project')
 @csrf_protect
 def manage_project(request, project):
     form = EditProjectForm(request.POST or None, instance=project)
@@ -84,10 +83,7 @@ def manage_project(request, project):
 
         return HttpResponseRedirect(request.path + '?success=1')
 
-    member_list = [
-        (pm, pm.user, [(k, PERMISSIONS_DICT[k]) for k, v in pm.permissions if v])
-        for pm in project.member_set.select_related('user')
-    ]
+    member_list = [(pm, pm.user) for pm in project.member_set.select_related('user')]
 
     context = csrf(request)
     context.update({
@@ -100,9 +96,11 @@ def manage_project(request, project):
 
 
 @csrf_protect
-@can_manage('add_member')
+@has_access('owner')
 def new_project_member(request, project):
-    form = NewProjectMemberForm(project, request.POST or None)
+    form = NewProjectMemberForm(project, request.POST or None, initial={
+        'type': MEMBER_USER,
+    })
     if form.is_valid():
         pm = form.save(commit=False)
         pm.project = project
@@ -120,7 +118,7 @@ def new_project_member(request, project):
 
 
 @csrf_protect
-@can_manage('change_member')
+@has_access('change_member')
 def edit_project_member(request, project, member_id):
     member = project.member_set.get(pk=member_id)
 
@@ -141,7 +139,7 @@ def edit_project_member(request, project, member_id):
 
 
 @csrf_protect
-@can_manage('delete_member')
+@has_access('delete_member')
 def remove_project_member(request, project, member_id):
     member = project.member_set.get(pk=member_id)
     if member.user == project.owner:
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index 3cbcc23870..2917d326ca 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -79,6 +79,7 @@ def render_to_string(template, context=None, request=None):
         'has_search': False,
         'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
         'PROJECT_ID': settings.PROJECT,
+        'can_create_projects': request.user.has_perm('sentry.add_project'),
     })
 
     if request:
