commit aa644b050c59c16614ad6d546cbc29c4419a2a96
Author: Max Bittker <maxbittker@gmail.com>
Date:   Mon Jul 17 18:30:07 2017 -0700

    fix codemod blip from jest transition (#5727)
    
    fix jest asserts

diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index ba858b6316..1c2abf472b 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -104,7 +104,7 @@ describe('AssigneeSelector', function() {
         .ref('filter')
         .simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
 
-      expect(this.assignTo.calledOnce).toBeTruthy;
+      expect(this.assignTo.calledOnce).toBeTruthy();
       expect(this.assignTo.lastCall.args[0]).toHaveProperty('name', 'Jane Doe');
     });
 
@@ -116,7 +116,7 @@ describe('AssigneeSelector', function() {
         .ref('filter')
         .simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
 
-      expect(this.assignTo.notCalled).toBeTruthy;
+      expect(this.assignTo.notCalled).toBeTruthy();
     });
 
     it('should do nothing if a non-Enter key is pressed', function() {
@@ -126,7 +126,7 @@ describe('AssigneeSelector', function() {
       assigneeSelector
         .ref('filter')
         .simulate('keyDown', {key: 'h', keyCode: 72, which: 72});
-      expect(this.assignTo.notCalled).toBeTruthy;
+      expect(this.assignTo.notCalled).toBeTruthy();
     });
   });
 
@@ -144,7 +144,7 @@ describe('AssigneeSelector', function() {
 
       assigneeSelector.ref('filter').simulate('keyUp', {key: 'Escape'});
 
-      expect(closeStub.calledOnce).toBeTruthy;
+      expect(closeStub.calledOnce).toBeTruthy();
     });
 
     it('should update the local filter state if any other key is pressed', function() {
@@ -167,8 +167,8 @@ describe('AssigneeSelector', function() {
 
       this.assigneeSelector.setState({assignedTo: USER_1});
 
-      expect(instance.attachTooltips.calledOnce).toBeTruthy;
-      expect(instance.removeTooltips.calledOnce).toBeTruthy;
+      expect(instance.attachTooltips.calledOnce).toBeTruthy();
+      expect(instance.removeTooltips.calledOnce).toBeTruthy();
     });
   });
 });
diff --git a/tests/js/spec/components/avatar.spec.jsx b/tests/js/spec/components/avatar.spec.jsx
index 64e076851c..d879361ad6 100644
--- a/tests/js/spec/components/avatar.spec.jsx
+++ b/tests/js/spec/components/avatar.spec.jsx
@@ -29,7 +29,7 @@ describe('Avatar', function() {
       this.sandbox.stub(avatar, 'buildGravatarUrl');
       this.sandbox.stub(avatar, 'buildProfileUrl');
       avatar.renderImg();
-      expect(avatar.buildGravatarUrl.calledOnce).toBeTruthy;
+      expect(avatar.buildGravatarUrl.calledOnce).toBeTruthy();
       expect(avatar.buildProfileUrl.called).not.toBeTruthy();
     });
 
@@ -44,7 +44,7 @@ describe('Avatar', function() {
       this.sandbox.stub(avatar, 'buildGravatarUrl');
       this.sandbox.stub(avatar, 'buildProfileUrl');
       avatar.renderImg();
-      expect(avatar.buildProfileUrl.calledOnce).toBeTruthy;
+      expect(avatar.buildProfileUrl.calledOnce).toBeTruthy();
       expect(avatar.buildGravatarUrl.called).not.toBeTruthy();
     });
 
@@ -68,7 +68,7 @@ describe('Avatar', function() {
       this.sandbox.stub(avatar, 'buildGravatarUrl');
       this.sandbox.stub(avatar, 'buildProfileUrl');
       avatar.renderImg();
-      expect(avatar.buildGravatarUrl.calledOnce).toBeTruthy;
+      expect(avatar.buildGravatarUrl.calledOnce).toBeTruthy();
       expect(avatar.buildProfileUrl.called).not.toBeTruthy();
     });
 
diff --git a/tests/js/spec/stores/groupStore.spec.jsx b/tests/js/spec/stores/groupStore.spec.jsx
index e47e527788..4a0f080ba9 100644
--- a/tests/js/spec/stores/groupStore.spec.jsx
+++ b/tests/js/spec/stores/groupStore.spec.jsx
@@ -55,7 +55,7 @@ describe('GroupStore', function() {
         this.sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdate(1337, undefined, 'somedata');
 
-        expect(GroupStore.trigger.calledOnce).toBeTruthy;
+        expect(GroupStore.trigger.calledOnce).toBeTruthy();
         expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
       });
     });
@@ -65,7 +65,7 @@ describe('GroupStore', function() {
         this.sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdateSuccess(1337, undefined, 'somedata');
 
-        expect(GroupStore.trigger.calledOnce).toBeTruthy;
+        expect(GroupStore.trigger.calledOnce).toBeTruthy();
         expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
       });
     });
@@ -75,7 +75,7 @@ describe('GroupStore', function() {
         this.sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdateError(1337, undefined, 'something failed', false);
 
-        expect(GroupStore.trigger.calledOnce).toBeTruthy;
+        expect(GroupStore.trigger.calledOnce).toBeTruthy();
         expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
       });
     });
diff --git a/tests/js/spec/stores/streamTagStore.spec.jsx b/tests/js/spec/stores/streamTagStore.spec.jsx
index bd53ac04e0..62456304c9 100644
--- a/tests/js/spec/stores/streamTagStore.spec.jsx
+++ b/tests/js/spec/stores/streamTagStore.spec.jsx
@@ -54,7 +54,7 @@ describe('StreamTagStore', function() {
         values: []
       });
 
-      expect(StreamTagStore.trigger.calledOnce).toBeTruthy;
+      expect(StreamTagStore.trigger.calledOnce).toBeTruthy();
     });
 
     it('should not overwrite predefined filters', () => {
diff --git a/tests/js/spec/utils/logging.spec.jsx b/tests/js/spec/utils/logging.spec.jsx
index 426eb3ce88..648464f020 100644
--- a/tests/js/spec/utils/logging.spec.jsx
+++ b/tests/js/spec/utils/logging.spec.jsx
@@ -23,7 +23,7 @@ describe('logging', function() {
         {foo: 'bar'} /* context */
       );
 
-      expect(Raven.captureMessage.calledOnce).toBeTruthy;
+      expect(Raven.captureMessage.calledOnce).toBeTruthy();
       expect(Raven.captureMessage.getCall(0).args[0]).toEqual(
         'HTTP 500: A bad thing happened'
       );
@@ -39,7 +39,7 @@ describe('logging', function() {
         {foo: 'bar'} /* context */
       );
 
-      expect(Raven.captureMessage.calledOnce).toBeTruthy;
+      expect(Raven.captureMessage.calledOnce).toBeTruthy();
       expect(Raven.captureMessage.getCall(0).args[0]).toEqual(
         'HTTP 401: You are not authenticated'
       );
@@ -49,7 +49,7 @@ describe('logging', function() {
     it('should handle responseJSON/responseText undefined (bad content type?)', function() {
       logAjaxError({status: 404}, {foo: 'bar'} /* context */);
 
-      expect(Raven.captureMessage.calledOnce).toBeTruthy;
+      expect(Raven.captureMessage.calledOnce).toBeTruthy();
       expect(Raven.captureMessage.getCall(0).args[0]).toEqual(
         'HTTP 404: <unknown response>'
       );
diff --git a/tests/js/spec/views/groupActivity/index.spec.jsx b/tests/js/spec/views/groupActivity/index.spec.jsx
index 2458500820..51f7189f8c 100644
--- a/tests/js/spec/views/groupActivity/index.spec.jsx
+++ b/tests/js/spec/views/groupActivity/index.spec.jsx
@@ -58,7 +58,7 @@ describe('GroupActivity', function() {
 
       let request = this.sandbox.stub(instance.api, 'request');
       instance.onNoteDelete({id: 1});
-      expect(request.calledOnce).toBeTruthy;
+      expect(request.calledOnce).toBeTruthy();
       expect(request.getCall(0).args[0]).toEqual('/issues/1337/comments/1/');
       expect(request.getCall(0).args[1]).toHaveProperty('method', 'DELETE');
     });
diff --git a/tests/js/spec/views/projectReleases.spec.jsx b/tests/js/spec/views/projectReleases.spec.jsx
index 24c52f543a..575c72d367 100644
--- a/tests/js/spec/views/projectReleases.spec.jsx
+++ b/tests/js/spec/views/projectReleases.spec.jsx
@@ -49,7 +49,7 @@ describe('ProjectReleases', function() {
 
       projectReleases.instance().onSearch('searchquery');
 
-      expect(browserHistory.pushState.calledOnce).toBeTruthy;
+      expect(browserHistory.pushState.calledOnce).toBeTruthy();
       expect(browserHistory.pushState.args[0]).toEqual([
         null,
         '/123/456/releases/',
@@ -75,7 +75,7 @@ describe('ProjectReleases', function() {
       };
       projectReleases.componentWillReceiveProps(newProps);
 
-      expect(setState.calledOnce).toBeTruthy;
+      expect(setState.calledOnce).toBeTruthy();
       expect(setState.getCall(0).args[0]).toEqual({
         query: 'newquery'
       });
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index c351d3c2a8..fbc3674447 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -41,8 +41,8 @@ describe('StreamActions', function() {
 
         this.actions.actionSelectedGroups(callback);
 
-        expect(callback.withArgs(undefined).calledOnce).toBeTruthy;
-        expect(SelectedGroupStore.deselectAll.calledOnce).toBeTruthy;
+        expect(callback.withArgs(undefined).calledOnce).toBeTruthy();
+        expect(SelectedGroupStore.deselectAll.calledOnce).toBeTruthy();
 
         // all selected is reset
         expect(this.actions.state.allInQuerySelected, false);
@@ -60,8 +60,8 @@ describe('StreamActions', function() {
         let callback = this.sandbox.stub();
         this.actions.actionSelectedGroups(callback);
 
-        expect(callback.withArgs([1, 2, 3]).calledOnce).toBeTruthy;
-        expect(SelectedGroupStore.deselectAll.calledOnce).toBeTruthy;
+        expect(callback.withArgs([1, 2, 3]).calledOnce).toBeTruthy();
+        expect(SelectedGroupStore.deselectAll.calledOnce).toBeTruthy();
       });
     });
   });
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index dcb19ac0c2..b201268639 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -118,7 +118,7 @@ describe('SearchBar', function() {
 
         wrapper.find('input').simulate('keyup', {key: 'Escape', keyCode: '27'});
 
-        expect(instance.blur.calledOnce).toBeTruthy;
+        expect(instance.blur.calledOnce).toBeTruthy();
       });
     });
   });
