commit c275b05da58d6fa7b9a7dbec1d86a79f14acebc3
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 6 14:51:34 2015 -0800

    Large refactor of React components
    
    - Aggregate => Group
    - Add OrganizationState
    - Add GroupState
    - State inheritance

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index d9ab92536f..7e662bad71 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -45,6 +45,7 @@ class ProjectDetailsEndpoint(Endpoint):
             'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
         }
         data['team'] = serialize(project.team, request.user)
+        data['organization'] = serialize(project.organization, request.user)
 
         return Response(data)
 
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index c6cb051f2c..f723eac3a0 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -50,7 +50,10 @@ class TeamDetailsEndpoint(Endpoint):
 
         assert_perm(team, request.user, request.auth)
 
-        return Response(serialize(team, request.user))
+        context = serialize(team, request.user)
+        context['organization'] = serialize(team.organization, request.user)
+
+        return Response(context)
 
     @sudo_required
     def put(self, request, organization_slug, team_slug):
diff --git a/src/sentry/static/sentry/app/actions/aggregateListActions.jsx b/src/sentry/static/sentry/app/actions/groupActions.jsx
similarity index 73%
rename from src/sentry/static/sentry/app/actions/aggregateListActions.jsx
rename to src/sentry/static/sentry/app/actions/groupActions.jsx
index 7fad97f765..0c5eb0a483 100644
--- a/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
+++ b/src/sentry/static/sentry/app/actions/groupActions.jsx
@@ -4,8 +4,8 @@ var Reflux = require("reflux");
 
 
 // TODO(dcramer): we should probably just make every parameter update
-// work on bulk aggregates
-var AggregateListActions = Reflux.createActions([
+// work on bulk groups
+var GroupActions = Reflux.createActions([
   "assignTo",
   "assignToError",
   "assignToSuccess",
@@ -21,4 +21,4 @@ var AggregateListActions = Reflux.createActions([
 ]);
 
 
-module.exports = AggregateListActions;
+module.exports = GroupActions;
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index f3be412768..308ebe74bd 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -1,7 +1,7 @@
 /*** @jsx React.DOM */
 
 var $ = require("jquery");
-var AggregateListActions = require("./actions/aggregateListActions");
+var GroupActions = require("./actions/groupActions");
 
 class Client {
   constructor(options) {
@@ -55,16 +55,16 @@ class Client {
     var query = (params.itemIds ? {id: params.itemIds} : undefined);
     var id = this.uniqueId();
 
-    AggregateListActions.delete(id, params.itemIds);
+    GroupActions.delete(id, params.itemIds);
 
     return this.request(path, {
       query: query,
       method: "DELETE",
       success: (response) => {
-        AggregateListActions.deleteSuccess(id, params.itemIds, response);
+        GroupActions.deleteSuccess(id, params.itemIds, response);
       },
       error: (error) => {
-        AggregateListActions.deleteError(id, params.itemIds, error);
+        GroupActions.deleteError(id, params.itemIds, error);
       }
     });
   }
@@ -74,17 +74,17 @@ class Client {
     var query = (params.itemIds ? {id: params.itemIds} : undefined);
     var id = this.uniqueId();
 
-    AggregateListActions.update(id, params.itemIds, params.data);
+    GroupActions.update(id, params.itemIds, params.data);
 
     return this.request(path, {
       query: query,
       method: "PUT",
       data: params.data,
       success: (response) => {
-        AggregateListActions.updateSuccess(id, params.itemIds, response);
+        GroupActions.updateSuccess(id, params.itemIds, response);
       },
       error: (error) => {
-        AggregateListActions.updateError(id, params.itemIds, error);
+        GroupActions.updateError(id, params.itemIds, error);
       }
     });
   }
@@ -94,17 +94,17 @@ class Client {
     var query = (params.itemIds ? {id: params.itemIds} : undefined);
     var id = this.uniqueId();
 
-    AggregateListActions.merge(id, params.itemIds);
+    GroupActions.merge(id, params.itemIds);
 
     return this.request(path, {
       query: query,
       method: "PUT",
       data: {merge: 1},
       success: (response) => {
-        AggregateListActions.mergeSuccess(id, params.itemIds, response);
+        GroupActions.mergeSuccess(id, params.itemIds, response);
       },
       error: (error) => {
-        AggregateListActions.mergeError(id, params.itemIds, error);
+        GroupActions.mergeError(id, params.itemIds, error);
       }
     });
   }
@@ -113,16 +113,16 @@ class Client {
     var path = "/groups/" + params.id + "/";
     var id = this.uniqueId();
 
-    AggregateListActions.assignTo(id, params.id, {email: params.email});
+    GroupActions.assignTo(id, params.id, {email: params.email});
 
     return this.request(path, {
       method: "PUT",
       data: {assignedTo: params.email},
       success: (response) => {
-        AggregateListActions.assignToSuccess(id, params.id, response);
+        GroupActions.assignToSuccess(id, params.id, response);
       },
       error: (error) => {
-        AggregateListActions.assignToError(id, params.id, error);
+        GroupActions.assignToError(id, params.id, error);
       }
     });
   }
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 243356aaa8..709954be8f 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -4,7 +4,8 @@ var React = require("react");
 var Reflux = require("reflux");
 
 var api = require("../api");
-var AggregateListStore = require("../stores/aggregateListStore");
+var Gravatar = require("../components/gravatar");
+var GroupListStore = require("../stores/groupStore");
 var DropdownLink = require("./dropdownLink");
 var MenuItem = require("./menuItem");
 var PropTypes = require("../proptypes");
@@ -13,25 +14,48 @@ var AssigneeSelector = React.createClass({
   mixins: [Reflux.ListenerMixin],
 
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
+    group: PropTypes.Group.isRequired,
     memberList: React.PropTypes.instanceOf(Array).isRequired,
   },
 
-  assignTo: function(member) {
-    api.assignTo({id: this.props.aggregate.id, email: member.email});
+  getInitialState() {
+    return {
+      filterQuery: ''
+    };
   },
 
-  clearAssignTo: function() {
-    api.assignTo({id: this.props.aggregate.id, email: ''});
+  assignTo(member) {
+    api.assignTo({id: this.props.group.id, email: member.email});
+    this.setState({filterQuery: ''});
   },
 
-  render: function() {
-    var agg = this.props.aggregate;
+  clearAssignTo() {
+    api.assignTo({id: this.props.group.id, email: ''});
+    this.setState({filterQuery: ''});
+  },
+
+  onChangeFilter() {
+    this.setState({
+      filterQuery: event.target.value
+    });
+  },
+
+  onDropdownOpen() {
+    this.refs.filter.getDOMNode().focus();
+  },
+
+  onDropdownClose() {
+    this.setState({
+      filterQuery: ''
+    });
+  },
 
-    var loading = AggregateListStore.hasStatus(agg.id, 'assignTo');
+  render() {
+    var group = this.props.group;
+    var loading = GroupListStore.hasStatus(group.id, 'assignTo');
 
     var className = "assignee-selector anchor-right";
-    if (!agg.assignedTo) {
+    if (!group.assignedTo) {
       className += " unassigned";
     }
 
@@ -41,7 +65,8 @@ var AssigneeSelector = React.createClass({
         <MenuItem key={item.id}
                   disabled={!loading}
                   onSelect={this.assignTo.bind(this, item)} >
-          <img src={item.avatarUrl} className="avatar" />
+          <Gravatar email={item.email} className="avatar"
+                    size={24} />
           {item.name || item.email}
         </MenuItem>
       );
@@ -54,16 +79,21 @@ var AssigneeSelector = React.createClass({
         :
           <DropdownLink
             className="assignee-selector-toggle"
-            title={agg.assignedTo ?
-              <img src={agg.assignedTo.avatarUrl} className="avatar" />
+            onOpen={this.onDropdownOpen}
+            onClose={this.onDropdownClose}
+            title={group.assignedTo ?
+              <Gravatar email={group.assignedTo.email} className="avatar"
+                        size={24} />
               :
               <span className="icon-user" />
             }>
             <MenuItem noAnchor={true} key="filter">
-              <input type="text" className="form-control input-sm" placeholder="Filter people" />
+              <input type="text" className="form-control input-sm"
+                     placeholder="Filter people" ref="filter" />
             </MenuItem>
-            {agg.assignedTo ?
-              <MenuItem className="clear-assignee" key="clear"
+            {group.assignedTo ?
+              <MenuItem key="clear"
+                        className="clear-assignee"
                         disabled={!loading}
                         onSelect={this.clearAssignTo}>
                 <span className="icon-close"/> Clear Assignee
diff --git a/src/sentry/static/sentry/app/mixins/groupState.jsx b/src/sentry/static/sentry/app/mixins/groupState.jsx
new file mode 100644
index 0000000000..b2d989dc35
--- /dev/null
+++ b/src/sentry/static/sentry/app/mixins/groupState.jsx
@@ -0,0 +1,18 @@
+/*** @jsx React.DOM */
+
+var PropTypes = require("../proptypes");
+var ProjectState = require("./projectState");
+
+var GroupState = {
+  mixins: [ProjectState],
+
+  contextTypes: {
+    group: PropTypes.Group.isRequired,
+  },
+
+  getGroup() {
+    return this.context.group;
+  }
+};
+
+module.exports = GroupState;
diff --git a/src/sentry/static/sentry/app/mixins/organizationState.jsx b/src/sentry/static/sentry/app/mixins/organizationState.jsx
new file mode 100644
index 0000000000..fc28b355d0
--- /dev/null
+++ b/src/sentry/static/sentry/app/mixins/organizationState.jsx
@@ -0,0 +1,15 @@
+/*** @jsx React.DOM */
+
+var PropTypes = require("../proptypes");
+
+var OrganizationState = {
+  contextTypes: {
+    organization: PropTypes.Organization.isRequired,
+  },
+
+  getOrganization() {
+    return this.context.organization;
+  }
+};
+
+module.exports = OrganizationState;
diff --git a/src/sentry/static/sentry/app/mixins/projectState.jsx b/src/sentry/static/sentry/app/mixins/projectState.jsx
index f01ea320bb..bbaa18feea 100644
--- a/src/sentry/static/sentry/app/mixins/projectState.jsx
+++ b/src/sentry/static/sentry/app/mixins/projectState.jsx
@@ -1,8 +1,11 @@
 /*** @jsx React.DOM */
 
 var PropTypes = require("../proptypes");
+var TeamState = require("./teamState");
 
 var ProjectState = {
+  mixins: [TeamState],
+
   contextTypes: {
     project: PropTypes.Project.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/mixins/teamState.jsx b/src/sentry/static/sentry/app/mixins/teamState.jsx
index 9468610bda..56d0ca4f03 100644
--- a/src/sentry/static/sentry/app/mixins/teamState.jsx
+++ b/src/sentry/static/sentry/app/mixins/teamState.jsx
@@ -1,8 +1,11 @@
 /*** @jsx React.DOM */
 
 var PropTypes = require("../proptypes");
+var OrganizationState = require("./organizationState");
 
 var TeamState = {
+  mixins: [OrganizationState],
+
   contextTypes: {
     team: PropTypes.Team.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index ef02f12b9d..dce65364a5 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -5,12 +5,15 @@ var PropTypes = {
   AnyModel: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   }),
-  Aggregate: React.PropTypes.shape({
+  Group: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   }),
   Event: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   }),
+  Organization: React.PropTypes.shape({
+    id: React.PropTypes.string.isRequired
+  }),
   Project: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   }),
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 452d1f6d1b..c27c033016 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -5,10 +5,10 @@ var Router = require("react-router");
 var Route = Router.Route;
 var DefaultRoute = Router.DefaultRoute;
 
-var AggregateDetails = require("./views/aggregateDetails");
-var AggregateEvents = require("./views/aggregateEvents");
-var AggregateTags = require("./views/aggregateTags");
-var AggregateOverview = require("./views/aggregateOverview");
+var GroupDetails = require("./views/groupDetails");
+var GroupEvents = require("./views/groupEvents");
+var GroupTags = require("./views/groupTags");
+var GroupOverview = require("./views/groupOverview");
 var ProjectDetails = require("./views/projectDetails");
 var PropTypes = require("./proptypes");
 var Stream = require("./views/stream");
@@ -35,12 +35,12 @@ var routes = (
     </Route>
     <Route name="projectDetails" path="/:orgId/:projectId/" handler={ProjectDetails}>
       <DefaultRoute name="stream" handler={Stream} />
-      <Route name="aggregateDetails" path="group/:aggregateId/" handler={AggregateDetails}
+      <Route name="groupDetails" path="group/:groupId/" handler={GroupDetails}
              ignoreScrollBehavior>
-        <DefaultRoute name="aggregateOverview" handler={AggregateOverview} />
-        <Route name="aggregateEventDetails" path="events/:eventId/" handler={AggregateOverview} />
-        <Route name="aggregateTags" path="tags/" handler={AggregateTags} />
-        <Route name="aggregateEvents" path="events/" handler={AggregateEvents} />
+        <DefaultRoute name="groupOverview" handler={GroupOverview} />
+        <Route name="groupEventDetails" path="events/:eventId/" handler={GroupOverview} />
+        <Route name="groupTags" path="tags/" handler={GroupTags} />
+        <Route name="groupEvents" path="events/" handler={GroupEvents} />
       </Route>
     </Route>
   </Route>
diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
similarity index 86%
rename from src/sentry/static/sentry/app/stores/aggregateListStore.jsx
rename to src/sentry/static/sentry/app/stores/groupStore.jsx
index 0df6d8fd17..d3f1408614 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -3,7 +3,7 @@
 var Reflux = require("reflux");
 
 var AlertActions = require("../actions/alertActions");
-var AggregateListActions = require('../actions/aggregateListActions');
+var GroupActions = require('../actions/groupActions');
 var MemberListStore = require("../stores/memberListStore");
 var utils = require("../utils");
 
@@ -14,22 +14,22 @@ var ERR_UPDATE = 'Unable to update events. Please try again.';
 var OK_SCHEDULE_DELETE = 'The selected events have been scheduled for deletion.';
 var OK_SCHEDULE_MERGE = 'The selected events have been scheduled for merge.';
 
-var AggregateListStore = Reflux.createStore({
+var GroupListStore = Reflux.createStore({
   init() {
     this.items = [];
     this.statuses = {};
     this.pendingChanges = new utils.PendingChangeQueue();
 
-    this.listenTo(AggregateListActions.assignTo, this.onAssignTo);
-    this.listenTo(AggregateListActions.assignToError, this.onAssignToError);
-    this.listenTo(AggregateListActions.assignToSuccess, this.onAssignToSuccess);
-    this.listenTo(AggregateListActions.delete, this.onDelete);
-    this.listenTo(AggregateListActions.deleteError, this.onDeleteError);
-    this.listenTo(AggregateListActions.merge, this.onMerge);
-    this.listenTo(AggregateListActions.mergeError, this.onMergeError);
-    this.listenTo(AggregateListActions.update, this.onUpdate);
-    this.listenTo(AggregateListActions.updateError, this.onUpdateError);
-    this.listenTo(AggregateListActions.updateSuccess, this.onUpdateSuccess);
+    this.listenTo(GroupActions.assignTo, this.onAssignTo);
+    this.listenTo(GroupActions.assignToError, this.onAssignToError);
+    this.listenTo(GroupActions.assignToSuccess, this.onAssignToSuccess);
+    this.listenTo(GroupActions.delete, this.onDelete);
+    this.listenTo(GroupActions.deleteError, this.onDeleteError);
+    this.listenTo(GroupActions.merge, this.onMerge);
+    this.listenTo(GroupActions.mergeError, this.onMergeError);
+    this.listenTo(GroupActions.update, this.onUpdate);
+    this.listenTo(GroupActions.updateError, this.onUpdateError);
+    this.listenTo(GroupActions.updateSuccess, this.onUpdateSuccess);
   },
 
   // TODO(dcramer): this should actually come from an action of some sorts
@@ -217,4 +217,4 @@ var AggregateListStore = Reflux.createStore({
   }
 });
 
-module.exports = AggregateListStore;
+module.exports = GroupListStore;
diff --git a/src/sentry/static/sentry/app/stores/memberListStore.jsx b/src/sentry/static/sentry/app/stores/memberListStore.jsx
index 2245dafc7e..dbf0e43fb0 100644
--- a/src/sentry/static/sentry/app/stores/memberListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/memberListStore.jsx
@@ -2,10 +2,10 @@
 
 var Reflux = require("reflux");
 
-// var MemberListActions = require('../actions/aggregateListActions');
+// var MemberActions = require('../actions/groupActions');
 
 var MemberListStore = Reflux.createStore({
-  // listenables: MemberListActions,
+  // listenables: MemberActions,
 
   init: function() {
     this.items = [];
diff --git a/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
similarity index 78%
rename from src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx
rename to src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
index 36ef567b34..5015536009 100644
--- a/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
@@ -2,11 +2,11 @@
 
 var Reflux = require("reflux");
 
-var AggregateListStore = require("./aggregateListStore");
+var GroupListStore = require("./groupStore");
 
-var SelectedAggregateStore = Reflux.createStore({
+var SelectedGroupStore = Reflux.createStore({
   init() {
-    this.listenTo(AggregateListStore, this.onAggListChange);
+    this.listenTo(GroupListStore, this.onAggListChange);
 
     this.allSelected = false;
     this.anySelected = false;
@@ -16,7 +16,7 @@ var SelectedAggregateStore = Reflux.createStore({
   },
 
   onAggListChange() {
-    var existingIds = new Set(AggregateListStore.getAllItemIds());
+    var existingIds = new Set(GroupListStore.getAllItemIds());
     // prune ids that no longer exist
     this.selected.forEach((itemId) => {
       if (!existingIds.has(itemId)) {
@@ -35,7 +35,7 @@ var SelectedAggregateStore = Reflux.createStore({
 
   getSelectedIds() {
     if (this.allSelected) {
-      return new Set(AggregateListStore.getAllItemIds());
+      return new Set(GroupListStore.getAllItemIds());
     }
     return this.selected;
   },
@@ -72,4 +72,4 @@ var SelectedAggregateStore = Reflux.createStore({
 
 });
 
-module.exports = SelectedAggregateStore;
+module.exports = SelectedGroupStore;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/header.jsx b/src/sentry/static/sentry/app/views/aggregateDetails/header.jsx
deleted file mode 100644
index efcafba7e3..0000000000
--- a/src/sentry/static/sentry/app/views/aggregateDetails/header.jsx
+++ /dev/null
@@ -1,151 +0,0 @@
-/*** @jsx React.DOM */
-
-var React = require("react");
-var Router = require("react-router");
-
-var api = require("../../api");
-var AssigneeSelector = require("../../components/assigneeSelector");
-var Count = require("../../components/count");
-var ListLink = require("../../components/listLink");
-var PropTypes = require("../../proptypes");
-
-var AggregateHeader = React.createClass({
-  mixins: [Router.State],
-
-  propTypes: {
-    orgId: React.PropTypes.string.isRequired,
-    projectId: React.PropTypes.string.isRequired,
-    aggregate: PropTypes.Aggregate.isRequired,
-    memberList: React.PropTypes.instanceOf(Array).isRequired,
-    statsPeriod: React.PropTypes.string.isRequired
-  },
-
-  onToggleResolve() {
-    api.bulkUpdate({
-      orgId: this.props.orgId,
-      projectId: this.props.projectId,
-      itemIds: [this.props.aggregate.id],
-      data: {
-        status: this.props.aggregate.status === 'resolved' ? 'unresolved' : 'resolved'
-      }
-    });
-  },
-
-  onToggleBookmark() {
-    api.bulkUpdate({
-      orgId: this.props.orgId,
-      projectId: this.props.projectId,
-      itemIds: [this.props.aggregate.id],
-      data: {
-        isBookmarked: !this.props.aggregate.isBookmarked
-      }
-    });
-  },
-  render() {
-    var data = this.props.aggregate,
-        userCount = 0;
-
-    var chartData = data.stats[this.props.statsPeriod].map(function(point){
-      return {x: point[0], y: point[1]};
-    });
-
-    if (data.tags["sentry:user"] !== undefined) {
-      userCount = data.tags["sentry:user"].count;
-    }
-
-    var className = "group-detail";
-    if (data.isBookmarked) {
-      className += " isBookmarked";
-    }
-    if (data.hasSeen) {
-      className += " hasSeen";
-    }
-    if (data.status === "resolved") {
-      className += " isResolved";
-    }
-
-    var resolveClassName = "group-resolve btn btn-default btn-sm";
-    if (data.status === "resolved") {
-      resolveClassName += " active";
-    }
-
-    var bookmarkClassName = "group-bookmark btn btn-default btn-sm";
-    if (data.isBookmarked) {
-      bookmarkClassName += " active";
-    }
-
-    var aggRouteParams = this.getParams();
-
-    return (
-      <div className={className}>
-        <div className="row">
-          <div className="col-sm-8 details">
-            <h3>
-              {data.title}
-            </h3>
-            <div className="event-message">
-              <span className="message">{data.culprit}</span>
-            </div>
-          </div>
-          <div className="col-sm-4 stats">
-            <div className="row">
-              <div className="col-xs-4 assigned-to">
-                <AssigneeSelector
-                    aggregate={data}
-                    memberList={this.props.memberList} />
-                <div className="is-assigned"><span className="hidden-sm">is</span> assigned</div>
-              </div>
-              <div className="col-xs-4 count align-right">
-                <Count value={data.count} />
-                <span className="count-label">events</span>
-              </div>
-              <div className="col-xs-4 count align-right">
-                <Count value={userCount} />
-                <span className="count-label">users</span>
-              </div>
-            </div>
-          </div>
-        </div>
-        <div className="seen-by">
-          <ul>
-            <li>Seen by:</li>
-          </ul>
-        </div>
-        <div className="group-actions">
-          <div className="btn-group">
-            <a className={resolveClassName}
-               onClick={this.onToggleResolve}>
-              <span className="icon-checkmark"></span>
-            </a>
-            <a className={bookmarkClassName}
-               onClick={this.onToggleBookmark}>
-              <span className="icon-bookmark"></span>
-            </a>
-          </div>
-          <div className="btn-group">
-            <a href="#" className="group-remove btn btn-default btn-sm"
-               data-action="remove"><span className="icon-trash"></span></a>
-          </div>
-          <div className="btn-group more">
-            <a href="#" className="btn btn-default btn-sm dropdown-toggle">More <span className="icon-arrow-down"></span></a>
-            <ul className="dropdown-menu">
-            </ul>
-          </div>
-        </div>
-        <ul className="nav nav-tabs">
-          <ListLink to="aggregateOverview" params={aggRouteParams}>
-            Overview
-          </ListLink>
-          <ListLink to="aggregateTags" params={aggRouteParams}>
-            Tags
-          </ListLink>
-          <ListLink to="aggregateEvents" params={aggRouteParams}>
-            Similar Events
-          </ListLink>
-        </ul>
-      </div>
-    );
-  }
-});
-
-module.exports = AggregateHeader;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
similarity index 56%
rename from src/sentry/static/sentry/app/views/aggregateDetails.jsx
rename to src/sentry/static/sentry/app/views/groupDetails.jsx
index bca49ce76d..f1a56a9fd8 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -5,15 +5,16 @@ var Reflux = require("reflux");
 var Router = require("react-router");
 
 var api = require("../api");
-var AggregateHeader = require("./aggregate/header");
-var AggregateListStore = require("../stores/aggregateListStore");
+var GroupHeader = require("./groupDetails/header");
+var GroupListStore = require("../stores/groupStore");
 var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
+var PropTypes = require("../proptypes");
 var utils = require("../utils");
 
-var AggregateDetails = React.createClass({
+var GroupDetails = React.createClass({
   mixins: [
     BreadcrumbMixin,
-    Reflux.listenTo(AggregateListStore, "onAggListChange"),
+    Reflux.listenTo(GroupListStore, "onAggListChange"),
     Router.State
   ],
 
@@ -21,60 +22,70 @@ var AggregateDetails = React.createClass({
     memberList: React.PropTypes.instanceOf(Array).isRequired
   },
 
-  onAggListChange() {
-    var id = this.getParams().aggregateId;
+  childContextTypes: {
+    group: PropTypes.Group,
+  },
 
-    this.setState({
-      aggregate: AggregateListStore.getItem(id)
-    });
+  getChildContext() {
+    return {
+      group: this.state.group,
+    };
   },
 
   getInitialState() {
     return {
-      aggregate: null,
+      group: null,
       statsPeriod: '48h'
     };
   },
 
   componentWillMount() {
-    api.request(this.getAggregateDetailsEndpoint(), {
+    api.request(this.getGroupDetailsEndpoint(), {
       success: (data) => {
-        AggregateListStore.loadInitialData([data]);
+        GroupListStore.loadInitialData([data]);
 
         this.setBreadcrumbs([
-          {name: data.title, to: 'aggregateDetails'}
+          {name: data.title, to: 'groupDetails'}
         ]);
       }
     });
   },
 
-  getAggregateDetailsEndpoint() {
-    return '/groups/' + this.getParams().aggregateId + '/';
+  onAggListChange() {
+    var id = this.getParams().groupId;
+
+    this.setState({
+      group: GroupListStore.getItem(id)
+    });
+  },
+
+  getGroupDetailsEndpoint() {
+    return '/groups/' + this.getParams().groupId + '/';
   },
 
   render() {
-    var aggregate = this.state.aggregate;
+    var group = this.state.group;
     var params = this.getParams();
 
-    if (!aggregate) {
+    if (!group) {
       return <div />;
     }
 
     return (
       <div className={this.props.className}>
-        <AggregateHeader
+        <GroupHeader
             orgId={params.orgId}
             projectId={params.projectId}
-            aggregate={aggregate}
+            group={group}
             statsPeriod={this.state.statsPeriod}
             memberList={this.props.memberList} />
         <Router.RouteHandler
             memberList={this.props.memberList}
-            aggregate={aggregate}
+            group={group}
             statsPeriod={this.state.statsPeriod} />
       </div>
     );
   }
 });
 
-module.exports = AggregateDetails;
+module.exports = GroupDetails;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
new file mode 100644
index 0000000000..4bf814dd4a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -0,0 +1,80 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Router = require("react-router");
+
+var GroupState = require("../../mixins/groupState");
+
+var GroupActions = React.createClass({
+  mixins: [GroupState],
+
+  onToggleResolve() {
+    var group = this.getGroup();
+    var project = this.getProject();
+    var org = this.getOrganization();
+
+    api.bulkUpdate({
+      orgId: org.slug,
+      projectId: project.slug,
+      itemIds: [group.id],
+      data: {
+        status: group.status === 'resolved' ? 'unresolved' : 'resolved'
+      }
+    });
+  },
+
+  onToggleBookmark() {
+    var group = this.getGroup();
+    var project = this.getProject();
+    var org = this.getOrganization();
+
+    api.bulkUpdate({
+      orgId: org.slug,
+      projectId: project.slug,
+      itemIds: [group.id],
+      data: {
+        isBookmarked: !group.isBookmarked
+      }
+    });
+  },
+
+  render() {
+    var group = this.getGroup();
+
+    var resolveClassName = "group-resolve btn btn-default btn-sm";
+    if (group.status === "resolved") {
+      resolveClassName += " active";
+    }
+
+    var bookmarkClassName = "group-bookmark btn btn-default btn-sm";
+    if (group.isBookmarked) {
+      bookmarkClassName += " active";
+    }
+
+    return (
+      <div className="group-actions">
+        <div className="btn-group">
+          <a className={resolveClassName}
+             onClick={this.onToggleResolve}>
+            <span className="icon-checkmark"></span>
+          </a>
+          <a className={bookmarkClassName}
+             onClick={this.onToggleBookmark}>
+            <span className="icon-bookmark"></span>
+          </a>
+        </div>
+        <div className="btn-group">
+          <a href="#" className="group-remove btn btn-default btn-sm"
+             data-action="remove"><span className="icon-trash"></span></a>
+        </div>
+        <div className="btn-group more">
+          <a href="#" className="btn btn-default btn-sm dropdown-toggle">More <span className="icon-arrow-down"></span></a>
+          <ul className="dropdown-menu">
+          </ul>
+        </div>
+      </div>
+    );
+  }
+});
+
+module.exports = GroupActions;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/activity.jsx b/src/sentry/static/sentry/app/views/groupDetails/activity.jsx
similarity index 87%
rename from src/sentry/static/sentry/app/views/aggregateDetails/activity.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/activity.jsx
index 188b5887bf..03222b760e 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/activity.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/activity.jsx
@@ -1,12 +1,11 @@
 /*** @jsx React.DOM */
 var React = require("react");
 
+var GroupState = require("../../mixins/groupState");
 var PropTypes = require("../../proptypes");
 
-var AggregateActivity = React.createClass({
-  propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired
-  },
+var GroupActivity = React.createClass({
+  mixins: [GroupState],
 
   render: function() {
     return (
@@ -34,4 +33,4 @@ var AggregateActivity = React.createClass({
   }
 });
 
-module.exports = AggregateActivity;
+module.exports = GroupActivity;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/chart.jsx b/src/sentry/static/sentry/app/views/groupDetails/chart.jsx
similarity index 68%
rename from src/sentry/static/sentry/app/views/aggregateDetails/chart.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/chart.jsx
index 43915e148c..0974a74681 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/chart.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/chart.jsx
@@ -2,17 +2,19 @@
 var React = require("react");
 
 var BarChart = require("../../components/barChart");
+var GroupState = require("../../mixins/groupState");
 var PropTypes = require("../../proptypes");
 
-var AggregateChart = React.createClass({
+var GroupChart = React.createClass({
+  mixins: [GroupState],
+
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
     statsPeriod: React.PropTypes.string.isRequired
   },
 
   render: function() {
-    var aggregate = this.props.aggregate;
-    var stats = aggregate.stats[this.props.statsPeriod];
+    var group = this.getGroup();
+    var stats = group.stats[this.props.statsPeriod];
     var points = stats.map((point) => {
       return {x: point[0], y: point[1]};
     });
@@ -27,4 +29,4 @@ var AggregateChart = React.createClass({
 
 });
 
-module.exports = AggregateChart;
+module.exports = GroupChart;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/event.jsx b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
similarity index 77%
rename from src/sentry/static/sentry/app/views/aggregateDetails/event.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/event.jsx
index dcb77c5a55..c2a9878f66 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/event.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
@@ -2,9 +2,10 @@
 
 var React = require("react");
 
-var AggregateEventDataSection = require("./eventDataSection");
-var AggregateEventHeader = require("./eventHeader");
-var AggregateEventTags = require("./eventTags");
+var GroupEventDataSection = require("./eventDataSection");
+var GroupEventHeader = require("./eventHeader");
+var GroupEventTags = require("./eventTags");
+var GroupState = require("../../mixins/groupState");
 var Gravatar = require("../../components/gravatar");
 var PropTypes = require("../../proptypes");
 
@@ -26,9 +27,10 @@ var UserWidget = React.createClass({
   }
 });
 
-var AggregateEvent = React.createClass({
+var GroupEvent = React.createClass({
+  mixins: [GroupState],
+
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
     event: PropTypes.Event.isRequired
   },
 
@@ -39,7 +41,7 @@ var AggregateEvent = React.createClass({
   },
 
   render(){
-    var agg = this.props.aggregate;
+    var group = this.getGroup();
     var evt = this.props.event;
 
     var entries = [];
@@ -53,7 +55,7 @@ var AggregateEvent = React.createClass({
         entries.push(
           <Component
               key={"entry-" + entryIdx}
-              aggregate={agg}
+              group={group}
               event={evt}
               data={entry.data} />
         );
@@ -66,15 +68,15 @@ var AggregateEvent = React.createClass({
     return (
       <div className="row">
         <div className="col-md-9">
-          <AggregateEventHeader
-              aggregate={agg}
+          <GroupEventHeader
+              group={group}
               event={evt} />
-          <AggregateEventTags
-              aggregate={agg}
+          <GroupEventTags
+              group={group}
               event={evt} />
           {entries}
-          <AggregateEventDataSection
-              aggregate={agg}
+          <GroupEventDataSection
+              group={group}
               event={evt}
               title="Additional Data" />
         </div>
@@ -94,4 +96,4 @@ var AggregateEvent = React.createClass({
   }
 });
 
-module.exports = AggregateEvent;
+module.exports = GroupEvent;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/eventDataSection.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventDataSection.jsx
similarity index 77%
rename from src/sentry/static/sentry/app/views/aggregateDetails/eventDataSection.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/eventDataSection.jsx
index 6473d63f9c..c1aceae6c1 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/eventDataSection.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventDataSection.jsx
@@ -3,9 +3,9 @@ var React = require("react");
 
 var PropTypes = require("../../proptypes");
 
-var AggregateEventDataSection = React.createClass({
+var GroupEventDataSection = React.createClass({
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
+    group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
     title: React.PropTypes.string.isRequired
   },
@@ -24,4 +24,4 @@ var AggregateEventDataSection = React.createClass({
   }
 });
 
-module.exports = AggregateEventDataSection;
+module.exports = GroupEventDataSection;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/eventHeader.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventHeader.jsx
similarity index 88%
rename from src/sentry/static/sentry/app/views/aggregateDetails/eventHeader.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/eventHeader.jsx
index 46513da28c..63cbca98b1 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/eventHeader.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventHeader.jsx
@@ -5,9 +5,9 @@ var moment = require("moment");
 var FileSize = require("../../components/fileSize");
 var PropTypes = require("../../proptypes");
 
-var AggregateEventHeader = React.createClass({
+var GroupEventHeader = React.createClass({
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
+    group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired
   },
 
@@ -40,4 +40,4 @@ var AggregateEventHeader = React.createClass({
   }
 });
 
-module.exports = AggregateEventHeader;
+module.exports = GroupEventHeader;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/eventTags.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventTags.jsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/aggregateDetails/eventTags.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/eventTags.jsx
index 1ff9ea6c57..729a1129d6 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/eventTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventTags.jsx
@@ -3,9 +3,9 @@ var React = require("react");
 
 var PropTypes = require("../../proptypes");
 
-var AggregateEventTags = React.createClass({
+var GroupEventTags = React.createClass({
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
+    group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired
   },
 
@@ -35,5 +35,5 @@ var AggregateEventTags = React.createClass({
   }
 });
 
-module.exports = AggregateEventTags;
+module.exports = GroupEventTags;
 
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/aggregateDetails/eventToolbar.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
index f5e0824c12..e7bb7e6898 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
@@ -4,28 +4,28 @@ var React = require("react");
 
 var PropTypes = require("../../proptypes");
 
-var AggregateEventToolbar  = React.createClass({
+var GroupEventToolbar  = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
-    aggregate: PropTypes.Aggregate.isRequired,
+    group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
   },
 
   render() {
     var orgId = this.props.orgId;
     var projectId = this.props.projectId;
-    var aggId = this.props.aggregate.id;
+    var groupId = this.props.group.id;
     var evt = this.props.event;
 
     var eventNavNodes = [
       (evt.nextEventID ?
         <Router.Link
             key="next"
-            to="aggregateEventDetails"
+            to="groupEventDetails"
             params={{orgId: orgId,
                      projectId: projectId,
-                     aggregateId: aggId,
+                     groupId: groupId,
                      eventId: evt.nextEventID}}
             className="btn btn-default btn-lg">Newer</Router.Link>
       :
@@ -35,10 +35,10 @@ var AggregateEventToolbar  = React.createClass({
       (evt.previousEventID ?
         <Router.Link
             key="prev"
-            to="aggregateEventDetails"
+            to="groupEventDetails"
             params={{orgId: orgId,
                      projectId: projectId,
-                     aggregateId: aggId,
+                     groupId: groupId,
                      eventId: evt.previousEventID}}
             className="btn btn-default btn-lg">Older</Router.Link>
       :
@@ -65,4 +65,4 @@ var AggregateEventToolbar  = React.createClass({
   }
 });
 
-module.exports = AggregateEventToolbar ;
+module.exports = GroupEventToolbar ;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
new file mode 100644
index 0000000000..6a8423ecdd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -0,0 +1,99 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Router = require("react-router");
+
+var api = require("../../api");
+var AssigneeSelector = require("../../components/assigneeSelector");
+var Count = require("../../components/count");
+var GroupActions = require("./actions");
+var GroupSeenBy = require("./seenBy");
+var GroupState = require("../../mixins/groupState");
+var ListLink = require("../../components/listLink");
+var PropTypes = require("../../proptypes");
+
+var GroupHeader = React.createClass({
+  mixins: [
+    GroupState,
+    Router.State,
+  ],
+
+  propTypes: {
+    memberList: React.PropTypes.instanceOf(Array).isRequired,
+    statsPeriod: React.PropTypes.string.isRequired
+  },
+
+  render() {
+    var group = this.getGroup(),
+        userCount = 0;
+
+    var chartData = group.stats[this.props.statsPeriod].map(function(point){
+      return {x: point[0], y: point[1]};
+    });
+
+    if (group.tags["sentry:user"] !== undefined) {
+      userCount = group.tags["sentry:user"].count;
+    }
+
+    var className = "group-detail";
+    if (group.isBookmarked) {
+      className += " isBookmarked";
+    }
+    if (group.hasSeen) {
+      className += " hasSeen";
+    }
+    if (group.status === "resolved") {
+      className += " isResolved";
+    }
+
+    var groupRouteParams = this.getParams();
+
+    return (
+      <div className={className}>
+        <div className="row">
+          <div className="col-sm-8 details">
+            <h3>
+              {group.title}
+            </h3>
+            <div className="event-message">
+              <span className="message">{group.culprit}</span>
+            </div>
+          </div>
+          <div className="col-sm-4 stats">
+            <div className="row">
+              <div className="col-xs-4 assigned-to">
+                <AssigneeSelector
+                    group={group}
+                    memberList={this.props.memberList} />
+                <div className="is-assigned"><span className="hidden-sm">is</span> assigned</div>
+              </div>
+              <div className="col-xs-4 count align-right">
+                <Count value={group.count} />
+                <span className="count-label">events</span>
+              </div>
+              <div className="col-xs-4 count align-right">
+                <Count value={userCount} />
+                <span className="count-label">users</span>
+              </div>
+            </div>
+          </div>
+        </div>
+        <GroupSeenBy />
+        <GroupActions />
+        <ul className="nav nav-tabs">
+          <ListLink to="groupOverview" params={groupRouteParams}>
+            Overview
+          </ListLink>
+          <ListLink to="groupTags" params={groupRouteParams}>
+            Tags
+          </ListLink>
+          <ListLink to="groupEvents" params={groupRouteParams}>
+            Similar Events
+          </ListLink>
+        </ul>
+      </div>
+    );
+  }
+});
+
+module.exports = GroupHeader;
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/interfaces/exception.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
similarity index 80%
rename from src/sentry/static/sentry/app/views/aggregateDetails/interfaces/exception.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
index a5d79c9598..f7cfc96c37 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
@@ -2,18 +2,18 @@
 
 var React = require("react");
 
-var AggregateEventDataSection = require("../eventDataSection");
+var GroupEventDataSection = require("../eventDataSection");
 var PropTypes = require("../../../proptypes");
 
 var ExceptionInterface = React.createClass({
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
+    group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
     data: React.PropTypes.object.isRequired
   },
 
   render: function(){
-    var agg = this.props.aggregate;
+    var group = this.props.group;
     var evt = this.props.event;
     var data = this.props.data;
 
@@ -39,12 +39,12 @@ var ExceptionInterface = React.createClass({
     });
 
     return (
-      <AggregateEventDataSection
-          aggregate={agg}
+      <GroupEventDataSection
+          group={group}
           event={evt}
           title="Exception">
         {children}
-      </AggregateEventDataSection>
+      </GroupEventDataSection>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/aggregateDetails/interfaces/request.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/request.jsx
similarity index 91%
rename from src/sentry/static/sentry/app/views/aggregateDetails/interfaces/request.jsx
rename to src/sentry/static/sentry/app/views/groupDetails/interfaces/request.jsx
index 125367588a..1b9e8a2317 100644
--- a/src/sentry/static/sentry/app/views/aggregateDetails/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/request.jsx
@@ -2,18 +2,18 @@
 
 var React = require("react");
 
-var AggregateEventDataSection = require("../eventDataSection");
+var GroupEventDataSection = require("../eventDataSection");
 var PropTypes = require("../../../proptypes");
 
 var RequestInterface = React.createClass({
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
+    group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
     data: React.PropTypes.object.isRequired
   },
 
   render: function(){
-    var agg = this.props.aggregate;
+    var group = this.props.group;
     var evt = this.props.event;
     var data = this.props.data;
 
@@ -26,8 +26,8 @@ var RequestInterface = React.createClass({
     }
 
     return (
-      <AggregateEventDataSection
-          aggregate={agg}
+      <GroupEventDataSection
+          group={group}
           event={evt}
           title="Request">
         <table className="table table-striped vars">
@@ -95,7 +95,7 @@ var RequestInterface = React.createClass({
             }
           </tbody>
         </table>
-      </AggregateEventDataSection>
+      </GroupEventDataSection>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
new file mode 100644
index 0000000000..6dd74b304f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
@@ -0,0 +1,17 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+
+var GroupSeenBy = React.createClass({
+  render() {
+    return (
+      <div className="seen-by">
+        <ul>
+          <li>Seen by:</li>
+        </ul>
+      </div>
+    );
+  }
+});
+
+module.exports = GroupSeenBy;
diff --git a/src/sentry/static/sentry/app/views/aggregateEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
similarity index 80%
rename from src/sentry/static/sentry/app/views/aggregateEvents.jsx
rename to src/sentry/static/sentry/app/views/groupEvents.jsx
index 55da48a2f6..f31895d07b 100644
--- a/src/sentry/static/sentry/app/views/aggregateEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -1,19 +1,15 @@
 /*** @jsx React.DOM */
 
 var React = require("react");
-var Router = require("react-router");
 
 var api = require("../api");
+var GroupState = require("../mixins/groupState");
 var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
 var PropTypes = require("../proptypes");
 
-var AggregateEvents = React.createClass({
-  mixins: [Router.State],
-
-  propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired
-  },
+var GroupEvents = React.createClass({
+  mixins: [GroupState,],
 
   getInitialState() {
     return {
@@ -28,14 +24,12 @@ var AggregateEvents = React.createClass({
   },
 
   fetchData() {
-    var params = this.getParams();
-
     this.setState({
       loading: true,
       error: false
     });
 
-    api.request('/groups/' + params.aggregateId + '/events/', {
+    api.request('/groups/' + this.getGroup().id + '/events/', {
       success: (data) => {
         this.setState({
           eventList: data,
@@ -48,10 +42,10 @@ var AggregateEvents = React.createClass({
           error: true,
           loading: false
         });
-      }    });
+      }
+    });
   },
 
-
   render() {
     if (this.state.loading) {
       return <LoadingIndicator />;
@@ -81,4 +75,4 @@ var AggregateEvents = React.createClass({
   }
 });
 
-module.exports = AggregateEvents;
+module.exports = GroupEvents;
diff --git a/src/sentry/static/sentry/app/views/aggregateOverview.jsx b/src/sentry/static/sentry/app/views/groupOverview.jsx
similarity index 73%
rename from src/sentry/static/sentry/app/views/aggregateOverview.jsx
rename to src/sentry/static/sentry/app/views/groupOverview.jsx
index f693a64887..1c1aad43c6 100644
--- a/src/sentry/static/sentry/app/views/aggregateOverview.jsx
+++ b/src/sentry/static/sentry/app/views/groupOverview.jsx
@@ -4,10 +4,11 @@ var React = require("react");
 var Router = require("react-router");
 
 var api = require("../api");
-var AggregateActivity = require("./aggregate/activity");
-var AggregateChart = require("./aggregate/chart");
-var AggregateEvent = require("./aggregate/event");
-var AggregateEventToolbar = require("./aggregate/eventToolbar");
+var GroupActivity = require("./groupDetails/activity");
+var GroupChart = require("./groupDetails/chart");
+var GroupEvent = require("./groupDetails/event");
+var GroupEventToolbar = require("./groupDetails/eventToolbar");
+var GroupState = require("../mixins/groupState");
 var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
 var PropTypes = require("../proptypes");
@@ -27,11 +28,13 @@ var MutedBox = React.createClass({
   }
 });
 
-var AggregateOverview = React.createClass({
-  mixins: [Router.State],
+var GroupOverview = React.createClass({
+  mixins: [
+    GroupState,
+    Router.State
+  ],
 
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired,
     statsPeriod: React.PropTypes.string.isRequired
   },
 
@@ -56,7 +59,7 @@ var AggregateOverview = React.createClass({
     var eventId = this.getParams().eventId || 'latest';
 
     var url = (eventId === 'latest' ?
-      '/groups/' + this.props.aggregate.id + '/events/' + eventId + '/' :
+      '/groups/' + this.getGroup().id + '/events/' + eventId + '/' :
       '/events/' + eventId + '/');
 
     this.setState({
@@ -82,25 +85,25 @@ var AggregateOverview = React.createClass({
   },
 
   render() {
-    var agg = this.props.aggregate;
+    var group = this.getGroup();
     var evt = this.state.event;
     var params = this.getParams();
 
     if (evt) {
       var eventNavNodes = [
         (evt.nextEventID ?
-          <Router.Link to="aggregateEventDetails"
+          <Router.Link to="groupEventDetails"
             params={{orgId: params.orgId,
                      projectId: params.projectId,
-                     aggId: params.aggId,
+                     groupId: params.groupId,
                      eventId: evt.nextEventID}}
             className="btn btn-default btn-lg">Newer</Router.Link>
         : <a class="btn btn-default btn-lg disabled">Newer</a>),
         (evt.previousEventID ?
-          <Router.Link to="aggregateEventDetails"
+          <Router.Link to="groupEventDetails"
             params={{orgId: params.orgId,
                      projectId: params.projectId,
-                     aggId: params.aggId,
+                     groupId: params.groupId,
                      eventId: evt.previousEventID}}
             className="btn btn-default btn-lg">Older</Router.Link>
         : <a class="btn btn-default btn-lg disabled">Older</a>),
@@ -111,33 +114,31 @@ var AggregateOverview = React.createClass({
       <div>
         <div className="row">
           <div className="col-md-6">
-            <AggregateActivity aggregate={agg} />
+            <GroupActivity />
           </div>
           <div className="col-md-6">
-            <AggregateChart
-                aggregate={agg}
-                statsPeriod={this.props.statsPeriod} />
+            <GroupChart statsPeriod={this.props.statsPeriod} />
             <div className="row group-stats">
               <div className="col-md-6">
                 <h6>First seen</h6>
-                <h3><TimeSince date={agg.firstSeen} /></h3>
+                <h3><TimeSince date={group.firstSeen} /></h3>
                 <h6>Last seen</h6>
-                <h3><TimeSince date={agg.lastSeen} /></h3>
+                <h3><TimeSince date={group.lastSeen} /></h3>
               </div>
               <div className="col-md-6">
                 <h6>In release</h6>
                 <h3>cd5b4c4d93ad</h3>
                 <h6>Status</h6>
-                <h3>{agg.status}</h3>
+                <h3>{group.status}</h3>
               </div>
             </div>
           </div>
         </div>
 
-        <MutedBox status={agg.status} />
+        <MutedBox status={group.status} />
         {evt &&
-          <AggregateEventToolbar
-              aggregate={agg}
+          <GroupEventToolbar
+              group={group}
               event={evt}
               orgId={params.orgId}
               projectId={params.projectId} />
@@ -148,7 +149,7 @@ var AggregateOverview = React.createClass({
           <LoadingError onRetry={this.fetchData} />
         :
           <div>
-            <AggregateEvent aggregate={agg} event={evt} />
+            <GroupEvent group={group} event={evt} />
           </div>
         )}
       </div>
@@ -156,4 +157,4 @@ var AggregateOverview = React.createClass({
   }
 });
 
-module.exports = AggregateOverview;
+module.exports = GroupOverview;
diff --git a/src/sentry/static/sentry/app/views/aggregateTags.jsx b/src/sentry/static/sentry/app/views/groupTags.jsx
similarity index 88%
rename from src/sentry/static/sentry/app/views/aggregateTags.jsx
rename to src/sentry/static/sentry/app/views/groupTags.jsx
index a218a1de62..22501fd750 100644
--- a/src/sentry/static/sentry/app/views/aggregateTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupTags.jsx
@@ -1,20 +1,16 @@
 /*** @jsx React.DOM */
 
 var React = require("react");
-var Router = require("react-router");
 
 var api = require("../api");
 var Count = require("../components/count");
+var GroupState = require("../mixins/groupState");
 var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
 var PropTypes = require("../proptypes");
 
-var AggregateTags = React.createClass({
-  mixins: [Router.State],
-
-  propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired
-  },
+var GroupTags = React.createClass({
+  mixins: [GroupState],
 
   getInitialState() {
     return {
@@ -29,8 +25,6 @@ var AggregateTags = React.createClass({
   },
 
   fetchData() {
-    var params = this.getParams();
-
     this.setState({loading: true});
 
     this.setState({
@@ -38,7 +32,7 @@ var AggregateTags = React.createClass({
       error: false
     });
 
-    api.request('/groups/' + params.aggregateId + '/tags/', {
+    api.request('/groups/' + this.getGroup().id + '/tags/', {
       success: (data) => {
         this.setState({
           tagList: data,
@@ -107,4 +101,4 @@ var AggregateTags = React.createClass({
   }
 });
 
-module.exports = AggregateTags;
+module.exports = GroupTags;
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index b45f28124f..e193c56d51 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -20,18 +20,21 @@ var ProjectDetails = React.createClass({
   getInitialState() {
     return {
       memberList: [],
+      organization: null,
       project: null,
       team: null
     };
   },
 
   childContextTypes: {
+    organization: PropTypes.Organization,
     project: PropTypes.Project,
     team: PropTypes.Team
   },
 
   getChildContext() {
     return {
+      organization: this.state.organization,
       project: this.state.project,
       team: this.state.team
     };
@@ -47,6 +50,7 @@ var ProjectDetails = React.createClass({
     api.request(this.getProjectDetailsEndpoint(), {
       success: (data) => {
         this.setState({
+          organization: data.organization,
           project: data,
           team: data.team
         });
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index c4e3a6326c..8e3a07d391 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -5,18 +5,18 @@ var Router = require("react-router");
 var $ = require("jquery");
 
 var api = require("../api");
-var AggregateListActions = require("../actions/aggregateListActions");
-var AggregateListStore = require("../stores/aggregateListStore");
+var GroupActions = require("../actions/groupActions");
+var GroupListStore = require("../stores/groupStore");
 var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
-var StreamAggregate = require('./stream/aggregate');
+var StreamGroup = require('./stream/group');
 var StreamActions = require('./stream/actions');
 var StreamFilters = require('./stream/filters');
 var StreamPagination = require('./stream/pagination');
 var utils = require("../utils");
 
 // TODO(dcramer): the poller/collection needs to actually unshift/pop
-// items from the AggregateListStore to ensure it doesnt grow in memory
+// items from the GroupListStore to ensure it doesnt grow in memory
 var StreamPoller = function(options){
   this.options = options;
   this._timeoutId = null;
@@ -65,7 +65,7 @@ StreamPoller.prototype.poll = function() {
 
 var Stream = React.createClass({
   mixins: [
-    Reflux.listenTo(AggregateListStore, "onAggListChange"),
+    Reflux.listenTo(GroupListStore, "onAggListChange"),
     Router.State
   ],
 
@@ -75,13 +75,13 @@ var Stream = React.createClass({
 
   onAggListChange() {
     this.setState({
-      aggList: AggregateListStore.getAllItems()
+      groupList: GroupListStore.getAllItems()
     });
   },
 
   getInitialState() {
     return {
-      aggList: new utils.Collection([], {
+      groupList: new utils.Collection([], {
         limit: 50
       }),
       selectAllActive: false,
@@ -98,7 +98,7 @@ var Stream = React.createClass({
   componentWillMount() {
     this._poller = new StreamPoller({
       success: this.handleRealtimePoll,
-      endpoint: this.getAggregateListEndpoint()
+      endpoint: this.getGroupListEndpoint()
     });
 
     this.fetchData();
@@ -128,9 +128,9 @@ var Stream = React.createClass({
       error: false
     });
 
-    api.request(this.getAggregateListEndpoint(), {
+    api.request(this.getGroupListEndpoint(), {
       success: (data, _, jqXHR) => {
-        AggregateListStore.loadInitialData(data);
+        GroupListStore.loadInitialData(data);
 
         this.setState({
           error: false,
@@ -152,7 +152,7 @@ var Stream = React.createClass({
     });
   },
 
-  getAggregateListEndpoint() {
+  getGroupListEndpoint() {
     var params = this.getParams();
     var queryParams = this.getQuery();
     var querystring = $.param(queryParams);
@@ -171,12 +171,12 @@ var Stream = React.createClass({
   },
   handleRealtimePoll(data) {
     this.setState({
-      aggList: this.state.aggList.unshift(data)
+      groupList: this.state.groupList.unshift(data)
     });
   },
   render() {
-    var aggNodes = this.state.aggList.map((node) => {
-      return <StreamAggregate
+    var groupNodes = this.state.groupList.map((node) => {
+      return <StreamGroup
           key={node.id}
           data={node}
           memberList={this.props.memberList}
@@ -198,7 +198,7 @@ var Stream = React.createClass({
                 onRealtimeChange={this.handleRealtimeChange}
                 realtimeActive={this.state.realtimeActive}
                 statsPeriod={this.state.statsPeriod}
-                aggList={this.state.aggList} />
+                groupList={this.state.groupList} />
             </div>
           </div>
         </div>
@@ -208,11 +208,11 @@ var Stream = React.createClass({
           <LoadingError onRetry={this.fetchData} />
         :
           <ul className="group-list">
-            {aggNodes}
+            {groupNodes}
           </ul>
         )}
         <StreamPagination
-          aggList={this.state.aggList}
+          groupList={this.state.groupList}
           pageLinks={this.state.pageLinks} />
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 48a0971c81..4b7d3d1263 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -6,20 +6,20 @@ var Router = require("react-router");
 var utils = require("../../utils");
 
 var api = require("../../api");
-var AggregateListStore = require("../../stores/aggregateListStore");
+var GroupListStore = require("../../stores/groupStore");
 var DateTimeField = require("../../modules/datepicker/DateTimeField");
 var DropdownLink = require("../../components/dropdownLink");
 var MenuItem = require("../../components/menuItem");
 var Modal = require("react-bootstrap/Modal");
 var OverlayMixin = require("react-bootstrap/OverlayMixin");
-var SelectedAggregateStore = require("../../stores/selectedAggregateStore");
+var SelectedGroupStore = require("../../stores/selectedGroupStore");
 
 var ActionLink = React.createClass({
   mixins: [OverlayMixin],
 
   propTypes: {
     actionLabel: React.PropTypes.string,
-    aggList: React.PropTypes.instanceOf(Array).isRequired,
+    groupList: React.PropTypes.instanceOf(Array).isRequired,
     canActionAll: React.PropTypes.bool.isRequired,
     confirmLabel: React.PropTypes.string,
     disabled: React.PropTypes.bool,
@@ -88,9 +88,9 @@ var ActionLink = React.createClass({
       return <span/>;
     }
 
-    var selectedItemIds = SelectedAggregateStore.getSelectedIds();
+    var selectedItemIds = SelectedGroupStore.getSelectedIds();
     if (selectedItemIds.size === 0) {
-      throw new Error('ActionModal rendered without any selected aggregates');
+      throw new Error('ActionModal rendered without any selected groups');
     }
 
     var shouldConfirm = true;
@@ -192,13 +192,13 @@ var SortOptions = React.createClass({
 
 var StreamActions = React.createClass({
   mixins: [
-    Reflux.listenTo(SelectedAggregateStore, 'onSelectedAggregateChange')
+    Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange')
   ],
 
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
-    aggList: React.PropTypes.instanceOf(Array).isRequired,
+    groupList: React.PropTypes.instanceOf(Array).isRequired,
     onRealtimeChange: React.PropTypes.func.isRequired,
     onSelectStatsPeriod: React.PropTypes.func.isRequired,
     realtimeActive: React.PropTypes.bool.isRequired,
@@ -221,15 +221,15 @@ var StreamActions = React.createClass({
       datePickerActive: !this.state.datePickerActive
     });
   },
-  actionSelectedAggregates(callback, data) {
+  actionSelectedGroups(callback, data) {
     var itemIds;
     var selectedAggList;
 
     if (StreamActions.ALL) {
-      selectedAggList = this.props.aggList;
+      selectedAggList = this.props.groupList;
     } else {
-      itemIdSet = SelectedAggregateStore.getSelectedIds();
-      selectedAggList = this.props.aggList.filter(
+      itemIdSet = SelectedGroupStore.getSelectedIds();
+      selectedAggList = this.props.groupList.filter(
         (item) => itemIdSet.has(item.id)
       );
       itemIds = selectedAggList.map(
@@ -239,10 +239,10 @@ var StreamActions = React.createClass({
 
     callback(itemIds);
 
-    SelectedAggregateStore.clearAll();
+    SelectedGroupStore.clearAll();
   },
-  onResolve(aggList, event) {
-    this.actionSelectedAggregates((itemIds) => {
+  onResolve(groupList, event) {
+    this.actionSelectedGroups((itemIds) => {
       api.bulkUpdate({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -253,8 +253,8 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onBookmark(aggList, event) {
-    this.actionSelectedAggregates((itemIds) => {
+  onBookmark(groupList, event) {
+    this.actionSelectedGroups((itemIds) => {
       api.bulkUpdate({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -265,8 +265,8 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onRemoveBookmark(aggList, event) {
-    this.actionSelectedAggregates((itemIds) => {
+  onRemoveBookmark(groupList, event) {
+    this.actionSelectedGroups((itemIds) => {
       api.bulkUpdate({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -277,8 +277,8 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onDelete(aggList, event) {
-    this.actionSelectedAggregates((itemIds) => {
+  onDelete(groupList, event) {
+    this.actionSelectedGroups((itemIds) => {
       api.bulkDelete({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -286,8 +286,8 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onMerge(aggList, event) {
-    this.actionSelectedAggregates((itemIds) => {
+  onMerge(groupList, event) {
+    this.actionSelectedGroups((itemIds) => {
       api.merge({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -295,15 +295,15 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onSelectedAggregateChange() {
+  onSelectedGroupChange() {
     this.setState({
-      selectAllActive: SelectedAggregateStore.allSelected,
-      multiSelected: SelectedAggregateStore.multiSelected,
-      anySelected: SelectedAggregateStore.anySelected
+      selectAllActive: SelectedGroupStore.allSelected,
+      multiSelected: SelectedGroupStore.multiSelected,
+      anySelected: SelectedGroupStore.anySelected
     });
   },
   onSelectAll() {
-    SelectedAggregateStore.toggleSelectAll();
+    SelectedGroupStore.toggleSelectAll();
   },
   render() {
     return (
@@ -323,7 +323,7 @@ var StreamActions = React.createClass({
                canActionAll={true}
                onlyIfBulk={true}
                selectAllActive={this.state.selectAllActive}
-               aggList={this.props.aggList}>
+               groupList={this.props.groupList}>
               <i aria-hidden="true" className="icon-checkmark"></i>
             </ActionLink>
             <ActionLink
@@ -335,7 +335,7 @@ var StreamActions = React.createClass({
                canActionAll={false}
                onlyIfBulk={true}
                selectAllActive={this.state.selectAllActive}
-               aggList={this.props.aggList}>
+               groupList={this.props.groupList}>
               <i aria-hidden="true" className="icon-bookmark"></i>
             </ActionLink>
 
@@ -353,7 +353,7 @@ var StreamActions = React.createClass({
                    confirmLabel="Merge"
                    canActionAll={false}
                    selectAllActive={this.state.selectAllActive}
-                   aggList={this.props.aggList}>
+                   groupList={this.props.groupList}>
                   Merge Events
                 </ActionLink>
               </MenuItem>
@@ -367,7 +367,7 @@ var StreamActions = React.createClass({
                    onlyIfBulk={true}
                    canActionAll={false}
                    selectAllActive={this.state.selectAllActive}
-                   aggList={this.props.aggList}>
+                   groupList={this.props.groupList}>
                   Remove from Bookmarks
                 </ActionLink>
               </MenuItem>
@@ -380,7 +380,7 @@ var StreamActions = React.createClass({
                    confirmLabel="Delete"
                    canActionAll={false}
                    selectAllActive={this.state.selectAllActive}
-                   aggList={this.props.aggList}>
+                   groupList={this.props.groupList}>
                   Delete Events
                 </ActionLink>
               </MenuItem>
diff --git a/src/sentry/static/sentry/app/views/stream/aggregate.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/stream/aggregate.jsx
rename to src/sentry/static/sentry/app/views/stream/group.jsx
index 38adbc4173..72635d6004 100644
--- a/src/sentry/static/sentry/app/views/stream/aggregate.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -6,12 +6,12 @@ var Router = require("react-router");
 var AssigneeSelector = require("../../components/assigneeSelector");
 var BarChart = require("../../components/barChart");
 var Count = require("../../components/count");
-var SelectedAggregateStore = require("../../stores/selectedAggregateStore");
+var SelectedGroupStore = require("../../stores/selectedGroupStore");
 var TimeSince = require("../../components/timeSince");
 
-var StreamAggregate = React.createClass({
+var StreamGroup = React.createClass({
   mixins: [
-    Reflux.listenTo(SelectedAggregateStore, "onSelectedAggregateChange"),
+    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange"),
     Router.State
   ],
 
@@ -29,16 +29,16 @@ var StreamAggregate = React.createClass({
     };
   },
 
-  onSelectedAggregateChange() {
+  onSelectedGroupChange() {
     var id = this.props.data.id;
     this.setState({
-      isSelected: SelectedAggregateStore.isSelected(id),
+      isSelected: SelectedGroupStore.isSelected(id),
     });
   },
 
   onSelect() {
     var id = this.props.data.id;
-    SelectedAggregateStore.toggleSelect(id);
+    SelectedGroupStore.toggleSelect(id);
   },
 
   render() {
@@ -83,8 +83,8 @@ var StreamAggregate = React.createClass({
                    onChange={this.onSelect} />
           </div>
           <h3>
-            <Router.Link to="aggregateDetails"
-                  params={{orgId: params.orgId, projectId: params.projectId, aggregateId: data.id}}>
+            <Router.Link to="groupDetails"
+                  params={{orgId: params.orgId, projectId: params.projectId, groupId: data.id}}>
               <span className="icon icon-bookmark"></span>
               {data.title}
             </Router.Link>
@@ -100,7 +100,7 @@ var StreamAggregate = React.createClass({
         </div>
         <div className="event-assignee col-md-1 hidden-xs hidden-sm">
           <AssigneeSelector
-            aggregate={data}
+            group={data}
             memberList={this.props.memberList} />
         </div>
         <div className="col-md-2 hidden-sm hidden-xs event-graph align-right">
@@ -117,4 +117,4 @@ var StreamAggregate = React.createClass({
   }
 });
 
-module.exports = StreamAggregate;
+module.exports = StreamGroup;
diff --git a/src/sentry/static/sentry/app/views/stream/pagination.jsx b/src/sentry/static/sentry/app/views/stream/pagination.jsx
index 54ff1ad7eb..23c3ed8888 100644
--- a/src/sentry/static/sentry/app/views/stream/pagination.jsx
+++ b/src/sentry/static/sentry/app/views/stream/pagination.jsx
@@ -5,12 +5,12 @@ var utils = require("../../utils");
 
 var StreamPagination = React.createClass({
   propTypes: {
-    aggList: React.PropTypes.instanceOf(Array).isRequired,
+    groupList: React.PropTypes.instanceOf(Array).isRequired,
     pageLinks: React.PropTypes.string.isRequired
   },
 
   render: function(){
-    if (!this.props.pageLinks || this.props.aggList.length === 0) {
+    if (!this.props.pageLinks || this.props.groupList.length === 0) {
       return <div />;
     }
 
diff --git a/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx
index cb2ba435f7..15f31eb047 100644
--- a/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx
@@ -10,20 +10,20 @@ var PropTypes = require("../../proptypes");
 
 var EventNode = React.createClass({
   propTypes: {
-    aggregate: PropTypes.Aggregate.isRequired
+    group: PropTypes.Group.isRequired
   },
 
   render() {
-    var agg = this.props.aggregate;
+    var group = this.props.group;
 
     return (
       <li>
         <div className="dashboard-count">
-          <Count value={agg.count} />
+          <Count value={group.count} />
         </div>
         <div className="dashboard-details">
-          <h3><a>{agg.title}</a></h3>
-          <p className="message">{agg.culprit}</p>
+          <h3><a>{group.title}</a></h3>
+          <p className="message">{group.culprit}</p>
           <p className="time"><span>First:</span> <time time-since="group.firstSeen"></time>. <span>Last:</span> <time time-since="group.lastSeen"></time>.</p>
         </div>
       </li>
@@ -39,7 +39,7 @@ var EventList = React.createClass({
 
   getInitialState() {
     return {
-      aggList: [],
+      groupList: [],
       loading: true,
       error: false,
       statsPeriod: "24h"
@@ -82,7 +82,7 @@ var EventList = React.createClass({
       },
       success: (data) => {
         this.setState({
-          aggList: data,
+          groupList: data,
           loading: false,
           error: false
         });
@@ -103,8 +103,8 @@ var EventList = React.createClass({
   },
 
   render() {
-    var eventNodes = this.state.aggList.map((item) => {
-      return <EventNode aggregate={item} key={item.id} />;
+    var eventNodes = this.state.groupList.map((item) => {
+      return <EventNode group={item} key={item.id} />;
     });
 
     return (
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index de1ecad22e..9e18d53e06 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -23,17 +23,22 @@ var TeamDashboard = React.createClass({
   },
 
   childContextTypes: {
+    organization: PropTypes.Organization,
     team: PropTypes.Team
   },
 
   getChildContext() {
-     return {team: this.state.team};
+    return {
+      organization: this.state.organization,
+      team: this.state.team
+    };
   },
 
   componentWillMount() {
     api.request(this.getTeamDetailsEndpoint(), {
       success: (data) => {
         this.setState({
+          organization: data.organization,
           team: data
         });
 
