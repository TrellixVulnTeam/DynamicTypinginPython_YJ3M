commit 1829aa35d0c84b4a3c74d4893320857535d9be70
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Oct 10 17:19:03 2019 -0700

    feat(apm): Add APM for `<OrganizationDetails>` and `<ProjectsDâ€¦ (#14960)
    
    Add simple metrics for `<OrganizationDetails>` and
    `<ProjectsDashboard>`.

diff --git a/src/sentry/static/sentry/app/api.tsx b/src/sentry/static/sentry/app/api.tsx
index abc9e2ea5c..9195e057c9 100644
--- a/src/sentry/static/sentry/app/api.tsx
+++ b/src/sentry/static/sentry/app/api.tsx
@@ -13,6 +13,8 @@ import {uniqueId} from 'app/utils/guid';
 import GroupActions from 'app/actions/groupActions';
 import createRequestError from 'app/utils/requestError/createRequestError';
 
+import {startRequest, finishRequest} from 'app/utils/apm';
+
 export class Request {
   alive: boolean;
   xhr: JQueryXHR;
@@ -251,6 +253,9 @@ export class Client {
     const id: string = uniqueId();
     metric.mark(`api-request-start-${id}`);
 
+    // notify apm utils that a request has started
+    startRequest(id);
+
     let fullUrl: string;
     if (path.indexOf(this.baseUrl) === -1) {
       fullUrl = this.baseUrl + path;
@@ -342,6 +347,7 @@ export class Client {
         },
         complete: (jqXHR: JQueryXHR, textStatus: string) => {
           requestSpan.finish();
+          finishRequest(id);
 
           return this.wrapCallback<[JQueryXHR, string]>(id, options.complete, true)(
             jqXHR,
diff --git a/src/sentry/static/sentry/app/utils/apm.jsx b/src/sentry/static/sentry/app/utils/apm.jsx
index bc9c821c29..4d9f06df3d 100644
--- a/src/sentry/static/sentry/app/utils/apm.jsx
+++ b/src/sentry/static/sentry/app/utils/apm.jsx
@@ -28,11 +28,36 @@ function startTransaction() {
   finishTransaction(5000);
 }
 
+const requests = new Set([]);
+const renders = new Set([]);
 let flushTransactionTimeout = undefined;
-function finishTransaction(delay) {
-  if (flushTransactionTimeout) {
-    clearTimeout(flushTransactionTimeout);
+let wasInterrupted = false;
+
+const hasActiveRequests = () => requests.size > 0;
+const hasActiveRenders = () => renders.size > 0;
+
+/**
+ * Postpone finishing the root span until all renders and requests are finished
+ *
+ * TODO(apm): We probably want a hard limit for root span, e.g. it's possible we have long
+ * API requests combined with renders that could create a very long root span.
+ *
+ * TODO(apm): Handle polling requests?
+ */
+function interruptFlush() {
+  if (!flushTransactionTimeout) {
+    return;
+  }
+
+  clearTimeout(flushTransactionTimeout);
+  wasInterrupted = true;
+}
+
+export function finishTransaction(delay) {
+  if (flushTransactionTimeout || (hasActiveRenders() || hasActiveRequests())) {
+    interruptFlush();
   }
+
   flushTransactionTimeout = setTimeout(() => {
     Sentry.configureScope(scope => {
       const span = scope.getSpan();
@@ -43,6 +68,34 @@ function finishTransaction(delay) {
   }, delay || 5000);
 }
 
+export function startRequest(id) {
+  requests.add(id);
+  interruptFlush();
+}
+
+export function finishRequest(id) {
+  requests.delete(id);
+  interruptFlush();
+
+  if (wasInterrupted && !hasActiveRenders() && !hasActiveRequests()) {
+    finishTransaction(1);
+  }
+}
+
+export function startRender(id) {
+  renders.add(id);
+  interruptFlush();
+}
+
+export function finishRender(id) {
+  renders.delete(id);
+  interruptFlush();
+
+  if (wasInterrupted && !hasActiveRenders() && !hasActiveRequests()) {
+    finishTransaction(1);
+  }
+}
+
 export function startApm() {
   Sentry.configureScope(scope => {
     scope.setSpan(
diff --git a/src/sentry/static/sentry/app/utils/profiler.jsx b/src/sentry/static/sentry/app/utils/profiler.jsx
new file mode 100644
index 0000000000..4e41787b6d
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/profiler.jsx
@@ -0,0 +1,57 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import * as Sentry from '@sentry/browser';
+
+import {startRender, finishRender} from 'app/utils/apm';
+import getDisplayName from 'app/utils/getDisplayName';
+
+export default function profiler() {
+  return WrappedComponent => {
+    const displayName = getDisplayName(WrappedComponent);
+
+    return class extends React.Component {
+      static displayName = displayName;
+
+      static propTypes = {
+        api: PropTypes.object,
+      };
+
+      componentWillUnmount() {
+        this.finishProfile();
+      }
+
+      span = this.initializeSpan();
+
+      initializeSpan() {
+        const span = Sentry.startSpan({
+          data: {},
+          op: 'react',
+          description: `<${displayName}>`,
+        });
+        startRender(displayName);
+
+        // TODO(apm): We could try to associate this component with API client
+        // e.g:
+        // if (this.props.api) {
+        // this.props.api.setParentSpan(span);
+        // }
+
+        return span;
+      }
+
+      finishProfile = () => {
+        if (!this.span) {
+          return;
+        }
+
+        this.span.finish();
+        finishRender(displayName);
+        this.span = null;
+      };
+
+      render() {
+        return <WrappedComponent {...this.props} finishProfile={this.finishProfile} />;
+      }
+    };
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index b58f33eb4e..07a72b22a6 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -2,15 +2,15 @@ import DocumentTitle from 'react-document-title';
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
+import * as Sentry from '@sentry/browser';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
-import * as Sentry from '@sentry/browser';
 
+import {metric} from 'app/utils/analytics';
 import {openSudo} from 'app/actionCreators/modal';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 import {t} from 'app/locale';
 import Alert from 'app/components/alert';
-import withApi from 'app/utils/withApi';
 import ConfigStore from 'app/stores/configStore';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import HookStore from 'app/stores/hookStore';
@@ -21,10 +21,11 @@ import ProjectsStore from 'app/stores/projectsStore';
 import SentryTypes from 'app/sentryTypes';
 import Sidebar from 'app/components/sidebar';
 import TeamStore from 'app/stores/teamStore';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
+import profiler from 'app/utils/profiler';
 import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
 import withOrganizations from 'app/utils/withOrganizations';
-import {metric} from 'app/utils/analytics';
-import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 const ERROR_TYPES = {
   ORG_NOT_FOUND: 'ORG_NOT_FOUND',
@@ -40,6 +41,7 @@ const OrganizationContext = createReactClass({
     useLastOrganization: PropTypes.bool,
     organizationsLoading: PropTypes.bool,
     organizations: PropTypes.arrayOf(SentryTypes.Organization),
+    finishProfile: PropTypes.func,
   },
 
   childContextTypes: {
@@ -87,6 +89,10 @@ const OrganizationContext = createReactClass({
     ) {
       this.remountComponent();
     }
+
+    if (this.state.organization && this.props.finishProfile) {
+      this.props.finishProfile();
+    }
   },
 
   componentWillUnmount() {
@@ -271,7 +277,7 @@ const OrganizationContext = createReactClass({
   },
 });
 
-export default withApi(withOrganizations(OrganizationContext));
+export default withApi(withOrganizations(profiler()(OrganizationContext)));
 export {OrganizationContext};
 
 const ErrorWrapper = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx b/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
index 0ce7743ff0..5cd97804ce 100644
--- a/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
@@ -16,6 +16,7 @@ import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import ProjectsStatsStore from 'app/stores/projectsStatsStore';
 import SentryTypes from 'app/sentryTypes';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
+import profiler from 'app/utils/profiler';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
@@ -31,16 +32,22 @@ class Dashboard extends React.Component {
     teams: PropTypes.array,
     projects: PropTypes.array,
     organization: SentryTypes.Organization,
+    finishProfile: PropTypes.func,
   };
 
   componentDidMount() {
-    const {organization, routes} = this.props;
+    const {organization, routes, finishProfile} = this.props;
     const isOldRoute = getRouteStringFromRoutes(routes) === '/:orgId/';
 
     if (isOldRoute) {
       browserHistory.replace(`/organizations/${organization.slug}/`);
     }
+
+    if (finishProfile) {
+      finishProfile();
+    }
   }
+
   componentWillUnmount() {
     ProjectsStatsStore.reset();
   }
@@ -143,4 +150,6 @@ const ProjectsHeader = styled('div')`
 `;
 
 export {Dashboard};
-export default withTeams(withProjects(withOrganization(OrganizationDashboard)));
+export default withTeams(
+  withProjects(withOrganization(profiler()(OrganizationDashboard)))
+);
diff --git a/src/sentry/static/sentry/app/views/projectsDashboard/projectCard.jsx b/src/sentry/static/sentry/app/views/projectsDashboard/projectCard.jsx
index 7c0adc3500..fac3c37732 100644
--- a/src/sentry/static/sentry/app/views/projectsDashboard/projectCard.jsx
+++ b/src/sentry/static/sentry/app/views/projectsDashboard/projectCard.jsx
@@ -1,5 +1,4 @@
 import {Box} from 'grid-emotion';
-import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
@@ -24,23 +23,22 @@ class ProjectCard extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
     project: SentryTypes.Project.isRequired,
-    params: PropTypes.object,
     hasProjectAccess: PropTypes.bool,
   };
 
   componentDidMount() {
-    const {project, params} = this.props;
+    const {organization, project} = this.props;
 
     this.api = new Client();
 
     // fetch project stats
     loadStatsForProject(this.api, project.id, {
-      orgId: params.orgId,
+      orgId: organization.slug,
     });
   }
 
   render() {
-    const {organization, project, hasProjectAccess, params} = this.props;
+    const {organization, project, hasProjectAccess} = this.props;
     const {id, firstEvent, stats, slug} = project;
 
     return (
@@ -53,7 +51,9 @@ class ProjectCard extends React.Component {
                 avatarSize={18}
                 displayName={
                   hasProjectAccess ? (
-                    <Link to={`/organizations/${params.orgId}/issues/?project=${id}`}>
+                    <Link
+                      to={`/organizations/${organization.slug}/issues/?project=${id}`}
+                    >
                       <strong>{slug}</strong>
                     </Link>
                   ) : (
@@ -155,4 +155,4 @@ const StyledIdBadge = styled(IdBadge)`
 `;
 
 export {ProjectCard};
-export default withRouter(withOrganization(ProjectCardContainer));
+export default withOrganization(ProjectCardContainer);
