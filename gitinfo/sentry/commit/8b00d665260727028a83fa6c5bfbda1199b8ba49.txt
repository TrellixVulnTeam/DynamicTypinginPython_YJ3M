commit 8b00d665260727028a83fa6c5bfbda1199b8ba49
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 25 20:36:50 2012 -0800

    Convert mail to new option helpers and adjust default values

diff --git a/sentry/plugins/helpers.py b/sentry/plugins/helpers.py
index 237c85e9e8..81cbc1a434 100644
--- a/sentry/plugins/helpers.py
+++ b/sentry/plugins/helpers.py
@@ -22,9 +22,9 @@ def set_option(key, value, project=None):
 
 def get_option(key, project=None):
     if project:
-        result = ProjectOption.objects.get_value(project, key)
+        result = ProjectOption.objects.get_value(project, key, None)
     else:
-        result = Option.objects.get_value(key)
+        result = Option.objects.get_value(key, None)
 
     return result
 
diff --git a/sentry/plugins/sentry_mail/__init__.py b/sentry/plugins/sentry_mail/__init__.py
index 703796ff3a..0cb4949890 100644
--- a/sentry/plugins/sentry_mail/__init__.py
+++ b/sentry/plugins/sentry_mail/__init__.py
@@ -9,7 +9,6 @@ from django import forms
 from django.core.mail import send_mail
 from django.template.loader import render_to_string
 from sentry.conf import settings
-from sentry.models import ProjectOption
 from sentry.plugins import Plugin
 
 NOTSET = object()
@@ -47,14 +46,26 @@ class MailProcessor(Plugin):
         self.send_to = send_to
         self.subject_prefix = settings.EMAIL_SUBJECT_PREFIX
 
+    def _send_mail(self, subject, body, project=None, fail_silently=True):
+        send_to = self.get_option('send_to', project) or self.send_to
+        subject_prefix = self.get_option('subject_prefix', project) or self.subject_prefix
+
+        send_mail('%s%s' % (subject_prefix, subject), body,
+                  settings.SERVER_EMAIL, send_to,
+                  fail_silently=fail_silently)
+
+    def send_test_mail(self, project=None):
+        self._send_mail(
+            subject='Test Email',
+            body='This email was requested as a test of Sentry\'s outgoing email',
+            project=project,
+        )
+
     def mail_admins(self, group, event, fail_silently=True):
         interfaces = event.interfaces
 
         project = group.project
 
-        send_to = ProjectOption.objects.get_value(project, 'mail:send_to', self.send_to)
-        subject_prefix = ProjectOption.objects.get_value(project, 'mail:subject_prefix', self.subject_prefix)
-
         if 'sentry.interfaces.Exception' in interfaces:
             traceback = interfaces['sentry.interfaces.Exception'].to_string(event)
         else:
@@ -64,9 +75,9 @@ class MailProcessor(Plugin):
 
         if http:
             ip_repr = (http.env.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL')
-            subject = '%sError (%s IP): %s' % (subject_prefix, ip_repr, http.url)
+            subject = 'Error (%s IP): %s' % (ip_repr, http.url)
         else:
-            subject = '%sError: %s' % (subject_prefix, event.message)
+            subject = 'Error: %s' % (event.message,)
 
         if event.site:
             subject = '[%s] %s' % (event.site, subject)
@@ -80,22 +91,20 @@ class MailProcessor(Plugin):
             'link': link,
         })
 
-        send_mail(subject, body,
-                  settings.SERVER_EMAIL, send_to,
-                  fail_silently=fail_silently)
+        self._send_mail(subject, body, project, fail_silently=fail_silently)
 
     def should_mail(self, group, event):
         project = group.project
-        send_to = ProjectOption.objects.get_value(project, 'mail:send_to', self.send_to)
+        send_to = self.get_option('send_to', project) or self.send_to
         if not send_to:
             return False
-        min_level = ProjectOption.objects.get_value(project, 'mail:min_level', self.min_level)
+        min_level = self.get_option('min_level', project) or self.min_level
         if min_level is not None and int(group.level) < min_level:
             return False
-        include_loggers = ProjectOption.objects.get_value(project, 'mail:include_loggers', self.include_loggers)
+        include_loggers = self.get_option('include_loggers', project) or self.include_loggers
         if include_loggers is not None and group.logger not in include_loggers:
             return False
-        exclude_loggers = ProjectOption.objects.get_value(project, 'mail:exclude_loggers', self.exclude_loggers)
+        exclude_loggers = self.get_option('exclude_loggers', project) or self.exclude_loggers
         if exclude_loggers and group.logger in exclude_loggers:
             return False
         return True
diff --git a/tests/plugins/tests.py b/tests/plugins/tests.py
index 3492c4665f..5a7a0869be 100644
--- a/tests/plugins/tests.py
+++ b/tests/plugins/tests.py
@@ -41,11 +41,11 @@ class SentryPluginTest(TestCase):
             result = get_option('key', project)
             self.assertEquals(result, get_value.return_value)
 
-            get_value.assert_called_once_with(project, 'key')
+            get_value.assert_called_once_with(project, 'key', None)
 
     def test_get_option_without_project(self):
         with mock.patch('sentry.models.Option.objects.get_value') as get_value:
             result = get_option('key')
             self.assertEquals(result, get_value.return_value)
 
-            get_value.assert_called_once_with('key')
+            get_value.assert_called_once_with('key', None)
