commit da8b28782fe48b6cced2ebad8492ebb8db701ec8
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Fri Nov 22 11:11:21 2019 -0500

    fix(discover2): Disconnect minigraphs from the global selection header (#15707)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 983f32a995..4a4f3f8c1d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -3,6 +3,7 @@ import isString from 'lodash/isString';
 import cloneDeep from 'lodash/cloneDeep';
 import pick from 'lodash/pick';
 import isEqual from 'lodash/isEqual';
+import omit from 'lodash/omit';
 import moment from 'moment';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
@@ -21,23 +22,17 @@ import {
 import {TableColumn, TableColumnSort} from './table/types';
 
 type LocationQuery = {
-  project?: string | string[];
-  environment?: string | string[];
   start?: string | string[];
   end?: string | string[];
   utc?: string | string[];
   statsPeriod?: string | string[];
   cursor?: string | string[];
-  yAxis?: string | string[];
 };
 
+const DATETIME_QUERY_STRING_KEYS = ['start', 'end', 'utc', 'statsPeriod'] as const;
+
 const EXTERNAL_QUERY_STRING_KEYS: Readonly<Array<keyof LocationQuery>> = [
-  'project',
-  'environment',
-  'start',
-  'end',
-  'utc',
-  'statsPeriod',
+  ...DATETIME_QUERY_STRING_KEYS,
   'cursor',
 ];
 
@@ -381,6 +376,22 @@ class EventView {
     });
   }
 
+  static fromSavedQueryWithLocation(
+    saved: NewQuery | LegacySavedQuery,
+    location: Location
+  ): EventView {
+    const query = location.query;
+
+    saved = {
+      ...saved,
+      start: saved.start || decodeScalar(query.start),
+      end: saved.end || decodeScalar(query.end),
+      range: saved.range || decodeScalar(query.statsPeriod),
+    };
+
+    return EventView.fromSavedQuery(saved);
+  }
+
   static fromSavedQuery(saved: NewQuery | LegacySavedQuery): EventView {
     let fields, yAxis;
     if (isLegacySavedQuery(saved)) {
@@ -539,6 +550,8 @@ class EventView {
       fieldnames: this.getFieldNames(),
       sort: encodeSorts(this.sorts),
       tag: this.tags,
+      environment: this.environment,
+      project: this.project,
       query: this.query,
       yAxis: this.yAxis,
     };
@@ -883,26 +896,30 @@ class EventView {
     // normalize datetime selection
 
     const normalizedTimeWindowParams = getParams({
-      start: this.start,
-      end: this.end,
+      start: this.start || picked.start,
+      end: this.end || picked.end,
       period: decodeScalar(query.period),
-      statsPeriod: this.statsPeriod,
+      statsPeriod: this.statsPeriod || picked.statsPeriod,
       utc: decodeScalar(query.utc),
     });
 
     const sort = this.sorts.length > 0 ? encodeSort(this.sorts[0]) : undefined;
     const fields = this.getFields();
+    const project = this.project.map(proj => String(proj));
+    const environment = this.environment as string[];
 
     // generate event query
 
     const eventQuery: EventQuery & LocationQuery = Object.assign(
-      picked,
+      omit(picked, DATETIME_QUERY_STRING_KEYS),
       normalizedTimeWindowParams,
       {
+        project,
+        environment,
         field: [...new Set(fields)],
         sort,
         per_page: DEFAULT_PER_PAGE,
-        query: this.getQuery(query.query),
+        query: this.query,
       }
     );
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 0197da263d..e5b69bc470 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -143,7 +143,9 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
       return null;
     }
 
-    const eventView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
+    const {location} = this.props;
+
+    const eventView = EventView.fromSavedQueryWithLocation(DEFAULT_EVENT_VIEW, location);
 
     const to = {
       pathname: location.pathname,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
index f02e39653d..39b21e506a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
@@ -1,14 +1,14 @@
 import React from 'react';
 import isEqual from 'lodash/isEqual';
-import omit from 'lodash/omit';
+import {Location} from 'history';
 
 import withApi from 'app/utils/withApi';
-import withGlobalSelection from 'app/utils/withGlobalSelection';
 import {Client} from 'app/api';
-import {GlobalSelection, Organization} from 'app/types';
+import {Organization} from 'app/types';
 import EventsRequest from 'app/views/events/utils/eventsRequest';
 import AreaChart from 'app/components/charts/areaChart';
 import {getInterval} from 'app/components/charts/utils';
+import {getUtcToLocalDateObject} from 'app/utils/dates';
 
 import EventView from './eventView';
 
@@ -16,12 +16,7 @@ type Props = {
   organization: Organization;
   eventView: EventView;
   api: Client;
-  selection: GlobalSelection;
-  query: string;
-};
-
-const omitProps = (props: Props) => {
-  return omit(props, ['api']);
+  location: Location;
 };
 
 class MiniGraph extends React.Component<Props> {
@@ -30,12 +25,33 @@ class MiniGraph extends React.Component<Props> {
     // than the cost for rendering the graph, which can take ~200ms to ~300ms to
     // render.
 
-    return !isEqual(omitProps(this.props), omitProps(nextProps));
+    return !isEqual(this.getRefreshProps(this.props), this.getRefreshProps(nextProps));
+  }
+
+  getRefreshProps(props: Props) {
+    // get props that are relevant to the API payload for the graph
+
+    const {organization, location, eventView} = props;
+
+    const apiPayload = eventView.getEventsAPIPayload(location);
+    const query = apiPayload.query;
+    const start = getUtcToLocalDateObject(apiPayload.start);
+    const end = getUtcToLocalDateObject(apiPayload.end);
+    const period: string | undefined = apiPayload.statsPeriod as any;
+
+    return {
+      organization,
+      apiPayload,
+      query,
+      start,
+      end,
+      period,
+    };
   }
 
   render() {
-    const {organization, api, selection, query} = this.props;
-    const {start, end, period} = selection.datetime;
+    const {eventView, api} = this.props;
+    const {query, start, end, period, organization} = this.getRefreshProps(this.props);
 
     return (
       <EventsRequest
@@ -46,6 +62,9 @@ class MiniGraph extends React.Component<Props> {
         end={end}
         period={period}
         interval={getInterval({start, end, period}, true)}
+        project={eventView.project as number[]}
+        environment={eventView.environment as string[]}
+        includePrevious={false}
       >
         {({loading, timeseriesData}) => {
           if (loading) {
@@ -103,4 +122,4 @@ class MiniGraph extends React.Component<Props> {
   }
 }
 
-export default withApi(withGlobalSelection(MiniGraph));
+export default withApi(MiniGraph);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index 6f28c5a8b7..268257cd92 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -80,7 +80,7 @@ class QueryList extends React.Component<Props> {
     const views = getPrebuiltQueries(organization);
 
     const list = views.map((view, index) => {
-      const eventView = EventView.fromSavedQuery(view);
+      const eventView = EventView.fromSavedQueryWithLocation(view, location);
       const to = {
         pathname: location.pathname,
         query: {
@@ -99,7 +99,7 @@ class QueryList extends React.Component<Props> {
           renderGraph={() => {
             return (
               <MiniGraph
-                query={eventView.getEventsAPIPayload(location).query}
+                location={location}
                 eventView={eventView}
                 organization={organization}
               />
@@ -155,7 +155,7 @@ class QueryList extends React.Component<Props> {
           renderGraph={() => {
             return (
               <MiniGraph
-                query={eventView.getEventsAPIPayload(location).query}
+                location={location}
                 eventView={eventView}
                 organization={organization}
               />
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index c1fefff501..e90ea84542 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -57,7 +57,10 @@ class Table extends React.PureComponent<TableProps, TableState> {
     const {location, eventView} = this.props;
 
     if (!eventView.isValid()) {
-      const nextEventView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
+      const nextEventView = EventView.fromSavedQueryWithLocation(
+        DEFAULT_EVENT_VIEW,
+        location
+      );
 
       browserHistory.replace({
         pathname: location.pathname,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 9999622a86..b039736a83 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -31,8 +31,8 @@ import {
 import {TableColumn} from './table/types';
 
 export type EventQuery = {
-  field: Array<string>;
-  project?: string;
+  field: string[];
+  project?: string | string[];
   sort?: string | string[];
   query: string;
   per_page?: number;
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index 2a7957d29d..2ce35e20a3 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -381,13 +381,20 @@ describe('EventView.generateQueryStringObject()', function() {
       end: undefined,
       yAxis: undefined,
     });
-    const query = eventView.generateQueryStringObject();
-    expect(query.environment).toBeUndefined();
-    expect(query.statsPeriod).toBeUndefined();
-    expect(query.start).toBeUndefined();
-    expect(query.end).toBeUndefined();
-    expect(query.project).toBeUndefined();
-    expect(query.yAxis).toBeUndefined();
+
+    const expected = {
+      id: undefined,
+      name: undefined,
+      field: ['id', 'title'],
+      fieldnames: ['id', 'title'],
+      sort: [],
+      tag: [],
+      query: '',
+      project: [],
+      environment: [],
+    };
+
+    expect(eventView.generateQueryStringObject()).toEqual(expected);
   });
 
   it('generates query string object', function() {
@@ -461,38 +468,31 @@ describe('EventView.generateQueryStringObject()', function() {
 });
 
 describe('EventView.getEventsAPIPayload()', function() {
-  it('appends any additional conditions defined for view', function() {
+  it('generates the API payload', function() {
     const eventView = new EventView({
+      id: 34,
+      name: 'amazing query',
       fields: generateFields(['id']),
-      sorts: [],
-      tags: [],
+      sorts: generateSorts(['id']),
+      tags: ['project'],
       query: 'event.type:csp',
+      project: [567],
+      environment: ['prod'],
+      yAxis: 'users',
     });
 
-    const location = {};
-
-    expect(eventView.getEventsAPIPayload(location).query).toEqual('event.type:csp');
-  });
-
-  it('appends query conditions in location', function() {
-    const eventView = new EventView({
-      fields: generateFields(['id']),
-      sorts: [],
-      tags: [],
+    expect(eventView.getEventsAPIPayload({})).toEqual({
+      field: ['id'],
+      per_page: 50,
+      sort: '-id',
       query: 'event.type:csp',
+      project: ['567'],
+      environment: ['prod'],
+      statsPeriod: '14d',
     });
-
-    const location = {
-      query: {
-        query: 'TypeError',
-      },
-    };
-    expect(eventView.getEventsAPIPayload(location).query).toEqual(
-      'event.type:csp TypeError'
-    );
   });
 
-  it('does not duplicate conditions', function() {
+  it('does not append query conditions in location', function() {
     const eventView = new EventView({
       fields: generateFields(['id']),
       sorts: [],
@@ -502,7 +502,7 @@ describe('EventView.getEventsAPIPayload()', function() {
 
     const location = {
       query: {
-        query: 'event.type:csp',
+        query: 'TypeError',
       },
     };
     expect(eventView.getEventsAPIPayload(location).query).toEqual('event.type:csp');
@@ -548,8 +548,6 @@ describe('EventView.getEventsAPIPayload()', function() {
 
     const location = {
       query: {
-        project: '1234',
-        environment: ['staging'],
         start: 'start',
         end: 'end',
         utc: 'true',
@@ -557,16 +555,16 @@ describe('EventView.getEventsAPIPayload()', function() {
         cursor: 'some cursor',
         yAxis: 'count(id)',
 
-        // non-relevant query strings
+        // irrelevant query strings
         bestCountry: 'canada',
+        project: '1234',
+        environment: ['staging'],
       },
     };
 
     expect(eventView.getEventsAPIPayload(location)).toEqual({
-      project: '1234',
-      environment: ['staging'],
-      start: 'start',
-      end: 'end',
+      project: [],
+      environment: [],
       utc: 'true',
       statsPeriod: '14d',
 
@@ -584,12 +582,12 @@ describe('EventView.getEventsAPIPayload()', function() {
       sorts: generateSorts(['project', 'count']),
       tags: [],
       query: 'event.type:csp',
+      project: [1234],
+      environment: ['staging'],
     });
 
     const location = {
       query: {
-        project: '1234',
-        environment: ['staging'],
         start: 'start',
         end: 'end',
         utc: 'true',
@@ -600,10 +598,8 @@ describe('EventView.getEventsAPIPayload()', function() {
     };
 
     expect(eventView.getEventsAPIPayload(location)).toEqual({
-      project: '1234',
+      project: ['1234'],
       environment: ['staging'],
-      start: 'start',
-      end: 'end',
       utc: 'true',
       statsPeriod: '14d',
 
@@ -616,8 +612,6 @@ describe('EventView.getEventsAPIPayload()', function() {
 
     const location2 = {
       query: {
-        project: '1234',
-        environment: ['staging'],
         start: 'start',
         end: 'end',
         utc: 'true',
@@ -627,10 +621,8 @@ describe('EventView.getEventsAPIPayload()', function() {
     };
 
     expect(eventView.getEventsAPIPayload(location2)).toEqual({
-      project: '1234',
+      project: ['1234'],
       environment: ['staging'],
-      start: 'start',
-      end: 'end',
       utc: 'true',
       statsPeriod: '14d',
 
@@ -648,12 +640,12 @@ describe('EventView.getEventsAPIPayload()', function() {
       sorts: generateSorts(['project', 'count']),
       tags: [],
       query: 'event.type:csp',
+      project: [1234],
+      environment: ['staging'],
     });
 
     const location = {
       query: {
-        project: '1234',
-        environment: ['staging'],
         start: 'start',
         utc: 'true',
         statsPeriod: 'invalid',
@@ -662,10 +654,9 @@ describe('EventView.getEventsAPIPayload()', function() {
     };
 
     expect(eventView.getEventsAPIPayload(location)).toEqual({
-      project: '1234',
+      project: ['1234'],
       environment: ['staging'],
       utc: 'true',
-      start: 'start',
       statsPeriod: '14d',
 
       field: ['title', 'count()'],
@@ -677,8 +668,6 @@ describe('EventView.getEventsAPIPayload()', function() {
 
     const location2 = {
       query: {
-        project: '1234',
-        environment: ['staging'],
         end: 'end',
         utc: 'true',
         statsPeriod: 'invalid',
@@ -687,10 +676,9 @@ describe('EventView.getEventsAPIPayload()', function() {
     };
 
     expect(eventView.getEventsAPIPayload(location2)).toEqual({
-      project: '1234',
+      project: ['1234'],
       environment: ['staging'],
       utc: 'true',
-      end: 'end',
       statsPeriod: '14d',
 
       field: ['title', 'count()'],
@@ -709,6 +697,8 @@ describe('EventView.getEventsAPIPayload()', function() {
       query: 'event.type:csp',
       start: '2019-10-01T00:00:00',
       end: '2019-10-02T00:00:00',
+      environment: [],
+      project: [],
     });
 
     const location = {
@@ -722,6 +712,8 @@ describe('EventView.getEventsAPIPayload()', function() {
       start: '2019-10-01T00:00:00.000',
       end: '2019-10-02T00:00:00.000',
       per_page: 50,
+      project: [],
+      environment: [],
     });
   });
 });
@@ -737,25 +729,23 @@ describe('EventView.getTagsAPIPayload()', function() {
 
     const location = {
       query: {
-        project: '1234',
-        environment: ['staging'],
         start: 'start',
         end: 'end',
         utc: 'true',
         statsPeriod: '14d',
 
-        // non-relevant query strings
+        // irrelevant query strings
         bestCountry: 'canada',
         cursor: 'some cursor',
         sort: 'the world',
+        project: '1234',
+        environment: ['staging'],
       },
     };
 
     expect(eventView.getTagsAPIPayload(location)).toEqual({
-      project: '1234',
-      environment: ['staging'],
-      start: 'start',
-      end: 'end',
+      project: [],
+      environment: [],
       utc: 'true',
       statsPeriod: '14d',
 
@@ -2261,8 +2251,6 @@ describe('pickRelevantLocationQueryStrings', function() {
     const actual = pickRelevantLocationQueryStrings(location);
 
     const expected = {
-      project: 'project',
-      environment: 'environment',
       start: 'start',
       end: 'end',
       utc: 'utc',
