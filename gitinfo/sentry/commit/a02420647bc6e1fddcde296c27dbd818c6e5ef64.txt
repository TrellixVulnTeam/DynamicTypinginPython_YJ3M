commit a02420647bc6e1fddcde296c27dbd818c6e5ef64
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Mar 30 14:33:31 2016 -0700

    Support persistent dismissal of non-ephemeral alerts.

diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index 7413ed18e2..0fe31b340f 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -5,23 +5,28 @@ import {t} from '../locale';
 
 const AlertMessage = React.createClass({
   propTypes: {
-    className: React.PropTypes.string,
-    id: React.PropTypes.number.isRequired,
-    message: React.PropTypes.string.isRequired,
-    type: React.PropTypes.string,
-    url: React.PropTypes.string
+    alert: React.PropTypes.shape({
+      id: React.PropTypes.string,
+      message: React.PropTypes.string.isRequired,
+      type: React.PropTypes.oneOf([
+        'success',
+        'error',
+        'warning'
+      ]),
+      url: React.PropTypes.string
+    })
   },
 
   mixins: [PureRenderMixin],
 
   closeAlert: function() {
-    AlertActions.closeAlert(this.props.id);
+    AlertActions.closeAlert(this.props.alert);
   },
 
   render: function() {
-    let className = this.props.className || 'alert';
-    if (this.props.type !== '') {
-      className += ' alert-' + this.props.type;
+    let className = 'alert';
+    if (this.props.alert.type !== '') {
+      className += ' alert-' + this.props.alert.type;
     }
 
     return (
@@ -32,9 +37,9 @@ const AlertMessage = React.createClass({
             <span aria-hidden="true">&times;</span>
           </button>
           <span className="icon"></span>
-          {this.props.url
-            ? <a href={this.props.url}>{this.props.message}</a>
-            : this.props.message}
+          {this.props.alert.url
+            ? <a href={this.props.alert.url}>{this.props.alert.message}</a>
+            : this.props.alert.message}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/alerts.jsx b/src/sentry/static/sentry/app/components/alerts.jsx
index 2edc9cc13b..f6a605f858 100644
--- a/src/sentry/static/sentry/app/components/alerts.jsx
+++ b/src/sentry/static/sentry/app/components/alerts.jsx
@@ -20,8 +20,8 @@ const Alerts = React.createClass({
   render() {
     return (
       <div {...this.props}>
-        {this.state.alerts.map(function(alert, key) {
-           return <AlertMessage id={alert.id} key={key} type={alert.type} message={alert.message} url={alert.url} />;
+        {this.state.alerts.map(function(alert) {
+           return <AlertMessage alert={alert} key={alert.key} />;
         })}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
index 0e64d8d699..1ab5079164 100644
--- a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
@@ -4,8 +4,6 @@ import AlertActions from '../actions/alertActions';
 import ApiMixin from '../mixins/apiMixin';
 import {t} from '../locale';
 
-const ERR_JOIN = 'There was an error while trying to join the team.';
-
 const MissingProjectMembership = React.createClass({
   propTypes: {
     organization: React.PropTypes.object.isRequired,
@@ -43,7 +41,10 @@ const MissingProjectMembership = React.createClass({
           loading: false,
           error: true
         });
-        AlertActions.addAlert(ERR_JOIN, 'error');
+        AlertActions.addAlert({
+            message: 'There was an error while trying to join the team.',
+            type: 'error'
+        });
       }
     });
   },
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index 709cadc0bf..d284b7bbc9 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -1,5 +1,6 @@
 import Reflux from 'reflux';
 import AlertActions from '../actions/alertActions';
+import {getItem, setItem} from '../utils/localStorage';
 
 const AlertStore = Reflux.createStore({
   listenables: AlertActions,
@@ -9,34 +10,43 @@ const AlertStore = Reflux.createStore({
     this.count = 0;
   },
 
-  onAddAlert(message, type, expireAfter, url) {
-    // intentionally recreate array via concat because of Reflux
-    // "bug" where React components are given same reference to tracked
-    // data objects, and don't *see* that values have changed
-    let alertId = this.count++;
-
-    this.alerts = this.alerts.concat([{
-      id: alertId,
-      message: message,
-      type: type,
-      url: url
-    }]);
+  getMutedKey(alert) {
+    return `alerts:${alert.id}:muted`;
+  },
 
-    if (typeof expireAfter === 'undefined') {
-      expireAfter = 5000;
+  onAddAlert(alert) {
+    if (alert.id !== void 0) {
+      if (getItem(this.getMutedKey(alert)) !== null) {
+        return;
+      }
+    } else {
+      if (alert.expireAfter === void 0) {
+        alert.expireAfter = 5000;
+      }
     }
-    if (expireAfter) {
+
+    if (alert.expireAfter) {
       window.setTimeout(() => {
-        this.onCloseAlert(alertId);
-      }, expireAfter);
+        this.onCloseAlert(alert);
+      }, alert.expireAfter);
     }
 
+    alert.key = this.count++;
+
+    // intentionally recreate array via concat because of Reflux
+    // "bug" where React components are given same reference to tracked
+    // data objects, and don't *see* that values have changed
+    this.alerts = this.alerts.concat([alert]);
     this.trigger(this.alerts);
   },
 
-  onCloseAlert(id) {
+  onCloseAlert(alert) {
+    if (alert.id !== void 0) {
+      setItem(this.getMutedKey(alert), +new Date());
+    }
+
     // TODO(dcramer): we need some animations here for closing alerts
-    this.alerts = this.alerts.filter(item => item.id !== id);
+    this.alerts = this.alerts.filter(item => alert !== item);
     this.trigger(this.alerts);
   },
 });
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index 9206adef38..32d77aa0c6 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -134,7 +134,10 @@ const AdminSettings = React.createClass({
         this.setState({
           submitInProgress: false,
         });
-        AlertActions.addAlert(t('Your changes were saved, and will propagate to services shortly.'), 'success');
+        AlertActions.addAlert({
+            message: t('Your changes were saved, and will propagate to services shortly.'),
+            type: 'success'
+        });
       },
       error: () => {
         this.setState({
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index ae348bb47a..161e24c8d7 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -54,12 +54,12 @@ const App = React.createClass({
       success: (data) => {
         if (data && data.problems) {
           data.problems.forEach(problem => {
-            AlertActions.addAlert(
-              problem.message,
-              getAlertTypeForProblem(problem),
-              0,
-              problem.url
-            );
+            AlertActions.addAlert({
+              id: problem.id,
+              message: problem.message,
+              type: getAlertTypeForProblem(problem),
+              url: problem.url
+            });
           });
         }
       },
@@ -67,7 +67,10 @@ const App = React.createClass({
     });
 
     ConfigStore.get('messages').forEach((msg) => {
-      AlertActions.addAlert(msg.message, msg.level);
+      AlertActions.addAlert({
+        message: msg.message,
+        type: msg.level
+      });
     });
   },
 
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
index 959cb65fa1..7de0b71f58 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
@@ -46,10 +46,10 @@ const AllTeamsRow = React.createClass({
           loading: false,
           error: true
         });
-        AlertActions.addAlert(
-          t('There was an error while trying to join the team.'),
-          'error'
-        );
+        AlertActions.addAlert({
+          message: t('There was an error while trying to join the team.'),
+          type: 'error'
+        });
       }
     });
   },
@@ -74,10 +74,10 @@ const AllTeamsRow = React.createClass({
           loading: false,
           error: true
         });
-        AlertActions.addAlert(
-          t('There was an error while trying to leave the team.'),
-          'error'
-        );
+        AlertActions.addAlert({
+          message: t('There was an error while trying to leave the team.'),
+          type: 'error'
+        });
       }
     });
   },
diff --git a/tests/js/spec/stores/alertStore.spec.js b/tests/js/spec/stores/alertStore.spec.js
index 0ff7e6b512..9854d12c90 100644
--- a/tests/js/spec/stores/alertStore.spec.js
+++ b/tests/js/spec/stores/alertStore.spec.js
@@ -7,7 +7,7 @@ describe('AlertStore', function () {
   });
 
   describe('onAddAlert()', function () {
-    it('should add a new alert with incrementing id', function () {
+    it('should add a new alert with incrementing key', function () {
       AlertStore.onAddAlert({
         message: 'Bzzzzzzp *crash*',
         type: 'error'
@@ -19,24 +19,30 @@ describe('AlertStore', function () {
       });
 
       expect(AlertStore.alerts.length).to.eql(2);
-      expect(AlertStore.alerts[0].id).to.eql(0);
-      expect(AlertStore.alerts[1].id).to.eql(1);
+      expect(AlertStore.alerts[0].key).to.eql(0);
+      expect(AlertStore.alerts[1].key).to.eql(1);
     });
   });
 
   describe('onCloseAlert()', function () {
-    it('should remove alert with given id', function () {
+    it('should remove alert', function () {
       AlertStore.alerts = [
-        {id: 1, message: 'foo', type: 'error '},
-        {id: 2, message: 'bar', type: 'error '},
-        {id: 3, message: 'baz', type: 'error '},
+        {key: 1, message: 'foo', type: 'error'},
+        {key: 2, message: 'bar', type: 'error'},
+        {key: 3, message: 'baz', type: 'error'},
       ];
 
-      AlertStore.onCloseAlert(2);
+      AlertStore.onCloseAlert(AlertStore.alerts[1]);
 
       expect(AlertStore.alerts.length).to.eql(2);
-      expect(AlertStore.alerts[0].id).to.eql(1);
-      expect(AlertStore.alerts[1].id).to.eql(3);
+      expect(AlertStore.alerts[0].key).to.eql(1);
+      expect(AlertStore.alerts[1].key).to.eql(3);
+    });
+    it('should persist removal of persistent alerts', function () {
+      let alert = {key: 1, id: 'test', message: 'foo', type: 'error'};
+      AlertStore.onCloseAlert(alert);
+      AlertStore.onAddAlert(alert);
+      expect(AlertStore.alerts.length).to.eql(0);
     });
   });
 });
