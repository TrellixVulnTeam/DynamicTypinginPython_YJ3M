commit ce12d39156438d189622ffedee24f5101ab630ee
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 25 19:22:18 2013 -0800

    Trim stacktraces to 50 frames

diff --git a/docs/developer/client/index.rst b/docs/developer/client/index.rst
index afc946b557..abe4a0ce37 100644
--- a/docs/developer/client/index.rst
+++ b/docs/developer/client/index.rst
@@ -566,3 +566,4 @@ as things like extra data, or tags.
 - Extra contextual data is limited to 2048 characters.
 - Messages are limited to 1024 * 10 characters.
 - Http data (the body) is limited to 2048 characters.
+- Stacktrace's are limited to 50 frames. If more are sent, data will be removed from the middle of the stack.
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 620507ed5d..aae59d1db3 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -186,6 +186,7 @@ MAX_TAG_KEY_LENGTH = 32
 MAX_TAG_VALUE_LENGTH = 200
 MAX_CULPRIT_LENGTH = 200
 MAX_MESSAGE_LENGTH = 1024 * 10
+MAX_STACKTRACE_FRAMES = 50
 
 # Team slugs which may not be used. Generally these are top level URL patterns
 # which we don't want to worry about conflicts on.
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 22c5b9e2a9..74bad38334 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -413,10 +413,14 @@ class Stacktrace(Interface):
     describing the context of that frame. Frames should be sorted from oldest
     to newest.
 
-    The stacktrace contains one element, ``frames``, which is a list of hashes. Each
+    The stacktrace contains an element, ``frames``, which is a list of hashes. Each
     hash must contain **at least** the ``filename`` attribute. The rest of the values
     are optional, but recommended.
 
+    Additionally, if the list of frames is large, you can explicitly tell the
+    system that you've omitted a range of frames. The ``frames_omitted`` must
+    be a single tuple two values: start and end.
+
     The list of frames should be ordered by the oldest call first.
 
     Each frame must contain the following attributes:
@@ -474,7 +478,8 @@ class Stacktrace(Interface):
     >>>             "line4",
     >>>             "line5"
     >>>         ],
-    >>>     }]
+    >>>     }],
+    >>>     "frames_omitted": [13, 56]
     >>> }
 
     .. note:: This interface can be passed as the 'stacktrace' key in addition
@@ -485,6 +490,7 @@ class Stacktrace(Interface):
 
     def __init__(self, frames, **kwargs):
         self.frames = [Frame(**f) for f in frames]
+        self.frames_omitted = kwargs.get('frames_omitted')
 
     def __iter__(self):
         return iter(self.frames)
@@ -493,6 +499,7 @@ class Stacktrace(Interface):
         for frame in self.frames:
             # ensure we've got the correct required values
             assert frame.is_valid()
+        assert self.frames_omitted is None or len(self.frames_omitted) == 2
 
     def serialize(self):
         frames = []
@@ -505,6 +512,7 @@ class Stacktrace(Interface):
 
         return {
             'frames': frames,
+            'frames_omitted': self.frames_omitted,
         }
 
     def has_app_frames(self):
@@ -553,6 +561,11 @@ class Stacktrace(Interface):
         if newest_first:
             frames = frames[::-1]
 
+        if self.frames_omitted:
+            first_frame_omitted, last_frame_omitted = self.frames_omitted[0]
+        else:
+            first_frame_omitted, last_frame_omitted = None, None
+
         context = {
             'is_public': is_public,
             'newest_first': newest_first,
@@ -560,6 +573,8 @@ class Stacktrace(Interface):
             'event': event,
             'frames': frames,
             'stack_id': 'stacktrace_1',
+            'first_frame_omitted': first_frame_omitted,
+            'last_frame_omitted': last_frame_omitted,
         }
         if with_stacktrace:
             context['stacktrace'] = self.get_traceback(event, newest_first=newest_first)
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 0f577ac252..f0b4239749 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -37,7 +37,7 @@ from sentry.tasks.index import index_event
 from sentry.utils.cache import cache, memoize
 from sentry.utils.dates import get_sql_date_trunc, normalize_datetime
 from sentry.utils.db import get_db_engine, has_charts, attach_foreignkey
-from sentry.utils.safe import safe_execute, trim, trim_dict
+from sentry.utils.safe import safe_execute, trim, trim_dict, trim_frames
 from sentry.utils.strings import strip
 
 logger = logging.getLogger('sentry.errors')
@@ -279,11 +279,13 @@ class GroupManager(BaseManager, ChartMixin):
                     if value:
                         exc_data[key] = trim(value)
                 if exc_data.get('stacktrace'):
+                    trim_frames(exc_data['stacktrace'])
                     for frame in exc_data['stacktrace']['frames']:
                         stack_vars = frame.get('vars', {})
                         trim_dict(stack_vars)
 
         if 'sentry.interfaces.Stacktrace' in data:
+            trim_frames(data['sentry.interfaces.Stacktrace'])
             for frame in data['sentry.interfaces.Stacktrace']['frames']:
                 stack_vars = frame.get('vars', {})
                 trim_dict(stack_vars)
diff --git a/src/sentry/templates/sentry/partial/interfaces/stacktrace_inner.html b/src/sentry/templates/sentry/partial/interfaces/stacktrace_inner.html
index 119bef251c..52524fae85 100644
--- a/src/sentry/templates/sentry/partial/interfaces/stacktrace_inner.html
+++ b/src/sentry/templates/sentry/partial/interfaces/stacktrace_inner.html
@@ -97,5 +97,10 @@
                 </div>
             {% endif %}
         </li>
+        {% if forloop.counter == first_frame_omitted %}
+        <li class="frames-omitted">
+            <p><em>(Frames {{ first_frame_omitted }} to {{ last_frame_omitted }} were not stored)</em></p>
+        </li>
+        {% endif %}
     {% endfor %}
 </ul>
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index 2affc4a60c..f1c36643d8 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -10,7 +10,9 @@ import logging
 
 from django.db import transaction
 
-from sentry.constants import MAX_VARIABLE_SIZE, MAX_DICTIONARY_ITEMS
+from sentry.constants import (
+    MAX_VARIABLE_SIZE, MAX_DICTIONARY_ITEMS, MAX_STACKTRACE_FRAMES
+)
 from sentry.utils.strings import truncatechars
 
 
@@ -83,3 +85,20 @@ def trim_dict(value, max_items=MAX_DICTIONARY_ITEMS, **kwargs):
         value[key] = trim(value[key], **kwargs)
         if idx > max_items:
             del value[key]
+
+
+def trim_frames(stacktrace, max_frames=MAX_STACKTRACE_FRAMES):
+    # TODO: this doesnt account for cases where the client has already omitted
+    # frames
+    frames = stacktrace['frames']
+    frames_len = len(frames)
+
+    if frames_len <= max_frames:
+        return
+
+    half_max = max_frames / 2
+
+    stacktrace['frames_omitted'] = (half_max, frames_len - half_max)
+
+    for n in xrange(half_max, frames_len - half_max):
+        del frames[n]
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index 131d0897c8..9c73f4e728 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -208,6 +208,8 @@ class StacktraceTest(TestCase):
             'system_frames': 0,
             'newest_first': False,
             'is_public': False,
+            'first_frame_omitted': None,
+            'last_frame_omitted': None,
         })
         self.assertEquals(result, render_to_string.return_value)
 
diff --git a/tests/sentry/utils/safe/tests.py b/tests/sentry/utils/safe/tests.py
index 367c424d17..8e99eb49c3 100644
--- a/tests/sentry/utils/safe/tests.py
+++ b/tests/sentry/utils/safe/tests.py
@@ -1,7 +1,9 @@
 from __future__ import absolute_import
 
+import itertools
+
 from sentry.testutils import TestCase
-from sentry.utils.safe import trim, trim_dict
+from sentry.utils.safe import trim, trim_dict, trim_frames
 
 a_very_long_string = 'a' * 1024
 
@@ -21,3 +23,26 @@ class TrimDictTest(TestCase):
         value = dict((k, k) for k in xrange(500))
         trim_dict(value)
         assert len(value) == 50
+
+
+class TrimStacktraceTest(TestCase):
+    def test_under_max(self):
+        value = {'frames': [{'filename': 'foo'}]}
+        trim_frames(value)
+        assert len(value['frames']) == 1
+        assert value.get('frames_omitted') is None
+
+    def test_over_max(self):
+        values = []
+        for n in xrange(5):
+            values.append({'filename': 'frame %d' % n})
+        value = {'frames': values}
+        trim_frames(value, max_frames=4)
+
+        assert len(value['frames']) == 4
+
+        for value, num in itertools.izip(values[:2], xrange(2)):
+            assert value['filename'] == 'frame %d' % num
+
+        for value, num in itertools.izip(values[2:], xrange(3, 5)):
+            assert value['filename'] == 'frame %d' % num
