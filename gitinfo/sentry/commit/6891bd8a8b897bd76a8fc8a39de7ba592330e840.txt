commit 6891bd8a8b897bd76a8fc8a39de7ba592330e840
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 16 13:03:58 2017 -0700

    ui: first pass at AsyncView

diff --git a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
index 878de0f34e..aee1d326eb 100644
--- a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
+++ b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
@@ -1,10 +1,8 @@
 import React from 'react';
-import DocumentTitle from 'react-document-title';
 
+import AsyncView from './asyncView';
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
 import {t} from '../locale';
 
 const AuthorizationRow = React.createClass({
@@ -81,58 +79,24 @@ const AuthorizationRow = React.createClass({
   }
 });
 
-const AccountAuthorizations = React.createClass({
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      authorizationList: []
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true
-    });
+class AccountAuthorizations extends AsyncView {
+  getEndpoint() {
+    return '/api-authorizations/';
+  }
 
-    this.api.request('/api-authorizations/', {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          loading: false,
-          error: false,
-          authorizationList: data
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true
-        });
-      }
-    });
-  },
+  getTitle() {
+    return 'Approved Applications - Sentry';
+  }
 
   onRevoke(authorization) {
     this.setState({
-      authorizationList: this.state.authorizationList.filter(
-        a => a.id !== authorization.id
-      )
+      data: this.state.data.filter(a => a.id !== authorization.id)
     });
-  },
+  }
 
   renderResults() {
-    let {authorizationList} = this.state;
-    if (authorizationList.length === 0) {
+    let {data} = this.state;
+    if (data.length === 0) {
       return (
         <table className="table">
           <tbody>
@@ -151,7 +115,7 @@ const AccountAuthorizations = React.createClass({
         <h4>Approved Applications</h4>
         <table className="table">
           <tbody>
-            {authorizationList.map(authorization => {
+            {data.map(authorization => {
               return (
                 <AuthorizationRow
                   key={authorization.id}
@@ -164,33 +128,23 @@ const AccountAuthorizations = React.createClass({
         </table>
       </div>
     );
-  },
-
-  getTitle() {
-    return 'Approved Applications - Sentry';
-  },
+  }
 
-  render() {
+  renderBody() {
     return (
-      <DocumentTitle title={this.getTitle()}>
-        <div>
-          {this.state.loading
-            ? <LoadingIndicator />
-            : this.state.error
-                ? <LoadingError onRetry={this.fetchData} />
-                : this.renderResults()}
-          <p>
-            <small>
-              You can manage your own applications via the
-              {' '}
-              <a href="/api/">API dashboard</a>
-              .
-            </small>
-          </p>
-        </div>
-      </DocumentTitle>
+      <div>
+        {this.renderResults()}
+        <p>
+          <small>
+            You can manage your own applications via the
+            {' '}
+            <a href="/api/">API dashboard</a>
+            .
+          </small>
+        </p>
+      </div>
     );
   }
-});
+}
 
 export default AccountAuthorizations;
diff --git a/src/sentry/static/sentry/app/views/asyncView.jsx b/src/sentry/static/sentry/app/views/asyncView.jsx
new file mode 100644
index 0000000000..510eebf033
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/asyncView.jsx
@@ -0,0 +1,128 @@
+import DocumentTitle from 'react-document-title';
+import React from 'react';
+import underscore from 'underscore';
+
+import LoadingIndicator from '../components/loadingIndicator';
+import RouteError from './routeError';
+import {Client} from '../api';
+
+class AsyncView extends React.Component {
+  constructor(props) {
+    super(props);
+
+    this.fetchData = AsyncView.errorHandler(this, this.fetchData.bind(this));
+    this.render = AsyncView.errorHandler(this, this.render.bind(this));
+
+    this.state = this.getDefaultState();
+  }
+
+  componentWillMount() {
+    this.api = new Client();
+    this.fetchData();
+  }
+
+  componentWillReceiveProps(nextProps) {
+    if (!underscore.isEqual(this.props.params, nextProps.params)) {
+      this.remountComponent();
+    }
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+  }
+
+  // XXX: cant call this getInitialState as React whines
+  getDefaultState() {
+    return {
+      data: null,
+      loading: true,
+      error: false
+    };
+  }
+
+  remountComponent() {
+    this.setState(this.getDefaultState(), this.fetchData);
+  }
+
+  // TODO(dcramer): we'd like to support multiple initial api requests
+  fetchData() {
+    let endpoint = this.getEndpoint();
+    if (!endpoint) {
+      this.setState({
+        loading: false,
+        error: false
+      });
+    } else {
+      this.api.request(endpoint, {
+        method: 'GET',
+        params: this.getEndpointParams(),
+        success: (data, _, jqXHR) => {
+          this.setState({
+            loading: false,
+            error: false,
+            data: data
+          });
+        },
+        error: () => {
+          this.setState({
+            loading: false,
+            error: true
+          });
+        }
+      });
+    }
+  }
+
+  getEndpointParams() {
+    return {};
+  }
+
+  getEndpoint() {
+    return null;
+  }
+
+  getTitle() {
+    return 'Sentry';
+  }
+
+  renderLoading() {
+    return <LoadingIndicator />;
+  }
+
+  renderError(err) {
+    return <RouteError error={err} component={this} onRetry={this.remountComponent} />;
+  }
+
+  render() {
+    return (
+      <DocumentTitle title={this.getTitle()}>
+        {this.state.loading
+          ? this.renderLoading()
+          : this.state.error ? this.renderError() : this.renderBody()}
+      </DocumentTitle>
+    );
+  }
+}
+
+AsyncView.errorHandler = (component, fn) => {
+  return function(...args) {
+    try {
+      return fn(...args);
+    } catch (err) {
+      /*eslint no-console:0*/
+      setTimeout(() => {
+        throw err;
+      });
+      component.setState({
+        error: err
+      });
+      return null;
+    }
+  };
+};
+
+AsyncView.contextTypes = {
+  router: React.PropTypes.object.isRequired
+};
+
+export default AsyncView;
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index a382d574e2..30f0dc6da4 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -4,7 +4,9 @@ import React from 'react';
 
 const RouteError = React.createClass({
   propTypes: {
-    error: React.PropTypes.object.isRequired
+    error: React.PropTypes.object.isRequired,
+    // not used yet, but future proofing
+    onRetry: React.PropTypes.func
   },
 
   componentWillMount() {
