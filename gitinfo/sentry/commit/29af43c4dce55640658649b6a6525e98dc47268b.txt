commit 29af43c4dce55640658649b6a6525e98dc47268b
Author: David Cramer <dcramer@gmail.com>
Date:   Sun May 10 18:14:40 2015 -0700

    Generalize how teams are included in API responses
    
    Conflicts:
            src/sentry/api/endpoints/organization_details.py

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index afee99b6fb..6eee43a6d2 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import itertools
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
@@ -9,9 +8,11 @@ from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.team import TeamWithProjectsSerializer
 from sentry.auth import access
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Team, Organization, OrganizationStatus
+    AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationStatus, Team,
+    TeamStatus
 )
 from sentry.tasks.deletion import delete_organization
 
@@ -35,38 +36,16 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         """
         Retrieve an organization
 
-        Return details on an individual organization.
+        Return details on an individual organization including various details
+        such as membership access, features, and teams.
 
             {method} {path}
 
         """
-        team_list = Team.objects.get_for_user(
+        team_list = list(Team.objects.filter(
             organization=organization,
-            user=request.user,
-            with_projects=True,
-        )
-        team_map = {
-            t[0].id: s
-            for t, s in zip(
-                team_list,
-                serialize([t for t, _ in team_list], request.user)
-            )
-        }
-
-        project_list = list(itertools.chain(*[p for _, p in team_list]))
-        project_map = {
-            p.id: s
-            for p, s in zip(
-                project_list,
-                serialize(project_list, request.user)
-            )
-        }
-
-        teams_context = []
-        for team, project_list in team_list:
-            team_data = team_map[team.id]
-            team_data['projects'] = [project_map[p.id] for p in project_list]
-            teams_context.append(team_data)
+            status=TeamStatus.VISIBLE,
+        ))
 
         feature_list = []
         if features.has('organizations:sso', organization, actor=request.user):
@@ -78,10 +57,10 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
             feature_list.append('open-membership')
 
         context = serialize(organization, request.user)
-        context['teams'] = teams_context
         context['access'] = access.from_user(request.user, organization).scopes
         context['features'] = feature_list
-
+        context['teams'] = serialize(
+            team_list, request.user, TeamWithProjectsSerializer)
         return Response(context)
 
     @sudo_required
diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index ae4975a3bf..a5f08b15a7 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -6,7 +6,8 @@ from rest_framework.response import Response
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team
+from sentry.api.serializers.models.team import TeamWithProjectsSerializer
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team, TeamStatus
 from sentry.permissions import can_create_teams
 
 
@@ -27,16 +28,18 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
             {method} {path}
 
         """
+        # TODO(dcramer): this should be system-wide default for organization
+        # based endpoints
         if request.auth and hasattr(request.auth, 'project'):
-            teams = [request.auth.project.team]
-            if teams[0].organization != organization:
-                return Response(status=403)
-        else:
-            teams = list(Team.objects.filter(
-                organization=organization,
-            ).order_by('name'))
+            return Response(status=403)
+
+        team_list = list(Team.objects.filter(
+            organization=organization,
+            status=TeamStatus.VISIBLE,
+        ).order_by('name', 'slug'))
 
-        return Response(serialize(teams, request.user))
+        return Response(serialize(
+            team_list, request.user, TeamWithProjectsSerializer))
 
     def post(self, request, organization):
         """
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 9f8cd2186d..3d156fb882 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -1,13 +1,19 @@
 from __future__ import absolute_import
 
-from sentry.api.serializers import Serializer, register
-from sentry.models import OrganizationMemberType, Team
+import itertools
+
+from collections import defaultdict
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import OrganizationMemberType, Project, ProjectStatus, Team
 
 
 @register(Team)
 class TeamSerializer(Serializer):
     def get_attrs(self, item_list, user):
         organization = item_list[0].organization
+        # TODO(dcramer): in most cases this data should already be in memory
+        # and we're simply duplicating efforts here
         team_map = dict(
             (t.id, t) for t in Team.objects.get_for_user(
                 organization=organization,
@@ -39,3 +45,25 @@ class TeamSerializer(Serializer):
             }
         }
         return d
+
+
+class TeamWithProjectsSerializer(TeamSerializer):
+    def get_attrs(self, item_list, user):
+        project_qs = list(Project.objects.filter(
+            team__in=item_list,
+            status=ProjectStatus.VISIBLE,
+        ).order_by('name', 'slug'))
+
+        project_map = defaultdict(list)
+        for project, data in itertools.izip(project_qs, serialize(project_qs, user)):
+            project_map[project.team_id].append(data)
+
+        result = super(TeamWithProjectsSerializer, self).get_attrs(item_list, user)
+        for team in item_list:
+            result[team]['projects'] = project_map[team.id]
+        return result
+
+    def serialize(self, obj, attrs, user):
+        d = super(TeamWithProjectsSerializer, self).serialize(obj, attrs, user)
+        d['projects'] = attrs['projects']
+        return d
