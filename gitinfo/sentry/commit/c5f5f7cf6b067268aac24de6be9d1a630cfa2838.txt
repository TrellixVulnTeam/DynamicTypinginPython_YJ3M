commit c5f5f7cf6b067268aac24de6be9d1a630cfa2838
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jan 20 09:35:30 2017 -0800

    [security] improve logging/notifications around account security actions (#4771)
    
    - add general logging behind 'sentry.security' logger
    - add mfa-removed event
    - add mfa-added event
    - add password-changed event
    - refactor avatar helpers
    - add WIP tag for changesets (Danger)
    - add system.security-email option
    - add security/support email options to UI

diff --git a/CHANGES b/CHANGES
index 24d64cccca..80d0f637e9 100644
--- a/CHANGES
+++ b/CHANGES
@@ -6,6 +6,7 @@ Version 8.13 (Unreleased)
 - start using ReleaseProject and Release.organization instead of Release.project
 - Project quotas are no longer available, and must now be configured via the organizational rate limits.
 - Quotas implementation now requires a tuple of maximum rate and interval window.
+- Added security emails for adding and removing MFA and password changes.
 - Added the ability to download an apple compatible crash report for cocoa events.
 - Add memory and storage information for apple devices
 - The legacy API keys feature is now disabled by default.
diff --git a/Dangerfile b/Dangerfile
index fdf9e44f0f..3814b8d9ea 100644
--- a/Dangerfile
+++ b/Dangerfile
@@ -91,7 +91,7 @@ if securityMatches.any?
 end
 
 # Make it more obvious that a PR is a work in progress and shouldn"t be merged yet
-warn("PR is classed as Work in Progress") if github.pr_title.include? "[WIP]"
+warn("PR is classed as Work in Progress") if github.pr_title.include? "[WIP]" || github.pr_body.include?("#wip")
 
 # Warn when there is a big PR
 warn("Big PR -- consider splitting it up into multiple changesets") if git.lines_of_code > @S_BIG_PR_LINES
diff --git a/src/sentry/api/endpoints/user_authenticator_details.py b/src/sentry/api/endpoints/user_authenticator_details.py
index 2eec7f823c..51e64a5931 100644
--- a/src/sentry/api/endpoints/user_authenticator_details.py
+++ b/src/sentry/api/endpoints/user_authenticator_details.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import
 
+from django.db import transaction
 from rest_framework.response import Response
 
 from sentry.api.bases.user import UserEndpoint
 from sentry.api.permissions import SuperuserPermission
 from sentry.models import Authenticator
+from sentry.security import capture_security_activity
 
 
 class UserAuthenticatorDetailsEndpoint(UserEndpoint):
@@ -14,8 +16,53 @@ class UserAuthenticatorDetailsEndpoint(UserEndpoint):
     permission_classes = (SuperuserPermission,)
 
     def delete(self, request, user, auth_id):
-        Authenticator.objects.filter(
-            user=user,
-            id=auth_id,
-        ).delete()
+        try:
+            authenticator = Authenticator.objects.get(
+                user=user,
+                id=auth_id,
+            )
+        except Authenticator.DoesNotExist:
+            return Response(status=404)
+
+        with transaction.atomic():
+            authenticator.delete()
+
+            # if we delete an actual authenticator and all that
+            # remainds are backup interfaces, then we kill them in the
+            # process.
+            if not authenticator.interface.is_backup_interface:
+                interfaces = Authenticator.objects.all_interfaces_for_user(user)
+                backup_interfaces = [
+                    x for x in interfaces
+                    if x.is_backup_interface
+                ]
+                if len(backup_interfaces) == len(interfaces):
+                    for iface in backup_interfaces:
+                        iface.authenticator.delete()
+
+                    # wait to generate entries until all pending writes
+                    # have been sent to db
+                    for iface in backup_interfaces:
+                        capture_security_activity(
+                            account=request.user,
+                            type='mfa-removed',
+                            actor=request.user,
+                            ip_address=request.META['REMOTE_ADDR'],
+                            context={
+                                'authenticator': iface.authenticator,
+                            },
+                            send_email=False,
+                        )
+
+            capture_security_activity(
+                account=user,
+                type='mfa-removed',
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                context={
+                    'authenticator': authenticator,
+                },
+                send_email=not authenticator.interface.is_backup_interface,
+            )
+
         return Response(status=204)
diff --git a/src/sentry/models/useravatar.py b/src/sentry/models/useravatar.py
index f0be6fbb19..b68971b409 100644
--- a/src/sentry/models/useravatar.py
+++ b/src/sentry/models/useravatar.py
@@ -6,7 +6,7 @@ from django.db import models
 from PIL import Image
 from six import BytesIO
 
-from sentry.db.models import FlexibleForeignKey, Model
+from sentry.db.models import BaseManager, FlexibleForeignKey, Model
 from sentry.utils.cache import cache
 
 
@@ -30,6 +30,8 @@ class UserAvatar(Model):
     ident = models.CharField(max_length=32, unique=True, db_index=True)
     avatar_type = models.PositiveSmallIntegerField(default=0, choices=AVATAR_TYPES)
 
+    objects = BaseManager(cache_fields=['user'])
+
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_useravatar'
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 233300d514..b9fd9ad743 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -21,6 +21,7 @@ from sentry.utils.types import Dict, String, Sequence
 # System
 register('system.admin-email', flags=FLAG_REQUIRED)
 register('system.support-email', flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
+register('system.security-email', flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 register('system.databases', type=Dict, flags=FLAG_NOSTORE)
 # register('system.debug', default=False, flags=FLAG_NOSTORE)
 register('system.rate-limit', default=0, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
diff --git a/src/sentry/security/__init__.py b/src/sentry/security/__init__.py
new file mode 100644
index 0000000000..88a4d5dfbe
--- /dev/null
+++ b/src/sentry/security/__init__.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import, print_function
+
+import logging
+
+from django.utils import timezone
+
+from .emails import generate_security_email
+
+logger = logging.getLogger('sentry.security')
+
+
+def capture_security_activity(account, type, actor, ip_address, context=None,
+                              send_email=True, current_datetime=None):
+    if current_datetime is None:
+        current_datetime = timezone.now()
+
+    logger_context = {
+        'ip_address': ip_address,
+        'user_id': account.id,
+        'actor_id': actor.id,
+    }
+
+    if type == 'mfa-removed' or type == 'mfa-added':
+        logger_context['authenticator_id'] = context['authenticator'].id
+
+    logger.info('user.{}'.format(type), extra=logger_context)
+
+    if send_email:
+        msg = generate_security_email(
+            account=account,
+            type=type,
+            actor=actor,
+            ip_address=ip_address,
+            context=context,
+            current_datetime=current_datetime,
+        )
+        msg.send_async([account.email])
diff --git a/src/sentry/security/emails.py b/src/sentry/security/emails.py
new file mode 100644
index 0000000000..deef136525
--- /dev/null
+++ b/src/sentry/security/emails.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import, print_function
+
+from django.utils import timezone
+
+from sentry.utils.email import MessageBuilder
+
+
+def generate_security_email(account, type, actor, ip_address, context=None,
+                            current_datetime=None):
+    if current_datetime is None:
+        current_datetime = timezone.now()
+
+    subject = 'Security settings changed'
+    if type == 'mfa-removed':
+        assert 'authenticator' in context
+        template = 'sentry/emails/mfa-removed.txt'
+        html_template = 'sentry/emails/mfa-removed.html'
+    elif type == 'mfa-added':
+        assert 'authenticator' in context
+        template = 'sentry/emails/mfa-added.txt'
+        html_template = 'sentry/emails/mfa-added.html'
+    elif type == 'password-changed':
+        template = 'sentry/emails/password-changed.txt'
+        html_template = 'sentry/emails/password-changed.html'
+    else:
+        raise ValueError('unknown type: {}'.format(type))
+
+    new_context = {
+        'account': account,
+        'actor': actor,
+        'ip_address': ip_address,
+        'datetime': current_datetime,
+    }
+    if context:
+        new_context.update(context)
+
+    return MessageBuilder(
+        subject=subject,
+        context=new_context,
+        template=template,
+        html_template=html_template,
+    )
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index c2acf88e2c..24e41c3366 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -33,6 +33,24 @@ const definitions = [
     component: EmailField,
     defaultValue: () => ConfigStore.get('user').email,
   },
+  {
+    key: 'system.support-email',
+    label: t('Support Email'),
+    placeholder: 'support@example.com',
+    help: t('The support contact for this Sentry installation.'),
+    // TODO(dcramer): this should not be hardcoded to a component
+    component: EmailField,
+    defaultValue: () => ConfigStore.get('user').email,
+  },
+  {
+    key: 'system.security-email',
+    label: t('Security Email'),
+    placeholder: 'security@example.com',
+    help: t('The security contact for this Sentry installation.'),
+    // TODO(dcramer): this should not be hardcoded to a component
+    component: EmailField,
+    defaultValue: () => ConfigStore.get('user').email,
+  },
   {
     key: 'system.rate-limit',
     label: t('Rate Limit'),
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index d4627ec3ce..9a600f95f0 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -12,6 +12,8 @@ import {Form} from '../components/forms';
 const optionsAvailable = [
   'system.url-prefix',
   'system.admin-email',
+  'system.support-email',
+  'system.security-email',
   'system.rate-limit',
   'auth.ip-rate-limit',
   'auth.user-rate-limit',
@@ -74,6 +76,8 @@ const SettingsList = React.createClass({
         <h4>General</h4>
         {fields['system.url-prefix']}
         {fields['system.admin-email']}
+        {fields['system.support-email']}
+        {fields['system.security-email']}
         {fields['system.rate-limit']}
 
         <h4>Security &amp; Abuse</h4>
diff --git a/src/sentry/templates/sentry/account/settings.html b/src/sentry/templates/sentry/account/settings.html
index 5a344ac2c4..40226dc804 100644
--- a/src/sentry/templates/sentry/account/settings.html
+++ b/src/sentry/templates/sentry/account/settings.html
@@ -2,8 +2,10 @@
 
 {% load crispy_forms_tags %}
 {% load i18n %}
+{% load sentry_avatars %}
 {% load sentry_helpers %}
 {% load sentry_features %}
+
 {% block wrapperclass %}narrow account-settings{% endblock %}
 
 {% block title %}{% trans "Account Settings" %} | {{ block.super }}{% endblock %}
@@ -32,12 +34,7 @@
             <div>
               <a class="avatar-edit-link" href="{% url 'sentry-account-settings-avatar' %}">
                 <span class="avatar">
-                {% letter_avatar_svg request.user.get_display_name request.user.get_label size 118 %}
-                {% if request.user.get_avatar_type == 'upload' %}
-                    <img src="{% profile_photo_url request.user.id size 118 %}">
-                {% elif request.user.get_avatar_type == 'gravatar' %}
-                    <img src="{% gravatar_url user.email size 118 default 'blank' %}">
-                {% endif %}
+                {% avatar request.user 118 %}
                 </span>
                 <span class="icon-settings"></span>
               </a>
diff --git a/src/sentry/templates/sentry/auth-confirm-identity.html b/src/sentry/templates/sentry/auth-confirm-identity.html
index f27818c60c..99d8792b61 100644
--- a/src/sentry/templates/sentry/auth-confirm-identity.html
+++ b/src/sentry/templates/sentry/auth-confirm-identity.html
@@ -2,7 +2,7 @@
 
 {% load crispy_forms_tags %}
 {% load i18n %}
-{% load sentry_helpers %}
+{% load sentry_avatars %}
 
 {% block title %}{% trans "Confirm Identity" %} | {{ block.super }}{% endblock %}
 
@@ -10,12 +10,7 @@
   {% if existing_user %}
     <div class="sso-link">
       <span class="avatar">
-        {% letter_avatar_svg existing_user.get_display_name existing_user.get_label %}
-        {% if existing_user.get_avatar_type == 'upload' %}
-          <img src="{% profile_photo_url existing_user.id size 36 %}">
-        {% elif existing_user.get_avatar_type == 'gravatar' %}
-          <img src="{% gravatar_url existing_user.email size 36 default 'blank' %}">
-        {% endif %}
+        {% avatar existing_user %}
       </span>
       <span class="icon-arrow-right"></span>
       <span class="icon-arrow-left"></span>
diff --git a/src/sentry/templates/sentry/auth-confirm-link.html b/src/sentry/templates/sentry/auth-confirm-link.html
index 801185f3d7..d9a9869fdb 100644
--- a/src/sentry/templates/sentry/auth-confirm-link.html
+++ b/src/sentry/templates/sentry/auth-confirm-link.html
@@ -2,7 +2,7 @@
 
 {% load crispy_forms_tags %}
 {% load i18n %}
-{% load sentry_helpers %}
+{% load sentry_avatars %}
 
 {% block title %}{% trans "Confirm Identity" %} | {{ block.super }}{% endblock %}
 
@@ -12,12 +12,7 @@
 
     <div class="sso-link">
       <span class="avatar">
-        {% letter_avatar_svg existing_user.get_display_name existing_user.get_label %}
-        {% if existing_user.get_avatar_type == 'upload' %}
-          <img src="{% profile_photo_url existing_user.id size 36 %}">
-        {% elif existing_user.get_avatar_type == 'gravatar' %}
-          <img src="{% gravatar_url existing_user.email size 36 default 'blank' %}">
-        {% endif %}
+        {% avatar existing_user %}
       </span>
       <span class="icon-arrow-right"></span>
       <span class="icon-arrow-left"></span>
diff --git a/src/sentry/templates/sentry/debug/mail/preview.html b/src/sentry/templates/sentry/debug/mail/preview.html
index f92bc956f5..15ef4778e3 100644
--- a/src/sentry/templates/sentry/debug/mail/preview.html
+++ b/src/sentry/templates/sentry/debug/mail/preview.html
@@ -32,6 +32,11 @@
       <optgroup label="Reports">
         <option value="mail/report/">Weekly Report</option>
       </optgroup>
+      <optgroup label="Security">
+        <option value="mail/mfa-added/">MFA Added</option>
+        <option value="mail/mfa-removed/">MFA Removed</option>
+        <option value="mail/password-changed/">Password Changed</option>
+      </optgroup>
     </select>
 
     <label for="format" style="margin-right: 10px">Format:</label>
diff --git a/src/sentry/templates/sentry/emails/activity/note.html b/src/sentry/templates/sentry/emails/activity/note.html
index 3fb850aee8..375c93938c 100644
--- a/src/sentry/templates/sentry/emails/activity/note.html
+++ b/src/sentry/templates/sentry/emails/activity/note.html
@@ -1,5 +1,6 @@
 {% extends "sentry/emails/activity/generic.html" %}
 
+{% load sentry_avatars %}
 {% load sentry_helpers %}
 {% load sentry_assets %}
 
diff --git a/src/sentry/templates/sentry/emails/mfa-added.html b/src/sentry/templates/sentry/emails/mfa-added.html
new file mode 100644
index 0000000000..9ae2472f62
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/mfa-added.html
@@ -0,0 +1,12 @@
+{% extends "sentry/emails/security_base.html" %}
+
+{% block security_body %}
+  <p>An authenticator has been added to your Sentry account.</p>
+{% endblock %}
+
+{% block security_metadata %}
+    <tr>
+      <td></td>
+      <td><strong>{{ authenticator.interface.name }}</strong></td>
+    </tr>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/mfa-added.txt b/src/sentry/templates/sentry/emails/mfa-added.txt
new file mode 100644
index 0000000000..725bff5b51
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/mfa-added.txt
@@ -0,0 +1,9 @@
+{% extends "sentry/emails/security_base.txt" %}
+
+{% block security_body %}
+An authenticator has been added to your Sentry account.
+{% endblock %}
+
+{% block security_metadata %}
+Authenticator: {{ authenticator.interface.name }}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/mfa-removed.html b/src/sentry/templates/sentry/emails/mfa-removed.html
new file mode 100644
index 0000000000..5ecbc38581
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/mfa-removed.html
@@ -0,0 +1,12 @@
+{% extends "sentry/emails/security_base.html" %}
+
+{% block security_body %}
+  <p>An authenticator has been removed from your Sentry account.</p>
+{% endblock %}
+
+{% block security_metadata %}
+    <tr>
+      <td></td>
+      <td><strong>{{ authenticator.interface.name }}</strong></td>
+    </tr>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/mfa-removed.txt b/src/sentry/templates/sentry/emails/mfa-removed.txt
new file mode 100644
index 0000000000..1ed15da53e
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/mfa-removed.txt
@@ -0,0 +1,9 @@
+{% extends "sentry/emails/security_base.txt" %}
+
+{% block security_body %}
+An authenticator has been removed from your Sentry account.
+{% endblock %}
+
+{% block security_metadata %}
+Authenticator: {{ authenticator.interface.name }}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/password-changed.html b/src/sentry/templates/sentry/emails/password-changed.html
new file mode 100644
index 0000000000..6d94dc9217
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/password-changed.html
@@ -0,0 +1,5 @@
+{% extends "sentry/emails/security_base.html" %}
+
+{% block security_body %}
+  <p>The password to your Sentry account was changed.</p>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/password-changed.txt b/src/sentry/templates/sentry/emails/password-changed.txt
new file mode 100644
index 0000000000..618e76c58d
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/password-changed.txt
@@ -0,0 +1,5 @@
+{% extends "sentry/emails/security_base.txt" %}
+
+{% block security_body %}
+The password to your Sentry account was changed.
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/security_base.html b/src/sentry/templates/sentry/emails/security_base.html
new file mode 100644
index 0000000000..fdaca8d7b2
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/security_base.html
@@ -0,0 +1,27 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+{% load sentry_avatars %}
+{% load sentry_helpers %}
+
+{% block main %}
+  <h3>Security Notice</h3>
+  {% block security_body %}{% endblock %}
+  <table>
+    <tr>
+      <td style="width:36px;vertical-align:top;padding-right:15px;">
+        {% avatar account 36 %}
+      </td>
+      <td>
+        <strong>{{ account.email }}</strong><br />
+        {{ ip_address }}<br />
+        {{ datetime }} UTC
+      </td>
+    </tr>
+    {% block security_metadata %}{% endblock %}
+  </table>
+  <h4>Don't recognize this activity?</h4>
+  <p>If you didn't trigger this action, we recommend you immediately review your account security, including changing your password. If you determine that this activity is malicious please contact <a href="mailto:{% security_contact %}">{% security_contact %}</a>.</p>
+{% endblock %}
+
+{% block footer %}{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/security_base.txt b/src/sentry/templates/sentry/emails/security_base.txt
new file mode 100644
index 0000000000..e300d974a6
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/security_base.txt
@@ -0,0 +1,21 @@
+{% spaceless %}
+{% load sentry_helpers %}
+{% autoescape off %}
+Security Notice
+---------------
+{% block security_body %}{% endblock %}
+
+Details
+-------
+
+Account: {{ account.email }}
+IP: {{ ip_address }}
+When: {{ datetime }} UTC
+{% block security_metadata %}{% endblock %}
+
+Don't recognize this activity?
+------------------------------
+
+If you didn't trigger this action, we recommend you immediately review your account security, including changing your password. If you determine that this activity is malicious please contact {% security_contact %}.
+{% endautoescape %}
+{% endspaceless %}
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 81c0ccf8f0..4a1859bfb9 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -1,5 +1,6 @@
 {% load i18n %}
 {% load sentry_api %}
+{% load sentry_avatars %}
 {% load sentry_dsn %}
 {% load sentry_assets %}
 {% load sentry_features %}
@@ -115,12 +116,7 @@
           <div class="dropdown">
             <a class="dropdown-toggle" data-toggle="dropdown">
               <span class="avatar">
-                {% letter_avatar_svg request.user.get_display_name request.user.get_label %}
-                {% if request.user.get_avatar_type == 'upload' %}
-                  <img src="{% profile_photo_url request.user.id size 72 %}">
-                {% elif request.user.get_avatar_type == 'gravatar' %}
-                  <img src="{% gravatar_url user.email size 72 default 'blank' %}">
-                {% endif %}
+                {% avatar request.user %}
               </span>
               <i class="icon-arrow-down"></i>
             </a>
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
index b7872cc5bd..83657ccd14 100644
--- a/src/sentry/templates/sentry/organization-members.html
+++ b/src/sentry/templates/sentry/organization-members.html
@@ -2,6 +2,7 @@
 
 {% load crispy_forms_tags %}
 {% load i18n %}
+{% load sentry_avatars %}
 {% load sentry_helpers %}
 {% load sentry_features %}
 
@@ -85,12 +86,7 @@
           <tr>
             <td class="table-user-info">
               <span class="avatar">
-                {% letter_avatar_svg member.get_display_name member.get_label %}
-                {% if member.get_avatar_type == 'upload' %}
-                  <img src="{% profile_photo_url member.user_id size 80 %}">
-                {% elif member.get_avatar_type == 'gravatar' %}
-                  <img src="{% gravatar_url member.get_email size 80 default 'blank' %}">
-                {% endif %}
+                {% avatar member %}
               </span>
               <h5><a href="{% url 'sentry-organization-member-settings' organization.slug member.id %}">
                 {{ member.get_display_name }}
diff --git a/src/sentry/templates/sentry/partial/avatar.html b/src/sentry/templates/sentry/partial/avatar.html
new file mode 100644
index 0000000000..9bd36c7a8b
--- /dev/null
+++ b/src/sentry/templates/sentry/partial/avatar.html
@@ -0,0 +1,9 @@
+{% load sentry_avatars %}
+<span class="avatar">
+  {% letter_avatar_svg display_name label %}
+  {% if avatar_type == 'upload' %}
+    <img src="{% profile_photo_url user_id size size %}">
+  {% elif avatar_type == 'gravatar' %}
+    <img src="{% gravatar_url email size size default 'blank' %}">
+  {% endif %}
+</span>
diff --git a/src/sentry/templates/sentry/partial/interfaces/user_email.html b/src/sentry/templates/sentry/partial/interfaces/user_email.html
index 01403c1fd2..ad79c75cec 100644
--- a/src/sentry/templates/sentry/partial/interfaces/user_email.html
+++ b/src/sentry/templates/sentry/partial/interfaces/user_email.html
@@ -1,4 +1,5 @@
 {% load i18n %}
+{% load sentry_avatars %}
 {% load sentry_helpers %}
 <table class="reset">
   <tr>
diff --git a/src/sentry/templatetags/sentry_avatars.py b/src/sentry/templatetags/sentry_avatars.py
new file mode 100644
index 0000000000..6b4d79fb4d
--- /dev/null
+++ b/src/sentry/templatetags/sentry_avatars.py
@@ -0,0 +1,68 @@
+from __future__ import absolute_import
+
+from django import template
+from django.conf import settings
+from django.core.urlresolvers import reverse
+from six.moves.urllib.parse import urlencode
+from templatetag_sugar.parser import Constant, Optional, Variable
+from templatetag_sugar.register import tag
+
+from sentry.models import UserAvatar
+from sentry.utils.avatar import (
+    get_email_avatar, get_gravatar_url, get_letter_avatar
+)
+
+
+register = template.Library()
+
+
+# Adapted from http://en.gravatar.com/site/implement/images/django/
+# The "mm" default is for the grey, "mystery man" icon. See:
+#   http://en.gravatar.com/site/implement/images/
+@tag(register, [Variable('email'),
+                Optional([Constant('size'), Variable('size')]),
+                Optional([Constant('default'), Variable('default')])])
+def gravatar_url(context, email, size=None, default='mm'):
+    return get_gravatar_url(email, size, default)
+
+
+@tag(register, [Variable('display_name'),
+                Variable('identifier'),
+                Optional([Constant('size'), Variable('size')])])
+def letter_avatar_svg(context, display_name, identifier, size=None):
+    return get_letter_avatar(display_name, identifier, size=size)
+
+
+@tag(register, [Variable('user_id'),
+                Optional([Constant('size'), Variable('size')])])
+def profile_photo_url(context, user_id, size=None):
+    try:
+        avatar = UserAvatar.objects.get_from_cache(user=user_id)
+    except UserAvatar.DoesNotExist:
+        return
+    url = reverse('sentry-user-avatar-url', args=[avatar.ident])
+    if size:
+        url += '?' + urlencode({'s': size})
+    return settings.SENTRY_URL_PREFIX + url
+
+
+# Don't use this in any situations where you're rendering more
+# than 1-2 avatars. It will make a request for every user!
+@tag(register, [Variable('display_name'),
+                Variable('identifier'),
+                Optional([Constant('size'), Variable('size')]),
+                Optional([Constant('try_gravatar'), Variable('try_gravatar')])])
+def email_avatar(context, display_name, identifier, size=None, try_gravatar=True):
+    return get_email_avatar(display_name, identifier, size, try_gravatar)
+
+
+@register.inclusion_tag('sentry/partial/avatar.html')
+def avatar(user, size=36):
+    return {
+        'email': user.email,
+        'user_id': user.id,
+        'size': size,
+        'avatar_type': user.get_avatar_type(),
+        'display_name': user.get_display_name(),
+        'label': user.get_label(),
+    }
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 4fe2098feb..a4aa0de80d 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -16,28 +16,24 @@ import pytz
 import six
 from django import template
 from django.conf import settings
-from django.core.urlresolvers import reverse
 from django.template.defaultfilters import stringfilter
 from django.utils import timezone
 from django.utils.html import escape
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
 from pkg_resources import parse_version as Version
-from templatetag_sugar.parser import Constant, Name, Optional, Variable
+from templatetag_sugar.parser import Constant, Name, Variable
 from templatetag_sugar.register import tag
 
 from sentry import options
 from sentry.api.serializers import serialize as serialize_func
-from sentry.models import Organization, UserAvatar
+from sentry.models import Organization
 from sentry.utils import json
-from sentry.utils.avatar import (
-    get_email_avatar, get_gravatar_url, get_letter_avatar
-)
 from sentry.utils.javascript import to_json
 from sentry.utils.strings import soft_break as _soft_break
 from sentry.utils.strings import soft_hyphenate, to_unicode, truncatechars
 from six.moves import range
-from six.moves.urllib.parse import quote, urlencode
+from six.moves.urllib.parse import quote
 
 SentryVersion = namedtuple('SentryVersion', [
     'current', 'latest', 'update_available', 'build',
@@ -76,6 +72,11 @@ def system_origin():
     return origin_from_url(absolute_uri())
 
 
+@register.simple_tag
+def security_contact():
+    return options.get('system.security-email') or options.get('system.admin-email')
+
+
 @register.filter
 def pprint(value, break_after=10):
     """
@@ -252,46 +253,6 @@ def get_project_dsn(context, user, project, asvar):
     return ''
 
 
-# Adapted from http://en.gravatar.com/site/implement/images/django/
-# The "mm" default is for the grey, "mystery man" icon. See:
-#   http://en.gravatar.com/site/implement/images/
-@tag(register, [Variable('email'),
-                Optional([Constant('size'), Variable('size')]),
-                Optional([Constant('default'), Variable('default')])])
-def gravatar_url(context, email, size=None, default='mm'):
-    return get_gravatar_url(email, size, default)
-
-
-@tag(register, [Variable('display_name'),
-                Variable('identifier'),
-                Optional([Constant('size'), Variable('size')])])
-def letter_avatar_svg(context, display_name, identifier, size=None):
-    return get_letter_avatar(display_name, identifier, size=size)
-
-
-@tag(register, [Variable('user_id'),
-                Optional([Constant('size'), Variable('size')])])
-def profile_photo_url(context, user_id, size=None):
-    try:
-        avatar = UserAvatar.objects.get(user__id=user_id)
-    except UserAvatar.DoesNotExist:
-        return
-    url = reverse('sentry-user-avatar-url', args=[avatar.ident])
-    if size:
-        url += '?' + urlencode({'s': size})
-    return settings.SENTRY_URL_PREFIX + url
-
-
-# Don't use this in any situations where you're rendering more
-# than 1-2 avatars. It will make a request for every user!
-@tag(register, [Variable('display_name'),
-                Variable('identifier'),
-                Optional([Constant('size'), Variable('size')]),
-                Optional([Constant('try_gravatar'), Variable('try_gravatar')])])
-def email_avatar(context, display_name, identifier, size=None, try_gravatar=True):
-    return get_email_avatar(display_name, identifier, size, try_gravatar)
-
-
 @register.filter
 def trim_schema(value):
     return value.split('//', 1)[-1]
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index caefd3e837..2e2cc2413f 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -23,6 +23,7 @@ from sentry.constants import LANGUAGES
 from sentry.models import (
     Organization, OrganizationStatus, User, UserOption, UserOptionValue
 )
+from sentry.security import capture_security_activity
 from sentry.utils.auth import find_users, logger
 from sentry.web.forms.fields import ReadOnlyTextField
 from six.moves import range
@@ -356,6 +357,14 @@ class AccountSettingsForm(forms.Form):
             self.user.set_password(self.cleaned_data['new_password'])
             self.user.refresh_session_nonce(self.request)
 
+            capture_security_activity(
+                account=self.user,
+                type='password-changed',
+                actor=self.request.user,
+                ip_address=self.request.META['REMOTE_ADDR'],
+                send_email=True,
+            )
+
         self.user.name = self.cleaned_data['name']
 
         if self.cleaned_data['email'] != self.user.email:
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 308e4df7fb..8407fa27be 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -30,6 +30,7 @@ from sudo.decorators import sudo_required
 from sentry.models import (
     UserEmail, LostPasswordHash, Project, UserOption, Authenticator
 )
+from sentry.security import capture_security_activity
 from sentry.signals import email_verified
 from sentry.web.decorators import login_required, signed_auth_required
 from sentry.web.forms.accounts import (
@@ -113,19 +114,28 @@ def recover_confirm(request, user_id, hash):
         if request.method == 'POST':
             form = ChangePasswordRecoverForm(request.POST)
             if form.is_valid():
-                user.set_password(form.cleaned_data['password'])
-                user.refresh_session_nonce(request)
-                user.save()
+                with transaction.atomic():
+                    user.set_password(form.cleaned_data['password'])
+                    user.refresh_session_nonce(request)
+                    user.save()
+
+                    # Ugly way of doing this, but Django requires the backend be set
+                    user = authenticate(
+                        username=user.username,
+                        password=form.cleaned_data['password'],
+                    )
 
-                # Ugly way of doing this, but Django requires the backend be set
-                user = authenticate(
-                    username=user.username,
-                    password=form.cleaned_data['password'],
-                )
+                    login_user(request, user)
 
-                login_user(request, user)
+                    password_hash.delete()
 
-                password_hash.delete()
+                    capture_security_activity(
+                        account=user,
+                        type='password-changed',
+                        actor=request.user,
+                        ip_address=request.META['REMOTE_ADDR'],
+                        send_email=True,
+                    )
 
                 return login_redirect(request)
         else:
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index a339af1d0b..d42ec67fc8 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -14,6 +14,7 @@ import petname
 from sudo.decorators import sudo_required
 
 from sentry.models import Authenticator
+from sentry.security import capture_security_activity
 from sentry.web.frontend.base import BaseView
 from sentry.web.decorators import login_required
 from sentry.web.helpers import render_to_response
@@ -56,26 +57,50 @@ class TwoFactorSettingsView(BaseView):
         context['page'] = 'security'
         return context
 
-    def delete_authenticator(self, interface):
+    def delete_authenticator(self, request, interface):
         if interface.authenticator is None:
             return
 
-        user = interface.authenticator.user
-        interface.authenticator.delete()
-
-        # If this was an authenticator that was a backup interface we just
-        # deleted, then nothing happens.
-        if interface.is_backup_interface:
-            return
-
-        # If however if we delete an actual authenticator and all that
-        # remainds are backup interfaces, then we kill them in the
-        # process.
-        interfaces = Authenticator.objects.all_interfaces_for_user(user)
-        backup_interfaces = [x for x in interfaces if x.is_backup_interface]
-        if len(backup_interfaces) == len(interfaces):
-            for iface in backup_interfaces:
-                iface.authenticator.delete()
+        with transaction.atomic():
+            user = interface.authenticator.user
+
+            capture_security_activity(
+                account=request.user,
+                type='mfa-removed',
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                context={
+                    'authenticator': interface.authenticator,
+                },
+                send_email=True,
+            )
+
+            interface.authenticator.delete()
+
+            # If this was an authenticator that was a backup interface we just
+            # deleted, then nothing happens.
+            if interface.is_backup_interface:
+                return
+
+            # If however if we delete an actual authenticator and all that
+            # remainds are backup interfaces, then we kill them in the
+            # process.
+            interfaces = Authenticator.objects.all_interfaces_for_user(user)
+            backup_interfaces = [x for x in interfaces if x.is_backup_interface]
+            if len(backup_interfaces) == len(interfaces):
+                for iface in backup_interfaces:
+                    iface.authenticator.delete()
+
+                    capture_security_activity(
+                        account=request.user,
+                        type='mfa-removed',
+                        actor=request.user,
+                        ip_address=request.META['REMOTE_ADDR'],
+                        context={
+                            'authenticator': iface.authenticator,
+                        },
+                        send_email=False,
+                    )
 
     def remove(self, request, interface):
         form = ConfirmPasswordForm(request.user)
@@ -87,12 +112,12 @@ class TwoFactorSettingsView(BaseView):
             form = ConfirmPasswordForm(request.user, request.POST)
             if 'password' in form.fields:
                 if form.is_valid():
-                    self.delete_authenticator(interface)
+                    self.delete_authenticator(request, interface)
                     return HttpResponseRedirect(reverse('sentry-account-settings-2fa'))
                 else:
                     form.errors['__all__'] = ['Invalid password.']
             else:
-                self.delete_authenticator(interface)
+                self.delete_authenticator(request, interface)
                 return HttpResponseRedirect(reverse('sentry-account-settings-2fa'))
 
         all_interfaces = Authenticator.objects.all_interfaces_for_user(
@@ -124,6 +149,17 @@ class TwoFactorSettingsView(BaseView):
                 # that case just go to the overview page of 2fa
                 next = reverse('sentry-account-settings-2fa')
             else:
+                capture_security_activity(
+                    account=request.user,
+                    type='mfa-added',
+                    actor=request.user,
+                    ip_address=request.META['REMOTE_ADDR'],
+                    context={
+                        'authenticator': interface.authenticator,
+                    },
+                    send_email=False,
+                )
+
                 request.user.refresh_session_nonce(self.request)
                 request.user.save()
                 if Authenticator.objects.auto_add_recovery_codes(request.user):
diff --git a/src/sentry/web/frontend/debug/debug_mfa_added_email.py b/src/sentry/web/frontend/debug/debug_mfa_added_email.py
new file mode 100644
index 0000000000..5ac0a38e87
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_mfa_added_email.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import, print_function
+
+from django.views.generic import View
+
+from sentry.models import Authenticator
+from sentry.security.emails import generate_security_email
+
+from .mail import MailPreview
+
+
+class DebugMfaAddedEmailView(View):
+    def get(self, request):
+        authenticator = Authenticator(
+            id=0,
+            type=3,  # u2f
+            user=request.user,
+        )
+
+        email = generate_security_email(
+            account=request.user,
+            actor=request.user,
+            type='mfa-added',
+            ip_address=request.META['REMOTE_ADDR'],
+            context={
+                'authenticator': authenticator,
+            },
+        )
+        return MailPreview(
+            html_template=email.html_template,
+            text_template=email.template,
+            context=email.context,
+        ).render(request)
diff --git a/src/sentry/web/frontend/debug/debug_mfa_removed_email.py b/src/sentry/web/frontend/debug/debug_mfa_removed_email.py
new file mode 100644
index 0000000000..311b6c4a71
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_mfa_removed_email.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import, print_function
+
+from django.views.generic import View
+
+from sentry.models import Authenticator
+from sentry.security.emails import generate_security_email
+
+from .mail import MailPreview
+
+
+class DebugMfaRemovedEmailView(View):
+    def get(self, request):
+        authenticator = Authenticator(
+            id=0,
+            type=3,  # u2f
+            user=request.user,
+        )
+
+        email = generate_security_email(
+            account=request.user,
+            actor=request.user,
+            type='mfa-removed',
+            ip_address=request.META['REMOTE_ADDR'],
+            context={
+                'authenticator': authenticator,
+            },
+        )
+        return MailPreview(
+            html_template=email.html_template,
+            text_template=email.template,
+            context=email.context,
+        ).render(request)
diff --git a/src/sentry/web/frontend/debug/debug_password_changed_email.py b/src/sentry/web/frontend/debug/debug_password_changed_email.py
new file mode 100644
index 0000000000..34b4e8b60d
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_password_changed_email.py
@@ -0,0 +1,22 @@
+from __future__ import absolute_import, print_function
+
+from django.views.generic import View
+
+from sentry.security.emails import generate_security_email
+
+from .mail import MailPreview
+
+
+class DebugPasswordChangedEmailView(View):
+    def get(self, request):
+        email = generate_security_email(
+            account=request.user,
+            actor=request.user,
+            type='password-changed',
+            ip_address=request.META['REMOTE_ADDR'],
+        )
+        return MailPreview(
+            html_template=email.html_template,
+            text_template=email.template,
+            context=email.context,
+        ).render(request)
diff --git a/src/sentry/web/frontend/debug/debuga_mfa_removed_email.py b/src/sentry/web/frontend/debug/debuga_mfa_removed_email.py
new file mode 100644
index 0000000000..311b6c4a71
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debuga_mfa_removed_email.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import, print_function
+
+from django.views.generic import View
+
+from sentry.models import Authenticator
+from sentry.security.emails import generate_security_email
+
+from .mail import MailPreview
+
+
+class DebugMfaRemovedEmailView(View):
+    def get(self, request):
+        authenticator = Authenticator(
+            id=0,
+            type=3,  # u2f
+            user=request.user,
+        )
+
+        email = generate_security_email(
+            account=request.user,
+            actor=request.user,
+            type='mfa-removed',
+            ip_address=request.META['REMOTE_ADDR'],
+            context={
+                'authenticator': authenticator,
+            },
+        )
+        return MailPreview(
+            html_template=email.html_template,
+            text_template=email.template,
+            context=email.context,
+        ).render(request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index ed89a1deef..d6916b0f16 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -113,10 +113,19 @@ if getattr(settings, 'DEBUG_VIEWS', settings.DEBUG):
     from sentry.web.frontend.debug.debug_error_embed import (
         DebugErrorPageEmbedView
     )
+    from sentry.web.frontend.debug.debug_mfa_added_email import (
+        DebugMfaAddedEmailView
+    )
+    from sentry.web.frontend.debug.debug_mfa_removed_email import (
+        DebugMfaRemovedEmailView
+    )
     from sentry.web.frontend.debug.debug_new_release_email import (
         DebugNewReleaseEmailView
     )
     from sentry.web.frontend.debug.debug_note_email import DebugNoteEmailView
+    from sentry.web.frontend.debug.debug_password_changed_email import (
+        DebugPasswordChangedEmailView
+    )
     from sentry.web.frontend.debug.debug_regression_email import (
         DebugRegressionEmailView, DebugRegressionReleaseEmailView
     )
@@ -171,6 +180,12 @@ if getattr(settings, 'DEBUG_VIEWS', settings.DEBUG):
             DebugUnassignedEmailView.as_view()),
         url(r'^debug/mail/org-delete-confirm/$',
             sentry.web.frontend.debug.mail.org_delete_confirm),
+        url(r'^debug/mail/mfa-removed/$',
+            DebugMfaRemovedEmailView.as_view()),
+        url(r'^debug/mail/mfa-added/$',
+            DebugMfaAddedEmailView.as_view()),
+        url(r'^debug/mail/password-changed/$',
+            DebugPasswordChangedEmailView.as_view()),
         url(r'^debug/embed/error-page/$',
             DebugErrorPageEmbedView.as_view()),
         url(r'^debug/trigger-error/$',
diff --git a/tests/acceptance/test_emails.py b/tests/acceptance/test_emails.py
index 7aa5cde0c8..c7e8e97685 100644
--- a/tests/acceptance/test_emails.py
+++ b/tests/acceptance/test_emails.py
@@ -144,3 +144,33 @@ class EmailTestCase(AcceptanceTestCase):
         self.browser.get(self.build_url('/debug/mail/report/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('report email html')
+
+    def test_mfa_added_html(self):
+        self.browser.get(self.build_url('/debug/mail/mfa-added/'))
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('mfa added email html')
+
+    def test_mfa_added_txt(self):
+        self.browser.get(self.build_url('/debug/mail/mfa-added/', 'txt'))
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('mfa added email txt')
+
+    def test_mfa_removed_html(self):
+        self.browser.get(self.build_url('/debug/mail/mfa-removed/'))
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('mfa removed email html')
+
+    def test_mfa_removed_text(self):
+        self.browser.get(self.build_url('/debug/mail/mfa-removed/', 'txt'))
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('mfa removed email txt')
+
+    def test_password_changed_html(self):
+        self.browser.get(self.build_url('/debug/mail/password-changed/'))
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('password changed email html')
+
+    def test_password_changed_text(self):
+        self.browser.get(self.build_url('/debug/mail/password-changed/', 'txt'))
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('password changed email txt')
