commit 0631b7e00ef79f382bb5cb5a746ad8a9903eb00a
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jul 12 13:01:59 2018 -0700

    feat(integrations): Bitbucket Issue Link/Create (#8801)
    
    * Added issues rough draft.:
    
    * Updated the bitbucket issue
    
    * Bitbucket link/create issue
    
    * Added tests
    
    * fixed tests.
    
    * Added changes to the bitbucket issue class name and default repo

diff --git a/src/sentry/integrations/bitbucket/client.py b/src/sentry/integrations/bitbucket/client.py
index cd913a56ba..496bb3e626 100644
--- a/src/sentry/integrations/bitbucket/client.py
+++ b/src/sentry/integrations/bitbucket/client.py
@@ -29,6 +29,7 @@ class BitbucketAPIPath(object):
     issue_comments = u'/2.0/repositories/{repo}/issues/{issue_id}/comments'
 
     repository = u'/2.0/repositories/{repo}'
+    repositories = u'/2.0/repositories/{username}'
     repository_commits = u'/2.0/repositories/{repo}/commits/{revision}'
     repository_diff = u'/2.0/repositories/{repo}/diff/{spec}'
     repository_hook = u'/2.0/repositories/{repo}/hooks/{uid}'
@@ -69,6 +70,11 @@ class BitbucketApiClient(ApiClient):
             issue_id=issue_id,
         ))
 
+    def get_issues(self, repo):
+        return self.get(BitbucketAPIPath.issues.format(
+            repo=repo,
+        ))
+
     def create_issue(self, repo, data):
         return self.post(
             path=BitbucketAPIPath.issues.format(
@@ -104,6 +110,11 @@ class BitbucketApiClient(ApiClient):
             repo=repo,
         ))
 
+    def get_repos(self, username):
+        return self.get(BitbucketAPIPath.repositories.format(
+            username=username,
+        ))
+
     def create_hook(self, repo, data):
         return self.post(
             path=BitbucketAPIPath.repository_hooks.format(
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index 5701e114bd..061a070ee0 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
+from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from django.utils.translation import ugettext_lazy as _
@@ -8,6 +8,7 @@ from sentry.utils.http import absolute_uri
 
 from .repository import BitbucketRepositoryProvider
 from .client import BitbucketApiClient
+from .issues import BitbucketIssueBasicMixin
 
 DESCRIPTION = """
 Bitbucket for Sentry.io
@@ -24,12 +25,13 @@ scopes = (
     'account',
     'issue:write',
     'repository',
+    'repository:admin',
     'team',
     'webhook',
 )
 
 
-class BitbucketIntegration(Integration):
+class BitbucketIntegration(Integration, BitbucketIssueBasicMixin):
     def get_client(self):
         return BitbucketApiClient(
             self.model.metadata['base_url'],
@@ -37,6 +39,10 @@ class BitbucketIntegration(Integration):
             self.model.external_id,
         )
 
+    @property
+    def username(self):
+        return self.model.name
+
 
 class BitbucketIntegrationProvider(IntegrationProvider):
     key = 'bitbucket'
@@ -44,6 +50,7 @@ class BitbucketIntegrationProvider(IntegrationProvider):
     metadata = metadata
     scopes = scopes
     integration_cls = BitbucketIntegration
+    features = frozenset([IntegrationFeatures.ISSUE_BASIC])
 
     def get_pipeline_views(self):
         identity_pipeline_config = {
diff --git a/src/sentry/integrations/bitbucket/issues.py b/src/sentry/integrations/bitbucket/issues.py
new file mode 100644
index 0000000000..233e107a92
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/issues.py
@@ -0,0 +1,156 @@
+from __future__ import absolute_import
+from sentry.integrations.issues import IssueBasicMixin
+from sentry.integrations.exceptions import ApiError, IntegrationError
+
+
+ISSUE_TYPES = (
+    ('bug', 'Bug'), ('enhancement', 'Enhancement'), ('proposal', 'Proposal'), ('task', 'Task'),
+)
+
+PRIORITIES = (
+    ('trivial', 'Trivial', ), ('minor', 'Minor', ), ('major', 'Major'), ('critical', 'Critical'),
+    ('blocker', 'Blocker'),
+)
+
+ERR_404 = (
+    'Bitbucket returned a 404. Please make sure that '
+    'the repo exists, you have access to it, and it has '
+    'issue tracking enabled.'
+)
+
+
+class BitbucketIssueBasicMixin(IssueBasicMixin):
+
+    def get_repo_choices(self, **kwargs):
+        client = self.get_client()
+
+        try:
+            repos = client.get_repos(self.username)
+        except ApiError:
+            repo_choices = []
+        else:
+            repo_choices = [(repo['uuid'], repo['full_name']) for repo in repos['values']]
+
+        params = kwargs.get('params', {})
+        default_repo = params.get('repo', repo_choices[0][0])
+        issues = self.get_repo_issues(default_repo)
+        return repo_choices, default_repo, issues
+
+    def get_create_issue_config(self, group, **kwargs):
+        fields = super(BitbucketIssueBasicMixin, self).get_create_issue_config(group, **kwargs)
+        repo_choices, default_repo, issues = self.get_repo_choices(**kwargs)
+        return [
+            {
+                'name': 'repo',
+                'label': 'Bitbucket Repository',
+                'type': 'select',
+                'default': default_repo,
+                'choices': repo_choices,
+                'required': True,
+            }
+        ] + fields + [
+            {
+                'name': 'issue_type',
+                'label': 'Issue type',
+                'default': ISSUE_TYPES[0][0],
+                'type': 'select',
+                'choices': ISSUE_TYPES
+            }, {
+                'name': 'priority',
+                'label': 'Priority',
+                'default': PRIORITIES[0][0],
+                'type': 'select',
+                'choices': PRIORITIES
+            }
+        ]
+
+    def get_link_issue_config(self, group, **kwargs):
+        repo_choices, default_repo, issues = self.get_repo_choices(**kwargs)
+
+        return [{
+            'name': 'repo',
+            'label': 'Bitbucket Repository',
+            'type': 'select',
+            'default': default_repo,
+            'choices': repo_choices,
+            'required': True,
+            'updatesForm': True,
+        }, {
+            'name': 'externalIssue',
+            'label': 'Issue',
+            'default': '',
+            'type': 'select',
+            'choices': issues,
+
+        }, {
+            'name': 'comment',
+            'label': 'Comment',
+            'default': '',
+            'type': 'textarea',
+            'required': False,
+            'help': ('Leave blank if you don\'t want to '
+                     'add a comment to the Bitbucket issue.'),
+        }]
+
+    def create_issue(self, data, **kwargs):
+        client = self.get_client()
+        issue = client.create_issue(data.get('repo'), data)
+        return {
+            'key': issue['id'],
+            'title': issue['title'],
+            'description': issue['content']['html'],  # users content rendered as html
+        }
+
+    def get_issue(self, issue_id, **kwargs):
+        client = self.get_client()
+        repo = kwargs['data'].get('repo')
+        issue = client.get_issue(repo, issue_id)
+        return {
+            'key': issue['id'],
+            'title': issue['title'],
+            'description': issue['content']['html'],  # users content rendered as html
+            'repo': repo,
+        }
+
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiError) and exc.code == 404:
+            return ERR_404
+        return super(BitbucketIssueBasicMixin, self).message_from_error(exc)
+
+    def get_repo_issues(self, repo):
+        client = self.get_client()
+
+        try:
+            response = client.get_issues(repo)['values']
+        except Exception as e:
+            self.raise_error(e)
+
+        issues = tuple((i['id'], '#{} {}'.format(i['id'], i['title'])) for i in response)
+
+        return issues
+
+    def make_external_key(self, data):
+        return '{}#{}'.format(data['repo'], data['key'])
+
+    def after_link_issue(self, external_issue, **kwargs):
+        data = kwargs['data']
+        client = self.get_client()
+
+        repo, issue_num = external_issue.key.split('#')
+
+        if not repo:
+            raise IntegrationError('repo must be provided')
+
+        if not issue_num:
+            raise IntegrationError('issue number must be provided')
+
+        comment = data.get('comment')
+        if comment:
+            try:
+                client.create_comment(
+                    repo=repo,
+                    issue_id=issue_num,
+                    data={'content': {'raw': comment}}
+                )
+            except ApiError as e:
+                raise IntegrationError(self.message_from_error(e))
diff --git a/tests/sentry/integrations/bitbucket/test_issues.py b/tests/sentry/integrations/bitbucket/test_issues.py
new file mode 100644
index 0000000000..62f1fce4d3
--- /dev/null
+++ b/tests/sentry/integrations/bitbucket/test_issues.py
@@ -0,0 +1,74 @@
+from __future__ import absolute_import
+
+from sentry.models import ExternalIssue, Integration
+from sentry.testutils import APITestCase
+
+import json
+import responses
+
+
+class BitbucketIssueTest(APITestCase):
+    def setUp(self):
+        self.base_url = 'https://api.bitbucket.org'
+        self.shared_secret = '234567890'
+        self.subject = 'connect:1234567'
+        self.integration = Integration.objects.create(
+            provider='bitbucket',
+            external_id=self.subject,
+            name='myaccount',
+            metadata={
+                'base_url': self.base_url,
+                'shared_secret': self.shared_secret,
+                'subject': self.subject,
+            }
+        )
+
+    @responses.activate
+    def test_link_issue(self):
+        issue_id = 3
+        repo = 'myaccount/myrepo'
+        responses.add(
+            responses.GET,
+            'https://api.bitbucket.org/2.0/repositories/{repo}/issues/{issue_id}'.format(
+                repo=repo, issue_id=issue_id),
+            json={'id': issue_id, 'title': 'hello', 'content': {'html': 'This is the description'}}
+        )
+
+        data = {
+            'repo': repo,
+            'externalIssue': issue_id,
+            'comment': 'hello',
+        }
+
+        assert self.integration.get_installation().get_issue(issue_id, data=data) == {
+            'key': issue_id,
+            'description': 'This is the description',
+            'title': 'hello',
+            'repo': repo,
+        }
+
+    @responses.activate
+    def test_after_link_issue(self):
+        issue_id = 3
+        repo = 'myaccount/myrepo'
+        comment = {'comment': 'hello I\'m a comment'}
+        responses.add(
+            responses.POST,
+            'https://api.bitbucket.org/2.0/repositories/{repo}/issues/{issue_id}/comments'.format(
+                repo=repo, issue_id=issue_id),
+            status=201,
+            json={'content': {'raw': comment}},
+        )
+
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.integration.id,
+            key='%s#%d' % (repo, issue_id),
+        )
+
+        self.integration.get_installation().after_link_issue(external_issue, data=comment)
+
+        request = responses.calls[0].request
+        assert responses.calls[0].response.status_code == 201
+        payload = json.loads(request.body)
+        assert payload == {'content': {'raw': comment['comment']}}
