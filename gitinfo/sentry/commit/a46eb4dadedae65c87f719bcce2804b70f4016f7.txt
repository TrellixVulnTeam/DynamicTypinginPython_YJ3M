commit a46eb4dadedae65c87f719bcce2804b70f4016f7
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri Mar 27 08:59:32 2020 -0700

    fix(pagerduty): update deletes all PagerDutyService objects for installation (#17947)

diff --git a/src/sentry/integrations/pagerduty/integration.py b/src/sentry/integrations/pagerduty/integration.py
index c237105a43..f788512b7f 100644
--- a/src/sentry/integrations/pagerduty/integration.py
+++ b/src/sentry/integrations/pagerduty/integration.py
@@ -7,6 +7,7 @@ from django.db import transaction
 from sentry import options
 
 from sentry.utils import json
+from sentry.utils.compat import filter
 from sentry.utils.http import absolute_uri
 from sentry.integrations.base import (
     IntegrationInstallation,
@@ -15,6 +16,7 @@ from sentry.integrations.base import (
     IntegrationProvider,
     FeatureDescription,
 )
+from sentry.shared_integrations.exceptions import IntegrationError
 
 from sentry.models import OrganizationIntegration, PagerDutyService
 
@@ -73,20 +75,38 @@ class PagerDutyIntegration(IntegrationInstallation):
 
     def update_organization_config(self, data):
         if "service_table" in data:
+            service_rows = data["service_table"]
+            # validate fields
+            bad_rows = filter(lambda x: not x["service"] or not x["integration_key"], service_rows)
+            if bad_rows:
+                raise IntegrationError("Name and key are required")
+
             with transaction.atomic():
-                PagerDutyService.objects.filter(
+                exising_service_items = PagerDutyService.objects.filter(
                     organization_integration=self.org_integration
-                ).delete()
-                for item in data["service_table"]:
-                    service_name = item["service"]
-                    key = item["integration_key"]
-
-                    if key and service_name:
-                        PagerDutyService.objects.create(
-                            organization_integration=self.org_integration,
-                            service_name=service_name,
-                            integration_key=key,
-                        )
+                )
+
+                for service_item in exising_service_items:
+                    # find the matching row from the input
+                    matched_rows = filter(lambda x: x["id"] == service_item.id, service_rows)
+                    if matched_rows:
+                        matched_row = matched_rows[0]
+                        service_item.integration_key = matched_row["integration_key"]
+                        service_item.service_name = matched_row["service"]
+                        service_item.save()
+                    else:
+                        service_item.delete()
+
+                # new rows don't have an id
+                new_rows = filter(lambda x: not x["id"], service_rows)
+                for row in new_rows:
+                    service_name = row["service"]
+                    key = row["integration_key"]
+                    PagerDutyService.objects.create(
+                        organization_integration=self.org_integration,
+                        service_name=service_name,
+                        integration_key=key,
+                    )
 
     def get_config_data(self):
         service_list = []
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
index c893c3e4b9..3d25e94232 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
+import flatten from 'lodash/flatten';
 
 import {defined, objectIsEmpty} from 'app/utils';
 import {t} from 'app/locale';
@@ -21,6 +22,7 @@ const defaultProps = {
 
 type DefaultProps = Readonly<typeof defaultProps>;
 
+//TODO(TS): properly type this since InputField['props'] is type any
 type Props = {
   name?: string;
   columnLabels: object;
@@ -55,6 +57,7 @@ export default class TableField extends React.Component<Props> {
 
   hasValue = value => defined(value) && !objectIsEmpty(value);
 
+  //TODO(TS): should type field props
   renderField = props => {
     const {
       onChange,
@@ -75,11 +78,13 @@ export default class TableField extends React.Component<Props> {
     const saveChanges = (nextValue: object) => {
       onChange(nextValue, []);
 
-      const validValues = !Object.values(nextValue)
-        .map(o => Object.values(o).find(v => v === null))
-        .includes(null);
+      //check for falsy values
+      const validValues = !flatten(Object.values(nextValue).map(Object.values)).some(
+        v => !v
+      );
 
       if (allowEmpty || validValues) {
+        //TOOD: add debouncing or use a form save button
         onBlur();
       }
     };
diff --git a/tests/sentry/integrations/pagerduty/test_integration.py b/tests/sentry/integrations/pagerduty/test_integration.py
index c9b133a754..508cbbd95f 100644
--- a/tests/sentry/integrations/pagerduty/test_integration.py
+++ b/tests/sentry/integrations/pagerduty/test_integration.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import responses
 
+import pytest
+import six
 from sentry import options
 from sentry.utils import json
 
@@ -9,6 +11,7 @@ from six.moves.urllib.parse import urlencode, urlparse
 from sentry.models import Integration, OrganizationIntegration, PagerDutyService
 from sentry.testutils import IntegrationTestCase
 from sentry.integrations.pagerduty.integration import PagerDutyIntegrationProvider
+from sentry.shared_integrations.exceptions import IntegrationError
 
 
 class PagerDutyIntegrationTest(IntegrationTestCase):
@@ -146,26 +149,45 @@ class PagerDutyIntegrationTest(IntegrationTestCase):
     def test_update_organization_config(self):
         with self.tasks():
             self.assert_setup_flow()
-
         integration = Integration.objects.get(provider=self.provider.key)
-        service = PagerDutyService.objects.get(
-            organization_integration=OrganizationIntegration.objects.get(
-                integration=integration, organization=self.organization
-            )
-        )
+        service_id = PagerDutyService.objects.get(integration_key="key1").id
         config_data = {
             "service_table": [
                 {"service": "Mleep", "integration_key": "xxxxxxxxxxxxxxxx", "id": None},
-                {
-                    "service": service.service_name,
-                    "integration_key": service.integration_key,
-                    "id": service.id,
-                },
+                {"service": "new_service", "integration_key": "new_key", "id": service_id},
             ]
         }
         integration.get_installation(self.organization).update_organization_config(config_data)
-        assert len(PagerDutyService.objects.all()) == 2
-        assert not PagerDutyService.objects.filter(id=service.id).exists()
+        assert len(PagerDutyService.objects.filter()) == 2
+        service_row = PagerDutyService.objects.get(id=service_id)
+        assert service_row.service_name == "new_service"
+        assert service_row.integration_key == "new_key"
+
+    @responses.activate
+    def test_delete_pagerduty_service(self):
+        with self.tasks():
+            self.assert_setup_flow()
+        integration = Integration.objects.get(provider=self.provider.key)
+        service_id = PagerDutyService.objects.get(integration_key="key1").id
+        config_data = {
+            "service_table": [{"service": "new_service", "integration_key": "new_key", "id": None}]
+        }
+        integration.get_installation(self.organization).update_organization_config(config_data)
+        assert len(PagerDutyService.objects.all()) == 1
+        assert not PagerDutyService.objects.filter(id=service_id).exists()
+
+    @responses.activate
+    def test_no_name(self):
+        with self.tasks():
+            self.assert_setup_flow()
+        integration = Integration.objects.get(provider=self.provider.key)
+        service_id = PagerDutyService.objects.get(integration_key="key1").id
+        config_data = {
+            "service_table": [{"service": "new_service", "integration_key": "", "id": service_id}]
+        }
+        with pytest.raises(IntegrationError) as error:
+            integration.get_installation(self.organization).update_organization_config(config_data)
+        assert six.text_type(error.value) == "Name and key are required"
 
     @responses.activate
     def test_get_config_data(self):
