commit abe43cf49086ada64c99b1d5f21e2c4690b3d186
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 27 14:32:38 2018 -0800

    Revert "fix(south): Restore transaction management for Django 1.6"
    
    This reverts commit 1d27baf893e2f2001d7cd3cf4bf390109e6a6ac1.

diff --git a/src/south/db/generic.py b/src/south/db/generic.py
index 64f42922c5..d1f4b0d3b1 100644
--- a/src/south/db/generic.py
+++ b/src/south/db/generic.py
@@ -31,7 +31,6 @@ except ImportError:
             res = instance.__dict__[self.func.__name__] = self.func(instance)
             return res
 
-from south.constants import DJANGO_17
 from south.logger import get_logger
 from south.utils.py3 import string_types, text_type
 
@@ -1016,10 +1015,9 @@ class DatabaseOperations(object):
         """
         if self.dry_run:
             self.pending_transactions += 1
-        if not DJANGO_17:
-            transaction.commit_unless_managed(using=self.db_alias)
-            transaction.enter_transaction_management(using=self.db_alias)
-            transaction.managed(True, using=self.db_alias)
+        # transaction.commit_unless_managed(using=self.db_alias)
+        # transaction.enter_transaction_management(using=self.db_alias)
+        # transaction.managed(True, using=self.db_alias)
 
     def commit_transaction(self):
         """
@@ -1029,8 +1027,7 @@ class DatabaseOperations(object):
         if self.dry_run:
             return
         transaction.commit(using=self.db_alias)
-        if not DJANGO_17:
-            transaction.leave_transaction_management(using=self.db_alias)
+        # transaction.leave_transaction_management(using=self.db_alias)
 
     def rollback_transaction(self):
         """
@@ -1040,8 +1037,7 @@ class DatabaseOperations(object):
         if self.dry_run:
             self.pending_transactions -= 1
         transaction.rollback(using=self.db_alias)
-        if not DJANGO_17:
-            transaction.leave_transaction_management(using=self.db_alias)
+        # transaction.leave_transaction_management(using=self.db_alias)
 
     def rollback_transactions_dry_run(self):
         """
@@ -1051,10 +1047,10 @@ class DatabaseOperations(object):
             return
         while self.pending_transactions > 0:
             self.rollback_transaction()
-        if not DJANGO_17 and transaction.is_dirty(using=self.db_alias):
-            # Force an exception, if we're still in a dirty transaction.
-            # This means we are missing a COMMIT/ROLLBACK.
-            transaction.leave_transaction_management(using=self.db_alias)
+        # if transaction.is_dirty(using=self.db_alias):
+        #     # Force an exception, if we're still in a dirty transaction.
+        #     # This means we are missing a COMMIT/ROLLBACK.
+        #     transaction.leave_transaction_management(using=self.db_alias)
 
     def send_create_signal(self, app_label, model_names):
         self.pending_create_signals.append((app_label, model_names))
