commit dbcce82f9ebbd98fd2fefa4a7b6a6a7a112c224a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed May 13 13:00:04 2020 -0700

    fix(ui): Fix browser navigation button breaking `<GlobalSelectionHeader>` (#18783)
    
    This fixes browser navigation breaking the header and adds a test. Changes `updateProjects` to additionally accept an argument for updating environments as well as we generally need to update environments if we change projects.
    
    This bug was introduced in #18499

diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
index 0ddb979683..4aae0d6e29 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
@@ -215,11 +215,15 @@ export function initializeUrlState({
 
 /**
  * Updates store and global project selection URL param if `router` is supplied
+ *
+ * This accepts `environments` from `options` to also update environments simultaneously
+ * as environments are tied to a project, so if you change projects, you may need
+ * to clear environments.
  */
 export function updateProjects(
   projects: ProjectId[],
   router?: Router,
-  options?: Options
+  options?: Options & {environments?: EnvironmentId[]}
 ) {
   if (!isProjectsValid(projects)) {
     Sentry.withScope(scope => {
@@ -229,8 +233,8 @@ export function updateProjects(
     return;
   }
 
-  GlobalSelectionActions.updateProjects(projects);
-  updateParams({project: projects}, router, options);
+  GlobalSelectionActions.updateProjects(projects, options?.environments);
+  updateParams({project: projects, environment: options?.environments}, router, options);
 }
 
 function isProjectsValid(projects: ProjectId[]) {
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.tsx
index 1d28e6e4fb..5fd1108326 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.tsx
@@ -284,8 +284,10 @@ class GlobalSelectionHeader extends React.Component<Props, State> {
     const {projects} = this.state;
 
     // Clear environments when switching projects
-    updateEnvironments([], this.getRouter(), this.getUpdateOptions());
-    updateProjects(projects || [], this.getRouter(), this.getUpdateOptions());
+    updateProjects(projects || [], this.getRouter(), {
+      ...this.getUpdateOptions(),
+      environments: [],
+    });
     this.setState({projects: null, environments: null});
     callIfFunction(this.props.onUpdateProjects, projects);
   };
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/initializeGlobalSelectionHeader.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/initializeGlobalSelectionHeader.tsx
index bc813b7cf5..570879e0ff 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/initializeGlobalSelectionHeader.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/initializeGlobalSelectionHeader.tsx
@@ -1,8 +1,17 @@
 import React from 'react';
 import * as ReactRouter from 'react-router';
+import isEqual from 'lodash/isEqual';
+import pick from 'lodash/pick';
 
-import {initializeUrlState} from 'app/actionCreators/globalSelection';
+import {DATE_TIME_KEYS} from 'app/constants/globalSelectionHeader';
+import {
+  initializeUrlState,
+  updateProjects,
+  updateEnvironments,
+  updateDateTime,
+} from 'app/actionCreators/globalSelection';
 
+import {getStateFromQuery} from './utils';
 import GlobalSelectionHeader from './globalSelectionHeader';
 
 type Props = {
@@ -50,7 +59,6 @@ class InitializeGlobalSelectionHeader extends React.Component<Props> {
       showAbsolute,
     } = this.props;
 
-    //
     initializeUrlState({
       organization,
       queryParams: location.query,
@@ -65,6 +73,41 @@ class InitializeGlobalSelectionHeader extends React.Component<Props> {
     });
   }
 
+  componentDidUpdate(prevProps: Props) {
+    /**
+     * This happens e.g. using browser's navigation button, in which case
+     * we need to update our store to reflect URL changes
+     */
+    if (prevProps.location.query !== this.props.location.query) {
+      const oldQuery = getStateFromQuery(prevProps.location.query, {
+        allowEmptyPeriod: true,
+      });
+      const newQuery = getStateFromQuery(this.props.location.query, {
+        allowEmptyPeriod: true,
+      });
+
+      const newEnvironments = newQuery.environment || [];
+      const newDateObject = pick(newQuery, DATE_TIME_KEYS);
+
+      /**
+       * Do not pass router to these actionCreators, as we do not want to update
+       * routes since these state changes are happening due to a change of routes
+       */
+      if (!isEqual(oldQuery.project, newQuery.project)) {
+        updateProjects(newQuery.project || [], null, {environments: newEnvironments});
+      }
+      if (!isEqual(oldQuery.environment, newQuery.project)) {
+        // Projects changing will also change environments, so only update environments
+        // by itself if projects is unchanged
+        updateEnvironments(newEnvironments);
+      }
+
+      if (!isEqual(pick(oldQuery, DATE_TIME_KEYS), newDateObject)) {
+        updateDateTime(newDateObject);
+      }
+    }
+  }
+
   render() {
     return null;
   }
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index 9f118d1f0e..1b914ac346 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -37,7 +37,6 @@ const GlobalSelectionStore = Reflux.createStore({
 
   /**
    * Initializes the global selection store data
-   * Use query params if they exist, otherwise check local storage
    */
   onInitializeUrlState(newSelection) {
     this._hasInitialState = true;
@@ -57,7 +56,7 @@ const GlobalSelectionStore = Reflux.createStore({
     this.trigger(this.get());
   },
 
-  updateProjects(projects = []) {
+  updateProjects(projects = [], environments = null) {
     if (isEqual(this.selection.projects, projects)) {
       return;
     }
@@ -65,6 +64,7 @@ const GlobalSelectionStore = Reflux.createStore({
     this.selection = {
       ...this.selection,
       projects,
+      environments: environments === null ? this.selection.environments : environments,
     };
     this.trigger(this.get());
   },
diff --git a/tests/acceptance/test_organization_global_selection_header.py b/tests/acceptance/test_organization_global_selection_header.py
index c4bafdff95..0f4d1cfafd 100644
--- a/tests/acceptance/test_organization_global_selection_header.py
+++ b/tests/acceptance/test_organization_global_selection_header.py
@@ -123,6 +123,34 @@ class OrganizationGlobalHeaderTest(AcceptanceTestCase, SnubaTestCase):
         self.issues_list.wait_until_loaded()
         assert u"project={}".format(self.project_3.id) in self.browser.current_url
 
+    def test_global_selection_header_navigates_with_browser_back_button(self):
+        """
+        Global Selection Header should:
+        1) load project from URL if it exists
+        2) enforce a single project if loading issues list with no project in URL
+           a) last selected project via local storage if it exists
+           b) otherwise need to just select first project
+        """
+        self.create_issues()
+        # Issues list with project 1 selected
+        self.issues_list.visit_issue_list(
+            self.org.slug, query="?project=" + six.text_type(self.project_1.id)
+        )
+        self.issues_list.visit_issue_list(self.org.slug)
+        assert self.issues_list.global_selection.get_selected_project_slug() == self.project_1.slug
+
+        # selects a different project
+        self.issues_list.global_selection.select_project_by_slug(self.project_3.slug)
+        self.issues_list.wait_until_loaded()
+        assert u"project={}".format(self.project_3.id) in self.browser.current_url
+        assert self.issues_list.global_selection.get_selected_project_slug() == self.project_3.slug
+
+        # simulate pressing the browser back button
+        self.browser.back()
+        self.issues_list.wait_until_loaded()
+        assert u"project={}".format(self.project_1.id) in self.browser.current_url
+        assert self.issues_list.global_selection.get_selected_project_slug() == self.project_1.slug
+
     def test_global_selection_header_loads_with_correct_project_with_multi_project(self):
         """
         Global Selection Header should:
diff --git a/tests/js/spec/actionCreators/globalSelection.spec.jsx b/tests/js/spec/actionCreators/globalSelection.spec.jsx
index bf35f228e1..fcb7235a89 100644
--- a/tests/js/spec/actionCreators/globalSelection.spec.jsx
+++ b/tests/js/spec/actionCreators/globalSelection.spec.jsx
@@ -98,7 +98,10 @@ describe('GlobalSelection ActionCreators', function() {
   describe('updateProjects()', function() {
     it('updates', function() {
       updateProjects([1, 2]);
-      expect(GlobalSelectionActions.updateProjects).toHaveBeenCalledWith([1, 2]);
+      expect(GlobalSelectionActions.updateProjects).toHaveBeenCalledWith(
+        [1, 2],
+        undefined
+      );
     });
 
     it('does not update invalid projects', function() {
diff --git a/tests/js/spec/views/events/index.spec.jsx b/tests/js/spec/views/events/index.spec.jsx
index 38b61f8737..fa9ac9d7a3 100644
--- a/tests/js/spec/views/events/index.spec.jsx
+++ b/tests/js/spec/views/events/index.spec.jsx
@@ -174,9 +174,10 @@ describe('EventsContainer', function() {
       await tick();
       wrapper.update();
 
-      expect(router.push).toHaveBeenCalledWith({
+      expect(router.push).toHaveBeenLastCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
+          environment: [],
           project: [2],
         },
       });
@@ -204,9 +205,10 @@ describe('EventsContainer', function() {
 
       wrapper.find('MultipleProjectSelector StyledChevron').simulate('click');
 
-      expect(router.push).toHaveBeenCalledWith({
+      expect(router.push).toHaveBeenLastCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
+          environment: [],
           project: [2, 3],
         },
       });
