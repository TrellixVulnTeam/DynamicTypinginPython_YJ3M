commit afcb078b414d0808419874220bd4c959dd0111c7
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Fri Sep 16 15:20:01 2016 -0700

    move indicator state from settings.jsx into base component (#4151)
    
    * move indicator state from settings.jsx into base component
    
    * use base settings component for issue plugins
    
    * clean up a few things
    
    * wrap fetchData and onSubmit in onLoad/onSave in base class

diff --git a/src/sentry/static/sentry/app/components/bases/settingsBase.jsx b/src/sentry/static/sentry/app/components/bases/settingsBase.jsx
new file mode 100644
index 0000000000..2bbc626632
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/bases/settingsBase.jsx
@@ -0,0 +1,113 @@
+import React from 'react';
+import _ from 'underscore';
+
+import {Client} from '../../api';
+import {FormState} from '../../components/forms';
+import IndicatorStore from '../../stores/indicatorStore';
+import {t} from '../../locale';
+
+
+const callbackWithArgs = function(callback, ...args) {
+  if (_.isFunction(callback)) {
+    callback = callback.bind(this, ...args);
+  } else {
+    callback = null;
+  }
+  return callback;
+};
+
+
+class SettingsBase extends React.Component {
+  constructor(props) {
+    super(props);
+
+    ['onLoadSuccess',
+     'onLoadError',
+     'onSave',
+     'onSaveSuccess',
+     'onSaveError',
+     'onSaveComplete'].map(method => this[method] = this[method].bind(this));
+
+    if (this.fetchData) {
+      this.fetchData = this.onLoad.bind(this, this.fetchData.bind(this));
+    }
+    if (this.onSubmit) {
+      this.onSubmit = this.onSave.bind(this, this.onSubmit.bind(this));
+    }
+
+    this.state = {
+      state: FormState.READY
+    };
+  }
+
+  componentWillMount() {
+    this.api = new Client();
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+  }
+
+  onLoad(callback, ...args) {
+    this.setState({
+      state: FormState.LOADING
+    }, callbackWithArgs(callback, ...args));
+  }
+
+  onLoadSuccess(callback, ...args) {
+    this.setState({
+      state: FormState.READY
+    }, callbackWithArgs(callback, ...args));
+  }
+
+  onLoadError(callback, ...args) {
+    this.setState({
+      state: FormState.ERROR
+    }, callbackWithArgs(callback, ...args));
+    IndicatorStore.add(t('An error occurred.'), 'error', {
+      duration: 3000
+    });
+  }
+
+  onSave(callback, ...args) {
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+    callback = callbackWithArgs(callback, ...args);
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      this._loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      callback && callback();
+    });
+  }
+
+  onSaveSuccess(callback, ...args) {
+    this.setState({
+      state: FormState.READY
+    }, callbackWithArgs(callback, ...args));
+    IndicatorStore.add(t('Success!'), 'success', {
+      duration: 3000
+    });
+  }
+
+  onSaveError(callback, ...args) {
+    callback = callbackWithArgs(callback, ...args);
+    this.setState({
+      state: FormState.ERROR,
+    }, () => {
+      IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+        duration: 3000
+      });
+      callback && callback();
+    });
+  }
+
+  onSaveComplete(callback, ...args) {
+    IndicatorStore.remove(this._loadingIndicator);
+    callback = callbackWithArgs(callback, ...args);
+    callback && callback();
+  }
+}
+
+export default SettingsBase;
diff --git a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
index b29e673511..276816a4dc 100644
--- a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
@@ -1,61 +1,79 @@
 import React from 'react';
 import Modal from 'react-bootstrap/lib/Modal';
 import ApiMixin from '../../mixins/apiMixin';
-import {Form, Select2Field, Select2FieldAutocomplete, TextareaField, TextField} from '../../components/forms';
+import {
+  Form,
+  FormState,
+  Select2Field,
+  Select2FieldAutocomplete,
+  TextareaField,
+  TextField
+} from '../../components/forms';
 import DropdownLink from '../../components/dropdownLink';
 import GroupActions from '../../actions/groupActions';
 import GroupState from '../../mixins/groupState';
-import IndicatorStore from '../../stores/indicatorStore';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 import MenuItem from '../../components/menuItem';
+import SettingsBase from '../../components/bases/settingsBase';
 import {t} from '../../locale';
 import {defined, toTitleCase} from '../../utils';
 
-const IssuePlugin = React.createClass({
-  propTypes: {
-    plugin: React.PropTypes.object.isRequired,
-    actionType: React.PropTypes.oneOf(['unlink', 'link', 'create']).isRequired,
-    onSuccess: React.PropTypes.func
-  },
+class IssuePlugin extends SettingsBase {
+  constructor(props) {
+    super(props);
 
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+    this.createIssue = this.onSave.bind(this, this.createIssue.bind(this));
+    this.linkIssue = this.onSave.bind(this, this.linkIssue.bind(this));
+    this.unlinkIssue = this.onSave.bind(this, this.unlinkIssue.bind(this));
+    this.onSuccess = this.onSaveSuccess.bind(this, this.onSuccess.bind(this));
+    this.errorHandler = this.onLoadError.bind(this, this.errorHandler.bind(this));
 
-  getInitialState() {
-    return {
+    Object.assign(this.state, {
       createFieldList: null,
       linkFieldList: null,
       loading: ['link', 'create'].includes(this.props.actionType),
+      state: (['link', 'create'].includes(this.props.actionType) ?
+              FormState.LOADING : FormState.READY),
       error: null,
       createFormData: {},
       linkFormData: {}
-    };
-  },
+    });
+  }
+
+  getGroup() {
+    return this.props.group;
+  }
+
+  getProject() {
+    return this.props.project;
+  }
+
+  getOrganization() {
+    return this.props.organization;
+  }
 
-  componentWillMount() {
+  componentDidMount() {
     let plugin = this.props.plugin;
     if (!plugin.issue && this.props.actionType !== 'unlink') {
       this.fetchData();
     }
-  },
+  }
 
   getPluginCreateEndpoint() {
     return ('/issues/' + this.getGroup().id +
             '/plugins/' + this.props.plugin.slug + '/create/');
-  },
+  }
 
   getPluginLinkEndpoint() {
     return ('/issues/' + this.getGroup().id +
             '/plugins/' + this.props.plugin.slug + '/link/');
-  },
+  }
 
   getPluginUnlinkEndpoint() {
     return ('/issues/' + this.getGroup().id +
             '/plugins/' + this.props.plugin.slug + '/unlink/');
-  },
+  }
 
   setError(error, defaultMessage) {
     let errorBody;
@@ -65,7 +83,7 @@ const IssuePlugin = React.createClass({
       errorBody = {message: defaultMessage};
     }
     this.setState({error: errorBody});
-  },
+  }
 
   errorHandler(error) {
     let state = {
@@ -77,13 +95,9 @@ const IssuePlugin = React.createClass({
       state.error = {message: t('An unknown error occurred.')};
     }
     this.setState(state);
-  },
+  }
 
   fetchData() {
-    this.setState({
-      loading: true
-    });
-
     if (this.props.actionType === 'create') {
       this.api.request(this.getPluginCreateEndpoint(), {
         success: (data) => {
@@ -96,7 +110,7 @@ const IssuePlugin = React.createClass({
             error: null,
             loading: false,
             createFormData: createFormData
-          });
+          }, this.onLoadSuccess);
         },
         error: this.errorHandler
       });
@@ -112,71 +126,49 @@ const IssuePlugin = React.createClass({
             error: null,
             loading: false,
             linkFormData: linkFormData
-          });
+          }, this.onLoadSuccess);
         },
         error: this.errorHandler
       });
     }
-  },
+  }
+
+  onSuccess() {
+    GroupActions.updateSuccess(null, [this.getGroup().id], {stale: true});
+    this.props.onSuccess && this.props.onSuccess();
+  }
 
   createIssue() {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request(this.getPluginCreateEndpoint(), {
       data: this.state.createFormData,
-      success: (data) => {
-        GroupActions.updateSuccess(null, [this.getGroup().id], {stale: true});
-        IndicatorStore.add(t('Successfully created issue.'), 'success', {
-          duration: 3000
-        });
-        this.props.onSuccess && this.props.onSuccess();
-      },
-      error: (error) => {
+      success: this.onSuccess,
+      error: this.onSaveError.bind(this, error => {
         this.setError(error, t('There was an error creating the issue.'));
-      },
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
-      }
+      }),
+      complete: this.onSaveComplete
     });
-  },
+  }
 
   linkIssue() {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request(this.getPluginLinkEndpoint(), {
       data: this.state.linkFormData,
-      success: (data) => {
-        GroupActions.updateSuccess(null, [this.getGroup().id], {stale: true});
-        IndicatorStore.add(t('Successfully linked issue.'), 'success', {
-          duration: 3000
-        });
-        this.props.onSuccess && this.props.onSuccess();
-      },
-      error: (error) => {
+      success: this.onSuccess,
+      error: this.onSaveError.bind(this, error => {
         this.setError(error, t('There was an error linking the issue.'));
-      },
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
-      }
+      }),
+      complete: this.onSaveComplete
     });
-  },
+  }
 
   unlinkIssue() {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request(this.getPluginUnlinkEndpoint(), {
-      success: (data) => {
-        GroupActions.updateSuccess(null, [this.getGroup().id], {stale: true});
-        IndicatorStore.add(t('Successfully unlinked issue.'), 'success', {
-          duration: 3000
-        });
-        this.props.onSuccess && this.props.onSuccess();
-      },
-      error: (error) => {
+      success: this.onSuccess,
+      error: this.onSaveError.bind(this, error => {
         this.setError(error, t('There was an error unlinking the issue.'));
-      },
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
-      }
+      }),
+      complete: this.onSaveComplete
     });
-  },
+  }
 
   changeField(action, name, value) {
     let key = action + 'FormData';
@@ -185,7 +177,7 @@ const IssuePlugin = React.createClass({
     let state = {};
     state[key] = formData;
     this.setState(state);
-  },
+  }
 
   renderField(action, field) {
     let el;
@@ -219,7 +211,7 @@ const IssuePlugin = React.createClass({
         el = null;
     }
     return el;
-  },
+  }
 
   renderForm() {
     let form;
@@ -261,14 +253,14 @@ const IssuePlugin = React.createClass({
         form = null;
     }
     return form;
-  },
+  }
 
   getPluginConfigureUrl() {
     let org = this.getOrganization();
     let project = this.getProject();
     let plugin = this.props.plugin;
     return '/' + org.slug + '/' + project.slug + '/settings/plugins/' + plugin.slug;
-  },
+  }
 
   renderError() {
     let error = this.state.error;
@@ -321,10 +313,10 @@ const IssuePlugin = React.createClass({
       );
     }
     return <LoadingError/>;
-  },
+  }
 
   render() {
-    if (this.state.loading) {
+    if (this.state.state === FormState.LOADING) {
       return <LoadingIndicator />;
     }
     return (
@@ -334,7 +326,13 @@ const IssuePlugin = React.createClass({
       </div>
     );
   }
-});
+}
+
+IssuePlugin.propTypes = {
+  plugin: React.PropTypes.object.isRequired,
+  actionType: React.PropTypes.oneOf(['unlink', 'link', 'create']).isRequired,
+  onSuccess: React.PropTypes.func
+};
 
 
 const IssuePluginActions = React.createClass({
@@ -428,6 +426,9 @@ const IssuePluginActions = React.createClass({
           <Modal.Body>
             {this.state.actionType &&
               <IssuePlugin plugin={this.props.plugin}
+                           group={this.getGroup()}
+                           project={this.getProject()}
+                           organization={this.getOrganization()}
                            actionType={this.state.actionType}
                            onSuccess={this.closeModal}/>
             }
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index 573f75a2c9..8d4dcad8ee 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -6,40 +6,29 @@ import {
   FormState,
   GenericField
 } from '../../components/forms';
-import {Client} from '../../api';
-import IndicatorStore from '../../stores/indicatorStore';
+import SettingsBase from '../../components/bases/settingsBase';
 import LoadingIndicator from '../../components/loadingIndicator';
-import {t} from '../../locale';
 
 
-class PluginSettings extends React.Component {
+class PluginSettings extends SettingsBase {
   constructor(props) {
     super(props);
 
-    this.onSubmit = this.onSubmit.bind(this);
-    this.fetchData = this.fetchData.bind(this);
-
-    this.state = {
+    Object.assign(this.state, {
       fieldList: null,
       initialData: null,
       formData: null,
       errors: {},
-      state: FormState.READY
-    };
-  }
-
-  componentWillMount() {
-    this.api = new Client();
+      // override default FormState.READY if api requests are
+      // necessary to even load the form
+      state: FormState.LOADING
+    });
   }
 
   componentDidMount() {
     this.fetchData();
   }
 
-  componentWillUnmount() {
-    this.api.clear();
-  }
-
   getPluginEndpoint() {
     let org = this.props.organization;
     let project = this.props.project;
@@ -58,68 +47,50 @@ class PluginSettings extends React.Component {
   }
 
   onSubmit() {
-    if (this.state.state == FormState.SAVING) {
-      return;
-    }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      this.api.request(this.getPluginEndpoint(), {
-        data: this.state.formData,
-        method: 'PUT',
-        success: (data) => {
-          let formData = {};
-          data.config.forEach((field) => {
-            formData[field.name] = field.value || field.defaultValue;
-          });
-          this.setState({
-            formData: formData,
-            initialData: Object.assign({}, formData),
-            state: FormState.READY,
-            errors: {},
-          });
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: (error.responseJSON || {}).errors || {},
-          });
-          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
-            duration: 3000
-          });
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
+    this.api.request(this.getPluginEndpoint(), {
+      data: this.state.formData,
+      method: 'PUT',
+      success: this.onSaveSuccess.bind(this, data => {
+        let formData = {};
+        data.config.forEach((field) => {
+          formData[field.name] = field.value || field.defaultValue;
+        });
+        this.setState({
+          formData: formData,
+          initialData: Object.assign({}, formData),
+          errors: {}
+        });
+      }),
+      error: this.onSaveError.bind(this, error => {
+        this.setState({
+          errors: (error.responseJSON || {}).errors || {},
+        });
+      }),
+      complete: this.onSaveComplete
     });
   }
 
   fetchData() {
     this.api.request(this.getPluginEndpoint(), {
-      success: (data) => {
+      success: data => {
         let formData = {};
         data.config.forEach((field) => {
           formData[field.name] = field.value || field.defaultValue;
         });
         this.setState({
           fieldList: data.config,
-          state: FormState.LOADING,
           formData: formData,
           initialData: Object.assign({}, formData)
-        });
+        // call this here to prevent FormState.READY from being
+        // set before fieldList is
+        }, this.onLoadSuccess);
       },
-      error: (error) => {
-        this.setState({
-          state: FormState.ERROR,
-        });
-      }
+      error: this.onLoadError
     });
   }
 
   render() {
-    if (!this.state.fieldList) {
+    if (this.state.state === FormState.LOADING) {
       return <LoadingIndicator />;
     }
     let isSaving = this.state.state === FormState.SAVING;
@@ -148,9 +119,9 @@ class PluginSettings extends React.Component {
 }
 
 PluginSettings.propTypes = {
-    organization: React.PropTypes.object.isRequired,
-    project: React.PropTypes.object.isRequired,
-    plugin: React.PropTypes.object.isRequired,
+  organization: React.PropTypes.object.isRequired,
+  project: React.PropTypes.object.isRequired,
+  plugin: React.PropTypes.object.isRequired,
 };
 
 export default PluginSettings;
