commit e53f063bcb517308b796f2092fc18e86e413f90f
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 14 14:57:42 2013 -0800

    Use the Referer header when present and Origin is not available

diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 5c693e1e49..7afede9bfb 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -94,7 +94,7 @@ class APIView(BaseView):
 
     @csrf_exempt
     def dispatch(self, request, project_id=None, *args, **kwargs):
-        origin = request.META.get('HTTP_ORIGIN', None)
+        origin = self.get_request_origin(request)
 
         response = self._dispatch(request, project_id=project_id, *args, **kwargs)
 
@@ -113,6 +113,12 @@ class APIView(BaseView):
 
         return response
 
+    def get_request_origin(self, request):
+        """
+        Returns either the Origin or Referer value from the request headers.
+        """
+        return request.META.get('HTTP_ORIGIN', request.META.get('HTTP_REFERER'))
+
     def _dispatch(self, request, project_id=None, *args, **kwargs):
         request.user = AnonymousUser()
 
@@ -121,7 +127,7 @@ class APIView(BaseView):
         except APIError, e:
             return HttpResponse(str(e), status=400)
 
-        origin = request.META.get('HTTP_ORIGIN', None)
+        origin = self.get_request_origin(request)
         if origin is not None:
             if not project:
                 return HttpResponse('Your client must be upgraded for CORS support.')
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 59d3d0ce05..502aa5cc8b 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -33,6 +33,7 @@ class StoreViewTest(TestCase):
         self.assertIn('Content-Length', resp)
         self.assertEquals(resp['Content-Length'], '0')
 
+    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=False))
     def test_options_response_with_invalid_origin(self):
         resp = self.client.options(self.path, HTTP_ORIGIN='http://foo.com')
         self.assertEquals(resp.status_code, 400)
@@ -42,14 +43,30 @@ class StoreViewTest(TestCase):
         self.assertEquals(resp['X-Sentry-Error'], "Invalid origin: 'http://foo.com'")
         self.assertEquals(resp.content, resp['X-Sentry-Error'])
 
-    @mock.patch('sentry.web.api.is_valid_origin')
-    def test_options_response_with_valid_origin(self, is_valid_origin):
-        is_valid_origin.return_value = True
+    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=False))
+    def test_options_response_with_invalid_referrer(self):
+        resp = self.client.options(self.path, HTTP_REFERER='http://foo.com')
+        self.assertEquals(resp.status_code, 400)
+        self.assertIn('Access-Control-Allow-Origin', resp)
+        self.assertEquals(resp['Access-Control-Allow-Origin'], '*')
+        self.assertIn('X-Sentry-Error', resp)
+        self.assertEquals(resp['X-Sentry-Error'], "Invalid origin: 'http://foo.com'")
+        self.assertEquals(resp.content, resp['X-Sentry-Error'])
+
+    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))
+    def test_options_response_with_valid_origin(self):
         resp = self.client.options(self.path, HTTP_ORIGIN='http://foo.com')
         self.assertEquals(resp.status_code, 200)
         self.assertIn('Access-Control-Allow-Origin', resp)
         self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')
 
+    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))
+    def test_options_response_with_valid_referrer(self):
+        resp = self.client.options(self.path, HTTP_REFERER='http://foo.com')
+        self.assertEquals(resp.status_code, 200)
+        self.assertIn('Access-Control-Allow-Origin', resp)
+        self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')
+
 
 class CrossDomainXmlTest(TestCase):
     @fixture
