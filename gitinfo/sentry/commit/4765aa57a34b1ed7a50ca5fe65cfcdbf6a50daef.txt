commit 4765aa57a34b1ed7a50ca5fe65cfcdbf6a50daef
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Apr 10 13:08:36 2020 -0700

    fix(subscriptions): Force subscriptions to the `EVENTS` dataset to be of type `error. (#18175)
    
    Since the event dataset contains transactions, we need to restrict the data we're querying to only
    errors, which is the `error` type. We may also include 'default' here at some point, but this is
    trickier since we don't have an easy way to query for both types in a discover query.

diff --git a/src/sentry/snuba/tasks.py b/src/sentry/snuba/tasks.py
index 7b295d1d78..c645cdac72 100644
--- a/src/sentry/snuba/tasks.py
+++ b/src/sentry/snuba/tasks.py
@@ -107,6 +107,11 @@ def _create_in_snuba(subscription):
     environments = list(subscription.environments.all())
     if environments:
         conditions.append(["environment", "IN", [env.name for env in environments]])
+    if subscription.dataset == QueryDatasets.EVENTS.value:
+        # TODO: If we want to support security events here we'll need a way to
+        # differentiate within the dataset. For now we can just assume all subscriptions
+        # created within this dataset are just for errors.
+        conditions.append(["type", "=", "error"])
     response = _snuba_pool.urlopen(
         "POST",
         "/%s/subscriptions" % (subscription.dataset,),
diff --git a/tests/sentry/snuba/test_tasks.py b/tests/sentry/snuba/test_tasks.py
index 9684d7cf94..f02601c6f5 100644
--- a/tests/sentry/snuba/test_tasks.py
+++ b/tests/sentry/snuba/test_tasks.py
@@ -1,9 +1,12 @@
 from __future__ import absolute_import
 
 import abc
+import json
 from uuid import uuid4
 
+import responses
 from exam import patcher
+from mock import Mock, patch
 from six import add_metaclass
 
 from sentry.snuba.models import QueryAggregations, QueryDatasets, QuerySubscription
@@ -86,6 +89,19 @@ class CreateSubscriptionInSnubaTest(BaseSnubaTaskTest, TestCase):
         assert sub.status == QuerySubscription.Status.ACTIVE.value
         assert sub.subscription_id is not None
 
+    @responses.activate
+    def test_adds_type(self):
+        sub = self.create_subscription(QuerySubscription.Status.CREATING)
+        with patch("sentry.snuba.tasks._snuba_pool") as pool:
+            resp = Mock()
+            resp.status = 202
+            resp.data = json.dumps({"subscription_id": "123"})
+            pool.urlopen.return_value = resp
+
+            create_subscription_in_snuba(sub.id)
+            request_body = json.loads(pool.urlopen.call_args[1]["body"])
+            assert ["type", "=", "error"] in request_body["conditions"]
+
 
 class UpdateSubscriptionInSnubaTest(BaseSnubaTaskTest, TestCase):
     expected_status = QuerySubscription.Status.UPDATING
