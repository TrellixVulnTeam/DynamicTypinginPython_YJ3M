commit b0031df71f3655e98823df5be1f39123fd511516
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Apr 15 12:26:36 2019 -0700

    ref(releases): Refactored Releases Serializers (#12535)
    
    * refactored releases and added restriction that latest cannot be a ref or version name.
    
    * moved release_head_commit to release.py because that's the only place it is used now.
    
    * Fixed the missing fields.
    
    * got org release details and org releases tests to work.
    
    * ensured project release tests worked
    
    * Added project release details and fixed the tests.
    
    * removed ref check.

diff --git a/src/sentry/api/endpoints/organization_release_details.py b/src/sentry/api/endpoints/organization_release_details.py
index ab41522b04..06253a7cdd 100644
--- a/src/sentry/api/endpoints/organization_release_details.py
+++ b/src/sentry/api/endpoints/organization_release_details.py
@@ -1,21 +1,14 @@
 from __future__ import absolute_import
 
-from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
 from sentry.api.exceptions import InvalidRepository, ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.api.serializers.rest_framework import (
-    CommitSerializer,
-    ListField,
-    ReleaseHeadCommitSerializerDeprecated,
-    ReleaseHeadCommitSerializer,
-)
+from sentry.api.serializers.rest_framework import ListField, ReleaseSerializer, ReleaseHeadCommitSerializer, ReleaseHeadCommitSerializerDeprecated
 from sentry.models import Activity, Group, Release, ReleaseFile
 from sentry.utils.apidocs import scenario, attach_scenarios
-from sentry.constants import VERSION_LENGTH
 
 ERR_RELEASE_REFERENCED = "This release is referenced by active issues and cannot be removed."
 
@@ -41,13 +34,11 @@ def update_organization_release_scenario(runner):
     )
 
 
-class ReleaseSerializer(serializers.Serializer):
-    ref = serializers.CharField(max_length=VERSION_LENGTH, required=False)
-    url = serializers.URLField(required=False)
-    dateReleased = serializers.DateTimeField(required=False)
-    commits = ListField(child=CommitSerializer(), required=False, allow_null=False)
+class OrganizationReleaseSerializer(ReleaseSerializer):
     headCommits = ListField(
-        child=ReleaseHeadCommitSerializerDeprecated(), required=False, allow_null=False
+        child=ReleaseHeadCommitSerializerDeprecated(),
+        required=False,
+        allow_null=False
     )
     refs = ListField(
         child=ReleaseHeadCommitSerializer(),
@@ -129,7 +120,7 @@ class OrganizationReleaseDetailsEndpoint(OrganizationReleasesBaseEndpoint):
         if not self.has_release_permission(request, organization, release):
             raise ResourceDoesNotExist
 
-        serializer = ReleaseSerializer(data=request.DATA)
+        serializer = OrganizationReleaseSerializer(data=request.DATA)
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index c1adc1bf0e..0f7915ea19 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -5,14 +5,13 @@ from django.db import IntegrityError, transaction
 from rest_framework.response import Response
 
 from sentry.api.bases import NoProjects, OrganizationEventsError
-from .project_releases import ReleaseSerializer
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
 from sentry.api.exceptions import InvalidRepository
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import (
-    ReleaseHeadCommitSerializer, ReleaseHeadCommitSerializerDeprecated, ListField
+    ReleaseHeadCommitSerializer, ReleaseHeadCommitSerializerDeprecated, ReleaseWithVersionSerializer, ListField
 )
 from sentry.models import Activity, Release
 from sentry.signals import release_created
@@ -64,12 +63,12 @@ def list_org_releases_scenario(runner):
     runner.request(method='GET', path='/organizations/%s/releases/' % (runner.org.slug, ))
 
 
-class ReleaseSerializerWithProjects(ReleaseSerializer):
+class ReleaseSerializerWithProjects(ReleaseWithVersionSerializer):
     projects = ListField()
     headCommits = ListField(
         child=ReleaseHeadCommitSerializerDeprecated(),
         required=False,
-        allow_null=False,
+        allow_null=False
     )
     refs = ListField(
         child=ReleaseHeadCommitSerializer(),
diff --git a/src/sentry/api/endpoints/project_release_details.py b/src/sentry/api/endpoints/project_release_details.py
index 721bce10a8..8055a088bf 100644
--- a/src/sentry/api/endpoints/project_release_details.py
+++ b/src/sentry/api/endpoints/project_release_details.py
@@ -1,24 +1,17 @@
 from __future__ import absolute_import
 
-from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.api.serializers.rest_framework import CommitSerializer, ListField
+from sentry.api.serializers.rest_framework import ReleaseSerializer
+
 from sentry.models import Activity, Group, Release, ReleaseFile
 from sentry.plugins.interfaces.releasehook import ReleaseHook
-from sentry.constants import VERSION_LENGTH
-
-ERR_RELEASE_REFERENCED = "This release is referenced by active issues and cannot be removed."
 
 
-class ReleaseSerializer(serializers.Serializer):
-    ref = serializers.CharField(max_length=VERSION_LENGTH, required=False)
-    url = serializers.URLField(required=False)
-    dateReleased = serializers.DateTimeField(required=False)
-    commits = ListField(child=CommitSerializer(), required=False, allow_null=False)
+ERR_RELEASE_REFERENCED = "This release is referenced by active issues and cannot be removed."
 
 
 class ProjectReleaseDetailsEndpoint(ProjectEndpoint):
diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 107c660a71..74545319ef 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -2,64 +2,22 @@ from __future__ import absolute_import
 
 from django.db import IntegrityError, transaction
 
-from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry.api.base import EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.paginator import OffsetPaginator
-from sentry.api.fields.user import UserField
 from sentry.api.serializers import serialize
-from sentry.api.serializers.rest_framework import CommitSerializer, ListField
+from sentry.api.serializers.rest_framework import ReleaseWithVersionSerializer
 from sentry.models import (
     Activity,
-    CommitFileChange,
     Environment,
     Release,
 )
 from sentry.plugins.interfaces.releasehook import ReleaseHook
-from sentry.constants import VERSION_LENGTH
 from sentry.signals import release_created
 
 
-class CommitPatchSetSerializer(serializers.Serializer):
-    path = serializers.CharField(max_length=255)
-    type = serializers.CharField(max_length=1)
-
-    def validate_type(self, attrs, source):
-        value = attrs[source]
-        if not CommitFileChange.is_valid_type(value):
-            raise serializers.ValidationError('Commit patch_set type %s is not supported.' % value)
-        return attrs
-
-
-class CommitSerializerWithPatchSet(CommitSerializer):
-    patch_set = ListField(
-        child=CommitPatchSetSerializer(
-            required=False),
-        required=False,
-        allow_null=True)
-
-
-class ReleaseSerializer(serializers.Serializer):
-    version = serializers.CharField(max_length=VERSION_LENGTH, required=True)
-    ref = serializers.CharField(max_length=VERSION_LENGTH, required=False)
-    url = serializers.URLField(required=False)
-    owner = UserField(required=False)
-    dateReleased = serializers.DateTimeField(required=False)
-    commits = ListField(
-        child=CommitSerializerWithPatchSet(
-            required=False),
-        required=False,
-        allow_null=True)
-
-    def validate_version(self, attrs, source):
-        value = attrs[source]
-        if not Release.is_valid_version(value):
-            raise serializers.ValidationError('Invalid value for release')
-        return attrs
-
-
 class ProjectReleasesEndpoint(ProjectEndpoint, EnvironmentMixin):
     permission_classes = (ProjectReleasePermission, )
 
@@ -146,7 +104,7 @@ class ProjectReleasesEndpoint(ProjectEndpoint, EnvironmentMixin):
                                       the current time is assumed.
         :auth: required
         """
-        serializer = ReleaseSerializer(data=request.DATA)
+        serializer = ReleaseWithVersionSerializer(data=request.DATA)
 
         if serializer.is_valid():
             result = serializer.object
diff --git a/src/sentry/api/serializers/rest_framework/commit.py b/src/sentry/api/serializers/rest_framework/commit.py
index 93699c55b6..2d78c21b38 100644
--- a/src/sentry/api/serializers/rest_framework/commit.py
+++ b/src/sentry/api/serializers/rest_framework/commit.py
@@ -1,6 +1,19 @@
 from __future__ import absolute_import
 
 from rest_framework import serializers
+from sentry.api.serializers.rest_framework.list import ListField
+from sentry.models import CommitFileChange
+
+
+class CommitPatchSetSerializer(serializers.Serializer):
+    path = serializers.CharField(max_length=255)
+    type = serializers.CharField(max_length=1)
+
+    def validate_type(self, attrs, source):
+        value = attrs[source]
+        if not CommitFileChange.is_valid_type(value):
+            raise serializers.ValidationError('Commit patch_set type %s is not supported.' % value)
+        return attrs
 
 
 class CommitSerializer(serializers.Serializer):
@@ -10,3 +23,8 @@ class CommitSerializer(serializers.Serializer):
     author_name = serializers.CharField(max_length=128, required=False)
     author_email = serializers.EmailField(max_length=75, required=False)
     timestamp = serializers.DateTimeField(required=False)
+    patch_set = ListField(
+        child=CommitPatchSetSerializer(required=False),
+        required=False,
+        allow_null=True,
+    )
diff --git a/src/sentry/api/serializers/rest_framework/release.py b/src/sentry/api/serializers/rest_framework/release.py
new file mode 100644
index 0000000000..c0067dffc6
--- /dev/null
+++ b/src/sentry/api/serializers/rest_framework/release.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+
+from sentry.api.serializers.rest_framework import CommitSerializer, ListField
+from sentry.api.fields.user import UserField
+from sentry.constants import VERSION_LENGTH
+from sentry.models import Release
+
+
+class ReleaseHeadCommitSerializerDeprecated(serializers.Serializer):
+    currentId = serializers.CharField(max_length=64)
+    repository = serializers.CharField(max_length=64)
+    previousId = serializers.CharField(max_length=64, required=False)
+
+
+class ReleaseHeadCommitSerializer(serializers.Serializer):
+    commit = serializers.CharField(max_length=64)
+    repository = serializers.CharField(max_length=64)
+    previousCommit = serializers.CharField(max_length=64, required=False)
+
+
+class ReleaseSerializer(serializers.Serializer):
+    ref = serializers.CharField(max_length=VERSION_LENGTH, required=False)
+    url = serializers.URLField(required=False)
+    dateReleased = serializers.DateTimeField(required=False)
+    commits = ListField(child=CommitSerializer(), required=False, allow_null=False)
+
+
+class ReleaseWithVersionSerializer(ReleaseSerializer):
+    version = serializers.CharField(max_length=VERSION_LENGTH, required=True)
+    owner = UserField(required=False)
+
+    def validate_version(self, attrs, source):
+        value = attrs[source]
+        if not Release.is_valid_version(value):
+            raise serializers.ValidationError('Release with name %s is not allowed' % value)
+        return attrs
diff --git a/src/sentry/api/serializers/rest_framework/release_head_commit.py b/src/sentry/api/serializers/rest_framework/release_head_commit.py
deleted file mode 100644
index 26c436b2a4..0000000000
--- a/src/sentry/api/serializers/rest_framework/release_head_commit.py
+++ /dev/null
@@ -1,15 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework import serializers
-
-
-class ReleaseHeadCommitSerializerDeprecated(serializers.Serializer):
-    currentId = serializers.CharField(max_length=64)
-    repository = serializers.CharField(max_length=64)
-    previousId = serializers.CharField(max_length=64, required=False)
-
-
-class ReleaseHeadCommitSerializer(serializers.Serializer):
-    commit = serializers.CharField(max_length=64)
-    repository = serializers.CharField(max_length=64)
-    previousCommit = serializers.CharField(max_length=64, required=False)
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 438d80f187..55adf9ddc1 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -97,7 +97,8 @@ class Release(Model):
     @staticmethod
     def is_valid_version(value):
         return not (any(c in value for c in BAD_RELEASE_CHARS)
-                    or value in ('.', '..') or not value)
+                    or value in ('.', '..') or not value
+                    or value.lower() == 'latest')
 
     @classmethod
     def get_cache_key(cls, organization_id, version):
diff --git a/tests/sentry/api/endpoints/test_organization_release_details.py b/tests/sentry/api/endpoints/test_organization_release_details.py
index 81924a1e30..0b72d84fe3 100644
--- a/tests/sentry/api/endpoints/test_organization_release_details.py
+++ b/tests/sentry/api/endpoints/test_organization_release_details.py
@@ -9,7 +9,7 @@ from sentry.models import (
     Activity, Environment, File, Release, ReleaseCommit, ReleaseFile, ReleaseProject, ReleaseProjectEnvironment, Repository
 )
 from sentry.testutils import APITestCase
-from sentry.api.endpoints.organization_release_details import ReleaseSerializer
+from sentry.api.endpoints.organization_release_details import OrganizationReleaseSerializer
 
 
 class ReleaseDetailsTest(APITestCase):
@@ -715,7 +715,7 @@ class ReleaseSerializerTest(unittest.TestCase):
         ]
 
     def test_simple(self):
-        serializer = ReleaseSerializer(data={
+        serializer = OrganizationReleaseSerializer(data={
             'ref': self.ref,
             'url': self.url,
             'dateReleased': self.dateReleased,
@@ -737,33 +737,33 @@ class ReleaseSerializerTest(unittest.TestCase):
         assert result['refs'] == self.refs
 
     def test_fields_not_required(self):
-        serializer = ReleaseSerializer(data={})
+        serializer = OrganizationReleaseSerializer(data={})
         assert serializer.is_valid()
 
     def test_do_not_allow_null_commits(self):
-        serializer = ReleaseSerializer(data={
+        serializer = OrganizationReleaseSerializer(data={
             'commits': None,
         })
         assert not serializer.is_valid()
 
     def test_do_not_allow_null_head_commits(self):
-        serializer = ReleaseSerializer(data={
+        serializer = OrganizationReleaseSerializer(data={
             'headCommits': None,
         })
         assert not serializer.is_valid()
 
     def test_do_not_allow_null_refs(self):
-        serializer = ReleaseSerializer(data={
+        serializer = OrganizationReleaseSerializer(data={
             'refs': None,
         })
         assert not serializer.is_valid()
 
     def test_ref_limited_by_max_version_length(self):
-        serializer = ReleaseSerializer(data={
+        serializer = OrganizationReleaseSerializer(data={
             'ref': 'a' * VERSION_LENGTH,
         })
         assert serializer.is_valid()
-        serializer = ReleaseSerializer(data={
+        serializer = OrganizationReleaseSerializer(data={
             'ref': 'a' * (VERSION_LENGTH + 1),
         })
         assert not serializer.is_valid()
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 01057863c4..88b9ec522a 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -1500,3 +1500,10 @@ class ReleaseSerializerWithProjectsTest(TestCase):
             'projects': self.projects,
         })
         assert not serializer.is_valid()
+
+    def test_version_cannot_be_latest(self):
+        serializer = ReleaseSerializerWithProjects(data={
+            'version': 'Latest',
+            'projects': self.projects,
+        })
+        assert not serializer.is_valid()
diff --git a/tests/sentry/api/endpoints/test_project_releases.py b/tests/sentry/api/endpoints/test_project_releases.py
index a1e55a1cd7..d8f5ee2fbb 100644
--- a/tests/sentry/api/endpoints/test_project_releases.py
+++ b/tests/sentry/api/endpoints/test_project_releases.py
@@ -5,7 +5,7 @@ from django.utils import timezone
 from django.core.urlresolvers import reverse
 from exam import fixture
 
-from sentry.api.endpoints.project_releases import ReleaseSerializer
+from sentry.api.endpoints.project_releases import ReleaseWithVersionSerializer
 from sentry.constants import VERSION_LENGTH
 from sentry.models import (
     BAD_RELEASE_CHARS,
@@ -707,7 +707,7 @@ class ReleaseSerializerTest(TestCase):
         self.dateReleased = '1000-10-10T06:06'
 
     def test_simple(self):
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': self.version,
             'owner': self.user.username,
             'ref': self.ref,
@@ -730,61 +730,67 @@ class ReleaseSerializerTest(TestCase):
         assert result['commits'] == self.commits
 
     def test_fields_not_required(self):
-        serializer = ReleaseSerializer(data={'version': self.version})
+        serializer = ReleaseWithVersionSerializer(data={'version': self.version})
         assert serializer.is_valid()
 
     def test_do_not_allow_null_commits(self):
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': self.version,
             'commits': None,
         })
         assert not serializer.is_valid()
 
     def test_ref_limited_by_max_version_length(self):
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': self.version,
             'ref': 'a' * VERSION_LENGTH,
         })
         assert serializer.is_valid()
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': self.version,
             'ref': 'a' * (VERSION_LENGTH + 1),
         })
         assert not serializer.is_valid()
 
     def test_version_limited_by_max_version_length(self):
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': 'a' * VERSION_LENGTH,
         })
         assert serializer.is_valid()
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': 'a' * (VERSION_LENGTH + 1),
         })
         assert not serializer.is_valid()
 
     def test_version_does_not_allow_whitespace(self):
         for char in BAD_RELEASE_CHARS:
-            serializer = ReleaseSerializer(data={
+            serializer = ReleaseWithVersionSerializer(data={
                 'version': char,
             })
             assert not serializer.is_valid()
 
     def test_version_does_not_allow_current_dir_path(self):
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': '.',
         })
         assert not serializer.is_valid()
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': '..',
         })
         assert not serializer.is_valid()
 
     def test_version_does_not_allow_null_or_empty_value(self):
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': None,
         })
         assert not serializer.is_valid()
-        serializer = ReleaseSerializer(data={
+        serializer = ReleaseWithVersionSerializer(data={
             'version': '',
         })
         assert not serializer.is_valid()
+
+    def test_version_cannot_be_latest(self):
+        serializer = ReleaseWithVersionSerializer(data={
+            'version': 'Latest',
+        })
+        assert not serializer.is_valid()
