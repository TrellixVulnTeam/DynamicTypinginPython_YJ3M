commit d7c1e44fe5eb43eb304add42369ef6c955e76d1a
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jun 19 14:11:50 2019 -0700

    Filtered out special aggregations in original snuba_args method. (#13731)

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 43a171ee8f..591a5a3322 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -61,6 +61,14 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
         except InvalidSearchQuery as exc:
             raise OrganizationEventsError(exc.message)
 
+        # Filter out special aggregates.
+        conditions = []
+        for condition in snuba_args.get('conditions', []):
+            field_name = condition[0]
+            if isinstance(field_name, (list, tuple)) or field_name not in SPECIAL_FIELDS:
+                conditions.append(condition)
+        snuba_args['conditions'] = conditions
+
         # TODO(lb): remove once boolean search is fully functional
         has_boolean_op_flag = features.has(
             'organizations:boolean-search',
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 93726d812c..69c804a1ed 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -809,6 +809,28 @@ class OrganizationEventsStatsEndpointTest(OrganizationEventsTestBase):
             [{'count': 2}],
         ]
 
+    def test_special_fields_ignored(self):
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        response = self.client.get('%s?%s' % (url, urlencode({
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'interval': '1h',
+            'yAxis': 'event_count',
+            'query': 'event_count:>5'
+        })), format='json')
+
+        assert response.status_code == 200, response.content
+        assert [attrs for time, attrs in response.data['data']] == [
+            [],
+            [{'count': 1}],
+            [{'count': 2}],
+        ]
+
 
 class OrganizationEventsHeatmapEndpointTest(OrganizationEventsTestBase):
     def setUp(self):
@@ -1646,6 +1668,32 @@ class OrganizationEventsHeatmapEndpointTest(OrganizationEventsTestBase):
             'lastSeen': self.min_ago_iso, 'key': 'color', 'firstSeen': self.min_ago_iso
         }
 
+    def test_special_fields_ignored(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago_iso,
+                'tags': {'color': 'yellow'}
+            },
+            project_id=self.project2.id
+        )
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'key': ['color'], 'query': 'user_count:>5'}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [{
+                'count': 1, 'name': 'yellow', 'value': 'yellow',
+                'lastSeen': self.min_ago_iso, 'key': 'color', 'firstSeen': self.min_ago_iso
+            }],
+            'totalValues': 1,
+            'name': 'Color',
+            'key': 'color'
+        }
+
     def test_malformed_query(self):
         self.store_event(
             data={
