commit d6cd8ed49d8c1b5e31afc2333a8c287af781a47e
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Thu Mar 19 14:52:37 2020 -0700

    feat(workflow): Issue Alerts Targeting/Render Action (#17570)
    
    Support rendering targeted mail action
    
    ### Problem
    Issue alerts cannot be directed to specific users or teams. By default they go to project owners (which in most cases isn't set up), and fall through to all members of all teams associated with the project, which creates a noise problem.
    
    ### Solution
    Provide granular targets for mail action to reduce the amount of inbox noise.
    Please view screencast for implemented render: https://drive.google.com/file/d/1gcWFNUHPlUgrmEnoeyPUE8drTaku9PBW/view
    
    #### Changes
    - Add `thin` option to `alert` component
    - Expose `styles` prop from `SelectMembers` component
    - Add `ActorAwareFields` to handle configurations for notify mail action
    - Extend `RuleNode` to handle notify mail action
      - Add Alert Banners that explains `Issue Owners` and `Member` targets
    
    ### Feature Flags
    No feature flags are used for this portion of the feature; as this PR will only render the new action if the endpoint provides it.
    Furthermore, if a rule already has the new targeted mail action, the action should still be rendered. This is so that the user is aware that the action exists, and also provide the user the capability to configure / delete the action.
    
    ### TODO
    - Change options text in action selector
    - Change action descriptors in issue editor
    
    ### Related changes
    - Remove send notification to {service}, where service is `mail`, as an option https://github.com/getsentry/sentry/pull/17599
    - Add Solo Mail Action with Targeting https://github.com/getsentry/sentry/pull/17571
    
    Feature doc: https://www.notion.so/sentry/Issue-Alert-Targeting-30805fa4d233467ab2edb3eb98fce25e

diff --git a/src/sentry/static/sentry/app/components/alert.tsx b/src/sentry/static/sentry/app/components/alert.tsx
index 20d92e96e1..8a5efe4b61 100644
--- a/src/sentry/static/sentry/app/components/alert.tsx
+++ b/src/sentry/static/sentry/app/components/alert.tsx
@@ -16,6 +16,7 @@ export type Props = {
   icon?: string;
   alignTop?: boolean;
   system?: boolean;
+  thinner?: boolean;
 };
 
 type AlertProps = Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props;
@@ -63,10 +64,11 @@ const alertStyles = ({
   type = DEFAULT_TYPE,
   system,
   alignTop,
+  thinner,
 }: Props & {theme: any}) => css`
   display: flex;
   margin: 0 0 ${space(3)};
-  padding: ${space(2)};
+  padding: ${space(thinner ? 1 : 2)};
   font-size: 15px;
   box-shadow: ${theme.dropShadowLight};
   border-radius: ${theme.borderRadius};
@@ -91,7 +93,16 @@ const StyledTextBlock = styled(TextBlock)`
 `;
 
 const Alert = styled(
-  ({type, icon, iconSize, children, system, className, ...props}: AlertProps) => (
+  ({
+    type,
+    icon,
+    iconSize,
+    children,
+    system,
+    className,
+    thinner,
+    ...props
+  }: AlertProps) => (
     <div className={classNames(type ? `ref-${type}` : '', className)} {...props}>
       {icon && <StyledInlineSvg src={icon} size={iconSize!} />}
       <StyledTextBlock>{children}</StyledTextBlock>
@@ -107,6 +118,7 @@ Alert.propTypes = {
   icon: PropTypes.string,
   alignTop: PropTypes.bool,
   system: PropTypes.bool,
+  thinner: PropTypes.bool,
 };
 
 Alert.defaultProps = {
diff --git a/src/sentry/static/sentry/app/components/selectMembers/index.tsx b/src/sentry/static/sentry/app/components/selectMembers/index.tsx
index 4dd945016c..efb28dba58 100644
--- a/src/sentry/static/sentry/app/components/selectMembers/index.tsx
+++ b/src/sentry/static/sentry/app/components/selectMembers/index.tsx
@@ -57,6 +57,7 @@ type Props = {
   onInputChange?: (value: any) => any;
   disabled?: boolean;
   placeholder?: string;
+  styles?: {control?: (provided: any) => any};
 };
 
 type State = {
@@ -83,6 +84,9 @@ class SelectMembers extends React.Component<Props, State> {
     onChange: PropTypes.func.isRequired,
     onInputChange: PropTypes.func,
     disabled: PropTypes.bool,
+    styles: PropTypes.shape({
+      control: PropTypes.func,
+    }),
   };
 
   state: State = {
@@ -330,7 +334,7 @@ class SelectMembers extends React.Component<Props, State> {
   };
 
   render() {
-    const {placeholder} = this.props;
+    const {placeholder, styles} = this.props;
 
     // If memberList is still loading we need to disable a placeholder Select,
     // otherwise `react-select` will call `loadOptions` and prematurely load
@@ -355,6 +359,7 @@ class SelectMembers extends React.Component<Props, State> {
         onInputChange={this.handleInputChange}
         onChange={this.handleChange}
         value={this.state.options?.find(({value}) => value === this.props.value)}
+        styles={styles}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/types/alerts.tsx b/src/sentry/static/sentry/app/types/alerts.tsx
index b195f0ef5b..0a72b5931b 100644
--- a/src/sentry/static/sentry/app/types/alerts.tsx
+++ b/src/sentry/static/sentry/app/types/alerts.tsx
@@ -63,3 +63,9 @@ export type IssueAlertRule = UnsavedIssueAlertRule & {
   dateCreated: string;
   id: string;
 };
+
+export enum MailActionTargetType {
+  IssueOwners = 'IssueOwners',
+  Team = 'Team',
+  Member = 'Member',
+}
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index 43b3af0ec2..8b8223cafc 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -302,6 +302,7 @@ class IssueRuleEditor extends AsyncView<Props, State> {
   }
 
   renderBody() {
+    const {project, organization} = this.props;
     const {environments} = this.state;
     const environmentChoices = [
       [ALL_ENVIRONMENTS_KEY, t('All Environments')],
@@ -407,6 +408,8 @@ class IssueRuleEditor extends AsyncView<Props, State> {
                   onPropertyChange={this.handleChangeConditionProperty}
                   onAddRow={this.handleAddCondition}
                   onDeleteRow={this.handleDeleteCondition}
+                  organization={organization}
+                  project={project}
                 />
               </PanelRuleItem>
 
@@ -426,6 +429,8 @@ class IssueRuleEditor extends AsyncView<Props, State> {
                   onPropertyChange={this.handleChangeActionProperty}
                   onAddRow={this.handleAddAction}
                   onDeleteRow={this.handleDeleteAction}
+                  organization={organization}
+                  project={project}
                 />
               </PanelRuleItem>
             </PanelBody>
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/mailActionFields.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/mailActionFields.tsx
new file mode 100644
index 0000000000..3cb3e6596a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/mailActionFields.tsx
@@ -0,0 +1,109 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import SelectMembers from 'app/components/selectMembers';
+import SelectControl from 'app/components/forms/selectControl';
+import {Organization, Project} from 'app/types';
+import {IssueAlertRuleAction, MailActionTargetType} from 'app/types/alerts';
+import {PanelItem} from 'app/components/panels';
+import space from 'app/styles/space';
+
+type Props = {
+  project: Project;
+  organization: Organization;
+  disabled: boolean;
+  loading: boolean;
+  action: IssueAlertRuleAction;
+  onChange: (action: IssueAlertRuleAction) => void;
+};
+
+interface OptionRecord {
+  value: string;
+  label: string;
+}
+
+class MailActionFields extends React.Component<Props> {
+  handleChange = (attribute: 'targetType' | 'targetIdentifier', newValue: string) => {
+    const {onChange, action} = this.props;
+    if (newValue === action[attribute]) {
+      return;
+    }
+    const newAction = {
+      ...action,
+      [attribute]: newValue,
+    };
+    /**
+     * TargetIdentifiers between the targetTypes are not unique, and may wrongly map to something that has not been
+     * selected. E.g. A member and project can both have the `targetIdentifier`, `'2'`. Hence we clear the identifier.
+     **/
+    if (attribute === 'targetType') {
+      newAction.targetIdentifier = '';
+    }
+    onChange(newAction);
+  };
+
+  handleChangeActorType = (optionRecord: OptionRecord) => {
+    this.handleChange('targetType', optionRecord.value);
+  };
+
+  handleChangeActorId = (optionRecord: OptionRecord & {[key: string]: any}) => {
+    this.handleChange('targetIdentifier', optionRecord.value);
+  };
+
+  render(): React.ReactElement {
+    const {disabled, loading, project, organization, action} = this.props;
+
+    const isIssueOwners = action.targetType === MailActionTargetType.IssueOwners;
+    const isTeam = action.targetType === MailActionTargetType.Team;
+
+    const selectControlStyles = {
+      control: provided => ({
+        ...provided,
+        minHeight: '28px',
+        height: '28px',
+      }),
+    };
+
+    return (
+      <PanelItemGrid>
+        <SelectControl
+          isClearable={false}
+          isDisabled={disabled || loading}
+          value={action.targetType}
+          styles={selectControlStyles}
+          options={[
+            {value: MailActionTargetType.IssueOwners, label: 'Issue Owners'},
+            {value: MailActionTargetType.Team, label: 'Team'},
+            {value: MailActionTargetType.Member, label: 'Member'},
+          ]}
+          onChange={this.handleChangeActorType}
+        />
+        {!isIssueOwners ? (
+          <SelectMembers
+            disabled={disabled}
+            key={isTeam ? MailActionTargetType.Team : MailActionTargetType.Member}
+            showTeam={isTeam}
+            project={project}
+            organization={organization}
+            // The value from the endpoint is of type `number`, `SelectMembers` require value to be of type `string`
+            value={`${action.targetIdentifier}`}
+            styles={selectControlStyles}
+            onChange={this.handleChangeActorId}
+          />
+        ) : (
+          <span />
+        )}
+      </PanelItemGrid>
+    );
+  }
+}
+
+const PanelItemGrid = styled(PanelItem)`
+  display: grid;
+  grid-template-columns: 200px 200px;
+  padding: 0;
+  align-items: center;
+  grid-gap: ${space(2)};
+`;
+
+export default MailActionFields;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
index 53a5a2b0fc..a3ec089e08 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
@@ -6,12 +6,17 @@ import {
   IssueAlertRuleActionTemplate,
   IssueAlertRuleCondition,
   IssueAlertRuleConditionTemplate,
+  MailActionTargetType,
 } from 'app/types/alerts';
-import {t} from 'app/locale';
+import Alert from 'app/components/alert';
 import Button from 'app/components/button';
 import Input from 'app/views/settings/components/forms/controls/input';
 import SelectControl from 'app/components/forms/selectControl';
 import space from 'app/styles/space';
+import {t, tct} from 'app/locale';
+import MailActionFields from 'app/views/settings/projectAlerts/issueEditor/mailActionFields';
+import ExternalLink from 'app/components/links/externalLink';
+import {Organization, Project} from 'app/types';
 
 type FormField = {
   // Type of form fields
@@ -24,6 +29,8 @@ type Props = {
   index: number;
   node?: IssueAlertRuleActionTemplate | IssueAlertRuleConditionTemplate | null;
   data?: IssueAlertRuleAction | IssueAlertRuleCondition;
+  project: Project;
+  organization: Organization;
   onDelete: (rowIndex: number) => void;
   onPropertyChange: (rowIndex: number, name: string, value: string) => void;
 };
@@ -34,6 +41,12 @@ class RuleNode extends React.Component<Props> {
     onDelete(index);
   };
 
+  handleMailActionChange = (action: IssueAlertRuleAction) => {
+    const {index, onPropertyChange} = this.props;
+    onPropertyChange(index, 'targetType', `${action.targetType}`);
+    onPropertyChange(index, 'targetIdentifier', `${action.targetIdentifier}`);
+  };
+
   getChoiceField = (name: string, fieldConfig: FormField) => {
     // Select the first item on this list
     // If it's not yet defined, call onPropertyChange to make sure the value is set on state
@@ -110,11 +123,28 @@ class RuleNode extends React.Component<Props> {
     );
   };
 
+  getMailActionFields = (_: string, __: FormField) => {
+    const {data, organization, project} = this.props;
+    const isInitialized =
+      data?.targetType !== undefined && `${data.targetType}`.length > 0;
+    return (
+      <MailActionFields
+        disabled={false}
+        project={project}
+        organization={organization}
+        loading={!isInitialized}
+        action={data as IssueAlertRuleAction}
+        onChange={this.handleMailActionChange}
+      />
+    );
+  };
+
   getField = (name: string, fieldConfig: FormField) => {
     const getFieldTypes = {
       choice: this.getChoiceField,
       number: this.getNumberField,
       string: this.getTextField,
+      mailAction: this.getMailActionFields,
     };
     return getFieldTypes[fieldConfig.type](name, fieldConfig);
   };
@@ -161,21 +191,78 @@ class RuleNode extends React.Component<Props> {
     );
   }
 
+  conditionallyRenderHelpfulBanner() {
+    const {data, project, organization} = this.props;
+    /**
+     * Would prefer to check if data is of `IssueAlertRuleAction` type, however we can't do typechecking at runtime as
+     * user defined types are erased through transpilation.
+     * Instead, we apply duck typing semantics here.
+     * See: https://stackoverflow.com/questions/51528780/typescript-check-typeof-against-custom-type
+     */
+    if (!data?.targetType) {
+      return null;
+    }
+
+    switch (data.targetType) {
+      case MailActionTargetType.IssueOwners:
+        return (
+          <MarginlessAlert thinner type="warning">
+            {tct(
+              'If there are no matching [issueOwners], ownership is determined by the [ownershipSettings].',
+              {
+                issueOwners: (
+                  <ExternalLink href="https://docs.sentry.io/workflow/issue-owners/">
+                    {t('issue owners')}
+                  </ExternalLink>
+                ),
+                ownershipSettings: (
+                  <ExternalLink
+                    href={`/settings/${organization.slug}/projects/${project.slug}/ownership/`}
+                  >
+                    {t('ownership settings')}
+                  </ExternalLink>
+                ),
+              }
+            )}
+          </MarginlessAlert>
+        );
+      case MailActionTargetType.Team:
+        return null;
+      case MailActionTargetType.Member:
+        return (
+          <MarginlessAlert thinner type="warning">
+            {tct('Alerts sent directly to a member override their [alertSettings].', {
+              alertSettings: (
+                <ExternalLink href="/settings/account/notifications/">
+                  {t('personal project alert settings')}
+                </ExternalLink>
+              ),
+            })}
+          </MarginlessAlert>
+        );
+      default:
+        return null;
+    }
+  }
+
   render() {
     const {data} = this.props;
 
     return (
-      <RuleRow>
-        {data && <input type="hidden" name="id" value={data.id} />}
-        {this.renderRow()}
-        <DeleteButton
-          label={t('Delete Node')}
-          onClick={this.handleDelete}
-          type="button"
-          size="small"
-          icon="icon-trash"
-        />
-      </RuleRow>
+      <RuleRowContainer>
+        <RuleRow>
+          {data && <input type="hidden" name="id" value={data.id} />}
+          {this.renderRow()}
+          <DeleteButton
+            label={t('Delete Node')}
+            onClick={this.handleDelete}
+            type="button"
+            size="small"
+            icon="icon-trash"
+          />
+        </RuleRow>
+        {this.conditionallyRenderHelpfulBanner()}
+      </RuleRowContainer>
     );
   }
 }
@@ -201,7 +288,9 @@ const RuleRow = styled('div')`
   display: flex;
   align-items: center;
   padding: ${space(1)};
+`;
 
+const RuleRowContainer = styled('div')`
   &:nth-child(odd) {
     background-color: ${p => p.theme.offWhite};
   }
@@ -217,3 +306,7 @@ const Rule = styled('div')`
 const DeleteButton = styled(Button)`
   flex-shrink: 0;
 `;
+
+const MarginlessAlert = styled(Alert)`
+  margin: 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
index b992751385..f447aea0c3 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
@@ -9,6 +9,7 @@ import {
 } from 'app/types/alerts';
 import SelectControl from 'app/components/forms/selectControl';
 import space from 'app/styles/space';
+import {Organization, Project} from 'app/types';
 
 import RuleNode from './ruleNode';
 
@@ -19,6 +20,10 @@ type Props = {
   // actions/conditions that have been added to the rule
   items?: IssueAlertRuleAction[] | IssueAlertRuleCondition[];
 
+  project: Project;
+
+  organization: Organization;
+
   // Placeholder for select control
   placeholder: string;
 
@@ -49,6 +54,8 @@ class RuleNodeList extends React.Component<Props> {
       nodes,
       placeholder,
       items,
+      organization,
+      project,
     } = this.props;
 
     const options = nodes
@@ -72,6 +79,8 @@ class RuleNodeList extends React.Component<Props> {
                 onDelete={onDeleteRow}
                 data={item}
                 onPropertyChange={onPropertyChange}
+                organization={organization}
+                project={project}
               />
             ))}
           </RuleNodes>
