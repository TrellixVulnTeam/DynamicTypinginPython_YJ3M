commit 2df289cb16b0055defcf539bd9d4df886fd61866
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Aug 13 12:41:47 2018 -0700

    feat(ui): Add `<Highlight>` component (#9306)
    
    Use to highlight a substring.

diff --git a/docs-ui/components/highlight.stories.js b/docs-ui/components/highlight.stories.js
new file mode 100644
index 0000000000..9172ea9500
--- /dev/null
+++ b/docs-ui/components/highlight.stories.js
@@ -0,0 +1,12 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import Highlight from 'app/components/highlight';
+
+storiesOf('Highlight', module).add(
+  'default',
+  withInfo('Highlights a string within another string')(() => (
+    <Highlight text="ILL">billy@sentry.io</Highlight>
+  ))
+);
diff --git a/src/sentry/static/sentry/app/components/highlight.jsx b/src/sentry/static/sentry/app/components/highlight.jsx
new file mode 100644
index 0000000000..9841121539
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/highlight.jsx
@@ -0,0 +1,56 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+class HighlightComponent extends React.Component {
+  static propTypes = {
+    /**
+     * The text to highlight
+     */
+    text: PropTypes.string,
+
+    /**
+     * Should highlighting be disabled?
+     */
+    disabled: PropTypes.bool,
+
+    /**
+     * The original text (MUST be a string)
+     */
+    children: PropTypes.string,
+  };
+
+  render() {
+    let {className, children, disabled, text} = this.props;
+
+    if (!text || disabled) {
+      return children;
+    }
+
+    let highlightText = text.toLowerCase();
+    let idx = children.toLowerCase().indexOf(highlightText);
+
+    if (idx === -1) {
+      return children;
+    }
+
+    return (
+      <React.Fragment>
+        {children.substr(0, idx)}
+        <span className={className}>{children.substr(idx, highlightText.length)}</span>
+        {children.substr(idx + highlightText.length)}
+      </React.Fragment>
+    );
+  }
+}
+
+const Highlight = styled(HighlightComponent)`
+  font-weight: normal;
+  background-color: ${p => p.theme.yellowLight};
+  color: ${p => p.theme.gray4};
+`;
+
+Highlight.propTypes = HighlightComponent.propTypes;
+
+export default Highlight;
+export {HighlightComponent};
diff --git a/tests/js/spec/components/highlight.spec.jsx b/tests/js/spec/components/highlight.spec.jsx
new file mode 100644
index 0000000000..20a605cb8b
--- /dev/null
+++ b/tests/js/spec/components/highlight.spec.jsx
@@ -0,0 +1,60 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import {HighlightComponent} from 'app/components/highlight';
+
+describe('Highlight', function() {
+  it('highlights text', function() {
+    // shallow because `mount` and React Fragments don't work when accessing children
+    // it will only return first child
+    let wrapper = shallow(
+      <HighlightComponent text="ILL">billy@sentry.io</HighlightComponent>,
+      TestStubs.routerContext()
+    );
+    expect(
+      wrapper
+        .children()
+        .at(0)
+        .text()
+    ).toBe('b');
+    expect(wrapper.find('span').text()).toBe('ill');
+    expect(
+      wrapper
+        .children()
+        .at(2)
+        .text()
+    ).toBe('y@sentry.io');
+  });
+
+  it('does not have highlighted text if `text` prop is not found in main text', function() {
+    // shallow because `mount` and React Fragments don't work when accessing children
+    // it will only return first child
+    let wrapper = shallow(
+      <HighlightComponent text="invalid">billy@sentry.io</HighlightComponent>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.text()).toBe('billy@sentry.io');
+  });
+
+  it('does not have highlighted text if `text` prop is empty', function() {
+    // shallow because `mount` and React Fragments don't work when accessing children
+    // it will only return first child
+    let wrapper = shallow(
+      <HighlightComponent text="">billy@sentry.io</HighlightComponent>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.text()).toBe('billy@sentry.io');
+  });
+
+  it('does not have highlighted text if `disabled` prop is true', function() {
+    // shallow because `mount` and React Fragments don't work when accessing children
+    // it will only return first child
+    let wrapper = shallow(
+      <HighlightComponent text="">billy@sentry.io</HighlightComponent>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.text()).toBe('billy@sentry.io');
+  });
+});
