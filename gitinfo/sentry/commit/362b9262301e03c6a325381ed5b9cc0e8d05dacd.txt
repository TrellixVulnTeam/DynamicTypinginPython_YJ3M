commit 362b9262301e03c6a325381ed5b9cc0e8d05dacd
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 11 18:42:03 2014 -0800

    Add project breakdown to usage

diff --git a/bin/load-mocks b/bin/load-mocks
index 3cc3ae57ae..5b7b09bc7e 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -24,8 +24,14 @@ def create_sample_time_series(event):
             (tsdb.models.project, group.project.id),
             (tsdb.models.group, group.id),
         ), now, count)
-        tsdb.incr(tsdb.models.project_total_received, group.project.id, now, int(count * 1.5))
-        tsdb.incr(tsdb.models.project_total_rejected, group.project.id, now, int(count * 0.5))
+        tsdb.incr_multi((
+            (tsdb.models.organization_total_received, group.project.organization_id),
+            (tsdb.models.project_total_received, group.project.id),
+        ), now, int(count * 1.1))
+        tsdb.incr_multi((
+            (tsdb.models.organization_total_rejected, group.project.organization_id),
+            (tsdb.models.project_total_rejected, group.project.id),
+        ), now, int(count * 0.1))
         now = now - timedelta(seconds=1)
 
     for _ in xrange(24 * 30):
@@ -34,8 +40,14 @@ def create_sample_time_series(event):
             (tsdb.models.project, group.project.id),
             (tsdb.models.group, group.id),
         ), now, count)
-        tsdb.incr(tsdb.models.project_total_received, group.project.id, now, int(count * 1.5))
-        tsdb.incr(tsdb.models.project_total_rejected, group.project.id, now, int(count * 0.5))
+        tsdb.incr_multi((
+            (tsdb.models.organization_total_received, group.project.organization_id),
+            (tsdb.models.project_total_received, group.project.id),
+        ), now, int(count * 1.1))
+        tsdb.incr_multi((
+            (tsdb.models.organization_total_rejected, group.project.organization_id),
+            (tsdb.models.project_total_rejected, group.project.id),
+        ), now, int(count * 0.1))
         now = now - timedelta(hours=1)
 
 
diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
new file mode 100644
index 0000000000..a1dfe84934
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -0,0 +1,30 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.models import Organization, Project, Team
+
+
+class OrganizationProjectsEndpoint(Endpoint):
+    def get(self, request, organization_id):
+        organization = Organization.objects.get_from_cache(id=organization_id)
+
+        assert_perm(organization, request.user, request.auth)
+
+        team_list = Team.objects.get_for_user(
+            organization=organization,
+            user=request.user,
+        )
+
+        project_list = []
+        for team in team_list:
+            project_list.extend(Project.objects.get_for_user(
+                team=team,
+                user=request.user,
+            ))
+        project_list.sort(key=lambda x: x.name)
+
+        return Response(serialize(project_list, request.user))
diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index 21c03bf202..3fb5a1b32a 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -5,7 +5,7 @@ from rest_framework.response import Response
 from sentry.app import tsdb
 from sentry.api.base import BaseStatsEndpoint
 from sentry.api.permissions import assert_perm
-from sentry.models import Organization
+from sentry.models import Organization, Project, Team
 
 
 class OrganizationStatsEndpoint(BaseStatsEndpoint):
@@ -14,18 +14,49 @@ class OrganizationStatsEndpoint(BaseStatsEndpoint):
 
         assert_perm(organization, request.user, request.auth)
 
+        group = request.GET.get('group')
+        if not group:
+            keys = [organization.id]
+        elif group == 'project':
+            team_list = Team.objects.get_for_user(
+                organization=organization,
+                user=request.user,
+            )
+
+            project_list = []
+            for team in team_list:
+                project_list.extend(Project.objects.get_for_user(
+                    team=team,
+                    user=request.user,
+                ))
+            keys = [p.id for p in project_list]
+        else:
+            raise ValueError('Invalid group: %s' % group)
+
+        if not keys:
+            return Response([])
+
         stat = request.GET.get('stat', 'received')
         if stat == 'received':
-            stat_model = tsdb.models.organization_total_received
+            if group == 'project':
+                stat_model = tsdb.models.project_total_received
+            else:
+                stat_model = tsdb.models.organization_total_received
         elif stat == 'rejected':
-            stat_model = tsdb.models.organization_total_rejected
+            if group == 'project':
+                stat_model = tsdb.models.project_total_rejected
+            else:
+                stat_model = tsdb.models.organization_total_rejected
         else:
             raise ValueError('Invalid stat: %s' % stat)
 
         data = tsdb.get_range(
             model=stat_model,
-            keys=[organization.id],
+            keys=keys,
             **self._parse_args(request)
-        )[organization.id]
+        )
+
+        if not group:
+            data = data[organization.id]
 
         return Response(data)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 4a0bd27ca2..0fccc36d0b 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -16,6 +16,7 @@ from .endpoints.group_events_latest import GroupEventsLatestEndpoint
 from .endpoints.group_notes import GroupNotesEndpoint
 from .endpoints.group_stats import GroupStatsEndpoint
 from .endpoints.group_tags import GroupTagsEndpoint
+from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
@@ -43,6 +44,9 @@ urlpatterns = patterns(
         name='sentry-api-0-user-details'),
 
     # Organizations
+    url(r'^organizations/(?P<organization_id>\d+)/projects/$',
+        OrganizationProjectsEndpoint.as_view(),
+        name='sentry-api-0-organization-projects'),
     url(r'^organizations/(?P<organization_id>\d+)/stats/$',
         OrganizationStatsEndpoint.as_view(),
         name='sentry-api-0-organization-stats'),
diff --git a/src/sentry/templates/sentry/organization-usage.html b/src/sentry/templates/sentry/organization-usage.html
index ee8009ca1c..22f1dae86d 100644
--- a/src/sentry/templates/sentry/organization-usage.html
+++ b/src/sentry/templates/sentry/organization-usage.html
@@ -9,6 +9,19 @@
 {% block org_usage_nav %}active{% endblock %}
 
 {% block inner %}
+  <style>
+  .project-list td,
+  .project-list th {
+    text-align: center;
+    width: 100px;
+  }
+  .project-list td:first-child,
+  .project-list th:first-child {
+    text-align: left;
+    width: auto;
+  }
+  </style>
+
   <div class="page-header">
     <h2>Data Usage</h2>
   </div>
@@ -21,19 +34,55 @@
       <span class="loading">{% trans "Loading historical data..." %}</span>
     </div>
   </div>
+
+  <div class="page-header">
+    <h3>Events by Project</h3>
+  </div>
+
+  <table class="table table-striped project-list">
+    <thead>
+      <tr>
+        <th>Project</th>
+        <th>Accepted</th>
+        <th>Rejected</th>
+        <th>Total</th>
+      </tr>
+    </thead>
+    <tbody>
+    </tbody>
+  </table>
 {% endblock %}
 
 {% block content_after %}
   <script type="text/javascript">
   $(function(){
     var $sparkline = $('#chart');
-    var pendingRequests = 2;
-    var stats = {received: null, rejected: null};
+    var rawData = {received: null, rejected: null};
     var statsEndpoint = '{% url 'sentry-api-0-organization-stats' organization.id %}';
+    var stats = {received: [], rejected: []};
+    var projectTotals = [];
+    var orgTotal = {received: 0, rejected: 0, accepted: 0};
+    var pendingRequests = 3;
+    var projectMap = {};
 
     $sparkline.height('250px');
 
-    $.each(stats, function(statName, _) {
+    $.ajax({
+      url: '{% url 'sentry-api-0-organization-projects' organization.id %}',
+      type: 'get',
+      dataType: 'json',
+      success: function(data) {
+        $.each(data, function(_, project){
+          projectMap[project.id] = project;
+        });
+        requestFinished();
+      },
+      error: function(data) {
+        $sparkline.html('<div class="error">There was an error loading statistics.</div>');
+      }
+    });
+
+    $.each(rawData, function(statName, _) {
       $.ajax({
         url: statsEndpoint,
         type: 'get',
@@ -41,14 +90,12 @@
         data: {
           since: new Date().getTime() / 1000 - 3600 * 24 * 7,
           resolution: '1h',
-          stat: statName
+          stat: statName,
+          group: 'project'
         },
         success: function(data){
-          stats[statName] = data;
-          pendingRequests -= 1;
-          if (pendingRequests === 0) {
-            renderChart();
-          }
+          rawData[statName] = data;
+          requestFinished();
         },
         error: function(data) {
           $sparkline.html('<div class="error">There was an error loading statistics.</div>');
@@ -56,43 +103,96 @@
       });
     });
 
-    function renderChart() {
-      function convertPoint(point) {
-          // set timestamp to be in millis
-        return [[point[0] * 1000, point[1]]];
+    function requestFinished() {
+      pendingRequests -= 1;
+      if (pendingRequests === 0) {
+        processData();
+        renderChart();
+        renderTable();
       }
+    }
 
+    function processData() {
+      var sReceived = {};
+      var sRejected = {};
+      $.each(rawData.received, function(projectId, data){
+        var pReceived = 0;
+        var pRejected = 0;
+        $.each(data, function(idx, point){
+          var dReceived = point[1];
+          var dRejected = rawData.rejected[projectId][idx][1];
+          var ts = point[0] * 1000;
+          if (sReceived[ts] === undefined) {
+            sReceived[ts] = dReceived;
+            sRejected[ts] = dRejected;
+          } else {
+            sReceived[ts] += dReceived;
+            sRejected[ts] += dRejected;
+          }
+          pReceived += dReceived;
+          pRejected += dRejected;
+        });
+        projectTotals.push({
+          id: projectId,
+          received: pReceived,
+          rejected: pRejected,
+          accepted: pReceived - pRejected
+        });
+        orgTotal.received += pReceived;
+        orgTotal.rejected += pRejected;
+        orgTotal.accepted += pReceived - pRejected;
+      });
+      stats.rejected = $.map(sRejected, function(value, ts) { return [[ts, value]]; });
+      stats.accepted = $.map(sReceived, function(value, ts) {
+        // total number of events accepted (received - rejected)
+        return [[ts, value - sRejected[ts]]];
+      });
+
+      $(projectTotals).sort(function(a, b) { return a.received - b.received });
+    }
+
+    function renderTable() {
+      var $tbody = $('.project-list tbody')
+      $.each(projectTotals, function(_, item) {
+        var acceptedPercent = parseInt(item.accepted / orgTotal.accepted * 100);
+        var receivedPercent = parseInt(item.received / orgTotal.received * 100);
+        var rejectedPercent = parseInt(item.rejected / orgTotal.rejected * 100);
+        var project = projectMap[item.id];
+        $('<tr>' +
+            '<td><a href="/{{ organization.slug }}/' + project.slug + '/">' + app.utils.escape(project.name) + '</a></td>' +
+            '<td>' + app.utils.formatNumber(item.accepted) + '<br><small>%' + acceptedPercent + '</small></td>' +
+            '<td>' + app.utils.formatNumber(item.rejected) + '<br><small>%' + rejectedPercent + '</small></td>' +
+            '<td>' + app.utils.formatNumber(item.received) + '<br><small>%' + receivedPercent + '</small></td>' +
+          '</tr>').appendTo($tbody);
+      });
+    }
+
+    function renderChart() {
       var points = [
-          {
-              // total number of events accepted (received - rejected)
-              data: $.map(stats.rejected, function(point, idx){
-                point = convertPoint(point)[0];
-                point[1] = stats.received[idx][1] - point[1];
-                return [point];
-              }),
-              label: 'Accepted',
-              color: 'rgba(86, 175, 232, 1)',
-              shadowSize: 0,
-              stack: true,
-              lines: {
-                  lineWidth: 2,
-                  show: true,
-                  fill: true
-              }
-          },
-          {
-              // total number of events rejected
-              data: $.map(stats.rejected, convertPoint),
-              color: 'rgba(244, 63, 32, 1)',
-              shadowSize: 0,
-              label: 'Rejected',
-              stack: true,
-              lines: {
-                  lineWidth: 2,
-                  show: true,
-                  fill: true
-              }
+        {
+          data: stats.accepted,
+          label: 'Accepted',
+          color: 'rgba(86, 175, 232, 1)',
+          shadowSize: 0,
+          stack: true,
+          lines: {
+            lineWidth: 2,
+            show: true,
+            fill: true
           }
+        },
+        {
+          data: stats.rejected,
+          color: 'rgba(244, 63, 32, 1)',
+          shadowSize: 0,
+          label: 'Rejected',
+          stack: true,
+          lines: {
+            lineWidth: 2,
+            show: true,
+            fill: true
+          }
+        }
       ];
 
       var options = {
@@ -115,7 +215,6 @@
         tooltip: true,
         tooltipOpts: {
           content: function(label, xval, yval, flotItem) {
-            console.log(flotItem);
             if(typeof yval.toLocaleString == "function") {
                 return yval.toLocaleString() + ' events ' + flotItem.series.label.toLowerCase() + '<br>' + moment(xval).format('llll');
             }
diff --git a/tests/sentry/api/endpoints/test_organization_projects.py b/tests/sentry/api/endpoints/test_organization_projects.py
new file mode 100644
index 0000000000..26b18d5168
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_projects.py
@@ -0,0 +1,21 @@
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class OrganizationProjectsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+        team = self.create_team(organization=org)
+        project = self.create_project(team=team)
+
+        url = reverse('sentry-api-0-organization-projects', kwargs={
+            'organization_id': org.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(project.id)
