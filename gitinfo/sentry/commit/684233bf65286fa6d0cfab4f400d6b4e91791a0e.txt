commit 684233bf65286fa6d0cfab4f400d6b4e91791a0e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Mar 8 13:05:19 2016 +0100

    Raise Group.DoesNotExist instead of returning None

diff --git a/src/sentry/api/endpoints/organization_shortid.py b/src/sentry/api/endpoints/organization_shortid.py
index df9f366c4b..1d5f6b1d63 100644
--- a/src/sentry/api/endpoints/organization_shortid.py
+++ b/src/sentry/api/endpoints/organization_shortid.py
@@ -37,8 +37,9 @@ class ShortIdLookupEndpoint(OrganizationEndpoint):
         :pparam string short_id: the short ID to look up.
         :auth: required
         """
-        group = Group.objects.by_qualified_short_id(organization, short_id)
-        if group is None:
+        try:
+            group = Group.objects.by_qualified_short_id(organization, short_id)
+        except Group.DoesNotExist:
             raise ResourceDoesNotExist()
 
         return Response({
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index eaaabd97c6..7696becd81 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -204,8 +204,11 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             # results for another project.  The UI deals with this.
             elif request.GET.get('shortIdLookup') == '1' and \
                     looks_like_short_id(query):
-                matching_group = Group.objects.by_qualified_short_id(
-                    project.organization, query)
+                try:
+                    matching_group = Group.objects.by_qualified_short_id(
+                        project.organization, query)
+                except Group.DoesNotExist:
+                    matching_group = None
 
             if matching_group is not None:
                 response = Response(serialize(
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 6018e65e69..af618be526 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -57,7 +57,7 @@ class GroupManager(BaseManager):
     def by_qualified_short_id(self, org, short_id):
         match = _short_id_re.match(short_id.strip())
         if match is None:
-            return
+            raise Group.DoesNotExist
         from sentry.models import Project
         callsign, id = match.groups()
         callsign = callsign.upper()
@@ -67,14 +67,11 @@ class GroupManager(BaseManager):
                 callsign=callsign
             )
         except Project.DoesNotExist:
-            return
-        try:
-            return Group.objects.get(
-                project=project,
-                short_id=base36_decode(id),
-            )
-        except Group.DoesNotExist:
-            return
+            raise Group.DoesNotExist
+        return Group.objects.get(
+            project=project,
+            short_id=base36_decode(id),
+        )
 
     def from_kwargs(self, project, **kwargs):
         from sentry.event_manager import EventManager
