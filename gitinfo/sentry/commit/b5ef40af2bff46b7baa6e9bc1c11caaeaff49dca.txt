commit b5ef40af2bff46b7baa6e9bc1c11caaeaff49dca
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Feb 23 11:10:24 2018 -0800

    feat(environments): Add environment toggle on Releases page (#7350)
    
    Also add withEnvironment higher order component

diff --git a/src/sentry/static/sentry/app/utils/withEnvironment.jsx b/src/sentry/static/sentry/app/utils/withEnvironment.jsx
new file mode 100644
index 0000000000..8c5cecc78b
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withEnvironment.jsx
@@ -0,0 +1,39 @@
+import React from 'react';
+import createReactClass from 'create-react-class';
+import Reflux from 'reflux';
+
+import LatestContextStore from '../stores/latestContextStore';
+
+// Passes the active environment to the wrapped component if the organizations:environments
+// feature is active, otherwiss passes null (i.e. the value that means "All environments")
+
+const withEnvironment = WrappedComponent =>
+  createReactClass({
+    displayName: 'withEnvironment',
+
+    mixins: [Reflux.listenTo(LatestContextStore, 'onLatestContextChange')],
+
+    getInitialState() {
+      const latestContext = LatestContextStore.getInitialState();
+
+      return {
+        environment: latestContext.environment,
+        organization: latestContext.organization,
+      };
+    },
+
+    onLatestContextChange({environment, organization}) {
+      this.setState({environment, organization});
+    },
+
+    render() {
+      const features = new Set(
+        this.state.organization ? this.state.organization.features : []
+      );
+      const environment = features.has('environments') ? this.state.environment : null;
+
+      return <WrappedComponent environment={environment} {...this.props} />;
+    },
+  });
+
+export default withEnvironment;
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index 81f05a5c00..9c878a0288 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -1,4 +1,3 @@
-import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
@@ -13,22 +12,20 @@ import {t} from '../../locale';
 
 import ReleaseList from './releaseList';
 
+import withEnvironment from '../../utils/withEnvironment';
+
+const DEFAULT_QUERY = '';
+
 const ProjectReleases = createReactClass({
   displayName: 'ProjectReleases',
 
   propTypes: {
-    defaultQuery: PropTypes.string,
     setProjectNavSection: PropTypes.func,
+    environment: PropTypes.object,
   },
 
   mixins: [ApiMixin],
 
-  getDefaultProps() {
-    return {
-      defaultQuery: '',
-    };
-  },
-
   getInitialState() {
     let queryParams = this.props.location.query;
 
@@ -36,8 +33,9 @@ const ProjectReleases = createReactClass({
       releaseList: [],
       loading: true,
       error: false,
-      query: queryParams.query || this.props.defaultQuery,
+      query: queryParams.query || DEFAULT_QUERY,
       pageLinks: '',
+      environment: this.props.environment,
     };
   },
 
@@ -56,6 +54,10 @@ const ProjectReleases = createReactClass({
         this.fetchData
       );
     }
+
+    if (nextProps.environment !== this.props.environment) {
+      this.setState({environment: nextProps.environment}, this.fetchData);
+    }
   },
 
   onSearch(query) {
@@ -75,7 +77,22 @@ const ProjectReleases = createReactClass({
       error: false,
     });
 
-    this.api.request(this.getProjectReleasesEndpoint(), {
+    const {orgId, projectId} = this.props.params;
+
+    const url = `/projects/${orgId}/${projectId}/releases/`;
+
+    const query = {
+      ...this.props.location.query,
+      per_page: 20,
+      query: this.state.query,
+    };
+
+    if (this.state.environment) {
+      query.environment = this.state.environment.name;
+    }
+
+    this.api.request(url, {
+      query,
       success: (data, _, jqXHR) => {
         this.setState({
           error: false,
@@ -93,24 +110,6 @@ const ProjectReleases = createReactClass({
     });
   },
 
-  getProjectReleasesEndpoint() {
-    let params = this.props.params;
-    let queryParams = {
-      ...this.props.location.query,
-      per_page: 20,
-      query: this.state.query,
-    };
-
-    return (
-      '/projects/' +
-      params.orgId +
-      '/' +
-      params.projectId +
-      '/releases/?' +
-      jQuery.param(queryParams)
-    );
-  },
-
   getReleaseTrackingUrl() {
     let params = this.props.params;
 
@@ -132,7 +131,7 @@ const ProjectReleases = createReactClass({
           releaseList={this.state.releaseList}
         />
       );
-    else if (this.state.query && this.state.query !== this.props.defaultQuery)
+    else if (this.state.query && this.state.query !== DEFAULT_QUERY)
       body = this.renderNoQueryResults();
     else body = this.renderEmpty();
 
@@ -198,4 +197,5 @@ const ProjectReleases = createReactClass({
   },
 });
 
-export default ProjectReleases;
+export {ProjectReleases}; // For tests
+export default withEnvironment(ProjectReleases);
diff --git a/tests/js/spec/views/projectReleases.spec.jsx b/tests/js/spec/views/projectReleases.spec.jsx
index ce6f696f51..414981e75e 100644
--- a/tests/js/spec/views/projectReleases.spec.jsx
+++ b/tests/js/spec/views/projectReleases.spec.jsx
@@ -3,7 +3,7 @@ import {shallow} from 'enzyme';
 import {browserHistory} from 'react-router';
 
 import {Client} from 'app/api';
-import ProjectReleases from 'app/views/projectReleases';
+import {ProjectReleases} from 'app/views/projectReleases';
 import SearchBar from 'app/views/stream/searchBar';
 import Pagination from 'app/components/pagination';
 
@@ -35,8 +35,10 @@ describe('ProjectReleases', function() {
 
   describe('fetchData()', function() {
     it('should call releases endpoint', function() {
-      expect(Client.prototype.request.args[0][0]).toEqual(
-        '/projects/123/456/releases/?per_page=20&query=derp'
+      expect(Client.prototype.request.args[0][1]).toEqual(
+        expect.objectContaining({
+          query: {per_page: 20, query: 'derp'},
+        })
       );
     });
   });
