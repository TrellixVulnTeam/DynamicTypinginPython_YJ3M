commit 116a1e2d32115ca3461527319cdbffab80a63915
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Oct 2 11:56:31 2017 -0700

    feat: Implement Project.transfer_to (#6218)

diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index c88ff77269..86b0696a1f 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -13,7 +13,7 @@ import warnings
 
 from bitfield import BitField
 from django.conf import settings
-from django.db import models
+from django.db import IntegrityError, models, transaction
 from django.db.models import F
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
@@ -322,3 +322,33 @@ class Project(Model):
                 user, 'workflow:notifications', UserOptionValue.all_conversations
             )
         return opt_value == UserOptionValue.all_conversations
+
+    def transfer_to(self, team):
+        from sentry.models import ReleaseProject
+
+        organization = team.organization
+
+        # We only need to delete ReleaseProjects when moving to a different
+        # Organization. Releases are bound to Organization, so it's not realistic
+        # to keep this link unless we say, copied all Releases as well.
+        if self.organization_id != organization.id:
+            ReleaseProject.objects.filter(
+                project_id=self.id,
+            ).delete()
+
+        self.organization = organization
+        self.team = team
+
+        try:
+            with transaction.atomic():
+                self.update(
+                    organization=organization,
+                    team=team,
+                )
+        except IntegrityError:
+            slugify_instance(self, self.name, organization=organization)
+            self.update(
+                slug=self.slug,
+                organization=organization,
+                team=team,
+            )
diff --git a/tests/sentry/models/test_project.py b/tests/sentry/models/test_project.py
index 245607a418..ebcf7717d4 100644
--- a/tests/sentry/models/test_project.py
+++ b/tests/sentry/models/test_project.py
@@ -2,7 +2,7 @@
 
 from __future__ import absolute_import
 
-from sentry.models import OrganizationMember, OrganizationMemberTeam
+from sentry.models import OrganizationMember, OrganizationMemberTeam, Project
 from sentry.testutils import TestCase
 
 
@@ -34,3 +34,38 @@ class ProjectTest(TestCase):
         )
 
         assert list(project.member_set.all()) == []
+
+    def test_transfer_to(self):
+        from_org = self.create_organization()
+        from_team = self.create_team(organization=from_org)
+        project = self.create_project(team=from_team)
+        to_org = self.create_organization()
+        to_team = self.create_team(organization=to_org)
+
+        project.transfer_to(to_team)
+
+        project = Project.objects.get(id=project.id)
+
+        assert project.team_id == to_team.id
+        assert project.organization_id == to_org.id
+
+    def test_transfer_to_slug_collision(self):
+        from_org = self.create_organization()
+        from_team = self.create_team(organization=from_org)
+        project = self.create_project(team=from_team, slug='matt')
+        to_org = self.create_organization()
+        to_team = self.create_team(organization=to_org)
+        # conflicting project slug
+        self.create_project(team=to_team, slug='matt')
+
+        assert Project.objects.filter(organization=to_org).count() == 1
+
+        project.transfer_to(to_team)
+
+        project = Project.objects.get(id=project.id)
+
+        assert project.team_id == to_team.id
+        assert project.organization_id == to_org.id
+        assert project.slug != 'matt'
+        assert Project.objects.filter(organization=to_org).count() == 2
+        assert Project.objects.filter(organization=from_org).count() == 0
