commit 8441c3eb84c3501339eb757cdcd1588cfcf677a7
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Dec 5 10:47:08 2018 -0600

    fix(snuba): Run post_process RuleProcessor code with Snuba's consisteâ€¦ (#10909)
    
    * fix(snuba): Run post_process RuleProcessor code with Snuba's consistent=True
    
    This will ensure that RuleProcessor code reads rows that were just
    written by Snuba's ingest pipeline.
    
    * Note not threadsafe.

diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 3fdf2fbd34..8083f080e8 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -14,6 +14,7 @@ import time
 from django.conf import settings
 
 from sentry import features
+from sentry.utils import snuba
 from sentry.utils.cache import cache
 from sentry.plugins import plugins
 from sentry.signals import event_processed
@@ -108,13 +109,14 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
     # we process snoozes before rules as it might create a regression
     has_reappeared = process_snoozes(event.group)
 
-    rp = RuleProcessor(event, is_new, is_regression, is_new_group_environment, has_reappeared)
-    has_alert = False
-    # TODO(dcramer): ideally this would fanout, but serializing giant
-    # objects back and forth isn't super efficient
-    for callback, futures in rp.apply():
-        has_alert = True
-        safe_execute(callback, event, futures)
+    with snuba.options_override({'consistent': True}):
+        rp = RuleProcessor(event, is_new, is_regression, is_new_group_environment, has_reappeared)
+        has_alert = False
+        # TODO(dcramer): ideally this would fanout, but serializing giant
+        # objects back and forth isn't super efficient
+        for callback, futures in rp.apply():
+            has_alert = True
+            safe_execute(callback, event, futures)
 
     if features.has(
         'projects:servicehooks',
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index ba92e23f6d..8ffdd7dd56 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -24,6 +24,11 @@ from sentry.utils.dates import to_timestamp
 MAX_ISSUES = 500
 MAX_HASHES = 5000
 
+# Global Snuba request option override dictionary. Only intended
+# to be used with the `options_override` contextmanager below.
+# NOT THREAD SAFE!
+OVERRIDE_OPTIONS = {}
+
 SENTRY_SNUBA_MAP = {
     # general
     'id': 'event_id',
@@ -157,6 +162,34 @@ def timer(name, prefix='snuba.client'):
         metrics.timing(u'{}.{}'.format(prefix, name), time.time() - t)
 
 
+@contextmanager
+def options_override(overrides):
+    """\
+    NOT THREAD SAFE!
+
+    Adds to OVERRIDE_OPTIONS, restoring previous values and removing
+    keys that didn't previously exist on exit, so that calls to this
+    can be nested.
+    """
+    previous = {}
+    delete = []
+
+    for k, v in overrides.items():
+        try:
+            previous[k] = OVERRIDE_OPTIONS[k]
+        except KeyError:
+            delete.append(k)
+        OVERRIDE_OPTIONS[k] = v
+
+    try:
+        yield
+    finally:
+        for k, v in previous.items():
+            OVERRIDE_OPTIONS[k] = v
+        for k in delete:
+            OVERRIDE_OPTIONS.pop(k)
+
+
 def connection_from_url(url, **kw):
     if url[:1] == '/':
         from sentry.net.http import UnixHTTPConnectionPool
@@ -363,6 +396,8 @@ def raw_query(start, end, groupby=None, conditions=None, filter_keys=None,
         'turbo': turbo
     }) if v is not None}
 
+    request.update(OVERRIDE_OPTIONS)
+
     headers = {}
     if referrer:
         headers['referer'] = referrer
diff --git a/tests/snuba/test_util.py b/tests/snuba/test_util.py
index 0fd8edce9d..71ef73a380 100644
--- a/tests/snuba/test_util.py
+++ b/tests/snuba/test_util.py
@@ -62,3 +62,12 @@ class SnubaUtilTest(TestCase):
                     ['count()', '', 'count'],
                 ],
             )
+
+    def test_override_options(self):
+        assert snuba.OVERRIDE_OPTIONS == {}
+        with snuba.options_override({'foo': 1}):
+            assert snuba.OVERRIDE_OPTIONS == {'foo': 1}
+            with snuba.options_override({'foo': 2}):
+                assert snuba.OVERRIDE_OPTIONS == {'foo': 2}
+            assert snuba.OVERRIDE_OPTIONS == {'foo': 1}
+        assert snuba.OVERRIDE_OPTIONS == {}
