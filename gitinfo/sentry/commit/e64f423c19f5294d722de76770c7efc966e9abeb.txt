commit e64f423c19f5294d722de76770c7efc966e9abeb
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Sep 3 03:12:31 2011 -0700

    Refactored a majority of the stack extraction code to be generic (moved into utils/stacks). Added AUTO_LOG_STACKS and the stack boolean attributes for logging frame stacks on any logging call.

diff --git a/CHANGES b/CHANGES
index b8e76eae90..838a1e9fd0 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,9 @@
+1.10.0
+
+* You can now passing ``extra={'stack': True}`` to logging methods to capture
+  the current frames and their locals.
+* Code refactoring in various places related to stack extraction.
+
 1.9.0
 
 * Load the Frequency chart asynchronously.
diff --git a/docs/config/index.rst b/docs/config/index.rst
index 81bda9691c..6dcc93c5bc 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -105,7 +105,13 @@ be seen as the same message within Sentry::
 	logger.error('There was some %s error', 'fun')
 	logger.error('There was some %s error', 1)
 
-Note that here we are describing a client/server interaction where
+As of Sentry 1.10.0 the ``logging`` integration also allows easy capture of stack frames (and their locals) as if you were
+logging an exception. This can be done automatically with the ``SENTRY_AUTO_LOG_STACKS`` setting, as well as by passing the
+``stack`` boolean to ``extra``::
+
+	logger.error('There was an error', extra={'stack': True})
+
+.. note:: We are describing a client/server interaction where
 both components are provided by django-sentry.  Other languages that
 provide a logging package that is comparable to the python ``logging``
 package may define a sentry handler.  Check the Integration with
@@ -268,7 +274,7 @@ seen after it has been resolved.
 SENTRY_TESTING
 ##############
 
-Enabling this setting allows the testing of Sentry exception handler even if Django DEBUG is enabled.
+Enabling this setting allows the testing of Sentry exception handler even if Django ``DEBUG`` is enabled.
 
 Default value is ``False``
 
@@ -284,7 +290,7 @@ This will override the ``server_name`` value for this installation. Defaults to
 SENTRY_URL_PREFIX
 #################
 
-Absolute URL to the sentry root directory. Should not include a trailing slash. Defaults to "".
+Absolute URL to the sentry root directory. Should not include a trailing slash. Defaults to ``""``.
 
 ####################
 SENTRY_EXCLUDE_PATHS
@@ -302,16 +308,22 @@ By default Sentry only looks at modules in INSTALLED_APPS for drilling down wher
 SENTRY_MAX_LENGTH_LIST
 ######################
 
-The maximum number of items a list-like container should store. Defaults to 50.
+The maximum number of items a list-like container should store. Defaults to ``50``.
 
 ########################
 SENTRY_MAX_LENGTH_STRING
 ########################
 
-The maximum characters of a string that should be stored. Defaults to 200.
+The maximum characters of a string that should be stored. Defaults to ``200``.
 
 #############
 SENTRY_PUBLIC
 #############
 
 Should Sentry be protected by a username and password (using @login_required) or be publicly accessible. Defaults to False (password protection).
+
+######################
+SENTRY_AUTO_LOG_STACKS
+######################
+
+Should Sentry automatically log frame stacks (including locals) for ``create_from_record`` (``logging``) calls as it would for exceptions. Defaults to ``False``.
\ No newline at end of file
diff --git a/example_project/settings.py b/example_project/settings.py
index 96a6b2e082..baf254e892 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -117,7 +117,7 @@ logging.basicConfig(level=logging.DEBUG)
 SENTRY_THRASHING_TIMEOUT = 0
 SENTRY_TESTING = True
 SENTRY_SITE = 'example'
-SENTRY_PUBLIC = False
+SENTRY_PUBLIC = True
 
 SENTRY_FILTERS = (
     'example_project.filters.IPFilter',
diff --git a/sentry/client/base.py b/sentry/client/base.py
index 564c14cbae..a06f1ac34e 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -13,13 +13,13 @@ import uuid
 from django.core.cache import cache
 from django.template import TemplateSyntaxError
 from django.template.loader import LoaderOrigin
-from django.views.debug import ExceptionReporter
 
 import sentry
 from sentry.conf import settings
 from sentry.utils import json
-from sentry.utils import construct_checksum, varmap, transform, get_installed_apps, force_unicode, \
+from sentry.utils import construct_checksum, transform, get_installed_apps, force_unicode, \
                            get_versions, shorten, get_signature, get_auth_header
+from sentry.utils.stacks import get_stack_info, iter_stack_frames, iter_traceback_frames
 
 logger = logging.getLogger('sentry.errors')
 
@@ -124,6 +124,42 @@ class SentryClient(object):
                 continue
             kwargs['data'][k] = shorten(v)
 
+        # if we've passed frames, lets try to fetch the culprit
+        if not kwargs.get('view') and kwargs['data']['__sentry__'].get('frames'):
+            # This should be cached
+            modules = get_installed_apps()
+            if settings.INCLUDE_PATHS:
+                modules = set(list(modules) + settings.INCLUDE_PATHS)
+        
+            def contains(iterator, value):
+                for k in iterator:
+                    if value.startswith(k):
+                        return True
+                return False
+            
+            # We iterate through each frame looking for an app in INSTALLED_APPS
+            # When one is found, we mark it as last "best guess" (best_guess) and then
+            # check it against SENTRY_EXCLUDE_PATHS. If it isnt listed, then we
+            # use this option. If nothing is found, we use the "best guess".
+            best_guess = None
+            view = None
+            for frame in kwargs['data']['__sentry__']['frames']:
+                try:
+                    view = '.'.join([frame['module'], frame['function']])
+                except:
+                    continue
+                if contains(modules, view):
+                    if not (contains(settings.EXCLUDE_PATHS, view) and best_guess):
+                        best_guess = view
+                elif best_guess:
+                    break
+            if best_guess:
+                view = best_guess
+        
+            if view:
+                kwargs['view'] = view
+
+        # try to fetch the current version
         if kwargs.get('view'):
             # get list of modules from right to left
             parts = kwargs['view'].split('.')
@@ -248,8 +284,29 @@ class SentryClient(object):
         if record.exc_info and all(record.exc_info):
             return self.create_from_exception(record.exc_info, **kwargs)
 
+        data = kwargs.pop('data', {}) or {}
+        data['__sentry__'] = {}
+        if getattr(record, 'stack', settings.AUTO_LOG_STACKS):
+            stack = []
+            found = None
+            for frame in iter_stack_frames():
+                # There are initial frames from Sentry that need skipped
+                name = frame.f_globals.get('__name__')
+                if found is None:
+                    if name == 'logging':
+                        found = False
+                    continue
+                elif not found:
+                    if name != 'logging':
+                        found = True
+                    else:
+                        continue
+                stack.append(frame)
+            data['__sentry__']['frames'] = get_stack_info(stack)
+
         return self.process(
             traceback=record.exc_text,
+            data=data,
             **kwargs
         )
 
@@ -269,60 +326,22 @@ class SentryClient(object):
         new_exc = bool(exc_info)
         if not exc_info or exc_info is True:
             exc_info = sys.exc_info()
+
+        data = kwargs.pop('data', {}) or {}
         
         try:
             exc_type, exc_value, exc_traceback = exc_info
 
-            reporter = ExceptionReporter(None, exc_type, exc_value, exc_traceback)
-            frames = varmap(shorten, reporter.get_traceback_frames())
+            frames = get_stack_info(iter_traceback_frames(exc_traceback))
 
-            if not kwargs.get('view'):
-                # This should be cached
-                modules = get_installed_apps()
-                if settings.INCLUDE_PATHS:
-                    modules = set(list(modules) + settings.INCLUDE_PATHS)
-
-                def iter_tb_frames(tb):
-                    while tb:
-                        yield tb.tb_frame
-                        tb = tb.tb_next
-            
-                def contains(iterator, value):
-                    for k in iterator:
-                        if value.startswith(k):
-                            return True
-                    return False
-                
-                # We iterate through each frame looking for an app in INSTALLED_APPS
-                # When one is found, we mark it as last "best guess" (best_guess) and then
-                # check it against SENTRY_EXCLUDE_PATHS. If it isnt listed, then we
-                # use this option. If nothing is found, we use the "best guess".
-                best_guess = None
-                view = None
-                for frame in iter_tb_frames(exc_traceback):
-                    try:
-                        view = '.'.join([frame.f_globals['__name__'], frame.f_code.co_name])
-                    except:
-                        continue
-                    if contains(modules, view):
-                        if not (contains(settings.EXCLUDE_PATHS, view) and best_guess):
-                            best_guess = view
-                    elif best_guess:
-                        break
-                if best_guess:
-                    view = best_guess
-            
-                if view:
-                    kwargs['view'] = view
-
-            data = kwargs.pop('data', {}) or {}
             if hasattr(exc_type, '__class__'):
                 exc_module = exc_type.__class__.__module__
             else:
                 exc_module = None
-            data['__sentry__'] = {
-                'exc': map(transform, [exc_module, exc_value.args, frames]),
-            }
+
+            data['__sentry__'] = {}
+            data['__sentry__']['frames'] = frames
+            data['__sentry__']['exception'] = [transform(exc_module), transform(exc_value.args)]
 
             if (isinstance(exc_value, TemplateSyntaxError) and \
                 isinstance(getattr(exc_value, 'source', None), (tuple, list)) and isinstance(exc_value.source[0], LoaderOrigin)):
diff --git a/sentry/client/handlers.py b/sentry/client/handlers.py
index e19759dad8..9e86facdf1 100644
--- a/sentry/client/handlers.py
+++ b/sentry/client/handlers.py
@@ -1,5 +1,6 @@
 import logging
 import sys
+import traceback
 
 class SentryHandler(logging.Handler):
     def emit(self, record):
@@ -23,6 +24,7 @@ class SentryHandler(logging.Handler):
         except Exception:
             print >> sys.stderr, "Top level Sentry exception caught - failed creating log record"
             print >> sys.stderr, record.msg
+            print >> sys.stderr, traceback.format_exc()
             return
 
 try:
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 955b18ae02..45070729c6 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -81,9 +81,12 @@ SERVER_EMAIL = 'root@localhost'
 
 LOGIN_URL = None
 
+# Automatically log frame stacks from all ``logging`` messages
+AUTO_LOG_STACKS = False
+
 ## The following settings refer to the built-in webserver
 
 WEB_HOST = 'localhost'
 WEB_PORT = 9000
 WEB_LOG_FILE = os.path.join(ROOT, 'sentry.log')
-WEB_PID_FILE = os.path.join(ROOT, 'sentry.pid')
+WEB_PID_FILE = os.path.join(ROOT, 'sentry.pid')
\ No newline at end of file
diff --git a/sentry/static/scripts/global.js b/sentry/static/scripts/global.js
index 0d064085bf..05ec401482 100644
--- a/sentry/static/scripts/global.js
+++ b/sentry/static/scripts/global.js
@@ -23,7 +23,6 @@ $(window).load(function() {
     $('.frame table.vars').hide();
     $('ol.pre-context').hide();
     $('ol.post-context').hide();
-    $('div.pastebin').hide();
 });
 function toggle() {
     for (var i = 0; i < arguments.length; i++) {
@@ -42,13 +41,6 @@ function varToggle(link, id) {
     s.innerHTML = s.innerHTML == uarr ? darr : uarr;
     return false;
 }
-function switchPastebinFriendly(link) {
-    s1 = "Switch to copy-and-paste view";
-    s2 = "Switch back to interactive view";
-    link.innerHTML = link.innerHTML == s1 ? s2 : s1;
-    toggle('browserTraceback', 'pastebinTraceback');
-    return false;
-}
 
 function getQueryParams()
 {
diff --git a/sentry/static/styles/global.css b/sentry/static/styles/global.css
index 6f1a387e63..cac16fd921 100644
--- a/sentry/static/styles/global.css
+++ b/sentry/static/styles/global.css
@@ -332,7 +332,10 @@ div.context ol.context-line li { color:black; background-color:#ccc; }
 div.context ol.context-line li span { float: right; }
 div.commands { margin-left: 40px; }
 div.commands a { color:black; text-decoration:none; }
-#template, #template-not-exist { background:#f6f6f6; margin-top: 1em; overflow: hidden; }
+#template, #template-not-exist { overflow: hidden; }
+#template pre {
+    margin-bottom: 0;
+}
 #template-not-exist ul { margin: 0 0 0 20px; }
 #unicode-hint { background:#eee; }
 #traceback { }
@@ -358,9 +361,6 @@ div.commands a { color:black; text-decoration:none; }
     background: #eee;
 }
 
-#reporter_body #traceback li { list-style-type: inherit; }
-#reporter_body #traceback { padding: 8px; margin-top: 10px; }
-#reporter_body td, #reporter_body th { border-bottom: 0; font:small sans-serif; line-height: auto; }
 .error { background: #ffc; padding: 5px; }
 .specific { color:#cc3300; font-weight:bold; }
 h2 span.commands { font-size:.7em;}
diff --git a/sentry/templates/sentry/group/details.html b/sentry/templates/sentry/group/details.html
index 0185cb8123..415dae5cf6 100644
--- a/sentry/templates/sentry/group/details.html
+++ b/sentry/templates/sentry/group/details.html
@@ -78,16 +78,101 @@
                 <pre id="full-message">{{ group.message }}</pre>
             {% endif %}
             
-            {% if traceback %}
-                {{ traceback }}
+            {% if exeption_type %}
+            <div id="summary">
+              <h3>{{ exception_type }}: {{ exception_value|escape }}</h3>
+              <table class="meta">
+                <tr>
+                  <th>Exception Value:</th>
+                  <td><pre>{{ exception_value|escape }}</pre></td>
+                </tr>
+                {% if lastframe %}
+                <tr>
+                  <th>Exception Location:</th>
+                  <td>{{ lastframe.filename|escape }} in {{ lastframe.function|escape }}, line {{ lastframe.lineno }}</td>
+                </tr>
+                {% endif %}
+              </table>
+            </div>
+            {% endif %}
+            {% if template_info %}
+            <div id="template">
+                <h2>Template error</h2>
+                <p>In template <code>{{ template_info.name }}</code>, error at line <strong>{{ template_info.line }}</strong></p>
+                <h3>{{ template_info.message }}</h3>
+                <ol>
+                {% for source_line in template_info.source_lines %}
+                    <li class="{% if source_line.0 == template_info.line %} selected{% endif %}" value="{{ source_line.0 }}">
+                    {% if source_line.0 == template_info.line %}
+                        <pre>{{ template_info.before }}<span class="specific">{{ template_info.during }}</span>{{ template_info.after }}</pre>
+                    {% else %}
+                        <pre>{{ source_line.1 }}</pre>
+                    {% endif %}
+                {% endfor %}
+                </table>
+            </div>
+            {% endif %}
+            {% if frames %}
+            <div id="traceback">
+              <h2>Traceback</h2>
+              {% autoescape off %}
+              <div id="browserTraceback">
+                <ul class="traceback">
+                  {% for frame in frames %}
+                    <li class="frame">
+                      <code>{{ frame.filename|escape }}</code> in <code>{{ frame.function|escape }}</code>
+
+                      {% if frame.context_line %}
+                        <div class="context" id="c{{ frame.id }}">
+                          {% if frame.pre_context %}
+                            <ol start="{{ frame.pre_context_lineno }}" class="pre-context" id="pre{{ frame.id }}">{% for line in frame.pre_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
+                          {% endif %}
+                          <ol start="{{ frame.lineno }}" class="context-line"><li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ frame.context_line|escape }} <span>...</span></li></ol>
+                          {% if frame.post_context %}
+                            <ol start='{{ frame.lineno|plus:1 }}' class="post-context" id="post{{ frame.id }}">{% for line in frame.post_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
+                          {% endif %}
+                        </div>
+                      {% endif %}
+
+                      {% if frame.vars %}
+                        <div class="commands">
+                            <a href="#" onclick="return varToggle(this, '{{ frame.id }}')"><span>&#x25b6;</span> Local vars</a>
+                        </div>
+                        <table class="vars" id="v{{ frame.id }}">
+                          <thead>
+                            <tr>
+                              <th>Variable</th>
+                              <th>Value</th>
+                            </tr>
+                          </thead>
+                          <tbody>
+                          {% for var in frame.vars|dictsort:"0" %}
+                            <tr>
+                              <td>{{ var.0|escape }}</td>
+                              <td class="code"><pre>{{ var.1|pprint|escape }}</pre></td>
+                            </tr>
+                          {% endfor %}
+                          </tbody>
+                        </table>
+                      {% endif %}
+                    </li>
+                  {% endfor %}
+                </ul>
+              </div>
+              {% endautoescape %}
+            </div>
+            {% else %}
+                {% if group.traceback %}
+                    <pre>{{ group.traceback }}</pre>
+                {% endif %}
             {% endif %}
             
             {% if group|has_charts %}
-            <h2>{% trans "Frequency" %}</h2>
-            <div id="chart">
-                <noscript>{% trans "Get yourself some JavaScripts dood" %}</noscript>
-                <p>Loading...</p>
-            </div>
+                <h2>{% trans "Frequency" %}</h2>
+                <div id="chart">
+                    <noscript>{% trans "Get yourself some JavaScripts dood" %}</noscript>
+                    <p>Loading...</p>
+                </div>
             {% endif %}
 
             <div id="requestinfo">
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 743f0e5867..da348ec53f 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -16,6 +16,11 @@ import datetime
 
 register = template.Library()
 
+# seriously Django?
+@register.filter
+def plus(value, amount):
+    return int(value) + int(amount)
+
 @register.filter
 def has_charts(group):
     from sentry.utils.charts import has_charts
diff --git a/sentry/utils/stacks.py b/sentry/utils/stacks.py
new file mode 100644
index 0000000000..e4ab7380a1
--- /dev/null
+++ b/sentry/utils/stacks.py
@@ -0,0 +1,157 @@
+import inspect
+import re
+
+from django.utils.html import escape
+
+from sentry.conf import settings
+from sentry.utils import get_installed_apps, shorten, varmap, \
+                         transform
+
+def get_lines_from_file(filename, lineno, context_lines, loader=None, module_name=None):
+    """
+    Returns context_lines before and after lineno from file.
+    Returns (pre_context_lineno, pre_context, context_line, post_context).
+    """
+    source = None
+    if loader is not None and hasattr(loader, "get_source"):
+        source = loader.get_source(module_name)
+        if source is not None:
+            source = source.splitlines()
+    if source is None:
+        try:
+            f = open(filename)
+            try:
+                source = f.readlines()
+            finally:
+                f.close()
+        except (OSError, IOError):
+            pass
+    if source is None:
+        return None, [], None, []
+
+    encoding = 'ascii'
+    for line in source[:2]:
+        # File coding may be specified. Match pattern from PEP-263
+        # (http://www.python.org/dev/peps/pep-0263/)
+        match = re.search(r'coding[:=]\s*([-\w.]+)', line)
+        if match:
+            encoding = match.group(1)
+            break
+    source = [unicode(sline, encoding, 'replace') for sline in source]
+
+    lower_bound = max(0, lineno - context_lines)
+    upper_bound = lineno + context_lines
+
+    pre_context = [line.strip('\n') for line in source[lower_bound:lineno]]
+    context_line = source[lineno].strip('\n')
+    post_context = [line.strip('\n') for line in source[lineno+1:upper_bound]]
+
+    return lower_bound, pre_context, context_line, post_context
+
+def get_culprit(frames):
+    # We iterate through each frame looking for a deterministic culprit
+    # When one is found, we mark it as last "best guess" (best_guess) and then
+    # check it against SENTRY_EXCLUDE_PATHS. If it isnt listed, then we
+    # use this option. If nothing is found, we use the "best guess".
+    def contains(iterator, value):
+        for k in iterator:
+            if value.startswith(k):
+                return True
+        return False
+
+    modules = get_installed_apps()
+    if settings.INCLUDE_PATHS:
+        modules = set(list(modules) + settings.INCLUDE_PATHS)
+
+    best_guess = None
+    for frame in frames:
+        try:
+            culprit = '.'.join([frame.f_globals['__name__'], frame.f_code.co_name])
+        except:
+            continue
+        if contains(modules, culprit):
+            if not (contains(settings.EXCLUDE_PATHS, culprit) and best_guess):
+                best_guess = culprit
+        elif best_guess:
+            break
+
+    return best_guess
+
+def iter_traceback_frames(tb):
+    while tb:
+        # support for __traceback_hide__ which is used by a few libraries
+        # to hide internal frames.
+        if tb.tb_frame.f_locals.get('__traceback_hide__'):
+            continue
+        yield tb.tb_frame
+        tb = tb.tb_next
+
+def iter_stack_frames():
+    for frame_crud in inspect.stack()[1:]:
+        yield frame_crud[0]
+
+def get_stack_info(frames):
+    results = []
+    for frame in frames:
+        filename = frame.f_code.co_filename
+        function = frame.f_code.co_name
+        lineno = frame.f_lineno - 1
+        loader = frame.f_globals.get('__loader__')
+        module_name = frame.f_globals.get('__name__')
+        pre_context_lineno, pre_context, context_line, post_context = get_lines_from_file(filename, lineno, 7, loader, module_name)
+        if pre_context_lineno is not None:
+            results.append({
+                'id': id(frame),
+                'filename': filename,
+                'module': module_name,
+                'function': function,
+                'lineno': lineno + 1,
+                # TODO: vars need to be references
+                'vars': transform(frame.f_locals),
+                'pre_context': pre_context,
+                'context_line': context_line,
+                'post_context': post_context,
+                'pre_context_lineno': pre_context_lineno + 1,
+            })
+    return results
+
+def get_template_info(template_info, exc_value=None):
+    template_source, start, end, name = template_info
+    context_lines = 10
+    line = 0
+    upto = 0
+    source_lines = []
+    before = during = after = ""
+    for num, next in enumerate(linebreak_iter(template_source)):
+        if start >= upto and end <= next:
+            line = num
+            before = escape(template_source[upto:start])
+            during = escape(template_source[start:end])
+            after = escape(template_source[end:next])
+        source_lines.append( (num, escape(template_source[upto:next])) )
+        upto = next
+    total = len(source_lines)
+
+    top = max(1, line - context_lines)
+    bottom = min(total, line + 1 + context_lines)
+
+    return {
+        'message': exc_value and exc_value.args[0] or None,
+        'source_lines': source_lines[top:bottom],
+        'before': before,
+        'during': during,
+        'after': after,
+        'top': top,
+        'bottom': bottom,
+        'total': total,
+        'line': line,
+        'name': name,
+    }
+
+def linebreak_iter(template_source):
+    yield 0
+    p = template_source.find('\n')
+    while p >= 0:
+        yield p+1
+        p = template_source.find('\n', p+1)
+    yield len(template_source) + 1
\ No newline at end of file
diff --git a/sentry/web/reporter.py b/sentry/web/reporter.py
deleted file mode 100644
index 2118669a78..0000000000
--- a/sentry/web/reporter.py
+++ /dev/null
@@ -1,202 +0,0 @@
-from pprint import pformat
-
-from django.template import Template, Context, TemplateDoesNotExist
-from django.utils.encoding import smart_unicode
-from django.utils.html import escape
-from django.views.debug import ExceptionReporter, linebreak_iter
-
-class ImprovedExceptionReporter(ExceptionReporter):
-    def __init__(self, request, exc_type, exc_value, frames, template_info=None):
-        ExceptionReporter.__init__(self, request, exc_type, exc_value, None)
-        self.frames = frames
-        self._template = template_info
-
-    def get_traceback_frames(self):
-        return self.frames
-
-    def get_template_exception_info(self):
-        template_source, start, end, name = self._template
-        context_lines = 10
-        line = 0
-        upto = 0
-        source_lines = []
-        before = during = after = ""
-        for num, next in enumerate(linebreak_iter(template_source)):
-            if start >= upto and end <= next:
-                line = num
-                before = escape(template_source[upto:start])
-                during = escape(template_source[start:end])
-                after = escape(template_source[end:next])
-            source_lines.append( (num, escape(template_source[upto:next])) )
-            upto = next
-        total = len(source_lines)
-
-        top = max(1, line - context_lines)
-        bottom = min(total, line + 1 + context_lines)
-
-        self.template_info = {
-            'message': self.exc_value.args[0],
-            'source_lines': source_lines[top:bottom],
-            'before': before,
-            'during': during,
-            'after': after,
-            'top': top,
-            'bottom': bottom,
-            'total': total,
-            'line': line,
-            'name': name,
-        }
-
-    def get_traceback_html(self):
-        "Return HTML code for traceback."
-
-        if issubclass(self.exc_type, TemplateDoesNotExist):
-            self.template_does_not_exist = True
-        if self._template:
-            self.get_template_exception_info()
-
-        frames = self.get_traceback_frames()
-
-        unicode_hint = ''
-        if issubclass(self.exc_type, UnicodeError):
-            start = getattr(self.exc_value, 'start', None)
-            end = getattr(self.exc_value, 'end', None)
-            if start is not None and end is not None:
-                unicode_str = self.exc_value.args[1]
-                unicode_hint = smart_unicode(unicode_str[max(start-5, 0):min(end+5, len(unicode_str))], 'ascii', errors='replace')
-        t = Template(TECHNICAL_500_TEMPLATE, name='Technical 500 template')
-        c = Context({
-            'exception_type': self.exc_type.__name__,
-            'exception_value': smart_unicode(self.exc_value, errors='replace'),
-            'unicode_hint': unicode_hint,
-            'frames': frames,
-            'lastframe': frames and frames[-1] or None,
-            'request': self.request,
-            'template_info': self.template_info,
-            'template_does_not_exist': self.template_does_not_exist,
-        })
-        return t.render(c)
-
-TECHNICAL_500_TEMPLATE = """
-<div id="summary">
-  <h3>{{ exception_type }}: {{ exception_value|escape }}</h3>
-  <table class="meta">
-    <tr>
-      <th>Request Method:</th>
-      <td>{{ request.META.REQUEST_METHOD }}</td>
-    </tr>
-    {% if request.path_info %}
-    <tr>
-      <th>Request URL:</th>
-      <td><a href="{{ request.build_absolute_uri|escape }}">{{ request.build_absolute_uri|escape }}</a></td>
-    </tr>
-    {% endif %}
-    <tr>
-      <th>Exception Value:</th>
-      <td><pre>{{ exception_value|escape }}</pre></td>
-    </tr>
-    {% if lastframe %}
-    <tr>
-      <th>Exception Location:</th>
-      <td>{{ lastframe.filename|escape }} in {{ lastframe.function|escape }}, line {{ lastframe.lineno }}</td>
-    </tr>
-    {% endif %}
-  </table>
-</div>
-{% if unicode_hint %}
-<div id="unicode-hint">
-    <h2>Unicode error hint</h2>
-    <p>The string that could not be encoded/decoded was: <strong>{{ unicode_hint|escape }}</strong></p>
-</div>
-{% endif %}
-{% if template_info %}
-<div id="template">
-   <h2>Template error</h2>
-   <p>In template <code>{{ template_info.name }}</code>, error at line <strong>{{ template_info.line }}</strong></p>
-   <h3>{{ template_info.message }}</h3>
-   <table class="source{% if template_info.top %} cut-top{% endif %}{% ifnotequal template_info.bottom template_info.total %} cut-bottom{% endifnotequal %}">
-   {% for source_line in template_info.source_lines %}
-   {% ifequal source_line.0 template_info.line %}
-       <tr class="error"><th>{{ source_line.0 }}</th>
-       <td>{{ template_info.before }}<span class="specific">{{ template_info.during }}</span>{{ template_info.after }}</td></tr>
-   {% else %}
-      <tr><th>{{ source_line.0 }}</th>
-      <td>{{ source_line.1 }}</td></tr>
-   {% endifequal %}
-   {% endfor %}
-   </table>
-</div>
-{% endif %}
-<div id="traceback">
-  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">Switch to copy-and-paste view</a></span></h2>
-  {% autoescape off %}
-  <div id="browserTraceback">
-    <ul class="traceback">
-      {% for frame in frames %}
-        <li class="frame">
-          <code>{{ frame.filename|escape }}</code> in <code>{{ frame.function|escape }}</code>
-
-          {% if frame.context_line %}
-            <div class="context" id="c{{ frame.id }}">
-              {% if frame.pre_context %}
-                <ol start="{{ frame.pre_context_lineno }}" class="pre-context" id="pre{{ frame.id }}">{% for line in frame.pre_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
-              {% endif %}
-              <ol start="{{ frame.lineno }}" class="context-line"><li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ frame.context_line|escape }} <span>...</span></li></ol>
-              {% if frame.post_context %}
-                <ol start='{{ frame.lineno|add:"1" }}' class="post-context" id="post{{ frame.id }}">{% for line in frame.post_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
-              {% endif %}
-            </div>
-          {% endif %}
-
-          {% if frame.vars %}
-            <div class="commands">
-                <a href="javascript:void(0);" onclick="return varToggle(this, '{{ frame.id }}')"><span>&#x25b6;</span> Local vars</a>
-            </div>
-            <table class="vars" id="v{{ frame.id }}">
-              <thead>
-                <tr>
-                  <th>Variable</th>
-                  <th>Value</th>
-                </tr>
-              </thead>
-              <tbody>
-              {% for var in frame.vars|dictsort:"0" %}
-                <tr>
-                  <td>{{ var.0|escape }}</td>
-                  <td class="code"><pre>{{ var.1|pprint|escape }}</pre></td>
-                </tr>
-              {% endfor %}
-              </tbody>
-            </table>
-          {% endif %}
-        </li>
-      {% endfor %}
-    </ul>
-  </div>
-  {% endautoescape %}
-  <div id="pastebinTraceback" class="pastebin">
-    <textarea id="traceback_area" cols="140" rows="25">
-Environment:
-
-{% if request.META %}Request Method: {{ request.META.REQUEST_METHOD }}{% endif %}
-Request URL: {{ request.build_absolute_uri|escape }}
-
-{% if template_does_not_exist %}Template Loader Error: (Unavailable in db-log)
-{% endif %}{% if template_info %}
-Template error:
-In template {{ template_info.name }}, error at line {{ template_info.line }}
-   {{ template_info.message }}{% for source_line in template_info.source_lines %}{% ifequal source_line.0 template_info.line %}
-   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}
-{% else %}
-   {{ source_line.0 }} : {{ source_line.1 }}
-{% endifequal %}{% endfor %}{% endif %}
-Traceback:
-{% for frame in frames %}File "{{ frame.filename|escape }}" in {{ frame.function|escape }}
-{% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line|escape }}{% endif %}
-{% endfor %}
-Exception Type: {{ exception_type|escape }} at {{ request.path_info|escape }}
-Exception Value: {{ exception_value|escape }}
-</textarea>
-  </div>
-</div>
-"""
\ No newline at end of file
diff --git a/sentry/web/views.py b/sentry/web/views.py
index 4963491832..d84d525f6c 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -14,7 +14,6 @@ from django.http import HttpResponse, HttpResponseBadRequest, \
 from django.shortcuts import get_object_or_404
 from django.template.loader import render_to_string
 from django.utils.encoding import smart_str
-from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry.conf import settings
@@ -23,8 +22,7 @@ from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
 from sentry.utils import get_filters, is_float, get_signature, parse_auth_header, json
 from sentry.utils.compat import pickle
-from sentry.utils.charts import has_charts
-from sentry.web.reporter import ImprovedExceptionReporter
+from sentry.utils.stacks import get_template_info
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$')
 
@@ -314,33 +312,47 @@ def group(request, group_id):
         # (such as a post_save signal failing)
         obj = Message(group=group, data=group.data)
 
-    if '__sentry__' in obj.data and 'exc' in obj.data['__sentry__']:
-        module, args, frames = obj.data['__sentry__']['exc']
-        obj.class_name = str(obj.class_name)
-        # We fake the exception class due to many issues with imports/builtins/etc
-        exc_type = type(obj.class_name, (Exception,), {})
-        exc_value = exc_type(obj.message)
+    # template information
+    template_info = None
+    # exception information
+    exc_type, exc_value = None, None
+    # stack frames
+    frames = None
+    # module versions
+    version_data = None
+
+    if '__sentry__' in obj.data:
+        sentry_data = obj.data['__sentry__']
+        if 'exc' in sentry_data:
+            module, args, frames = sentry_data['exc']
+        elif 'exception' in sentry_data:
+            module, args = sentry_data['exception']
+        else:
+            module, args = None, None
+        
+        if 'frames' in obj.data:
+            frames = sentry_data['frames']
 
-        exc_value.args = args
-    
-        reporter = ImprovedExceptionReporter(obj.request, exc_type, exc_value, frames, obj.data['__sentry__'].get('template'))
-        traceback = mark_safe(reporter.get_traceback_html())
-        version_data = obj.data['__sentry__'].get('versions', {}).iteritems()
+        if module and args:
+            # We fake the exception class due to many issues with imports/builtins/etc
+            exc_type = type(str(obj.class_name), (Exception,), {})
+            exc_value = exc_type(obj.message)
+            exc_value.args = args
 
-    elif group.traceback:
-        traceback = mark_safe('<pre>%s</pre>' % (group.traceback,))
-        version_data = None
-    
-    else:
-        traceback = None
-        version_data = None
+        if 'template' in sentry_data:
+            template_info = get_template_info(sentry_data['template'], exc_value)
     
+        if 'versions' in sentry_data:
+            version_data = sentry_data['versions'].iteritems()
+
+
     return render_to_response('sentry/group/details.html', {
         'page': 'details',
         'group': group,
         'json_data': iter_data(obj),
-        'traceback': traceback,
         'version_data': version_data,
+        'frames': frames,
+        'template_info': template_info,
     })
 
 @login_required
@@ -361,31 +373,42 @@ def group_message_details(request, group_id, message_id):
     group = get_object_or_404(GroupedMessage, pk=group_id)
 
     message = get_object_or_404(group.message_set, pk=message_id)
+
+    # template information
+    template_info = None
+    # exception information
+    exc_type, exc_value = None, None
+    # stack frames
+    frames = None
     
-    if '__sentry__' in message.data and 'exc' in message.data['__sentry__']:
-        module, args, frames = message.data['__sentry__']['exc']
-        message.class_name = str(message.class_name)
-        # We fake the exception class due to many issues with imports/builtins/etc
-        exc_type = type(message.class_name, (Exception,), {})
-        exc_value = exc_type(message.message)
-
-        exc_value.args = args
-    
-        reporter = ImprovedExceptionReporter(message.request, exc_type, exc_value, frames, message.data['__sentry__'].get('template'))
-        traceback = mark_safe(reporter.get_traceback_html())
+    if '__sentry__' in message.data:
+        sentry_data = message.data['__sentry__']
+        if 'exc' in sentry_data:
+            module, args, frames = sentry_data['exc']
+        elif 'exception' in sentry_data:
+            module, args = sentry_data['exception']
+        else:
+            module, args = None, None
+        
+        if 'frames' in message.data:
+            frames = sentry_data['frames']
 
-    elif group.traceback:
-        traceback = mark_safe('<pre>%s</pre>' % (group.traceback,))
+        if module and args:
+            # We fake the exception class due to many issues with imports/builtins/etc
+            exc_type = type(str(message.class_name), (Exception,), {})
+            exc_value = exc_type(message.message)
+            exc_value.args = args
 
-    else:
-        traceback = None
+        if 'template' in sentry_data:
+            template_info = get_template_info(sentry_data['template'], exc_value)
     
     return render_to_response('sentry/group/message.html', {
         'page': 'messages',
         'group': group,
         'message': message,
         'json_data': iter_data(message),
-        'traceback': traceback,
+        'frames': frames,
+        'template_info': template_info,
     })
 
 @csrf_exempt
diff --git a/setup.py b/setup.py
index 2457c91390..a2540fc6d1 100755
--- a/setup.py
+++ b/setup.py
@@ -41,7 +41,7 @@ if sys.version_info[:2] < (2, 5):
 
 setup(
     name='django-sentry',
-    version='1.9.0',
+    version='1.10.0',
     author='David Cramer',
     author_email='dcramer@gmail.com',
     url='http://github.com/dcramer/django-sentry',
diff --git a/tests/tests.py b/tests/tests.py
index 47cee96f11..8b58e4ebbe 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -171,7 +171,20 @@ class SentryTestCase(BaseTestCase):
             last = Message.objects.all().order_by('-id')[0:1].get()
             self.assertEquals(last.class_name, 'ValueError')
             self.assertEquals(last.message, 'This is a test info with an exception')
-            self.assertTrue(last.data.get('__sentry__', {}).get('exc'))
+            self.assertTrue('__sentry__' in last.data)
+            self.assertTrue('exception' in last.data['__sentry__'])
+            self.assertTrue('frames' in last.data['__sentry__'])
+
+        # test stacks
+        logger.info('This is a test of stacks', extra={'stack': True})
+        self.assertEquals(Message.objects.count(), 7)
+        self.assertEquals(GroupedMessage.objects.count(), 6)
+        last = Message.objects.all().order_by('-id')[0:1].get()
+        self.assertEquals(last.view, 'tests.tests.test_logger')
+        self.assertEquals(last.class_name, None)
+        self.assertEquals(last.message, 'This is a test of stacks')
+        self.assertTrue('__sentry__' in last.data)
+        self.assertTrue('frames' in last.data['__sentry__'])
 
         self.tearDownHandler()
 
@@ -195,7 +208,8 @@ class SentryTestCase(BaseTestCase):
         except Message.DoesNotExist, exc:
             message_id = get_client().create_from_exception()
             error = Message.objects.get(message_id=message_id)
-            self.assertTrue(error.data.get('__sentry__', {}).get('exc'))
+            self.assertTrue('__sentry__' in error.data)
+            self.assertTrue('exception' in error.data['__sentry__'])
         else:
             self.fail('Unable to create `Message` entry.')
 
@@ -204,7 +218,8 @@ class SentryTestCase(BaseTestCase):
         except Message.DoesNotExist, exc:
             message_id = get_client().create_from_exception()
             error = Message.objects.get(message_id=message_id)
-            self.assertTrue(error.data.get('__sentry__', {}).get('exc'))
+            self.assertTrue('__sentry__' in error.data)
+            self.assertTrue('exception' in error.data['__sentry__'])
         else:
             self.fail('Unable to create `Message` entry.')
 
