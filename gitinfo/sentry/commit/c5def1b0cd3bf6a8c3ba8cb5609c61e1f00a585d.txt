commit c5def1b0cd3bf6a8c3ba8cb5609c61e1f00a585d
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon May 23 16:32:02 2016 -0700

    Add session expired message tests

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 545da0c3f0..599c291274 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -189,7 +189,7 @@ OK_PLUGIN_DISABLED = _("The {name} integration has been disabled.")
 
 OK_PLUGIN_SAVED = _('Configuration for the {name} integration has been saved.')
 
-WARN_SESSION_EXPIRED = _('Your session has expired.')
+WARN_SESSION_EXPIRED = 'Your session has expired.'  # TODO: translate this
 
 # Key to use when ordering a list of events manually
 EVENT_ORDERING_KEY = attrgetter('datetime', 'id')
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index 706f6a6791..36ddbc6de1 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -19,6 +19,14 @@ class AuthLoginTest(TestCase):
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/login.html')
 
+    def test_renders_session_expire_message(self):
+        self.client.cookies['session_expired'] = '1'
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/login.html')
+        assert len(resp.context['messages']) == 1
+
     def test_login_invalid_password(self):
         # load it once for test cookie
         self.client.get(self.path)
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index 363fcf6927..3b2e39d6c2 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -25,6 +25,17 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert 'provider_key' not in resp.context
         assert resp.context['CAN_REGISTER']
 
+    def test_renders_session_expire_message(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        self.client.cookies['session_expired'] = '1'
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/organization-login.html')
+        assert len(resp.context['messages']) == 1
+
     def test_flow_as_anonymous(self):
         organization = self.create_organization(name='foo', owner=self.user)
         auth_provider = AuthProvider.objects.create(
