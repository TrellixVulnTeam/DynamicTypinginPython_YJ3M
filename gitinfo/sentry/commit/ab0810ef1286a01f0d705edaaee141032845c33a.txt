commit ab0810ef1286a01f0d705edaaee141032845c33a
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 11 12:05:55 2015 -0800

    Add hasSeen property to group update endpoints

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 88c3a0522f..5208654a6b 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -21,6 +21,7 @@ class GroupSerializer(serializers.Serializer):
         STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
     ))
     isBookmarked = serializers.BooleanField()
+    hasSeen = serializers.BooleanField()
     assignedTo = UserField()
 
 
@@ -165,6 +166,22 @@ class GroupDetailsEndpoint(Endpoint):
             group.status = STATUS_CHOICES[result['status']]
             group.save()
 
+        if result.get('hasSeen'):
+            instance, created = create_or_update(
+                GroupSeen,
+                group=group,
+                user=request.user,
+                project=group.project,
+                defaults={
+                    'last_seen': timezone.now(),
+                }
+            )
+        elif result.get('hasSeen') is False:
+            GroupSeen.objects.filter(
+                group=group,
+                user=request.user,
+            ).delete()
+
         if result.get('isBookmarked'):
             GroupBookmark.objects.get_or_create(
                 project=group.project,
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index f3c1162d9e..93a3e5c120 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -15,7 +15,8 @@ from sentry.constants import (
 )
 from sentry.db.models.query import create_or_update
 from sentry.models import (
-    Activity, Group, GroupBookmark, GroupMeta, GroupStatus, Project, TagKey
+    Activity, Group, GroupBookmark, GroupMeta, GroupSeen, GroupStatus, Project,
+    TagKey
 )
 from sentry.search.utils import parse_query
 from sentry.tasks.deletion import delete_group
@@ -28,6 +29,7 @@ class GroupSerializer(serializers.Serializer):
     status = serializers.ChoiceField(choices=zip(
         STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
     ))
+    hasSeen = serializers.BooleanField()
     isBookmarked = serializers.BooleanField()
     merge = serializers.BooleanField()
 
@@ -227,6 +229,23 @@ class ProjectGroupIndexEndpoint(Endpoint):
                 for group in group_list:
                     group.status = new_status
 
+        if result.get('hasSeen'):
+            for group in group_list:
+                instance, created = create_or_update(
+                    GroupSeen,
+                    group=group,
+                    user=request.user,
+                    project=group.project,
+                    defaults={
+                        'last_seen': timezone.now(),
+                    }
+                )
+        elif result.get('hasSeen') is False:
+            GroupSeen.objects.filter(
+                group__in=group_ids,
+                user=request.user,
+            ).delete()
+
         if result.get('isBookmarked'):
             for group in group_list:
                 GroupBookmark.objects.get_or_create(
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 6d7fc5272f..a518486072 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -3,8 +3,8 @@ from __future__ import absolute_import, print_function
 from django.core.urlresolvers import reverse
 
 from sentry.models import (
-    Activity, Group, GroupAssignee, GroupBookmark, GroupStatus, GroupTagValue,
-    Release
+    Activity, Group, GroupAssignee, GroupBookmark, GroupSeen, GroupStatus,
+    GroupTagValue, Release
 )
 from sentry.testutils import APITestCase
 
@@ -127,6 +127,32 @@ class GroupUpdateTest(APITestCase):
             group=group, user=self.user
         ).exists()
 
+    def test_mark_seen(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-details', kwargs={
+            'group_id': group.id
+        })
+        response = self.client.put(url, data={
+            'hasSeen': '1',
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert GroupSeen.objects.filter(
+            group=group, user=self.user).exists()
+
+        response = self.client.put(url, data={
+            'hasSeen': '0',
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert not GroupSeen.objects.filter(
+            group=group, user=self.user).exists()
+
 
 class GroupDeleteTest(APITestCase):
     def test_delete(self):
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 51c48482e1..bee51ec612 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from mock import patch
 
-from sentry.models import Group, GroupBookmark, GroupStatus
+from sentry.models import Group, GroupBookmark, GroupSeen, GroupStatus
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import parse_link_header
 
@@ -132,6 +132,45 @@ class GroupUpdateTest(APITestCase):
         bookmark4 = GroupBookmark.objects.filter(group=group4, user=self.user)
         assert not bookmark4.exists()
 
+    def test_set_has_seen(self):
+        project = self.project
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
+        group4 = self.create_group(
+            project=self.create_project(slug='foo'),
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+
+        self.login_as(user=self.user)
+        url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
+            url=reverse('sentry-api-0-project-group-index', kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug
+            }),
+            group1=group1,
+            group2=group2,
+            group4=group4,
+        )
+        response = self.client.put(url, data={
+            'hasSeen': 'true',
+        }, format='json')
+        assert response.status_code == 200
+        assert response.data == {
+            'hasSeen': True,
+        }
+
+        r1 = GroupSeen.objects.filter(group=group1, user=self.user)
+        assert r1.exists()
+
+        r2 = GroupSeen.objects.filter(group=group2, user=self.user)
+        assert r2.exists()
+
+        r3 = GroupSeen.objects.filter(group=group3, user=self.user)
+        assert not r3.exists()
+
+        r4 = GroupSeen.objects.filter(group=group4, user=self.user)
+        assert not r4.exists()
+
     @patch('sentry.api.endpoints.project_group_index.merge_group')
     def test_merge(self, merge_group):
         group1 = self.create_group(checksum='a' * 32, times_seen=1)
