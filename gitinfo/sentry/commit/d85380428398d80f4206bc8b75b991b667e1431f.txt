commit d85380428398d80f4206bc8b75b991b667e1431f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jul 26 11:21:20 2018 -0700

    feat(discover): Add autosizing for columns (#9196)
    
    Autosizes columns if there are less than 20 columns based on
    an estimate of the width of the first 3 rows.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
index 16976d5dce..bacd5b2de1 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
@@ -6,8 +6,8 @@ import {Box} from 'grid-emotion';
 
 import theme from 'app/utils/theme';
 import AutoSelectText from 'app/components/autoSelectText';
-
 import {getDisplayValue} from './utils';
+
 /**
  * Renders results in a table as well as a query summary (timing, rows returned)
  * from any Snuba result
@@ -17,6 +17,11 @@ export default class Result extends React.Component {
     result: PropTypes.object.isRequired,
   };
 
+  componentDidMount() {
+    // Create canvas once in order to measure column widths
+    this.canvas = document.createElement('canvas');
+  }
+
   cellRenderer = ({key, rowIndex, columnIndex, style}) => {
     const {meta, data} = this.props.result;
     const colName = meta[columnIndex].name;
@@ -32,6 +37,40 @@ export default class Result extends React.Component {
     );
   };
 
+  // Estimates the column width based on the header row and the first two rows
+  // of data. Since this might be expensive, we'll only do this if there are
+  // less than 20 columns of data to check
+  getColumnWidth = ({index}) => {
+    const MIN_COL_WIDTH = 100;
+    const MAX_COL_WIDTH = 200;
+
+    const {meta, data} = this.props.result;
+
+    if (meta.length < 20) {
+      const colName = meta[index].name;
+      const sizes = [this.measureText(colName, true)];
+
+      if (data.length > 0) {
+        sizes.push(this.measureText(data[0].colName, false));
+      }
+
+      if (data.length > 1) {
+        sizes.push(this.measureText(data[1].colName, false));
+      }
+
+      // Ensure size is within max and min bounds, add 8px for cell padding
+      return Math.max(Math.min(Math.max(...sizes) + 8, MAX_COL_WIDTH), MIN_COL_WIDTH);
+    }
+
+    return MIN_COL_WIDTH;
+  };
+
+  measureText = (text, isHeader) => {
+    const context = this.canvas.getContext('2d');
+    context.font = isHeader ? 'bold 14px Rubik' : 'normal 14px Rubik';
+    return Math.ceil(context.measureText(text).width);
+  };
+
   renderTable() {
     const {meta, data} = this.props.result;
 
@@ -48,7 +87,7 @@ export default class Result extends React.Component {
               columnCount={meta.length}
               fixedRowCount={1}
               rowHeight={30}
-              columnWidth={120}
+              columnWidth={this.getColumnWidth}
               cellRenderer={this.cellRenderer}
               style={{border: `1px solid ${theme.borderLight}`}}
               styleTopRightGrid={{borderBottom: `2px solid ${theme.borderDark}`}}
