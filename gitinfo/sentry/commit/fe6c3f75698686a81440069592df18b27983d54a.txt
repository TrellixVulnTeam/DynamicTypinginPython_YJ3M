commit fe6c3f75698686a81440069592df18b27983d54a
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Jun 12 13:38:57 2018 -0700

    feat(2fa): Unblock require 2fa across organization (#8694)
    
    * Update redirect to new settings page
    * Add two-factor required warning

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index bc736324a7..3d3e6836d9 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -125,7 +125,7 @@ class OrganizationSerializer(serializers.Serializer):
         has_2fa = Authenticator.objects.user_has_2fa(user)
         if value and not has_2fa:
             raise serializers.ValidationError(
-                'User setting two-factor authentication enforcement without two-factor authentication enabled.')
+                'Cannot require two-factor authentication without personal two-factor enabled.')
         return attrs
 
     def validate(self, attrs):
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 4a2bdd3de7..faaebfc397 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -50,6 +50,7 @@ class OrganizationSerializer(Serializer):
             'name': obj.name or obj.slug,
             'dateCreated': obj.date_added,
             'isEarlyAdopter': bool(obj.flags.early_adopter),
+            'require2FA': bool(obj.flags.require_2fa),
             'avatar': avatar,
         }
 
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index e0b9fba347..f563bf4074 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -375,7 +375,7 @@ class Organization(Model):
             if not Authenticator.objects.user_has_2fa(user):
                 context = {
                     'user': user,
-                    'url': absolute_uri(reverse('sentry-account-settings-2fa')),
+                    'url': absolute_uri(reverse('sentry-account-settings-security')),
                     'organization': self
                 }
                 message = MessageBuilder(
diff --git a/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx b/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx
index e077297147..3c80ca4cf3 100644
--- a/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx
@@ -47,12 +47,12 @@ class RecoveryOptionsModal extends AsyncComponent {
     return (
       <React.Fragment>
         <Header closeButton onHide={closeModal}>
-          {t('Two Factor Authentication Enabled')}
+          {t('Two-Factor Authentication Enabled')}
         </Header>
 
         <Body>
           <TextBlock>
-            {t(`Two factor authentication via ${authenticatorName} has been enabled.`)}
+            {t(`Two-factor authentication via ${authenticatorName} has been enabled.`)}
           </TextBlock>
           <TextBlock>
             {t('You should now set up recovery options to secure your account.')}
@@ -68,7 +68,7 @@ class RecoveryOptionsModal extends AsyncComponent {
             <Alert type="warning">
               {t(
                 `Recovery codes are the only way to access your account if you lose
-                  your device and cannot receive two factor authentication codes.`
+                  your device and cannot receive two-factor authentication codes.`
               )}
             </Alert>
           )}
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
new file mode 100644
index 0000000000..df9b606bae
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
@@ -0,0 +1,53 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {capitalize} from 'lodash';
+import {t} from 'app/locale';
+import Alert from 'app/components/alert';
+import AsyncComponent from 'app/components/asyncComponent';
+import space from 'app/styles/space';
+
+let StyledAlert = styled(Alert)`
+  margin: ${space(3)} 0;
+`;
+
+class TwoFactorRequired extends AsyncComponent {
+  getEndpoints() {
+    return [['organizations', '/organizations/']];
+  }
+
+  renderBody() {
+    let orgsRequire2fa = this.state.organizations
+      .filter(org => org.require2FA)
+      .map(({name}) => capitalize(name));
+
+    if (!orgsRequire2fa.length) {
+      return null;
+    }
+
+    // singular vs plural message
+    let plural = orgsRequire2fa.length > 1;
+
+    let organizationNames = [
+      orgsRequire2fa.slice(0, -1).join(', '),
+      orgsRequire2fa.slice(-1)[0],
+    ].join(plural ? ' and ' : '');
+
+    let require = plural ? t('organizations require') : t('organization requires');
+    let organizations = plural ? t('these organizations') : t('this organization');
+
+    return (
+      <StyledAlert className="require-2fa" type="error" icon="icon-circle-exclamation">
+        {t(
+          'The %s %s all members to enable two-factor authentication.' +
+            'You need to enable two-factor authentication to access projects under %s',
+          organizationNames,
+          require,
+          organizations
+        )}
+      </StyledAlert>
+    );
+  }
+}
+
+export default TwoFactorRequired;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
index 487878d610..312d9af095 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
@@ -14,6 +14,7 @@ import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
+import TwoFactorRequired from 'app/views/settings/account/accountSecurity/components/twoFactorRequired';
 import RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';
 import PasswordForm from 'app/views/settings/account/passwordForm';
 
@@ -52,17 +53,23 @@ class AccountSecurity extends AsyncView {
   };
 
   renderBody() {
-    let isEmpty = !this.state.authenticators.length;
+    let {authenticators} = this.state;
+    let isEmpty = !authenticators.length;
+    let twoFactorEnrolled = authenticators.some(({isEnrolled}) => {
+      return isEnrolled;
+    });
 
     return (
       <div>
         <SettingsPageHeader title="Security" />
 
+        {!isEmpty && !twoFactorEnrolled && <TwoFactorRequired />}
+
         <PasswordForm />
 
         <Panel>
           <PanelHeader>
-            <Box>{t('Two Factor Authentication')}</Box>
+            <Box>{t('Two-Factor Authentication')}</Box>
           </PanelHeader>
 
           {isEmpty && (
@@ -71,7 +78,7 @@ class AccountSecurity extends AsyncView {
 
           <PanelBody>
             {!isEmpty &&
-              this.state.authenticators.map(auth => {
+              authenticators.map(auth => {
                 let {
                   id,
                   authId,
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 1b6c035ec9..87b12a64e3 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -384,7 +384,7 @@ class APITestCase(BaseTestCase, BaseAPITestCase):
 class TwoFactorAPITestCase(APITestCase):
     @fixture
     def path_2fa(self):
-        return reverse('sentry-account-settings-2fa')
+        return reverse('sentry-account-settings-security')
 
     def enable_org_2fa(self, organization):
         organization.flags.require_2fa = True
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 58ee50fd50..f4ebaf9a8c 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -269,7 +269,7 @@ class BaseView(View, OrganizationMixin):
         return reverse('sentry-login')
 
     def get_not_2fa_compliant_url(self, request, *args, **kwargs):
-        return reverse('sentry-account-settings-2fa')
+        return reverse('sentry-account-settings-security')
 
     def get_context_data(self, request, **kwargs):
         context = csrf(request)
diff --git a/src/sentry/web/frontend/debug/debug_setup_2fa_email.py b/src/sentry/web/frontend/debug/debug_setup_2fa_email.py
index cd9f8eb782..996bd339ab 100644
--- a/src/sentry/web/frontend/debug/debug_setup_2fa_email.py
+++ b/src/sentry/web/frontend/debug/debug_setup_2fa_email.py
@@ -13,7 +13,7 @@ class DebugSetup2faEmailView(View):
     def get(self, request):
         context = {
             'user': request.user,
-            'url': absolute_uri(reverse('sentry-account-settings-2fa')),
+            'url': absolute_uri(reverse('sentry-account-settings-security')),
             'organization': Organization(
                 id=1,
                 slug='organization',
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 0aa5fbe5db..bcc85fc5b5 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -364,6 +364,10 @@ urlpatterns += patterns(
     url(r'^out/$', OutView.as_view()),
 
     url(r'^accept-transfer/$', react_page_view, name='sentry-accept-project-transfer'),
+    # User settings use generic_react_page_view, while any view
+    # acting on behalf of an organization should use react_page_view
+    url(r'^settings/account/security/$', generic_react_page_view, name='sentry-account-settings-security'),
+    url(r'^settings/account/', generic_react_page_view),
     url(r'^settings/', react_page_view),
     url(
         r'^settings/(?P<organization_slug>[\w_-]+)/members/$',
diff --git a/tests/js/setup.js b/tests/js/setup.js
index df9ef686cb..f4ae7212dc 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -326,7 +326,7 @@ window.TestStubs = {
         lastUsedAt: null,
         enrollButton: 'Activate',
         description:
-          'Recovery codes are the only way to access your account if you lose your device and cannot receive two factor authentication codes.',
+          'Recovery codes are the only way to access your account if you lose your device and cannot receive two-factor authentication codes.',
         isEnrolled: true,
         removeButton: null,
         id: 'recovery',
@@ -635,6 +635,33 @@ window.TestStubs = {
     };
   },
 
+  Organizations: params => {
+    return [
+      {
+        id: '1',
+        name: 'test 1',
+        slug: 'test 1',
+        require2FA: false,
+        status: {
+          id: 'active',
+          name: 'active',
+        },
+        ...params,
+      },
+      {
+        id: '2',
+        name: 'test 2',
+        slug: 'test 2',
+        require2FA: false,
+        status: {
+          id: 'active',
+          name: 'active',
+        },
+        ...params,
+      },
+    ];
+  },
+
   Plugin: params => {
     return {
       author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
diff --git a/tests/js/spec/views/accountSecurity.spec.jsx b/tests/js/spec/views/accountSecurity.spec.jsx
index 0d9cb022a9..57cf9e3070 100644
--- a/tests/js/spec/views/accountSecurity.spec.jsx
+++ b/tests/js/spec/views/accountSecurity.spec.jsx
@@ -5,10 +5,15 @@ import {Client} from 'app/api';
 import AccountSecurity from 'app/views/settings/account/accountSecurity';
 
 const ENDPOINT = '/users/me/authenticators/';
+const ORG_ENDPOINT = '/organizations/';
 
 describe('AccountSecurity', function() {
   beforeEach(function() {
     Client.clearMockResponses();
+    Client.addMockResponse({
+      url: ORG_ENDPOINT,
+      body: TestStubs.Organizations(),
+    });
   });
 
   it('renders empty', function() {
@@ -20,6 +25,7 @@ describe('AccountSecurity', function() {
     let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
 
     expect(wrapper.find('EmptyMessage')).toHaveLength(1);
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
   });
 
   it('renders a primary interface that is enrolled', function() {
@@ -43,6 +49,8 @@ describe('AccountSecurity', function() {
     // Remove button
     expect(wrapper.find('Button .icon-trash')).toHaveLength(1);
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
   });
 
   it('can delete enrolled authenticator', function() {
@@ -80,6 +88,8 @@ describe('AccountSecurity', function() {
       wrapper.update();
       expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(false);
     }, 1);
+    // still has another 2fa method
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
   });
 
   it('renders a primary interface that is not enrolled', function() {
@@ -99,6 +109,8 @@ describe('AccountSecurity', function() {
         .prop('children')
     ).toBe('Add');
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(false);
+    // user is not 2fa enrolled
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
   });
 
   it('renders a backup interface that is not enrolled', function() {
@@ -114,6 +126,8 @@ describe('AccountSecurity', function() {
     // There should be an View Codes button
     expect(wrapper.find('Button')).toHaveLength(0);
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(false);
+    // user is not 2fa enrolled
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
   });
 
   it('renders a backup interface that is enrolled', function() {
@@ -134,6 +148,8 @@ describe('AccountSecurity', function() {
         .prop('children')
     ).toBe('View Codes');
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
   });
 
   it('can change password', function() {
@@ -141,6 +157,7 @@ describe('AccountSecurity', function() {
       url: ENDPOINT,
       body: [TestStubs.Authenticators().Recovery({isEnrolled: false})],
     });
+
     let url = '/users/me/password/';
     let mock = Client.addMockResponse({
       url,
@@ -171,6 +188,8 @@ describe('AccountSecurity', function() {
         },
       })
     );
+    // user is not 2fa enrolled
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
   });
 
   it('requires current password to be entered', function() {
@@ -195,5 +214,7 @@ describe('AccountSecurity', function() {
     wrapper.find('PasswordForm form').simulate('submit');
 
     expect(mock).not.toHaveBeenCalled();
+    // user is not 2fa enrolled
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
   });
 });
diff --git a/tests/js/spec/views/twoFactorRequired.spec.jsx b/tests/js/spec/views/twoFactorRequired.spec.jsx
new file mode 100644
index 0000000000..d31fb3c585
--- /dev/null
+++ b/tests/js/spec/views/twoFactorRequired.spec.jsx
@@ -0,0 +1,94 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import TwoFactorRequired from 'app/views/settings/account/accountSecurity/';
+
+const ENDPOINT = '/users/me/authenticators/';
+const ORG_ENDPOINT = '/organizations/';
+
+describe('TwoFactorRequired', function() {
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+
+    MockApiClient.addMockResponse({
+      url: ENDPOINT,
+      body: [TestStubs.Authenticators().Totp({isEnrolled: false})],
+    });
+    MockApiClient.addMockResponse({
+      url: ORG_ENDPOINT,
+      body: TestStubs.Organizations({require2FA: false}),
+    });
+  });
+
+  it('renders empty', function() {
+    MockApiClient.addMockResponse({
+      url: ORG_ENDPOINT,
+      body: [],
+    });
+
+    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
+    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
+  });
+
+  it('does not render when 2FA is not required, not 2FA enrolled', function() {
+    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
+  });
+
+  it('does not render when 2FA is not required, 2FA is enrolled', function() {
+    MockApiClient.addMockResponse({
+      url: ENDPOINT,
+      body: [TestStubs.Authenticators().Totp({isEnrolled: true})],
+    });
+
+    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
+  });
+
+  it('does not render when 2FA is required, 2FA is enrolled', function() {
+    MockApiClient.addMockResponse({
+      url: ENDPOINT,
+      body: [TestStubs.Authenticators().Totp({isEnrolled: true})],
+    });
+    MockApiClient.addMockResponse({
+      url: ORG_ENDPOINT,
+      body: TestStubs.Organizations({require2FA: true}),
+    });
+
+    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
+  });
+
+  it('renders when 2FA is required for multiple orgs, 2FA is not enrolled', function() {
+    MockApiClient.addMockResponse({
+      url: ORG_ENDPOINT,
+      body: TestStubs.Organizations({require2FA: true}),
+    });
+
+    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(1);
+    expect(wrapper.find('StyledAlert[className="require-2fa"]').text()).toEqual(
+      expect.stringContaining('Test 1 and Test 2 organizations')
+    );
+  });
+
+  it('renders when 2FA is required for one org, 2FA is not enrolled', function() {
+    MockApiClient.addMockResponse({
+      url: ORG_ENDPOINT,
+      body: [
+        {
+          id: '1',
+          name: 'test 1',
+          require2FA: true,
+        },
+      ],
+    });
+
+    let wrapper = mount(<TwoFactorRequired />, TestStubs.routerContext());
+    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(1);
+    expect(wrapper.find('StyledAlert[className="require-2fa"]').text()).toEqual(
+      expect.stringContaining('Test 1 organization')
+    );
+  });
+});
