commit 12d002159e11d4919d7ad10b3ecedafe2549ea2c
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 21 14:03:20 2015 -0700

    Initial work on open membership models

diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index b5583c485d..fe7b54569b 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -22,6 +22,7 @@ SCOPES = set([
 
 class BaseAccess(object):
     is_active = False
+    is_global = False
     sso_is_valid = False
     teams = ()
     scopes = frozenset()
@@ -44,11 +45,12 @@ class Access(BaseAccess):
     # TODO(dcramer): this is still a little gross, and ideally backend access
     # would be based on the same scopes as API access so theres clarity in
     # what things mean
-    def __init__(self, scopes, is_active, teams, sso_is_valid):
+    def __init__(self, scopes, is_active, is_global, teams, sso_is_valid):
         self.teams = teams
         self.scopes = scopes
 
         self.is_active = is_active
+        self.is_global = is_global
         self.sso_is_valid = sso_is_valid
 
 
@@ -57,6 +59,7 @@ def from_user(user, organization):
         return Access(
             scopes=SCOPES,
             is_active=True,
+            is_global=True,
             teams=organization.team_set.all(),
             sso_is_valid=True,
         )
@@ -108,6 +111,7 @@ def from_member(member):
 
     return Access(
         is_active=True,
+        is_global=member.has_global_access,
         sso_is_valid=sso_is_valid,
         scopes=member.scopes,
         teams=teams,
@@ -119,6 +123,10 @@ class NoAccess(BaseAccess):
     def sso_is_valid(self):
         return True
 
+    @property
+    def is_global(self):
+        return False
+
     @property
     def is_active(self):
         return False
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index 96041e26f0..0fbe8371fd 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -120,4 +120,5 @@ class Organization(Model):
             'slug': self.slug,
             'name': self.name,
             'status': self.status,
+            'flags': self.flags,
         }
diff --git a/src/sentry/templates/sentry/organization-home.html b/src/sentry/templates/sentry/organization-home.html
index f118c2892a..e12202d23e 100644
--- a/src/sentry/templates/sentry/organization-home.html
+++ b/src/sentry/templates/sentry/organization-home.html
@@ -35,7 +35,11 @@
               {% else %}
                 <a title="You do not have the required permissions for adding projects.">{% trans "New Project" %}</a>
               {% endif %}
-              <a href="#">Leave Team</a>
+              <form method="POST" action="." style="display:inline">
+                {% csrf_token %}
+                <input type="hidden" name="team" value="{{ team.slug }}" />
+                <button name="op" value="leave" type="submit">Leave Team</button>
+              </form>
               <a href="{% url 'sentry-manage-team' organization.slug team.slug %}">Settings</a>
             </div><a href="{% url 'sentry-team-dashboard' organization.slug team.slug %}">{{ team.name }}</a></h3>
             {% if not project_list %}
diff --git a/src/sentry/web/frontend/organization_home.py b/src/sentry/web/frontend/organization_home.py
index ccf1b987ba..00dc6be9ab 100644
--- a/src/sentry/web/frontend/organization_home.py
+++ b/src/sentry/web/frontend/organization_home.py
@@ -22,10 +22,15 @@ class OrganizationHomeView(OrganizationView):
         for team in Team.objects.filter(organization=organization).order_by('name'):
             all_teams.append((team, team.id in active_team_set))
 
+        if request.access.is_global:
+            open_membership = True
+        else:
+            open_membership = bool(getattr(organization.flags, 'allow_joinleave'))
+
         context = {
             'active_teams': active_teams,
             'all_teams': all_teams,
-            'open_membership': True,
+            'open_membership': open_membership,
         }
 
         return self.respond('sentry/organization-home.html', context)
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index 2d16e9b333..0edd074756 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -15,6 +15,11 @@ from sentry.web.frontend.base import OrganizationView
 class OrganizationSettingsForm(forms.ModelForm):
     name = forms.CharField(help_text=_('The name of your organization. i.e. My Company'))
     slug = forms.SlugField(help_text=_('A unique ID used to identify this organization.'))
+    allow_joinleave = forms.BooleanField(
+        label=_('Open Membership'),
+        help_text=_('Allow organization members to freely join or leave any team.'),
+        required=False,
+    )
 
     class Meta:
         fields = ('name', 'slug')
@@ -27,13 +32,18 @@ class OrganizationSettingsView(OrganizationView):
     def get_form(self, request, organization):
         return OrganizationSettingsForm(
             request.POST or None,
-            instance=organization
+            instance=organization,
+            initial={
+                'allow_joinleave': bool(getattr(organization.flags, 'allow_joinleave')),
+            }
         )
 
     def handle(self, request, organization):
         form = self.get_form(request, organization)
         if form.is_valid():
-            form.save()
+            instance = form.save(commit=False)
+            setattr(instance.flags, 'allow_joinleave', form.cleaned_data['allow_joinleave'])
+            instance.save()
 
             AuditLogEntry.objects.create(
                 organization=organization,
