commit fcb9f5ef618e995a6bb3e2b687f7cd3f4a5fdca2
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 20 14:05:26 2019 -0700

    fix(api): Make teams truly optional in member creation

diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index 0f7d85c10b..dc8325418a 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -120,14 +120,16 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
         _, allowed_roles = get_allowed_roles(request, organization)
 
         # ensure listed teams are real teams
-        teams = list(Team.objects.filter(
-            organization=organization,
-            status=TeamStatus.VISIBLE,
-            slug__in=result['teams'],
-        ))
-
-        if len(set(result['teams'])) != len(teams):
-            return Response({'teams': 'Invalid team'}, 400)
+        if result.get('teams'):
+            teams = list(Team.objects.filter(
+                organization=organization,
+                status=TeamStatus.VISIBLE,
+                slug__in=result['teams'],
+            ))
+            if len(set(result['teams'])) != len(teams):
+                return Response({'teams': 'Invalid team'}, 400)
+        else:
+            teams = []
 
         if not result['role'] in {r.id for r in allowed_roles}:
             return Response({'role': 'You do not have permission to invite that role.'}, 403)
@@ -158,9 +160,10 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
         except IntegrityError:
             return Response({'email': 'The user %s is already a member' % result['email']}, 409)
 
-        lock = locks.get(u'org:member:{}'.format(om.id), duration=5)
-        with TimedRetryPolicy(10)(lock.acquire):
-            self.save_team_assignments(om, teams)
+        if teams:
+            lock = locks.get(u'org:member:{}'.format(om.id), duration=5)
+            with TimedRetryPolicy(10)(lock.acquire):
+                self.save_team_assignments(om, teams)
 
         if settings.SENTRY_ENABLE_INVITES:
             om.send_invite_email()
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index 215ae4d62c..61db1ae40a 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from mock import patch
+
 from django.core.urlresolvers import reverse
 from django.core import mail
 
@@ -331,7 +333,7 @@ class OrganizationMemberListPostTest(APITestCase):
         self.team = self.create_team(organization=self.org)
         self.login_as(user=self.owner_user)
 
-    def test(self):
+    def test_forbid_qq(self):
         resp = self.get_response(
             self.org.slug,
             email='1234@qq.com',
@@ -340,3 +342,31 @@ class OrganizationMemberListPostTest(APITestCase):
         )
         assert resp.status_code == 400
         assert resp.data['email'][0] == 'Enter a valid email address.'
+
+    @patch.object(OrganizationMember, 'send_invite_email')
+    def test_simple(self, mock_send_invite_email):
+        resp = self.get_response(
+            self.org.slug,
+            email='jane@gmail.com',
+            role='member',
+            teams=[self.team.slug],
+        )
+        assert resp.status_code == 201
+        om = OrganizationMember.objects.get(id=resp.data['id'])
+        assert om.email == 'jane@gmail.com'
+        assert om.role == 'member'
+        assert list(om.teams.all()) == [self.team]
+
+        mock_send_invite_email.assert_called_once_with()
+
+    def test_no_teams(self):
+        resp = self.get_response(
+            self.org.slug,
+            email='jane@gmail.com',
+            role='member',
+        )
+        assert resp.status_code == 201
+        om = OrganizationMember.objects.get(id=resp.data['id'])
+        assert om.email == 'jane@gmail.com'
+        assert om.role == 'member'
+        assert list(om.teams.all()) == []
