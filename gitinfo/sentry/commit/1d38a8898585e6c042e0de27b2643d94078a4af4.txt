commit 1d38a8898585e6c042e0de27b2643d94078a4af4
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 24 15:57:49 2017 -0700

    [plugins] initial work on data forwarding section

diff --git a/src/sentry/plugins/bases/data_forwarding.py b/src/sentry/plugins/bases/data_forwarding.py
new file mode 100644
index 0000000000..38559429b2
--- /dev/null
+++ b/src/sentry/plugins/bases/data_forwarding.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.app import ratelimiter
+from sentry.plugins.base import Plugin
+from sentry.plugins.base.configuration import react_plugin_config
+from sentry.plugins.status import PluginStatus
+
+
+class DataForwardingPlugin(Plugin):
+    status = PluginStatus.BETA
+
+    def configure(self, project, request):
+        return react_plugin_config(self, project, request)
+
+    def has_project_conf(self):
+        return True
+
+    def get_rate_limit(self):
+        # number of requests, number of seconds (window)
+        return (50, 1)
+
+    def forward_event(self, payload):
+        raise NotImplementedError
+
+    def get_event_payload(self, event):
+        return serialize(event)
+
+    def get_plugin_type(self):
+        return 'data-forwarding'
+
+    def post_process(self, event, **kwargs):
+        rl_key = '{}:{}'.format(
+            self.conf_key,
+            event.project.organization_id,
+        )
+        # limit segment to 50 requests/second
+        limit, window = self.get_rate_limit()
+        if limit and window and ratelimiter.is_limited(rl_key, limit=limit, window=window):
+            return
+
+        payload = self.get_event_payload(event)
+        return self.forward_event(event, payload)
diff --git a/src/sentry/static/sentry/app/components/pluginList.jsx b/src/sentry/static/sentry/app/components/pluginList.jsx
index 3e3c56e5a4..e72b7fc38a 100644
--- a/src/sentry/static/sentry/app/components/pluginList.jsx
+++ b/src/sentry/static/sentry/app/components/pluginList.jsx
@@ -12,7 +12,7 @@ export default React.createClass({
     project: React.PropTypes.object.isRequired,
     pluginList: React.PropTypes.array.isRequired,
     onDisablePlugin: React.PropTypes.func.isRequired,
-    onEnablePlugin: React.PropTypes.func.isRequired
+    onEnablePlugin: React.PropTypes.func.isRequired,
   },
 
   mixins: [ApiMixin],
@@ -20,19 +20,16 @@ export default React.createClass({
   enablePlugin(plugin) {
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     let {organization, project} = this.props;
-    this.api.request(
-      `/projects/${organization.slug}/${project.slug}/plugins/${plugin.id}/`,
-      {
-        method: 'POST',
-        success: () => this.props.onEnablePlugin(plugin),
-        error: error => {
-          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
+    this.api.request(`/projects/${organization.slug}/${project.slug}/plugins/${plugin.id}/`, {
+      method: 'POST',
+      success: () => this.props.onEnablePlugin(plugin),
+      error: error => {
+        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+      },
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
       }
-    );
+    });
   },
 
   onDisablePlugin(plugin) {
@@ -57,9 +54,8 @@ export default React.createClass({
         })}
         <InactivePlugins
           plugins={pluginList.filter(p => !p.enabled)}
-          onEnablePlugin={this.enablePlugin}
-        />
+          onEnablePlugin={this.enablePlugin} />
       </div>
     );
-  }
+  },
 });
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index ccd0483afd..a2016b0ff3 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -44,6 +44,7 @@ import ProjectAlertRules from './views/projectAlertRules';
 import ProjectChooser from './views/projectChooser';
 import ProjectCspSettings from './views/projectCspSettings';
 import ProjectDashboard from './views/projectDashboard';
+import ProjectDataForwarding from './views/projectDataForwarding';
 import ProjectDetails from './views/projectDetails';
 import ProjectEvents from './views/projectEvents';
 import ProjectFilters from './views/projectFilters';
@@ -220,6 +221,10 @@ function routes() {
           <Route path="settings/" component={errorHandler(ProjectSettings)}>
             <Route path="alerts/" component={errorHandler(ProjectAlertSettings)} />
             <Route path="alerts/rules/" component={errorHandler(ProjectAlertRules)} />
+            <Route
+              path="data-forwarding/"
+              component={errorHandler(ProjectDataForwarding)}
+            />
             <Route path="filters/" component={errorHandler(ProjectFilters)} />
             <Route
               path="saved-searches/"
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index c33f35ab31..40a0665185 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -282,7 +282,7 @@ const ProjectAlertSettings = React.createClass({
         this.setState({
           error: false,
           loading: false,
-          pluginList: data.filter(p => p.type === 'notification')
+          pluginList: data.filter(p => p.type === 'notification'),
         });
       },
       error: () => {
diff --git a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
new file mode 100644
index 0000000000..8243cf5cbc
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
@@ -0,0 +1,183 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import {BooleanField} from '../components/forms';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import PluginList from '../components/pluginList';
+import ProjectState from '../mixins/projectState';
+import {t} from '../locale';
+
+const Settings = React.createClass({
+  propTypes: {
+    initialData: React.PropTypes.object,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      formData: Object.assign({}, this.props.initialData),
+      errors: {},
+    };
+  },
+
+  onFieldChange(name, value) {
+    let {orgId, projectId} = this.props.params;
+    let prevValue = this.state.formData[name];
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/projects/${orgId}/${projectId}/`, {
+      method: 'PUT',
+      data: {[name]: value},
+      success: data => {
+        IndicatorStore.remove(loadingIndicator);
+        this.setState({formData: {
+          ...this.state.formData,
+          [name]: value,
+        }});
+      },
+      error: error => {
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+        this.setState({formData: {
+          ...this.state.formData,
+          [name]: prevValue,
+        }});
+      },
+    });
+  },
+
+  render() {
+    let {formData} = this.state;
+    return (
+      <div className="box">
+        <div className="box-header">
+          <h3>{t('Settings')}</h3>
+        </div>
+
+        <div className="box-content with-padding">
+          <form className="form-stacked">
+            <BooleanField
+              key="newIssues"
+              name="newIssues"
+              label={t('New Issues')}
+              value={formData.newIssues}
+              required={false}
+              onChange={this.onFieldChange.bind(this, 'newIssues')}
+              help="Send an event when an issue is first seen."
+            />
+          </form>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default React.createClass({
+  mixins: [ApiMixin, ProjectState],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      pluginList: []
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/plugins/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          pluginList: data.filter(p => p.type === 'data-forwarding'),
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  onEnablePlugin(plugin) {
+    this.setState({pluginList: this.state.pluginList.map(p => {
+      if (p.id !== plugin.id)
+        return p;
+      return {
+        ...plugin,
+        enabled: true,
+      };
+    })});
+  },
+
+  onDisablePlugin(plugin) {
+    this.setState({pluginList: this.state.pluginList.map(p => {
+      if (p.id !== plugin.id)
+        return p;
+      return {
+        ...plugin,
+        enabled: false,
+      };
+    })});
+  },
+
+  renderBody() {
+    if (this.state.loading)
+      return this.renderLoading();
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
+    let organization = this.getOrganization();
+    let project = this.getProject();
+    let {pluginList} = this.state;
+    return (
+      <PluginList
+        organization={organization}
+        project={project}
+        pluginList={pluginList}
+        onEnablePlugin={this.onEnablePlugin}
+        onDisablePlugin={this.onDisablePlugin} />
+    );
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t('There are no integrations available for data forwarding.')}</p>
+      </div>
+    );
+  },
+
+  render() {
+    return (
+      <div>
+        <h1>{t('Data Forwarding')}</h1>
+        <p>Enabling Data Forwarding to send processed events to another provider based on the settings configured.</p>
+
+        <Settings params={this.props.params} initialData={{
+
+        }} />
+
+        {this.renderBody()}
+      </div>
+    );
+  }
+});
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index e88dcc85b5..6fb8aa852e 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -102,6 +102,9 @@ const ProjectSettings = React.createClass({
             <li>
               <a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a>
             </li>
+            <ListLink to={`/${orgId}/${projectId}/settings/data-forwarding/`}>
+              {t('Data Forwarding')}
+            </ListLink>
             <ListLink to={`/${orgId}/${projectId}/settings/saved-searches/`}>
               {t('Saved Searches')}
             </ListLink>
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index b81678ff5a..f4efc9f585 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -196,6 +196,9 @@
     <li{% if page == 'release-tracking' %} class="active"{% endif %}>
         <a href="{% url 'sentry-project-release-tracking' project.organization.slug project.slug %}">{% trans "Release Tracking" %}</a>
     </li>
+    <li>
+        <a href="{% absolute_uri '/{}/{}/settings/data-forwarding/' project.organization.slug project.slug %}">{% trans "Data Forwarding" %}</a>
+    </li>
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/saved-searches/' project.organization.slug project.slug %}">{% trans "Saved Searches" %}</a>
     </li>
