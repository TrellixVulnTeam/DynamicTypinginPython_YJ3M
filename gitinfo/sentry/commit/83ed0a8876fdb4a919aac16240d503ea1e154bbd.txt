commit 83ed0a8876fdb4a919aac16240d503ea1e154bbd
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Jun 5 13:44:46 2018 -0700

    feat(integrations): Add autocomplete api search support (#8641)

diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index d0c9cb0783..66dc341b34 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -102,6 +102,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
         for field in fields:
             if field['name'] == 'externalIssue':
                 field['url'] = autocomplete_url
+                field['type'] = 'select'
         return fields
 
     def get_client(self):
diff --git a/src/sentry/integrations/jira/search.py b/src/sentry/integrations/jira/search.py
index f8723c8b04..d41cb5e0cd 100644
--- a/src/sentry/integrations/jira/search.py
+++ b/src/sentry/integrations/jira/search.py
@@ -28,11 +28,13 @@ class JiraSearchEndpoint(OrganizationEndpoint):
 
         installation = integration.get_installation()
 
-        if field == 'issue_id':
+        if field == 'externalIssue':
+            if not query:
+                return Response([])
             resp = installation.search_issues(query)
             return Response([{
-                'text': '(%s) %s' % (i['key'], i['fields']['summary']),
-                'id': i['key']
+                'label': '(%s) %s' % (i['key'], i['fields']['summary']),
+                'value': i['key']
             } for i in resp.get('issues', [])])
 
         # TODO(jess): handle other autocomplete urls
diff --git a/src/sentry/integrations/jira/urls.py b/src/sentry/integrations/jira/urls.py
index 7b6d6d2c59..d214646536 100644
--- a/src/sentry/integrations/jira/urls.py
+++ b/src/sentry/integrations/jira/urls.py
@@ -13,7 +13,7 @@ urlpatterns = patterns(
     url(r'^configure/$', JiraConfigureView.as_view()),
     url(r'^descriptor/$', JiraDescriptorEndpoint.as_view()),
     url(r'^installed/$', JiraInstalledEndpoint.as_view()),
-    url(r'^search/(?P<organization_slug>[^\/]+)/(?P<integration_id>[^\/]+)/$',
+    url(r'^search/(?P<organization_slug>[^\/]+)/(?P<integration_id>\d+)/$',
         JiraSearchEndpoint.as_view(),
         name='sentry-extensions-jira-search'
         ),
diff --git a/src/sentry/static/sentry/app/components/group/externalIssues.jsx b/src/sentry/static/sentry/app/components/group/externalIssues.jsx
index ca1d87f401..e7e4a15c31 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssues.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssues.jsx
@@ -1,3 +1,4 @@
+import $ from 'jquery';
 import React from 'react';
 import PropTypes from 'prop-types';
 import Modal from 'react-bootstrap/lib/Modal';
@@ -38,6 +39,18 @@ class ExternalIssueForm extends AsyncComponent {
     this.props.onSubmitSuccess();
   };
 
+  getOptions = (field, input) => {
+    if (!input) {
+      return Promise.resolve([]);
+    }
+    return $.ajax({
+      url: `${field.url}?field=${field.name}&query=${input}`,
+      method: 'GET',
+    }).then(data => {
+      return {options: data};
+    });
+  };
+
   renderBody() {
     let {integrationDetails} = this.state;
     let {action, group, integration} = this.props;
@@ -48,7 +61,21 @@ class ExternalIssueForm extends AsyncComponent {
         onSubmitSuccess={this.onSubmitSuccess}
       >
         {integrationDetails[`${action}IssueConfig`].map(field => {
-          return <FieldFromConfig key={field.name} field={field} />;
+          let props = {};
+          if (field.url) {
+            props = {
+              loadOptions: input => {
+                return this.getOptions(field, input);
+              },
+              async: true,
+              cache: false,
+              onSelectResetsInput: false,
+              onCloseResetsInput: false,
+              onBlurResetsInput: false,
+              autoload: false,
+            };
+          }
+          return <FieldFromConfig key={field.name} field={field} {...props} />;
         })}
       </Form>
     );
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 06e32bd5fd..694297fb72 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -372,7 +372,7 @@ class JiraIntegrationTest(APITestCase):
                 'name': 'externalIssue',
                 'label': 'Issue',
                 'default': '',
-                'type': 'string',
+                'type': 'select',
                 'url': reverse(
                     'sentry-extensions-jira-search', args=[org.slug, integration.id],
                 )
diff --git a/tests/sentry/integrations/jira/test_search_endpoint.py b/tests/sentry/integrations/jira/test_search_endpoint.py
index c563536c85..ddc198eec5 100644
--- a/tests/sentry/integrations/jira/test_search_endpoint.py
+++ b/tests/sentry/integrations/jira/test_search_endpoint.py
@@ -50,8 +50,8 @@ class JiraSearchEndpointTest(APITestCase):
 
         path = reverse('sentry-extensions-jira-search', args=[org.slug, integration.id])
 
-        resp = self.client.get('%s?field=issue_id&query=test' % (path,))
+        resp = self.client.get('%s?field=externalIssue&query=test' % (path,))
         assert resp.data == [
-            {'text': '(HSP-1) this is a test issue summary', 'id': 'HSP-1'}
+            {'label': '(HSP-1) this is a test issue summary', 'value': 'HSP-1'}
         ]
         mock_search_issues.assert_called_with('test')
