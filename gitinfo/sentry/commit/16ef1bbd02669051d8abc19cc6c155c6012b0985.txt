commit 16ef1bbd02669051d8abc19cc6c155c6012b0985
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Aug 12 16:39:21 2016 -0700

    Add configuration for weekly reports (#3915)
    
    * Add configuration for weekly reports
    
    This adds UI in account -> notifications for disabled reports on a per-project basis. The
    results are saved as ProjectOption['reports.disabled-organizations'].
    
    @getsentry/ui @getsentry/infrastructure @tkaemming

diff --git a/src/sentry/templates/sentry/account/notifications.html b/src/sentry/templates/sentry/account/notifications.html
index ad98d07ccb..4a16e66ad8 100644
--- a/src/sentry/templates/sentry/account/notifications.html
+++ b/src/sentry/templates/sentry/account/notifications.html
@@ -49,6 +49,14 @@
 
         <hr />
 
+        <h4>{% trans "Weekly Reports" %}</h4>
+
+        <p>{% blocktrans %}Reports contain a summary of what's happened within your organization over the last week.{% endblocktrans %}</p>
+
+        {{ reports_form.organizations|as_crispy_field }}
+
+        <hr />
+
         <h4>{% trans "Fine Tuning" %}</h4>
 
         <p>Use the settings below to fine tune notification settings per-project.</p>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 97869435a9..60b4ef7a81 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -21,7 +21,9 @@ from six.moves import range
 from sentry import options
 from sentry.app import ratelimiter
 from sentry.constants import LANGUAGES
-from sentry.models import User, UserOption, UserOptionValue
+from sentry.models import (
+    Organization, OrganizationStatus, User, UserOption, UserOptionValue
+)
 from sentry.utils.auth import find_users, logger
 from sentry.web.forms.fields import ReadOnlyTextField
 
@@ -388,6 +390,48 @@ class AppearanceSettingsForm(forms.Form):
         return self.user
 
 
+class NotificationReportSettingsForm(forms.Form):
+    organizations = forms.ModelMultipleChoiceField(
+        queryset=Organization.objects.none(),
+        required=False,
+        widget=forms.CheckboxSelectMultiple(),
+    )
+
+    def __init__(self, user, *args, **kwargs):
+        self.user = user
+        super(NotificationReportSettingsForm, self).__init__(*args, **kwargs)
+
+        org_queryset = Organization.objects.filter(
+            status=OrganizationStatus.VISIBLE,
+            member_set__user=user,
+        )
+
+        disabled_orgs = set(UserOption.objects.get_value(
+            user=user,
+            project=None,
+            key='reports:disabled-organizations',
+            default=[],
+        ))
+
+        self.fields['organizations'].queryset = org_queryset
+        self.fields['organizations'].initial = [
+            o.id for o in org_queryset
+            if o.id not in disabled_orgs
+        ]
+
+    def save(self):
+        enabled_orgs = set((
+            o.id for o in self.cleaned_data.get('organizations')
+        ))
+        all_orgs = set(self.fields['organizations'].queryset.values_list('id', flat=True))
+        UserOption.objects.set_value(
+            user=self.user,
+            project=None,
+            key='reports:disabled-organizations',
+            value=list(all_orgs.difference(enabled_orgs)),
+        )
+
+
 class NotificationSettingsForm(forms.Form):
     alert_email = forms.EmailField(
         label=_('Email'),
diff --git a/src/sentry/web/frontend/account_notification.py b/src/sentry/web/frontend/account_notification.py
index a9eaa6b6d0..d7543b8f82 100644
--- a/src/sentry/web/frontend/account_notification.py
+++ b/src/sentry/web/frontend/account_notification.py
@@ -16,7 +16,10 @@ from sentry.models import (
     Project, ProjectStatus
 )
 from sentry.plugins import plugins
-from sentry.web.forms.accounts import ProjectEmailOptionsForm, NotificationSettingsForm
+from sentry.web.forms.accounts import (
+    ProjectEmailOptionsForm, NotificationSettingsForm,
+    NotificationReportSettingsForm
+)
 from sentry.web.decorators import login_required
 from sentry.web.frontend.base import BaseView
 from sentry.web.helpers import render_to_response
@@ -33,7 +36,11 @@ class AccountNotificationView(BaseView):
     @method_decorator(sudo_required)
     @method_decorator(transaction.atomic)
     def handle(self, request):
-        settings_form = self.notification_settings_form(request.user, request.POST or None)
+        settings_form = self.notification_settings_form(
+            request.user, request.POST or None)
+        reports_form = NotificationReportSettingsForm(
+            request.user, request.POST or None,
+            prefix='reports')
 
         project_list = list(Project.objects.filter(
             team__organizationmemberteam__organizationmember__user=request.user,
@@ -62,7 +69,9 @@ class AccountNotificationView(BaseView):
 
         if request.POST:
             all_forms = list(itertools.chain(
-                [settings_form], ext_forms, (f for _, f in project_forms)
+                [settings_form, reports_form],
+                ext_forms,
+                (f for _, f in project_forms)
             ))
             if all(f.is_valid() for f in all_forms):
                 for form in all_forms:
@@ -74,6 +83,7 @@ class AccountNotificationView(BaseView):
         context.update({
             'settings_form': settings_form,
             'project_forms': project_forms,
+            'reports_form': reports_form,
             'ext_forms': ext_forms,
             'page': 'notifications',
             'AUTH_PROVIDERS': get_auth_providers(),
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 794d7513fc..4503dbcfe0 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -10,8 +10,7 @@ from exam import fixture
 from social_auth.models import UserSocialAuth
 
 from sentry.models import (
-    UserEmail, LostPasswordHash, ProjectStatus, User, UserOption,
-    UserOptionValue
+    UserEmail, LostPasswordHash, User, UserOption
 )
 from sentry.testutils import TestCase
 
@@ -179,89 +178,6 @@ class SettingsTest(TestCase):
         assert user.email == 'admin@localhost'
 
 
-class NotificationSettingsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-account-settings-notifications')
-
-    def params(self, without=()):
-        params = {
-            'alert_email': 'foo@example.com',
-        }
-        return dict((k, v) for k, v in six.iteritems(params) if k not in without)
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_renders_with_required_context(self):
-        user = self.create_user('foo@example.com')
-        organization = self.create_organization()
-        team = self.create_team(organization=organization)
-        project = self.create_project(organization=organization, team=team)
-        team2 = self.create_team(organization=organization)
-        self.create_project(organization=organization, team=team, status=ProjectStatus.PENDING_DELETION)
-        self.create_project(organization=organization, team=team2)
-        self.create_member(organization=organization, user=user, teams=[project.team])
-        self.login_as(user)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/notifications.html')
-        assert 'form' in resp.context
-        assert len(resp.context['project_forms']) == 1
-
-    def test_valid_params(self):
-        self.login_as(self.user)
-
-        params = self.params()
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(user=self.user, project=None)
-
-        assert options.get('alert_email') == 'foo@example.com'
-
-    def test_can_change_workflow(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path, {
-            'workflow_notifications': '1',
-        })
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(
-            user=self.user, project=None
-        )
-
-        assert options.get('workflow:notifications') == '0'
-
-        resp = self.client.post(self.path, {
-            'workflow_notifications': '',
-        })
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(
-            user=self.user, project=None
-        )
-
-        assert options.get('workflow:notifications') == \
-            UserOptionValue.participating_only
-
-    def test_can_change_subscribe_by_default(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path, {
-            'subscribe_by_default': '1',
-        })
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(
-            user=self.user, project=None
-        )
-
-        assert options.get('subscribe_by_default') == '1'
-
-
 class ListIdentitiesTest(TestCase):
     @fixture
     def path(self):
diff --git a/tests/sentry/web/frontend/test_account_notifications.py b/tests/sentry/web/frontend/test_account_notifications.py
new file mode 100644
index 0000000000..5dd8a5361e
--- /dev/null
+++ b/tests/sentry/web/frontend/test_account_notifications.py
@@ -0,0 +1,115 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import ProjectStatus, UserOption, UserOptionValue
+from sentry.testutils import TestCase
+
+
+class NotificationSettingsTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-account-settings-notifications')
+
+    def params(self, without=()):
+        params = {
+            'alert_email': 'foo@example.com',
+        }
+        return dict((k, v) for k, v in six.iteritems(params) if k not in without)
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_renders_with_required_context(self):
+        user = self.create_user('foo@example.com')
+        organization = self.create_organization()
+        team = self.create_team(organization=organization)
+        project = self.create_project(organization=organization, team=team)
+        team2 = self.create_team(organization=organization)
+        self.create_project(organization=organization, team=team, status=ProjectStatus.PENDING_DELETION)
+        self.create_project(organization=organization, team=team2)
+        self.create_member(organization=organization, user=user, teams=[project.team])
+        self.login_as(user)
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/notifications.html')
+        assert 'form' in resp.context
+        assert 'settings_form' in resp.context
+        assert 'reports_form' in resp.context
+        assert len(resp.context['project_forms']) == 1
+
+    def test_valid_params(self):
+        self.login_as(self.user)
+
+        params = self.params()
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
+
+        options = UserOption.objects.get_all_values(user=self.user, project=None)
+
+        assert options.get('alert_email') == 'foo@example.com'
+
+    def test_can_change_workflow(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'workflow_notifications': '1',
+        })
+        assert resp.status_code == 302
+
+        options = UserOption.objects.get_all_values(
+            user=self.user, project=None
+        )
+
+        assert options.get('workflow:notifications') == '0'
+
+        resp = self.client.post(self.path, {
+            'workflow_notifications': '',
+        })
+        assert resp.status_code == 302
+
+        options = UserOption.objects.get_all_values(
+            user=self.user, project=None
+        )
+
+        assert options.get('workflow:notifications') == \
+            UserOptionValue.participating_only
+
+    def test_can_change_subscribe_by_default(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'subscribe_by_default': '1',
+        })
+        assert resp.status_code == 302
+
+        options = UserOption.objects.get_all_values(
+            user=self.user, project=None
+        )
+
+        assert options.get('subscribe_by_default') == '1'
+
+    def test_can_disable_reports(self):
+        self.login_as(self.user)
+
+        org1 = self.create_organization(name='foo', owner=self.user)
+        org2 = self.create_organization(name='bar', owner=self.user)
+
+        resp = self.client.post(self.path, {
+            'reports-organizations': org1.id,
+        })
+        assert resp.status_code == 302
+
+        options = UserOption.objects.get_all_values(
+            user=self.user, project=None
+        )
+
+        disabled_orgs = set(options.get('reports:disabled-organizations', []))
+        assert org1.id not in disabled_orgs
+        assert org2.id in disabled_orgs
