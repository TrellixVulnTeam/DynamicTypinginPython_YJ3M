commit b2bdc30b275405fcd56d77804eb8b3534aac830b
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 24 20:03:10 2012 -0800

    Major plugin refactor

diff --git a/docs/config/index.rst b/docs/config/index.rst
index 628781b730..a554b68f1c 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -64,17 +64,6 @@ This document describes additional configuration options available to the Sentry
 		    'sentry.filters.SiteFilter',
 		)
 
-.. data:: sentry.conf.PROCESSORS
-    :noindex:
-
-    A list of processors for acting on Sentry events.
-
-    ::
-
-        SENTRY_PROCESSORS = (
-            'my.custom.IRCNotifier',
-        )
-
 .. data:: sentry.conf.VIEWS
     :noindex:
 
diff --git a/docs/install/index.rst b/docs/install/index.rst
index 588bf92739..7bdf30e5fd 100644
--- a/docs/install/index.rst
+++ b/docs/install/index.rst
@@ -161,13 +161,6 @@ need to update your settings.py and add ``sentry``, ``dkombu``, and ``raven.cont
 
 .. note:: Raven is a seperate project, and the official Python client for Sentry.
 
-Next, add the required middleware to your settings::
-
-    MIDDLEWARE_CLASSES = (
-        ...
-        'sentry.middleware.SentryMiddleware',
-    )
-
 
 
 You will also need to add ``sentry.web.urls`` to your url patterns::
diff --git a/docs/plugins/index.rst b/docs/plugins/index.rst
index d9344a5b9c..8412b3ae90 100644
--- a/docs/plugins/index.rst
+++ b/docs/plugins/index.rst
@@ -70,10 +70,9 @@ Writing a Plugin
 Several interfaces exist for extending Sentry:
 
 * Event Filters (sentry.filters)
-* Data Processors (sentry.processors)
 * Data Interfaces (sentry.interfaces)
 * Aggregate Views (sentry.views)
-* UI Plugins (sentry.plugins)
+* Plugins (sentry.plugins)
 
 Until we get sample docs up, it's suggested that you review the builtin plugins
 and the base classes to understand how the system works.
diff --git a/sentry/commands/upgrade.py b/sentry/commands/upgrade.py
index 1fbdf85bde..6ae812c74b 100644
--- a/sentry/commands/upgrade.py
+++ b/sentry/commands/upgrade.py
@@ -26,7 +26,7 @@ def register_views():
     from sentry.views import View as ViewHandler
     from sentry.models import View
 
-    for viewhandler in ViewHandler.handlers.all():
+    for viewhandler in ViewHandler.objects.all():
         path = '%s.%s' % (viewhandler.__module__, viewhandler.__class__.__name__)
 
         defaults = dict(
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 8bfe6ede8d..2f6a09de8b 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -92,11 +92,6 @@ QUEUE = {
     'transport': 'djkombu.transport.DatabaseTransport',
 }
 
-# List of event handlers
-PROCESSORS = (
-    'sentry.processors.mail.MailProcessor',
-)
-
 # List of event aggregation views
 VIEWS = (
     'sentry.views.Exception',
diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index a4c41dd998..f352bf9a48 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -82,7 +82,6 @@ MIDDLEWARE_CLASSES = (
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
-    'sentry.middleware.SentryMiddleware',
     # 'django.contrib.messages.middleware.MessageMiddleware',
 )
 
@@ -107,15 +106,23 @@ INSTALLED_APPS = (
     'raven.contrib.django',
     'sentry',
     'sentry.plugins.sentry_servers',
-    'sentry.plugins.sentry_sites',
     'sentry.plugins.sentry_urls',
+    'sentry.plugins.sentry_sites',
+    'sentry.plugins.sentry_mail',
     'south',
 )
 
-import logging
-logging.basicConfig(level=logging.WARNING)
+ADMIN_MEDIA_PREFIX = '/_admin_media/'
+
+# Sentry and Raven configuration
 
 SENTRY_PUBLIC = True
 SENTRY_PROJECT = 1
 
-ADMIN_MEDIA_PREFIX = '/_admin_media/'
+# Configure logging
+from raven.conf import setup_logging
+from raven.contrib.django.logging import SentryHandler
+import logging
+logging.basicConfig(level=logging.WARNING)
+
+setup_logging(SentryHandler())
diff --git a/sentry/filters/base.py b/sentry/filters/base.py
index 51bc01eb55..3f9c95a234 100644
--- a/sentry/filters/base.py
+++ b/sentry/filters/base.py
@@ -79,7 +79,7 @@ class Filter(object):
         widget = self.get_widget()
         return widget.render(self.get_value())
 
-    handlers = FilterInstanceManager(settings.FILTERS, instances=False)
+    objects = FilterInstanceManager(settings.FILTERS, instances=False)
 
 
 class EventFilter(Filter):
diff --git a/sentry/management/__init__.py b/sentry/management/__init__.py
index 124db14fff..9facc824fb 100644
--- a/sentry/management/__init__.py
+++ b/sentry/management/__init__.py
@@ -5,3 +5,68 @@ sentry.management
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
+import logging
+from django.contrib.auth.models import User
+from django.db.models.signals import post_syncdb
+from sentry.models import Project, ProjectMember, MessageIndex, \
+  Group, Event, FilterValue, MessageFilterValue, MessageCountByMinute, \
+  MEMBER_OWNER
+
+
+def register_indexes():
+    """
+    Grabs all required indexes from filters and registers them.
+    """
+    from sentry.filters import Filter
+    logger = logging.getLogger('sentry.setup')
+    for cls in (f for f in Filter.objects.all() if f.column.startswith('data__')):
+        MessageIndex.objects.register_index(cls.column, index_to='group')
+        logger.debug('Registered index for for %r' % cls.column)
+register_indexes()
+
+
+def create_default_project(created_models, verbosity=2, **kwargs):
+    if Project in created_models:
+        try:
+            owner = User.objects.filter(is_staff=True, is_superuser=True).order_by('id')[0]
+        except IndexError:
+            owner = None
+
+        project, created = Project.objects.get_or_create(
+            id=1,
+            defaults=dict(
+                public=True,
+                name='Default',
+                owner=owner,
+            )
+        )
+        if not created:
+            return
+
+        if owner:
+            ProjectMember.objects.create(
+                project=project,
+                user=owner,
+                type=MEMBER_OWNER,
+            )
+
+        if verbosity > 0:
+            print 'Created default Sentry project owned by %s' % owner
+
+        # Iterate all groups to update their relations
+        for model in (Group, Event, FilterValue, MessageFilterValue,
+                      MessageCountByMinute):
+            if verbosity > 0:
+                print ('Backfilling project ids for %s.. ' % model),
+            model.objects.filter(project__isnull=True).update(
+                project=project,
+            )
+            if verbosity > 0:
+                print 'done!'
+
+# Signal registration
+post_syncdb.connect(
+    create_default_project,
+    dispatch_uid="create_default_project"
+)
diff --git a/sentry/manager.py b/sentry/manager.py
index 7a591328a6..360159fa4c 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -297,7 +297,7 @@ class GroupManager(models.Manager, ChartMixin):
         })
 
         views = set()
-        for viewhandler in ViewHandler.handlers.all():
+        for viewhandler in ViewHandler.objects.all():
             try:
                 if not viewhandler.should_store(event):
                     continue
diff --git a/sentry/middleware.py b/sentry/middleware.py
index a8f966184d..a02ab030b0 100644
--- a/sentry/middleware.py
+++ b/sentry/middleware.py
@@ -1,56 +1,3 @@
-from sentry.models import Project
-from sentry.plugins import Plugin
-
-
-class PluginList(object):
-    def __init__(self, request, project, plugins):
-        self._request = request
-        self._project = project
-        self._plugins = plugins
-        self._cache = {}
-
-    def __getitem__(self, slug):
-        if slug not in self._cache:
-            plugin_cls = self._plugins[slug]
-            plugin = plugin_cls(self._request)
-            if self._project:
-                plugin.configure(self._project)
-            self._cache[slug] = plugin
-
-        return self._cache[slug]
-
-    def __iter__(self):
-        for plugin in (self[s] for s in self._plugins.iterkeys()):
-            if not plugin.enabled:
-                continue
-            yield plugin
-
-    def for_project(self):
-        for slug, plugin_cls in self._plugins.iteritems():
-            if not plugin_cls.project_conf_form:
-                continue
-            yield slug, self[slug].get_title()
-
-    def for_site(self):
-        for slug, plugin_cls in self._plugins.iteritems():
-            if not plugin_cls.site_conf_form:
-                continue
-            yield slug, self[slug].get_title()
-
-
 class SentryMiddleware(object):
-    def process_view(self, request, view_func, view_args, view_kwargs):
-        if 'project_id' in view_kwargs:
-            try:
-                project = Project.objects.get(pk=view_kwargs['project_id'])
-            except Project.DoesNotExist:
-                project = None
-        else:
-            project = None
-
-        request.plugins = PluginList(request, project, Plugin.plugins)
-
-    def process_response(self, request, response):
-        request.plugins = []
-
-        return response
+    # DEPRECATED
+    pass
diff --git a/sentry/models.py b/sentry/models.py
index d7600f299d..8e2f014277 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -20,7 +20,6 @@ from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import Sum, F
-from django.db.models.signals import post_syncdb
 from django.utils.datastructures import SortedDict
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
@@ -548,63 +547,3 @@ class MessageCountByMinute(Model):
 
 class MessageIndex(BaseIndex):
     model = Event
-
-### Helper methods
-
-
-def register_indexes():
-    """
-    Grabs all required indexes from filters and registers them.
-    """
-    from sentry.filters import Filter
-    logger = logging.getLogger('sentry.setup')
-    for cls in (f for f in Filter.handlers.all() if f.column.startswith('data__')):
-        MessageIndex.objects.register_index(cls.column, index_to='group')
-        logger.debug('Registered index for for %r' % cls.column)
-register_indexes()
-
-
-def create_default_project(created_models, verbosity=2, **kwargs):
-    if Project in created_models:
-        try:
-            owner = User.objects.filter(is_staff=True, is_superuser=True).order_by('id')[0]
-        except IndexError:
-            owner = None
-
-        project, created = Project.objects.get_or_create(
-            id=1,
-            defaults=dict(
-                public=True,
-                name='Default',
-                owner=owner,
-            )
-        )
-        if not created:
-            return
-
-        if owner:
-            ProjectMember.objects.create(
-                project=project,
-                user=owner,
-                type=MEMBER_OWNER,
-            )
-
-        if verbosity > 0:
-            print 'Created default Sentry project owned by %s' % owner
-
-        # Iterate all groups to update their relations
-        for model in (Group, Event, FilterValue, MessageFilterValue,
-                      MessageCountByMinute):
-            if verbosity > 0:
-                print ('Backfilling project ids for %s.. ' % model),
-            model.objects.filter(project__isnull=True).update(
-                project=project,
-            )
-            if verbosity > 0:
-                print 'done!'
-
-# Signal registration
-post_syncdb.connect(
-    create_default_project,
-    dispatch_uid="create_default_project"
-)
diff --git a/sentry/plugins/__init__.py b/sentry/plugins/__init__.py
index ceaad86c81..eebb06796c 100644
--- a/sentry/plugins/__init__.py
+++ b/sentry/plugins/__init__.py
@@ -6,141 +6,4 @@ sentry.plugins
 :license: BSD, see LICENSE for more details.
 """
 
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from sentry.web.helpers import render_to_response
-
-
-class Response(object):
-    def __init__(self, template, context=None):
-        self.template = template
-        self.context = context
-
-    def respond(self, request, context=None):
-        if self.context:
-            context.update(self.context)
-        return render_to_response(self.template, context, request)
-
-
-class PluginMount(type):
-    def __init__(cls, name, bases, attrs):
-        if not hasattr(cls, 'plugins'):
-            # This branch only executes when processing the mount point itself.
-            # So, since this is a new plugin type, not an implementation, this
-            # class shouldn't be registered as a plugin. Instead, it sets up a
-            # list where plugins can be registered later.
-            cls.plugins = {}
-        else:
-            # This must be a plugin implementation, which should be registered.
-            # Simply appending it to the list is all that's needed to keep
-            # track of it later.
-            cls.slug = getattr(cls, 'slug', None) or cls.title.replace(' ', '-').lower()
-            cls.plugins[cls.slug] = cls
-
-
-class Plugin(object):
-    """
-    All children should allow **kwargs on all inherited methods.
-    """
-
-    __metaclass__ = PluginMount
-
-    conf_key = None
-    conf_title = None
-
-    project_conf_form = None
-    project_conf_template = 'sentry/plugins/project_configuration.html'
-
-    site_conf_form = None
-    site_conf_template = 'sentry/plugins/site_configuration.html'
-
-    title = None
-
-    enabled = True
-
-    def __init__(self, request):
-        self.request = request
-
-    def get_view_response(self, group):
-        self.selected = self.request.path == self.get_url(group)
-
-        if not self.selected:
-            return
-
-        response = self.view(group)
-
-        if not response:
-            return
-
-        if isinstance(response, HttpResponseRedirect):
-            return response
-
-        if not isinstance(response, Response):
-            raise NotImplementedError('Please use self.render() when returning responses.')
-
-        return response.respond(self.request, {
-            'project': group.project,
-            'group': group,
-        })
-
-    def get_conf_key(self):
-        if not self.conf_key:
-            return self.conf_title.lower().replace(' ', '_')
-        return self.conf_key
-
-    def get_conf_title(self):
-        return self.conf_title or self.get_title()
-
-    def get_title(self):
-        return self.title
-
-    def redirect(self, url):
-        return HttpResponseRedirect(url)
-
-    def render(self, template, context=None):
-        return Response(template, context)
-
-    def get_url(self, group):
-        return reverse('sentry-group-plugin-action', args=(group.project_id, group.pk, self.slug))
-
-    def configure(self, project):
-        """
-        Called when plugin is initialized to perform any pre-configuration.
-        """
-
-    def view(self, group, **kwargs):
-        """
-        Handles the view logic. If no response is given, we continue to the next action provider.
-        """
-
-    def before_events(self, group_list, **kwargs):
-        """
-        Allows preprocessing of groups in the list view.
-
-        This is generally useful if you need to cache lookups
-        for something like ``tags`` which would otherwise do
-        multiple queries.
-        """
-
-    def tags(self, group, tag_list, **kwargs):
-        """
-        Modifies the tag list for a grouped message.
-        """
-        return tag_list
-
-    def actions(self, group, action_list, **kwargs):
-        """
-        Modifies the action list for a grouped message.
-        """
-        return action_list
-
-    def panels(self, group, panel_list, **kwargs):
-        """
-        Modifies the panel list for a grouped message.
-        """
-        return panel_list
-
-    def widget(self, group, **kwargs):
-        """
-        Renders as a widget in the group details sidebar.
-        """
+from .base import *
diff --git a/sentry/plugins/base.py b/sentry/plugins/base.py
new file mode 100644
index 0000000000..4943ed5a46
--- /dev/null
+++ b/sentry/plugins/base.py
@@ -0,0 +1,186 @@
+"""
+sentry.plugins.base
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+__all__ = ('Plugin', 'plugins')
+
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+
+from sentry.utils import InstanceManager
+
+
+class Response(object):
+    def __init__(self, template, context=None):
+        self.template = template
+        self.context = context
+
+    def respond(self, request, context=None):
+        from sentry.web.helpers import render_to_response
+
+        if self.context:
+            context.update(self.context)
+        return render_to_response(self.template, context, request)
+
+
+class PluginManager(InstanceManager):
+    def for_project(self, project):
+        for plugin in self.all():
+            if not plugin.project_conf_form:
+                continue
+            yield plugin
+
+    def for_site(self):
+        for plugin in self.all():
+            if not plugin.site_conf_form:
+                continue
+            yield plugin
+
+    def get(self, slug):
+        for plugin in self.all():
+            if plugin.slug == slug:
+                return plugin
+        raise KeyError
+
+
+plugins = PluginManager()
+
+
+def PluginMount(manager):
+    class PluginMount(type):
+        def __new__(cls, name, bases, attrs):
+            new_cls = type.__new__(cls, name, bases, attrs)
+            if IPlugin in bases:
+                return new_cls
+            if not new_cls.title:
+                new_cls.title = new_cls.__name__
+            if not new_cls.slug:
+                new_cls.slug = new_cls.title.replace(' ', '-').lower()
+            manager.add('%s.%s' % (new_cls.__module__, new_cls.__name__))
+            return new_cls
+    return PluginMount
+
+
+class IPlugin(object):
+    """
+    Plugin interface. Should not be inherited from directly.
+
+    All children should allow **kwargs on all inherited methods.
+    """
+    conf_key = None
+    conf_title = None
+
+    project_conf_form = None
+    project_conf_template = 'sentry/plugins/project_configuration.html'
+
+    site_conf_form = None
+    site_conf_template = 'sentry/plugins/site_configuration.html'
+
+    title = None
+    slug = None
+
+    enabled = True
+
+    def get_conf_key(self):
+        if not self.conf_key:
+            return self.conf_title.lower().replace(' ', '_')
+        return self.conf_key
+
+    def get_conf_title(self):
+        return self.conf_title or self.get_title()
+
+    def get_title(self):
+        return self.title
+
+    def redirect(self, url):
+        return HttpResponseRedirect(url)
+
+    def render(self, template, context=None):
+        return Response(template, context)
+
+    def get_url(self, group):
+        return reverse('sentry-group-plugin-action', args=(group.project_id, group.pk, self.slug))
+
+    def configure(self, project):
+        """
+        Called when plugin is initialized to perform any pre-configuration.
+        """
+
+    # The following methods are specific to web requests
+
+    def get_view_response(self, request, group):
+        self.selected = self.request.path == self.get_url(group)
+
+        if not self.selected:
+            return
+
+        response = self.view(request, group)
+
+        if not response:
+            return
+
+        if isinstance(response, HttpResponseRedirect):
+            return response
+
+        if not isinstance(response, Response):
+            raise NotImplementedError('Please use self.render() when returning responses.')
+
+        return response.respond(self.request, {
+            'project': group.project,
+            'group': group,
+        })
+
+    def view(self, request, group, **kwargs):
+        """
+        Handles the view logic. If no response is given, we continue to the next action provider.
+        """
+
+    def before_events(self, request, group_list, **kwargs):
+        """
+        Allows preprocessing of groups in the list view.
+
+        This is generally useful if you need to cache lookups
+        for something like ``tags`` which would otherwise do
+        multiple queries.
+        """
+
+    def tags(self, request, group, tag_list, **kwargs):
+        """
+        Modifies the tag list for a grouped message.
+        """
+        return tag_list
+
+    def actions(self, request, group, action_list, **kwargs):
+        """
+        Modifies the action list for a grouped message.
+        """
+        return action_list
+
+    def panels(self, request, group, panel_list, **kwargs):
+        """
+        Modifies the panel list for a grouped message.
+        """
+        return panel_list
+
+    def widget(self, request, group, **kwargs):
+        """
+        Renders as a widget in the group details sidebar.
+        """
+
+    # Server side signals which do not have request context
+
+    def post_process(self, group, event, is_new, is_sample, **kwargs):
+        """
+        Post processes an event after it has been saved.
+        """
+
+
+class Plugin(IPlugin):
+    """
+    """
+    __metaclass__ = PluginMount(plugins)
+
diff --git a/tests/processors/__init__.py b/sentry/plugins/builtins/__init__.py
similarity index 100%
rename from tests/processors/__init__.py
rename to sentry/plugins/builtins/__init__.py
diff --git a/sentry/processors/mail.py b/sentry/plugins/sentry_mail/__init__.py
similarity index 96%
rename from sentry/processors/mail.py
rename to sentry/plugins/sentry_mail/__init__.py
index e22bd411fd..f0dfb58c14 100644
--- a/sentry/processors/mail.py
+++ b/sentry/plugins/sentry_mail/__init__.py
@@ -1,5 +1,5 @@
 """
-sentry.processors.mail
+sentry.plugins.sentry_mail
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
@@ -8,13 +8,12 @@ sentry.processors.mail
 from django.core.mail import send_mail
 from django.template.loader import render_to_string
 from sentry.conf import settings
-
-from .base import Processor
+from sentry.plugins import Plugin
 
 NOTSET = object()
 
 
-class MailProcessor(Processor):
+class MailProcessor(Plugin):
     def __init__(self, min_level=NOTSET, include_loggers=NOTSET, exclude_loggers=NOTSET,
                  send_to=NOTSET, *args, **kwargs):
 
diff --git a/sentry/plugins/sentry_redmine/models.py b/sentry/plugins/sentry_redmine/models.py
index 8166eae6b7..c2cd06ca77 100644
--- a/sentry/plugins/sentry_redmine/models.py
+++ b/sentry/plugins/sentry_redmine/models.py
@@ -36,14 +36,14 @@ class RedmineIssueForm(forms.Form):
 class CreateRedmineIssue(Plugin):
     title = 'Create Redmine Issue'
 
-    def actions(self, group, action_list, **kwargs):
+    def actions(self, request, group, action_list, **kwargs):
         if 'redmine' not in group.data:
             action_list.append((self.title, self.get_url(group)))
         return action_list
 
-    def view(self, group, **kwargs):
-        if self.request.POST:
-            form = RedmineIssueForm(self.request.POST)
+    def view(self, request, group, **kwargs):
+        if request.POST:
+            form = RedmineIssueForm(request.POST)
             if form.is_valid():
                 data = json.dumps({
                     'key': conf.REDMINE_API_KEY,
@@ -87,7 +87,7 @@ class CreateRedmineIssue(Plugin):
                     group.save()
                     return HttpResponseRedirect(reverse('sentry-group', args=[group.project.pk, group.pk]))
         else:
-            description = 'Sentry Message: %s' % self.request.build_absolute_uri(group.get_absolute_url())
+            description = 'Sentry Message: %s' % request.build_absolute_uri(group.get_absolute_url())
             description += '\n\n<pre>' + (group.traceback or group.message) + '</pre>'
 
             form = RedmineIssueForm(initial={
@@ -100,11 +100,11 @@ class CreateRedmineIssue(Plugin):
             'global_errors': form.errors.get('__all__'),
             'BASE_TEMPLATE': 'sentry/groups/details.html',
         }
-        context.update(csrf(self.request))
+        context.update(csrf(request))
 
         return self.render('sentry/plugins/redmine/create_issue.html', context)
 
-    def tags(self, group, tag_list):
+    def tags(self, request, group, tag_list):
         if 'redmine' in group.data:
             issue_id = group.data['redmine']['issue_id']
             tag_list.append(mark_safe('<a href="%s">#%s</a>' % (
diff --git a/sentry/plugins/sentry_servers/__init__.py b/sentry/plugins/sentry_servers/__init__.py
index 1ea63fd484..99fb2f166a 100644
--- a/sentry/plugins/sentry_servers/__init__.py
+++ b/sentry/plugins/sentry_servers/__init__.py
@@ -1,7 +1,30 @@
 """
 sentry.plugins.sentry_servers
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
+from sentry.plugins import Plugin
+
+
+class ServersPlugin(Plugin):
+    """
+    Adds additional support for showing information about servers including:
+
+    * A panel which shows all servers a message was seen on.
+    * A sidebar module which shows the servers most actively seen on.
+    """
+
+    title = 'Servers'
+
+    def panels(self, request, group, panel_list, **kwargs):
+        panel_list.append((self.get_title(), self.get_url(group)))
+        return panel_list
+
+    def view(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_servers/index.html')
+
+    def widget(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_servers/widget.html')
diff --git a/sentry/plugins/sentry_servers/models.py b/sentry/plugins/sentry_servers/models.py
deleted file mode 100644
index cdc9298afd..0000000000
--- a/sentry/plugins/sentry_servers/models.py
+++ /dev/null
@@ -1,29 +0,0 @@
-"""
-sentry.plugins.sentry_servers.models
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.plugins import Plugin
-
-
-class ServerGroupPanel(Plugin):
-    """Adds additional support for showing information about servers including:
-
-    * A panel which shows all servers a message was seen on.
-    * A sidebar module which shows the servers most actively seen on.
-    """
-
-    title = 'Servers'
-
-    def panels(self, group, panel_list, **kwargs):
-        panel_list.append((self.title, self.get_url(group)))
-        return panel_list
-
-    def view(self, group, **kwargs):
-        return self.render('sentry/plugins/sentry_servers/index.html')
-
-    def widget(self, group, **kwargs):
-        return self.render('sentry/plugins/sentry_servers/widget.html')
diff --git a/sentry/plugins/sentry_sites/__init__.py b/sentry/plugins/sentry_sites/__init__.py
index 0fa8e33e12..4ce2b314b3 100644
--- a/sentry/plugins/sentry_sites/__init__.py
+++ b/sentry/plugins/sentry_sites/__init__.py
@@ -1,7 +1,30 @@
 """
 sentry.plugins.sentry_sites
-~~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
+from sentry.plugins import Plugin
+
+
+class SitesPlugin(Plugin):
+    """
+    Adds additional support for showing information about sites including:
+
+    * A panel which shows all sites a message was seen on.
+    * A sidebar module which shows the sites most actively seen on.
+    """
+
+    title = 'Sites'
+
+    def panels(self, request, group, panel_list, **kwargs):
+        panel_list.append((self.get_title(), self.get_url(group)))
+        return panel_list
+
+    def view(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_sites/index.html')
+
+    def widget(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_sites/widget.html')
diff --git a/sentry/plugins/sentry_sites/models.py b/sentry/plugins/sentry_sites/models.py
deleted file mode 100644
index 6553dd6a9d..0000000000
--- a/sentry/plugins/sentry_sites/models.py
+++ /dev/null
@@ -1,29 +0,0 @@
-"""
-sentry.plugins.sentry_sites.models
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.plugins import Plugin
-
-
-class SiteGroupPanel(Plugin):
-    """Adds additional support for showing information about sites including:
-
-    * A panel which shows all sites a message was seen on.
-    * A sidebar module which shows the sites most actively seen on.
-    """
-
-    title = 'Sites'
-
-    def panels(self, group, panel_list, **kwargs):
-        panel_list.append((self.title, self.get_url(group)))
-        return panel_list
-
-    def view(self, group, **kwargs):
-        return self.render('sentry/plugins/sentry_sites/index.html')
-
-    def widget(self, group, **kwargs):
-        return self.render('sentry/plugins/sentry_sites/widget.html')
diff --git a/sentry/plugins/sentry_urls/__init__.py b/sentry/plugins/sentry_urls/__init__.py
index 00ed17f0fc..a722a44992 100644
--- a/sentry/plugins/sentry_urls/__init__.py
+++ b/sentry/plugins/sentry_urls/__init__.py
@@ -1,7 +1,30 @@
 """
 sentry.plugins.sentry_urls
-~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
+from sentry.plugins import Plugin
+
+
+class UrlsPlugin(Plugin):
+    """
+    Adds additional support for showing information about urls including:
+
+    * A panel which shows all urls a message was seen on.
+    * A sidebar module which shows the urls most actively seen on.
+    """
+
+    title = 'URLs'
+
+    def panels(self, request, group, panel_list, **kwargs):
+        panel_list.append((self.get_title(), self.get_url(group)))
+        return panel_list
+
+    def view(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_urls/index.html')
+
+    def widget(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_urls/widget.html')
diff --git a/sentry/plugins/sentry_urls/models.py b/sentry/plugins/sentry_urls/models.py
deleted file mode 100644
index 29f7bb055a..0000000000
--- a/sentry/plugins/sentry_urls/models.py
+++ /dev/null
@@ -1,29 +0,0 @@
-"""
-sentry.plugins.sentry_urls.models
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.plugins import Plugin
-
-
-class ServerUrlsPanel(Plugin):
-    """Adds additional support for showing information about urls including:
-
-    * A panel which shows all urls a message was seen on.
-    * A sidebar module which shows the urls most actively seen on.
-    """
-
-    title = 'URLs'
-
-    def panels(self, group, panel_list, **kwargs):
-        panel_list.append((self.title, self.get_url(group)))
-        return panel_list
-
-    def view(self, group, **kwargs):
-        return self.render('sentry/plugins/sentry_urls/index.html')
-
-    def widget(self, group, **kwargs):
-        return self.render('sentry/plugins/sentry_urls/widget.html')
diff --git a/sentry/processors/base.py b/sentry/processors/base.py
index 7bc60bc91f..762deda752 100644
--- a/sentry/processors/base.py
+++ b/sentry/processors/base.py
@@ -5,24 +5,11 @@ sentry.processors.base
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from sentry.conf import settings
-from sentry.utils import InstanceManager
+from sentry.plugins import plugins
 
-__all__ = ('Processor', 'send_group_processors')
-
-
-class Processor(object):
-    conditions = {}
-
-    def post_process(self, event):
-        """
-        Called every time an event is created
-        """
-        return
-
-    handlers = InstanceManager(settings.PROCESSORS)
+__all__ = ('send_group_processors',)
 
 
 def send_group_processors(**kwargs):
-    for processor in Processor.handlers.all():
+    for processor in plugins.all():
         processor.post_process(**kwargs)
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index c7fa00b8dd..197d3054e8 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -22,9 +22,9 @@
         <li{% if page == 'details' %} class="active"{% endif %}>
             <a href="{% url sentry-manage-project project.pk %}">{% trans "Details" %}</a>
         </li>
-        {% for slug, title in request.plugins.for_project %}
-            <li{% if page == 'plugin' and plugin.slug == slug %} class="active"{% endif %}>
-                <a href="{% url sentry-configure-project-plugin project.pk slug %}">{{ title }}</a>
+        {% for p in PLUGINS.for_project %}
+            <li{% if page == 'plugin' and p.slug == slug %} class="active"{% endif %}>
+                <a href="{% url sentry-configure-project-plugin project.pk slug %}">{{ p.get_title }}</a>
             </li>
         {% endfor %}
     </ul>
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 79c7ece5c6..efb80135fa 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -9,11 +9,13 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
 from paging.helpers import paginate as paginate_func
 from sentry.conf import settings
+from sentry.plugins import plugins
 from sentry.utils import json
 from templatetag_sugar.register import tag
 from templatetag_sugar.parser import Name, Variable, Constant, Optional
 
 import datetime
+import logging
 
 register = template.Library()
 
@@ -126,8 +128,13 @@ def sentry_version():
 @register.filter
 def get_actions(group, request):
     action_list = []
-    for inst in request.plugins:
-        action_list = inst.actions(group, action_list)
+    for inst in plugins.all():
+        try:
+            action_list = inst.actions(request, group, action_list)
+        except:
+            logger = logging.getLogger('sentry.plugins')
+            logger.exception('Error processing actions() on %r', inst.__class__)
+
     for action in action_list:
         yield action[0], action[1], request.path == action[1]
 
@@ -135,16 +142,26 @@ def get_actions(group, request):
 @register.filter
 def get_panels(group, request):
     panel_list = []
-    for inst in request.plugins:
-        panel_list = inst.panels(group, panel_list)
+    for inst in plugins.all():
+        try:
+            panel_list = inst.panels(request, group, panel_list)
+        except:
+            logger = logging.getLogger('sentry.plugins')
+            logger.exception('Error processing panels() on %r', inst.__class__)
+
     for panel in panel_list:
         yield panel[0], panel[1], request.path == panel[1]
 
 
 @register.filter
 def get_widgets(group, request):
-    for inst in request.plugins:
-        resp = inst.widget(group)
+    for inst in plugins.all():
+        try:
+            resp = inst.widget(request, group)
+        except:
+            logger = logging.getLogger('sentry.plugins')
+            logger.exception('Error processing widget() on %r', inst.__class__)
+            continue
         if resp:
             yield resp
 
@@ -152,8 +169,13 @@ def get_widgets(group, request):
 @register.filter
 def get_tags(group, request):
     tag_list = []
-    for inst in request.plugins:
-        tag_list = inst.tags(group, tag_list)
+    for inst in plugins.all():
+        try:
+            tag_list = inst.tags(request, group, tag_list)
+        except:
+            logger = logging.getLogger('sentry.plugins')
+            logger.exception('Error processing tags() on %r', inst.__class__)
+
     for tag in tag_list:
         yield tag
 
@@ -162,8 +184,12 @@ def get_tags(group, request):
 def handle_before_events(request, event_list):
     if not hasattr(event_list, '__iter__'):
         event_list = [event_list]
-    for inst in request.plugins:
-        inst.before_events(event_list)
+    for inst in plugins.all():
+        try:
+            inst.before_events(request, event_list)
+        except:
+            logger = logging.getLogger('sentry.plugins')
+            logger.exception('Error processing before_events() on %r', inst.__class__)
     return ''
 
 
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index 62f0b0f14d..bbb51d0b10 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -16,10 +16,16 @@ from django.utils.encoding import force_unicode
 
 
 class InstanceManager(object):
-    def __init__(self, class_list, instances=True):
+    def __init__(self, class_list=None, instances=True):
+        if class_list is None:
+            class_list = []
         self.instances = instances
         self.update(class_list)
 
+    def add(self, class_path):
+        self.cache = None
+        self.class_list.append(class_path)
+
     def update(self, class_list):
         """
         Updates the class list and wipes the cache.
diff --git a/sentry/views/base.py b/sentry/views/base.py
index 2924b7254a..d6cdfae25a 100644
--- a/sentry/views/base.py
+++ b/sentry/views/base.py
@@ -20,4 +20,4 @@ class View(object):
     def should_store(self, event):
         return False
 
-    handlers = InstanceManager(settings.VIEWS)
+    objects = InstanceManager(settings.VIEWS)
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index 7c96b6f08d..9712e4a616 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -25,7 +25,7 @@ from sentry.web.forms import ReplayForm
 @has_access
 def event_list(request, project):
     filters = []
-    for cls in Filter.handlers.filter(Event):
+    for cls in Filter.objects.filter(Event):
         filters.append(cls(request))
 
     try:
diff --git a/sentry/web/frontend/generic.py b/sentry/web/frontend/generic.py
index 5e4ba15cba..026c9cbc8d 100644
--- a/sentry/web/frontend/generic.py
+++ b/sentry/web/frontend/generic.py
@@ -16,7 +16,7 @@ from djkombu.models import Queue
 
 from sentry import environment
 from sentry.conf import settings
-from sentry.plugins import Plugin
+from sentry.plugins import plugins
 from sentry.web.decorators import login_required
 from sentry.web.helpers import get_project_list, render_to_response, \
   get_login_url, plugin_config
@@ -35,15 +35,13 @@ def dashboard(request):
 @login_required
 def status(request):
     from sentry.views import View
-    from sentry.processors import Processor
 
     if not request.user.is_staff:
         return HttpResponseRedirect(reverse('sentry'))
 
     # Deal with the plugins
     site_configs = []
-    for slug, title in request.plugins.for_site():
-        plugin = request.plugins[slug]
+    for plugin in plugins.for_site():
         action, view = plugin_config(plugin, None, request)
         if action == 'redirect':
             return HttpResponseRedirect(request.path)
@@ -83,9 +81,8 @@ def status(request):
         'environment': environment,
         'python_version': sys.version,
         'modules': sorted([(p.project_name, p.version) for p in pkg_resources.working_set]),
-        'extensions': [(cls.title, cls.__module__.rsplit('.', 1)[0]) for cls in Plugin.plugins.itervalues()],
-        'views': [(x.__class__.__name__, x.__module__) for x in View.handlers.all()],
-        'processors': [(x.__class__.__name__, x.__module__) for x in Processor.handlers.all()],
+        'extensions': [(p.get_title(), '%s.%s' % (p.__module__, p.__class__.__name__)) for p in plugins.all()],
+        'views': [(x.__class__.__name__, x.__module__) for x in View.objects.all()],
         'pending_tasks': pending_tasks,
         'worker_status': worker_status,
         'site_configs': site_configs,
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index df80b73fe9..c67b06f55d 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -19,6 +19,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.filters import Filter
 from sentry.models import Group, Event, View
+from sentry.plugins import plugins
 from sentry.utils import json, has_trending
 from sentry.web.decorators import has_access, login_required
 from sentry.web.helpers import render_to_response
@@ -57,7 +58,7 @@ def _get_sort_label(sort):
 
 def _get_group_list(request, project, view=None):
     filters = []
-    for cls in Filter.handlers.filter(Group):
+    for cls in Filter.objects.filter(Group):
         filters.append(cls(request))
 
     event_list = Group.objects
@@ -305,11 +306,11 @@ def group_plugin_action(request, project, group_id, slug):
         return HttpResponseRedirect(reverse('sentry-group-plugin-action', kwargs={'group_id': group.pk, 'project_id': group.project_id, 'slug': slug}))
 
     try:
-        plugin = request.plugins[slug]
+        plugin = plugins.get(slug)
     except KeyError:
 
         raise Http404('Plugin not found')
-    response = plugin.get_view_response(group)
+    response = plugin.get_view_response(request, group)
     if response:
         return response
     return HttpResponseRedirect(request.META.get('HTTP_REFERER') or reverse('sentry', kwargs={'project_id': group.project_id}))
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index df7c2155cb..24d16abe05 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -5,6 +5,7 @@ from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
 from sentry.models import MEMBER_USER, MEMBER_OWNER
+from sentry.plugins import plugins
 from sentry.web.decorators import login_required, has_access
 from sentry.web.forms import EditProjectForm, NewProjectForm, \
   EditProjectMemberForm, NewProjectMemberForm, RemoveProjectForm
@@ -172,7 +173,7 @@ def remove_project_member(request, project, member_id):
 @csrf_protect
 def configure_project_plugin(request, project, slug):
     try:
-        plugin = request.plugins[slug]
+        plugin = plugins.get(slug)
     except KeyError:
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
 
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index 4293626e99..185d0000ef 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -77,6 +77,8 @@ def iter_data(obj):
 
 
 def render_to_string(template, context=None, request=None):
+    from sentry.plugins import plugins
+
     if context is None:
         context = {}
 
@@ -86,6 +88,7 @@ def render_to_string(template, context=None, request=None):
         'PROJECT_ID': int(settings.PROJECT),
         'VIEWS': list(View.objects.all()),
         'URL_PREFIX': settings.URL_PREFIX,
+        'PLUGINS': plugins,
     })
 
     if request:
diff --git a/tests/plugins/tests.py b/tests/plugins/tests.py
index 8bd08efe55..2c0eb7672a 100644
--- a/tests/plugins/tests.py
+++ b/tests/plugins/tests.py
@@ -6,6 +6,4 @@ from tests.base import TestCase
 
 
 class SentryPluginTest(TestCase):
-    def test_registration(self):
-        from sentry.plugins import Plugin
-        self.assertEquals(len(Plugin.plugins), 3)
+    pass
diff --git a/tests/processors/processor.py b/tests/processors/processor.py
deleted file mode 100644
index 0441fb951f..0000000000
--- a/tests/processors/processor.py
+++ /dev/null
@@ -1,10 +0,0 @@
-from sentry.processors import Processor
-
-
-class TestProcessor(Processor):
-
-    def __init__(self, *args, **kwargs):
-        self.called = 0
-
-    def post_process(self, **kwargs):
-        self.called += 1
diff --git a/tests/processors/tests.py b/tests/processors/tests.py
deleted file mode 100644
index 9f3f9ae665..0000000000
--- a/tests/processors/tests.py
+++ /dev/null
@@ -1,80 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from mock import Mock
-from sentry.processors import Processor
-from sentry.processors.mail import MailProcessor
-from sentry.conf import settings
-
-from tests.base import TestCase
-
-from . import processor
-
-
-class SentryProcessorsTest(TestCase):
-    def setUp(self):
-        self.orig_processors = settings.PROCESSORS
-        Processor.handlers.update((
-            'tests.processors.processor.TestProcessor',
-        ))
-        processor.CALLED = 0
-
-    def tearDown(self):
-        settings.PROCESSORS = self.orig_processors
-        Processor.handlers.update(settings.PROCESSORS)
-
-    def create_event(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200)
-
-    def test_processors_cache(self):
-        # TODO: move these tests to base instance manager tests
-        self.assertEqual(Processor.handlers.cache, None)
-
-        # ensure cache gets updated after all() is called
-        self.assertEqual(len(Processor.handlers.all()), 1)
-        self.assertNotEqual(Processor.handlers.cache, None)
-        self.assertEqual(len(Processor.handlers.cache), 1)
-
-    def test_processors_called(self):
-        self.create_event()
-        self.create_event()
-        proc_list = Processor.handlers.all()
-        self.assertEqual(len(proc_list), 1)
-        self.assertEqual(proc_list[0].called, 2)
-
-
-class MailProcessorTest(TestCase):
-    def test_should_mail(self):
-        # no admins
-        p = MailProcessor(send_to=())
-        self.assertFalse(p.should_mail(group=Mock(), event=Mock()))
-
-        # not min level
-        p = MailProcessor(send_to=['foo@exampe.com'], min_level=2)
-        group = Mock()
-        group.level = 1
-        self.assertFalse(p.should_mail(group=group, event=Mock()))
-
-        # not in inclusion
-        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, include_loggers=['foo'])
-        group = Mock()
-        group.level = 5
-        group.logger = 'root'
-        self.assertFalse(p.should_mail(group=group, event=Mock()))
-
-        # in exclusion
-        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, exclude_loggers=['root'])
-        group = Mock()
-        group.level = 5
-        group.logger = 'root'
-        self.assertFalse(p.should_mail(group=group, event=Mock()))
-
-        # in exclusion
-        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None)
-        group = Mock()
-        group.level = 5
-        group.logger = 'root'
-        self.assertTrue(p.should_mail(group=group, event=Mock()))
diff --git a/tests/views/tests.py b/tests/views/tests.py
index a127ffb0d6..2c8212e73b 100644
--- a/tests/views/tests.py
+++ b/tests/views/tests.py
@@ -14,16 +14,16 @@ from tests.base import TestCase
 class ViewIntegrationTest(TestCase):
     def setUp(self):
         self.orig = settings.VIEWS
-        View.handlers.update((
+        View.objects.update((
             'sentry.views.Exception',
             'sentry.views.Query',
             'sentry.views.Message',
         ))
-        assert len(View.handlers.all()) == 3
+        assert len(View.objects.all()) == 3
 
     def tearDown(self):
         settings.VIEWS = self.orig
-        View.handlers.update(settings.VIEWS)
+        View.objects.update(settings.VIEWS)
 
     def create_event(self, data):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
