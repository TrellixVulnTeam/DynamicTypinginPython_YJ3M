commit d8c4d1e4415ea73a7cf45a4405c4e21070efc3a0
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Fri Nov 2 12:40:59 2018 -0700

    feat(integrations): Gitlab client refresh (#9832)
    
    * Changed provider and integration so that they use the build_api_url from the client function.
    
    * saving place
    
    * small clean-up things.
    
    * Added a comment
    
    * fixed merge conflit mistake
    
    * fixed typo
    
    * fixed circular import
    
    * removed unneeded change.
    
    * revised refresh token for gitlab completely. wrote tests to test that the api calls and actions are taken.
    
    * changed the name of the variable to is_refreshing_api
    _call

diff --git a/src/sentry/identity/gitlab/provider.py b/src/sentry/identity/gitlab/provider.py
index 71597b3de4..ba44218b26 100644
--- a/src/sentry/identity/gitlab/provider.py
+++ b/src/sentry/identity/gitlab/provider.py
@@ -1,7 +1,32 @@
 from __future__ import absolute_import
 
 from sentry import http
+from sentry.auth.exceptions import IdentityNotValid
+from sentry.http import safe_urlopen, safe_urlread
 from sentry.identity.oauth2 import OAuth2Provider
+from sentry.utils import json
+
+
+def get_oauth_data(payload):
+    data = {'access_token': payload['access_token']}
+
+    # https://docs.gitlab.com/ee/api/oauth2.html#2-requesting-access-token
+    # doesn't seem to be correct, format we actually get:
+    # {
+    #   "access_token": "123432sfh29uhs29347",
+    #   "token_type": "bearer",
+    #   "refresh_token": "29f43sdfsk22fsj929",
+    #   "created_at": 1536798907,
+    #   "scope": "api"
+    # }
+    if 'refresh_token' in payload:
+        data['refresh_token'] = payload['refresh_token']
+    if 'token_type' in payload:
+        data['token_type'] = payload['token_type']
+    if 'created_at' in payload:
+        data['created_at'] = int(payload['created_at'])
+
+    return data
 
 
 def get_user_info(access_token, installation_data):
@@ -35,3 +60,38 @@ class GitlabIdentityProvider(OAuth2Provider):
             'scopes': sorted(data['scope'].split(',')),
             'data': self.get_oauth_data(data),
         }
+
+    def get_refresh_token_params(self, refresh_token, *args, **kwargs):
+        return {
+            'grant_type': 'refresh_token',
+            'refresh_token': refresh_token,
+        }
+
+    def refresh_identity(self, identity, *args, **kwargs):
+        refresh_token = identity.data.get('refresh_token')
+        refresh_token_url = kwargs.get('refresh_token_url')
+
+        if not refresh_token:
+            raise IdentityNotValid('Missing refresh token')
+
+        if not refresh_token_url:
+            raise IdentityNotValid('Missing refresh token url')
+
+        data = self.get_refresh_token_params(refresh_token, *args, **kwargs)
+
+        req = safe_urlopen(
+            url=refresh_token_url,
+            headers={},
+            data=data,
+        )
+
+        try:
+            body = safe_urlread(req)
+            payload = json.loads(body)
+        except Exception:
+            payload = {}
+
+        self.handle_refresh_error(req, payload)
+
+        identity.data.update(get_oauth_data(payload))
+        return identity.update(data=identity.data)
diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index dc1fcb0061..4e4326bd1e 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -2,8 +2,8 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.integrations.client import ApiClient, OAuth2RefreshMixin
-from sentry.integrations.exceptions import ApiError
+from sentry.integrations.client import ApiClient
+from sentry.integrations.exceptions import ApiError, ApiUnauthorized
 from sentry.utils.http import absolute_uri
 from six.moves.urllib.parse import quote
 
@@ -12,6 +12,7 @@ API_VERSION = u'/api/v4'
 
 
 class GitLabApiClientPath(object):
+    oauth_token = u'/oauth/token'
     commit = u'/projects/{project}/repository/commits/{sha}'
     commits = u'/projects/{project}/repository/commits'
     compare = u'/projects/{project}/repository/compare'
@@ -71,11 +72,12 @@ class GitLabSetupClient(ApiClient):
         )
 
 
-class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
+class GitLabApiClient(ApiClient):
 
     def __init__(self, installation):
         self.installation = installation
         verify_ssl = self.metadata['verify_ssl']
+        self.is_refreshing_token = False
         super(GitLabApiClient, self).__init__(verify_ssl)
 
     @property
@@ -87,19 +89,43 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
         return self.installation.model.metadata
 
     def request(self, method, path, data=None, params=None):
-        # TODO(lb): Refresh auth
-        # self.check_auth(redirect_url=self.oauth_redirect_url)
         access_token = self.identity.data['access_token']
         headers = {
             'Authorization': u'Bearer {}'.format(access_token)
         }
-        return self._request(
-            method,
-            GitLabApiClientPath.build_api_url(
-                self.metadata['base_url'],
-                path
-            ),
-            headers=headers, data=data, params=params
+        url = GitLabApiClientPath.build_api_url(
+            self.metadata['base_url'],
+            path
+        )
+        try:
+            return self._request(
+                method,
+                url,
+                headers=headers, data=data, params=params
+            )
+        except ApiUnauthorized as e:
+            if self.is_refreshing_token:
+                raise e
+            self.is_refreshing_token = True
+            self.refresh_auth()
+            resp = self._request(
+                method,
+                url,
+                headers=headers, data=data, params=params
+            )
+            self.is_refreshing_token = False
+            return resp
+
+    def refresh_auth(self):
+        """
+        Modeled after Doorkeeper's docs
+        where Doorkeeper is a dependency for GitLab that handles OAuth
+
+        https://github.com/doorkeeper-gem/doorkeeper/wiki/Enable-Refresh-Token-Credentials#testing-with-oauth2-gem
+        """
+        self.identity.get_provider().refresh_identity(
+            self.identity,
+            refresh_token_url='%s%s' % (self.metadata['base_url'], GitLabApiClientPath.oauth_token),
         )
 
     def get_user(self):
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index d090876fd5..2eafdbb217 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -6,7 +6,7 @@ from django import forms
 
 from sentry.web.helpers import render_to_response
 from sentry.identity.pipeline import IdentityProviderPipeline
-from sentry.identity.gitlab import get_user_info
+from sentry.identity.gitlab import get_user_info, get_oauth_data
 from sentry.identity.gitlab.provider import GitlabIdentityProvider
 from sentry.integrations import (
     FeatureDescription,
@@ -235,25 +235,6 @@ class GitlabIntegrationProvider(IntegrationProvider):
             config=identity_pipeline_config,
         )
 
-    def get_oauth_data(self, payload):
-        data = {'access_token': payload['access_token']}
-
-        # https://docs.gitlab.com/ee/api/oauth2.html#2-requesting-access-token
-        # doesn't seem to be correct, format we actually get:
-        # {
-        #   "access_token": "123432sfh29uhs29347",
-        #   "token_type": "bearer",
-        #   "refresh_token": "29f43sdfsk22fsj929",
-        #   "created_at": 1536798907,
-        #   "scope": "api"
-        # }
-        if 'refresh_token' in payload:
-            data['refresh_token'] = payload['refresh_token']
-        if 'token_type' in payload:
-            data['token_type'] = payload['token_type']
-
-        return data
-
     def get_group_info(self, access_token, installation_data):
         client = GitLabSetupClient(
             installation_data['url'],
@@ -272,7 +253,7 @@ class GitlabIntegrationProvider(IntegrationProvider):
 
     def build_integration(self, state):
         data = state['identity']['data']
-        oauth_data = self.get_oauth_data(data)
+        oauth_data = get_oauth_data(data)
         user = get_user_info(data['access_token'], state['installation_data'])
         group = self.get_group_info(data['access_token'], state['installation_data'])
         scopes = sorted(GitlabIdentityProvider.oauth_scopes)
diff --git a/tests/sentry/integrations/gitlab/test_client.py b/tests/sentry/integrations/gitlab/test_client.py
new file mode 100644
index 0000000000..dd4c6a53e0
--- /dev/null
+++ b/tests/sentry/integrations/gitlab/test_client.py
@@ -0,0 +1,124 @@
+from __future__ import absolute_import
+import responses
+import pytest
+
+from sentry.auth.exceptions import IdentityNotValid
+from sentry.models import Identity
+from sentry.utils import json
+from .testutils import GitLabTestCase
+
+
+class GitlabRefreshAuthTest(GitLabTestCase):
+    get_user_should_succeed = True
+
+    def setUp(self):
+        super(GitlabRefreshAuthTest, self).setUp()
+        self.client = self.installation.get_client()
+        self.request_data = {'id': 'user_id'}
+        self.request_url = 'https://example.gitlab.com/api/v4/user'
+        self.refresh_url = 'https://example.gitlab.com/oauth/token'
+        self.refresh_response = {
+            'access_token': '123432sfh29uhs29347',
+            'token_type': 'bearer',
+            'refresh_token': '29f43sdfsk22fsj929',
+            'created_at': 1536798907,
+            'scope': 'api'
+        }
+        self.original_identity_data = dict(self.client.identity.data)
+
+    def tearDown(self):
+        responses.reset()
+
+    def make_users_request(self):
+        return self.client.get_user()
+
+    def add_refresh_auth(self, success=True):
+        responses.add(
+            responses.POST,
+            self.refresh_url,
+            status=200 if success else 401,
+            json=self.refresh_response if success else {}
+        )
+
+    def add_get_user_response(self, success):
+        responses.add(
+            responses.GET,
+            self.request_url,
+            json=self.request_data if success else {},
+            status=200 if success else 401,
+        )
+
+    def assert_response_call(self, call, url, status):
+        assert call.request.url == url
+        assert call.response.status_code == status
+
+    def assert_data(self, data, expected_data):
+        assert data['access_token'] == expected_data['access_token']
+        assert data['refresh_token'] == expected_data['refresh_token']
+        assert data['created_at'] == expected_data['created_at']
+
+    def assert_request_failed_refresh(self):
+        responses_calls = responses.calls
+        assert len(responses_calls) == 2
+
+        self.assert_response_call(responses_calls[0], self.request_url, 401)
+        self.assert_response_call(responses_calls[1], self.refresh_url, 401)
+
+    def assert_request_with_refresh(self):
+        responses_calls = responses.calls
+        assert len(responses_calls) == 3
+
+        self.assert_response_call(responses_calls[0], self.request_url, 401)
+        self.assert_response_call(responses_calls[1], self.refresh_url, 200)
+        self.assert_response_call(responses_calls[2], self.request_url, 200)
+
+        assert json.loads(responses_calls[2].response.text) == self.request_data
+
+    def assert_identity_was_refreshed(self):
+        data = self.client.identity.data
+        self.assert_data(data, self.refresh_response)
+
+        data = Identity.objects.get(id=self.client.identity.id).data
+        self.assert_data(data, self.refresh_response)
+
+    def assert_identity_was_not_refreshed(self):
+        data = self.client.identity.data
+        self.assert_data(data, self.original_identity_data)
+
+        data = Identity.objects.get(id=self.client.identity.id).data
+        self.assert_data(data, self.original_identity_data)
+
+    @responses.activate
+    def test_refresh_auth_flow(self):
+        # Fail first then succeed
+        self.add_get_user_response(success=False)
+        self.add_get_user_response(success=True)
+
+        self.add_refresh_auth(success=True)
+
+        resp = self.make_users_request()
+        self.assert_request_with_refresh()
+        assert resp == self.request_data
+        self.assert_identity_was_refreshed()
+
+    @responses.activate
+    def test_refresh_auth_fails_gracefully(self):
+        self.add_get_user_response(success=False)
+        self.add_refresh_auth(success=False)
+
+        with pytest.raises(IdentityNotValid):
+            self.make_users_request()
+
+        self.assert_request_failed_refresh()
+        self.assert_identity_was_not_refreshed()
+
+    @responses.activate
+    def test_no_refresh_when_api_call_successful(self):
+        self.add_get_user_response(success=True)
+        resp = self.make_users_request()
+
+        len(responses.calls) == 1
+        call = responses.calls[0]
+        self.assert_response_call(call, self.request_url, 200)
+        assert resp == self.request_data
+        self.assert_identity_was_not_refreshed()
diff --git a/tests/sentry/integrations/gitlab/testutils.py b/tests/sentry/integrations/gitlab/testutils.py
index d792a7b5ac..853baef22e 100644
--- a/tests/sentry/integrations/gitlab/testutils.py
+++ b/tests/sentry/integrations/gitlab/testutils.py
@@ -42,7 +42,8 @@ class GitLabTestCase(APITestCase):
             external_id='gitlab123',
             data={
                 'access_token': '123456789',
-                'expires': time() + 1234567,
+                'created_at': time(),
+                'refresh_token': '0987654321',
             }
         )
         self.integration.add_organization(self.organization, self.user, identity.id)
