commit 5dd7ddd4cfb53cd99c9b40022c28146c655f8598
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Apr 2 15:39:16 2018 -0700

    ref(api): Refactor user avatar endpoint to be reusable

diff --git a/src/sentry/api/bases/avatar.py b/src/sentry/api/bases/avatar.py
new file mode 100644
index 0000000000..7ec4c74100
--- /dev/null
+++ b/src/sentry/api/bases/avatar.py
@@ -0,0 +1,66 @@
+from __future__ import absolute_import
+
+from rest_framework import status
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.api.fields import AvatarField
+from sentry.api.serializers import serialize
+
+
+class AvatarSerializer(serializers.Serializer):
+    avatar_photo = AvatarField(required=False)
+    avatar_type = serializers.ChoiceField(
+        choices=(
+            ('upload', 'upload'), ('gravatar', 'gravatar'), ('letter_avatar', 'letter_avatar'),
+        )
+    )
+
+    def validate(self, attrs):
+        attrs = super(AvatarSerializer, self).validate(attrs)
+        if attrs.get('avatar_type') == 'upload':
+            model_type = self.context['type']
+            has_existing_file = model_type.objects.filter(
+                file__isnull=False,
+                **self.context['kwargs']
+            ).exists()
+            if not has_existing_file and not attrs.get('avatar_photo'):
+                raise serializers.ValidationError(
+                    {
+                        'avatar_type': 'Cannot set avatar_type to upload without avatar_photo',
+                    }
+                )
+        return attrs
+
+
+class AvatarMixin(object):
+    object_type = None
+    model = None
+
+    def get(self, request, obj):
+        return Response(serialize(obj, request.user))
+
+    def get_serializer_context(self, obj, **kwargs):
+        return {
+            'type': self.model,
+            'kwargs': {self.object_type: obj},
+        }
+
+    def put(self, request, obj):
+        serializer = AvatarSerializer(
+            data=request.DATA,
+            context=self.get_serializer_context(obj),
+        )
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+        result = serializer.object
+
+        self.model.save_avatar(
+            relation={self.object_type: obj},
+            type=result['avatar_type'],
+            avatar=result.get('avatar_photo'),
+            filename='{}.png'.format(obj.id),
+        )
+
+        return Response(serialize(obj, request.user))
diff --git a/src/sentry/api/endpoints/useravatar.py b/src/sentry/api/endpoints/useravatar.py
index b9556f67e8..d759721dbd 100644
--- a/src/sentry/api/endpoints/useravatar.py
+++ b/src/sentry/api/endpoints/useravatar.py
@@ -1,61 +1,22 @@
 from __future__ import absolute_import
 
 from rest_framework import status
-from rest_framework import serializers
 from rest_framework.response import Response
 
+from sentry.api.bases.avatar import AvatarMixin
 from sentry.api.bases.user import UserEndpoint
-from sentry.api.fields import AvatarField
-from sentry.api.serializers import serialize
 from sentry.models import UserAvatar
 
 
-class UserAvatarSerializer(serializers.Serializer):
-    avatar_photo = AvatarField(required=False)
-    avatar_type = serializers.ChoiceField(
-        choices=(
-            ('upload', 'upload'), ('gravatar', 'gravatar'), ('letter_avatar', 'letter_avatar'),
-        )
-    )
+class UserAvatarEndpoint(AvatarMixin, UserEndpoint):
+    object_type = 'user'
+    model = UserAvatar
 
-    def validate(self, attrs):
-        attrs = super(UserAvatarSerializer, self).validate(attrs)
-        if attrs.get('avatar_type') == 'upload':
-            has_existing_file = UserAvatar.objects.filter(
-                user=self.context['user'],
-                file__isnull=False,
-            ).exists()
-            if not has_existing_file and not attrs.get('avatar_photo'):
-                raise serializers.ValidationError(
-                    {
-                        'avatar_type': 'Cannot set avatar_type to upload without avatar_photo',
-                    }
-                )
-        return attrs
-
-
-class UserAvatarEndpoint(UserEndpoint):
     def get(self, request, user):
-        return Response(serialize(user, request.user))
+        return super(UserAvatarEndpoint, self).get(request, user)
 
     def put(self, request, user):
         if user != request.user:
             return Response(status=status.HTTP_403_FORBIDDEN)
 
-        serializer = UserAvatarSerializer(
-            data=request.DATA,
-            context={'user': user},
-        )
-        if not serializer.is_valid():
-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
-
-        result = serializer.object
-
-        UserAvatar.save_avatar(
-            relation={'user': user},
-            type=result['avatar_type'],
-            avatar=result.get('avatar_photo'),
-            filename='{}.png'.format(user.id),
-        )
-
-        return Response(serialize(user, request.user))
+        return super(UserAvatarEndpoint, self).put(request, user)
