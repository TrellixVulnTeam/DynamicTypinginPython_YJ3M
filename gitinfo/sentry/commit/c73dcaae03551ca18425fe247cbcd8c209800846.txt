commit c73dcaae03551ca18425fe247cbcd8c209800846
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Mar 24 19:35:22 2016 -0700

    If devserver has no daemons, use the fast path

diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
index d6c257a9c5..04b950d693 100644
--- a/src/sentry/runner/commands/devserver.py
+++ b/src/sentry/runner/commands/devserver.py
@@ -17,8 +17,7 @@ from sentry.runner.decorators import configuration
 @click.option('--workers/--no-workers', default=False, help='Run asynchronous workers.')
 @click.argument('bind', default='127.0.0.1:8000', metavar='ADDRESS')
 @configuration
-@click.pass_context
-def devserver(ctx, reload, watchers, workers, bind):
+def devserver(reload, watchers, workers, bind):
     "Starts a lightweight web server for development."
     if ':' in bind:
         host, port = bind.split(':', 1)
@@ -54,28 +53,33 @@ def devserver(ctx, reload, watchers, workers, bind):
             ['sentry', 'celery', 'beat', '-l', 'INFO'],
         ]
 
+    # If we don't need any other daemons, just launch a normal uwsgi webserver
+    # and avoid dealing with subprocesses
+    if not daemons:
+        click.secho('*** Launching webserver..', bold=True)
+        SentryHTTPServer(host=host, port=port, workers=1).run()
+        return
+
+    from subprocess import Popen
     cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))
+    env = os.environ.copy()
 
     daemon_list = []
     server = None
     try:
-        if daemons:
-            import os
-            from subprocess import Popen
-            env = os.environ.copy()
-            for daemon in daemons:
-                click.secho('*** Running: {0}'.format(' '.join([os.path.basename(daemon[0])] + daemon[1:])), bold=True)
-                try:
-                    daemon_list.append(Popen(daemon, cwd=cwd, env=env))
-                except OSError:
-                    raise click.ClickException('{0} not found.'.format(daemon[0]))
+        for daemon in daemons:
+            click.secho('*** Running: {0}'.format(' '.join([os.path.basename(daemon[0])] + daemon[1:])), bold=True)
+            try:
+                daemon_list.append(Popen(daemon, cwd=cwd, env=env))
+            except OSError:
+                raise click.ClickException('{0} not found.'.format(daemon[0]))
 
         click.secho('*** Launching webserver..', bold=True)
         server = SentryHTTPServer(
             host=host,
             port=port,
             workers=1,
-        ).run_subprocess(cwd=cwd)
+        ).run_subprocess(cwd=cwd, env=env)
         server.wait()
     finally:
         if server and server.poll() is None:
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index a3a10c11ed..f1191bbdba 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -116,13 +116,16 @@ class SentryHTTPServer(Service):
 
         validate_settings(django_settings)
 
-    def prepare_environment(self):
+    def prepare_environment(self, env=None):
+        if env is None:
+            env = os.environ
+
         # Move all of the options into UWSGI_ env vars
         for k, v in convert_options_to_env(self.options):
-            os.environ.setdefault(k, v)
+            env.setdefault(k, v)
 
         # This has already been validated inside __init__
-        os.environ['SENTRY_SKIP_BACKEND_VALIDATION'] = '1'
+        env['SENTRY_SKIP_BACKEND_VALIDATION'] = '1'
 
         # Look up the bin directory where `sentry` exists, which should be
         # sys.argv[0], then inject that to the front of our PATH so we can reliably
@@ -130,15 +133,17 @@ class SentryHTTPServer(Service):
         # This is so the virtualenv doesn't need to be sourced in, which effectively
         # does exactly this.
         virtualenv_path = os.path.dirname(os.path.abspath(sys.argv[0]))
-        current_path = os.environ.get('PATH', '')
+        current_path = env.get('PATH', '')
         if virtualenv_path not in current_path:
-            os.environ['PATH'] = '%s:%s' % (virtualenv_path, current_path)
+            env['PATH'] = '%s:%s' % (virtualenv_path, current_path)
 
     def run(self):
         self.prepare_environment()
         os.execvp('uwsgi', ('uwsgi',))
 
-    def run_subprocess(self, cwd=None):
+    def run_subprocess(self, cwd=None, env=None):
         from subprocess import Popen
-        self.prepare_environment()
-        return Popen(['uwsgi'], cwd=cwd, env=os.environ.copy())
+        if env is None:
+            env = os.environ.copy()
+        self.prepare_environment(env)
+        return Popen(['uwsgi'], cwd=cwd, env=env)
