commit 1ce310b72f755c72ce27be402740fb1df775203a
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat Nov 30 01:49:10 2019 +0100

    feat(proguard): Remap exception names in proguard (#15795)

diff --git a/src/sentry/lang/java/plugin.py b/src/sentry/lang/java/plugin.py
index 8cd998d61e..787dc2bd96 100644
--- a/src/sentry/lang/java/plugin.py
+++ b/src/sentry/lang/java/plugin.py
@@ -80,6 +80,24 @@ class JavaStacktraceProcessor(StacktraceProcessor):
 
         return True
 
+    def process_exception(self, exception):
+        ty = exception.get("type")
+        mod = exception.get("module")
+        if not ty or not mod:
+            return False
+
+        key = "%s.%s" % (mod, ty)
+
+        for view in self.mapping_views:
+            original = view.lookup(key)
+            if original != key:
+                new_module, new_cls = original.rsplit(".", 1)
+                exception["module"] = new_module
+                exception["type"] = new_cls
+                return True
+
+        return False
+
     def process_frame(self, processable_frame, processing_task):
         new_module = None
         new_function = None
diff --git a/src/sentry/stacktraces/processing.py b/src/sentry/stacktraces/processing.py
index c6ff67badc..35e116bab3 100644
--- a/src/sentry/stacktraces/processing.py
+++ b/src/sentry/stacktraces/processing.py
@@ -16,7 +16,9 @@ from sentry.stacktraces.functions import set_in_app, trim_function_name
 
 logger = logging.getLogger(__name__)
 
-StacktraceInfo = namedtuple("StacktraceInfo", ["stacktrace", "container", "platforms"])
+StacktraceInfo = namedtuple(
+    "StacktraceInfo", ["stacktrace", "container", "platforms", "is_exception"]
+)
 StacktraceInfo.__hash__ = lambda x: id(x)
 StacktraceInfo.__eq__ = lambda a, b: a is b
 StacktraceInfo.__ne__ = lambda a, b: a is not b
@@ -145,6 +147,10 @@ class StacktraceProcessor(object):
         """
         pass
 
+    def process_exception(self, exception):
+        """Processes an exception."""
+        return False
+
     def process_frame(self, processable_frame, processing_task):
         """Processes the processable frame and returns a tuple of three
         lists: ``(frames, raw_frames, errors)`` where frames is the list of
@@ -162,26 +168,36 @@ class StacktraceProcessor(object):
         return False
 
 
-def find_stacktraces_in_data(data, include_raw=False):
+def find_stacktraces_in_data(data, include_raw=False, with_exceptions=False):
     """Finds all stracktraces in a given data blob and returns it
     together with some meta information.
 
-    If `include_raw` is True, then also raw stacktraces are included.
+    If `include_raw` is True, then also raw stacktraces are included.  If
+    `with_exceptions` is set to `True` then stacktraces of the exception
+    are always included and the `is_exception` flag is set on that stack
+    info object.
     """
     rv = []
 
-    def _report_stack(stacktrace, container):
-        if not stacktrace or not get_path(stacktrace, "frames", filter=True):
+    def _report_stack(stacktrace, container, is_exception=False):
+        if not is_exception and (not stacktrace or not get_path(stacktrace, "frames", filter=True)):
             return
 
         platforms = set(
             frame.get("platform") or data.get("platform")
             for frame in get_path(stacktrace, "frames", filter=True, default=())
         )
-        rv.append(StacktraceInfo(stacktrace=stacktrace, container=container, platforms=platforms))
+        rv.append(
+            StacktraceInfo(
+                stacktrace=stacktrace,
+                container=container,
+                platforms=platforms,
+                is_exception=is_exception,
+            )
+        )
 
     for exc in get_path(data, "exception", "values", filter=True, default=()):
-        _report_stack(exc.get("stacktrace"), exc)
+        _report_stack(exc.get("stacktrace"), exc, is_exception=with_exceptions)
 
     _report_stack(data.get("stacktrace"), None)
 
@@ -278,7 +294,7 @@ def normalize_stacktraces_for_grouping(data, grouping_config=None):
 def should_process_for_stacktraces(data):
     from sentry.plugins.base import plugins
 
-    infos = find_stacktraces_in_data(data)
+    infos = find_stacktraces_in_data(data, with_exceptions=True)
     platforms = set()
     for info in infos:
         platforms.update(info.platforms or ())
@@ -462,7 +478,7 @@ def dedup_errors(errors):
 
 
 def process_stacktraces(data, make_processors=None, set_raw_stacktrace=True):
-    infos = find_stacktraces_in_data(data)
+    infos = find_stacktraces_in_data(data, with_exceptions=True)
     if make_processors is None:
         processors = get_processors_for_stacktraces(data, infos)
     else:
@@ -486,6 +502,15 @@ def process_stacktraces(data, make_processors=None, set_raw_stacktrace=True):
 
         # Process all stacktraces
         for stacktrace_info, processable_frames in processing_task.iter_processable_stacktraces():
+            # Let the stacktrace processors touch the exception
+            if stacktrace_info.is_exception and stacktrace_info.container:
+                for processor in processing_task.iter_processors():
+                    if processor.process_exception(stacktrace_info.container):
+                        changed = True
+
+            # If the stacktrace is empty we skip it for processing
+            if not stacktrace_info.stacktrace:
+                continue
             new_frames, new_raw_frames, errors = process_single_stacktrace(
                 processing_task, stacktrace_info, processable_frames
             )
diff --git a/tests/sentry/lang/java/test_plugin.py b/tests/sentry/lang/java/test_plugin.py
index 6690ad40c7..c60a2e4d0a 100644
--- a/tests/sentry/lang/java/test_plugin.py
+++ b/tests/sentry/lang/java/test_plugin.py
@@ -81,7 +81,8 @@ class BasicResolvingIntegrationTest(TestCase):
                                 },
                             ]
                         },
-                        "type": "RuntimeException",
+                        "module": "org.a.b",
+                        "type": "g$a",
                         "value": "Shit broke yo",
                     }
                 ]
@@ -105,9 +106,12 @@ class BasicResolvingIntegrationTest(TestCase):
         event_id = json.loads(resp.content)["id"]
 
         event = eventstore.get_event_by_id(self.project.id, event_id)
-        bt = event.interfaces["exception"].values[0].stacktrace
+        exc = event.interfaces["exception"].values[0]
+        bt = exc.stacktrace
         frames = bt.frames
 
+        assert exc.type == "Util$ClassContextSecurityManager"
+        assert exc.module == "org.slf4j.helpers"
         assert frames[0].function == "getClassContext"
         assert frames[0].module == "org.slf4j.helpers.Util$ClassContextSecurityManager"
         assert frames[1].function == "getExtraClassContext"
diff --git a/tests/sentry/test_stacktraces.py b/tests/sentry/test_stacktraces.py
index cb21d15fdc..bdcb5196ae 100644
--- a/tests/sentry/test_stacktraces.py
+++ b/tests/sentry/test_stacktraces.py
@@ -146,6 +146,13 @@ class FindStacktracesTest(TestCase):
             },
         }
 
+        infos = find_stacktraces_in_data(data, with_exceptions=True)
+        assert len(infos) == 4
+        assert sum(1 for x in infos if x.stacktrace) == 3
+        assert sum(1 for x in infos if x.is_exception) == 4
+        # XXX: The null frame is still part of this stack trace!
+        assert len(infos[3].stacktrace["frames"]) == 3
+
         infos = find_stacktraces_in_data(data)
         assert len(infos) == 1
         # XXX: The null frame is still part of this stack trace!
