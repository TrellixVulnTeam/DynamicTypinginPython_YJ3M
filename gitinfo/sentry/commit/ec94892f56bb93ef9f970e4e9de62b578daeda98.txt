commit ec94892f56bb93ef9f970e4e9de62b578daeda98
Author: Ted Kaemming <ted@kaemming.com>
Date:   Thu Oct 15 14:11:52 2015 -0700

    Send single event notification when a digest only contains one group.

diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index f6fdc10e06..83adfa8b83 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -7,6 +7,9 @@ sentry.plugins.sentry_mail.models
 """
 from __future__ import absolute_import
 
+import itertools
+from collections import Counter
+
 import sentry
 
 from django.conf import settings
@@ -16,6 +19,7 @@ from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
 from sentry.plugins import register
+from sentry.plugins.base.structs import Notification
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils.cache import cache
 from sentry.utils.email import MessageBuilder, group_id_to_email
@@ -167,9 +171,29 @@ class MailPlugin(NotificationPlugin):
         )
 
     def notify_digest(self, project, digest):
+        counts = Counter()
+        for rule, groups in digest.iteritems():
+            counts.update(groups.keys())
+
+        # If there is only one group in this digest (regardless of how many
+        # rules it appears in), we should just render this using the single
+        # notification template. If there is more than one record for a group,
+        # just choose the most recent one.
+        if len(counts) == 1:
+            group = counts.keys()[0]
+            record = max(
+                itertools.chain.from_iterable(
+                    groups.get(group, []) for groups in digest.itervalues(),
+                ),
+                key=lambda record: record.timestamp,
+            )
+            notification = Notification(record.value.event, rules=record.value.rules)
+            return self.notify(notification)
+
         context = {
             'project': project,
             'digest': digest,
+            'counts': counts,
         }
 
         self._send_mail(
diff --git a/src/sentry/templates/sentry/emails/digests/subject.txt b/src/sentry/templates/sentry/emails/digests/subject.txt
index 245907bfe2..3e3ed92191 100644
--- a/src/sentry/templates/sentry/emails/digests/subject.txt
+++ b/src/sentry/templates/sentry/emails/digests/subject.txt
@@ -1 +1 @@
-Notifications for {{ project.name }}
+[{{ project.name }}] {{ counts|length }} notification{{ counts|pluralize }}
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index e920f1dd19..7fb73ec14d 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -226,15 +226,33 @@ class MailPluginTest(TestCase):
         msg = mail.outbox[0]
         assert msg.subject == u'[Sentry] [foo Bar] ERROR: רונית מגן'
 
+    @mock.patch.object(MailPlugin, 'notify', side_effect=MailPlugin.notify, autospec=True)
     @mock.patch.object(MessageBuilder, 'send', autospec=True)
-    def test_notify_digest(self, send):
+    def test_notify_digest(self, send, notify):
         project = self.event.project
         rule = project.rule_set.all()[0]
         digest = build_digest(
             project,
             (
+                event_to_record(self.create_event(group=self.create_group()), (rule,)),
                 event_to_record(self.event, (rule,)),
             ),
         )
         self.plugin.notify_digest(project, digest)
         assert send.call_count is 1
+        assert notify.call_count is 0
+
+    @mock.patch.object(MailPlugin, 'notify', side_effect=MailPlugin.notify, autospec=True)
+    @mock.patch.object(MessageBuilder, 'send', autospec=True)
+    def test_notify_digest_single_record(self, send, notify):
+        project = self.event.project
+        rule = project.rule_set.all()[0]
+        digest = build_digest(
+            project,
+            (
+                event_to_record(self.event, (rule,)),
+            ),
+        )
+        self.plugin.notify_digest(project, digest)
+        assert send.call_count is 1
+        assert notify.call_count is 1
