commit 4905ae347f4c49c0ee731b66c564a731be080c93
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 24 11:03:10 2015 -0800

    Add various audit log activity for SSO

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 9450a92991..ee1ee30267 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -11,7 +11,8 @@ from django.http import HttpResponseRedirect
 from hashlib import md5
 
 from sentry.models import (
-    AuthIdentity, AuthProvider, Organization, OrganizationMember, User
+    AuditLogEntry, AuditLogEntryEvent, AuthIdentity, AuthProvider, Organization,
+    OrganizationMember, User
 )
 from sentry.utils.auth import get_login_redirect
 
@@ -140,37 +141,47 @@ class AuthHelper(object):
 
         return response
 
+    @transaction.atomic
     def _finish_login_pipeline(self, identity):
         auth_provider = self.auth_provider
 
-        with transaction.atomic():
-            try:
-                auth_identity = AuthIdentity.objects.get(
-                    auth_provider=auth_provider,
-                    ident=identity['id'],
-                )
-            except AuthIdentity.DoesNotExist:
-                user = User.objects.create(
-                    email=identity['email'],
-                    first_name=identity.get('name'),
-                    is_managed=True,
-                )
-
-                AuthIdentity.objects.create(
-                    auth_provider=auth_provider,
-                    user=user,
-                    ident=identity['id'],
-                )
-
-                OrganizationMember.objects.create(
-                    has_global_access=True,
-                    organization=self.organization,
-                    type=auth_provider.default_role,
-                    user=user,
-                )
-            else:
-                if auth_identity.data != identity.get('data', {}):
-                    auth_identity.update(data=identity['data'])
+        try:
+            auth_identity = AuthIdentity.objects.get(
+                auth_provider=auth_provider,
+                ident=identity['id'],
+            )
+        except AuthIdentity.DoesNotExist:
+            user = User.objects.create(
+                email=identity['email'],
+                first_name=identity.get('name'),
+                is_managed=True,
+            )
+
+            AuthIdentity.objects.create(
+                auth_provider=auth_provider,
+                user=user,
+                ident=identity['id'],
+            )
+
+            om = OrganizationMember.objects.create(
+                has_global_access=True,
+                organization=self.organization,
+                type=auth_provider.default_role,
+                user=user,
+            )
+
+            AuditLogEntry.objects.create(
+                organization=self.organization,
+                actor=user,
+                ip_address=self.request.META['REMOTE_ADDR'],
+                target_object=om.id,
+                target_user=om.user,
+                event=AuditLogEntryEvent.MEMBER_ADD,
+                data=om.get_audit_log_data(),
+            )
+        else:
+            if auth_identity.data != identity.get('data', {}):
+                auth_identity.update(data=identity['data'])
 
         user = auth_identity.user
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
@@ -179,24 +190,35 @@ class AuthHelper(object):
 
         return HttpResponseRedirect(get_login_redirect(self.request))
 
+    @transaction.atomic
     def _finish_setup_pipeline(self, identity):
-        state = self.request.session['auth']['state']
+        request = self.request
+        state = request.session['auth']['state']
         config = self.provider.build_config(state)
-        with transaction.atomic():
-            self.auth_provider = AuthProvider.objects.create(
-                organization=self.organization,
-                provider=self.provider.key,
-                config=config,
-            )
 
-            AuthIdentity.objects.create_or_update(
-                user=self.request.user,
-                ident=identity['id'],
-                auth_provider=self.auth_provider,
-                defaults={
-                    'data': identity.get('data', {}),
-                },
-            )
+        self.auth_provider = AuthProvider.objects.create(
+            organization=self.organization,
+            provider=self.provider.key,
+            config=config,
+        )
+
+        AuthIdentity.objects.create_or_update(
+            user=request.user,
+            ident=identity['id'],
+            auth_provider=self.auth_provider,
+            defaults={
+                'data': identity.get('data', {}),
+            },
+        )
+
+        AuditLogEntry.objects.create(
+            organization=self.organization,
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=self.auth_provider.id,
+            event=AuditLogEntryEvent.SSO_ENABLE,
+            data=self.auth_provider.get_audit_log_data(),
+        )
 
         next_uri = reverse('sentry-organization-auth-settings', args=[
             self.organization.slug,
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index a66ae22f96..2ed0c9eb7f 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -44,6 +44,10 @@ class AuditLogEntryEvent(object):
     PROJECTKEY_ENABLE = 53
     PROJECTKEY_DISABLE = 53
 
+    SSO_ENABLE = 60
+    SSO_DISABLE = 61
+    SSO_EDIT = 62
+
 
 class AuditLogEntry(Model):
     organization = FlexibleForeignKey('sentry.Organization')
@@ -79,6 +83,10 @@ class AuditLogEntry(Model):
         (AuditLogEntryEvent.PROJECTKEY_REMOVE, 'projectkey.remove'),
         (AuditLogEntryEvent.PROJECTKEY_ENABLE, 'projectkey.enable'),
         (AuditLogEntryEvent.PROJECTKEY_DISABLE, 'projectkey.disable'),
+
+        (AuditLogEntryEvent.SSO_ENABLE, 'sso.enable'),
+        (AuditLogEntryEvent.SSO_DISABLE, 'sso.disable'),
+        (AuditLogEntryEvent.SSO_EDIT, 'sso.edit'),
     ))
     ip_address = models.GenericIPAddressField(null=True, unpack_ipv4=True)
     data = GzippedDictField()
@@ -94,6 +102,8 @@ class AuditLogEntry(Model):
         if self.event == AuditLogEntryEvent.MEMBER_INVITE:
             return 'invited member %s' % (self.data['email'],)
         elif self.event == AuditLogEntryEvent.MEMBER_ADD:
+            if self.target_user == self.actor:
+                return 'joined the organization'
             return 'added member %s' % (self.target_user.get_display_name(),)
         elif self.event == AuditLogEntryEvent.MEMBER_ACCEPT:
             return 'accepted the membership invite'
@@ -132,4 +142,11 @@ class AuditLogEntry(Model):
         elif self.event == AuditLogEntryEvent.PROJECTKEY_DISABLE:
             return 'disabled project key %s' % (self.data['public_key'],)
 
+        elif self.event == AuditLogEntryEvent.SSO_ENABLE:
+            return 'enabled sso (%s)' % (self.data['provider'],)
+        elif self.event == AuditLogEntryEvent.SSO_DISABLE:
+            return 'enabled sso (%s)' % (self.data['provider'],)
+        elif self.event == AuditLogEntryEvent.SSO_EDIT:
+            return 'edited sso settings'
+
         return ''
diff --git a/src/sentry/models/authprovider.py b/src/sentry/models/authprovider.py
index 1ef2753028..2cd24089f4 100644
--- a/src/sentry/models/authprovider.py
+++ b/src/sentry/models/authprovider.py
@@ -35,3 +35,10 @@ class AuthProvider(Model):
         from sentry.auth import manager
 
         return manager.get(self.provider, **self.config)
+
+    def get_audit_log_data(self):
+        return {
+            'provider': self.provider,
+            'config': self.config,
+            'default_Role': self.default_role,
+        }
diff --git a/src/sentry/web/forms/add_organization_member.py b/src/sentry/web/forms/add_organization_member.py
index 60e0ed621e..77e3006c22 100644
--- a/src/sentry/web/forms/add_organization_member.py
+++ b/src/sentry/web/forms/add_organization_member.py
@@ -22,16 +22,14 @@ class AddOrganizationMemberForm(forms.ModelForm):
         om.organization = organization
         om.type = OrganizationMemberType.MEMBER
 
-        sid = transaction.savepoint(using='default')
-        try:
-            om.save()
-        except IntegrityError:
-            transaction.savepoint_rollback(sid, using='default')
-            return OrganizationMember.objects.get(
-                user=om.user,
-                organization=organization,
-            ), False
-        transaction.savepoint_commit(sid, using='default')
+        with transaction.atomic():
+            try:
+                om.save()
+            except IntegrityError:
+                return OrganizationMember.objects.get(
+                    user=om.user,
+                    organization=organization,
+                ), False
 
         AuditLogEntry.objects.create(
             organization=organization,
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index 3917cd4f69..ae78b9fad4 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -2,12 +2,15 @@ from __future__ import absolute_import
 
 from django.contrib import messages
 from django.core.urlresolvers import reverse
+from django.db import transaction
 from django.http import HttpResponse, HttpResponseRedirect
 
 from sentry import features
 from sentry.auth import manager
 from sentry.auth.helper import AuthHelper
-from sentry.models import AuthProvider, OrganizationMemberType
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, AuthProvider, OrganizationMemberType
+)
 from sentry.utils.http import absolute_uri
 from sentry.web.frontend.base import OrganizationView
 
@@ -24,6 +27,15 @@ class OrganizationAuthSettingsView(OrganizationView):
         if request.method == 'POST':
             op = request.POST.get('op')
             if op == 'disable':
+                AuditLogEntry.objects.create(
+                    organization=organization,
+                    actor=request.user,
+                    ip_address=request.META['REMOTE_ADDR'],
+                    target_object=auth_provider.id,
+                    event=AuditLogEntryEvent.SSO_DISABLE,
+                    data=auth_provider.get_audit_log_data(),
+                )
+
                 auth_provider.delete()
 
                 next_uri = reverse('sentry-organization-auth-settings',
@@ -54,6 +66,7 @@ class OrganizationAuthSettingsView(OrganizationView):
         helper.init_pipeline()
         return helper.next_step()
 
+    @transaction.atomic
     def handle(self, request, organization):
         if not features.has('organizations:sso', organization, actor=request.user):
             messages.error(request, ERR_NO_SSO)
