commit 54879f011249fe4ff9c9e7df3db66528ed27e9a0
Author: Matej Minar <matej.minar@sentry.io>
Date:   Mon May 18 10:25:41 2020 +0200

    feat(ui): Sort health rows inside release card (#18857)
    
    Sort health rows inside release card alphabetically by project name, but put the ones with the project selected in the global header to top.

diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index e8cc25e85c..a4760a957a 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -7,12 +7,13 @@ import {forceCheck} from 'react-lazyload';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 import AsyncView from 'app/views/asyncView';
-import {Organization, Release} from 'app/types';
+import {Organization, Release, GlobalSelection} from 'app/types';
 import routeTitleGen from 'app/utils/routeTitle';
 import SearchBar from 'app/components/searchBar';
 import Pagination from 'app/components/pagination';
 import PageHeading from 'app/components/pageHeading';
 import withOrganization from 'app/utils/withOrganization';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
 import IntroBanner from 'app/views/releasesV2/list/introBanner';
@@ -34,6 +35,7 @@ type RouteParams = {
 
 type Props = RouteComponentProps<RouteParams, {}> & {
   organization: Organization;
+  selection: GlobalSelection;
 };
 
 type State = {releases: Release[]} & AsyncView['state'];
@@ -173,7 +175,7 @@ class ReleasesList extends AsyncView<Props, State> {
   }
 
   renderInnerBody() {
-    const {location, organization} = this.props;
+    const {location, selection, organization} = this.props;
     const {releases, reloading} = this.state;
 
     if (this.shouldShowLoadingIndicator()) {
@@ -189,6 +191,7 @@ class ReleasesList extends AsyncView<Props, State> {
         release={release}
         orgSlug={organization.slug}
         location={location}
+        selection={selection}
         reloading={reloading}
         key={`${release.version}-${release.projects[0].slug}`}
       />
@@ -258,5 +261,5 @@ const SortAndFilterWrapper = styled('div')`
   }
 `;
 
-export default withOrganization(ReleasesList);
+export default withOrganization(withGlobalSelection(ReleasesList));
 export {ReleasesList};
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
index 0c24a00f15..7e8df3ec0f 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
@@ -7,7 +7,7 @@ import Count from 'app/components/count';
 import Version from 'app/components/version';
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import ReleaseStats from 'app/components/releaseStats';
-import {Release} from 'app/types';
+import {Release, GlobalSelection} from 'app/types';
 import TimeSince from 'app/components/timeSince';
 import {t, tn} from 'app/locale';
 import {AvatarListWrapper} from 'app/components/avatar/avatarList';
@@ -26,10 +26,11 @@ type Props = {
   release: Release;
   orgSlug: string;
   location: Location;
+  selection: GlobalSelection;
   reloading: boolean;
 };
 
-const ReleaseCard = ({release, orgSlug, location, reloading}: Props) => {
+const ReleaseCard = ({release, orgSlug, location, selection, reloading}: Props) => {
   const {version, commitCount, lastDeploy, authors, dateCreated} = release;
 
   return (
@@ -107,7 +108,12 @@ const ReleaseCard = ({release, orgSlug, location, reloading}: Props) => {
         </StyledPanelItem>
       </PanelBody>
 
-      <ReleaseHealth release={release} orgSlug={orgSlug} location={location} />
+      <ReleaseHealth
+        release={release}
+        orgSlug={orgSlug}
+        location={location}
+        selection={selection}
+      />
     </StyledPanel>
   );
 };
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
index 4ea1734778..b72b619823 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
@@ -1,8 +1,10 @@
 import React from 'react';
 import styled from '@emotion/styled';
 import {Location} from 'history';
+import partition from 'lodash/partition';
+import flatten from 'lodash/flatten';
 
-import {Release} from 'app/types';
+import {Release, GlobalSelection} from 'app/types';
 import GlobalSelectionLink from 'app/components/globalSelectionLink';
 import {PanelHeader, PanelBody, PanelItem} from 'app/components/panels';
 import {t, tn} from 'app/locale';
@@ -34,12 +36,22 @@ type Props = {
   release: Release;
   orgSlug: string;
   location: Location;
+  selection: GlobalSelection;
 };
 
-const ReleaseHealth = ({release, orgSlug, location}: Props) => {
+const ReleaseHealth = ({release, orgSlug, location, selection}: Props) => {
   const activeStatsPeriod = (location.query.healthStatsPeriod || '24h') as StatsPeriod;
   const activeStatsSubject = (location.query.healthStat || 'sessions') as StatsSubject;
 
+  // sort health rows inside release card alphabetically by project name,
+  // but put the ones with project selected in global header to top
+  const sortedProjects = flatten(
+    partition(
+      release.projects.sort((a, b) => a.slug.localeCompare(b.slug)),
+      p => selection.projects.includes(p.id)
+    )
+  );
+
   return (
     <React.Fragment>
       <StyledPanelHeader>
@@ -68,142 +80,132 @@ const ReleaseHealth = ({release, orgSlug, location}: Props) => {
 
       <PanelBody>
         <ClippedBox clipHeight={200}>
-          {release.projects
-            .sort((a, b) => a.slug.localeCompare(b.slug))
-            .map(project => {
-              const {id, slug, healthData, newGroups} = project;
-              const {
-                hasHealthData,
-                adoption,
-                stats,
-                crashFreeUsers,
-                crashFreeSessions,
-                sessionsCrashed,
-                totalUsers,
-                totalUsers24h,
-                totalSessions,
-                totalSessions24h,
-              } = healthData;
+          {sortedProjects.map(project => {
+            const {id, slug, healthData, newGroups} = project;
+            const {
+              hasHealthData,
+              adoption,
+              stats,
+              crashFreeUsers,
+              crashFreeSessions,
+              sessionsCrashed,
+              totalUsers,
+              totalUsers24h,
+              totalSessions,
+              totalSessions24h,
+            } = healthData;
 
-              return (
-                <StyledPanelItem key={`${release.version}-${slug}-health`}>
-                  <Layout>
-                    <ProjectColumn>
-                      <GlobalSelectionLink
-                        to={{
-                          pathname: `/organizations/${orgSlug}/releases/${encodeURIComponent(
-                            release.version
-                          )}/`,
-                          query: {project: id},
-                        }}
-                      >
-                        <ProjectBadge project={project} avatarSize={16} key={slug} />
-                      </GlobalSelectionLink>
-                    </ProjectColumn>
+            return (
+              <StyledPanelItem key={`${release.version}-${slug}-health`}>
+                <Layout>
+                  <ProjectColumn>
+                    <GlobalSelectionLink
+                      to={{
+                        pathname: `/organizations/${orgSlug}/releases/${encodeURIComponent(
+                          release.version
+                        )}/`,
+                        query: {project: id},
+                      }}
+                    >
+                      <ProjectBadge project={project} avatarSize={16} key={slug} />
+                    </GlobalSelectionLink>
+                  </ProjectColumn>
 
-                    <AdoptionColumn>
-                      {defined(adoption) ? (
-                        <AdoptionWrapper>
-                          <Tooltip
-                            title={
-                              <AdoptionTooltip
-                                totalUsers={totalUsers}
-                                totalSessions={totalSessions}
-                                totalUsers24h={totalUsers24h}
-                                totalSessions24h={totalSessions24h}
-                              />
-                            }
-                          >
-                            <StyledScoreBar
-                              score={convertAdoptionToProgress(adoption)}
-                              size={20}
-                              thickness={5}
-                              radius={0}
-                              palette={Array(10).fill(theme.green)}
+                  <AdoptionColumn>
+                    {defined(adoption) ? (
+                      <AdoptionWrapper>
+                        <Tooltip
+                          title={
+                            <AdoptionTooltip
+                              totalUsers={totalUsers}
+                              totalSessions={totalSessions}
+                              totalUsers24h={totalUsers24h}
+                              totalSessions24h={totalSessions24h}
                             />
-                          </Tooltip>
-                          <TextOverflow>
-                            <Count value={totalUsers24h ?? 0} />{' '}
-                            {tn('user', 'users', totalUsers24h)}
-                          </TextOverflow>
-                        </AdoptionWrapper>
-                      ) : (
-                        <NotAvailable />
-                      )}
-                    </AdoptionColumn>
-
-                    <CrashFreeUsersColumn>
-                      {defined(crashFreeUsers) ? (
-                        <React.Fragment>
-                          <StyledProgressRing
-                            progressColor={getCrashFreePercentColor}
-                            value={crashFreeUsers}
+                          }
+                        >
+                          <StyledScoreBar
+                            score={convertAdoptionToProgress(adoption)}
+                            size={20}
+                            thickness={5}
+                            radius={0}
+                            palette={Array(10).fill(theme.green)}
                           />
-                          <ProgressRingCaption>
-                            {displayCrashFreePercent(crashFreeUsers)}
-                          </ProgressRingCaption>
-                        </React.Fragment>
-                      ) : (
-                        <NotAvailable />
-                      )}
-                    </CrashFreeUsersColumn>
+                        </Tooltip>
+                        <TextOverflow>
+                          <Count value={totalUsers24h ?? 0} />{' '}
+                          {tn('user', 'users', totalUsers24h)}
+                        </TextOverflow>
+                      </AdoptionWrapper>
+                    ) : (
+                      <NotAvailable />
+                    )}
+                  </AdoptionColumn>
 
-                    <CrashFreeSessionsColumn>
-                      {defined(crashFreeSessions) ? (
-                        <React.Fragment>
-                          <StyledProgressRing
-                            progressColor={getCrashFreePercentColor}
-                            value={crashFreeSessions}
-                          />
-                          <ProgressRingCaption>
-                            {displayCrashFreePercent(crashFreeSessions)}
-                          </ProgressRingCaption>
-                        </React.Fragment>
-                      ) : (
-                        <NotAvailable />
-                      )}
-                    </CrashFreeSessionsColumn>
+                  <CrashFreeUsersColumn>
+                    {defined(crashFreeUsers) ? (
+                      <React.Fragment>
+                        <StyledProgressRing
+                          progressColor={getCrashFreePercentColor}
+                          value={crashFreeUsers}
+                        />
+                        <ProgressRingCaption>
+                          {displayCrashFreePercent(crashFreeUsers)}
+                        </ProgressRingCaption>
+                      </React.Fragment>
+                    ) : (
+                      <NotAvailable />
+                    )}
+                  </CrashFreeUsersColumn>
 
-                    <DailyUsersColumn>
-                      {hasHealthData ? (
-                        <ChartWrapper>
-                          <HealthStatsChart
-                            data={stats}
-                            height={20}
-                            period={activeStatsPeriod}
-                            subject={activeStatsSubject}
-                          />
-                        </ChartWrapper>
-                      ) : (
-                        <NotAvailable />
-                      )}
-                    </DailyUsersColumn>
+                  <CrashFreeSessionsColumn>
+                    {defined(crashFreeSessions) ? (
+                      <React.Fragment>
+                        <StyledProgressRing
+                          progressColor={getCrashFreePercentColor}
+                          value={crashFreeSessions}
+                        />
+                        <ProgressRingCaption>
+                          {displayCrashFreePercent(crashFreeSessions)}
+                        </ProgressRingCaption>
+                      </React.Fragment>
+                    ) : (
+                      <NotAvailable />
+                    )}
+                  </CrashFreeSessionsColumn>
 
-                    <CrashesColumn>
-                      {hasHealthData ? (
-                        <Count value={sessionsCrashed} />
-                      ) : (
-                        <NotAvailable />
-                      )}
-                    </CrashesColumn>
+                  <DailyUsersColumn>
+                    {hasHealthData ? (
+                      <ChartWrapper>
+                        <HealthStatsChart
+                          data={stats}
+                          height={20}
+                          period={activeStatsPeriod}
+                          subject={activeStatsSubject}
+                        />
+                      </ChartWrapper>
+                    ) : (
+                      <NotAvailable />
+                    )}
+                  </DailyUsersColumn>
 
-                    <NewIssuesColumn>
-                      <Tooltip title={t('Open in Issues')}>
-                        <Link
-                          to={getReleaseNewIssuesUrl(
-                            orgSlug,
-                            project.id,
-                            release.version
-                          )}
-                        >
-                          <Count value={newGroups || 0} />
-                        </Link>
-                      </Tooltip>
-                    </NewIssuesColumn>
-                  </Layout>
-                </StyledPanelItem>
-              );
-            })}
+                  <CrashesColumn>
+                    {hasHealthData ? <Count value={sessionsCrashed} /> : <NotAvailable />}
+                  </CrashesColumn>
+
+                  <NewIssuesColumn>
+                    <Tooltip title={t('Open in Issues')}>
+                      <Link
+                        to={getReleaseNewIssuesUrl(orgSlug, project.id, release.version)}
+                      >
+                        <Count value={newGroups || 0} />
+                      </Link>
+                    </Tooltip>
+                  </NewIssuesColumn>
+                </Layout>
+              </StyledPanelItem>
+            );
+          })}
         </ClippedBox>
       </PanelBody>
     </React.Fragment>
