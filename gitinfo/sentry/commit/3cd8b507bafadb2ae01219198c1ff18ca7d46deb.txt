commit 3cd8b507bafadb2ae01219198c1ff18ca7d46deb
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu May 23 10:13:20 2019 -0700

    ref(event-search): Fixed unhandled parse error. (#13320)
    
    * Fixed unhandled parse error.:
    
    * shortended error message

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 22040e6755..d9651cc8c3 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -478,7 +478,15 @@ class SearchVisitor(NodeVisitor):
 
 
 def parse_search_query(query):
-    tree = event_search_grammar.parse(query)
+    try:
+        tree = event_search_grammar.parse(query)
+    except IncompleteParseError as e:
+        raise InvalidSearchQuery(
+            '%s %s' % (
+                u'Parse error: %r (column %d).' % (e.expr.name, e.column()),
+                'This is commonly caused by unmatched-parentheses.',
+            )
+        )
     return SearchVisitor().visit(tree)
 
 
@@ -601,11 +609,6 @@ def get_snuba_query_args(query=None, params=None):
             raise InvalidSearchQuery(
                 u'Parse error: %r (column %d)' % (e.expr.name, e.column())
             )
-        except IncompleteParseError as e:
-            raise InvalidSearchQuery(
-                'Parse error: Search did not parse completely. This is commonly caused by unmatched-parenthesis. '
-                + six.text_type(e)
-            )
 
     # Keys included as url params take precedent if same key is included in search
     if params is not None:
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index c8ba12bcf3..1e8d1369c0 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -7,7 +7,6 @@ from datetime import timedelta
 
 from django.utils import timezone
 from freezegun import freeze_time
-from parsimonious.exceptions import IncompleteParseError
 
 from sentry.api.event_search import (
     convert_endpoint_params, event_search_grammar, get_snuba_query_args,
@@ -400,7 +399,7 @@ class ParseSearchQueryTest(TestCase):
         ]
 
     def test_newline_outside_quote(self):
-        with self.assertRaises(IncompleteParseError):
+        with self.assertRaises(InvalidSearchQuery):
             parse_search_query('release:a\nrelease')
 
     def test_tab_within_quote(self):
@@ -919,32 +918,33 @@ class ParseBooleanSearchQueryTest(TestCase):
         )]
 
     def test_malformed_groups(self):
-        error_text = "Rule 'search' matched in its entirety, but it didn't consume all the text. The non-matching portion of the text begins with"
-        with pytest.raises(IncompleteParseError) as error:
+        with pytest.raises(InvalidSearchQuery) as error:
             parse_search_query(
                 '(user.email:foo@example.com OR user.email:bar@example.com'
             )
-        assert six.text_type(error.value) == '%s %s' % (
-            error_text, "'(user.email:foo@exam' (line 1, column 1).")
-        with pytest.raises(IncompleteParseError) as error:
+        assert six.text_type(
+            error.value) == "Parse error: 'search' (column 1). This is commonly caused by unmatched-parentheses."
+        with pytest.raises(InvalidSearchQuery) as error:
             parse_search_query(
                 '((user.email:foo@example.com OR user.email:bar@example.com AND  user.email:bar@example.com)'
             )
-        assert six.text_type(error.value) == '%s %s' % (
-            error_text, "'((user.email:foo@exa' (line 1, column 1).")
-        with pytest.raises(IncompleteParseError) as error:
+        assert six.text_type(
+            error.value) == "Parse error: 'search' (column 1). This is commonly caused by unmatched-parentheses."
+        with pytest.raises(InvalidSearchQuery) as error:
             parse_search_query(
                 'user.email:foo@example.com OR user.email:bar@example.com)'
             )
-        assert six.text_type(error.value) == '%s %s' % (error_text, "')' (line 1, column 57).")
-        with pytest.raises(IncompleteParseError) as error:
+        assert six.text_type(
+            error.value) == "Parse error: 'search' (column 57). This is commonly caused by unmatched-parentheses."
+        with pytest.raises(InvalidSearchQuery) as error:
             parse_search_query(
                 '(user.email:foo@example.com OR user.email:bar@example.com AND  user.email:bar@example.com))'
             )
-        assert six.text_type(error.value) == '%s %s' % (error_text, "')' (line 1, column 91).")
+        assert six.text_type(
+            error.value) == "Parse error: 'search' (column 91). This is commonly caused by unmatched-parentheses."
 
     def test_grouping_without_boolean_terms(self):
-        with pytest.raises(IncompleteParseError) as error:
+        with pytest.raises(InvalidSearchQuery) as error:
             parse_search_query(
                 'undefined is not an object (evaluating \'function.name\')'
             ) == [SearchFilter(
@@ -954,7 +954,7 @@ class ParseBooleanSearchQueryTest(TestCase):
                     raw_value='undefined is not an object (evaluating "function.name")'),
             )]
         assert six.text_type(
-            error.value) == "Rule 'search' matched in its entirety, but it didn't consume all the text. The non-matching portion of the text begins with '(evaluating 'functio' (line 1, column 28)."
+            error.value) == "Parse error: 'search' (column 28). This is commonly caused by unmatched-parentheses."
 
 
 class GetSnubaQueryArgsTest(TestCase):
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 9dbd5ef6a9..a3dcb3f473 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -155,7 +155,7 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         response = self.client.get(url, {'query': 'hi \n there'}, format='json')
 
         assert response.status_code == 400, response.content
-        assert response.data['detail'] == "Parse error: 'search' (column 4)"
+        assert response.data['detail'] == "Parse error: 'search' (column 4). This is commonly caused by unmatched-parentheses."
 
     def test_project_filtering(self):
         user = self.create_user(is_staff=False, is_superuser=False)
