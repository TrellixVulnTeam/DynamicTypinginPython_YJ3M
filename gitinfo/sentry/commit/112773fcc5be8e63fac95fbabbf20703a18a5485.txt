commit 112773fcc5be8e63fac95fbabbf20703a18a5485
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Feb 1 13:01:19 2015 -0800

    Add audit log entries for project keys

diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index 840070b572..a66ae22f96 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -38,6 +38,12 @@ class AuditLogEntryEvent(object):
 
     TAGKEY_REMOVE = 40
 
+    PROJECTKEY_ADD = 50
+    PROJECTKEY_EDIT = 51
+    PROJECTKEY_REMOVE = 52
+    PROJECTKEY_ENABLE = 53
+    PROJECTKEY_DISABLE = 53
+
 
 class AuditLogEntry(Model):
     organization = FlexibleForeignKey('sentry.Organization')
@@ -67,6 +73,12 @@ class AuditLogEntry(Model):
         (AuditLogEntryEvent.ORG_EDIT, 'org.edit'),
 
         (AuditLogEntryEvent.TAGKEY_REMOVE, 'tagkey.remove'),
+
+        (AuditLogEntryEvent.PROJECTKEY_ADD, 'projectkey.create'),
+        (AuditLogEntryEvent.PROJECTKEY_EDIT, 'projectkey.edit'),
+        (AuditLogEntryEvent.PROJECTKEY_REMOVE, 'projectkey.remove'),
+        (AuditLogEntryEvent.PROJECTKEY_ENABLE, 'projectkey.enable'),
+        (AuditLogEntryEvent.PROJECTKEY_DISABLE, 'projectkey.disable'),
     ))
     ip_address = models.GenericIPAddressField(null=True, unpack_ipv4=True)
     data = GzippedDictField()
@@ -109,4 +121,15 @@ class AuditLogEntry(Model):
         elif self.event == AuditLogEntryEvent.TAGKEY_REMOVE:
             return 'removed tags matching %s = *' % (self.data['key'],)
 
+        elif self.event == AuditLogEntryEvent.PROJECTKEY_ADD:
+            return 'added project key %s' % (self.data['public_key'],)
+        elif self.event == AuditLogEntryEvent.PROJECTKEY_EDIT:
+            return 'edited project key %s' % (self.data['public_key'],)
+        elif self.event == AuditLogEntryEvent.PROJECTKEY_REMOVE:
+            return 'removed project key %s' % (self.data['public_key'],)
+        elif self.event == AuditLogEntryEvent.PROJECTKEY_ENABLE:
+            return 'enabled project key %s' % (self.data['public_key'],)
+        elif self.event == AuditLogEntryEvent.PROJECTKEY_DISABLE:
+            return 'disabled project key %s' % (self.data['public_key'],)
+
         return ''
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index cd9f636315..59dbe4011b 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -105,3 +105,13 @@ class ProjectKey(Model):
     @property
     def dsn_public(self):
         return self.get_dsn(public=True)
+
+    def get_audit_log_data(self):
+        return {
+            'label': self.label,
+            'user_id': self.user_id,
+            'public_key': self.public_key,
+            'secret_key': self.secret_key,
+            'roles': int(self.roles),
+            'status': self.status,
+        }
diff --git a/src/sentry/web/frontend/projects/keys.py b/src/sentry/web/frontend/projects/keys.py
index 7f7368e226..d0d1508dcc 100644
--- a/src/sentry/web/frontend/projects/keys.py
+++ b/src/sentry/web/frontend/projects/keys.py
@@ -16,7 +16,9 @@ from django.views.decorators.http import require_http_methods
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import MEMBER_ADMIN
-from sentry.models import ProjectKey, ProjectKeyStatus
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
+)
 from sentry.permissions import (
     can_remove_project_key, can_add_project_key, can_edit_project_key
 )
@@ -61,11 +63,20 @@ def new_project_key(request, organization, project):
     if not can_add_project_key(request.user, project):
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
-    ProjectKey.objects.create(
+    key = ProjectKey.objects.create(
         project=project,
         user_added=request.user,
     )
 
+    AuditLogEntry.objects.create(
+        organization=organization,
+        actor=request.user,
+        ip_address=request.META['REMOTE_ADDR'],
+        target_object=key.id,
+        event=AuditLogEntryEvent.PROJECTKEY_ADD,
+        data=key.get_audit_log_data(),
+    )
+
     return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
 
@@ -85,7 +96,17 @@ def edit_project_key(request, organization, project, key_id):
 
     form = EditProjectKeyForm(request.POST or None, instance=key)
     if form.is_valid():
-        form.save()
+        key = form.save()
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=key.id,
+            event=AuditLogEntryEvent.PROJECTKEY_EDIT,
+            data=key.get_audit_log_data(),
+        )
+
         messages.add_message(
             request, messages.SUCCESS,
             _('Changes to the API key (%s) were saved.') % (key.public_key,))
@@ -115,7 +136,19 @@ def remove_project_key(request, organization, project, key_id):
     if not can_remove_project_key(request.user, key):
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
+    audit_data = key.get_audit_log_data()
+
     key.delete()
+
+    AuditLogEntry.objects.create(
+        organization=organization,
+        actor=request.user,
+        ip_address=request.META['REMOTE_ADDR'],
+        target_object=key.id,
+        event=AuditLogEntryEvent.PROJECTKEY_REMOVE,
+        data=audit_data,
+    )
+
     messages.add_message(
         request, messages.SUCCESS,
         _('The API key (%s) was revoked.') % (key.public_key,))
@@ -137,6 +170,16 @@ def disable_project_key(request, organization, project, key_id):
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
     key.update(status=ProjectKeyStatus.INACTIVE)
+
+    AuditLogEntry.objects.create(
+        organization=organization,
+        actor=request.user,
+        ip_address=request.META['REMOTE_ADDR'],
+        target_object=key.id,
+        event=AuditLogEntryEvent.PROJECTKEY_DISABLE,
+        data=key.get_audit_log_data(),
+    )
+
     messages.add_message(
         request, messages.SUCCESS,
         _('The API key (%s) was disabled.') % (key.public_key,))
@@ -158,6 +201,16 @@ def enable_project_key(request, organization, project, key_id):
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
     key.update(status=ProjectKeyStatus.ACTIVE)
+
+    AuditLogEntry.objects.create(
+        organization=organization,
+        actor=request.user,
+        ip_address=request.META['REMOTE_ADDR'],
+        target_object=key.id,
+        event=AuditLogEntryEvent.PROJECTKEY_ENABLE,
+        data=key.get_audit_log_data(),
+    )
+
     messages.add_message(
         request, messages.SUCCESS,
         _('The API key (%s) was enabled.') % (key.public_key,))
