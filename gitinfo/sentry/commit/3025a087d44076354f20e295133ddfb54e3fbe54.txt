commit 3025a087d44076354f20e295133ddfb54e3fbe54
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jul 25 11:52:48 2018 -0700

    feat(cmdpal): Add "open sudo/superuser" modal from cmd pal (#8902)
    
    ![](https://cl.ly/3v2j2H3U0Y1X/download/Screen%20Recording%202018-07-02%20at%2002.14%20PM.gif)

diff --git a/src/sentry/static/sentry/app/components/feature.jsx b/src/sentry/static/sentry/app/components/feature.jsx
index 971d41f777..f544f786b3 100644
--- a/src/sentry/static/sentry/app/components/feature.jsx
+++ b/src/sentry/static/sentry/app/components/feature.jsx
@@ -16,7 +16,12 @@ class Feature extends React.Component {
     /**
      * Configuration features from ConfigStore
      */
-    config: PropTypes.arrayOf(PropTypes.string),
+    configFeatures: PropTypes.arrayOf(PropTypes.string),
+
+    /**
+     * User Configuration from ConfigStore
+     */
+    configUser: PropTypes.object,
 
     /**
      * List of required feature tags. Note we do not enforce uniqueness of tags anywhere.
@@ -32,6 +37,11 @@ class Feature extends React.Component {
      */
     access: PropTypes.arrayOf(PropTypes.string),
 
+    /**
+     * Requires superuser
+     */
+    isSuperuser: PropTypes.bool,
+
     /**
      * If children is a function then will be treated as a render prop and passed this object:
      * {
@@ -46,9 +56,9 @@ class Feature extends React.Component {
   };
 
   getAllFeatures = () => {
-    let {organization, project, config} = this.props;
+    let {organization, project, configFeatures} = this.props;
     return {
-      config: config || [],
+      configFeatures: configFeatures || [],
       organization: (organization && organization.features) || [],
       project: (project && project.features) || [],
     };
@@ -59,7 +69,7 @@ class Feature extends React.Component {
     let shouldMatchOnlyOrg = feature.match(/^organization:(\w+)/);
 
     // Array of feature strings
-    let {config, organization, project} = features;
+    let {configFeatures, organization, project} = features;
 
     if (shouldMatchOnlyProject) {
       return project.includes(shouldMatchOnlyProject[1]);
@@ -71,30 +81,32 @@ class Feature extends React.Component {
 
     // default, check all feature arrays
     return (
-      config.includes(feature) ||
+      configFeatures.includes(feature) ||
       organization.includes(feature) ||
       project.includes(feature)
     );
   };
 
   render() {
-    let {children, organization, feature, access} = this.props;
+    let {children, organization, feature, access, configUser, isSuperuser} = this.props;
     let {access: orgAccess} = organization || {access: []};
     let allFeatures = this.getAllFeatures();
     let hasFeature =
       !feature || feature.every(feat => this.hasFeature(feat, allFeatures));
     let hasAccess = !access || access.every(acc => orgAccess.includes(acc));
+    let hasSuperuser = !isSuperuser || configUser.isSuperuser;
 
     if (typeof children === 'function') {
       return children({
         hasFeature,
         hasAccess,
+        hasSuperuser,
       });
     }
 
     // if children is NOT a function,
     // then only render `children` iff `features` and `access` passes
-    if (hasFeature && hasAccess) {
+    if (hasFeature && hasAccess && hasSuperuser) {
       return children;
     }
 
@@ -127,9 +139,12 @@ const FeatureContainer = createReactClass({
     let features = this.state.config.features
       ? Array.from(this.state.config.features)
       : [];
+    let user = this.state.config.user || {};
+
     return (
       <Feature
-        config={features}
+        configFeatures={features}
+        configUser={user}
         organization={this.context.organization}
         project={this.context.project}
         {...this.props}
diff --git a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
index 9630ba610e..46e7caa206 100644
--- a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
@@ -21,7 +21,8 @@ class SudoModal extends React.Component {
     /**
      * expects a function that returns a Promise
      */
-    retryRequest: PropTypes.func.isRequired,
+    retryRequest: PropTypes.func,
+
     // User is a superuser without an active su session
     superuser: PropTypes.bool,
     router: PropTypes.object,
@@ -41,7 +42,11 @@ class SudoModal extends React.Component {
 
   handleSuccess = () => {
     let {closeModal, superuser, router, retryRequest} = this.props;
-    if (!retryRequest) return;
+
+    if (!retryRequest) {
+      closeModal();
+      return;
+    }
 
     if (superuser) {
       router.replace({...router.getCurrentLocation(), state: {forceUpdate: new Date()}});
@@ -143,6 +148,7 @@ class SudoModal extends React.Component {
                 hideFooter={!user.hasPasswordAuth}
               >
                 <InputField
+                  autoFocus
                   type="password"
                   inline={false}
                   label={t('Password')}
diff --git a/src/sentry/static/sentry/app/components/search/index.jsx b/src/sentry/static/sentry/app/components/search/index.jsx
index 4102642b72..91fc1f1f98 100644
--- a/src/sentry/static/sentry/app/components/search/index.jsx
+++ b/src/sentry/static/sentry/app/components/search/index.jsx
@@ -70,7 +70,15 @@ class Search extends React.Component {
 
     analytics(`${this.props.source}.select`, {query: state && state.inputValue});
 
-    let {to} = item;
+    let {to, action} = item;
+
+    // `action` refers to a callback function while
+    // `to` is a react-router route
+    if (action) {
+      action(item, state);
+      return;
+    }
+
     if (!to) return;
 
     let {params, router} = this.props;
diff --git a/src/sentry/static/sentry/app/components/search/searchResult.jsx b/src/sentry/static/sentry/app/components/search/searchResult.jsx
index 9418d69e46..81945baebe 100644
--- a/src/sentry/static/sentry/app/components/search/searchResult.jsx
+++ b/src/sentry/static/sentry/app/components/search/searchResult.jsx
@@ -19,6 +19,7 @@ class SearchResult extends React.Component {
       sourceType: PropTypes.oneOf([
         'organization',
         'project',
+        'command',
         'team',
         'member',
         'field',
@@ -32,9 +33,16 @@ class SearchResult extends React.Component {
      * - an application route (e.g. org dashboard)
      * - form field
      */
-      resultType: PropTypes.oneOf(['settings', 'route', 'field', 'issue', 'event']),
+      resultType: PropTypes.oneOf([
+        'settings',
+        'command',
+        'route',
+        'field',
+        'issue',
+        'event',
+      ]),
       title: PropTypes.string,
-      description: PropTypes.string,
+      description: PropTypes.node,
       model: PropTypes.oneOfType([
         SentryTypes.Organization,
         SentryTypes.Project,
diff --git a/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx b/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx
new file mode 100644
index 0000000000..529b985b0d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx
@@ -0,0 +1,113 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {createFuzzySearch} from 'app/utils/createFuzzySearch';
+import {openSudo} from 'app/actionCreators/modal';
+import Feature from 'app/components/feature';
+
+const ACTIONS = [
+  {
+    title: 'Open Sudo Modal',
+    description: 'Open Sudo Modal to re-identify yourself.',
+    action: () =>
+      openSudo({
+        sudo: true,
+      }),
+  },
+
+  {
+    title: 'Open Superuser Modal',
+    description: 'Open Superuser Modal to re-identify yourself.',
+    requiresSuperuser: true,
+    action: () =>
+      openSudo({
+        superuser: true,
+      }),
+  },
+];
+
+/**
+ * This source is a hardcoded list of action creators and/or routes maybe
+ */
+class CommandSource extends React.Component {
+  static propTypes = {
+    // search term
+    query: PropTypes.string,
+
+    // fuse.js options
+    searchOptions: PropTypes.object,
+
+    // Array of routes to search
+    searchMap: PropTypes.array,
+
+    isSuperuser: PropTypes.bool,
+
+    /**
+     * Render function that passes:
+     * `isLoading` - loading state
+     * `allResults` - All results returned from all queries: [searchIndex, model, type]
+     * `results` - Results array filtered by `this.props.query`: [searchIndex, model, type]
+     */
+    children: PropTypes.func.isRequired,
+  };
+
+  static defaultProps = {
+    searchMap: [],
+    searchOptions: {},
+  };
+
+  constructor(...args) {
+    super(...args);
+
+    this.state = {
+      fuzzy: null,
+    };
+  }
+
+  componentDidMount() {
+    this.createSearch(ACTIONS);
+  }
+
+  async createSearch(searchMap) {
+    this.setState({
+      fuzzy: await createFuzzySearch(searchMap || [], {
+        ...this.props.searchOptions,
+        keys: ['title', 'description'],
+      }),
+    });
+  }
+
+  render() {
+    let {searchMap, query, isSuperuser, children} = this.props;
+
+    let results =
+      (this.state.fuzzy &&
+        this.state.fuzzy
+          .search(query)
+          .filter(({item, ...rest}) => !item.requiresSuperuser || isSuperuser)
+          .map(({item, ...rest}) => ({
+            item: {
+              ...item,
+              sourceType: 'command',
+              resultType: 'command',
+            },
+            ...rest,
+          }))) ||
+      [];
+
+    return children({
+      isLoading: searchMap === null,
+      allResults: searchMap,
+      results,
+    });
+  }
+}
+
+const CommandSourceWithFeature = props => (
+  <Feature isSuperuser>
+    {({hasSuperuser}) => <CommandSource {...props} isSuperuser={hasSuperuser} />}
+  </Feature>
+);
+
+export default CommandSourceWithFeature;
+export {CommandSource};
diff --git a/src/sentry/static/sentry/app/components/search/sources/index.jsx b/src/sentry/static/sentry/app/components/search/sources/index.jsx
index a6659fdb12..14f4b514f9 100644
--- a/src/sentry/static/sentry/app/components/search/sources/index.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/index.jsx
@@ -4,6 +4,7 @@ import React from 'react';
 
 import {loadSearchMap} from 'app/actionCreators/formSearch';
 import ApiSource from 'app/components/search/sources/apiSource';
+import CommandSource from 'app/components/search/sources/commandSource';
 import FormSource from 'app/components/search/sources/formSource';
 import RouteSource from 'app/components/search/sources/routeSource';
 
@@ -53,7 +54,12 @@ class SearchSources extends React.Component {
           <FormSource {...this.props}>
             {formFieldArgs => (
               <RouteSource {...this.props}>
-                {routeArgs => this.renderResults(apiArgs, formFieldArgs, routeArgs)}
+                {routeArgs => (
+                  <CommandSource {...this.props}>
+                    {commandArgs =>
+                      this.renderResults(apiArgs, formFieldArgs, routeArgs, commandArgs)}
+                  </CommandSource>
+                )}
               </RouteSource>
             )}
           </FormSource>
diff --git a/tests/js/spec/components/feature.spec.jsx b/tests/js/spec/components/feature.spec.jsx
index fb71b71128..cba0ec1959 100644
--- a/tests/js/spec/components/feature.spec.jsx
+++ b/tests/js/spec/components/feature.spec.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 import {mount} from 'enzyme';
 
 import Feature from 'app/components/feature';
+import ConfigStore from 'app/stores/configStore';
 
 describe('Feature', function() {
   const organization = TestStubs.Organization({
@@ -33,6 +34,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
         hasAccess: true,
+        hasSuperuser: true,
       });
     });
 
@@ -45,6 +47,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
         hasAccess: true,
+        hasSuperuser: true,
       });
     });
 
@@ -62,6 +65,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
         hasAccess: true,
+        hasSuperuser: true,
       });
     });
 
@@ -76,6 +80,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
         hasAccess: false,
+        hasSuperuser: true,
       });
     });
 
@@ -90,6 +95,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
         hasAccess: true,
+        hasSuperuser: true,
       });
     });
 
@@ -104,6 +110,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
         hasAccess: false,
+        hasSuperuser: true,
       });
     });
 
@@ -121,6 +128,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
         hasAccess: true,
+        hasSuperuser: true,
       });
     });
 
@@ -138,6 +146,8 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
         hasAccess: true,
+
+        hasSuperuser: true,
       });
     });
 
@@ -157,6 +167,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
         hasAccess: false,
+        hasSuperuser: true,
       });
     });
 
@@ -175,6 +186,7 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
         hasAccess: true,
+        hasSuperuser: true,
       });
 
       mount(
@@ -187,8 +199,39 @@ describe('Feature', function() {
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
         hasAccess: true,
+        hasSuperuser: true,
       });
     });
+
+    it('is superuser', function() {
+      ConfigStore.config = {
+        user: {
+          isSuperuser: true,
+        },
+      };
+      mount(<Feature isSuperuser>{childrenMock}</Feature>, routerContext);
+
+      expect(childrenMock).toHaveBeenCalledWith(
+        expect.objectContaining({
+          hasSuperuser: true,
+        })
+      );
+    });
+
+    it('is not superuser', function() {
+      ConfigStore.config = {
+        user: {
+          isSuperuser: false,
+        },
+      };
+      mount(<Feature isSuperuser>{childrenMock}</Feature>, routerContext);
+
+      expect(childrenMock).toHaveBeenCalledWith(
+        expect.objectContaining({
+          hasSuperuser: false,
+        })
+      );
+    });
   });
 
   describe('as React node', function() {
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
index 7cd33b51b0..74da01e968 100644
--- a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
@@ -32,7 +32,24 @@ exports[`ProjectPluginRow renders 1`] = `
           "project:write",
         ]
       }
-      config={Array []}
+      configFeatures={Array []}
+      configUser={
+        Object {
+          "email": "foo@example.com",
+          "flags": Object {
+            "newsletter_consent_prompt": false,
+          },
+          "hasPasswordAuth": true,
+          "id": "1",
+          "isAuthenticated": true,
+          "name": "Foo Bar",
+          "options": Object {
+            "timezone": "UTC",
+          },
+          "permissions": Set {},
+          "username": "foo@example.com",
+        }
+      }
       organization={
         Object {
           "access": Array [
diff --git a/tests/js/spec/views/settings/project/__snapshots__/projectIntegrations.spec.jsx.snap b/tests/js/spec/views/settings/project/__snapshots__/projectIntegrations.spec.jsx.snap
index ff14fbdca8..30a9f548b5 100644
--- a/tests/js/spec/views/settings/project/__snapshots__/projectIntegrations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/project/__snapshots__/projectIntegrations.spec.jsx.snap
@@ -80,7 +80,24 @@ exports[`ProjectIntegrations Renders emptystate with access 1`] = `
                                 "org:integrations",
                               ]
                             }
-                            config={Array []}
+                            configFeatures={Array []}
+                            configUser={
+                              Object {
+                                "email": "foo@example.com",
+                                "flags": Object {
+                                  "newsletter_consent_prompt": false,
+                                },
+                                "hasPasswordAuth": true,
+                                "id": "1",
+                                "isAuthenticated": true,
+                                "name": "Foo Bar",
+                                "options": Object {
+                                  "timezone": "UTC",
+                                },
+                                "permissions": Set {},
+                                "username": "foo@example.com",
+                              }
+                            }
                             organization={
                               Object {
                                 "access": Array [
@@ -276,7 +293,24 @@ exports[`ProjectIntegrations Renders emptystate with access 1`] = `
                                   "org:integrations",
                                 ]
                               }
-                              config={Array []}
+                              configFeatures={Array []}
+                              configUser={
+                                Object {
+                                  "email": "foo@example.com",
+                                  "flags": Object {
+                                    "newsletter_consent_prompt": false,
+                                  },
+                                  "hasPasswordAuth": true,
+                                  "id": "1",
+                                  "isAuthenticated": true,
+                                  "name": "Foo Bar",
+                                  "options": Object {
+                                    "timezone": "UTC",
+                                  },
+                                  "permissions": Set {},
+                                  "username": "foo@example.com",
+                                }
+                              }
                               organization={
                                 Object {
                                   "access": Array [
@@ -450,7 +484,24 @@ exports[`ProjectIntegrations Renders emptystate with no permissions 1`] = `
                                 "org:integrations",
                               ]
                             }
-                            config={Array []}
+                            configFeatures={Array []}
+                            configUser={
+                              Object {
+                                "email": "foo@example.com",
+                                "flags": Object {
+                                  "newsletter_consent_prompt": false,
+                                },
+                                "hasPasswordAuth": true,
+                                "id": "1",
+                                "isAuthenticated": true,
+                                "name": "Foo Bar",
+                                "options": Object {
+                                  "timezone": "UTC",
+                                },
+                                "permissions": Set {},
+                                "username": "foo@example.com",
+                              }
+                            }
                             organization={
                               Object {
                                 "access": Array [
@@ -639,7 +690,24 @@ exports[`ProjectIntegrations Renders emptystate with no permissions 1`] = `
                                   "org:integrations",
                                 ]
                               }
-                              config={Array []}
+                              configFeatures={Array []}
+                              configUser={
+                                Object {
+                                  "email": "foo@example.com",
+                                  "flags": Object {
+                                    "newsletter_consent_prompt": false,
+                                  },
+                                  "hasPasswordAuth": true,
+                                  "id": "1",
+                                  "isAuthenticated": true,
+                                  "name": "Foo Bar",
+                                  "options": Object {
+                                    "timezone": "UTC",
+                                  },
+                                  "permissions": Set {},
+                                  "username": "foo@example.com",
+                                }
+                              }
                               organization={
                                 Object {
                                   "access": Array [
