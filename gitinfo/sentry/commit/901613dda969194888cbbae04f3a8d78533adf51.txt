commit 901613dda969194888cbbae04f3a8d78533adf51
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Jun 18 15:29:27 2020 -0700

    feat(alerts): New empty / welcome state messages (#19430)

diff --git a/src/sentry/static/sentry/app/views/alerts/list/index.tsx b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
index 316d92b1bc..ba9c18f24e 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
@@ -5,7 +5,7 @@ import flatten from 'lodash/flatten';
 import omit from 'lodash/omit';
 import styled from '@emotion/styled';
 
-import {IconAdd, IconSettings} from 'app/icons';
+import {IconAdd, IconSettings, IconCheckmark} from 'app/icons';
 import {Organization} from 'app/types';
 import {PageContent, PageHeader} from 'app/styles/organization';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
@@ -17,7 +17,7 @@ import AsyncComponent from 'app/components/asyncComponent';
 import FeatureBadge from 'app/components/featureBadge';
 import Button from 'app/components/button';
 import ButtonBar from 'app/components/buttonBar';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import ExternalLink from 'app/components/links/externalLink';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import PageHeading from 'app/components/pageHeading';
@@ -28,6 +28,7 @@ import withOrganization from 'app/utils/withOrganization';
 import Access from 'app/components/acl/access';
 import ConfigStore from 'app/stores/configStore';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import {promptsUpdate} from 'app/actionCreators/prompts';
 
 import {Incident} from '../types';
 import {TableLayout, TitleAndSparkLine} from './styles';
@@ -35,14 +36,8 @@ import AlertListRow from './row';
 
 const DEFAULT_QUERY_STATUS = 'open';
 
-type Props = {
-  organization: Organization;
-  hasAlertRule?: boolean;
-} & RouteComponentProps<{orgId: string}, {}>;
-
-type State = {
-  incidentList: Incident[];
-};
+const DOCS_URL =
+  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';
 
 const trackDocumentationClicked = (org: Organization) =>
   trackAnalyticsEvent({
@@ -56,6 +51,24 @@ function getQueryStatus(status: any): 'open' | 'closed' {
   return ['open', 'closed'].includes(status) ? status : DEFAULT_QUERY_STATUS;
 }
 
+type Props = RouteComponentProps<{orgId: string}, {}> & {
+  organization: Organization;
+};
+
+type State = {
+  incidentList: Incident[];
+  /**
+   * Is there at least one alert rule configured for the currently selected
+   * projects?
+   */
+  hasAlertRule?: boolean;
+  /**
+   * User has not yet seen the 'alert_stream' welcome prompt for this
+   * organization.
+   */
+  firstVisitShown?: boolean;
+};
+
 class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {
   getEndpoints(): [string, string, any][] {
     const {params, location} = this.props;
@@ -66,38 +79,66 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
       [
         'incidentList',
         `/organizations/${params && params.orgId}/incidents/`,
-        {
-          query: {...query, status},
-        },
+        {query: {...query, status}},
       ],
     ];
   }
 
+  /**
+   * If our incidentList is empty, determine if we've configured alert rules or
+   * if the user has seen the welcome prompt.
+   */
   async onLoadAllEndpointsSuccess() {
     const {incidentList} = this.state;
 
     if (incidentList.length !== 0) {
+      this.setState({hasAlertRule: true, firstVisitShown: false});
       return;
     }
 
-    // Check if they have rules or not, to know which empty state message to display
-    const {params} = this.props;
+    this.setState({loading: true});
 
-    try {
-      const alertRules = await this.api.requestPromise(
-        `/organizations/${params && params.orgId}/alert-rules/`,
-        {
-          method: 'GET',
-        }
-      );
-      this.setState({
-        hasAlertRule: alertRules.length > 0 ? true : false,
-      });
-    } catch (err) {
-      this.setState({
-        hasAlertRule: true, // endpoint failed, using true as the "safe" choice in case they actually do have rules
+    // Check if they have rules or not, to know which empty state message to
+    // display
+    const {params, location, organization} = this.props;
+
+    const alertRules = await this.api.requestPromise(
+      `/organizations/${params?.orgId}/alert-rules/`,
+      {
+        method: 'GET',
+        query: location.query,
+      }
+    );
+    const hasAlertRule = alertRules.length > 0;
+
+    // We've already configured alert rules, no need to check if we should show
+    // the "first time welcome" prompt
+    if (hasAlertRule) {
+      this.setState({hasAlertRule, firstVisitShown: false, loading: false});
+      return;
+    }
+
+    // Check if they have already seen the prompt for the alert stream
+    const prompt = await this.api.requestPromise('/promptsactivity/', {
+      query: {
+        organization_id: organization.id,
+        feature: 'alert_stream',
+      },
+    });
+
+    const firstVisitShown = !prompt?.data?.dismissed_ts;
+
+    if (firstVisitShown) {
+      // Prompt has not been seen, mark the prompt as seen immediately so they
+      // don't see it again
+      promptsUpdate(this.api, {
+        feature: 'alert_stream',
+        organizationId: organization.id,
+        status: 'dismissed',
       });
     }
+
+    this.setState({hasAlertRule, firstVisitShown, loading: false});
   }
 
   /**
@@ -110,30 +151,69 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
     navigateTo(`/settings/${params.orgId}/projects/:projectId/alerts/new/`, router);
   };
 
-  renderEmpty() {
-    const {location} = this.props;
-    const {query} = location;
-    const status = getQueryStatus(query.status);
+  /**
+   * Incidents list is currently at the organization level, but the link needs to
+   * go down to a specific project scope.
+   */
+  handleNavigateToSettings = (e: React.MouseEvent) => {
+    const {router, params} = this.props;
+    e.preventDefault();
+
+    navigateTo(`/settings/${params.orgId}/projects/:projectId/alerts/`, router);
+  };
+
+  tryRenderFirstVisit() {
+    const {firstVisitShown} = this.state;
+
+    if (!firstVisitShown) {
+      return null;
+    }
+
+    return (
+      <WelcomeEmptyMessage
+        leftAligned
+        size="medium"
+        title={t('Find the signal in the noise')}
+        description={t(
+          'You’ve got 5 minutes, 2 million lines of code, and an inbox with 300 new messages. Alerts tell you what went wrong and why.'
+        )}
+        action={
+          <ButtonBar gap={1}>
+            <Button size="small" external href={DOCS_URL}>
+              View Features
+            </Button>
+            <AddAlertRuleButton {...this.props} />
+          </ButtonBar>
+        }
+      />
+    );
+  }
+
+  tryRenderEmpty() {
+    const {hasAlertRule, incidentList} = this.state;
+    const status = getQueryStatus(this.props.location.query.status);
 
-    const hasAlertRule = this.state.hasAlertRule ? this.state.hasAlertRule : false;
+    if (incidentList.length > 0) {
+      return null;
+    }
 
     return (
-      <EmptyStateWarning>
-        <p>
-          <React.Fragment>
-            {tct('No [status] metric alerts. ', {
-              status: status === 'open' ? 'active' : 'resolved',
-            })}
-          </React.Fragment>
-          <React.Fragment>
-            {!hasAlertRule
-              ? tct('Start by [link:creating your first rule].', {
-                  link: <ExternalLink onClick={this.handleAddAlertRule} />,
-                })
-              : ''}
-          </React.Fragment>
-        </p>
-      </EmptyStateWarning>
+      <EmptyMessage
+        size="medium"
+        icon={<IconCheckmark isCircled size="48" />}
+        title={
+          !hasAlertRule
+            ? t('No metric alert rules exist for these projects.')
+            : status === 'open'
+            ? t(
+                'Everything’s a-okay. There are no unresolved metric alerts in these projects.'
+              )
+            : t('There are no resolved metric alerts in these projects.')
+        }
+        description={tct('Learn more about [link:Metric Alerts]', {
+          link: <ExternalLink href={DOCS_URL} />,
+        })}
+      />
     );
   }
 
@@ -141,8 +221,15 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
     return this.renderBody();
   }
 
-  renderBody() {
-    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;
+  renderList() {
+    const {
+      loading,
+      incidentList,
+      incidentListPageLinks,
+      hasAlertRule,
+      firstVisitShown,
+    } = this.state;
+
     const {orgId} = this.props.params;
     const allProjectsFromIncidents = new Set(
       flatten(incidentList?.map(({projects}) => projects))
@@ -157,24 +244,26 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
     return (
       <React.Fragment>
         <Panel>
-          <StyledPanelHeader>
-            <TableLayout status={status}>
-              <PaddedTitleAndSparkLine status={status}>
-                <div>{t('Alert')}</div>
-                {status === 'open' && <div>{t('Graph')}</div>}
-              </PaddedTitleAndSparkLine>
-              <div>{t('Project')}</div>
-              <div>{t('Triggered')}</div>
-              {status === 'closed' && <div>{t('Duration')}</div>}
-              {status === 'closed' && <div>{t('Resolved')}</div>}
-            </TableLayout>
-          </StyledPanelHeader>
-
-          <PanelBody>
-            {showLoadingIndicator && <LoadingIndicator />}
-            {!showLoadingIndicator && (
-              <React.Fragment>
-                {incidentList.length === 0 && this.renderEmpty()}
+          {!loading && !firstVisitShown && (
+            <StyledPanelHeader>
+              <TableLayout status={status}>
+                <PaddedTitleAndSparkLine status={status}>
+                  <div>{t('Alert')}</div>
+                  {status === 'open' && <div>{t('Graph')}</div>}
+                </PaddedTitleAndSparkLine>
+                <div>{t('Project')}</div>
+                <div>{t('Triggered')}</div>
+                {status === 'closed' && <div>{t('Duration')}</div>}
+                {status === 'closed' && <div>{t('Resolved')}</div>}
+              </TableLayout>
+            </StyledPanelHeader>
+          )}
+          {showLoadingIndicator ? (
+            <LoadingIndicator />
+          ) : (
+            this.tryRenderFirstVisit() ??
+            this.tryRenderEmpty() ?? (
+              <PanelBody>
                 <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>
                   {({initiallyLoaded, projects}) =>
                     incidentList.map(incident => (
@@ -189,62 +278,17 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
                     ))
                   }
                 </Projects>
-              </React.Fragment>
-            )}
-          </PanelBody>
+              </PanelBody>
+            )
+          )}
         </Panel>
         <Pagination pageLinks={incidentListPageLinks} />
       </React.Fragment>
     );
   }
-}
-
-class IncidentsListContainer extends React.Component<Props> {
-  componentDidMount() {
-    this.trackView();
-  }
-
-  componentDidUpdate(nextProps: Props) {
-    if (nextProps.location.query?.status !== this.props.location.query?.status) {
-      this.trackView();
-    }
-  }
-
-  trackView() {
-    const {location, organization} = this.props;
-    const status = getQueryStatus(location.query.status);
 
-    trackAnalyticsEvent({
-      eventKey: 'alert_stream.viewed',
-      eventName: 'Alert Stream: Viewed',
-      organization_id: organization.id,
-      status,
-    });
-  }
-
-  /**
-   * Incidents list is currently at the organization level, but the link needs to
-   * go down to a specific project scope.
-   */
-  handleAddAlertRule = (e: React.MouseEvent) => {
-    const {router, params} = this.props;
-    e.preventDefault();
-
-    navigateTo(`/settings/${params.orgId}/projects/:projectId/alerts/new/`, router);
-  };
-
-  /**
-   * Incidents list is currently at the organization level, but the link needs to
-   * go down to a specific project scope.
-   */
-  handleNavigateToSettings = (e: React.MouseEvent) => {
-    const {router, params} = this.props;
-    e.preventDefault();
-
-    navigateTo(`/settings/${params.orgId}/projects/:projectId/alerts/`, router);
-  };
-
-  render() {
+  renderBody() {
+    const {loading, firstVisitShown} = this.state;
     const {params, location, organization} = this.props;
     const {pathname, query} = location;
     const {orgId} = params;
@@ -263,74 +307,63 @@ class IncidentsListContainer extends React.Component<Props> {
                 {t('Alerts')} <FeatureBadge type="beta" />
               </StyledPageHeading>
 
-              <Actions>
-                <Access organization={organization} access={['project:write']}>
-                  {({hasAccess}) => (
-                    <Button
-                      disabled={!hasAccess}
-                      title={
-                        !hasAccess
-                          ? t(
-                              'Users with admin permission or higher can create alert rules.'
-                            )
-                          : undefined
-                      }
-                      onClick={this.handleAddAlertRule}
-                      priority="primary"
-                      href="#"
-                      size="small"
-                      icon={<IconAdd isCircled size="xs" />}
-                    >
-                      {t('Add Alert Rule')}
-                    </Button>
-                  )}
-                </Access>
-
-                <Button
-                  onClick={this.handleNavigateToSettings}
-                  href="#"
-                  size="small"
-                  icon={<IconSettings size="xs" />}
-                >
-                  {t('View Rules')}
-                </Button>
-
-                <ButtonBar merged active={status}>
-                  <Button
-                    to={{pathname, query: openIncidentsQuery}}
-                    barId="open"
-                    size="small"
-                  >
-                    {t('Active')}
-                  </Button>
+              {!loading && !firstVisitShown ? (
+                <Actions gap={1}>
+                  <AddAlertRuleButton {...this.props} />
+
                   <Button
-                    to={{pathname, query: closedIncidentsQuery}}
-                    barId="closed"
+                    onClick={this.handleNavigateToSettings}
+                    href="#"
                     size="small"
+                    icon={<IconSettings size="xs" />}
                   >
-                    {t('Resolved')}
+                    {t('View Rules')}
                   </Button>
-                </ButtonBar>
-              </Actions>
+
+                  <ButtonBar merged active={status}>
+                    <Button
+                      to={{pathname, query: openIncidentsQuery}}
+                      barId="open"
+                      size="small"
+                    >
+                      {t('Active')}
+                    </Button>
+                    <Button
+                      to={{pathname, query: closedIncidentsQuery}}
+                      barId="closed"
+                      size="small"
+                    >
+                      {t('Resolved')}
+                    </Button>
+                  </ButtonBar>
+                </Actions>
+              ) : (
+                // Keep an empty Actions container around to keep the height of
+                // the header correct so we don't jitter between loading
+                // states.
+                <Actions>{null}</Actions>
+              )}
             </PageHeader>
 
             <Alert type="info" icon="icon-circle-info">
               {tct(
-                'This page is in beta and currently only shows [link:metric alerts]. ',
+                'This page is in beta and currently only shows [link:metric alerts]. [contactLink:Please contact us if you have any feedback.]',
                 {
                   link: (
                     <ExternalLink
                       onClick={() => trackDocumentationClicked(organization)}
-                      href="https://docs.sentry.io/workflow/alerts-notifications/alerts/"
+                      href={DOCS_URL}
                     />
                   ),
+                  contactLink: (
+                    <ExternalLink href="mailto:alerting-feedback@sentry.io">
+                      {t('Please contact us if you have any feedback.')}
+                    </ExternalLink>
+                  ),
                 }
               )}
-              <ExternalLink href="mailto:alerting-feedback@sentry.io">
-                {t('Please contact us if you have any feedback.')}
-              </ExternalLink>
             </Alert>
-            <IncidentsList {...this.props} />
+            {this.renderList()}
           </PageContent>
         </GlobalSelectionHeader>
       </DocumentTitle>
@@ -338,6 +371,60 @@ class IncidentsListContainer extends React.Component<Props> {
   }
 }
 
+class IncidentsListContainer extends React.Component<Props> {
+  componentDidMount() {
+    this.trackView();
+  }
+
+  componentDidUpdate(nextProps: Props) {
+    if (nextProps.location.query?.status !== this.props.location.query?.status) {
+      this.trackView();
+    }
+  }
+
+  trackView() {
+    const {location, organization} = this.props;
+    const status = getQueryStatus(location.query.status);
+
+    trackAnalyticsEvent({
+      eventKey: 'alert_stream.viewed',
+      eventName: 'Alert Stream: Viewed',
+      organization_id: organization.id,
+      status,
+    });
+  }
+
+  render() {
+    return <IncidentsList {...this.props} />;
+  }
+}
+
+const AddAlertRuleButton = ({router, params, organization}: Props) => (
+  <Access organization={organization} access={['project:write']}>
+    {({hasAccess}) => (
+      <Button
+        disabled={!hasAccess}
+        title={
+          !hasAccess
+            ? t('Users with admin permission or higher can create alert rules.')
+            : undefined
+        }
+        onClick={e => {
+          e.preventDefault();
+
+          navigateTo(`/settings/${params.orgId}/projects/:projectId/alerts/new/`, router);
+        }}
+        priority="primary"
+        href="#"
+        size="small"
+        icon={<IconAdd isCircled size="xs" />}
+      >
+        {t('Add Alert Rule')}
+      </Button>
+    )}
+  </Access>
+);
+
 const StyledPageHeading = styled(PageHeading)`
   display: flex;
   align-items: center;
@@ -352,11 +439,13 @@ const StyledPanelHeader = styled(PanelHeader)`
   padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;
 `;
 
-const Actions = styled('div')`
-  display: grid;
-  align-items: center;
-  grid-gap: ${space(1)};
-  grid-auto-flow: column;
+const Actions = styled(ButtonBar)`
+  height: 32px;
+`;
+
+const WelcomeEmptyMessage = styled(EmptyMessage)`
+  margin: ${space(4)};
+  max-width: 550px;
 `;
 
 export default withOrganization(IncidentsListContainer);
diff --git a/src/sentry/static/sentry/app/views/settings/components/emptyMessage.tsx b/src/sentry/static/sentry/app/views/settings/components/emptyMessage.tsx
index 5680148a00..659cd402ec 100644
--- a/src/sentry/static/sentry/app/views/settings/components/emptyMessage.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/emptyMessage.tsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
+import {css} from '@emotion/core';
 
 import InlineSvg from 'app/components/inlineSvg';
 import TextBlock from 'app/views/settings/components/text/textBlock';
@@ -12,13 +13,22 @@ type Props = {
   icon?: string | React.ReactNode;
   action?: React.ReactElement;
   size?: 'large' | 'medium';
+  leftAligned?: boolean;
 };
 
 type EmptyMessageProps = Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props;
 type WrapperProps = Pick<EmptyMessageProps, 'size'>;
 
 const EmptyMessage = styled(
-  ({title, description, icon, children, action, ...props}: EmptyMessageProps) => (
+  ({
+    title,
+    description,
+    icon,
+    children,
+    action,
+    leftAligned: _leftAligned,
+    ...props
+  }: EmptyMessageProps) => (
     <div data-test-id="empty-message" {...props}>
       {icon && (
         <IconWrapper>
@@ -33,11 +43,20 @@ const EmptyMessage = styled(
   )
 )<WrapperProps>`
   display: flex;
-  text-align: center;
-  align-items: center;
+  ${p =>
+    p.leftAligned
+      ? css`
+          max-width: 70%;
+          align-items: flex-start;
+          padding: ${space(4)};
+        `
+      : css`
+          text-align: center;
+          align-items: center;
+          padding: ${space(4)} 15%;
+        `};
   flex-direction: column;
   color: ${p => p.theme.gray700};
-  padding: ${p => p.theme.grid * 4}px 15%;
   font-size: ${p =>
     p.size && p.size === 'large' ? p.theme.fontSizeExtraLarge : p.theme.fontSizeLarge};
 `;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
index 5c3fa7029d..e8f5b4feef 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
@@ -116,6 +116,7 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
               label="Data source"
               orientInline
               required
+              disabled={disabled}
               choices={[
                 [Dataset.ERRORS, t('Errors')],
                 [Dataset.TRANSACTIONS, t('Transactions')],
diff --git a/src/sentry/utils/prompts.py b/src/sentry/utils/prompts.py
index a5379a095d..500eca7cbf 100644
--- a/src/sentry/utils/prompts.py
+++ b/src/sentry/utils/prompts.py
@@ -4,6 +4,7 @@ from __future__ import absolute_import
 DEFAULT_PROMPTS = {
     "releases": {"required_fields": ["organization_id", "project_id"]},
     "suspect_commits": {"required_fields": ["organization_id", "project_id"]},
+    "alert_stream": {"required_fields": ["organization_id"]},
 }
 
 
diff --git a/tests/js/spec/components/events/interfaces/__snapshots__/exceptionStacktraceContent.spec.jsx.snap b/tests/js/spec/components/events/interfaces/__snapshots__/exceptionStacktraceContent.spec.jsx.snap
index db75d9e1bf..cfa0b361ce 100644
--- a/tests/js/spec/components/events/interfaces/__snapshots__/exceptionStacktraceContent.spec.jsx.snap
+++ b/tests/js/spec/components/events/interfaces/__snapshots__/exceptionStacktraceContent.spec.jsx.snap
@@ -142,12 +142,12 @@ exports[`ExceptionStacktraceContent default behaviour 1`] = `
           title="No app only stacktrace has been found!"
         >
           <Component
-            className="css-13mk16x-EmptyMessage e1h3yfdx0"
+            className="css-4ypuko-EmptyMessage-EmptyMessage e1h3yfdx0"
             icon="icon-warning-sm"
             title="No app only stacktrace has been found!"
           >
             <div
-              className="css-13mk16x-EmptyMessage e1h3yfdx0"
+              className="css-4ypuko-EmptyMessage-EmptyMessage e1h3yfdx0"
               data-test-id="empty-message"
             >
               <IconWrapper>
diff --git a/tests/js/spec/views/alerts/list/index.spec.jsx b/tests/js/spec/views/alerts/list/index.spec.jsx
index f4244913a9..5de99ab5c2 100644
--- a/tests/js/spec/views/alerts/list/index.spec.jsx
+++ b/tests/js/spec/views/alerts/list/index.spec.jsx
@@ -8,7 +8,7 @@ import ProjectsStore from 'app/stores/projectsStore';
 
 describe('IncidentsList', function() {
   const {routerContext, organization} = initializeOrg();
-  let mock;
+  let incidentsMock;
   let statsMock;
   let projectMock;
   let wrapper;
@@ -32,7 +32,7 @@ describe('IncidentsList', function() {
   };
 
   beforeEach(function() {
-    mock = MockApiClient.addMockResponse({
+    incidentsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/',
       body: [
         TestStubs.Incident({
@@ -117,25 +117,89 @@ describe('IncidentsList', function() {
     });
   });
 
-  it('displays empty state', async function() {
+  it('displays empty state (first time experience)', async function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/',
       body: [],
     });
-    const rules_mock = MockApiClient.addMockResponse({
+    const rulesMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/alert-rules/',
       body: [],
     });
+    const promptsMock = MockApiClient.addMockResponse({
+      url: '/promptsactivity/',
+      body: {data: {dismissed_ts: null}},
+    });
+    const promptsUpdateMock = MockApiClient.addMockResponse({
+      url: '/promptsactivity/',
+      method: 'PUT',
+    });
+
+    wrapper = await createWrapper();
+
+    expect(rulesMock).toHaveBeenCalledTimes(1);
+    expect(promptsMock).toHaveBeenCalledTimes(1);
+    expect(promptsUpdateMock).toHaveBeenCalledTimes(1);
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('PanelItem')).toHaveLength(0);
+    expect(wrapper.text()).toContain('Alerts tell you what went wrong and why');
+  });
+
+  it('displays empty state (rules not yet created)', async function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/',
+      body: [],
+    });
+    const rulesMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/alert-rules/',
+      body: [],
+    });
+    const promptsMock = MockApiClient.addMockResponse({
+      url: '/promptsactivity/',
+      body: {data: {dismissed_ts: Math.floor(Date.now() / 1000)}},
+    });
 
     wrapper = await createWrapper();
 
-    expect(rules_mock).toHaveBeenCalledTimes(1);
+    expect(rulesMock).toHaveBeenCalledTimes(1);
+    expect(promptsMock).toHaveBeenCalledTimes(1);
 
     await tick();
     wrapper.update();
 
     expect(wrapper.find('PanelItem')).toHaveLength(0);
-    expect(wrapper.text()).toContain('No active metric alerts.');
+    expect(wrapper.text()).toContain('No metric alert rules exist for these projects');
+  });
+
+  it('displays empty state (rules created)', async function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/',
+      body: [],
+    });
+    const rulesMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/alert-rules/',
+      body: [{id: 1}],
+    });
+    const promptsMock = MockApiClient.addMockResponse({
+      url: '/promptsactivity/',
+      body: {data: {dismissed_ts: Math.floor(Date.now() / 1000)}},
+    });
+
+    wrapper = await createWrapper();
+
+    expect(rulesMock).toHaveBeenCalledTimes(1);
+    expect(promptsMock).toHaveBeenCalledTimes(0);
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('PanelItem')).toHaveLength(0);
+    expect(wrapper.text()).toContain(
+      'There are no unresolved metric alerts in these projects'
+    );
   });
 
   it('toggles open/closed', async function() {
@@ -164,9 +228,9 @@ describe('IncidentsList', function() {
         .find('TimeSince')
     ).toHaveLength(1);
 
-    expect(mock).toHaveBeenCalledTimes(1);
+    expect(incidentsMock).toHaveBeenCalledTimes(1);
 
-    expect(mock).toHaveBeenCalledWith(
+    expect(incidentsMock).toHaveBeenCalledWith(
       '/organizations/org-slug/incidents/',
       expect.objectContaining({query: {status: 'open'}})
     );
@@ -175,7 +239,7 @@ describe('IncidentsList', function() {
 
     expect(
       wrapper
-        .find('ButtonBar')
+        .find('Actions ButtonBar ButtonBar')
         .find('Button')
         .at(1)
         .prop('priority')
@@ -196,11 +260,11 @@ describe('IncidentsList', function() {
         .find('TimeSince')
     ).toHaveLength(2);
 
-    expect(mock).toHaveBeenCalledTimes(2);
+    expect(incidentsMock).toHaveBeenCalledTimes(2);
     // Stats not called for closed incidents
     expect(statsMock).toHaveBeenCalledTimes(1);
 
-    expect(mock).toHaveBeenCalledWith(
+    expect(incidentsMock).toHaveBeenCalledWith(
       '/organizations/org-slug/incidents/',
       expect.objectContaining({query: expect.objectContaining({status: 'closed'})})
     );
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index 34b458dd0c..a639ad20db 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -761,10 +761,10 @@ exports[`InviteMember should render roles when available and allowed, and handle
                     >
                       <EmptyMessage>
                         <Component
-                          className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                          className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                         >
                           <div
-                            className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                            className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                             data-test-id="empty-message"
                           >
                             <Description
diff --git a/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
index 06fa527748..faac276a47 100644
--- a/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
@@ -328,10 +328,10 @@ exports[`ProjectEnvironments render active renders empty message 1`] = `
               >
                 <EmptyMessage>
                   <Component
-                    className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                    className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                   >
                     <div
-                      className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                      className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                       data-test-id="empty-message"
                     >
                       <Description
@@ -684,10 +684,10 @@ exports[`ProjectEnvironments render hidden renders empty message 1`] = `
               >
                 <EmptyMessage>
                   <Component
-                    className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                    className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                   >
                     <div
-                      className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                      className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                       data-test-id="empty-message"
                     >
                       <Description
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/index.spec.jsx.snap
index f7aafdcf71..316b29989c 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/index.spec.jsx.snap
@@ -354,10 +354,10 @@ exports[`Organization Developer Settings when no Apps exist displays empty state
                     >
                       <EmptyMessage>
                         <Component
-                          className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                          className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                         >
                           <div
-                            className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                            className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                             data-test-id="empty-message"
                           >
                             <Description
@@ -524,10 +524,10 @@ exports[`Organization Developer Settings when no Apps exist displays empty state
                     >
                       <EmptyMessage>
                         <Component
-                          className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                          className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                         >
                           <div
-                            className="css-1scmenn-EmptyMessage e1h3yfdx0"
+                            className="css-1qddu1g-EmptyMessage-EmptyMessage e1h3yfdx0"
                             data-test-id="empty-message"
                           >
                             <Description
