commit ce8311f849b329a94e885a6a0c3d928bceb87b73
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Jun 2 14:13:56 2020 -0700

    ref(alerts): Allow ThresholdControl to input fractions (#19147)

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
index 3d4d5e6e6e..8ed5c54c90 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
@@ -17,7 +17,6 @@ import {
   MetricActionTemplate,
   ThresholdControlValue,
 } from '../types';
-import hasThresholdValue from '../utils/hasThresholdValue';
 
 type AlertRuleThresholdKey = {
   [AlertRuleThreshold.INCIDENT]: 'alertThreshold';
@@ -56,17 +55,14 @@ class TriggerForm extends React.PureComponent<Props> {
     const {onChange, trigger} = this.props;
 
     const thresholdKey = this.getThresholdKey(type);
-    const newValue = !hasThresholdValue(value.threshold)
-      ? value.threshold
-      : Math.round(value.threshold);
 
     onChange(
       {
         ...trigger,
-        [thresholdKey]: newValue,
+        [thresholdKey]: value.threshold,
         thresholdType: value.thresholdType,
       },
-      {[thresholdKey]: newValue}
+      {[thresholdKey]: value.threshold}
     );
   };
 
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/thresholdControl.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/thresholdControl.tsx
index bfeb4b6bbe..a0027785d3 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/thresholdControl.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/thresholdControl.tsx
@@ -21,56 +21,96 @@ type Props = ThresholdControlValue & {
   ) => void;
 };
 
-function ThresholdControl({
-  thresholdType,
-  threshold,
-  type,
-  onChange,
-  disabled,
-  ...props
-}: Props) {
-  const onChangeThresholdType = ({value}, e) => {
-    onChange(
-      type,
-      {thresholdType: getThresholdTypeForThreshold(type, value), threshold},
-      e
-    );
+type State = {
+  currentValue: string | null;
+};
+
+class ThresholdControl extends React.Component<Props, State> {
+  state: State = {
+    currentValue: null,
   };
 
-  const onChangeThreshold = (e: React.ChangeEvent<HTMLInputElement>) => {
-    const thresholdAsInt = parseInt(e.target.value, 10);
+  handleThresholdChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const {value} = e.target;
+
+    // Only allow number and partial number inputs
+    if (!/^[0-9]*\.?[0-9]*$/.test(value)) {
+      return;
+    }
+
+    const {onChange, type, thresholdType} = this.props;
+
+    // Empty input
+    if (value === '') {
+      this.setState({currentValue: null});
+      onChange(type, {thresholdType, threshold: ''}, e);
+      return;
+    }
+
+    // Only call onChnage if the new number is valid, and not partially typed
+    // (eg writing out the decimal '5.')
+    if (/(\.|0)$/.test(value)) {
+      this.setState({currentValue: value});
+      return;
+    }
+
+    const numberValue = Number(value);
+
+    this.setState({currentValue: null});
+    onChange(type, {thresholdType, threshold: numberValue}, e);
+  };
+
+  /**
+   * Coerce the currentValue to a number and trigger the onChange.
+   */
+  handleThresholdBlur = (e: React.FocusEvent<HTMLInputElement>) => {
+    if (this.state.currentValue === null) {
+      return;
+    }
+
+    const {onChange, type, thresholdType} = this.props;
+    onChange(type, {thresholdType, threshold: Number(this.state.currentValue)}, e);
+    this.setState({currentValue: null});
+  };
+
+  handleTypeChange = ({value}, e) => {
+    const {onChange, type, threshold} = this.props;
 
     onChange(
       type,
-      {thresholdType, threshold: isNaN(thresholdAsInt) ? '' : thresholdAsInt},
+      {thresholdType: getThresholdTypeForThreshold(type, value), threshold},
       e
     );
   };
 
-  const thresholdName = AlertRuleThreshold.INCIDENT === type ? 'alert' : 'resolve';
-
-  return (
-    <div {...props}>
-      <SelectControl
-        isDisabled={disabled}
-        name={`${thresholdName}ThresholdType`}
-        value={getThresholdTypeForThreshold(type, thresholdType)}
-        options={[
-          {value: AlertRuleThresholdType.BELOW, label: t('Below')},
-          {value: AlertRuleThresholdType.ABOVE, label: t('Above')},
-        ]}
-        onChange={onChangeThresholdType}
-      />
-      <Input
-        disabled={disabled}
-        name={`${thresholdName}Threshold`}
-        type="number"
-        placeholder="300"
-        value={threshold ?? ''}
-        onChange={onChangeThreshold}
-      />
-    </div>
-  );
+  render() {
+    const {currentValue} = this.state;
+    const {thresholdType, threshold, type, onChange: _, disabled, ...props} = this.props;
+    const thresholdName = AlertRuleThreshold.INCIDENT === type ? 'alert' : 'resolve';
+
+    return (
+      <div {...props}>
+        <SelectControl
+          isDisabled={disabled}
+          name={`${thresholdName}ThresholdType`}
+          value={getThresholdTypeForThreshold(type, thresholdType)}
+          options={[
+            {value: AlertRuleThresholdType.BELOW, label: t('Below')},
+            {value: AlertRuleThresholdType.ABOVE, label: t('Above')},
+          ]}
+          onChange={this.handleTypeChange}
+        />
+        <Input
+          disabled={disabled}
+          name={`${thresholdName}Threshold`}
+          placeholder="300"
+          value={currentValue ?? threshold ?? ''}
+          onChange={this.handleThresholdChange}
+          onBlur={this.handleThresholdBlur}
+        />
+      </div>
+    );
+  }
 }
 
 export default styled(ThresholdControl)`
