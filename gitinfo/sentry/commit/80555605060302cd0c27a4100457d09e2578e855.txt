commit 80555605060302cd0c27a4100457d09e2578e855
Author: Bruno Garcia <github@brunogarcia.com>
Date:   Thu Oct 18 13:15:32 2018 +0200

    GPU interface (#10162)
    
    * feat: GPU context interface
    * create tag for GPU name and vendor
    
    * feat: GPU context summary
    
    * test: text GPU context summary
    
    * feat: show logo for apple and arm
    
    * feature: nvidia logo
    
    * feature: AMD logo
    
    * feature: display GPU info
    
    * fix: nvidia logo scretched
    
    * fix: check correct value: vendor_id
    thanks @markstory

diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 7682e124aa..0a8e8500d8 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -152,6 +152,15 @@ class OsContextType(ContextType):
         super(OsContextType, self).__init__(alias, data)
 
 
+@contexttype
+class GpuContextType(ContextType):
+    type = 'gpu'
+    indexed_fields = {
+        'name': u'{name}',
+        'vendor': u'{vendor_name}',
+    }
+
+
 class Contexts(Interface):
     """
     This interface stores context specific information.
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary.jsx b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
index 848867d127..6477a6aa5a 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary.jsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
@@ -189,6 +189,46 @@ class DeviceSummary extends React.Component {
   }
 }
 
+export class GpuSummary extends React.Component {
+  static propTypes = {
+    data: PropTypes.object.isRequired,
+  };
+
+  render() {
+    let data = this.props.data;
+
+    if (objectIsEmpty(data) || !data.name) {
+      return <NoSummary title={t('Unknown GPU')} />;
+    }
+
+    let className = generateClassName(data.name);
+    let versionElement = null;
+
+    if (data.vendor_name) {
+      className = generateClassName(data.vendor_name);
+      versionElement = (
+        <p>
+          <strong>{t('Vendor:')}</strong> {data.vendor_name}
+        </p>
+      );
+    } else {
+      versionElement = (
+        <p>
+          <strong>{t('Vendor:')}</strong> {t('Unknown')}
+        </p>
+      );
+    }
+
+    return (
+      <div className={`context-item ${className}`}>
+        <span className="context-item-icon" />
+        <h3>{data.name}</h3>
+        {versionElement}
+      </div>
+    );
+  }
+}
+
 const MIN_CONTEXTS = 3;
 const MAX_CONTEXTS = 4;
 const KNOWN_CONTEXTS = [
@@ -197,6 +237,7 @@ const KNOWN_CONTEXTS = [
   {key: 'runtime', Component: GenericSummary, unknownTitle: t('Unknown Runtime')},
   {key: 'os', Component: OsSummary},
   {key: 'device', Component: DeviceSummary},
+  {key: 'gpu', Component: GpuSummary},
 ];
 
 class EventContextSummary extends React.Component {
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index ddebd64aa1..8825a33dca 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -12,6 +12,7 @@ const CONTEXT_TYPES = {
   os: require('app/components/events/contexts/os').default,
   runtime: require('app/components/events/contexts/runtime').default,
   user: require('app/components/events/contexts/user').default,
+  gpu: require('app/components/events/contexts/gpu').default,
 };
 
 function getContextComponent(type) {
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx b/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx
new file mode 100644
index 0000000000..f3afd3d433
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx
@@ -0,0 +1,65 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import ContextBlock from 'app/components/events/contexts/contextBlock';
+import {formatBytes} from 'app/utils';
+
+const megaByteInBytes = 1048576;
+
+class GpuContextType extends React.Component {
+  static propTypes = {
+    alias: PropTypes.string.isRequired,
+    data: PropTypes.object.isRequired,
+  };
+
+  formatMemory = memory_size => {
+    if (!Number.isInteger(memory_size) || memory_size <= 0) {
+      return null;
+    }
+
+    // 'usable_memory' is in defined in MB
+    return formatBytes(memory_size * megaByteInBytes);
+  };
+
+  render() {
+    let {
+      id,
+      name,
+      version,
+      vendor_name,
+      vendor_id,
+      memory_size,
+      npot_support,
+      multi_threaded_rendering,
+      api_type,
+      ...data
+    } = this.props.data;
+
+    let memory = this.formatMemory(memory_size);
+    let knownData = [
+      ['?Name', name],
+      ['?Version', version],
+      ['?Vendor', vendor_name],
+      ['?Memory', memory],
+      ['?NPOT Support', npot_support],
+      ['?Multi-Thread rendering', multi_threaded_rendering],
+      ['?API Type', api_type],
+    ];
+
+    if (vendor_id > 0) {
+      knownData.unshift(['?Vendor Id', vendor_id]);
+    }
+
+    if (id > 0) {
+      knownData.unshift(['?GPU Id', id]);
+    }
+
+    return <ContextBlock data={data} knownData={knownData} alias={this.props.alias} />;
+  }
+}
+
+GpuContextType.getTitle = function(value) {
+  return 'GPU';
+};
+
+export default GpuContextType;
diff --git a/src/sentry/static/sentry/images/icons/context/amd.png b/src/sentry/static/sentry/images/icons/context/amd.png
new file mode 100644
index 0000000000..35c4ba0e65
Binary files /dev/null and b/src/sentry/static/sentry/images/icons/context/amd.png differ
diff --git a/src/sentry/static/sentry/images/icons/context/arm.png b/src/sentry/static/sentry/images/icons/context/arm.png
new file mode 100644
index 0000000000..56747183a8
Binary files /dev/null and b/src/sentry/static/sentry/images/icons/context/arm.png differ
diff --git a/src/sentry/static/sentry/images/icons/context/nvidia.png b/src/sentry/static/sentry/images/icons/context/nvidia.png
new file mode 100644
index 0000000000..05bb5594f1
Binary files /dev/null and b/src/sentry/static/sentry/images/icons/context/nvidia.png differ
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 08550b3039..c37d63dc73 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -922,6 +922,21 @@
       }
     }
 
+    &.arm .context-item-icon {
+      background-image: url(../images/icons/context/arm.png);
+      background-size: contain;
+    }
+
+    &.amd .context-item-icon {
+      background-image: url(../images/icons/context/amd.png);
+      background-size: contain;
+    }
+
+    &.nvidia .context-item-icon {
+      background-image: url(../images/icons/context/nvidia.png);
+      background-size: contain;
+    }
+
     &.electron .context-item-icon {
       background-image: url(../images/icons/context/electron.png);
     }
@@ -979,6 +994,7 @@
     &.tvos,
     &.mac-os-x,
     &.mac,
+    &.apple,
     &.watchos {
       .context-item-icon {
         background-image: url(../images/icons/context/apple-ios.svg);
diff --git a/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap b/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
index 61b0009b17..3bbddd124c 100644
--- a/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
+++ b/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
@@ -178,6 +178,46 @@ exports[`ContextSummary render() should skip non-default named contexts 1`] = `
 </div>
 `;
 
+exports[`GpuSummary render() should render name and vendor 1`] = `
+<div
+  className="context-item arm"
+>
+  <span
+    className="context-item-icon"
+  />
+  <h3>
+    Mali-T880
+  </h3>
+  <p>
+    <strong>
+      Vendor:
+    </strong>
+     
+    ARM
+  </p>
+</div>
+`;
+
+exports[`GpuSummary render() should render unknown when no vendor 1`] = `
+<div
+  className="context-item apple-a"
+>
+  <span
+    className="context-item-icon"
+  />
+  <h3>
+    Apple A8 GPU
+  </h3>
+  <p>
+    <strong>
+      Vendor:
+    </strong>
+     
+    Unknown
+  </p>
+</div>
+`;
+
 exports[`OsSummary render() should render the kernel version when no version 1`] = `
 <div
   className="context-item mac-os-x"
diff --git a/tests/js/spec/components/events/contextSummary.spec.jsx b/tests/js/spec/components/events/contextSummary.spec.jsx
index ff239c47c4..9565e848ef 100644
--- a/tests/js/spec/components/events/contextSummary.spec.jsx
+++ b/tests/js/spec/components/events/contextSummary.spec.jsx
@@ -1,7 +1,10 @@
 import React from 'react';
 import {shallow} from 'enzyme';
 
-import ContextSummary, {OsSummary} from 'app/components/events/contextSummary';
+import ContextSummary, {
+  OsSummary,
+  GpuSummary,
+} from 'app/components/events/contextSummary';
 
 const CONTEXT_USER = {
   email: 'mail@example.org',
@@ -172,3 +175,28 @@ describe('OsSummary', function() {
     });
   });
 });
+
+describe('GpuSummary', function() {
+  describe('render()', function() {
+    it('should render name and vendor', () => {
+      const gpu = {
+        name: 'Mali-T880',
+        vendor_name: 'ARM',
+        version: 'OpenGL ES 3.2 v1.r22p0-01rel0.f294e54ceb2cb2d81039204fa4b0402e',
+      };
+
+      const wrapper = shallow(<GpuSummary data={gpu} />);
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('should render unknown when no vendor', () => {
+      const gpu = {
+        type: 'gpu',
+        name: 'Apple A8 GPU',
+      };
+
+      const wrapper = shallow(<GpuSummary data={gpu} />);
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/sentry/interfaces/test_contexts.py b/tests/sentry/interfaces/test_contexts.py
index e60dd49edd..0b69a219fb 100644
--- a/tests/sentry/interfaces/test_contexts.py
+++ b/tests/sentry/interfaces/test_contexts.py
@@ -191,3 +191,24 @@ class ContextsTest(TestCase):
                 'device_app_hash': '5678',
             }
         }
+
+    def test_gpu(self):
+        ctx = Contexts.to_python({
+            'gpu': {
+                'name': 'AMD Radeon Pro 560',
+                'vendor_name': 'Apple',
+                'version': 'Metal'
+            },
+        })
+        assert sorted(ctx.iter_tags()) == [
+            ('gpu.name', 'AMD Radeon Pro 560'),
+            ('gpu.vendor', 'Apple'),
+        ]
+        assert ctx.to_json() == {
+            'gpu': {
+                'type': 'gpu',
+                'name': 'AMD Radeon Pro 560',
+                'vendor_name': 'Apple',
+                'version': 'Metal'
+            }
+        }
