commit 948783a4c6ab519b5d73c69ee29ca0a7015d487b
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Sep 24 13:06:27 2015 -0700

    Add backend feature for blacklisting IPs per-project

diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 2eee9810c9..a174e4d1e9 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -11,8 +11,10 @@ import six
 import urllib
 
 from collections import namedtuple
-from django.conf import settings
 from urlparse import urlparse, urljoin
+from ipaddr import IPNetwork
+
+from django.conf import settings
 
 
 ParsedUriMatch = namedtuple('ParsedUriMatch', ['scheme', 'domain', 'path'])
@@ -156,3 +158,26 @@ def is_valid_origin(origin, project=None, allowed=None):
         if parsed.path.startswith(path):
             return True
     return False
+
+
+def is_valid_ip(ip_address, project):
+    """
+    Verify that an IP address is not being blacklisted
+    for the given project.
+    """
+    blacklist = project.get_option('sentry:blacklisted-ips')
+    if not blacklist:
+        return True
+
+    ip_network = IPNetwork(ip_address)
+    for addr in blacklist:
+        # We want to error fast if it's an exact match
+        if ip_address == addr:
+            return False
+
+        # Check to make sure it's actually a range before
+        # attempting to see if we're within that range
+        if '/' in addr and ip_network in IPNetwork(addr):
+            return False
+
+    return True
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 61118b3c35..b0a13bb01f 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -37,7 +37,9 @@ from sentry.quotas.base import RateLimit
 from sentry.utils import json, metrics
 from sentry.utils.data_scrubber import SensitiveDataFilter
 from sentry.utils.javascript import to_json
-from sentry.utils.http import is_valid_origin, get_origins, is_same_domain
+from sentry.utils.http import (
+    is_valid_origin, get_origins, is_same_domain, is_valid_ip,
+)
 from sentry.utils.safe import safe_execute
 from sentry.web.decorators import has_access
 from sentry.web.helpers import render_to_response
@@ -181,6 +183,10 @@ class APIView(BaseView):
             if not is_valid_origin(origin, project):
                 raise APIForbidden('Invalid origin: %s' % (origin,))
 
+        if project and not is_valid_ip(request.META['REMOTE_ADDR'], project):
+            metrics.incr('events.blacklisted')
+            raise APIForbidden('Blacklisted IP address: %s' % (request.META['REMOTE_ADDR'],))
+
         # XXX: It seems that the OPTIONS call does not always include custom headers
         if request.method == 'OPTIONS':
             response = self.options(request, project)
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 7d9e20e8ca..a734430d5d 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -10,7 +10,8 @@ from exam import fixture
 from sentry.models import Project
 from sentry.testutils import TestCase
 from sentry.utils.http import (
-    is_same_domain, is_valid_origin, get_origins, absolute_uri)
+    is_same_domain, is_valid_origin, get_origins, absolute_uri, is_valid_ip,
+)
 
 
 class AbsoluteUriTest(TestCase):
@@ -189,3 +190,21 @@ class IsValidOriginTestCase(TestCase):
 
         result = self.isValidOrigin('sp://custom-thing.bizbaz/foo/bar', ['sp://*.foobar'])
         assert result is False
+
+
+class IsValidIPTestCase(TestCase):
+    def is_valid_ip(self, ip, inputs):
+        self.project.update_option('sentry:blacklisted-ips', inputs)
+        return is_valid_ip(ip, self.project)
+
+    def test_not_in_blacklist(self):
+        assert self.is_valid_ip('127.0.0.1', [])
+        assert self.is_valid_ip('127.0.0.1', ['0.0.0.0', '192.168.1.1', '10.0.0.0/8'])
+
+    def test_match_blacklist(self):
+        assert not self.is_valid_ip('127.0.0.1', ['127.0.0.1'])
+        assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.1', '192.168.1.1'])
+
+    def test_match_blacklist_range(self):
+        assert not self.is_valid_ip('127.0.0.1', ['127.0.0.1/8'])
+        assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.0/8', '192.168.1.0/8'])
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 7e15de7a9b..e33df3755a 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -67,6 +67,15 @@ class StoreViewTest(TestCase):
         self.assertIn('Access-Control-Allow-Origin', resp)
         self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')
 
+    @mock.patch('sentry.web.api.is_valid_ip', mock.Mock(return_value=False))
+    def test_request_with_backlisted_ip(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 403, resp.content
+        resp = self.client.post(self.path)
+        assert resp.status_code == 403, resp.content
+        resp = self.client.options(self.path)
+        assert resp.status_code == 403, resp.content
+
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
     def test_scrubs_ip_address(self, mock_insert_data_to_database):
         self.project.update_option('sentry:scrub_ip_address', True)
