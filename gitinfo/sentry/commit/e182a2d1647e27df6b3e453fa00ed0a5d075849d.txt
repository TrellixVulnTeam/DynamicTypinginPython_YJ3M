commit e182a2d1647e27df6b3e453fa00ed0a5d075849d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Oct 3 20:36:04 2019 +0200

    feat: Improved dialog for grouping update (#14930)

diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index ab48a8ba2f..5728807d64 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -64,8 +64,7 @@ register_strategy_config(
     ],
     delegates=["frame:v1", "stacktrace:v1", "single-exception:v1"],
     changelog="""
-        * New grouping strategy optimized for native and javascript
-        * Not compatible with the old legacy grouping
+        * Experimental grouping algorithm (should not be used)
     """,
     hidden=True,
 )
@@ -85,8 +84,7 @@ register_strategy_config(
     ],
     delegates=["frame:v2", "stacktrace:v1", "single-exception:v2"],
     changelog="""
-        * messages are now preprocessed to increase change of grouping together
-        * exceptions without stacktraces are now grouped by a trimmed message
+        * Experimental grouping algorithm (should not be used)
     """,
     hidden=True,
 )
@@ -106,12 +104,16 @@ register_strategy_config(
     ],
     delegates=["frame:v3", "stacktrace:v1", "single-exception:v2"],
     changelog="""
-        * context lines are honored again for platforms with reliable source
-          code information (JavaScript, Python, PHP and Ruby)
+        * uses source code information all platforms with reliable sources
+          for grouping (JavaScript, Python, PHP and Ruby) and function
+          names and filenames otherwise.
+        * Fallback grouping applies clean-up logic on exception messages
+          (numbers, uuids, email addresses and others are removed)
         * JavaScript stacktraces are better deduplicated across browser
-          versions.
+          versions yielding a higher chance of these grouping together.
         * JavaScript stacktraces involving source maps are likely to group
           better.
+        * C/C++ and other native stacktraces are more reliably grouped.
     """,
 )
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index 55a1eaf21a..8b6db439ec 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -5,6 +5,7 @@ import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import marked from 'marked';
 
+import Alert from 'app/components/alert';
 import {Panel, PanelAlert, PanelHeader} from 'app/components/panels';
 import {
   changeProjectSlug,
@@ -102,6 +103,7 @@ class ProjectGeneralSettings extends AsyncView {
     }
 
     let updateNotes = '';
+    let riskLevel = 0;
     const newData = {};
 
     this.state.groupingConfigs.forEach(({id, latest, changelog}) => {
@@ -118,6 +120,39 @@ class ProjectGeneralSettings extends AsyncView {
       }
     });
 
+    // legacy to newstyle is a risky update
+    if (
+      this.state.data.groupingConfig.match(/^legacy:/) &&
+      newData.groupingConfig &&
+      newData.groupingConfig.match(/^newstyle:/)
+    ) {
+      riskLevel = 2;
+    }
+
+    let riskNote;
+    let alertType;
+    switch (riskLevel) {
+      case 0:
+        riskNote = t('This upgrade has the chance to create some new issues.');
+        alertType = 'info';
+        break;
+      case 1:
+        riskNote = t('This upgrade will create some new issues.');
+        alertType = 'warning';
+        break;
+      case 2:
+        riskNote = (
+          <strong>
+            {t(
+              'The new grouping strategy is incompatible with the current and will create entirely new issues.'
+            )}
+          </strong>
+        );
+        alertType = 'error';
+        break;
+      default:
+    }
+
     const noUpdates = Object.keys(newData).length === 0;
 
     return (
@@ -145,27 +180,26 @@ class ProjectGeneralSettings extends AsyncView {
                 this.fetchData();
               }, handleXhrErrorResponse('Unable to upgrade config'));
           }}
-          priority="danger"
+          priority={riskLevel >= 2 ? 'danger' : 'primary'}
           title={t('Upgrade grouping strategy?')}
           confirmText={t('Upgrade')}
           message={
             <div>
               <TextBlock>
-                <strong>
-                  {t(
-                    'This will upgrade grouping and cause new events to group differently.'
-                  )}
-                </strong>
+                <strong>{t('Upgrade Grouping Strategy')}</strong>
               </TextBlock>
               <TextBlock>
                 {t(
-                  'From this moment onwards new events are likely to generate new groups.'
+                  'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'
                 )}
-                <br />
-                <br />
+              </TextBlock>
+              <TextBlock>
                 <strong>{t('New Behavior')}</strong>
                 <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />
               </TextBlock>
+              <TextBlock>
+                <Alert type={alertType}>{riskNote}</Alert>
+              </TextBlock>
             </div>
           }
         >
@@ -175,7 +209,7 @@ class ProjectGeneralSettings extends AsyncView {
               title={noUpdates ? t('You are already on the latest version') : null}
               className="ref-upgrade-grouping-strategy"
               type="button"
-              priority="primary"
+              priority={riskLevel >= 2 ? 'danger' : 'primary'}
             >
               {t('Update Grouping Strategy')}
             </Button>
