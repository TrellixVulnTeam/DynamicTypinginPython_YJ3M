commit 804e830e508ce125e981fa1a452554d58acf00fc
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Aug 25 13:11:14 2016 -0700

    Track a continuous transaction id record through deletion events (#4005)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index cb476f3485..c7d149f656 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -99,7 +99,7 @@ class Endpoint(APIView):
             }
             return Response(context, status=500)
 
-    def create_audit_entry(self, request, **kwargs):
+    def create_audit_entry(self, request, transaction_id=None, **kwargs):
         user = request.user if request.user.is_authenticated() else None
         api_key = request.auth if isinstance(request.auth, ApiKey) else None
 
@@ -118,6 +118,8 @@ class Endpoint(APIView):
             extra['actor_id'] = entry.actor_id
         if entry.actor_key_id:
             extra['actor_key_id'] = entry.actor_key_id
+        if transaction_id is not None:
+            extra['transaction_id'] = transaction_id
 
         audit_logger.info(entry.get_event_display(), extra=extra)
 
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 2fe6e5d8f8..05132bd251 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import logging
+from uuid import uuid4
 
 from rest_framework import serializers, status
 from rest_framework.response import Response
@@ -159,9 +160,14 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         if organization.is_default:
             return Response({'detail': ERR_DEFAULT_ORG}, status=400)
 
-        logging.getLogger('sentry.deletions').info(
-            'Organization %s (id=%s) removal requested by user (id=%s)',
-            organization.slug, organization.id, request.user.id)
+        transaction_id = uuid4().hex
+        logging.getLogger('sentry.deletions').info('remove.organization', extra={
+            'organization_id': organization.id,
+            'organization_slug': organization.slug,
+            'actor_id': request.user.id,
+            'transaction_id': transaction_id,
+            'ip_address': request.META['REMOTE_ADDR'],
+        })
 
         updated = Organization.objects.filter(
             id=organization.id,
@@ -170,6 +176,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         if updated:
             delete_organization.delay(
                 object_id=organization.id,
+                transaction_id=transaction_id,
                 countdown=86400,
             )
 
@@ -179,6 +186,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
                 target_object=organization.id,
                 event=AuditLogEntryEvent.ORG_REMOVE,
                 data=organization.get_audit_log_data(),
+                transaction_id=transaction_id,
             )
 
         return Response(status=204)
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 691e68064a..1b5f76bfac 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -21,7 +21,7 @@ logger = logging.getLogger('sentry.deletions')
 @instrumented_task(name='sentry.tasks.deletion.delete_organization', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry(exclude=(DeleteAborted,))
-def delete_organization(object_id, continuous=True, **kwargs):
+def delete_organization(object_id, transaction_id=None, continuous=True, **kwargs):
     from sentry.models import (
         Organization, OrganizationMember, OrganizationStatus, Team, TeamStatus
     )
@@ -39,19 +39,23 @@ def delete_organization(object_id, continuous=True, **kwargs):
         pending_delete.send(sender=Organization, instance=o)
 
     for team in Team.objects.filter(organization=o).exclude(status=TeamStatus.DELETION_IN_PROGRESS).order_by('id')[:1]:
-        logger.info('remove.team', extra={'team_id': team.id, 'organization_id': o.id})
+        logger.info('remove.team', extra={
+            'team_id': team.id,
+            'organization_id': o.id,
+            'transaction_id': transaction_id,
+        })
         team.update(status=TeamStatus.DELETION_IN_PROGRESS)
-        delete_team(team.id, continuous=False)
+        delete_team(team.id, transaction_id=transaction_id, continuous=False)
         if continuous:
-            delete_organization.delay(object_id=object_id, countdown=15)
+            delete_organization.delay(object_id=object_id, transaction_id=transaction_id, countdown=15)
         return
 
     model_list = (OrganizationMember,)
 
-    has_more = delete_objects(model_list, relation={'organization': o}, logger=logger)
+    has_more = delete_objects(model_list, transaction_id=transaction_id, relation={'organization': o}, logger=logger)
     if has_more:
         if continuous:
-            delete_organization.delay(object_id=object_id, countdown=15)
+            delete_organization.delay(object_id=object_id, transaction_id=transaction_id, countdown=15)
         return
     o.delete()
 
@@ -59,7 +63,7 @@ def delete_organization(object_id, continuous=True, **kwargs):
 @instrumented_task(name='sentry.tasks.deletion.delete_team', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry(exclude=(DeleteAborted,))
-def delete_team(object_id, continuous=True, **kwargs):
+def delete_team(object_id, transaction_id=None, continuous=True, **kwargs):
     from sentry.models import Team, TeamStatus, Project, ProjectStatus
 
     try:
@@ -76,11 +80,15 @@ def delete_team(object_id, continuous=True, **kwargs):
 
     # Delete 1 project at a time since this is expensive by itself
     for project in Project.objects.filter(team=t).exclude(status=ProjectStatus.DELETION_IN_PROGRESS).order_by('id')[:1]:
-        logger.info('remove.project', extra={'project_id': project.id, 'team_id': t.id})
+        logger.info('remove.project', extra={
+            'project_id': project.id,
+            'team_id': t.id,
+            'transaction_id': transaction_id,
+        })
         project.update(status=ProjectStatus.DELETION_IN_PROGRESS)
-        delete_project(project.id, continuous=False)
+        delete_project(project.id, transaction_id=transaction_id, continuous=False)
         if continuous:
-            delete_team.delay(object_id=object_id, countdown=15)
+            delete_team.delay(object_id=object_id, transaction_id=transaction_id, countdown=15)
         return
 
     t.delete()
@@ -89,7 +97,7 @@ def delete_team(object_id, continuous=True, **kwargs):
 @instrumented_task(name='sentry.tasks.deletion.delete_project', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry(exclude=(DeleteAborted,))
-def delete_project(object_id, continuous=True, **kwargs):
+def delete_project(object_id, transaction_id=None, continuous=True, **kwargs):
     from sentry.models import (
         Activity, EventMapping, EventUser, Group, GroupAssignee, GroupBookmark,
         GroupEmailThread, GroupHash, GroupMeta, GroupRelease, GroupResolution,
@@ -122,36 +130,37 @@ def delete_project(object_id, continuous=True, **kwargs):
         UserReport, ReleaseEnvironment, Environment
     )
     for model in model_list:
-        has_more = bulk_delete_objects(model, project_id=p.id, logger=logger)
+        has_more = bulk_delete_objects(model, project_id=p.id, transaction_id=transaction_id, logger=logger)
         if has_more:
             if continuous:
-                delete_project.delay(object_id=object_id, countdown=15)
+                delete_project.delay(object_id=object_id, transaction_id=transaction_id, countdown=15)
             return
 
     # TODO(dcramer): no project relation so we cant easily bulk
     # delete today
     has_more = delete_objects([GroupMeta, GroupResolution, GroupSnooze],
                               relation={'group__project': p},
+                              transaction_id=transaction_id,
                               logger=logger)
     if has_more:
         if continuous:
-            delete_project.delay(object_id=object_id, countdown=15)
+            delete_project.delay(object_id=object_id, transaction_id=transaction_id, countdown=15)
         return
 
-    has_more = delete_events(relation={'project_id': p.id}, logger=logger)
+    has_more = delete_events(relation={'project_id': p.id}, transaction_id=transaction_id, logger=logger)
     if has_more:
         if continuous:
-            delete_project.delay(object_id=object_id, countdown=15)
+            delete_project.delay(object_id=object_id, transaction_id=transaction_id, countdown=15)
         return
 
     # Release needs to handle deletes after Group is cleaned up as the foreign
     # key is protected
     model_list = (Group, ReleaseFile, Release)
     for model in model_list:
-        has_more = bulk_delete_objects(model, project_id=p.id, logger=logger)
+        has_more = bulk_delete_objects(model, project_id=p.id, transaction_id=transaction_id, logger=logger)
         if has_more:
             if continuous:
-                delete_project.delay(object_id=object_id, countdown=15)
+                delete_project.delay(object_id=object_id, transaction_id=transaction_id, countdown=15)
             return
 
     p.delete()
@@ -160,7 +169,7 @@ def delete_project(object_id, continuous=True, **kwargs):
 @instrumented_task(name='sentry.tasks.deletion.delete_group', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry(exclude=(DeleteAborted,))
-def delete_group(object_id, continuous=True, **kwargs):
+def delete_group(object_id, transaction_id=None, continuous=True, **kwargs):
     from sentry.models import (
         EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash, GroupMeta,
         GroupRelease, GroupResolution, GroupRuleStatus, GroupSnooze,
@@ -201,7 +210,7 @@ def delete_group(object_id, continuous=True, **kwargs):
 @instrumented_task(name='sentry.tasks.deletion.delete_tag_key', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry(exclude=(DeleteAborted,))
-def delete_tag_key(object_id, continuous=True, **kwargs):
+def delete_tag_key(object_id, transaction_id=None, continuous=True, **kwargs):
     from sentry.models import (
         EventTag, GroupTagKey, GroupTagValue, TagKey, TagKeyStatus, TagValue
     )
@@ -235,13 +244,15 @@ def delete_tag_key(object_id, continuous=True, **kwargs):
     tagkey.delete()
 
 
-def delete_events(relation, limit=100, logger=None):
+def delete_events(relation, transaction_id=None, limit=100, logger=None):
     from sentry.app import nodestore
     from sentry.models import Event, EventTag
 
     has_more = False
     if logger is not None:
-        logger.info('remove.event', extra=relation)
+        logger.info('remove.event', extra=dict(
+            relation.items() + [('transaction_id', transaction_id)],
+        ))
 
     result_set = list(Event.objects.filter(**relation)[:limit])
     has_more = bool(result_set)
@@ -259,12 +270,14 @@ def delete_events(relation, limit=100, logger=None):
     return has_more
 
 
-def delete_objects(models, relation, limit=100, logger=None):
+def delete_objects(models, relation, transaction_id=None, limit=100, logger=None):
     # This handles cascades properly
     has_more = False
     for model in models:
         if logger is not None:
-            logger.info('remove.%s' % model.__name__.lower(), extra=relation)
+            logger.info('remove.%s' % model.__name__.lower(), extra=dict(
+                relation.items() + [('transaction_id', transaction_id)],
+            ))
         for obj in model.objects.filter(**relation)[:limit]:
             obj.delete()
             has_more = True
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index a2dbb964ad..222882e86f 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -266,7 +266,7 @@ def merge_into(self, other, callback=lambda x: x, using='default'):
                 post_save.send(created=True, **signal_kwargs)
 
 
-def bulk_delete_objects(model, limit=10000, logger=None, **filters):
+def bulk_delete_objects(model, limit=10000, transaction_id=None, logger=None, **filters):
     connection = connections[router.db_for_write(model)]
     quote_name = connection.ops.quote_name
 
@@ -277,7 +277,10 @@ def bulk_delete_objects(model, limit=10000, logger=None, **filters):
         params.append(value)
 
     if logger is not None:
-        logger.info('remove.%s' % model.__name__.lower(), extra={column: value})
+        logger.info('remove.%s' % model.__name__.lower(), extra={
+            column: value,
+            'transaction_id': transaction_id,
+        })
 
     if db.is_postgres():
         query = """
diff --git a/src/sentry/web/frontend/remove_organization.py b/src/sentry/web/frontend/remove_organization.py
index b5d8d6eda8..b8a8fe7bd7 100644
--- a/src/sentry/web/frontend/remove_organization.py
+++ b/src/sentry/web/frontend/remove_organization.py
@@ -1,11 +1,14 @@
 from __future__ import absolute_import
 
+import logging
+from uuid import uuid4
+
 from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationStatus
+from sentry.models import OrganizationStatus, Organization
 from sentry.tasks.deletion import delete_organization
 from sentry.web.frontend.base import OrganizationView
 
@@ -36,12 +39,27 @@ class RemoveOrganizationView(OrganizationView):
 
         form = self.get_form(request, organization)
         if form.is_valid():
-            if organization.status != OrganizationStatus.PENDING_DELETION:
-                organization.update(status=OrganizationStatus.PENDING_DELETION)
-
-                delete_organization.apply_async(kwargs={
-                    'object_id': organization.id,
-                }, countdown=60 * 5)
+            transaction_id = uuid4().hex
+            logging.getLogger('sentry.deletions').info('remove.organization', extra={
+                'organization_id': organization.id,
+                'organization_slug': organization.slug,
+                'actor_id': request.user.id,
+                'transaction_id': transaction_id,
+                'ip_address': request.META['REMOTE_ADDR'],
+            })
+
+            updated = Organization.objects.filter(
+                id=organization.id,
+                status=OrganizationStatus.VISIBLE,
+            ).update(status=OrganizationStatus.PENDING_DELETION)
+            if updated:
+                delete_organization.apply_async(
+                    kwargs={
+                        'object_id': organization.id,
+                        'transaction_id': transaction_id,
+                    },
+                    countdown=86400,
+                )
 
             messages.add_message(request, messages.SUCCESS,
                 MSG_REMOVE_SUCCESS % (organization.name,))
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 62001a9de0..ea3efef58f 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -65,8 +65,14 @@ class OrganizationUpdateTest(APITestCase):
 
 
 class OrganizationDeleteTest(APITestCase):
+    @patch('sentry.api.endpoints.organization_details.uuid4')
     @patch('sentry.api.endpoints.organization_details.delete_organization')
-    def test_can_remove_as_owner(self, mock_delete_organization):
+    def test_can_remove_as_owner(self, mock_delete_organization, mock_uuid4):
+        class uuid(object):
+            hex = 'abc123'
+
+        mock_uuid4.return_value = uuid
+
         org = self.create_organization()
 
         user = self.create_user(email='foo@example.com', is_superuser=False)
@@ -93,6 +99,7 @@ class OrganizationDeleteTest(APITestCase):
 
         mock_delete_organization.delay.assert_called_once_with(
             object_id=org.id,
+            transaction_id='abc123',
             countdown=86400,
         )
 
