commit f3b84a88f7944a15d2ecee0a1c1d01e59601d0e5
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Nov 30 02:15:09 2015 -0800

    Refactor `sentry` cli tooling to use Click
    
    * rm -rf logan
    * Support for loading config.yml files
    * Replace all of the builtin Django commands by Click commands
    * Hide django subcommands under `sentry django`
    * `sentry init` now should be pointed at a directory

diff --git a/Makefile b/Makefile
index 3a61362026..a3f43d6c31 100644
--- a/Makefile
+++ b/Makefile
@@ -84,9 +84,9 @@ test-cli:
 	@echo "--> Testing CLI"
 	rm -rf test_cli
 	mkdir test_cli
-	cd test_cli && sentry init test.conf > /dev/null
-	cd test_cli && sentry --config=test.conf upgrade --traceback --noinput > /dev/null
-	cd test_cli && sentry --config=test.conf help 2>&1 | grep start > /dev/null
+	cd test_cli && sentry init test_conf > /dev/null
+	cd test_cli && sentry --config=test_conf upgrade --traceback --noinput > /dev/null
+	cd test_cli && sentry --config=test_conf help 2>&1 | grep start > /dev/null
 	rm -r test_cli
 	@echo ""
 
diff --git a/bin/load-mocks b/bin/load-mocks
index 8baaedfd51..8d201cac68 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -229,7 +229,7 @@ def main(num_events=1):
                     release=release.version,
                 )
 
-                event5 = create_sample_event(
+                create_sample_event(
                     project=project,
                     platform='php',
                     release=release.version,
diff --git a/setup.py b/setup.py
index 202243b323..f27a29a406 100755
--- a/setup.py
+++ b/setup.py
@@ -64,7 +64,6 @@ IS_LIGHT_BUILD = os.environ.get('SENTRY_LIGHT_BUILD') == '1'
 
 dev_requires = [
     'flake8>=2.0,<2.1',
-    'click',
     'Babel',
 ]
 
@@ -84,6 +83,7 @@ tests_require = [
 install_requires = [
     'BeautifulSoup>=3.2.1,<3.3.0',
     'celery>=3.1.8,<3.1.19',
+    'click>=5.0,<7.0',
     'cssutils>=0.9.9,<0.10.0',
     'Django>=1.6.0,<1.7',
     'django-bitfield>=1.7.0,<1.8.0',
@@ -104,7 +104,6 @@ install_requires = [
     'hiredis>=0.1.0,<0.2.0',
     'ipaddr>=2.1.11,<2.2.0',
     'kombu<3.0.27',  # 3.0.27 breaks Django 1.6.x compatibility
-    'logan>=0.7.1,<0.8.0',
     'lxml>=3.4.1',
     'mock>=0.8.0,<1.1',
     'petname>=1.7,<1.8',
@@ -414,7 +413,7 @@ setup(
     include_package_data=True,
     entry_points={
         'console_scripts': [
-            'sentry = sentry.utils.runner:main',
+            'sentry = sentry.runner:main',
         ],
         'flake8.extension': [
         ],
diff --git a/src/sentry/__main__.py b/src/sentry/__main__.py
new file mode 100644
index 0000000000..418225eb78
--- /dev/null
+++ b/src/sentry/__main__.py
@@ -0,0 +1,10 @@
+"""
+sentry
+~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from .runner import main
+main()
diff --git a/src/sentry/celery.py b/src/sentry/celery.py
index 2bcdb65591..9512c5a1fd 100644
--- a/src/sentry/celery.py
+++ b/src/sentry/celery.py
@@ -8,11 +8,10 @@ import sys
 # Add the project to the python path
 sys.path.insert(0, os.path.join(os.path.dirname(__file__), os.pardir))
 
-# Configure the application (Logan) only if it seemingly isnt already
-# configured
+# Configure the application only if it seemingly isnt already configured
 from django.conf import settings
 if not settings.configured:
-    from sentry.utils.runner import configure
+    from sentry.runner import configure
     configure()
 
 
diff --git a/src/sentry/management/commands/cleanup.py b/src/sentry/management/commands/cleanup.py
deleted file mode 100644
index ab5f3ed3db..0000000000
--- a/src/sentry/management/commands/cleanup.py
+++ /dev/null
@@ -1,99 +0,0 @@
-"""
-sentry.management.commands.cleanup
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import, print_function
-
-from datetime import timedelta
-from django.core.management.base import BaseCommand
-from django.utils import timezone
-from optparse import make_option
-
-from sentry.app import nodestore
-from sentry.db.deletion import BulkDeleteQuery
-from sentry.models import (
-    Event, EventMapping, Group, GroupRuleStatus, GroupTagValue,
-    LostPasswordHash, TagValue, GroupEmailThread,
-)
-
-
-class Command(BaseCommand):
-    help = 'Deletes a portion of trailing data based on creation date'
-
-    option_list = BaseCommand.option_list + (
-        make_option('--days', default='30', type=int, help='Numbers of days to truncate on.'),
-        make_option('--project', type=int, help='Limit truncation to only entries from project.'),
-        make_option('--concurrency', type=int, default=1, help='The number of concurrent workers to run.'),
-    )
-
-    # these models should be safe to delete without cascades, in order
-    BULK_DELETES = (
-        (GroupRuleStatus, 'date_added'),
-        (GroupTagValue, 'last_seen'),
-        (TagValue, 'last_seen'),
-        (GroupEmailThread, 'date'),
-    )
-
-    GENERIC_DELETES = (
-        (Event, 'datetime'),
-        (Group, 'last_seen'),
-    )
-
-    def handle(self, **options):
-        self.days = options['days']
-        self.concurrency = options['concurrency']
-        self.project = options['project']
-
-        self.stdout.write("Removing expired values for LostPasswordHash\n")
-        LostPasswordHash.objects.filter(
-            date_added__lte=timezone.now() - timedelta(hours=48)
-        ).delete()
-
-        if self.project:
-            self.stderr.write("Bulk NodeStore deletion not available for project selection\n")
-        else:
-            self.stdout.write("Removing old NodeStore values\n")
-            cutoff = timezone.now() - timedelta(days=self.days)
-            try:
-                nodestore.cleanup(cutoff)
-            except NotImplementedError:
-                self.stderr.write("NodeStore backend does not support cleanup operation\n")
-
-        for model, dtfield in self.BULK_DELETES:
-            self.stdout.write("Removing {model} for days={days} project={project}\n".format(
-                model=model.__name__,
-                days=self.days,
-                project=self.project or '*',
-            ))
-            BulkDeleteQuery(
-                model=model,
-                dtfield=dtfield,
-                days=self.days,
-                project_id=self.project,
-            ).execute()
-
-        # EventMapping is fairly expensive and is special cased as it's likely you
-        # won't need a reference to an event for nearly as long
-        self.stdout.write("Removing expired values for EventMapping\n")
-        BulkDeleteQuery(
-            model=EventMapping,
-            dtfield='date_added',
-            days=min(self.days, 7),
-            project_id=self.project,
-        ).execute()
-
-        for model, dtfield in self.GENERIC_DELETES:
-            self.stdout.write("Removing {model} for days={days} project={project}\n".format(
-                model=model.__name__,
-                days=self.days,
-                project=self.project or '*',
-            ))
-            BulkDeleteQuery(
-                model=model,
-                dtfield=dtfield,
-                days=self.days,
-                project_id=self.project,
-            ).execute_generic()
diff --git a/src/sentry/management/commands/createuser.py b/src/sentry/management/commands/createuser.py
deleted file mode 100644
index 9892f90efc..0000000000
--- a/src/sentry/management/commands/createuser.py
+++ /dev/null
@@ -1,109 +0,0 @@
-"""
-sentry.management.commands.createuser
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-import getpass
-import sys
-
-from django.conf import settings
-from django.core.exceptions import ValidationError
-from django.core.management.base import BaseCommand, CommandError, make_option
-
-from sentry import roles
-from sentry.models import Organization, OrganizationMember, User
-
-
-class Command(BaseCommand):
-    help = 'Creates a new user'
-
-    option_list = BaseCommand.option_list + (
-        make_option('--email', dest='email'),
-        make_option('--superuser', dest='is_superuser', action='store_true', default=None),
-        make_option('--password', dest='password', default=None),
-        make_option('--no-superuser', dest='is_superuser', action='store_false', default=None),
-        make_option('--no-password', dest='nopassword', action='store_true', default=False),
-        make_option('--no-input', dest='noinput', action='store_true', default=False),
-    )
-
-    def _get_field(self, field_name):
-        return User._meta.get_field(field_name)
-
-    def get_email(self):
-        raw_value = raw_input('Email: ')
-        if not raw_value:
-            raise CommandError('Invalid email address: This field cannot be blank')
-
-        field = self._get_field('email')
-        try:
-            return field.clean(raw_value, None)
-        except ValidationError as e:
-            raise CommandError('Invalid email address: %s' % '; '.join(e.messages))
-
-    def get_password(self):
-        raw_value = getpass.getpass()
-
-        field = self._get_field('password')
-        try:
-            return field.clean(raw_value, None)
-        except ValidationError as e:
-            raise CommandError('Invalid password: %s' % '; '.join(e.messages))
-
-    def get_superuser(self):
-        if raw_input('Should this user be a superuser? [yN] ').lower() == 'y':
-            return True
-        return False
-
-    def handle(self, **options):
-        email = options['email']
-        is_superuser = options['is_superuser']
-        password = options['password']
-
-        if not options['noinput']:
-            try:
-                if not email:
-                    email = self.get_email()
-
-                if not (password or options['nopassword']):
-                    password = self.get_password()
-
-                if is_superuser is None:
-                    is_superuser = self.get_superuser()
-            except KeyboardInterrupt:
-                self.stderr.write("\nOperation cancelled.")
-                sys.exit(1)
-
-        if not email:
-            raise CommandError('Invalid or missing email address')
-
-        if not options['nopassword'] and not password:
-            raise CommandError('No password set and --no-password not passed')
-
-        user = User(
-            email=email,
-            username=email,
-            is_superuser=is_superuser,
-            is_staff=is_superuser,
-            is_active=True,
-        )
-
-        if password:
-            user.set_password(password)
-
-        user.save()
-
-        self.stdout.write('User created: %s' % (email,))
-
-        # TODO(dcramer): kill this when we improve flows
-        if settings.SENTRY_SINGLE_ORGANIZATION:
-            org = Organization.get_default()
-            OrganizationMember.objects.create(
-                organization=org,
-                user=user,
-                role=roles.get_top_dog().id,
-            )
-            self.stdout.write('Added to organization: %s' % (org.slug,))
diff --git a/src/sentry/management/commands/import.py b/src/sentry/management/commands/import.py
deleted file mode 100644
index 923e53f8b9..0000000000
--- a/src/sentry/management/commands/import.py
+++ /dev/null
@@ -1,23 +0,0 @@
-from __future__ import absolute_import, print_function
-
-import sys
-
-from django.core import serializers
-from django.core.management.base import BaseCommand
-
-
-class Command(BaseCommand):
-    help = 'Imports data from a Sentry export.'
-
-    def handle(self, src=None, **options):
-        if not src:
-            sys.stderr.write('Usage: sentry import [src]')
-            sys.exit(1)
-
-        if src == '-':
-            src = sys.stdin
-        else:
-            src = open(src, 'rb')
-
-        for obj in serializers.deserialize("json", src, stream=True, use_natural_keys=True):
-            obj.save()
diff --git a/src/sentry/management/commands/repair.py b/src/sentry/management/commands/repair.py
deleted file mode 100644
index 4164c3b5bf..0000000000
--- a/src/sentry/management/commands/repair.py
+++ /dev/null
@@ -1,40 +0,0 @@
-"""
-sentry.management.commands.repair
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import, print_function
-
-from django.core.management.base import BaseCommand
-from django.db import connection
-
-
-class Command(BaseCommand):
-    help = 'Attempts to repair any invalid data within Sentry'
-
-    def handle(self, **options):
-        print("Forcing documentation sync")
-        from sentry.tasks.sync_docs import sync_docs
-        sync_docs()
-
-        from sentry.models import Activity, Project, ProjectKey
-        print("Creating missing project keys")
-        queryset = Project.objects.filter(key_set__isnull=True)
-        for project in queryset:
-            try:
-                ProjectKey.objects.get_or_create(
-                    project=project,
-                )
-            except ProjectKey.MultipleObjectsReturned:
-                pass
-
-        print("Correcting Group.num_comments counter")
-        cursor = connection.cursor()
-        cursor.execute("""
-            UPDATE sentry_groupedmessage SET num_comments = (
-                SELECT COUNT(*) from sentry_activity
-                WHERE type = %s and group_id = sentry_groupedmessage.id
-            )
-        """, [Activity.NOTE])
diff --git a/src/sentry/management/commands/start.py b/src/sentry/management/commands/start.py
deleted file mode 100644
index 254f37491f..0000000000
--- a/src/sentry/management/commands/start.py
+++ /dev/null
@@ -1,90 +0,0 @@
-"""
-sentry.management.commands.start
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import, print_function
-
-import sys
-
-from django.core.management import call_command
-from django.core.management.base import BaseCommand, CommandError
-from optparse import make_option
-
-
-class Command(BaseCommand):
-    args = '<service>'
-    help = 'Starts the specified service'
-
-    option_list = BaseCommand.option_list + (
-        make_option('--debug',
-            action='store_true',
-            dest='debug',
-            default=False),
-        make_option('--noupgrade',
-            action='store_false',
-            dest='upgrade',
-            default=False),
-        make_option('--upgrade',
-            action='store_true',
-            dest='upgrade',
-            default=False),
-        make_option('--workers', '-w',
-            dest='workers',
-            type=int,
-            default=None),
-        make_option('--noinput',
-            action='store_true',
-            dest='noinput',
-            default=False,
-            help='Tells Django to NOT prompt the user for input of any kind.',
-        ),
-    )
-
-    def handle(self, service_name='http', address=None, upgrade=True, **options):
-        from sentry.services import http, smtp
-
-        if address:
-            if ':' in address:
-                host, port = address.split(':', 1)
-                port = int(port)
-            else:
-                host = address
-                port = None
-        else:
-            host, port = None, None
-
-        services = {
-            'http': http.SentryHTTPServer,
-            'smtp': smtp.SentrySMTPServer,
-        }
-
-        if service_name == 'worker':
-            raise CommandError('The ``worker`` service has been replaced with ``celeryd``.')
-
-        if upgrade:
-            # Ensure we perform an upgrade before starting any service
-            print("Performing upgrade before service startup...")
-            call_command('upgrade', verbosity=0, noinput=options.get('noinput'))
-
-        try:
-            service_class = services[service_name]
-        except KeyError:
-            raise CommandError('%r is not a valid service' % service_name)
-
-        service = service_class(
-            debug=options.get('debug'),
-            host=host,
-            port=port,
-            workers=options.get('workers'),
-        )
-
-        # remove command line arguments to avoid optparse failures with service code
-        # that calls call_command which reparses the command line, and if --noupgrade is supplied
-        # a parse error is thrown
-        sys.argv = sys.argv[:1]
-
-        print("Running service: %r" % service_name)
-        service.run()
diff --git a/src/sentry/management/commands/upgrade.py b/src/sentry/management/commands/upgrade.py
deleted file mode 100644
index 6ce37b51f5..0000000000
--- a/src/sentry/management/commands/upgrade.py
+++ /dev/null
@@ -1,50 +0,0 @@
-"""
-sentry.management.commands.upgrade
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import, print_function
-
-from django.core.management import call_command
-from django.core.management.base import BaseCommand
-
-from optparse import make_option
-
-
-class Command(BaseCommand):
-    help = 'Performs any pending database migrations and upgrades'
-
-    option_list = BaseCommand.option_list + (
-        make_option('--noinput',
-            action='store_true',
-            dest='noinput',
-            default=False,
-            help='Tells Django to NOT prompt the user for input of any kind.',
-        ),
-    )
-
-    def handle(self, **options):
-        call_command(
-            'syncdb',
-            interactive=(not options['noinput']),
-            traceback=options['traceback'],
-            verbosity=options['verbosity'],
-        )
-
-        call_command(
-            'migrate',
-            merge=True,
-            ignore_ghost_migrations=True,
-            interactive=(not options['noinput']),
-            traceback=options['traceback'],
-            verbosity=options['verbosity'],
-        )
-
-        call_command(
-            'repair',
-            interactive=(not options['noinput']),
-            traceback=options['traceback'],
-            verbosity=options['verbosity'],
-        )
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index 8f80aec2dd..6c7ede38ec 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -7,9 +7,10 @@ sentry.options
 """
 from __future__ import absolute_import, print_function
 
-from .manager import OptionsManager
+from .manager import OptionsManager, OptionsLoader
 
 default_manager = OptionsManager()
+default_loader = OptionsLoader(default_manager)
 
 # expose public API
 get = default_manager.get
diff --git a/src/sentry/runner/__init__.py b/src/sentry/runner/__init__.py
new file mode 100755
index 0000000000..3060bcb3b5
--- /dev/null
+++ b/src/sentry/runner/__init__.py
@@ -0,0 +1,120 @@
+"""
+sentry.runner
+~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import os
+import click
+
+
+@click.group()
+@click.option(
+    '--config',
+    default='~/.sentry',
+    envvar='SENTRY_CONF',
+    help='Path to configuration files.',
+    metavar='PATH')
+@click.version_option()
+@click.pass_context
+def cli(ctx, config):
+    "<3"
+    ctx.obj['config'] = config
+
+
+# TODO(mattrobenolt): Autodiscover commands?
+from .commands.init import init
+cli.add_command(init)
+
+from .commands.start import start
+cli.add_command(start)
+
+from .commands.help import help
+cli.add_command(help)
+
+from .commands.repair import repair
+cli.add_command(repair)
+
+from .commands.django import django
+cli.add_command(django)
+
+from .commands.cleanup import cleanup
+cli.add_command(cleanup)
+
+from .commands.upgrade import upgrade
+cli.add_command(upgrade)
+
+from .commands.backup import import_, export
+cli.add_command(import_)
+cli.add_command(export)
+
+from .commands.createuser import createuser
+cli.add_command(createuser)
+
+
+def make_django_command(name, django_command=None, help=None):
+    "A wrapper to convert a Django subcommand a Click command"
+    if django_command is None:
+        django_command = name
+
+    @click.command(
+        name=name,
+        help=help,
+        add_help_option=False,
+        context_settings=dict(
+            ignore_unknown_options=True,
+        ))
+    @click.argument('management_args', nargs=-1, type=click.UNPROCESSED)
+    @click.pass_context
+    def inner(ctx, management_args):
+        ctx.params['management_args'] = (django_command,) + management_args
+        ctx.forward(django)
+
+    return inner
+
+
+map(cli.add_command, (
+    make_django_command('devserver', 'runserver', help='Start a light Web server for development.'),
+    make_django_command('shell', help='Run a Python interactive interpreter.'),
+    make_django_command('celery'),
+))
+
+
+def configure():
+    """
+    Kick things off and configure all the things.
+
+    A guess is made as to whether the entrypoint is coming from Click
+    or from another invocation of `configure()`. If Click, we're able
+    to pass along the Click context object.
+    """
+    from .settings import discover_configs, configure
+    try:
+        ctx = click.get_current_context()
+    except RuntimeError:
+        ctx = None
+    _, py, yaml = discover_configs(ctx)
+    configure(ctx, py, yaml)
+
+
+def get_prog():
+    """
+    Extract the proper program executable.
+
+    In the case of `python -m sentry`, we want to detect this and
+    make sure we return something useful rather than __main__.py
+    """
+    import sys
+    try:
+        if os.path.basename(sys.argv[0]) in ('__main__.py', '-c'):
+            return '%s -m sentry' % sys.executable
+    except (AttributeError, TypeError, IndexError):
+        pass
+    return 'sentry'
+
+
+def main():
+    cli(prog_name=get_prog(), obj={}, max_content_width=100)
diff --git a/src/sentry/runner/commands/__init__.py b/src/sentry/runner/commands/__init__.py
new file mode 100644
index 0000000000..c83772c0c9
--- /dev/null
+++ b/src/sentry/runner/commands/__init__.py
@@ -0,0 +1,7 @@
+"""
+sentry.runner.commands
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
diff --git a/src/sentry/management/commands/export.py b/src/sentry/runner/commands/backup.py
similarity index 76%
rename from src/sentry/management/commands/export.py
rename to src/sentry/runner/commands/backup.py
index 99151bf043..bf731635b5 100644
--- a/src/sentry/management/commands/export.py
+++ b/src/sentry/runner/commands/backup.py
@@ -1,10 +1,25 @@
+"""
+sentry.runner.commands.backup
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
 from __future__ import absolute_import, print_function
 
-import sys
+import click
+from sentry.runner.decorators import configuration
+
+
+@click.command(name='import')
+@click.argument('src', type=click.File('rb'))
+@configuration
+def import_(src):
+    "Imports data from a Sentry export."
 
-from django.core import serializers
-from django.core.management.base import BaseCommand
-from django.db.models import get_apps
+    from django.core import serializers
+    for obj in serializers.deserialize("json", src, stream=True, use_natural_keys=True):
+        obj.save()
 
 
 def sort_dependencies(app_list):
@@ -86,36 +101,32 @@ def sort_dependencies(app_list):
     return model_list
 
 
-class Command(BaseCommand):
-    help = 'Exports core metadata for the Sentry installation.'
+@click.command()
+@click.argument('dest', default='-', type=click.File('wb'))
+@configuration
+def export(dest):
+    "Exports core metadata for the Sentry installation."
 
-    def yield_objects(self):
+    from django.db.models import get_apps
+    from django.core import serializers
+
+    def yield_objects():
         app_list = [(a, None) for a in get_apps()]
 
         # Collate the objects to be serialized.
         for model in sort_dependencies(app_list):
             if not getattr(model, '__core__', True):
-                sys.stderr.write(">> Skipping model <%s>\n" % (model.__name__,))
+                click.echo(">> Skipping model <%s>" % (model.__name__,), err=True)
                 continue
 
             if model._meta.proxy:
-                sys.stderr.write(">> Skipping model <%s>\n" % (model.__name__,))
+                click.echo(">> Skipping model <%s>\n" % (model.__name__,), err=True)
                 continue
 
             queryset = model._base_manager.order_by(model._meta.pk.name)
             for obj in queryset.iterator():
                 yield obj
 
-    def handle(self, dest=None, **options):
-        if not dest:
-            sys.stderr.write('Usage: sentry export [dest]')
-            sys.exit(1)
-
-        if dest == '-':
-            dest = sys.stdout
-        else:
-            dest = open(dest, 'wb')
-
-        sys.stderr.write('>> Beggining export\n')
-        serializers.serialize("json", self.yield_objects(), indent=2, stream=dest,
-                              use_natural_keys=True)
+    click.echo('>> Beggining export', err=True)
+    serializers.serialize("json", yield_objects(), indent=2, stream=dest,
+                          use_natural_keys=True)
diff --git a/src/sentry/runner/commands/cleanup.py b/src/sentry/runner/commands/cleanup.py
new file mode 100644
index 0000000000..25722ac70c
--- /dev/null
+++ b/src/sentry/runner/commands/cleanup.py
@@ -0,0 +1,94 @@
+"""
+sentry.runner.commands.cleanup
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import click
+from sentry.runner.decorators import configuration
+
+
+@click.command()
+@click.option('--days', default=30, type=int, show_default=True, help='Numbers of days to truncate on.')
+@click.option('--project', type=int, help='Limit truncation to only entries from project.')
+@click.option('--concurrency', type=int, default=1, show_default=True, help='The number of concurrent workers to run.')
+@configuration
+def cleanup(days, project, concurrency):
+    "Delete a portion of trailing data based on creation date."
+
+    from datetime import timedelta
+    from django.utils import timezone
+
+    from sentry.app import nodestore
+    from sentry.db.deletion import BulkDeleteQuery
+    from sentry.models import (
+        Event, EventMapping, Group, GroupRuleStatus, GroupTagValue,
+        LostPasswordHash, TagValue, GroupEmailThread,
+    )
+
+    # these models should be safe to delete without cascades, in order
+    BULK_DELETES = (
+        (GroupRuleStatus, 'date_added'),
+        (GroupTagValue, 'last_seen'),
+        (TagValue, 'last_seen'),
+        (GroupEmailThread, 'date'),
+    )
+
+    GENERIC_DELETES = (
+        (Event, 'datetime'),
+        (Group, 'last_seen'),
+    )
+
+    click.echo("Removing expired values for LostPasswordHash")
+    LostPasswordHash.objects.filter(
+        date_added__lte=timezone.now() - timedelta(hours=48)
+    ).delete()
+
+    if project:
+        click.echo("Bulk NodeStore deletion not available for project selection", err=True)
+    else:
+        click.echo("Removing old NodeStore values")
+        cutoff = timezone.now() - timedelta(days=days)
+        try:
+            nodestore.cleanup(cutoff)
+        except NotImplementedError:
+            click.echo("NodeStore backend does not support cleanup operation", err=True)
+
+    for model, dtfield in BULK_DELETES:
+        click.echo("Removing {model} for days={days} project={project}".format(
+            model=model.__name__,
+            days=days,
+            project=project or '*',
+        ))
+        BulkDeleteQuery(
+            model=model,
+            dtfield=dtfield,
+            days=days,
+            project_id=project,
+        ).execute()
+
+    # EventMapping is fairly expensive and is special cased as it's likely you
+    # won't need a reference to an event for nearly as long
+    click.echo("Removing expired values for EventMapping")
+    BulkDeleteQuery(
+        model=EventMapping,
+        dtfield='date_added',
+        days=min(days, 7),
+        project_id=project,
+    ).execute()
+
+    for model, dtfield in GENERIC_DELETES:
+        click.echo("Removing {model} for days={days} project={project}".format(
+            model=model.__name__,
+            days=days,
+            project=project or '*',
+        ))
+        BulkDeleteQuery(
+            model=model,
+            dtfield=dtfield,
+            days=days,
+            project_id=project,
+        ).execute_generic()
diff --git a/src/sentry/runner/commands/createuser.py b/src/sentry/runner/commands/createuser.py
new file mode 100644
index 0000000000..a346792c14
--- /dev/null
+++ b/src/sentry/runner/commands/createuser.py
@@ -0,0 +1,96 @@
+"""
+sentry.runner.commands.createuser
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import click
+from sentry.runner.decorators import configuration
+
+
+def _get_field(field_name):
+    from sentry.models import User
+    return User._meta.get_field(field_name)
+
+
+def _get_email():
+    from django.core.exceptions import ValidationError
+    rv = click.prompt('Email')
+    field = _get_field('email')
+    try:
+        return field.clean(rv, None)
+    except ValidationError as e:
+        raise click.ClickException('; '.join(e.messages))
+
+
+def _get_password():
+    from django.core.exceptions import ValidationError
+    rv = click.prompt('Password', hide_input=True, confirmation_prompt=True)
+    field = _get_field('password')
+    try:
+        return field.clean(rv, None)
+    except ValidationError as e:
+        raise click.ClickException('; '.join(e.messages))
+
+
+def _get_superuser():
+    return click.confirm('Should this user be a superuser?', default=False)
+
+
+@click.command()
+@click.option('--email')
+@click.option('--password')
+@click.option('--superuser/--no-superuser', default=None, is_flag=True)
+@click.option('--no-password', default=False, is_flag=True)
+@click.option('--no-input', default=False, is_flag=True)
+@configuration
+def createuser(email, password, superuser, no_password, no_input):
+    "Create a new user."
+    if not no_input:
+        if not email:
+            email = _get_email()
+
+        if not (password or no_password):
+            password = _get_password()
+            click.echo(password)
+
+        if superuser is None:
+            superuser = _get_superuser()
+
+    if not email:
+        raise click.ClickException('Invalid or missing email address.')
+
+    if not no_password and not password:
+        raise click.ClickException('No password set and --no-password not passed.')
+
+    from sentry import roles
+    from sentry.models import Organization, OrganizationMember, User
+    from django.conf import settings
+
+    user = User(
+        email=email,
+        username=email,
+        is_superuser=superuser,
+        is_staff=superuser,
+        is_active=True,
+    )
+
+    if password:
+        user.set_password(password)
+
+    user.save()
+
+    click.echo('User created: %s' % (email,))
+
+    # TODO(dcramer): kill this when we improve flows
+    if settings.SENTRY_SINGLE_ORGANIZATION:
+        org = Organization.get_default()
+        OrganizationMember.objects.create(
+            organization=org,
+            user=user,
+            role=roles.get_top_dog().id,
+        )
+        click.echo('Added to organization: %s' % (org.slug,))
diff --git a/src/sentry/runner/commands/django.py b/src/sentry/runner/commands/django.py
new file mode 100644
index 0000000000..3e70749ba3
--- /dev/null
+++ b/src/sentry/runner/commands/django.py
@@ -0,0 +1,23 @@
+"""
+sentry.runner.commands.django
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import click
+from sentry.runner.decorators import configuration
+
+
+@click.command(add_help_option=False, context_settings=dict(
+    ignore_unknown_options=True,
+))
+@click.argument('management_args', nargs=-1, type=click.UNPROCESSED)
+@configuration
+@click.pass_context
+def django(ctx, management_args):
+    "Execute Django subcommands."
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(argv=[ctx.command_path] + list(management_args))
diff --git a/src/sentry/runner/commands/help.py b/src/sentry/runner/commands/help.py
new file mode 100644
index 0000000000..6fb664c946
--- /dev/null
+++ b/src/sentry/runner/commands/help.py
@@ -0,0 +1,17 @@
+"""
+sentry.runner.commands.help
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import click
+
+
+@click.command()
+@click.pass_context
+def help(ctx):
+    "Show this message and exit."
+    click.echo(ctx.parent.get_help())
diff --git a/src/sentry/runner/commands/init.py b/src/sentry/runner/commands/init.py
new file mode 100644
index 0000000000..60efaff762
--- /dev/null
+++ b/src/sentry/runner/commands/init.py
@@ -0,0 +1,41 @@
+"""
+sentry.runner.commands.init
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import os
+import click
+
+
+@click.command()
+@click.argument('directory', required=False)
+@click.pass_context
+def init(ctx, directory):
+    "Generate a new configuration file."
+    from sentry.runner.settings import discover_configs, generate_settings
+    if directory is not None:
+        ctx.obj['config'] = directory
+
+    directory, py, yaml = discover_configs(ctx)
+
+    # In this case, the config is pointing directly to a file, so we
+    # must maintain old behavior, and just abort
+    if yaml is None and os.path.isfile(py):
+        # TODO: Link to docs explaining about new behavior of SENTRY_CONF?
+        raise click.ClickException("Found legacy '%s' file, so aborting." % click.format_filename(py))
+
+    if yaml is None:
+        raise click.ClickException("DIRECTORY must not be a file.")
+
+    if os.path.isfile(yaml):
+        click.confirm("File already exists at '%s', overwrite?" % click.format_filename(yaml), abort=True)
+
+    if directory and not os.path.exists(directory):
+        os.makedirs(directory)
+
+    with click.open_file(yaml, 'wb') as fp:
+        fp.write(generate_settings())
diff --git a/src/sentry/runner/commands/repair.py b/src/sentry/runner/commands/repair.py
new file mode 100644
index 0000000000..cd4a60aaae
--- /dev/null
+++ b/src/sentry/runner/commands/repair.py
@@ -0,0 +1,42 @@
+"""
+sentry.runner.commands.repair
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import click
+from sentry.runner.decorators import configuration
+
+
+@click.command()
+@configuration
+def repair():
+    "Attempt to repair any invalid data."
+
+    click.echo('Forcing documentation sync')
+    from sentry.tasks.sync_docs import sync_docs
+    sync_docs()
+
+    from sentry.models import Activity, Project, ProjectKey
+    click.echo('Creating missing project keys')
+    queryset = Project.objects.filter(key_set__isnull=True)
+    for project in queryset:
+        try:
+            ProjectKey.objects.get_or_create(
+                project=project,
+            )
+        except ProjectKey.MultipleObjectsReturned:
+            pass
+
+    from django.db import connection
+    click.echo("Correcting Group.num_comments counter")
+    cursor = connection.cursor()
+    cursor.execute("""
+        UPDATE sentry_groupedmessage SET num_comments = (
+            SELECT COUNT(*) from sentry_activity
+            WHERE type = %s and group_id = sentry_groupedmessage.id
+        )
+    """, [Activity.NOTE])
diff --git a/src/sentry/runner/commands/start.py b/src/sentry/runner/commands/start.py
new file mode 100644
index 0000000000..2a12bd3725
--- /dev/null
+++ b/src/sentry/runner/commands/start.py
@@ -0,0 +1,58 @@
+"""
+sentry.runner.commands.start
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import click
+from sentry.runner.decorators import configuration
+
+SERVICES = {
+    'http': 'sentry.services.http.SentryHTTPServer',
+    'smtp': 'sentry.services.smtp.SentrySMTPServer',
+}
+
+
+@click.command()
+@click.option('--bind', '-b', default=None, help='Bind address.', metavar='ADDRESS')
+@click.option('--workers', '-w', default=3, show_default=True)
+@click.option('--upgrade', default=False, is_flag=True, help='Upgrade before starting.')
+@click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
+@click.option('--debug', default=False, is_flag=True)
+@click.argument('service', default='http', type=click.Choice(sorted(SERVICES.keys())))
+@configuration
+def start(service, bind, workers, debug, upgrade, noinput):
+    "Start running a service."
+    if bind:
+        if ':' in bind:
+            host, port = bind.split(':', 1)
+            port = int(port)
+        else:
+            host = bind
+            port = None
+    else:
+        host, port = None, None
+
+    if upgrade:
+        click.echo('Performing upgrade before service startup...')
+        from django.core.management import call_command
+        call_command('upgrade', verbosity=0, noinput=noinput)
+
+    click.echo('Running service: %r' % service)
+
+    # remove command line arguments to avoid optparse failures with service code
+    # that calls call_command which reparses the command line, and if --noupgrade is supplied
+    # a parse error is thrown
+    import sys
+    sys.argv = sys.argv[:1]
+
+    from sentry.utils.imports import import_string
+    import_string(SERVICES[service])(
+        debug=debug,
+        host=host,
+        port=port,
+        workers=workers,
+    ).run()
diff --git a/src/sentry/runner/commands/upgrade.py b/src/sentry/runner/commands/upgrade.py
new file mode 100644
index 0000000000..086fdca931
--- /dev/null
+++ b/src/sentry/runner/commands/upgrade.py
@@ -0,0 +1,41 @@
+"""
+sentry.runner.commands.upgrade
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import click
+from sentry.runner.decorators import configuration
+
+
+@click.command()
+@click.option('--verbosity', '-v', default=1, help='Verbosity level.')
+@click.option('--traceback', default=True, help='Raise on exception.')
+@click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
+@configuration
+@click.pass_context
+def upgrade(ctx, verbosity, traceback, noinput):
+    "Perform any pending database migrations and upgrades."
+
+    from django.core.management import call_command
+    call_command(
+        'syncdb',
+        interactive=not noinput,
+        traceback=traceback,
+        verbosity=verbosity,
+    )
+
+    call_command(
+        'migrate',
+        merge=True,
+        ignore_ghost_migrations=True,
+        interactive=not noinput,
+        traceback=traceback,
+        verbosity=verbosity,
+    )
+
+    from sentry.runner.commands.repair import repair
+    ctx.invoke(repair)
diff --git a/src/sentry/runner/decorators.py b/src/sentry/runner/decorators.py
new file mode 100644
index 0000000000..505333f4ac
--- /dev/null
+++ b/src/sentry/runner/decorators.py
@@ -0,0 +1,27 @@
+"""
+sentry.runner.decorators
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import os
+
+
+def configuration(f):
+    "Load and configure Sentry."
+    import click
+    from functools import update_wrapper
+
+    @click.pass_context
+    def inner(ctx, *args, **kwargs):
+        # HACK: We can't call `configure()` from within tests
+        # since we don't load config files from disk, so we
+        # need a way to bypass this initialization step
+        if os.environ.get('_SENTRY_SKIP_CONFIGURATION') != '1':
+            from sentry.runner import configure
+            configure()
+        return ctx.invoke(f, *args, **kwargs)
+    return update_wrapper(inner, f)
diff --git a/src/sentry/runner/importer.py b/src/sentry/runner/importer.py
new file mode 100644
index 0000000000..cc1405b534
--- /dev/null
+++ b/src/sentry/runner/importer.py
@@ -0,0 +1,141 @@
+"""
+sentry.runner.importer
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import sys
+
+
+def install(name, config_path, default_settings):
+    sys.meta_path.append(Importer(name, config_path, default_settings))
+
+
+class ConfigurationError(Exception):
+    pass
+
+
+class Importer(object):
+    def __init__(self, name, config_path, default_settings=None):
+        self.name = name
+        self.config_path = config_path
+        self.default_settings = default_settings
+
+    def __repr__(self):
+        return "<%s for '%s' (%s)>" % (type(self), self.name, self.config_path)
+
+    def validate(self):
+        # TODO(dcramer): is there a better way to handle validation so it
+        # is lazy and actually happens in LoganLoader?
+        try:
+            execfile(self.config_path, {
+                '__file__': self.config_path
+            })
+        except Exception as e:
+            exc_info = sys.exc_info()
+            raise ConfigurationError(unicode(e), exc_info[2])
+
+    def find_module(self, fullname, path=None):
+        if fullname != self.name:
+            return
+
+        return Loader(
+            name=self.name,
+            config_path=self.config_path,
+            default_settings=self.default_settings,
+        )
+
+
+class Loader(object):
+    def __init__(self, name, config_path, default_settings=None):
+        self.name = name
+        self.config_path = config_path
+        self.default_settings = default_settings
+
+    def load_module(self, fullname):
+        try:
+            return self._load_module(fullname)
+        except Exception as e:
+            exc_info = sys.exc_info()
+            raise ConfigurationError(unicode(e), exc_info[2])
+
+    def _load_module(self, fullname):
+        # TODO: is this needed?
+        if fullname in sys.modules:
+            return sys.modules[fullname]  # pragma: no cover
+
+        if self.default_settings:
+            from django.utils.importlib import import_module
+            default_settings_mod = import_module(self.default_settings)
+        else:
+            default_settings_mod = None
+
+        settings_mod = create_module(self.name)
+
+        # Django doesn't play too nice without the config file living as a real file, so let's fake it.
+        settings_mod.__file__ = self.config_path
+
+        # install the default settings for this app
+        load_settings(default_settings_mod, settings=settings_mod)
+
+        # install the custom settings for this app
+        load_settings(self.config_path, settings=settings_mod, silent=True)
+
+        return settings_mod
+
+
+def create_module(name, install=True):
+    import imp
+    mod = imp.new_module(name)
+    if install:
+        sys.modules[name] = mod
+    return mod
+
+
+def load_settings(mod_or_filename, settings, silent=False):
+    if isinstance(mod_or_filename, basestring):
+        conf = create_module('temp_config', install=False)
+        conf.__file__ = mod_or_filename
+        try:
+            execfile(mod_or_filename, conf.__dict__)
+        except IOError as e:
+            import errno
+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):
+                return settings
+            e.strerror = 'Unable to load configuration file (%s)' % e.strerror
+            raise
+    else:
+        conf = mod_or_filename
+
+    add_settings(conf, settings=settings)
+
+
+def add_settings(mod, settings):
+    """
+    Adds all settings that are part of ``mod`` to the global settings object.
+    Special cases ``EXTRA_APPS`` to append the specified applications to the
+    list of ``INSTALLED_APPS``.
+    """
+
+    for setting in dir(mod):
+        if not setting.isupper():
+            continue
+
+        setting_value = getattr(mod, setting)
+        if setting in ('INSTALLED_APPS', 'TEMPLATE_DIRS') and isinstance(setting_value, basestring):
+            setting_value = (setting_value,)  # In case the user forgot the comma.
+
+        # Any setting that starts with EXTRA_ and matches a setting that is a list or tuple
+        # will automatically append the values to the current setting.
+        # It might make sense to make this less magical
+        if setting[:6] == 'EXTRA_':
+            base_setting = setting[6:]
+            if isinstance(getattr(settings, base_setting), (list, tuple)):
+                curval = getattr(settings, base_setting)
+                setattr(settings, base_setting, curval + type(curval)(setting_value))
+                continue
+
+        setattr(settings, setting, setting_value)
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
new file mode 100644
index 0000000000..01f35b13a2
--- /dev/null
+++ b/src/sentry/runner/initializer.py
@@ -0,0 +1,222 @@
+"""
+sentry.runner.initializer
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import os
+import click
+
+
+def install_plugin_apps(settings):
+    # entry_points={
+    #    'sentry.apps': [
+    #         'phabricator = sentry_phabricator'
+    #     ],
+    # },
+    from pkg_resources import iter_entry_points
+    installed_apps = list(settings.INSTALLED_APPS)
+    for ep in iter_entry_points('sentry.apps'):
+        installed_apps.append(ep.module_name)
+    settings.INSTALLED_APPS = tuple(installed_apps)
+
+
+def register_plugins(settings):
+    from pkg_resources import iter_entry_points
+    from sentry.plugins import register
+    # entry_points={
+    #    'sentry.plugins': [
+    #         'phabricator = sentry_phabricator.plugins:PhabricatorPlugin'
+    #     ],
+    # },
+
+    for ep in iter_entry_points('sentry.plugins'):
+        try:
+            plugin = ep.load()
+        except Exception:
+            import traceback
+            click.echo("Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()), err=True)
+        else:
+            register(plugin)
+
+
+def initialize_receivers():
+    # force signal registration
+    import sentry.receivers  # NOQA
+
+
+def get_asset_version(settings):
+    path = os.path.join(settings.STATIC_ROOT, 'version')
+    try:
+        with open(path) as fp:
+            return fp.read().strip()
+    except IOError:
+        from time import time
+        return int(time())
+
+
+def initialize_app(config, skip_backend_validation=False):
+    settings = config['settings']
+
+    from sentry.options import default_loader
+    default_loader.load(config['options'])
+
+    fix_south(settings)
+
+    apply_legacy_settings(settings)
+
+    install_plugin_apps(settings)
+
+    # Commonly setups don't correctly configure themselves for production envs
+    # so lets try to provide a bit more guidance
+    if settings.CELERY_ALWAYS_EAGER and not settings.DEBUG:
+        import warnings
+        warnings.warn('Sentry is configured to run asynchronous tasks in-process. '
+                      'This is not recommended within production environments. '
+                      'See https://docs.getsentry.com/on-premise/server/queue/ for more information.')
+
+    if settings.SENTRY_SINGLE_ORGANIZATION:
+        settings.SENTRY_FEATURES['organizations:create'] = False
+
+    settings.SUDO_COOKIE_SECURE = getattr(settings, 'SESSION_COOKIE_SECURE', False)
+    settings.SUDO_COOKIE_DOMAIN = getattr(settings, 'SESSION_COOKIE_DOMAIN', None)
+    settings.SUDO_COOKIE_PATH = getattr(settings, 'SESSION_COOKIE_PATH', '/')
+
+    settings.CSRF_COOKIE_SECURE = getattr(settings, 'SESSION_COOKIE_SECURE', False)
+    settings.CSRF_COOKIE_DOMAIN = getattr(settings, 'SESSION_COOKIE_DOMAIN', None)
+    settings.CSRF_COOKIE_PATH = getattr(settings, 'SESSION_COOKIE_PATH', '/')
+
+    settings.CACHES['default']['VERSION'] = settings.CACHE_VERSION
+
+    settings.ASSET_VERSION = get_asset_version(settings)
+    settings.STATIC_URL = settings.STATIC_URL.format(
+        version=settings.ASSET_VERSION,
+    )
+
+    register_plugins(settings)
+
+    initialize_receivers()
+
+    if not skip_backend_validation:
+        validate_backends()
+
+    from django.utils import timezone
+    from sentry.app import env
+    env.data['config'] = config.get('config_path')
+    env.data['start_date'] = timezone.now()
+
+
+def validate_backends():
+    from sentry import app
+
+    backends = (
+        app.buffer,
+        app.digests,
+        app.nodestore,
+        app.quotas,
+        app.ratelimiter,
+        app.search,
+        app.tsdb,
+    )
+
+    for backend in backends:
+        backend.validate()
+
+
+def fix_south(settings):
+    # South needs an adapter defined conditionally
+    if settings.DATABASES['default']['ENGINE'] != 'sentry.db.postgres':
+        return
+
+    settings.SOUTH_DATABASE_ADAPTERS = {
+        'default': 'south.db.postgresql_psycopg2'
+    }
+
+
+def show_big_error(message):
+    click.echo('', err=True)
+    click.secho('!! %s !!' % ('!' * min(len(message), 80),), err=True, fg='red')
+    click.secho('!! %s !!' % message, err=True, fg='red')
+    click.secho('!! %s !!' % ('!' * min(len(message), 80),), err=True, fg='red')
+    click.echo('', err=True)
+
+
+def apply_legacy_settings(settings):
+    # SENTRY_USE_QUEUE used to determine if Celery was eager or not
+    if hasattr(settings, 'SENTRY_USE_QUEUE'):
+        import warnings
+        warnings.warn('SENTRY_USE_QUEUE is deprecated. Please use CELERY_ALWAYS_EAGER instead. '
+                      'See https://docs.getsentry.com/on-premise/server/queue/ for more information.', DeprecationWarning)
+        settings.CELERY_ALWAYS_EAGER = (not settings.SENTRY_USE_QUEUE)
+
+    if not settings.SENTRY_ADMIN_EMAIL:
+        show_big_error('SENTRY_ADMIN_EMAIL is not configured')
+    elif not isinstance(settings.SENTRY_ADMIN_EMAIL, basestring):
+        show_big_error('SENTRY_ADMIN_EMAIL must be a string')
+
+    if settings.SENTRY_URL_PREFIX in ('', 'http://sentry.example.com') and not settings.DEBUG:
+        # Maybe also point to a piece of documentation for more information?
+        # This directly coincides with users getting the awkward
+        # `ALLOWED_HOSTS` exception.
+        show_big_error('SENTRY_URL_PREFIX is not configured')
+        # Set `ALLOWED_HOSTS` to the catch-all so it works
+        settings.ALLOWED_HOSTS = ['*']
+
+    if settings.TIME_ZONE != 'UTC':
+        # non-UTC timezones are not supported
+        show_big_error('TIME_ZONE should be set to UTC')
+
+    # Set ALLOWED_HOSTS if it's not already available
+    if not settings.ALLOWED_HOSTS:
+        from urlparse import urlparse
+        urlbits = urlparse(settings.SENTRY_URL_PREFIX)
+        if urlbits.hostname:
+            settings.ALLOWED_HOSTS = (urlbits.hostname,)
+
+    if hasattr(settings, 'SENTRY_ALLOW_REGISTRATION'):
+        import warnings
+        warnings.warn('SENTRY_ALLOW_REGISTRATION is deprecated. Use SENTRY_FEATURES instead.', DeprecationWarning)
+        settings.SENTRY_FEATURES['auth:register'] = settings.SENTRY_ALLOW_REGISTRATION
+
+
+def skip_migration_if_applied(settings, app_name, table_name,
+                              name='0001_initial'):
+    from south.migration import Migrations
+    from sentry.utils.db import table_exists
+    import types
+
+    if app_name not in settings.INSTALLED_APPS:
+        return
+
+    migration = Migrations(app_name)[name]
+
+    def skip_if_table_exists(original):
+        def wrapped(self):
+            # TODO: look into why we're having to return some ridiculous
+            # lambda
+            if table_exists(table_name):
+                return lambda x=None: None
+            return original()
+        wrapped.__name__ = original.__name__
+        return wrapped
+
+    migration.forwards = types.MethodType(
+        skip_if_table_exists(migration.forwards), migration)
+
+
+def on_configure(config):
+    """
+    Executes after settings are full installed and configured.
+
+    At this point we can force import on various things such as models
+    as all of settings should be correctly configured.
+    """
+    settings = config['settings']
+
+    skip_migration_if_applied(
+        settings, 'kombu.contrib.django', 'djkombu_queue')
+    skip_migration_if_applied(
+        settings, 'social_auth', 'social_auth_association')
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
new file mode 100644
index 0000000000..aa77c2a4d0
--- /dev/null
+++ b/src/sentry/runner/settings.py
@@ -0,0 +1,110 @@
+"""
+sentry.runner.settings
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import os
+import click
+
+
+DEFAULT_SETTINGS_MODULE = 'sentry.conf.server'
+DEFAULT_SETTINGS_CONF = 'config.yml'
+DEFAULT_SETTINGS_OVERRIDE = 'sentry.conf.py'
+CONFIG_TEMPLATE = """# https://docs.getsentry.com/
+
+system.debug: false
+system.secret-key: %(default_key)r
+"""
+
+
+def generate_settings():
+    """
+    This command is run when ``default_path`` doesn't exist, or ``init`` is
+    run and returns a string representing the default data to put into their
+    settings file.
+    """
+    from base64 import b64encode
+    output = CONFIG_TEMPLATE % dict(
+        default_key=b64encode(os.urandom(40)),
+    )
+    return output
+
+
+def discover_configs(ctx=None):
+    """
+    Discover the locations of three configuration components:
+     * Config directory (~/.sentry)
+     * Optional python config file (~/.sentry/sentry.conf.py)
+     * Optional yaml config (~/.sentry/config.yml)
+    """
+    if ctx:
+        config = ctx.obj['config']
+    else:
+        try:
+            config = os.environ['SENTRY_CONF']
+        except KeyError:
+            config = '~/.sentry'
+
+    config = os.path.expanduser(config)
+
+    # This is the old, now deprecated code path where SENTRY_CONF is pointed directly
+    # to a python file
+    if config.endswith(('.py', '.conf')) or os.path.isfile(config):
+        return (
+            os.path.dirname(config),
+            config,
+            None,
+        )
+
+    return (
+        config,
+        os.path.join(config, DEFAULT_SETTINGS_OVERRIDE),
+        os.path.join(config, DEFAULT_SETTINGS_CONF),
+    )
+
+
+def configure(ctx, py, yaml):
+    """
+    Given the two different config files, set up the environment.
+
+    NOTE: Will only execute once, so it's safe to call multiple times.
+    """
+    global __installed
+    if __installed:
+        return
+
+    from .importer import install
+
+    if yaml is None:
+        # `yaml` will be None when SENTRY_CONF is pointed
+        # directly to a file, in which case, this file must exist
+        if not os.path.exists(py):
+            if ctx:
+                raise click.ClickException("Configuration file does not exist. Use '%s init' to initialize the file." % ctx.command_path)
+            raise ValueError("Configuration file does not exist at '%s'" % click.format_filename(py))
+    elif not os.path.exists(yaml):
+        if ctx:
+            raise click.ClickException("Configuration file does not exist. Use '%s init' to initialize the file." % ctx.command_path)
+        raise ValueError("Configuration file does not exist at '%s'" % click.format_filename(yaml))
+
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry_config'
+    install('sentry_config', py, DEFAULT_SETTINGS_MODULE)
+
+    # TODO(mattrobenolt): clean up this and use the callbacks from install
+    from django.conf import settings
+    from .initializer import initialize_app, on_configure
+    initialize_app({
+        'config_path': py,
+        'settings': settings,
+        'options': yaml,
+    }, skip_backend_validation=True)  # TODO(mattrobenolt): Bring back env var
+    on_configure({'settings': settings})
+
+    __installed = True
+
+
+__installed = False
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 9e9401ae69..fa4c267d43 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -8,6 +8,9 @@ from redis import StrictRedis
 
 
 def pytest_configure(config):
+    # HACK: Only needed for testing!
+    os.environ.setdefault('_SENTRY_SKIP_CONFIGURATION', '1')
+
     os.environ.setdefault('RECAPTCHA_TESTING', 'True')
     os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sentry.conf.server')
 
@@ -100,7 +103,7 @@ def pytest_configure(config):
     client = StrictRedis(db=9)
     client.flushdb()
 
-    from sentry.utils.runner import initialize_receivers, fix_south
+    from sentry.runner.initializer import initialize_receivers, fix_south
     initialize_receivers()
 
     fix_south(settings)
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index dcab1b5dac..b6109d0e40 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -8,487 +8,5 @@ sentry.utils.runner
 """
 from __future__ import absolute_import, print_function
 
-from logan.runner import run_app, configure_app
-
-import base64
-import os
-import sys
-import pkg_resources
-import warnings
-
-from functools import partial
-
-USE_GEVENT = os.environ.get('USE_GEVENT') == '1'
-SKIP_BACKEND_VALIDATION = os.environ.get('SKIP_BACKEND_VALIDATION') == '1'
-
-KEY_LENGTH = 40
-
-CONFIG_TEMPLATE = """
-# This file is just Python, with a touch of Django which means
-# you can inherit and tweak settings to your hearts content.
-from sentry.conf.server import *
-
-import os.path
-
-CONF_ROOT = os.path.dirname(__file__)
-
-DATABASES = {
-    'default': {
-        'ENGINE': 'sentry.db.postgres',
-        'NAME': 'sentry',
-        'USER': 'postgres',
-        'PASSWORD': '',
-        'HOST': '',
-        'PORT': '',
-    }
-}
-
-# You should not change this setting after your database has been created
-# unless you have altered all schemas first
-SENTRY_USE_BIG_INTS = True
-
-# If you're expecting any kind of real traffic on Sentry, we highly recommend
-# configuring the CACHES and Redis settings
-
-###########
-# General #
-###########
-
-# The administrative email for this installation.
-# Note: This will be reported back to getsentry.com as the point of contact. See
-# the beacon documentation for more information. This **must** be a string.
-
-# SENTRY_ADMIN_EMAIL = 'your.name@example.com'
-SENTRY_ADMIN_EMAIL = ''
-
-# Instruct Sentry that this install intends to be run by a single organization
-# and thus various UI optimizations should be enabled.
-SENTRY_SINGLE_ORGANIZATION = True
-
-#########
-# Redis #
-#########
-
-# Generic Redis configuration used as defaults for various things including:
-# Buffers, Quotas, TSDB
-
-SENTRY_REDIS_OPTIONS = {
-    'hosts': {
-        0: {
-            'host': '127.0.0.1',
-            'port': 6379,
-        }
-    }
-}
-
-#########
-# Cache #
-#########
-
-# Sentry currently utilizes two separate mechanisms. While CACHES is not a
-# requirement, it will optimize several high throughput patterns.
-
-# If you wish to use memcached, install the dependencies and adjust the config
-# as shown:
-#
-#   pip install python-memcached
-#
-# CACHES = {
-#     'default': {
-#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
-#         'LOCATION': ['127.0.0.1:11211'],
-#     }
-# }
-
-# A primary cache is required for things such as processing events
-SENTRY_CACHE = 'sentry.cache.redis.RedisCache'
-
-#########
-# Queue #
-#########
-
-# See https://docs.getsentry.com/on-premise/server/queue/ for more
-# information on configuring your queue broker and workers. Sentry relies
-# on a Python framework called Celery to manage queues.
-
-CELERY_ALWAYS_EAGER = False
-BROKER_URL = 'redis://localhost:6379'
-
-###############
-# Rate Limits #
-###############
-
-# Rate limits apply to notification handlers and are enforced per-project
-# automatically.
-
-SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'
-
-##################
-# Update Buffers #
-##################
-
-# Buffers (combined with queueing) act as an intermediate layer between the
-# database and the storage API. They will greatly improve efficiency on large
-# numbers of the same events being sent to the API in a short amount of time.
-# (read: if you send any kind of real data to Sentry, you should enable buffers)
-
-SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'
-
-##########
-# Quotas #
-##########
-
-# Quotas allow you to rate limit individual projects or the Sentry install as
-# a whole.
-
-SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'
-
-########
-# TSDB #
-########
-
-# The TSDB is used for building charts as well as making things like per-rate
-# alerts possible.
-
-SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'
-
-###########
-# Digests #
-###########
-
-# The digest backend powers notification summaries.
-
-SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'
-
-################
-# File storage #
-################
-
-# Any Django storage backend is compatible with Sentry. For more solutions see
-# the django-storages package: https://django-storages.readthedocs.org/en/latest/
-
-SENTRY_FILESTORE = 'django.core.files.storage.FileSystemStorage'
-SENTRY_FILESTORE_OPTIONS = {
-    'location': '/tmp/sentry-files',
-}
-
-##############
-# Web Server #
-##############
-
-# You MUST configure the absolute URI root for Sentry:
-SENTRY_URL_PREFIX = 'http://sentry.example.com'  # No trailing slash!
-
-# If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
-# header and uncomment the following settings
-# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
-# SESSION_COOKIE_SECURE = True
-
-# If you're not hosting at the root of your web server, and not using uWSGI,
-# you need to uncomment and set it to the path where Sentry is hosted.
-# FORCE_SCRIPT_NAME = '/sentry'
-
-SENTRY_WEB_HOST = '0.0.0.0'
-SENTRY_WEB_PORT = 9000
-SENTRY_WEB_OPTIONS = {
-    # 'workers': 3,  # the number of gunicorn workers
-    # 'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
-}
-
-###############
-# Mail Server #
-###############
-
-# For more information check Django's documentation:
-# https://docs.djangoproject.com/en/1.6/topics/email/
-
-EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
-
-EMAIL_HOST = 'localhost'
-EMAIL_HOST_PASSWORD = ''
-EMAIL_HOST_USER = ''
-EMAIL_PORT = 25
-EMAIL_USE_TLS = False
-
-# The email address to send on behalf of
-SERVER_EMAIL = 'root@localhost'
-
-# If you're using mailgun for inbound mail, set your API key and configure a
-# route to forward to /api/hooks/mailgun/inbound/
-MAILGUN_API_KEY = ''
-
-########
-# etc. #
-########
-
-# If this file ever becomes compromised, it's important to regenerate your SECRET_KEY
-# Changing this value will result in all current sessions being invalidated
-SECRET_KEY = %(default_key)r
-"""
-
-
-def generate_settings():
-    """
-    This command is run when ``default_path`` doesn't exist, or ``init`` is
-    run and returns a string representing the default data to put into their
-    settings file.
-    """
-    output = CONFIG_TEMPLATE % dict(
-        default_key=base64.b64encode(os.urandom(KEY_LENGTH)),
-    )
-
-    return output
-
-
-def install_plugin_apps(settings):
-    # entry_points={
-    #    'sentry.apps': [
-    #         'phabricator = sentry_phabricator'
-    #     ],
-    # },
-    installed_apps = list(settings.INSTALLED_APPS)
-    for ep in pkg_resources.iter_entry_points('sentry.apps'):
-        installed_apps.append(ep.module_name)
-    settings.INSTALLED_APPS = tuple(installed_apps)
-
-
-def register_plugins(settings):
-    from sentry.plugins import register
-    # entry_points={
-    #    'sentry.plugins': [
-    #         'phabricator = sentry_phabricator.plugins:PhabricatorPlugin'
-    #     ],
-    # },
-
-    for ep in pkg_resources.iter_entry_points('sentry.plugins'):
-        try:
-            plugin = ep.load()
-        except Exception:
-            import sys
-            import traceback
-
-            sys.stderr.write("Failed to load plugin %r:\n%s\n" % (ep.name, traceback.format_exc()))
-        else:
-            register(plugin)
-
-
-def initialize_receivers():
-    # force signal registration
-    import sentry.receivers  # NOQA
-
-
-def initialize_gevent():
-    from gevent import monkey
-    monkey.patch_all()
-
-    try:
-        import psycopg2  # NOQA
-    except ImportError:
-        pass
-    else:
-        from sentry.utils.gevent import make_psycopg_green
-        make_psycopg_green()
-
-
-def get_asset_version(settings):
-    path = os.path.join(settings.STATIC_ROOT, 'version')
-    try:
-        with open(path) as fp:
-            return fp.read().strip()
-    except IOError:
-        from time import time
-        return int(time())
-
-
-def initialize_app(config, skip_backend_validation=False):
-    settings = config['settings']
-
-    fix_south(settings)
-
-    apply_legacy_settings(settings)
-
-    install_plugin_apps(settings)
-
-    # Commonly setups don't correctly configure themselves for production envs
-    # so lets try to provide a bit more guidance
-    if settings.CELERY_ALWAYS_EAGER and not settings.DEBUG:
-        warnings.warn('Sentry is configured to run asynchronous tasks in-process. '
-                      'This is not recommended within production environments. '
-                      'See https://docs.getsentry.com/on-premise/server/queue/ for more information.')
-
-    if settings.SENTRY_SINGLE_ORGANIZATION:
-        settings.SENTRY_FEATURES['organizations:create'] = False
-
-    settings.SUDO_COOKIE_SECURE = getattr(settings, 'SESSION_COOKIE_SECURE', False)
-    settings.SUDO_COOKIE_DOMAIN = getattr(settings, 'SESSION_COOKIE_DOMAIN', None)
-    settings.SUDO_COOKIE_PATH = getattr(settings, 'SESSION_COOKIE_PATH', '/')
-
-    settings.CSRF_COOKIE_SECURE = getattr(settings, 'SESSION_COOKIE_SECURE', False)
-    settings.CSRF_COOKIE_DOMAIN = getattr(settings, 'SESSION_COOKIE_DOMAIN', None)
-    settings.CSRF_COOKIE_PATH = getattr(settings, 'SESSION_COOKIE_PATH', '/')
-
-    settings.CACHES['default']['VERSION'] = settings.CACHE_VERSION
-
-    settings.ASSET_VERSION = get_asset_version(settings)
-    settings.STATIC_URL = settings.STATIC_URL.format(
-        version=settings.ASSET_VERSION,
-    )
-
-    if USE_GEVENT:
-        from django.db import connections
-        connections['default'].allow_thread_sharing = True
-
-    register_plugins(settings)
-
-    initialize_receivers()
-
-    if not (skip_backend_validation or SKIP_BACKEND_VALIDATION):
-        validate_backends()
-
-    from django.utils import timezone
-    from sentry.app import env
-    env.data['config'] = config.get('config_path')
-    env.data['start_date'] = timezone.now()
-
-
-def validate_backends():
-    from sentry import app
-
-    backends = (
-        app.buffer,
-        app.digests,
-        app.nodestore,
-        app.quotas,
-        app.ratelimiter,
-        app.search,
-        app.tsdb,
-    )
-
-    for backend in backends:
-        backend.validate()
-
-
-def fix_south(settings):
-    # South needs an adapter defined conditionally
-    if settings.DATABASES['default']['ENGINE'] != 'sentry.db.postgres':
-        return
-
-    settings.SOUTH_DATABASE_ADAPTERS = {
-        'default': 'south.db.postgresql_psycopg2'
-    }
-
-
-def show_big_error(message):
-    sys.stderr.write('\n')
-    sys.stderr.write('\033[91m!! %s !!\033[0m\n' % ('!' * min(len(message), 80),))
-    sys.stderr.write('\033[91m!! %s !!\033[0m\n' % message)
-    sys.stderr.write('\033[91m!! %s !!\033[0m\n' % ('!' * min(len(message), 80),))
-    sys.stderr.write('\n')
-
-
-def apply_legacy_settings(settings):
-    # SENTRY_USE_QUEUE used to determine if Celery was eager or not
-    if hasattr(settings, 'SENTRY_USE_QUEUE'):
-        warnings.warn('SENTRY_USE_QUEUE is deprecated. Please use CELERY_ALWAYS_EAGER instead. '
-                      'See https://docs.getsentry.com/on-premise/server/queue/ for more information.', DeprecationWarning)
-        settings.CELERY_ALWAYS_EAGER = (not settings.SENTRY_USE_QUEUE)
-
-    if not settings.SENTRY_ADMIN_EMAIL:
-        show_big_error('SENTRY_ADMIN_EMAIL is not configured')
-    elif not isinstance(settings.SENTRY_ADMIN_EMAIL, basestring):
-        show_big_error('SENTRY_ADMIN_EMAIL must be a string')
-
-    if settings.SENTRY_URL_PREFIX in ('', 'http://sentry.example.com') and not settings.DEBUG:
-        # Maybe also point to a piece of documentation for more information?
-        # This directly coincides with users getting the awkward
-        # `ALLOWED_HOSTS` exception.
-        show_big_error('SENTRY_URL_PREFIX is not configured')
-        # Set `ALLOWED_HOSTS` to the catch-all so it works
-        settings.ALLOWED_HOSTS = ['*']
-
-    if settings.TIME_ZONE != 'UTC':
-        # non-UTC timezones are not supported
-        show_big_error('TIME_ZONE should be set to UTC')
-
-    # Set ALLOWED_HOSTS if it's not already available
-    if not settings.ALLOWED_HOSTS:
-        from urlparse import urlparse
-        urlbits = urlparse(settings.SENTRY_URL_PREFIX)
-        if urlbits.hostname:
-            settings.ALLOWED_HOSTS = (urlbits.hostname,)
-
-    if hasattr(settings, 'SENTRY_ALLOW_REGISTRATION'):
-        warnings.warn('SENTRY_ALLOW_REGISTRATION is deprecated. Use SENTRY_FEATURES instead.', DeprecationWarning)
-        settings.SENTRY_FEATURES['auth:register'] = settings.SENTRY_ALLOW_REGISTRATION
-
-
-def skip_migration_if_applied(settings, app_name, table_name,
-                              name='0001_initial'):
-    from south.migration import Migrations
-    from sentry.utils.db import table_exists
-    import types
-
-    if app_name not in settings.INSTALLED_APPS:
-        return
-
-    migration = Migrations(app_name)[name]
-
-    def skip_if_table_exists(original):
-        def wrapped(self):
-            # TODO: look into why we're having to return some ridiculous
-            # lambda
-            if table_exists(table_name):
-                return lambda x=None: None
-            return original()
-        wrapped.__name__ = original.__name__
-        return wrapped
-
-    migration.forwards = types.MethodType(
-        skip_if_table_exists(migration.forwards), migration)
-
-
-def on_configure(config):
-    """
-    Executes after settings are full installed and configured.
-
-    At this point we can force import on various things such as models
-    as all of settings should be correctly configured.
-    """
-    settings = config['settings']
-
-    skip_migration_if_applied(
-        settings, 'kombu.contrib.django', 'djkombu_queue')
-    skip_migration_if_applied(
-        settings, 'social_auth', 'social_auth_association')
-
-
-def configure(config_path=None, skip_backend_validation=False):
-    configure_app(
-        project='sentry',
-        config_path=config_path,
-        default_config_path='~/.sentry/sentry.conf.py',
-        default_settings='sentry.conf.server',
-        settings_initializer=generate_settings,
-        settings_envvar='SENTRY_CONF',
-        initializer=partial(
-            initialize_app, skip_backend_validation=skip_backend_validation),
-        on_configure=on_configure,
-    )
-
-
-def main():
-    if USE_GEVENT:
-        sys.stderr.write("Configuring Sentry with gevent bindings\n")
-        initialize_gevent()
-
-    run_app(
-        project='sentry',
-        default_config_path='~/.sentry/sentry.conf.py',
-        default_settings='sentry.conf.server',
-        settings_initializer=generate_settings,
-        settings_envvar='SENTRY_CONF',
-        initializer=initialize_app,
-    )
-
-if __name__ == '__main__':
-    main()
+# Backwards compatibility
+from sentry.runner import configure  # NOQA
diff --git a/src/sentry/utils/yaml.py b/src/sentry/utils/yaml.py
new file mode 100644
index 0000000000..15491c7757
--- /dev/null
+++ b/src/sentry/utils/yaml.py
@@ -0,0 +1,30 @@
+"""
+sentry.utils.yaml
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from functools import partial
+from yaml import load as _load, dump as _dump
+try:
+    # Try to load bindings with libyaml if available
+    from yaml import (
+        CLoader as Loader,
+        CDumper as Dumper,
+        CSafeLoader as SafeLoader,
+        CSafeDumper as SafeDumper,
+    )
+except ImportError:
+    from yaml import (
+        Loader, Dumper,
+        SafeLoader, SafeDumper,
+    )
+
+
+load = partial(_load, Loader=Loader)
+dump = partial(_dump, Dumper=Dumper)
+safe_load = partial(_load, Loader=SafeLoader)
+safe_dump = partial(_dump, Dumper=SafeDumper)
diff --git a/src/sentry/wsgi.py b/src/sentry/wsgi.py
index 7ce0d499f2..c1746b46ec 100644
--- a/src/sentry/wsgi.py
+++ b/src/sentry/wsgi.py
@@ -14,11 +14,10 @@ import sys
 # Add the project to the python path
 sys.path.insert(0, os.path.join(os.path.dirname(__file__), os.pardir))
 
-# Configure the application (Logan) only if it seemingly isnt already
-# configured
+# Configure the application only if it seemingly isnt already configured
 from django.conf import settings
 if not settings.configured:
-    from sentry.utils.runner import configure
+    from sentry.runner import configure
     configure()
 
 if settings.SESSION_FILE_PATH and not os.path.exists(settings.SESSION_FILE_PATH):
diff --git a/tests/sentry/management/__init__.py b/tests/sentry/management/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/management/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/management/commands/__init__.py b/tests/sentry/management/commands/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/management/commands/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/runner/__init__.py b/tests/sentry/runner/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/runner/commands/__init__.py b/tests/sentry/runner/commands/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/management/commands/test_cleanup.py b/tests/sentry/runner/commands/test_cleanup.py
similarity index 61%
rename from tests/sentry/management/commands/test_cleanup.py
rename to tests/sentry/runner/commands/test_cleanup.py
index f7f9ee5ee7..400f1be3f3 100644
--- a/tests/sentry/management/commands/test_cleanup.py
+++ b/tests/sentry/runner/commands/test_cleanup.py
@@ -2,9 +2,11 @@
 
 from __future__ import absolute_import
 
-from django.core.management import call_command
+from click.testing import CliRunner
+from exam import fixture
 
 from sentry.models import Event, Group, GroupTagValue, TagValue, TagKey
+from sentry.runner.commands.cleanup import cleanup
 from sentry.testutils import TestCase
 
 ALL_MODELS = (Event, Group, GroupTagValue, TagValue, TagKey)
@@ -13,8 +15,11 @@ ALL_MODELS = (Event, Group, GroupTagValue, TagValue, TagKey)
 class SentryCleanupTest(TestCase):
     fixtures = ['tests/fixtures/cleanup.json']
 
+    runner = fixture(CliRunner)
+
     def test_simple(self):
-        call_command('cleanup', days=1)
+        rv = self.runner.invoke(cleanup, ['--days=1'])
+        assert rv.exit_code == 0, rv.output
 
         for model in ALL_MODELS:
             assert model.objects.count() == 0
@@ -24,12 +29,14 @@ class SentryCleanupTest(TestCase):
         for model in ALL_MODELS:
             orig_counts[model] = model.objects.count()
 
-        call_command('cleanup', days=1, project=2)
+        rv = self.runner.invoke(cleanup, ['--days=1', '--project=2'])
+        assert rv.exit_code == 0, rv.output
 
         for model in ALL_MODELS:
             assert model.objects.count() == orig_counts[model]
 
-        call_command('cleanup', days=1, project=1)
+        rv = self.runner.invoke(cleanup, ['--days=1', '--project=1'])
+        assert rv.exit_code == 0, rv.output
 
         for model in ALL_MODELS:
             assert model.objects.count() == 0
