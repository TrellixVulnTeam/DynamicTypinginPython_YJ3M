commit b40e58c2e1bcb0daea40823d74298f37a07e047c
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 1 23:59:01 2014 -0700

    Implement POST on member settings

diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 3b6c5302d5..af930d6685 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -48,7 +48,7 @@ class OrganizationMember(Model):
     ), default=OrganizationMemberType.MEMBER)
     date_added = models.DateTimeField(default=timezone.now)
     has_global_access = models.BooleanField(default=True)
-    teams = models.ManyToManyField('sentry.Team')
+    teams = models.ManyToManyField('sentry.Team', blank=True)
 
     class Meta:
         app_label = 'sentry'
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index e029057aa4..81555058a5 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -1,32 +1,38 @@
 from __future__ import absolute_import
 
 from django import forms
+from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationMember, OrganizationMemberType
-from sentry.web.forms.fields import UserField
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
+    OrganizationMemberType
+)
 from sentry.web.frontend.base import OrganizationView
 
 
 class EditOrganizationMemberForm(forms.ModelForm):
-    user = UserField()
-
     class Meta:
-        fields = ('type', 'user', 'has_global_access', 'teams')
+        fields = ('type', 'has_global_access', 'teams')
         model = OrganizationMember
 
 
 class OrganizationMemberSettingsView(OrganizationView):
     required_access = OrganizationMemberType.ADMIN
 
-    def get_form(self, request):
+    def get_form(self, request, member):
         initial = {
             'type': OrganizationMemberType.MEMBER,
             'has_global_access': True,
         }
 
-        return EditOrganizationMemberForm(request.POST or None, initial=initial)
+        return EditOrganizationMemberForm(
+            data=request.POST or None,
+            instance=member,
+            initial=initial,
+        )
 
     def get(self, request, organization, member_id):
         try:
@@ -34,7 +40,41 @@ class OrganizationMemberSettingsView(OrganizationView):
         except OrganizationMember.DoesNotExist:
             return HttpResponseRedirect(reverse('sentry'))
 
-        form = self.get_form(request)
+        form = self.get_form(request, member)
+
+        context = {
+            'member': member,
+            'form': form,
+        }
+
+        return self.respond('sentry/organization-member-settings.html', context)
+
+    def post(self, request, organization, member_id):
+        try:
+            member = OrganizationMember.objects.get(id=member_id)
+        except OrganizationMember.DoesNotExist:
+            return HttpResponseRedirect(reverse('sentry'))
+
+        form = self.get_form(request, member)
+        if form.is_valid():
+            member = form.save()
+
+            messages.add_message(request, messages.SUCCESS,
+                _('Your changes were saved.'))
+
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                target_object=member.id,
+                target_user=member.user,
+                event=AuditLogEntryEvent.MEMBER_EDIT,
+                data=member.get_audit_log_data(),
+            )
+
+            redirect = reverse('sentry-organization-member-settings',
+                               args=[organization.id, member.id])
+
+            return HttpResponseRedirect(redirect)
 
         context = {
             'member': member,
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index e8a696c3d5..18626c5878 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -2,7 +2,10 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import OrganizationMember, OrganizationMemberType
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
+    OrganizationMemberType
+)
 from sentry.testutils import TestCase
 
 
@@ -21,7 +24,8 @@ class OrganizationMemberSettingsTest(TestCase):
         )
         member.teams.add(team_2)
 
-        path = reverse('sentry-organization-member-settings', args=[organization.id, member.id])
+        path = reverse('sentry-organization-member-settings',
+                       args=[organization.id, member.id])
 
         self.login_as(self.user)
 
@@ -34,3 +38,43 @@ class OrganizationMemberSettingsTest(TestCase):
         assert resp.context['organization'] == organization
         assert resp.context['member'] == member
         assert resp.context['form']
+
+    def test_basic_saving(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team_1 = self.create_team(name='foo', organization=organization)
+        team_2 = self.create_team(name='bar', organization=organization)
+
+        user = self.create_user('bar@example.com')
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            user=user,
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+
+        path = reverse('sentry-organization-member-settings',
+                       args=[organization.id, member.id])
+
+        self.login_as(self.user)
+
+        resp = self.client.post(path, {
+            'has_global_access': True,
+            'type': OrganizationMemberType.ADMIN,
+        })
+
+        assert resp.status_code == 302
+
+        member = OrganizationMember.objects.get(id=member.id)
+
+        assert member.has_global_access is True
+        assert member.type == OrganizationMemberType.ADMIN
+
+        ale = AuditLogEntry.objects.get(
+            organization=organization,
+            event=AuditLogEntryEvent.MEMBER_EDIT,
+        )
+
+        assert ale.actor == self.user
+        assert ale.target_object == member.id
+        assert ale.target_user == user
+        assert ale.data
