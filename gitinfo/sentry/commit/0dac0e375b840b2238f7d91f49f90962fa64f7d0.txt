commit 0dac0e375b840b2238f7d91f49f90962fa64f7d0
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Oct 10 10:10:14 2018 -0700

    feat(integrations): Gitlab Repository Provider (#9916)
    
    * gitlab-repo
    
    * got repos working.
    
    * remove unnecessary code.
    
    * added repo tests
    
    * made various changes based off reviews.
    
    * fixed tests
    
    * revised the tests and added better test cases.

diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index fae2ffbdcf..970bcedf01 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -10,6 +10,7 @@ API_VERSION = u'/api/v4'
 
 class GitLabApiClientPath(object):
     group = u'/groups/{group}'
+    group_projects = u'/groups/{group}/projects'
     issue = u'/projects/{project}/issues/{issue}'
     issues = u'/projects/{project}/issues'
     issues_search = u'/issues'
@@ -62,6 +63,19 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
     def get_user(self):
         return self.get(GitLabApiClientPath.user)
 
+    def get_group_projects(self, group, query=None, simple=True):
+        # simple param returns limited fields for the project.
+        # Really useful, because we often don't need most of the project information
+        return self.get(
+            GitLabApiClientPath.group_projects.format(
+                group=group,
+            ),
+            params={
+                'search': query,
+                'simple': simple,
+            }
+        )
+
     def get_project(self, project):
         return self.get(
             GitLabApiClientPath.project.format(
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index d714758502..142a2550c1 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -12,11 +12,13 @@ from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.gitlab import get_user_info
 from sentry.identity.gitlab.provider import GitlabIdentityProvider
 from sentry.integrations import IntegrationInstallation, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
+from sentry.integrations.repositories import RepositoryMixin
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
 
 from .client import GitLabApiClient, GitLabApiClientPath
 from .issues import GitlabIssueBasic
+from .repository import GitlabRepositoryProvider
 
 DESCRIPTION = """
 Fill me out
@@ -35,18 +37,31 @@ metadata = IntegrationMetadata(
 )
 
 
-class GitlabIntegration(IntegrationInstallation, GitlabIssueBasic):
+class GitlabIntegration(IntegrationInstallation, GitlabIssueBasic, RepositoryMixin):
+    repo_search = True
 
     def __init__(self, *args, **kwargs):
         super(GitlabIntegration, self).__init__(*args, **kwargs)
         self.default_identity = None
 
+    def get_group_id(self):
+        return self.model.external_id.split(':')[1]
+
     def get_client(self):
         if self.default_identity is None:
             self.default_identity = self.get_default_identity()
 
         return GitLabApiClient(self)
 
+    def get_repositories(self, query=None):
+        # Note: gitlab projects are the same things as repos everywhere else
+        group = self.get_group_id()
+        resp = self.get_client().get_group_projects(group, query)
+        return [{
+            'identifier': repo['id'],
+            'name': repo['name_with_namespace'],
+        } for repo in resp]
+
 
 class InstallationForm(forms.Form):
     url = forms.CharField(
@@ -137,6 +152,7 @@ class GitlabIntegrationProvider(IntegrationProvider):
 
     features = frozenset([
         IntegrationFeatures.ISSUE_BASIC,
+        IntegrationFeatures.COMMITS,
     ])
 
     setup_dialog_config = {
@@ -236,3 +252,11 @@ class GitlabIntegrationProvider(IntegrationProvider):
         }
 
         return integration
+
+    def setup(self):
+        from sentry.plugins import bindings
+        bindings.add(
+            'integration-repository.provider',
+            GitlabRepositoryProvider,
+            id='integrations:gitlab',
+        )
diff --git a/src/sentry/integrations/gitlab/repository.py b/src/sentry/integrations/gitlab/repository.py
new file mode 100644
index 0000000000..4286b36cbd
--- /dev/null
+++ b/src/sentry/integrations/gitlab/repository.py
@@ -0,0 +1,58 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.plugins import providers
+from sentry.models import Integration
+
+
+class GitlabRepositoryProvider(providers.IntegrationRepositoryProvider):
+    name = 'Gitlab'
+
+    def get_installation(self, integration_id, organization_id):
+        if integration_id is None:
+            raise ValueError('%s requires an integration_id' % self.name)
+
+        try:
+            integration_model = Integration.objects.get(
+                id=integration_id,
+                organizations=organization_id,
+            )
+        except Integration.DoesNotExist as error:
+            self.handle_api_error(error)
+
+        return integration_model.get_installation(organization_id)
+
+    def get_repository_data(self, organization, config):
+        installation = self.get_installation(config['installation'], organization.id)
+        client = installation.get_client()
+
+        repo_id = config['identifier']
+        instance = installation.model.metadata['domain_name']
+
+        try:
+            repo = client.get_project(six.text_type(repo_id))
+        except Exception as e:
+            installation.raise_error(e)
+        config.update({
+            'instance': instance,
+            'path': repo['path_with_namespace'],
+            'name': repo['name_with_namespace'],
+            'repo_id': repo['id'],
+            'external_id': '%s:%s' % (instance, repo['path']),
+            'url': repo['web_url'],
+        })
+        return config
+
+    def build_repository_config(self, organization, data):
+        return {
+            'name': data['name'],
+            'external_id': data['external_id'],
+            'url': data['url'],
+            'config': {
+                'instance': data['instance'],
+                'repo_id': data['repo_id'],
+                'path': data['path']
+            },
+            'integration_id': data['installation'],
+        }
diff --git a/tests/sentry/integrations/gitlab/test_repository.py b/tests/sentry/integrations/gitlab/test_repository.py
new file mode 100644
index 0000000000..d89856e9f8
--- /dev/null
+++ b/tests/sentry/integrations/gitlab/test_repository.py
@@ -0,0 +1,131 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import Identity, IdentityProvider, Integration, Repository
+from sentry.testutils import PluginTestCase
+
+from sentry.integrations.gitlab.repository import GitlabRepositoryProvider
+
+
+class GitLabRepositoryProviderTest(PluginTestCase):
+    provider_name = 'integrations:gitlab'
+
+    def setUp(self):
+        responses.reset()
+        super(GitLabRepositoryProviderTest, self).setUp()
+        self.login_as(self.user)
+        self.integration = Integration.objects.create(
+            provider='gitlab',
+            name='Example GitLab',
+            external_id='example.gitlab.com:55',
+            metadata={
+                'domain_name': 'example.gitlab.com/my-group',
+                'verify_ssl': False,
+                'base_url': 'https://example.gitlab.com',
+            }
+        )
+        identity = Identity.objects.create(
+            idp=IdentityProvider.objects.create(
+                type='gitlab',
+                config={},
+                external_id='1234567890',
+            ),
+            user=self.user,
+            external_id='example.gitlab.com:4',
+            data={
+                'access_token': '1234567890',
+            }
+        )
+        self.integration.add_organization(self.organization, self.user, identity.id)
+        self.integration.get_provider().setup()
+
+        self.default_repository_config = {
+            'path_with_namespace': 'getsentry/example-repo',
+            'name_with_namespace': 'Get Sentry / Example Repo',
+            'path': 'example-repo',
+            'id': 123,
+            'web_url': 'https://example.gitlab.com/my-group/projects/example-repo',
+        }
+
+    @fixture
+    def provider(self):
+        return GitlabRepositoryProvider()
+
+    def create_repository(self, repository_config, integration_id, organization_slug=None):
+        repo_id = repository_config['id']
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/projects/%s' % repo_id,
+            json=repository_config
+        )
+
+        with self.feature({'organizations:internal-catchall': True, 'organizations:repos': True}):
+            response = self.client.post(
+                path=reverse(
+                    'sentry-api-0-organization-repositories',
+                    args=[organization_slug or self.organization.slug]
+                ),
+                data={
+                    'provider': self.provider_name,
+                    'installation': integration_id,
+                    'identifier': repo_id,
+                }
+            )
+        return response
+
+    def assert_repository(self, repository_config, organization_id=None):
+        domain_name = self.integration.metadata['domain_name']
+        repo = Repository.objects.get(
+            organization_id=organization_id or self.organization.id,
+            provider=self.provider_name,
+            external_id='%s:example-repo' % (domain_name,)
+        )
+        assert repo.name == repository_config['name_with_namespace']
+        assert repo.url == repository_config['web_url']
+        assert repo.integration_id == self.integration.id
+        assert repo.config == {
+            'instance': domain_name,
+            'repo_id': repository_config['id'],
+            'path': repository_config['path_with_namespace'],
+        }
+
+    @responses.activate
+    def test_create_repository(self):
+        response = self.create_repository(self.default_repository_config, self.integration.id)
+        assert response.status_code == 201
+        self.assert_repository(self.default_repository_config)
+
+    def test_create_repository_null_installation_id(self):
+        response = self.create_repository(self.default_repository_config, None)
+        assert response.status_code == 500
+
+    def test_create_repository_integration_does_not_exist(self):
+        integration_id = self.integration.id
+        self.integration.delete()
+
+        response = self.create_repository(self.default_repository_config, integration_id)
+        assert response.status_code == 500  # TODO(lb): shouldn't this result in a 404?
+
+    def test_create_repository_org_given_has_no_installation(self):
+        organization = self.create_organization(owner=self.user)
+        response = self.create_repository(
+            self.default_repository_config,
+            self.integration.id,
+            organization.slug)
+        assert response.status_code == 500
+
+    @responses.activate
+    def test_create_repository_projects_request_fails(self):
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/projects/%s' % self.default_repository_config['id'],
+            status=503,
+        )
+        response = self.create_repository(self.default_repository_config, self.integration.id)
+        # TODO(lb): it gives a 400 which I'm not sure makes sense here
+        assert response.status_code == 400
