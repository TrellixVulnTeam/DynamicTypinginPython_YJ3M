commit a104afbd250fce4697191b73be9c3db42d51da23
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jul 18 13:38:40 2015 -0700

    Support statsPeriod selector in group list

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index fe79def7c3..868787272b 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -23,6 +23,8 @@ from sentry.tasks.deletion import delete_group
 from sentry.tasks.merge import merge_group
 from sentry.utils.cursors import Cursor
 
+ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
+
 
 class GroupSerializer(serializers.Serializer):
     status = serializers.ChoiceField(choices=zip(
@@ -47,6 +49,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
     # bookmarks=0/1
     # status=<x>
     # <tag>=<value>
+    # statsPeriod=24h
     def get(self, request, project):
         """
         List a project's aggregates
@@ -60,11 +63,24 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         Any standard Sentry structured search query can be passed via the
         ``query`` parameter.
+
+        The ``statsPeriod`` parameter can be used to select the timeline stats
+        which should be present. Possible values are: '' (disable), '24h', '14d'
         """
         query_kwargs = {
             'project': project,
         }
 
+        stats_period = request.GET.get('statsPeriod')
+        if stats_period not in (None, '', '24h', '14d'):
+            return Response({"detail": ERR_INVALID_STATS_PERIOD}, status=400)
+        elif stats_period is None:
+            # default
+            stats_period = '24h'
+        elif stats_period == '':
+            # disable stats
+            stats_period = None
+
         if request.GET.get('status'):
             try:
                 query_kwargs['status'] = STATUS_CHOICES[request.GET['status']]
@@ -129,7 +145,11 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         context = list(cursor_result)
 
-        response = Response(serialize(context, request.user, StreamGroupSerializer()))
+        response = Response(serialize(
+            context, request.user, StreamGroupSerializer(
+                stats_period=stats_period
+            )
+        ))
         response['Link'] = ', '.join([
             self.build_cursor_link(request, 'previous', cursor_result.prev),
             self.build_cursor_link(request, 'next', cursor_result.next),
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 84f0a26f65..eac3a42fa5 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -135,39 +135,38 @@ class GroupSerializer(Serializer):
 
 
 class StreamGroupSerializer(GroupSerializer):
+    def __init__(self, stats_period=None):
+        self.stats_period = stats_period
+        assert stats_period in (None, '24h', '14d')
+
     def get_attrs(self, item_list, user):
         attrs = super(StreamGroupSerializer, self).get_attrs(item_list, user)
 
         # we need to compute stats at 1d (1h resolution), and 14d
         group_ids = [g.id for g in item_list]
-        now = timezone.now()
-        hourly_stats = tsdb.rollup(tsdb.get_range(
-            model=tsdb.models.group,
-            keys=group_ids,
-            end=now,
-            start=now - timedelta(days=1),
-        ), 3600)
-        daily_stats = tsdb.rollup(tsdb.get_range(
-            model=tsdb.models.group,
-            keys=group_ids,
-            end=now,
-            start=now - timedelta(days=14),
-        ), 3600 * 24)
-
-        for item in item_list:
-            attrs[item].update({
-                'hourly_stats': hourly_stats[item.id],
-                'daily_stats': daily_stats[item.id],
-            })
+        if self.stats_period:
+            days = 14 if self.stats_period == '14d' else 1
+            now = timezone.now()
+            stats = tsdb.rollup(tsdb.get_range(
+                model=tsdb.models.group,
+                keys=group_ids,
+                end=now,
+                start=now - timedelta(days=days),
+            ), 3600 * days)
+
+            for item in item_list:
+                attrs[item].update({
+                    'stats': stats[item.id],
+                })
         return attrs
 
     def serialize(self, obj, attrs, user):
         result = super(StreamGroupSerializer, self).serialize(obj, attrs, user)
 
-        result['stats'] = {
-            '24h': attrs['hourly_stats'],
-            '14d': attrs['daily_stats'],
-        }
+        if self.stats_period:
+            result['stats'] = {
+                self.stats_period: attrs['stats'],
+            }
 
         return result
 
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index c53c8ce9a7..b6d55099b3 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -89,6 +89,37 @@ class GroupListTest(APITestCase):
         assert len(response.data) == 1
         assert response.data[0]['id'] == str(group3.id)
 
+    def test_stats_period(self):
+        # TODO(dcramer): this test really only checks if validation happens
+        # on statsPeriod
+        project = self.project
+        now = timezone.now()
+        group1 = self.create_group(
+            checksum='a' * 32,
+            last_seen=now - timedelta(seconds=1),
+        )
+        group2 = self.create_group(
+            checksum='b' * 32,
+            last_seen=now,
+        )
+
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-group-index', kwargs={
+            'organization_slug': self.project.organization.slug,
+            'project_slug': self.project.slug,
+        })
+        response = self.client.get(url + '?statsPeriod=24h', format='json')
+        assert response.status_code == 200
+
+        response = self.client.get(url + '?statsPeriod=14d', format='json')
+        assert response.status_code == 200
+
+        response = self.client.get(url + '?statsPeriod=', format='json')
+        assert response.status_code == 200
+
+        response = self.client.get(url + '?statsPeriod=48h', format='json')
+        assert response.status_code == 400
+
 
 class GroupUpdateTest(APITestCase):
     def test_global_resolve(self):
