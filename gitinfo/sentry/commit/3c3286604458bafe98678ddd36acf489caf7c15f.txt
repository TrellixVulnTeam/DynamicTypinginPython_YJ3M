commit 3c3286604458bafe98678ddd36acf489caf7c15f
Author: Danny Lee <dlee@sentry.io>
Date:   Fri Jan 10 10:24:18 2020 -0800

    fix(discover2): Fix Percy snapshots and UX issues on Querybuilder (#16291)
    
    * fix(discover2): Test fix on Percy snapshots
    * fix(discover2): Improve QueryBuilder for error/loading states
    * fix(discover2): Resize QueryBuilder when browser is resized

diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index 61884a738b..074ec858d1 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -5,7 +5,7 @@ import {openModal} from 'app/actionCreators/modal';
 
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import InlineSvg from 'app/components/inlineSvg';
-import LoadingContainer from 'app/components/loading/loadingContainer';
+import LoadingIndicator from 'app/components/loadingIndicator';
 
 import {
   GridColumn,
@@ -26,9 +26,8 @@ import {
   GridHead,
   GridBody,
   GridBodyCell,
-  GridBodyCellSpan,
-  GridBodyCellLoading,
-  GridBodyErrorAlert,
+  GridBodyCellStatus,
+  GridStatusErrorAlert,
   GridResizer,
 } from './styles';
 import {
@@ -146,6 +145,10 @@ class GridEditable<
     isEditing: false,
   };
 
+  componentDidMount() {
+    window.addEventListener('resize', this.redrawGridColumn);
+  }
+
   componentDidUpdate() {
     // Redraw columns whenever new props are recieved
     this.setGridTemplateColumns(this.props.columnOrder);
@@ -153,6 +156,7 @@ class GridEditable<
 
   componentWillUnmount() {
     this.clearWindowLifecycleEvents();
+    window.removeEventListener('resize', this.redrawGridColumn);
   }
 
   private refGrid = React.createRef<HTMLTableElement>();
@@ -286,6 +290,13 @@ class GridEditable<
     );
   };
 
+  /**
+   * Recalculate the dimensions of Grid and Columns and redraws them
+   */
+  redrawGridColumn = () => {
+    this.setGridTemplateColumns(this.props.columnOrder);
+  };
+
   /**
    * Set the CSS for Grid Column
    */
@@ -441,11 +452,11 @@ class GridEditable<
 
     return (
       <GridRow>
-        <GridBodyCellSpan>
-          <GridBodyErrorAlert type="error" icon="icon-circle-exclamation">
+        <GridBodyCellStatus>
+          <GridStatusErrorAlert type="error" icon="icon-circle-exclamation">
             {error}
-          </GridBodyErrorAlert>
-        </GridBodyCellSpan>
+          </GridStatusErrorAlert>
+        </GridBodyCellStatus>
       </GridRow>
     );
   };
@@ -453,11 +464,9 @@ class GridEditable<
   renderLoading = () => {
     return (
       <GridRow>
-        <GridBodyCellSpan>
-          <GridBodyCellLoading>
-            <LoadingContainer isLoading />
-          </GridBodyCellLoading>
-        </GridBodyCellSpan>
+        <GridBodyCellStatus>
+          <LoadingIndicator />
+        </GridBodyCellStatus>
       </GridRow>
     );
   };
@@ -465,11 +474,11 @@ class GridEditable<
   renderEmptyData = () => {
     return (
       <GridRow>
-        <GridBodyCellSpan>
+        <GridBodyCellStatus>
           <EmptyStateWarning>
             <p>{t('No results found')}</p>
           </EmptyStateWarning>
-        </GridBodyCellSpan>
+        </GridBodyCellStatus>
       </GridRow>
     );
   };
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index 36206e06ea..d7339e43b3 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -8,10 +8,19 @@ import space from 'app/styles/space';
 
 export const GRID_HEAD_ROW_HEIGHT = 45;
 export const GRID_BODY_ROW_HEIGHT = 40;
+export const GRID_STATUS_MESSAGE_HEIGHT = GRID_BODY_ROW_HEIGHT * 4;
 
-// Local z-index stacking context
-// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
-export const Z_INDEX_RESIZER = 1;
+/**
+ * Local z-index stacking context
+ * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
+ */
+// Parent context is Panel
+const Z_INDEX_PANEL = 1;
+const Z_INDEX_GRID_STATUS = -1;
+const Z_INDEX_GRID = 5;
+
+// Parent context is GridHeadCell
+const Z_INDEX_GRID_RESIZER = 1;
 
 type GridEditableProps = {
   numColumn?: number;
@@ -53,6 +62,7 @@ export const HeaderButton = styled('div')`
 
 const PanelWithProtectedBorder = styled(Panel)`
   overflow: hidden;
+  z-index: ${Z_INDEX_PANEL};
 `;
 export const Body: React.FC = props => (
   <PanelWithProtectedBorder>
@@ -74,7 +84,7 @@ export const Body: React.FC = props => (
  * The entire layout is determined by the usage of <th> and <td>.
  */
 export const Grid = styled('table')`
-  position: relative;
+  position: inherit;
   display: grid;
 
   /* Overwritten by GridEditable.setGridTemplateColumns */
@@ -84,8 +94,8 @@ export const Grid = styled('table')`
   border-collapse: collapse;
   margin: 0;
 
-  /* background-color: ${p => p.theme.offWhite}; */
   overflow-x: scroll;
+  z-index: ${Z_INDEX_GRID};
 `;
 export const GridRow = styled('tr')`
   display: contents;
@@ -274,7 +284,6 @@ export const GridBody = styled('tbody')`
   }
 `;
 export const GridBodyCell = styled('td')`
-  position: relative;
   /* By default, a grid item cannot be smaller than the size of its content.
      We override this by setting min-width to be 0. */
   min-width: 0;
@@ -293,15 +302,34 @@ export const GridBodyCell = styled('td')`
     border-right: none;
   }
 `;
-export const GridBodyCellSpan = styled(GridBodyCell)`
+
+const GridStatusWrapper = styled(GridBodyCell)`
   grid-column: 1 / -1;
+  width: 100%;
+  height: ${GRID_STATUS_MESSAGE_HEIGHT}px;
+  background-color: transparent;
 `;
-export const GridBodyCellLoading = styled('div')`
-  min-height: 220px;
-`;
+const GridStatusFloat = styled('div')`
+  position: absolute;
+  top: 45px;
+  left: 0;
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  width: 100%;
+  height: ${GRID_STATUS_MESSAGE_HEIGHT}px;
 
-export const GridBodyErrorAlert = styled(Alert)`
-  margin: 0;
+  z-index: ${Z_INDEX_GRID_STATUS};
+  background: ${p => p.theme.white};
+`;
+export const GridBodyCellStatus: React.FC = props => (
+  <GridStatusWrapper>
+    <GridStatusFloat>{props.children}</GridStatusFloat>
+  </GridStatusWrapper>
+);
+export const GridStatusErrorAlert = styled(Alert)`
+  width: 100%;
+  margin: ${space(2)};
 `;
 
 /**
@@ -323,7 +351,7 @@ export const GridResizer = styled('div')<{dataRows: number; isLast?: boolean}>`
   padding-right: ${p => (p.isLast ? '0px' : '4px')};
 
   cursor: col-resize;
-  z-index: ${Z_INDEX_RESIZER};
+  z-index: ${Z_INDEX_GRID_RESIZER};
 
   /**
    * This element allows us to have a fat GridResizer that is easy to hover and
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 36d2106d2d..4d2a0005a0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -141,7 +141,7 @@ class Results extends React.Component<Props, State> {
               location={location}
               eventView={eventView}
             />
-            <ContentBox>
+            <StyledPageContent>
               <Top>
                 <StyledSearchBar
                   organization={organization}
@@ -176,7 +176,7 @@ class Results extends React.Component<Props, State> {
                 />
               </Main>
               <Side eventView={eventView}>{this.renderTagsTable()}</Side>
-            </ContentBox>
+            </StyledPageContent>
           </NoProjectMessage>
         </React.Fragment>
       </SentryDocumentTitle>
@@ -184,11 +184,28 @@ class Results extends React.Component<Props, State> {
   }
 }
 
+const StyledPageContent = styled(PageContent)`
+  margin: 0;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: grid;
+    /* HACK(leedongwei): Hardcoded height for search bar and graph */
+    grid-template-rows: 270px auto;
+    grid-template-columns: 66% auto;
+    grid-column-gap: ${space(3)};
+  }
+
+  @media (min-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: auto 325px;
+  }
+`;
+
 const StyledSearchBar = styled(SearchBar)`
   margin-bottom: ${space(2)};
 `;
-
 const StyledPanel = styled(Panel)`
+  /* HACK(leedongwei): Hardcoded height for graph */
+  height: 200px;
   margin-bottom: ${space(1.5)};
 
   .echarts-for-react div:first-child {
@@ -200,38 +217,16 @@ const Top = styled('div')`
   grid-column: 1/3;
   flex-grow: 0;
 `;
-
 const Main = styled('div')<{eventView: EventView}>`
   grid-column: ${p => (p.eventView.tags.length <= 0 ? '1/3' : '1/2')};
-
-  /* Defining the width prevent child elements from expanding the grid
-     past the width of the screen */
-  width: 100%;
   max-width: 100%;
   overflow: hidden;
 `;
-
 const Side = styled('div')<{eventView: EventView}>`
   display: ${p => (p.eventView.tags.length <= 0 ? 'none' : 'initial')};
   grid-column: 2/3;
 `;
 
-const ContentBox = styled(PageContent)`
-  margin: 0;
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    display: grid;
-    grid-template-rows: 270px auto; /* HACK(leedongwei): Hard-coded height for
-                                       search bar and graph */
-    grid-template-columns: 65% auto;
-    grid-column-gap: ${space(3)};
-  }
-
-  @media (min-width: ${p => p.theme.breakpoints[2]}) {
-    grid-template-columns: auto 325px;
-  }
-`;
-
 export function generateDiscoverResultsRoute(orgSlug: string): string {
   return `/organizations/${orgSlug}/eventsv2/results/`;
 }
