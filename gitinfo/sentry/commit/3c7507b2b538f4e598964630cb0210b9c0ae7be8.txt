commit 3c7507b2b538f4e598964630cb0210b9c0ae7be8
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jan 3 11:17:47 2020 -0800

    test: Rewrite tests to use store_event instead of create_event (#16212)

diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 62621248bb..7e60edadaf 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -8,6 +8,7 @@ from sentry.incidents.models import IncidentActivityType
 import pytest
 from django.utils.functional import cached_property
 from sentry.testutils.factories import Factories
+from sentry.testutils.helpers.datetime import before_now, iso_format
 
 
 # XXX(dcramer): this is a compatibility layer to transition to pytest-based fixtures
@@ -61,7 +62,14 @@ class Fixtures(object):
 
     @cached_property
     def event(self):
-        return self.create_event(event_id="a" * 32, message="\u3053\u3093\u306b\u3061\u306f")
+        return self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "message": "\u3053\u3093\u306b\u3061\u306f",
+                "timestamp": iso_format(before_now(seconds=1)),
+            },
+            project_id=self.project.id,
+        )
 
     @cached_property
     def activity(self):
@@ -145,9 +153,6 @@ class Fixtures(object):
             group = self.group
         return Factories.create_event(event_id=event_id, group=group, *args, **kwargs)
 
-    def create_issueless_event(self, event_id=None, *args, **kwargs):
-        return Factories.create_event(event_id=event_id, group=None, *args, **kwargs)
-
     def store_event(self, *args, **kwargs):
         return Factories.store_event(*args, **kwargs)
 
diff --git a/tests/sentry/api/endpoints/test_group_user_reports.py b/tests/sentry/api/endpoints/test_group_user_reports.py
index d9a43b4a14..190b19820a 100644
--- a/tests/sentry/api/endpoints/test_group_user_reports.py
+++ b/tests/sentry/api/endpoints/test_group_user_reports.py
@@ -1,20 +1,22 @@
 from __future__ import absolute_import
 from exam import fixture
 
-from sentry.models import Environment, GroupStatus, UserReport
+from sentry.models import Environment, UserReport
 from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import before_now, iso_format
 
 
 class GroupUserReport(APITestCase, SnubaTestCase):
     def setUp(self):
+        super(GroupUserReport, self).setUp()
         self.project = self.create_project()
         self.env1 = self.create_environment(self.project, "production")
         self.env2 = self.create_environment(self.project, "staging")
 
-        self.group = self.create_group(project=self.project, status=GroupStatus.UNRESOLVED)
+        self.env1_events = self.create_events_for_environment(self.env1, 5)
+        self.env2_events = self.create_events_for_environment(self.env2, 5)
 
-        self.env1_events = self.create_events_for_environment(self.group, self.env1, 5)
-        self.env2_events = self.create_events_for_environment(self.group, self.env2, 5)
+        self.group = self.env1_events[0].group
 
         self.env1_userreports = self.create_user_report_for_events(
             self.project, self.group, self.env1_events, self.env1
@@ -34,9 +36,16 @@ class GroupUserReport(APITestCase, SnubaTestCase):
         env.add_project(project)
         return env
 
-    def create_events_for_environment(self, group, environment, num_events):
+    def create_events_for_environment(self, environment, num_events):
         return [
-            self.create_event(group=group, tags={"environment": environment.name})
+            self.store_event(
+                data={
+                    "fingerprint": ["group-1"],
+                    "tags": {"environment": environment.name},
+                    "timestamp": iso_format(before_now(seconds=1)),
+                },
+                project_id=self.project.id,
+            )
             for __i in range(num_events)
         ]
 
@@ -85,7 +94,7 @@ class GroupUserReport(APITestCase, SnubaTestCase):
         self.login_as(user=self.user)
 
         empty_env = self.create_environment(self.project, u"")
-        empty_env_events = self.create_events_for_environment(self.group, empty_env, 5)
+        empty_env_events = self.create_events_for_environment(empty_env, 5)
         userreports = self.create_user_report_for_events(
             self.project, self.group, empty_env_events, empty_env
         )
diff --git a/tests/sentry/deletions/test_project.py b/tests/sentry/deletions/test_project.py
index ac2ef41833..db94aebdf1 100644
--- a/tests/sentry/deletions/test_project.py
+++ b/tests/sentry/deletions/test_project.py
@@ -25,8 +25,8 @@ from sentry.testutils import TestCase
 class DeleteProjectTest(TestCase):
     def test_simple(self):
         project = self.create_project(name="test")
-        group = self.create_group(project=project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=project.id)
+        group = event.group
         GroupAssignee.objects.create(group=group, project=project, user=self.user)
         GroupMeta.objects.create(group=group, key="foo", value="bar")
         release = Release.objects.create(version="a" * 32, organization_id=project.organization_id)
diff --git a/tests/sentry/digests/test_notifications.py b/tests/sentry/digests/test_notifications.py
index 76e876d5bd..9f9ed3de2a 100644
--- a/tests/sentry/digests/test_notifications.py
+++ b/tests/sentry/digests/test_notifications.py
@@ -64,13 +64,17 @@ class GroupRecordsTestCase(TestCase):
         return self.project.rule_set.all()[0]
 
     def test_success(self):
-        events = [self.create_event(group=self.group) for _ in range(3)]
+        events = [
+            self.store_event(data={"fingerprint": ["group-1"]}, project_id=self.project.id)
+            for i in range(3)
+        ]
+        group = events[0].group
         records = [
             Record(event.event_id, Notification(event, [self.rule]), event.datetime)
             for event in events
         ]
         assert reduce(group_records, records, defaultdict(lambda: defaultdict(list))) == {
-            self.rule: {self.group: records}
+            self.rule: {group: records}
         }
 
 
diff --git a/tests/sentry/eventstore/test_models.py b/tests/sentry/eventstore/test_models.py
index 02d924668d..99b7282d04 100644
--- a/tests/sentry/eventstore/test_models.py
+++ b/tests/sentry/eventstore/test_models.py
@@ -121,41 +121,46 @@ class EventTest(TestCase):
             event.get_environment() == environment
 
     def test_ip_address(self):
-        event = self.create_event(
+        event = self.store_event(
             data={
                 "user": {"ip_address": "127.0.0.1"},
                 "request": {"url": "http://some.com", "env": {"REMOTE_ADDR": "::1"}},
-            }
+            },
+            project_id=self.project.id,
         )
         assert event.ip_address == "127.0.0.1"
 
-        event = self.create_event(
+        event = self.store_event(
             data={
                 "user": {"ip_address": None},
                 "request": {"url": "http://some.com", "env": {"REMOTE_ADDR": "::1"}},
-            }
+            },
+            project_id=self.project.id,
         )
         assert event.ip_address == "::1"
 
-        event = self.create_event(
+        event = self.store_event(
             data={
                 "user": None,
                 "request": {"url": "http://some.com", "env": {"REMOTE_ADDR": "::1"}},
-            }
+            },
+            project_id=self.project.id,
         )
         assert event.ip_address == "::1"
 
-        event = self.create_event(
-            data={"request": {"url": "http://some.com", "env": {"REMOTE_ADDR": "::1"}}}
+        event = self.store_event(
+            data={"request": {"url": "http://some.com", "env": {"REMOTE_ADDR": "::1"}}},
+            project_id=self.project.id,
         )
         assert event.ip_address == "::1"
 
-        event = self.create_event(
-            data={"request": {"url": "http://some.com", "env": {"REMOTE_ADDR": None}}}
+        event = self.store_event(
+            data={"request": {"url": "http://some.com", "env": {"REMOTE_ADDR": None}}},
+            project_id=self.project.id,
         )
         assert event.ip_address is None
 
-        event = self.create_event()
+        event = self.store_event(data={}, project_id=self.project.id)
         assert event.ip_address is None
 
     def test_issueless_event(self):
diff --git a/tests/sentry/integrations/slack/test_utils.py b/tests/sentry/integrations/slack/test_utils.py
index d8ccfba7c2..0e54de4d11 100644
--- a/tests/sentry/integrations/slack/test_utils.py
+++ b/tests/sentry/integrations/slack/test_utils.py
@@ -164,10 +164,10 @@ class BuildIncidentAttachmentTest(TestCase):
             "fallback": u"[{}] {}".format(self.project.slug, group.title),
             "footer_icon": u"http://testserver/_static/{version}/sentry/images/sentry-email-avatar.png",
         }
-        event = self.create_event()
+        event = self.store_event(data={}, project_id=self.project.id)
         ts = event.datetime
         assert build_group_attachment(group, event) == {
-            "color": "error",
+            "color": "#E03E2F",
             "text": "",
             "actions": [
                 {"name": "status", "text": "Resolve", "type": "button", "value": "resolved"},
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 5dd0c840e8..47579cd03f 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -139,11 +139,11 @@ class EventNodeStoreTest(TestCase):
             event.bind_node_data()
 
     def test_accepts_valid_ref(self):
-        event = self.create_event()
+        event = self.store_event(data={}, project_id=self.project.id)
         event.data.bind_ref(event)
         event.bind_node_data()
         assert event.data.ref == event.project.id
 
     def test_basic_ref_binding(self):
-        event = self.create_event()
+        event = self.store_event(data={}, project_id=self.project.id)
         assert event.data.get_ref(event) == event.project.id
diff --git a/tests/sentry/plugins/bases/notify/tests.py b/tests/sentry/plugins/bases/notify/tests.py
index 9e1a8c606d..b25b8651b3 100644
--- a/tests/sentry/plugins/bases/notify/tests.py
+++ b/tests/sentry/plugins/bases/notify/tests.py
@@ -42,7 +42,7 @@ class NotifyPlugin(TestCase):
             def hook(*a, **kw):
                 raise err
 
-            event = self.create_event()
+            event = self.store_event(data={}, project_id=self.project.id)
             notification = Notification(event)
 
             n.notify_users = hook
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index b16aedceef..e0a120e65a 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -22,7 +22,9 @@ from sentry.models import (
     Organization,
     OrganizationMember,
     OrganizationMemberTeam,
+    ProjectOption,
     ProjectOwnership,
+    Repository,
     Rule,
     UserOption,
     UserOptionValue,
@@ -35,6 +37,7 @@ from sentry.plugins.sentry_mail.models import MailPlugin
 from sentry.testutils import TestCase
 from sentry.utils.email import MessageBuilder
 from sentry.event_manager import EventManager
+from sentry.testutils.helpers.datetime import before_now, iso_format
 
 
 class MailPluginTest(TestCase):
@@ -77,11 +80,8 @@ class MailPluginTest(TestCase):
         _get_title.return_value = "Stacktrace"
 
         event = self.store_event(
-            data={
-                "message": "Soubor ji\xc5\xbe existuje",
-                "stacktrace": {"frames": [{}]}
-            },
-            project_id=self.project.id
+            data={"message": "Soubor ji\xc5\xbe existuje", "stacktrace": {"frames": [{}]}},
+            project_id=self.project.id,
         )
 
         notification = Notification(event=event)
@@ -210,14 +210,19 @@ class MailPluginTest(TestCase):
 
     @mock.patch.object(MailPlugin, "notify", side_effect=MailPlugin.notify, autospec=True)
     def test_notify_digest(self, notify):
-        project = self.event.project
+        project = self.project
+        event = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-1"]},
+            project_id=project.id,
+        )
+        event2 = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-2"]},
+            project_id=project.id,
+        )
+
         rule = project.rule_set.all()[0]
         digest = build_digest(
-            project,
-            (
-                event_to_record(self.create_event(group=self.create_group()), (rule,)),
-                event_to_record(self.event, (rule,)),
-            ),
+            project, (event_to_record(event, (rule,)), event_to_record(event2, (rule,)))
         )
 
         with self.tasks():
@@ -232,34 +237,34 @@ class MailPluginTest(TestCase):
     @mock.patch.object(MailPlugin, "notify", side_effect=MailPlugin.notify, autospec=True)
     @mock.patch.object(MessageBuilder, "send_async", autospec=True)
     def test_notify_digest_single_record(self, send_async, notify):
-        project = self.event.project
-        rule = project.rule_set.all()[0]
-        digest = build_digest(project, (event_to_record(self.event, (rule,)),))
-        self.plugin.notify_digest(project, digest)
+        event = self.store_event(data={}, project_id=self.project.id)
+        rule = self.project.rule_set.all()[0]
+        digest = build_digest(self.project, (event_to_record(event, (rule,)),))
+        self.plugin.notify_digest(self.project, digest)
         assert send_async.call_count == 1
         assert notify.call_count == 1
 
-    @mock.patch(
-        "sentry.models.ProjectOption.objects.get_value",
-        Mock(
-            side_effect=lambda p, k, d, **kw: "[Example prefix] "
-            if k == "mail:subject_prefix"
-            else d
-        ),
-    )
     def test_notify_digest_subject_prefix(self):
-        project = self.event.project
-        rule = project.rule_set.all()[0]
+        ProjectOption.objects.set_value(
+            project=self.project, key=u"mail:subject_prefix", value="[Example prefix] "
+        )
+        event = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-1"]},
+            project_id=self.project.id,
+        )
+        event2 = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1)), "fingerprint": ["group-2"]},
+            project_id=self.project.id,
+        )
+
+        rule = self.project.rule_set.all()[0]
+
         digest = build_digest(
-            project,
-            (
-                event_to_record(self.create_event(group=self.create_group()), (rule,)),
-                event_to_record(self.event, (rule,)),
-            ),
+            self.project, (event_to_record(event, (rule,)), event_to_record(event2, (rule,)))
         )
 
         with self.tasks():
-            self.plugin.notify_digest(project, digest)
+            self.plugin.notify_digest(self.project, digest)
 
         assert len(mail.outbox) == 1
 
@@ -348,15 +353,56 @@ class MailPluginTest(TestCase):
         assert msg.to == [self.user.email]
 
     def test_notify_with_suspect_commits(self):
-        release = self.create_release(project=self.project, user=self.user)
-        group = self.create_group(project=self.project, first_release=release)
-        event = self.create_event(group=group, tags={"sentry:release": release.version})
+        repo = Repository.objects.create(
+            organization_id=self.organization.id, name=self.organization.id
+        )
+        release = self.create_release(project=self.project, version="v12")
+        release.set_commits(
+            [
+                {
+                    "id": "a" * 40,
+                    "repository": repo.name,
+                    "author_email": "bob@example.com",
+                    "author_name": "Bob",
+                    "message": "i fixed a bug",
+                    "patch_set": [{"path": "src/sentry/models/release.py", "type": "M"}],
+                }
+            ]
+        )
 
-        notification = Notification(event=event)
+        event = self.store_event(
+            data={
+                "message": "Kaboom!",
+                "platform": "python",
+                "timestamp": iso_format(before_now(seconds=1)),
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "handle_set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
+                            "module": "sentry.tasks",
+                            "in_app": True,
+                            "lineno": 30,
+                            "filename": "sentry/tasks.py",
+                        },
+                        {
+                            "function": "set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
+                            "module": "sentry.models.release",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "sentry/models/release.py",
+                        },
+                    ]
+                },
+                "tags": {"sentry:release": release.version},
+            },
+            project_id=self.project.id,
+        )
+
+        with self.tasks():
+            notification = Notification(event=event)
 
-        with self.tasks(), self.options({"system.url-prefix": "http://example.com"}), self.feature(
-            "organizations:suggested-commits"
-        ):
             self.plugin.notify(notification)
 
         assert len(mail.outbox) >= 1
diff --git a/tests/sentry/plugins/sentry_webhooks/test_plugin.py b/tests/sentry/plugins/sentry_webhooks/test_plugin.py
index b898336021..dadc3bdcb7 100644
--- a/tests/sentry/plugins/sentry_webhooks/test_plugin.py
+++ b/tests/sentry/plugins/sentry_webhooks/test_plugin.py
@@ -23,8 +23,9 @@ class WebHooksPluginTest(TestCase):
     @responses.activate
     def test_simple_notification(self):
         responses.add(responses.POST, "http://example.com")
-        group = self.create_group(message="Hello world")
-        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+        event = self.store_event(
+            data={"message": "Hello world", "level": "warning"}, project_id=self.project.id
+        )
         rule = Rule.objects.create(project=self.project, label="my rule")
         notification = Notification(event=event, rule=rule)
         self.project.update_option("webhooks:urls", "http://example.com")
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 6a950eed9f..5d9264ce53 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -28,7 +28,8 @@ class OrganizationOnboardingTaskTest(TestCase):
     def test_no_existing_task(self):
         now = timezone.now()
         project = self.create_project(first_event=now)
-        first_event_received.send(project=project, event=self.event, sender=type(project))
+        event = self.store_event(data={}, project_id=project.id)
+        first_event_received.send(project=project, event=event, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(
             organization=project.organization, task=OnboardingTask.FIRST_EVENT
@@ -50,7 +51,8 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task.status == OnboardingTaskStatus.PENDING
         assert task.project_id == project.id
 
-        first_event_received.send(project=project, event=self.event, sender=type(project))
+        event = self.store_event(data={}, project_id=project.id)
+        first_event_received.send(project=project, event=event, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(
             organization=project.organization, task=OnboardingTask.FIRST_EVENT
@@ -69,7 +71,8 @@ class OrganizationOnboardingTaskTest(TestCase):
             status=OnboardingTaskStatus.COMPLETE,
         )
 
-        first_event_received.send(project=project, event=self.event, sender=type(project))
+        event = self.store_event(data={}, project_id=project.id)
+        first_event_received.send(project=project, event=event, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(id=task.id)
         assert task.status == OnboardingTaskStatus.COMPLETE
diff --git a/tests/sentry/rules/conditions/test_level_event.py b/tests/sentry/rules/conditions/test_level_event.py
index 83e8f3d637..1d94cf2901 100644
--- a/tests/sentry/rules/conditions/test_level_event.py
+++ b/tests/sentry/rules/conditions/test_level_event.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-import logging
-
 from sentry.testutils.cases import RuleTestCase
 from sentry.rules.conditions.level import LevelCondition, MatchType
 
@@ -14,7 +12,7 @@ class LevelConditionTest(RuleTestCase):
         assert rule.render_label() == u"An event's level is equal to warning"
 
     def test_equals(self):
-        event = self.create_event(event_id="a" * 32, tags={"level": "info"})
+        event = self.store_event(data={"level": "info"}, project_id=self.project.id)
         rule = self.get_rule(data={"match": MatchType.EQUAL, "level": "20"})
         self.assertPasses(rule, event)
 
@@ -22,7 +20,7 @@ class LevelConditionTest(RuleTestCase):
         self.assertDoesNotPass(rule, event)
 
     def test_greater_than(self):
-        event = self.create_event(event_id="a" * 32, tags={"level": "info"})
+        event = self.store_event(data={"level": "info"}, project_id=self.project.id)
         rule = self.get_rule(data={"match": MatchType.GREATER_OR_EQUAL, "level": "40"})
         self.assertDoesNotPass(rule, event)
 
@@ -30,7 +28,7 @@ class LevelConditionTest(RuleTestCase):
         self.assertPasses(rule, event)
 
     def test_less_than(self):
-        event = self.create_event(event_id="a" * 32, tags={"level": "info"})
+        event = self.store_event(data={"level": "info"}, project_id=self.project.id)
         rule = self.get_rule(data={"match": MatchType.LESS_OR_EQUAL, "level": "10"})
         self.assertDoesNotPass(rule, event)
 
@@ -38,12 +36,7 @@ class LevelConditionTest(RuleTestCase):
         self.assertPasses(rule, event)
 
     def test_without_tag(self):
-        event = self.create_event(event_id="a" * 32)
-        rule = self.get_rule(data={"match": MatchType.EQUAL, "level": "30"})
-        self.assertDoesNotPass(rule, event)
-
-    def test_errors_with_invalid_level(self):
-        event = self.create_event(event_id="a" * 32, tags={"level": "foobar"})
+        event = self.store_event(data={}, project_id=self.project.id)
         rule = self.get_rule(data={"match": MatchType.EQUAL, "level": "30"})
         self.assertDoesNotPass(rule, event)
 
@@ -56,18 +49,11 @@ class LevelConditionTest(RuleTestCase):
     #
     # Specifically here to make sure the check is properly checking the event's level
     def test_differing_levels(self):
-
-        eevent = self.create_event(tags={"level": "error"})
-        wevent = self.create_event(tags={"level": "warning"})
-
+        eevent = self.store_event(data={"level": "error"}, project_id=self.project.id)
+        wevent = self.store_event(data={"level": "warning"}, project_id=self.project.id)
         assert wevent.event_id != eevent.event_id
         assert wevent.group.id == eevent.group.id
 
-        wevent.group.level = logging.WARNING
-
-        assert wevent.group.level == logging.WARNING
-        assert eevent.group.level == logging.WARNING
-
         rule = self.get_rule(data={"match": MatchType.GREATER_OR_EQUAL, "level": "40"})
         self.assertDoesNotPass(rule, wevent)
         self.assertPasses(rule, eevent)
diff --git a/tests/sentry/rules/test_processor.py b/tests/sentry/rules/test_processor.py
index f75733d886..c116b4a0c5 100644
--- a/tests/sentry/rules/test_processor.py
+++ b/tests/sentry/rules/test_processor.py
@@ -14,8 +14,7 @@ from sentry.rules.processor import EventCompatibilityProxy, RuleProcessor
 class RuleProcessorTest(TestCase):
     # this test relies on a few other tests passing
     def test_integrated(self):
-        event = self.create_event()
-
+        event = self.store_event(data={}, project_id=self.project.id)
         action_data = {"id": "sentry.rules.actions.notify_event.NotifyEventAction"}
         condition_data = {"id": "sentry.rules.conditions.every_event.EveryEventCondition"}
 
@@ -55,10 +54,12 @@ class RuleProcessorTest(TestCase):
 
 class EventCompatibilityProxyTest(TestCase):
     def test_simple(self):
-        event = self.create_event(
-            message="biz baz",
-            data={"logentry": {"message": "foo %s", "formatted": "foo bar", "params": ["bar"]}},
+        event = self.store_event(
+            data={
+                "message": "biz baz",
+                "logentry": {"message": "biz baz", "formatted": "foo bar", "params": ["bar"]},
+            },
+            project_id=self.project.id,
         )
-
         event_proxy = EventCompatibilityProxy(event)
         assert event_proxy.message == "foo bar"
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 38bb4e590d..a51b0e3177 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -10,7 +10,7 @@ from sentry.models import Group, GroupSnooze, GroupStatus, ProjectOwnership
 from sentry.ownership.grammar import Rule, Matcher, Owner, dump_schema
 from sentry.testutils import TestCase
 from sentry.testutils.helpers import with_feature
-from sentry.testutils.helpers.datetime import iso_format
+from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.tasks.merge import merge_groups
 from sentry.tasks.post_process import post_process_group
 
@@ -27,7 +27,16 @@ class PostProcessGroupTest(TestCase):
         mock_process_service_hook,
         mock_processor,
     ):
-        event = self.create_issueless_event(project=self.project)
+        min_ago = iso_format(before_now(minutes=1))
+        event = self.store_event(
+            data={
+                "type": "transaction",
+                "timestamp": min_ago,
+                "start_timestamp": min_ago,
+                "contexts": {"trace": {"trace_id": "b" * 32, "span_id": "c" * 16, "op": ""}},
+            },
+            project_id=self.project.id,
+        )
         post_process_group(
             event=event, is_new=True, is_regression=False, is_new_group_environment=True
         )
@@ -42,8 +51,7 @@ class PostProcessGroupTest(TestCase):
 
     @patch("sentry.rules.processor.RuleProcessor")
     def test_rule_processor(self, mock_processor):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
 
         mock_callback = Mock()
         mock_futures = [Mock()]
@@ -61,9 +69,9 @@ class PostProcessGroupTest(TestCase):
 
     @patch("sentry.rules.processor.RuleProcessor")
     def test_group_refresh(self, mock_processor):
-        group1 = self.create_group(project=self.project)
+        event = self.store_event(data={}, project_id=self.project.id)
+        group1 = event.group
         group2 = self.create_group(project=self.project)
-        event = self.create_event(group=group1)
 
         assert event.group_id == group1.id
         assert event.group == group1
@@ -85,8 +93,8 @@ class PostProcessGroupTest(TestCase):
 
     @patch("sentry.rules.processor.RuleProcessor")
     def test_invalidates_snooze(self, mock_processor):
-        group = self.create_group(project=self.project, status=GroupStatus.IGNORED)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
+        group = event.group
         snooze = GroupSnooze.objects.create(group=group, until=timezone.now() - timedelta(hours=1))
 
         # Check for has_reappeared=False if is_new=True
@@ -110,8 +118,8 @@ class PostProcessGroupTest(TestCase):
 
     @patch("sentry.rules.processor.RuleProcessor")
     def test_maintains_valid_snooze(self, mock_processor):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
+        group = event.group
         snooze = GroupSnooze.objects.create(group=group, until=timezone.now() + timedelta(hours=1))
 
         post_process_group(
@@ -221,9 +229,7 @@ class PostProcessGroupTest(TestCase):
 
     @patch("sentry.tasks.servicehooks.process_service_hook")
     def test_service_hook_fires_on_new_event(self, mock_process_service_hook):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
-
+        event = self.store_event(data={}, project_id=self.project.id)
         hook = self.create_service_hook(
             project=self.project,
             organization=self.project.organization,
@@ -241,8 +247,7 @@ class PostProcessGroupTest(TestCase):
     @patch("sentry.tasks.servicehooks.process_service_hook")
     @patch("sentry.rules.processor.RuleProcessor")
     def test_service_hook_fires_on_alert(self, mock_processor, mock_process_service_hook):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
 
         mock_callback = Mock()
         mock_futures = [Mock()]
@@ -268,8 +273,7 @@ class PostProcessGroupTest(TestCase):
     def test_service_hook_does_not_fire_without_alert(
         self, mock_processor, mock_process_service_hook
     ):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
 
         mock_processor.return_value.apply.return_value = []
 
@@ -289,8 +293,7 @@ class PostProcessGroupTest(TestCase):
 
     @patch("sentry.tasks.servicehooks.process_service_hook")
     def test_service_hook_does_not_fire_without_event(self, mock_process_service_hook):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
 
         self.create_service_hook(
             project=self.project, organization=self.project.organization, actor=self.user, events=[]
@@ -305,9 +308,8 @@ class PostProcessGroupTest(TestCase):
 
     @patch("sentry.tasks.sentry_apps.process_resource_change_bound.delay")
     def test_processes_resource_change_task_on_new_group(self, delay):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
-
+        event = self.store_event(data={}, project_id=self.project.id)
+        group = event.group
         post_process_group(
             event=event, is_new=True, is_regression=False, is_new_group_environment=False
         )
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index babae2006b..cffbcae115 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -140,11 +140,12 @@ class MergeGroupTest(TestCase):
 
     def test_merge_with_group_meta(self):
         project1 = self.create_project()
-        group1 = self.create_group(project1)
-        event1 = self.create_event("a" * 32, group=group1, data={"foo": "bar"})
+        event1 = self.store_event(data={}, project_id=project1.id)
+        group1 = event1.group
+
         project2 = self.create_project()
-        group2 = self.create_group(project2)
-        event2 = self.create_event("b" * 32, group=group2, data={"foo": "baz"})
+        event2 = self.store_event(data={}, project_id=project2.id)
+        group2 = event2.group
 
         GroupMeta.objects.create(group=event1.group, key="github:tid", value="134")
 
@@ -174,8 +175,9 @@ class MergeGroupTest(TestCase):
 
     def test_user_report_merge(self):
         project1 = self.create_project()
-        group1 = self.create_group(project1)
-        event1 = self.create_event("a" * 32, group=group1, data={"foo": "bar"})
+        event1 = self.store_event(data={}, project_id=project1.id)
+        group1 = event1.group
+
         project2 = self.create_project()
         group2 = self.create_group(project2)
         ur = UserReport.objects.create(project=project1, group=group1, event_id=event1.event_id)
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index 6e859b90da..b1d14f2014 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -80,17 +80,14 @@ class TestSendAlertEvent(TestCase):
 
     @patch("sentry.tasks.sentry_apps.safe_urlopen")
     def test_no_sentry_app(self, safe_urlopen):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
-
+        event = self.store_event(data={}, project_id=self.project.id)
         send_alert_event(event, self.rule, 9999)
 
         assert not safe_urlopen.called
 
     @patch("sentry.tasks.sentry_apps.safe_urlopen")
     def test_no_sentry_app_in_future(self, safe_urlopen):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
         rule_future = RuleFuture(rule=self.rule, kwargs={})
 
         with self.tasks():
@@ -101,8 +98,7 @@ class TestSendAlertEvent(TestCase):
     @patch("sentry.tasks.sentry_apps.safe_urlopen")
     def test_no_installation(self, safe_urlopen):
         sentry_app = self.create_sentry_app(organization=self.organization)
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
         rule_future = RuleFuture(rule=self.rule, kwargs={"sentry_app": sentry_app})
 
         with self.tasks():
@@ -112,8 +108,8 @@ class TestSendAlertEvent(TestCase):
 
     @patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockResponseInstance)
     def test_send_alert_event(self, safe_urlopen):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
+        event = self.store_event(data={}, project_id=self.project.id)
+        group = event.group
         rule_future = RuleFuture(rule=self.rule, kwargs={"sentry_app": self.sentry_app})
 
         with self.tasks():
@@ -179,9 +175,7 @@ class TestProcessResourceChange(TestCase):
         )
 
     def test_group_created_sends_webhook(self, safe_urlopen):
-        issue = self.create_group(project=self.project)
-        event = self.create_event(group=issue)
-
+        event = self.store_event(data={}, project_id=self.project.id)
         with self.tasks():
             post_process_group(
                 event=event, is_new=True, is_regression=False, is_new_group_environment=False
@@ -191,7 +185,7 @@ class TestProcessResourceChange(TestCase):
 
         assert data["action"] == "created"
         assert data["installation"]["uuid"] == self.install.uuid
-        assert data["data"]["issue"]["id"] == six.text_type(issue.id)
+        assert data["data"]["issue"]["id"] == six.text_type(event.group.id)
         assert faux(safe_urlopen).kwargs_contain("headers.Content-Type")
         assert faux(safe_urlopen).kwargs_contain("headers.Request-ID")
         assert faux(safe_urlopen).kwargs_contain("headers.Sentry-Hook-Resource")
diff --git a/tests/sentry/utils/test_committers.py b/tests/sentry/utils/test_committers.py
index e6cacbdcfa..9d380204f3 100644
--- a/tests/sentry/utils/test_committers.py
+++ b/tests/sentry/utils/test_committers.py
@@ -9,6 +9,7 @@ from uuid import uuid4
 
 from sentry.models import Commit, CommitAuthor, CommitFileChange, Release, Repository
 from sentry.testutils import TestCase
+from sentry.testutils.helpers.datetime import before_now, iso_format
 from sentry.utils.committers import (
     _get_commit_file_changes,
     _get_frame_paths,
@@ -222,37 +223,40 @@ class GetEventFileCommitters(CommitTestCase):
         )
 
     def test_java_sdk_path_mangling(self):
-        event = self.create_event(
-            group=self.group,
-            message="Kaboom!",
-            platform="java",
-            stacktrace={
-                "frames": [
-                    {
-                        "function": "invoke0",
-                        "abs_path": "NativeMethodAccessorImpl.java",
-                        "in_app": False,
-                        "module": "jdk.internal.reflect.NativeMethodAccessorImpl",
-                        "filename": "NativeMethodAccessorImpl.java",
-                    },
-                    {
-                        "function": "home",
-                        "abs_path": "Application.java",
-                        "module": "io.sentry.example.Application",
-                        "in_app": True,
-                        "lineno": 30,
-                        "filename": "Application.java",
-                    },
-                    {
-                        "function": "handledError",
-                        "abs_path": "Application.java",
-                        "module": "io.sentry.example.Application",
-                        "in_app": True,
-                        "lineno": 39,
-                        "filename": "Application.java",
-                    },
-                ]
+        event = self.store_event(
+            data={
+                "message": "Kaboom!",
+                "platform": "java",
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "invoke0",
+                            "abs_path": "NativeMethodAccessorImpl.java",
+                            "in_app": False,
+                            "module": "jdk.internal.reflect.NativeMethodAccessorImpl",
+                            "filename": "NativeMethodAccessorImpl.java",
+                        },
+                        {
+                            "function": "home",
+                            "abs_path": "Application.java",
+                            "module": "io.sentry.example.Application",
+                            "in_app": True,
+                            "lineno": 30,
+                            "filename": "Application.java",
+                        },
+                        {
+                            "function": "handledError",
+                            "abs_path": "Application.java",
+                            "module": "io.sentry.example.Application",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "Application.java",
+                        },
+                    ]
+                },
+                "tags": {"sentry:release": self.release.version},
             },
+            project_id=self.project.id,
         )
         self.release.set_commits(
             [
@@ -276,30 +280,34 @@ class GetEventFileCommitters(CommitTestCase):
         assert result[0]["commits"][0]["id"] == "a" * 40
 
     def test_matching(self):
-        event = self.create_event(
-            group=self.group,
-            message="Kaboom!",
-            platform="python",
-            stacktrace={
-                "frames": [
-                    {
-                        "function": "handle_set_commits",
-                        "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
-                        "module": "sentry.tasks",
-                        "in_app": True,
-                        "lineno": 30,
-                        "filename": "sentry/tasks.py",
-                    },
-                    {
-                        "function": "set_commits",
-                        "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
-                        "module": "sentry.models.release",
-                        "in_app": True,
-                        "lineno": 39,
-                        "filename": "sentry/models/release.py",
-                    },
-                ]
+        event = self.store_event(
+            data={
+                "message": "Kaboom!",
+                "platform": "python",
+                "timestamp": iso_format(before_now(seconds=1)),
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "handle_set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
+                            "module": "sentry.tasks",
+                            "in_app": True,
+                            "lineno": 30,
+                            "filename": "sentry/tasks.py",
+                        },
+                        {
+                            "function": "set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
+                            "module": "sentry.models.release",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "sentry/models/release.py",
+                        },
+                    ]
+                },
+                "tags": {"sentry:release": self.release.version},
             },
+            project_id=self.project.id,
         )
         self.release.set_commits(
             [
@@ -321,22 +329,25 @@ class GetEventFileCommitters(CommitTestCase):
         assert result[0]["commits"][0]["id"] == "a" * 40
 
     def test_matching_case_insensitive(self):
-        event = self.create_event(
-            group=self.group,
-            message="Kaboom!",
-            platform="cpp",
-            stacktrace={
-                "frames": [
-                    {
-                        "function": "roar",
-                        "abs_path": "/usr/src/app/TigerMachine.cpp",
-                        "module": "",
-                        "in_app": True,
-                        "lineno": 30,
-                        "filename": "app/TigerMachine.cpp",
-                    }
-                ]
+        event = self.store_event(
+            data={
+                "message": "Kaboom!",
+                "platform": "csp",
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "roar",
+                            "abs_path": "/usr/src/app/TigerMachine.cpp",
+                            "module": "",
+                            "in_app": True,
+                            "lineno": 30,
+                            "filename": "app/TigerMachine.cpp",
+                        }
+                    ]
+                },
+                "tags": {"sentry:release": self.release.version},
             },
+            project_id=self.project.id,
         )
         self.release.set_commits(
             [
@@ -358,30 +369,33 @@ class GetEventFileCommitters(CommitTestCase):
         assert result[0]["commits"][0]["id"] == "a" * 40
 
     def test_not_matching(self):
-        event = self.create_event(
-            group=self.group,
-            message="Kaboom!",
-            platform="python",
-            stacktrace={
-                "frames": [
-                    {
-                        "function": "handle_set_commits",
-                        "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
-                        "module": "sentry.tasks",
-                        "in_app": True,
-                        "lineno": 30,
-                        "filename": "sentry/tasks.py",
-                    },
-                    {
-                        "function": "set_commits",
-                        "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
-                        "module": "sentry.models.release",
-                        "in_app": True,
-                        "lineno": 39,
-                        "filename": "sentry/models/release.py",
-                    },
-                ]
+        event = self.store_event(
+            data={
+                "message": "Kaboom!",
+                "platform": "python",
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "handle_set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
+                            "module": "sentry.tasks",
+                            "in_app": True,
+                            "lineno": 30,
+                            "filename": "sentry/tasks.py",
+                        },
+                        {
+                            "function": "set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
+                            "module": "sentry.models.release",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "sentry/models/release.py",
+                        },
+                    ]
+                },
+                "tags": {"sentry:release": self.release.version},
             },
+            project_id=self.project.id,
         )
         self.release.set_commits(
             [
@@ -400,30 +414,33 @@ class GetEventFileCommitters(CommitTestCase):
         assert len(result) == 0
 
     def test_no_commits(self):
-        event = self.create_event(
-            group=self.group,
-            message="Kaboom!",
-            platform="python",
-            stacktrace={
-                "frames": [
-                    {
-                        "function": "handle_set_commits",
-                        "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
-                        "module": "sentry.tasks",
-                        "in_app": True,
-                        "lineno": 30,
-                        "filename": "sentry/tasks.py",
-                    },
-                    {
-                        "function": "set_commits",
-                        "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
-                        "module": "sentry.models.release",
-                        "in_app": True,
-                        "lineno": 39,
-                        "filename": "sentry/models/release.py",
-                    },
-                ]
+        event = self.store_event(
+            data={
+                "timestamp": iso_format(before_now(seconds=1)),
+                "message": "Kaboom!",
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "handle_set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
+                            "module": "sentry.tasks",
+                            "in_app": True,
+                            "lineno": 30,
+                            "filename": "sentry/tasks.py",
+                        },
+                        {
+                            "function": "set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
+                            "module": "sentry.models.release",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "sentry/models/release.py",
+                        },
+                    ]
+                },
+                "tags": {"sentry:release": self.release.version},
             },
+            project_id=self.project.id,
         )
 
         with self.assertRaises(Commit.DoesNotExist):
diff --git a/tests/sentry/web/frontend/test_mailgun_inbound_webhook.py b/tests/sentry/web/frontend/test_mailgun_inbound_webhook.py
index baeacaeff5..bb5d9269de 100644
--- a/tests/sentry/web/frontend/test_mailgun_inbound_webhook.py
+++ b/tests/sentry/web/frontend/test_mailgun_inbound_webhook.py
@@ -13,7 +13,7 @@ body_plain = "foo bar"
 class TestMailgunInboundWebhookView(TestCase):
     def setUp(self):
         super(TestMailgunInboundWebhookView, self).setUp()
-        self.event = self.create_event(event_id="a" * 32)
+        self.event = self.store_event(data={"event_id": "a" * 32}, project_id=self.project.id)
         self.mailto = group_id_to_email(self.group.pk)
 
     @mock.patch("sentry.web.frontend.mailgun_inbound_webhook.process_inbound_email")
diff --git a/tests/sentry_plugins/pagerduty/test_plugin.py b/tests/sentry_plugins/pagerduty/test_plugin.py
index c893f20cc6..e4818224e8 100644
--- a/tests/sentry_plugins/pagerduty/test_plugin.py
+++ b/tests/sentry_plugins/pagerduty/test_plugin.py
@@ -53,8 +53,16 @@ class PagerDutyPluginTest(PluginTestCase):
         )
         self.plugin.set_option("service_key", "abcdef", self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+        event = self.store_event(
+            data={
+                "message": "Hello world",
+                "level": "warning",
+                "platform": "python",
+                "culprit": "foo.bar",
+            },
+            project_id=self.project.id,
+        )
+        group = event.group
 
         rule = Rule.objects.create(project=self.project, label="my rule")
 
diff --git a/tests/sentry_plugins/pushover/test_plugin.py b/tests/sentry_plugins/pushover/test_plugin.py
index 7acf3f8442..83dc9e9664 100644
--- a/tests/sentry_plugins/pushover/test_plugin.py
+++ b/tests/sentry_plugins/pushover/test_plugin.py
@@ -39,8 +39,10 @@ class PushoverPluginTest(PluginTestCase):
         self.plugin.set_option("userkey", "abcdef", self.project)
         self.plugin.set_option("apikey", "ghijkl", self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+        event = self.store_event(
+            data={"message": "Hello world", "level": "warning"}, project_id=self.project.id
+        )
+        group = event.group
 
         rule = Rule.objects.create(project=self.project, label="my rule")
 
@@ -76,8 +78,10 @@ class PushoverPluginTest(PluginTestCase):
         self.plugin.set_option("expire", 90, self.project)
         self.plugin.set_option("retry", 30, self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+        event = self.store_event(
+            data={"message": "Hello world", "level": "warning"}, project_id=self.project.id
+        )
+        group = event.group
 
         rule = Rule.objects.create(project=self.project, label="my rule")
 
diff --git a/tests/sentry_plugins/segment/test_plugin.py b/tests/sentry_plugins/segment/test_plugin.py
index 1770f38196..33fb9e5464 100644
--- a/tests/sentry_plugins/segment/test_plugin.py
+++ b/tests/sentry_plugins/segment/test_plugin.py
@@ -26,16 +26,15 @@ class SegmentPluginTest(PluginTestCase):
 
         self.plugin.set_option("write_key", "secret-api-key", self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(
-            group=group,
+        event = self.store_event(
             data={
-                "sentry.interfaces.Exception": {"type": "ValueError", "value": "foo bar"},
-                "sentry.interfaces.User": {"id": "1", "email": "foo@example.com"},
+                "exception": {"type": "ValueError", "value": "foo bar"},
+                "user": {"id": "1", "email": "foo@example.com"},
                 "type": "error",
                 "metadata": {"type": "ValueError", "value": "foo bar"},
+                "level": "warning",
             },
-            tags={"level": "warning"},
+            project_id=self.project.id,
         )
 
         with self.options({"system.url-prefix": "http://example.com"}):
diff --git a/tests/sentry_plugins/slack/test_plugin.py b/tests/sentry_plugins/slack/test_plugin.py
index 7553cd3cb9..08c2af02df 100644
--- a/tests/sentry_plugins/slack/test_plugin.py
+++ b/tests/sentry_plugins/slack/test_plugin.py
@@ -28,8 +28,11 @@ class SlackPluginTest(PluginTestCase):
         responses.add("POST", "http://example.com/slack")
         self.plugin.set_option("webhook", "http://example.com/slack", self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+        event = self.store_event(
+            data={"message": "Hello world", "level": "warning", "culprit": "foo.bar"},
+            project_id=self.project.id,
+        )
+        group = event.group
 
         rule = Rule.objects.create(project=self.project, label="my rule")
 
@@ -63,8 +66,10 @@ class SlackPluginTest(PluginTestCase):
         self.plugin.set_option("webhook", "http://example.com/slack", self.project)
         self.plugin.set_option("exclude_culprit", True, self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+        event = self.store_event(
+            data={"message": "Hello world", "level": "warning"}, project_id=self.project.id
+        )
+        group = event.group
 
         rule = Rule.objects.create(project=self.project, label="my rule")
 
@@ -95,8 +100,11 @@ class SlackPluginTest(PluginTestCase):
         self.plugin.set_option("webhook", "http://example.com/slack", self.project)
         self.plugin.set_option("exclude_project", True, self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+        event = self.store_event(
+            data={"message": "Hello world", "level": "warning", "culprit": "foo.bar"},
+            project_id=self.project.id,
+        )
+        group = event.group
 
         rule = Rule.objects.create(project=self.project, label="my rule")
 
diff --git a/tests/sentry_plugins/splunk/test_plugin.py b/tests/sentry_plugins/splunk/test_plugin.py
index b57dd940ea..b53febfee9 100644
--- a/tests/sentry_plugins/splunk/test_plugin.py
+++ b/tests/sentry_plugins/splunk/test_plugin.py
@@ -28,17 +28,9 @@ class SplunkPluginTest(PluginTestCase):
         self.plugin.set_option("index", "main", self.project)
         self.plugin.set_option("instance", "https://splunk.example.com:8088", self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(
-            group=group,
-            data={
-                "sentry.interfaces.Exception": {"type": "ValueError", "value": "foo bar"},
-                "sentry.interfaces.User": {"id": "1", "email": "foo@example.com"},
-                "type": "error",
-            },
-            tags={"level": "warning"},
+        event = self.store_event(
+            data={"message": "Hello world", "level": "warning"}, project_id=self.project.id
         )
-
         with self.options({"system.url-prefix": "http://example.com"}):
             self.plugin.post_process(event)
 
@@ -54,15 +46,15 @@ class SplunkPluginTest(PluginTestCase):
         assert headers["Authorization"] == "Splunk 12345678-1234-1234-1234-1234567890AB"
 
     def test_http_payload(self):
-        event = self.create_event(
-            group=self.group,
+        event = self.store_event(
             data={
-                "sentry.interfaces.Http": {
+                "request": {
                     "url": "http://example.com",
                     "method": "POST",
                     "headers": {"Referer": "http://example.com/foo"},
                 }
             },
+            project_id=self.project.id,
         )
 
         result = self.plugin.get_event_payload(event)
@@ -71,14 +63,12 @@ class SplunkPluginTest(PluginTestCase):
         assert result["request_referer"] == "http://example.com/foo"
 
     def test_error_payload(self):
-        event = self.create_event(
-            group=self.group,
+        event = self.store_event(
             data={
-                "sentry.interfaces.Exception": {
-                    "values": [{"type": "ValueError", "value": "foo bar"}]
-                },
+                "exception": {"values": [{"type": "ValueError", "value": "foo bar"}]},
                 "type": "error",
             },
+            project_id=self.project.id,
         )
 
         result = self.plugin.get_event_payload(event)
@@ -87,8 +77,7 @@ class SplunkPluginTest(PluginTestCase):
         assert result["exception_value"] == "foo bar"
 
     def test_csp_payload(self):
-        event = self.create_event(
-            group=self.group,
+        event = self.store_event(
             data={
                 "csp": {
                     "document_uri": "http://example.com/",
@@ -98,6 +87,7 @@ class SplunkPluginTest(PluginTestCase):
                 },
                 "type": "csp",
             },
+            project_id=self.project.id,
         )
 
         result = self.plugin.get_event_payload(event)
@@ -108,15 +98,9 @@ class SplunkPluginTest(PluginTestCase):
         assert result["csp_effective_directive"] == "style-src"
 
     def test_user_payload(self):
-        event = self.create_event(
-            group=self.group,
-            data={
-                "sentry.interfaces.User": {
-                    "id": "1",
-                    "email": "foo@example.com",
-                    "ip_address": "127.0.0.1",
-                }
-            },
+        event = self.store_event(
+            data={"user": {"id": "1", "email": "foo@example.com", "ip_address": "127.0.0.1"}},
+            project_id=self.project.id,
         )
 
         result = self.plugin.get_event_payload(event)
diff --git a/tests/sentry_plugins/victorops/test_plugin.py b/tests/sentry_plugins/victorops/test_plugin.py
index 322cb79702..b54d4c9d1d 100644
--- a/tests/sentry_plugins/victorops/test_plugin.py
+++ b/tests/sentry_plugins/victorops/test_plugin.py
@@ -54,8 +54,26 @@ class VictorOpsPluginTest(PluginTestCase):
         self.plugin.set_option("api_key", "secret-api-key", self.project)
         self.plugin.set_option("routing_key", "everyone", self.project)
 
-        group = self.create_group(message="Hello world", culprit="foo.bar")
-        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+        event = self.store_event(
+            data={
+                "message": "Hello world",
+                "level": "warning",
+                "culprit": "foo.bar",
+                "platform": "python",
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "filename": "sentry/models/foo.py",
+                            "context_line": "                        string_max_length=self.string_max_length)",
+                            "function": "build_msg",
+                            "lineno": 29,
+                        }
+                    ]
+                },
+            },
+            project_id=self.project.id,
+        )
+        group = event.group
 
         rule = Rule.objects.create(project=self.project, label="my rule")
 
@@ -79,8 +97,10 @@ class VictorOpsPluginTest(PluginTestCase):
         } == payload
 
     def test_build_description_unicode(self):
-        group = self.create_group(message=u"Message", culprit=u"foo.bar")
-        event = self.create_event(group=group, message=u"Messages", tags={u"level": u"error"})
+        event = self.store_event(
+            data={"message": u"abcd\xde\xb4", "culprit": "foo.bar", "level": "error"},
+            project_id=self.project.id,
+        )
         event.interfaces = {
             u"Message": UnicodeTestInterface(u"abcd\xde\xb4", u"\xdc\xea\x80\x80abcd\xde\xb4")
         }
diff --git a/tests/snuba/api/endpoints/test_discover_query.py b/tests/snuba/api/endpoints/test_discover_query.py
index 8f53d5d15a..645b6b0bbb 100644
--- a/tests/snuba/api/endpoints/test_discover_query.py
+++ b/tests/snuba/api/endpoints/test_discover_query.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import
 
+import pytest
+
 from datetime import datetime, timedelta
+from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
-from sentry.testutils.helpers.datetime import iso_format
-from django.core.urlresolvers import reverse
+from sentry.testutils.helpers.datetime import before_now, iso_format
 
 
 class DiscoverQueryTest(APITestCase, SnubaTestCase):
@@ -12,7 +14,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
         super(DiscoverQueryTest, self).setUp()
 
         self.now = datetime.now()
-        one_second_ago = self.now - timedelta(seconds=1)
+        self.one_second_ago = iso_format(before_now(seconds=1))
 
         self.login_as(user=self.user, superuser=False)
 
@@ -22,15 +24,12 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
 
         self.other_project = self.create_project(name="other")
 
-        self.group = self.create_group(project=self.project, short_id=20)
-
-        self.event = self.create_event(
-            group=self.group,
-            platform="python",
-            datetime=one_second_ago,
-            tags={"environment": "production", "sentry:release": "foo", "error.custom": "custom"},
+        self.event = self.store_event(
             data={
-                "message": "message!",
+                "platform": "python",
+                "timestamp": self.one_second_ago,
+                "environment": "production",
+                "tags": {"sentry:release": "foo", "error.custom": "custom"},
                 "exception": {
                     "values": [
                         {
@@ -52,6 +51,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                     ]
                 },
             },
+            project_id=self.project.id,
         )
 
     def test(self):
@@ -61,7 +61,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                 url,
                 {
                     "projects": [self.project.id],
-                    "fields": ["message", "platform.name"],
+                    "fields": ["environment", "platform.name"],
                     "start": iso_format(datetime.now() - timedelta(seconds=10)),
                     "end": iso_format(datetime.now()),
                     "orderby": "-timestamp",
@@ -71,7 +71,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data["data"]) == 1
-        assert response.data["data"][0]["message"] == "message!"
+        assert response.data["data"][0]["environment"] == "production"
         assert response.data["data"][0]["platform.name"] == "python"
 
     def test_relative_dates(self):
@@ -81,7 +81,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                 url,
                 {
                     "projects": [self.project.id],
-                    "fields": ["message", "platform.name"],
+                    "fields": ["environment", "platform.name"],
                     "range": "1d",
                     "orderby": "-timestamp",
                     "start": None,
@@ -91,7 +91,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data["data"]) == 1
-        assert response.data["data"][0]["message"] == "message!"
+        assert response.data["data"][0]["environment"] == "production"
         assert response.data["data"][0]["platform.name"] == "python"
 
     def test_invalid_date_request(self):
@@ -130,23 +130,24 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
 
     def test_conditional_fields(self):
         with self.feature("organizations:discover"):
-            one_second_ago = self.now - timedelta(seconds=1)
-            self.create_event(
-                group=self.group,
-                platform="javascript",
-                datetime=one_second_ago,
-                tags={"environment": "production", "sentry:release": "bar"},
-                data={},
+            self.store_event(
+                data={
+                    "platform": "javascript",
+                    "environment": "production",
+                    "tags": {"sentry:release": "bar"},
+                    "timestamp": self.one_second_ago,
+                },
+                project_id=self.project.id,
             )
-
-            self.create_event(
-                group=self.group,
-                platform="javascript",
-                datetime=one_second_ago,
-                tags={"environment": "production", "sentry:release": "baz"},
-                data={},
+            self.store_event(
+                data={
+                    "platform": "javascript",
+                    "environment": "production",
+                    "tags": {"sentry:release": "baz"},
+                    "timestamp": self.one_second_ago,
+                },
+                project_id=self.project.id,
             )
-
             url = reverse("sentry-api-0-discover-query", args=[self.org.slug])
             response = self.client.post(
                 url,
@@ -218,6 +219,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 400, response.content
 
+    @pytest.mark.xfail(reason="Failing due to constrain_columns_to_dataset")
     def test_boolean_condition(self):
         with self.feature("organizations:discover"):
             url = reverse("sentry-api-0-discover-query", args=[self.org.slug])
@@ -225,7 +227,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                 url,
                 {
                     "projects": [self.project.id],
-                    "fields": ["message", "platform.name", "stack.in_app"],
+                    "fields": ["environment", "platform.name"],
                     "conditions": [["stack.in_app", "=", True]],
                     "start": (datetime.now() - timedelta(seconds=10)).strftime("%Y-%m-%dT%H:%M:%S"),
                     "end": (datetime.now()).strftime("%Y-%m-%dT%H:%M:%S"),
@@ -236,7 +238,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data["data"]) == 1
-        assert response.data["data"][0]["message"] == "message!"
+        assert response.data["data"][0]["environment"] == "production"
         assert response.data["data"][0]["platform.name"] == "python"
 
     def test_strip_double_quotes_in_condition_strings(self):
@@ -246,8 +248,8 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
                 url,
                 {
                     "projects": [self.project.id],
-                    "fields": ["message"],
-                    "conditions": [["message", "=", '"message!"']],
+                    "fields": ["environment"],
+                    "conditions": [["environment", "=", '"production"']],
                     "range": "14d",
                     "orderby": "-timestamp",
                 },
@@ -255,7 +257,7 @@ class DiscoverQueryTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data["data"]) == 1
-        assert response.data["data"][0]["message"] == "message!"
+        assert response.data["data"][0]["environment"] == "production"
 
     def test_array_join(self):
         with self.feature("organizations:discover"):
diff --git a/tests/snuba/api/endpoints/test_group_events.py b/tests/snuba/api/endpoints/test_group_events.py
index aec15c6cbe..22fc80bc2f 100644
--- a/tests/snuba/api/endpoints/test_group_events.py
+++ b/tests/snuba/api/endpoints/test_group_events.py
@@ -18,11 +18,24 @@ class GroupEventsTest(APITestCase, SnubaTestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        group = self.create_group()
-        event_1 = self.create_event(event_id="a" * 32, datetime=self.min_ago, group=group)
-        event_2 = self.create_event(event_id="b" * 32, datetime=self.min_ago, group=group)
+        event_1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "fingerprint": ["1"],
+                "timestamp": iso_format(self.min_ago),
+            },
+            project_id=self.project.id,
+        )
+        event_2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "fingerprint": ["1"],
+                "timestamp": iso_format(self.min_ago),
+            },
+            project_id=self.project.id,
+        )
 
-        url = u"/api/0/issues/{}/events/".format(group.id)
+        url = u"/api/0/issues/{}/events/".format(event_1.group.id)
         response = self.client.get(url, format="json")
 
         assert response.status_code == 200, response.content
@@ -33,19 +46,25 @@ class GroupEventsTest(APITestCase, SnubaTestCase):
 
     def test_tags(self):
         self.login_as(user=self.user)
-
-        group = self.create_group()
-        event_1 = self.create_event(
-            event_id="a" * 32, datetime=self.min_ago, group=group, tags={"foo": "baz", "bar": "buz"}
+        event_1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "fingerprint": ["1"],
+                "tags": {"foo": "baz", "bar": "buz"},
+                "timestamp": iso_format(self.min_ago),
+            },
+            project_id=self.project.id,
         )
-        event_2 = self.create_event(
-            event_id="b" * 32,
-            datetime=self.min_ago - timedelta(minutes=1),
-            group=group,
-            tags={"bar": "biz"},
+        event_2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "fingerprint": ["1"],
+                "tags": {"bar": "biz"},
+                "timestamp": iso_format(before_now(seconds=61)),
+            },
+            project_id=self.project.id,
         )
-
-        url = u"/api/0/issues/{}/events/".format(group.id)
+        url = u"/api/0/issues/{}/events/".format(event_1.group.id)
         response = self.client.get(url + "?query=foo:baz", format="json")
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
@@ -89,17 +108,29 @@ class GroupEventsTest(APITestCase, SnubaTestCase):
         response = self.client.get(url + "?query=!bar:baz", format="json")
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
-        assert response.data[0]["eventID"] == six.text_type(event_1.event_id)
-        assert response.data[1]["eventID"] == six.text_type(event_2.event_id)
+        assert set([e["eventID"] for e in response.data]) == set(
+            [event_1.event_id, event_2.event_id]
+        )
 
     def test_search_event_by_id(self):
         self.login_as(user=self.user)
-
-        group = self.create_group()
-        event_1 = self.create_event(event_id="a" * 32, datetime=self.min_ago, group=group)
-        self.create_event(event_id="b" * 32, datetime=self.min_ago, group=group)
-
-        url = u"/api/0/issues/{}/events/?query={}".format(group.id, event_1.event_id)
+        event_1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "fingerprint": ["group-1"],
+                "timestamp": iso_format(self.min_ago),
+            },
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "fingerprint": ["group-1"],
+                "timestamp": iso_format(self.min_ago),
+            },
+            project_id=self.project.id,
+        )
+        url = u"/api/0/issues/{}/events/?query={}".format(event_1.group.id, event_1.event_id)
         response = self.client.get(url, format="json")
 
         assert response.status_code == 200, response.content
@@ -109,14 +140,26 @@ class GroupEventsTest(APITestCase, SnubaTestCase):
     def test_search_event_by_message(self):
         self.login_as(user=self.user)
 
-        group = self.create_group()
-        event_1 = self.create_event(
-            event_id="a" * 32, datetime=self.min_ago, group=group, message="foo bar hello world"
+        event_1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "fingerprint": ["group-1"],
+                "message": "foo bar hello world",
+                "timestamp": iso_format(self.min_ago),
+            },
+            project_id=self.project.id,
         )
-
-        event_2 = self.create_event(
-            event_id="b" * 32, datetime=self.min_ago, group=group, message="this bar hello world "
+        group = event_1.group
+        event_2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "fingerprint": ["group-1"],
+                "message": "this bar hello world",
+                "timestamp": iso_format(self.min_ago),
+            },
+            project_id=self.project.id,
         )
+        assert group == event_2.group
 
         query_1 = "foo"
         query_2 = "hello+world"
@@ -186,13 +229,15 @@ class GroupEventsTest(APITestCase, SnubaTestCase):
 
     def test_filters_based_on_retention(self):
         self.login_as(user=self.user)
-
-        project = self.create_project()
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id="a" * 32, group=group, datetime=timezone.now() - timedelta(days=2)
+        self.store_event(
+            data={"fingerprint": ["group_1"], "timestamp": iso_format(before_now(days=2))},
+            project_id=self.project.id,
+        )
+        event_2 = self.store_event(
+            data={"fingerprint": ["group_1"], "timestamp": iso_format(self.min_ago)},
+            project_id=self.project.id,
         )
-        event_2 = self.create_event(event_id="b" * 32, datetime=self.min_ago, group=group)
+        group = event_2.group
 
         with self.options({"system.event-retention-days": 1}):
             response = self.client.get(u"/api/0/issues/{}/events/".format(group.id))
@@ -205,43 +250,34 @@ class GroupEventsTest(APITestCase, SnubaTestCase):
 
     def test_search_event_has_tags(self):
         self.login_as(user=self.user)
-
-        group = self.create_group()
-        self.create_event(
-            event_id="a" * 32,
-            datetime=self.min_ago,
-            group=group,
-            message="foo",
-            tags={"logger": "python"},
+        event = self.store_event(
+            data={
+                "timestamp": iso_format(self.min_ago),
+                "message": "foo",
+                "tags": {"logger": "python"},
+            },
+            project_id=self.project.id,
         )
 
-        response = self.client.get(u"/api/0/issues/{}/events/".format(group.id))
+        response = self.client.get(u"/api/0/issues/{}/events/".format(event.group.id))
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]["tags"][0]["key"] == "logger"
-        assert response.data[0]["tags"][0]["value"] == "python"
+        assert {"key": "logger", "value": "python"} in response.data[0]["tags"]
 
     @freeze_time()
     def test_date_filters(self):
         self.login_as(user=self.user)
-
-        first_seen = timezone.now() - timedelta(days=5)
-
-        group = self.create_group(first_seen=first_seen)
-        event_1 = self.create_event(
-            event_id="a" * 32,
-            datetime=first_seen,
-            group=group,
-            message="foo",
-            tags={"logger": "python"},
+        event_1 = self.store_event(
+            data={"timestamp": iso_format(before_now(days=5)), "fingerprint": ["group-1"]},
+            project_id=self.project.id,
         )
-        event_2 = self.create_event(
-            event_id="b" * 32,
-            datetime=timezone.now() - timedelta(days=1),
-            group=group,
-            message="bar",
+        event_2 = self.store_event(
+            data={"timestamp": iso_format(before_now(days=1)), "fingerprint": ["group-1"]},
+            project_id=self.project.id,
         )
+        group = event_1.group
+        assert group == event_2.group
 
         response = self.client.get(
             u"/api/0/issues/{}/events/".format(group.id), data={"statsPeriod": "6d"}
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 2c022dd3c9..336c8f3d23 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -13,8 +13,8 @@ from sentry.testutils.helpers.datetime import before_now, iso_format
 class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationEventsEndpointTest, self).setUp()
-        self.min_ago = before_now(minutes=1)
-        self.day_ago = before_now(days=1)
+        self.min_ago = iso_format(before_now(minutes=1))
+        self.day_ago = iso_format(before_now(days=1))
 
     def assert_events_in_response(self, response, event_ids):
         assert sorted(map(lambda x: x["eventID"], response.data)) == sorted(event_ids)
@@ -26,12 +26,10 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         project2 = self.create_project()
 
         event_1 = self.store_event(
-            data={"event_id": "a" * 32, "timestamp": iso_format(self.min_ago)},
-            project_id=project.id,
+            data={"event_id": "a" * 32, "timestamp": self.min_ago}, project_id=project.id
         )
         event_2 = self.store_event(
-            data={"event_id": "b" * 32, "timestamp": iso_format(self.min_ago)},
-            project_id=project2.id,
+            data={"event_id": "b" * 32, "timestamp": self.min_ago}, project_id=project2.id
         )
 
         url = reverse(
@@ -50,11 +48,14 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
 
         project = self.create_project()
         project2 = self.create_project()
-        group = self.create_group(project=project)
-        group2 = self.create_group(project=project2)
-        event_1 = self.create_event(event_id="a" * 32, group=group, datetime=self.min_ago)
-        event_2 = self.create_event(event_id="b" * 32, group=group2, datetime=self.min_ago)
-
+        event_1 = self.store_event(
+            data={"event_id": "a" * 32, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
+        )
+        event_2 = self.store_event(
+            data={"event_id": "b" * 32, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project2.id,
+        )
         url = reverse(
             "sentry-api-0-organization-events",
             kwargs={"organization_slug": project.organization.slug},
@@ -69,14 +70,14 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id="x" * 32, group=group, message="how to make fast", datetime=self.min_ago
+        self.store_event(
+            data={"message": "how to make fast", "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
         )
-        event_2 = self.create_event(
-            event_id="y" * 32, group=group, message="Delet the Data", datetime=self.min_ago
+        event_2 = self.store_event(
+            data={"message": "Delet the Data", "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
         )
-
         url = reverse(
             "sentry-api-0-organization-events",
             kwargs={"organization_slug": project.organization.slug},
@@ -92,16 +93,25 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        event_1 = self.create_event(
-            event_id="x" * 32, group=group, message="how to make fast", datetime=self.min_ago
+
+        event_1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "message": "how to make fast",
+                "timestamp": iso_format(before_now(seconds=1)),
+                "fingerprint": ["group-1"],
+            },
+            project_id=project.id,
         )
-        event_2 = self.create_event(
-            event_id="y" * 32,
-            group=group,
-            message="Delet the Data",
-            datetime=self.min_ago,
-            user={"email": "foo@example.com"},
+        event_2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "message": "Delet the Data",
+                "timestamp": iso_format(before_now(seconds=1)),
+                "fingerprint": ["group-1"],
+                "user": {"email": "foo@example.com"},
+            },
+            project_id=project.id,
         )
 
         url = reverse(
@@ -125,11 +135,9 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id="x" * 32, group=group, message="how to make fast", datetime=self.min_ago
+        self.store_event(
+            data={"event_id": "a" * 32, "message": "how to make fast"}, project_id=project.id
         )
-
         url = reverse(
             "sentry-api-0-organization-events",
             kwargs={"organization_slug": project.organization.slug},
@@ -168,13 +176,15 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         project = self.create_project(organization=org, teams=[team])
         project2 = self.create_project(organization=org, teams=[team])
         project3 = self.create_project(organization=org)
-        group = self.create_group(project=project)
-        group2 = self.create_group(project=project2)
-        group3 = self.create_group(project=project3)
-        event_1 = self.create_event(event_id="a" * 32, group=group, datetime=self.min_ago)
-        event_2 = self.create_event(event_id="b" * 32, group=group2, datetime=self.min_ago)
-        self.create_event(event_id="c" * 32, group=group3, datetime=self.min_ago)
-
+        event_1 = self.store_event(
+            data={"event_id": "a" * 32, "timestamp": self.min_ago}, project_id=project.id
+        )
+        event_2 = self.store_event(
+            data={"event_id": "b" * 32, "timestamp": self.min_ago}, project_id=project2.id
+        )
+        self.store_event(
+            data={"event_id": "c" * 32, "timestamp": self.min_ago}, project_id=project3.id
+        )
         base_url = reverse(
             "sentry-api-0-organization-events",
             kwargs={"organization_slug": project.organization.slug},
@@ -211,11 +221,12 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
 
         project = self.create_project()
         project2 = self.create_project()
-        group = self.create_group(project=project)
-        group2 = self.create_group(project=project2)
-        event_1 = self.create_event(event_id="a" * 32, group=group, datetime=self.min_ago)
-        self.create_event(event_id="b" * 32, group=group2, datetime=self.day_ago)
-
+        event_1 = self.store_event(
+            data={"event_id": "a" * 32, "timestamp": self.min_ago}, project_id=project.id
+        )
+        self.store_event(
+            data={"event_id": "b" * 32, "timestamp": self.day_ago}, project_id=project2.id
+        )
         url = reverse(
             "sentry-api-0-organization-events",
             kwargs={"organization_slug": project.organization.slug},
@@ -232,10 +243,12 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
 
         project = self.create_project()
         project2 = self.create_project()
-        group = self.create_group(project=project)
-        group2 = self.create_group(project=project2)
-        event_1 = self.create_event(event_id="a" * 32, group=group, datetime=self.min_ago)
-        self.create_event(event_id="b" * 32, group=group2, datetime=self.day_ago)
+        event_1 = self.store_event(
+            data={"event_id": "a" * 32, "timestamp": self.min_ago}, project_id=project.id
+        )
+        self.store_event(
+            data={"event_id": "b" * 32, "timestamp": self.day_ago}, project_id=project2.id
+        )
 
         now = timezone.now()
 
@@ -286,7 +299,7 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
                 self.store_event(
                     data={
                         "event_id": event_id,
-                        "timestamp": iso_format(self.min_ago),
+                        "timestamp": self.min_ago,
                         "fingerprint": ["put-me-in-group1"],
                         "environment": env.name or None,
                     },
@@ -364,15 +377,24 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         self.login_as(user=user)
 
         project = self.create_project(organization=org, teams=[team])
-        group = self.create_group(project=project)
-
-        event_1 = self.create_event(
-            event_id="a" * 32, group=group, datetime=self.min_ago, tags={"fruit": "apple"}
+        event_1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "tags": {"fruit": "apple"},
+                "fingerprint": ["group-1"],
+                "timestamp": iso_format(before_now(seconds=1)),
+            },
+            project_id=project.id,
         )
-        event_2 = self.create_event(
-            event_id="b" * 32, group=group, datetime=self.min_ago, tags={"fruit": "orange"}
+        event_2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "tags": {"fruit": "orange"},
+                "fingerprint": ["group-1"],
+                "timestamp": iso_format(before_now(seconds=1)),
+            },
+            project_id=project.id,
         )
-
         base_url = reverse(
             "sentry-api-0-organization-events", kwargs={"organization_slug": org.slug}
         )
@@ -395,23 +417,38 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         self.login_as(user=user)
 
         project = self.create_project(organization=org, teams=[team])
-        group = self.create_group(project=project)
 
-        event_1 = self.create_event(
-            event_id="a" * 32, group=group, datetime=self.min_ago, tags={"sentry:release": "3.1.2"}
+        event_1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "tags": {"sentry:release": "3.1.2"},
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
         )
-        event_2 = self.create_event(
-            event_id="b" * 32, group=group, datetime=self.min_ago, tags={"sentry:release": "4.1.2"}
+        event_2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "tags": {"sentry:release": "4.1.2"},
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
         )
-        event_3 = self.create_event(
-            event_id="c" * 32, group=group, datetime=self.min_ago, user={"email": "foo@example.com"}
+        event_3 = self.store_event(
+            data={
+                "event_id": "c" * 32,
+                "user": {"email": "foo@example.com"},
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
         )
-
-        event_4 = self.create_event(
-            event_id="d" * 32,
-            group=group,
-            datetime=self.min_ago,
-            user={"email": "foo@example.commmmmmmm"},
+        event_4 = self.store_event(
+            data={
+                "event_id": "d" * 32,
+                "user": {"email": "foo@example.commmmmmmm"},
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
         )
 
         base_url = reverse(
@@ -453,16 +490,21 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         self.login_as(user=user)
 
         project = self.create_project(organization=org, teams=[team])
-        group = self.create_group(project=project)
-
-        event_1 = self.create_event(
-            event_id="a" * 32, group=group, datetime=self.min_ago, user={"email": "foo@example.com"}
+        event_1 = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "user": {"email": "foo@example.com"},
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
         )
-        event_2 = self.create_event(
-            event_id="b" * 32,
-            group=group,
-            datetime=self.min_ago,
-            tags={"example_tag": "example_value"},
+        event_2 = self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "tags": {"example_tag": "example_value"},
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
         )
 
         base_url = reverse(
@@ -510,11 +552,10 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         self.login_as(user=user)
 
         project = self.create_project(organization=org, teams=[team])
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id="a" * 32, group=group, message="best event", datetime=self.min_ago
+        self.store_event(
+            data={"event_id": "a" * 32, "message": "best event", "timestamp": self.min_ago},
+            project_id=project.id,
         )
-
         url = reverse("sentry-api-0-organization-events", kwargs={"organization_slug": org.slug})
 
         response = self.client.get(url, {"query": "a" * 32}, format="json")
@@ -561,7 +602,7 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
                 self.store_event(
                     data={
                         "event_id": event_id,
-                        "timestamp": iso_format(self.min_ago),
+                        "timestamp": self.min_ago,
                         "fingerprint": [fingerprint],
                     },
                     project_id=project.id,
@@ -607,11 +648,7 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         team = self.create_team(organization=self.organization, members=[self.user])
         project = self.create_project(organization=self.organization, teams=[team])
         self.store_event(
-            data={
-                "event_id": "a" * 32,
-                "message": "best event",
-                "timestamp": iso_format(self.min_ago),
-            },
+            data={"event_id": "a" * 32, "message": "best event", "timestamp": self.min_ago},
             project_id=project.id,
         )
         url = reverse(
diff --git a/tests/snuba/api/endpoints/test_organization_events_meta.py b/tests/snuba/api/endpoints/test_organization_events_meta.py
index 96bfaeac93..821d2d5755 100644
--- a/tests/snuba/api/endpoints/test_organization_events_meta.py
+++ b/tests/snuba/api/endpoints/test_organization_events_meta.py
@@ -16,10 +16,9 @@ class OrganizationEventsMetaEndpoint(APITestCase, SnubaTestCase):
 
         project = self.create_project()
         project2 = self.create_project()
-        group = self.create_group(project=project)
-        group2 = self.create_group(project=project2)
-        self.create_event(event_id="a" * 32, group=group, datetime=self.min_ago)
-        self.create_event(event_id="m" * 32, group=group2, datetime=self.min_ago)
+
+        self.store_event(data={"timestamp": iso_format(self.min_ago)}, project_id=project.id)
+        self.store_event(data={"timestamp": iso_format(self.min_ago)}, project_id=project2.id)
 
         url = reverse(
             "sentry-api-0-organization-events-meta",
@@ -34,12 +33,13 @@ class OrganizationEventsMetaEndpoint(APITestCase, SnubaTestCase):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id="x" * 32, group=group, message="how to make fast", datetime=self.min_ago
+        self.store_event(
+            data={"timestamp": iso_format(self.min_ago), "message": "how to make fast"},
+            project_id=project.id,
         )
-        self.create_event(
-            event_id="m" * 32, group=group, message="Delet the Data", datetime=self.min_ago
+        self.store_event(
+            data={"timestamp": iso_format(self.min_ago), "message": "Delet the Data"},
+            project_id=project.id,
         )
 
         url = reverse(
diff --git a/tests/snuba/api/endpoints/test_organization_group_index.py b/tests/snuba/api/endpoints/test_organization_group_index.py
index cbffde3446..b46b0e359d 100644
--- a/tests/snuba/api/endpoints/test_organization_group_index.py
+++ b/tests/snuba/api/endpoints/test_organization_group_index.py
@@ -59,14 +59,16 @@ class GroupListTest(APITestCase, SnubaTestCase):
 
     def test_sort_by_date_with_tag(self):
         # XXX(dcramer): this tests a case where an ambiguous column name existed
-        now = timezone.now()
-        group1 = self.create_group(checksum="a" * 32, last_seen=now - timedelta(seconds=1))
-        self.create_event(group=group1, datetime=now - timedelta(seconds=1))
+        event = self.store_event(
+            data={"event_id": "a" * 32, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=self.project.id,
+        )
+        group = event.group
         self.login_as(user=self.user)
 
         response = self.get_valid_response(sort_by="date", query="is:unresolved")
         assert len(response.data) == 1
-        assert response.data[0]["id"] == six.text_type(group1.id)
+        assert response.data[0]["id"] == six.text_type(group.id)
 
     def test_feature_gate(self):
         # ensure there are two or more projects
@@ -116,13 +118,16 @@ class GroupListTest(APITestCase, SnubaTestCase):
         assert "Invalid format for numeric search" in response.data["detail"]
 
     def test_simple_pagination(self):
-        now = timezone.now()
-        group1 = self.create_group(project=self.project, last_seen=now - timedelta(seconds=2))
-        self.create_event(group=group1, datetime=now - timedelta(seconds=2))
-        group2 = self.create_group(project=self.project, last_seen=now - timedelta(seconds=1))
-        self.create_event(
-            stacktrace=[["foo.py"]], group=group2, datetime=now - timedelta(seconds=1)
+        event1 = self.store_event(
+            data={"timestamp": iso_format(before_now(seconds=2)), "fingerprint": ["group-1"]},
+            project_id=self.project.id,
         )
+        group1 = event1.group
+        event2 = self.store_event(
+            data={"timestamp": iso_format(before_now(seconds=1)), "fingerprint": ["group-2"]},
+            project_id=self.project.id,
+        )
+        group2 = event2.group
         self.login_as(user=self.user)
         response = self.get_valid_response(sort_by="date", limit=1)
         assert len(response.data) == 1
@@ -187,13 +192,15 @@ class GroupListTest(APITestCase, SnubaTestCase):
     def test_auto_resolved(self):
         project = self.project
         project.update_option("sentry:resolve_age", 1)
-        now = timezone.now()
-        group = self.create_group(checksum="a" * 32, last_seen=now - timedelta(days=1))
-        self.create_event(group=group, datetime=now - timedelta(days=1))
-        group2 = self.create_group(checksum="b" * 32, last_seen=now - timedelta(seconds=1))
-        self.create_event(
-            group=group2, datetime=now - timedelta(seconds=1), stacktrace=[["foo.py"]]
+        self.store_event(
+            data={"event_id": "a" * 32, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
+        )
+        event2 = self.store_event(
+            data={"event_id": "b" * 32, "timestamp": iso_format(before_now(seconds=1))},
+            project_id=project.id,
         )
+        group2 = event2.group
 
         self.login_as(user=self.user)
         response = self.get_valid_response()
@@ -327,53 +334,74 @@ class GroupListTest(APITestCase, SnubaTestCase):
         assert response.status_code == 403
 
     def test_lookup_by_first_release(self):
-        now = timezone.now()
         self.login_as(self.user)
         project = self.project
         project2 = self.create_project(name="baz", organization=project.organization)
         release = Release.objects.create(organization=project.organization, version="12345")
         release.add_project(project)
         release.add_project(project2)
-        group = self.create_group(checksum="a" * 32, project=project, first_release=release)
-        self.create_event(group=group, datetime=now - timedelta(seconds=1))
-        group2 = self.create_group(checksum="b" * 32, project=project2, first_release=release)
-        self.create_event(group=group2, datetime=now - timedelta(seconds=1))
+        event = self.store_event(
+            data={
+                "tags": {"sentry:release": release.version},
+                "timestamp": iso_format(before_now(seconds=1)),
+            },
+            project_id=project.id,
+        )
+        event2 = self.store_event(
+            data={
+                "tags": {"sentry:release": release.version},
+                "timestamp": iso_format(before_now(seconds=1)),
+            },
+            project_id=project2.id,
+        )
+
         with self.feature("organizations:global-views"):
             response = self.get_valid_response(**{"first-release": '"%s"' % release.version})
         issues = json.loads(response.content)
         assert len(issues) == 2
-        assert int(issues[0]["id"]) == group2.id
-        assert int(issues[1]["id"]) == group.id
+        assert int(issues[0]["id"]) == event2.group.id
+        assert int(issues[1]["id"]) == event.group.id
 
     def test_lookup_by_release(self):
         self.login_as(self.user)
         project = self.project
         release = Release.objects.create(organization=project.organization, version="12345")
         release.add_project(project)
-        self.create_event(
-            group=self.group, datetime=self.min_ago, tags={"sentry:release": release.version}
+        event = self.store_event(
+            data={
+                "timestamp": iso_format(before_now(seconds=1)),
+                "tags": {"sentry:release": release.version},
+            },
+            project_id=project.id,
         )
 
         response = self.get_valid_response(release=release.version)
         issues = json.loads(response.content)
         assert len(issues) == 1
-        assert int(issues[0]["id"]) == self.group.id
+        assert int(issues[0]["id"]) == event.group.id
 
     def test_pending_delete_pending_merge_excluded(self):
-        group = self.create_group(checksum="a" * 32, status=GroupStatus.PENDING_DELETION)
-        self.create_event(group=group, datetime=self.min_ago, data={"checksum": "a" * 32})
-        group2 = self.create_group(checksum="b" * 32)
-        self.create_event(group=group2, datetime=self.min_ago, data={"checksum": "b" * 32})
-        group3 = self.create_group(checksum="c" * 32, status=GroupStatus.DELETION_IN_PROGRESS)
-        self.create_event(group=group3, datetime=self.min_ago, data={"checksum": "c" * 32})
-        group4 = self.create_group(checksum="d" * 32, status=GroupStatus.PENDING_MERGE)
-        self.create_event(group=group4, datetime=self.min_ago, data={"checksum": "d" * 32})
+        events = []
+        for i in "abcd":
+            events.append(
+                self.store_event(
+                    data={
+                        "event_id": i * 32,
+                        "fingerprint": [i],
+                        "timestamp": iso_format(self.min_ago),
+                    },
+                    project_id=self.project.id,
+                )
+            )
+        events[0].group.update(status=GroupStatus.PENDING_DELETION)
+        events[2].group.update(status=GroupStatus.DELETION_IN_PROGRESS)
+        events[3].group.update(status=GroupStatus.PENDING_MERGE)
 
         self.login_as(user=self.user)
 
         response = self.get_valid_response()
         assert len(response.data) == 1
-        assert response.data[0]["id"] == six.text_type(group2.id)
+        assert response.data[0]["id"] == six.text_type(events[1].group.id)
 
     def test_filters_based_on_retention(self):
         self.login_as(user=self.user)
@@ -395,16 +423,12 @@ class GroupListTest(APITestCase, SnubaTestCase):
         assert response.status_code == 200, response.content
 
     def test_date_range(self):
-        now = timezone.now()
         with self.options({"system.event-retention-days": 2}):
-            group = self.create_group(
-                last_seen=now - timedelta(hours=5),
-                # first_seen needs to be accurate because of `shrink_time_window`
-                first_seen=now - timedelta(hours=5),
-                project=self.project,
+            event = self.store_event(
+                data={"timestamp": iso_format(before_now(hours=5))}, project_id=self.project.id
             )
+            group = event.group
 
-            self.create_event(group=group, datetime=now - timedelta(hours=5))
             self.login_as(user=self.user)
 
             response = self.get_valid_response(statsPeriod="6h")
@@ -520,15 +544,12 @@ class GroupUpdateTest(APITestCase, SnubaTestCase):
         self.login_as(user=self.user)
 
         for i in range(200):
-            group = self.create_group(
-                status=GroupStatus.UNRESOLVED,
-                project=self.project,
-                first_seen=self.min_ago - timedelta(seconds=i),
-            )
-            self.create_event(
-                group=group,
-                data={"checksum": six.binary_type(i)},
-                datetime=self.min_ago - timedelta(seconds=i),
+            self.store_event(
+                data={
+                    "fingerprint": [i],
+                    "timestamp": iso_format(self.min_ago - timedelta(seconds=i)),
+                },
+                project_id=self.project.id,
             )
 
         response = self.get_valid_response(query="is:unresolved", sort_by="date", method="get")
@@ -548,8 +569,10 @@ class GroupUpdateTest(APITestCase, SnubaTestCase):
 
         integration = Integration.objects.create(provider="example", name="Example")
         integration.add_organization(org, self.user)
-        group = self.create_group(status=GroupStatus.UNRESOLVED, first_seen=self.min_ago)
-        self.create_event(group=group, datetime=self.min_ago)
+        event = self.store_event(
+            data={"timestamp": iso_format(self.min_ago)}, project_id=self.project.id
+        )
+        group = event.group
 
         OrganizationIntegration.objects.filter(
             integration_id=integration.id, organization_id=group.organization.id
diff --git a/tests/snuba/api/endpoints/test_organization_tagkey_values.py b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
index 9e21ef8339..c60365228c 100644
--- a/tests/snuba/api/endpoints/test_organization_tagkey_values.py
+++ b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
@@ -4,7 +4,7 @@ from django.core.urlresolvers import reverse
 from exam import fixture
 
 from sentry.testutils import APITestCase, SnubaTestCase
-from sentry.testutils.helpers.datetime import before_now
+from sentry.testutils.helpers.datetime import before_now, iso_format
 
 
 class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
@@ -36,20 +36,21 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
         return self.create_group(project=self.project)
 
     def test_simple(self):
-        self.create_event(
-            event_id="a" * 32, group=self.group, datetime=self.day_ago, tags={"fruit": "apple"}
+        self.store_event(
+            data={"timestamp": iso_format(self.day_ago), "tags": {"fruit": "apple"}},
+            project_id=self.project.id,
         )
-        self.create_event(
-            event_id="b" * 32, group=self.group, datetime=self.min_ago, tags={"fruit": "orange"}
+        self.store_event(
+            data={"timestamp": iso_format(self.min_ago), "tags": {"fruit": "orange"}},
+            project_id=self.project.id,
         )
-        self.create_event(
-            event_id="c" * 32,
-            group=self.group,
-            datetime=self.min_ago,
-            tags={"some_tag": "some_value"},
+        self.store_event(
+            data={"timestamp": iso_format(self.min_ago), "tags": {"some_tag": "some_value"}},
+            project_id=self.project.id,
         )
-        self.create_event(
-            event_id="d" * 32, group=self.group, datetime=self.min_ago, tags={"fruit": "orange"}
+        self.store_event(
+            data={"timestamp": iso_format(self.min_ago), "tags": {"fruit": "orange"}},
+            project_id=self.project.id,
         )
 
         url = reverse(
@@ -66,29 +67,27 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
         assert response.data == {"detail": 'Invalid tag key format for "fr uit"'}
 
     def test_snuba_column(self):
-        self.create_event(
-            event_id="a" * 32,
-            group=self.group,
-            datetime=self.day_ago,
-            user={"email": "foo@example.com"},
-        )
-        self.create_event(
-            event_id="b" * 32,
-            group=self.group,
-            datetime=self.min_ago,
-            user={"email": "bar@example.com"},
-        )
-        self.create_event(
-            event_id="c" * 32,
-            group=self.group,
-            datetime=before_now(seconds=10),
-            user={"email": "baz@example.com"},
-        )
-        self.create_event(
-            event_id="d" * 32,
-            group=self.group,
-            datetime=before_now(seconds=10),
-            user={"email": "baz@example.com"},
+        self.store_event(
+            data={"timestamp": iso_format(self.day_ago), "user": {"email": "foo@example.com"}},
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={"timestamp": iso_format(self.min_ago), "user": {"email": "bar@example.com"}},
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "timestamp": iso_format(before_now(seconds=10)),
+                "user": {"email": "baz@example.com"},
+            },
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "timestamp": iso_format(before_now(seconds=10)),
+                "user": {"email": "baz@example.com"},
+            },
+            project_id=self.project.id,
         )
         self.run_test(
             "user.email",
@@ -96,64 +95,59 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
         )
 
     def test_release(self):
-        self.create_event(
-            event_id="a" * 32,
-            group=self.group,
-            datetime=self.day_ago,
-            tags={"sentry:release": "3.1.2"},
-        )
-        self.create_event(
-            event_id="b" * 32,
-            group=self.group,
-            datetime=self.min_ago,
-            tags={"sentry:release": "4.1.2"},
-        )
-        self.create_event(
-            event_id="c" * 32,
-            group=self.group,
-            datetime=self.day_ago,
-            tags={"sentry:release": "3.1.2"},
-        )
-        self.create_event(
-            event_id="d" * 32,
-            group=self.group,
-            datetime=before_now(seconds=10),
-            tags={"sentry:release": "5.1.2"},
+        self.store_event(
+            data={"timestamp": iso_format(self.day_ago), "tags": {"sentry:release": "3.1.2"}},
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={"timestamp": iso_format(self.min_ago), "tags": {"sentry:release": "4.1.2"}},
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={"timestamp": iso_format(self.day_ago), "tags": {"sentry:release": "3.1.2"}},
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "timestamp": iso_format(before_now(seconds=10)),
+                "tags": {"sentry:release": "5.1.2"},
+            },
+            project_id=self.project.id,
         )
         self.run_test("release", expected=[("5.1.2", 1), ("4.1.2", 1), ("3.1.2", 2)])
 
     def test_user_tag(self):
-        self.create_event(
-            event_id="a" * 32, group=self.group, datetime=self.day_ago, tags={"sentry:user": "1"}
+        self.store_event(
+            data={"tags": {"sentry:user": "1"}, "timestamp": iso_format(self.day_ago)},
+            project_id=self.project.id,
         )
-        self.create_event(
-            event_id="b" * 32, group=self.group, datetime=self.min_ago, tags={"sentry:user": "2"}
+        self.store_event(
+            data={"tags": {"sentry:user": "2"}, "timestamp": iso_format(self.min_ago)},
+            project_id=self.project.id,
         )
-        self.create_event(
-            event_id="c" * 32, group=self.group, datetime=self.day_ago, tags={"sentry:user": "1"}
+        self.store_event(
+            data={"tags": {"sentry:user": "1"}, "timestamp": iso_format(self.day_ago)},
+            project_id=self.project.id,
         )
-        self.create_event(
-            event_id="d" * 32,
-            group=self.group,
-            datetime=before_now(seconds=10),
-            tags={"sentry:user": "3"},
+        self.store_event(
+            data={"tags": {"sentry:user": "3"}, "timestamp": iso_format(before_now(seconds=10))},
+            project_id=self.project.id,
         )
         self.run_test("user", expected=[("3", 1), ("2", 1), ("1", 2)])
 
     def test_project_id(self):
         other_org = self.create_organization()
         other_project = self.create_project(organization=other_org)
-        other_group = self.create_group(project=other_project)
-
-        self.create_event(event_id="a" * 32, group=self.group, datetime=self.day_ago)
-        self.create_event(event_id="b" * 32, group=self.group, datetime=self.min_ago)
-        self.create_event(event_id="c" * 32, group=other_group, datetime=self.day_ago)
+        self.store_event(data={"timestamp": iso_format(self.day_ago)}, project_id=self.project.id)
+        self.store_event(data={"timestamp": iso_format(self.min_ago)}, project_id=self.project.id)
+        self.store_event(data={"timestamp": iso_format(self.day_ago)}, project_id=other_project.id)
         self.run_test("project.id", expected=[])
 
     def test_array_column(self):
-        self.create_event(event_id="a" * 32, group=self.group, datetime=self.day_ago)
-        self.create_event(event_id="b" * 32, group=self.group, datetime=self.min_ago)
-        self.create_event(event_id="c" * 32, group=self.group, datetime=self.day_ago)
+        for i in range(3):
+            self.store_event(
+                data={"timestamp": iso_format(self.day_ago)}, project_id=self.project.id
+            )
         self.run_test("error.type", expected=[])
 
     def test_no_projects(self):
diff --git a/tests/snuba/api/endpoints/test_organization_tags.py b/tests/snuba/api/endpoints/test_organization_tags.py
index 7f7904bab7..ce594b8ca5 100644
--- a/tests/snuba/api/endpoints/test_organization_tags.py
+++ b/tests/snuba/api/endpoints/test_organization_tags.py
@@ -3,13 +3,13 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
-from sentry.testutils.helpers.datetime import before_now
+from sentry.testutils.helpers.datetime import before_now, iso_format
 
 
 class OrganizationTagsTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationTagsTest, self).setUp()
-        self.min_ago = before_now(minutes=1)
+        self.min_ago = iso_format(before_now(minutes=1))
 
     def test_simple(self):
         user = self.create_user()
@@ -20,19 +20,25 @@ class OrganizationTagsTest(APITestCase, SnubaTestCase):
         self.login_as(user=user)
 
         project = self.create_project(organization=org, teams=[team])
-        group = self.create_group(project=project)
-
-        self.create_event(
-            event_id="a" * 32, group=group, datetime=self.min_ago, tags={"fruit": "apple"}
+        self.store_event(
+            data={"event_id": "a" * 32, "tags": {"fruit": "apple"}, "timestamp": self.min_ago},
+            project_id=project.id,
         )
-        self.create_event(
-            event_id="b" * 32, group=group, datetime=self.min_ago, tags={"fruit": "orange"}
+        self.store_event(
+            data={"event_id": "b" * 32, "tags": {"fruit": "orange"}, "timestamp": self.min_ago},
+            project_id=project.id,
         )
-        self.create_event(
-            event_id="c" * 32, group=group, datetime=self.min_ago, tags={"some_tag": "some_value"}
+        self.store_event(
+            data={
+                "event_id": "c" * 32,
+                "tags": {"some_tag": "some_value"},
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
         )
-        self.create_event(
-            event_id="d" * 32, group=group, datetime=self.min_ago, tags={"fruit": "orange"}
+        self.store_event(
+            data={"event_id": "d" * 32, "tags": {"fruit": "orange"}, "timestamp": self.min_ago},
+            project_id=project.id,
         )
 
         url = reverse("sentry-api-0-organization-tags", kwargs={"organization_slug": org.slug})
@@ -42,6 +48,7 @@ class OrganizationTagsTest(APITestCase, SnubaTestCase):
         data = response.data
         data.sort(key=lambda val: val["totalValues"], reverse=True)
         assert data == [
+            {"name": "Level", "key": "level", "totalValues": 4},
             {"name": "Fruit", "key": "fruit", "totalValues": 3},
             {"name": "Some Tag", "key": "some_tag", "totalValues": 1},
         ]
diff --git a/tests/snuba/api/endpoints/test_project_events.py b/tests/snuba/api/endpoints/test_project_events.py
index b87a3214ad..7dd455a81c 100644
--- a/tests/snuba/api/endpoints/test_project_events.py
+++ b/tests/snuba/api/endpoints/test_project_events.py
@@ -1,24 +1,22 @@
 from __future__ import absolute_import
 
-from datetime import timedelta
-from django.utils import timezone
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import before_now, iso_format
 
 
 class ProjectEventsTest(APITestCase, SnubaTestCase):
-    def setUp(self):
-        super(ProjectEventsTest, self).setUp()
-        self.min_ago = timezone.now() - timedelta(minutes=1)
-
     def test_simple(self):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        event_1 = self.create_event(event_id="a" * 32, group=group, datetime=self.min_ago)
-        event_2 = self.create_event(event_id="b" * 32, group=group, datetime=self.min_ago)
+        event_1 = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1))}, project_id=project.id
+        )
+        event_2 = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1))}, project_id=project.id
+        )
 
         url = reverse(
             "sentry-api-0-project-events",
@@ -36,12 +34,13 @@ class ProjectEventsTest(APITestCase, SnubaTestCase):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id="x" * 32, group=group, message="how to make fast", datetime=self.min_ago
+        self.store_event(
+            data={"message": "how to make fast", "timestamp": iso_format(before_now(minutes=1))},
+            project_id=project.id,
         )
-        event_2 = self.create_event(
-            event_id="y" * 32, group=group, message="Delet the Data", datetime=self.min_ago
+        event_2 = self.store_event(
+            data={"message": "Delet the Data", "timestamp": iso_format(before_now(minutes=1))},
+            project_id=project.id,
         )
 
         url = reverse(
@@ -59,10 +58,10 @@ class ProjectEventsTest(APITestCase, SnubaTestCase):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        two_days_ago = timezone.now() - timedelta(days=2)
-        self.create_event(event_id="c" * 32, group=group, datetime=two_days_ago)
-        event_2 = self.create_event(event_id="d" * 32, group=group, datetime=self.min_ago)
+        self.store_event(data={"timestamp": iso_format(before_now(days=2))}, project_id=project.id)
+        event_2 = self.store_event(
+            data={"timestamp": iso_format(before_now(minutes=1))}, project_id=project.id
+        )
 
         with self.options({"system.event-retention-days": 1}):
             url = reverse(
diff --git a/tests/snuba/api/endpoints/test_project_tags.py b/tests/snuba/api/endpoints/test_project_tags.py
index 80fb4244aa..6e2024a2c0 100644
--- a/tests/snuba/api/endpoints/test_project_tags.py
+++ b/tests/snuba/api/endpoints/test_project_tags.py
@@ -1,18 +1,12 @@
 from __future__ import absolute_import
 
-from datetime import timedelta
-
 from django.core.urlresolvers import reverse
-from django.utils import timezone
 
 from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import before_now, iso_format
 
 
 class ProjectTagsTest(APITestCase, SnubaTestCase):
-    def setUp(self):
-        super(ProjectTagsTest, self).setUp()
-        self.min_ago = timezone.now() - timedelta(minutes=1)
-
     def test_simple(self):
         user = self.create_user()
         org = self.create_organization()
@@ -20,12 +14,16 @@ class ProjectTagsTest(APITestCase, SnubaTestCase):
         self.create_member(organization=org, user=user, teams=[team])
 
         project = self.create_project(organization=org, teams=[team])
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id="a" * 32, group=group, datetime=self.min_ago, tags={"foo": "oof", "bar": "rab"}
+        self.store_event(
+            data={
+                "tags": {"foo": "oof", "bar": "rab"},
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=project.id,
         )
-        self.create_event(
-            event_id="b" * 32, group=group, datetime=self.min_ago, tags={"bar": "rab2"}
+        self.store_event(
+            data={"tags": {"bar": "rab2"}, "timestamp": iso_format(before_now(minutes=1))},
+            project_id=project.id,
         )
 
         self.login_as(user=user)
@@ -37,7 +35,7 @@ class ProjectTagsTest(APITestCase, SnubaTestCase):
         response = self.client.get(url, format="json")
         assert response.status_code == 200, response.content
         data = {v["key"]: v for v in response.data}
-        assert len(data) == 2
+        assert len(data) == 3
 
         assert data["foo"]["canDelete"]
         assert data["foo"]["uniqueValues"] == 1
