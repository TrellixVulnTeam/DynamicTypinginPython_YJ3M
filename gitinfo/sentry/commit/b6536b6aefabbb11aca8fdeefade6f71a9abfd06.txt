commit b6536b6aefabbb11aca8fdeefade6f71a9abfd06
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue May 28 16:13:03 2019 -0700

    feat(api): Implement unsubscribe links for incident notifications (SEN-656)
    
    This process is basically the same as for unsubscribing from group notifications. Abstracted the
    group code to handle both cases.

diff --git a/src/sentry/incidents/tasks.py b/src/sentry/incidents/tasks.py
index 60ef229989..6ac1f1f5a6 100644
--- a/src/sentry/incidents/tasks.py
+++ b/src/sentry/incidents/tasks.py
@@ -10,6 +10,7 @@ from sentry.incidents.models import (
 from sentry.tasks.base import instrumented_task
 from sentry.utils.email import MessageBuilder
 from sentry.utils.http import absolute_uri
+from sentry.utils.linksign import generate_signed_link
 
 
 @instrumented_task(name='sentry.incidents.tasks.send_subscriber_notifications')
@@ -72,6 +73,9 @@ def build_activity_context(activity):
             },
         )),
         'comment': activity.comment,
-        # TODO: Build unsubscribe page and link to it
-        'unsubscribe_link': '',
+        'unsubscribe_link': generate_signed_link(
+            activity.user,
+            'sentry-account-email-unsubscribe-incident',
+            kwargs={'incident_id': incident.id},
+        ),
     }
diff --git a/src/sentry/templates/sentry/unsubscribe-issue-notifications.html b/src/sentry/templates/sentry/unsubscribe-notifications.html
similarity index 89%
rename from src/sentry/templates/sentry/unsubscribe-issue-notifications.html
rename to src/sentry/templates/sentry/unsubscribe-notifications.html
index 64ae0c6e9d..7bee85b7d7 100644
--- a/src/sentry/templates/sentry/unsubscribe-issue-notifications.html
+++ b/src/sentry/templates/sentry/unsubscribe-notifications.html
@@ -10,7 +10,7 @@
     <form action="" method="post" class="">
         {% csrf_token %}
 
-        <p>You are about to unsubscribe from notifications for the <a href="{{ issue_link }}">selected issue</a>.</p>
+        <p>You are about to unsubscribe from notifications for the <a href="{{ instance_link }}">selected {{ object_type }}</a>.</p>
 
         <fieldset class="form-actions">
             <button type="submit" class="btn btn-primary">{% trans "Unsubscribe" %}</button>
diff --git a/src/sentry/web/frontend/unsubscribe_incident_notifications.py b/src/sentry/web/frontend/unsubscribe_incident_notifications.py
new file mode 100644
index 0000000000..bfaa5f9c61
--- /dev/null
+++ b/src/sentry/web/frontend/unsubscribe_incident_notifications.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.http import Http404
+
+from sentry.incidents.logic import unsubscribe_from_incident
+from sentry.incidents.models import Incident
+from sentry.utils.http import absolute_uri
+from sentry.web.frontend.unsubscribe_notifications import UnsubscribeBaseView
+
+
+class UnsubscribeIncidentNotificationsView(UnsubscribeBaseView):
+    object_type = 'incident'
+
+    def fetch_instance(self, incident_id):
+        try:
+            incident = Incident.objects.get(id=incident_id)
+        except Incident.DoesNotExist:
+            raise Http404
+        return incident
+
+    def build_link(self, instance):
+        return absolute_uri(reverse(
+            'sentry-incident',
+            kwargs={
+                'organization_slug': instance.organization.slug,
+                'incident_id': instance.identifier,
+            },
+        ))
+
+    def unsubscribe(self, instance, user):
+        unsubscribe_from_incident(instance, user)
diff --git a/src/sentry/web/frontend/unsubscribe_issue_notifications.py b/src/sentry/web/frontend/unsubscribe_issue_notifications.py
index 1b57c4586e..78692d093a 100644
--- a/src/sentry/web/frontend/unsubscribe_issue_notifications.py
+++ b/src/sentry/web/frontend/unsubscribe_issue_notifications.py
@@ -1,59 +1,31 @@
 from __future__ import absolute_import
 
-from django.db import transaction
-from django.http import Http404, HttpResponseRedirect
-from django.views.decorators.cache import never_cache
-from django.utils.decorators import method_decorator
+from django.http import Http404
 
-from sentry.models import Group, GroupSubscription, OrganizationMember
-from sentry.web.decorators import signed_auth_required
-from sentry.web.frontend.base import BaseView
-from sentry.utils.http import absolute_uri
+from sentry.models import (
+    Group,
+    GroupSubscription,
+)
+from sentry.web.frontend.unsubscribe_notifications import UnsubscribeBaseView
 
-signed_auth_required_m = method_decorator(signed_auth_required)
 
+class UnsubscribeIssueNotificationsView(UnsubscribeBaseView):
+    object_type = 'issue'
 
-class UnsubscribeIssueNotificationsView(BaseView):
-    auth_required = False
-
-    @never_cache
-    @signed_auth_required_m
-    @transaction.atomic
-    def handle(self, request, issue_id):
-        if not getattr(request, 'user_from_signed_request', False):
-            raise Http404
-
+    def fetch_instance(self, issue_id):
         try:
             group = Group.objects.get_from_cache(id=issue_id)
         except Group.DoesNotExist:
             raise Http404
+        return group
 
-        if not OrganizationMember.objects.filter(
-            user=request.user,
-            organization=group.project.organization,
-        ).exists():
-            raise Http404
-
-        issue_link = absolute_uri(
-            u'/{}/{}/issues/{}/'.format(
-                group.project.organization.slug,
-                group.project.slug,
-                group.id,
-            )
-        )
-
-        if request.method == 'POST':
-            if request.POST.get('op') == 'unsubscribe':
-                GroupSubscription.objects.create_or_update(
-                    group=group,
-                    project=group.project,
-                    user=request.user,
-                    is_active=False,
-                )
-            return HttpResponseRedirect(issue_link)
+    def build_link(self, instance):
+        return instance.get_absolute_url()
 
-        return self.respond(
-            'sentry/unsubscribe-issue-notifications.html',
-            {'issue': group,
-             'issue_link': issue_link}
+    def unsubscribe(self, instance, user):
+        GroupSubscription.objects.create_or_update(
+            group=instance,
+            project=instance.project,
+            user=user,
+            is_active=False,
         )
diff --git a/src/sentry/web/frontend/unsubscribe_notifications.py b/src/sentry/web/frontend/unsubscribe_notifications.py
new file mode 100644
index 0000000000..131cf78bdc
--- /dev/null
+++ b/src/sentry/web/frontend/unsubscribe_notifications.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+import abc
+
+import six
+from django.db import transaction
+from django.http import Http404, HttpResponseRedirect
+from django.utils.decorators import method_decorator
+from django.views.decorators.cache import never_cache
+
+from sentry.models import OrganizationMember
+from sentry.web.frontend.base import BaseView
+from sentry.web.decorators import signed_auth_required
+
+
+signed_auth_required_m = method_decorator(signed_auth_required)
+
+
+@six.add_metaclass(abc.ABCMeta)
+class UnsubscribeBaseView(BaseView):
+    auth_required = False
+
+    @never_cache
+    @signed_auth_required_m
+    @transaction.atomic
+    def handle(self, request, **kwargs):
+        if not getattr(request, 'user_from_signed_request', False):
+            raise Http404
+
+        instance = self.fetch_instance(**kwargs)
+
+        if not OrganizationMember.objects.filter(
+            user=request.user,
+            organization=instance.organization,
+        ).exists():
+            raise Http404
+
+        instance_link = self.build_link(instance)
+
+        if request.method == 'POST':
+            if request.POST.get('op') == 'unsubscribe':
+                self.unsubscribe(instance, request.user)
+            return HttpResponseRedirect(instance_link)
+
+        return self.respond(
+            'sentry/unsubscribe-notifications.html',
+            {'instance_link': instance_link, 'object_type': self.object_type}
+        )
+
+    @abc.abstractproperty
+    def object_type(self):
+        pass
+
+    @abc.abstractproperty
+    def fetch_instance(self, **kwargs):
+        pass
+
+    @abc.abstractmethod
+    def build_link(self, instance):
+        pass
+
+    @abc.abstractmethod
+    def unsubscribe(self, instance, user):
+        pass
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7ac39f9377..b9adbcab0e 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -48,8 +48,8 @@ from sentry.web.frontend.restore_organization import RestoreOrganizationView
 from sentry.web.frontend.team_avatar import TeamAvatarPhotoView
 from sentry.web.frontend.account_identity import AccountIdentityAssociateView
 from sentry.web.frontend.sudo import SudoView
-from sentry.web.frontend.unsubscribe_issue_notifications import \
-    UnsubscribeIssueNotificationsView
+from sentry.web.frontend.unsubscribe_issue_notifications import UnsubscribeIssueNotificationsView
+from sentry.web.frontend.unsubscribe_incident_notifications import UnsubscribeIncidentNotificationsView
 from sentry.web.frontend.user_avatar import UserAvatarPhotoView
 from sentry.web.frontend.setup_wizard import SetupWizardView
 from sentry.web.frontend.vsts_extension_configuration import \
@@ -295,6 +295,11 @@ urlpatterns += patterns(
         UnsubscribeIssueNotificationsView.as_view(),
         name='sentry-account-email-unsubscribe-issue'
     ),
+    url(
+        r'^account/notifications/unsubscribe/incident/(?P<incident_id>\d+)/$',
+        UnsubscribeIncidentNotificationsView.as_view(),
+        name='sentry-account-email-unsubscribe-incident'
+    ),
     url(r'^account/remove/$',
         RedirectView.as_view(pattern_name="sentry-remove-account", permanent=False),
         ),
diff --git a/tests/sentry/incidents/test_tasks.py b/tests/sentry/incidents/test_tasks.py
index e57a186c80..8513219c89 100644
--- a/tests/sentry/incidents/test_tasks.py
+++ b/tests/sentry/incidents/test_tasks.py
@@ -20,6 +20,7 @@ from sentry.incidents.tasks import (
     send_subscriber_notifications,
 )
 from sentry.testutils import TestCase
+from sentry.utils.linksign import generate_signed_link
 from sentry.utils.http import absolute_uri
 
 
@@ -99,7 +100,11 @@ class TestBuildActivityContext(BaseIncidentActivityTest, TestCase):
             },
         ))
         assert context['comment'] == expected_comment
-        assert context['unsubscribe_link'] == ''
+        assert context['unsubscribe_link'] == generate_signed_link(
+            activity.user,
+            'sentry-account-email-unsubscribe-incident',
+            kwargs={'incident_id': incident.id},
+        )
 
     def test_simple(self):
         activity = create_incident_activity(
diff --git a/tests/sentry/web/frontend/test_unsubscribe_issue_notifications.py b/tests/sentry/web/frontend/test_unsubscribe_issue_notifications.py
deleted file mode 100644
index 2c61c2f5d0..0000000000
--- a/tests/sentry/web/frontend/test_unsubscribe_issue_notifications.py
+++ /dev/null
@@ -1,64 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.testutils import TestCase
-from sentry.models import GroupSubscription
-from sentry.utils.linksign import generate_signed_link
-
-
-class UnsubscribeIssueNotificationsTest(TestCase):
-    def test_renders(self):
-        group = self.create_group()
-
-        path = generate_signed_link(
-            user=self.user,
-            viewname='sentry-account-email-unsubscribe-issue',
-            args=[group.id],
-        )
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-    def test_process(self):
-        group = self.create_group()
-
-        path = generate_signed_link(
-            user=self.user,
-            viewname='sentry-account-email-unsubscribe-issue',
-            args=[group.id],
-        )
-
-        resp = self.client.post(path, data={'op': 'unsubscribe'})
-
-        assert resp.status_code == 302
-        assert GroupSubscription.objects.filter(
-            user=self.user,
-            group=group,
-            is_active=False,
-        ).exists()
-
-    def test_no_access(self):
-        user = self.create_user('foo@example.com')
-        group = self.create_group()
-
-        path = generate_signed_link(
-            user=user,
-            viewname='sentry-account-email-unsubscribe-issue',
-            args=[group.id],
-        )
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 404
-
-    def test_invalid_issue(self):
-
-        path = generate_signed_link(
-            user=self.user,
-            viewname='sentry-account-email-unsubscribe-issue',
-            args=[13413434],
-        )
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 404
diff --git a/tests/sentry/web/frontend/test_unsubscribe_notifications.py b/tests/sentry/web/frontend/test_unsubscribe_notifications.py
new file mode 100644
index 0000000000..0ced5d7e56
--- /dev/null
+++ b/tests/sentry/web/frontend/test_unsubscribe_notifications.py
@@ -0,0 +1,90 @@
+from __future__ import absolute_import
+
+from sentry.incidents.models import IncidentSubscription
+from sentry.models import GroupSubscription
+from sentry.testutils import TestCase
+from sentry.utils.linksign import generate_signed_link
+
+
+class UnsubscribeNotificationsBaseTest(object):
+
+    def create_instance(self):
+        raise NotImplementedError()
+
+    def view_name(self):
+        raise NotImplementedError()
+
+    def assert_unsubscribed(self):
+        raise NotImplementedError()
+
+    def test_renders(self):
+        instance = self.create_instance()
+        path = generate_signed_link(
+            user=self.user,
+            viewname=self.view_name,
+            args=[instance.id],
+        )
+
+        resp = self.client.get(path)
+        assert resp.status_code == 200
+
+    def test_process(self):
+        instance = self.create_instance()
+        path = generate_signed_link(
+            user=self.user,
+            viewname=self.view_name,
+            args=[instance.id],
+        )
+
+        resp = self.client.post(path, data={'op': 'unsubscribe'})
+        assert resp.status_code == 302
+        self.assert_unsubscribed(instance, self.user)
+
+    def test_no_access(self):
+        user = self.create_user('foo@example.com')
+        instance = self.create_instance()
+        path = generate_signed_link(
+            user=user,
+            viewname=self.view_name,
+            args=[instance.id],
+        )
+
+        resp = self.client.get(path)
+        assert resp.status_code == 404
+
+    def test_invalid_issue(self):
+        path = generate_signed_link(
+            user=self.user,
+            viewname=self.view_name,
+            args=[13413434],
+        )
+
+        resp = self.client.get(path)
+        assert resp.status_code == 404
+
+
+class UnsubscribeIssueNotificationsTest(UnsubscribeNotificationsBaseTest, TestCase):
+    view_name = 'sentry-account-email-unsubscribe-issue'
+
+    def create_instance(self):
+        return self.create_group()
+
+    def assert_unsubscribed(self, instance, user):
+        assert GroupSubscription.objects.filter(
+            user=user,
+            group=instance,
+            is_active=False,
+        ).exists()
+
+
+class UnsubscribeIncidentNotificationsTest(UnsubscribeNotificationsBaseTest, TestCase):
+    view_name = 'sentry-account-email-unsubscribe-incident'
+
+    def create_instance(self):
+        return self.create_incident()
+
+    def assert_unsubscribed(self, instance, user):
+        assert not IncidentSubscription.objects.filter(
+            incident=instance,
+            user=user,
+        ).exists()
