commit 493726d0db1776cd8b87507c683c3f7232b99741
Author: josh <josh@jrl.ninja>
Date:   Thu Feb 27 22:53:01 2020 +0000

    ref(py3): low-hanging fruit to greatly reduce ci failure verbosity (#17288)

diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 3ba6841c40..387c34789d 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -6,7 +6,6 @@ from datetime import timedelta
 
 import six
 
-
 from django.conf import settings
 from django.db.models import Min, Q
 from django.utils import timezone
@@ -44,7 +43,7 @@ from sentry.models import (
 from sentry.tsdb.snuba import SnubaTSDB
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.safe import safe_execute
-from sentry.utils.compat import zip
+from sentry.utils.compat import map, zip
 
 SUBSCRIPTION_REASON_MAP = {
     GroupSubscriptionReason.comment: "commented",
@@ -110,7 +109,7 @@ class GroupSerializerBase(Serializer):
             for subscription in GroupSubscription.objects.filter(
                 group__in=list(
                     itertools.chain.from_iterable(
-                        itertools.imap(
+                        map(
                             lambda project__groups: project__groups[1]
                             if not options.get(project__groups[0].id, options.get(None))
                             == UserOptionValue.no_conversations
diff --git a/src/sentry/eventstore/models.py b/src/sentry/eventstore/models.py
index 5aae059609..2e3177b8f4 100644
--- a/src/sentry/eventstore/models.py
+++ b/src/sentry/eventstore/models.py
@@ -261,7 +261,7 @@ class Event(object):
         be saved under this key in nodestore so it can be retrieved using the
         same generated id when we only have project_id and event_id.
         """
-        return md5("{}:{}".format(project_id, event_id)).hexdigest()
+        return md5(u"{}:{}".format(project_id, event_id).encode("utf-8")).hexdigest()
 
     # TODO We need a better way to cache these properties.  functools32
     # doesn't quite do the trick as there is a reference bug with unsaved
diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 078ae2a403..346cfb84b0 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import io
 import os
 import six
-
+import zlib
 import base64
 import msgpack
 import inspect
@@ -390,9 +390,11 @@ class Enhancements(object):
         return [self.version, self.bases, [x._to_config_structure() for x in self.rules]]
 
     def dumps(self):
-        return base64.urlsafe_b64encode(
-            msgpack.dumps(self._to_config_structure()).encode("zlib")
-        ).strip("=")
+        return (
+            base64.urlsafe_b64encode(zlib.compress(msgpack.dumps(self._to_config_structure())))
+            .decode("ascii")
+            .strip(u"=")
+        )
 
     def iter_rules(self):
         for base in self.bases:
@@ -414,12 +416,12 @@ class Enhancements(object):
 
     @classmethod
     def loads(cls, data):
-        if six.PY2 and isinstance(data, six.text_type):
+        if isinstance(data, six.text_type):
             data = data.encode("ascii", "ignore")
         padded = data + b"=" * (4 - (len(data) % 4))
         try:
             return cls._from_config_structure(
-                msgpack.loads(base64.urlsafe_b64decode(padded).decode("zlib"))
+                msgpack.loads(zlib.decompress(base64.urlsafe_b64decode(padded)))
             )
         except (LookupError, AttributeError, TypeError, ValueError) as e:
             raise ValueError("invalid grouping enhancement config: %s" % e)
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 5c23e4b9c5..d0e7c828da 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -700,7 +700,7 @@ def delete_alert_rule(alert_rule):
         alert_rule.update(
             # Randomize the name here so that we don't get unique constraint issues
             # while waiting for the deletion to process
-            name=uuid4().get_hex(),
+            name=uuid4().hex,
             status=AlertRuleStatus.PENDING_DELETION.value,
         )
         bulk_delete_snuba_subscriptions(list(alert_rule.query_subscriptions.all()))
diff --git a/src/sentry/mediators/mediator.py b/src/sentry/mediators/mediator.py
index aca1316394..c3ccd91a8f 100644
--- a/src/sentry/mediators/mediator.py
+++ b/src/sentry/mediators/mediator.py
@@ -128,23 +128,13 @@ class Mediator(object):
     # class.
     _params_prepared = False
 
-    def __new__(cls, *args, **kwargs):
-        """
-        When the Mediator type is created, we turn all of it's Param
-        declarations into actual properties.
-        """
-        if sentry.mediators.mediator.Mediator in cls.__bases__ and not cls._params_prepared:
-            cls._prepare_params()
-            cls._params_prepared = True
-
-        return super(Mediator, cls).__new__(cls, *args, **kwargs)
-
     @classmethod
     def _prepare_params(cls):
-        params = [(k, v) for k, v in six.iteritems(cls.__dict__) if isinstance(v, Param)]
-
-        for name, param in params:
-            param.setup(cls, name)
+        if sentry.mediators.mediator.Mediator in cls.__bases__ and not cls._params_prepared:
+            params = [(k, v) for k, v in six.iteritems(cls.__dict__) if isinstance(v, Param)]
+            for name, param in params:
+                param.setup(cls, name)
+            cls._params_prepared = True
 
     @classmethod
     def run(cls, *args, **kwargs):
@@ -160,6 +150,7 @@ class Mediator(object):
     def __init__(self, *args, **kwargs):
         self.kwargs = kwargs
         self.logger = kwargs.get("logger", logging.getLogger(self._logging_name))
+        self._prepare_params()
         self._validate_params(**kwargs)
 
     def audit(self):
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index b08aae3eae..22e26f9567 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -5,6 +5,7 @@ import hmac
 import time
 import base64
 import hashlib
+from binascii import hexlify
 import six
 
 from u2flib_server import u2f
@@ -291,11 +292,7 @@ class RecoveryCodeInterface(AuthenticatorInterface):
         return rv
 
     def generate_new_config(self):
-        if six.PY3:
-            salt = int(os.urandom(16).decode("utf-8"), 16)
-        else:
-            salt = os.urandom(16).encode("hex")
-
+        salt = hexlify(os.urandom(16))
         return {"salt": salt, "used": 0}
 
     def regenerate_codes(self, save=True):
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 8af83d6df1..20b2ad8385 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -79,7 +79,7 @@ def get_group_with_redirect(id_or_qualified_short_id, queryset=None, organizatio
         getter = queryset.get
 
     if not (
-        isinstance(id_or_qualified_short_id, (long, int))  # noqa
+        isinstance(id_or_qualified_short_id, six.integer_types)  # noqa
         or id_or_qualified_short_id.isdigit()
     ):  # NOQA
         short_id = parse_short_id(id_or_qualified_short_id)
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 5b928315c5..88d99c1a72 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -54,7 +54,7 @@ UUID_CHARS_IN_SLUG = 6
 
 
 def default_uuid():
-    return six.binary_type(uuid.uuid4())
+    return six.text_type(uuid.uuid4())
 
 
 def generate_slug(name, is_internal=False):
diff --git a/src/sentry/models/sentryappinstallation.py b/src/sentry/models/sentryappinstallation.py
index 9026186940..5adb48132a 100644
--- a/src/sentry/models/sentryappinstallation.py
+++ b/src/sentry/models/sentryappinstallation.py
@@ -11,7 +11,7 @@ from sentry.db.models import BoundedPositiveIntegerField, FlexibleForeignKey, Pa
 
 
 def default_uuid():
-    return six.binary_type(uuid.uuid4())
+    return six.text_type(uuid.uuid4())
 
 
 class SentryAppInstallationToken(Model):
diff --git a/src/sentry/similarity/__init__.py b/src/sentry/similarity/__init__.py
index 220ad850f1..9703b2a4aa 100644
--- a/src/sentry/similarity/__init__.py
+++ b/src/sentry/similarity/__init__.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import itertools
 import logging
 
 from django.conf import settings
@@ -19,6 +18,7 @@ from sentry.similarity.features import (
 )
 from sentry.similarity.signatures import MinHashSignatureBuilder
 from sentry.utils import redis
+from sentry.utils.compat import map
 from sentry.utils.datastructures import BidirectionalMapping
 from sentry.utils.iterators import shingle
 
@@ -26,7 +26,7 @@ logger = logging.getLogger(__name__)
 
 
 def text_shingle(n, value):
-    return itertools.imap(u"".join, shingle(n, value))
+    return map(u"".join, shingle(n, value))
 
 
 class FrameEncodingError(ValueError):
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 0abe23067a..ffed1d1919 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -21,7 +21,6 @@ __all__ = (
 )
 
 import base64
-import contextlib
 import os
 import os.path
 import pytest
@@ -772,9 +771,7 @@ class SnubaTestCase(BaseTestCase):
         assert requests.post(settings.SENTRY_SNUBA + "/tests/transactions/drop").status_code == 200
 
     def store_event(self, *args, **kwargs):
-        with contextlib.nested(
-            mock.patch("sentry.eventstream.insert", self.snuba_eventstream.insert)
-        ):
+        with mock.patch("sentry.eventstream.insert", self.snuba_eventstream.insert):
             stored_event = Factories.store_event(*args, **kwargs)
             stored_group = stored_event.group
             if stored_group is not None:
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 82b7f8785d..85f621376c 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -9,14 +9,15 @@ import petname
 import random
 import six
 import warnings
+from binascii import hexlify
+from hashlib import sha1
+from uuid import uuid4
 from importlib import import_module
 
 from django.contrib.auth.models import AnonymousUser
 from django.db import transaction
 from django.utils import timezone
 from django.utils.text import slugify
-from hashlib import sha1
-from uuid import uuid4
 
 from sentry.event_manager import EventManager
 from sentry.constants import SentryAppStatus
@@ -302,7 +303,7 @@ class Factories(object):
     @staticmethod
     def create_release(project, user=None, version=None, date_added=None):
         if version is None:
-            version = os.urandom(20).encode("hex")
+            version = hexlify(os.urandom(20))
 
         if date_added is None:
             date_added = timezone.now()
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index 748d040fae..83e0fad0a7 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -6,6 +6,7 @@ import json
 import inspect
 import requests
 import mimetypes
+from binascii import hexlify
 
 from collections import defaultdict
 from contextlib import contextmanager
@@ -414,7 +415,7 @@ class MockUtils(object):
         from sentry.models import Release, Activity
 
         if version is None:
-            version = os.urandom(20).encode("hex")
+            version = hexlify(os.urandom(20))
         with transaction.atomic():
             release = Release.objects.filter(
                 version=version, organization_id=project.organization_id, projects=project
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 78cc0c1a0c..13bddc3792 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -225,7 +225,7 @@ class ListResolver(object):
                 u"Cannot generate mailing list identifier for {!r}".format(instance)
             )
 
-        label = ".".join(map(six.binary_type, handler(instance)))
+        label = ".".join(map(six.text_type, handler(instance)))
         assert is_valid_dot_atom(label)
 
         return u"{}.{}".format(label, self.__namespace)
diff --git a/src/sentry/utils/pytest/fixtures.py b/src/sentry/utils/pytest/fixtures.py
index aaddc47b1f..b8d0721141 100644
--- a/src/sentry/utils/pytest/fixtures.py
+++ b/src/sentry/utils/pytest/fixtures.py
@@ -7,6 +7,7 @@ including ``db`` fixture in the function resolution scope.
 """
 from __future__ import absolute_import, print_function, unicode_literals
 
+import io
 import os
 import re
 import sys
@@ -281,8 +282,8 @@ def insta_snapshot(request, log):
             )
 
         try:
-            with open(reference_file) as f:
-                match = _yaml_snap_re.match(f.read().decode("utf-8"))
+            with io.open(reference_file, "rt", encoding="utf-8") as f:
+                match = _yaml_snap_re.match(f.read())
                 if match is None:
                     raise IOError()
                 _header, refval = match.groups()
@@ -302,7 +303,7 @@ def insta_snapshot(request, log):
                 reference_file += ".new"
             with open(reference_file, "w") as f:
                 f.write(
-                    "---\n%s\n---\n%s\n"
+                    u"---\n%s\n---\n%s\n"
                     % (
                         yaml.safe_dump(
                             {
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index df1c85776b..1a5ee786c9 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -111,7 +111,8 @@ class _RedisCluster(object):
         # StrictRedisCluster expects a list of { host, port } dicts. Coerce the
         # configuration into the correct format if necessary.
         hosts = config.get("hosts")
-        hosts = hosts.values() if isinstance(hosts, dict) else hosts
+        # TODO(joshuarli): modernize dict_six fixer
+        hosts = list(hosts.values()) if isinstance(hosts, dict) else hosts
 
         # Redis cluster does not wait to attempt to connect. We'd prefer to not
         # make TCP connections on boot. Wrap the client in a lazy proxy object.
diff --git a/src/social_auth/backends/pipeline/user.py b/src/social_auth/backends/pipeline/user.py
index 2b4fa9b86d..8173debf77 100644
--- a/src/social_auth/backends/pipeline/user.py
+++ b/src/social_auth/backends/pipeline/user.py
@@ -32,7 +32,7 @@ def get_username(
     elif details.get("username"):
         username = six.text_type(details["username"])
     else:
-        username = uuid4().get_hex()
+        username = uuid4().hex
 
     max_length = UserSocialAuth.username_max_length()
     short_username = username[: max_length - uuid_length]
@@ -44,7 +44,7 @@ def get_username(
     # as base but adding a unique hash at the end. Original
     # username is cut to avoid any field max_length.
     while user_exists(username=final_username):
-        username = short_username + uuid4().get_hex()[:uuid_length]
+        username = short_username + uuid4().hex[:uuid_length]
         username = username[:max_length]
         final_username = UserSocialAuth.clean_username(username)
         if do_slugify:
diff --git a/tests/sentry/api/endpoints/test_relay_projectconfigs.py b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
index 7a87272be1..6ec4a9a451 100644
--- a/tests/sentry/api/endpoints/test_relay_projectconfigs.py
+++ b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
@@ -46,7 +46,7 @@ def private_key(key_pair):
 
 @pytest.fixture
 def relay_id():
-    return six.binary_type(uuid4())
+    return six.binary_type(six.text_type(uuid4()).encode("ascii"))
 
 
 @pytest.fixture
diff --git a/tests/sentry/api/endpoints/test_relay_projectids.py b/tests/sentry/api/endpoints/test_relay_projectids.py
index 1e215f77c8..a6937d8327 100644
--- a/tests/sentry/api/endpoints/test_relay_projectids.py
+++ b/tests/sentry/api/endpoints/test_relay_projectids.py
@@ -31,7 +31,7 @@ class RelayProjectIdsEndpointTest(APITestCase):
 
         self.public_key = self.key_pair[1]
         self.private_key = self.key_pair[0]
-        self.relay_id = six.binary_type(uuid4())
+        self.relay_id = six.binary_type(six.text_type(uuid4()).encode("ascii"))
 
         self.relay = Relay.objects.create(
             relay_id=self.relay_id,
diff --git a/tests/sentry/api/endpoints/test_relay_register.py b/tests/sentry/api/endpoints/test_relay_register.py
index 2a6ebbe146..87227d1f40 100644
--- a/tests/sentry/api/endpoints/test_relay_register.py
+++ b/tests/sentry/api/endpoints/test_relay_register.py
@@ -24,7 +24,7 @@ class RelayRegisterTest(APITestCase):
         settings.SENTRY_RELAY_WHITELIST_PK.append(six.binary_type(self.public_key))
 
         self.private_key = self.key_pair[0]
-        self.relay_id = six.binary_type(uuid4())
+        self.relay_id = six.binary_type(six.text_type(uuid4()).encode("ascii"))
 
         self.path = reverse("sentry-api-0-relay-register-challenge")
 
@@ -391,7 +391,7 @@ class RelayRegisterTest(APITestCase):
             reverse("sentry-api-0-relay-register-response"),
             data=raw_json,
             content_type="application/json",
-            HTTP_X_SENTRY_RELAY_ID=six.binary_type(uuid4()),
+            HTTP_X_SENTRY_RELAY_ID=six.binary_type(six.text_type(uuid4()).encode("ascii")),
             HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
         )
 
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 057e24d2f1..c35cc5cd73 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -699,7 +699,7 @@ class EventAttachmentStoreViewTest(TestCase):
 
     def test_event_attachments_feature_creates_attachment(self):
         out = BytesIO()
-        out.write("hi")
+        out.write(b"hi")
         with self.feature("organizations:event-attachments"):
             response = self._postEventAttachmentWithHeader(
                 {
@@ -715,7 +715,7 @@ class EventAttachmentStoreViewTest(TestCase):
 
     def test_event_attachments_without_feature_returns_forbidden(self):
         out = BytesIO()
-        out.write("hi")
+        out.write(b"hi")
         with self.feature({"organizations:event-attachments": False}):
             response = self._postEventAttachmentWithHeader(
                 {
@@ -731,7 +731,7 @@ class EventAttachmentStoreViewTest(TestCase):
 
     def test_event_attachments_without_files_returns_400(self):
         out = BytesIO()
-        out.write("hi")
+        out.write(b"hi")
         with self.feature("organizations:event-attachments"):
             response = self._postEventAttachmentWithHeader({}, format="multipart")
 
@@ -742,7 +742,7 @@ class EventAttachmentStoreViewTest(TestCase):
         with self.feature("organizations:event-attachments"):
             self.path = self.path.replace(self.event.event_id, "z" * 32)
             out = BytesIO()
-            out.write("hi")
+            out.write(b"hi")
             response = self._postEventAttachmentWithHeader(
                 {
                     "attachment1": SimpleUploadedFile(
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index 7898b458ed..ecb7d38090 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -260,7 +260,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             for minute in range(count):
                 self.store_event(
                     data={
-                        "event_id": six.binary_type(uuid.uuid1()),
+                        "event_id": six.binary_type(six.text_type(uuid.uuid1()).encode("ascii")),
                         "message": "very bad",
                         "timestamp": iso_format(
                             self.day_ago + timedelta(hours=hour, minutes=minute)
@@ -299,7 +299,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             for minute in range(count):
                 self.store_event(
                     data={
-                        "event_id": six.binary_type(uuid.uuid1()),
+                        "event_id": six.binary_type(six.text_type(uuid.uuid1()).encode("ascii")),
                         "message": "very bad",
                         "timestamp": iso_format(
                             self.day_ago + timedelta(hours=hour, minutes=minute)
@@ -335,7 +335,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             for second in range(count):
                 self.store_event(
                     data={
-                        "event_id": six.binary_type(uuid.uuid1()),
+                        "event_id": six.binary_type(six.text_type(uuid.uuid1()).encode("ascii")),
                         "message": "very bad",
                         "timestamp": iso_format(
                             self.day_ago + timedelta(minutes=minute, seconds=second)
@@ -374,7 +374,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             for second in range(count):
                 self.store_event(
                     data={
-                        "event_id": six.binary_type(uuid.uuid1()),
+                        "event_id": six.binary_type(six.text_type(uuid.uuid1()).encode("ascii")),
                         "message": "very bad",
                         "timestamp": iso_format(
                             self.day_ago + timedelta(minutes=minute, seconds=second)
