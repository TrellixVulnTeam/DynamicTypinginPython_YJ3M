commit 1004719c17bbcd9ebd0cde8b9f8a7c97cacb542a
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 16 10:48:00 2015 -0700

    Add basic validation to various backend abstractions

diff --git a/src/sentry/buffer/base.py b/src/sentry/buffer/base.py
index ca982d2bbe..c1591c52f9 100644
--- a/src/sentry/buffer/base.py
+++ b/src/sentry/buffer/base.py
@@ -37,6 +37,14 @@ class Buffer(object):
             'extra': extra,
         })
 
+    def validate(self):
+        """
+        Validates the settings for this backend (i.e. such as proper connection
+        info).
+
+        Raise ``InvalidConfiguration`` if there is a configuration error.
+        """
+
     def process_pending(self):
         return []
 
diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 86888af166..28d8125399 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -7,14 +7,15 @@ sentry.buffer.redis
 """
 from __future__ import absolute_import
 
-from time import time
-
 from django.conf import settings
 from django.db import models
 from django.utils.encoding import smart_str
 from hashlib import md5
 from nydus.db import create_cluster
+from time import time
+
 from sentry.buffer import Buffer
+from sentry.exceptions import InvalidConfiguration
 from sentry.tasks.process_buffer import process_incr
 from sentry.utils.compat import pickle
 from sentry.utils.imports import import_string
@@ -39,6 +40,12 @@ class RedisBuffer(Buffer):
             'hosts': options['hosts'],
         })
 
+    def validate(self):
+        try:
+            self.conn.ping()
+        except Exception as e:
+            raise InvalidConfiguration(unicode(e))
+
     def _coerce_val(self, value):
         if isinstance(value, models.Model):
             value = value.pk
diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index 303152427e..f956b6a300 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -27,3 +27,7 @@ class InvalidOrigin(InvalidRequest):
 
 class CacheNotPopulated(Exception):
     pass
+
+
+class InvalidConfiguration(Exception):
+    pass
diff --git a/src/sentry/nodestore/base.py b/src/sentry/nodestore/base.py
index ff898558e0..7b7002c605 100644
--- a/src/sentry/nodestore/base.py
+++ b/src/sentry/nodestore/base.py
@@ -14,6 +14,14 @@ from uuid import uuid4
 
 
 class NodeStorage(local):
+    def validate(self):
+        """
+        Validates the settings for this backend (i.e. such as proper connection
+        info).
+
+        Raise ``InvalidConfiguration`` if there is a configuration error.
+        """
+
     def create(self, data):
         """
         >>> key = nodestore.create({'foo': 'bar'})
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 717ff536a0..3184ce4d0d 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -25,6 +25,14 @@ class Quota(object):
     def __init__(self, **options):
         pass
 
+    def validate(self):
+        """
+        Validates the settings for this backend (i.e. such as proper connection
+        info).
+
+        Raise ``InvalidConfiguration`` if there is a configuration error.
+        """
+
     def is_rate_limited(self, project):
         return NotRateLimited
 
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 4dff0171ed..910219599f 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -7,12 +7,13 @@ sentry.quotas.redis
 """
 from __future__ import absolute_import
 
+import time
+
 from django.conf import settings
 from nydus.db import create_cluster
-from sentry.quotas.base import Quota, RateLimited, NotRateLimited
-
 
-import time
+from sentry.exceptions import InvalidConfiguration
+from sentry.quotas.base import Quota, RateLimited, NotRateLimited
 
 
 class RedisQuota(Quota):
@@ -31,6 +32,12 @@ class RedisQuota(Quota):
             'hosts': options['hosts'],
         })
 
+    def validate(self):
+        try:
+            self.conn.ping()
+        except Exception as e:
+            raise InvalidConfiguration(unicode(e))
+
     def is_rate_limited(self, project):
         proj_quota = self.get_project_quota(project)
         if project.team:
diff --git a/src/sentry/ratelimits/base.py b/src/sentry/ratelimits/base.py
index 25b65d7fa0..5b6997516c 100644
--- a/src/sentry/ratelimits/base.py
+++ b/src/sentry/ratelimits/base.py
@@ -2,5 +2,13 @@ from __future__ import absolute_import
 
 
 class RateLimiter(object):
+    def validate(self):
+        """
+        Validates the settings for this backend (i.e. such as proper connection
+        info).
+
+        Raise ``InvalidConfiguration`` if there is a configuration error.
+        """
+
     def is_limited(self, project, key, limit):
         return False
diff --git a/src/sentry/ratelimits/redis.py b/src/sentry/ratelimits/redis.py
index 6a90f1f696..26512a3e33 100644
--- a/src/sentry/ratelimits/redis.py
+++ b/src/sentry/ratelimits/redis.py
@@ -4,6 +4,7 @@ from django.conf import settings
 from nydus.db import create_cluster
 from time import time
 
+from sentry.exceptions import InvalidConfiguration
 from sentry.ratelimits.base import RateLimiter
 
 
@@ -23,6 +24,12 @@ class RedisRateLimiter(RateLimiter):
             'hosts': options['hosts'],
         })
 
+    def validate(self):
+        try:
+            self.conn.ping()
+        except Exception as e:
+            raise InvalidConfiguration(unicode(e))
+
     def is_limited(self, project, key, limit):
         key = 'rl:%s:%s:%s' % (
             key, project.id, int(time() / self.ttl)
diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 3203daae19..23beeab26f 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -13,6 +13,14 @@ class SearchBackend(object):
     def __init__(self, **options):
         pass
 
+    def validate(self):
+        """
+        Validates the settings for this backend (i.e. such as proper connection
+        info).
+
+        Raise ``InvalidConfiguration`` if there is a configuration error.
+        """
+
     def index(self, event):
         raise NotImplementedError
 
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 500789c787..9592e92d82 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -48,6 +48,14 @@ class BaseTSDB(object):
     def __init__(self, rollups=settings.SENTRY_TSDB_ROLLUPS):
         self.rollups = rollups
 
+    def validate(self):
+        """
+        Validates the settings for this backend (i.e. such as proper connection
+        info).
+
+        Raise ``InvalidConfiguration`` if there is a configuration error.
+        """
+
     def normalize_to_epoch(self, timestamp, seconds):
         """
         Given a ``timestamp`` (datetime object) normalize to an epoch timestamp.
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index f6de62b4a4..2e57dfe7d1 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -7,18 +7,17 @@ sentry.tsdb.redis
 """
 from __future__ import absolute_import
 
+import six
+
 from binascii import crc32
 from collections import defaultdict
 from datetime import timedelta
-from hashlib import md5
-
 from django.conf import settings
 from django.utils import timezone
-
+from hashlib import md5
 from nydus.db import create_cluster
 
-import six
-
+from sentry.exceptions import InvalidConfiguration
 from sentry.tsdb.base import BaseTSDB
 
 
@@ -68,6 +67,12 @@ class RedisTSDB(BaseTSDB):
         self.vnodes = vnodes
         super(RedisTSDB, self).__init__(**kwargs)
 
+    def validate(self):
+        try:
+            self.conn.ping()
+        except Exception as e:
+            raise InvalidConfiguration(unicode(e))
+
     def make_key(self, model, epoch, model_key):
         if isinstance(model_key, six.integer_types):
             vnode = model_key % self.vnodes
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index e293bc434e..1323d932ce 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -311,6 +311,19 @@ def initialize_app(config):
 
     initialize_receivers()
 
+    validate_backends()
+
+
+def validate_backends():
+    from sentry import app
+
+    app.buffer.validate()
+    app.nodestore.validate()
+    app.quotas.validate()
+    app.search.validate()
+    app.ratelimiter.validate()
+    app.tsdb.validate()
+
 
 def fix_south(settings):
     # South needs an adapter defined conditionally
