commit 882f3f6fc7c79181f12aaaf5bfd0ec211b3b4980
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Mar 8 12:56:19 2019 -0800

    fix(monitors): Better handle deletion states
    
    - Dont allow new checkins on deleted monitors
    - Dont update monitor status on paused monitors
    - Dont fail monitors that are paused or deleted and haven't checked in

diff --git a/src/sentry/api/endpoints/monitor_checkins.py b/src/sentry/api/endpoints/monitor_checkins.py
index a2c62e66cb..f6cceccefe 100644
--- a/src/sentry/api/endpoints/monitor_checkins.py
+++ b/src/sentry/api/endpoints/monitor_checkins.py
@@ -56,6 +56,9 @@ class MonitorCheckInsEndpoint(MonitorEndpoint):
         :pparam string monitor_id: the id of the monitor.
         :auth: required
         """
+        if monitor.status in [MonitorStatus.PENDING_DELETION, MonitorStatus.DELETION_IN_PROGRESS]:
+            return self.respond(status=404)
+
         serializer = CheckInSerializer(
             data=request.DATA,
             context={
@@ -75,7 +78,7 @@ class MonitorCheckInsEndpoint(MonitorEndpoint):
                 duration=result.get('duration'),
                 status=getattr(CheckInStatus, result['status'].upper()),
             )
-            if checkin.status == CheckInStatus.ERROR:
+            if checkin.status == CheckInStatus.ERROR and monitor.status != MonitorStatus.DISABLED:
                 if not monitor.mark_failed(last_checkin=checkin.date_added):
                     return self.respond(serialize(checkin, request.user), status=200)
             else:
@@ -83,7 +86,7 @@ class MonitorCheckInsEndpoint(MonitorEndpoint):
                     'last_checkin': checkin.date_added,
                     'next_checkin': monitor.get_next_scheduled_checkin(checkin.date_added),
                 }
-                if checkin.status == CheckInStatus.OK:
+                if checkin.status == CheckInStatus.OK and monitor.status != MonitorStatus.DISABLED:
                     monitor_params['status'] = MonitorStatus.OK
                 Monitor.objects.filter(
                     id=monitor.id,
diff --git a/src/sentry/tasks/check_monitors.py b/src/sentry/tasks/check_monitors.py
index 59c154b18e..ad4523f64d 100644
--- a/src/sentry/tasks/check_monitors.py
+++ b/src/sentry/tasks/check_monitors.py
@@ -24,7 +24,10 @@ def check_monitors(current_datetime=None):
         type__in=[MonitorType.HEARTBEAT, MonitorType.CRON_JOB],
         next_checkin__lt=current_datetime,
     ).exclude(
-        status=MonitorStatus.DISABLED,
+        status__in=[
+            MonitorStatus.DISABLED,
+            MonitorStatus.PENDING_DELETION,
+            MonitorStatus.DELETION_IN_PROGRESS],
     )[:10000]
     for monitor in qs:
         logger.info('monitor.missed-checkin', extra={
diff --git a/tests/sentry/api/endpoints/test_monitor_checkins.py b/tests/sentry/api/endpoints/test_monitor_checkins.py
index 0127be93c1..3fccb6c718 100644
--- a/tests/sentry/api/endpoints/test_monitor_checkins.py
+++ b/tests/sentry/api/endpoints/test_monitor_checkins.py
@@ -67,3 +67,80 @@ class CreateMonitorCheckInTest(APITestCase):
         assert monitor.status == MonitorStatus.ERROR
         assert monitor.last_checkin == checkin.date_added
         assert monitor.next_checkin == monitor.get_next_scheduled_checkin(checkin.date_added)
+
+    def test_disabled(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org, members=[user])
+        project = self.create_project(teams=[team])
+
+        monitor = Monitor.objects.create(
+            organization_id=org.id,
+            project_id=project.id,
+            next_checkin=timezone.now() - timedelta(minutes=1),
+            type=MonitorType.CRON_JOB,
+            status=MonitorStatus.DISABLED,
+            config={'schedule': '* * * * *'},
+        )
+
+        self.login_as(user=user)
+        with self.feature({'organizations:monitors': True}):
+            resp = self.client.post('/api/0/monitors/{}/checkins/'.format(monitor.guid), data={
+                'status': 'error'
+            })
+
+        assert resp.status_code == 201, resp.content
+
+        checkin = MonitorCheckIn.objects.get(guid=resp.data['id'])
+        assert checkin.status == CheckInStatus.ERROR
+
+        monitor = Monitor.objects.get(id=monitor.id)
+        assert monitor.status == MonitorStatus.DISABLED
+        assert monitor.last_checkin == checkin.date_added
+        assert monitor.next_checkin == monitor.get_next_scheduled_checkin(checkin.date_added)
+
+    def test_pending_deletion(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org, members=[user])
+        project = self.create_project(teams=[team])
+
+        monitor = Monitor.objects.create(
+            organization_id=org.id,
+            project_id=project.id,
+            next_checkin=timezone.now() - timedelta(minutes=1),
+            type=MonitorType.CRON_JOB,
+            status=MonitorStatus.PENDING_DELETION,
+            config={'schedule': '* * * * *'},
+        )
+
+        self.login_as(user=user)
+        with self.feature({'organizations:monitors': True}):
+            resp = self.client.post('/api/0/monitors/{}/checkins/'.format(monitor.guid), data={
+                'status': 'error'
+            })
+
+        assert resp.status_code == 404, resp.content
+
+    def test_deletion_in_progress(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org, members=[user])
+        project = self.create_project(teams=[team])
+
+        monitor = Monitor.objects.create(
+            organization_id=org.id,
+            project_id=project.id,
+            next_checkin=timezone.now() - timedelta(minutes=1),
+            type=MonitorType.CRON_JOB,
+            status=MonitorStatus.DELETION_IN_PROGRESS,
+            config={'schedule': '* * * * *'},
+        )
+
+        self.login_as(user=user)
+        with self.feature({'organizations:monitors': True}):
+            resp = self.client.post('/api/0/monitors/{}/checkins/'.format(monitor.guid), data={
+                'status': 'error'
+            })
+
+        assert resp.status_code == 404, resp.content
diff --git a/tests/sentry/tasks/test_check_monitors.py b/tests/sentry/tasks/test_check_monitors.py
index d5f39e8131..d4d5194640 100644
--- a/tests/sentry/tasks/test_check_monitors.py
+++ b/tests/sentry/tasks/test_check_monitors.py
@@ -29,6 +29,66 @@ class CheckMonitorsTest(TestCase):
             status=MonitorStatus.ERROR,
         ).exists()
 
+    def test_missing_checkin_but_disabled(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+
+        monitor = Monitor.objects.create(
+            organization_id=org.id,
+            project_id=project.id,
+            next_checkin=timezone.now() - timedelta(minutes=1),
+            type=MonitorType.CRON_JOB,
+            config={'schedule': '* * * * *'},
+            status=MonitorStatus.DISABLED,
+        )
+
+        check_monitors()
+
+        assert Monitor.objects.filter(
+            id=monitor.id,
+            status=MonitorStatus.DISABLED,
+        ).exists()
+
+    def test_missing_checkin_but_pending_deletion(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+
+        monitor = Monitor.objects.create(
+            organization_id=org.id,
+            project_id=project.id,
+            next_checkin=timezone.now() - timedelta(minutes=1),
+            type=MonitorType.CRON_JOB,
+            config={'schedule': '* * * * *'},
+            status=MonitorStatus.PENDING_DELETION,
+        )
+
+        check_monitors()
+
+        assert Monitor.objects.filter(
+            id=monitor.id,
+            status=MonitorStatus.PENDING_DELETION,
+        ).exists()
+
+    def test_missing_checkin_but_deletion_in_progress(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+
+        monitor = Monitor.objects.create(
+            organization_id=org.id,
+            project_id=project.id,
+            next_checkin=timezone.now() - timedelta(minutes=1),
+            type=MonitorType.CRON_JOB,
+            config={'schedule': '* * * * *'},
+            status=MonitorStatus.DELETION_IN_PROGRESS,
+        )
+
+        check_monitors()
+
+        assert Monitor.objects.filter(
+            id=monitor.id,
+            status=MonitorStatus.DELETION_IN_PROGRESS,
+        ).exists()
+
     def test_not_missing_checkin(self):
         org = self.create_organization()
         project = self.create_project(organization=org)
