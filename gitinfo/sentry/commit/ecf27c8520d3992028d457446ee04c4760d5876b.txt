commit ecf27c8520d3992028d457446ee04c4760d5876b
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Nov 9 11:59:51 2016 -0800

    permissions: filtering for Team/Projects by scopes (#4499)

diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 998bcf8c71..ec0db608e5 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -38,7 +38,7 @@ class ProjectStatus(object):
 
 class ProjectManager(BaseManager):
     # TODO(dcramer): we might want to cache this per user
-    def get_for_user(self, team, user, _skip_team_check=False):
+    def get_for_user(self, team, user, scope=None, _skip_team_check=False):
         from sentry.models import Team
 
         if not (user and user.is_authenticated()):
@@ -48,6 +48,7 @@ class ProjectManager(BaseManager):
             team_list = Team.objects.get_for_user(
                 organization=team.organization,
                 user=user,
+                scope=scope,
             )
 
             try:
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 0857abeba5..9567ed6855 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -24,12 +24,12 @@ from sentry.utils.retries import TimedRetryPolicy
 
 
 class TeamManager(BaseManager):
-    def get_for_user(self, organization, user, with_projects=False):
+    def get_for_user(self, organization, user, scope=None, with_projects=False):
         """
         Returns a list of all teams a user has some level of access to.
         """
         from sentry.models import (
-            OrganizationMemberTeam, Project, ProjectStatus
+            OrganizationMemberTeam, Project, ProjectStatus, OrganizationMember,
         )
 
         if not user.is_authenticated():
@@ -42,12 +42,24 @@ class TeamManager(BaseManager):
 
         if env.request and env.request.is_superuser() or settings.SENTRY_PUBLIC:
             team_list = list(base_team_qs)
-
         else:
+            try:
+                om = OrganizationMember.objects.get(
+                    user=user,
+                    organization=organization,
+                )
+            except OrganizationMember.DoesNotExist:
+                # User is not a member of the organization at all
+                return []
+
+            # If a scope is passed through, make sure this scope is
+            # available on the OrganizationMember object.
+            if scope is not None and scope not in om.get_scopes():
+                return []
+
             team_list = list(base_team_qs.filter(
                 id__in=OrganizationMemberTeam.objects.filter(
-                    organizationmember__user=user,
-                    organizationmember__organization=organization,
+                    organizationmember=om,
                     is_active=True,
                 ).values_list('team'),
             ))
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 10b40bdfe8..a78606b823 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -52,6 +52,13 @@ class TeamManagerTest(TestCase):
         )
         assert result == [team]
 
+        result = Team.objects.get_for_user(
+            organization=org,
+            user=user,
+            scope='idontexist',
+        )
+        assert result == []
+
         result = Team.objects.get_for_user(
             organization=org,
             user=user2,
