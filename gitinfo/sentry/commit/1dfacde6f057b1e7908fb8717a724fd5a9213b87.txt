commit 1dfacde6f057b1e7908fb8717a724fd5a9213b87
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 24 00:15:38 2013 -0700

    Remove magical settings and migrate internals to constants

diff --git a/CHANGES b/CHANGES
index cbffd11d3a..90529abab5 100644
--- a/CHANGES
+++ b/CHANGES
@@ -25,6 +25,15 @@ Incompatible Changes
 - Nearly all data within an event now has a fixed max size. See client
   developer documentation for details.
 - Project keys are no longer created for individuals by default
+- LOG_LEVELS, DEFAULT_LOG_LEVEL, and DEFAULT_LOGGER_NAME are no longer configurable.
+- DEFAULT_ALERT_PROJECT_THRESHOLD and DEFAULT_ALERT_GROUP_THRESHOLD are no longer
+  configurable.
+- SENTRY_EMAIL_SUBJECT_PREFIX and SENTRY_SERVER_EMAIL are no longer used, and default to
+  the appropriate Django options.
+- SENTRY_CACHE_BACKEND is no longer configurable.
+- SENTRY_AUTH_PROVIDERS is now AUTH_PROVIDERS.
+- Existing account recovery tokens are no longer valid.
+- sentry.utils.router has been removed.
 
 Protocol Version 4
 ==================
diff --git a/docs/config/index.rst b/docs/config/index.rst
index 7242819fb1..fbf8c7332c 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -3,19 +3,6 @@ Configuration
 
 This document describes additional configuration options available to the Sentry server. If you are looking for documentation for the client, it is maintained in the `Raven <http://github.com/getsentry/raven-python>`_ project.
 
-.. note:: While the options below are labeled without the ``SENTRY_`` prefix, when you are configuring them via your ``settings.py`` you **must** specify the prefix.
-
-.. data:: SENTRY_KEY
-    :noindex:
-
-    The shared secret for global administration privileges via the API.
-
-    We recommend using Project API keys to maintain access, as using a shared key provides a potential security risk.
-
-    ::
-
-    	SENTRY_KEY = '0123456789abcde'
-
 .. data:: SENTRY_URL_PREFIX
     :noindex:
 
@@ -27,42 +14,6 @@ This document describes additional configuration options available to the Sentry
 
 		SENTRY_URL_PREFIX = 'http://sentry.example.com'
 
-.. data:: SENTRY_SAMPLE_DATA
-    :noindex:
-
-	.. versionadded:: 1.10.0
-
-	Controls sampling of data.
-
-	Defaults to ``True``.
-
-	If this is enabled, data will be sampled in a manner similar to the following:
-
-	* 50 messages stores ~50 results
-	* 1000 messages stores ~400 results
-	* 10000 messages stores ~900 results
-	* 100000 messages stores ~1800 results
-	* 1000000 messages stores ~3600 results
-	* 10000000 messages stores ~4500 results
-
-	::
-
-		SENTRY_SAMPLE_DATA = False
-
-.. data:: SENTRY_LOG_LEVELS
-    :noindex:
-
-    A list of log levels, with their numeric value, as well as their short name.
-
-    ::
-
-        LOG_LEVELS = (
-            (logging.DEBUG, 'debug'),
-            (logging.INFO, 'info'),
-            (logging.WARNING, 'warning'),
-            (logging.ERROR, 'error'),
-            (logging.FATAL, 'fatal'),
-        )
 
 Authentication
 --------------
@@ -149,39 +100,6 @@ Authentication
 .. _Mozilla developer docs: https://developer.mozilla.org/En/HTTP_access_control#Simple_requests
 
 
-Notifications
--------------
-
-As of the current release, Sentry now designates its notification processing to plugins. Specifically, the email
-notifications have been moved to the ``sentry.plugins.sentry_mail``. You'll need to add this plugin to your
-``INSTALLED_APPS`` if you wish to continue using email notifications.
-
-The following settings now act as default values for the ``sentry_mail`` plugin, and can be overwritten per-project
-by visiting the plugin configuration page for that project.
-
-.. data:: SENTRY_EMAIL_SUBJECT_PREFIX
-    :noindex:
-
-	The prefix to apply to outgoing emails.
-
-	Defaults to ``""``.
-
-	::
-
-		SENTRY_EMAIL_SUBJECT_PREFIX = '[Sentry] '
-
-
-.. data:: SENTRY_SERVER_EMAIL
-    :noindex:
-
-	The reply-to email address for outgoing mail.
-
-	Defaults to ``root@localhost``.
-
-	::
-
-		SENTRY_SERVER_EMAIL = 'sentry@example.com'
-
 Services
 --------
 
@@ -256,3 +174,29 @@ The following settings are available for the built-in UDP API server:
     ::
 
         SENTRY_UDP_PORT = 9001
+
+
+Data Sampling
+-------------
+
+.. data:: SENTRY_SAMPLE_DATA
+    :noindex:
+
+    .. versionadded:: 1.10.0
+
+    Controls sampling of data.
+
+    Defaults to ``True``.
+
+    If this is enabled, data will be sampled in a manner similar to the following:
+
+    * 50 messages stores ~50 results
+    * 1000 messages stores ~400 results
+    * 10000 messages stores ~900 results
+    * 100000 messages stores ~1800 results
+    * 1000000 messages stores ~3600 results
+    * 10000000 messages stores ~4500 results
+
+    ::
+
+        SENTRY_SAMPLE_DATA = False
diff --git a/src/sentry/app.py b/src/sentry/app.py
index 9f104cf4bd..1197cfc391 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -6,7 +6,7 @@ sentry.app
 :license: BSD, see LICENSE for more details.
 """
 
-from sentry.conf import settings
+from django.conf import settings
 from sentry.utils.imports import import_string
 from threading import local
 
@@ -20,5 +20,5 @@ def get_instance(path, options):
     cls = import_string(path)
     return cls(**options)
 
-buffer = get_instance(settings.BUFFER, settings.BUFFER_OPTIONS)
+buffer = get_instance(settings.SENTRY_BUFFER, settings.SENTRY_BUFFER_OPTIONS)
 env = State()
diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 569a86901a..33e361b95b 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -18,12 +18,12 @@ for package in ('nydus', 'redis'):
             'Missing %r package, which is required for Redis buffers' % (
                 package,))
 
+from django.conf import settings
 from django.db import models
 from django.utils.encoding import smart_str
 from hashlib import md5
 from nydus.db import create_cluster
 from sentry.buffer import Buffer
-from sentry.conf import settings
 from sentry.utils.compat import pickle
 
 
@@ -33,7 +33,7 @@ class RedisBuffer(Buffer):
     def __init__(self, **options):
         if not options:
             # inherit default options from REDIS_OPTIONS
-            options = settings.REDIS_OPTIONS
+            options = settings.SENTRY_REDIS_OPTIONS
 
         super(RedisBuffer, self).__init__(**options)
         options.setdefault('hosts', {
diff --git a/src/sentry/conf/defaults.py b/src/sentry/conf/defaults.py
deleted file mode 100644
index 58aa875ac6..0000000000
--- a/src/sentry/conf/defaults.py
+++ /dev/null
@@ -1,170 +0,0 @@
-"""
-sentry.conf.defaults
-~~~~~~~~~~~~~~~~~~~~
-
-Represents the default values for all Sentry settings.
-
-:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-import logging
-import os
-import os.path
-
-MODULE_ROOT = os.path.dirname(__import__('sentry').__file__)
-
-# Allow local testing of Sentry even if DEBUG is enabled
-DEBUG = False
-
-FILTERS = (
-    'sentry.filters.StatusFilter',
-)
-
-KEY = None
-
-LOG_LEVELS = (
-    (logging.DEBUG, 'debug'),
-    (logging.INFO, 'info'),
-    (logging.WARNING, 'warning'),
-    (logging.ERROR, 'error'),
-    (logging.FATAL, 'fatal'),
-)
-
-DEFAULT_LOG_LEVEL = 'error'
-
-DEFAULT_LOGGER_NAME = 'root'
-
-# Absolute URL to the sentry root directory. Should not include a trailing slash.
-URL_PREFIX = ''
-
-# Allow access to Sentry without authentication.
-PUBLIC = False
-
-EMAIL_SUBJECT_PREFIX = ''
-
-INTERNAL_IPS = set()
-
-SERVER_EMAIL = 'root@localhost'
-
-LOGIN_URL = None
-
-PROJECT = 1
-
-# Only store a portion of all messages per unique group.
-SAMPLE_DATA = True
-
-# The following values control the sampling rates
-SAMPLE_RATES = (
-    (50, 1),
-    (1000, 2),
-    (10000, 10),
-    (100000, 50),
-    (1000000, 300),
-    (10000000, 2000),
-)
-
-MAX_SAMPLE_RATE = 10000
-
-SAMPLE_TIMES = (
-    (3600, 1),
-    (360, 10),
-    (60, 60),
-)
-
-MAX_SAMPLE_TIME = 10000
-
-# The number of events to display per page
-MESSAGES_PER_PAGE = 15
-
-# Web Service
-WEB_HOST = 'localhost'
-WEB_PORT = 9000
-WEB_OPTIONS = {
-    'workers': 3,
-}
-
-# UDP Service
-UDP_HOST = 'localhost'
-UDP_PORT = 9001
-
-# Queue (Kombu)
-QUEUE = {
-    'transport': 'kombu.transport.django.Transport',
-}
-
-# Should users without 'sentry.add_project' permissions be allowed
-# to create new projects
-ALLOW_PROJECT_CREATION = False
-
-# Should users without 'sentry.add_team' permissions be allowed
-# to create new projects
-ALLOW_TEAM_CREATION = False
-
-# Should users without superuser permissions be allowed to
-# make projects public
-ALLOW_PUBLIC_PROJECTS = True
-
-# Should users be allowed to register an account? If this is disabled
-# accounts can only be created when someone is invited or added
-# manually.
-ALLOW_REGISTRATION = True
-
-# Instructs Sentry to utilize it's internal search indexer on all incoming
-# events..
-USE_SEARCH = True
-
-# Enable trend results. These can be expensive and are calculated in real-time.
-# When disabled they will be replaced w/ a default priority sort.
-USE_TRENDING = True
-
-# Default sort option for the group stream
-DEFAULT_SORT_OPTION = 'date'
-
-# Default sort option for the search results
-SEARCH_DEFAULT_SORT_OPTION = 'date'
-
-# Default to not sending the Access-Control-Allow-Origin header on api/store
-ALLOW_ORIGIN = None
-
-# Enable scraping of javascript context for source code
-SCRAPE_JAVASCRIPT_CONTEXT = True
-
-# The alias for the cache backend (MUST be a compatible backend string for < 1.3)
-CACHE_BACKEND = 'dummy://'
-
-# The maximum number of events which can be requested as JSON
-MAX_JSON_RESULTS = 1000
-
-# Redis connection information (see Nydus documentation)
-REDIS_OPTIONS = {}
-
-# Buffer backend to use
-BUFFER = 'sentry.buffer.Buffer'
-BUFFER_OPTIONS = {}
-
-# Auth engines and the settings required for them to be listed
-AUTH_PROVIDERS = {
-    'twitter': ('TWITTER_CONSUMER_KEY', 'TWITTER_CONSUMER_SECRET'),
-    'facebook': ('FACEBOOK_APP_ID', 'FACEBOOK_API_SECRET'),
-    'github': ('GITHUB_APP_ID', 'GITHUB_API_SECRET'),
-    'google': ('GOOGLE_OAUTH2_CLIENT_ID', 'GOOGLE_OAUTH2_CLIENT_SECRET'),
-    'trello': ('TRELLO_API_KEY', 'TRELLO_API_SECRET'),
-    'bitbucket': ('BITBUCKET_CONSUMER_KEY', 'BITBUCKET_CONSUMER_SECRET'),
-}
-
-
-# Default alerting threshold values
-DEFAULT_ALERT_PROJECT_THRESHOLD = (500, 100)  # 500%, 100 events
-DEFAULT_ALERT_GROUP_THRESHOLD = (1000, 100)  # 1000%, 100 events
-
-RAVEN_JS_URL = 'd3nslu0hdya83q.cloudfront.net/dist/1.0/raven.min.js'
-
-# URI Prefixes for generating DSN URLs
-# (Defaults to URL_PREFIX by default)
-ENDPOINT = None
-PUBLIC_ENDPOINT = None
-
-# Early draft features. Not slated or public release yet.
-ENABLE_EXPLORE_CODE = False
-ENABLE_EXPLORE_USERS = False
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 1d3625d5ba..9a496b1d1c 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -69,6 +69,7 @@ if 'DATABASE_URL' in os.environ:
     if url.scheme == 'mysql':
         DATABASES['default']['ENGINE'] = 'django.db.backends.mysql'
 
+EMAIL_SUBJECT_PREFIX = '[Sentry] '
 
 # Local time zone for this installation. Choices can be found here:
 # http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
@@ -227,6 +228,16 @@ SOCIAL_AUTH_PIPELINE = (
 
 SOCIAL_AUTH_CREATE_USERS = True
 
+# Auth engines and the settings required for them to be listed
+AUTH_PROVIDERS = {
+    'twitter': ('TWITTER_CONSUMER_KEY', 'TWITTER_CONSUMER_SECRET'),
+    'facebook': ('FACEBOOK_APP_ID', 'FACEBOOK_API_SECRET'),
+    'github': ('GITHUB_APP_ID', 'GITHUB_API_SECRET'),
+    'google': ('GOOGLE_OAUTH2_CLIENT_ID', 'GOOGLE_OAUTH2_CLIENT_SECRET'),
+    'trello': ('TRELLO_API_KEY', 'TRELLO_API_SECRET'),
+    'bitbucket': ('BITBUCKET_CONSUMER_KEY', 'BITBUCKET_CONSUMER_SECRET'),
+}
+
 import random
 
 SOCIAL_AUTH_DEFAULT_USERNAME = lambda: random.choice(['Darth Vader', 'Obi-Wan Kenobi', 'R2-D2', 'C-3PO', 'Yoda'])
@@ -261,15 +272,6 @@ CELERY_QUEUES = (
     Queue('update', routing_key='update'),
 )
 
-
-# Sentry and Raven configuration
-
-SENTRY_PUBLIC = False
-SENTRY_PROJECT = 1
-SENTRY_CACHE_BACKEND = 'default'
-
-EMAIL_SUBJECT_PREFIX = '[Sentry] '
-
 # Disable South in tests as it is sending incorrect create signals
 SOUTH_TESTS_MIGRATE = True
 
@@ -399,6 +401,115 @@ if os.path.exists(NPM_ROOT):
         },
     }
 
+# Sentry and Raven configuration
+
+SENTRY_PUBLIC = False
+SENTRY_PROJECT = 1
+SENTRY_CACHE_BACKEND = 'default'
+
+SENTRY_FILTERS = (
+    'sentry.filters.StatusFilter',
+)
+
+SENTRY_KEY = None
+
+# Absolute URL to the sentry root directory. Should not include a trailing slash.
+SENTRY_URL_PREFIX = ''
+
+# Allow access to Sentry without authentication.
+SENTRY_PUBLIC = False
+
+# Login url (defaults to LOGIN_URL)
+SENTRY_LOGIN_URL = None
+
+# Default project ID (for internal errors)
+SENTRY_PROJECT = 1
+
+# Only store a portion of all messages per unique group.
+SENTRY_SAMPLE_DATA = True
+
+# The following values control the sampling rates
+SENTRY_SAMPLE_RATES = (
+    (50, 1),
+    (1000, 2),
+    (10000, 10),
+    (100000, 50),
+    (1000000, 300),
+    (10000000, 2000),
+)
+SENTRY_MAX_SAMPLE_RATE = 10000
+SENTRY_SAMPLE_TIMES = (
+    (3600, 1),
+    (360, 10),
+    (60, 60),
+)
+SENTRY_MAX_SAMPLE_TIME = 10000
+
+# Web Service
+SENTRY_WEB_HOST = 'localhost'
+SENTRY_WEB_PORT = 9000
+SENTRY_WEB_OPTIONS = {
+    'workers': 3,
+}
+
+# UDP Service
+SENTRY_UDP_HOST = 'localhost'
+SENTRY_UDP_PORT = 9001
+
+# Queue (Kombu)
+SENTRY_QUEUE = {
+    'transport': 'kombu.transport.django.Transport',
+}
+
+# Should users without 'sentry.add_project' permissions be allowed
+# to create new projects
+SENTRY_ALLOW_PROJECT_CREATION = False
+
+# Should users without 'sentry.add_team' permissions be allowed
+# to create new projects
+SENTRY_ALLOW_TEAM_CREATION = False
+
+# Should users without superuser permissions be allowed to
+# make projects public
+SENTRY_ALLOW_PUBLIC_PROJECTS = True
+
+# Should users be allowed to register an account? If this is disabled
+# accounts can only be created when someone is invited or added
+# manually.
+SENTRY_ALLOW_REGISTRATION = True
+
+# Instructs Sentry to utilize it's internal search indexer on all incoming
+# events..
+SENTRY_USE_SEARCH = True
+
+# Enable trend results. These can be expensive and are calculated in real-time.
+# When disabled they will be replaced w/ a default priority sort.
+SENTRY_USE_TRENDING = True
+
+# Default to not sending the Access-Control-Allow-Origin header on api/store
+SENTRY_ALLOW_ORIGIN = None
+
+# Enable scraping of javascript context for source code
+SENTRY_SCRAPE_JAVASCRIPT_CONTEXT = True
+
+# Redis connection information (see Nydus documentation)
+SENTRY_REDIS_OPTIONS = {}
+
+# Buffer backend to use
+SENTRY_BUFFER = 'sentry.buffer.Buffer'
+SENTRY_BUFFER_OPTIONS = {}
+
+SENTRY_RAVEN_JS_URL = 'd3nslu0hdya83q.cloudfront.net/dist/1.0/raven.min.js'
+
+# URI Prefixes for generating DSN URLs
+# (Defaults to URL_PREFIX by default)
+SENTRY_ENDPOINT = None
+SENTRY_PUBLIC_ENDPOINT = None
+
+# Early draft features. Not slated or public release yet.
+SENTRY_ENABLE_EXPLORE_CODE = False
+SENTRY_ENABLE_EXPLORE_USERS = False
+
 # Configure celery
 import djcelery
 djcelery.setup_loader()
diff --git a/src/sentry/conf/settings.py b/src/sentry/conf/settings.py
deleted file mode 100644
index 8a5dbc3e27..0000000000
--- a/src/sentry/conf/settings.py
+++ /dev/null
@@ -1,48 +0,0 @@
-"""
-sentry.conf.settings
-~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.conf.defaults import *  # NOQA
-
-from django.conf import settings
-
-import hashlib
-
-# Some sane overrides to better mix with Django
-DEBUG = getattr(settings, 'DEBUG', False) and not getattr(settings, 'SENTRY_TESTING', False)
-KEY = getattr(settings, 'SENTRY_KEY', hashlib.md5(settings.SECRET_KEY).hexdigest())
-EMAIL_SUBJECT_PREFIX = getattr(settings, 'EMAIL_SUBJECT_PREFIX', EMAIL_SUBJECT_PREFIX)
-INTERNAL_IPS = getattr(settings, 'INTERNAL_IPS', INTERNAL_IPS)
-SERVER_EMAIL = getattr(settings, 'SERVER_EMAIL', SERVER_EMAIL)
-
-for k in dir(settings):
-    if k.startswith('SENTRY_'):
-        locals()[k.split('SENTRY_', 1)[1]] = getattr(settings, k)
-
-if locals().get('REMOTE_URL'):
-    if isinstance(REMOTE_URL, basestring):
-        SERVERS = [REMOTE_URL]
-    elif not isinstance(REMOTE_URL, (list, tuple)):
-        raise ValueError("Sentry setting 'REMOTE_URL' must be of type list.")
-
-if locals().get('REMOTE_TIMEOUT'):
-    TIMEOUT = REMOTE_TIMEOUT
-
-
-def get_all_languages():
-    results = []
-    for path in os.listdir(os.path.join(MODULE_ROOT, 'locale')):
-        if path.startswith('.'):
-            continue
-        results.append(path)
-    return results
-
-# Setup languages for only available locales
-LANGUAGE_MAP = dict(settings.LANGUAGES)
-LANGUAGES = [(k, LANGUAGE_MAP[k]) for k in get_all_languages() if k in LANGUAGE_MAP]
-
-LOG_LEVEL_REVERSE_MAP = dict((str(v), k) for k, v in LOG_LEVELS)
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index faa640aac0..04f5beb843 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -7,10 +7,24 @@ These settings act as the default (base) settings for the Sentry-provided web-se
 :copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+import logging
+import os.path
 
+from django.conf import settings
 from django.utils.datastructures import SortedDict
 from django.utils.translation import ugettext_lazy as _
 
+
+def get_all_languages():
+    results = []
+    for path in os.listdir(os.path.join(MODULE_ROOT, 'locale')):
+        if path.startswith('.'):
+            continue
+        results.append(path)
+    return results
+
+MODULE_ROOT = os.path.dirname(__import__('sentry').__file__)
+
 SORT_OPTIONS = SortedDict((
     ('priority', _('Priority')),
     ('date', _('Last Seen')),
@@ -175,3 +189,33 @@ MAX_DICTIONARY_ITEMS = 50
 RESERVED_TEAM_SLUGS = (
     'admin', 'manage', 'login', 'account', 'register', 'api',
 )
+
+LOG_LEVELS = {
+    logging.DEBUG: 'debug',
+    logging.INFO: 'info',
+    logging.WARNING: 'warning',
+    logging.ERROR: 'error',
+    logging.FATAL: 'fatal',
+}
+DEFAULT_LOG_LEVEL = 'error'
+DEFAULT_LOGGER_NAME = 'root'
+
+# Default alerting threshold values
+DEFAULT_ALERT_PROJECT_THRESHOLD = (500, 100)  # 500%, 100 events
+DEFAULT_ALERT_GROUP_THRESHOLD = (1000, 100)  # 1000%, 100 events
+
+# The maximum number of events which can be requested as JSON
+MAX_JSON_RESULTS = 1000
+
+# Default paginator value
+EVENTS_PER_PAGE = 15
+
+# Default sort option for the group stream
+DEFAULT_SORT_OPTION = 'date'
+
+# Default sort option for the search results
+SEARCH_DEFAULT_SORT_OPTION = 'date'
+
+# Setup languages for only available locales
+LANGUAGE_MAP = dict(settings.LANGUAGES)
+LANGUAGES = [(k, LANGUAGE_MAP[k]) for k in get_all_languages() if k in LANGUAGE_MAP]
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 241486faf0..d45414cc55 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -18,7 +18,7 @@ import zlib
 from django.utils.encoding import smart_str
 
 from sentry.app import env
-from sentry.conf import settings
+from sentry.constants import DEFAULT_LOG_LEVEL, LOG_LEVELS
 from sentry.exceptions import InvalidTimestamp
 from sentry.models import Project, ProjectKey
 from sentry.tasks.store import preprocess_event
@@ -30,6 +30,8 @@ from sentry.utils.strings import decompress, truncatechars
 
 logger = logging.getLogger('sentry.coreapi.errors')
 
+LOG_LEVEL_REVERSE_MAP = dict((v, k) for k, v in LOG_LEVELS.iteritems())
+
 MAX_CULPRIT_LENGTH = 200
 MAX_MESSAGE_LENGTH = 2048
 
@@ -342,17 +344,17 @@ def validate_data(project, data, client=None):
             log('Discarded invalid value for interface: %s', k,
                 **client_metadata(client, project, exception=e, extra={'value': value}))
 
-    level = data.get('level') or settings.DEFAULT_LOG_LEVEL
+    level = data.get('level') or DEFAULT_LOG_LEVEL
     if isinstance(level, basestring) and not level.isdigit():
         # assume it's something like 'warning'
         try:
-            data['level'] = settings.LOG_LEVEL_REVERSE_MAP[level]
+            data['level'] = LOG_LEVEL_REVERSE_MAP[level]
         except KeyError, e:
             logger.info(
                 'Discarded invalid logger value: %s', level,
                 **client_metadata(client, project, exception=e))
-            data['level'] = settings.LOG_LEVEL_REVERSE_MAP.get(
-                settings.DEFAULT_LOG_LEVEL, settings.DEFAULT_LOG_LEVEL)
+            data['level'] = LOG_LEVEL_REVERSE_MAP.get(
+                DEFAULT_LOG_LEVEL, DEFAULT_LOG_LEVEL)
 
     return data
 
diff --git a/src/sentry/filters/helpers.py b/src/sentry/filters/helpers.py
index 692911ec78..c6d7f206ab 100644
--- a/src/sentry/filters/helpers.py
+++ b/src/sentry/filters/helpers.py
@@ -13,8 +13,8 @@ __all__ = ('get_filters',)
 
 import logging
 
+from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
-from sentry.conf import settings
 from sentry.filters.base import TagFilter
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
@@ -28,7 +28,7 @@ def get_filters(model=None, project=None):
     filter_list = []
 
     # Add builtins (specified with the FILTERS setting)
-    for class_path in settings.FILTERS:
+    for class_path in settings.SENTRY_FILTERS:
         if class_path not in FILTER_CACHE:
             module_name, class_name = class_path.rsplit('.', 1)
             try:
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 15fe6a3c04..a858a585c7 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -21,7 +21,7 @@ import weakref
 import uuid
 
 from celery.signals import task_postrun
-from django.conf import settings as dj_settings
+from django.conf import settings
 from django.contrib.auth.models import UserManager
 from django.core.signals import request_finished
 from django.db import models, transaction, IntegrityError
@@ -33,10 +33,9 @@ from django.utils.encoding import force_unicode
 
 from raven.utils.encoding import to_string
 from sentry import app
-from sentry.conf import settings
 from sentry.constants import (
     STATUS_RESOLVED, STATUS_UNRESOLVED, MINUTE_NORMALIZATION,
-    MAX_EXTRA_VARIABLE_SIZE)
+    MAX_EXTRA_VARIABLE_SIZE, LOG_LEVELS, DEFAULT_LOGGER_NAME)
 from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
 from sentry.tasks.index import index_event
@@ -51,7 +50,6 @@ logger = logging.getLogger('sentry.errors')
 
 UNSAVED = dict()
 MAX_TAG_LENGTH = 200
-LOG_LEVELS_DICT = dict(settings.LOG_LEVELS)
 
 
 def get_checksum_from_event(event):
@@ -252,17 +250,17 @@ class ScoreClause(object):
 def count_limit(count):
     # TODO: could we do something like num_to_store = max(math.sqrt(100*count)+59, 200) ?
     # ~ 150 * ((log(n) - 1.5) ^ 2 - 0.25)
-    for amount, sample_rate in settings.SAMPLE_RATES:
+    for amount, sample_rate in settings.SENTRY_SAMPLE_RATES:
         if count <= amount:
             return sample_rate
-    return settings.MAX_SAMPLE_RATE
+    return settings.SENTRY_MAX_SAMPLE_RATE
 
 
 def time_limit(silence):  # ~ 3600 per hour
-    for amount, sample_rate in settings.SAMPLE_TIMES:
+    for amount, sample_rate in settings.SENTRY_SAMPLE_TIMES:
         if silence >= amount:
             return sample_rate
-    return settings.MAX_SAMPLE_TIME
+    return settings.SENTRY_MAX_SAMPLE_TIME
 
 
 class UserManager(BaseManager, UserManager):
@@ -378,10 +376,10 @@ class GroupManager(BaseManager, ChartMixin):
 
     def normalize_event_data(self, data):
         # First we pull out our top-level (non-data attr) kwargs
-        if not data.get('level') or data['level'] not in LOG_LEVELS_DICT:
+        if not data.get('level') or data['level'] not in LOG_LEVELS:
             data['level'] = logging.ERROR
         if not data.get('logger'):
-            data['logger'] = settings.DEFAULT_LOGGER_NAME
+            data['logger'] = DEFAULT_LOGGER_NAME
 
         timestamp = data.get('timestamp')
         if not timestamp:
@@ -389,7 +387,7 @@ class GroupManager(BaseManager, ChartMixin):
 
         # We must convert date to local time so Django doesn't mess it up
         # based on TIME_ZONE
-        if dj_settings.TIME_ZONE:
+        if settings.TIME_ZONE:
             if not timezone.is_aware(timestamp):
                 timestamp = timestamp.replace(tzinfo=timezone.utc)
         elif timezone.is_aware(timestamp):
@@ -544,7 +542,7 @@ class GroupManager(BaseManager, ChartMixin):
         })
 
         tags = data['tags']
-        tags.append(('level', LOG_LEVELS_DICT[level]))
+        tags.append(('level', LOG_LEVELS[level]))
         if logger:
             tags.append(('logger', logger_name))
         if server_name:
@@ -602,7 +600,7 @@ class GroupManager(BaseManager, ChartMixin):
             is_sample=is_sample
         )
 
-        if settings.USE_SEARCH:
+        if settings.SENTRY_USE_SEARCH:
             index_event.delay(event)
 
         # TODO: move this to the queue
@@ -612,7 +610,7 @@ class GroupManager(BaseManager, ChartMixin):
         return event
 
     def should_sample(self, group, event):
-        if not settings.SAMPLE_DATA:
+        if not settings.SENTRY_SAMPLE_DATA:
             return False
 
         silence_timedelta = event.datetime - group.last_seen
@@ -876,7 +874,7 @@ class ProjectManager(BaseManager, ChartMixin):
             projects = set(base_qs)
         else:
             projects_qs = base_qs
-            if not settings.PUBLIC:
+            if not settings.SENTRY_PUBLIC:
                 # If the user is authenticated, include their memberships
                 teams = Team.objects.get_for_user(
                     user, access, access_groups=False).values()
@@ -1256,7 +1254,7 @@ class TeamManager(BaseManager):
         if not user.is_authenticated():
             return results
 
-        if settings.PUBLIC and access is None:
+        if settings.SENTRY_PUBLIC and access is None:
             for team in self.order_by('name').iterator():
                 results[team.slug] = team
         else:
diff --git a/src/sentry/middleware.py b/src/sentry/middleware.py
index 82f23b58f0..cb042522bf 100644
--- a/src/sentry/middleware.py
+++ b/src/sentry/middleware.py
@@ -1,7 +1,7 @@
 from sentry.app import env
-from sentry.conf import settings
 from sentry.models import UserOption
 from sentry.utils.http import absolute_uri
+from django.conf import settings
 from django.core.urlresolvers import reverse
 from social_auth.middleware import SocialAuthExceptionMiddleware
 
@@ -9,8 +9,8 @@ from social_auth.middleware import SocialAuthExceptionMiddleware
 class SentryMiddleware(object):
     def process_request(self, request):
         # HACK: bootstrap some env crud if we haven't yet
-        if not settings.URL_PREFIX:
-            settings.URL_PREFIX = request.build_absolute_uri(reverse('sentry')).strip('/')
+        if not settings.SENTRY_URL_PREFIX:
+            settings.SENTRY_URL_PREFIX = request.build_absolute_uri(reverse('sentry')).strip('/')
 
         # bind request to env
         env.request = request
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 43694674f8..cf240bdf96 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -20,7 +20,7 @@ from hashlib import md5
 from picklefield.fields import PickledObjectField
 from south.modelsinspector import add_introspection_rules
 
-from django.conf import settings as django_settings
+from django.conf import settings
 from django.contrib.auth.models import AbstractUser
 from django.contrib.auth.signals import user_logged_in
 from django.core.urlresolvers import reverse
@@ -32,12 +32,12 @@ from django.utils import timezone
 from django.utils.datastructures import SortedDict
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.conf import settings
 from sentry.constants import (
     STATUS_LEVELS, MEMBER_TYPES,
     MEMBER_OWNER, MEMBER_USER, PLATFORM_TITLES, PLATFORM_LIST,
     STATUS_UNRESOLVED, STATUS_RESOLVED, STATUS_VISIBLE, STATUS_HIDDEN,
-    MINUTE_NORMALIZATION, STATUS_MUTED, RESERVED_TEAM_SLUGS)
+    MINUTE_NORMALIZATION, STATUS_MUTED, RESERVED_TEAM_SLUGS,
+    LOG_LEVELS)
 from sentry.manager import (
     GroupManager, ProjectManager,
     MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager,
@@ -119,9 +119,9 @@ class Team(Model):
     """
     slug = models.SlugField(unique=True)
     name = models.CharField(max_length=64)
-    owner = models.ForeignKey(django_settings.AUTH_USER_MODEL)
+    owner = models.ForeignKey(settings.AUTH_USER_MODEL)
     date_added = models.DateTimeField(default=timezone.now, null=True)
-    members = models.ManyToManyField(django_settings.AUTH_USER_MODEL, through='sentry.TeamMember', related_name='team_memberships')
+    members = models.ManyToManyField(settings.AUTH_USER_MODEL, through='sentry.TeamMember', related_name='team_memberships')
 
     objects = TeamManager(cache_fields=(
         'pk',
@@ -165,7 +165,7 @@ class AccessGroup(Model):
     date_added = models.DateTimeField(default=timezone.now)
 
     projects = models.ManyToManyField('sentry.Project')
-    members = models.ManyToManyField(django_settings.AUTH_USER_MODEL)
+    members = models.ManyToManyField(settings.AUTH_USER_MODEL)
 
     objects = BaseManager()
 
@@ -184,7 +184,7 @@ class TeamMember(Model):
     be set to ownership.
     """
     team = models.ForeignKey(Team, related_name="member_set")
-    user = models.ForeignKey(django_settings.AUTH_USER_MODEL, related_name="sentry_teammember_set")
+    user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name="sentry_teammember_set")
     type = BoundedIntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
     date_added = models.DateTimeField(default=timezone.now)
 
@@ -211,7 +211,7 @@ class Project(Model):
 
     slug = models.SlugField(null=True)
     name = models.CharField(max_length=200)
-    owner = models.ForeignKey(django_settings.AUTH_USER_MODEL, related_name="sentry_owned_project_set", null=True)
+    owner = models.ForeignKey(settings.AUTH_USER_MODEL, related_name="sentry_owned_project_set", null=True)
     team = models.ForeignKey(Team, null=True)
     public = models.BooleanField(default=False)
     date_added = models.DateTimeField(default=timezone.now)
@@ -308,7 +308,7 @@ class Project(Model):
         self.delete()
 
     def is_default_project(self):
-        return str(self.id) == str(settings.PROJECT) or str(self.slug) == str(settings.PROJECT)
+        return str(self.id) == str(settings.SENTRY_PROJECT) or str(self.slug) == str(settings.SENTRY_PROJECT)
 
     def get_tags(self):
         if not hasattr(self, '_tag_cache'):
@@ -333,10 +333,10 @@ class ProjectKey(Model):
     project = models.ForeignKey(Project, related_name='key_set')
     public_key = models.CharField(max_length=32, unique=True, null=True)
     secret_key = models.CharField(max_length=32, unique=True, null=True)
-    user = models.ForeignKey(django_settings.AUTH_USER_MODEL, null=True)
+    user = models.ForeignKey(settings.AUTH_USER_MODEL, null=True)
 
     # For audits
-    user_added = models.ForeignKey(django_settings.AUTH_USER_MODEL, null=True, related_name='keys_added_set')
+    user_added = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, related_name='keys_added_set')
     date_added = models.DateTimeField(default=timezone.now, null=True)
 
     objects = BaseManager(cache_fields=(
@@ -364,12 +364,12 @@ class ProjectKey(Model):
         # TODO: change the DSN to use project slug once clients are compatible
         if not public:
             key = '%s:%s' % (self.public_key, self.secret_key)
-            url = settings.ENDPOINT
+            url = settings.SENTRY_ENDPOINT
         else:
             key = self.public_key
-            url = settings.PUBLIC_ENDPOINT
+            url = settings.SENTRY_PUBLIC_ENDPOINT
 
-        urlparts = urlparse.urlparse(url or settings.URL_PREFIX)
+        urlparts = urlparse.urlparse(url or settings.SENTRY_URL_PREFIX)
 
         return '%s://%s@%s/%s' % (
             urlparts.scheme,
@@ -426,7 +426,7 @@ class PendingTeamMember(Model):
     @property
     def token(self):
         checksum = md5()
-        for x in (str(self.team_id), self.email, settings.KEY):
+        for x in (str(self.team_id), self.email, settings.SECRET_KEY):
             checksum.update(x)
         return checksum.hexdigest()
 
@@ -460,7 +460,7 @@ class EventBase(Model):
     """
     project = models.ForeignKey(Project, null=True)
     logger = models.CharField(max_length=64, blank=True, default='root', db_index=True)
-    level = BoundedPositiveIntegerField(choices=settings.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
+    level = BoundedPositiveIntegerField(choices=LOG_LEVELS.items(), default=logging.ERROR, blank=True, db_index=True)
     message = models.TextField()
     culprit = models.CharField(max_length=200, blank=True, null=True, db_column='view')
     checksum = models.CharField(max_length=32, db_index=True)
@@ -789,7 +789,7 @@ class GroupBookmark(Model):
     project = models.ForeignKey(Project, related_name="bookmark_set")  # denormalized
     group = models.ForeignKey(Group, related_name="bookmark_set")
     # namespace related_name on User since we don't own the model
-    user = models.ForeignKey(django_settings.AUTH_USER_MODEL, related_name="sentry_bookmark_set")
+    user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name="sentry_bookmark_set")
 
     objects = BaseManager()
 
@@ -978,7 +978,7 @@ class UserOption(Model):
     Options which are specific to a plugin should namespace
     their key. e.g. key='myplugin:optname'
     """
-    user = models.ForeignKey(django_settings.AUTH_USER_MODEL)
+    user = models.ForeignKey(settings.AUTH_USER_MODEL)
     project = models.ForeignKey(Project, null=True)
     key = models.CharField(max_length=64)
     value = PickledObjectField()
@@ -992,7 +992,7 @@ class UserOption(Model):
 
 
 class LostPasswordHash(Model):
-    user = models.ForeignKey(django_settings.AUTH_USER_MODEL, unique=True)
+    user = models.ForeignKey(settings.AUTH_USER_MODEL, unique=True)
     hash = models.CharField(max_length=32)
     date_added = models.DateTimeField(default=timezone.now)
 
@@ -1018,7 +1018,7 @@ class LostPasswordHash(Model):
 
         context = {
             'user': self.user,
-            'domain': urlparse.urlparse(settings.URL_PREFIX).hostname,
+            'domain': urlparse.urlparse(settings.SENTRY_URL_PREFIX).hostname,
             'url': absolute_uri(reverse('sentry-account-recover-confirm', args=[
                 self.user.id, self.hash])),
         }
@@ -1064,7 +1064,7 @@ class Activity(Model):
     type = BoundedPositiveIntegerField(choices=TYPE)
     ident = models.CharField(max_length=64, null=True)
     # if the user is not set, it's assumed to be the system
-    user = models.ForeignKey(django_settings.AUTH_USER_MODEL, null=True)
+    user = models.ForeignKey(settings.AUTH_USER_MODEL, null=True)
     datetime = models.DateTimeField(default=timezone.now)
     data = GzippedDictField(null=True)
 
@@ -1173,7 +1173,7 @@ class AlertRelatedGroup(Model):
 
 def create_default_project(created_models, verbosity=2, **kwargs):
     if Project in created_models:
-        if Project.objects.filter(pk=settings.PROJECT).exists():
+        if Project.objects.filter(pk=settings.SENTRY_PROJECT).exists():
             return
 
         project = Project.objects.create(
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 39b8db02ca..70ee02a7f6 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -6,7 +6,7 @@ sentry.permissions
 :license: BSD, see LICENSE for more details.
 """
 from functools import wraps
-from sentry.conf import settings
+from django.conf import settings
 from sentry.constants import MEMBER_OWNER
 from sentry.plugins import plugins
 from sentry.utils.cache import cached_for_request
@@ -66,7 +66,7 @@ def can_create_projects(user, team=None):
 
     result = plugins.first('has_perm', user, 'add_project', team)
     if result is None:
-        result = settings.ALLOW_PROJECT_CREATION
+        result = settings.SENTRY_ALLOW_PROJECT_CREATION
 
     if result is False:
         return result
@@ -84,7 +84,7 @@ def can_create_teams(user):
     """
     result = plugins.first('has_perm', user, 'add_team')
     if result is None:
-        result = settings.ALLOW_TEAM_CREATION
+        result = settings.SENTRY_ALLOW_TEAM_CREATION
 
     if result is False:
         return result
@@ -101,7 +101,7 @@ def can_set_public_projects(user):
     """
     result = plugins.first('has_perm', user, 'set_project_public')
     if result is None:
-        result = settings.ALLOW_PUBLIC_PROJECTS
+        result = settings.SENTRY_ALLOW_PUBLIC_PROJECTS
 
     if result is False:
         return result
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index 6ded3194c7..a094947c53 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -5,10 +5,10 @@ sentry.plugins.bases.issue
 :copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from sentry.conf import settings
 from sentry.models import GroupMeta
 from sentry.plugins import Plugin
 from django import forms
+from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.utils.html import escape
 from django.utils.safestring import mark_safe
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 8d724ac194..6120aa7a88 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -7,11 +7,11 @@ sentry.plugins.sentry_mail.models
 """
 import sentry
 
+from django.conf import settings
 from django.core.mail import EmailMultiAlternatives
 from django.core.urlresolvers import reverse
 from django.template.loader import render_to_string
 from django.utils.translation import ugettext_lazy as _
-from sentry.conf import settings
 from sentry.models import User, UserOption
 from sentry.plugins import register
 from sentry.plugins.bases.notify import NotificationPlugin
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index b905255eba..e21fee1be0 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -16,16 +16,16 @@ class SentryHTTPServer(Service):
 
     def __init__(self, host=None, port=None, debug=False, workers=None,
                  validate=True):
-        from sentry.conf import settings
+        from django.conf import settings
 
         if validate:
             self.validate_settings()
 
-        self.host = host or settings.WEB_HOST
-        self.port = port or settings.WEB_PORT
+        self.host = host or settings.SENTRY_WEB_HOST
+        self.port = port or settings.SENTRY_WEB_PORT
         self.workers = workers
 
-        options = (settings.WEB_OPTIONS or {}).copy()
+        options = (settings.SENTRY_WEB_OPTIONS or {}).copy()
         options['debug'] = debug
         options.setdefault('bind', '%s:%s' % (self.host, self.port))
         options.setdefault('daemon', False)
diff --git a/src/sentry/services/udp.py b/src/sentry/services/udp.py
index 3b2639049a..86ca6790fd 100644
--- a/src/sentry/services/udp.py
+++ b/src/sentry/services/udp.py
@@ -73,10 +73,10 @@ class BaseUDPServer(Service):
 
     def __init__(self, host=None, port=None, debug=False, workers=None):
         super(BaseUDPServer, self).__init__(debug=debug)
-        from sentry.conf import settings
+        from django.conf import settings
 
-        self.host = host or settings.UDP_HOST
-        self.port = port or settings.UDP_PORT
+        self.host = host or settings.SENTRY_UDP_HOST
+        self.port = port or settings.SENTRY_UDP_PORT
         self.workers = workers or self.POOL_SIZE
 
     def setup(self):
@@ -133,11 +133,11 @@ default_servers = {
 
 
 def get_server_class(worker=None):
-    from sentry.conf import settings
+    from django.conf import settings
 
     if worker is None:
         # Use eventlet as default worker type
-        worker = getattr(settings, 'UDP_WORKER', None) or 'eventlet'
+        worker = getattr(settings, 'SENTRY_UDP_WORKER', None) or 'eventlet'
     if worker not in default_servers:
         raise CommandError(
             'Unsupported udp server type; expected one of %s, but got "%s".'
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index a026913502..261514cb07 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -61,12 +61,12 @@ def check_project_alerts(project_id, when, count, **kwargs):
     Given 'when' and 'count', which should signify recent times we compare it to historical data for this project
     and if over a given threshold, create an alert.
     """
-    from sentry.conf import settings
+    from sentry.constants import DEFAULT_ALERT_PROJECT_THRESHOLD
     from sentry.models import ProjectCountByMinute, ProjectOption, Alert
 
     # TODO: make this use the cache
     threshold, min_events = ProjectOption.objects.get_value(
-        project_id, 'alert:threshold', settings.DEFAULT_ALERT_PROJECT_THRESHOLD)
+        project_id, 'alert:threshold', DEFAULT_ALERT_PROJECT_THRESHOLD)
 
     if not threshold and min_events:
         return
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 517b18424f..5b4e6f7a0d 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -9,7 +9,7 @@ sentry.tasks.post_process
 from celery.task import task
 from hashlib import md5
 
-from sentry.conf import settings
+from django.conf import settings
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
 
@@ -44,7 +44,7 @@ def plugin_post_process_group(plugin_slug, group, **kwargs):
 def record_affected_user(group, event, **kwargs):
     from sentry.models import Group
 
-    if not settings.ENABLE_EXPLORE_USERS:
+    if not settings.SENTRY_ENABLE_EXPLORE_USERS:
         return
 
     data = event.data.get('sentry.interfaces.User')
@@ -71,7 +71,7 @@ def record_affected_user(group, event, **kwargs):
 def record_affected_code(group, event, **kwargs):
     from sentry.models import Group
 
-    if not settings.ENABLE_EXPLORE_CODE:
+    if not settings.SENTRY_ENABLE_EXPLORE_CODE:
         return
 
     data = event.interfaces.get('sentry.interfaces.Exception')
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index e379b8b86e..23a9df57a8 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -7,7 +7,7 @@ sentry.tasks.store
 """
 
 from celery.task import task
-from sentry.conf import settings
+from django.conf import settings
 
 
 @task(name='sentry.tasks.store.preprocess_event', queue='events')
@@ -17,7 +17,7 @@ def preprocess_event(data, **kwargs):
     logger = preprocess_event.get_logger()
 
     try:
-        if settings.SCRAPE_JAVASCRIPT_CONTEXT and data['platform'] == 'javascript':
+        if settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT and data['platform'] == 'javascript':
             try:
                 expand_javascript_source(data)
             except Exception, e:
diff --git a/src/sentry/templates/sentry/events/event_list.html b/src/sentry/templates/sentry/events/event_list.html
index 9f88618e28..4a751d40df 100644
--- a/src/sentry/templates/sentry/events/event_list.html
+++ b/src/sentry/templates/sentry/events/event_list.html
@@ -17,7 +17,7 @@
 {% endblock %}
 
 {% block main %}
-    {% paginator event_list from request as event_list per_page MESSAGES_PER_PAGE %}
+    {% paginator event_list from request as event_list per_page EVENTS_PER_PAGE %}
 
     <div class="btn-toolbar">
         <div class="btn-group pull-right">
diff --git a/src/sentry/templates/sentry/explore/code/tag_details.html b/src/sentry/templates/sentry/explore/code/tag_details.html
index 0afbf2b788..dd30138e27 100644
--- a/src/sentry/templates/sentry/explore/code/tag_details.html
+++ b/src/sentry/templates/sentry/explore/code/tag_details.html
@@ -32,7 +32,7 @@
 {% endblock %}
 
 {% block main %}
-    {% paginator event_list from request as event_list per_page MESSAGES_PER_PAGE %}
+    {% paginator event_list from request as event_list per_page EVENTS_PER_PAGE %}
 
     <div class="btn-toolbar">
         <div class="pull-left">
diff --git a/src/sentry/templates/sentry/explore/tag_details.html b/src/sentry/templates/sentry/explore/tag_details.html
index 7f2f72c1ca..05a5a0b31a 100644
--- a/src/sentry/templates/sentry/explore/tag_details.html
+++ b/src/sentry/templates/sentry/explore/tag_details.html
@@ -23,7 +23,7 @@
 {% endblock %}
 
 {% block main %}
-    {% paginator event_list from request as event_list per_page MESSAGES_PER_PAGE %}
+    {% paginator event_list from request as event_list per_page EVENTS_PER_PAGE %}
 
     <div class="btn-toolbar">
         <div class="pull-left">
diff --git a/src/sentry/templates/sentry/explore/tag_value_details.html b/src/sentry/templates/sentry/explore/tag_value_details.html
index 34ba4d70d3..d647cf231b 100644
--- a/src/sentry/templates/sentry/explore/tag_value_details.html
+++ b/src/sentry/templates/sentry/explore/tag_value_details.html
@@ -25,7 +25,7 @@
 {% endblock %}
 
 {% block main %}
-    {% paginator event_list from request as event_list per_page MESSAGES_PER_PAGE %}
+    {% paginator event_list from request as event_list per_page EVENTS_PER_PAGE %}
 
     <div class="btn-toolbar">
         <div class="pull-left">
diff --git a/src/sentry/templates/sentry/groups/event_list.html b/src/sentry/templates/sentry/groups/event_list.html
index a0c3f8859f..2f808eee15 100644
--- a/src/sentry/templates/sentry/groups/event_list.html
+++ b/src/sentry/templates/sentry/groups/event_list.html
@@ -4,7 +4,7 @@
 {% load sentry_helpers %}
 
 {% block inner %}
-    {% paginate event_list from request as event_list per_page MESSAGES_PER_PAGE %}
+    {% paginate event_list from request as event_list per_page EVENTS_PER_PAGE %}
 
     {% if event_list.objects %}
         <p class="alert alert-info">{% blocktrans with 'http://sentry.readthedocs.org' as link %}This list only contains a portion of all events seen. For more information about how Sentry samples events, see the <a href="{{ link }}">documentation</a>.{% endblocktrans %}</p>
@@ -23,4 +23,4 @@
         <p class="alert alert-notice">{% trans "There are no records recorded for this event." %}</p>
     {% endif %}
 
-{% endblock %}
\ No newline at end of file
+{% endblock %}
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index f847f97c5b..0505586bb5 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -36,7 +36,7 @@
 {% endblock %}
 
 {% block main %}
-    {% paginator event_list from request as event_list per_page MESSAGES_PER_PAGE %}
+    {% paginator event_list from request as event_list per_page EVENTS_PER_PAGE %}
     {% querystring from request without sort as sort_querystring %}
     {% querystring from request without since as since_querystring %}
 
@@ -134,7 +134,7 @@
                 </li>
             {% endfor %}
         </ul>
-    {% endif %}      
+    {% endif %}
 
     <div id="event_list"></div>
 
diff --git a/src/sentry/templates/sentry/users/details.html b/src/sentry/templates/sentry/users/details.html
index 0c985044b6..1acc626d8c 100644
--- a/src/sentry/templates/sentry/users/details.html
+++ b/src/sentry/templates/sentry/users/details.html
@@ -32,7 +32,7 @@
 {% endblock %}
 
 {% block main %}
-    {% paginator event_list from request as event_list per_page MESSAGES_PER_PAGE %}
+    {% paginator event_list from request as event_list per_page EVENTS_PER_PAGE %}
 
     <div class="btn-toolbar">
         <div class="pull-left">
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 2459cdfcbf..4cf65be620 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -23,8 +23,7 @@ from django.utils.html import escape
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
 
-from sentry.conf import settings
-from sentry.constants import STATUS_MUTED
+from sentry.constants import STATUS_MUTED, EVENTS_PER_PAGE
 from sentry.models import Group, Option
 from sentry.web.helpers import group_is_public
 from sentry.utils import to_unicode
@@ -189,7 +188,7 @@ def duration(value):
                 Constant('from'), Variable('request'),
                 Optional([Constant('as'), Name('asvar')]),
                 Optional([Constant('per_page'), Variable('per_page')])])
-def paginate(context, queryset_or_list, request, asvar=None, per_page=settings.MESSAGES_PER_PAGE):
+def paginate(context, queryset_or_list, request, asvar=None, per_page=EVENTS_PER_PAGE):
     """{% paginate queryset_or_list from request as foo[ per_page 25] %}"""
     result = paginate_func(request, queryset_or_list, per_page, endless=True)
 
@@ -208,7 +207,7 @@ def paginate(context, queryset_or_list, request, asvar=None, per_page=settings.M
                 Constant('from'), Variable('request'),
                 Optional([Constant('as'), Name('asvar')]),
                 Optional([Constant('per_page'), Variable('per_page')])])
-def paginator(context, queryset_or_list, request, asvar=None, per_page=settings.MESSAGES_PER_PAGE):
+def paginator(context, queryset_or_list, request, asvar=None, per_page=EVENTS_PER_PAGE):
     """{% paginator queryset_or_list from request as foo[ per_page 25] %}"""
     result = paginate_func(request, queryset_or_list, per_page, endless=True)
 
diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index f84f4a27e1..1208666608 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -12,10 +12,9 @@ import base64
 from exam import Exam, fixture, before  # NOQA
 from functools import wraps
 
-from sentry.conf import settings
 from sentry.utils import json
 
-from django.conf import settings as django_settings
+from django.conf import settings
 from django.contrib.auth import login
 from django.core.cache import cache
 from django.core.management import call_command
@@ -72,24 +71,14 @@ class Settings(object):
     def __init__(self, **overrides):
         self.overrides = overrides
         self._orig = {}
-        self._orig_sentry = {}
 
     def __enter__(self):
         for k, v in self.overrides.iteritems():
-            self._orig[k] = getattr(django_settings, k, self.NotDefined)
-            setattr(django_settings, k, v)
-            if k.startswith('SENTRY_'):
-                nk = k.split('SENTRY_', 1)[1]
-                self._orig_sentry[nk] = getattr(settings, nk, self.NotDefined)
-                setattr(settings, nk, v)
+            self._orig[k] = getattr(settings, k, self.NotDefined)
+            setattr(settings, k, v)
 
     def __exit__(self, exc_type, exc_value, traceback):
         for k, v in self._orig.iteritems():
-            if v is self.NotDefined:
-                delattr(django_settings, k)
-            else:
-                setattr(django_settings, k, v)
-        for k, v in self._orig_sentry.iteritems():
             if v is self.NotDefined:
                 delattr(settings, k)
             else:
@@ -152,9 +141,9 @@ class BaseTestCase(Exam):
         assert resp['Location'] == 'http://testserver' + reverse('sentry-login')
 
     def login_as(self, user):
-        user.backend = django_settings.AUTHENTICATION_BACKENDS[0]
+        user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
-        engine = import_module(django_settings.SESSION_ENGINE)
+        engine = import_module(settings.SESSION_ENGINE)
 
         request = HttpRequest()
         if self.client.session:
@@ -168,13 +157,13 @@ class BaseTestCase(Exam):
         request.session.save()
 
         # Set the cookie to represent the session.
-        session_cookie = django_settings.SESSION_COOKIE_NAME
+        session_cookie = settings.SESSION_COOKIE_NAME
         self.client.cookies[session_cookie] = request.session.session_key
         cookie_data = {
             'max-age': None,
             'path': '/',
-            'domain': django_settings.SESSION_COOKIE_DOMAIN,
-            'secure': django_settings.SESSION_COOKIE_SECURE or None,
+            'domain': settings.SESSION_COOKIE_DOMAIN,
+            'secure': settings.SESSION_COOKIE_SECURE or None,
             'expires': None,
         }
         self.client.cookies[session_cookie].update(cookie_data)
@@ -194,7 +183,7 @@ class BaseTestCase(Exam):
     def _postWithKey(self, data, key=None):
         resp = self.client.post(reverse('sentry-api-store'), {
             'data': self._makeMessage(data),
-            'key': settings.KEY,
+            'key': settings.SENTRY_KEY,
         })
         return resp
 
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 466708a743..6356036277 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -5,9 +5,8 @@ sentry.utils.auth
 :copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from django.conf import settings as dj_settings
+from django.conf import settings
 from django.contrib.auth.backends import ModelBackend
-from sentry.conf import settings
 from sentry.models import User
 
 
@@ -19,7 +18,7 @@ def get_auth_providers():
     return [
         key for key, cfg_names
         in settings.AUTH_PROVIDERS.iteritems()
-        if all(getattr(dj_settings, c, None) for c in cfg_names)
+        if all(getattr(settings, c, None) for c in cfg_names)
     ]
 
 
diff --git a/src/sentry/utils/cache.py b/src/sentry/utils/cache.py
index 90ffb63754..bb40e332dd 100644
--- a/src/sentry/utils/cache.py
+++ b/src/sentry/utils/cache.py
@@ -10,16 +10,9 @@ import logging
 import random
 import time
 
-from django.core.cache import get_cache, cache as default_cache
+from django.core.cache import cache
 
-from sentry.conf import settings
-
-if settings.CACHE_BACKEND != 'default':
-    _cache = get_cache(settings.CACHE_BACKEND)  # NOQA
-else:
-    _cache = default_cache
-
-cache = _cache
+default_cache = cache
 
 logger = logging.getLogger(__name__)
 
@@ -37,7 +30,7 @@ class Lock(object):
     """
     def __init__(self, lock_key, timeout=3, cache=None, nowait=False):
         if cache is None:
-            self.cache = _cache
+            self.cache = default_cache
         else:
             self.cache = cache
         self.timeout = timeout
diff --git a/src/sentry/utils/db.py b/src/sentry/utils/db.py
index 91be60bc8a..dc1c32e0e8 100644
--- a/src/sentry/utils/db.py
+++ b/src/sentry/utils/db.py
@@ -9,26 +9,25 @@ sentry.utils.db
 import django
 import operator
 
-from django.conf import settings as django_settings
+from django.conf import settings
 from django.db.models.expressions import ExpressionNode, F
 from django.db.models.fields.related import SingleRelatedObjectDescriptor
-from sentry.conf import settings
 
 
 def get_db_engine(alias='default'):
     has_multidb = django.VERSION >= (1, 2)
     if has_multidb:
-        value = django_settings.DATABASES[alias]['ENGINE']
+        value = settings.DATABASES[alias]['ENGINE']
     else:
         assert alias == 'default', 'You cannot fetch a database engine other than the default on Django < 1.2'
-        value = django_settings.DATABASE_ENGINE
+        value = settings.DATABASE_ENGINE
     return value.rsplit('.', 1)[-1]
 
 
 def has_trending(alias='default'):
     # we only support trend queries for postgres to db optimization
     # issues in mysql, and lack of anything useful in sqlite
-    return settings.USE_TRENDING and get_db_engine('default').startswith('postgres')
+    return settings.SENTRY_USE_TRENDING and get_db_engine('default').startswith('postgres')
 
 
 def has_charts(db):
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 3796ce6f97..6dbe8f248a 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -8,13 +8,13 @@ sentry.utils.http
 import urllib
 from urlparse import urlparse, urljoin
 
-from sentry.conf import settings
+from django.conf import settings
 
 
 def absolute_uri(url=None):
     if not url:
-        return settings.URL_PREFIX
-    return urljoin(settings.URL_PREFIX, url)
+        return settings.SENTRY_URL_PREFIX
+    return urljoin(settings.SENTRY_URL_PREFIX, url)
 
 
 def safe_urlencode(params, doseq=0):
@@ -58,10 +58,10 @@ def get_origins(project=None):
     from sentry.plugins.helpers import get_option
 
     # TODO: we should cache this
-    if settings.ALLOW_ORIGIN == '*':
+    if settings.SENTRY_ALLOW_ORIGIN == '*':
         return frozenset(['*'])
-    elif settings.ALLOW_ORIGIN:
-        result = settings.ALLOW_ORIGIN.split(' ')
+    elif settings.SENTRY_ALLOW_ORIGIN:
+        result = settings.SENTRY_ALLOW_ORIGIN.split(' ')
     else:
         result = []
 
diff --git a/src/sentry/utils/router.py b/src/sentry/utils/router.py
deleted file mode 100644
index dc66922cb0..0000000000
--- a/src/sentry/utils/router.py
+++ /dev/null
@@ -1,25 +0,0 @@
-"""
-sentry.utils.router
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.conf import settings
-
-
-class SentryRouter(object):
-    def db_for_write(self, model, **hints):
-        if model._meta.app_label == 'sentry':
-            return settings.DATABASE_USING
-
-    def db_for_read(self, model, **hints):
-        return self.db_for_write(model, **hints)
-
-    def allow_syncdb(self, db, model):
-        sentry_db = settings.DATABASE_USING
-        if not sentry_db:
-            return None
-        if model._meta.app_label == 'sentry' and db != sentry_db:
-            return False
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index 6b9fd3990b..988dc4fb3f 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -131,7 +131,6 @@ EMAIL_USE_TLS = False
 ###########
 
 SECRET_KEY = %(default_key)r
-SENTRY_KEY = SECRET_KEY
 
 # http://twitter.com/apps/new
 # It's important that input a callback URL, even if its useless. We have no idea why, consult Twitter.
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 623b1fcff0..ccee0bc6be 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -21,9 +21,9 @@ from django.views.decorators.csrf import csrf_exempt
 from django.views.decorators.vary import vary_on_cookie
 from django.views.generic.base import View as BaseView
 
-from sentry.conf import settings
 from sentry.constants import (
-    MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED, STATUS_RESOLVED)
+    MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED, STATUS_RESOLVED,
+    EVENTS_PER_PAGE)
 from sentry.coreapi import (
     project_from_auth_vars, decode_and_decompress_data,
     safely_load_json_string, validate_data, insert_data_to_database, APIError,
@@ -306,7 +306,7 @@ class StoreView(APIView):
 @api
 def poll(request, team, project):
     offset = 0
-    limit = settings.MESSAGES_PER_PAGE
+    limit = EVENTS_PER_PAGE
 
     response = _get_group_list(
         request=request,
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index f2329c0eb8..c22f0b33e7 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -10,8 +10,7 @@ from django import forms
 from django.contrib.auth import authenticate
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.conf import settings
-from sentry.constants import EMPTY_PASSWORD_VALUES
+from sentry.constants import EMPTY_PASSWORD_VALUES, LANGUAGES
 from sentry.models import UserOption, User
 
 
@@ -117,7 +116,7 @@ class AccountSettingsForm(forms.Form):
 
 
 class AppearanceSettingsForm(forms.Form):
-    language = forms.ChoiceField(label=_('Language'), choices=settings.LANGUAGES, required=False)
+    language = forms.ChoiceField(label=_('Language'), choices=LANGUAGES, required=False)
     stacktrace_order = forms.ChoiceField(label=_('Stacktrace order'), choices=(
         ('-1', _('Default (let Sentry decide)')),
         ('1', _('Most recent call last')),
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 175e1f727b..1f6ae1dd2a 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -7,7 +7,6 @@ sentry.web.frontend.accounts
 """
 import itertools
 
-from django.conf import settings as dj_settings
 from django.contrib import messages
 from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
@@ -34,8 +33,8 @@ from sentry.utils.safe import safe_execute
 @csrf_protect
 @never_cache
 def login(request):
+    from django.conf import settings
     from django.contrib.auth.forms import AuthenticationForm
-    from sentry.conf import settings
 
     if request.user.is_authenticated():
         return login_redirect(request)
@@ -51,9 +50,9 @@ def login(request):
     context.update({
         'form': form,
         'next': request.session.get('_next'),
-        'CAN_REGISTER': settings.ALLOW_REGISTRATION or request.session.get('can_register'),
+        'CAN_REGISTER': settings.SENTRY_ALLOW_REGISTRATION or request.session.get('can_register'),
         'AUTH_PROVIDERS': get_auth_providers(),
-        'SOCIAL_AUTH_CREATE_USERS': dj_settings.SOCIAL_AUTH_CREATE_USERS,
+        'SOCIAL_AUTH_CREATE_USERS': settings.SOCIAL_AUTH_CREATE_USERS,
     })
     return render_to_response('sentry/login.html', context, request)
 
@@ -62,9 +61,9 @@ def login(request):
 @never_cache
 @transaction.commit_on_success
 def register(request):
-    from sentry.conf import settings
+    from django.conf import settings
 
-    if not (settings.ALLOW_REGISTRATION or request.session.get('can_register')):
+    if not (settings.SENTRY_ALLOW_REGISTRATION or request.session.get('can_register')):
         return HttpResponseRedirect(reverse('sentry'))
 
     form = RegistrationForm(request.POST or None)
@@ -75,7 +74,7 @@ def register(request):
         request.session.pop('can_register', None)
 
         # HACK: grab whatever the first backend is and assume it works
-        user.backend = dj_settings.AUTHENTICATION_BACKENDS[0]
+        user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
         login_user(request, user)
 
@@ -84,7 +83,7 @@ def register(request):
     return render_to_response('sentry/register.html', {
         'form': form,
         'AUTH_PROVIDERS': get_auth_providers(),
-        'SOCIAL_AUTH_CREATE_USERS': dj_settings.SOCIAL_AUTH_CREATE_USERS,
+        'SOCIAL_AUTH_CREATE_USERS': settings.SOCIAL_AUTH_CREATE_USERS,
     }, request)
 
 
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index d1330b5e99..f52f48d056 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -11,7 +11,7 @@ import pkg_resources
 import sys
 import uuid
 
-from django.conf import settings as dj_settings
+from django.conf import settings
 from django.core.context_processors import csrf
 from django.core.mail import send_mail
 from django.core.urlresolvers import reverse
@@ -22,7 +22,6 @@ from django.utils import timezone
 from django.views.decorators.csrf import csrf_protect
 
 from sentry.app import env
-from sentry.conf import settings
 from sentry.models import Team, Project, GroupCountByMinute, User
 from sentry.plugins import plugins
 from sentry.utils.http import absolute_uri
@@ -337,11 +336,11 @@ def status_mail(request):
 
     return render_to_response('sentry/admin/status/mail.html', {
         'form': form,
-        'EMAIL_HOST': dj_settings.EMAIL_HOST,
-        'EMAIL_HOST_PASSWORD': bool(dj_settings.EMAIL_HOST_PASSWORD),
-        'EMAIL_HOST_USER': dj_settings.EMAIL_HOST_USER,
-        'EMAIL_PORT': dj_settings.EMAIL_PORT,
-        'EMAIL_USE_TLS': dj_settings.EMAIL_USE_TLS,
+        'EMAIL_HOST': settings.EMAIL_HOST,
+        'EMAIL_HOST_PASSWORD': bool(settings.EMAIL_HOST_PASSWORD),
+        'EMAIL_HOST_USER': settings.EMAIL_HOST_USER,
+        'EMAIL_PORT': settings.EMAIL_PORT,
+        'EMAIL_USE_TLS': settings.EMAIL_USE_TLS,
     }, request)
 
 
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index b1e8723f3c..fbe101c9ae 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -15,19 +15,20 @@ import datetime
 import logging
 import re
 
+from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db.models import Q
 from django.http import HttpResponse, HttpResponseRedirect, Http404
 from django.shortcuts import get_object_or_404
 from django.utils import timezone
 
-from sentry.conf import settings
 from sentry.constants import (
     SORT_OPTIONS, SEARCH_SORT_OPTIONS, SORT_CLAUSES,
     MYSQL_SORT_CLAUSES, SQLITE_SORT_CLAUSES, MEMBER_USER,
     SCORE_CLAUSES, MYSQL_SCORE_CLAUSES, SQLITE_SCORE_CLAUSES,
     ORACLE_SORT_CLAUSES, ORACLE_SCORE_CLAUSES,
-    MSSQL_SORT_CLAUSES, MSSQL_SCORE_CLAUSES)
+    MSSQL_SORT_CLAUSES, MSSQL_SCORE_CLAUSES, DEFAULT_SORT_OPTION,
+    SEARCH_DEFAULT_SORT_OPTION, MAX_JSON_RESULTS)
 from sentry.filters import get_filters
 from sentry.models import (
     Project, Group, Event, SearchDocument, Activity, EventMapping, TagKey)
@@ -103,14 +104,14 @@ def _get_group_list(request, project):
 
     sort = request.GET.get('sort') or request.session.get('streamsort')
     if sort not in SORT_OPTIONS:
-        sort = settings.DEFAULT_SORT_OPTION
+        sort = DEFAULT_SORT_OPTION
 
     # Save last sort in session
     if sort != request.session.get('streamsort'):
         request.session['streamsort'] = sort
 
     if sort.startswith('accel_') and not has_trending():
-        sort = settings.DEFAULT_SORT_OPTION
+        sort = DEFAULT_SORT_OPTION
 
     engine = get_db_engine('default')
     if engine.startswith('sqlite'):
@@ -257,7 +258,7 @@ def search(request, team, project):
 
     sort = request.GET.get('sort')
     if sort not in SEARCH_SORT_OPTIONS:
-        sort = settings.SEARCH_DEFAULT_SORT_OPTION
+        sort = SEARCH_DEFAULT_SORT_OPTION
     sort_label = SEARCH_SORT_OPTIONS[sort]
 
     result = event_re.match(query)
@@ -305,7 +306,7 @@ def search(request, team, project):
                 'team_slug': team.slug,
                 'group_id': group_id,
             }))
-    elif not settings.USE_SEARCH:
+    elif not settings.SENTRY_USE_SEARCH:
         event_list = Group.objects.none()
         # return render_to_response('sentry/invalid_message_id.html', {
         #         'project': project,
@@ -453,12 +454,12 @@ def group_event_list(request, team, project, group):
 def group_event_list_json(request, team, project, group_id):
     group = get_object_or_404(Group, id=group_id, project=project)
 
-    limit = request.GET.get('limit', settings.MAX_JSON_RESULTS)
+    limit = request.GET.get('limit', MAX_JSON_RESULTS)
     try:
         limit = int(limit)
     except ValueError:
         return HttpResponse('non numeric limit', status=400, mimetype='text/plain')
-    if limit > settings.MAX_JSON_RESULTS:
+    if limit > MAX_JSON_RESULTS:
         return HttpResponse("too many objects requested", mimetype='text/plain', status=400)
 
     events = group.event_set.order_by('-id')[:limit]
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index e9fe701d90..605c17a1fb 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -13,8 +13,8 @@ from django.views.decorators.csrf import csrf_protect
 from django.views.decorators.http import require_http_methods
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.conf import settings
-from sentry.constants import MEMBER_OWNER, STATUS_HIDDEN
+from sentry.constants import (
+    MEMBER_OWNER, STATUS_HIDDEN, DEFAULT_ALERT_PROJECT_THRESHOLD)
 from sentry.models import Project, ProjectKey, Team, TagKey
 from sentry.permissions import (
     can_remove_project, can_add_project_key, can_remove_project_key)
@@ -221,7 +221,7 @@ def notification_settings(request, team, project):
         ))
 
     threshold, min_events = project.get_option(
-        'alert:threshold', settings.DEFAULT_ALERT_PROJECT_THRESHOLD)
+        'alert:threshold', DEFAULT_ALERT_PROJECT_THRESHOLD)
 
     alert_form = AlertSettingsForm(
         data=request.POST or None,
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 9e6d86e864..8f2c00071b 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -9,15 +9,14 @@ sentry.web.helpers
 import logging
 import warnings
 
-from django.conf import settings as dj_settings
+from django.conf import settings
 from django.core.urlresolvers import reverse, resolve
 from django.http import HttpResponse
 from django.template import loader, RequestContext, Context
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
-from sentry.conf import settings
-from sentry.constants import MEMBER_OWNER
+from sentry.constants import MEMBER_OWNER, EVENTS_PER_PAGE
 from sentry.models import Project, Team, Option, ProjectOption, ProjectKey
 
 logger = logging.getLogger('sentry.errors')
@@ -69,11 +68,11 @@ def get_login_url(reset=False):
         # if LOGIN_URL resolves force login_required to it instead of our own
         # XXX: this must be done as late as possible to avoid idempotent requirements
         try:
-            resolve(dj_settings.LOGIN_URL)
+            resolve(settings.LOGIN_URL)
         except Exception:
-            _LOGIN_URL = settings.LOGIN_URL
+            _LOGIN_URL = settings.SENTRY_LOGIN_URL
         else:
-            _LOGIN_URL = dj_settings.LOGIN_URL
+            _LOGIN_URL = settings.LOGIN_URL
 
         if _LOGIN_URL is None:
             _LOGIN_URL = reverse('sentry-login')
@@ -82,7 +81,7 @@ def get_login_url(reset=False):
 
 def get_internal_project():
     try:
-        project = Project.objects.get(id=settings.PROJECT)
+        project = Project.objects.get(id=settings.SENTRY_PROJECT)
     except Project.DoesNotExist:
         return {}
     try:
@@ -100,9 +99,9 @@ def get_default_context(request, existing_context=None, team=None):
     from sentry.plugins import plugins
 
     context = {
-        'HAS_SEARCH': settings.USE_SEARCH,
-        'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
-        'URL_PREFIX': settings.URL_PREFIX,
+        'HAS_SEARCH': settings.SENTRY_USE_SEARCH,
+        'EVENTS_PER_PAGE': EVENTS_PER_PAGE,
+        'URL_PREFIX': settings.SENTRY_URL_PREFIX,
         'PLUGINS': plugins,
     }
 
@@ -216,4 +215,4 @@ def plugin_config(plugin, project, request):
 
 
 def get_raven_js_url():
-    return settings.RAVEN_JS_URL
+    return settings.SENTRY_RAVEN_JS_URL
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 8c779ef433..68db081963 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -210,7 +210,7 @@ class DepdendencyTest(TestCase):
             raise ImportError("No module named %s" % (package,))
         return callable
 
-    @mock.patch('sentry.conf.settings')
+    @mock.patch('django.conf.settings')
     @mock.patch('sentry.utils.settings.import_string')
     def validate_dependency(self, key, package, dependency_type, dependency,
                             setting_value, import_string, settings):
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index e10a59a99e..ab16e726c0 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -81,12 +81,12 @@ class ProjectKeyTest(TestCase):
 class PendingTeamMemberTest(TestCase):
     def test_token_generation(self):
         member = PendingTeamMember(id=1, team_id=1, email='foo@example.com')
-        with self.Settings(SENTRY_KEY='a'):
+        with self.Settings(SECRET_KEY='a'):
             self.assertEquals(member.token, 'f3f2aa3e57f4b936dfd4f42c38db003e')
 
     def test_token_generation_unicode_key(self):
         member = PendingTeamMember(id=1, team_id=1, email='foo@example.com')
-        with self.Settings(SENTRY_KEY="\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"):
+        with self.Settings(SECRET_KEY="\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"):
             self.assertEquals(member.token, 'df41d9dfd4ba25d745321e654e15b5d0')
 
     def test_send_invite_email(self):
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 6bce8340d6..270bdbec09 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -4,7 +4,8 @@ from __future__ import absolute_import
 
 import mock
 
-from sentry.conf import settings
+from django.conf import settings
+
 from sentry.models import Project, ProjectOption
 from sentry.testutils import TestCase, fixture
 from sentry.utils.http import (is_same_domain, is_valid_origin, get_origins,
@@ -13,10 +14,10 @@ from sentry.utils.http import (is_same_domain, is_valid_origin, get_origins,
 
 class AbsoluteUriTest(TestCase):
     def test_without_path(self):
-        assert absolute_uri() == settings.URL_PREFIX
+        assert absolute_uri() == settings.SENTRY_URL_PREFIX
 
     def test_with_path(self):
-        assert absolute_uri('/foo/bar') == '%s/foo/bar' % (settings.URL_PREFIX,)
+        assert absolute_uri('/foo/bar') == '%s/foo/bar' % (settings.SENTRY_URL_PREFIX,)
 
 
 class SameDomainTestCase(TestCase):
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 42a4131a19..bc3429a33a 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -7,8 +7,7 @@ import json
 
 from django.core.urlresolvers import reverse
 
-from sentry.conf import settings
-from sentry.constants import MEMBER_USER
+from sentry.constants import MEMBER_USER, MAX_JSON_RESULTS
 from sentry.models import Group, Project, TeamMember, Team, User
 from sentry.testutils import TestCase, fixture, before
 
@@ -222,7 +221,7 @@ class GroupEventListJsonTest(BaseViewTest):
 
     def test_does_not_allow_beyond_limit(self):
         self.login()
-        resp = self.client.get(self.path, {'limit': settings.MAX_JSON_RESULTS + 1})
+        resp = self.client.get(self.path, {'limit': MAX_JSON_RESULTS + 1})
         assert resp.status_code == 400
 
 
