commit b4b4983fe039e60e6090283b597c4a1fad41c2b2
Author: Matej Minar <matej.minar@sentry.io>
Date:   Thu Feb 13 08:08:51 2020 +0100

    ref(ui): Refactored event attachments to use asynccomponent (#16947)
    
    * ref(ui): Event attachments refactored to use asyncview
    
    * feature flag, function components
    
    * limit
    
    * inlined functions

diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachments.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachments.tsx
new file mode 100644
index 0000000000..6a3949e53e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachments.tsx
@@ -0,0 +1,118 @@
+import React from 'react';
+import pick from 'lodash/pick';
+import * as ReactRouter from 'react-router';
+
+import {Panel, PanelBody} from 'app/components/panels';
+import {t} from 'app/locale';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import Pagination from 'app/components/pagination';
+import AsyncComponent from 'app/components/asyncComponent';
+
+import GroupEventAttachmentsTable from './groupEventAttachmentsTable';
+import GroupEventAttachmentsFilter from './groupEventAttachmentsFilter';
+
+type Props = {
+  projectSlug: string;
+} & ReactRouter.WithRouterProps &
+  AsyncComponent['props'];
+
+type State = {
+  deletedAttachments: string[];
+} & AsyncComponent['state'];
+
+class GroupEventAttachments extends AsyncComponent<Props, State> {
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      deletedAttachments: [],
+    };
+  }
+
+  getEndpoints(): [string, string, {}][] {
+    const {params, location} = this.props;
+
+    return [
+      [
+        'eventAttachments',
+        `/issues/${params.groupId}/attachments/`,
+        {
+          query: {
+            ...pick(location.query, ['cursor', 'environment', 'types']),
+            limit: 50,
+          },
+        },
+      ],
+    ];
+  }
+
+  handleDelete = (deletedAttachmentId: string) => {
+    this.setState(prevState => {
+      return {
+        deletedAttachments: [...prevState.deletedAttachments, deletedAttachmentId],
+      };
+    });
+  };
+
+  renderNoQueryResults() {
+    return (
+      <EmptyStateWarning>
+        <p>{t('Sorry, no event attachments match your search query.')}</p>
+      </EmptyStateWarning>
+    );
+  }
+
+  renderEmpty() {
+    return (
+      <EmptyStateWarning>
+        <p>{t("There don't seem to be any event attachments yet.")}</p>
+      </EmptyStateWarning>
+    );
+  }
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderInnerBody() {
+    const {projectSlug, params, location} = this.props;
+    const {loading, eventAttachments, deletedAttachments} = this.state;
+
+    if (loading) {
+      return <LoadingIndicator />;
+    }
+
+    if (eventAttachments.length > 0) {
+      return (
+        <GroupEventAttachmentsTable
+          attachments={eventAttachments}
+          orgId={params.orgId}
+          projectId={projectSlug}
+          groupId={params.groupId}
+          onDelete={this.handleDelete}
+          deletedAttachments={deletedAttachments}
+        />
+      );
+    }
+
+    if (location.query.types) {
+      return this.renderNoQueryResults();
+    }
+
+    return this.renderEmpty();
+  }
+
+  renderBody() {
+    return (
+      <React.Fragment>
+        <GroupEventAttachmentsFilter />
+        <Panel className="event-list">
+          <PanelBody>{this.renderInnerBody()}</PanelBody>
+        </Panel>
+        <Pagination pageLinks={this.state.eventAttachmentsPageLinks} />
+      </React.Fragment>
+    );
+  }
+}
+
+export default ReactRouter.withRouter(GroupEventAttachments);
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx
index fe9bca7c8a..f1230238a8 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx
@@ -13,45 +13,42 @@ type Props = {
   deletedAttachments: string[];
 };
 
-class GroupEventAttachmentsTable extends React.Component<Props> {
-  render() {
-    const {
-      attachments,
-      orgId,
-      projectId,
-      groupId,
-      onDelete,
-      deletedAttachments,
-    } = this.props;
-    const tableRowNames = [t('Name'), t('Type'), t('Size'), t('Actions')];
+const GroupEventAttachmentsTable = ({
+  attachments,
+  orgId,
+  projectId,
+  groupId,
+  onDelete,
+  deletedAttachments,
+}: Props) => {
+  const tableRowNames = [t('Name'), t('Type'), t('Size'), t('Actions')];
 
-    return (
-      <table className="table events-table">
-        <thead>
-          <tr>
-            {tableRowNames.map(name => {
-              return <th key={name}>{name}</th>;
-            })}
-          </tr>
-        </thead>
-        <tbody>
-          {attachments.map(attachment => {
-            return (
-              <GroupEventAttachmentsTableRow
-                key={attachment.id}
-                attachment={attachment}
-                orgId={orgId}
-                projectId={projectId}
-                groupId={groupId}
-                onDelete={onDelete}
-                isDeleted={deletedAttachments.some(id => attachment.id === id)}
-              />
-            );
+  return (
+    <table className="table events-table">
+      <thead>
+        <tr>
+          {tableRowNames.map(name => {
+            return <th key={name}>{name}</th>;
           })}
-        </tbody>
-      </table>
-    );
-  }
-}
+        </tr>
+      </thead>
+      <tbody>
+        {attachments.map(attachment => {
+          return (
+            <GroupEventAttachmentsTableRow
+              key={attachment.id}
+              attachment={attachment}
+              orgId={orgId}
+              projectId={projectId}
+              groupId={groupId}
+              onDelete={onDelete}
+              isDeleted={deletedAttachments.some(id => attachment.id === id)}
+            />
+          );
+        })}
+      </tbody>
+    </table>
+  );
+};
 
 export default GroupEventAttachmentsTable;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx
index bda77ad635..ec82dfb713 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx
@@ -19,64 +19,59 @@ type Props = {
   isDeleted: boolean;
 };
 
-class GroupEventAttachmentsTableRow extends React.Component<Props> {
-  getEventUrl() {
-    const {attachment, orgId, groupId} = this.props;
+const GroupEventAttachmentsTableRow = ({
+  attachment,
+  projectId,
+  onDelete,
+  isDeleted,
+  orgId,
+  groupId,
+}: Props) => {
+  return (
+    <TableRow isDeleted={isDeleted}>
+      <td>
+        <h5>
+          {attachment.name}
+          <br />
+          <small>
+            <DateTime date={attachment.dateCreated} /> &middot;{' '}
+            <Link
+              to={`/organizations/${orgId}/issues/${groupId}/events/${attachment.event_id}/`}
+            >
+              {attachment.event_id}
+            </Link>
+          </small>
+        </h5>
+      </td>
 
-    return `/organizations/${orgId}/issues/${groupId}/events/${attachment.event_id}/`;
-  }
-
-  getAttachmentTypeDisplayName(type: string) {
-    return types[type] || t('Other');
-  }
-
-  render() {
-    const {attachment, projectId, onDelete, isDeleted} = this.props;
-
-    return (
-      <TableRow isDeleted={isDeleted}>
-        <td>
-          <h5>
-            {attachment.name}
-            <br />
-            <small>
-              <DateTime date={attachment.dateCreated} /> &middot;{' '}
-              <Link to={this.getEventUrl()}>{attachment.event_id}</Link>
-            </small>
-          </h5>
-        </td>
+      <td>{types[attachment.type] || t('Other')}</td>
 
-        <td>{this.getAttachmentTypeDisplayName(attachment.type)}</td>
+      <td>
+        <FileSize bytes={attachment.size} />
+      </td>
 
-        <td>
-          <FileSize bytes={attachment.size} />
-        </td>
-
-        <td>
-          <AttachmentUrl
-            projectId={projectId}
-            eventId={attachment.event_id}
-            attachment={attachment}
-          >
-            {url =>
-              !isDeleted && (
-                <EventAttachmentActions
-                  url={url}
-                  onDelete={onDelete}
-                  attachmentId={attachment.id}
-                />
-              )
-            }
-          </AttachmentUrl>
-        </td>
-      </TableRow>
-    );
-  }
-}
-
-type TableRowProps = {isDeleted: boolean};
+      <td>
+        <AttachmentUrl
+          projectId={projectId}
+          eventId={attachment.event_id}
+          attachment={attachment}
+        >
+          {url =>
+            !isDeleted && (
+              <EventAttachmentActions
+                url={url}
+                onDelete={onDelete}
+                attachmentId={attachment.id}
+              />
+            )
+          }
+        </AttachmentUrl>
+      </td>
+    </TableRow>
+  );
+};
 
-const TableRow = styled('tr')<TableRowProps>`
+const TableRow = styled('tr')<{isDeleted: boolean}>`
   opacity: ${p => (p.isDeleted ? 0.3 : 1)};
   td {
     text-decoration: ${p => (p.isDeleted ? 'line-through' : 'normal')};
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx
index 4bb92d095b..47829ae815 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx
@@ -1,159 +1,28 @@
 import React from 'react';
-import pick from 'lodash/pick';
 import {RouteComponentProps} from 'react-router/lib/Router';
 
-import {Panel, PanelBody} from 'app/components/panels';
-import {t} from 'app/locale';
-import withApi from 'app/utils/withApi';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import GroupEventAttachmentsTable from 'app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable';
-import GroupEventAttachmentsFilter from 'app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsFilter';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import Pagination from 'app/components/pagination';
-import parseApiError from 'app/utils/parseApiError';
-import {EventAttachment, Group} from 'app/types';
-import {Client} from 'app/api';
+import {Organization, Group} from 'app/types';
 import Feature from 'app/components/acl/feature';
+import withOrganization from 'app/utils/withOrganization';
 import FeatureDisabled from 'app/components/acl/featureDisabled';
 
+import GroupEventAttachments from './groupEventAttachments';
+
 type Props = RouteComponentProps<{orgId: string; groupId: string}, {}> & {
-  api: Client;
+  organization: Organization;
   group: Group;
 };
 
-type State = {
-  eventAttachmentsList: EventAttachment[];
-  deletedAttachments: string[];
-  loading: boolean;
-  error: null | string;
-  pageLinks: null | string;
+const GroupEventAttachmentsContainer = ({organization, group}: Props) => {
+  return (
+    <Feature
+      features={['event-attachments']}
+      organization={organization}
+      renderDisabled={props => <FeatureDisabled {...props} />}
+    >
+      <GroupEventAttachments projectSlug={group.project.slug} />
+    </Feature>
+  );
 };
 
-class GroupEventAttachments extends React.Component<Props, State> {
-  state = {
-    eventAttachmentsList: [],
-    deletedAttachments: [],
-    loading: true,
-    error: null,
-    pageLinks: null,
-  };
-
-  componentWillMount() {
-    this.fetchData();
-  }
-
-  componentDidUpdate(prevProps: Props) {
-    if (this.props.location.search !== prevProps.location.search) {
-      this.fetchData();
-    }
-  }
-
-  handleDelete = (deletedAttachmentId: string) => {
-    this.setState(prevState => {
-      return {
-        deletedAttachments: [...prevState.deletedAttachments, deletedAttachmentId],
-      };
-    });
-  };
-
-  fetchData = () => {
-    this.setState({
-      loading: true,
-      error: null,
-    });
-
-    const query = {
-      ...pick(this.props.location.query, ['cursor', 'environment', 'types']),
-      limit: 50,
-    };
-
-    this.props.api.request(`/issues/${this.props.params.groupId}/attachments/`, {
-      query,
-      method: 'GET',
-      success: (data, _, jqXHR) => {
-        this.setState(prevState => ({
-          eventAttachmentsList: data,
-          error: null,
-          loading: false,
-          pageLinks: jqXHR ? jqXHR.getResponseHeader('Link') : prevState.pageLinks,
-        }));
-      },
-      error: err => {
-        this.setState({
-          error: parseApiError(err),
-          loading: false,
-        });
-      },
-    });
-  };
-
-  renderNoQueryResults() {
-    return (
-      <EmptyStateWarning>
-        <p>{t('Sorry, no event attachments match your search query.')}</p>
-      </EmptyStateWarning>
-    );
-  }
-
-  renderEmpty() {
-    return (
-      <EmptyStateWarning>
-        <p>{t("There don't seem to be any event attachments yet.")}</p>
-      </EmptyStateWarning>
-    );
-  }
-
-  renderResults() {
-    const {group, params} = this.props;
-    const {eventAttachmentsList, deletedAttachments} = this.state;
-
-    return (
-      <GroupEventAttachmentsTable
-        attachments={eventAttachmentsList}
-        orgId={params.orgId}
-        projectId={group.project.slug}
-        groupId={params.groupId}
-        onDelete={this.handleDelete}
-        deletedAttachments={deletedAttachments}
-      />
-    );
-  }
-
-  renderBody() {
-    let body;
-
-    if (this.state.loading) {
-      body = <LoadingIndicator />;
-    } else if (this.state.error) {
-      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
-    } else if (this.state.eventAttachmentsList.length > 0) {
-      body = this.renderResults();
-    } else if (this.props.location.query.types) {
-      body = this.renderNoQueryResults();
-    } else {
-      body = this.renderEmpty();
-    }
-
-    return body;
-  }
-
-  render() {
-    return (
-      <Feature
-        features={['event-attachments']}
-        renderDisabled={() => <FeatureDisabled />}
-      >
-        <GroupEventAttachmentsFilter />
-        <Panel className="event-list">
-          <PanelBody>{this.renderBody()}</PanelBody>
-        </Panel>
-        <Pagination pageLinks={this.state.pageLinks} />
-      </Feature>
-    );
-  }
-}
-
-export {GroupEventAttachments};
-
-export default withApi(GroupEventAttachments);
+export default withOrganization(GroupEventAttachmentsContainer);
