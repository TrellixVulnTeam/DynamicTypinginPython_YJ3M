commit f451f8450c7c92db5b87f3d868899adbd5d97d5a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 19 12:52:55 2020 -0800

    ref(react): Codemod for unsafe component lifecycles (#16833)
    
    This was introduced in a React upgrade and causes a lot of warnings due to unsafe component lifecycle methods

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index 123e9cd0bf..1ea8288571 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -115,7 +115,7 @@ export default class AsyncComponent<
     }
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.api = new Client();
     this.fetchData();
 
@@ -125,7 +125,7 @@ export default class AsyncComponent<
   }
 
   // Compatiblity shim for child classes that call super on this hook.
-  componentWillReceiveProps(_newProps: P, _newContext: any) {}
+  UNSAFE_componentWillReceiveProps(_newProps: P, _newContext: any) {}
 
   componentDidUpdate(prevProps: P, prevContext: any) {
     const isRouterInContext = !!prevContext.router;
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index 4c9860499f..d4dbe14cec 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -77,7 +77,7 @@ class AutoComplete extends React.Component {
     this.items = new Map();
   }
 
-  componentWillReceiveProps(nextProps, nextState) {
+  UNSAFE_componentWillReceiveProps(nextProps, nextState) {
     // If we do NOT want to close on select, then we should not reset highlight state
     // when we select an item (when we select an item, `this.state.selectedItem` changes)
     if (!nextProps.closeOnSelect && this.state.selectedItem !== nextState.selectedItem) {
@@ -87,7 +87,7 @@ class AutoComplete extends React.Component {
     this.resetHighlightState();
   }
 
-  componentWillUpdate() {
+  UNSAFE_componentWillUpdate() {
     this.items.clear();
   }
 
diff --git a/src/sentry/static/sentry/app/components/avatarChooser.jsx b/src/sentry/static/sentry/app/components/avatarChooser.jsx
index 936813a2bd..92f7128146 100644
--- a/src/sentry/static/sentry/app/components/avatarChooser.jsx
+++ b/src/sentry/static/sentry/app/components/avatarChooser.jsx
@@ -52,7 +52,7 @@ class AvatarChooser extends React.Component {
     };
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     // Update local state if defined in props
     if (typeof nextProps.model !== 'undefined') {
       this.setState({model: nextProps.model});
diff --git a/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx b/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
index af2b69e5f1..858f47ec92 100644
--- a/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
+++ b/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
@@ -46,7 +46,7 @@ class PluginComponentBase extends React.Component {
     };
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.api = new Client();
   }
 
diff --git a/src/sentry/static/sentry/app/components/errorRobot.jsx b/src/sentry/static/sentry/app/components/errorRobot.jsx
index 4bfd2981f5..d4df1a01c7 100644
--- a/src/sentry/static/sentry/app/components/errorRobot.jsx
+++ b/src/sentry/static/sentry/app/components/errorRobot.jsx
@@ -29,7 +29,7 @@ class ErrorRobot extends React.Component {
     sampleIssueId: this.props.sampleIssueId,
   };
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.fetchData();
   }
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 7790c70256..965fbfbe1c 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -48,7 +48,7 @@ class ContextChunk extends React.Component {
     };
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.syncPlugin();
   }
 
diff --git a/src/sentry/static/sentry/app/components/events/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
index b4f05e2420..cbbcdb83a8 100644
--- a/src/sentry/static/sentry/app/components/events/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -19,7 +19,7 @@ class EventRow extends React.Component {
     };
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (nextProps.id !== this.props.id) {
       this.setState({
         event: EventStore.get(this.props.id),
diff --git a/src/sentry/static/sentry/app/components/forms/formField.tsx b/src/sentry/static/sentry/app/components/forms/formField.tsx
index 15feb32ac1..247cf49dab 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.tsx
@@ -86,7 +86,7 @@ export default class FormField<
 
   componentDidMount() {}
 
-  componentWillReceiveProps(nextProps: Props, nextContext: Context) {
+  UNSAFE_componentWillReceiveProps(nextProps: Props, nextContext: Context) {
     const newError = this.getError(nextProps, nextContext);
     if (newError !== this.state.error) {
       this.setState({error: newError});
diff --git a/src/sentry/static/sentry/app/components/forms/passwordField.tsx b/src/sentry/static/sentry/app/components/forms/passwordField.tsx
index 3f50ab4d6f..7134e321fe 100644
--- a/src/sentry/static/sentry/app/components/forms/passwordField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/passwordField.tsx
@@ -35,7 +35,7 @@ export default class PasswordField extends InputField<Props, State> {
     this.state = {...this.state, editing: false};
   }
 
-  componentWillReceiveProps(nextProps: Props) {
+  UNSAFE_componentWillReceiveProps(nextProps: Props) {
     // close edit mode after successful save
     // TODO(dcramer): this needs to work with this.context.form
     if (
diff --git a/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx b/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx
index 47389efdbb..1adc28b58a 100644
--- a/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx
@@ -33,7 +33,7 @@ export default class SelectCreatableField extends SelectField {
     this.options = this.getOptions(props);
   }
 
-  componentWillReceiveProps(nextProps, nextContext) {
+  UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
     const newError = this.getError(nextProps, nextContext);
     if (newError !== this.state.error) {
       this.setState({error: newError});
diff --git a/src/sentry/static/sentry/app/components/forms/selectField.jsx b/src/sentry/static/sentry/app/components/forms/selectField.jsx
index f7afe60d11..dd6013c281 100644
--- a/src/sentry/static/sentry/app/components/forms/selectField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectField.jsx
@@ -24,7 +24,7 @@ export default class SelectField extends FormField {
     multiple: false,
   };
 
-  componentWillReceiveProps(nextProps, nextContext) {
+  UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
     const newError = this.getError(nextProps, nextContext);
     if (newError !== this.state.error) {
       this.setState({error: newError});
diff --git a/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx b/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
index a0832cd157..0f8d066e0e 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
@@ -64,8 +64,8 @@ class ExternalIssueList extends AsyncComponent<Props, State> {
     });
   }
 
-  componentWillMount() {
-    super.componentWillMount();
+  UNSAFE_componentWillMount() {
+    super.UNSAFE_componentWillMount();
 
     this.unsubscribables = [
       SentryAppInstallationStore.listen(this.onSentryAppInstallationChange, this),
diff --git a/src/sentry/static/sentry/app/components/group/pluginActions.jsx b/src/sentry/static/sentry/app/components/group/pluginActions.jsx
index d55f74704e..54b3e5f451 100644
--- a/src/sentry/static/sentry/app/components/group/pluginActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/pluginActions.jsx
@@ -30,7 +30,7 @@ class PluginActions extends React.Component {
     this.loadPlugin(this.props.plugin);
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (this.props.plugin.id !== nextProps.plugin.id) {
       this.loadPlugin(nextProps.plugin);
     }
diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
index c0678639cd..8eea277de6 100644
--- a/src/sentry/static/sentry/app/components/group/releaseChart.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -25,7 +25,7 @@ class GroupReleaseChart extends React.Component {
     this.state = this.getNextState(this.props);
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     this.setState(this.getNextState(nextProps));
   }
 
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 037983e200..914c86197e 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -47,7 +47,7 @@ class GroupSidebar extends React.Component {
     };
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     const {group, api} = this.props;
     api.request(`/issues/${group.id}/participants/`, {
       success: data => {
@@ -80,7 +80,7 @@ class GroupSidebar extends React.Component {
     this.fetchTagData();
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (!isEqual(nextProps.environments, this.props.environments)) {
       this.setState({environments: nextProps.environments}, this.fetchTagData);
     }
diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
index abd2bf8ff2..d3b47b8910 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
@@ -40,7 +40,7 @@ class SuggestedOwners extends React.Component {
     this.fetchData(this.props.event);
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (this.props.event && nextProps.event) {
       if (this.props.event.id !== nextProps.event.id) {
         //two events, with different IDs
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index 8f7105fe6a..7757ef2bfb 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -21,7 +21,7 @@ class GroupTagDistributionMeter extends React.Component {
     error: false,
   };
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.fetchData();
   }
 
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index a41ae3ef85..e6012466a6 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -39,7 +39,7 @@ class LazyLoad extends React.Component {
     this.fetchComponent();
   }
 
-  componentWillReceiveProps(nextProps, nextState) {
+  UNSAFE_componentWillReceiveProps(nextProps, nextState) {
     // No need to refetch when component does not change
     if (nextProps.component && nextProps.component === this.props.component) {
       return;
diff --git a/src/sentry/static/sentry/app/components/narrowLayout.tsx b/src/sentry/static/sentry/app/components/narrowLayout.tsx
index b08c502cc3..c3ec6710d9 100644
--- a/src/sentry/static/sentry/app/components/narrowLayout.tsx
+++ b/src/sentry/static/sentry/app/components/narrowLayout.tsx
@@ -17,7 +17,7 @@ class NarrowLayout extends React.Component<Props> {
     maxWidth: PropTypes.string,
   };
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     document.body.classList.add('narrow');
   }
 
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/todoList.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/todoList.jsx
index 98bb13b52c..896a4212cb 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/todoList.jsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/todoList.jsx
@@ -19,7 +19,7 @@ class TodoList extends React.Component {
     seeAll: false, // Show all tasks, included those completed
   };
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     const {organization} = this.props;
     const tasks = getOnboardingTasks(organization);
 
diff --git a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
index 10511eec19..0babfad179 100644
--- a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
@@ -194,7 +194,7 @@ class ApiSource extends React.Component {
     }
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     // Limit the number of times we perform API queries by only attempting API queries
     // using first two characters, otherwise perform in-memory search.
     //
diff --git a/src/sentry/static/sentry/app/components/search/sources/formSource.jsx b/src/sentry/static/sentry/app/components/search/sources/formSource.jsx
index 6ddb17d93e..c353b889a8 100644
--- a/src/sentry/static/sentry/app/components/search/sources/formSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/formSource.jsx
@@ -43,7 +43,7 @@ class FormSource extends React.Component {
     this.createSearch(props.searchMap);
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (this.props.searchMap !== nextProps.searchMap) {
       this.createSearch(nextProps.searchMap);
     }
diff --git a/src/sentry/static/sentry/app/components/search/sources/helpSource.jsx b/src/sentry/static/sentry/app/components/search/sources/helpSource.jsx
index 22dafdfe7e..abc701fc97 100644
--- a/src/sentry/static/sentry/app/components/search/sources/helpSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/helpSource.jsx
@@ -55,7 +55,7 @@ class HelpSource extends React.Component {
     }
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (nextProps.query !== this.props.query) {
       this.doSearch(nextProps.query);
     }
diff --git a/src/sentry/static/sentry/app/components/searchBar.tsx b/src/sentry/static/sentry/app/components/searchBar.tsx
index 4a7b71e190..9d7ffb3a03 100644
--- a/src/sentry/static/sentry/app/components/searchBar.tsx
+++ b/src/sentry/static/sentry/app/components/searchBar.tsx
@@ -29,7 +29,7 @@ class SearchBar extends React.PureComponent<Props, State> {
     dropdownVisible: false,
   };
 
-  componentWillReceiveProps(nextProps: Props) {
+  UNSAFE_componentWillReceiveProps(nextProps: Props) {
     if (nextProps.query !== this.props.query) {
       this.setState({
         query: nextProps.query,
diff --git a/src/sentry/static/sentry/app/components/setupWizard.jsx b/src/sentry/static/sentry/app/components/setupWizard.jsx
index 525bab2125..9d63ad4d94 100644
--- a/src/sentry/static/sentry/app/components/setupWizard.jsx
+++ b/src/sentry/static/sentry/app/components/setupWizard.jsx
@@ -18,7 +18,7 @@ class SetupWizard extends React.Component {
     this.state = this.getDefaultState();
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.api = new Client();
     this.pollFinished();
   }
diff --git a/src/sentry/static/sentry/app/components/shareIssue.jsx b/src/sentry/static/sentry/app/components/shareIssue.jsx
index 72b312957e..8f7dd6fcd1 100644
--- a/src/sentry/static/sentry/app/components/shareIssue.jsx
+++ b/src/sentry/static/sentry/app/components/shareIssue.jsx
@@ -157,7 +157,7 @@ class ShareIssue extends React.Component {
     this.state = {busy: false};
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (
       this.state.busy &&
       (this.props.shareUrl !== nextProps.shareUrl ||
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index a82e3581e5..e3430fb047 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -81,7 +81,7 @@ class Sidebar extends React.Component {
     this.doCollapse(this.props.collapsed);
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     const {collapsed, location} = this.props;
     const nextLocation = nextProps.location;
 
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index dfd07d4e97..db638d2306 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -237,7 +237,7 @@ class SmartSearchBar extends React.Component {
     this.searchInput = React.createRef();
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     // query was updated by another source (e.g. sidebar filters)
     if (nextProps.query !== this.props.query) {
       this.setState({
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index 18864be6dd..f1d10adc38 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -83,7 +83,7 @@ class StackedBarChart extends React.Component {
     };
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (nextProps.points || nextProps.series) {
       let series = nextProps.series;
       if (nextProps.points.length) {
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 9f0eb9ae4b..ce728a1ddc 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -76,7 +76,7 @@ class App extends React.Component {
     };
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.props.api.request('/organizations/', {
       query: {
         member: '1',
diff --git a/src/sentry/static/sentry/app/views/discover/discover.tsx b/src/sentry/static/sentry/app/views/discover/discover.tsx
index 7e0d286aa6..786d35f3a3 100644
--- a/src/sentry/static/sentry/app/views/discover/discover.tsx
+++ b/src/sentry/static/sentry/app/views/discover/discover.tsx
@@ -92,7 +92,7 @@ export default class Discover extends React.Component<Props, State> {
     };
   }
 
-  componentWillReceiveProps(nextProps: Props) {
+  UNSAFE_componentWillReceiveProps(nextProps: Props) {
     const {
       queryBuilder,
       location: {search},
diff --git a/src/sentry/static/sentry/app/views/discover/result/index.tsx b/src/sentry/static/sentry/app/views/discover/result/index.tsx
index e04e4f9c68..7df1de3f10 100644
--- a/src/sentry/static/sentry/app/views/discover/result/index.tsx
+++ b/src/sentry/static/sentry/app/views/discover/result/index.tsx
@@ -69,7 +69,7 @@ class Result extends React.Component<ResultProps, ResultState> {
     window.addEventListener('resize', this.throttledUpdateDimensions);
   }
 
-  componentWillReceiveProps(nextProps: ResultProps) {
+  UNSAFE_componentWillReceiveProps(nextProps: ResultProps) {
     const {data, location} = nextProps;
     const visualization = getVisualization(data, location.query.visualization);
 
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index e86fbbd412..0c8047e306 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -13,8 +13,8 @@ export default class InstallWizard extends AsyncView {
     onConfigured: PropTypes.func.isRequired,
   };
 
-  componentWillMount() {
-    super.componentWillMount();
+  UNSAFE_componentWillMount() {
+    super.UNSAFE_componentWillMount();
     document.body.classList.add('install-wizard');
   }
 
diff --git a/src/sentry/static/sentry/app/views/issueList/sortOptions.jsx b/src/sentry/static/sentry/app/views/issueList/sortOptions.jsx
index 9c29228995..cc70c0c368 100644
--- a/src/sentry/static/sentry/app/views/issueList/sortOptions.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/sortOptions.jsx
@@ -18,7 +18,7 @@ class IssueListSortOptions extends React.PureComponent {
     };
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     this.setState({
       sortKey: nextProps.sort || 'date',
     });
diff --git a/src/sentry/static/sentry/app/views/issueList/tagFilter.jsx b/src/sentry/static/sentry/app/views/issueList/tagFilter.jsx
index 276537c23f..34f0e05ac2 100644
--- a/src/sentry/static/sentry/app/views/issueList/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/tagFilter.jsx
@@ -38,7 +38,7 @@ class IssueListTagFilter extends React.Component {
     this.api = new Client();
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (nextProps.value !== this.state.value) {
       this.setState({
         value: nextProps.value,
diff --git a/src/sentry/static/sentry/app/views/newsletterConsent.jsx b/src/sentry/static/sentry/app/views/newsletterConsent.jsx
index 84f32d2409..730ca39aac 100644
--- a/src/sentry/static/sentry/app/views/newsletterConsent.jsx
+++ b/src/sentry/static/sentry/app/views/newsletterConsent.jsx
@@ -10,7 +10,7 @@ export default class NewsletterConsent extends React.Component {
     onSubmitSuccess: PropTypes.func,
   };
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     document.body.classList.add('auth');
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationActivity/activityFeed.jsx b/src/sentry/static/sentry/app/views/organizationActivity/activityFeed.jsx
index 2ba35e0bb9..23d8298f65 100644
--- a/src/sentry/static/sentry/app/views/organizationActivity/activityFeed.jsx
+++ b/src/sentry/static/sentry/app/views/organizationActivity/activityFeed.jsx
@@ -38,11 +38,11 @@ class ActivityFeed extends React.Component {
     };
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.fetchData();
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     const location = this.props.location;
     const nextLocation = nextProps.location;
     if (
diff --git a/src/sentry/static/sentry/app/views/organizationDetails/index.jsx b/src/sentry/static/sentry/app/views/organizationDetails/index.jsx
index 0e66db8949..5f7e09a209 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails/index.jsx
@@ -49,7 +49,7 @@ class DeletionPending extends Component {
     this.state = {submitInProgress: false};
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.api = new Client();
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEvents.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEvents.jsx
index 2248f78273..8c9905a7ca 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEvents.jsx
@@ -34,11 +34,11 @@ class GroupEvents extends React.Component {
     };
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.fetchData();
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (this.props.location.search !== nextProps.location.search) {
       const queryParams = nextProps.location.query;
 
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index 938860dfe6..ea7eac0972 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -38,11 +38,11 @@ class OrganizationStatsContainer extends React.Component {
     };
   }
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.fetchData();
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     // If query string changes, it will be due to pagination.
     // Intentionally only fetch projects since stats are fetched for a fixed period during
     // the initial payload
diff --git a/src/sentry/static/sentry/app/views/projectChooser.tsx b/src/sentry/static/sentry/app/views/projectChooser.tsx
index 9b34253d28..56a7acfb31 100644
--- a/src/sentry/static/sentry/app/views/projectChooser.tsx
+++ b/src/sentry/static/sentry/app/views/projectChooser.tsx
@@ -26,7 +26,7 @@ class ProjectChooser extends React.Component<Props> {
     organization: SentryTypes.Organization.isRequired,
   };
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.redirectNoMultipleProjects();
   }
 
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index dbd40aecde..46424c04b0 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -22,7 +22,7 @@ class RouteError extends React.Component {
     project: PropTypes.object,
   };
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     const {error} = this.props;
     const {disableLogSentry, disableReport, routes} = this.props;
     const {organization, project} = this.context;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.tsx
index 5144cfdd75..ca6f96a303 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.tsx
@@ -126,7 +126,7 @@ class RangeSlider extends React.Component<Props, State> {
       : this.props.value,
   };
 
-  componentWillReceiveProps(nextProps: Props) {
+  UNSAFE_componentWillReceiveProps(nextProps: Props) {
     // Update local state when re-rendered with next `props.value` (e.g if this is controlled)
     if (typeof nextProps.value !== 'undefined') {
       const {allowedValues} = this.props;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
index 9d8cd54a63..abcafe94a3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
@@ -97,7 +97,7 @@ class JsonForm extends React.Component<Props, State> {
     this.scrollToHash();
   }
 
-  componentWillReceiveProps(nextProps: Props) {
+  UNSAFE_componentWillReceiveProps(nextProps: Props) {
     if (
       getLocation(this.props, this.context).hash !==
       getLocation(nextProps, this.context).hash
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/passwordField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/passwordField.jsx
index 814b2abb71..3b2fa5fbf5 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/passwordField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/passwordField.jsx
@@ -24,7 +24,7 @@ export default class PasswordField extends InputField {
     this.state.editing = false;
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     // close edit mode after successful save
     // TODO(dcramer): this needs to work with this.context.form
     if (
diff --git a/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx
index 20fa189dca..cd96b5ac69 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx
@@ -28,7 +28,7 @@ class OrganizationApiKeyDetails extends AsyncView {
     };
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     if (
       nextProps.location.search !== this.props.location.search ||
       nextProps.params.orgId !== this.props.params.orgId
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
index 37fb7799dc..2f670abcbd 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
@@ -13,7 +13,7 @@ class OrganizationAuth extends AsyncView {
     organization: SentryTypes.Organization,
   };
 
-  componentWillUpdate(_nextProps, nextState) {
+  UNSAFE_componentWillUpdate(_nextProps, nextState) {
     const access = this.context.organization.access;
 
     if (nextState.provider && access.includes('org:admin')) {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
index e0ab3bf718..a68c70ca3e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
@@ -44,7 +44,7 @@ export default class Subscriptions extends React.Component<Props> {
     this.context.form.setValue('events', this.props.events);
   }
 
-  componentWillReceiveProps(nextProps: Props) {
+  UNSAFE_componentWillReceiveProps(nextProps: Props) {
     // if webhooks are disabled, unset the events
     if (nextProps.webhookDisabled && this.props.events.length) {
       this.save([]);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
index 0406c74579..69986a0a0f 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
@@ -56,8 +56,8 @@ class OrganizationRequestsView extends AsyncView<Props, State> {
     };
   }
 
-  componentWillMount() {
-    super.componentWillMount();
+  UNSAFE_componentWillMount() {
+    super.UNSAFE_componentWillMount();
     this.handleRedirect();
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
index 22bb2cafa9..0a205a12c9 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
@@ -31,8 +31,8 @@ class OrganizationProjects extends AsyncView {
     router: PropTypes.object.isRequired,
   };
 
-  componentWillReceiveProps(nextProps, nextContext) {
-    super.componentWillReceiveProps(nextProps, nextContext);
+  UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
+    super.UNSAFE_componentWillReceiveProps(nextProps, nextContext);
     const searchQuery = nextProps.location.query.query;
     if (searchQuery !== this.props.location.query.query) {
       this.setState({searchQuery});
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
index eac9ec0087..be08cea620 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
@@ -43,11 +43,11 @@ class TeamMembers extends React.Component {
     orgMemberList: null,
   };
 
-  componentWillMount() {
+  UNSAFE_componentWillMount() {
     this.fetchData();
   }
 
-  componentWillReceiveProps(nextProps) {
+  UNSAFE_componentWillReceiveProps(nextProps) {
     const params = this.props.params;
     if (
       nextProps.params.teamId !== params.teamId ||
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
index e044eb9f9f..ebcb19d9bd 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
@@ -33,7 +33,7 @@ class OwnerInput extends React.Component {
     };
   }
 
-  componentWillReceiveProps({initialText}) {
+  UNSAFE_componentWillReceiveProps({initialText}) {
     if (initialText !== this.state.initialText) {
       this.setState({initialText});
     }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.tsx b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.tsx
index b376cbc379..b8692621d3 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.tsx
@@ -29,8 +29,8 @@ class ProjectUserFeedbackSettings extends AsyncView<Props> {
     setProjectNavSection: PropTypes.func,
   };
 
-  componentWillMount() {
-    super.componentWillMount();
+  UNSAFE_componentWillMount() {
+    super.UNSAFE_componentWillMount();
     this.props.setProjectNavSection('settings');
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/csp.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/csp.jsx
index d340344dbe..5da892a5d2 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/csp.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/csp.jsx
@@ -21,8 +21,8 @@ export default class ProjectCspReports extends AsyncView {
     setProjectNavSection: PropTypes.func,
   };
 
-  componentWillMount() {
-    super.componentWillMount();
+  UNSAFE_componentWillMount() {
+    super.UNSAFE_componentWillMount();
     this.props.setProjectNavSection('settings');
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/expectCt.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/expectCt.jsx
index 85a6d13a1b..5efdcf81f6 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/expectCt.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/expectCt.jsx
@@ -17,8 +17,8 @@ export default class ProjectExpectCtReports extends AsyncView {
     setProjectNavSection: PropTypes.func,
   };
 
-  componentWillMount() {
-    super.componentWillMount();
+  UNSAFE_componentWillMount() {
+    super.UNSAFE_componentWillMount();
     this.props.setProjectNavSection('settings');
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx
index 42dc4563eb..f2b6abc013 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx
@@ -17,8 +17,8 @@ export default class ProjectHpkpReports extends AsyncView {
     setProjectNavSection: PropTypes.func,
   };
 
-  componentWillMount() {
-    super.componentWillMount();
+  UNSAFE_componentWillMount() {
+    super.UNSAFE_componentWillMount();
     this.props.setProjectNavSection('settings');
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
index 10af152cec..5b2debe881 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
@@ -22,8 +22,8 @@ export default class ProjectSecurityHeaders extends AsyncView {
     setProjectNavSection: PropTypes.func,
   };
 
-  componentWillMount() {
-    super.componentWillMount();
+  UNSAFE_componentWillMount() {
+    super.UNSAFE_componentWillMount();
     this.props.setProjectNavSection('settings');
   }
 
