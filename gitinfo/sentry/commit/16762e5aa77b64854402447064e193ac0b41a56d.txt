commit 16762e5aa77b64854402447064e193ac0b41a56d
Author: Mark Story <mark@sentry.io>
Date:   Wed Sep 4 14:20:27 2019 -0400

    feat(discover2) Improve Contexts tab (#14551)
    
    Show the user, trace and os context in more detail making useful
    information easier to get at.
    
    Fixes SEN-999

diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 2692b71bef..738eea610d 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import {get} from 'lodash';
 import {objectIsEmpty, toTitleCase, defined} from 'app/utils';
 import EventDataSection from 'app/components/events/eventDataSection';
 import plugins from 'app/plugins';
@@ -34,7 +35,7 @@ function getSourcePlugin(pluginContexts, contextType) {
 class ContextChunk extends React.Component {
   static propTypes = {
     event: PropTypes.object.isRequired,
-    group: PropTypes.object.isRequired,
+    group: PropTypes.object,
     type: PropTypes.string.isRequired,
     alias: PropTypes.string.isRequired,
     value: PropTypes.object.isRequired,
@@ -51,10 +52,10 @@ class ContextChunk extends React.Component {
     this.syncPlugin();
   }
 
-  componentDidUpdate(prevProps, prevState) {
+  componentDidUpdate(prevProps) {
     if (
-      prevProps.group.id !== this.props.group.id ||
-      prevProps.type !== this.props.type
+      prevProps.type !== this.props.type ||
+      get(prevProps, 'group.id') !== get(this.props, 'group.id')
     ) {
       this.syncPlugin();
     }
@@ -62,6 +63,10 @@ class ContextChunk extends React.Component {
 
   syncPlugin = () => {
     const {group, type, alias} = this.props;
+    // If we don't have a grouped event we can't sync with plugins.
+    if (!group) {
+      return;
+    }
 
     // Search using `alias` first because old plugins rely on it and type is set to "default"
     // e.g. sessionstack
@@ -117,7 +122,6 @@ class ContextChunk extends React.Component {
       return null;
     }
 
-    const group = this.props.group;
     const evt = this.props.event;
     const {type, alias, value} = this.props;
     const Component =
@@ -132,7 +136,6 @@ class ContextChunk extends React.Component {
 
     return (
       <EventDataSection
-        group={group}
         event={evt}
         key={`context-${alias}`}
         type={`context-${alias}`}
@@ -147,7 +150,7 @@ class ContextChunk extends React.Component {
 class ContextsInterface extends React.Component {
   static propTypes = {
     event: PropTypes.object.isRequired,
-    group: PropTypes.object.isRequired,
+    group: PropTypes.object,
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 5651e663dd..8189ea39dd 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -73,6 +73,35 @@ type EntryType = {
 
 export type EventTag = {key: string; value: string};
 
+type EventUser = {
+  username?: string;
+  name?: string;
+  ip_address?: string;
+  email?: string;
+  id?: string;
+};
+
+type RuntimeContext = {
+  type: 'runtime';
+  version: number;
+  build?: string;
+  name?: string;
+};
+
+type TraceContext = {
+  type: 'trace';
+  op: string;
+  description: string;
+  parent_span_id: string;
+  span_id: string;
+  trace_id: string;
+};
+
+type EventContexts = {
+  runtime?: RuntimeContext;
+  trace?: TraceContext;
+};
+
 type SentryEventBase = {
   id: string;
   eventID: string;
@@ -80,6 +109,8 @@ type SentryEventBase = {
   title: string;
   culprit: string;
   metadata: EventMetadata;
+  contexts: EventContexts;
+  user: EventUser;
   message: string;
   platform?: string;
   dateCreated?: string;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInterfaces.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventInterfaces.tsx
index 31db665f6d..d91f4872d6 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventInterfaces.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventInterfaces.tsx
@@ -4,7 +4,9 @@ import PropTypes from 'prop-types';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 import {INTERFACES} from 'app/components/events/eventEntries';
+
 import ErrorBoundary from 'app/components/errorBoundary';
+import EventContexts from 'app/components/events/contexts';
 import EventDataSection from 'app/components/events/eventDataSection';
 import EventDevice from 'app/components/events/device';
 import EventExtraData from 'app/components/events/extraData';
@@ -14,7 +16,8 @@ import {objectIsEmpty, toTitleCase} from 'app/utils';
 import {Event} from 'app/types';
 
 const OTHER_SECTIONS = {
-  context: EventExtraData,
+  contexts: EventContexts,
+  extra: EventExtraData,
   packages: EventPackageData,
   device: EventDevice,
 };
@@ -127,7 +130,11 @@ class EventInterfaces extends React.Component<
             );
           })}
           {Object.keys(OTHER_SECTIONS).map(section => {
-            if (objectIsEmpty(event[section])) {
+            if (
+              objectIsEmpty(event[section]) ||
+              (section === 'contexts' &&
+                (objectIsEmpty(event.contexts) && objectIsEmpty(event.user)))
+            ) {
               return null;
             }
             const classname = section === activeTab ? 'active' : undefined;
