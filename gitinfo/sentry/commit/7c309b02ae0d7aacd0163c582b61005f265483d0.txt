commit 7c309b02ae0d7aacd0163c582b61005f265483d0
Author: Ted Kaemming <ted@kaemming.com>
Date:   Tue Mar 22 17:07:54 2016 -0700

    Create `GroupRedirect` after merge.

diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index 58cc0f50cb..bc3a48cb48 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -25,7 +25,7 @@ def merge_group(from_object_id=None, to_object_id=None, **kwargs):
     # TODO(mattrobenolt): Write tests for all of this
     from sentry.models import (
         Activity, Group, GroupAssignee, GroupHash, GroupRuleStatus, GroupTagKey,
-        GroupTagValue, EventMapping, Event, UserReport
+        GroupTagValue, EventMapping, Event, UserReport, GroupRedirect,
     )
 
     if not (from_object_id and to_object_id):
@@ -46,7 +46,7 @@ def merge_group(from_object_id=None, to_object_id=None, **kwargs):
 
     model_list = (
         Activity, GroupAssignee, GroupHash, GroupRuleStatus, GroupTagValue,
-        GroupTagKey, EventMapping, Event, UserReport
+        GroupTagKey, EventMapping, Event, UserReport, GroupRedirect,
     )
 
     has_more = merge_objects(model_list, group, new_group, logger=logger)
@@ -58,8 +58,15 @@ def merge_group(from_object_id=None, to_object_id=None, **kwargs):
         )
         return
 
+    previous_group_id = group.id
+
     group.delete()
 
+    GroupRedirect.objects.create(
+        group_id=new_group.id,
+        previous_group_id=previous_group_id,
+    )
+
     new_group.update(
         # TODO(dcramer): ideally these would be SQL clauses
         first_seen=min(group.first_seen, new_group.first_seen),
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index d8d9763491..4fadf85c90 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.tasks.merge import merge_group, rehash_group_events
-from sentry.models import Event, Group
+from sentry.models import Event, Group, GroupRedirect
 from sentry.testutils import TestCase
 
 
@@ -31,6 +31,26 @@ class MergeGroupTest(TestCase):
         Event.objects.bind_nodes([event2], 'data')
         assert event2.data == {'foo': 'baz'}
 
+    def test_merge_creates_redirect(self):
+        groups = [self.create_group() for _ in xrange(0, 3)]
+
+        with self.tasks():
+            merge_group(groups[0].id, groups[1].id)
+
+        assert not Group.objects.filter(id=groups[0].id).exists()
+        assert GroupRedirect.objects.filter(
+            group_id=groups[1].id,
+            previous_group_id=groups[0].id,
+        ).count() == 1
+
+        with self.tasks():
+            merge_group(groups[1].id, groups[2].id)
+
+        assert not Group.objects.filter(id=groups[1].id).exists()
+        assert GroupRedirect.objects.filter(
+            group_id=groups[2].id,
+        ).count() == 2
+
 
 class RehashGroupEventsTest(TestCase):
     def test_simple(self):
