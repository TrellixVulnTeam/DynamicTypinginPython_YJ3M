commit f30af06530147341905c57043f49a639838c5530
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 1 12:17:46 2015 -0700

    Various fixes for memoize and EventManager changes

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 210782e7c0..cd11a2e4d9 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -296,6 +296,27 @@ class EventManager(object):
             **kwargs
         )
 
+        tags = data.get('tags') or []
+        tags.append(('level', LOG_LEVELS[level]))
+        if logger_name:
+            tags.append(('logger', logger_name))
+        if server_name:
+            tags.append(('server_name', server_name))
+        if site:
+            tags.append(('site', site))
+        if release:
+            # TODO(dcramer): we should ensure we create Release objects
+            tags.append(('sentry:release', release))
+
+        for plugin in plugins.for_project(project, version=None):
+            added_tags = safe_execute(plugin.get_tags, event,
+                                      _with_transaction=False)
+            if added_tags:
+                tags.extend(added_tags)
+        # XXX(dcramer): we're relying on mutation of the data object to ensure
+        # this propagates into Event
+        data['tags'] = tags
+
         # Calculate the checksum from the first highest scoring interface
         if checksum:
             hashes = [checksum]
@@ -347,24 +368,6 @@ class EventManager(object):
                 self.logger.info('Duplicate Event found for event_id=%s', event_id)
                 return event
 
-        tags = data['tags']
-        tags.append(('level', LOG_LEVELS[level]))
-        if logger_name:
-            tags.append(('logger', logger_name))
-        if server_name:
-            tags.append(('server_name', server_name))
-        if site:
-            tags.append(('site', site))
-        if release:
-            # TODO(dcramer): we should ensure we create Release objects
-            tags.append(('sentry:release', release))
-
-        for plugin in plugins.for_project(project, version=None):
-            added_tags = safe_execute(plugin.get_tags, event,
-                                      _with_transaction=False)
-            if added_tags:
-                tags.extend(added_tags)
-
         safe_execute(Group.objects.add_tags, group, tags,
                      _with_transaction=False)
 
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 0151d1b65e..b86eee9f6a 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -151,7 +151,9 @@ class Event(Model):
 
         return OrderedDict((k, v) for k, v in sorted(result, key=lambda x: x[1].get_score(), reverse=True))
 
-    interfaces = memoize(get_interfaces)
+    @memoize
+    def interfaces(self):
+        return self.get_interfaces()
 
     def get_tags(self, with_internal=True):
         try:
