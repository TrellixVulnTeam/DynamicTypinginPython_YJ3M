commit 977277ca7b2185994b3e1070f98c77876c46cdcc
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 11 21:02:33 2014 -0800

    Break out organization member forms

diff --git a/src/sentry/web/forms/edit_organization_member.py b/src/sentry/web/forms/edit_organization_member.py
new file mode 100644
index 0000000000..e642cba71f
--- /dev/null
+++ b/src/sentry/web/forms/edit_organization_member.py
@@ -0,0 +1,61 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
+    OrganizationMemberType, Team
+)
+
+MEMBERSHIP_CHOICES = (
+    (OrganizationMemberType.MEMBER, _('Member')),
+    (OrganizationMemberType.ADMIN, _('Admin')),
+    (OrganizationMemberType.OWNER, _('Owner')),
+)
+
+
+class EditOrganizationMemberForm(forms.ModelForm):
+    type = forms.TypedChoiceField(label=_('Membership Type'), choices=(), coerce=int)
+    has_global_access = forms.BooleanField(
+        label=_('This member should have access to all teams within the organization.'),
+        required=False,
+    )
+    teams = forms.ModelMultipleChoiceField(
+        queryset=Team.objects.none(),
+        widget=forms.CheckboxSelectMultiple(),
+        required=False,
+    )
+
+    class Meta:
+        fields = ('type', 'has_global_access', 'teams')
+        model = OrganizationMember
+
+    def __init__(self, authorizing_access, *args, **kwargs):
+        super(EditOrganizationMemberForm, self).__init__(*args, **kwargs)
+
+        self.fields['type'].choices = [
+            m for m in MEMBERSHIP_CHOICES
+            if m[0] >= authorizing_access
+        ]
+
+        self.fields['teams'].queryset = Team.objects.filter(
+            organization=self.instance.organization,
+        )
+
+    def save(self, actor, organization):
+        if self.cleaned_data['has_global_access']:
+            self.cleaned_data['teams'] = []
+
+        om = super(EditOrganizationMemberForm, self).save()
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=actor,
+            target_object=om.id,
+            target_user=om.user,
+            event=AuditLogEntryEvent.MEMBER_EDIT,
+            data=om.get_audit_log_data(),
+        )
+
+        return om
diff --git a/src/sentry/web/forms/invite_organization_member.py b/src/sentry/web/forms/invite_organization_member.py
new file mode 100644
index 0000000000..f945708a08
--- /dev/null
+++ b/src/sentry/web/forms/invite_organization_member.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.db import transaction, IntegrityError
+
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
+    OrganizationMemberType
+)
+
+
+class InviteOrganizationMemberForm(forms.ModelForm):
+    class Meta:
+        fields = ('email',)
+        model = OrganizationMember
+
+    def save(self, actor, organization):
+        om = super(InviteOrganizationMemberForm, self).save(commit=False)
+        om.organization = organization
+        om.type = OrganizationMemberType.MEMBER
+
+        try:
+            existing = OrganizationMember.objects.get(
+                organization=organization,
+                user__email__iexact=om.email,
+            )
+        except OrganizationMember.DoesNotExist:
+            pass
+        else:
+            return existing, False
+
+        sid = transaction.savepoint(using='default')
+        try:
+            om.save()
+        except IntegrityError:
+            transaction.savepoint_rollback(sid, using='default')
+            return OrganizationMember.objects.get(
+                email__iexact=om.email,
+                organization=organization,
+            ), False
+        transaction.savepoint_commit(sid, using='default')
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=actor,
+            target_object=om.id,
+            event=AuditLogEntryEvent.MEMBER_INVITE,
+            data=om.get_audit_log_data(),
+        )
+
+        om.send_invite_email()
+
+        return om, True
diff --git a/src/sentry/web/forms/new_organization_member.py b/src/sentry/web/forms/new_organization_member.py
new file mode 100644
index 0000000000..466222cae7
--- /dev/null
+++ b/src/sentry/web/forms/new_organization_member.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.db import transaction, IntegrityError
+
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
+    OrganizationMemberType
+)
+from sentry.web.forms.fields import UserField
+
+
+class NewOrganizationMemberForm(forms.ModelForm):
+    user = UserField()
+
+    class Meta:
+        fields = ('user',)
+        model = OrganizationMember
+
+    def save(self, actor, organization):
+        om = super(NewOrganizationMemberForm, self).save(commit=False)
+        om.organization = organization
+        om.type = OrganizationMemberType.MEMBER
+
+        sid = transaction.savepoint(using='default')
+        try:
+            om.save()
+        except IntegrityError:
+            transaction.savepoint_rollback(sid, using='default')
+            return OrganizationMember.objects.get(
+                user=om.user,
+                organization=organization,
+            ), False
+        transaction.savepoint_commit(sid, using='default')
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=actor,
+            target_object=om.id,
+            target_user=om.user,
+            event=AuditLogEntryEvent.MEMBER_ADD,
+            data=om.get_audit_log_data(),
+        )
+
+        return om, True
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index 8543ee9c1b..2fed6a0b5a 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -1,99 +1,16 @@
 from __future__ import absolute_import
 
-from django import forms
 from django.conf import settings
 from django.contrib import messages
 from django.core.urlresolvers import reverse
-from django.db import transaction, IntegrityError
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
-    OrganizationMemberType
-)
+from sentry.models import OrganizationMemberType
 from sentry.permissions import can_add_organization_member
-from sentry.web.forms.fields import UserField
 from sentry.web.frontend.base import OrganizationView
-
-
-class InviteOrganizationMemberForm(forms.ModelForm):
-    class Meta:
-        fields = ('email',)
-        model = OrganizationMember
-
-    def save(self, actor, organization):
-        om = super(InviteOrganizationMemberForm, self).save(commit=False)
-        om.organization = organization
-        om.type = OrganizationMemberType.MEMBER
-
-        try:
-            existing = OrganizationMember.objects.get(
-                organization=organization,
-                user__email__iexact=om.email,
-            )
-        except OrganizationMember.DoesNotExist:
-            pass
-        else:
-            return existing, False
-
-        sid = transaction.savepoint(using='default')
-        try:
-            om.save()
-        except IntegrityError:
-            transaction.savepoint_rollback(sid, using='default')
-            return OrganizationMember.objects.get(
-                email__iexact=om.email,
-                organization=organization,
-            ), False
-        transaction.savepoint_commit(sid, using='default')
-
-        AuditLogEntry.objects.create(
-            organization=organization,
-            actor=actor,
-            target_object=om.id,
-            event=AuditLogEntryEvent.MEMBER_INVITE,
-            data=om.get_audit_log_data(),
-        )
-
-        om.send_invite_email()
-
-        return om, True
-
-
-class NewOrganizationMemberForm(forms.ModelForm):
-    user = UserField()
-
-    class Meta:
-        fields = ('user',)
-        model = OrganizationMember
-
-    def save(self, actor, organization):
-        om = super(NewOrganizationMemberForm, self).save(commit=False)
-        om.organization = organization
-        om.type = OrganizationMemberType.MEMBER
-
-        sid = transaction.savepoint(using='default')
-        try:
-            om.save()
-        except IntegrityError:
-            transaction.savepoint_rollback(sid, using='default')
-            return OrganizationMember.objects.get(
-                user=om.user,
-                organization=organization,
-            ), False
-        transaction.savepoint_commit(sid, using='default')
-
-        AuditLogEntry.objects.create(
-            organization=organization,
-            actor=actor,
-            target_object=om.id,
-            target_user=om.user,
-            event=AuditLogEntryEvent.MEMBER_ADD,
-            data=om.get_audit_log_data(),
-        )
-
-        return om, True
+from sentry.web.forms.invite_organization_member import InviteOrganizationMemberForm
+from sentry.web.forms.new_organization_member import NewOrganizationMemberForm
 
 
 class CreateOrganizationMemberView(OrganizationView):
@@ -111,20 +28,7 @@ class CreateOrganizationMemberView(OrganizationView):
 
         return form_cls(request.POST or None, initial=initial)
 
-    def get(self, request, organization):
-        if not can_add_organization_member(request.user, organization):
-            return HttpResponseRedirect(reverse('sentry'))
-
-        form = self.get_form(request)
-
-        context = {
-            'form': form,
-            'is_invite': settings.SENTRY_ENABLE_INVITES,
-        }
-
-        return self.respond('sentry/create-organization-member.html', context)
-
-    def post(self, request, organization):
+    def handle(self, request, organization):
         if not can_add_organization_member(request.user, organization):
             return HttpResponseRedirect(reverse('sentry'))
 
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 1a34692a7f..6e5c97677f 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -1,56 +1,13 @@
 from __future__ import absolute_import
 
-from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _, ugettext
 
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
-    OrganizationMemberType, Team
-)
+from sentry.models import OrganizationMember, OrganizationMemberType
 from sentry.web.frontend.base import OrganizationView
-
-MEMBERSHIP_CHOICES = (
-    (OrganizationMemberType.MEMBER, _('Member')),
-    (OrganizationMemberType.ADMIN, _('Admin')),
-    (OrganizationMemberType.OWNER, _('Owner')),
-)
-
-
-class EditOrganizationMemberForm(forms.ModelForm):
-    type = forms.TypedChoiceField(label=_('Membership Type'), choices=(), coerce=int)
-    has_global_access = forms.BooleanField(
-        label=_('This member should have access to all teams within the organization.'),
-        required=False,
-    )
-    teams = forms.ModelMultipleChoiceField(
-        queryset=Team.objects.none(),
-        widget=forms.CheckboxSelectMultiple(),
-        required=False,
-    )
-
-    class Meta:
-        fields = ('type', 'has_global_access', 'teams')
-        model = OrganizationMember
-
-    def __init__(self, authorizing_access, *args, **kwargs):
-        super(EditOrganizationMemberForm, self).__init__(*args, **kwargs)
-
-        self.fields['type'].choices = [
-            m for m in MEMBERSHIP_CHOICES
-            if m[0] >= authorizing_access
-        ]
-
-        self.fields['teams'].queryset = Team.objects.filter(
-            organization=self.instance.organization,
-        )
-
-    def save(self, *args, **kwargs):
-        if self.cleaned_data['has_global_access']:
-            self.cleaned_data['teams'] = []
-        return super(EditOrganizationMemberForm, self).save(*args, **kwargs)
+from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
 
 
 class OrganizationMemberSettingsView(OrganizationView):
@@ -93,20 +50,11 @@ class OrganizationMemberSettingsView(OrganizationView):
 
         form = self.get_form(request, member)
         if form.is_valid():
-            member = form.save()
+            member = form.save(request.user, organization)
 
             messages.add_message(request, messages.SUCCESS,
                 _('Your changes were saved.'))
 
-            AuditLogEntry.objects.create(
-                organization=organization,
-                actor=request.user,
-                target_object=member.id,
-                target_user=member.user,
-                event=AuditLogEntryEvent.MEMBER_EDIT,
-                data=member.get_audit_log_data(),
-            )
-
             redirect = reverse('sentry-organization-member-settings',
                                args=[organization.slug, member.id])
 
