commit 4be4833d080fbb47861437faab22e3c9c4373286
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 28 18:17:38 2015 -0700

    Move absolute import check to linter

diff --git a/setup.py b/setup.py
index a10e0aded8..4330241252 100755
--- a/setup.py
+++ b/setup.py
@@ -233,6 +233,7 @@ setup(
         ],
         'flake8.extension': [
             'C900 = sentry.lint.mock_check:MockCheck',
+            'C901 = sentry.lint.absolute_import_check:AbsoluteImportCheck',
         ],
     },
     classifiers=[
diff --git a/src/sentry/lint/absolute_import_check.py b/src/sentry/lint/absolute_import_check.py
new file mode 100644
index 0000000000..27465b8c76
--- /dev/null
+++ b/src/sentry/lint/absolute_import_check.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import
+
+import ast
+
+
+class ImportVisitor(ast.NodeVisitor):
+    def __init__(self):
+        self.has_import = False
+
+    def visit_ImportFrom(self, node):
+        if self.has_import:
+            return
+        if node.module != '__future__':
+            return
+        for nameproxy in node.names:
+            if nameproxy.name != 'absolute_import':
+                continue
+            self.has_import = True
+            break
+
+
+class AbsoluteImportCheck(object):
+    name = 'absolute-import-checker'
+    version = '0'
+    _error = "C901 Missing `from __future__ import absolute_import`"
+
+    def __init__(self, tree, filename=None):
+        self.tree = tree
+
+    def run(self):
+        visitor = ImportVisitor()
+        visitor.visit(self.tree)
+        if not visitor.has_import:
+            yield 0, 0, self._error, type(self)
diff --git a/src/sentry/lint/mock_check.py b/src/sentry/lint/mock_check.py
index 540c2c1c3a..11229f6f61 100644
--- a/src/sentry/lint/mock_check.py
+++ b/src/sentry/lint/mock_check.py
@@ -17,9 +17,6 @@ class MockAttrVisitor(ast.NodeVisitor):
     def __init__(self):
         self.errors = []
 
-    def visit(self, node):
-        super(MockAttrVisitor, self).visit(node)
-
     def visit_Attribute(self, node):
         self.generic_visit(node)
         if node.attr in self.non_existent_methods:
diff --git a/tests/functional/test_imports.py b/tests/functional/test_imports.py
deleted file mode 100644
index b4b6333c58..0000000000
--- a/tests/functional/test_imports.py
+++ /dev/null
@@ -1,52 +0,0 @@
-from __future__ import absolute_import
-
-import fnmatch
-import os
-
-from subprocess import call
-
-
-ROOT = os.path.normpath(
-    os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, 'src'))
-
-
-def _find_files(root, pattern='*'):
-    matches = []
-    for root, _, filenames in os.walk(root):
-        for filename in fnmatch.filter(filenames, pattern):
-            matches.append(os.path.join(root, filename))
-    return matches
-
-
-def _generate_tests():
-    string = 'from __future__ import absolute_import'
-
-    kwargs = {
-        'stdout': open('/dev/null', 'a'),
-        'stderr': open('/dev/null', 'a'),
-    }
-
-    def make_test(filename, relpath):
-        def test():
-            assert not call(['grep', string, filename], **kwargs), \
-                "Missing %r in %s" % (string, relpath)
-
-        test.__doc__ = relpath
-        test.__name__ = 'test_' + relpath.replace('/', '_').rstrip('.py')
-
-        return test
-
-    for filename in _find_files(ROOT, '*.py'):
-        relpath = filename[len(ROOT) - 3:]
-
-        if '/migrations/' in relpath:
-            continue
-
-        if relpath.startswith('src/sentry/static/'):
-            continue
-
-        func = make_test(filename, relpath)
-
-        globals()[func.__name__] = func
-
-_generate_tests()
