commit 235d2e8997dec8dcfce0e0669076062e1364b43f
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 26 17:13:23 2016 -0600

    Prevent role escalation (#3809)
    
    * Prevent role escalation
    
    This ensures that e.g. a manager cannot promote someone (including themselves) to an owner.
    
    /cc @getsentry/security

diff --git a/src/sentry/templates/sentry/organization-member-settings.html b/src/sentry/templates/sentry/organization-member-settings.html
index 4e7eef9ef7..abb915a0ca 100644
--- a/src/sentry/templates/sentry/organization-member-settings.html
+++ b/src/sentry/templates/sentry/organization-member-settings.html
@@ -69,11 +69,12 @@
       </div>
       <div class="box-content with-padding">
         <ul class="radio-inputs">
-          {% for role in role_list %}
+          {% for role, allowed in role_list %}
             <li class="radio">
               <label>
                 <input type="radio" name="role" value="{{ role.id }}"
-                       {% if role.id == form.role.value %} checked{% endif %} />
+                       {% if role.id == form.role.value %} checked{% endif %}
+                       {% if not allowed %} disabled="disabled"{% endif %}/>
                 {{ role.name }}
                 <div class="help-block">{{ role.desc|linebreaksbr }}</div>
               </label>
diff --git a/src/sentry/web/forms/edit_organization_member.py b/src/sentry/web/forms/edit_organization_member.py
index a9f1b2b6a2..a367b66fec 100644
--- a/src/sentry/web/forms/edit_organization_member.py
+++ b/src/sentry/web/forms/edit_organization_member.py
@@ -14,14 +14,21 @@ class EditOrganizationMemberForm(forms.ModelForm):
         widget=forms.CheckboxSelectMultiple(),
         required=False,
     )
+    role = forms.ChoiceField()
 
     class Meta:
         fields = ('role',)
         model = OrganizationMember
 
     def __init__(self, *args, **kwargs):
+        allowed_roles = kwargs.pop('allowed_roles')
+
         super(EditOrganizationMemberForm, self).__init__(*args, **kwargs)
 
+        self.fields['role'].choices = (
+            (r.id, r.name)
+            for r in allowed_roles
+        )
         self.fields['teams'].queryset = Team.objects.filter(
             organization=self.instance.organization,
         )
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 26f17277ee..47ec242175 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -12,10 +12,11 @@ from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
 
 
 class OrganizationMemberSettingsView(OrganizationView):
-    def get_form(self, request, member):
+    def get_form(self, request, member, allowed_roles):
         return EditOrganizationMemberForm(
             data=request.POST or None,
             instance=member,
+            allowed_roles=allowed_roles,
             initial={
                 'role': member.role,
                 'teams': Team.objects.filter(
@@ -71,12 +72,18 @@ class OrganizationMemberSettingsView(OrganizationView):
                 user=request.user,
                 organization=organization,
             )
+            allowed_roles = [
+                r for r in roles.get_all()
+                if r.priority <= roles.get(member.role).priority
+            ]
             can_admin = acting_member.can_manage_member(member)
+        elif request.is_superuser():
+            allowed_roles = roles.get_all()
 
         if member.user == request.user or not can_admin:
             return self.view_member(request, organization, member)
 
-        form = self.get_form(request, member)
+        form = self.get_form(request, member, allowed_roles)
         if form.is_valid():
             member = form.save(request.user, organization, request.META['REMOTE_ADDR'])
 
@@ -91,7 +98,10 @@ class OrganizationMemberSettingsView(OrganizationView):
         context = {
             'member': member,
             'form': form,
-            'role_list': roles.get_all(),
+            'role_list': [
+                (r, r in allowed_roles)
+                for r in roles.get_all()
+            ]
         }
 
         return self.respond('sentry/organization-member-settings.html', context)
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index 6e9d13b969..78ecc691e1 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -232,3 +232,35 @@ class OrganizationMemberSettingsTest(TestCase):
 
         assert resp.context['organization'] == organization
         assert resp.context['member'] == owner_om
+
+    def test_manager_cant_assign_owner(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+
+        manager = self.create_user('bar@example.com')
+        OrganizationMember.objects.create(
+            organization=organization,
+            user=manager,
+            role='manager',
+        )
+
+        member = self.create_user('baz@example.com')
+        member_om = OrganizationMember.objects.create(
+            organization=organization,
+            user=member,
+            role='member',
+        )
+
+        path = reverse('sentry-organization-member-settings',
+                       args=[organization.slug, member_om.id])
+
+        self.login_as(manager)
+
+        resp = self.client.post(path, {
+            'role': 'owner',
+        })
+
+        assert resp.status_code == 200
+
+        member = OrganizationMember.objects.get(id=member_om.id)
+
+        assert member.role == 'member'
