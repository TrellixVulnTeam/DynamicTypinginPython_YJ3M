commit 0e0892dd3196d62d44abee9cd131bdb303357902
Author: Mark Story <mark@mark-story.com>
Date:   Thu Sep 27 15:05:41 2018 +0000

    fix(alerts) AttributeError on int (#9894)
    
    Custom attributes are sometimes int values causing an AttributeError.
    
    Fixes SENTRY-66B

diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index ab19ad0240..a06f6d51ab 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -9,6 +9,7 @@ sentry.rules.conditions.tagged_event
 from __future__ import absolute_import
 
 import json
+import six
 
 from collections import OrderedDict
 from django import forms
@@ -120,7 +121,6 @@ class EventAttributeCondition(EventCondition):
 
     def _get_attribute_values(self, event, attr):
         # TODO(dcramer): we should validate attributes (when we can) before
-
         path = attr.split('.')
 
         if path[0] in ('message', 'platform'):
@@ -221,7 +221,11 @@ class EventAttributeCondition(EventCondition):
         except KeyError:
             attribute_values = []
 
-        attribute_values = [v.lower() for v in attribute_values if v is not None]
+        attribute_values = [
+            six.text_type(v).lower()
+            for v in attribute_values
+            if v is not None
+        ]
 
         if match == MatchType.EQUAL:
             for a_value in attribute_values:
diff --git a/tests/sentry/rules/conditions/test_event_attribute.py b/tests/sentry/rules/conditions/test_event_attribute.py
index 791bd4c7f1..6e8cdaad8c 100644
--- a/tests/sentry/rules/conditions/test_event_attribute.py
+++ b/tests/sentry/rules/conditions/test_event_attribute.py
@@ -188,6 +188,25 @@ class EventAttributeConditionTest(RuleTestCase):
         })
         self.assertDoesNotPass(rule, event)
 
+    def test_compares_case_insensitive(self):
+        event = self.get_event()
+        rule = self.get_rule(data={
+            'match': MatchType.EQUAL,
+            'attribute': 'environment',
+            'value': 'PRODUCTION',
+        })
+        self.assertPasses(rule, event)
+
+    def test_compare_int_value(self):
+        event = self.get_event()
+        event.data['extra']['number'] = 1
+        rule = self.get_rule(data={
+            'match': MatchType.EQUAL,
+            'attribute': 'extra.number',
+            'value': '1',
+        })
+        self.assertPasses(rule, event)
+
     def test_http_method(self):
         event = self.get_event()
         rule = self.get_rule(data={
