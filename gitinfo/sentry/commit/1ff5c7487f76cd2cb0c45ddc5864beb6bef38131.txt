commit 1ff5c7487f76cd2cb0c45ddc5864beb6bef38131
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Mon Mar 27 18:59:40 2017 -0700

    List files by repository (#5143)

diff --git a/src/sentry/api/serializers/models/filechange.py b/src/sentry/api/serializers/models/filechange.py
index 98bf07a57d..504dbf969a 100644
--- a/src/sentry/api/serializers/models/filechange.py
+++ b/src/sentry/api/serializers/models/filechange.py
@@ -3,22 +3,28 @@ from __future__ import absolute_import
 import six
 
 from sentry.api.serializers import Serializer, register
-from sentry.models import Commit, CommitFileChange
+from sentry.models import Commit, CommitFileChange, Repository
 from sentry.api.serializers.models.release import get_users_for_commits
 
 
 @register(CommitFileChange)
 class CommitFileChangeSerializer(Serializer):
     def get_attrs(self, item_list, user):
-        commits = Commit.objects.filter(id__in=[f.commit_id for f in item_list]).select_related('author')
+        commits = list(Commit.objects.filter(id__in=[f.commit_id for f in item_list]).select_related('author'))
         author_objs = get_users_for_commits(commits)
         commits_by_id = {commit.id: commit for commit in commits}
+
+        repo_names_by_id = dict(Repository.objects.filter(
+            id__in=[commit.repository_id for commit in commits]
+        ).values_list('id', 'name'))
+
         result = {}
         for item in item_list:
             commit = commits_by_id[item.commit_id]
             result[item] = {
                 'user': author_objs.get(commit.author_id, {}),
-                'message': commit.message
+                'message': commit.message,
+                'repository_name': repo_names_by_id.get(commit.repository_id)
             }
 
         return result
@@ -26,9 +32,10 @@ class CommitFileChangeSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
             'id': six.text_type(obj.id),
-            'org_id': obj.organization_id,
+            'orgId': obj.organization_id,
             'author': attrs.get('user', {}),
-            'commit_message': attrs.get('message', ''),
+            'commitMessage': attrs.get('message', ''),
             'filename': obj.filename,
-            'type': obj.type
+            'type': obj.type,
+            'repoName': attrs.get('repository_name', ''),
         }
diff --git a/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx b/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
new file mode 100644
index 0000000000..8e1833b881
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
@@ -0,0 +1,81 @@
+import React from 'react';
+import FileChange from './fileChange';
+import {t, tn} from '../locale';
+
+function Collapsed(props) {
+  return (
+    <li className="list-group-item list-group-item-sm align-center">
+      <span className="icon-container">
+      </span>
+      <a onClick={props.onClick}>{tn(('Show %d collapsed file'), ('Show %d collapsed files'), props.count)}</a>
+    </li>
+  );
+}
+
+Collapsed.propTypes = {
+  onClick: React.PropTypes.func.isRequired,
+  count: React.PropTypes.number.isRequired
+};
+
+const RepositoryFileSummary = React.createClass({
+  propTypes: {
+    fileChangeSummary: React.PropTypes.object,
+    repository: React.PropTypes.string,
+  },
+
+  statics: {
+    MAX_WHEN_COLLAPSED: 5
+  },
+
+  getInitialState() {
+    return {
+      loading: true,
+      collapsed: true,
+    };
+  },
+
+  onCollapseToggle() {
+    this.setState({
+      collapsed: !this.state.collapsed
+    });
+  },
+
+  render() {
+    let {repository, fileChangeSummary} = this.props;
+    const MAX = RepositoryFileSummary.MAX_WHEN_COLLAPSED;
+    let files = Object.keys(fileChangeSummary);
+    let fileCount = files.length;
+    files.sort();
+    if (this.state.collapsed && fileCount > MAX) {
+      files = files.slice(0, MAX);
+    }
+    let numCollapsed = fileCount - files.length;
+    let canCollapse = fileCount > MAX;
+    return(
+      <ul className="list-group list-group-striped m-b-2">
+      <h6>
+        {tn(('%d file changed in ' + repository), ('%d files changed in ' + repository), fileCount)}
+      </h6>
+      {files.map(filename => {
+        let {id, authors, types} = fileChangeSummary[filename];
+        return (
+          <FileChange
+            key={id}
+            filename={filename}
+            authors={Object.values(authors)}
+            types={types}
+            />
+        );
+      })}
+      {numCollapsed > 0 && <Collapsed onClick={this.onCollapseToggle} count={numCollapsed}/>}
+      {numCollapsed === 0 && canCollapse &&
+        <li className="list-group-item list-group-item-sm align-center">
+          <span className="icon-container"></span>
+          <a onClick={this.onCollapseToggle}>{t('Collapse')}</a>
+        </li>
+      }
+      </ul>);
+}
+});
+
+export default RepositoryFileSummary;
diff --git a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
index bb543d798e..d4634c1e2e 100644
--- a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
@@ -3,45 +3,25 @@ import React from 'react';
 import LoadingIndicator from '../../components/loadingIndicator';
 import LoadingError from '../../components/loadingError';
 import IssueList from '../../components/issueList';
-import FileChange from '../../components/fileChange';
 import CommitAuthorStats from '../../components/commitAuthorStats';
 import ReleaseProjectStatSparkline from '../../components/releaseProjectStatSparkline';
+import RepositoryFileSummary from '../../components/repositoryFileSummary';
 import TimeSince from '../../components/timeSince';
 
 import ApiMixin from '../../mixins/apiMixin';
 
 import {t} from '../../locale';
 
-function Collapsed(props) {
-  return (
-    <li className="list-group-item list-group-item-sm align-center">
-      <span className="icon-container">
-      </span>
-      <a onClick={props.onClick}>Show {props.count} collapsed files</a>
-    </li>
-  );
-}
-
-Collapsed.propTypes = {
-  onClick: React.PropTypes.func.isRequired,
-  count: React.PropTypes.number.isRequired
-};
-
 const ReleaseOverview = React.createClass({
 
   mixins: [ApiMixin],
 
-  statics: {
-    MAX_WHEN_COLLAPSED: 5
-  },
-
   getInitialState() {
     return {
       loading: true,
       error: false,
       projects: [],
       fileList: [],
-      collapsed: true,
       deploys: [],
       hasRepos: false,
     };
@@ -129,12 +109,6 @@ const ReleaseOverview = React.createClass({
     return <div className="box empty">{t('None')}</div>;
   },
 
-  onCollapseToggle() {
-    this.setState({
-      collapsed: !this.state.collapsed
-    });
-  },
-
   render() {
     let {orgId, projectId, version} = this.props.params;
 
@@ -148,31 +122,24 @@ const ReleaseOverview = React.createClass({
 
     // convert list of individual file changes (can be
     // multiple changes to a single file) into a per-file
-    // summary
-    let fileChangeSummary = fileList.reduce(function (summary, fileChange) {
-      let {author, type, filename} = fileChange;
-      if (!summary.hasOwnProperty(filename)) {
-        summary[filename] = {
-          authors: {}, types: new Set()
+    // summary grouped by repository
+    let filesByRepository = fileList.reduce(function (fbr, file) {
+      let {filename, repoName, author, type} = file;
+      if (!fbr.hasOwnProperty(repoName)) {
+        fbr[repoName] = {};
+      }
+      if (!fbr[repoName].hasOwnProperty(filename)) {
+          fbr[repoName][filename] = {
+          authors: {}, types: new Set(), repos: new Set(),
         };
       }
 
-      summary[filename].authors[author.email] = author;
-      summary[filename].types.add(type);
+      fbr[repoName][filename].authors[author.email] = author;
+      fbr[repoName][filename].types.add(type);
 
-      return summary;
+      return fbr;
     }, {});
 
-    let fileCount = Object.keys(fileChangeSummary).length;
-
-    const MAX = ReleaseOverview.MAX_WHEN_COLLAPSED;
-
-    let files = Object.keys(fileChangeSummary);
-    files.sort();
-    if (this.state.collapsed && fileCount > MAX) {
-      files = files.slice(0, MAX);
-    }
-    let numCollapsed = fileCount - files.length;
     let deploys = this.state.deploys;
     return (
       <div>
@@ -205,20 +172,11 @@ const ReleaseOverview = React.createClass({
               />
             {hasRepos &&
               <div>
-                <h5>{fileCount} Files Changed</h5>
-                <ul className="list-group list-group-striped m-b-2">
-                  {files.map(filename => {
-                    return (
-                      <FileChange
-                        key={fileChangeSummary[filename].id}
-                        filename={filename}
-                        authors={Object.values(fileChangeSummary[filename].authors)}
-                        types={fileChangeSummary[filename].types}
-                        />
-                    );
-                  })}
-                  {numCollapsed > 0 && <Collapsed onClick={this.onCollapseToggle} count={numCollapsed}/>}
-                </ul>
+                {Object.keys(filesByRepository).map(repository => {
+                  return (<RepositoryFileSummary
+                            repository={repository}
+                            fileChangeSummary={filesByRepository[repository]}/>);
+                })}
               </div>
             }
           </div>
diff --git a/tests/sentry/api/serializers/test_commit_filechange.py b/tests/sentry/api/serializers/test_commit_filechange.py
index ac6a737eda..2b41e5a248 100644
--- a/tests/sentry/api/serializers/test_commit_filechange.py
+++ b/tests/sentry/api/serializers/test_commit_filechange.py
@@ -51,7 +51,7 @@ class CommitFileChangeSerializerTest(TestCase):
         result = serialize(cfc, user)
 
         assert result['filename'] == '.gitignore'
-        assert result['commit_message'] == 'waddap'
+        assert result['commitMessage'] == 'waddap'
         assert result['author'] == {'name': 'stebe', 'email': 'stebe@sentry.io'}
 
     def test_no_author(self):
