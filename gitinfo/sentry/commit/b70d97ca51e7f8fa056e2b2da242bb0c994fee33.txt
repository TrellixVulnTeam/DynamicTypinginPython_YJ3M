commit b70d97ca51e7f8fa056e2b2da242bb0c994fee33
Author: Taylan Gocmen <taylangocmen@users.noreply.github.com>
Date:   Tue May 26 19:50:10 2020 -0700

    fix(ui): Add missing ownership rules for issue owner suggestions (#18977)
    
    * add tag example to issue owner placeholder
    
    * automatically changed snapshots
    
    * add tags as owner rules, change rule display to code
    
    * shorten the anonymous function
    
    * consolidate view button and change rules titles
    
    * use Button component and change the constructor to static vars
    
    * revert to commits as title and remove unnecassary important
    
    * fix titles

diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwnerHovercard.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwnerHovercard.jsx
index 4ca4ed1059..22fac31b62 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwnerHovercard.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwnerHovercard.jsx
@@ -7,6 +7,7 @@ import {t, tct} from 'app/locale';
 import {openInviteMembersModal} from 'app/actionCreators/modal';
 import ActorAvatar from 'app/components/avatar/actorAvatar';
 import Alert from 'app/components/alert';
+import Button from 'app/components/button';
 import Hovercard from 'app/components/hovercard';
 import {IconCommit} from 'app/icons';
 import Link from 'app/components/links/link';
@@ -14,125 +15,149 @@ import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
-const SuggestedOwnerHovercard = ({actor, commits, rules, ...props}) => (
-  <Hovercard
-    header={
-      <React.Fragment>
-        <HovercardHeader>
-          <HovercardActorAvatar actor={actor} />
-          {actor.name || actor.email}
-        </HovercardHeader>
-        {actor.id === undefined && (
-          <EmailAlert icon="icon-warning-sm" type="warning">
-            {tct(
-              'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',
-              {
-                actorEmail: <strong>{actor.email}</strong>,
-                accountSettings: <Link to="/settings/account/emails/" />,
-                inviteUser: (
-                  <a
-                    onClick={() =>
-                      openInviteMembersModal({
-                        initialData: [
-                          {
-                            emails: new Set([actor.email]),
-                          },
-                        ],
-                        source: 'suggested_assignees',
-                      })
-                    }
-                  />
-                ),
-              }
-            )}
-          </EmailAlert>
-        )}
-      </React.Fragment>
-    }
-    body={
-      <HovercardBody>
-        {commits !== undefined && (
-          <React.Fragment>
-            <div className="divider">
-              <h6>{t('Commits')}</h6>
-            </div>
-            <div>
-              {commits.slice(0, 6).map(({message, dateCreated}, i) => (
-                <ReasonItem key={i}>
-                  <CommitIcon />
-                  <CommitMessage message={message} date={dateCreated} />
-                </ReasonItem>
-              ))}
-            </div>
-          </React.Fragment>
-        )}
-        {rules !== undefined && (
+class SuggestedOwnerHovercard extends React.Component {
+  static propTypes = {
+    /**
+     * The suggested actor.
+     */
+    actor: PropTypes.oneOfType([
+      // eslint-disable-next-line react/no-typos
+      SentryTypes.User,
+      // Sentry user which has *not* been expanded
+      PropTypes.shape({
+        email: PropTypes.string.isRequired,
+        id: PropTypes.string.isRequired,
+        name: PropTypes.string.isRequired,
+      }),
+      // Unidentifier user (from commits)
+      PropTypes.shape({
+        email: PropTypes.string.isRequired,
+        name: PropTypes.string.isRequired,
+      }),
+      // Sentry team
+      PropTypes.shape({
+        id: PropTypes.string.isRequired,
+        name: PropTypes.string.isRequired,
+      }),
+    ]),
+
+    /**
+     * The list of commits the actor is suggested for. May be left blank if the
+     * actor is not suggested for commits.
+     */
+    commits: PropTypes.arrayOf(
+      PropTypes.shape({
+        message: PropTypes.string.isRequired,
+        dateCreated: PropTypes.string.isRequired,
+      })
+    ),
+
+    /**
+     * The list of ownership rules the actor is suggested for. Maybe left blank
+     * if the actor is not suggested based on ownership rules.
+     */
+    rules: PropTypes.arrayOf(PropTypes.array),
+  };
+
+  state = {
+    commitsExpanded: false,
+    rulesExpanded: false,
+  };
+
+  render() {
+    const {actor, commits, rules, ...props} = this.props;
+
+    return (
+      <Hovercard
+        header={
           <React.Fragment>
-            <div className="divider">
-              <h6>{t('Ownership Rules')}</h6>
-            </div>
-            <div>
-              {rules.map(([type, matched], i) => (
-                <ReasonItem key={i}>
-                  <OwnershipTag tagType={type} />
-                  <OwnershipValue>{matched}</OwnershipValue>
-                </ReasonItem>
-              ))}
-            </div>
+            <HovercardHeader>
+              <HovercardActorAvatar actor={actor} />
+              {actor.name || actor.email}
+            </HovercardHeader>
+            {actor.id === undefined && (
+              <EmailAlert icon="icon-warning-sm" type="warning">
+                {tct(
+                  'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',
+                  {
+                    actorEmail: <strong>{actor.email}</strong>,
+                    accountSettings: <Link to="/settings/account/emails/" />,
+                    inviteUser: (
+                      <a
+                        onClick={() =>
+                          openInviteMembersModal({
+                            initialData: [
+                              {
+                                emails: new Set([actor.email]),
+                              },
+                            ],
+                            source: 'suggested_assignees',
+                          })
+                        }
+                      />
+                    ),
+                  }
+                )}
+              </EmailAlert>
+            )}
           </React.Fragment>
-        )}
-      </HovercardBody>
-    }
-    {...props}
-  />
-);
-
-SuggestedOwnerHovercard.propTypes = {
-  /**
-   * The suggested actor.
-   */
-  actor: PropTypes.oneOfType([
-    // eslint-disable-next-line react/no-typos
-    SentryTypes.User,
-    // Sentry user which has *not* been expanded
-    PropTypes.shape({
-      email: PropTypes.string.isRequired,
-      id: PropTypes.string.isRequired,
-      name: PropTypes.string.isRequired,
-    }),
-    // Unidentifier user (from commits)
-    PropTypes.shape({
-      email: PropTypes.string.isRequired,
-      name: PropTypes.string.isRequired,
-    }),
-    // Sentry team
-    PropTypes.shape({
-      id: PropTypes.string.isRequired,
-      name: PropTypes.string.isRequired,
-    }),
-  ]),
-
-  /**
-   * The list of commits the actor is suggested for. May be left blank if the
-   * actor is not suggested for commits.
-   */
-  commits: PropTypes.arrayOf(
-    PropTypes.shape({
-      message: PropTypes.string.isRequired,
-      dateCreated: PropTypes.string.isRequired,
-    })
-  ),
-
-  /**
-   * The list of ownership rules the actor is suggested for. Maybe left blank
-   * if the actor is not suggested based on ownership rules.
-   */
-  rules: PropTypes.arrayOf(PropTypes.array),
-};
+        }
+        body={
+          <HovercardBody>
+            {commits !== undefined && (
+              <React.Fragment>
+                <div className="divider">
+                  <h6>{t('Commits')}</h6>
+                </div>
+                <div>
+                  {commits
+                    .slice(0, this.state.commitsExpanded ? commits.length : 3)
+                    .map(({message, dateCreated}, i) => (
+                      <CommitReasonItem key={i}>
+                        <CommitIcon />
+                        <CommitMessage message={message} date={dateCreated} />
+                      </CommitReasonItem>
+                    ))}
+                </div>
+                {commits.length > 3 && !this.state.commitsExpanded ? (
+                  <ViewMoreButton
+                    onClick={() => this.setState({commitsExpanded: true})}
+                  />
+                ) : null}
+              </React.Fragment>
+            )}
+            {rules !== undefined && (
+              <React.Fragment>
+                <div className="divider">
+                  <h6>{t('Matching Ownership Rules')}</h6>
+                </div>
+                <div>
+                  {rules
+                    .slice(0, this.state.rulesExpanded ? rules.length : 3)
+                    .map(([type, matched], i) => (
+                      <RuleReasonItem key={i}>
+                        <OwnershipTag tagType={type} />
+                        <OwnershipValue>{matched}</OwnershipValue>
+                      </RuleReasonItem>
+                    ))}
+                </div>
+                {rules.length > 3 && !this.state.rulesExpanded ? (
+                  <ViewMoreButton onClick={() => this.setState({rulesExpanded: true})} />
+                ) : null}
+              </React.Fragment>
+            )}
+          </HovercardBody>
+        }
+        {...props}
+      />
+    );
+  }
+}
 
 const tagColors = {
   url: theme.greenLight,
-  path: theme.blueLight,
+  path: theme.purpleLight,
+  tag: theme.blueLight,
 };
 
 const CommitIcon = styled(p => <IconCommit {...p} />)`
@@ -158,7 +183,16 @@ const CommitDate = styled(({date, ...props}) => (
   color: ${p => p.theme.gray2};
 `;
 
-const ReasonItem = styled('div')`
+const CommitReasonItem = styled('div')`
+  display: flex;
+  align-items: flex-start;
+
+  &:not(:last-child) {
+    margin-bottom: ${space(1)};
+  }
+`;
+
+const RuleReasonItem = styled('code')`
   display: flex;
   align-items: flex-start;
 
@@ -168,7 +202,7 @@ const ReasonItem = styled('div')`
 `;
 
 const OwnershipTag = styled(({tagType, ...props}) => <div {...props}>{tagType}</div>)`
-  background: ${p => tagColors[p.tagType]};
+  background: ${p => tagColors[p.tagType.indexOf('tags') === -1 ? p.tagType : 'tag']};
   color: #fff;
   font-size: 11px;
   padding: ${space(0.25)} ${space(0.5)};
@@ -179,6 +213,20 @@ const OwnershipTag = styled(({tagType, ...props}) => <div {...props}>{tagType}</
   text-align: center;
 `;
 
+const ViewMoreButton = styled(p => (
+  <Button {...p} priority="link" size="zero">
+    {t('View more')}
+  </Button>
+))`
+  border: none;
+  color: ${p => p.theme.gray2};
+  font-size: ${p => p.theme.fontSizeExtraSmall};
+  padding: ${space(0.25)} ${space(0.5)};
+  margin: ${space(1)} ${space(0.25)} ${space(0.25)} 0;
+  width: 100%;
+  min-width: 34px;
+`;
+
 const OwnershipValue = styled('code')`
   word-break: break-all;
   line-height: 1.2;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
index a2b6778a87..340f124710 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
@@ -154,7 +154,10 @@ class OwnerInput extends React.Component {
         >
           <StyledTextArea
             placeholder={
-              '#example usage\npath:src/example/pipeline/* person@sentry.io #infra\nurl:http://example.com/settings/* #product'
+              '#example usage\n' +
+              'path:src/example/pipeline/* person@sentry.io #infra\n' +
+              'url:http://example.com/settings/* #product\n' +
+              'tags.sku_class:enterprise #enterprise'
             }
             onChange={this.handleChange}
             disabled={disabled}
diff --git a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
index 68a3b0b43b..666de40748 100644
--- a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
@@ -1091,7 +1091,8 @@ exports[`Project Ownership Input renders 1`] = `
       onChange={[Function]}
       placeholder="#example usage
 path:src/example/pipeline/* person@sentry.io #infra
-url:http://example.com/settings/* #product"
+url:http://example.com/settings/* #product
+tags.sku_class:enterprise #enterprise"
       rows={1}
       spellCheck="false"
       value="new"
@@ -1105,7 +1106,8 @@ url:http://example.com/settings/* #product"
         onChange={[Function]}
         placeholder="#example usage
 path:src/example/pipeline/* person@sentry.io #infra
-url:http://example.com/settings/* #product"
+url:http://example.com/settings/* #product
+tags.sku_class:enterprise #enterprise"
         rows={1}
         spellCheck="false"
         value="new"
@@ -1119,7 +1121,8 @@ url:http://example.com/settings/* #product"
           onChange={[Function]}
           placeholder="#example usage
 path:src/example/pipeline/* person@sentry.io #infra
-url:http://example.com/settings/* #product"
+url:http://example.com/settings/* #product
+tags.sku_class:enterprise #enterprise"
           rows={1}
           spellCheck="false"
           value="new"
