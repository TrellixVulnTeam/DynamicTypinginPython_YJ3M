commit 6b482317f8b2499c201e2d0476208dfacf73f469
Author: David Wang <davidw1339@gmail.com>
Date:   Thu Nov 14 18:03:25 2019 -0800

    feat(projects): Added query option to allow for filtering of user projects (#15615)
    
    Modified the OrganizationProjectsEndpoint to support returning just the projects that a user is a member of via team membership. This will eventually be used in the logic of <NoProjectMessage> instead of having it look through all of organization.projects.

diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index ee6c4a6c0b..1e33b34d7f 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -97,6 +97,8 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint, EnvironmentMixin):
                 elif key == "!team":
                     team_list = list(Team.objects.filter(slug__in=value))
                     queryset = queryset.exclude(teams__in=team_list)
+                elif key == "is_member":
+                    queryset = queryset.filter(teams__organizationmember__user=request.user)
                 else:
                     queryset = queryset.none()
 
diff --git a/tests/sentry/api/endpoints/test_organization_projects.py b/tests/sentry/api/endpoints/test_organization_projects.py
index fb89f6cce5..212494fe45 100644
--- a/tests/sentry/api/endpoints/test_organization_projects.py
+++ b/tests/sentry/api/endpoints/test_organization_projects.py
@@ -162,3 +162,22 @@ class OrganizationProjectsTest(APITestCase):
         response = self.client.get(self.path + "?all_projects=1&per_page=1")
         # Verify all projects in the org are returned in sorted order
         self.check_valid_response(response, sorted_projects)
+
+    def test_user_projects(self):
+        self.foo_user = self.create_user("foo@example.com")
+        self.login_as(user=self.foo_user)
+
+        other_team = self.create_team(organization=self.org)
+
+        project_bar = self.create_project(teams=[self.team], name="bar", slug="bar")
+        self.create_project(teams=[other_team], name="foo", slug="foo")
+        self.create_project(teams=[other_team], name="baz", slug="baz")
+
+        # Make foo_user a part of the org and self.team
+        self.create_member(organization=self.org, user=self.foo_user, teams=[self.team])
+
+        foo_user_projects = [project_bar]
+
+        response = self.client.get(self.path + "?query=is_member:1")
+        # Verify projects that were returned were foo_users projects
+        self.check_valid_response(response, foo_user_projects)
