commit 25813dca49d5eb979498454fd19248f4c1ace3a8
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 12 13:56:32 2011 -0800

    Sentry now records a message_id from the client which can be used to reference a message in the application

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 7de4a1fea3..1291e7f35f 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -7,6 +7,7 @@ import logging
 import sys
 import traceback
 import urllib2
+import uuid
 
 from django.core.cache import cache
 from django.template import TemplateSyntaxError
@@ -69,10 +70,16 @@ class SentryClient(object):
         for filter_ in get_filters():
             kwargs = filter_(None).process(kwargs) or kwargs
         
+        # create ID client-side so that it can be passed to application
+        message_id = uuid.uuid4().hex
+        kwargs['message_id'] = message_id
+
         # Make sure all data is coerced
         kwargs = transform(kwargs)
 
-        return self.send(**kwargs)
+        self.send(**kwargs)
+        
+        return message_id
 
     def send(self, **kwargs):
         if conf.REMOTE_URL:
diff --git a/sentry/client/middleware.py b/sentry/client/middleware.py
index ed18a7400b..d8bb81a62f 100644
--- a/sentry/client/middleware.py
+++ b/sentry/client/middleware.py
@@ -5,3 +5,14 @@ class Sentry404CatchMiddleware(object):
         if response.status_code != 404:
             return
         sentry_exception_handler(sender=Sentry404CatchMiddleware, request=request)
+
+class SentryResponseErrorIdMiddleware(object):
+    """
+    Appends the X-Sentry-ID response header for referencing a message within
+    the Sentry datastore.
+    """
+    def process_response(self, request, response):
+        if not getattr(request, 'sentry', None):
+            return
+        response['X-Sentry-ID'] = request.sentry['id']
+        return response
diff --git a/sentry/client/models.py b/sentry/client/models.py
index 886c679cf2..714971f5d1 100644
--- a/sentry/client/models.py
+++ b/sentry/client/models.py
@@ -4,7 +4,6 @@ import warnings
 
 from django.core.signals import got_request_exception
 from django.db import  transaction
-from django.http import Http404
 
 from sentry import conf
 
@@ -45,8 +44,12 @@ def sentry_exception_handler(request=None, **kwargs):
             data=data,
         )
         
-        client = get_client()
-        client.create_from_exception(**extra)
+        message_id = get_client().create_from_exception(**extra)
+        if request:
+            # attach the sentry object to the request
+            request.sentry = {
+                'id': message_id,
+            }
     except Exception, exc:
         try:
             logger.exception(u'Unable to process log entry: %s' % (exc,))
diff --git a/sentry/manager.py b/sentry/manager.py
index 308fc273b8..7481e6c750 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -34,6 +34,7 @@ class SentryManager(models.Manager):
         server_name = kwargs.pop('server_name', conf.CLIENT)
         site = kwargs.pop('site', None)
         data = kwargs.pop('data', {}) or {}
+        message_id = kwargs.pop('message_id', None)
 
         if url:
             data['url'] = url
@@ -76,6 +77,7 @@ class SentryManager(models.Manager):
             else: 
                 mail = True
             instance = Message.objects.create(
+                message_id=message_id,
                 view=view,
                 logger=logger_name,
                 data=data,
diff --git a/sentry/migrations/0009_auto__add_field_message_message_id.py b/sentry/migrations/0009_auto__add_field_message_message_id.py
new file mode 100644
index 0000000000..c55c83ab49
--- /dev/null
+++ b/sentry/migrations/0009_auto__add_field_message_message_id.py
@@ -0,0 +1,64 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding field 'Message.message_id'
+        db.add_column('sentry_message', 'message_id', self.gf('django.db.models.fields.CharField')(max_length=32, unique=True, null=True), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Deleting field 'Message.message_id'
+        db.delete_column('sentry_message', 'message_id')
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 33263089f0..c8b8edc14e 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -233,6 +233,7 @@ class GroupedMessage(MessageBase):
         return self.data['version']
 
 class Message(MessageBase):
+    message_id      = models.CharField(max_length=32, null=True, unique=True)
     group           = models.ForeignKey(GroupedMessage, blank=True, null=True, related_name="message_set")
     datetime        = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index ac39b85783..14293a0895 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -207,7 +207,8 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999989)
         except Message.DoesNotExist, exc:
-            error = get_client().create_from_exception()
+            message_id = get_client().create_from_exception()
+            error = Message.objects.get(message_id=message_id)
             self.assertTrue(error.data.get('__sentry__', {}).get('exc'))
         else:
             self.fail('Unable to create `Message` entry.')
@@ -215,7 +216,8 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999989)
         except Message.DoesNotExist, exc:
-            error = get_client().create_from_exception()
+            message_id = get_client().create_from_exception()
+            error = Message.objects.get(message_id=message_id)
             self.assertTrue(error.data.get('__sentry__', {}).get('exc'))
         else:
             self.fail('Unable to create `Message` entry.')
@@ -263,7 +265,9 @@ class SentryTestCase(TestCase):
         cnt = Message.objects.count()
         value = 'רונית מגן'
 
-        error = get_client().create_from_text(value)
+        message_id = get_client().create_from_text(value)
+        error = Message.objects.get(message_id=message_id)
+
         self.assertEquals(Message.objects.count(), cnt+1)
         self.assertEquals(error.message, value)
 
@@ -289,7 +293,9 @@ class SentryTestCase(TestCase):
         cnt = Message.objects.count()
         value = 'רונית מגן'.decode('utf-8')
 
-        error = get_client().create_from_text(value)
+        message_id = get_client().create_from_text(value)
+        error = Message.objects.get(message_id=message_id)
+
         self.assertEquals(Message.objects.count(), cnt+1)
         self.assertEquals(error.message, value)
 
@@ -311,7 +317,9 @@ class SentryTestCase(TestCase):
     
     def testLongURLs(self):
         # Fix: #6 solves URLs > 200 characters
-        error = get_client().create_from_text('hello world', url='a'*210)
+        message_id = get_client().create_from_text('hello world', url='a'*210)
+        error = Message.objects.get(message_id=message_id)
+
         self.assertEquals(error.url, 'a'*200)
         self.assertEquals(error.data['url'], 'a'*210)
     
@@ -568,7 +576,9 @@ class SentryTestCase(TestCase):
             args=(),
             exc_info=(None, None, None),
         )
-        message = client.create_from_record(record)
+        message_id = client.create_from_record(record)
+        message = Message.objects.get(message_id=message_id)
+        
         self.assertEquals('test', message.message)
 
     def testGroupFormatting(self):
diff --git a/setup.py b/setup.py
index 8897f9328e..db480af281 100644
--- a/setup.py
+++ b/setup.py
@@ -19,7 +19,7 @@ class mytest(test):
 
 setup(
     name='django-sentry',
-    version='1.5.5',
+    version='1.6.0',
     author='David Cramer',
     author_email='dcramer@gmail.com',
     url='http://github.com/dcramer/django-sentry',
