commit 0775012564087c27de737cf321ccba203bc240eb
Author: Mark Story <mark@sentry.io>
Date:   Wed Oct 30 10:38:05 2019 -0400

    feat(discover) Allow any aggregate to be graphed (#15318)
    
    Update the overview graph to use any aggregate function or aggregate
    alias in the event view. I've also removed some duplicated eventView
    creation code.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index b16e703da9..1400c04ada 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -680,8 +680,8 @@ FIELD_ALIASES = {
 VALID_AGGREGATES = {
     "count_unique": {"snuba_name": "uniq", "fields": "*"},
     "count": {"snuba_name": "count", "fields": "*"},
-    "min": {"snuba_name": "min", "fields": ["timestamp", "transaction.duration"]},
-    "max": {"snuba_name": "max", "fields": ["timestamp", "transaction.duration"]},
+    "min": {"snuba_name": "min", "fields": ["time", "timestamp", "transaction.duration"]},
+    "max": {"snuba_name": "max", "fields": ["time", "timestamp", "transaction.duration"]},
     "avg": {"snuba_name": "avg", "fields": ["transaction.duration"]},
 }
 
diff --git a/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx b/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx
index 9c8c11b1cf..0fe4582c9e 100644
--- a/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx
+++ b/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx
@@ -7,7 +7,7 @@ import space from 'app/styles/space';
 
 const YAxisSelector = props => {
   const {options, onChange, selected} = props;
-  const selectedOption = options.find(opt => selected === opt.value);
+  const selectedOption = options.find(opt => selected === opt.value) || options[0];
 
   return (
     <Container>
@@ -24,14 +24,14 @@ const YAxisSelector = props => {
         )}
       >
         {options.map(opt => (
-          <DropdownItem
+          <StyledDropdownItem
             key={opt.value}
             onSelect={onChange}
             eventKey={opt.value}
             isActive={selected === opt.value}
           >
             {opt.label}
-          </DropdownItem>
+          </StyledDropdownItem>
         ))}
       </DropdownControl>
     </Container>
@@ -43,6 +43,7 @@ const StyledDropdownButton = styled(
 )`
   color: ${p => p.theme.gray2};
   font-weight: normal;
+  text-transform: capitalize;
   height: ${space(4)};
   padding: ${space(0.5)} ${space(1)};
   background: ${p => p.theme.offWhite};
@@ -65,4 +66,8 @@ YAxisSelector.propTypes = {
   selected: PropTypes.string,
 };
 
+const StyledDropdownItem = styled(DropdownItem)`
+  text-transform: capitalize;
+`;
+
 export default YAxisSelector;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 0caa1b3924..766caf6ce8 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -7,7 +7,13 @@ import {SavedQuery as LegacySavedQuery} from 'app/views/discover/types';
 import {SavedQuery, NewQuery} from 'app/stores/discoverSavedQueriesStore';
 
 import {AUTOLINK_FIELDS, SPECIAL_FIELDS, FIELD_FORMATTERS} from './data';
-import {MetaType, EventQuery, getAggregateAlias, decodeColumnOrder} from './utils';
+import {
+  MetaType,
+  EventQuery,
+  isAggregateField,
+  getAggregateAlias,
+  decodeColumnOrder,
+} from './utils';
 import {TableColumn, TableColumnSort} from './table/types';
 
 type LocationQuery = {
@@ -479,6 +485,10 @@ class EventView {
     });
   }
 
+  getAggregateFields(): Field[] {
+    return this.fields.filter(field => isAggregateField(field.field));
+  }
+
   /**
    * Check if the field set contains no automatically linked fields
    */
diff --git a/src/sentry/static/sentry/app/views/eventsV2/events.tsx b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
index 9c32fe14cf..8e82967303 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/events.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
@@ -2,7 +2,7 @@ import React from 'react';
 import styled from 'react-emotion';
 import * as ReactRouter from 'react-router';
 import {Location} from 'history';
-import {omit} from 'lodash';
+import {omit, uniqBy} from 'lodash';
 
 import {Organization} from 'app/types';
 import space from 'app/styles/space';
@@ -15,11 +15,11 @@ import {getParams} from 'app/views/events/utils/getParams';
 
 import Table from './table';
 import Tags from './tags';
-import EventView from './eventView';
+import EventView, {Field} from './eventView';
 
 const CHART_AXIS_OPTIONS = [
-  {label: 'Count', value: 'event_count'},
-  {label: 'Users', value: 'user_count'},
+  {label: 'count', value: 'count(id)'},
+  {label: 'users', value: 'count_unique(user)'},
 ];
 
 type EventsProps = {
@@ -61,6 +61,17 @@ export default class Events extends React.Component<EventsProps> {
     const {organization, eventView, location, router} = this.props;
     const query = location.query.query || '';
 
+    // Make option set and add the default options in.
+    const yAxisOptions = uniqBy(
+      eventView
+        .getAggregateFields()
+        .map((field: Field) => {
+          return {label: field.title, value: field.field};
+        })
+        .concat(CHART_AXIS_OPTIONS),
+      'value'
+    );
+
     return (
       <React.Fragment>
         <Panel>
@@ -71,7 +82,7 @@ export default class Events extends React.Component<EventsProps> {
                 query={eventView.getEventsAPIPayload(location).query}
                 organization={organization}
                 showLegend
-                yAxisOptions={CHART_AXIS_OPTIONS}
+                yAxisOptions={yAxisOptions}
               />
             ),
             fixed: 'events chart',
@@ -83,7 +94,7 @@ export default class Events extends React.Component<EventsProps> {
           onSearch={this.handleSearch}
         />
         <Container hasTags={eventView.tags.length > 0}>
-          <Table organization={organization} location={location} />
+          <Table organization={organization} eventView={eventView} location={location} />
           {this.renderTagsTable()}
         </Container>
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
index 282bae7cc2..21507ae264 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
@@ -82,7 +82,6 @@ class EventsV2 extends React.Component<Props> {
   render() {
     const {organization, location, router} = this.props;
     const eventSlug = getFirstQueryString(location.query, 'eventSlug');
-
     const eventView = EventView.fromLocation(location);
 
     const hasQuery =
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 5c8459a84d..a66c898bfa 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -18,13 +18,13 @@ import {TableData} from './types';
 type TableProps = {
   api: Client;
   location: Location;
+  eventView: EventView;
   organization: Organization;
 };
 type TableState = {
   isLoading: boolean;
   error: null | string;
 
-  eventView: EventView;
   pageLinks: null | string;
 
   tableData: TableData | null | undefined;
@@ -40,27 +40,19 @@ type TableState = {
  * Table is maintained and controlled
  */
 class Table extends React.PureComponent<TableProps, TableState> {
-  static getDerivedStateFromProps(props: TableProps, state: TableState): TableState {
-    return {
-      ...state,
-      eventView: EventView.fromLocation(props.location),
-    };
-  }
-
   state: TableState = {
     isLoading: true,
     error: null,
 
-    eventView: EventView.fromLocation(this.props.location),
     pageLinks: null,
     tableData: null,
     tagKeys: null,
   };
 
   componentDidMount() {
-    const {location} = this.props;
+    const {location, eventView} = this.props;
 
-    if (!this.state.eventView.isValid()) {
+    if (!eventView.isValid()) {
       const nextEventView = EventView.fromEventViewv1(DEFAULT_EVENT_VIEW_V1);
 
       browserHistory.replace({
@@ -73,21 +65,21 @@ class Table extends React.PureComponent<TableProps, TableState> {
     this.fetchData();
   }
 
-  componentDidUpdate(prevProps: TableProps, prevState: TableState) {
-    if (!this.state.isLoading && this.shouldRefetchData(prevProps, prevState)) {
+  componentDidUpdate(prevProps: TableProps) {
+    if (!this.state.isLoading && this.shouldRefetchData(prevProps)) {
       this.fetchData();
     }
   }
 
-  shouldRefetchData = (prevProps: TableProps, prevState: TableState): boolean => {
-    const thisAPIPayload = this.state.eventView.getEventsAPIPayload(this.props.location);
-    const otherAPIPayload = prevState.eventView.getEventsAPIPayload(prevProps.location);
+  shouldRefetchData = (prevProps: TableProps): boolean => {
+    const thisAPIPayload = this.props.eventView.getEventsAPIPayload(this.props.location);
+    const otherAPIPayload = prevProps.eventView.getEventsAPIPayload(prevProps.location);
 
     return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
   };
 
   fetchData = () => {
-    const {organization, location} = this.props;
+    const {eventView, organization, location} = this.props;
     const url = `/organizations/${organization.slug}/eventsv2/`;
 
     this.setState({isLoading: true});
@@ -96,7 +88,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
       .requestPromise(url, {
         method: 'GET',
         includeAllArgs: true,
-        query: this.state.eventView.getEventsAPIPayload(location),
+        query: eventView.getEventsAPIPayload(location),
       })
       .then(([data, _, jqXHR]) => {
         this.setState(prevState => {
@@ -125,7 +117,8 @@ class Table extends React.PureComponent<TableProps, TableState> {
   };
 
   render() {
-    const {pageLinks, eventView, tableData, tagKeys, isLoading, error} = this.state;
+    const {eventView} = this.props;
+    const {pageLinks, tableData, tagKeys, isLoading, error} = this.state;
 
     return (
       <Container>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 4d3029798e..472c5e3736 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -50,6 +50,15 @@ export function hasAggregateField(eventView: EventView): boolean {
     );
 }
 
+/**
+ * Check if a field name looks like an aggregate function or known aggregate alias.
+ */
+export function isAggregateField(field: string): boolean {
+  return (
+    AGGREGATE_ALIASES.includes(field as any) || field.match(AGGREGATE_PATTERN) !== null
+  );
+}
+
 /**
  * Return a location object for the current pathname
  * with a query string reflected the provided tag.
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index f2e2813b07..1375f754fe 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -7,6 +7,7 @@ import {
   getFieldRenderer,
   getAggregateAlias,
   getEventTagSearchUrl,
+  isAggregateField,
   decodeColumnOrder,
   pushEventViewToLocation,
 } from 'app/views/eventsV2/utils';
@@ -403,3 +404,18 @@ describe('pushEventViewToLocation', function() {
     });
   });
 });
+
+describe('isAggregateField', function() {
+  it('detects aliases', function() {
+    expect(isAggregateField('p888')).toBe(false);
+    expect(isAggregateField('other_field')).toBe(false);
+    expect(isAggregateField('p75')).toBe(true);
+    expect(isAggregateField('last_seen')).toBe(true);
+  });
+
+  it('detects functions', function() {
+    expect(isAggregateField('thing(')).toBe(false);
+    expect(isAggregateField('count()')).toBe(true);
+    expect(isAggregateField('unique_count(user)')).toBe(true);
+  });
+});
