commit 5c35ad846e5fae7890be61d34ad9a64f89bd9996
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Sep 25 20:03:49 2018 +0200

    feat: Added relay trust and pii config to org/project settings (#9811)
    
    * feat: Added relay trust and simple relay pii config field to admin
    
    * fix: Add trustedRelays to API response
    
    * fix: Show PII config in project settings
    
    * test: Add the usual unit tests
    
    * fix: Capitalize placeholder
    
    * feat: Add simple JSON validation to PII config setting
    
    * feat: Serverside featuregating of trusted relays
    
    * feat: Serverside featuregating of relay pii config
    
    * fix: Fix project details test
    
    * fix: Fix organization details test

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index d1b2d60dab..a84317ece2 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -42,6 +42,7 @@ ORG_OPTIONS = (
      bool, org_serializers.STORE_CRASH_REPORTS_DEFAULT),
     ('scrubIPAddresses', 'sentry:require_scrub_ip_address',
      bool, org_serializers.REQUIRE_SCRUB_IP_ADDRESS_DEFAULT),
+    ('trustedRelays', 'sentry:trusted-relays', list, org_serializers.TRUSTED_RELAYS_DEFAULT),
 )
 
 delete_logger = logging.getLogger('sentry.deletions.api')
@@ -94,6 +95,7 @@ class OrganizationSerializer(serializers.Serializer):
     scrapeJavaScript = serializers.BooleanField(required=False)
     isEarlyAdopter = serializers.BooleanField(required=False)
     require2FA = serializers.BooleanField(required=False)
+    trustedRelays = ListField(child=serializers.CharField(), required=False)
 
     @memoize
     def _has_legacy_rate_limits(self):
@@ -156,6 +158,23 @@ class OrganizationSerializer(serializers.Serializer):
                 'Cannot require two-factor authentication with SAML SSO enabled')
         return attrs
 
+    def validate_trustedRelays(self, attrs, source):
+        if not attrs[source]:
+            return attrs
+
+        from sentry import features
+
+        organization = self.context['organization']
+        request = self.context["request"]
+        has_relays = features.has('organizations:relay',
+                                  organization,
+                                  actor=request.user)
+        if not has_relays:
+            raise serializers.ValidationError(
+                'Organization does not have the relay feature enabled'
+            )
+        return attrs
+
     def validate_accountRateLimit(self, attrs, source):
         if not self._has_legacy_rate_limits:
             raise serializers.ValidationError(
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index b497a96ea7..9c8b0c4f5c 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -94,6 +94,7 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
     sensitiveFields = ListField(child=serializers.CharField(), required=False)
     safeFields = ListField(child=serializers.CharField(), required=False)
     storeCrashReports = serializers.BooleanField(required=False)
+    relayPiiConfig = serializers.CharField(required=False)
     scrubIPAddresses = serializers.BooleanField(required=False)
     scrapeJavaScript = serializers.BooleanField(required=False)
     allowedDomains = ListField(child=OriginField(), required=False)
@@ -147,6 +148,23 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
             )
         return attrs
 
+    def validate_relayPiiConfig(self, attrs, source):
+        if not attrs[source]:
+            return attrs
+
+        from sentry import features
+
+        organization = self.context['project'].organization
+        request = self.context["request"]
+        has_relays = features.has('organizations:relay',
+                                  organization,
+                                  actor=request.user)
+        if not has_relays:
+            raise serializers.ValidationError(
+                'Organization does not have the relay feature enabled'
+            )
+        return attrs
+
 
 class RelaxedProjectPermission(ProjectPermission):
     scope_map = {
@@ -353,6 +371,10 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         if result.get('storeCrashReports') is not None:
             if project.update_option('sentry:store_crash_reports', result['storeCrashReports']):
                 changed_proj_settings['sentry:store_crash_reports'] = result['storeCrashReports']
+        if result.get('relayPiiConfig') is not None:
+            if project.update_option('sentry:relay_pii_config', result['relayPiiConfig']):
+                changed_proj_settings['sentry:relay_pii_config'] = result['relayPiiConfig'].strip(
+                ) or None
         if 'defaultEnvironment' in result:
             if result['defaultEnvironment'] is None:
                 project.delete_option('sentry:default_environment')
@@ -408,6 +430,9 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             if 'sentry:store_crash_reports' in options:
                 project.update_option('sentry:store_crash_reports', bool(
                     options['sentry:store_crash_reports']))
+            if 'sentry:relay_pii_config' in options:
+                project.update_option('sentry:relay_pii_config',
+                                      options['sentry:relay_pii_config'].strip() or None)
             if 'sentry:sensitive_fields' in options:
                 project.update_option(
                     'sentry:sensitive_fields',
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index a0d2c32d24..67a8b8fdbc 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -22,6 +22,7 @@ SAFE_FIELDS_DEFAULT = None
 STORE_CRASH_REPORTS_DEFAULT = False
 REQUIRE_SCRUB_IP_ADDRESS_DEFAULT = False
 SCRAPE_JAVASCRIPT_DEFAULT = True
+TRUSTED_RELAYS_DEFAULT = None
 
 
 @register(Organization)
@@ -208,6 +209,7 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             'storeCrashReports': bool(obj.get_option('sentry:store_crash_reports', STORE_CRASH_REPORTS_DEFAULT)),
             'scrubIPAddresses': bool(obj.get_option('sentry:require_scrub_ip_address', REQUIRE_SCRUB_IP_ADDRESS_DEFAULT)),
             'scrapeJavaScript': bool(obj.get_option('sentry:scrape_javascript', SCRAPE_JAVASCRIPT_DEFAULT)),
+            'trustedRelays': obj.get_option('sentry:trusted-relays', TRUSTED_RELAYS_DEFAULT) or [],
         })
         context['teams'] = serialize(team_list, user, TeamSerializer())
         context['projects'] = serialize(project_list, user, ProjectSummarySerializer())
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index b50b136b4f..070c50f215 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -307,7 +307,7 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             'firstEvent': obj.first_event,
             'platform': obj.platform,
             'platforms': attrs['platforms'],
-            'latestDeploys': attrs['deploys']
+            'latestDeploys': attrs['deploys'],
         }
         if 'stats' in attrs:
             context['stats'] = attrs['stats']
@@ -336,6 +336,7 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
             'sentry:token_header',
             'sentry:verify_ssl',
             'sentry:scrub_ip_address',
+            'sentry:relay_pii_config',
             'feedback:branding',
             'digests:mail:minimum_delay',
             'digests:mail:maximum_delay',
@@ -486,12 +487,10 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                         if plugin.has_project_conf()
                     ], user, PluginSerializer(obj)
                 ),
-                'platforms':
-                attrs['platforms'],
-                'processingIssues':
-                attrs['processing_issues'],
-                'defaultEnvironment':
-                attrs['options'].get('sentry:default_environment'),
+                'platforms': attrs['platforms'],
+                'processingIssues': attrs['processing_issues'],
+                'defaultEnvironment': attrs['options'].get('sentry:default_environment'),
+                'relayPiiConfig': attrs['options'].get('sentry:relay_pii_config'),
             }
         )
         return data
diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index 9bc020d6f8..989ed51775 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import re
 import six
 import uuid
+import json
 
 from datetime import datetime
 from pytz import utc
@@ -57,6 +58,16 @@ def _generate_pii_config(project, org_options):
     }
 
 
+def get_pii_config(project, org_options):
+    value = project.get_option('sentry:relay_pii_config')
+    if value is not None:
+        try:
+            return json.loads(value)
+        except (TypeError, ValueError):
+            return None
+    return _generate_pii_config(project, org_options)
+
+
 def get_project_options(project):
     """Returns a dict containing the config for a project for the sentry relay"""
     project_keys = ProjectKey.objects.filter(
@@ -82,7 +93,7 @@ def get_project_options(project):
         'config': {
             'allowedDomains': project.get_option('sentry:origins', ['*']),
             'trustedRelays': org_options.get('sentry:trusted-relays', []),
-            'piiConfig': _generate_pii_config(project, org_options),
+            'piiConfig': get_pii_config(project, org_options),
         },
     }
     return rv
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 3b9c03d97d..69b855d048 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -210,6 +210,21 @@ const formGroups = [
         ),
         visible: ({features}) => features.has('event-attachments'),
       },
+      {
+        name: 'trustedRelays',
+        type: 'string',
+        multiline: true,
+        autosize: true,
+        maxRows: 10,
+        placeholder: t('Paste the relay public keys here'),
+        label: t('Trusted Relays'),
+        help: t(
+          'The list of relay public keys that should be trusted. Any relay in this list will be permitted to access org and project configs. Separate multiple entries with a newline.'
+        ),
+        getValue: val => extractMultilineFields(val),
+        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+        visible: ({features}) => features.has('relay'),
+      },
     ],
   },
 ];
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 96218ea145..cfa04a3cb8 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -186,6 +186,32 @@ export const fields = {
     ),
     visible: ({features}) => features.has('event-attachments'),
   },
+  relayPiiConfig: {
+    name: 'relayPiiConfig',
+    type: 'string',
+    label: t('Custom Relay PII Config'),
+    placeholder: t(
+      'Paste a relay JSON PII config here. Leave empty to generate a default based on the above settings.'
+    ),
+    multiline: true,
+    autosize: true,
+    maxRows: 10,
+    help: tct(
+      'If you put a custom JSON relay PII config here it overrides the default generated config.  This is pushed to all trusted relays.  [learn_more:Learn more]',
+      {
+        learn_more: <a href="https://docs.sentry.io/relay/pii-config/" />,
+      }
+    ),
+    visible: ({features}) => features.has('relay'),
+    validate: ({id, form}) => {
+      try {
+        JSON.parse(form[id]);
+      } catch (e) {
+        return [[id, e.toString().replace(/^SyntaxError: JSON.parse: /, '')]];
+      }
+      return [];
+    },
+  },
 
   allowedDomains: {
     name: 'allowedDomains',
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index 1b485a297d..d496430593 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -276,6 +276,7 @@ class ProjectGeneralSettings extends AsyncView {
               fields.sensitiveFields,
               fields.safeFields,
               fields.storeCrashReports,
+              fields.relayPiiConfig,
             ]}
           />
 
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index c30064a684..2ea98f6a35 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -245,6 +245,48 @@ class OrganizationUpdateTest(APITestCase):
         assert u'to {}'.format(data['scrubIPAddresses']) in log.data['scrubIPAddresses']
         assert u'to {}'.format(data['scrapeJavaScript']) in log.data['scrapeJavaScript']
 
+    def test_setting_trusted_relays_forbidden(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-organization-details', kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        data = {
+            'trustedRelays': [u'key1', u'key2']
+        }
+
+        response = self.client.put(url, data=data)
+        assert response.status_code == 400
+        assert 'feature' in response.content
+
+    def test_setting_trusted_relays(self):
+        org = self.create_organization(owner=self.user)
+        AuditLogEntry.objects.filter(organization=org).delete()
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-organization-details', kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        data = {'trustedRelays': [u'key1', u'key2']}
+
+        with self.feature("organizations:relay"):
+            response = self.client.put(url, data=data)
+            assert response.status_code == 200
+
+        option, = OrganizationOption.objects.filter(
+            organization=org,
+            key="sentry:trusted-relays"
+        )
+
+        assert option.value == data['trustedRelays']
+        log = AuditLogEntry.objects.get(organization=org)
+        assert 'to {}'.format(data['trustedRelays']) in log.data['trustedRelays']
+
     def test_setting_legacy_rate_limits(self):
         org = self.create_organization(owner=self.user)
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index e8280ea3e9..aa6f20abc4 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -224,6 +224,7 @@ class ProjectUpdateTest(APITestCase):
             'sentry:sensitive_fields': ['foo', 'bar'],
             'sentry:safe_fields': ['token'],
             'sentry:store_crash_reports': False,
+            'sentry:relay_pii_config': '{"applications": {"freeform": []}}',
             'sentry:csp_ignored_sources_defaults': False,
             'sentry:csp_ignored_sources': 'foo\nbar',
             'filters:blacklisted_ips': '127.0.0.1\n198.51.100.0',
@@ -263,6 +264,10 @@ class ProjectUpdateTest(APITestCase):
         assert project.get_option(
             'sentry:store_crash_reports',
             False) == options['sentry:store_crash_reports']
+
+        assert project.get_option(
+            'sentry:relay_pii_config',
+            '') == options['sentry:relay_pii_config']
         assert AuditLogEntry.objects.filter(
             organization=project.organization,
             event=AuditLogEntryEvent.PROJECT_EDIT,
@@ -487,6 +492,25 @@ class ProjectUpdateTest(APITestCase):
         assert self.project.get_option('sentry:store_crash_reports') is True
         assert resp.data['storeCrashReports'] is True
 
+    def test_relay_pii_config(self):
+        with self.feature("organizations:relay"):
+            value = '{"applications": {"freeform": []}}'
+            resp = self.client.put(self.path, data={
+                'relayPiiConfig': value
+            })
+            assert resp.status_code == 200, resp.content
+            assert self.project.get_option('sentry:relay_pii_config') == value
+            assert resp.data['relayPiiConfig'] == value
+
+    def test_relay_pii_config_forbidden(self):
+        value = '{"applications": {"freeform": []}}'
+        resp = self.client.put(self.path, data={
+            'relayPiiConfig': value
+        })
+        assert resp.status_code == 400
+        assert 'feature' in resp.content
+        assert self.project.get_option('sentry:relay_pii_config') is None
+
     def test_sensitive_fields(self):
         resp = self.client.put(self.path, data={
             'sensitiveFields': ['foobar.com', 'https://example.com'],
