commit 51bf165aa47468a3d3201a059367c275d840b13e
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Jan 31 16:42:36 2020 -0800

    refs(incidents): Remove incident suspects commits
    
    This code is no longer used, so we may as well remove. This removes all related code other than the
    model. We modify the model to have no foreign keys, which allows us to safely remove the model, and
    then the db table, in subsequent prs.
    
    Migration SQL: Notice that it only removes the foreign key to incidents, since there was never a db
    level constraint on commits to begin with.
    ```
    BEGIN;
    --
    -- Alter field commit on incidentsuspectcommit
    --
    --
    -- Alter field incident on incidentsuspectcommit
    --
    SET CONSTRAINTS "sentry_incid_incident_id_5c60addfbe11bb86_fk_sentry_incident_id" IMMEDIATE; ALTER TABLE "sentry_incidentsuspectcommit" DROP CONSTRAINT "sentry_incid_incident_id_5c60addfbe11bb86_fk_sentry_incident_id";
    COMMIT;
    ```

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index e88cb9e5f0..575c1f2d0f 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0029_discover_query_upgrade
+sentry: 0030_auto_20200201_0039
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 4c361038a8..48e2784f18 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -35,7 +35,7 @@ from sentry.incidents.models import (
     TimeSeriesSnapshot,
 )
 from sentry.snuba.discover import zerofill
-from sentry.models import Commit, Integration, Project, Release
+from sentry.models import Integration, Project
 from sentry.snuba.models import QueryAggregations, QueryDatasets
 from sentry.snuba.subscriptions import (
     bulk_create_snuba_subscriptions,
@@ -43,7 +43,6 @@ from sentry.snuba.subscriptions import (
     bulk_update_snuba_subscriptions,
     query_aggregation_to_snuba,
 )
-from sentry.utils.committers import get_event_file_committers
 from sentry.utils.snuba import bulk_raw_query, raw_query, SnubaQueryParams, SnubaTSResult
 
 MAX_INITIAL_INCIDENT_PERIOD = timedelta(days=7)
@@ -126,7 +125,6 @@ def create_incident(
             incident_type=type.value,
         )
 
-    tasks.calculate_incident_suspects.apply_async(kwargs={"incident_id": incident.id})
     return incident
 
 
@@ -559,33 +557,6 @@ def get_incident_activity(incident):
     )
 
 
-def get_incident_suspects(incident, projects):
-    return Commit.objects.filter(
-        incidentsuspectcommit__incident=incident, releasecommit__release__projects__in=projects
-    ).distinct()
-
-
-def get_incident_suspect_commits(incident):
-    groups = list(incident.groups.all())
-    # For now, we want to track whether we've seen a commit before to avoid
-    # duplicates. We'll probably use a commit being seen across multiple groups
-    # as a way to increase score in the future.
-    seen = set()
-    for group in groups:
-        event = group.get_latest_event_for_environments()
-        try:
-            committers = get_event_file_committers(group.project, event)
-        except (Release.DoesNotExist, Commit.DoesNotExist):
-            continue
-
-        for committer in committers:
-            for (commit, _) in committer["commits"]:
-                if commit.id in seen:
-                    continue
-                seen.add(commit.id)
-                yield commit.id
-
-
 class AlertRuleNameAlreadyUsedError(Exception):
     pass
 
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index bdf7f62290..5c21149437 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -9,6 +9,7 @@ from enum import Enum
 
 from sentry.db.models import FlexibleForeignKey, Model, UUIDField, OneToOneCascadeDeletes
 from sentry.db.models import ArrayField, sane_repr
+from sentry.db.models.fields.bounded import BoundedBigIntegerField
 from sentry.db.models.manager import BaseManager
 from sentry.models import Team, User
 from sentry.snuba.models import QueryAggregations
@@ -219,8 +220,8 @@ class IncidentSubscription(Model):
 class IncidentSuspectCommit(Model):
     __core__ = True
 
-    incident = FlexibleForeignKey("sentry.Incident", db_index=False)
-    commit = FlexibleForeignKey("sentry.Commit", db_constraint=False)
+    incident = BoundedBigIntegerField(db_column="incident_id")
+    commit = BoundedBigIntegerField(db_column="commit_id", db_index=True)
     order = models.SmallIntegerField()
 
     class Meta:
diff --git a/src/sentry/incidents/receivers.py b/src/sentry/incidents/receivers.py
index 5aa3ac2e6e..31b6595d99 100644
--- a/src/sentry/incidents/receivers.py
+++ b/src/sentry/incidents/receivers.py
@@ -3,22 +3,8 @@ from __future__ import absolute_import
 from django.db.models.signals import post_save
 from django.dispatch import receiver
 
-from sentry.incidents.models import AlertRule, IncidentSuspectCommit
+from sentry.incidents.models import AlertRule
 from sentry.models.project import Project
-from sentry.signals import release_commits_updated
-
-
-@release_commits_updated.connect(weak=False)
-def handle_release_commits_updated(removed_commit_ids, added_commit_ids, **kwargs):
-    from sentry.incidents.tasks import calculate_incident_suspects
-
-    incident_ids = (
-        IncidentSuspectCommit.objects.filter(commit_id__in=removed_commit_ids | added_commit_ids)
-        .values_list("incident_id", flat=True)
-        .distinct()
-    )
-    for incident_id in incident_ids:
-        calculate_incident_suspects.apply_async(kwargs={"incident_id": incident_id})
 
 
 @receiver(post_save, sender=Project, weak=False)
diff --git a/src/sentry/incidents/tasks.py b/src/sentry/incidents/tasks.py
index e7807ad0f0..bbebebdc5e 100644
--- a/src/sentry/incidents/tasks.py
+++ b/src/sentry/incidents/tasks.py
@@ -3,11 +3,9 @@ from __future__ import absolute_import
 from uuid import uuid4
 
 from django.core.urlresolvers import reverse
-from django.db import transaction
 from six.moves.urllib.parse import urlencode
 
 from sentry import deletions
-from sentry.app import locks
 from sentry.auth.access import from_user
 from sentry.exceptions import DeleteAborted
 from sentry.incidents.models import (
@@ -18,7 +16,6 @@ from sentry.incidents.models import (
     IncidentActivity,
     IncidentActivityType,
     IncidentStatus,
-    IncidentSuspectCommit,
 )
 from sentry.models import Project
 from sentry.snuba.query_subscription_consumer import register_subscriber
@@ -27,7 +24,6 @@ from sentry.utils.email import MessageBuilder
 from sentry.utils.http import absolute_uri
 from sentry.utils.linksign import generate_signed_link
 from sentry.utils import metrics
-from sentry.utils.retries import TimedRetryPolicy
 
 INCIDENTS_SNUBA_SUBSCRIPTION_TYPE = "incidents"
 
@@ -107,24 +103,6 @@ def build_activity_context(activity, user):
     }
 
 
-@instrumented_task(name="sentry.incidents.tasks.calculate_incident_suspects", queue="incidents")
-def calculate_incident_suspects(incident_id):
-    from sentry.incidents.logic import get_incident_suspect_commits
-
-    lock = locks.get(u"incident:suspects:{}".format(incident_id), duration=60 * 10)
-    with TimedRetryPolicy(60)(lock.acquire):
-        incident = Incident.objects.get(id=incident_id)
-        suspect_commits = get_incident_suspect_commits(incident)
-        with transaction.atomic():
-            IncidentSuspectCommit.objects.filter(incident=incident).delete()
-            IncidentSuspectCommit.objects.bulk_create(
-                [
-                    IncidentSuspectCommit(incident=incident, commit_id=commit_id, order=i)
-                    for i, commit_id in enumerate(suspect_commits)
-                ]
-            )
-
-
 @instrumented_task(
     name="sentry.incidents.tasks.delete_alert_rule",
     queue="cleanup",
diff --git a/src/sentry/migrations/0030_auto_20200201_0039.py b/src/sentry/migrations/0030_auto_20200201_0039.py
new file mode 100644
index 0000000000..3dd820581f
--- /dev/null
+++ b/src/sentry/migrations/0030_auto_20200201_0039.py
@@ -0,0 +1,43 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.27 on 2020-02-01 00:39
+from __future__ import unicode_literals
+
+from django.db import migrations
+import sentry.db.models.fields.bounded
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+
+    dependencies = [
+        ('sentry', '0029_discover_query_upgrade'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='incidentsuspectcommit',
+            name='commit',
+            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'commit_id', db_index=True),
+        ),
+        migrations.AlterField(
+            model_name='incidentsuspectcommit',
+            name='incident',
+            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'incident_id'),
+        ),
+    ]
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 759a3ade67..37c580d597 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -22,7 +22,7 @@ from sentry.db.models import (
 
 from sentry.constants import BAD_RELEASE_CHARS, COMMIT_RANGE_DELIMITER
 from sentry.models import CommitFileChange
-from sentry.signals import issue_resolved, release_commits_updated
+from sentry.signals import issue_resolved
 from sentry.utils import metrics
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
@@ -372,9 +372,6 @@ class Release(Model):
             with transaction.atomic():
                 # TODO(dcramer): would be good to optimize the logic to avoid these
                 # deletes but not overly important
-                initial_commit_ids = set(
-                    ReleaseCommit.objects.filter(release=self).values_list("commit_id", flat=True)
-                )
                 ReleaseCommit.objects.filter(release=self).delete()
 
                 authors = {}
@@ -508,16 +505,6 @@ class Release(Model):
             .select_related("commit")
             .values("commit_id", "commit__key")
         )
-        final_commit_ids = set(rc["commit_id"] for rc in release_commits)
-        removed_commit_ids = initial_commit_ids - final_commit_ids
-        added_commit_ids = final_commit_ids - initial_commit_ids
-        if removed_commit_ids or added_commit_ids:
-            release_commits_updated.send_robust(
-                release=self,
-                removed_commit_ids=removed_commit_ids,
-                added_commit_ids=added_commit_ids,
-                sender=self.__class__,
-            )
 
         commit_resolutions = list(
             GroupLink.objects.filter(
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 91f732603d..21acc27955 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -90,9 +90,6 @@ data_scrubber_enabled = BetterSignal(providing_args=["organization"])
 alert_rule_created = BetterSignal(providing_args=["project", "rule", "user"])
 repo_linked = BetterSignal(providing_args=["repo", "user"])
 release_created = BetterSignal(providing_args=["release"])
-release_commits_updated = BetterSignal(
-    providing_args=["release", "removed_commit_ids", "added_commit_ids"]
-)
 deploy_created = BetterSignal(providing_args=["deploy"])
 ownership_rule_created = BetterSignal(providing_args=["project"])
 issue_ignored = BetterSignal(providing_args=["project", "user", "group_list", "activity_data"])
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 837c5c012c..77d17269f5 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -44,8 +44,6 @@ from sentry.incidents.logic import (
     get_incident_aggregates,
     get_incident_event_stats,
     get_incident_subscribers,
-    get_incident_suspect_commits,
-    get_incident_suspects,
     get_triggers_for_alert_rule,
     INCIDENT_START_ROLLUP,
     ProjectsNotAssociatedWithAlertRuleError,
@@ -71,20 +69,16 @@ from sentry.incidents.models import (
     IncidentSnapshot,
     IncidentStatus,
     IncidentSubscription,
-    IncidentSuspectCommit,
     IncidentType,
 )
 from sentry.snuba.models import QueryAggregations, QueryDatasets, QuerySubscription
-from sentry.models.commit import Commit
 from sentry.models.integration import Integration
-from sentry.models.repository import Repository
 from sentry.testutils import TestCase, SnubaTestCase
-from sentry.testutils.helpers.datetime import iso_format, before_now
+from sentry.testutils.helpers.datetime import iso_format
 
 
 class CreateIncidentTest(TestCase):
     record_event = patcher("sentry.analytics.base.Analytics.record_event")
-    calculate_incident_suspects = patcher("sentry.incidents.tasks.calculate_incident_suspects")
 
     def test_simple(self):
         incident_type = IncidentType.CREATED
@@ -152,9 +146,6 @@ class CreateIncidentTest(TestCase):
             "incident_id": six.text_type(incident.id),
             "incident_type": six.text_type(IncidentType.CREATED.value),
         }
-        self.calculate_incident_suspects.apply_async.assert_called_once_with(
-            kwargs={"incident_id": incident.id}
-        )
 
 
 @freeze_time()
@@ -568,136 +559,6 @@ class GetIncidentSubscribersTest(TestCase, BaseIncidentsTest):
         assert list(get_incident_subscribers(incident)) == [subscription]
 
 
-class GetIncidentSuspectsTest(TestCase, BaseIncidentsTest):
-    def test_simple(self):
-        release = self.create_release(project=self.project, version="v12")
-
-        self.repo = Repository.objects.create(
-            organization_id=self.organization.id, name=self.organization.id
-        )
-        commit_id = "a" * 40
-        release.set_commits(
-            [
-                {
-                    "id": commit_id,
-                    "repository": self.repo.name,
-                    "author_email": "bob@example.com",
-                    "author_name": "Bob",
-                }
-            ]
-        )
-        incident = self.create_incident(self.organization)
-        commit = Commit.objects.get(releasecommit__release=release)
-        IncidentSuspectCommit.objects.create(incident=incident, commit=commit, order=1)
-        assert [commit] == list(get_incident_suspects(incident, [self.project]))
-        assert [] == list(get_incident_suspects(incident, []))
-
-
-class GetIncidentSuspectCommitsTest(TestCase, BaseIncidentsTest):
-    def test_simple(self):
-        release = self.create_release(project=self.project, version="v12")
-
-        included_commits = set([letter * 40 for letter in ("a", "b", "c", "d")])
-        commit_iter = iter(included_commits)
-
-        one_min_ago = iso_format(before_now(minutes=1))
-        event = self.store_event(
-            data={
-                "fingerprint": ["group-1"],
-                "message": "Kaboom!",
-                "platform": "python",
-                "stacktrace": {
-                    "frames": [
-                        {"filename": "sentry/tasks.py"},
-                        {"filename": "sentry/models/release.py"},
-                    ]
-                },
-                "release": release.version,
-                "timestamp": one_min_ago,
-            },
-            project_id=self.project.id,
-        )
-        group = event.group
-        self.repo = Repository.objects.create(
-            organization_id=self.organization.id, name=self.organization.id
-        )
-        release.set_commits(
-            [
-                {
-                    "id": next(commit_iter),
-                    "repository": self.repo.name,
-                    "author_email": "bob@example.com",
-                    "author_name": "Bob",
-                    "message": "i fixed a bug",
-                    "patch_set": [{"path": "src/sentry/models/release.py", "type": "M"}],
-                },
-                {
-                    "id": next(commit_iter),
-                    "repository": self.repo.name,
-                    "author_email": "bob@example.com",
-                    "author_name": "Bob",
-                    "message": "i fixed a bug",
-                    "patch_set": [{"path": "src/sentry/models/release.py", "type": "M"}],
-                },
-                {
-                    "id": next(commit_iter),
-                    "repository": self.repo.name,
-                    "author_email": "ross@example.com",
-                    "author_name": "Ross",
-                    "message": "i fixed a bug",
-                    "patch_set": [{"path": "src/sentry/models/release.py", "type": "M"}],
-                },
-            ]
-        )
-        release_2 = self.create_release(project=self.project, version="v13")
-        event_2 = self.store_event(
-            data={
-                "fingerprint": ["group-2"],
-                "message": "Kaboom!",
-                "platform": "python",
-                "stacktrace": {
-                    "frames": [
-                        {"filename": "sentry/tasks.py"},
-                        {"filename": "sentry/models/group.py"},
-                    ]
-                },
-                "release": release_2.version,
-                "timestamp": one_min_ago,
-            },
-            project_id=self.project.id,
-        )
-        group_2 = event_2.group
-        excluded_id = "z" * 40
-        release_2.set_commits(
-            [
-                {
-                    "id": next(commit_iter),
-                    "repository": self.repo.name,
-                    "author_email": "hello@example.com",
-                    "author_name": "Hello",
-                    "message": "i fixed a bug",
-                    "patch_set": [{"path": "src/sentry/models/group.py", "type": "M"}],
-                },
-                {
-                    "id": excluded_id,
-                    "repository": self.repo.name,
-                    "author_email": "hello@example.com",
-                    "author_name": "Hello",
-                    "message": "i fixed a bug",
-                    "patch_set": [{"path": "src/sentry/models/not_group.py", "type": "M"}],
-                },
-            ]
-        )
-
-        commit_ids = (
-            Commit.objects.filter(releasecommit__release__in=[release, release_2])
-            .exclude(key=excluded_id)
-            .values_list("id", flat=True)
-        )
-        incident = self.create_incident(self.organization, groups=[group, group_2])
-        assert set(get_incident_suspect_commits(incident)) == set(commit_ids)
-
-
 @freeze_time()
 class CreateIncidentSnapshotTest(TestCase, BaseIncidentsTest):
     def test(self):
diff --git a/tests/sentry/incidents/test_receivers.py b/tests/sentry/incidents/test_receivers.py
index 78f1dcad4a..6c409e2ab4 100644
--- a/tests/sentry/incidents/test_receivers.py
+++ b/tests/sentry/incidents/test_receivers.py
@@ -1,46 +1,9 @@
 from __future__ import absolute_import
 
-from sentry.incidents.models import IncidentSuspectCommit
-from sentry.models.commit import Commit
-from sentry.models.release import Release
-from sentry.models.releasecommit import ReleaseCommit
-from sentry.models.repository import Repository
-from sentry.signals import release_commits_updated
 from sentry.snuba.models import QuerySubscription
 from sentry.testutils import TestCase
 
 
-class HandleReleaseCommitsUpdatedTest(TestCase):
-    def test(self):
-        release = self.create_release(project=self.project, version="something")
-        self.repo = Repository.objects.create(
-            organization_id=self.organization.id, name=self.organization.id
-        )
-        release.set_commits(
-            [
-                {
-                    "id": "a" * 40,
-                    "repository": self.repo.name,
-                    "author_email": "bob@example.com",
-                    "author_name": "Bob",
-                }
-            ]
-        )
-        commit = Commit.objects.get(releasecommit__release=release)
-
-        incident = self.create_incident()
-        ReleaseCommit.objects.filter(release=release).delete()
-        IncidentSuspectCommit.objects.create(incident=incident, commit=commit, order=1)
-        with self.tasks():
-            release_commits_updated.send_robust(
-                release=release,
-                removed_commit_ids=set([commit.id]),
-                added_commit_ids=set([]),
-                sender=Release,
-            )
-            assert not IncidentSuspectCommit.objects.filter(incident=incident).exists()
-
-
 class AddProjectToIncludeAllRulesTest(TestCase):
     def test_include_all_projects_enabled(self):
         alert_rule = self.create_alert_rule(include_all_projects=True)
diff --git a/tests/sentry/incidents/test_tasks.py b/tests/sentry/incidents/test_tasks.py
index 9182844334..bd12c77152 100644
--- a/tests/sentry/incidents/test_tasks.py
+++ b/tests/sentry/incidents/test_tasks.py
@@ -18,18 +18,14 @@ from sentry.incidents.models import (
     IncidentActivityType,
     IncidentStatus,
     IncidentSubscription,
-    IncidentSuspectCommit,
 )
 from sentry.incidents.tasks import (
     build_activity_context,
-    calculate_incident_suspects,
     generate_incident_activity_email,
     handle_trigger_action,
     send_subscriber_notifications,
 )
-from sentry.models import Commit, Repository
 from sentry.testutils import TestCase
-from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.utils.linksign import generate_signed_link
 from sentry.utils.http import absolute_uri
 
@@ -149,43 +145,6 @@ class TestBuildActivityContext(BaseIncidentActivityTest, TestCase):
         )
 
 
-class CalculateIncidentSuspectsTest(TestCase):
-    def test_simple(self):
-        release = self.create_release(project=self.project, version="v12")
-        event = self.store_event(
-            data={
-                "timestamp": iso_format(before_now(minutes=1)),
-                "fingerprint": ["group-1"],
-                "message": "Kaboom!",
-                "platform": "python",
-                "stacktrace": {"frames": [{"filename": "sentry/models/release.py"}]},
-                "release": release.version,
-            },
-            project_id=self.project.id,
-        )
-        group = event.group
-        self.repo = Repository.objects.create(
-            organization_id=self.organization.id, name=self.organization.id
-        )
-        release.set_commits(
-            [
-                {
-                    "id": "a" * 40,
-                    "repository": self.repo.name,
-                    "author_email": "bob@example.com",
-                    "author_name": "Bob",
-                    "message": "i fixed a bug",
-                    "patch_set": [{"path": "src/sentry/models/release.py", "type": "M"}],
-                }
-            ]
-        )
-
-        commit = Commit.objects.filter(releasecommit__release__in=[release])
-        incident = self.create_incident(self.organization, groups=[group])
-        calculate_incident_suspects(incident.id)
-        assert IncidentSuspectCommit.objects.filter(incident=incident, commit__in=commit).exists()
-
-
 class HandleTriggerActionTest(TestCase):
     metrics = patcher("sentry.incidents.tasks.metrics")
 
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index 1599c0883f..1d01ac383f 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -28,7 +28,6 @@ from sentry.models import (
     ReleaseProjectEnvironment,
     Repository,
 )
-from sentry.signals import release_commits_updated
 from sentry.utils.strings import truncatechars
 
 from sentry.testutils import TestCase, SetRefsTestCase
@@ -499,38 +498,6 @@ class SetCommitsTestCase(TestCase):
 
         assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
 
-    def test_release_commits_updated(self):
-        org = self.create_organization()
-        project = self.create_project(organization=org)
-        release = self.create_release(user=self.user, project=project)
-        repo = Repository.objects.get(organization_id=org.id)
-        removed_commit = ReleaseCommit.objects.get(release=release).commit
-        added_commit = Commit.objects.create(
-            organization_id=org.id,
-            repository_id=repo.id,
-            message="Something",
-            key="alksdflskdfjsldkfajsflkslk",
-        )
-
-        release_result = []
-        added = set()
-        removed = set()
-
-        def dummy_signal_handler(release, added_commit_ids, removed_commit_ids, **kwargs):
-            release_result.append(release)
-            added.update(added_commit_ids)
-            removed.update(removed_commit_ids)
-
-        release_commits_updated.connect(dummy_signal_handler)
-        release.set_commits([{"id": added_commit.key, "repository": repo.name}])
-        assert ReleaseCommit.objects.filter(commit=added_commit, release=release).exists()
-        assert not ReleaseCommit.objects.filter(commit=removed_commit, release=release).exists()
-        assert release_result[0] == release
-        assert added == set([added_commit.id])
-        assert removed == set([removed_commit.id])
-
-        release_commits_updated.disconnect(dummy_signal_handler)
-
     def test_long_email(self):
         org = self.create_organization()
         project = self.create_project(organization=org, name="foo")
