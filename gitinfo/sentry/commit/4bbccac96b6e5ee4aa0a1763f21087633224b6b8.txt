commit 4bbccac96b6e5ee4aa0a1763f21087633224b6b8
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Mar 6 11:36:07 2018 -0800

    feat(environments): Search bar supports excluding the environment tag (#7466)

diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 5d569cf24c..8e173a2416 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -87,6 +87,7 @@ class StreamFilters extends React.Component {
                 query={query || ''}
                 onSearch={onSearch}
                 disabled={isSearchDisabled}
+                excludeEnvironment={true}
               />
               <a
                 className="btn btn-default toggle-stream-sidebar"
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index be71bb83a3..d63f1ee029 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -13,6 +13,7 @@ import ApiMixin from '../../mixins/apiMixin';
 import {t} from '../../locale';
 
 import SearchDropdown from './searchDropdown';
+import OrganizationState from '../../mixins/organizationState';
 
 const SearchBar = createReactClass({
   displayName: 'SearchBar',
@@ -20,18 +21,23 @@ const SearchBar = createReactClass({
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
-
     defaultQuery: PropTypes.string,
     query: PropTypes.string,
     defaultSearchItems: PropTypes.array.isRequired,
     disabled: PropTypes.bool,
     placeholder: PropTypes.string,
-
-    onQueryChange: PropTypes.func,
     onSearch: PropTypes.func,
+    // If true, excludes the environment tag from the autocompletion list
+    // This is because we don't want to treat environment as a tag in some places
+    // such as the stream view where it is a top level concept
+    excludeEnvironment: PropTypes.bool,
   },
 
-  mixins: [ApiMixin, Reflux.listenTo(MemberListStore, 'onMemberListStoreChange')],
+  mixins: [
+    ApiMixin,
+    OrganizationState,
+    Reflux.listenTo(MemberListStore, 'onMemberListStoreChange'),
+  ],
 
   statics: {
     /**
@@ -59,8 +65,7 @@ const SearchBar = createReactClass({
       defaultQuery: '',
       query: null,
       onSearch: function() {},
-      onQueryChange: function() {},
-
+      excludeEnvironment: false,
       defaultSearchItems: [
         {
           title: t('Tag'),
@@ -107,6 +112,8 @@ const SearchBar = createReactClass({
   },
 
   getInitialState() {
+    const hasEnvironmentsFeature = this.getFeatures().has('environments');
+
     return {
       query: this.props.query !== null ? this.props.query : this.props.defaultQuery,
 
@@ -119,6 +126,7 @@ const SearchBar = createReactClass({
 
       dropdownVisible: false,
       loading: false,
+      hasEnvironmentsFeature,
     };
   },
 
@@ -183,9 +191,17 @@ const SearchBar = createReactClass({
    * e.g. ['is:', 'assigned:', 'url:', 'release:']
    */
   getTagKeys: function(query) {
-    return TagStore.getTagKeys()
+    const allKeys = TagStore.getTagKeys()
       .map(key => key + ':')
       .filter(key => key.indexOf(query) > -1);
+
+    // If the environment feature is active and excludeEnvironment = true
+    // then remove the environment key
+    if (this.state.hasEnvironmentsFeature && this.props.excludeEnvironment) {
+      return allKeys.filter(key => key !== 'environment:');
+    } else {
+      return allKeys;
+    }
   },
 
   /**
@@ -201,6 +217,7 @@ const SearchBar = createReactClass({
     });
 
     let {orgId, projectId} = this.props;
+
     this.api.request(`/projects/${orgId}/${projectId}/tags/${tag.key}/values/`, {
       data: {
         query,
@@ -307,8 +324,18 @@ const SearchBar = createReactClass({
       });
 
       let tag = TagStore.getTag(tagName);
+
       if (!tag) return undefined;
 
+      // Ignore the environment tag if the feature is active and excludeEnvironment = true
+      if (
+        this.state.hasEnvironmentsFeature &&
+        this.props.excludeEnvironment &&
+        tagName === 'environment'
+      ) {
+        return undefined;
+      }
+
       return void (tag.predefined ? this.getPredefinedTagValues : this.getTagValues)(
         tag,
         query,
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 7939dd391a..53d4274ae1 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -675,6 +675,7 @@ window.TestStubs = {
     return [
       {key: 'browser', name: 'Browser', canDelete: true},
       {key: 'device', name: 'Device', canDelete: true},
+      {key: 'url', name: 'URL', canDelete: true},
       {key: 'environment', name: 'Environment', canDelete: false},
     ];
   },
diff --git a/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
index ce7ee77fac..0b2d1eac90 100644
--- a/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
@@ -33,7 +33,7 @@ exports[`ProjectTags renders 1`] = `
   margin-bottom: 30px;
 }
 
-.glamor-53 {
+.glamor-63 {
   background: #fff;
   border: 1px solid;
   margin-bottom: NaNpx;
@@ -211,7 +211,7 @@ exports[`ProjectTags renders 1`] = `
         </TextBlock>
         <Panel>
           <div
-            className="glamor-53 glamor-54"
+            className="glamor-63 glamor-64"
           >
             <PanelHeader>
               <StyledPanelHeader>
@@ -567,6 +567,153 @@ exports[`ProjectTags renders 1`] = `
                     </Base>
                   </StyledPanelItem>
                 </PanelItem>
+                <PanelItem
+                  align="center"
+                  className="ref-tag-row"
+                  key="url"
+                  p={0}
+                >
+                  <StyledPanelItem
+                    align="center"
+                    className="ref-tag-row"
+                    p={0}
+                  >
+                    <Base
+                      align="center"
+                      className="ref-tag-row glamor-29 glamor-30"
+                      p={0}
+                    >
+                      <div
+                        className="ref-tag-row glamor-29 glamor-30"
+                        is={null}
+                      >
+                        <Box
+                          align="flex-end"
+                          flex="1"
+                          p={2}
+                        >
+                          <Base
+                            align="flex-end"
+                            className="glamor-25"
+                            flex="1"
+                            p={2}
+                          >
+                            <div
+                              className="glamor-25"
+                              is={null}
+                            >
+                              <span>
+                                URL
+                              </span>
+                              <Description>
+                                <span
+                                  className="glamor-23 glamor-24"
+                                >
+                                  url
+                                </span>
+                              </Description>
+                            </div>
+                          </Base>
+                        </Box>
+                        <Flex
+                          align="center"
+                          p={2}
+                        >
+                          <Base
+                            align="center"
+                            className="glamor-27"
+                            p={2}
+                          >
+                            <div
+                              className="glamor-27"
+                              is={null}
+                            >
+                              <LinkWithConfirmation
+                                className="btn btn-sm btn-default"
+                                disabled={false}
+                                message="Are you sure you want to remove this tag?"
+                                onConfirm={[Function]}
+                                title="Remove tag?"
+                              >
+                                <Confirm
+                                  cancelText="Cancel"
+                                  confirmText="Confirm"
+                                  disabled={false}
+                                  message="Are you sure you want to remove this tag?"
+                                  onConfirm={[Function]}
+                                  priority="primary"
+                                >
+                                  <a
+                                    className="btn btn-sm btn-default"
+                                    disabled={false}
+                                    onClick={[Function]}
+                                    title="Remove tag?"
+                                  >
+                                    <span
+                                      className="icon icon-trash"
+                                    />
+                                  </a>
+                                  <Modal
+                                    animation={false}
+                                    autoFocus={true}
+                                    backdrop={true}
+                                    bsClass="modal"
+                                    dialogComponentClass={[Function]}
+                                    enforceFocus={true}
+                                    keyboard={true}
+                                    manager={
+                                      ModalManager {
+                                        "add": [Function],
+                                        "containers": Array [],
+                                        "data": Array [],
+                                        "handleContainerOverflow": true,
+                                        "hideSiblingNodes": true,
+                                        "isTopModal": [Function],
+                                        "modals": Array [],
+                                        "remove": [Function],
+                                      }
+                                    }
+                                    onHide={[Function]}
+                                    renderBackdrop={[Function]}
+                                    restoreFocus={true}
+                                    show={false}
+                                  >
+                                    <Modal
+                                      autoFocus={true}
+                                      backdrop={true}
+                                      backdropClassName="modal-backdrop"
+                                      containerClassName="modal-open"
+                                      enforceFocus={true}
+                                      keyboard={true}
+                                      manager={
+                                        ModalManager {
+                                          "add": [Function],
+                                          "containers": Array [],
+                                          "data": Array [],
+                                          "handleContainerOverflow": true,
+                                          "hideSiblingNodes": true,
+                                          "isTopModal": [Function],
+                                          "modals": Array [],
+                                          "remove": [Function],
+                                        }
+                                      }
+                                      onEntering={[Function]}
+                                      onExited={[Function]}
+                                      onHide={[Function]}
+                                      renderBackdrop={[Function]}
+                                      restoreFocus={true}
+                                      show={false}
+                                    />
+                                  </Modal>
+                                </Confirm>
+                              </LinkWithConfirmation>
+                            </div>
+                          </Base>
+                        </Flex>
+                      </div>
+                    </Base>
+                  </StyledPanelItem>
+                </PanelItem>
                 <PanelItem
                   align="center"
                   className="ref-tag-row"
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index e8b2208158..591d678624 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -1,22 +1,37 @@
 import React from 'react';
 import {shallow, mount} from 'enzyme';
 
-import {Client} from 'app/api';
 import SearchBar from 'app/views/stream/searchBar';
 import TagStore from 'app/stores/tagStore';
 
 describe('SearchBar', function() {
   let sandbox;
+  let options;
+  let urlTagValuesMock;
+  let environmentTagValuesMock;
 
   beforeEach(function() {
     TagStore.reset();
+    TagStore.onLoadTagsSuccess(TestStubs.Tags());
 
     sandbox = sinon.sandbox.create();
 
-    sandbox.stub(Client.prototype, 'request');
+    options = {
+      context: {organization: {id: '123', features: ['environments']}},
+    };
+
+    urlTagValuesMock = MockApiClient.addMockResponse({
+      url: '/projects/123/456/tags/url/values/',
+      body: [],
+    });
+    environmentTagValuesMock = MockApiClient.addMockResponse({
+      url: '/projects/123/456/tags/environment/values/',
+      body: [],
+    });
   });
 
   afterEach(function() {
+    MockApiClient.clearMockResponses();
     sandbox.restore();
   });
 
@@ -59,7 +74,7 @@ describe('SearchBar', function() {
         query: 'is:unresolved ruby',
         defaultQuery: 'is:unresolved',
       };
-      let searchBar = shallow(<SearchBar {...props} />).instance();
+      let searchBar = shallow(<SearchBar {...props} />, options).instance();
 
       searchBar.clearSearch();
 
@@ -74,7 +89,7 @@ describe('SearchBar', function() {
         defaultQuery: 'is:unresolved',
         onSearch: sandbox.spy(),
       };
-      let searchBar = shallow(<SearchBar {...props} />).instance();
+      let searchBar = shallow(<SearchBar {...props} />, options).instance();
 
       searchBar.clearSearch();
 
@@ -87,7 +102,10 @@ describe('SearchBar', function() {
 
   describe('onQueryFocus()', function() {
     it('displays the drop down', function() {
-      let searchBar = shallow(<SearchBar orgId="123" projectId="456" />).instance();
+      let searchBar = shallow(
+        <SearchBar orgId="123" projectId="456" />,
+        options
+      ).instance();
       expect(searchBar.state.dropdownVisible).toBe(false);
 
       searchBar.onQueryFocus();
@@ -98,7 +116,10 @@ describe('SearchBar', function() {
 
   describe('onQueryBlur()', function() {
     it('hides the drop down', function() {
-      let searchBar = shallow(<SearchBar orgId="123" projectId="456" />).instance();
+      let searchBar = shallow(
+        <SearchBar orgId="123" projectId="456" />,
+        options
+      ).instance();
       searchBar.state.dropdownVisible = true;
 
       let clock = sandbox.useFakeTimers();
@@ -112,7 +133,7 @@ describe('SearchBar', function() {
   describe('onKeyUp()', function() {
     describe('escape', function() {
       it('blurs the input', function() {
-        let wrapper = shallow(<SearchBar orgId="123" projectId="456" />);
+        let wrapper = shallow(<SearchBar orgId="123" projectId="456" />, options);
         wrapper.setState({dropdownVisible: true});
 
         let instance = wrapper.instance();
@@ -129,7 +150,8 @@ describe('SearchBar', function() {
     it('invokes onSearch() when submitting the form', function() {
       let stubbedOnSearch = sandbox.spy();
       let wrapper = mount(
-        <SearchBar onSearch={stubbedOnSearch} orgId="123" projectId="456" />
+        <SearchBar onSearch={stubbedOnSearch} orgId="123" projectId="456" />,
+        options
       );
 
       wrapper.find('form').simulate('submit', {
@@ -146,7 +168,7 @@ describe('SearchBar', function() {
         query: 'is:unresolved',
         onSearch: sandbox.spy(),
       };
-      let wrapper = mount(<SearchBar {...props} />);
+      let wrapper = mount(<SearchBar {...props} />, options);
 
       wrapper.find('.search-clear-form').simulate('click');
 
@@ -164,18 +186,26 @@ describe('SearchBar', function() {
       query: '',
       defaultQuery: 'is:unresolved',
     };
-    let wrapper = mount(<SearchBar {...props} />);
+    let wrapper = mount(<SearchBar {...props} />, options);
     expect(wrapper.state('query')).toEqual('');
   });
 
   describe('updateAutoCompleteItems()', function() {
+    let clock;
+
+    beforeEach(function() {
+      clock = sandbox.useFakeTimers();
+    });
+    afterEach(function() {
+      clock.restore();
+    });
     it('sets state when empty', function() {
       let props = {
         orgId: '123',
         projectId: '456',
         query: '',
       };
-      let searchBar = mount(<SearchBar {...props} />).instance();
+      let searchBar = mount(<SearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
       expect(searchBar.state.searchTerm).toEqual('');
       expect(searchBar.state.searchItems).toEqual(searchBar.props.defaultSearchItems);
@@ -188,7 +218,7 @@ describe('SearchBar', function() {
         projectId: '456',
         query: 'fu',
       };
-      let searchBar = mount(<SearchBar {...props} />).instance();
+      let searchBar = mount(<SearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
       expect(searchBar.state.searchTerm).toEqual('fu');
       expect(searchBar.state.searchItems).toEqual([]);
@@ -201,8 +231,9 @@ describe('SearchBar', function() {
         projectId: '456',
         query: 'url:"fu"',
       };
-      let searchBar = mount(<SearchBar {...props} />).instance();
+      let searchBar = mount(<SearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
+      clock.tick(301);
       expect(searchBar.state.searchTerm).toEqual('"fu"');
       expect(searchBar.state.searchItems).toEqual([]);
       expect(searchBar.state.activeSearchItem).toEqual(0);
@@ -214,7 +245,7 @@ describe('SearchBar', function() {
         projectId: '456',
         query: 'is:unresolved fu',
       };
-      let searchBar = mount(<SearchBar {...props} />).instance();
+      let searchBar = mount(<SearchBar {...props} />, options).instance();
       searchBar.getCursorPosition = jest.fn();
       searchBar.getCursorPosition.mockReturnValue(15); // end of line
       searchBar.updateAutoCompleteItems();
@@ -229,11 +260,27 @@ describe('SearchBar', function() {
         projectId: '456',
         query: 'url:"http://example.com"',
       };
-      let searchBar = mount(<SearchBar {...props} />).instance();
+
+      let searchBar = mount(<SearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
       expect(searchBar.state.searchTerm).toEqual('"http://example.com"');
       expect(searchBar.state.searchItems).toEqual([]);
       expect(searchBar.state.activeSearchItem).toEqual(0);
+      clock.tick(301);
+      expect(urlTagValuesMock).toHaveBeenCalled();
+    });
+
+    it('does not request values when tag is environments', function() {
+      let props = {
+        orgId: '123',
+        projectId: '456',
+        query: 'environment:production',
+        excludeEnvironment: true,
+      };
+      let searchBar = mount(<SearchBar {...props} />, options).instance();
+      searchBar.updateAutoCompleteItems();
+      clock.tick(301);
+      expect(environmentTagValuesMock).not.toHaveBeenCalled();
     });
   });
 });
