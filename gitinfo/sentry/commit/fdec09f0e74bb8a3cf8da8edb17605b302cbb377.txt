commit fdec09f0e74bb8a3cf8da8edb17605b302cbb377
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jul 15 19:33:21 2013 -0700

    Remove unused events views and move replay url path

diff --git a/src/sentry/templates/sentry/partial/interfaces/http.html b/src/sentry/templates/sentry/partial/interfaces/http.html
index 6ab7b45062..e16bc64b1b 100644
--- a/src/sentry/templates/sentry/partial/interfaces/http.html
+++ b/src/sentry/templates/sentry/partial/interfaces/http.html
@@ -4,7 +4,7 @@
 <div class="module">
     <div class="page-header">
         {% if not is_public %}
-            <a href="{% url 'sentry-replay' event.team.slug event.project.slug event.id %}" class="btn small pull-right">{% trans "Replay this request" %}</a>
+            <a href="{% url 'sentry-replay' event.team.slug event.project.slug event.group_id event.id %}" class="btn small pull-right">{% trans "Replay this request" %}</a>
         {% endif %}
         <h2>{% trans "Request" %}</h2>
     </div>
diff --git a/src/sentry/web/frontend/events.py b/src/sentry/web/frontend/events.py
index 7b15a2f2a8..851e9971f4 100644
--- a/src/sentry/web/frontend/events.py
+++ b/src/sentry/web/frontend/events.py
@@ -5,65 +5,23 @@ sentry.web.frontend.events
 :copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-import datetime
-import logging
-
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
 from sentry.models import Event
-from sentry.filters import get_filters
 from sentry.replays import Replayer
 from sentry.utils.http import safe_urlencode
-from sentry.web.decorators import login_required, has_access, render_to_response
+from sentry.web.decorators import has_group_access, render_to_response
 from sentry.web.forms import ReplayForm
 
 
-@login_required
-@has_access
-def event_list(request, team, project):
-    filters = []
-    for cls in get_filters(Event, project):
-        try:
-            filters.append(cls(request, project))
-        except Exception, e:
-            logger = logging.getLogger('sentry.filters')
-            logger.exception('Error initializing filter %r: %s', cls, e)
-
-    event_list = Event.objects.filter(project=project).order_by('-datetime')
-
-    # TODO: implement separate API for messages
-    for filter_ in filters:
-        try:
-            if not filter_.is_set():
-                continue
-            event_list = filter_.get_query_set(event_list)
-        except Exception, e:
-            logger = logging.getLogger('sentry.filters')
-            logger.exception('Error processing filter %r: %s', cls, e)
-
-    today = datetime.date.today()
-
-    has_realtime = False
-
-    return render_to_response('sentry/events/event_list.html', {
-        'team': team,
-        'project': project,
-        'has_realtime': has_realtime,
-        'event_list': event_list,
-        'today': today,
-        'filters': filters,
-        'PAGE': 'stream',
-    }, request)
-
-
-@has_access
+@has_group_access
 @csrf_protect
-def replay_event(request, team, project, event_id, group_id=None):
+def replay_event(request, team, project, group, event_id):
     try:
-        event = Event.objects.get(pk=event_id)
+        event = Event.objects.get(group=group, id=event_id)
     except Event.DoesNotExist:
         return HttpResponseRedirect(reverse('sentry'))
 
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 8ed1c991c0..2b9d94129f 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -265,6 +265,8 @@ urlpatterns = patterns('',
         name='sentry-group-events-json'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/$', groups.group,
         name='sentry-group-event'),
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/replay/$', events.replay_event,
+        name='sentry-replay'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id_or_latest>(\d+|latest))/json/$', groups.group_event_details_json,
         name='sentry-group-event-json'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', groups.group_plugin_action,
@@ -273,10 +275,6 @@ urlpatterns = patterns('',
         name='sentry-group-tags'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/tags/(?P<tag_name>[^/]+)/$', groups.group_tag_details,
         name='sentry-group-tag-details'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/events/$', events.event_list,
-        name='sentry-events'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/events/(?P<event_id>\d+)/replay/$', events.replay_event,
-        name='sentry-replay'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/search/$', groups.search,
         name='sentry-search'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/$', alerts.alert_list,
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index c02d227355..42a4131a19 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -257,36 +257,21 @@ class ManageUsersTest(BaseViewTest):
         self.assertTemplateUsed(resp, 'sentry/admin/users/list.html')
 
 
-# class ReplayTest(BaseViewTest):
-#     @fixture
-#     def path(self):
-#         return reverse('sentry-replay', kwargs={
-#             'team_slug': self.team.slug,
-#             'project_id': self.project.slug,
-#             'group_id': self.group.id,
-#             'event_id': self.id,
-#         })
-
-#     def test_does_render(self):
-#         self.login()
-#         resp = self.client.get(self.id)
-#         self.assertEquals(resp.status_code, 200)
-#         self.assertTemplateUsed(resp, 'sentry/events/replay.html')
-
-
-class EventListTest(TestCase):
+class ReplayTest(BaseViewTest):
     @fixture
     def path(self):
-        return reverse('sentry-events', kwargs={
+        return reverse('sentry-replay', kwargs={
             'team_slug': self.team.slug,
-            'project_id': self.project.id,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+            'event_id': self.event.id,
         })
 
     def test_does_render(self):
-        self.login_as(self.user)
+        self.login()
         resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/events/event_list.html')
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/events/replay_request.html')
 
 
 class PermissionBase(TestCase):
