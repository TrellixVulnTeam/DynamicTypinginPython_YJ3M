commit 1bd69eee164cbe9de032e3a6a45e65c253a92443
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue May 12 22:14:56 2020 +0200

    feat(releases): Add improved support for release search (#18770)

diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index fcb665784f..820ad35123 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -1,7 +1,9 @@
 from __future__ import absolute_import
 
+import re
 import six
 from django.db import IntegrityError, transaction
+from django.db.models import Q
 from rest_framework.response import Response
 from rest_framework.exceptions import ParseError
 
@@ -37,6 +39,9 @@ def get_stats_period_detail(key, choices):
     return ERR_INVALID_STATS_PERIOD % (key, ", ".join("'%s'" % x for x in choices))
 
 
+_release_suffix = re.compile(r"^(.*)\s+\(([^)]+)\)\s*$")
+
+
 @scenario("CreateNewOrganizationReleaseWithRef")
 def create_new_org_release_ref_scenario(runner):
     runner.request(
@@ -201,7 +206,13 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
             )
 
         if query:
-            queryset = queryset.filter(version__istartswith=query)
+            query_q = Q(version__icontains=query)
+
+            suffix_match = _release_suffix.match(query)
+            if suffix_match is not None:
+                query_q |= Q(version__icontains="%s+%s" % suffix_match.groups())
+
+            queryset = queryset.filter(query_q)
 
         select_extra = {}
         sort_query = None
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 6aea90c84f..a59e9ba021 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -113,17 +113,52 @@ class OrganizationReleaseListTest(APITestCase):
         release2.add_project(project)
 
         url = reverse("sentry-api-0-organization-releases", kwargs={"organization_slug": org.slug})
-        response = self.client.get(url + "?query=foo", format="json")
+        response = self.client.get(url + "?query=oob", format="json")
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert response.data[0]["version"] == release.version
 
-        response = self.client.get(url + "?query=bar", format="json")
+        response = self.client.get(url + "?query=baz", format="json")
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 0
 
+    def test_query_filter_suffix(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+
+        project = self.create_project(teams=[team], organization=org)
+
+        self.create_member(teams=[team], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        release = Release.objects.create(
+            organization_id=org.id,
+            version="com.foo.BarApp@1.0+1234",
+            date_added=datetime(2013, 8, 13, 3, 8, 24, 880386),
+        )
+        release.add_project(project)
+
+        url = reverse("sentry-api-0-organization-releases", kwargs={"organization_slug": org.slug})
+        response = self.client.get(url + "?query=1.0+(1234)", format="json")
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]["version"] == release.version
+
+        url = reverse("sentry-api-0-organization-releases", kwargs={"organization_slug": org.slug})
+        response = self.client.get(url + "?query=1.0%2B1234", format="json")
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]["version"] == release.version
+
     def test_project_permissions(self):
         user = self.create_user(is_staff=False, is_superuser=False)
         org = self.create_organization()
