commit feb9c791db10ac7f5fbba8c6c9e7e3e05fc78084
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Aug 31 21:22:10 2015 +0200

    Various tweaks for the context data display, including auto quoting and improved multiline support.

diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index ee055768be..7805a08f04 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import jQuery from 'jquery';
 
-function looksLikeRepr(value) {
+function looksLikeObjectRepr(value) {
   var a = value[0];
   var z = value[value.length - 1];
   if (a == '<' && z == '>') {
@@ -16,6 +16,69 @@ function looksLikeRepr(value) {
   return false;
 }
 
+function looksLikeQuotedString(value) {
+  var a = value[0];
+  var z = value[value.length - 1];
+  if ((a === '"' || a === "'") && a === z) {
+    return true;
+  }
+  var match = value.match(/^[\w\d._-]+["']/);
+  if (match && match[0][match[0].length - 1] === z) {
+    return true;
+  }
+  return false;
+}
+
+function looksLikeMultiLineString(value) {
+  return !!value.match(/[\r\n]/);
+}
+
+function padNumbersInString(string) {
+  return string.replace(/(\d+)/g, function(num) {
+    var isNegative = false;
+    num = parseInt(num, 10);
+    if (num < 0) {
+      num *= -1;
+      isNegative = true;
+    }
+    var s = '0000000000000' + num;
+    s = s.substr(s.length - (isNegative ? 11 : 12));
+    if (isNegative) {
+      s = '-' + s;
+    }
+    return s;
+  });
+}
+
+function naturalSort(a, b) {
+  a = padNumbersInString(a);
+  b = padNumbersInString(b);
+  return a === b ? 0 : a < b ? -1 : 1;
+}
+
+function analyzeStringForRepr(value) {
+  var rv = {
+    preferredRepr: value,
+    isString: true,
+    isMultiLine: false,
+    quotedInPostprocessing: false
+  };
+
+  if (looksLikeObjectRepr(value)) {
+    rv.isString = false;
+  } else {
+    var isQuoted = looksLikeQuotedString(value);
+    rv.isMultiLine = looksLikeMultiLineString(value);
+
+    if (!isQuoted && !rv.isMultiLine) {
+      rv.quotedInPostprocessing = true;
+      rv.repr = JSON.stringify(value);
+    }
+  }
+
+  return rv;
+}
+
 
 var ContextData = React.createClass({
   propTypes: {
@@ -57,7 +120,14 @@ var ContextData = React.createClass({
       } else if (value === true || value === false) {
         return <span className="val-bool">{value ? 'True' : 'False'}</span>;
       } else if (typeof value === 'string' || value instanceof String) {
-        return <span className={looksLikeRepr(value) ? 'val-repr' : 'val-string'}>{value}</span>;
+        var valueInfo = analyzeStringForRepr(value);
+        return (
+          <span className={
+            (valueInfo.isString ? 'val-string' : 'val-repr') +
+            (valueInfo.quotedInPostprocessing ? ' val-auto-quoted' : '')
+            (valueInfo.isMultiLine ? ' val-string-multiline' : '')}>{
+              valueInfo.repr}</span>
+        );
       } else if (typeof value === 'number' || value instanceof Number) {
         return <span className="val-number">{value}</span>;
       } else if (value instanceof Array) {
@@ -79,6 +149,7 @@ var ContextData = React.createClass({
         );
       } else {
         var keys = Object.keys(value);
+        keys.sort(naturalSort);
         for (i = 0; i < keys.length; i++) {
           var key = keys[i];
           children.push(
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 4e90eb1361..a15f3e9f92 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1144,6 +1144,14 @@ pre.val, span.val {
   color: darken(@purple, 5);
 }
 
+.val-string.val-auto-quoted {
+  /* do we want to show this differently? */
+}
+
+.val-string-multiline {
+  color: darken(@teal, 5);
+}
+
 .val-repr {
   color: darken(@blue, 5);
 }
