commit ab448ee5838693411642f03ca4eb6535860c96dc
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Apr 20 12:00:39 2014 -0700

    Remove trends feature

diff --git a/CHANGES b/CHANGES
index 5857b6e3a9..f8e9fdfa22 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,9 +1,13 @@
 Version 7.0.0
 -------------
 
+Backwards Incompatible Changes
+==============================
+
 - The buffer API has been rewritten and the Redis buffer has had its performance greatly improved.
 - The UDP server has been removed. Threaded/async models are the preferred replacement.
 - The ``is_rate_limited`` plugin hook has been removed in favor of singular quota managers.
+- The trends feature has been removed until it can be reimplemented in a more scalable way.
 
 Version 6.4.0
 -------------
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 60ccbe24b9..ac6133bcfa 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -534,10 +534,6 @@ SENTRY_ALLOW_PUBLIC_PROJECTS = True
 # manually.
 SENTRY_ALLOW_REGISTRATION = True
 
-# Enable trend results. These can be expensive and are calculated in real-time.
-# When disabled they will be replaced w/ a default priority sort.
-SENTRY_USE_TRENDING = True
-
 # Default to not sending the Access-Control-Allow-Origin header on api/store
 SENTRY_ALLOW_ORIGIN = None
 
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index ecdefffd2e..75a71f94b1 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -34,8 +34,6 @@ SORT_OPTIONS = SortedDict((
     ('freq', _('Frequency')),
     ('tottime', _('Total Time Spent')),
     ('avgtime', _('Average Time Spent')),
-    ('accel_15', _('Trending: %(minutes)d minutes' % {'minutes': 15})),
-    ('accel_60', _('Trending: %(minutes)d minutes' % {'minutes': 60})),
 ))
 
 SORT_CLAUSES = {
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index a6121235b3..d614a2b906 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -636,77 +636,6 @@ class GroupManager(BaseManager, ChartMixin):
     def model_fields_clause(self):
         return ', '.join('sentry_groupedmessage."%s"' % (f.column,) for f in self.model._meta.fields)
 
-    def get_accelerated(self, project_ids, queryset=None, minutes=15):
-        if not project_ids:
-            return self.none()
-
-        if queryset is None:
-            queryset = self.filter(
-                project__in=project_ids,
-                status=STATUS_UNRESOLVED,
-            )
-        else:
-            queryset = queryset._clone()
-            queryset.query.select_related = False
-
-        normalization = float(MINUTE_NORMALIZATION)
-
-        assert minutes >= normalization
-
-        intervals = 8
-
-        engine = get_db_engine(queryset.db)
-        # We technically only support mysql and postgresql, since there seems to be no standard
-        # way to get the epoch from a datetime/interval
-        if engine.startswith('mysql'):
-            minute_clause = "interval %s minute"
-            epoch_clause = "unix_timestamp(utc_timestamp()) - unix_timestamp(mcbm.date)"
-            now_clause = 'utc_timestamp()'
-        else:
-            minute_clause = "interval '%s minutes'"
-            epoch_clause = "extract(epoch from now()) - extract(epoch from mcbm.date)"
-            now_clause = 'now()'
-
-        sql, params = queryset.query.get_compiler(queryset.db).as_sql()
-        before_select, after_select = str(sql).split('SELECT ', 1)
-        after_where = after_select.split(' WHERE ', 1)[1]
-
-        # Ensure we remove any ordering clause
-        after_where = after_where.split(' ORDER BY ')[0]
-
-        query = """
-        SELECT ((mcbm.times_seen + 1) / ((%(epoch_clause)s) / 60)) / (COALESCE(z.rate, 0) + 1) as sort_value,
-               %(fields)s
-        FROM sentry_groupedmessage
-        INNER JOIN sentry_messagecountbyminute as mcbm
-            ON (sentry_groupedmessage.id = mcbm.group_id)
-        LEFT JOIN (SELECT a.group_id, (SUM(a.times_seen)) / COUNT(a.times_seen) / %(norm)f as rate
-            FROM sentry_messagecountbyminute as a
-            WHERE a.date >=  %(now)s - %(max_time)s
-            AND a.date < %(now)s - %(min_time)s
-            AND a.project_id IN (%(project_ids)s)
-            GROUP BY a.group_id) as z
-        ON z.group_id = mcbm.group_id
-        WHERE mcbm.date >= %(now)s - %(min_time)s
-        AND mcbm.date < %(now)s - %(offset_time)s
-        AND mcbm.times_seen > 0
-        AND ((mcbm.times_seen + 1) / ((%(epoch_clause)s) / 60)) > (COALESCE(z.rate, 0) + 1)
-        AND %(after_where)s
-        GROUP BY z.rate, mcbm.times_seen, mcbm.date, %(fields)s
-        ORDER BY sort_value DESC
-        """ % dict(
-            fields=self.model_fields_clause,
-            after_where=after_where,
-            offset_time=minute_clause % (1,),
-            min_time=minute_clause % (minutes + 1,),
-            max_time=minute_clause % (minutes * intervals + 1,),
-            norm=normalization,
-            epoch_clause=epoch_clause,
-            now=now_clause,
-            project_ids=', '.join((str(int(x)) for x in project_ids)),
-        )
-        return RawQuerySet(self, query, params)
-
 
 class RawQuerySet(object):
     def __init__(self, queryset, query, params):
diff --git a/src/sentry/models/alert.py b/src/sentry/models/alert.py
index c29d61932c..5c799f7b5d 100644
--- a/src/sentry/models/alert.py
+++ b/src/sentry/models/alert.py
@@ -13,13 +13,10 @@ from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.constants import (
-    STATUS_RESOLVED, STATUS_UNRESOLVED, MINUTE_NORMALIZATION
-)
+from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
 from sentry.db.models import (
     Model, GzippedDictField, BoundedPositiveIntegerField, sane_repr
 )
-from sentry.utils.db import has_trending
 from sentry.utils.http import absolute_uri
 
 
@@ -53,8 +50,6 @@ class Alert(Model):
 
     @classmethod
     def maybe_alert(cls, project_id, message, group_id=None):
-        from sentry.models import Group
-
         now = timezone.now()
         manager = cls.objects
         # We only create an alert based on:
@@ -78,15 +73,6 @@ class Alert(Model):
             message=message,
         )
 
-        if not group_id and has_trending():
-            # Capture the top 5 trending events at the time of this error
-            related_groups = Group.objects.get_accelerated([project_id], minutes=MINUTE_NORMALIZATION)[:5]
-            for group in related_groups:
-                AlertRelatedGroup.objects.create(
-                    group=group,
-                    alert=alert,
-                )
-
         return alert
 
     @property
diff --git a/src/sentry/templates/sentry/alerts/details.html b/src/sentry/templates/sentry/alerts/details.html
index 6a8bbde6df..9a54aa48f1 100644
--- a/src/sentry/templates/sentry/alerts/details.html
+++ b/src/sentry/templates/sentry/alerts/details.html
@@ -16,27 +16,6 @@
             </h2>
         </div>
         {{ alert.message|linebreaks }}
-
-        <div class="page-header">
-            <h3>{% trans "Related Events" %} <small>{% trans "Trending at time of alert" %}</small></h3>
-        </div>
-        {% if related_group_list %}
-            <div id="event_list"></div>
-
-            <p><small>{% trans "Note: All events represent their current state, not their value at the time of this alert." %}</small></p>
-
-            <script>
-            $(function(){
-                new app.GroupListView({
-                    className: 'group-list small',
-                    members: {{ related_group_list|to_json:request|safe }},
-                    id: "event_list"
-                });
-            });
-            </script>
-        {% else %}
-            <p>{% trans "No trends are available for this report." %}</p>
-        {% endif %}
     </section>
 {% endblock %}
 
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index f118aa1946..0aaa183a5f 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -59,11 +59,6 @@
                 <li class="divider"></li>
                 <li{% ifequal sort 'tottime' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=tottime">{{ SORT_OPTIONS.tottime }}</a></li>
                 <li{% ifequal sort 'avgtime' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=avgtime">{{ SORT_OPTIONS.avgtime }}</a></li>
-                {% if HAS_TRENDING %}
-                    <li class="divider"></li>
-                    <li{% ifequal sort 'accel_15' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=accel_15">{{ SORT_OPTIONS.accel_15 }}</a></li>
-                    <li{% ifequal sort 'accel_60' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=accel_60">{{ SORT_OPTIONS.accel_60 }}</a></li>
-                {% endif %}
             </ul>
         </div>
         <div class="btn-group">
diff --git a/src/sentry/utils/db.py b/src/sentry/utils/db.py
index 64b3a53209..b1379f2e7c 100644
--- a/src/sentry/utils/db.py
+++ b/src/sentry/utils/db.py
@@ -23,12 +23,6 @@ def get_db_engine(alias='default'):
     return value.rsplit('.', 1)[-1]
 
 
-def has_trending(alias='default'):
-    # we only support trend queries for postgres to db optimization
-    # issues in mysql, and lack of anything useful in sqlite
-    return settings.SENTRY_USE_TRENDING and get_db_engine('default').startswith('postgres')
-
-
 def has_charts(db):
     engine = get_db_engine(db)
     if engine.startswith('sqlite'):
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 030ebb2c14..05db333c1b 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -44,7 +44,6 @@ from sentry.plugins import plugins
 from sentry.quotas.base import RateLimit
 from sentry.utils import json
 from sentry.utils.cache import cache
-from sentry.utils.db import has_trending
 from sentry.utils.javascript import to_json
 from sentry.utils.http import is_valid_origin, get_origins, is_same_domain
 from sentry.utils.safe import safe_execute
@@ -656,18 +655,13 @@ def get_group_trends(request, team=None, project=None):
         status=0,
     )
 
-    if has_trending():
-        group_list = list(Group.objects.get_accelerated(project_dict, base_qs, minutes=(
-            minutes
-        ))[:limit])
-    else:
-        cutoff = datetime.timedelta(minutes=minutes)
-        cutoff_dt = timezone.now() - cutoff
+    cutoff = datetime.timedelta(minutes=minutes)
+    cutoff_dt = timezone.now() - cutoff
 
-        group_list = list(base_qs.filter(
-            status=STATUS_UNRESOLVED,
-            last_seen__gte=cutoff_dt
-        ).extra(select={'sort_value': 'score'}).order_by('-score')[:limit])
+    group_list = list(base_qs.filter(
+        status=STATUS_UNRESOLVED,
+        last_seen__gte=cutoff_dt
+    ).extra(select={'sort_value': 'score'}).order_by('-score')[:limit])
 
     for group in group_list:
         group._project_cache = project_dict.get(group.project_id)
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 318ddf57e6..1f75ad6d65 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -39,7 +39,7 @@ from sentry.permissions import can_admin_group, can_create_projects
 from sentry.plugins import plugins
 from sentry.utils import json
 from sentry.utils.dates import parse_date
-from sentry.utils.db import has_trending, get_db_engine
+from sentry.utils.db import get_db_engine
 from sentry.web.decorators import has_access, has_group_access, login_required
 from sentry.web.forms import NewNoteForm
 from sentry.web.helpers import render_to_response, group_is_public
@@ -114,9 +114,6 @@ def _get_group_list(request, project):
     if sort != request.session.get('streamsort'):
         request.session['streamsort'] = sort
 
-    if sort.startswith('accel_') and not has_trending():
-        sort = DEFAULT_SORT_OPTION
-
     engine = get_db_engine('default')
     if engine.startswith('sqlite'):
         score_clause = SQLITE_SORT_CLAUSES.get(sort)
@@ -140,9 +137,6 @@ def _get_group_list(request, project):
         event_list = event_list.filter(time_spent_count__gt=0)
     elif sort == 'avgtime':
         event_list = event_list.filter(time_spent_count__gt=0)
-    elif sort.startswith('accel_'):
-        event_list = Group.objects.get_accelerated(
-            [project.id], event_list, minutes=int(sort.split('_', 1)[1]))
 
     if score_clause:
         event_list = event_list.extra(
@@ -373,7 +367,6 @@ def group_list(request, team, project):
         'sort_label': sort_label,
         'filters': response['filters'],
         'SORT_OPTIONS': SORT_OPTIONS,
-        'HAS_TRENDING': has_trending(),
     }, request)
 
 
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 3a8bd3fcae..0d4ff68828 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -4,7 +4,6 @@ from __future__ import absolute_import
 
 import datetime
 import mock
-import pytest
 
 from django.utils import timezone
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
@@ -14,7 +13,6 @@ from sentry.models import (
     Event, Group, Project, GroupCountByMinute, ProjectCountByMinute,
     Team, EventMapping, User, AccessGroup, GroupTagValue
 )
-from sentry.utils.db import has_trending  # NOQA
 from sentry.testutils import TestCase
 
 
@@ -147,23 +145,6 @@ class SentryManagerTest(TestCase):
         self.assertEquals(res.times_seen, 1)
 
 
-@pytest.mark.skipif('not has_trending()')
-class TrendsTest(TestCase):
-    def test_accelerated_works_at_all(self):
-        now = timezone.now() - datetime.timedelta(minutes=5)
-        project = Project.objects.all()[0]
-        group = Group.objects.create(status=0, project=project, message='foo', checksum='a' * 32)
-        group2 = Group.objects.create(status=0, project=project, message='foo', checksum='b' * 32)
-        GroupCountByMinute.objects.create(project=project, group=group, date=now, times_seen=50)
-        GroupCountByMinute.objects.create(project=project, group=group2, date=now, times_seen=40)
-        base_qs = Group.objects.filter(
-            status=0,
-        )
-
-        results = list(Group.objects.get_accelerated([project.id], base_qs)[:25])
-        self.assertEquals(results, [group, group2])
-
-
 class GetChecksumFromEventTest(TestCase):
     @mock.patch('sentry.interfaces.Stacktrace.get_composite_hash')
     @mock.patch('sentry.interfaces.Http.get_composite_hash')
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 5aa1c6caaf..b5456c28e7 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -2,8 +2,6 @@
 
 from __future__ import absolute_import
 
-import mock
-
 from datetime import timedelta
 from django.core import mail
 from django.core.urlresolvers import reverse
@@ -11,12 +9,11 @@ from django.db import connection
 from django.utils import timezone
 from exam import fixture
 
-from sentry.constants import MINUTE_NORMALIZATION
 from sentry.db.models.fields.node import NodeData
 from sentry.models import (
     Project, ProjectKey, Group, Event, Team,
     GroupTagValue, GroupCountByMinute, TagValue, PendingTeamMember,
-    LostPasswordHash, Alert, User)
+    LostPasswordHash, User)
 from sentry.testutils import TestCase
 from sentry.utils.compat import pickle
 from sentry.utils.strings import compress
@@ -127,24 +124,6 @@ class LostPasswordTest(TestCase):
             assert url in msg.body
 
 
-class AlertTest(TestCase):
-    @fixture
-    def params(self):
-        return {
-            'project_id': self.project.id,
-            'message': 'This is a test message',
-        }
-
-    @mock.patch('sentry.models.alert.has_trending', mock.Mock(return_value=True))
-    @mock.patch('sentry.models.Group.objects.get_accelerated')
-    def test_does_add_trending_events(self, get_accelerated):
-        get_accelerated.return_value = [self.group]
-        alert = Alert.maybe_alert(**self.params)
-        assert alert is not None
-        get_accelerated.assert_called_once_with([self.project.id], minutes=MINUTE_NORMALIZATION)
-        assert list(alert.related_groups.all()) == [self.group]
-
-
 class GroupIsOverResolveAgeTest(TestCase):
     def test_simple(self):
         group = self.group
