commit 14c545c96eefc2c74eb6ac191133b3ab006a46da
Author: Dan Fuller <dfuller@sentry.io>
Date:   Mon Jun 3 14:01:51 2019 -0700

    feat(api): Add endpoint to return suspect causes of an incident (SEN-578)
    
    Initial version of this endpoint. Returns a list of suspects in format
    ```
    {'type': '<type>', 'data': <arbitrary json blob for each type>}
    ```
    
    At the moment we only return commits. The blob in `data` is similar to what we return for each
    commit on the suspect commits endpoint, but we also embed the author into the commit info:
    ```
    {'type': 'commit', 'data': <commit_data>, 'author': <author>}
    ```
    
    Will be slow for the moment since we just calculate these for each group sequentially. Will follow
    up with speed improvements (either caching or making the calculations fast).

diff --git a/src/sentry/api/endpoints/organization_incident_suspects_index.py b/src/sentry/api/endpoints/organization_incident_suspects_index.py
new file mode 100644
index 0000000000..2a99227515
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_incident_suspects_index.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from itertools import islice
+
+from sentry.api.bases.incident import (
+    IncidentEndpoint,
+    IncidentPermission,
+)
+from sentry.incidents.logic import get_incident_suspects
+
+
+class OrganizationIncidentSuspectsIndexEndpoint(IncidentEndpoint):
+    permission_classes = (IncidentPermission, )
+
+    def get(self, request, organization, incident):
+        """
+        Fetches potential causes of an Incident.
+        ````````````````````````````````````````
+        Fetches potential causes of an Incident. Currently this is just suspect
+        commits for all related Groups.
+        :auth: required
+        """
+
+        # Only fetch suspects for projects that the user has access to
+        projects = [
+            project for project in incident.projects.all()
+            if request.access.has_project_access(project)
+        ]
+        suspects = islice(get_incident_suspects(incident, projects), 10)
+
+        # TODO: For now just hard coding this format, as we add in more formats
+        # we'll handle this in a more robust way.
+        return self.respond([{'type': 'commit', 'data': suspect} for suspect in suspects])
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index c82ddc8db1..1a559f4666 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -86,6 +86,7 @@ from .endpoints.organization_incident_comment_index import OrganizationIncidentC
 from .endpoints.organization_incident_comment_details import OrganizationIncidentCommentDetailsEndpoint
 from .endpoints.organization_incident_index import OrganizationIncidentIndexEndpoint
 from .endpoints.organization_incident_subscription_index import OrganizationIncidentSubscriptionIndexEndpoint
+from .endpoints.organization_incident_suspects_index import OrganizationIncidentSuspectsIndexEndpoint
 from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
 from .endpoints.organization_issues_resolved_in_release import OrganizationIssuesResolvedInReleaseEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
@@ -458,6 +459,11 @@ urlpatterns = patterns(
         OrganizationIncidentSubscriptionIndexEndpoint.as_view(),
         name='sentry-api-0-organization-incident-subscription-index'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/suspects/$',
+        OrganizationIncidentSuspectsIndexEndpoint.as_view(),
+        name='sentry-api-0-organization-incident-suspect-index'
+    ),
 
     # Organizations
 
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 7c2c87bbea..baf7c14b9d 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -19,6 +19,7 @@ from sentry.incidents.models import (
     TimeSeriesSnapshot,
 )
 from sentry.incidents.tasks import send_subscriber_notifications
+from sentry.utils.committers import get_event_file_committers
 from sentry.utils.snuba import (
     raw_query,
     SnubaTSResult,
@@ -290,3 +291,23 @@ def get_incident_activity(incident):
     return IncidentActivity.objects.filter(
         incident=incident,
     ).select_related('user', 'event_stats_snapshot', 'incident')
+
+
+def get_incident_suspects(incident, projects):
+    groups = list(incident.groups.all().filter(project__in=projects))
+    # For now, we want to track whether we've seen a commit before to avoid
+    # duplicates. We'll probably use a commit being seen across multiple groups
+    # as a way to increase score in the future.
+    seen = set()
+    for group in groups:
+        event = group.get_latest_event_for_environments()
+        committers = get_event_file_committers(group.project, event)
+        for committer in committers:
+            author = committer['author']
+            for commit in committer['commits']:
+                commit['author'] = author
+                commit_key = (commit['repository']['id'], commit['id'])
+                if commit_key in seen:
+                    continue
+                seen.add(commit_key)
+                yield commit
diff --git a/tests/sentry/api/endpoints/test_organization_incident_suspects_index.py b/tests/sentry/api/endpoints/test_organization_incident_suspects_index.py
new file mode 100644
index 0000000000..b85aeac14f
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_incident_suspects_index.py
@@ -0,0 +1,102 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.models import Repository
+from sentry.testutils import APITestCase
+
+
+class OrganizationIncidentSuspectsListEndpointTest(APITestCase):
+    endpoint = 'sentry-api-0-organization-incident-suspect-index'
+    method = 'get'
+
+    @fixture
+    def organization(self):
+        return self.create_organization()
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    def test_simple(self):
+        self.create_member(
+            user=self.user,
+            organization=self.organization,
+            role='owner',
+            teams=[self.team],
+        )
+        self.login_as(self.user)
+        release = self.create_release(project=self.project, version='v12')
+
+        event = self.store_event(
+            data={
+                'fingerprint': ['group-1'],
+                'message': 'Kaboom!',
+                'platform': 'python',
+                'stacktrace': {
+                    'frames': [
+                        {
+                            "function": "set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
+                            "module": "sentry.models.release",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "sentry/models/release.py",
+                        }
+                    ]
+                },
+                'release': release.version,
+            },
+            project_id=self.project.id,
+        )
+        group = event.group
+        self.repo = Repository.objects.create(
+            organization_id=self.organization.id,
+            name=self.organization.id,
+        )
+        commit_id = 'a' * 40
+        release.set_commits([
+            {
+                'id': commit_id,
+                'repository': self.repo.name,
+                'author_email': 'bob@example.com',
+                'author_name': 'Bob',
+                'message': 'i fixed a bug',
+                'patch_set': [
+                    {
+                        'path': 'src/sentry/models/release.py',
+                        'type': 'M',
+                    },
+                ]
+            },
+        ])
+        incident = self.create_incident(self.organization, groups=[group])
+        with self.feature('organizations:incidents'):
+            resp = self.get_valid_response(
+                self.organization.slug,
+                incident.identifier,
+            )
+        assert len(resp.data) == 1
+        suspect = resp.data[0]
+        assert suspect['type'] == 'commit'
+        assert suspect['data']['id'] == commit_id
+
+    def test_access(self):
+        other_user = self.create_user()
+        self.login_as(other_user)
+        other_team = self.create_team()
+        self.create_member(
+            user=self.user,
+            organization=self.organization,
+            role='member',
+            teams=[self.team],
+        )
+        other_project = self.create_project(teams=[other_team])
+        incident = self.create_incident(projects=[other_project])
+        with self.feature('organizations:incidents'):
+            resp = self.get_response(self.organization.slug, incident.identifier)
+            assert resp.status_code == 403
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 61656bdfa9..6907118683 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -18,6 +18,7 @@ from sentry.incidents.logic import (
     get_incident_aggregates,
     get_incident_event_stats,
     get_incident_subscribers,
+    get_incident_suspects,
     subscribe_to_incident,
     StatusAlreadyChangedError,
     update_incident_status,
@@ -30,6 +31,7 @@ from sentry.incidents.models import (
     IncidentStatus,
     IncidentSubscription,
 )
+from sentry.models.repository import Repository
 from sentry.testutils import (
     TestCase,
     SnubaTestCase,
@@ -361,3 +363,189 @@ class GetIncidentSuscribersTest(TestCase, BaseIncidentsTest):
         assert list(get_incident_subscribers(incident)) == []
         subscription = subscribe_to_incident(incident, self.user)[0]
         assert list(get_incident_subscribers(incident)) == [subscription]
+
+
+class GetIncidentSuspectsTest(TestCase, BaseIncidentsTest):
+
+    def test_simple(self):
+        release = self.create_release(
+            project=self.project,
+            version='v12'
+        )
+
+        included_commits = set([letter * 40 for letter in ('a', 'b', 'c', 'd')])
+        commit_iter = iter(included_commits)
+
+        event = self.store_event(
+            data={
+                'fingerprint': ['group-1'],
+                'message': 'Kaboom!',
+                'platform': 'python',
+                'stacktrace': {
+                    'frames': [
+                        {
+                            "function": "handle_set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
+                            "module": "sentry.tasks",
+                            "in_app": True,
+                            "lineno": 30,
+                            "filename": "sentry/tasks.py",
+                        },
+                        {
+                            "function": "set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/models/release.py",
+                            "module": "sentry.models.release",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "sentry/models/release.py",
+                        }
+                    ]
+                },
+                'release': release.version,
+            },
+            project_id=self.project.id,
+        )
+        group = event.group
+        self.repo = Repository.objects.create(
+            organization_id=self.organization.id,
+            name=self.organization.id,
+        )
+        release.set_commits([
+            {
+                'id': next(commit_iter),
+                'repository': self.repo.name,
+                'author_email': 'bob@example.com',
+                'author_name': 'Bob',
+                'message': 'i fixed a bug',
+                'patch_set': [
+                    {
+                        'path': 'src/sentry/models/release.py',
+                        'type': 'M',
+                    },
+                ]
+            },
+            {
+                'id': next(commit_iter),
+                'repository': self.repo.name,
+                'author_email': 'bob@example.com',
+                'author_name': 'Bob',
+                'message': 'i fixed a bug',
+                'patch_set': [
+                    {
+                        'path': 'src/sentry/models/release.py',
+                        'type': 'M',
+                    },
+                ]
+            },
+            {
+                'id': next(commit_iter),
+                'repository': self.repo.name,
+                'author_email': 'ross@example.com',
+                'author_name': 'Ross',
+                'message': 'i fixed a bug',
+                'patch_set': [
+                    {
+                        'path': 'src/sentry/models/release.py',
+                        'type': 'M',
+                    },
+                ]
+            },
+        ])
+        release_2 = self.create_release(project=self.project, version='v13')
+        event_2 = self.store_event(
+            data={
+                'fingerprint': ['group-2'],
+                'message': 'Kaboom!',
+                'platform': 'python',
+                'stacktrace': {
+                    'frames': [
+                        {
+                            "function": "handle_set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/tasks.py",
+                            "module": "sentry.tasks",
+                            "in_app": True,
+                            "lineno": 30,
+                            "filename": "sentry/tasks.py",
+                        },
+                        {
+                            "function": "set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/models/group.py",
+                            "module": "sentry.models.group",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "sentry/models/group.py",
+                        },
+                    ],
+                },
+                'release': release_2.version,
+            },
+            project_id=self.project.id,
+        )
+        group_2 = event_2.group
+        release_2.set_commits([
+            {
+                'id': next(commit_iter),
+                'repository': self.repo.name,
+                'author_email': 'hello@example.com',
+                'author_name': 'Hello',
+                'message': 'i fixed a bug',
+                'patch_set': [
+                    {
+                        'path': 'src/sentry/models/group.py',
+                        'type': 'M',
+                    },
+                ]
+            },
+        ])
+
+        excluded_project = self.create_project()
+        excluded_event = self.store_event(
+            data={
+                'fingerprint': ['group-3'],
+                'message': 'Kaboom!',
+                'platform': 'python',
+                'stacktrace': {
+                    'frames': [
+                        {
+                            "function": "set_commits",
+                            "abs_path": "/usr/src/sentry/src/sentry/models/event.py",
+                            "module": "sentry.models.event",
+                            "in_app": True,
+                            "lineno": 39,
+                            "filename": "sentry/models/event.py",
+                        },
+                    ],
+                },
+                'release': release_2.version,
+            },
+            project_id=excluded_project.id,
+        )
+        excluded_release = self.create_release(project=self.project, version='v9000')
+
+        excluded_commit = 'e' * 40
+        excluded_group = excluded_event.group
+        excluded_release.set_commits([
+            {
+                'id': excluded_commit,
+                'repository': self.repo.name,
+                'author_email': 'hello@example.com',
+                'author_name': 'Hello',
+                'message': 'i fixed a bug',
+                'patch_set': [
+                    {
+                        'path': 'src/sentry/models/event.py',
+                        'type': 'M',
+                    },
+                ]
+            },
+        ])
+
+        incident = self.create_incident(
+            self.organization,
+            groups=[group, group_2, excluded_group],
+        )
+
+        assert set(suspect['id'] for suspect in get_incident_suspects(
+            incident,
+            incident.projects.exclude(id=excluded_project.id),
+        )) == included_commits
