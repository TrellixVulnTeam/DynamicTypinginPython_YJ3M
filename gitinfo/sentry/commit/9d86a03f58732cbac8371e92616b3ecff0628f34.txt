commit 9d86a03f58732cbac8371e92616b3ecff0628f34
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri Jun 26 10:26:13 2020 -0700

    ref(vercel): Handle multiple vercel integrations across orgs (#19534)
    
    * ref(vercel): Handle multiple vercel integrations across orgs
    
    * add another test

diff --git a/src/sentry/integrations/vercel/integration.py b/src/sentry/integrations/vercel/integration.py
index 651d72be33..5a4d35ce7c 100644
--- a/src/sentry/integrations/vercel/integration.py
+++ b/src/sentry/integrations/vercel/integration.py
@@ -18,6 +18,7 @@ from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.utils.http import absolute_uri
 from sentry.models import (
+    Integration,
     Project,
     ProjectKey,
     User,
@@ -206,6 +207,19 @@ class VercelIntegrationProvider(IntegrationProvider):
 
         return [identity_pipeline_view]
 
+    def get_configuration_metadata(self, external_id):
+        # If a vercel team or user was already installed on another sentry org
+        # we want to make sure we don't overwrite the existing configurations. We
+        # keep all the configurations so that if one of them is deleted from vercel's
+        # side, the other sentry org will still have a working vercel integration.
+        try:
+            integration = Integration.objects.get(external_id=external_id, provider=self.key)
+        except Integration.DoesNotExist:
+            # first time setting up vercel team/user
+            return {}
+
+        return integration.metadata["configurations"]
+
     def build_integration(self, state):
         data = state["identity"]["data"]
         access_token = data["access_token"]
@@ -237,6 +251,8 @@ class VercelIntegrationProvider(IntegrationProvider):
             message = u"Could not create deployment webhook in Vercel: {}".format(details)
             raise IntegrationError(message)
 
+        configurations = self.get_configuration_metadata(external_id)
+
         integration = {
             "name": name,
             "external_id": external_id,
@@ -245,6 +261,7 @@ class VercelIntegrationProvider(IntegrationProvider):
                 "installation_id": data["installation_id"],
                 "installation_type": installation_type,
                 "webhook_id": webhook["id"],
+                "configurations": configurations,
             },
             "post_install_data": {"user_id": state["user_id"]},
         }
@@ -252,6 +269,16 @@ class VercelIntegrationProvider(IntegrationProvider):
         return integration
 
     def post_install(self, integration, organization, extra=None):
+        # add new configuration information to metadata
+        configurations = integration.metadata.get("configurations") or {}
+        configurations[integration.metadata["installation_id"]] = {
+            "access_token": integration.metadata["access_token"],
+            "webhook_id": integration.metadata["webhook_id"],
+            "organization_id": organization.id,
+        }
+        integration.metadata["configurations"] = configurations
+        integration.save()
+
         # check if we have an installation already
         if SentryAppInstallationForProvider.objects.filter(
             organization=organization, provider="vercel"
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
index a0bd19de81..a745cb99dd 100644
--- a/tests/sentry/integrations/vercel/test_integration.py
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -21,7 +21,7 @@ from sentry.testutils import IntegrationTestCase
 class VercelIntegrationTest(IntegrationTestCase):
     provider = VercelIntegrationProvider
 
-    def assert_setup_flow(self, is_team=False):
+    def assert_setup_flow(self, is_team=False, multi_config_org=None):
         responses.reset()
         access_json = {
             "user_id": "my_user_id",
@@ -88,11 +88,25 @@ class VercelIntegrationTest(IntegrationTestCase):
 
         assert integration.external_id == external_id
         assert integration.name == name
+        configurations = {
+            "my_config_id": {
+                "access_token": "my_access_token",
+                "webhook_id": "webhook-id",
+                "organization_id": self.organization.id,
+            }
+        }
+        if multi_config_org:
+            configurations["orig_config_id"] = {
+                "access_token": "orig_access_token",
+                "webhook_id": "orig-webhook-id",
+                "organization_id": multi_config_org.id,
+            }
         assert integration.metadata == {
             "access_token": "my_access_token",
             "installation_id": "my_config_id",
             "installation_type": installation_type,
             "webhook_id": "webhook-id",
+            "configurations": configurations,
         }
         assert OrganizationIntegration.objects.get(
             integration=integration, organization=self.organization
@@ -123,6 +137,28 @@ class VercelIntegrationTest(IntegrationTestCase):
         self.assert_setup_flow(is_team=False)
         assert SentryAppInstallation.objects.count() == 1
 
+    @responses.activate
+    def test_install_on_multiple_orgs(self):
+        orig_org = self.create_organization()
+        metadata = {
+            "access_token": "orig_access_token",
+            "installation_id": "orig_config_id",
+            "installation_type": "team",
+            "webhook_id": "orig-webhook-id",
+            "configurations": {
+                "orig_config_id": {
+                    "access_token": "orig_access_token",
+                    "webhook_id": "orig-webhook-id",
+                    "organization_id": orig_org.id,
+                }
+            },
+        }
+        Integration.objects.create(
+            provider="vercel", name="my_team_name", external_id="my_team_id", metadata=metadata
+        )
+
+        self.assert_setup_flow(is_team=True, multi_config_org=orig_org)
+
     @responses.activate
     def test_update_organization_config(self):
         """Test that Vercel environment variables are created"""
