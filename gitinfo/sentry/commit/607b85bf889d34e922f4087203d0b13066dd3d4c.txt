commit 607b85bf889d34e922f4087203d0b13066dd3d4c
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Feb 21 15:53:08 2020 -0800

    auth: When logging out, always refresh the user's nonce
    
    This forces all sessions to be logged out and an existing cookie token
    can't be reused.

diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index 4e3dff94a2..cb8e22ccf8 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -146,13 +146,8 @@ class AuthIndexEndpoint(Endpoint):
         Logout the Authenticated User
         `````````````````````````````
 
-        Deauthenticate the currently active session. Can also deactivate
-        all sessions for a user if the ``all`` parameter is sent.
+        Deauthenticate all active sessions for this user.
         """
-        if request.data.get("all"):
-            # Rotate the session nonce to invalidate all other sessions.
-            request.user.refresh_session_nonce()
-            request.user.save()
         logout(request._request)
         request.user = AnonymousUser()
         return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/auth/providers/saml2/provider.py b/src/sentry/auth/providers/saml2/provider.py
index 5707b35a60..f5c5039bb5 100644
--- a/src/sentry/auth/providers/saml2/provider.py
+++ b/src/sentry/auth/providers/saml2/provider.py
@@ -170,8 +170,6 @@ class SAML2SLSView(BaseView):
         should_logout = request.user.is_authenticated()
 
         def force_logout():
-            request.user.refresh_session_nonce()
-            request.user.save()
             logout(request)
 
         redirect_to = auth.process_slo(
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index cd65115d66..fc0dd27177 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -4,8 +4,10 @@ import logging
 import warnings
 
 from bitfield import BitField
+from django.contrib.auth.signals import user_logged_out
 from django.contrib.auth.models import AbstractBaseUser, UserManager
 from django.core.urlresolvers import reverse
+from django.dispatch import receiver
 from django.db import IntegrityError, models, transaction
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
@@ -326,3 +328,12 @@ class User(BaseModel, AbstractBaseUser):
 
 # HACK(dcramer): last_login needs nullable for Django 1.8
 User._meta.get_field("last_login").null = True
+
+# When a user logs out, we want to always log them out of all
+# sessions and refresh their nonce.
+@receiver(user_logged_out, sender=User)
+def refresh_user_nonce(sender, request, user, **kwargs):
+    if user is None:
+        return
+    user.refresh_session_nonce()
+    user.save()
diff --git a/tests/sentry/api/endpoints/test_auth_index.py b/tests/sentry/api/endpoints/test_auth_index.py
index 4dae290a69..2383733c90 100644
--- a/tests/sentry/api/endpoints/test_auth_index.py
+++ b/tests/sentry/api/endpoints/test_auth_index.py
@@ -79,16 +79,11 @@ class AuthLogoutEndpointTest(APITestCase):
         assert response.status_code == 204
         assert list(self.client.session.keys()) == []
 
-    def test_logged_in__invalidate_all_sessions(self):
+    def test_logged_out(self):
         user = self.create_user("foo@example.com")
         self.login_as(user)
-        response = self.client.delete(self.path, data={"all": 1})
+        response = self.client.delete(self.path)
         assert response.status_code == 204
         assert list(self.client.session.keys()) == []
         updated = type(user).objects.get(pk=user.id)
         assert updated.session_nonce != user.session_nonce
-
-    def test_logged_out(self):
-        response = self.client.delete(self.path)
-        assert response.status_code == 204
-        assert list(self.client.session.keys()) == []
diff --git a/tests/sentry/web/frontend/test_auth_saml2.py b/tests/sentry/web/frontend/test_auth_saml2.py
index 63dd65bf1e..1a55546d5f 100644
--- a/tests/sentry/web/frontend/test_auth_saml2.py
+++ b/tests/sentry/web/frontend/test_auth_saml2.py
@@ -194,3 +194,6 @@ class AuthSAML2Test(AuthProviderTestCase):
 
         assert redirect.path == "/slo_url"
         assert "SAMLResponse" in query
+
+        updated = type(self.user).objects.get(pk=self.user.id)
+        assert updated.session_nonce != self.user.session_nonce
