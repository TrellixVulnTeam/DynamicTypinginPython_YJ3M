commit 01201962ca4556031b700805e9aa9864426b363c
Author: Mark Story <mark@sentry.io>
Date:   Thu Sep 13 14:06:57 2018 -0400

    feat(environments) Remove more code gated by environments feature flag.

diff --git a/src/sentry/static/sentry/app/components/group/releaseStats.jsx b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
index 566b7aa1da..947fe64ad4 100644
--- a/src/sentry/static/sentry/app/components/group/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
@@ -3,14 +3,11 @@ import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import ApiMixin from 'app/mixins/apiMixin';
-import DropdownLink from 'app/components/dropdownLink';
-import {setActiveEnvironment} from 'app/actionCreators/environments';
 import EnvironmentStore from 'app/stores/environmentStore';
 import LatestContextStore from 'app/stores/latestContextStore';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import GroupState from 'app/mixins/groupState';
 import GroupReleaseChart from 'app/components/group/releaseChart';
-import MenuItem from 'app/components/menuItem';
 import SeenInfo from 'app/components/group/seenInfo';
 import {t} from 'app/locale';
 
@@ -38,9 +35,6 @@ const GroupReleaseStats = createReactClass({
     return {
       envList,
       environment: LatestContextStore.getInitialState().environment,
-      hasEnvironmentsFeature: new Set(this.context.organization.features).has(
-        'environments'
-      ),
     };
   },
 
@@ -57,12 +51,9 @@ const GroupReleaseStats = createReactClass({
 
   render() {
     let {group, allEnvironments} = this.props;
-    let {environment, hasEnvironmentsFeature} = this.state;
-
-    let envList = this.state.envList || [];
+    let {environment} = this.state;
 
     let envName = environment ? environment.displayName : t('All Environments');
-
     let projectId = this.getProject().slug;
     let orgId = this.getOrganization().slug;
     let hasRelease = this.getProjectFeatures().has('releases');
@@ -71,31 +62,7 @@ const GroupReleaseStats = createReactClass({
     return (
       <div className="env-stats">
         <h6>
-          <span>
-            {hasEnvironmentsFeature ? (
-              envName
-            ) : (
-              <DropdownLink title={envName}>
-                <MenuItem
-                  isActive={environment === null}
-                  onClick={() => setActiveEnvironment(null)}
-                >
-                  {t('All Environments')}
-                </MenuItem>
-                {envList.map(env => {
-                  return (
-                    <MenuItem
-                      key={env.name}
-                      isActive={env.name === envName}
-                      onClick={() => setActiveEnvironment(env)}
-                    >
-                      {env.displayName}
-                    </MenuItem>
-                  );
-                })}
-              </DropdownLink>
-            )}
-          </span>
+          <span>{envName}</span>
         </h6>
         <div className="env-content">
           {isLoading ? (
diff --git a/src/sentry/static/sentry/app/views/stream/index.jsx b/src/sentry/static/sentry/app/views/stream/index.jsx
index 5743ab5057..fa0e62c413 100644
--- a/src/sentry/static/sentry/app/views/stream/index.jsx
+++ b/src/sentry/static/sentry/app/views/stream/index.jsx
@@ -21,14 +21,9 @@ const StreamContainer = createReactClass({
   mixins: [ProjectState, Reflux.listenTo(TagStore, 'onTagsChange')],
 
   getInitialState() {
-    const hasEnvironmentsFeature = new Set(this.getOrganization().features).has(
-      'environments'
-    );
-
     return {
       tags: TagStore.getAllTags(),
       tagsLoading: true,
-      hasEnvironmentsFeature,
     };
   },
 
@@ -51,16 +46,10 @@ const StreamContainer = createReactClass({
   },
 
   render() {
-    const {hasEnvironmentsFeature, tagsLoading, tags} = this.state;
-    const filteredTags = hasEnvironmentsFeature ? this.filterTags(this.state.tags) : tags;
+    const filteredTags = this.filterTags(this.state.tags);
 
     return (
-      <Stream
-        hasEnvironmentsFeature={hasEnvironmentsFeature}
-        tags={filteredTags}
-        tagsLoading={tagsLoading}
-        {...this.props}
-      />
+      <Stream tags={filteredTags} tagsLoading={this.state.tagsLoading} {...this.props} />
     );
   },
 });
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index e832c5c4af..c0b24515f3 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -46,7 +46,6 @@ const Stream = createReactClass({
 
   propTypes: {
     environment: SentryTypes.Environment,
-    hasEnvironmentsFeature: PropTypes.bool,
     tags: PropTypes.object,
     tagsLoading: PropTypes.bool,
   },
@@ -287,22 +286,15 @@ const Stream = createReactClass({
         search => search.id === searchId
       );
       if (searchResult) {
-        // New behavior is that we'll no longer want to support environment in saved search
+        // New behavior is that we no longer support environment in saved search
         // We check if the query contains a valid environment and update the global setting if so
         // We'll always strip environment from the querystring whether valid or not
-        if (this.props.hasEnvironmentsFeature) {
-          const queryEnv = queryString.getQueryEnvironment(searchResult.query);
-          if (queryEnv) {
-            const env = EnvironmentStore.getByName(queryEnv);
-            setActiveEnvironment(env);
-          }
-          newState.query = queryString.getQueryStringWithoutEnvironment(
-            searchResult.query
-          );
-        } else {
-          // Old behavior, keep the environment in the querystring
-          newState.query = searchResult.query;
+        const queryEnv = queryString.getQueryEnvironment(searchResult.query);
+        if (queryEnv) {
+          const env = EnvironmentStore.getByName(queryEnv);
+          setActiveEnvironment(env);
         }
+        newState.query = queryString.getQueryStringWithoutEnvironment(searchResult.query);
 
         if (this.state.searchId && !props.params.searchId) {
           newState.isDefaultSearch = true;
@@ -495,15 +487,12 @@ const Stream = createReactClass({
       // We no longer want to support environments specified in the querystring
       // To keep this aligned with old behavior though we'll update the global environment
       // and remove it from the query if someone does provide it this way
-      if (this.props.hasEnvironmentsFeature) {
-        const queryEnvironment = queryString.getQueryEnvironment(query);
-        if (queryEnvironment !== null) {
-          const env = EnvironmentStore.getByName(queryEnvironment);
-          setActiveEnvironment(env);
-        }
-
-        query = queryString.getQueryStringWithoutEnvironment(query);
+      const queryEnvironment = queryString.getQueryEnvironment(query);
+      if (queryEnvironment !== null) {
+        const env = EnvironmentStore.getByName(queryEnvironment);
+        setActiveEnvironment(env);
       }
+      query = queryString.getQueryStringWithoutEnvironment(query);
 
       this.setState(
         {
diff --git a/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
index 8e0a7ae6a0..7c2a5789f0 100644
--- a/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
@@ -80,66 +80,7 @@ exports[`GroupReleaseStats renders 1`] = `
   >
     <h6>
       <span>
-        <DropdownLink
-          alwaysRenderMenu={true}
-          anchorRight={false}
-          caret={true}
-          disabled={false}
-          title="All Environments"
-        >
-          <DropdownMenu
-            alwaysRenderMenu={true}
-            keepMenuOpen={false}
-          >
-            <span
-              className="dropdown"
-            >
-              <a
-                className="dropdown-actor dropdown-toggle"
-                onClick={[Function]}
-                onMouseEnter={[Function]}
-                onMouseLeave={[Function]}
-              >
-                <div
-                  className="dropdown-actor-title"
-                >
-                  <span>
-                    All Environments
-                  </span>
-                  <i
-                    className="icon-arrow-down"
-                  />
-                </div>
-              </a>
-              <ul
-                className="dropdown-menu"
-                onClick={[Function]}
-                onMouseEnter={[Function]}
-                onMouseLeave={[Function]}
-              >
-                <MenuItem
-                  isActive={true}
-                  onClick={[Function]}
-                >
-                  <li
-                    className="active"
-                    href={null}
-                    onClick={[Function]}
-                    role="presentation"
-                    title={null}
-                  >
-                    <a
-                      onClick={[Function]}
-                      tabIndex="-1"
-                    >
-                      All Environments
-                    </a>
-                  </li>
-                </MenuItem>
-              </ul>
-            </span>
-          </DropdownMenu>
-        </DropdownLink>
+        All Environments
       </span>
     </h6>
     <div
