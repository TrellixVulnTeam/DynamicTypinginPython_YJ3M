commit a83e7074eea152a15dfc93ee3db4ae4453e10a98
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jan 14 11:24:26 2019 -0800

    feat(discover): Add visualization to query string (#11467)
    
    Discover visualization type can be defined via the URL, visualization
    name persists when switching Discover tabs. Also validates requested
    visualization against available visualizations for that particular
    query.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index ea9ffa9e2c..dba545e1fb 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -26,6 +26,7 @@ import {
   getQueryFromQueryString,
   deleteSavedQuery,
   updateSavedQuery,
+  queryHasChanged,
 } from './utils';
 import {isValidAggregation} from './aggregations/utils';
 import {isValidCondition} from './conditions/utils';
@@ -82,7 +83,6 @@ export default class OrganizationDiscover extends React.Component {
       isEditingSavedQuery,
       params,
     } = nextProps;
-    const currentSearch = this.props.location.search;
     const {resultManager} = this.state;
 
     if (savedQuery && savedQuery !== this.props.savedQuery) {
@@ -95,7 +95,7 @@ export default class OrganizationDiscover extends React.Component {
       return;
     }
 
-    if (currentSearch === search) {
+    if (!queryHasChanged(this.props.location.search, nextProps.location.search)) {
       return;
     }
 
@@ -181,7 +181,7 @@ export default class OrganizationDiscover extends React.Component {
   };
 
   runQuery = () => {
-    const {queryBuilder, organization} = this.props;
+    const {queryBuilder, organization, location} = this.props;
     const {resultManager} = this.state;
 
     // Track query for analytics
@@ -215,7 +215,12 @@ export default class OrganizationDiscover extends React.Component {
         if (shouldRedirect) {
           browserHistory.push({
             pathname: `/organizations/${organization.slug}/discover/`,
-            search: getQueryStringFromQuery(queryBuilder.getInternal()),
+            // Don't drop "visualization" from querystring
+            search: getQueryStringFromQuery(queryBuilder.getInternal(), {
+              ...(location.query.visualization && {
+                visualization: location.query.visualization,
+              }),
+            }),
           });
         }
 
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index 77aa4d2fb6..05c2c39756 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import {browserHistory, withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import {throttle} from 'lodash';
 
@@ -10,7 +11,13 @@ import LineChart from 'app/components/charts/lineChart';
 import InlineSvg from 'app/components/inlineSvg';
 import PageHeading from 'app/components/pageHeading';
 
-import {getChartData, getChartDataByDay, getRowsPageRange, downloadAsCsv} from './utils';
+import {
+  getChartData,
+  getChartDataByDay,
+  getRowsPageRange,
+  downloadAsCsv,
+  getVisualization,
+} from './utils';
 import Table from './table';
 import Pagination from './pagination';
 import VisualizationsToggle from './visualizationsToggle';
@@ -25,8 +32,13 @@ import {
   ResultSummaryAndButtons,
 } from '../styles';
 import {NUMBER_OF_SERIES_BY_DAY} from '../data';
+import {
+  queryHasChanged,
+  getQueryFromQueryString,
+  getQueryStringFromQuery,
+} from '../utils';
 
-export default class Result extends React.Component {
+class Result extends React.Component {
   static propTypes = {
     data: PropTypes.object.isRequired,
     savedQuery: SentryTypes.DiscoverSavedQuery, // Provided if it's a saved search
@@ -34,10 +46,10 @@ export default class Result extends React.Component {
     onToggleEdit: PropTypes.func,
   };
 
-  constructor() {
-    super();
+  constructor(props) {
+    super(props);
     this.state = {
-      view: 'table',
+      view: getVisualization(props.data, props.location.query.visualization),
       height: null,
       width: null,
     };
@@ -48,20 +60,18 @@ export default class Result extends React.Component {
   }
 
   componentWillReceiveProps(nextProps) {
-    const {baseQuery, byDayQuery} = nextProps.data;
+    const {data, location} = nextProps;
+    const visualization = getVisualization(data, location.query.visualization);
 
-    if (!byDayQuery.data && ['line-by-day', 'bar-by-day'].includes(this.state.view)) {
-      this.setState({
-        view: 'table',
+    if (queryHasChanged(this.props.location.search, nextProps.location.search)) {
+      const search = getQueryStringFromQuery(getQueryFromQueryString(location.search), {
+        visualization,
       });
-    }
 
-    if (
-      !baseQuery.query.aggregations.length &&
-      ['line', 'bar'].includes(this.state.view)
-    ) {
-      this.setState({
-        view: 'table',
+      this.setState({view: visualization});
+      browserHistory.replace({
+        pathname: location.pathname,
+        search,
       });
     }
   }
@@ -89,9 +99,19 @@ export default class Result extends React.Component {
   throttledUpdateDimensions = throttle(this.updateDimensions, 200, {trailing: true});
 
   handleToggleVisualizations = opt => {
+    const {location} = this.props;
     this.setState({
       view: opt,
     });
+
+    const search = getQueryStringFromQuery(getQueryFromQueryString(location.search), {
+      visualization: opt,
+    });
+
+    browserHistory.push({
+      pathname: location.pathname,
+      search,
+    });
   };
 
   renderToggle() {
@@ -269,3 +289,6 @@ export default class Result extends React.Component {
     );
   }
 }
+
+export {Result};
+export default withRouter(Result);
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
index 5fecceb06b..acba7ddedf 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
@@ -130,6 +130,28 @@ export function getChartDataByDay(rawData, query, options = {}) {
   });
 }
 
+/**
+ * Given result data and the location query, return the correct visualization
+ * @param {Object} data data object for result
+ * @param {String} current visualization from querystring
+ * @returns {String}
+ */
+export function getVisualization(data, current = 'table') {
+  const {baseQuery, byDayQuery} = data;
+
+  if (!byDayQuery.data && ['line-by-day', 'bar-by-day'].includes(current)) {
+    return 'table';
+  }
+
+  if (!baseQuery.query.aggregations.length && ['line', 'bar'].includes(current)) {
+    return 'table';
+  }
+
+  return ['table', 'line', 'bar', 'line-by-day', 'bar-by-day'].includes(current)
+    ? current
+    : 'table';
+}
+
 /**
  * Returns the page ranges of paginated tables, i.e. Results 1-100
  * @param {Object} baseQuery data
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index a9099e2ec3..76aa5d95b1 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -1,5 +1,7 @@
 import moment from 'moment';
 import {Client} from 'app/api';
+import {isEqual, omit} from 'lodash';
+import qs from 'query-string';
 import {isValidAggregation} from './aggregations/utils';
 import {NON_SNUBA_FIELDS} from './data';
 
@@ -31,12 +33,16 @@ export function getQueryFromQueryString(queryString) {
   return result;
 }
 
-export function getQueryStringFromQuery(query) {
+export function getQueryStringFromQuery(query, queryParams = {}) {
   const queryProperties = Object.entries(query).map(([key, value]) => {
     return key + '=' + encodeURIComponent(JSON.stringify(value));
   });
 
-  return `?${queryProperties.join('&')}`;
+  Object.entries(queryParams).forEach(([key, value]) => {
+    queryProperties.push(`${key}=${value}`);
+  });
+
+  return `?${queryProperties.sort().join('&')}`;
 }
 
 export function getOrderbyFields(queryBuilder) {
@@ -99,6 +105,21 @@ export function getView(params, requestedView) {
   }
 }
 
+/**
+ * Returns true if the underlying discover query has changed based on the querystring,
+ * otherwise false. Omit "visualization" since it's not part of the query.
+ *
+ * @param {String} prev previous location.search string
+ * @param {String} next next location.search string
+ * @returns {Boolean}
+ */
+export function queryHasChanged(prev, next) {
+  return !isEqual(
+    omit(qs.parse(prev), 'visualization'),
+    omit(qs.parse(next), 'visualization')
+  );
+}
+
 /**
  * Takes a saved query and strips associated query metadata in order to match
  * our internal representation of queries.
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 7f8485d196..f7d81c6691 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -346,7 +346,11 @@ describe('Discover', function() {
           <Discover
             queryBuilder={queryBuilder}
             organization={organization}
-            location={{location: '?fields=something'}}
+            location={{
+              location: '?fields=something',
+              query: {fields: 'something'},
+              search: '?fields=something',
+            }}
             params={{}}
             updateSavedQueryData={jest.fn()}
             toggleEditMode={jest.fn()}
diff --git a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
index 8629517686..4043841731 100644
--- a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount, shallow} from 'enzyme';
 
-import Result from 'app/views/organizationDiscover/result';
+import {Result} from 'app/views/organizationDiscover/result';
 import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
 
 describe('Result', function() {
@@ -25,7 +25,15 @@ describe('Result', function() {
         },
       };
       wrapper = shallow(
-        <Result data={data} organization={organization} onFetchPage={jest.fn()} />,
+        <Result
+          data={data}
+          organization={organization}
+          onFetchPage={jest.fn()}
+          location={{
+            query: {},
+            search: '',
+          }}
+        />,
         {
           context: {organization},
           disableLifecycleMethods: false,
@@ -142,7 +150,12 @@ describe('Result', function() {
     describe('Toggles Visualizations', function() {
       beforeEach(function() {
         wrapper = mount(
-          <Result data={data} organization={organization} onFetchPage={jest.fn()} />,
+          <Result
+            data={data}
+            organization={organization}
+            onFetchPage={jest.fn()}
+            location={{query: {}, search: ''}}
+          />,
           TestStubs.routerContext([{organization}])
         );
       });
@@ -206,6 +219,7 @@ describe('Result', function() {
           organization={organization}
           savedQuery={TestStubs.DiscoverSavedQuery()}
           onFetchPage={jest.fn()}
+          location={{query: {}}}
         />,
         TestStubs.routerContext()
       );
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index 72edea2869..a9048c597d 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -44,6 +44,12 @@ describe('getQueryStringFromQuery()', function() {
   it('parses query from query string', function() {
     expect(getQueryStringFromQuery(query)).toEqual(queryString);
   });
+
+  it('keeps location in query string if provided', function() {
+    expect(getQueryStringFromQuery(query, {visualization: 'table'})).toEqual(
+      `${queryString}&visualization=table`
+    );
+  });
 });
 
 describe('getOrderbyFields()', function() {
