commit 2aece40b373711413f1144ec7f28e6815b8e468e
Author: Mark Story <mark@mark-story.com>
Date:   Wed Jan 16 16:15:53 2019 -0500

    feat(issues) Hook assignee control up (#11534)
    
    Get the Assign to pickers working on the organization issue list. This
    requires getting all the organization members and preparing per-project
    lists. Ideally I'd like to defer loading members until the user
    interacts with the picker, but that requires more invasive changes as
    rendering an assigned user requires the members to be loaded.
    
    Refs APP-993

diff --git a/src/sentry/static/sentry/app/actionCreators/members.jsx b/src/sentry/static/sentry/app/actionCreators/members.jsx
index 74398b8006..3b4856d273 100644
--- a/src/sentry/static/sentry/app/actionCreators/members.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/members.jsx
@@ -1,4 +1,18 @@
 import MemberActions from 'app/actions/memberActions';
+import MemberListStore from 'app/stores/memberListStore';
+
+export function fetchOrgMembers(api, orgId) {
+  let endpoint = `/organizations/${orgId}/users/`;
+  let promise = api.requestPromise(endpoint, {method: 'GET'});
+  return promise.then(members => {
+    members = members.filter(m => m.user);
+
+    // Update the store with just the users, as avatars rely on them.
+    MemberListStore.loadInitialData(members.map(m => m.user));
+
+    return members;
+  });
+}
 
 export function updateMember(api, params) {
   MemberActions.update(params.memberId, params.data);
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 1b680df8fe..1655b9ef5d 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -24,11 +24,11 @@ const StreamGroup = createReactClass({
 
   propTypes: {
     id: PropTypes.string.isRequired,
-    orgId: PropTypes.string.isRequired,
     statsPeriod: PropTypes.string.isRequired,
     canSelect: PropTypes.bool,
     query: PropTypes.string,
     hasGuideAnchor: PropTypes.bool,
+    memberList: PropTypes.array,
   },
 
   mixins: [Reflux.listenTo(GroupStore, 'onGroupChange'), ProjectState],
@@ -86,7 +86,7 @@ const StreamGroup = createReactClass({
 
   render() {
     const {data} = this.state;
-    const {query, hasGuideAnchor, canSelect} = this.props;
+    const {query, hasGuideAnchor, canSelect, memberList} = this.props;
 
     return (
       <Group onClick={this.toggleSelect} py={1} px={0} align="center">
@@ -112,7 +112,7 @@ const StreamGroup = createReactClass({
           <StyledCount value={data.userCount} />
         </Flex>
         <Box w={80} mx={2} className="hidden-xs hidden-sm">
-          <AssigneeSelector id={data.id} />
+          <AssigneeSelector id={data.id} memberList={memberList} />
         </Box>
       </Group>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index dd737cef0e..d0366e16c1 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -12,6 +12,7 @@ import {analytics} from 'app/utils/analytics';
 import {t} from 'app/locale';
 import {fetchProject} from 'app/actionCreators/projects';
 import {fetchTags} from 'app/actionCreators/tags';
+import {fetchOrgMembers} from 'app/actionCreators/members';
 import ApiMixin from 'app/mixins/apiMixin';
 import ConfigStore from 'app/stores/configStore';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
@@ -77,13 +78,14 @@ const OrganizationStream = createReactClass({
       pageLinks: '',
       queryCount: null,
       error: false,
-      query: currentQuery.query || '',
+      query: currentQuery.query || 'is:unresolved',
       sort,
       selection: GlobalSelectionStore.get(),
       isSidebarVisible: false,
       savedSearchList: [],
       processingIssues: null,
       tagsLoading: true,
+      memberList: null,
       tags: TagStore.getAllTags(),
       // the project for the selected issues
       // Will only be set if selected issues all belong
@@ -101,6 +103,19 @@ const OrganizationStream = createReactClass({
     if (!this.state.loading) {
       this.fetchData();
       fetchTags(this.props.organization.slug);
+
+      fetchOrgMembers(this.api, this.props.organization.slug).then(members => {
+        let memberList = members.reduce((acc, member) => {
+          for (let project of member.projects) {
+            if (acc[project] === undefined) {
+              acc[project] = [];
+            }
+            acc[project].push(member.user);
+          }
+          return acc;
+        }, {});
+        this.setState({memberList});
+      });
     }
   },
 
@@ -381,10 +396,15 @@ const OrganizationStream = createReactClass({
     dateCutoff.setDate(dateCutoff.getDate() - 30);
 
     let topIssue = ids[0];
+    let {memberList} = this.state;
 
     let {orgId} = this.props.params;
     let groupNodes = ids.map(id => {
       let hasGuideAnchor = userDateJoined > dateCutoff && id === topIssue;
+
+      let group = GroupStore.get(id);
+      let members = memberList[group.project.slug] || [];
+
       return (
         <StreamGroup
           key={id}
@@ -393,6 +413,7 @@ const OrganizationStream = createReactClass({
           statsPeriod={groupStatsPeriod}
           query={this.state.query}
           hasGuideAnchor={hasGuideAnchor}
+          memberList={members}
         />
       );
     });
