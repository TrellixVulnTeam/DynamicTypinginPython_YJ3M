commit e1466241f4b66fc2fec3aa5735d333bc6e29994e
Author: Chris Fuller <cfuller@sentry.io>
Date:   Mon May 11 13:59:23 2020 -0400

    feat(workflow): Updating the way we're tracking alert rule analytics (#18698)

diff --git a/src/sentry/analytics/events/alert_created.py b/src/sentry/analytics/events/alert_created.py
index ce44460596..829a8a21ea 100644
--- a/src/sentry/analytics/events/alert_created.py
+++ b/src/sentry/analytics/events/alert_created.py
@@ -11,7 +11,7 @@ class AlertCreatedEvent(analytics.Event):
         analytics.Attribute("default_user_id"),
         analytics.Attribute("organization_id"),
         analytics.Attribute("rule_id"),
-        analytics.Attribute("actions", type=list),
+        analytics.Attribute("rule_type"),
     )
 
 
diff --git a/src/sentry/analytics/events/metric_alert_created.py b/src/sentry/analytics/events/metric_alert_created.py
deleted file mode 100644
index e451376792..0000000000
--- a/src/sentry/analytics/events/metric_alert_created.py
+++ /dev/null
@@ -1,17 +0,0 @@
-from __future__ import absolute_import
-
-from sentry import analytics
-
-
-class MetricAlertCreatedEvent(analytics.Event):
-    type = "metric_alert.created"
-
-    attributes = (
-        analytics.Attribute("user_id", required=False),
-        analytics.Attribute("default_user_id"),
-        analytics.Attribute("organization_id"),
-        analytics.Attribute("rule_id"),
-    )
-
-
-analytics.register(MetricAlertCreatedEvent)
diff --git a/src/sentry/api/endpoints/project_rules.py b/src/sentry/api/endpoints/project_rules.py
index 703a080dbf..eb123bdcc2 100644
--- a/src/sentry/api/endpoints/project_rules.py
+++ b/src/sentry/api/endpoints/project_rules.py
@@ -83,7 +83,7 @@ class ProjectRulesEndpoint(ProjectEndpoint):
                 data=rule.get_audit_log_data(),
             )
             alert_rule_created.send_robust(
-                user=request.user, project=project, rule=rule, sender=self
+                user=request.user, project=project, rule=rule, rule_type="issue", sender=self
             )
 
             return Response(serialize(rule, request.user))
diff --git a/src/sentry/incidents/endpoints/project_alert_rule_index.py b/src/sentry/incidents/endpoints/project_alert_rule_index.py
index 5c97e647b7..8f6cef561b 100644
--- a/src/sentry/incidents/endpoints/project_alert_rule_index.py
+++ b/src/sentry/incidents/endpoints/project_alert_rule_index.py
@@ -12,8 +12,8 @@ from sentry.api.paginator import OffsetPaginator, CombinedQuerysetPaginator
 from sentry.api.serializers import serialize, CombinedRuleSerializer
 from sentry.incidents.endpoints.serializers import AlertRuleSerializer
 from sentry.incidents.models import AlertRule
+from sentry.signals import alert_rule_created
 from sentry.models import Rule, RuleStatus
-from sentry.signals import metric_alert_rule_created
 
 
 class ProjectCombinedRuleIndexEndpoint(ProjectEndpoint):
@@ -69,8 +69,8 @@ class ProjectAlertRuleIndexEndpoint(ProjectEndpoint):
 
         if serializer.is_valid():
             alert_rule = serializer.save()
-            metric_alert_rule_created.send_robust(
-                user=request.user, project=project, rule=alert_rule, sender=self
+            alert_rule_created.send_robust(
+                user=request.user, project=project, rule=alert_rule, rule_type="metric", sender=self
             )
             return Response(serialize(alert_rule, request.user), status=status.HTTP_201_CREATED)
 
diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index 107121f503..850258a4ff 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -13,7 +13,6 @@ from sentry.signals import (
     advanced_search,
     advanced_search_feature_gated,
     alert_rule_created,
-    metric_alert_rule_created,
     data_scrubber_enabled,
     deploy_created,
     event_processed,
@@ -255,8 +254,8 @@ def record_inbound_filter_toggled(project, **kwargs):
 
 
 @alert_rule_created.connect(weak=False)
-def record_alert_rule_created(user, project, rule, **kwargs):
-    if rule.label == DEFAULT_RULE_LABEL and rule.data == DEFAULT_RULE_DATA:
+def record_alert_rule_created(user, project, rule, rule_type, **kwargs):
+    if rule_type == "issue" and rule.label == DEFAULT_RULE_LABEL and rule.data == DEFAULT_RULE_DATA:
         return
 
     FeatureAdoption.objects.record(
@@ -275,28 +274,7 @@ def record_alert_rule_created(user, project, rule, **kwargs):
         default_user_id=default_user_id,
         organization_id=project.organization_id,
         rule_id=rule.id,
-        actions=[a["id"] for a in rule.data.get("actions", [])],
-    )
-
-
-@metric_alert_rule_created.connect(weak=False)
-def record_metric_alert_rule_created(user, project, rule, **kwargs):
-    FeatureAdoption.objects.record(
-        organization_id=project.organization_id, feature_slug="metric_alert_rules", complete=True
-    )
-
-    if user and user.is_authenticated():
-        user_id = default_user_id = user.id
-    else:
-        user_id = None
-        default_user_id = project.organization.get_default_owner().id
-
-    analytics.record(
-        "metric_alert.created",
-        user_id=user_id,
-        default_user_id=default_user_id,
-        organization_id=project.organization_id,
-        rule_id=rule.id,
+        rule_type=rule_type,
     )
 
 
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 4aaa12c5bb..c52cc229af 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -85,8 +85,7 @@ save_search_created = BetterSignal(providing_args=["project", "user"])
 inbound_filter_toggled = BetterSignal(providing_args=["project"])
 sso_enabled = BetterSignal(providing_args=["organization", "user", "provider"])
 data_scrubber_enabled = BetterSignal(providing_args=["organization"])
-alert_rule_created = BetterSignal(providing_args=["project", "rule", "user"])
-metric_alert_rule_created = BetterSignal(providing_args=["project", "alert_rule", "user"])
+alert_rule_created = BetterSignal(providing_args=["project", "rule", "user", "rule_type"])
 repo_linked = BetterSignal(providing_args=["repo", "user"])
 release_created = BetterSignal(providing_args=["release"])
 deploy_created = BetterSignal(providing_args=["deploy"])
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index ebf142875a..b7ec5f45c5 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -6,7 +6,6 @@ from sentry.models import FeatureAdoption, GroupAssignee, GroupTombstone, Rule
 from sentry.plugins.bases import IssueTrackingPlugin2, NotificationPlugin
 from sentry.signals import (
     alert_rule_created,
-    metric_alert_rule_created,
     event_processed,
     first_event_received,
     project_created,
@@ -527,24 +526,17 @@ class FeatureAdoptionTest(TestCase, SnubaTestCase):
         )
 
         alert_rule_created.send(
-            user=self.owner, project=self.project, rule=rule, sender=type(self.project)
+            user=self.owner,
+            project=self.project,
+            rule=rule,
+            rule_type="issue",
+            sender=type(self.project),
         )
         feature_complete = FeatureAdoption.objects.get_by_slug(
             organization=self.organization, slug="alert_rules"
         )
         assert feature_complete
 
-    def test_metric_alert_rules(self):
-        alert_rule = self.create_alert_rule()
-
-        metric_alert_rule_created.send(
-            user=self.owner, project=self.project, rule=alert_rule, sender=type(self.project)
-        )
-        feature_complete = FeatureAdoption.objects.get_by_slug(
-            organization=self.organization, slug="metric_alert_rules"
-        )
-        assert feature_complete
-
     def test_issue_tracker_plugin(self):
         plugin_enabled.send(
             plugin=IssueTrackingPlugin2(),
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index f8f4aa8ed0..40dcbfc676 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -269,7 +269,11 @@ class OrganizationOnboardingTaskTest(TestCase):
 
     def test_alert_added(self):
         alert_rule_created.send(
-            rule=Rule(id=1), project=self.project, user=self.user, sender=type(Rule)
+            rule=Rule(id=1),
+            project=self.project,
+            user=self.user,
+            rule_type="issue",
+            sender=type(Rule),
         )
         task = OrganizationOnboardingTask.objects.get(
             organization=self.organization,
@@ -340,7 +344,11 @@ class OrganizationOnboardingTaskTest(TestCase):
             sender=type(IssueTrackingPlugin),
         )
         alert_rule_created.send(
-            rule=Rule(id=1), project=self.project, user=self.user, sender=type(Rule)
+            rule=Rule(id=1),
+            project=self.project,
+            user=self.user,
+            rule_type="issue",
+            sender=type(Rule),
         )
 
         assert (
