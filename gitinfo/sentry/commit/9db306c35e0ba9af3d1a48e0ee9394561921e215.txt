commit 9db306c35e0ba9af3d1a48e0ee9394561921e215
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Nov 18 17:36:55 2019 +0100

    feat(dif): Add hidden sources and aliases (#15638)

diff --git a/src/sentry/api/endpoints/builtin_symbol_sources.py b/src/sentry/api/endpoints/builtin_symbol_sources.py
index 4574b6e523..c9bb2a5799 100644
--- a/src/sentry/api/endpoints/builtin_symbol_sources.py
+++ b/src/sentry/api/endpoints/builtin_symbol_sources.py
@@ -9,7 +9,12 @@ from sentry.api.serializers import serialize
 
 
 def normalize_symbol_source(key, source):
-    return {"sentry_key": key, "id": source["id"], "name": source["name"]}
+    return {
+        "sentry_key": key,
+        "id": source["id"],
+        "name": source["name"],
+        "hidden": bool(source.get("hidden")),
+    }
 
 
 class BuiltinSymbolSourcesEndpoint(Endpoint):
diff --git a/src/sentry/lang/native/symbolicator.py b/src/sentry/lang/native/symbolicator.py
index 392254757e..ad42984038 100644
--- a/src/sentry/lang/native/symbolicator.py
+++ b/src/sentry/lang/native/symbolicator.py
@@ -277,11 +277,29 @@ def get_sources_for_project(project):
             # processing at this point.
             logger.error("Invalid symbolicator source config", exc_info=True)
 
+    def resolve_alias(source):
+        for key in source.get("sources") or ():
+            other_source = settings.SENTRY_BUILTIN_SOURCES.get(key)
+            if other_source:
+                if other_source.get("type") == "alias":
+                    for item in resolve_alias(other_source):
+                        yield item
+                else:
+                    yield other_source
+
     # Add builtin sources last to ensure that custom sources have precedence
     # over our defaults.
     builtin_sources = project.get_option("sentry:builtin_symbol_sources")
     for key, source in six.iteritems(settings.SENTRY_BUILTIN_SOURCES):
-        if key in builtin_sources:
+        if key not in builtin_sources:
+            continue
+
+        # special internal alias type expands to more than one item.  This
+        # is used to make `apple` expand to `ios`/`macos` and other
+        # sources if configured as such.
+        if source.get("type") == "alias":
+            sources.extend(resolve_alias(source))
+        else:
             sources.append(source)
 
     return sources
diff --git a/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx b/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
index f586bcb295..e5747ab87f 100644
--- a/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
@@ -46,7 +46,9 @@ export const fields = {
     ),
     choices: ({builtinSymbolSources}) =>
       builtinSymbolSources &&
-      builtinSymbolSources.map(source => [source.sentry_key, t(source.name)]),
+      builtinSymbolSources
+        .filter(source => !source.hidden)
+        .map(source => [source.sentry_key, t(source.name)]),
   },
   symbolSources: {
     name: 'symbolSources',
