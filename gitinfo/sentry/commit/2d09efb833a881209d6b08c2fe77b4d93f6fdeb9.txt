commit 2d09efb833a881209d6b08c2fe77b4d93f6fdeb9
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Feb 19 10:29:27 2017 -0800

    [stream] support bulk "Resolve in Next Release"

diff --git a/CHANGES b/CHANGES
index 08a040589b..1140d86e7b 100644
--- a/CHANGES
+++ b/CHANGES
@@ -13,6 +13,7 @@ Version 8.14 (Unreleased)
 - Added OrganizationReleasesEndpoint
 - Added context type app for cocoa events
 - Added basic encryption facilities (``sentry.utils.encryption``).
+- Aded bulk "Resolve in Next Release" to stream actions.
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/bin/load-mocks b/bin/load-mocks
index 6f1c6b92ec..90724a3313 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -262,12 +262,17 @@ def main(num_events=1, extra_events=False):
                 defaults={
                     'organization': org,
                     'first_event': timezone.now(),
+                    'flags': Project.flags.has_releases,
                 }
             )
             if not project.first_event:
                 project.update(
                     first_event=project.date_added,
                 )
+            if not project.flags.has_releases:
+                project.update(
+                    flags=F('flags').bitor(Project.flags.has_releases),
+                )
 
             with transaction.atomic():
                 has_release = Release.objects.filter(
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index a570f50503..61ba955f41 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -575,6 +575,7 @@ const Stream = React.createClass({
     let {orgId, projectId} = this.props.params;
     let searchId = this.state.searchId;
     let access = this.getAccess();
+    let projectFeatures = this.getProjectFeatures();
 
     return (
       <StickyContainer>
@@ -602,6 +603,7 @@ const Stream = React.createClass({
                   <StreamActions
                     orgId={params.orgId}
                     projectId={params.projectId}
+                    hasReleases={projectFeatures.has('releases')}
                     query={this.state.query}
                     onSelectStatsPeriod={this.onSelectStatsPeriod}
                     onRealtimeChange={this.onRealtimeChange}
diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index 4d1098e6cb..b35ab316ad 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -99,7 +99,7 @@ const ActionLink = React.createClass({
     let confirmationQuestion = resolveLabel(this.props.confirmationQuestion);
 
     return (
-      <a title={this.props.tooltip || this.props.buttonTitle}
+      <a title={this.props.tooltip !== null ? this.props.tooltip : this.props.buttonTitle}
          className={className}
          disabled={this.props.disabled}
          onClick={this.handleClick}
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 41ff01cfc3..e06c670cd6 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -19,7 +19,8 @@ const StreamActions = React.createClass({
     onSelectStatsPeriod: React.PropTypes.func.isRequired,
     realtimeActive: React.PropTypes.bool.isRequired,
     statsPeriod: React.PropTypes.string.isRequired,
-    query: React.PropTypes.string.isRequired
+    query: React.PropTypes.string.isRequired,
+    hasReleases: React.PropTypes.bool,
   },
 
   mixins: [
@@ -143,6 +144,8 @@ const StreamActions = React.createClass({
   render() {
     // TODO(mitsuhiko): very unclear how to translate this
     let numIssues = SelectedGroupStore.getSelectedIds().size;
+    let hasRelease = this.props.hasReleases;
+    let releaseTrackingUrl = `/${this.props.orgId}/${this.props.projectId}/settings/release-tracking/`;
     let extraDescription = null;
     if (this.state.allInQuerySelected) {
       extraDescription = (this.props.query ? (
@@ -190,8 +193,54 @@ const StreamActions = React.createClass({
                  tooltip={t('Set Status to Resolved')}
                  onlyIfBulk={true}
                  selectAllActive={this.state.pageSelected}>
-                <i aria-hidden="true" className="icon-checkmark"></i>
+                <span className="icon-checkmark" style={{marginRight: 5}} />
+                {t('Resolve')}
               </ActionLink>
+              <DropdownLink
+                caret={true}
+                className="btn btn-default btn-sm action-resolve"
+                topLevelClasses="resolve-dropdown"
+                disabled={!this.state.anySelected}
+                title="">
+                <MenuItem noAnchor={true}>
+                  {hasRelease ?
+                    <ActionLink
+                        disabled={!this.state.anySelected}
+                        onAction={this.onUpdate.bind(this, {status: 'resolvedInNextRelease'})}
+                        buttonTitle={t('Resolve')}
+                        tooltip=""
+                        extraDescription={extraDescription}
+                        confirmationQuestion={
+                          this.state.allInQuerySelected
+                            ? t('Are you sure you want to resolve all issues matching this search query?')
+                            : (count) =>
+                                tn('Are you sure you want to resolve this %d issue?',
+                                   'Are you sure you want to resolve these %d issues?',
+                                   count)
+                        }
+                        confirmLabel={
+                          this.state.allInQuerySelected
+                            ? t('Resolve all issues')
+                            : (count) =>
+                                tn('Resolve %d selected issue',
+                                   'Resolve %d selected issues',
+                                   count)
+                        }
+                        onlyIfBulk={true}
+                        selectAllActive={this.state.pageSelected}>
+                      <strong>{t('Resolved in next release')}</strong>
+                      <div className="help-text">{t('Snooze notifications until this issue reoccurs in a future release.')}</div>
+                    </ActionLink>
+                  :
+                    <a href={releaseTrackingUrl} className="disabled tip" title={t('Set up release tracking in order to use this feature.')}>
+                      <strong>{t('Resolved in next release.')}</strong>
+                      <div className="help-text">{t('Snooze notifications until this issue reoccurs in a future release.')}</div>
+                    </a>
+                  }
+                </MenuItem>
+              </DropdownLink>
+            </div>
+            <div className="btn-group">
               <ActionLink
                  className="btn btn-default btn-sm action-bookmark"
                  disabled={!this.state.anySelected}
@@ -219,7 +268,8 @@ const StreamActions = React.createClass({
                  selectAllActive={this.state.pageSelected}>
                 <i aria-hidden="true" className="icon-star-solid"></i>
               </ActionLink>
-
+            </div>
+            <div className="btn-group">
               <DropdownLink
                 key="actions"
                 btnGroup={true}
