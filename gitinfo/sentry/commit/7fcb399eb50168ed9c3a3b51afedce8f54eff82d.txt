commit 7fcb399eb50168ed9c3a3b51afedce8f54eff82d
Author: josh <josh@jrl.ninja>
Date:   Wed Jan 15 19:57:45 2020 +0000

    ref(social auth): remove unused identity disconnector (#16453)

diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 53edec5c94..6f54f46a5f 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -3,9 +3,6 @@ from __future__ import absolute_import
 import logging
 from functools import partial, update_wrapper
 
-import six
-
-from django.conf import settings
 from django.contrib import messages
 from django.contrib.auth import login as login_user, authenticate
 from django.template.context_processors import csrf
@@ -24,8 +21,6 @@ from sentry.web.decorators import login_required, signed_auth_required
 from sentry.web.forms.accounts import RecoverPasswordForm, ChangePasswordRecoverForm
 from sentry.web.helpers import render_to_response
 from sentry.utils import auth
-from social_auth.backends import get_backend
-from social_auth.models import UserSocialAuth
 
 logger = logging.getLogger("sentry.accounts")
 
@@ -248,54 +243,3 @@ def email_unsubscribe_project(request, project_id):
     context = csrf(request)
     context["project"] = project
     return render_to_response("sentry/account/email_unsubscribe_project.html", context, request)
-
-
-@csrf_protect
-@never_cache
-@login_required
-def disconnect_identity(request, identity_id):
-    if request.method != "POST":
-        raise NotImplementedError
-
-    try:
-        auth = UserSocialAuth.objects.get(id=identity_id)
-    except UserSocialAuth.DoesNotExist:
-        return HttpResponseRedirect(reverse("sentry-account-settings-identities"))
-
-    backend = get_backend(auth.provider, request, "/")
-    if backend is None:
-        raise Exception(u"Backend was not found for request: {}".format(auth.provider))
-
-    # stop this from bubbling up errors to social-auth's middleware
-    # XXX(dcramer): IM SO MAD ABOUT THIS
-    try:
-        backend.disconnect(request.user, identity_id)
-    except Exception as exc:
-        import sys
-
-        exc_tb = sys.exc_info()[2]
-        six.reraise(Exception, exc, exc_tb)
-        del exc_tb
-
-    # XXX(dcramer): we experienced an issue where the identity still existed,
-    # and given that this is a cheap query, lets error hard in that case
-    assert not UserSocialAuth.objects.filter(user=request.user, id=identity_id).exists()
-
-    backend_name = backend.AUTH_BACKEND.name
-
-    messages.add_message(
-        request,
-        messages.SUCCESS,
-        u"Your {} identity has been disconnected.".format(
-            settings.AUTH_PROVIDER_LABELS.get(backend_name, backend_name)
-        ),
-    )
-    logger.info(
-        "user.identity.disconnect",
-        extra={
-            "user_id": request.user.id,
-            "ip_address": request.META["REMOTE_ADDR"],
-            "usersocialauth_id": identity_id,
-        },
-    )
-    return HttpResponseRedirect(reverse("sentry-account-settings-identities"))
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index add97002a3..a07bd02c8f 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -264,11 +264,6 @@ urlpatterns += [
                         pattern_name="sentry-account-settings-subscriptions", permanent=False
                     ),
                 ),
-                url(
-                    r"^settings/identities/(?P<identity_id>[^\/]+)/disconnect/$",
-                    accounts.disconnect_identity,
-                    name="sentry-account-disconnect-identity",
-                ),
                 url(
                     r"^settings/identities/associate/(?P<organization_slug>[^\/]+)/(?P<provider_key>[^\/]+)/(?P<external_id>[^\/]+)/$",
                     AccountIdentityAssociateView.as_view(),
