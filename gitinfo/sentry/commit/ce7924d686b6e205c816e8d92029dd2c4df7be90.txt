commit ce7924d686b6e205c816e8d92029dd2c4df7be90
Author: sandy <sandy@mahalo.com>
Date:   Mon Sep 13 16:09:57 2010 -0700

    sentry/client/base.py -- Modified SentryClient.send() to expect a list of servers.
    from REMOTE_URL. If REMOTE_URL is not a list, a ValueError will be raised.
    
    senty/models.py -- Fixed MySQL-related bug in GroupedMessage.get_score_clause()
    related to the way date math was being done.

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 706b2e0323..c1e2779b75 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -43,20 +43,24 @@ class SentryClient(object):
 
     def send(self, **kwargs):
         if settings.REMOTE_URL:
-            data = {
-                'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
-                'key': settings.KEY,
-            }
-            req = urllib2.Request(settings.REMOTE_URL, urllib.urlencode(data))
-
-            try:
-                response = urllib2.urlopen(req, None, settings.REMOTE_TIMEOUT).read()
-            except urllib2.URLError, e:
-                logger.critical('Unable to reach Sentry log server')
-                logger.log(kwargs.pop('level', None) or logging.ERROR, kwargs.pop('message', None))
-            except urllib2.HTTPError, e:
-                logger.critical('Unable to reach Sentry log server', extra={'body': e.read()})
-                logger.log(kwargs.pop('level', None) or logging.ERROR, kwargs.pop('message', None))
+            if not type(settings.REMOTE_URL) == list:
+                raise ValueError("SENTRY_REMOTE_URL must be of type list.")
+
+            for url in settings.REMOTE_URL:
+                data = {
+                    'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
+                    'key': settings.KEY,
+                }
+                req = urllib2.Request(url, urllib.urlencode(data))
+
+                try:
+                    response = urllib2.urlopen(req, None, settings.REMOTE_TIMEOUT).read()
+                except urllib2.URLError, e:
+                    logger.critical('Unable to reach Sentry log server')
+                    logger.log(kwargs.pop('level', None) or logging.ERROR, kwargs.pop('message', None))
+                except urllib2.HTTPError, e:
+                    logger.critical('Unable to reach Sentry log server', extra={'body': e.read()})
+                    logger.log(kwargs.pop('level', None) or logging.ERROR, kwargs.pop('message', None))
         else:
             from sentry.models import GroupedMessage
             
@@ -149,4 +153,5 @@ class SentryClient(object):
             traceback=tb_message,
             data=data,
             **kwargs
-        )
\ No newline at end of file
+        )
+
diff --git a/sentry/models.py b/sentry/models.py
index ee85b599a9..40a7e7b252 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -135,7 +135,7 @@ class GroupedMessage(MessageBase):
         if engine.startswith('postgresql'):
             return 'times_seen / (pow((floor(extract(epoch from now() - last_seen) / 3600) + 2), 1.25) + 1)'
         if engine.startswith('mysql'):
-            return 'times_seen / (pow((floor(unix_timestamp(now() - last_seen) / 3600) + 2), 1.25) + 1)'
+            return 'times_seen / (pow((floor((unix_timestamp(now()) - unix_timestamp(last_seen)) / 3600) + 2), 1.25) + 1)'
         return 'times_seen'
 
     def mail_admins(self, request=None, fail_silently=True):
@@ -221,4 +221,4 @@ class Message(MessageBase):
         else:
             fake_request.path_info = ''
         fake_request.path = fake_request.path_info
-        return fake_request
\ No newline at end of file
+        return fake_request
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 274331674f..5c52b1d9fa 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -566,7 +566,7 @@ class RemoteSentryTest(TestCase):
     
     def setUp(self):
         self.server_thread = None
-        settings.REMOTE_URL = 'http://localhost:8000%s' % reverse('sentry-store')
+        settings.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
         logger = logging.getLogger('sentry')
         for h in logger.handlers:
             logger.removeHandler(h)
@@ -769,4 +769,5 @@ class SentryClientTest(TestCase):
         
         self.assertEquals(_foo[''].getMessage(), 'view exception')
         self.assertEquals(_foo[''].levelno, client.default_level)
-        self.assertEquals(_foo[''].class_name, 'Exception')
\ No newline at end of file
+        self.assertEquals(_foo[''].class_name, 'Exception')
+
