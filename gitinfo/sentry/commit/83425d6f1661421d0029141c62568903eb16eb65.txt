commit 83425d6f1661421d0029141c62568903eb16eb65
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Feb 4 01:52:10 2012 -0800

    Switch eventlet wsgi server to gunicorn

diff --git a/sentry/commands/control.py b/sentry/commands/control.py
index 05a7508532..ed071d0be0 100644
--- a/sentry/commands/control.py
+++ b/sentry/commands/control.py
@@ -70,9 +70,19 @@ def start(args, daemonize=False, debug=False):
         os.makedirs(settings.RUN_DIR)
 
     # Ensure we force an environment upgrade before we start the server
+
     service = get_service_from_args(args)
 
-    proc = get_daemon_for_service(service, daemonize, debug=debug)
+    # Special handling for http
+    if args[0] == 'http':
+        proc = service(
+            debug=debug,
+            daemonize=daemonize,
+            pidfile=os.path.join(settings.RUN_DIR, '%s.pid' % (args[0],)),
+            logfile=os.path.join(settings.LOG_DIR, '%s.log' % (args[0],)),
+        )
+    else:
+        proc = get_daemon_for_service(service, daemonize, debug=debug)
 
     proc.start()
 
diff --git a/sentry/services/http.py b/sentry/services/http.py
index f85527fa5f..2a22430560 100644
--- a/sentry/services/http.py
+++ b/sentry/services/http.py
@@ -5,36 +5,63 @@ sentry.services.http
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-import eventlet
-
-from eventlet import wsgi, patcher
+from gunicorn.app.djangoapp import DjangoApplication
+from gunicorn.arbiter import Arbiter
+import sys
 
 from sentry.services.base import Service
 
 
+class SentryApplication(DjangoApplication):
+    def __init__(self, options):
+        self.usage = None
+        self.cfg = None
+        self.config_file = options.get("config") or ""
+        self.options = options
+        self.callable = None
+        self.project_path = None
+
+        self.do_load_config()
+
+        for k, v in self.options.items():
+            if k.lower() in self.cfg.settings and v is not None:
+                self.cfg.set(k.lower(), v)
+
+    def init(self, parser, opts, args):
+        pass
+
+    def load(self):
+        from sentry.wsgi import application
+
+        self.activate_translation()
+
+        return application
+
+
 class SentryHTTPServer(Service):
     name = 'http'
 
-    def __init__(self, host=None, port=None, debug=False):
+    def __init__(self, host=None, port=None, debug=False, daemonize=False, pidfile=None,
+                 logfile=None):
         from sentry.conf import settings
 
-        self.debug = debug
-
         self.host = host or settings.WEB_HOST
         self.port = port or settings.WEB_PORT
 
-    def run(self):
-        from sentry.wsgi import application
-
-        def inner_run():
-            # Install eventlet patches after everything else has been run,
-            # and inside our server thread
-            patcher.monkey_patch()
+        self.app = SentryApplication({
+            'bind': '%s:%s' % (self.host, self.port),
+            'debug': debug,
+            'daemon': daemonize,
+            'pidfile': pidfile,
+            'errorlog': logfile,
+        })
 
-            wsgi.server(eventlet.listen((self.host, self.port)), application)
+    def run(self):
+        try:
+            Arbiter(self.app).run()
+        except RuntimeError, e:
+            sys.stderr.write("\nError: %s\n\n" % e)
+            sys.stderr.flush()
+            sys.exit(1)
 
-        if self.debug:
-            from django.utils import autoreload
-            autoreload.main(inner_run)
-        else:
-            inner_run()
+    start = run
