commit da911aa768a627f10c615b49691dfcb57b4417cb
Author: Mark Story <mark@sentry.io>
Date:   Tue Feb 18 16:55:05 2020 -0500

    ref(charts) Make chart tooltips consistent with discover2 (#17101)
    
    Make other chart tooltips consistent with the new tooltip designs used
    in discover2.

diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index 8ab4dbebb7..d3ce72e29b 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -2,11 +2,13 @@ import 'zrender/lib/svg/svg';
 
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from '@emotion/styled';
 import ReactEchartsCore from 'echarts-for-react/lib/core';
 import echarts from 'echarts/lib/echarts';
 
 import {callIfFunction} from 'app/utils/callIfFunction';
 import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
 import Grid from './components/grid';
@@ -229,73 +231,126 @@ class BaseChart extends React.Component {
       : [YAxis(), YAxis()];
 
     return (
-      <ReactEchartsCore
-        ref={forwardedRef}
-        echarts={echarts}
-        notMerge={notMerge}
-        lazyUpdate={lazyUpdate}
-        silent={silent}
-        theme={this.props.theme}
-        onChartReady={this.handleChartReady}
-        onEvents={this.getEventsMap}
-        opts={{
-          height,
-          width,
-          renderer,
-          devicePixelRatio,
-        }}
-        style={{
-          height: getDimensionValue(height),
-          width: getDimensionValue(width),
-          ...style,
-        }}
-        option={{
-          ...options,
-          useUTC: utc,
-          color: colors || this.getColorPalette(),
-          grid: Grid(grid),
-          tooltip:
-            tooltip !== null
-              ? Tooltip({showTimeInTooltip, isGroupedByDate, utc, ...tooltip})
-              : null,
-          legend: legend ? Legend({...legend}) : null,
-          yAxis: yAxisOrCustom,
-          xAxis:
-            xAxis !== null
-              ? XAxis({
-                  ...xAxis,
-                  shouldRenderTimeOnly: shouldXAxisRenderTimeOnly,
-                  isGroupedByDate,
-                  utc,
-                })
-              : null,
-          series: !previousPeriod
-            ? series
-            : [
-                ...series,
-                ...previousPeriod.map(previous =>
-                  LineSeries({
-                    name: previous.seriesName,
-                    data: previous.data.map(({name, value}) => [name, value]),
-                    lineStyle: {
-                      color: theme.gray1,
-                      type: 'dotted',
-                    },
-                    itemStyle: {
-                      color: theme.gray1,
-                    },
+      <ChartContainer>
+        <ReactEchartsCore
+          ref={forwardedRef}
+          echarts={echarts}
+          notMerge={notMerge}
+          lazyUpdate={lazyUpdate}
+          silent={silent}
+          theme={this.props.theme}
+          onChartReady={this.handleChartReady}
+          onEvents={this.getEventsMap}
+          opts={{
+            height,
+            width,
+            renderer,
+            devicePixelRatio,
+          }}
+          style={{
+            height: getDimensionValue(height),
+            width: getDimensionValue(width),
+            ...style,
+          }}
+          option={{
+            ...options,
+            useUTC: utc,
+            color: colors || this.getColorPalette(),
+            grid: Grid(grid),
+            tooltip:
+              tooltip !== null
+                ? Tooltip({showTimeInTooltip, isGroupedByDate, utc, ...tooltip})
+                : null,
+            legend: legend ? Legend({...legend}) : null,
+            yAxis: yAxisOrCustom,
+            xAxis:
+              xAxis !== null
+                ? XAxis({
+                    ...xAxis,
+                    shouldRenderTimeOnly: shouldXAxisRenderTimeOnly,
+                    isGroupedByDate,
+                    utc,
                   })
-                ),
-              ],
-          dataZoom,
-          toolbox: toolBox,
-          graphic,
-        }}
-      />
+                : null,
+            series: !previousPeriod
+              ? series
+              : [
+                  ...series,
+                  ...previousPeriod.map(previous =>
+                    LineSeries({
+                      name: previous.seriesName,
+                      data: previous.data.map(({name, value}) => [name, value]),
+                      lineStyle: {
+                        color: theme.gray1,
+                        type: 'dotted',
+                      },
+                      itemStyle: {
+                        color: theme.gray1,
+                      },
+                    })
+                  ),
+                ],
+            dataZoom,
+            toolbox: toolBox,
+            graphic,
+          }}
+        />
+      </ChartContainer>
     );
   }
 }
 
+// Contains styling for chart elements as we can't easily style those
+// elements directly
+const ChartContainer = styled('div')`
+  /* Tooltip styling */
+  .tooltip-series,
+  .tooltip-date {
+    color: ${theme.gray2};
+    font-family: ${theme.text.family};
+    background: ${theme.gray5};
+    padding: ${space(1)} ${space(2)};
+    border-radius: ${theme.borderRadius} ${theme.borderRadius} 0 0;
+  }
+  .tooltip-label {
+    margin-right: ${space(1)};
+  }
+  .tooltip-label strong {
+    font-weight: normal;
+    color: #fff;
+  }
+  .tooltip-series > div {
+    display: flex;
+    justify-content: space-between;
+    align-items: baseline;
+  }
+  .tooltip-date {
+    border-top: 1px solid ${theme.gray3};
+    text-align: center;
+    position: relative;
+    width: auto;
+    border-radius: ${theme.borderRadiusBottom};
+  }
+  .tooltip-date:after {
+    top: 100%;
+    left: 50%;
+    border: solid transparent;
+    content: ' ';
+    height: 0;
+    width: 0;
+    position: absolute;
+    pointer-events: none;
+    border-color: transparent;
+    border-top-color: ${theme.gray5};
+    border-width: 8px;
+    margin-left: -8px;
+  }
+
+  .echarts-for-react div:first-child {
+    width: 100% !important;
+  }
+`;
+
 const BaseChartRef = React.forwardRef((props, ref) => (
   <BaseChart forwardedRef={ref} {...props} />
 ));
diff --git a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
index fc7c90d5c0..ca1cc264df 100644
--- a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
@@ -59,11 +59,18 @@ function getFormatter({
         utc,
         showTimeInTooltip
       );
-      return `<div>${label} - ${seriesParamsOrParam.name}</div>
-              <div>${truncationFormatter(
-                seriesParamsOrParam.seriesName,
-                truncate
-              )}:  ${valueFormatter(seriesParamsOrParam.data.coord[1])}</div>`;
+      const truncatedName = truncationFormatter(seriesParamsOrParam.seriesName, truncate);
+      const formattedValue = valueFormatter(seriesParamsOrParam.data.coord[1]);
+      return [
+        '<div class="tooltip-series">',
+        `<div>
+          <span class="tooltip-label"><strong>${seriesParamsOrParam.name}</strong></span>
+          ${truncatedName}: ${formattedValue}
+        </div>`,
+        '</div>',
+        `<div class="tooltip-date">${label}</div>`,
+        '</div>',
+      ].join('');
     }
 
     const seriesParams = isAxisItem ? seriesParamsOrParam : [seriesParamsOrParam];
@@ -78,17 +85,17 @@ function getFormatter({
       axisFormatterOrDefault(timestamp, isGroupedByDate, utc, showTimeInTooltip);
 
     return [
-      `<div>${truncationFormatter(label, truncate)}</div>`,
+      '<div class="tooltip-series">',
       seriesParams
         .filter(getFilter)
-        .map(
-          s =>
-            `<div>${s.marker} ${truncationFormatter(
-              s.seriesName,
-              truncate
-            )}:  ${valueFormatter(s.data[1])}</div>`
-        )
+        .map(s => {
+          const formattedLabel = truncationFormatter(s.seriesName, truncate);
+          const value = valueFormatter(s.data[1]);
+          return `<div><span class="tooltip-label">${s.marker} <strong>${formattedLabel}</strong></span> ${value}</div>`;
+        })
         .join(''),
+      '</div>',
+      `<div class="tooltip-date">${label}</div>`,
     ].join('');
   };
 }
@@ -117,6 +124,14 @@ export default function Tooltip({
   return {
     show: true,
     trigger: 'item',
+    backgroundColor: 'transparent',
+    transitionDuration: 0,
+    position(pos, _params, dom, _rec, _size) {
+      // Center the tooltip slightly above the cursor.
+      const tipWidth = dom.clientWidth;
+      const tipHeight = dom.clientHeight;
+      return [pos[0] - tipWidth / 2, pos[1] - tipHeight - 16];
+    },
     formatter,
     ...props,
   };
diff --git a/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx b/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
index 30c0f05d0c..fd3ddc897f 100644
--- a/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
@@ -13,27 +13,27 @@ const FILLER_NAME = '__filler';
  * See https://exceljet.net/chart-type/100-stacked-bar-chart
  */
 export default class PercentageAreaChart extends React.Component {
-  static propTypes = {
-    ...BaseChart.propTypes,
-
-    getDataItemName: PropTypes.func,
-    getValue: PropTypes.func,
-  };
-
   static get defaultProps() {
     // TODO(billyvg): Move these into BaseChart? or get rid completely
     return {
       getDataItemName: ({name}) => name,
-      getValue: ({name, value}, total) =>
+      getValue: ({value}, total) =>
         !total ? 0 : Math.round((value / total) * 1000) / 10,
     };
   }
 
+  static propTypes = {
+    ...BaseChart.propTypes,
+
+    getDataItemName: PropTypes.func,
+    getValue: PropTypes.func,
+  };
+
   getSeries() {
     const {series, getDataItemName, getValue} = this.props;
 
     const totalsArray = series.length
-      ? series[0].data.map(({name, value}, i) => {
+      ? series[0].data.map(({name}, i) => {
           return [name, series.reduce((sum, {data}) => sum + data[i].value, 0)];
         })
       : [];
@@ -61,8 +61,6 @@ export default class PercentageAreaChart extends React.Component {
       <BaseChart
         {...this.props}
         tooltip={{
-          // Make sure tooltip is inside of chart (because of overflow: hidden)
-          confine: true,
           formatter: seriesParams => {
             // `seriesParams` can be an array or an object :/
             const series = Array.isArray(seriesParams) ? seriesParams : [seriesParams];
@@ -71,15 +69,21 @@ export default class PercentageAreaChart extends React.Component {
             const date =
               `${series.length &&
                 moment(series[0].axisValue).format('MMM D, YYYY')}<br />` || '';
-            return `${date} ${series
-              .filter(
-                ({seriesName, data}) => data[1] > 0.001 && seriesName !== FILLER_NAME
-              )
-              .map(
-                ({marker, seriesName, data}) =>
-                  `${marker} ${seriesName}:  <strong>${data[1]}</strong>%`
-              )
-              .join('<br />')}`;
+
+            return [
+              '<div class="tooltip-series">',
+              series
+                .filter(
+                  ({seriesName, data}) => data[1] > 0.001 && seriesName !== FILLER_NAME
+                )
+                .map(
+                  ({marker, seriesName, data}) =>
+                    `<div><span class="tooltip-label">${marker} <strong>${seriesName}</strong></span> ${data[1]}%</div>`
+                )
+                .join(''),
+              '</div>',
+              `<div class="tooltip-date">${date}</div>`,
+            ].join('');
           },
         }}
         xAxis={{boundaryGap: true}}
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index 3c2b06d54f..f9cfbc322b 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -11,11 +11,9 @@ import LoadingPanel from 'app/views/events/loadingPanel';
 import ReleaseSeries from 'app/components/charts/releaseSeries';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
-import {getFormattedDate} from 'app/utils/dates';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
-import space from 'app/styles/space';
 
 import EventsRequest from './utils/eventsRequest';
 
@@ -75,35 +73,6 @@ class EventsAreaChart extends React.Component {
       data: ['Current', 'Previous'],
     };
 
-    const tooltip = {
-      backgroundColor: 'transparent',
-      transitionDuration: 0,
-      position(pos, _params, dom, _rect, _size) {
-        // Center the tooltip slightly above the cursor.
-        const tipWidth = dom.clientWidth;
-        const tipHeight = dom.clientHeight;
-        return [pos[0] - tipWidth / 2, pos[1] - tipHeight - 16];
-      },
-      formatter(seriesData) {
-        const series = Array.isArray(seriesData) ? seriesData : [seriesData];
-        return [
-          '<div class="tooltip-series">',
-          series
-            .map(
-              s =>
-                `<div><span class="tooltip-label">${s.marker} <strong>${
-                  s.seriesName
-                }</strong></span> ${s.data[1].toLocaleString()}</div>`
-            )
-            .join(''),
-          '</div>',
-          `<div class="tooltip-date">${getFormattedDate(series[0].data[0], 'MMM D, LTS', {
-            local: true,
-          })}</div>`,
-        ].join('');
-      },
-    };
-
     return (
       <AreaChart
         {...props}
@@ -120,7 +89,6 @@ class EventsAreaChart extends React.Component {
           top: '24px',
           bottom: '12px',
         }}
-        tooltip={tooltip}
       />
     );
   }
@@ -199,7 +167,7 @@ class EventsChart extends React.Component {
                     }
 
                     return (
-                      <ChartContainer>
+                      <React.Fragment>
                         <TransparentLoadingMask visible={reloading} />
                         <EventsAreaChart
                           {...zoomRenderProps}
@@ -211,7 +179,7 @@ class EventsChart extends React.Component {
                           timeseriesData={timeseriesData}
                           previousTimeseriesData={previousTimeseriesData}
                         />
-                      </ChartContainer>
+                      </React.Fragment>
                     );
                   }}
                 </ReleaseSeries>
@@ -257,56 +225,6 @@ const TransparentLoadingMask = styled(LoadingMask)`
   z-index: 1;
 `;
 
-// Contains styling for chart elements as we can't easily style those
-// elements directly
-const ChartContainer = styled('div')`
-  /* Tooltip styling */
-  .tooltip-series,
-  .tooltip-date {
-    color: ${p => p.theme.gray2};
-    font-family: ${p => p.theme.text.family};
-    background: ${p => p.theme.gray5};
-    padding: ${space(1)} ${space(2)};
-    border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;
-  }
-  .tooltip-label {
-    margin-right: ${space(1)};
-  }
-  .tooltip-label strong {
-    font-weight: normal;
-    color: #fff;
-  }
-  .tooltip-series > div {
-    display: flex;
-    justify-content: space-between;
-    align-items: baseline;
-  }
-  .tooltip-date {
-    border-top: 1px solid ${p => p.theme.gray3};
-    position: relative;
-    width: auto;
-    border-radius: ${p => p.theme.borderRadiusBottom};
-  }
-  .tooltip-date:after {
-    top: 100%;
-    left: 50%;
-    border: solid transparent;
-    content: ' ';
-    height: 0;
-    width: 0;
-    position: absolute;
-    pointer-events: none;
-    border-color: transparent;
-    border-top-color: ${p => p.theme.gray5};
-    border-width: 8px;
-    margin-left: -8px;
-  }
-
-  .echarts-for-react div:first-child {
-    width: 100% !important;
-  }
-`;
-
 const ErrorPanel = styled('div')`
   display: flex;
   justify-content: center;
