commit 934ec5d26785370f1de38e2c2e3f528c83559c42
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Tue Feb 5 14:29:51 2019 -0800

    ref: Fetch events by id or event_id in a common Manager (#11891)
    
    ref: Fetch events by id or event_id in a Manager method
    
    In preparation for using Snuba as the source of truth for events,
    force Event.objects.get() type calls through a helper method that
    adds the ability to use hex ids in all API endpoints, while also
    allowing us to track the usage of the different id types.

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 7390afc984..d8b42faeeb 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -30,9 +30,8 @@ class EventAppleCrashReportEndpoint(Endpoint):
         and not the event ID that is reported by the client upon submission.
         This works only if the event.platform == cocoa
         """
-        try:
-            event = Event.objects.get(id=event_id)
-        except Event.DoesNotExist:
+        event = Event.objects.from_event_id(event_id, project_id=None)
+        if event is None:
             raise ResourceDoesNotExist
 
         self.check_object_permissions(request, event.group)
diff --git a/src/sentry/api/endpoints/event_attachment_details.py b/src/sentry/api/endpoints/event_attachment_details.py
index 5499e1f85a..eb49d3e045 100644
--- a/src/sentry/api/endpoints/event_attachment_details.py
+++ b/src/sentry/api/endpoints/event_attachment_details.py
@@ -40,15 +40,12 @@ class EventAttachmentDetailsEndpoint(ProjectEndpoint):
         :pparam string attachment_id: the id of the attachment.
         :auth: required
         """
-        if not features.has('organizations:event-attachments', project.organization, actor=request.user):
+        if not features.has('organizations:event-attachments',
+                            project.organization, actor=request.user):
             return self.respond(status=404)
 
-        try:
-            event = Event.objects.get(
-                id=event_id,
-                project_id=project.id,
-            )
-        except Event.DoesNotExist:
+        event = Event.objects.from_event_id(event_id, project.id)
+        if event is None:
             return self.respond({'detail': 'Event not found'}, status=404)
 
         try:
diff --git a/src/sentry/api/endpoints/event_attachments.py b/src/sentry/api/endpoints/event_attachments.py
index 393585675e..d54c96a573 100644
--- a/src/sentry/api/endpoints/event_attachments.py
+++ b/src/sentry/api/endpoints/event_attachments.py
@@ -24,12 +24,8 @@ class EventAttachmentsEndpoint(ProjectEndpoint):
                             project.organization, actor=request.user):
             return self.respond(status=404)
 
-        try:
-            event = Event.objects.get(
-                id=event_id,
-                project_id=project.id,
-            )
-        except Event.DoesNotExist:
+        event = Event.objects.from_event_id(event_id, project.id)
+        if event is None:
             return self.respond({'detail': 'Event not found'}, status=404)
 
         queryset = EventAttachment.objects.filter(
diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 20cb93d35b..c1930e6939 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -23,9 +23,8 @@ class EventDetailsEndpoint(Endpoint):
         is the event as it appears in the Sentry database and not the event
         ID that is reported by the client upon submission.
         """
-        try:
-            event = Event.objects.get(id=event_id)
-        except Event.DoesNotExist:
+        event = Event.objects.from_event_id(event_id, project_id=None)
+        if event is None:
             raise ResourceDoesNotExist
 
         self.check_object_permissions(request, event.group)
diff --git a/src/sentry/api/endpoints/event_file_committers.py b/src/sentry/api/endpoints/event_file_committers.py
index c68aa69e24..5d54416d69 100644
--- a/src/sentry/api/endpoints/event_file_committers.py
+++ b/src/sentry/api/endpoints/event_file_committers.py
@@ -21,12 +21,8 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
                                  retrieve (as reported by the raven client).
         :auth: required
         """
-        try:
-            event = Event.objects.get(
-                id=event_id,
-                project_id=project.id,
-            )
-        except Event.DoesNotExist:
+        event = Event.objects.from_event_id(event_id, project.id)
+        if event is None:
             return Response({'detail': 'Event not found'}, status=404)
 
         # populate event data
diff --git a/src/sentry/api/endpoints/event_owners.py b/src/sentry/api/endpoints/event_owners.py
index 5c526501b1..45c233cc5e 100644
--- a/src/sentry/api/endpoints/event_owners.py
+++ b/src/sentry/api/endpoints/event_owners.py
@@ -20,12 +20,9 @@ class EventOwnersEndpoint(ProjectEndpoint):
         :pparam string event_id: the id of the event.
         :auth: required
         """
-        try:
-            event = Event.objects.get(
-                id=event_id,
-                project_id=project.id,
-            )
-        except Event.DoesNotExist:
+
+        event = Event.objects.from_event_id(event_id, project.id)
+        if event is None:
             return Response({'detail': 'Event not found'}, status=404)
 
         # populate event data
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index b2087d22b7..ccd8102f44 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -9,7 +9,6 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import DetailedEventSerializer, serialize
 from sentry.models import Event
 from sentry.utils.apidocs import scenario, attach_scenarios
-from sentry.utils.validators import is_event_id
 
 
 @scenario('RetrieveEventForProject')
@@ -42,26 +41,7 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
         :auth: required
         """
 
-        event = None
-        # If its a numeric string, check if it's an event Primary Key first
-        if event_id.isdigit():
-            try:
-                event = Event.objects.get(
-                    id=event_id,
-                    project_id=project.id,
-                )
-            except Event.DoesNotExist:
-                pass
-        # If it was not found as a PK, and its a possible event_id, search by that instead.
-        if event is None and is_event_id(event_id):
-            try:
-                event = Event.objects.get(
-                    event_id=event_id,
-                    project_id=project.id,
-                )
-            except Event.DoesNotExist:
-                pass
-
+        event = Event.objects.from_event_id(event_id, project.id)
         if event is None:
             return Response({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index f20f56c501..2548f7fd50 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -146,12 +146,8 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
                 except Group.DoesNotExist:
                     pass
                 else:
-                    try:
-                        matching_event = Event.objects.get(
-                            event_id=query, project_id=project.id)
-                    except Event.DoesNotExist:
-                        pass
-                    else:
+                    matching_event = Event.objects.from_event_id(query, project.id)
+                    if matching_event is not None:
                         Event.objects.bind_nodes([matching_event], 'data')
             elif matching_group is None:
                 matching_group = get_by_short_id(
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 1feedda80d..0c7895a17b 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -14,6 +14,7 @@ import threading
 import weakref
 
 from django.conf import settings
+from django.core.exceptions import ObjectDoesNotExist
 from django.db import router
 from django.db.models import Model
 from django.db.models.manager import Manager, QuerySet
@@ -23,6 +24,7 @@ from django.utils.encoding import smart_text
 from sentry import nodestore
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
+from sentry.utils.validators import is_event_id
 
 from .query import create_or_update
 
@@ -289,23 +291,6 @@ class BaseManager(Manager):
     def create_or_update(self, **kwargs):
         return create_or_update(self.model, **kwargs)
 
-    def bind_nodes(self, object_list, *node_names):
-        object_node_list = []
-        for name in node_names:
-            object_node_list.extend(
-                ((i, getattr(i, name)) for i in object_list if getattr(i, name).id)
-            )
-
-        node_ids = [n.id for _, n in object_node_list]
-        if not node_ids:
-            return
-
-        node_results = nodestore.get_multi(node_ids)
-
-        for item, node in object_node_list:
-            data = node_results.get(node.id) or {}
-            node.bind_data(data, ref=node.get_ref(item))
-
     def uncache_object(self, instance_id):
         pk_name = self.model._meta.pk.name
         cache_key = self.__get_lookup_cache_key(**{pk_name: instance_id})
@@ -329,3 +314,64 @@ class BaseManager(Manager):
         if hasattr(self, '_hints'):
             return self._queryset_class(self.model, using=self._db, hints=self._hints)
         return self._queryset_class(self.model, using=self._db)
+
+
+class EventManager(BaseManager):
+
+    def bind_nodes(self, object_list, *node_names):
+        object_node_list = []
+        for name in node_names:
+            object_node_list.extend(
+                ((i, getattr(i, name)) for i in object_list if getattr(i, name).id)
+            )
+
+        node_ids = [n.id for _, n in object_node_list]
+        if not node_ids:
+            return
+
+        node_results = nodestore.get_multi(node_ids)
+
+        for item, node in object_node_list:
+            data = node_results.get(node.id) or {}
+            node.bind_data(data, ref=node.get_ref(item))
+
+    def from_event_id(self, id_or_event_id, project_id):
+        """
+        Get an Event by either its id primary key or its hex event_id.
+
+        Will automatically try to infer the type of id, and grab the correct
+        event.  If the provided id is a hex event_id, the project_id must also
+        be provided to disambiguate it.
+
+        Returns None if the event cannot be found under either scheme.
+        """
+        # TODO (alexh) instrument this to report any times we are still trying
+        # to get events by id.
+        # TODO (alexh) deprecate lookup by id so we can move to snuba.
+
+        event = None
+        if id_or_event_id.isdigit():
+            # If its a numeric string, check if it's an event Primary Key first
+            try:
+                if project_id is None:
+                    event = self.get(
+                        id=id_or_event_id,
+                    )
+                else:
+                    event = self.get(
+                        id=id_or_event_id,
+                        project_id=project_id,
+                    )
+            except ObjectDoesNotExist:
+                pass
+        # If it was not found as a PK, and its a possible event_id, search by that instead.
+        if project_id is not None and event is None and is_event_id(id_or_event_id):
+            try:
+                event = self.get(
+                    event_id=id_or_event_id,
+                    project_id=project_id,
+                )
+            except ObjectDoesNotExist:
+                pass
+
+        return event
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 24171e7834..994878f64c 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -20,8 +20,13 @@ from hashlib import md5
 from sentry import eventtypes
 from sentry.constants import EVENT_ORDERING_KEY
 from sentry.db.models import (
-    BoundedBigIntegerField, BoundedIntegerField, Model, NodeField, sane_repr
+    BoundedBigIntegerField,
+    BoundedIntegerField,
+    Model,
+    NodeField,
+    sane_repr
 )
+from sentry.db.models.manager import EventManager
 from sentry.interfaces.base import get_interfaces
 from sentry.utils.cache import memoize
 from sentry.utils.canonical import CanonicalKeyDict, CanonicalKeyView
@@ -50,6 +55,8 @@ class Event(Model):
         wrapper=CanonicalKeyDict,
     )
 
+    objects = EventManager()
+
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_message'
diff --git a/src/sentry/models/rawevent.py b/src/sentry/models/rawevent.py
index c9c3961b5f..b37cae867e 100644
--- a/src/sentry/models/rawevent.py
+++ b/src/sentry/models/rawevent.py
@@ -10,7 +10,13 @@ from __future__ import absolute_import
 from django.db import models
 from django.utils import timezone
 
-from sentry.db.models import (Model, NodeField, FlexibleForeignKey, sane_repr)
+from sentry.db.models import (
+    Model,
+    NodeField,
+    FlexibleForeignKey,
+    sane_repr
+)
+from sentry.db.models.manager import EventManager
 from sentry.utils.canonical import CanonicalKeyView
 
 
@@ -28,6 +34,8 @@ class RawEvent(Model):
         wrapper=CanonicalKeyView,
     )
 
+    objects = EventManager()
+
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_rawevent'
