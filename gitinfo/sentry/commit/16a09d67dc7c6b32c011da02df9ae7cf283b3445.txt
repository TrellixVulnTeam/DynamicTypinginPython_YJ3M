commit 16a09d67dc7c6b32c011da02df9ae7cf283b3445
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Aug 28 13:49:45 2015 -0700

    If request body is JSON, render as ContextData component (refs #1853)

diff --git a/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
index b51d097752..41b51433ed 100644
--- a/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
@@ -1,7 +1,8 @@
 import React from "react";
+
 import ClippedBox from "../../components/clippedBox";
 import DefinitionList from "./definitionList";
-
+import ContextData from "../contextData";
 import {objectIsEmpty} from "../../utils";
 
 var RichHttpContent = React.createClass({
@@ -10,6 +11,13 @@ var RichHttpContent = React.createClass({
     return Object.keys(obj).map((k) => [k, obj[k]]);
   },
 
+  getBodySection(data) {
+    let contentType = data.headers.find(h => h[0] === 'Content-Type');
+    return contentType && contentType[1] === 'application/json'
+      ? <ContextData data={JSON.parse(data.data)} />
+      : <pre>{data.data}</pre>;
+  },
+
   render(){
     let data = this.props.data;
 
@@ -25,11 +33,13 @@ var RichHttpContent = React.createClass({
             <pre>{data.fragment}</pre>
           </ClippedBox>
         }
+
         {data.data &&
-          <ClippedBox title="Body">
-            <pre>{data.data}</pre>
+          <ClippedBox title="body">
+            {this.getDataSection(data)}
           </ClippedBox>
         }
+
         {data.cookies && !objectIsEmpty(data.cookies) &&
           <ClippedBox title="Cookies" defaultCollapsed>
             <DefinitionList data={data.cookies} />
diff --git a/tests/js/spec/components/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
index 0f8cc41839..22bf122652 100644
--- a/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
@@ -5,11 +5,19 @@ import stubReactComponents from "../../../helpers/stubReactComponent";
 import RichHttpContent from "app/components/interfaces/richHttpContent";
 import DefinitionList from "app/components/interfaces/definitionList";
 import ClippedBox from "app/components/clippedBox";
+import ContextData from "app/components/contextData";
 
 describe("RichHttpContent", function () {
   beforeEach(function () {
+    this.data = {
+      query: '',
+      data: '',
+      headers: [],
+      cookies: [],
+      env: {}
+    };
     this.sandbox = sinon.sandbox.create();
-    stubReactComponents(this.sandbox, [ClippedBox, DefinitionList]);
+    stubReactComponents(this.sandbox, [ClippedBox, DefinitionList, ContextData]);
   });
 
   afterEach(function () {
@@ -18,15 +26,7 @@ describe("RichHttpContent", function () {
 
   describe("objectToTupleArray", function () {
     it("should convert a key/value object to an array of key/value tuples", function () {
-      var data = {
-        query: '',
-        data: '',
-        headers: [],
-        cookies: [],
-        env: {}
-      };
-
-      var elem = TestUtils.renderIntoDocument(<RichHttpContent data={data} />);
+      var elem = TestUtils.renderIntoDocument(<RichHttpContent data={this.data} />);
       expect(elem.objectToTupleArray({
         foo: 'bar',
         bar: 'baz'
@@ -35,4 +35,33 @@ describe("RichHttpContent", function () {
       ]);
     });
   });
+
+  describe("getBodySection", function () {
+    it("should return plain-text when unrecognized Content-Type", function () {
+      var elem = TestUtils.renderIntoDocument(<RichHttpContent data={this.data} />);
+
+      var data = {
+        headers: [], // no content-type header,
+        data: 'helloworld'
+      };
+      var out = elem.getBodySection(data);
+      expect(out.type).to.eql('pre');
+    });
+
+    it("should return a ContextData element when Content-Type is application/json", function () {
+      var elem = TestUtils.renderIntoDocument(<RichHttpContent data={this.data} />);
+
+      var data = {
+        headers: [
+          ['lol' , 'no'],
+          ['Content-Type', 'application/json']
+        ], // no content-type header,
+        data: JSON.stringify({'foo': 'bar'})
+      };
+
+      // NOTE: ContextData is stubbed in tests; instead returns <div className="ContextData"/>
+      var out = elem.getBodySection(data);
+      expect(out.props.className).to.eql('ContextData');
+    });
+  });
 });
