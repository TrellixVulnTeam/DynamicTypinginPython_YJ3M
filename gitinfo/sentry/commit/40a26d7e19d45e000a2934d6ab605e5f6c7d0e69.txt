commit 40a26d7e19d45e000a2934d6ab605e5f6c7d0e69
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 26 01:27:18 2012 -0700

    Dont error with attributes passed in the JSON data that dont look like interfaces

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 8397735a20..398cad0bad 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -295,12 +295,17 @@ def validate_data(project, data, client=None):
     if data.get('modules') and type(data['modules']) != dict:
         raise InvalidData('Invalid type for \'modules\': must be a mapping')
 
-    for k, v in data.iteritems():
+    for k, v in data.items():
         if k in RESERVED_FIELDS:
             continue
 
         if '.' not in k:
-            raise InvalidInterface('%r is not a valid interface name' % k)
+            logger.error('Ignoring unknown attribute %r passed by client %r',
+                k,
+                client or '<unknown client>',
+            )
+            del data[k]
+            continue
 
         try:
             interface = import_string(k)
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 144adbd60c..ae089251cc 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -267,11 +267,19 @@ class ValidateDataTest(BaseAPITest):
             'message': 'foo',
         })
 
+    def test_unknown_attribute(self):
+        data = validate_data(self.project, {
+            'project': self.project.slug,
+            'message': 'foo',
+            'foo': 'bar',
+        })
+        self.assertFalse('foo' in data)
+
     def test_invalid_interface_name(self):
         self.assertRaises(InvalidInterface, validate_data, self.project, {
             'project': self.project.id,
             'message': 'foo',
-            'foo': 'bar',
+            'foo.baz': 'bar',
         })
 
     def test_invalid_interface_import_path(self):
