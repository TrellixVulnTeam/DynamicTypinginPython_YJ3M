commit c9ce46034abf1cdf4001c5b1778d1900d724fab0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Dec 11 08:55:40 2019 -0800

    feat(ui): Combined alert rules listing (#16025)
    
    * feat(ui): Combined alert rules listing
    
    This combines issue alert rules and metric alert rules to be listed together. This is a semi WIP as we will need to change API endpoints a bit
    
    * revert this change
    
    * remove delete for now
    
    * remove unused styled components
    
    * revert `aggregation` changes
    
    * add t()
    
    * fix endpoint

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 30f6df5bda..b89690474b 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -262,7 +262,13 @@ function routes() {
           import(/* webpackChunkName: "ProjectAlertsNew" */ 'app/views/settings/projectAlerts/new')
         }
       >
-        <IndexRedirect to="issue-rules/" />
+        <IndexRoute
+          component={errorHandler(LazyLoad)}
+          componentPromise={() =>
+            import(/* webpackChunkName: "ProjectAlertRules" */ 'app/views/settings/projectAlerts/projectAlertRulesNew')
+          }
+        />
+
         <Route
           path="settings/"
           name="Settings"
@@ -281,12 +287,6 @@ function routes() {
         />
 
         <Route path="issue-rules/" component={null}>
-          <IndexRoute
-            component={errorHandler(LazyLoad)}
-            componentPromise={() =>
-              import(/* webpackChunkName: "ProjectAlertRules" */ 'app/views/settings/projectAlerts/projectAlertRulesNew')
-            }
-          />
           <Route
             path="new/"
             name="New Alert Rule"
@@ -305,13 +305,7 @@ function routes() {
           />
         </Route>
 
-        <Route path="metric-rules/" name="Metric Rules" component={null}>
-          <IndexRoute
-            componentPromise={() =>
-              import(/* webpackChunkName: "IncidentRulesList" */ 'app/views/settings/incidentRules/list')
-            }
-            component={errorHandler(LazyLoad)}
-          />
+        <Route path="metric-rules/" component={null}>
           <Route
             name="New Incident Rule"
             path="new/"
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
index 0b7b5e05f0..42affd6f09 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
@@ -1,73 +1,67 @@
-import {Params} from 'react-router/lib/Router';
-import {PlainRoute} from 'react-router/lib/Route';
-import PropTypes from 'prop-types';
+import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
+import styled from 'react-emotion';
 
 import {IssueAlertRule} from 'app/types/alerts';
-import {Location} from 'history';
-import {Panel} from 'app/components/panels';
+import {Organization} from 'app/types';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {SavedIncidentRule} from 'app/views/settings/incidentRules/types';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import PermissionAlert from 'app/views/settings/project/permissionAlert';
-import RuleRow from 'app/views/settings/projectAlerts/ruleRow';
-import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
-import SentryTypes from 'app/sentryTypes';
+import RuleRow from 'app/views/settings/projectAlerts/ruleRowNew';
+import routeTitle from 'app/utils/routeTitle';
+import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
 
-type Props = {
-  params: Params;
-  location: Location;
-  routes: PlainRoute[];
-};
+type Props = {organization: Organization} & RouteComponentProps<
+  {
+    orgId: string;
+    projectId: string;
+  },
+  {}
+> &
+  AsyncView['props'];
 
 type State = {
-  ruleList: IssueAlertRule[];
-};
-
-class ProjectAlertRules extends AsyncView<
-  Props & AsyncView['props'],
-  State & AsyncView['state']
-> {
-  static propTypes = {
-    routes: PropTypes.array.isRequired,
-  };
-
-  static contextTypes = {
-    router: PropTypes.object,
-    organization: SentryTypes.Organization,
-  };
+  issueRules: IssueAlertRule[];
+  metricRules: SavedIncidentRule[];
+} & AsyncView['state'];
 
+class ProjectAlertRules extends AsyncView<Props, State> {
   getEndpoints(): [string, string][] {
     const {orgId, projectId} = this.props.params;
-    return [['ruleList', `/projects/${orgId}/${projectId}/rules/`]];
+    return [
+      ['issueRules', `/projects/${orgId}/${projectId}/rules/`],
+      ['metricRules', `/projects/${orgId}/${projectId}/alert-rules/`],
+    ];
   }
 
-  handleDeleteRule = rule => {
-    this.setState({
-      ruleList: this.state.ruleList.filter(r => r.id !== rule.id),
-    });
-  };
+  getTitle() {
+    const {projectId} = this.props.params;
+    return routeTitle(t('Alert Rules'), projectId);
+  }
 
   renderEmpty() {
     return (
-      <Panel>
-        <EmptyStateWarning>
-          <p>{t('There are no alerts configured for this project.')}</p>
-        </EmptyStateWarning>
-      </Panel>
+      <EmptyStateWarning>
+        <p>{t('There are no alerts configured for this project.')}</p>
+      </EmptyStateWarning>
     );
   }
 
   renderResults() {
-    const {orgId, projectId} = this.props.params;
-    const {organization} = this.context;
+    const {organization, params} = this.props;
+    const {orgId, projectId} = params;
     const canEditRule = organization.access.includes('project:write');
 
     return (
-      <div className="rules-list">
-        {this.state.ruleList.map(rule => {
+      <React.Fragment>
+        {this.state.issueRules.map(rule => {
           return (
             <RuleRow
+              type="issue"
               api={this.api}
               key={rule.id}
               data={rule}
@@ -76,28 +70,76 @@ class ProjectAlertRules extends AsyncView<
               params={this.props.params}
               location={this.props.location}
               routes={this.props.routes}
-              onDelete={this.handleDeleteRule.bind(this, rule)}
               canEdit={canEditRule}
             />
           );
         })}
-      </div>
+
+        {this.state.metricRules.map(rule => {
+          return (
+            <RuleRow
+              type="metric"
+              api={this.api}
+              key={`metric-${rule.id}`}
+              data={rule}
+              orgId={orgId}
+              projectId={projectId}
+              params={this.props.params}
+              location={this.props.location}
+              routes={this.props.routes}
+              canEdit={canEditRule}
+            />
+          );
+        })}
+      </React.Fragment>
     );
   }
 
+  renderLoading() {
+    return this.renderBody();
+  }
+
   renderBody() {
-    const {ruleList} = this.state;
-    const {projectId} = this.props.params;
+    const {loading, issueRules} = this.state;
 
     return (
       <React.Fragment>
-        <SentryDocumentTitle title={t('Alerts Rules')} objSlug={projectId} />
         <PermissionAlert />
-        {!!ruleList.length && this.renderResults()}
-        {!ruleList.length && this.renderEmpty()}
+
+        <Panel>
+          <RuleHeader>
+            <div>{t('Type')}</div>
+            <div>{t('Name')}</div>
+            <TriggerAndActions>
+              <div>{t('Conditions/Triggers')}</div>
+              <div>{t('Action(s)')}</div>
+            </TriggerAndActions>
+          </RuleHeader>
+
+          <PanelBody>
+            {loading
+              ? super.renderLoading()
+              : !!issueRules.length
+              ? this.renderResults()
+              : this.renderEmpty()}
+          </PanelBody>
+        </Panel>
       </React.Fragment>
     );
   }
 }
 
-export default ProjectAlertRules;
+export default withOrganization(ProjectAlertRules);
+
+const RuleHeader = styled(PanelHeader)`
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-columns: 1fr 3fr 6fr;
+  grid-auto-flow: column;
+`;
+
+const TriggerAndActions = styled('div')`
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  grid-auto-flow: column;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
new file mode 100644
index 0000000000..b84eba354b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
@@ -0,0 +1,195 @@
+import {Link} from 'react-router';
+import {RouteComponentProps} from 'react-router/lib/Router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {IssueAlertRule} from 'app/types/alerts';
+import {PanelItem} from 'app/components/panels';
+import {SavedIncidentRule} from 'app/views/settings/incidentRules/types';
+import {getDisplayName} from 'app/utils/environment';
+import {t, tct} from 'app/locale';
+import recreateRoute from 'app/utils/recreateRoute';
+import space from 'app/styles/space';
+
+function isIssueAlert(data: IssueAlertRule | SavedIncidentRule): data is IssueAlertRule {
+  return !data.hasOwnProperty('triggers');
+}
+
+type Props = {
+  data: IssueAlertRule | SavedIncidentRule;
+  type: 'issue' | 'metric';
+
+  // Is the alert rule editable?
+  canEdit?: boolean;
+} & Pick<
+  RouteComponentProps<{orgId: string; projectId: string}, {}>,
+  'params' | 'routes' | 'location'
+>;
+
+type State = {
+  loading: boolean;
+  error: boolean;
+};
+
+class RuleRow extends React.Component<Props, State> {
+  static propTypes: any = {
+    data: PropTypes.object.isRequired,
+    canEdit: PropTypes.bool,
+  };
+
+  state = {loading: false, error: false};
+
+  renderIssueRule(data: IssueAlertRule) {
+    const {params, routes, location, canEdit} = this.props;
+    const editLink = recreateRoute(`issue-rules/${data.id}/`, {
+      params,
+      routes,
+      location,
+    });
+
+    const environmentName = data.environment
+      ? getDisplayName({name: data.environment})
+      : t('All Environments');
+
+    return (
+      <RuleItem>
+        <div>{t('Issue')}</div>
+        <div>
+          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}
+          <RuleDescription>
+            {t('Environment')}: {environmentName}
+          </RuleDescription>
+        </div>
+
+        <TriggerAndActions>
+          <div>
+            <MatchTypeHeader>
+              {tct('[matchType] of the following:', {
+                matchType: data.actionMatch,
+              })}
+            </MatchTypeHeader>
+            {data.conditions.length !== 0 && (
+              <Conditions>
+                {data.conditions.map((condition, i) => {
+                  return <div key={i}>{condition.name}</div>;
+                })}
+              </Conditions>
+            )}
+          </div>
+
+          <div>
+            {data.actions.map((action, i) => {
+              return <div key={i}>{action.name}</div>;
+            })}
+          </div>
+        </TriggerAndActions>
+      </RuleItem>
+    );
+  }
+
+  renderMetricRule(data: SavedIncidentRule) {
+    const {params, routes, location, canEdit} = this.props;
+    const editLink = recreateRoute(`metric-rules/${data.id}/`, {
+      params,
+      routes,
+      location,
+    });
+
+    return (
+      <RuleItem>
+        <div>{t('Metric')}</div>
+        <div>
+          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}
+          <RuleDescription />
+        </div>
+
+        <div>
+          {data.triggers.length !== 0 &&
+            data.triggers.map((trigger, i) => {
+              return (
+                <TriggerAndActions key={i}>
+                  <Trigger>
+                    <StatusBadge>{trigger.label}</StatusBadge>
+                    <div>
+                      {data.aggregations[0] === 0 ? t('Events') : t('Users')}{' '}
+                      {trigger.thresholdType === 0 ? t('above') : t('below')}{' '}
+                      {trigger.alertThreshold}/{data.timeWindow}s
+                    </div>
+                  </Trigger>
+                  <div>
+                    {trigger.actions &&
+                      trigger.actions.map((action, j) => (
+                        <div key={j}>{action.type}</div>
+                      ))}
+                  </div>
+                </TriggerAndActions>
+              );
+            })}
+        </div>
+      </RuleItem>
+    );
+  }
+
+  render() {
+    const {data} = this.props;
+
+    return isIssueAlert(data) ? this.renderIssueRule(data) : this.renderMetricRule(data);
+  }
+}
+
+export default RuleRow;
+
+const RuleItem = styled(PanelItem)`
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-columns: 1fr 3fr 6fr;
+  grid-auto-flow: column;
+`;
+
+const RuleName = styled(Link)`
+  font-weight: bold;
+`;
+
+const Conditions = styled('div')`
+  display: flex;
+  flex-direction: column;
+  justify-content: space-between;
+  height: 100%;
+`;
+
+const TriggerAndActions = styled('div')`
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  grid-auto-flow: column;
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin-bottom: ${space(1)};
+`;
+
+const MatchTypeHeader = styled('div')`
+  font-weight: bold;
+  text-transform: uppercase;
+  color: ${p => p.theme.gray2};
+  margin-bottom: ${space(1)};
+`;
+
+const RuleDescription = styled('div')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin: ${space(0.5)} 0;
+`;
+
+const Trigger = styled('div')`
+  display: flex;
+  align-items: center;
+`;
+
+const StatusBadge = styled('div')`
+  background-color: ${p => p.theme.offWhite2};
+  color: ${p => p.theme.gray4};
+  text-transform: uppercase;
+  padding: ${space(0.25)} ${space(0.5)};
+  font-weight: 600;
+  margin-right: ${space(0.5)};
+  border-radius: ${p => p.theme.borderRadius};
+  font-size: ${p => p.theme.fontSizeRelativeSmall};
+`;
