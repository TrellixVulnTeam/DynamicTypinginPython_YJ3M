commit 1ff24474d667d5627a2053e6093ad7cc758f3c14
Author: Jess MacQueen <jess@getsentry.com>
Date:   Thu Nov 30 16:34:36 2017 -0800

    feat(signals): Add event_saved signal

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index ee94f39530..234e8c5114 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -33,7 +33,7 @@ from sentry.models import (
     UserReport
 )
 from sentry.plugins import plugins
-from sentry.signals import first_event_received, regression_signal, event_discarded
+from sentry.signals import event_discarded, event_saved, first_event_received, regression_signal
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import post_process_group
 from sentry.utils import metrics
@@ -610,6 +610,11 @@ class EventManager(object):
                 sender=EventManager,
             )
             raise
+        else:
+            event_saved.send_robust(
+                project=project,
+                sender=EventManager,
+            )
 
         event.group = group
         # store a reference to the group id to guarantee validation of isolation
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index ae436f7282..d556e35975 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -38,6 +38,7 @@ event_filtered = BetterSignal(providing_args=["ip", "data", "project"])
 event_received = BetterSignal(providing_args=["ip", "project"])
 pending_delete = BetterSignal(providing_args=['instance', 'actor'])
 event_processed = BetterSignal(providing_args=['project', 'group', 'event'])
+event_saved = BetterSignal(providing_args=["project"])
 
 # Organization Onboarding Signals
 project_created = BetterSignal(providing_args=["project", "user"])
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 0463d241c0..4cdae599bd 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -22,7 +22,7 @@ from sentry.models import (
     Activity, Environment, Event, Group, GroupHash, GroupRelease, GroupResolution, GroupStatus, GroupTombstone,
     EventMapping, Release
 )
-from sentry.signals import event_discarded
+from sentry.signals import event_discarded, event_saved
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase, TransactionTestCase
 
 
@@ -966,11 +966,14 @@ class EventManagerTest(TransactionTestCase):
 
         mock_event_discarded = mock.Mock()
         event_discarded.connect(mock_event_discarded)
+        mock_event_saved = mock.Mock()
+        event_saved.connect(mock_event_saved)
 
         with self.tasks():
             with self.assertRaises(HashDiscarded):
                 event = manager.save(1)
 
+        assert not mock_event_saved.called
         assert_mock_called_once_with_partial(
             mock_event_discarded,
             project=group.project,
@@ -978,6 +981,21 @@ class EventManagerTest(TransactionTestCase):
             signal=event_discarded,
         )
 
+    def test_event_saved_signal(self):
+        mock_event_saved = mock.Mock()
+        event_saved.connect(mock_event_saved)
+
+        manager = EventManager(self.make_event(message='foo'))
+        manager.normalize()
+        event = manager.save(1)
+
+        assert_mock_called_once_with_partial(
+            mock_event_saved,
+            project=event.group.project,
+            sender=EventManager,
+            signal=event_saved,
+        )
+
 
 class GetHashesFromEventTest(TestCase):
     @patch('sentry.interfaces.stacktrace.Stacktrace.compute_hashes')
