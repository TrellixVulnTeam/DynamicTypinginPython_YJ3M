commit 2521184729ba004ac99b667e6f306952b356a67f
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Oct 1 12:10:15 2019 -0700

    feat(api): Add organization request to join endpoint (#14780)

diff --git a/src/sentry/api/endpoints/accept_organization_invite.py b/src/sentry/api/endpoints/accept_organization_invite.py
index ce041a4dff..777d4c007a 100644
--- a/src/sentry/api/endpoints/accept_organization_invite.py
+++ b/src/sentry/api/endpoints/accept_organization_invite.py
@@ -26,12 +26,12 @@ class AcceptOrganizationInvite(Endpoint):
         except OrganizationMember.DoesNotExist:
             return self.respond_invalid(request)
 
-        if not helper.member_pending or not helper.valid_token:
-            return self.respond_invalid(request)
-
         om = helper.om
         organization = om.organization
 
+        if not helper.member_pending or not helper.valid_token or not om.invite_approved:
+            return self.respond_invalid(request)
+
         # Keep track of the invite email for when we land back on the login page
         request.session["invite_email"] = om.email
 
diff --git a/src/sentry/api/endpoints/organization_join_request.py b/src/sentry/api/endpoints/organization_join_request.py
new file mode 100644
index 0000000000..57ef183773
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_join_request.py
@@ -0,0 +1,82 @@
+from __future__ import absolute_import
+
+import logging
+
+from rest_framework import serializers
+from rest_framework.response import Response
+from django.db import IntegrityError
+from django.db.models import Q
+
+from sentry import experiments
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.validators import AllowedEmailField
+from sentry.app import ratelimiter
+from sentry.models import AuthProvider, InviteStatus, OrganizationMember
+
+JOIN_REQUEST_EXPERIMENT = "JoinRequestExperiment"
+
+logger = logging.getLogger(__name__)
+
+
+class JoinRequestSerializer(serializers.Serializer):
+    email = AllowedEmailField(max_length=75, required=True)
+
+
+def create_organization_join_request(organization, email, ip_address=None):
+    # users can already join organizations with SSO enabled without an invite
+    # so no need to allow requests to join as well
+    if AuthProvider.objects.filter(organization=organization).exists():
+        return
+
+    if OrganizationMember.objects.filter(
+        Q(email__iexact=email) | Q(user__is_active=True, user__email__iexact=email),
+        organization=organization,
+    ).exists():
+        return
+
+    try:
+        om = OrganizationMember.objects.create(
+            organization=organization,
+            email=email,
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+    except IntegrityError:
+        pass
+    else:
+        logger.info(
+            "org-join-request.created",
+            extra={
+                "organization_id": organization.id,
+                "member_id": om.id,
+                "email": email,
+                "ip_address": ip_address,
+            },
+        )
+
+
+class OrganizationJoinRequestEndpoint(OrganizationEndpoint):
+    # Disable authentication and permission requirements.
+    permission_classes = []
+
+    def post(self, request, organization):
+        ip_address = request.META["REMOTE_ADDR"]
+
+        if ratelimiter.is_limited(
+            u"org-join-request:ip:{}".format(ip_address), limit=5, window=60  # 5 per minute
+        ):
+            return Response({"detail": "Rate limit exceeded."}, status=429)
+
+        serializer = JoinRequestSerializer(data=request.data)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.validated_data
+        email = result["email"]
+
+        assignment = experiments.get(org=organization, experiment_name=JOIN_REQUEST_EXPERIMENT)
+        if assignment != 1:
+            return Response(status=403)
+
+        create_organization_join_request(organization, email, ip_address)
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index d035eee20a..c16d1e16e5 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -32,6 +32,7 @@ ERR_INSUFFICIENT_SCOPE = "You are missing the member:admin scope."
 ERR_ONLY_OWNER = "You cannot remove the only remaining owner of the organization."
 ERR_UNINVITABLE = "You cannot send an invitation to a user who is already a full member."
 ERR_EXPIRED = "You cannot resend an expired invitation without regenerating the token."
+ERR_UNAPPROVED = "You cannot send an invitiation that requires prior approval."
 
 
 def get_allowed_roles(request, organization, member=None):
@@ -157,6 +158,8 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         # XXX(dcramer): if/when this expands beyond reinvite we need to check
         # access level
         if result.get("reinvite"):
+            if not om.invite_approved:
+                return Response({"detail": ERR_UNAPPROVED}, status=400)
             if om.is_pending:
                 if result.get("regenerate"):
                     if request.access.has_scope("member:admin"):
diff --git a/src/sentry/api/invite_helper.py b/src/sentry/api/invite_helper.py
index 50d9af9d15..a182ff297c 100644
--- a/src/sentry/api/invite_helper.py
+++ b/src/sentry/api/invite_helper.py
@@ -147,6 +147,7 @@ class ApiInviteHelper(object):
     def valid_request(self):
         return (
             self.member_pending
+            and self.om.invite_approved
             and self.valid_token
             and self.user_authenticated
             and not self.needs_2fa
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 054d3c9d62..4be99304d0 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -144,6 +144,7 @@ from .endpoints.organization_releases import OrganizationReleasesEndpoint
 from .endpoints.organization_repositories import OrganizationRepositoriesEndpoint
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
 from .endpoints.organization_repository_details import OrganizationRepositoryDetailsEndpoint
+from .endpoints.organization_join_request import OrganizationJoinRequestEndpoint
 from .endpoints.organization_search_details import OrganizationSearchDetailsEndpoint
 from .endpoints.organization_searches import OrganizationSearchesEndpoint
 from .endpoints.organization_sentry_apps import OrganizationSentryAppsEndpoint
@@ -982,6 +983,11 @@ urlpatterns = patterns(
                     BroadcastIndexEndpoint.as_view(),
                     name="sentry-api-0-organization-broadcasts",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/join-request/$",
+                    OrganizationJoinRequestEndpoint.as_view(),
+                    name="sentry-api-0-organization-join-request",
+                ),
             ]
         ),
     ),
diff --git a/src/sentry/experiments/__init__.py b/src/sentry/experiments/__init__.py
index 3472b42fe0..d98c6e2adc 100644
--- a/src/sentry/experiments/__init__.py
+++ b/src/sentry/experiments/__init__.py
@@ -5,3 +5,4 @@ from .manager import ExperimentManager
 manager = ExperimentManager()
 
 all = manager.all
+get = manager.get
diff --git a/src/sentry/experiments/manager.py b/src/sentry/experiments/manager.py
index 88cc801e44..48dba06a28 100644
--- a/src/sentry/experiments/manager.py
+++ b/src/sentry/experiments/manager.py
@@ -17,10 +17,22 @@ class ExperimentManager(object):
         """
         self._experiments[experiment.__name__] = {"experiment": experiment, "param": param}
 
-    def all(self, org, actor):
-        """Returns an object with all the experiment assignments for the org."""
+    def all(self, org, actor=None):
+        """
+        Returns an object with all the experiment assignments for the org.
+        """
         assignments = {}
         for k, v in six.iteritems(self._experiments):
             cls = v["experiment"]
             assignments[k] = cls(org=org, actor=actor).get_variant(v["param"], log_exposure=False)
         return assignments
+
+    def get(self, experiment_name, org, actor=None):
+        """
+        Returns the assignment for an experiment.
+        """
+        value = self._experiments.get(experiment_name)
+        if not value:
+            return None
+        cls = value["experiment"]
+        return cls(org=org, actor=actor).get_variant(value["param"], log_exposure=False)
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 0e411440a0..5f1f8ec3aa 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -149,6 +149,18 @@ class OrganizationMember(Model):
         now = timezone.now()
         self.token_expires_at = now + timedelta(days=INVITE_DAYS_VALID)
 
+    @property
+    def invite_approved(self):
+        return self.invite_status == InviteStatus.APPROVED.value
+
+    @property
+    def requested_to_join(self):
+        return self.invite_status == InviteStatus.REQUESTED_TO_JOIN.value
+
+    @property
+    def requested_to_be_invited(self):
+        return self.invite_status == InviteStatus.REQUESTED_TO_BE_INVITED.value
+
     @property
     def is_pending(self):
         return self.user_id is None
@@ -175,7 +187,7 @@ class OrganizationMember(Model):
         return uuid4().hex + uuid4().hex
 
     def get_invite_link(self):
-        if not self.is_pending:
+        if not self.is_pending or not self.invite_approved:
             return None
         return absolute_uri(
             reverse(
diff --git a/tests/sentry/api/endpoints/test_accept_organization_invite.py b/tests/sentry/api/endpoints/test_accept_organization_invite.py
index b17150a6e0..f4f903c426 100644
--- a/tests/sentry/api/endpoints/test_accept_organization_invite.py
+++ b/tests/sentry/api/endpoints/test_accept_organization_invite.py
@@ -9,6 +9,7 @@ from sentry.models import (
     AuditLogEntry,
     AuditLogEntryEvent,
     Authenticator,
+    InviteStatus,
     Organization,
     OrganizationMember,
     TotpInterface,
@@ -52,6 +53,28 @@ class AcceptInviteTest(TestCase):
         resp = self.client.get(reverse("sentry-api-0-accept-organization-invite", args=[om.id, 2]))
         assert resp.status_code == 400
 
+    def test_invite_not_pending(self):
+        user = self.create_user(email="test@gmail.com")
+        om = OrganizationMember.objects.create(
+            email="newuser@example.com", token="abc", organization=self.organization, user=user
+        )
+        resp = self.client.get(
+            reverse("sentry-api-0-accept-organization-invite", args=[om.id, om.token])
+        )
+        assert resp.status_code == 400
+
+    def test_invite_unapproved(self):
+        om = OrganizationMember.objects.create(
+            email="newuser@example.com",
+            token="abc",
+            organization=self.organization,
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+        resp = self.client.get(
+            reverse("sentry-api-0-accept-organization-invite", args=[om.id, om.token])
+        )
+        assert resp.status_code == 400
+
     def test_needs_authentication(self):
         om = OrganizationMember.objects.create(
             email="newuser@example.com", token="abc", organization=self.organization
@@ -164,6 +187,26 @@ class AcceptInviteTest(TestCase):
         assert om.is_pending, "should not have been accepted"
         assert om.token, "should not have been accepted"
 
+    def test_cannot_accept_unapproved_invite(self):
+        self.login_as(self.user)
+
+        om = OrganizationMember.objects.create(
+            email="newuser@example.com",
+            role="member",
+            token="abc",
+            organization=self.organization,
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+        resp = self.client.post(
+            reverse("sentry-api-0-accept-organization-invite", args=[om.id, om.token])
+        )
+        assert resp.status_code == 400
+
+        om = OrganizationMember.objects.get(id=om.id)
+        assert not om.invite_approved
+        assert om.is_pending
+        assert om.token
+
     def test_member_already_exists(self):
         self.login_as(self.user)
 
diff --git a/tests/sentry/api/endpoints/test_organization_join_request.py b/tests/sentry/api/endpoints/test_organization_join_request.py
new file mode 100644
index 0000000000..80fac46996
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_join_request.py
@@ -0,0 +1,134 @@
+from __future__ import absolute_import
+
+from exam import fixture
+from mock import patch
+
+from sentry.models import AuthProvider, InviteStatus, OrganizationMember
+from sentry.testutils import APITestCase
+from sentry.api.endpoints.organization_join_request import JOIN_REQUEST_EXPERIMENT
+
+
+class OrganizationJoinRequestTest(APITestCase):
+    endpoint = "sentry-api-0-organization-join-request"
+    method = "post"
+
+    def setUp(self):
+        super(OrganizationJoinRequestTest, self).setUp()
+        self.email = "test@example.com"
+        self.org = self.create_organization(owner=self.user)
+
+    @fixture
+    def owner(self):
+        return OrganizationMember.objects.get(user=self.user, organization=self.org)
+
+    def test_email_required(self):
+        resp = self.get_response(self.org.slug)
+        assert resp.status_code == 400
+        assert resp.data["email"][0] == "This field is required."
+
+    def test_invalid_email(self):
+        resp = self.get_response(self.org.slug, email="invalid-email")
+        assert resp.data["email"][0] == "Enter a valid email address."
+
+    def test_invalid_org_slug(self):
+        resp = self.get_response("invalid-slug", email=self.email)
+        assert resp.status_code == 404
+
+    @patch(
+        "sentry.api.endpoints.organization_join_request.ratelimiter.is_limited", return_value=True
+    )
+    def test_ratelimit(self, is_limited):
+        resp = self.get_response(self.org.slug, email=self.email)
+        assert resp.status_code == 429
+        assert resp.data["detail"] == "Rate limit exceeded."
+
+    @patch("sentry.experiments.get", return_value=-1)
+    def test_experiment(self, mock_experiment):
+        resp = self.get_response(self.org.slug, email=self.email)
+        assert resp.status_code == 403
+
+        mock_experiment.assert_called_once_with(
+            org=self.org, experiment_name=JOIN_REQUEST_EXPERIMENT
+        )
+
+    @patch("sentry.api.endpoints.organization_join_request.logger")
+    @patch("sentry.experiments.get", return_value=1)
+    def test_org_sso_enabled(self, mock_experiment, mock_log):
+        AuthProvider.objects.create(organization=self.org, provider="google")
+
+        resp = self.get_response(self.org.slug, email=self.email)
+        assert resp.status_code == 204
+
+        member = OrganizationMember.objects.get(organization=self.org)
+        assert member == self.owner
+        assert not mock_log.info.called
+
+    @patch("sentry.api.endpoints.organization_join_request.logger")
+    @patch("sentry.experiments.get", return_value=1)
+    def test_user_already_exists(self, mock_experiment, mock_log):
+        resp = self.get_response(self.org.slug, email=self.user.email)
+        assert resp.status_code == 204
+
+        member = OrganizationMember.objects.get(organization=self.org)
+        assert member == self.owner
+        assert not mock_log.info.called
+
+    @patch("sentry.api.endpoints.organization_join_request.logger")
+    @patch("sentry.experiments.get", return_value=1)
+    def test_pending_member_already_exists(self, mock_experiment, mock_log):
+        pending_email = "pending@example.com"
+        original_pending = self.create_member(
+            email=pending_email, organization=self.org, role="admin"
+        )
+
+        resp = self.get_response(self.org.slug, email=pending_email)
+        assert resp.status_code == 204
+
+        members = OrganizationMember.objects.filter(organization=self.org)
+        assert members.count() == 2
+        pending = members.get(email=pending_email)
+        assert pending == original_pending
+        assert not mock_log.info.called
+
+    @patch("sentry.api.endpoints.organization_join_request.logger")
+    @patch("sentry.experiments.get", return_value=1)
+    def test_already_requested_to_join(self, mock_experiment, mock_log):
+        join_request_email = "join-request@example.com"
+        original_join_request = self.create_member(
+            email=join_request_email,
+            organization=self.org,
+            role="member",
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+
+        resp = self.get_response(self.org.slug, email=join_request_email)
+        assert resp.status_code == 204
+
+        members = OrganizationMember.objects.filter(organization=self.org)
+        assert members.count() == 2
+        join_request = members.get(email=join_request_email)
+        assert join_request == original_join_request
+        assert not mock_log.info.called
+
+    @patch("sentry.api.endpoints.organization_join_request.logger")
+    @patch("sentry.experiments.get", return_value=1)
+    def test_request_to_join(self, mock_experiment, mock_log):
+        resp = self.get_response(self.org.slug, email=self.email)
+        assert resp.status_code == 204
+
+        members = OrganizationMember.objects.filter(organization=self.org)
+        assert members.count() == 2
+        join_request = members.get(email=self.email)
+        assert join_request.user is None
+        assert join_request.role == "member"
+        assert not join_request.invite_approved
+
+        mock_log.info.assert_called_once_with(
+            "org-join-request.created",
+            extra={
+                "organization_id": self.org.id,
+                "member_id": join_request.id,
+                "email": self.email,
+                "ip_address": "127.0.0.1",
+            },
+        )
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index ead23c7965..9809048bd0 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -7,9 +7,11 @@ from django.core.urlresolvers import reverse
 from django.db.models import F
 from mock import patch
 
+from sentry.api.endpoints.organization_member_details import ERR_UNAPPROVED
 from sentry.models import (
     Authenticator,
     AuthProvider,
+    InviteStatus,
     Organization,
     OrganizationMember,
     OrganizationMemberTeam,
@@ -57,7 +59,7 @@ class UpdateOrganizationMemberTest(APITestCase):
         mock_send_invite_email.assert_called_once_with()
 
     @patch("sentry.models.OrganizationMember.send_invite_email")
-    def test_member_no_regenerate_invite_pending_member(self, mock_send_invite_email):
+    def test_member_cannot_regenerate_pending_invite(self, mock_send_invite_email):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name="foo", owner=self.user)
@@ -83,7 +85,7 @@ class UpdateOrganizationMemberTest(APITestCase):
         assert not mock_send_invite_email.mock_calls
 
     @patch("sentry.models.OrganizationMember.send_invite_email")
-    def test_regenerate_invite_pending_member(self, mock_send_invite_email):
+    def test_admin_can_regenerate_pending_invite(self, mock_send_invite_email):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name="foo", owner=self.user)
@@ -154,6 +156,50 @@ class UpdateOrganizationMemberTest(APITestCase):
         member = OrganizationMember.objects.get(pk=member.id)
         assert member.token_expired is False
 
+    @patch("sentry.models.OrganizationMember.send_invite_email")
+    def test_cannot_reinvite_unapproved_invite(self, mock_send_invite_email):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name="foo", owner=self.user)
+        member = self.create_member(
+            organization=organization,
+            email="foo@example.com",
+            role="member",
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+
+        path = reverse(
+            "sentry-api-0-organization-member-details", args=[organization.slug, member.id]
+        )
+        self.login_as(self.user)
+        resp = self.client.put(path, data={"reinvite": 1})
+
+        assert resp.status_code == 400
+        assert ERR_UNAPPROVED in resp.content
+        assert mock_send_invite_email.called is False
+
+    @patch("sentry.models.OrganizationMember.send_invite_email")
+    def test_cannot_regenerate_unapproved_invite(self, mock_send_invite_email):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name="foo", owner=self.user)
+        member = self.create_member(
+            organization=organization,
+            email="foo@example.com",
+            role="member",
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+
+        path = reverse(
+            "sentry-api-0-organization-member-details", args=[organization.slug, member.id]
+        )
+        self.login_as(self.user)
+        resp = self.client.put(path, data={"reinvite": 1, "regenerate": 1})
+
+        assert resp.status_code == 400
+        assert ERR_UNAPPROVED in resp.content
+        assert mock_send_invite_email.called is False
+
     def test_reinvite_sso_link(self):
         self.login_as(user=self.user)
 
@@ -174,19 +220,16 @@ class UpdateOrganizationMemberTest(APITestCase):
         assert resp.status_code == 200
         assert len(mail.outbox) == 1
 
-    # Normal users can not see invite link
-    def test_get_member_invite_link_for_admin(self):
+    def test_admin_can_get_invite_link(self):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name="foo", owner=self.user)
 
-        # User that will be pending
-        pending_member_om = self.create_member(
+        pending_om = self.create_member(
             user=None, email="bar@example.com", organization=organization, role="member", teams=[]
         )
         path = reverse(
-            "sentry-api-0-organization-member-details",
-            args=[organization.slug, pending_member_om.id],
+            "sentry-api-0-organization-member-details", args=[organization.slug, pending_om.id]
         )
 
         self.login_as(self.user)
@@ -194,16 +237,14 @@ class UpdateOrganizationMemberTest(APITestCase):
         resp = self.client.get(path)
 
         assert resp.status_code == 200
-        assert resp.data["invite_link"] != ""
+        assert resp.data["invite_link"] == pending_om.get_invite_link()
 
-    # Normal users can not see invite link
-    def test_get_member_no_invite_link(self):
+    def test_member_cannot_get_invite_link(self):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name="foo", owner=self.user)
 
-        # User that will be pending
-        pending_member_om = self.create_member(
+        pending_om = self.create_member(
             user=None, email="bar@example.com", organization=organization, role="member", teams=[]
         )
 
@@ -211,8 +252,7 @@ class UpdateOrganizationMemberTest(APITestCase):
         self.create_member(organization=organization, user=member, role="member")
 
         path = reverse(
-            "sentry-api-0-organization-member-details",
-            args=[organization.slug, pending_member_om.id],
+            "sentry-api-0-organization-member-details", args=[organization.slug, pending_om.id]
         )
 
         self.login_as(member)
@@ -222,6 +262,30 @@ class UpdateOrganizationMemberTest(APITestCase):
         assert resp.status_code == 200
         assert "invite_link" not in resp.data
 
+    def test_cannot_get_unapproved_invite_link(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name="foo", owner=self.user)
+
+        pending_om = self.create_member(
+            user=None,
+            email="bar@example.com",
+            organization=organization,
+            role="member",
+            teams=[],
+            invite_status=InviteStatus.REQUESTED_TO_JOIN.value,
+        )
+        path = reverse(
+            "sentry-api-0-organization-member-details", args=[organization.slug, pending_om.id]
+        )
+
+        self.login_as(self.user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+        assert resp.data["invite_link"] is None
+
     def test_get_member_list_teams(self):
         self.login_as(user=self.user)
 
