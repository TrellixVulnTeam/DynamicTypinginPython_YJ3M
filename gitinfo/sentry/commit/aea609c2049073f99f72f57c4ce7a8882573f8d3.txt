commit aea609c2049073f99f72f57c4ce7a8882573f8d3
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jun 10 15:03:05 2012 -0700

    Further additions and improvements to notifications, including draft code for filtering down alertable users within the plugin.

diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index b1ba14e93a..c62c0fbd4d 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -128,6 +128,7 @@ INSTALLED_APPS = (
     'django.contrib.sites',
     'django.contrib.messages',
 
+    'crispy_forms',
     'djcelery',
     'kombu.transport.django',
     'raven.contrib.django',
diff --git a/sentry/plugins/base.py b/sentry/plugins/base.py
index 2f3955f7e8..a5f22ddcf1 100644
--- a/sentry/plugins/base.py
+++ b/sentry/plugins/base.py
@@ -430,6 +430,17 @@ class IPlugin(local):
         """
         return []
 
+    def get_notification_forms(self, **kwargs):
+        """
+        Provides additional UserOption forms for the Notification Settings page.
+
+        Must return an iterable.
+
+        >>> def get_notification_forms(self, **kwargs):
+        >>>     return [MySettingsForm]
+        """
+        return []
+
 
 class Plugin(IPlugin):
     """
diff --git a/sentry/plugins/bases/notify.py b/sentry/plugins/bases/notify.py
index b8404e0334..c75a60eaee 100644
--- a/sentry/plugins/bases/notify.py
+++ b/sentry/plugins/bases/notify.py
@@ -11,25 +11,84 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
 from sentry.plugins import Plugin
 from sentry.models import UserOption
+from sentry.web.helpers import get_project_list
 
 
-class NotifyConfigurationForm(forms.Form):
+class NotificationConfigurationForm(forms.Form):
     send_to_members = forms.BooleanField(label=_('Include project members'), initial=False, required=False,
         help_text=_('Notify members of this project.'))
     send_to_admins = forms.BooleanField(label=_('Include sentry admins'), initial=False, required=False,
         help_text=_('Notify administrators of this Sentry server.'))
 
 
-class NotifyPlugin(Plugin):
-    description = _("Notify project members when a new event is seen for the first time, or when an "
-                   "already resolved event has changed back to unresolved.")
-    # site_conf_form = NotifyConfigurationForm
-    project_conf_form = NotifyConfigurationForm
+class BaseNotificationUserOptionsForm(forms.Form):
+    def __init__(self, plugin, user, *args, **kwargs):
+        self.plugin = plugin
+        self.user = user
+        super(BaseNotificationUserOptionsForm, self).__init__(*args, **kwargs)
+
+    def get_title(self):
+        raise NotImplementedError
+
+    def get_description(self):
+        return ""
+
+    def save(self):
+        raise NotImplementedError
+
+
+class NotificationUserOptionsForm(BaseNotificationUserOptionsForm):
+    projects = forms.MultipleChoiceField(choices=(), widget=forms.CheckboxSelectMultiple(), required=False)
+
+    def __init__(self, *args, **kwargs):
+        super(NotificationUserOptionsForm, self).__init__(*args, **kwargs)
+        user = self.user
+        self.project_list = get_project_list(user, key='slug')
+        project_list = sorted(self.project_list.items())
+        self.fields['projects'].choices = project_list
+        self.fields['projects'].widget.choices = self.fields['projects'].choices
+
+        enabled_projects = []
+        for slug, project in project_list:
+            is_enabled = self.plugin.get_option('alert', project=project, user=user)
+            if is_enabled == 1 or is_enabled is None:
+                enabled_projects.append(slug)
+        self.fields['projects'].initial = enabled_projects
+
+    def get_title(self):
+        return self.plugin.get_conf_title()
+
+    def get_description(self):
+        return _('Send notifications for new events when a new event is seen, or when an '
+                 'already resolved event has changed back to unresolved.')
+
+    def save(self):
+        user = self.user
+        projects = self.cleaned_data.get('projects')
+
+        for slug, project in self.project_list.iteritems():
+            self.plugin.set_option('alert', int(slug in projects), user=user, project=project)
+
+
+class NotificationPlugin(Plugin):
+    description = _('Notify project members when a new event is seen for the first time, or when an '
+                    'already resolved event has changed back to unresolved.')
+    # site_conf_form = NotificationConfigurationForm
+    project_conf_form = NotificationConfigurationForm
 
     def notify_users(self, group, event, fail_silently=False):
         raise NotImplementedError
 
     def get_send_to(self, project=None):
+        """
+        Returns a list of email addresses for the users that should be notified of alerts.
+
+        The logic for this is a bit complicated, but it does the following:
+
+        - Includes admins if ``send_to_admins`` is enabled.
+        - Includes members if ``send_to_members`` is enabled **and** the user has not disabled alerts
+          for this project
+        """
         # TODO: this method is pretty expensive, and users is a small enough amount of data that we should
         # be able to keep most of this in memory constantly
         send_to_list = set()
@@ -41,8 +100,17 @@ class NotifyPlugin(Plugin):
 
         send_to_members = self.get_option('send_to_members', project)
         if send_to_members and project and project.team:
-            member_set = set(project.team.member_set.values_list('user', flat=True))
+            # fetch users whom have disabled alerts for this plugin
+            disabled = set(UserOption.objects.filter(
+                project=project,
+                key='%s:alert' % self.get_conf_key,
+                value=0,
+            ).values_list('user', flat=True))
+
+            # fetch remaining users
+            member_set = set(project.team.member_set.exclude(user__in=disabled).values_list('user', flat=True))
 
+            # we need to first fetch their specified alert email address
             alert_queryset = UserOption.objects.filter(
                 user__in=member_set,
                 key='alert_email',
@@ -50,13 +118,11 @@ class NotifyPlugin(Plugin):
                 'user',
                 'alert_email',
             )
-
-            # We need to first fetch their specified alert email address
             for user_id, email in alert_queryset:
                 member_set.remove(user_id)
                 send_to_list.add(email)
 
-            # If any didnt exist, grab their default email
+            # if any didnt exist, grab their default email
             if member_set:
                 send_to_list |= set(User.objects.filter(pk__in=member_set).values_list('email', flat=True))
 
@@ -87,6 +153,9 @@ class NotifyPlugin(Plugin):
     def get_form_initial(self, project=None):
         return {'send_to_members': True}
 
+    def get_notification_forms(self, **kwargs):
+        return [NotificationUserOptionsForm]
+
     def post_process(self, group, event, is_new, is_sample, **kwargs):
         if not is_new:
             return
@@ -95,3 +164,7 @@ class NotifyPlugin(Plugin):
             return
 
         self.notify_users(group, event)
+
+# Backwards-compatibility
+NotifyConfigurationForm = NotificationConfigurationForm
+NotifyPlugin = NotificationPlugin
diff --git a/sentry/plugins/helpers.py b/sentry/plugins/helpers.py
index de4c317f12..3dd37074c6 100644
--- a/sentry/plugins/helpers.py
+++ b/sentry/plugins/helpers.py
@@ -24,7 +24,7 @@ def set_option(key, value, project=None, user=None):
 
 def get_option(key, project=None, user=None):
     if user:
-        result = UserOption.objects.get_value(user, project, key)
+        result = UserOption.objects.get_value(user, project, key, None)
     elif project:
         result = ProjectOption.objects.get_value(project, key, None)
     else:
diff --git a/sentry/plugins/sentry_mail/models.py b/sentry/plugins/sentry_mail/models.py
index 0e087809b3..ed7a35f580 100644
--- a/sentry/plugins/sentry_mail/models.py
+++ b/sentry/plugins/sentry_mail/models.py
@@ -14,7 +14,7 @@ from django.template.loader import render_to_string
 from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
 from sentry.plugins import register
-from sentry.plugins.bases.notify import NotifyPlugin, NotifyConfigurationForm
+from sentry.plugins.bases.notify import NotificationPlugin, NotificationConfigurationForm
 import re
 
 from pynliner import Pynliner
@@ -34,7 +34,7 @@ class UnicodeSafePynliner(Pynliner):
         return self.output
 
 
-class MailConfigurationForm(NotifyConfigurationForm):
+class MailConfigurationForm(NotificationConfigurationForm):
     send_to = forms.CharField(label=_('Send to'), required=False,
         help_text=_('Enter one or more emails separated by commas or lines.'),
         widget=forms.Textarea(attrs={
@@ -49,7 +49,7 @@ class MailConfigurationForm(NotifyConfigurationForm):
         return ','.join(emails)
 
 
-class MailProcessor(NotifyPlugin):
+class MailProcessor(NotificationPlugin):
     title = _('Mail')
     conf_key = 'mail'
     slug = 'mail'
@@ -157,11 +157,12 @@ class MailProcessor(NotifyPlugin):
             headers=headers,
         )
 
-    def get_option(self, key, project=None):
-        value = super(MailProcessor, self).get_option(key, project)
+    def get_option(self, key, *args, **kwargs):
+        value = super(MailProcessor, self).get_option(key, *args, **kwargs)
         if value is None and key in ('min_level', 'include_loggers', 'exclude_loggers',
                                      'send_to_members', 'send_to_admins', 'send_to',
                                      'subject_prefix'):
             value = getattr(self, key)
         return value
+
 register(MailProcessor)
diff --git a/sentry/templates/sentry/account/notifications.html b/sentry/templates/sentry/account/notifications.html
index 10aa165e54..c5099c23f1 100644
--- a/sentry/templates/sentry/account/notifications.html
+++ b/sentry/templates/sentry/account/notifications.html
@@ -1,5 +1,6 @@
 {% extends "sentry/account/base.html" %}
 
+{% load crispy_forms_tags %}
 {% load i18n %}
 {% load sentry_helpers %}
 
@@ -18,22 +19,27 @@
 {% block inner %}
     <form action="" method="post">
         {% csrf_token %}
-        {% if form.non_field_errors %}
-            <div class="alert alert-block alert-error">
-                <p>{% trans "There were errors saving your changes:" %}</p>
-                <ul>
-                    {% for error in form.non_field_errors %}
-                        <li>{{ error }}</li>
-                    {% endfor %}
-                </ul>
-            </div>
-        {% endif %}
-        <fieldset>
-            <div><legend>{% trans "General" %}</legend></div>
-            {% for field in form %}
-                {% include "sentry/partial/_form_field.html" %}
-            {% endfor %}
-        </fieldset>
+        {% for form, helper in forms %}
+            {% if form.non_field_errors %}
+                <div class="alert alert-block alert-error">
+                    <p>{% trans "There were errors saving your changes:" %}</p>
+                    <ul>
+                        {% for error in form.non_field_errors %}
+                            <li>{{ error }}</li>
+                        {% endfor %}
+                    </ul>
+                </div>
+            {% endif %}
+            <fieldset>
+                <div><legend>{{ form.get_title }}</legend></div>
+                {% with form.get_description as description %}
+                    {% if description %}
+                        {{ description|linebreaks }}
+                    {% endif %}
+                {% endwith %}
+                {% crispy form helper %}
+            </fieldset>
+        {% endfor %}
         <fieldset class="form-actions">
             <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
         </fieldset>
diff --git a/sentry/web/forms/__init__.py b/sentry/web/forms/__init__.py
index 6566618dcd..536c72d4b1 100644
--- a/sentry/web/forms/__init__.py
+++ b/sentry/web/forms/__init__.py
@@ -11,8 +11,7 @@ from django.contrib.auth.models import User
 from django.core.validators import URLValidator
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.conf import settings
-from sentry.models import Project, UserOption
+from sentry.models import Project
 from sentry.interfaces import Http
 from sentry.permissions import can_set_public_projects
 from sentry.web.forms.fields import RadioFieldRenderer, UserField
@@ -166,64 +165,3 @@ class RemoveUserForm(forms.Form):
         ('1', _('Disable the account.')),
         ('2', _('Permanently remove the user and their data.')),
     ), widget=forms.RadioSelect(renderer=RadioFieldRenderer))
-
-
-class NotificationSettingsForm(forms.Form):
-    alert_email = forms.EmailField(help_text='Designate an alternative email address to send email notifications to.')
-
-    def __init__(self, user, *args, **kwargs):
-        self.user = user
-        super(NotificationSettingsForm, self).__init__(*args, **kwargs)
-        self.fields['alert_email'].initial = UserOption.objects.get_value(
-            user=self.user,
-            project=None,
-            key='alert_email',
-            default=user.email,
-        )
-
-    def save(self):
-        UserOption.objects.set_value(
-            user=self.user,
-            project=None,
-            key='alert_email',
-            value=self.cleaned_data['alert_email'],
-        )
-
-
-class AccountSettingsForm(forms.Form):
-    old_password = forms.CharField(label=_("Current password"), widget=forms.PasswordInput)
-    email = forms.EmailField()
-    first_name = forms.CharField(required=True, label='Name')
-    new_password1 = forms.CharField(label=_("New password"), widget=forms.PasswordInput, required=False)
-    new_password2 = forms.CharField(label=_("New password confirmation"), widget=forms.PasswordInput, required=False)
-    language = forms.ChoiceField(label=_('Language'), choices=settings.LANGUAGES)
-
-    def __init__(self, user, *args, **kwargs):
-        self.user = user
-        super(AccountSettingsForm, self).__init__(*args, **kwargs)
-
-    def clean_new_password2(self):
-        password1 = self.cleaned_data.get('new_password1')
-        password2 = self.cleaned_data.get('new_password2')
-        if password1 and password2:
-            if password1 != password2:
-                raise forms.ValidationError(_("The two password fields didn't match."))
-        return password2
-
-    def clean_old_password(self):
-        """
-        Validates that the old_password field is correct.
-        """
-        old_password = self.cleaned_data["old_password"]
-        if not isinstance(authenticate(username=self.user.username, password=old_password), User):
-            raise forms.ValidationError(_("Your old password was entered incorrectly. Please enter it again."))
-        return old_password
-
-    def save(self, commit=True):
-        if self.cleaned_data['new_password2']:
-            self.user.set_password(self.cleaned_data['new_password1'])
-        self.user.first_name = self.cleaned_data['first_name']
-        self.user.email = self.cleaned_data['email']
-        if commit:
-            self.user.save()
-        return self.user
diff --git a/sentry/web/forms/accounts.py b/sentry/web/forms/accounts.py
new file mode 100644
index 0000000000..dce60cf45e
--- /dev/null
+++ b/sentry/web/forms/accounts.py
@@ -0,0 +1,79 @@
+"""
+sentry.web.forms.accounts
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from django import forms
+from django.contrib.auth import authenticate
+from django.contrib.auth.models import User
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.conf import settings
+from sentry.models import UserOption
+
+
+class NotificationSettingsForm(forms.Form):
+    alert_email = forms.EmailField(help_text='Designate an alternative email address to send email notifications to.')
+
+    def __init__(self, user, *args, **kwargs):
+        self.user = user
+        super(NotificationSettingsForm, self).__init__(*args, **kwargs)
+        self.fields['alert_email'].initial = UserOption.objects.get_value(
+            user=self.user,
+            project=None,
+            key='alert_email',
+            default=user.email,
+        )
+
+    def get_title(self):
+        return "General"
+
+    def save(self):
+        UserOption.objects.set_value(
+            user=self.user,
+            project=None,
+            key='alert_email',
+            value=self.cleaned_data['alert_email'],
+        )
+
+
+class AccountSettingsForm(forms.Form):
+    old_password = forms.CharField(label=_('Current password'), widget=forms.PasswordInput)
+    email = forms.EmailField(label=_('Email'))
+    first_name = forms.CharField(required=True, label=_('Name'))
+    new_password1 = forms.CharField(label=_('New password'), widget=forms.PasswordInput, required=False)
+    new_password2 = forms.CharField(label=_('New password confirmation'), widget=forms.PasswordInput, required=False)
+    language = forms.ChoiceField(label=_('Language'), choices=settings.LANGUAGES)
+
+    def __init__(self, user, *args, **kwargs):
+        self.user = user
+        super(AccountSettingsForm, self).__init__(*args, **kwargs)
+
+    def clean_new_password2(self):
+        password1 = self.cleaned_data.get('new_password1')
+        password2 = self.cleaned_data.get('new_password2')
+        if password1 and password2:
+            if password1 != password2:
+                raise forms.ValidationError(_("The two password fields didn't match."))
+        return password2
+
+    def clean_old_password(self):
+        """
+        Validates that the old_password field is correct.
+        """
+        old_password = self.cleaned_data["old_password"]
+        if not isinstance(authenticate(username=self.user.username, password=old_password), User):
+            raise forms.ValidationError(_("Your old password was entered incorrectly. Please enter it again."))
+        return old_password
+
+    def save(self, commit=True):
+        if self.cleaned_data['new_password2']:
+            self.user.set_password(self.cleaned_data['new_password1'])
+        self.user.first_name = self.cleaned_data['first_name']
+        self.user.email = self.cleaned_data['email']
+        if commit:
+            self.user.save()
+        return self.user
diff --git a/sentry/web/frontend/accounts.py b/sentry/web/frontend/accounts.py
index 9229e3e976..98596b2873 100644
--- a/sentry/web/frontend/accounts.py
+++ b/sentry/web/frontend/accounts.py
@@ -5,15 +5,18 @@ sentry.web.frontend.accounts
 :copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from crispy_forms.helper import FormHelper
 from django.conf import settings as dj_settings
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
+from sentry.plugins import plugins
 from sentry.web.decorators import login_required
-from sentry.web.forms import AccountSettingsForm, NotificationSettingsForm
+from sentry.web.forms.accounts import AccountSettingsForm, NotificationSettingsForm
 from sentry.web.helpers import render_to_response
+from sentry.utils.safe import safe_execute
 
 
 @csrf_protect
@@ -71,15 +74,33 @@ def settings(request):
 @csrf_protect
 @login_required
 def notification_settings(request):
-    form = NotificationSettingsForm(request.user, request.POST or None)
-    if form.is_valid():
-        form.save()
-        response = HttpResponseRedirect(reverse('sentry-account-settings-notifications') + '?success=1')
-        return response
+    forms = []
+    for plugin in plugins.all():
+        for form in safe_execute(plugin.get_notification_forms) or ():
+            form = safe_execute(form, plugin, request.user, request.POST or None)
+            if not form:
+                continue
+            helper = FormHelper()
+            helper.form_tag = False
+            forms.append((form, helper))
+
+    # Ensure our form comes first
+    helper = FormHelper()
+    helper.form_tag = False
+    forms = [
+        (NotificationSettingsForm(request.user, request.POST or None), helper),
+    ] + forms
+
+    if request.POST:
+        if all(f.is_valid() for f, h in forms):
+            for form, helper in forms:
+                form.save()
+            response = HttpResponseRedirect(reverse('sentry-account-settings-notifications') + '?success=1')
+            return response
 
     context = csrf(request)
     context.update({
-        'form': form,
+        'forms': forms,
         'page': 'notifications',
     })
     return render_to_response('sentry/account/notifications.html', context, request)
diff --git a/setup.py b/setup.py
index abb9bc5b44..17cb565c92 100755
--- a/setup.py
+++ b/setup.py
@@ -50,6 +50,7 @@ install_requires = [
     'cssutils>=0.9.9',
     'BeautifulSoup>=3.2.1',
     'django-celery>=2.5.5,<3.0',
+    'django-crispy-forms>=1.1.4',
     'Django>=1.2,<1.4',
     'django-indexer>=0.3.0',
     'django-paging>=0.2.4',
