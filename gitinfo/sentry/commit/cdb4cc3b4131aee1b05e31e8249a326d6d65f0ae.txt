commit cdb4cc3b4131aee1b05e31e8249a326d6d65f0ae
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 26 01:11:30 2011 -0800

    Added interface documentation

diff --git a/docs/index.rst b/docs/index.rst
index cc083a85fa..2f4f5e765b 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -19,6 +19,7 @@ with Sentry, or you want to use a client in a non-Django application, we suggest
 
    install/index
    config/index
+   interfaces/index
    technical/index
    contributing/index
 
diff --git a/docs/interfaces/index.rst b/docs/interfaces/index.rst
new file mode 100644
index 0000000000..0afe22b62b
--- /dev/null
+++ b/docs/interfaces/index.rst
@@ -0,0 +1,133 @@
+Interfaces
+==========
+
+.. contents::
+    :local:
+.. currentmodule:: disqus.interfaces
+
+Sentry implements data interfaces for storing structured data. At it's core, an interface describes what it's storing, and optionally how it's data should be rendered.
+
+.. class:: sentry.interfaces.Message
+
+    A standard message consisting of a ``message`` arg, and an optional
+    ``params`` arg for formatting.
+
+    ::
+
+        {
+            message: 'My raw message with interpreted strings like %s',
+            params: ['this']
+        }
+
+.. class:: sentry.interfaces.Exception
+
+    A standard exception with mandatory ``type`` and ``value`` arguments, and an optional
+    ``module`` argument describing the exception type's module namespace.
+
+    ::
+
+        {
+            type: 'ValueError',
+            value: 'My exception value',
+            module: '__builtins__'
+        }
+
+.. class:: sentry.interfaces.Stacktrace
+
+    A stacktrace contains a list of frames, each with various bits (most optional)
+    describing the context of that frame.
+
+    ::
+
+        {
+            frames: {
+                filename: '/real/file/name.py',
+                function: 'myfunction',
+                vars: {
+                    key: value
+                },
+                pre_context: [
+                    'line1',
+                    'line2'
+                ],
+                context_line: 'line3',
+                lineno: 3,
+                post_context: [
+                    'line4',
+                    'line5'
+                ],
+            }
+        }
+
+
+.. class:: sentry.interfaces.Template
+
+    A rendered template (generally used like a frame in a stacktrace).
+
+    ::
+
+        {
+            filename: '/real/file/name.html',
+            pre_context: [
+                'line1',
+                'line2'
+            ],
+            context_line: 'line3',
+            lineno: 3,
+            post_context: [
+                'line4',
+                'line5'
+            ],
+        }
+
+
+.. class:: sentry.interfaces.Http
+
+    The Request information is stored in the Http interface. Two arguments
+    are required: ``url`` and ``method``.
+
+    The ``env`` variable is a compounded dictionary of HTTP headers as well
+    as environment information passed from the webserver.
+
+    The ``data`` variable should only contain the request body (not the query
+    string). It can either be a dictionary (for standard HTTP requests) or a
+    raw request body.
+
+    ::
+
+        {
+            url: 'http://absolute.uri/foo',
+            method: 'POST',
+            data: {foo: 'bar'},
+            query_string: 'hello=world',
+            cookies: 'foo=bar',
+            env: {REMOTE_ADDR: '192.168.0.1'}
+        }
+
+.. class:: sentry.interfaces.User
+
+    An interface which describes the authenticated User for a request.
+
+    All data is arbitrary, but a couple of fields are expected: ``id``
+    and ``is_authenticated`` (a boolean).
+
+    ::
+
+        {
+            is_authenticated: true,
+            id: 'unique_id',
+            username: 'foo',
+            email: 'foo@example.com'
+        }
+
+
+.. class:: sentry.interfaces.Query
+
+    A SQL query with an optional string describing the SQL driver, ``engine``.
+
+    ::
+
+        {
+            query: 'SELECT 1'
+            engine: 'psycopg2'
+        }
diff --git a/sentry/interfaces.py b/sentry/interfaces.py
index c8238a9b86..9748f7b93c 100644
--- a/sentry/interfaces.py
+++ b/sentry/interfaces.py
@@ -70,7 +70,7 @@ class Message(Interface):
 
 
 class Query(Interface):
-    def __init__(self, query, engine):
+    def __init__(self, query, engine=None):
         self.query = query
         self.engine = engine
 
@@ -82,27 +82,6 @@ class Query(Interface):
 
 
 class Stacktrace(Interface):
-    """
-    {
-        frames: {
-            filename: '/real/file/name.py',
-            function: 'myfunction',
-            vars: {
-                key: value
-            },
-            pre_context: [
-                'line1',
-                'line2'
-            ],
-            context_line: 'line3',
-            lineno: 7,
-            post_context: [
-                'line4',
-                'line5'
-            ],
-        }
-    }
-    """
     def __init__(self, frames):
         self.frames = frames
 
@@ -160,16 +139,6 @@ class Exception(Interface):
 
 
 class Http(Interface):
-    """
-    {
-        url: 'http://absolute.uri/foo',
-        method: 'GET',
-        data: {foo: 'bar'},
-        query_string: 'hello=world&foo=bar',
-        cookies: 'foo=bar',
-        env: {REMOTE_ADDR: '192.168.0.1'}
-    }
-    """
     score = 100
 
     # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
@@ -198,7 +167,7 @@ class Http(Interface):
         self.data = data
         self.query_string = query_string
         self.env = env or {}
-        self.cookies = cookies or {}
+        self.cookies = cookies or None
 
     def serialize(self):
         return {
@@ -224,21 +193,6 @@ class Http(Interface):
 
 
 class Template(Interface):
-    """
-    {
-        filename: '/real/file/name.html',
-        pre_context: [
-            'line1',
-            'line2'
-        ],
-        context_line: 'line3',
-        lineno: 7,
-        post_context: [
-            'line4',
-            'line5'
-        ],
-    }
-    """
     def __init__(self, filename, context_line, lineno, pre_context=None, post_context=None):
         self.filename = filename
         self.context_line = context_line
@@ -268,11 +222,4 @@ class Template(Interface):
 
 
 class User(Interface):
-    """
-    {
-        is_authenticated: true,
-        id: 'unique_id',
-        username: 'foo',
-        email: 'foo@example.com'
-    }
-    """
+    pass
\ No newline at end of file
