commit fd798fe81d6578f790a508b663f63e7132ce2d51
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 19 14:13:46 2016 -0800

    This adds an event type abstraction which will cache type-based metadata on an individual issue/group. This allows us to begin customizing the UI around the core event type.
    
    This implements the basics of stream rendering behind a switch so we can test it.
    
    In the future this would:
    
    - Deprecate Group.message
    - Add React components for customizing UI in more places
    - Add bits to customize mail

diff --git a/bin/load-mocks b/bin/load-mocks
index 0d337dddee..77ae9d81ea 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -238,6 +238,11 @@ def main(num_events=1):
                     message='This is a an example PHP event with an extremely long and annoying title\nIt also happens to contain some newlines in it,\nthus making it even more annoying.',
                 )
 
+            create_sample_event(
+                project=project,
+                platform='csp',
+            )
+
             with transaction.atomic():
                 try:
                     GroupMeta.objects.create(
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 3fa8c8f064..cface80ba2 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -114,6 +114,11 @@ class GroupSerializer(Serializer):
         permalink = absolute_uri(reverse('sentry-group', args=[
             obj.organization.slug, obj.project.slug, obj.id]))
 
+        event_type = obj.data.get('type', 'default')
+        metadata = obj.data.get('metadata') or {
+            'title': obj.message.splitlines()[0][:100],
+        }
+
         return {
             'id': str(obj.id),
             'shareId': obj.get_share_id(),
@@ -133,6 +138,8 @@ class GroupSerializer(Serializer):
                 'name': obj.project.name,
                 'slug': obj.project.slug,
             },
+            'type': event_type,
+            'metadata': metadata,
             'numComments': obj.num_comments,
             'assignedTo': attrs['assigned_to'],
             'isBookmarked': attrs['is_bookmarked'],
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 66665c4dfc..f0482bcb91 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -26,7 +26,7 @@ class ProjectSerializer(Serializer):
         from sentry import features
 
         feature_list = []
-        for feature in 'global-events', 'user-reports', 'dsym':
+        for feature in ('event-types', 'global-events', 'user-reports', 'dsym'):
             if features.has('projects:' + feature, obj, actor=user):
                 feature_list.append(feature)
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 746776f924..99462163fc 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -615,6 +615,7 @@ SENTRY_FEATURES = {
     'auth:register': True,
     'organizations:create': True,
     'organizations:sso': True,
+    'projects:event-types': False,
     'projects:global-events': False,
     'projects:quotas': True,
     'projects:user-reports': False,
diff --git a/src/sentry/data/samples/java.json b/src/sentry/data/samples/java.json
index 0ecd70ac83..2523060633 100644
--- a/src/sentry/data/samples/java.json
+++ b/src/sentry/data/samples/java.json
@@ -1,5 +1,4 @@
 {
-    "culprit": "javax.servlet.ServletException",
     "sentry.interfaces.Exception": {
         "values": [
             {
diff --git a/src/sentry/data/samples/javascript.json b/src/sentry/data/samples/javascript.json
index 9510993c57..306407aa2e 100644
--- a/src/sentry/data/samples/javascript.json
+++ b/src/sentry/data/samples/javascript.json
@@ -1,5 +1,4 @@
 {
-    "culprit": "views.js in updateMember",
     "errors": [
         {"type": "invalid_attribute", "name": "foobar"},
         {"type": "invalid_attribute", "name": "foobar"},
diff --git a/src/sentry/data/samples/php.json b/src/sentry/data/samples/php.json
index a293e7288f..9e5322ad4f 100644
--- a/src/sentry/data/samples/php.json
+++ b/src/sentry/data/samples/php.json
@@ -1,5 +1,4 @@
 {
-  "culprit": "",
   "sentry.interfaces.Exception": {
     "exc_omitted": null,
     "values": [
@@ -109,4 +108,4 @@
     ]
   },
   "version": "6"
-}
\ No newline at end of file
+}
diff --git a/src/sentry/data/samples/python.json b/src/sentry/data/samples/python.json
index a3b56d34f7..089bbe7914 100644
--- a/src/sentry/data/samples/python.json
+++ b/src/sentry/data/samples/python.json
@@ -1,5 +1,4 @@
 {
-    "culprit": "raven.scripts.runner in main",
     "sentry.interfaces.Stacktrace": {
         "frames": [
             {
diff --git a/src/sentry/data/samples/ruby.json b/src/sentry/data/samples/ruby.json
index 95dd34a61a..3ce1cc5957 100644
--- a/src/sentry/data/samples/ruby.json
+++ b/src/sentry/data/samples/ruby.json
@@ -1,5 +1,4 @@
 {
-    "culprit": "bin/raven in <main> at line 36",
     "sentry.interfaces.Exception": {
         "exc_omitted": null,
         "values": [
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 38e643a3d2..47c696f121 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -21,6 +21,7 @@ from django.utils.encoding import force_bytes
 from hashlib import md5
 from uuid import uuid4
 
+from sentry import eventtypes
 from sentry.app import buffer, tsdb
 from sentry.constants import (
     CLIENT_RESERVED_ATTRS, LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
@@ -150,7 +151,7 @@ else:
         return True
 
 
-def generate_culprit(data):
+def generate_culprit(data, platform=None):
     culprit = ''
 
     try:
@@ -170,7 +171,9 @@ def generate_culprit(data):
             culprit = data['sentry.interfaces.Http'].get('url', '')
     else:
         from sentry.interfaces.stacktrace import Stacktrace
-        culprit = Stacktrace.to_python(stacktraces[-1]).get_culprit_string()
+        culprit = Stacktrace.to_python(stacktraces[-1]).get_culprit_string(
+            platform=platform,
+        )
 
     return truncatechars(culprit, MAX_CULPRIT_LENGTH)
 
@@ -324,6 +327,10 @@ class EventManager(object):
             except Exception:
                 pass
 
+        # the SDKs currently do not describe event types, and we must infer
+        # them from available attributes
+        data['type'] = eventtypes.infer(data).key
+
         data['version'] = self.version
 
         # TODO(dcramer): find a better place for this logic
@@ -383,7 +390,7 @@ class EventManager(object):
         time_spent = data.pop('time_spent', None)
 
         if not culprit:
-            culprit = generate_culprit(data)
+            culprit = generate_culprit(data, platform=platform)
 
         date = datetime.fromtimestamp(data.pop('timestamp'))
         date = date.replace(tzinfo=timezone.utc)
@@ -447,6 +454,10 @@ class EventManager(object):
         else:
             hashes = map(md5_from_hash, get_hashes_for_event(event))
 
+        # TODO(dcramer): temp workaround for complexity
+        data['message'] = message
+        event_type = eventtypes.get(data.get('type', 'default'))(data)
+
         group_kwargs = kwargs.copy()
         group_kwargs.update({
             'culprit': culprit,
@@ -455,10 +466,17 @@ class EventManager(object):
             'last_seen': date,
             'first_seen': date,
             'data': {
-                'last_received': event.data.get('received') or float(event.datetime.strftime('%s'))
+                'last_received': event.data.get('received') or float(event.datetime.strftime('%s')),
+                'type': event_type.key,
+                # we cache the events metadata on the group to ensure its
+                # accessible in the stream
+                'metadata': event_type.get_metadata(),
             },
         })
 
+        # TODO(dcramer): temp workaround for complexity
+        del data['message']
+
         if release:
             release = Release.get_or_create(
                 project=project,
diff --git a/src/sentry/eventtypes/__init__.py b/src/sentry/eventtypes/__init__.py
new file mode 100644
index 0000000000..96c23ac19d
--- /dev/null
+++ b/src/sentry/eventtypes/__init__.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from .base import DefaultEvent
+from .csp import CspEvent
+from .error import ErrorEvent
+from .manager import EventTypeManager
+
+
+# types are ordered by priority, default should always be last
+default_manager = EventTypeManager()
+default_manager.register(CspEvent)
+default_manager.register(ErrorEvent)
+default_manager.register(DefaultEvent)
+
+get = default_manager.get
+register = default_manager.register
+infer = default_manager.infer
diff --git a/src/sentry/eventtypes/base.py b/src/sentry/eventtypes/base.py
new file mode 100644
index 0000000000..53e6ab3be4
--- /dev/null
+++ b/src/sentry/eventtypes/base.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import
+
+from sentry.utils.strings import truncatechars, strip
+
+
+class BaseEvent(object):
+    id = None
+
+    def __init__(self, data):
+        self.data = data
+
+    def has_metadata(self):
+        raise NotImplementedError
+
+    def get_metadata(self):
+        raise NotImplementedError
+
+
+class DefaultEvent(BaseEvent):
+    key = 'default'
+
+    def has_metadata(self):
+        # the default event can always work
+        return True
+
+    def get_metadata(self):
+        message = strip(self.data.get('message'))
+        if not message:
+            title = '<unlabeled event>'
+        else:
+            title = truncatechars(message.splitlines()[0], 100)
+        return {
+            'title': title,
+        }
diff --git a/src/sentry/eventtypes/csp.py b/src/sentry/eventtypes/csp.py
new file mode 100644
index 0000000000..bf375f4436
--- /dev/null
+++ b/src/sentry/eventtypes/csp.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from sentry.interfaces.csp import Csp
+
+from .base import BaseEvent
+
+
+class CspEvent(BaseEvent):
+    key = 'csp'
+
+    def has_metadata(self):
+        return 'sentry.interfaces.Csp' in self.data
+
+    def get_metadata(self):
+        # TODO(dcramer): pull get message into here to avoid instantiation
+        # or ensure that these get interfaces passed instead of raw data
+        csp = Csp.to_python(self.data['sentry.interfaces.Csp'])
+
+        return {
+            'directive': csp.effective_directive,
+            'uri': csp._normalized_blocked_uri,
+            'message': csp.get_message(),
+        }
diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
new file mode 100644
index 0000000000..d2a028c120
--- /dev/null
+++ b/src/sentry/eventtypes/error.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from .base import BaseEvent
+
+
+class ErrorEvent(BaseEvent):
+    key = 'error'
+
+    def has_metadata(self):
+        return 'sentry.interfaces.Exception' in self.data
+
+    def get_metadata(self):
+        exception = self.data['sentry.interfaces.Exception']['values'][0]
+
+        return {
+            'type': exception.get('type', 'Error'),
+            'value': exception.get('value', ''),
+        }
diff --git a/src/sentry/eventtypes/manager.py b/src/sentry/eventtypes/manager.py
new file mode 100644
index 0000000000..f688f0f378
--- /dev/null
+++ b/src/sentry/eventtypes/manager.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+
+class EventTypeManager(object):
+    def __init__(self):
+        self.__values = []
+        self.__lookup = {}
+
+    def __iter__(self):
+        return self.__values.itervalues()
+
+    def __contains__(self, key):
+        return key in self.__lookup
+
+    def get(self, key, **kwargs):
+        return self.__lookup[key]
+
+    def exists(self, key):
+        return key in self.__lookup
+
+    def register(self, cls):
+        self.__values.append(cls)
+        self.__lookup[cls.key] = cls
+
+    def infer(self, data):
+        for eventtype in self.__values:
+            if eventtype(data).has_metadata():
+                return eventtype
+        raise Exception('No event types registered which can handle data.')
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 71668200ce..0d178840b6 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -10,6 +10,7 @@ default_manager.add('auth:register')
 default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)
 default_manager.add('organizations:onboarding', OrganizationFeature)
+default_manager.add('projects:event-types', ProjectFeature)
 default_manager.add('projects:global-events', ProjectFeature)
 default_manager.add('projects:quotas', ProjectFeature)
 default_manager.add('projects:user-reports', ProjectFeature)
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index e4e2299bf3..62128f9300 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -424,10 +424,12 @@ class Frame(Interface):
             'context_line': self.context_line,
         }).strip('\n')
 
-    def get_culprit_string(self):
+    def get_culprit_string(self, platform=None):
         fileloc = self.module or self.filename
         if not fileloc:
             return ''
+        elif platform == 'javascript':
+            return '{}({})'.format(self.function or '?', fileloc)
         return '%s in %s' % (
             fileloc,
             self.function or '?',
@@ -709,11 +711,11 @@ class Stacktrace(Interface):
 
         return '\n'.join(result)
 
-    def get_culprit_string(self):
+    def get_culprit_string(self, platform=None):
         default = None
         for frame in reversed(self.frames):
             if frame.in_app:
-                return frame.get_culprit_string()
+                return frame.get_culprit_string(platform=platform)
             elif default is None:
-                default = frame.get_culprit_string()
+                default = frame.get_culprit_string(platform=platform)
         return default
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 7c5594422a..db7f9c562d 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -7,13 +7,87 @@ import AssigneeSelector from '../assigneeSelector';
 import Count from '../count';
 import GroupChart from './groupChart';
 import GroupCheckBox from './groupCheckBox';
+import ProjectState from '../../mixins/projectState';
 import TimeSince from '../timeSince';
-
 import GroupStore from '../../stores/groupStore';
 import SelectedGroupStore from '../../stores/selectedGroupStore';
 
 import {valueIsEqual} from '../../utils';
 
+const StreamGroupHeader = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    hasEventTypes: React.PropTypes.bool,
+  },
+
+  getTitle() {
+    let data = this.props.data;
+    if (!this.props.hasEventTypes) {
+      return <span>{data.title}</span>;
+    }
+
+    let metadata = data.metadata;
+    switch (data.type) {
+      case 'error':
+        return (
+          <span>
+            <span style={{marginRight: 10}}>{metadata.type}</span>
+            <em style={{fontSize: '80%', color: '#666', fontWeight: 'normal'}}>{data.culprit}</em><br/>
+          </span>
+        );
+      case 'csp':
+        return (
+          <span>
+            <span style={{marginRight: 10}}>{metadata.directive}</span>
+            <em style={{fontSize: '80%', color: '#666', fontWeight: 'normal'}}>{metadata.uri}</em><br/>
+          </span>
+        );
+      case 'default':
+        return <span>{metadata.title}</span>;
+      default:
+        return <span>{data.title}</span>;
+    }
+  },
+
+  getMessage() {
+    let data = this.props.data;
+    if (!this.props.hasEventTypes) {
+      return <span>{data.culprit}</span>;
+    }
+
+    let metadata = data.metadata;
+    switch (data.type) {
+      case 'error':
+        return metadata.value;
+      case 'csp':
+        return metadata.message;
+      default:
+        return '';
+    }
+  },
+
+  render() {
+    let {orgId, projectId, data} = this.props;
+    return (
+      <div>
+        <h3 className="truncate">
+          <Link to={`/${orgId}/${projectId}/issues/${data.id}/`}>
+            <span className="event-type truncate">{data.type}</span>
+            <span className="icon icon-soundoff"></span>
+            <span className="icon icon-bookmark"></span>
+            {this.getTitle()}
+          </Link>
+        </h3>
+        <div className="event-message truncate">
+          <span className="message">{this.getMessage()}</span>
+        </div>
+      </div>
+    );
+  }
+});
+
 const StreamGroup = React.createClass({
   propTypes: {
     id: React.PropTypes.string.isRequired,
@@ -24,7 +98,8 @@ const StreamGroup = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(GroupStore, 'onGroupChange')
+    Reflux.listenTo(GroupStore, 'onGroupChange'),
+    ProjectState
   ],
 
   getDefaultProps() {
@@ -84,6 +159,7 @@ const StreamGroup = React.createClass({
   render() {
     let data = this.state.data;
     let userCount = data.userCount;
+    let features = this.getProjectFeatures();
 
     let className = 'group row';
     if (data.isBookmarked) {
@@ -99,6 +175,7 @@ const StreamGroup = React.createClass({
       className += ' isMuted';
     }
 
+    className += ' type-' + data.type;
     className += ' level-' + data.level;
 
     let {id, orgId, projectId} = this.props;
@@ -111,17 +188,11 @@ const StreamGroup = React.createClass({
               <GroupCheckBox id={data.id} />
             </div>
           }
-          <h3 className="truncate">
-            <Link to={`/${orgId}/${projectId}/issues/${data.id}/`}>
-              <span className="error-level truncate">{data.level}</span>
-              <span className="icon icon-soundoff"></span>
-              <span className="icon icon-bookmark"></span>
-              {data.title}
-            </Link>
-          </h3>
-          <div className="event-message truncate">
-            <span className="message">{data.culprit}</span>
-          </div>
+          <StreamGroupHeader
+            orgId={orgId}
+            projectId={projectId}
+            data={data}
+            hasEventTypes={features.has('event-types')} />
           <div className="event-extra">
             <ul>
               <li>
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 327f1220a5..1e496cabbd 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -3111,22 +3111,26 @@ ul.tag-list {
  * ============================================================================
  */
 
- .error-level {
-   background: @gray-light;
- }
-
- &.level-info .error-level {
-   background: @blue;
- }
- &.level-warning .error-level {
-   background: @yellow;
- }
- &.level-error .error-level {
-   background: @orange;
- }
- &.level-fatal .error-level {
-   background: @red;
- }
+.event-type {
+  background: @gray-light;
+}
+
+.type-error .event-type,
+.level-error .error-level {
+  background: @orange;
+}
+// &.level-info .error-level {
+//   background: @blue;
+// }
+// &.level-warning .error-level {
+//   background: @yellow;
+// }
+// &.level-error .error-level {
+//   background: @orange;
+// }
+// &.level-fatal .error-level {
+//   background: @red;
+// }
 
 /**
 * Responsive small screens
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index e4c98fccfd..bfb1b0542e 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -337,7 +337,7 @@
       margin: 0 0 5px;
       font-weight: 600;
 
-      .error-level {
+      .event-type {
         position: absolute;
         left: -6px;
         top: 13px;
@@ -711,7 +711,7 @@
       }
     }
 
-    .error-level {
+    .event-type {
       .square(12px);
       border-radius: 50%;
       position: absolute;
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 2022725cc2..98b824b013 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -512,6 +512,54 @@ class EventManagerTest(TransactionTestCase):
 
         assert event.data.get('fingerprint') == ['{{ default }}']
 
+    def test_default_event_type(self):
+        manager = EventManager(self.make_event(message='foo bar'))
+        data = manager.normalize()
+        assert data['type'] == 'default'
+        event = manager.save(self.project.id)
+        group = event.group
+        assert group.data.get('type') == 'default'
+        assert group.data.get('metadata') == {
+            'title': 'foo bar',
+        }
+
+    def test_error_event_type(self):
+        manager = EventManager(self.make_event(**{
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'Foo',
+                    'value': 'bar',
+                }],
+            },
+        }))
+        data = manager.normalize()
+        assert data['type'] == 'error'
+        event = manager.save(self.project.id)
+        group = event.group
+        assert group.data.get('type') == 'error'
+        assert group.data.get('metadata') == {
+            'type': 'Foo',
+            'value': 'bar',
+        }
+
+    def test_csp_event_type(self):
+        manager = EventManager(self.make_event(**{
+            'sentry.interfaces.Csp': {
+                'effective_directive': 'script-src',
+                'blocked_uri': 'http://example.com',
+            },
+        }))
+        data = manager.normalize()
+        assert data['type'] == 'csp'
+        event = manager.save(self.project.id)
+        group = event.group
+        assert group.data.get('type') == 'csp'
+        assert group.data.get('metadata') == {
+            'directive': 'script-src',
+            'uri': 'example.com',
+            'message': "Blocked 'script' from 'example.com'",
+        }
+
 
 class GetHashesFromEventTest(TestCase):
     @patch('sentry.interfaces.stacktrace.Stacktrace.compute_hashes')
