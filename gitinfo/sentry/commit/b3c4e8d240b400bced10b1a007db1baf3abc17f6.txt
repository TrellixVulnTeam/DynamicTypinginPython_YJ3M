commit b3c4e8d240b400bced10b1a007db1baf3abc17f6
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Tue Jun 16 11:00:03 2020 +0200

    ref(pii): Create handleError + Clean-up (#19214)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/content.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/content.tsx
index 936b1e35ce..b707d59049 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/content.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/content.tsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import isEqual from 'lodash/isEqual';
 
 import {t} from 'app/locale';
 import {defined} from 'app/utils';
@@ -7,25 +8,35 @@ import {IconWarning} from 'app/icons';
 
 import RulesList from './rulesList';
 import Dialog from './dialog';
-
-type DialogProps = React.ComponentProps<typeof Dialog>;
-type Rule = NonNullable<DialogProps['rule']>;
+import {Rule, SourceSuggestion, EventId, Errors} from './types';
 
 type Props = {
   rules: Array<Rule>;
-  onUpdateRule: DialogProps['onSaveRule'];
+  onUpdateRule: (rule: Rule) => void;
   onDeleteRule: (rulesToBeDeleted: Array<Rule['id']>) => void;
+  errors: Errors;
+  onUpdateEventId?: (eventId: string) => void;
   disabled?: boolean;
-} & Pick<DialogProps, 'eventId' | 'onUpdateEventId' | 'sourceSuggestions'>;
+  sourceSuggestions?: Array<SourceSuggestion>;
+  eventId?: EventId;
+};
 
 type State = {
   editRule?: Rule['id'];
 };
 
-class Content extends React.Component<Props, State> {
-  state: State = {
-    editRule: undefined,
-  };
+class Content extends React.PureComponent<Props, State> {
+  state: State = {};
+
+  componentDidUpdate(prevProps: Props) {
+    if (
+      prevProps.rules.length > 0 &&
+      !isEqual(prevProps.rules, this.props.rules) &&
+      Object.keys(this.props.errors).length === 0
+    ) {
+      this.handleCloseEditRuleModal();
+    }
+  }
 
   handleDeleteRule = (ruleId: Rule['id']) => () => {
     const {onDeleteRule} = this.props;
@@ -33,34 +44,28 @@ class Content extends React.Component<Props, State> {
   };
 
   handleShowEditRuleModal = (ruleId: Rule['id']) => () => {
-    this.setState({
-      editRule: ruleId,
-    });
+    this.setState({editRule: ruleId});
   };
 
   handleCloseEditRuleModal = () => {
-    this.setState({
-      editRule: undefined,
-    });
+    this.setState({editRule: undefined});
   };
 
-  handleSave = async (updatedRule: Rule) => {
+  handleSave = (updatedRule: Rule) => {
     const {onUpdateRule} = this.props;
-
-    return await onUpdateRule(updatedRule).then(result => {
-      if (!result) {
-        this.setState({
-          editRule: undefined,
-        });
-        return undefined;
-      }
-      return result;
-    });
+    onUpdateRule(updatedRule);
   };
 
   render() {
     const {editRule} = this.state;
-    const {rules, sourceSuggestions, onUpdateEventId, eventId, disabled} = this.props;
+    const {
+      rules,
+      sourceSuggestions,
+      onUpdateEventId,
+      eventId,
+      disabled,
+      errors,
+    } = this.props;
 
     if (rules.length === 0) {
       return (
@@ -87,6 +92,7 @@ class Content extends React.Component<Props, State> {
             onUpdateEventId={onUpdateEventId}
             onSaveRule={this.handleSave}
             eventId={eventId}
+            errors={errors}
           />
         )}
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx
index d378e3a1b7..788142487c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx
@@ -1,4 +1,11 @@
-import {RuleType, MethodType, Rule, PiiConfig, Applications} from './types';
+import {
+  RuleType,
+  MethodType,
+  Rule,
+  PiiConfig,
+  Applications,
+  RuleWithoutRegex,
+} from './types';
 
 // Remap PII config format to something that is more usable in React. Ideally
 // we would stop doing this at some point and make some updates to how we
@@ -30,7 +37,7 @@ function convertRelayPiiConfig(relayPiiConfig?: string) {
             method,
             type,
             source: application,
-          });
+          } as RuleWithoutRegex);
         }
         continue;
       }
@@ -38,13 +45,13 @@ function convertRelayPiiConfig(relayPiiConfig?: string) {
       const {type, redaction} = resolvedRule;
       const method = redaction.method as MethodType;
 
-      if (resolvedRule.type === RuleType.PATTERN && resolvedRule?.pattern) {
+      if (resolvedRule.type === RuleType.PATTERN) {
         convertedRules.push({
           id,
           method,
           type: RuleType.PATTERN,
           source: application,
-          customRegularExpression: resolvedRule.pattern,
+          pattern: resolvedRule?.pattern,
         });
         continue;
       }
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
index 672d85a67c..519c229278 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
@@ -2,6 +2,7 @@ import React from 'react';
 import Modal from 'react-bootstrap/lib/Modal';
 import styled from '@emotion/styled';
 import omit from 'lodash/omit';
+import isEqual from 'lodash/isEqual';
 
 import Button from 'app/components/button';
 import ButtonBar from 'app/components/buttonBar';
@@ -9,73 +10,103 @@ import {t} from 'app/locale';
 import {defined} from 'app/utils';
 
 import Form from './form/form';
-import {RuleType, MethodType} from './types';
+import {
+  RuleType,
+  MethodType,
+  EventId,
+  SourceSuggestion,
+  Rule,
+  Errors,
+  KeysOfUnion,
+} from './types';
 
 const DEFAULT_RULE_SOURCE_VALUE = '';
 
-type FormProps = React.ComponentProps<typeof Form>;
-type Rule = FormProps['rule'];
-type Errors = FormProps['errors'];
-type Error = keyof Errors;
-
-type Props = Pick<
-  FormProps,
-  'sourceSuggestions' | 'disabled' | 'eventId' | 'onUpdateEventId'
-> & {
-  rule?: Rule;
-  onSaveRule: (rule: Rule) => Promise<{errors: Errors} | undefined>;
+type Props = {
   onClose: () => void;
+  onSaveRule: (rule: Rule) => void;
+  errors: Errors;
+  onUpdateEventId?: (eventId: string) => void;
+  sourceSuggestions?: Array<SourceSuggestion>;
+  eventId?: EventId;
+  rule?: Rule;
 };
 
 type State = {
   rule: Rule;
   isFormValid: boolean;
   errors: Errors;
+  isNewRule: boolean;
 };
 
 class Dialog extends React.Component<Props, State> {
   state: State = {
     rule: {
-      id: defined(this.props.rule?.id) ? this.props.rule?.id! : -1,
-      type: this.props.rule?.type || RuleType.CREDITCARD,
-      method: this.props.rule?.method || MethodType.MASK,
-      source: this.props.rule?.source || DEFAULT_RULE_SOURCE_VALUE,
-      customRegularExpression: this.props.rule?.customRegularExpression,
+      id: -1,
+      type: RuleType.CREDITCARD,
+      method: MethodType.MASK,
+      source: DEFAULT_RULE_SOURCE_VALUE,
     },
+    isNewRule: defined(this.props.rule?.id),
     isFormValid: false,
     errors: {},
   };
 
-  clearError = (error: Error) => {
-    this.setState(prevState => ({
-      errors: omit(prevState.errors, error),
-    }));
+  componentDidMount() {
+    this.loadRule();
+  }
+
+  componentDidUpdate(prevProps: Props, prevState: State) {
+    if (!isEqual(prevProps.errors, this.props.errors)) {
+      this.updateErrors();
+    }
+
+    if (this.props.rule && this.props.rule.id !== prevState.rule.id) {
+      return;
+    }
+
+    if (!isEqual(prevState.rule, this.state.rule)) {
+      this.handleValidateForm();
+    }
+  }
+
+  loadRule = () => {
+    const rule = this.props.rule;
+    if (!rule) {
+      return;
+    }
+    this.setState({rule});
+  };
+
+  updateErrors = () => {
+    this.setState(prevState => ({errors: {...prevState.errors, ...this.props.errors}}));
+  };
+
+  clearError = (error: keyof Errors) => {
+    this.setState(prevState => ({errors: omit(prevState.errors, error)}));
   };
 
-  handleChange = <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => {
-    const rule: Rule = {
-      ...this.state.rule,
-      [stateProperty]: value,
-    };
+  handleChange = <R extends Rule, K extends KeysOfUnion<R>>(
+    stateProperty: K,
+    value: R[K]
+  ) => {
+    const rule: Rule = {...this.state.rule, [stateProperty]: value};
 
     if (rule.type !== RuleType.PATTERN) {
-      delete rule?.customRegularExpression;
-      this.clearError('customRegularExpression');
+      // @ts-ignore
+      delete rule?.pattern;
+      this.clearError('pattern');
     }
 
-    if (stateProperty === 'customRegularExpression' || stateProperty === 'source') {
-      this.clearError(stateProperty as Error);
+    if (stateProperty === 'pattern' || stateProperty === 'source') {
+      this.clearError(stateProperty);
     }
 
-    this.setState(
-      {
-        rule,
-      },
-      this.handleValidateForm
-    );
+    this.setState({rule});
   };
 
   handleValidation = <T extends keyof Errors>(field: T) => () => {
+    // @ts-ignore
     const isFieldValueEmpty = !this.state.rule[field];
     const fieldErrorAlreadyExist = this.state.errors[field];
 
@@ -104,37 +135,25 @@ class Dialog extends React.Component<Props, State> {
     const ruleKeys = Object.keys(omit(rule, 'id'));
     const isFormValid = !ruleKeys.find(ruleKey => !rule[ruleKey]);
 
-    this.setState({
-      isFormValid,
-    });
+    this.setState({isFormValid});
   };
 
-  handleSave = async () => {
+  handleSave = () => {
     const {rule} = this.state;
-    const {onSaveRule, onClose} = this.props;
-
-    await onSaveRule(rule).then(result => {
-      if (!result) {
-        onClose();
-        return;
-      }
-
-      this.setState({
-        errors: result.errors,
-      });
-    });
+    const {onSaveRule} = this.props;
+    onSaveRule(rule);
   };
 
   render() {
-    const {onClose, disabled, sourceSuggestions, onUpdateEventId, eventId} = this.props;
-    const {rule, isFormValid, errors} = this.state;
+    const {onClose, sourceSuggestions, onUpdateEventId, eventId} = this.props;
+    const {rule, isFormValid, errors, isNewRule} = this.state;
 
     return (
       <StyledModal show animation={false} onHide={onClose}>
         <Modal.Header closeButton>
-          {rule?.id !== -1
-            ? t('Edit a data scrubbing rule')
-            : t('Add a data scrubbing rule')}
+          {isNewRule
+            ? t('Add an advanced data scrubbing rule')
+            : t('Edit an advanced data scrubbing rule')}
         </Modal.Header>
         <Modal.Body>
           <Form
@@ -142,7 +161,6 @@ class Dialog extends React.Component<Props, State> {
             onValidate={this.handleValidation}
             sourceSuggestions={sourceSuggestions}
             rule={rule}
-            disabled={disabled}
             onUpdateEventId={onUpdateEventId}
             eventId={eventId}
             errors={errors}
@@ -150,14 +168,8 @@ class Dialog extends React.Component<Props, State> {
         </Modal.Body>
         <Modal.Footer>
           <ButtonBar gap={1.5}>
-            <Button disabled={disabled} onClick={onClose}>
-              {t('Cancel')}
-            </Button>
-            <Button
-              disabled={disabled || !isFormValid}
-              onClick={this.handleSave}
-              priority="primary"
-            >
+            <Button onClick={onClose}>{t('Cancel')}</Button>
+            <Button disabled={!isFormValid} onClick={this.handleSave} priority="primary">
               {t('Save Rule')}
             </Button>
           </ButtonBar>
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdField.tsx
index 47db1cc5fd..02913fb929 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/eventIdField.tsx
@@ -7,17 +7,12 @@ import {t} from 'app/locale';
 import space from 'app/styles/space';
 
 import FormField from './formField';
-import EventIdFieldStatusIconStatusIcon from './eventIdFieldStatusIcon';
-import {EventIdStatus} from '../types';
-
-type EventId = {
-  value: string;
-  status?: EventIdStatus;
-};
+import EventIdFieldStatusIcon from './eventIdFieldStatusIcon';
+import {EventIdStatus, EventId} from '../types';
 
 type Props = {
   onUpdateEventId: (eventId: string) => void;
-  eventId: EventId;
+  eventId?: EventId;
   disabled?: boolean;
 };
 
@@ -28,8 +23,8 @@ type State = {
 
 class EventIdField extends React.Component<Props, State> {
   state = {
-    value: this.props.eventId.value,
-    status: this.props.eventId.status,
+    value: this.props.eventId?.value || '',
+    status: this.props.eventId?.status,
   };
 
   componentDidUpdate(prevProps: Props) {
@@ -117,7 +112,7 @@ class EventIdField extends React.Component<Props, State> {
           'Providing an event ID will automatically provide you a list of suggested sources'
         )}
       >
-        <EventIdFieldWrapper>
+        <FieldWrapper>
           <StyledTextField
             name="eventId"
             disabled={disabled}
@@ -130,12 +125,12 @@ class EventIdField extends React.Component<Props, State> {
             error={this.getErrorMessage()}
           />
           <Status>
-            <EventIdFieldStatusIconStatusIcon
+            <EventIdFieldStatusIcon
               onClickIconClose={this.handleClickIconClose}
               status={status}
             />
           </Status>
-        </EventIdFieldWrapper>
+        </FieldWrapper>
       </FormField>
     );
   }
@@ -161,7 +156,7 @@ const Status = styled('div')`
   align-items: center;
 `;
 
-const EventIdFieldWrapper = styled('div')`
+const FieldWrapper = styled('div')`
   position: relative;
   display: flex;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
index 64b631b2bb..99e6e46668 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
@@ -6,113 +6,114 @@ import space from 'app/styles/space';
 import {t} from 'app/locale';
 import TextField from 'app/components/forms/textField';
 
-import {Rule, RuleType, MethodType} from '../types';
-import {getMethodTypeLabel, getRuleTypeLabel} from './utils';
-import Source from './sourceField';
+import EventIdField from './eventIdField';
 import FormField from './formField';
 import SelectField from './selectField';
-import EventidField from './eventIdField';
+import SourceField from './sourceField';
+import {getRuleLabel, getMethodLabel} from '../utils';
+import {
+  MethodType,
+  RuleType,
+  Rule,
+  SourceSuggestion,
+  EventId,
+  Errors,
+  KeysOfUnion,
+} from '../types';
 
-type EventIdProps = React.ComponentProps<typeof EventidField>;
-type SourceProps = React.ComponentProps<typeof Source>;
-type Errors = {
-  customRegularExpression?: string;
-  source?: string;
-};
-
-type Props = EventIdProps & {
-  rule: Rule;
-  sourceSuggestions: SourceProps['suggestions'];
-  onChange: <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => void;
-  onUpdateEventId: (eventId: string) => void;
-  onValidate: <T extends keyof Errors>(field: T) => () => void;
+type Props<R extends Rule, K extends KeysOfUnion<R>> = {
+  rule: R;
+  onChange: (stateProperty: K, value: R[K]) => void;
+  onValidate: (field: K) => () => void;
+  onUpdateEventId?: (eventId: string) => void;
   errors: Errors;
+  sourceSuggestions?: Array<SourceSuggestion>;
+  eventId?: EventId;
 };
-
 const Form = ({
-  disabled,
-  rule: {source, customRegularExpression, type, method},
+  rule,
   errors,
   sourceSuggestions,
   onUpdateEventId,
   eventId,
   onChange,
   onValidate,
-}: Props) => (
-  <Wrapper>
-    <WrapperSelectFields>
-      <FormField label={t('Method')} tooltipInfo={t('What to do')}>
-        <SelectField
-          placeholder={t('Select method')}
-          name="method"
-          options={sortBy(Object.values(MethodType)).map(value => ({
-            ...getMethodTypeLabel(value),
-            value,
-          }))}
-          value={method}
-          onChange={({value}) => onChange('method', value)}
-          isDisabled={disabled}
-        />
-      </FormField>
+}: Props<Rule, KeysOfUnion<Rule>>) => {
+  const {source, type, method} = rule;
+  return (
+    <Wrapper>
+      <WrapperSelectFields>
+        <FormField label={t('Method')} tooltipInfo={t('What to do')}>
+          <SelectField
+            placeholder={t('Select method')}
+            name="method"
+            options={sortBy(Object.values(MethodType)).map(value => ({
+              ...getMethodLabel(value),
+              value,
+            }))}
+            value={method}
+            onChange={({value}) => onChange('method', value)}
+          />
+        </FormField>
+        <FormField
+          label={t('Data Type')}
+          tooltipInfo={t(
+            'What to look for. Use an existing pattern or define your own using regular expressions.'
+          )}
+        >
+          <SelectField
+            placeholder={t('Select type')}
+            name="type"
+            options={sortBy(Object.values(RuleType)).map(value => ({
+              label: getRuleLabel(value),
+              value,
+            }))}
+            value={type}
+            onChange={({value}) => onChange('type', value)}
+          />
+        </FormField>
+      </WrapperSelectFields>
+      {rule.type === RuleType.PATTERN && (
+        <FormField
+          label={t('Regex matches')}
+          tooltipInfo={t('Custom Perl-style regex (PCRE)')}
+          isFullWidth
+        >
+          <RegularExpression
+            name="pattern"
+            placeholder={t('[a-zA-Z0-9]+')}
+            onChange={(value: string) => {
+              onChange('pattern', value);
+            }}
+            value={rule.pattern}
+            onBlur={onValidate('pattern')}
+            error={errors?.pattern}
+          />
+        </FormField>
+      )}
+      {onUpdateEventId && (
+        <EventIdField onUpdateEventId={onUpdateEventId} eventId={eventId} />
+      )}
       <FormField
-        label={t('Data Type')}
+        label={t('Source')}
         tooltipInfo={t(
-          'What to look for. Use an existing pattern or define your own using regular expressions.'
+          'Where to look. In the simplest case this can be an attribute name.'
         )}
       >
-        <SelectField
-          placeholder={t('Select type')}
-          name="type"
-          options={sortBy(Object.values(RuleType)).map(value => ({
-            label: getRuleTypeLabel(value),
-            value,
-          }))}
-          value={type}
-          onChange={({value}) => onChange('type', value)}
-          isDisabled={disabled}
-        />
-      </FormField>
-    </WrapperSelectFields>
-    {type === RuleType.PATTERN && (
-      <FormField
-        label={t('Regex matches')}
-        tooltipInfo={t('Custom Perl-style regex (PCRE)')}
-        isFullWidth
-      >
-        <CustomRegularExpression
-          name="customRegularExpression"
-          placeholder={t('[a-zA-Z0-9]+')}
+        <SourceField
           onChange={(value: string) => {
-            onChange('customRegularExpression', value);
+            onChange('source', value);
           }}
-          value={customRegularExpression}
-          onBlur={onValidate('customRegularExpression')}
-          error={errors.customRegularExpression}
-          disabled={disabled}
+          value={source}
+          onBlur={onValidate('source')}
+          isRegExMatchesSelected={type === RuleType.PATTERN}
+          suggestions={sourceSuggestions}
+          error={errors?.source}
         />
       </FormField>
-    )}
-    <EventidField onUpdateEventId={onUpdateEventId} eventId={eventId} />
-    <FormField
-      label={t('Source')}
-      tooltipInfo={t(
-        'Where to look. In the simplest case this can be an attribute name.'
-      )}
-    >
-      <Source
-        onChange={(value: string) => {
-          onChange('source', value);
-        }}
-        isRegExMatchesSelected={type === RuleType.PATTERN}
-        value={source}
-        onBlur={onValidate('source')}
-        suggestions={sourceSuggestions}
-        error={errors.source}
-        disabled={disabled}
-      />
-    </FormField>
-  </Wrapper>
-);
+    </Wrapper>
+  );
+};
 
 export default Form;
 
@@ -130,7 +131,7 @@ const WrapperSelectFields = styled('div')`
   }
 `;
 
-const CustomRegularExpression = styled(TextField)`
+const RegularExpression = styled(TextField)`
   font-size: ${p => p.theme.fontSizeSmall};
   height: 40px;
   input {
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/selectField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/selectField.tsx
index 215c369bed..0b52abac35 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/selectField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/selectField.tsx
@@ -11,7 +11,7 @@ type SelectControlProps = React.ComponentProps<typeof SelectControl>;
 
 type Props = Pick<
   SelectControlProps,
-  'value' | 'placeholder' | 'name' | 'onChange' | 'options' | 'isDisabled'
+  'value' | 'placeholder' | 'name' | 'onChange' | 'options'
 >;
 
 class SelectField extends React.Component<Props> {
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
index ba3cedab2e..ea6ca445cf 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceField.tsx
@@ -7,21 +7,17 @@ import TextField from 'app/components/forms/textField';
 import TextOverflow from 'app/components/textOverflow';
 import {defined} from 'app/utils';
 
-import {
-  unaryOperatorSuggestions,
-  binaryOperatorSuggestions,
-} from './sourceFieldSuggestions';
+import {unarySuggestions, binarySuggestions} from '../utils';
 import SourceSuggestionExamples from './sourceSuggestionExamples';
 import {SourceSuggestion, SourceSuggestionType} from '../types';
 
 type Props = {
   value: string;
   onChange: (value: string) => void;
-  suggestions: Array<SourceSuggestion>;
   isRegExMatchesSelected: boolean;
+  suggestions?: Array<SourceSuggestion>;
   error?: string;
   onBlur?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
-  disabled?: boolean;
 };
 
 type State = {
@@ -65,15 +61,11 @@ class SourceField extends React.Component<Props, State> {
   suggestionList = React.createRef<HTMLUListElement>();
 
   getAllSuggestions() {
-    return [
-      ...this.getValueSuggestions(),
-      ...unaryOperatorSuggestions,
-      ...binaryOperatorSuggestions,
-    ];
+    return [...this.getValueSuggestions(), ...unarySuggestions, ...binarySuggestions];
   }
 
   getValueSuggestions() {
-    return this.props.suggestions;
+    return this.props.suggestions || [];
   }
 
   getFilteredSuggestions = (value: string, type: SourceSuggestionType) => {
@@ -81,7 +73,7 @@ class SourceField extends React.Component<Props, State> {
 
     switch (type) {
       case SourceSuggestionType.BINARY: {
-        valuesToBeFiltered = binaryOperatorSuggestions;
+        valuesToBeFiltered = binarySuggestions;
         break;
       }
       case SourceSuggestionType.VALUE: {
@@ -89,11 +81,11 @@ class SourceField extends React.Component<Props, State> {
         break;
       }
       case SourceSuggestionType.UNARY: {
-        valuesToBeFiltered = unaryOperatorSuggestions;
+        valuesToBeFiltered = unarySuggestions;
         break;
       }
       default: {
-        valuesToBeFiltered = [...this.getValueSuggestions(), ...unaryOperatorSuggestions];
+        valuesToBeFiltered = [...this.getValueSuggestions(), ...unarySuggestions];
       }
     }
 
@@ -194,12 +186,12 @@ class SourceField extends React.Component<Props, State> {
         );
         if (!selector) {
           fieldValues.push([
-            unaryOperatorSuggestions[0],
+            unarySuggestions[0],
             {type: SourceSuggestionType.STRING, value: valueAfterUnaryOperator},
           ]);
           continue;
         }
-        fieldValues.push([unaryOperatorSuggestions[0], selector]);
+        fieldValues.push([unarySuggestions[0], selector]);
         continue;
       }
 
@@ -221,31 +213,18 @@ class SourceField extends React.Component<Props, State> {
     });
   };
 
-  checkPossiblyRegExMatchExpression = (value: string) => {
-    const {isRegExMatchesSelected} = this.props;
-    const {help} = this.state;
-
-    if (isRegExMatchesSelected) {
-      if (help) {
-        this.setState({help: ''});
-      }
-      return;
-    }
-
-    const isPossiblyARegularExpression = RegExp('^/.*/g?$').test(value);
+  scrollToSuggestion = () => {
+    const {activeSuggestion, hideCaret} = this.state;
 
-    if (help) {
-      if (!isPossiblyARegularExpression) {
-        this.setState({
-          help: '',
-        });
-      }
-      return;
-    }
+    this.suggestionList?.current?.children[activeSuggestion].scrollIntoView({
+      behavior: 'smooth',
+      block: 'nearest',
+      inline: 'start',
+    });
 
-    if (isPossiblyARegularExpression) {
+    if (!hideCaret) {
       this.setState({
-        help: t("You might want to change Data Type's value to 'Regex matches'"),
+        hideCaret: true,
       });
     }
   };
@@ -320,22 +299,6 @@ class SourceField extends React.Component<Props, State> {
     );
   };
 
-  scrollToSuggestion = () => {
-    const {activeSuggestion, hideCaret} = this.state;
-
-    this.suggestionList?.current?.children[activeSuggestion].scrollIntoView({
-      behavior: 'smooth',
-      block: 'nearest',
-      inline: 'start',
-    });
-
-    if (!hideCaret) {
-      this.setState({
-        hideCaret: true,
-      });
-    }
-  };
-
   handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
     event.persist();
 
@@ -374,64 +337,85 @@ class SourceField extends React.Component<Props, State> {
   };
 
   toggleSuggestions = (showSuggestions: boolean) => {
-    this.setState({
-      showSuggestions,
-    });
+    this.setState({showSuggestions});
   };
 
   handleFocus = () => {
     this.toggleSuggestions(true);
   };
 
+  checkPossiblyRegExMatchExpression = (value: string) => {
+    const {isRegExMatchesSelected} = this.props;
+    const {help} = this.state;
+
+    if (isRegExMatchesSelected) {
+      if (help) {
+        this.setState({help: ''});
+      }
+      return;
+    }
+
+    const isPossiblyARegularExpression = RegExp('^/.*/g?$').test(value);
+
+    if (help) {
+      if (!isPossiblyARegularExpression) {
+        this.setState({
+          help: '',
+        });
+      }
+      return;
+    }
+
+    if (isPossiblyARegularExpression) {
+      this.setState({
+        help: t("You might want to change Data Type's value to 'Regex matches'"),
+      });
+    }
+  };
+
   render() {
-    const {error, disabled, value, onBlur} = this.props;
+    const {error, value, onBlur} = this.props;
     const {showSuggestions, suggestions, activeSuggestion, hideCaret, help} = this.state;
 
     return (
       <Wrapper ref={this.selectorField} hideCaret={hideCaret}>
         <StyledTextField
-          name="from"
+          name="source"
           placeholder={t('Enter a custom attribute, variable or header name')}
           onChange={this.handleChange}
           autoComplete="off"
           value={value}
           onKeyDown={this.handleKeyDown}
           error={error}
-          help={help}
+          help={error ? undefined : help}
           onBlur={onBlur}
           onFocus={this.handleFocus}
-          disabled={disabled}
         />
         {showSuggestions && suggestions.length > 0 && (
           <React.Fragment>
-            <SuggestionsWrapper
-              ref={this.suggestionList}
-              data-test-id="source-suggestions"
-            >
+            <Suggestions ref={this.suggestionList} data-test-id="source">
               {suggestions.slice(0, 50).map((suggestion, index) => (
-                <SuggestionItem
+                <Suggestion
                   key={suggestion.value}
                   onClick={this.handleClickSuggestionItem(suggestion)}
                   active={index === activeSuggestion}
                   tabIndex={-1}
                 >
                   <TextOverflow>{suggestion.value}</TextOverflow>
-
                   {suggestion.description && (
                     <SuggestionDescription>
                       (<TextOverflow>{suggestion.description}</TextOverflow>)
                     </SuggestionDescription>
                   )}
-
                   {suggestion.examples && suggestion.examples.length > 0 && (
                     <SourceSuggestionExamples
                       examples={suggestion.examples}
                       sourceName={suggestion.value}
                     />
                   )}
-                </SuggestionItem>
+                </Suggestion>
               ))}
-            </SuggestionsWrapper>
+            </Suggestions>
             <SuggestionsOverlay onClick={this.handleClickOutside} />
           </React.Fragment>
         )}
@@ -461,7 +445,7 @@ const StyledTextField = styled(TextField)`
   }
 `;
 
-const SuggestionsWrapper = styled('ul')`
+const Suggestions = styled('ul')`
   position: absolute;
   width: 100%;
   padding-left: 0;
@@ -479,7 +463,7 @@ const SuggestionsWrapper = styled('ul')`
   overflow-y: auto;
 `;
 
-const SuggestionItem = styled('li')<{active: boolean}>`
+const Suggestion = styled('li')<{active: boolean}>`
   display: grid;
   grid-template-columns: auto 1fr max-content;
   grid-gap: ${space(1)};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceFieldSuggestions.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceFieldSuggestions.tsx
deleted file mode 100644
index 4cccda01fa..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceFieldSuggestions.tsx
+++ /dev/null
@@ -1,77 +0,0 @@
-import {t} from 'app/locale';
-
-import {SourceSuggestion, SourceSuggestionType} from '../types';
-
-const binaryOperatorSuggestions: Array<SourceSuggestion> = [
-  {
-    type: SourceSuggestionType.BINARY,
-    value: '&&',
-  },
-  {
-    type: SourceSuggestionType.BINARY,
-    value: '||',
-  },
-];
-
-const unaryOperatorSuggestions: Array<SourceSuggestion> = [
-  {
-    type: SourceSuggestionType.UNARY,
-    value: '!',
-  },
-];
-
-const defaultSuggestions: Array<SourceSuggestion> = [
-  {type: SourceSuggestionType.VALUE, value: '**', description: t('everywhere')},
-  {
-    type: SourceSuggestionType.VALUE,
-    value: 'password',
-    description: t('attributes named "password"'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: '$error.value',
-    description: t('the exception value'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: '$message',
-    description: t('the log message'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: 'extra.MyValue',
-    description: t('the key "MyValue" in "Additional Data"'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: 'extra.**',
-    description: t('everything in "Additional Data"'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: '$http.headers.x-custom-token',
-    description: t('the X-Custom-Token HTTP header'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: '$user.ip_address',
-    description: t('the user IP address'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: '$frame.vars.foo',
-    description: t('the local variable "foo"'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: 'contexts.device.timezone',
-    description: t('the timezone in the device context'),
-  },
-  {
-    type: SourceSuggestionType.VALUE,
-    value: 'tags.server_name',
-    description: t('the tag "server_name"'),
-  },
-];
-
-export {unaryOperatorSuggestions, binaryOperatorSuggestions, defaultSuggestions};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/utils.tsx
deleted file mode 100644
index 73ddfccfcb..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/utils.tsx
+++ /dev/null
@@ -1,67 +0,0 @@
-import {t} from 'app/locale';
-
-import {RuleType, MethodType} from '../types';
-
-function getRuleTypeLabel(type: RuleType) {
-  switch (type) {
-    case RuleType.ANYTHING:
-      return t('Anything');
-    case RuleType.IMEI:
-      return t('IMEI numbers');
-    case RuleType.MAC:
-      return t('MAC addresses');
-    case RuleType.EMAIL:
-      return t('Email addresses');
-    case RuleType.PEMKEY:
-      return t('PEM keys');
-    case RuleType.URLAUTH:
-      return t('Auth in URLs');
-    case RuleType.USSSN:
-      return t('US social security numbers');
-    case RuleType.USER_PATH:
-      return t('Usernames in filepaths');
-    case RuleType.UUID:
-      return t('UUIDs');
-    case RuleType.CREDITCARD:
-      return t('Credit card numbers');
-    case RuleType.PASSWORD:
-      return t('Password fields');
-    case RuleType.IP:
-      return t('IP addresses');
-    case RuleType.PATTERN:
-      return t('Regex matches');
-    default:
-      return '';
-  }
-}
-
-function getMethodTypeLabel(type: MethodType) {
-  switch (type) {
-    case MethodType.MASK:
-      return {
-        label: t('Mask'),
-        description: t('Replace with ****'),
-      };
-    case MethodType.HASH:
-      return {
-        label: t('Hash'),
-        description: t('Replace with DEADBEEF'),
-      };
-    case MethodType.REMOVE:
-      return {
-        label: t('Remove'),
-        description: t('Replace with null'),
-      };
-    case MethodType.REPLACE:
-      return {
-        label: t('Replace'),
-        description: t('Replace with [Filtered]'),
-      };
-    default:
-      return {
-        label: '',
-      };
-  }
-}
-
-export {getRuleTypeLabel, getMethodTypeLabel};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/handleError.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/handleError.tsx
new file mode 100644
index 0000000000..bffcb97476
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/handleError.tsx
@@ -0,0 +1,51 @@
+import {t} from 'app/locale';
+
+import {RequestError} from './types';
+
+type Error = {
+  type: RequestError;
+  message: string;
+};
+
+// TODO(ts): define the correct error type
+function handleError(error: any): Error {
+  const errorMessage = error.responseJSON?.relayPiiConfig[0];
+
+  if (!errorMessage) {
+    return {
+      type: RequestError.Unknown,
+      message: t('Unknown error occurred while saving data scrubbing rule'),
+    };
+  }
+
+  if (errorMessage.startsWith('invalid selector: ')) {
+    for (const line of errorMessage.split('\n')) {
+      if (line.startsWith('1 | ')) {
+        const selector = line.slice(3);
+        return {
+          type: RequestError.InvalidSelector,
+          message: t('Invalid source value: %s', selector),
+        };
+      }
+    }
+  }
+
+  if (errorMessage.startsWith('regex parse error:')) {
+    for (const line of errorMessage.split('\n')) {
+      if (line.startsWith('error:')) {
+        const regex = line.slice(6).replace(/at line \d+ column \d+/, '');
+        return {
+          type: RequestError.RegexParse,
+          message: t('Invalid regex: %s', regex),
+        };
+      }
+    }
+  }
+
+  return {
+    type: RequestError.Unknown,
+    message: t('An unknown error occurred while saving data scrubbing rule'),
+  };
+}
+
+export default handleError;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
index c6cad975dc..373a37e1fe 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
@@ -10,28 +10,32 @@ import ExternalLink from 'app/components/links/externalLink';
 import Button from 'app/components/button';
 import {Organization, Project} from 'app/types';
 
-import {defaultSuggestions as sourceDefaultSuggestions} from './form/sourceFieldSuggestions';
+import {valueSuggestions} from './utils';
 import Dialog from './dialog';
 import Content from './content';
-import Form from './form/form';
 import OrganizationRules from './organizationRules';
-import {Rule, EventIdStatus} from './types';
+import {
+  Rule,
+  EventIdStatus,
+  SourceSuggestion,
+  Errors,
+  EventId,
+  RequestError,
+} from './types';
 import convertRelayPiiConfig from './convertRelayPiiConfig';
-import getRelayPiiConfig from './getRelayPiiConfig';
+import submitRules from './submitRules';
+import handleError from './handleError';
 
 const ADVANCED_DATASCRUBBING_LINK =
   'https://docs.sentry.io/data-management/advanced-datascrubbing/';
 
-type FormProps = React.ComponentProps<typeof Form>;
-type DialogProps = React.ComponentProps<typeof Dialog>;
-type SourceSuggestions = DialogProps['sourceSuggestions'];
-type Errors = FormProps['errors'];
+type ProjectId = Project['id'] | undefined;
 
-type Props = {
+type Props<T extends ProjectId> = {
   endpoint: string;
   organization: Organization;
-  onSubmitSuccess: (resp: Organization | Project) => void;
-  projectId?: Project['id'];
+  onSubmitSuccess?: (data: T extends undefined ? Organization : Project) => void;
+  projectId?: T;
   relayPiiConfig?: string;
   additionalContext?: React.ReactNode;
   disabled?: boolean;
@@ -40,15 +44,19 @@ type Props = {
 type State = {
   rules: Array<Rule>;
   savedRules: Array<Rule>;
-  relayPiiConfig?: string;
-  sourceSuggestions: SourceSuggestions;
-  eventId: DialogProps['eventId'];
+  sourceSuggestions: Array<SourceSuggestion>;
+  eventId: EventId;
   orgRules: Array<Rule>;
+  errors: Errors;
   showAddRuleModal?: boolean;
   isProjectLevel?: boolean;
+  relayPiiConfig?: string;
 };
 
-class DataScrubbing extends React.Component<Props, State> {
+class DataScrubbing<T extends ProjectId = undefined> extends React.Component<
+  Props<T>,
+  State
+> {
   state: State = {
     rules: [],
     savedRules: [],
@@ -58,6 +66,7 @@ class DataScrubbing extends React.Component<Props, State> {
       value: '',
     },
     orgRules: [],
+    errors: {},
     isProjectLevel: this.props.endpoint.includes('projects'),
   };
 
@@ -67,7 +76,7 @@ class DataScrubbing extends React.Component<Props, State> {
     this.loadOrganizationRules();
   }
 
-  componentDidUpdate(_prevProps: Props, prevState: State) {
+  componentDidUpdate(_prevProps: Props<T>, prevState: State) {
     if (prevState.relayPiiConfig !== this.state.relayPiiConfig) {
       this.loadRules();
     }
@@ -113,7 +122,7 @@ class DataScrubbing extends React.Component<Props, State> {
 
     if (!eventId.value) {
       this.setState(prevState => ({
-        sourceSuggestions: sourceDefaultSuggestions,
+        sourceSuggestions: valueSuggestions,
         eventId: {
           ...prevState.eventId,
           status: undefined,
@@ -123,7 +132,7 @@ class DataScrubbing extends React.Component<Props, State> {
     }
 
     this.setState(prevState => ({
-      sourceSuggestions: sourceDefaultSuggestions,
+      sourceSuggestions: valueSuggestions,
       eventId: {
         ...prevState.eventId,
         status: EventIdStatus.LOADING,
@@ -139,7 +148,7 @@ class DataScrubbing extends React.Component<Props, State> {
         `/organizations/${organization.slug}/data-scrubbing-selector-suggestions/`,
         {query}
       );
-      const sourceSuggestions: SourceSuggestions = rawSuggestions.suggestions;
+      const sourceSuggestions: Array<SourceSuggestion> = rawSuggestions.suggestions;
 
       if (sourceSuggestions && sourceSuggestions.length > 0) {
         this.setState(prevState => ({
@@ -153,7 +162,7 @@ class DataScrubbing extends React.Component<Props, State> {
       }
 
       this.setState(prevState => ({
-        sourceSuggestions: sourceDefaultSuggestions,
+        sourceSuggestions: valueSuggestions,
         eventId: {
           ...prevState.eventId,
           status: EventIdStatus.NOT_FOUND,
@@ -169,118 +178,69 @@ class DataScrubbing extends React.Component<Props, State> {
     }
   };
 
-  handleSubmit = async (rules: Array<Rule>) => {
-    const {endpoint, onSubmitSuccess} = this.props;
-
-    const errors: Errors = {};
-
-    const relayPiiConfig = getRelayPiiConfig(rules);
-
-    return await this.api
-      .requestPromise(endpoint, {
-        method: 'PUT',
-        data: {relayPiiConfig},
-      })
-      .then(result => {
-        onSubmitSuccess(result);
-        this.setState({relayPiiConfig});
-      })
-      .then(() => {
-        addSuccessMessage(t('Successfully saved data scrubbing rule'));
-        return undefined;
-      })
-      .catch(error => {
-        const errorMessage = error.responseJSON?.relayPiiConfig?.[0];
-
-        if (!errorMessage) {
-          addErrorMessage(t('Unknown error occurred while saving data scrubbing rule'));
-          return undefined;
-        }
-
-        if (errorMessage.startsWith('invalid selector: ')) {
-          for (const line of errorMessage.split('\n')) {
-            if (line.startsWith('1 | ')) {
-              const selector = line.slice(3);
-              errors.source = t('Invalid source value: %s', selector);
-              break;
-            }
-          }
-          return {
-            errors,
-          };
-        }
+  convertRequestError = (error: ReturnType<typeof handleError>) => {
+    switch (error.type) {
+      case RequestError.InvalidSelector:
+        this.setState(prevState => ({
+          errors: {
+            ...prevState.errors,
+            source: error.message,
+          },
+        }));
+        break;
+      case RequestError.RegexParse:
+        this.setState(prevState => ({
+          errors: {
+            ...prevState.errors,
+            customRegex: error.message,
+          },
+        }));
+        break;
+      default:
+        addErrorMessage(error.message);
+    }
+  };
 
-        if (errorMessage.startsWith('regex parse error:')) {
-          for (const line of errorMessage.split('\n')) {
-            if (line.startsWith('error:')) {
-              const regex = line.slice(6).replace(/at line \d+ column \d+/, '');
-              errors.customRegularExpression = t('Invalid regex: %s', regex);
-              break;
-            }
-          }
-          return {
-            errors,
-          };
+  handleSave = async (rules: Array<Rule>, successMessage: string) => {
+    const {endpoint, onSubmitSuccess} = this.props;
+    try {
+      const data = await submitRules(this.api, endpoint, rules);
+      if (data?.relayPiiConfig) {
+        const convertedRules = convertRelayPiiConfig(data.relayPiiConfig);
+        this.setState({rules: convertedRules, showAddRuleModal: undefined});
+        addSuccessMessage(successMessage);
+        if (onSubmitSuccess) {
+          onSubmitSuccess(data);
         }
-
-        addErrorMessage(t('Unknown error occurred while saving data scrubbing rule'));
-        return undefined;
-      });
+      }
+    } catch (error) {
+      this.convertRequestError(handleError(error));
+    }
   };
 
-  handleAddRule = async (rule: Rule) => {
-    const newRule = {
-      ...rule,
-      id: this.state.rules.length,
-    };
-
+  handleAddRule = (rule: Rule) => {
+    const newRule = {...rule, id: this.state.rules.length};
     const rules = [...this.state.rules, newRule];
-
-    return await this.handleSubmit(rules).then(result => {
-      if (!result) {
-        this.setState({
-          rules,
-        });
-        return undefined;
-      }
-      return result;
-    });
+    this.handleSave(rules, t('Successfully added rule'));
   };
 
-  handleUpdateRule = async (updatedRule: Rule) => {
+  handleUpdateRule = (updatedRule: Rule) => {
     const rules = this.state.rules.map(rule => {
       if (rule.id === updatedRule.id) {
         return updatedRule;
       }
       return rule;
     });
-
-    return await this.handleSubmit(rules).then(result => {
-      if (!result) {
-        this.setState({
-          rules,
-        });
-        return undefined;
-      }
-      return result;
-    });
+    this.handleSave(rules, t('Successfully updated rule'));
   };
 
-  handleDeleteRule = async (rulesToBeDeleted: Array<Rule['id']>) => {
+  handleDeleteRule = (rulesToBeDeleted: Array<Rule['id']>) => {
     const rules = this.state.rules.filter(rule => !rulesToBeDeleted.includes(rule.id));
-    await this.handleSubmit(rules).then(result => {
-      if (!result) {
-        this.setState({
-          rules,
-        });
-      }
-    });
+    this.handleSave(rules, t('Successfully deleted rule'));
   };
 
   handleToggleAddRuleModal = (showAddRuleModal: boolean) => () => {
-    this.setState({
-      showAddRuleModal,
-    });
+    this.setState({showAddRuleModal});
   };
 
   handleUpdateEventId = (eventId: string) => {
@@ -303,6 +263,7 @@ class DataScrubbing extends React.Component<Props, State> {
       eventId,
       orgRules,
       isProjectLevel,
+      errors,
     } = this.state;
 
     return (
@@ -325,6 +286,7 @@ class DataScrubbing extends React.Component<Props, State> {
           <PanelBody>
             {isProjectLevel && <OrganizationRules rules={orgRules} />}
             <Content
+              errors={errors}
               rules={rules}
               onDeleteRule={this.handleDeleteRule}
               onUpdateRule={this.handleUpdateRule}
@@ -349,6 +311,7 @@ class DataScrubbing extends React.Component<Props, State> {
         </Panel>
         {showAddRuleModal && (
           <Dialog
+            errors={errors}
             sourceSuggestions={sourceSuggestions}
             onSaveRule={this.handleAddRule}
             onClose={this.handleToggleAddRuleModal(false)}
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/organizationRules.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/organizationRules.tsx
index 7c4a292da9..b25dddc7a2 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/organizationRules.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/organizationRules.tsx
@@ -33,9 +33,7 @@ class OrganizationRules extends React.Component<Props, State> {
     if (!this.state.contentHeight) {
       const contentHeight = this.rulesListRef.current?.offsetHeight;
       if (contentHeight) {
-        this.setState({
-          contentHeight: `${contentHeight}px`,
-        });
+        this.setState({contentHeight: `${contentHeight}px`});
       }
     }
   };
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
index 8c2ca2c915..fc3be23580 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import PropTypes from 'prop-types';
 
 import {t} from 'app/locale';
 import space from 'app/styles/space';
@@ -8,11 +7,9 @@ import TextOverflow from 'app/components/textOverflow';
 import {IconDelete, IconEdit} from 'app/icons';
 import Button from 'app/components/button';
 
-import Form from './form/form';
-import {getRuleTypeLabel, getMethodTypeLabel} from './form/utils';
-import {RuleType} from './types';
+import {getMethodLabel, getRuleLabel} from './utils';
+import {RuleType, Rule} from './types';
 
-type Rule = React.ComponentProps<typeof Form>['rule'];
 type Props = {
   rules: Array<Rule>;
   onShowEditRuleModal?: (id: Rule['id']) => () => void;
@@ -20,17 +17,17 @@ type Props = {
   disabled?: boolean;
 };
 
-const RulesList = React.forwardRef<HTMLUListElement, Props>(function RulesList(
-  {rules, onShowEditRuleModal, onDeleteRule, disabled},
-  ref
+const RulesList = React.forwardRef(function RulesList(
+  {rules, onShowEditRuleModal, onDeleteRule, disabled}: Props,
+  ref: React.Ref<HTMLUListElement>
 ) {
   return (
     <List ref={ref} isDisabled={disabled}>
-      {rules.map(({id, method, type, source, customRegularExpression}) => {
-        const methodLabel = getMethodTypeLabel(method);
-        const typeLabel = getRuleTypeLabel(type);
-        const typeDescription =
-          type === RuleType.PATTERN ? customRegularExpression : typeLabel;
+      {rules.map(rule => {
+        const {id, method, type, source} = rule;
+        const methodLabel = getMethodLabel(method);
+        const typeLabel = getRuleLabel(type);
+        const typeDescription = rule.type === RuleType.PATTERN ? rule.pattern : typeLabel;
         return (
           <ListItem key={id}>
             <TextOverflow>
@@ -61,13 +58,6 @@ const RulesList = React.forwardRef<HTMLUListElement, Props>(function RulesList(
   );
 });
 
-RulesList.propTypes = {
-  rules: PropTypes.array.isRequired,
-  onShowEditRuleModal: PropTypes.func,
-  onDeleteRule: PropTypes.func,
-  disabled: PropTypes.bool,
-};
-
 export default RulesList;
 
 const List = styled('ul')<{isDisabled?: boolean}>`
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/getRelayPiiConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/submitRules.tsx
similarity index 69%
rename from src/sentry/static/sentry/app/views/settings/components/dataScrubbing/getRelayPiiConfig.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataScrubbing/submitRules.tsx
index 8caa8ff0db..effb9c5a33 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/getRelayPiiConfig.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/submitRules.tsx
@@ -1,12 +1,12 @@
-import {RuleType, PiiConfig, Rule} from './types';
+import {Client} from 'app/api';
 
-type Applications = Record<string, Array<string>>;
+import {RuleType, PiiConfig, Applications, Rule} from './types';
 
 function getCustomRule(rule: Rule): PiiConfig {
   if (rule.type === RuleType.PATTERN) {
     return {
       type: rule.type,
-      pattern: rule?.customRegularExpression,
+      pattern: rule?.pattern,
       redaction: {
         method: rule.method,
       },
@@ -20,7 +20,7 @@ function getCustomRule(rule: Rule): PiiConfig {
   };
 }
 
-function getRelayPiiConfig(rules: Array<Rule>) {
+function submitRules(api: Client, endpoint: string, rules: Array<Rule>) {
   const applications: Applications = {};
   const customRules: Record<string, PiiConfig> = {};
 
@@ -40,7 +40,10 @@ function getRelayPiiConfig(rules: Array<Rule>) {
 
   const piiConfig = {rules: customRules, applications};
 
-  return JSON.stringify(piiConfig);
+  return api.requestPromise(endpoint, {
+    method: 'PUT',
+    data: {relayPiiConfig: JSON.stringify(piiConfig)},
+  });
 }
 
-export default getRelayPiiConfig;
+export default submitRules;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
index a6309f266f..30c423b2fb 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
@@ -36,6 +36,12 @@ export enum SourceSuggestionType {
   STRING = 'string',
 }
 
+export enum RequestError {
+  Unknown = 'unknown',
+  InvalidSelector = 'invalid-selector',
+  RegexParse = 'regex-parse',
+}
+
 export type SourceSuggestion = {
   type: SourceSuggestionType;
   value: string;
@@ -43,24 +49,56 @@ export type SourceSuggestion = {
   examples?: Array<string>;
 };
 
-export type Rule = {
+type RuleBase = {
   id: number;
-  type: RuleType;
   method: MethodType;
   source: string;
-  customRegularExpression?: string;
 };
 
-export type PiiConfig = {
-  type: RuleType;
-  pattern?: string;
-  redaction?: {
-    method?: MethodType;
-  };
+export type RuleRegex = {
+  type: RuleType.PATTERN;
+  pattern: string;
+} & RuleBase;
+
+export type RuleWithoutRegex = {
+  type:
+    | RuleType.CREDITCARD
+    | RuleType.PASSWORD
+    | RuleType.IP
+    | RuleType.IMEI
+    | RuleType.EMAIL
+    | RuleType.UUID
+    | RuleType.PEMKEY
+    | RuleType.URLAUTH
+    | RuleType.USSSN
+    | RuleType.USER_PATH
+    | RuleType.MAC
+    | RuleType.ANYTHING;
+} & RuleBase;
+
+export type Rule = RuleRegex | RuleWithoutRegex;
+
+export type KeysOfUnion<T> = T extends any ? keyof T : never;
+
+export type EventId = {
+  value: string;
+  status?: EventIdStatus;
 };
 
-export type PiiConfigRule = {
-  [key: string]: PiiConfig;
+type PiiConfigBase = {
+  redaction: {
+    method: MethodType;
+  };
 };
 
+type PiiConfigRegex = Pick<RuleRegex, 'type'> & {
+  pattern: string;
+} & PiiConfigBase;
+
+type PiiConfigWithoutRegex = Pick<RuleWithoutRegex, 'type'> & PiiConfigBase;
+
+export type PiiConfig = PiiConfigWithoutRegex | PiiConfigRegex;
+
 export type Applications = Record<string, Array<string>>;
+
+export type Errors = Partial<Record<KeysOfUnion<Rule>, string>>;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/utils.tsx
new file mode 100644
index 0000000000..bb87c3bb4a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/utils.tsx
@@ -0,0 +1,145 @@
+import {t} from 'app/locale';
+
+import {RuleType, MethodType, SourceSuggestionType, SourceSuggestion} from './types';
+
+function getRuleLabel(type: RuleType) {
+  switch (type) {
+    case RuleType.ANYTHING:
+      return t('Anything');
+    case RuleType.IMEI:
+      return t('IMEI numbers');
+    case RuleType.MAC:
+      return t('MAC addresses');
+    case RuleType.EMAIL:
+      return t('Email addresses');
+    case RuleType.PEMKEY:
+      return t('PEM keys');
+    case RuleType.URLAUTH:
+      return t('Auth in URLs');
+    case RuleType.USSSN:
+      return t('US social security numbers');
+    case RuleType.USER_PATH:
+      return t('Usernames in filepaths');
+    case RuleType.UUID:
+      return t('UUIDs');
+    case RuleType.CREDITCARD:
+      return t('Credit card numbers');
+    case RuleType.PASSWORD:
+      return t('Password fields');
+    case RuleType.IP:
+      return t('IP addresses');
+    case RuleType.PATTERN:
+      return t('Regex matches');
+    default:
+      return '';
+  }
+}
+
+function getMethodLabel(type: MethodType) {
+  switch (type) {
+    case MethodType.MASK:
+      return {
+        label: t('Mask'),
+        description: t('Replace with ****'),
+      };
+    case MethodType.HASH:
+      return {
+        label: t('Hash'),
+        description: t('Replace with DEADBEEF'),
+      };
+    case MethodType.REMOVE:
+      return {
+        label: t('Remove'),
+        description: t('Replace with null'),
+      };
+    case MethodType.REPLACE:
+      return {
+        label: t('Replace'),
+        description: t('Replace with [Filtered]'),
+      };
+    default:
+      return {
+        label: '',
+      };
+  }
+}
+
+const binarySuggestions: Array<SourceSuggestion> = [
+  {
+    type: SourceSuggestionType.BINARY,
+    value: '&&',
+  },
+  {
+    type: SourceSuggestionType.BINARY,
+    value: '||',
+  },
+];
+
+const unarySuggestions: Array<SourceSuggestion> = [
+  {
+    type: SourceSuggestionType.UNARY,
+    value: '!',
+  },
+];
+
+const valueSuggestions: Array<SourceSuggestion> = [
+  {type: SourceSuggestionType.VALUE, value: '**', description: t('everywhere')},
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'password',
+    description: t('attributes named "password"'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$error.value',
+    description: t('the exception value'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$message',
+    description: t('the log message'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'extra.MyValue',
+    description: t('the key "MyValue" in "Additional Data"'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'extra.**',
+    description: t('everything in "Additional Data"'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$http.headers.x-custom-token',
+    description: t('the X-Custom-Token HTTP header'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$user.ip_address',
+    description: t('the user IP address'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$frame.vars.foo',
+    description: t('the local variable "foo"'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'contexts.device.timezone',
+    description: t('the timezone in the device context'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'tags.server_name',
+    description: t('the tag "server_name"'),
+  },
+];
+
+export {
+  getRuleLabel,
+  getMethodLabel,
+  unarySuggestions,
+  binarySuggestions,
+  valueSuggestions,
+};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
index 18a73b83dc..11ca0ca7d2 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
@@ -70,9 +70,7 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
           relayPiiConfig={relayPiiConfig}
           disabled={!access.has('org:write')}
           organization={organization}
-          onSubmitSuccess={resp => {
-            this.handleUpdateOrganization(resp as Organization);
-          }}
+          onSubmitSuccess={this.handleUpdateOrganization}
         />
       </React.Fragment>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
index ba720053ad..90f3e10242 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -94,9 +94,7 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
           disabled={!access.has('project:write')}
           organization={organization}
           projectId={project.id}
-          onSubmitSuccess={resp => {
-            this.handleUpdateProject(resp as Project);
-          }}
+          onSubmitSuccess={this.handleUpdateProject}
         />
       </React.Fragment>
     );
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
index 93d9a395bb..78445897fa 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
@@ -4,10 +4,10 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 
 import SourceField from 'app/views/settings/components/dataScrubbing/form/sourceField';
 import {
-  binaryOperatorSuggestions,
-  unaryOperatorSuggestions,
-  defaultSuggestions,
-} from 'app/views/settings/components/dataScrubbing/form/sourceFieldSuggestions';
+  binarySuggestions,
+  unarySuggestions,
+  valueSuggestions,
+} from 'app/views/settings/components/dataScrubbing/utils';
 
 function renderComponent({
   value = '$string',
@@ -17,7 +17,7 @@ function renderComponent({
   return mountWithTheme(
     <SourceField
       isRegExMatchesSelected={false}
-      suggestions={defaultSuggestions}
+      suggestions={valueSuggestions}
       onChange={onChange}
       value={value}
       {...props}
@@ -67,9 +67,9 @@ describe('Source', () => {
     // binaryOperatorSuggestions.length === 2
     expect(suggestions).toHaveLength(2);
     // &&
-    expect(suggestions.at(0).text()).toEqual(binaryOperatorSuggestions[0].value);
+    expect(suggestions.at(0).text()).toEqual(binarySuggestions[0].value);
     // ||
-    expect(suggestions.at(1).text()).toEqual(binaryOperatorSuggestions[1].value);
+    expect(suggestions.at(1).text()).toEqual(binarySuggestions[1].value);
   });
 
   it('display defaultSuggestions + unaryOperatorSuggestions, if penultimateFieldValue has type binary', () => {
@@ -83,7 +83,7 @@ describe('Source', () => {
     // [...defaultSuggestions, ...unaryOperatorSuggestions].length === 12
     expect(suggestions).toHaveLength(12);
     // !
-    expect(suggestions.at(11).text()).toEqual(unaryOperatorSuggestions[0].value);
+    expect(suggestions.at(11).text()).toEqual(unarySuggestions[0].value);
   });
 
   it('display binaryOperatorSuggestions if penultimateFieldValue has type value', () => {
@@ -97,9 +97,9 @@ describe('Source', () => {
     // binaryOperatorSuggestions.length === 2
     expect(suggestions).toHaveLength(2);
     // &&
-    expect(suggestions.at(0).text()).toEqual(binaryOperatorSuggestions[0].value);
+    expect(suggestions.at(0).text()).toEqual(binarySuggestions[0].value);
     // ||
-    expect(suggestions.at(1).text()).toEqual(binaryOperatorSuggestions[1].value);
+    expect(suggestions.at(1).text()).toEqual(binarySuggestions[1].value);
   });
 
   it('display binaryOperatorSuggestions if penultimateFieldValue is of typeof Array', () => {
@@ -113,9 +113,9 @@ describe('Source', () => {
     // binaryOperatorSuggestions.length === 2
     expect(suggestions).toHaveLength(2);
     // &&
-    expect(suggestions.at(0).text()).toEqual(binaryOperatorSuggestions[0].value);
+    expect(suggestions.at(0).text()).toEqual(binarySuggestions[0].value);
     // ||
-    expect(suggestions.at(1).text()).toEqual(binaryOperatorSuggestions[1].value);
+    expect(suggestions.at(1).text()).toEqual(binarySuggestions[1].value);
   });
 
   it('display defaultSuggestions if penultimateFieldValue has type unary', () => {
@@ -131,7 +131,7 @@ describe('Source', () => {
 
     // everywhere
     expect(suggestions.at(0).text()).toEqual(
-      `${defaultSuggestions[0].value}(${defaultSuggestions[0].description})`
+      `${valueSuggestions[0].value}(${valueSuggestions[0].description})`
     );
   });
 
@@ -148,7 +148,7 @@ describe('Source', () => {
       .children();
 
     suggestions.at(1).simulate('click');
-    expect(wrapper.state().fieldValues[2].value).toBe(defaultSuggestions[1].value);
+    expect(wrapper.state().fieldValues[2].value).toBe(valueSuggestions[1].value);
   });
 
   it('suggestions keyDown and keyUp should work', () => {
