commit b23a20e6f716a4c617b760b09c24b1e7f30ecace
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 14 16:27:00 2015 -0800

    Add logging to buffers

diff --git a/src/sentry/buffer/base.py b/src/sentry/buffer/base.py
index 053ff09786..067c9a0bc0 100644
--- a/src/sentry/buffer/base.py
+++ b/src/sentry/buffer/base.py
@@ -7,12 +7,21 @@ sentry.buffer.base
 """
 from __future__ import absolute_import
 
+import logging
+
 from django.db.models import F
 
 from sentry.signals import buffer_incr_complete
 from sentry.tasks.process_buffer import process_incr
 
 
+class BufferMount(type):
+    def __new__(cls, name, bases, attrs):
+        new_cls = type.__new__(cls, name, bases, attrs)
+        new_cls.logger = logging.getLogger('sentry.buffer.%s' % (new_cls.__name__.lower(),))
+        return new_cls
+
+
 class Buffer(object):
     """
     Buffers act as temporary stores for counters. The default implementation is just a passthru and
@@ -26,6 +35,8 @@ class Buffer(object):
     This is useful in situations where a single event might be happening so fast that the queue cant
     keep up with the updates.
     """
+    __metaclass__ = BufferMount
+
     def incr(self, model, columns, filters, extra=None):
         """
         >>> incr(Group, columns={'times_seen': 1}, filters={'pk': group.pk})
diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 22a4ae9ed0..27e56fbbda 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -102,6 +102,7 @@ class RedisBuffer(Buffer):
         # prevent a stampede due to the way we use celery etas + duplicate
         # tasks
         if not self.conn.setnx(lock_key, '1'):
+            self.logger.info('Skipped process on %s; unable to get lock', key)
             return
         self.conn.expire(lock_key, 10)
 
@@ -110,6 +111,7 @@ class RedisBuffer(Buffer):
             conn.delete(key)
 
         if not values:
+            self.logger.info('Skipped process on %s; no values found', key)
             return
 
         model = import_string(values['m'])
