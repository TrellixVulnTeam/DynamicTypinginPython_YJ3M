commit f4aa30b961c39feab8c74862f7b5ab83780258a9
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 20 10:29:43 2015 -0700

    Expand endpoint

diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 67ef125e90..779127fc82 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -9,11 +9,7 @@ from sentry.api.bases.organization import (
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
 
-ERR_INSUFFICIENT_ROLE = 'You cannot remove a member who has more access than you.'
-
-ERR_ONLY_OWNER = 'You cannot remove the only remaining owner of the organization.'
-
-ERR_UNINVITABLE = 'You cannot send an invitation to a user who is already a full member.'
+ERR_INSUFFICIENT_ROLE = 'You cannot modify a member other than yourself.'
 
 
 class OrganizationMemberTeamSerializer(serializers.Serializer):
@@ -23,8 +19,8 @@ class OrganizationMemberTeamSerializer(serializers.Serializer):
 class RelaxedOrganizationPermission(OrganizationPermission):
     scope_map = {
         'GET': ['org:read', 'org:write', 'org:delete'],
-        'POST': ['org:write', 'org:delete'],
-        'PUT': ['org:write', 'org:delete'],
+        'POST': ['org:read', 'org:write', 'org:delete'],
+        'PUT': ['org:read', 'org:write', 'org:delete'],
 
         # DELETE checks for role comparison as you can either remove a member
         # with a lower access role, or yourself, without having the req. scope
@@ -35,6 +31,16 @@ class RelaxedOrganizationPermission(OrganizationPermission):
 class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
     permission_classes = [RelaxedOrganizationPermission]
 
+    def _can_access(self, request, member):
+        # TODO(dcramer): ideally org owners/admins could perform these actions
+        if request.user.is_superuser:
+            return True
+
+        if request.user.id == member.user_id:
+            return True
+
+        return False
+
     def put(self, request, organization, member_id, team_slug):
         try:
             om = OrganizationMember.objects.filter(
@@ -44,6 +50,9 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
+        if not self._can_access(request, om):
+            return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
+
         try:
             team = Team.objects.get(
                 organization=organization,
@@ -59,7 +68,13 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
                     organizationmember=om,
                 )
             except OrganizationMemberTeam.DoesNotExist:
-                raise ResourceDoesNotExist
+                if not organization.flags.allow_joinleave:
+                    raise ResourceDoesNotExist
+                omt = OrganizationMemberTeam(
+                    team=team,
+                    organizationmember=om,
+                    is_active=False,
+                )
         else:
             try:
                 omt = OrganizationMemberTeam.objects.get(
@@ -77,7 +92,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             return Response(serializer.errors, status=400)
 
         result = serializer.object
-        if result.get('isActive') is not None:
+        if result.get('isActive') is not None and result['isActive'] != omt.is_active:
             omt.is_active = result['isActive']
             omt.save()
 
diff --git a/tests/sentry/api/endpoints/test_organization_member_team_details.py b/tests/sentry/api/endpoints/test_organization_member_team_details.py
index cc7e3cd5c4..79f86af36a 100644
--- a/tests/sentry/api/endpoints/test_organization_member_team_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_team_details.py
@@ -2,7 +2,9 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import OrganizationMemberTeam, OrganizationMemberType
+from sentry.models import (
+    Organization, OrganizationMemberTeam, OrganizationMemberType
+)
 from sentry.testutils import APITestCase
 
 
@@ -63,3 +65,57 @@ class UpdateOrganizationMemberTeamTest(APITestCase):
             organizationmember=member_om,
         )
         assert not omt.is_active
+
+    def test_cannot_change_status_as_non_team_member(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(name='foo', organization=organization)
+        member_om = self.create_member(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+
+        path = reverse('sentry-api-0-organization-member-team-details', args=[
+            organization.slug, member_om.id, team.slug,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'isActive': '1'})
+
+        assert resp.status_code == 404
+
+    def test_can_change_status_on_open_org(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(
+            name='foo',
+            owner=self.user,
+            flags=Organization.flags.allow_joinleave,
+        )
+        team = self.create_team(name='foo', organization=organization)
+        member_om = self.create_member(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+
+        path = reverse('sentry-api-0-organization-member-team-details', args=[
+            organization.slug, member_om.id, team.slug,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'isActive': '1'})
+
+        assert resp.status_code == 200
+
+        omt = OrganizationMemberTeam.objects.get(
+            team=team,
+            organizationmember=member_om,
+        )
+        assert omt.is_active
