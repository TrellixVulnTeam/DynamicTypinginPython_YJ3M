commit f32e7440a91e166106c5b678b3a9ba94fbf4ae81
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Mar 13 17:03:20 2020 -0700

    chore(ts): Convert sidebar/broadcasts (#17659)

diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.tsx
similarity index 69%
rename from src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
rename to src/sentry/static/sentry/app/components/sidebar/broadcasts.tsx
index 275dc30885..335f0865fe 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.tsx
@@ -1,33 +1,41 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 
 import {getAllBroadcasts, markBroadcastsAsSeen} from 'app/actionCreators/broadcasts';
 import {t} from 'app/locale';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import SentryTypes from 'app/sentryTypes';
 import SidebarItem from 'app/components/sidebar/sidebarItem';
 import SidebarPanel from 'app/components/sidebar/sidebarPanel';
 import SidebarPanelEmpty from 'app/components/sidebar/sidebarPanelEmpty';
 import SidebarPanelItem from 'app/components/sidebar/sidebarPanelItem';
 import {IconBroadcast} from 'app/icons/iconBroadcast';
 import withApi from 'app/utils/withApi';
+import {Client} from 'app/api';
+import {Organization, Broadcast} from 'app/types';
+
+import {SidebarOrientation, SidebarPanelKey} from './types';
 
 const MARK_SEEN_DELAY = 1000;
 const POLLER_DELAY = 600000; // 10 minute poll (60 * 10 * 1000)
 
-class Broadcasts extends React.Component {
-  static propTypes = {
-    orientation: PropTypes.oneOf(['top', 'left']),
-    collapsed: PropTypes.bool,
-    showPanel: PropTypes.bool,
-    currentPanel: PropTypes.string,
-    hidePanel: PropTypes.func,
-    onShowPanel: PropTypes.func.isRequired,
-    api: PropTypes.object.isRequired,
-    organization: SentryTypes.Organization.isRequired,
-  };
-
-  state = {
+type Props = {
+  api: Client;
+  organization: Organization;
+  orientation: SidebarOrientation;
+  collapsed: boolean;
+  showPanel: boolean;
+  currentPanel: SidebarPanelKey;
+  hidePanel: () => void;
+  onShowPanel: () => void;
+};
+
+type State = {
+  broadcasts: Broadcast[];
+  loading: boolean;
+  error: boolean;
+};
+
+class Broadcasts extends React.Component<Props, State> {
+  state: State = {
     broadcasts: [],
     loading: true,
     error: false,
@@ -51,72 +59,58 @@ class Broadcasts extends React.Component {
     document.removeEventListener('visibilitychange', this.handleVisibilityChange);
   }
 
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  }
+  poller: number | null = null;
+  timer: number | null = null;
 
   startPoll() {
     this.poller = window.setTimeout(this.fetchData, POLLER_DELAY);
   }
 
   stopPoll() {
-    window.clearTimeout(this.poller);
-    this.poller = null;
+    if (this.poller) {
+      window.clearTimeout(this.poller);
+      this.poller = null;
+    }
   }
 
-  fetchData = () => {
+  fetchData = async () => {
     if (this.poller) {
       this.stopPoll();
     }
 
-    return getAllBroadcasts(this.props.api, this.props.organization.slug)
-      .then(data => {
-        this.setState({
-          broadcasts: data || [],
-          loading: false,
-        });
-        this.startPoll();
-      })
-      .catch(() => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-        this.startPoll();
-      });
+    try {
+      const data = await getAllBroadcasts(this.props.api, this.props.organization.slug);
+      this.setState({loading: false, broadcasts: data || []});
+    } catch {
+      this.setState({loading: false, error: true});
+    }
+
+    this.startPoll();
   };
 
   /**
-   * If tab/window loses visiblity (note: this is different than focus), stop polling for broadcasts data, otherwise,
-   * if it gains visibility, start polling again.
+   * If tab/window loses visiblity (note: this is different than focus), stop
+   * polling for broadcasts data, otherwise, if it gains visibility, start
+   * polling again.
    */
-  handleVisibilityChange = () => {
-    if (document.hidden) {
-      this.stopPoll();
-    } else {
-      this.startPoll();
-    }
-  };
+  handleVisibilityChange = () => (document.hidden ? this.stopPoll() : this.startPoll());
 
   handleShowPanel = () => {
     this.timer = window.setTimeout(this.markSeen, MARK_SEEN_DELAY);
     this.props.onShowPanel();
   };
 
-  markSeen = () => {
+  markSeen = async () => {
     const unseenBroadcastIds = this.unseenIds;
     if (unseenBroadcastIds.length === 0) {
       return;
     }
 
-    markBroadcastsAsSeen(this.props.api, unseenBroadcastIds).then(() => {
-      this.setState(state => ({
-        broadcasts: state.broadcasts.map(item => {
-          item.hasSeen = true;
-          return item;
-        }),
-      }));
-    });
+    await markBroadcastsAsSeen(this.props.api, unseenBroadcastIds);
+
+    this.setState(state => ({
+      broadcasts: state.broadcasts.map(item => ({...item, hasSeen: true})),
+    }));
   };
 
   get unseenIds() {
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 5b944474f3..1906ca5006 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1013,3 +1013,15 @@ export type UpdateResolutionStatus = {
   status: ResolutionStatus;
   statusDetails?: ResolutionStatusDetails;
 };
+
+export type Broadcast = {
+  id: string;
+  message: string;
+  title: string;
+  link: string;
+  cta: string;
+  isActive: boolean;
+  dateCreated: string;
+  dateExpires: string;
+  hasSeen: boolean;
+};
