commit 2b1662f5fcf5893b0127c7ed805ec0fb109d0892
Author: Mark Story <mark@sentry.io>
Date:   Thu Apr 9 09:51:15 2020 -0400

    fix(discover) Populate the user alias field in responses (#18165)
    
    When the `user` alias field is requested it is helpful to have the
    `user` field present in the output columns as well. This will help
    cell-actions and CSV export have access to the same coalesed data that
    the UI has.
    
    I'm also considering removing the user component fields from the
    response as we can 'fake' a user in the UI code. Doing so would allow us
    to transfer fewer bytes to clients.

diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index b8c1a59007..698cf76ff9 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -395,7 +395,7 @@ def zerofill(data, start, end, rollup, orderby):
     return rv
 
 
-def transform_results(result, translated_columns, snuba_filter):
+def transform_results(result, translated_columns, snuba_filter, selected_columns=None):
     """
     Transform internal names back to the public schema ones.
 
@@ -407,7 +407,15 @@ def transform_results(result, translated_columns, snuba_filter):
         col["name"] = translated_columns.get(col["name"], col["name"])
 
     def get_row(row):
-        return {translated_columns.get(key, key): value for key, value in row.items()}
+        transformed = {translated_columns.get(key, key): value for key, value in row.items()}
+        if selected_columns and "user" in selected_columns:
+            transformed["user"] = (
+                transformed.get("user.email")
+                or transformed.get("user.username")
+                or transformed.get("user.ip")
+                or transformed.get("user.id")
+            )
+        return transformed
 
     if len(translated_columns):
         result["data"] = [get_row(row) for row in result["data"]]
@@ -602,7 +610,7 @@ def query(
         referrer=referrer,
     )
 
-    return transform_results(result, translated_columns, snuba_filter)
+    return transform_results(result, translated_columns, snuba_filter, selected_columns)
 
 
 def key_transaction_conditions(queryset):
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 4f49099eab..e70b35d76b 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -137,20 +137,26 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
 
     def test_field_aliasing_in_selected_columns(self):
         result = discover.query(
-            selected_columns=["project.id", "user.email", "release"],
+            selected_columns=["project.id", "user", "release"],
             query="",
             params={"project_id": [self.project.id]},
         )
         data = result["data"]
         assert len(data) == 1
         assert data[0]["project.id"] == self.project.id
+        assert data[0]["user"] == "bruce@example.com", "alias prefers email"
         assert data[0]["user.email"] == "bruce@example.com"
         assert data[0]["release"] == "first-release"
 
-        assert len(result["meta"]) == 3
-        assert result["meta"][0] == {"name": "project.id", "type": "UInt64"}
-        assert result["meta"][1] == {"name": "user.email", "type": "Nullable(String)"}
-        assert result["meta"][2] == {"name": "release", "type": "Nullable(String)"}
+        assert len(result["meta"]) == 6
+        assert result["meta"] == [
+            {"name": "project.id", "type": "UInt64"},
+            {"name": "user.id", "type": "Nullable(String)"},
+            {"name": "user.username", "type": "Nullable(String)"},
+            {"name": "user.email", "type": "Nullable(String)"},
+            {"name": "user.ip", "type": "Nullable(String)"},
+            {"name": "release", "type": "Nullable(String)"},
+        ]
 
     def test_field_aliasing_in_aggregate_functions_and_groupby(self):
         result = discover.query(
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 0ddb1c88b1..c38f699511 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -358,6 +358,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
 
                 assert response.status_code == 200, response.content
                 assert len(response.data["data"]) == 1
+                assert response.data["data"][0]["user"] == data["user"]["ip_address"]
                 assert response.data["data"][0]["user.ip"] == data["user"]["ip_address"]
 
     def test_negative_user_search(self):
@@ -400,6 +401,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
 
             assert response.status_code == 200, response.content
             assert len(response.data["data"]) == 1
+            assert response.data["data"][0]["user"] == user_data["email"]
             assert response.data["data"][0]["user.email"] == user_data["email"]
 
     def test_not_project_in_query(self):
@@ -603,7 +605,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                 self.url,
                 format="json",
                 data={
-                    "field": ["issue.id", "issue_title", "count(id)", "count_unique(user)"],
+                    "field": ["issue.id", "count(id)", "count_unique(user)"],
                     "orderby": "issue.id",
                 },
             )
