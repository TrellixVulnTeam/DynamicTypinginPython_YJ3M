commit 9e97a912142b6e3b424f7aa5c71368ea56c9c715
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 2 23:59:32 2012 -0800

    More test refactoring

diff --git a/tests/testcases.py b/tests/base.py
similarity index 71%
rename from tests/testcases.py
rename to tests/base.py
index 1ff7c9f753..f3f92daeb0 100644
--- a/tests/testcases.py
+++ b/tests/base.py
@@ -1,5 +1,7 @@
-import time
+from __future__ import absolute_import
+
 import base64
+import time
 
 from sentry.conf import settings
 from sentry.utils import json
@@ -7,14 +9,56 @@ from sentry.utils.auth import get_signature, get_auth_header
 from sentry.utils.compat import pickle
 from sentry.utils.compat.db import connections
 
+
+from django.conf import settings as django_settings
 from django.core.management import call_command
 from django.core.urlresolvers import reverse
 from django.db import DEFAULT_DB_ALIAS
 from django.test import TestCase, TransactionTestCase
 from django.test.client import Client
 
+
+class Settings(object):
+    """
+    Allows you to define settings that are required for this function to work.
+
+    >>> with Settings(SENTRY_LOGIN_URL='foo'): #doctest: +SKIP
+    >>>     print settings.SENTRY_LOGIN_URL #doctest: +SKIP
+    """
+
+    NotDefined = object()
+
+    def __init__(self, **overrides):
+        self.overrides = overrides
+        self._orig = {}
+        self._orig_sentry = {}
+
+    def __enter__(self):
+        for k, v in self.overrides.iteritems():
+            self._orig[k] = getattr(django_settings, k, self.NotDefined)
+            setattr(django_settings, k, v)
+            if k.startswith('SENTRY_'):
+                nk = k.split('SENTRY_', 1)[1]
+                self._orig_sentry[nk] = getattr(settings, nk, self.NotDefined)
+                setattr(settings, nk, v)
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        for k, v in self._orig.iteritems():
+            if v is self.NotDefined:
+                delattr(django_settings, k)
+            else:
+                setattr(django_settings, k, v)
+        for k, v in self._orig_sentry.iteritems():
+            if v is self.NotDefined:
+                delattr(settings, k)
+            else:
+                setattr(settings, k, v)
+
+
 class BaseTestCase(object):
-    urls = 'tests.urls'
+    urls = 'tests.web.urls'
+
+    Settings = Settings
 
     def _postWithKey(self, data, key=None):
         resp = self.client.post(reverse('sentry-store'), {
@@ -47,9 +91,11 @@ class BaseTestCase(object):
         )
         return resp
 
+
 class TestCase(BaseTestCase, TestCase):
     pass
 
+
 class TransactionTestCase(BaseTestCase, TransactionTestCase):
     """
     Subclass of ``django.test.TransactionTestCase`` that quickly tears down
diff --git a/tests/processors/tests.py b/tests/processors/tests.py
index d78555bfad..f26c3d6fab 100644
--- a/tests/processors/tests.py
+++ b/tests/processors/tests.py
@@ -6,7 +6,7 @@ from __future__ import absolute_import, with_statement
 from sentry.processors import Processor
 from sentry.conf import settings
 
-from tests.testcases import TestCase
+from tests.base import TestCase
 
 from . import processor
 
diff --git a/tests/tasks/cleanup/tests.py b/tests/tasks/cleanup/tests.py
index ba5b731ab1..4654c13288 100644
--- a/tests/tasks/cleanup/tests.py
+++ b/tests/tasks/cleanup/tests.py
@@ -6,7 +6,7 @@ import logging
 
 from sentry.models import Event, Group, MessageCountByMinute, \
   MessageFilterValue
-from tests.testcases import TestCase
+from tests.base import TestCase
 
 
 class SentryCleanupTest(TestCase):
diff --git a/tests/tests.py b/tests/tests.py
index 7579c93729..f2f8791408 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -2,27 +2,21 @@
 
 from __future__ import absolute_import, with_statement
 
-import datetime
 import getpass
 import logging
 
-from django.conf import settings as django_settings
-from django.contrib.auth.models import User
 from django.core import mail
 from django.core.urlresolvers import reverse
 
 from sentry.conf import settings
 from sentry.exceptions import InvalidInterface, InvalidData
 from sentry.interfaces import Interface
-from sentry.models import Event, Group, \
-  Project, ProjectMember
-from sentry.web.helpers import get_login_url
+from sentry.models import Group, Project
 from sentry.utils import MockDjangoRequest
 from sentry.utils.auth import get_auth_header
 from sentry.services.udp import SentryUDPServer
 
-from tests.testcases import TestCase
-from tests.utils import Settings
+from tests.base import TestCase
 
 # class NullHandler(logging.Handler):
 #     def emit(self, record):
@@ -39,240 +33,6 @@ from tests.utils import Settings
 logger = logging.getLogger(__name__)
 
 
-class SentryViewsTest(TestCase):
-    fixtures = ['tests/fixtures/views.json']
-
-    def setUp(self):
-        self.user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
-        self.user.set_password('admin')
-        self.user.save()
-
-    def test_auth(self):
-        resp = self.client.get(reverse('sentry'), follow=True)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/login.html')
-
-        resp = self.client.post(reverse('sentry-login'), {
-            'username': 'admin',
-            'password': 'admin',
-        }, follow=True)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateNotUsed(resp, 'sentry/login.html')
-
-    def test_get_login_url(self):
-        with Settings(LOGIN_URL='/really-a-404'):
-            url = get_login_url(True)
-            self.assertEquals(url, reverse('sentry-login'))
-
-        with Settings(LOGIN_URL=reverse('sentry-fake-login')):
-            url = get_login_url(True)
-            self.assertEquals(url, reverse('sentry-fake-login'))
-
-        # should still be cached
-        with Settings(LOGIN_URL='/really-a-404'):
-            url = get_login_url(False)
-            self.assertEquals(url, reverse('sentry-fake-login'))
-
-        with Settings(SENTRY_LOGIN_URL=None):
-            url = get_login_url(True)
-            self.assertEquals(url, reverse('sentry-login'))
-
-    def test_dashboard(self):
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry'), follow=True)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateNotUsed(resp, 'sentry/dashboard.html')
-
-        # requires two projects to show dashboard
-        p = Project.objects.create(name='foo')
-        ProjectMember.objects.create(project=p, user=self.user)
-        resp = self.client.get(reverse('sentry'), follow=True)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/dashboard.html')
-
-    def test_index(self):
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry', kwargs={'project_id': 1}) + '?sort=freq', follow=True)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
-        self.assertEquals(len(resp.context['event_list']), 4)
-        group = resp.context['event_list'][0]
-        self.assertEquals(group.times_seen, 7)
-        self.assertEquals(group.message, "'tuple' object has no attribute 'args'")
-
-    def test_group_details(self):
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry-group', kwargs={'group_id': 2}), follow=True)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
-        self.assertTrue('group' in resp.context)
-        group = Group.objects.get(pk=2)
-        self.assertEquals(resp.context['group'], group)
-
-    def test_group_event_list(self):
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry-group-events', args=[2]), follow=True)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
-        self.assertTrue('group' in resp.context)
-        group = Group.objects.get(pk=2)
-        self.assertEquals(resp.context['group'], group)
-
-    def test_group_message_details(self):
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry-group-event', kwargs={'group_id': 2, 'event_id': 4}), follow=True)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        self.assertTemplateUsed(resp, 'sentry/groups/event.html')
-        self.assertTrue('group' in resp.context)
-        group = Group.objects.get(pk=2)
-        self.assertEquals(resp.context['group'], group)
-
-
-class SentryRemoteTest(TestCase):
-    def setUp(self):
-        settings.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
-        logger = logging.getLogger('sentry')
-        for h in logger.handlers:
-            logger.removeHandler(h)
-        logger.addHandler(logging.StreamHandler())
-
-    def tearDown(self):
-        settings.REMOTE_URL = None
-
-    def test_no_key(self):
-        resp = self.client.post(reverse('sentry-store'))
-        self.assertEquals(resp.status_code, 401)
-
-    # def test_no_data(self):
-    #     resp = self.client.post(reverse('sentry-store'), {
-    #         'key': settings.KEY,
-    #     })
-    #     self.assertEquals(resp.status_code, 400)
-
-    # def test_bad_data(self):
-    #     resp = self.client.post(reverse('sentry-store'), {
-    #         'key': settings.KEY,
-    #         'data': 'hello world',
-    #     })
-    #     self.assertEquals(resp.status_code, 401)
-        # self.assertEquals(resp.content, 'Bad data decoding request (TypeError, Incorrect padding)')
-
-    def test_correct_data(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200)
-        instance = Event.objects.get()
-        self.assertEquals(instance.message, 'hello')
-        self.assertEquals(instance.server_name, 'not_dcramer.local')
-        self.assertEquals(instance.level, 40)
-        self.assertEquals(instance.site, 'not_a_real_site')
-
-    def test_unicode_keys(self):
-        kwargs = {u'message': 'hello', u'server_name': 'not_dcramer.local', u'level': 40, u'site': 'not_a_real_site'}
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        instance = Event.objects.get()
-        self.assertEquals(instance.message, 'hello')
-        self.assertEquals(instance.server_name, 'not_dcramer.local')
-        self.assertEquals(instance.level, 40)
-        self.assertEquals(instance.site, 'not_a_real_site')
-
-    def test_timestamp(self):
-        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
-        kwargs = {u'message': 'hello', 'timestamp': timestamp.strftime('%s.%f')}
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        instance = Event.objects.get()
-        self.assertEquals(instance.message, 'hello')
-        self.assertEquals(instance.datetime, timestamp)
-        group = instance.group
-        self.assertEquals(group.first_seen, timestamp)
-        self.assertEquals(group.last_seen, timestamp)
-
-    def test_timestamp_as_iso(self):
-        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
-        kwargs = {u'message': 'hello', 'timestamp': timestamp.strftime('%Y-%m-%dT%H:%M:%S.%f')}
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        instance = Event.objects.get()
-        self.assertEquals(instance.message, 'hello')
-        self.assertEquals(instance.datetime, timestamp)
-        group = instance.group
-        self.assertEquals(group.first_seen, timestamp)
-        self.assertEquals(group.last_seen, timestamp)
-
-    def test_ungzipped_data(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200)
-        instance = Event.objects.get()
-        self.assertEquals(instance.message, 'hello')
-        self.assertEquals(instance.server_name, 'not_dcramer.local')
-        self.assertEquals(instance.site, 'not_a_real_site')
-        self.assertEquals(instance.level, 40)
-
-    # def test_byte_sequence(self):
-    #     """
-    #     invalid byte sequence for encoding "UTF8": 0xedb7af
-    #     """
-    #     # TODO:
-    #     # add 'site' to data in fixtures/bad_data.json, then assert it's set correctly below
-
-    #     fname = os.path.join(os.path.dirname(__file__), 'fixtures/bad_data.json')
-    #     data = open(fname).read()
-
-    #     resp = self.client.post(reverse('sentry-store'), {
-    #         'data': data,
-    #         'key': settings.KEY,
-    #     })
-
-    #     self.assertEquals(resp.status_code, 200)
-
-    #     self.assertEquals(Event.objects.count(), 1)
-
-    #     instance = Event.objects.get()
-
-    #     self.assertEquals(instance.message, 'DatabaseError: invalid byte sequence for encoding "UTF8": 0xeda4ac\nHINT:  This error can also happen if the byte sequence does not match the encoding expected by the server, which is controlled by "client_encoding".\n')
-    #     self.assertEquals(instance.server_name, 'shilling.disqus.net')
-    #     self.assertEquals(instance.level, 40)
-
-    def test_signature(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
-
-        resp = self._postWithSignature(kwargs)
-
-        self.assertEquals(resp.status_code, 200, resp.content)
-
-        instance = Event.objects.get()
-
-        self.assertEquals(instance.message, 'hello')
-        self.assertEquals(instance.server_name, 'not_dcramer.local')
-        self.assertEquals(instance.site, 'not_a_real_site')
-        self.assertEquals(instance.level, 40)
-
-
-class SentryFeedsTest(TestCase):
-    fixtures = ['tests/fixtures/feeds.json']
-
-    def test_message_feed(self):
-        response = self.client.get(reverse('sentry-feed-messages'))
-        self.assertEquals(response.status_code, 200)
-        self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
-        self.assertTrue('<link>http://testserver/</link>' in response.content)
-        self.assertTrue('<title>log messages</title>' in response.content)
-        self.assertTrue('<link>http://testserver/1/group/1</link>' in response.content, response.content)
-        self.assertTrue('<title>exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
-
-    def test_summary_feed(self):
-        response = self.client.get(reverse('sentry-feed-summaries'))
-        self.assertEquals(response.status_code, 200)
-        self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
-        self.assertTrue('<link>http://testserver/</link>' in response.content)
-        self.assertTrue('<title>log summaries</title>' in response.content)
-        self.assertTrue('<link>http://testserver/1/group/1</link>' in response.content, response.content)
-        self.assertTrue('<title>(1) exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
-
-
 class SentryMailTest(TestCase):
     fixtures = ['tests/fixtures/mail.json']
 
@@ -342,29 +102,6 @@ class SentryMailTest(TestCase):
         self.assertTrue('http://example.com/group/2' in out.body, out.body)
 
 
-class SentryHelpersTest(TestCase):
-    def test_get_db_engine(self):
-        from sentry.utils import get_db_engine
-        _databases = getattr(django_settings, 'DATABASES', {}).copy()
-        _engine = django_settings.DATABASE_ENGINE
-
-        django_settings.DATABASE_ENGINE = ''
-        django_settings.DATABASES['default'] = {'ENGINE': 'blah.sqlite3'}
-
-        self.assertEquals(get_db_engine(), 'sqlite3')
-
-        django_settings.DATABASE_ENGINE = 'mysql'
-
-        self.assertEquals(get_db_engine(), 'sqlite3')
-
-        django_settings.DATABASES['default'] = {'ENGINE': 'blah.mysql'}
-
-        self.assertEquals(get_db_engine(), 'mysql')
-
-        django_settings.DATABASES = _databases
-        django_settings.DATABASE_ENGINE = _engine
-
-
 class SentrySearchTest(TestCase):
     def test_checksum_query(self):
         checksum = 'a' * 32
@@ -376,7 +113,7 @@ class SentrySearchTest(TestCase):
             message='hi',
         )
 
-        with Settings(SENTRY_PUBLIC=True):
+        with self.Settings(SENTRY_PUBLIC=True):
             response = self.client.get(reverse('sentry-search', kwargs={'project_id': 1}), {'q': '%s$%s' % (checksum, checksum)})
             self.assertEquals(response.status_code, 302)
             self.assertEquals(response['Location'], 'http://testserver%s' % (g.get_absolute_url(),))
@@ -398,7 +135,7 @@ class SentrySearchTest(TestCase):
             message='hi',
         )
 
-        with Settings(SENTRY_PUBLIC=True):
+        with self.Settings(SENTRY_PUBLIC=True):
             response = self.client.get(reverse('sentry-search', kwargs={'project_id': 1}), {'q': '%s$%s' % (checksum, checksum)})
             self.assertEquals(response.status_code, 200)
             self.assertTemplateUsed(response, 'sentry/search.html')
diff --git a/tests/urls.py b/tests/urls.py
deleted file mode 100644
index 3a6bc63b7f..0000000000
--- a/tests/urls.py
+++ /dev/null
@@ -1,15 +0,0 @@
-from django.conf.urls.defaults import *
-from django.contrib import admin
-
-admin.autodiscover()
-
-urlpatterns = patterns('',
-    url(r'^admin/', include(admin.site.urls)),
-    url(r'^fake-login$', 'tests.views.fake_login', name='sentry-fake-login'),
-    url(r'^trigger-500$', 'tests.views.raise_exc', name='sentry-raise-exc'),
-    url(r'^trigger-500-decorated$', 'tests.views.decorated_raise_exc', name='sentry-raise-exc-decor'),
-    url(r'^trigger-500-django$', 'tests.views.django_exc', name='sentry-django-exc'),
-    url(r'^trigger-500-template$', 'tests.views.template_exc', name='sentry-template-exc'),
-    url(r'^trigger-500-log-request$', 'tests.views.logging_request_exc', name='sentry-log-request-exc'),
-    url(r'', include('sentry.web.urls')),
-)
\ No newline at end of file
diff --git a/tests/utils.py b/tests/utils.py
deleted file mode 100644
index 9f52384820..0000000000
--- a/tests/utils.py
+++ /dev/null
@@ -1,122 +0,0 @@
-from __future__ import with_statement
-import socket
-import threading
-import warnings
-
-from django.conf import settings as django_settings
-from django.core.handlers.wsgi import WSGIHandler
-from django.core.management import call_command
-from django.core.servers import basehttp
-
-from sentry.conf import settings
-from sentry.utils.compat.db import connections
-
-class StoppableWSGIServer(basehttp.WSGIServer):
-    """WSGIServer with short timeout, so that server thread can stop this server."""
-
-    def server_bind(self):
-        """Sets timeout to 1 second."""
-        basehttp.WSGIServer.server_bind(self)
-        self.socket.settimeout(1)
-
-    def get_request(self):
-        """Checks for timeout when getting request."""
-        try:
-            sock, address = self.socket.accept()
-            sock.settimeout(None)
-            return (sock, address)
-        except socket.timeout:
-            raise
-
-class TestServerThread(threading.Thread):
-    """Thread for running a http server while tests are running."""
-
-    def __init__(self, test, address, port):
-        self.test = test
-        self.address = address
-        self.port = port
-        self._stopevent = threading.Event()
-        self.started = threading.Event()
-        self.error = None
-        super(TestServerThread, self).__init__()
-
-    def run(self):
-        """Sets up test server and database and loops over handling http requests."""
-        try:
-            handler = basehttp.AdminMediaHandler(WSGIHandler())
-            server_address = (self.address, self.port)
-            httpd = StoppableWSGIServer(server_address, basehttp.WSGIRequestHandler)
-            httpd.set_app(handler)
-            self.started.set()
-        except basehttp.WSGIServerException, e:
-            self.error = e
-            self.started.set()
-            return
-
-        # Must do database stuff in this new thread if database in memory.
-        conn_settings = connections['default'].settings_dict
-        if conn_settings['ENGINE'] == 'sqlite3' \
-            and (not conn_settings['TEST_NAME'] or conn_settings['TEST_NAME'] == ':memory:'):
-            # Import the fixture data into the test database.
-            if hasattr(self.test, 'fixtures'):
-                # We have to use this slightly awkward syntax due to the fact
-                # that we're using *args and **kwargs together.
-                call_command('loaddata', *self.test.fixtures, **{'verbosity': 0})
-
-        # Loop until we get a stop event.
-        while not self._stopevent.isSet():
-            httpd.handle_request()
-
-    def join(self, timeout=None):
-        """Stop the thread and wait for it to finish."""
-        self._stopevent.set()
-        threading.Thread.join(self, timeout)
-
-def conditional_on_module(module):
-    def wrapped(func):
-        def inner(self, *args, **kwargs):
-            try:
-                __import__(module)
-            except ImportError:
-                warnings.warn("Skipping test: %s.%s" % (self.__class__.__name__, func.__name__), ImportWarning)
-                return lambda x, *a, **kw: None
-            else:
-                return func(self, *args, **kwargs)
-        return inner
-    return wrapped
-
-class Settings(object):
-    """
-    Allows you to define settings that are required for this function to work.
-
-    >>> with Settings(SENTRY_LOGIN_URL='foo'): #doctest: +SKIP
-    >>>     print settings.SENTRY_LOGIN_URL #doctest: +SKIP
-    """
-
-    NotDefined = object()
-
-    def __init__(self, **overrides):
-        self.overrides = overrides
-        self._orig = {}
-        self._orig_sentry = {}
-
-    def __enter__(self):
-        for k, v in self.overrides.iteritems():
-            self._orig[k] = getattr(django_settings, k, self.NotDefined)
-            setattr(django_settings, k, v)
-            if k.startswith('SENTRY_'):
-                nk = k.split('SENTRY_', 1)[1]
-                self._orig_sentry[nk] = getattr(settings, nk, self.NotDefined)
-                setattr(settings, nk, v)
-
-    def __exit__(self, exc_type, exc_value, traceback):
-        for k, v in self._orig.iteritems():
-            if v is self.NotDefined:
-                delattr(django_settings, k)
-            else:
-                setattr(django_settings, k, v)
-        for k, v in self._orig_sentry.iteritems():
-            if v is self.NotDefined:
-                delattr(settings, k)
-            else:
-                setattr(settings, k, v)
diff --git a/tests/web/__init__.py b/tests/web/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/web/tests.py b/tests/web/tests.py
new file mode 100644
index 0000000000..fd339dcd9e
--- /dev/null
+++ b/tests/web/tests.py
@@ -0,0 +1,332 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import, with_statement
+
+import datetime
+import logging
+
+from django.conf import settings as django_settings
+from django.contrib.auth.models import User
+from django.core.urlresolvers import reverse
+
+from sentry.conf import settings
+from sentry.models import Event, Group, \
+  Project, ProjectMember
+from sentry.web.helpers import get_login_url
+
+from tests.base import TestCase
+
+# class NullHandler(logging.Handler):
+#     def emit(self, record):
+#         pass
+#
+# # Configure our "oh shit" handler, so that we dont output a bunch of unused
+# # information to stderr
+#
+# logger = logging.getLogger('sentry.error')
+# logger.addHandler(NullHandler())
+
+# Configure our test handler
+
+logger = logging.getLogger(__name__)
+
+
+class SentryViewsTest(TestCase):
+    fixtures = ['tests/fixtures/views.json']
+
+    def setUp(self):
+        self.user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
+        self.user.set_password('admin')
+        self.user.save()
+
+    def test_auth(self):
+        resp = self.client.get(reverse('sentry'), follow=True)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/login.html')
+
+        resp = self.client.post(reverse('sentry-login'), {
+            'username': 'admin',
+            'password': 'admin',
+        }, follow=True)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateNotUsed(resp, 'sentry/login.html')
+
+    def test_get_login_url(self):
+        with self.Settings(LOGIN_URL='/really-a-404'):
+            url = get_login_url(True)
+            self.assertEquals(url, reverse('sentry-login'))
+
+        with self.Settings(LOGIN_URL=reverse('sentry-fake-login')):
+            url = get_login_url(True)
+            self.assertEquals(url, reverse('sentry-fake-login'))
+
+        # should still be cached
+        with self.Settings(LOGIN_URL='/really-a-404'):
+            url = get_login_url(False)
+            self.assertEquals(url, reverse('sentry-fake-login'))
+
+        with self.Settings(SENTRY_LOGIN_URL=None):
+            url = get_login_url(True)
+            self.assertEquals(url, reverse('sentry-login'))
+
+    def test_dashboard(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry'), follow=True)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateNotUsed(resp, 'sentry/dashboard.html')
+
+        # requires two projects to show dashboard
+        p = Project.objects.create(name='foo')
+        ProjectMember.objects.create(project=p, user=self.user)
+        resp = self.client.get(reverse('sentry'), follow=True)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/dashboard.html')
+
+    def test_index(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry', kwargs={'project_id': 1}) + '?sort=freq', follow=True)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
+        self.assertEquals(len(resp.context['event_list']), 4)
+        group = resp.context['event_list'][0]
+        self.assertEquals(group.times_seen, 7)
+        self.assertEquals(group.message, "'tuple' object has no attribute 'args'")
+
+    def test_group_details(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-group', kwargs={'group_id': 2}), follow=True)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
+        self.assertTrue('group' in resp.context)
+        group = Group.objects.get(pk=2)
+        self.assertEquals(resp.context['group'], group)
+
+    def test_group_event_list(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-group-events', args=[2]), follow=True)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
+        self.assertTrue('group' in resp.context)
+        group = Group.objects.get(pk=2)
+        self.assertEquals(resp.context['group'], group)
+
+    def test_group_message_details(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-group-event', kwargs={'group_id': 2, 'event_id': 4}), follow=True)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        self.assertTemplateUsed(resp, 'sentry/groups/event.html')
+        self.assertTrue('group' in resp.context)
+        group = Group.objects.get(pk=2)
+        self.assertEquals(resp.context['group'], group)
+
+
+class SentryRemoteTest(TestCase):
+    def setUp(self):
+        settings.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
+        logger = logging.getLogger('sentry')
+        for h in logger.handlers:
+            logger.removeHandler(h)
+        logger.addHandler(logging.StreamHandler())
+
+    def tearDown(self):
+        settings.REMOTE_URL = None
+
+    def test_no_key(self):
+        resp = self.client.post(reverse('sentry-store'))
+        self.assertEquals(resp.status_code, 401)
+
+    # def test_no_data(self):
+    #     resp = self.client.post(reverse('sentry-store'), {
+    #         'key': settings.KEY,
+    #     })
+    #     self.assertEquals(resp.status_code, 400)
+
+    # def test_bad_data(self):
+    #     resp = self.client.post(reverse('sentry-store'), {
+    #         'key': settings.KEY,
+    #         'data': 'hello world',
+    #     })
+    #     self.assertEquals(resp.status_code, 401)
+        # self.assertEquals(resp.content, 'Bad data decoding request (TypeError, Incorrect padding)')
+
+    def test_correct_data(self):
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200)
+        instance = Event.objects.get()
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.server_name, 'not_dcramer.local')
+        self.assertEquals(instance.level, 40)
+        self.assertEquals(instance.site, 'not_a_real_site')
+
+    def test_unicode_keys(self):
+        kwargs = {u'message': 'hello', u'server_name': 'not_dcramer.local', u'level': 40, u'site': 'not_a_real_site'}
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        instance = Event.objects.get()
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.server_name, 'not_dcramer.local')
+        self.assertEquals(instance.level, 40)
+        self.assertEquals(instance.site, 'not_a_real_site')
+
+    def test_timestamp(self):
+        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
+        kwargs = {u'message': 'hello', 'timestamp': timestamp.strftime('%s.%f')}
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        instance = Event.objects.get()
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.datetime, timestamp)
+        group = instance.group
+        self.assertEquals(group.first_seen, timestamp)
+        self.assertEquals(group.last_seen, timestamp)
+
+    def test_timestamp_as_iso(self):
+        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
+        kwargs = {u'message': 'hello', 'timestamp': timestamp.strftime('%Y-%m-%dT%H:%M:%S.%f')}
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        instance = Event.objects.get()
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.datetime, timestamp)
+        group = instance.group
+        self.assertEquals(group.first_seen, timestamp)
+        self.assertEquals(group.last_seen, timestamp)
+
+    def test_ungzipped_data(self):
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200)
+        instance = Event.objects.get()
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.server_name, 'not_dcramer.local')
+        self.assertEquals(instance.site, 'not_a_real_site')
+        self.assertEquals(instance.level, 40)
+
+    # def test_byte_sequence(self):
+    #     """
+    #     invalid byte sequence for encoding "UTF8": 0xedb7af
+    #     """
+    #     # TODO:
+    #     # add 'site' to data in fixtures/bad_data.json, then assert it's set correctly below
+
+    #     fname = os.path.join(os.path.dirname(__file__), 'fixtures/bad_data.json')
+    #     data = open(fname).read()
+
+    #     resp = self.client.post(reverse('sentry-store'), {
+    #         'data': data,
+    #         'key': settings.KEY,
+    #     })
+
+    #     self.assertEquals(resp.status_code, 200)
+
+    #     self.assertEquals(Event.objects.count(), 1)
+
+    #     instance = Event.objects.get()
+
+    #     self.assertEquals(instance.message, 'DatabaseError: invalid byte sequence for encoding "UTF8": 0xeda4ac\nHINT:  This error can also happen if the byte sequence does not match the encoding expected by the server, which is controlled by "client_encoding".\n')
+    #     self.assertEquals(instance.server_name, 'shilling.disqus.net')
+    #     self.assertEquals(instance.level, 40)
+
+    def test_signature(self):
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+
+        resp = self._postWithSignature(kwargs)
+
+        self.assertEquals(resp.status_code, 200, resp.content)
+
+        instance = Event.objects.get()
+
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.server_name, 'not_dcramer.local')
+        self.assertEquals(instance.site, 'not_a_real_site')
+        self.assertEquals(instance.level, 40)
+
+
+class SentryFeedsTest(TestCase):
+    fixtures = ['tests/fixtures/feeds.json']
+
+    def test_message_feed(self):
+        response = self.client.get(reverse('sentry-feed-messages'))
+        self.assertEquals(response.status_code, 200)
+        self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
+        self.assertTrue('<link>http://testserver/</link>' in response.content)
+        self.assertTrue('<title>log messages</title>' in response.content)
+        self.assertTrue('<link>http://testserver/1/group/1</link>' in response.content, response.content)
+        self.assertTrue('<title>exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
+
+    def test_summary_feed(self):
+        response = self.client.get(reverse('sentry-feed-summaries'))
+        self.assertEquals(response.status_code, 200)
+        self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
+        self.assertTrue('<link>http://testserver/</link>' in response.content)
+        self.assertTrue('<title>log summaries</title>' in response.content)
+        self.assertTrue('<link>http://testserver/1/group/1</link>' in response.content, response.content)
+        self.assertTrue('<title>(1) exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
+
+
+class SentrySearchTest(TestCase):
+    def test_checksum_query(self):
+        checksum = 'a' * 32
+        g = Group.objects.create(
+            project_id=1,
+            logger='root',
+            culprit='a',
+            checksum=checksum,
+            message='hi',
+        )
+
+        with self.Settings(SENTRY_PUBLIC=True):
+            response = self.client.get(reverse('sentry-search', kwargs={'project_id': 1}), {'q': '%s$%s' % (checksum, checksum)})
+            self.assertEquals(response.status_code, 302)
+            self.assertEquals(response['Location'], 'http://testserver%s' % (g.get_absolute_url(),))
+
+    def test_dupe_checksum(self):
+        checksum = 'a' * 32
+        g1 = Group.objects.create(
+            project_id=1,
+            logger='root',
+            culprit='a',
+            checksum=checksum,
+            message='hi',
+        )
+        g2 = Group.objects.create(
+            project_id=1,
+            logger='root',
+            culprit='b',
+            checksum=checksum,
+            message='hi',
+        )
+
+        with self.Settings(SENTRY_PUBLIC=True):
+            response = self.client.get(reverse('sentry-search', kwargs={'project_id': 1}), {'q': '%s$%s' % (checksum, checksum)})
+            self.assertEquals(response.status_code, 200)
+            self.assertTemplateUsed(response, 'sentry/search.html')
+            context = response.context
+            self.assertTrue('event_list' in context)
+            self.assertEquals(len(context['event_list']), 2)
+            self.assertTrue(g1 in context['event_list'])
+            self.assertTrue(g2 in context['event_list'])
+
+
+class SentryHelpersTest(TestCase):
+    def test_get_db_engine(self):
+        from sentry.utils import get_db_engine
+        _databases = getattr(django_settings, 'DATABASES', {}).copy()
+        _engine = django_settings.DATABASE_ENGINE
+
+        django_settings.DATABASE_ENGINE = ''
+        django_settings.DATABASES['default'] = {'ENGINE': 'blah.sqlite3'}
+
+        self.assertEquals(get_db_engine(), 'sqlite3')
+
+        django_settings.DATABASE_ENGINE = 'mysql'
+
+        self.assertEquals(get_db_engine(), 'sqlite3')
+
+        django_settings.DATABASES['default'] = {'ENGINE': 'blah.mysql'}
+
+        self.assertEquals(get_db_engine(), 'mysql')
+
+        django_settings.DATABASES = _databases
+        django_settings.DATABASE_ENGINE = _engine
diff --git a/tests/web/urls.py b/tests/web/urls.py
new file mode 100644
index 0000000000..79e538e571
--- /dev/null
+++ b/tests/web/urls.py
@@ -0,0 +1,17 @@
+from django.conf.urls.defaults import *
+from django.contrib import admin
+
+admin.autodiscover()
+
+from . import views
+
+urlpatterns = patterns('',
+    url(r'^admin/', include(admin.site.urls)),
+    url(r'^fake-login$', views.fake_login, name='sentry-fake-login'),
+    url(r'^trigger-500$', views.raise_exc, name='sentry-raise-exc'),
+    url(r'^trigger-500-decorated$', views.decorated_raise_exc, name='sentry-raise-exc-decor'),
+    url(r'^trigger-500-django$', views.django_exc, name='sentry-django-exc'),
+    url(r'^trigger-500-template$', views.template_exc, name='sentry-template-exc'),
+    url(r'^trigger-500-log-request$', views.logging_request_exc, name='sentry-log-request-exc'),
+    url(r'', include('sentry.web.urls')),
+)
\ No newline at end of file
diff --git a/tests/views.py b/tests/web/views.py
similarity index 100%
rename from tests/views.py
rename to tests/web/views.py
