commit 0ce75a05d21e73303bf421b6a4926b87ea07ae3a
Author: Tony <Zylphrex@users.noreply.github.com>
Date:   Mon Jun 15 20:59:16 2020 -0400

    feat(async-csv): Conver to use start and end (#19378)
    
    Ensure that the export uses fixed start and end times between batches.
    Previously, if the query specified statsPeriod=24h, each batch will recompute
    the start and end time relative to the current time. This change will pin the
    start and end time when the export is initially created so that subsequent
    batches will have the same start and end times.

diff --git a/src/sentry/data_export/endpoints/data_export.py b/src/sentry/data_export/endpoints/data_export.py
index d2398e9c3f..9f7b5f5b1a 100644
--- a/src/sentry/data_export/endpoints/data_export.py
+++ b/src/sentry/data_export/endpoints/data_export.py
@@ -9,6 +9,7 @@ from sentry import features
 from sentry.api.base import EnvironmentMixin
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationDataExportPermission
 from sentry.api.serializers import serialize
+from sentry.api.utils import get_date_range_from_params
 from sentry.models import Environment
 from sentry.utils import metrics
 from sentry.utils.compat import map
@@ -67,15 +68,27 @@ class DataExportEndpoint(OrganizationEndpoint, EnvironmentMixin):
             if not features.has("organizations:discover-basic", organization, actor=request.user):
                 return Response(status=403)
 
-            if len(data["query_info"].get("field", [])) > MAX_FIELDS:
+            query_info = data["query_info"]
+
+            if len(query_info.get("field", [])) > MAX_FIELDS:
                 detail = "You can export up to {0} fields at a time. Please delete some and try again.".format(
                     MAX_FIELDS
                 )
                 raise ParseError(detail=detail)
 
-            if "project" not in data["query_info"]:
+            if "project" not in query_info:
                 projects = self.get_projects(request, organization)
-                data["query_info"]["project"] = [project.id for project in projects]
+                query_info["project"] = [project.id for project in projects]
+
+            start, end = get_date_range_from_params(query_info)
+            if "statsPeriod" in query_info:
+                del query_info["statsPeriod"]
+            if "statsPeriodStart" in query_info:
+                del query_info["statsPeriodStart"]
+            if "statsPeriodEnd" in query_info:
+                del query_info["statsPeriodEnd"]
+            query_info["start"] = start.isoformat()
+            query_info["end"] = end.isoformat()
 
         try:
             # If this user has sent a sent a request with the same payload and organization,
diff --git a/tests/sentry/data_export/endpoints/test_data_export.py b/tests/sentry/data_export/endpoints/test_data_export.py
index 3185742786..dffab1a48d 100644
--- a/tests/sentry/data_export/endpoints/test_data_export.py
+++ b/tests/sentry/data_export/endpoints/test_data_export.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
 import six
+from freezegun import freeze_time
 
 from sentry.data_export.base import ExportStatus, ExportQueryType
 from sentry.data_export.models import ExportedData
+from sentry.search.utils import parse_datetime_string
 from sentry.utils.snuba import MAX_FIELDS
 from sentry.testutils import APITestCase
 
@@ -104,3 +106,81 @@ class DataExportTest(APITestCase):
         assert response.data == {
             "detail": "You can export up to 20 fields at a time. Please delete some and try again."
         }
+
+    @freeze_time("2020-05-19 14:00:00")
+    def test_converts_stats_period(self):
+        """
+        Ensures that statsPeriod is converted to start/end.
+        """
+        payload = {
+            "query_type": ExportQueryType.DISCOVER_STR,
+            "query_info": {"env": "test", "statsPeriod": "24h"},
+        }
+        with self.feature(
+            {"organizations:data-export": True, "organizations:discover-basic": True}
+        ):
+            response = self.get_valid_response(self.organization.slug, status_code=201, **payload)
+        data_export = ExportedData.objects.get(id=response.data["id"])
+        query_info = data_export.query_info
+        assert parse_datetime_string(query_info["start"]) == parse_datetime_string(
+            "2020-05-18T14:00:00"
+        )
+        assert parse_datetime_string(query_info["end"]) == parse_datetime_string(
+            "2020-05-19T14:00:00"
+        )
+        assert "statsPeriod" not in query_info
+        assert "statsPeriodStart" not in query_info
+        assert "statsPeriodSEnd" not in query_info
+
+    @freeze_time("2020-05-19 14:00:00")
+    def test_converts_stats_period_start_end(self):
+        """
+        Ensures that statsPeriodStart and statsPeriodEnd is converted to start/end.
+        """
+        payload = {
+            "query_type": ExportQueryType.DISCOVER_STR,
+            "query_info": {"env": "test", "statsPeriodStart": "1w", "statsPeriodEnd": "5d"},
+        }
+        with self.feature(
+            {"organizations:data-export": True, "organizations:discover-basic": True}
+        ):
+            response = self.get_valid_response(self.organization.slug, status_code=201, **payload)
+        data_export = ExportedData.objects.get(id=response.data["id"])
+        query_info = data_export.query_info
+        assert parse_datetime_string(query_info["start"]) == parse_datetime_string(
+            "2020-05-12T14:00:00"
+        )
+        assert parse_datetime_string(query_info["end"]) == parse_datetime_string(
+            "2020-05-14T14:00:00"
+        )
+        assert "statsPeriod" not in query_info
+        assert "statsPeriodStart" not in query_info
+        assert "statsPeriodSEnd" not in query_info
+
+    def test_preserves_start_end(self):
+        """
+        Ensures that start/end is preserved
+        """
+        payload = {
+            "query_type": ExportQueryType.DISCOVER_STR,
+            "query_info": {
+                "env": "test",
+                "start": "2020-05-18T14:00:00",
+                "end": "2020-05-19T14:00:00",
+            },
+        }
+        with self.feature(
+            {"organizations:data-export": True, "organizations:discover-basic": True}
+        ):
+            response = self.get_valid_response(self.organization.slug, status_code=201, **payload)
+        data_export = ExportedData.objects.get(id=response.data["id"])
+        query_info = data_export.query_info
+        assert parse_datetime_string(query_info["start"]) == parse_datetime_string(
+            "2020-05-18T14:00:00"
+        )
+        assert parse_datetime_string(query_info["end"]) == parse_datetime_string(
+            "2020-05-19T14:00:00"
+        )
+        assert "statsPeriod" not in query_info
+        assert "statsPeriodStart" not in query_info
+        assert "statsPeriodSEnd" not in query_info
