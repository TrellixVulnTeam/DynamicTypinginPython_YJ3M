commit 3ca7780db0fc0d3085cb43192bb003e29da42d34
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Apr 2 12:10:29 2019 +0200

    feat(auth): Add system token authentication (#12483)
    
    This adds an authentication method intended for internal systems that need
    access across multiple organizations. An example of this is the upcoming
    symbolication service which needs to download symbols from existing endpoints in
    the API.
    
    - Authentication is handled by the `TokenAuthentication` class which now special
      cases system tokens.
    - The token is generated on-the-fly as `sentry:system-token`.
    - There is a special permission class allowing to create endpoints that are only
      available to systems. - Additionally, the token is only accepted when coming
      from an internal IP.

diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index c75c805a61..d49f312ef9 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -5,6 +5,7 @@ from django.utils.crypto import constant_time_compare
 from rest_framework.authentication import (BasicAuthentication, get_authorization_header)
 from rest_framework.exceptions import AuthenticationFailed
 
+from sentry.auth.system import SystemToken
 from sentry.models import ApiApplication, ApiKey, ApiToken, ProjectKey, Relay
 from sentry.relay.utils import get_header_relay_id, get_header_relay_signature
 from sentry.utils.sdk import configure_scope
@@ -33,7 +34,7 @@ class StandardAuthentication(QuietBasicAuthentication):
             msg = 'Invalid token header. Token string should not contain spaces.'
             raise AuthenticationFailed(msg)
 
-        return self.authenticate_credentials(auth[1])
+        return self.authenticate_credentials(request, auth[1])
 
 
 class RelayAuthentication(BasicAuthentication):
@@ -126,11 +127,12 @@ class ClientIdSecretAuthentication(QuietBasicAuthentication):
 class TokenAuthentication(StandardAuthentication):
     token_name = b'bearer'
 
-    def authenticate_credentials(self, token):
+    def authenticate_credentials(self, request, token_str):
+        token = SystemToken.from_request(request, token_str)
         try:
-            token = ApiToken.objects.filter(
-                token=token,
-            ).select_related('user', 'application').get()
+            token = token or ApiToken.objects.filter(token=token_str) \
+                .select_related('user', 'application') \
+                .get()
         except ApiToken.DoesNotExist:
             raise AuthenticationFailed('Invalid token')
 
@@ -153,7 +155,7 @@ class TokenAuthentication(StandardAuthentication):
 class DSNAuthentication(StandardAuthentication):
     token_name = b'dsn'
 
-    def authenticate_credentials(self, token):
+    def authenticate_credentials(self, request, token):
         try:
             key = ProjectKey.from_dsn(token)
         except ProjectKey.DoesNotExist:
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index f61ce3d2a1..ebbbe1fbd8 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -6,6 +6,7 @@ from sentry import roles
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist, ProjectMoved
 from sentry.auth.superuser import is_active_superuser
+from sentry.auth.system import is_system_auth
 from sentry.models import OrganizationMember, Project, ProjectStatus, ProjectRedirect
 from sentry.utils.sdk import configure_scope
 
@@ -31,6 +32,8 @@ class ProjectPermission(OrganizationPermission):
             return any(
                 has_team_permission(request, team, self.scope_map) for team in project.teams.all()
             )
+        elif is_system_auth(request.auth):
+            return True
         elif request.user.is_authenticated():
             # this is only for team-less projects
             if is_active_superuser(request):
diff --git a/src/sentry/api/bases/user.py b/src/sentry/api/bases/user.py
index 3946b44940..eff226f4cd 100644
--- a/src/sentry/api/bases/user.py
+++ b/src/sentry/api/bases/user.py
@@ -5,6 +5,7 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import SentryPermission
 from sentry.models import Organization, OrganizationStatus, User
 from sentry.auth.superuser import is_active_superuser
+from sentry.auth.system import is_system_auth
 
 
 class UserPermission(SentryPermission):
@@ -13,6 +14,8 @@ class UserPermission(SentryPermission):
             user = request.user
         if request.user == user:
             return True
+        if is_system_auth(request.auth):
+            return True
         if request.auth:
             return False
         if is_active_superuser(request):
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 754470de70..e6c3467726 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -6,6 +6,7 @@ from sentry.api.exceptions import SuperuserRequired
 from sentry.api.exceptions import SsoRequired, TwoFactorRequired
 from sentry.auth import access
 from sentry.auth.superuser import is_active_superuser
+from sentry.auth.system import is_system_auth
 from sentry.utils import auth
 
 
@@ -14,6 +15,11 @@ class RelayPermission(permissions.BasePermission):
         return getattr(request, 'relay', None) is not None
 
 
+class SystemPermission(permissions.BasePermission):
+    def has_permission(self, request, view):
+        return is_system_auth(request.auth)
+
+
 class NoPermission(permissions.BasePermission):
     def has_permission(self, request, view):
         return False
@@ -78,10 +84,7 @@ class SentryPermission(ScopedPermission):
             )
 
         elif request.auth:
-            if request.auth.organization_id == organization.id:
-                request.access = access.from_auth(request.auth)
-            else:
-                request.access = access.DEFAULT
+            request.access = access.from_auth(request.auth, organization)
 
         else:
             request.access = access.from_request(request, organization)
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index 8be9cf5c25..2e0c0fb029 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -9,6 +9,7 @@ from django.utils.functional import cached_property
 
 from sentry import roles
 from sentry.auth.superuser import is_active_superuser
+from sentry.auth.system import is_system_auth
 from sentry.models import (
     AuthIdentity, AuthProvider, OrganizationMember, Project, SentryApp, UserPermission
 )
@@ -215,6 +216,25 @@ class OrganizationlessAccess(BaseAccess):
             self.permissions = permissions
 
 
+class SystemAccess(BaseAccess):
+    is_active = True
+
+    def has_permission(self, permission):
+        return True
+
+    def has_scope(self, scope):
+        return True
+
+    def has_team_access(self, team):
+        return True
+
+    def has_project_access(self, project):
+        return True
+
+    def has_project_membership(self, project):
+        return True
+
+
 class NoAccess(BaseAccess):
     requires_sso = False
     sso_is_valid = True
@@ -348,8 +368,13 @@ def from_member(member, scopes=None):
     )
 
 
-def from_auth(auth, scopes=None):
-    return OrganizationGlobalAccess(auth.organization, scopes=scopes)
+def from_auth(auth, organization):
+    if is_system_auth(auth):
+        return SystemAccess()
+    if auth.organization_id == organization.id:
+        return OrganizationGlobalAccess(auth.organization)
+    else:
+        return DEFAULT
 
 
 DEFAULT = NoAccess()
diff --git a/src/sentry/auth/superuser.py b/src/sentry/auth/superuser.py
index b4c83c2243..851f40dd35 100644
--- a/src/sentry/auth/superuser.py
+++ b/src/sentry/auth/superuser.py
@@ -21,6 +21,7 @@ from django.core.signing import BadSignature
 from django.utils import timezone
 from django.utils.crypto import constant_time_compare, get_random_string
 
+from sentry.auth.system import is_system_auth
 from sentry.utils.auth import has_completed_sso
 
 logger = logging.getLogger('sentry.superuser')
@@ -53,6 +54,8 @@ UNSET = object()
 
 
 def is_active_superuser(request):
+    if is_system_auth(getattr(request, 'auth', None)):
+        return True
     su = getattr(request, 'superuser', None) or Superuser(request)
     return su.is_active
 
diff --git a/src/sentry/auth/system.py b/src/sentry/auth/system.py
new file mode 100644
index 0000000000..be4fa5bd24
--- /dev/null
+++ b/src/sentry/auth/system.py
@@ -0,0 +1,95 @@
+from __future__ import absolute_import, print_function
+
+import ipaddress
+import six
+
+from django.conf import settings
+from django.contrib.auth.models import AnonymousUser
+from django.utils.crypto import constant_time_compare
+from uuid import uuid4
+
+from sentry import options
+from sentry.utils.cache import memoize
+
+
+INTERNAL_NETWORKS = [
+    ipaddress.ip_network(six.text_type(net), strict=False)
+    for net in settings.INTERNAL_SYSTEM_IPS
+]
+
+
+def is_internal_ip(request):
+    ip = ipaddress.ip_address(six.text_type(request.META['REMOTE_ADDR']))
+    return any(ip in net for net in INTERNAL_NETWORKS)
+
+
+def get_system_token():
+    token = options.get('sentry:system-token')
+    if not token:
+        token = uuid4().hex
+        options.set('sentry:system-token', token)
+    return token
+
+
+class SystemToken(object):
+    """
+    API token authenticating the system user.
+
+    The system token has all authorization scopes, but the underlying SystemUser
+    does not have permission to access any endpoints. It can be white listed
+    using ``SystemPermission``.
+    """
+
+    id = '<system>'
+    token = '<system.secret-key>'
+    application = None
+    organization_id = None
+
+    @classmethod
+    def from_request(cls, request, token):
+        """Returns a system token if this is a valid system request."""
+        system_token = get_system_token()
+        if constant_time_compare(system_token, token) and is_internal_ip(request):
+            return cls()
+        return None
+
+    def __eq__(self, other):
+        return isinstance(other, self.__class__)
+
+    def __ne__(self, other):
+        return not self.__eq__(other)
+
+    def __hash__(self):
+        return 1  # singleton
+
+    def is_expired(self):
+        False
+
+    @memoize
+    def user(self):
+        user = AnonymousUser()
+        user.is_active = True
+        return user
+
+    def get_allowed_origins(self):
+        return []
+
+    def get_audit_log_data(self):
+        return {
+            'label': 'System',
+            'key': '<system>',
+            'scopes': -1,
+        }
+
+    def get_scopes(self):
+        return list(settings.SENTRY_SCOPES)
+
+    def has_scope(self, scope):
+        return True
+
+    def refresh(self, expires_at=None):
+        pass
+
+
+def is_system_auth(auth):
+    return isinstance(auth, SystemToken)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 4854b911d9..04e6c538d6 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -79,8 +79,13 @@ MAINTENANCE = False
 
 ADMINS = ()
 
+# Hosts that are considered in the same network (including VPNs).
+# This gives access to functionality like the debug toolbar.
 INTERNAL_IPS = ()
 
+# Hosts that are allowed to use system token authentication.
+INTERNAL_SYSTEM_IPS = ()
+
 MANAGERS = ADMINS
 
 APPEND_SLASH = True
diff --git a/src/sentry/integrations/cloudflare/webhook.py b/src/sentry/integrations/cloudflare/webhook.py
index fe5d0ea90b..970eda20ed 100644
--- a/src/sentry/integrations/cloudflare/webhook.py
+++ b/src/sentry/integrations/cloudflare/webhook.py
@@ -40,7 +40,7 @@ class CloudflareTokenAuthentication(TokenAuthentication):
             token = request.DATA['authentications']['account']['token']['token']
         except KeyError:
             return None
-        return self.authenticate_credentials(token)
+        return self.authenticate_credentials(request, token)
 
 
 class CloudflareWebhookEndpoint(Endpoint):
