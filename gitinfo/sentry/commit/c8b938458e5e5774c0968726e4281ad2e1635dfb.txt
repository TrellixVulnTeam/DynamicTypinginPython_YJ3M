commit c8b938458e5e5774c0968726e4281ad2e1635dfb
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Jun 15 14:46:38 2017 -0700

    make sure we use saved authors in materialized author list (#5575)

diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 4c344d499e..e46085f02d 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -416,7 +416,10 @@ class Release(Model):
 
             self.update(
                 commit_count=len(commit_list),
-                authors=[six.text_type(a.id) for a in six.itervalues(authors)],
+                authors=[six.text_type(a_id) for a_id in ReleaseCommit.objects.filter(
+                    release=self,
+                    commit__author_id__isnull=False,
+                ).values_list('commit__author_id', flat=True).distinct()],
                 last_commit_id=latest_commit.id if latest_commit else None,
             )
 
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index e49bb7e385..e31fa4408b 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -308,3 +308,59 @@ class SetCommitsTestCase(TestCase):
         assert release.commit_count == 3
         assert release.authors == [six.text_type(author.id)]
         assert release.last_commit_id == latest_commit.id
+
+    def test_using_saved_data(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org, name='foo')
+
+        repo = Repository.objects.create(
+            organization_id=org.id,
+            name='test/repo',
+        )
+
+        author = CommitAuthor.objects.create(
+            name='foo bar baz',
+            email='foo@example.com',
+            organization_id=org.id,
+        )
+
+        Commit.objects.create(
+            repository_id=repo.id,
+            organization_id=org.id,
+            key='b' * 40,
+            author=author,
+        )
+
+        release = Release.objects.create(version='abcdabc', organization=org)
+        release.add_project(project)
+        release.set_commits([{
+            'id': 'a' * 40,
+            'repository': repo.name,
+        }, {
+            'id': 'b' * 40,
+            'repository': repo.name,
+        }, {
+            'id': 'c' * 40,
+            'repository': repo.name,
+        }])
+
+        assert Commit.objects.filter(
+            repository_id=repo.id,
+            organization_id=org.id,
+            key='a' * 40,
+        ).exists()
+        assert Commit.objects.filter(
+            repository_id=repo.id,
+            organization_id=org.id,
+            key='c' * 40,
+        ).exists()
+
+        latest_commit = Commit.objects.get(
+            repository_id=repo.id,
+            key='a' * 40,
+        )
+
+        release = Release.objects.get(id=release.id)
+        assert release.commit_count == 3
+        assert release.authors == [six.text_type(author.id)]
+        assert release.last_commit_id == latest_commit.id
