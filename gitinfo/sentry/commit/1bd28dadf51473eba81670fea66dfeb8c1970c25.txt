commit 1bd28dadf51473eba81670fea66dfeb8c1970c25
Author: ted kaemming <ted@kaemming.com>
Date:   Fri Jun 9 12:23:28 2017 -0700

    Add feature flagged "hashes" tab with unmerge button to issue detail view. (#5549)

diff --git a/src/sentry/api/endpoints/group_hashes.py b/src/sentry/api/endpoints/group_hashes.py
index a4f4dc9bcb..aed3c0157e 100644
--- a/src/sentry/api/endpoints/group_hashes.py
+++ b/src/sentry/api/endpoints/group_hashes.py
@@ -1,9 +1,12 @@
 from __future__ import absolute_import
 
+from rest_framework.response import Response
+
 from sentry.api.base import DocSection
 from sentry.api.bases import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import Group, GroupHash
+from sentry.tasks.unmerge import unmerge
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -42,3 +45,26 @@ class GroupHashesEndpoint(GroupEndpoint):
             order_by='id',
             on_results=lambda x: serialize(x, request.user),
         )
+
+    def delete(self, request, group):
+        id_list = request.GET.getlist('id')
+        if id_list is None:
+            return Response()
+
+        hash_list = GroupHash.objects.filter(
+            project_id=group.project_id,
+            group=group.id,
+            hash__in=id_list,
+        ).values_list('hash', flat=True)
+        if not hash_list:
+            return Response()
+
+        unmerge.delay(
+            group.project_id,
+            group.id,
+            None,
+            hash_list,
+            request.user.id if request.user else None,
+        )
+
+        return Response(status=202)
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index cd9b158e59..af5b0378d8 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -95,6 +95,8 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         if features.has('organizations:api-keys', obj, actor=user) or \
                 ApiKey.objects.filter(organization=obj).exists():
             feature_list.append('api-keys')
+        if features.has('organizations:group-unmerge', obj, actor=user):
+            feature_list.append('group-unmerge')
 
         if getattr(obj.flags, 'allow_joinleave'):
             feature_list.append('open-membership')
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 13c28de2b0..77c1a28978 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -756,6 +756,7 @@ SENTRY_FEATURES = {
     'organizations:create': True,
     'organizations:sso': True,
     'organizations:callsigns': True,
+    'organizations:group-unmerge': False,
     'projects:global-events': False,
     'projects:plugins': True,
     'projects:dsym': False,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 5cf23f1e58..a3176f3e41 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -14,6 +14,7 @@ default_manager.add('organizations:onboarding', OrganizationFeature)  # NOQA
 default_manager.add('organizations:callsigns', OrganizationFeature)  # NOQA
 default_manager.add('organizations:repos', OrganizationFeature)  # NOQA
 default_manager.add('organizations:release-commits', OrganizationFeature)  # NOQA
+default_manager.add('organizations:group-unmerge', OrganizationFeature)  # NOQA
 default_manager.add('projects:global-events', ProjectFeature)  # NOQA
 default_manager.add('projects:plugins', ProjectPluginFeature)  # NOQA
 default_manager.add('projects:data-forwarding', ProjectFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index e513cbf305..37da771f1d 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -226,6 +226,10 @@ const GroupHeader = React.createClass({
           <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/events/`}>
             {t('Related Events')}
           </ListLink>
+          {orgFeatures.has('group-unmerge') &&
+            <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/hashes/`}>
+              {t('Hashes')}
+            </ListLink>}
         </ul>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/groupHashes.jsx b/src/sentry/static/sentry/app/views/groupHashes.jsx
index 65a4000ff0..99690261fe 100644
--- a/src/sentry/static/sentry/app/views/groupHashes.jsx
+++ b/src/sentry/static/sentry/app/views/groupHashes.jsx
@@ -2,11 +2,61 @@ import React from 'react';
 
 import ApiMixin from '../mixins/apiMixin';
 import GroupState from '../mixins/groupState';
+
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import Pagination from '../components/pagination';
+import LinkWithConfirmation from '../components/linkWithConfirmation';
+
+import IndicatorStore from '../stores/indicatorStore';
+
 import {t} from '../locale';
 
+const GroupHashRow = React.createClass({
+  propTypes: {
+    disabled: React.PropTypes.bool,
+    hash: React.PropTypes.object.isRequired,
+    onChange: React.PropTypes.func.isRequired
+  },
+
+  getInitialState() {
+    return {
+      checked: false
+    };
+  },
+
+  toggleCheckbox() {
+    this.setState({checked: !this.state.checked}, () => {
+      this.props.onChange(this.props.hash, this.state.checked);
+    });
+  },
+
+  render() {
+    let {hash, disabled} = this.props;
+    return (
+      <tr
+        key={hash.id}
+        onClick={e => {
+          // clicking anywhere in the row will toggle the checkbox
+          if (e.currentTarget.type !== 'input') this.toggleCheckbox();
+        }}>
+        <td>
+          <h5>{hash.id}</h5>
+        </td>
+        <td style={{textAlign: 'right'}}>
+          <input
+            type="checkbox"
+            className="chk-select"
+            disabled={disabled}
+            checked={this.state.checked}
+            onChange={this.toggleCheckbox}
+          />
+        </td>
+      </tr>
+    );
+  }
+});
+
 const GroupHashes = React.createClass({
   mixins: [ApiMixin, GroupState],
 
@@ -15,7 +65,8 @@ const GroupHashes = React.createClass({
       hashList: [],
       loading: true,
       error: false,
-      pageLinks: ''
+      pageLinks: '',
+      selectedSet: new Set()
     };
   },
 
@@ -28,6 +79,7 @@ const GroupHashes = React.createClass({
       this.setState(
         {
           hashList: [],
+          selectedSet: new Set(),
           loading: true,
           error: false
         },
@@ -74,6 +126,50 @@ const GroupHashes = React.createClass({
     });
   },
 
+  handleHashToggle(hash, enabled) {
+    let {selectedSet} = this.state;
+    if (enabled) {
+      selectedSet.add(hash.id);
+    } else {
+      selectedSet.delete(hash.id);
+    }
+
+    this.setState({
+      selectedSet: new Set(selectedSet)
+    });
+  },
+
+  handleUnmerge() {
+    let {params} = this.props;
+    let {selectedSet} = this.state;
+
+    let ids = Array.from(selectedSet.values());
+
+    let loadingIndicator = IndicatorStore.add(t('Unmerging issues..'));
+    this.api.request(`/issues/${params.groupId}/hashes/`, {
+      method: 'DELETE',
+      query: {
+        id: ids
+      },
+      success: (data, _, jqXHR) => {
+        this.setState({
+          hashList: this.state.hashList.filter(hash => !selectedSet.has(hash.id)),
+          error: false
+        });
+        IndicatorStore.add(t('Issues successfully queued for unmerging.'), 'success', {
+          duration: 5000
+        });
+      },
+      error: error => {
+        this.setState({error: true});
+      },
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
+        this.setState({loading: false});
+      }
+    });
+  },
+
   renderEmpty() {
     return (
       <div className="box empty-stream">
@@ -84,28 +180,55 @@ const GroupHashes = React.createClass({
   },
 
   renderResults() {
-    let children = this.state.hashList.map(hash => {
+    let {hashList, selectedSet} = this.state;
+
+    // Need to always leave at least one hash; disable remaining checkboxes
+    // if remaining count is 1
+    let hashesCount = hashList.length;
+    let selectedCount = selectedSet.size;
+    let isRemainingDisabled = hashesCount - selectedCount === 1;
+    let children = hashList.map(hash => {
       return (
-        <tr key={hash.id}>
-          <td>
-            <h5>{hash.id}</h5>
-          </td>
-        </tr>
+        <GroupHashRow
+          hash={hash}
+          key={hash.id}
+          disabled={isRemainingDisabled && !selectedSet.has(hash.id)}
+          onChange={this.handleHashToggle}
+        />
       );
     });
 
     return (
       <div>
-        <table className="table">
-          <thead>
-            <tr>
-              <th>{t('ID')}</th>
-            </tr>
-          </thead>
-          <tbody>
-            {children}
-          </tbody>
-        </table>
+        <div className="alert alert-block alert-warning">
+          <strong>Warning:</strong>
+          {' '}
+          This is an experimental feature. Data may become temporarily unavailable when unmerging issues.
+        </div>
+        <div className="event-list">
+          <table className="table">
+            <thead>
+              <tr>
+                <th>{t('ID')}</th>
+                <th
+                  className="pull-right"
+                  style={{borderBottom: 'none', padding: '8px 20px'}}>
+                  <LinkWithConfirmation
+                    disabled={this.state.selectedSet.size === 0}
+                    ref="unmerge"
+                    message={t('Are you sure you want to unmerge these issues?')}
+                    className="btn btn-sm btn-default"
+                    onConfirm={this.handleUnmerge}>
+                    {t('Unmerge')}
+                  </LinkWithConfirmation>
+                </th>
+              </tr>
+            </thead>
+            <tbody>
+              {children}
+            </tbody>
+          </table>
+        </div>
         <Pagination pageLinks={this.state.pageLinks} />
       </div>
     );
diff --git a/tests/sentry/api/endpoints/test_group_hashes.py b/tests/sentry/api/endpoints/test_group_hashes.py
index 2b6c1edc7d..eff39196d7 100644
--- a/tests/sentry/api/endpoints/test_group_hashes.py
+++ b/tests/sentry/api/endpoints/test_group_hashes.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from six.moves.urllib.parse import urlencode
+
 from sentry.models import GroupHash
 from sentry.testutils import APITestCase
 
@@ -21,3 +23,26 @@ class GroupHashesTest(APITestCase):
             'a' * 32,
             'b' * 32,
         ])
+
+    def test_unmerge(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        hashes = [
+            GroupHash.objects.create(
+                project=group.project,
+                group=group,
+                hash=hash,
+            ) for hash in ['a' * 32, 'b' * 32]
+        ]
+
+        url = '?'.join([
+            '/api/0/issues/{}/hashes/'.format(group.id),
+            urlencode({
+                'id': [h.hash for h in hashes],
+            }, True),
+        ])
+
+        response = self.client.delete(url, format='json')
+        assert response.status_code == 202, response.content
