commit 862c9b93ddd40afcb4d24699de36e2ae6c0e9c98
Author: ted kaemming <ted@kaemming.com>
Date:   Thu May 18 10:45:22 2017 -0700

    Add latest event to `GroupHashSerializer`. (#5402)

diff --git a/src/sentry/api/serializers/models/grouphash.py b/src/sentry/api/serializers/models/grouphash.py
index d13dbebd24..3872e81f50 100644
--- a/src/sentry/api/serializers/models/grouphash.py
+++ b/src/sentry/api/serializers/models/grouphash.py
@@ -1,12 +1,58 @@
 from __future__ import absolute_import
 
-from sentry.api.serializers import Serializer, register
-from sentry.models import GroupHash
+from collections import defaultdict
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import Event, GroupHash
+
+
+def get_latest_events(group_hash_list):
+    """
+    Fetch the latest events for a collection of ``GroupHash`` instances.
+    Returns a list of events (or ``None``) in the same order as the input
+    sequence.
+    """
+    group_hashes_by_project_id = defaultdict(list)
+    for group_hash in group_hash_list:
+        group_hashes_by_project_id[group_hash.project_id].append(group_hash)
+
+    events_by_group_hash = {}
+    for project_id, group_hash_list_chunk in group_hashes_by_project_id.items():
+        event_id_list = GroupHash.fetch_last_processed_event_id(project_id, [i.id for i in group_hash_list_chunk])
+        event_by_event_id = {
+            event.event_id: event
+            for event in
+            Event.objects.filter(
+                project_id=project_id,
+                event_id__in=filter(None, event_id_list),
+            )
+        }
+        for group_hash, event_id in zip(group_hash_list_chunk, event_id_list):
+            event = event_by_event_id.get(event_id)
+            if event is not None and event.group_id != group_hash.group_id:
+                event = None
+            events_by_group_hash[group_hash] = event
+
+    return [events_by_group_hash.get(group_hash) for group_hash in group_hash_list]
 
 
 @register(GroupHash)
 class GroupHashSerializer(Serializer):
+    def get_attrs(self, item_list, user, *args, **kwargs):
+        return {
+            item: {'latest_event': latest_event}
+            for item, latest_event in
+            zip(
+                item_list,
+                serialize(
+                    get_latest_events(item_list),
+                    user=user,
+                ),
+            )
+        }
+
     def serialize(self, obj, attrs, user):
         return {
             'id': obj.hash,
+            'latest_event': attrs['latest_event'],
         }
diff --git a/tests/sentry/api/serializers/test_grouphash.py b/tests/sentry/api/serializers/test_grouphash.py
new file mode 100644
index 0000000000..94a2bc75a7
--- /dev/null
+++ b/tests/sentry/api/serializers/test_grouphash.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.models import Event, GroupHash
+from sentry.testutils import TestCase
+
+
+class GroupHashSerializerTest(TestCase):
+    def test_no_latest_event(self):
+        user = self.create_user()
+        group = self.create_group()
+        hash = GroupHash.objects.create(
+            project=group.project,
+            group=group,
+            hash='xyz',
+        )
+
+        result = serialize(hash, user=user)
+        assert result['latest_event'] is None
+
+    def test_missing_latest_event(self):
+        user = self.create_user()
+        group = self.create_group()
+        hash = GroupHash.objects.create(
+            project=group.project,
+            group=group,
+            hash='xyz',
+        )
+
+        GroupHash.record_last_processed_event_id(
+            group.project_id,
+            [hash.id],
+            ['invalid'],
+        )
+
+        result = serialize(hash, user=user)
+        assert result['latest_event'] is None
+
+    def test_mismatched_latest_event(self):
+        user = self.create_user()
+        group = self.create_group()
+        hash = GroupHash.objects.create(
+            project=group.project,
+            group=group,
+            hash='xyz',
+        )
+        event = self.create_event(group=self.create_group())
+
+        GroupHash.record_last_processed_event_id(
+            group.project_id,
+            [hash.id],
+            event.event_id,
+        )
+
+        result = serialize(hash, user=user)
+        assert result['latest_event'] is None
+
+    def test_valid_latest_event(self):
+        user = self.create_user()
+        group = self.create_group()
+        hash = GroupHash.objects.create(
+            project=group.project,
+            group=group,
+            hash='xyz',
+        )
+        event = Event.objects.get(id=self.create_event(group=group).id)
+
+        GroupHash.record_last_processed_event_id(
+            group.project_id,
+            [hash.id],
+            event.event_id,
+        )
+
+        result = serialize(hash, user=user)
+        assert result['latest_event'] == serialize(event, user=user)
