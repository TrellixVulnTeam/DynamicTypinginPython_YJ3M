commit 10c613c453bb5975399b0c3a885753ed3c26c899
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 20 16:48:40 2016 -0700

    Improve Selenium tests
    
    - Explicitly define phantomjs dependency
    - Move selenium to fixtures (shared instance suite-wide)
    - Simplify login hook
    
    @getsentry/infrastructure @getsentry/ui

diff --git a/Makefile b/Makefile
index 8fe867fcc6..274cd2f3ac 100644
--- a/Makefile
+++ b/Makefile
@@ -95,8 +95,9 @@ test-cli:
 	@echo ""
 
 test-js:
-	@echo "--> Running JavaScript tests"
+	@echo "--> Building static assets"
 	@${NPM_ROOT}/.bin/webpack
+	@echo "--> Running JavaScript tests"
 	@npm run test
 	@echo ""
 
@@ -106,17 +107,17 @@ test-python:
 	@echo ""
 
 test-acceptance:
+	@echo "--> Building static assets"
+	@${NPM_ROOT}/.bin/webpack
 	@echo "--> Running acceptance tests"
 	py.test tests/acceptance || exit 1
 	@echo ""
 
-
 test-python-coverage:
 	@echo "--> Running Python tests"
 	coverage run --source=src/sentry -m py.test tests/integration tests/sentry
 	@echo ""
 
-
 lint: lint-python lint-js
 
 lint-python:
diff --git a/package.json b/package.json
index e3ba4d0903..43dc91b0e0 100644
--- a/package.json
+++ b/package.json
@@ -28,6 +28,7 @@
     "moment": "2.10.6",
     "moment-timezone": "0.4.1",
     "node-libs-browser": "0.5.3",
+    "phantomjs-prebuilt": "2.1.7",
     "platformicons": "0.0.14",
     "po-catalog-loader": "^1.2.0",
     "query-string": "2.4.2",
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 83533c4234..a85a841e2d 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -10,15 +10,17 @@ from __future__ import absolute_import
 
 __all__ = (
     'TestCase', 'TransactionTestCase', 'APITestCase', 'AuthProviderTestCase',
-    'RuleTestCase', 'PermissionTestCase', 'PluginTestCase', 'CliTestCase', 'LiveServerTestCase',
+    'RuleTestCase', 'PermissionTestCase', 'PluginTestCase', 'CliTestCase', 'LiveServerTestCase', 'AcceptanceTestCase',
 )
 
 import base64
+import os
 import os.path
+import pytest
 import urllib
-from contextlib import contextmanager
 
 from click.testing import CliRunner
+from contextlib import contextmanager
 from django.conf import settings
 from django.contrib.auth import login
 from django.core.cache import cache
@@ -438,3 +440,19 @@ class CliTestCase(TestCase):
     def invoke(self, *args):
         args += tuple(self.default_args)
         return self.runner.invoke(self.command, args, obj={})
+
+
+@pytest.mark.usefixtures('browser_class', 'percy_class')
+class AcceptanceTestCase(LiveServerTestCase):
+    # Use class setup/teardown to hold Selenium and Percy state across all acceptance tests.
+    # For Selenium, this is done for performance to re-use the same browser across tests.
+    # For Percy, this is done to call initialize and then finalize at the very end after all tests.
+
+    # Login helper.
+    def login(self, username, password, browser=None):
+        if browser is None:
+            browser = self.browser
+        browser.get(self.live_server_url)
+        browser.find_element_by_id('id_username').send_keys(username)
+        browser.find_element_by_id('id_password').send_keys(password)
+        browser.find_element_by_xpath("//button[contains(text(), 'Login')]").click()
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 402e493eb0..e0be13b070 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -2,8 +2,12 @@ from __future__ import absolute_import
 
 import mock
 import os
+import pytest
+import signal
+import urllib
 
 from django.conf import settings
+from selenium import webdriver
 
 
 def pytest_configure(config):
@@ -150,3 +154,62 @@ def pytest_runtest_teardown(item):
 
     from celery.task.control import discard_all
     discard_all()
+
+
+@pytest.fixture(scope='session')
+def percy(request, browser):
+    import percy
+
+    # Initialize Percy.
+    loader = percy.ResourceLoader(
+        root_dir=settings.STATIC_ROOT,
+        base_url=urllib.quote(settings.STATIC_URL),
+        webdriver=browser,
+    )
+    percy_config = percy.Config(default_widths=settings.PERCY_DEFAULT_TESTING_WIDTHS)
+    percy = percy.Runner(loader=loader, config=percy_config)
+    percy.initialize_build()
+
+    request.addfinalizer(percy.finalize_build)
+    return percy
+
+
+@pytest.fixture(scope='session')
+def browser(request):
+    # Initialize Selenium.
+    # NOTE: this relies on the phantomjs binary packaged from npm to be in the right
+    # location in node_modules.
+    phantomjs_path = os.path.join(
+        settings.NODE_MODULES_ROOT,
+        'phantomjs-prebuilt',
+        'bin',
+        'phantomjs',
+    )
+    browser = webdriver.PhantomJS(executable_path=phantomjs_path)
+
+    def fin():
+        # Teardown Selenium.
+        browser.close()
+        # TODO: remove this when fixed in: https://github.com/seleniumhq/selenium/issues/767
+        browser.service.process.send_signal(signal.SIGTERM)
+        browser.quit()
+
+    request.addfinalizer(fin)
+    return browser
+
+
+@pytest.fixture(scope='class')
+def browser_class(request, browser):
+    request.cls.browser = browser
+
+
+@pytest.fixture(scope='class')
+def percy_class(request, percy):
+    request.cls.percy = percy
+
+
+@pytest.fixture(scope='function')
+def clear_cookies(request):
+    # Clear cookies before every test. This helps avoid problems with login captchas.
+    if hasattr(request, 'browser'):
+        browser.delete_all_cookies()
diff --git a/tests/acceptance/test_acceptance.py b/tests/acceptance/test_acceptance.py
deleted file mode 100644
index 5bfcd2ef3c..0000000000
--- a/tests/acceptance/test_acceptance.py
+++ /dev/null
@@ -1,91 +0,0 @@
-import signal
-import urllib
-import os
-
-import percy
-from django.conf import settings
-from selenium import webdriver
-from sentry.testutils import LiveServerTestCase
-
-
-class AcceptanceTest(LiveServerTestCase):
-    # Use class setup/teardown to hold Selenium and Percy state across all acceptance tests.
-    # For Selenium, this is done for performance to re-use the same browser across tests.
-    # For Percy, this is done to call initialize and then finalize at the very end after all tests.
-    #
-    # TODO: if acceptance tests are split across files, this will need to be refactored into a
-    # pytest plugin/fixture or something else that can manage global state.
-    @classmethod
-    def setUpClass(cls):
-        super(AcceptanceTest, cls).setUpClass()
-
-        # Initialize Selenium.
-        # NOTE: this relies on the phantomjs binary packaged from npm to be in the right
-        # location in node_modules.
-        phantomjs_path = os.path.join(
-            settings.NODE_MODULES_ROOT,
-            'phantomjs-prebuilt',
-            'bin',
-            'phantomjs',
-        )
-        cls.browser = webdriver.PhantomJS(executable_path=phantomjs_path)
-
-        # Initialize Percy.
-        loader = percy.ResourceLoader(
-            root_dir=settings.STATIC_ROOT,
-            base_url=urllib.quote(settings.STATIC_URL),
-            webdriver=cls.browser,
-        )
-        percy_config = percy.Config(default_widths=settings.PERCY_DEFAULT_TESTING_WIDTHS)
-        cls.percy = percy.Runner(loader=loader, config=percy_config)
-        cls.percy.initialize_build()
-
-    @classmethod
-    def tearDownClass(cls):
-        # Teardown Selenium.
-        cls.browser.close()
-        # TODO: remove this when fixed in: https://github.com/seleniumhq/selenium/issues/767
-        cls.browser.service.process.send_signal(signal.SIGTERM)
-        cls.browser.quit()
-
-        # Finalize Percy build.
-        cls.percy.finalize_build()
-
-        super(AcceptanceTest, cls).tearDownClass()
-
-    def setUp(self):
-        super(AcceptanceTest, self).setUp()
-        # For convenience, grab a reference to the class-level webdriver and percy objects.
-        self.browser = self.__class__.browser
-        self.percy = self.__class__.percy
-
-        # Clear cookies before every test. This helps avoid problems with login captchas.
-        self.browser.delete_all_cookies()
-
-    # Login helper.
-    def login(self, browser, username, password):
-        browser.get(self.live_server_url)
-        browser.find_element_by_id('id_username').send_keys(username)
-        browser.find_element_by_id('id_password').send_keys(password)
-        browser.find_element_by_xpath("//button[contains(text(), 'Login')]").click()
-
-    def test_auth_page(self):
-        self.browser.get(self.live_server_url)
-        self.percy.snapshot(name='login')
-
-    def test_auth_failures(self):
-        self.login(self.browser, '', '')
-        self.percy.snapshot(name='login fields required')
-
-        self.login(self.browser, 'bad-username', 'bad-username')
-        self.percy.snapshot(name='login fields invalid')
-
-    def test_new_organization(self):
-        email = 'dummy@example.com'
-        password = 'dummy'
-        user = self.create_user(email=email)
-        user.set_password(password)
-        user.save()
-
-        self.login(self.browser, email, password)
-        self.percy.snapshot()
diff --git a/tests/acceptance/test_auth.py b/tests/acceptance/test_auth.py
new file mode 100644
index 0000000000..ad7ede1ecc
--- /dev/null
+++ b/tests/acceptance/test_auth.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class AuthTest(AcceptanceTestCase):
+    def test_auth_page(self):
+        self.browser.get(self.live_server_url)
+        self.percy.snapshot(name='login')
+
+    def test_auth_failures(self):
+        self.login('', '')
+        self.percy.snapshot(name='login fields required')
+
+        self.login('bad-username', 'bad-username')
+        self.percy.snapshot(name='login fields invalid')
+
+    def test_new_organization(self):
+        email = 'dummy@example.com'
+        password = 'dummy'
+        user = self.create_user(email=email)
+        user.set_password(password)
+        user.save()
+
+        self.login(email, password)
+        self.percy.snapshot()
