commit a0bc9c692b15ff5559e2ab5dbdd6a7b78c2c7ef8
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 3 14:38:44 2015 -0800

    Add tag key details endpoint

diff --git a/src/sentry/api/endpoints/group_tagkey_details.py b/src/sentry/api/endpoints/group_tagkey_details.py
new file mode 100644
index 0000000000..b0b4b63b11
--- /dev/null
+++ b/src/sentry/api/endpoints/group_tagkey_details.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.group import GroupEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import GroupTagValue, TagKey, TagKeyStatus
+
+
+class GroupTagKeyDetailsEndpoint(GroupEndpoint):
+    doc_section = DocSection.EVENTS
+
+    def get(self, request, group, key):
+        """
+        List a tag's details
+
+        Returns details about the given tag key.
+
+            {method} {path}
+
+        """
+        try:
+            tag_key = TagKey.objects.get(
+                project=group.project_id,
+                key=key,
+                status=TagKeyStatus.VISIBLE,
+            )
+        except TagKey.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        total_values = GroupTagValue.get_value_count(group.id, key)
+
+        data = {
+            'id': str(tag_key.id),
+            'key': tag_key.key,
+            'name': tag_key.get_label(),
+            'uniqueValues': tag_key.values_seen,
+            'totalValues': total_values,
+        }
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/group_tags.py b/src/sentry/api/endpoints/group_tags.py
index 9372832ef0..ba317b8f16 100644
--- a/src/sentry/api/endpoints/group_tags.py
+++ b/src/sentry/api/endpoints/group_tags.py
@@ -1,42 +1,14 @@
 from __future__ import absolute_import
 
 from datetime import timedelta
-from django.db import connections
-from django.db.models import Sum
 from django.utils import timezone
 from rest_framework.response import Response
 
 from sentry.api.bases.group import GroupEndpoint
 from sentry.models import GroupTagValue, GroupTagKey, TagKey
-from sentry.utils import db
 
 
 class GroupTagsEndpoint(GroupEndpoint):
-    def _get_value_count(self, group_id, key):
-        if db.is_postgres():
-            # This doesnt guarantee percentage is accurate, but it does ensure
-            # that the query has a maximum cost
-            cursor = connections['default'].cursor()
-            cursor.execute("""
-                SELECT SUM(t)
-                FROM (
-                    SELECT times_seen as t
-                    FROM sentry_messagefiltervalue
-                    WHERE group_id = %s
-                    AND key = %s
-                    AND last_seen > NOW() - INTERVAL '7 days'
-                    LIMIT 10000
-                ) as a
-            """, [group_id, key])
-            return cursor.fetchone()[0] or 0
-
-        cutoff = timezone.now() - timedelta(days=7)
-        return GroupTagValue.objects.filter(
-            group=group_id,
-            key=key,
-            last_seen__gte=cutoff,
-        ).aggregate(t=Sum('times_seen'))['t']
-
     def _get_top_values(self, group_id, key, num=5):
         cutoff = timezone.now() - timedelta(days=7)
         return GroupTagValue.objects.filter(
@@ -56,11 +28,11 @@ class GroupTagsEndpoint(GroupEndpoint):
         # O(N) db access
         data = []
         for tag_key in tag_keys:
-            total_values = self._get_value_count(group.id, tag_key.key)
+            total_values = GroupTagValue.get_value_count(group.id, tag_key.key)
             top_values = self._get_top_values(group.id, tag_key.key)
 
             data.append({
-                'id': tag_key.id,
+                'id': str(tag_key.id),
                 'key': tag_key.key,
                 'name': tag_key.get_label(),
                 'uniqueValues': tag_key.values_seen,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e9aaa91188..feae5690d3 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -12,6 +12,7 @@ from .endpoints.group_events_latest import GroupEventsLatestEndpoint
 from .endpoints.group_notes import GroupNotesEndpoint
 from .endpoints.group_stats import GroupStatsEndpoint
 from .endpoints.group_tags import GroupTagsEndpoint
+from .endpoints.group_tagkey_details import GroupTagKeyDetailsEndpoint
 from .endpoints.group_tagkey_values import GroupTagKeyValuesEndpoint
 from .endpoints.helppage_details import HelpPageDetailsEndpoint
 from .endpoints.helppage_index import HelpPageIndexEndpoint
@@ -132,6 +133,9 @@ urlpatterns = patterns(
     url(r'^groups/(?P<group_id>\d+)/tags/$',
         GroupTagsEndpoint.as_view(),
         name='sentry-api-0-group-tags'),
+    url(r'^groups/(?P<group_id>\d+)/tags/(?P<key>[^/]+)/$',
+        GroupTagKeyDetailsEndpoint.as_view(),
+        name='sentry-api-0-group-tagkey-details'),
     url(r'^groups/(?P<group_id>\d+)/tags/(?P<key>[^/]+)/values/$',
         GroupTagKeyValuesEndpoint.as_view(),
         name='sentry-api-0-group-tagkey-values'),
diff --git a/src/sentry/models/grouptagvalue.py b/src/sentry/models/grouptagvalue.py
index d19c333576..22fcc6c1b3 100644
--- a/src/sentry/models/grouptagvalue.py
+++ b/src/sentry/models/grouptagvalue.py
@@ -7,7 +7,9 @@ sentry.models.grouptagvalue
 """
 from __future__ import absolute_import
 
-from django.db import models
+from datetime import timedelta
+from django.db import connections, models
+from django.db.models import Sum
 from django.utils import timezone
 
 from sentry.constants import MAX_TAG_KEY_LENGTH, MAX_TAG_VALUE_LENGTH
@@ -15,6 +17,7 @@ from sentry.db.models import (
     Model, BoundedPositiveIntegerField, BaseManager, FlexibleForeignKey,
     sane_repr
 )
+from sentry.utils import db
 
 
 class GroupTagValue(Model):
@@ -46,5 +49,31 @@ class GroupTagValue(Model):
             self.first_seen = self.last_seen
         super(GroupTag, self).save(*args, **kwargs)
 
+    @classmethod
+    def get_value_count(cls, group_id, key):
+        if db.is_postgres():
+            # This doesnt guarantee percentage is accurate, but it does ensure
+            # that the query has a maximum cost
+            cursor = connections['default'].cursor()
+            cursor.execute("""
+                SELECT SUM(t)
+                FROM (
+                    SELECT times_seen as t
+                    FROM sentry_messagefiltervalue
+                    WHERE group_id = %s
+                    AND key = %s
+                    AND last_seen > NOW() - INTERVAL '7 days'
+                    LIMIT 10000
+                ) as a
+            """, [group_id, key])
+            return cursor.fetchone()[0] or 0
+
+        cutoff = timezone.now() - timedelta(days=7)
+        return cls.objects.filter(
+            group=group_id,
+            key=key,
+            last_seen__gte=cutoff,
+        ).aggregate(t=Sum('times_seen'))['t']
+
 
 GroupTag = GroupTagValue
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_details.py b/tests/sentry/api/endpoints/test_group_tagkey_details.py
new file mode 100644
index 0000000000..e7b10cccb7
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_tagkey_details.py
@@ -0,0 +1,43 @@
+from django.core.urlresolvers import reverse
+from sentry.models import TagKey, GroupTagKey, GroupTagValue
+from sentry.testutils import APITestCase
+
+
+class GroupTagDetailsTest(APITestCase):
+    def test_simple(self):
+        group = self.create_group()
+        group.data['tags'] = (['foo', 'bar'],)
+        group.save()
+
+        key, value = group.data['tags'][0]
+
+        tagkey = TagKey.objects.create(
+            project=group.project,
+            key=key,
+            values_seen=1,
+        )
+        GroupTagKey.objects.create(
+            project=group.project,
+            group=group,
+            key=key,
+            values_seen=1,
+        )
+        GroupTagValue.objects.create(
+            project=group.project,
+            group=group,
+            key=key,
+            value=value,
+            times_seen=1,
+        )
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-group-tagkey-details', kwargs={
+            'group_id': group.id,
+            'key': tagkey.key,
+        })
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(tagkey.id)
+        assert response.data['uniqueValues'] == 1
+        assert response.data['totalValues'] == 1
