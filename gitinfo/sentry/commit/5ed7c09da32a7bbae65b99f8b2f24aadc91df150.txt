commit 5ed7c09da32a7bbae65b99f8b2f24aadc91df150
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Oct 16 13:01:55 2018 -0700

    feat(require-2fa): Auto accept pending invite (#10069)

diff --git a/src/sentry/api/endpoints/user_authenticator_enroll.py b/src/sentry/api/endpoints/user_authenticator_enroll.py
index c3cf96bb9d..ed571493b3 100644
--- a/src/sentry/api/endpoints/user_authenticator_enroll.py
+++ b/src/sentry/api/endpoints/user_authenticator_enroll.py
@@ -3,21 +3,35 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
+import logging
 import petname
 
 from sentry.api.bases.user import UserEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
-from sentry.models import Authenticator
+from sentry.models import Authenticator, OrganizationMember
 from sentry.security import capture_security_activity
+from sentry.web.frontend.accept_organization_invite import ApiInviteHelper
 
+logger = logging.getLogger(__name__)
 
 ALREADY_ENROLLED_ERR = {'details': 'Already enrolled'}
 INVALID_OTP_ERR = {'details': 'Invalid OTP'},
 SEND_SMS_ERR = {'details': 'Error sending SMS'}
 
 
-class TotpRestSerializer(serializers.Serializer):
+class BaseRestSerializer(serializers.Serializer):
+    # Fields needed to accept an org invite
+    # pending 2FA enrollment
+    memberId = serializers.CharField(
+        required=False
+    )
+    token = serializers.CharField(
+        required=False,
+    )
+
+
+class TotpRestSerializer(BaseRestSerializer):
     otp = serializers.CharField(
         label='Authenticator code',
         help_text='Code from authenticator',
@@ -26,7 +40,7 @@ class TotpRestSerializer(serializers.Serializer):
     )
 
 
-class SmsRestSerializer(serializers.Serializer):
+class SmsRestSerializer(BaseRestSerializer):
     phone = serializers.CharField(
         label="Phone number",
         help_text="Phone number to send SMS code",
@@ -41,7 +55,7 @@ class SmsRestSerializer(serializers.Serializer):
     )
 
 
-class U2fRestSerializer(serializers.Serializer):
+class U2fRestSerializer(BaseRestSerializer):
     deviceName = serializers.CharField(
         label='Device name',
         required=False,
@@ -56,6 +70,8 @@ class U2fRestSerializer(serializers.Serializer):
     )
 
 
+hidden_fields = ['memberId', 'token']
+
 serializer_map = {
     'totp': TotpRestSerializer,
     'sms': SmsRestSerializer,
@@ -67,7 +83,7 @@ def get_serializer_field_metadata(serializer, fields=None):
     """Returns field metadata for serializer"""
     meta = []
     for field in serializer.base_fields:
-        if fields is None or field in fields:
+        if (fields is None or field in fields) and field not in hidden_fields:
             serialized_field = dict(serializer.base_fields[field].metadata())
             serialized_field['name'] = field
             serialized_field['defaultValue'] = serializer.base_fields[field].get_default_value()
@@ -208,4 +224,28 @@ class UserAuthenticatorEnrollEndpoint(UserEndpoint):
             request.user.save()
             Authenticator.objects.auto_add_recovery_codes(request.user)
 
+            # Try to accept an org invite pending 2FA enrollment
+            try:
+                member_id = serializer.data['memberId']
+                token = serializer.data['token']
+
+                helper = ApiInviteHelper(
+                    instance=self,
+                    request=request,
+                    member_id=member_id,
+                    token=token,
+                    logger=logger,
+                )
+            except KeyError:
+                pass
+            except OrganizationMember.DoesNotExist:
+                logger.error('Failed to accept pending org invite', exc_info=True)
+            else:
+                if helper.valid_request():
+                    helper.accept_invite()
+
+                    response = Response(status=status.HTTP_204_NO_CONTENT)
+                    helper.remove_invite_cookie(response)
+                    return response
+
             return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/static/sentry/app/actionCreators/organizations.jsx b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
index 4b3757a2c4..95c504bc10 100644
--- a/src/sentry/static/sentry/app/actionCreators/organizations.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
@@ -60,6 +60,23 @@ export function updateOrganization(org) {
   OrganizationsActions.update(org);
 }
 
+export function fetchOrganizationsByMember(memberId, {setActive}) {
+  let api = new Client();
+  let request = api.requestPromise('/organizations/', {
+    query: {
+      member: memberId,
+    },
+  });
+
+  request.then(data => {
+    if (data.length && setActive) {
+      setActiveOrganization(data[0]);
+    }
+  });
+
+  return request;
+}
+
 export function fetchOrganizationDetails(orgId, {setActive, loadProjects, loadTeam}) {
   let api = new Client();
   let request = api.requestPromise(`/organizations/${orgId}/`);
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
index 10536d502b..ca4a750be5 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
@@ -3,6 +3,7 @@
  */
 import {withRouter} from 'react-router';
 import React from 'react';
+import Cookies from 'js-cookie';
 
 import {
   addErrorMessage,
@@ -11,6 +12,7 @@ import {
 } from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
 import {openRecoveryOptions} from 'app/actionCreators/modal';
+import {fetchOrganizationsByMember} from 'app/actionCreators/organizations';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
 import CircleIndicator from 'app/components/circleIndicator';
@@ -24,6 +26,7 @@ import TextBlock from 'app/views/settings/components/text/textBlock';
 import U2fsign from 'app/components/u2fsign';
 
 const ENDPOINT = '/users/me/authenticators/';
+const PENDING_INVITE = 'pending-invite';
 
 /**
  * Retrieve additional form fields (or modify ones) based on 2fa method
@@ -122,6 +125,29 @@ class AccountSecurityEnroll extends AsyncView {
     return [['authenticator', `${ENDPOINT}${this.props.params.authId}/enroll/`]];
   }
 
+  componentWillMount() {
+    super.componentWillMount();
+    // If 2FA is required, a pending organization invite
+    // can be accepted once the user enrolls in 2FA
+    let invite = Cookies.get(PENDING_INVITE);
+
+    if (invite) {
+      invite = invite.split('/');
+      this.invite = {
+        memberId: invite[2],
+        token: invite[3],
+      };
+    }
+  }
+
+  loadOrganizationContext = () => {
+    if (this.invite && this.invite.memberId) {
+      fetchOrganizationsByMember(this.invite.memberId, {
+        setActive: true,
+      });
+    }
+  };
+
   handleFieldChange = (name, value) => {
     // This should not be used for rendering, that's why it's not in state
     this._form[name] = value;
@@ -150,6 +176,7 @@ class AccountSecurityEnroll extends AsyncView {
       // Otherwise API will think that we are on verification step (e.g. after submitting phone)
       otp: hasSentCode ? this._form.otp || '' : undefined,
       secret: authenticator.secret,
+      ...this.invite,
     };
 
     // Only show loading when submitting OTP
@@ -177,6 +204,7 @@ class AccountSecurityEnroll extends AsyncView {
             addMessage(t('Sent code to %s', data.phone));
           } else {
             // OTP was accepted and SMS was added as a 2fa method
+            this.loadOrganizationContext();
             this.props.router.push('/settings/account/security/');
             openRecoveryOptions({
               authenticatorName: authenticator.name,
@@ -209,6 +237,7 @@ class AccountSecurityEnroll extends AsyncView {
         data: {
           ...data,
           ...this._form,
+          ...this.invite,
         },
       })
       .then(this.handleEnrollSuccess, this.handleEnrollError);
@@ -222,6 +251,7 @@ class AccountSecurityEnroll extends AsyncView {
       ...this._form,
       ...(dataModel || {}),
       secret: authenticator.secret,
+      ...this.invite,
     };
 
     this.setState({
@@ -237,6 +267,7 @@ class AccountSecurityEnroll extends AsyncView {
 
   // Handler when we successfully add a 2fa device
   handleEnrollSuccess = () => {
+    this.loadOrganizationContext();
     let authenticatorName =
       (this.state.authenticator && this.state.authenticator.name) || 'Authenticator';
     this.props.router.push('/settings/account/security');
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
index 8f7235bd5d..f23e88c226 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
@@ -57,9 +57,8 @@ class BackButton extends React.Component {
     // if the user needs to setup 2fa as part of the org invite flow,
     // send them back to accept the invite
     let pendingInvite = Cookies.get('pending-invite');
-    let shouldGoBackToInvite = pendingInvite && !lastAppContext;
 
-    if (shouldGoBackToInvite) {
+    if (pendingInvite) {
       return (
         <BackButtonWrapper href={pendingInvite}>
           <Icon src="icon-chevron-left" size="10px" />
diff --git a/src/sentry/web/frontend/accept_organization_invite.py b/src/sentry/web/frontend/accept_organization_invite.py
index f2f96092f0..8897501eb2 100644
--- a/src/sentry/web/frontend/accept_organization_invite.py
+++ b/src/sentry/web/frontend/accept_organization_invite.py
@@ -28,37 +28,32 @@ class AcceptOrganizationInviteView(BaseView):
             return AcceptInviteForm(request.POST)
         return AcceptInviteForm()
 
+    def redirect_with_err_message(self, request):
+        messages.add_message(
+            request,
+            messages.ERROR,
+            ERR_INVITE_INVALID,
+        )
+
+        return self.redirect(reverse('sentry'))
+
     def handle(self, request, member_id, token):
         assert request.method in ('POST', 'GET')
 
         try:
-            om = OrganizationMember.objects.select_related('organization').get(pk=member_id)
-        except OrganizationMember.DoesNotExist:
-            messages.add_message(
-                request,
-                messages.ERROR,
-                ERR_INVITE_INVALID,
-            )
-
-            return self.redirect(reverse('sentry'))
-
-        if not om.is_pending:
-            messages.add_message(
-                request,
-                messages.ERROR,
-                ERR_INVITE_INVALID,
+            helper = WebInviteHelper(
+                instance=self,
+                request=request,
+                member_id=member_id,
+                token=token
             )
+        except OrganizationMember.DoesNotExist:
+            return self.redirect_with_err_message(request)
 
-            return self.redirect(reverse('sentry'))
-
-        if not constant_time_compare(om.token or om.legacy_token, token):
-            messages.add_message(
-                request,
-                messages.ERROR,
-                ERR_INVITE_INVALID,
-            )
-            return self.redirect(reverse('sentry'))
+        if not helper.member_pending or not helper.valid_token:
+            return self.redirect_with_err_message(request)
 
+        om = helper.om
         organization = om.organization
 
         qs = Project.objects.filter(
@@ -67,16 +62,12 @@ class AcceptOrganizationInviteView(BaseView):
         project_list = list(qs[:25])
         project_count = qs.count()
 
-        org_requires_2fa = organization.flags.require_2fa.is_set
-        user_has_2fa = Authenticator.objects.user_has_2fa(request.user.id)
-        needs_2fa = org_requires_2fa and not user_has_2fa
-
         context = {
             'org_name': organization.name,
             'project_list': project_list,
             'project_count': project_count,
-            'needs_authentication': not request.user.is_authenticated(),
-            'needs_2fa': needs_2fa,
+            'needs_authentication': not helper.user_authenticated,
+            'needs_2fa': helper.needs_2fa,
             'logout_url': u'{}?next={}'.format(
                 reverse('sentry-logout'),
                 request.path,
@@ -91,7 +82,7 @@ class AcceptOrganizationInviteView(BaseView):
             ),
         }
 
-        if not request.user.is_authenticated():
+        if not helper.user_authenticated:
             # Show login or register form
             auth.initiate_login(request, next_url=request.get_full_path())
             request.session['can_register'] = True
@@ -99,7 +90,7 @@ class AcceptOrganizationInviteView(BaseView):
 
             return self.respond('sentry/accept-organization-invite.html', context)
 
-        if needs_2fa:
+        if helper.needs_2fa:
             # redirect to setup 2fa
             response = self.respond('sentry/accept-organization-invite.html', context)
             response.set_cookie(PENDING_INVITE, request.path, max_age=MAX_AGE)
@@ -108,52 +99,123 @@ class AcceptOrganizationInviteView(BaseView):
         # if they're already a member of the organization its likely they're
         # using a shared account and either previewing this invite or
         # are incorrectly expecting this to create a new account for them
-        context['existing_member'] = OrganizationMember.objects.filter(
-            user=request.user.id,
-            organization=om.organization_id,
-        ).exists()
+        context['existing_member'] = helper.member_already_exists
 
         form = self.get_form(request)
         if form.is_valid():
-            if OrganizationMember.objects.filter(
-                organization=organization, user=request.user
-            ).exists():
-                messages.add_message(
-                    request, messages.SUCCESS,
-                    _('You are already a member of the %r organization.') %
-                    (organization.name.encode('utf-8'), )
-                )
-
-                om.delete()
-            else:
-                om.user = request.user
-                om.email = None
-                om.save()
-
-                self.create_audit_entry(
-                    request,
-                    organization=organization,
-                    target_object=om.id,
-                    target_user=request.user,
-                    event=AuditLogEntryEvent.MEMBER_ACCEPT,
-                    data=om.get_audit_log_data(),
-                )
-
-                messages.add_message(
-                    request, messages.SUCCESS,
-                    _('You have been added to the %r organization.') %
-                    (organization.name.encode('utf-8'), )
-                )
-
-                member_joined.send_robust(member=om, organization=organization, sender=self)
+            helper.accept_invite()
 
             request.session.pop('can_register', None)
             response = self.redirect(reverse('sentry-organization-home', args=[organization.slug]))
-
-            if PENDING_INVITE in request.COOKIES:
-                response.delete_cookie(PENDING_INVITE)
-            return response
+            return helper.remove_invite_cookie(response)
 
         context['form'] = form
-
         return self.respond('sentry/accept-organization-invite.html', context)
+
+
+class BaseInviteHelper(object):
+    def __init__(self, instance, request, member_id, token, logger=None):
+        self.request = request
+        self.instance = instance
+        self.member_id = member_id
+        self.token = token
+        self.logger = logger
+        self.om = self.get_organization_member()
+
+    def handle_success(self):
+        pass
+
+    def handle_member_already_exists(self):
+        pass
+
+    def get_organization_member(self):
+        return OrganizationMember.objects.select_related('organization').get(pk=self.member_id)
+
+    @property
+    def member_pending(self):
+        return self.om.is_pending
+
+    @property
+    def valid_token(self):
+        return constant_time_compare(self.om.token or self.om.legacy_token, self.token)
+
+    @property
+    def user_authenticated(self):
+        return self.request.user.is_authenticated()
+
+    @property
+    def needs_2fa(self):
+        org_requires_2fa = self.om.organization.flags.require_2fa.is_set
+        user_has_2fa = Authenticator.objects.user_has_2fa(self.request.user.id)
+        return org_requires_2fa and not user_has_2fa
+
+    @property
+    def member_already_exists(self):
+        return OrganizationMember.objects.filter(
+            organization=self.om.organization, user=self.request.user
+        ).exists()
+
+    def accept_invite(self):
+        om = self.om
+
+        if self.member_already_exists:
+            self.handle_member_already_exists()
+            om.delete()
+        else:
+            om.user = self.request.user
+            om.email = None
+            om.save()
+
+            self.instance.create_audit_entry(
+                self.request,
+                organization=om.organization,
+                target_object=om.id,
+                target_user=self.request.user,
+                event=AuditLogEntryEvent.MEMBER_ACCEPT,
+                data=om.get_audit_log_data(),
+            )
+
+            self.handle_success()
+
+    def remove_invite_cookie(self, response):
+        if PENDING_INVITE in self.request.COOKIES:
+            response.delete_cookie(PENDING_INVITE)
+        return response
+
+
+class WebInviteHelper(BaseInviteHelper):
+    def handle_success(self):
+        messages.add_message(
+            self.request, messages.SUCCESS,
+            _('You have been added to the %r organization.') %
+            (self.om.organization.name.encode('utf-8'), )
+        )
+
+        member_joined.send_robust(
+            member=self.om, organization=self.om.organization, sender=self.instance)
+
+    def handle_member_already_exists(self):
+        messages.add_message(
+            self.request, messages.SUCCESS,
+            _('You are already a member of the %r organization.') %
+            (self.om.organization.name.encode('utf-8'), )
+        )
+
+
+class ApiInviteHelper(BaseInviteHelper):
+    def handle_member_already_exists(self):
+        self.logger.info(
+            'Pending org invite not accepted - User already org member',
+            extra={
+                'organization_id': self.om.organization.id,
+                'user_id': self.request.user.id,
+            }
+        )
+
+    def valid_request(self):
+        if (not self.member_pending or
+            not self.valid_token or
+            not self.user_authenticated or
+                self.needs_2fa):
+            return False
+        return True
diff --git a/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx b/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx
index 9a69bc5c2f..2802ed57e2 100644
--- a/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx
+++ b/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx
@@ -110,7 +110,7 @@ describe('SettingsBackButton', function() {
       expect(wrapper.find('BackButtonWrapper').prop('href')).toBe('/test/');
     });
 
-    it('renders "Back to Project" when `lastAppContext` is "project" and `pending-invite` cookie', function() {
+    it('renders "Back to Invite" when `lastAppContext` is "project" and `pending-invite` cookie', function() {
       let wrapper = mount(
         <BackButton
           params={{projectId: 'project-slug'}}
@@ -124,11 +124,11 @@ describe('SettingsBackButton', function() {
           },
         }
       );
-      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Project');
-      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe('/foo/');
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Invite');
+      expect(wrapper.find('BackButtonWrapper').prop('href')).toBe('/test/');
     });
 
-    it('renders "Back to Organization" when `lastAppContext` is "organization" and `pending-invite` cookie', function() {
+    it('renders "Back to Invite" when `lastAppContext` is "organization" and `pending-invite` cookie', function() {
       let wrapper = mount(
         <BackButton params={{projectId: 'project-slug'}} organization={org} />,
         {
@@ -137,8 +137,8 @@ describe('SettingsBackButton', function() {
           },
         }
       );
-      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Organization');
-      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe('/org-slug/');
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Invite');
+      expect(wrapper.find('BackButtonWrapper').prop('href')).toBe('/test/');
     });
   });
 });
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
index 3c2590faf0..6ab8991b3b 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
@@ -4,8 +4,12 @@ import mock
 
 from django.core.urlresolvers import reverse
 from django.conf import settings
+from django.db.models import F
 
-from sentry.models import Authenticator
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Authenticator, Organization,
+    OrganizationMember
+)
 from sentry.testutils import APITestCase
 
 
@@ -139,3 +143,191 @@ class UserAuthenticatorEnrollTest(APITestCase):
             assert resp.status_code == 204
 
             self._assert_security_email_sent('mfa-added', email_log)
+
+
+class AcceptOrganizationInviteTest(APITestCase):
+
+    def setUp(self):
+        self.organization = self.create_organization(
+            owner=self.create_user('foo@example.com'),
+        )
+        self.user = self.create_user('bar@example.com', is_superuser=False)
+        self.login_as(user=self.user)
+
+        self.require_2fa_for_organization()
+        self.assertFalse(Authenticator.objects.user_has_2fa(self.user))
+
+    def require_2fa_for_organization(self):
+        self.organization.update(flags=F('flags').bitor(Organization.flags.require_2fa))
+        self.assertTrue(self.organization.flags.require_2fa.is_set)
+
+    def assert_2fa_cookie_set(self, response, om):
+        invite_link = om.get_invite_link()
+        self.assertIn(response.client.cookies['pending-invite'].value, invite_link)
+
+    def create_existing_om(self):
+        OrganizationMember.objects.create(
+            user=self.user,
+            role='member',
+            organization=self.organization,
+        )
+
+    def get_om_and_init_invite(self):
+        om = OrganizationMember.objects.create(
+            email='newuser@example.com',
+            role='member',
+            token='abc',
+            organization=self.organization,
+        )
+
+        resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/accept-organization-invite.html')
+        self.assert_2fa_cookie_set(resp, om)
+
+        return om
+
+    def assert_invite_accepted(self, response, member_id):
+        om = OrganizationMember.objects.get(id=member_id)
+        assert om.user == self.user
+        assert om.email is None
+
+        AuditLogEntry.objects.get(
+            organization=self.organization,
+            target_object=om.id,
+            target_user=self.user,
+            event=AuditLogEntryEvent.MEMBER_ACCEPT,
+            data=om.get_audit_log_data()
+        )
+
+        self.assertFalse(response.client.cookies['pending-invite'].value)
+
+    def setup_u2f(self, om, member_id=None, token=None):
+        new_options = settings.SENTRY_OPTIONS.copy()
+        new_options['system.url-prefix'] = 'https://testserver'
+        with self.settings(SENTRY_OPTIONS=new_options):
+            url = reverse(
+                'sentry-api-0-user-authenticator-enroll', kwargs={'user_id': 'me', 'interface_id': 'u2f'}
+            )
+
+            resp = self.client.post(url, data={
+                'deviceName': 'device name',
+                'challenge': 'challenge',
+                'response': 'response',
+                'memberId': member_id or om.id,
+                'token': token or om.token,
+            })
+            assert resp.status_code == 204
+
+        return resp
+
+    def test_cannot_accept_invite_pending_invite__2fa_required(self):
+        om = self.get_om_and_init_invite()
+
+        om = OrganizationMember.objects.get(id=om.id)
+        assert om.user is None
+        assert om.email == 'newuser@example.com'
+
+    @mock.patch('sentry.models.U2fInterface.try_enroll', return_value=True)
+    def test_accept_pending_invite__u2f_enroll(self, try_enroll):
+        om = self.get_om_and_init_invite()
+        resp = self.setup_u2f(om)
+
+        self.assert_invite_accepted(resp, om.id)
+
+    @mock.patch('sentry.models.SmsInterface.validate_otp', return_value=True)
+    @mock.patch('sentry.models.SmsInterface.send_text', return_value=True)
+    def test_accept_pending_invite__sms_enroll(self, send_text, validate_otp):
+        om = self.get_om_and_init_invite()
+
+        # setup sms
+        new_options = settings.SENTRY_OPTIONS.copy()
+        new_options['sms.twilio-account'] = 'twilio-account'
+
+        with self.settings(SENTRY_OPTIONS=new_options):
+            url = reverse(
+                'sentry-api-0-user-authenticator-enroll', kwargs={'user_id': 'me', 'interface_id': 'sms'}
+            )
+
+            resp = self.client.post(url, data={
+                'secret': 'secret12',
+                'phone': '1231234',
+            })
+            assert resp.status_code == 204
+
+            resp = self.client.post(url, data={
+                'secret': 'secret12',
+                'phone': '1231234',
+                'otp': '123123',
+                'memberId': om.id,
+                'token': om.token,
+            })
+            assert validate_otp.call_count == 1
+            assert validate_otp.call_args == mock.call('123123')
+
+            interface = Authenticator.objects.get_interface(user=self.user, interface_id='sms')
+            assert interface.phone_number == '1231234'
+
+        self.assert_invite_accepted(resp, om.id)
+
+    @mock.patch('sentry.models.TotpInterface.validate_otp', return_value=True)
+    def test_accept_pending_invite__totp_enroll(self, validate_otp):
+        om = self.get_om_and_init_invite()
+
+        # setup totp
+        url = reverse(
+            'sentry-api-0-user-authenticator-enroll', kwargs={'user_id': 'me', 'interface_id': 'totp'}
+        )
+
+        resp = self.client.get(url)
+        assert resp.status_code == 200
+
+        resp = self.client.post(url, data={
+            'secret': 'secret12',
+            'otp': '1234',
+            'memberId': om.id,
+            'token': om.token,
+        })
+        assert resp.status_code == 204
+
+        interface = Authenticator.objects.get_interface(user=self.user, interface_id='totp')
+        assert interface
+
+        self.assert_invite_accepted(resp, om.id)
+
+    @mock.patch('sentry.api.endpoints.user_authenticator_enroll.logger')
+    @mock.patch('sentry.models.U2fInterface.try_enroll', return_value=True)
+    def test_user_already_org_member(self, try_enroll, log):
+        om = self.get_om_and_init_invite()
+        self.create_existing_om()
+        self.setup_u2f(om)
+
+        assert not OrganizationMember.objects.filter(id=om.id).exists()
+
+        log.info.assert_called_once_with(
+            'Pending org invite not accepted - User already org member',
+            extra={'organization_id': self.organization.id, 'user_id': self.user.id}
+        )
+
+    @mock.patch('sentry.api.endpoints.user_authenticator_enroll.logger')
+    @mock.patch('sentry.models.U2fInterface.try_enroll', return_value=True)
+    def test_org_member_does_not_exist(self, try_enroll, log):
+        om = self.get_om_and_init_invite()
+        self.setup_u2f(om, member_id=om.id + 20)
+
+        om = OrganizationMember.objects.get(id=om.id)
+        assert om.user is None
+        assert om.email == 'newuser@example.com'
+
+        log.error.call_count == 1
+        log.error.call_args[0][0] == 'Failed to accept pending org invite'
+
+    @mock.patch('sentry.api.endpoints.user_authenticator_enroll.logger')
+    @mock.patch('sentry.models.U2fInterface.try_enroll', return_value=True)
+    def test_invalid_token(self, try_enroll, log):
+        om = self.get_om_and_init_invite()
+        self.setup_u2f(om, token='123')
+
+        om = OrganizationMember.objects.get(id=om.id)
+        assert om.user is None
+        assert om.email == 'newuser@example.com'
diff --git a/tests/sentry/web/frontend/test_accept_organization_invite.py b/tests/sentry/web/frontend/test_accept_organization_invite.py
index d090257f9f..a2a3e8c7cf 100644
--- a/tests/sentry/web/frontend/test_accept_organization_invite.py
+++ b/tests/sentry/web/frontend/test_accept_organization_invite.py
@@ -144,6 +144,32 @@ class AcceptInviteTest(TestCase):
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/accept-organization-invite.html')
 
+    def test_member_already_exists(self):
+        self.login_as(self.user)
+
+        om = OrganizationMember.objects.create(
+            email='newuser@example.com',
+            role='member',
+            token='abc',
+            organization=self.organization,
+        )
+        resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
+        assert resp.status_code == 302
+
+        om = OrganizationMember.objects.get(id=om.id)
+        assert om.email is None
+        assert om.user == self.user
+
+        om2 = OrganizationMember.objects.create(
+            email='newuser1@example.com',
+            role='member',
+            token='abcd',
+            organization=self.organization,
+        )
+        resp = self.client.post(reverse('sentry-accept-invite', args=[om2.id, om2.token]))
+        assert resp.status_code == 302
+        assert not OrganizationMember.objects.filter(id=om2.id).exists()
+
     def test_can_accept_when_user_has_2fa(self):
         self._require_2fa_for_organization()
         self._enroll_user_in_2fa()
