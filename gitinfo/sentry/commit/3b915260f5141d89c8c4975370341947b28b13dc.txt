commit 3b915260f5141d89c8c4975370341947b28b13dc
Author: Mark Story <mark@sentry.io>
Date:   Mon Jan 27 16:03:55 2020 -0500

    feat(discover) Add restrictions for discover-query flag (#16627)
    
    Add additional feature flag checks for building and custom discover
    queries. We want to package basic discover usage separately from
    building and using custom queries.
    
    I've added a disabled-feature hook so that getsentry can implement the
    business upgrade hovercard pattern we use elsewhere.
    
    Update endpoints for discover saved queries to use discover-query.
    Make the Discover breadcrumb a no-op when you don't have
    saved queries.

diff --git a/src/sentry/discover/endpoints/discover_saved_queries.py b/src/sentry/discover/endpoints/discover_saved_queries.py
index 467f8c5d1d..d3fef7a385 100644
--- a/src/sentry/discover/endpoints/discover_saved_queries.py
+++ b/src/sentry/discover/endpoints/discover_saved_queries.py
@@ -19,7 +19,7 @@ class DiscoverSavedQueriesEndpoint(OrganizationEndpoint):
     def has_feature(self, organization, request):
         return features.has(
             "organizations:discover", organization, actor=request.user
-        ) or features.has("organizations:discover-basic", organization, actor=request.user)
+        ) or features.has("organizations:discover-query", organization, actor=request.user)
 
     def get(self, request, organization):
         """
diff --git a/src/sentry/discover/endpoints/discover_saved_query_detail.py b/src/sentry/discover/endpoints/discover_saved_query_detail.py
index e26280b79c..adbc5ae4df 100644
--- a/src/sentry/discover/endpoints/discover_saved_query_detail.py
+++ b/src/sentry/discover/endpoints/discover_saved_query_detail.py
@@ -16,7 +16,7 @@ class DiscoverSavedQueryDetailEndpoint(OrganizationEndpoint):
     def has_feature(self, organization, request):
         return features.has(
             "organizations:discover", organization, actor=request.user
-        ) or features.has("organizations:discover-basic", organization, actor=request.user)
+        ) or features.has("organizations:discover-query", organization, actor=request.user)
 
     def get(self, request, organization, query_id):
         """
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index a99826bb25..d0275229e6 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -4,6 +4,9 @@ import {t} from 'app/locale';
 import {openModal} from 'app/actionCreators/modal';
 
 import EmptyStateWarning from 'app/components/emptyStateWarning';
+import Feature from 'app/components/acl/feature';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
+import Hovercard from 'app/components/hovercard';
 import InlineSvg from 'app/components/inlineSvg';
 import LoadingIndicator from 'app/components/loadingIndicator';
 
@@ -48,8 +51,14 @@ type GridEditableProps<DataRow, ColumnKey> = {
   onToggleEdit?: (nextValue: boolean) => void;
 
   gridHeadCellButtonProps?: {[prop: string]: any};
+  /**
+   * This is currently required as we only have one usage of
+   * this component in the future. If we have more this could be
+   * made optional. You will need to update renderHeaderButtons() though.
+   */
+  editFeatures: string[];
+  noEditMessage?: string;
 
-  isEditable?: boolean;
   isLoading?: boolean;
   isColumnDragging: boolean;
   error?: React.ReactNode | null;
@@ -67,7 +76,6 @@ type GridEditableProps<DataRow, ColumnKey> = {
   columnOrder: GridColumnOrder<ColumnKey>[];
   columnSortBy: GridColumnSortBy<ColumnKey>[];
   data: DataRow[];
-  downloadAsCsv: () => void;
 
   /**
    * GridEditable allows the parent component to determine how to display the
@@ -116,6 +124,7 @@ type GridEditableProps<DataRow, ColumnKey> = {
       indexFrom: number
     ) => void;
     deleteColumn: (index: number) => void;
+    downloadAsCsv: () => void;
   };
 };
 
@@ -128,10 +137,6 @@ class GridEditable<
   DataRow extends {[key: string]: any},
   ColumnKey extends ObjectKey
 > extends React.Component<GridEditableProps<DataRow, ColumnKey>, GridEditableState> {
-  static defaultProps = {
-    isEditable: false,
-  };
-
   // Static methods do not allow the use of generics bounded to the parent class
   // For more info: https://github.com/microsoft/TypeScript/issues/14600
   static getDerivedStateFromProps(
@@ -235,7 +240,7 @@ class GridEditable<
     window.requestAnimationFrame(() => this.resizeGridColumn(e, resizeMetadata));
   };
 
-  toggleEdit = () => {
+  handleToggleEdit = () => {
     const nextValue = !this.state.isEditing;
 
     if (this.props.onToggleEdit) {
@@ -273,7 +278,7 @@ class GridEditable<
     ));
   };
 
-  resizeGridColumn = (e: MouseEvent, metadata: ColResizeMetadata) => {
+  resizeGridColumn(e: MouseEvent, metadata: ColResizeMetadata) {
     const grid = this.refGrid.current;
     if (!grid) {
       return;
@@ -292,7 +297,7 @@ class GridEditable<
       metadata.columnIndex,
       metadata.columnWidth + e.clientX - metadata.cursorX
     );
-  };
+  }
 
   /**
    * Recalculate the dimensions of Grid and Columns and redraws them
@@ -338,43 +343,75 @@ class GridEditable<
     grid.style.gridTemplateColumns = columnWidths.join(' ');
   }
 
-  renderHeaderButton = () => {
-    if (!this.props.isEditable) {
-      return null;
-    }
+  renderHeaderButtons() {
+    const {noEditMessage, editFeatures} = this.props;
+    const renderDisabled = p => (
+      <Hovercard
+        body={
+          <FeatureDisabled
+            features={p.features}
+            hideHelpToggle
+            message={noEditMessage}
+            featureName={noEditMessage}
+          />
+        }
+      >
+        {p.children(p)}
+      </Hovercard>
+    );
 
     return (
-      <HeaderButton
-        onClick={() => this.openModalAddColumnAt()}
-        data-test-id="grid-add-column"
+      <Feature
+        hookName="feature-disabled:grid-editable-actions"
+        renderDisabled={renderDisabled}
+        features={editFeatures}
       >
+        {({hasFeature}) => (
+          <React.Fragment>
+            {this.renderDownloadCsvButton(hasFeature)}
+            {this.renderAddColumnButton(hasFeature)}
+            {this.renderEditButtons(hasFeature)}
+          </React.Fragment>
+        )}
+      </Feature>
+    );
+  }
+
+  renderAddColumnButton(canEdit: boolean) {
+    const onClick = canEdit ? () => this.openModalAddColumnAt() : undefined;
+    return (
+      <HeaderButton disabled={!canEdit} onClick={onClick} data-test-id="grid-add-column">
         <InlineSvg src="icon-circle-add" />
         {t('Add Column')}
       </HeaderButton>
     );
-  };
+  }
 
-  renderDownloadCsvButton = () => {
-    if (this.props.isLoading) {
-      return null;
-    }
+  renderDownloadCsvButton(canEdit: boolean) {
+    const disabled = this.props.isLoading || canEdit === false;
+    const onClick = disabled ? undefined : this.props.actions.downloadAsCsv;
 
     return (
-      <HeaderButton onClick={this.props.downloadAsCsv} data-test-id="grid-download-csv">
+      <HeaderButton
+        disabled={disabled}
+        onClick={onClick}
+        data-test-id="grid-download-csv"
+      >
         <InlineSvg src="icon-download" />
         {t('Download CSV')}
       </HeaderButton>
     );
-  };
-
-  renderGridHeadEditButtons = () => {
-    if (!this.props.isEditable) {
-      return null;
-    }
+  }
 
+  renderEditButtons(canEdit: boolean) {
+    const onClick = canEdit ? this.handleToggleEdit : undefined;
     if (!this.state.isEditing) {
       return (
-        <HeaderButton onClick={this.toggleEdit} data-test-id="grid-edit-enable">
+        <HeaderButton
+          disabled={!canEdit}
+          onClick={onClick}
+          data-test-id="grid-edit-enable"
+        >
           <InlineSvg src="icon-edit-pencil" />
           {t('Edit Columns')}
         </HeaderButton>
@@ -382,14 +419,14 @@ class GridEditable<
     }
 
     return (
-      <HeaderButton onClick={this.toggleEdit} data-test-id="grid-edit-disable">
+      <HeaderButton onClick={onClick} data-test-id="grid-edit-disable">
         <InlineSvg src="icon-circle-check" />
         {t('Save & Close')}
       </HeaderButton>
     );
-  };
+  }
 
-  renderGridHead = () => {
+  renderGridHead() {
     const {error, isLoading, columnOrder, actions, grid, data} = this.props;
     const {isEditing} = this.state;
 
@@ -430,9 +467,9 @@ class GridEditable<
         ))}
       </GridRow>
     );
-  };
+  }
 
-  renderGridBody = () => {
+  renderGridBody() {
     const {data, error, isLoading} = this.props;
 
     if (error) {
@@ -448,7 +485,7 @@ class GridEditable<
     }
 
     return data.map(this.renderGridBodyRow);
-  };
+  }
 
   renderGridBodyRow = (dataRow: DataRow, row: number) => {
     const {columnOrder, grid} = this.props;
@@ -464,7 +501,7 @@ class GridEditable<
     );
   };
 
-  renderError = () => {
+  renderError() {
     const {error} = this.props;
 
     return (
@@ -476,9 +513,9 @@ class GridEditable<
         </GridBodyCellStatus>
       </GridRow>
     );
-  };
+  }
 
-  renderLoading = () => {
+  renderLoading() {
     return (
       <GridRow>
         <GridBodyCellStatus>
@@ -486,9 +523,9 @@ class GridEditable<
         </GridBodyCellStatus>
       </GridRow>
     );
-  };
+  }
 
-  renderEmptyData = () => {
+  renderEmptyData() {
     return (
       <GridRow>
         <GridBodyCellStatus>
@@ -498,28 +535,14 @@ class GridEditable<
         </GridBodyCellStatus>
       </GridRow>
     );
-  };
+  }
 
   render() {
-    const {isEditable} = this.props;
-
     return (
       <React.Fragment>
         <Header>
           <HeaderTitle>{t('Results')}</HeaderTitle>
-
-          {/* TODO(leedongwei): This is ugly but I need to move it to work on
-          resizing columns. It will be refactored in a upcoming PR */}
-          <div style={{display: 'flex', flexDirection: 'row'}}>
-            <HeaderButtonContainer>
-              {this.renderDownloadCsvButton()}
-            </HeaderButtonContainer>
-            <HeaderButtonContainer>{this.renderHeaderButton()}</HeaderButtonContainer>
-
-            <HeaderButtonContainer>
-              {isEditable && this.renderGridHeadEditButtons()}
-            </HeaderButtonContainer>
-          </div>
+          <HeaderButtonContainer>{this.renderHeaderButtons()}</HeaderButtonContainer>
         </Header>
 
         <Body>
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index 4623d93c94..5f26e9dbc9 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -43,12 +43,24 @@ export const HeaderTitle = styled('h4')`
   color: ${p => p.theme.gray3};
 `;
 
-export const HeaderButton = styled('div')`
+export const HeaderButtonContainer = styled('div')`
+  display: flex;
+  flex-direction: row;
+
+  /* Hovercard anchor element when features are disabled. */
+  & > span {
+    display: flex;
+    flex-direction: row;
+  }
+`;
+
+export const HeaderButton = styled('div')<{disabled?: boolean}>`
   display: flex;
   align-items: center;
-  color: ${p => p.theme.gray3};
-  cursor: pointer;
+  color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray3)};
+  cursor: ${p => (p.disabled ? 'default' : 'pointer')};
   font-size: ${p => p.theme.fontSizeSmall};
+  margin-left: ${space(2)};
 
   > svg {
     margin-right: ${space(0.5)};
@@ -56,14 +68,10 @@ export const HeaderButton = styled('div')`
 
   &:hover,
   &:active {
-    color: ${p => p.theme.gray4};
+    color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray4)};
   }
 `;
 
-export const HeaderButtonContainer = styled('div')`
-  margin-left: ${space(2)};
-`;
-
 const PanelWithProtectedBorder = styled(Panel)`
   overflow: hidden;
   z-index: ${Z_INDEX_PANEL};
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index e6da901020..6982276b0f 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -22,7 +22,7 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 import localStorage from 'app/utils/localStorage';
 import withLatestContext from 'app/utils/withLatestContext';
-import {generateDiscoverLandingPageRoute} from 'app/views/eventsV2/utils';
+import {getDiscoverLandingUrl} from 'app/views/eventsV2/utils';
 
 import Broadcasts from './broadcasts';
 import ServiceIncidents from './serviceIncidents';
@@ -300,13 +300,13 @@ class Sidebar extends React.Component {
                         {...sidebarItemProps}
                         onClick={(_id, evt) =>
                           this.navigateWithGlobalSelection(
-                            generateDiscoverLandingPageRoute(organization.slug),
+                            getDiscoverLandingUrl(organization),
                             evt
                           )
                         }
                         icon={<InlineSvg src="icon-telescope" />}
                         label={t('Discover')}
-                        to={generateDiscoverLandingPageRoute(organization.slug)}
+                        to={getDiscoverLandingUrl(organization)}
                         id="discover-v2"
                       />
                     </Feature>
diff --git a/src/sentry/static/sentry/app/stores/hookStore.tsx b/src/sentry/static/sentry/app/stores/hookStore.tsx
index 146d52a3fa..4f2ac8403c 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.tsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.tsx
@@ -29,6 +29,7 @@ const validHookNames = new Set<HookName>([
   'feature-disabled:sso-basic',
   'feature-disabled:sso-rippling',
   'feature-disabled:sso-saml2',
+  'feature-disabled:grid-editable-actions',
   'footer',
   'integrations:feature-gates',
   'member-invite-modal:customization',
diff --git a/src/sentry/static/sentry/app/types/hooks.ts b/src/sentry/static/sentry/app/types/hooks.ts
index eb75d7ff81..a17d02b590 100644
--- a/src/sentry/static/sentry/app/types/hooks.ts
+++ b/src/sentry/static/sentry/app/types/hooks.ts
@@ -94,6 +94,7 @@ export type FeatureDisabledHooks = {
   'feature-disabled:discover-sidebar-item': FeatureDisabledHook;
   'feature-disabled:project-selector-checkbox': FeatureDisabledHook;
   'feature-disabled:custom-symbol-sources': FeatureDisabledHook;
+  'feature-disabled:grid-editable-actions': FeatureDisabledHook;
 };
 
 /**
diff --git a/src/sentry/static/sentry/app/views/discover/discover.tsx b/src/sentry/static/sentry/app/views/discover/discover.tsx
index d24a45f867..0728bb0291 100644
--- a/src/sentry/static/sentry/app/views/discover/discover.tsx
+++ b/src/sentry/static/sentry/app/views/discover/discover.tsx
@@ -14,7 +14,7 @@ import PageHeading from 'app/components/pageHeading';
 import {Organization} from 'app/types';
 import space from 'app/styles/space';
 import localStorage from 'app/utils/localStorage';
-import {generateDiscoverLandingPageRoute} from 'app/views/eventsV2/utils';
+import {getDiscoverLandingUrl} from 'app/views/eventsV2/utils';
 
 import {
   DiscoverContainer,
@@ -459,7 +459,7 @@ export default class Discover extends React.Component<Props, State> {
             organization={organization}
           >
             <SwitchLink
-              href={generateDiscoverLandingPageRoute(organization.slug)}
+              href={getDiscoverLandingUrl(organization)}
               onClick={this.onGoLegacyDiscover}
             >
               {t('Go to New Discover')}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
index dd189f3f10..88650cbec6 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
@@ -10,7 +10,7 @@ import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
 
 import EventView from './eventView';
-import {generateDiscoverLandingPageRoute} from './utils';
+import {getDiscoverLandingUrl} from './utils';
 
 type Props = {
   eventView: EventView;
@@ -28,14 +28,16 @@ class DiscoverBreadcrumb extends React.Component<Props> {
     const {eventView, event, organization, location} = this.props;
     const crumbs: React.ReactNode[] = [];
 
-    const discoverTarget = {
-      pathname: generateDiscoverLandingPageRoute(organization.slug),
-      query: {
-        ...location.query,
-        ...eventView.generateBlankQueryStringObject(),
-        ...eventView.getGlobalSelection(),
-      },
-    };
+    const discoverTarget = organization.features.includes('discover-query')
+      ? {
+          pathname: getDiscoverLandingUrl(organization),
+          query: {
+            ...location.query,
+            ...eventView.generateBlankQueryStringObject(),
+            ...eventView.getGlobalSelection(),
+          },
+        }
+      : null;
 
     crumbs.push(
       <BreadcrumbItem to={discoverTarget} key="eventview-home">
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index c2c650c2ec..b17f6f08f1 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -12,6 +12,7 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import SentryTypes from 'app/sentryTypes';
 import {Organization, SavedQuery} from 'app/types';
 import localStorage from 'app/utils/localStorage';
+import Alert from 'app/components/alert';
 import AsyncComponent from 'app/components/asyncComponent';
 import BetaTag from 'app/components/betaTag';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
@@ -243,6 +244,14 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     });
   };
 
+  renderNoAccess() {
+    return (
+      <PageContent>
+        <Alert type="warning">{t("You don't have access to this feature")}</Alert>
+      </PageContent>
+    );
+  }
+
   render() {
     let body;
     const {location, organization} = this.props;
@@ -281,12 +290,18 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     }
 
     return (
-      <SentryDocumentTitle title={t('Discover')} objSlug={organization.slug}>
-        <React.Fragment>
-          <GlobalSelectionHeader organization={organization} />
-          <NoProjectMessage organization={organization}>{body}</NoProjectMessage>
-        </React.Fragment>
-      </SentryDocumentTitle>
+      <Feature
+        organization={organization}
+        features={['discover-query']}
+        renderDisabled={this.renderNoAccess}
+      >
+        <SentryDocumentTitle title={t('Discover')} objSlug={organization.slug}>
+          <React.Fragment>
+            <GlobalSelectionHeader organization={organization} />
+            <NoProjectMessage organization={organization}>{body}</NoProjectMessage>
+          </React.Fragment>
+        </SentryDocumentTitle>
+      </Feature>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
index 05023a3f1b..856f6eb3a4 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
@@ -6,6 +6,7 @@ import {Organization, SavedQuery} from 'app/types';
 import {fetchSavedQuery} from 'app/actionCreators/discoverSavedQueries';
 
 import {Client} from 'app/api';
+import Feature from 'app/components/acl/feature';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 
@@ -71,13 +72,15 @@ class ResultsHeader extends React.Component<Props, State> {
           eventView={eventView}
         />
         <Controller>
-          <SavedQueryButtonGroup
-            location={location}
-            organization={organization}
-            eventView={eventView}
-            savedQuery={savedQuery}
-            savedQueryLoading={loading}
-          />
+          <Feature organization={organization} features={['discover-query']}>
+            <SavedQueryButtonGroup
+              location={location}
+              organization={organization}
+              eventView={eventView}
+              savedQuery={savedQuery}
+              savedQueryLoading={loading}
+            />
+          </Feature>
         </Controller>
       </HeaderBox>
     );
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index 562413a326..34a309cd5a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -16,7 +16,7 @@ import Input from 'app/components/forms/input';
 import space from 'app/styles/space';
 
 import EventView from '../eventView';
-import {generateDiscoverLandingPageRoute} from '../utils';
+import {getDiscoverLandingUrl} from '../utils';
 import {handleCreateQuery, handleUpdateQuery, handleDeleteQuery} from './utils';
 
 type Props = {
@@ -169,7 +169,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
 
     handleDeleteQuery(api, organization, eventView).then(() => {
       browserHistory.push({
-        pathname: generateDiscoverLandingPageRoute(organization.slug),
+        pathname: getDiscoverLandingUrl(organization),
         query: {},
       });
     });
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 561cae1291..f9b6373ab0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -51,15 +51,8 @@ class Table extends React.PureComponent<TableProps, TableState> {
   };
 
   componentDidMount() {
-    const {location, organization, eventView} = this.props;
-
-    if (!eventView.isValid()) {
-      const nextEventView = EventView.fromNewQueryWithLocation(
-        DEFAULT_EVENT_VIEW,
-        location
-      );
-
-      browserHistory.replace(nextEventView.getResultsViewUrlTarget(organization.slug));
+    if (!this.props.eventView.isValid()) {
+      this.goToAllEvents();
       return;
     }
 
@@ -70,6 +63,20 @@ class Table extends React.PureComponent<TableProps, TableState> {
     if (!this.state.isLoading && this.shouldRefetchData(prevProps)) {
       this.fetchData();
     }
+    if (!this.props.eventView.isValid()) {
+      this.goToAllEvents();
+      return;
+    }
+  }
+
+  goToAllEvents() {
+    const {location, organization} = this.props;
+    const nextEventView = EventView.fromNewQueryWithLocation(
+      DEFAULT_EVENT_VIEW,
+      location
+    );
+
+    browserHistory.replace(nextEventView.getResultsViewUrlTarget(organization.slug));
   }
 
   shouldRefetchData = (prevProps: TableProps): boolean => {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 4de8d62d1a..767f49b527 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -4,6 +4,7 @@ import {Location} from 'history';
 import {Organization} from 'app/types';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import GridEditable, {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
+import {t} from 'app/locale';
 import {assert} from 'app/types/utils';
 import Link from 'app/components/links/link';
 
@@ -399,14 +400,14 @@ class TableView extends React.Component<TableViewProps> {
         }) => {
           return (
             <GridEditable
-              isEditable
+              editFeatures={['organizations:discover-query']}
+              noEditMessage={t('Requires discover query feature.')}
               onToggleEdit={this.onToggleEdit}
               isColumnDragging={isColumnDragging}
               gridHeadCellButtonProps={{className: DRAGGABLE_COLUMN_CLASSNAME_IDENTIFIER}}
               isLoading={isLoading}
               error={error}
               data={tableData ? tableData.data : []}
-              downloadAsCsv={() => downloadAsCsv(tableData, columnOrder, title)}
               columnOrder={this.generateColumnOrder({
                 initialColumnIndex: draggingColumnIndex,
                 destinationColumnIndex,
@@ -425,6 +426,7 @@ class TableView extends React.Component<TableViewProps> {
                 deleteColumn: this._deleteColumn,
                 moveColumnCommit: this._moveColumnCommit,
                 onDragStart: startColumnDrag,
+                downloadAsCsv: () => downloadAsCsv(tableData, columnOrder, title),
               }}
             />
           );
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 64f58d6ff9..059e8d58f5 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -6,7 +6,7 @@ import {Location, Query} from 'history';
 import {browserHistory} from 'react-router';
 
 import {t} from 'app/locale';
-import {Event, Organization} from 'app/types';
+import {Event, Organization, OrganizationSummary} from 'app/types';
 import {Client} from 'app/api';
 import {getTitle} from 'app/utils/events';
 import {getUtcDateString} from 'app/utils/dates';
@@ -453,6 +453,9 @@ export function getExpandedResults(
   return nextView;
 }
 
-export function generateDiscoverLandingPageRoute(orgSlug: string): string {
-  return `/organizations/${orgSlug}/discover/queries/`;
+export function getDiscoverLandingUrl(organization: OrganizationSummary): string {
+  if (organization.features.includes('discover-query')) {
+    return `/organizations/${organization.slug}/discover/queries/`;
+  }
+  return `/organizations/${organization.slug}/discover/results/`;
 }
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index db42820aeb..98fff7f43d 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -16,7 +16,11 @@ from sentry.utils.samples import load_data
 from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-FEATURE_NAMES = ["organizations:discover-basic", "organizations:transaction-events"]
+FEATURE_NAMES = [
+    "organizations:discover-basic",
+    "organizations:discover-query",
+    "organizations:transaction-events",
+]
 
 
 def all_events_query(**kwargs):
diff --git a/tests/js/spec/views/eventsV2/index.spec.jsx b/tests/js/spec/views/eventsV2/index.spec.jsx
index be932b11b0..35a982dae4 100644
--- a/tests/js/spec/views/eventsV2/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/index.spec.jsx
@@ -5,7 +5,7 @@ import {DiscoverLanding} from 'app/views/eventsV2/landing';
 
 describe('EventsV2 > Landing', function() {
   const eventTitle = 'Oh no something bad';
-  const features = ['discover-basic'];
+  const features = ['discover-basic', 'discover-query'];
 
   beforeEach(function() {
     MockApiClient.addMockResponse({
@@ -73,4 +73,18 @@ describe('EventsV2 > Landing', function() {
     const content = wrapper.find('SentryDocumentTitle');
     expect(content.text()).toContain('You need at least one project to use this view');
   });
+
+  it('denies access on missing feature', function() {
+    const wrapper = mountWithTheme(
+      <DiscoverLanding
+        organization={TestStubs.Organization()}
+        location={{query: {}}}
+        router={{}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    const content = wrapper.find('PageContent');
+    expect(content.text()).toContain("You don't have access to this feature");
+  });
 });
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 0a04b2d630..3040ff767e 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -10,7 +10,7 @@ import {
   decodeColumnOrder,
   pushEventViewToLocation,
   getExpandedResults,
-  generateDiscoverLandingPageRoute,
+  getDiscoverLandingUrl,
 } from 'app/views/eventsV2/utils';
 import {COL_WIDTH_UNDEFINED, COL_WIDTH_NUMBER} from 'app/components/gridEditable';
 
@@ -446,10 +446,14 @@ describe('getExpandedResults()', function() {
   });
 });
 
-describe('generateDiscoverLandingPageRoute', function() {
-  it('generateDiscoverLandingPageRoute', function() {
-    expect(generateDiscoverLandingPageRoute('sentry')).toBe(
-      '/organizations/sentry/discover/queries/'
-    );
+describe('getDiscoverLandingUrl', function() {
+  it('is correct for with discover-query and discover-basic features', function() {
+    const org = TestStubs.Organization({features: ['discover-query', 'discover-basic']});
+    expect(getDiscoverLandingUrl(org)).toBe('/organizations/org-slug/discover/queries/');
+  });
+
+  it('is correct for with only discover-basic feature', function() {
+    const org = TestStubs.Organization({features: ['discover-basic']});
+    expect(getDiscoverLandingUrl(org)).toBe('/organizations/org-slug/discover/results/');
   });
 });
diff --git a/tests/snuba/api/endpoints/test_discover_saved_queries.py b/tests/snuba/api/endpoints/test_discover_saved_queries.py
index c2619b35f6..b2722fc237 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_queries.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_queries.py
@@ -219,7 +219,7 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
 
 
 class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
-    feature_name = "organizations:discover-basic"
+    feature_name = "organizations:discover-query"
 
     def test_post_invalid_conditions(self):
         with self.feature(self.feature_name):
diff --git a/tests/snuba/api/endpoints/test_discover_saved_query_detail.py b/tests/snuba/api/endpoints/test_discover_saved_query_detail.py
index 5a02506485..012d5ace30 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_query_detail.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_query_detail.py
@@ -50,6 +50,20 @@ class DiscoverSavedQueryDetailTest(APITestCase, SnubaTestCase):
         assert response.data["conditions"] == []
         assert response.data["limit"] == 10
 
+    def test_get_discover_query_flag(self):
+        with self.feature("organizations:discover-query"):
+            url = reverse(
+                "sentry-api-0-discover-saved-query-detail", args=[self.org.slug, self.query_id]
+            )
+            response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert response.data["id"] == six.text_type(self.query_id)
+        assert set(response.data["projects"]) == set(self.project_ids)
+        assert response.data["fields"] == ["test"]
+        assert response.data["conditions"] == []
+        assert response.data["limit"] == 10
+
     def test_get_version(self):
         query = {"fields": ["event_id"], "query": "event.type:error", "limit": 10, "version": 2}
         model = DiscoverSavedQuery.objects.create(
