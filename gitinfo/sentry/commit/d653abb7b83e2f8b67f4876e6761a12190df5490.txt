commit d653abb7b83e2f8b67f4876e6761a12190df5490
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed Dec 19 16:48:50 2018 -0800

    ref(tsdb): Support multiple environments in tsdb.get_range (snuba backend) (#11106)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index c9089b490a..f3b5c0afb4 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -319,7 +319,7 @@ class StatsMixin(object):
             'start': start,
             'end': end,
             'rollup': resolution,
-            'environment_id': environment_id,
+            'environment_ids': environment_id and [environment_id],
         }
 
     def _parse_resolution(self, value):
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index d5b02863ae..0d02741787 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -216,7 +216,8 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
             user_reports = UserReport.objects.none()
 
         else:
-            get_range = functools.partial(tsdb.get_range, environment_id=environment_id)
+            get_range = functools.partial(tsdb.get_range,
+                                          environment_ids=environment_id and [environment_id])
             tags = tagstore.get_group_tag_keys(
                 group.project_id, group.id, environment_id, limit=100)
             if environment_id is None:
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 2da162bc28..c3aa1bf2c2 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -480,7 +480,7 @@ class StreamGroupSerializer(GroupSerializer):
                 stats = tsdb.get_range(
                     model=tsdb.models.group,
                     keys=group_ids,
-                    environment_id=environment and environment.id,
+                    environment_ids=environment and [environment.id],
                     **query_params
                 )
 
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 6917537f5e..a0d909fc36 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -125,7 +125,7 @@ class ProjectSerializer(Serializer):
                 end=now,
                 start=now - ((segments - 1) * interval),
                 rollup=int(interval.total_seconds()),
-                environment_id=self.environment_id,
+                environment_ids=self.environment_id and [self.environment_id],
             )
         else:
             stats = None
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index c4583d13ab..46d319ca97 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -323,7 +323,7 @@ class BaseTSDB(Service):
         """
         raise NotImplementedError
 
-    def get_range(self, model, keys, start, end, rollup=None, environment_id=None):
+    def get_range(self, model, keys, start, end, rollup=None, environment_ids=None):
         """
         To get a range of data for group ID=[1, 2, 3]:
 
@@ -337,7 +337,10 @@ class BaseTSDB(Service):
         raise NotImplementedError
 
     def get_sums(self, model, keys, start, end, rollup=None, environment_id=None):
-        range_set = self.get_range(model, keys, start, end, rollup, environment_id)
+        range_set = self.get_range(
+            model, keys, start, end, rollup,
+            environment_ids=[environment_id] if environment_id is not None else None
+        )
         sum_set = dict(
             (key, sum(p for _, p in points)) for (key, points) in six.iteritems(range_set)
         )
diff --git a/src/sentry/tsdb/dummy.py b/src/sentry/tsdb/dummy.py
index cf4e913833..362fa44361 100644
--- a/src/sentry/tsdb/dummy.py
+++ b/src/sentry/tsdb/dummy.py
@@ -30,8 +30,8 @@ class DummyTSDB(BaseTSDB):
             [None])
         self.validate_arguments(models, environment_ids)
 
-    def get_range(self, model, keys, start, end, rollup=None, environment_id=None):
-        self.validate_arguments([model], [environment_id])
+    def get_range(self, model, keys, start, end, rollup=None, environment_ids=None):
+        self.validate_arguments([model], environment_ids if environment_ids is not None else [None])
         _, series = self.get_optimal_rollup_series(start, end, rollup)
         return {k: [(ts, 0) for ts in series] for k in keys}
 
diff --git a/src/sentry/tsdb/inmemory.py b/src/sentry/tsdb/inmemory.py
index ac99893059..0c0ee808a1 100644
--- a/src/sentry/tsdb/inmemory.py
+++ b/src/sentry/tsdb/inmemory.py
@@ -73,8 +73,8 @@ class InMemoryTSDB(BaseTSDB):
                                 0,
                             )
 
-    def get_range(self, model, keys, start, end, rollup=None, environment_id=None):
-        self.validate_arguments([model], [environment_id])
+    def get_range(self, model, keys, start, end, rollup=None, environment_ids=None):
+        self.validate_arguments([model], environment_ids if environment_ids is not None else [None])
 
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
@@ -83,7 +83,11 @@ class InMemoryTSDB(BaseTSDB):
             norm_epoch = self.normalize_to_rollup(timestamp, rollup)
 
             for key in keys:
-                value = self.data[model][(key, environment_id)][norm_epoch]
+                if environment_ids is None:
+                    value = self.data[model][(key, None)][norm_epoch]
+                else:
+                    value = sum(int(self.data[model][(key, environment_id)][norm_epoch])
+                                for environment_id in environment_ids)
                 results.append((to_timestamp(timestamp), key, value))
 
         results_by_key = defaultdict(dict)
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index dbb97f32c9..3787af8830 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -242,7 +242,7 @@ class RedisTSDB(BaseTSDB):
                                 self.calculate_expiry(rollup, max_values, timestamp),
                             )
 
-    def get_range(self, model, keys, start, end, rollup=None, environment_id=None):
+    def get_range(self, model, keys, start, end, rollup=None, environment_ids=None):
         """
         To get a range of data for group ID=[1, 2, 3]:
 
@@ -251,6 +251,11 @@ class RedisTSDB(BaseTSDB):
         >>>          start=now - timedelta(days=1),
         >>>          end=now)
         """
+        # redis backend doesn't support multiple envs
+        if environment_ids is not None and len(environment_ids) > 1:
+            raise NotImplementedError
+        environment_id = environment_ids[0] if environment_ids is not None else None
+
         self.validate_arguments([model], [environment_id])
 
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
diff --git a/src/sentry/tsdb/snuba.py b/src/sentry/tsdb/snuba.py
index c0750471a8..48820b47d0 100644
--- a/src/sentry/tsdb/snuba.py
+++ b/src/sentry/tsdb/snuba.py
@@ -37,7 +37,7 @@ class SnubaTSDB(BaseTSDB):
     def __init__(self, **options):
         super(SnubaTSDB, self).__init__(**options)
 
-    def get_data(self, model, keys, start, end, rollup=None, environment_id=None,
+    def get_data(self, model, keys, start, end, rollup=None, environment_ids=None,
                  aggregation='count()', group_on_model=True, group_on_time=False):
         """
         Normalizes all the TSDB parameters and sends a query to snuba.
@@ -65,8 +65,8 @@ class SnubaTSDB(BaseTSDB):
 
         keys_map = dict(zip(model_columns, self.flatten_keys(keys)))
         keys_map = {k: v for k, v in six.iteritems(keys_map) if k is not None and v is not None}
-        if environment_id is not None:
-            keys_map['environment'] = [environment_id]
+        if environment_ids is not None:
+            keys_map['environment'] = environment_ids
 
         aggregations = [[aggregation, model_aggregate, 'aggregate']]
 
@@ -129,8 +129,8 @@ class SnubaTSDB(BaseTSDB):
                     else:
                         del result[rk]
 
-    def get_range(self, model, keys, start, end, rollup=None, environment_id=None):
-        result = self.get_data(model, keys, start, end, rollup, environment_id,
+    def get_range(self, model, keys, start, end, rollup=None, environment_ids=None):
+        result = self.get_data(model, keys, start, end, rollup, environment_ids,
                                aggregation='count()', group_on_time=True)
         # convert
         #    {group:{timestamp:count, ...}}
@@ -140,7 +140,8 @@ class SnubaTSDB(BaseTSDB):
 
     def get_distinct_counts_series(self, model, keys, start, end=None,
                                    rollup=None, environment_id=None):
-        result = self.get_data(model, keys, start, end, rollup, environment_id,
+        result = self.get_data(model, keys, start, end, rollup,
+                               [environment_id] if environment_id is not None else None,
                                aggregation='uniq', group_on_time=True)
         # convert
         #    {group:{timestamp:count, ...}}
@@ -150,18 +151,21 @@ class SnubaTSDB(BaseTSDB):
 
     def get_distinct_counts_totals(self, model, keys, start, end=None,
                                    rollup=None, environment_id=None):
-        return self.get_data(model, keys, start, end, rollup, environment_id,
+        return self.get_data(model, keys, start, end, rollup,
+                             [environment_id] if environment_id is not None else None,
                              aggregation='uniq')
 
     def get_distinct_counts_union(self, model, keys, start, end=None,
                                   rollup=None, environment_id=None):
-        return self.get_data(model, keys, start, end, rollup, environment_id,
+        return self.get_data(model, keys, start, end, rollup,
+                             [environment_id] if environment_id is not None else None,
                              aggregation='uniq', group_on_model=False)
 
     def get_most_frequent(self, model, keys, start, end=None,
                           rollup=None, limit=10, environment_id=None):
         aggregation = u'topK({})'.format(limit)
-        result = self.get_data(model, keys, start, end, rollup, environment_id,
+        result = self.get_data(model, keys, start, end, rollup,
+                               [environment_id] if environment_id is not None else None,
                                aggregation=aggregation)
         # convert
         #    {group:[top1, ...]}
@@ -176,7 +180,8 @@ class SnubaTSDB(BaseTSDB):
     def get_most_frequent_series(self, model, keys, start, end=None,
                                  rollup=None, limit=10, environment_id=None):
         aggregation = u'topK({})'.format(limit)
-        result = self.get_data(model, keys, start, end, rollup, environment_id,
+        result = self.get_data(model, keys, start, end, rollup,
+                               [environment_id] if environment_id is not None else None,
                                aggregation=aggregation, group_on_time=True)
         # convert
         #    {group:{timestamp:[top1, ...]}}
@@ -192,7 +197,8 @@ class SnubaTSDB(BaseTSDB):
 
     def get_frequency_series(self, model, items, start, end=None,
                              rollup=None, environment_id=None):
-        result = self.get_data(model, items, start, end, rollup, environment_id,
+        result = self.get_data(model, items, start, end, rollup,
+                               [environment_id] if environment_id is not None else None,
                                aggregation='count()', group_on_time=True)
         # convert
         #    {group:{timestamp:{agg:count}}}
@@ -201,7 +207,8 @@ class SnubaTSDB(BaseTSDB):
         return {k: sorted(result[k].items()) for k in result}
 
     def get_frequency_totals(self, model, items, start, end=None, rollup=None, environment_id=None):
-        return self.get_data(model, items, start, end, rollup, environment_id,
+        return self.get_data(model, items, start, end, rollup,
+                             [environment_id] if environment_id is not None else None,
                              aggregation='count()')
 
     def flatten_keys(self, items):
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 985fbe6f16..f9953da04f 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -97,7 +97,7 @@ class GroupDetailsTest(APITestCase):
             assert response.status_code == 200
             assert get_range.call_count == 2
             for args, kwargs in get_range.call_args_list:
-                assert kwargs['environment_id'] == environment.id
+                assert kwargs['environment_ids'] == [environment.id]
 
         with mock.patch(
                 'sentry.api.endpoints.group_details.tsdb.make_series',
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index 9881a9ff6f..1fb6c52e7a 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -310,7 +310,7 @@ class StreamGroupSerializerTestCase(TestCase):
             )
             assert get_range.call_count == 1
             for args, kwargs in get_range.call_args_list:
-                assert kwargs['environment_id'] == environment.id
+                assert kwargs['environment_ids'] == [environment.id]
 
         def get_invalid_environment():
             raise Environment.DoesNotExist()
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index a40b60116d..73b16f77f1 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -586,7 +586,7 @@ class UnmergeTestCase(TestCase):
             now - timedelta(seconds=rollup_duration),
             now + shift(15),
             rollup_duration,
-            environment_id=production_environment.id,
+            environment_ids=[production_environment.id],
         )
 
         def get_expected_series_values(rollup, events, function=None):
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index 0e21f021f9..e9c4dda832 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -120,7 +120,7 @@ class RedisTSDBTest(TestCase):
             ],
         }
 
-        results = self.db.get_range(TSDBModel.project, [1, 2], dts[0], dts[-1], environment_id=1)
+        results = self.db.get_range(TSDBModel.project, [1, 2], dts[0], dts[-1], environment_ids=[1])
         assert results == {
             1: [
                 (timestamp(dts[0]), 0),
@@ -176,7 +176,7 @@ class RedisTSDBTest(TestCase):
             ],
         }
 
-        results = self.db.get_range(TSDBModel.project, [1, 2], dts[0], dts[-1], environment_id=1)
+        results = self.db.get_range(TSDBModel.project, [1, 2], dts[0], dts[-1], environment_ids=[1])
         assert results == {
             1: [
                 (timestamp(dts[0]), 0),
diff --git a/tests/snuba/tsdb/test_tsdb_backend.py b/tests/snuba/tsdb/test_tsdb_backend.py
index 23dcfb8f9e..a5c2b6cc69 100644
--- a/tests/snuba/tsdb/test_tsdb_backend.py
+++ b/tests/snuba/tsdb/test_tsdb_backend.py
@@ -67,6 +67,7 @@ class SnubaTSDBTest(TestCase):
         self.proj1 = self.create_project()
         self.proj1env1 = self.create_environment(project=self.proj1, name='test')
         self.proj1env2 = self.create_environment(project=self.proj1, name='dev')
+        self.proj1env3 = self.create_environment(project=self.proj1, name='staging')
         self.proj1defaultenv = self.create_environment(project=self.proj1, name='')
 
         self.proj1group1 = self.create_group(self.proj1)
@@ -120,7 +121,7 @@ class SnubaTSDBTest(TestCase):
                     'foo': 'bar',
                     'baz': 'quux',
                     # Switch every 2 hours
-                    'environment': [self.proj1env1.name, None][(r // 7200) % 2],
+                    'environment': [self.proj1env1.name, None][(r // 7200) % 3],
                     'sentry:user': u'id:user{}'.format(r // 3300),
                     'sentry:release': six.text_type(r // 3600) * 10,  # 1 per hour
                 },
@@ -225,7 +226,7 @@ class SnubaTSDBTest(TestCase):
             [self.proj1.id],
             dts[0], dts[-1],
             rollup=3600,
-            environment_id=self.proj1env1.id
+            environment_ids=[self.proj1env1.id]
         ) == {
             self.proj1.id: [
                 (timestamp(dts[0]), 6),
@@ -241,7 +242,7 @@ class SnubaTSDBTest(TestCase):
             [self.proj1.id],
             dts[0], dts[-1],
             rollup=3600,
-            environment_id=self.proj1env2.id
+            environment_ids=[self.proj1env2.id],
         ) == {
             self.proj1.id: [
                 (timestamp(dts[0]), 0),
@@ -257,7 +258,7 @@ class SnubaTSDBTest(TestCase):
             [self.proj1.id],
             dts[0], dts[-1],
             rollup=3600,
-            environment_id=self.proj1defaultenv.id
+            environment_ids=[self.proj1defaultenv.id],
         ) == {
             self.proj1.id: [
                 (timestamp(dts[0]), 0),
