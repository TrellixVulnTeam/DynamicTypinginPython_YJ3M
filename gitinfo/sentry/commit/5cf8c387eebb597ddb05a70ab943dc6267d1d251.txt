commit 5cf8c387eebb597ddb05a70ab943dc6267d1d251
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Dec 2 09:29:02 2019 -0500

    fix(discover2): Properly sync minigraphs of pre-built queries with the global selection header (#15868)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 69b1e83ca6..368e3c2bb6 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -7,7 +7,6 @@ import omit from 'lodash/omit';
 import moment from 'moment';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
-import {SavedQuery as LegacySavedQuery} from 'app/views/discover/types';
 import {SavedQuery, NewQuery} from 'app/types';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 
@@ -261,28 +260,10 @@ const decodeScalar = (
   return isString(unwrapped) ? unwrapped : undefined;
 };
 
-function isLegacySavedQuery(
-  query: LegacySavedQuery | NewQuery
-): query is LegacySavedQuery {
-  return (query as LegacySavedQuery).conditions !== undefined;
-}
-
-const queryStringFromSavedQuery = (saved: NewQuery | LegacySavedQuery): string => {
-  if (!isLegacySavedQuery(saved) && saved.query) {
+const queryStringFromSavedQuery = (saved: NewQuery | SavedQuery): string => {
+  if (saved.query) {
     return saved.query || '';
   }
-  if (isLegacySavedQuery(saved) && saved.conditions) {
-    const conditions = saved.conditions.map(item => {
-      const [field, op, value] = item;
-      let operator = op;
-      // TODO handle all the other operator types
-      if (operator === '=') {
-        operator = '';
-      }
-      return field + ':' + operator + value;
-    });
-    return conditions.join(' ');
-  }
   return '';
 };
 
@@ -377,37 +358,43 @@ class EventView {
     });
   }
 
-  static fromSavedQueryWithLocation(
-    saved: NewQuery | LegacySavedQuery,
-    location: Location
-  ): EventView {
+  static fromNewQueryWithLocation(newQuery: NewQuery, location: Location): EventView {
     const query = location.query;
 
-    saved = {
-      ...saved,
-      start: saved.start || decodeScalar(query.start),
-      end: saved.end || decodeScalar(query.end),
-      range: saved.range || decodeScalar(query.statsPeriod),
+    // apply global selection header values from location whenever possible
+
+    const environment: string[] =
+      Array.isArray(newQuery.environment) && newQuery.environment.length > 0
+        ? newQuery.environment
+        : collectQueryStringByKey(location.query, 'environment');
+
+    const project: number[] =
+      Array.isArray(newQuery.projects) && newQuery.projects.length > 0
+        ? newQuery.projects
+        : decodeProjects(location);
+
+    const saved: NewQuery = {
+      ...newQuery,
+
+      environment,
+      projects: project,
+
+      // datetime selection
+
+      start: newQuery.start || decodeScalar(query.start),
+      end: newQuery.end || decodeScalar(query.end),
+      range: newQuery.range || decodeScalar(query.statsPeriod),
     };
 
     return EventView.fromSavedQuery(saved);
   }
 
-  static fromSavedQuery(saved: NewQuery | LegacySavedQuery): EventView {
-    let fields, yAxis;
-    if (isLegacySavedQuery(saved)) {
-      fields = saved.fields.map(field => {
-        return {field, title: field};
-      });
-      yAxis = undefined;
-    } else {
-      fields = saved.fields.map((field, i) => {
-        const title =
-          saved.fieldnames && saved.fieldnames[i] ? saved.fieldnames[i] : field;
-        return {field, title};
-      });
-      yAxis = saved.yAxis;
-    }
+  static fromSavedQuery(saved: NewQuery | SavedQuery): EventView {
+    const fields = saved.fields.map((field, i) => {
+      const title = saved.fieldnames && saved.fieldnames[i] ? saved.fieldnames[i] : field;
+      return {field, title};
+    });
+    const yAxis = saved.yAxis;
 
     // normalize datetime selection
     const {start, end, statsPeriod} = getParams({
@@ -428,13 +415,13 @@ class EventView {
       sorts: fromSorts(saved.orderby),
       tags: collectQueryStringByKey(
         {
-          tags: (saved as SavedQuery).tags as string[],
+          tags: saved.tags as string[],
         },
         'tags'
       ),
       environment: collectQueryStringByKey(
         {
-          environment: (saved as SavedQuery).environment as string[],
+          environment: saved.environment as string[],
         },
         'environment'
       ),
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 7e3baf810e..7111acc9f8 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -145,7 +145,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
 
     const {location} = this.props;
 
-    const eventView = EventView.fromSavedQueryWithLocation(DEFAULT_EVENT_VIEW, location);
+    const eventView = EventView.fromNewQueryWithLocation(DEFAULT_EVENT_VIEW, location);
 
     const to = {
       pathname: location.pathname,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
index 9b149b3113..a9ee62362b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
@@ -52,12 +52,22 @@ class MiniGraph extends React.Component<Props> {
       start,
       end,
       period,
+      project: eventView.project,
+      environment: eventView.environment,
     };
   }
 
   render() {
-    const {eventView, api} = this.props;
-    const {query, start, end, period, organization} = this.getRefreshProps(this.props);
+    const {api} = this.props;
+    const {
+      query,
+      start,
+      end,
+      period,
+      organization,
+      project,
+      environment,
+    } = this.getRefreshProps(this.props);
 
     return (
       <EventsRequest
@@ -68,8 +78,8 @@ class MiniGraph extends React.Component<Props> {
         end={end}
         period={period}
         interval={getInterval({start, end, period}, true)}
-        project={eventView.project as number[]}
-        environment={eventView.environment as string[]}
+        project={project as number[]}
+        environment={environment as string[]}
         includePrevious={false}
       >
         {({loading, timeseriesData}) => {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index 69fec19dee..a070d313f2 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -89,7 +89,7 @@ class QueryList extends React.Component<Props> {
     const views = getPrebuiltQueries(organization);
 
     const list = views.map((view, index) => {
-      const eventView = EventView.fromSavedQueryWithLocation(view, location);
+      const eventView = EventView.fromNewQueryWithLocation(view, location);
       const recentTimeline = t('Last ') + eventView.statsPeriod;
       const customTimeline =
         moment(eventView.start).format('MMM D, YYYY h:mm A') +
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index e90ea84542..70bf2cc8ae 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -57,7 +57,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
     const {location, eventView} = this.props;
 
     if (!eventView.isValid()) {
-      const nextEventView = EventView.fromSavedQueryWithLocation(
+      const nextEventView = EventView.fromNewQueryWithLocation(
         DEFAULT_EVENT_VIEW,
         location
       );
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index f3c52552c2..dceafd2172 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -174,12 +174,12 @@ describe('EventView.fromLocation()', function() {
 });
 
 describe('EventView.fromSavedQuery()', function() {
-  it('maps basic properties of legacy query', function() {
+  it('maps basic properties of saved query', function() {
     const saved = {
       id: '42',
       name: 'best query',
       fields: ['count()', 'id'],
-      conditions: [['event.type', '=', 'transaction']],
+      query: 'event.type:transaction',
       projects: [123],
       range: '14d',
       start: '2019-10-01T00:00:00',
@@ -259,15 +259,6 @@ describe('EventView.fromSavedQuery()', function() {
     expect(eventView).toMatchObject(expected);
   });
 
-  it('maps equality conditions', function() {
-    const saved = {
-      fields: ['count()', 'id'],
-      conditions: [['event.type', '=', 'error']],
-    };
-    const eventView = EventView.fromSavedQuery(saved);
-    expect(eventView.query).toEqual('event.type:error');
-  });
-
   it('maps properties from v2 saved query', function() {
     const saved = {
       name: 'best query',
@@ -368,6 +359,202 @@ describe('EventView.fromSavedQuery()', function() {
   });
 });
 
+describe('EventView.fromNewQueryWithLocation()', function() {
+  const prebuiltQuery = {
+    id: undefined,
+    name: 'All Events',
+    query: '',
+    projects: [],
+    fields: ['title', 'event.type', 'project', 'user', 'timestamp'],
+    fieldnames: ['title', 'type', 'project', 'user', 'time'],
+    orderby: '-timestamp',
+    version: 2,
+    tags: [
+      'event.type',
+      'release',
+      'project.name',
+      'user.email',
+      'user.ip',
+      'environment',
+    ],
+  };
+
+  it('maps basic properties of a prebuilt query', function() {
+    const location = {
+      query: {
+        statsPeriod: '99d',
+      },
+    };
+
+    const eventView = EventView.fromNewQueryWithLocation(prebuiltQuery, location);
+
+    expect(eventView).toMatchObject({
+      id: undefined,
+      name: 'All Events',
+      fields: [
+        {field: 'title', title: 'title'},
+        {field: 'event.type', title: 'type'},
+        {field: 'project', title: 'project'},
+        {field: 'user', title: 'user'},
+        {field: 'timestamp', title: 'time'},
+      ],
+      sorts: [{field: 'timestamp', kind: 'desc'}],
+      tags: [
+        'event.type',
+        'release',
+        'project.name',
+        'user.email',
+        'user.ip',
+        'environment',
+      ],
+      query: '',
+      project: [],
+      start: undefined,
+      end: undefined,
+      // statsPeriod has precedence
+      statsPeriod: '99d',
+      environment: [],
+      yAxis: undefined,
+    });
+  });
+
+  it('merges global selection values', function() {
+    const location = {
+      query: {
+        statsPeriod: '99d',
+        project: ['456'],
+        environment: ['prod'],
+      },
+    };
+
+    const eventView = EventView.fromNewQueryWithLocation(prebuiltQuery, location);
+
+    expect(eventView).toMatchObject({
+      id: undefined,
+      name: 'All Events',
+      fields: [
+        {field: 'title', title: 'title'},
+        {field: 'event.type', title: 'type'},
+        {field: 'project', title: 'project'},
+        {field: 'user', title: 'user'},
+        {field: 'timestamp', title: 'time'},
+      ],
+      sorts: [{field: 'timestamp', kind: 'desc'}],
+      tags: [
+        'event.type',
+        'release',
+        'project.name',
+        'user.email',
+        'user.ip',
+        'environment',
+      ],
+      query: '',
+      project: [456],
+      start: undefined,
+      end: undefined,
+      statsPeriod: '99d',
+      environment: ['prod'],
+      yAxis: undefined,
+    });
+  });
+
+  it('new query takes precedence over global selection values', function() {
+    const location = {
+      query: {
+        statsPeriod: '99d',
+        project: ['456'],
+        environment: ['prod'],
+      },
+    };
+
+    const prebuiltQuery2 = {
+      ...prebuiltQuery,
+      range: '42d',
+      projects: [987],
+      environment: ['staging'],
+    };
+
+    const eventView = EventView.fromNewQueryWithLocation(prebuiltQuery2, location);
+
+    expect(eventView).toMatchObject({
+      id: undefined,
+      name: 'All Events',
+      fields: [
+        {field: 'title', title: 'title'},
+        {field: 'event.type', title: 'type'},
+        {field: 'project', title: 'project'},
+        {field: 'user', title: 'user'},
+        {field: 'timestamp', title: 'time'},
+      ],
+      sorts: [{field: 'timestamp', kind: 'desc'}],
+      tags: [
+        'event.type',
+        'release',
+        'project.name',
+        'user.email',
+        'user.ip',
+        'environment',
+      ],
+      query: '',
+      project: [987],
+      start: undefined,
+      end: undefined,
+      statsPeriod: '42d',
+      environment: ['staging'],
+      yAxis: undefined,
+    });
+
+    // also test start and end
+
+    const location2 = {
+      query: {
+        start: '2019-10-01T00:00:00',
+        end: '2019-10-02T00:00:00',
+        project: ['456'],
+        environment: ['prod'],
+      },
+    };
+
+    const prebuiltQuery3 = {
+      ...prebuiltQuery,
+      start: '2019-10-01T00:00:00',
+      end: '2019-10-02T00:00:00',
+      projects: [987],
+      environment: ['staging'],
+    };
+
+    const eventView2 = EventView.fromNewQueryWithLocation(prebuiltQuery3, location2);
+
+    expect(eventView2).toMatchObject({
+      id: undefined,
+      name: 'All Events',
+      fields: [
+        {field: 'title', title: 'title'},
+        {field: 'event.type', title: 'type'},
+        {field: 'project', title: 'project'},
+        {field: 'user', title: 'user'},
+        {field: 'timestamp', title: 'time'},
+      ],
+      sorts: [{field: 'timestamp', kind: 'desc'}],
+      tags: [
+        'event.type',
+        'release',
+        'project.name',
+        'user.email',
+        'user.ip',
+        'environment',
+      ],
+      query: '',
+      project: [987],
+      start: '2019-10-01T00:00:00.000',
+      end: '2019-10-02T00:00:00.000',
+      statsPeriod: undefined,
+      environment: ['staging'],
+      yAxis: undefined,
+    });
+  });
+});
+
 describe('EventView.generateQueryStringObject()', function() {
   it('skips empty values', function() {
     const eventView = new EventView({
