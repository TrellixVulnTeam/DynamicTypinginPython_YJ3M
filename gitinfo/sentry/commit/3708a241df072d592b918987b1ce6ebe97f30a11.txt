commit 3708a241df072d592b918987b1ce6ebe97f30a11
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 13 16:09:40 2015 -0700

    Work towards new auth modals

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 87f58e89de..89778962ca 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -17,6 +17,7 @@ from sentry.models import (
     OrganizationMember, User
 )
 from sentry.utils.auth import get_login_redirect
+from sentry.web.helpers import render_to_response
 
 from . import manager
 
@@ -133,10 +134,6 @@ class AuthHelper(object):
         self.request.session['auth'] = session
         self.request.session.is_modified = True
 
-    def get_current_view(self):
-        idx = self.request.session['auth']['idx']
-        return self.pipeline[idx]
-
     def get_redirect_url(self):
         return self.request.build_absolute_uri(reverse('sentry-auth-sso'))
 
@@ -145,19 +142,24 @@ class AuthHelper(object):
             del self.request.session['auth']
             self.request.session.is_modified = True
 
-    def next_step(self):
-        # TODO: this needs to somehow embed the next step
-        # (it shouldnt force an exteneral redirect)
+    def current_step(self):
+        """
+        Render the current step.
+        """
         session = self.request.session['auth']
-        session['idx'] += 1
-        self.request.session.is_modified = True
-
         idx = session['idx']
         if idx == len(self.pipeline):
             return self.finish_pipeline()
-
         return self.pipeline[idx].dispatch(self.request, self)
 
+    def next_step(self):
+        """
+        Render the next step.
+        """
+        self.request.session['auth']['idx'] += 1
+        self.request.session.is_modified = True
+        return self.current_step()
+
     def finish_pipeline(self):
         session = self.request.session['auth']
         state = session['state']
@@ -172,8 +174,6 @@ class AuthHelper(object):
             # create identity and authenticate the user
             response = self._finish_link_pipeline(identity)
 
-        self.clear_session()
-
         return response
 
     @transaction.atomic
@@ -274,6 +274,16 @@ class AuthHelper(object):
         their account.
         """
         auth_provider = self.auth_provider
+        request = self.request
+
+        if request.POST.get('op') != 'confirm':
+            if request.user.is_authenticated():
+                return self.respond('sentry/auth-confirm-link.html', {
+                    'identity': identity,
+                })
+            return self.respond('sentry/auth-confirm-identity.html', {
+                'identity': identity,
+            })
 
         try:
             auth_identity = AuthIdentity.objects.get(
@@ -335,6 +345,8 @@ class AuthHelper(object):
 
         login(self.request, user)
 
+        self.clear_session()
+
         return HttpResponseRedirect(get_login_redirect(self.request))
 
     @transaction.atomic
@@ -390,6 +402,8 @@ class AuthHelper(object):
             OK_SETUP_SSO,
         )
 
+        self.clear_session()
+
         next_uri = reverse('sentry-organization-auth-settings', args=[
             self.organization.slug,
         ])
@@ -408,13 +422,30 @@ class AuthHelper(object):
         if request.user.id != request.session['auth']['uid']:
             return self.error(ERR_UID_MISMATCH)
 
+        if request.POST.get('op') != 'confirm':
+            return self.respond('sentry/auth-confirm-link.html', {
+                'identity': identity,
+            })
+
         self._handle_attach_identity(identity)
 
+        self.clear_session()
+
         next_uri = reverse('sentry-organization-home', args=[
             self.organization.slug,
         ])
         return HttpResponseRedirect(next_uri)
 
+    def respond(self, template, context=None, status=200):
+        default_context = {
+            'organization': self.organization,
+        }
+        if context:
+            default_context.update(context)
+
+        return render_to_response(template, default_context, self.request,
+                                  status=status)
+
     def error(self, message):
         session = self.request.session['auth']
         if session['flow'] == self.FLOW_LOGIN:
diff --git a/src/sentry/templates/sentry/auth-confirm-identity.html b/src/sentry/templates/sentry/auth-confirm-identity.html
new file mode 100644
index 0000000000..3c73ad1432
--- /dev/null
+++ b/src/sentry/templates/sentry/auth-confirm-identity.html
@@ -0,0 +1,35 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block wrapperclass %}windowed-small org-login{% endblock %}
+
+{% block title %}{% trans "Confirm Identity" %} | {{ block.super }}{% endblock %}
+
+{% block account_nav %}{% endblock%}
+
+{% block main %}
+  <section class="body org-login">
+    <form class="form-stacked" action="" method="post">
+      {% csrf_token %}
+
+      <input type="hidden" name="op" value="confirm" />
+
+      <img src="{% url 'sentry-media' "sentry" "images/default-organization-logo.png" %}" class="org-avatar">
+
+      <h3>
+        {{ organization.name }}
+      </h3>
+
+      <p>A new account is being created for you:</p>
+
+      <button type="submit" class="btn btn-default">
+        Confirm
+      </button>
+    </form>
+  </section>
+{% endblock %}
+
+{% block footer %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/auth-confirm-link.html b/src/sentry/templates/sentry/auth-confirm-link.html
new file mode 100644
index 0000000000..b89fd9e515
--- /dev/null
+++ b/src/sentry/templates/sentry/auth-confirm-link.html
@@ -0,0 +1,35 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block wrapperclass %}windowed-small org-login{% endblock %}
+
+{% block title %}{% trans "Confirm Identity" %} | {{ block.super }}{% endblock %}
+
+{% block account_nav %}{% endblock%}
+
+{% block main %}
+  <section class="body org-login">
+    <form class="form-stacked" action="" method="post">
+      {% csrf_token %}
+
+      <input type="hidden" name="op" value="confirm" />
+
+      <img src="{% url 'sentry-media' "sentry" "images/default-organization-logo.png" %}" class="org-avatar">
+
+      <h3>
+        {{ organization.name }}
+      </h3>
+
+      <p>A new link is being added to your account:</p>
+
+      <button type="submit" class="btn btn-default">
+        Confirm
+      </button>
+    </form>
+  </section>
+{% endblock %}
+
+{% block footer %}
+{% endblock %}
diff --git a/src/sentry/web/frontend/auth_provider_login.py b/src/sentry/web/frontend/auth_provider_login.py
index 089d5aac1e..5cb47c7b60 100644
--- a/src/sentry/web/frontend/auth_provider_login.py
+++ b/src/sentry/web/frontend/auth_provider_login.py
@@ -16,4 +16,4 @@ class AuthProviderLoginView(BaseView):
 
         if not helper.pipeline_is_valid():
             return helper.error('Something unexpected happened during authentication.')
-        return helper.next_step()
+        return helper.current_step()
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index cdfdd6120e..e855ec9d14 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -6,6 +6,7 @@ from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
 from sentry.testutils import AuthProviderTestCase
 
 
+# TODO(dcramer): this is an integration test
 class OrganizationAuthSettingsTest(AuthProviderTestCase):
     def test_renders_basic_login_form(self):
         organization = self.create_organization(name='foo', owner=self.user)
@@ -62,8 +63,15 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content
 
+        path = reverse('sentry-auth-sso')
+
         resp = self.client.post(path, {'email': 'foo@example.com'})
 
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-identity.html')
+        assert resp.status_code == 200
+
+        resp = self.client.post(path, {'op': 'confirm'})
+
         assert resp.status_code == 302
 
         auth_identity = AuthIdentity.objects.get(
