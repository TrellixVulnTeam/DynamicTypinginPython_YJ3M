commit c8b271b446d216930a0e35b48bb57a1e6dad15fd
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Aug 20 18:21:21 2015 -0700

    Don't ask confirm dialog when just 1 "all" selected

diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index a63b626040..614a048b33 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -75,6 +75,22 @@ var ActionLink = React.createClass({
     );
   },
 
+  shouldConfirm(numSelectedItems) {
+    // By default, should confirm ...
+    var shouldConfirm = true;
+
+    // Unless `neverConfirm` is true, then return false
+    if (this.props.neverConfirm === true) {
+      shouldConfirm = false;
+
+    // Unless `onlyIfBulk` is true, then return false if all items are not selected
+    } else if (this.props.onlyIfBulk === true && (!this.props.selectAllActive || numSelectedItems === 1)) {
+      shouldConfirm = false;
+    }
+
+    return shouldConfirm;
+  },
+
   renderOverlay() {
     if (!this.state.isModalOpen) {
       return null;
@@ -85,17 +101,7 @@ var ActionLink = React.createClass({
       throw new Error('ActionModal rendered without any selected groups');
     }
 
-    var shouldConfirm = true;
-    // if skipConfirm is set we never actually show the modal
-    if (this.props.neverConfirm === true) {
-      shouldConfirm = false;
-    // if onlyIfBulk is set and we've selected a single item, we skip
-    // showing the modal
-    } else if (this.props.onlyIfBulk === true && !this.props.selectAllActive) {
-      shouldConfirm = false;
-    }
-
-    if (!shouldConfirm) {
+    if (!this.shouldConfirm(selectedItemIds.size)) {
       this.handleActionSelected();
       this.state.isModalOpen = false;
       return null;
diff --git a/tests/js/spec/views/stream/actionLink.spec.jsx b/tests/js/spec/views/stream/actionLink.spec.jsx
new file mode 100644
index 0000000000..959b2e8bf3
--- /dev/null
+++ b/tests/js/spec/views/stream/actionLink.spec.jsx
@@ -0,0 +1,58 @@
+/*jshint expr: true*/
+var React = require("react/addons");
+var TestUtils = React.addons.TestUtils;
+
+var api = require("app/api");
+var stubReactComponents = require("../../../helpers/stubReactComponent");
+
+var ActionLink = require("app/views/stream/actionLink");
+import Modal from "react-bootstrap/Modal";
+
+describe("ActionLink", function() {
+
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+
+    this.stubbedApiRequest = this.sandbox.stub(api, "request");
+    stubReactComponents(this.sandbox, [Modal]);
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe("shouldConfirm()", function() {
+    it('should always return true by default', function () {
+      var actionLink = TestUtils.renderIntoDocument(<ActionLink/>);
+
+      expect(actionLink.shouldConfirm(0)).to.be.true;
+      expect(actionLink.shouldConfirm(1)).to.be.true;
+      expect(actionLink.shouldConfirm(25)).to.be.true;
+    });
+
+    it('should return false when props.neverConfirm is true', function () {
+      var actionLink = TestUtils.renderIntoDocument(<ActionLink neverConfirm={true}/>);
+
+      expect(actionLink.shouldConfirm(0)).to.be.false;
+      expect(actionLink.shouldConfirm(1)).to.be.false;
+      expect(actionLink.shouldConfirm(25)).to.be.false;
+    });
+
+
+    it('should return (mostly) true when props.onlyIfBulk is true and all are selected', function () {
+      var actionLink = TestUtils.renderIntoDocument(<ActionLink onlyIfBulk={true} selectAllActive={true}/>);
+
+      expect(actionLink.shouldConfirm(1)).to.be.false; // EDGE CASE: if just 1, shouldn't confirm even if "all" selected
+      expect(actionLink.shouldConfirm(2)).to.be.true;
+      expect(actionLink.shouldConfirm(25)).to.be.true;
+    });
+
+    it('should return false when props.onlyIfBulk is true and not all are selected', function () {
+      var actionLink = TestUtils.renderIntoDocument(<ActionLink onlyIfBulk={true} selectAllActive={false}/>);
+
+      expect(actionLink.shouldConfirm(1)).to.be.false;
+      expect(actionLink.shouldConfirm(2)).to.be.false;
+      expect(actionLink.shouldConfirm(25)).to.be.false;
+    })
+  });
+});
