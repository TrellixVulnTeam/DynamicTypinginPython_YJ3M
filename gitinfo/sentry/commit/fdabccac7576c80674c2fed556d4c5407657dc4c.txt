commit fdabccac7576c80674c2fed556d4c5407657dc4c
Author: Matej Minar <matej.minar@sentry.io>
Date:   Mon Jan 27 09:34:40 2020 +0100

    feat(health): Adds UI for health list page (#16486)
    
    * feat(ui): Adds Health project feature flag, menu item, sreen
    
    * feat(ui): Project health dummy detail, refactored listing
    
    * removed trailing space in translation
    
    * feat(health): Adds UI for health list page
    
    * feat(health): Better view on smaller screens
    
    * test(health): Adds percy snapshot for Health list
    
    * deleted old file after merger
    
    * few tests, more after finished api
    
    * tests
    
    * ref(health): Adds context to TODOs, removes styled prefix, theme fontSize
    
    * feat(health): Adds disclaimer that this is WIP
    
    * ref(health): Renamed to Realeases v2

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 63a056b76a..0d7637fae9 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -816,8 +816,8 @@ SENTRY_FEATURES = {
     "organizations:tweak-grouping-config": True,
     # Lets organizations manage grouping configs
     "organizations:set-grouping-config": False,
-    # Enable health feature
-    "organizations:health": False,
+    # Enable Releases v2 feature
+    "organizations:releases-v2": False,
     # Enable incidents feature
     "organizations:incidents": False,
     # Enable integration functionality to create and link groups to issues on
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 6c0d8c269f..6d9ba7a995 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -66,7 +66,7 @@ default_manager.add("organizations:event-attachments", OrganizationFeature)  # N
 default_manager.add("organizations:symbol-sources", OrganizationFeature)  # NOQA
 default_manager.add("organizations:custom-symbol-sources", OrganizationFeature)  # NOQA
 default_manager.add("organizations:global-views", OrganizationFeature)  # NOQA
-default_manager.add("organizations:health", OrganizationFeature)  # NOQA
+default_manager.add("organizations:releases-v2", OrganizationFeature)  # NOQA
 default_manager.add("organizations:incidents", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-issue-basic", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-issue-sync", OrganizationFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index bd3b02582b..1fcb47c7e7 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -165,7 +165,7 @@ class Sidebar extends React.Component {
       'releases',
       'user-feedback',
       'eventsv2',
-      'health',
+      'releasesv2',
     ].map(route => `/organizations/${this.props.organization.slug}/${route}/`);
 
     // Only keep the querystring if the current route matches one of the above
@@ -386,19 +386,19 @@ class Sidebar extends React.Component {
                       id="monitors"
                     />
                   </Feature>
-                  <Feature features={['health']} organization={organization}>
+                  <Feature features={['releases-v2']} organization={organization}>
                     <SidebarItem
                       {...sidebarItemProps}
                       onClick={(_id, evt) =>
                         this.navigateWithGlobalSelection(
-                          `/organizations/${organization.slug}/health/`,
+                          `/organizations/${organization.slug}/releases-v2/`,
                           evt
                         )
                       }
-                      icon={<InlineSvg src="icon-health" />} // this needs to have different icon, because health is already taken (Dashboards)
-                      label={t('Health')}
-                      to={`/organizations/${organization.slug}/health/`}
-                      id="health"
+                      icon={<InlineSvg src="icon-releases" />}
+                      label={t('Releases v2')}
+                      to={`/organizations/${organization.slug}/releases-v2/`}
+                      id="releasesv2"
                     />
                   </Feature>
                 </SidebarSection>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c24011eb37..041ef98052 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1459,22 +1459,26 @@ function routes() {
             />
           </Route>
           <Route
-            path="/organizations/:orgId/health/"
+            path="/organizations/:orgId/releases-v2/"
             componentPromise={() =>
-              import(/* webpackChunkName: "HealthContainer" */ 'app/views/health')
+              import(/* webpackChunkName: "ReleasesV2Container" */ 'app/views/releasesV2')
             }
             component={errorHandler(LazyLoad)}
           >
             <IndexRoute
               componentPromise={() =>
-                import(/* webpackChunkName: "HealthLanding" */ 'app/views/health/landing')
+                import(
+                  /* webpackChunkName: "ReleasesV2List" */ 'app/views/releasesV2/list'
+                )
               }
               component={errorHandler(LazyLoad)}
             />
             <Route
-              path=":healthSlug/"
+              path=":releaseSlug/"
               componentPromise={() =>
-                import(/* webpackChunkName: "HealthDetail" */ 'app/views/health/detail')
+                import(
+                  /* webpackChunkName: "ReleasesV2Detail" */ 'app/views/releasesV2/detail'
+                )
               }
               component={errorHandler(LazyLoad)}
             />
diff --git a/src/sentry/static/sentry/app/views/health/landing.tsx b/src/sentry/static/sentry/app/views/health/landing.tsx
deleted file mode 100644
index a374cd2c67..0000000000
--- a/src/sentry/static/sentry/app/views/health/landing.tsx
+++ /dev/null
@@ -1,158 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-import * as ReactRouter from 'react-router';
-import {Params} from 'react-router/lib/Router';
-import {Location} from 'history';
-
-import {t} from 'app/locale';
-import {Organization} from 'app/types';
-import localStorage from 'app/utils/localStorage';
-import AsyncView from 'app/views/asyncView';
-import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
-import Banner from 'app/components/banner';
-import NoProjectMessage from 'app/components/noProjectMessage';
-import {PageContent, PageHeader} from 'app/styles/organization';
-import PageHeading from 'app/components/pageHeading';
-import space from 'app/styles/space';
-import withOrganization from 'app/utils/withOrganization';
-import GlobalSelectionLink from 'app/components/globalSelectionLink';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import routeTitleGen from 'app/utils/routeTitle';
-
-const BANNER_DISMISSED_KEY = 'health-banner-dismissed';
-
-type Props = {
-  organization: Organization;
-  location: Location;
-  router: ReactRouter.InjectedRouter;
-  params: Params;
-} & AsyncView['props'];
-
-type State = {
-  isBannerHidden: boolean;
-} & AsyncView['state'];
-
-class HealthLanding extends AsyncView<Props, State> {
-  getTitle() {
-    return routeTitleGen(t('Health'), this.props.organization.slug, false);
-  }
-
-  getDefaultState() {
-    return {
-      ...super.getDefaultState(),
-      isBannerHidden: localStorage.getItem(BANNER_DISMISSED_KEY) === 'true',
-    };
-  }
-
-  getEndpoints(): [string, string][] {
-    return [['dummy', '/organizations/sentry/projects/']];
-  }
-
-  handleBannerCloseClick = () => {
-    localStorage.setItem(BANNER_DISMISSED_KEY, 'true');
-    this.setState({isBannerHidden: true});
-  };
-
-  renderLoading() {
-    return this.renderBody();
-  }
-
-  renderEmpty() {
-    return (
-      <EmptyStateWarning small>
-        {t('There are no dummy health something.')}
-      </EmptyStateWarning>
-    );
-  }
-
-  renderBanner() {
-    const bannerDismissed = this.state.isBannerHidden;
-
-    if (bannerDismissed) {
-      return null;
-    }
-
-    return (
-      <Banner
-        title={t('Health')}
-        subtitle={t('Monitoring the health of your application')}
-        onCloseClick={this.handleBannerCloseClick}
-      />
-    );
-  }
-
-  renderInnerBody() {
-    const {organization} = this.props;
-    const {loading, dummy} = this.state;
-
-    if (loading) {
-      return <LoadingIndicator />;
-    }
-
-    if (!dummy.length) {
-      return this.renderEmpty();
-    }
-
-    return (
-      <React.Fragment>
-        {this.renderBanner()}
-
-        <StyledGrid>
-          {[1, 2, 3, 4].map(number => (
-            <div key={number}>
-              <GlobalSelectionLink
-                to={`/organizations/${organization.slug}/health/${number}/`}
-              >
-                Dummy
-              </GlobalSelectionLink>
-              <p>
-                Lorem ipsum dolor sit amet consectetur adipisicing elit. Vel neque nostrum
-                repellendus non optio. Est consectetur, amet excepturi delectus animi
-                soluta reprehenderit repellendus nostrum veniam? Odio incidunt consequatur
-                necessitatibus ea.
-              </p>
-            </div>
-          ))}
-        </StyledGrid>
-      </React.Fragment>
-    );
-  }
-
-  renderBody() {
-    const {organization} = this.props;
-
-    return (
-      <React.Fragment>
-        <GlobalSelectionHeader organization={organization} />
-
-        <NoProjectMessage organization={organization}>
-          <PageContent>
-            <PageHeader>
-              <PageHeading withMargins>{t('Health')}</PageHeading>
-            </PageHeader>
-
-            {this.renderInnerBody()}
-          </PageContent>
-        </NoProjectMessage>
-      </React.Fragment>
-    );
-  }
-}
-
-const StyledGrid = styled('div')`
-  display: grid;
-  grid-template-columns: minmax(100px, 1fr);
-  grid-gap: ${space(3)};
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    grid-template-columns: repeat(2, minmax(100px, 1fr));
-  }
-
-  @media (min-width: ${p => p.theme.breakpoints[2]}) {
-    grid-template-columns: repeat(3, minmax(100px, 1fr));
-  }
-`;
-
-export default withOrganization(HealthLanding);
-export {HealthLanding};
diff --git a/src/sentry/static/sentry/app/views/health/detail/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/health/detail/index.tsx
rename to src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
index 62586dc71e..d420d94519 100644
--- a/src/sentry/static/sentry/app/views/health/detail/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
@@ -24,9 +24,9 @@ type Props = {
 
 type State = {} & AsyncView['state'];
 
-class HealthDetail extends AsyncView<Props, State> {
+class ReleasesV2Detail extends AsyncView<Props, State> {
   getTitle() {
-    return routeTitleGen(t('Health Detail'), this.props.organization.slug, false);
+    return routeTitleGen(t('Releases v2 Detail'), this.props.organization.slug, false);
   }
 
   getDefaultState() {
@@ -44,11 +44,7 @@ class HealthDetail extends AsyncView<Props, State> {
   }
 
   renderEmpty() {
-    return (
-      <EmptyStateWarning small>
-        {t('There are no dummy health something.')}
-      </EmptyStateWarning>
-    );
+    return <EmptyStateWarning small>{t('There are no data.')}</EmptyStateWarning>;
   }
 
   renderInnerBody() {
@@ -82,7 +78,7 @@ class HealthDetail extends AsyncView<Props, State> {
           <PageContent>
             <PageHeader>
               <PageHeading withMargins>
-                {t('Health Detail')} {this.props.params.healthSlug}
+                {t('Releases v2 Detail')} {this.props.params.releaseSlug}
               </PageHeading>
             </PageHeader>
 
@@ -94,5 +90,5 @@ class HealthDetail extends AsyncView<Props, State> {
   }
 }
 
-export default withOrganization(HealthDetail);
-export {HealthDetail};
+export default withOrganization(ReleasesV2Detail);
+export {ReleasesV2Detail};
diff --git a/src/sentry/static/sentry/app/views/health/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/index.tsx
similarity index 85%
rename from src/sentry/static/sentry/app/views/health/index.tsx
rename to src/sentry/static/sentry/app/views/releasesV2/index.tsx
index 8202ffb07a..b4a88728cb 100644
--- a/src/sentry/static/sentry/app/views/health/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/index.tsx
@@ -12,7 +12,7 @@ type Props = {
   organization: Organization;
 };
 
-class HealthContainer extends React.Component<Props> {
+class ReleasesV2Container extends React.Component<Props> {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
   };
@@ -30,7 +30,7 @@ class HealthContainer extends React.Component<Props> {
 
     return (
       <Feature
-        features={['health']}
+        features={['releases-v2']}
         organization={organization}
         renderDisabled={this.renderNoAccess}
       >
@@ -40,4 +40,4 @@ class HealthContainer extends React.Component<Props> {
   }
 }
 
-export default withOrganization(HealthContainer);
+export default withOrganization(ReleasesV2Container);
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/commonLayout.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/commonLayout.tsx
new file mode 100644
index 0000000000..f0f86f882e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/commonLayout.tsx
@@ -0,0 +1,44 @@
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+
+const BREAKPOINT_TO_HIDE_COLUMNS = '600px';
+
+const Layout = styled('div')`
+  display: grid;
+  grid-template-columns: 24px 3fr 1.7fr 2fr 1.2fr 2fr 1fr 1fr 1fr;
+  grid-column-gap: ${space(1.5)};
+  width: 100%;
+  align-items: center;
+  @media (max-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: 24px 3fr 1fr 1fr 1fr 1fr 1fr;
+  }
+  @media (max-width: ${BREAKPOINT_TO_HIDE_COLUMNS}) {
+    grid-template-columns: 24px 3fr 1fr 1fr;
+  }
+`;
+
+const Column = styled('div')`
+  overflow: hidden;
+`;
+
+const CenterAlignedColumn = styled('div')`
+  text-align: center;
+`;
+
+const RightAlignedColumn = styled('div')`
+  text-align: right;
+  @media (max-width: ${BREAKPOINT_TO_HIDE_COLUMNS}) {
+    display: none;
+  }
+`;
+
+const ChartColumn = styled('div')`
+  margin-left: ${space(2)};
+  margin-right: ${space(2)};
+  @media (max-width: ${p => p.theme.breakpoints[2]}) {
+    display: none;
+  }
+`;
+
+export {Layout, Column, CenterAlignedColumn, RightAlignedColumn, ChartColumn};
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/healthStatus.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/healthStatus.tsx
new file mode 100644
index 0000000000..a516f170d2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/healthStatus.tsx
@@ -0,0 +1,22 @@
+import styled from '@emotion/styled';
+
+// TODO(releasesv2): health status according to crash free percent will be calculated
+// elsewhere (if at all), this is just for demonstration purposes
+
+const HealthStatus = styled('span')<{crashFreePercent: number}>`
+  width: 16px;
+  height: 16px;
+  border-radius: 50%;
+  display: inline-block;
+  background-color: ${p => {
+    if (p.crashFreePercent < 33) {
+      return p.theme.red;
+    }
+    if (p.crashFreePercent < 66) {
+      return p.theme.yellowOrange;
+    }
+    return p.theme.green;
+  }};
+`;
+
+export default HealthStatus;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
new file mode 100644
index 0000000000..b46b5c1d89
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -0,0 +1,144 @@
+import React from 'react';
+import {Location} from 'history';
+import * as ReactRouter from 'react-router';
+import {Params} from 'react-router/lib/Router';
+
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import AsyncView from 'app/views/asyncView';
+import BetaTag from 'app/components/betaTag';
+import routeTitleGen from 'app/utils/routeTitle';
+import SearchBar from 'app/components/searchBar';
+import Pagination from 'app/components/pagination';
+import {mockData} from 'app/views/releasesV2/list/mock'; // TODO(releasesv2): temporary until api is finished
+import PageHeading from 'app/components/pageHeading';
+import {getQuery} from 'app/views/releases/list/utils';
+import withOrganization from 'app/utils/withOrganization';
+import {ReleasesV2RowData} from 'app/views/releasesV2/list/types';
+import IntroBanner from 'app/views/releasesV2/list/introBanner';
+import NoProjectMessage from 'app/components/noProjectMessage';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import {PageContent, PageHeader} from 'app/styles/organization';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import ReleasesV2TableRow from 'app/views/releasesV2/list/releasesV2TableRow';
+import ReleasesV2TableHead from 'app/views/releasesV2/list/releasesV2TableHead';
+import {Panel, PanelHeader, PanelBody} from 'app/components/panels';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+
+type Props = {
+  params: Params;
+  location: Location;
+  organization: Organization;
+  router: ReactRouter.InjectedRouter;
+} & AsyncView['props'];
+
+type State = {
+  dummyReleasesV2List: ReleasesV2RowData[];
+} & AsyncView['state'];
+
+class ReleasesV2List extends AsyncView<Props, State> {
+  getTitle() {
+    return routeTitleGen(t('Releases v2'), this.props.organization.slug, false);
+  }
+
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      dummyReleasesV2List: mockData,
+    };
+  }
+
+  getEndpoints(): [string, string, {}][] {
+    const {organization, location} = this.props;
+    // TODO(releasesv2): different url once api is finished
+    return [
+      [
+        'releasesV2List',
+        `/organizations/${organization.slug}/releases/`,
+        {query: getQuery(location.query)},
+      ],
+    ];
+  }
+
+  handleReleaseSearch = (query: string) => {
+    const {location, router, params} = this.props;
+
+    router.push({
+      pathname: `/organizations/${params.orgId}/releases-v2/`,
+      query: {...location.query, query},
+    });
+  };
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderInnerBody() {
+    const {organization} = this.props;
+    const {loading, dummyReleasesV2List} = this.state;
+
+    if (loading) {
+      return <LoadingIndicator />;
+    }
+
+    if (!dummyReleasesV2List.length) {
+      return <EmptyStateWarning small>{t('There are no releases.')}</EmptyStateWarning>;
+    }
+
+    return dummyReleasesV2List.map(h => (
+      <ReleasesV2TableRow
+        errors={h.errors}
+        crashes={h.crashes}
+        release={h.release}
+        key={h.release.name}
+        graphData={h.graphData}
+        activeUsers={h.activeUsers}
+        organizationId={organization.slug}
+        crashFreeUsersPercent={h.crashFreeUsersPercent}
+        releaseAdoptionPercent={h.releaseAdoptionPercent}
+      />
+    ));
+  }
+
+  renderBody() {
+    const {organization, location} = this.props;
+
+    return (
+      <React.Fragment>
+        <GlobalSelectionHeader organization={organization} />
+
+        <NoProjectMessage organization={organization}>
+          <PageContent>
+            <PageHeader>
+              <PageHeading>
+                {t('Releases v2')} <BetaTag />
+              </PageHeading>
+              <SearchBar
+                placeholder={t('Search for a release')}
+                onSearch={this.handleReleaseSearch}
+                defaultQuery={
+                  typeof location.query.query === 'string' ? location.query.query : ''
+                }
+              />
+            </PageHeader>
+
+            <IntroBanner />
+
+            <div>
+              <Panel>
+                <PanelHeader>
+                  <ReleasesV2TableHead />
+                </PanelHeader>
+                <PanelBody>{this.renderInnerBody()}</PanelBody>
+              </Panel>
+              <Pagination pageLinks={this.state.releasesV2ListPageLinks} />
+            </div>
+          </PageContent>
+        </NoProjectMessage>
+      </React.Fragment>
+    );
+  }
+}
+
+export default withOrganization(ReleasesV2List);
+export {ReleasesV2List};
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/introBanner.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/introBanner.tsx
new file mode 100644
index 0000000000..f08088cbfb
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/introBanner.tsx
@@ -0,0 +1,49 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import styled from '@emotion/styled';
+import theme from 'app/utils/theme';
+import Banner from 'app/components/banner';
+import localStorage from 'app/utils/localStorage';
+
+const BANNER_DISMISSED_KEY = 'releases-v2-banner-dismissed';
+
+type State = {
+  isBannerHidden: boolean;
+};
+
+class IntroBanner extends React.Component<{}, State> {
+  state = {
+    isBannerHidden: localStorage.getItem(BANNER_DISMISSED_KEY) === 'true',
+  };
+
+  handleBannerCloseClick = () => {
+    localStorage.setItem(BANNER_DISMISSED_KEY, 'true');
+    this.setState({isBannerHidden: true});
+  };
+
+  render() {
+    if (this.state.isBannerHidden) {
+      return null;
+    }
+
+    return (
+      // TODO(releasesv2): change to proper thing once finished
+      <Banner title={t('Releases v2')} onCloseClick={this.handleBannerCloseClick}>
+        <TemporaryText>
+          This is an experimental UI page with dummy data not intended for public usage.
+          <br />
+          We’re using it for iterating towards the Releases v2 (mobile health)
+          deliverable.
+        </TemporaryText>
+      </Banner>
+    );
+  }
+}
+
+const TemporaryText = styled('h4')`
+  color: ${theme.white};
+  font-size: ${theme.fontSizeLarge};
+`;
+
+export default IntroBanner;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/mock.ts b/src/sentry/static/sentry/app/views/releasesV2/list/mock.ts
new file mode 100644
index 0000000000..8d800c9c2b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/mock.ts
@@ -0,0 +1,43 @@
+const mock = () => ({
+  crashFreeUsersPercent: Math.floor(Math.random() * 100),
+  activeUsers: Math.floor(Math.random() * 10000),
+  crashes: Math.floor(Math.random() * 10000),
+  errors: Math.floor(Math.random() * 10000),
+  releaseAdoptionPercent: Math.floor(Math.random() * 100),
+  release: {
+    name: Math.random()
+      .toString(10)
+      .substring(2),
+    dateCreated: new Date(),
+  },
+  graphData: {
+    '24h': [
+      [1578996000, 2718],
+      [1578999600, 3555],
+      [1579003200, 3787],
+      [1579006800, 4480],
+      [1579010400, 4961],
+      [1579014000, 5067],
+      [1579017600, 4443],
+      [1579021200, 3311],
+      [1579024800, 3226],
+      [1579028400, 3065],
+      [1579032000, 3181],
+      [1579035600, 3216],
+      [1579039200, 2859],
+      [1579042800, 3670],
+      [1579046400, 3643],
+      [1579050000, 3571],
+      [1579053600, 3715],
+      [1579057200, 3686],
+      [1579060800, 2655],
+      [1579064400, 2310],
+      [1579068000, 2030],
+      [1579071600, 1925],
+      [1579075200, 2218],
+      [1579078800, 1136],
+    ],
+  },
+});
+
+export const mockData = [...Array(20)].map(mock);
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableHead.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableHead.tsx
new file mode 100644
index 0000000000..7c40330006
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableHead.tsx
@@ -0,0 +1,70 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import {
+  Layout,
+  Column,
+  CenterAlignedColumn,
+  RightAlignedColumn,
+  ChartColumn,
+} from 'app/views/releasesV2/list/commonLayout';
+
+const ReleasesV2TableHead: React.FC = () => {
+  return (
+    <Layout>
+      <Column />
+      <Column>{t('Release')}</Column>
+      <CenterAlignedColumn>{t('Crash Free Users')}</CenterAlignedColumn>
+      <ChartColumn>
+        <ChartToggler>
+          <ChartTogglerTitle>{t('Graph:')}</ChartTogglerTitle>
+          <ChartToggle active onClick={() => {}}>
+            {t('24h')}
+          </ChartToggle>
+
+          <ChartToggle active={false} onClick={() => {}}>
+            {t('14d')}
+          </ChartToggle>
+        </ChartToggler>
+      </ChartColumn>
+      <CenterAlignedColumn>{t('Active Users')}</CenterAlignedColumn>
+      <ChartColumn>
+        <ChartToggler>
+          <ChartTogglerTitle>{t('Graph:')}</ChartTogglerTitle>
+          <ChartToggle active onClick={() => {}}>
+            {t('24h')}
+          </ChartToggle>
+
+          <ChartToggle active={false} onClick={() => {}}>
+            {t('14d')}
+          </ChartToggle>
+        </ChartToggler>
+      </ChartColumn>
+      <RightAlignedColumn>{t('Crashes')}</RightAlignedColumn>
+      <RightAlignedColumn>{t('Errors')}</RightAlignedColumn>
+      <RightAlignedColumn>{t('Adoption')}</RightAlignedColumn>
+    </Layout>
+  );
+};
+
+const ChartToggler = styled('div')`
+  display: flex;
+`;
+const ChartTogglerTitle = styled('div')`
+  flex: 1;
+`;
+const ChartToggle = styled('a')<{active: boolean}>`
+  padding-left: ${space(1)};
+  font-weight: 400;
+
+  &,
+  &:hover,
+  &:focus,
+  &:active {
+    color: ${p => (p.active ? p.theme.gray4 : p.theme.disabled)};
+  }
+`;
+
+export default ReleasesV2TableHead;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableRow.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableRow.tsx
new file mode 100644
index 0000000000..4d50582524
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableRow.tsx
@@ -0,0 +1,117 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import Count from 'app/components/count';
+import {
+  Layout,
+  Column,
+  CenterAlignedColumn,
+  RightAlignedColumn,
+  ChartColumn,
+} from 'app/views/releasesV2/list/commonLayout';
+import {PanelItem} from 'app/components/panels';
+import UsersChart from 'app/views/releasesV2/list/usersChart';
+import {ReleasesV2RowData} from 'app/views/releasesV2/list/types';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import HealthStatus from 'app/views/releasesV2/list/healthStatus';
+import LatestDeployOrReleaseTime from 'app/views/releases/list/latestDeployOrReleaseTime';
+import Version from 'app/views/releasesV2/list/version';
+
+type Props = ReleasesV2RowData & {
+  organizationId: string;
+};
+
+const ReleasesV2TableRow: React.FC<Props> = ({
+  release,
+  crashFreeUsersPercent,
+  graphData,
+  activeUsers,
+  crashes,
+  errors,
+  releaseAdoptionPercent,
+  organizationId,
+}: Props) => {
+  return (
+    <StyledPanelItem key={release.name}>
+      <Layout>
+        <Column>
+          <HealthStatus crashFreePercent={crashFreeUsersPercent} />
+        </Column>
+
+        <Column>
+          <StyledVersion
+            orgId={organizationId}
+            version={release.name}
+            preserveGlobalSelection
+          />
+          <LatestDeployOrReleaseTime release={release} />
+        </Column>
+
+        <CenterAlignedColumn>
+          <CrashFreeUsers percent={crashFreeUsersPercent}>
+            {crashFreeUsersPercent}%
+          </CrashFreeUsers>
+        </CenterAlignedColumn>
+
+        <ChartColumn>
+          <UsersChart statsPeriod="24h" data={graphData} />
+        </ChartColumn>
+
+        <CenterAlignedColumn>
+          <StyledCount value={activeUsers || 0} />
+        </CenterAlignedColumn>
+
+        <ChartColumn>
+          <UsersChart statsPeriod="24h" data={graphData} />
+        </ChartColumn>
+
+        <RightAlignedColumn>
+          <Count value={crashes || 0} />
+        </RightAlignedColumn>
+
+        <RightAlignedColumn>
+          <Count value={errors || 0} />
+        </RightAlignedColumn>
+
+        <RightAlignedColumn>{releaseAdoptionPercent}%</RightAlignedColumn>
+      </Layout>
+    </StyledPanelItem>
+  );
+};
+
+const StyledPanelItem = styled(PanelItem)`
+  padding: ${space(1)} ${space(2)};
+`;
+
+const StyledVersion = styled(Version)`
+  font-weight: bold;
+  ${overflowEllipsis};
+`;
+
+const CrashFreeUsers = styled('span')<{percent: number}>`
+  font-size: ${p => p.theme.fontSizeExtraLarge};
+  color: ${p => p.theme.gray4};
+  /*  TODO(releasesv2): this color coated demonstration is turned off for now, waiting for decision
+  color: ${p => {
+    if (p.percent < 33) {
+      return p.theme.red;
+    }
+    if (p.percent < 66) {
+      return p.theme.yellowOrange;
+    }
+    if (p.percent >= 66) {
+      return p.theme.green;
+    }
+
+    return p.theme.gray3;
+  }};
+  */
+`;
+
+const StyledCount = styled(Count)`
+  font-size: ${p => p.theme.fontSizeExtraLarge};
+  color: ${p => p.theme.gray4};
+`;
+
+export default ReleasesV2TableRow;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/types.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/types.tsx
new file mode 100644
index 0000000000..65ffccf659
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/types.tsx
@@ -0,0 +1,19 @@
+export type ReleasesV2RowData = {
+  organizationId: string;
+  release: ReleasesV2Release;
+  crashFreeUsersPercent: number;
+  graphData: GraphData;
+  activeUsers: number;
+  crashes: number;
+  errors: number;
+  releaseAdoptionPercent: number;
+};
+
+type GraphData = {
+  [timePeriod: string]: [number, number][];
+};
+
+type ReleasesV2Release = {
+  name: string;
+  dateCreated: Date;
+};
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
new file mode 100644
index 0000000000..5f13fa5741
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
@@ -0,0 +1,56 @@
+// TODO(matej): this is very similar to app/components/stream/groupChart, will refactor to reusable component in a follow-up PR
+import React from 'react';
+import LazyLoad from 'react-lazyload';
+
+import {t} from 'app/locale';
+import BarChart from 'app/components/barChart';
+
+type Props = {
+  statsPeriod: '24h' | '14d';
+  data: {
+    [statsPeriod: string]: [number, number][];
+  };
+  height?: number;
+};
+
+class UsersChart extends React.Component<Props> {
+  static defaultProps = {
+    height: 24,
+  };
+
+  shouldComponentUpdate(nextProps: Props) {
+    // Sometimes statsPeriod updates before graph data has been
+    // pulled from server / propagated down to components ...
+    // don't update until data is available
+    const {data, statsPeriod} = nextProps;
+    return data.hasOwnProperty(statsPeriod);
+  }
+
+  render() {
+    const {height, statsPeriod, data} = this.props;
+
+    const stats = statsPeriod ? data[statsPeriod] : null;
+
+    if (!stats || !stats.length) {
+      return null;
+    }
+
+    const chartData = stats.map(point => {
+      return {x: point[0], y: point[1]};
+    });
+
+    return (
+      <LazyLoad debounce={50} height={height}>
+        <BarChart
+          points={chartData}
+          height={height}
+          label={t('users')}
+          minHeights={[3]}
+          gap={1}
+        />
+      </LazyLoad>
+    );
+  }
+}
+
+export default UsersChart;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/version.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/version.tsx
new file mode 100644
index 0000000000..498906c535
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/version.tsx
@@ -0,0 +1,53 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import GlobalSelectionLink from 'app/components/globalSelectionLink';
+import Link from 'app/components/links/link';
+
+type Props = {
+  version: string;
+  orgId: string;
+  anchor?: boolean;
+  preserveGlobalSelection?: boolean;
+  className?: string;
+};
+
+export default class Version extends React.Component<Props> {
+  static propTypes = {
+    anchor: PropTypes.bool,
+    version: PropTypes.string.isRequired,
+    orgId: PropTypes.string,
+
+    /**
+     * Should link to Release preserve user's global selection values
+     */
+    preserveGlobalSelection: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    anchor: true,
+  };
+
+  render() {
+    const {orgId, version, anchor, className, preserveGlobalSelection} = this.props;
+
+    const LinkComponent = preserveGlobalSelection ? GlobalSelectionLink : Link;
+
+    if (anchor && orgId) {
+      return (
+        <LinkComponent
+          to={`/organizations/${orgId}/releases-v2/${encodeURIComponent(version)}/`}
+          className={className}
+        >
+          <span title={version}>{version}</span>
+        </LinkComponent>
+      );
+    }
+
+    return (
+      <span title={version} className={className}>
+        {version}
+      </span>
+    );
+  }
+}
diff --git a/tests/acceptance/test_organization_releases_v2.py b/tests/acceptance/test_organization_releases_v2.py
new file mode 100644
index 0000000000..6aa7880cb0
--- /dev/null
+++ b/tests/acceptance/test_organization_releases_v2.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from django.utils import timezone
+
+from sentry.testutils import AcceptanceTestCase
+
+FEATURE_NAME = "organizations:releases-v2"
+
+
+class OrganizationReleasesV2Test(AcceptanceTestCase):
+    def setUp(self):
+        super(OrganizationReleasesV2Test, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
+        self.team = self.create_team(
+            organization=self.org, name="Mariachi Band", members=[self.user]
+        )
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.login_as(self.user)
+        self.path = u"/organizations/{}/releases-v2/".format(self.org.slug)
+        self.project.update(first_event=timezone.now())
+
+    def test_no_access(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading")
+        self.browser.snapshot("organization releases v2 - no access")
+
+    def test(self):
+        with self.feature(FEATURE_NAME):
+            self.browser.get(self.path)
+            self.browser.wait_until_not(".loading")
+            # TODO(releasesv2): data is for now randomly hardcoded in the UI - this snapshot will always be different, turned off until finished api
+            # self.browser.snapshot("organization releases v2 list")
diff --git a/tests/js/spec/views/releasesV2/index.spec.jsx b/tests/js/spec/views/releasesV2/index.spec.jsx
new file mode 100644
index 0000000000..7b09db4ecf
--- /dev/null
+++ b/tests/js/spec/views/releasesV2/index.spec.jsx
@@ -0,0 +1,17 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import ReleasesV2Container from 'app/views/releasesV2';
+
+describe('ReleasesV2Container', function() {
+  describe('no access without feature flag', function() {
+    it('display no access message', function() {
+      const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
+      const wrapper = mountWithTheme(
+        <ReleasesV2Container />,
+        TestStubs.routerContext([{organization}])
+      );
+      expect(wrapper.text()).toBe("You don't have access to this feature");
+    });
+  });
+});
diff --git a/tests/js/spec/views/releasesV2/list/index.spec.jsx b/tests/js/spec/views/releasesV2/list/index.spec.jsx
new file mode 100644
index 0000000000..8dc7cd1912
--- /dev/null
+++ b/tests/js/spec/views/releasesV2/list/index.spec.jsx
@@ -0,0 +1,79 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import {initializeOrg} from 'sentry-test/initializeOrg';
+
+import ReleasesV2List from 'app/views/releasesV2/list/';
+
+// waiting for api to be finished
+// eslint-disable-next-line jest/no-disabled-tests
+describe.skip('ReleasesV2List', function() {
+  const {organization, routerContext, router} = initializeOrg({
+    organization: {features: ['releases-v2']},
+  });
+  const props = {
+    router,
+    organization,
+    selection: {projects: [2]},
+    params: {orgId: organization.slug},
+    location: {query: {query: 'derp'}},
+  };
+  let wrapper, endpointMock;
+
+  beforeEach(function() {
+    endpointMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/releases/',
+      body: [TestStubs.Release({version: 'abc'}), TestStubs.Release({version: 'def'})],
+    });
+
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects/',
+      body: [],
+    });
+
+    wrapper = mountWithTheme(<ReleasesV2List {...props} />, routerContext);
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('renders list', function() {
+    const items = wrapper.find('StyledPanelItem');
+
+    expect(items).toHaveLength(20);
+    // expect(items.at(0).text()).toContain('First');
+    // expect(items.at(1).text()).toContain('Second');
+  });
+
+  it('displays empty state', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/releases/',
+      body: [],
+    });
+
+    expect(wrapper.find('StyledPanelItem')).toHaveLength(0);
+    expect(wrapper.text()).toContain('There are no releases.');
+  });
+
+  it('searches for a release', async function() {
+    const input = wrapper.find('input');
+
+    expect(endpointMock).toHaveBeenCalledWith(
+      '/organizations/org-slug/releases/',
+      expect.objectContaining({query: {per_page: 50, query: 'derp'}})
+    );
+
+    expect(input.prop('value')).toBe('derp');
+
+    input.simulate('change', {target: {value: 'a'}}).simulate('submit');
+
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/releases-v2/',
+      query: {
+        query: 'a',
+      },
+    });
+  });
+
+  // TODO(releasesv2): test toggle 24h/14d charts
+});
