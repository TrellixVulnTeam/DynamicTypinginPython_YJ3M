commit 52f7687f30d1d74cd30e3005ae5380477f8529e6
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Nov 24 12:49:51 2015 -0800

    Fix up logic and tests

diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 53d9dfdad1..82e6bf975d 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -77,10 +77,7 @@ class OptionsManager(object):
         >>> from sentry import options
         >>> options.set('option', 'value')
         """
-        try:
-            opt = self.registry[key]
-        except KeyError:
-            raise UnknownOption(key)
+        opt = self.lookup_key(key)
 
         if not isinstance(value, opt.type):
             raise TypeError('got %r, expected %r' % (type(value), opt.type))
@@ -104,6 +101,18 @@ class OptionsManager(object):
             self.logger.warn(CACHE_UPDATE_ERR, key, exc_info=True)
             return False
 
+    def lookup_key(self, key):
+        try:
+            return self.registry[key]
+        except KeyError:
+            # HACK: Historically, Options were used for random adhoc things.
+            # Fortunately, they all share the same prefix, 'sentry:', so
+            # we special case them here and construct a faux key until we migrate.
+            if key[:7] == 'sentry:':
+                self.logger.info('Using legacy key: %s', key, exc_info=True)
+                return Key('', object, self.FLAG_DEFAULT, self._make_cache_key(key))
+            raise UnknownOption(key)
+
     def get(self, key):
         """
         Get the value of an option prioritizing the cache, then the database,
@@ -114,32 +123,29 @@ class OptionsManager(object):
         >>> from sentry import options
         >>> options.get('option')
         """
-        try:
-            opt = self.registry[key]
-        except KeyError:
-            raise UnknownOption(key)
+        opt = self.lookup_key(key)
 
         try:
             result = self.cache.get(opt.cache_key)
         except Exception:
             self.logger.warn(CACHE_FETCH_ERR, key, exc_info=True)
             result = None
-            cache_success = False
-        else:
-            cache_success = True
 
         if result is None:
             try:
                 result = Option.objects.get(key=key).value
+                db_success = True
             except Option.DoesNotExist:
-                result = opt.default
+                result = None
+                db_success = False
             except Exception as e:
                 self.logger.exception(unicode(e))
                 result = None
+                db_success = False
 
             # we only attempt to populate the cache if we were previously
             # able to successfully talk to the backend
-            if result is not None and cache_success:
+            if result is not None and db_success:
                 try:
                     self.update_cached_value(opt.cache_key, result)
                 except Exception:
@@ -164,10 +170,7 @@ class OptionsManager(object):
         >>> from sentry import options
         >>> options.delete('option')
         """
-        try:
-            opt = self.registry[key]
-        except KeyError:
-            raise UnknownOption(key)
+        opt = self.lookup_key(key)
 
         Option.objects.filter(key=key).delete()
 
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 3055adf384..9389c6689d 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -2,11 +2,11 @@
 
 from __future__ import absolute_import
 
-from exam import fixture
+from exam import fixture, around
 from mock import patch
 
 from sentry.models import Option
-from sentry.options.manager import OptionsManager
+from sentry.options.manager import OptionsManager, UnknownOption
 from sentry.testutils import TestCase
 
 
@@ -15,6 +15,12 @@ class OptionsManagerTest(TestCase):
     def manager(self):
         return OptionsManager()
 
+    @around
+    def register(self):
+        self.manager.register('foo')
+        yield
+        self.manager.unregister('foo')
+
     def test_simple(self):
         assert self.manager.get('foo') == ''
 
@@ -29,6 +35,28 @@ class OptionsManagerTest(TestCase):
 
         assert self.manager.get('foo') == ''
 
+    def test_unregistered_key(self):
+        with self.assertRaises(UnknownOption):
+            self.manager.get('does-not-exit')
+
+        with self.assertRaises(UnknownOption):
+            self.manager.set('does-not-exist', 'bar')
+
+        self.manager.register('does-not-exist')
+        self.manager.get('does-not-exist')  # Just shouldn't raise
+        self.manager.unregister('does-not-exist')
+
+        with self.assertRaises(UnknownOption):
+            self.manager.get('does-not-exist')
+
+    def test_legacy_key(self):
+        """
+        Allow sentry: prefixed keys without any registration
+        """
+        # These just shouldn't blow up since they are implicitly registered
+        self.manager.get('sentry:foo')
+        self.manager.set('sentry:foo', 'bar')
+
     def test_db_unavailable(self):
         with patch.object(Option.objects, 'get_queryset', side_effect=Exception()):
             # we can't update options if the db is unavailable
