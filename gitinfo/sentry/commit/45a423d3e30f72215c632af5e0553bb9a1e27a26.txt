commit 45a423d3e30f72215c632af5e0553bb9a1e27a26
Author: Leander Rodrigues <leandergrodrigues@gmail.com>
Date:   Mon Feb 24 17:25:12 2020 -0800

    test(async-csv): Add frontend error handling and view tests (#17215)
    
    Add toast error handlers and tests for download pages/components

diff --git a/src/sentry/static/sentry/app/components/dataExport.tsx b/src/sentry/static/sentry/app/components/dataExport.tsx
index d3b2d663c4..fe8a7a0ed9 100644
--- a/src/sentry/static/sentry/app/components/dataExport.tsx
+++ b/src/sentry/static/sentry/app/components/dataExport.tsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
 import {Client} from 'app/api';
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import Feature from 'app/components/acl/feature';
 import Tooltip from 'app/components/tooltip';
 import {t} from 'app/locale';
@@ -40,17 +41,22 @@ class DataExport extends React.Component<Props, State> {
       organization: {slug},
       payload: {queryType, queryInfo},
     } = this.props;
-    const {id: dataExportId} = await api.requestPromise(
-      `/organizations/${slug}/data-export/`,
-      {
-        method: 'POST',
-        data: {
-          query_type: queryType,
-          query_info: queryInfo,
-        },
-      }
-    );
-    this.setState({inProgress: true, dataExportId});
+    try {
+      const {id: dataExportId} = await api.requestPromise(
+        `/organizations/${slug}/data-export/`,
+        {
+          method: 'POST',
+          data: {
+            query_type: queryType,
+            query_info: queryInfo,
+          },
+        }
+      );
+      addSuccessMessage(t("We'll email you when it's ready for download"));
+      this.setState({inProgress: true, dataExportId});
+    } catch (_err) {
+      addErrorMessage(t('Unable to begin bulk data export. Please try again.'));
+    }
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
index 77848fe5cc..3e89c0a6a7 100644
--- a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
+++ b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
@@ -9,7 +9,7 @@ import {t} from 'app/locale';
 
 import Button from 'app/components/button';
 
-enum DownloadStatus {
+export enum DownloadStatus {
   Early = 'EARLY',
   Valid = 'VALID',
   Expired = 'EXPIRED',
diff --git a/tests/js/spec/views/dataExport/dataDownload.spec.jsx b/tests/js/spec/views/dataExport/dataDownload.spec.jsx
new file mode 100644
index 0000000000..9fb51ad783
--- /dev/null
+++ b/tests/js/spec/views/dataExport/dataDownload.spec.jsx
@@ -0,0 +1,64 @@
+import React from 'react';
+import {mountWithTheme, shallow} from 'sentry-test/enzyme';
+
+import DataDownload, {DownloadStatus} from 'app/views/dataExport/dataDownload';
+
+describe('DataDownload', function() {
+  beforeEach(MockApiClient.clearMockResponses);
+  const dateExpired = new Date();
+  const organization = TestStubs.Organization();
+  const mockRouteParams = {
+    orgId: organization.slug,
+    dataExportId: 721,
+  };
+  const getDataExportDetails = body =>
+    MockApiClient.addMockResponse({
+      url: `/organizations/${mockRouteParams.orgId}/data-export/${mockRouteParams.dataExportId}/`,
+      body,
+    });
+
+  it('should send a request to the data export endpoint', function() {
+    const getValid = getDataExportDetails(DownloadStatus.Valid);
+    mountWithTheme(<DataDownload params={mockRouteParams} />);
+    expect(getValid).toHaveBeenCalled();
+  });
+
+  it("should render the 'Early' view when appropriate", function() {
+    const status = DownloadStatus.Early;
+    getDataExportDetails({status});
+    const wrapper = shallow(<DataDownload params={mockRouteParams} />);
+    expect(wrapper.state('download')).toEqual({status});
+    expect(wrapper.state('download').dateExpired).toBeUndefined();
+    const contentWrapper = wrapper.find('ContentContainer');
+    expect(contentWrapper.children()).toHaveLength(3);
+    expect(contentWrapper.find('h3').text()).toBe("You're Early!");
+  });
+
+  it("should render the 'Expired' view when appropriate", function() {
+    const status = DownloadStatus.Expired;
+    getDataExportDetails({status});
+    const wrapper = shallow(<DataDownload params={mockRouteParams} />);
+    expect(wrapper.state('download')).toEqual({status});
+    expect(wrapper.state('download').dateExpired).toBeUndefined();
+    const contentWrapper = wrapper.find('ContentContainer');
+    expect(contentWrapper.children()).toHaveLength(3);
+    expect(contentWrapper.find('h3').text()).toBe('Sorry!');
+  });
+
+  it("should render the 'Valid' view when appropriate", function() {
+    const status = DownloadStatus.Valid;
+    getDataExportDetails({status, dateExpired});
+    const wrapper = mountWithTheme(<DataDownload params={mockRouteParams} />);
+    expect(wrapper.state('download')).toEqual({dateExpired, status});
+    const contentWrapper = wrapper.find('ContentContainer').childAt(0);
+    expect(contentWrapper.children()).toHaveLength(5);
+    expect(contentWrapper.find('h3').text()).toBe('Finally!');
+    const buttonWrapper = contentWrapper.find('a[aria-label="Download CSV"]');
+    expect(buttonWrapper.text()).toBe('Download CSV');
+    expect(buttonWrapper.props().href).toBe(
+      `/api/0/organizations/${mockRouteParams.orgId}/data-export/${mockRouteParams.dataExportId}/?download=true`
+    );
+    const dateString = d => `${d.toLocaleDateString()}, ${d.toLocaleTimeString()}`;
+    expect(contentWrapper.find('b').text()).toBe(dateString(dateExpired));
+  });
+});
