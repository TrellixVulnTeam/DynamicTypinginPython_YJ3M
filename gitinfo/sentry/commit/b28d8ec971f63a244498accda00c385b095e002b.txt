commit b28d8ec971f63a244498accda00c385b095e002b
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Dec 11 12:19:31 2015 -0800

    Can close assignee selector with escape key (refs #2451)

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index c94a26a7e6..069a4a7432 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -103,13 +103,17 @@ const AssigneeSelector = React.createClass({
     this.setState({filter: '', loading: true});
   },
 
-  onFilterChange(evt) {
-    this.setState({
-      filter: evt.target.value
-    });
+  onFilterKeyUp(evt) {
+    if (evt.key === 'Escape') {
+      this.refs.dropdown.close();
+    } else {
+      this.setState({
+        filter: evt.target.value
+      });
+    }
   },
 
-  onInputKeyDown(evt) {
+  onFilterKeyDown(evt) {
     if (evt.key === 'Enter' && this.state.filter) {
       let members = AssigneeSelector.filterMembers(this.state.memberList, this.state.filter);
       if (members.length > 0) {
@@ -188,6 +192,7 @@ const AssigneeSelector = React.createClass({
             <LoadingIndicator mini={true} />
           :
             <DropdownLink
+              ref="dropdown"
               className="assignee-selector-toggle"
               onOpen={this.onDropdownOpen}
               onClose={this.onDropdownClose}
@@ -200,8 +205,8 @@ const AssigneeSelector = React.createClass({
               <MenuItem noAnchor={true} key="filter">
                 <input type="text" className="form-control input-sm"
                        placeholder="Filter people" ref="filter"
-                       onKeyDown={this.onInputKeyDown}
-                       onKeyUp={this.onFilterChange} />
+                       onKeyDown={this.onFilterKeyDown}
+                       onKeyUp={this.onFilterKeyUp} />
               </MenuItem>
               {assignedTo ?
                 <MenuItem key="clear"
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index f8410f69f9..bc37a13636 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -24,6 +24,12 @@ describe('AssigneeSelector', function() {
   beforeEach(function () {
     this.sandbox = sinon.sandbox.create();
     stubReactComponents(this.sandbox, [LoadingIndicator]);
+
+    this.sandbox.stub(MemberListStore, 'getAll').returns([USER_1, USER_2]);
+    this.sandbox.stub(GroupStore, 'get').returns({
+      id: 1337,
+      assignedTo: null
+    });
   });
 
   afterEach(function () {
@@ -55,14 +61,8 @@ describe('AssigneeSelector', function() {
     });
   });
 
-  describe('onInputKeyDown()', function () {
+  describe('onFilterKeyDown()', function () {
     beforeEach(function () {
-      this.sandbox.stub(MemberListStore, 'getAll').returns([USER_1, USER_2]);
-      this.sandbox.stub(GroupStore, 'get').returns({
-        id: 1337,
-        assignedTo: null
-      });
-
       let assigneeSelector = this.assigneeSelector =
         TestUtils.renderIntoDocument(<AssigneeSelector id="1337"/>);
 
@@ -100,5 +100,28 @@ describe('AssigneeSelector', function() {
       expect(assigneeSelector.assignTo.notCalled).to.be.ok;
     });
   });
+
+  describe('onFilterKeyUp()', function () {
+    beforeEach(function () {
+      this.assigneeSelector =
+        TestUtils.renderIntoDocument(<AssigneeSelector id="1337"/>);
+    });
+
+    it('should close the dropdown when keyup is triggered with the Escape key', function () {
+      let assigneeSelector = this.assigneeSelector;
+      this.sandbox.stub(assigneeSelector.refs.dropdown, 'close');
+
+      TestUtils.Simulate.keyUp(assigneeSelector.refs.filter, {key: 'Escape'});
+
+      expect(assigneeSelector.refs.dropdown.close.calledOnce).to.be.ok;
+    });
+
+    it('should update the local filter state if any other key is pressed', function () {
+      let assigneeSelector = this.assigneeSelector;
+
+      TestUtils.Simulate.keyUp(assigneeSelector.refs.filter, {target: {value: 'foo'}});
+      expect(assigneeSelector.state.filter).to.eql('foo');
+    });
+  });
 });
 
