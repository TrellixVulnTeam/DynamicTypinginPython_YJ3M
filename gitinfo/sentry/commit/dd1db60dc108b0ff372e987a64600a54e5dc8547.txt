commit dd1db60dc108b0ff372e987a64600a54e5dc8547
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 17 10:46:27 2016 -0500

    Utilize message attribute for search
    
    This ensures that the Message interface is populated from the message attribute (SDK input), and then replaces that value with terms that should show up in search.
    
    - Swap out message rendering for MessageInterface (+ params)
    - Increase display priority on message interface to be above HTTP
    
    @getsentry/infrastructure
    @getsentry/ui
    @getsentry/api
    
    Refs GH-3248

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index dd7d76478e..2b05567d11 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -106,7 +106,10 @@ class EventSerializer(Serializer):
             'eventID': str(obj.event_id),
             'size': obj.size,
             'entries': attrs['entries'],
-            'message': obj.message,
+            # See GH-3248
+            'message': obj.data.get('sentry.interfaces.Message', {
+                'message': obj.message,
+            })['message'],
             'user': attrs['user'],
             'sdk': attrs['sdk'],
             'device': attrs['device'],
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 58255e254c..6fb5e94535 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -349,11 +349,6 @@ class ClientApiHelper(object):
 
         data['errors'] = []
 
-        if not data.get('message'):
-            data['message'] = '<no message value>'
-        elif not isinstance(data['message'], six.string_types):
-            raise APIForbidden('Invalid value for message')
-
         if data.get('culprit'):
             if not isinstance(data['culprit'], six.string_types):
                 raise APIForbidden('Invalid value for culprit')
@@ -565,6 +560,31 @@ class ClientApiHelper(object):
                     'value': value,
                 })
 
+        # message is coerced to an interface, as its used for pure
+        # index of searchable strings
+        # See GH-3248
+        if 'sentry.interfaces.Message' not in data and data.get('message'):
+            k = 'sentry.interfaces.Message'
+            value = {
+                'message': data.pop('message'),
+            }
+            interface = get_interface(k)
+            try:
+                inst = interface.to_python(value)
+                data[inst.get_path()] = inst.to_json()
+            except Exception as e:
+                if isinstance(e, InterfaceValidationError):
+                    log = self.log.info
+                else:
+                    log = self.log.error
+                log('Discarded invalid value for interface: %s (%r)', k, value,
+                    exc_info=True)
+                data['errors'].append({
+                    'type': EventError.INVALID_DATA,
+                    'name': k,
+                    'value': value,
+                })
+
         level = data.get('level') or DEFAULT_LOG_LEVEL
         if isinstance(level, six.string_types) and not level.isdigit():
             # assume it's something like 'warning'
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index b9ea09f6b9..f6344909ce 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -270,7 +270,6 @@ class EventManager(object):
         if not data.get('event_id'):
             data['event_id'] = uuid4().hex
 
-        data.setdefault('message', '')
         data.setdefault('culprit', None)
         data.setdefault('server_name', None)
         data.setdefault('site', None)
@@ -327,6 +326,19 @@ class EventManager(object):
             except Exception:
                 pass
 
+        # message is coerced to an interface, as its used for pure
+        # index of searchable strings
+        # See GH-3248
+        if 'sentry.interfaces.Message' not in data and data.get('message'):
+            interface = get_interface('sentry.interfaces.Message')
+            try:
+                inst = interface.to_python({
+                    'message': data.pop('message').strip(),
+                })
+                data[inst.get_path()] = inst.to_json()
+            except Exception:
+                pass
+
         # the SDKs currently do not describe event types, and we must infer
         # them from available attributes
         data['type'] = eventtypes.infer(data).key
@@ -357,10 +369,6 @@ class EventManager(object):
         if data['culprit']:
             data['culprit'] = trim(data['culprit'], MAX_CULPRIT_LENGTH)
 
-        if data['message']:
-            data['message'] = trim(
-                data['message'], settings.SENTRY_MAX_MESSAGE_LENGTH)
-
         return data
 
     @suppress_exceptions
@@ -373,7 +381,6 @@ class EventManager(object):
 
         # First we pull out our top-level (non-data attr) kwargs
         event_id = data.pop('event_id')
-        message = data.pop('message')
         level = data.pop('level')
 
         culprit = data.pop('culprit', None)
@@ -388,6 +395,7 @@ class EventManager(object):
 
         # unused
         time_spent = data.pop('time_spent', None)
+        message = data.pop('message', '')
 
         if not culprit:
             culprit = generate_culprit(data, platform=platform)
@@ -396,7 +404,6 @@ class EventManager(object):
         date = date.replace(tzinfo=timezone.utc)
 
         kwargs = {
-            'message': message,
             'platform': platform,
         }
 
@@ -457,6 +464,29 @@ class EventManager(object):
         # TODO(dcramer): temp workaround for complexity
         data['message'] = message
         event_type = eventtypes.get(data.get('type', 'default'))(data)
+        event_metadata = event_type.get_metadata()
+        # TODO(dcramer): temp workaround for complexity
+        del data['message']
+
+        # index components into ``Event.message``
+        # See GH-3248
+        if event_type.key != 'default':
+            if 'sentry.interfaces.Message' in data and \
+                    data['sentry.interfaces.Message']['message'] != message:
+                message = u'{} {}'.format(
+                    message,
+                    data['sentry.interfaces.Message']['message'],
+                )
+
+        for value in event_metadata.itervalues():
+            value_u = unicode(value)
+            if value_u not in message:
+                message = u'{} {}'.format(message, value_u)
+
+        message = trim(message.strip(), settings.SENTRY_MAX_MESSAGE_LENGTH)
+
+        event.message = message
+        kwargs['message'] = message
 
         group_kwargs = kwargs.copy()
         group_kwargs.update({
@@ -470,13 +500,10 @@ class EventManager(object):
                 'type': event_type.key,
                 # we cache the events metadata on the group to ensure its
                 # accessible in the stream
-                'metadata': event_type.get_metadata(),
+                'metadata': event_metadata,
             },
         })
 
-        # TODO(dcramer): temp workaround for complexity
-        del data['message']
-
         if release:
             release = Release.get_or_create(
                 project=project,
diff --git a/src/sentry/eventtypes/base.py b/src/sentry/eventtypes/base.py
index 53e6ab3be4..125c745773 100644
--- a/src/sentry/eventtypes/base.py
+++ b/src/sentry/eventtypes/base.py
@@ -24,7 +24,10 @@ class DefaultEvent(BaseEvent):
         return True
 
     def get_metadata(self):
-        message = strip(self.data.get('message'))
+        # See GH-3248
+        message = strip(self.data.get('sentry.interfaces.Message', {
+            'message': self.data.get('message', ''),
+        })['message'])
         if not message:
             title = '<unlabeled event>'
         else:
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index 2ca377e869..865ca95ae2 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -10,6 +10,8 @@ from __future__ import absolute_import
 
 __all__ = ('Message',)
 
+from django.conf import settings
+
 from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils.safe import trim
 
@@ -29,13 +31,16 @@ class Message(Interface):
     >>>     "params": ["this"]
     >>> }
     """
+    score = 0
+    display_score = 1050
+
     @classmethod
     def to_python(cls, data):
         if not data.get('message'):
             raise InterfaceValidationError("No 'message' present")
 
         kwargs = {
-            'message': trim(data['message'], 2048)
+            'message': trim(data['message'], settings.SENTRY_MAX_MESSAGE_LENGTH)
         }
 
         if data.get('params'):
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 4592b4a5d8..46c15c67e7 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -6,7 +6,6 @@ import EventErrors from './errors';
 import EventExtraData from './extraData';
 import EventPackageData from './packageData';
 import EventTags from './eventTags';
-import EventMessage from './message';
 import EventSdk from './sdk';
 import EventDevice from './device';
 import EventUser from './user';
@@ -39,6 +38,7 @@ const EventEntries = React.createClass({
   // TODO(dcramer): make this extensible
   interfaces: {
     exception: require('./interfaces/exception'),
+    message: require('./interfaces/message'),
     request: require('./interfaces/request'),
     stacktrace: require('./interfaces/stacktrace'),
     template: require('./interfaces/template'),
@@ -99,9 +99,6 @@ const EventEntries = React.createClass({
             group={group}
             event={evt} />
         }
-        <EventMessage
-          group={group}
-          event={evt} />
         <EventTags
           group={group}
           event={evt}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
new file mode 100644
index 0000000000..6ca2ab8691
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
@@ -0,0 +1,38 @@
+import React from 'react';
+
+import EventDataSection from '../eventDataSection';
+import PropTypes from '../../../proptypes';
+import utils from '../../../utils';
+import {t} from '../../../locale';
+
+const MessageInterface = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    type: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    let data = this.props.data;
+    return (
+      <EventDataSection
+          group={this.props.group}
+          event={this.props.event}
+          type="message"
+          title={t('Message')}>
+        <pre className="plain" dangerouslySetInnerHTML={{
+          __html: utils.nl2br(utils.urlize(utils.escape(data.message)))
+        }} />
+        {data.params &&
+          <div>
+            <h3>{t('Params')}</h3>
+            <pre className="plain">{JSON.stringify(data.params, null, 2)}</pre>
+          </div>
+        }
+      </EventDataSection>
+    );
+  }
+});
+
+export default MessageInterface;
diff --git a/src/sentry/static/sentry/app/components/events/message.jsx b/src/sentry/static/sentry/app/components/events/message.jsx
deleted file mode 100644
index e6ba0fb66d..0000000000
--- a/src/sentry/static/sentry/app/components/events/message.jsx
+++ /dev/null
@@ -1,27 +0,0 @@
-import React from 'react';
-import EventDataSection from './eventDataSection';
-import utils from '../../utils';
-import {t} from '../../locale';
-
-const Message = React.createClass({
-  propTypes: {
-    group: React.PropTypes.object.isRequired,
-    event: React.PropTypes.object.isRequired
-  },
-
-  render() {
-    return (
-      <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="message"
-          title={t('Message')}>
-        <pre className="plain" dangerouslySetInnerHTML={{
-          __html: utils.nl2br(utils.urlize(utils.escape(this.props.event.message)))
-        }} />
-      </EventDataSection>
-    );
-  }
-});
-
-export default Message;
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 1c95a593a9..db2cf8be63 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -437,7 +437,7 @@ class CspReportTest(TestCase):
         assert Event.objects.count() == 1
         e = Event.objects.all()[0]
         Event.objects.bind_nodes([e], 'data')
-        assert e.message == output['message']
+        assert output['message'] == e.data['sentry.interfaces.Message']['message']
         for key, value in output['tags'].iteritems():
             assert e.get_tag(key) == value
         self.assertDictContainsSubset(output['data'], e.data.data, e.data.data)
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index b638e5702f..719f590c1b 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -40,9 +40,11 @@ class EventManagerTest(TransactionTestCase):
         # 'event.message' instead of '[event.message]' which caused it to
         # generate a hash per letter
         manager = EventManager(self.make_event(message='foo bar'))
+        manager.normalize()
         event1 = manager.save(1)
 
         manager = EventManager(self.make_event(message='foo baz'))
+        manager.normalize()
         event2 = manager.save(1)
 
         assert event1.group_id != event2.group_id
@@ -213,6 +215,7 @@ class EventManagerTest(TransactionTestCase):
             fingerprint=['{{ default }}', 'a' * 32],
         ))
         with self.tasks():
+            manager.normalize()
             event = manager.save(1)
 
         manager = EventManager(self.make_event(
@@ -220,6 +223,7 @@ class EventManagerTest(TransactionTestCase):
             fingerprint=['a' * 32],
         ))
         with self.tasks():
+            manager.normalize()
             event2 = manager.save(1)
 
         assert event.group_id != event2.group_id
@@ -384,7 +388,8 @@ class EventManagerTest(TransactionTestCase):
             message='x' * (settings.SENTRY_MAX_MESSAGE_LENGTH + 1),
         ))
         data = manager.normalize()
-        assert len(data['message']) == settings.SENTRY_MAX_MESSAGE_LENGTH
+        assert len(data['sentry.interfaces.Message']['message']) == \
+            settings.SENTRY_MAX_MESSAGE_LENGTH
 
     def test_default_version(self):
         manager = EventManager(self.make_event())
