commit b7055d128235f42f7e3485acda427d0edadd2299
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon Dec 3 12:46:53 2018 -0800

    feat(ui): Show current rows in event stream (#10877)

diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 7ea4ddd69b..03acd5248b 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -3,6 +3,7 @@ import {isEqual} from 'lodash';
 import React from 'react';
 import styled from 'react-emotion';
 
+import utils from 'app/utils';
 import {Panel} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
@@ -16,6 +17,17 @@ import EventsChart from './eventsChart';
 import EventsTable from './eventsTable';
 import SearchBar from './searchBar';
 
+const parseRowFromLinks = (links, numRows) => {
+  links = utils.parseLinkHeader(links);
+  if (!links.previous.results) {
+    return `1-${numRows}`;
+  }
+  let prevStart = links.previous.cursor.split(':')[1];
+  let nextStart = links.next.cursor.split(':')[1];
+  let currentStart = (prevStart + nextStart) / 2 + 1;
+  return `${currentStart}-${currentStart + numRows - 1}`;
+};
+
 class OrganizationEvents extends AsyncView {
   static propTypes = {
     organization: SentryTypes.Organization,
@@ -79,6 +91,11 @@ class OrganizationEvents extends AsyncView {
     });
   };
 
+  renderRowCounts() {
+    const {events, eventsPageLinks} = this.state;
+    return parseRowFromLinks(eventsPageLinks, events.length);
+  }
+
   renderBody() {
     const {organization, location} = this.props;
     const {reloading, events, eventsPageLinks} = this.state;
@@ -102,7 +119,10 @@ class OrganizationEvents extends AsyncView {
 
         <EventsTable reloading={reloading} events={events} organization={organization} />
 
-        <Pagination pageLinks={eventsPageLinks} />
+        <Flex align="center" justify="space-between">
+          <RowDisplay>{t(`Results ${this.renderRowCounts()}`)}</RowDisplay>
+          <Pagination pageLinks={eventsPageLinks} />
+        </Flex>
       </React.Fragment>
     );
   }
@@ -121,5 +141,9 @@ const StyledSearchBar = styled(SearchBar)`
   flex: 1;
 `;
 
+const RowDisplay = styled('div')`
+  color: ${p => p.theme.gray6};
+`;
+
 export default withOrganization(OrganizationEvents);
-export {OrganizationEvents};
+export {OrganizationEvents, parseRowFromLinks};
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index d7aaaa59fe..2e01783a5b 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -1,10 +1,18 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import {OrganizationEvents} from 'app/views/organizationEvents/events';
+import {OrganizationEvents, parseRowFromLinks} from 'app/views/organizationEvents/events';
 
 jest.mock('app/utils/withLatestContext');
 
+const pageOneLinks =
+  '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", ' +
+  '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:100:0>; rel="next"; results="true"; cursor="0:100:0"';
+
+const pageTwoLinks =
+  '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:0:1>; rel="previous"; results="true"; cursor="0:0:1", ' +
+  '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:200:0>; rel="next"; results="false"; cursor="0:200:0"';
+
 describe('OrganizationEventsErrors', function() {
   const project = TestStubs.Project({isMember: true});
   const org = TestStubs.Organization({projects: [project]});
@@ -20,6 +28,7 @@ describe('OrganizationEventsErrors', function() {
     eventsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events/',
       body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
+      headers: {Link: pageOneLinks},
     });
     eventsStatsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
@@ -90,3 +99,15 @@ describe('OrganizationEventsErrors', function() {
     );
   });
 });
+
+describe('parseRowFromLinks', function() {
+  it('calculates rows for first page', function() {
+    expect(parseRowFromLinks(pageOneLinks, 10)).toBe('1-10');
+    expect(parseRowFromLinks(pageOneLinks, 100)).toBe('1-100');
+  });
+
+  it('calculates rows for the second page', function() {
+    expect(parseRowFromLinks(pageTwoLinks, 10)).toBe('101-110');
+    expect(parseRowFromLinks(pageTwoLinks, 100)).toBe('101-200');
+  });
+});
