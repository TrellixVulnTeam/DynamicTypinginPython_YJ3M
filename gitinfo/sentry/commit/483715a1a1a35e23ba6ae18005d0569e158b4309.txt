commit 483715a1a1a35e23ba6ae18005d0569e158b4309
Author: Danny Lee <dlee@sentry.io>
Date:   Tue Oct 15 10:12:41 2019 -0700

    fix(discover-v2): Fix "count()" morphing to "count" in URL when state is updated (#15088)
    
    - The query-string "aggregate(field)" was wrongly decoded if field is an empty string
    
    - Replace `void 0` in eventView.tsx with `undefined`
    - Remove jest.fn() on browserHistory.push because it has been mocked

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index df7fa8e076..65e6a899c3 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -51,13 +51,16 @@ export const AGGREGATIONS = {
 };
 export type Aggregation = keyof typeof AGGREGATIONS | '';
 
+// TODO(leedongwei)
+// Add line-breaks to these fields that'll show on TableModalEditColumn. It's
+// hella dense at the moment.
 /**
  * Refer to src/sentry/utils/snuba.py, search for SENTRY_SNUBA_MAP
  */
 export const FIELDS = {
-  title: 'string',
   id: 'string',
 
+  title: 'string',
   project: 'name',
   environment: 'string',
   release: 'string',
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 9eaa837541..21299160bc 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -128,7 +128,7 @@ const decodeTags = (location: Location): Array<string> => {
 
 const decodeQuery = (location: Location): string | undefined => {
   if (!location.query || !location.query.query) {
-    return void 0;
+    return undefined;
   }
 
   const queryParameter = location.query.query;
@@ -138,7 +138,7 @@ const decodeQuery = (location: Location): string | undefined => {
       ? queryParameter[0]
       : isString(queryParameter)
       ? queryParameter
-      : void 0;
+      : undefined;
 
   return isString(query) ? query.trim() : undefined;
 };
@@ -156,15 +156,15 @@ const decodeScalar = (
   value: string[] | string | undefined | null
 ): string | undefined => {
   if (!value) {
-    return void 0;
+    return undefined;
   }
   const unwrapped =
     Array.isArray(value) && value.length > 0
       ? value[0]
       : isString(value)
       ? value
-      : void 0;
-  return isString(unwrapped) ? unwrapped : void 0;
+      : undefined;
+  return isString(unwrapped) ? unwrapped : undefined;
 };
 
 function isLegacySavedQuery(
@@ -430,7 +430,7 @@ class EventView {
 
   getDefaultSort(): string | undefined {
     if (this.sorts.length <= 0) {
-      return void 0;
+      return undefined;
     }
 
     return encodeSort(this.sorts[0]);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 8cb31eeeb9..c993a8766c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -265,15 +265,18 @@ export function decodeColumnOrder(
 
   return columnsRaw.map(col => {
     const column: TableColumn<React.ReactText> = {...TEMPLATE_TABLE_COLUMN};
-    const aggregationField = col.aggregationField
-      .split(ROUND_BRACKETS_PATTERN)
-      .filter(Boolean);
 
-    if (aggregationField.length === 2) {
+    // "field" will be split into ["field"]
+    // "agg()" will be split into ["agg", "", ""]
+    // "agg(field)" will be split to ["agg", "field", ""]
+    // Any column without brackets are assumed to be a field
+    const aggregationField = col.aggregationField.split(ROUND_BRACKETS_PATTERN);
+
+    if (aggregationField.length === 1) {
+      column.field = aggregationField[0] as Field;
+    } else {
       column.aggregation = aggregationField[0] as Aggregation;
       column.field = aggregationField[1] as Field;
-    } else if (aggregationField.length === 1) {
-      column.field = aggregationField[0] as Field;
     }
 
     column.key = col.aggregationField;
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 9f6f317b42..cc7fa77910 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -342,6 +342,33 @@ describe('decodeColumnOrderAndColumnSortBy', function() {
       order: 'desc',
     });
   });
+
+  it('can decode elements with aggregate functions but no fields', function() {
+    const location = {
+      query: {
+        field: ['a()'],
+        fieldnames: ['ant()'],
+        sort: ['-a()'],
+      },
+    };
+    const table = decodeColumnOrderAndColumnSortBy(location);
+
+    expect(Array.isArray(table.columnOrder)).toBeTruthy();
+    expect(Array.isArray(table.columnSortBy)).toBeTruthy();
+    expect(table.columnOrder).toHaveLength(1);
+    expect(table.columnSortBy).toHaveLength(1);
+
+    expect(table.columnOrder[0]).toMatchObject({
+      key: 'a()',
+      name: 'ant()',
+      aggregation: 'a',
+      field: '',
+    });
+    expect(table.columnSortBy[0]).toMatchObject({
+      key: 'a()',
+      order: 'desc',
+    });
+  });
 });
 
 describe('encodeColumnOrderAndColumnSortBy', function() {
@@ -446,20 +473,6 @@ describe('setColumnStateOnLocation', function() {
       },
     },
   };
-  let browserHistoryPush;
-
-  beforeAll(() => {
-    browserHistoryPush = browserHistory.push;
-    browserHistory.push = jest.fn();
-  });
-
-  afterAll(() => {
-    browserHistory.push = browserHistoryPush;
-  });
-
-  beforeEach(() => {
-    browserHistory.push.mockClear();
-  });
 
   it('will copy Location object correctly', function() {
     setColumnStateOnLocation(location, [], []);
