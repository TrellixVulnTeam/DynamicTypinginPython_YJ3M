commit 9cfdeeb0cd429b838f4c0b92d6fa82de081df5a2
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Mar 20 14:06:10 2015 -0700

    Correct scrubbers to use canonical interface paths

diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 1a00d4d365..ca56c3e322 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -52,15 +52,17 @@ class SensitiveDataFilter(object):
             self.fields = DEFAULT_SCRUBBED_FIELDS
 
     def apply(self, data):
-        if 'stacktrace' in data:
-            self.filter_stacktrace(data['stacktrace'])
+        # TODO(dcramer): move this into each interface
+        if 'sentry.interfaces.Stacktrace' in data:
+            self.filter_stacktrace(data['sentry.interfaces.Stacktrace'])
 
-        if 'exception' in data:
-            if 'stacktrace' in data['exception']:
-                self.filter_stacktrace(data['exception']['stacktrace'])
+        if 'sentry.interfaces.Exception' in data:
+            for exc in data['sentry.interfaces.Exception']['values']:
+                if 'stacktrace' in exc:
+                    self.filter_stacktrace(exc['stacktrace'])
 
-        if 'request' in data:
-            self.filter_http(data['request'])
+        if 'sentry.interfaces.Http' in data:
+            self.filter_http(data['sentry.interfaces.Http'])
 
         if 'extra' in data:
             data['extra'] = varmap(self.sanitize, data['extra'])
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index c6a3036450..d1423d0b9b 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -48,20 +48,25 @@ class EventManagerTest(TransactionTestCase):
         assert EventMapping.objects.filter(
             group=event.group, event_id=event_id).exists()
 
-    @patch('sentry.models.GroupManager.add_tags')
-    def test_tags_as_list(self, add_tags):
+    def test_tags_as_list(self):
         manager = EventManager(self.make_event(tags=[('foo', 'bar')]))
         data = manager.normalize()
 
         assert data['tags'] == [('foo', 'bar')]
 
-    @patch('sentry.models.GroupManager.add_tags')
-    def test_tags_as_dict(self, add_tags):
+    def test_tags_as_dict(self):
         manager = EventManager(self.make_event(tags={'foo': 'bar'}))
         data = manager.normalize()
 
         assert data['tags'] == [('foo', 'bar')]
 
+    def test_interface_is_relabeled(self):
+        manager = EventManager(self.make_event(user={'id': '1'}))
+        data = manager.normalize()
+
+        assert data['sentry.interfaces.User'] == {'id': '1'}
+        assert 'user' not in data
+
     def test_platform_is_saved(self):
         manager = EventManager(self.make_event(platform='python'))
         event = manager.save(1)
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index 589272183c..de25685c3a 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -35,7 +35,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_stacktrace(self):
         data = {
-            'stacktrace': {
+            'sentry.interfaces.Stacktrace': {
                 'frames': [{'vars': VARS}],
             }
         }
@@ -43,8 +43,8 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        self.assertTrue('stacktrace' in data)
-        stack = data['stacktrace']
+        self.assertTrue('sentry.interfaces.Stacktrace' in data)
+        stack = data['sentry.interfaces.Stacktrace']
         self.assertTrue('frames' in stack)
         self.assertEquals(len(stack['frames']), 1)
         frame = stack['frames'][0]
@@ -53,7 +53,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_http(self):
         data = {
-            'request': {
+            'sentry.interfaces.Http': {
                 'data': VARS,
                 'env': VARS,
                 'headers': VARS,
@@ -64,8 +64,8 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        self.assertTrue('request' in data)
-        http = data['request']
+        self.assertTrue('sentry.interfaces.Http' in data)
+        http = data['sentry.interfaces.Http']
         for n in ('data', 'env', 'headers', 'cookies'):
             self.assertTrue(n in http)
             self._check_vars_sanitized(http[n], proc)
@@ -83,7 +83,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_querystring_as_string(self):
         data = {
-            'request': {
+            'sentry.interfaces.Http': {
                 'query_string': 'foo=bar&password=hello&the_secret=hello'
                                 '&a_password_here=hello&api_key=secret_key',
             }
@@ -92,8 +92,8 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        self.assertTrue('request' in data)
-        http = data['request']
+        self.assertTrue('sentry.interfaces.Http' in data)
+        http = data['sentry.interfaces.Http']
         self.assertEquals(
             http['query_string'],
             'foo=bar&password=%(m)s&the_secret=%(m)s'
@@ -101,7 +101,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_querystring_as_string_with_partials(self):
         data = {
-            'request': {
+            'sentry.interfaces.Http': {
                 'query_string': 'foo=bar&password&baz=bar',
             }
         }
@@ -109,8 +109,8 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        self.assertTrue('request' in data)
-        http = data['request']
+        self.assertTrue('sentry.interfaces.Http' in data)
+        http = data['sentry.interfaces.Http']
         self.assertEquals(http['query_string'], 'foo=bar&password&baz=bar' % dict(m=proc.MASK))
 
     def test_sanitize_additional_sensitive_fields(self):
