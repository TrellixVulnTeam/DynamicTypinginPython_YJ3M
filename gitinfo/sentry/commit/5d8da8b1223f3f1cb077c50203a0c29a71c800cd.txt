commit 5d8da8b1223f3f1cb077c50203a0c29a71c800cd
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jul 31 18:33:16 2015 -0700

    Functional release emails (fixes GH-1670)

diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index 4c88cef2ba..13ff2d037a 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -8,6 +8,7 @@ sentry.models.activity
 from __future__ import absolute_import
 
 from django.conf import settings
+from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import F
 from django.utils import timezone
@@ -16,6 +17,7 @@ from sentry.db.models import (
     Model, BoundedPositiveIntegerField, FlexibleForeignKey, GzippedDictField,
     sane_repr
 )
+from sentry.utils.http import absolute_uri
 
 
 class Activity(Model):
@@ -110,12 +112,10 @@ class Activity(Model):
         return send_to
 
     def send_notification(self):
+        from sentry.models import Release
         from sentry.utils.email import MessageBuilder, group_id_to_email
 
-        if not self.group_id:
-            return
-
-        if self.type not in (Activity.NOTE, Activity.ASSIGNED):
+        if self.type not in (Activity.NOTE, Activity.ASSIGNED, Activity.RELEASE):
             return
 
         send_to = self.get_recipients()
@@ -123,6 +123,9 @@ class Activity(Model):
         if not send_to:
             return
 
+        project = self.project
+        org = self.project.organization
+
         author = self.user.first_name or self.user.username
 
         subject_prefix = self.project.get_option(
@@ -130,18 +133,47 @@ class Activity(Model):
         if subject_prefix:
             subject_prefix = subject_prefix.rstrip() + ' '
 
-        subject = '%s%s' % (subject_prefix, self.group.get_email_subject())
+        if self.group:
+            subject = '%s%s' % (subject_prefix, self.group.get_email_subject())
+        elif self.type == Activity.RELEASE:
+            subject = '%sRelease %s' % (subject_prefix, self.data['version'])
+        else:
+            raise NotImplementedError
+
+        headers = {}
 
         context = {
             'data': self.data,
             'author': author,
-            'group': self.group,
-            'link': self.group.get_absolute_url(),
+            'project_link': absolute_uri(reverse('sentry-stream', kwargs={
+                'organization_slug': org.slug,
+                'project_id': project.slug,
+            })),
         }
 
-        headers = {
-            'X-Sentry-Reply-To': group_id_to_email(self.group.id),
-        }
+        if self.group:
+            headers.update({
+                'X-Sentry-Reply-To': group_id_to_email(self.group.id),
+            })
+
+            context.update({
+                'group': self.group,
+                'link': self.group.get_absolute_url(),
+            })
+
+        # TODO(dcramer): abstract each activity email into its own helper class
+        if self.type == Activity.RELEASE:
+            context.update({
+                'release': Release.objects.get(
+                    version=self.data['version'],
+                    project=project,
+                ),
+                'release_link': absolute_uri(reverse('sentry-release-details', kwargs={
+                    'organization_slug': org.slug,
+                    'project_id': project.slug,
+                    'version': self.data['version'],
+                })),
+            })
 
         template_name = self.get_type_display()
 
diff --git a/src/sentry/templates/sentry/emails/new-release.html b/src/sentry/templates/sentry/emails/activity/release.html
similarity index 100%
rename from src/sentry/templates/sentry/emails/new-release.html
rename to src/sentry/templates/sentry/emails/activity/release.html
diff --git a/src/sentry/templates/sentry/emails/new-release.txt b/src/sentry/templates/sentry/emails/activity/release.txt
similarity index 100%
rename from src/sentry/templates/sentry/emails/new-release.txt
rename to src/sentry/templates/sentry/emails/activity/release.txt
diff --git a/src/sentry/web/frontend/debug/debug_new_release_email.py b/src/sentry/web/frontend/debug/debug_new_release_email.py
index b18cf7d324..62b6477e4f 100644
--- a/src/sentry/web/frontend/debug/debug_new_release_email.py
+++ b/src/sentry/web/frontend/debug/debug_new_release_email.py
@@ -49,8 +49,8 @@ class DebugNewReleaseEmailView(View):
         }))
 
         preview = MailPreview(
-            html_template='sentry/emails/new-release.html',
-            text_template='sentry/emails/new-release.txt',
+            html_template='sentry/emails/activity/release.html',
+            text_template='sentry/emails/activity/release.txt',
             context={
                 'release': release,
                 'project': project,
diff --git a/tests/sentry/models/activity/tests.py b/tests/sentry/models/activity/tests.py
index 5d5b112b92..9936ec42a5 100644
--- a/tests/sentry/models/activity/tests.py
+++ b/tests/sentry/models/activity/tests.py
@@ -1,11 +1,13 @@
+from __future__ import absolute_import
+
 from django.core import mail
 
-from sentry.models import Activity
+from sentry.models import Activity, Release
 from sentry.testutils import TestCase
 
 
 class SendNotificationTest(TestCase):
-    def test_simple(self):
+    def test_note(self):
         user_foo = self.create_user('foo@example.com')
 
         activity = Activity.objects.create(
@@ -33,3 +35,33 @@ class SendNotificationTest(TestCase):
         assert msg.extra_headers['Message-Id'] == '<activity/%s@localhost>' % activity.pk
         assert msg.extra_headers['In-Reply-To'] == '<group/%s@localhost>' % self.group.pk
         assert msg.extra_headers['References'] == '<group/%s@localhost>' % self.group.pk
+
+    def test_release(self):
+        user_foo = self.create_user('foo@example.com')
+
+        release = Release.objects.create(
+            project=self.project,
+            version='a' * 40,
+        )
+
+        activity = Activity.objects.create(
+            project=self.project,
+            type=Activity.RELEASE,
+            user=user_foo,
+            event=self.create_event('a' * 32, group=self.group),
+            data={
+                'version': release.version,
+            },
+        )
+
+        self.project.team.organization.member_set.create(user=user_foo)
+
+        with self.tasks():
+            activity.send_notification()
+
+        assert len(mail.outbox) == 1
+
+        msg = mail.outbox[0]
+
+        assert msg.subject == '[Sentry] Release %s' % (release.version,)
+        assert msg.to == [self.user.email]
