commit 0c9a43e63129c82b9db0d8f761a5cc89b7263ce2
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Oct 5 14:40:41 2015 -0700

    Tags from from API shouldn't overwrite predefined tags (fixes GH-2092)

diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index 52addd55ed..55bf5815bf 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -6,9 +6,12 @@ import MemberListStore from "./memberListStore";
 var StreamTagStore = Reflux.createStore({
   listenables: StreamTagActions,
 
-  init: function() {
+  init() {
     this.listenTo(MemberListStore, this.onMemberListStoreChange);
+    this.reset();
+  },
 
+  reset() {
     this.tags = {
       is: {
         key: 'is',
@@ -47,11 +50,16 @@ var StreamTagStore = Reflux.createStore({
 
   onLoadTagsSuccess(data) {
     Object.assign(this.tags, _.reduce(data, (obj, tag) => {
+
       tag = Object.assign({
         values: []
       }, tag);
 
-      obj[tag.key] = tag;
+      let old = this.tags[tag.key];
+
+      // Don't override predefined filters (e.g. "is")
+      if (!old || !old.predefined)
+        obj[tag.key] = tag;
 
       return obj;
     }, {}));
diff --git a/tests/js/spec/stores/streamTagStore.spec.jsx b/tests/js/spec/stores/streamTagStore.spec.jsx
new file mode 100644
index 0000000000..a532552614
--- /dev/null
+++ b/tests/js/spec/stores/streamTagStore.spec.jsx
@@ -0,0 +1,42 @@
+import StreamTagStore from "app/stores/streamTagStore";
+
+describe("StreamTagStore", function () {
+  beforeEach(() => {
+    StreamTagStore.reset();
+    this.sandbox = sinon.sandbox.create();
+  });
+
+  afterEach(() => {
+    this.sandbox.restore();
+  });
+
+  describe("onLoadTagsSuccess()", () => {
+
+    it("should add a new tag with empty values and trigger the new addition", () => {
+      this.sandbox.stub(StreamTagStore, 'trigger');
+
+      StreamTagStore.onLoadTagsSuccess([{
+        key: 'mytag',
+        name: 'My Custom Tag'
+      }]);
+
+      expect(StreamTagStore.tags.mytag).to.eql({
+        key: 'mytag',
+        name: 'My Custom Tag',
+        values: []
+      });
+
+      expect(StreamTagStore.trigger.calledOnce).to.be.ok;
+    });
+
+    it("should not overwrite predefined filters", () => {
+      let isTag = StreamTagStore.tags.is;
+      StreamTagStore.onLoadTagsSuccess([{
+        key: 'is',
+        name: 'Custom Assigned To'
+      }]);
+
+      expect(StreamTagStore.tags.is).to.equal(isTag);
+    });
+  });
+});
\ No newline at end of file
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 38416a72df..a5a64d63ff 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -2,6 +2,7 @@ import React from "react/addons";
 import api from "app/api";
 import SearchBar from "app/views/stream/searchBar";
 import SearchDropdown from "app/views/stream/searchDropdown";
+import StreamTagStore from "app/stores/streamTagStore";
 import stubReactComponents from "../../../helpers/stubReactComponent";
 import stubRouter from "../../../helpers/stubRouter";
 import stubContext from "../../../helpers/stubContext";
@@ -12,6 +13,8 @@ var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 describe("SearchBar", function() {
 
   beforeEach(function() {
+    StreamTagStore.reset();
+
     this.sandbox = sinon.sandbox.create();
 
     this.sandbox.stub(api, "request");
