commit eb5e2410f7d20b480f40a956f00b930f4daee157
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed Nov 22 17:05:32 2017 +0100

    feat: Setup Wizard
    
    * feat: Add endpoint for setup wizard
    
    * feat: Add wizard complete, Delete cache
    
    * feat: Add auto close
    
    * fix: Redirect after login
    
    * ref: Restructure cache key, fix tests
    
    * fix: eslint
    
    * ref: Add tests
    
    * ref: Add frontend tests
    
    * feat: Add automatic api key creation
    
    * feat: Add finished state to loading indicator
    
    * feat: Use internal api calls instead of requests in frontend
    
    * fix: Python lint error
    
    * feat: Add more tests
    
    * ref: Use redis cache, Fix routes, Ratelimit per ip

diff --git a/src/sentry/api/client.py b/src/sentry/api/client.py
index cf9c3d30c8..2ac9b5c9f0 100644
--- a/src/sentry/api/client.py
+++ b/src/sentry/api/client.py
@@ -39,7 +39,10 @@ class ApiClient(object):
         is_superuser=None,
         request=None
     ):
-        full_path = self.prefix + path
+        if self.prefix not in path:
+            full_path = self.prefix + path
+        else:
+            full_path = path
 
         # we explicitly do not allow you to override the request *and* the user
         # as then other checks like is_superuser would need overwritten
diff --git a/src/sentry/api/endpoints/setup_wizard.py b/src/sentry/api/endpoints/setup_wizard.py
new file mode 100644
index 0000000000..197ca16ccf
--- /dev/null
+++ b/src/sentry/api/endpoints/setup_wizard.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+import logging
+
+from rest_framework.response import Response
+
+from sentry import ratelimits
+from sentry.cache import default_cache
+from sentry.api.base import Endpoint
+from sentry.api.serializers import serialize
+from django.utils.crypto import get_random_string
+
+logger = logging.getLogger('sentry.api')
+SETUP_WIZARD_CACHE_KEY = 'setup-wizard-keys:v1:'
+SETUP_WIZARD_CACHE_TIMEOUT = 600
+
+
+class SetupWizard(Endpoint):
+    permission_classes = ()
+
+    def delete(self, request, wizard_hash=None):
+        """
+        This removes the cache content for a specific hash
+        """
+        if wizard_hash is not None:
+            key = '%s%s' % (SETUP_WIZARD_CACHE_KEY, wizard_hash)
+            default_cache.delete(key)
+            return Response(status=200)
+
+    def get(self, request, wizard_hash=None):
+        """
+        This tries to retrieve and return the cache content if possible
+        otherwise creates new cache
+        """
+        if wizard_hash is not None:
+            key = '%s%s' % (SETUP_WIZARD_CACHE_KEY, wizard_hash)
+            wizard_data = default_cache.get(key)
+
+            if wizard_data is None:
+                return Response(status=404)
+            elif wizard_data == 'empty':
+                # when we just created a clean cache
+                return Response(status=400)
+
+            return Response(serialize(wizard_data))
+        else:
+            # This creates a new available hash url for the project wizard
+            rate_limited = ratelimits.is_limited(
+                key='rl:setup-wizard:ip:%s' % request.META['REMOTE_ADDR'],
+                limit=10,
+            )
+            if rate_limited:
+                logger.info('setup-wizard.rate-limit')
+                return Response(
+                    {
+                        'Too wizard requests',
+                    }, status=403
+                )
+            wizard_hash = get_random_string(
+                64, allowed_chars='abcdefghijklmnopqrstuvwxyz012345679')
+
+            key = '%s%s' % (SETUP_WIZARD_CACHE_KEY, wizard_hash)
+            default_cache.set(key, 'empty', SETUP_WIZARD_CACHE_TIMEOUT)
+            return Response(serialize({'hash': wizard_hash}))
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index c7e35af1f4..7b74881eec 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -130,6 +130,8 @@ from .endpoints.user_index import UserIndexEndpoint
 from .endpoints.user_details import UserDetailsEndpoint
 from .endpoints.user_organizations import UserOrganizationsEndpoint
 from .endpoints.event_file_committers import EventFileCommittersEndpoint
+from .endpoints.setup_wizard import SetupWizard
+
 
 urlpatterns = patterns(
     '',
@@ -779,6 +781,21 @@ urlpatterns = patterns(
     url(r'^internal/queue/tasks/$', InternalQueueTasksEndpoint.as_view()),
     url(r'^internal/stats/$', InternalStatsEndpoint.as_view(),
         name='sentry-api-0-internal-stats'),
+
+    # Project Wizard
+    url(
+        r'^wizard/$',
+        SetupWizard.as_view(),
+        name='sentry-api-0-project-wizard-new'
+    ),
+
+    url(
+        r'^wizard/(?P<wizard_hash>[^\/]+)/$',
+        SetupWizard.as_view(),
+        name='sentry-api-0-project-wizard'
+    ),
+
+    # Catch all
     url(r'^$', IndexEndpoint.as_view(), name='sentry-api-index'),
     url(r'^', CatchallEndpoint.as_view(), name='sentry-api-catchall'),
 
diff --git a/src/sentry/static/sentry/app/components/setupWizard.jsx b/src/sentry/static/sentry/app/components/setupWizard.jsx
new file mode 100644
index 0000000000..53ef221970
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/setupWizard.jsx
@@ -0,0 +1,82 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {Client} from '../api';
+import LoadingIndicator from './loadingIndicator';
+
+class SetupWizard extends React.Component {
+  static propTypes = {
+    hash: PropTypes.string.isRequired,
+  };
+
+  static defaultProps = {
+    hash: false,
+  };
+
+  constructor(props, context) {
+    super(props, context);
+
+    this.state = this.getDefaultState();
+  }
+
+  componentWillMount() {
+    this.api = new Client();
+    this.pollFinished();
+  }
+
+  getDefaultState() {
+    return {
+      log: [],
+      finished: false,
+    };
+  }
+
+  pollFinished() {
+    return new Promise((resolve, reject) => {
+      this.api.request(`/wizard/${this.props.hash}/`, {
+        method: 'GET',
+        success: data => {
+          setTimeout(() => this.pollFinished(), 1000);
+        },
+        error: err => {
+          resolve();
+          this.setState({
+            finished: true,
+          });
+          setTimeout(() => window.close(), 10000);
+        },
+      });
+    });
+  }
+
+  renderSuccess() {
+    return (
+      <div className="row">
+        <h5>Return to your terminal to complete your setup</h5>
+        <h5>(This window will close in 10 sec)</h5>
+        <button className="btn btn-default" onClick={() => window.close()}>
+          Close browser tab
+        </button>
+      </div>
+    );
+  }
+
+  renderLoading() {
+    return (
+      <div className="row">
+        <h5>Waiting for wizard to connect</h5>
+      </div>
+    );
+  }
+
+  render() {
+    return (
+      <div className="container">
+        <LoadingIndicator style={{margin: '2em auto'}} finished={this.state.finished}>
+          {this.state.finished ? this.renderSuccess() : this.renderLoading()}
+        </LoadingIndicator>
+      </div>
+    );
+  }
+}
+
+export default SetupWizard;
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 2869d4c2eb..40d8d5cf65 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -152,6 +152,7 @@ export default {
     Badge: require('./components/badge').default,
     Switch: require('./components/switch').default,
     NumberConfirm: require('./components/confirms/numberConfirm').default,
+    SetupWizard: require('./components/setupWizard').default,
     utils: {
       errorHandler: require('./utils/errorHandler').default,
       logging: require('./utils/logging'),
diff --git a/src/sentry/templates/sentry/setup-wizard.html b/src/sentry/templates/sentry/setup-wizard.html
new file mode 100644
index 0000000000..92c3091879
--- /dev/null
+++ b/src/sentry/templates/sentry/setup-wizard.html
@@ -0,0 +1,17 @@
+{% extends "sentry/bases/auth.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_assets %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Sentry - Setup Wizard" %}{% endblock %}
+
+{% block auth_main %}
+  <div id="setup-wizard-container"></div>
+  <script>
+    ReactDOM.render(React.createElement(Sentry.SetupWizard, {
+      hash: {{ hash|to_json|safe }}
+    }), document.getElementById('setup-wizard-container'));
+  </script>
+{% endblock %}
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 9bc0b2e643..17961f49f7 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -16,7 +16,8 @@ from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
 from sentry.utils import auth
 
-ERR_NO_SSO = _('The organization does not exist or does not have Single Sign-On enabled.')
+ERR_NO_SSO = _(
+    'The organization does not exist or does not have Single Sign-On enabled.')
 
 
 class AuthLoginView(BaseView):
@@ -56,7 +57,10 @@ class AuthLoginView(BaseView):
         return bool(auth.has_user_registration() or request.session.get('can_register'))
 
     def get_next_uri(self, request, *args, **kwargs):
-        return request.GET.get(REDIRECT_FIELD_NAME, None)
+        next_uri_fallback = None
+        if request.session.get('_next') is not None:
+            next_uri_fallback = request.session.pop('_next')
+        return request.GET.get(REDIRECT_FIELD_NAME, next_uri_fallback)
 
     def respond_login(self, request, context, *args, **kwargs):
         return self.respond('sentry/login.html', context)
@@ -75,7 +79,8 @@ class AuthLoginView(BaseView):
         login_form = self.get_login_form(request)
         if can_register:
             register_form = self.get_register_form(
-                request, initial={'username': request.session.get('invite_email', '')}
+                request, initial={
+                    'username': request.session.get('invite_email', '')}
             )
         else:
             register_form = None
@@ -169,7 +174,8 @@ class AuthLoginView(BaseView):
 
         session_expired = 'session_expired' in request.COOKIES
         if session_expired:
-            messages.add_message(request, messages.WARNING, WARN_SESSION_EXPIRED)
+            messages.add_message(request, messages.WARNING,
+                                 WARN_SESSION_EXPIRED)
 
         response = self.handle_basic_auth(request, *args, **kwargs)
 
@@ -182,9 +188,11 @@ class AuthLoginView(BaseView):
     def post(self, request, *args, **kwargs):
         op = request.POST.get('op')
         if op == 'sso' and request.POST.get('organization'):
-            auth_provider = self.get_auth_provider(request.POST['organization'])
+            auth_provider = self.get_auth_provider(
+                request.POST['organization'])
             if auth_provider:
-                next_uri = reverse('sentry-auth-organization', args=[request.POST['organization']])
+                next_uri = reverse('sentry-auth-organization',
+                                   args=[request.POST['organization']])
             else:
                 next_uri = request.get_full_path()
                 messages.add_message(request, messages.ERROR, ERR_NO_SSO)
diff --git a/src/sentry/web/frontend/setup_wizard.py b/src/sentry/web/frontend/setup_wizard.py
new file mode 100644
index 0000000000..449013bbd4
--- /dev/null
+++ b/src/sentry/web/frontend/setup_wizard.py
@@ -0,0 +1,73 @@
+from __future__ import absolute_import
+
+from sentry.cache import default_cache
+from django.core.urlresolvers import reverse
+
+from sentry.api import client
+from sentry.models import ApiToken
+from sentry.api.serializers import serialize
+from sentry.web.frontend.base import BaseView
+from sentry.web.helpers import render_to_response
+from sentry.api.endpoints.setup_wizard import SETUP_WIZARD_CACHE_KEY, SETUP_WIZARD_CACHE_TIMEOUT
+
+
+class SetupWizardView(BaseView):
+
+    def get(self, request, wizard_hash):
+        """
+        This opens a page where with an active session fill stuff into the cache
+        Redirects to organization whenever cache has been deleted
+        """
+        context = {
+            'hash': wizard_hash
+        }
+        key = '%s%s' % (SETUP_WIZARD_CACHE_KEY, wizard_hash)
+
+        wizard_data = default_cache.get(key)
+        if wizard_data is None:
+            return self.redirect_to_org(request)
+
+        orgs = client.get(
+            reverse('sentry-api-0-organizations'), request=request)
+
+        filled_projects = []
+
+        for org in orgs.data:
+            projects = client.get(reverse('sentry-api-0-organization-projects', kwargs={
+                'organization_slug': org.get('slug')
+            }), request=request)
+            for project in projects.data:
+                enriched_project = project
+                enriched_project['organization'] = org
+                keys = client.get(reverse('sentry-api-0-project-keys', kwargs={
+                    'organization_slug': org.get('slug'),
+                    'project_slug': project.get('slug')
+                }), request=request)
+                enriched_project['keys'] = keys.data
+                filled_projects.append(enriched_project)
+
+        # Fetching or creating a token
+        token = None
+        tokens = [
+            x for x in ApiToken.objects.filter(user=request.user).all()
+            if 'project:releases' in x.get_scopes()
+        ]
+        if not tokens:
+            token = ApiToken.objects.create(
+                user=request.user,
+                scope_list=['project:releases'],
+                refresh_token=None,
+                expires_at=None,
+            )
+        else:
+            token = tokens[0]
+
+        result = {
+            'apiKeys': serialize(token),
+            'projects': filled_projects
+        }
+
+        key = '%s%s' % (SETUP_WIZARD_CACHE_KEY, wizard_hash)
+        default_cache.set(key, result, SETUP_WIZARD_CACHE_TIMEOUT)
+
+        return render_to_response('sentry/setup-wizard.html', context, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 5555d67066..433f409f05 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -68,6 +68,8 @@ from sentry.web.frontend.sudo import SudoView
 from sentry.web.frontend.unsubscribe_issue_notifications import \
     UnsubscribeIssueNotificationsView
 from sentry.web.frontend.user_avatar import UserAvatarPhotoView
+from sentry.web.frontend.setup_wizard import SetupWizardView
+
 
 __all__ = ('urlpatterns', )
 
@@ -265,6 +267,13 @@ urlpatterns += patterns(
     url(r'^account/settings/emails/$', accounts.show_emails,
         name='sentry-account-settings-emails'),
 
+    # Project Wizard
+    url(
+        r'^account/settings/wizard/(?P<wizard_hash>[^\/]+)/$',
+        SetupWizardView.as_view(),
+        name='sentry-project-wizard-fetch'
+    ),
+
     # compatibility
     url(
         r'^account/settings/notifications/unsubscribe/(?P<project_id>\d+)/$',
diff --git a/tests/sentry/api/endpoints/test_setup_wizard.py b/tests/sentry/api/endpoints/test_setup_wizard.py
new file mode 100644
index 0000000000..3cf06d1c62
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_setup_wizard.py
@@ -0,0 +1,68 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class SetupWizardTest(APITestCase):
+    def test_simple(self):
+        self.create_project(
+            name='foo'
+        )
+
+        url = reverse(
+            'sentry-api-0-project-wizard-new'
+        )
+
+        self.login_as(user=self.user)
+
+        response = self.client.get(url)
+        assert response.status_code == 200, response.content
+        assert response.data['hash']
+
+    def test_anonymous(self):
+        self.create_project(
+            name='foo'
+        )
+
+        url = reverse(
+            'sentry-api-0-project-wizard-new'
+        )
+
+        response = self.client.get(url)
+        assert response.status_code == 200, response.content
+
+    def test_fill_and_read(self):
+        self.create_project(
+            name='foo'
+        )
+
+        url = reverse(
+            'sentry-api-0-project-wizard-new'
+        )
+
+        self.login_as(user=self.user)
+
+        response = self.client.get(url)
+        wizard_hash = response.data['hash']
+        assert response.status_code == 200, response.content
+        assert wizard_hash
+
+        url2 = reverse(
+            'sentry-api-0-project-wizard',
+            kwargs={
+                'wizard_hash': wizard_hash
+            }
+        )
+
+        response2 = self.client.get(url2)
+        assert response2.status_code == 400, response2.content
+
+        # Delete content of cache
+        self.client.delete(url2)
+
+        response5 = self.client.get(url2)
+        assert response5.status_code == 404, response5.content
diff --git a/tests/sentry/web/frontend/test_setup_wizard.py b/tests/sentry/web/frontend/test_setup_wizard.py
new file mode 100644
index 0000000000..2380e8a106
--- /dev/null
+++ b/tests/sentry/web/frontend/test_setup_wizard.py
@@ -0,0 +1,49 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.core.cache import cache
+
+from sentry.testutils import PermissionTestCase
+from sentry.api.endpoints.setup_wizard import SETUP_WIZARD_CACHE_KEY
+
+
+class SetupWizard(PermissionTestCase):
+    def test_redirect(self):
+        user = self.create_user('foo@example.com', is_active=False)
+
+        url = reverse('sentry-project-wizard-fetch', kwargs={
+            'wizard_hash': 'abc'
+        })
+        resp = self.client.get(url)
+
+        self.login_as(user)
+
+        assert resp.status_code == 302
+
+    def test_simple(self):
+        self.create_organization(owner=self.user)
+
+        self.login_as(self.user)
+
+        key = '%s%s' % (SETUP_WIZARD_CACHE_KEY, 'abc')
+        cache.set(key, 'test')
+
+        url = reverse('sentry-project-wizard-fetch', kwargs={
+            'wizard_hash': 'abc'
+        })
+        resp = self.client.get(url)
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/setup-wizard.html')
+
+    def test_redirect_to_org(self):
+        self.create_organization(owner=self.user)
+
+        self.login_as(self.user)
+
+        url = reverse('sentry-project-wizard-fetch', kwargs={
+            'wizard_hash': 'xyz'
+        })
+        resp = self.client.get(url)
+
+        assert resp.status_code == 302
