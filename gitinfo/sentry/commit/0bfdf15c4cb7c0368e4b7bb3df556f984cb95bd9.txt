commit 0bfdf15c4cb7c0368e4b7bb3df556f984cb95bd9
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Fri Sep 6 11:17:06 2019 -0700

    ref(ts): Refactor OrganizationUserFeedback to typescript (#14598)

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 60f297a79b..d932960beb 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -394,3 +394,9 @@ export type InternalAppApiToken = BaseApiToken & {
   token: string;
   refreshToken: string;
 };
+
+export type UserReport = {
+  id: string;
+  eventID: string;
+  issue: Group;
+};
diff --git a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.tsx
similarity index 83%
rename from src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
rename to src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.tsx
index da9dcc9d27..2344e3d568 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.tsx
@@ -1,7 +1,9 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 import styled from 'react-emotion';
 
 import {PageContent} from 'app/styles/organization';
+import {Organization, UserReport} from 'app/types';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import CompactIssue from 'app/components/issues/compactIssue';
@@ -17,12 +19,20 @@ import UserFeedbackContainer from './container';
 import UserFeedbackEmpty from './userFeedbackEmpty';
 import {getQuery} from './utils';
 
-class OrganizationUserFeedback extends AsyncView {
+type State = AsyncView['state'] & {
+  reportList: UserReport[];
+};
+
+type Props = RouteComponentProps<{orgId: string}, {}> & {
+  organization: Organization;
+};
+
+class OrganizationUserFeedback extends AsyncView<Props, State> {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
   };
 
-  getEndpoints() {
+  getEndpoints(): [string, string, any][] {
     const {
       organization,
       location: {search},
@@ -43,6 +53,16 @@ class OrganizationUserFeedback extends AsyncView {
     return `${t('User Feedback')} - ${this.props.organization.slug}`;
   }
 
+  get projectIds() {
+    const {project} = this.props.location.query;
+
+    return Array.isArray(project)
+      ? project
+      : typeof project === 'string'
+      ? [project]
+      : [];
+  }
+
   renderResults() {
     const {orgId} = this.props.params;
 
@@ -61,10 +81,7 @@ class OrganizationUserFeedback extends AsyncView {
   }
 
   renderEmpty() {
-    const {project} = this.props.location.query;
-    const projectIds = project ? [].concat(project) : [];
-
-    return <UserFeedbackEmpty projectIds={projectIds} />;
+    return <UserFeedbackEmpty projectIds={this.projectIds} />;
   }
 
   renderLoading() {
