commit c13b2f6757702e9685b9c885331e9bad686a9090
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Jun 26 16:17:46 2020 -0700

    feat(metric_alerts): Start writing to AlertRule.resolve_threshold (#19541)
    
    This pr starts writing to the new AlertRule.resolve_threshold field. We aren't using this field
    just yet, but we want to start keeping it in sync.
    
    https://github.com/getsentry/sentry/pull/19524

diff --git a/src/sentry/incidents/endpoints/serializers.py b/src/sentry/incidents/endpoints/serializers.py
index 2843ae00be..41d1cfead6 100644
--- a/src/sentry/incidents/endpoints/serializers.py
+++ b/src/sentry/incidents/endpoints/serializers.py
@@ -303,6 +303,7 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
             "time_window",
             "environment",
             "threshold_type",
+            "resolve_threshold",
             "threshold_period",
             "aggregate",
             "projects",
@@ -314,6 +315,7 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
             "name": {"min_length": 1, "max_length": 64},
             "include_all_projects": {"default": False},
             "threshold_type": {"required": False},
+            "resolve_threshold": {"required": False},
         }
 
     def validate_aggregate(self, aggregate):
@@ -428,6 +430,23 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
             self._validate_trigger_thresholds(threshold_type, warning)
             self._validate_critical_warning_triggers(threshold_type, critical, warning)
 
+        # Temporarily fetch resolve threshold from the triggers if one isn't explicitly
+        # passed to the alert rule.
+        if "resolve_threshold" not in data:
+            trigger_resolve_thresholds = [
+                trigger["resolve_threshold"]
+                for trigger in triggers
+                if trigger.get("resolve_threshold")
+            ]
+            if trigger_resolve_thresholds:
+                data["resolve_threshold"] = (
+                    min(trigger_resolve_thresholds)
+                    if threshold_type == AlertRuleThresholdType.ABOVE
+                    else max(trigger_resolve_thresholds)
+                )
+            else:
+                data["resolve_threshold"] = None
+
         # Triggers have passed checks. Check that all triggers have at least one action now.
         for trigger in triggers:
             actions = trigger.get("actions")
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index bbc585380c..05217fcbc8 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -532,6 +532,7 @@ def create_alert_rule(
     time_window,
     threshold_type,
     threshold_period,
+    resolve_threshold=None,
     environment=None,
     include_all_projects=False,
     excluded_projects=None,
@@ -552,6 +553,8 @@ def create_alert_rule(
     :param threshold_type: An AlertRuleThresholdType
     :param threshold_period: How many update periods the value of the
     subscription needs to exceed the threshold before triggering
+    :param resolve_threshold: Optional value that the subscription needs to reach to
+    resolve the alert
     :param include_all_projects: Whether to include all current and future projects
     from this organization
     :param excluded_projects: List of projects to exclude if we're using
@@ -578,6 +581,7 @@ def create_alert_rule(
             snuba_query=snuba_query,
             name=name,
             threshold_type=threshold_type.value,
+            resolve_threshold=resolve_threshold,
             threshold_period=threshold_period,
             include_all_projects=include_all_projects,
         )
@@ -642,6 +646,7 @@ def update_alert_rule(
     environment=None,
     threshold_type=None,
     threshold_period=None,
+    resolve_threshold=None,
     include_all_projects=None,
     excluded_projects=None,
 ):
@@ -660,6 +665,8 @@ def update_alert_rule(
     :param threshold_type: An AlertRuleThresholdType
     :param threshold_period: How many update periods the value of the
     subscription needs to exceed the threshold before triggering
+    :param resolve_threshold: Optional value that the subscription needs to reach to
+    resolve the alert
     :param include_all_projects: Whether to include all current and future projects
     from this organization
     :param excluded_projects: List of projects to exclude if we're using
@@ -686,6 +693,8 @@ def update_alert_rule(
         updated_query_fields["time_window"] = timedelta(minutes=time_window)
     if threshold_type:
         updated_fields["threshold_type"] = threshold_type.value
+    if resolve_threshold:
+        updated_fields["resolve_threshold"] = resolve_threshold
     if threshold_period:
         updated_fields["threshold_period"] = threshold_period
     if include_all_projects is not None:
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 52f25e6270..1657cf05a7 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -866,6 +866,7 @@ class Factories(object):
         date_added=None,
         dataset=QueryDatasets.EVENTS,
         threshold_type=AlertRuleThresholdType.ABOVE,
+        resolve_threshold=None,
     ):
         if not name:
             name = petname.Generate(2, " ", letters=10).title()
@@ -879,6 +880,7 @@ class Factories(object):
             time_window,
             threshold_type,
             threshold_period,
+            resolve_threshold=resolve_threshold,
             dataset=dataset,
             environment=environment,
             include_all_projects=include_all_projects,
diff --git a/tests/sentry/incidents/endpoints/test_serializers.py b/tests/sentry/incidents/endpoints/test_serializers.py
index f89c308aa6..945da747a7 100644
--- a/tests/sentry/incidents/endpoints/test_serializers.py
+++ b/tests/sentry/incidents/endpoints/test_serializers.py
@@ -29,6 +29,7 @@ class TestAlertRuleSerializer(TestCase):
             "dataset": QueryDatasets.EVENTS.value,
             "query": "level:error",
             "threshold_type": 0,
+            "resolve_threshold": 100,
             "aggregate": "count()",
             "threshold_period": 1,
             "projects": [self.project.slug],
@@ -242,6 +243,32 @@ class TestAlertRuleSerializer(TestCase):
         assert serializer.is_valid(), serializer.errors
         assert serializer.validated_data["threshold_type"] == AlertRuleThresholdType.ABOVE
 
+    def test_alert_rule_resolved_overrides_trigger(self):
+        payload = {
+            "name": "hello_im_a_test",
+            "time_window": 10,
+            "query": "level:error",
+            "aggregate": "count()",
+            "resolve_threshold": 50,
+            "threshold_period": 1,
+            "projects": [self.project.slug],
+            "triggers": [
+                {
+                    "label": "critical",
+                    "alertThreshold": 98,
+                    "resolveThreshold": 100,
+                    "thresholdType": 1,
+                    "actions": [
+                        {"type": "email", "targetType": "team", "targetIdentifier": self.team.id}
+                    ],
+                }
+            ],
+        }
+        serializer = AlertRuleSerializer(context=self.context, data=payload, partial=True)
+
+        assert serializer.is_valid(), serializer.errors
+        assert serializer.validated_data["resolve_threshold"] == 50
+
     def test_boundary(self):
         payload = {
             "name": "hello_im_a_test",
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 44fa21730f..786fcb3648 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -662,6 +662,7 @@ class CreateAlertRuleTest(TestCase, BaseIncidentsTest):
         aggregate = "count(*)"
         time_window = 10
         threshold_type = AlertRuleThresholdType.ABOVE
+        resolve_threshold = 10
         threshold_period = 1
         alert_rule = create_alert_rule(
             self.organization,
@@ -672,6 +673,7 @@ class CreateAlertRuleTest(TestCase, BaseIncidentsTest):
             time_window,
             threshold_type,
             threshold_period,
+            resolve_threshold=resolve_threshold,
         )
         assert alert_rule.snuba_query.subscriptions.get().project == self.project
         assert alert_rule.name == name
@@ -683,6 +685,7 @@ class CreateAlertRuleTest(TestCase, BaseIncidentsTest):
         assert alert_rule.snuba_query.time_window == time_window * 60
         assert alert_rule.snuba_query.resolution == DEFAULT_ALERT_RULE_RESOLUTION * 60
         assert alert_rule.threshold_type == threshold_type.value
+        assert alert_rule.resolve_threshold == resolve_threshold
         assert alert_rule.threshold_period == threshold_period
 
     def test_include_all_projects(self):
