commit f1eb5cbe087d77268bb724f7e23069aadece36e9
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Mar 3 14:49:42 2016 -0800

    Toggling project bookmark in UI reflects state in TeamStore

diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
new file mode 100644
index 0000000000..92e874f615
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -0,0 +1,17 @@
+import ProjectActions from '../actions/projectActions';
+
+export function update(api, params) {
+  ProjectActions.update(params.projectId, params.data);
+
+  let endpoint = '/projects/' + params.orgId + '/' + params.projectId + '/';
+  api.request(endpoint, {
+    method: 'PUT',
+    data: params.data,
+    success: function (changeId) {
+      ProjectActions.updateSuccess(changeId);
+    },
+    error: function (changeId) {
+      ProjectActions.updateError(changeId);
+    }
+  });
+}
diff --git a/src/sentry/static/sentry/app/actions/projectActions.jsx b/src/sentry/static/sentry/app/actions/projectActions.jsx
new file mode 100644
index 0000000000..40655acc05
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/projectActions.jsx
@@ -0,0 +1,7 @@
+import Reflux from 'reflux';
+
+export default Reflux.createActions([
+  'update',
+  'updateError',
+  'updateSuccess'
+]);
diff --git a/src/sentry/static/sentry/app/actions/teamActions.jsx b/src/sentry/static/sentry/app/actions/teamActions.jsx
index f011c91f67..09ba97c5ba 100644
--- a/src/sentry/static/sentry/app/actions/teamActions.jsx
+++ b/src/sentry/static/sentry/app/actions/teamActions.jsx
@@ -1,4 +1,3 @@
-
 import Reflux from 'reflux';
 
 let TeamActions = Reflux.createActions([
@@ -9,4 +8,3 @@ let TeamActions = Reflux.createActions([
 
 
 export default TeamActions;
-
diff --git a/src/sentry/static/sentry/app/stores/projectStore.jsx b/src/sentry/static/sentry/app/stores/projectStore.jsx
new file mode 100644
index 0000000000..c934c5c4ea
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/projectStore.jsx
@@ -0,0 +1,36 @@
+import Reflux from 'reflux';
+import ProjectActions from '../actions/projectActions';
+
+const ProjectStore = Reflux.createStore({
+  init() {
+    this.items = [];
+
+    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);
+  },
+
+  reset() {
+    this.items = [];
+  },
+
+  loadInitialData(items) {
+    this.items = items;
+    this.trigger(new Set(items.map(item => item.id)));
+  },
+
+  onUpdateSuccess(data) {
+    let project = this.getById(data.id);
+    Object.assign(project, data);
+    this.trigger(new Set(data.id));
+  },
+
+  getAll() {
+    return this.items;
+  },
+
+  getById(id) {
+    return this.items.find(project => project.id === id);
+  }
+});
+
+export default ProjectStore;
+
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 9dcb96b7c8..8833dc5ad7 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -1,78 +1,64 @@
 import Reflux from 'reflux';
 import TeamActions from '../actions/teamActions';
+import ProjectStore from './projectStore';
 
 const TeamStore = Reflux.createStore({
   init() {
-    this.items = [];
+    this.reset();
 
     this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
+    this.listenTo(ProjectStore, this.onProject);
   },
 
   reset() {
     this.items = [];
+    this.projectMap = {}; // map of project ids => team ids
   },
 
   loadInitialData(items) {
+    items.forEach(item => {
+      item.projects.forEach(project => {
+        this.projectMap[project.id] = item.id;
+      });
+    });
     this.items = items;
     this.trigger(new Set(items.map(item => item.id)));
   },
 
-  add(items) {
-    if (!items instanceof Array) {
-      items = [items];
-    }
-
-    let itemsById = {};
-    let itemIds = new Set();
-    items.forEach((item) => {
-      itemsById[item.id] = item;
-      itemIds.add(item.id);
-    });
-
-    items.forEach((item, idx) => {
-      if (itemsById[item.id]) {
-        this.items[idx] = jQuery.extend(true, {}, item, itemsById[item.id]);
-        delete itemsById[item.id];
-      }
-    });
-
-    for (let itemId in itemsById) {
-      this.items.push(itemsById[itemId]);
-    }
-
-    this.trigger(itemIds);
-  },
-
   onUpdateSuccess(changeId, itemId, response) {
-    if (!response) {
+    if (!response)
       return;
-    }
+
     let item = this.getBySlug(itemId);
     if (!item) {
       this.items.push(response);
     } else {
-      $.extend(true, item, response);
+      $.extend(true /*deep*/, item, response);
     }
+
     this.trigger(new Set([itemId]));
   },
 
+  onProject(projectIds) {
+    let teamsChanged = new Set();
+    projectIds.forEach((set, projectId) => {
+      let teamId = this.projectMap[projectId];
+      let team = this.getById(teamId);
+
+      // TODO: make copy of project? right now just assigning reference
+      // to project form project store
+      team.project = ProjectStore.getById(projectId);
+      teamsChanged.add(team.id);
+    });
+    this.trigger(teamsChanged);
+  },
+
   getById(id) {
-    id = '' + id;
-    for (let i = 0; i < this.items.length; i++) {
-      if (this.items[i].id === id) {
-        return this.items[i];
-      }
-    }
-    return null;
+    return this.items.find(item => item.id === '' + id) || null;
   },
 
   getBySlug(slug) {
-    for (let i = 0; i < this.items.length; i++) {
-      if (this.items[i].slug === slug) {
-        return this.items[i];
-      }
-    }
-    return null;
+    return this.items.find(item => item.slug === slug) || null;
   },
 
   getActive() {
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index e4274581a1..b483733d96 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -8,6 +8,7 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import PropTypes from '../proptypes';
 import TeamStore from '../stores/teamStore';
+import ProjectStore from '../stores/projectStore';
 import {t} from '../locale';
 
 let ERROR_TYPES = {
@@ -96,6 +97,9 @@ const OrganizationDetails = React.createClass({
         });
 
         TeamStore.loadInitialData(data.teams);
+        ProjectStore.loadInitialData(data.teams.reduce((out, team) => {
+          return out.concat(team.projects);
+        }, []));
       }, error: (_, textStatus, errorThrown) => {
         let errorType = null;
         switch (errorThrown) {
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
index 5b38bb47b9..94752bf07d 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -3,6 +3,7 @@ import {Link} from 'react-router';
 import LazyLoad from 'react-lazy-load';
 
 import ApiMixin from '../../mixins/apiMixin';
+import {update as projectUpdate} from '../../actionCreators/projects';
 import BarChart from '../../components/barChart';
 import ProjectLabel from '../../components/projectLabel';
 import ConfigStore from '../../stores/configStore';
@@ -19,9 +20,7 @@ const ExpandedTeamList = React.createClass({
     hasTeams: React.PropTypes.bool
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   leaveTeam(team) {
     // TODO(dcramer): handle loading indicator
@@ -36,6 +35,10 @@ const ExpandedTeamList = React.createClass({
     return ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
   },
 
+  onProjectChange() {
+
+  },
+
   renderProjectList(team) {
     return (
       <tbody>
@@ -95,14 +98,12 @@ const ExpandedTeamList = React.createClass({
   },
 
   toggleBookmark(project) {
-    let orgSlug = this.props.organization.slug;
-    // TODO(dcramer): we have no great way to populate changes to projects
-    // currently
-    this.api.request(`/projects/${orgSlug}/${project.slug}/`, {
-      method: 'PUT',
+    projectUpdate(this.api, {
+      orgId: this.props.organization.slug,
+      projectId: project.slug,
       data: {
-        isBookmarked: !project.isBookmarked,
-      },
+        isBookmarked: !project.isBookmarked
+      }
     });
   },
 
