commit 414882922fb10e2cbec890efce4780f9a3f1802b
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 1 14:53:08 2014 -0300

    Merge api changes from v7

diff --git a/.gitignore b/.gitignore
index beb4022d5d..dac23c590f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -18,4 +18,5 @@ pip-log.txt
 /docs/doctrees
 example/db.sqlite
 /src/sentry/static/CACHE/
-/wheelhouse
\ No newline at end of file
+/wheelhouse
+/env
diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index c1657fc48a..35be16d7ae 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -1,8 +1,8 @@
-from sentry.models import ProjectKey
-
 from rest_framework.authentication import BasicAuthentication
 from rest_framework.exceptions import AuthenticationFailed
 
+from sentry.models import ProjectKey
+
 
 class KeyAuthentication(BasicAuthentication):
     def authenticate_credentials(self, userid, password):
@@ -15,3 +15,8 @@ class KeyAuthentication(BasicAuthentication):
             raise AuthenticationFailed('Invalid api key')
 
         return (pk.user, pk)
+
+
+class QuietBasicAuthentication(BasicAuthentication):
+    def authenticate_header(self, request):
+        return 'xBasic realm="%s"' % self.www_authenticate_realm
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index f5168210df..7224d01cd4 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -1,12 +1,62 @@
 from rest_framework.authentication import SessionAuthentication
 from rest_framework.parsers import JSONParser
+from rest_framework.response import Response
 from rest_framework.views import APIView
+from urllib2 import quote
 
 from .authentication import KeyAuthentication
-from .permissions import HasProjectPermission
+from .paginator import Paginator
 
 
-class BaseView(APIView):
+LINK_HEADER = '<{uri}&cursor={cursor}>; rel="{name}"'
+
+
+class Endpoint(APIView):
     authentication_classes = (KeyAuthentication, SessionAuthentication)
-    permission_classes = (HasProjectPermission,)
     parser_classes = (JSONParser,)
+
+    def paginate(self, request, on_results=lambda x: x, **kwargs):
+        input_cursor = request.GET.get('cursor')
+        per_page = int(request.GET.get('per_page', 100))
+
+        assert per_page <= 100
+
+        paginator = Paginator(**kwargs)
+        cursor = paginator.get_cursor(
+            limit=per_page,
+            cursor=input_cursor,
+        )
+
+        # map results based on callback
+        results = on_results(cursor.results)
+
+        links = []
+        if cursor.has_prev:
+            links.append(('previous', cursor.prev))
+        if cursor.has_next:
+            links.append(('next', cursor.next))
+
+        querystring = u'&'.join(
+            u'{0}={1}'.format(quote(k), quote(v))
+            for k, v in request.GET.iteritems()
+            if k != 'cursor'
+        )
+        base_url = request.build_absolute_uri(request.path)
+        if querystring:
+            base_url = '{0}?{1}'.format(base_url, querystring)
+        else:
+            base_url = base_url + '?'
+
+        link_values = []
+        for name, cursor in links:
+            link_values.append(LINK_HEADER.format(
+                uri=base_url,
+                cursor=cursor,
+                name=name,
+            ))
+
+        headers = {}
+        if link_values:
+            headers['Link'] = ', '.join(link_values)
+
+        return Response(results, headers=headers)
diff --git a/src/sentry/api/decorators.py b/src/sentry/api/decorators.py
new file mode 100644
index 0000000000..589ddd81c9
--- /dev/null
+++ b/src/sentry/api/decorators.py
@@ -0,0 +1,21 @@
+import json
+
+from django.http import HttpResponse
+from django_sudo.utils import has_sudo_privileges
+from functools import wraps
+
+
+def sudo_required(func):
+    @wraps(func)
+    def wrapped(self, request, *args, **kwargs):
+        if not has_sudo_privileges(request):
+            # TODO(dcramer): support some kind of auth flow to allow this
+            # externally
+            data = {
+                "error": "Account verification required.",
+                "sudoRequired": True,
+                "username": request.user.username,
+            }
+            return HttpResponse(json.dumps(data), status=401)
+        return func(self, request, *args, **kwargs)
+    return wrapped
diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
new file mode 100644
index 0000000000..96df391f06
--- /dev/null
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -0,0 +1,26 @@
+from django.contrib.auth import login, logout
+from rest_framework.response import Response
+
+from sentry.api.authentication import QuietBasicAuthentication
+from sentry.api.base import Endpoint
+
+
+class AuthIndexEndpoint(Endpoint):
+    authentication_classes = [QuietBasicAuthentication]
+
+    def post(self, request):
+        if not request.user.is_authenticated():
+            return Response(status=400)
+
+        # Must use the real request object that Django knows about
+        login(request._request, request.user)
+
+        # TODO: make internal request to UserDetailsEndpoint
+        from sentry.api.endpoints.user_details import UserDetailsEndpoint
+        endpoint = UserDetailsEndpoint()
+        response = endpoint.get(request, user_id=request.user.id)
+        return response
+
+    def delete(self, request, *args, **kwargs):
+        logout(request._request)
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/catchall.py b/src/sentry/api/endpoints/catchall.py
new file mode 100644
index 0000000000..a994641aa1
--- /dev/null
+++ b/src/sentry/api/endpoints/catchall.py
@@ -0,0 +1,15 @@
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+
+
+class CatchallEndpoint(Endpoint):
+    def get(self, request):
+        return Response(status=404)
+
+    post = get
+    put = get
+    delete = get
+    patch = get
+    options = get
+    head = get
diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
new file mode 100644
index 0000000000..a6e783b682
--- /dev/null
+++ b/src/sentry/api/endpoints/event_details.py
@@ -0,0 +1,61 @@
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.models import Event
+from sentry.web.helpers import group_is_public
+
+
+class EventDetailsEndpoint(Endpoint):
+    def _get_entries(self, request, event):
+        # XXX(dcramer): These are called entries for future-proofing
+        is_public = group_is_public(event.group, request.user)
+
+        interface_list = []
+        for interface in event.interfaces.itervalues():
+            entry = {
+                'data': interface.get_json_context(),
+                'type': interface.get_type_name(),
+            }
+            interface_list.append((interface, entry))
+        interface_list.sort(key=lambda x: x[0].get_display_score(), reverse=True)
+
+        return [i[1] for i in interface_list]
+
+    def get(self, request, event_id):
+        event = Event.objects.get(
+            id=event_id
+        )
+
+        assert_perm(event, request.user)
+
+        Event.objects.bind_nodes([event], 'data')
+
+        base_qs = Event.objects.filter(
+            group=event.group_id,
+        ).exclude(id=event.id)
+        try:
+            next_event = base_qs.filter(datetime__gte=event.datetime).order_by('datetime')[0:1].get()
+        except Event.DoesNotExist:
+            next_event = None
+
+        try:
+            prev_event = base_qs.filter(datetime__lte=event.datetime).order_by('-datetime')[0:1].get()
+        except Event.DoesNotExist:
+            prev_event = None
+
+        data = serialize(event, request.user)
+
+        if next_event:
+            data['nextEventID'] = str(next_event.id)
+        else:
+            data['nextEventID'] = None
+        if prev_event:
+            data['previousEventID'] = str(prev_event.id)
+        else:
+            data['previousEventID'] = None
+
+        data['entries'] = self._get_entries(request, event)
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/group_bookmark.py b/src/sentry/api/endpoints/group_bookmark.py
new file mode 100644
index 0000000000..732c294e09
--- /dev/null
+++ b/src/sentry/api/endpoints/group_bookmark.py
@@ -0,0 +1,24 @@
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.models import Group, GroupBookmark
+
+from rest_framework.response import Response
+
+
+class GroupBookmarkEndpoint(Endpoint):
+    def post(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        bookmark = GroupBookmark(
+            project=group.project,
+            group=group,
+            user=request.user,
+        )
+
+        bookmark.save()
+
+        return Response()
diff --git a/src/sentry/api/endpoints/group_delete.py b/src/sentry/api/endpoints/group_delete.py
new file mode 100644
index 0000000000..5eb4b57f36
--- /dev/null
+++ b/src/sentry/api/endpoints/group_delete.py
@@ -0,0 +1,18 @@
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.models import Group
+
+from rest_framework.response import Response
+
+
+class GroupDeleteEndpoint(Endpoint):
+    def post(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        group.delete()
+
+        return Response()
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index fca99d961e..6a35766bc0 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -1,99 +1,63 @@
-from django.utils import timezone
-from django.utils.decorators import method_decorator
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.api.base import BaseView
-from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, STATUS_UNRESOLVED
-from sentry.models import Group, Activity
-from sentry.web.decorators import has_access
-from sentry.utils.javascript import transform
-
-from rest_framework import serializers, status
 from rest_framework.response import Response
 
-
-class StatusField(serializers.WritableField):
-    choices = {
-        'resolved': STATUS_RESOLVED,
-        'unresolved': STATUS_UNRESOLVED,
-        'muted': STATUS_MUTED,
-    }
-    default_error_messages = {
-        'invalid_choice': _('Select a valid choice. %(value)s is not one of '
-                            'the available choices.'),
-    }
-
-    _rev_choice_map = dict((v, k) for k, v in choices.iteritems())
-
-    def validate(self, value):
-        """
-        Validates that the input is in self.choices.
-        """
-        super(StatusField, self).validate(value)
-        if value and value not in self._rev_choice_map:
-            raise serializers.ValidationError(
-                self.error_messages['invalid_choice'] % {'value': value})
-
-    def to_native(self, value):
-        return self._rev_choice_map[value]
-
-    def from_native(self, value):
-        return self.choices[value]
-
-
-class GroupSerializer(serializers.ModelSerializer):
-    status = StatusField()
-
-    class Meta:
-        model = Group
-        fields = ('id', 'status', 'times_seen', 'last_seen', 'first_seen', 'resolved_at', 'active_at')
-        read_only_fields = ('id', 'times_seen', 'last_seen', 'first_seen', 'resolved_at', 'active_at')
-
-
-class GroupDetailsView(BaseView):
-    @method_decorator(has_access)
-    def get(self, request, team, project, group_id):
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.models import Activity, Group, GroupSeen
+
+
+class GroupDetailsEndpoint(Endpoint):
+    def _get_activity(self, request, group, num=7):
+        activity_items = set()
+        activity = []
+        activity_qs = Activity.objects.filter(
+            group=group,
+        ).order_by('-datetime').select_related('user')
+        # we select excess so we can filter dupes
+        for item in activity_qs[:num * 2]:
+            sig = (item.event_id, item.type, item.ident, item.user_id)
+            # TODO: we could just generate a signature (hash(text)) for notes
+            # so theres no special casing
+            if item.type == Activity.NOTE:
+                activity.append(item)
+            elif sig not in activity_items:
+                activity_items.add(sig)
+                activity.append(item)
+
+        activity.append(Activity(
+            project=group.project,
+            group=group,
+            type=Activity.FIRST_SEEN,
+            datetime=group.first_seen,
+        ))
+
+        return activity[:num]
+
+    def _get_seen_by(self, request, group):
+        seen_by = sorted([
+            (gs.user, gs.last_seen)
+            for gs in GroupSeen.objects.filter(
+                group=group
+            ).select_related('user')
+        ], key=lambda ls: ls[1], reverse=True)
+        return [s[0] for s in seen_by]
+
+    def get(self, request, group_id):
         group = Group.objects.get(
             id=group_id,
-            project=project,
         )
-        serializer = GroupSerializer(group)
-
-        return Response(serializer.data)
-
-    @method_decorator(has_access)
-    def put(self, request, team, project, group_id):
-        group = Group.objects.get(
-            id=group_id,
-            project=project,
-        )
-
-        serializer = GroupSerializer(group, data=request.DATA)
-        if not serializer.is_valid():
-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
-
-        now = timezone.now()
 
-        # It's important that we ensure state changes are atomic and that we
-        # dont create multiple activity transactions
-        if request.DATA.get('status') == 'resolved':
-            group.resolved_at = now
+        assert_perm(group, request.user)
 
-            happened = Group.objects.filter(
-                id=group.id,
-            ).exclude(status=STATUS_RESOLVED).update(
-                status=STATUS_RESOLVED,
-                resolved_at=now,
-            )
+        data = serialize(group, request.user)
 
-            if happened:
-                Activity.objects.create(
-                    project=project,
-                    group=group,
-                    type=Activity.SET_RESOLVED,
-                    user=request.user,
-                )
+        # TODO: these probably should be another endpoint
+        activity = self._get_activity(request, group, num=7)
+        seen_by = self._get_seen_by(request, group)
 
-        serializer.save()
+        data.update({
+            'activity': serialize(activity, request.user),
+            'seenBy': serialize(seen_by, request.user),
+        })
 
-        return Response(transform(group, request))
+        return Response(data)
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
new file mode 100644
index 0000000000..5c2d407651
--- /dev/null
+++ b/src/sentry/api/endpoints/group_events.py
@@ -0,0 +1,24 @@
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.models import Event, Group
+
+
+class GroupEventsEndpoint(Endpoint):
+    def get(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        events = Event.objects.filter(
+            group=group
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=events,
+            order_by='-datetime',
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/endpoints/group_events_latest.py b/src/sentry/api/endpoints/group_events_latest.py
new file mode 100644
index 0000000000..5d58592b00
--- /dev/null
+++ b/src/sentry/api/endpoints/group_events_latest.py
@@ -0,0 +1,19 @@
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.models import Group
+
+
+class GroupEventsLatestEndpoint(Endpoint):
+    def get(self, request, group_id):
+        group = Group.objects.get(id=group_id)
+
+        assert_perm(group, request.user)
+
+        event = group.get_latest_event()
+
+        return HttpResponseRedirect(reverse('sentry-api-0-event-details', kwargs={
+            'event_id': event.id,
+        }))
diff --git a/src/sentry/api/endpoints/group_index.py b/src/sentry/api/endpoints/group_index.py
deleted file mode 100644
index ce5d8fa2b0..0000000000
--- a/src/sentry/api/endpoints/group_index.py
+++ /dev/null
@@ -1,32 +0,0 @@
-from django.core.urlresolvers import reverse
-from django.utils.decorators import method_decorator
-
-from sentry.api.base import BaseView
-from sentry.web.decorators import has_access
-from sentry.web.frontend.groups import _get_group_list
-from sentry.utils.http import absolute_uri
-from sentry.utils.javascript import transform
-
-from rest_framework.response import Response
-
-
-class GroupListView(BaseView):
-    @method_decorator(has_access)
-    def get(self, request, team, project):
-        offset = 0
-        limit = 100
-
-        response = _get_group_list(
-            request=request,
-            project=project,
-        )
-
-        group_list = response['event_list']
-        group_list = list(group_list[offset:limit])
-
-        # TODO: need to make a custom serializer
-        results = transform(group_list, request)
-        for group in results:
-            group['uri'] = absolute_uri(reverse('sentry-api-0-group-details', args=(team.slug, project.slug, group['id'])))
-
-        return Response(results)
diff --git a/src/sentry/api/endpoints/group_markseen.py b/src/sentry/api/endpoints/group_markseen.py
new file mode 100644
index 0000000000..9831965b08
--- /dev/null
+++ b/src/sentry/api/endpoints/group_markseen.py
@@ -0,0 +1,30 @@
+from django.utils import timezone
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.db.models import create_or_update
+from sentry.models import Group, GroupSeen
+from sentry.utils.functional import extract_lazy_object
+
+
+class GroupMarkSeenEndpoint(Endpoint):
+    def post(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        instance, created = create_or_update(
+            GroupSeen,
+            group=group,
+            user=extract_lazy_object(request.user),
+            project=group.project,
+            defaults={
+                'last_seen': timezone.now(),
+            }
+        )
+        if created:
+            return Response(status=201)
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
new file mode 100644
index 0000000000..cdd5ce0628
--- /dev/null
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -0,0 +1,69 @@
+from datetime import timedelta
+from django import forms
+from django.utils import timezone
+from rest_framework import status
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.models import Group, Activity
+from sentry.utils.functional import extract_lazy_object
+
+
+class NewNoteForm(forms.Form):
+    text = forms.CharField()
+
+
+class GroupNotesEndpoint(Endpoint):
+    def get(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        notes = Activity.objects.filter(
+            group=group,
+            type=Activity.NOTE,
+        ).select_related('user')
+
+        return self.paginate(
+            request=request,
+            queryset=notes,
+            order_by='-datetime',
+            on_results=lambda x: serialize(x, request.user),
+        )
+
+    def post(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        form = NewNoteForm(request.DATA)
+        if not form.is_valid():
+            return Response('{"error": "form"}', status=status.HTTP_400_BAD_REQUEST)
+
+        if Activity.objects.filter(
+            group=group,
+            type=Activity.NOTE,
+            user=request.user,
+            data=form.cleaned_data,
+            datetime__gte=timezone.now() - timedelta(hours=1)
+        ).exists():
+            return Response('{"error": "duplicate"}', status=status.HTTP_400_BAD_REQUEST)
+
+        activity = Activity.objects.create(
+            group=group,
+            project=group.project,
+            type=Activity.NOTE,
+            user=extract_lazy_object(request.user),
+            data=form.cleaned_data,
+        )
+
+        # TODO: move this into the queue
+        activity.send_notification()
+
+        return Response(serialize(activity, request.user), status=201)
diff --git a/src/sentry/api/endpoints/group_resolve.py b/src/sentry/api/endpoints/group_resolve.py
new file mode 100644
index 0000000000..35b3ac0670
--- /dev/null
+++ b/src/sentry/api/endpoints/group_resolve.py
@@ -0,0 +1,39 @@
+from django.utils import timezone
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.db.models import create_or_update
+from sentry.constants import STATUS_RESOLVED
+from sentry.models import Group, Activity
+
+
+class GroupResolveEndpoint(Endpoint):
+    def post(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        now = timezone.now()
+
+        group.resolved_at = now
+
+        happened = Group.objects.filter(
+            id=group.id,
+        ).exclude(status=STATUS_RESOLVED).update(
+            status=STATUS_RESOLVED,
+            resolved_at=now,
+        )
+
+        if happened:
+            create_or_update(
+                Activity,
+                project=group.project,
+                group=group,
+                type=Activity.SET_RESOLVED,
+                user=request.user,
+            )
+
+        return Response()
diff --git a/src/sentry/api/endpoints/group_stats.py b/src/sentry/api/endpoints/group_stats.py
new file mode 100644
index 0000000000..ebc1c1c515
--- /dev/null
+++ b/src/sentry/api/endpoints/group_stats.py
@@ -0,0 +1,34 @@
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.models import Group
+
+
+class GroupStatsEndpoint(Endpoint):
+    def get(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        days = min(int(request.GET.get('days', 1)), 30)
+
+        import random
+        import time
+        now = int(time.time())
+        if days == 1:
+            TICK = 60 * 60
+            NUM_TICKS = 24
+        else:
+            TICK = 60 * 60 * 24
+            NUM_TICKS = days
+        data = [(now - (n * TICK), random.randint(0, 500)) for n in range(NUM_TICKS + 1, 0, -1)]
+
+        # data = Group.objects.get_chart_data_for_group(
+        #     instances=[group],
+        #     max_days=min(int(request.GET.get('days', 1)), 30),
+        # )
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/group_tags.py b/src/sentry/api/endpoints/group_tags.py
new file mode 100644
index 0000000000..f2cca7b7e2
--- /dev/null
+++ b/src/sentry/api/endpoints/group_tags.py
@@ -0,0 +1,54 @@
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.models import Group, GroupTagValue, GroupTagKey, TagKey
+
+
+class GroupTagsEndpoint(Endpoint):
+    def get(self, request, group_id):
+        group = Group.objects.get(
+            id=group_id,
+        )
+
+        assert_perm(group, request.user)
+
+        def percent(total, this):
+            return int(this / total * 100)
+
+        tag_keys = TagKey.objects.filter(
+            project=group.project,
+            key__in=GroupTagKey.objects.filter(
+                group=group,
+            ).values('key'),
+        )
+
+        # O(N) db access
+        data = []
+        for tag_key in tag_keys:
+            queryset = GroupTagValue.objects.filter(
+                group=group,
+                project=group.project,
+                key=tag_key.key,
+            )
+
+            total_values = queryset.count()
+            top_values = queryset.order_by('-times_seen')[:5]
+
+            data.append({
+                'id': tag_key.id,
+                'key': tag_key.key,
+                'name': tag_key.get_label(),
+                'totalValues': total_values,
+                'topValues': [
+                    {
+                        'id': tag_value.id,
+                        'value': tag_value.value,
+                        'count': tag_value.times_seen,
+                        'firstSeen': tag_value.first_seen,
+                        'lastSeen': tag_value.last_seen,
+                    } for tag_value in top_values
+                ]
+            })
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
new file mode 100644
index 0000000000..b57ac4b32d
--- /dev/null
+++ b/src/sentry/api/endpoints/project_details.py
@@ -0,0 +1,75 @@
+from django.conf import settings
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.decorators import sudo_required
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.constants import MEMBER_ADMIN
+from sentry.models import Project
+
+
+class ProjectSerializer(serializers.ModelSerializer):
+    owner = serializers.Field(source='owner.username')
+
+    class Meta:
+        model = Project
+        fields = ('name', 'slug')
+
+
+class ProjectDetailsEndpoint(Endpoint):
+    def get(self, request, project_id):
+        project = Project.objects.get(id=project_id)
+
+        assert_perm(project, request.user)
+
+        data = serialize(project, request.user)
+        data['options'] = {
+            'sentry:origins': '\n'.join(project.get_option('sentry:origins', None) or []),
+            'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
+        }
+
+        return Response(data)
+
+    @sudo_required
+    def put(self, request, project_id):
+        project = Project.objects.get(id=project_id)
+
+        assert_perm(project, request.user, access=MEMBER_ADMIN)
+
+        serializer = ProjectSerializer(project, data=request.DATA, partial=True)
+
+        if serializer.is_valid():
+            project = serializer.save()
+
+            options = request.DATA.get('options', {})
+            if 'sentry:origins' in options:
+                project.update_option('sentry:origins', options['sentry:origins'].split('\n'))
+            if 'sentry:resolve_age' in options:
+                project.update_option('sentry:resolve_age', int(options['sentry:resolve_age']))
+
+            data = serialize(project, request.user)
+            data['options'] = {
+                'sentry:origins': '\n'.join(project.get_option('sentry:origins', None) or []),
+                'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
+            }
+            return Response(data)
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    @sudo_required
+    def delete(self, request, project_id):
+        project = Project.objects.get(id=project_id)
+
+        if project.id == settings.SENTRY_PROJECT:
+            return Response('{"error": "Cannot remove default project."}',
+                            status=status.HTTP_403_FORBIDDEN)
+
+        if not (request.user.is_superuser or project.team.owner_id == request.user.id):
+            return Response('{"error": "form"}', status=status.HTTP_403_FORBIDDEN)
+
+        # TODO(dcramer): this needs to push it into the queue
+        project.delete()
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
new file mode 100644
index 0000000000..2db292056c
--- /dev/null
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -0,0 +1,132 @@
+from datetime import timedelta
+from django.http import HttpResponse
+from django.utils import timezone
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.constants import (
+    SORT_OPTIONS, SORT_CLAUSES, SCORE_CLAUSES,
+    MYSQL_SORT_CLAUSES, MYSQL_SCORE_CLAUSES,
+    SQLITE_SORT_CLAUSES, SQLITE_SCORE_CLAUSES,
+    ORACLE_SORT_CLAUSES, ORACLE_SCORE_CLAUSES,
+    MSSQL_SORT_CLAUSES, MSSQL_SCORE_CLAUSES,
+    DEFAULT_SORT_OPTION,
+)
+from sentry.models import TagKey, Group, Project
+from sentry.utils.dates import parse_date
+from sentry.utils.db import get_db_engine
+
+
+class ProjectGroupIndexEndpoint(Endpoint):
+    # bookmarks=0/1
+    # status=<x>
+    # <tag>=<value>
+    def get(self, request, project_id):
+        project = Project.objects.get(
+            id=project_id,
+        )
+
+        assert_perm(project, request.user)
+
+        group_list = Group.objects.all()
+
+        if request.user.is_authenticated() and request.GET.get('bookmarks'):
+            group_list = group_list.filter(
+                bookmark_set__project=project,
+                bookmark_set__user=request.user,
+            )
+        else:
+            group_list = group_list.filter(project=project)
+
+        status = request.GET.get('status')
+        if status:
+            group_list = group_list.filter(status=int(status))
+
+        tag_keys = TagKey.objects.all_keys(project)
+        for tag in tag_keys:
+            value = request.GET.get(tag)
+            if value:
+                group_list = group_list.filter(
+                    grouptag__project=project,
+                    grouptag__key=tag,
+                    grouptag__value=value,
+                )
+
+        # TODO: dates should include timestamps
+        date_from = request.GET.get('since')
+        time_from = request.GET.get('until')
+        date_filter = request.GET.get('date_filter')
+
+        date_to = request.GET.get('dt')
+        time_to = request.GET.get('tt')
+
+        today = timezone.now()
+
+        # date format is Y-m-d
+        if any(x is not None for x in [date_from, time_from, date_to, time_to]):
+            date_from, date_to = parse_date(date_from, time_from), parse_date(date_to, time_to)
+        else:
+            date_from = today - timedelta(days=5)
+            date_to = None
+
+        if date_filter == 'first_seen':
+            if date_from:
+                group_list = group_list.filter(first_seen__gte=date_from)
+            elif date_to:
+                group_list = group_list.filter(first_seen__lte=date_to)
+        else:
+            if date_from and date_to:
+                group_list = group_list.filter(
+                    groupcountbyminute__date__gte=date_from,
+                    groupcountbyminute__date__lte=date_to,
+                )
+            elif date_from:
+                group_list = group_list.filter(last_seen__gte=date_from)
+            elif date_to:
+                group_list = group_list.filter(last_seen__lte=date_to)
+
+        sort = request.GET.get('sort') or request.session.get('streamsort')
+        if sort is None:
+            sort = DEFAULT_SORT_OPTION
+        elif sort not in SORT_OPTIONS or sort.startswith('accel_'):
+            return HttpResponse(status=400)
+
+        # Save last sort in session
+        if sort != request.session.get('streamsort'):
+            request.session['streamsort'] = sort
+
+        engine = get_db_engine('default')
+        if engine.startswith('sqlite'):
+            score_clause = SQLITE_SORT_CLAUSES.get(sort)
+            filter_clause = SQLITE_SCORE_CLAUSES.get(sort)
+        elif engine.startswith('mysql'):
+            score_clause = MYSQL_SORT_CLAUSES.get(sort)
+            filter_clause = MYSQL_SCORE_CLAUSES.get(sort)
+        elif engine.startswith('oracle'):
+            score_clause = ORACLE_SORT_CLAUSES.get(sort)
+            filter_clause = ORACLE_SCORE_CLAUSES.get(sort)
+        elif engine in ('django_pytds', 'sqlserver_ado', 'sql_server.pyodbc'):
+            score_clause = MSSQL_SORT_CLAUSES.get(sort)
+            filter_clause = MSSQL_SCORE_CLAUSES.get(sort)
+        else:
+            score_clause = SORT_CLAUSES.get(sort)
+            filter_clause = SCORE_CLAUSES.get(sort)
+
+        assert score_clause
+
+        if sort == 'tottime':
+            group_list = group_list.filter(time_spent_count__gt=0)
+        elif sort == 'avgtime':
+            group_list = group_list.filter(time_spent_count__gt=0)
+
+        group_list = group_list.extra(
+            select={'sort_value': score_clause},
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=group_list,
+            order_by='-sort_value',
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/endpoints/project_index.py b/src/sentry/api/endpoints/project_index.py
new file mode 100644
index 0000000000..fe14299506
--- /dev/null
+++ b/src/sentry/api/endpoints/project_index.py
@@ -0,0 +1,11 @@
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.serializers import serialize
+from sentry.models import Project
+
+
+class ProjectIndexEndpoint(Endpoint):
+    def get(self, request):
+        projects = list(Project.objects.get_for_user(request.user))
+        return Response(serialize(projects, request.user))
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
new file mode 100644
index 0000000000..1e3bf8a575
--- /dev/null
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -0,0 +1,34 @@
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.models import Project
+
+
+class ProjectStatsEndpoint(Endpoint):
+    def get(self, request, project_id):
+        project = Project.objects.get(
+            id=project_id,
+        )
+
+        assert_perm(project, request.user)
+
+        days = min(int(request.GET.get('days', 1)), 30)
+
+        import random
+        import time
+        now = int(time.time())
+        if days == 1:
+            TICK = 60 * 60
+            NUM_TICKS = 24
+        else:
+            TICK = 60 * 60 * 24
+            NUM_TICKS = days
+        data = [(now - (n * TICK), random.randint(0, 500)) for n in range(NUM_TICKS, 0, -1)]
+
+        # data = Project.objects.get_chart_data(
+        #     instances=project,
+        #     max_days=min(int(request.GET.get('days', 1)), 30),
+        # )
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/team_access_group_index.py b/src/sentry/api/endpoints/team_access_group_index.py
new file mode 100644
index 0000000000..dd649ac74b
--- /dev/null
+++ b/src/sentry/api/endpoints/team_access_group_index.py
@@ -0,0 +1,71 @@
+from rest_framework import serializers, status
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.constants import MEMBER_ADMIN, MEMBER_SYSTEM, MEMBER_USER
+from sentry.models import Team, AccessGroup
+from rest_framework.response import Response
+
+
+class AccessTypeField(serializers.ChoiceField):
+    DEFAULT_CHOICES = (
+        (MEMBER_USER, 'User'),
+        (MEMBER_ADMIN, 'Admin'),
+    )
+
+    def __init__(self, choices=DEFAULT_CHOICES, *args, **kwargs):
+        super(AccessTypeField, self).__init__(choices=choices, *args, **kwargs)
+
+    def to_native(self, obj):
+        if obj == MEMBER_ADMIN:
+            return 'admin'
+        elif obj == MEMBER_USER:
+            return 'user'
+        elif obj == MEMBER_SYSTEM:
+            return 'agent'
+        else:
+            raise ValueError(obj)
+
+    def from_native(self, obj):
+        if obj == 'admin':
+            return MEMBER_ADMIN
+        elif obj == 'user':
+            return MEMBER_USER
+        elif obj == 'agent':
+            return MEMBER_SYSTEM
+        else:
+            raise ValueError(obj)
+
+
+class AccessGroupSerializer(serializers.ModelSerializer):
+    type = AccessTypeField()
+
+    class Meta:
+        model = AccessGroup
+        fields = ('name', 'type')
+
+
+class TeamAccessGroupIndexEndpoint(Endpoint):
+    def get(self, request, team_id):
+        team = Team.objects.get_from_cache(id=team_id)
+
+        assert_perm(team, request.user)
+
+        data = sorted(AccessGroup.objects.filter(team=team), key=lambda x: x.name)
+
+        return Response(serialize(data, request.user))
+
+    def post(self, request, team_id):
+        team = Team.objects.get_from_cache(id=team_id)
+
+        assert_perm(team, request.user, MEMBER_ADMIN)
+
+        serializer = AccessGroupSerializer(data=request.DATA)
+
+        if serializer.is_valid():
+            access_group = serializer.object
+            access_group.team = team
+            access_group.managed = False
+            access_group.save()
+            return Response(serialize(access_group, request.user), status=201)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
new file mode 100644
index 0000000000..19c44511e6
--- /dev/null
+++ b/src/sentry/api/endpoints/team_details.py
@@ -0,0 +1,83 @@
+from django.conf import settings
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.decorators import sudo_required
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.constants import MEMBER_ADMIN
+from sentry.models import Team, TeamMember, TeamStatus
+from sentry.tasks.deletion import delete_team
+
+
+class TeamSerializer(serializers.ModelSerializer):
+    owner = serializers.Field(source='owner.username')
+
+    class Meta:
+        model = Team
+        fields = ('name', 'slug')
+
+
+class TeamAdminSerializer(TeamSerializer):
+    owner = serializers.SlugRelatedField(slug_field='username', required=False)
+
+    class Meta:
+        model = Team
+        fields = ('name', 'slug', 'owner')
+
+
+class TeamDetailsEndpoint(Endpoint):
+    def get(self, request, team_id):
+        team = Team.objects.get(id=team_id)
+
+        assert_perm(team, request.user)
+
+        return Response(serialize(team, request.user))
+
+    @sudo_required
+    def put(self, request, team_id):
+        team = Team.objects.get(id=team_id)
+
+        assert_perm(team, request.user, access=MEMBER_ADMIN)
+
+        # TODO(dcramer): this permission logic is duplicated from the
+        # transformer
+        if request.user.is_superuser or team.owner_id == request.user.id:
+            serializer = TeamAdminSerializer(team, data=request.DATA, partial=True)
+        else:
+            serializer = TeamSerializer(team, data=request.DATA, partial=True)
+
+        if serializer.is_valid():
+            team = serializer.save()
+            TeamMember.objects.create_or_update(
+                user=team.owner,
+                team=team,
+                defaults={
+                    'type': MEMBER_ADMIN,
+                }
+            )
+            return Response(serialize(team, request.user))
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    @sudo_required
+    def delete(self, request, team_id):
+        team = Team.objects.get(id=team_id)
+
+        assert_perm(team, request.user, access=MEMBER_ADMIN)
+
+        if team.project_set.filter(id=settings.SENTRY_PROJECT).exists():
+            return Response('{"error": "Cannot remove team containing default project."}',
+                            status=status.HTTP_403_FORBIDDEN)
+
+        if not (request.user.is_superuser or team.owner_id == request.user.id):
+            return Response('{"error": "You do not have permission to remove this team."}', status=status.HTTP_403_FORBIDDEN)
+
+        team.update(status=TeamStatus.PENDING_DELETION)
+
+        # TODO(dcramer): set status to pending deletion
+        # we delay the task for 5 minutes so we can implement an undo
+        delete_team.delay(object_id=team.id, countdown=60 * 5)
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/team_index.py b/src/sentry/api/endpoints/team_index.py
new file mode 100644
index 0000000000..6e409ae845
--- /dev/null
+++ b/src/sentry/api/endpoints/team_index.py
@@ -0,0 +1,44 @@
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.serializers import serialize
+from sentry.models import Team
+from sentry.permissions import can_create_teams
+from sentry.utils.functional import extract_lazy_object
+
+
+class TeamSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Team
+        fields = ('name', 'slug')
+
+
+class TeamAdminSerializer(TeamSerializer):
+    owner = serializers.SlugRelatedField(slug_field='username', required=False)
+
+    class Meta:
+        model = Team
+        fields = ('name', 'slug', 'owner')
+
+
+class TeamIndexEndpoint(Endpoint):
+    def get(self, request):
+        teams = Team.objects.get_for_user(request.user).values()
+        return Response(serialize(teams, request.user))
+
+    def post(self, request):
+        if not can_create_teams(request.user):
+            return Response(status=403)
+
+        # HACK(dcramer): we want owner to be optional
+        team = Team(owner=extract_lazy_object(request.user))
+        if request.user.is_superuser:
+            serializer = TeamAdminSerializer(team, data=request.DATA, partial=True)
+        else:
+            serializer = TeamSerializer(team, data=request.DATA, partial=True)
+
+        if serializer.is_valid():
+            team = serializer.save()
+            return Response(serialize(team, request.user), status=201)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/team_member_index.py b/src/sentry/api/endpoints/team_member_index.py
new file mode 100644
index 0000000000..e243c693e4
--- /dev/null
+++ b/src/sentry/api/endpoints/team_member_index.py
@@ -0,0 +1,22 @@
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.models import Team
+from rest_framework.response import Response
+
+
+class TeamMemberIndexEndpoint(Endpoint):
+    def get(self, request, team_id):
+        team = Team.objects.get_from_cache(id=team_id)
+
+        assert_perm(team, request.user)
+
+        member_list = serialize(
+            list(team.member_set.select_related('user')),
+            request.user)
+        member_list.extend(serialize(
+            list(team.pending_member_set.all()),
+            request.user))
+        member_list.sort(key=lambda x: x['email'])
+
+        return Response(member_list)
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
new file mode 100644
index 0000000000..e4753e5906
--- /dev/null
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -0,0 +1,44 @@
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.constants import MEMBER_ADMIN
+from sentry.models import Team, Project
+from sentry.permissions import can_create_projects
+
+
+class ProjectSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Project
+        fields = ('name', 'slug')
+
+
+class TeamProjectIndexEndpoint(Endpoint):
+    def get(self, request, team_id):
+        team = Team.objects.get_from_cache(id=team_id)
+
+        assert_perm(team, request.user)
+
+        results = list(Project.objects.get_for_user(request.user, team=team))
+
+        return Response(serialize(results, request.user))
+
+    def post(self, request, team_id):
+        team = Team.objects.get_from_cache(id=team_id)
+
+        assert_perm(team, request.user, MEMBER_ADMIN)
+
+        if not can_create_projects(request.user, team=team_id):
+            return Response(status=403)
+
+        serializer = ProjectSerializer(data=request.DATA)
+
+        if serializer.is_valid():
+            project = serializer.object
+            project.team = team
+            project.owner = team.owner
+            project.save()
+            return Response(serialize(project, request.user), status=201)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
new file mode 100644
index 0000000000..7d4c31c79c
--- /dev/null
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -0,0 +1,21 @@
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.models import Team, Project
+
+
+class TeamStatsEndpoint(Endpoint):
+    def get(self, request, team_id):
+        team = Team.objects.get(id=team_id)
+
+        assert_perm(team, request.user)
+
+        projects = Project.objects.get_for_user(request.user, team=team)
+
+        data = Project.objects.get_chart_data_for_group(
+            instances=projects,
+            max_days=min(int(request.GET.get('days', 1)), 30),
+        )
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
new file mode 100644
index 0000000000..5949f348e5
--- /dev/null
+++ b/src/sentry/api/endpoints/user_details.py
@@ -0,0 +1,52 @@
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.decorators import sudo_required
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.models import Team, User
+
+
+class UserSerializer(serializers.ModelSerializer):
+    name = serializers.CharField(source='first_name')
+
+    class Meta:
+        model = User
+        fields = ('name', 'email')
+
+
+class UserDetailsEndpoint(Endpoint):
+    def get(self, request, user_id):
+        if user_id == 'me':
+            user_id = request.user.id
+
+        user = User.objects.get(id=user_id)
+
+        assert_perm(user, request.user)
+
+        teams = Team.objects.get_for_user(user, with_projects=True)
+
+        data = serialize(user, request.user)
+        data['teams'] = serialize([t[0] for t in teams.itervalues()], request.user)
+        for (team, projects), team_data in zip(teams.itervalues(), data['teams']):
+            team_data['projects'] = serialize(projects, request.user)
+
+        return Response(data)
+
+    @sudo_required
+    def put(self, request, user_id):
+        if user_id == 'me':
+            user_id = request.user.id
+
+        user = User.objects.get(id=user_id)
+
+        assert_perm(user, request.user)
+
+        serializer = UserSerializer(user, data=request.DATA, partial=True)
+
+        if serializer.is_valid():
+            user = serializer.save()
+            return Response(serialize(user, request.user))
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
new file mode 100644
index 0000000000..9f4764ef7b
--- /dev/null
+++ b/src/sentry/api/paginator.py
@@ -0,0 +1,172 @@
+import datetime
+
+
+class CursorResult(object):
+    def __init__(self, results, next, prev=None, has_prev=None, has_next=None):
+        self.next = next
+        self.prev = prev
+        self.has_next = has_next
+        self.has_prev = has_prev
+        self.results = results
+
+    def get_response(self):
+        return self.results
+
+
+class Paginator(object):
+    def __init__(self, queryset, order_by):
+        if order_by.startswith('-'):
+            self.key, self.desc = order_by[1:], True
+        else:
+            self.key, self.desc = order_by, False
+        self.queryset = queryset
+
+    def _get_results_from_qs(self, cursor_offset, is_prev):
+        results = self.queryset
+
+        # "asc" controls whether or not we need to change the ORDER BY to
+        # ascending.  If we're sorting by DESC but we're using a previous
+        # page cursor, we'll change the ordering to ASC and reverse the
+        # list below (this is so we know how to get the before/after post).
+        # If we're sorting ASC _AND_ we're not using a previous page cursor,
+        # then we'll need to resume using ASC.
+        asc = (self.desc and is_prev) or not (self.desc or is_prev)
+
+        # We need to reverse the ORDER BY if we're using a cursor for a
+        # previous page so we know exactly where we ended last page.  The
+        # results will get reversed back to the requested order below.
+        if self.key in results.query.order_by:
+            if not asc:
+                index = results.query.order_by.index(self.key)
+                results.query.order_by[index] = '-%s' % (results.query.order_by[index])
+        elif ('-%s' % self.key) in results.query.order_by:
+            if asc:
+                index = results.query.order_by.index('-%s' % (self.key))
+                results.query.order_by[index] = results.query.order_by[index][1:]
+        else:
+            if asc:
+                results = results.order_by(self.key)
+            else:
+                results = results.order_by('-%s' % self.key)
+
+        if cursor_offset and self.should_filter:
+            if asc:
+                results = results.filter(**{'%s__gte' % self.key: cursor_offset})
+            else:
+                results = results.filter(**{'%s__lte' % self.key: cursor_offset})
+
+        return results
+
+    def get_cursor(self, limit=100, cursor=None):
+        # cursors are:
+        #   (identifier(integer), row offset, is_previous)
+
+        cursor = cursor or (0, 0, 0)
+
+        if cursor:
+            cursor_offset, offset, is_prev = map(int, cursor)
+        else:
+            cursor_offset, offset, is_prev = 0, 0, 0
+
+        results = self._get_results_from_qs(cursor_offset, is_prev)
+
+        if is_prev:
+            # this effectively gets us the before post, and the current (after) post
+            stop = offset + limit + 2
+        else:
+            stop = offset + limit + 1
+
+        results = list(results[offset:stop])
+
+        num_results = len(results)
+
+        if is_prev:
+            has_prev = num_results > (limit + 1)
+            results = [r for r in reversed(results[:limit + 1])]
+            num_results = len(results)
+        elif cursor_offset or offset:
+            # It's likely that theres a previous page if they passed us either offset values
+            has_prev = True
+        else:
+            # we dont know
+            has_prev = False
+
+        # Default cursor if not present
+        if is_prev:
+            next_cursor_offset = cursor_offset
+            next_offset = offset
+
+            # Are there more results than whats on the current page?
+            has_next = num_results > limit
+        elif num_results:
+            if not cursor_offset:
+                cursor_offset = getattr(results[0], self.key)
+
+            # Are there more results than whats on the current page?
+            has_next = num_results > limit
+
+            # Determine what our next cursor is by ensuring we have a unique offset
+            next_cursor_offset = getattr(results[-1], self.key)
+
+            if next_cursor_offset == cursor_offset:
+                next_offset = offset + limit
+            else:
+                next_offset = 0
+
+                for result in results[1 if is_prev else 0:limit][::-1]:
+                    if getattr(result, self.key) == next_cursor_offset:
+                        next_offset += 1
+                    else:
+                        break
+        else:
+            next_cursor_offset = cursor_offset
+            next_offset = offset
+            has_next = False
+
+        # Determine what our pervious cursor is by ensuring we have a unique offset
+        if is_prev and num_results:
+            prev_cursor_offset = getattr(results[0], self.key)
+
+            if num_results > 2:
+                i = 1
+                while i < num_results and prev_cursor_offset == getattr(results[i], self.key):
+                    i += 1
+                i -= 1
+            else:
+                i = 0
+
+            # if we iterated every result and the offset didnt change, we need
+            # to simply add the current offset to our total results (visible)
+            if prev_cursor_offset == cursor_offset:
+                prev_offset = offset + i
+            else:
+                prev_offset = i
+        else:
+            # previous cursor is easy if we're paginating forward
+            prev_cursor_offset = cursor_offset
+            prev_offset = offset
+
+        # Truncate the list to our original result size now that we've determined the next page
+        results = results[:limit]
+
+        # XXX: We convert datetimes to unix_time and bump 7 decimal places so we dont
+        # have to worry about float point restrictions. This conversion is also handled
+        # in the CursorTimestamp validator
+        if isinstance(next_cursor_offset, datetime.datetime):
+            next_cursor_offset = int(float(next_cursor_offset.strftime('%s.%f')) * 1000000)
+        if isinstance(prev_cursor_offset, datetime.datetime):
+            prev_cursor_offset = int(float(prev_cursor_offset.strftime('%s.%f')) * 1000000)
+
+        next_cursor = ':'.join(map(lambda x: str(int(x)), [next_cursor_offset or 0, next_offset, 0]))
+        if has_prev:
+            prev_cursor = ':'.join(map(lambda x: str(int(x)), [prev_cursor_offset or 0, prev_offset, 1]))
+        else:
+            prev_cursor = None
+
+        return CursorResult(
+            results=results,
+            next=next_cursor,
+            prev=prev_cursor,
+            has_next=has_next,
+            has_prev=has_prev,
+        )
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 0ea3f05e33..6305eb26f4 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -1,13 +1,31 @@
-from sentry.models import Project
+from sentry.constants import MEMBER_USER
+from sentry.models import Team, Project, User
 
-from rest_framework.permissions import BasePermission
 
+class PermissionError(Exception):
+    pass
 
-class HasProjectPermission(BasePermission):
-    def has_object_permission(self, request, view, obj):
-        if hasattr(obj, 'project'):
-            obj = obj.project
-        elif not isinstance(obj, Project):
-            raise NotImplementedError('Object does not support permissions')
 
-        return obj in Project.objects.get_for_user(request.user)
+def has_perm(object, user, access=MEMBER_USER):
+    if user.is_superuser:
+        return True
+
+    # TODO: abstract this into a permission registry
+    if type(object) == User:
+        return object == user
+
+    if type(object) == Team:
+        return object.slug in Team.objects.get_for_user(user, access=access)
+
+    if hasattr(object, 'project'):
+        object = object.project
+
+    if type(object) == Project:
+        return object.slug in Project.objects.get_for_user(user, access=access)
+
+    raise TypeError(type(object))
+
+
+def assert_perm(*args, **kwargs):
+    if not has_perm(*args, **kwargs):
+        raise PermissionError
diff --git a/src/sentry/api/serializers/__init__.py b/src/sentry/api/serializers/__init__.py
new file mode 100644
index 0000000000..08b72c4af6
--- /dev/null
+++ b/src/sentry/api/serializers/__init__.py
@@ -0,0 +1,2 @@
+from .base import *  # NOQA
+from .models import *  # NOQA
diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
new file mode 100644
index 0000000000..36892196da
--- /dev/null
+++ b/src/sentry/api/serializers/base.py
@@ -0,0 +1,42 @@
+from django.contrib.auth.models import AnonymousUser
+
+
+serializers = {}
+
+
+def serialize(objects, user=None):
+    if user is None:
+        user = AnonymousUser()
+
+    if not objects:
+        return objects
+    elif not isinstance(objects, (list, tuple)):
+        return serialize([objects], user=user)[0]
+
+    # elif isinstance(obj, dict):
+    #     return dict((k, serialize(v, request=request)) for k, v in obj.iteritems())
+    try:
+        t = serializers[type(objects[0])]
+    except KeyError:
+        return objects
+
+    t.attach_metadata(objects, user=user)
+    return [t(o, user=user) for o in objects]
+
+
+def register(type):
+    def wrapped(cls):
+        serializers[type] = cls()
+        return cls
+    return wrapped
+
+
+class Serializer(object):
+    def __call__(self, obj, user):
+        return self.serialize(obj, user)
+
+    def attach_metadata(self, objects, user):
+        pass
+
+    def serialize(self, obj, user):
+        return {}
diff --git a/src/sentry/api/serializers/models/__init__.py b/src/sentry/api/serializers/models/__init__.py
new file mode 100644
index 0000000000..488216ed55
--- /dev/null
+++ b/src/sentry/api/serializers/models/__init__.py
@@ -0,0 +1,3 @@
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/api/serializers/models/access_group.py b/src/sentry/api/serializers/models/access_group.py
new file mode 100644
index 0000000000..d6c9ab32ec
--- /dev/null
+++ b/src/sentry/api/serializers/models/access_group.py
@@ -0,0 +1,15 @@
+from sentry.api.serializers import Serializer, register
+from sentry.models import AccessGroup
+
+
+@register(AccessGroup)
+class AccessGroupSerializer(Serializer):
+    def serialize(self, obj, user):
+        d = {
+            'id': str(obj.id),
+            'name': obj.name,
+            'access': obj.get_type_display(),
+            'managed': obj.managed,
+            'dateCreated': obj.date_added,
+        }
+        return d
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
new file mode 100644
index 0000000000..980d600e4d
--- /dev/null
+++ b/src/sentry/api/serializers/models/activity.py
@@ -0,0 +1,18 @@
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import Activity
+
+
+@register(Activity)
+class ActivitySerializer(Serializer):
+    def serialize(self, obj, user):
+        d = {
+            'id': str(obj.id),
+            'user': serialize(obj.user),
+            'type': {
+                'id': str(obj.type),
+                'name': obj.get_type_display(),
+            },
+            'data': obj.data,
+            'dateCreated': obj.datetime,
+        }
+        return d
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
new file mode 100644
index 0000000000..d29d235266
--- /dev/null
+++ b/src/sentry/api/serializers/models/event.py
@@ -0,0 +1,23 @@
+from sentry.api.serializers import Serializer, register
+from sentry.models import Event
+
+
+@register(Event)
+class EventSerializer(Serializer):
+    def serialize(self, obj, user):
+        d = {
+            'id': str(obj.id),
+            'eventID': str(obj.event_id),
+            'project': {
+                'id': str(obj.project.id),
+                'name': obj.project.name,
+                'slug': obj.project.slug,
+            },
+            'message': obj.message,
+            'culprit': obj.culprit,
+            'checksum': obj.checksum,
+            'platform': obj.platform,
+            'dateCreated': obj.datetime,
+            'timeSpent': obj.time_spent,
+        }
+        return d
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
new file mode 100644
index 0000000000..bb55cd7983
--- /dev/null
+++ b/src/sentry/api/serializers/models/group.py
@@ -0,0 +1,117 @@
+from collections import defaultdict
+from django.core.urlresolvers import reverse
+
+from sentry.api.serializers import Serializer, register
+from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, TAG_LABELS
+from sentry.models import (
+    Group, GroupBookmark, GroupTagKey, GroupSeen, ProjectOption
+)
+# from sentry.templatetags.sentry_plugins import get_tags
+# from sentry.templatetags.sentry_plugins import handle_before_events
+from sentry.utils.db import attach_foreignkey
+from sentry.utils.http import absolute_uri
+
+
+@register(Group)
+class GroupSerializer(Serializer):
+    def attach_metadata(self, objects, user):
+        attach_foreignkey(objects, Group.project, ['team'])
+
+        # if request and objects:
+        #     handle_before_events(request, objects)
+
+        if user.is_authenticated() and objects:
+            bookmarks = set(GroupBookmark.objects.filter(
+                user=user,
+                group__in=objects,
+            ).values_list('group_id', flat=True))
+            seen_groups = dict(GroupSeen.objects.filter(
+                user=user,
+                group__in=objects,
+            ).values_list('group_id', 'last_seen'))
+        else:
+            bookmarks = set()
+            seen_groups = {}
+
+        project_list = set(o.project for o in objects)
+        tag_keys = set(['sentry:user'])
+        project_annotations = {}
+        for project in project_list:
+            enabled_annotations = ProjectOption.objects.get_value(
+                project, 'annotations', ['sentry:user'])
+            project_annotations[project] = enabled_annotations
+            tag_keys.update(enabled_annotations)
+
+        annotation_counts = defaultdict(dict)
+        annotation_results = GroupTagKey.objects.filter(
+            group__in=objects,
+            key__in=tag_keys,
+        ).values_list('key', 'group', 'values_seen')
+        for key, group_id, values_seen in annotation_results:
+            annotation_counts[key][group_id] = values_seen
+
+        for g in objects:
+            g.is_bookmarked = g.pk in bookmarks
+            active_date = g.active_at or g.last_seen
+            g.has_seen = seen_groups.get(g.id, active_date) > active_date
+            g.annotations = []
+            for key in sorted(tag_keys):
+                if key in project_annotations[project]:
+                    label = TAG_LABELS.get(key, key.replace('_', ' ')).lower() + 's'
+                    try:
+                        value = annotation_counts[key].get(g.id, 0)
+                    except KeyError:
+                        value = 0
+                    g.annotations.append({
+                        'label': label,
+                        'count': value,
+                    })
+
+    def serialize(self, obj, user):
+        status = obj.get_status()
+        if status == STATUS_RESOLVED:
+            status_label = 'resolved'
+        elif status == STATUS_MUTED:
+            status_label = 'muted'
+        else:
+            status_label = 'unresolved'
+
+        if obj.team:
+            permalink = absolute_uri(reverse('sentry-group', args=[
+                obj.team.slug, obj.project.slug, obj.id]))
+        else:
+            permalink = None
+
+        d = {
+            'id': str(obj.id),
+            'count': str(obj.times_seen),
+            'title': obj.message_short,
+            'culprit': obj.culprit,
+            'permalink': permalink,
+            'firstSeen': obj.first_seen,
+            'lastSeen': obj.last_seen,
+            'timeSpent': obj.avg_time_spent,
+            'canResolve': user.is_authenticated(),
+            'status': {
+                'id': status,
+                'name': status_label,
+            },
+            'isResolved': obj.get_status() == STATUS_RESOLVED,
+            'isPublic': obj.is_public,
+            # 'score': getattr(obj, 'sort_value', 0),
+            'project': {
+                'name': obj.project.name,
+                'slug': obj.project.slug,
+            },
+        }
+        if hasattr(obj, 'is_bookmarked'):
+            d['isBookmarked'] = obj.is_bookmarked
+        if hasattr(obj, 'has_seen'):
+            d['hasSeen'] = obj.has_seen
+        if hasattr(obj, 'historical_data'):
+            d['historicalData'] = obj.historical_data
+        if hasattr(obj, 'annotations'):
+            d['annotations'] = obj.annotations
+        # if request:
+        #     d['tags'] = list(get_tags(obj, request))
+        return d
diff --git a/src/sentry/api/serializers/models/pending_team_member.py b/src/sentry/api/serializers/models/pending_team_member.py
new file mode 100644
index 0000000000..156860ccc2
--- /dev/null
+++ b/src/sentry/api/serializers/models/pending_team_member.py
@@ -0,0 +1,15 @@
+from sentry.api.serializers import Serializer, register
+from sentry.models import PendingTeamMember
+
+
+@register(PendingTeamMember)
+class PendingTeamMemberSerializer(Serializer):
+    def serialize(self, obj, user):
+        d = {
+            'id': str(obj.id),
+            'email': obj.email,
+            'access': obj.get_type_display(),
+            'pending': True,
+            'dateCreated': obj.date_added,
+        }
+        return d
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
new file mode 100644
index 0000000000..a9b11f59ed
--- /dev/null
+++ b/src/sentry/api/serializers/models/project.py
@@ -0,0 +1,38 @@
+from sentry.api.serializers import Serializer, register
+from sentry.constants import MEMBER_OWNER
+from sentry.models import Project, Team
+from sentry.utils.db import attach_foreignkey
+
+
+@register(Project)
+class ProjectSerializer(Serializer):
+    def attach_metadata(self, objects, user):
+        team_map = dict(
+            (t.id, t) for t in Team.objects.get_for_user(user).itervalues()
+        )
+        for project in objects:
+            try:
+                team = team_map[project.team_id]
+                project.access_type = team.access_type
+                project.team = team
+            except KeyError:
+                project.access_type = None
+
+        attach_foreignkey(objects, Project.team)
+
+    def serialize(self, obj, user):
+        d = {
+            'id': str(obj.id),
+            'slug': obj.slug,
+            'name': obj.name,
+            'isPublic': obj.public,
+            'dateCreated': obj.date_added,
+            'permission': {
+                'edit': obj.access_type == MEMBER_OWNER or user.is_superuser,
+            },
+        }
+        if obj.team:
+            d['permission']['admin'] = obj.team.owner_id == user.id or user.is_superuser
+        else:
+            d['permission']['admin'] = user.is_superuser
+        return d
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
new file mode 100644
index 0000000000..2ec02f5291
--- /dev/null
+++ b/src/sentry/api/serializers/models/team.py
@@ -0,0 +1,27 @@
+from sentry.api.serializers import Serializer, register
+from sentry.constants import MEMBER_OWNER
+from sentry.models import Team
+
+
+@register(Team)
+class TeamSerializer(Serializer):
+    def attach_metadata(self, objects, user):
+        team_map = Team.objects.get_for_user(user)
+        for team in objects:
+            try:
+                team.access_type = team_map[team.slug].access_type
+            except KeyError:
+                team.access_type = None
+
+    def serialize(self, obj, user):
+        d = {
+            'id': str(obj.id),
+            'slug': obj.slug,
+            'name': obj.name,
+            'dateCreated': obj.date_added,
+            'permission': {
+                'edit': obj.access_type == MEMBER_OWNER or user.is_superuser,
+                'admin': obj.owner_id == user.id or user.is_superuser,
+            }
+        }
+        return d
diff --git a/src/sentry/api/serializers/models/team_member.py b/src/sentry/api/serializers/models/team_member.py
new file mode 100644
index 0000000000..33288d1e13
--- /dev/null
+++ b/src/sentry/api/serializers/models/team_member.py
@@ -0,0 +1,15 @@
+from sentry.api.serializers import Serializer, register
+from sentry.models import TeamMember
+
+
+@register(TeamMember)
+class TeamMemberSerializer(Serializer):
+    def serialize(self, obj, user):
+        d = {
+            'id': str(obj.id),
+            'email': obj.user.email,
+            'access': obj.get_type_display(),
+            'pending': False,
+            'dateCreated': obj.date_added,
+        }
+        return d
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
new file mode 100644
index 0000000000..c3b55eff22
--- /dev/null
+++ b/src/sentry/api/serializers/models/user.py
@@ -0,0 +1,15 @@
+from sentry.api.serializers import Serializer, register
+from sentry.models import User
+from sentry.utils.avatar import get_gravatar_url
+
+
+@register(User)
+class UserSerializer(Serializer):
+    def serialize(self, obj, user):
+        d = {
+            'id': str(obj.id),
+            'name': obj.get_full_name(),
+            'email': obj.email,
+            'avatarUrl': get_gravatar_url(obj.email, size=32),
+        }
+        return d
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 45e891b215..9a4133cb74 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -1,15 +1,118 @@
 from django.conf.urls import patterns, url
 
-from .endpoints.group_index import GroupListView
-from .endpoints.group_details import GroupDetailsView
+from .endpoints.auth_index import AuthIndexEndpoint
+from .endpoints.catchall import CatchallEndpoint
+from .endpoints.event_details import EventDetailsEndpoint
+from .endpoints.group_details import GroupDetailsEndpoint
+from .endpoints.group_resolve import GroupResolveEndpoint
+from .endpoints.group_bookmark import GroupBookmarkEndpoint
+from .endpoints.group_markseen import GroupMarkSeenEndpoint
+from .endpoints.group_delete import GroupDeleteEndpoint
+from .endpoints.group_events import GroupEventsEndpoint
+from .endpoints.group_events_latest import GroupEventsLatestEndpoint
+from .endpoints.group_notes import GroupNotesEndpoint
+from .endpoints.group_stats import GroupStatsEndpoint
+from .endpoints.group_tags import GroupTagsEndpoint
+from .endpoints.project_details import ProjectDetailsEndpoint
+from .endpoints.project_index import ProjectIndexEndpoint
+from .endpoints.project_group_index import ProjectGroupIndexEndpoint
+from .endpoints.project_stats import ProjectStatsEndpoint
+from .endpoints.team_details import TeamDetailsEndpoint
+from .endpoints.team_index import TeamIndexEndpoint
+from .endpoints.team_access_group_index import TeamAccessGroupIndexEndpoint
+from .endpoints.team_project_index import TeamProjectIndexEndpoint
+from .endpoints.team_member_index import TeamMemberIndexEndpoint
+from .endpoints.team_stats import TeamStatsEndpoint
+from .endpoints.user_details import UserDetailsEndpoint
+
 
 urlpatterns = patterns(
     '',
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/groups/$',
-        GroupListView.as_view(),
-        name='sentry-api-0-group-list'),
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/groups/(?P<group_id>\d+)/$',
-        GroupDetailsView.as_view(),
+
+    # Auth
+    url(r'^auth/$',
+        AuthIndexEndpoint.as_view(),
+        name='sentry-api-0-auth'),
+
+    # Users
+    url(r'^users/(?P<user_id>[^\/]+)/$',
+        UserDetailsEndpoint.as_view(),
+        name='sentry-api-0-user-details'),
+
+    # Teams
+    url(r'^teams/$',
+        TeamIndexEndpoint.as_view(),
+        name='sentry-api-0-team-index'),
+    url(r'^teams/(?P<team_id>\d+)/$',
+        TeamDetailsEndpoint.as_view(),
+        name='sentry-api-0-team-details'),
+    url(r'^teams/(?P<team_id>\d+)/projects/$',
+        TeamProjectIndexEndpoint.as_view(),
+        name='sentry-api-0-team-project-index'),
+    url(r'^teams/(?P<team_id>\d+)/members/$',
+        TeamMemberIndexEndpoint.as_view(),
+        name='sentry-api-0-team-member-index'),
+    url(r'^teams/(?P<team_id>\d+)/access-groups/$',
+        TeamAccessGroupIndexEndpoint.as_view(),
+        name='sentry-api-0-team-access-group-index'),
+    url(r'^teams/(?P<team_id>\d+)/stats/$',
+        TeamStatsEndpoint.as_view(),
+        name='sentry-api-0-team-stats'),
+
+    # Projects
+    url(r'^projects/$',
+        ProjectIndexEndpoint.as_view(),
+        name='sentry-api-0-project-index'),
+    url(r'^projects/(?P<project_id>\d+)/$',
+        ProjectDetailsEndpoint.as_view(),
+        name='sentry-api-0-project-details'),
+    url(r'^projects/(?P<project_id>\d+)/groups/$',
+        ProjectGroupIndexEndpoint.as_view(),
+        name='sentry-api-0-project-group-index'),
+    url(r'^projects/(?P<project_id>\d+)/groups/$',
+        ProjectStatsEndpoint.as_view(),
+        name='sentry-api-0-project-stats'),
+
+    # Groups
+    url(r'^groups/(?P<group_id>\d+)/$',
+        GroupDetailsEndpoint.as_view(),
         name='sentry-api-0-group-details'),
+    url(r'^groups/(?P<group_id>\d+)/resolve/$',
+        GroupResolveEndpoint.as_view(),
+        name='sentry-api-0-group-resolve'),
+    url(r'^groups/(?P<group_id>\d+)/bookmark/$',
+        GroupBookmarkEndpoint.as_view(),
+        name='sentry-api-0-group-bookmark'),
+    url(r'^groups/(?P<group_id>\d+)/markseen/$',
+        GroupMarkSeenEndpoint.as_view(),
+        name='sentry-api-0-group-markseen'),
+    url(r'^groups/(?P<group_id>\d+)/delete/$',
+        GroupDeleteEndpoint.as_view(),
+        name='sentry-api-0-group-delete'),
+    url(r'^groups/(?P<group_id>\d+)/events/$',
+        GroupEventsEndpoint.as_view(),
+        name='sentry-api-0-group-events'),
+    url(r'^groups/(?P<group_id>\d+)/events/latest/$',
+        GroupEventsLatestEndpoint.as_view(),
+        name='sentry-api-0-group-events-latest'),
+    url(r'^groups/(?P<group_id>\d+)/notes/$',
+        GroupNotesEndpoint.as_view(),
+        name='sentry-api-0-group-notes'),
+    url(r'^groups/(?P<group_id>\d+)/stats/$',
+        GroupStatsEndpoint.as_view(),
+        name='sentry-api-0-group-stats'),
+    url(r'^groups/(?P<group_id>\d+)/tags/$',
+        GroupTagsEndpoint.as_view(),
+        name='sentry-api-0-group-tags'),
+
+    # Events
+    url(r'^events/(?P<event_id>\d+)/$',
+        EventDetailsEndpoint.as_view(),
+        name='sentry-api-0-event-details'),
+
+    url(r'^',
+        CatchallEndpoint.as_view(),
+        name='sentry-api-catchall'),
+
     # url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
 )
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 5b9f13c704..02c727ddb8 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -219,6 +219,18 @@ class Interface(object):
             # },
         }
 
+    def get_type_name(self):
+        """
+        Passed into the JSON api as the name of this interface in the entry list.
+        """
+        return self.get_slug()
+
+    def get_json_context(self):
+        """
+        Passed into the JSON api as the body for this entry.
+        """
+        return self.serialize()
+
 
 class Message(Interface):
     """
@@ -1137,6 +1149,37 @@ class Http(Interface):
             }
         }
 
+    def get_type_name(self):
+        return 'http_request'
+
+    def get_json_context(self):
+        data = self.data
+        headers_is_dict, headers = self._to_dict(self.headers)
+
+        # educated guess as to whether the body is normal POST data
+        if headers_is_dict and headers.get('Content-Type') == 'application/x-www-form-urlencoded' and '=' in data:
+            _, data = self._to_dict(data)
+
+        context = {
+            'url': self.url,
+            'shortUrl': self.short_url,
+            'method': self.method,
+            'queryString': self.query_string or None,
+            'fragment': self.fragment or None,
+            'headers': self.headers or None,
+        }
+
+        # It's kind of silly we store this twice
+        _, cookies = self._to_dict(self.cookies)
+
+        context.update({
+            'cookies': cookies or None,
+            'env': self.env or None,
+            'body': data or None,
+        })
+
+        return context
+
 
 class Template(Interface):
     """
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 78cac99003..fd1a83fd48 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -145,15 +145,11 @@ def can_remove_team_member(user, member):
 
 @requires_login
 def can_remove_team(user, team):
-    # projects with teams can never be removed
-    if team.project_set.exists():
-        return False
-
     if user.is_superuser:
         return True
 
     # must be an owner of the team
-    if not team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+    if team.owner != user:
         return False
 
     result = plugins.first('has_perm', user, 'remove_team', team)
diff --git a/src/sentry/static/sentry/scripts/global.min.js b/src/sentry/static/sentry/scripts/global.min.js
index 8450e148f2..0466bb9151 100644
--- a/src/sentry/static/sentry/scripts/global.min.js
+++ b/src/sentry/static/sentry/scripts/global.min.js
@@ -1,2 +1,2 @@
-app=window.app={config:{},templates:{},utils:{}};(function(app,Backbone){"use strict";app.models={};app.models.Group=Backbone.Model.extend({defaults:{count:0,version:0,annotations:[],tags:[],versions:[],hasSeen:false,isBookmarked:false,historicalData:[]}})})(app,Backbone);(function(app){"use strict";app.templates={group:""+'<div class="count" data-count="<%= app.utils.formatNumber(count) %>">'+'<span title="<%= count %>"><%= app.utils.formatNumber(count) %></span>'+"</div>"+'<div class="details">'+'<h3><a href="<%= permalink %>"><%= title %></a></h3>'+'<p class="message">'+"<%= message %>"+"</p>"+'<div class="meta">'+"<% $.each(annotations, function(_, tag) { %>"+'<span class="tag annotation" data-tag="<%= tag.label %>" data-count="<%= app.utils.formatNumber(tag.count) %>">'+"<i><%= tag.label %></i>"+'<span title="<%= count %>"><%= app.utils.formatNumber(tag.count) %></span>'+"</span>"+"<% }) %>"+'<span class="last-seen pretty-date"></span>'+"<% if (timeSpent) { %>"+'<span class="tag time-spent"><%= Math.round(timeSpent) %>ms</span>'+"<% } %>"+'<span class="tag tag-project">'+'<a href="<%= projectUrl %>"><%= project.name %></a>'+"</span>"+'<span class="tag tag-logger">'+'<a href="<%= loggerUrl %>"><%= logger %></a>'+"</span>"+"<% _.each(versions, function(version){ %> "+'<span class="tag tag-version"><%= version %></span>'+"<% }) %>"+"<% _.each(tags, function(tag){ %> "+'<span class="tag"><%= tag %></span>'+"<% }) %>"+"</div>"+'<span class="sparkline"></span>'+'<ul class="actions">'+"<% if (canResolve) { %>"+"<li>"+'<a href="#" data-action="resolve">'+'<i aria-hidden="true" class="icon-checkmark"></i>'+"</a>"+"</li>"+"<li>"+'<a href="#" data-action="bookmark" class="bookmark" title="Bookmark">'+'<i aria-hidden="true" class="icon-star"></i>'+"</a>"+"</li>"+"<% } %>"+"</ul>"+"</div>"}})(app);(function(app,jQuery,_,moment){"use strict";var $=jQuery;var number_formats=[[1e9,"b"],[1e6,"m"],[1e3,"k"]];app.utils={getQueryParams:function(){var vars={},href=window.location.href,hashes,hash;if(href.indexOf("?")==-1)return vars;hashes=href.slice(href.indexOf("?")+1,href.indexOf("#")!=-1?href.indexOf("#"):href.length).split("&");$.each(hashes,function(_,chunk){hash=chunk.split("=");if(!hash[0]&&!hash[1])return;vars[decodeURIComponent(hash[0])]=hash[1]?decodeURIComponent(hash[1]).replace(/\+/," "):""});return vars},floatFormat:function(number,places){var multi=Math.pow(10,places);return parseInt(number*multi,10)/multi},formatNumber:function(number){var b,x,y,o,p;number=parseInt(number,10);for(var i=0;b=number_formats[i];i++){x=b[0];y=b[1];o=Math.floor(number/x);p=number%x;if(o>0){if(o/10>1||!p)return""+o+y;return""+this.floatFormat(number/x,1)+y}}return""+number},slugify:function(str){str=str.replace(/^\s+|\s+$/g,"");str=str.toLowerCase();var from="àáäâèéëêìíïîòóöôùúüûñç·/_,:;";var to="aaaaeeeeiiiioooouuuunc------";for(var i=0,l=from.length;i<l;i++){str=str.replace(new RegExp(from.charAt(i),"g"),to.charAt(i))}str=str.replace(/[^a-z0-9\s\-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-");return str},varToggle:function(link,$elm){var $link=$(link);if(!$link.attr("data-expand-label"))$link.attr("data-expand-label",$link.html());$elm.toggle();if($elm.is(":visible"))$link.html($link.attr("data-collapse-label"));else $link.html($link.attr("data-expand-label"))},getSearchUsersUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/users/search/"},getSearchProjectsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/projects/search/"},getSearchTagsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/tags/search/"},makeSearchableInput:function(el,url,callback){$(el).select2({allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},ajax:{url:url,dataType:"json",data:function(term,page){return{query:term,limit:10}},results:function(data,page){var results=callback(data);return{results:callback(data)}}}})},escape:function(str){return str.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},makeSearchableUsersInput:function(el){this.makeSearchableInput(el,this.getSearchUsersUrl(),_.bind(function(data){var results=[];$(data.results).each(_.bind(function(_,val){var label;if(val.first_name){label=this.escape(val.first_name)+" &mdash; "+this.escape(val.username)}else{label=this.escape(val.username)}label+="<br>"+this.escape(val.email);results.push({id:val.username,text:label})},this));if($(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:this.escape(data.query),text:this.escape(data.query)})}return results},this))},makeSearchableProjectsInput:function(el){this.makeSearchableInput(el,this.getSearchProjectsUrl(),function(data){var results=[];$(data.results).each(function(_,val){results.push({id:val.slug,text:val.name+"<br>"+val.slug})});return results})},makeSearchableTagsInput:function(el,options){var $el=$(el);$el.select2({multiple:true,tokenSeperators:[","],minimumInputLength:3,allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);var values=$el.val().split(",");var results=[];$.each(values,function(_,val){results.push({id:val,text:val})});callback(results)},ajax:{url:this.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$el.data("tag"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:val,text:val})});if($(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:data.query,text:data.query})}return{results:results}}}})}};$(function(){$(".body select").each(function(){var $this=$(this),options={width:"element",allowClear:false};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});setInterval(function(){$(".pretty-date").each(function(_,el){var $el=$(el);var dt=$el.data("datetime");if(dt){var date=moment(dt);if(date){$el.text(date.fromNow());$el.attr("title",date.format("llll"))}}})},5e3)});$.fn.select2.defaults.escapeMarkup=function(s){return s}})(app,jQuery,_,moment);(function(app,Backbone){"use strict";app.ScoredList=Backbone.Collection.extend({comparator:function(member){return-member.get("score")}})})(app,Backbone);(function(app,Backbone,jQuery,moment){"use strict";var $=jQuery;app.charts={render:function(el,options){var $el=$("#chart");var url=$el.attr("data-api-url");var title=$(el).attr("data-title");var $spark=$el.find(".sparkline");$spark.height($el.height());$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{days:$el.attr("data-days")||7,gid:$el.attr("data-group")||undefined},success:function(resp){var data=[],maxval=10;$spark.empty();$.each(resp,function(_,val){var date=new Date(val[0]);data.push({y:val[1],label:moment(date).fromNow()});if(val[1]>maxval){maxval=val[1]}});app.charts.createSparkline($spark,data,options)}})},createSparkline:function(el,points,options){var $el=$(el),existing=$el.children(),maxval=10,title,point,pct,child,point_width;if(options===undefined){options={}}for(var i=0;i<points.length;i++){point=points[i];if(typeof point==="number"){point=points[i]={y:point}}if(point.y>maxval){maxval=point.y}}point_width=app.utils.floatFormat(100/points.length,2)+"%";for(i=0;i<points.length;i++){point=points[i];pct=app.utils.floatFormat(point.y/maxval*99,2)+"%";title=point.y+" events";if(point.label){title=title+"<br>("+point.label+")"}if(existing.get(i)===undefined){$('<a style="width:'+point_width+';" rel="tooltip" title="'+title+'"><span style="height:'+pct+'">'+point.y+"</span></a>").tooltip({placement:options.placement||"bottom",html:true,container:"body"}).appendTo($el)}else{$(existing[i]).find("span").css("height",pct).text(point.y).attr("title",point.label||point.y)}}}}})(app,Backbone,jQuery,moment);(function(window,app,Backbone,jQuery,_,moment){"use strict";var $=jQuery;app.GroupView=Backbone.View.extend({tagName:"li",className:"group",template:_.template(app.templates.group),initialize:function(){Backbone.View.prototype.initialize.apply(this,arguments);_.bindAll(this,"updateCount","updateAllAnnotations","updateAnnotation","updateLastSeen","updateResolved","updateHasSeen","renderSparkline","updateBookmarked","render");this.model.on({"change:count":this.updateCount,"change:annotations":this.updateAllAnnotations,"change:lastSeen":this.updateLastSeen,"change:isBookmarked":this.updateBookmarked,"change:isResolved":this.updateResolved,"change:hasSeen":this.updateHasSeen,"change:historicalData":this.renderSparkline},this)},render:function(){var data=this.model.toJSON();data.projectUrl=app.config.urlPrefix+"/"+app.config.teamId+"/"+data.project.slug+"/";data.loggerUrl=data.projectUrl+"?logger="+data.logger;this.$el.html(this.template(data));this.$el.attr("data-id",this.model.id);this.$el.addClass(this.getLevelClassName());this.$el.find("a[data-action=resolve]").click(_.bind(function(e){e.preventDefault();if(this.model.get("isResolved")){this.unresolve()}else{this.resolve()}},this));this.$el.find("a[data-action=bookmark]").click(_.bind(function(e){e.preventDefault();this.bookmark()},this));this.updateLastSeen();this.renderSparkline();this.updateResolved();this.updateHasSeen();this.updateBookmarked()},updateBookmarked:function(){if(this.model.get("isBookmarked")){this.$el.find("a[data-action=bookmark]").addClass("checked")}else{this.$el.find("a[data-action=bookmark]").removeClass("checked")}},updateResolved:function(){if(this.model.get("isResolved")){this.$el.addClass("resolved")}else{this.$el.removeClass("resolved")}},updateHasSeen:function(){if(this.model.get("hasSeen")){this.$el.addClass("seen")}else{this.$el.removeClass("seen")}},renderSparkline:function(obj){var data=this.model.get("historicalData");if(!data||!data.length)return;this.$el.addClass("with-sparkline");app.charts.createSparkline(this.$el.find(".sparkline"),data)},resolve:function(){$.ajax({url:this.getResolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version+5e3);this.model.set("isResolved",true)},this)})},unresolve:function(){$.ajax({url:this.getUnresolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version+5e3);this.model.set("isResolved",false)},this)})},getResolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/resolved/"},getUnresolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/unresolved/"},getBookmarkUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/bookmark/"},bookmark:function(){$.ajax({url:this.getBookmarkUrl(),type:"post",dataType:"json",data:{gid:this.model.get("id")},success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isBookmarked",response.isBookmarked)},this)})},getLevelClassName:function(){return"level-"+this.model.get("levelName")},updateLastSeen:function(){var dt=moment(this.model.get("lastSeen"));this.$el.find(".last-seen").text(dt.fromNow()).data("datetime",this.model.get("lastSeen")).attr("title",dt.format("llll"))},updateCount:function(){var new_count=app.utils.formatNumber(this.model.get("count"));var counter=this.$el.find(".count");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAnnotation:function(annotation){var value=annotation.count;if(value===null)return;var new_count=app.utils.formatNumber(value);var counter=this.$el.find('.annotation[data-tag="'+annotation.label+'"]');var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAllAnnotations:function(){var self=this;$.each(this.model.get("annotations"),function(index,annotation){self.updateAnnotation(annotation)})}});app.OrderedElementsView=Backbone.View.extend({emptyMessage:'<div class="empty-message"><h2>No events to show.</h2><p>We\'ll notify you if that changes. In the meantime why not take a moment to become more familiar with Sentry.</p><p class="links"><a href="docs/">Installation instructions</a> <a href="settings/">Project settings</a></p></div>',loadingMessage:"<p>Loading...</p>",model:app.models.Group,defaults:{maxItems:50,view:Backbone.View},initialize:function(data){if(_.isUndefined(data))data={};var members=data.members;Backbone.View.prototype.initialize.apply(this,arguments);this.options=$.extend({},this.defaults,this.options,data);this.$wrapper=$("#"+this.id);this.$parent=$("<ul></ul>");this.$empty=$('<li class="empty"></li>');this.$wrapper.html(this.$parent);if(this.options.className)this.$parent.addClass(this.options.className);_.bindAll(this,"renderMemberInContainer","unrenderMember","reSortMembers");this.collection=new app.ScoredList([],{model:data.model});this.collection.on("add",this.renderMemberInContainer,this);this.collection.on("remove",this.unrenderMember,this);this.collection.on("reset",this.reSortMembers,this);delete data.members;this.reset(members)},reset:function(members){this.$parent.empty();this.setEmpty();if(members===undefined){this.$empty.html(this.loadingMessage);this.collection.reset();this.setEmpty();this.loaded=false}else{this.$empty.html(this.emptyMessage);this.collection.reset(members);this.loaded=true}},setEmpty:function(){this.$parent.html(this.$empty)},extend:function(data){for(var i=0;i<data.length;i++){this.addMember(data[i])}},addMember:function(member){var existing=this.collection.get(member.id);if(!existing){if(this.collection.length>=this.options.maxItems){if(member.score<this.collection.last().get("score"))return;while(this.collection.length>=this.options.maxItems)this.collection.pop()}}else if(existing.get("version")>=member.version){return}this.collection.add(member,{merge:true})},reSortMembers:function(){this.collection.each(_.bind(function(member){this.renderMemberInContainer(member)},this))},updateMember:function(member,options){if(_.isUndefined(options))options={};var existing=this.collection.get(member.id);if(existing.get("version")>=member.get("version"))return;this.collection.add(member,{merge:true,sort:options.sort!==false?true:false})},hasMember:function(member){return this.collection.get(member.id)?true:false},removeMember:function(member){this.collection.remove(member)},renderMemberInContainer:function(member){var new_pos=this.collection.indexOf(member),$el,$rel;this.$parent.find("li.empty").remove();$el=$("#"+this.id+member.id);if(!$el.length){$el=this.renderMember(member)}else if($el.index()===new_pos){return}if(new_pos===0){this.$parent.prepend($el)}else{$rel=$("#"+this.id+this.collection.at(new_pos).id);if(!$rel.length){this.$parent.append($el)}else if($el.id!==$rel.id){$el.insertBefore($rel)}else{return}}if(this.loaded)$el.css("background-color","#eee").animate({backgroundColor:"#fff"},300)},renderMember:function(member){var view=new this.options.view({model:member,id:this.id+member.id});view.render();return view.$el},unrenderMember:function(member){this.$parent.find("#"+this.id+member.id).remove();if(!this.$parent.find("li").length)this.setEmpty()}});app.GroupListView=app.OrderedElementsView.extend({defaults:{realtime:false,stream:false,pollUrl:null,pollTime:1e3,tickTime:100},initialize:function(data){if(_.isUndefined(data))data={};data.model=app.models.Group;data.view=app.GroupView;app.OrderedElementsView.prototype.initialize.call(this,data);this.options=$.extend({},this.defaults,this.options,data);this.queue=new app.ScoredList([],{model:data.model});this.cursor=null;_.bindAll(this,"poll","pollSuccess","pollFailure","tick");this.poll();window.setInterval(this.tick,this.options.tickTime)},tick:function(){if(!this.queue.length)return;var item=this.queue.pop();if(this.options.canStream){this.addMember(item)}else if(this.hasMember(item)){this.updateMember(item,{sort:false})}},pollSuccess:function(groups){if(!groups.length)return window.setTimeout(this.poll,this.options.pollTime*5);this.cursor=groups[groups.length-1].score;this.queue.add(groups,{merge:true});window.setTimeout(this.poll,this.options.pollTime)},pollFailure:function(jqXHR,textStatus,errorThrown){window.setTimeout(this.poll,this.options.pollTime*10)},poll:function(){var data;if(!this.options.realtime||!this.options.pollUrl)return window.setTimeout(this.poll,this.options.pollTime);data=app.utils.getQueryParams();data.cursor=this.cursor||undefined;$.ajax({url:this.options.pollUrl,type:"GET",dataType:"json",data:data,success:this.pollSuccess,error:this.pollFailure})}})})(window,app,Backbone,jQuery,_,moment);(function(window,app,Backbone,jQuery,_){"use strict";var $=jQuery;var BasePage=Backbone.View.extend({defaults:{canStream:false,realtime:false},initialize:function(data){Backbone.View.prototype.initialize.apply(this,arguments);if(_.isUndefined(data))data={};this.options=$.extend({},this.defaults,this.options,data);this.views={};this.initializeAjaxTabs()},initializeAjaxTabs:function(){$("a[data-toggle=ajtab]").click(_.bind(function(e){var $tab=$(e.target),uri=$tab.attr("data-uri"),view_id=$tab.attr("href").substr(1),view=this.getView(view_id,uri),$cont,$parent;e.preventDefault();if(!uri)return view.reset();$cont=$("#"+view_id);$parent=$cont.parent();$parent.css("opacity",.6);$.ajax({url:uri,dataType:"json",success:function(data){view.reset(data);$parent.css("opacity",1);$tab.tab("show")},error:function(){$cont.html("<p>There was an error fetching data from the server.</p>")}})},this));$("li.active a[data-toggle=ajtab]").click()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list small",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},getView:function(id,uri){if(!this.views[id])this.views[id]=this.makeDefaultView(id);var view=this.views[id];view.options.pollUrl=uri;return view}});app.StreamPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:data.groups,maxItems:50,realtime:$.cookie("pausestream")?false:true,canStream:this.options.canStream,pollUrl:app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/poll/",model:app.models.Group});this.control=$("a[data-action=pause]");this.updateStreamOptions();this.initFilters();this.control.click(_.bind(function(e){e.preventDefault();this.options.realtime=this.group_list.options.realtime=this.control.hasClass("realtime-pause");this.updateStreamOptions()},this));$("#chart").height("50px");app.charts.render("#chart",{placement:"left"})},initFilters:function(){$(".filter").each(_.bind(function(_,el){var $filter=$(el);var $input=$filter.find("input[type=text]");if($input.length>0){$input.select2({initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},allowClear:true,minimumInputLength:3,ajax:{url:app.utils.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$input.attr("name"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:app.utils.escape(val),text:app.utils.escape(val)})});return{results:results}}}})}else{$input=$filter.find("select").select2({allowClear:true})}if($input.length>0){$input.on("change",function(e){var query=app.utils.getQueryParams();query[e.target.name]=e.val;window.location.href="?"+$.param(query)})}},this))},updateStreamOptions:function(){if(this.options.realtime){$.removeCookie("pausestream");this.control.removeClass("realtime-pause");this.control.addClass("realtime-play");this.control.html(this.control.attr("data-pause-label"))}else{$.cookie("pausestream","1",{expires:7});this.control.addClass("realtime-pause");this.control.removeClass("realtime-play");this.control.html(this.control.attr("data-play-label"))}}});app.DashboardPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);$("#chart").height("150px");Sentry.charts.render("#chart")}});app.SelectTeamPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);this.refreshSparklines();$(window).on("resize",this.refreshSparklines)},refreshSparklines:function(){$(".chart").each(function(n,el){var $el=$(el);$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{days:1},success:_.bind(function(data){$.plot($el,[{data:data,color:"#ebeff3",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,color:"#f6f8fa"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})})}});app.GroupDetailsPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:[data.group],model:app.models.Group});$("#chart").height("150px");Sentry.charts.render("#chart");$("#public-status .action").click(function(){var $this=$(this);$.ajax({url:$this.attr("data-api-url"),type:"post",success:function(group){var selector=group.isPublic?"true":"false";var nselector=group.isPublic?"false":"true";$('#public-status span[data-public="'+selector+'"]').show();$('#public-status span[data-public="'+nselector+'"]').hide()},error:function(){window.alert("There was an error changing the public status")}})});$(".add-note-btn").click(function(e){var $el=$(this),$form=$(".add-note-form",$el.parent());e.preventDefault();if($el.hasClass("selected")){$el.removeClass("selected");$form.addClass("hide")}else{$el.addClass("selected");$form.removeClass("hide");$form.find("textarea:first").focus()}});var $event_nav=$("#event_nav");if($event_nav.length>0){var $window=$(window);var $nav_links=$event_nav.find("a[href*=#]");var $nav_targets=[];var scroll_offset=$event_nav.offset().top;var event_nav_height;var last_target;$window.resize(function(){event_nav_height=$event_nav.find(".nav").outerHeight();$event_nav.height(event_nav_height+"px")}).resize();$nav_links.click(function(e){var $el=$(this);var target=$(this.hash);$el.parent().addClass("active").siblings().removeClass("active");$("html,body").animate({scrollTop:target.position().top+event_nav_height},"fast");if(history.pushState){history.pushState({},"",this.hash)}e.preventDefault()}).each(function(){if(this.hash.length>1&&$(this.hash).length){$nav_targets.push(this.hash)}});var resizeTimer;$window.scroll(function(){clearTimeout(resizeTimer);resizeTimer=setTimeout(function(){if($window.scrollTop()>scroll_offset){if(!$event_nav.hasClass("fixed")){$event_nav.addClass("fixed")}}else if($event_nav.hasClass("fixed")){$event_nav.removeClass("fixed")}if($nav_targets.length){var from_top=$window.scrollTop()+event_nav_height+20;var cur=$.map($nav_targets,function(hash){if($(hash).offset().top<from_top){return hash}});var target=cur?cur[cur.length-1]:null;if(!target){target=$nav_targets[0]}if(last_target!==target){last_target=target;$nav_links.parent().removeClass("active").end().filter("[href="+target+"]").parent().addClass("active")}}},1)}).scroll()}}});app.WallPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,{realtime:true,pollTime:3e3});this.sparkline=$(".chart");this.sparkline.height(this.sparkline.parent().height());this.stats=$("#stats");_.bindAll(this,"refreshStats");this.refreshSparkline();this.refreshStats()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},refreshSparkline:function(){$.ajax({url:this.sparkline.attr("data-api-url"),type:"get",dataType:"json",data:{days:1,gid:this.sparkline.attr("data-group")||undefined},success:_.bind(function(data){$.plot(this.sparkline,[{data:data,color:"#52566c",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,fillColor:"#232428"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})},refreshStats:function(){$.ajax({url:this.stats.attr("data-uri"),dataType:"json",success:_.bind(function(data){this.stats.find("[data-stat]").each(function(){var $this=$(this);var new_count=data[$this.attr("data-stat")];var counter=$this.find("big");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")});window.setTimeout(this.refreshStats,1e3)},this)})}});app.AddTeamMemberPage=BasePage.extend({});app.AccessGroupMembersPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=user]")}});app.AccessGroupProjectsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableProjectsInput("form input[name=project]")}});app.TeamDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]")}});app.ProjectDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]");$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),values=[],$value=$('<span class="value"></span>');var i=min;while(i<=max){values.push(i);if(i<12){i+=1}else if(i<24){i+=3}else if(i<36){i+=6}else if(i<48){i+=12}else{i+=24}}$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatHours(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatHours(data.value))},this)).simpleSlider({range:[min,max],step:step,allowedValues:values,snap:true})},this))},formatHours:function formatHours(val){val=parseInt(val,10);if(val===0){return"Disabled"}else if(val>23&&val%24===0){val=val/24;return val+" day"+(val!=1?"s":"")}return val+" hour"+(val!=1?"s":"")}});app.ProjectNotificationsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),$value=$('<span class="value"></span>');$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatThreshold(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatThreshold(data.value))},this)).simpleSlider({range:[min,max],step:step,snap:true})},this));$("#tag_list input").each(function(_,el){$(el).addClass("span6");app.utils.makeSearchableTagsInput(el)})},formatThreshold:function formatThreshold(value){if(!value){return"Disabled"}return value+"%"}});app.NewProjectPage=BasePage.extend({initialize:function(data){this.el=$(data.el);BasePage.prototype.initialize.apply(this,arguments);if(this.options.canSelectTeam&&this.options.canCreateTeam){$("#new_team").hide();$('a[rel="create-new-team"]').click(function(){$("#new_team").show();$("#select_team").hide()});$('a[rel="select-team"]').click(function(){$("#new_team").hide();$("#select_team").show()})}}});Backbone.sync=function(method,model,success,error){success()}})(window,app,Backbone,jQuery,_);
+app=window.app={config:{},templates:{},utils:{}};(function(app,Backbone){"use strict";app.models={};app.models.Group=Backbone.Model.extend({defaults:{count:0,version:0,annotations:[],tags:[],versions:[],hasSeen:false,isBookmarked:false,historicalData:[]}})})(app,Backbone);(function(app){"use strict";app.templates={group:""+'<div class="count" data-count="<%= app.utils.formatNumber(count) %>">'+'<span title="<%= count %>"><%= app.utils.formatNumber(count) %></span>'+"</div>"+'<div class="details">'+'<h3><a href="<%= permalink %>"><%= title %></a></h3>'+'<p class="message">'+"<%= message %>"+"</p>"+'<div class="meta">'+"<% $.each(annotations, function(_, tag) { %>"+'<span class="tag annotation" data-tag="<%= tag.label %>" data-count="<%= app.utils.formatNumber(tag.count) %>">'+"<i><%= tag.label %></i>"+'<span title="<%= count %>"><%= app.utils.formatNumber(tag.count) %></span>'+"</span>"+"<% }) %>"+'<span class="last-seen pretty-date"></span>'+"<% if (timeSpent) { %>"+'<span class="tag time-spent"><%= Math.round(timeSpent) %>ms</span>'+"<% } %>"+'<span class="tag tag-project">'+'<a href="<%= projectUrl %>"><%= project.name %></a>'+"</span>"+'<span class="tag tag-logger">'+'<a href="<%= loggerUrl %>"><%= logger %></a>'+"</span>"+"<% _.each(versions, function(version){ %> "+'<span class="tag tag-version"><%= version %></span>'+"<% }) %>"+"<% _.each(tags, function(tag){ %> "+'<span class="tag"><%= tag %></span>'+"<% }) %>"+"</div>"+'<span class="sparkline"></span>'+'<ul class="actions">'+"<% if (canResolve) { %>"+"<li>"+'<a href="#" data-action="resolve">'+'<i aria-hidden="true" class="icon-checkmark"></i>'+"</a>"+"</li>"+"<li>"+'<a href="#" data-action="bookmark" class="bookmark" title="Bookmark">'+'<i aria-hidden="true" class="icon-star"></i>'+"</a>"+"</li>"+"<% } %>"+"</ul>"+"</div>"}})(app);(function(app,jQuery,_,moment){"use strict";var $=jQuery;var number_formats=[[1e9,"b"],[1e6,"m"],[1e3,"k"]];app.utils={getQueryParams:function(){var vars={},href=window.location.href,hashes,hash;if(href.indexOf("?")==-1)return vars;hashes=href.slice(href.indexOf("?")+1,href.indexOf("#")!=-1?href.indexOf("#"):href.length).split("&");$.each(hashes,function(_,chunk){hash=chunk.split("=");if(!hash[0]&&!hash[1])return;vars[decodeURIComponent(hash[0])]=hash[1]?decodeURIComponent(hash[1]).replace(/\+/," "):""});return vars},floatFormat:function(number,places){var multi=Math.pow(10,places);return parseInt(number*multi,10)/multi},formatNumber:function(number){var b,x,y,o,p;number=parseInt(number,10);for(var i=0;b=number_formats[i];i++){x=b[0];y=b[1];o=Math.floor(number/x);p=number%x;if(o>0){if(o/10>1||!p)return""+o+y;return""+this.floatFormat(number/x,1)+y}}return""+number},slugify:function(str){str=str.replace(/^\s+|\s+$/g,"");str=str.toLowerCase();var from="àáäâèéëêìíïîòóöôùúüûñç·/_,:;";var to="aaaaeeeeiiiioooouuuunc------";for(var i=0,l=from.length;i<l;i++){str=str.replace(new RegExp(from.charAt(i),"g"),to.charAt(i))}str=str.replace(/[^a-z0-9\s\-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-");return str},varToggle:function(link,$elm){var $link=$(link);if(!$link.attr("data-expand-label"))$link.attr("data-expand-label",$link.html());$elm.toggle();if($elm.is(":visible"))$link.html($link.attr("data-collapse-label"));else $link.html($link.attr("data-expand-label"))},getSearchUsersUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/users/search/"},getSearchProjectsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/projects/search/"},getSearchTagsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/tags/search/"},makeSearchableInput:function(el,url,callback){$(el).select2({allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},ajax:{url:url,dataType:"json",data:function(term,page){return{query:term,limit:10}},results:function(data,page){var results=callback(data);return{results:callback(data)}}}})},escape:function(str){return str.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},makeSearchableUsersInput:function(el){this.makeSearchableInput(el,this.getSearchUsersUrl(),_.bind(function(data){var results=[];$(data.results).each(_.bind(function(_,val){var label;if(val.first_name){label=this.escape(val.first_name)+" &mdash; "+this.escape(val.username)}else{label=this.escape(val.username)}label+="<br>"+this.escape(val.email);results.push({id:val.username,text:label})},this));if($(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:this.escape(data.query),text:this.escape(data.query)})}return results},this))},makeSearchableProjectsInput:function(el){this.makeSearchableInput(el,this.getSearchProjectsUrl(),function(data){var results=[];$(data.results).each(function(_,val){results.push({id:val.slug,text:val.name+"<br>"+val.slug})});return results})},makeSearchableTagsInput:function(el,options){var $el=$(el);$el.select2({multiple:true,tokenSeperators:[","],minimumInputLength:3,allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);var values=$el.val().split(",");var results=[];$.each(values,function(_,val){results.push({id:val,text:val})});callback(results)},ajax:{url:this.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$el.data("tag"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:val,text:val})});if($(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:data.query,text:data.query})}return{results:results}}}})}};$(function(){$(".body select").each(function(){var $this=$(this),options={width:"element",allowClear:false};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});setInterval(function(){$(".pretty-date").each(function(_,el){var $el=$(el);var dt=$el.data("datetime");if(dt){var date=moment(dt);if(date){$el.text(date.fromNow());$el.attr("title",date.format("llll"))}}})},5e3)});$.fn.select2.defaults.escapeMarkup=function(s){return s}})(app,jQuery,_,moment);(function(app,Backbone){"use strict";app.ScoredList=Backbone.Collection.extend({comparator:function(member){return-member.get("score")}})})(app,Backbone);(function(app,Backbone,jQuery,moment){"use strict";var $=jQuery;app.charts={render:function(el,options){var $el=$("#chart");var url=$el.attr("data-api-url");var title=$(el).attr("data-title");var $spark=$el.find(".sparkline");$spark.height($el.height());$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{days:$el.attr("data-days")||7,gid:$el.attr("data-group")||undefined},success:function(resp){var data=[],maxval=10;$spark.empty();$.each(resp,function(_,val){var date=new Date(val[0]);data.push({y:val[1],label:moment(date).fromNow()});if(val[1]>maxval){maxval=val[1]}});app.charts.createSparkline($spark,data,options)}})},createSparkline:function(el,points,options){var $el=$(el),existing=$el.children(),maxval=10,title,point,pct,child,point_width;if(options===undefined){options={}}for(var i=0;i<points.length;i++){point=points[i];if(typeof point==="number"){point=points[i]={y:point}}if(point.y>maxval){maxval=point.y}}point_width=app.utils.floatFormat(100/points.length,2)+"%";for(i=0;i<points.length;i++){point=points[i];pct=app.utils.floatFormat(point.y/maxval*99,2)+"%";title=point.y+" events";if(point.label){title=title+"<br>("+point.label+")"}if(existing.get(i)===undefined){$('<a style="width:'+point_width+';" rel="tooltip" title="'+title+'"><span style="height:'+pct+'">'+point.y+"</span></a>").tooltip({placement:options.placement||"bottom",html:true,container:"body"}).appendTo($el)}else{$(existing[i]).find("span").css("height",pct).text(point.y).attr("title",point.label||point.y)}}}}})(app,Backbone,jQuery,moment);(function(window,app,Backbone,jQuery,_,moment){"use strict";var $=jQuery;app.GroupView=Backbone.View.extend({tagName:"li",className:"group",template:_.template(app.templates.group),initialize:function(){Backbone.View.prototype.initialize.apply(this,arguments);_.bindAll(this,"updateCount","updateAllAnnotations","updateAnnotation","updateLastSeen","updateResolved","updateHasSeen","renderSparkline","updateBookmarked","render");this.model.on({"change:count":this.updateCount,"change:annotations":this.updateAllAnnotations,"change:lastSeen":this.updateLastSeen,"change:isBookmarked":this.updateBookmarked,"change:isResolved":this.updateResolved,"change:hasSeen":this.updateHasSeen,"change:historicalData":this.renderSparkline},this)},render:function(){var data=this.model.toJSON();data.projectUrl=app.config.urlPrefix+"/"+app.config.teamId+"/"+data.project.slug+"/";data.loggerUrl=data.projectUrl+"?logger="+data.logger;this.$el.html(this.template(data));this.$el.attr("data-id",this.model.id);this.$el.addClass(this.getLevelClassName());this.$el.find("a[data-action=resolve]").click(_.bind(function(e){e.preventDefault();if(this.model.get("isResolved")){this.unresolve()}else{this.resolve()}},this));this.$el.find("a[data-action=bookmark]").click(_.bind(function(e){e.preventDefault();this.bookmark()},this));this.updateLastSeen();this.renderSparkline();this.updateResolved();this.updateHasSeen();this.updateBookmarked()},updateBookmarked:function(){if(this.model.get("isBookmarked")){this.$el.find("a[data-action=bookmark]").addClass("checked")}else{this.$el.find("a[data-action=bookmark]").removeClass("checked")}},updateResolved:function(){if(this.model.get("isResolved")){this.$el.addClass("resolved")}else{this.$el.removeClass("resolved")}},updateHasSeen:function(){if(this.model.get("hasSeen")){this.$el.addClass("seen")}else{this.$el.removeClass("seen")}},renderSparkline:function(obj){var data=this.model.get("historicalData");if(!data||!data.length)return;this.$el.addClass("with-sparkline");app.charts.createSparkline(this.$el.find(".sparkline"),data)},resolve:function(){$.ajax({url:this.getResolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version+5e3);this.model.set("isResolved",true)},this)})},unresolve:function(){$.ajax({url:this.getUnresolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version+5e3);this.model.set("isResolved",false)},this)})},getResolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/resolved/"},getUnresolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/unresolved/"},getBookmarkUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/bookmark/"},bookmark:function(){$.ajax({url:this.getBookmarkUrl(),type:"post",dataType:"json",data:{gid:this.model.get("id")},success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isBookmarked",response.isBookmarked)},this)})},getLevelClassName:function(){return"level-"+this.model.get("levelName")},updateLastSeen:function(){var dt=moment(this.model.get("lastSeen"));this.$el.find(".last-seen").text(dt.fromNow()).data("datetime",this.model.get("lastSeen")).attr("title",dt.format("llll"))},updateCount:function(){var new_count=app.utils.formatNumber(this.model.get("count"));var counter=this.$el.find(".count");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAnnotation:function(annotation){var value=annotation.count;if(value===null)return;var new_count=app.utils.formatNumber(value);var counter=this.$el.find('.annotation[data-tag="'+annotation.label+'"]');var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAllAnnotations:function(){var self=this;$.each(this.model.get("annotations"),function(index,annotation){self.updateAnnotation(annotation)})}});app.OrderedElementsView=Backbone.View.extend({emptyMessage:'<div class="empty-message"><h2>No events to show.</h2><p>We\'ll notify you if that changes. In the meantime why not take a moment to become more familiar with Sentry.</p><p class="links"><a href="docs/">Installation instructions</a> <a href="settings/">Project settings</a></p></div>',loadingMessage:"<p>Loading...</p>",model:app.models.Group,defaults:{maxItems:50,view:Backbone.View},initialize:function(data){if(_.isUndefined(data))data={};var members=data.members;Backbone.View.prototype.initialize.apply(this,arguments);this.options=$.extend({},this.defaults,this.options,data);this.$wrapper=$("#"+this.id);this.$parent=$("<ul></ul>");this.$empty=$('<li class="empty"></li>');this.$wrapper.html(this.$parent);if(this.options.className)this.$parent.addClass(this.options.className);_.bindAll(this,"renderMemberInContainer","unrenderMember","reSortMembers");this.collection=new app.ScoredList([],{model:data.model});this.collection.on("add",this.renderMemberInContainer,this);this.collection.on("remove",this.unrenderMember,this);this.collection.on("reset",this.reSortMembers,this);delete data.members;this.reset(members)},reset:function(members){this.$parent.empty();this.setEmpty();if(members===undefined){this.$empty.html(this.loadingMessage);this.collection.reset();this.setEmpty();this.loaded=false}else{this.$empty.html(this.emptyMessage);this.collection.reset(members);this.loaded=true}},setEmpty:function(){this.$parent.html(this.$empty)},extend:function(data){for(var i=0;i<data.length;i++){this.addMember(data[i])}},addMember:function(member){var existing=this.collection.get(member.id);if(!existing){if(this.collection.length>=this.options.maxItems){if(member.score<this.collection.last().get("score"))return;while(this.collection.length>=this.options.maxItems)this.collection.pop()}}else if(member.version&&existing.get("version")>=member.version){return}this.collection.add(member,{merge:true})},reSortMembers:function(){this.collection.each(_.bind(function(member){this.renderMemberInContainer(member)},this))},updateMember:function(member,options){if(_.isUndefined(options))options={};var existing=this.collection.get(member.id);if(existing.get("version")>=member.get("version"))return;this.collection.add(member,{merge:true,sort:options.sort!==false?true:false})},hasMember:function(member){return this.collection.get(member.id)?true:false},removeMember:function(member){this.collection.remove(member)},renderMemberInContainer:function(member){var new_pos=this.collection.indexOf(member),$el,$rel;this.$parent.find("li.empty").remove();$el=$("#"+this.id+member.id);if(!$el.length){$el=this.renderMember(member)}else if($el.index()===new_pos){return}if(new_pos===0){this.$parent.prepend($el)}else{$rel=$("#"+this.id+this.collection.at(new_pos).id);if(!$rel.length){this.$parent.append($el)}else if($el.id!==$rel.id){$el.insertBefore($rel)}else{return}}if(this.loaded)$el.css("background-color","#eee").animate({backgroundColor:"#fff"},300)},renderMember:function(member){var view=new this.options.view({model:member,id:this.id+member.id});view.render();return view.$el},unrenderMember:function(member){this.$parent.find("#"+this.id+member.id).remove();if(!this.$parent.find("li").length)this.setEmpty()}});app.GroupListView=app.OrderedElementsView.extend({defaults:{realtime:false,stream:false,pollUrl:null,pollTime:1e3,tickTime:100},initialize:function(data){if(_.isUndefined(data))data={};data.model=app.models.Group;data.view=app.GroupView;app.OrderedElementsView.prototype.initialize.call(this,data);this.options=$.extend({},this.defaults,this.options,data);this.queue=new app.ScoredList([],{model:data.model});this.cursor=null;_.bindAll(this,"poll","pollSuccess","pollFailure","tick");this.poll();window.setInterval(this.tick,this.options.tickTime)},tick:function(){if(!this.queue.length)return;var item=this.queue.pop();if(this.options.canStream){this.addMember(item)}else if(this.hasMember(item)){this.updateMember(item,{sort:false})}},pollSuccess:function(groups){if(!groups.length)return window.setTimeout(this.poll,this.options.pollTime*5);this.cursor=groups[groups.length-1].score;this.queue.add(groups,{merge:true});window.setTimeout(this.poll,this.options.pollTime)},pollFailure:function(jqXHR,textStatus,errorThrown){window.setTimeout(this.poll,this.options.pollTime*10)},poll:function(){var data;if(!this.options.realtime||!this.options.pollUrl)return window.setTimeout(this.poll,this.options.pollTime);data=app.utils.getQueryParams();data.cursor=this.cursor||undefined;$.ajax({url:this.options.pollUrl,type:"GET",dataType:"json",data:data,success:this.pollSuccess,error:this.pollFailure})}})})(window,app,Backbone,jQuery,_,moment);(function(window,app,Backbone,jQuery,_){"use strict";var $=jQuery;var BasePage=Backbone.View.extend({defaults:{canStream:false,realtime:false},initialize:function(data){Backbone.View.prototype.initialize.apply(this,arguments);if(_.isUndefined(data))data={};this.options=$.extend({},this.defaults,this.options,data);this.views={};this.initializeAjaxTabs()},initializeAjaxTabs:function(){$("a[data-toggle=ajtab]").click(_.bind(function(e){var $tab=$(e.target),uri=$tab.attr("data-uri"),view_id=$tab.attr("href").substr(1),view=this.getView(view_id,uri),$cont,$parent;e.preventDefault();if(!uri)return view.reset();$cont=$("#"+view_id);$parent=$cont.parent();$parent.css("opacity",.6);$.ajax({url:uri,dataType:"json",success:function(data){view.reset(data);$parent.css("opacity",1);$tab.tab("show")},error:function(){$cont.html("<p>There was an error fetching data from the server.</p>")}})},this));$("li.active a[data-toggle=ajtab]").click()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list small",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},getView:function(id,uri){if(!this.views[id])this.views[id]=this.makeDefaultView(id);var view=this.views[id];view.options.pollUrl=uri;return view}});app.StreamPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:data.groups,maxItems:50,realtime:$.cookie("pausestream")?false:true,canStream:this.options.canStream,pollUrl:app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/poll/",model:app.models.Group});this.control=$("a[data-action=pause]");this.updateStreamOptions();this.initFilters();this.control.click(_.bind(function(e){e.preventDefault();this.options.realtime=this.group_list.options.realtime=this.control.hasClass("realtime-pause");this.updateStreamOptions()},this));$("#chart").height("50px");app.charts.render("#chart",{placement:"left"})},initFilters:function(){$(".filter").each(_.bind(function(_,el){var $filter=$(el);var $input=$filter.find("input[type=text]");if($input.length>0){$input.select2({initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},allowClear:true,minimumInputLength:3,ajax:{url:app.utils.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$input.attr("name"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:app.utils.escape(val),text:app.utils.escape(val)})});return{results:results}}}})}else{$input=$filter.find("select").select2({allowClear:true})}if($input.length>0){$input.on("change",function(e){var query=app.utils.getQueryParams();query[e.target.name]=e.val;window.location.href="?"+$.param(query)})}},this))},updateStreamOptions:function(){if(this.options.realtime){$.removeCookie("pausestream");this.control.removeClass("realtime-pause");this.control.addClass("realtime-play");this.control.html(this.control.attr("data-pause-label"))}else{$.cookie("pausestream","1",{expires:7});this.control.addClass("realtime-pause");this.control.removeClass("realtime-play");this.control.html(this.control.attr("data-play-label"))}}});app.DashboardPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);$("#chart").height("150px");Sentry.charts.render("#chart")}});app.SelectTeamPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);this.refreshSparklines();$(window).on("resize",this.refreshSparklines)},refreshSparklines:function(){$(".chart").each(function(n,el){var $el=$(el);$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{days:1},success:_.bind(function(data){$.plot($el,[{data:data,color:"#ebeff3",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,color:"#f6f8fa"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})})}});app.GroupDetailsPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:[data.group],model:app.models.Group});$("#chart").height("150px");Sentry.charts.render("#chart");$("#public-status .action").click(function(){var $this=$(this);$.ajax({url:$this.attr("data-api-url"),type:"post",success:function(group){var selector=group.isPublic?"true":"false";var nselector=group.isPublic?"false":"true";$('#public-status span[data-public="'+selector+'"]').show();$('#public-status span[data-public="'+nselector+'"]').hide()},error:function(){window.alert("There was an error changing the public status")}})});$(".add-note-btn").click(function(e){var $el=$(this),$form=$(".add-note-form",$el.parent());e.preventDefault();if($el.hasClass("selected")){$el.removeClass("selected");$form.addClass("hide")}else{$el.addClass("selected");$form.removeClass("hide");$form.find("textarea:first").focus()}});var $event_nav=$("#event_nav");if($event_nav.length>0){var $window=$(window);var $nav_links=$event_nav.find("a[href*=#]");var $nav_targets=[];var scroll_offset=$event_nav.offset().top;var event_nav_height;var last_target;$window.resize(function(){event_nav_height=$event_nav.find(".nav").outerHeight();$event_nav.height(event_nav_height+"px")}).resize();$nav_links.click(function(e){var $el=$(this);var target=$(this.hash);$el.parent().addClass("active").siblings().removeClass("active");$("html,body").animate({scrollTop:target.position().top+event_nav_height},"fast");if(history.pushState){history.pushState({},"",this.hash)}e.preventDefault()}).each(function(){if(this.hash.length>1&&$(this.hash).length){$nav_targets.push(this.hash)}});var resizeTimer;$window.scroll(function(){clearTimeout(resizeTimer);resizeTimer=setTimeout(function(){if($window.scrollTop()>scroll_offset){if(!$event_nav.hasClass("fixed")){$event_nav.addClass("fixed")}}else if($event_nav.hasClass("fixed")){$event_nav.removeClass("fixed")}if($nav_targets.length){var from_top=$window.scrollTop()+event_nav_height+20;var cur=$.map($nav_targets,function(hash){if($(hash).offset().top<from_top){return hash}});var target=cur?cur[cur.length-1]:null;if(!target){target=$nav_targets[0]}if(last_target!==target){last_target=target;$nav_links.parent().removeClass("active").end().filter("[href="+target+"]").parent().addClass("active")}}},1)}).scroll()}}});app.WallPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,{realtime:true,pollTime:3e3});this.sparkline=$(".chart");this.sparkline.height(this.sparkline.parent().height());this.stats=$("#stats");_.bindAll(this,"refreshStats");this.refreshSparkline();this.refreshStats()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},refreshSparkline:function(){$.ajax({url:this.sparkline.attr("data-api-url"),type:"get",dataType:"json",data:{days:1,gid:this.sparkline.attr("data-group")||undefined},success:_.bind(function(data){$.plot(this.sparkline,[{data:data,color:"#52566c",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,fillColor:"#232428"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})},refreshStats:function(){$.ajax({url:this.stats.attr("data-uri"),dataType:"json",success:_.bind(function(data){this.stats.find("[data-stat]").each(function(){var $this=$(this);var new_count=data[$this.attr("data-stat")];var counter=$this.find("big");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")});window.setTimeout(this.refreshStats,1e3)},this)})}});app.AddTeamMemberPage=BasePage.extend({});app.AccessGroupMembersPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=user]")}});app.AccessGroupProjectsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableProjectsInput("form input[name=project]")}});app.TeamDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]")}});app.ProjectDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]");$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),values=[],$value=$('<span class="value"></span>');var i=min;while(i<=max){values.push(i);if(i<12){i+=1}else if(i<24){i+=3}else if(i<36){i+=6}else if(i<48){i+=12}else{i+=24}}$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatHours(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatHours(data.value))},this)).simpleSlider({range:[min,max],step:step,allowedValues:values,snap:true})},this))},formatHours:function formatHours(val){val=parseInt(val,10);if(val===0){return"Disabled"}else if(val>23&&val%24===0){val=val/24;return val+" day"+(val!=1?"s":"")}return val+" hour"+(val!=1?"s":"")}});app.ProjectNotificationsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),$value=$('<span class="value"></span>');$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatThreshold(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatThreshold(data.value))},this)).simpleSlider({range:[min,max],step:step,snap:true})},this));$("#tag_list input").each(function(_,el){$(el).addClass("span6");app.utils.makeSearchableTagsInput(el)})},formatThreshold:function formatThreshold(value){if(!value){return"Disabled"}return value+"%"}});app.NewProjectPage=BasePage.extend({initialize:function(data){this.el=$(data.el);BasePage.prototype.initialize.apply(this,arguments);if(this.options.canSelectTeam&&this.options.canCreateTeam){$("#new_team").hide();$('a[rel="create-new-team"]').click(function(){$("#new_team").show();$("#select_team").hide()});$('a[rel="select-team"]').click(function(){$("#new_team").hide();$("#select_team").show()})}}});Backbone.sync=function(method,model,success,error){success()}})(window,app,Backbone,jQuery,_);
 //@ sourceMappingURL=global.min.map.js
\ No newline at end of file
diff --git a/src/sentry/utils/dates.py b/src/sentry/utils/dates.py
index b2407967cf..2ddb0408a0 100644
--- a/src/sentry/utils/dates.py
+++ b/src/sentry/utils/dates.py
@@ -17,6 +17,7 @@ DATE_TRUNC_GROUPERS = {
         'hour': 'hh24',
     },
     'default': {
+        'date': 'day',
         'hour': 'hour',
         'minute': 'minute',
     },
diff --git a/src/sentry/utils/functional.py b/src/sentry/utils/functional.py
new file mode 100644
index 0000000000..dd979967a6
--- /dev/null
+++ b/src/sentry/utils/functional.py
@@ -0,0 +1,13 @@
+from django.utils.functional import empty
+
+
+def extract_lazy_object(lo):
+    """
+    Unwrap a LazyObject and return the inner object. Whatever that may be.
+
+    ProTip: This is relying on `django.utils.functional.empty`, which may
+    or may not be removed in the future. It's 100% undocumented.
+    """
+    if lo._wrapped is empty:
+        lo._setup()
+    return lo._wrapped
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 2d80b05929..0763edfd44 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -69,6 +69,9 @@ urlpatterns += patterns('',
     url(r'^_static/(?P<module>[^/]+)/(?P<path>.*)$', generic.static_media,
         name='sentry-media'),
 
+    # API
+    url(r'^api/0/', include('sentry.api.urls')),
+
     # Account
     url(r'^login/$', accounts.login,
         name='sentry-login'),
@@ -277,8 +280,6 @@ urlpatterns += patterns('',
     url(r'^api/(?P<team_slug>[\w_-]+)/projects/search/$', api.search_projects,
         name='sentry-api-search-projects'),
 
-    url(r'^api/0/', include('sentry.api.urls')),
-
     # TV dashboard
     url(r'^(?P<team_slug>[\w_-]+)/wall/$', groups.wall_display,
         name='sentry-wall'),
diff --git a/tests/sentry/api/endpoints/test_auth.py b/tests/sentry/api/endpoints/test_auth.py
new file mode 100644
index 0000000000..e68cca7f84
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_auth.py
@@ -0,0 +1,31 @@
+import base64
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class LoginTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(email='a@example.com')
+        user.set_password('test')
+        user.save()
+
+        auth_header = 'Basic ' + base64.b64encode('a@example.com:test')
+
+        url = reverse('sentry-api-0-auth')
+        response = self.client.post(url, format='json', HTTP_AUTHORIZATION=auth_header)
+
+        assert response.status_code == 200, response.content
+
+
+class LogoutTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(email='a@example.com')
+
+        self.login_as(user)
+
+        url = reverse('sentry-api-0-auth')
+        response = self.client.delete(url, format='json')
+
+        assert response.status_code == 204, response.content
diff --git a/tests/sentry/api/endpoints/test_event_details.py b/tests/sentry/api/endpoints/test_event_details.py
new file mode 100644
index 0000000000..3d95a656b4
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_event_details.py
@@ -0,0 +1,31 @@
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class EventDetailsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        prev_event = self.create_event(
+            event_id='a',
+            group=group,
+        )
+        cur_event = self.create_event(
+            event_id='b',
+            group=group,
+        )
+        next_event = self.create_event(
+            event_id='c',
+            group=group,
+        )
+
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': cur_event.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(cur_event.id)
+        assert response.data['nextEventID'] == str(next_event.id)
+        assert response.data['previousEventID'] == str(prev_event.id)
diff --git a/tests/sentry/api/endpoints/test_group_bookmark.py b/tests/sentry/api/endpoints/test_group_bookmark.py
new file mode 100644
index 0000000000..ecb714ba92
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_bookmark.py
@@ -0,0 +1,22 @@
+from django.core.urlresolvers import reverse
+
+from sentry.models import GroupBookmark
+from sentry.testutils import APITestCase
+
+
+class GroupBookmarkTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-bookmark', kwargs={
+            'group_id': group.id
+        })
+        response = self.client.post(url, format='json')
+
+        assert response.status_code == 200, response.content
+
+        # ensure we've created the bookmark
+        assert GroupBookmark.objects.filter(
+            group=group, user=self.user).exists()
diff --git a/tests/sentry/api/endpoints/test_group_delete.py b/tests/sentry/api/endpoints/test_group_delete.py
new file mode 100644
index 0000000000..42d120f927
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_delete.py
@@ -0,0 +1,21 @@
+from django.core.urlresolvers import reverse
+
+from sentry.models import Group
+from sentry.testutils import APITestCase
+
+
+class GroupDeleteTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-delete', kwargs={
+            'group_id': group.id
+        })
+        response = self.client.post(url, format='json')
+
+        assert response.status_code == 200, response.content
+
+        group = Group.objects.filter(id=group.id).exists()
+        assert not group
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 6e0ba281b3..eb513eb0d8 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -1,43 +1,17 @@
 from django.core.urlresolvers import reverse
-from sentry.constants import STATUS_RESOLVED
-from sentry.models import Group
 from sentry.testutils import APITestCase
 
 
 class GroupDetailsTest(APITestCase):
     def test_simple(self):
-        self.client.force_authenticate(user=self.user)
+        self.login_as(user=self.user)
 
         group = self.create_group()
 
         url = reverse('sentry-api-0-group-details', kwargs={
-            'project_id': self.project.slug,
-            'team_slug': self.team.slug,
             'group_id': group.id,
         })
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == group.id
-
-
-class GroupUpdateTest(APITestCase):
-    def test_simple(self):
-        self.client.force_authenticate(user=self.user)
-
-        group = self.create_group()
-
-        url = reverse('sentry-api-0-group-details', kwargs={
-            'project_id': self.project.slug,
-            'team_slug': self.team.slug,
-            'group_id': group.id,
-        })
-        response = self.client.put(url, data={
-            'status': 'resolved',
-        }, format='json')
-
-        assert response.status_code == 200, response.content
-
-        group = Group.objects.get(id=group.id)
-
-        assert group.status == STATUS_RESOLVED
+        assert response.data['id'] == str(group.id)
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
new file mode 100644
index 0000000000..40f66d23eb
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -0,0 +1,23 @@
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class GroupResolveTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        event_1 = self.create_event('a' * 40, group=group)
+        event_2 = self.create_event('b' * 40, group=group)
+
+        url = reverse('sentry-api-0-group-events', kwargs={
+            'group_id': group.id
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert sorted(map(lambda x: x['id'], response.data)) == sorted([
+            str(event_1.id),
+            str(event_2.id),
+        ])
diff --git a/tests/sentry/api/endpoints/test_group_events_latest.py b/tests/sentry/api/endpoints/test_group_events_latest.py
new file mode 100644
index 0000000000..e7e2fa1264
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_events_latest.py
@@ -0,0 +1,29 @@
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class GroupEventsLatestTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        self.create_event(
+            event_id='a',
+            group=group,
+        )
+        event_2 = self.create_event(
+            event_id='b',
+            group=group,
+        )
+
+        url = reverse('sentry-api-0-group-events-latest', kwargs={
+            'group_id': group.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 302, response.content
+        assert response['Location'] == 'http://testserver{0}'.format(
+            reverse('sentry-api-0-event-details', kwargs={
+                'event_id': event_2.id,
+            })
+        )
diff --git a/tests/sentry/api/endpoints/test_group_markseen.py b/tests/sentry/api/endpoints/test_group_markseen.py
new file mode 100644
index 0000000000..ddb4f7a69b
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_markseen.py
@@ -0,0 +1,22 @@
+from django.core.urlresolvers import reverse
+
+from sentry.models import GroupSeen
+from sentry.testutils import APITestCase
+
+
+class GroupMarkSeenTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-markseen', kwargs={
+            'group_id': group.id,
+        })
+        response = self.client.post(url, format='json')
+
+        assert response.status_code == 201, response.content
+
+        # ensure we've marked the group as seen
+        assert GroupSeen.objects.filter(
+            group=group, user=self.user).exists()
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
new file mode 100644
index 0000000000..fbf44b4169
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -0,0 +1,55 @@
+from django.core.urlresolvers import reverse
+from sentry.models import Activity
+from sentry.testutils import APITestCase
+
+
+class GroupNoteTest(APITestCase):
+    def test_simple(self):
+        group = self.group
+
+        activity = Activity.objects.create(
+            group=group,
+            project=group.project,
+            type=Activity.NOTE,
+            user=self.user,
+            data={'text': 'hello world'},
+        )
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-group-notes', kwargs={
+            'group_id': self.group.id,
+        })
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(activity.id)
+
+
+class GroupNoteCreateTest(APITestCase):
+    def test_simple(self):
+        group = self.group
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-group-notes', kwargs={
+            'group_id': self.group.id,
+        })
+
+        response = self.client.post(url, format='json')
+        assert response.status_code == 400
+
+        response = self.client.post(url, format='json', data={
+            'text': 'hello world',
+        })
+        assert response.status_code == 201, response.content
+
+        activity = Activity.objects.get(id=response.data['id'])
+        assert activity.user == self.user
+        assert activity.group == group
+        assert activity.data == {'text': 'hello world'}
+
+        response = self.client.post(url, format='json', data={
+            'text': 'hello world',
+        })
+        assert response.status_code == 400, response.content
diff --git a/tests/sentry/api/endpoints/test_group_resolve.py b/tests/sentry/api/endpoints/test_group_resolve.py
new file mode 100644
index 0000000000..54eb6b2c48
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_resolve.py
@@ -0,0 +1,23 @@
+from django.core.urlresolvers import reverse
+from sentry.constants import STATUS_RESOLVED
+from sentry.models import Group
+from sentry.testutils import APITestCase
+
+
+class GroupResolveTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-resolve', kwargs={
+            'group_id': group.id,
+        })
+        response = self.client.post(url, format='json')
+        assert response.status_code == 200, response.content
+
+        group = Group.objects.get(
+            id=group.id,
+            project=group.project.id,
+        )
+        assert group.status == STATUS_RESOLVED
diff --git a/tests/sentry/api/endpoints/test_group_stats.py b/tests/sentry/api/endpoints/test_group_stats.py
new file mode 100644
index 0000000000..874be6d646
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_stats.py
@@ -0,0 +1,17 @@
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class GroupStatsTest(APITestCase):
+    def test_simple(self):
+        # TODO: ensure this test checks data
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-stats', kwargs={
+            'group_id': group.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
diff --git a/tests/sentry/api/endpoints/test_group_tags.py b/tests/sentry/api/endpoints/test_group_tags.py
new file mode 100644
index 0000000000..62f9bec47e
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_tags.py
@@ -0,0 +1,36 @@
+from django.core.urlresolvers import reverse
+from sentry.models import TagKey, GroupTagKey, GroupTagValue
+from sentry.testutils import APITestCase
+
+
+class GroupTagsTest(APITestCase):
+    def test_simple(self):
+        group = self.create_group()
+        group.data['tags'] = (['foo', 'bar'], ['biz', 'baz'])
+        group.save()
+
+        for key, value in group.data['tags']:
+            TagKey.objects.create(
+                project=group.project,
+                key=key,
+            )
+            GroupTagKey.objects.create(
+                project=group.project,
+                group=group,
+                key=key,
+            )
+            GroupTagValue.objects.create(
+                project=group.project,
+                group=group,
+                key=key,
+                value=value,
+            )
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-group-tags', kwargs={
+            'group_id': group.id,
+        })
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
new file mode 100644
index 0000000000..9c614378cc
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -0,0 +1,55 @@
+from django.core.urlresolvers import reverse
+from sentry.models import Project
+from sentry.testutils import APITestCase
+
+
+class ProjectDetailsTest(APITestCase):
+    def test_simple(self):
+        project = self.project  # force creation
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-details', kwargs={'project_id': project.id})
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert response.data['id'] == str(project.id)
+
+
+class ProjectUpdateTest(APITestCase):
+    def test_simple(self):
+        project = self.project  # force creation
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-details', kwargs={'project_id': project.id})
+        resp = self.client.put(url, data={
+            'name': 'hello world',
+            'slug': 'foobar',
+        })
+        assert resp.status_code == 200, resp.content
+        project = Project.objects.get(id=project.id)
+        assert project.name == 'hello world'
+        assert project.slug == 'foobar'
+
+
+class ProjectDeleteTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-project-details', kwargs={'project_id': project.id})
+
+        with self.settings(SENTRY_PROJECT=0):
+            response = self.client.delete(url)
+
+        assert response.status_code == 204
+        assert not Project.objects.filter(id=project.id).exists()
+
+    def test_internal_project(self):
+        project = self.create_project()
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-project-details', kwargs={'project_id': project.id})
+
+        with self.settings(SENTRY_PROJECT=project.id):
+            response = self.client.delete(url)
+
+        assert response.status_code == 403
diff --git a/tests/sentry/api/endpoints/test_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
similarity index 64%
rename from tests/sentry/api/endpoints/test_group_index.py
rename to tests/sentry/api/endpoints/test_project_group_index.py
index ba4c179442..9891ff1324 100644
--- a/tests/sentry/api/endpoints/test_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -7,8 +7,8 @@ class GroupIndexTest(APITestCase):
         self.create_group(checksum='a' * 32)
         self.create_group(checksum='b' * 32)
 
-        self.client.force_authenticate(user=self.user)
-        url = reverse('sentry-api-0-group-list', kwargs={
-            'project_id': self.project.id, 'team_slug': self.team.slug})
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-group-index', kwargs={
+            'project_id': self.project.id})
         response = self.client.get(url, format='json')
         assert response.status_code == 200
diff --git a/tests/sentry/api/endpoints/test_project_index.py b/tests/sentry/api/endpoints/test_project_index.py
new file mode 100644
index 0000000000..ab2fe026ac
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_index.py
@@ -0,0 +1,11 @@
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class ProjectIndexTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-index')
+        print url
+        response = self.client.get(url)
+        assert response.status_code == 200
diff --git a/tests/sentry/api/endpoints/test_project_stats.py b/tests/sentry/api/endpoints/test_project_stats.py
new file mode 100644
index 0000000000..4169c544f0
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_stats.py
@@ -0,0 +1,17 @@
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class ProjectStatsTest(APITestCase):
+    def test_simple(self):
+        # TODO: ensure this test checks data
+        self.login_as(user=self.user)
+
+        project = self.create_project(owner=self.user)
+
+        url = reverse('sentry-api-0-project-stats', kwargs={
+            'project_id': project.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
diff --git a/tests/sentry/api/endpoints/test_team_access_group_index.py b/tests/sentry/api/endpoints/test_team_access_group_index.py
new file mode 100644
index 0000000000..dcb9b26a51
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_team_access_group_index.py
@@ -0,0 +1,41 @@
+from django.core.urlresolvers import reverse
+from sentry.constants import MEMBER_USER
+from sentry.models import AccessGroup
+from sentry.testutils import APITestCase
+
+
+class TeamAccessGroupIndexTest(APITestCase):
+    def test_simple(self):
+        team = self.create_team()
+        group_1 = AccessGroup.objects.create(team=team, name='bar')
+        group_2 = AccessGroup.objects.create(team=team, name='foo')
+
+        self.login_as(user=team.owner)
+
+        url = reverse('sentry-api-0-team-access-group-index', kwargs={
+            'team_id': team.id,
+        })
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert len(response.data) == 2
+        assert response.data[0]['id'] == str(group_1.id)
+        assert response.data[1]['id'] == str(group_2.id)
+
+
+class TeamAccessGroupCreateTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        team = self.create_team(slug='baz')
+        url = reverse('sentry-api-0-team-access-group-index', kwargs={
+            'team_id': team.id,
+        })
+        resp = self.client.post(url, data={
+            'name': 'hello world',
+            'type': 'user',
+        })
+        assert resp.status_code == 201, resp.content
+        access_group = AccessGroup.objects.get(id=resp.data['id'])
+        assert access_group.name == 'hello world'
+        assert access_group.type == MEMBER_USER
+        assert access_group.managed is False
+        assert access_group.team == team
diff --git a/tests/sentry/api/endpoints/test_team_details.py b/tests/sentry/api/endpoints/test_team_details.py
new file mode 100644
index 0000000000..1eb0f35852
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_team_details.py
@@ -0,0 +1,113 @@
+from django.core.urlresolvers import reverse
+from mock import patch
+
+from sentry.constants import MEMBER_ADMIN
+from sentry.models import Team, TeamStatus
+from sentry.testutils import APITestCase
+
+
+class TeamDetailsTest(APITestCase):
+    def test_simple(self):
+        team = self.team  # force creation
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert response.data['id'] == str(team.id)
+
+
+class TeamUpdateTest(APITestCase):
+    def test_simple(self):
+        team = self.team  # force creation
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
+        resp = self.client.put(url, data={
+            'name': 'hello world',
+            'slug': 'foobar',
+        })
+        assert resp.status_code == 200, resp.content
+        team = Team.objects.get(id=team.id)
+        assert team.name == 'hello world'
+        assert team.slug == 'foobar'
+
+    def test_owner_can_change_owner(self):
+        user = self.create_user('owner@example.com', is_superuser=False)
+        new_user = self.create_user('new-owner@example.com')
+        team = self.create_team(owner=user)
+
+        url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
+
+        self.login_as(user=user)
+
+        resp = self.client.put(url, {
+            'name': 'Test Team',
+            'slug': 'test',
+            'owner': new_user.username,
+        })
+        assert resp.status_code == 200, resp.content
+
+        team = Team.objects.get(name='Test Team')
+        assert team.owner == new_user
+
+        member_set = list(team.member_set.all())
+
+        self.assertEquals(len(member_set), 2)
+        member_set.sort(key=lambda x: x.user_id)
+        member = member_set[0]
+        self.assertEquals(member.user, user)
+        self.assertEquals(member.type, MEMBER_ADMIN)
+        member = member_set[1]
+        self.assertEquals(member.user, new_user)
+        self.assertEquals(member.type, MEMBER_ADMIN)
+
+
+class TeamDeleteTest(APITestCase):
+    @patch('sentry.api.endpoints.team_details.delete_team')
+    def test_simple(self, delete_team):
+        team = self.create_team()
+        project = self.create_project(team=team)  # NOQA
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
+
+        with self.settings(SENTRY_PROJECT=0):
+            response = self.client.delete(url)
+
+        team = Team.objects.get(id=team.id)
+
+        assert team.status == TeamStatus.PENDING_DELETION
+
+        assert response.status_code == 204
+        delete_team.delay.assert_called_once_with(
+            object_id=team.id,
+            countdown=60 * 5,
+        )
+
+    def test_internal_project(self):
+        team = self.create_team()
+        project = self.create_project(team=team)
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
+
+        with self.settings(SENTRY_PROJECT=project.id):
+            response = self.client.delete(url)
+
+        assert response.status_code == 403
+
+    def test_as_non_owner(self):
+        team = self.create_team(owner=self.user)
+        project = self.create_project(team=team)  # NOQA
+
+        user = self.create_user(email='foo@example.com', is_superuser=False)
+
+        team.member_set.create(user=user, type=MEMBER_ADMIN)
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
+        response = self.client.delete(url)
+
+        assert response.status_code == 403
diff --git a/tests/sentry/api/endpoints/test_team_index.py b/tests/sentry/api/endpoints/test_team_index.py
new file mode 100644
index 0000000000..ff9ce83372
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_team_index.py
@@ -0,0 +1,82 @@
+from django.core.urlresolvers import reverse
+from exam import fixture
+from mock import Mock, patch
+
+from sentry.constants import MEMBER_OWNER
+from sentry.models import Team
+from sentry.testutils import APITestCase
+
+
+class TeamIndexTest(APITestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-api-0-team-index')
+
+    def test_simple(self):
+        team = self.create_team()  # force creation
+        self.login_as(user=self.user)
+        response = self.client.get(self.path)
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(team.id)
+
+
+class TeamCreateTest(APITestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-api-0-team-index')
+
+    @patch('sentry.api.endpoints.team_index.can_create_teams', Mock(return_value=False))
+    def test_missing_permission(self):
+        self.login_as(user=self.user)
+        resp = self.client.post(self.path)
+        assert resp.status_code == 403
+
+    @patch('sentry.api.endpoints.team_index.can_create_teams', Mock(return_value=True))
+    def test_missing_params(self):
+        self.login_as(user=self.user)
+        resp = self.client.post(self.path)
+        assert resp.status_code == 400
+
+    @patch('sentry.api.endpoints.team_index.can_create_teams', Mock(return_value=True))
+    def test_valid_params(self):
+        self.login_as(user=self.user)
+
+        resp = self.client.post(self.path, data={
+            'name': 'hello world',
+            'slug': 'foobar',
+        })
+        assert resp.status_code == 201, resp.content
+        team = Team.objects.get(id=resp.data['id'])
+        assert team.name == 'hello world'
+        assert team.slug == 'foobar'
+        assert team.owner == self.user
+
+        member_set = list(team.member_set.all())
+
+        assert len(member_set) == 1
+        member = member_set[0]
+        assert member.user == team.owner
+        assert member.type == MEMBER_OWNER
+
+    @patch('sentry.api.endpoints.team_index.can_create_teams', Mock(return_value=True))
+    def test_superuser_can_set_owner(self):
+        self.login_as(user=self.user)
+
+        user2 = self.create_user(email='user2@example.com')
+
+        resp = self.client.post(self.path, {
+            'name': 'hello world',
+            'slug': 'foobar',
+            'owner': user2.username,
+        })
+        assert resp.status_code == 201, resp.content
+        team = Team.objects.get(id=resp.data['id'])
+        assert team.owner == user2
+
+        member_set = list(team.member_set.all())
+
+        assert len(member_set) == 1
+        member = member_set[0]
+        assert member.user == team.owner
+        assert member.type == MEMBER_OWNER
diff --git a/tests/sentry/api/endpoints/test_team_member_index.py b/tests/sentry/api/endpoints/test_team_member_index.py
new file mode 100644
index 0000000000..9130b1960b
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_team_member_index.py
@@ -0,0 +1,21 @@
+from django.core.urlresolvers import reverse
+from sentry.models import PendingTeamMember
+from sentry.testutils import APITestCase
+
+
+class TeamMemberIndexTest(APITestCase):
+    def test_simple(self):
+        user_1 = self.create_user('foo@localhost', username='foo')
+        team = self.create_team(slug='baz', owner=user_1)
+        PendingTeamMember.objects.create(email='bar@localhost', team=team)
+
+        self.login_as(user=user_1)
+
+        url = reverse('sentry-api-0-team-member-index', kwargs={
+            'team_id': team.id,
+        })
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert len(response.data) == 2
+        assert response.data[0]['email'] == 'bar@localhost'
+        assert response.data[1]['email'] == user_1.email
diff --git a/tests/sentry/api/endpoints/test_team_project_index.py b/tests/sentry/api/endpoints/test_team_project_index.py
new file mode 100644
index 0000000000..4806c2638c
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_team_project_index.py
@@ -0,0 +1,41 @@
+from django.core.urlresolvers import reverse
+from sentry.models import Project
+from sentry.testutils import APITestCase
+
+
+class TeamProjectIndexTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        team = self.create_team(slug='baz')
+        project_1 = self.create_project(team=team, slug='fiz')
+        project_2 = self.create_project(team=team, slug='buzz')
+
+        url = reverse('sentry-api-0-team-project-index', kwargs={
+            'team_id': team.id,
+        })
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert len(response.data) == 2
+        assert sorted(map(lambda x: x['id'], response.data)) == sorted([
+            str(project_1.id),
+            str(project_2.id),
+        ])
+
+
+class TeamProjectCreateTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        team = self.create_team(slug='baz')
+        url = reverse('sentry-api-0-team-project-index', kwargs={
+            'team_id': team.id,
+        })
+        resp = self.client.post(url, data={
+            'name': 'hello world',
+            'slug': 'foobar',
+        })
+        assert resp.status_code == 201, resp.content
+        project = Project.objects.get(id=resp.data['id'])
+        assert project.name == 'hello world'
+        assert project.slug == 'foobar'
+        assert project.owner == self.user
+        assert project.team == team
diff --git a/tests/sentry/api/endpoints/test_team_stats.py b/tests/sentry/api/endpoints/test_team_stats.py
new file mode 100644
index 0000000000..c4a1828558
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_team_stats.py
@@ -0,0 +1,19 @@
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class TeamStatsTest(APITestCase):
+    def test_simple(self):
+        # TODO: ensure this test checks data
+        self.login_as(user=self.user)
+
+        team = self.create_team(owner=self.user)
+        project_1 = self.create_project(team=team, name='a')  # NOQA
+        project_2 = self.create_project(team=team, name='b')  # NOQA
+
+        url = reverse('sentry-api-0-team-stats', kwargs={
+            'team_id': team.id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
new file mode 100644
index 0000000000..28a646121a
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -0,0 +1,53 @@
+from django.core.urlresolvers import reverse
+
+from sentry.models import User
+from sentry.testutils import APITestCase
+
+
+class UserDetailsTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(email='a@example.com')
+        team_1 = self.create_team(owner=user, name='a')
+        project_1 = self.create_project(team=team_1)
+        team_2 = self.create_team(owner=user, name='b')
+        project_2 = self.create_project(team=team_2)
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-user-details', kwargs={
+            'user_id': 'me',
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(user.id)
+        assert len(response.data['teams']) == 2
+        response.data['teams'].sort(key=lambda x: x['name'])
+        assert response.data['teams'][0]['id'] == str(team_1.id)
+        assert response.data['teams'][1]['id'] == str(team_2.id)
+        assert len(response.data['teams'][0]['projects']) == 1
+        assert response.data['teams'][0]['projects'][0]['id'] == str(project_1.id)
+        assert len(response.data['teams'][1]['projects']) == 1
+        assert response.data['teams'][1]['projects'][0]['id'] == str(project_2.id)
+
+
+class UserUpdateTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(email='a@example.com')
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-user-details', kwargs={
+            'user_id': 'me',
+        })
+
+        resp = self.client.put(url, data={
+            'name': 'hello world',
+            'email': 'b@example.com',
+        })
+        assert resp.status_code == 200, resp.content
+        assert resp.data['id'] == str(user.id)
+
+        user = User.objects.get(id=user.id)
+        assert user.first_name == 'hello world'
+        assert user.email == 'b@example.com'
