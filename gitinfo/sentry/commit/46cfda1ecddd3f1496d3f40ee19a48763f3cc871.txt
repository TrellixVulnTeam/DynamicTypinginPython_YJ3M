commit 46cfda1ecddd3f1496d3f40ee19a48763f3cc871
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon May 30 21:41:19 2016 +0200

    Report a per-frame failure for symbolizer errors
    
    This now lets the symbolizer report failures on a per-frame basis which
    greatly increases the debuggability.  Together with the symsynd update
    this now also recovers if the symbolizer crashes.

diff --git a/setup.py b/setup.py
index 43b995f2e9..17c4193074 100755
--- a/setup.py
+++ b/setup.py
@@ -139,7 +139,7 @@ install_requires = [
 ]
 
 dsym_requires = [
-    'symsynd>=0.6.1,<1.0.0',
+    'symsynd>=0.7.0,<1.0.0',
 ]
 
 
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 90556988e6..0e209f4fad 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -145,6 +145,13 @@ def inject_apple_device_data(data, system):
         extra['kernel_version'] = system['kernel_version']
 
 
+def record_no_symsynd(data):
+    append_error(data, {
+        'type': EventError.NATIVE_NO_SYMSYND,
+    })
+    return data
+
+
 def preprocess_apple_crash_event(data):
     crash_report = data.get('sentry.interfaces.AppleCrashReport')
     if crash_report is None:
@@ -154,6 +161,8 @@ def preprocess_apple_crash_event(data):
         id=data['project'],
     )
 
+    system = None
+    errors = []
     crash = crash_report['crash']
     crashed_thread = None
     for thread in crash['threads']:
@@ -170,7 +179,7 @@ def preprocess_apple_crash_event(data):
             sym = Symbolizer(project, crash_report['binary_images'],
                              threads=[crashed_thread])
             with sym:
-                bt = sym.symbolize_backtrace(
+                bt, errors = sym.symbolize_backtrace(
                     crashed_thread['backtrace']['contents'], system)
                 inject_apple_backtrace(data, bt, crash.get('diagnosis'),
                                        crash.get('error'), system)
@@ -180,7 +189,9 @@ def preprocess_apple_crash_event(data):
                 'type': EventError.NATIVE_INTERNAL_FAILURE,
                 'error': '%s: %s' % (e.__class__.__name__, str(e)),
             })
-            return
+
+    for error in errors:
+        append_error(data, error)
 
     if system:
         inject_apple_device_data(data, system)
@@ -193,5 +204,5 @@ class NativePlugin(Plugin2):
 
     def get_event_preprocessors(self, **kwargs):
         if not have_symsynd:
-            return []
+            return [record_no_symsynd]
         return [preprocess_apple_crash_event]
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 0b54a52ad9..4001953f5c 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -1,5 +1,5 @@
 try:
-    from symsynd.driver import Driver
+    from symsynd.driver import Driver, SymbolicationError
     from symsynd.report import ReportSymbolizer
     from symsynd.macho.arch import get_cpu_name
     from symsynd.demangle import demangle_symbol
@@ -10,7 +10,7 @@ except ImportError:
 from sentry import options
 from sentry.lang.native.dsymcache import dsymcache
 from sentry.utils.safe import trim
-from sentry.models import DSymSymbol
+from sentry.models import DSymSymbol, EventError
 from sentry.models.dsymfile import MAX_SYM
 
 
@@ -82,13 +82,19 @@ class Symbolizer(object):
             rv['uuid'] = img['uuid']
         return rv
 
-    def symbolize_frame(self, frame, system_info=None):
+    def symbolize_frame(self, frame, system_info=None,
+                        report_error=None):
+        error = None
         img = self.images.get(frame['object_addr'])
 
         # Step one: try to symbolize with cached dsym files.
-        new_frame = self.symsynd_symbolizer.symbolize_frame(frame)
-        if new_frame is not None:
-            return self._process_frame(new_frame, img)
+        try:
+            new_frame = self.symsynd_symbolizer.symbolize_frame(
+                frame, silent=False)
+            if new_frame is not None:
+                return self._process_frame(new_frame, img)
+        except SymbolicationError as e:
+            error = e
 
         # If that does not work, look up system symbols.
         if img is not None:
@@ -101,7 +107,27 @@ class Symbolizer(object):
                           object_name=img['object_name'])
                 return self._process_frame(rv, img)
 
+        if report_error is not None and error is not None:
+            report_error(error)
         return self._process_frame(frame, img)
 
     def symbolize_backtrace(self, backtrace, system_info=None):
-        return [self.symbolize_frame(frm, system_info) for frm in backtrace]
+        rv = []
+        errors = []
+        idx = -1
+
+        def report_error(e):
+            errors.append({
+                'type': EventError.NATIVE_INTERNAL_FAILURE,
+                'frame': frm,
+                'error': 'frame #%d: %s: %s' % (
+                    idx,
+                    e.__class__.__name__,
+                    str(e),
+                )
+            })
+
+        for idx, frm in enumerate(backtrace):
+            rv.append(self.symbolize_frame(
+                frm, system_info, report_error=report_error))
+        return rv, errors
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 1619d7254a..1c063db34b 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -20,6 +20,7 @@ class EventError(object):
 
     NATIVE_NO_CRASHED_THREAD = 'native_no_crashed_thread'
     NATIVE_INTERNAL_FAILURE = 'native_internal_failure'
+    NATIVE_NO_SYMSYND = 'native_no_symsynd'
 
     _messages = {
         INVALID_DATA: 'Discarded invalid value for parameter \'{name}\'',
@@ -38,6 +39,7 @@ class EventError(object):
         JS_INVALID_SOURCEMAP_LOCATION: 'Invalid location in sourcemap: ({column}, {row})',
         NATIVE_NO_CRASHED_THREAD: 'No crashed thread found in crash report',
         NATIVE_INTERNAL_FAILURE: 'Internal failure when attempting to symbolicate: {error}',
+        NATIVE_NO_SYMSYND: 'The symbolizer is not configured for this system.',
     }
 
     @classmethod
