commit 8148942a9b4eaeb9c7f42551f5c669c36f268709
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 9 11:11:33 2010 -0700

    Added email support. Refactored FakeRequest to work more like a real request. More tests.

diff --git a/README.rst b/README.rst
index e32ccc0c04..2adc5e26ac 100644
--- a/README.rst
+++ b/README.rst
@@ -104,6 +104,19 @@ Other configuration options
 
 Several options exist to configure django-sentry via your ``settings.py``:
 
+#############
+SENTRY_ADMINS
+#############
+
+On smaller sites you may wish to enable throttled emails, we recommend doing this by first
+removing the ``ADMINS`` setting in Django, and adding in ``SENTRY_ADMINS``::
+
+	ADMINS = ()
+	SENTRY_ADMINS = ('root@localhost',)
+
+This will send out a notification the first time an error is seen, and the first time an error is
+seen after it has been resolved.
+
 #######################
 SENTRY_CATCH_404_ERRORS
 #######################
diff --git a/runtests.py b/runtests.py
index bc5bf7f573..e1c1acf440 100644
--- a/runtests.py
+++ b/runtests.py
@@ -1,8 +1,10 @@
 #!/usr/bin/env python
+import logging
 import sys
-
 from os.path import dirname, abspath
 
+logging.getLogger('sentry').addHandler(logging.StreamHandler())
+
 from django.conf import settings
 
 if not settings.configured:
diff --git a/sentry/helpers.py b/sentry/helpers.py
index 9b32e7d924..95eab02f0b 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -67,4 +67,68 @@ def get_installed_apps():
     out = set()
     for app in settings.INSTALLED_APPS:
         out.add(app.split('.')[0])
-    return out
\ No newline at end of file
+    return out
+
+class _Missing(object):
+
+    def __repr__(self):
+        return 'no value'
+
+    def __reduce__(self):
+        return '_missing'
+
+_missing = _Missing()
+
+class cached_property(object):
+    # This is borrowed from werkzeug : http://bytebucket.org/mitsuhiko/werkzeug-main
+    """A decorator that converts a function into a lazy property.  The
+    function wrapped is called the first time to retrieve the result
+    and then that calculated result is used the next time you access
+    the value::
+
+        class Foo(object):
+
+            @cached_property
+            def foo(self):
+                # calculate something important here
+                return 42
+
+    The class has to have a `__dict__` in order for this property to
+    work.
+
+    .. versionchanged:: 0.6
+       the `writeable` attribute and parameter was deprecated.  If a
+       cached property is writeable or not has to be documented now.
+       For performance reasons the implementation does not honor the
+       writeable setting and will always make the property writeable.
+    """
+
+    # implementation detail: this property is implemented as non-data
+    # descriptor.  non-data descriptors are only invoked if there is
+    # no entry with the same name in the instance's __dict__.
+    # this allows us to completely get rid of the access function call
+    # overhead.  If one choses to invoke __get__ by hand the property
+    # will still work as expected because the lookup logic is replicated
+    # in __get__ for manual invocation.
+
+    def __init__(self, func, name=None, doc=None, writeable=False):
+        if writeable:
+            from warnings import warn
+            warn(DeprecationWarning('the writeable argument to the '
+                                    'cached property is a noop since 0.6 '
+                                    'because the property is writeable '
+                                    'by default for performance reasons'))
+
+        self.__name__ = name or func.__name__
+        self.__module__ = func.__module__
+        self.__doc__ = doc or func.__doc__
+        self.func = func
+
+    def __get__(self, obj, type=None):
+        if obj is None:
+            return self
+        value = obj.__dict__.get(self.__name__, _missing)
+        if value is _missing:
+            value = self.func(obj)
+            obj.__dict__[self.__name__] = value
+        return value
\ No newline at end of file
diff --git a/sentry/manager.py b/sentry/manager.py
index 5ddc4181ac..ce756923a0 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -42,6 +42,7 @@ class SentryManager(models.Manager):
 
         checksum = construct_checksum(**kwargs)
 
+        mail = False
         try:
             group, created = GroupedMessage.objects.get_or_create(
                 view=view,
@@ -56,11 +57,14 @@ class SentryManager(models.Manager):
                     last_seen=now,
                 )
                 # HACK: maintain appeared state
+                if group.status == 1:
+                    mail = True
                 group.status = 0
                 group.last_seen = now
                 group.times_seen += 1
                 signals.post_save.send(sender=GroupedMessage, instance=group, created=False)
-
+            else: 
+                mail = True
             instance = Message.objects.create(
                 view=view,
                 logger=logger_name,
@@ -72,11 +76,14 @@ class SentryManager(models.Manager):
                 **kwargs
             )
         except Exception, exc:
+            # TODO: should we mail admins when there are failures?
             try:
                 logger.exception(u'Unable to process log entry: %s' % (exc,))
             except Exception, exc:
                 warnings.warn(u'Unable to process log entry: %s' % (exc,))
         else:
+            if settings.ADMINS and mail:
+                group.mail_admins()
             return instance
 
 class GroupedMessageManager(SentryManager):
diff --git a/sentry/models.py b/sentry/models.py
index 9b70082cfb..ec88909c75 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -18,8 +18,9 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry import settings
 from sentry.client.base import SentryClient
-from sentry.helpers import construct_checksum, get_installed_apps, transform, get_db_engine
-from sentry.manager import SentryManager, GroupedMessageManager
+from sentry.helpers import cached_property, construct_checksum, get_db_engine, get_installed_apps, transform
+from sentry.manager import GroupedMessageManager, SentryManager
+from sentry.reporter import FakeRequest
 
 _reqs = ('paging', 'indexer')
 for r in _reqs:
@@ -137,6 +138,37 @@ class GroupedMessage(MessageBase):
             return 'times_seen / (pow((floor(unix_timestamp(now() - last_seen) / 3600) + 2), 1.25) + 1)'
         return 'times_seen'
 
+    def mail_admins(self, request=None, fail_silently=True):
+        from django.core.mail import send_mail
+        from django.template.loader import render_to_string
+
+        message = self.message_set.order_by('-id')[0]
+
+        obj_request = message.request
+
+        subject = 'Error (%s IP): %s' % ((obj_request.META.get('REMOTE_ADDR') in dj_settings.INTERNAL_IPS and 'internal' or 'EXTERNAL'), obj_request.path)
+        try:
+            request_repr = repr(obj_request)
+        except:
+            request_repr = "Request repr() unavailable"
+
+        if request:
+            link = request.build_absolute_url(self.get_absolute_url())
+        else:
+            link = None
+
+        body = render_to_string('sentry/emails/error.txt', {
+            'request_repr': request_repr,
+            'request': obj_request,
+            'group': self,
+            'traceback': message.traceback,
+            'link': link,
+        })
+        
+        send_mail(dj_settings.EMAIL_SUBJECT_PREFIX + subject, body,
+                  dj_settings.SERVER_EMAIL, [a[0] for a in settings.ADMINS],
+                  fail_silently=fail_silently)
+
 class Message(MessageBase):
     group           = models.ForeignKey(GroupedMessage, blank=True, null=True, related_name="message_set")
     datetime        = models.DateTimeField(default=datetime.datetime.now, db_index=True)
@@ -174,3 +206,19 @@ class Message(MessageBase):
         return self.data.get('url') or self.url
     full_url.short_description = _('url')
     full_url.admin_order_field = 'url'
+
+    @cached_property
+    def request(self):
+        fake_request = FakeRequest()
+        fake_request.META = self.data.get('META', {})
+        fake_request.GET = self.data.get('GET', {})
+        fake_request.POST = self.data.get('POST', {})
+        fake_request.FILES = self.data.get('FILES', {})
+        fake_request.COOKIES = self.data.get('COOKIES', {})
+        fake_request.url = self.url
+        if self.url:
+            fake_request.path_info = '/' + self.url.split('/', 3)[-1]
+        else:
+            fake_request.path_info = ''
+        fake_request.path = fake_request.path_info
+        return fake_request
\ No newline at end of file
diff --git a/sentry/reporter.py b/sentry/reporter.py
index 0de51527a8..40f52f7300 100644
--- a/sentry/reporter.py
+++ b/sentry/reporter.py
@@ -4,6 +4,7 @@ try:
 except ImportError:
     import pickle
 import logging
+from pprint import pformat
 
 from django.conf import settings
 from django.template import (Template, Context, TemplateDoesNotExist,
@@ -87,6 +88,34 @@ class ImprovedExceptionReporter(ExceptionReporter):
         return t.render(c)
 
 class FakeRequest(object):
+    GET = {}
+    POST = {}
+    META = {}
+    COOKIES = {}
+    FILES = {}
+    
+    def __repr__(self):
+        # Since this is called as part of error handling, we need to be very
+        # robust against potentially malformed input.
+        try:
+            get = pformat(self.GET)
+        except:
+            get = '<could not parse>'
+        try:
+            post = pformat(self.POST)
+        except:
+            post = '<could not parse>'
+        try:
+            cookies = pformat(self.COOKIES)
+        except:
+            cookies = '<could not parse>'
+        try:
+            meta = pformat(self.META)
+        except:
+            meta = '<could not parse>'
+        return '<Request\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' % \
+            (get, post, cookies, meta)
+
     def build_absolute_uri(self): return self.url
 
 TECHNICAL_500_TEMPLATE = """
diff --git a/sentry/settings.py b/sentry/settings.py
index 9a9025b213..5ef1492ad8 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -38,3 +38,4 @@ REMOTE_URL = getattr(settings, 'SENTRY_REMOTE_URL', None)
 
 REMOTE_TIMEOUT = getattr(settings, 'SENTRY_REMOTE_TIMEOUT', 5)
 
+ADMINS = getattr(settings, 'SENTRY_ADMINS', [])
\ No newline at end of file
diff --git a/sentry/templates/sentry/emails/error.txt b/sentry/templates/sentry/emails/error.txt
new file mode 100644
index 0000000000..1ff7960950
--- /dev/null
+++ b/sentry/templates/sentry/emails/error.txt
@@ -0,0 +1,5 @@
+{% autoescape off %}{% if link %}
+View in detail: {{ link }}
+{% endif %}{% if traceback %}{{ traceback }}
+
+{% endif %}{% if request_repr %}{{ request_repr }}{% endif %}{% endautoescape %}
\ No newline at end of file
diff --git a/sentry/tests/fixtures/mail.json b/sentry/tests/fixtures/mail.json
new file mode 100644
index 0000000000..12fcfa5d6c
--- /dev/null
+++ b/sentry/tests/fixtures/mail.json
@@ -0,0 +1,37 @@
+[
+  {
+    "fields": {
+      "status": 0, 
+      "first_seen": "2010-08-31 17:50:47", 
+      "level": 40, 
+      "class_name": "KeyError", 
+      "checksum": "ed77d1185670a58e7242fde014d980e9", 
+      "times_seen": 1, 
+      "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/disqus/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/Development/django-sentry/sentry/views.py\", line 124, in group\n    reporter = ImprovedExceptionReporter(fake_request, exc_type, exc_value, frames, obj.data['__sentry__']['template'])\n\nKeyError: 'template'\n", 
+      "logger": "sentry", 
+      "last_seen": "2010-08-31 17:50:47", 
+      "message": "'template'", 
+      "view": "sentry.views.group"
+    }, 
+    "model": "sentry.groupedmessage", 
+    "pk": 2
+  }, 
+  {
+    "fields": {
+      "group": 2, 
+      "server_name": "dcramer.local", 
+      "level": 40, 
+      "class_name": "KeyError", 
+      "checksum": "ed77d1185670a58e7242fde014d980e9", 
+      "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/disqus/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/Development/django-sentry/sentry/views.py\", line 124, in group\n    reporter = ImprovedExceptionReporter(fake_request, exc_type, exc_value, frames, obj.data['__sentry__']['template'])\n\nKeyError: 'template'\n", 
+      "datetime": "2010-08-31 17:50:47", 
+      "url": "http://dcramer.local:8002/group/1", 
+      "logger": "root", 
+      "data": "eJztXW1z27ay/q5fwds7HcutTBF8pxNnRrVlWye25Uqy0zTp5dASJfOYIhWSip12+t/vPiApvki2k9Nk2ntHmYwtLBYLYLFYAA9WcHOyYI3hzmG//7rXHe40FnKjOVkoRJon9jicz90gcSOiq0TyVTX6/e2R969fl3q/O3k4vhq+/Zfy9ub8YTw6/en24u3J1azzcP6W2LVGPNxZlbcDZ+4SVSchzmTuBfTZAMfk3/bEvVnO7IUTuD5RTeK49SZgthoxcZx0R/SZSWgWYyizjMDIZHAmyWK/3Z6MI5IfiX44dvx9U5Lk9iwKl4s2A6OCQrYdU0uiT7YNksqlaSTBfRiDoDea/oIZjWvbvll6fuIFtk1ks+GAbjWuE3e+8J3EJQVJDQdUmUGIjGZMl8E48UL0SlYa1zM3sSM3XoRBDH4V9S8il9RJunhIwKWhPllvXAu1f/8tdBYL/5Pw0XPvhbk3mfjuvRNBjNFw1rinYVRisuduchtOBC8QYtefijaE2EX+PkkxN0jBv7y9wsG6wGbkfli6cdISSL3+jTO+Kz7ZTjSLS8m7exB2qSbrkZq86aoyapAiPcKWNipZRoFQ6FJhxL2hAA0sZMkNh1T90Yli0rGiQMeKyn9qjWsaaXeBUYopTychL+fhZOm7AhmhE8xCcRxGrlhw7QjTKJwLO+2r2I3i3Mba4kcvSpaO7wYfiejFH5Zx2/du2otPpKpAFvV27CXu3oKU4cxcYuHC2xDeLoSLi0/jnVfUECM1JsWkBlKbdnI7QwesNE+VGtcVddNkZNwwVblxTZ9SLjK82E3IcjmDig6uOhZMxTPn90/DLF8Ib/7tjhPBSQTpgUmS4dwolkTNUbWsSrLMNTOgbNjgy5twGUyEzNYO42h6TWZ2vuIWF1E4duOYW58QToW8GYVAcUylxPWitXYx11FUTXqFhplZwyz00p+Sg5EqPSSht05AcqJYvI9nnvhmeNI7TSlrYo0blaG7GkulaqTHzMaJqEAwig9S0vulJEkO+aH9lz8v3ejTkTdO9oU//nzVSnMu+8PHsjK3uv9H3RXuC5kfzBiFuickBu4GV/kVd0y5n+2L/8xEnHdHHWoI3ItrXy5vhssbexiO78hZDdxgkkptJ/NF23fIn93uGc5F/9RvZ5mrhhz2z887F0f2ef+oiyLLwHuQJUkpc1yMuhcj+6x7cTI6Bc963ujtJS8Nh9gmiy+r4nA4OLZT1YFFn95MDXNsOGyiuNLYUJXpzUTWJ8yZOupELenoqDe8POu8rXdEmf7SUU7aYTQTH/alEvu/OhcnfXvYHY16FydD9OjqjFfpPjhzqIlMGZYj5hOrKHvcOTv7qXP42j56e3Zkn/V+GnQGb+3LTtrfdrhI2nw1gm8oSp10Rt03nbd2j5QwOO4c8soOT3ptJrISV29kd496o/4A2YEThEXeaW84gg4H/TPe0MiJ3clyUWrZaf+ci636rVL+aHRpdw4Pu5cjboZkD97YgVdqP8z9ViV9m8z9H0Hlw4TUiw8Hkmi1imHjBLPlzcnbtRfBrPVD+wdO0zZWaR+edgakcVTdG/b3TFOz9lhrmUz3TF7MaKXFlc3FuxeH/SMaLZSf/e4tWhN3Cn/Ziifj281FzmiUrzon6cAGe1fDlpu1usZPer3oHo56/Quw3rnuYs/xvY/uGltumeU5efC5E/KFUPUFB9wRvBCqDuCgOvt5xafkaFDt+nanxjjoHncHXW49j++QamWuht2BTVq64FWch797vu+0NVESmufO2AuSML59IVy9EHrUcl8gmtAfCr8ITLJ1W30hcM3u8t2L+8a9ee0lbU1RRFVovj4dnZ+1BN+7c4UTd3wX7gqHt7S0upAuKoYmMtkQhjSbIy8tUzQNY5eOGzVQvBod75UGjWbdqN8/6/3KB2NGMy0JQ9/7vaS3s/7JRSedD2sToX92dPnmaH2qtI/cj64fLjBG2fK9l24ei7Krif785uDGC/ar/qC9CONkRruaD76pIL9dZjjzbiIn+tQ+hsj7MLqL25d8byFOc0r7mirFNqKN/Uatgloy5ullHK2l+YdVKqXXuVfJXxhDoqoB8mPHfVLDcme13y7ye7DDn696g6593RuMrjq0HFxzlx8t3Trf8JIm3rN8Rb79U2e4wctVB6BUeMjA3EyHZBdkbZz+fFdOuO8U4wWbl0m/vXuKW6lzlxP3X1TPFzE/xS1VWYWSGr7M3Nu1ZbAk6O3otH+xYbX7YuN9auu8X1T481WXltfhaJC5/iJn0D3vj7p25+iI+ztmySLTTVHWyitqxpQ70HIGSR6ObNocnfa5cnDeLLKvLuzzTu9i3RyHh4MerS2Zc1mWRJIfvSZXWnM7qedd47rsD3iLqk48zxz0R/3DdKGHj67uEjKmYf949KYz4HVh0zp0o480qJLIhFTzUHN5MR6eds+4SO55bpz4tpx3ds3zyvUMT+3OFU32Yf/wdX1rdXoq//rBoGGPEzegcS0Vu754dBNDm59zUB9oDZzvjUM/jKqZ6PrJoMOZ0g3riDi9oKzBMp9Nmhhm67ZslLYOo/PLox5vQZuOhe1p6E9g+pdX9D+W/PFc6f78wfxl7hh+aN1Of6R/o157bzRf7JXcx+hX3hAaRtoZtQ9v6ees1B0snRtXmMxf2ZlDe36xKIq+6Q9e9y/szZu5StGijA1OsT13Apo+dMIs5diHx+kKP+r+Ut1E0YnoWNuXyvtifn5yoyik8dwXXoYLNxCmHk7KL+OE9Be92mkJdHgmwv3O6hApqxPmSq+qUlDMvo9oU8nPFy/HvhPH1RN3zA02FskSXexWxGMq8yYrUhPnBYtlAjkxP7iINuRnp7vaIW96oyhavTnzpZ942fmUxBw7fuxu4EhuI9eZEMOI5nw1P1oGdhiM3c2ll5Fvx+NbNz3hoTc1rX5MfR/lNllLkHb/xClUzU6hWnHOJyqHKHJkSeDra3GCHTNJ4yfYDD/QTJxg49CnCogK7OXlwJ25D1eDs0FGF+qnGmptLDQvwsDdx49d4X/aJFLP8C2dNa6JI5caU478GGpS5vsGuElZfI6c6ErWTJVDO7YXTEOiahwY0fXG9cvk08LFUW6Fubx2P3Vh1by4UUNbdCBjL5PIGbsYgDVzMiWDYwa6lQEuRhmWSWGvxsIAMDNZGHLaOEPhw5KhVwZAGWiaPmZAi6FzJQOhISLatGmQKAv4RxVGtH0vcMmrUqbVuLaUxsKUONJIm8sS1GgyAGCmvA41ppoRurmCWgIAOVN5BJD7b6E3FZJbN4UmI8ejg6fgBIJblKfJIXgJMZGxzm6LHJKqPiq1gIVaJG4CfBC1rAqXGDJAMBYckqg9KjHXeEtYxi4JcxJR6JPM6N4DMXJ546u1iCRRf0TiMyjrSkYVajU3AbYFsvk5cKu7S2JMDmrC0WUguknD/RUnVw6bYSuAVaOxsLgdrczLIkdA/p0+yKAnN6Apjc+ZLBbHvr0JSpB3UxXZsCxLVk1K6+kNQWHLYDLWzbSmrnzKFVr6oYZF//DDOhptmY0YE9OyGjMO0cOd4lqBujpL0Xhqd1H51Llz7awGMUPxqHLqpzhxEkecuUlzdWnSEv74cxfC5NKIVyTQJM5K0ydwlicZGXyWs4+s+kypCFo4yS13dSRup70j/JgXFeOF71GbaNciKLvv9thvkFWeI67PAXcm1c388Qr4xYvBIfd4luLpTDLTX2SEVDUxMACxR6EbX4RJ94E2gvvCCbTrTs5plSVzE+ZOMr71gpnwARipMCFeIQgTmnzELUJEhsMyRm4qdaSMKendCyP//sXytMxHM6aXkF3GjC20u4V2t9DuFtrdQrtbaHcL7W6h3S20u4V2t9DuFtrdQrtbaPcbQLuMmfnJls7LKXKK0EUcmauRhnJ+BJblFM8Eegk6j0bKdJv6bhEAXCyWj9xANJms5iK0xnWMAQARp30mSpapk2jT1A0QjZzTbFxz740TNyL2QFTSWEuFVSMbmSLXQxuZoqzHNrI05I4h5m4dm3skupEpm8C3Lw5vZMpjoNtXj29kymOhlNUAR6Y8FgiZNqsW4chU6akQR4bIvyLGkaky17WaYjOqWg1zZIjn+0fEOTJVz0xONdJIxy/FdPIIQIYQwFo4JEMwIPI0QJUWCHKOAGmVuEim/WeBkUzLAHumbQ6NZNrfFhvJtFw12io6kulfITyS6blT0ssBkkzfRkj+s2C0G1MzzbExvZEl03KZKxs6UycaOX/dUgxD38JoWxjt68BoncPTrl3S7tx52KNuHUh1xi3etsXbtnjbX8HbrC3gtgXctoDbFnDbAm5bwO1vBtxMy/o/ArjpOQimV6Ipmf5Z4ZRMz5ExvRJQyfS/ElHJjCykkhlrMZXM+CcFVTJDyVtaCatkRhpXyRCvWEMjYbz+BjiSRzN+KcpjPBuFqap8oIw8DJOZm+IwmZkGYjIzi8RkZiUUk5lFLCYzc2zHLEdjMvPxcExmPhWPycwsIJNZmyIymcVDMml1/dyYTGZ9k6BMZn31qExmffWwTGZ93bhMZn2dwExmrUVmMutbh2bKUjU2U5by4ExZKqIzZem58Mx0FslSEZ8pS6sATVOTTRA2RWjK0rcK0ZSlLEZTlqzGLL1tSKM0ZYYozexeQWZZmOYKOgf4Zifh6l6imXmmtkc5DyIwGVpj+Z4xbu6iJianGPvEnaYrQdFSnrS9yS4eS2D5tJtn/uugFtooppqNRdJQ5DRRpDylyA4p9+AP0OvzYoff0PDNsEfi7dilnUFbaC7C+2Zz6odh1ORCx0nTXYTj23QBCCh3V9gTyAMnvMgulVF0SdoVfhTk3ZbAaLeOz2x3p4Vqy3PnTxAMxHJm9wYyM9NfVqZr6jjx4HpqlkLoyJVZCfyVZXkL/m7B3y34uwV/t+DvFvzdgr9b8HcL/m7B3y34uwV/t+DvFvz9W8FfGcGSON0CfzMAYeDtxVmGt8kIi8xOw/zsTad5P5w1s7O9yGlAB+T8zOxNM8ZXggw4oPIEY15sEXlh5CWf8H3JW292C4xk9cqi65dkMC7DekbG3J14yzl/SVLiR/UNmNLjC032K40Q5YCRwvANV8BEpoakzJPP4UOazvEhxHfOysiQyXSQVU7OkKBd/m3Yxd3BCjsBi5aBOYqegzku4APFKEE5ePUw1wUUBdiOI8Pi2AlgkuTWmhyJWQuiHPthwLEm/BbDCBjQzacmqlbLT0oGyznG2Q2anJPns+qXbznLQTo8qlyrJ0OZ0moAMZFZ22OHTPOd9BsK1L7JCzSbBHJZdXQ1xTd5LzloXsHMm999Hz+Dj38HoVoZv1H19BeNBG8hGGB773jTsvcjZU1qXFOb8Owoup6/X4pXD9NoQZm/efjuZRXcoqkl7wrVb/b+he/5vkKb8rcuZDx2kUL1Ml664CQjzyOzyIF8GW9ZwI50qTHcWdxhYuisweGpeDXZFQW2rcul2a4rhW2tKf6cuy/f7afw3YAPsjtpfgdL3s0G3Z2Qb444Uh0IsDYaoL09YOmr/O/j/xLOwvBuuRAWDuYmGWws3LsRmDFc+iaE/XuhWWoLwGUnAxL5QbYFA2oJGTAKi8WrFrnrAmY5Jq+auFwIsNSMEzanl/G+777jTSh7rUNeMhYcIUAAajrv78lPc9h9Rof0IKu4JcTORwwm7g5Cno1vvmNxgVDzMd/0H+Ldk5t2epHUTh0A9126lfsuhQx+IRvSZzkvRebOy2A15wXPQGS57LzWx+apocFgGAoMjxsqLsnK355HLo+4zq7Gbl1/gRX5mHgytHS9uXRwT5ubRUjLBjUtWxlAxnxuKl9xIkJo7hpweVZCfnFrds3yPHnVDtv3eO/M1E+sHMRfcQct4Z8lB+7JzN2TmT4YbH90/CVGAW+DzNJ3BeIZ3lvBWwJExmqWvrAim6XFrLDOA6o2urNjZ+o2I3cRRuQhsF7aKxYbuGF6L2Faq30D/+6AbJWXss1Cd14uIvfV9/HLNn7vwLnk24pVgRaXbuXrHj7n69wy8EgdNr+4PhDKwy1m6y+2YrYXB0vfP+A7tV2RayXmXE3+HHdL2KGt1AxbdmEHmw/8pjVyfBfTXmZXdAJSNFxWcddxcBgug6z4bi5yJa3g2+FNV0pNV+F6NjyC8iW7Iou2JzP+sAltESmpI/nspmjKJ6qFQS+eMzEtHW4FL4zMyu+X5KNNau3Naav80Z2srnUHWV6z7D1aQv69n/QTV0lLSL+f01q9PfKu/Jb5b++KN4x+45qy+LIYD3dwoYFXpCX+dR5Fwtd5Vsdw0PFyOT+LI8G/yFMBPUFVn3xjnbPwh97LhywQ8c77Uyct8Bjps+ybz1NgwFPwxaEKFAtFHsG58Di4VOpR+lZ8/WyPDPT7qQM+eLg6Nh6MkQu14HSMz7z/KRSAJO/5Cg8AhfezBo+Aju6lj9srjHcsx1jxkDl6kp+Ckead4cdjpORaLm8tB5GQUp9W/v9PPBUd50NRAbhAxYjscOvOrJOOcXUFcbLJtThkPGERzwrlfP/u/fscPHz/27s8raTp9+/vaxy1ZJ6WkBD40/T8Fj+/jwMBs/OJSzmwyHWb5FT8qYYasgMyv9jnqD9S/C8dlKB/0PTVjK9dPSETKnrm/glsZt4knoLOykgU0VTe0ScuVcFT73v1ZhUcadd/5Z95h2sIEujqqj/ZxRKIWu0PWXyT2yVUpJe8TT6LVaOYpxlsCaqZOoQCbQURuqtArkTUpNS3AEpEEnpi3JTrGAly87+HwRPcI5TudUCDXyhf7oCmFR517YYB+XrJo2rck2VAINLwYP8BGoiiVkldHLrF32SA0+P4LRKp+y6wT9DQRQ6AIsG7WLtLB13N53sJWwcdpvDtAHbUkNpABeUF2aiZ9xrUCyZuFGWYE0Trszw5WA0p1UYp9gBUWMwqAAEEeWU9KQIIGrY9n/2laxRQc6OpXyMhU3umzZyJa+qJGAHwGNXxQqAAyFxR5UsDEGkzuOpYGXikPDrh9CRW8g2ru2lkQkGlC2qQuIrsHcooI8DIKfZIWXwAiDC3bxgkgCq0Vd9y1BNUDv0odALp0b6+J/FYtPoNNPgwS//ma2g0g8/49QAPyrIw7/MoD6TZqr8rkBhkmQZSKvlOfgmFDCWf8dlNNGgbNkGPX0ejgFY1oBzbRpaeV7wxbAIcBl9fK7ETIJv1QuX9rYXZvR6j0VioWWWlUBYQYapFPAso3FLTDquS8gUdXruPhAC17JLzCzNkYEavbs1A4LP3kegg5HNtPBYiBAaz7Lp5qBOo0Ecp3gl/5abQejbYKmP1NXU/WzJUxvVRig4CTSmWDJWpqzGuXKcgSyvimj//TgUFuTLKIVkgQgPPvm0HRnPVouyaCETyZl94V0SlZCk/BKTRBCDR+TYPKEBS5n9Q6zLTJJ0a6Fyo4opE/F8OWATN", 
+      "message": "'template'", 
+      "view": "sentry.views.group"
+    }, 
+    "model": "sentry.message", 
+    "pk": 4
+  }
+]
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 03153079da..3296ad5448 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -5,11 +5,13 @@ try:
     import cPickle as pickle
 except ImportError:
     import pickle
+import getpass
 import logging
 import sys
 import threading
 
 from django.contrib.auth.models import User
+from django.core import mail
 from django.core.handlers.wsgi import WSGIRequest, WSGIHandler
 from django.core.urlresolvers import reverse
 from django.core.signals import got_request_exception
@@ -686,6 +688,64 @@ class SentryFeedsTest(TestCase):
         self.assertTrue('<link>http://testserver/group/1</link>' in response.content, response.content)
         self.assertTrue('<title>(1) TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
 
+class SentryMailTest(TestCase):
+    fixtures = ['sentry/tests/fixtures/mail.json']
+    urls = 'sentry.tests.urls'
+    
+    def setUp(self):
+        settings.ADMINS = ((getpass.getuser(), '%s@localhost' % getpass.getuser()),)
+    
+    def test_mail_admins(self):
+        group = GroupedMessage.objects.get()
+        self.assertEquals(len(mail.outbox), 0)
+        group.mail_admins(fail_silently=False)
+        self.assertEquals(len(mail.outbox), 1)
+
+        out = mail.outbox[0]
+
+        self.assertTrue('Traceback (most recent call last):' in out.body)
+        self.assertTrue("COOKIES:{'commenter_name': 'admin'," in out.body)
+        self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /group/1')
+
+    def test_mail_on_creation(self):
+        settings.MAIL = True
+        
+        self.assertEquals(len(mail.outbox), 0)
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        self.assertEquals(len(mail.outbox), 1)
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        self.assertEquals(len(mail.outbox), 1)
+
+        out = mail.outbox[0]
+
+        self.assertTrue('Traceback (most recent call last):' in out.body)
+        self.assertTrue("<Request" in out.body)
+        self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /trigger-500')
+
+    def test_mail_on_duplication(self):
+        settings.MAIL = True
+        
+        self.assertEquals(len(mail.outbox), 0)
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        self.assertEquals(len(mail.outbox), 1)
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        self.assertEquals(len(mail.outbox), 1)
+        # XXX: why wont this work
+        # group = GroupedMessage.objects.update(status=1)
+        group = GroupedMessage.objects.all().order_by('-id')[0]
+        group.status = 1
+        group.save()
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        self.assertEquals(len(mail.outbox), 2)
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        self.assertEquals(len(mail.outbox), 2)
+
+        out = mail.outbox[1]
+
+        self.assertTrue('Traceback (most recent call last):' in out.body)
+        self.assertTrue("<Request" in out.body)
+        self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /trigger-500')
+
 class SentryHelpersTest(TestCase):
     def test_get_db_engine(self):
         from django.conf import settings
diff --git a/sentry/views.py b/sentry/views.py
index 1d6b276164..decbd248d0 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -28,7 +28,7 @@ from sentry import settings
 from sentry.helpers import get_db_engine
 from sentry.models import GroupedMessage, Message
 from sentry.templatetags.sentry_helpers import with_priority
-from sentry.reporter import ImprovedExceptionReporter, FakeRequest
+from sentry.reporter import ImprovedExceptionReporter
 
 from indexer.models import Index
 
@@ -169,7 +169,7 @@ def group(request, group_id):
 
     message_list = group.message_set.all()
     
-    obj = message_list[0]
+    obj = message_list.order_by('-id')[0]
     if '__sentry__' in obj.data:
         module, args, frames = obj.data['__sentry__']['exc']
         obj.class_name = str(obj.class_name)
@@ -179,19 +179,7 @@ def group(request, group_id):
 
         exc_value.args = args
     
-        fake_request = FakeRequest()
-        fake_request.META = obj.data.get('META', {})
-        fake_request.GET = obj.data.get('GET', {})
-        fake_request.POST = obj.data.get('POST', {})
-        fake_request.FILES = obj.data.get('FILES', {})
-        fake_request.COOKIES = obj.data.get('COOKIES', {})
-        fake_request.url = obj.url
-        if obj.url:
-            fake_request.path_info = '/' + obj.url.split('/', 3)[-1]
-        else:
-            fake_request.path_info = ''
-
-        reporter = ImprovedExceptionReporter(fake_request, exc_type, exc_value, frames, obj.data['__sentry__'].get('template'))
+        reporter = ImprovedExceptionReporter(obj.request, exc_type, exc_value, frames, obj.data['__sentry__'].get('template'))
         traceback = mark_safe(reporter.get_traceback_html())
     elif group.traceback:
         traceback = mark_safe('<pre>%s</pre>' % (group.traceback,))
