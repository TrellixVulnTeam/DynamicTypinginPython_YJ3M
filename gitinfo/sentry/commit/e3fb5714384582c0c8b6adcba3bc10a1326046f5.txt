commit e3fb5714384582c0c8b6adcba3bc10a1326046f5
Author: Danny Lee <dlee@sentry.io>
Date:   Tue May 26 10:21:28 2020 -0700

    ref(release): Refactor on Releases (#18958)

diff --git a/src/sentry/static/sentry/app/actionCreators/releases.tsx b/src/sentry/static/sentry/app/actionCreators/releases.tsx
deleted file mode 100644
index 6ab3c1d72d..0000000000
--- a/src/sentry/static/sentry/app/actionCreators/releases.tsx
+++ /dev/null
@@ -1,53 +0,0 @@
-import ReleaseActions from 'app/actions/releaseActions';
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
-import {Client} from 'app/api';
-
-/**
- * Fetch a subset of releases for an organization or project. To fetch releases
- * from multiple projects, leave `projectId` as undefined.
- *
- * TODO(leedongwei): Replace `any` types.
- */
-export function fetchReleases(
-  api: Client,
-  orgId: string,
-  project?: string,
-  releaseVersion?: string,
-  pageSize?: number
-): Promise<any> {
-  const url = `/organizations/${orgId}/releases/`;
-  const query: {
-    [key: string]: string | number;
-  } = {};
-
-  if (project) {
-    query.project = project;
-  }
-
-  if (releaseVersion) {
-    query.query = releaseVersion;
-  }
-
-  if (pageSize) {
-    query.per_page = pageSize;
-  }
-
-  ReleaseActions.fetchReleases();
-
-  const promise = api
-    .requestPromise(url, {
-      method: 'GET',
-      query,
-    })
-    .then(resp => {
-      ReleaseActions.fetchReleasesSuccess(resp);
-      return resp;
-    })
-    .catch(err => {
-      ReleaseActions.fetchReleasesError(err);
-      addErrorMessage(t('Unable to fetch releases'));
-    });
-
-  return promise;
-}
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
index ea66601947..679c1551ae 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
@@ -8,10 +8,10 @@ import createReactClass from 'create-react-class';
 import debounce from 'lodash/debounce';
 import styled from '@emotion/styled';
 
+import {addErrorMessage} from 'app/actionCreators/indicator';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {callIfFunction} from 'app/utils/callIfFunction';
 import {defined} from 'app/utils';
-import {fetchReleases} from 'app/actionCreators/releases';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
@@ -699,21 +699,32 @@ class SmartSearchBar extends React.Component<Props, State> {
    * Fetches latest releases from a organization/project. Returns an empty array
    * if an error is encountered.
    */
-  fetchReleases = async (query: string): Promise<any[]> => {
+  fetchReleases = async (releaseVersion: string): Promise<any[]> => {
     const {api, organization} = this.props;
     const {location} = this.context.router;
 
     const project = location && location.query ? location.query.projectId : undefined;
 
+    const url = `/organizations/${organization.slug}/releases/`;
+    const fetchQuery: {[key: string]: string | number} = {
+      per_page: MAX_AUTOCOMPLETE_RELEASES,
+    };
+
+    if (releaseVersion) {
+      fetchQuery.query = releaseVersion;
+    }
+
+    if (project) {
+      fetchQuery.project = project;
+    }
+
     try {
-      return await fetchReleases(
-        api,
-        organization.slug,
-        project,
-        query,
-        MAX_AUTOCOMPLETE_RELEASES
-      );
+      return await api.requestPromise(url, {
+        method: 'GET',
+        query: fetchQuery,
+      });
     } catch (e) {
+      addErrorMessage(t('Unable to fetch releases'));
       Sentry.captureException(e);
     }
 
