commit 827be2ab3f89cf39d0a44b9dd656d49e2283515a
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Dec 13 20:56:58 2015 -0800

    Add system.rate-limit to configurable options

diff --git a/docs/throttling.rst b/docs/throttling.rst
index bf44bc7597..30e7bc742d 100644
--- a/docs/throttling.rst
+++ b/docs/throttling.rst
@@ -50,12 +50,11 @@ configuration might look like this:
     }
 
 
-You can also configure system-wide maximums, and a default value for all projects:
+You can also configure the system-wide maximum per-minute rate limit:
 
 .. code-block:: python
 
-   SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE = '90%'
-   SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 500
+   system.rate-limit = 500
 
 If you have additional needs, you're freely available to extend the base
 Quota class just as the Redis implementation does.
diff --git a/src/sentry/api/endpoints/system_options.py b/src/sentry/api/endpoints/system_options.py
index c6aa1d25f0..01329d8db3 100644
--- a/src/sentry/api/endpoints/system_options.py
+++ b/src/sentry/api/endpoints/system_options.py
@@ -14,11 +14,19 @@ class SystemOptionsEndpoint(Endpoint):
     permission_classes = (SuperuserPermission,)
 
     def get(self, request):
+        query = request.GET.get('query')
+        if query == 'is:required':
+            option_list = options.filter(flag=options.FLAG_REQUIRED)
+        elif query:
+            raise ValueError('{} is not a supported search query'.format(query))
+        else:
+            option_list = options.all()
+
         results = {}
-        # TODO(dcramer): this not not be returning only required options
-        for k in options.filter(flag=options.FLAG_REQUIRED):
+        for k in option_list:
             # TODO(mattrobenolt): Expose this as a property on Key.
             diskPriority = bool(k.flags & options.FLAG_PRIORITIZE_DISK and settings.SENTRY_OPTIONS.get(k.name))
+
             # TODO(mattrobenolt): help, placeholder, title, type
             results[k.name] = {
                 'value': options.get(k.name),
@@ -36,8 +44,13 @@ class SystemOptionsEndpoint(Endpoint):
     def put(self, request):
         # TODO(dcramer): this should validate options before saving them
         for k, v in request.DATA.iteritems():
+            if v:
+                v = v.strip()
             try:
-                options.set(k, v)
+                if not v:
+                    options.delete(k)
+                else:
+                    options.set(k, v)
             except options.UnknownOption:
                 # TODO(dcramer): unify API errors
                 return Response({
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 7536086bc1..b59957464e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -740,9 +740,6 @@ SENTRY_RATELIMITER_OPTIONS = {}
 # The default value for project-level quotas
 SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE = '90%'
 
-# The maximum number of events per minute the system should accept.
-SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 0
-
 # Node storage backend
 SENTRY_NODESTORE = 'sentry.nodestore.django.DjangoNodeStorage'
 SENTRY_NODESTORE_OPTIONS = {}
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index b19d42c9aa..434ab2a11f 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -16,6 +16,7 @@ register('cache.options', default={}, flags=FLAG_NOSTORE)
 register('system.admin-email', flags=FLAG_REQUIRED)
 register('system.databases', default={}, flags=FLAG_NOSTORE)
 register('system.debug', default=False, flags=FLAG_NOSTORE)
+register('system.rate-limit', default=0, type=int)
 register('system.secret-key', flags=FLAG_NOSTORE)
 register('redis.options', default={}, flags=FLAG_NOSTORE)
 
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index c2fb826e8d..5e93698b3b 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -63,7 +63,7 @@ class OptionsManager(object):
         self.store = store
         self.registry = {}
 
-    def set(self, key, value):
+    def set(self, key, value, coerce=True):
         """
         Set the value for an option. If the cache is unavailable the action will
         still suceeed.
@@ -80,8 +80,16 @@ class OptionsManager(object):
         # Enforce immutability if value is already set on disk
         assert not (opt.flags & FLAG_PRIORITIZE_DISK and settings.SENTRY_OPTIONS.get(key)), '%r cannot be changed at runtime because it is configured on disk' % key
 
-        if not isinstance(value, opt.type):
-            raise TypeError('got %r, expected %r' % (_type(value), opt.type))
+        if not self._value_is_of_type(opt.type, value):
+            if not coerce:
+                raise TypeError('got %r, expected %r' % (_type(value), opt.type))
+            else:
+                # TODO(dcramer): implement more explicit coercion error
+                # with custom types
+                try:
+                    value = opt.type(value)
+                except (ValueError, TypeError):
+                    raise TypeError('Unable to coerce %r to %r' % (_type(value), opt.type))
 
         return self.store.set(opt, value)
 
@@ -164,13 +172,24 @@ class OptionsManager(object):
 
         return self.store.delete(opt)
 
-    def register(self, key, default='', type=None, flags=DEFAULT_FLAGS,
+    def _value_is_of_type(self, type, value):
+        # TODO(dcramer): replace with basic types
+        if type in (unicode, str):
+            type = basestring
+        return isinstance(value, type)
+
+    def register(self, key, default=None, type=None, flags=DEFAULT_FLAGS,
                  ttl=DEFAULT_KEY_TTL, grace=DEFAULT_KEY_GRACE):
         assert key not in self.registry, 'Option already registered: %r' % key
         # Guess type based on the default value
         if type is None:
-            if isinstance(default, basestring):
-                type = basestring
+            # the default value would be equivilent to '' if no type / default
+            # is specified and we assume unicode for safety
+            if default is None:
+                type = unicode
+                default = u''
+            elif isinstance(default, basestring):
+                type = unicode
             else:
                 type = _type(default)
         # We disallow None as a value for options since this is ambiguous and doesn't
@@ -178,8 +197,10 @@ class OptionsManager(object):
         # value instead that matches the type expected, rather than relying on None.
         if type is NoneType:
             raise TypeError('Options must not be NoneType')
-        if not isinstance(default, type):
+        if default is not None and not self._value_is_of_type(type, default):
             raise TypeError('got %r, expected %r' % (_type(default), type))
+        if default is None:
+            default = type()
         self.registry[key] = self.store.make_key(key, default, type, flags, ttl, grace)
 
     def unregister(self, key):
@@ -196,7 +217,7 @@ class OptionsManager(object):
     def validate_option(self, key, value):
         opt = self.lookup_key(key)
         assert not (opt.flags & FLAG_STOREONLY), '%r is not allowed to be loaded from config' % key
-        if not isinstance(value, opt.type):
+        if not self._value_is_of_type(opt.type, value):
             raise TypeError('%r: got %r, expected %r' % (key, _type(value), opt.type))
 
     def all(self):
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 5065dbd390..6c9658b8ed 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -11,6 +11,8 @@ from collections import namedtuple
 from functools import partial
 from django.conf import settings
 
+from sentry import options
+
 RateLimit = namedtuple('RateLimit', ('is_limited', 'retry_after'))
 NotRateLimited = RateLimit(False, None)
 RateLimited = partial(RateLimit, is_limited=True)
@@ -96,5 +98,5 @@ class Quota(object):
     def get_organization_quota(self, organization):
         return self.translate_quota(
             settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE,
-            settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE,
+            options.get('system.rate-limit'),
         )
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 497d4151ac..dbafc20431 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -212,6 +212,12 @@ def apply_legacy_settings(settings):
                       "Use SENTRY_OPTIONS instead, key 'system.url-prefix'", DeprecationWarning)
         settings.SENTRY_OPTIONS['system.url-prefix'] = settings.SENTRY_URL_PREFIX
 
+    if not settings.SENTRY_OPTIONS.get('system.rate-limit') and hasattr(settings, 'SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE'):
+        import warnings
+        warnings.warn('SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE is deprecated.'
+                      "Use SENTRY_OPTIONS instead, key 'system.rate-limit'", DeprecationWarning)
+        settings.SENTRY_OPTIONS['system.rate-limit'] = settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE
+
     if not hasattr(settings, 'SENTRY_URL_PREFIX'):
         from sentry import options
         url_prefix = options.get('system.url-prefix', silent=True)
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
new file mode 100644
index 0000000000..37a046b51f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -0,0 +1,32 @@
+import React from 'react';
+
+import {t} from '../../locale';
+
+const Form = React.createClass({
+  getDefaultProps() {
+    return {
+      submitLabel: t('Save Changes'),
+      submitDisabled: false,
+    };
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+    this.props.onSubmit();
+  },
+
+  render() {
+    return (
+      <form onSubmit={this.onSubmit}>
+        {this.props.children}
+        <div className="form-actions" style={{marginTop: 25}}>
+          <button className="btn btn-primary"
+                  disabled={this.props.submitDisabled}
+                  type="submit">{this.props.submitLabel}</button>
+        </div>
+      </form>
+    );
+  }
+});
+
+export default Form;
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 300960d7c6..e8ccb9b187 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -1,2 +1,3 @@
+export {default as Form} from './form';
 export {default as EmailField} from './emailField';
 export {default as TextField} from './textField';
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 5e343567ea..ee497528d7 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -6,7 +6,10 @@ import FormField from './formField';
 export default class InputField extends FormField {
   constructor(props) {
     super(props);
-    this.state.value = props.value || props.defaultValue || '';
+
+    this.state.value = (
+      props.value !== '' ? props.value : (props.defaultValue || '')
+    );
   }
 
   // XXX(dcramer): this comes from TooltipMixin
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index 0bced6fafe..4d31465fdd 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -8,7 +8,7 @@ const definitions = {
     label: t('Root URL'),
     placeholder: 'https://sentry.example.com',
     help: t('The root web address which is used to communicate with the Sentry backend.'),
-    defaultValue: () => `${document.location.protocol}//${document.location.host}`
+    defaultValue: () => `${document.location.protocol}//${document.location.host}`,
   },
   'system.admin-email': {
     label: t('Admin Email'),
@@ -16,8 +16,13 @@ const definitions = {
     help: t('The technical contact for this Sentry installation.'),
     // TODO(dcramer): this shoudl not be hardcoded to a component
     component: EmailField,
-    defaultValue: () => ConfigStore.get('user').email
-  }
+    defaultValue: () => ConfigStore.get('user').email,
+  },
+  'system.rate-limit': {
+    label: t('Rate Limit'),
+    placeholder: 'e.g. 500',
+    help: t('The maximum number of events the system should accept per minute. A value of 0 will disable the default rate limit.'),
+  },
 };
 
 const disabledReasons = {
@@ -35,7 +40,7 @@ export function getOptionField(option, onChange, value, field) {
     <Field
         key={option}
         label={meta.label}
-        defaultValue={meta.defaultValue()}
+        defaultValue={meta.defaultValue ? meta.defaultValue() : undefined}
         placeholder={meta.placeholder}
         help={meta.help}
         onChange={onChange}
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index a82f6b2068..fff3049390 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -7,62 +7,63 @@ import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
 import {t} from '../locale';
 import {getOption, getOptionField} from '../options';
+import {Form} from '../components/forms';
+
+const optionsAvailable = [
+  'system.url-prefix',
+  'system.admin-email',
+  'system.rate-limit',
+];
 
-// TODO(dcramer): a lot of this is copied from InstallWizard
 const SettingsList = React.createClass({
   getInitialState() {
-    let options = {...this.props.options};
-    let requiredOptions = Object.keys(_.pick(options, (option) => {
-      return option.field.required && !option.field.disabled;
-    }));
+    let options = this.props.options;
+    let formData = {};
+    let required = [];
     let fields = [];
-    for (let key of Object.keys(options)) {
-      let option = options[key];
-      if (!option.value) {
-        option.value = getOption(key).defaultValue();
+    for (let key of optionsAvailable) {
+      // TODO(dcramer): we should not be mutating options
+      let option = options[key] || {field: {}};
+      if (typeof option.value === 'undefined' || option.value === '') {
+        let defn = getOption(key);
+        formData[key] = defn.defaultValue ? defn.defaultValue() : '';
+      } else {
+        formData[key] = option.value;
       }
-      fields.push(getOptionField(key, this.onFieldChange.bind(this, key), option.value, option.field));
-      // options is used for submitting to the server, and we dont submit values
-      // that are deleted
-      if (option.field.disabled) {
-        delete options[key];
+      if (option.field.required) {
+        required.push(key);
       }
+      fields.push(getOptionField(key, this.onFieldChange.bind(this, key), formData[key], option.field));
     }
 
     return {
-      options: options,
-      required: requiredOptions,
+      required: required,
+      formData: formData,
       fields: fields,
     };
   },
 
   onFieldChange(name, value) {
-    let options = {...this.state.options};
-    options[name].value = value;
+    let formData = this.state.formData;
+    formData[name] = value;
     this.setState({
-      options: options
+      formData: formData
     });
   },
 
   onSubmit(e) {
-    e.preventDefault();
-    this.props.onSubmit(this.state.options);
+    this.props.onSubmit(this.state.formData);
   },
 
   render() {
-    let {fields, required, options} = this.state;
-    let formValid = !required.filter(option => !options[option].value).length;
-    let disabled = !formValid || this.props.formDisabled;
+    let {fields, required, formData} = this.state;
+    let formValid = !required.filter(option => !formData[option]).length;
+    let submitDisabled = !formValid || this.props.formDisabled;
 
     return (
-      <form onSubmit={this.onSubmit}>
+      <Form onSubmit={this.onSubmit} submitDisabled={submitDisabled}>
         {fields}
-        <div className="form-actions" style={{marginTop: 25}}>
-          <button className="btn btn-primary"
-                  disabled={disabled}
-                  type="submit">{t('Save Changes')}</button>
-        </div>
-      </form>
+      </Form>
     );
   }
 });
@@ -109,17 +110,20 @@ const AdminSettings = React.createClass({
     });
   },
 
-  onSubmit(options) {
+  onSubmit(formData) {
     this.setState({
       submitInProgress: true,
       submitError: false,
     });
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-    let data = _.mapObject(options, option => option.value);
+    // We only want to send back the values which weren't disabled
+    formData = _.pick(formData, (value, key) => {
+      return !this.state.options[key].field.disabled;
+    });
     this.api.request('/internal/options/', {
       method: 'PUT',
-      data: data,
+      data: formData,
       success: () => {
         this.setState({
           submitInProgress: false,
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index 5a866b98e7..1c62af25a2 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -112,7 +112,9 @@ const InstallWizard = React.createClass({
   },
 
   fetchData(callback) {
-    this.api.request('/internal/options/', {
+    // TODO(dcramer): ideally this would only be fetching options that aren't
+    // already configured
+    this.api.request('/internal/options/?query=is:required', {
       method: 'GET',
       success: (data) => {
         this.setState({
diff --git a/tests/sentry/quotas/test_base.py b/tests/sentry/quotas/test_base.py
index d0fd3abdfa..6e6370b393 100644
--- a/tests/sentry/quotas/test_base.py
+++ b/tests/sentry/quotas/test_base.py
@@ -16,48 +16,48 @@ class QuotaTest(TestCase):
         project = self.create_project(organization=org)
 
         with self.settings(SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE=0):
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+            with self.options({'system.rate-limit': 0}):
                 assert self.backend.get_project_quota(project) == 0
 
             ProjectOption.objects.set_value(
                 project, 'quotas:per_minute', '80%'
             )
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=100):
+            with self.options({'system.rate-limit': 100}):
                 assert self.backend.get_project_quota(project) == 80
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+            with self.options({'system.rate-limit': 0}):
                 assert self.backend.get_project_quota(project) == 0
 
             ProjectOption.objects.set_value(
                 project, 'quotas:per_minute', '50'
             )
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=100):
+            with self.options({'system.rate-limit': 100}):
                 assert self.backend.get_project_quota(project) == 50
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+            with self.options({'system.rate-limit': 0}):
                 assert self.backend.get_project_quota(project) == 50
 
             OrganizationOption.objects.set_value(
                 org, 'sentry:project-rate-limit', 80,
             )
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=100):
+            with self.options({'system.rate-limit': 100}):
                 assert self.backend.get_project_quota(project) == 50
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=50):
+            with self.options({'system.rate-limit': 50}):
                 assert self.backend.get_project_quota(project) == 40
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+            with self.options({'system.rate-limit': 0}):
                 assert self.backend.get_project_quota(project) == 50
 
             ProjectOption.objects.set_value(
                 project, 'quotas:per_minute', ''
             )
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=100):
+            with self.options({'system.rate-limit': 100}):
                 assert self.backend.get_project_quota(project) == 80
 
-            with self.settings(SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE=0):
+            with self.options({'system.rate-limit': 0}):
                 assert self.backend.get_project_quota(project) == 0
