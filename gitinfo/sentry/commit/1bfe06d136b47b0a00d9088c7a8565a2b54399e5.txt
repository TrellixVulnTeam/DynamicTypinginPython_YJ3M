commit 1bfe06d136b47b0a00d9088c7a8565a2b54399e5
Author: evanh <evanh@users.noreply.github.com>
Date:   Wed Feb 5 15:47:08 2020 -0500

    fix(discover2) Fix next and prev Link headers (#16795)
    
    The base API only appends one of the query params for each query key. Add a new
    version that adds all the values to ensure that all the fields get passed in.

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index d09144f38a..1c3b5d5834 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -4,10 +4,12 @@ import logging
 import six
 import uuid
 from functools import partial
+from django.utils.http import urlquote
 from rest_framework.response import Response
 from rest_framework.exceptions import ParseError
 
 from sentry_relay.consts import SPAN_STATUS_CODE_TO_NAME
+from sentry.api.base import LINK_HEADER
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
 from sentry.api.event_search import get_json_meta_type
 from sentry.api.helpers.events import get_direct_hit_response
@@ -16,6 +18,7 @@ from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerial
 from sentry import eventstore, features
 from sentry.snuba import discover
 from sentry.utils import snuba
+from sentry.utils.http import absolute_uri
 from sentry.models.project import Project
 
 logger = logging.getLogger(__name__)
@@ -91,6 +94,29 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
 
 
 class OrganizationEventsV2Endpoint(OrganizationEventsEndpointBase):
+    def build_cursor_link(self, request, name, cursor):
+        # The base API function only uses the last query parameter, but this endpoint
+        # needs all the parameters, particularly for the "field" query param.
+        querystring = u"&".join(
+            u"{0}={1}".format(urlquote(query[0]), urlquote(value))
+            for query in request.GET.lists()
+            if query[0] != "cursor"
+            for value in query[1]
+        )
+
+        base_url = absolute_uri(urlquote(request.path))
+        if querystring:
+            base_url = u"{0}?{1}".format(base_url, querystring)
+        else:
+            base_url = base_url + "?"
+
+        return LINK_HEADER.format(
+            uri=base_url,
+            cursor=six.text_type(cursor),
+            name=name,
+            has_results="true" if bool(cursor) else "false",
+        )
+
     def get(self, request, organization):
         if not features.has("organizations:discover-basic", organization, actor=request.user):
             return Response(status=404)
diff --git a/tests/sentry/discover/test_utils.py b/tests/sentry/discover/test_utils.py
index de4b81bc49..9dacca6254 100644
--- a/tests/sentry/discover/test_utils.py
+++ b/tests/sentry/discover/test_utils.py
@@ -61,8 +61,8 @@ class TransformAliasesAndQueryTest(SnubaTestCase, TestCase):
         result = transform_aliases_and_query(
             aggregations=[["count", "", "count"]],
             filter_keys={"project_id": [self.project.id]},
-            start=before_now(minutes=5),
-            end=before_now(),
+            start=before_now(minutes=10),
+            end=before_now(minutes=-1),
             groupby=["time"],
             orderby=["time"],
             rollup=3600,
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index cc2c77b190..81b2e70522 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -4,6 +4,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers import parse_link_header
 from sentry.testutils.helpers.datetime import before_now, iso_format
 
 from sentry.utils.samples import load_data
@@ -803,6 +804,47 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         assert response.status_code == 200, response.content
         assert len(response.data["data"]) == 0
 
+    def test_next_prev_link_headers(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        events = [("a", "group_1"), ("b", "group_2"), ("c", "group_2"), ("d", "group_2")]
+        for e in events:
+            self.store_event(
+                data={
+                    "event_id": e[0] * 32,
+                    "timestamp": self.min_ago,
+                    "fingerprint": [e[1]],
+                    "user": {"email": "foo@example.com"},
+                    "tags": {"language": "C++"},
+                },
+                project_id=project.id,
+            )
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["count(id)", "issue.id", "context.key"],
+                    "sort": "-count_id",
+                    "query": "language:C++",
+                },
+            )
+
+        assert response.status_code == 200, response.content
+        links = parse_link_header(response["Link"])
+        for link in links:
+            assert "field=issue.id" in link
+            assert "field=count%28id%29" in link
+            assert "field=context.key" in link
+            assert "sort=-count_id" in link
+            assert "query=language%3AC%2B%2B" in link
+
+        assert len(response.data["data"]) == 2
+        data = response.data["data"]
+        assert data[0]["count_id"] == 3
+        assert data[1]["count_id"] == 1
+
     def test_reference_event(self):
         self.login_as(user=self.user)
 
