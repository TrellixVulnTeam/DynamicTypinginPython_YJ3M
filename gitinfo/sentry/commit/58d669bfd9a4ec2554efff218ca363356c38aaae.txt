commit 58d669bfd9a4ec2554efff218ca363356c38aaae
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 4 10:53:38 2011 -0700

    More coverage for the cleanup command, and adding the level argument

diff --git a/CHANGES b/CHANGES
index c9d2309e3e..6340c2c919 100644
--- a/CHANGES
+++ b/CHANGES
@@ -3,12 +3,13 @@
 * You can now pass ``extra={'stack': True}`` to logging methods to capture
   the current frames and their locals.
 * Code refactoring in various places related to stack extraction.
-* Denormalized graph data in MessageCountByDate.
+* Denormalized graph data in MessageCountByMinute.
 * Denormalized filter counts into MessageFilterValue
 * Added message sampling (adapted from Yuri Baburov's patch).
 * Added SENTRY_MAIL_LEVEL setting.
 * Added SENTRY_MAIL_INCLUDE_LOGGERS setting.
 * Added SENTRY_MAIL_EXCLUDE_LOGGERS setting.
+* Added the ``level`` argument to the cleanup command.
 
 1.9.0
 
diff --git a/sentry/scripts/runner.py b/sentry/scripts/runner.py
index 6eadf7b4ac..01cc5d7975 100644
--- a/sentry/scripts/runner.py
+++ b/sentry/scripts/runner.py
@@ -2,6 +2,7 @@
 import eventlet
 import errno
 import imp
+import logging
 import os
 import os.path
 import sys
@@ -98,36 +99,90 @@ class SentryServer(DaemonRunner):
             inner_run()
 
 
-def cleanup(days=30, logger=None, site=None, server=None):
-    from sentry.models import GroupedMessage, Message
+def cleanup(days=30, logger=None, site=None, server=None, level=None):
+    """
+    Deletes a portion of the trailing data in Sentry based on
+    their creation dates. For example, if ``days`` is 30, this
+    would attempt to clean up all data thats older than 30 days.
+    
+    :param logger: limit all deletion scopes to messages from the
+                   specified logger.
+    :param site: limit the message deletion scope to the specified
+                 site.
+    :param server: limit the message deletion scope to the specified
+                   server.
+    :param level: limit all deleteion scopes to messages that are greater
+                  than or equal to level.
+    """
+    # TODO: we should collect which messages above were deleted
+    # and potentially just send out post_delete signals where
+    # GroupedMessage can update itself accordingly
+
+    from sentry.models import GroupedMessage, Message, MessageCountByMinute, \
+                              MessageFilterValue, FilterValue
     from sentry.utils.query import RangeQuerySetWrapper, SkinnyQuerySet
     import datetime
     
     ts = datetime.datetime.now() - datetime.timedelta(days=days)
-    
+
+    # Message
     qs = SkinnyQuerySet(Message).filter(datetime__lte=ts)
     if logger:
-        qs.filter(logger=logger)
+        qs = qs.filter(logger=logger)
     if site:
-        qs.filter(site=site)
+        qs = qs.filter(site=site)
     if server:
-        qs.filter(server_name=server)
-
-    for obj in RangeQuerySetWrapper(qs):
-        print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-        obj.delete()
+        qs = qs.filter(server_name=server)
+    if level:
+        qs = qs.filter(level__gte=level)
     
-    # TODO: we should collect which messages above were deleted
-    # and potentially just send out post_delete signals where
-    # GroupedMessage can update itself accordingly
-
-    qs = SkinnyQuerySet(GroupedMessage).filter(last_seen__lte=ts)
-    if logger:
-        qs.filter(logger=logger)
-
+    groups_to_check = set()
     for obj in RangeQuerySetWrapper(qs):
         print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
         obj.delete()
+        groups_to_check.add(obj.group_id)
+    
+    if not (server or site):
+        # MessageCountByMinute
+        qs = SkinnyQuerySet(MessageCountByMinute).filter(date__lte=ts)
+        if logger:
+            qs = qs.filter(group__logger=logger)
+        if level:
+            qs = qs.filter(group__level__gte=level)
+
+        for obj in RangeQuerySetWrapper(qs):
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
+
+        # GroupedMessage
+        qs = SkinnyQuerySet(GroupedMessage).filter(last_seen__lte=ts)
+        if logger:
+            qs = qs.filter(logger=logger)
+        if level:
+            qs = qs.filter(level__gte=level)
+
+        for obj in RangeQuerySetWrapper(qs):
+            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
+                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
+                    print ">>> Removing <FilterValue: key=%s, value=%s>" % ( key, value)
+                    FilterValue.objects.filter(key=key, value=value).delete()
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
+
+    # attempt to cleanup any groups that may now be empty
+    groups_to_delete = []
+    for group_id in groups_to_check:
+        if not Message.objects.filter(group=group_id).exists():
+            groups_to_delete.append(group_id)
+
+    if groups_to_delete:
+        for obj in SkinnyQuerySet(GroupedMessage).filter(pk__in=groups_to_delete):
+            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
+                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
+                    print ">>> Removing <FilterValue: key=%s, value=%s>" % ( key, value)
+                    FilterValue.objects.filter(key=key, value=value).delete()
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
 
 def upgrade(interactive=True):
     from sentry.conf import settings
@@ -170,6 +225,8 @@ def main():
                           help='Limit truncation to only entries from site.')
         parser.add_option('--server',
                           help='Limit truncation to only entries from server.')
+        parser.add_option('--level',
+                          help='Limit truncation to only entries greater than or equal to level (e.g. DEBUG).')
 
     (options, args) = parser.parse_args()
 
@@ -206,7 +263,12 @@ def main():
         app.execute(args[0])
 
     elif args[0] == 'cleanup':
-        cleanup(days=options.days, logger=options.logger, site=options.site, server=options.server)
+        level = options.level
+        if level is not None and not level.isdigit():
+            level = getattr(logging, level.upper())
+
+        cleanup(days=options.days, logger=options.logger, site=options.site, server=options.server,
+                level=level)
 
     sys.exit(0)
 
diff --git a/tests/fixtures/cleanup.json b/tests/fixtures/cleanup.json
index bfd5404616..0df9aae783 100644
--- a/tests/fixtures/cleanup.json
+++ b/tests/fixtures/cleanup.json
@@ -3,7 +3,7 @@
     "fields": {
       "status": 0, 
       "first_seen": "2010-08-31 17:50:47", 
-      "level": 40, 
+      "level": 30, 
       "class_name": "KeyError", 
       "checksum": "ed77d1185670a58e7242fde014d980e9", 
       "times_seen": 1, 
@@ -71,7 +71,7 @@
     "fields": {
       "group": 2, 
       "server_name": "dcramer.local", 
-      "level": 40, 
+      "level": 30, 
       "class_name": "KeyError", 
       "checksum": "ed77d1185670a58e7242fde014d980e9", 
       "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/disqus/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/Development/django-sentry/sentry/views.py\", line 124, in group\n    reporter = ImprovedExceptionReporter(fake_request, exc_type, exc_value, frames, obj.data['__sentry__']['template'])\n\nKeyError: 'template'\n", 
diff --git a/tests/tests.py b/tests/tests.py
index 2c61117d85..3760cfbd19 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -24,7 +24,8 @@ from sentry.client.base import SentryClient
 from sentry.client.handlers import SentryHandler
 from sentry.client.models import get_client
 from sentry.conf import settings
-from sentry.models import Message, GroupedMessage
+from sentry.models import Message, GroupedMessage, MessageCountByMinute, \
+                          FilterValue, MessageFilterValue
 from sentry.utils import json
 from sentry.utils import transform, get_signature, get_auth_header
 from sentry.utils.compat import pickle
@@ -1321,17 +1322,80 @@ class SentryClientTest(BaseTestCase):
     # 
     #     settings.CLIENT = 'sentry.client.base.SentryClient'
 
-class SentryCommandTest(BaseTestCase):
+class SentryCleanupTest(BaseTestCase):
     fixtures = ['tests/fixtures/cleanup.json']
     
-    def test_cleanup(self):
+    def test_simple(self):
         from sentry.scripts.runner import cleanup
         
-        self.assertEquals(Message.objects.count(), 10)
-        
         cleanup(days=1)
         
         self.assertEquals(Message.objects.count(), 0)
+        self.assertEquals(GroupedMessage.objects.count(), 0)
+        self.assertEquals(MessageCountByMinute.objects.count(), 0)
+        self.assertEquals(MessageFilterValue.objects.count(), 0)
+
+    def test_logger(self):
+        from sentry.scripts.runner import cleanup
+        
+        cleanup(days=1, logger='sentry')
+        
+        self.assertEquals(Message.objects.count(), 8)
+        for message in Message.objects.all():
+            self.assertNotEquals(message.logger, 'sentry')
+        self.assertEquals(GroupedMessage.objects.count(), 3)
+        for message in GroupedMessage.objects.all():
+            self.assertNotEquals(message.logger, 'sentry')
+
+        cleanup(days=1, logger='awesome')
+        
+        self.assertEquals(Message.objects.count(), 4)
+        for message in Message.objects.all():
+            self.assertNotEquals(message.logger, 'awesome')
+        self.assertEquals(GroupedMessage.objects.count(), 2)
+        for message in GroupedMessage.objects.all():
+            self.assertNotEquals(message.logger, 'awesome')
+
+        cleanup(days=1, logger='root')
+        
+        self.assertEquals(Message.objects.count(), 0)
+        self.assertEquals(GroupedMessage.objects.count(), 0)
+        self.assertEquals(MessageCountByMinute.objects.count(), 0)
+        self.assertEquals(MessageFilterValue.objects.count(), 0)
+
+    def test_server_name(self):
+        from sentry.scripts.runner import cleanup
+        
+        cleanup(days=1, server='dcramer.local')
+        
+        self.assertEquals(Message.objects.count(), 2)
+        for message in Message.objects.all():
+            self.assertNotEquals(message.server_name, 'dcramer.local')
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+
+        cleanup(days=1, server='node.local')
+        
+        self.assertEquals(Message.objects.count(), 0)
+        self.assertEquals(GroupedMessage.objects.count(), 0)
+        self.assertEquals(MessageCountByMinute.objects.count(), 0)
+        self.assertEquals(MessageFilterValue.objects.count(), 0)
+
+    def test_level(self):
+        from sentry.scripts.runner import cleanup
+        
+        cleanup(days=1, level=logging.ERROR)
+        
+        self.assertEquals(Message.objects.count(), 1)
+        for message in Message.objects.all():
+            self.assertNotEquals(message.level, logging.ERROR)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+
+        cleanup(days=1, level=logging.DEBUG)
+        
+        self.assertEquals(Message.objects.count(), 0)
+        self.assertEquals(GroupedMessage.objects.count(), 0)
+        self.assertEquals(MessageCountByMinute.objects.count(), 0)
+        self.assertEquals(MessageFilterValue.objects.count(), 0)
 
 class SentrySearchTest(BaseTestCase):
     @conditional_on_module('haystack')
