commit 89af7d6c309e6853ff825fc5bef739b62edd8798
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Apr 30 22:36:01 2016 +0200

    Allow self-reactivation of accounts
    
    Accounts which are inactive (due to "Close Account" actions) can be reactivated by the user
    upon logging in.
    
    Fixes GH-3152
    
    @getsentry/team

diff --git a/src/sentry/templates/sentry/reactivate-account.html b/src/sentry/templates/sentry/reactivate-account.html
new file mode 100644
index 0000000000..6699d343c7
--- /dev/null
+++ b/src/sentry/templates/sentry/reactivate-account.html
@@ -0,0 +1,21 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "Reactivate Account" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+  <form class="form-stacked" action="" method="post" autocomplete="off">
+    {% csrf_token %}
+
+    <h2>Account Disabled</h2>
+
+    <input type="hidden" name="op" value="confirm" />
+
+    <p>Your account was disabled and scheduled for removal. You may reactivate this account, though any data that has been already removed is not recoverable (such as organization membership).</p>
+
+    <fieldset class="form-actions">
+      <button type="submit" class="btn btn-primary">{% trans "Reactivate Account" %}</button>
+    </fieldset>
+  </form>
+{% endblock %}
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 53ff729ddf..0c50a1bfc8 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -123,8 +123,6 @@ class AuthenticationForm(CaptchaForm):
                     self.error_messages['invalid_login'] % {
                         'username': self.username_field.verbose_name
                     })
-            elif not self.user_cache.is_active:
-                raise forms.ValidationError(self.error_messages['inactive'])
         self.check_for_test_cookie()
         return self.cleaned_data
 
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 60576bb788..09818f9e28 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -84,10 +84,15 @@ class AuthLoginView(BaseView):
             return self.redirect(auth.get_login_redirect(request))
 
         elif login_form.is_valid():
-            auth.login(request, login_form.get_user())
+            user = login_form.get_user()
+
+            auth.login(request, user)
 
             request.session.pop('needs_captcha', None)
 
+            if not user.is_active:
+                return self.redirect(reverse('sentry-reactivate-account'))
+
             return self.redirect(auth.get_login_redirect(request))
 
         elif request.POST and not request.session.get('needs_captcha'):
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 67840b6939..f77beb942d 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -181,7 +181,10 @@ class BaseView(View, OrganizationMixin):
         return super(BaseView, self).dispatch(request, *args, **kwargs)
 
     def is_auth_required(self, request, *args, **kwargs):
-        return self.auth_required and not request.user.is_authenticated()
+        return (
+            self.auth_required
+            and not (request.user.is_authenticated() and request.user.is_active)
+        )
 
     def handle_auth_required(self, request, *args, **kwargs):
         request.session['_next'] = request.get_full_path()
diff --git a/src/sentry/web/frontend/reactivate_account.py b/src/sentry/web/frontend/reactivate_account.py
new file mode 100644
index 0000000000..8d27cbcb0d
--- /dev/null
+++ b/src/sentry/web/frontend/reactivate_account.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import
+
+from django.db import transaction
+from django.views.decorators.cache import never_cache
+
+from sentry.web.frontend.base import BaseView
+from sentry.utils import auth
+
+
+class ReactivateAccountView(BaseView):
+    # auth check is managed by view code
+    auth_required = False
+
+    @never_cache
+    @transaction.atomic
+    def handle(self, request):
+        if not request.user.is_authenticated:
+            return self.handle_auth_required(request)
+
+        if request.POST.get('op') == 'confirm':
+            request.user.update(is_active=True)
+
+            return self.redirect(auth.get_login_redirect(request))
+
+        context = {}
+        return self.respond('sentry/reactivate-account.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 1b95855c7a..63db3efc23 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -65,6 +65,7 @@ from sentry.web.frontend.project_rules import ProjectRulesView
 from sentry.web.frontend.project_settings import ProjectSettingsView
 from sentry.web.frontend.project_tags import ProjectTagsView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
+from sentry.web.frontend.reactivate_account import ReactivateAccountView
 from sentry.web.frontend.release_webhook import ReleaseWebhookView
 from sentry.web.frontend.remove_account import RemoveAccountView
 from sentry.web.frontend.remove_organization import RemoveOrganizationView
@@ -162,10 +163,10 @@ urlpatterns += patterns(
         name='sentry-auth-organization'),
     url(r'^auth/sso/$', AuthProviderLoginView.as_view(),
         name='sentry-auth-sso'),
-
-
     url(r'^auth/logout/$', AuthLogoutView.as_view(),
         name='sentry-logout'),
+    url(r'^auth/reactivate/$', ReactivateAccountView.as_view(),
+        name='sentry-reactivate-account'),
 
     # Account
     url(r'^login-redirect/$', accounts.login_redirect,
