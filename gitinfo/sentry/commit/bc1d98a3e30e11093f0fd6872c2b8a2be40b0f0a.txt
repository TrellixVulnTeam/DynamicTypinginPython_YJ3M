commit bc1d98a3e30e11093f0fd6872c2b8a2be40b0f0a
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Mon Apr 6 11:14:56 2020 -0700

    feat(Releases): Send failed commit emails to owners of repo on behalf of Sentry Apps (#18088)
    
    Objective
    The proxy user for the sentry app does not have an email, because it's not used as a normal user would be. We should send the failed fetch commits email to the owners of that org on behalf of the Sentry App.

diff --git a/src/sentry/tasks/commits.py b/src/sentry/tasks/commits.py
index 86fbda270e..9658ae9ea0 100644
--- a/src/sentry/tasks/commits.py
+++ b/src/sentry/tasks/commits.py
@@ -14,6 +14,7 @@ from sentry.models import (
     ReleaseHeadCommit,
     Repository,
     User,
+    OrganizationMember,
 )
 from sentry.plugins.base import bindings
 from sentry.tasks.base import instrumented_task, retry
@@ -149,12 +150,14 @@ def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
                 handle_invalid_identity(identity=e.identity, commit_failure=True)
             elif isinstance(e, (PluginError, InvalidIdentity, IntegrationError)):
                 msg = generate_fetch_commits_error_email(release, six.text_type(e))
-                msg.send_async(to=[user.email])
+                emails = get_emails_for_user_or_org(user, release.organization_id)
+                msg.send_async(to=emails)
             else:
                 msg = generate_fetch_commits_error_email(
                     release, "An internal system error occurred."
                 )
-                msg.send_async(to=[user.email])
+                emails = get_emails_for_user_or_org(user, release.organization_id)
+                msg.send_async(to=emails)
         else:
             logger.info(
                 "fetch_commits.complete",
@@ -220,3 +223,17 @@ def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
 
 def is_integration_provider(provider):
     return provider and provider.startswith("integrations:")
+
+
+def get_emails_for_user_or_org(user, orgId):
+    emails = []
+    if user.is_sentry_app:
+        members = OrganizationMember.objects.filter(
+            organization_id=orgId, role="owner", user_id__isnull=False
+        ).select_related("user")
+        for m in list(members):
+            emails.append(m.user.email)
+    else:
+        emails = [user.email]
+
+    return emails
diff --git a/tests/sentry/tasks/test_commits.py b/tests/sentry/tasks/test_commits.py
index 8324c7922f..483e223b5f 100644
--- a/tests/sentry/tasks/test_commits.py
+++ b/tests/sentry/tasks/test_commits.py
@@ -136,6 +136,41 @@ class FetchCommitsTest(TestCase):
         assert msg.to == [self.user.email]
         assert "secrets" not in msg.body
 
+    @patch("sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits")
+    def test_fetch_error_plugin_error_for_sentry_app(self, mock_compare_commits):
+        org = self.create_organization(owner=self.user, name="baz")
+        sentry_app = self.create_sentry_app(
+            organization=org, published=True, verify_install=False, name="Super Awesome App"
+        )
+
+        repo = Repository.objects.create(name="example", provider="dummy", organization_id=org.id)
+        release = Release.objects.create(organization_id=org.id, version="abcabcabc")
+
+        commit = Commit.objects.create(organization_id=org.id, repository_id=repo.id, key="a" * 40)
+
+        ReleaseHeadCommit.objects.create(
+            organization_id=org.id, repository_id=repo.id, release=release, commit=commit
+        )
+
+        refs = [{"repository": repo.name, "commit": "b" * 40}]
+
+        release2 = Release.objects.create(organization_id=org.id, version="12345678")
+
+        mock_compare_commits.side_effect = Exception("secrets")
+
+        with self.tasks():
+            fetch_commits(
+                release_id=release2.id,
+                user_id=sentry_app.proxy_user_id,
+                refs=refs,
+                previous_release_id=release.id,
+            )
+
+        msg = mail.outbox[-1]
+        assert msg.subject == "Unable to Fetch Commits"
+        assert msg.to == [self.user.email]
+        assert "secrets" not in msg.body
+
     @patch("sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits")
     def test_fetch_error_random_exception(self, mock_compare_commits):
         self.login_as(user=self.user)
