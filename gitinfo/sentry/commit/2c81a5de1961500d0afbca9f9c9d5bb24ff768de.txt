commit 2c81a5de1961500d0afbca9f9c9d5bb24ff768de
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Tue Mar 27 12:42:21 2018 -0500

    ref(tagstore): Don't filter on project_id in legacy deletes (#7806)

diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index dd780ac547..3c50e7bbfb 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -85,66 +85,6 @@ class TagStorage(Service):
         'get_group_tag_keys_and_top_values',
     )
 
-    def setup_deletions(self, tagkey_model, tagvalue_model, grouptagkey_model,
-                        grouptagvalue_model, eventtag_model):
-        from sentry.deletions import default_manager as deletion_manager
-        from sentry.deletions.defaults import BulkModelDeletionTask, ModelDeletionTask
-        from sentry.deletions.base import ModelRelation
-        from sentry.models import Event, Group, Project
-
-        deletion_manager.add_bulk_dependencies(Event, [
-            lambda instance_list: ModelRelation(eventtag_model,
-                                                {'event_id__in': [i.id for i in instance_list],
-                                                 'project_id': instance_list[0].project_id},
-                                                ModelDeletionTask),
-        ])
-
-        deletion_manager.register(tagvalue_model, BulkModelDeletionTask)
-        deletion_manager.register(grouptagkey_model, BulkModelDeletionTask)
-        deletion_manager.register(grouptagvalue_model, BulkModelDeletionTask)
-        deletion_manager.register(eventtag_model, BulkModelDeletionTask)
-
-        deletion_manager.add_dependencies(Group, [
-            lambda instance: ModelRelation(
-                eventtag_model,
-                query={
-                    'group_id': instance.id,
-                    'project_id': instance.project_id
-                },
-                partition_key={'project_id': instance.project_id}),
-            lambda instance: ModelRelation(
-                grouptagkey_model,
-                query={
-                    'group_id': instance.id,
-                    'project_id': instance.project_id
-                },
-                partition_key={'project_id': instance.project_id}),
-            lambda instance: ModelRelation(
-                grouptagvalue_model,
-                query={
-                    'group_id': instance.id,
-                    'project_id': instance.project_id
-                },
-                partition_key={'project_id': instance.project_id}),
-        ])
-
-        deletion_manager.add_dependencies(Project, [
-            lambda instance: ModelRelation(tagkey_model,
-                                           query={'project_id': instance.id}),
-            lambda instance: ModelRelation(tagvalue_model,
-                                           query={'project_id': instance.id},
-                                           partition_key={'project_id': instance.id}),
-            lambda instance: ModelRelation(grouptagkey_model,
-                                           query={'project_id': instance.id},
-                                           partition_key={'project_id': instance.id}),
-            lambda instance: ModelRelation(grouptagvalue_model,
-                                           query={'project_id': instance.id},
-                                           partition_key={'project_id': instance.id}),
-        ])
-
-    def setup_cleanup(self, tagvalue_model, grouptagvalue_model, eventtag_model):
-        pass
-
     def setup_merge(self, grouptagkey_model, grouptagvalue_model):
         from sentry.tasks import merge
 
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 41bdedebdc..3773e0fb94 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -34,19 +34,9 @@ class LegacyTagStorage(TagStorage):
     """
 
     def setup(self):
-        self.setup_deletions(
-            tagkey_model=TagKey,
-            tagvalue_model=TagValue,
-            grouptagkey_model=GroupTagKey,
-            grouptagvalue_model=GroupTagValue,
-            eventtag_model=EventTag,
-        )
+        self.setup_deletions()
 
-        self.setup_cleanup(
-            tagvalue_model=TagValue,
-            grouptagvalue_model=GroupTagValue,
-            eventtag_model=EventTag,
-        )
+        self.setup_cleanup()
 
         self.setup_merge(
             grouptagkey_model=GroupTagKey,
@@ -58,20 +48,60 @@ class LegacyTagStorage(TagStorage):
             grouptagvalue_model=GroupTagValue,
         )
 
-    def setup_cleanup(self, tagvalue_model, grouptagvalue_model, eventtag_model):
+    def setup_cleanup(self):
         from sentry.runner.commands import cleanup
 
         cleanup.EXTRA_BULK_QUERY_DELETES += [
-            (grouptagvalue_model, 'last_seen', None),
-            (tagvalue_model, 'last_seen', None),
-            (eventtag_model, 'date_added', 'date_added'),
+            (GroupTagValue, 'last_seen', None),
+            (TagValue, 'last_seen', None),
+            (EventTag, 'date_added', 'date_added'),
         ]
 
-    def setup_deletions(self, **kwargs):
-        super(LegacyTagStorage, self).setup_deletions(**kwargs)
-
+    def setup_deletions(self):
         from sentry.deletions import default_manager as deletion_manager
-        from sentry.deletions.base import ModelRelation, ModelDeletionTask
+        from sentry.deletions.defaults import BulkModelDeletionTask, ModelDeletionTask
+        from sentry.deletions.base import ModelRelation
+        from sentry.models import Event, Group, Project
+
+        deletion_manager.add_bulk_dependencies(Event, [
+            lambda instance_list: ModelRelation(EventTag,
+                                                {'event_id__in': [i.id for i in instance_list]},
+                                                ModelDeletionTask),
+        ])
+
+        deletion_manager.register(TagValue, BulkModelDeletionTask)
+        deletion_manager.register(GroupTagKey, BulkModelDeletionTask)
+        deletion_manager.register(GroupTagValue, BulkModelDeletionTask)
+        deletion_manager.register(EventTag, BulkModelDeletionTask)
+
+        deletion_manager.add_dependencies(Group, [
+            lambda instance: ModelRelation(
+                EventTag,
+                query={
+                    'group_id': instance.id,
+                }),
+            lambda instance: ModelRelation(
+                GroupTagKey,
+                query={
+                    'group_id': instance.id,
+                }),
+            lambda instance: ModelRelation(
+                GroupTagValue,
+                query={
+                    'group_id': instance.id,
+                }),
+        ])
+
+        deletion_manager.add_dependencies(Project, [
+            lambda instance: ModelRelation(TagKey,
+                                           query={'project_id': instance.id}),
+            lambda instance: ModelRelation(TagValue,
+                                           query={'project_id': instance.id}),
+            lambda instance: ModelRelation(GroupTagKey,
+                                           query={'project_id': instance.id}),
+            lambda instance: ModelRelation(GroupTagValue,
+                                           query={'project_id': instance.id}),
+        ])
 
         class TagKeyDeletionTask(ModelDeletionTask):
             def get_child_relations(self, instance):
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index ad57c48ea3..6688d089e7 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -43,19 +43,9 @@ class V2TagStorage(TagStorage):
     """
 
     def setup(self):
-        self.setup_deletions(
-            tagkey_model=TagKey,
-            tagvalue_model=TagValue,
-            grouptagkey_model=GroupTagKey,
-            grouptagvalue_model=GroupTagValue,
-            eventtag_model=EventTag,
-        )
+        self.setup_deletions()
 
-        self.setup_cleanup(
-            tagvalue_model=TagValue,
-            grouptagvalue_model=GroupTagValue,
-            eventtag_model=EventTag,
-        )
+        self.setup_cleanup()
 
         self.setup_merge(
             grouptagkey_model=GroupTagKey,
@@ -67,15 +57,65 @@ class V2TagStorage(TagStorage):
             grouptagvalue_model=GroupTagValue,
         )
 
-    def setup_cleanup(self, tagvalue_model, grouptagvalue_model, eventtag_model):
+    def setup_cleanup(self):
         # TODO: fix for sharded DB
         pass
 
-    def setup_deletions(self, **kwargs):
-        super(V2TagStorage, self).setup_deletions(**kwargs)
-
+    def setup_deletions(self):
         from sentry.deletions import default_manager as deletion_manager
-        from sentry.deletions.base import ModelRelation, ModelDeletionTask
+        from sentry.deletions.defaults import BulkModelDeletionTask, ModelDeletionTask
+        from sentry.deletions.base import ModelRelation
+        from sentry.models import Event, Group, Project
+
+        deletion_manager.add_bulk_dependencies(Event, [
+            lambda instance_list: ModelRelation(EventTag,
+                                                {'event_id__in': [i.id for i in instance_list],
+                                                 'project_id': instance_list[0].project_id},
+                                                ModelDeletionTask),
+        ])
+
+        deletion_manager.register(TagValue, BulkModelDeletionTask)
+        deletion_manager.register(GroupTagKey, BulkModelDeletionTask)
+        deletion_manager.register(GroupTagValue, BulkModelDeletionTask)
+        deletion_manager.register(EventTag, BulkModelDeletionTask)
+
+        deletion_manager.add_dependencies(Group, [
+            lambda instance: ModelRelation(
+                EventTag,
+                query={
+                    'group_id': instance.id,
+                    'project_id': instance.project_id
+                },
+                partition_key={'project_id': instance.project_id}),
+            lambda instance: ModelRelation(
+                GroupTagKey,
+                query={
+                    'group_id': instance.id,
+                    'project_id': instance.project_id
+                },
+                partition_key={'project_id': instance.project_id}),
+            lambda instance: ModelRelation(
+                GroupTagValue,
+                query={
+                    'group_id': instance.id,
+                    'project_id': instance.project_id
+                },
+                partition_key={'project_id': instance.project_id}),
+        ])
+
+        deletion_manager.add_dependencies(Project, [
+            lambda instance: ModelRelation(TagKey,
+                                           query={'project_id': instance.id}),
+            lambda instance: ModelRelation(TagValue,
+                                           query={'project_id': instance.id},
+                                           partition_key={'project_id': instance.id}),
+            lambda instance: ModelRelation(GroupTagKey,
+                                           query={'project_id': instance.id},
+                                           partition_key={'project_id': instance.id}),
+            lambda instance: ModelRelation(GroupTagValue,
+                                           query={'project_id': instance.id},
+                                           partition_key={'project_id': instance.id}),
+        ])
 
         # NOTE: EventTag is handled by cleanup
 
