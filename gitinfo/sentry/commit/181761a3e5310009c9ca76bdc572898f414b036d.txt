commit 181761a3e5310009c9ca76bdc572898f414b036d
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 31 17:18:13 2015 -0700

    Validate and coerce fingerprint

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index ac86799e98..e2f45d6339 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -76,6 +76,10 @@ class InvalidTimestamp(Exception):
     pass
 
 
+class InvalidFingerprint(Exception):
+    pass
+
+
 class Auth(object):
     def __init__(self, auth_vars, is_public=False):
         self.client = auth_vars.get('sentry_client')
@@ -310,6 +314,17 @@ class ClientApiHelper(object):
 
         return data
 
+    def _process_fingerprint(self, data):
+        if not isinstance(data['fingerprint'], (list, tuple)):
+            raise InvalidFingerprint
+
+        result = []
+        for bit in data['fingerprint']:
+            if not isinstance(bit, (basestring, int, float)):
+                raise InvalidFingerprint
+            result.append(unicode(bit))
+        return result
+
     def validate_data(self, project, data):
         # TODO(dcramer): move project out of the data packet
         data['project'] = project.id
@@ -355,6 +370,19 @@ class ClientApiHelper(object):
                 })
                 del data['timestamp']
 
+        if 'fingerprint' in data:
+            try:
+                self._process_fingerprint(data)
+            except InvalidFingerprint as e:
+                self.log.info(
+                    'Discarded invalid value for fingerprint: %r',
+                    data['fingerprint'], exc_info=True)
+                data['errors'].append({
+                    'type': EventError.INVALID_DATA,
+                    'name': 'fingerprint',
+                    'value': data['fingerprint'],
+                })
+
         if data.get('modules') and type(data['modules']) != dict:
             self.log.info(
                 'Discarded invalid type for modules: %s',
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index e7e4a48269..57f91bce20 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -8,8 +8,8 @@ from datetime import datetime
 from uuid import UUID
 
 from sentry.coreapi import (
-    APIError, APIUnauthorized, Auth, ClientApiHelper, InvalidTimestamp,
-    get_interface
+    APIError, APIUnauthorized, Auth, ClientApiHelper, InvalidFingerprint,
+    InvalidTimestamp, get_interface
 )
 from sentry.testutils import TestCase
 
@@ -64,6 +64,25 @@ class ProjectFromAuthTest(BaseAPITest):
         self.assertRaises(APIUnauthorized, self.helper.project_from_auth, auth)
 
 
+class ProcessFingerprintTest(BaseAPITest):
+    def test_invalid_as_string(self):
+        self.assertRaises(InvalidFingerprint, self.helper._process_fingerprint, {
+            'fingerprint': '2012-01-01T10:30:45',
+        })
+
+    def test_invalid_component(self):
+        self.assertRaises(InvalidFingerprint, self.helper._process_fingerprint, {
+            'fingerprint': ['foo', ['bar']],
+        })
+
+    def simple(self):
+        data = self.helper._process_fingerprint({
+            'fingerprint': ['{{default}}', 1, 'bar', 4.5],
+        })
+        self.assertTrue('fingerprint' in data)
+        self.assertEquals(data['fingerprint'], ['{{default}}', '1', 'bar', '4.5'])
+
+
 class ProcessDataTimestampTest(BaseAPITest):
     def test_iso_timestamp(self):
         d = datetime(2012, 01, 01, 10, 30, 45)
