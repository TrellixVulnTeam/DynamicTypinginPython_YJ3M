commit 680128a26e53206347b058df0657e2ba020e37ad
Author: Leander Rodrigues <leander.rodrigues@sentry.io>
Date:   Mon Jan 27 14:14:27 2020 -0800

    feat(async-csv): Setup endpoints (FE/BE) and models for file storage (#16522)
    
    Preliminary setup for endpoints used in Asynchronous CSV Downloads.

diff --git a/src/sentry/api/endpoints/data_export.py b/src/sentry/api/endpoints/data_export.py
new file mode 100644
index 0000000000..e723d35bb1
--- /dev/null
+++ b/src/sentry/api/endpoints/data_export.py
@@ -0,0 +1,57 @@
+from __future__ import absolute_import
+
+
+from django.core.exceptions import ValidationError
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationEventPermission
+from sentry.api.serializers import serialize
+from sentry.constants import ExportQueryType
+from sentry.models import ExportedData
+from sentry.tasks.data_export import compile_data
+
+
+class ExportedDataSerializer(serializers.Serializer):
+    max_value = len(ExportQueryType.as_choices()) - 1
+    query_type = serializers.IntegerField(required=True, min_value=0, max_value=max_value)
+    query_info = serializers.JSONField(required=True)
+    # TODO(Leander): Implement query_info validation with jsonschema
+
+
+class DataExportEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationEventPermission,)
+
+    def post(self, request, organization):
+        """
+        Create a new asynchronous file export task, and
+        email user upon completion,
+        """
+
+        if not features.has("organizations:data-export", organization):
+            return Response(status=404)
+
+        serializer = ExportedDataSerializer(
+            data=request.data, context={"organization": organization, "user": request.user}
+        )
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        data = serializer.validated_data
+
+        try:
+            # TODO(Leander): Prevent repeated requests for identical queries per organization, if one is in progress
+            data_export = ExportedData.objects.create(
+                organization=organization,
+                user=request.user,
+                query_type=data["query_type"],
+                query_info=data["query_info"],
+            )
+        except ValidationError as e:
+            # This will handle invalid JSON requests
+            return Response({"detail": e.message}, status=400)
+
+        compile_data.delay(data_export=data_export)
+        return Response(serialize(data_export, request.user), status=201)
diff --git a/src/sentry/api/endpoints/data_export_details.py b/src/sentry/api/endpoints/data_export_details.py
new file mode 100644
index 0000000000..535793460c
--- /dev/null
+++ b/src/sentry/api/endpoints/data_export_details.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationEventPermission
+from sentry.api.serializers import serialize
+from sentry.models import ExportedData
+
+
+class DataExportDetailsEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationEventPermission,)
+
+    def get(self, request, organization, **kwargs):
+        """
+        Retrieve information about the temporary file record.
+        Used to populate page emailed to the user.
+        """
+
+        if not features.has("organizations:data-export", organization):
+            return Response(status=404)
+
+        try:
+            data_export = ExportedData.objects.get(id=kwargs["data_export_id"])
+            return Response(serialize(data_export, request.user))
+        except ExportedData.DoesNotExist:
+            return Response(status=404)
diff --git a/src/sentry/api/serializers/models/exporteddata.py b/src/sentry/api/serializers/models/exporteddata.py
new file mode 100644
index 0000000000..0b14d66f3d
--- /dev/null
+++ b/src/sentry/api/serializers/models/exporteddata.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, serialize, register
+from sentry.models import ExportedData, User
+
+
+@register(ExportedData)
+class ExportedDataSerializer(Serializer):
+    def get_attrs(self, item_list, user, **kwargs):
+        attrs = {}
+        for item in item_list:
+            user = User.objects.get(id=item.user_id)
+            serialized_user = serialize(user)
+            attrs[item] = {
+                "user": {
+                    "id": serialized_user["id"],
+                    "email": serialized_user["email"],
+                    "username": serialized_user["username"],
+                }
+            }
+        return attrs
+
+    def serialize(self, obj, attrs, user, **kwargs):
+        return {
+            "id": obj.id,
+            "user": attrs["user"],
+            "dateCreated": obj.date_added,
+            "dateFinished": obj.date_finished,
+            "dateExpired": obj.date_expired,
+            "storageUrl": obj.storage_url,
+            "query": {"type": obj.query_type, "info": obj.query_info},
+            "status": obj.status,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 92e6f116d5..a8c35040f3 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -18,6 +18,8 @@ from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.builtin_symbol_sources import BuiltinSymbolSourcesEndpoint
 from .endpoints.catchall import CatchallEndpoint
 from .endpoints.chunk import ChunkUploadEndpoint
+from .endpoints.data_export import DataExportEndpoint
+from .endpoints.data_export_details import DataExportDetailsEndpoint
 from .endpoints.debug_files import (
     AssociateDSymFilesEndpoint,
     DebugFilesEndpoint,
@@ -569,6 +571,17 @@ urlpatterns = [
                     OrganizationAlertRuleIndexEndpoint.as_view(),
                     name="sentry-api-0-organization-alert-rules",
                 ),
+                # Data Export
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/data-export/$",
+                    DataExportEndpoint.as_view(),
+                    name="sentry-api-0-organization-data-export",
+                ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/data-export/(?P<data_export_id>[^\/]+)/$",
+                    DataExportDetailsEndpoint.as_view(),
+                    name="sentry-api-0-organization-data-export-details",
+                ),
                 # Incidents
                 url(
                     r"^(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/activity/$",
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 0d7637fae9..171c11f7d2 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -513,6 +513,7 @@ CELERY_IMPORTS = (
     "sentry.tasks.clear_expired_snoozes",
     "sentry.tasks.collect_project_platforms",
     "sentry.tasks.commits",
+    "sentry.tasks.data_export",
     "sentry.tasks.deletion",
     "sentry.tasks.digests",
     "sentry.tasks.email",
@@ -544,6 +545,7 @@ CELERY_QUEUES = [
     Queue("buffers.process_pending", routing_key="buffers.process_pending"),
     Queue("commits", routing_key="commits"),
     Queue("cleanup", routing_key="cleanup"),
+    Queue("data_export", routing_key="data_export"),
     Queue("default", routing_key="default"),
     Queue("digests.delivery", routing_key="digests.delivery"),
     Queue("digests.scheduling", routing_key="digests.scheduling"),
@@ -792,6 +794,8 @@ SENTRY_FEATURES = {
     # Enable creating organizations within sentry (if SENTRY_SINGLE_ORGANIZATION
     # is not enabled).
     "organizations:create": True,
+    # Enable the 'data-export' interface.
+    "organizations:data-export": False,
     # Enable the 'discover' interface.
     "organizations:discover": False,
     # Enable attaching arbitrary files to events.
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 268829bf83..fcfa2df335 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -435,6 +435,34 @@ class SentryAppInstallationStatus(object):
             return cls.INSTALLED_STR
 
 
+class ExportQueryType(object):
+    DISCOVER_V1 = 0
+    BILLING_REPORT = 1
+    ISSUE_BY_TAG = 2
+    # Add additional query types here...
+    DISCOVER_V1_STR = "DISCOVER_V1"
+    BILLING_REPORT_STR = "BILLING_REPORT"
+    ISSUE_BY_TAG_STR = "ISSUE_BY_TAG"
+    # Add their corresponding strings (sent from browser) here...
+
+    @classmethod
+    def as_choices(cls):
+        return (
+            (cls.DISCOVER_V1, cls.DISCOVER_V1_STR),
+            (cls.BILLING_REPORT, cls.BILLING_REPORT_STR),
+            (cls.ISSUE_BY_TAG, cls.ISSUE_BY_TAG_STR),
+        )
+
+    @classmethod
+    def as_str(cls, status):
+        if status == cls.DISCOVER_V1:
+            return cls.DISCOVER_V1_STR
+        elif status == cls.BILLING_REPORT:
+            return cls.BILLING_REPORT_STR
+        elif status == cls.ISSUE_BY_TAG:
+            return cls.ISSUE_BY_TAG_STR
+
+
 StatsPeriod = namedtuple("StatsPeriod", ("segments", "interval"))
 
 LEGACY_RATE_LIMIT_OPTIONS = frozenset(("sentry:project-rate-limit", "sentry:account-rate-limit"))
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 6d9ba7a995..d14ff9e5aa 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -56,6 +56,7 @@ default_manager.add("organizations:create")
 default_manager.add("organizations:advanced-search", OrganizationFeature)  # NOQA
 default_manager.add("organizations:boolean-search", OrganizationFeature)  # NOQA
 default_manager.add("organizations:api-keys", OrganizationFeature)  # NOQA
+default_manager.add("organizations:data-export", OrganizationFeature)  # NOQA
 default_manager.add("organizations:discover", OrganizationFeature)  # NOQA
 default_manager.add("organizations:events", OrganizationFeature)  # NOQA
 default_manager.add("organizations:events-v2", OrganizationFeature)  # NOQA
diff --git a/src/sentry/migrations/0027_exporteddata.py b/src/sentry/migrations/0027_exporteddata.py
new file mode 100644
index 0000000000..dd5a40c582
--- /dev/null
+++ b/src/sentry/migrations/0027_exporteddata.py
@@ -0,0 +1,52 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.27 on 2020-01-24 19:19
+from __future__ import unicode_literals
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+import django.utils.timezone
+import sentry.db.models.fields.bounded
+import sentry.db.models.fields.foreignkey
+import sentry.db.models.fields.jsonfield
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+
+    dependencies = [
+        ('sentry', '0026_delete_event'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='ExportedData',
+            fields=[
+                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
+                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
+                ('date_finished', models.DateTimeField(null=True)),
+                ('date_expired', models.DateTimeField(null=True)),
+                ('storage_url', models.URLField(null=True)),
+                ('query_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'DISCOVER_V1'), (1, b'BILLING_REPORT'), (2, b'ISSUE_BY_TAG')])),
+                ('query_info', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
+                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
+                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'db_table': 'sentry_exporteddata',
+            },
+        ),
+    ]
diff --git a/src/sentry/models/exporteddata.py b/src/sentry/models/exporteddata.py
new file mode 100644
index 0000000000..3115b11eae
--- /dev/null
+++ b/src/sentry/models/exporteddata.py
@@ -0,0 +1,57 @@
+from __future__ import absolute_import
+
+import six
+from enum import Enum
+
+from django.conf import settings
+from django.db import models
+from django.utils import timezone
+
+from sentry.constants import ExportQueryType
+from sentry.db.models import (
+    BoundedPositiveIntegerField,
+    FlexibleForeignKey,
+    JSONField,
+    Model,
+    sane_repr,
+)
+
+
+class ExportStatus(six.binary_type, Enum):
+    Early = "EARLY"  # The download is being prepared
+    Valid = "VALID"  # The download is ready for the user
+    Expired = "EXPIRED"  # The download has been deleted
+
+
+class ExportedData(Model):
+    """
+    Stores references to asynchronous data export jobs being stored
+    in the Google Cloud Platform temporary storage solution.
+    """
+
+    __core__ = False
+
+    organization = FlexibleForeignKey("sentry.Organization")
+    user = FlexibleForeignKey(settings.AUTH_USER_MODEL)
+    date_added = models.DateTimeField(default=timezone.now)
+    date_finished = models.DateTimeField(null=True)
+    date_expired = models.DateTimeField(null=True)
+    storage_url = models.URLField(null=True)
+    query_type = BoundedPositiveIntegerField(choices=ExportQueryType.as_choices())
+    # TODO(Leander): Define a jsonschema to enforce query shape
+    query_info = JSONField()
+
+    @property
+    def status(self):
+        if self.date_finished is None:
+            return ExportStatus.Early
+        elif self.date_expired < timezone.now():
+            return ExportStatus.Expired
+        else:
+            return ExportStatus.Valid
+
+    class Meta:
+        app_label = "sentry"
+        db_table = "sentry_exporteddata"
+
+    __repr__ = sane_repr("data_id")
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 6274abb52d..13bd5fcc87 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1219,6 +1219,15 @@ function routes() {
           <IndexRoute component={errorHandler(IssueListOverview)} />
           <Route path="searches/:searchId/" component={errorHandler(IssueListOverview)} />
         </Route>
+        <Route
+          path="/organizations/:orgId/data-export/:dataExportId"
+          componentPromise={() =>
+            import(
+              /* webpackChunkName: "DataDownloadView" */ 'app/views/dataExport/dataDownload'
+            )
+          }
+          component={errorHandler(LazyLoad)}
+        />
         {/* Once org issues is complete, these routes can be nested under
           /organizations/:orgId/issues */}
         <Route
diff --git a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
new file mode 100644
index 0000000000..34e4b6f304
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
@@ -0,0 +1,153 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {RouteComponentProps} from 'react-router/lib/Router';
+import AsyncView from 'app/views/asyncView';
+import {PageContent} from 'app/styles/organization';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+
+import Button from 'app/components/button';
+
+enum DownloadStatus {
+  Early = 'EARLY',
+  Valid = 'VALID',
+  Expired = 'EXPIRED',
+}
+
+type RouteParams = {
+  orgId: string;
+  dataExportId: string;
+};
+
+type Download = {
+  id: number;
+  user: {
+    id: number;
+    email: string;
+    username: string;
+  };
+  dateCreated: string;
+  dateFinished?: string;
+  dateExpired?: string;
+  storageUrl?: string;
+  query: {
+    type: number;
+    info: object;
+  };
+  status: DownloadStatus;
+};
+
+type Props = {} & RouteComponentProps<RouteParams, {}>;
+
+type State = {
+  download: Download;
+} & AsyncView['state'];
+
+class DataDownload extends AsyncView<Props, State> {
+  getTitle(): string {
+    return t('Download Center');
+  }
+
+  getEndpoints(): [string, string][] {
+    const {orgId, dataExportId} = this.props.params;
+    return [['download', `/organizations/${orgId}/data-export/${dataExportId}/`]];
+  }
+
+  handleDownload(): void {
+    // TODO(Leander): Implement direct download from Google Cloud Storage
+  }
+
+  renderExpired(): React.ReactNode {
+    return (
+      <React.Fragment>
+        <h3>{t('Sorry!')}</h3>
+        <p>
+          {t('It seems this link has expired, and your download is no longer available.')}
+        </p>
+        <p>
+          {t(
+            'Feel free to start a new export to get the latest and greatest of your Sentry data.'
+          )}
+        </p>
+      </React.Fragment>
+    );
+  }
+
+  renderEarly(): React.ReactNode {
+    return (
+      <React.Fragment>
+        <h3>{t("You're Early!")}</h3>
+        <p>{t("We're still preparing your download, so check back in a bit!")}</p>
+        <p>{t("You can close this page, we'll email you when were ready")}</p>
+      </React.Fragment>
+    );
+  }
+
+  renderValid(): React.ReactNode {
+    const {download} = this.state;
+    // TODO(Leander): Fix this default fallback behavior
+    const d = new Date(download.dateExpired || '');
+    return (
+      <React.Fragment>
+        <h3>{t('Finally!')}</h3>
+        <p>
+          {t(
+            'We prepared your data for download, you can access it with the link below.'
+          )}
+        </p>
+        <Button
+          priority="primary"
+          icon="icon-download"
+          size="large"
+          borderless
+          onClick={() => this.handleDownload()}
+        >
+          {t('Download CSV')}
+        </Button>
+        <p>{t('Keep in mind, this link will no longer work after:')}</p>
+        <p>
+          <b>{`${d.toLocaleDateString()}, ${d.toLocaleTimeString()}`}</b>
+        </p>
+      </React.Fragment>
+    );
+  }
+
+  renderContent(): React.ReactNode {
+    const {download} = this.state;
+    switch (download.status) {
+      case DownloadStatus.Expired:
+        return this.renderExpired();
+      case DownloadStatus.Early:
+        return this.renderEarly();
+      default:
+        return this.renderValid();
+    }
+  }
+
+  renderBody() {
+    return (
+      <PageContent>
+        <div className="pattern-bg" />
+        <ContentContainer>{this.renderContent()}</ContentContainer>
+      </PageContent>
+    );
+  }
+}
+
+const ContentContainer = styled('div')`
+  text-align: center;
+  margin: ${space(4)} auto;
+  /* TODO(Leander): Responsive sizing */
+  width: 350px;
+  padding: ${space(4)};
+  background: ${p => p.theme.whiteDark};
+  border-radius: ${p => p.theme.borderRadius};
+  border: 2px solid ${p => p.theme.borderDark};
+  box-shadow: ${p => p.theme.dropShadowHeavy};
+  p {
+    margin: ${space(1.5)};
+  }
+`;
+
+export default DataDownload;
diff --git a/src/sentry/tasks/data_export.py b/src/sentry/tasks/data_export.py
new file mode 100644
index 0000000000..159554e678
--- /dev/null
+++ b/src/sentry/tasks/data_export.py
@@ -0,0 +1,8 @@
+from __future__ import absolute_import
+from sentry.tasks.base import instrumented_task
+
+
+@instrumented_task(name="sentry.tasks.data_export.compile_data", queue="data_export")
+def compile_data(data_export):
+    # TODO(Leander): Implement logic to compile CSV data via provided ExportedData object
+    return
diff --git a/tests/sentry/api/endpoints/test_data_export.py b/tests/sentry/api/endpoints/test_data_export.py
new file mode 100644
index 0000000000..99e8b41cf0
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_data_export.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+from django.utils import timezone
+
+from sentry.models import ExportedData
+from sentry.models.exporteddata import ExportStatus
+from sentry.testutils import APITestCase
+
+
+class DataExportTest(APITestCase):
+    endpoint = "sentry-api-0-organization-data-export"
+
+    TEST_DATE_ADDED = timezone.now()
+
+    def test_simple(self):
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(owner=self.user, name="Tucan Sam")
+        self.login_as(user=self.user)
+
+        data = {"query_type": 2, "query_info": {"environment": "test"}}
+        url = reverse(self.endpoint, kwargs={"organization_slug": self.org.slug})
+
+        with self.feature("organizations:data-export"):
+            response = self.client.post(url, data=data)
+            data_export = ExportedData.objects.get(id=1)
+            assert response.status_code == 201
+            assert response.data == {
+                "id": 1,
+                "user": {
+                    "id": six.binary_type(self.user.id),
+                    "email": self.user.email,
+                    "username": self.user.username,
+                },
+                "dateCreated": data_export.date_added,
+                "dateFinished": None,
+                "dateExpired": None,
+                "storageUrl": None,
+                "query": {"type": data["query_type"], "info": data["query_info"]},
+                "status": ExportStatus.Early,
+            }
diff --git a/tests/sentry/api/endpoints/test_data_export_details.py b/tests/sentry/api/endpoints/test_data_export_details.py
new file mode 100644
index 0000000000..3d587fc5dd
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_data_export_details.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+from django.utils import timezone
+
+from sentry.models import ExportedData
+from sentry.models.exporteddata import ExportStatus
+from sentry.testutils import APITestCase
+
+
+class DataExportTest(APITestCase):
+    endpoint = "sentry-api-0-organization-data-export-details"
+
+    TEST_DATE_ADDED = timezone.now()
+
+    def test_simple(self):
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(owner=self.user, name="Tucan Sam")
+        self.login_as(user=self.user)
+
+        data_export = ExportedData.objects.create(
+            organization=self.org,
+            user=self.user,
+            date_added=self.TEST_DATE_ADDED,
+            query_type=1,
+            query_info={"environment": "test"},
+        )
+        url = reverse(
+            self.endpoint, kwargs={"data_export_id": 1, "organization_slug": self.org.slug}
+        )
+
+        with self.feature("organizations:data-export"):
+            response = self.client.get(url, format="json")
+            assert response.status_code == 200
+            assert response.data == {
+                "id": 1,
+                "user": {
+                    "id": six.binary_type(self.user.id),
+                    "email": self.user.email,
+                    "username": self.user.username,
+                },
+                "dateCreated": self.TEST_DATE_ADDED,
+                "dateFinished": None,
+                "dateExpired": None,
+                "storageUrl": None,
+                "query": {"type": data_export.query_type, "info": data_export.query_info},
+                "status": ExportStatus.Early,
+            }
