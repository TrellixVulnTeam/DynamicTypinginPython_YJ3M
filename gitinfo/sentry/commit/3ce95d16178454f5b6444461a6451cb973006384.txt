commit 3ce95d16178454f5b6444461a6451cb973006384
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jul 30 14:49:16 2018 -0700

    feat(health): Add Multiple environment selector (#9220)
    
    This queries for all envs in an organization and allows user to select many envs

diff --git a/src/sentry/static/sentry/app/actionCreators/environments.jsx b/src/sentry/static/sentry/app/actionCreators/environments.jsx
index 34f4767f8f..f2eb75ac03 100644
--- a/src/sentry/static/sentry/app/actionCreators/environments.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/environments.jsx
@@ -27,3 +27,12 @@ export function loadActiveEnvironments(data) {
 export function loadHiddenEnvironments(data) {
   EnvironmentActions.loadHiddenData(data);
 }
+
+/**
+ * Fetches all environments for an organization
+ *
+ * @param {String} organizationSlug The organization slug
+ */
+export function fetchOrganizationEnvironments(api, organizationSlug) {
+  return api.requestPromise(`/organizations/${organizationSlug}/environments/`);
+}
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
new file mode 100644
index 0000000000..2c55dab1d4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
@@ -0,0 +1,121 @@
+import {Flex, Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {fetchOrganizationEnvironments} from 'app/actionCreators/environments';
+import {t} from 'app/locale';
+import Button from 'app/components/buttons/button';
+import DropdownLink from 'app/components/dropdownLink';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import MultiSelectField from 'app/components/forms/multiSelectField';
+import SentryTypes from 'app/sentryTypes';
+import withApi from 'app/utils/withApi';
+
+/**
+ * Environment Selector
+ */
+class MultipleEnvironmentSelector extends React.Component {
+  static propTypes = {
+    onChange: PropTypes.func,
+    onUpdate: PropTypes.func,
+    organization: SentryTypes.Organization,
+
+    // This component must be controlled using a value array
+    value: PropTypes.array,
+  };
+
+  static defaultProps = {};
+
+  handleUpdate = e => {
+    let {onUpdate} = this.props;
+
+    if (typeof onUpdate !== 'function') return;
+    onUpdate(this.props.value);
+  };
+
+  render() {
+    const {className, value, onChange, organization} = this.props;
+    const summary = value && value.length ? `${value.join(', ')}` : t('All Environments');
+
+    return (
+      <Flex direction="column" justify="center" className={className}>
+        <label>{t('Environment')}</label>
+        <DropdownLink
+          title={summary}
+          alwaysRenderMenu={false}
+          keepMenuOpen={true}
+          anchorRight={true}
+        >
+          <Box p={2}>
+            <FetchOrganizationEnvironments organization={organization}>
+              {({environments}) => (
+                <React.Fragment>
+                  {environments === null && <LoadingIndicator />}
+                  {!!environments && (
+                    <React.Fragment>
+                      <MultiSelectField
+                        name="environments"
+                        value={value}
+                        choices={environments.map(env => [env.name, env.name])}
+                        onChange={onChange}
+                      />
+                    </React.Fragment>
+                  )}
+                  <Button data-test-id="update-envs" onClick={this.handleUpdate}>
+                    {t('Update')}
+                  </Button>
+                </React.Fragment>
+              )}
+            </FetchOrganizationEnvironments>
+          </Box>
+        </DropdownLink>
+      </Flex>
+    );
+  }
+}
+
+const StyledMultipleEnvironmentSelector = styled(withApi(MultipleEnvironmentSelector))`
+  text-align: right;
+  label {
+    font-weight: 400;
+    font-size: 13px;
+    color: #afa3bb;
+    margin-bottom: 12px;
+  }
+  .dropdown-actor-title {
+    font-size: 15px;
+    height: auto;
+    color: ${p => p.theme.button.default.colorActive};
+  }
+`;
+
+export default StyledMultipleEnvironmentSelector;
+
+const FetchOrganizationEnvironments = withApi(
+  class FetchOrganizationEnvironments extends React.Component {
+    static propTypes = {
+      api: PropTypes.object,
+      organization: SentryTypes.Organization,
+    };
+    constructor(props) {
+      super(props);
+      this.state = {
+        environments: null,
+      };
+    }
+
+    componentDidMount() {
+      let {api, organization} = this.props;
+      fetchOrganizationEnvironments(api, organization.slug).then(environments =>
+        this.setState({environments})
+      );
+    }
+    render() {
+      let {children} = this.props;
+      return children({
+        environments: this.state.environments,
+      });
+    }
+  }
+);
diff --git a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
new file mode 100644
index 0000000000..de43e07d6a
--- /dev/null
+++ b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
@@ -0,0 +1,73 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import {setActiveOrganization} from 'app/actionCreators/organizations';
+import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
+
+import {selectByLabel} from '../../../helpers/select';
+
+describe('MultipleEnvironmentSelector', function() {
+  let getMock;
+  let wrapper;
+  let onChange = jest.fn();
+  let onUpdate = jest.fn();
+  const organization = TestStubs.Organization({});
+  const envs = TestStubs.Environments();
+  const routerContext = TestStubs.routerContext([
+    {
+      organization,
+    },
+  ]);
+
+  beforeAll(async function() {
+    getMock = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/environments/`,
+      body: envs,
+    });
+    setActiveOrganization(organization);
+    await tick();
+
+    wrapper = mount(
+      <MultipleEnvironmentSelector
+        organization={organization}
+        onChange={onChange}
+        onUpdate={onUpdate}
+      />,
+      routerContext
+    );
+  });
+
+  it('fetches environments only when dropdown opened', async function() {
+    expect(getMock).not.toHaveBeenCalled();
+    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    expect(getMock).toHaveBeenCalled();
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('FetchOrganizationEnvironments')).toHaveLength(1);
+
+    // Close
+    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    expect(wrapper.find('FetchOrganizationEnvironments')).toHaveLength(0);
+  });
+
+  it('can select and change environments', async function() {
+    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    await tick();
+    wrapper.update();
+
+    // Select all envs
+    envs.forEach(({name}) => {
+      selectByLabel(wrapper, name, {control: true});
+    });
+    expect(onChange).toHaveBeenCalledTimes(2);
+    expect(onChange).toHaveBeenLastCalledWith(envs.map(({name}) => name));
+
+    wrapper.setProps({value: envs.map(({name}) => name)});
+    wrapper.update();
+    wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
+    await tick();
+    wrapper.update();
+
+    expect(onUpdate).toHaveBeenCalledWith(['production', 'staging']);
+  });
+});
