commit b6734b199ab924d6eda5f492d3f20d5892c15698
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Mar 28 12:55:05 2016 -0700

    Separate defined option values from default option values
    
    With everything being shoved into the simple SENTRY_OPTIONS, there was
    no longer a way to determine if a key was actually defined with a value
    vs falling back to the default value.
    
    This introduces another dict, SENTRY_DEFAULT_OPTIONS. This dict is
    managed from within the options manager at registration time.
    
    Before this, it became impossible to do logic needed inside
    api/endpoints/system_options.py since anything with a default value +
    FLAG_PRIORITIZE_DISK seemed like it was coming from our config file,
    when it was just the default value.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 2bd304a204..bebf302e75 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -908,15 +908,8 @@ SENTRY_ROLES = (
 )
 
 # See sentry/options/__init__.py for more information
-SENTRY_OPTIONS = {
-    'mail.backend': 'django.core.mail.backends.smtp.EmailBackend',
-    'mail.host': 'localhost',
-    'mail.port': 25,
-    'mail.username': '',
-    'mail.password': '',
-    'mail.use-tls': False,
-    'mail.subject-prefix': '[Sentry] ',
-    'mail.from': 'root@localhost',
+SENTRY_OPTIONS = {}
+SENTRY_DEFAULT_OPTIONS = {
     # Make this unique, and don't share it with anybody.
     'system.secret-key': hashlib.md5(socket.gethostname() + ')*)&8a36)6%74e@-ne5(-!8a(vv#tkv)(eyg&@0=zd^pl!7=y@').hexdigest(),
 }
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index e5ad84d05c..21d1491b6c 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -33,4 +33,6 @@ all = default_manager.all
 filter = default_manager.filter
 isset = default_manager.isset
 
-from .defaults import *  # NOQA
+
+def load_defaults():
+    from .defaults import *  # NOQA
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 831708c1f6..82d66ad1de 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -160,7 +160,10 @@ class OptionsManager(object):
             # default to the hardcoded local configuration for this key
             return settings.SENTRY_OPTIONS[key]
         except KeyError:
-            return opt.default()
+            try:
+                return settings.SENTRY_DEFAULT_OPTIONS[key]
+            except KeyError:
+                return opt.default()
 
     def delete(self, key):
         """
@@ -216,6 +219,9 @@ class OptionsManager(object):
         # value from the type
         if default_value is None:
             default = type
+            default_value = default()
+
+        settings.SENTRY_DEFAULT_OPTIONS[key] = default_value
 
         self.registry[key] = self.store.make_key(key, default, type, flags, ttl, grace)
 
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 5621a3ffcf..e468383721 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -88,6 +88,10 @@ def bootstrap_options(settings, config=None):
     and convert options into Django settings that are
     required to even initialize the rest of the app.
     """
+    # Make sure our options have gotten registered
+    from sentry.options import load_defaults
+    load_defaults()
+
     options = {}
     if config is not None:
         # Attempt to load our config yaml file
@@ -133,10 +137,11 @@ def bootstrap_options(settings, config=None):
     # Now go back through all of SENTRY_OPTIONS and promote
     # back into settings. This catches the case when values are defined
     # only in SENTRY_OPTIONS and no config.yml file
-    for k, v in settings.SENTRY_OPTIONS.iteritems():
-        if k in options_mapper:
-            # Escalate the few needed to actually get the app bootstrapped into settings
-            setattr(settings, options_mapper[k], v)
+    for o in (settings.SENTRY_DEFAULT_OPTIONS, settings.SENTRY_OPTIONS):
+        for k, v in o.iteritems():
+            if k in options_mapper:
+                # Escalate the few needed to actually get the app bootstrapped into settings
+                setattr(settings, options_mapper[k], v)
 
 
 def initialize_app(config, skip_backend_validation=False):
@@ -313,7 +318,8 @@ def apply_legacy_settings(settings):
         warnings.warn(DeprecatedSettingWarning('SENTRY_ALLOW_REGISTRATION', 'SENTRY_FEATURES["auth:register"]'))
         settings.SENTRY_FEATURES['auth:register'] = settings.SENTRY_ALLOW_REGISTRATION
 
-    settings.DEFAULT_FROM_EMAIL = settings.SENTRY_OPTIONS.get('mail.from')
+    settings.DEFAULT_FROM_EMAIL = settings.SENTRY_OPTIONS.get(
+        'mail.from', settings.SENTRY_DEFAULT_OPTIONS.get('mail.from'))
 
 
 def skip_migration_if_applied(settings, app_name, table_name,
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 5f1e96302e..c6531593d9 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -4,6 +4,7 @@ from __future__ import absolute_import
 
 from exam import fixture, around
 from mock import patch
+from django.conf import settings
 
 from sentry.cache.redis import RedisCache
 from sentry.models import Option
@@ -28,10 +29,13 @@ class OptionsManagerTest(TestCase):
 
     @around
     def register(self):
+        default_options = settings.SENTRY_DEFAULT_OPTIONS.copy()
+        settings.SENTRY_DEFAULT_OPTIONS = {}
         self.store.flush_local_cache()
         self.manager.register('foo')
         yield
         self.manager.unregister('foo')
+        settings.SENTRY_DEFAULT_OPTIONS = default_options
 
     def test_simple(self):
         assert self.manager.get('foo') == ''
@@ -105,16 +109,26 @@ class OptionsManagerTest(TestCase):
 
     def test_default(self):
         self.manager.register('awesome', default='lol')
+        assert settings.SENTRY_DEFAULT_OPTIONS['awesome'] == 'lol'
         assert self.manager.get('awesome') == 'lol'
         self.manager.set('awesome', 'bar')
         assert self.manager.get('awesome') == 'bar'
         self.manager.delete('awesome')
         assert self.manager.get('awesome') == 'lol'
         self.manager.register('callback', default=lambda: True)
+        assert settings.SENTRY_DEFAULT_OPTIONS['callback'] is True
         assert self.manager.get('callback') is True
         self.manager.register('default-type', type=Int)
+        assert settings.SENTRY_DEFAULT_OPTIONS['default-type'] == 0
         assert self.manager.get('default-type') == 0
 
+        self.manager.register('some-default')
+        with self.settings(SENTRY_OPTIONS={'some-default': 'foo'}):
+            assert self.manager.get('some-default') == 'foo'
+
+        with self.settings(SENTRY_OPTIONS={}, SENTRY_DEFAULT_OPTIONS={'some-default': 'foo'}):
+            assert self.manager.get('some-default') == 'foo'
+
     def test_flag_immutable(self):
         self.manager.register('immutable', flags=FLAG_IMMUTABLE)
         with self.assertRaises(AssertionError):
diff --git a/tests/sentry/runner/test_initializer.py b/tests/sentry/runner/test_initializer.py
index f6d90456df..bf46bfbd50 100644
--- a/tests/sentry/runner/test_initializer.py
+++ b/tests/sentry/runner/test_initializer.py
@@ -15,6 +15,7 @@ def settings():
     s.ALLOWED_HOSTS = []
     s.SENTRY_FEATURES = {}
     s.SENTRY_OPTIONS = {}
+    s.SENTRY_DEFAULT_OPTIONS = {}
     return s
 
 
