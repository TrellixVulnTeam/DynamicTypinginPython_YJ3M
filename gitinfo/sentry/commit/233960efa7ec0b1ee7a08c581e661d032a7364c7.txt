commit 233960efa7ec0b1ee7a08c581e661d032a7364c7
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Mar 18 16:35:42 2020 -0700

    nodestore: Add flag to upgrade for bootstrapping nodestore

diff --git a/src/sentry/nodestore/base.py b/src/sentry/nodestore/base.py
index d1c55b8045..0b9baf2736 100644
--- a/src/sentry/nodestore/base.py
+++ b/src/sentry/nodestore/base.py
@@ -24,6 +24,7 @@ class NodeStorage(local, Service):
         "generate_id",
         "cleanup",
         "validate",
+        "bootstrap",
         "_get_cache_item",
         "_get_cache_items",
         "_set_cache_item",
@@ -94,6 +95,9 @@ class NodeStorage(local, Service):
     def cleanup(self, cutoff_timestamp):
         raise NotImplementedError
 
+    def bootstrap(self):
+        raise NotImplementedError
+
     def _get_cache_item(self, id):
         if self.cache:
             return self.cache.get(id)
diff --git a/src/sentry/nodestore/bigtable/backend.py b/src/sentry/nodestore/bigtable/backend.py
index b7e1341b0a..261237f8ac 100644
--- a/src/sentry/nodestore/bigtable/backend.py
+++ b/src/sentry/nodestore/bigtable/backend.py
@@ -279,4 +279,8 @@ class BigtableNodeStorage(NodeStorage):
         else:
             gc_rule = None
 
-        table.create(column_families={self.column_family: gc_rule})
+        from google.api_core import exceptions
+        from google.api_core import retry
+
+        retry_504 = retry.Retry(retry.if_exception_type(exceptions.DeadlineExceeded))
+        retry_504(table.create)(column_families={self.column_family: gc_rule})
diff --git a/src/sentry/nodestore/django/backend.py b/src/sentry/nodestore/django/backend.py
index c58d6c37b7..9ac09e60b4 100644
--- a/src/sentry/nodestore/django/backend.py
+++ b/src/sentry/nodestore/django/backend.py
@@ -54,3 +54,7 @@ class DjangoNodeStorage(NodeStorage):
         BulkDeleteQuery(model=Node, dtfield="timestamp", days=days).execute()
         if self.cache:
             self.cache.clear()
+
+    def bootstrap(self):
+        # Nothing for Django backend to do during bootstrap
+        pass
diff --git a/src/sentry/runner/commands/upgrade.py b/src/sentry/runner/commands/upgrade.py
index 13659c39f0..dafbd7e015 100644
--- a/src/sentry/runner/commands/upgrade.py
+++ b/src/sentry/runner/commands/upgrade.py
@@ -114,7 +114,7 @@ def _migrate_from_south(verbosity):
             raise Exception(south_migration_required_error)
 
 
-def _upgrade(interactive, traceback, verbosity, repair):
+def _upgrade(interactive, traceback, verbosity, repair, with_nodestore):
     from django.core.management import call_command as dj_call_command
 
     # migrate legacy south history into new django migrations automatically
@@ -130,6 +130,11 @@ def _upgrade(interactive, traceback, verbosity, repair):
         ignore_ghost_migrations=True,
     )
 
+    if with_nodestore:
+        from sentry import nodestore
+
+        nodestore.bootstrap()
+
     if repair:
         from sentry.runner import call_command
 
@@ -149,9 +154,10 @@ def _upgrade(interactive, traceback, verbosity, repair):
     help="Hold a global lock and limit upgrade to one concurrent.",
 )
 @click.option("--no-repair", default=False, is_flag=True, help="Skip repair step.")
+@click.option("--with-nodestore", default=False, is_flag=True, help="Bootstrap nodestore.")
 @configuration
 @click.pass_context
-def upgrade(ctx, verbosity, traceback, noinput, lock, no_repair):
+def upgrade(ctx, verbosity, traceback, noinput, lock, no_repair, with_nodestore):
     "Perform any pending database migrations and upgrades."
 
     if lock:
@@ -161,8 +167,8 @@ def upgrade(ctx, verbosity, traceback, noinput, lock, no_repair):
         lock = locks.get("upgrade", duration=0)
         try:
             with lock.acquire():
-                _upgrade(not noinput, traceback, verbosity, not no_repair)
+                _upgrade(not noinput, traceback, verbosity, not no_repair, with_nodestore)
         except UnableToAcquireLock:
             raise click.ClickException("Unable to acquire `upgrade` lock.")
     else:
-        _upgrade(not noinput, traceback, verbosity, not no_repair)
+        _upgrade(not noinput, traceback, verbosity, not no_repair, with_nodestore)
