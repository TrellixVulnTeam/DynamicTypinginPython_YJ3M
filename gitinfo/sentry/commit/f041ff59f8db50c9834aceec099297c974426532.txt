commit f041ff59f8db50c9834aceec099297c974426532
Author: evanh <evanh@users.noreply.github.com>
Date:   Mon Feb 24 13:10:26 2020 -0500

    fix(tracing) Fix alias when using default function args (#17249)
    
    Don't use the default function args in the alias so that frontend doesn't
    get confused.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index a63230e1a2..39eaee9ecc 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -1007,6 +1007,7 @@ def resolve_function(field, match=None, params=None):
 
     # Some functions can optionally take no parameters (rpm(), rps()). In that case use the
     # passed in params to create a default argument if necessary.
+    used_default = False
     if len(columns) == 0 and len(function["args"]) == 1:
         try:
             default = function["args"][0].has_default(params)
@@ -1016,6 +1017,7 @@ def resolve_function(field, match=None, params=None):
         if default:
             # Hacky, but we expect column arguments to be strings so easiest to convert it back
             columns = [six.text_type(default)]
+            used_default = True
 
     if len(columns) != len(function["args"]):
         raise InvalidSearchQuery(u"{}: expected {} arguments".format(field, len(function["args"])))
@@ -1030,7 +1032,7 @@ def resolve_function(field, match=None, params=None):
 
     snuba_string = function["transform"].format(**arguments)
 
-    return [], [[snuba_string, None, get_function_alias(function["name"], columns)]]
+    return [], [[snuba_string, None, get_function_alias(function["name"], columns if not used_default else [])]]
 
 
 def resolve_orderby(orderby, fields, aggregations):
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 1bd1849445..350deed20d 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1119,7 +1119,7 @@ class GetSnubaQueryArgsTest(TestCase):
 
     def test_function_with_default_arguments(self):
         result = get_filter("rpm():>100", {"start": before_now(minutes=5), "end": before_now()})
-        assert result.having == [["rpm_300", ">", 100]]
+        assert result.having == [["rpm", ">", 100]]
 
     def test_function_with_alias(self):
         result = get_filter("p95():>100")
@@ -1378,7 +1378,7 @@ class ResolveFieldListTest(unittest.TestCase):
         )
         assert result["selected_columns"] == []
         assert result["aggregations"] == [
-            ["divide(count(), divide(3600, 60))", None, "rpm_3600"],
+            ["divide(count(), divide(3600, 60))", None, "rpm"],
             ["argMax", ["id", "timestamp"], "latest_event"],
             ["argMax", ["project.id", "timestamp"], "projectid"],
         ]
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index b16c9ee901..72a5f81f4d 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -959,9 +959,9 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         assert len(response.data["data"]) == 2
         data = response.data["data"]
         assert data[0]["transaction"] == event1.transaction
-        assert data[0]["rpm_120"] == 0.5
+        assert data[0]["rpm"] == 0.5
         assert data[1]["transaction"] == event2.transaction
-        assert data[1]["rpm_120"] == 0.5
+        assert data[1]["rpm"] == 0.5
 
     def test_nonexistent_fields(self):
         self.login_as(user=self.user)
