commit 7c60c1c462088d83507cf8df623c50cb23909e14
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Sep 19 13:42:46 2019 -0700

    feat(app-platform): enable cors for sentry apps (#14651)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 468cf08e2d..d5a86fb119 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -28,6 +28,7 @@ from sentry.utils.http import absolute_uri, is_valid_origin
 from sentry.utils.audit import create_audit_entry
 from sentry.utils.sdk import capture_exception
 from sentry.utils import json
+from sentry.web.api import allow_cors_options
 
 
 from .authentication import ApiKeyAuthentication, TokenAuthentication
@@ -145,6 +146,7 @@ class Endpoint(APIView):
         return rv
 
     @csrf_exempt
+    @allow_cors_options
     def dispatch(self, request, *args, **kwargs):
         """
         Identical to rest framework's dispatch except we add the ability
diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index 177a2b0514..003001ab72 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -56,6 +56,7 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
                 events=result.get("events"),
                 schema=result.get("schema"),
                 overview=result.get("overview"),
+                allowed_origins=result.get("allowedOrigins"),
             )
 
             return Response(serialize(updated_app, request.user))
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index cf7bdf5976..12b4824099 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -63,6 +63,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             "events": request.json_body.get("events", []),
             "schema": request.json_body.get("schema", {}),
             "overview": request.json_body.get("overview"),
+            "allowedOrigins": request.json_body.get("allowedOrigins", []),
         }
 
         if self._has_hook_events(request) and not features.has(
@@ -85,6 +86,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             data["webhook_url"] = data["webhookUrl"]
             data["is_alertable"] = data["isAlertable"]
             data["verify_install"] = data["verifyInstall"]
+            data["allowed_origins"] = data["allowedOrigins"]
 
             creator = InternalCreator if data.get("isInternal") else Creator
             sentry_app = creator.run(request=request, **data)
diff --git a/src/sentry/api/serializers/models/sentry_app.py b/src/sentry/api/serializers/models/sentry_app.py
index d418d7de12..367552ef21 100644
--- a/src/sentry/api/serializers/models/sentry_app.py
+++ b/src/sentry/api/serializers/models/sentry_app.py
@@ -25,6 +25,7 @@ class SentryAppSerializer(Serializer):
             "isAlertable": obj.is_alertable,
             "verifyInstall": obj.verify_install,
             "overview": obj.overview,
+            "allowedOrigins": obj.application.get_allowed_origins(),
         }
 
         if is_active_superuser(env.request) or (
diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index 141715bcd3..a30f1b9bef 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -6,6 +6,7 @@ from rest_framework import serializers
 from rest_framework.serializers import Serializer, ValidationError
 
 from django.template.defaultfilters import slugify
+from sentry.api.serializers.rest_framework import ListField
 from sentry.api.serializers.rest_framework.base import camel_to_snake_case
 from sentry.api.validators.sentry_apps.schema import validate_ui_element_schema
 from sentry.models import ApiScopes, SentryApp
@@ -77,6 +78,7 @@ class SentryAppSerializer(Serializer):
     isAlertable = serializers.BooleanField(required=False, default=False)
     overview = serializers.CharField(required=False, allow_null=True)
     verifyInstall = serializers.BooleanField(required=False, default=True)
+    allowedOrigins = ListField(child=serializers.CharField(max_length=255), required=False)
 
     # an abstraction to pull fields from attrs if they are available or the sentry_app if not
     def get_current_value_wrapper(self, attrs):
@@ -105,6 +107,12 @@ class SentryAppSerializer(Serializer):
             raise ValidationError(u"Name {} is already taken, please use another.".format(value))
         return value
 
+    def validate_allowedOrigins(self, value):
+        for allowed_origin in value:
+            if "*" in allowed_origin:
+                raise ValidationError("'*' not allowed in origin")
+        return value
+
     def validate(self, attrs):
         # validates events against scopes
         if attrs.get("scopes"):
diff --git a/src/sentry/mediators/sentry_apps/creator.py b/src/sentry/mediators/sentry_apps/creator.py
index d958d288c6..8caac3132f 100644
--- a/src/sentry/mediators/sentry_apps/creator.py
+++ b/src/sentry/mediators/sentry_apps/creator.py
@@ -31,6 +31,7 @@ class Creator(Mediator):
     verify_install = Param(bool, default=True)
     schema = Param(dict, default=lambda self: {})
     overview = Param(six.string_types, required=False)
+    allowed_origins = Param(Iterable, default=lambda self: [])
     request = Param("rest_framework.request.Request", required=False)
     user = Param("sentry.models.User")
 
@@ -46,7 +47,9 @@ class Creator(Mediator):
         return User.objects.create(username=self.name.lower(), is_sentry_app=True)
 
     def _create_api_application(self):
-        return ApiApplication.objects.create(owner_id=self.proxy.id)
+        return ApiApplication.objects.create(
+            owner_id=self.proxy.id, allowed_origins="\n".join(self.allowed_origins)
+        )
 
     def _create_sentry_app(self):
         from sentry.mediators.service_hooks.creator import expand_events
diff --git a/src/sentry/mediators/sentry_apps/internal_creator.py b/src/sentry/mediators/sentry_apps/internal_creator.py
index 8735faf572..325e1adafe 100644
--- a/src/sentry/mediators/sentry_apps/internal_creator.py
+++ b/src/sentry/mediators/sentry_apps/internal_creator.py
@@ -24,6 +24,7 @@ class InternalCreator(Mediator):
     is_alertable = Param(bool, default=False)
     schema = Param(dict, default=lambda self: {})
     overview = Param(six.string_types, required=False)
+    allowed_origins = Param(Iterable, default=lambda self: [])
     request = Param("rest_framework.request.Request", required=False)
     user = Param("sentry.models.User")
 
diff --git a/src/sentry/mediators/sentry_apps/updater.py b/src/sentry/mediators/sentry_apps/updater.py
index 1ca39a282a..3f5c9fdd50 100644
--- a/src/sentry/mediators/sentry_apps/updater.py
+++ b/src/sentry/mediators/sentry_apps/updater.py
@@ -28,6 +28,7 @@ class Updater(Mediator):
     verify_install = Param(bool, required=False)
     schema = Param(dict, required=False)
     overview = Param(six.string_types, required=False)
+    allowed_origins = Param(Iterable, required=False)
     user = Param("sentry.models.User")
 
     def call(self):
@@ -41,6 +42,7 @@ class Updater(Mediator):
         self._update_is_alertable()
         self._update_verify_install()
         self._update_overview()
+        self._update_allowed_origins()
         self._update_schema()
         self._update_service_hooks()
         self.sentry_app.save()
@@ -136,6 +138,11 @@ class Updater(Mediator):
     def _update_overview(self):
         self.sentry_app.overview = self.overview
 
+    @if_param("allowed_origins")
+    def _update_allowed_origins(self):
+        self.sentry_app.application.allowed_origins = "\n".join(self.allowed_origins)
+        self.sentry_app.application.save()
+
     @if_param("schema")
     def _update_schema(self):
         self.sentry_app.schema = self.schema
diff --git a/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx b/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
index ae7c74dc88..116c17c185 100644
--- a/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
+++ b/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import _ from 'lodash';
 
+import {extractMultilineFields} from 'app/utils';
 import {tct} from 'app/locale';
 
 const getPublicFormFields = () => [
@@ -91,6 +92,16 @@ const getPublicFormFields = () => [
     autosize: true,
     help: 'Description of your Integration and its functionality.',
   },
+  {
+    name: 'allowedOrigins',
+    type: 'string',
+    multiline: true,
+    placeholder: 'e.g. example.com',
+    label: 'Authorized JavaScript Origins',
+    help: 'Separate multiple entries with a newline.',
+    getValue: val => extractMultilineFields(val),
+    setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+  },
 ];
 
 export const publicIntegrationForms = [
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 590345ec85..be94f1b04a 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -120,7 +120,8 @@ def allow_cors_options(func):
         response["Allow"] = allow
         response["Access-Control-Allow-Methods"] = allow
         response["Access-Control-Allow-Headers"] = (
-            "X-Sentry-Auth, X-Requested-With, Origin, Accept, " "Content-Type, Authentication"
+            "X-Sentry-Auth, X-Requested-With, Origin, Accept, "
+            "Content-Type, Authentication, Authorization"
         )
         response["Access-Control-Expose-Headers"] = "X-Sentry-Error, Retry-After"
 
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index 4ceca4c390..3eb1ac6caa 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -96,6 +96,7 @@ describe('Sentry Application Details', function() {
         isInternal: false,
         verifyInstall: true,
         isAlertable: true,
+        allowedOrigins: [],
         schema: {},
       };
 
diff --git a/tests/sentry/api/endpoints/test_organization_sentry_apps.py b/tests/sentry/api/endpoints/test_organization_sentry_apps.py
index d65ff76327..b667457cc7 100644
--- a/tests/sentry/api/endpoints/test_organization_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_organization_sentry_apps.py
@@ -51,6 +51,7 @@ class GetOrganizationSentryAppsTest(OrganizationSentryAppsTest):
                     "clientId": self.unpublished_app.application.client_id,
                     "clientSecret": self.unpublished_app.application.client_secret,
                     "overview": self.unpublished_app.overview,
+                    "allowedOrigins": [],
                     "schema": {},
                     "owner": {"id": self.org.id, "slug": self.org.slug},
                 }
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 75c333ebc8..26739ddffa 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -119,6 +119,7 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
             "clientId": self.published_app.application.client_id,
             "clientSecret": self.published_app.application.client_secret,
             "overview": self.published_app.overview,
+            "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
         }
@@ -303,6 +304,22 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
             "webhookUrl": ["webhookUrl required if alert rule action is enabled"]
         }
 
+    def test_set_allowed_origins(self):
+        self.login_as(user=self.user)
+        response = self.client.put(
+            self.url, data={"allowedOrigins": ["google.com", "sentry.io"]}, format="json"
+        )
+        assert response.status_code == 200
+        assert self.published_app.application.get_allowed_origins() == ["google.com", "sentry.io"]
+
+    def test_allowed_origins_with_star(self):
+        self.login_as(user=self.user)
+        response = self.client.put(
+            self.url, data={"allowedOrigins": ["*.google.com"]}, format="json"
+        )
+        assert response.status_code == 400
+        assert response.data == {"allowedOrigins": ["'*' not allowed in origin"]}
+
 
 class DeleteSentryAppDetailsTest(SentryAppDetailsTest):
     def test_delete_unpublished_app(self):
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 6644ce8691..6f5c37d58c 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -10,7 +10,7 @@ from sentry.constants import SentryAppStatus
 from sentry.utils import json
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import with_feature
-from sentry.models import SentryApp, SentryAppInstallationToken, SentryAppInstallation
+from sentry.models import SentryApp, SentryAppInstallationToken, SentryAppInstallation, ApiToken
 
 
 class SentryAppsTest(APITestCase):
@@ -75,6 +75,7 @@ class GetSentryAppsTest(SentryAppsTest):
             "clientId": self.published_app.application.client_id,
             "clientSecret": self.published_app.application.client_secret,
             "overview": self.published_app.overview,
+            "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
         } in json.loads(response.content)
@@ -98,6 +99,7 @@ class GetSentryAppsTest(SentryAppsTest):
             "isAlertable": self.internal_app.is_alertable,
             "verifyInstall": self.internal_app.verify_install,
             "overview": self.internal_app.overview,
+            "allowedOrigins": [],
             "schema": {},
             "clientId": self.internal_app.application.client_id,
             "clientSecret": self.internal_app.application.client_secret,
@@ -133,6 +135,7 @@ class GetSentryAppsTest(SentryAppsTest):
             "isAlertable": self.internal_app.is_alertable,
             "verifyInstall": self.internal_app.verify_install,
             "overview": self.internal_app.overview,
+            "allowedOrigins": [],
             "schema": {},
             "clientId": self.internal_app.application.client_id,
             "clientSecret": self.internal_app.application.client_secret,
@@ -166,6 +169,7 @@ class GetSentryAppsTest(SentryAppsTest):
             "clientId": self.published_app.application.client_id,
             "clientSecret": self.published_app.application.client_secret,
             "overview": self.published_app.overview,
+            "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
         } in json.loads(response.content)
@@ -206,6 +210,7 @@ class GetSentryAppsTest(SentryAppsTest):
             "clientId": self.unpublished_app.application.client_id,
             "clientSecret": self.unpublished_app.application.client_secret,
             "overview": self.unpublished_app.overview,
+            "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
         } in json.loads(response.content)
@@ -436,6 +441,52 @@ class PostSentryAppsTest(SentryAppsTest):
 
         assert response.status_code == 201
 
+    def test_create_integration_with_allowed_origins(self):
+        self.login_as(user=self.user)
+        response = self._post(allowedOrigins=("google.com", "example.com"))
+
+        assert response.status_code == 201
+        sentry_app = SentryApp.objects.get(slug=response.data["slug"])
+        assert sentry_app.application.get_allowed_origins() == ["google.com", "example.com"]
+
+    def test_create_internal_integration_with_allowed_origins_and_test_route(self):
+        self.create_project(organization=self.org)
+        self.login_as(user=self.user)
+        response = self._post(
+            isInternal=True,
+            allowedOrigins=("example.com",),
+            scopes=("project:read", "event:read", "org:read"),
+        )
+
+        assert response.status_code == 201
+        sentry_app = SentryApp.objects.get(slug=response.data["slug"])
+        assert sentry_app.application.get_allowed_origins() == ["example.com"]
+
+        token = ApiToken.objects.get(application=sentry_app.application)
+
+        url = reverse("sentry-api-0-organization-projects", args=[self.org.slug])
+        response = self.client.get(
+            url, HTTP_ORIGIN="http://example.com", HTTP_AUTHORIZATION="Bearer %s" % (token.token)
+        )
+        assert response.status_code == 200
+
+    def test_create_internal_integration_without_allowed_origins_and_test_route(self):
+        self.create_project(organization=self.org)
+        self.login_as(user=self.user)
+        response = self._post(isInternal=True, scopes=("project:read", "event:read", "org:read"))
+
+        assert response.status_code == 201
+        sentry_app = SentryApp.objects.get(slug=response.data["slug"])
+        assert sentry_app.application.get_allowed_origins() == []
+
+        token = ApiToken.objects.get(application=sentry_app.application)
+
+        url = reverse("sentry-api-0-organization-projects", args=[self.org.slug])
+        response = self.client.get(
+            url, HTTP_ORIGIN="http://example.com", HTTP_AUTHORIZATION="Bearer %s" % (token.token)
+        )
+        assert response.status_code == 400
+
     def _post(self, **kwargs):
         body = {
             "name": "MyApp",
