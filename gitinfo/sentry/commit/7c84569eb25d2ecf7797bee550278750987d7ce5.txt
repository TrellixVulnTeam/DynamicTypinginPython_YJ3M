commit 7c84569eb25d2ecf7797bee550278750987d7ce5
Author: Mark Story <mark@mark-story.com>
Date:   Thu Oct 18 17:25:56 2018 +0000

    feat(gitlab) Implement compare_commits for Gitlab (#10149)
    
    This enables gitlab repositories to have commits, and changed files
    recorded when releases are created. This should grease the wheels for
    automatic issue resolution and suspect commit detection machinery as
    well.
    
    Fixes APP-496

diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index f93d8d3f39..023eceba24 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -11,6 +11,10 @@ API_VERSION = u'/api/v4'
 
 
 class GitLabApiClientPath(object):
+    commit = u'/projects/{project}/repository/commits/{sha}'
+    commits = u'/projects/{project}/repository/commits'
+    compare = u'/projects/{project}/repository/compare'
+    diff = u'/projects/{project}/repository/commits/{sha}/diff'
     group = u'/groups/{group}'
     group_projects = u'/groups/{group}/projects'
     hooks = u'/hooks'
@@ -95,9 +99,17 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
         )
 
     def get_user(self):
+        """Get a user
+
+        See https://docs.gitlab.com/ee/api/users.html#single-user
+        """
         return self.get(GitLabApiClientPath.user)
 
     def get_group_projects(self, group, query=None, simple=True):
+        """Get projects for a group
+
+        See https://docs.gitlab.com/ee/api/groups.html#list-a-group-s-projects
+        """
         # simple param returns limited fields for the project.
         # Really useful, because we often don't need most of the project information
         return self.get(
@@ -111,11 +123,19 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
         )
 
     def get_project(self, project_id):
+        """Get project
+
+        See https://docs.gitlab.com/ee/api/projects.html#get-single-project
+        """
         return self.get(
             GitLabApiClientPath.project.format(project=project_id)
         )
 
     def get_projects(self, query, simple=True):
+        """Get project list
+
+        See https://docs.gitlab.com/ee/api/projects.html#list-all-projects
+        """
         # simple param returns limited fields for the project.
         # Really useful, because we often don't need most of the project information
         return self.get(
@@ -127,6 +147,10 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
         )
 
     def get_issue(self, project_id, issue_id):
+        """Get an issue
+
+        See https://docs.gitlab.com/ee/api/issues.html#single-issue
+        """
         try:
             return self.get(
                 GitLabApiClientPath.issue.format(project=project_id, issue=issue_id)
@@ -135,6 +159,10 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
             raise ApiError('Issue not found with ID', 404)
 
     def create_issue(self, project, data):
+        """Create an issue
+
+        See https://docs.gitlab.com/ee/api/issues.html#new-issue
+        """
         return self.post(
             GitLabApiClientPath.issues.format(project=project),
             data=data,
@@ -150,17 +178,29 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
         )
 
     def create_note(self, project_id, issue_iid, data):
+        """Create an issue note
+
+        See https://docs.gitlab.com/ee/api/notes.html#create-new-issue-note
+        """
         return self.post(
             GitLabApiClientPath.notes.format(project=project_id, issue=issue_iid),
             data=data,
         )
 
     def list_project_members(self, project_id):
+        """Get project members
+
+        See https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project
+        """
         return self.get(
             GitLabApiClientPath.members.format(project=project_id)
         )
 
     def create_project_webhook(self, project_id):
+        """Create a webhook on a project
+
+        See https://docs.gitlab.com/ee/api/projects.html#add-project-hook
+        """
         path = GitLabApiClientPath.project_hooks.format(project=project_id)
         hook_uri = reverse('sentry-extensions-gitlab-webhook')
         model = self.installation.model
@@ -176,5 +216,46 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
         return resp['id']
 
     def delete_project_webhook(self, project_id, hook_id):
+        """Delete a webhook from a project
+
+        See https://docs.gitlab.com/ee/api/projects.html#delete-project-hook
+        """
         path = GitLabApiClientPath.project_hook.format(project=project_id, hook_id=hook_id)
         return self.delete(path)
+
+    def get_last_commits(self, project_id, end_sha):
+        """Get the last set of commits ending at end_sha
+
+        Gitlab doesn't give us a good way to do this, so we fetch the end_sha
+        and use its date to find the block of commits. We only fetch one page
+        of commits to match other implementations (github, bitbucket)
+
+        See https://docs.gitlab.com/ee/api/commits.html#get-the-diff-of-a-commit
+        """
+        path = GitLabApiClientPath.commit.format(project=project_id, sha=end_sha)
+        commit = self.get(path)
+        if not commit:
+            return []
+        end_date = commit['created_at']
+
+        path = GitLabApiClientPath.commits.format(project=project_id)
+        return self.get(path, params={'until': end_date})
+
+    def compare_commits(self, project_id, start_sha, end_sha):
+        """Compare commits between two shas
+
+        See https://docs.gitlab.com/ee/api/repositories.html#compare-branches-tags-or-commits
+        """
+        path = GitLabApiClientPath.compare.format(project=project_id)
+        return self.get(path, params={'from': start_sha, 'to': end_sha})
+
+    def get_diff(self, project_id, sha):
+        """Get the diff for a commit
+
+        See https://docs.gitlab.com/ee/api/commits.html#get-the-diff-of-a-commit
+        """
+        path = GitLabApiClientPath.diff.format(
+            project=project_id,
+            sha=sha
+        )
+        return self.get(path)
diff --git a/src/sentry/integrations/gitlab/issues.py b/src/sentry/integrations/gitlab/issues.py
index 005626d2d4..5c90ddddb5 100644
--- a/src/sentry/integrations/gitlab/issues.py
+++ b/src/sentry/integrations/gitlab/issues.py
@@ -39,6 +39,7 @@ class GitlabIssueBasic(IssueBasicMixin):
                 'url': autocomplete_url,
                 'updatesForm': True,
                 'required': True,
+                'choices': [],
             }
         ] + fields
 
diff --git a/src/sentry/integrations/gitlab/repository.py b/src/sentry/integrations/gitlab/repository.py
index 9111453625..9a4fb4bb9b 100644
--- a/src/sentry/integrations/gitlab/repository.py
+++ b/src/sentry/integrations/gitlab/repository.py
@@ -1,5 +1,9 @@
 from __future__ import absolute_import
 
+import dateutil.parser
+
+from django.utils import timezone
+
 from sentry.integrations.exceptions import ApiError
 from sentry.plugins import providers
 from sentry.models import Integration
@@ -78,3 +82,72 @@ class GitlabRepositoryProvider(providers.IntegrationRepositoryProvider):
             if e.code == 404:
                 return
             installation.raise_error(e)
+
+    def compare_commits(self, repo, start_sha, end_sha):
+        """Fetch the commit list and diffed files between two shas"""
+        installation = self.get_installation(repo.integration_id,
+                                             repo.organization_id)
+        client = installation.get_client()
+        try:
+            if start_sha is None:
+                res = client.get_last_commits(repo.config['project_id'], end_sha)
+                return self._format_commits(client, repo, res)
+            else:
+                res = client.compare_commits(repo.config['project_id'], start_sha, end_sha)
+                return self._format_commits(client, repo, res['commits'])
+        except Exception as e:
+            installation.raise_error(e)
+
+    def _format_commits(self, client, repo, commit_list):
+        """Convert GitLab commits into our internal format
+        """
+        return [
+            {
+                'id': c['id'],
+                'repository': repo.name,
+                'author_email': c['author_email'],
+                'author_name': c['author_name'],
+                'message': c['title'],
+                'timestamp': dateutil.parser.parse(
+                    c['created_at'],
+                ).astimezone(timezone.utc) if c['created_at'] else None,
+                'patch_set': self._get_patchset(client, repo, c['id'])
+            } for c in commit_list
+        ]
+
+    def _get_patchset(self, client, repo, sha):
+        """GitLab commit lists don't come with diffs so we have
+        to make additional round trips.
+        """
+        diffs = client.get_diff(repo.config['project_id'], sha)
+        return self._transform_patchset(diffs)
+
+    def _transform_patchset(self, patch_set):
+        file_changes = []
+        for changed_file in patch_set:
+            if changed_file['new_file']:
+                file_changes.append({
+                    'path': changed_file['new_path'],
+                    'type': 'A',
+                })
+            elif changed_file['deleted_file']:
+                file_changes.append({
+                    'path': changed_file['old_path'],
+                    'type': 'D',
+                })
+            elif changed_file['renamed_file']:
+                file_changes.append({
+                    'path': changed_file['old_path'],
+                    'type': 'D',
+                })
+                file_changes.append({
+                    'path': changed_file['new_path'],
+                    'type': 'A',
+                })
+            else:
+                file_changes.append({
+                    'path': changed_file['new_path'],
+                    'type': 'M',
+                })
+
+        return file_changes
diff --git a/src/sentry/integrations/gitlab/webhooks.py b/src/sentry/integrations/gitlab/webhooks.py
index 5aafd3eb87..13cb966950 100644
--- a/src/sentry/integrations/gitlab/webhooks.py
+++ b/src/sentry/integrations/gitlab/webhooks.py
@@ -54,6 +54,12 @@ class Webhook(object):
 
 
 class MergeEventWebhook(Webhook):
+    """
+    Handle Merge Request Hook
+
+    See https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#merge-request-events
+    """
+
     def __call__(self, integration, organization, event):
         repo = self.get_repo(integration, organization, event)
         if repo is None:
@@ -102,6 +108,12 @@ class MergeEventWebhook(Webhook):
 
 
 class PushEventWebhook(Webhook):
+    """
+    Handle push hook
+
+    See https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#push-events
+    """
+
     def __call__(self, integration, organization, event):
         repo = self.get_repo(integration, organization, event)
         if repo is None:
diff --git a/tests/sentry/integrations/gitlab/test_issues.py b/tests/sentry/integrations/gitlab/test_issues.py
index 749c8030a5..704d62368d 100644
--- a/tests/sentry/integrations/gitlab/test_issues.py
+++ b/tests/sentry/integrations/gitlab/test_issues.py
@@ -45,7 +45,8 @@ class GitlabIssuesTest(GitLabTestCase):
                 'name': 'project',
                 'required': True,
                 'type': 'select',
-                'label': 'Gitlab Project'
+                'label': 'Gitlab Project',
+                'choices': [],
             },
             {
                 'name': 'title',
diff --git a/tests/sentry/integrations/gitlab/test_repository.py b/tests/sentry/integrations/gitlab/test_repository.py
index 2fa1e945c6..769f5c8364 100644
--- a/tests/sentry/integrations/gitlab/test_repository.py
+++ b/tests/sentry/integrations/gitlab/test_repository.py
@@ -1,16 +1,31 @@
 from __future__ import absolute_import
 
 import responses
+import pytest
 
 from exam import fixture
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import Identity, IdentityProvider, Integration, Repository
+from sentry.integrations.exceptions import IntegrationError
+from sentry.integrations.gitlab.repository import GitlabRepositoryProvider
+from sentry.models import (
+    Identity,
+    IdentityProvider,
+    Integration,
+    Repository,
+    CommitFileChange
+)
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from sentry.integrations.gitlab.repository import GitlabRepositoryProvider
+from .testutils import (
+    COMPARE_RESPONSE,
+    COMMIT_LIST_RESPONSE,
+    COMMIT_DIFF_RESPONSE
+)
+
+commit_file_type_choices = {c[0] for c in CommitFileChange._meta.get_field('type').choices}
 
 
 class GitLabRepositoryProviderTest(PluginTestCase):
@@ -51,7 +66,7 @@ class GitLabRepositoryProviderTest(PluginTestCase):
             'path_with_namespace': 'getsentry/example-repo',
             'name_with_namespace': 'Get Sentry / Example Repo',
             'path': 'example-repo',
-            'id': 123,
+            'id': '123',
             'web_url': 'https://example.gitlab.com/getsentry/projects/example-repo',
         }
         self.gitlab_id = 123
@@ -203,3 +218,98 @@ class GitLabRepositoryProviderTest(PluginTestCase):
         repo = Repository.objects.get(pk=response.data['id'])
         self.provider.on_delete_repository(repo)
         assert len(responses.calls) == 1
+
+    @responses.activate
+    def test_compare_commits_start_and_end(self):
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/compare?from=abc&to=xyz' % self.gitlab_id,
+            json=json.loads(COMPARE_RESPONSE)
+        )
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/commits/12d65c8dd2b2676fa3ac47d955accc085a37a9c1/diff' % self.gitlab_id,
+            json=json.loads(COMMIT_DIFF_RESPONSE)
+        )
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/commits/8b090c1b79a14f2bd9e8a738f717824ff53aebad/diff' % self.gitlab_id,
+            json=json.loads(COMMIT_DIFF_RESPONSE)
+        )
+        response = self.create_repository(self.default_repository_config,
+                                          self.integration.id)
+        repo = Repository.objects.get(pk=response.data['id'])
+        commits = self.provider.compare_commits(repo, 'abc', 'xyz')
+        assert 2 == len(commits)
+        for commit in commits:
+            assert_commit_shape(commit)
+
+    @responses.activate
+    def test_compare_commits_start_and_end_gitlab_failure(self):
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/compare?from=abc&to=xyz' % self.gitlab_id,
+            status=502
+        )
+        response = self.create_repository(self.default_repository_config,
+                                          self.integration.id)
+        repo = Repository.objects.get(pk=response.data['id'])
+        with pytest.raises(IntegrationError):
+            self.provider.compare_commits(repo, 'abc', 'xyz')
+
+    @responses.activate
+    def test_compare_commits_no_start(self):
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/commits/xyz' % self.gitlab_id,
+            json={'created_at': '2018-09-19T13:14:15Z'}
+        )
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/commits?until=2018-09-19T13:14:15Z' % self.gitlab_id,
+            json=json.loads(COMMIT_LIST_RESPONSE)
+        )
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/commits/ed899a2f4b50b4370feeea94676502b42383c746/diff' % self.gitlab_id,
+            json=json.loads(COMMIT_DIFF_RESPONSE)
+        )
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/commits/6104942438c14ec7bd21c6cd5bd995272b3faff6/diff' % self.gitlab_id,
+            json=json.loads(COMMIT_DIFF_RESPONSE)
+        )
+
+        response = self.create_repository(self.default_repository_config,
+                                          self.integration.id)
+        repo = Repository.objects.get(pk=response.data['id'])
+        commits = self.provider.compare_commits(repo, None, 'xyz')
+        for commit in commits:
+            assert_commit_shape(commit)
+
+    @responses.activate
+    def test_compare_commits_no_start_gitlab_failure(self):
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/%s/repository/commits/abc' % self.gitlab_id,
+            status=502
+        )
+        response = self.create_repository(self.default_repository_config,
+                                          self.integration.id)
+        repo = Repository.objects.get(pk=response.data['id'])
+        with pytest.raises(IntegrationError):
+            self.provider.compare_commits(repo, None, 'abc')
+
+
+def assert_commit_shape(commit):
+    assert commit['id']
+    assert commit['repository']
+    assert commit['author_email']
+    assert commit['author_name']
+    assert commit['message']
+    assert commit['timestamp']
+    assert commit['patch_set']
+    patches = commit['patch_set']
+    for patch in patches:
+        assert patch['type'] in commit_file_type_choices
+        assert patch['path']
diff --git a/tests/sentry/integrations/gitlab/testutils.py b/tests/sentry/integrations/gitlab/testutils.py
index a417465de1..444359cbdf 100644
--- a/tests/sentry/integrations/gitlab/testutils.py
+++ b/tests/sentry/integrations/gitlab/testutils.py
@@ -306,3 +306,106 @@ PUSH_EVENT_IGNORED_COMMIT = b"""
   "total_commits_count": 1
 }
 """
+
+
+COMPARE_RESPONSE = r"""
+{
+  "commit": {
+    "id": "12d65c8dd2b2676fa3ac47d955accc085a37a9c1",
+    "short_id": "12d65c8dd2b",
+    "title": "JS fix",
+    "author_name": "Dmitriy",
+    "author_email": "dmitriy@example.com",
+    "created_at": "2014-02-27T10:27:00+02:00"
+  },
+  "commits": [{
+    "id": "12d65c8dd2b2676fa3ac47d955accc085a37a9c1",
+    "short_id": "12d65c8dd2b",
+    "title": "JS fix",
+    "author_name": "Dmitriy",
+    "author_email": "dmitriy@example.com",
+    "created_at": "2014-02-27T10:27:00+02:00"
+  },
+  {
+    "id": "8b090c1b79a14f2bd9e8a738f717824ff53aebad",
+    "short_id": "8b090c1b",
+    "title": "Fix dmitriy mistake",
+    "author_name": "Sally",
+    "author_email": "sally@example.com",
+    "created_at": "2014-02-27T10:27:00+02:00"
+  }],
+  "diffs": [{
+    "old_path": "files/js/application.js",
+    "new_path": "files/js/application.js",
+    "a_mode": null,
+    "b_mode": "100644",
+    "diff": "--- a/files/js/application.js\n+++ b/files/js/application.js\n@@ -24,8 +24,10 @@\n //= require g.raphael-min\n //= require g.bar-min\n //= require branch-graph\n-//= require highlightjs.min\n-//= require ace/ace\n //= require_tree .\n //= require d3\n //= require underscore\n+\n+function fix() { \n+  alert(\"Fixed\")\n+}",
+    "new_file": false,
+    "renamed_file": false,
+    "deleted_file": false
+  }],
+  "compare_timeout": false,
+  "compare_same_ref": false
+}
+"""
+
+
+COMMIT_LIST_RESPONSE = r"""
+[
+  {
+    "id": "ed899a2f4b50b4370feeea94676502b42383c746",
+    "short_id": "ed899a2f4b5",
+    "title": "Replace sanitize with escape once",
+    "author_name": "Dmitriy",
+    "author_email": "dmitriy@example.com",
+    "authored_date": "2018-09-20T11:50:22+03:00",
+    "committer_name": "Administrator",
+    "committer_email": "admin@example.com",
+    "committed_date": "2018-09-20T11:50:22+03:00",
+    "created_at": "2018-09-20T11:50:22+03:00",
+    "message": "Replace sanitize with escape once",
+    "parent_ids": [
+      "6104942438c14ec7bd21c6cd5bd995272b3faff6"
+    ]
+  },
+  {
+    "id": "6104942438c14ec7bd21c6cd5bd995272b3faff6",
+    "short_id": "6104942438c",
+    "title": "Sanitize for network graph",
+    "author_name": "randx",
+    "author_email": "dmitriy@example.com",
+    "committer_name": "Dmitriy",
+    "committer_email": "dmitriy@example.com",
+    "created_at": "2018-09-20T09:06:12+03:00",
+    "message": "Sanitize for network graph",
+    "parent_ids": [
+      "ae1d9fb46aa2b07ee9836d49862ec4e2c46fbbba"
+    ]
+  }
+]
+"""
+
+COMMIT_DIFF_RESPONSE = r"""
+[
+    {
+        "old_path": "files/js/application.js",
+        "new_path": "files/js/application.js",
+        "a_mode": null,
+        "b_mode": "100644",
+        "diff": "--- a/files/js/application.js\n+++ b/files/js/application.js\n@@ -24,8 +24,10 @@\n //= require g.raphael-min\n //= require g.bar-min\n //= require branch-graph\n-//= require highlightjs.min\n-//= require ace/ace\n //= require_tree .\n //= require d3\n //= require underscore\n+\n+function fix() { \n+  alert(\"Fixed\")\n+}",
+        "new_file": false,
+        "renamed_file": false,
+        "deleted_file": false
+    },
+    {
+        "a_mode": "100644",
+        "b_mode": "100644",
+        "deleted_file": false,
+        "diff": "@@ -1 +1,3 @@\n OH HAI\n+OH HAI\n+OH HAI\n",
+        "new_file": false,
+        "new_path": "README.txt",
+        "old_path": "README.txt",
+        "renamed_file": false
+    }
+]
+"""
