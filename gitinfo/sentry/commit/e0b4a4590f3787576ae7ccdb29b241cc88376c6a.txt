commit e0b4a4590f3787576ae7ccdb29b241cc88376c6a
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Thu Aug 23 13:20:53 2018 -0700

    ref(integrations): Autocomplete search for issues and repos GH (#9413)
    
    * ref(integrations): Autocomplete search for issues and repos GH

diff --git a/src/sentry/api/endpoints/organization_integration_repos.py b/src/sentry/api/endpoints/organization_integration_repos.py
index ac6573d639..c2f5c3b784 100644
--- a/src/sentry/api/endpoints/organization_integration_repos.py
+++ b/src/sentry/api/endpoints/organization_integration_repos.py
@@ -26,13 +26,14 @@ class OrganizationIntegrationReposEndpoint(OrganizationEndpoint):
             return self.respond(context)
 
         install = integration.get_installation(organization.id)
+
         if isinstance(install, RepositoryMixin):
             try:
-                repositories = install.get_repositories()
+                repositories = install.get_repositories(request.GET.get('search'))
             except IntegrationError as e:
                 return self.respond({'detail': e.message}, status=400)
 
-            context = {'repos': repositories}
+            context = {'repos': repositories, 'searchable': install.repo_search}
             return self.respond(context)
 
         return self.respond({'detail': 'Repositories not supported'}, status=400)
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index 4c0f9c4aec..f9a6e0f779 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -51,7 +51,7 @@ class BitbucketIntegration(Integration, BitbucketIssueBasicMixin, RepositoryMixi
     def username(self):
         return self.model.name
 
-    def get_repositories(self):
+    def get_repositories(self, query=None):
         repos = self.get_client().get_repos(self.username)['values']
         data = []
         for repo in repos:
diff --git a/src/sentry/integrations/github/client.py b/src/sentry/integrations/github/client.py
index 6d5eb59b20..278eff3db6 100644
--- a/src/sentry/integrations/github/client.py
+++ b/src/sentry/integrations/github/client.py
@@ -55,12 +55,24 @@ class GitHubClientMixin(ApiClient):
         )
         return repositories['repositories']
 
+    def search_repositories(self, query):
+        return self.get(
+            '/search/repositories',
+            params={'q': query},
+        )
+
     def get_assignees(self, repo):
         return self.get('/repos/{}/assignees'.format(repo))
 
     def get_issues(self, repo):
         return self.get('/repos/{}/issues'.format(repo))
 
+    def search_issues(self, query):
+        return self.get(
+            '/search/issues',
+            params={'q': query},
+        )
+
     def get_issue(self, repo, number):
         return self.get('/repos/{}/issues/{}'.format(repo, number))
 
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index a49552ce14..f75f06369a 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -69,15 +69,28 @@ API_ERRORS = {
 
 
 class GitHubIntegration(Integration, GitHubIssueBasic, RepositoryMixin):
+    repo_search = True
 
     def get_client(self):
         return GitHubAppsClient(integration=self.model)
 
-    def get_repositories(self):
-        data = []
-        for repo in self.get_client().get_repositories():
-            data.append({'name': repo['name'], 'identifier': repo['full_name']})
-        return data
+    def get_repositories(self, query=None):
+        if not query:
+            return [{
+                'name': i['name'],
+                'identifier': i['full_name']
+            } for i in self.get_client().get_repositories()]
+
+        account_type = 'user' if self.model.metadata['account_type'] == 'User' else 'org'
+        full_query = (u'%s:%s %s' % (account_type, self.model.name, query)).encode('utf-8')
+        response = self.get_client().search_repositories(full_query)
+        return [{
+            'name': i['name'],
+            'identifier': i['full_name']
+        } for i in response.get('items', [])]
+
+    def search_issues(self, query):
+        return self.get_client().search_issues(query)
 
     def get_unmigratable_repositories(self):
         accessible_repos = self.get_repositories()
diff --git a/src/sentry/integrations/github/issues.py b/src/sentry/integrations/github/issues.py
index 6d1ef5b15e..1177096506 100644
--- a/src/sentry/integrations/github/issues.py
+++ b/src/sentry/integrations/github/issues.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from django.core.urlresolvers import reverse
 from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.integrations.issues import IssueBasicMixin
 from sentry.utils.http import absolute_uri
@@ -51,13 +52,19 @@ class GitHubIssueBasic(IssueBasicMixin):
         default_repo = params.get('repo', repo_choices[0][0])
         assignees = self.get_allowed_assignees(default_repo)
 
+        org = group.organization
+        autocomplete_url = reverse(
+            'sentry-extensions-github-search', args=[org.slug, self.model.id],
+        )
+
         return [
             {
                 'name': 'repo',
                 'label': 'GitHub Repository',
                 'type': 'select',
                 'default': default_repo,
-                'choices': repo_choices,
+                'defaultLabel': default_repo.split('/')[1],
+                'url': autocomplete_url,
                 'updatesForm': True,
                 'required': True,
             }
@@ -109,7 +116,11 @@ class GitHubIssueBasic(IssueBasicMixin):
 
         params = kwargs.get('params', {})
         default_repo = params.get('repo', repo_choices[0][0])
-        issues = self.get_repo_issues(default_repo)
+
+        org = group.organization
+        autocomplete_url = reverse(
+            'sentry-extensions-github-search', args=[org.slug, self.model.id],
+        )
 
         return [
             {
@@ -117,7 +128,8 @@ class GitHubIssueBasic(IssueBasicMixin):
                 'label': 'GitHub Repository',
                 'type': 'select',
                 'default': default_repo,
-                'choices': repo_choices,
+                'defaultLabel': default_repo.split('/')[1],
+                'url': autocomplete_url,
                 'required': True,
                 'updatesForm': True,
             },
@@ -126,7 +138,7 @@ class GitHubIssueBasic(IssueBasicMixin):
                 'label': 'Issue',
                 'default': '',
                 'type': 'select',
-                'choices': issues,
+                'url': autocomplete_url,
                 'required': True,
             },
             {
diff --git a/src/sentry/integrations/github/search.py b/src/sentry/integrations/github/search.py
new file mode 100644
index 0000000000..8028ed05b5
--- /dev/null
+++ b/src/sentry/integrations/github/search.py
@@ -0,0 +1,60 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationPermission
+from sentry.models import Integration
+
+
+class GitHubSearchEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationPermission, )
+
+    def get(self, request, organization, integration_id):
+        try:
+            integration = Integration.objects.get(
+                organizations=organization,
+                id=integration_id,
+                provider='github',
+            )
+        except Integration.DoesNotExist:
+            return Response(status=404)
+
+        field = request.GET.get('field')
+        query = request.GET.get('query')
+        if field is None:
+            return Response({'detail': 'field is a required parameter'}, status=400)
+        if not query:
+            return Response({'detail': 'query is a required parameter'}, status=400)
+
+        installation = integration.get_installation(organization.id)
+        if field == 'externalIssue':
+            repo = request.GET.get('repo')
+            if repo is None:
+                return Response({'detail': 'repo is a required parameter'}, status=400)
+
+            try:
+                response = installation.search_issues(
+                    query=(u'repo:%s %s' % (repo, query)).encode('utf-8'),
+                )
+            except Exception as e:
+                return self.handle_api_error(e)
+
+            return Response([{
+                'label': '#%s %s' % (i['number'], i['title']),
+                'value': i['number']
+            } for i in response.get('items', [])])
+
+        if field == 'repo':
+            account_type = 'user' if self.model.metadata['account_type'] == 'User' else 'org'
+            full_query = (u'%s:%s %s' % (account_type, self.model.name, query)).encode('utf-8')
+            try:
+                response = installation.get_client().search_repositories(full_query)
+            except Exception as e:
+                return self.handle_api_error(e)
+
+            return Response([{
+                'label': i['name'],
+                'value': i['full_name']
+            } for i in response.get('items', [])])
+
+        return Response(status=400)
diff --git a/src/sentry/integrations/github/urls.py b/src/sentry/integrations/github/urls.py
index b51cbae85e..d4153c6b2b 100644
--- a/src/sentry/integrations/github/urls.py
+++ b/src/sentry/integrations/github/urls.py
@@ -3,8 +3,13 @@ from __future__ import absolute_import, print_function
 from django.conf.urls import patterns, url
 
 from .webhook import GitHubIntegrationsWebhookEndpoint
+from .search import GitHubSearchEndpoint
 
 urlpatterns = patterns(
     '',
     url(r'^webhook/$', GitHubIntegrationsWebhookEndpoint.as_view()),
+    url(r'^search/(?P<organization_slug>[^\/]+)/(?P<integration_id>\d+)/$',
+        GitHubSearchEndpoint.as_view(),
+        name='sentry-extensions-github-search'
+        ),
 )
diff --git a/src/sentry/integrations/github_enterprise/integration.py b/src/sentry/integrations/github_enterprise/integration.py
index 53da3aab36..b31346ba06 100644
--- a/src/sentry/integrations/github_enterprise/integration.py
+++ b/src/sentry/integrations/github_enterprise/integration.py
@@ -91,7 +91,7 @@ class GitHubEnterpriseIntegration(Integration, GitHubIssueBasic, RepositoryMixin
             app_id=self.model.metadata['installation']['id'],
         )
 
-    def get_repositories(self):
+    def get_repositories(self, query=None):
         data = []
         for repo in self.get_client().get_repositories():
             data.append({'name': repo['name'], 'identifier': repo['full_name']})
diff --git a/src/sentry/integrations/repositories.py b/src/sentry/integrations/repositories.py
index 36b05b5bea..dd2692e904 100644
--- a/src/sentry/integrations/repositories.py
+++ b/src/sentry/integrations/repositories.py
@@ -5,8 +5,11 @@ from sentry.models import Repository
 
 
 class RepositoryMixin(object):
+    # whether or not integration has the ability to search through Repositories
+    # dynamically given a search query
+    repo_search = False
 
-    def get_repositories(self):
+    def get_repositories(self, query=None):
         """
         Get a list of availble repositories for an installation
 
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index d4a4b37835..9b595ceca9 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -58,7 +58,7 @@ class VstsIntegration(Integration, RepositoryMixin, VstsIssueSync):
     def reinstall(self):
         self.reinstall_repositories()
 
-    def get_repositories(self):
+    def get_repositories(self, query=None):
         try:
             repos = self.get_client().get_repos(self.instance)
         except ApiError as e:
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
index 4391c968c3..39d13545e3 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
@@ -100,7 +100,12 @@ class ExternalIssueForm extends AsyncComponent {
   };
 
   getOptions = (field, input) => {
-    if (!input) return Promise.resolve([]);
+    if (!input && field.default && field.defaultLabel) {
+      return Promise.resolve({options: [{value: field.default, label: field.defaultLabel}]});
+    }
+    if (!input) {
+      return Promise.resolve([]);
+    }
 
     let query = queryString.stringify({
       ...this.state.dynamicFieldValues,
@@ -130,7 +135,7 @@ class ExternalIssueForm extends AsyncComponent {
           onSelectResetsInput: false,
           onCloseResetsInput: false,
           onBlurResetsInput: false,
-          autoload: false,
+          autoload: true,
         }
       : {};
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
index 9a454d7e1d..3c710df368 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
@@ -1,5 +1,6 @@
 import {Box, Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
+import {debounce} from 'lodash';
 import React from 'react';
 import styled from 'react-emotion';
 
@@ -26,7 +27,13 @@ export default class IntegrationRepos extends AsyncComponent {
 
   constructor(props, context) {
     super(props, context);
-    this.state = {error: false, adding: false, itemList: [], errors: {}};
+    this.state = {
+      error: false,
+      adding: false,
+      itemList: [],
+      dropdownBusy: false,
+      errors: {},
+    };
   }
 
   getEndpoints() {
@@ -46,6 +53,33 @@ export default class IntegrationRepos extends AsyncComponent {
     return this.state.itemList.filter(repo => repo.integrationId === integrationId);
   }
 
+  debouncedSearchRepositoriesRequest = debounce(
+    query => this.searchRepositoriesRequest(query),
+    200
+  );
+
+  searchRepositoriesRequest = searchQuery => {
+    let orgId = this.context.organization.slug;
+    let query = {search: searchQuery};
+    let endpoint = `/organizations/${orgId}/integrations/${this.props.integration
+      .id}/repos/`;
+    return this.api.request(endpoint, {
+      method: 'GET',
+      query,
+      success: data => {
+        this.setState({integrationRepos: data, dropdownBusy: false});
+      },
+      error: error => {
+        this.setState({dropdownBusy: false});
+      },
+    });
+  };
+
+  handleSearchRepositories = e => {
+    this.setState({dropdownBusy: true});
+    this.debouncedSearchRepositoriesRequest(e.target.value);
+  };
+
   getStatusLabel(repo) {
     switch (repo.status) {
       case 'pending_deletion':
@@ -162,11 +196,15 @@ export default class IntegrationRepos extends AsyncComponent {
     });
 
     let menuHeader = <StyledReposLabel>{t('Repositories')}</StyledReposLabel>;
+    let onChange = this.state.integrationRepos.searchable
+      ? this.handleSearchRepositories
+      : null;
 
     return (
       <DropdownAutoComplete
         items={items}
         onSelect={this.addRepo.bind(this)}
+        onChange={onChange}
         menuHeader={menuHeader}
         emptyMessage={t('No repositories available')}
       >
diff --git a/tests/sentry/api/endpoints/test_organization_integration_repos.py b/tests/sentry/api/endpoints/test_organization_integration_repos.py
index bfc9f5a10c..40b4a32a43 100644
--- a/tests/sentry/api/endpoints/test_organization_integration_repos.py
+++ b/tests/sentry/api/endpoints/test_organization_integration_repos.py
@@ -26,8 +26,9 @@ class OrganizationIntegrationReposTest(APITestCase):
         response = self.client.get(self.path, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data == {"repos": [{'name': 'rad-repo', 'identifier': 'Example/rad-repo'},
-                                           {'name': 'cool-repo', 'identifier': 'Example/cool-repo'}]}
+        assert response.data == {'repos': [{'name': 'rad-repo', 'identifier': 'Example/rad-repo'},
+                                           {'name': 'cool-repo', 'identifier': 'Example/cool-repo'}],
+                                 'searchable': True}
 
     def test_no_repository_method(self):
         integration = Integration.objects.create(
