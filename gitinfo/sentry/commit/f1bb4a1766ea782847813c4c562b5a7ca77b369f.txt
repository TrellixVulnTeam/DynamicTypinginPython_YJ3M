commit f1bb4a1766ea782847813c4c562b5a7ca77b369f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Feb 7 11:57:09 2017 -0800

    api: limit group queries to a max of 100 results

diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index 3e0bd5e802..0f7ca8ad1d 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -19,12 +19,13 @@ quote_name = connections['default'].ops.quote_name
 
 
 class BasePaginator(object):
-    def __init__(self, queryset, order_by):
+    def __init__(self, queryset, order_by, max_limit=100):
         if order_by.startswith('-'):
             self.key, self.desc = order_by[1:], True
         else:
             self.key, self.desc = order_by, False
         self.queryset = queryset
+        self.max_limit = max_limit
 
     def _build_queryset(self, value, is_prev):
         queryset = self.queryset
@@ -87,6 +88,8 @@ class BasePaginator(object):
         if cursor is None:
             cursor = Cursor(0, 0, 0)
 
+        limit = min(limit, self.max_limit)
+
         if cursor.value:
             cursor_value = self.value_from_cursor(cursor)
         else:
@@ -149,6 +152,8 @@ class OffsetPaginator(BasePaginator):
         if cursor is None:
             cursor = Cursor(0, 0, 0)
 
+        limit = min(limit, self.max_limit)
+
         queryset = self.queryset
         if self.desc:
             queryset = queryset.order_by('-{}'.format(self.key))
diff --git a/tests/sentry/api/test_paginator.py b/tests/sentry/api/test_paginator.py
index ee430feb88..9d5b53b0ab 100644
--- a/tests/sentry/api/test_paginator.py
+++ b/tests/sentry/api/test_paginator.py
@@ -3,12 +3,31 @@ from __future__ import absolute_import
 import pytest
 
 from sentry.api.paginator import (
-    DateTimePaginator, OffsetPaginator
+    Paginator, DateTimePaginator, OffsetPaginator
 )
 from sentry.models import User
 from sentry.testutils import TestCase
 
 
+class PaginatorTest(TestCase):
+    cls = Paginator
+
+    def test_max_limit(self):
+        self.create_user('foo@example.com')
+        self.create_user('bar@example.com')
+        self.create_user('baz@example.com')
+
+        queryset = User.objects.all()
+
+        paginator = self.cls(queryset, 'id', max_limit=10)
+        result = paginator.get_result(limit=2, cursor=None)
+        assert len(result) == 2
+
+        paginator = self.cls(queryset, 'id', max_limit=1)
+        result = paginator.get_result(limit=2, cursor=None)
+        assert len(result) == 1
+
+
 class OffsetPaginatorTest(TestCase):
     # offset paginator does not support dynamic limits on is_prev
     def test_simple(self):
