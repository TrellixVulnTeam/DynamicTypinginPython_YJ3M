commit 0b9e124b702183a70002635ffd252e27d11fbe97
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Apr 15 14:44:52 2016 -0700

    Expose the ability to apply custom filters on CSP reports
    
    This also adds a few related things:
    
    * Built in default block list sourced from known noise
    * Move CSP validation out of the interface and into the ingest point
      so we can track rejections rather than throwing them away with 403s.

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 556202a9a1..b48c2f96db 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -136,6 +136,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:scrub_data': bool(project.get_option('sentry:scrub_data', True)),
             'sentry:scrub_defaults': bool(project.get_option('sentry:scrub_defaults', True)),
             'sentry:sensitive_fields': project.get_option('sentry:sensitive_fields', []),
+            'sentry:csp_ignored_sources_defaults': bool(project.get_option('sentry:csp_ignored_sources_defaults', True)),
+            'sentry:csp_ignored_sources': '\n'.join(project.get_option('sentry:csp_ignored_sources', []) or []),
         }
         data['activePlugins'] = active_plugins
         data['team'] = serialize(project.team, request.user)
@@ -233,6 +235,12 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     'sentry:sensitive_fields',
                     [s.strip().lower() for s in options['sentry:sensitive_fields']]
                 )
+            if 'sentry:csp_ignored_sources_defaults' in options:
+                project.update_option('sentry:csp_ignored_sources_defaults', bool(options['sentry:csp_ignored_sources_defaults']))
+            if 'sentry:csp_ignored_sources' in options:
+                project.update_option(
+                    'sentry:csp_ignored_sources',
+                    clean_newline_inputs(options['sentry:csp_ignored_sources']))
 
             self.create_audit_entry(
                 request=request,
@@ -244,7 +252,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
 
         data = serialize(project, request.user)
         data['options'] = {
-            'sentry:origins': '\n'.join(project.get_option('sentry:origins', '*') or []),
+            'sentry:origins': '\n'.join(project.get_option('sentry:origins', ['*']) or []),
             'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
         }
         return Response(data)
diff --git a/src/sentry/interfaces/csp.py b/src/sentry/interfaces/csp.py
index 79792b4e66..468f3d3bfc 100644
--- a/src/sentry/interfaces/csp.py
+++ b/src/sentry/interfaces/csp.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import
 __all__ = ('Csp',)
 
 from urlparse import urlsplit, urlunsplit
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface
 from sentry.utils import json
 from sentry.utils.cache import memoize
 from sentry.utils.safe import trim
@@ -32,21 +32,6 @@ KEYWORDS = frozenset((
     "'none'", "'self'", "'unsafe-inline'", "'unsafe-eval'",
 ))
 
-DIRECTIVES = frozenset((
-    'base-uri', 'child-src', 'connect-src', 'default-src',
-    'font-src', 'form-action', 'frame-ancestors',
-    'img-src', 'manifest-src', 'media-src', 'object-src',
-    'plugin-types', 'referrer', 'script-src', 'style-src',
-    'upgrade-insecure-requests',
-
-    # Deprecated directives
-    # > Note: This directive is deprecated. Use child-src instead.
-    # > https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives#frame-src
-    # 'frame-src',
-
-    # I don't really know what this even is.
-    # 'sandbox',
-))
 
 ALL_SCHEMES = (
     'data:', 'mediastream:', 'blob:', 'filesystem:',
@@ -77,11 +62,6 @@ DIRECTIVE_TO_MESSAGES = {
 
 DEFAULT_MESSAGE = ('Blocked {directive!r} from {uri!r}', 'Blocked inline {directive!r}')
 
-DISALLOWED_SOURCES = (
-    'chrome-extension://',
-    'safari-extension://',
-)
-
 
 class Csp(Interface):
     """
@@ -104,21 +84,6 @@ class Csp(Interface):
     def to_python(cls, data):
         kwargs = {k: trim(data.get(k, None), 1024) for k in REPORT_KEYS}
 
-        if kwargs['effective_directive'] not in DIRECTIVES:
-            raise InterfaceValidationError("Invalid value for 'effective-directive'")
-
-        # Some reports from Chrome report blocked-uri as just 'about'.
-        # In this case, this is not actionable and is just noisy.
-        # Observed in Chrome 45 and 46.
-        if kwargs['blocked_uri'] == 'about':
-            raise InterfaceValidationError("Invalid value for 'blocked-uri'")
-
-        # Here, we want to block reports that are coming from browser extensions
-        # and other sources that are meaningless
-        if kwargs['source_file'] is not None:
-            if kwargs['source_file'].startswith(DISALLOWED_SOURCES):
-                raise InterfaceValidationError("Invalid value for 'source-file'")
-
         # Anything resulting from an "inline" whatever violation is either sent
         # as 'self', or left off. In the case if it missing, we want to noramalize.
         if not kwargs['blocked_uri']:
diff --git a/src/sentry/static/sentry/app/components/forms/checkboxField.jsx b/src/sentry/static/sentry/app/components/forms/checkboxField.jsx
index 0224d22c34..dd14154d06 100644
--- a/src/sentry/static/sentry/app/components/forms/checkboxField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/checkboxField.jsx
@@ -47,7 +47,7 @@ export default class CheckboxField extends FormField {
           <input type="checkbox"
                  onChange={this.onChange.bind(this)}
                  disabled={this.props.disabled}
-                 selected={this.props.value} />
+                 checked={this.props.value} />
           {this.props.label}
           {this.props.disabled && this.props.disabledReason &&
             <span className="disabled-indicator tip" title={this.props.disabledReason}>
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 6740b8c76e..a59ebace9d 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -3,3 +3,4 @@ export {default as Form} from './form';
 export {default as EmailField} from './emailField';
 export {default as TextField} from './textField';
 export {default as BooleanField} from './booleanField';
+export {default as TextareaField} from './textareaField';
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 0835b7e90c..56e6b84b59 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -43,7 +43,7 @@ export default class InputField extends FormField {
   }
 
   getId() {
-    return 'wizard-' + this.props.name;
+    return 'id-' + this.props.name;
   }
 
   getField() {
diff --git a/src/sentry/static/sentry/app/components/forms/textareaField.jsx b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
new file mode 100644
index 0000000000..4ec4d3f2b5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
@@ -0,0 +1,13 @@
+import React from 'react';
+import InputField from './inputField';
+
+export default class TextareaField extends InputField {
+  getField() {
+    return (
+      <textarea {...this.props}
+          id={this.getId()}
+          className="form-control"
+          onChange={this.onChange.bind(this)} />
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/projectCspSettings.jsx b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
index 509469dce6..eb04bbccd5 100644
--- a/src/sentry/static/sentry/app/views/projectCspSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
@@ -1,9 +1,120 @@
 import React from 'react';
 
 import ApiMixin from '../mixins/apiMixin';
+import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
+import {TextareaField, CheckboxField} from '../components/forms';
 import {t} from '../locale';
 
+const FormState = {
+  READY: 0,
+  SAVING: 1,
+  ERROR: 2,
+};
+
+const ProjectCspSettingsForm = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    initialData: React.PropTypes.object.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    let formData = {};
+    // We only want to work with a certain set of project options here
+    for (let key of Object.keys(this.props.initialData)) {
+      if (key.lastIndexOf('sentry:csp_') === 0) {
+        formData[key] = this.props.initialData[key];
+      }
+    }
+    return {
+      formData: formData,
+      errors: {},
+    };
+  },
+
+  onFieldChange(name, value) {
+    let formData = this.state.formData;
+    formData[name] = value;
+    this.setState({
+      formData: formData,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state === FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      let {orgId, projectId} = this.props;
+      this.api.request(`/projects/${orgId}/${projectId}/`, {
+        method: 'PUT',
+        data: {options: this.state.formData},
+        success: (data) => {
+          this.setState({
+            state: FormState.READY,
+            errors: {},
+          });
+        },
+        error: (error) => {
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON,
+          });
+        },
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
+      });
+    });
+  },
+
+  render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let errors = this.state.errors;
+    return (
+      <form onSubmit={this.onSubmit} className="form-stacked">
+        {this.state.state === FormState.ERROR &&
+          <div className="alert alert-error alert-block">
+            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
+          </div>
+        }
+        <fieldset>
+          <CheckboxField
+            key="ignored-sources-defaults"
+            name="ignored-sources-defaults"
+            label={t('Use Default Ignored Sources')}
+            help={t('Our default list will attempt to ignore common issues and reduce noise.')}
+            value={this.state.formData['sentry:csp_ignored_sources_defaults']}
+            error={errors['sentry:csp_ignored_sources_defaults']}
+            onChange={this.onFieldChange.bind(this, 'sentry:csp_ignored_sources_defaults')} />
+          <TextareaField
+            key="ignored-sources"
+            name="ignored-sources"
+            rows={5}
+            label={t('Additional Ignored Sources')}
+            help={t('Separate multiple entries with a newline.')}
+            value={this.state.formData['sentry:csp_ignored_sources']}
+            placeholder="e.g. file://*, *.example.com, example.com, etc"
+            error={errors['sentry:csp_ignored_sources']}
+            onChange={this.onFieldChange.bind(this, 'sentry:csp_ignored_sources')} />
+        </fieldset>
+        <fieldset className="form-actions">
+          <button type="submit" className="btn btn-primary"
+                  disabled={isSaving}>{t('Save Changes')}</button>
+        </fieldset>
+      </form>
+    );
+  }
+});
+
 const ProjectCspSettings = React.createClass({
   propTypes: {
     setProjectNavSection: React.PropTypes.func
@@ -14,8 +125,10 @@ const ProjectCspSettings = React.createClass({
   getInitialState() {
     return {
       loading: true,
+      expected: 2,
       error: false,
       keyList: [],
+      projectOptions: {},
     };
   },
 
@@ -41,16 +154,38 @@ const ProjectCspSettings = React.createClass({
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
       success: (data, _, jqXHR) => {
+        let expected = this.state.expected - 1;
         this.setState({
-          error: false,
-          loading: false,
+          expected: expected,
+          loading: expected > 0,
           keyList: data,
         });
       },
       error: () => {
+        let expected = this.state.expected - 1;
         this.setState({
+          expected: expected,
           error: true,
-          loading: false
+          loading: expected > 0
+        });
+      }
+    });
+
+    this.api.request(`/projects/${orgId}/${projectId}/`, {
+      success: (data, _, jqXHR) => {
+        let expected = this.state.expected - 1;
+        this.setState({
+          expected: expected,
+          loading: expected > 0,
+          projectOptions: data.options,
+        });
+      },
+      error: () => {
+        let expected = this.state.expected - 1;
+        this.setState({
+          expected: expected,
+          error: true,
+          loading: expected > 0
         });
       }
     });
@@ -99,6 +234,8 @@ const ProjectCspSettings = React.createClass({
     if (this.state.loading)
       return this.renderLoading();
 
+    let {orgId, projectId} = this.props.params;
+
     // TODO(dcramer): localize when language is final
     return (
       <div>
@@ -108,17 +245,38 @@ const ProjectCspSettings = React.createClass({
 
         <p><a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Content Security Policy</a> (CSP) is a security standard which helps prevent cross-site scripting (XSS), clickjacking and other code injection attacks resulting from execution of malicious content in the trusted web page context. It's enforced by browser vendors, and Sentry supports capturing CSP violations using the standard reporting hooks.</p>
 
-        <p>To configure <acronym title="Content Security Policy">CSP</acronym> reports in Sentry, you'll need to send a header from your server describing your policy, as well specifying the authenticated Sentry endpoint.</p>
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Settings')}</h3>
+          </div>
+          <div className="box-content with-padding">
+            <ProjectCspSettingsForm
+              orgId={orgId}
+              projectId={projectId}
+              initialData={this.state.projectOptions} />
+          </div>
+        </div>
+
+
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Integration')}</h3>
+          </div>
+
+          <div className="box-content with-padding">
+            <p>To configure <acronym title="Content Security Policy">CSP</acronym> reports in Sentry, you'll need to send a header from your server describing your policy, as well specifying the authenticated Sentry endpoint.</p>
 
-        <p>For example, in Python you might achieve this via a simple web middleware:</p>
+            <p>For example, in Python you might achieve this via a simple web middleware:</p>
 
-        <pre>{this.getInstructions()}</pre>
+            <pre>{this.getInstructions()}</pre>
 
-        <p>Additionally you can setup CSP reports to simply send reports rather than actually enforcing the policy:</p>
+            <p>Additionally you can setup CSP reports to simply send reports rather than actually enforcing the policy:</p>
 
-        <pre>{this.getReportOnlyInstructions()}</pre>
+            <pre>{this.getReportOnlyInstructions()}</pre>
 
-        <p>We recommend setting this up to only run on a percentage of requests, as otherwise you may find that you've quickly exhausted your quota. For more information, take a look at <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">the article on html5rocks.com</a>.</p>
+            <p>We recommend setting this up to only run on a percentage of requests, as otherwise you may find that you've quickly exhausted your quota. For more information, take a look at <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">the article on html5rocks.com</a>.</p>
+          </div>
+        </div>
       </div>
     );
   }
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index e857dbf60b..8bc23c6170 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -153,7 +153,7 @@ class BaseTestCase(Fixtures, Exam):
         elif isinstance(data, basestring):
             body = data
         path = reverse('sentry-api-csp-report', kwargs={'project_id': self.project.id})
-        path += '?sentry_key=%s&sentry_version=5' % self.projectkey.public_key
+        path += '?sentry_key=%s' % self.projectkey.public_key
         with self.tasks():
             return self.client.post(
                 path, data=body,
diff --git a/src/sentry/utils/csp.py b/src/sentry/utils/csp.py
new file mode 100644
index 0000000000..3020b80d70
--- /dev/null
+++ b/src/sentry/utils/csp.py
@@ -0,0 +1,106 @@
+"""
+sentry.utils.csp
+~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from sentry.utils.http import is_valid_origin
+
+# Default block list sourced from personal experience as well as
+# reputable blogs from Twitter and Dropbox
+DISALLOWED_SOURCES = (
+    'chrome://*',
+    'chrome-extension://*',
+    'chromeinvokeimmediate://*'
+    'chromenull://*',
+    'safari-extension://*',
+    'mxaddon-pkg://*',
+    'jar://*',
+    'webviewprogressproxy://*',
+    'tmtbff://*',
+    'mbinit://*',
+    'symres://*',
+    'resource://*',
+
+    '*.metrext.com',
+    'static.image2play.com',
+    '*.tlscdn.com',
+    '73a5b0806e464be8bd4e694c744624f0.com',
+    '020dfefc4ac745dab7594f2f771c1ded.com',
+    '*.superfish.com',
+    'addons.mozilla.org',
+    'v.zilionfast.in',
+    'widgets.amung.us',
+    '*.superfish.com',
+    'xls.searchfun.in',
+    'istatic.datafastguru.info',
+    'v.zilionfast.in',
+    'localhost',
+    'resultshub-a.akamaihd.net',
+    'pulseadnetwork.com',
+    'gateway.zscalertwo.net',
+    'www.passpack.com',
+    'middlerush-a.akamaihd.net',
+    'www.websmartcenter.com',
+    'a.linkluster.com',
+    'saveyoutime.ru',
+    'cdncache-a.akamaihd.net',
+    'x.rafomedia.com',
+)
+
+ALLOWED_DIRECTIVES = frozenset((
+    'base-uri', 'child-src', 'connect-src', 'default-src',
+    'font-src', 'form-action', 'frame-ancestors',
+    'img-src', 'manifest-src', 'media-src', 'object-src',
+    'plugin-types', 'referrer', 'script-src', 'style-src',
+    'upgrade-insecure-requests',
+
+    # Deprecated directives
+    # > Note: This directive is deprecated. Use child-src instead.
+    # > https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives#frame-src
+    # 'frame-src',
+
+    # I don't really know what this even is.
+    # 'sandbox',
+))
+
+
+def is_valid_csp_report(report, project=None):
+    # Some reports from Chrome report blocked-uri as just 'about'.
+    # In this case, this is not actionable and is just noisy.
+    # Observed in Chrome 45 and 46.
+
+    if report.get('effective-directive') not in ALLOWED_DIRECTIVES:
+        return False
+
+    blocked_uri = report.get('blocked-uri')
+    if blocked_uri == 'about':
+        return False
+
+    source_file = report.get('source-file')
+
+    # We must have one of these to do anyting sensible
+    if not any((blocked_uri, source_file)):
+        return False
+
+    if project is None or bool(project.get_option('sentry:csp_ignore_hosts_defaults', True)):
+        disallowed_sources = DISALLOWED_SOURCES
+    else:
+        disallowed_sources = ()
+
+    if project is not None:
+        disallowed_sources += tuple(project.get_option('sentry:csp_ignore_hosts', []))
+
+    if not disallowed_sources:
+        return True
+
+    if source_file and is_valid_origin(source_file, allowed=disallowed_sources):
+        return False
+
+    if blocked_uri and is_valid_origin(blocked_uri, allowed=disallowed_sources):
+        return False
+
+    return True
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index c4723198c3..ebcc6d78b1 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -24,6 +24,7 @@ from sentry.models import Project, OrganizationOption
 from sentry.signals import event_received
 from sentry.quotas.base import RateLimit
 from sentry.utils import json, metrics
+from sentry.utils.csp import is_valid_csp_report
 from sentry.utils.data_scrubber import SensitiveDataFilter
 from sentry.utils.http import (
     is_valid_origin, get_origins, is_same_domain, is_valid_ip,
@@ -465,6 +466,17 @@ class CspReportView(StoreView):
         if not is_valid_origin(origin, project):
             raise APIForbidden('Invalid document-uri')
 
+        # An invalid CSP report must go against quota
+        if not is_valid_csp_report(report, project):
+            app.tsdb.incr_multi([
+                (app.tsdb.models.project_total_received, project.id),
+                (app.tsdb.models.project_total_blacklisted, project.id),
+                (app.tsdb.models.organization_total_received, project.organization_id),
+                (app.tsdb.models.organization_total_blacklisted, project.organization_id),
+            ])
+            metrics.incr('events.blacklisted')
+            raise APIForbidden('Rejected CSP report')
+
         response_or_event_id = self.process(
             request,
             project=project,
diff --git a/tests/integration/fixtures/csp/chrome_blocked_asset_input.json b/tests/integration/fixtures/csp/chrome_blocked_asset_input.json
index a1d5b7d3bb..db02cac084 100644
--- a/tests/integration/fixtures/csp/chrome_blocked_asset_input.json
+++ b/tests/integration/fixtures/csp/chrome_blocked_asset_input.json
@@ -1 +1 @@
-{"csp-report":{"document-uri":"http://localhost:8000/","referrer":"","violated-directive":"style-src cdn.example.com","effective-directive":"style-src","original-policy":"default-src 'none'; style-src cdn.example.com; report-uri http://requestb.in/1im8m061","blocked-uri":"http://localhost:8000/lol.css","status-code":200}}
+{"csp-report":{"document-uri":"http://notlocalhost:8000/","referrer":"","violated-directive":"style-src cdn.example.com","effective-directive":"style-src","original-policy":"default-src 'none'; style-src cdn.example.com; report-uri http://requestb.in/1im8m061","blocked-uri":"http://notlocalhost:8000/lol.css","status-code":200}}
diff --git a/tests/integration/fixtures/csp/chrome_blocked_asset_output.json b/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
index 6e63950448..a187799669 100644
--- a/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
+++ b/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
@@ -1,22 +1,22 @@
 {
-  "message": "Blocked 'style' from 'localhost:8000'",
+  "message": "Blocked 'style' from 'notlocalhost:8000'",
   "tags": {
     "logger": "csp",
     "effective-directive": "style-src",
-    "blocked-uri": "http://localhost:8000/lol.css"
+    "blocked-uri": "http://notlocalhost:8000/lol.css"
   },
   "data": {
     "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
     "sentry.interfaces.Csp": {
-      "blocked_uri": "http://localhost:8000/lol.css",
+      "blocked_uri": "http://notlocalhost:8000/lol.css",
       "status_code": 200,
       "violated_directive": "style-src cdn.example.com",
-      "document_uri": "http://localhost:8000/",
+      "document_uri": "http://notlocalhost:8000/",
       "original_policy": "default-src 'none'; style-src cdn.example.com; report-uri http://requestb.in/1im8m061",
       "effective_directive": "style-src"
     },
     "sentry.interfaces.Http": {
-      "url": "http://localhost:8000/",
+      "url": "http://notlocalhost:8000/",
       "headers": [["User-Agent", "awesome"]]
     }
   }
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 7cc6b35564..f91bb15b34 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -112,7 +112,9 @@ class ProjectUpdateTest(APITestCase):
             'sentry:resolve_age': 1,
             'sentry:scrub_data': False,
             'sentry:scrub_defaults': False,
-            'sentry:sensitive_fields': ['foo', 'bar']
+            'sentry:sensitive_fields': ['foo', 'bar'],
+            'sentry:csp_ignored_sources_defaults': False,
+            'sentry:csp_ignored_sources': 'foo\nbar',
         }
         resp = self.client.put(url, data={
             'options': options
@@ -124,6 +126,8 @@ class ProjectUpdateTest(APITestCase):
         assert project.get_option('sentry:scrub_data', True) == options['sentry:scrub_data']
         assert project.get_option('sentry:scrub_defaults', True) == options['sentry:scrub_defaults']
         assert project.get_option('sentry:sensitive_fields', []) == options['sentry:sensitive_fields']
+        assert project.get_option('sentry:csp_ignored_sources_defaults', True) == options['sentry:csp_ignored_sources_defaults']
+        assert project.get_option('sentry:csp_ignored_sources', []) == options['sentry:csp_ignored_sources'].split('\n')
 
     def test_bookmarks(self):
         project = self.project  # force creation
diff --git a/tests/sentry/interfaces/test_csp.py b/tests/sentry/interfaces/test_csp.py
index 6367f0bb4d..cd77a85ca3 100644
--- a/tests/sentry/interfaces/test_csp.py
+++ b/tests/sentry/interfaces/test_csp.py
@@ -4,7 +4,6 @@ from __future__ import absolute_import
 
 from exam import fixture
 
-from sentry.interfaces.base import InterfaceValidationError
 from sentry.interfaces.csp import Csp
 from sentry.testutils import TestCase
 
@@ -32,24 +31,6 @@ class CspTest(TestCase):
         assert result.violated_directive == 'style-src cdn.example.com'
         assert result.blocked_uri == 'http://example.com/lol.css'
 
-    def test_to_python_validation_errors(self):
-        with self.assertRaises(InterfaceValidationError):
-            Csp.to_python(dict(
-                effective_directive='style-src',
-                blocked_uri='about',
-            ))
-
-        with self.assertRaises(InterfaceValidationError):
-            Csp.to_python(dict(
-                effective_directive='lol',
-            ))
-
-        with self.assertRaises(InterfaceValidationError):
-            Csp.to_python(dict(
-                effective_directive='style-src',
-                source_file='chrome-extension://fdasfdsafdsfdsa',
-            ))
-
     def test_coerce_blocked_uri_if_missing(self):
         result = Csp.to_python(dict(
             document_uri='http://example.com',
diff --git a/tests/sentry/utils/test_csp.py b/tests/sentry/utils/test_csp.py
new file mode 100644
index 0000000000..1796113178
--- /dev/null
+++ b/tests/sentry/utils/test_csp.py
@@ -0,0 +1,26 @@
+import pytest
+from sentry.utils.csp import is_valid_csp_report
+
+
+@pytest.mark.parametrize('report', (
+    {},
+    {'effective-directive': 'lolnotreal'},
+    {'effective-directive': 'style-src'},
+    {'effective-directive': 'style-src', 'blocked-uri': 'about'},
+    {'effective-directive': 'style-src', 'source-file': 'chrome-extension://fdsa'},
+    {'effective-directive': 'style-src', 'source-file': 'http://localhost:8000'},
+    {'effective-directive': 'style-src', 'source-file': 'http://localhost'},
+    {'effective-directive': 'style-src', 'source-file': 'http://foo.superfish.com'},
+    {'effective-directive': 'style-src', 'blocked-uri': 'http://foo.superfish.com'},
+))
+def test_blocked_csp_report(report):
+    assert is_valid_csp_report(report) is False
+
+
+@pytest.mark.parametrize('report', (
+    {'effective-directive': 'style-src', 'blocked-uri': 'http://example.com'},
+    {'effective-directive': 'script-src', 'blocked-uri': 'http://example.com'},
+    {'effective-directive': 'style-src', 'source-file': 'http://example.com'},
+))
+def test_valid_csp_report(report):
+    assert is_valid_csp_report(report) is True
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index bb82c4c0d0..6b52ac0654 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -56,7 +56,11 @@ class CspReportViewTest(TestCase):
     @mock.patch('sentry.web.api.CspReportView.process')
     def test_post_success(self, process):
         process.return_value = 'ok'
-        resp = self._postCspWithHeader({'csp-report': {'document-uri': 'http://example.com'}})
+        resp = self._postCspWithHeader({
+            'document-uri': 'http://example.com',
+            'source-file': 'http://example.com',
+            'effective-directive': 'style-src',
+        })
         assert resp.status_code == 201, resp.content
 
 
