commit 8ce16a8be141f9af444dba76e638f60abf76f711
Author: Mark Story <mark@mark-story.com>
Date:   Thu Feb 14 10:06:12 2019 -0500

    fix(jira) Default to the first project when no preference exist (#12016)
    
    When first using the Jira integrations we don't have a default project
    selected, this results in us getting the issue create configuration for
    *all* jira projects. While this isn't generally a problem, some users
    have jira instances with 300+ projects and our requests timeout/fail
    with duplicate screen errors.
    
    I've merged the two get_create_meta methods as now we only really need
    one as we should never be fetching config for all projects, as those
    requests are expensive, slow and often fail.
    
    Fixes APP-1100

diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index f6e66933f4..1642a357a5 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -144,17 +144,15 @@ class JiraApiClient(ApiClient):
                 return project['key'].encode('utf-8')
         return ''
 
-    def get_create_meta(self, project=None):
-        params = {'expand': 'projects.issuetypes.fields'}
-        if project is not None:
-            params['projectIds'] = project
-        return self.get_cached(
+    def get_create_meta_for_project(self, project):
+        params = {
+            'expand': 'projects.issuetypes.fields',
+            'projectIds': project
+        }
+        metas = self.get_cached(
             self.META_URL,
             params=params,
         )
-
-    def get_create_meta_for_project(self, project):
-        metas = self.get_create_meta(project)
         # We saw an empty JSON response come back from the API :(
         if not metas:
             return None
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 50fec54709..3eef6b95b5 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -402,13 +402,21 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
         kwargs['link_referrer'] = 'jira_integration'
         fields = super(JiraIntegration, self).get_create_issue_config(group, **kwargs)
         params = kwargs.get('params', {})
+
         defaults = self.get_project_defaults(group.project_id)
+        project_id = params.get('project', defaults.get('project'))
 
-        default_project = params.get('project', defaults.get('project'))
         client = self.get_client()
 
+        # If we don't have a jira project selected, fetch the first project
+        # This avoids a potentially very expensive API call to fetch issue
+        # create configuration for *all* projects.
+        jira_projects = client.get_projects_list()
+        if not project_id and len(jira_projects):
+            project_id = jira_projects[0]['id']
+
         try:
-            resp = client.get_create_meta(default_project)
+            meta = client.get_create_meta_for_project(project_id)
         except ApiUnauthorized:
             raise IntegrationError(
                 'Jira returned: Unauthorized. '
@@ -427,19 +435,14 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
                 'There was an error communicating with the Jira API. '
                 'Please try again or contact support.'
             )
-
-        try:
-            meta = resp['projects'][0]
-        except IndexError:
+        if not meta:
             raise IntegrationError(
-                'Error in Jira configuration, no projects found.'
+                'No projects were found in Jira. Check the permissions for projects.'
             )
 
         # check if the issuetype was passed as a parameter
         issue_type = params.get('issuetype', defaults.get('issuetype'))
-
         issue_type_meta = self.get_issue_type_meta(issue_type, meta)
-
         issue_type_choices = self.make_choices(meta['issuetypes'])
 
         # make sure default issue type is actually
@@ -452,7 +455,7 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
             {
                 'name': 'project',
                 'label': 'Jira Project',
-                'choices': [(p['id'], p['key']) for p in client.get_projects_list()],
+                'choices': [(p['id'], p['key']) for p in jira_projects],
                 'default': meta['id'],
                 'type': 'select',
                 'updatesForm': True,
@@ -520,9 +523,8 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
             raise IntegrationFormError({'project': ['Jira project is required']})
 
         meta = client.get_create_meta_for_project(jira_project)
-
         if not meta:
-            raise IntegrationError('Something went wrong. Check your plugin configuration.')
+            raise IntegrationError('Could not fetch issue create configuration from Jira.')
 
         issue_type_meta = self.get_issue_type_meta(data['issuetype'], meta)
 
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 68ed176dcf..8b49d18556 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -352,14 +352,11 @@ SAMPLE_TRANSITION_RESPONSE = """
 
 
 class MockJiraApiClient(object):
-    def get_create_meta(self, project=None):
+    def get_create_meta_for_project(self, project):
         resp = json.loads(SAMPLE_CREATE_META_RESPONSE)
         if project == '10001':
             resp['projects'][0]['id'] = '10001'
-        return resp
-
-    def get_create_meta_for_project(self, project):
-        return self.get_create_meta()['projects'][0]
+        return resp['projects'][0]
 
     def get_projects_list(self):
         return json.loads(SAMPLE_PROJECT_LIST_RESPONSE)
