commit e873279c4020a81a5dc767be28b9b4954bd85920
Author: MeredithAnya <meredith@getsentry.com>
Date:   Fri Jul 5 10:56:13 2019 -0700

    ref(app-platform): Add integration features to SentryAppDetailsModal (#13393)
    
    * add integration features to SentryAppDetailsModal

diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index 85f395bfa5..3e5bcc4af5 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -131,9 +131,10 @@ class SentryAppPermission(SentryPermission):
         if is_active_superuser(request):
             return True
 
-        # User must be in the Org who owns the app.
-        if sentry_app.owner not in request.user.get_orgs():
-            raise Http404
+        # if app is unpublished, user must be in the Org who owns the app.
+        if not sentry_app.is_published:
+            if sentry_app.owner not in request.user.get_orgs():
+                raise Http404
 
         return ensure_scoped_permission(
             request,
diff --git a/src/sentry/models/integrationfeature.py b/src/sentry/models/integrationfeature.py
index 0a3b9513f5..0a06fe2dc9 100644
--- a/src/sentry/models/integrationfeature.py
+++ b/src/sentry/models/integrationfeature.py
@@ -33,15 +33,15 @@ class Feature(object):
             return 'integrations-event-hooks'
 
     @classmethod
-    def description(cls, feature):
+    def description(cls, feature, name):
         if feature == cls.API:
-            return "This integration can utilize the Sentry API (with the permissions granted) to pull data or update resources in Sentry!"
+            return "%s can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course)." % name
         elif feature == cls.ISSUE_LINK:
-            return "This integration can allow your organization to create or link Sentry issues to another service!"
+            return "Organizations can **create or link Sentry issues** to another service."
         elif feature == cls.STACKTRACE_LINK:
-            return "This integration allows your organization to open a line in Sentry's stack trace in another service!"
+            return "Organizations can **open a line to Sentry's stack trace** in another service."
         elif feature == cls.EVENT_HOOKS:
-            return "This integration allows your organization to forward events to another service!"
+            return "%s allows organizations to **forward events to another service**." % name
 
 
 class IntegrationFeature(Model):
@@ -68,4 +68,4 @@ class IntegrationFeature(Model):
         if self.user_description:
             return self.user_description
         else:
-            return Feature.description(self.feature)
+            return Feature.description(self.feature, self.sentry_app.name)
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.jsx b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.jsx
index fd3b39f61a..2956175cbd 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.jsx
@@ -9,9 +9,31 @@ import PluginIcon from 'app/plugins/components/pluginIcon';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
-import marked from 'app/utils/marked';
 
-export default class SentryAppDetailsModal extends React.Component {
+import AsyncComponent from 'app/components/asyncComponent';
+import HookStore from 'app/stores/hookStore';
+import marked, {singleLineRenderer} from 'app/utils/marked';
+import InlineSvg from 'app/components/inlineSvg';
+import Tag from 'app/views/settings/components/tag';
+
+const defaultFeatureGateComponents = {
+  IntegrationFeatures: p =>
+    p.children({
+      disabled: false,
+      disabledReason: null,
+      ungatedFeatures: p.features,
+      gatedFeatureGroups: [],
+    }),
+  FeatureList: p => (
+    <ul>
+      {p.features.map((f, i) => (
+        <li key={i}>{f.description}</li>
+      ))}
+    </ul>
+  ),
+};
+
+export default class SentryAppDetailsModal extends AsyncComponent {
   static propTypes = {
     sentryApp: SentryTypes.SentryApplication.isRequired,
     organization: SentryTypes.Organization.isRequired,
@@ -20,10 +42,35 @@ export default class SentryAppDetailsModal extends React.Component {
     closeModal: PropTypes.func.isRequired,
   };
 
-  render() {
+  getEndpoints() {
+    const {sentryApp} = this.props;
+    return [['featureData', `/sentry-apps/${sentryApp.slug}/features/`]];
+  }
+
+  featureTags(features) {
+    return features.map(feature => {
+      const feat = feature.featureGate.replace(/integrations/g, '');
+      return <StyledTag key={feat}>{feat.replace(/-/g, ' ')}</StyledTag>;
+    });
+  }
+
+  renderBody() {
     const {sentryApp, closeModal, onInstall, isInstalled, organization} = this.props;
+    const {featureData} = this.state;
+    // Prepare the features list
+    const features = (featureData || []).map(f => ({
+      featureGate: f.featureGate,
+      description: (
+        <span dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}} />
+      ),
+    }));
+
+    const defaultHook = () => defaultFeatureGateComponents;
+    const featureHook = HookStore.get('integrations:feature-gates')[0] || defaultHook;
+    const {FeatureList, IntegrationFeatures} = featureHook();
 
     const overview = sentryApp.overview || '';
+    const featureProps = {organization, features};
 
     return (
       <React.Fragment>
@@ -32,36 +79,43 @@ export default class SentryAppDetailsModal extends React.Component {
 
           <Flex pl={1} align="flex-start" direction="column" justify="center">
             <Name>{sentryApp.name}</Name>
+            <Flex>{features.length && this.featureTags(features)}</Flex>
           </Flex>
         </Flex>
 
         <Description dangerouslySetInnerHTML={{__html: marked(overview)}} />
+        <FeatureList {...featureProps} provider={{...sentryApp, key: sentryApp.slug}} />
 
         <Metadata>
           <Author flex={1}>{t('By %s', sentryApp.author)}</Author>
         </Metadata>
 
-        <div className="modal-footer">
-          <Button size="small" onClick={closeModal}>
-            {t('Cancel')}
-          </Button>
-
-          <Access organization={organization} access={['org:integrations']}>
-            {({hasAccess}) =>
-              hasAccess && (
-                <Button
-                  size="small"
-                  priority="primary"
-                  disabled={isInstalled}
-                  onClick={onInstall}
-                  style={{marginLeft: space(1)}}
-                >
-                  {t('Install')}
-                </Button>
-              )
-            }
-          </Access>
-        </div>
+        <IntegrationFeatures {...featureProps}>
+          {({disabled, disabledReason}) => (
+            <div className="modal-footer">
+              {disabled && <DisabledNotice reason={disabledReason} />}
+              <Button size="small" onClick={closeModal}>
+                {t('Cancel')}
+              </Button>
+
+              <Access organization={organization} access={['org:integrations']}>
+                {({hasAccess}) =>
+                  hasAccess && (
+                    <Button
+                      size="small"
+                      priority="primary"
+                      disabled={isInstalled || disabled}
+                      onClick={onInstall}
+                      style={{marginLeft: space(1)}}
+                    >
+                      {t('Install')}
+                    </Button>
+                  )
+                }
+              </Access>
+            </div>
+          )}
+        </IntegrationFeatures>
       </React.Fragment>
     );
   }
@@ -95,3 +149,19 @@ const Metadata = styled(Flex)`
 const Author = styled(Box)`
   color: ${p => p.theme.gray2};
 `;
+
+const DisabledNotice = styled(({reason, ...p}) => (
+  <Flex align="center" flex={1} {...p}>
+    <InlineSvg src="icon-circle-exclamation" size="1.5em" />
+    <Box ml={1}>{reason}</Box>
+  </Flex>
+))`
+  color: ${p => p.theme.red};
+  font-size: 0.9em;
+`;
+
+const StyledTag = styled(Tag)`
+  &:not(:first-child) {
+    margin-left: ${space(0.5)};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
index 249b5afbe8..2a2937f96d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
@@ -130,7 +130,7 @@ export default class SentryApplicationRow extends React.PureComponent {
             <Box>
               {!isInstalled ? (
                 <Button
-                  onClick={() => this.props.onInstall(app)}
+                  onClick={() => this.openLearnMore()}
                   size="small"
                   icon="icon-circle-add"
                   className="btn btn-default"
diff --git a/tests/js/spec/components/modals/sentryAppDetailsModal.spec.jsx b/tests/js/spec/components/modals/sentryAppDetailsModal.spec.jsx
index 2bf1e0d781..60775f72db 100644
--- a/tests/js/spec/components/modals/sentryAppDetailsModal.spec.jsx
+++ b/tests/js/spec/components/modals/sentryAppDetailsModal.spec.jsx
@@ -30,6 +30,13 @@ describe('SentryAppDetailsModal', function() {
     onInstall = jest.fn();
     isInstalled = false;
     closeModal = jest.fn();
+
+    MockApiClient.addMockResponse({
+      url: `/sentry-apps/${sentryApp.slug}/features/`,
+      method: 'GET',
+      body: [],
+    });
+
     wrapper = render();
   });
 
diff --git a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx
index 4c1aa1a81c..17f2685019 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx
@@ -2,11 +2,15 @@ import React from 'react';
 
 import {Client} from 'app/api';
 import {mount} from 'enzyme';
-import {openSentryAppPermissionModal} from 'app/actionCreators/modal';
+import {
+  openSentryAppPermissionModal,
+  openSentryAppDetailsModal,
+} from 'app/actionCreators/modal';
 import SentryAppInstallations from 'app/views/organizationIntegrations/sentryAppInstallations';
 
 jest.mock('app/actionCreators/modal', () => ({
   openSentryAppPermissionModal: jest.fn(),
+  openSentryAppDetailsModal: jest.fn(),
 }));
 
 describe('Sentry App Installations', function() {
@@ -91,6 +95,15 @@ describe('Sentry App Installations', function() {
           routerContext
         );
         wrapper.find('[icon="icon-circle-add"]').simulate('click');
+        expect(openSentryAppDetailsModal).toHaveBeenCalledWith(
+          expect.objectContaining({
+            sentryApp,
+            organization: org,
+            onInstall: expect.any(Function),
+            isInstalled: false,
+          })
+        );
+        wrapper.instance().openModal(sentryApp);
         expect(openSentryAppPermissionModal).toHaveBeenCalledWith(
           expect.objectContaining({app: sentryApp, orgId: org.slug})
         );
@@ -127,6 +140,14 @@ describe('Sentry App Installations', function() {
         );
 
         wrapper.find('[icon="icon-circle-add"]').simulate('click');
+        expect(openSentryAppDetailsModal).toHaveBeenCalledWith(
+          expect.objectContaining({
+            sentryApp,
+            organization: org,
+            onInstall: expect.any(Function),
+            isInstalled: false,
+          })
+        );
         wrapper.instance().install(sentryApp);
         await tick();
         expect(window.location.assign).toHaveBeenCalledWith(
diff --git a/tests/sentry/models/test_integrationfeature.py b/tests/sentry/models/test_integrationfeature.py
index 98a9a68ef8..d117219419 100644
--- a/tests/sentry/models/test_integrationfeature.py
+++ b/tests/sentry/models/test_integrationfeature.py
@@ -6,9 +6,9 @@ from sentry.models import IntegrationFeature
 
 class IntegrationFeatureTest(TestCase):
     def setUp(self):
-        sentry_app = self.create_sentry_app()
+        self.sentry_app = self.create_sentry_app()
         self.integration_feature = IntegrationFeature.objects.get(
-            sentry_app=sentry_app,
+            sentry_app=self.sentry_app,
         )
 
     def test_feature_str(self):
@@ -16,7 +16,7 @@ class IntegrationFeatureTest(TestCase):
 
     def test_description(self):
         assert self.integration_feature.description == \
-            "This integration can utilize the Sentry API (with the permissions granted) to pull data or update resources in Sentry!"
+            "%s can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course)." % self.sentry_app.name
 
         self.integration_feature.user_description = "Custom description"
         self.integration_feature.save()
