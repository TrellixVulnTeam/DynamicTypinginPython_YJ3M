commit 69a14e6886cc5b8d599eda8fc6bedb35def24712
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 18 01:59:58 2014 -0700

    Update sudo_required behavior

diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index 43b32550fc..eda6afa1a2 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -119,7 +119,7 @@ def has_access(access_or_func=None, team=None, access=None):
             return func(request, *args, **kwargs)
 
         if access is MEMBER_OWNER:
-            _wrapped = sudo_required(_wrapped)
+            _wrapped = login_required(sudo_required(_wrapped))
         return _wrapped
     return wrapped
 
diff --git a/tests/sentry/web/forms/accounts/__init__.py b/tests/sentry/web/forms/accounts/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/web/forms/accounts/tests.py b/tests/sentry/web/forms/accounts/tests.py
deleted file mode 100644
index 506215b20c..0000000000
--- a/tests/sentry/web/forms/accounts/tests.py
+++ /dev/null
@@ -1,26 +0,0 @@
-from sentry.models import User
-from sentry.testutils import TestCase
-from sentry.web.forms.accounts import AccountSettingsForm
-
-
-class AccountSettingsFormTest(TestCase):
-    def test_removes_password_on_empty_password_types(self):
-        user = User(password='!')
-        form = AccountSettingsForm(user=user)
-        self.assertNotIn('old_password', form.fields)
-
-    def test_requires_password_on_valid_accounts(self):
-        user = User()
-        user.set_password('foo')
-        form = AccountSettingsForm(user=user)
-        self.assertIn('old_password', form.fields)
-
-    def test_removes_username_if_matches_email(self):
-        user = User(username='foo@example.com', email='foo@example.com')
-        form = AccountSettingsForm(user=user)
-        assert 'username' not in form.fields
-
-    def test_requires_username_if_not_matches_email(self):
-        user = User(username='bar@example.com', email='foo@example.com')
-        form = AccountSettingsForm(user=user)
-        assert 'username' in form.fields
diff --git a/tests/sentry/web/forms/projects/tests.py b/tests/sentry/web/forms/projects/tests.py
index ea33f22670..2b57e17696 100644
--- a/tests/sentry/web/forms/projects/tests.py
+++ b/tests/sentry/web/forms/projects/tests.py
@@ -1,21 +1,8 @@
-from sentry.models import User, Project
-from sentry.web.forms.projects import RemoveProjectForm, ProjectQuotasForm
+from sentry.models import Project
+from sentry.web.forms.projects import ProjectQuotasForm
 from sentry.testutils import TestCase
 
 
-class RemoveProjectFormTest(TestCase):
-    def test_removes_password_on_empty_password_types(self):
-        user = User(password='!')
-        form = RemoveProjectForm(user=user)
-        self.assertNotIn('password', form.fields)
-
-    def test_requires_password_on_valid_accounts(self):
-        user = User()
-        user.set_password('foo')
-        form = RemoveProjectForm(user=user)
-        self.assertIn('password', form.fields)
-
-
 class ProjectQuotasFormTest(TestCase):
     def test_accepts_percentage(self):
         project = Project(id=1)
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 5c320ad273..0ec310d831 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -150,15 +150,6 @@ class SettingsTest(TestCase):
         assert 'form' in resp.context
         assert 'first_name' in resp.context['form'].errors
 
-    def test_requires_old_password(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path, self.params(without=['old_password']))
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert 'form' in resp.context
-        assert 'old_password' in resp.context['form'].errors
-
     def test_minimum_valid_params(self):
         self.login_as(self.user)
 
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 54bb07262c..ab17088d5b 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -166,15 +166,6 @@ class RemoveProjectTest(TestCase):
     def test_deletion_flow(self, delete_project):
         self.login_as(self.user)
 
-        # missing password
-        resp = self.client.post(self.path, {'project': self.project.id})
-        assert resp.status_code == 200
-        assert 'password' in resp.context['form'].errors
-
-        # set password to empty value so it doesnt require check
-        self.user.password = ''
-        self.user.save()
-
         resp = self.client.post(self.path, {'project': self.project.id})
         assert resp.status_code == 302
         delete_project.delay.assert_called_once_with(
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 7d9f339252..a4cf1ecfbd 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -169,7 +169,7 @@ class PermissionBase(TestCase):
         is Trueish.
         """
         if account:
-            self.assertTrue(self.client.login(username=account, password=account))
+            self.login_as(getattr(self, account))
         else:
             self.client.logout()
         resp = self.client.get(path)
