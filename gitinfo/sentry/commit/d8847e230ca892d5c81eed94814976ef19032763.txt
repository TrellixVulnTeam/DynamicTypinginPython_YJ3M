commit d8847e230ca892d5c81eed94814976ef19032763
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Sep 26 18:11:23 2016 +0200

    Move padding of addresses into api context functionality

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 3ac519510f..3b7f000cc5 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -40,6 +40,21 @@ _java_enhancer_re = re.compile(r'''
 ''', re.X)
 
 
+def max_addr(cur, addr):
+    if addr is None:
+        return cur
+    length = len(addr) - 2
+    if length > cur:
+        return length
+    return cur
+
+
+def pad_hex_addr(addr, length):
+    if length is None:
+        return addr
+    return '0x' + addr[2:].rjust(length, '0')
+
+
 def trim_package(pkg):
     if not pkg:
         return '?'
@@ -56,10 +71,7 @@ def to_hex_addr(addr):
         return '0x%x' % addr
     elif isinstance(addr, six.string_types):
         if addr[:2] == '0x':
-            # XXX: More correct would be this but we currently can't do
-            # that yet.
-            # addr = int(addr[2:], 16)
-            return addr
+            addr = int(addr[2:], 16)
         return '0x%x' % int(addr)
     raise ValueError('Unsupported address format %r' % (addr,))
 
@@ -385,15 +397,15 @@ class Frame(Interface):
             output.append(self.lineno)
         return output
 
-    def get_api_context(self, is_public=False):
+    def get_api_context(self, is_public=False, pad_addr=None):
         data = {
             'filename': self.filename,
             'absPath': self.abs_path,
             'module': self.module,
             'package': self.package,
             'platform': self.platform,
-            'instructionAddr': self.instruction_addr,
-            'instructionOffset': self.instruction_offset,
+            'instructionAddr': pad_hex_addr(self.instruction_addr, pad_addr),
+            'instructionOffset': pad_hex_addr(self.instruction_offset, pad_addr),
             'symbolAddr': self.symbol_addr,
             'function': self.function,
             'context': get_context(
@@ -652,9 +664,18 @@ class Stacktrace(Interface):
             return False
         return bool(system_frames)
 
+    def get_longest_address(self):
+        rv = None
+        for frame in self.frames:
+            rv = max_addr(rv, frame.instruction_addr)
+            rv = max_addr(rv, frame.symbol_addr)
+        return rv
+
     def get_api_context(self, is_public=False):
+        longest_addr = self.get_longest_address()
+
         frame_list = [
-            f.get_api_context(is_public=is_public)
+            f.get_api_context(is_public=is_public, pad_addr=longest_addr)
             for f in self.frames
         ]
 
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 8338b7d7ed..5f6d7cfafe 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -154,7 +154,6 @@ def convert_stacktrace(frames, system=None, notable_addresses=None):
             app_uuid = app_uuid.lower()
 
     converted_frames = []
-    longest_addr = 0
     for frame in reversed(frames):
         fn = frame.get('filename')
 
@@ -183,13 +182,6 @@ def convert_stacktrace(frames, system=None, notable_addresses=None):
         }
         cframe['in_app'] = is_in_app(cframe, app_uuid)
         converted_frames.append(cframe)
-        longest_addr = max(longest_addr, len(cframe['symbol_addr']),
-                           len(cframe['instruction_addr']))
-
-    # Pad out addresses to be of the same length and add prefix
-    for frame in converted_frames:
-        for key in 'symbol_addr', 'instruction_addr':
-            frame[key] = '0x' + frame[key][2:].rjust(longest_addr, '0')
 
     if converted_frames and notable_addresses:
         converted_frames[-1]['vars'] = notable_addresses
@@ -382,7 +374,6 @@ def resolve_frame_symbols(data):
             )
         })
 
-    longest_addr = 0
     processed_frames = []
     with sym:
         for stacktrace in stacktraces:
@@ -419,8 +410,6 @@ def resolve_frame_symbols(data):
                     frame['instruction_addr'] = '0x%x' % parse_addr(
                         sfrm['instruction_addr'])
                     frame['in_app'] = is_in_app(frame)
-                    longest_addr = max(longest_addr, len(frame['symbol_addr']),
-                                       len(frame['instruction_addr']))
                     processed_frames.append(frame)
                 except Exception:
                     logger.exception('Failed to symbolicate')
@@ -429,11 +418,6 @@ def resolve_frame_symbols(data):
                         'error': 'The symbolicator encountered an internal failure',
                     })
 
-    # Pad out addresses to be of the same length
-    for frame in processed_frames:
-        for key in 'symbol_addr', 'instruction_addr':
-            frame[key] = '0x' + frame[key][2:].rjust(longest_addr - 2, '0')
-
     if errors:
         data.setdefault('errors', []).extend(errors)
 
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index 1dfd26485e..445f486d38 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -341,7 +341,7 @@ class BasicResolvingIntegrationTest(TestCase):
         frames = bt.frames
 
         assert frames[0].function == '<redacted>'
-        assert frames[0].instruction_addr == '0x002ac28b8'
+        assert frames[0].instruction_addr == '0x2ac28b8'
         assert not frames[0].in_app
 
         assert frames[1].function == 'real_main'
@@ -358,7 +358,7 @@ class BasicResolvingIntegrationTest(TestCase):
         assert frames[2].lineno == 82
         assert frames[2].colno == 23
         assert frames[2].package == object_name
-        assert frames[2].instruction_addr == '0x000000001'
+        assert frames[2].instruction_addr == '0x1'
         assert frames[2].instruction_offset is None
         assert frames[2].in_app
 
@@ -370,3 +370,9 @@ class BasicResolvingIntegrationTest(TestCase):
         assert frames[3].filename == '../../sentry/scripts/views.js'
         assert frames[3].instruction_offset is None
         assert frames[3].in_app
+
+        x = bt.get_api_context()
+        long_frames = x['frames']
+        assert long_frames[0]['instructionAddr'] == '0x002ac28b8'
+        assert long_frames[1]['instructionAddr'] == '0x100026330'
+        assert long_frames[2]['instructionAddr'] == '0x000000001'
