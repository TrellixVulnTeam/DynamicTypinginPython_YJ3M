commit ce1eeef389730d86359ebfb6cbc56cc3cb46da2c
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 16 14:10:04 2010 -0700

    Added natural key support. Added RSS feeds. Improve some code styling.

diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
index f66c6992ac..f5406618fe 100644
--- a/djangodblog/__init__.py
+++ b/djangodblog/__init__.py
@@ -1 +1 @@
-__version__ = (2, 1, 9)
\ No newline at end of file
+__version__ = (2, 2, 0)
\ No newline at end of file
diff --git a/djangodblog/admin.py b/djangodblog/admin.py
index 3f4d3999a2..7f2c08d9d3 100644
--- a/djangodblog/admin.py
+++ b/djangodblog/admin.py
@@ -9,8 +9,8 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 from django import forms
 
-from djangodblog.models import ErrorBatch, Error
 from djangodblog.helpers import ImprovedExceptionReporter
+from djangodblog.models import ErrorBatch, Error
 from djangodblog.settings import *
 
 import base64
@@ -74,7 +74,7 @@ class CachedAllValuesFilterSpec(AllValuesFilterSpec):
     def choices(self, cl):
         yield {'selected': self.lookup_val is None,
                'query_string': cl.get_query_string({}, [self.field.name]),
-               'display': _('All')}
+               'display': _('all')}
         for val in self.lookup_choices:
             val = smart_unicode(val)
             yield {'selected': self.lookup_val == val,
@@ -175,9 +175,9 @@ class ErrorAdmin(EfficientModelAdmin):
             'fields': ('class_name', 'message', 'traceback')
         }),
     )
-    
+
     _body_re = re.compile(r'<body>(.+)<\/body>', re.I | re.S)
-    
+
     def change_view(self, request, object_id, extra_context={}):
         obj = self.get_object(request, unquote(object_id))
         has_traceback = ENHANCED_TRACEBACKS and 'exc' in obj.data
diff --git a/djangodblog/feeds.py b/djangodblog/feeds.py
new file mode 100644
index 0000000000..9ff11e17e8
--- /dev/null
+++ b/djangodblog/feeds.py
@@ -0,0 +1,84 @@
+from django.conf import settings
+from django.core.urlresolvers import reverse
+from django.http import HttpResponse
+from django.utils import feedgenerator
+from django.utils.translation import ugettext_lazy as _
+
+from djangodblog.models import Error, ErrorBatch
+
+import logging
+
+class ErrorFeed(object):
+    def __call__(self, request):
+        feed_dict = {
+            'title': self.get_title(request),
+            'link': request.build_absolute_uri(self.get_link(request)),
+            'description': '',
+            'language': u'en',
+            'feed_url': request.build_absolute_uri(),
+        }
+        feed = feedgenerator.Rss201rev2Feed(**feed_dict)
+
+        qs = self.get_query_set(request)
+
+        for obj in qs[0:10]:
+            link = self.get_item_url(request, obj)
+            if link:
+                link = request.build_absolute_uri(link)
+            feed.add_item(
+                title=str(obj or ''),
+                link=link,
+                description=obj.description() or '',
+                pubdate=self.get_item_date(request, obj) or '',
+            )
+
+        return HttpResponse(feed.writeString('utf-8'), mimetype='application/xml')
+
+    def get_title(self, request):
+        return _('log messages')
+
+    def get_link(self, request):
+        return reverse('admin:djangodblog_error_changelist')
+
+    def get_model(self, request):
+        return Error
+
+    def get_query_set(self, request):
+        qs = self.get_model(request).objects.all().order_by(self.get_order_field(request))
+        if request.GET.get('level') > 0:
+            qs = qs.filter(level__gte=request.GET['level'])
+        elif request.GET.get('server_name'):
+            qs = qs.filter(server_name=request.GET['server_name'])
+        return qs
+
+    def get_order_field(self, request):
+        return '-datetime'
+
+    def get_item_url(self, request, obj):
+        return reverse('admin:djangodblog_error_change', args=[obj.pk])
+
+    def get_item_date(self, request, obj):
+        return obj.datetime
+
+class SummaryFeed(ErrorFeed):
+    def get_title(self, request):
+        return _('log summaries')
+
+    def get_link(self, request):
+        return reverse('admin:djangodblog_errorbatch_changelist')
+
+    def get_model(self, request):
+        return ErrorBatch
+
+    def get_query_set(self, request):
+        qs = super(SummaryFeed, self).get_query_set(request)
+        return qs.filter(status=0)
+
+    def get_order_field(self, request):
+        return '-last_seen'
+
+    def get_item_url(self, request, obj):
+        return reverse('admin:djangodblog_errorbatch_change', args=[obj.pk])
+
+    def get_item_date(self, request, obj):
+        return obj.last_seen
\ No newline at end of file
diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index 3e5d2363de..33fd8153ef 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -157,3 +157,7 @@ class DBLogManager(models.Manager):
             data=data,
             **kwargs
         )
+
+class ErrorBatchManager(DBLogManager):
+    def get_by_natural_key(self, logger, server_name, checksum):
+        return self.get(logger=logger, server_name=server_name, checksum=checksum)
\ No newline at end of file
diff --git a/djangodblog/models.py b/djangodblog/models.py
index 00029debc6..1341d93f75 100644
--- a/djangodblog/models.py
+++ b/djangodblog/models.py
@@ -6,7 +6,7 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from djangodblog import settings
-from djangodblog.manager import DBLogManager
+from djangodblog.manager import DBLogManager, ErrorBatchManager
 from djangodblog.utils import JSONDictField
 from djangodblog.helpers import construct_checksum
 
@@ -25,29 +25,24 @@ logger = logging.getLogger('dblog')
 __all__ = ('Error', 'ErrorBatch')
 
 LOG_LEVELS = (
-    (logging.INFO, 'Info'),
-    (logging.WARNING, 'Warning'),
-    (logging.DEBUG, 'Debug'),
-    (logging.ERROR, 'Error'),
-    (logging.FATAL, 'Fatal'),
+    (logging.INFO, _('info')),
+    (logging.WARNING, _('warning')),
+    (logging.DEBUG, _('debug')),
+    (logging.ERROR, _('error')),
+    (logging.FATAL, _('fatal')),
 )
 
 STATUS_LEVELS = (
-    (0, 'Unresolved'),
-    (1, 'Resolved'),
+    (0, _('unresolved')),
+    (1, _('resolved')),
 )
 
-class ErrorBatch(Model):
+class ErrorBase(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
     class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
     level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
     message         = models.TextField()
     traceback       = models.TextField(blank=True, null=True)
-    # XXX: We're using the legacy column for `is_resolved` for status
-    status          = models.PositiveIntegerField(default=0, db_column="is_resolved", choices=STATUS_LEVELS)
-    times_seen      = models.PositiveIntegerField(default=1)
-    last_seen       = models.DateTimeField(default=datetime.datetime.now, db_index=True)
-    first_seen      = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
     server_name     = models.CharField(max_length=128, db_index=True)
     checksum        = models.CharField(max_length=32, db_index=True)
@@ -55,26 +50,24 @@ class ErrorBatch(Model):
     objects         = DBLogManager()
 
     class Meta:
-        unique_together = (('logger', 'server_name', 'checksum'),)
-        verbose_name_plural = 'Message summaries'
-        verbose_name = 'Message summary'
-    
-    def __unicode__(self):
-        return "(%s) %s: %s" % (self.times_seen, self.class_name, self.error())
+        abstract = True
+
+    def get_absolute_url(self):
+        return self.url
     
     def shortened_url(self):
         if not self.url:
-            return '(No URL)'
+            return _('no data')
         url = self.url
         if len(url) > 60:
             url = url[:60] + '...'
         return url
-    shortened_url.short_description = 'URL'
+    shortened_url.short_description = _('url')
     shortened_url.admin_order_field = 'url'
     
     def full_url(self):
         return self.data.get('url') or self.url
-    full_url.short_description = 'URL'
+    full_url.short_description = _('url')
     full_url.admin_order_field = 'url'
     
     def error(self):
@@ -84,10 +77,31 @@ class ErrorBatch(Model):
         if self.class_name:
             return "%s: %s" % (self.class_name, message)
         return message
-    error.short_description = 'Error'
+    error.short_description = _('error')
 
-    def get_absolute_url(self):
-        return self.url
+    def description(self):
+        return self.traceback or ''
+    description.short_description = _('description')
+
+class ErrorBatch(ErrorBase):
+    # XXX: We're using the legacy column for `is_resolved` for status
+    status          = models.PositiveIntegerField(default=0, db_column="is_resolved", choices=STATUS_LEVELS)
+    times_seen      = models.PositiveIntegerField(default=1)
+    last_seen       = models.DateTimeField(default=datetime.datetime.now, db_index=True)
+    first_seen      = models.DateTimeField(default=datetime.datetime.now, db_index=True)
+
+    objects         = ErrorBatchManager()
+
+    class Meta:
+        unique_together = (('logger', 'server_name', 'checksum'),)
+        verbose_name_plural = _('summaries')
+        verbose_name = _('summary')
+    
+    def __unicode__(self):
+        return "(%s) %s: %s" % (self.times_seen, self.class_name, self.error())
+
+    def natural_key(self):
+        return (self.logger, self.server_name, self.checksum)
 
     @staticmethod
     @transaction.commit_on_success
@@ -130,54 +144,17 @@ class ErrorBatch(Model):
             except Exception, exc:
                 warnings.warn(u'Unable to process log entry: %s' % (exc,))
 
-class Error(Model):
-    logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
-    class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
-    level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
-    message         = models.TextField()
-    traceback       = models.TextField(blank=True, null=True)
+class Error(ErrorBase):
     datetime        = models.DateTimeField(default=datetime.datetime.now, db_index=True)
-    url             = models.URLField(verify_exists=False, null=True, blank=True)
     data            = JSONDictField(blank=True, null=True)
-    server_name     = models.CharField(max_length=128, db_index=True)
-    checksum        = models.CharField(max_length=32, db_index=True, null=True)
-
-    objects         = DBLogManager()
 
     class Meta:
-        verbose_name = 'Message'
-        verbose_name_plural = 'Messages'
+        verbose_name = _('message')
+        verbose_name_plural = _('messages')
 
     def __unicode__(self):
         return "%s: %s" % (self.class_name, smart_unicode(self.message))
 
-    def shortened_url(self):
-        if not self.url:
-            return '(No URL)'
-        url = self.url
-        if len(url) > 60:
-            url = url[:60] + '...'
-        return url
-    shortened_url.short_description = 'URL'
-    shortened_url.admin_order_field = 'url'
-    
-    def full_url(self):
-        return self.data.get('url') or self.url
-    full_url.short_description = 'URL'
-    full_url.admin_order_field = 'url'
-
-    def error(self):
-        message = smart_unicode(self.message)
-        if len(message) > 100:
-            message = message[:97] + '...'
-        if self.class_name:
-            return "%s: %s" % (self.class_name, message)
-        return message
-    error.short_description = 'Error'
-
-    def get_absolute_url(self):
-        return self.url
-    
     def save(self, *args, **kwargs):
         if not self.checksum:
             self.checksum = construct_checksum(self)
diff --git a/djangodblog/tests/fixtures/feeds.json b/djangodblog/tests/fixtures/feeds.json
new file mode 100644
index 0000000000..6fa93082fe
--- /dev/null
+++ b/djangodblog/tests/fixtures/feeds.json
@@ -0,0 +1,35 @@
+[
+  {
+    "fields": {
+      "status": 0, 
+      "first_seen": "2010-07-22 20:14:18", 
+      "server_name": "dcramer.local", 
+      "level": 40, 
+      "class_name": "TypeError", 
+      "checksum": "0edb43b51699ce88eed908b340feb17f", 
+      "times_seen": 1, 
+      "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/djangodblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
+      "url": "http://localhost:8000/admin/djangodblog/errorbatch/", 
+      "logger": "root", 
+      "message": "exceptions must be old-style classes or derived from BaseException, not NoneType", 
+      "last_seen": "2010-07-22 20:14:18"
+    }, 
+    "model": "djangodblog.errorbatch", 
+    "pk": 1
+  }, 
+  {
+    "fields": {
+      "server_name": "dcramer.local", 
+      "level": 40, 
+      "class_name": "TypeError", 
+      "checksum": "0edb43b51699ce88eed908b340feb17f", 
+      "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/djangodblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
+      "datetime": "2010-07-22 20:14:18", 
+      "url": "http://localhost:8000/admin/djangodblog/errorbatch/", 
+      "logger": "root", 
+      "message": "exceptions must be old-style classes or derived from BaseException, not NoneType"
+    }, 
+    "model": "djangodblog.error", 
+    "pk": 1
+  }
+]
diff --git a/djangodblog/tests/tests.py b/djangodblog/tests/tests.py
index d98f33e02d..7506db1a8e 100644
--- a/djangodblog/tests/tests.py
+++ b/djangodblog/tests/tests.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 
 from django.core.handlers.wsgi import WSGIRequest
+from django.core.urlresolvers import reverse
 from django.core.signals import got_request_exception
 from django.test.client import Client
 from django.test import TestCase
@@ -481,3 +482,24 @@ class DBLogViewsTest(TestCase):
         self.assertEquals(last.class_name, 'Exception')
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, 'view exception')
+
+class DBLogFeedsTest(TestCase):
+    fixtures = ['djangodblog/tests/fixtures/feeds.json']
+    
+    def testErrorFeed(self):
+        response = self.client.get(reverse('dblog-feed-messages'))
+        self.assertEquals(response.status_code, 200)
+        self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
+        self.assertTrue('<link>http://testserver/admin/djangodblog/error/</link>' in response.content)
+        self.assertTrue('<title>log messages</title>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/djangodblog/error/1/</link>' in response.content)
+        self.assertTrue('<title>TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
+
+    def testSummaryFeed(self):
+        response = self.client.get(reverse('dblog-feed-summaries'))
+        self.assertEquals(response.status_code, 200)
+        self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
+        self.assertTrue('<link>http://testserver/admin/djangodblog/errorbatch/</link>' in response.content)
+        self.assertTrue('<title>log summaries</title>' in response.content)
+        self.assertTrue('<link>http://testserver/admin/djangodblog/errorbatch/1/</link>' in response.content)
+        self.assertTrue('<title>(1) TypeError: TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
\ No newline at end of file
diff --git a/djangodblog/tests/urls.py b/djangodblog/tests/urls.py
index 9139914cf5..aa968c59c6 100644
--- a/djangodblog/tests/urls.py
+++ b/djangodblog/tests/urls.py
@@ -1,5 +1,10 @@
 from django.conf.urls.defaults import *
+from django.contrib import admin
+
+admin.autodiscover()
 
 urlpatterns = patterns('',
+    url(r'^admin/', include(admin.site.urls)),
     url(r'^$', 'djangodblog.tests.views.raise_exc', name='dblog-raise-exc'),
+    url(r'', include('djangodblog.urls')),
 )
\ No newline at end of file
diff --git a/djangodblog/urls.py b/djangodblog/urls.py
new file mode 100644
index 0000000000..46d2cc1298
--- /dev/null
+++ b/djangodblog/urls.py
@@ -0,0 +1,12 @@
+from django.conf import settings
+from django.conf.urls.defaults import *
+from django.utils.hashcompat import md5_constructor
+
+from feeds import ErrorFeed, SummaryFeed
+
+hashed_secret = md5_constructor(settings.SECRET_KEY).hexdigest()
+
+urlpatterns = patterns('',
+    url(r'feeds/%s/messages.xml' % hashed_secret, ErrorFeed(), name='dblog-feed-messages'),
+    url(r'feeds/%s/summaries.xml' % hashed_secret, SummaryFeed(), name='dblog-feed-summaries'),
+)
diff --git a/runtests.py b/runtests.py
index f59c202265..7848b0b794 100644
--- a/runtests.py
+++ b/runtests.py
@@ -9,13 +9,19 @@ if not settings.configured:
     settings.configure(
         DATABASE_ENGINE='sqlite3',
         INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.admin',
+            'django.contrib.sessions',
+
             # Included to fix Disqus' test Django which solves IntegrityError case
             'django.contrib.contenttypes',
+
             'djangodblog',
+
             # No fucking idea why I have to do this
             'djangodblog.tests',
         ],
-        ROOT_URLCONF=None,
+        ROOT_URLCONF='djangodblog.tests.urls',
     )
 
 from django.test.simple import run_tests
