commit b4856f0a0a65d82f22b13885705232356a2ef95f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Feb 15 11:41:54 2018 -0800

    ref: Refactor alert rules API to return object instead of HTML (#7179)
    
    Update the alert rules API response to return a formfields object instead of a HTML string.

diff --git a/src/sentry/api/endpoints/project_rules_configuration.py b/src/sentry/api/endpoints/project_rules_configuration.py
index 49fc8325fd..8cc42e777e 100644
--- a/src/sentry/api/endpoints/project_rules_configuration.py
+++ b/src/sentry/api/endpoints/project_rules_configuration.py
@@ -23,9 +23,11 @@ class ProjectRulesConfigurationEndpoint(ProjectEndpoint):
             context = {
                 'id': node.id,
                 'label': node.label,
-                'html': node.render_form(),
             }
 
+            if hasattr(node, 'form_fields'):
+                context['formFields'] = node.form_fields
+
             if not node.is_enabled():
                 continue
 
diff --git a/src/sentry/rules/actions/notify_event_service.py b/src/sentry/rules/actions/notify_event_service.py
index 79ad47e762..ca1ab77e14 100644
--- a/src/sentry/rules/actions/notify_event_service.py
+++ b/src/sentry/rules/actions/notify_event_service.py
@@ -29,8 +29,16 @@ class NotifyEventServiceForm(forms.Form):
 
 
 class NotifyEventServiceAction(EventAction):
-    form_cls = NotifyEventServiceForm
-    label = 'Send a notification via {service}'
+    def __init__(self, *args, **kwargs):
+        super(NotifyEventServiceAction, self).__init__(*args, **kwargs)
+        self.label = 'Send a notification via {service}'
+        self.form_cls = NotifyEventServiceForm
+        self.form_fields = {
+            'service': {
+                'type': 'choice',
+                'choices': [[i.slug, i.title] for i in self.get_plugins()]
+            }
+        }
 
     def after(self, event, state):
         service = self.get_option('service')
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index f7ca8dbc5d..e1994a8e78 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -38,13 +38,9 @@ by the rule's logic. Each rule condition may be associated with a form.
 from __future__ import absolute_import
 
 import logging
-import re
 import six
 
 from collections import namedtuple
-from django.utils.safestring import mark_safe
-
-from sentry.utils.html import escape
 
 CallbackFuture = namedtuple('CallbackFuture', ['callback', 'kwargs'])
 
@@ -85,18 +81,6 @@ class RuleBase(object):
     def render_label(self):
         return self.label.format(**self.data)
 
-    def render_form(self):
-        if not self.form_cls:
-            return self.label
-
-        form = self.get_form_instance()
-
-        def replace_field(match):
-            field = match.group(1)
-            return six.text_type(form[field])
-
-        return mark_safe(re.sub(r'{([^}]+)}', replace_field, escape(self.label)))
-
     def validate_form(self):
         if not self.form_cls:
             return True
diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index 1882e763a7..3b83fbbf3c 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -69,8 +69,6 @@ class FixedTypeaheadInput(forms.TextInput):
 class EventAttributeForm(forms.Form):
     attribute = forms.CharField(
         widget=FixedTypeaheadInput(
-            attrs={'style': 'width:200px',
-                   'placeholder': 'i.e. exception.type'},
             choices=[{
                 'id': a,
                 'text': a
@@ -78,9 +76,7 @@ class EventAttributeForm(forms.Form):
         )
     )
     match = forms.ChoiceField(
-        MATCH_CHOICES.items(), widget=forms.Select(
-            attrs={'style': 'width:150px'},
-        )
+        MATCH_CHOICES.items(), widget=forms.Select()
     )
     value = forms.CharField(
         widget=forms.TextInput(
@@ -105,7 +101,22 @@ class EventAttributeCondition(EventCondition):
     """
     # TODO(dcramer): add support for stacktrace.vars.[name]
 
-    form_cls = EventAttributeForm
+    form_fields = {
+        'attribute': {
+            'type': 'choice',
+            'placeholder': 'i.e. exception.type',
+            'choices': [[a, a] for a in ATTR_CHOICES]
+        },
+        'match': {
+            'type': 'choice',
+            'choices': MATCH_CHOICES.items()
+        },
+        'value': {
+            'type': 'string',
+            'placeholder': 'value'
+        }
+    }
+
     label = u'An event\'s {attribute} value {match} {value}'
 
     def _get_attribute_values(self, event, attr):
diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index c240ee83fa..63314f1a39 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -33,13 +33,22 @@ class EventFrequencyForm(forms.Form):
         ]
     )
     value = forms.IntegerField(
-        widget=forms.TextInput(attrs={'placeholder': '100',
-                                      'type': 'number'})
+        widget=forms.TextInput(attrs={'type': 'number'})
     )
 
 
 class BaseEventFrequencyCondition(EventCondition):
     form_cls = EventFrequencyForm
+    form_fields = {
+        'value': {'type': 'number', 'placeholder': 100},
+        'interval': {
+            'type': 'choice',
+            'choices': [
+                (key, label) for key, (label, duration) in sorted(intervals.items(), key=lambda key____label__duration: key____label__duration[1][1])
+            ]
+        }
+    }
+
     label = NotImplemented  # subclass must implement
 
     def __init__(self, *args, **kwargs):
diff --git a/src/sentry/rules/conditions/level.py b/src/sentry/rules/conditions/level.py
index 925d724986..89674493af 100644
--- a/src/sentry/rules/conditions/level.py
+++ b/src/sentry/rules/conditions/level.py
@@ -48,6 +48,16 @@ class LevelEventForm(forms.Form):
 class LevelCondition(EventCondition):
     form_cls = LevelEventForm
     label = 'An event\'s level is {match} {level}'
+    form_fields = {
+        'level': {
+            'type': 'choice',
+            'choices': LEVEL_CHOICES.items()
+        },
+        'match': {
+            'type': 'choice',
+            'choices': MATCH_CHOICES.items()
+        }
+    }
 
     def passes(self, event, state, **kwargs):
         desired_level = self.get_option('level')
diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index da53e5b9de..d1f7b0182b 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -37,18 +37,30 @@ MATCH_CHOICES = OrderedDict(
 
 
 class TaggedEventForm(forms.Form):
-    key = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'key'}))
+    key = forms.CharField(widget=forms.TextInput())
     match = forms.ChoiceField(
-        MATCH_CHOICES.items(), widget=forms.Select(
-            attrs={'style': 'width:150px'},
-        )
+        MATCH_CHOICES.items(), widget=forms.Select()
     )
-    value = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'value'}))
+    value = forms.CharField(widget=forms.TextInput())
 
 
 class TaggedEventCondition(EventCondition):
-    form_cls = TaggedEventForm
     label = u'An event\'s tags match {key} {match} {value}'
+    form_cls = TaggedEventForm
+    form_fields = {
+        'key': {
+            'type': 'string',
+            'placeholder': 'key'
+        },
+        'match': {
+            'type': 'choice',
+            'choices': MATCH_CHOICES.items()
+        },
+        'value': {
+            'type': 'string',
+            'placeholder': 'value',
+        }
+    }
 
     def passes(self, event, state, **kwargs):
         key = self.get_option('key')
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
index 4ec2300f1f..74645c4766 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
@@ -3,11 +3,14 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import $ from 'jquery';
 
+import * as utils from './utils';
+
 class RuleNode extends React.Component {
   static propTypes = {
     data: PropTypes.object.isRequired,
     node: PropTypes.shape({
-      html: PropTypes.string.isRequired,
+      label: PropTypes.string.isRequired,
+      formFields: PropTypes.object,
     }).isRequired,
     onDelete: PropTypes.func.isRequired,
   };
@@ -24,31 +27,17 @@ class RuleNode extends React.Component {
       $el.attr('id', '');
       $el.val(this.props.data[el.name]);
     });
-
-    $html.find('select').select2();
-
-    $html.find('input.typeahead').each((_, el) => {
-      let $el = $(el);
-      $el.select2({
-        initSelection: function(option, callback) {
-          let $option = $(option);
-          callback({id: $option.val(), text: $option.val()});
-        },
-        data: $el.data('choices'),
-        createSearchChoice: function(term) {
-          return {id: $.trim(term), text: $.trim(term)};
-        },
-      });
-    });
   }
 
   render() {
     let {data, node} = this.props;
+    let html = utils.getComponent(node);
+
     return (
       <tr>
         <td className="rule-form">
           <input type="hidden" name="id" value={data.id} />
-          <span ref="html" dangerouslySetInnerHTML={{__html: node.html}} />
+          <span style={{display: 'flex', alignItems: 'center'}}>{html}</span>
         </td>
         <td className="align-right">
           <a onClick={this.props.onDelete}>
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/utils.jsx b/src/sentry/static/sentry/app/views/ruleEditor/utils.jsx
new file mode 100644
index 0000000000..6b1552b836
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/ruleEditor/utils.jsx
@@ -0,0 +1,48 @@
+import React from 'react';
+import {Select2Field} from '../../components/forms';
+
+function getChoiceField(name, data) {
+  return (
+    <Select2Field
+      name={name}
+      choices={data.choices}
+      key={name}
+      style={{marginBottom: 0}}
+    />
+  );
+}
+
+function getInputField(type, name, data) {
+  return (
+    <input
+      name={name}
+      type={type}
+      placeholder={data.placeholder}
+      key={name}
+      style={{height: 37}}
+    />
+  );
+}
+
+const getFieldTypes = {
+  choice: getChoiceField,
+  number: getInputField.bind(null, 'number'),
+  string: getInputField.bind(null, 'text'),
+};
+
+function getField(name, data) {
+  return getFieldTypes[data.type](name, data);
+}
+
+export function getComponent(node) {
+  const {label, formFields} = node;
+
+  return label.split(/({\w+})/).map(part => {
+    if (!/^{\w+}$/.test(part)) {
+      return part;
+    }
+
+    const key = part.slice(1, -1);
+    return formFields[key] ? getField(key, formFields[key]) : part;
+  });
+}
diff --git a/src/sentry/static/sentry/less/project-settings.less b/src/sentry/static/sentry/less/project-settings.less
index 15a184fbf3..b140446453 100644
--- a/src/sentry/static/sentry/less/project-settings.less
+++ b/src/sentry/static/sentry/less/project-settings.less
@@ -207,20 +207,6 @@
   }
 }
 
-.rule-action-list,
-.rule-condition-list {
-  .select2-container {
-    max-width: 40%;
-  }
-
-  .node-selector .select2-container {
-    width: 100%;
-    max-width: 100%;
-  }
-
-  margin-bottom: 20px;
-}
-
 /**
  * Install
  * ============================================================================
