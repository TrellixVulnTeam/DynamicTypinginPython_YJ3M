commit c0ed4d26d2ed38f3dfa895e8161db36a4837b4c2
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Jun 19 12:22:01 2019 +0200

    feat: Add transaction event type (#13702)
    
    * ref: Remove dead code
    
    * feat: Add transaction event type
    
    * fix: Remove dead comment
    
    * ref: Bump semaphore to 0.4.38
    
    * fix(build): Always update packages

diff --git a/.travis.yml b/.travis.yml
index cd9fc69708..4e4bef026a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -51,7 +51,7 @@ after_script:
   - |
       coverage_files=$(ls .artifacts/*coverage.xml || true)
       if [[ -n "$coverage_files" || -f .artifacts/coverage/cobertura-coverage.xml ]]; then
-        pip install codecov
+        pip install -U codecov
         codecov -e TEST_SUITE
       fi
   - ./bin/yarn global add @zeus-ci/cli
@@ -71,7 +71,7 @@ base_postgres: &postgres_default
     - postgresql
   install:
     - python setup.py install_egg_info
-    - pip install -e ".[dev,tests,optional]"
+    - pip install -U -e ".[dev,tests,optional]"
   before_script:
     - psql -c 'create database sentry;' -U postgres
   before_install:
@@ -95,7 +95,7 @@ base_acceptance: &acceptance_default
   install:
     - ./bin/yarn install --pure-lockfile
     - python setup.py install_egg_info
-    - pip install -e ".[dev,tests,optional]"
+    - pip install -U -e ".[dev,tests,optional]"
     - wget -N "https://chromedriver.storage.googleapis.com/$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE_74)/chromedriver_linux64.zip" -P ~/
     - unzip ~/chromedriver_linux64.zip -d ~/
     - rm ~/chromedriver_linux64.zip
@@ -115,7 +115,7 @@ matrix:
       name: 'Linter'
       env: TEST_SUITE=lint
       install:
-        - SENTRY_LIGHT_BUILD=1 pip install -e ".[dev,tests,optional]"
+        - SENTRY_LIGHT_BUILD=1 pip install -U -e ".[dev,tests,optional]"
         - find "$NODE_DIR" -type d -empty -delete
         - nvm install
         - ./bin/yarn install --pure-lockfile
@@ -137,7 +137,7 @@ matrix:
         - riak
       install:
         - python setup.py install_egg_info
-        - pip install -e ".[dev,tests,optional]"
+        - pip install -U -e ".[dev,tests,optional]"
       before_script:
         - psql -c 'create database sentry;' -U postgres
       before_install:
@@ -166,7 +166,7 @@ matrix:
         - redis-server
       install:
         - python setup.py install_egg_info
-        - pip install -e .
+        - pip install -U -e .
       before_script:
         - psql -c 'create database sentry;' -U postgres
 
@@ -203,7 +203,7 @@ matrix:
         - docker ps -a
       install:
         - python setup.py install_egg_info
-        - pip install -e ".[dev,tests,optional]"
+        - pip install -U -e ".[dev,tests,optional]"
         - pip install confluent-kafka
       before_script:
         - psql -c 'create database sentry;' -U postgres
diff --git a/requirements-base.txt b/requirements-base.txt
index 3078dda13d..0e03c1932b 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -56,7 +56,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.141.0
-semaphore>=0.4.37,<0.5.0
+semaphore>=0.4.38,<0.5.0
 sentry-sdk>=0.9.0
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/eventtypes/__init__.py b/src/sentry/eventtypes/__init__.py
index 609be3a8e0..62522098d8 100644
--- a/src/sentry/eventtypes/__init__.py
+++ b/src/sentry/eventtypes/__init__.py
@@ -4,16 +4,16 @@ from .base import DefaultEvent
 from .security import CspEvent, HpkpEvent, ExpectCTEvent, ExpectStapleEvent
 from .error import ErrorEvent
 from .manager import EventTypeManager
+from .transaction import TransactionEvent
 
-# types are ordered by priority, default should always be last
 default_manager = EventTypeManager()
+default_manager.register(DefaultEvent)
+default_manager.register(ErrorEvent)
 default_manager.register(CspEvent)
 default_manager.register(HpkpEvent)
 default_manager.register(ExpectCTEvent)
 default_manager.register(ExpectStapleEvent)
-default_manager.register(ErrorEvent)
-default_manager.register(DefaultEvent)
+default_manager.register(TransactionEvent)
 
 get = default_manager.get
 register = default_manager.register
-infer = default_manager.infer
diff --git a/src/sentry/eventtypes/base.py b/src/sentry/eventtypes/base.py
index 0e729b74b1..6c40c19e41 100644
--- a/src/sentry/eventtypes/base.py
+++ b/src/sentry/eventtypes/base.py
@@ -5,13 +5,13 @@ from warnings import warn
 from sentry.utils.strings import truncatechars, strip
 from sentry.utils.safe import get_path
 
+# Note: Detecting eventtypes is implemented in the semaphore Rust
+# library.
+
 
 class BaseEvent(object):
     id = None
 
-    def has_metadata(self, data):
-        raise NotImplementedError
-
     def get_metadata(self, data):
         raise NotImplementedError
 
@@ -30,10 +30,6 @@ class BaseEvent(object):
 class DefaultEvent(BaseEvent):
     key = 'default'
 
-    def has_metadata(self, data):
-        # the default event can always work
-        return True
-
     def get_metadata(self, data):
         message = strip(get_path(data, 'logentry', 'formatted') or
                         get_path(data, 'logentry', 'message'))
diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index 72b5888899..61b5512748 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import six
 
 from sentry.utils.safe import get_path, trim
 from sentry.utils.strings import truncatechars
@@ -25,10 +24,6 @@ def get_crash_location(exception, platform=None):
 class ErrorEvent(BaseEvent):
     key = 'error'
 
-    def has_metadata(self, data):
-        exception = get_path(data, 'exception', 'values', -1)
-        return exception and any(v is not None for v in six.itervalues(exception))
-
     def get_metadata(self, data):
         exception = get_path(data, 'exception', 'values', -1)
         if not exception:
diff --git a/src/sentry/eventtypes/manager.py b/src/sentry/eventtypes/manager.py
index 909949731e..a98d90093c 100644
--- a/src/sentry/eventtypes/manager.py
+++ b/src/sentry/eventtypes/manager.py
@@ -23,9 +23,3 @@ class EventTypeManager(object):
     def register(self, cls):
         self.__values.append(cls)
         self.__lookup[cls.key] = cls
-
-    def infer(self, data):
-        for eventtype in self.__values:
-            if eventtype(data).has_metadata():
-                return eventtype
-        raise Exception('No event types registered which can handle data.')
diff --git a/src/sentry/eventtypes/security.py b/src/sentry/eventtypes/security.py
index 8e0d558104..f0b5a577c2 100644
--- a/src/sentry/eventtypes/security.py
+++ b/src/sentry/eventtypes/security.py
@@ -6,9 +6,6 @@ from .base import BaseEvent
 class CspEvent(BaseEvent):
     key = 'csp'
 
-    def has_metadata(self, data):
-        return data.get('csp') is not None
-
     def get_metadata(self, data):
         from sentry.interfaces.security import Csp
         # TODO(dcramer): pull get message into here to avoid instantiation
@@ -31,9 +28,6 @@ class CspEvent(BaseEvent):
 class HpkpEvent(BaseEvent):
     key = 'hpkp'
 
-    def has_metadata(self, data):
-        return data.get('hpkp') is not None
-
     def get_metadata(self, data):
         from sentry.interfaces.security import Hpkp
         hpkp = Hpkp.to_python(data['hpkp'])
@@ -52,9 +46,6 @@ class HpkpEvent(BaseEvent):
 class ExpectCTEvent(BaseEvent):
     key = 'expectct'
 
-    def has_metadata(self, data):
-        return data.get('expectct') is not None
-
     def get_metadata(self, data):
         from sentry.interfaces.security import ExpectCT
         expectct = ExpectCT.to_python(data['expectct'])
@@ -73,9 +64,6 @@ class ExpectCTEvent(BaseEvent):
 class ExpectStapleEvent(BaseEvent):
     key = 'expectstaple'
 
-    def has_metadata(self, data):
-        return data.get('expectstaple') is not None
-
     def get_metadata(self, data):
         from sentry.interfaces.security import ExpectStaple
         expectstaple = ExpectStaple.to_python(data['expectstaple'])
diff --git a/src/sentry/eventtypes/transaction.py b/src/sentry/eventtypes/transaction.py
new file mode 100644
index 0000000000..e03c9eb93a
--- /dev/null
+++ b/src/sentry/eventtypes/transaction.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from sentry.utils.safe import get_path
+
+from .base import BaseEvent
+
+
+class TransactionEvent(BaseEvent):
+    key = 'transaction'
+
+    def get_metadata(self, data):
+        description = get_path(data, 'contexts', 'trace', 'description')
+        transaction = get_path(data, 'transaction')
+        return {
+            'title': description or transaction,
+            'location': transaction
+        }
+
+    def get_title(self, metadata):
+        return metadata['title']
+
+    def get_location(self, metadata):
+        return metadata['location']
diff --git a/tests/sentry/eventtypes/test_error.py b/tests/sentry/eventtypes/test_error.py
index 1c5532fca0..141fabcce6 100644
--- a/tests/sentry/eventtypes/test_error.py
+++ b/tests/sentry/eventtypes/test_error.py
@@ -5,47 +5,6 @@ from sentry.testutils import TestCase
 
 
 class ErrorEventTest(TestCase):
-    def test_has_metadata_none(self):
-        inst = ErrorEvent()
-        assert not inst.has_metadata({})
-
-        inst = ErrorEvent()
-        data = {'exception': None}
-        assert not inst.has_metadata(data)
-
-        inst = ErrorEvent()
-        data = {'exception': {'values': None}}
-        assert not inst.has_metadata(data)
-
-        inst = ErrorEvent()
-        data = {'exception': {'values': [None]}}
-        assert not inst.has_metadata(data)
-
-        inst = ErrorEvent()
-        data = {'exception': {'values': [{}]}}
-        assert not inst.has_metadata(data)
-
-        inst = ErrorEvent()
-        data = {'exception': {'values': [{
-            'type': None,
-            'value': None,
-        }]}}
-        assert not inst.has_metadata(data)
-
-    def test_has_metadata(self):
-        inst = ErrorEvent()
-        data = {'exception': {'values': [{
-            'type': 'Exception',
-            'value': 'Foo',
-        }]}}
-        assert inst.has_metadata(data)
-
-        inst = ErrorEvent()
-        data = {'exception': {'values': [{
-            'stacktrace': {},
-        }]}}
-        assert inst.has_metadata(data)
-
     def test_get_metadata(self):
         inst = ErrorEvent()
         data = {'exception': {'values': [{
