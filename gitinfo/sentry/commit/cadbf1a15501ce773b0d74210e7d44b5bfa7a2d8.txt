commit cadbf1a15501ce773b0d74210e7d44b5bfa7a2d8
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Mar 2 11:32:45 2018 -0800

    ref(stream): Stream does not use shared function to compute state (#7429)
    
    Do not use getQueryState to compute state in multiple places as it should be different in each case.
    
    Fix invalid saved search query so it does not load forever
    
    Fix incorrect tests

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index cec226129c..8fdbc25217 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -62,11 +62,18 @@ const Stream = createReactClass({
     let hasEnvironmentsFeature = new Set(this.getOrganization().features).has(
       'environments'
     );
+    let currentQuery = this.props.location.query || {};
+    let sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
+
+    let hasQuery = 'query' in currentQuery;
+    let validStatsPeriods = new Set(['14d', '24h']);
+    let statsPeriod =
+      validStatsPeriods.has(currentQuery.statsPeriod) || DEFAULT_STATS_PERIOD;
 
     return {
       groupIds: [],
-      isDefaultSearch: null,
-      searchId,
+      isDefaultSearch: false,
+      searchId: hasQuery ? null : searchId,
       // if we have no query then we can go ahead and fetch data
       loading: searchId || !this.hasQuery() ? true : false,
       savedSearchLoading: true,
@@ -74,21 +81,20 @@ const Stream = createReactClass({
       selectAllActive: false,
       multiSelected: false,
       anySelected: false,
-      statsPeriod: DEFAULT_STATS_PERIOD,
+      statsPeriod,
       realtimeActive,
       pageLinks: '',
       queryCount: null,
       dataLoading: true,
       error: false,
-      query: '',
-      sort: DEFAULT_SORT,
+      query: hasQuery ? currentQuery.query : '',
+      sort,
       tags: StreamTagStore.getAllTags(),
       tagsLoading: true,
       isSidebarVisible: false,
       processingIssues: null,
       activeEnvironment: this.props.environment,
       hasEnvironmentsFeature,
-      ...this.getQueryState(),
     };
   },
 
@@ -106,10 +112,6 @@ const Stream = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (this.state.loading) {
-      return;
-    }
-
     if (nextProps.environment !== this.props.environment) {
       const environment = nextProps.environment;
       const query = queryString.getQueryStringWithEnvironment(
@@ -290,8 +292,7 @@ const Stream = createReactClass({
   getQueryState(props) {
     props = props || this.props;
     let currentQuery = props.location.query || {};
-    // state may not yet be defined at this point
-    let state = this.state || {};
+    let state = this.state;
 
     let hasQuery = 'query' in currentQuery;
 
@@ -314,9 +315,6 @@ const Stream = createReactClass({
       isDefaultSearch: false,
     };
 
-    // state is not yet defined
-    if (this.state === null) return newState;
-
     if (searchId) {
       let searchResult = this.state.savedSearchList.filter(search => {
         return search.id === searchId;
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 8d1665edef..de18315faf 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -25,6 +25,7 @@ describe('Stream', function() {
 
   beforeEach(function() {
     sandbox = sinon.sandbox.create();
+
     MockApiClient.addMockResponse({
       url: '/projects/123/456/issues/',
       body: [TestStubs.Group()],
@@ -382,9 +383,8 @@ describe('Stream', function() {
         anySelected: false,
         statsPeriod: '24h',
         realtimeActive: false,
-        pageLinks: '',
         loading: false,
-        dataLoading: true,
+        dataLoading: false,
         error: false,
         query: '',
         sort: 'freq',
@@ -395,7 +395,7 @@ describe('Stream', function() {
         context,
       }).instance();
 
-      let actual = stream.getInitialState();
+      let actual = stream.state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
 
@@ -413,9 +413,8 @@ describe('Stream', function() {
         anySelected: false,
         statsPeriod: '24h',
         realtimeActive: false,
-        pageLinks: '',
         loading: false,
-        dataLoading: true,
+        dataLoading: false,
         error: false,
         query: 'is:unresolved',
         sort: 'freq',
@@ -430,7 +429,7 @@ describe('Stream', function() {
         savedSearchList: [{id: '789', query: 'is:unresolved', name: 'test'}],
       });
 
-      let actual = wrapper.instance().getInitialState();
+      let actual = wrapper.instance().state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
 
@@ -448,8 +447,7 @@ describe('Stream', function() {
         anySelected: false,
         statsPeriod: '24h',
         realtimeActive: false,
-        pageLinks: '',
-        loading: false,
+        loading: true,
         dataLoading: true,
         error: false,
         query: '',
@@ -461,7 +459,7 @@ describe('Stream', function() {
         context,
       }).instance();
 
-      let actual = stream.getInitialState();
+      let actual = stream.state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
   });
