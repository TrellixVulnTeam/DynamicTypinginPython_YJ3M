commit 02e8b00748ba27ca08e424e2ca2d4cbaaab4d249
Author: Ted Kaemming <ted@kaemming.com>
Date:   Fri Dec 4 15:55:17 2015 -0800

    Allow passing processor to ``soft_break`` for hyphenation.

diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index ab2c46db6e..117fa4bdf6 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -9,6 +9,7 @@ sentry.templatetags.sentry_helpers
 #      INSTALLED_APPS
 from __future__ import absolute_import
 
+import functools
 import os.path
 import pytz
 import six
@@ -39,7 +40,8 @@ from sentry.utils import json, to_unicode
 from sentry.utils.avatar import get_gravatar_url
 from sentry.utils.javascript import to_json
 from sentry.utils.strings import (
-    soft_break,
+    soft_break as _soft_break,
+    soft_hyphenate,
     truncatechars,
 )
 from templatetag_sugar.register import tag
@@ -55,7 +57,6 @@ register = template.Library()
 truncatechars = register.filter(stringfilter(truncatechars))
 truncatechars.is_safe = True
 
-register.filter(soft_break)
 register.filter(to_json)
 
 
@@ -419,3 +420,12 @@ def load_captcha():
     return {
         'api_key': settings.RECAPTCHA_PUBLIC_KEY,
     }
+
+
+@register.filter
+def soft_break(value, length):
+    return _soft_break(
+        value,
+        length,
+        functools.partial(soft_hyphenate, length=max(length // 10, 10)),
+    )
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index b9ae0a7ba4..f7f861ec4c 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -51,7 +51,7 @@ def soft_hyphenate(value, length, hyphen=u'\u00ad'):
     return hyphen.join([value[i:(i + length)] for i in xrange(0, len(value), length)])
 
 
-def soft_break(value, length):
+def soft_break(value, length, process=lambda chunk: chunk):
     """
     Encourages soft breaking of text values above a maximum length by adding
     zero-width spaces after common delimeters, as well as soft-hyphenating long
@@ -59,7 +59,7 @@ def soft_break(value, length):
     """
     delimiters = re.compile(r'([{}]+)'.format(''.join(map(re.escape, ',.$:/+@!?()<>[]{}'))))
 
-    def process(match):
+    def soft_break_delimiter(match):
         results = []
 
         value = match.group(0)
@@ -68,10 +68,8 @@ def soft_break(value, length):
             if i % 2 == 1:  # check if this is this a delimiter
                 results.extend([chunk, u'\u200b'])
             else:
-                # TODO: This could be more intelligent -- this could be a
-                # little weird if it soft hyphenated a number, for instance?
-                results.append(soft_hyphenate(chunk, length))
+                results.append(process(chunk))
 
         return u''.join(results).rstrip(u'\u200b')
 
-    return re.sub(r'\S{{{},}}'.format(length), process, value)
+    return re.sub(r'\S{{{},}}'.format(length), soft_break_delimiter, value)
diff --git a/tests/sentry/utils/test_strings.py b/tests/sentry/utils/test_strings.py
index 8b06d5dc53..9886793b62 100644
--- a/tests/sentry/utils/test_strings.py
+++ b/tests/sentry/utils/test_strings.py
@@ -1,4 +1,8 @@
-from sentry.utils.strings import soft_break
+import functools
+from sentry.utils.strings import (
+    soft_break,
+    soft_hyphenate,
+)
 
 
 ZWSP = u'\u200b'  # zero width space
@@ -11,5 +15,6 @@ def test_soft_break():
 
 
 def test_soft_break_and_hyphenate():
-    assert soft_break('com.reallyreallyreally.long.path', 6) == \
+    hyphenate = functools.partial(soft_hyphenate, length=6)
+    assert soft_break('com.reallyreallyreally.long.path', 6, hyphenate) == \
         ZWSP.join(['com.', SHY.join(['really'] * 3) + '.', 'long.', 'path'])
