commit b7c6c0739d43b1de9ba356b96cfcd061a3d65034
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Dec 8 16:42:32 2017 -0800

    ref(ui): Add remove and transfer project sections

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 057b2f7004..19c9e5c350 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -128,6 +128,7 @@ class ProjectSerializer(Serializer):
             'features': feature_list,
             'status': status_label,
             'platform': obj.platform,
+            'isInternal': obj.is_internal_project()
         }
         if 'stats' in attrs:
             context['stats'] = attrs['stats']
diff --git a/src/sentry/static/sentry/app/mixins/organizationState.jsx b/src/sentry/static/sentry/app/mixins/organizationState.jsx
index e1ee149bda..2678daab6e 100644
--- a/src/sentry/static/sentry/app/mixins/organizationState.jsx
+++ b/src/sentry/static/sentry/app/mixins/organizationState.jsx
@@ -1,6 +1,6 @@
 import SentryTypes from '../proptypes';
 
-let OrganizationState = {
+let OrganizationStateMixin = {
   contextTypes: {
     organization: SentryTypes.Organization,
   },
@@ -22,4 +22,22 @@ let OrganizationState = {
   },
 };
 
-export default OrganizationState;
+export default OrganizationStateMixin;
+
+// Non-mixin version for use with es6 components
+export const getOrganizationState = function(org) {
+  return {
+    getOrganization: () => {
+      return org;
+    },
+    getAccess: () => {
+      return new Set(org.access);
+    },
+    getFeatures: () => {
+      return new Set(org.features);
+    },
+    getOnboardingTasks: () => {
+      return new Set(org.onboardingTasks);
+    },
+  };
+};
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index abbcf0e0f2..402a0984aa 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -10,6 +10,7 @@ import {
 } from '../components/forms';
 import {t, tct} from '../locale';
 import AsyncView from './asyncView';
+import {getOrganizationState} from '../mixins/organizationState';
 
 class ListAsTextareaField extends TextareaField {
   getValue(props, context) {
@@ -69,6 +70,80 @@ export default class ProjectGeneralSettings extends AsyncView {
     return val + ' hour' + (val != 1 ? 's' : '');
   }
 
+  renderRemoveProject() {
+    let {orgId, projectId} = this.props.params;
+
+    let project = this.state.data;
+    let isProjectAdmin = getOrganizationState(this.props.organization)
+      .getAccess()
+      .has('project:admin');
+
+    if (!isProjectAdmin) {
+      return (
+        <p>{t('You do not have the required permission to remove this project.')}</p>
+      );
+    } else if (project.isInternal) {
+      return (
+        <p>
+          {t(
+            'This project cannot be removed. It is used internally by the Sentry server.'
+          )}
+        </p>
+      );
+    } else {
+      return (
+        <p>
+          <a
+            href={`/${orgId}/${projectId}/settings/remove/`}
+            className="btn btn-danger pull-right"
+          >
+            {t('Remove Project')}
+          </a>
+          Remove the <strong>{project.slug}</strong> project and all related data.
+          <br />
+          Careful, this action cannot be undone.
+        </p>
+      );
+    }
+  }
+
+  renderTransferProject() {
+    let {orgId, projectId} = this.props.params;
+
+    let project = this.state.data;
+    let isProjectAdmin = getOrganizationState(this.props.organization)
+      .getAccess()
+      .has('project:admin');
+
+    if (!isProjectAdmin) {
+      return (
+        <p>{t('You do not have the required permission to transfer this project.')}</p>
+      );
+    } else if (project.isInternal) {
+      return (
+        <p>
+          {t(
+            'This project cannot be removed. It is used internally by the Sentry server.'
+          )}
+        </p>
+      );
+    } else {
+      return (
+        <p>
+          <a
+            href={`/${orgId}/${projectId}/settings/transfer/`}
+            className="btn btn-danger pull-right"
+          >
+            {t('Transfer Project')}
+          </a>
+          Transfer the <strong>{project.slug}</strong> project and all related data.
+          <br />
+          Careful, this action cannot be undone.
+        </p>
+      );
+    }
+  }
+
   renderBody() {
     let project = this.state.data;
     let initialData = {
@@ -274,6 +349,18 @@ export default class ProjectGeneralSettings extends AsyncView {
               />
             </div>
           </div>
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Remove Project')}</h3>
+            </div>
+            <div className="box-content with-padding">{this.renderRemoveProject()}</div>
+          </div>
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Transfer Project')}</h3>
+            </div>
+            <div className="box-content with-padding">{this.renderTransferProject()}</div>
+          </div>
         </ApiForm>
       </div>
     );
