commit 225d86aa42e5578445e2f39d26a37f41daad1b8c
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Dec 12 13:52:44 2017 -0800

    feat(api): Add environment filtering to additional TSDB queries (#6737)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 14d183c4da..2ed021d72e 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import functools
 import logging
 import six
 import time
@@ -221,9 +222,27 @@ class Endpoint(APIView):
 
 
 class EnvironmentMixin(object):
+    def _get_environment_id_func(self, request, organization_id):
+        """\
+        Creates a function that when called returns the environment_id
+        associated with a request object, or ``None`` if no environment was
+        provided. If the environment doesn't exist, an ``Environment.DoesNotExist``
+        exception will be raised.
+
+        This returns as a callable since some objects outside of the API
+        endpoint need to handle the "environment was provided but does not
+        exist" state in addition to the two non-exceptional states (the
+        environment was provided and exists, or the environment was not
+        provided.)
+        """
+        return functools.partial(
+            self._get_environment_id_from_request,
+            request,
+            organization_id,
+        )
+
     def _get_environment_id_from_request(self, request, organization_id):
         environment = self._get_environment_from_request(request, organization_id)
-
         return environment and environment.id
 
     def _get_environment_from_request(self, request, organization_id):
diff --git a/src/sentry/api/bases/organizationissues.py b/src/sentry/api/bases/organizationissues.py
index ce48abca2e..e2b5d0967a 100644
--- a/src/sentry/api/bases/organizationissues.py
+++ b/src/sentry/api/bases/organizationissues.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
+from sentry.api.base import EnvironmentMixin
 from sentry.api.serializers import serialize, StreamGroupSerializer
 from sentry.api.paginator import OffsetPaginator
 from sentry.models import (Group, GroupStatus, OrganizationMemberTeam, Project, ProjectStatus)
@@ -11,7 +12,7 @@ from .organizationmember import OrganizationMemberEndpoint
 ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
 
 
-class OrganizationIssuesEndpoint(OrganizationMemberEndpoint):
+class OrganizationIssuesEndpoint(OrganizationMemberEndpoint, EnvironmentMixin):
     def get_queryset(self, request, organization, member, project_list):
         # Must return a 'sorty_by' selector for pagination that is a datetime
         return Group.objects.none()
@@ -51,22 +52,23 @@ class OrganizationIssuesEndpoint(OrganizationMemberEndpoint):
             project__status=ProjectStatus.VISIBLE,
         )
 
+        def on_results(results):
+            results = serialize(
+                results, request.user, StreamGroupSerializer(
+                    environment_id_func=self._get_environment_id_func(request, organization.id),
+                    stats_period=stats_period,
+                )
+            )
+
+            if request.GET.get('status') == 'unresolved':
+                results = [r for r in results if r['status'] == 'unresolved']
+
+            return results
+
         return self.paginate(
             request=request,
             queryset=queryset,
             order_by='-sort_by',
             paginator_cls=OffsetPaginator,
-            on_results=lambda x: self._on_results(request, x, stats_period),
+            on_results=on_results,
         )
-
-    def _on_results(self, request, results, stats_period):
-        results = serialize(
-            results, request.user, StreamGroupSerializer(
-                stats_period=stats_period,
-            )
-        )
-
-        if request.GET.get('status') == 'unresolved':
-            results = [r for r in results if r['status'] == 'unresolved']
-
-        return results
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index a0289111c0..78f2de0405 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from datetime import timedelta
+import functools
 import logging
 from uuid import uuid4
 
@@ -188,9 +189,26 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
 
         action_list = self._get_actions(request, group)
 
+        if first_release:
+            first_release = self._get_release_info(request, group, first_release)
+        if last_release:
+            last_release = self._get_release_info(request, group, last_release)
+
+        try:
+            environment_id = self._get_environment_id_from_request(
+                request, group.project.organization_id)
+        except Environment.DoesNotExist:
+            get_range = lambda model, keys, start, end, **kwargs: \
+                {k: tsdb.make_series(0, start, end) for k in keys}
+            tags = []
+        else:
+            get_range = functools.partial(tsdb.get_range, environment_id=environment_id)
+            tags = tagstore.get_group_tag_keys(
+                group.project_id, group.id, environment_id, limit=100)
+
         now = timezone.now()
         hourly_stats = tsdb.rollup(
-            tsdb.get_range(
+            get_range(
                 model=tsdb.models.group,
                 keys=[group.id],
                 end=now,
@@ -198,7 +216,7 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
             ), 3600
         )[group.id]
         daily_stats = tsdb.rollup(
-            tsdb.get_range(
+            get_range(
                 model=tsdb.models.group,
                 keys=[group.id],
                 end=now,
@@ -206,20 +224,6 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
             ), 3600 * 24
         )[group.id]
 
-        if first_release:
-            first_release = self._get_release_info(request, group, first_release)
-        if last_release:
-            last_release = self._get_release_info(request, group, last_release)
-
-        try:
-            environment_id = self._get_environment_id_from_request(
-                request, group.project.organization_id)
-        except Environment.DoesNotExist:
-            tags = []
-        else:
-            tags = tagstore.get_group_tag_keys(
-                group.project_id, group.id, environment_id, limit=100)
-
         participants = list(
             User.objects.filter(
                 groupsubscription__is_active=True,
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 7739135cd8..b64972799d 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import, division, print_function
 
 from datetime import timedelta
+import functools
 import logging
 from uuid import uuid4
 
@@ -269,8 +270,13 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
             # disable stats
             stats_period = None
 
-        query = request.GET.get('query', '').strip()
+        serializer = functools.partial(
+            StreamGroupSerializer,
+            environment_id_func=self._get_environment_id_func(request, project.organization_id),
+            stats_period=stats_period,
+        )
 
+        query = request.GET.get('query', '').strip()
         if query:
             matching_group = None
             matching_event = None
@@ -302,11 +308,8 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
             if matching_group is not None:
                 response = Response(
                     serialize(
-                        [matching_group], request.user,
-                        StreamGroupSerializer(
-                            stats_period=stats_period,
-                            matching_event_id=getattr(
-                                matching_event, 'id', None)
+                        [matching_group], request.user, serializer(
+                            matching_event_id=getattr(matching_event, 'id', None),
                         )
                     )
                 )
@@ -332,9 +335,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
 
         results = list(cursor_result)
 
-        context = serialize(
-            results, request.user, StreamGroupSerializer(
-                stats_period=stats_period))
+        context = serialize(results, request.user, serializer())
 
         # HACK: remove auto resolved entries
         if query_kwargs.get('status') == GroupStatus.UNRESOLVED:
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index b3a84905cf..e4cdd01cf2 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -13,7 +13,7 @@ from sentry import tagstore, tsdb
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.constants import LOG_LEVELS, StatsPeriod
 from sentry.models import (
-    Group, GroupAssignee, GroupBookmark, GroupMeta, GroupResolution, GroupSeen, GroupSnooze,
+    Environment, Group, GroupAssignee, GroupBookmark, GroupMeta, GroupResolution, GroupSeen, GroupSnooze,
     GroupShare, GroupStatus, GroupSubscription, GroupSubscriptionReason, User, UserOption,
     UserOptionValue
 )
@@ -35,6 +35,9 @@ disabled = object()
 
 @register(Group)
 class GroupSerializer(Serializer):
+    def __init__(self, environment_id_func=None):
+        self.environment_id_func = environment_id_func if environment_id_func is not None else lambda: None
+
     def _get_subscriptions(self, item_list, user):
         """
         Returns a mapping of group IDs to a two-tuple of (subscribed: bool,
@@ -329,7 +332,9 @@ class StreamGroupSerializer(GroupSerializer):
         '24h': StatsPeriod(24, timedelta(hours=1)),
     }
 
-    def __init__(self, stats_period=None, matching_event_id=None):
+    def __init__(self, environment_id_func=None, stats_period=None, matching_event_id=None):
+        super(StreamGroupSerializer, self).__init__(environment_id_func)
+
         if stats_period is not None:
             assert stats_period in self.STATS_PERIOD_CHOICES
 
@@ -345,13 +350,20 @@ class StreamGroupSerializer(GroupSerializer):
 
             segments, interval = self.STATS_PERIOD_CHOICES[self.stats_period]
             now = timezone.now()
-            stats = tsdb.get_range(
-                model=tsdb.models.group,
-                keys=group_ids,
-                end=now,
-                start=now - ((segments - 1) * interval),
-                rollup=int(interval.total_seconds()),
-            )
+            query_params = {
+                'start': now - ((segments - 1) * interval),
+                'end': now,
+                'rollup': int(interval.total_seconds()),
+            }
+            try:
+                stats = tsdb.get_range(
+                    model=tsdb.models.group,
+                    keys=group_ids,
+                    environment_id=self.environment_id_func(),
+                    **query_params
+                )
+            except Environment.DoesNotExist:
+                stats = {key: tsdb.make_series(0, **query_params) for key in group_ids}
 
             for item in item_list:
                 attrs[item].update({
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index be399e88ec..546ad225e6 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, print_function
 
+import mock
 import six
 
 from datetime import timedelta
@@ -7,7 +8,7 @@ from django.utils import timezone
 
 from sentry import tagstore
 from sentry.models import (
-    Activity, Group, GroupHash, GroupAssignee, GroupBookmark, GroupResolution, GroupSeen,
+    Activity, Environment, Group, GroupHash, GroupAssignee, GroupBookmark, GroupResolution, GroupSeen,
     GroupSnooze, GroupSubscription, GroupStatus, GroupTombstone, Release
 )
 from sentry.testutils import APITestCase
@@ -78,6 +79,32 @@ class GroupDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
         assert response.status_code == 404
 
+    def test_environment(self):
+        group = self.create_group()
+        self.login_as(user=self.user)
+
+        environment = Environment.get_or_create(group.project, 'production')
+
+        url = '/api/0/issues/{}/'.format(group.id)
+
+        from sentry.api.endpoints.group_details import tsdb
+
+        with mock.patch(
+                'sentry.api.endpoints.group_details.tsdb.get_range',
+                side_effect=tsdb.get_range) as get_range:
+            response = self.client.get(url, {'environment': 'production'}, format='json')
+            assert response.status_code == 200
+            assert get_range.call_count == 2
+            for args, kwargs in get_range.call_args_list:
+                assert kwargs['environment_id'] == environment.id
+
+        with mock.patch(
+                'sentry.api.endpoints.group_details.tsdb.make_series',
+                side_effect=tsdb.make_series) as make_series:
+            response = self.client.get(url, {'environment': 'invalid'}, format='json')
+            assert response.status_code == 200
+            assert make_series.call_count == 2
+
 
 class GroupUpdateTest(APITestCase):
     def test_resolve(self):
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index a5cad0f8b5..d9213e0115 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -2,6 +2,7 @@
 
 from __future__ import absolute_import
 
+import mock
 import six
 
 from datetime import timedelta
@@ -10,8 +11,9 @@ from django.utils import timezone
 from mock import patch
 
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.group import StreamGroupSerializer
 from sentry.models import (
-    GroupResolution, GroupSnooze, GroupStatus,
+    Environment, GroupResolution, GroupSnooze, GroupStatus,
     GroupSubscription, UserOption, UserOptionValue
 )
 from sentry.testutils import TestCase
@@ -267,3 +269,41 @@ class GroupSerializerTest(TestCase):
 
         result = serialize(group)
         assert not result['isSubscribed']
+
+
+class StreamGroupSerializerTestCase(TestCase):
+    def test_environment(self):
+        group = self.group
+
+        environment = Environment.get_or_create(group.project, 'production')
+
+        from sentry.api.serializers.models.group import tsdb
+
+        with mock.patch(
+                'sentry.api.serializers.models.group.tsdb.get_range',
+                side_effect=tsdb.get_range) as get_range:
+            serialize(
+                [group],
+                serializer=StreamGroupSerializer(
+                    environment_id_func=lambda: environment.id,
+                    stats_period='14d',
+                ),
+            )
+            assert get_range.call_count == 1
+            for args, kwargs in get_range.call_args_list:
+                assert kwargs['environment_id'] == environment.id
+
+        def get_invalid_environment():
+            raise Environment.DoesNotExist()
+
+        with mock.patch(
+                'sentry.api.serializers.models.group.tsdb.make_series',
+                side_effect=tsdb.make_series) as make_series:
+            serialize(
+                [group],
+                serializer=StreamGroupSerializer(
+                    environment_id_func=get_invalid_environment,
+                    stats_period='14d',
+                )
+            )
+            assert make_series.call_count == 1
