commit b93e5bbc4ff7409d9724b6d5e91dd9c6c06550cc
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Feb 3 15:05:57 2013 -0800

    Some initial schema and work on access groups

diff --git a/src/sentry/migrations/0087_auto__add_accessgroup__add_unique_accessgroup_team_name.py b/src/sentry/migrations/0087_auto__add_accessgroup__add_unique_accessgroup_team_name.py
new file mode 100644
index 0000000000..d61e2e78b3
--- /dev/null
+++ b/src/sentry/migrations/0087_auto__add_accessgroup__add_unique_accessgroup_team_name.py
@@ -0,0 +1,344 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'AccessGroup'
+        db.create_table('sentry_accessgroup', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('team', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Team'])),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=64)),
+            ('type', self.gf('django.db.models.fields.IntegerField')(default=50)),
+            ('managed', self.gf('django.db.models.fields.BooleanField')(default=False)),
+            ('data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['AccessGroup'])
+
+        # Adding M2M table for field projects on 'AccessGroup'
+        db.create_table('sentry_accessgroup_projects', (
+            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
+            ('accessgroup', models.ForeignKey(orm['sentry.accessgroup'], null=False)),
+            ('project', models.ForeignKey(orm['sentry.project'], null=False))
+        ))
+        db.create_unique('sentry_accessgroup_projects', ['accessgroup_id', 'project_id'])
+
+        # Adding M2M table for field members on 'AccessGroup'
+        db.create_table('sentry_accessgroup_members', (
+            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
+            ('accessgroup', models.ForeignKey(orm['sentry.accessgroup'], null=False)),
+            ('user', models.ForeignKey(orm['auth.user'], null=False))
+        ))
+        db.create_unique('sentry_accessgroup_members', ['accessgroup_id', 'user_id'])
+
+        # Adding unique constraint on 'AccessGroup', fields ['team', 'name']
+        db.create_unique('sentry_accessgroup', ['team_id', 'name'])
+
+
+    def backwards(self, orm):
+        # Removing unique constraint on 'AccessGroup', fields ['team', 'name']
+        db.delete_unique('sentry_accessgroup', ['team_id', 'name'])
+
+        # Deleting model 'AccessGroup'
+        db.delete_table('sentry_accessgroup')
+
+        # Removing M2M table for field projects on 'AccessGroup'
+        db.delete_table('sentry_accessgroup_projects')
+
+        # Removing M2M table for field members on 'AccessGroup'
+        db.delete_table('sentry_accessgroup_members')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.accessgroup': {
+            'Meta': {'unique_together': "(('team', 'name'),)", 'object_name': 'AccessGroup'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'symmetrical': 'False'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
+        },
+        'sentry.affecteduserbygroup': {
+            'Meta': {'unique_together': "(('project', 'tuser', 'group'),)", 'object_name': 'AffectedUserByGroup'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'tuser': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.TrackedUser']", 'null': 'True'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filterkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'FilterKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'users_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'),)", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
+            'user_added': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'team_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.TeamMember']", 'to': "orm['auth.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.trackeduser': {
+            'Meta': {'unique_together': "(('project', 'ident'),)", 'object_name': 'TrackedUser'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Group']", 'through': "orm['sentry.AffectedUserByGroup']", 'symmetrical': 'False'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'num_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 05c1144d02..52f4488522 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -101,13 +101,14 @@ class Team(Model):
     name = models.CharField(max_length=64)
     owner = models.ForeignKey(User)
     date_added = models.DateTimeField(default=timezone.now, null=True)
+    members = models.ManyToManyField(User, through='sentry.TeamMember', related_name='team_memberships')
 
     objects = TeamManager(cache_fields=(
         'pk',
         'slug',
     ))
 
-    __repr__ = sane_repr('slug', 'owner_id')
+    __repr__ = sane_repr('slug', 'owner_id', 'name')
 
     def save(self, *args, **kwargs):
         if not self.slug:
@@ -127,9 +128,40 @@ class Team(Model):
         return u'%s' % self.name
 
 
+class AccessGroup(Model):
+    """
+    An access group identifies a set of members with a defined set
+    of permissions (and project access) for a Team.
+
+    Groups may be automated through extensions (such as LDAP) so that
+    membership is automatically maintained. If this is the case the
+    ``managed`` attribute will be ``True``.
+    """
+    team = models.ForeignKey(Team)
+    name = models.CharField(max_length=64)
+    type = models.IntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
+    managed = models.BooleanField(default=False)
+    data = GzippedDictField(blank=True, null=True)
+    date_added = models.DateTimeField(default=timezone.now)
+
+    projects = models.ManyToManyField('sentry.Project')
+    members = models.ManyToManyField(User)
+
+    objects = BaseManager()
+
+    class Meta:
+        unique_together = (('team', 'name'),)
+
+    __repr__ = sane_repr('team_id', 'name', 'type', 'managed')
+
+
 class TeamMember(Model):
     """
     Identifies relationships between teams and users.
+
+    Users listed as team members are considered to have access to all projects
+    and could be thought of as team owners (though their access level may not)
+    be set to ownership.
     """
     team = models.ForeignKey(Team, related_name="member_set")
     user = models.ForeignKey(User, related_name="sentry_teammember_set")
diff --git a/src/sentry/templates/sentry/bases/team.html b/src/sentry/templates/sentry/bases/team.html
index 843887a992..346613c7e8 100644
--- a/src/sentry/templates/sentry/bases/team.html
+++ b/src/sentry/templates/sentry/bases/team.html
@@ -15,6 +15,9 @@
         <li{% if SUBSECTION == 'members' %} class="active"{% endif %}>
             <a href="{% url sentry-manage-team-members team.slug %}">{% trans "Members" %}</a>
         </li>
+        <li{% if SUBSECTION == 'groups' %} class="active"{% endif %}>
+            <a href="{% url sentry-manage-access-groups team.slug %}">{% trans "Access Groups" %}</a>
+        </li>
         {% if can_create_projects %}
             <li class="pull-right{% if SUBSECTION == 'new_project' %} active{% endif %}">
                 <a href="{% url sentry-new-team-project team.slug %}">{% trans "Create a New Project" %}</a>
diff --git a/src/sentry/templates/sentry/teams/groups/list.html b/src/sentry/templates/sentry/teams/groups/list.html
new file mode 100644
index 0000000000..d7c1cfdbc8
--- /dev/null
+++ b/src/sentry/templates/sentry/teams/groups/list.html
@@ -0,0 +1,48 @@
+{% extends "sentry/teams/manage.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider"></li>
+    <li><a href="{% url sentry-manage-access-groups team.slug %}">{% trans "Access Groups" %}</a></li>
+{% endblock %}
+
+{% block bodyclass %} with-sidebar{% endblock %}
+
+{% block inner %}
+    <div class="page-header">
+        {% if can_add_group %}
+            <a href="{% url sentry-new-access-group team.slug %}" class="btn pull-right btn-primary">{% trans "New Access Group" %}</a>
+        {% endif %}
+        <h2>{% trans "Access Groups" %}</h2>
+    </div>
+    {% if group_list %}
+        <table class="table table-striped">
+            <colgroup>
+                <col/>
+                <col width="100px"/>
+                <col width="100px"/>
+            </colgroup>
+            <thead>
+                <tr>
+                    <th>{% trans "Name" %}</th>
+                    <th style="text-align:center;">{% trans "Access" %}</th>
+                    <th style="text-align:center">{% trans "Actions" %}</th>
+                </tr>
+            </thead>
+            <tbody>
+                {% for group in group_list %}
+                    <tr>
+                        <td><a href="#">{{ group.name }}</a></td>
+                        <td style="text-align:center">{{ group.get_type_display }}</td>
+                        <td style="text-align:center"><a href="#" class="btn">{% trans "Remove" %}</a></td>
+                    </tr>
+                {% endfor %}
+            </tbody>
+        </table>
+    {% else %}
+        <p>{% trans "You have not created any access groups yet." %}</p>
+    {% endif %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/teams/groups/new.html b/src/sentry/templates/sentry/teams/groups/new.html
new file mode 100644
index 0000000000..342fe2cb63
--- /dev/null
+++ b/src/sentry/templates/sentry/teams/groups/new.html
@@ -0,0 +1,19 @@
+{% extends "sentry/teams/groups/list.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "New Access Group" %} | {{ block.super }}{% endblock %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider"></li>
+    <li><a href="{% url sentry-new-access-group team.slug %}">{% trans "New Access Group" %}</a></li>
+{% endblock %}
+
+{% block inner %}
+    <div class="page-header">
+        <h2>{% trans "New Access Group" %}</h2>
+    </div>
+
+    {% include "sentry/partial/_form.html" %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/teams/members/index.html b/src/sentry/templates/sentry/teams/members/index.html
index 6289af587a..df759d4c57 100644
--- a/src/sentry/templates/sentry/teams/members/index.html
+++ b/src/sentry/templates/sentry/teams/members/index.html
@@ -9,6 +9,14 @@
     <li><a href="{% url sentry-manage-team-members team.slug %}">{% trans "Members" %}</a></li>
 {% endblock %}
 
+{% block bodyclass %} with-sidebar{% endblock %}
+
+{% block sidebar %}
+    <h6>{% trans "About Memberships" %}</h6>
+    {% url sentry-manage-team-access-groups team.slug as link %}
+    <p>{% blocktrans %}This page lists team-wide memberships whom have access to all projects owned by this team. If you wish to add memberships bound to individual projects, you can do so with <a href="{{ link }}">Access Groups</a>.{% endblocktrans %}</p>
+{% endblock %}
+
 {% block inner %}
     <div class="page-header">
         {% if can_add_member %}
@@ -20,14 +28,13 @@
         <colgroup>
             <col/>
             <col width="100px"/>
-            <col width="90px"/>
-            <col width="90px"/>
+            <col width="180px"/>
         </colgroup>
         <thead>
             <tr>
                 <th>{% trans "User" %}</th>
-                <th style="text-align:center">{% trans "Access" %}</th>
-                <th colspan="2" style="text-align:center">{% trans "Actions" %}</th>
+                <th style="text-align:center;">{% trans "Access" %}</th>
+                <th style="text-align:center">{% trans "Actions" %}</th>
             </tr>
         </thead>
         <tbody>
@@ -45,14 +52,13 @@
                         {% endif %}
                     </td>
                     {% if user == team.owner %}
-                        <td style="text-align:center;" colspan="2">
+                        <td style="text-align:center;">
                             <em>{% trans "unavailable for owner" %}</em>
                         </td>
                     {% else %}
                         <td style="text-align:center;">
                             <a href="{% url sentry-remove-team-member team.slug member.pk %}" class="btn btn-danger btn-small">{% trans "Remove" %}</a>
-                        </td>
-                        <td style="text-align:center;">
+
                             {% if member.is_active %}
                                 <a href="{% url sentry-suspend-team-member team.slug member.pk %}" class="btn btn-small">{% trans "Suspend" %}</a>
                             {% else %}
diff --git a/src/sentry/web/forms/teams.py b/src/sentry/web/forms/teams.py
index 28fed8a883..40744c5aab 100644
--- a/src/sentry/web/forms/teams.py
+++ b/src/sentry/web/forms/teams.py
@@ -6,10 +6,11 @@ sentry.web.forms.teams
 :license: BSD, see LICENSE for more details.
 """
 from django import forms
+from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import Team, TeamMember, PendingTeamMember
+from sentry.constants import MEMBER_TYPES
+from sentry.models import Team, TeamMember, PendingTeamMember, AccessGroup
 from sentry.web.forms.fields import UserField, get_team_choices
-from django.utils.translation import ugettext_lazy as _
 
 
 class RemoveTeamForm(forms.Form):
@@ -115,3 +116,14 @@ class NewTeamMemberForm(BaseTeamMemberForm):
 
 class AcceptInviteForm(forms.Form):
     pass
+
+
+class NewAccessGroupForm(forms.ModelForm):
+    name = forms.CharField(label=_('Group Name'), max_length=200,
+        widget=forms.TextInput(attrs={'placeholder': _('API Team')}))
+    type = forms.ChoiceField(label=_('Access Type'), choices=MEMBER_TYPES,
+        help_text=_('Members will gain this level of access to all projects assigned to this group.'))
+
+    class Meta:
+        fields = ('name', 'type')
+        model = AccessGroup
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 7f6287b7b1..6e60422507 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -13,14 +13,14 @@ from django.views.decorators.csrf import csrf_protect
 from django.utils.translation import ugettext as _
 
 from sentry.constants import MEMBER_USER, MEMBER_OWNER
-from sentry.models import PendingTeamMember, TeamMember
-from sentry.permissions import can_add_team_member, can_remove_team, can_create_projects, \
-  can_create_teams, can_edit_team_member, can_remove_team_member
+from sentry.models import PendingTeamMember, TeamMember, AccessGroup
+from sentry.permissions import (can_add_team_member, can_remove_team, can_create_projects,
+    can_create_teams, can_edit_team_member, can_remove_team_member)
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required, has_access
-from sentry.web.forms.teams import NewTeamForm, NewTeamAdminForm, \
-  EditTeamForm, EditTeamAdminForm, EditTeamMemberForm, NewTeamMemberForm, \
-  InviteTeamMemberForm, RemoveTeamForm, AcceptInviteForm
+from sentry.web.forms.teams import (NewTeamForm, NewTeamAdminForm,
+    EditTeamForm, EditTeamAdminForm, EditTeamMemberForm, NewTeamMemberForm,
+    InviteTeamMemberForm, RemoveTeamForm, AcceptInviteForm, NewAccessGroupForm)
 from sentry.web.helpers import render_to_response
 
 
@@ -106,6 +106,30 @@ def manage_team(request, team):
     return render_to_response('sentry/teams/manage.html', context, request)
 
 
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def remove_team(request, team):
+    if not can_remove_team(request.user, team):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    form = RemoveTeamForm(request.POST or None)
+
+    if form.is_valid():
+        team.delete()
+        return HttpResponseRedirect(reverse('sentry-team-list'))
+
+    context = csrf(request)
+    context.update({
+        'page': 'settings',
+        'form': form,
+        'team': team,
+        'SECTION': 'team',
+        'SUBSECTION': 'settings',
+    })
+
+    return render_to_response('sentry/teams/remove.html', context, request)
+
+
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def manage_team_projects(request, team):
@@ -152,30 +176,6 @@ def manage_team_members(request, team):
     return render_to_response('sentry/teams/members/index.html', context, request)
 
 
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def remove_team(request, team):
-    if not can_remove_team(request.user, team):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    form = RemoveTeamForm(request.POST or None)
-
-    if form.is_valid():
-        team.delete()
-        return HttpResponseRedirect(reverse('sentry-team-list'))
-
-    context = csrf(request)
-    context.update({
-        'page': 'settings',
-        'form': form,
-        'team': team,
-        'SECTION': 'team',
-        'SUBSECTION': 'settings',
-    })
-
-    return render_to_response('sentry/teams/remove.html', context, request)
-
-
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def new_team_member(request, team):
@@ -466,3 +466,48 @@ def create_new_team_project(request, team):
     })
 
     return render_to_response('sentry/teams/projects/new.html', context, request)
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def manage_access_groups(request, team):
+    result = plugins.first('has_perm', request.user, 'edit_team', team)
+    if result is False and not request.user.has_perm('sentry.can_change_team'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    context = csrf(request)
+    context.update({
+        'can_add_group': True,
+        'team': team,
+        'group_list': AccessGroup.objects.filter(team=team),
+        'SECTION': 'team',
+        'SUBSECTION': 'groups',
+    })
+
+    return render_to_response('sentry/teams/groups/list.html', context, request)
+
+
+@csrf_protect
+@has_access(MEMBER_OWNER)
+def new_access_group(request, team):
+    initial = {
+        'type': MEMBER_USER,
+    }
+
+    form = NewAccessGroupForm(request.POST or None, initial=initial)
+    if form.is_valid():
+        inst = form.save(commit=False)
+        inst.team = team
+        inst.managed = False
+        inst.save()
+        return HttpResponseRedirect(reverse('sentry-manage-access-groups', args=[team.slug]))
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'form': form,
+        'SECTION': 'team',
+        'SUBSECTION': 'groups',
+    })
+
+    return render_to_response('sentry/teams/groups/new.html', context, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 5ad5adec0d..1026ab47fb 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -54,6 +54,10 @@ urlpatterns = patterns('',
         name='sentry-manage-team'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/remove/$', teams.remove_team,
         name='sentry-remove-team'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/groups/$', teams.manage_access_groups,
+        name='sentry-manage-access-groups'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/groups/new/$', teams.new_access_group,
+        name='sentry-new-access-group'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/$', teams.manage_team_members,
         name='sentry-manage-team-members'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/new/$', teams.new_team_member,
