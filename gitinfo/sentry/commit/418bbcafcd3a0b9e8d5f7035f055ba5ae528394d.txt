commit 418bbcafcd3a0b9e8d5f7035f055ba5ae528394d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue May 21 09:03:09 2019 -0700

    fix(ui): Fix changing Incident status (#13292)
    
    Fix updating component state, fix calling `updateStatus` with correct value.
    Adds a test

diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
index 734db9b9f9..d9dcf95a88 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
@@ -39,6 +39,7 @@ export default class DetailsHeader extends React.Component {
         renderNoAccessMessage={() => incident && <Status incident={incident} />}
       >
         <DropdownControl
+          data-test-id="status-dropdown"
           label={incident && <Status incident={incident} />}
           menuWidth="160px"
           alignRight
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx
index b85c05f876..96a7e5cba8 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx
@@ -82,10 +82,10 @@ class OrganizationIncidentDetails extends React.Component {
       : INCIDENT_STATUS.CREATED;
 
     this.setState(state => ({
-      incident: {...state.incident, newStatus},
+      incident: {...state.incident, status: newStatus},
     }));
 
-    updateStatus(api, orgId, incidentId, status).catch(() => {
+    updateStatus(api, orgId, incidentId, newStatus).catch(() => {
       this.setState(state => ({
         incident: {...state.incident, status},
       }));
diff --git a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
index 5840cc730b..97eac6eaed 100644
--- a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
@@ -7,6 +7,15 @@ describe('IncidentDetails', function() {
   const mockIncident = TestStubs.Incident();
   const routerContext = TestStubs.routerContext();
 
+  const createWrapper = props =>
+    mount(
+      <IncidentDetails
+        params={{orgId: 'org-slug', incidentId: mockIncident.identifier}}
+        {...props}
+      />,
+      routerContext
+    );
+
   beforeAll(function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/123/',
@@ -23,13 +32,7 @@ describe('IncidentDetails', function() {
   });
 
   it('loads incident', async function() {
-    const wrapper = mount(
-      <IncidentDetails
-        params={{orgId: 'org-slug', incidentId: mockIncident.identifier}}
-      />,
-      routerContext
-    );
-
+    const wrapper = createWrapper();
     expect(wrapper.find('IncidentTitle').text()).toBe('Loading');
     expect(wrapper.find('SubscribeButton').prop('disabled')).toBe(true);
 
@@ -52,12 +55,42 @@ describe('IncidentDetails', function() {
   });
 
   it('handles invalid incident', async function() {
-    const wrapper = mount(
-      <IncidentDetails params={{orgId: 'org-slug', incidentId: '456'}} />,
-      routerContext
-    );
+    const wrapper = createWrapper({params: {orgId: 'org-slug', incidentId: '456'}});
     await tick();
     wrapper.update();
     expect(wrapper.find('LoadingError')).toHaveLength(1);
   });
+
+  it('changes status to closed', async function() {
+    const updateStatus = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/123/',
+      method: 'PUT',
+      body: TestStubs.Incident({
+        status: 2,
+      }),
+    });
+
+    const wrapper = createWrapper();
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('Status').text()).toBe('Open');
+    wrapper.find('[data-test-id="status-dropdown"] DropdownButton').simulate('click');
+    wrapper
+      .find('[data-test-id="status-dropdown"] MenuItem a')
+      .at(0)
+      .simulate('click');
+
+    await tick();
+
+    expect(updateStatus).toHaveBeenCalledWith(
+      '/organizations/org-slug/incidents/123/',
+      expect.objectContaining({
+        data: {status: 2},
+      })
+    );
+
+    expect(wrapper.find('Status').text()).toBe('Closed');
+  });
 });
