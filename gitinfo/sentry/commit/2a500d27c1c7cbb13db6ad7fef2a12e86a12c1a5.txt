commit 2a500d27c1c7cbb13db6ad7fef2a12e86a12c1a5
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 24 16:31:07 2015 -0700

    Remove various uses of Team.owner

diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 3319d85878..4eab1f5f7d 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -61,7 +61,6 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
             team = Team.objects.create(
                 name=result['name'],
                 slug=result.get('slug'),
-                owner=result.get('owner') or organization.owner,
                 organization=organization,
             )
 
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index db7f92a637..94578006fc 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -80,7 +80,7 @@ class User(BaseModel, AbstractBaseUser):
     def merge_to(from_user, to_user):
         # TODO: we could discover relations automatically and make this useful
         from sentry.models import (
-            GroupBookmark, Organization, OrganizationMember, Team,
+            GroupBookmark, Organization, OrganizationMember,
             UserOption
         )
 
@@ -88,8 +88,6 @@ class User(BaseModel, AbstractBaseUser):
             obj.update(owner=to_user)
         for obj in OrganizationMember.objects.filter(user=from_user):
             obj.update(user=to_user)
-        for obj in Team.objects.filter(owner=from_user):
-            obj.update(owner=to_user)
         for obj in GroupBookmark.objects.filter(user=from_user):
             obj.update(user=to_user)
         for obj in UserOption.objects.filter(user=from_user):
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 709424c8a2..6fce44e32e 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -86,7 +86,6 @@ def create_default_project(id, name, slug, verbosity=2, **kwargs):
         organization=org,
         slug='sentry',
         defaults={
-            'owner': org.owner,
             'name': 'Sentry',
         }
     )
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 6e4c31a2b2..91be68fca8 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -50,7 +50,6 @@ class Fixtures(object):
             organization=self.organization,
             name='foo',
             slug='foo',
-            owner=self.organization.owner,
         )
 
     @fixture
@@ -102,8 +101,6 @@ class Fixtures(object):
             kwargs['slug'] = slugify(six.text_type(kwargs['name']))
         if not kwargs.get('organization'):
             kwargs['organization'] = self.organization
-        if not kwargs.get('owner'):
-            kwargs['owner'] = kwargs['organization'].owner
 
         return Team.objects.create(**kwargs)
 
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index b34e2f4345..566f629f22 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -82,8 +82,7 @@ class RavenIntegrationTest(TransactionTestCase):
     """
     def setUp(self):
         self.user = self.create_user('coreapi@example.com')
-        self.team = self.create_team(owner=self.user)
-        self.project = self.create_project(team=self.team)
+        self.project = self.create_project()
         self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create()[0]
 
diff --git a/tests/sentry/api/endpoints/test_project_releases.py b/tests/sentry/api/endpoints/test_project_releases.py
index 53f2d44640..fa55eac535 100644
--- a/tests/sentry/api/endpoints/test_project_releases.py
+++ b/tests/sentry/api/endpoints/test_project_releases.py
@@ -11,7 +11,7 @@ class ProjectReleaseListTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        team = self.create_team(owner=self.user)
+        team = self.create_team()
         project1 = self.create_project(team=team, name='foo')
         project2 = self.create_project(team=team, name='bar')
 
@@ -46,7 +46,7 @@ class ProjectReleaseCreateTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        team = self.create_team(owner=self.user)
+        team = self.create_team()
         project = self.create_project(team=team, name='foo')
 
         url = reverse('sentry-api-0-project-releases', kwargs={
@@ -68,7 +68,7 @@ class ProjectReleaseCreateTest(APITestCase):
     def test_duplicate(self):
         self.login_as(user=self.user)
 
-        team = self.create_team(owner=self.user)
+        team = self.create_team()
         project = self.create_project(team=team, name='foo')
 
         Release.objects.create(version='1.2.1', project=project)
diff --git a/tests/sentry/api/endpoints/test_project_stats.py b/tests/sentry/api/endpoints/test_project_stats.py
index e5d23d1401..e8eb30d548 100644
--- a/tests/sentry/api/endpoints/test_project_stats.py
+++ b/tests/sentry/api/endpoints/test_project_stats.py
@@ -8,10 +8,8 @@ class ProjectStatsTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        team = self.create_team(owner=self.user)
-
-        project1 = self.create_project(team=team, name='foo')
-        project2 = self.create_project(team=team, name='bar')
+        project1 = self.create_project(name='foo')
+        project2 = self.create_project(name='bar')
 
         tsdb.incr(tsdb.models.project, project1.id, count=3)
         tsdb.incr(tsdb.models.project, project2.id, count=5)
diff --git a/tests/sentry/api/endpoints/test_team_stats.py b/tests/sentry/api/endpoints/test_team_stats.py
index bac4641e6b..e5f156177a 100644
--- a/tests/sentry/api/endpoints/test_team_stats.py
+++ b/tests/sentry/api/endpoints/test_team_stats.py
@@ -8,10 +8,10 @@ class TeamStatsTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        team = self.create_team(owner=self.user, name='foo')
+        team = self.create_team(name='foo')
         project_1 = self.create_project(team=team, name='a')
         project_2 = self.create_project(team=team, name='b')
-        team_2 = self.create_team(owner=self.user, name='bar')
+        team_2 = self.create_team(name='bar')
         project_3 = self.create_project(team=team_2, name='c')
 
         tsdb.incr(tsdb.models.project, project_1.id, count=3)
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 2d38ca44db..e47c5f004d 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -18,7 +18,7 @@ from sentry.testutils import TestCase
 class BaseAPITest(TestCase):
     def setUp(self):
         self.user = self.create_user('coreapi@example.com')
-        self.team = self.create_team(name='Foo', owner=self.user)
+        self.team = self.create_team(name='Foo')
         self.project = self.create_project(team=self.team)
         self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create()[0]
diff --git a/tests/sentry/models/test_user.py b/tests/sentry/models/test_user.py
index 21f994151a..18c9530018 100644
--- a/tests/sentry/models/test_user.py
+++ b/tests/sentry/models/test_user.py
@@ -1,18 +1,12 @@
 from __future__ import absolute_import
 
-from sentry.models import Team
 from sentry.testutils import TestCase
 
 
 class UserTest(TestCase):
     def test_merge_to(self):
         from_user = self.create_user('foo@example.com')
-        from_team = self.create_team(name='foobar', owner=from_user)
 
         to_user = self.create_user('bar@example.com')
-        to_team = self.create_team(name='foobaz', owner=to_user)
 
         from_user.merge_to(to_user)
-
-        assert Team.objects.filter(owner=from_user).count() == 0
-        assert Team.objects.filter(owner=to_user).count() == 2
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 50e2f25eec..448ad73e46 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -69,7 +69,7 @@ class ProjectKeyTest(TestCase):
 
     def test_key_is_created_for_project(self):
         user = self.create_user('admin@example.com')
-        team = self.create_team(name='Test', owner=user)
+        team = self.create_team(name='Test')
         project = self.create_project(name='Test', team=team)
         assert project.key_set.exists() is True
 
diff --git a/tests/sentry/utils/query/tests.py b/tests/sentry/utils/query/tests.py
index b01a6da4ad..a58808387e 100644
--- a/tests/sentry/utils/query/tests.py
+++ b/tests/sentry/utils/query/tests.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.models import User, Team, AccessGroup
+from sentry.models import User
 from sentry.testutils import TestCase
 from sentry.utils.query import merge_into
 
@@ -9,17 +9,8 @@ class MergeIntoTest(TestCase):
     def test_all_the_things(self):
         user_1 = self.create_user('foo@example.com')
         user_2 = self.create_user('bar@example.com')
-        team_1 = self.create_team(owner=user_1, name='foo')
-        team_2 = self.create_team(owner=user_2, name='bar')
-        ag = AccessGroup.objects.create(team=team_2)
-        ag.members.add(user_1)
-        ag.members.add(user_2)
 
         merge_into(user_1, user_2)
 
-        assert Team.objects.get(id=team_1.id).owner == user_2
-        assert Team.objects.get(id=team_2.id).owner == user_2
-        assert list(ag.members.all()) == [user_2]
-
         # make sure we didn't remove the instance
         assert User.objects.filter(id=user_1.id).exists()
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 9328f2d2f2..83c6026306 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -217,7 +217,7 @@ class SearchProjectsTest(TestCase):
 
     def test_does_not_include_projects_from_other_organizations(self):
         org = self.create_organization(owner=self.user, name='Sample')
-        team = self.create_team(organization=org, owner=self.user, name='Sample')
+        team = self.create_team(organization=org, name='Sample')
         self.create_project(organization=org, team=team, name='Sample')
 
         resp = self.client.get(self.path, {'query': 'sample'})
