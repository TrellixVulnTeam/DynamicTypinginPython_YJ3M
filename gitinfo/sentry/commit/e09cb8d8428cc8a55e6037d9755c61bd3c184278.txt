commit e09cb8d8428cc8a55e6037d9755c61bd3c184278
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Aug 14 11:45:51 2019 -0700

    ref: Stop writing to the event mapping table (#14371)
    
    This is not needed since events are not sampled in Snuba. This table should be removed as a follow up.
    
    https://getsentry.atlassian.net/browse/SNS-240

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 1882c771b7..f7a9eb4bd7 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -36,7 +36,7 @@ from sentry.coreapi import (
 )
 from sentry.interfaces.base import get_interface
 from sentry.models import (
-    Activity, Environment, Event, EventDict, EventError, EventMapping, EventUser, Group,
+    Activity, Environment, Event, EventDict, EventError, EventUser, Group,
     GroupEnvironment, GroupHash, GroupLink, GroupRelease, GroupResolution, GroupStatus,
     Project, Release, ReleaseEnvironment, ReleaseProject,
     ReleaseProjectEnvironment, UserReport, Organization,
@@ -719,28 +719,6 @@ class EventManager(object):
         # store a reference to the group id to guarantee validation of isolation
         event.data.bind_ref(event)
 
-        # When an event was sampled, the canonical source of truth
-        # is the EventMapping table since we aren't going to be writing out an actual
-        # Event row. Otherwise, if the Event isn't being sampled, we can safely
-        # rely on the Event table itself as the source of truth and ignore
-        # EventMapping since it's redundant information.
-        if is_sample:
-            try:
-                with transaction.atomic(using=router.db_for_write(EventMapping)):
-                    EventMapping.objects.create(project=project, group=group, event_id=event_id)
-            except IntegrityError:
-                logger.info(
-                    'duplicate.found',
-                    exc_info=True,
-                    extra={
-                        'event_uuid': event_id,
-                        'project_id': project.id,
-                        'group_id': group.id if group else None,
-                        'model': EventMapping.__name__,
-                    }
-                )
-                return event
-
         environment = Environment.get_or_create(
             project=project,
             name=environment,
diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index 05271e75d7..bf9312863a 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -37,7 +37,6 @@ def merge_groups(
         GroupRuleStatus,
         GroupSubscription,
         Environment,
-        EventMapping,
         Event,
         UserReport,
         GroupRedirect,
@@ -99,8 +98,7 @@ def merge_groups(
     else:
         model_list = tuple(EXTRA_MERGE_MODELS) + (
             Activity, GroupAssignee, GroupEnvironment, GroupHash, GroupRuleStatus,
-            GroupSubscription, EventMapping, Event, UserReport, GroupRedirect,
-            GroupMeta,
+            GroupSubscription, Event, UserReport, GroupRedirect, GroupMeta,
         )
 
         has_more = merge_objects(
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index c42016e9ed..8fc152d607 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -10,8 +10,8 @@ from sentry.app import tsdb
 from sentry.constants import DEFAULT_LOGGER_NAME, LOG_LEVELS_MAP
 from sentry.event_manager import generate_culprit
 from sentry.models import (
-    Activity, Environment, Event, EventMapping, EventUser, Group,
-    GroupEnvironment, GroupHash, GroupRelease, Project, Release, UserReport
+    Activity, Environment, Event, EventUser, Group, GroupEnvironment, GroupHash,
+    GroupRelease, Project, Release, UserReport
 )
 from sentry.similarity import features
 from sentry.tasks.base import instrumented_task
@@ -241,11 +241,6 @@ def migrate_events(caches, project, source_id, destination_id,
 
     event_event_id_set = set(event.event_id for event in events)
 
-    EventMapping.objects.filter(
-        project_id=project.id,
-        event_id__in=event_event_id_set,
-    ).update(group_id=destination_id)
-
     UserReport.objects.filter(
         project_id=project.id,
         event_id__in=event_event_id_set,
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 1605769c90..b23efb59b8 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -29,7 +29,7 @@ from sentry.incidents.models import (
 )
 from sentry.mediators import sentry_apps, sentry_app_installations, sentry_app_installation_tokens, service_hooks
 from sentry.models import (
-    Activity, Environment, Event, EventError, EventMapping, Group, Organization, OrganizationMember,
+    Activity, Environment, Event, EventError, Group, Organization, OrganizationMember,
     OrganizationMemberTeam, Project, ProjectBookmark, Team, User, UserEmail, Release, Commit, ReleaseCommit,
     CommitAuthor, Repository, CommitFileChange, ProjectDebugFile, File, UserPermission, EventAttachment,
     UserReport, PlatformExternalIssue,
@@ -497,12 +497,6 @@ class Factories(object):
         )
 
         event = Event(event_id=event_id, group=group, **kwargs)
-        if group:
-            EventMapping.objects.create(
-                project_id=event.project.id,
-                event_id=event_id,
-                group=group,
-            )
         # emulate EventManager refs
         event.data.bind_ref(event)
         event.save()
diff --git a/tests/sentry/deletions/test_event.py b/tests/sentry/deletions/test_event.py
index 220456381a..a6298b9c7d 100644
--- a/tests/sentry/deletions/test_event.py
+++ b/tests/sentry/deletions/test_event.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from sentry import tagstore
 from sentry.tagstore.models import EventTag
 from sentry.models import (
-    Event, EventAttachment, EventMapping, File, ScheduledDeletion, UserReport
+    Event, EventAttachment, File, ScheduledDeletion, UserReport
 )
 from sentry.tasks.deletion import run_deletion
 from sentry.testutils import TestCase
@@ -64,10 +64,6 @@ class DeleteEventTest(TestCase):
             event_id=event.event_id,
             project_id=project.id,
         ).exists()
-        assert not EventMapping.objects.filter(
-            event_id=event.event_id,
-            project_id=project.id,
-        ).exists()
         assert not UserReport.objects.filter(
             event_id=event.event_id,
             project_id=project.id,
diff --git a/tests/sentry/deletions/test_group.py b/tests/sentry/deletions/test_group.py
index 06b382d5d1..d7a1c9ba6d 100644
--- a/tests/sentry/deletions/test_group.py
+++ b/tests/sentry/deletions/test_group.py
@@ -5,7 +5,7 @@ from uuid import uuid4
 from sentry import tagstore
 from sentry.tagstore.models import EventTag
 from sentry.models import (
-    Event, EventMapping, Group, GroupAssignee, GroupHash, GroupMeta, GroupRedirect,
+    Event, Group, GroupAssignee, GroupHash, GroupMeta, GroupRedirect,
     ScheduledDeletion, UserReport
 )
 from sentry.tasks.deletion import run_deletion
@@ -19,11 +19,7 @@ class DeleteGroupTest(TestCase):
             project=project,
         )
         event = self.create_event(group=group)
-        EventMapping.objects.create(
-            project_id=project.id,
-            event_id='a' * 32,
-            group_id=group.id,
-        )
+
         UserReport.objects.create(
             group_id=group.id,
             project_id=event.project_id,
@@ -78,9 +74,6 @@ class DeleteGroupTest(TestCase):
             run_deletion(deletion.id)
 
         assert not Event.objects.filter(id=event.id).exists()
-        assert not EventMapping.objects.filter(
-            group_id=group.id,
-        ).exists()
         assert not EventTag.objects.filter(event_id=event.id).exists()
         assert not UserReport.objects.filter(group_id=group.id).exists()
         assert not GroupRedirect.objects.filter(group_id=group.id).exists()
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index d5a9e7ece3..16ca513cb0 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -19,8 +19,8 @@ from sentry.grouping.utils import hash_from_values
 from sentry.models import (
     Activity, Environment, Event, ExternalIssue, Group, GroupEnvironment,
     GroupHash, GroupLink, GroupRelease, GroupResolution, GroupStatus,
-    GroupTombstone, EventMapping, Integration, Release,
-    ReleaseProjectEnvironment, OrganizationIntegration, UserReport
+    GroupTombstone, Integration, Release, ReleaseProjectEnvironment,
+    OrganizationIntegration, UserReport
 )
 from sentry.signals import event_discarded, event_saved
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase
@@ -62,21 +62,14 @@ class EventManagerTest(TestCase):
         assert event1.group_id != event2.group_id
 
     @mock.patch('sentry.event_manager.should_sample')
-    def test_saves_event_mapping_when_sampled(self, should_sample):
+    def test_does_not_save_event_when_sampled(self, should_sample):
         should_sample.return_value = True
         event_id = 'a' * 32
 
         manager = EventManager(make_event(event_id=event_id))
-        event = manager.save(1)
+        manager.save(1)
 
         # This is a brand new event, so it is actually saved.
-        # In this case, we don't need an EventMapping, but we
-        # do need the Event.
-        assert not EventMapping.objects.filter(
-            group_id=event.group_id,
-            event_id=event_id,
-        ).exists()
-
         assert Event.objects.filter(
             event_id=event_id,
         ).exists()
@@ -84,16 +77,9 @@ class EventManagerTest(TestCase):
         event_id = 'b' * 32
 
         manager = EventManager(make_event(event_id=event_id))
-        event = manager.save(1)
+        manager.save(1)
 
         # This second is a dupe, so should be sampled
-        # For a sample, we want to store the EventMapping,
-        # but don't need to store the Event
-        assert EventMapping.objects.filter(
-            group_id=event.group_id,
-            event_id=event_id,
-        ).exists()
-
         assert not Event.objects.filter(
             event_id=event_id,
         ).exists()
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index db9ee73ff2..1a4e5ab889 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -11,8 +11,8 @@ from sentry.tagstore.models import EventTag
 from sentry.constants import ObjectStatus
 from sentry.exceptions import DeleteAborted
 from sentry.models import (
-    ApiApplication, ApiApplicationStatus, ApiGrant, ApiToken, Commit, CommitAuthor, Environment,
-    EnvironmentProject, Event, EventMapping, Group, GroupAssignee, GroupHash, GroupMeta,
+    ApiApplication, ApiApplicationStatus, ApiGrant, ApiToken, Commit, CommitAuthor,
+    Environment, EnvironmentProject, Event, Group, GroupAssignee, GroupHash, GroupMeta,
     GroupRedirect, GroupResolution, GroupStatus, Organization, OrganizationStatus, Project,
     ProjectStatus, Release, ReleaseCommit, ReleaseEnvironment, Repository, Team, TeamStatus
 )
@@ -296,11 +296,6 @@ class DeleteGroupTest(TestCase):
             status=GroupStatus.PENDING_DELETION,
         )
         event = self.create_event(group=group)
-        EventMapping.objects.create(
-            project_id=project.id,
-            event_id='a' * 32,
-            group_id=group.id,
-        )
         tv, _ = tagstore.get_or_create_tag_value(project.id, self.environment.id, 'key1', 'value1')
         tagstore.create_event_tags(
             event_id=event.id,
@@ -335,10 +330,6 @@ class DeleteGroupTest(TestCase):
             delete_groups(object_ids=[group.id])
 
         assert not Event.objects.filter(id=event.id).exists()
-        assert not EventMapping.objects.filter(
-            event_id='a' * 32,
-            group_id=group.id,
-        ).exists()
         assert not EventTag.objects.filter(event_id=event.id).exists()
         assert not GroupRedirect.objects.filter(group_id=group.id).exists()
         assert not GroupHash.objects.filter(group_id=group.id).exists()
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index b5421fcde3..724144d0e9 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -17,7 +17,7 @@ from sentry import tagstore
 from sentry.tagstore.models import GroupTagValue
 from sentry.app import tsdb
 from sentry.models import (
-    Activity, Environment, EnvironmentProject, Event, EventMapping, Group, GroupHash, GroupRelease,
+    Activity, Environment, EnvironmentProject, Event, Group, GroupHash, GroupRelease,
     Release, UserReport
 )
 from sentry.similarity import features, _make_index_backend
@@ -266,13 +266,6 @@ class UnmergeTestCase(TestCase):
                     tags=event.tags,
                 )
 
-            EventMapping.objects.create(
-                project_id=project.id,
-                group_id=source.id,
-                event_id=event_id,
-                date_added=event.datetime,
-            )
-
             UserReport.objects.create(
                 project_id=project.id,
                 group_id=source.id,
@@ -435,12 +428,6 @@ class UnmergeTestCase(TestCase):
             events.values()[0],
         )
 
-        assert set(
-            EventMapping.objects.filter(
-                group_id=source.id,
-            ).values_list('event_id', flat=True)
-        ) == set(source_event_event_ids)
-
         assert set(
             UserReport.objects.filter(
                 group_id=source.id,
@@ -495,12 +482,6 @@ class UnmergeTestCase(TestCase):
             events.values()[1],
         )
 
-        assert set(
-            EventMapping.objects.filter(
-                group_id=destination.id,
-            ).values_list('event_id', flat=True)
-        ) == set(destination_event_event_ids)
-
         assert set(
             UserReport.objects.filter(
                 group_id=destination.id,
