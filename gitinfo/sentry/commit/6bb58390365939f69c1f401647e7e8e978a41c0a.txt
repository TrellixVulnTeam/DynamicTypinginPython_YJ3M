commit 6bb58390365939f69c1f401647e7e8e978a41c0a
Author: Mark Story <mark@mark-story.com>
Date:   Fri Nov 2 09:51:11 2018 -0400

    ref(ui) Move broadcast fetching to actionCreators (#10382)
    
    * ref(ui) Move broadcast fetching to actionCreators
    
    Move more API calls to actionCreator patterns. This approach lets
    components focus on UI rendering logic and delegate API request logic to
    other modules.
    
    This would be a perfect fit for Promise.prototype.finally() but node
    doesn't support it yet.

diff --git a/src/sentry/static/sentry/app/actionCreators/broadcasts.jsx b/src/sentry/static/sentry/app/actionCreators/broadcasts.jsx
new file mode 100644
index 0000000000..beb51e36a1
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/broadcasts.jsx
@@ -0,0 +1,11 @@
+export function getAllBroadcasts(api) {
+  return api.requestPromise('/broadcasts/', {method: 'GET'});
+}
+
+export function markBroadcastsAsSeen(api, idList) {
+  return api.requestPromise('/broadcasts/', {
+    method: 'PUT',
+    query: {id: idList},
+    data: {hasSeen: '1'},
+  });
+}
diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
index f8e17ad379..7756b2a743 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
@@ -10,6 +10,7 @@ import SidebarItem from 'app/components/sidebar/sidebarItem';
 import SidebarPanel from 'app/components/sidebar/sidebarPanel';
 import SidebarPanelEmpty from 'app/components/sidebar/sidebarPanelEmpty';
 import SidebarPanelItem from 'app/components/sidebar/sidebarPanelItem';
+import {getAllBroadcasts, markBroadcastsAsSeen} from 'app/actionCreators/broadcasts';
 
 const MARK_SEEN_DELAY = 1000;
 const POLLER_DELAY = 600000; // 10 minute poll (60 * 10 * 1000)
@@ -63,23 +64,21 @@ const Broadcasts = createReactClass({
       this.stopPoll();
     }
 
-    this.api.request('/broadcasts/', {
-      method: 'GET',
-      success: data => {
+    return getAllBroadcasts(this.api)
+      .then(data => {
         this.setState({
           broadcasts: data || [],
           loading: false,
         });
         this.startPoll();
-      },
-      error: () => {
+      })
+      .catch(() => {
         this.setState({
           loading: false,
           error: true,
         });
         this.startPoll();
-      },
-    });
+      });
   },
 
   startPoll() {
@@ -124,20 +123,13 @@ const Broadcasts = createReactClass({
     let unseenBroadcastIds = this.getUnseenIds();
     if (unseenBroadcastIds.length === 0) return;
 
-    this.api.request('/broadcasts/', {
-      method: 'PUT',
-      query: {id: unseenBroadcastIds},
-      data: {
-        hasSeen: '1',
-      },
-      success: () => {
-        this.setState({
-          broadcasts: this.state.broadcasts.map(item => {
-            item.hasSeen = true;
-            return item;
-          }),
-        });
-      },
+    markBroadcastsAsSeen(this.api, unseenBroadcastIds).then(data => {
+      this.setState(state => ({
+        broadcasts: state.broadcasts.map(item => {
+          item.hasSeen = true;
+          return item;
+        }),
+      }));
     });
   },
 
diff --git a/tests/js/spec/components/sidebar/index.spec.jsx b/tests/js/spec/components/sidebar/index.spec.jsx
index fb0af15a28..9af20c4ad1 100644
--- a/tests/js/spec/components/sidebar/index.spec.jsx
+++ b/tests/js/spec/components/sidebar/index.spec.jsx
@@ -166,14 +166,15 @@ describe('Sidebar', function() {
   });
 
   describe('SidebarPanel', function() {
-    it('displays empty panel when there are no Broadcasts', function() {
+    it('displays empty panel when there are no Broadcasts', async function() {
       MockApiClient.addMockResponse({
         url: '/broadcasts/',
         body: [],
       });
       wrapper = createWrapper();
 
-      wrapper.find('Broadcasts SidebarItem').simulate('click');
+      await wrapper.find('Broadcasts SidebarItem').simulate('click');
+
       wrapper.update();
       expect(wrapper.find('SidebarPanel')).toHaveLength(1);
 
@@ -181,12 +182,12 @@ describe('Sidebar', function() {
       expect(wrapper.find('SidebarPanelEmpty')).toHaveLength(1);
     });
 
-    it('can display Broadcasts panel and mark as seen', function() {
+    it('can display Broadcasts panel and mark as seen', async function() {
       jest.useFakeTimers();
       wrapper = createWrapper();
       expect(apiMocks.broadcasts).toHaveBeenCalled();
 
-      wrapper.find('Broadcasts SidebarItem').simulate('click');
+      await wrapper.find('Broadcasts SidebarItem').simulate('click');
       wrapper.update();
       expect(wrapper.find('SidebarPanel')).toHaveLength(1);
 
@@ -225,13 +226,13 @@ describe('Sidebar', function() {
       expect(wrapper.find('SidebarPanel')).toHaveLength(0);
     });
 
-    it('can unmount Sidebar (and Broadcasts) and kills Broadcast timers', function() {
+    it('can unmount Sidebar (and Broadcasts) and kills Broadcast timers', async function() {
       jest.useFakeTimers();
       wrapper = createWrapper();
       let broadcasts = wrapper.find('Broadcasts').instance();
 
       // This will start timer to mark as seen
-      wrapper.find('Broadcasts SidebarItem').simulate('click');
+      await wrapper.find('Broadcasts SidebarItem').simulate('click');
       wrapper.update();
 
       jest.advanceTimersByTime(500);
