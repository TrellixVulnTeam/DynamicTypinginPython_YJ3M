commit 6829b6cf7a59e56a0a65cc281f226dab0212c6c6
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Aug 7 22:37:20 2016 -0700

    Improve unicode handling in JS sources
    
    - correct various unicode support for sources/maps
    - add test for embedded sourcemaps
    - add test for fetch_release_file
    
    /cc @getsentry/infrastructure

diff --git a/.eslintignore b/.eslintignore
index bb95f47270..8613653183 100644
--- a/.eslintignore
+++ b/.eslintignore
@@ -1,2 +1,3 @@
 **/dist/**/*
 **/vendor/**/*
+**/tests/sentry/lang/javascript/fixtures/**/*
diff --git a/src/sentry/lang/javascript/errormapping.py b/src/sentry/lang/javascript/errormapping.py
index ff8e32bad9..49cd0a3af0 100644
--- a/src/sentry/lang/javascript/errormapping.py
+++ b/src/sentry/lang/javascript/errormapping.py
@@ -67,6 +67,8 @@ class Processor(object):
         return data
 
     def try_process(self, exc):
+        if not exc['value']:
+            return False
         match = self.regex.search(exc['value'])
         if match is None:
             return False
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index d549730abf..e87892f792 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -63,6 +63,7 @@ MAX_URL_LENGTH = 150
 # TODO(dcramer): we want to change these to be constants so they are easier
 # to translate/link again
 
+# UrlResult.body **must** be unicode
 UrlResult = namedtuple('UrlResult', ['url', 'headers', 'body'])
 
 logger = logging.getLogger(__name__)
@@ -105,7 +106,7 @@ def trim_line(line, column=0):
     `column`. So it tries to extract 60 characters before and after
     the provided `column` and yield a better context.
     """
-    line = line.strip('\n')
+    line = line.strip(u'\n')
     ll = len(line)
     if ll <= 150:
         return line
@@ -126,10 +127,10 @@ def trim_line(line, column=0):
     line = line[start:end]
     if end < ll:
         # we've snipped from the end
-        line += ' {snip}'
+        line += u' {snip}'
     if start > 0:
         # we've snipped from the beginning
-        line = '{snip} ' + line
+        line = u'{snip} ' + line
     return line
 
 
@@ -172,7 +173,7 @@ def discover_sourcemap(result):
     sourcemap = result.headers.get('sourcemap', result.headers.get('x-sourcemap'))
 
     if not sourcemap:
-        parsed_body = result.body.split('\n')
+        parsed_body = result.body.split(u'\n')
         # Source maps are only going to exist at either the top or bottom of the document.
         # Technically, there isn't anything indicating *where* it should exist, so we
         # are generous and assume it's somewhere either in the first or last 5 lines.
@@ -185,7 +186,7 @@ def discover_sourcemap(result):
         # We want to scan each line sequentially, and the last one found wins
         # This behavior is undocumented, but matches what Chrome and Firefox do.
         for line in possibilities:
-            if line[:21] in ('//# sourceMappingURL=', '//@ sourceMappingURL='):
+            if line[:21] in (u'//# sourceMappingURL=', u'//@ sourceMappingURL='):
                 # We want everything AFTER the indicator, which is 21 chars long
                 sourcemap = line[21:].rstrip()
 
@@ -253,7 +254,7 @@ def fetch_release_file(filename, release):
         else:
             # Write the compressed version to cache, but return the deflated version
             cache.set(cache_key, (releasefile.file.headers, z_body, 200), 3600)
-            result = (releasefile.file.headers, body, 200)
+            result = (releasefile.file.headers, body.decode('utf-8'), 200)
     elif result == -1:
         # We cached an error, so normalize
         # it down to None
@@ -262,7 +263,7 @@ def fetch_release_file(filename, release):
         # We got a cache hit, but the body is compressed, so we
         # need to decompress it before handing it off
         body = zlib.decompress(result[1])
-        result = (result[0], body, result[2])
+        result = (result[0], body.decode('utf-8'), result[2])
 
     return result
 
@@ -387,7 +388,7 @@ def fetch_file(url, project=None, release=None, allow_scraping=True):
         # NOTE: not relying on Content-Type header because apps often don't set this correctly
         body_start = result[1][:20].lstrip()  # Discard leading whitespace (often found before doctype)
 
-        if body_start[:1] == '<':
+        if body_start[:1] == u'<':
             error = {
                 'type': EventError.JS_INVALID_CONTENT,
                 'url': url,
@@ -420,15 +421,12 @@ def fetch_sourcemap(url, project=None, release=None, allow_scraping=True):
         body = result.body
 
     try:
-        if isinstance(body, six.binary_type):
-            body = body.decode('utf-8')
-
         # According to various specs[1][2] a SourceMap may be prefixed to force
         # a Javascript load error.
         # [1] https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.h7yy76c5il9v
         # [2] http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-xssi
-        if body.startswith((")]}'\n", ")]}\n")):
-            body = body.split('\n', 1)[1]
+        if body.startswith((u")]}'\n", u")]}\n")):
+            body = body.split(u'\n', 1)[1]
 
         return sourcemap_to_index(body)
     except Exception as exc:
diff --git a/tests/sentry/lang/javascript/fixtures/embedded.js b/tests/sentry/lang/javascript/fixtures/embedded.js
new file mode 100644
index 0000000000..1809075231
--- /dev/null
+++ b/tests/sentry/lang/javascript/fixtures/embedded.js
@@ -0,0 +1,2 @@
+function add(a,b){"use strict";return a+b}function multiply(a,b){"use strict";return a*b}function divide(a,b){"use strict";try{return multiply(add(a,b),a,b)/c}catch(e){Raven.captureException(e)}}
+//# sourceMappingURL=embedded.js.map
diff --git a/tests/sentry/lang/javascript/fixtures/embedded.js.map b/tests/sentry/lang/javascript/fixtures/embedded.js.map
new file mode 100644
index 0000000000..b4fa92404a
--- /dev/null
+++ b/tests/sentry/lang/javascript/fixtures/embedded.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["file1.js","file2.js"],"names":["add","a","b","multiply","divide","c","e","Raven","captureException"],"mappings":"AAAA,QAASA,KAAIC,EAAGC,GACf,YACA,OAAOD,GAAIC,ECFZ,QAASC,UAASF,EAAGC,GACpB,YACA,OAAOD,GAAIC,EAEZ,QAASE,QAAOH,EAAGC,GAClB,YACA,KACC,MAAOC,UAASH,IAAIC,EAAGC,GAAID,EAAGC,GAAKG,EAClC,MAAOC,GACRC,MAAMC,iBAAiBF","sourcesContent":["function add(a, b) {\n\t\"use strict\";\n\treturn a + b; // fôo\n}\n","function multiply(a, b) {\n\t\"use strict\";\n\treturn a * b;\n}\nfunction divide(a, b) {\n\t\"use strict\";\n\ttry {\n\t\treturn multiply(add(a, b), a, b) / c;\n\t} catch (e) {\n\t\tRaven.captureException(e);\n\t}\n}\n"]}
\ No newline at end of file
diff --git a/tests/sentry/lang/javascript/fixtures/file1.js b/tests/sentry/lang/javascript/fixtures/file1.js
index eed5827852..aa1d764063 100644
--- a/tests/sentry/lang/javascript/fixtures/file1.js
+++ b/tests/sentry/lang/javascript/fixtures/file1.js
@@ -1,4 +1,4 @@
 function add(a, b) {
 	"use strict";
-	return a + b;
-}
\ No newline at end of file
+	return a + b; // fôo
+}
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 543184496d..1d29549d49 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -1,3 +1,5 @@
+# coding: utf-8
+
 from __future__ import absolute_import
 
 import responses
@@ -16,7 +18,7 @@ def get_fixture_path(name):
 
 
 def load_fixture(name):
-    with open(get_fixture_path(name)) as fp:
+    with open(get_fixture_path(name), 'rb') as fp:
         return fp.read()
 
 
@@ -217,13 +219,17 @@ class JavascriptIntegrationTest(TestCase):
     @responses.activate
     def test_sourcemap_source_expansion(self):
         responses.add(responses.GET, 'http://example.com/file.min.js',
-                      body=load_fixture('file.min.js'))
+                      body=load_fixture('file.min.js'),
+                      content_type='application/javascript; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/file1.js',
-                      body=load_fixture('file1.js'))
+                      body=load_fixture('file1.js'),
+                      content_type='application/javascript; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/file2.js',
-                      body=load_fixture('file2.js'))
+                      body=load_fixture('file2.js'),
+                      content_type='application/javascript; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/file.sourcemap.js',
-                      body=load_fixture('file.sourcemap.js'))
+                      body=load_fixture('file.sourcemap.js'),
+                      content_type='application/javascript; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/index.html',
                       body='Not Found', status=404)
 
@@ -271,8 +277,9 @@ class JavascriptIntegrationTest(TestCase):
             'function add(a, b) {',
             '\t"use strict";',
         ]
-        assert frame.context_line == '\treturn a + b;'
-        assert frame.post_context == ['}']
+        expected = u'\treturn a + b; // fôo'
+        assert frame.context_line == expected
+        assert frame.post_context == ['}', '']
 
         raw_frame_list = exception.values[0].raw_stacktrace.frames
         raw_frame = raw_frame_list[0]
@@ -285,16 +292,79 @@ class JavascriptIntegrationTest(TestCase):
         # its raw and original form should be identical
         assert raw_frame_list[1] == frame_list[1]
 
+    @responses.activate
+    def test_sourcemap_embedded_source_expansion(self):
+        responses.add(responses.GET, 'http://example.com/embedded.js',
+                      body=load_fixture('embedded.js'),
+                      content_type='application/javascript; charset=utf-8')
+        responses.add(responses.GET, 'http://example.com/embedded.js.map',
+                      body=load_fixture('embedded.js.map'),
+                      content_type='application/json; charset=utf-8')
+        responses.add(responses.GET, 'http://example.com/index.html',
+                      body='Not Found', status=404)
+
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'Error',
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'abs_path': 'http://example.com/embedded.js',
+                                'filename': 'file.min.js',
+                                'lineno': 1,
+                                'colno': 39,
+                            },
+
+                            # NOTE: Intentionally source is not retrieved from this HTML file
+                            {
+                                'function': 'function: "HTMLDocument.<anonymous>"',
+                                'abs_path': "http//example.com/index.html",
+                                'filename': 'index.html',
+                                'lineno': 283,
+                                'colno': 17,
+                                'in_app': False,
+                            }
+                        ],
+                    },
+                }],
+            }
+        }
+
+        resp = self._postWithHeader(data)
+        assert resp.status_code, 200
+
+        event = Event.objects.get()
+        assert event.data['errors'] == [{'type': 'js_no_source', 'url': 'http//example.com/index.html'}]
+
+        exception = event.interfaces['sentry.interfaces.Exception']
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert frame.pre_context == [
+            'function add(a, b) {',
+            '\t"use strict";',
+        ]
+        expected = u'\treturn a + b; // fôo'
+        assert frame.context_line == expected
+        assert frame.post_context == ['}', '']
+
     @responses.activate
     def test_indexed_sourcemap_source_expansion(self):
         responses.add(responses.GET, 'http://example.com/indexed.min.js',
-                      body=load_fixture('indexed.min.js'))
+                      body=load_fixture('indexed.min.js'),
+                      content_type='application/javascript; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/file1.js',
-                      body=load_fixture('file1.js'))
+                      body=load_fixture('file1.js'),
+                      content_type='application/javascript; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/file2.js',
-                      body=load_fixture('file2.js'))
+                      body=load_fixture('file2.js'),
+                      content_type='application/javascript; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/indexed.sourcemap.js',
-                      body=load_fixture('indexed.sourcemap.js'))
+                      body=load_fixture('indexed.sourcemap.js'),
+                      content_type='application/json; charset=utf-8')
 
         data = {
             'message': 'hello',
@@ -338,8 +408,10 @@ class JavascriptIntegrationTest(TestCase):
             'function add(a, b) {',
             '\t"use strict";',
         ]
-        assert frame.context_line == '\treturn a + b;'
-        assert frame.post_context == ['}']
+
+        expected = u'\treturn a + b; // fôo'
+        assert frame.context_line == expected
+        assert frame.post_context == ['}', '']
 
         raw_frame_list = exception.values[0].raw_stacktrace.frames
         raw_frame = raw_frame_list[0]
@@ -510,8 +582,8 @@ class JavascriptIntegrationTest(TestCase):
             'function add(a, b) {',
             '\t"use strict";',
         ]
-        assert frame.context_line == '\treturn a + b;'
-        assert frame.post_context == ['}']
+        assert frame.context_line == u'\treturn a + b; // fôo'
+        assert frame.post_context == ['}', '']
 
         frame = frame_list[1]
         assert frame.pre_context == [
@@ -533,9 +605,11 @@ class JavascriptIntegrationTest(TestCase):
         that are not found.
         """
         responses.add(responses.GET, 'http://example.com/file.min.js',
-                      body=load_fixture('file.min.js'))
+                      body=load_fixture('file.min.js'),
+                      content_type='application/javascript; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/file.sourcemap.js',
-                      body=load_fixture('file.sourcemap.js'))
+                      body=load_fixture('file.sourcemap.js'),
+                      content_type='application/json; charset=utf-8')
         responses.add(responses.GET, 'http://example.com/file1.js',
                       body='Not Found', status=404)
 
@@ -586,10 +660,12 @@ class JavascriptIntegrationTest(TestCase):
         property - this is unsupported and should fail.
         """
         responses.add(responses.GET, 'http://example.com/unsupported.min.js',
-                      body=load_fixture('unsupported.min.js'))
+                      body=load_fixture('unsupported.min.js'),
+                      content_type='application/javascript; charset=utf-8')
 
         responses.add(responses.GET, 'http://example.com/unsupported.sourcemap.js',
-                      body=load_fixture('unsupported.sourcemap.js'))
+                      body=load_fixture('unsupported.sourcemap.js'),
+                      content_type='application/json; charset=utf-8')
 
         data = {
             'message': 'hello',
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 1488c28764..72e95cbe98 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -12,17 +12,59 @@ from requests.exceptions import RequestException
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.lang.javascript.processor import (
     BadSource, discover_sourcemap, fetch_sourcemap, fetch_file, generate_module,
-    SourceProcessor, trim_line, UrlResult
+    SourceProcessor, trim_line, UrlResult, fetch_release_file
 )
 from sentry.lang.javascript.sourcemaps import SourceMap, SourceMapIndex
 from sentry.lang.javascript.errormapping import (
     rewrite_exception, REACT_MAPPING_URL
 )
-from sentry.models import Release
+from sentry.models import File, Release, ReleaseFile
 from sentry.testutils import TestCase
 
 base64_sourcemap = 'data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhcImhlbGxvLCBXb3JsZCFcIikiXX0='
 
+unicode_body = u"""function add(a, b) {
+    "use strict";
+    return a + b; // fôo
+}"""
+
+
+class FetchReleaseFileTest(TestCase):
+    def test_unicode(self):
+        project = self.project
+        release = Release.objects.create(
+            project=project,
+            version='abc',
+        )
+
+        file = File.objects.create(
+            name='file.min.js',
+            type='release.file',
+            headers={'Content-Type': 'application/json; charset=utf-8'},
+        )
+        file.putfile(six.BytesIO(unicode_body.encode('utf-8')))
+
+        ReleaseFile.objects.create(
+            name='file.min.js',
+            release=release,
+            project=project,
+            file=file,
+        )
+
+        result = fetch_release_file('file.min.js', release)
+
+        assert type(result[1]) is six.text_type
+        assert result == (
+            {'Content-Type': 'application/json; charset=utf-8'},
+            unicode_body,
+            200
+        )
+
+        # test with cache hit, which should be compressed
+        new_result = fetch_release_file('file.min.js', release)
+
+        assert result == new_result
+
 
 class FetchFileTest(TestCase):
     @responses.activate
@@ -112,6 +154,27 @@ class FetchFileTest(TestCase):
         with pytest.raises(BadSource):
             fetch_file('/example.js', release=release)
 
+    @responses.activate
+    def test_unicode_body(self):
+        responses.add(responses.GET, 'http://example.com',
+                      body=u'"fôo bar"'.encode('utf-8'),
+                      content_type='application/json; charset=utf-8')
+
+        result = fetch_file('http://example.com')
+
+        assert len(responses.calls) == 1
+
+        assert result.url == 'http://example.com'
+        assert result.body == u'"fôo bar"'
+        assert result.headers == {'content-type': 'application/json; charset=utf-8'}
+
+        # ensure we use the cached result
+        result2 = fetch_file('http://example.com')
+
+        assert len(responses.calls) == 1
+
+        assert result == result2
+
 
 class DiscoverSourcemapTest(TestCase):
     # discover_sourcemap(result)
