commit 3a9276f9e48411cf430e5978880a139ce655362a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 16 12:27:17 2018 -0800

    feat(servicehooks): Expand event.created hook
    
    This fires a hook for event.created on *every* single event, not just new issues.
    
    It also creates a metric to track events per service hook.

diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 95c47f9a16..5c53a3670c 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -95,9 +95,7 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
         'projects:servicehooks',
         project=event.project,
     ):
-        allowed_events = set()
-        if is_new:
-            allowed_events.add('event.created')
+        allowed_events = set(['event.created'])
         if has_alert:
             allowed_events.add('event.alert')
 
diff --git a/src/sentry/tasks/servicehooks.py b/src/sentry/tasks/servicehooks.py
index 8a60f0eb2d..0bd4d70961 100644
--- a/src/sentry/tasks/servicehooks.py
+++ b/src/sentry/tasks/servicehooks.py
@@ -46,6 +46,7 @@ def get_payload_v0(servicehook, event):
     name='sentry.tasks.process_service_hook', default_retry_delay=60 * 5, max_retries=5
 )
 def process_service_hook(servicehook_id, event, **kwargs):
+    from sentry import tsdb
     from sentry.models import ServiceHook
 
     try:
@@ -53,6 +54,8 @@ def process_service_hook(servicehook_id, event, **kwargs):
     except ServiceHook.DoesNotExist:
         return
 
+    tsdb.incr(tsdb.models.servicehook_fired, servicehook.id)
+
     if servicehook.version == 0:
         payload = get_payload_v0(event)
     else:
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 4399f7d12a..6de7465d60 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -97,6 +97,8 @@ class TSDBModel(Enum):
     # the number of events filtered because their group was discarded
     project_total_received_discarded = 610
 
+    servicehook_fired = 700
+
 
 class BaseTSDB(Service):
     __all__ = (
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 4612d190ab..39cd36b4e4 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -124,7 +124,7 @@ class PostProcessGroupTest(TestCase):
         with self.feature('projects:servicehooks'):
             post_process_group(
                 event=event,
-                is_new=True,
+                is_new=False,
                 is_regression=False,
                 is_sample=False,
             )
@@ -166,6 +166,31 @@ class PostProcessGroupTest(TestCase):
             event=event,
         )
 
+    @patch('sentry.tasks.servicehooks.process_service_hook')
+    @patch('sentry.rules.processor.RuleProcessor')
+    def test_service_hook_does_not_fire_without_alert(
+            self, mock_processor, mock_process_service_hook):
+        group = self.create_group(project=self.project)
+        event = self.create_event(group=group)
+
+        mock_processor.return_value.apply.return_value = []
+
+        ServiceHook.objects.create(
+            project_id=self.project.id,
+            actor_id=self.user.id,
+            events=['event.alert'],
+        )
+
+        with self.feature('projects:servicehooks'):
+            post_process_group(
+                event=event,
+                is_new=False,
+                is_regression=False,
+                is_sample=False,
+            )
+
+        assert not mock_process_service_hook.delay.mock_calls
+
     @patch('sentry.tasks.servicehooks.process_service_hook')
     def test_service_hook_does_not_fire_without_event(self, mock_process_service_hook):
         group = self.create_group(project=self.project)
