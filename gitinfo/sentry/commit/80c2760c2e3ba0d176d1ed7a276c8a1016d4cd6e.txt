commit 80c2760c2e3ba0d176d1ed7a276c8a1016d4cd6e
Author: William Mak <william@wmak.io>
Date:   Tue Mar 17 12:31:13 2020 -0400

    fix(visibility) - Fixing tracing context when description is long (#17710)
    
    * fix(visibility) - Fixing tracing context when description is long
    
    - When a description is too long, during the ContextType init in
      sentry.interfaces.contexts we trim the data.
      - Based on this issue: https://github.com/getsentry/sentry/issues/5303
        we trim "because otherwise payloads are have no realistic max size."
    - So to fix this the orders in which we trim from a dictionary is being
      changed so that we try to keep more keys
      - This is done by sorting by the length of the dictionary value
      - To match existing functionality as much as possible the dictionary
        key is used to sort on a value length tie.

diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index 922ceb2403..4e86f549d5 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -74,7 +74,7 @@ def trim(
     elif isinstance(value, dict):
         result = {}
         _size += 2
-        for k in sorted(value.keys()):
+        for k in sorted(value.keys(), key=lambda x: (len(force_text(value[x])), x)):
             v = value[k]
             trim_v = trim(v, _size=_size, **options)
             result[k] = trim_v
diff --git a/tests/snuba/api/endpoints/test_organization_event_details.py b/tests/snuba/api/endpoints/test_organization_event_details.py
index 6981d04806..3034eb6158 100644
--- a/tests/snuba/api/endpoints/test_organization_event_details.py
+++ b/tests/snuba/api/endpoints/test_organization_event_details.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from datetime import timedelta
 
 from django.core.urlresolvers import reverse
+from sentry.utils.samples import load_data
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.models import Group
@@ -493,3 +494,38 @@ class OrganizationEventDetailsEndpointTest(APITestCase, SnubaTestCase):
         assert response.status_code == 200, response.content
         assert response.data["nextEventID"] == format_project_event(self.project.slug, "d" * 32)
         assert response.data["previousEventID"] == format_project_event(self.project.slug, "f" * 32)
+
+    def test_long_trace_description(self):
+        data = load_data("transaction")
+        data["event_id"] = "d" * 32
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1) - timedelta(seconds=5))
+        data["contexts"]["trace"]["description"] = "b" * 512
+        self.store_event(data=data, project_id=self.project.id)
+
+        url = reverse(
+            "sentry-api-0-organization-event-details",
+            kwargs={
+                "organization_slug": self.project.organization.slug,
+                "project_slug": self.project.slug,
+                "event_id": "d" * 32,
+            },
+        )
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                url,
+                format="json",
+                data={
+                    "field": ["important", "count()", "p95()"],
+                    "query": "transaction.duration:>2 p95():>0",
+                },
+            )
+
+        assert response.status_code == 200, response.content
+        trace = response.data["contexts"]["trace"]
+        original_trace = data["contexts"]["trace"]
+        assert trace["trace_id"] == original_trace["trace_id"]
+        assert trace["span_id"] == original_trace["span_id"]
+        assert trace["parent_span_id"] == original_trace["parent_span_id"]
+        assert trace["description"].endswith("...")
+        assert trace["description"][:-3] in original_trace["description"]
