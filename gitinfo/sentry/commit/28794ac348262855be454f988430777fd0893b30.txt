commit 28794ac348262855be454f988430777fd0893b30
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Tue Sep 24 10:40:43 2019 +0200

    feat(platforms): Add native as platform (#14807)

diff --git a/src/sentry/static/sentry/app/data/platformCategories.jsx b/src/sentry/static/sentry/app/data/platformCategories.jsx
index 7ffaad80d8..2976b718be 100644
--- a/src/sentry/static/sentry/app/data/platformCategories.jsx
+++ b/src/sentry/static/sentry/app/data/platformCategories.jsx
@@ -33,6 +33,8 @@ const frontend = [
 const mobile = ['cocoa-objc', 'cocoa-swift', 'java-android', 'cordova', 'react-native'];
 
 const backend = [
+  'csharp',
+  'elixir',
   'go',
   'go-http',
   'java-appengine',
@@ -41,11 +43,11 @@ const backend = [
   'java-log4j2',
   'java-logback',
   'java-logging',
+  'native',
   'node',
   'node-express',
   'node-koa',
   'node-connect',
-  'csharp',
   'php',
   'php-laravel',
   'php-monolog',
@@ -65,10 +67,9 @@ const backend = [
   'ruby-rails',
   'ruby-rack',
   'rust',
-  'elixir',
 ];
 
-const desktop = ['cocoa', 'csharp', 'java', 'electron', 'minidump'];
+const desktop = ['cocoa', 'csharp', 'java', 'electron', 'minidump', 'native'];
 
 const categoryList = [
   {id: 'popular', name: t('Popular'), platforms: popular},
diff --git a/tests/fixtures/integration-docs/_platforms.json b/tests/fixtures/integration-docs/_platforms.json
index d394a041c6..5dc0f192f6 100644
--- a/tests/fixtures/integration-docs/_platforms.json
+++ b/tests/fixtures/integration-docs/_platforms.json
@@ -192,6 +192,18 @@
       "id": "minidump",
       "name": "Minidump"
     },
+    {
+      "integrations": [
+        {
+          "link": "https://docs.sentry.io/error-reporting/quickstart/?platform=native",
+          "type": "language",
+          "id": "native",
+          "name": "Native (C/C++)"
+        }
+      ],
+      "id": "native",
+      "name": "Native (C/C++)"
+    },
     {
       "integrations": [
         {
diff --git a/tests/fixtures/integration-docs/minidump.json b/tests/fixtures/integration-docs/minidump.json
index 46e893f1fb..f5f5f05936 100644
--- a/tests/fixtures/integration-docs/minidump.json
+++ b/tests/fixtures/integration-docs/minidump.json
@@ -1,6 +1,7 @@
 {
-  "html": "<div class=\"section\" id=\"platform-and-language-support\">\n<h2>Platform and Language Support</h2>\n<p>Minidumps are currently supported for <strong>Windows, macOS and Linux</strong>. There is no\nlimitation as to which programming language can be used. Sentry can also\ndemangle symbols from the following languages; other languages will show the\nmangled name instead:</p>\n<ul class=\"simple\">\n<li>C and C++</li>\n<li>ObjectiveC and ObjectiveC++</li>\n<li>Swift</li>\n<li>Rust</li>\n</ul>\n</div>\n\n\n<div class=\"section\" id=\"creating-and-uploading-minidumps\">\n<span id=\"minidump-integration\"></span><h2>Creating and Uploading Minidumps</h2>\n<p>Depending on your operating system and programming language, there are various\nalternatives to create minidumps and upload them to Sentry. See the following\nresources for libraries that support generating minidump crash reports:</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://docs.getsentry.com/hosted/clients/minidump/breakpad/\">Google Breakpad</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://docs.getsentry.com/hosted/clients/minidump/crashpad/\">Google Crashpad</a></li>\n</ul>\n</div>\n<p>If you have already integrated a library that generates minidumps and would just\nlike to upload them to Sentry, you need to configure the <em>Minidump Endpoint\nURL</em>, which can be found at <em>Project Settings &gt; Client Keys (DSN)</em>. This\nendpoint expects a <code class=\"docutils literal\"><span class=\"pre\">POST</span></code> request with the minidump in the\n<code class=\"docutils literal\"><span class=\"pre\">upload_file_minidump</span></code> field:</p>\n<div class=\"code shell highlight-python\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span>$ curl -X POST \\\n  &#39;___MINIDUMP_URL___&#39; \\\n  -F upload_file_minidump=@mini.dmp\n</pre></div>\n</div>\n<p>To send additional information, simply add more form fields to this request. For\na full description of fields accepted by Sentry, see <a class=\"reference internal\" href=\"#minidump-additional\"><span>Passing Additional Data</span></a>.</p>\n</div>\n", 
-  "link": "https://docs.getsentry.com/hosted/clients/minidump/", 
-  "id": "minidump", 
-  "name": "Minidump"
+  "support_level": "production",
+  "type": "framework",
+  "name": "Minidump",
+  "doc_link": "https://docs.sentry.io/platforms/native/minidump/",
+  "body": "<h2 id=\"minidump-integration\">Creating and Uploading Minidumps</h2>\n\n<p>Depending on your operating system and programming language, there are various\nalternatives to create minidumps and upload them to Sentry. See the following\nresources for libraries that support generating minidump crash reports:</p>\n\n<ul>\n  <li><a href=\"https://docs.sentry.io/platforms/native/\">Native SDK</a></li>\n  <li><a href=\"https://docs.sentry.io/platforms/native/breakpad/\">Google Breakpad</a></li>\n  <li><a href=\"https://docs.sentry.io/platforms/native/crashpad/\">Google Crashpad</a></li>\n</ul>\n\n<p>If you have already integrated a library that generates minidumps and would just\nlike to upload them to Sentry, you need to configure the <em>Minidump Endpoint\nURL</em>, which can be found at <em>Project Settings &gt; Client Keys (DSN)</em>. This\nendpoint expects a <code class=\"highlighter-rouge\">POST</code> request with the minidump in the\n<code class=\"highlighter-rouge\">upload_file_minidump</code> field:</p>\n\n<pre class=\"highlight\"><code><span class=\"nv\">$ </span>curl <span class=\"nt\">-X</span> POST <span class=\"se\">\\</span>\n  <span class=\"s1\">'___MINIDUMP_URL___'</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">-F</span> <span class=\"nv\">upload_file_minidump</span><span class=\"o\">=</span>@mini.dmp\n</code></pre>\n\n<p>To send additional information, add more form fields to this request. For a full\ndescription of fields accepted by Sentry, see <a href=\"https://docs.sentry.io#minidump-additional\">Passing Additional\nData</a>.\n</p>"
 }
diff --git a/tests/fixtures/integration-docs/native.json b/tests/fixtures/integration-docs/native.json
new file mode 100644
index 0000000000..208f7aa750
--- /dev/null
+++ b/tests/fixtures/integration-docs/native.json
@@ -0,0 +1,7 @@
+{
+  "support_level": "production",
+  "type": "language",
+  "name": "Native (C/C++)",
+  "doc_link": "https://docs.sentry.io/error-reporting/quickstart/?platform=native",
+  "body": "<p>Install the SDK by downloading the <a href=\"https://github.com/getsentry/sentry-native/releases\">latest\nrelease</a>. Next, follow the\ninstructions in the <a href=\"https://docs.sentry.io/platforms/native/\"><em>Native SDK Documentation</em></a> to build and link the SDK\nlibrary.</p>\n\n      \n\n\n\n\n        <p>Import and initialize the Sentry SDK early in your application setup:</p>\n\n<pre class=\"highlight\"><code><span class=\"cp\">#include &lt;sentry.h&gt;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">sentry_options_t</span> <span class=\"o\">*</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">sentry_options_new</span><span class=\"p\">();</span>\n  <span class=\"n\">sentry_options_set_dsn</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"s\">\"___PUBLIC_DSN___\"</span><span class=\"p\">);</span>\n  <span class=\"n\">sentry_init</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">);</span>\n\n  <span class=\"cm\">/* ... */</span>\n\n  <span class=\"c1\">// make sure everything flushes</span>\n  <span class=\"n\">sentry_shutdown</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n<p>Alternatively, the DSN can be passed as <code class=\"highlighter-rouge\">SENTRY_DSN</code> environment variable during\nruntime. This can be especially useful for server applications.</p>\n\n      \n\n\n\n        <p>The quickest way to verify Sentry in your Native application is by capturing a message:</p>\n\n<pre class=\"highlight\"><code><span class=\"n\">sentry_capture_event</span><span class=\"p\">(</span><span class=\"n\">sentry_value_new_message_event</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*   level */</span> <span class=\"n\">SENTRY_LEVEL_INFO</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*  logger */</span> <span class=\"s\">\"custom\"</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* message */</span> <span class=\"s\">\"It works!\"</span><span class=\"p\">,</span>\n<span class=\"p\">));</span>\n</code></pre>"
+}
