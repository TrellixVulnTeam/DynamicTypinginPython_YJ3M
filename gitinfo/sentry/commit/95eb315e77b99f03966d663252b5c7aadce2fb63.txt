commit 95eb315e77b99f03966d663252b5c7aadce2fb63
Author: Dan Fuller <dfuller@sentry.io>
Date:   Mon Jul 29 13:16:06 2019 -0700

    feat(api): Build alert rule details api (SEN-872)
    
    Implements an api to fetch details for an individual alert rule.

diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 5ea4ac418a..33d70bb251 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -271,6 +271,7 @@ from .endpoints.user_social_identities_index import UserSocialIdentitiesIndexEnd
 from .endpoints.user_social_identity_details import UserSocialIdentityDetailsEndpoint
 from .endpoints.user_subscriptions import UserSubscriptionsEndpoint
 from .endpoints.useravatar import UserAvatarEndpoint
+from sentry.incidents.endpoints.project_alert_rule_details import ProjectAlertRuleDetailsEndpoint
 from sentry.incidents.endpoints.project_alert_rule_index import ProjectAlertRuleIndexEndpoint
 
 # issues endpoints are available both top level (by numerical ID) as well as coupled
@@ -1050,6 +1051,11 @@ urlpatterns = patterns(
             ProjectDetailsEndpoint.as_view(),
             name='sentry-api-0-project-details'
         ),
+        url(
+            r'^(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/alert-rules/(?P<alert_rule_id>[^\/]+)/$',
+            ProjectAlertRuleDetailsEndpoint.as_view(),
+            name='sentry-api-0-project-alert-rule-details'
+        ),
         url(
             r'^(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/alert-rules/$',
             ProjectAlertRuleIndexEndpoint.as_view(),
diff --git a/src/sentry/incidents/endpoints/bases.py b/src/sentry/incidents/endpoints/bases.py
new file mode 100644
index 0000000000..0ff437a741
--- /dev/null
+++ b/src/sentry/incidents/endpoints/bases.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import
+
+from rest_framework.exceptions import PermissionDenied
+
+from sentry import features
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.incidents.models import AlertRule
+
+
+class ProjectAlertRuleEndpoint(ProjectEndpoint):
+    def convert_args(self, request, alert_rule_id, *args, **kwargs):
+        args, kwargs = super(ProjectAlertRuleEndpoint, self).convert_args(
+            request,
+            *args,
+            **kwargs
+        )
+        project = kwargs['project']
+
+        if not features.has('organizations:incidents', project.organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        if not request.access.has_project_access(project):
+            raise PermissionDenied
+
+        try:
+            kwargs['alert_rule'] = AlertRule.objects.get(
+                project=project,
+                id=alert_rule_id,
+            )
+        except AlertRule.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return args, kwargs
diff --git a/src/sentry/incidents/endpoints/project_alert_rule_details.py b/src/sentry/incidents/endpoints/project_alert_rule_details.py
new file mode 100644
index 0000000000..a0b5f431af
--- /dev/null
+++ b/src/sentry/incidents/endpoints/project_alert_rule_details.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.alert_rule import AlertRuleSerializer
+from sentry.incidents.endpoints.bases import ProjectAlertRuleEndpoint
+
+
+class ProjectAlertRuleDetailsEndpoint(ProjectAlertRuleEndpoint):
+    def get(self, request, project, alert_rule):
+        """
+        Fetch an alert rule.
+        ``````````````````
+        :auth: required
+        """
+        data = serialize(alert_rule, request.user, AlertRuleSerializer())
+        return Response(data)
diff --git a/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py b/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
new file mode 100644
index 0000000000..ee71f686a2
--- /dev/null
+++ b/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
@@ -0,0 +1,87 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.api.serializers import serialize
+from sentry.incidents.logic import create_alert_rule
+from sentry.incidents.models import (
+    AlertRuleAggregations,
+    AlertRuleThresholdType,
+)
+from sentry.testutils import APITestCase
+
+
+class AlertRuleDetailsEndpointTest(APITestCase):
+    endpoint = 'sentry-api-0-project-alert-rule-details'
+
+    @fixture
+    def organization(self):
+        return self.create_organization()
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    @fixture
+    def alert_rule(self):
+        return create_alert_rule(
+            self.project,
+            'hello',
+            AlertRuleThresholdType.ABOVE,
+            'level:error',
+            [AlertRuleAggregations.TOTAL],
+            10,
+            1000,
+            400,
+            1,
+        )
+
+    def test_invalid_rule_id(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+        with self.feature('organizations:incidents'):
+            resp = self.get_response(
+                self.organization.slug,
+                self.project.slug,
+                1234,
+            )
+
+        assert resp.status_code == 404
+
+    def test_simple(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+        with self.feature('organizations:incidents'):
+            resp = self.get_valid_response(
+                self.organization.slug,
+                self.project.slug,
+                self.alert_rule.id,
+            )
+
+        assert resp.data == serialize(self.alert_rule)
+
+    def test_permissions(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.create_user())
+        with self.feature('organizations:incidents'):
+            resp = self.get_response(
+                self.organization.slug,
+                self.project.slug,
+                self.alert_rule.id,
+            )
+
+        assert resp.status_code == 403
+
+    def test_no_feature(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+        resp = self.get_response(
+            self.organization.slug,
+            self.project.slug,
+            self.alert_rule.id,
+        )
+        assert resp.status_code == 404
