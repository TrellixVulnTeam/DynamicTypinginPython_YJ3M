commit c40d5d620dfe3452d9d066b635e99c92ef9743ee
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Jul 25 11:32:53 2019 -0700

    fix(app platform) where stack trace does not always load (#14127)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 57142a733b..48b62c5343 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -15,9 +15,9 @@ import StrictClick from 'app/components/strictClick';
 import Tooltip from 'app/components/tooltip';
 import Truncate from 'app/components/truncate';
 import OpenInContextLine from 'app/components/events/interfaces/openInContextLine';
-import SentryAppComponentsStore from 'app/stores/sentryAppComponentsStore';
 import space from 'app/styles/space';
 import ErrorBoundary from 'app/components/errorBoundary';
+import withSentryAppComponents from 'app/utils/withSentryAppComponents';
 
 export function trimPackage(pkg) {
   const pieces = pkg.split(/^([a-z]:\\|\\\\)/i.test(pkg) ? '\\' : '/');
@@ -62,7 +62,7 @@ class FunctionName extends React.Component {
   }
 }
 
-const Frame = createReactClass({
+export const Frame = createReactClass({
   displayName: 'Frame',
 
   propTypes: {
@@ -75,6 +75,7 @@ const Frame = createReactClass({
     isOnlyFrame: PropTypes.bool,
     timesRepeated: PropTypes.number,
     registers: PropTypes.objectOf(PropTypes.string.isRequired),
+    components: PropTypes.array.isRequired,
   },
 
   getDefaultProps() {
@@ -157,7 +158,7 @@ const Frame = createReactClass({
   },
 
   getSentryAppComponents() {
-    return SentryAppComponentsStore.getComponentByType('stacktrace-link');
+    return this.props.components;
   },
 
   renderDefaultTitle() {
@@ -556,4 +557,4 @@ const DefaultLine = styled(VertCenterWrapper)`
   justify-content: space-between;
 `;
 
-export default Frame;
+export default withSentryAppComponents(Frame, {componentType: 'stacktrace-link'});
diff --git a/src/sentry/static/sentry/app/utils/withSentryAppComponents.jsx b/src/sentry/static/sentry/app/utils/withSentryAppComponents.jsx
new file mode 100644
index 0000000000..61269235f9
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withSentryAppComponents.jsx
@@ -0,0 +1,23 @@
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import getDisplayName from 'app/utils/getDisplayName';
+import SentryAppComponentsStore from 'app/stores/sentryAppComponentsStore';
+
+const withSentryAppComponents = (WrappedComponent, {componentType} = {}) =>
+  createReactClass({
+    displayName: `withSentryAppComponents(${getDisplayName(WrappedComponent)})`,
+    mixins: [Reflux.connect(SentryAppComponentsStore, 'components')],
+
+    render() {
+      return (
+        <WrappedComponent
+          components={SentryAppComponentsStore.getComponentByType(componentType)}
+          {...this.props}
+        />
+      );
+    },
+  });
+
+export default withSentryAppComponents;
diff --git a/tests/js/spec/components/events/interfaces/frame.spec.jsx b/tests/js/spec/components/events/interfaces/frame.spec.jsx
index 6cfccfb59c..944fdd39d3 100644
--- a/tests/js/spec/components/events/interfaces/frame.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frame.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {shallow} from 'enzyme';
 
-import Frame from 'app/components/events/interfaces/frame';
+import {Frame} from 'app/components/events/interfaces/frame';
 
 describe('Frame', function() {
   let data;
@@ -20,7 +20,7 @@ describe('Frame', function() {
     });
 
     it('should render the source map information as a HTML string', function() {
-      const frame = shallow(<Frame data={data} />);
+      const frame = shallow(<Frame data={data} components={[]} />);
 
       expect(frame.find('Tooltip').prop('title')).toMatchSnapshot();
     });
@@ -36,7 +36,7 @@ describe('Frame', function() {
         ],
       };
 
-      const frame = shallow(<Frame data={data} isExpanded />);
+      const frame = shallow(<Frame data={data} components={[]} isExpanded />);
       expect(frame.find('ContextLine')).toMatchSnapshot();
     });
 
@@ -62,7 +62,9 @@ describe('Frame', function() {
         rsp: '0x00007ffedfdff7c0',
       };
 
-      const frame = shallow(<Frame data={data} registers={registers} isExpanded />);
+      const frame = shallow(
+        <Frame data={data} registers={registers} components={[]} isExpanded />
+      );
       expect(frame.find('FrameRegisters').prop('data')).toEqual(registers);
     });
 
@@ -70,7 +72,9 @@ describe('Frame', function() {
       data = {};
       const registers = {};
 
-      const frame = shallow(<Frame data={data} registers={registers} isExpanded />);
+      const frame = shallow(
+        <Frame data={data} registers={registers} components={[]} isExpanded />
+      );
       expect(frame.find('FrameRegisters')).toHaveLength(0);
     });
 
@@ -88,7 +92,7 @@ describe('Frame', function() {
         },
       };
 
-      const frame = shallow(<Frame data={data} isExpanded />);
+      const frame = shallow(<Frame data={data} components={[]} isExpanded />);
       expect(frame.find('FrameVariables').prop('data')).toEqual(data.vars);
     });
   });
diff --git a/tests/js/spec/utils/withSentryAppComponents.spec.jsx b/tests/js/spec/utils/withSentryAppComponents.spec.jsx
new file mode 100644
index 0000000000..16e99845c5
--- /dev/null
+++ b/tests/js/spec/utils/withSentryAppComponents.spec.jsx
@@ -0,0 +1,46 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import SentryAppComponentsStore from 'app/stores/sentryAppComponentsStore';
+import withSentryAppComponents from 'app/utils/withSentryAppComponents';
+
+describe('withSentryAppComponents HoC', function() {
+  beforeEach(() => {
+    SentryAppComponentsStore.init();
+  });
+
+  it('handles components without a type', function() {
+    const MyComponent = () => null;
+    const Container = withSentryAppComponents(MyComponent);
+    const wrapper = mount(<Container />);
+
+    expect(wrapper.find('MyComponent').prop('components')).toEqual([]);
+
+    SentryAppComponentsStore.onLoadComponents([
+      {type: 'some-type'},
+      {type: 'another-type'},
+    ]);
+    wrapper.update();
+
+    expect(wrapper.find('MyComponent').prop('components')).toEqual([
+      {type: 'some-type'},
+      {type: 'another-type'},
+    ]);
+  });
+
+  it('handles components of a certain type', function() {
+    const MyComponent = () => null;
+    const Container = withSentryAppComponents(MyComponent, {componentType: 'some-type'});
+    const wrapper = mount(<Container />);
+
+    expect(wrapper.find('MyComponent').prop('components')).toEqual([]);
+
+    SentryAppComponentsStore.onLoadComponents([
+      {type: 'some-type'},
+      {type: 'another-type'},
+    ]);
+    wrapper.update();
+
+    expect(wrapper.find('MyComponent').prop('components')).toEqual([{type: 'some-type'}]);
+  });
+});
