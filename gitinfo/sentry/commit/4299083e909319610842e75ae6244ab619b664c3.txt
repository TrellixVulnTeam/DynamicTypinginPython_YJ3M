commit 4299083e909319610842e75ae6244ab619b664c3
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Jan 21 10:39:26 2020 -0500

    fix(tags): Refactor to fetch tags with respect to the global selection header (#16255)
    
    Using an HOC allows us to leverage the existing reflux stores more
    effectively and better manage how often an organization's tag list is
    reloaded.
    
    The HOC can be used multiple times in a render tree and we don't want
    multiple requests sent. Instead update all the top level components to
    initiate requests to populate the store and have withTags() listen to
    store changes. This pattern is used quite extensively by our other HOC
    components.
    
    Co-authored-by: Mark Story <mark@mark-story.com>

diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index c4759147d4..8dae2cfe89 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -2,8 +2,9 @@ import {t} from 'app/locale';
 import TagStore from 'app/stores/tagStore';
 import TagActions from 'app/actions/tagActions';
 import AlertActions from 'app/actions/alertActions';
+import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 
-const MAX_TAGS = 500;
+const MAX_TAGS = 1000;
 
 const BUILTIN_TAGS = [
   'event.type',
@@ -60,6 +61,44 @@ function tagFetchSuccess(tags) {
   TagActions.loadTagsSuccess(trimmedTags);
 }
 
+/**
+ * Load an organization's tags based on a global selection value.
+ *
+ * @param {Client} api
+ * @param {String} orgId
+ * @param {GlobalSelection} selection
+ */
+export function loadOrganizationTags(api, orgId, selection) {
+  TagStore.reset();
+
+  const url = `/organizations/${orgId}/tags/`;
+  const query = selection.datetime ? {...getParams(selection.datetime)} : {};
+  query.use_cache = '1';
+
+  if (selection.projects) {
+    query.project = selection.projects;
+  }
+  const promise = api
+    .requestPromise(url, {
+      method: 'GET',
+      query,
+    })
+    .then(tags => {
+      return [...BUILTIN_TAGS, ...tags];
+    });
+
+  promise.then(
+    results => {
+      tagFetchSuccess(results);
+    },
+    reason => {
+      TagActions.loadTagsError(reason);
+    }
+  );
+
+  return promise;
+}
+
 /**
  * Fetch tags for an organization or a subset or projects.
  */
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
index 022a8dc0b3..8968ea96ed 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
@@ -65,7 +65,7 @@ const getDateTimeString = (
 };
 
 const parseUtcValue = (utc: any) => {
-  if (typeof utc !== 'undefined') {
+  if (defined(utc)) {
     return utc === true || utc === 'true' ? 'true' : 'false';
   }
   return undefined;
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
index 944a1f2c72..37f5e3773a 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
@@ -7,7 +7,7 @@ import {defined} from 'app/utils';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 
-import {URL_PARAM} from 'app/constants/globalSelectionHeader';
+import {URL_PARAM, DATE_TIME_KEYS} from 'app/constants/globalSelectionHeader';
 
 // Parses URL query parameters for values relevant to global selection header
 export function getStateFromQuery(query) {
@@ -58,3 +58,10 @@ export function getStateFromQuery(query) {
 export function extractSelectionParameters(query) {
   return pickBy(pick(query, Object.values(URL_PARAM)), identity);
 }
+
+/**
+ * Extract the global selection datetime parameters from an object.
+ */
+export function extractDatetimeSelectionParameters(query) {
+  return pickBy(pick(query, Object.values(DATE_TIME_KEYS)), identity);
+}
diff --git a/src/sentry/static/sentry/app/constants/globalSelectionHeader.tsx b/src/sentry/static/sentry/app/constants/globalSelectionHeader.tsx
index 7b8e52dc84..2b23eb98cc 100644
--- a/src/sentry/static/sentry/app/constants/globalSelectionHeader.tsx
+++ b/src/sentry/static/sentry/app/constants/globalSelectionHeader.tsx
@@ -14,7 +14,7 @@ export const DATE_TIME = {
   UTC: 'utc',
 };
 
-export const DATE_TIME_KEYS = Object.values(DATE_TIME);
+export const DATE_TIME_KEYS = [...Object.values(DATE_TIME), 'statsPeriod'];
 
 export const LOCAL_STORAGE_KEY = 'global-selection';
 
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index d2b1c728be..ef85a90ee3 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -261,9 +261,8 @@ export const EventError = PropTypes.shape({
 });
 
 export const Tag = PropTypes.shape({
-  id: PropTypes.string.isRequired,
   key: PropTypes.string.isRequired,
-  name: PropTypes.string.isRequired,
+  name: PropTypes.string,
   uniqueValues: PropTypes.number,
 });
 
diff --git a/src/sentry/static/sentry/app/stores/tagStore.jsx b/src/sentry/static/sentry/app/stores/tagStore.jsx
index 3c6988d905..c448ed55da 100644
--- a/src/sentry/static/sentry/app/stores/tagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/tagStore.jsx
@@ -112,7 +112,7 @@ const TagStore = Reflux.createStore({
     return Object.keys(this.tags);
   },
 
-  getTagValues(tagKey, query) {
+  getTagValues(tagKey) {
     return this.tags[tagKey].values || [];
   },
 
@@ -145,7 +145,7 @@ const TagStore = Reflux.createStore({
     this.trigger(this.tags);
   },
 
-  onMemberListStoreChange(members) {
+  onMemberListStoreChange() {
     const assignedTag = this.tags.assigned;
     assignedTag.values = getMemberListStoreUsernames();
     assignedTag.values.unshift('me');
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index eb1100cb4c..a5f6daf456 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -744,3 +744,11 @@ export type OnboardingTask = {
   location: string | (() => void);
   display: boolean;
 };
+
+export type Tag = {
+  name: string;
+  key: string;
+  values?: string[];
+  totalValues?: number;
+  predefined?: boolean;
+};
diff --git a/src/sentry/static/sentry/app/utils/withTags.tsx b/src/sentry/static/sentry/app/utils/withTags.tsx
new file mode 100644
index 0000000000..82759fea58
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withTags.tsx
@@ -0,0 +1,41 @@
+import React from 'react';
+import Reflux from 'reflux';
+
+import createReactClass from 'create-react-class';
+import getDisplayName from 'app/utils/getDisplayName';
+import TagStore from 'app/stores/tagStore';
+import {Tag} from 'app/types';
+
+type TagCollection = {[key: string]: Tag};
+
+type InjectedTagsProps = {
+  tags: TagCollection;
+};
+
+type State = {
+  tags: TagCollection;
+};
+
+const withTags = <P extends InjectedTagsProps>(
+  WrappedComponent: React.ComponentType<P>
+) =>
+  createReactClass<Omit<P, keyof InjectedTagsProps>, State>({
+    displayName: `withTags(${getDisplayName(WrappedComponent)})`,
+    mixins: [Reflux.listenTo(TagStore, 'onTagsUpdate') as any],
+
+    getInitialState() {
+      return {
+        tags: TagStore.getAllTags(),
+      };
+    },
+
+    onTagsUpdate(tags: TagCollection) {
+      this.setState({tags});
+    },
+
+    render() {
+      return <WrappedComponent tags={this.state.tags} {...(this.props as P)} />;
+    },
+  });
+
+export default withTags;
diff --git a/src/sentry/static/sentry/app/views/events/index.jsx b/src/sentry/static/sentry/app/views/events/index.jsx
index dbe7a26a26..702c45e839 100644
--- a/src/sentry/static/sentry/app/views/events/index.jsx
+++ b/src/sentry/static/sentry/app/views/events/index.jsx
@@ -1,7 +1,9 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
+import isEqual from 'lodash/isEqual';
 
+import {loadOrganizationTags} from 'app/actionCreators/tags';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {t} from 'app/locale';
 import BetaTag from 'app/components/betaTag';
@@ -10,6 +12,7 @@ import GlobalSelectionHeader from 'app/components/organizations/globalSelectionH
 import NoProjectMessage from 'app/components/noProjectMessage';
 import SentryTypes from 'app/sentryTypes';
 import PageHeading from 'app/components/pageHeading';
+import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 import {PageContent, PageHeader} from 'app/styles/organization';
@@ -18,15 +21,25 @@ import SearchBar from './searchBar';
 
 class EventsContainer extends React.Component {
   static propTypes = {
+    api: PropTypes.object,
     organization: SentryTypes.Organization,
     router: PropTypes.object,
     selection: SentryTypes.GlobalSelection,
   };
 
-  constructor(props) {
-    super(props);
+  componentDidMount() {
+    const {api, organization, selection} = this.props;
+    loadOrganizationTags(api, organization.slug, selection);
+  }
 
-    this.state = {};
+  componentDidUpdate(prevProps) {
+    const {api, organization, selection} = this.props;
+    if (
+      !isEqual(prevProps.selection.projects, selection.projects) ||
+      !isEqual(prevProps.selection.datetime, selection.datetime)
+    ) {
+      loadOrganizationTags(api, organization.slug, selection);
+    }
   }
 
   handleSearch = query => {
@@ -76,7 +89,7 @@ class EventsContainer extends React.Component {
     );
   }
 }
-export default withOrganization(withGlobalSelection(EventsContainer));
+export default withApi(withOrganization(withGlobalSelection(EventsContainer)));
 export {EventsContainer};
 
 const Body = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/events/searchBar.jsx b/src/sentry/static/sentry/app/views/events/searchBar.jsx
index 3ad964fa18..9a3136ee84 100644
--- a/src/sentry/static/sentry/app/views/events/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/events/searchBar.jsx
@@ -3,15 +3,15 @@ import flatten from 'lodash/flatten';
 import memoize from 'lodash/memoize';
 import PropTypes from 'prop-types';
 import React from 'react';
+import isEqual from 'lodash/isEqual';
 
 import {NEGATION_OPERATOR, SEARCH_TYPES, SEARCH_WILDCARD} from 'app/constants';
-import {addErrorMessage} from 'app/actionCreators/indicator';
 import {defined} from 'app/utils';
-import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
-import {t} from 'app/locale';
+import {fetchTagValues} from 'app/actionCreators/tags';
 import SentryTypes from 'app/sentryTypes';
 import SmartSearchBar from 'app/components/smartSearchBar';
 import withApi from 'app/utils/withApi';
+import withTags from 'app/utils/withTags';
 
 const tagToObjectReducer = (acc, name) => {
   acc[name] = {
@@ -30,37 +30,22 @@ class SearchBar extends React.PureComponent {
   static propTypes = {
     api: PropTypes.object,
     organization: SentryTypes.Organization,
+    tags: PropTypes.objectOf(SentryTypes.Tag),
     projectIds: PropTypes.arrayOf(PropTypes.number),
   };
 
-  state = {
-    tags: {},
-  };
-
   componentDidMount() {
-    this.fetchData();
+    // Clear memoized data on mount to make tests more consistent.
+    this.getEventFieldValues.cache.clear();
   }
 
   componentDidUpdate(prevProps) {
-    if (this.props.projectIds !== prevProps.projectIds) {
-      this.fetchData();
+    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {
       // Clear memoized data when projects change.
       this.getEventFieldValues.cache.clear();
     }
   }
 
-  fetchData = async () => {
-    const {api, organization, projectIds} = this.props;
-    try {
-      const tags = await fetchOrganizationTags(api, organization.slug, projectIds);
-      this.setState({
-        tags: this.getAllTags(tags.map(({key}) => key)),
-      });
-    } catch (_) {
-      addErrorMessage(t('There was a problem fetching tags'));
-    }
-  };
-
   /**
    * Returns array of tag values that substring match `query`; invokes `callback`
    * with data when ready
@@ -105,7 +90,7 @@ class SearchBar extends React.PureComponent {
             hasRecentSearches
             savedSearchType={SEARCH_TYPES.EVENT}
             onGetTagValues={this.getEventFieldValues}
-            supportedTags={this.state.tags}
+            supportedTags={this.props.tags}
             prepareQuery={this.prepareQuery}
             excludeEnvironment
             dropdownClassName={css`
@@ -119,4 +104,4 @@ class SearchBar extends React.PureComponent {
   }
 }
 
-export default withApi(SearchBar);
+export default withApi(withTags(SearchBar));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 6bc110f245..2ccc99807e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -4,11 +4,14 @@ import * as ReactRouter from 'react-router';
 import {Location} from 'history';
 import omit from 'lodash/omit';
 import uniqBy from 'lodash/uniqBy';
+import isEqual from 'lodash/isEqual';
 
-import {Organization} from 'app/types';
+import {Organization, GlobalSelection} from 'app/types';
 
+import {Client} from 'app/api';
 import {Panel} from 'app/components/panels';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
+import {loadOrganizationTags} from 'app/actionCreators/tags';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import NoProjectMessage from 'app/components/noProjectMessage';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
@@ -21,7 +24,9 @@ import EventsChart from 'app/views/events/eventsChart';
 
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import getDynamicText from 'app/utils/getDynamicText';
+import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
 
 import Table from './table';
 import Tags from './tags';
@@ -35,9 +40,11 @@ const CHART_AXIS_OPTIONS = [
 ];
 
 type Props = {
+  api: Client;
   router: ReactRouter.InjectedRouter;
   location: Location;
   organization: Organization;
+  selection: GlobalSelection;
 };
 
 type State = {
@@ -54,6 +61,21 @@ class Results extends React.Component<Props, State> {
     eventView: EventView.fromLocation(this.props.location),
   };
 
+  componentDidMount() {
+    const {api, organization, selection} = this.props;
+    loadOrganizationTags(api, organization.slug, selection);
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    const {api, organization, selection} = this.props;
+    if (
+      !isEqual(prevProps.selection.projects, selection.projects) ||
+      !isEqual(prevProps.selection.datetime, selection.datetime)
+    ) {
+      loadOrganizationTags(api, organization.slug, selection);
+    }
+  }
+
   handleSearch = (query: string) => {
     const {router, location} = this.props;
 
@@ -228,4 +250,4 @@ export function generateDiscoverResultsRoute(orgSlug: string): string {
   return `/organizations/${orgSlug}/eventsv2/results/`;
 }
 
-export default withOrganization(Results);
+export default withApi(withOrganization(withGlobalSelection(Results)));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 12392aca5b..8baab069de 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -5,11 +5,10 @@ import styled from '@emotion/styled';
 
 import {Client} from 'app/api';
 import space from 'app/styles/space';
-import {Organization} from 'app/types';
+import {Organization, Tag} from 'app/types';
 import withApi from 'app/utils/withApi';
-
+import withTags from 'app/utils/withTags';
 import Pagination from 'app/components/pagination';
-import {fetchOrganizationTags} from 'app/actionCreators/tags';
 
 import {DEFAULT_EVENT_VIEW} from '../data';
 import EventView, {isAPIPayloadSimilar} from '../eventView';
@@ -21,18 +20,16 @@ type TableProps = {
   location: Location;
   eventView: EventView;
   organization: Organization;
+  tags: {[key: string]: Tag};
   title: string;
 };
+
 type TableState = {
   isLoading: boolean;
   tableFetchID: symbol | undefined;
-  orgTagsFetchID: symbol | undefined;
   error: null | string;
-
   pageLinks: null | string;
-
   tableData: TableData | null | undefined;
-  tagKeys: null | string[];
 };
 
 /**
@@ -47,12 +44,10 @@ class Table extends React.PureComponent<TableProps, TableState> {
   state: TableState = {
     isLoading: true,
     tableFetchID: undefined,
-    orgTagsFetchID: undefined,
     error: null,
 
     pageLinks: null,
     tableData: null,
-    tagKeys: null,
   };
 
   componentDidMount() {
@@ -92,15 +87,16 @@ class Table extends React.PureComponent<TableProps, TableState> {
     const url = `/organizations/${organization.slug}/eventsv2/`;
 
     const tableFetchID = Symbol('tableFetchID');
-    const orgTagsFetchID = Symbol('orgTagsFetchID');
 
-    this.setState({isLoading: true, tableFetchID, orgTagsFetchID});
+    this.setState({isLoading: true, tableFetchID});
+
+    const apiPayload = eventView.getEventsAPIPayload(location);
 
     this.props.api
       .requestPromise(url, {
         method: 'GET',
         includeAllArgs: true,
-        query: eventView.getEventsAPIPayload(location),
+        query: apiPayload,
       })
       .then(([data, _, jqXHR]) => {
         if (this.state.tableFetchID !== tableFetchID) {
@@ -127,25 +123,12 @@ class Table extends React.PureComponent<TableProps, TableState> {
           tableData: null,
         });
       });
-
-    fetchOrganizationTags(this.props.api, organization.slug)
-      .then(tags => {
-        if (this.state.orgTagsFetchID !== orgTagsFetchID) {
-          // invariant: a different request was initiated after this request
-          return;
-        }
-
-        this.setState({tagKeys: tags.map(({key}) => key), orgTagsFetchID: undefined});
-      })
-      .catch(() => {
-        this.setState({orgTagsFetchID: undefined});
-        // Do nothing.
-      });
   };
 
   render() {
-    const {eventView} = this.props;
-    const {pageLinks, tableData, tagKeys, isLoading, error} = this.state;
+    const {eventView, tags} = this.props;
+    const {pageLinks, tableData, isLoading, error} = this.state;
+    const tagKeys = Object.values(tags).map(({key}) => key);
 
     return (
       <Container>
@@ -163,7 +146,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
   }
 }
 
-export default withApi<TableProps>(Table);
+export default withApi(withTags(Table));
 
 const Container = styled('div')`
   min-width: 0;
diff --git a/src/sentry/static/sentry/app/views/issueList/overview.jsx b/src/sentry/static/sentry/app/views/issueList/overview.jsx
index 583e7094b6..1ab38636bb 100644
--- a/src/sentry/static/sentry/app/views/issueList/overview.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/overview.jsx
@@ -22,7 +22,7 @@ import {
 } from 'app/actionCreators/savedSearches';
 import {extractSelectionParameters} from 'app/components/organizations/globalSelectionHeader/utils';
 import {fetchOrgMembers, indexMembersByProject} from 'app/actionCreators/members';
-import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
+import {loadOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
 import {getUtcDateString} from 'app/utils/dates';
 import CursorPoller from 'app/utils/cursorPoller';
 import GroupStore from 'app/stores/groupStore';
@@ -275,7 +275,7 @@ const IssueListOverview = createReactClass({
 
   fetchTags() {
     const {organization, selection} = this.props;
-    fetchOrganizationTags(this.api, organization.slug, selection.projects);
+    loadOrganizationTags(this.api, organization.slug, selection);
   },
 
   fetchData() {
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index bad8d96faf..901d3d79ef 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -2,7 +2,6 @@ import {PlainRoute} from 'react-router/lib/Route';
 import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
-import {Client} from 'app/api';
 import {MetricAction} from 'app/types/alerts';
 import {Organization, Project, Config} from 'app/types';
 import {
@@ -14,6 +13,7 @@ import {
 import {createDefaultTrigger} from 'app/views/settings/incidentRules/constants';
 import {defined} from 'app/utils';
 import {t} from 'app/locale';
+import {fetchOrganizationTags} from 'app/actionCreators/tags';
 import Access from 'app/components/acl/access';
 import AsyncComponent from 'app/components/asyncComponent';
 import Button from 'app/components/button';
@@ -23,7 +23,6 @@ import RuleNameForm from 'app/views/settings/incidentRules/ruleNameForm';
 import Triggers from 'app/views/settings/incidentRules/triggers';
 import TriggersChart from 'app/views/settings/incidentRules/triggers/chart';
 import recreateRoute from 'app/utils/recreateRoute';
-import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
 import withProject from 'app/utils/withProject';
 
@@ -33,7 +32,6 @@ import FormModel from '../../components/forms/model';
 import RuleConditionsForm from '../ruleConditionsForm';
 
 type Props = {
-  api: Client;
   config: Config;
   organization: Organization;
   project: Project;
@@ -65,6 +63,12 @@ type State = {
 const isEmpty = (str: unknown): boolean => str === '' || !defined(str);
 
 class RuleFormContainer extends AsyncComponent<Props, State> {
+  componentDidMount() {
+    const {organization, project} = this.props;
+    // SearchBar gets its tags from Reflux.
+    fetchOrganizationTags(this.api, organization.slug, [project.id]);
+  }
+
   getDefaultState(): State {
     const {rule} = this.props;
 
@@ -184,13 +188,13 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
       return;
     }
 
-    const {api, organization, rule, onSubmitSuccess} = this.props;
+    const {organization, rule, onSubmitSuccess} = this.props;
 
     // form model has all form state data, however we use local state to keep
     // track of the list of triggers (and actions within triggers)
     try {
       addLoadingMessage(t('Saving alert'));
-      const resp = await addOrUpdateRule(api, organization.slug, {
+      const resp = await addOrUpdateRule(this.api, organization.slug, {
         ...rule,
         ...model.getTransformedData(),
         triggers: this.state.triggers,
@@ -238,11 +242,11 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
   };
 
   handleDeleteRule = async () => {
-    const {api, params} = this.props;
+    const {params} = this.props;
     const {orgId, projectId, incidentRuleId} = params;
 
     try {
-      await api.requestPromise(
+      await this.api.requestPromise(
         `/projects/${orgId}/${projectId}/alert-rules/${incidentRuleId}/`,
         {
           method: 'DELETE',
@@ -264,7 +268,6 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
 
   renderBody() {
     const {
-      api,
       config,
       organization,
       incidentRuleId,
@@ -313,7 +316,7 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
             submitLabel={t('Save Rule')}
           >
             <TriggersChart
-              api={api}
+              api={this.api}
               config={config}
               organization={organization}
               projects={this.state.projects}
@@ -347,4 +350,4 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
 }
 
 export {RuleFormContainer};
-export default withConfig(withApi(withProject(RuleFormContainer)));
+export default withConfig(withProject(RuleFormContainer));
diff --git a/tests/js/spec/components/organizations/getParams.spec.jsx b/tests/js/spec/components/organizations/getParams.spec.jsx
index 2b94a75e4a..d9bc2aba08 100644
--- a/tests/js/spec/components/organizations/getParams.spec.jsx
+++ b/tests/js/spec/components/organizations/getParams.spec.jsx
@@ -4,6 +4,8 @@ describe('getParams', function() {
   it('should return default statsPeriod if it is not provided or is invalid', function() {
     expect(getParams({})).toEqual({statsPeriod: '14d'});
     expect(getParams({statsPeriod: 'invalid'})).toEqual({statsPeriod: '14d'});
+    expect(getParams({statsPeriod: null})).toEqual({statsPeriod: '14d'});
+    expect(getParams({statsPeriod: undefined})).toEqual({statsPeriod: '14d'});
     expect(getParams({statsPeriod: '24f'})).toEqual({statsPeriod: '14d'});
   });
 
@@ -44,10 +46,35 @@ describe('getParams', function() {
     expect(getParams({start: '2019-10-01T00:00:00'})).toEqual({
       statsPeriod: '14d',
     });
+    expect(getParams({start: null})).toEqual({
+      statsPeriod: '14d',
+    });
+    expect(getParams({start: undefined})).toEqual({
+      statsPeriod: '14d',
+    });
 
     expect(getParams({end: '2019-10-01T00:00:00'})).toEqual({
       statsPeriod: '14d',
     });
+    expect(getParams({end: null})).toEqual({
+      statsPeriod: '14d',
+    });
+    expect(getParams({end: undefined})).toEqual({
+      statsPeriod: '14d',
+    });
+
+    expect(getParams({start: undefined, end: undefined})).toEqual({
+      statsPeriod: '14d',
+    });
+    expect(getParams({start: null, end: undefined})).toEqual({
+      statsPeriod: '14d',
+    });
+    expect(getParams({start: undefined, end: null})).toEqual({
+      statsPeriod: '14d',
+    });
+    expect(getParams({start: null, end: null})).toEqual({
+      statsPeriod: '14d',
+    });
 
     expect(
       getParams({
@@ -71,9 +98,12 @@ describe('getParams', function() {
     ).toEqual({statsPeriod: '14d'});
   });
 
-  it('should parse utc', function() {
+  it('should parse utc when it is defined', function() {
     expect(getParams({utc: 'true'})).toEqual({utc: 'true', statsPeriod: '14d'});
     expect(getParams({utc: 'false'})).toEqual({utc: 'false', statsPeriod: '14d'});
     expect(getParams({utc: 'invalid'})).toEqual({utc: 'false', statsPeriod: '14d'});
+
+    expect(getParams({utc: null})).toEqual({statsPeriod: '14d'});
+    expect(getParams({utc: undefined})).toEqual({statsPeriod: '14d'});
   });
 });
diff --git a/tests/js/spec/components/smartSearchBar.spec.jsx b/tests/js/spec/components/smartSearchBar.spec.jsx
index a6fcc030f3..4197648137 100644
--- a/tests/js/spec/components/smartSearchBar.spec.jsx
+++ b/tests/js/spec/components/smartSearchBar.spec.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+
 import {shallow, mountWithTheme} from 'sentry-test/enzyme';
 
 import {Client} from 'app/api';
diff --git a/tests/js/spec/utils/withTags.spec.jsx b/tests/js/spec/utils/withTags.spec.jsx
new file mode 100644
index 0000000000..77e01adf35
--- /dev/null
+++ b/tests/js/spec/utils/withTags.spec.jsx
@@ -0,0 +1,25 @@
+import React from 'react';
+import {mount} from 'sentry-test/enzyme';
+
+import TagStore from 'app/stores/tagStore';
+import withTags from 'app/utils/withTags';
+
+describe('withTags HoC', function() {
+  beforeEach(() => {
+    TagStore.reset();
+  });
+
+  it('works', async function() {
+    const MyComponent = () => null;
+    const Container = withTags(MyComponent);
+    const wrapper = mount(<Container other="value" />);
+
+    // Should forward props.
+    expect(wrapper.find('MyComponent').prop('other')).toEqual('value');
+
+    TagStore.onLoadTagsSuccess([{name: 'Mechanism', key: 'mechanism', count: 1}]);
+    const tagsProp = wrapper.find('MyComponent').prop('tags');
+    expect(tagsProp.mechanism).toBeTruthy();
+    expect(wrapper.find('MyComponent').prop('other')).toEqual('value');
+  });
+});
diff --git a/tests/js/spec/views/events/events.spec.jsx b/tests/js/spec/views/events/events.spec.jsx
index 70bc8ea49c..08afc9224f 100644
--- a/tests/js/spec/views/events/events.spec.jsx
+++ b/tests/js/spec/views/events/events.spec.jsx
@@ -76,8 +76,8 @@ describe('EventsErrors', function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/tags/',
       body: [
-        {count: 1, tag: 'transaction'},
-        {count: 2, tag: 'mechanism'},
+        {count: 1, key: 'transaction', name: 'Transaction'},
+        {count: 2, key: 'mechanism', name: 'Mechanism'},
       ],
     });
     eventsMock = MockApiClient.addMockResponse({
@@ -330,8 +330,8 @@ describe('EventsContainer', function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/tags/',
       body: [
-        {count: 1, tag: 'transaction'},
-        {count: 2, tag: 'mechanism'},
+        {count: 1, key: 'transaction', name: 'Transaction'},
+        {count: 2, key: 'mechanism', name: 'Mechanism'},
       ],
     });
     eventsMock = MockApiClient.addMockResponse({
diff --git a/tests/js/spec/views/events/index.spec.jsx b/tests/js/spec/views/events/index.spec.jsx
index c5820cdaf6..19582ffa71 100644
--- a/tests/js/spec/views/events/index.spec.jsx
+++ b/tests/js/spec/views/events/index.spec.jsx
@@ -35,8 +35,8 @@ describe('EventsContainer', function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/tags/',
       body: [
-        {count: 1, tag: 'transaction'},
-        {count: 2, tag: 'mechanism'},
+        {count: 1, key: 'transaction', name: 'Transaction'},
+        {count: 2, key: 'mechanism', name: 'Mechanism'},
       ],
     });
 
diff --git a/tests/js/spec/views/events/searchBar.spec.jsx b/tests/js/spec/views/events/searchBar.spec.jsx
index fc54526f16..bf398124f0 100644
--- a/tests/js/spec/views/events/searchBar.spec.jsx
+++ b/tests/js/spec/views/events/searchBar.spec.jsx
@@ -5,7 +5,7 @@ import SearchBar from 'app/views/events/searchBar';
 import TagStore from 'app/stores/tagStore';
 
 const focusInput = el => el.find('input[name="query"]').simulate('focus');
-const selectFirstAutocompleteItem = el => {
+const selectFirstAutocompleteItem = async el => {
   focusInput(el);
 
   el.find('SearchItem[data-test-id="search-autocomplete-item"]')
@@ -15,19 +15,24 @@ const selectFirstAutocompleteItem = el => {
   input
     .getDOMNode()
     .setSelectionRange(input.prop('value').length, input.prop('value').length);
-  return el;
+
+  await tick();
+  await el.update();
 };
-const setQuery = (el, query) => {
+
+const setQuery = async (el, query) => {
   el.find('input')
     .simulate('change', {target: {value: query}})
     .getDOMNode()
     .setSelectionRange(query.length, query.length);
+
+  await tick();
+  await el.update();
 };
 
 describe('SearchBar', function() {
   let options;
   let tagValuesMock;
-  let tagKeysMock;
   const organization = TestStubs.Organization();
   const props = {
     organization,
@@ -36,7 +41,11 @@ describe('SearchBar', function() {
 
   beforeEach(function() {
     TagStore.reset();
-    TagStore.onLoadTagsSuccess(TestStubs.Tags());
+    TagStore.onLoadTagsSuccess([
+      {count: 3, key: 'gpu', name: 'Gpu'},
+      {count: 3, key: 'mytag', name: 'Mytag'},
+      {count: 0, key: 'browser', name: 'Browser'},
+    ]);
 
     options = TestStubs.routerContext();
 
@@ -55,33 +64,12 @@ describe('SearchBar', function() {
       url: '/organizations/org-slug/tags/gpu/values/',
       body: [{count: 2, name: 'Nvidia 1080ti'}],
     });
-    tagKeysMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/tags/',
-      body: [
-        {count: 3, key: 'gpu'},
-        {count: 3, key: 'mytag'},
-        {count: 0, key: 'browser'},
-      ],
-    });
   });
 
   afterEach(function() {
     MockApiClient.clearMockResponses();
   });
 
-  it('fetches organization tags on mountWithTheme', async function() {
-    const wrapper = mountWithTheme(<SearchBar {...props} />, options);
-    await tick();
-    expect(tagKeysMock).toHaveBeenCalledTimes(1);
-    wrapper.update();
-    expect(wrapper.find('SmartSearchBar').prop('supportedTags')).toEqual(
-      expect.objectContaining({
-        gpu: {key: 'gpu', name: 'gpu'},
-        mytag: {key: 'mytag', name: 'mytag'},
-      })
-    );
-  });
-
   it('searches and selects an event field value', async function() {
     const wrapper = mountWithTheme(<SearchBar {...props} />, options);
     await tick();
@@ -93,7 +81,7 @@ describe('SearchBar', function() {
     );
 
     await tick();
-    wrapper.update();
+    await wrapper.update();
 
     expect(wrapper.find('SearchDropdown').prop('searchSubstring')).toEqual('');
     expect(
@@ -104,7 +92,7 @@ describe('SearchBar', function() {
     ).toEqual('"Nvidia 1080ti"');
 
     selectFirstAutocompleteItem(wrapper);
-    wrapper.update();
+    await wrapper.update();
     expect(wrapper.find('input').prop('value')).toBe('gpu:"Nvidia 1080ti" ');
   });
 
@@ -116,16 +104,17 @@ describe('SearchBar', function() {
       options
     );
     await tick();
+    await wrapper.update();
+
     setQuery(wrapper, 'gpu:');
+    await tick();
+    await wrapper.update();
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
       expect.objectContaining({query: {project: [1, 2], statsPeriod: '14d'}})
     );
 
-    await tick();
-    wrapper.update();
-
     expect(wrapper.find('SearchDropdown').prop('searchSubstring')).toEqual('');
     expect(
       wrapper
@@ -142,40 +131,48 @@ describe('SearchBar', function() {
   it('does not requery for event field values if query does not change', async function() {
     const wrapper = mountWithTheme(<SearchBar {...props} />, options);
     await tick();
-    setQuery(wrapper, 'gpu:');
+    await wrapper.update();
 
-    expect(tagValuesMock).toHaveBeenCalledTimes(1);
+    setQuery(wrapper, 'gpu:');
+    await tick();
+    await wrapper.update();
 
     // Click will fire "updateAutocompleteItems"
     wrapper.find('input').simulate('click');
-
     await tick();
     wrapper.update();
+
     expect(tagValuesMock).toHaveBeenCalledTimes(1);
   });
 
   it('removes highlight when query is empty', async function() {
     const wrapper = mountWithTheme(<SearchBar {...props} />, options);
     await tick();
+    await wrapper.update();
+
     setQuery(wrapper, 'gpu');
 
     await tick();
-    wrapper.update();
+    await wrapper.update();
 
     expect(wrapper.find('Description strong').text()).toBe('gpu');
 
     // Should have nothing highlighted
     setQuery(wrapper, '');
+    await tick();
+    await wrapper.update();
+
     expect(wrapper.find('Description strong')).toHaveLength(0);
   });
 
   it('ignores negation ("!") at the beginning of search term', async function() {
     const wrapper = mountWithTheme(<SearchBar {...props} />, options);
     await tick();
+    await wrapper.update();
 
     setQuery(wrapper, '!gp');
     await tick();
-    wrapper.update();
+    await wrapper.update();
 
     expect(
       wrapper.find('SearchItem[data-test-id="search-autocomplete-item"]')
@@ -188,10 +185,11 @@ describe('SearchBar', function() {
   it('ignores wildcard ("*") at the beginning of tag value query', async function() {
     const wrapper = mountWithTheme(<SearchBar {...props} />, options);
     await tick();
+    await wrapper.update();
 
     setQuery(wrapper, '!gpu:*');
     await tick();
-    wrapper.update();
+    await wrapper.update();
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
@@ -209,22 +207,17 @@ describe('SearchBar', function() {
 
     const wrapper = mountWithTheme(<SearchBar {...props} />, options);
     await tick();
+    await wrapper.update();
 
+    // Do 3 searches, the first will find nothing, so no more requests should be made
     setQuery(wrapper, 'browser:Nothing');
     await tick();
-    wrapper.update();
-
-    expect(emptyTagValuesMock).toHaveBeenCalledTimes(1);
 
     setQuery(wrapper, 'browser:NothingE');
     await tick();
-    wrapper.update();
-
-    expect(emptyTagValuesMock).toHaveBeenCalledTimes(1);
 
     setQuery(wrapper, 'browser:NothingEls');
     await tick();
-    wrapper.update();
 
     expect(emptyTagValuesMock).toHaveBeenCalledTimes(1);
   });
@@ -237,16 +230,10 @@ describe('SearchBar', function() {
 
     const wrapper = mountWithTheme(<SearchBar {...props} />, options);
     await tick();
+    await wrapper.update();
 
     setQuery(wrapper, 'browser:Nothing');
-    await tick();
-    wrapper.update();
-
-    expect(emptyTagValuesMock).toHaveBeenCalledTimes(1);
-
     setQuery(wrapper, 'browser:Something');
-    await tick();
-    wrapper.update();
 
     expect(emptyTagValuesMock).toHaveBeenCalledTimes(2);
   });
