commit 37d922506ffccdd132c9ffae7d9f028dda1f8a44
Author: Matej Minar <matej.minar@sentry.io>
Date:   Wed Jan 15 15:28:47 2020 +0100

    feat(contextPickerModal): Prefocus current project if can be determined (#16439)

diff --git a/src/sentry/static/sentry/app/actionCreators/navigation.jsx b/src/sentry/static/sentry/app/actionCreators/navigation.jsx
index cdf4e440d1..f3a00422fb 100644
--- a/src/sentry/static/sentry/app/actionCreators/navigation.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/navigation.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import get from 'lodash/get';
 
 import {openModal} from 'app/actionCreators/modal';
 import ContextPickerModal from 'app/components/contextPickerModal';
@@ -8,6 +9,7 @@ export function navigateTo(to, router) {
   // Check for placeholder params
   const needOrg = to.indexOf(':orgId') > -1;
   const needProject = to.indexOf(':projectId') > -1;
+  const comingFromProjectId = get(router, 'location.query.project');
 
   if (needOrg || needProject) {
     openModal(
@@ -18,6 +20,7 @@ export function navigateTo(to, router) {
           nextPath={to}
           needOrg={needOrg}
           needProject={needProject}
+          comingFromProjectId={comingFromProjectId}
           onFinish={path => {
             closeModal();
             router.push(path);
diff --git a/src/sentry/static/sentry/app/components/contextPickerModal.tsx b/src/sentry/static/sentry/app/components/contextPickerModal.tsx
index 1efa1ba351..2240e50c1b 100644
--- a/src/sentry/static/sentry/app/components/contextPickerModal.tsx
+++ b/src/sentry/static/sentry/app/components/contextPickerModal.tsx
@@ -64,6 +64,12 @@ type Props = {
    * Callback for when organization is selected
    */
   onSelectOrganization: (orgSlug: string) => void;
+
+  /**
+   * Id of the project (most likely from the URL)
+   * on which the modal was opened
+   */
+  comingFromProjectId: string;
 };
 
 class ContextPickerModal extends React.Component<Props> {
@@ -162,6 +168,21 @@ class ContextPickerModal extends React.Component<Props> {
     this.doFocus(this.orgSelect);
   };
 
+  focusProjectOption = (projectId: string, projects: Project[]) => {
+    if (!this.projectSelect || this.props.loading) {
+      return;
+    }
+
+    const projectToBeFocused = projects.find(({id}) => id === projectId);
+
+    if (projectToBeFocused) {
+      (this.projectSelect as SelectControl).focusOption({
+        label: projectToBeFocused.slug,
+        value: projectToBeFocused.slug,
+      });
+    }
+  };
+
   handleSelectOrganization = ({value}: {value: string}) => {
     // If we do not need to select a project, we can early return after selecting an org
     // No need to fetch org details
@@ -192,6 +213,7 @@ class ContextPickerModal extends React.Component<Props> {
       loading,
       Header,
       Body,
+      comingFromProjectId,
     } = this.props;
 
     const shouldShowPicker = needOrg || needProject;
@@ -235,6 +257,7 @@ class ContextPickerModal extends React.Component<Props> {
               ref={ref => {
                 this.projectSelect = ref;
                 this.focusProjectSelector();
+                this.focusProjectOption(comingFromProjectId, projects);
               }}
               placeholder={t('Select a Project')}
               name="project"
