commit f4f574cc30f903a2d31de1a4546ca2c7a44f83f6
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Nov 25 14:34:15 2015 -0800

    Log changes to resident set size after task execution.
    
    This logs as a timing, since this is the closest type we have that maps
    to a more abstract histogram.

diff --git a/src/sentry/tasks/base.py b/src/sentry/tasks/base.py
index 924772b16f..66b3dcf27e 100644
--- a/src/sentry/tasks/base.py
+++ b/src/sentry/tasks/base.py
@@ -7,14 +7,30 @@ sentry.tasks.base
 """
 from __future__ import absolute_import
 
+import resource
+from contextlib import contextmanager
+from functools import wraps
+
 from celery.task import current
 from raven.contrib.django.models import client as Raven
-from functools import wraps
 
 from sentry.celery import app
 from sentry.utils import metrics
 
 
+def get_rss_usage():
+    return resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
+
+
+@contextmanager
+def track_memory_usage(metric, **kwargs):
+    before = get_rss_usage()
+    try:
+        yield
+    finally:
+        metrics.timing(metric, get_rss_usage() - before, **kwargs)
+
+
 def instrumented_task(name, stat_suffix=None, **kwargs):
     def wrapped(func):
         @wraps(func)
@@ -25,7 +41,8 @@ def instrumented_task(name, stat_suffix=None, **kwargs):
             else:
                 instance = name
             Raven.tags_context({'task_name': name})
-            with metrics.timer(key, instance=instance):
+            with metrics.timer(key, instance=instance), \
+                    track_memory_usage('jobs.memory', instance=instance):
                 try:
                     result = func(*args, **kwargs)
                 finally:
