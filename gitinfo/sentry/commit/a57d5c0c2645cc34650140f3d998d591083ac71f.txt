commit a57d5c0c2645cc34650140f3d998d591083ac71f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jun 18 10:16:31 2019 -0700

    fix(ui): Fix issues stream defaulting to 90 days (#13719)
    
    This fixes the issues stream from defaulting to API default (90 days) when there is no selection date.

diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index c9e6583c90..59a34d962a 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -9,6 +9,7 @@ import createReactClass from 'create-react-class';
 import qs from 'query-string';
 
 import {Client} from 'app/api';
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {Panel, PanelBody} from 'app/components/panels';
 import {analytics} from 'app/utils/analytics';
 import {defined} from 'app/utils';
@@ -41,6 +42,7 @@ import parseLinkHeader from 'app/utils/parseLinkHeader';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 import withSavedSearches from 'app/utils/withSavedSearches';
+
 import StreamActions from './actions';
 import StreamFilters from './filters';
 import StreamSidebar from './sidebar';
@@ -48,7 +50,9 @@ import StreamSidebar from './sidebar';
 const MAX_ITEMS = 25;
 const DEFAULT_QUERY = 'is:unresolved';
 const DEFAULT_SORT = 'date';
-const DEFAULT_STATS_PERIOD = '24h';
+// the default period for the graph in each issue row
+const DEFAULT_GRAPH_STATS_PERIOD = '24h';
+// the allowed period choices for graph in each issue row
 const STATS_PERIODS = new Set(['14d', '24h']);
 
 const OrganizationStream = createReactClass({
@@ -198,7 +202,7 @@ const OrganizationStream = createReactClass({
 
   getGroupStatsPeriod() {
     const currentPeriod = this.props.location.query.groupStatsPeriod;
-    return STATS_PERIODS.has(currentPeriod) ? currentPeriod : DEFAULT_STATS_PERIOD;
+    return STATS_PERIODS.has(currentPeriod) ? currentPeriod : DEFAULT_GRAPH_STATS_PERIOD;
   },
 
   getEndpointParams() {
@@ -228,7 +232,7 @@ const OrganizationStream = createReactClass({
     }
 
     const groupStatsPeriod = this.getGroupStatsPeriod();
-    if (groupStatsPeriod !== DEFAULT_STATS_PERIOD) {
+    if (groupStatsPeriod !== DEFAULT_GRAPH_STATS_PERIOD) {
       params.groupStatsPeriod = groupStatsPeriod;
     }
 
@@ -286,6 +290,11 @@ const OrganizationStream = createReactClass({
       requestParams.cursor = currentQuery.cursor;
     }
 
+    // If no stats period values are set, use default
+    if (!requestParams.statsPeriod && !requestParams.start) {
+      requestParams.statsPeriod = DEFAULT_STATS_PERIOD;
+    }
+
     if (this.lastRequest) {
       this.lastRequest.cancel();
     }
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index ef2c62061c..6ae86a0c3d 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -1189,16 +1189,24 @@ describe('OrganizationStream', function() {
 
   describe('componentDidUpdate fetching groups', function() {
     let fetchDataMock;
+
     beforeEach(function() {
-      fetchDataMock = jest.fn();
+      fetchDataMock = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/issues/',
+        body: [group],
+        headers: {
+          Link: DEFAULT_LINKS_HEADER,
+        },
+      });
+      fetchDataMock.mockReset();
       wrapper = shallow(<OrganizationStream {...props} />, {
         disableLifecycleMethods: false,
       });
-      wrapper.instance().fetchData = fetchDataMock;
     });
 
     it('fetches data on selection change', function() {
       const selection = {projects: [99], environments: [], datetime: {period: '24h'}};
+
       wrapper.setProps({selection, foo: 'bar'});
 
       expect(fetchDataMock).toHaveBeenCalled();
@@ -1215,17 +1223,31 @@ describe('OrganizationStream', function() {
     it('fetches data on location change', function() {
       const queryAttrs = ['query', 'sort', 'statsPeriod', 'cursor', 'groupStatsPeriod'];
       let location = clonedeep(props.location);
-      queryAttrs.forEach((attr, i) => {
+      queryAttrs.forEach(async (attr, i) => {
         // reclone each iteration so that only one property changes.
         location = clonedeep(location);
         location.query[attr] = 'newValue';
         wrapper.setProps({location});
+        await tick();
         wrapper.update();
 
-        // Each propery change should cause a new fetch incrementing the call count.
+        // Each property change should cause a new fetch incrementing the call count.
         expect(fetchDataMock).toHaveBeenCalledTimes(i + 1);
       });
     });
+
+    it('uses correct statsPeriod when fetching issues list and no datetime given', async function() {
+      const selection = {projects: [99], environments: [], datetime: {}};
+      wrapper.setProps({selection, foo: 'bar'});
+
+      expect(fetchDataMock).toHaveBeenLastCalledWith(
+        '/organizations/org-slug/issues/',
+        expect.objectContaining({
+          data:
+            'limit=25&project=99&query=is%3Aunresolved&shortIdLookup=1&statsPeriod=14d',
+        })
+      );
+    });
   });
 
   describe('componentDidUpdate fetching members', function() {
