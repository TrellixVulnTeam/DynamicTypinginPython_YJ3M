commit 5f996e8473e50b6b0d722e7cf50b173be46ea290
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 6 12:20:59 2015 -0700

    Ensure existing EventUsers get bound as tags

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 4b243fe8e6..fecfb1a60e 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -520,7 +520,7 @@ class EventManager(object):
             with transaction.atomic():
                 euser.save()
         except IntegrityError:
-            return
+            return EventUser.objects.get(project=project, hash=euser.hash)
 
         return euser
 
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 9f16dca467..4594351f46 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -10,7 +10,7 @@ from django.conf import settings
 
 from sentry.constants import MAX_CULPRIT_LENGTH, DEFAULT_LOGGER_NAME
 from sentry.event_manager import (
-    EventManager, get_hashes_for_event, get_hashes_from_fingerprint
+    EventManager, EventUser, get_hashes_for_event, get_hashes_from_fingerprint
 )
 from sentry.models import Event, Group, GroupStatus, EventMapping
 from sentry.testutils import TestCase, TransactionTestCase
@@ -310,6 +310,34 @@ class EventManagerTest(TransactionTestCase):
         data = manager.normalize()
         assert data['tags'] == []
 
+    def test_event_user(self):
+        manager = EventManager(self.make_event(**{
+            'sentry.interfaces.User': {
+                'id': '1',
+            }
+        }))
+        event = manager.save(1)
+
+        assert EventUser.objects.filter(
+            project=event.project,
+            id='1',
+        ).exists()
+        assert 'sentry:user' in dict(event.tags)
+
+        # ensure event user is mapped to tags in second attempt
+        manager = EventManager(self.make_event(**{
+            'sentry.interfaces.User': {
+                'id': '1',
+            }
+        }))
+        event = manager.save(1)
+
+        assert EventUser.objects.filter(
+            project=event.project,
+            id='1',
+        ).exists()
+        assert 'sentry:user' in dict(event.tags)
+
 
 class GetHashesFromEventTest(TestCase):
     @patch('sentry.interfaces.stacktrace.Stacktrace.compute_hashes')
