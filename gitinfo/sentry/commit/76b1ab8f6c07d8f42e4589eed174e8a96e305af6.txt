commit 76b1ab8f6c07d8f42e4589eed174e8a96e305af6
Author: Ted Kaemming <ted@kaemming.com>
Date:   Thu Oct 1 15:58:26 2015 -0700

    Group issues by rule, instead of records by issue.

diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
index 3fdc45b268..e00b462f96 100644
--- a/src/sentry/digests/notifications.py
+++ b/src/sentry/digests/notifications.py
@@ -3,15 +3,9 @@ from __future__ import absolute_import
 import functools
 import itertools
 import logging
-from collections import (
-    OrderedDict,
-    namedtuple,
-)
+from collections import namedtuple
 
-from sentry.models import (
-    Group,
-    Project,
-)
+from sentry.models import Project
 from sentry.utils.dates import to_timestamp
 
 from . import Record
@@ -39,36 +33,17 @@ def strip_for_serialization(instance):
 
 
 # XXX: Rules
-def event_to_record(event, rules=[]):
+def event_to_record(event, rules=[], clean=strip_for_serialization):
     return Record(
         event.event_id,
         NotificationEvent(
-            strip_for_serialization(event),
-            map(strip_for_serialization, rules),
+            clean(event),
+            map(clean, rules),
         ),
         to_timestamp(event.datetime),
     )
 
 
-def group(records):
-    key = lambda record: record.value.event.group_id
-    raw = {}
-    for group, records in itertools.groupby(sorted(records, key=key), key=key):
-        yield group, list(records)
-
-
-def associate_with_instance(project, groups):
-    groups = dict(groups)
-
-    instances = Group.objects.filter(project=project).in_bulk(groups.keys())
-    for key, records in groups.iteritems():
-        try:
-            yield instances[key], records
-        except KeyError:
-            logger.warning('Skipping %s records for %s, no corresponding group instance exists.', len(records), id)
-            continue
-
-
 filter_muted_groups = functools.partial(
     itertools.ifilter,
     lambda (group, records): not group.is_muted(),
@@ -76,10 +51,8 @@ filter_muted_groups = functools.partial(
 
 
 def build_digest(project, records):
-    return OrderedDict(
-        sorted(
-            filter_muted_groups(associate_with_instance(project, group(records))),
-            key=lambda (group, records): (len(records), max(record.timestamp for record in records)),
-            reverse=True,
-        ),
-    )
+    rules = {}
+    for record in records:
+        for rule in record.value.rules:
+            rules.setdefault(rule, {}).setdefault(record.value.event.group, []).append(record)
+    return rules
diff --git a/src/sentry/templates/sentry/emails/digests/body.html b/src/sentry/templates/sentry/emails/digests/body.html
index 70e3434ec0..52aa7c716a 100644
--- a/src/sentry/templates/sentry/emails/digests/body.html
+++ b/src/sentry/templates/sentry/emails/digests/body.html
@@ -6,18 +6,19 @@
 
 <h2>{{ project.name }}</h2>
 
-{% for group, records in digest.items %}
-    {% url 'sentry-group' group.organization.slug group.project.slug group.id as group_link %}
-    <h3><a href="{% absolute_uri group_link %}">{{ group.title }}</a></h3>
-    {{ records|length }} event{{ records|pluralize }}
+{% for rule, groups in digest.items %}
+
+    <h3>{{ rule.label }}</h3>
+
     <ul>
-        {% for record in records %}
-            <li>
-                <strong>{{ record.value.event.message }}</strong>
-                <small>at {{ record.datetime }}</small>
-            </li>
-        {% endfor %}
+    {% for group, records in groups.items %}
+        <li>
+            {% url 'sentry-group' group.organization.slug group.project.slug group.id as group_link %}
+            <a href="{% absolute_uri group_link %}">{{ group.title }}</a>
+        </li>
+    {% endfor %}
     </ul>
+
 {% endfor %}
 
 {% endblock %}
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 65778ff6c9..bf9a245099 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -4,7 +4,6 @@ import itertools
 import logging
 import time
 import traceback
-from collections import OrderedDict
 from datetime import (
     datetime,
     timedelta,
@@ -16,7 +15,10 @@ import pytz
 from django.core.urlresolvers import reverse
 from django.utils.safestring import mark_safe
 
-from sentry.digests.notifications import event_to_record
+from sentry.digests.notifications import (
+    build_digest,
+    event_to_record,
+)
 from sentry.models import (
     Activity, Event, Group, Organization, Project, Rule, Team,
 )
@@ -175,34 +177,40 @@ def digest(request):
     org = Organization(
         id=1,
         slug='example',
-        name='Example',
+        name='Example Organization',
     )
     team = Team(
         id=1,
         slug='example',
-        name='Example',
+        name='Example Team',
         organization=org,
     )
     project = Project(
         id=1,
         slug='example',
-        name='Example',
+        name='Example Project',
         team=team,
         organization=org,
     )
 
     now = datetime.utcnow().replace(tzinfo=pytz.utc)
 
+    rules = [
+        Rule(id=1, label="First Rule"),
+        Rule(id=2, label="Second Rule"),
+        Rule(id=3, label="Third Rule"),
+    ]
+
+    records = []
+
     event_sequence = itertools.count(1)
-    digest = OrderedDict()
     for i in xrange(random.randint(1, 4)):
         group = Group(
-            id=i,
+            id=i + 1,
             project=project,
-            message='This is an example event.',
+            message='This is example event #%s' % (i + 1),
         )
 
-        records = []
         offset = timedelta(seconds=0)
         for i in xrange(random.randint(1, 10)):
             offset += timedelta(seconds=random.random() * 120)
@@ -216,11 +224,12 @@ def digest(request):
                         data=load_data('python'),
                         datetime=now - offset,
                     ),
-                    [Rule(label="An example rule")],
+                    random.sample(rules, random.randint(1, len(rules))),
+                    clean=lambda i: i,
                 )
             )
 
-        digest[group] = records
+    digest = build_digest(project, records)
 
     return MailPreview(
         html_template='sentry/emails/digests/body.html',
