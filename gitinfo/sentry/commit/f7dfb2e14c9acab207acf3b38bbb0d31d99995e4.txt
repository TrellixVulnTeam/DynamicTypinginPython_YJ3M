commit f7dfb2e14c9acab207acf3b38bbb0d31d99995e4
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat May 14 17:20:02 2016 +0200

    Improved enrollment flow to support users though getting recovery codes faster.

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 509206586a..a796d800a0 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -38,7 +38,7 @@ class AuthenticatorManager(BaseManager):
         has_authenticators = False
         for authenticator in Authenticator.objects.filter(user=user):
             if authenticator.interface.backup_interface:
-                return True
+                return False
             has_authenticators = True
         return has_authenticators
 
@@ -54,7 +54,12 @@ class AuthenticatorManager(BaseManager):
         except Authenticator.DoesNotExist:
             return interface()
 
-    def user_has_2fa(self, user):
+    def user_has_2fa(self, user, ignore_backup=False):
+        if ignore_backup:
+            for authenticator in Authenticator.objects.filter(user=user):
+                if not authenticator.interface.backup_interface:
+                    return True
+            return False
         return Authenticator.objects.filter(user=user).first() is not None
 
     def validate_otp(self, user, otp):
diff --git a/src/sentry/templates/sentry/bases/twofactor_settings.html b/src/sentry/templates/sentry/bases/twofactor_settings.html
index 34e71182f2..57e631005c 100644
--- a/src/sentry/templates/sentry/bases/twofactor_settings.html
+++ b/src/sentry/templates/sentry/bases/twofactor_settings.html
@@ -11,7 +11,7 @@
     <div class="alert alert-warning">
       <strong>Warning:</strong>
       You do not have a backup authenticator enabled.
-      <a href="{% url 'sentry-account-settings-2fa-recovery' %}">Click here to add recovery codes</a>.
+      <a href="{% url 'sentry-account-settings-2fa-recovery' %}?enroll=yes">Click here to add recovery codes</a>.
     </div>
   {% endif %}
 
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index bb24de102e..78748a56ef 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -71,13 +71,21 @@ class TwoFactorSettingsView(BaseView):
         return render_to_response('sentry/account/twofactor/remove.html',
                                   context, request)
 
-    def enroll(self, request, interface):
-        interface.enroll(request.user)
+    def enroll(self, request, interface, insecure=False):
+        # Only enroll if it's either not an insecure enrollment or we are
+        # enrolling a backup interface when we already had a primary one.
+        if not insecure \
+           or (interface.backup_interface and
+               Authenticator.objects.user_has_2fa(request.user,
+                                                  ignore_backup=True)):
+            interface.enroll(request.user)
         return HttpResponseRedirect(request.path)
 
     def configure(self, request, interface):
-        if 'enroll' in request.POST and not interface.is_enrolled:
-            return self.enroll(request, interface)
+        if 'enroll' in request.POST or \
+           request.GET.get('enroll') == 'yes':
+            return self.enroll(request, interface,
+                               insecure='enroll' not in request.POST)
         context = self.make_context(request, interface)
         return render_to_response(self.configure_template,
                                   context, request)
@@ -91,17 +99,20 @@ class RecoveryCodeSettingsView(TwoFactorSettingsView):
 class TotpSettingsView(TwoFactorSettingsView):
     interface_id = 'totp'
 
-    def enroll(self, request, interface):
+    def enroll(self, request, interface, insecure=False):
         totp_secret = request.POST.get('totp_secret')
         if totp_secret is not None:
             interface.config['secret'] = totp_secret
 
-        form = TwoFactorForm(request.POST)
-        if 'otp' in request.POST and form.is_valid():
-            if interface.validate_otp(form.cleaned_data['otp']):
+        if 'otp' in request.POST:
+            form = TwoFactorForm(request.POST)
+            if form.is_valid() and interface.validate_otp(
+                    form.cleaned_data['otp']):
                 return TwoFactorSettingsView.enroll(self, request, interface)
             else:
                 form.errors['__all__'] = ['Invalid confirmation code.']
+        else:
+            form = TwoFactorForm()
 
         context = self.make_context(request, interface)
         context['otp_form'] = form
