commit 3648b96333de58e3fd182c3d649b71e4980a6b15
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Feb 12 11:46:13 2018 -0800

    feat(api): Add change password endpoint (#7133)

diff --git a/src/sentry/api/endpoints/user_password.py b/src/sentry/api/endpoints/user_password.py
new file mode 100644
index 0000000000..7f4c7560f8
--- /dev/null
+++ b/src/sentry/api/endpoints/user_password.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+from django.utils.crypto import constant_time_compare
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.bases.user import UserEndpoint
+from sentry.auth import password_validation
+from sentry.models import User
+from sentry.security import capture_security_activity
+
+
+class UserPasswordSerializer(serializers.ModelSerializer):
+    password = serializers.CharField(required=True)
+    passwordNew = serializers.CharField(required=True)
+    passwordVerify = serializers.CharField(required=True)
+
+    class Meta:
+        model = User
+        fields = ('password', 'passwordNew', 'passwordVerify', )
+
+    def validate_password(self, attrs, source):
+        if not self.object.check_password(attrs.get('password')):
+            raise serializers.ValidationError('The password you entered is not correct.')
+        return attrs
+
+    def validate_passwordNew(self, attrs, source):
+        # this will raise a ValidationError if password is invalid
+        password_validation.validate_password(attrs[source])
+
+        if self.context['is_managed'] or not self.context['has_usable_password']:
+            raise serializers.ValidationError('Not allowed to change password')
+
+        return attrs
+
+    def validate(self, attrs):
+        attrs = super(UserPasswordSerializer, self).validate(attrs)
+
+        # make sure `passwordNew` matches `passwordVerify`
+        if not constant_time_compare(attrs.get('passwordNew'), attrs.get('passwordVerify')):
+            raise serializers.ValidationError(
+                'Your new password and verify new password must match.')
+
+        return attrs
+
+
+class UserPasswordEndpoint(UserEndpoint):
+    def put(self, request, user):
+        # pass some context to serializer otherwise when we create a new serializer instance,
+        # user.password gets set to new plaintext password from request and
+        # `user.has_usable_password` becomes False
+        serializer = UserPasswordSerializer(user, data=request.DATA, context={
+            'is_managed': user.is_managed,
+            'has_usable_password': user.has_usable_password(),
+        })
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+        result = serializer.object
+
+        user.set_password(result.passwordNew)
+        user.refresh_session_nonce(request._request)
+        user.clear_lost_passwords()
+
+        user = serializer.save()
+
+        capture_security_activity(
+            account=user,
+            type='password-changed',
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            send_email=True,
+        )
+        return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 5f3dcc5238..ca54d5f91d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -144,6 +144,7 @@ from .endpoints.user_details import UserDetailsEndpoint
 from .endpoints.user_emails import UserEmailsEndpoint
 from .endpoints.user_organizations import UserOrganizationsEndpoint
 from .endpoints.user_notification_details import UserNotificationDetailsEndpoint
+from .endpoints.user_password import UserPasswordEndpoint
 from .endpoints.user_social_identities_index import UserSocialIdentitiesIndexEndpoint
 from .endpoints.user_social_identity_details import UserSocialIdentityDetailsEndpoint
 from .endpoints.user_subscriptions import UserSubscriptionsEndpoint
@@ -240,6 +241,11 @@ urlpatterns = patterns(
         UserNotificationDetailsEndpoint.as_view(),
         name='sentry-api-0-user-notifications'
     ),
+    url(
+        r'^users/(?P<user_id>[^\/]+)/password/$',
+        UserPasswordEndpoint.as_view(),
+        name='sentry-api-0-user-password'
+    ),
     url(
         r'^users/(?P<user_id>[^\/]+)/social-identities/$',
         UserSocialIdentitiesIndexEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_user_password.py b/tests/sentry/api/endpoints/test_user_password.py
new file mode 100644
index 0000000000..281530e565
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_password.py
@@ -0,0 +1,147 @@
+from __future__ import absolute_import
+
+import mock
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import User
+from sentry.testutils import APITestCase
+from sentry.auth.password_validation import MinimumLengthValidator
+
+
+class UserPasswordTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(
+            email='a@example.com',
+            is_managed=False,
+            name='example name',
+        )
+        self.user.set_password('helloworld!')
+        self.user.save()
+
+        self.login_as(user=self.user)
+        self.url = reverse(
+            'sentry-api-0-user-password', kwargs={
+                'user_id': 'me',
+            }
+        )
+
+    def test_change_password(self):
+        old_password = self.user.password
+        response = self.client.put(self.url, data={
+            'password': 'helloworld!',
+            'passwordNew': 'testpassword',
+            'passwordVerify': 'testpassword',
+        })
+        user = User.objects.get(id=self.user.id)
+        assert response.status_code == 204
+        assert old_password != user.password
+
+    # Not sure why but sentry.auth.password_validation._default_password_validators is [] instead of None and not
+    # using `settings.AUTH_PASSWORD_VALIDATORS`
+    @mock.patch('sentry.auth.password_validation.get_default_password_validators', mock.Mock(return_value=[
+        MinimumLengthValidator(min_length=6)
+    ]))
+    def test_password_too_short(self):
+        response = self.client.put(self.url, data={
+            'password': 'helloworld!',
+            'passwordNew': 'hi',
+            'passwordVerify': 'hi',
+        })
+        assert response.status_code == 400
+
+    def test_no_password(self):
+        response = self.client.put(self.url, data={
+            'password': 'helloworld!',
+        })
+        assert response.status_code == 400
+
+        response = self.client.put(self.url, data={
+        })
+        assert response.status_code == 400
+
+    def test_require_current_password(self):
+        response = self.client.put(self.url, data={
+            'password': 'wrongpassword',
+            'passwordNew': 'testpassword',
+            'passwordVerify': 'passworddoesntmatch',
+        })
+        assert response.status_code == 400
+
+    def test_verifies_mismatch_password(self):
+        # Password mismatch
+        response = self.client.put(self.url, data={
+            'password': 'helloworld!',
+            'passwordNew': 'testpassword',
+            'passwordVerify': 'passworddoesntmatch',
+        })
+        assert response.status_code == 400
+
+    def test_managed_unable_change_password(self):
+        user = self.create_user(email='new@example.com', is_managed=True)
+        self.login_as(user)
+        url = reverse(
+            'sentry-api-0-user-password', kwargs={
+                'user_id': user.id,
+            }
+        )
+
+        response = self.client.put(url, data={
+            'passwordNew': 'newpassword',
+            'passwordVerify': 'newpassword',
+        })
+        assert response.status_code == 400
+
+    def test_unusable_password_unable_change_password(self):
+        user = self.create_user(email='new@example.com')
+        user.set_unusable_password()
+        user.save()
+        self.login_as(user)
+
+        url = reverse(
+            'sentry-api-0-user-password', kwargs={
+                'user_id': user.id,
+            }
+        )
+
+        response = self.client.put(url, data={
+            'passwordNew': 'newpassword',
+            'passwordVerify': 'newpassword',
+        })
+        assert response.status_code == 400
+
+    def test_cannot_change_other_user_password(self):
+        user = self.create_user(email='new@example.com', is_superuser=False)
+        self.login_as(user)
+
+        url = reverse(
+            'sentry-api-0-user-password', kwargs={
+                'user_id': self.user.id,
+            }
+        )
+
+        response = self.client.put(url, data={
+            'password': 'helloworld!',
+            'passwordNew': 'newpassword',
+            'passwordVerify': 'newpassword',
+        })
+
+        assert response.status_code == 403
+
+    def test_superuser_can_change_other_user_password(self):
+        user = self.create_user(email='new@example.com', is_superuser=True)
+        self.login_as(user, superuser=True)
+
+        url = reverse(
+            'sentry-api-0-user-password', kwargs={
+                'user_id': self.user.id,
+            }
+        )
+
+        response = self.client.put(url, data={
+            'password': 'helloworld!',
+            'passwordNew': 'newpassword',
+            'passwordVerify': 'newpassword',
+        })
+
+        assert response.status_code == 204
