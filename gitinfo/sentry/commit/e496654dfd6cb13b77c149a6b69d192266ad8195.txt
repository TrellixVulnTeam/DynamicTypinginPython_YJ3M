commit e496654dfd6cb13b77c149a6b69d192266ad8195
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu May 30 14:19:47 2019 -0700

    feat(event-search): event-tags/heatmap api (#13350)
    
    * saving place
    
    * got events-tag working for a single key.
    
    * removed changes to unrelated tags tests.
    
    * start and end dates
    
    * revised to work for multiple keys.
    
    * Added changes that mark suggested and found a bug.
    
    * Added **kwargs to base tagstore method.
    
    * fixed typo."

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 086fc558e2..a7c7aa6d9a 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -5,7 +5,9 @@ from functools import partial
 
 from rest_framework.response import Response
 
+from sentry import tagstore
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.helpers.events import get_direct_hit_response
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
@@ -167,6 +169,41 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
         )
 
 
+class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
+    def get(self, request, organization):
+        try:
+            snuba_args = self.get_snuba_query_args(request, organization)
+        except OrganizationEventsError as exc:
+            return Response({'detail': exc.message}, status=400)
+        except NoProjects:
+            return Response({'detail': 'A valid project must be included.'}, status=400)
+
+        lookup_keys = [tagstore.prefix_reserved_key(key) for key in request.GET.getlist('keys')]
+
+        if not lookup_keys:
+            return Response({'detail': 'Tag keys must be specified.'}, status=400)
+        project_ids = snuba_args['filter_keys']['project_id']
+        environment_ids = snuba_args['filter_keys'].get('environment_id')
+
+        has_global_views = features.has(
+            'organizations:global-views',
+            organization,
+            actor=request.user)
+
+        if not has_global_views and len(project_ids) > 1:
+            return Response({
+                'detail': 'You cannot view events from multiple projects.'
+            }, status=400)
+
+        try:
+            tag_key = tagstore.get_group_tag_keys_and_top_values(
+                project_ids, None, environment_ids, keys=lookup_keys, get_excluded_tags=True, **snuba_args)
+        except tagstore.TagKeyNotFound:
+            raise ResourceDoesNotExist
+
+        return Response(serialize(tag_key, request.user))
+
+
 class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
 
     def get(self, request, organization):
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d7858fb24e..7cad6856e2 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -71,7 +71,7 @@ from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_discover_query import OrganizationDiscoverQueryEndpoint
 from .endpoints.organization_discover_saved_queries import OrganizationDiscoverSavedQueriesEndpoint
 from .endpoints.organization_discover_saved_query_detail import OrganizationDiscoverSavedQueryDetailEndpoint
-from .endpoints.organization_events import OrganizationEventsEndpoint, OrganizationEventsMetaEndpoint, OrganizationEventsStatsEndpoint
+from .endpoints.organization_events import OrganizationEventsEndpoint, OrganizationEventsMetaEndpoint, OrganizationEventsStatsEndpoint, OrganizationEventsHeatmapEndpoint
 from .endpoints.organization_group_index import OrganizationGroupIndexEndpoint
 from .endpoints.organization_dashboard_details import OrganizationDashboardDetailsEndpoint
 from .endpoints.organization_dashboard_widget_details import OrganizationDashboardWidgetDetailsEndpoint
@@ -602,6 +602,11 @@ urlpatterns = patterns(
         OrganizationEventsStatsEndpoint.as_view(),
         name='sentry-api-0-organization-events-stats'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/events-heatmap/$',
+        OrganizationEventsHeatmapEndpoint.as_view(),
+        name='sentry-api-0-organization-events-heatmap'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/events-meta/$',
         OrganizationEventsMetaEndpoint.as_view(),
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 2130fe4d4b..f500ee3a89 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -412,7 +412,7 @@ class TagStorage(Service):
         raise NotImplementedError
 
     def get_group_tag_keys_and_top_values(
-            self, project_id, group_id, environment_ids, keys=None, value_limit=TOP_VALUES_DEFAULT_LIMIT):
+            self, project_id, group_id, environment_ids, keys=None, value_limit=TOP_VALUES_DEFAULT_LIMIT, **kwargs):
 
         # only the snuba backend supports multi env, and that overrides this method
         if environment_ids and len(environment_ids) > 1:
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index 500388dd66..72df0607e6 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -9,7 +9,7 @@ sentry.tagstore.snuba.backend
 from __future__ import absolute_import
 
 import functools
-from collections import defaultdict
+from collections import defaultdict, Iterable
 from datetime import timedelta
 from dateutil.parser import parse as parse_datetime
 from django.utils import timezone
@@ -47,6 +47,10 @@ def fix_tag_value_data(data):
     return data
 
 
+def get_project_list(project_id):
+    return project_id if isinstance(project_id, Iterable) else [project_id]
+
+
 class SnubaTagStorage(TagStorage):
 
     # These keys correspond to tags that are typically prefixed with `sentry:`
@@ -72,7 +76,7 @@ class SnubaTagStorage(TagStorage):
         start, end = self.get_time_range()
         tag = u'tags[{}]'.format(key)
         filters = {
-            'project_id': [project_id],
+            'project_id': get_project_list(project_id),
         }
         if environment_id:
             filters['environment'] = [environment_id]
@@ -100,18 +104,25 @@ class SnubaTagStorage(TagStorage):
                 return GroupTagKey(group_id=group_id, **data)
 
     def __get_tag_key_and_top_values(self, project_id, group_id, environment_id,
-                                     key, limit=3, raise_on_empty=True):
-        start, end = self.get_time_range()
+                                     key, limit=3, raise_on_empty=True, **kwargs):
+
+        default_start, default_end = self.get_time_range()
+        start = kwargs.get('start', default_start)
+        end = kwargs.get('end', default_end)
+
         tag = u'tags[{}]'.format(key)
         filters = {
-            'project_id': [project_id],
+            'project_id': get_project_list(project_id),
         }
         if environment_id:
             filters['environment'] = [environment_id]
         if group_id is not None:
             filters['issue'] = [group_id]
-        conditions = [[tag, '!=', '']]
-        aggregations = [
+        conditions = kwargs.get('conditions', [])
+        aggregations = kwargs.get('aggregations', [])
+
+        conditions.append([tag, '!=', ''])
+        aggregations += [
             ['uniq', tag, 'values_seen'],
             ['count()', '', 'count'],
             ['min', SEEN_COLUMN, 'first_seen'],
@@ -153,11 +164,14 @@ class SnubaTagStorage(TagStorage):
 
     def __get_tag_keys(
         self, project_id, group_id, environment_ids, limit=1000, keys=None,
-        include_values_seen=True,
+        include_values_seen=True, **kwargs
     ):
-        start, end = self.get_time_range()
+        default_start, default_end = self.get_time_range()
+        start = kwargs.get('start', default_start)
+        end = kwargs.get('end', default_end)
+
         return self.__get_tag_keys_for_projects(
-            [project_id],
+            get_project_list(project_id),
             group_id,
             environment_ids,
             start,
@@ -217,7 +231,7 @@ class SnubaTagStorage(TagStorage):
         start, end = self.get_time_range()
         tag = u'tags[{}]'.format(key)
         filters = {
-            'project_id': [project_id],
+            'project_id': get_project_list(project_id),
         }
         if environment_id:
             filters['environment'] = [environment_id]
@@ -244,9 +258,11 @@ class SnubaTagStorage(TagStorage):
             else:
                 return GroupTagValue(group_id=group_id, **fix_tag_value_data(data))
 
-    def get_tag_key(self, project_id, environment_id, key, status=TagKeyStatus.VISIBLE):
+    def get_tag_key(self, project_id, environment_id, key, status=TagKeyStatus.VISIBLE,
+                    **kwargs):
         assert status is TagKeyStatus.VISIBLE
-        return self.__get_tag_key_and_top_values(project_id, None, environment_id, key)
+        return self.__get_tag_key_and_top_values(
+            project_id, None, environment_id, key, **kwargs)
 
     def get_tag_keys(
         self, project_id, environment_id, status=TagKeyStatus.VISIBLE,
@@ -283,10 +299,11 @@ class SnubaTagStorage(TagStorage):
         return self.__get_tag_key_and_top_values(
             project_id, group_id, environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT)
 
-    def get_group_tag_keys(self, project_id, group_id, environment_ids, limit=None, keys=None):
+    def get_group_tag_keys(self, project_id, group_id, environment_ids,
+                           limit=None, keys=None, **kwargs):
         return self.__get_tag_keys(
             project_id, group_id, environment_ids, limit=limit, keys=keys,
-            include_values_seen=False,
+            include_values_seen=False, **kwargs
         )
 
     def get_group_tag_value(self, project_id, group_id, environment_id, key, value):
@@ -359,7 +376,7 @@ class SnubaTagStorage(TagStorage):
         start, end = self.get_time_range()
         tag = u'tags[{}]'.format(key)
         filters = {
-            'project_id': [project_id],
+            'project_id': get_project_list(project_id),
             'issue': [group_id],
         }
         if environment_id:
@@ -376,19 +393,23 @@ class SnubaTagStorage(TagStorage):
         return tag.top_values
 
     def get_group_tag_keys_and_top_values(
-            self, project_id, group_id, environment_ids, user=None, keys=None, value_limit=TOP_VALUES_DEFAULT_LIMIT):
+            self, project_id, group_id, environment_ids, user=None, keys=None, value_limit=TOP_VALUES_DEFAULT_LIMIT,
+            **kwargs):
         # Similar to __get_tag_key_and_top_values except we get the top values
         # for all the keys provided. value_limit in this case means the number
         # of top values for each key, so the total rows returned should be
         # num_keys * limit.
-        start, end = self.get_time_range()
+        default_start, default_end = self.get_time_range()
+        start = kwargs.get('start', default_start)
+        end = kwargs.get('end', default_end)
 
         # First get totals and unique counts by key.
-        keys_with_counts = self.get_group_tag_keys(project_id, group_id, environment_ids, keys=keys)
+        keys_with_counts = self.get_group_tag_keys(
+            project_id, group_id, environment_ids, keys=keys, start=start, end=end)
 
         # Then get the top values with first_seen/last_seen/count for each
         filters = {
-            'project_id': [project_id],
+            'project_id': get_project_list(project_id),
         }
         if environment_ids:
             filters['environment'] = environment_ids
@@ -396,13 +417,15 @@ class SnubaTagStorage(TagStorage):
             filters['tags_key'] = keys
         if group_id is not None:
             filters['issue'] = [group_id]
-
-        aggregations = [
+        conditions = kwargs.get('conditions', [])
+        aggregations = kwargs.get('aggregations', [])
+        aggregations += [
             ['count()', '', 'count'],
             ['min', SEEN_COLUMN, 'first_seen'],
             ['max', SEEN_COLUMN, 'last_seen'],
         ]
-        conditions = [['tags_key', 'NOT IN', self.EXCLUDE_TAG_KEYS]]
+        if not kwargs.get('get_excluded_tags'):
+            conditions.append(['tags_key', 'NOT IN', self.EXCLUDE_TAG_KEYS])
 
         values_by_key = snuba.query(
             start, end, ['tags_key', 'tags_value'], conditions, filters, aggregations,
@@ -434,7 +457,7 @@ class SnubaTagStorage(TagStorage):
     def __get_release(self, project_id, group_id, first=True):
         start, end = self.get_time_range()
         filters = {
-            'project_id': [project_id],
+            'project_id': get_project_list(project_id),
         }
         conditions = [['tags[sentry:release]', 'IS NOT NULL', None]]
         if group_id is not None:
@@ -557,7 +580,7 @@ class SnubaTagStorage(TagStorage):
                                 order_by='-last_seen'):
         start, end = self.get_time_range()
         return self.get_tag_value_paginator_for_projects(
-            [project_id],
+            get_project_list(project_id),
             [environment_id] if environment_id else None,
             key,
             start,
@@ -627,7 +650,7 @@ class SnubaTagStorage(TagStorage):
     def get_group_tag_value_iter(self, project_id, group_id, environment_id, key, callbacks=()):
         start, end = self.get_time_range()
         filters = {
-            'project_id': [project_id],
+            'project_id': get_project_list(project_id),
             'tags_key': [key],
             'issue': [group_id],
         }
@@ -698,7 +721,7 @@ class SnubaTagStorage(TagStorage):
         end = min(end, default_end) if end else default_end
 
         filters = {
-            'project_id': [project_id],
+            'project_id': get_project_list(project_id),
             'issue': [group_id],
         }
         if environment_ids:
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index a3dcb3f473..6b96abe4f1 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -5,6 +5,7 @@ from six.moves.urllib.parse import urlencode
 from datetime import timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
+from uuid import uuid4
 
 from sentry.testutils import APITestCase, SnubaTestCase
 
@@ -778,6 +779,382 @@ class OrganizationEventsStatsEndpointTest(OrganizationEventsTestBase):
         ]
 
 
+class OrganizationEventsHeatmapEndpointTest(OrganizationEventsTestBase):
+    def setUp(self):
+        super(OrganizationEventsHeatmapEndpointTest, self).setUp()
+        self.login_as(user=self.user)
+        self.project = self.create_project()
+        self.project2 = self.create_project()
+        self.url = reverse(
+            'sentry-api-0-organization-events-heatmap',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        self.min_ago = self.min_ago.replace(microsecond=0)
+        self.day_ago = self.day_ago.replace(microsecond=0)
+
+    def test_simple(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'number': 'one'},
+            },
+            project_id=self.project2.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(self.url, {'keys': ['color', 'number']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        response.data[0] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': 'one',
+                    'value': 'one',
+                    'lastSeen': self.min_ago,
+                    'key': 'number',
+                    'firstSeen': self.min_ago
+                }
+            ],
+            'totalValues': 1,
+            'name': 'Number',
+            'key': 'number'
+        }
+        response.data[1] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': 'green',
+                    'value': 'green',
+                    'lastSeen': self.min_ago,
+                    'key': 'color',
+                    'firstSeen': self.min_ago
+                },
+                {
+                    'count': 1,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': self.min_ago,
+                    'key': 'color',
+                    'firstSeen': self.min_ago
+                }
+            ],
+            'totalValues': 3,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_single_key(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'world': 'hello'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'yellow'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project2.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'yellow'},
+            },
+            project_id=self.project.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(self.url, {'keys': ['color']}, format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': 'yellow',
+                    'value': 'yellow',
+                    'lastSeen': self.min_ago,
+                    'key': 'color',
+                    'firstSeen': self.min_ago
+                },
+                {
+                    'count': 1,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': self.min_ago,
+                    'key': 'color',
+                    'firstSeen': self.min_ago
+                }
+            ],
+            'totalValues': 3,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_with_query(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'message': 'how to make fast',
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'message': 'Delet the Data',
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'message': 'Data the Delet ',
+                'tags': {'color': 'yellow'},
+            },
+            project_id=self.project2.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'query': 'delet', 'keys': ['color']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': 'yellow',
+                    'value': 'yellow',
+                    'lastSeen': self.min_ago,
+                    'key': 'color',
+                    'firstSeen': self.min_ago
+                },
+                {
+                    'count': 1,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': self.min_ago,
+                    'key': 'color',
+                    'firstSeen': self.min_ago
+                }
+            ],
+            'totalValues': 3,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_start_end(self):
+        two_days_ago = self.day_ago - timedelta(days=1)
+        hour_ago = self.min_ago - timedelta(hours=1)
+        two_hours_ago = hour_ago - timedelta(hours=1)
+
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': two_days_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': hour_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': two_hours_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': timezone.now().isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project2.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url,
+                {
+                    'start': self.day_ago.isoformat()[:19],
+                    'end': self.min_ago.isoformat()[:19],
+                    'keys': ['color'],
+                },
+                format='json'
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': hour_ago,
+                    'key': 'color',
+                    'firstSeen': two_hours_ago
+                }
+            ],
+            'totalValues': 2,
+            'name': 'Color',
+            'key': 'color'
+        }
+
+    def test_excluded_tag(self):
+        self.user = self.create_user()
+        self.user2 = self.create_user()
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.day_ago.isoformat(),
+                'tags': {'sentry:user': self.user.email},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.day_ago.isoformat(),
+                'tags': {'sentry:user': self.user2.email},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.day_ago.isoformat(),
+                'tags': {'sentry:user': self.user2.email},
+            },
+            project_id=self.project.id
+        )
+
+        response = self.client.get(
+            self.url,
+            {
+                'keys': ['user'],
+                'project': [self.project.id]
+            },
+            format='json'
+        )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': self.user2.email,
+                    'value': self.user2.email,
+                    'lastSeen': self.day_ago,
+                    'key': 'user',
+                    'firstSeen': self.day_ago
+                },
+                {
+                    'count': 1,
+                    'name': self.user.email,
+                    'value': self.user.email,
+                    'lastSeen': self.day_ago,
+                    'key': 'user',
+                    'firstSeen': self.day_ago
+                }
+            ],
+            'totalValues': 3,
+            'name': 'User',
+            'key': 'user'
+        }
+
+    def test_no_projects(self):
+        org = self.create_organization(owner=self.user)
+        url = reverse(
+            'sentry-api-0-organization-events-heatmap',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+        response = self.client.get(url, {'keys': ['color']}, format='json')
+        assert response.status_code == 400, response.content
+        assert response.data == {'detail': 'A valid project must be included.'}
+
+    def test_multiple_projects_without_global_view(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+            },
+            project_id=self.project2.id
+        )
+
+        response = self.client.get(self.url, {'keys': ['color']}, format='json')
+        assert response.status_code == 400, response.content
+        assert response.data == {'detail': 'You cannot view events from multiple projects.'}
+
+
 class OrganizationEventsMetaEndpoint(OrganizationEventsTestBase):
     def test_simple(self):
         self.login_as(user=self.user)
