commit 6e4d6c4c9b07572ed24211def181f709150e2483
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Aug 25 11:23:49 2017 -0700

    pagination: Correct prev page offset
    
    When paging, we may have a cursor that looks like such:
    
        <value=4, offset=0, is_prev=0>
    
    And we have a dataset that looks like this:
    
        [ 1, 2, 3, 4, 5, 6, 7, 8]
                   ^
          cursor value is here
    
    When we ask for the prev-page cursor the prev-cursor will start from
    value `4`, and do a lookup where the values are less than or equal to 4.
    (The 'or equal' is used to generalize the query when doing next lookups)
    
    The problem is when doing that 4 will be included, to fix this, prev
    cursor should add a single offset to move pas the value that we had
    already seen on the page.
    
    The problem we're fixing here is that when *no value* is given in a
    cursor, we move past a value that we haven't seen yet. This is fixed by
    only applying the +1 offset for prev cursors that also have a value.

diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index d2196b138d..ff475ab051 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -115,8 +115,9 @@ class BasePaginator(object):
 
         offset = cursor.offset
         # this effectively gets us the before row, and the current (after) row
-        # every time
-        if cursor.is_prev:
+        # every time. Do not offset if the provided cursor value was empty since
+        # there is nothing to traverse past.
+        if cursor.is_prev and cursor.value:
             offset += 1
         stop = offset + limit + 1
         results = list(queryset[offset:stop])
diff --git a/tests/sentry/api/test_paginator.py b/tests/sentry/api/test_paginator.py
index 09ceb33f7c..aa11292777 100644
--- a/tests/sentry/api/test_paginator.py
+++ b/tests/sentry/api/test_paginator.py
@@ -52,6 +52,21 @@ class PaginatorTest(TestCase):
         result = paginator.count_hits(1)
         assert result == 1
 
+    def test_prev_emptyset(self):
+        queryset = User.objects.all()
+
+        paginator = self.cls(queryset, 'id')
+        result1 = paginator.get_result(limit=1, cursor=None)
+
+        res1 = self.create_user('foo@example.com')
+
+        result2 = paginator.get_result(limit=1, cursor=result1.prev)
+        assert len(result2) == 1, (result2, list(result2))
+        assert result2[0] == res1
+
+        result3 = paginator.get_result(limit=1, cursor=result2.prev)
+        assert len(result3) == 0, (result3, list(result3))
+
 
 class OffsetPaginatorTest(TestCase):
     # offset paginator does not support dynamic limits on is_prev
