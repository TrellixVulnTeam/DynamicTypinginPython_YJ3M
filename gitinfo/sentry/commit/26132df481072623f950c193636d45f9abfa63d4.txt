commit 26132df481072623f950c193636d45f9abfa63d4
Author: Chris Montrois <cmontrois@quickleft.com>
Date:   Mon Jul 13 14:57:55 2015 -0600

    Refactors and bootstrap tooltip delegation
    
    Bootstrap tooltips were being added to every column of the BarChart. Now a
    single tooltip is delegated to the BarChart component. Also, the chart columns
    are no longer rendered asynchronously.
    
    There was also some general method extraction refactoring.

diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index 6639d08eb5..ebdd2e0a47 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -1,9 +1,9 @@
-var jQuery = require("jquery");
+var $ = require("jquery");
 var moment = require("moment");
 var React = require("react");
 
 var TooltipTrigger = require("./tooltipTrigger");
-var {valueIsEqual} = require("../utils");
+var { valueIsEqual } = require("../utils");
 
 var BarChart = React.createClass({
   propTypes: {
@@ -19,34 +19,44 @@ var BarChart = React.createClass({
 
   getDefaultProps() {
     return {
+      className: "",
+      height: null,
+      label: "events",
       placement: "bottom",
       points: [],
-      label: "events"
+      width: null,
+      viewport: null
     };
   },
 
-  componentDidUpdate() {
-    if (this._asyncRender) return;
-    this._asyncRender = window.setTimeout(this.renderChart);
-  },
-
   componentDidMount() {
-    this._asyncRender = window.setTimeout(this.renderChart);
+    this.attachTooltips();
   },
 
   componentWillUnmount() {
-    if (this._asyncRender) {
-      window.clearTimeout(this._asyncRender);
-    }
+    this.removeTooltips();
   },
 
   shouldComponentUpdate(nextProps, nextState) {
     return !valueIsEqual(this.props, nextProps, true);
   },
 
+  attachTooltips() {
+    $(this.getDOMNode()).tooltip({
+      html: true,
+      placement: this.props.placement,
+      selector: ".chart-column",
+      viewport: this.props.viewport
+    });
+  },
+
+  removeTooltips() {
+    $(this.getDOMNode()).tooltip("destroy");
+  },
+
   floatFormat(number, places) {
-      var multi = Math.pow(10, places);
-      return parseInt(number * multi, 10) / multi;
+    var multi = Math.pow(10, places);
+    return parseInt(number * multi, 10) / multi;
   },
 
   timeLabelAsHour(point) {
@@ -89,19 +99,18 @@ var BarChart = React.createClass({
     return timeMoment.format("lll");
   },
 
-  renderChart() {
-    var ref = this.refs.chartPoints;
-    if (!ref) {
-      return;
-    }
-    var points = this.props.points;
+  maxPointValue() {
     var maxval = 10;
-    points.forEach((point) => {
+    this.props.points.forEach((point) => {
       if (point.y > maxval) {
         maxval = point.y;
       }
     });
+    return maxval;
+  },
 
+  renderChart() {
+    var points = this.props.points;
     var pointWidth = this.floatFormat(100.0 / points.length, 2) + "%";
 
     var interval = (points.length > 1 ? points[1].x - points[0].x : null);
@@ -120,50 +129,42 @@ var BarChart = React.createClass({
         timeLabelFunc = this.timeLabelAsRange.bind(this, interval);
     }
 
-    var children = points.map((point, pointIdx) => {
-      var pct = this.floatFormat(point.y / maxval * 99, 2) + "%";
-
-      var timeLabel = timeLabelFunc(point);
-      var title = (
-        '<div style="width:130px">' +
-          point.y + ' ' + this.props.label + '<br/>' +
-          timeLabel +
-        '</div>'
-      );
-      if (point.label) {
-        title += '<div>(' + point.label + ')</div>';
-      }
+    var maxval = this.maxPointValue();
 
-      return jQuery(
-        '<a style="width:' + pointWidth + '">' +
-          '<span style="height:' + pct + '">' + point.y + '</span>' +
-        '</a>'
-      ).tooltip({
-        html: true,
-        placement: this.props.placement,
-        title: title,
-        viewport: this.props.viewport
-      });
+    return points.map((point) => {
+      return this.renderChartColumn(point, maxval, timeLabelFunc, pointWidth);
     });
+  },
 
-    jQuery(ref.getDOMNode()).html(children);
+  renderChartColumn(point, maxval, timeLabelFunc, pointWidth) {
+    var pct = this.floatFormat(point.y / maxval * 99, 2) + "%";
+    var timeLabel = timeLabelFunc(point);
+    var title = (
+      '<div style="width:130px">' +
+        point.y + ' ' + this.props.label + '<br/>' +
+        timeLabel +
+      '</div>'
+    );
+    if (point.label) {
+      title += '<div>(' + point.label + ')</div>';
+    }
+
+    return (
+      <a key={point.x} className="chart-column" data-title={title} style={{ width: pointWidth }}>
+        <span style={{ height: pct }}>{point.y}</span>
+      </a>
+    );
   },
 
   render() {
-    var maxval = 10;
-    this.props.points.forEach((point) => {
-      if (point.y > maxval) {
-        maxval = point.y;
-      }
-    });
+    var figureClass = [this.props.className, 'barchart'].join(" ");
+    var maxval = this.maxPointValue();
 
     return (
-      <figure className={this.props.className || '' + ' barchart'}
-              height={this.props.height}
-              width={this.props.width}>
-        <span className="max-y" key="max-y">{maxval}</span>
-        <span className="min-y" key="min-y">{0}</span>
-        <span ref="chartPoints" />
+      <figure className={figureClass} height={this.props.height} width={this.props.width}>
+        <span className="max-y">{maxval}</span>
+        <span className="min-y">0</span>
+        <span>{this.renderChart()}</span>
       </figure>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationTeams.jsx b/src/sentry/static/sentry/app/views/organizationTeams.jsx
index 844c395b3f..ea9564ebcc 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams.jsx
@@ -29,78 +29,86 @@ var ExpandedTeamList = React.createClass({
     });
   },
 
-  render() {
+  urlPrefix() {
     var org = this.props.organization;
-    var urlPrefix = ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
+    return ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
+  },
 
-    var projectStats = this.props.projectStats;
-    var teamNodes = this.props.teamList.map((team, teamIdx) => {
-      var teamRouteParams = {
-        orgId: org.slug,
-        teamId: team.slug
-      };
-      return (
-        <div className="box" key={team.slug}>
-          <div className="box-header">
-            <div className="pull-right actions hidden-xs">
-              <a className="new-project" href={urlPrefix + '/projects/new/?team=' + team.slug}>
-                New Project
-              </a>
-              <a className="leave-team"
-                 onClick={this.leaveTeam.bind(this, team)}>
-                Leave Team
-              </a>
-              <a className="team-settings" href={urlPrefix + '/teams/' + team.slug + '/settings/'}>
-                Team Settings
-              </a>
-            </div>
-            <h3>{team.name}</h3>
-          </div>
-          <div className="box-content">
-            <table className="table project-list">
-              <tbody>
-                {team.projects.map((project) => {
-                  var projectRouteParams = {
-                    orgId: org.slug,
-                    projectId: project.slug
-                  };
-                  var chartData = null;
-                  if (projectStats[project.id]) {
-                    chartData = projectStats[project.id].map((point) => {
-                      return {x: point[0], y: point[1]};
-                    });
-                  }
-                  return (
-                    <tr key={project.id}>
-                      <td>
-                        <Router.Link
-                            to="projectDetails"
-                            params={projectRouteParams}>
-                          {project.name}
-                        </Router.Link>
-                      </td>
-                      <td className="align-right project-chart">
-                        {chartData &&
-                          <BarChart points={chartData} className="sparkline" />
-                        }
-                      </td>
-                    </tr>
-                  );
-                })}
-              </tbody>
-            </table>
+  renderTeamNode(team, urlPrefix) {
+    return (
+      <div className="box" key={team.slug}>
+        <div className="box-header">
+          <div className="pull-right actions hidden-xs">
+            <a className="new-project" href={urlPrefix + '/projects/new/?team=' + team.slug}>
+              New Project
+            </a>
+            <a className="leave-team" onClick={this.leaveTeam.bind(this, team)}>
+              Leave Team
+            </a>
+            <a className="team-settings" href={urlPrefix + '/teams/' + team.slug + '/settings/'}>
+              Team Settings
+            </a>
           </div>
+          <h3>{team.name}</h3>
         </div>
-      );
+        <div className="box-content">
+          <table className="table project-list">
+            <tbody>{team.projects.map(this.renderProject)}</tbody>
+          </table>
+        </div>
+      </div>
+    );
+  },
+
+  renderProject(project) {
+    var projectStats = this.props.projectStats;
+    var projectRouteParams = {
+      orgId: this.props.organization.slug,
+      projectId: project.slug
+    };
+    var chartData = null;
+    if (projectStats[project.id]) {
+      chartData = projectStats[project.id].map((point) => {
+        return {x: point[0], y: point[1]};
+      });
+    }
+
+    return (
+      <tr key={project.id}>
+        <td>
+          <Router.Link to="projectDetails" params={projectRouteParams}>
+            {project.name}
+          </Router.Link>
+        </td>
+        <td className="align-right project-chart">
+          {chartData && <BarChart points={chartData} className="sparkline" /> }
+        </td>
+      </tr>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <p>
+        {"You dont have any teams for this organization yet. Get started by "}
+        <a href={this.urlPrefix() + '/teams/new/'}>creating your first team</a>.
+      </p>
+    );
+  },
+
+  renderTeamNodes() {
+    var urlPrefix = this.urlPrefix();
+    return this.props.teamList.map((team) => {
+      return this.renderTeamNode(team, urlPrefix);
     });
+  },
+
+  render() {
+    var hasTeams = this.props.teamList.length > 0;
 
     return (
       <div>
-        {teamNodes.length ?
-          {teamNodes}
-        :
-          <p>You dont have any teams for this organization yet. Get started by <a href={urlPrefix + '/teams/new/'}>creating your first team</a>.</p>
-        }
+        {hasTeams ? this.renderTeamNodes() : this.renderEmpty() }
       </div>
     );
   }
