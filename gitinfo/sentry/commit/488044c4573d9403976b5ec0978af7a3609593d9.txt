commit 488044c4573d9403976b5ec0978af7a3609593d9
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Aug 9 11:22:58 2019 -0700

    ref(ts): Convert a number of utility functions to TypeScript (#14331)
    
    - getCookie
    - getPeriod
    - logging
    - callIfFunction
    - parseLinkHeader

diff --git a/src/sentry/static/sentry/app/utils/callIfFunction.jsx b/src/sentry/static/sentry/app/utils/callIfFunction.tsx
similarity index 63%
rename from src/sentry/static/sentry/app/utils/callIfFunction.jsx
rename to src/sentry/static/sentry/app/utils/callIfFunction.tsx
index 84a67a6b8e..0497810991 100644
--- a/src/sentry/static/sentry/app/utils/callIfFunction.jsx
+++ b/src/sentry/static/sentry/app/utils/callIfFunction.tsx
@@ -1,4 +1,4 @@
 // Checks if `fn` is a function and calls it with `args`
-export function callIfFunction(fn, ...args) {
+export function callIfFunction(fn: any, ...args: any[]): any {
   return typeof fn === 'function' && fn(...args);
 }
diff --git a/src/sentry/static/sentry/app/utils/getCookie.jsx b/src/sentry/static/sentry/app/utils/getCookie.tsx
similarity index 64%
rename from src/sentry/static/sentry/app/utils/getCookie.jsx
rename to src/sentry/static/sentry/app/utils/getCookie.tsx
index a4c7162b19..4a605c2327 100644
--- a/src/sentry/static/sentry/app/utils/getCookie.jsx
+++ b/src/sentry/static/sentry/app/utils/getCookie.tsx
@@ -1,15 +1,13 @@
-export default function getCookie(name) {
-  let cookieValue = null;
+export default function getCookie(name: string): string | null {
   if (document.cookie && document.cookie !== '') {
     const cookies = document.cookie.split(';');
     for (let i = 0; i < cookies.length; i++) {
       const cookie = cookies[i].trim();
       // Does this cookie string begin with the name we want?
       if (cookie.substring(0, name.length + 1) === name + '=') {
-        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
-        break;
+        return decodeURIComponent(cookie.substring(name.length + 1));
       }
     }
   }
-  return cookieValue;
+  return null;
 }
diff --git a/src/sentry/static/sentry/app/utils/getPeriod.jsx b/src/sentry/static/sentry/app/utils/getPeriod.tsx
similarity index 90%
rename from src/sentry/static/sentry/app/utils/getPeriod.jsx
rename to src/sentry/static/sentry/app/utils/getPeriod.tsx
index 4ed361ec74..f1313c4010 100644
--- a/src/sentry/static/sentry/app/utils/getPeriod.jsx
+++ b/src/sentry/static/sentry/app/utils/getPeriod.tsx
@@ -15,7 +15,12 @@ import {getUtcDateString} from 'app/utils/dates';
  * @param {Boolean} [options.shouldDoublePeriod] Doubles the given period (useful for getting previous period data)
  * @return {Object} Returns an object with either a period or start/end dates ({statsPeriod: string} or {start: string, end: string})
  */
-export const getPeriod = ({period, start, end}, {shouldDoublePeriod} = {}) => {
+type Options = {shouldDoublePeriod?: boolean};
+
+export const getPeriod = (
+  {period, start, end},
+  {shouldDoublePeriod}: Options = {}
+): {start: string; end: string} | {statsPeriod: string} => {
   if (!period && !start && !end) {
     period = DEFAULT_STATS_PERIOD;
   }
diff --git a/src/sentry/static/sentry/app/utils/logging.jsx b/src/sentry/static/sentry/app/utils/logging.tsx
similarity index 81%
rename from src/sentry/static/sentry/app/utils/logging.jsx
rename to src/sentry/static/sentry/app/utils/logging.tsx
index f8d010de46..0a97fb8881 100644
--- a/src/sentry/static/sentry/app/utils/logging.jsx
+++ b/src/sentry/static/sentry/app/utils/logging.tsx
@@ -1,6 +1,6 @@
 import * as Sentry from '@sentry/browser';
 
-export function logException(ex, context) {
+export function logException(ex: Error, context: any): void {
   Sentry.withScope(scope => {
     if (context) {
       scope.setExtra('context', context);
diff --git a/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx b/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
deleted file mode 100644
index 6e649a45e0..0000000000
--- a/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
+++ /dev/null
@@ -1,23 +0,0 @@
-export default function parseLinkHeader(header) {
-  if (header === null) {
-    return {};
-  }
-
-  const header_vals = header.split(','),
-    links = {};
-
-  header_vals.forEach(val => {
-    const match = /<([^>]+)>; rel="([^"]+)"(?:; results="([^"]+)")?(?:; cursor="([^"]+)")?/g.exec(
-      val
-    );
-    const hasResults = match[3] === 'true' ? true : match[3] === 'false' ? false : null;
-
-    links[match[2]] = {
-      href: match[1],
-      results: hasResults,
-      cursor: match[4],
-    };
-  });
-
-  return links;
-}
diff --git a/src/sentry/static/sentry/app/utils/parseLinkHeader.tsx b/src/sentry/static/sentry/app/utils/parseLinkHeader.tsx
new file mode 100644
index 0000000000..764364a23a
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/parseLinkHeader.tsx
@@ -0,0 +1,25 @@
+export default function parseLinkHeader(
+  header: string | null
+): {[key: string]: {href: string; results: boolean | null; cursor: string}} {
+  if (header === null) {
+    return {};
+  }
+
+  const header_vals = header.split(',');
+  const links = {};
+
+  header_vals.forEach(val => {
+    const match = /<([^>]+)>; rel="([^"]+)"(?:; results="([^"]+)")?(?:; cursor="([^"]+)")?/g.exec(
+      val
+    );
+    const hasResults = match![3] === 'true' ? true : match![3] === 'false' ? false : null;
+
+    links[match![2]] = {
+      href: match![1],
+      results: hasResults,
+      cursor: match![4],
+    };
+  });
+
+  return links;
+}
