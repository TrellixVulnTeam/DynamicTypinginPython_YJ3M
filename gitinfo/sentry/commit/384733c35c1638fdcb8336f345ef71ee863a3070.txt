commit 384733c35c1638fdcb8336f345ef71ee863a3070
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Mar 18 09:46:16 2019 +0100

    ref(grouping): Added initial pass of new grouping algorithm (#12414)
    
    This internally exposes a new grouping algorithm that lets us experiment with grouping in isolation.

diff --git a/Makefile b/Makefile
index 7fadd3514f..782e72b77c 100644
--- a/Makefile
+++ b/Makefile
@@ -149,6 +149,18 @@ lint-python:
 	bash -eo pipefail -c "flake8 | tee .artifacts/flake8.pycodestyle.log"
 	@echo ""
 
+review-python-snapshots:
+	@cargo insta --version &> /dev/null || cargo install cargo-insta
+	@cargo insta review --workspace-root `pwd` -e pysnap
+
+accept-python-snapshots:
+	@cargo insta --version &> /dev/null || cargo install cargo-insta
+	@cargo insta accept --workspace-root `pwd` -e pysnap
+
+reject-python-snapshots:
+	@cargo insta --version &> /dev/null || cargo install cargo-insta
+	@cargo insta reject --workspace-root `pwd` -e pysnap
+
 lint-js:
 	@echo "--> Linting javascript"
 	bin/lint --js --parseable
diff --git a/src/sentry/grouping/strategies/base.py b/src/sentry/grouping/strategies/base.py
index ac265e23ce..c2a3359438 100644
--- a/src/sentry/grouping/strategies/base.py
+++ b/src/sentry/grouping/strategies/base.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import inspect
+
 from sentry.grouping.component import GroupingComponent
 
 
@@ -158,10 +160,11 @@ class Strategy(object):
 
 class StrategyConfiguration(object):
 
-    def __init__(self, id, strategies, delegates=None):
+    def __init__(self, id, strategies, delegates=None, changelog=None):
         self.id = id
         self.strategies = {}
         self.delegates = {}
+        self.changelog = inspect.cleandoc(changelog or '')
 
         for strategy_id in strategies:
             strategy = lookup_strategy(strategy_id)
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index cb4e2ce1f4..6195b06c3c 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -3,21 +3,61 @@ from __future__ import absolute_import
 from sentry.grouping.strategies.base import StrategyConfiguration
 
 
-# The latest version of th edefault config that should be used
+# The latest version of the default config that should be used
 DEFAULT_CONFIG = 'legacy:2019-03-12'
 
+# The classes of grouping algorithms
+CLASSES = []
+
 # The full mapping of all known configurations.
 CONFIGURATIONS = {}
 
 
-def register_strategy_config(id, strategies, delegates=None):
-    rv = StrategyConfiguration(id, strategies, delegates)
+def register_strategy_config(id, **kwargs):
+    rv = StrategyConfiguration(id, **kwargs)
+    cls = id.split(':', 1)[0]
+    if cls not in CLASSES:
+        CLASSES.append(cls)
     CONFIGURATIONS[rv.id] = rv
     return rv
 
 
+# Legacy groupings
+#
+# These we do not plan on changing much, but bugfixes here might still go
+# into new grouping versions.
+
 register_strategy_config(
     id='legacy:2019-03-12',
+    strategies=[
+        'expect-ct:v1',
+        'expect-staple:v1',
+        'hpkp:v1',
+        'csp:v1',
+        'threads:v1',
+        'stacktrace:legacy',
+        'chained-exception:legacy',
+        'template:v1',
+        'message:v1',
+    ],
+    delegates=[
+        'frame:legacy',
+        'stacktrace:legacy',
+        'single-exception:legacy',
+    ],
+    changelog='''
+        * Traditional grouping algorithm
+        * Some known weeknesses with regards to grouping of native frames
+    '''
+)
+
+# Newstyle grouping
+#
+# This is the new grouping strategy but it's not yet versioned because
+# it's not available to customers yet.
+
+register_strategy_config(
+    id='new:wip',
     strategies=[
         'expect-ct:v1',
         'expect-staple:v1',
@@ -33,5 +73,8 @@ register_strategy_config(
         'frame:v1',
         'stacktrace:v1',
         'single-exception:v1',
-    ]
+    ],
+    changelog='''
+        * Work in progress grouping algorith that is not frozen in behavior yet
+    '''
 )
diff --git a/src/sentry/grouping/strategies/exception.py b/src/sentry/grouping/strategies/exception.py
index f9d3382d0b..da8f455f50 100644
--- a/src/sentry/grouping/strategies/exception.py
+++ b/src/sentry/grouping/strategies/exception.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-import six
-
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
 
@@ -15,38 +13,19 @@ def single_exception_v1(exception, config, **meta):
     type_component = GroupingComponent(
         id='type',
         values=[exception.type] if exception.type else [],
-        contributes=False
-    )
-    value_component = GroupingComponent(
-        id='value',
-        values=[exception.value] if exception.value else [],
-        contributes=False
     )
-    stacktrace_component = GroupingComponent(id='stacktrace')
 
     if exception.stacktrace is not None:
         stacktrace_component = config.get_grouping_component(
             exception.stacktrace, **meta)
-        if stacktrace_component.contributes:
-            if exception.type:
-                type_component.update(contributes=True)
-                if exception.value:
-                    value_component.update(hint='stacktrace and type take precedence')
-            elif exception.value:
-                value_component.update(hint='stacktrace takes precedence')
-
-    if not stacktrace_component.contributes:
-        if exception.type:
-            type_component.update(contributes=True)
-        if exception.value:
-            value_component.update(contributes=True)
+    else:
+        stacktrace_component = GroupingComponent(id='stacktrace')
 
     return GroupingComponent(
         id='exception',
         values=[
             stacktrace_component,
             type_component,
-            value_component,
         ]
     )
 
@@ -59,70 +38,16 @@ def single_exception_v1(exception, config, **meta):
 )
 def chained_exception_v1(chained_exception, config, **meta):
     # Case 1: we have a single exception, use the single exception
-    # component directly
+    # component directly to avoid a level of nesting
     exceptions = chained_exception.exceptions()
     if len(exceptions) == 1:
         return config.get_grouping_component(exceptions[0], **meta)
 
-    # Case 2: try to build a new component out of the individual
-    # errors however with a trick.  In case any exeption has a
-    # stacktrace we want to ignore all other exceptions.
-    any_stacktraces = False
     values = []
     for exception in exceptions:
-        exception_component = config.get_grouping_component(exception, **meta)
-        stacktrace_component = exception_component.get_subcomponent('stacktrace')
-        if stacktrace_component is not None and \
-           stacktrace_component.contributes:
-            any_stacktraces = True
-        values.append(exception_component)
-
-    if any_stacktraces:
-        for value in values:
-            stacktrace_component = value.get_subcomponent('stacktrace')
-            if stacktrace_component is None or not stacktrace_component.contributes:
-                value.update(
-                    contributes=False,
-                    hint='exception has no stacktrace',
-                )
+        values.append(config.get_grouping_component(exception, **meta))
 
     return GroupingComponent(
         id='chained-exception',
         values=values,
     )
-
-
-@chained_exception_v1.variant_processor
-def chained_exception_v1_variant_processor(variants, config, **meta):
-    if len(variants) <= 1:
-        return variants
-    any_stacktrace_contributes = False
-    non_contributing_components = []
-    stacktrace_variants = set()
-
-    # In case any of the variants has a contributing stacktrace, we want
-    # to make all other variants non contributing.  Thr e
-    for (key, component) in six.iteritems(variants):
-        if any(s.contributes for s in component.iter_subcomponents(
-                id='stacktrace', recursive=True)):
-            any_stacktrace_contributes = True
-            stacktrace_variants.add(key)
-        else:
-            non_contributing_components.append(component)
-
-    if any_stacktrace_contributes:
-        if len(stacktrace_variants) == 1:
-            hint_suffix = 'but the %s variant does' % next(iter(stacktrace_variants))
-        else:
-            # this branch is basically dead because we only have two
-            # variants right now, but this is so this does not break in
-            # the future.
-            hint_suffix = 'others do'
-        for component in non_contributing_components:
-            component.update(
-                contributes=False,
-                hint='ignored because this variant does not contain a '
-                'stacktrace, but %s' % hint_suffix
-            )
-
-    return variants
diff --git a/src/sentry/grouping/strategies/legacy_exception.py b/src/sentry/grouping/strategies/legacy_exception.py
new file mode 100644
index 0000000000..028f862519
--- /dev/null
+++ b/src/sentry/grouping/strategies/legacy_exception.py
@@ -0,0 +1,128 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.base import strategy
+
+
+@strategy(
+    id='single-exception:legacy',
+    interfaces=['singleexception'],
+    variants=['!system', 'app'],
+)
+def single_exception_legacy(exception, config, **meta):
+    type_component = GroupingComponent(
+        id='type',
+        values=[exception.type] if exception.type else [],
+        contributes=False
+    )
+    value_component = GroupingComponent(
+        id='value',
+        values=[exception.value] if exception.value else [],
+        contributes=False
+    )
+    stacktrace_component = GroupingComponent(id='stacktrace')
+
+    if exception.stacktrace is not None:
+        stacktrace_component = config.get_grouping_component(
+            exception.stacktrace, **meta)
+        if stacktrace_component.contributes:
+            if exception.type:
+                type_component.update(contributes=True)
+                if exception.value:
+                    value_component.update(hint='stacktrace and type take precedence')
+            elif exception.value:
+                value_component.update(hint='stacktrace takes precedence')
+
+    if not stacktrace_component.contributes:
+        if exception.type:
+            type_component.update(contributes=True)
+        if exception.value:
+            value_component.update(contributes=True)
+
+    return GroupingComponent(
+        id='exception',
+        values=[
+            stacktrace_component,
+            type_component,
+            value_component,
+        ]
+    )
+
+
+@strategy(
+    id='chained-exception:legacy',
+    interfaces=['exception'],
+    variants=['!system', 'app'],
+    score=2000,
+)
+def chained_exception_legacy(chained_exception, config, **meta):
+    # Case 1: we have a single exception, use the single exception
+    # component directly
+    exceptions = chained_exception.exceptions()
+    if len(exceptions) == 1:
+        return config.get_grouping_component(exceptions[0], **meta)
+
+    # Case 2: try to build a new component out of the individual
+    # errors however with a trick.  In case any exeption has a
+    # stacktrace we want to ignore all other exceptions.
+    any_stacktraces = False
+    values = []
+    for exception in exceptions:
+        exception_component = config.get_grouping_component(exception, **meta)
+        stacktrace_component = exception_component.get_subcomponent('stacktrace')
+        if stacktrace_component is not None and \
+           stacktrace_component.contributes:
+            any_stacktraces = True
+        values.append(exception_component)
+
+    if any_stacktraces:
+        for value in values:
+            stacktrace_component = value.get_subcomponent('stacktrace')
+            if stacktrace_component is None or not stacktrace_component.contributes:
+                value.update(
+                    contributes=False,
+                    hint='exception has no stacktrace',
+                )
+
+    return GroupingComponent(
+        id='chained-exception',
+        values=values,
+    )
+
+
+@chained_exception_legacy.variant_processor
+def chained_exception_legacy_variant_processor(variants, config, **meta):
+    if len(variants) <= 1:
+        return variants
+    any_stacktrace_contributes = False
+    non_contributing_components = []
+    stacktrace_variants = set()
+
+    # In case any of the variants has a contributing stacktrace, we want
+    # to make all other variants non contributing.  Thr e
+    for (key, component) in six.iteritems(variants):
+        if any(s.contributes for s in component.iter_subcomponents(
+                id='stacktrace', recursive=True)):
+            any_stacktrace_contributes = True
+            stacktrace_variants.add(key)
+        else:
+            non_contributing_components.append(component)
+
+    if any_stacktrace_contributes:
+        if len(stacktrace_variants) == 1:
+            hint_suffix = 'but the %s variant does' % next(iter(stacktrace_variants))
+        else:
+            # this branch is basically dead because we only have two
+            # variants right now, but this is so this does not break in
+            # the future.
+            hint_suffix = 'others do'
+        for component in non_contributing_components:
+            component.update(
+                contributes=False,
+                hint='ignored because this variant does not contain a '
+                'stacktrace, but %s' % hint_suffix
+            )
+
+    return variants
diff --git a/src/sentry/grouping/strategies/legacy_stacktrace.py b/src/sentry/grouping/strategies/legacy_stacktrace.py
new file mode 100644
index 0000000000..f36e9be1fd
--- /dev/null
+++ b/src/sentry/grouping/strategies/legacy_stacktrace.py
@@ -0,0 +1,391 @@
+from __future__ import absolute_import
+
+import re
+import posixpath
+
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.base import strategy
+
+
+_ruby_anon_func = re.compile(r'_\d{2,}')
+_filename_version_re = re.compile(
+    r"""(?:
+    v?(?:\d+\.)*\d+|   # version numbers, v1, 1.0.0
+    [a-f0-9]{7,8}|     # short sha
+    [a-f0-9]{32}|      # md5
+    [a-f0-9]{40}       # sha1
+)/""", re.X | re.I
+)
+
+# OpenJDK auto-generated classes for reflection access:
+#   sun.reflect.GeneratedSerializationConstructorAccessor123
+#   sun.reflect.GeneratedConstructorAccessor456
+# Note that this doesn't cover the following pattern for the sake of
+# backward compatibility (to not to change the existing grouping):
+#   sun.reflect.GeneratedMethodAccessor789
+_java_reflect_enhancer_re = re.compile(
+    r'''(sun\.reflect\.Generated(?:Serialization)?ConstructorAccessor)\d+''',
+    re.X
+)
+
+# Java Spring specific anonymous classes.
+# see: http://mydailyjava.blogspot.co.at/2013/11/cglib-missing-manual.html
+_java_cglib_enhancer_re = re.compile(r'''(\$\$[\w_]+?CGLIB\$\$)[a-fA-F0-9]+(_[0-9]+)?''', re.X)
+
+# Handle Javassist auto-generated classes and filenames:
+#   com.example.api.entry.EntriesResource_$$_javassist_74
+#   com.example.api.entry.EntriesResource_$$_javassist_seam_74
+#   EntriesResource_$$_javassist_seam_74.java
+_java_assist_enhancer_re = re.compile(r'''(\$\$_javassist)(?:_seam)?(?:_[0-9]+)?''', re.X)
+
+# Clojure anon functions are compiled down to myapp.mymodule$fn__12345
+_clojure_enhancer_re = re.compile(r'''(\$fn__)\d+''', re.X)
+
+# fields that need to be the same between frames for them to be considered
+# recursive calls
+RECURSION_COMPARISON_FIELDS = [
+    'abs_path',
+    'package',
+    'module',
+    'filename',
+    'function',
+    'lineno',
+    'colno',
+]
+
+
+def is_url_legacy(filename):
+    return filename.startswith(('file:', 'http:', 'https:', 'applewebdata:'))
+
+
+def is_url_frame_legacy(frame):
+    if not frame.abs_path:
+        return False
+    # URLs can be generated such that they are:
+    #   blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0
+    # https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
+    if frame.abs_path.startswith('blob:'):
+        return True
+    return is_url_legacy(frame.abs_path)
+
+
+def is_unhashable_module_legacy(frame, platform):
+    # Fix for the case where module is a partial copy of the URL
+    # and should not be hashed
+    if (platform == 'javascript' and '/' in frame.module
+            and frame.abs_path and frame.abs_path.endswith(frame.module)):
+        return True
+    elif platform == 'java' and '$$Lambda$' in frame.module:
+        return True
+    return False
+
+
+def is_unhashable_function_legacy(frame):
+    # TODO(dcramer): lambda$ is Java specific
+    # TODO(dcramer): [Anonymous is PHP specific (used for things like SQL
+    # queries and JSON data)
+    return frame.function.startswith(('lambda$', '[Anonymous'))
+
+
+def is_recursion_legacy(frame1, frame2):
+    "Returns a boolean indicating whether frames are recursive calls."
+    for field in RECURSION_COMPARISON_FIELDS:
+        if getattr(frame1, field, None) != getattr(frame2, field, None):
+            return False
+
+    return True
+
+
+def remove_module_outliers_legacy(module, platform):
+    """Remove things that augment the module but really should not."""
+    if platform == 'java':
+        if module[:35] == 'sun.reflect.GeneratedMethodAccessor':
+            return 'sun.reflect.GeneratedMethodAccessor', 'removed reflection marker'
+        old_module = module
+        module = _java_reflect_enhancer_re.sub(r'\1<auto>', module)
+        module = _java_cglib_enhancer_re.sub(r'\1<auto>', module)
+        module = _java_assist_enhancer_re.sub(r'\1<auto>', module)
+        module = _clojure_enhancer_re.sub(r'\1<auto>', module)
+        if old_module != module:
+            return module, 'removed codegen marker'
+    return module, None
+
+
+def remove_filename_outliers_legacy(filename, platform):
+    """
+    Attempt to normalize filenames by removing common platform outliers.
+
+    - Sometimes filename paths contain build numbers
+    """
+    # On cocoa we generally only want to use the last path component as
+    # the filename.  The reason for this is that the chances are very high
+    # that full filenames contain information we do want to strip but
+    # currently can't (for instance because the information we get from
+    # the dwarf files does not contain prefix information) and that might
+    # contain things like /Users/foo/Dropbox/...
+    if platform == 'cocoa':
+        return posixpath.basename(filename), 'stripped to basename'
+
+    removed = []
+    if platform == 'java':
+        new_filename = _java_assist_enhancer_re.sub(r'\1<auto>', filename)
+        if new_filename != filename:
+            removed.append('javassist parts')
+            filename = new_filename
+
+    new_filename = _filename_version_re.sub('<version>/', filename)
+    if new_filename != filename:
+        removed.append('version')
+        filename = new_filename
+
+    if removed:
+        return filename, 'removed %s' % ' and '.join(removed)
+    return filename, None
+
+
+def remove_function_outliers_legacy(function):
+    """
+    Attempt to normalize functions by removing common platform outliers.
+
+    - Ruby generates (random?) integers for various anonymous style functions
+      such as in erb and the active_support library.
+    - Block functions have metadata that we don't care about.
+    """
+    if function.startswith('block '):
+        return 'block', 'ruby block'
+    new_function = _ruby_anon_func.sub('_<anon>', function)
+    if new_function != function:
+        return new_function, 'trimmed integer suffix'
+    return new_function, None
+
+
+@strategy(
+    id='frame:legacy',
+    interfaces=['frame'],
+    variants=['!system', 'app'],
+)
+def frame_legacy(frame, event, **meta):
+    platform = frame.platform or event.platform
+
+    # In certain situations we want to disregard the entire frame.
+    contributes = None
+    hint = None
+
+    # Safari throws [native code] frames in for calls like ``forEach``
+    # whereas Chrome ignores these. Let's remove it from the hashing algo
+    # so that they're more likely to group together
+    filename_component = GroupingComponent(id='filename')
+    if frame.filename == '<anonymous>':
+        filename_component.update(
+            contributes=False,
+            values=[frame.filename],
+            hint='anonymous filename discarded'
+        )
+    elif frame.filename == '[native code]':
+        contributes = False
+        hint = 'native code indicated by filename'
+    elif frame.filename:
+        if is_url_frame_legacy(frame):
+            filename_component.update(
+                contributes=False,
+                values=[frame.filename],
+                hint='ignored because filename is a URL',
+            )
+        # XXX(dcramer): dont compute hash using frames containing the 'Caused by'
+        # text as it contains an exception value which may may contain dynamic
+        # values (see raven-java#125)
+        elif frame.filename.startswith('Caused by: '):
+            filename_component.update(
+                values=[frame.filename],
+                contributes=False,
+                hint='ignored because invalid'
+            )
+        else:
+            hashable_filename, hashable_filename_hint = \
+                remove_filename_outliers_legacy(frame.filename, platform)
+            filename_component.update(
+                values=[hashable_filename],
+                hint=hashable_filename_hint
+            )
+
+    # if we have a module we use that for grouping.  This will always
+    # take precedence over the filename, even if the module is
+    # considered unhashable.
+    module_component = GroupingComponent(id='module')
+    if frame.module:
+        if is_unhashable_module_legacy(frame, platform):
+            module_component.update(
+                values=[GroupingComponent(
+                    id='salt',
+                    values=['<module>'],
+                    hint='normalized generated module name'
+                )],
+                hint='ignored module',
+            )
+        else:
+            module_name, module_hint = \
+                remove_module_outliers_legacy(frame.module, platform)
+            module_component.update(
+                values=[module_name],
+                hint=module_hint
+            )
+        if frame.filename:
+            filename_component.update(
+                values=[frame.filename],
+                contributes=False,
+                hint='module takes precedence'
+            )
+
+    # Context line when available is the primary contributor
+    context_line_component = GroupingComponent(id='context-line')
+    if frame.context_line is not None:
+        if len(frame.context_line) > 120:
+            context_line_component.update(hint='discarded because line too long')
+        elif is_url_frame_legacy(frame) and not frame.function:
+            context_line_component.update(hint='discarded because from URL origin')
+        else:
+            context_line_component.update(values=[frame.context_line])
+
+    symbol_component = GroupingComponent(id='symbol')
+    function_component = GroupingComponent(id='function')
+    lineno_component = GroupingComponent(id='lineno')
+
+    # The context line grouping information is the most reliable one.
+    # If we did not manage to find some information there, we want to
+    # see if we can come up with some extra information.  We only want
+    # to do that if we managed to get a module of filename.
+    if not context_line_component.contributes and \
+       (module_component.contributes or filename_component.contributes):
+        if frame.symbol:
+            symbol_component.update(values=[frame.symbol])
+            if frame.function:
+                function_component.update(
+                    contributes=False,
+                    values=[frame.function],
+                    hint='symbol takes precedence'
+                )
+            if frame.lineno:
+                lineno_component.update(
+                    contributes=False,
+                    values=[frame.lineno],
+                    hint='symbol takes precedence'
+                )
+        elif frame.function:
+            if is_unhashable_function_legacy(frame):
+                function_component.update(values=[
+                    GroupingComponent(
+                        id='salt',
+                        values=['<function>'],
+                        hint='normalized lambda function name'
+                    )
+                ])
+            else:
+                function, function_hint = remove_function_outliers_legacy(frame.function)
+                function_component.update(
+                    values=[function],
+                    hint=function_hint
+                )
+            if frame.lineno:
+                lineno_component.update(
+                    contributes=False,
+                    values=[frame.lineno],
+                    hint='function takes precedence'
+                )
+        elif frame.lineno:
+            lineno_component.update(values=[frame.lineno])
+    else:
+        if frame.symbol:
+            symbol_component.update(
+                contributes=False,
+                values=[frame.symbol],
+                hint='symbol is used only if module or filename are available'
+            )
+        if frame.function:
+            function_component.update(
+                contributes=False,
+                values=[frame.function],
+                hint='function name is used only if module or filename are available'
+            )
+        if frame.lineno:
+            lineno_component.update(
+                contributes=False,
+                values=[frame.lineno],
+                hint='line number is used only if module or filename are available'
+            )
+
+    return GroupingComponent(
+        id='frame',
+        values=[
+            module_component,
+            filename_component,
+            context_line_component,
+            symbol_component,
+            function_component,
+            lineno_component,
+        ],
+        contributes=contributes,
+        hint=hint,
+    )
+
+
+@strategy(
+    id='stacktrace:legacy',
+    interfaces=['stacktrace'],
+    variants=['!system', 'app'],
+    score=1800,
+)
+def stacktrace_legacy(stacktrace, config, variant, **meta):
+    frames = stacktrace.frames
+    contributes = None
+    hint = None
+    all_frames_considered_in_app = False
+
+    # TODO(dcramer): this should apply only to platform=javascript
+    # Browser JS will often throw errors (from inlined code in an HTML page)
+    # which contain only a single frame, no function name, and have the HTML
+    # document as the filename. In this case the hash is often not usable as
+    # the context cannot be trusted and the URL is dynamic (this also means
+    # the line number cannot be trusted).
+    if (len(frames) == 1 and not frames[0].function and frames[0].is_url()):
+        contributes = False
+        hint = 'ignored single frame stack'
+    elif variant == 'app':
+        total_frames = len(frames)
+        in_app_count = sum(1 if f.in_app else 0 for f in frames)
+        if in_app_count == 0:
+            in_app_count = total_frames
+            all_frames_considered_in_app = True
+
+        # if app frames make up less than 10% of the stacktrace discard
+        # the hash as invalid
+        if total_frames > 0 and in_app_count / float(total_frames) < 0.10:
+            contributes = False
+            hint = 'less than 10% of frames are in-app'
+
+    values = []
+    prev_frame = None
+    for frame in frames:
+        frame_component = config.get_grouping_component(frame, variant=variant, **meta)
+        if variant == 'app' and not frame.in_app and not all_frames_considered_in_app:
+            frame_component.update(
+                contributes=False,
+                hint='non app frame',
+            )
+        elif prev_frame is not None and is_recursion_legacy(frame, prev_frame):
+            frame_component.update(
+                contributes=False,
+                hint='ignored due to recursion',
+            )
+        elif variant == 'app' and not frame.in_app and all_frames_considered_in_app:
+            frame_component.update(
+                hint='frame considered in-app because no frame is in-app'
+            )
+        values.append(frame_component)
+        prev_frame = frame
+
+    return GroupingComponent(
+        id='stacktrace',
+        values=values,
+        contributes=contributes,
+        hint=hint,
+    )
diff --git a/src/sentry/grouping/strategies/stacktrace.py b/src/sentry/grouping/strategies/stacktrace.py
index 55fd41f2d2..ec04ec96e1 100644
--- a/src/sentry/grouping/strategies/stacktrace.py
+++ b/src/sentry/grouping/strategies/stacktrace.py
@@ -1,21 +1,16 @@
+# coding: utf-8
 from __future__ import absolute_import
 
 import re
-import posixpath
 
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
+from sentry.grouping.strategies.utils import replace_enclosed_string, split_func_tokens
 
 
 _ruby_anon_func = re.compile(r'_\d{2,}')
-_filename_version_re = re.compile(
-    r"""(?:
-    v?(?:\d+\.)*\d+|   # version numbers, v1, 1.0.0
-    [a-f0-9]{7,8}|     # short sha
-    [a-f0-9]{32}|      # md5
-    [a-f0-9]{40}       # sha1
-)/""", re.X | re.I
-)
+_basename_re = re.compile(r'[/\\]')
+_cpp_trailer_re = re.compile(r'(\bconst\b|&)$')
 
 # OpenJDK auto-generated classes for reflection access:
 #   sun.reflect.GeneratedSerializationConstructorAccessor123
@@ -41,6 +36,10 @@ _java_assist_enhancer_re = re.compile(r'''(\$\$_javassist)(?:_seam)?(?:_[0-9]+)?
 # Clojure anon functions are compiled down to myapp.mymodule$fn__12345
 _clojure_enhancer_re = re.compile(r'''(\$fn__)\d+''', re.X)
 
+# Native function trim re.  For now this is a simple hack until we have the
+# language hints in which will let us trim this down better.
+_native_function_trim_re = re.compile(r'^(.[^(]*)\(')
+
 # fields that need to be the same between frames for them to be considered
 # recursive calls
 RECURSION_COMPARISON_FIELDS = [
@@ -117,14 +116,9 @@ def remove_filename_outliers_v1(filename, platform):
 
     - Sometimes filename paths contain build numbers
     """
-    # On cocoa we generally only want to use the last path component as
-    # the filename.  The reason for this is that the chances are very high
-    # that full filenames contain information we do want to strip but
-    # currently can't (for instance because the information we get from
-    # the dwarf files does not contain prefix information) and that might
-    # contain things like /Users/foo/Dropbox/...
-    if platform == 'cocoa':
-        return posixpath.basename(filename), 'stripped to basename'
+    # Only use the platform independent basename for grouping and
+    # lowercase it
+    filename = _basename_re.split(filename)[-1].lower()
 
     removed = []
     if platform == 'java':
@@ -133,17 +127,61 @@ def remove_filename_outliers_v1(filename, platform):
             removed.append('javassist parts')
             filename = new_filename
 
-    new_filename = _filename_version_re.sub('<version>/', filename)
-    if new_filename != filename:
-        removed.append('version')
-        filename = new_filename
-
     if removed:
         return filename, 'removed %s' % ' and '.join(removed)
     return filename, None
 
 
-def remove_function_outliers_v1(function):
+def isolate_native_function_v1(function):
+    original_function = function
+    function = function.strip()
+
+    # Ensure we don't operated on objc functions
+    if function.startswith(('[', '+[', '-[')):
+        return function
+
+    # Chop off C++ trailers
+    while 1:
+        match = _cpp_trailer_re.search(function)
+        if match is None:
+            break
+        function = function[:match.start()].rstrip()
+
+    # Because operator<< really screws with our balancing, so let's work
+    # around that by replacing it with a character we do not observe in
+    # `split_func_tokens` or `replace_enclosed_string`.
+    function = function \
+        .replace('operator<<', u'operator⟨⟨') \
+        .replace('operator<', u'operator⟨') \
+        .replace('operator()', u'operator◯')
+
+    # Remove the arguments if there is one.
+    def process_args(value, start):
+        value = value.strip()
+        if value in ('anonymous namespace', 'operator'):
+            return '(%s)' % value
+        return ''
+    function = replace_enclosed_string(function, '(', ')', process_args)
+
+    # Resolve generic types, but special case rust which uses things like
+    # <Foo as Bar>::baz to denote traits.
+    def process_generics(value, start):
+        # Rust special case
+        if start == 0:
+            return '<%s>' % replace_enclosed_string(value, '<', '>', process_generics)
+        return '<T>'
+    function = replace_enclosed_string(function, '<', '>', process_generics)
+
+    # The last token is the function name.
+    tokens = split_func_tokens(function)
+    if tokens:
+        return tokens[-1].replace(u'⟨', '<').replace(u'◯', '()')
+
+    # This really should never happen
+    return original_function
+
+
+def remove_function_outliers_v1(function, platform):
     """
     Attempt to normalize functions by removing common platform outliers.
 
@@ -151,12 +189,19 @@ def remove_function_outliers_v1(function):
       such as in erb and the active_support library.
     - Block functions have metadata that we don't care about.
     """
-    if function.startswith('block '):
-        return 'block', 'ruby block'
-    new_function = _ruby_anon_func.sub('_<anon>', function)
-    if new_function != function:
-        return new_function, 'trimmed integer suffix'
-    return new_function, None
+    if platform == 'ruby':
+        if function.startswith('block '):
+            return 'block', 'ruby block'
+        new_function = _ruby_anon_func.sub('_<anon>', function)
+        if new_function != function:
+            return new_function, 'trimmed integer suffix'
+
+    if platform in ('objc', 'cocoa', 'native'):
+        new_function = isolate_native_function_v1(function)
+        if new_function != function:
+            return new_function, 'isolated function'
+
+    return function, None
 
 
 @strategy(
@@ -185,24 +230,15 @@ def frame_v1(frame, event, **meta):
         contributes = False
         hint = 'native code indicated by filename'
     elif frame.filename:
+        hashable_filename, hashable_filename_hint = \
+            remove_filename_outliers_v1(frame.filename, platform)
         if is_url_frame_v1(frame):
             filename_component.update(
                 contributes=False,
-                values=[frame.filename],
-                hint='ignored because filename is a URL',
-            )
-        # XXX(dcramer): dont compute hash using frames containing the 'Caused by'
-        # text as it contains an exception value which may may contain dynamic
-        # values (see raven-java#125)
-        elif frame.filename.startswith('Caused by: '):
-            filename_component.update(
-                values=[frame.filename],
-                contributes=False,
-                hint='ignored because invalid'
+                values=[hashable_filename],
+                hint='ignored because frame points to a URL',
             )
         else:
-            hashable_filename, hashable_filename_hint = \
-                remove_filename_outliers_v1(frame.filename, platform)
             filename_component.update(
                 values=[hashable_filename],
                 hint=hashable_filename_hint
@@ -229,88 +265,27 @@ def frame_v1(frame, event, **meta):
                 values=[module_name],
                 hint=module_hint
             )
-        if frame.filename:
+        if filename_component.contributes:
             filename_component.update(
-                values=[frame.filename],
                 contributes=False,
                 hint='module takes precedence'
             )
 
-    # Context line when available is the primary contributor
-    context_line_component = GroupingComponent(id='context-line')
-    if frame.context_line is not None:
-        if len(frame.context_line) > 120:
-            context_line_component.update(hint='discarded because line too long')
-        elif is_url_frame_v1(frame) and not frame.function:
-            context_line_component.update(hint='discarded because from URL origin')
-        else:
-            context_line_component.update(values=[frame.context_line])
-
-    symbol_component = GroupingComponent(id='symbol')
     function_component = GroupingComponent(id='function')
-    lineno_component = GroupingComponent(id='lineno')
-
-    # The context line grouping information is the most reliable one.
-    # If we did not manage to find some information there, we want to
-    # see if we can come up with some extra information.  We only want
-    # to do that if we managed to get a module of filename.
-    if not context_line_component.contributes and \
-       (module_component.contributes or filename_component.contributes):
-        if frame.symbol:
-            symbol_component.update(values=[frame.symbol])
-            if frame.function:
-                function_component.update(
-                    contributes=False,
-                    values=[frame.function],
-                    hint='symbol takes precedence'
-                )
-            if frame.lineno:
-                lineno_component.update(
-                    contributes=False,
-                    values=[frame.lineno],
-                    hint='symbol takes precedence'
-                )
-        elif frame.function:
-            if is_unhashable_function_v1(frame):
-                function_component.update(values=[
-                    GroupingComponent(
-                        id='salt',
-                        values=['<function>'],
-                        hint='normalized lambda function name'
-                    )
-                ])
-            else:
-                function, function_hint = remove_function_outliers_v1(frame.function)
-                function_component.update(
-                    values=[function],
-                    hint=function_hint
-                )
-            if frame.lineno:
-                lineno_component.update(
-                    contributes=False,
-                    values=[frame.lineno],
-                    hint='function takes precedence'
-                )
-        elif frame.lineno:
-            lineno_component.update(values=[frame.lineno])
-    else:
-        if frame.symbol:
-            symbol_component.update(
-                contributes=False,
-                values=[frame.symbol],
-                hint='symbol is used only if module or filename are available'
-            )
-        if frame.function:
+
+    if frame.function:
+        function, function_hint = remove_function_outliers_v1(
+            frame.function, platform)
+        if is_unhashable_function_v1(frame):
             function_component.update(
+                values=[function],
                 contributes=False,
-                values=[frame.function],
-                hint='function name is used only if module or filename are available'
+                hint='normalized lambda function name ignored'
             )
-        if frame.lineno:
-            lineno_component.update(
-                contributes=False,
-                values=[frame.lineno],
-                hint='line number is used only if module or filename are available'
+        else:
+            function_component.update(
+                values=[function],
+                hint=function_hint
             )
 
     return GroupingComponent(
@@ -318,10 +293,7 @@ def frame_v1(frame, event, **meta):
         values=[
             module_component,
             filename_component,
-            context_line_component,
-            symbol_component,
             function_component,
-            lineno_component,
         ],
         contributes=contributes,
         hint=hint,
@@ -336,32 +308,9 @@ def frame_v1(frame, event, **meta):
 )
 def stacktrace_v1(stacktrace, config, variant, **meta):
     frames = stacktrace.frames
-    contributes = None
     hint = None
     all_frames_considered_in_app = False
 
-    # TODO(dcramer): this should apply only to platform=javascript
-    # Browser JS will often throw errors (from inlined code in an HTML page)
-    # which contain only a single frame, no function name, and have the HTML
-    # document as the filename. In this case the hash is often not usable as
-    # the context cannot be trusted and the URL is dynamic (this also means
-    # the line number cannot be trusted).
-    if (len(frames) == 1 and not frames[0].function and frames[0].is_url()):
-        contributes = False
-        hint = 'ignored single frame stack'
-    elif variant == 'app':
-        total_frames = len(frames)
-        in_app_count = sum(1 if f.in_app else 0 for f in frames)
-        if in_app_count == 0:
-            in_app_count = total_frames
-            all_frames_considered_in_app = True
-
-        # if app frames make up less than 10% of the stacktrace discard
-        # the hash as invalid
-        if total_frames > 0 and in_app_count / float(total_frames) < 0.10:
-            contributes = False
-            hint = 'less than 10% of frames are in-app'
-
     values = []
     prev_frame = None
     for frame in frames:
@@ -386,6 +335,5 @@ def stacktrace_v1(stacktrace, config, variant, **meta):
     return GroupingComponent(
         id='stacktrace',
         values=values,
-        contributes=contributes,
         hint=hint,
     )
diff --git a/src/sentry/grouping/strategies/utils.py b/src/sentry/grouping/strategies/utils.py
new file mode 100644
index 0000000000..f2005190c9
--- /dev/null
+++ b/src/sentry/grouping/strategies/utils.py
@@ -0,0 +1,64 @@
+from __future__ import absolute_import
+
+PAIRS = {
+    '(': ')',
+    '{': '}',
+    '[': ']',
+    '<': '>',
+}
+
+
+def replace_enclosed_string(s, start, end, replacement=None):
+    if start not in s:
+        return s
+
+    depth = 0
+
+    rv = []
+    pair_start = None
+    for idx, char in enumerate(s):
+        if char == start:
+            if depth == 0:
+                pair_start = idx
+            depth += 1
+        elif char == end:
+            depth -= 1
+            if depth == 0:
+                if replacement is not None:
+                    if callable(replacement):
+                        rv.append(replacement(s[pair_start + 1:idx], pair_start))
+                    else:
+                        rv.append(replacement)
+        elif depth == 0:
+            rv.append(char)
+
+    return ''.join(rv)
+
+
+def split_func_tokens(s):
+    buf = []
+    rv = []
+    stack = []
+    end = 0
+
+    for idx, char in enumerate(s):
+        if char in PAIRS:
+            stack.append(PAIRS[char])
+        elif stack and char == stack[-1]:
+            stack.pop()
+            if not stack:
+                buf.append(s[end:idx + 1])
+                end = idx + 1
+        elif not stack:
+            if char.isspace():
+                if buf:
+                    rv.append(buf)
+                buf = []
+            else:
+                buf.append(s[end:idx + 1])
+            end = idx + 1
+
+    if buf:
+        rv.append(buf)
+
+    return [''.join(x) for x in rv]
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/actix.json b/tests/sentry/grouping/inputs/actix.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/actix.json
rename to tests/sentry/grouping/inputs/actix.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/aspnetcore.json b/tests/sentry/grouping/inputs/aspnetcore.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/aspnetcore.json
rename to tests/sentry/grouping/inputs/aspnetcore.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/connection-error.json b/tests/sentry/grouping/inputs/connection-error.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/connection-error.json
rename to tests/sentry/grouping/inputs/connection-error.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-img-src.json b/tests/sentry/grouping/inputs/csp-img-src.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-img-src.json
rename to tests/sentry/grouping/inputs/csp-img-src.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-no-blocked-uri.json b/tests/sentry/grouping/inputs/csp-no-blocked-uri.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-no-blocked-uri.json
rename to tests/sentry/grouping/inputs/csp-no-blocked-uri.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-script-data-uri.json b/tests/sentry/grouping/inputs/csp-script-data-uri.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-script-data-uri.json
rename to tests/sentry/grouping/inputs/csp-script-data-uri.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-script-src-uri.json b/tests/sentry/grouping/inputs/csp-script-src-uri.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-script-src-uri.json
rename to tests/sentry/grouping/inputs/csp-script-src-uri.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp-style-src-elem.json b/tests/sentry/grouping/inputs/csp-style-src-elem.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp-style-src-elem.json
rename to tests/sentry/grouping/inputs/csp-style-src-elem.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/csp.json b/tests/sentry/grouping/inputs/csp.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/csp.json
rename to tests/sentry/grouping/inputs/csp.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/custom-fingerprint.json b/tests/sentry/grouping/inputs/custom-fingerprint.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/custom-fingerprint.json
rename to tests/sentry/grouping/inputs/custom-fingerprint.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/empty.json b/tests/sentry/grouping/inputs/empty.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/empty.json
rename to tests/sentry/grouping/inputs/empty.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/empty.out b/tests/sentry/grouping/inputs/empty.out
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/empty.out
rename to tests/sentry/grouping/inputs/empty.out
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-comput-hashes.json b/tests/sentry/grouping/inputs/exception-comput-hashes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-comput-hashes.json
rename to tests/sentry/grouping/inputs/exception-comput-hashes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes-2.json b/tests/sentry/grouping/inputs/exception-compute-hashes-2.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes-2.json
rename to tests/sentry/grouping/inputs/exception-compute-hashes-2.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes-3.json b/tests/sentry/grouping/inputs/exception-compute-hashes-3.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes-3.json
rename to tests/sentry/grouping/inputs/exception-compute-hashes-3.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes.json b/tests/sentry/grouping/inputs/exception-compute-hashes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-compute-hashes.json
rename to tests/sentry/grouping/inputs/exception-compute-hashes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-without-type.json b/tests/sentry/grouping/inputs/exception-without-type.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-without-type.json
rename to tests/sentry/grouping/inputs/exception-without-type.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/exception-without-value.json b/tests/sentry/grouping/inputs/exception-without-value.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/exception-without-value.json
rename to tests/sentry/grouping/inputs/exception-without-value.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/expectct.json b/tests/sentry/grouping/inputs/expectct.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/expectct.json
rename to tests/sentry/grouping/inputs/expectct.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json b/tests/sentry/grouping/inputs/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json
rename to tests/sentry/grouping/inputs/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-ENHANCED-spring-classes.json b/tests/sentry/grouping/inputs/frame-ignores-ENHANCED-spring-classes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-ENHANCED-spring-classes.json
rename to tests/sentry/grouping/inputs/frame-ignores-ENHANCED-spring-classes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-extra-ENHANCED-clojure-classes.json b/tests/sentry/grouping/inputs/frame-ignores-extra-ENHANCED-clojure-classes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-extra-ENHANCED-clojure-classes.json
rename to tests/sentry/grouping/inputs/frame-ignores-extra-ENHANCED-clojure-classes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-extra-ENHANCED-spring-classes.json b/tests/sentry/grouping/inputs/frame-ignores-extra-ENHANCED-spring-classes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-extra-ENHANCED-spring-classes.json
rename to tests/sentry/grouping/inputs/frame-ignores-extra-ENHANCED-spring-classes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-abs-path-is-http.json b/tests/sentry/grouping/inputs/frame-ignores-filename-if-abs-path-is-http.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-abs-path-is-http.json
rename to tests/sentry/grouping/inputs/frame-ignores-filename-if-abs-path-is-http.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-blob.json b/tests/sentry/grouping/inputs/frame-ignores-filename-if-blob.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-blob.json
rename to tests/sentry/grouping/inputs/frame-ignores-filename-if-blob.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-http.json b/tests/sentry/grouping/inputs/frame-ignores-filename-if-http.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-http.json
rename to tests/sentry/grouping/inputs/frame-ignores-filename-if-http.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-https.json b/tests/sentry/grouping/inputs/frame-ignores-filename-if-https.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-filename-if-https.json
rename to tests/sentry/grouping/inputs/frame-ignores-filename-if-https.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-java8-lambda-function.json b/tests/sentry/grouping/inputs/frame-ignores-java8-lambda-function.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-java8-lambda-function.json
rename to tests/sentry/grouping/inputs/frame-ignores-java8-lambda-function.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-java8-lambda-module.json b/tests/sentry/grouping/inputs/frame-ignores-java8-lambda-module.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-java8-lambda-module.json
rename to tests/sentry/grouping/inputs/frame-ignores-java8-lambda-module.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist-2.json b/tests/sentry/grouping/inputs/frame-ignores-javassist-2.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist-2.json
rename to tests/sentry/grouping/inputs/frame-ignores-javassist-2.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist-3.json b/tests/sentry/grouping/inputs/frame-ignores-javassist-3.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist-3.json
rename to tests/sentry/grouping/inputs/frame-ignores-javassist-3.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist.json b/tests/sentry/grouping/inputs/frame-ignores-javassist.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-javassist.json
rename to tests/sentry/grouping/inputs/frame-ignores-javassist.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-module-if-page-url-2.json b/tests/sentry/grouping/inputs/frame-ignores-module-if-page-url-2.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-module-if-page-url-2.json
rename to tests/sentry/grouping/inputs/frame-ignores-module-if-page-url-2.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-module-if-page-url.json b/tests/sentry/grouping/inputs/frame-ignores-module-if-page-url.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-module-if-page-url.json
rename to tests/sentry/grouping/inputs/frame-ignores-module-if-page-url.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-safari-native-code.json b/tests/sentry/grouping/inputs/frame-ignores-safari-native-code.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-safari-native-code.json
rename to tests/sentry/grouping/inputs/frame-ignores-safari-native-code.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-constructors-2.json b/tests/sentry/grouping/inputs/frame-ignores-sun-java-generated-constructors-2.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-constructors-2.json
rename to tests/sentry/grouping/inputs/frame-ignores-sun-java-generated-constructors-2.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-constructors.json b/tests/sentry/grouping/inputs/frame-ignores-sun-java-generated-constructors.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-constructors.json
rename to tests/sentry/grouping/inputs/frame-ignores-sun-java-generated-constructors.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-methods.json b/tests/sentry/grouping/inputs/frame-ignores-sun-java-generated-methods.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-ignores-sun-java-generated-methods.json
rename to tests/sentry/grouping/inputs/frame-ignores-sun-java-generated-methods.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-block-functions.json b/tests/sentry/grouping/inputs/frame-sanitizes-block-functions.json
similarity index 89%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-block-functions.json
rename to tests/sentry/grouping/inputs/frame-sanitizes-block-functions.json
index 88ad4c3cdd..2f8e4ed080 100644
--- a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-block-functions.json
+++ b/tests/sentry/grouping/inputs/frame-sanitizes-block-functions.json
@@ -1,4 +1,5 @@
 {
+  "platform": "ruby",
   "stacktrace": {
     "frames": [
       {
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-erb-templates.json b/tests/sentry/grouping/inputs/frame-sanitizes-erb-templates.json
similarity index 90%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-erb-templates.json
rename to tests/sentry/grouping/inputs/frame-sanitizes-erb-templates.json
index 7a46d553fe..0bb2efe944 100644
--- a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-erb-templates.json
+++ b/tests/sentry/grouping/inputs/frame-sanitizes-erb-templates.json
@@ -1,4 +1,5 @@
 {
+  "platform": "ruby",
   "stacktrace": {
     "frames": [
       {
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-versioned-filenames-2.json b/tests/sentry/grouping/inputs/frame-sanitizes-versioned-filenames-2.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-versioned-filenames-2.json
rename to tests/sentry/grouping/inputs/frame-sanitizes-versioned-filenames-2.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-versioned-filenames.json b/tests/sentry/grouping/inputs/frame-sanitizes-versioned-filenames.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-sanitizes-versioned-filenames.json
rename to tests/sentry/grouping/inputs/frame-sanitizes-versioned-filenames.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-skips-symbol-if-unknown.json b/tests/sentry/grouping/inputs/frame-skips-symbol-if-unknown.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-skips-symbol-if-unknown.json
rename to tests/sentry/grouping/inputs/frame-skips-symbol-if-unknown.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-context-line-over-function.json b/tests/sentry/grouping/inputs/frame-uses-context-line-over-function.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-context-line-over-function.json
rename to tests/sentry/grouping/inputs/frame-uses-context-line-over-function.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-function-over-lineno.json b/tests/sentry/grouping/inputs/frame-uses-function-over-lineno.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-function-over-lineno.json
rename to tests/sentry/grouping/inputs/frame-uses-function-over-lineno.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-module-over-filename.json b/tests/sentry/grouping/inputs/frame-uses-module-over-filename.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-module-over-filename.json
rename to tests/sentry/grouping/inputs/frame-uses-module-over-filename.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-symbol-instead-of-function.json b/tests/sentry/grouping/inputs/frame-uses-symbol-instead-of-function.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-uses-symbol-instead-of-function.json
rename to tests/sentry/grouping/inputs/frame-uses-symbol-instead-of-function.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/frame-with-only-required-vars.json b/tests/sentry/grouping/inputs/frame-with-only-required-vars.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/frame-with-only-required-vars.json
rename to tests/sentry/grouping/inputs/frame-with-only-required-vars.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/hpkp.json b/tests/sentry/grouping/inputs/hpkp.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/hpkp.json
rename to tests/sentry/grouping/inputs/hpkp.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/java-chained.json b/tests/sentry/grouping/inputs/java-chained.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/java-chained.json
rename to tests/sentry/grouping/inputs/java-chained.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/java-minimal.json b/tests/sentry/grouping/inputs/java-minimal.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/java-minimal.json
rename to tests/sentry/grouping/inputs/java-minimal.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/javascript-exception-no-in-app.json b/tests/sentry/grouping/inputs/javascript-exception-no-in-app.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/javascript-exception-no-in-app.json
rename to tests/sentry/grouping/inputs/javascript-exception-no-in-app.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/javascript-message.json b/tests/sentry/grouping/inputs/javascript-message.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/javascript-message.json
rename to tests/sentry/grouping/inputs/javascript-message.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/laravel.json b/tests/sentry/grouping/inputs/laravel.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/laravel.json
rename to tests/sentry/grouping/inputs/laravel.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/logentry-prefers-message.json b/tests/sentry/grouping/inputs/logentry-prefers-message.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/logentry-prefers-message.json
rename to tests/sentry/grouping/inputs/logentry-prefers-message.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/logentry-uses-formatted.json b/tests/sentry/grouping/inputs/logentry-uses-formatted.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/logentry-uses-formatted.json
rename to tests/sentry/grouping/inputs/logentry-uses-formatted.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/message-prefers-message.json b/tests/sentry/grouping/inputs/message-prefers-message.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/message-prefers-message.json
rename to tests/sentry/grouping/inputs/message-prefers-message.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/message-uses-formatted.json b/tests/sentry/grouping/inputs/message-uses-formatted.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/message-uses-formatted.json
rename to tests/sentry/grouping/inputs/message-uses-formatted.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/minified-javascript.json b/tests/sentry/grouping/inputs/minified-javascript.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/minified-javascript.json
rename to tests/sentry/grouping/inputs/minified-javascript.json
diff --git a/tests/sentry/grouping/inputs/native-complex-function-names.json b/tests/sentry/grouping/inputs/native-complex-function-names.json
new file mode 100644
index 0000000000..ccd8aee47d
--- /dev/null
+++ b/tests/sentry/grouping/inputs/native-complex-function-names.json
@@ -0,0 +1,31 @@
+{
+  "event_id": "3db43a42ec244bc99f88602d36eeda82",
+  "platform": "native",
+  "logger": "log_demo",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)",
+              "instruction_addr": "0x10918cd81",
+              "in_app": false
+            },
+            {
+              "function": "Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)",
+              "instruction_addr": "0x10918cd81",
+              "in_app": false
+            }
+          ]
+        },
+        "type": "log_demo",
+        "value": "Holy shit everything is on fire!"
+      }
+    ]
+  },
+  "release": "sentry@0.13.0"
+}
diff --git a/tests/sentry/grouping/inputs/native-no-filenames.json b/tests/sentry/grouping/inputs/native-no-filenames.json
new file mode 100644
index 0000000000..83faf4f3ea
--- /dev/null
+++ b/tests/sentry/grouping/inputs/native-no-filenames.json
@@ -0,0 +1,92 @@
+{
+  "culprit": "log::__private_api_log",
+  "event_id": "3db43a42ec244bc99f88602d36eeda82",
+  "environment": "debug",
+  "platform": "native",
+  "logger": "log_demo",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "_main",
+              "instruction_addr": "0x10918cd81",
+              "in_app": true
+            },
+            {
+              "function": "std::rt::lang_start",
+              "package": "std",
+              "in_app": false,
+              "instruction_addr": "0x10918d0c1"
+            },
+            {
+              "function": "std::rt::lang_start_internal",
+              "package": "std",
+              "in_app": false,
+              "instruction_addr": "0x10959147a"
+            },
+            {
+              "function": "___rust_maybe_catch_panic",
+              "in_app": true,
+              "instruction_addr": "0x10959ebfe"
+            },
+            {
+              "function": "std::panicking::try::do_call",
+              "package": "std",
+              "in_app": false,
+              "instruction_addr": "0x109590a27"
+            },
+            {
+              "function": "std::rt::lang_start::{{closure}}",
+              "package": "std",
+              "in_app": false,
+              "instruction_addr": "0x10918d0e1"
+            },
+            {
+              "function": "log_demo::main",
+              "package": "log_demo",
+              "in_app": true,
+              "instruction_addr": "0x10918ccc6"
+            },
+            {
+              "function": "log::__private_api_log",
+              "package": "log",
+              "in_app": true,
+              "instruction_addr": "0x10957e164"
+            },
+            {
+              "function": "<sentry::integrations::log::Logger as log::Log>::log",
+              "in_app": false,
+              "instruction_addr": "0x1091ab42c"
+            },
+            {
+              "function": "sentry::hub::Hub::with_active",
+              "package": "sentry",
+              "in_app": false,
+              "instruction_addr": "0x109225cf3"
+            },
+            {
+              "function": "sentry::hub::Hub::with",
+              "package": "sentry",
+              "in_app": false,
+              "instruction_addr": "0x10922489b"
+            },
+            {
+              "function": "sentry::hub::Hub::with_active::{{closure}}",
+              "package": "sentry",
+              "in_app": false,
+              "instruction_addr": "0x109225f53"
+            }
+          ]
+        },
+        "type": "log_demo",
+        "value": "Holy shit everything is on fire!"
+      }
+    ]
+  },
+  "release": "sentry@0.13.0"
+}
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/node-exception-weird.json b/tests/sentry/grouping/inputs/node-exception-weird.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/node-exception-weird.json
rename to tests/sentry/grouping/inputs/node-exception-weird.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/python-exception-base.json b/tests/sentry/grouping/inputs/python-exception-base.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/python-exception-base.json
rename to tests/sentry/grouping/inputs/python-exception-base.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/python-http-error.json b/tests/sentry/grouping/inputs/python-http-error.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/python-http-error.json
rename to tests/sentry/grouping/inputs/python-http-error.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/react-native.json b/tests/sentry/grouping/inputs/react-native.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/react-native.json
rename to tests/sentry/grouping/inputs/react-native.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-cocoa.json b/tests/sentry/grouping/inputs/stacktrace-cocoa.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-cocoa.json
rename to tests/sentry/grouping/inputs/stacktrace-cocoa.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-collapse-recursion.json b/tests/sentry/grouping/inputs/stacktrace-collapse-recursion.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-collapse-recursion.json
rename to tests/sentry/grouping/inputs/stacktrace-collapse-recursion.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-compute-hashes.json b/tests/sentry/grouping/inputs/stacktrace-compute-hashes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-compute-hashes.json
rename to tests/sentry/grouping/inputs/stacktrace-compute-hashes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-discards-seemingly-useless-stack.json b/tests/sentry/grouping/inputs/stacktrace-discards-seemingly-useless-stack.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-discards-seemingly-useless-stack.json
rename to tests/sentry/grouping/inputs/stacktrace-discards-seemingly-useless-stack.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-does-not-discard-non-urls.json b/tests/sentry/grouping/inputs/stacktrace-does-not-discard-non-urls.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-does-not-discard-non-urls.json
rename to tests/sentry/grouping/inputs/stacktrace-does-not-discard-non-urls.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-does-not-group-different-js-errors.json b/tests/sentry/grouping/inputs/stacktrace-does-not-group-different-js-errors.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-does-not-group-different-js-errors.json
rename to tests/sentry/grouping/inputs/stacktrace-does-not-group-different-js-errors.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-excludes-single-frame-urls.json b/tests/sentry/grouping/inputs/stacktrace-excludes-single-frame-urls.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-excludes-single-frame-urls.json
rename to tests/sentry/grouping/inputs/stacktrace-excludes-single-frame-urls.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-hash-without-system-frames.json b/tests/sentry/grouping/inputs/stacktrace-hash-without-system-frames.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-hash-without-system-frames.json
rename to tests/sentry/grouping/inputs/stacktrace-hash-without-system-frames.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-ignores-singular-anonymous-frame.json b/tests/sentry/grouping/inputs/stacktrace-ignores-singular-anonymous-frame.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-ignores-singular-anonymous-frame.json
rename to tests/sentry/grouping/inputs/stacktrace-ignores-singular-anonymous-frame.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-with-minimal-app-frames.json b/tests/sentry/grouping/inputs/stacktrace-with-minimal-app-frames.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/stacktrace-with-minimal-app-frames.json
rename to tests/sentry/grouping/inputs/stacktrace-with-minimal-app-frames.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/template-compute-hashes.json b/tests/sentry/grouping/inputs/template-compute-hashes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/template-compute-hashes.json
rename to tests/sentry/grouping/inputs/template-compute-hashes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/threads-compute-hashes.json b/tests/sentry/grouping/inputs/threads-compute-hashes.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/threads-compute-hashes.json
rename to tests/sentry/grouping/inputs/threads-compute-hashes.json
diff --git a/tests/sentry/grouping/configs/legacy:2019-03-12/threads-no-hash.json b/tests/sentry/grouping/inputs/threads-no-hash.json
similarity index 100%
rename from tests/sentry/grouping/configs/legacy:2019-03-12/threads-no-hash.json
rename to tests/sentry/grouping/inputs/threads-no-hash.json
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_complex_function_names.pysnap
new file mode 100644
index 0000000000..672d5fc025
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_complex_function_names.pysnap
@@ -0,0 +1,38 @@
+---
+created: '2019-03-16T14:31:51.256670Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)'
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '3e0ae2ce25cce2fca3390f3416e6a82a'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)'
+          frame
+            function (function name is used only if module or filename are available)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_no_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_no_filenames.pysnap
new file mode 100644
index 0000000000..cc21056cbc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_no_filenames.pysnap
@@ -0,0 +1,98 @@
+---
+created: '2019-03-15T10:52:06.260025Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame
+            function (function name is used only if module or filename are available)
+              u'_main'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start_internal'
+          frame
+            function (function name is used only if module or filename are available)
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start::{{closure}}'
+          frame
+            function (function name is used only if module or filename are available)
+              u'log_demo::main'
+          frame
+            function (function name is used only if module or filename are available)
+              u'log::__private_api_log'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'sentry::hub::Hub::with'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '3e0ae2ce25cce2fca3390f3416e6a82a'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            function (function name is used only if module or filename are available)
+              u'_main'
+          frame
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start'
+          frame
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start_internal'
+          frame
+            function (function name is used only if module or filename are available)
+              u'___rust_maybe_catch_panic'
+          frame
+            function (function name is used only if module or filename are available)
+              u'std::panicking::try::do_call'
+          frame
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start::{{closure}}'
+          frame
+            function (function name is used only if module or filename are available)
+              u'log_demo::main'
+          frame
+            function (function name is used only if module or filename are available)
+              u'log::__private_api_log'
+          frame
+            function (function name is used only if module or filename are available)
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame
+            function (function name is used only if module or filename are available)
+              u'sentry::hub::Hub::with_active'
+          frame
+            function (function name is used only if module or filename are available)
+              u'sentry::hub::Hub::with'
+          frame
+            function (function name is used only if module or filename are available)
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/actix.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/actix.pysnap
new file mode 100644
index 0000000000..df449f9e4d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/actix.pysnap
@@ -0,0 +1,784 @@
+---
+created: '2019-03-16T14:31:51.433316Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '3abe7858e37e8eb76c484efa7c7ba121'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'__pthread_start'
+          frame*
+            function*
+              u'__pthread_body'
+          frame (non app frame)
+            filename*
+              u'thread.rs'
+            function*
+              u'std::sys::unix::thread::Thread::new::thread_start'
+          frame*
+            filename*
+              u'boxed.rs'
+            function* (isolated function)
+              u'<F as alloc::boxed::FnBox<T>>::call_box'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::catch_unwind'
+          frame (non app frame)
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            filename*
+              u'panic.rs'
+            function* (isolated function)
+              u'<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'backtrace.rs'
+            function*
+              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
+          frame*
+            filename*
+              u'arbiter.rs'
+            function*
+              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Entered<T>>::block_on'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Entered<T>>::tick'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::CurrentRunner::set_spawn'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduled<T>>::tick'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_fn_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::std::set'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function* (isolated function)
+              u'<alloc::boxed::Box<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'then.rs'
+            function* (isolated function)
+              u'<futures::future::then::Then<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'chain.rs'
+            function* (isolated function)
+              u'<futures::future::chain::Chain<T>>::poll'
+          frame*
+            filename*
+              u'either.rs'
+            function* (isolated function)
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame (ignored due to recursion)
+            filename*
+              u'either.rs'
+            function* (isolated function)
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'acceptor.rs'
+            function*
+              u'<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'and_then.rs'
+            function* (isolated function)
+              u'<actix_net::service::and_then::AndThenFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'map_err.rs'
+            function* (isolated function)
+              u'<actix_net::service::map_err::MapErrFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function* (isolated function)
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function* (isolated function)
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_handler'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_io'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::parse'
+          frame*
+            filename*
+              u'pipeline.rs'
+            function* (isolated function)
+              u'<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io'
+          frame*
+            filename*
+              u'<::log::macros::log macros>'
+            function* (isolated function)
+              u'<actix_web::pipeline::ProcessResponse<T>>::poll_io'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'log::__private_api_log'
+          frame (non app frame)
+            filename*
+              u'log.rs'
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'actix_web::pipeline'
+--------------------------------------------------------------------------
+system:
+  hash: '7f12fecf89ac9e64cdfa36b08e634681'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'__pthread_start'
+          frame*
+            function*
+              u'__pthread_body'
+          frame*
+            filename*
+              u'thread.rs'
+            function*
+              u'std::sys::unix::thread::Thread::new::thread_start'
+          frame*
+            filename*
+              u'boxed.rs'
+            function* (isolated function)
+              u'<F as alloc::boxed::FnBox<T>>::call_box'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}'
+          frame*
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::catch_unwind'
+          frame*
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            filename*
+              u'panic.rs'
+            function* (isolated function)
+              u'<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'backtrace.rs'
+            function*
+              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
+          frame*
+            filename*
+              u'arbiter.rs'
+            function*
+              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Entered<T>>::block_on'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Entered<T>>::tick'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::CurrentRunner::set_spawn'
+          frame*
+            filename*
+              u'lib.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function* (isolated function)
+              u'<tokio_current_thread::scheduler::Scheduled<T>>::tick'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_fn_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::std::set'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function* (isolated function)
+              u'<alloc::boxed::Box<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'then.rs'
+            function* (isolated function)
+              u'<futures::future::then::Then<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'chain.rs'
+            function* (isolated function)
+              u'<futures::future::chain::Chain<T>>::poll'
+          frame*
+            filename*
+              u'either.rs'
+            function* (isolated function)
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame (ignored due to recursion)
+            filename*
+              u'either.rs'
+            function* (isolated function)
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'acceptor.rs'
+            function*
+              u'<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'and_then.rs'
+            function* (isolated function)
+              u'<actix_net::service::and_then::AndThenFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'map_err.rs'
+            function* (isolated function)
+              u'<actix_net::service::map_err::MapErrFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function* (isolated function)
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function* (isolated function)
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_handler'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_io'
+          frame*
+            filename*
+              u'h1.rs'
+            function* (isolated function)
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::parse'
+          frame*
+            filename*
+              u'pipeline.rs'
+            function* (isolated function)
+              u'<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io'
+          frame*
+            filename*
+              u'<::log::macros::log macros>'
+            function* (isolated function)
+              u'<actix_web::pipeline::ProcessResponse<T>>::poll_io'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'log::__private_api_log'
+          frame*
+            filename*
+              u'log.rs'
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with::{{closure}}'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'actix_web::pipeline'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/aspnetcore.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/aspnetcore.pysnap
new file mode 100644
index 0000000000..46a06fc1a5
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/aspnetcore.pysnap
@@ -0,0 +1,343 @@
+---
+created: '2019-03-15T18:36:59.292407Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '228c649a3aa0901622c0a0e66ab0522c'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeAsync'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeFilterPipelineAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Next'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Rethrow'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeNextResourceFilter'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeInnerFilterAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Next'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Rethrow'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeNextActionFilterAsync'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeActionMethodAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor'
+            function*
+              u'Execute'
+          frame (non app frame)
+            module*
+              u'Microsoft.Extensions.Internal.ObjectMethodExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'(unknown)'
+            function*
+              u'lambda_method'
+          frame*
+            module*
+              u'SentryTest2.Controllers.ValuesController'
+            filename (module takes precedence)
+              u'valuescontroller.cs'
+            function*
+              u'Get'
+        type*
+          u'System.Exception'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'An unhandled exception has occurred while executing the request.'
+--------------------------------------------------------------------------
+system:
+  hash: '4ccd0f1953483581ba360c7518f90332'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeAsync'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeFilterPipelineAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Next'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Rethrow'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeNextResourceFilter'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeInnerFilterAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Next'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Rethrow'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeNextActionFilterAsync'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeActionMethodAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'Microsoft.Extensions.Internal.ObjectMethodExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'(unknown)'
+            function*
+              u'lambda_method'
+          frame*
+            module*
+              u'SentryTest2.Controllers.ValuesController'
+            filename (module takes precedence)
+              u'valuescontroller.cs'
+            function*
+              u'Get'
+        type*
+          u'System.Exception'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/connection_error.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/connection_error.pysnap
new file mode 100644
index 0000000000..710bdbffe0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/connection_error.pysnap
@@ -0,0 +1,183 @@
+---
+created: '2019-03-15T18:36:59.302474Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'a3bcd79525a31922367598b0e6b6fda4'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+          frame*
+            module*
+              u'sentry.utils.services'
+            filename (module takes precedence)
+              u'services.py'
+            function*
+              u'<lambda>'
+          frame*
+            module*
+              u'getsentry.quotas'
+            filename (module takes precedence)
+              u'quotas.py'
+            function*
+              u'is_rate_limited'
+          frame*
+            module*
+              u'sentry.quotas.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'is_rate_limited'
+          frame*
+            module*
+              u'sentry.utils.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'call_script'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'__call__'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'evalsha'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'execute_command'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'parse_response'
+          frame (non app frame)
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+          frame (non app frame)
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+        type*
+          u'ConnectionError'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'%s.process_error'
+--------------------------------------------------------------------------
+system:
+  hash: '011c0e7a2decebaeb1897a7f08baeb1a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+          frame*
+            module*
+              u'sentry.utils.services'
+            filename (module takes precedence)
+              u'services.py'
+            function*
+              u'<lambda>'
+          frame*
+            module*
+              u'getsentry.quotas'
+            filename (module takes precedence)
+              u'quotas.py'
+            function*
+              u'is_rate_limited'
+          frame*
+            module*
+              u'sentry.quotas.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'is_rate_limited'
+          frame*
+            module*
+              u'sentry.utils.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'call_script'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'__call__'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'evalsha'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'execute_command'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'parse_response'
+          frame*
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+          frame*
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+        type*
+          u'ConnectionError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp.pysnap
new file mode 100644
index 0000000000..51432d1064
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-03-15T11:58:32.710283Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '666766514295bb52812324097cdaf53e'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'YYY'
+      message (csp takes precedence)
+        u"Blocked 'script' from 'YYY'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_img_src.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_img_src.pysnap
new file mode 100644
index 0000000000..8b86b08699
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_img_src.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-03-15T11:58:32.717281Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '1742101e08eb1608f569751dfedd0062'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'ftp://example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_no_blocked_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_no_blocked_uri.pysnap
new file mode 100644
index 0000000000..0c1d0775fe
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_no_blocked_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-03-15T11:58:32.723860Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: 'efddf1cde918097259aa7d4904fb1942'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          "'self'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_script_data_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_script_data_uri.pysnap
new file mode 100644
index 0000000000..412d5f7f33
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_script_data_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-03-15T11:58:32.730957Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '4e6f2bce9d121aa89f4dc5e5da08afb5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'data:'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_script_src_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_script_src_uri.pysnap
new file mode 100644
index 0000000000..39dae7e9f7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_script_src_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-03-15T11:58:32.738703Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '223cdacfe5b4b830dc700b5c18cc21b4'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_style_src_elem.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_style_src_elem.pysnap
new file mode 100644
index 0000000000..05d1494994
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/csp_style_src_elem.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-03-15T11:58:32.746086Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '537a973f594c364842893e9a72af62a5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'style-src-elem'
+        violation (not a local script violation)
+        uri*
+          u'use.fontawesome.com'
+      message (csp takes precedence)
+        u"Blocked 'style' from 'use.fontawesome.com'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/custom_fingerprint.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/custom_fingerprint.pysnap
new file mode 100644
index 0000000000..a0d66a4a7e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/custom_fingerprint.pysnap
@@ -0,0 +1,8 @@
+---
+created: '2019-03-15T11:58:32.754266Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+custom-fingerprint:
+  hash: 'f30afa00b85f5cac5ee0bce01b31f08d'
+  values: [u'celery', u'SoftTimeLimitExceeded', u'sentry.tasks.store.process_event']
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/empty.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/empty.pysnap
new file mode 100644
index 0000000000..de8fee2e19
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/empty.pysnap
@@ -0,0 +1,7 @@
+---
+created: '2019-03-15T11:58:32.761027Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_comput_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_comput_hashes.pysnap
new file mode 100644
index 0000000000..5fca46d60e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_comput_hashes.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-03-15T11:58:32.781427Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '5a2cfd89b7b171fd7b4794b08023d04f'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes.pysnap
new file mode 100644
index 0000000000..3319952631
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-03-15T11:58:32.789150Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '9509e122c6175606d52862fa4f64853c'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes_2.pysnap
new file mode 100644
index 0000000000..805a60163b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes_2.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-03-15T11:58:32.796674Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '9509e122c6175606d52862fa4f64853c'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes_3.pysnap
new file mode 100644
index 0000000000..c9190a12c6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_compute_hashes_3.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-03-15T11:58:32.805460Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      chained-exception (ignored because hash matches system variant)
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '669cb6664e0f5fed38665da04e464f7e'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_without_type.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_without_type.pysnap
new file mode 100644
index 0000000000..31a6d644f8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_without_type.pysnap
@@ -0,0 +1,19 @@
+---
+created: '2019-03-15T11:58:32.812943Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      exception
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      exception
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_without_value.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_without_value.pysnap
new file mode 100644
index 0000000000..be228244f0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/exception_without_value.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-03-15T11:58:32.820167Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '5a2cfd89b7b171fd7b4794b08023d04f'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/expectct.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/expectct.pysnap
new file mode 100644
index 0000000000..925196d061
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/expectct.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-03-15T11:58:32.827837Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '3d2933f4b5ec459ec8d569a398fd328c'
+  component:
+    default*
+      expect-ct*
+        salt* (a static salt)
+          'expect-ct'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
new file mode 100644
index 0000000000..95ace86873
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:32.850844Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '526b64456c48836a46ec1a89544fd412'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_ENHANCED_spring_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_ENHANCED_spring_classes.pysnap
new file mode 100644
index 0000000000..8855a39818
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_ENHANCED_spring_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:32.858492Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: '45c0b0a8c777e7a7040d7c39233a08a5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_extra_ENHANCED_clojure_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
new file mode 100644
index 0000000000..e98010a647
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:32.866529Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '353e05904b48bd3ae4fa9623934a70d0'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_extra_ENHANCED_spring_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_extra_ENHANCED_spring_classes.pysnap
new file mode 100644
index 0000000000..a7f86dedab
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_extra_ENHANCED_spring_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:32.874891Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: 'be15ca3d511b96918e087c4f42503ca2'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_abs_path_is_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_abs_path_is_http.pysnap
new file mode 100644
index 0000000000..28f86b5bc1
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_abs_path_is_http.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-16T15:38:20.671804Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_blob.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_blob.pysnap
new file mode 100644
index 0000000000..c18d11178a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_blob.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-03-16T15:38:20.680003Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_http.pysnap
new file mode 100644
index 0000000000..28260f65fe
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_http.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-16T15:38:20.688269Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_https.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_https.pysnap
new file mode 100644
index 0000000000..3c7c82d8db
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_filename_if_https.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-16T15:38:20.696133Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_function.pysnap
new file mode 100644
index 0000000000..bd815060fa
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T18:36:59.667498Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo.bar.Baz'
+          function (normalized lambda function name ignored)
+            u'lambda$work$1'
+--------------------------------------------------------------------------
+system:
+  hash: 'be7f1b8b4014de623c533a8218dba5bd'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo.bar.Baz'
+          function (normalized lambda function name ignored)
+            u'lambda$work$1'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_module.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_module.pysnap
new file mode 100644
index 0000000000..e60c2f9db7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_module.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-03-15T11:58:32.934180Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (ignored module)
+            salt* (normalized generated module name)
+              '<module>'
+          function*
+            u'call'
+--------------------------------------------------------------------------
+system:
+  hash: '5fd1358271b3a3dba3287e135029688d'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (ignored module)
+            salt* (normalized generated module name)
+              '<module>'
+          function*
+            u'call'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist.pysnap
new file mode 100644
index 0000000000..b94a0fffb2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:32.942554Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_2.pysnap
new file mode 100644
index 0000000000..cb51dbffba
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_2.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:32.950378Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_3.pysnap
new file mode 100644
index 0000000000..6ff8995386
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_3.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:32.958103Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename* (removed javassist parts)
+            u'entriesresource_$$_javassist<auto>.java'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: 'dc3d511120ce04996b1eef3496516e5c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename* (removed javassist parts)
+            u'entriesresource_$$_javassist<auto>.java'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url.pysnap
new file mode 100644
index 0000000000..4421ae7464
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-16T15:38:20.740059Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: 'a7a536723f7289f3ab7cbb444b7058ac'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url_2.pysnap
new file mode 100644
index 0000000000..0dfcd7a61b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url_2.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-03-16T15:38:20.747855Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (ignored module)
+            salt* (normalized generated module name)
+              '<module>'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: '3334b29258653e8ccc2ee7806e9747e7'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (ignored module)
+            salt* (normalized generated module name)
+              '<module>'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_safari_native_code.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_safari_native_code.pysnap
new file mode 100644
index 0000000000..a05b96f838
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_safari_native_code.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-03-15T18:36:59.770189Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          function*
+            u'forEach'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame (native code indicated by filename)
+          function*
+            u'forEach'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_constructors.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_constructors.pysnap
new file mode 100644
index 0000000000..38cc039a88
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_constructors.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:33.001770Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '07d1a8e5728b3c4c7aa8b8273fd0e753'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_constructors_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_constructors_2.pysnap
new file mode 100644
index 0000000000..cb2b25c88d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_constructors_2.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:33.009933Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '09e0efcab18f545166318118ed4e0292'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_methods.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_methods.pysnap
new file mode 100644
index 0000000000..db191cb745
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_sun_java_generated_methods.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:33.017753Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: 'df0a8233b314c542a0b98a4e8865c7b5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_block_functions.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_block_functions.pysnap
new file mode 100644
index 0000000000..76712fafdc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_block_functions.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:33.026218Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
+--------------------------------------------------------------------------
+system:
+  hash: '27eed4125fc13d42163ddb0b8f357b48'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_erb_templates.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_erb_templates.pysnap
new file mode 100644
index 0000000000..85c6ee6a1a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_erb_templates.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:33.034297Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+          function* (trimmed integer suffix)
+            u'_foo_html_erb__<anon>_<anon>'
+--------------------------------------------------------------------------
+system:
+  hash: '140d61119ffa316766cf0f710bf1e7f1'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
+          function* (trimmed integer suffix)
+            u'_foo_html_erb__<anon>_<anon>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_versioned_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_versioned_filenames.pysnap
new file mode 100644
index 0000000000..29d1d3cc25
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_versioned_filenames.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-03-15T18:36:59.810594Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+--------------------------------------------------------------------------
+system:
+  hash: '2f908c015ad77a50595512fcf65d344c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_versioned_filenames_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_versioned_filenames_2.pysnap
new file mode 100644
index 0000000000..b60a6ea4df
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_versioned_filenames_2.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-03-15T18:36:59.817082Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+--------------------------------------------------------------------------
+system:
+  hash: '2f908c015ad77a50595512fcf65d344c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_skips_symbol_if_unknown.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_skips_symbol_if_unknown.pysnap
new file mode 100644
index 0000000000..349b15ea51
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_skips_symbol_if_unknown.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:33.067372Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'libfoo'
+          function*
+            u'main'
+--------------------------------------------------------------------------
+system:
+  hash: 'a972f399399f5566f39b14a7afdd24ff'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'main'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_context_line_over_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_context_line_over_function.pysnap
new file mode 100644
index 0000000000..e6da2df059
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_context_line_over_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T18:36:59.879998Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_function_over_lineno.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_function_over_lineno.pysnap
new file mode 100644
index 0000000000..8a79aa7ca2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_function_over_lineno.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:33.083177Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_module_over_filename.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_module_over_filename.pysnap
new file mode 100644
index 0000000000..2902c0486c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_module_over_filename.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T11:58:33.091187Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: 'acbd18db4cc2f85cedef654fccc4a4d8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_symbol_instead_of_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_symbol_instead_of_function.pysnap
new file mode 100644
index 0000000000..6e1762b081
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_uses_symbol_instead_of_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-15T18:36:59.902749Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'libfoo'
+          function*
+            u'int main()'
+--------------------------------------------------------------------------
+system:
+  hash: '23db4a9e73800923f345d2b868993345'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'int main()'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_with_only_required_vars.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_with_only_required_vars.pysnap
new file mode 100644
index 0000000000..0c9887dea8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_with_only_required_vars.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-03-15T11:58:33.118766Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/hpkp.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/hpkp.pysnap
new file mode 100644
index 0000000000..f1eaf4e339
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/hpkp.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-03-15T11:58:33.127190Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '1e37a374cb33572622d02ff7a6237c44'
+  component:
+    default*
+      hpkp*
+        salt* (a static salt)
+          'hpkp'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/java_chained.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/java_chained.pysnap
new file mode 100644
index 0000000000..8a766a2bb5
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/java_chained.pysnap
@@ -0,0 +1,775 @@
+---
+created: '2019-03-15T11:57:19.776895Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '6492c5a2c66315cff20930ec07f587ad'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+            frame (non app frame)
+              module*
+                u'org.apache.coyote.AbstractProtocol'
+              filename (module takes precedence)
+                u'abstractprotocol.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.tomcat.util.net.AbstractEndpoint'
+              filename (module takes precedence)
+                u'abstractendpoint.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.tomcat.util.net.NioEndpoint'
+              filename (module takes precedence)
+                u'nioendpoint.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.ServerSocketAdaptor'
+              filename (module takes precedence)
+                u'serversocketadaptor.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.ServerSocketChannelImpl'
+              filename (module takes precedence)
+                u'serversocketchannelimpl.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind0'
+          type*
+            u'BindException'
+        exception*
+          stacktrace
+            frame (non app frame)
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+          type*
+            u'LifecycleException'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+          type*
+            u'LifecycleException'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'Failed to start connector [Connector[HTTP/1.1-8080]]'
+--------------------------------------------------------------------------
+system:
+  hash: '8924849495809d42431719c2b9ab65c8'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+            frame*
+              module*
+                u'org.apache.coyote.AbstractProtocol'
+              filename (module takes precedence)
+                u'abstractprotocol.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.tomcat.util.net.AbstractEndpoint'
+              filename (module takes precedence)
+                u'abstractendpoint.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.tomcat.util.net.NioEndpoint'
+              filename (module takes precedence)
+                u'nioendpoint.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.ServerSocketAdaptor'
+              filename (module takes precedence)
+                u'serversocketadaptor.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.ServerSocketChannelImpl'
+              filename (module takes precedence)
+                u'serversocketchannelimpl.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind0'
+          type*
+            u'BindException'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+          type*
+            u'LifecycleException'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+          type*
+            u'LifecycleException'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/java_minimal.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/java_minimal.pysnap
new file mode 100644
index 0000000000..2bb7ea0253
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/java_minimal.pysnap
@@ -0,0 +1,799 @@
+---
+created: '2019-03-15T11:58:33.182022Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '83661bfca7422cbab6c9bb849514e26b'
+  component:
+    app*
+      exception*
+        stacktrace
+          frame (non app frame)
+            module*
+              u'java.lang.Thread'
+            filename (module takes precedence)
+              u'thread.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.threads.TaskThread$WrappingRunnable'
+            filename (module takes precedence)
+              u'taskthread.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor$Worker'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'runWorker'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.net.SocketProcessorBase'
+            filename (module takes precedence)
+              u'socketprocessorbase.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.net.NioEndpoint$SocketProcessor'
+            filename (module takes precedence)
+              u'nioendpoint.java'
+            function*
+              u'doRun'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.AbstractProtocol$ConnectionHandler'
+            filename (module takes precedence)
+              u'abstractprotocol.java'
+            function*
+              u'process'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.AbstractProcessorLight'
+            filename (module takes precedence)
+              u'abstractprocessorlight.java'
+            function*
+              u'process'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.http11.Http11Processor'
+            filename (module takes precedence)
+              u'http11processor.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.connector.CoyoteAdapter'
+            filename (module takes precedence)
+              u'coyoteadapter.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardEngineValve'
+            filename (module takes precedence)
+              u'standardenginevalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.valves.ErrorReportValve'
+            filename (module takes precedence)
+              u'errorreportvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardHostValve'
+            filename (module takes precedence)
+              u'standardhostvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.authenticator.AuthenticatorBase'
+            filename (module takes precedence)
+              u'authenticatorbase.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardContextValve'
+            filename (module takes precedence)
+              u'standardcontextvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardWrapperValve'
+            filename (module takes precedence)
+              u'standardwrappervalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.CharacterEncodingFilter'
+            filename (module takes precedence)
+              u'characterencodingfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.HiddenHttpMethodFilter'
+            filename (module takes precedence)
+              u'hiddenhttpmethodfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.HttpPutFormContentFilter'
+            filename (module takes precedence)
+              u'httpputformcontentfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.RequestContextFilter'
+            filename (module takes precedence)
+              u'requestcontextfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.websocket.server.WsFilter'
+            filename (module takes precedence)
+              u'wsfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'doGet'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'processRequest'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doService'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doDispatch'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter'
+            filename (module takes precedence)
+              u'abstracthandlermethodadapter.java'
+            function*
+              u'handle'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'handleInternal'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'invokeHandlerMethod'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod'
+            filename (module takes precedence)
+              u'servletinvocablehandlermethod.java'
+            function*
+              u'invokeAndHandle'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'invokeForRequest'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'doInvoke'
+          frame (non app frame)
+            module*
+              u'java.lang.reflect.Method'
+            filename (module takes precedence)
+              u'method.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.DelegatingMethodAccessorImpl'
+            filename (module takes precedence)
+              u'delegatingmethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke0'
+          frame (non app frame)
+            module*
+              u'io.sentry.example.Application'
+            filename (module takes precedence)
+              u'application.java'
+            function*
+              u'home'
+        type*
+          u'ArithmeticException'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause'
+--------------------------------------------------------------------------
+system:
+  hash: 'ec87dd10e4f7512ecccb4a068c5774ae'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'java.lang.Thread'
+            filename (module takes precedence)
+              u'thread.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'org.apache.tomcat.util.threads.TaskThread$WrappingRunnable'
+            filename (module takes precedence)
+              u'taskthread.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor$Worker'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'runWorker'
+          frame*
+            module*
+              u'org.apache.tomcat.util.net.SocketProcessorBase'
+            filename (module takes precedence)
+              u'socketprocessorbase.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'org.apache.tomcat.util.net.NioEndpoint$SocketProcessor'
+            filename (module takes precedence)
+              u'nioendpoint.java'
+            function*
+              u'doRun'
+          frame*
+            module*
+              u'org.apache.coyote.AbstractProtocol$ConnectionHandler'
+            filename (module takes precedence)
+              u'abstractprotocol.java'
+            function*
+              u'process'
+          frame*
+            module*
+              u'org.apache.coyote.AbstractProcessorLight'
+            filename (module takes precedence)
+              u'abstractprocessorlight.java'
+            function*
+              u'process'
+          frame*
+            module*
+              u'org.apache.coyote.http11.Http11Processor'
+            filename (module takes precedence)
+              u'http11processor.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.apache.catalina.connector.CoyoteAdapter'
+            filename (module takes precedence)
+              u'coyoteadapter.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardEngineValve'
+            filename (module takes precedence)
+              u'standardenginevalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.valves.ErrorReportValve'
+            filename (module takes precedence)
+              u'errorreportvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardHostValve'
+            filename (module takes precedence)
+              u'standardhostvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.authenticator.AuthenticatorBase'
+            filename (module takes precedence)
+              u'authenticatorbase.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardContextValve'
+            filename (module takes precedence)
+              u'standardcontextvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardWrapperValve'
+            filename (module takes precedence)
+              u'standardwrappervalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.CharacterEncodingFilter'
+            filename (module takes precedence)
+              u'characterencodingfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.HiddenHttpMethodFilter'
+            filename (module takes precedence)
+              u'hiddenhttpmethodfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.HttpPutFormContentFilter'
+            filename (module takes precedence)
+              u'httpputformcontentfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.RequestContextFilter'
+            filename (module takes precedence)
+              u'requestcontextfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.apache.tomcat.websocket.server.WsFilter'
+            filename (module takes precedence)
+              u'wsfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'doGet'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'processRequest'
+          frame*
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doService'
+          frame*
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doDispatch'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter'
+            filename (module takes precedence)
+              u'abstracthandlermethodadapter.java'
+            function*
+              u'handle'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'handleInternal'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'invokeHandlerMethod'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod'
+            filename (module takes precedence)
+              u'servletinvocablehandlermethod.java'
+            function*
+              u'invokeAndHandle'
+          frame*
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'invokeForRequest'
+          frame*
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'doInvoke'
+          frame*
+            module*
+              u'java.lang.reflect.Method'
+            filename (module takes precedence)
+              u'method.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.DelegatingMethodAccessorImpl'
+            filename (module takes precedence)
+              u'delegatingmethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke0'
+          frame*
+            module*
+              u'io.sentry.example.Application'
+            filename (module takes precedence)
+              u'application.java'
+            function*
+              u'home'
+        type*
+          u'ArithmeticException'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/javascript_exception_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/javascript_exception_no_in_app.pysnap
new file mode 100644
index 0000000000..1d22192863
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/javascript_exception_no_in_app.pysnap
@@ -0,0 +1,142 @@
+---
+created: '2019-03-15T11:58:33.192278Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'f0c115b5c5c017cd42bb8050e8d82306'
+  component:
+    app*
+      exception*
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'dispatchInteractiveEvent'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates$1'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performSyncWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWorkOnRoot'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'renderRoot'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'replayUnitOfWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'invokeGuardedCallback'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'Object.invokeGuardedCallbackDev'
+          frame (non app frame)
+            filename*
+              u'index.js'
+            function*
+              u'HTMLUnknownElement.sentryWrapped'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'HTMLUnknownElement.callCallback'
+        type*
+          u'ReferenceError'
+--------------------------------------------------------------------------
+system:
+  hash: 'c792aaace0c1a534a115ece18c376538'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'dispatchInteractiveEvent'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates$1'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performSyncWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWorkOnRoot'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'renderRoot'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'replayUnitOfWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'invokeGuardedCallback'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'Object.invokeGuardedCallbackDev'
+          frame*
+            filename*
+              u'index.js'
+            function*
+              u'HTMLUnknownElement.sentryWrapped'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'HTMLUnknownElement.callCallback'
+        type*
+          u'ReferenceError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/javascript_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/javascript_message.pysnap
new file mode 100644
index 0000000000..11c1152236
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/javascript_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-03-15T11:58:33.199508Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '4119639092e62c55ea8be348e4d9260d'
+  component:
+    default*
+      message*
+        u'event'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/laravel.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/laravel.pysnap
new file mode 100644
index 0000000000..ce12b4e1d1
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/laravel.pysnap
@@ -0,0 +1,518 @@
+---
+created: '2019-03-15T18:37:00.063525Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '294cfb8d1aa7ab375c4b49ce2733092c'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'server.php'
+          frame*
+            filename*
+              u'index.php'
+            function*
+              u'require_once'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::handle'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'checkformaintenancemode.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'validatepostsize.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'trustproxies.php'
+            function*
+              u'Fideloper\\Proxy\\TrustProxies::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::Illuminate\\Foundation\\Http\\{closure}'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatch'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatchToRoute'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRoute'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRouteWithinStack'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'encryptcookies.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\EncryptCookies::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'addqueuedcookiestoresponse.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'startsession.php'
+            function*
+              u'Illuminate\\Session\\Middleware\\StartSession::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'shareerrorsfromsession.php'
+            function*
+              u'Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'verifycsrftoken.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame (non app frame)
+            filename*
+              u'substitutebindings.php'
+            function*
+              u'Illuminate\\Routing\\Middleware\\SubstituteBindings::handle'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::Illuminate\\Routing\\{closure}'
+          frame (non app frame)
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::run'
+          frame (non app frame)
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::runCallable'
+          frame*
+            filename*
+              u'web.php'
+            function*
+              u'Illuminate\\Routing\\RouteFileRegistrar::{closure}'
+        type*
+          u'Exception'
+--------------------------------------------------------------------------
+system:
+  hash: 'a3719dac43d28c56931056d073154398'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'server.php'
+          frame*
+            filename*
+              u'index.php'
+            function*
+              u'require_once'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::handle'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'checkformaintenancemode.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'validatepostsize.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'trustproxies.php'
+            function*
+              u'Fideloper\\Proxy\\TrustProxies::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::Illuminate\\Foundation\\Http\\{closure}'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatch'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatchToRoute'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRoute'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRouteWithinStack'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'encryptcookies.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\EncryptCookies::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'addqueuedcookiestoresponse.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'startsession.php'
+            function*
+              u'Illuminate\\Session\\Middleware\\StartSession::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'shareerrorsfromsession.php'
+            function*
+              u'Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'verifycsrftoken.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+          frame*
+            filename*
+              u'substitutebindings.php'
+            function*
+              u'Illuminate\\Routing\\Middleware\\SubstituteBindings::handle'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::Illuminate\\Routing\\{closure}'
+          frame*
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::run'
+          frame*
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::runCallable'
+          frame*
+            filename*
+              u'web.php'
+            function*
+              u'Illuminate\\Routing\\RouteFileRegistrar::{closure}'
+        type*
+          u'Exception'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/logentry_prefers_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/logentry_prefers_message.pysnap
new file mode 100644
index 0000000000..3032f46f47
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/logentry_prefers_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-03-15T11:58:33.233602Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/logentry_uses_formatted.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/logentry_uses_formatted.pysnap
new file mode 100644
index 0000000000..41b0058765
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/logentry_uses_formatted.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-03-15T11:58:33.241914Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '329b29efcf1f77067a063e34f56e7791'
+  component:
+    default*
+      message*
+        u'Hello there world!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/message_prefers_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/message_prefers_message.pysnap
new file mode 100644
index 0000000000..55d0a34bbc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/message_prefers_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-03-15T11:58:33.249164Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/message_uses_formatted.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/message_uses_formatted.pysnap
new file mode 100644
index 0000000000..ba6d5a61bd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/message_uses_formatted.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-03-15T11:58:33.255636Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: 'd3f5e52d24e9c1eae5abe6c866cced63'
+  component:
+    default*
+      message*
+        u'Hello there Peter!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/minified_javascript.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/minified_javascript.pysnap
new file mode 100644
index 0000000000..e278337127
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/minified_javascript.pysnap
@@ -0,0 +1,330 @@
+---
+created: '2019-03-16T15:38:21.060366Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'fc370a55338a8eab50cef81666096af3'
+  component:
+    app*
+      exception*
+        stacktrace
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'M'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'S/<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'i'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'b'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'h/p._invoke</<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/</a</<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u't.exports/<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'L'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u't.exports/</<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'c'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'h/p._invoke</<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'componentPromise'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'o.e'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'Pt</t.prototype.wrapTimeFunction/<'
+        type*
+          u'NS_ERROR_NOT_INITIALIZED'
+--------------------------------------------------------------------------
+system:
+  hash: '074e2ed5d89f602d31be5742ac107fef'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'M'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'S/<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'i'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'b'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'h/p._invoke</<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/</a</<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u't.exports/<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'L'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u't.exports/</<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'c'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'h/p._invoke</<'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'componentPromise'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'o.e'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'Pt</t.prototype.wrapTimeFunction/<'
+        type*
+          u'NS_ERROR_NOT_INITIALIZED'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/native_complex_function_names.pysnap
new file mode 100644
index 0000000000..296f19036e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/native_complex_function_names.pysnap
@@ -0,0 +1,34 @@
+---
+created: '2019-03-16T14:31:51.956347Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'fed4f6eb500e04f59e97d31e8743ec8f'
+  component:
+    app*
+      exception*
+        stacktrace
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+        type*
+          u'log_demo'
+--------------------------------------------------------------------------
+system:
+  hash: 'd6125002ce075cab3755011dddefe9e1'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function* (isolated function)
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function* (isolated function)
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+        type*
+          u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/native_no_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/native_no_filenames.pysnap
new file mode 100644
index 0000000000..af53b11196
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/native_no_filenames.pysnap
@@ -0,0 +1,94 @@
+---
+created: '2019-03-15T18:37:00.151249Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '0069ba38208554530eed55f7647f7c5c'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame*
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+          frame (non app frame)
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'log_demo'
+--------------------------------------------------------------------------
+system:
+  hash: '30f71d6ff287238ce1541e21e633a8c5'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame*
+            function*
+              u'std::rt::lang_start'
+          frame*
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame*
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+          frame*
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame*
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame*
+            function*
+              u'sentry::hub::Hub::with'
+          frame*
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/node_exception_weird.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/node_exception_weird.pysnap
new file mode 100644
index 0000000000..08c12ecb34
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/node_exception_weird.pysnap
@@ -0,0 +1,162 @@
+---
+created: '2019-03-15T18:37:00.163979Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '6e721dc6a6f261cc9ce994fe8dc2c917'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function*
+              u'Hub.Object.<anonymous>.Hub.withScope'
+          frame*
+            module*
+              u'onunhandledrejection.ts'
+            filename (module takes precedence)
+              u'onunhandledrejection.ts'
+            function*
+              u'null.<anonymous>'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.mockConstructor [as captureException]'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.<anonymous>'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'finalReturnValue'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.<anonymous>'
+          frame*
+            module*
+              u'hub.ts'
+            filename (module takes precedence)
+              u'hub.ts'
+            function*
+              u'Hub.Object.<anonymous>.Hub.captureException'
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function*
+              u'Hub.Object.<anonymous>.Hub.invokeClient'
+          frame*
+            module*
+              u'baseclient.ts'
+            filename (module takes precedence)
+              u'baseclient.ts'
+            function*
+              u'NodeClient.Object.<anonymous>.BaseClient.captureException'
+          frame*
+            module*
+              u'backend.ts'
+            filename (module takes precedence)
+              u'backend.ts'
+            function*
+              u'NodeBackend.Object.<anonymous>.NodeBackend.eventFromException'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: '4dc62db23de39a20e1274015ee07d202'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function*
+              u'Hub.Object.<anonymous>.Hub.withScope'
+          frame*
+            module*
+              u'onunhandledrejection.ts'
+            filename (module takes precedence)
+              u'onunhandledrejection.ts'
+            function*
+              u'null.<anonymous>'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.mockConstructor [as captureException]'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.<anonymous>'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'finalReturnValue'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'Hub.<anonymous>'
+          frame*
+            module*
+              u'hub.ts'
+            filename (module takes precedence)
+              u'hub.ts'
+            function*
+              u'Hub.Object.<anonymous>.Hub.captureException'
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function*
+              u'Hub.Object.<anonymous>.Hub.invokeClient'
+          frame*
+            module*
+              u'baseclient.ts'
+            filename (module takes precedence)
+              u'baseclient.ts'
+            function*
+              u'NodeClient.Object.<anonymous>.BaseClient.captureException'
+          frame*
+            module*
+              u'backend.ts'
+            filename (module takes precedence)
+              u'backend.ts'
+            function*
+              u'NodeBackend.Object.<anonymous>.NodeBackend.eventFromException'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/python_exception_base.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/python_exception_base.pysnap
new file mode 100644
index 0000000000..98e4ada6f8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/python_exception_base.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-03-15T11:58:33.303732Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '92816681b15788a8230e065fa299dc88'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '669cb6664e0f5fed38665da04e464f7e'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/python_http_error.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/python_http_error.pysnap
new file mode 100644
index 0000000000..ba26bafe27
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/python_http_error.pysnap
@@ -0,0 +1,71 @@
+---
+created: '2019-03-15T18:37:00.180889Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '86a7a80de1a3e572aeb20b28ae8d62c6'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+          frame*
+            module*
+              u'sentry.integrations.slack.notify_action'
+            filename (module takes precedence)
+              u'notify_action.py'
+            function*
+              u'send_notification'
+          frame (non app frame)
+            module*
+              u'requests.models'
+            filename (module takes precedence)
+              u'models.py'
+            function*
+              u'raise_for_status'
+        type*
+          u'HTTPError'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'%s.process_error'
+--------------------------------------------------------------------------
+system:
+  hash: '07a725d19885057d03eccfa450a274f4'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+          frame*
+            module*
+              u'sentry.integrations.slack.notify_action'
+            filename (module takes precedence)
+              u'notify_action.py'
+            function*
+              u'send_notification'
+          frame*
+            module*
+              u'requests.models'
+            filename (module takes precedence)
+              u'models.py'
+            function*
+              u'raise_for_status'
+        type*
+          u'HTTPError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/react_native.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/react_native.pysnap
new file mode 100644
index 0000000000..42d3fc336a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/react_native.pysnap
@@ -0,0 +1,322 @@
+---
+created: '2019-03-15T18:37:00.200137Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '93c2d97697ba4aa34b91557c1c217641'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'value'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'flushedQueue'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'_inCall'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'flushedQueue'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_lastFlush'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_receiveRootNodeIDEvent'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'batchedUpdates'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_batchedUpdates'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'fn'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'forEachAccumulated'
+          frame (non app frame)
+            function*
+              u'[native code] forEach'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'D'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'executeDispatch'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'invokeGuardedCallbackAndCatchFirstError'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'apply'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'apply'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'arguments'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'_receiveSignal'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'_performSideEffectsForTransition'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
+            filename (module takes precedence)
+              u'touchablenativefeedback.android.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function*
+              u'onPress'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function*
+              u'Button'
+        type*
+          u'TypeError'
+--------------------------------------------------------------------------
+system:
+  hash: '53f5eee7a48d6754dcc87aee2be66195'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'value'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'flushedQueue'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'_inCall'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function*
+              u'flushedQueue'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_lastFlush'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_receiveRootNodeIDEvent'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'batchedUpdates'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'_batchedUpdates'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'fn'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'forEachAccumulated'
+          frame*
+            function*
+              u'[native code] forEach'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'D'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'executeDispatch'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'invokeGuardedCallbackAndCatchFirstError'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'apply'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function*
+              u'apply'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'arguments'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'_receiveSignal'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function*
+              u'_performSideEffectsForTransition'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
+            filename (module takes precedence)
+              u'touchablenativefeedback.android.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function*
+              u'onPress'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function*
+              u'Button'
+        type*
+          u'TypeError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_cocoa.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_cocoa.pysnap
new file mode 100644
index 0000000000..685785838d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_cocoa.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-03-15T11:58:33.343577Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb416f98479efa56a77c524602dc9979'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'bar.m'
+        frame (non app frame)
+          filename*
+            u'baz.m'
+--------------------------------------------------------------------------
+system:
+  hash: '1df786c8c266506e1acb6669c8df5154'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'bar.m'
+        frame*
+          filename*
+            u'baz.m'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_collapse_recursion.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_collapse_recursion.pysnap
new file mode 100644
index 0000000000..aa3ae2f23d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_collapse_recursion.pysnap
@@ -0,0 +1,114 @@
+---
+created: '2019-03-15T11:58:33.353841Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'main'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'normalFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'throwError'
+--------------------------------------------------------------------------
+system:
+  hash: '894c3489e2ade384dc107bca6829d134'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'main'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'normalFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'throwError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_compute_hashes.pysnap
new file mode 100644
index 0000000000..35a86dbfe5
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-03-15T11:58:33.361642Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_discards_seemingly_useless_stack.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_discards_seemingly_useless_stack.pysnap
new file mode 100644
index 0000000000..28f7fe7daa
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_discards_seemingly_useless_stack.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-03-16T15:38:21.159098Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'foo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_does_not_discard_non_urls.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_does_not_discard_non_urls.pysnap
new file mode 100644
index 0000000000..401cc2c42f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_does_not_discard_non_urls.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-03-15T18:37:00.256352Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo'
+--------------------------------------------------------------------------
+system:
+  hash: 'acbd18db4cc2f85cedef654fccc4a4d8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_does_not_group_different_js_errors.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_does_not_group_different_js_errors.pysnap
new file mode 100644
index 0000000000..48a2135cca
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_does_not_group_different_js_errors.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-03-16T15:38:21.174028Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'index.js'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'index.js'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_excludes_single_frame_urls.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_excludes_single_frame_urls.pysnap
new file mode 100644
index 0000000000..61d2e7fba4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_excludes_single_frame_urls.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-03-16T15:38:21.182114Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'<unknown module>'
+          filename (ignored because frame points to a URL)
+            u''
+--------------------------------------------------------------------------
+system:
+  hash: 'cd2a9fd0cdaa8cd55ed22b101fc65882'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'<unknown module>'
+          filename (ignored because frame points to a URL)
+            u''
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_hash_without_system_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_hash_without_system_frames.pysnap
new file mode 100644
index 0000000000..a4fe89c934
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_hash_without_system_frames.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-03-15T11:58:33.403251Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_ignores_singular_anonymous_frame.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_ignores_singular_anonymous_frame.pysnap
new file mode 100644
index 0000000000..70be7a74e9
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_ignores_singular_anonymous_frame.pysnap
@@ -0,0 +1,42 @@
+---
+created: '2019-03-16T15:38:21.198348Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'dojo.js'
+          function*
+            u'c'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'dojo.js'
+          function*
+            u'Object._createDocumentViewModel'
+--------------------------------------------------------------------------
+system:
+  hash: 'e61225523929cf925f6ac3b1f7f26d85'
+  component:
+    system*
+      stacktrace*
+        frame
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame*
+          filename (ignored because frame points to a URL)
+            u'dojo.js'
+          function*
+            u'c'
+        frame*
+          filename (ignored because frame points to a URL)
+            u'dojo.js'
+          function*
+            u'Object._createDocumentViewModel'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_with_minimal_app_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_with_minimal_app_frames.pysnap
new file mode 100644
index 0000000000..6a3adf9bd7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/stacktrace_with_minimal_app_frames.pysnap
@@ -0,0 +1,88 @@
+---
+created: '2019-03-15T11:58:33.422866Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/template_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/template_compute_hashes.pysnap
new file mode 100644
index 0000000000..fc4c01b706
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/template_compute_hashes.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-03-15T11:58:33.430952Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '826f66ef602835f68030c04c634df320'
+  component:
+    default*
+      template*
+        filename*
+          u'foo.html'
+        context-line*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/threads_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/threads_compute_hashes.pysnap
new file mode 100644
index 0000000000..8e48de0202
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/threads_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-03-15T11:55:35.379089Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (threads of system takes precedence)
+      threads (ignored because hash matches system variant)
+        stacktrace*
+          frame*
+            filename*
+              u'baz.c'
+            function*
+              u'main'
+--------------------------------------------------------------------------
+system:
+  hash: '1a11687556cf74559f0ae90b1c87e2fd'
+  component:
+    system*
+      threads*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.c'
+            function*
+              u'main'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/threads_no_hash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/threads_no_hash.pysnap
new file mode 100644
index 0000000000..7cf323ca37
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/threads_no_hash.pysnap
@@ -0,0 +1,19 @@
+---
+created: '2019-03-15T11:58:33.451870Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      threads (ignored because contains 2 threads)
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      threads (ignored because contains 2 threads)
diff --git a/tests/sentry/grouping/test_strategy_utils.py b/tests/sentry/grouping/test_strategy_utils.py
new file mode 100644
index 0000000000..f467dd985d
--- /dev/null
+++ b/tests/sentry/grouping/test_strategy_utils.py
@@ -0,0 +1,113 @@
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.grouping.strategies.stacktrace import isolate_native_function_v1
+from sentry.grouping.strategies.utils import replace_enclosed_string, split_func_tokens
+
+
+@pytest.mark.parametrize(
+    'input,output',
+    [
+        [
+            'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)',
+            'Scaleform::GFx::AS3::IMEManager::DispatchEvent',
+        ],
+        [
+            'static unsigned int Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *) const',
+            'Scaleform::GFx::AS3::IMEManager::DispatchEvent',
+        ],
+        [
+            'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated(unsigned long,unsigned short,_GUID const &,_GUID const &,_GUID const &,HKL__ *,unsigned long)',
+            'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated',
+        ],
+        [
+            '<actix_web::pipeline::Pipeline<S, H> as actix_web::server::handler::HttpHandlerTask>::poll_io',
+            '<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io',
+        ],
+        [
+            '+[FLFoo barBaz]',
+            '+[FLFoo barBaz]',
+        ],
+        [
+            '-[FLFoo barBaz]',
+            '-[FLFoo barBaz]',
+        ],
+        [
+            '<tokio_current_thread::scheduler::Scheduled<\'a, U>>::tick',
+            '<tokio_current_thread::scheduler::Scheduled<T>>::tick',
+        ],
+        [
+            'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}',
+            'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}',
+        ],
+        [
+            '<std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once',
+            '<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once',
+        ],
+        [
+            'struct style::gecko_bindings::sugar::ownership::Strong<style::gecko_bindings::structs::root::RawServoStyleSheetContents> geckoservo::glue::Servo_StyleSheet_Empty(style::gecko_bindings::structs::root::mozilla::css::SheetParsingMode) const',
+            'geckoservo::glue::Servo_StyleSheet_Empty',
+        ],
+        [
+            'static <NoType> std::panicking::begin_panic<str*>(struct str*, struct (str*, u32, u32) *)',
+            'std::panicking::begin_panic<T>',
+        ],
+        [
+            '(anonymous namespace)::StupidFunction<std::vector<std::string>>(int)',
+            '(anonymous namespace)::StupidFunction<T>',
+        ],
+        [
+            'static unsigned int _foo_function (uint32_t,uint32_t) const',
+            '_foo_function',
+        ],
+        [
+            'v8::internal::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, v8::internal::MaybeObjectBrief const&)',
+            'v8::internal::operator<<',
+        ],
+        [
+            'unsigned int (anonymous namespace)::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, v8::internal::MaybeObjectBrief const&)',
+            '(anonymous namespace)::operator<<',
+        ],
+        [
+            'unsigned int mynamespace::MyClass::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, v8::internal::MaybeObjectBrief const&)',
+            'mynamespace::MyClass::operator()',
+        ],
+    ]
+)
+def test_isolate_native_function_v1(input, output):
+    assert isolate_native_function_v1(input) == output
+
+
+def replace_group(value, start):
+    if start == 0:
+        assert value == 'anonymous namespace'
+        return '(new value)'
+    return '()'
+
+
+@pytest.mark.parametrize(
+    'input,start,end,replacement,output',
+    [
+        ['foo::bar<Blah, Blah<Blah, Blah>>', '<', '>', '<T>', 'foo::bar<T>'],
+        ['foo::bar(unsigned int, int)', '(', ')', '', 'foo::bar'],
+        ['(anonymous namespace)::foo::bar(unsigned int, int)', '(', ')',
+         replace_group, '(new value)::foo::bar()'],
+    ]
+)
+def test_enclosed_string_simple(input, start, end, replacement, output):
+    assert replace_enclosed_string(input, start, end, replacement) == output
+
+
+@pytest.mark.parametrize(
+    'input,output',
+    [
+        ['foo bar baz', ['foo', 'bar', 'baz']],
+        ['foo bar (enclosed baz)', ['foo', 'bar', '(enclosed baz)']],
+        ['foo (enclosed bar) baz', ['foo', '(enclosed bar)', 'baz']],
+        ['foo(enclosed bar)baz {moar stuff}', ['foo(enclosed bar)baz', '{moar stuff}']],
+        ['foo bar [baz (blah)]', ['foo', 'bar', '[baz (blah)]']],
+    ]
+)
+def test_split_func_tokens(input, output):
+    assert split_func_tokens(input) == output
diff --git a/tests/sentry/grouping/test_variants.py b/tests/sentry/grouping/test_variants.py
index d143d905c8..769dbc9d07 100644
--- a/tests/sentry/grouping/test_variants.py
+++ b/tests/sentry/grouping/test_variants.py
@@ -9,6 +9,7 @@ import pytest
 from sentry.models import Event
 from sentry.event_manager import EventManager
 from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.configurations import CONFIGURATIONS
 
 
 def dump_variant(variant, lines=None, indent=0):
@@ -41,17 +42,16 @@ def dump_variant(variant, lines=None, indent=0):
     return lines
 
 
-_fixture_path = os.path.join(os.path.dirname(__file__), 'configs')
+_fixture_path = os.path.join(os.path.dirname(__file__), 'inputs')
 
 
 def load_configs():
-    configs = os.listdir(_fixture_path)
+    configs = CONFIGURATIONS.keys()
 
     rv = []
-    for config in configs:
-        folder = os.path.join(_fixture_path, config)
-        for filename in os.listdir(folder):
-            if filename.endswith('.json'):
+    for filename in os.listdir(_fixture_path):
+        if filename.endswith('.json'):
+            for config in configs:
                 rv.append((config, filename[:-5]))
 
     rv.sort()
@@ -65,7 +65,7 @@ def load_configs():
     ids=lambda x: x.replace("-", "_")  # Nicer folder structure for insta_snapshot
 )
 def test_event_hash_variant(insta_snapshot, config_name, test_name, log):
-    with open(os.path.join(_fixture_path, config_name, test_name + '.json')) as f:
+    with open(os.path.join(_fixture_path, test_name + '.json')) as f:
         input = json.load(f)
 
     mgr = EventManager(data=input)
@@ -74,7 +74,7 @@ def test_event_hash_variant(insta_snapshot, config_name, test_name, log):
     evt = Event(data=data, platform=data['platform'])
 
     rv = []
-    for (key, value) in sorted(evt.get_grouping_variants().items()):
+    for (key, value) in sorted(evt.get_grouping_variants(force_config=config_name).items()):
         if rv:
             rv.append('-' * 74)
         rv.append('%s:' % key)
