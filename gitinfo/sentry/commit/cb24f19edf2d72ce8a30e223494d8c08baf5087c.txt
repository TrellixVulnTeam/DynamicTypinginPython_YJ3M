commit cb24f19edf2d72ce8a30e223494d8c08baf5087c
Author: David Wang <davidw1339@gmail.com>
Date:   Fri Dec 13 08:55:33 2019 -0800

    ref(ui): Check first event sent via API in Issues Overview (#16096)
    
    Previously, the issues page would use the list of all projects (organization.projects) to check if any selected projects had sent a first event. This meant that the issues page was blocked on the loading of all projects. Now it is changed to make use of the sent-first-event/ API call which can take in is_member or project ids as query parameters. Also fixed up some tests that were not correctly waiting for the right async calls.

diff --git a/src/sentry/static/sentry/app/constants/index.tsx b/src/sentry/static/sentry/app/constants/index.tsx
index 6326ee7b98..86da005796 100644
--- a/src/sentry/static/sentry/app/constants/index.tsx
+++ b/src/sentry/static/sentry/app/constants/index.tsx
@@ -191,6 +191,8 @@ export const MAX_PICKABLE_DAYS = 90;
 
 export const DEFAULT_STATS_PERIOD = '14d';
 
+export const DEFAULT_QUERY = 'is:unresolved';
+
 export const DEFAULT_USE_UTC = true;
 
 export const DEFAULT_RELATIVE_PERIODS = {
diff --git a/src/sentry/static/sentry/app/views/issueList/noGroupsHandler.tsx b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler.tsx
new file mode 100644
index 0000000000..aef1c8a678
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler.tsx
@@ -0,0 +1,136 @@
+import React from 'react';
+
+import {Client} from 'app/api';
+import {DEFAULT_QUERY} from 'app/constants';
+import {LightWeightOrganization, Project} from 'app/types';
+import {t} from 'app/locale';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import ErrorRobot from 'app/components/errorRobot';
+import LoadingIndicator from 'app/components/loadingIndicator';
+
+type Props = {
+  api: Client;
+  organization: LightWeightOrganization;
+  query: string;
+  selectedProjectIds?: number[];
+  groupIds: number[];
+};
+
+type State = {
+  fetchingSentFirstEvent: boolean;
+  firstEventProjects?: Project[];
+  sentFirstEvent?: boolean;
+};
+
+const CongratsRobots = React.lazy(() =>
+  import(/* webpackChunkName: "CongratsRobots" */ 'app/views/issueList/congratsRobots')
+);
+
+/**
+ * Component which is rendered when no groups/issues were found. This could
+ * either be caused by having no first events, having resolved all issues, or
+ * having no issues be returned from a query. This component will conditionally
+ * render one of those states.
+ */
+class NoGroupsHandler extends React.Component<Props, State> {
+  constructor(props: Props) {
+    super(props);
+    this.state = {
+      fetchingSentFirstEvent: true,
+    };
+  }
+
+  componentDidMount() {
+    this.fetchSentFirstEvent();
+  }
+
+  async fetchSentFirstEvent() {
+    this.setState({
+      fetchingSentFirstEvent: true,
+    });
+
+    const {organization, selectedProjectIds, api} = this.props;
+    let sentFirstEvent = false;
+    let projects = [];
+
+    // If no projects are selected, then we must check every project the user is a
+    // member of and make sure there are no first events for all of the projects
+    let firstEventQuery = {};
+    const projectsQuery = {per_page: 1, query: {}};
+    if (!selectedProjectIds || !selectedProjectIds.length) {
+      firstEventQuery = {is_member: true};
+    } else {
+      firstEventQuery = {project: selectedProjectIds};
+      projectsQuery.query = selectedProjectIds.map(id => `id:${id}`).join(' ');
+    }
+
+    [{sentFirstEvent}, projects] = await Promise.all([
+      // checks to see if selection has sent a first event
+      api.requestPromise(`/organizations/${organization.slug}/sent-first-event/`, {
+        query: firstEventQuery,
+      }),
+      // retrieves a single project to feed to the ErrorRobot from renderStreamBody
+      api.requestPromise(`/organizations/${organization.slug}/projects/`, {
+        query: projectsQuery,
+      }),
+    ]);
+
+    this.setState({
+      fetchingSentFirstEvent: false,
+      sentFirstEvent,
+      firstEventProjects: projects,
+    });
+  }
+
+  renderLoading() {
+    return <LoadingIndicator />;
+  }
+
+  renderAwaitingEvents(projects) {
+    const {organization} = this.props;
+    const project = projects.length > 0 ? projects[0] : null;
+
+    const sampleIssueId = this.props.groupIds.length > 0 ? this.props.groupIds[0] : '';
+    return (
+      <ErrorRobot
+        org={organization}
+        project={project}
+        sampleIssueId={sampleIssueId}
+        gradient
+      />
+    );
+  }
+
+  renderNoUnresolvedIssues() {
+    return (
+      <React.Suspense fallback={this.renderLoading()}>
+        <CongratsRobots data-test-id="congrats-robots" />
+      </React.Suspense>
+    );
+  }
+
+  renderEmpty() {
+    return (
+      <EmptyStateWarning>
+        <p>{t('Sorry, no issues match your filters.')}</p>
+      </EmptyStateWarning>
+    );
+  }
+
+  render() {
+    const {fetchingSentFirstEvent, sentFirstEvent, firstEventProjects} = this.state;
+    const {query} = this.props;
+    // render things accordingly
+    if (fetchingSentFirstEvent) {
+      return this.renderLoading();
+    } else if (!sentFirstEvent) {
+      return this.renderAwaitingEvents(firstEventProjects);
+    } else if (query === DEFAULT_QUERY) {
+      return this.renderNoUnresolvedIssues();
+    } else {
+      return this.renderEmpty();
+    }
+  }
+}
+
+export default NoGroupsHandler;
diff --git a/src/sentry/static/sentry/app/views/issueList/overview.jsx b/src/sentry/static/sentry/app/views/issueList/overview.jsx
index 68bc1ec0ed..94c7aee278 100644
--- a/src/sentry/static/sentry/app/views/issueList/overview.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/overview.jsx
@@ -11,7 +11,7 @@ import pickBy from 'lodash/pickBy';
 import qs from 'query-string';
 
 import {Client} from 'app/api';
-import {DEFAULT_STATS_PERIOD} from 'app/constants';
+import {DEFAULT_QUERY, DEFAULT_STATS_PERIOD} from 'app/constants';
 import {Panel, PanelBody} from 'app/components/panels';
 import {analytics} from 'app/utils/analytics';
 import {defined} from 'app/utils';
@@ -24,10 +24,7 @@ import {extractSelectionParameters} from 'app/components/organizations/globalSel
 import {fetchOrgMembers, indexMembersByProject} from 'app/actionCreators/members';
 import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
 import {getUtcDateString} from 'app/utils/dates';
-import {t} from 'app/locale';
 import CursorPoller from 'app/utils/cursorPoller';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import ErrorRobot from 'app/components/errorRobot';
 import GroupStore from 'app/stores/groupStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -47,19 +44,15 @@ import withSavedSearches from 'app/utils/withSavedSearches';
 import IssueListActions from './actions';
 import IssueListFilters from './filters';
 import IssueListSidebar from './sidebar';
+import NoGroupsHandler from './noGroupsHandler';
 
 const MAX_ITEMS = 25;
-const DEFAULT_QUERY = 'is:unresolved';
 const DEFAULT_SORT = 'date';
 // the default period for the graph in each issue row
 const DEFAULT_GRAPH_STATS_PERIOD = '24h';
 // the allowed period choices for graph in each issue row
 const STATS_PERIODS = new Set(['14d', '24h']);
 
-const CongratsRobots = React.lazy(() =>
-  import(/* webpackChunkName: "CongratsRobots" */ 'app/views/issueList/congratsRobots')
-);
-
 const IssueListOverview = createReactClass({
   displayName: 'IssueListOverview',
 
@@ -546,38 +539,12 @@ const IssueListOverview = createReactClass({
     return <PanelBody>{groupNodes}</PanelBody>;
   },
 
-  renderEmpty() {
-    return (
-      <EmptyStateWarning>
-        <p>{t('Sorry, no issues match your filters.')}</p>
-      </EmptyStateWarning>
-    );
-  },
-
   renderLoading() {
     return <LoadingIndicator />;
   },
 
-  renderNoUnresolvedIssues() {
-    return (
-      <React.Suspense fallback={this.renderLoading()}>
-        <CongratsRobots data-test-id="congrats-robots" />
-      </React.Suspense>
-    );
-  },
-
   renderStreamBody() {
     let body;
-    const {organization} = this.props;
-    const selectedProjects = this.getGlobalSearchProjects();
-    const query = this.getQuery();
-
-    // If no projects are selected, then we must check every project the user is a
-    // member of and make sure there are no first events for all of the projects
-    const projects = !selectedProjects.length
-      ? organization.projects.filter(p => p.isMember)
-      : selectedProjects;
-    const noFirstEvents = projects.every(p => !p.firstEvent);
 
     if (this.state.issuesLoading) {
       body = this.renderLoading();
@@ -585,12 +552,16 @@ const IssueListOverview = createReactClass({
       body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
     } else if (this.state.groupIds.length > 0) {
       body = this.renderGroupNodes(this.state.groupIds, this.getGroupStatsPeriod());
-    } else if (noFirstEvents) {
-      body = this.renderAwaitingEvents(projects);
-    } else if (query === DEFAULT_QUERY) {
-      body = this.renderNoUnresolvedIssues();
     } else {
-      body = this.renderEmpty();
+      body = (
+        <NoGroupsHandler
+          api={this.api}
+          organization={this.props.organization}
+          query={this.getQuery()}
+          selectedProjectIds={this.props.selection.projects}
+          groupIds={this.state.groupIds}
+        />
+      );
     }
     return body;
   },
@@ -623,21 +594,6 @@ const IssueListOverview = createReactClass({
     });
   },
 
-  renderAwaitingEvents(projects) {
-    const {organization} = this.props;
-    const project = projects.length > 0 ? projects[0] : null;
-
-    const sampleIssueId = this.state.groupIds.length > 0 ? this.state.groupIds[0] : '';
-    return (
-      <ErrorRobot
-        org={organization}
-        project={project}
-        sampleIssueId={sampleIssueId}
-        gradient
-      />
-    );
-  },
-
   tagValueLoader(key, search) {
     const {orgId} = this.props.params;
     const projectIds = this.getGlobalSearchProjects().map(p => p.id);
diff --git a/tests/js/spec/views/issueList/createIncident.spec.jsx b/tests/js/spec/views/issueList/createIncident.spec.jsx
index b0045db353..66518b7850 100644
--- a/tests/js/spec/views/issueList/createIncident.spec.jsx
+++ b/tests/js/spec/views/issueList/createIncident.spec.jsx
@@ -108,6 +108,14 @@ describe('IssueList --> Create Incident', function() {
         }),
       ],
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/sent-first-event/',
+      body: {sentFirstEvent: true},
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects/',
+      body: [project],
+    });
   });
 
   afterEach(function() {
diff --git a/tests/js/spec/views/issueList/overview.spec.jsx b/tests/js/spec/views/issueList/overview.spec.jsx
index ed9b47363a..97ff4d19fc 100644
--- a/tests/js/spec/views/issueList/overview.spec.jsx
+++ b/tests/js/spec/views/issueList/overview.spec.jsx
@@ -92,6 +92,14 @@ describe('IssueList,', function() {
       method: 'GET',
       body: [TestStubs.Member({projects: [project.slug]})],
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/sent-first-event/',
+      body: {sentFirstEvent: true},
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects/',
+      body: [project],
+    });
 
     TagStore.init();
 
@@ -1228,20 +1236,22 @@ describe('IssueList,', function() {
       expect(fetchDataMock).toHaveBeenCalled();
     });
 
-    it('fetches data on location change', function() {
+    it('fetches data on location change', async function() {
       const queryAttrs = ['query', 'sort', 'statsPeriod', 'cursor', 'groupStatsPeriod'];
-      let location = cloneDeep(props.location);
-      queryAttrs.forEach(async (attr, i) => {
+      const location = cloneDeep(props.location);
+      for (const [i, attr] of queryAttrs.entries()) {
         // reclone each iteration so that only one property changes.
-        location = cloneDeep(location);
-        location.query[attr] = 'newValue';
-        wrapper.setProps({location});
+        const newLocation = cloneDeep(location);
+        newLocation.query[attr] = 'newValue';
+        wrapper.setProps({location: newLocation});
         await tick();
         wrapper.update();
 
-        // Each property change should cause a new fetch incrementing the call count.
-        expect(fetchDataMock).toHaveBeenCalledTimes(i + 1);
-      });
+        // Each property change after the first will actually cause two new
+        // fetchData calls, one from the property change and another from a
+        // change in this.state.issuesLoading going from false to true.
+        expect(fetchDataMock).toHaveBeenCalledTimes(2 * i + 1);
+      }
     });
 
     it('uses correct statsPeriod when fetching issues list and no datetime given', async function() {
@@ -1328,7 +1338,7 @@ describe('IssueList,', function() {
 
   describe('render states', function() {
     beforeEach(function() {
-      wrapper = shallow(<IssueListOverview {...props} />, {
+      wrapper = mountWithTheme(<IssueListOverview {...props} />, {
         disableLifecycleMethods: false,
       });
     });
@@ -1350,18 +1360,20 @@ describe('IssueList,', function() {
       expect(error.props().message).toEqual('Things broke');
     });
 
-    it('displays congrats robots animation with only is:unresolved query', function() {
+    it('displays congrats robots animation with only is:unresolved query', async function() {
       wrapper.setState({
         savedSearchLoading: false,
         issuesLoading: false,
         error: false,
         groupIds: [],
       });
+      await tick();
+      wrapper.update();
 
-      expect(wrapper.find('lazy[data-test-id="congrats-robots"]').exists()).toBe(true);
+      expect(wrapper.find('CongratsRobots').exists()).toBe(true);
     });
 
-    it('displays an empty resultset with is:unresolved and level:error query', function() {
+    it('displays an empty resultset with is:unresolved and level:error query', async function() {
       const errorsOnlyQuery = {
         ...props,
         location: {
@@ -1369,7 +1381,7 @@ describe('IssueList,', function() {
         },
       };
 
-      wrapper = shallow(<IssueListOverview {...errorsOnlyQuery} />, {
+      wrapper = mountWithTheme(<IssueListOverview {...errorsOnlyQuery} />, {
         disableLifecycleMethods: false,
       });
 
@@ -1378,11 +1390,16 @@ describe('IssueList,', function() {
         issuesLoading: false,
         error: false,
         groupIds: [],
+        fetchingSentFirstEvent: false,
+        sentFirstEvent: true,
       });
+      await tick();
+      wrapper.update();
+
       expect(wrapper.find('EmptyStateWarning').exists()).toBe(true);
     });
 
-    it('displays an empty resultset with has:browser query', function() {
+    it('displays an empty resultset with has:browser query', async function() {
       const hasBrowserQuery = {
         ...props,
         location: {
@@ -1390,7 +1407,7 @@ describe('IssueList,', function() {
         },
       };
 
-      wrapper = shallow(<IssueListOverview {...hasBrowserQuery} />, {
+      wrapper = mountWithTheme(<IssueListOverview {...hasBrowserQuery} />, {
         disableLifecycleMethods: false,
       });
 
@@ -1399,7 +1416,12 @@ describe('IssueList,', function() {
         issuesLoading: false,
         error: false,
         groupIds: [],
+        fetchingSentFirstEvent: false,
+        sentFirstEvent: true,
       });
+      await tick();
+      wrapper.update();
+
       expect(wrapper.find('EmptyStateWarning').exists()).toBe(true);
     });
   });
@@ -1407,6 +1429,7 @@ describe('IssueList,', function() {
   describe('Error Robot', function() {
     const createWrapper = moreProps => {
       const defaultProps = {
+        ...props,
         savedSearchLoading: false,
         useOrgSavedSearches: true,
         selection: {
@@ -1421,7 +1444,7 @@ describe('IssueList,', function() {
         }),
         ...moreProps,
       };
-      const localWrapper = shallow(<IssueListOverview {...defaultProps} />, {
+      const localWrapper = mountWithTheme(<IssueListOverview {...defaultProps} />, {
         disableLifecycleMethods: false,
       });
       localWrapper.setState({
@@ -1433,65 +1456,125 @@ describe('IssueList,', function() {
       return localWrapper;
     };
 
-    it('displays when no projects selected and all projects user is member of, does not have first event', function() {
+    it('displays when no projects selected and all projects user is member of, does not have first event', async function() {
+      const projects = [
+        TestStubs.Project({
+          id: '1',
+          slug: 'foo',
+          isMember: true,
+          firstEvent: false,
+        }),
+        TestStubs.Project({
+          id: '2',
+          slug: 'bar',
+          isMember: true,
+          firstEvent: false,
+        }),
+        TestStubs.Project({
+          id: '3',
+          slug: 'baz',
+          isMember: true,
+          firstEvent: false,
+        }),
+      ];
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/sent-first-event/',
+        query: {
+          is_member: true,
+        },
+        body: {sentFirstEvent: false},
+      });
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/projects/',
+        body: projects,
+      });
       wrapper = createWrapper({
         organization: TestStubs.Organization({
-          projects: [
-            TestStubs.Project({
-              id: '1',
-              slug: 'foo',
-              isMember: true,
-              firstEvent: false,
-            }),
-            TestStubs.Project({
-              id: '2',
-              slug: 'bar',
-              isMember: true,
-              firstEvent: false,
-            }),
-            TestStubs.Project({
-              id: '3',
-              slug: 'baz',
-              isMember: true,
-              firstEvent: false,
-            }),
-          ],
+          projects,
         }),
       });
+      await tick();
+      wrapper.update();
 
       expect(wrapper.find(ErrorRobot)).toHaveLength(1);
     });
 
-    it('does not display when no projects selected and any projects have a first event', function() {
+    it('does not display when no projects selected and any projects have a first event', async function() {
+      const projects = [
+        TestStubs.Project({
+          id: '1',
+          slug: 'foo',
+          isMember: true,
+          firstEvent: false,
+        }),
+        TestStubs.Project({
+          id: '2',
+          slug: 'bar',
+          isMember: true,
+          firstEvent: true,
+        }),
+        TestStubs.Project({
+          id: '3',
+          slug: 'baz',
+          isMember: true,
+          firstEvent: false,
+        }),
+      ];
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/sent-first-event/',
+        query: {
+          is_member: true,
+        },
+        body: {sentFirstEvent: true},
+      });
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/projects/',
+        body: projects,
+      });
       wrapper = createWrapper({
         organization: TestStubs.Organization({
-          projects: [
-            TestStubs.Project({
-              id: '1',
-              slug: 'foo',
-              isMember: true,
-              firstEvent: false,
-            }),
-            TestStubs.Project({
-              id: '2',
-              slug: 'bar',
-              isMember: true,
-              firstEvent: true,
-            }),
-            TestStubs.Project({
-              id: '3',
-              slug: 'baz',
-              isMember: true,
-              firstEvent: false,
-            }),
-          ],
+          projects,
         }),
       });
+      await tick();
+      wrapper.update();
 
       expect(wrapper.find(ErrorRobot)).toHaveLength(0);
     });
 
-    it('displays when all selected projects do not have first event', function() {
+    it('displays when all selected projects do not have first event', async function() {
+      const projects = [
+        TestStubs.Project({
+          id: '1',
+          slug: 'foo',
+          isMember: true,
+          firstEvent: false,
+        }),
+        TestStubs.Project({
+          id: '2',
+          slug: 'bar',
+          isMember: true,
+          firstEvent: false,
+        }),
+        TestStubs.Project({
+          id: '3',
+          slug: 'baz',
+          isMember: true,
+          firstEvent: false,
+        }),
+      ];
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/sent-first-event/',
+        query: {
+          project: [1, 2],
+        },
+        body: {sentFirstEvent: false},
+      });
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/projects/',
+        body: projects,
+      });
+
       wrapper = createWrapper({
         selection: {
           projects: [1, 2],
@@ -1499,33 +1582,48 @@ describe('IssueList,', function() {
           datetime: {period: '14d'},
         },
         organization: TestStubs.Organization({
-          projects: [
-            TestStubs.Project({
-              id: '1',
-              slug: 'foo',
-              isMember: true,
-              firstEvent: false,
-            }),
-            TestStubs.Project({
-              id: '2',
-              slug: 'bar',
-              isMember: true,
-              firstEvent: false,
-            }),
-            TestStubs.Project({
-              id: '3',
-              slug: 'baz',
-              isMember: true,
-              firstEvent: false,
-            }),
-          ],
+          projects,
         }),
       });
+      await tick();
+      wrapper.update();
 
       expect(wrapper.find(ErrorRobot)).toHaveLength(1);
     });
 
     it('does not display when any selected projects have first event', function() {
+      const projects = [
+        TestStubs.Project({
+          id: '1',
+          slug: 'foo',
+          isMember: true,
+          firstEvent: false,
+        }),
+        TestStubs.Project({
+          id: '2',
+          slug: 'bar',
+          isMember: true,
+          firstEvent: true,
+        }),
+        TestStubs.Project({
+          id: '3',
+          slug: 'baz',
+          isMember: true,
+          firstEvent: true,
+        }),
+      ];
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/sent-first-event/',
+        query: {
+          project: [1, 2],
+        },
+        body: {sentFirstEvent: true},
+      });
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/projects/',
+        body: projects,
+      });
+
       wrapper = createWrapper({
         selection: {
           projects: [1, 2],
@@ -1533,26 +1631,7 @@ describe('IssueList,', function() {
           datetime: {period: '14d'},
         },
         organization: TestStubs.Organization({
-          projects: [
-            TestStubs.Project({
-              id: '1',
-              slug: 'foo',
-              isMember: true,
-              firstEvent: false,
-            }),
-            TestStubs.Project({
-              id: '2',
-              slug: 'bar',
-              isMember: true,
-              firstEvent: true,
-            }),
-            TestStubs.Project({
-              id: '3',
-              slug: 'baz',
-              isMember: true,
-              firstEvent: true,
-            }),
-          ],
+          projects,
         }),
       });
 
