commit 513bc48dee630230d6e28a57c78e421b00156132
Author: Mark Story <mark@mark-story.com>
Date:   Thu Dec 6 13:25:53 2018 -0500

    feat(teams) Delete expired member invites (#10751)
    
    Now that we track when member invites expire we can clean out old ones
    in the database. Invites cannot be re-activated so deleting should be
    safe.

diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index b0c514b938..b42b781cfe 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -309,3 +309,16 @@ class OrganizationMember(Model):
 
     def get_scopes(self):
         return roles.get(self.role).scopes
+
+    @classmethod
+    def delete_expired(cls, threshold):
+        """
+        Delete un-accepted member invitations that expired
+        ``threshold`` days ago.
+        """
+        cls.objects.filter(
+            token_expires_at__lt=threshold,
+            user_id__exact=None,
+        ).exclude(
+            email__exact=None
+        ).delete()
diff --git a/src/sentry/runner/commands/cleanup.py b/src/sentry/runner/commands/cleanup.py
index ecfeefb378..ff7e532ac5 100644
--- a/src/sentry/runner/commands/cleanup.py
+++ b/src/sentry/runner/commands/cleanup.py
@@ -203,6 +203,13 @@ def cleanup(days, project, concurrency, silent, model, router, timed):
             date_added__lte=timezone.now() - timedelta(hours=48)
         ).delete()
 
+    if is_filtered(models.OrganizationMember) and not silent:
+        click.echo('>> Skipping OrganizationMember')
+    else:
+        click.echo('Removing expired values for OrganizationMember')
+        expired_threshold = timezone.now() - timedelta(days=days)
+        models.OrganizationMember.delete_expired(expired_threshold)
+
     for model in [models.ApiGrant, models.ApiToken]:
         if not silent:
             click.echo(u'Removing expired values for {}'.format(model.__name__))
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index e52aecfbed..c440a457ae 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -128,3 +128,55 @@ class OrganizationMemberTest(TestCase):
         assert member.token_expires_at
         expires_at = timezone.now() + timedelta(days=INVITE_DAYS_VALID)
         assert member.token_expires_at.date() == expires_at.date()
+
+    def test_delete_expired_clear(self):
+        organization = self.create_organization()
+        ninety_one_days = timezone.now() - timedelta(days=1)
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            role='member',
+            email='test@example.com',
+            token='abc-def',
+            token_expires_at=ninety_one_days
+        )
+        OrganizationMember.delete_expired(timezone.now())
+        assert OrganizationMember.objects.filter(id=member.id).first() is None
+
+    def test_delete_expired_miss(self):
+        organization = self.create_organization()
+        tomorrow = timezone.now() + timedelta(days=1)
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            role='member',
+            email='test@example.com',
+            token='abc-def',
+            token_expires_at=tomorrow
+        )
+        OrganizationMember.delete_expired(timezone.now())
+        assert OrganizationMember.objects.get(id=member.id)
+
+    def test_delete_expired_leave_claimed(self):
+        user = self.create_user()
+        organization = self.create_organization()
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            role='member',
+            user=user,
+            email='test@example.com',
+            token='abc-def',
+            token_expires_at='2018-01-01 10:00:00'
+        )
+        OrganizationMember.delete_expired(timezone.now())
+        assert OrganizationMember.objects.get(id=member.id)
+
+    def test_delete_expired_leave_null_expires(self):
+        organization = self.create_organization()
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            role='member',
+            email='test@example.com',
+            token='abc-def',
+            token_expires_at=None
+        )
+        OrganizationMember.delete_expired(timezone.now())
+        assert OrganizationMember.objects.get(id=member.id)
