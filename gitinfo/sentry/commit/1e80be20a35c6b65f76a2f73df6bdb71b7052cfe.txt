commit 1e80be20a35c6b65f76a2f73df6bdb71b7052cfe
Author: evanh <evanh@users.noreply.github.com>
Date:   Thu Jan 30 13:41:22 2020 -0500

    tweak(discover) Attempt to return more meaningful errors (#16703)
    
    Try to return more meaningful errors to the user depending on the snuba error
    that's returned.

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 5ea9f0af47..6f1facb291 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -100,6 +100,7 @@ class OrganizationEventsV2Endpoint(OrganizationEventsEndpointBase):
         except OrganizationEventsError as exc:
             raise ParseError(detail=six.text_type(exc))
         except NoProjects:
+
             return Response([])
 
         has_global_views = features.has(
@@ -134,7 +135,7 @@ class OrganizationEventsV2Endpoint(OrganizationEventsEndpointBase):
             )
         except discover.InvalidSearchQuery as error:
             raise ParseError(detail=six.text_type(error))
-        except snuba.SnubaError as error:
+        except (snuba.SnubaError, snuba.QueryOutsideRetentionError) as error:
             logger.info(
                 "organization.events.snuba-error",
                 extra={
@@ -143,7 +144,31 @@ class OrganizationEventsV2Endpoint(OrganizationEventsEndpointBase):
                     "error": six.text_type(error),
                 },
             )
-            raise ParseError(detail="Invalid query.")
+            message = "Internal error. Please try again."
+            if isinstance(error, snuba.QueryIllegalTypeOfArgument):
+                message = "Invalid query. Argument to function is wrong type."
+            elif isinstance(error, snuba.QueryOutsideRetentionError):
+                message = "Invalid date range. Please try a more recent date range."
+            elif isinstance(
+                error,
+                (
+                    snuba.RateLimitExceeded,
+                    snuba.QueryMemoryLimitExceeded,
+                    snuba.QueryTooManySimultaneous,
+                ),
+            ):
+                message = "Query timeout. Please try again. If the problem persists try a smaller date range or fewer projects."
+            elif isinstance(
+                error,
+                (
+                    snuba.UnqualifiedQueryError,
+                    snuba.QueryExecutionError,
+                    snuba.SchemaValidationError,
+                ),
+            ):
+                message = "Invalid query."
+
+            raise ParseError(detail=message)
 
     def handle_results_with_meta(self, request, organization, project_ids, results):
         data = self.handle_data(request, organization, project_ids, results.get("data"))
diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index a520e90a9f..125cecefb6 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -304,7 +304,7 @@ def query(
     auto_fields (bool) Set to true to have project + eventid fields automatically added.
     """
     if not selected_columns:
-        raise InvalidSearchQuery("No fields provided")
+        raise InvalidSearchQuery("No columns selected")
 
     snuba_filter = get_filter(query, params)
 
@@ -340,7 +340,9 @@ def query(
         )
         if not found:
             raise InvalidSearchQuery(
-                "Aggregates used in a condition must also be in the selected columns."
+                u"Aggregate {} used in a condition but is not a selected column.".format(
+                    having_clause[0]
+                )
             )
 
     result = raw_query(
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 38fc1299df..983647d771 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -224,7 +224,7 @@ class QueryTransformTest(TestCase):
                 query="event.type:transaction",
                 params={"project_id": [self.project.id]},
             )
-        assert "No fields" in six.text_type(err)
+        assert "No columns selected" in six.text_type(err)
         assert mock_query.call_count == 0
 
     @patch("sentry.snuba.discover.raw_query")
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index a07bc2c755..cc2c77b190 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -5,7 +5,15 @@ from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import before_now, iso_format
+
 from sentry.utils.samples import load_data
+from sentry.utils.compat.mock import patch
+from sentry.utils.snuba import (
+    RateLimitExceeded,
+    QueryOutsideRetentionError,
+    QueryIllegalTypeOfArgument,
+    QueryExecutionError,
+)
 
 
 class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
@@ -70,6 +78,63 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             == "Parse error: 'search' (column 4). This is commonly caused by unmatched-parentheses. Enclose any text in double quotes."
         )
 
+    @patch("sentry.snuba.discover.raw_query")
+    def test_handling_snuba_errors(self, mock_query):
+        mock_query.side_effect = RateLimitExceeded("test")
+
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        self.store_event(
+            data={"event_id": "a" * 32, "message": "how to make fast"}, project_id=project.id
+        )
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                data={"field": ["id", "timestamp"], "orderby": ["-timestamp", "-id"]},
+                format="json",
+            )
+
+        assert response.status_code == 400, response.content
+        assert (
+            response.data["detail"]
+            == "Query timeout. Please try again. If the problem persists try a smaller date range or fewer projects."
+        )
+
+        mock_query.side_effect = QueryExecutionError("test")
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                data={"field": ["id", "timestamp"], "orderby": ["-timestamp", "-id"]},
+                format="json",
+            )
+
+        assert response.status_code == 400, response.content
+        assert response.data["detail"] == "Invalid query."
+
+        mock_query.side_effect = QueryIllegalTypeOfArgument("test")
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                data={"field": ["id", "timestamp"], "orderby": ["-timestamp", "-id"]},
+                format="json",
+            )
+
+        assert response.status_code == 400, response.content
+        assert response.data["detail"] == "Invalid query. Argument to function is wrong type."
+
+        mock_query.side_effect = QueryOutsideRetentionError("test")
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                data={"field": ["id", "timestamp"], "orderby": ["-timestamp", "-id"]},
+                format="json",
+            )
+
+        assert response.status_code == 400, response.content
+        assert response.data["detail"] == "Invalid date range. Please try a more recent date range."
+
     def test_raw_data(self):
         self.login_as(user=self.user)
         project = self.create_project()
@@ -713,7 +778,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         with self.feature("organizations:discover-basic"):
             response = self.client.get(self.url, format="json", data={"query": "test"})
         assert response.status_code == 400, response.content
-        assert response.data["detail"] == "No fields provided"
+        assert response.data["detail"] == "No columns selected"
 
     def test_condition_on_aggregate_misses(self):
         self.login_as(user=self.user)
