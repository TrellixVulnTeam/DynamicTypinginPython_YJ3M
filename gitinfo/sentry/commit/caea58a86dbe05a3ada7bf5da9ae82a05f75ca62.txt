commit caea58a86dbe05a3ada7bf5da9ae82a05f75ca62
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Nov 15 09:46:05 2018 -0800

    fix(ui): Batch requests for stats on org dashboard (ISSUE-197) (#10604)

diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 919c7ba19e..4884df7e4f 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -1,11 +1,11 @@
-import {debounce} from 'lodash';
+import {chunk, debounce} from 'lodash';
 
 import {
   addLoadingMessage,
   addErrorMessage,
   addSuccessMessage,
 } from 'app/actionCreators/indicator';
-import {tct} from 'app/locale';
+import {t, tct} from 'app/locale';
 import ProjectActions from 'app/actions/projectActions';
 import ProjectsStatsStore from 'app/stores/projectsStatsStore';
 
@@ -49,7 +49,23 @@ export function loadStats(api, params) {
 // Will be cleared when debounced function fires
 let _projectStatsToFetch = new Set();
 
-const _debouncedLoadStats = debounce((api, projectSet, params) => {
+// Max projects to query at a time, otherwise if we fetch too many in the same request
+// it can timeout
+const MAX_PROJECTS_TO_FETCH = 10;
+
+const _queryForStats = (api, projects, orgId) => {
+  let idQueryParams = projects.map(project => `id:${project}`).join(' ');
+  let endpoint = `/organizations/${orgId}/projects/`;
+
+  return api.requestPromise(endpoint, {
+    query: {
+      statsPeriod: '24h',
+      query: idQueryParams,
+    },
+  });
+};
+
+export const _debouncedLoadStats = debounce((api, projectSet, params) => {
   let existingProjectStats = Object.values(ProjectsStatsStore.getAll()).map(({id}) => id);
   let projects = Array.from(projectSet).filter(
     project => !existingProjectStats.includes(project)
@@ -60,19 +76,21 @@ const _debouncedLoadStats = debounce((api, projectSet, params) => {
     return;
   }
 
-  let idQueryParams = projects.map(project => `id:${project}`).join(' ');
-  let endpoint = `/organizations/${params.orgId}/projects/`;
+  // Split projects into more manageable chunks to query, otherwise we can
+  // potentially face server timeouts
+  const queries = chunk(projects, MAX_PROJECTS_TO_FETCH).map(chunkedProjects =>
+    _queryForStats(api, chunkedProjects, params.orgId)
+  );
 
-  api.request(endpoint, {
-    query: {
-      statsPeriod: '24h',
-      query: idQueryParams,
-    },
-    success: data => {
-      ProjectActions.loadStatsForProjectSuccess(data);
-    },
-    error: data => {},
-  });
+  Promise.all(queries)
+    .then(results => {
+      ProjectActions.loadStatsForProjectSuccess(
+        results.reduce((acc, result) => acc.concat(result), [])
+      );
+    })
+    .catch(err => {
+      addErrorMessage(t('Unable to fetch all project stats'));
+    });
 
   // Reset projects list
   _projectStatsToFetch.clear();
diff --git a/tests/js/spec/actionCreators/projects.spec.jsx b/tests/js/spec/actionCreators/projects.spec.jsx
new file mode 100644
index 0000000000..469798def4
--- /dev/null
+++ b/tests/js/spec/actionCreators/projects.spec.jsx
@@ -0,0 +1,31 @@
+import {Client} from 'app/api';
+import {_debouncedLoadStats} from 'app/actionCreators/projects';
+
+describe('Projects ActionCreators', function() {
+  const api = new Client();
+  const organization = TestStubs.Organization();
+  let mock;
+
+  it('loadStatsForProject', function() {
+    jest.useFakeTimers();
+    mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects/',
+    });
+    expect(mock).not.toHaveBeenCalled();
+
+    _debouncedLoadStats(api, new Set([...Array(50)].map((_, i) => i)), {
+      orgId: organization.slug,
+    });
+
+    expect(mock).toHaveBeenCalledTimes(5);
+    expect(mock).toHaveBeenLastCalledWith(
+      '/organizations/org-slug/projects/',
+      expect.objectContaining({
+        query: {
+          statsPeriod: '24h',
+          query: 'id:40 id:41 id:42 id:43 id:44 id:45 id:46 id:47 id:48 id:49',
+        },
+      })
+    );
+  });
+});
diff --git a/tests/js/spec/views/organizationDashboard/index.spec.jsx b/tests/js/spec/views/organizationDashboard/index.spec.jsx
index ae822c3d4e..f380178084 100644
--- a/tests/js/spec/views/organizationDashboard/index.spec.jsx
+++ b/tests/js/spec/views/organizationDashboard/index.spec.jsx
@@ -95,10 +95,12 @@ describe('OrganizationDashboard', function() {
     beforeEach(function() {});
 
     it('renders TeamSection', function() {
-      const projects = [TestStubs.Project({
-        teams,
-        firstEvent: true,
-      })];
+      const projects = [
+        TestStubs.Project({
+          teams,
+          firstEvent: true,
+        }),
+      ];
 
       const wrapper = shallow(
         <Dashboard
@@ -118,11 +120,13 @@ describe('OrganizationDashboard', function() {
     });
 
     it('renders favorited project in favorites section ', function() {
-      const projects = [TestStubs.Project({
-        teams,
-        isBookmarked: true,
-        firstEvent: true,
-      })];
+      const projects = [
+        TestStubs.Project({
+          teams,
+          isBookmarked: true,
+          firstEvent: true,
+        }),
+      ];
 
       const wrapper = shallow(
         <Dashboard
@@ -204,6 +208,7 @@ describe('OrganizationDashboard', function() {
       );
 
       jest.runAllTimers();
+      jest.useRealTimers();
 
       const projectCards = wrapper.find('LazyLoadMock ProjectCard');
       expect(projectCards.at(0).prop('data-test-id')).toBe('a-fave');
@@ -288,7 +293,7 @@ describe('OrganizationDashboard', function() {
       }),
     ];
 
-    it('uses ProjectsStatsStore to load stats', function() {
+    it('uses ProjectsStatsStore to load stats', async function() {
       jest.useFakeTimers();
       ProjectsStatsStore.onStatsLoadSuccess([{...projects[0], stats: [[1517281200, 2]]}]);
       const loadStatsSpy = jest.spyOn(projectsActions, 'loadStatsForProject');
@@ -319,7 +324,6 @@ describe('OrganizationDashboard', function() {
 
       // Advance timers so that batched request fires
       jest.advanceTimersByTime(51);
-
       expect(mock).toHaveBeenCalledTimes(1);
       // query ids = 3, 2, 4 = bookmarked
       // 1 - already loaded in store so shouldn't be in query
@@ -331,10 +335,12 @@ describe('OrganizationDashboard', function() {
           }),
         })
       );
+      jest.useRealTimers();
+      await tick();
+      await tick();
       wrapper.update();
       expect(wrapper.find('LoadingCard')).toHaveLength(0);
       expect(wrapper.find('Chart')).toHaveLength(9);
-      jest.useRealTimers();
 
       // Resets store when it unmounts
       wrapper.unmount();
