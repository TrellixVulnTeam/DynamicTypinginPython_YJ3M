commit 926af98c86cae330f9a8ec6b13d0025a07a91453
Author: Eric Feng <eric@getsentry.com>
Date:   Mon Feb 29 14:46:04 2016 -0800

    adding onboarding complete organization option, to resolve #2760 and #2754

diff --git a/src/sentry/api/endpoints/organization_onboarding_tasks.py b/src/sentry/api/endpoints/organization_onboarding_tasks.py
index 1163dc4419..c23120afb9 100644
--- a/src/sentry/api/endpoints/organization_onboarding_tasks.py
+++ b/src/sentry/api/endpoints/organization_onboarding_tasks.py
@@ -7,15 +7,30 @@ from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationPermission
 )
 
-from sentry.models import OnboardingTaskStatus, OrganizationOnboardingTask
+from sentry.models import OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
+from sentry.receivers import check_for_onboarding_complete
 
 
 class OrganizationOnboardingTaskEndpoint(OrganizationEndpoint):
     permission_classes = [OrganizationPermission, ]
 
     def post(self, request, organization):
-        if request.DATA['status'] == 'skipped':
-            OrganizationOnboardingTask.objects.create_or_update(
+        try:
+            task_id = int(request.DATA['task'])
+        except ValueError:
+            return Response(status=500)
+
+        if request.DATA['status'] == 'skipped' and task_id in (
+            OnboardingTask.INVITE_MEMBER,
+            OnboardingTask.SECOND_PLATFORM,
+            OnboardingTask.USER_CONTEXT,
+            OnboardingTask.RELEASE_TRACKING,
+            OnboardingTask.SOURCEMAPS,
+            OnboardingTask.USER_REPORTS,
+            OnboardingTask.ISSUE_TRACKER,
+            OnboardingTask.NOTIFICATION_SERVICE
+        ):
+            rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
                 organization=organization,
                 user=request.user,
                 task=request.DATA['task'],
@@ -24,6 +39,8 @@ class OrganizationOnboardingTaskEndpoint(OrganizationEndpoint):
                     'date_completed': timezone.now(),
                 }
             )
+            if rows_affected or created:
+                check_for_onboarding_complete(organization)
             return Response(status=204)
 
         return Response(status=404)
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 7c0c7a79a6..1482f1a660 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -53,7 +53,7 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         feature_list = []
         if features.has('organizations:sso', obj, actor=user):
             feature_list.append('sso')
-        if features.has('organizations:onboarding', obj, actor=user):
+        if features.has('organizations:onboarding', obj, actor=user) and not OrganizationOption.objects.filter(organization=obj).exists():
             feature_list.append('onboarding')
 
         if getattr(obj.flags, 'allow_joinleave'):
diff --git a/src/sentry/models/organizationonboardingtask.py b/src/sentry/models/organizationonboardingtask.py
index e68b66205a..722ea65de2 100644
--- a/src/sentry/models/organizationonboardingtask.py
+++ b/src/sentry/models/organizationonboardingtask.py
@@ -31,6 +31,8 @@ class OnboardingTask(object):
     ISSUE_TRACKER = 9
     NOTIFICATION_SERVICE = 10
 
+    REQUIRED_ONBOARDING_TASKS = [1, 2, 3, 4, 5, 6, 7, 9, 10]
+
 
 class OnboardingTaskStatus(object):
     """
diff --git a/src/sentry/models/organizationoption.py b/src/sentry/models/organizationoption.py
index 509f49744d..dc21020b6e 100644
--- a/src/sentry/models/organizationoption.py
+++ b/src/sentry/models/organizationoption.py
@@ -111,6 +111,9 @@ class OrganizationOption(Model):
 
     Options which are specific to a plugin should namespace
     their key. e.g. key='myplugin:optname'
+
+    key: onboarding:complete
+    value: { updated: datetime }
     """
     organization = FlexibleForeignKey('sentry.Organization')
     key = models.CharField(max_length=64)
diff --git a/src/sentry/models/useroption.py b/src/sentry/models/useroption.py
index 02ea3647d3..423bb13e3d 100644
--- a/src/sentry/models/useroption.py
+++ b/src/sentry/models/useroption.py
@@ -101,6 +101,10 @@ class UserOption(Model):
 
     Options which are specific to a plugin should namespace
     their key. e.g. key='myplugin:optname'
+
+    Keeping user feature state
+    key: "feature:assignment"
+    value: { updated: datetime, state: bool }
     """
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL)
     project = FlexibleForeignKey('sentry.Project', null=True)
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 50054f7a46..9dc45d7f8c 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -1,10 +1,14 @@
 from __future__ import print_function, absolute_import
 
 from django.db import IntegrityError, transaction
+from django.db.models import Q
 from django.utils import timezone
 
 from sentry.models import (
-    OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
+    OnboardingTask,
+    OnboardingTaskStatus,
+    OrganizationOnboardingTask,
+    OrganizationOption
 )
 from sentry.plugins import IssueTrackingPlugin, NotificationPlugin
 from sentry.signals import (
@@ -20,6 +24,23 @@ from sentry.signals import (
 from sentry.utils.javascript import has_sourcemap
 
 
+def check_for_onboarding_complete(organization):
+    if OrganizationOption.objects.filter(organization=organization, key="onboarding:complete").exists():
+        return
+
+    completed = list(OrganizationOnboardingTask.objects.filter(Q(organization=organization) & (Q(status=OnboardingTaskStatus.COMPLETE) | Q(status=OnboardingTaskStatus.SKIPPED))).values_list('task', flat=True))
+    if sorted(completed) == OnboardingTask.REQUIRED_ONBOARDING_TASKS:
+        try:
+            with transaction.atomic():
+                OrganizationOption.objects.create(
+                    organization=organization,
+                    key="onboarding:complete",
+                    value={'updated': timezone.now()}
+                )
+        except IntegrityError:
+            pass
+
+
 @project_created.connect(weak=False)
 def record_new_project(project, user, **kwargs):
     try:
@@ -128,7 +149,7 @@ def record_member_invited(member, user, **kwargs):
 
 @member_joined.connect(weak=False)
 def record_member_joined(member, **kwargs):
-    OrganizationOnboardingTask.objects.create_or_update(
+    rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
         organization=member.organization,
         task=OnboardingTask.INVITE_MEMBER,
         status=OnboardingTaskStatus.PENDING,
@@ -138,6 +159,8 @@ def record_member_joined(member, **kwargs):
             'data': {'invited_member_id': member.id}
         }
     )
+    if created or rows_affected:
+        check_for_onboarding_complete(organization=member.organization)
 
 
 @event_processed.connect(weak=False)
@@ -152,6 +175,7 @@ def record_release_received(project, group, event, **kwargs):
                     project_id=project.id,
                     date_completed=timezone.now()
                 )
+                check_for_onboarding_complete(project.organization)
         except IntegrityError:
             pass
 
@@ -168,6 +192,7 @@ def record_user_context_received(project, group, event, **kwargs):
                     project_id=project.id,
                     date_completed=timezone.now()
                 )
+                check_for_onboarding_complete(project.organization)
         except IntegrityError:
             pass
 
@@ -184,6 +209,7 @@ def record_sourcemaps_received(project, group, event, **kwargs):
                     project_id=project.id,
                     date_completed=timezone.now()
                 )
+                check_for_onboarding_complete(project.organization)
         except IntegrityError:
             pass
 
@@ -208,13 +234,14 @@ def record_plugin_enabled(plugin, project, user, **kwargs):
                 date_completed=timezone.now(),
                 data={'plugin': plugin.slug}
             )
+            check_for_onboarding_complete(project.organization)
     except IntegrityError:
         pass
 
 
 @issue_tracker_used.connect(weak=False)
 def record_issue_tracker_used(plugin, project, user, **kwargs):
-    OrganizationOnboardingTask.objects.create_or_update(
+    rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
         organization=project.organization,
         task=OnboardingTask.ISSUE_TRACKER,
         status=OnboardingTaskStatus.PENDING,
@@ -226,3 +253,5 @@ def record_issue_tracker_used(plugin, project, user, **kwargs):
             'data': {'plugin': plugin.slug}
         }
     )
+    if rows_affected or created:
+        check_for_onboarding_complete(project.organization)
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
index a9fdb4e566..13c78de13c 100644
--- a/src/sentry/static/sentry/app/components/header/index.jsx
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -24,16 +24,13 @@ const OnboardingStatus = React.createClass({
 
     let percentage = Math.round(
       ((org.onboardingTasks || []).filter(
-        t => t.status === 'complete'
+        t => t.status === 'complete' || t.status === 'skipped'
       ).length) / TodoList.TASKS.length * 100
     ).toString();
     let style = {
       width: percentage + '%',
     };
 
-    if (percentage >= 100)
-      return null;
-
     return (
       <div className="onboarding-progress-bar" onClick={this.props.onToggleTodos}>
         <div className="slider" style={style} ></div>
diff --git a/src/sentry/static/sentry/app/components/todos.jsx b/src/sentry/static/sentry/app/components/todos.jsx
index 481b82dc94..3842fa30ac 100644
--- a/src/sentry/static/sentry/app/components/todos.jsx
+++ b/src/sentry/static/sentry/app/components/todos.jsx
@@ -151,7 +151,7 @@ const TodoList = React.createClass({
         'task': 3,
         'title': t('Invite team member'),
         'description': t('Bring your team aboard'),
-        'skippable': false,
+        'skippable': true,
         'prereq': [],
         'featureLocation': 'organization',
         'location': 'members/',
@@ -160,7 +160,7 @@ const TodoList = React.createClass({
         'task': 4,
         'title': t('Add a second platform'),
         'description': t('Add Sentry to a second platform'),
-        'skippable': false,
+        'skippable': true,
         'prereq': [1, 2],
         'featureLocation': 'organization',
         'location': 'projects/new/',
@@ -169,7 +169,7 @@ const TodoList = React.createClass({
         'task': 5,
         'title': t('Add user context'),
         'description': t('Know who is being affected by crashes'),
-        'skippable': false,
+        'skippable': true,
         'prereq': [1, 2],
         'featureLocation': 'absolute',
         'location': 'https://docs.getsentry.com/hosted/learn/context/#capturing-the-user',
@@ -178,7 +178,7 @@ const TodoList = React.createClass({
         'task': 6,
         'title': t('Set up release tracking'),
         'description': t('See what releases are generating errors.'),
-        'skippable': false,
+        'skippable': true,
         'prereq': [1, 2],
         'featureLocation': 'project',
         'location': 'settings/release-tracking/',
@@ -187,8 +187,8 @@ const TodoList = React.createClass({
         'task': 7,
         'title': t('Upload sourcemaps'),
         'description': t('Deminify javascript stacktraces'),
-        'skippable': false,
-        'prereq': [1, 2, 8], // Is one of the platforms javascript?
+        'skippable': true,
+        'prereq': [1, 2], // Is one of the platforms javascript?
         'featureLocation': 'absolute',
         'location': 'https://docs.getsentry.com/hosted/clients/javascript/sourcemaps/'
       },
@@ -291,7 +291,7 @@ const TodoList = React.createClass({
       next_tasks = this.state.tasks;
     } else {
       next_tasks = this.state.tasks.filter( (task) => {
-        if (task.status != 'complete') {
+        if (task.status != 'complete' && task.status != 'skipped') {
           return task;
         }
       }).slice(0,3);
diff --git a/tests/sentry/api/endpoints/test_onboarding.py b/tests/sentry/api/endpoints/test_onboarding.py
index e078d889aa..b046f14f32 100644
--- a/tests/sentry/api/endpoints/test_onboarding.py
+++ b/tests/sentry/api/endpoints/test_onboarding.py
@@ -14,7 +14,7 @@ class SkipOnboardingTaskTest(APITestCase):
 
         organization = self.create_organization(name='foo', owner=self.user)
         url = reverse('sentry-api-0-organization-onboardingtasks', kwargs={'organization_slug': organization.slug})
-        self.client.post(url, data={'task': 9, 'status': 'skipped'}, format='json')
+        self.client.post(url, data={'task': '9', 'status': 'skipped'}, format='json')
 
         oot = OrganizationOnboardingTask.objects.get(
             organization=organization,
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 7df7ae76ba..782dbd40ca 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.utils import timezone
 
 from sentry.models import (
-    OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
+    OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask, OrganizationOption
 )
 from sentry.signals import (
     event_processed,
@@ -215,3 +215,24 @@ class OrganizationOnboardingTaskTest(TestCase):
             status=OnboardingTaskStatus.COMPLETE,
         )
         assert task is not None
+
+    def test_onboarding_complete(self):
+        user = self.create_user(email='test@example.org')
+        project = self.create_project(first_event=timezone.now())
+        second_project = self.create_project(first_event=timezone.now())
+        second_group = self.create_group(project=second_project, platform='python', message='python error message')
+        event = self.create_full_event()
+        member = self.create_member(organization=self.organization, teams=[self.team], user=user)
+
+        event_processed.send(project=project, group=self.group, event=event, sender=type(project))
+        project_created.send(project=project, user=user, sender=type(project))
+        project_created.send(project=second_project, user=user, sender=type(second_project))
+
+        first_event_received.send(project=project, group=self.group, sender=type(project))
+        first_event_received.send(project=second_project, group=second_group, sender=type(second_project))
+        member_joined.send(member=member, sender=type(member))
+        plugin_enabled.send(plugin=IssueTrackingPlugin(), project=project, user=user, sender=type(IssueTrackingPlugin))
+        issue_tracker_used.send(plugin=IssueTrackingPlugin(), project=project, user=user, sender=type(IssueTrackingPlugin))
+        plugin_enabled.send(plugin=NotificationPlugin(), project=project, user=user, sender=type(NotificationPlugin))
+
+        assert OrganizationOption.objects.filter(organization=self.organization, key="onboarding:complete").count() == 1
