commit 27d55f64ec3db65bb3f8b962b80e62c7565bbd13
Author: Nimish Singhal <nimishsinghal188@gmail.com>
Date:   Tue Mar 28 04:19:28 2017 +0530

    Automatically self-assign issue on resolve (#5059)

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index d537baca94..b3b21fc035 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -23,7 +23,7 @@ from sentry.db.models.query import create_or_update
 from sentry.models import (
     Activity, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash,
     GroupResolution, GroupSeen, GroupSnooze, GroupStatus, GroupSubscription,
-    GroupSubscriptionReason, Release, TagKey
+    GroupSubscriptionReason, Release, TagKey, UserOption
 )
 from sentry.models.event import Event
 from sentry.models.group import looks_like_short_id
@@ -34,6 +34,7 @@ from sentry.tasks.deletion import delete_group
 from sentry.tasks.merge import merge_group
 from sentry.utils.apidocs import attach_scenarios, scenario
 from sentry.utils.cursors import Cursor
+from sentry.utils.functional import extract_lazy_object
 
 delete_logger = logging.getLogger('sentry.deletions.api')
 
@@ -168,6 +169,22 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         return query_kwargs
 
+    def _subscribe_and_assign_issue(self, acting_user, group, result):
+        if acting_user:
+            GroupSubscription.objects.subscribe(
+                user=acting_user,
+                group=group,
+                reason=GroupSubscriptionReason.status_change,
+            )
+            self_assign_issue = UserOption.objects.get_value(
+                user=acting_user,
+                project=None,
+                key='self_assign_issue',
+                default='0'
+            )
+            if self_assign_issue == '1' and not group.assignee_set.exists():
+                result['assignedTo'] = extract_lazy_object(acting_user)
+
     # bookmarks=0/1
     # status=<x>
     # <tag>=<value>
@@ -358,7 +375,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         )
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
-
         result = dict(serializer.object)
 
         acting_user = request.user if request.user.is_authenticated() else None
@@ -408,12 +424,9 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                         group=group,
                     ), False
 
-                if acting_user:
-                    GroupSubscription.objects.subscribe(
-                        user=acting_user,
-                        group=group,
-                        reason=GroupSubscriptionReason.status_change,
-                    )
+                self._subscribe_and_assign_issue(
+                    acting_user, group, result
+                )
 
                 if created:
                     activity = Activity.objects.create(
@@ -464,12 +477,9 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 for group in group_list:
                     group.status = GroupStatus.RESOLVED
                     group.resolved_at = now
-                    if acting_user:
-                        GroupSubscription.objects.subscribe(
-                            user=acting_user,
-                            group=group,
-                            reason=GroupSubscriptionReason.status_change,
-                        )
+                    self._subscribe_and_assign_issue(
+                        acting_user, group, result
+                    )
                     activity = Activity.objects.create(
                         project=group.project,
                         group=group,
diff --git a/src/sentry/templates/sentry/account/notifications.html b/src/sentry/templates/sentry/account/notifications.html
index 4c1aef45bc..ce6a7ffe92 100644
--- a/src/sentry/templates/sentry/account/notifications.html
+++ b/src/sentry/templates/sentry/account/notifications.html
@@ -104,6 +104,12 @@
 
         <hr />
 
+        <h4>{% trans "Self Assign Issue" %}</h4>
+
+        {{ settings_form.self_assign_issue|as_crispy_field }}
+
+        <hr />
+
         <h4>{% trans "Fine Tuning" %}</h4>
 
         <p>Use the settings below to fine tune notification settings per-project. You may add or verify additional email addresses via the <a href="{% url "sentry-account-settings-emails" %}">Emails</a> settings.</p>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index ad13e24e0b..8d2ef56b09 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -524,6 +524,12 @@ class NotificationSettingsForm(forms.Form):
         required=False,
     )
 
+    self_assign_issue = forms.BooleanField(
+        label=_('Automatically self-assign issue on resolve'),
+        help_text=_("When enabled, you'll automatically be assigned to issues on marking them resolved (when it is unassigned)."),
+        required=False,
+    )
+
     def __init__(self, user, *args, **kwargs):
         self.user = user
         super(NotificationSettingsForm, self).__init__(*args, **kwargs)
@@ -559,6 +565,13 @@ class NotificationSettingsForm(forms.Form):
             default='0'
         ) == '1'
 
+        self.fields['self_assign_issue'].initial = UserOption.objects.get_value(
+            user=self.user,
+            project=None,
+            key='self_assign_issue',
+            default='0'
+        ) == '1'
+
     def get_title(self):
         return "General"
 
@@ -584,6 +597,13 @@ class NotificationSettingsForm(forms.Form):
             value='1' if self.cleaned_data['self_notifications'] else '0',
         )
 
+        UserOption.objects.set_value(
+            user=self.user,
+            project=None,
+            key='self_assign_issue',
+            value='1' if self.cleaned_data['self_assign_issue'] else '0',
+        )
+
         if self.cleaned_data.get('workflow_notifications') is True:
             UserOption.objects.set_value(
                 user=self.user,
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index c45b83cb36..87b46676ce 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -15,7 +15,7 @@ from mock import patch
 from sentry.models import (
     Activity, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash,
     GroupTagValue, GroupResolution, GroupSeen, GroupSnooze, GroupStatus,
-    GroupSubscription, Release
+    GroupSubscription, Release, UserOption
 )
 from sentry.models.event import Event
 from sentry.testutils import APITestCase
@@ -358,6 +358,93 @@ class GroupUpdateTest(APITestCase):
             group=new_group4,
         )
 
+    def test_self_assign_issue(self):
+        group = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        user = self.user
+
+        uo1 = UserOption.objects.create(
+            key='self_assign_issue', value='1',
+            project=None, user=user
+        )
+
+        self.login_as(user=user)
+        url = '{url}?id={group.id}'.format(
+            url=self.path,
+            group=group
+        )
+        response = self.client.put(
+            url, data={
+                'status': 'resolved',
+            },
+            format='json',
+        )
+
+        assert response.status_code == 200, response.data
+        assert response.data['assignedTo']['id'] == six.text_type(user.id)
+        assert response.data['status'] == 'resolved'
+
+        assert GroupAssignee.objects.filter(
+            group=group, user=user
+        ).exists()
+
+        assert GroupSubscription.objects.filter(
+            user=user,
+            group=group,
+            is_active=True,
+        ).exists()
+
+        uo1.delete()
+
+    def test_self_assign_issue_next_release(self):
+        release = Release.objects.create(organization_id=self.project.organization_id,
+                                         version='a')
+        release.add_project(self.project)
+
+        group = self.create_group(
+            checksum='a' * 32,
+            status=GroupStatus.UNRESOLVED,
+        )
+
+        uo1 = UserOption.objects.create(
+            key='self_assign_issue', value='1',
+            project=None, user=self.user
+        )
+
+        self.login_as(user=self.user)
+
+        url = '{url}?id={group.id}'.format(
+            url=self.path,
+            group=group,
+        )
+        response = self.client.put(url, data={
+            'status': 'resolvedInNextRelease',
+        }, format='json')
+        assert response.status_code == 200
+        assert response.data['status'] == 'resolved'
+        assert response.data['statusDetails']['inNextRelease']
+        assert response.data['assignedTo']['id'] == six.text_type(self.user.id)
+
+        group = Group.objects.get(id=group.id)
+        assert group.status == GroupStatus.RESOLVED
+
+        assert GroupResolution.objects.filter(
+            group=group,
+            release=release,
+        ).exists()
+
+        assert GroupSubscription.objects.filter(
+            user=self.user,
+            group=group,
+            is_active=True,
+        ).exists()
+
+        activity = Activity.objects.get(
+            group=group,
+            type=Activity.SET_RESOLVED_IN_RELEASE,
+        )
+        assert activity.data['version'] == ''
+        uo1.delete()
+
     def test_selective_status_update(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
