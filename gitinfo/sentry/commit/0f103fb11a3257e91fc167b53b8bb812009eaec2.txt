commit 0f103fb11a3257e91fc167b53b8bb812009eaec2
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Feb 25 11:39:48 2019 -0800

    feat(service-hooks): Use ServiceHookProject for hook lookup (#12022)
    
    * feat(service-hooks): Use ServiceHookProject for hook lookup

diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index a1258827f8..461ab9c439 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -31,9 +31,12 @@ def _get_service_hooks(project_id):
     from sentry.models import ServiceHook
     cache_key = u'servicehooks:1:{}'.format(project_id)
     result = cache.get(cache_key)
+
     if result is None:
-        result = [(h.id, h.events) for h in
-                  ServiceHook.objects.filter(project_id=project_id)]
+        hooks = ServiceHook.objects.filter(
+            servicehookproject__project_id=project_id,
+        )
+        result = [(h.id, h.events) for h in hooks]
         cache.set(cache_key, result, 60)
     return result
 
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index a26fd07992..05610dc72e 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -12,7 +12,7 @@ from sentry.tasks.base import instrumented_task, retry
 from sentry.utils.http import absolute_uri
 from sentry.api.serializers import serialize, AppPlatformEvent
 from sentry.models import (
-    SentryAppInstallation, Group, User, ServiceHook, Project, SentryApp,
+    SentryAppInstallation, Group, User, ServiceHook, ServiceHookProject, SentryApp,
 )
 from sentry.models.sentryapp import VALID_EVENTS
 
@@ -246,21 +246,25 @@ def notify_sentry_app(event, futures):
 
 
 def send_webhooks(installation, event, **kwargs):
-    project_ids = Project.objects.filter(
-        organization_id=installation.organization_id,
-    ).values_list('id', flat=True)
-
-    servicehooks = ServiceHook.objects.filter(
-        project_id__in=project_ids,
-    )
+    try:
+        servicehook = ServiceHook.objects.get(
+            organization_id=installation.organization_id,
+            actor_id=installation.id,
+        )
+    except ServiceHook.DoesNotExist:
+        return
 
-    for servicehook in filter(lambda s: event in s.events, servicehooks):
-        if not servicehook.created_by_sentry_app:
-            continue
+    if event not in servicehook.events:
+        return
 
-        if servicehook.sentry_app != installation.sentry_app:
-            continue
+    # The service hook applies to all projects if there are no
+    # ServiceHookProject records. Otherwise we want check if
+    # the event is within the allowed projects.
+    project_limited = ServiceHookProject.objects.filter(
+        service_hook_id=servicehook.id,
+    ).exists()
 
+    if not project_limited:
         resource, action = event.split('.')
 
         kwargs['resource'] = resource
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 19dc919a9c..86d4e973be 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -782,7 +782,7 @@ class Fixtures(object):
             org = self.create_organization(owner=actor)
         if not project:
             project = self.create_project(organization=org)
-        if not events:
+        if events is None:
             events = ('event.created',)
         if not url:
             url = 'https://example.com/sentry/webhook'
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 8fce29622c..2ac2de2378 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -7,7 +7,7 @@ from django.utils import timezone
 from mock import Mock, patch
 
 from sentry import tagstore
-from sentry.models import Group, GroupSnooze, GroupStatus, ServiceHook
+from sentry.models import Group, GroupSnooze, GroupStatus
 from sentry.testutils import TestCase
 from sentry.tasks.merge import merge_groups
 from sentry.tasks.post_process import index_event_tags, post_process_group
@@ -124,10 +124,10 @@ class PostProcessGroupTest(TestCase):
         group = self.create_group(project=self.project)
         event = self.create_event(group=group)
 
-        hook = ServiceHook.objects.create(
-            project_id=self.project.id,
-            organization_id=self.project.organization_id,
-            actor_id=self.user.id,
+        hook = self.create_service_hook(
+            project=self.project,
+            organization=self.project.organization,
+            actor=self.user,
             events=['event.created'],
         )
 
@@ -158,10 +158,10 @@ class PostProcessGroupTest(TestCase):
             (mock_callback, mock_futures),
         ]
 
-        hook = ServiceHook.objects.create(
-            project_id=self.project.id,
-            organization_id=self.project.organization_id,
-            actor_id=self.user.id,
+        hook = self.create_service_hook(
+            project=self.project,
+            organization=self.project.organization,
+            actor=self.user,
             events=['event.alert'],
         )
 
@@ -188,10 +188,10 @@ class PostProcessGroupTest(TestCase):
 
         mock_processor.return_value.apply.return_value = []
 
-        ServiceHook.objects.create(
-            project_id=self.project.id,
-            organization_id=self.project.organization_id,
-            actor_id=self.user.id,
+        self.create_service_hook(
+            project=self.project,
+            organization=self.project.organization,
+            actor=self.user,
             events=['event.alert'],
         )
 
@@ -211,10 +211,10 @@ class PostProcessGroupTest(TestCase):
         group = self.create_group(project=self.project)
         event = self.create_event(group=group)
 
-        ServiceHook.objects.create(
-            project_id=self.project.id,
-            organization_id=self.project.organization_id,
-            actor_id=self.user.id,
+        self.create_service_hook(
+            project=self.project,
+            organization=self.project.organization,
+            actor=self.user,
             events=[],
         )
 
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index e53681f03f..c840bcd610 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -171,14 +171,6 @@ class TestProcessResourceChange(TestCase):
             slug=self.sentry_app.slug,
         )
 
-        self.hook = self.create_service_hook(
-            actor=self.install,
-            org=self.project.organization,
-            application=self.install.sentry_app.application,
-            project=self.project,
-            events=('issue.created', ),
-        )
-
     def test_group_created_sends_webhook(self, safe_urlopen):
         with self.tasks():
             issue = self.create_group(project=self.project)
@@ -286,3 +278,29 @@ class TestWorkflowNotification(TestCase):
         assert faux(safe_urlopen).kwarg_equals('data.actor.type', 'application', format='json')
         assert faux(safe_urlopen).kwarg_equals('data.actor.id', 'sentry', format='json')
         assert faux(safe_urlopen).kwarg_equals('data.actor.name', 'Sentry', format='json')
+
+    def test_does_not_send_if_no_service_hook_exists(self, safe_urlopen):
+        sentry_app = self.create_sentry_app(
+            name='Another App',
+            organization=self.project.organization,
+            events=[],
+        )
+        install = self.create_sentry_app_installation(
+            organization=self.project.organization,
+            slug=sentry_app.slug,
+        )
+        workflow_notification(install.id, self.issue.id, 'assigned', self.user.id)
+        assert not safe_urlopen.called
+
+    def test_does_not_send_if_event_not_in_app_events(self, safe_urlopen):
+        sentry_app = self.create_sentry_app(
+            name='Another App',
+            organization=self.project.organization,
+            events=['issue.resolved', 'issue.ignored'],
+        )
+        install = self.create_sentry_app_installation(
+            organization=self.project.organization,
+            slug=sentry_app.slug,
+        )
+        workflow_notification(install.id, self.issue.id, 'assigned', self.user.id)
+        assert not safe_urlopen.called
