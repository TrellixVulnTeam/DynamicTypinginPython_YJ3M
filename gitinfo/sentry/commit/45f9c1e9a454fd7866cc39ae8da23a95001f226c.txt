commit 45f9c1e9a454fd7866cc39ae8da23a95001f226c
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon May 15 14:21:44 2017 -0700

    use ReleaseHeadCommit instead of Commit for previous release (#5363)

diff --git a/src/sentry/tasks/commits.py b/src/sentry/tasks/commits.py
index ad4a9da95b..588bb6761e 100644
--- a/src/sentry/tasks/commits.py
+++ b/src/sentry/tasks/commits.py
@@ -4,7 +4,7 @@ import logging
 import six
 
 from sentry.exceptions import InvalidIdentity, PluginError
-from sentry.models import Commit, Release, Repository, User
+from sentry.models import Release, ReleaseHeadCommit, Repository, User
 from sentry.plugins import bindings
 from sentry.tasks.base import instrumented_task, retry
 
@@ -49,11 +49,11 @@ def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
             start_sha = ref['previousCommit']
         elif prev_release:
             try:
-                start_sha = Commit.objects.filter(
+                start_sha = ReleaseHeadCommit.objects.filter(
                     organization_id=release.organization_id,
-                    releaseheadcommit__release=prev_release,
+                    release=prev_release,
                     repository_id=repo.id,
-                ).values_list('key', flat=True)[0]
+                ).values_list('commit__key', flat=True)[0]
             except IndexError:
                 pass
 
diff --git a/tests/sentry/tasks/test_commits.py b/tests/sentry/tasks/test_commits.py
new file mode 100644
index 0000000000..aec94ed96b
--- /dev/null
+++ b/tests/sentry/tasks/test_commits.py
@@ -0,0 +1,68 @@
+from __future__ import absolute_import
+
+from sentry.models import Commit, Release, ReleaseHeadCommit, Repository
+from sentry.tasks.commits import fetch_commits
+from sentry.testutils import TestCase
+
+
+class FetchCommits(TestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        org = self.create_organization(owner=self.user, name='baz')
+
+        repo = Repository.objects.create(
+            name='example',
+            provider='dummy',
+            organization_id=org.id,
+        )
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+
+        commit = Commit.objects.create(
+            organization_id=org.id,
+            repository_id=repo.id,
+            key='a' * 40,
+        )
+
+        ReleaseHeadCommit.objects.create(
+            organization_id=org.id,
+            repository_id=repo.id,
+            release=release,
+            commit=commit,
+        )
+
+        refs = [{
+            'repository': repo.name,
+            'commit': 'b' * 40,
+        }]
+
+        release2 = Release.objects.create(
+            organization_id=org.id,
+            version='12345678',
+        )
+
+        with self.tasks():
+            fetch_commits(
+                release_id=release2.id,
+                user_id=self.user.id,
+                refs=refs,
+                previous_release_id=release.id,
+            )
+
+        commit_list = list(Commit.objects.filter(
+            releasecommit__release=release2,
+        ).order_by('releasecommit__order'))
+
+        # see DummyRepositoryProvider.compare_commits
+        assert len(commit_list) == 3
+        assert commit_list[0].repository_id == repo.id
+        assert commit_list[0].organization_id == org.id
+        assert commit_list[0].key == '62de626b7c7cfb8e77efb4273b1a3df4123e6216'
+        assert commit_list[1].repository_id == repo.id
+        assert commit_list[1].organization_id == org.id
+        assert commit_list[1].key == '58de626b7c7cfb8e77efb4273b1a3df4123e6345'
+        assert commit_list[2].repository_id == repo.id
+        assert commit_list[2].organization_id == org.id
+        assert commit_list[2].key == 'b' * 40
