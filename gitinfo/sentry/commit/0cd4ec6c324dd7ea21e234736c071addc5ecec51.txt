commit 0cd4ec6c324dd7ea21e234736c071addc5ecec51
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 10 13:26:55 2015 -0800

    Improve file conversion behavior + tests

diff --git a/src/sentry/models/file.py b/src/sentry/models/file.py
index fb7a52377e..0dcfd3a091 100644
--- a/src/sentry/models/file.py
+++ b/src/sentry/models/file.py
@@ -48,20 +48,52 @@ class FileBlob(Model):
 
         >>> blob = FileBlob.from_file(fileobj)
         """
-        blob = cls()
-        blob.putfile(fileobj)
+        size = 0
+        checksum = sha1('')
+        for chunk in fileobj:
+            size += len(chunk)
+            checksum.update(chunk)
+        checksum = checksum.hexdigest()
+
+        lock_key = 'fileblob:upload:{}'.format(checksum)
+        # TODO(dcramer): the database here is safe, but if this lock expires
+        # and duplicate files are uploaded then we need to prune one
+        with Lock(lock_key, timeout=600):
+            # test for presence
+            try:
+                existing = FileBlob.objects.get(checksum=checksum)
+            except FileBlob.DoesNotExist:
+                pass
+            else:
+                return existing
+
+            blob = cls(
+                size=size,
+                checksum=checksum,
+                storage=settings.SENTRY_FILESTORE,
+                storage_options=settings.SENTRY_FILESTORE_OPTIONS,
+            )
+
+            blob.path = cls.generate_unique_path(blob.timestamp)
+
+            storage = blob.get_storage()
+            storage.save(blob.path, fileobj)
+            blob.save()
+
+        metrics.timing('filestore.blob-size', blob.size)
         return blob
 
+    @classmethod
+    def generate_unique_path(cls, timestamp):
+        pieces = map(str, divmod(int(timestamp.strftime('%s')), ONE_DAY))
+        pieces.append('%s' % (uuid4().hex,))
+        return '/'.join(pieces)
+
     def delete(self, *args, **kwargs):
         if self.path:
             self.deletefile(commit=False)
         super(FileBlob, self).delete(*args, **kwargs)
 
-    def generate_unique_path(self):
-        pieces = map(str, divmod(int(self.timestamp.strftime('%s')), ONE_DAY))
-        pieces.append('%s' % (uuid4().hex,))
-        return '/'.join(pieces)
-
     def get_storage(self):
         backend = self.storage
         options = self.storage_options
@@ -80,39 +112,6 @@ class FileBlob(Model):
         if commit:
             self.save()
 
-    def putfile(self, fileobj):
-        assert not self.path
-
-        size = 0
-        checksum = sha1('')
-        for chunk in fileobj:
-            size += len(chunk)
-            checksum.update(chunk)
-        self.size = size
-        self.checksum = checksum.hexdigest()
-
-        lock_key = 'fileblob:upload:{}'.format(self.checksum)
-        # TODO(dcramer): the database here is safe, but if this lock expires
-        # and duplicate files are uploaded then we need to prune one
-        with Lock(lock_key, timeout=600):
-            # test for presence
-            try:
-                existing = FileBlob.objects.get(checksum=self.checksum)
-            except FileBlob.DoesNotExist:
-                pass
-            else:
-                self.__dict__.update(existing.__dict__)
-                return
-
-            self.path = self.generate_unique_path()
-            self.storage = settings.SENTRY_FILESTORE
-            self.storage_options = settings.SENTRY_FILESTORE_OPTIONS
-
-            storage = self.get_storage()
-            storage.save(self.path, fileobj)
-            self.save()
-            metrics.timing('filestore.blob-size', self.size)
-
     def getfile(self):
         """
         Return a file-like object for this File's content.
diff --git a/tests/sentry/models/test_file.py b/tests/sentry/models/test_file.py
index 9e1d79cea7..1f4818d4a7 100644
--- a/tests/sentry/models/test_file.py
+++ b/tests/sentry/models/test_file.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.conf import settings
 from django.core.files.base import ContentFile
 
-from sentry.models import FileBlob
+from sentry.models import File, FileBlob
 from sentry.testutils import TestCase
 
 
@@ -17,4 +17,42 @@ class FileBlobTest(TestCase):
         assert my_file1.storage == settings.SENTRY_FILESTORE
 
         my_file2 = FileBlob.from_file(fileobj)
-        assert my_file1 == my_file2
+        # deep check
+        assert my_file1.id == my_file2.id
+        assert my_file1.checksum == my_file2.checksum
+        assert my_file1.path == my_file2.path
+        assert my_file1.storage == my_file2.storage
+        assert my_file1.storage_options == my_file2.storage_options
+
+
+class FileTest(TestCase):
+    def test_blob_conversion(self):
+        file1 = File.objects.create(
+            path='foo/bar',
+            name='baz.js',
+            type='default',
+            size=100,
+            checksum='a' * 40,
+            storage=settings.SENTRY_FILESTORE,
+        )
+        file1.ensure_blob()
+
+        assert file1.blob
+        assert file1.blob.path == 'foo/bar'
+        assert file1.blob.size == 100
+        assert file1.blob.checksum == 'a' * 40
+
+        file2 = File.objects.create(
+            path='foo/bar',
+            name='baz.js',
+            type='default',
+            size=100,
+            checksum='a' * 40,
+            storage=settings.SENTRY_FILESTORE,
+        )
+        file2.ensure_blob()
+
+        assert file2.blob == file1.blob
+        assert file2.blob.path == 'foo/bar'
+        assert file2.blob.size == 100
+        assert file2.blob.checksum == 'a' * 40
