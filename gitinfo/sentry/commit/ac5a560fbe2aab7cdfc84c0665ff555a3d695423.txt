commit ac5a560fbe2aab7cdfc84c0665ff555a3d695423
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 21 10:27:34 2018 -0800

    feat(ui): Refactor FormField --> Field (#7313)

diff --git a/docs-ui/components/panels.stories.js b/docs-ui/components/panels.stories.js
new file mode 100644
index 0000000000..1a7b3c9b63
--- /dev/null
+++ b/docs-ui/components/panels.stories.js
@@ -0,0 +1,55 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import Button from 'sentry-ui/buttons/button';
+import Panel from 'application-root/views/settings/components/panel';
+import PanelHeader from 'application-root/views/settings/components/panelHeader';
+import PanelBody from 'application-root/views/settings/components/panelBody';
+import PanelItem from 'application-root/views/settings/components/panelItem';
+import Field from 'application-root/views/settings/components/forms/field';
+
+storiesOf('New Settings/Panel', module)
+  .add(
+    'Basic Panel',
+    withInfo({
+      text: 'Basic Panel component used in most settings',
+      propTablesExclude: [Button],
+    })(() => (
+      <Panel>
+        <PanelHeader>Panel Header</PanelHeader>
+
+        <PanelBody>
+          <PanelItem>Panel Item</PanelItem>
+          <PanelItem>Panel Item</PanelItem>
+          <PanelItem>Panel Item</PanelItem>
+        </PanelBody>
+      </Panel>
+    ))
+  )
+  .add(
+    'Field',
+    withInfo({
+      text: 'Non-connected form field item',
+      propTablesExclude: [Panel, PanelBody, PanelItem],
+    })(() => (
+      <Panel>
+        <PanelHeader>Panel Header</PanelHeader>
+
+        <PanelBody>
+          <Field label="Label" help="This is a helpful description for this form field">
+            <Button priority="danger">Remove</Button>
+          </Field>
+
+          <Field
+            label="Label"
+            help="Control will fill up all available space, so wrap with a `<div>` to have it behave like an inline-block element."
+          >
+            <div>
+              <Button priority="danger">Remove</Button>
+            </div>
+          </Field>
+        </PanelBody>
+      </Panel>
+    ))
+  );
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
new file mode 100644
index 0000000000..e409512a60
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
@@ -0,0 +1,78 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import FieldControlState from './fieldControlState';
+import Tooltip from '../../../../../components/tooltip';
+
+// This wraps Control + ControlError message
+// * can NOT be a flex box here because of `position: absolute` on "control error message"
+// * can NOT have overflow hidden because "control error message" overflows
+const FieldControlErrorWrapper = styled(({inline, ...props}) => <Box {...props} />)`
+  ${p => (p.inline ? 'width: 50%; padding-left: 10px;' : '')};
+`;
+
+const FieldControlStyled = styled(({alignRight, ...props}) => <Box {...props} />)`
+  color: ${p => p.theme.gray3};
+  display: flex;
+  flex: 1;
+  flex-direction: column;
+  position: relative;
+  ${p => (p.alignRight ? 'align-items: flex-end;' : '')};
+`;
+
+const FieldControlWrapper = styled(({hasControlState, ...props}) => <Flex {...props} />)`
+  flex-shrink: 0;
+`;
+
+class FieldControl extends React.Component {
+  static propTypes = {
+    inline: PropTypes.bool,
+    alignRight: PropTypes.bool,
+    disabled: PropTypes.bool,
+    disabledReason: PropTypes.node,
+    hideControlState: PropTypes.bool,
+    controlState: PropTypes.node,
+    errorState: PropTypes.node,
+  };
+
+  static defaultProps = {
+    hideControlState: false,
+  };
+
+  render() {
+    let {
+      inline,
+      alignRight,
+      disabled,
+      disabledReason,
+      hideControlState,
+      errorState,
+      controlState,
+      children,
+    } = this.props;
+
+    return (
+      <FieldControlErrorWrapper inline={inline}>
+        <FieldControlWrapper>
+          <FieldControlStyled alignRight={alignRight}>{children}</FieldControlStyled>
+
+          {disabled &&
+            disabledReason && (
+              <Tooltip title={disabledReason}>
+                <span className="disabled-indicator">
+                  <span className="icon-question" />
+                </span>
+              </Tooltip>
+            )}
+
+          {!hideControlState && <FieldControlState>{controlState}</FieldControlState>}
+        </FieldControlWrapper>
+
+        {errorState}
+      </FieldControlErrorWrapper>
+    );
+  }
+}
+export default FieldControl;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.jsx
new file mode 100644
index 0000000000..3e7f89b72a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.jsx
@@ -0,0 +1,13 @@
+import styled from 'react-emotion';
+import {Flex} from 'grid-emotion';
+
+const width = '36px';
+const FieldControlState = styled(Flex)`
+  position: relative;
+  width: ${width};
+  flex-shrink: 0;
+  justify-content: center;
+  align-items: center;
+`;
+
+export default FieldControlState;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldDescription.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldDescription.js
similarity index 72%
rename from src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldDescription.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/field/fieldDescription.js
index 1220f221c3..30b895fd67 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldDescription.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldDescription.js
@@ -12,11 +12,11 @@ const inlineStyle = p =>
         margin-bottom: 10px;
       `;
 
-const FormFieldDescription = styled(({inline, ...props}) => <label {...props} />)`
+const FieldDescription = styled(({inline, ...props}) => <label {...props} />)`
   font-weight: normal;
   margin-bottom: 0;
 
   ${inlineStyle};
 `;
 
-export default FormFieldDescription;
+export default FieldDescription;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldHelp.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldHelp.jsx
similarity index 67%
rename from src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldHelp.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/field/fieldHelp.jsx
index f2161e6412..acb2e59380 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldHelp.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldHelp.jsx
@@ -1,10 +1,10 @@
 import styled from 'react-emotion';
 
-const FormFieldHelp = styled.div`
+const FieldHelp = styled.div`
   color: ${p => p.theme.gray2};
   font-size: 14px;
   margin-top: 8px;
   line-height: 1.4;
 `;
 
-export default FormFieldHelp;
+export default FieldHelp;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldLabel.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldLabel.jsx
similarity index 52%
rename from src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldLabel.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/field/fieldLabel.jsx
index e29a378780..05d6dedf84 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldLabel.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldLabel.jsx
@@ -1,7 +1,7 @@
 import styled from 'react-emotion';
 
-const FormFieldLabel = styled.div`
+const FieldLabel = styled.div`
   color: ${p => p.theme.gray5};
 `;
 
-export default FormFieldLabel;
+export default FieldLabel;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldRequiredBadge.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldRequiredBadge.jsx
similarity index 71%
rename from src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldRequiredBadge.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/field/fieldRequiredBadge.jsx
index 814e8b2409..6f1c7d5cea 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldRequiredBadge.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldRequiredBadge.jsx
@@ -1,6 +1,6 @@
 import styled from 'react-emotion';
 
-const FormFieldRequiredBadge = styled.div`
+const FieldRequiredBadge = styled.div`
   display: inline-block;
   background: ${p => p.theme.gray2};
   width: 5px;
@@ -10,4 +10,4 @@ const FormFieldRequiredBadge = styled.div`
   vertical-align: super;
 `;
 
-export default FormFieldRequiredBadge;
+export default FieldRequiredBadge;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldWrapper.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldWrapper.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
index b4a5bdf6a8..8879711d13 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
@@ -19,7 +19,7 @@ const highlightedStyle = p =>
       `
     : '';
 
-const FormFieldWrapper = styled(({highlighted, inline, ...props}) => <Flex {...props} />)`
+const FieldWrapper = styled(({highlighted, inline, ...props}) => <Flex {...props} />)`
   padding: 0.9em 0 0.9em 1.3em;
   border-bottom: 1px solid ${p => p.theme.borderLight};
   transition: background 0.15s;
@@ -29,4 +29,4 @@ const FormFieldWrapper = styled(({highlighted, inline, ...props}) => <Flex {...p
   }
 `;
 
-export default FormFieldWrapper;
+export default FieldWrapper;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
new file mode 100644
index 0000000000..a66b7a194b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
@@ -0,0 +1,143 @@
+/**
+ * A component to render a Field (i.e. label + help + form "control"),
+ * generally inside of a Panel.
+ *
+ * This is unconnected to any Form state
+ */
+
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import FieldControl from './fieldControl';
+import FieldDescription from './fieldDescription';
+import FieldHelp from './fieldHelp';
+import FieldLabel from './fieldLabel';
+import FieldRequiredBadge from './fieldRequiredBadge';
+import FieldWrapper from './fieldWrapper';
+
+class Field extends React.Component {
+  static propTypes = {
+    /**
+     * Aligns Control to the right
+     */
+    alignRight: PropTypes.bool,
+
+    /**
+     * Is "highlighted", i.e. after a search
+     */
+    highlighted: PropTypes.bool,
+
+    /**
+     * Show "required" indicator
+     */
+    required: PropTypes.bool,
+
+    /**
+     * Should field be visible
+     */
+    visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+
+    /**
+     * Should field be disabled?
+     */
+    disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+
+    /**
+     * Reason why field is disabled (displays in tooltip)
+     */
+    disabledReason: PropTypes.string,
+
+    /**
+     * User-facing field name
+     */
+    label: PropTypes.node,
+
+    /**
+     * Help or description of the field
+     */
+    help: PropTypes.oneOfType([PropTypes.node, PropTypes.element]),
+
+    /**
+     * Should Control be inline with Label
+     */
+    inline: PropTypes.bool,
+
+    /**
+     * The control's `id` property
+     */
+    id: PropTypes.string,
+
+    /**
+     * The Control component
+     */
+    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
+  };
+
+  static defaultProps = {
+    alignRight: false,
+    inline: true,
+    disabled: false,
+    required: false,
+    visible: true,
+  };
+
+  render() {
+    let {
+      alignRight,
+      inline,
+      highlighted,
+      required,
+      visible,
+      disabled,
+      disabledReason,
+      label,
+      help,
+      id,
+      children,
+    } = this.props;
+    let isDisabled = typeof disabled === 'function' ? disabled(this.props) : disabled;
+    let isVisible = typeof visible === 'function' ? visible(this.props) : visible;
+    let Control;
+
+    if (!isVisible) {
+      return null;
+    }
+
+    // See comments in prop types
+    if (typeof children === 'function') {
+      Control = children({
+        ...this.props,
+        alignRight,
+        disabled: isDisabled,
+        disabledReason,
+      });
+    } else {
+      Control = (
+        <FieldControl
+          inline={inline}
+          alignRight={alignRight}
+          disabled={isDisabled}
+          disabledReason={disabledReason}
+        >
+          {children}
+        </FieldControl>
+      );
+    }
+
+    return (
+      <FieldWrapper inline={inline} highlighted={highlighted}>
+        <FieldDescription inline={inline} htmlFor={id}>
+          {label && (
+            <FieldLabel>
+              {label} {required && <FieldRequiredBadge />}
+            </FieldLabel>
+          )}
+          {help && <FieldHelp>{help}</FieldHelp>}
+        </FieldDescription>
+
+        {Control}
+      </FieldWrapper>
+    );
+  }
+}
+export default Field;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldControl.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldControl.jsx
deleted file mode 100644
index f088825578..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldControl.jsx
+++ /dev/null
@@ -1,9 +0,0 @@
-import styled from 'react-emotion';
-import {Box} from 'grid-emotion';
-
-const FormFieldControl = styled(Box)`
-  color: ${p => p.theme.gray3};
-  position: relative;
-`;
-
-export default FormFieldControl;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldControlState.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldControlState.jsx
deleted file mode 100644
index 8986f1b110..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/formFieldControlState.jsx
+++ /dev/null
@@ -1,10 +0,0 @@
-import styled from 'react-emotion';
-import {Flex} from 'grid-emotion';
-
-const FormFieldControlState = styled(Flex)`
-  position: relative;
-  width: 36px;
-  flex-shrink: 0;
-`;
-
-export default FormFieldControlState;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index d58c70d64e..72521bcc40 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -1,41 +1,17 @@
-import {Box, Flex} from 'grid-emotion';
 import {Observer} from 'mobx-react';
 import PropTypes from 'prop-types';
 import React from 'react';
-import ReactDOM from 'react-dom';
 import styled from 'react-emotion';
 
 import {defined} from '../../../../../utils';
 import {pulse, fadeOut} from '../../../../../styles/animations';
-import FormFieldControl from './formFieldControl';
-import FormFieldControlState from './formFieldControlState';
-import FormFieldDescription from './formFieldDescription';
-import FormFieldHelp from './formFieldHelp';
-import FormFieldLabel from './formFieldLabel';
-import FormFieldRequiredBadge from './formFieldRequiredBadge';
-import FormFieldWrapper from './formFieldWrapper';
+import Field from '../field';
+import FieldControl from '../field/fieldControl';
 import FormState from '../../../../../components/forms/state';
 import InlineSvg from '../../../../../components/inlineSvg';
 import Spinner from '../spinner';
 import returnButton from '../returnButton';
 
-// This wraps Control + ControlError message
-// * can NOT be a flex box have because of position: absolute on "control error message"
-// * can NOT have overflow hidden because "control error message" overflows
-const FormFieldControlErrorWrapper = styled(({inline, ...props}) => <Box {...props} />)`
-  ${p => (p.inline ? 'width: 50%; padding-left: 10px;' : '')};
-`;
-
-const FormFieldControlStyled = styled(({alignRight, ...props}) => (
-  <FormFieldControl {...props} />
-))`
-  display: flex;
-  flex-direction: column;
-  ${p => (p.alignRight ? 'align-items: flex-end;' : '')};
-`;
-
-const FormFieldControlWrapper = styled(Flex)``;
-
 const FormFieldErrorReason = styled.div`
   color: ${p => p.theme.redDark};
   position: absolute;
@@ -91,35 +67,73 @@ const getValueFromEvent = (valueOrEvent, e) => {
   };
 };
 
+/**
+ * ControlState (i.e. loading/error icons) for connected form components
+ */
+class ControlState extends React.Component {
+  static propTypes = {
+    model: PropTypes.object,
+    name: PropTypes.string,
+  };
+
+  render() {
+    let {model, name} = this.props;
+
+    return (
+      <React.Fragment>
+        <Observer>
+          {() => {
+            let isSaving = model.getFieldState(name, FormState.SAVING);
+            let isSaved = model.getFieldState(name, FormState.READY);
+
+            if (isSaving) {
+              return <FormSpinner />;
+            } else if (isSaved) {
+              return (
+                <FormFieldIsSaved>
+                  <InlineSvg src="icon-checkmark-sm" size="18px" />
+                </FormFieldIsSaved>
+              );
+            }
+
+            return null;
+          }}
+        </Observer>
+
+        <Observer>
+          {() => {
+            let error = model.getError(name);
+
+            if (!error) return null;
+
+            return (
+              <FormFieldError>
+                <InlineSvg src="icon-warning-sm" size="18px" />
+              </FormFieldError>
+            );
+          }}
+        </Observer>
+      </React.Fragment>
+    );
+  }
+}
+
 class FormField extends React.Component {
   static propTypes = {
     name: PropTypes.string.isRequired,
+
     /** Inline style */
     style: PropTypes.object,
 
-    label: PropTypes.string,
-    defaultValue: PropTypes.any,
-    disabledReason: PropTypes.string,
-    showReturnButton: PropTypes.bool,
-    help: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
-    required: PropTypes.bool,
-    hideErrorMessage: PropTypes.bool,
-    highlighted: PropTypes.bool,
-    alignRight: PropTypes.bool,
-
     /**
-     * Should field be disabled?
+     * Should show a "return key" icon in input?
      */
-    disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
-    /**
-     * Should field be visible
-     */
-    visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+    showReturnButton: PropTypes.bool,
 
     /**
-     * Should control be inline with field label
+     * Should hide error message?
      */
-    inline: PropTypes.bool,
+    hideErrorMessage: PropTypes.bool,
 
     // the following should only be used without form context
     onChange: PropTypes.func,
@@ -127,16 +141,10 @@ class FormField extends React.Component {
     onKeyDown: PropTypes.func,
     onMouseOver: PropTypes.func,
     onMouseOut: PropTypes.func,
-    error: PropTypes.string,
-    value: PropTypes.any,
   };
 
   static defaultProps = {
     hideErrorMessage: false,
-    inline: true,
-    disabled: false,
-    required: false,
-    visible: true,
   };
 
   static contextTypes = {
@@ -150,24 +158,10 @@ class FormField extends React.Component {
   }
 
   componentDidMount() {
-    // this.attachTooltips();
     // Tell model about this field's props
     this.getModel().setFieldDescriptor(this.props.name, this.props);
   }
 
-  componentWillUnmount() {
-    //this.removeTooltips();
-    jQuery(ReactDOM.findDOMNode(this)).unbind();
-  }
-
-  attachTooltips() {
-    jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip();
-  }
-
-  removeTooltips() {
-    jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip('destroy');
-  }
-
   getError(props, context) {
     return this.getModel().getError(this.props.name);
   }
@@ -181,11 +175,13 @@ class FormField extends React.Component {
   }
 
   // Only works for styled inputs
+  // Attempts to autofocus input field if field's name is in url hash
   handleInputMount = ref => {
     if (ref && !this.input) {
       let hash = this.context.location && this.context.location.hash;
 
       if (!hash) return;
+
       if (hash !== `#${this.props.name}`) return;
 
       ref.focus();
@@ -245,124 +241,60 @@ class FormField extends React.Component {
   };
 
   render() {
-    let {
-      highlighted,
-      required,
-      label,
-      inline,
-      disabled,
-      disabledReason,
-      showReturnButton,
-      hideErrorMessage,
-      help,
-      alignRight,
-      visible,
-    } = this.props;
+    let {name, showReturnButton, hideErrorMessage, ...props} = this.props;
     let id = this.getId();
     let model = this.getModel();
-    let isDisabled = typeof disabled === 'function' ? disabled(this.props) : disabled;
-    let isVisible = typeof visible === 'function' ? visible(this.props) : visible;
-
-    if (!isVisible) {
-      return null;
-    }
 
     return (
-      <FormFieldWrapper inline={inline} highlighted={highlighted}>
-        <FormFieldDescription inline={inline} htmlFor={id}>
-          {label && (
-            <FormFieldLabel>
-              {label} {required && <FormFieldRequiredBadge />}
-            </FormFieldLabel>
-          )}
-          {help && <FormFieldHelp>{help}</FormFieldHelp>}
-        </FormFieldDescription>
-
-        <FormFieldControlErrorWrapper inline={inline}>
-          <FormFieldControlWrapper shrink="0">
-            <FormFieldControlStyled flex="1" alignRight={alignRight}>
+      <Field id={id} {...props}>
+        {({alignRight, inline, disabled, disabledReason}) => (
+          <FieldControl
+            disabled={disabled}
+            disabledReason={disabledReason}
+            inline={inline}
+            alignRight={alignRight}
+            controlState={<ControlState model={model} name={name} />}
+            errorState={
               <Observer>
                 {() => {
                   let error = this.getError();
-                  let value = model.getValue(this.props.name);
-
-                  return (
-                    <this.props.children
-                      innerRef={this.handleInputMount}
-                      {...{
-                        ...this.props,
-                        id,
-                        onKeyDown: this.handleKeyDown,
-                        onChange: this.handleChange,
-                        onBlur: this.handleBlur,
-                        // Fixes react warnings about input switching from controlled to uncontrolled
-                        // So force to empty string for null values
-                        value: value === null ? '' : value,
-                        error,
-                        disabled: isDisabled,
-                      }}
-                      initialData={model.initialData}
-                    />
-                  );
-                }}
-              </Observer>
-
-              {isDisabled &&
-                disabledReason && (
-                  <span className="disabled-indicator tip" title={disabledReason}>
-                    <span className="icon-question" />
-                  </span>
-                )}
-
-              {showReturnButton && this.state.showReturnButton && <ReturnButtonStyled />}
-            </FormFieldControlStyled>
-
-            <FormFieldControlState justify="center" align="center">
-              <Observer>
-                {() => {
-                  let isSaving = model.getFieldState(this.props.name, FormState.SAVING);
-                  let isSaved = model.getFieldState(this.props.name, FormState.READY);
-
-                  if (isSaving) {
-                    return <FormSpinner />;
-                  } else if (isSaved) {
-                    return (
-                      <FormFieldIsSaved>
-                        <InlineSvg src="icon-checkmark-sm" size="18px" />
-                      </FormFieldIsSaved>
-                    );
-                  }
-
-                  return null;
-                }}
-              </Observer>
-
-              <Observer>
-                {() => {
-                  let error = this.getError();
-
-                  if (!error) return null;
-
-                  return (
-                    <FormFieldError>
-                      <InlineSvg src="icon-warning-sm" size="18px" />
-                    </FormFieldError>
-                  );
+                  let shouldShowErrorMessage = error && !hideErrorMessage;
+                  if (!shouldShowErrorMessage) return null;
+                  return <FormFieldErrorReason>{error}</FormFieldErrorReason>;
                 }}
               </Observer>
-            </FormFieldControlState>
-          </FormFieldControlWrapper>
-
-          <Observer>
-            {() => {
-              let error = this.getError();
-              let shouldShowErrorMessage = error && !hideErrorMessage;
-              if (!shouldShowErrorMessage) return null;
-              return <FormFieldErrorReason>{error}</FormFieldErrorReason>;
-            }}
-          </Observer>
-        </FormFieldControlErrorWrapper>
-      </FormFieldWrapper>
+            }
+          >
+            <Observer>
+              {() => {
+                let error = this.getError();
+                let value = model.getValue(this.props.name);
+
+                return (
+                  <this.props.children
+                    innerRef={this.handleInputMount}
+                    {...{
+                      ...this.props,
+                      id,
+                      onKeyDown: this.handleKeyDown,
+                      onChange: this.handleChange,
+                      onBlur: this.handleBlur,
+                      // Fixes react warnings about input switching from controlled to uncontrolled
+                      // So force to empty string for null values
+                      value: value === null ? '' : value,
+                      error,
+                      disabled,
+                    }}
+                    initialData={model.initialData}
+                  />
+                );
+              }}
+            </Observer>
+
+            {showReturnButton && this.state.showReturnButton && <ReturnButtonStyled />}
+          </FieldControl>
+        )}
+      </Field>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
index e3e190a1f2..384e0f7293 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
@@ -1,8 +1,8 @@
 import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 
 import {
   changeOrganizationSlug,
@@ -11,15 +11,11 @@ import {
 } from '../../../../actionCreators/organizations';
 import {t, tct} from '../../../../locale';
 import ApiMixin from '../../../../mixins/apiMixin';
-import FormFieldWrapper from '../../components/forms/formField/formFieldWrapper';
-import FormFieldDescription from '../../components/forms/formField/formFieldDescription';
-import FormFieldControl from '../../components/forms/formField/formFieldControl';
-import FormFieldHelp from '../../components/forms/formField/formFieldHelp';
-import FormFieldLabel from '../../components/forms/formField/formFieldLabel';
 import LinkWithConfirmation from '../../../../components/linkWithConfirmation';
 import LoadingIndicator from '../../../../components/loadingIndicator';
 import OrganizationsStore from '../../../../stores/organizationsStore';
 import Panel from '../../components/panel';
+import Field from '../../components/forms/field';
 import PanelHeader from '../../components/panelHeader';
 import SettingsPageHeader from '../../components/settingsPageHeader';
 import getSettingsComponent from '../../../../utils/getSettingsComponent';
@@ -147,55 +143,49 @@ const OrganizationGeneralSettingsView = createReactClass({
                 hasMultipleOrgs && (
                   <Panel>
                     <PanelHeader>{t('Remove Organization')}</PanelHeader>
-                    <FormFieldWrapper inline>
-                      <FormFieldDescription inline>
-                        <FormFieldLabel>{t('Remove Organization')}</FormFieldLabel>
-                        <FormFieldHelp>
-                          {t(
-                            'Removing this organization will delete all data including projects and their associated events.'
-                          )}
-                        </FormFieldHelp>
-                      </FormFieldDescription>
-
-                      <FormFieldControl>
-                        <LinkWithConfirmation
-                          className="btn btn-danger"
-                          priority="danger"
-                          size="small"
-                          title={tct('Remove [name] organization', {
-                            name: data && data.name,
-                          })}
-                          message={
-                            <div>
-                              <p>
-                                {tct(
-                                  'Removing the [name] organization is permanent and cannot be undone!',
-                                  {name: data && data.name}
-                                )}
-                              </p>
-
-                              {hasTeams && (
-                                <div>
-                                  <p>
-                                    {t(
-                                      'This will also remove the following teams and all associated projects:'
-                                    )}
-                                  </p>
-                                  <ul>
-                                    {data.teams.map(team => (
-                                      <li key={team.slug}>{team.name}</li>
-                                    ))}
-                                  </ul>
-                                </div>
+                    <Field
+                      label={t('Remove Organization')}
+                      help={t(
+                        'Removing this organization will delete all data including projects and their associated events.'
+                      )}
+                    >
+                      <LinkWithConfirmation
+                        className="btn btn-danger"
+                        priority="danger"
+                        size="small"
+                        title={tct('Remove [name] organization', {
+                          name: data && data.name,
+                        })}
+                        message={
+                          <div>
+                            <p>
+                              {tct(
+                                'Removing the [name] organization is permanent and cannot be undone!',
+                                {name: data && data.name}
                               )}
-                            </div>
-                          }
-                          onConfirm={this.handleRemoveOrganization}
-                        >
-                          {t('Remove Organization')}
-                        </LinkWithConfirmation>
-                      </FormFieldControl>
-                    </FormFieldWrapper>
+                            </p>
+
+                            {hasTeams && (
+                              <div>
+                                <p>
+                                  {t(
+                                    'This will also remove the following teams and all associated projects:'
+                                  )}
+                                </p>
+                                <ul>
+                                  {data.teams.map(team => (
+                                    <li key={team.slug}>{team.name}</li>
+                                  ))}
+                                </ul>
+                              </div>
+                            )}
+                          </div>
+                        }
+                        onConfirm={this.handleRemoveOrganization}
+                      >
+                        {t('Remove Organization')}
+                      </LinkWithConfirmation>
+                    </Field>
                   </Panel>
                 )}
             </div>
