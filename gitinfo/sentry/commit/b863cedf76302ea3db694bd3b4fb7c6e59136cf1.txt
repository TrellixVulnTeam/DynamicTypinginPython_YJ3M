commit b863cedf76302ea3db694bd3b4fb7c6e59136cf1
Author: Michael Hayes <michael.hayes@urbanairship.com>
Date:   Wed Oct 9 11:08:46 2013 -0700

    added tests for new sourcemaps features

diff --git a/tests/sentry/tasks/fetch_source/tests.py b/tests/sentry/tasks/fetch_source/tests.py
index d5498c40e4..2e97bf3aad 100644
--- a/tests/sentry/tasks/fetch_source/tests.py
+++ b/tests/sentry/tasks/fetch_source/tests.py
@@ -5,9 +5,12 @@ from __future__ import absolute_import
 import mock
 
 from sentry.tasks.fetch_source import (
-    UrlResult, expand_javascript_source, discover_sourcemap)
+    UrlResult, expand_javascript_source, discover_sourcemap, fetch_sourcemap)
+from sentry.utils.sourcemaps import (SourceMap, SourceMapIndex)
 from sentry.testutils import TestCase
 
+base64_sourcemap = 'data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhcImhlbGxvLCBXb3JsZCFcIikiXX0='
+
 
 class DiscoverSourcemapTest(TestCase):
     # discover_sourcemap(result)
@@ -42,7 +45,8 @@ class ExpandJavascriptSourceTest(TestCase):
     @mock.patch('sentry.models.Event.update')
     @mock.patch('sentry.tasks.fetch_source.fetch_url')
     @mock.patch('sentry.tasks.fetch_source.fetch_sourcemap')
-    def test_simple(self, fetch_sourcemap, fetch_url, update):
+    @mock.patch('sentry.tasks.fetch_source.discover_sourcemap')
+    def test_simple(self, discover_sourcemap, fetch_sourcemap, fetch_url, update):
         data = {
             'sentry.interfaces.Exception': {
                 'values': [{
@@ -65,6 +69,7 @@ class ExpandJavascriptSourceTest(TestCase):
                 }],
             }
         }
+        discover_sourcemap.return_value = None
         fetch_sourcemap.return_value = None
         fetch_url.return_value.body = '\n'.join('hello world')
 
@@ -82,3 +87,46 @@ class ExpandJavascriptSourceTest(TestCase):
         assert frame['pre_context'] == []
         assert frame['context_line'] == 'h'
         assert frame['post_context'] == ['e', 'l', 'l', 'o', ' ']
+
+    @mock.patch('sentry.models.Event.update')
+    @mock.patch('sentry.tasks.fetch_source.fetch_url')
+    @mock.patch('sentry.tasks.fetch_source.discover_sourcemap')
+    def test_inlined_sources(self, discover_sourcemap, fetch_url, update):
+        data = {
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'abs_path': 'http://example.com/test.js',
+                                'filename': 'test.js',
+                                'lineno': 1,
+                                'colno': 0,
+                            },
+                        ],
+                    },
+                }],
+            }
+        }
+        discover_sourcemap.return_value = base64_sourcemap
+        fetch_url.return_value.body = '\n'.join('<generated source>')
+
+        expand_javascript_source(data)
+        fetch_url.assert_called_once_with('http://example.com/test.js')
+
+        frame_list = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
+        frame = frame_list[0]
+        assert frame['pre_context'] == []
+        assert frame['context_line'] == 'console.log("hello, World!")'
+        assert frame['post_context'] == []
+
+
+class FetchBase64SourcemapTest(TestCase):
+    def test_simple(self):
+        index = fetch_sourcemap(base64_sourcemap)
+        states = [SourceMap(1, 0, '/test.js', 0, 0, None)]
+        sources = set(['/test.js'])
+        keys = [(1, 0)]
+        content = {'/test.js': ['console.log("hello, World!")']}
+
+        assert index == SourceMapIndex(states, keys, sources, content)
diff --git a/tests/sentry/utils/sourcemaps/tests.py b/tests/sentry/utils/sourcemaps/tests.py
index 03efc3b5eb..3908813ce2 100644
--- a/tests/sentry/utils/sourcemaps/tests.py
+++ b/tests/sentry/utils/sourcemaps/tests.py
@@ -6,6 +6,8 @@ from sentry.utils.sourcemaps import (SourceMap, parse_vlq, parse_sourcemap, sour
     find_source)
 from sentry.testutils import TestCase
 
+from sentry.utils import json
+
 
 sourcemap = """{"version":3,"file":"file.min.js","sources":["file1.js","file2.js"],"names":["add","a","b","multiply","divide","c","e","Raven","captureException"],"mappings":"AAAA,QAASA,KAAIC,EAAGC,GACf,YACA,OAAOD,GAAIC,ECFZ,QAASC,UAASF,EAAGC,GACpB,YACA,OAAOD,GAAIC,EAEZ,QAASE,QAAOH,EAAGC,GAClB,YACA,KACC,MAAOC,UAASH,IAAIC,EAAGC,GAAID,EAAGC,GAAKG,EAClC,MAAOC,GACRC,MAAMC,iBAAiBF"}"""
 
@@ -30,7 +32,8 @@ class FindSourceTest(TestCase):
 
 class ParseSourcemapTest(TestCase):
     def test_basic(self):
-        states = list(parse_sourcemap(sourcemap))
+        smap = json.loads(sourcemap)
+        states = list(parse_sourcemap(smap))
 
         assert states == [
             SourceMap(dst_line=0, dst_col=0, src='file1.js', src_line=0, src_col=0, name=None),
