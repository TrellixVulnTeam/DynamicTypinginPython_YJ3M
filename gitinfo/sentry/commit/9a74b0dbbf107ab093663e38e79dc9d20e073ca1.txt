commit 9a74b0dbbf107ab093663e38e79dc9d20e073ca1
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 12 08:41:49 2016 -0700

    [ref] rename snooze/mute to ignore (#4318)
    
    * [ref] rename snooze/mute to ignore
    
    * language
    
    * fix remaining ref to snooze

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 1afe3e2d7a..4455b7f08a 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -59,6 +59,9 @@ class GroupSerializer(serializers.Serializer):
     isSubscribed = serializers.BooleanField()
     hasSeen = serializers.BooleanField()
     assignedTo = UserField()
+    ignoreDuration = serializers.IntegerField()
+
+    # TODO(dcramer): remove in 9.0
     snoozeDuration = serializers.IntegerField()
 
 
@@ -245,7 +248,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
         :pparam string issue_id: the ID of the group to retrieve.
         :param string status: the new status for the groups.  Valid values
                               are ``"resolved"``, ``"unresolved"`` and
-                              ``"muted"``.
+                              ``"ignored"``.
         :param string assignedTo: the username of the user that should be
                                assigned to this issue.
         :param boolean hasSeen: in case this API call is invoked with a user
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 86f2b8653f..51f1c78a9c 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -67,8 +67,11 @@ def list_project_issues_scenario(runner):
 STATUS_CHOICES = {
     'resolved': GroupStatus.RESOLVED,
     'unresolved': GroupStatus.UNRESOLVED,
-    'muted': GroupStatus.MUTED,
+    'ignored': GroupStatus.IGNORED,
     'resolvedInNextRelease': GroupStatus.UNRESOLVED,
+
+    # TODO(dcramer): remove in 9.0
+    'muted': GroupStatus.IGNORED,
 }
 
 
@@ -85,6 +88,9 @@ class GroupSerializer(serializers.Serializer):
     isPublic = serializers.BooleanField()
     isSubscribed = serializers.BooleanField()
     merge = serializers.BooleanField()
+    ignoreDuration = serializers.IntegerField()
+
+    # TODO(dcramer): remove in 9.0
     snoozeDuration = serializers.IntegerField()
 
 
@@ -283,15 +289,15 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         :qparam string status: optionally limits the query to issues of the
                                specified status.  Valid values are
                                ``"resolved"``, ``"unresolved"`` and
-                               ``"muted"``.
+                               ``"ignored"``.
         :pparam string organization_slug: the slug of the organization the
                                           issues belong to.
         :pparam string project_slug: the slug of the project the issues
                                      belong to.
         :param string status: the new status for the issues.  Valid values
                               are ``"resolved"``, ``"unresolved"`` and
-                              ``"muted"``.
-        :param int snoozeDuration: the number of minutes to mute this issue.
+                              ``"ignored"``.
+        :param int ignoreDuration: the number of minutes to ignore this issue.
         :param boolean isPublic: sets the issue to public or private.
         :param boolean merge: allows to merge or unmerge different issues.
         :param boolean hasSeen: in case this API call is invoked with a user
@@ -451,27 +457,30 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 group__in=group_ids,
             ).delete()
 
-            if new_status == GroupStatus.MUTED:
-                snooze_duration = result.pop('snoozeDuration', None)
-                if snooze_duration:
-                    snooze_until = timezone.now() + timedelta(
-                        minutes=snooze_duration,
+            if new_status == GroupStatus.IGNORED:
+                ignore_duration = (
+                    result.pop('ignoreDuration', None)
+                    or result.pop('snoozeDuration', None)
+                )
+                if ignore_duration:
+                    ignore_until = timezone.now() + timedelta(
+                        minutes=ignore_duration,
                     )
                     for group in group_list:
                         GroupSnooze.objects.create_or_update(
                             group=group,
                             values={
-                                'until': snooze_until,
+                                'until': ignore_until,
                             }
                         )
                         result['statusDetails'] = {
-                            'snoozeUntil': snooze_until,
+                            'ignoreUntil': ignore_until,
                         }
                 else:
                     GroupSnooze.objects.filter(
                         group__in=group_ids,
                     ).delete()
-                    snooze_until = None
+                    ignore_until = None
                     result['statusDetails'] = {}
             else:
                 result['statusDetails'] = {}
@@ -480,11 +489,11 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 if new_status == GroupStatus.UNRESOLVED:
                     activity_type = Activity.SET_UNRESOLVED
                     activity_data = {}
-                elif new_status == GroupStatus.MUTED:
-                    activity_type = Activity.SET_MUTED
+                elif new_status == GroupStatus.IGNORED:
+                    activity_type = Activity.SET_IGNORED
                     activity_data = {
-                        'snoozeUntil': snooze_until,
-                        'snoozeDuration': snooze_duration,
+                        'ignoreUntil': ignore_until,
+                        'ignoreDuration': ignore_duration,
                     }
 
                 for group in group_list:
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 19ad8500c6..97ed38ee3b 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -80,7 +80,7 @@ class GroupSerializer(Serializer):
             ).values_list('group', 'values_seen')
         )
 
-        snoozes = dict(
+        ignore_durations = dict(
             GroupSnooze.objects.filter(
                 group__in=item_list,
             ).values_list('group', 'until')
@@ -112,7 +112,7 @@ class GroupSerializer(Serializer):
                 'has_seen': seen_groups.get(item.id, active_date) > active_date,
                 'annotations': annotations,
                 'user_count': user_counts.get(item.id, 0),
-                'snooze': snoozes.get(item.id),
+                'ignore_duration': ignore_durations.get(item.id),
                 'pending_resolution': pending_resolutions.get(item.id),
             }
         return result
@@ -120,11 +120,11 @@ class GroupSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         status = obj.status
         status_details = {}
-        if attrs['snooze']:
-            if attrs['snooze'] < timezone.now() and status == GroupStatus.MUTED:
+        if attrs['ignore_duration']:
+            if attrs['ignore_duration'] < timezone.now() and status == GroupStatus.IGNORED:
                 status = GroupStatus.UNRESOLVED
             else:
-                status_details['snoozeUntil'] = attrs['snooze']
+                status_details['ignoreUntil'] = attrs['ignore_duration']
         elif status == GroupStatus.UNRESOLVED and obj.is_over_resolve_age():
             status = GroupStatus.RESOLVED
             status_details['autoResolved'] = True
@@ -132,8 +132,8 @@ class GroupSerializer(Serializer):
             status_label = 'resolved'
             if attrs['pending_resolution']:
                 status_details['inNextRelease'] = True
-        elif status == GroupStatus.MUTED:
-            status_label = 'muted'
+        elif status == GroupStatus.IGNORED:
+            status_label = 'ignored'
         elif status in [GroupStatus.PENDING_DELETION, GroupStatus.DELETION_IN_PROGRESS]:
             status_label = 'pending_deletion'
         elif status == GroupStatus.PENDING_MERGE:
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 81fcd7730d..0b6fc3d01e 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -50,12 +50,15 @@ SEARCH_SORT_OPTIONS = OrderedDict((
 # XXX: Deprecated: use GroupStatus instead
 STATUS_UNRESOLVED = 0
 STATUS_RESOLVED = 1
-STATUS_MUTED = 2
+STATUS_IGNORED = 2
 
 STATUS_CHOICES = {
     'resolved': STATUS_RESOLVED,
     'unresolved': STATUS_UNRESOLVED,
-    'muted': STATUS_MUTED,
+    'ignored': STATUS_IGNORED,
+
+    # TODO(dcramer): remove in 9.0
+    'muted': STATUS_IGNORED,
 }
 
 # Normalize counts to the 15 minute marker. This value MUST be less than 60. A
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index d037437156..b4e473ca7b 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -847,7 +847,7 @@ class EventManager(object):
         is_regression = bool(Group.objects.filter(
             id=group.id,
             # ensure we cant update things if the status has been set to
-            # muted
+            # ignored
             status__in=[GroupStatus.RESOLVED, GroupStatus.UNRESOLVED],
         ).exclude(
             # add to the regression window to account for races here
diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index b4cb6bf02f..f9b32827ae 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -26,7 +26,7 @@ class Activity(Model):
 
     SET_RESOLVED = 1
     SET_UNRESOLVED = 2
-    SET_MUTED = 3
+    SET_IGNORED = 3
     SET_PUBLIC = 4
     SET_PRIVATE = 5
     SET_REGRESSION = 6
@@ -46,7 +46,7 @@ class Activity(Model):
         (SET_RESOLVED_BY_AGE, 'set_resolved_by_age'),
         (SET_RESOLVED_IN_RELEASE, 'set_resolved_in_release'),
         (SET_UNRESOLVED, 'set_unresolved'),
-        (SET_MUTED, 'set_muted'),
+        (SET_IGNORED, 'set_ignored'),
         (SET_PUBLIC, 'set_public'),
         (SET_PRIVATE, 'set_private'),
         (SET_REGRESSION, 'set_regression'),
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index e3bdaa8b00..fb3a892c15 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -48,11 +48,14 @@ def looks_like_short_id(value):
 class GroupStatus(object):
     UNRESOLVED = 0
     RESOLVED = 1
-    MUTED = 2
+    IGNORED = 2
     PENDING_DELETION = 3
     DELETION_IN_PROGRESS = 4
     PENDING_MERGE = 5
 
+    # TODO(dcramer): remove in 9.0
+    MUTED = IGNORED
+
 
 def get_group_with_redirect(id, queryset=None):
     """
@@ -164,7 +167,7 @@ class Group(Model):
     status = BoundedPositiveIntegerField(default=0, choices=(
         (GroupStatus.UNRESOLVED, _('Unresolved')),
         (GroupStatus.RESOLVED, _('Resolved')),
-        (GroupStatus.MUTED, _('Muted')),
+        (GroupStatus.IGNORED, _('Ignored')),
     ), db_index=True)
     times_seen = BoundedPositiveIntegerField(default=1, db_index=True)
     last_seen = models.DateTimeField(default=timezone.now, db_index=True)
@@ -239,8 +242,11 @@ class Group(Model):
             return False
         return self.last_seen < timezone.now() - timedelta(hours=int(resolve_age))
 
-    def is_muted(self):
-        return self.get_status() == GroupStatus.MUTED
+    def is_ignored(self):
+        return self.get_status() == GroupStatus.IGNORED
+
+    # TODO(dcramer): remove in 9.0 / after plugins no long ref
+    is_muted = is_ignored
 
     def is_resolved(self):
         return self.get_status() == GroupStatus.RESOLVED
@@ -249,7 +255,7 @@ class Group(Model):
         # XXX(dcramer): GroupSerializer reimplements this logic
         from sentry.models import GroupSnooze
 
-        if self.status == GroupStatus.MUTED:
+        if self.status == GroupStatus.IGNORED:
             try:
                 snooze = GroupSnooze.objects.get(group=self)
             except GroupSnooze.DoesNotExist:
@@ -258,7 +264,7 @@ class Group(Model):
                 # XXX(dcramer): if the snooze row exists then we need
                 # to confirm its still valid
                 if snooze.until > timezone.now():
-                    return GroupStatus.MUTED
+                    return GroupStatus.IGNORED
                 else:
                     return GroupStatus.UNRESOLVED
 
diff --git a/src/sentry/models/groupsnooze.py b/src/sentry/models/groupsnooze.py
index 836630d5c7..863d162843 100644
--- a/src/sentry/models/groupsnooze.py
+++ b/src/sentry/models/groupsnooze.py
@@ -5,6 +5,9 @@ from sentry.db.models import Model, FlexibleForeignKey, sane_repr
 
 
 class GroupSnooze(Model):
+    """
+    A snooze marks an issue as ignored for a duration (specified by ``until``).
+    """
     __core__ = False
 
     group = FlexibleForeignKey('sentry.Group', unique=True)
diff --git a/src/sentry/plugins/base/notifier.py b/src/sentry/plugins/base/notifier.py
index 5c54a836b9..a09bc2bb95 100644
--- a/src/sentry/plugins/base/notifier.py
+++ b/src/sentry/plugins/base/notifier.py
@@ -25,7 +25,7 @@ class Notifier(object):
         """
 
     def should_notify(self, group, event):
-        if group.is_muted():
+        if group.is_ignored():
             return False
 
         project = group.project
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 2392906fa8..bd86d47b55 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -160,7 +160,7 @@ class NotificationPlugin(Plugin):
         if not self.is_configured(project=project):
             return False
 
-        if group.is_muted():
+        if group.is_ignored():
             return False
 
         # If the plugin doesn't support digests or they are not enabled,
diff --git a/src/sentry/static/sentry/app/components/activity/item.jsx b/src/sentry/static/sentry/app/components/activity/item.jsx
index 9e88f07b87..789aa8e1c0 100644
--- a/src/sentry/static/sentry/app/components/activity/item.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item.jsx
@@ -86,15 +86,15 @@ const ActivityItem = React.createClass({
           author: author,
           link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/`} />
         });
-      case 'set_muted':
-        if (data.snoozeDuration) {
-          return tct('[author] snoozed [link:an issue] for [duration]', {
+      case 'set_ignored':
+        if (data.ignoreDuration) {
+          return tct('[author] ignored [link:an issue] for [duration]', {
             author: author,
-            duration: <Duration seconds={data.snoozeDuration * 60} />,
+            duration: <Duration seconds={data.ignoreDuration * 60} />,
             link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/`} />
           });
         }
-        return tct('[author] muted [link:an issue]', {
+        return tct('[author] ignored [link:an issue]', {
           author: author,
           link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/`} />
         });
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index 7abde7ba72..ef2894b9ac 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -127,11 +127,11 @@ const CompactIssue = React.createClass({
 
   onSnooze(duration) {
     let data = {
-      status: 'muted'
+      status: 'ignored'
     };
 
     if (duration)
-      data.snoozeDuration = duration;
+      data.ignoreDuration = duration;
 
     this.onUpdate(data);
   },
@@ -165,8 +165,8 @@ const CompactIssue = React.createClass({
     if (issue.status === 'resolved') {
       className += ' isResolved';
     }
-    if (issue.status === 'muted') {
-      className += ' isMuted';
+    if (issue.status === 'ignored') {
+      className += ' isIgnored';
     }
 
     className += ' level-' + issue.level;
diff --git a/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx b/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
index 603e0f6cb9..19cf359bd0 100644
--- a/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
+++ b/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
@@ -51,7 +51,7 @@ const SnoozeAction = React.createClass({
         <Modal show={this.state.isModalOpen} title={t('Please confirm')} animation={false}
                onHide={this.closeModal} bsSize="sm">
           <div className="modal-body">
-            <h5>{t('How long should we snooze this issue?')}</h5>
+            <h5>{t('How long should we ignore this issue?')}</h5>
             <ul className="nav nav-stacked nav-pills">
               <li><a onClick={this.onSnooze.bind(this, Snooze['30MINUTES'])}>{t('30 minutes')}</a></li>
               <li><a onClick={this.onSnooze.bind(this, Snooze['2HOURS'])}>{t('2 hours')}</a></li>
diff --git a/src/sentry/static/sentry/app/components/mutedBox.jsx b/src/sentry/static/sentry/app/components/mutedBox.jsx
index 8ec0f0d2d5..784400c6f0 100644
--- a/src/sentry/static/sentry/app/components/mutedBox.jsx
+++ b/src/sentry/static/sentry/app/components/mutedBox.jsx
@@ -15,13 +15,13 @@ const MutedBox = React.createClass({
     let statusDetails = this.props.statusDetails;
     return (
       <div className="alert alert-info alert-block">
-        {statusDetails.snoozeUntil ?
+        {statusDetails.ignoreUntil ?
           <span>{t(
-            'This issue has been snoozed until %s',
-            <strong><DateTime date={statusDetails.snoozeUntil} /></strong>
+            'This issue has been ignored until %s',
+            <strong><DateTime date={statusDetails.ignoreUntil} /></strong>
           )} &mdash; </span>
         :
-          <span>{t('This issue has been muted')} &mdash; </span>
+          <span>{t('This issue has been ignored')} &mdash; </span>
         }
         {t('You will not be notified of any changes and it will not show up by default in feeds.')}
       </div>
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 1d40492cfa..8ec9d601f1 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -141,8 +141,8 @@ const StreamGroup = React.createClass({
     if (data.status === 'resolved') {
       className += ' isResolved';
     }
-    if (data.status === 'muted') {
-      className += ' isMuted';
+    if (data.status === 'ignored') {
+      className += ' isIgnored';
     }
 
     className += ' type-' + data.type;
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index 707fa330a2..3b80f2a1b2 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -25,6 +25,8 @@ const StreamTagStore = Reflux.createStore({
         values: [
           'resolved',
           'unresolved',
+          'ignored',
+          // TODO(dcramer): remove muted once data is migrated and 9.0+
           'muted',
           'assigned',
           'unassigned'
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index 599388c899..bf9c802b5b 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -52,14 +52,14 @@ const GroupActivity = React.createClass({
         );
       case 'set_unresolved':
         return t('%s marked this issue as unresolved', author);
-      case 'set_muted':
-        if (data.snoozeDuration) {
-          return t('%(author)s snoozed this issue for %(duration)s', {
+      case 'set_ignored':
+        if (data.ignoreDuration) {
+          return t('%(author)s ignored this issue for %(duration)s', {
             author: author,
-            duration: <Duration seconds={data.snoozeDuration * 60} />
+            duration: <Duration seconds={data.ignoreDuration * 60} />
           });
         }
-        return t('%s muted this issue', author);
+        return t('%s ignored this issue', author);
       case 'set_public':
         return t('%s made this issue public', author);
       case 'set_private':
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index 457d6f30d0..916d854f72 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -73,8 +73,8 @@ const GroupActions = React.createClass({
 
   onSnooze(duration) {
     this.onUpdate({
-      status: 'muted',
-      snoozeDuration: duration,
+      status: 'ignored',
+      ignoreDuration: duration,
     });
   },
 
@@ -93,9 +93,9 @@ const GroupActions = React.createClass({
       bookmarkClassName += ' active';
     }
 
-    let snoozeClassName = 'group-snooze btn btn-default btn-sm';
-    if (group.status === 'muted') {
-      snoozeClassName += ' active';
+    let ignoreClassName = 'group-ignore btn btn-default btn-sm';
+    if (group.status === 'ignored') {
+      ignoreClassName += ' active';
     }
 
     let hasRelease = defined(group.lastRelease);
@@ -150,18 +150,18 @@ const GroupActions = React.createClass({
           }
         </div>
         <div className="btn-group">
-          {group.status === 'muted' ?
-            <a className={snoozeClassName}
-               title={t('Remove Snooze')}
+          {group.status === 'ignored' ?
+            <a className={ignoreClassName}
+               title={t('Remove Ignored Status')}
                onClick={this.onUpdate.bind(this, {status: 'unresolved'})}>
-             {t('Snooze')}
+             {t('Ignore')}
             </a>
           :
             <DropdownLink
               caret={false}
-              className={snoozeClassName}
+              className={ignoreClassName}
               title={<span>
-                {t('Snooze')}
+                {t('Ignore')}
                 <span className="icon-arrow-down" style={{marginLeft: 3, marginRight: -3}} />
               </span>}>
               <MenuItem noAnchor={true}>
@@ -177,7 +177,7 @@ const GroupActions = React.createClass({
                 <a onClick={this.onSnooze.bind(this, Snooze.ONEWEEK)}>{t('for 1 week')}</a>
               </MenuItem>
               <MenuItem noAnchor={true}>
-                <a onClick={this.onUpdate.bind(this, {status: 'muted'})}>{t('forever')}</a>
+                <a onClick={this.onUpdate.bind(this, {status: 'ignored'})}>{t('forever')}</a>
               </MenuItem>
             </DropdownLink>
           }
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index e8c6c1767d..83aecac2c4 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -40,7 +40,7 @@ const GroupHeader = React.createClass({
       projectId: project.slug,
       itemIds: [group.id],
       data: {
-        status: group.status === 'muted' ? 'unresolved' : 'muted'
+        status: group.status === 'ignored' ? 'unresolved' : 'ignored'
       }
     }, {
       complete: () => {
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index 5802e6bdff..06828d71b2 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -89,7 +89,7 @@ const GroupEventDetails = React.createClass({
                   orgId={params.orgId}
                   projectId={params.projectId} />
             }
-            {group.status === 'muted' &&
+            {group.status === 'ignored' &&
               <MutedBox statusDetails={group.statusDetails} />
             }
             {group.status === 'resolved' && group.statusDetails.inNextRelease &&
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index debb8ff6fd..5c65db30d9 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -310,16 +310,16 @@ const StreamActions = React.createClass({
                 </MenuItem>
                 <MenuItem noAnchor={true}>
                   <ActionLink
-                    className="action-mute"
+                    className="action-ignore"
                     disabled={!this.state.anySelected}
-                    onAction={this.onUpdate.bind(this, {status: 'muted'})}
+                    onAction={this.onUpdate.bind(this, {status: 'ignored'})}
                     extraDescription={extraDescription}
                     confirmationQuestion={
                       this.state.allInQuerySelected
-                        ? t('Are you sure you want to mute all issues matching this search query?')
+                        ? t('Are you sure you want to ignore all issues matching this search query?')
                         : (count) =>
-                             tn('Are you sure you want to mute this %d issue?',
-                                'Are you sure you want to mute these %d issues?',
+                             tn('Are you sure you want to ignore this %d issue?',
+                                'Are you sure you want to ignore these %d issues?',
                                 count)
                     }
                     confirmLabel={
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 26affc562d..b784f5c9ce 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -74,7 +74,7 @@ const SearchBar = React.createClass({
         {
           title: t('Status'),
           desc: t('State of an issue'),
-          example: 'is:resolved, unresolved, muted, assigned, unassigned',
+          example: 'is:resolved, unresolved, ignored, assigned, unassigned',
           className: 'icon-toggle',
           value: 'is:'
         },
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index df095f5a73..11e733aeeb 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -249,7 +249,7 @@
       }
     }
 
-    &.isMuted {
+    &.isIgnored {
       .icon-soundoff {
         display: inline-block;
       }
@@ -736,7 +736,7 @@
       }
     }
 
-    &.isMuted {
+    &.isIgnored {
       h3 .icon-soundoff {
         display: inline-block;
       }
diff --git a/src/sentry/tasks/clear_expired_snoozes.py b/src/sentry/tasks/clear_expired_snoozes.py
index 0f8f07db7a..2039d84b96 100644
--- a/src/sentry/tasks/clear_expired_snoozes.py
+++ b/src/sentry/tasks/clear_expired_snoozes.py
@@ -16,7 +16,7 @@ def clear_expired_snoozes():
 
     Group.objects.filter(
         id__in=group_list,
-        status=GroupStatus.MUTED,
+        status=GroupStatus.IGNORED,
     ).update(
         status=GroupStatus.UNRESOLVED,
     )
diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index 374e076d33..17452e5ef3 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -227,7 +227,7 @@ def prepare_project_aggregates((_, stop), project):
 def prepare_project_issue_summaries(interval, project):
     start, stop = interval
 
-    queryset = project.group_set.exclude(status=GroupStatus.MUTED)
+    queryset = project.group_set.exclude(status=GroupStatus.IGNORED)
 
     # Fetch all new issues.
     new_issue_ids = set(
diff --git a/src/sentry/templatetags/sentry_activity.py b/src/sentry/templatetags/sentry_activity.py
index 6e97b32ef2..667fa7d501 100644
--- a/src/sentry/templatetags/sentry_activity.py
+++ b/src/sentry/templatetags/sentry_activity.py
@@ -24,7 +24,7 @@ ACTIVITY_ACTION_STRINGS = {
     Activity.NOTE: 'left a note',
     Activity.SET_RESOLVED: 'marked this event as resolved',
     Activity.SET_UNRESOLVED: 'marked this event as unresolved',
-    Activity.SET_MUTED: 'marked this event as muted',
+    Activity.SET_IGNORED: 'marked this event as ignored',
     Activity.SET_PUBLIC: 'made this event public',
     Activity.SET_PRIVATE: 'made this event private',
     Activity.SET_REGRESSION: 'marked this event as a regression',
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index afb7714eb0..4d01a908c1 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -171,8 +171,8 @@ class GroupTransformer(Transformer):
         status = obj.get_status()
         if status == GroupStatus.RESOLVED:
             status_label = 'resolved'
-        elif status == GroupStatus.MUTED:
-            status_label = 'muted'
+        elif status == GroupStatus.IGNORED:
+            status_label = 'ignored'
         else:
             status_label = 'unresolved'
 
diff --git a/tests/js/spec/components/issues/snoozeAction.spec.jsx b/tests/js/spec/components/issues/snoozeAction.spec.jsx
index 548d529147..66c3f13cf0 100644
--- a/tests/js/spec/components/issues/snoozeAction.spec.jsx
+++ b/tests/js/spec/components/issues/snoozeAction.spec.jsx
@@ -14,7 +14,7 @@ describe('SnoozeAction', function() {
   describe('render()', function() {
     it('should show a gravatar when avatar type is gravatar', function () {
       let wrapper = shallow(<SnoozeAction onSnooze={function(){}}/>);
-      expect(wrapper.find('h5').text()).to.equal('How long should we snooze this issue?');
+      expect(wrapper.find('h5').text()).to.equal('How long should we ignore this issue?');
     });
   });
 
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index ea8a5f054c..b4516d37a3 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -82,8 +82,8 @@ class GroupUpdateTest(APITestCase):
         url = '/api/0/issues/{}/'.format(group.id)
 
         response = self.client.put(url, data={
-            'status': 'muted',
-            'snoozeDuration': 30,
+            'status': 'ignored',
+            'ignoreDuration': 30,
         }, format='json')
 
         assert response.status_code == 200
@@ -93,10 +93,10 @@ class GroupUpdateTest(APITestCase):
         assert snooze.until > timezone.now() + timedelta(minutes=29)
         assert snooze.until < timezone.now() + timedelta(minutes=31)
 
-        assert response.data['statusDetails']['snoozeUntil'] == snooze.until
+        assert response.data['statusDetails']['ignoreUntil'] == snooze.until
 
         group = Group.objects.get(id=group.id)
-        assert group.get_status() == GroupStatus.MUTED
+        assert group.get_status() == GroupStatus.IGNORED
 
         assert GroupSubscription.objects.filter(
             user=self.user,
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 47636f57d6..bb75d8d4ab 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -232,7 +232,7 @@ class GroupUpdateTest(APITestCase):
     def test_global_resolve(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.IGNORED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
             checksum='b' * 32, status=GroupStatus.UNRESOLVED)
@@ -272,9 +272,9 @@ class GroupUpdateTest(APITestCase):
             is_active=True,
         ).exists()
 
-        # the muted entry should not be included
+        # the ignored entry should not be included
         new_group3 = Group.objects.get(id=group3.id)
-        assert new_group3.status == GroupStatus.MUTED
+        assert new_group3.status == GroupStatus.IGNORED
         assert new_group3.resolved_at is None
 
         assert not GroupSubscription.objects.filter(
@@ -294,7 +294,7 @@ class GroupUpdateTest(APITestCase):
     def test_selective_status_update(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.IGNORED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
             checksum='b' * 32, status=GroupStatus.UNRESOLVED)
@@ -330,7 +330,7 @@ class GroupUpdateTest(APITestCase):
 
         new_group3 = Group.objects.get(id=group3.id)
         assert new_group3.resolved_at is None
-        assert new_group3.status == GroupStatus.MUTED
+        assert new_group3.status == GroupStatus.IGNORED
 
         new_group4 = Group.objects.get(id=group4.id)
         assert new_group4.resolved_at is None
@@ -409,7 +409,7 @@ class GroupUpdateTest(APITestCase):
         ).exists()
 
     def test_set_unresolved_on_snooze(self):
-        group = self.create_group(checksum='a' * 32, status=GroupStatus.MUTED)
+        group = self.create_group(checksum='a' * 32, status=GroupStatus.IGNORED)
 
         GroupSnooze.objects.create(
             group=group,
@@ -444,8 +444,8 @@ class GroupUpdateTest(APITestCase):
             group=group,
         )
         response = self.client.put(url, data={
-            'status': 'muted',
-            'snoozeDuration': 30,
+            'status': 'ignored',
+            'ignoreDuration': 30,
         }, format='json')
 
         assert response.status_code == 200
@@ -460,22 +460,22 @@ class GroupUpdateTest(APITestCase):
         assert snooze.until < now + timedelta(minutes=31)
 
         # Drop microsecond value for MySQL
-        response.data['statusDetails']['snoozeUntil'] = response.data['statusDetails']['snoozeUntil'].replace(microsecond=0)
+        response.data['statusDetails']['ignoreUntil'] = response.data['statusDetails']['ignoreUntil'].replace(microsecond=0)
 
         assert response.data == {
-            'status': 'muted',
+            'status': 'ignored',
             'statusDetails': {
-                'snoozeUntil': snooze.until,
+                'ignoreUntil': snooze.until,
             },
         }
 
         group = Group.objects.get(id=group.id)
-        assert group.get_status() == GroupStatus.MUTED
+        assert group.get_status() == GroupStatus.IGNORED
 
     def test_set_bookmarked(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.IGNORED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
             checksum='b' * 32, status=GroupStatus.UNRESOLVED)
@@ -609,7 +609,7 @@ class GroupUpdateTest(APITestCase):
     def test_set_has_seen(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.IGNORED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
             checksum='b' * 32, status=GroupStatus.UNRESOLVED)
@@ -701,7 +701,7 @@ class GroupDeleteTest(APITestCase):
     def test_delete_by_id(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.IGNORED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
             checksum='b' * 32, status=GroupStatus.UNRESOLVED)
diff --git a/tests/sentry/api/endpoints/test_project_searches.py b/tests/sentry/api/endpoints/test_project_searches.py
index 892a87507f..c96949d386 100644
--- a/tests/sentry/api/endpoints/test_project_searches.py
+++ b/tests/sentry/api/endpoints/test_project_searches.py
@@ -58,8 +58,8 @@ class ProjectSearchCreateTest(APITestCase):
             'project_slug': project.slug,
         })
         response = self.client.post(url, data={
-            'name': 'muted',
-            'query': 'is:muted'
+            'name': 'ignored',
+            'query': 'is:ignored'
         })
 
         assert response.status_code == 201, response.content
@@ -77,7 +77,7 @@ class ProjectSearchCreateTest(APITestCase):
         team = self.create_team()
         project = self.create_project(team=team, name='foo')
 
-        SavedSearch.objects.create(name='muted', project=project, query='')
+        SavedSearch.objects.create(name='ignored', project=project, query='')
 
         url = reverse('sentry-api-0-project-searches', kwargs={
             'organization_slug': project.organization.slug,
@@ -85,8 +85,8 @@ class ProjectSearchCreateTest(APITestCase):
         })
 
         response = self.client.post(url, data={
-            'name': 'muted',
-            'query': 'is:muted'
+            'name': 'ignored',
+            'query': 'is:ignored'
         })
 
         assert response.status_code == 400, response.content
@@ -102,8 +102,8 @@ class ProjectSearchCreateTest(APITestCase):
             'project_slug': project.slug,
         })
         response = self.client.post(url, data={
-            'name': 'muted',
-            'query': 'is:muted',
+            'name': 'ignored',
+            'query': 'is:ignored',
             'isDefault': True,
         })
 
@@ -133,8 +133,8 @@ class ProjectSearchCreateTest(APITestCase):
             'project_slug': project.slug,
         })
         response = self.client.post(url, data={
-            'name': 'muted',
-            'query': 'is:muted',
+            'name': 'ignored',
+            'query': 'is:ignored',
             'isUserDefault': True,
         })
 
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index 8af5651a25..b2e4e2f106 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -15,12 +15,12 @@ from sentry.testutils import TestCase
 
 
 class GroupSerializerTest(TestCase):
-    def test_is_muted_with_expired_snooze(self):
+    def test_is_ignored_with_expired_snooze(self):
         now = timezone.now().replace(microsecond=0)
 
         user = self.create_user()
         group = self.create_group(
-            status=GroupStatus.MUTED,
+            status=GroupStatus.IGNORED,
         )
         GroupSnooze.objects.create(
             group=group,
@@ -31,12 +31,12 @@ class GroupSerializerTest(TestCase):
         assert result['status'] == 'unresolved'
         assert result['statusDetails'] == {}
 
-    def test_is_muted_with_valid_snooze(self):
+    def test_is_ignored_with_valid_snooze(self):
         now = timezone.now().replace(microsecond=0)
 
         user = self.create_user()
         group = self.create_group(
-            status=GroupStatus.MUTED,
+            status=GroupStatus.IGNORED,
         )
         snooze = GroupSnooze.objects.create(
             group=group,
@@ -44,8 +44,8 @@ class GroupSerializerTest(TestCase):
         )
 
         result = serialize(group, user)
-        assert result['status'] == 'muted'
-        assert result['statusDetails'] == {'snoozeUntil': snooze.until}
+        assert result['status'] == 'ignored'
+        assert result['statusDetails'] == {'ignoreUntil': snooze.until}
 
     def test_resolved_in_next_release(self):
         release = Release.objects.create(
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 72b14ef74e..ccf206cd4b 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -20,7 +20,7 @@ class GroupTest(TestCase):
         group = self.create_group(status=GroupStatus.RESOLVED)
         assert group.is_resolved()
 
-        group.status = GroupStatus.MUTED
+        group.status = GroupStatus.IGNORED
         assert not group.is_resolved()
 
         group.status = GroupStatus.UNRESOLVED
@@ -87,19 +87,19 @@ class GroupTest(TestCase):
         assert group.get_latest_event().event_id == '3'
         assert group.get_oldest_event().event_id == '0'
 
-    def test_is_muted_with_expired_snooze(self):
+    def test_is_ignored_with_expired_snooze(self):
         group = self.create_group(
-            status=GroupStatus.MUTED,
+            status=GroupStatus.IGNORED,
         )
         GroupSnooze.objects.create(
             group=group,
             until=timezone.now() - timedelta(minutes=1),
         )
-        assert not group.is_muted()
+        assert not group.is_ignored()
 
     def test_status_with_expired_snooze(self):
         group = self.create_group(
-            status=GroupStatus.MUTED,
+            status=GroupStatus.IGNORED,
         )
         GroupSnooze.objects.create(
             group=group,
diff --git a/tests/sentry/tasks/test_clear_expired_snoozes.py b/tests/sentry/tasks/test_clear_expired_snoozes.py
index b762f35b46..b79a37b01d 100644
--- a/tests/sentry/tasks/test_clear_expired_snoozes.py
+++ b/tests/sentry/tasks/test_clear_expired_snoozes.py
@@ -14,7 +14,7 @@ class ClearExpiredSnoozesTest(TestCase):
 
     def test_simple(self):
         group1 = self.create_group(
-            status=GroupStatus.MUTED,
+            status=GroupStatus.IGNORED,
         )
         GroupSnooze.objects.create(
             group=group1,
@@ -22,7 +22,7 @@ class ClearExpiredSnoozesTest(TestCase):
         )
 
         group2 = self.create_group(
-            status=GroupStatus.MUTED,
+            status=GroupStatus.IGNORED,
         )
         GroupSnooze.objects.create(
             group=group2,
@@ -37,4 +37,4 @@ class ClearExpiredSnoozesTest(TestCase):
 
         assert Group.objects.get(
             id=group2.id,
-        ).status == GroupStatus.MUTED
+        ).status == GroupStatus.IGNORED
