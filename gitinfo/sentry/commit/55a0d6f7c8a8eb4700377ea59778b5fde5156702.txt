commit 55a0d6f7c8a8eb4700377ea59778b5fde5156702
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 30 15:54:30 2010 -0700

    Refactor: cleanup unused variables/imports

diff --git a/sentry/client/base.py b/sentry/client/base.py
index ba94bc2441..0227910ff8 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -7,7 +7,6 @@ import logging
 import sys
 import traceback
 import urllib2
-import warnings
 
 from django.core.cache import cache
 from django.template import TemplateSyntaxError
@@ -51,7 +50,7 @@ class SentryClient(object):
                     'key': conf.KEY,
                 }
                 try:
-                    response = urlread(url, GET=data, timeout=conf.REMOTE_TIMEOUT)
+                    urlread(url, GET=data, timeout=conf.REMOTE_TIMEOUT)
                 except urllib2.URLError, e:
                     logger.error('Unable to reach Sentry log server: %s' % (e,), exc_info=sys.exc_info(), extra={'remote_url': url})
                     logger.log(kwargs.pop('level', None) or logging.ERROR, kwargs.pop('message', None))
diff --git a/sentry/client/models.py b/sentry/client/models.py
index 600ff8e912..57b9222ac6 100644
--- a/sentry/client/models.py
+++ b/sentry/client/models.py
@@ -7,7 +7,6 @@ from django.db import  transaction
 from django.http import Http404
 
 from sentry import conf
-from sentry.client.base import SentryClient
 
 logger = logging.getLogger('sentry.errors')
 
diff --git a/sentry/feeds.py b/sentry/feeds.py
index bc440e0ef4..1df137c5cf 100644
--- a/sentry/feeds.py
+++ b/sentry/feeds.py
@@ -1,4 +1,3 @@
-from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.http import HttpResponse
 from django.utils import feedgenerator
@@ -6,8 +5,6 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import Message, GroupedMessage
 
-import logging
-
 class MessageFeed(object):
     def __call__(self, request):
         feed_dict = {
diff --git a/sentry/helpers.py b/sentry/helpers.py
index fcc2f5d42e..912b7cdf7f 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -20,7 +20,7 @@ def get_filters():
             try:
                 module = __import__(module_name, {}, {}, class_name)
                 filter_ = getattr(module, class_name)
-            except Exception, exc:
+            except Exception:
                 logging.exception('Unable to import %s' % (filter_,))
                 continue
             filters.append(filter_)
diff --git a/sentry/management/commands/cleanup_sentry.py b/sentry/management/commands/cleanup_sentry.py
index b7d1a7ba69..31383b3511 100644
--- a/sentry/management/commands/cleanup_sentry.py
+++ b/sentry/management/commands/cleanup_sentry.py
@@ -1,4 +1,4 @@
-from django.core.management.base import CommandError, BaseCommand
+from django.core.management.base import BaseCommand
 
 from sentry.models import Message, GroupedMessage
 
diff --git a/sentry/manager.py b/sentry/manager.py
index 350f81abb4..20e7a52201 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -5,11 +5,9 @@ import warnings
 
 from django.db import models
 from django.db.models import signals
-from django.template import TemplateSyntaxError
-from django.views.debug import ExceptionReporter
 
 from sentry import conf
-from sentry.helpers import construct_checksum, transform, varmap
+from sentry.helpers import construct_checksum
 
 assert not conf.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
diff --git a/sentry/models.py b/sentry/models.py
index 8c52767196..4b6781256b 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -6,21 +6,17 @@ except ImportError:
 import datetime
 import logging
 import sys
-import traceback
-import warnings
 
 from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured
 from django.db import models, transaction
 from django.db.models import Count
 from django.db.models.signals import post_syncdb
-from django.http import Http404
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import conf
-from sentry.client.base import SentryClient
-from sentry.helpers import cached_property, construct_checksum, get_db_engine, get_installed_apps, transform
+from sentry.helpers import cached_property, construct_checksum, get_db_engine, transform
 from sentry.manager import GroupedMessageManager, SentryManager
 from sentry.reporter import FakeRequest
 
@@ -142,7 +138,7 @@ class GroupedMessage(MessageBase):
         if cls not in created_models:
             return
 
-        from django.db import connections, transaction
+        from django.db import connections
         
         try:
             cursor = connections[db].cursor()
diff --git a/sentry/reporter.py b/sentry/reporter.py
index 8dc4c17fc2..efe86de2be 100644
--- a/sentry/reporter.py
+++ b/sentry/reporter.py
@@ -1,20 +1,10 @@
-import base64
-try:
-    import cPickle as pickle
-except ImportError:
-    import pickle
-import logging
 from pprint import pformat
 
-from django.conf import settings
-from django.template import (Template, Context, TemplateDoesNotExist,
-    TemplateSyntaxError)
+from django.template import Template, Context, TemplateDoesNotExist
 from django.utils.encoding import smart_unicode
 from django.utils.html import escape
 from django.views.debug import ExceptionReporter, linebreak_iter
 
-from indexer.models import Index
-
 class ImprovedExceptionReporter(ExceptionReporter):
     def __init__(self, request, exc_type, exc_value, frames, template_info=None):
         ExceptionReporter.__init__(self, request, exc_type, exc_value, None)
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 8458febac3..e09124f8c2 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -1,6 +1,5 @@
 from django import template
 from django.db.models import Count
-from django.utils import simplejson
 
 from sentry.helpers import get_db_engine
 from sentry.plugins import GroupActionProvider
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 9d6ed2da32..16805dbd3f 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -15,6 +15,7 @@ from django.conf import settings
 from django.contrib.auth.models import User
 from django.core import mail
 from django.core.handlers.wsgi import WSGIRequest, WSGIHandler
+from django.core.management import call_command
 from django.core.urlresolvers import reverse
 from django.core.signals import got_request_exception
 from django.core.servers import basehttp
@@ -22,7 +23,6 @@ from django.test.client import Client
 from django.test import TestCase
 from django.template import TemplateSyntaxError
 from django.utils.encoding import smart_unicode
-from django.utils import simplejson
 
 from sentry import conf
 from sentry.helpers import transform
@@ -368,8 +368,6 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.message, smart_unicode(exc))
 
     def testSignalsWithoutRequest(self):
-        request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
-
         try:
             Message.objects.get(id=999999999)
         except Message.DoesNotExist, exc:
@@ -858,7 +856,6 @@ class SentryClientTest(TestCase):
         conf.CLIENT = self._client
     
     def test_get_client(self):
-        from sentry.client.base import SentryClient
         from sentry.client.log import LoggingSentryClient
         self.assertEquals(get_client().__class__, SentryClient)
         self.assertEquals(get_client(), get_client())
@@ -891,7 +888,6 @@ class SentryClientTest(TestCase):
         self.assertEquals(_foo[''].class_name, 'Exception')
 
     def test_celery_client(self):
-        from sentry.client.base import SentryClient
         from sentry.client.celery import CelerySentryClient
         self.assertEquals(get_client().__class__, SentryClient)
         self.assertEquals(get_client(), get_client())
diff --git a/sentry/urls.py b/sentry/urls.py
index dcad211d76..180f00a79a 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -1,6 +1,5 @@
 import os
 
-from django.conf import settings
 from django.conf.urls.defaults import *
 
 from sentry.conf import KEY
diff --git a/sentry/views.py b/sentry/views.py
index 05f6edcea3..fc15b39e35 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -4,19 +4,16 @@ try:
 except ImportError:
     import pickle
 import datetime
-from math import log
 import logging
 import zlib
 
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
-from django.db.models import Count
 from django.http import HttpResponse, HttpResponseBadRequest, \
     HttpResponseForbidden, HttpResponseRedirect, Http404
 from django.shortcuts import render_to_response, get_object_or_404
 from django.template.loader import render_to_string
 from django.utils import simplejson
-from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
@@ -39,7 +36,7 @@ def get_filters():
             try:
                 module = __import__(module_name, {}, {}, class_name)
                 filter_ = getattr(module, class_name)
-            except Exception, exc:
+            except Exception:
                 logging.exception('Unable to import %s' % (filter_,))
                 continue
             if filter_.column.startswith('data__'):
@@ -62,7 +59,7 @@ def login_required(func):
 
 @csrf_protect
 def login(request):
-    from django.contrib.auth import authenticate, login as login_
+    from django.contrib.auth import login as login_
     from django.contrib.auth.forms import AuthenticationForm
     
     if request.POST:
@@ -297,9 +294,9 @@ def store(request):
     try:
         try:
             data = pickle.loads(base64.b64decode(data).decode('zlib'))
-        except zlib.error, e:
+        except zlib.error:
             data = pickle.loads(base64.b64decode(data))
-    except Exception, e:
+    except Exception:
         return HttpResponseForbidden('Bad data')
 
     GroupedMessage.objects.from_kwargs(**data)
