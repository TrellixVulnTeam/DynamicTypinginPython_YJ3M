commit 6019f410e84dc8c1b1a1c0c5c88644d8215fbd10
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Mar 14 13:20:51 2019 -0700

    ref(integrations): Adding Logging to GitLab Installation Process. (#12320)
    
    Add logging to gitlab installation process so we can more easily diagnose setup problems.

diff --git a/src/sentry/identity/gitlab/provider.py b/src/sentry/identity/gitlab/provider.py
index ba44218b26..7d4feac841 100644
--- a/src/sentry/identity/gitlab/provider.py
+++ b/src/sentry/identity/gitlab/provider.py
@@ -1,11 +1,15 @@
 from __future__ import absolute_import
 
+import logging
+
 from sentry import http
 from sentry.auth.exceptions import IdentityNotValid
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.identity.oauth2 import OAuth2Provider
 from sentry.utils import json
 
+logger = logging.getLogger('sentry.integrations.gitlab')
+
 
 def get_oauth_data(payload):
     data = {'access_token': payload['access_token']}
@@ -39,8 +43,19 @@ def get_user_info(access_token, installation_data):
         },
         verify=installation_data['verify_ssl']
     )
-
-    resp.raise_for_status()
+    try:
+        resp.raise_for_status()
+    except Exception as e:
+        logger.info('gitlab.identity.get-user-info-failure',
+                    extra={
+                        'url': installation_data['url'],
+                        'verify_ssl': installation_data['verify_ssl'],
+                        'client_id': installation_data['client_id'],
+                        'error_status': e.code,
+                        'error_message': e.message,
+                    }
+                    )
+        raise e
     return resp.json()
 
 
@@ -88,7 +103,15 @@ class GitlabIdentityProvider(OAuth2Provider):
         try:
             body = safe_urlread(req)
             payload = json.loads(body)
-        except Exception:
+        except Exception as e:
+            self.logger(
+                'gitlab.refresh-identity-failure',
+                extra={
+                    'identity_id': identity.id,
+                    'error_status': e.code,
+                    'error_message': e.message,
+                }
+            )
             payload = {}
 
         self.handle_refresh_error(req, payload)
diff --git a/src/sentry/identity/oauth2.py b/src/sentry/identity/oauth2.py
index 1ed9df7d66..f1b1f80513 100644
--- a/src/sentry/identity/oauth2.py
+++ b/src/sentry/identity/oauth2.py
@@ -137,15 +137,42 @@ class OAuth2Provider(Provider):
         formatted_error = u'HTTP {} ({}): {}'.format(req.status_code, error_name, error_description)
 
         if req.status_code == 401:
+            self.logger.info(
+                'identity.oauth.refresh.identity-not-valid-error',
+                extra={
+                    'error_name': error_name,
+                    'error_status_code': req.status_code,
+                    'error_description': error_description,
+                    'provider_key': self.key,
+                }
+            )
             raise IdentityNotValid(formatted_error)
 
         if req.status_code == 400:
             # this may not be common, but at the very least Google will return
             # an invalid grant when a user is suspended
             if error_name == 'invalid_grant':
+                self.logger.info(
+                    'identity.oauth.refresh.identity-not-valid-error',
+                    extra={
+                        'error_name': error_name,
+                        'error_status_code': req.status_code,
+                        'error_description': error_description,
+                        'provider_key': self.key,
+                    }
+                )
                 raise IdentityNotValid(formatted_error)
 
         if req.status_code != 200:
+            self.logger.info(
+                'identity.oauth.refresh.api-error',
+                extra={
+                    'error_name': error_name,
+                    'error_status_code': req.status_code,
+                    'error_description': error_description,
+                    'provider_key': self.key,
+                }
+            )
             raise ApiError(formatted_error)
 
     def refresh_identity(self, identity, *args, **kwargs):
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index 7348456497..152c2bee26 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -170,7 +170,14 @@ class InstallationConfigView(PipelineView):
                     "client_secret": form_data.get('client_secret'),
                     "verify_ssl": form_data.get('verify_ssl')
                 })
-
+                pipeline.get_logger().info(
+                    'gitlab.setup.installation-config-view.success',
+                    extra={
+                        'base_url': form_data.get('url'),
+                        'client_id': form_data.get('client_id'),
+                        'verify_ssl': form_data.get('verify_ssl'),
+                    }
+                )
                 return pipeline.next_step()
         else:
             form = InstallationForm()
@@ -249,7 +256,17 @@ class GitlabIntegrationProvider(IntegrationProvider):
         try:
             resp = client.get_group(installation_data['group'])
             return resp.json
-        except ApiError:
+        except ApiError as e:
+            self.get_logger().info(
+                'gitlab.installation.get-group-info-failure',
+                extra={
+                    'base_url': installation_data['url'],
+                    'verify_ssl': installation_data['verify_ssl'],
+                    'group': installation_data['group'],
+                    'error_message': e.message,
+                    'error_status': e.code,
+                }
+            )
             raise IntegrationError('The requested GitLab group could not be found.')
 
     def get_pipeline_views(self):
@@ -297,7 +314,6 @@ class GitlabIntegrationProvider(IntegrationProvider):
                 'data': oauth_data,
             },
         }
-
         return integration
 
     def setup(self):
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index 035ce71d4d..54bccd52c3 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -40,6 +40,13 @@ class IntegrationPipeline(Pipeline):
         try:
             data = self.provider.build_integration(self.state.data)
         except IntegrationError as e:
+            self.get_logger().info(
+                'build-integration.failure',
+                extra={
+                    'error_message': e.message,
+                    'provider_key': self.provider.key,
+                }
+            )
             return self.error(e.message)
 
         response = self._finish_pipeline(data)
diff --git a/src/sentry/pipeline/__init__.py b/src/sentry/pipeline/__init__.py
index ca5633832e..5855fccc0d 100644
--- a/src/sentry/pipeline/__init__.py
+++ b/src/sentry/pipeline/__init__.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+import logging
+
 from types import LambdaType
 
 from sentry.models import Organization
@@ -240,3 +242,6 @@ class Pipeline(object):
 
     def fetch_state(self, key=None):
         return self.state.data if key is None else self.state.data.get(key)
+
+    def get_logger(self):
+        return logging.getLogger('sentry.integration.%s' % (self.provider.key, ))
