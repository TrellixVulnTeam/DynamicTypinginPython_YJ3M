commit c935a708afb08ef089288b5f7324f53571b13f86
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 2 16:59:43 2016 -0800

    Fill FIRST_EVENT task

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index e0bf33bda1..a547729a38 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -31,7 +31,7 @@ from sentry.models import (
     GroupStatus, Project, Release, TagKey, UserReport
 )
 from sentry.plugins import plugins
-from sentry.signals import regression_signal
+from sentry.signals import first_event, regression_signal
 from sentry.utils.logging import suppress_exceptions
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import post_process_group
@@ -511,6 +511,7 @@ class EventManager(object):
         if not raw:
             if not project.first_event:
                 project.update(first_event=date)
+                first_event.send(instance=project, sender=Project)
 
             post_process_group.delay(
                 group=group,
diff --git a/src/sentry/models/organizationonboardingtask.py b/src/sentry/models/organizationonboardingtask.py
index 00ac5d142c..3a73b3585d 100644
--- a/src/sentry/models/organizationonboardingtask.py
+++ b/src/sentry/models/organizationonboardingtask.py
@@ -7,6 +7,7 @@ sentry.models.organizationonboardingtask
 """
 from django.conf import settings
 from django.db import models
+from django.utils import timezone
 from jsonfield import JSONField
 
 from sentry.db.models import (
@@ -16,6 +17,7 @@ from sentry.db.models import (
     sane_repr
 )
 
+
 class OnboardingTask(object):
     FIRST_EVENT = 1
     INVITE_MEMBER = 2
@@ -83,7 +85,7 @@ class OrganizationOnboardingTask(Model):
     project = FlexibleForeignKey('sentry.Project', null=True)  # if task is associated with a project
     task = BoundedPositiveIntegerField(choices=TASK_CHOICES)
     status = BoundedPositiveIntegerField(choices=STATUS_CHOICES)
-    date_completed = models.DateTimeField()
+    date_completed = models.DateTimeField(default=timezone.now)
     data = JSONField()  # INVITE_MEMBER { invited_member: user.id }
 
     class Meta:
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
new file mode 100644
index 0000000000..4130b9132e
--- /dev/null
+++ b/src/sentry/receivers/onboarding.py
@@ -0,0 +1,33 @@
+from __future__ import print_function, absolute_import
+
+from django.db import IntegrityError, transaction
+
+from sentry.models import (
+    OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
+)
+from sentry.signals import first_event
+
+
+@first_event.connect(weak=False)
+def record_first_event(instance, **kwargs):
+    try:
+        with transaction.atomic():
+            OrganizationOnboardingTask.objects.create(
+                organization=instance.organization,
+                project=instance,
+                task=OnboardingTask.FIRST_EVENT,
+                status=OnboardingTaskStatus.COMPLETE,
+                date_completed=instance.first_event,
+                data={},
+            )
+    except IntegrityError:
+        OrganizationOnboardingTask.objects.filter(
+            organization=instance.organization,
+            task=OnboardingTask.FIRST_EVENT,
+        ).exclude(
+            status=OnboardingTaskStatus.COMPLETE,
+        ).update(
+            project=instance,
+            date_completed=instance.first_event,
+            data={},
+        )
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 71b48f3d58..8e15ebfda5 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -1,8 +1,9 @@
 from __future__ import absolute_import
 
-from django.dispatch import Signal
 from functools import wraps
 
+from django.dispatch import Signal
+
 
 class BetterSignal(Signal):
     def connect(self, receiver=None, **kwargs):
@@ -27,3 +28,4 @@ buffer_incr_complete = BetterSignal(providing_args=["model", "columns", "extra",
 event_received = BetterSignal(providing_args=["ip"])
 pending_delete = BetterSignal(providing_args=["instance"])
 event_processed = BetterSignal(providing_args=['project', 'group', 'event'])
+first_event = BetterSignal(providing_args=["instance"])
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
new file mode 100644
index 0000000000..7f6e65672b
--- /dev/null
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from django.utils import timezone
+
+from sentry.models import (
+    OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
+)
+from sentry.signals import first_event
+from sentry.testutils import TestCase
+
+
+class RecordFirstEventTest(TestCase):
+    def test_no_existing_task(self):
+        project = self.create_project(first_event=timezone.now())
+
+        first_event.send(instance=project, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=project.organization,
+            task=OnboardingTask.FIRST_EVENT
+        )
+        assert task.status == OnboardingTaskStatus.COMPLETE
+        assert task.project == project
+        assert task.date == project.first_seen
+
+    def test_existing_pending_task(self):
+        project = self.create_project(first_event=timezone.now())
+        task = OrganizationOnboardingTask.objects.create(
+            organization=project.organization,
+            task=OnboardingTask.FIRST_EVENT,
+            status=OnboardingTaskStatus.PENDING,
+        )
+
+        first_event.send(instance=project, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(id=task.id)
+        assert task.status == OnboardingTaskStatus.COMPLETE
+        assert task.project == project
+        assert task.date == project.first_seen
+
+    def test_existing_complete_task(self):
+        project = self.create_project(first_event=timezone.now())
+        task = OrganizationOnboardingTask.objects.create(
+            organization=project.organization,
+            task=OnboardingTask.FIRST_EVENT,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+
+        first_event.send(instance=project, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(id=task.id)
+        assert task.status == OnboardingTaskStatus.COMPLETE
+        assert not task.project
