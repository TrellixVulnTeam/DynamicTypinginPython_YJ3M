commit 439b634a3175a24d8074d74b7510df36c4d7a58d
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon Mar 16 11:56:55 2020 +0100

    fix(ingest): Do not crash when chunks are missing in attachments (#17697)
    
    Generally speaking we want to stop the consumers when processing a message fails, so we can fix the issue and continue processing from the same offset (for as long as we don't have a dead letter queue at least).
    
    In this case however there's nothing we can fix post-mortem because we are somewhat sure we just lost the data.
    
    Fix SENTRY-FK9

diff --git a/src/sentry/attachments/__init__.py b/src/sentry/attachments/__init__.py
index 709d434f3b..d5b6ec3db0 100644
--- a/src/sentry/attachments/__init__.py
+++ b/src/sentry/attachments/__init__.py
@@ -6,7 +6,7 @@ from django.conf import settings
 
 from sentry.utils.imports import import_string
 
-from .base import CachedAttachment
+from .base import CachedAttachment, MissingAttachmentChunks  # noqa
 
 
 attachment_cache = import_string(settings.SENTRY_ATTACHMENTS)(**settings.SENTRY_ATTACHMENTS_OPTIONS)
diff --git a/src/sentry/attachments/base.py b/src/sentry/attachments/base.py
index cc72f60447..7b8257e196 100644
--- a/src/sentry/attachments/base.py
+++ b/src/sentry/attachments/base.py
@@ -14,6 +14,10 @@ ATTACHMENT_DATA_CHUNK_KEY = u"{key}:a:{id}:{chunk_index}"
 UNINITIALIZED_DATA = object()
 
 
+class MissingAttachmentChunks(Exception):
+    pass
+
+
 class CachedAttachment(object):
     def __init__(
         self,
@@ -142,7 +146,10 @@ class BaseAttachmentCache(object):
         data = []
 
         for key in attachment.chunk_keys:
-            data.append(zlib.decompress(self.inner.get(key, raw=True)))
+            raw_data = self.inner.get(key, raw=True)
+            if raw_data is None:
+                raise MissingAttachmentChunks()
+            data.append(zlib.decompress(raw_data))
 
         return b"".join(data)
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index cecdd933a4..2cae3addfe 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -14,7 +14,7 @@ from django.db.models import Func
 from django.utils.encoding import force_text
 
 from sentry import buffer, eventstore, eventtypes, eventstream, features, tsdb
-from sentry.attachments import attachment_cache
+from sentry.attachments import MissingAttachmentChunks, attachment_cache
 from sentry.constants import (
     DataCategory,
     DEFAULT_STORE_NORMALIZER_ARGS,
@@ -601,10 +601,18 @@ class EventManager(object):
         # Load attachments first, but persist them at the very last after
         # posting to eventstream to make sure all counters and eventstream are
         # incremented for sure.
-        attachments = get_attachments(cache_key, job["event"])
-        for attachment in attachments:
-            key = "bytes.stored.%s" % (attachment.type,)
-            job["event_metrics"][key] = (job["event_metrics"].get(key) or 0) + len(attachment.data)
+        attachments = []
+        for attachment in get_attachments(cache_key, job["event"]):
+            try:
+                attachment_data = attachment.data
+            except MissingAttachmentChunks:
+                logger.exception("Missing chunks for cache_key=%s", cache_key)
+            else:
+                key = "bytes.stored.%s" % (attachment.type,)
+                job["event_metrics"][key] = (job["event_metrics"].get(key) or 0) + len(
+                    attachment_data
+                )
+                attachments.append(attachment)
 
         _nodestore_save_many(jobs)
 
diff --git a/src/sentry/ingest/ingest_consumer.py b/src/sentry/ingest/ingest_consumer.py
index e2d7d11100..87db9af714 100644
--- a/src/sentry/ingest/ingest_consumer.py
+++ b/src/sentry/ingest/ingest_consumer.py
@@ -21,7 +21,7 @@ from sentry.utils.dates import to_datetime
 from sentry.utils.cache import cache_key_for_event
 from sentry.utils.kafka import create_batching_kafka_consumer
 from sentry.utils.batching_kafka_consumer import AbstractBatchWorker
-from sentry.attachments import CachedAttachment, attachment_cache
+from sentry.attachments import CachedAttachment, MissingAttachmentChunks, attachment_cache
 from sentry.ingest.userreport import Conflict, save_userreport
 from sentry.event_manager import save_transaction_events
 
@@ -245,7 +245,13 @@ def process_individual_attachment(message, projects):
         headers={"Content-Type": attachment.content_type},
     )
 
-    file.putfile(BytesIO(attachment.data))
+    try:
+        data = attachment.data
+    except MissingAttachmentChunks:
+        logger.exception("Missing chunks for cache_key=%s", cache_key)
+        return
+
+    file.putfile(BytesIO(data))
     EventAttachment.objects.create(
         project_id=project.id, group_id=group_id, event_id=event_id, name=attachment.name, file=file
     )
diff --git a/tests/sentry/ingest/ingest_consumer/test_ingest_consumer_processing.py b/tests/sentry/ingest/ingest_consumer/test_ingest_consumer_processing.py
index 430b9a616b..38d83f738d 100644
--- a/tests/sentry/ingest/ingest_consumer/test_ingest_consumer_processing.py
+++ b/tests/sentry/ingest/ingest_consumer/test_ingest_consumer_processing.py
@@ -11,7 +11,6 @@ from sentry.ingest.ingest_consumer import (
     process_individual_attachment,
     process_userreport,
 )
-from sentry.attachments import attachment_cache
 from sentry.event_manager import EventManager
 from sentry.models import EventAttachment, UserReport, EventUser
 
@@ -63,70 +62,75 @@ def test_deduplication_works(default_project, task_runner, preprocess_event):
 
 
 @pytest.mark.django_db
-def test_with_attachments(default_project, task_runner, preprocess_event):
+@pytest.mark.parametrize("missing_chunks", (True, False))
+def test_with_attachments(default_project, task_runner, missing_chunks, monkeypatch):
+    monkeypatch.setattr("sentry.features.has", lambda *a, **kw: True)
+
     payload = get_normalized_event({"message": "hello world"}, default_project)
     event_id = payload["event_id"]
     attachment_id = "ca90fb45-6dd9-40a0-a18f-8693aa621abb"
     project_id = default_project.id
     start_time = time.time() - 3600
 
-    process_attachment_chunk(
-        {
-            "payload": b"Hello ",
-            "event_id": event_id,
-            "project_id": project_id,
-            "id": attachment_id,
-            "chunk_index": 0,
-        },
-        projects={default_project.id: default_project},
-    )
+    if not missing_chunks:
+        process_attachment_chunk(
+            {
+                "payload": b"Hello ",
+                "event_id": event_id,
+                "project_id": project_id,
+                "id": attachment_id,
+                "chunk_index": 0,
+            },
+            projects={default_project.id: default_project},
+        )
 
-    process_attachment_chunk(
-        {
-            "payload": b"World!",
-            "event_id": event_id,
-            "project_id": project_id,
-            "id": attachment_id,
-            "chunk_index": 1,
-        },
-        projects={default_project.id: default_project},
-    )
+        process_attachment_chunk(
+            {
+                "payload": b"World!",
+                "event_id": event_id,
+                "project_id": project_id,
+                "id": attachment_id,
+                "chunk_index": 1,
+            },
+            projects={default_project.id: default_project},
+        )
 
-    process_event(
-        {
-            "payload": json.dumps(payload),
-            "start_time": start_time,
-            "event_id": event_id,
-            "project_id": project_id,
-            "remote_addr": "127.0.0.1",
-            "attachments": [
-                {
-                    "id": attachment_id,
-                    "name": "lol.txt",
-                    "content_type": "text/plain",
-                    "attachment_type": "custom.attachment",
-                    "chunks": 2,
-                }
-            ],
-        },
-        projects={default_project.id: default_project},
-    )
+    with task_runner():
+        process_event(
+            {
+                "payload": json.dumps(payload),
+                "start_time": start_time,
+                "event_id": event_id,
+                "project_id": project_id,
+                "remote_addr": "127.0.0.1",
+                "attachments": [
+                    {
+                        "id": attachment_id,
+                        "name": "lol.txt",
+                        "content_type": "text/plain",
+                        "attachment_type": "custom.attachment",
+                        "chunks": 2,
+                    }
+                ],
+            },
+            projects={default_project.id: default_project},
+        )
 
-    kwargs, = preprocess_event
-    cache_key = u"e:{event_id}:{project_id}".format(event_id=event_id, project_id=project_id)
-    assert kwargs == {
-        "cache_key": cache_key,
-        "data": payload,
-        "event_id": event_id,
-        "project": default_project,
-        "start_time": start_time,
-    }
+    persisted_attachments = list(
+        EventAttachment.objects.filter(project_id=project_id, event_id=event_id).select_related(
+            "file"
+        )
+    )
 
-    att, = attachment_cache.get(cache_key)
-    assert att.data == b"Hello World!"
-    assert att.name == "lol.txt"
-    assert att.content_type == "text/plain"
-    assert att.type == "custom.attachment"
+    if not missing_chunks:
+        attachment, = persisted_attachments
+        assert attachment.file.type == "custom.attachment"
+        assert attachment.file.headers == {"Content-Type": "text/plain"}
+        file = attachment.file.getfile()
+        assert file.read() == b"Hello World!"
+        assert file.name == "lol.txt"
+    else:
+        assert not persisted_attachments
 
 
 @pytest.mark.django_db
@@ -284,3 +288,36 @@ def test_userreport_reverse_order(default_project, monkeypatch):
     # Event got saved after user report, and the sync only works in the
     # opposite direction. That's fine, we just accept it.
     assert evtuser.name is None
+
+
+@pytest.mark.django_db
+def test_individual_attachments_missing_chunks(default_project, factories, monkeypatch):
+    monkeypatch.setattr("sentry.features.has", lambda *a, **kw: True)
+
+    event_id = "515539018c9b4260a6f999572f1661ee"
+    attachment_id = "ca90fb45-6dd9-40a0-a18f-8693aa621abb"
+    project_id = default_project.id
+
+    process_individual_attachment(
+        {
+            "type": "attachment",
+            "attachment": {
+                "attachment_type": "event.attachment",
+                "chunks": 123,
+                "content_type": "application/octet-stream",
+                "id": attachment_id,
+                "name": "foo.txt",
+            },
+            "event_id": event_id,
+            "project_id": project_id,
+        },
+        projects={default_project.id: default_project},
+    )
+
+    attachments = list(
+        EventAttachment.objects.filter(project_id=project_id, event_id=event_id).select_related(
+            "file"
+        )
+    )
+
+    assert not attachments
