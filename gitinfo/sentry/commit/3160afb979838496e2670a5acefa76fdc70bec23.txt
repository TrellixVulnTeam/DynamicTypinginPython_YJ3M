commit 3160afb979838496e2670a5acefa76fdc70bec23
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri Nov 15 10:52:25 2019 -0800

    migrations(plugins): move Slack and PagerDuty plugins from test_only_plugins to new_plugins (#15582)

diff --git a/.travis.yml b/.travis.yml
index d95b294234..6d16e8432b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -245,7 +245,6 @@ matrix:
 
   allow_failures:
     - name: 'Storybook Deploy'
-    - name: 'Plugins'
 
 notifications:
   webhooks:
diff --git a/conftest.py b/conftest.py
index 696605e10f..a8c457e31c 100644
--- a/conftest.py
+++ b/conftest.py
@@ -36,7 +36,7 @@ def install_sentry_plugins():
 
     from sentry.runner.initializer import register_plugins
 
-    register_plugins(settings, test_plugins=True)
+    register_plugins(settings)
 
     settings.ASANA_CLIENT_ID = "abc"
     settings.ASANA_CLIENT_SECRET = "123"
diff --git a/setup.py b/setup.py
index 14ace6770c..5ed43eef9c 100755
--- a/setup.py
+++ b/setup.py
@@ -155,19 +155,17 @@ setup(
             "heroku = new_sentry_plugins.heroku.plugin:HerokuPlugin",
             "jira = new_sentry_plugins.jira.plugin:JiraPlugin",
             "jira_ac = new_sentry_plugins.jira_ac.plugin:JiraACPlugin",
+            "pagerduty = new_sentry_plugins.pagerduty.plugin:PagerDutyPlugin",
             "phabricator = new_sentry_plugins.phabricator.plugin:PhabricatorPlugin",
             "pivotal = new_sentry_plugins.pivotal.plugin:PivotalPlugin",
             "pushover = new_sentry_plugins.pushover.plugin:PushoverPlugin",
             "segment = new_sentry_plugins.segment.plugin:SegmentPlugin",
             "sessionstack = new_sentry_plugins.sessionstack.plugin:SessionStackPlugin",
+            "slack = new_sentry_plugins.slack.plugin:SlackPlugin",
             "splunk = new_sentry_plugins.splunk.plugin:SplunkPlugin",
             "victorops = new_sentry_plugins.victorops.plugin:VictorOpsPlugin",
             "vsts = new_sentry_plugins.vsts.plugin:VstsPlugin",
         ],
-        "sentry.test_only_plugins": [
-            "pagerduty = test_only_plugins.pagerduty.plugin:PagerDutyPlugin",
-            "slack = test_only_plugins.slack.plugin:SlackPlugin",
-        ],
     },
     classifiers=[
         "Framework :: Django",
diff --git a/src/test_only_plugins/pagerduty/__init__.py b/src/new_sentry_plugins/pagerduty/__init__.py
similarity index 58%
rename from src/test_only_plugins/pagerduty/__init__.py
rename to src/new_sentry_plugins/pagerduty/__init__.py
index 1e7c7f86c3..97157bb135 100644
--- a/src/test_only_plugins/pagerduty/__init__.py
+++ b/src/new_sentry_plugins/pagerduty/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from test_only_plugins.base import assert_package_not_installed
+from new_sentry_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-pagerduty")
diff --git a/src/test_only_plugins/pagerduty/client.py b/src/new_sentry_plugins/pagerduty/client.py
similarity index 96%
rename from src/test_only_plugins/pagerduty/client.py
rename to src/new_sentry_plugins/pagerduty/client.py
index 15652d8218..6f0fbf31e2 100644
--- a/src/test_only_plugins/pagerduty/client.py
+++ b/src/new_sentry_plugins/pagerduty/client.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.utils.http import absolute_uri
-from test_only_plugins.client import ApiClient
+from new_sentry_plugins.client import ApiClient
 
 # https://v2.developer.pagerduty.com/docs/events-api
 INTEGRATION_API_URL = "https://events.pagerduty.com/generic/2010-04-15/create_event.json"
diff --git a/src/test_only_plugins/pagerduty/plugin.py b/src/new_sentry_plugins/pagerduty/plugin.py
similarity index 96%
rename from src/test_only_plugins/pagerduty/plugin.py
rename to src/new_sentry_plugins/pagerduty/plugin.py
index 2da1c7c967..d8ad220e3c 100644
--- a/src/test_only_plugins/pagerduty/plugin.py
+++ b/src/new_sentry_plugins/pagerduty/plugin.py
@@ -5,8 +5,8 @@ import six
 from sentry.plugins.bases.notify import NotifyPlugin
 from sentry.utils.http import absolute_uri
 
-from test_only_plugins.base import CorePluginMixin
-from test_only_plugins.utils import get_secret_field_config
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.utils import get_secret_field_config
 
 from .client import PagerDutyClient
 
diff --git a/src/test_only_plugins/slack/README.rst b/src/new_sentry_plugins/slack/README.rst
similarity index 100%
rename from src/test_only_plugins/slack/README.rst
rename to src/new_sentry_plugins/slack/README.rst
diff --git a/src/test_only_plugins/slack/__init__.py b/src/new_sentry_plugins/slack/__init__.py
similarity index 56%
rename from src/test_only_plugins/slack/__init__.py
rename to src/new_sentry_plugins/slack/__init__.py
index 329b8e23fa..a37e36c003 100644
--- a/src/test_only_plugins/slack/__init__.py
+++ b/src/new_sentry_plugins/slack/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from test_only_plugins.base import assert_package_not_installed
+from new_sentry_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-slack")
diff --git a/src/test_only_plugins/slack/plugin.py b/src/new_sentry_plugins/slack/plugin.py
similarity index 99%
rename from src/test_only_plugins/slack/plugin.py
rename to src/new_sentry_plugins/slack/plugin.py
index 479e2c1b1b..02b667345c 100644
--- a/src/test_only_plugins/slack/plugin.py
+++ b/src/new_sentry_plugins/slack/plugin.py
@@ -5,7 +5,7 @@ from sentry.plugins.bases import notify
 from sentry.utils import json
 from sentry.utils.http import absolute_uri
 
-from test_only_plugins.base import CorePluginMixin
+from new_sentry_plugins.base import CorePluginMixin
 
 LEVEL_TO_COLOR = {
     "debug": "cfd3da",
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index ef9131fb72..173fe88be7 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -11,7 +11,7 @@ from sentry.utils.sdk import configure_sdk
 from sentry.utils.warnings import DeprecatedSettingWarning
 
 
-def register_plugins(settings, test_plugins=False):
+def register_plugins(settings):
     from pkg_resources import iter_entry_points
     from sentry.plugins.base import plugins
 
@@ -20,23 +20,17 @@ def register_plugins(settings, test_plugins=False):
     #         'phabricator = sentry_phabricator.plugins:PhabricatorPlugin'
     #     ],
     # },
-    entry_points = [
-        "sentry.new_plugins",
-        "sentry.test_only_plugins" if test_plugins else "sentry.plugins",
-    ]
-
-    for entry_point in entry_points:
-        for ep in iter_entry_points(entry_point):
-            try:
-                plugin = ep.load()
-            except Exception:
-                import traceback
+    for ep in iter_entry_points("sentry.new_plugins"):
+        try:
+            plugin = ep.load()
+        except Exception:
+            import traceback
 
-                click.echo(
-                    "Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()), err=True
-                )
-            else:
-                plugins.register(plugin)
+            click.echo(
+                "Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()), err=True
+            )
+        else:
+            plugins.register(plugin)
 
     for plugin in plugins.all(version=None):
         init_plugin(plugin)
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 5ec4472487..641c7f0ea8 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -699,20 +699,6 @@ class PluginTestCase(TestCase):
                 )
         self.fail("Missing plugin from entry_points: %r" % (name,))
 
-    # TODO (Steve): remove function
-    def assertTestOnlyPluginInstalled(self, name, plugin):
-        path = type(plugin).__module__ + ":" + type(plugin).__name__
-        for ep in iter_entry_points("sentry.test_only_plugins"):
-            if ep.name == name:
-                ep_path = ep.module_name + ":" + ".".join(ep.attrs)
-                if ep_path == path:
-                    return
-                self.fail(
-                    "Found plugin in entry_points, but wrong class. Got %r, expected %r"
-                    % (ep_path, path)
-                )
-        self.fail("Missing plugin from entry_points: %r" % (name,))
-
     # TODO (Steve): remove function
     def assertNewPluginInstalled(self, name, plugin):
         path = type(plugin).__module__ + ":" + type(plugin).__name__
diff --git a/src/test_only_plugins/__init__.py b/src/test_only_plugins/__init__.py
deleted file mode 100644
index 662f0d20f1..0000000000
--- a/src/test_only_plugins/__init__.py
+++ /dev/null
@@ -1,6 +0,0 @@
-from __future__ import absolute_import
-
-try:
-    VERSION = __import__("pkg_resources").get_distribution("sentry-plugins").version
-except Exception:
-    VERSION = "unknown"
diff --git a/src/test_only_plugins/anonymizeip.py b/src/test_only_plugins/anonymizeip.py
deleted file mode 100644
index 77b3a79e3a..0000000000
--- a/src/test_only_plugins/anonymizeip.py
+++ /dev/null
@@ -1,126 +0,0 @@
-# Port of https://github.com/samuelmeuli/anonymize-ip to Python 2
-"""
-MIT License
-
-Copyright (c) 2018 Samuel Meuli
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
-"""
-from __future__ import absolute_import, unicode_literals
-
-import six
-
-from ipaddress import ip_address
-
-
-def anonymize_ip(
-    address, ipv4_mask="255.255.255.0", ipv6_mask="ffff:ffff:ffff:0000:0000:0000:0000:0000"
-):
-    """
-    Anonymize the provided IPv4 or IPv6 address by setting parts of the
-    address to 0
-    :param str|int address: IP address to be anonymized
-    :param str ipv4_mask: Mask that defines which parts of an IPv4 address are
-    set to 0 (default: "255.255.255.0")
-    :param str ipv6_mask: Mask that defines which parts of an IPv6 address are
-    set to 0 (default: "ffff:ffff:ffff:0000:0000:0000:0000:0000")
-    :return: Anonymized IP address
-    :rtype: str
-    """
-
-    # IP address to be anonymized
-    address_packed = ip_address(six.text_type(address)).packed
-    address_len = len(address_packed)
-
-    if address_len == 4:
-        # IPv4
-        ipv4_mask_packed = ip_address(ipv4_mask).packed
-        __validate_ipv4_mask(ipv4_mask_packed)
-        return __apply_mask(address_packed, ipv4_mask_packed, 4)
-    elif address_len == 16:
-        # IPv6
-        ipv6_mask_packed = ip_address(ipv6_mask).packed
-        __validate_ipv6_mask(ipv6_mask_packed)
-        return __apply_mask(address_packed, ipv6_mask_packed, 16)
-    else:
-        # Invalid address
-        raise ValueError("Address does not consist of 4 (IPv4) or 16 (IPv6) " "octets")
-
-
-def __apply_mask(address_packed, mask_packed, nr_bytes):
-    """
-    Perform a bitwise AND operation on all corresponding bytes between the
-    mask and the provided address. Mask parts set to 0 will become 0 in the
-    anonymized IP address as well
-    :param bytes address_packed: Binary representation of the IP address to
-    be anonymized
-    :param bytes mask_packed: Binary representation of the corresponding IP
-    address mask
-    :param int nr_bytes: Number of bytes in the address (4 for IPv4, 16 for
-    IPv6)
-    :return: Anonymized IP address
-    :rtype: str
-    """
-
-    anon_packed = bytearray()
-    for i in range(0, nr_bytes):
-        anon_packed.append(ord(mask_packed[i]) & ord(address_packed[i]))
-    return six.text_type(ip_address(six.binary_type(anon_packed)))
-
-
-def __validate_ipv4_mask(mask_packed):
-    # Test that mask only contains valid numbers
-    for byte in mask_packed:
-        if byte != b"\x00" and byte != b"\xff":
-            raise ValueError("ipv4_mask must only contain numbers 0 or 255")
-
-    # Test that IP address does not get anonymized completely
-    if mask_packed == b"\x00\x00\x00\x00":
-        raise ValueError(
-            'ipv4_mask cannot be set to "0.0.0.0" (all ' "anonymized addresses will be 0.0.0.0)"
-        )
-
-    # Test that IP address is changed by anonymization
-    if mask_packed == b"\xff\xff\xff\xff":
-        raise ValueError(
-            'ipv4_mask cannot be set to "255.255.255.255" ' "(addresses will not be anonymized)"
-        )
-
-
-def __validate_ipv6_mask(mask_packed):
-    # Test that mask only contains valid numbers
-    for byte in mask_packed:
-        if byte != b"\x00" and byte != b"\xff":
-            raise ValueError("ipv6_mask must only contain numbers 0 or ffff")
-
-    # Test that IP address does not get anonymized completely
-    if mask_packed == b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00":
-        raise ValueError(
-            "ipv6_mask cannot be set to "
-            '"0000:0000:0000:0000:0000:0000:0000:0000" (all '
-            "anonymized addresses will be 0.0.0.0)"
-        )
-
-    # Test that IP address is changed by anonymization
-    if mask_packed == b"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff":
-        raise ValueError(
-            "ipv6_mask cannot be set to "
-            '"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" '
-            "(addresses will not be anonymized)"
-        )
diff --git a/src/test_only_plugins/assets.json b/src/test_only_plugins/assets.json
deleted file mode 100644
index c837fa1cff..0000000000
--- a/src/test_only_plugins/assets.json
+++ /dev/null
@@ -1 +0,0 @@
-{"version": "10.0.0.dev0", "build": "f9267a11769be041ba5464548e1a8c16fc4f584f", "createdAt": "2019-10-25T00:08:56.751575Z"}
\ No newline at end of file
diff --git a/src/test_only_plugins/base.py b/src/test_only_plugins/base.py
deleted file mode 100644
index 2ce4f248e4..0000000000
--- a/src/test_only_plugins/base.py
+++ /dev/null
@@ -1,81 +0,0 @@
-from __future__ import absolute_import
-
-import pkg_resources
-import test_only_plugins
-import six
-import sys
-
-from sentry.exceptions import InvalidIdentity, PluginError
-
-from test_only_plugins.constants import (
-    ERR_INTERNAL,
-    ERR_UNAUTHORIZED,
-    ERR_UNSUPPORTED_RESPONSE_TYPE,
-)
-from test_only_plugins.exceptions import (
-    ApiError,
-    ApiHostError,
-    ApiUnauthorized,
-    UnsupportedResponseType,
-)
-
-
-class CorePluginMixin(object):
-    author = "Sentry Team"
-    author_url = "https://github.com/getsentry/sentry-plugins"
-    version = test_only_plugins.VERSION
-    resource_links = [
-        ("Bug Tracker", "https://github.com/getsentry/sentry-plugins/issues"),
-        ("Source", "https://github.com/getsentry/sentry-plugins"),
-    ]
-
-    # HACK(dcramer): work around MRO issue with plugin metaclass
-    logger = None
-
-    # TODO(dcramer): The following is a possible "better implementation" of the
-    # core issue implementation, though it would need a compat layer to push
-    # it upstream
-    def error_message_from_json(self, data):
-        return data.get("message", "unknown error")
-
-    def message_from_error(self, exc):
-        if isinstance(exc, ApiUnauthorized):
-            return ERR_UNAUTHORIZED
-        elif isinstance(exc, ApiHostError):
-            return exc.text
-        elif isinstance(exc, UnsupportedResponseType):
-            return ERR_UNSUPPORTED_RESPONSE_TYPE.format(content_type=exc.content_type)
-        elif isinstance(exc, ApiError):
-            if exc.json:
-                msg = self.error_message_from_json(exc.json) or "unknown error"
-            else:
-                msg = "unknown error"
-            return "Error Communicating with %s (HTTP %s): %s" % (self.title, exc.code, msg)
-        else:
-            return ERR_INTERNAL
-
-    def raise_error(self, exc, identity=None):
-        if isinstance(exc, ApiUnauthorized):
-            six.reraise(
-                InvalidIdentity,
-                InvalidIdentity(self.message_from_error(exc), identity=identity),
-                sys.exc_info()[2],
-            )
-        elif isinstance(exc, ApiError):
-            six.reraise(PluginError, PluginError(self.message_from_error(exc)), sys.exc_info()[2])
-        elif isinstance(exc, PluginError):
-            raise
-        else:
-            self.logger.exception(six.text_type(exc))
-            six.reraise(PluginError, PluginError(self.message_from_error(exc)), sys.exc_info()[2])
-
-
-def assert_package_not_installed(name):
-    try:
-        pkg_resources.get_distribution(name)
-    except pkg_resources.DistributionNotFound:
-        return
-    else:
-        raise RuntimeError(
-            "Found %r. This has been superseded by 'sentry-plugins', so please uninstall." % name
-        )
diff --git a/src/test_only_plugins/client.py b/src/test_only_plugins/client.py
deleted file mode 100644
index d276263134..0000000000
--- a/src/test_only_plugins/client.py
+++ /dev/null
@@ -1,260 +0,0 @@
-from __future__ import absolute_import
-
-from collections import OrderedDict
-import logging
-import json
-import requests
-
-from BeautifulSoup import BeautifulStoneSoup
-from cached_property import cached_property
-from requests.exceptions import ConnectionError, HTTPError
-
-from sentry.http import build_session
-from sentry.utils import metrics
-
-from .exceptions import ApiHostError, ApiError, ApiUnauthorized, UnsupportedResponseType
-
-
-class BaseApiResponse(object):
-    text = ""
-
-    def __init__(self, headers=None, status_code=None):
-        self.headers = headers
-        self.status_code = status_code
-
-    def __repr__(self):
-        return u"<%s: code=%s, content_type=%s>" % (
-            type(self).__name__,
-            self.status_code,
-            self.headers.get("Content-Type", "") if self.headers else "",
-        )
-
-    @cached_property
-    def rel(self):
-        if not self.headers:
-            return {}
-        link_header = self.headers.get("Link")
-        if not link_header:
-            return {}
-        return {item["rel"]: item["url"] for item in requests.utils.parse_header_links(link_header)}
-
-    @classmethod
-    def from_response(self, response, allow_text=False):
-        # XXX(dcramer): this doesnt handle leading spaces, but they're not common
-        # paths so its ok
-        if response.text.startswith(u"<?xml"):
-            return XmlApiResponse(response.text, response.headers, response.status_code)
-        elif response.text.startswith("<"):
-            if not allow_text:
-                raise ValueError("Not a valid response type: {}".format(response.text[:128]))
-            elif response.status_code < 200 or response.status_code >= 300:
-                raise ValueError(
-                    "Received unexpected plaintext response for code {}".format(
-                        response.status_code
-                    )
-                )
-            return TextApiResponse(response.text, response.headers, response.status_code)
-
-        # Some APIs will return JSON with an invalid content-type, so we try
-        # to decode it anyways
-        if "application/json" not in response.headers["Content-Type"]:
-            try:
-                data = json.loads(response.text, object_pairs_hook=OrderedDict)
-            except (TypeError, ValueError):
-                if allow_text:
-                    return TextApiResponse(response.text, response.headers, response.status_code)
-                raise UnsupportedResponseType(
-                    response.headers["Content-Type"], response.status_code
-                )
-        else:
-            data = json.loads(response.text, object_pairs_hook=OrderedDict)
-
-        if isinstance(data, dict):
-            return MappingApiResponse(data, response.headers, response.status_code)
-        elif isinstance(data, (list, tuple)):
-            return SequenceApiResponse(data, response.headers, response.status_code)
-        else:
-            raise NotImplementedError
-
-
-class TextApiResponse(BaseApiResponse):
-    def __init__(self, text, *args, **kwargs):
-        self.text = text
-        super(TextApiResponse, self).__init__(*args, **kwargs)
-
-
-class XmlApiResponse(BaseApiResponse):
-    def __init__(self, text, *args, **kwargs):
-        self.xml = BeautifulStoneSoup(text)
-        super(XmlApiResponse, self).__init__(*args, **kwargs)
-
-
-class MappingApiResponse(dict, BaseApiResponse):
-    def __init__(self, data, *args, **kwargs):
-        dict.__init__(self, data)
-        BaseApiResponse.__init__(self, *args, **kwargs)
-
-    @property
-    def json(self):
-        return self
-
-
-class SequenceApiResponse(list, BaseApiResponse):
-    def __init__(self, data, *args, **kwargs):
-        list.__init__(self, data)
-        BaseApiResponse.__init__(self, *args, **kwargs)
-
-    @property
-    def json(self):
-        return self
-
-
-def track_response_metric(plugin, code):
-    metrics.incr("sentry-plugins.http_response", tags={"status": code, "plugin": plugin})
-
-
-class ApiClient(object):
-    base_url = None
-
-    allow_text = False
-
-    allow_redirects = None
-
-    logger = logging.getLogger("sentry.plugins")
-
-    plugin_name = "undefined"
-
-    def __init__(self, verify_ssl=True):
-        self.verify_ssl = verify_ssl
-
-    def build_url(self, path):
-        if path.startswith("/"):
-            if not self.base_url:
-                raise ValueError("Invalid URL: {}".format(path))
-            return "{}{}".format(self.base_url, path)
-        return path
-
-    def _request(
-        self,
-        method,
-        path,
-        headers=None,
-        data=None,
-        params=None,
-        auth=None,
-        json=True,
-        allow_text=None,
-        allow_redirects=None,
-    ):
-
-        if allow_text is None:
-            allow_text = self.allow_text
-
-        if allow_redirects is None:
-            allow_redirects = self.allow_redirects
-
-        if allow_redirects is None:  # is still None
-            allow_redirects = method.upper() == "GET"
-
-        full_url = self.build_url(path)
-        metrics.incr("sentry-plugins.http_request", tags={"plugin": self.plugin_name})
-
-        session = build_session()
-        try:
-            resp = getattr(session, method.lower())(
-                url=full_url,
-                headers=headers,
-                json=data if json else None,
-                data=data if not json else None,
-                params=params,
-                auth=auth,
-                verify=self.verify_ssl,
-                allow_redirects=allow_redirects,
-            )
-            resp.raise_for_status()
-        except ConnectionError as e:
-            raise ApiHostError.from_exception(e)
-        except HTTPError as e:
-            resp = e.response
-            if resp is None:
-                track_response_metric(self.plugin_name, "unknown")
-                self.logger.exception(
-                    "request.error", extra={"plugin": self.plugin_name, "url": full_url}
-                )
-                raise ApiError("Internal Error")
-            track_response_metric(self.plugin_name, resp.status_code)
-            raise ApiError.from_response(resp)
-
-        track_response_metric(self.plugin_name, resp.status_code)
-        if resp.status_code == 204:
-            return {}
-
-        return BaseApiResponse.from_response(resp, allow_text=allow_text)
-
-    # subclasses should override ``request``
-    def request(self, *args, **kwargs):
-        return self._request(*args, **kwargs)
-
-    def delete(self, *args, **kwargs):
-        return self.request("DELETE", *args, **kwargs)
-
-    def get(self, *args, **kwargs):
-        return self.request("GET", *args, **kwargs)
-
-    def patch(self, *args, **kwargs):
-        return self.request("PATCH", *args, **kwargs)
-
-    def post(self, *args, **kwargs):
-        return self.request("POST", *args, **kwargs)
-
-    def put(self, *args, **kwargs):
-        return self.request("PUT", *args, **kwargs)
-
-
-class AuthApiClient(ApiClient):
-    auth = None
-
-    def __init__(self, auth=None, *args, **kwargs):
-        self.auth = auth
-        super(AuthApiClient, self).__init__(*args, **kwargs)
-
-    def has_auth(self):
-        return self.auth and "access_token" in self.auth.tokens
-
-    def exception_means_unauthorized(self, exc):
-        return isinstance(exc, ApiUnauthorized)
-
-    def ensure_auth(self, **kwargs):
-        headers = kwargs["headers"]
-        if "Authorization" not in headers and self.has_auth() and "auth" not in kwargs:
-            kwargs = self.bind_auth(**kwargs)
-        return kwargs
-
-    def bind_auth(self, **kwargs):
-        token = self.auth.tokens["access_token"]
-        kwargs["headers"]["Authorization"] = "Bearer {}".format(token)
-        return kwargs
-
-    def _request(self, method, path, **kwargs):
-        headers = kwargs.setdefault("headers", {})
-        headers.setdefault("Accept", "application/json, application/xml")
-
-        # TODO(dcramer): we could proactively refresh the token if we knew
-        # about expires
-        kwargs = self.ensure_auth(**kwargs)
-
-        try:
-            return ApiClient._request(self, method, path, **kwargs)
-        except Exception as exc:
-            if not self.exception_means_unauthorized(exc):
-                raise
-            if not self.auth:
-                raise
-
-        # refresh token
-        self.logger.info(
-            "token.refresh", extra={"auth_id": self.auth.id, "provider": self.auth.provider}
-        )
-        self.auth.refresh_token()
-        kwargs = self.bind_auth(**kwargs)
-        return ApiClient._request(self, method, path, **kwargs)
diff --git a/src/test_only_plugins/constants.py b/src/test_only_plugins/constants.py
deleted file mode 100644
index 70f837ed28..0000000000
--- a/src/test_only_plugins/constants.py
+++ /dev/null
@@ -1,10 +0,0 @@
-from __future__ import absolute_import
-
-
-ERR_INTERNAL = (
-    "An internal error occurred with the integration and the Sentry team has" " been notified"
-)
-
-ERR_UNAUTHORIZED = "Unauthorized: either your access token was invalid or you do not have" " access"
-
-ERR_UNSUPPORTED_RESPONSE_TYPE = "An unsupported response type was returned: {content_type}"
diff --git a/src/test_only_plugins/exceptions.py b/src/test_only_plugins/exceptions.py
deleted file mode 100644
index c5066dfed2..0000000000
--- a/src/test_only_plugins/exceptions.py
+++ /dev/null
@@ -1,63 +0,0 @@
-from __future__ import absolute_import
-
-from BeautifulSoup import BeautifulStoneSoup
-from collections import OrderedDict
-from simplejson.decoder import JSONDecodeError
-from six.moves.urllib.parse import urlparse
-from sentry.utils import json
-
-
-class ApiError(Exception):
-    code = None
-    json = None
-    xml = None
-
-    def __init__(self, text, code=None):
-        if code is not None:
-            self.code = code
-        self.text = text
-        self.xml = None
-        # TODO(dcramer): pull in XML support from Jira
-        if text:
-            try:
-                self.json = json.loads(text, object_pairs_hook=OrderedDict)
-            except (JSONDecodeError, ValueError):
-                if self.text[:5] == "<?xml":
-                    # perhaps it's XML?
-                    self.xml = BeautifulStoneSoup(self.text)
-                # must be an awful code.
-                self.json = None
-        else:
-            self.json = None
-        super(ApiError, self).__init__(text[:128])
-
-    @classmethod
-    def from_response(cls, response):
-        if response.status_code == 401:
-            return ApiUnauthorized(response.text)
-        return cls(response.text, response.status_code)
-
-
-class ApiHostError(ApiError):
-    code = 503
-
-    @classmethod
-    def from_exception(cls, exception):
-        if hasattr(exception, "request"):
-            return cls.from_request(exception.request)
-        return cls("Unable to reach host")
-
-    @classmethod
-    def from_request(cls, request):
-        host = urlparse(request.url).netloc
-        return cls("Unable to reach host: {}".format(host))
-
-
-class ApiUnauthorized(ApiError):
-    code = 401
-
-
-class UnsupportedResponseType(ApiError):
-    @property
-    def content_type(self):
-        return self.text
diff --git a/src/test_only_plugins/utils.py b/src/test_only_plugins/utils.py
deleted file mode 100644
index 89ddf1e08d..0000000000
--- a/src/test_only_plugins/utils.py
+++ /dev/null
@@ -1,16 +0,0 @@
-from __future__ import absolute_import
-
-
-def get_secret_field_config(secret, help_text=None, include_prefix=False, **kwargs):
-    has_saved_value = bool(secret)
-    saved_text = "Only enter a new value if you wish to update the existing one. "
-    context = {
-        "type": "secret",
-        "has_saved_value": has_saved_value,
-        "prefix": (secret or "")[:4] if include_prefix else "",
-        "required": not has_saved_value,
-    }
-    if help_text:
-        context["help"] = "%s%s" % ((saved_text if has_saved_value else ""), help_text)
-    context.update(kwargs)
-    return context
diff --git a/tests/sentry_plugins/pagerduty/test_plugin.py b/tests/sentry_plugins/pagerduty/test_plugin.py
index 1e8c38e261..9a7e816e9d 100644
--- a/tests/sentry_plugins/pagerduty/test_plugin.py
+++ b/tests/sentry_plugins/pagerduty/test_plugin.py
@@ -10,7 +10,7 @@ from sentry.plugins.base import Notification
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from test_only_plugins.pagerduty.plugin import PagerDutyPlugin
+from new_sentry_plugins.pagerduty.plugin import PagerDutyPlugin
 
 INVALID_METHOD = (
     '{"status":"invalid method","message":"You must use HTTP POST to submit your event"}'
@@ -32,7 +32,7 @@ class PagerDutyPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "pagerduty"
 
     def test_entry_point(self):
-        self.assertTestOnlyPluginInstalled("pagerduty", self.plugin)
+        self.assertNewPluginInstalled("pagerduty", self.plugin)
 
     def test_is_configured(self):
         assert self.plugin.is_configured(self.project) is False
diff --git a/tests/sentry_plugins/slack/test_plugin.py b/tests/sentry_plugins/slack/test_plugin.py
index 32b8221fc0..5d37820134 100644
--- a/tests/sentry_plugins/slack/test_plugin.py
+++ b/tests/sentry_plugins/slack/test_plugin.py
@@ -9,7 +9,7 @@ from sentry.testutils import PluginTestCase
 from sentry.utils import json
 from six.moves.urllib.parse import parse_qs
 
-from test_only_plugins.slack.plugin import SlackPlugin
+from new_sentry_plugins.slack.plugin import SlackPlugin
 
 
 class SlackPluginTest(PluginTestCase):
@@ -21,7 +21,7 @@ class SlackPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "slack"
 
     def test_entry_point(self):
-        self.assertTestOnlyPluginInstalled("slack", self.plugin)
+        self.assertNewPluginInstalled("slack", self.plugin)
 
     @responses.activate
     def test_simple_notification(self):
