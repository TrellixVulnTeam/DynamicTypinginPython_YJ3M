commit 23ebaa5d9d92ae2ceb47b3c6e2640bcff3578876
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Jul 24 13:05:17 2018 -0700

    feat(integrations): Bitbucket Repository Setup Flow (#9032)
    
    * Added repo mixin
    
    * added the repos more explicitly to that call.
    
    * Added changes to bitbucket
    
    * Got repos running.
    
    * Removed get_config
    
    * first draft on test. Storing redundant information though.
    
    * Added repo id back.

diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index 061a070ee0..378dc176a1 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
+from sentry.integrations.repositories import RepositoryMixin
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from django.utils.translation import ugettext_lazy as _
@@ -31,7 +32,7 @@ scopes = (
 )
 
 
-class BitbucketIntegration(Integration, BitbucketIssueBasicMixin):
+class BitbucketIntegration(Integration, BitbucketIssueBasicMixin, RepositoryMixin):
     def get_client(self):
         return BitbucketApiClient(
             self.model.metadata['base_url'],
@@ -43,6 +44,21 @@ class BitbucketIntegration(Integration, BitbucketIssueBasicMixin):
     def username(self):
         return self.model.name
 
+    def get_repositories(self):
+        repos = self.get_client().get_repos(self.username)['values']
+        data = []
+        for repo in repos:
+            data.append(
+                {
+                    'identifier': repo['full_name'],
+                    'name': repo['full_name'],
+                }
+            )
+        return data
+
+    def reinstall(self):
+        self.reinstall_repositories()
+
 
 class BitbucketIntegrationProvider(IntegrationProvider):
     key = 'bitbucket'
@@ -50,7 +66,7 @@ class BitbucketIntegrationProvider(IntegrationProvider):
     metadata = metadata
     scopes = scopes
     integration_cls = BitbucketIntegration
-    features = frozenset([IntegrationFeatures.ISSUE_BASIC])
+    features = frozenset([IntegrationFeatures.ISSUE_BASIC, IntegrationFeatures.COMMITS])
 
     def get_pipeline_views(self):
         identity_pipeline_config = {
diff --git a/src/sentry/integrations/bitbucket/repository.py b/src/sentry/integrations/bitbucket/repository.py
index c0c152ed6a..c4a35fa895 100644
--- a/src/sentry/integrations/bitbucket/repository.py
+++ b/src/sentry/integrations/bitbucket/repository.py
@@ -1,9 +1,7 @@
 from __future__ import absolute_import
 
-import six
-
 from uuid import uuid4
-
+import six
 from sentry.app import locks
 from sentry.models import OrganizationOption
 from sentry.plugins import providers
@@ -29,50 +27,16 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
 
         return integration_model.get_installation(organization_id)
 
-    def get_config(self, organization):
-        choices = []
-        for i in Integration.objects.filter(organizations=organization, provider='bitbucket'):
-            choices.append((i.id, i.name))
-
-        if not choices:
-            choices = [('', '')]
-        return [
-            {
-                'name': 'integration_id',
-                'label': 'Bitbucket Integration',
-                'type': 'choice',
-                'choices': choices,
-                'initial': choices[0][0],
-                'help': 'Select which Bitbucket integration to authenticate with.',
-                'required': True,
-            },
-            {
-                'name': 'name',
-                'label': 'Repository Name',
-                'type': 'text',
-                'placeholder': 'e.g. getsentry/sentry',
-                'help': 'Enter your repository name, including the owner.',
-                'required': True,
-            },
-        ]
-
     def validate_config(self, organization, config):
-        """
-        ```
-        if config['foo'] and not config['bar']:
-            raise PluginError('You cannot configure foo with bar')
-        return config
-        ```
-        """
-        if config.get('name'):
-            installation = self.get_installation(config['integration_id'], organization.id)
-            client = installation.get_client()
-            try:
-                repo = client.get_repo(config['name'])
-            except Exception as e:
-                installation.raise_error(e)
-            else:
-                config['external_id'] = six.text_type(repo['uuid'])
+        installation = self.get_installation(config['installation'], organization.id)
+        client = installation.get_client()
+        try:
+            repo = client.get_repo(config['identifier'])
+        except Exception as e:
+            installation.raise_error(e)
+        else:
+            config['external_id'] = six.text_type(repo['uuid'])
+            config['name'] = repo['full_name']
         return config
 
     def get_webhook_secret(self, organization):
@@ -93,11 +57,11 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
         return secret
 
     def create_repository(self, organization, data):
-        installation = self.get_installation(data['integration_id'], organization.id)
+        installation = self.get_installation(data['installation'], organization.id)
         client = installation.get_client()
         try:
             resp = client.create_hook(
-                data['name'], {
+                data['identifier'], {
                     'description': 'sentry-bitbucket-repo-hook',
                     'url': absolute_uri(
                         '/extensions/bitbucket/organizations/{}/webhook/'.format(organization.id)
@@ -107,17 +71,17 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
                 }
             )
         except Exception as e:
-            installation.raise_error(e, identity=client.auth)
+            installation.raise_error(e)
         else:
             return {
-                'name': data['name'],
+                'name': data['identifier'],
                 'external_id': data['external_id'],
                 'url': 'https://bitbucket.org/{}'.format(data['name']),
                 'config': {
                     'name': data['name'],
                     'webhook_id': resp['uuid'],
                 },
-                'integration_id': data['integration_id'],
+                'integration_id': data['installation'],
             }
 
     def delete_repository(self, repo):
@@ -152,13 +116,13 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
             try:
                 res = client.get_last_commits(name, end_sha)
             except Exception as e:
-                installation.raise_error(e, identity=client.auth)
+                installation.raise_error(e)
             else:
                 return self._format_commits(repo, res[:10])
         else:
             try:
                 res = client.compare_commits(name, start_sha, end_sha)
             except Exception as e:
-                installation.raise_error(e, identity=client.auth)
+                installation.raise_error(e)
             else:
                 return self._format_commits(repo, res)
diff --git a/tests/sentry/integrations/bitbucket/test_repository.py b/tests/sentry/integrations/bitbucket/test_repository.py
index e3af7d3db1..0466fa1251 100644
--- a/tests/sentry/integrations/bitbucket/test_repository.py
+++ b/tests/sentry/integrations/bitbucket/test_repository.py
@@ -6,7 +6,7 @@ from exam import fixture
 from sentry.models import Integration, Repository
 from sentry.testutils import TestCase
 from sentry.integrations.bitbucket.repository import BitbucketRepositoryProvider
-from .testutils import COMPARE_COMMITS_EXAMPLE, COMMIT_DIFF_PATCH
+from .testutils import COMPARE_COMMITS_EXAMPLE, COMMIT_DIFF_PATCH, REPO
 
 
 class BitbucketRepositoryProviderTest(TestCase):
@@ -72,3 +72,55 @@ class BitbucketRepositoryProviderTest(TestCase):
                 'patch_set': [{'path': u'README.md', 'type': 'M'}]
             }
         ]
+
+    @responses.activate
+    def test_create_repository(self):
+        full_repo_name = 'laurynsentry/helloworld'
+        webhook_id = 'web-hook-id'
+        responses.add(
+            responses.GET,
+            'https://api.bitbucket.org/2.0/repositories/%s' % full_repo_name,
+            json=REPO,
+        )
+        responses.add(
+            responses.POST,
+            'https://api.bitbucket.org/2.0/repositories/%s/hooks' % full_repo_name,
+            json={'uuid': webhook_id},
+            status=201,
+        )
+
+        organization = self.create_organization()
+        integration = Integration.objects.create(
+            provider='bitbucket',
+            external_id='bitbucket_external_id',
+            name='Hello world',
+            metadata={
+                'base_url': 'https://api.bitbucket.org',
+                'shared_secret': '23456789',
+            }
+        )
+        data = {
+            'provider': 'integrations:bitbucket',
+            'identifier': full_repo_name,
+            'installation': integration.id,
+        }
+        data = self.provider.validate_config(organization, data)
+        assert data == {
+            'provider': 'integrations:bitbucket',
+            'identifier': full_repo_name,
+            'installation': integration.id,
+            'external_id': REPO['uuid'],
+            'name': full_repo_name,
+        }
+        data = self.provider.create_repository(organization, data)
+
+        assert data == {
+            'name': full_repo_name,
+            'external_id': REPO['uuid'],
+            'url': 'https://bitbucket.org/laurynsentry/helloworld',
+            'integration_id': integration.id,
+            'config': {
+                'name': full_repo_name,
+                'webhook_id': webhook_id,
+            }
+        }
diff --git a/tests/sentry/integrations/bitbucket/testutils.py b/tests/sentry/integrations/bitbucket/testutils.py
index 8f1fc953a2..b80e8dfcc9 100644
--- a/tests/sentry/integrations/bitbucket/testutils.py
+++ b/tests/sentry/integrations/bitbucket/testutils.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
-
+from collections import OrderedDict
 
 COMPARE_COMMITS_EXAMPLE = b"""{
 "pagelen": 30,
@@ -271,3 +271,81 @@ PUSH_EVENT_EXAMPLE = b"""{
     }
 }
 """
+REPO = {
+    u'scm': u'git',
+    u'website': u'',
+    u'has_wiki': True,
+    u'description': u'',
+    u'links': OrderedDict([
+        (u'watchers', OrderedDict([(u'href',
+                                    u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/watchers'
+                                    )])),
+        (u'branches', OrderedDict([(u'href',
+                                    u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/refs/branches'
+                                    )])),
+        (u'tags', OrderedDict([(u'href',
+                                u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/refs/tags'
+                                )])),
+        (u'commits', OrderedDict([(u'href',
+                                   u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/commits'
+                                   )])),
+        (u'clone', [OrderedDict([(u'href',
+                                  u'https://laurynsentry@bitbucket.org/laurynsentry/helloworld.git'
+                                  ), (u'name', u'https')]), OrderedDict([(u'href',
+                                                                          u'git@bitbucket.org:laurynsentry/helloworld.git'), (u'name',
+                                                                                                                              u'ssh')])]),
+        (u'self', OrderedDict([(u'href',
+                                u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld'
+                                )])),
+        (u'source', OrderedDict([(u'href',
+                                  u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/src'
+                                  )])),
+        (u'html', OrderedDict([(u'href',
+                                u'https://bitbucket.org/laurynsentry/helloworld')])),
+        (u'avatar', OrderedDict([(u'href',
+                                  u'https://bytebucket.org/ravatar/%7B2a47ac11-098a-4054-8496-193754cae14b%7D?ts=default'
+                                  )])),
+        (u'hooks', OrderedDict([(u'href',
+                                 u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/hooks'
+                                 )])),
+        (u'forks', OrderedDict([(u'href',
+                                 u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/forks'
+                                 )])),
+        (u'downloads', OrderedDict([(u'href',
+                                     u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/downloads'
+                                     )])),
+        (u'issues', OrderedDict([(u'href',
+                                  u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/issues'
+                                  )])),
+        (u'pullrequests', OrderedDict([(u'href',
+                                        u'https://api.bitbucket.org/2.0/repositories/laurynsentry/helloworld/pullrequests'
+                                        )])),
+    ]),
+    u'created_on': u'2018-05-14T23:53:37.377674+00:00',
+    u'full_name': u'laurynsentry/helloworld',
+    u'owner': OrderedDict([
+        (u'username', u'laurynsentry'),
+        (u'display_name', u'Lauryn Brown'),
+        (u'account_id', u'5a00066393915e620920e0ae'),
+        (u'links', OrderedDict([(u'self', OrderedDict([(u'href',
+                                                        u'https://api.bitbucket.org/2.0/users/laurynsentry')])),
+                                (u'html', OrderedDict([(u'href',
+                                                        u'https://bitbucket.org/laurynsentry/')])), (u'avatar',
+                                                                                                     OrderedDict([(u'href',
+                                                                                                                   u'https://bitbucket.org/account/laurynsentry/avatar/')]))])),
+        (u'type', u'user'),
+        (u'uuid', u'{e50a27fe-0686-4d75-ba44-d27608bbb718}'),
+    ]),
+    u'has_issues': True,
+    u'slug': u'helloworld',
+    u'is_private': False,
+    u'size': 221349,
+    u'name': u'HelloWorld',
+    u'language': u'',
+    u'fork_policy': u'allow_forks',
+    u'uuid': u'{2a47ac11-098a-4054-8496-193754cae14b}',
+    u'mainbranch': OrderedDict([(u'type', u'branch'), (u'name',
+                                                       u'master')]),
+    u'updated_on': u'2018-05-30T18:21:08.780363+00:00',
+    u'type': u'repository',
+}
