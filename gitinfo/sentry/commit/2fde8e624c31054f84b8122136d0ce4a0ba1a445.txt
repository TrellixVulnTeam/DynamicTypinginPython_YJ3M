commit 2fde8e624c31054f84b8122136d0ce4a0ba1a445
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 16 00:30:04 2017 +0100

    Rebase the address for caching to support address space randomziation

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index a9aa84a614..babff9f651 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -417,12 +417,15 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         if img is not None:
             processable_frame.set_cache_key_from_values((
                 FRAME_CACHE_VERSION,
-                processable_frame.data['instruction_addr'],
-                img['uuid'],
+                # Because the images can move around, we want to rebase
+                # the address for the cache key to be within the image
+                # the same way as we do it in the symbolizer.
+                (parse_addr(img['image_vmaddr']) +
+                 instr_addr - parse_addr(img['image_addr'])),
+                img['uuid'].lower(),
                 img['cpu_type'],
                 img['cpu_subtype'],
                 img['image_size'],
-                img['image_addr']
             ))
 
     def preprocess_step(self, processing_task):
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 3d1accface..e91e75ff82 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -5,11 +5,10 @@ import hashlib
 
 from collections import namedtuple
 
-from django.core.cache import cache
-
 from sentry.models import Project
 from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
+from sentry.utils.cache import cache
 
 import six
 from six import integer_types, text_type
@@ -87,7 +86,8 @@ class ProcessableFrame(object):
         for value in values:
             _hash_value(value)
 
-        self.cache_key = 'pf:%s' % h.hexdigest()
+        self.cache_key = rv = 'pf:%s' % h.hexdigest()
+        return rv
 
 
 class StacktraceProcessingTask(object):
