commit e003f5e867fe4b97f5ed5651182959b7031f780e
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Aug 7 14:07:14 2019 -0700

    feat(ui): Add `showCustomInput` for `<RangeSlider>` (#14232)
    
    * feat(ui): Add `showCustomInput` for `<RangeSlider>`
    
    Adds a custom input to `<RangeSlider>` to explicitly set value.
    
    * change grid layout based on `showCustomInput` value

diff --git a/docs-ui/components/rangeSlider.stories.js b/docs-ui/components/rangeSlider.stories.js
new file mode 100644
index 0000000000..87f9a4de28
--- /dev/null
+++ b/docs-ui/components/rangeSlider.stories.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
+
+storiesOf('Forms|Controls', module).add(
+  'RangeSlider',
+  withInfo('Range Slider')(() => (
+    <React.Fragment>
+      <p>
+        <h4>Without custom input</h4>
+        <RangeSlider min={1} max={100} value={5} />
+      </p>
+      <p>
+        <h4>With custom input</h4>
+        <RangeSlider min={5} max={50} value={21} showCustomInput />
+      </p>
+    </React.Fragment>
+  ))
+);
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
index edb5e6772a..39a2b81836 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
@@ -3,6 +3,8 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import {t} from 'app/locale';
+import Input from 'app/views/settings/components/forms/controls/input';
+import space from 'app/styles/space';
 
 class RangeSlider extends React.Component {
   static propTypes = {
@@ -39,6 +41,11 @@ class RangeSlider extends React.Component {
      */
     allowedValues: PropTypes.arrayOf(PropTypes.number),
 
+    /**
+     * Show custom input
+     */
+    showCustomInput: PropTypes.bool,
+
     /**
      * This is called when *any* MouseUp or KeyUp event happens.
      * Used for "smart" Fields to trigger a "blur" event. `onChange` can
@@ -92,19 +99,24 @@ class RangeSlider extends React.Component {
     return value;
   };
 
-  handleInput = e => {
-    const sliderValue = parseInt(e.target.value, 10);
-
+  setValue = value => {
     this.setState({
-      sliderValue,
+      sliderValue: value,
     });
+  };
 
+  changeValue = (value, e) => {
     if (this.props.onChange) {
-      const value = this.getActualValue(sliderValue);
-      this.props.onChange(value, e);
+      this.props.onChange(this.getActualValue(value), e);
     }
   };
 
+  handleInput = e => {
+    const sliderValue = parseInt(e.target.value, 10);
+    this.setValue(sliderValue);
+    this.changeValue(sliderValue, e);
+  };
+
   handleBlur = e => {
     const {onBlur} = this.props;
     if (typeof onBlur !== 'function') {
@@ -114,9 +126,18 @@ class RangeSlider extends React.Component {
     onBlur(e);
   };
 
+  handleCustomInputChange = e => {
+    const value = parseInt(e.target.value, 10);
+    this.setValue(isNaN(value) ? 0 : value);
+  };
+
+  handleCustomInputBlur = e => {
+    this.handleInput(e);
+  };
+
   render() {
     let {min, max, step} = this.props;
-    const {name, disabled, allowedValues, formatLabel} = this.props;
+    const {name, disabled, allowedValues, formatLabel, showCustomInput} = this.props;
     const {sliderValue} = this.state;
     let actualValue = sliderValue;
     let displayValue = actualValue;
@@ -135,20 +156,30 @@ class RangeSlider extends React.Component {
 
     return (
       <div>
-        <Label htmlFor={name}>{displayValue}</Label>
-        <Slider
-          type="range"
-          name={name}
-          min={min}
-          max={max}
-          step={step}
-          disabled={disabled}
-          onInput={this.handleInput}
-          onChange={() => {}}
-          onMouseUp={this.handleBlur}
-          onKeyUp={this.handleBlur}
-          value={sliderValue}
-        />
+        {!showCustomInput && <Label htmlFor={name}>{displayValue}</Label>}
+        <SliderAndInputWrapper showCustomInput={showCustomInput}>
+          <Slider
+            type="range"
+            name={name}
+            min={min}
+            max={max}
+            step={step}
+            disabled={disabled}
+            onInput={this.handleInput}
+            onChange={() => {}}
+            onMouseUp={this.handleBlur}
+            onKeyUp={this.handleBlur}
+            value={sliderValue}
+            hasLabel={!showCustomInput}
+          />
+          {showCustomInput && (
+            <Input
+              value={sliderValue}
+              onChange={this.handleCustomInputChange}
+              onBlur={this.handleCustomInputBlur}
+            />
+          )}
+        </SliderAndInputWrapper>
       </div>
     );
   }
@@ -160,7 +191,7 @@ const Slider = styled('input')`
   /* stylelint-disable-next-line property-no-vendor-prefix */
   -webkit-appearance: none;
   width: 100%;
-  margin: ${p => p.theme.grid}px 0 ${p => p.theme.grid * 2}px;
+  margin: ${p => p.theme.grid}px 0 ${p => p.theme.grid * (p.hasLabel ? 2 : 1)}px;
 
   &::-webkit-slider-runnable-track {
     width: 100%;
@@ -291,3 +322,11 @@ const Label = styled('label')`
   margin-bottom: ${p => p.theme.grid}px;
   color: ${p => p.theme.gray3};
 `;
+
+const SliderAndInputWrapper = styled('div')`
+  display: grid;
+  align-items: center;
+  grid-auto-flow: column;
+  grid-template-columns: 4fr ${p => p.showCustomInput && '1fr'};
+  grid-gap: ${space(1)};
+`;
