commit 45edb3f94480ca0e33c439a7741e1346d362d820
Author: Dena Mwangi <dena@getsentry.com>
Date:   Tue Apr 24 14:59:01 2018 -0700

    fix(assistant): Move record assistant cues to guidestore to decrease dups (#8153)
    
    * Move record assistant cues to guidestore to decrease dups

diff --git a/src/sentry/static/sentry/app/components/assistant/helper.jsx b/src/sentry/static/sentry/app/components/assistant/helper.jsx
index 819b37f42e..ae8b3b70c3 100644
--- a/src/sentry/static/sentry/app/components/assistant/helper.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/helper.jsx
@@ -15,7 +15,6 @@ import GuideStore from '../../stores/guideStore';
 import CueIcon from './cueIcon';
 import AssistantContainer from './assistantContainer';
 import CloseIcon from './closeIcon';
-import HookStore from '../../stores/hookStore';
 
 // AssistantHelper is responsible for rendering the cue message, guide drawer and support drawer.
 const AssistantHelper = createReactClass({
@@ -38,17 +37,6 @@ const AssistantHelper = createReactClass({
     fetchGuides();
   },
 
-  componentDidUpdate(prevProps, prevState) {
-    if (this.state.currentGuide && !prevState.currentGuide) {
-      HookStore.get('analytics:event').forEach(cb =>
-        cb('assistant.guide_cued', {
-          guide: this.state.currentGuide.id,
-          cue: this.state.currentGuide.cue,
-        })
-      );
-    }
-  },
-
   onGuideStateChange(data) {
     this.setState({
       currentGuide: data.currentGuide,
diff --git a/src/sentry/static/sentry/app/stores/guideStore.jsx b/src/sentry/static/sentry/app/stores/guideStore.jsx
index 68877eb79c..d14430f582 100644
--- a/src/sentry/static/sentry/app/stores/guideStore.jsx
+++ b/src/sentry/static/sentry/app/stores/guideStore.jsx
@@ -20,6 +20,7 @@ const GuideStore = Reflux.createStore({
       currentOrg: null,
 
       forceShow: false,
+      prevGuide: null,
     };
     this.listenTo(GuideActions.fetchSucceeded, this.onFetchSucceeded);
     this.listenTo(GuideActions.closeGuideOrSupport, this.onCloseGuideOrSupport);
@@ -85,6 +86,24 @@ const GuideStore = Reflux.createStore({
     this.updateCurrentGuide();
   },
 
+  recordCue(id, cue) {
+    HookStore.get('analytics:event').forEach(cb =>
+      cb('assistant.guide_cued', {
+        guide: id,
+        cue,
+      })
+    );
+  },
+
+  updatePrevGuide(bestGuide) {
+    if (!bestGuide) return;
+
+    if (!this.state.prevGuide || this.state.prevGuide.id !== bestGuide.id) {
+      this.recordCue(bestGuide.id, bestGuide.cue);
+      this.state.prevGuide = bestGuide;
+    }
+  },
+
   updateCurrentGuide() {
     let availableTargets = [...this.state.anchors].map(a => a.props.target);
 
@@ -108,7 +127,7 @@ const GuideStore = Reflux.createStore({
         step => step.target && availableTargets.indexOf(step.target) >= 0
       );
     }
-
+    this.updatePrevGuide(bestGuide);
     this.state.currentGuide = bestGuide;
 
     this.state.currentStep = this.state.forceShow ? 1 : 0;
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
index 0cecad6ef5..6c5bce3679 100644
--- a/tests/js/spec/stores/guideStore.spec.jsx
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -24,6 +24,17 @@ describe('GuideStore', function() {
         ],
         seen: false,
       },
+      other: {
+        cue: 'Some other guide here',
+        id: 2,
+        page: 'random',
+        required_targets: ['target 1'],
+        steps: [
+          {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
+          {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
+        ],
+        seen: false,
+      },
     };
   });
 
@@ -64,6 +75,7 @@ describe('GuideStore', function() {
 
   it('should not show seen guides', function() {
     data.issue.seen = true;
+    data.other.seen = true;
     GuideStore.onRegisterAnchor(anchor1);
     GuideStore.onRegisterAnchor(anchor2);
     GuideStore.onFetchSucceeded(data);
@@ -78,4 +90,34 @@ describe('GuideStore', function() {
     GuideStore.onFetchSucceeded(data);
     expect(GuideStore.state.currentGuide).not.toEqual(null);
   });
+
+  it('should record analytics events when guide is cued', function() {
+    let mockRecordCue = jest.fn();
+    GuideStore.recordCue = mockRecordCue;
+
+    GuideStore.onRegisterAnchor(anchor1);
+    GuideStore.onRegisterAnchor(anchor2);
+    GuideStore.onFetchSucceeded(data);
+    expect(mockRecordCue).toHaveBeenCalledWith(data.issue.id, data.issue.cue);
+    expect(mockRecordCue).toHaveBeenCalledTimes(1);
+    GuideStore.onCloseGuideOrSupport();
+
+    // Should trigger a record when a new guide is cued
+    expect(GuideStore.state.currentGuide).toEqual(data.other);
+    expect(mockRecordCue).toHaveBeenCalledWith(data.other.id, data.other.cue);
+    expect(mockRecordCue).toHaveBeenCalledTimes(2);
+  });
+
+  it('should not send multiple cue analytics events for same guide', function() {
+    let mockRecordCue = jest.fn();
+    GuideStore.recordCue = mockRecordCue;
+
+    GuideStore.onRegisterAnchor(anchor1);
+    GuideStore.onRegisterAnchor(anchor2);
+    GuideStore.onFetchSucceeded(data);
+    expect(mockRecordCue).toHaveBeenCalledWith(data.issue.id, data.issue.cue);
+    expect(mockRecordCue).toHaveBeenCalledTimes(1);
+    GuideStore.updateCurrentGuide();
+    expect(mockRecordCue).toHaveBeenCalledTimes(1);
+  });
 });
