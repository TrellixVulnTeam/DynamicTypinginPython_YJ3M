commit 11b13c22b909b6c91f1c719665ccf5a9cbf055c9
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 3 18:33:04 2014 -0800

    Various fixes for removal of TeamMember

diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index e98827072a..6cb1c91c16 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -5,32 +5,13 @@ from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
 from sentry.api.serializers import serialize
-from sentry.models import Organization, Team, User
+from sentry.models import Organization, Team
 from sentry.permissions import can_create_teams
 
 
-class UserField(serializers.WritableField):
-    def to_native(self, obj):
-        return obj.username
-
-    def from_native(self, data):
-        if not data:
-            return None
-
-        try:
-            return User.objects.get(username__iexact=data)
-        except User.DoesNotExist:
-            raise serializers.ValidationError('Unable to find user')
-
-
 class TeamSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=True)
     slug = serializers.CharField(max_length=200, required=False)
-    owner = UserField(required=False, read_only=True)
-
-
-class TeamAdminSerializer(TeamSerializer):
-    owner = UserField(required=False)
 
 
 class OrganizationTeamsEndpoint(Endpoint):
@@ -70,10 +51,7 @@ class OrganizationTeamsEndpoint(Endpoint):
         if not can_create_teams(request.user, organization):
             return Response(status=403)
 
-        if request.user.is_superuser:
-            serializer = TeamAdminSerializer(data=request.DATA)
-        else:
-            serializer = TeamSerializer(data=request.DATA)
+        serializer = TeamSerializer(data=request.DATA)
 
         if serializer.is_valid():
             result = serializer.object
diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index a1a7f7a39e..1fd7e5c8ab 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -99,9 +99,7 @@ class Activity(Model):
         if self.project.team:
             # fetch team members
             user_id_list |= set(
-                u_id for u_id in self.project.team.member_set.filter(
-                    user__is_active=True,
-                ).exclude(
+                u_id for u_id in self.project.team.member_set.exclude(
                     user__id=self.user_id,
                 ).values_list('user', flat=True)
             )
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 881707cf2f..3992eadfd8 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import, print_function
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import models
+from django.db.models import Q
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
@@ -118,7 +119,6 @@ class Team(Model):
         (TeamStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
     ), default=TeamStatus.VISIBLE)
     date_added = models.DateTimeField(default=timezone.now, null=True)
-    members = models.ManyToManyField(settings.AUTH_USER_MODEL, through='sentry.TeamMember', related_name='team_memberships')
 
     objects = TeamManager(cache_fields=(
         'pk',
@@ -151,3 +151,10 @@ class Team(Model):
         if self.owner.email:
             return self.owner.email.split('@', 1)[0]
         return self.owner.username
+
+    @property
+    def member_set(self):
+        return self.organization.member_set.filter(
+            Q(teams=self) | Q(has_global_access=True),
+            user__is_active=True,
+        )
diff --git a/src/sentry/models/teammember.py b/src/sentry/models/teammember.py
index 344846d73c..1372fb9e72 100644
--- a/src/sentry/models/teammember.py
+++ b/src/sentry/models/teammember.py
@@ -30,8 +30,8 @@ class TeamMember(Model):
     and could be thought of as team owners (though their access level may not)
     be set to ownership.
     """
-    team = models.ForeignKey('sentry.Team', related_name="member_set")
-    user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name="sentry_teammember_set")
+    team = models.ForeignKey('sentry.Team', related_name=None)
+    user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name=None)
     type = BoundedIntegerField(choices=(
         (TeamMemberType.MEMBER, _('Member')),
         (TeamMemberType.ADMIN, _('Admin')),
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index aeabfdd84d..10b0a133f2 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -79,11 +79,11 @@ class User(Model, AbstractBaseUser):
     def merge_to(from_user, to_user):
         # TODO: we could discover relations automatically and make this useful
         from sentry.models import (
-            GroupBookmark, ProjectKey, Team, TeamMember, UserOption)
+            GroupBookmark, OrganizationMember, ProjectKey, Team, UserOption)
 
         for obj in ProjectKey.objects.filter(user=from_user):
             obj.update(user=to_user)
-        for obj in TeamMember.objects.filter(user=from_user):
+        for obj in OrganizationMember.objects.filter(user=from_user):
             obj.update(user=to_user)
         for obj in Team.objects.filter(owner=from_user):
             obj.update(owner=to_user)
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 84bef79c0b..178889f562 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -73,9 +73,9 @@ class NotificationPlugin(Plugin):
 
         if project.team:
             # fetch team members
-            member_set |= set(project.team.member_set.filter(
-                user__is_active=True,
-            ).exclude(user__in=disabled).values_list('user', flat=True))
+            member_set |= set(project.team.member_set.exclude(
+                user__in=disabled,
+            ).values_list('user', flat=True))
 
         # determine members default settings
         members_to_check = set(u for u in member_set if u not in alert_settings)
diff --git a/tests/sentry/api/endpoints/test_organization_teams.py b/tests/sentry/api/endpoints/test_organization_teams.py
index da37ac57e9..464219ddc9 100644
--- a/tests/sentry/api/endpoints/test_organization_teams.py
+++ b/tests/sentry/api/endpoints/test_organization_teams.py
@@ -2,7 +2,6 @@ from django.core.urlresolvers import reverse
 from exam import fixture
 from mock import Mock, patch
 
-from sentry.constants import MEMBER_OWNER
 from sentry.models import Team
 from sentry.testutils import APITestCase
 
@@ -50,16 +49,8 @@ class OrganizationTeamsCreateTest(APITestCase):
         team = Team.objects.get(id=resp.data['id'])
         assert team.name == 'hello world'
         assert team.slug == 'foobar'
-        assert team.owner == self.user
         assert team.organization == self.organization
 
-        member_set = list(team.member_set.all())
-
-        assert len(member_set) == 1
-        member = member_set[0]
-        assert member.user == team.owner
-        assert member.type == MEMBER_OWNER
-
     @patch('sentry.api.endpoints.organization_teams.can_create_teams', Mock(return_value=True))
     def test_without_slug(self):
         self.login_as(user=self.user)
@@ -70,25 +61,3 @@ class OrganizationTeamsCreateTest(APITestCase):
         assert resp.status_code == 201, resp.content
         team = Team.objects.get(id=resp.data['id'])
         assert team.slug == 'hello-world'
-
-    @patch('sentry.api.endpoints.organization_teams.can_create_teams', Mock(return_value=True))
-    def test_superuser_can_set_owner(self):
-        self.login_as(user=self.user)
-
-        user2 = self.create_user(email='user2@example.com')
-
-        resp = self.client.post(self.path, {
-            'name': 'hello world',
-            'slug': 'foobar',
-            'owner': user2.username,
-        })
-        assert resp.status_code == 201, resp.content
-        team = Team.objects.get(id=resp.data['id'])
-        assert team.owner == user2
-
-        member_set = list(team.member_set.all())
-
-        assert len(member_set) == 1
-        member = member_set[0]
-        assert member.user == team.owner
-        assert member.type == MEMBER_OWNER
diff --git a/tests/sentry/models/activity/tests.py b/tests/sentry/models/activity/tests.py
index 26416ad8dd..dff8afaac4 100644
--- a/tests/sentry/models/activity/tests.py
+++ b/tests/sentry/models/activity/tests.py
@@ -19,7 +19,7 @@ class SendNotificationTest(TestCase):
             },
         )
 
-        self.project.team.member_set.create(user=user_foo)
+        self.project.team.organization.member_set.create(user=user_foo)
 
         with self.settings(CELERY_ALWAYS_EAGER=True):
             activity.send_notification()
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index eaecdb64fc..d186d72745 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -8,7 +8,7 @@ from sentry.models import OrganizationMember
 from sentry.testutils import TestCase
 
 
-class PendingTeamMemberTest(TestCase):
+class PendingOrganizationMemberTest(TestCase):
     def test_token_generation(self):
         member = OrganizationMember(id=1, organization_id=1, email='foo@example.com')
         with self.settings(SECRET_KEY='a'):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index acc59d7d24..8d22f20caa 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -166,11 +166,12 @@ class MailPluginTest(TestCase):
         # user not in any groups
         self.create_user(email='bar2@example.com', is_active=True)
 
-        team = self.create_team(owner=user)
+        organization = self.create_organization(owner=user)
+        team = self.create_team(organization=organization)
 
         project = self.create_project(name='Test', team=team)
-        team.member_set.get_or_create(user=user)
-        team.member_set.get_or_create(user=user2)
+        organization.member_set.get_or_create(user=user)
+        organization.member_set.get_or_create(user=user2)
 
         ag = AccessGroup.objects.create(team=team)
         ag.members.add(user3)
@@ -188,7 +189,7 @@ class MailPluginTest(TestCase):
 
         user4 = User.objects.create(username='baz4', email='bar@example.com',
                                     is_active=True)
-        project.team.member_set.get_or_create(user=user4)
+        organization.member_set.get_or_create(user=user4)
 
         assert user4.pk in self.plugin.get_sendable_users(project)
 
