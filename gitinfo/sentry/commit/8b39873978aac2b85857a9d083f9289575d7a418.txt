commit 8b39873978aac2b85857a9d083f9289575d7a418
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 12 12:13:43 2016 -0800

    Switch Event.data ref to Project
    
    This corrects an issue where merging events would cause a ref integrity error due to the fact that refs were bound to the group, which commonly would no longer be the same.

diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 11ec2b4026..03d105d8e3 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -42,6 +42,10 @@ class NodeData(collections.MutableMapping):
         self.field = field
         self.id = id
         self.ref = None
+        # ref version is used to discredit a previous ref
+        # (this does not mean the Event is mutable, it just removes ref checking
+        #  in the case of something changing on the data model)
+        self.ref_version = None
         self._node_data = data
 
     def __getitem__(self, key):
@@ -91,7 +95,8 @@ class NodeData(collections.MutableMapping):
 
     def bind_data(self, data, ref=None):
         self.ref = data.pop('_ref', ref)
-        if ref is not None and self.ref != ref:
+        self.ref_version = data.pop('_ref_version', None)
+        if self.ref_version == self.field.ref_version and ref is not None and self.ref != ref:
             raise NodeIntegrityFailure('Node reference for %s is invalid: %s != %s' % (
                 self.id, ref, self.ref,
             ))
@@ -101,6 +106,7 @@ class NodeData(collections.MutableMapping):
         ref = self.get_ref(instance)
         if ref:
             self.data['_ref'] = ref
+            self.data['_ref_version'] = self.field.ref_version
 
 
 class NodeField(GzippedDictField):
@@ -112,6 +118,7 @@ class NodeField(GzippedDictField):
 
     def __init__(self, *args, **kwargs):
         self.ref_func = kwargs.pop('ref_func', None)
+        self.ref_version = kwargs.pop('ref_version', None)
         super(NodeField, self).__init__(*args, **kwargs)
 
     def contribute_to_class(self, cls, name):
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 3602818df2..9c8aca15f2 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -37,7 +37,12 @@ class Event(Model):
     platform = models.CharField(max_length=64, null=True)
     datetime = models.DateTimeField(default=timezone.now, db_index=True)
     time_spent = BoundedIntegerField(null=True)
-    data = NodeField(blank=True, null=True, ref_func=lambda x: x.group_id or x.group.id)
+    data = NodeField(
+        blank=True,
+        null=True,
+        ref_func=lambda x: x.project_id or x.project.id,
+        ref_version=2,
+    )
 
     objects = BaseManager()
 
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 5cf033484d..b1eaccf218 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -127,15 +127,16 @@ class EventNodeStoreTest(TestCase):
         assert event.data.id == node_id
 
     def test_screams_bloody_murder_when_ref_fails(self):
-        group1 = self.create_group()
+        project1 = self.create_project()
+        project2 = self.create_project()
+        group1 = self.create_group(project1)
         invalid_event = self.create_event(group=group1)
-        group2 = self.create_group()
+        group2 = self.create_group(project2)
         event = self.create_event(group=group2)
         event.data.bind_ref(invalid_event)
         event.save()
 
-        assert event.data.get_ref(event) == event.group.id
-        assert event.data.get_ref(invalid_event) == invalid_event.group.id
+        assert event.data.get_ref(event) != event.data.get_ref(invalid_event)
 
         with pytest.raises(NodeIntegrityFailure):
             Event.objects.bind_nodes([event], 'data')
@@ -147,8 +148,8 @@ class EventNodeStoreTest(TestCase):
 
         Event.objects.bind_nodes([event], 'data')
 
-        assert event.data.ref == event.group.id
+        assert event.data.ref == event.project.id
 
     def test_basic_ref_binding(self):
         event = self.create_event()
-        assert event.data.get_ref(event) == event.group.id
+        assert event.data.get_ref(event) == event.project.id
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
new file mode 100644
index 0000000000..525e682d7f
--- /dev/null
+++ b/tests/sentry/tasks/test_merge.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from sentry.tasks.merge import merge_group
+from sentry.models import Event, Group
+from sentry.testutils import TestCase
+
+
+class MergeGroupTest(TestCase):
+    def test_merge_with_event_integrity(self):
+        project1 = self.create_project()
+        group1 = self.create_group(project1)
+        event1 = self.create_event('a' * 32, group=group1, data={'foo': 'bar'})
+        project2 = self.create_project()
+        group2 = self.create_group(project2)
+        event2 = self.create_event('b' * 32, group=group2, data={'foo': 'baz'})
+
+        with self.tasks():
+            merge_group(group1.id, group2.id)
+
+        assert not Group.objects.filter(id=group1.id).exists()
+
+        # this previously would error with NodeIntegrityError due to the
+        # reference check being bound to a group
+        event1 = Event.objects.get(id=event1.id)
+        assert event1.group_id == group2.id
+        Event.objects.bind_nodes([event1], 'data')
+        assert event1.data == {'foo': 'bar'}
+
+        event2 = Event.objects.get(id=event2.id)
+        assert event2.group_id == group2.id
+        Event.objects.bind_nodes([event2], 'data')
+        assert event2.data == {'foo': 'baz'}
