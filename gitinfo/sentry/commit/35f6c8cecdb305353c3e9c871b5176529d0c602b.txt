commit 35f6c8cecdb305353c3e9c871b5176529d0c602b
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Mar 12 18:39:11 2020 -0700

    chore(ts): Convert SidebarItem (#17633)

diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.tsx
similarity index 52%
rename from src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
rename to src/sentry/static/sentry/app/components/sidebar/sidebarItem.tsx
index e855d256dd..12dccd6f69 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.tsx
@@ -1,5 +1,4 @@
-import {withRouter} from 'react-router';
-import PropTypes from 'prop-types';
+import * as ReactRouter from 'react-router';
 import React from 'react';
 import styled from '@emotion/styled';
 import {css} from '@emotion/core';
@@ -9,121 +8,127 @@ import HookOrDefault from 'app/components/hookOrDefault';
 import Tooltip from 'app/components/tooltip';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
+import Link from 'app/components/links/link';
+import TextOverflow from 'app/components/textOverflow';
 
-import Link from '../links/link';
-import TextOverflow from '../textOverflow';
+import {SidebarOrientation} from './types';
 
 const LabelHook = HookOrDefault({
   hookName: 'sidebar:item-label',
   defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,
 });
 
-class SidebarItem extends React.Component {
-  static propTypes = {
-    ...Link.propTypes,
-    router: PropTypes.object,
-    href: PropTypes.string,
-    id: PropTypes.string,
-    to: PropTypes.string,
-    onClick: PropTypes.func,
-
-    // Is sidebar item active
-    active: PropTypes.bool,
-
-    // Is sidebar in a collapsed state
-    collapsed: PropTypes.bool,
-
-    // Sidebar has a panel open
-    hasPanel: PropTypes.bool,
-
-    // Icon to display
-    icon: PropTypes.node,
-
-    // Label to display (only when expanded)
-    label: PropTypes.node,
-
-    // Additional badge to display after label
-    badge: PropTypes.number,
-
-    // Additional badge letting users know a tab is new.
-    isNew: PropTypes.bool,
-
-    // Sidebar is at "top" or "left" of screen
-    orientation: PropTypes.oneOf(['top', 'left']),
-  };
-
-  handleClick = e => {
-    const {id, onClick} = this.props;
-
-    if (typeof onClick !== 'function') {
-      return;
-    }
-
-    onClick(id, e);
-  };
-
-  render() {
-    const {
-      router,
-      href,
-      to,
-      icon,
-      label,
-      badge,
-      active,
-      hasPanel,
-      isNew,
-      collapsed,
-      className,
-      orientation,
-    } = this.props;
-
-    // If there is no active panel open and if path is active according to react-router
-    const isActiveRouter =
-      (!hasPanel && router && to && location.pathname.startsWith(to)) ||
-      (label === 'Discover' && location.pathname.includes('/discover/')) ||
-      // TODO: this won't be necessary once we remove settingsHome
-      (label === 'Settings' && location.pathname.startsWith('/settings/'));
-
-    const isActive = active || isActiveRouter;
-    const isTop = orientation === 'top';
-    const placement = isTop ? 'bottom' : 'right';
+type Props = ReactRouter.WithRouterProps & {
+  onClick?: (id: string, e: React.MouseEvent<HTMLAnchorElement>) => void;
+  className?: string;
+
+  // TODO(ts): Replace with React.ComponentProps<typeof Link> when possible
+  index?: boolean;
+  href?: string;
+  to?: string;
+
+  /**
+   * Key of the sidebar item. Used for label hooks
+   */
+  id: string;
+  /**
+   * Is this sidebar item active
+   */
+  active?: boolean;
+  /**
+   * Is sidebar in a collapsed state
+   */
+  collapsed?: boolean;
+  /**
+   * Sidebar has a panel open
+   */
+  hasPanel?: boolean;
+  /**
+   * Icon to display
+   */
+  icon: React.ReactNode;
+  /**
+   * Label to display (only when expanded)
+   */
+  label: React.ReactNode;
+  /**
+   * Additional badge to display after label
+   */
+  badge?: number;
+  /**
+   * Additional badge letting users know a tab is new.
+   */
+  isNew?: boolean;
+  /**
+   * Sidebar is at "top" or "left" of screen
+   */
+  orientation: SidebarOrientation;
+};
 
-    return (
-      <Tooltip disabled={!collapsed} title={label} position={placement}>
-        <StyledSidebarItem
-          data-test-id={this.props['data-test-id']}
-          active={isActive ? 'true' : undefined}
-          href={href}
-          to={to}
-          className={className}
-          onClick={this.handleClick}
-        >
-          <SidebarItemWrapper>
-            <SidebarItemIcon>{icon}</SidebarItemIcon>
-            {!collapsed && !isTop && (
-              <SidebarItemLabel>
-                <LabelHook id={this.props.id}>
-                  <TextOverflow>{label}</TextOverflow>
-                  {isNew && (
-                    <StyledTag priority="beta" size="small">
-                      {t('New')}
-                    </StyledTag>
-                  )}
-                </LabelHook>
-              </SidebarItemLabel>
-            )}
-            {badge > 0 && (
-              <SidebarItemBadge collapsed={collapsed}>{badge}</SidebarItemBadge>
-            )}
-          </SidebarItemWrapper>
-        </StyledSidebarItem>
-      </Tooltip>
-    );
-  }
-}
+const SidebarItem = ({
+  router,
+  id,
+  href,
+  to,
+  icon,
+  label,
+  badge,
+  active,
+  hasPanel,
+  isNew,
+  collapsed,
+  className,
+  orientation,
+  onClick,
+  ...props
+}: Props) => {
+  // If there is no active panel open and if path is active according to react-router
+  const isActiveRouter =
+    (!hasPanel && router && to && location.pathname.startsWith(to)) ||
+    (label === 'Discover' && location.pathname.includes('/discover/')) ||
+    // TODO: this won't be necessary once we remove settingsHome
+    (label === 'Settings' && location.pathname.startsWith('/settings/'));
+
+  const isActive = active || isActiveRouter;
+  const isTop = orientation === 'top';
+  const placement = isTop ? 'bottom' : 'right';
+
+  return (
+    <Tooltip disabled={!collapsed} title={label} position={placement}>
+      <StyledSidebarItem
+        data-test-id={props['data-test-id']}
+        active={isActive ? 'true' : undefined}
+        href={href}
+        to={to}
+        className={className}
+        onClick={(e: React.MouseEvent<HTMLAnchorElement>) =>
+          typeof onClick === 'function' && onClick(id, e)
+        }
+      >
+        <SidebarItemWrapper>
+          <SidebarItemIcon>{icon}</SidebarItemIcon>
+          {!collapsed && !isTop && (
+            <SidebarItemLabel>
+              <LabelHook id={id}>
+                <TextOverflow>{label}</TextOverflow>
+                {isNew && (
+                  <StyledTag priority="beta" size="small">
+                    {t('New')}
+                  </StyledTag>
+                )}
+              </LabelHook>
+            </SidebarItemLabel>
+          )}
+          {badge !== undefined && badge > 0 && (
+            <SidebarItemBadge collapsed={collapsed}>{badge}</SidebarItemBadge>
+          )}
+        </SidebarItemWrapper>
+      </StyledSidebarItem>
+    </Tooltip>
+  );
+};
 
-export default withRouter(SidebarItem);
+export default ReactRouter.withRouter(SidebarItem);
 
 const getActiveStyle = ({active, theme}) => {
   if (!active) {
diff --git a/src/sentry/static/sentry/app/components/sidebar/types.tsx b/src/sentry/static/sentry/app/components/sidebar/types.tsx
index 41f12a1074..8c1837cb94 100644
--- a/src/sentry/static/sentry/app/components/sidebar/types.tsx
+++ b/src/sentry/static/sentry/app/components/sidebar/types.tsx
@@ -1,3 +1,3 @@
 export type SidebarOrientation = 'top' | 'left';
 
-export type SidebarPanelKey = 'broadcasts' | 'onboarding';
+export type SidebarPanelKey = 'broadcasts' | 'todos' | 'statusupdate' | '';
