commit da617a5c6a6d1b23ac09a09a89036d5bcb66a269
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jun 20 09:45:23 2018 -0700

    ref(js): Rename "User Reports" to "User Feedback" to match UI (#8754)
    
    This just renames components/filenames from `User Reports` to `User Feedback` to match what our UI displays.

diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 297c89512f..27f79afbf6 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -15,7 +15,7 @@ import EventPackageData from 'app/components/events/packageData';
 import EventTags from 'app/components/events/eventTags';
 import EventSdk from 'app/components/events/sdk';
 import EventDevice from 'app/components/events/device';
-import EventUserReport from 'app/components/events/userReport';
+import EventUserFeedback from 'app/components/events/userFeedback';
 import SentryTypes from 'app/proptypes';
 import GroupState from 'app/mixins/groupState';
 import utils from 'app/utils';
@@ -68,22 +68,12 @@ const EventEntries = createReactClass({
     };
   },
 
-  recordSourcemapError(errorTypes) {
-    let {project, event} = this.props;
-
-    analytics('sourcemap.sourcemap_error', {
-      'org_id': project.organization.id,
-      'group': event.groupID,
-      'error_type': errorTypes
-    })
-  },
-
   componentDidMount() {
     let {event} = this.props;
 
     if (!event.errors || !event.errors.length > 0) return;
     let errors = event.errors;
-    let errorTypes = errors.map((errorEntries) => errorEntries.type);
+    let errorTypes = errors.map(errorEntries => errorEntries.type);
 
     this.recordSourcemapError(errorTypes);
   },
@@ -92,6 +82,16 @@ const EventEntries = createReactClass({
     return this.props.event.id !== nextProps.event.id;
   },
 
+  recordSourcemapError(errorTypes) {
+    let {project, event} = this.props;
+
+    analytics('sourcemap.sourcemap_error', {
+      org_id: project.organization.id,
+      group: event.groupID,
+      error_type: errorTypes,
+    });
+  },
+
   interfaces: INTERFACES,
 
   render() {
@@ -146,7 +146,7 @@ const EventEntries = createReactClass({
             <EventCause event={event} orgId={orgId} projectId={project.slug} />
           )}
         {event.userReport && (
-          <EventUserReport
+          <EventUserFeedback
             report={event.userReport}
             orgId={orgId}
             projectId={project.slug}
diff --git a/src/sentry/static/sentry/app/components/events/userReport.jsx b/src/sentry/static/sentry/app/components/events/userFeedback.jsx
similarity index 95%
rename from src/sentry/static/sentry/app/components/events/userReport.jsx
rename to src/sentry/static/sentry/app/components/events/userFeedback.jsx
index 07fa753f2a..51cca14eff 100644
--- a/src/sentry/static/sentry/app/components/events/userReport.jsx
+++ b/src/sentry/static/sentry/app/components/events/userFeedback.jsx
@@ -5,7 +5,7 @@ import TimeSince from 'app/components/timeSince';
 import utils from 'app/utils';
 import Link from 'app/components/link';
 
-class EventUserReport extends React.Component {
+class EventUserFeedback extends React.Component {
   static propTypes = {
     report: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
@@ -55,4 +55,4 @@ class EventUserReport extends React.Component {
   }
 }
 
-export default EventUserReport;
+export default EventUserFeedback;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 42f5a88700..f3130a60ef 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -17,7 +17,7 @@ import GroupMergedView from 'app/views/groupMerged/groupMergedView';
 import GroupSimilarView from 'app/views/groupSimilar/groupSimilarView';
 import GroupTagValues from 'app/views/groupTagValues';
 import GroupTags from 'app/views/groupTags';
-import GroupUserReports from 'app/views/groupUserReports';
+import GroupUserFeedback from 'app/views/groupUserFeedback';
 import HookStore from 'app/stores/hookStore';
 import LazyLoad from 'app/components/lazyLoad';
 import MyIssuesAssignedToMe from 'app/views/myIssues/assignedToMe';
@@ -51,7 +51,7 @@ import ProjectIssueTracking from 'app/views/projectIssueTracking';
 import ProjectReleases from 'app/views/projectReleases';
 import ProjectSavedSearches from 'app/views/projectSavedSearches';
 import ProjectSettings from 'app/views/projectSettings';
-import ProjectUserReports from 'app/views/projectUserReports';
+import ProjectUserFeedback from 'app/views/projectUserFeedback';
 import ProjectPlugins from 'app/views/projectPlugins';
 import ProjectPluginDetails from 'app/views/projectPluginDetails';
 import ReleaseAllEvents from 'app/views/releaseAllEvents';
@@ -831,7 +831,7 @@ function routes() {
             <Route path="artifacts/" component={errorHandler(ReleaseArtifacts)} />
             <Route path="commits/" component={errorHandler(ReleaseCommits)} />
           </Route>
-          <Route path="user-feedback/" component={errorHandler(ProjectUserReports)} />
+          <Route path="user-feedback/" component={errorHandler(ProjectUserFeedback)} />
 
           <Route path="settings/" component={errorHandler(ProjectSettings)}>
             <Redirect from="teams/" to="/settings/:orgId/:projectId/teams/" />
@@ -942,7 +942,7 @@ function routes() {
             <Route path="events/" component={errorHandler(GroupEvents)} />
             <Route path="tags/" component={errorHandler(GroupTags)} />
             <Route path="tags/:tagKey/" component={errorHandler(GroupTagValues)} />
-            <Route path="feedback/" component={errorHandler(GroupUserReports)} />
+            <Route path="feedback/" component={errorHandler(GroupUserFeedback)} />
             <Route path="similar/" component={errorHandler(GroupSimilarView)} />
             <Route path="merged/" component={errorHandler(GroupMergedView)} />
           </Route>
diff --git a/src/sentry/static/sentry/app/views/groupUserReports.jsx b/src/sentry/static/sentry/app/views/groupUserFeedback.jsx
similarity index 91%
rename from src/sentry/static/sentry/app/views/groupUserReports.jsx
rename to src/sentry/static/sentry/app/views/groupUserFeedback.jsx
index 2f2bdd0e98..7af62eb550 100644
--- a/src/sentry/static/sentry/app/views/groupUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/groupUserFeedback.jsx
@@ -7,7 +7,7 @@ import qs from 'query-string';
 import SentryTypes from 'app/proptypes';
 import ApiMixin from 'app/mixins/apiMixin';
 import GroupState from 'app/mixins/groupState';
-import EventUserReport from 'app/components/events/userReport';
+import EventUserFeedback from 'app/components/events/userFeedback';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import {t, tct} from 'app/locale';
@@ -15,8 +15,8 @@ import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {Panel} from 'app/components/panels';
 
-const GroupUserReports = createReactClass({
-  displayName: 'GroupUserReports',
+const GroupUserFeedback = createReactClass({
+  displayName: 'GroupUserFeedback',
 
   propTypes: {
     environment: SentryTypes.Environment,
@@ -81,7 +81,7 @@ const GroupUserReports = createReactClass({
     });
   },
 
-  getUserReportsUrl() {
+  getUserFeedbackUrl() {
     let params = this.props.params;
 
     return `/${params.orgId}/${params.projectId}/settings/user-feedback/`;
@@ -103,7 +103,7 @@ const GroupUserReports = createReactClass({
           <div className="col-md-9">
             {reportList.map((item, idx) => {
               return (
-                <EventUserReport
+                <EventUserFeedback
                   key={idx}
                   report={item}
                   projectId={projectId}
@@ -128,7 +128,7 @@ const GroupUserReports = createReactClass({
         <EmptyStateWarning>
           <p>{emptyStateMessage}</p>
           <p>
-            <Link to={this.getUserReportsUrl()}>
+            <Link to={this.getUserFeedbackUrl()}>
               {t('Learn how to integrate User Feedback')}
             </Link>
           </p>
@@ -138,4 +138,4 @@ const GroupUserReports = createReactClass({
   },
 });
 
-export default withEnvironmentInQueryString(GroupUserReports);
+export default withEnvironmentInQueryString(GroupUserFeedback);
diff --git a/src/sentry/static/sentry/app/views/projectUserReports.jsx b/src/sentry/static/sentry/app/views/projectUserFeedback.jsx
similarity index 94%
rename from src/sentry/static/sentry/app/views/projectUserReports.jsx
rename to src/sentry/static/sentry/app/views/projectUserFeedback.jsx
index 3c59674bbb..030158df4a 100644
--- a/src/sentry/static/sentry/app/views/projectUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserFeedback.jsx
@@ -11,14 +11,14 @@ import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import Pagination from 'app/components/pagination';
 import CompactIssue from 'app/components/compactIssue';
-import EventUserReport from 'app/components/events/userReport';
+import EventUserFeedback from 'app/components/events/userFeedback';
 import {Panel, PanelBody} from 'app/components/panels';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {t, tct} from 'app/locale';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
 
-const ProjectUserReports = createReactClass({
-  displayName: 'ProjectUserReports',
+const ProjectUserFeedback = createReactClass({
+  displayName: 'ProjectUserFeedback',
 
   propTypes: {
     defaultQuery: PropTypes.string,
@@ -139,7 +139,7 @@ const ProjectUserReports = createReactClass({
     });
   },
 
-  getUserReportsUrl() {
+  getUserFeedbackUrl() {
     let params = this.props.params;
 
     return `/${params.orgId}/${params.projectId}/settings/user-feedback/`;
@@ -178,7 +178,7 @@ const ProjectUserReports = createReactClass({
       <EmptyStateWarning>
         <p>{message}</p>
         <p>
-          <Link to={this.getUserReportsUrl()}>
+          <Link to={this.getUserFeedbackUrl()}>
             {t('Learn how to integrate User Feedback')}
           </Link>
         </p>
@@ -200,7 +200,7 @@ const ProjectUserReports = createReactClass({
           orgId={orgId}
           projectId={projectId}
         >
-          <EventUserReport
+          <EventUserFeedback
             report={item}
             orgId={orgId}
             projectId={projectId}
@@ -250,5 +250,5 @@ const ProjectUserReports = createReactClass({
   },
 });
 
-export {ProjectUserReports};
-export default withEnvironmentInQueryString(ProjectUserReports);
+export {ProjectUserFeedback};
+export default withEnvironmentInQueryString(ProjectUserFeedback);
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
index fc0830411b..a3fbf368fb 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
@@ -21,7 +21,7 @@ const TextBlockNoMargin = styled(TextBlock)`
   margin-bottom: 0;
 `;
 
-class ProjectUserReportSettings extends AsyncView {
+class ProjectUserFeedbackSettings extends AsyncView {
   static propTypes = {
     setProjectNavSection: PropTypes.func,
   };
@@ -177,4 +177,4 @@ class ProjectUserReportSettings extends AsyncView {
   }
 }
 
-export default ProjectUserReportSettings;
+export default ProjectUserFeedbackSettings;
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 75d832dfb0..bfc08e910b 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -1041,7 +1041,7 @@ window.TestStubs = {
     ...params,
   }),
 
-  UserReport: () => ({
+  UserFeedback: () => ({
     id: '123',
     name: 'Lyn',
     email: 'lyn@sentry.io',
diff --git a/tests/js/spec/views/__snapshots__/projectUserReports.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectUserFeedback.spec.jsx.snap
similarity index 97%
rename from tests/js/spec/views/__snapshots__/projectUserReports.spec.jsx.snap
rename to tests/js/spec/views/__snapshots__/projectUserFeedback.spec.jsx.snap
index 8cb6501117..76b8e00e58 100644
--- a/tests/js/spec/views/__snapshots__/projectUserReports.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectUserFeedback.spec.jsx.snap
@@ -1,6 +1,6 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`projectUserReports renders 1`] = `
+exports[`projectUserFeedback renders 1`] = `
 <div>
   <div
     className="row release-list-header"
@@ -94,7 +94,7 @@ exports[`projectUserReports renders 1`] = `
         orgId="org-slug"
         projectId="project-slug"
       >
-        <EventUserReport
+        <EventUserFeedback
           issueId="1"
           orgId="org-slug"
           projectId="project-slug"
diff --git a/tests/js/spec/views/projectUserFeedback.spec.jsx b/tests/js/spec/views/projectUserFeedback.spec.jsx
index cc241330e3..39ecfb3155 100644
--- a/tests/js/spec/views/projectUserFeedback.spec.jsx
+++ b/tests/js/spec/views/projectUserFeedback.spec.jsx
@@ -1,56 +1,33 @@
 import React from 'react';
 
-import {mount} from 'enzyme';
-import ProjectUserFeedback from 'app/views/settings/project/projectUserFeedback';
-
-describe('ProjectUserFeedback', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.ProjectDetails();
-  let url = `/projects/${org.slug}/${project.slug}/`;
+import {shallow} from 'enzyme';
+import {ProjectUserFeedback} from 'app/views/projectUserFeedback';
 
+describe('projectUserFeedback', function() {
   beforeEach(function() {
-    MockApiClient.clearMockResponses();
-    MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/`,
-      method: 'GET',
-      body: TestStubs.Project(),
-    });
     MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/keys/`,
-      method: 'GET',
-      body: [],
+      url: '/projects/org-slug/project-slug/user-reports/',
+      body: [TestStubs.UserFeedback()],
     });
   });
 
-  it('can toggle sentry branding option', function() {
-    let wrapper = mount(
-      <ProjectUserFeedback
-        organization={org}
-        project={project}
-        setProjectNavSection={() => {}}
-        params={{orgId: org.slug, projectId: project.slug}}
-      />,
-      TestStubs.routerContext()
-    );
-
-    let mock = MockApiClient.addMockResponse({
-      url,
-      method: 'PUT',
-    });
-
-    expect(mock).not.toHaveBeenCalled();
-
-    // Click Regenerate Token
-    wrapper.find('Switch').simulate('click');
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
 
-    expect(mock).toHaveBeenCalledWith(
-      url,
-      expect.objectContaining({
-        method: 'PUT',
-        data: {
-          options: {'feedback:branding': true},
-        },
-      })
+  it('renders', function() {
+    const params = {
+      location: {query: {}},
+      setProjectNavSection: jest.fn(),
+      params: {
+        orgId: 'org-slug',
+        projectId: 'project-slug',
+      },
+    };
+    const wrapper = shallow(
+      <ProjectUserFeedback {...params} />,
+      TestStubs.routerContext()
     );
+    expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/views/projectUserReports.spec.jsx b/tests/js/spec/views/projectUserReports.spec.jsx
deleted file mode 100644
index 017ff1ee6d..0000000000
--- a/tests/js/spec/views/projectUserReports.spec.jsx
+++ /dev/null
@@ -1,33 +0,0 @@
-import React from 'react';
-
-import {shallow} from 'enzyme';
-import {ProjectUserReports} from 'app/views/projectUserReports';
-
-describe('projectUserReports', function() {
-  beforeEach(function() {
-    MockApiClient.addMockResponse({
-      url: '/projects/org-slug/project-slug/user-reports/',
-      body: [TestStubs.UserReport()],
-    });
-  });
-
-  afterEach(function() {
-    MockApiClient.clearMockResponses();
-  });
-
-  it('renders', function() {
-    const params = {
-      location: {query: {}},
-      setProjectNavSection: jest.fn(),
-      params: {
-        orgId: 'org-slug',
-        projectId: 'project-slug',
-      },
-    };
-    const wrapper = shallow(
-      <ProjectUserReports {...params} />,
-      TestStubs.routerContext()
-    );
-    expect(wrapper).toMatchSnapshot();
-  });
-});
diff --git a/tests/js/spec/views/settings/projectUserFeedback.spec.jsx b/tests/js/spec/views/settings/projectUserFeedback.spec.jsx
new file mode 100644
index 0000000000..cc241330e3
--- /dev/null
+++ b/tests/js/spec/views/settings/projectUserFeedback.spec.jsx
@@ -0,0 +1,56 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import ProjectUserFeedback from 'app/views/settings/project/projectUserFeedback';
+
+describe('ProjectUserFeedback', function() {
+  let org = TestStubs.Organization();
+  let project = TestStubs.ProjectDetails();
+  let url = `/projects/${org.slug}/${project.slug}/`;
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/`,
+      method: 'GET',
+      body: TestStubs.Project(),
+    });
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/`,
+      method: 'GET',
+      body: [],
+    });
+  });
+
+  it('can toggle sentry branding option', function() {
+    let wrapper = mount(
+      <ProjectUserFeedback
+        organization={org}
+        project={project}
+        setProjectNavSection={() => {}}
+        params={{orgId: org.slug, projectId: project.slug}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    let mock = MockApiClient.addMockResponse({
+      url,
+      method: 'PUT',
+    });
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // Click Regenerate Token
+    wrapper.find('Switch').simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      url,
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          options: {'feedback:branding': true},
+        },
+      })
+    );
+  });
+});
