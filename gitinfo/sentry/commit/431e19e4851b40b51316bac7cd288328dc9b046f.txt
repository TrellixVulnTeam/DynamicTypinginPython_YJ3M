commit 431e19e4851b40b51316bac7cd288328dc9b046f
Author: MeredithAnya <meredith@getsentry.com>
Date:   Wed May 22 13:18:41 2019 -0700

    ref(app-platform): UI for internal app details (#13232)
    
    * ref(app-platform): UI for internal app details

diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index 0ea9bd9f8c..d4a30bd685 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -21,13 +21,19 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             queryset = SentryApp.objects.filter(status=SentryAppStatus.PUBLISHED)
 
         elif status == 'unpublished':
-            if is_active_superuser(request):
-                queryset = SentryApp.objects.filter(
-                    status=SentryAppStatus.UNPUBLISHED
+            queryset = SentryApp.objects.filter(
+                status=SentryAppStatus.UNPUBLISHED,
+            )
+            if not is_active_superuser(request):
+                queryset = queryset.filter(
+                    owner__in=request.user.get_orgs(),
                 )
-            else:
-                queryset = SentryApp.objects.filter(
-                    status=SentryAppStatus.UNPUBLISHED,
+        elif status == 'internal':
+            queryset = SentryApp.objects.filter(
+                status=SentryAppStatus.INTERNAL,
+            )
+            if not is_active_superuser(request):
+                queryset = queryset.filter(
                     owner__in=request.user.get_orgs(),
                 )
         else:
diff --git a/src/sentry/api/serializers/models/sentry_app.py b/src/sentry/api/serializers/models/sentry_app.py
index 76c5d21e5e..260c616e47 100644
--- a/src/sentry/api/serializers/models/sentry_app.py
+++ b/src/sentry/api/serializers/models/sentry_app.py
@@ -29,13 +29,22 @@ class SentryAppSerializer(Serializer):
         if is_active_superuser(env.request) or (
             hasattr(user, 'get_orgs') and obj.owner in user.get_orgs()
         ):
-            data.update({
-                'clientId': obj.application.client_id,
-                'clientSecret': obj.application.client_secret,
-                'owner': {
-                    'id': obj.owner.id,
-                    'slug': obj.owner.slug,
-                },
-            })
+            if obj.is_internal:
+                install = obj.installations.first()
+                data.update({
+                    'installation': {
+                        'uuid': install.uuid,
+                    },
+                    'token': install.api_token.token,
+                })
+            else:
+                data.update({
+                    'clientId': obj.application.client_id,
+                    'clientSecret': obj.application.client_secret,
+                    'owner': {
+                        'id': obj.owner.id,
+                        'slug': obj.owner.slug,
+                    },
+                })
 
         return data
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 35d068c6e0..740887e48c 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -143,6 +143,14 @@ class SentryApp(ParanoidModel, HasApiScopes):
     def is_published(self):
         return self.status == SentryAppStatus.PUBLISHED
 
+    @property
+    def is_unpublished(self):
+        return self.status == SentryAppStatus.UNPUBLISHED
+
+    @property
+    def is_internal(self):
+        return self.status == SentryAppStatus.INTERNAL
+
     def save(self, *args, **kwargs):
         self._set_slug()
         self.date_updated = timezone.now()
diff --git a/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx b/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
index a2d91704e4..e26f16f3a8 100644
--- a/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
+++ b/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
@@ -1,11 +1,24 @@
 import React from 'react';
-import {tct} from 'app/locale';
+import {t, tct} from 'app/locale';
+
+const INTERNAL_OPTION_DISABLED_REASON = t(
+  "This option can't be changed once selected. Please make a new integration if you no longer want it to be internal."
+);
 
 const forms = [
   {
     // Form "section"/"panel"
     title: 'Integration Details',
     fields: [
+      {
+        name: 'isInternal',
+        label: 'Internal',
+        type: 'boolean',
+        disabled: ({statusDisabled}) => statusDisabled,
+        disabledReason: INTERNAL_OPTION_DISABLED_REASON,
+        help:
+          'If enabled, your integration will automatically be installed and for use within your organization only.',
+      },
       {
         name: 'name',
         type: 'string',
@@ -43,7 +56,7 @@ const forms = [
         type: 'boolean',
         label: 'Alert Rule Action',
         help: tct(
-          'If enabled, this application will be an action under alert rules in Sentry. The notification destination is the Webhook URL specified above. More on actions [learn_more:Here].',
+          'If enabled, this integration will be an action under alert rules in Sentry. The notification destination is the Webhook URL specified above. More on actions [learn_more:Here].',
           {
             learn_more: (
               <a href="https://docs.sentry.io/product/notifications/#actions" />
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
index 2bcedc5972..75dcec6d0b 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
@@ -91,7 +91,7 @@ export default class SentryApplicationDetails extends AsyncView {
     const {app} = this.state;
     const scopes = (app && [...app.scopes]) || [];
     const events = (app && this.normalize(app.events)) || [];
-
+    const statusDisabled = app && app.status == 'internal' ? true : false;
     const method = app ? 'PUT' : 'POST';
     const endpoint = app ? `/sentry-apps/${app.slug}/` : '/sentry-apps/';
 
@@ -105,6 +105,7 @@ export default class SentryApplicationDetails extends AsyncView {
           initialData={{
             organization: orgId,
             isAlertable: false,
+            isInternal: app && app.status == 'internal' ? true : false,
             schema: {},
             scopes: [],
             ...app,
@@ -112,35 +113,65 @@ export default class SentryApplicationDetails extends AsyncView {
           model={this.form}
           onSubmitSuccess={this.onSubmitSuccess}
         >
-          <JsonForm location={this.props.location} forms={sentryApplicationForm} />
+          <JsonForm
+            additionalFieldProps={{statusDisabled}}
+            location={this.props.location}
+            forms={sentryApplicationForm}
+          />
 
           <PermissionsObserver scopes={scopes} events={events} />
 
           {app && (
             <Panel>
               <PanelHeader>{t('Credentials')}</PanelHeader>
-              <PanelBody>
-                <FormField name="clientId" label="Client ID" overflow>
-                  {({value}) => {
-                    return (
-                      <TextCopyInput>
-                        {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
-                      </TextCopyInput>
-                    );
-                  }}
-                </FormField>
-                <FormField overflow name="clientSecret" label="Client Secret">
-                  {({value}) => {
-                    return value ? (
-                      <TextCopyInput>
-                        {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
-                      </TextCopyInput>
-                    ) : (
-                      <em>hidden</em>
-                    );
-                  }}
-                </FormField>
-              </PanelBody>
+              {app.status == 'internal' ? (
+                <PanelBody>
+                  <FormField name="token" label="Token" overflow>
+                    {({value}) => {
+                      return (
+                        <TextCopyInput>
+                          {getDynamicText({value, fixed: 'PERCY_ACCESS_TOKEN'})}
+                        </TextCopyInput>
+                      );
+                    }}
+                  </FormField>
+                  <FormField overflow name="installation" label="Installation ID">
+                    {({value}) => {
+                      return (
+                        <TextCopyInput>
+                          {getDynamicText({
+                            value: value.uuid,
+                            fixed: 'PERCY_INSTALLATION_ID',
+                          })}
+                        </TextCopyInput>
+                      );
+                    }}
+                  </FormField>
+                </PanelBody>
+              ) : (
+                <PanelBody>
+                  <FormField name="clientId" label="Client ID" overflow>
+                    {({value}) => {
+                      return (
+                        <TextCopyInput>
+                          {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
+                        </TextCopyInput>
+                      );
+                    }}
+                  </FormField>
+                  <FormField overflow name="clientSecret" label="Client Secret">
+                    {({value}) => {
+                      return value ? (
+                        <TextCopyInput>
+                          {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
+                        </TextCopyInput>
+                      ) : (
+                        <em>hidden</em>
+                      );
+                    }}
+                  </FormField>
+                </PanelBody>
+              )}
             </Panel>
           )}
         </Form>
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index 24e04d9cb5..32ee2f356e 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -82,6 +82,7 @@ describe('Sentry Application Details', function() {
         webhookUrl: 'https://webhook.com',
         scopes: observable(['member:read', 'member:admin', 'event:read', 'event:admin']),
         events: observable(['issue']),
+        isInternal: false,
         isAlertable: true,
         schema: {},
       };
@@ -96,17 +97,11 @@ describe('Sentry Application Details', function() {
     });
   });
 
-  describe('editing an existing Sentry App', () => {
+  describe('Renders for non-internal apps', function() {
     beforeEach(() => {
       sentryApp = TestStubs.SentryApp();
       sentryApp.events = ['issue'];
 
-      editAppRequest = Client.addMockResponse({
-        url: `/sentry-apps/${sentryApp.slug}/`,
-        method: 'PUT',
-        body: [],
-      });
-
       Client.addMockResponse({
         url: `/sentry-apps/${sentryApp.slug}/`,
         body: sentryApp,
@@ -118,19 +113,72 @@ describe('Sentry Application Details', function() {
       );
     });
 
-    it('it shows application data and credentials', function() {
+    it('it shows application data', function() {
       // data should be filled out
       expect(wrapper.find('PermissionsObserver').prop('scopes')).toEqual([
         'project:read',
       ]);
+    });
+
+    it('renders clientId and clientSecret for non-internal apps', function() {
+      expect(wrapper.find('#clientId').exists()).toBe(true);
+      expect(wrapper.find('#clientSecret').exists()).toBe(true);
+    });
+  });
+
+  describe('Renders for internal apps', () => {
+    beforeEach(() => {
+      sentryApp = TestStubs.SentryApp({
+        status: 'internal',
+        installation: {uuid: 'xxxxxx'},
+        token: 'xxxx',
+      });
+      sentryApp.events = ['issue'];
+
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/`,
+        body: sentryApp,
+      });
 
-      // 'Credentials' should be last PanelHeader when editing an application.
+      wrapper = mount(
+        <SentryApplicationDetails params={{appSlug: sentryApp.slug, orgId}} />,
+        TestStubs.routerContext()
+      );
+    });
+    it('has internal option disabled', function() {
       expect(
         wrapper
-          .find('PanelHeader')
-          .last()
-          .text()
-      ).toBe('Credentials');
+          .find('Field[name="isInternal"]')
+          .find('FieldControl')
+          .prop('disabled')
+      ).toBe(true);
+    });
+    it('shows installationId and token', function() {
+      expect(wrapper.find('#installation').exists()).toBe(true);
+      expect(wrapper.find('#token').exists()).toBe(true);
+    });
+  });
+
+  describe('Editing an existing Sentry App', () => {
+    beforeEach(() => {
+      sentryApp = TestStubs.SentryApp();
+      sentryApp.events = ['issue'];
+
+      editAppRequest = Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/`,
+        method: 'PUT',
+        body: [],
+      });
+
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/`,
+        body: sentryApp,
+      });
+
+      wrapper = mount(
+        <SentryApplicationDetails params={{appSlug: sentryApp.slug, orgId}} />,
+        TestStubs.routerContext()
+      );
     });
 
     it('it updates app with correct data', function() {
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 4a156d7b64..bd6f9aa1e5 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -16,6 +16,7 @@ class SentryAppsTest(APITestCase):
         self.user = self.create_user(email='boop@example.com')
         self.org = self.create_organization(owner=self.user)
         self.super_org = self.create_organization(owner=self.superuser)
+        self.internal_org = self.create_organization(owner=self.user)
 
         self.published_app = self.create_sentry_app(
             name='Test',
@@ -35,6 +36,13 @@ class SentryAppsTest(APITestCase):
             webhook_url='https://example.com',
         )
 
+        self.create_project(organization=self.internal_org)
+        self.internal_app = self.create_internal_integration(
+            name='Internal',
+            organization=self.internal_org,
+        )
+        self.install = self.internal_app.installations.first()
+
         self.url = reverse('sentry-api-0-sentry-apps')
 
 
@@ -76,6 +84,75 @@ class GetSentryAppsTest(SentryAppsTest):
             }
         } in json.loads(response.content)
 
+    def test_users_filter_on_internal_apps(self):
+        self.login_as(user=self.user)
+        url = u'{}?status=internal'.format(self.url)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200
+        assert {
+            'name': self.internal_app.name,
+            'author': self.internal_app.author,
+            'slug': self.internal_app.slug,
+            'scopes': [],
+            'events': [],
+            'status': self.internal_app.get_status_display(),
+            'uuid': self.internal_app.uuid,
+            'webhookUrl': self.internal_app.webhook_url,
+            'redirectUrl': self.internal_app.redirect_url,
+            'isAlertable': self.internal_app.is_alertable,
+            'overview': self.internal_app.overview,
+            'schema': {},
+            'installation': {
+                'uuid': self.install.uuid,
+            },
+            'token': self.install.api_token.token
+        } in json.loads(response.content)
+
+        response_uuids = set(o['uuid'] for o in response.data)
+        assert self.published_app.uuid not in response_uuids
+        assert self.unpublished_app.uuid not in response_uuids
+        assert self.unowned_unpublished_app.uuid not in response_uuids
+
+    def test_superusers_filter_on_internal_apps(self):
+        new_org = self.create_organization()
+        self.create_project(organization=new_org)
+
+        internal_app = self.create_internal_integration(
+            name='Internal Nosee',
+            organization=new_org,
+        )
+
+        self.login_as(user=self.superuser, superuser=True)
+        url = u'{}?status=internal'.format(self.url)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200
+        assert {
+            'name': self.internal_app.name,
+            'author': self.internal_app.author,
+            'slug': self.internal_app.slug,
+            'scopes': [],
+            'events': [],
+            'status': self.internal_app.get_status_display(),
+            'uuid': self.internal_app.uuid,
+            'webhookUrl': self.internal_app.webhook_url,
+            'redirectUrl': self.internal_app.redirect_url,
+            'isAlertable': self.internal_app.is_alertable,
+            'overview': self.internal_app.overview,
+            'schema': {},
+            'installation': {
+                'uuid': self.install.uuid,
+            },
+            'token': self.install.api_token.token
+        } in json.loads(response.content)
+
+        response_uuids = set(o['uuid'] for o in response.data)
+        assert internal_app.uuid in response_uuids
+        assert self.published_app.uuid not in response_uuids
+        assert self.unpublished_app.uuid not in response_uuids
+        assert self.unowned_unpublished_app.uuid not in response_uuids
+
     def test_superuser_filter_on_published(self):
         self.login_as(user=self.superuser, superuser=True)
         url = u'{}?status=published'.format(self.url)
@@ -149,16 +226,16 @@ class GetSentryAppsTest(SentryAppsTest):
         assert self.published_app.uuid not in response_uuids
         assert self.unowned_unpublished_app.uuid not in response_uuids
 
-        def test_user_filter_on_published(self):
-            self.login_as(user=self.user)
-            url = u'{}?status=published'.format(self.url)
-            response = self.client.get(url, format='json')
+    def test_user_filter_on_published(self):
+        self.login_as(user=self.user)
+        url = u'{}?status=published'.format(self.url)
+        response = self.client.get(url, format='json')
 
-            assert response.status_code == 200
-            response_uuids = set(o['uuid'] for o in response.data)
-            assert self.published_app.uuid in response_uuids
-            assert self.unpublished_app not in response_uuids
-            assert self.unowned_unpublished_app.uuid not in response_uuids
+        assert response.status_code == 200
+        response_uuids = set(o['uuid'] for o in response.data)
+        assert self.published_app.uuid in response_uuids
+        assert self.unpublished_app not in response_uuids
+        assert self.unowned_unpublished_app.uuid not in response_uuids
 
     def test_users_dont_see_unpublished_apps_their_org_owns(self):
         self.login_as(user=self.user)
@@ -180,6 +257,21 @@ class GetSentryAppsTest(SentryAppsTest):
             a['uuid'] for a in response.data
         ]
 
+    def test_users_dont_see_internal_apps_outside_their_orgs(self):
+        new_org = self.create_organization()
+        self.create_project(organization=new_org)
+
+        internal_app = self.create_internal_integration(
+            name='Internal Nosee',
+            organization=new_org,
+        )
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.url, format='json')
+        assert internal_app.uuid not in [
+            a['uuid'] for a in response.data
+        ]
+
 
 class PostSentryAppsTest(SentryAppsTest):
     @with_feature('organizations:sentry-apps')
diff --git a/tests/sentry/models/test_sentryapp.py b/tests/sentry/models/test_sentryapp.py
index d829d67700..8930ba22d1 100644
--- a/tests/sentry/models/test_sentryapp.py
+++ b/tests/sentry/models/test_sentryapp.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from sentry.constants import SentryAppStatus
 from sentry.testutils import TestCase
 from sentry.models import ApiApplication, SentryApp
 
@@ -41,3 +42,18 @@ class SentryAppTest(TestCase):
         assert self.sentry_app.application.sentry_app == self.sentry_app
         assert self.sentry_app.proxy_user.sentry_app == self.sentry_app
         assert self.sentry_app in self.sentry_app.owner.owned_sentry_apps.all()
+
+    def test_is_unpublished(self):
+        self.sentry_app.status = SentryAppStatus.UNPUBLISHED
+        self.sentry_app.save()
+        assert self.sentry_app.is_unpublished
+
+    def test_is_published(self):
+        self.sentry_app.status = SentryAppStatus.PUBLISHED
+        self.sentry_app.save()
+        assert self.sentry_app.is_published
+
+    def test_is_internal(self):
+        self.sentry_app.status = SentryAppStatus.INTERNAL
+        self.sentry_app.save()
+        assert self.sentry_app.is_internal
