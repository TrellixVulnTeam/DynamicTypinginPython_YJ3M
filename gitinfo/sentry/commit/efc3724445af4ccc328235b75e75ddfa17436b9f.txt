commit efc3724445af4ccc328235b75e75ddfa17436b9f
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 16 22:44:09 2012 -0700

    Full coverage for create team and list teams

diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index 72e2434dae..64261e076c 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -2,7 +2,7 @@
 
 from __future__ import absolute_import
 
-import logging
+import mock
 
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
@@ -11,32 +11,41 @@ from sentry.models import Team, MEMBER_OWNER
 
 from tests.base import TestCase
 
-logger = logging.getLogger(__name__)
 
-
-class NewProjectTest(TestCase):
+class BaseTeamTest(TestCase):
     fixtures = ['tests/fixtures/views.json']
 
     def setUp(self):
-        self.user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
-        self.user.set_password('admin')
+        self.user = User(username="user", email="admin@localhost", is_staff=False, is_superuser=False)
+        self.user.set_password('user')
         self.user.save()
         self.team = Team.objects.create(name='foo', slug='foo', owner=self.user)
+        self.client.login(username='user', password='user')
+
+
+class TeamListTest(BaseTeamTest):
+    def test_loads(self):
+        resp = self.client.post(reverse('sentry-team-list'))
+        self.assertEquals(resp.status_code, 200)
 
-    def test_new_team(self):
-        path = reverse('sentry-new-team')
 
-        self.client.login(username='admin', password='admin')
+class NewTeamTest(BaseTeamTest):
+    @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=False))
+    def test_missing_permission(self):
+        resp = self.client.post(reverse('sentry-new-team'))
+        self.assertEquals(resp.status_code, 302)
+        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry'))
 
-        # missing name
-        resp = self.client.post(path)
+    @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=True))
+    def test_missing_params(self):
+        resp = self.client.post(reverse('sentry-new-team'))
         self.assertEquals(resp.status_code, 200)
 
-        # valid params
-        resp = self.client.post(path, {
+    @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=True))
+    def test_valid_params(self):
+        resp = self.client.post(reverse('sentry-new-team'), {
             'name': 'Test Team',
             'slug': 'test',
-            'owner': 'admin',
         })
         self.assertNotEquals(resp.status_code, 200)
 
@@ -52,3 +61,28 @@ class NewProjectTest(TestCase):
         member = member_set[0]
         self.assertEquals(member.user, self.user)
         self.assertEquals(member.type, MEMBER_OWNER)
+
+    @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=True))
+    @mock.patch('django.contrib.auth.models.User.has_perm', mock.Mock(return_value=True))
+    def test_superuser_can_set_owner(self):
+        user = User.objects.create(username="other", email="other@localhost")
+
+        resp = self.client.post(reverse('sentry-new-team'), {
+            'name': 'Test Team',
+            'slug': 'test',
+            'owner': 'other',
+        })
+        self.assertNotEquals(resp.status_code, 200)
+
+        team = Team.objects.filter(name='Test Team')
+        self.assertTrue(team.exists())
+        team = team.get()
+
+        self.assertEquals(team.owner, user)
+
+        member_set = list(team.member_set.all())
+
+        self.assertEquals(len(member_set), 1)
+        member = member_set[0]
+        self.assertEquals(member.user, user)
+        self.assertEquals(member.type, MEMBER_OWNER)
