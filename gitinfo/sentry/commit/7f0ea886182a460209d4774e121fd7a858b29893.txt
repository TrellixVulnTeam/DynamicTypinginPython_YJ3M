commit 7f0ea886182a460209d4774e121fd7a858b29893
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Aug 24 10:37:57 2018 -0700

    fix(discover): Fix multi select field (#9500)
    
    Use SelectControl instead of SelectField which is better for controlled components without a form
    
    Add tests for reset()

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 69a816363b..0400bf78ce 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -8,9 +8,9 @@ import {addErrorMessage} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
 import Button from 'app/components/buttons/button';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
-import MultiSelectField from 'app/components/forms/multiSelectField';
 import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
 import NumberField from 'app/components/forms/numberField';
+import SelectControl from 'app/components/forms/selectControl';
 import SelectField from 'app/components/forms/selectField';
 import SentryTypes from 'app/sentryTypes';
 import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
@@ -225,13 +225,16 @@ export default class OrganizationDiscover extends React.Component {
         <Flex px={2}>
           <Box w={[1 / 3, 1 / 3, 1 / 3, 1 / 4]}>
             <Fieldset>
-              <MultiSelectField
+              <label htmlFor="fields" className="control-label">
+                {t('Summarize')}
+              </label>
+              <SelectControl
                 name="fields"
-                label={t('Summarize')}
+                multiple={true}
                 placeholder={this.getSummarizePlaceholder()}
                 options={fieldOptions}
                 value={query.fields}
-                onChange={val => this.updateField('fields', val)}
+                onChange={val => this.updateField('fields', val.map(({value}) => value))}
               />
             </Fieldset>
             <Fieldset>
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 80d78cb8ae..2aaca996ad 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -99,4 +99,48 @@ describe('Discover', function() {
       });
     });
   });
+
+  describe('reset', function() {
+    let wrapper, queryBuilder;
+    beforeEach(function() {
+      const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
+      queryBuilder = createQueryBuilder({}, organization);
+      queryBuilder.fetch = jest.fn(() => Promise.resolve());
+
+      wrapper = mount(
+        <Discover queryBuilder={queryBuilder} organization={organization} />,
+        TestStubs.routerContext()
+      );
+
+      wrapper.instance().updateField('fields', ['message']);
+      wrapper.instance().updateField('orderby', 'event_id');
+      wrapper.instance().updateField('limit', 5);
+
+      wrapper.instance().runQuery();
+      wrapper.update();
+    });
+
+    it('resets "fields"', function() {
+      const fields = wrapper.find('SelectControl[name="fields"]');
+      expect(fields.text()).toContain('message');
+      wrapper.instance().reset();
+      expect(fields.text()).toContain('No fields selected');
+    });
+
+    it('resets "orderby"', function() {
+      expect(wrapper.find('SelectField[name="orderby"]').prop('value')).toBe('event_id');
+      wrapper.instance().reset();
+      wrapper.update();
+      expect(wrapper.find('SelectField[name="orderby"]').prop('value')).toBe(
+        '-timestamp'
+      );
+    });
+
+    it('resets "limit"', function() {
+      expect(wrapper.find('NumberField[name="limit"]').prop('value')).toBe(5);
+      wrapper.instance().reset();
+      wrapper.update();
+      expect(wrapper.find('NumberField[name="limit"]').prop('value')).toBe(1000);
+    });
+  });
 });
