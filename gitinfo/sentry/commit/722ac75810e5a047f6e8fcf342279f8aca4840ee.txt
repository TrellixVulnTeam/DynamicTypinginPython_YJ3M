commit 722ac75810e5a047f6e8fcf342279f8aca4840ee
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Jan 2 16:05:56 2020 -0800

    chore(ts): Convert settings navigations (#16227)

diff --git a/src/sentry/static/sentry/app/components/badge.tsx b/src/sentry/static/sentry/app/components/badge.tsx
index 38df65496c..17371b877d 100644
--- a/src/sentry/static/sentry/app/components/badge.tsx
+++ b/src/sentry/static/sentry/app/components/badge.tsx
@@ -11,7 +11,7 @@ const priorityColors = {
 } as const;
 
 type Props = React.HTMLProps<HTMLSpanElement> & {
-  text?: string | number;
+  text?: string | number | null;
   priority?: keyof typeof priorityColors;
   className?: string;
 };
diff --git a/src/sentry/static/sentry/app/types/hooks.ts b/src/sentry/static/sentry/app/types/hooks.ts
index 8ba70d7b51..eb75d7ff81 100644
--- a/src/sentry/static/sentry/app/types/hooks.ts
+++ b/src/sentry/static/sentry/app/types/hooks.ts
@@ -1,4 +1,6 @@
 import {Route} from 'react-router';
+
+import {NavigationSection} from 'app/views/settings/types';
 import {
   User,
   Organization,
@@ -118,7 +120,7 @@ export type OnboardingHooks = {
  * Settings navigation hooks.
  */
 export type SettingsHooks = {
-  'settings:organization-navigation': GenericOrganizationComponentHook;
+  'settings:organization-navigation': OrganizationSettingsHook;
   'settings:organization-navigation-config': SettingsConfigHook;
 };
 
@@ -253,29 +255,27 @@ type MetricsEvent = (
   tags?: object
 ) => void;
 
+/**
+ * Provides additional navigation components
+ */
+type OrganizationSettingsHook = (organization: Organization) => React.ReactElement;
+
 /**
  * Provides additional setting configurations
- *
- * TODO(ts): The returned object should come from a settings configuration type
- * once we convert settings configurations into typescript.
  */
-type SettingsConfigHook = (opts: {
-  organization: Organization;
-}) => {
-  name: string;
-  items: object[];
-};
+type SettingsConfigHook = (organization: Organization) => NavigationSection;
 
 /**
  * Each sidebar label is wrapped with this hook, to allow sidebar item
  * augmentation.
  */
-type SidebarItemLabelHook = (opts: {
+type SidebarItemLabelHook = () => React.ComponentType<{
   /**
-   * The key of the item label currently being rendered.
+   * The key of the item label currently being rendered. If no id is provided
+   * the hook will have no effect.
    */
-  id: string;
-}) => React.ReactNode;
+  id?: string;
+}>;
 
 /**
  * Returns an additional list of sidebar items.
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index aeb525f62c..525e382ff4 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -101,6 +101,10 @@ export type Project = {
   hasUserReports?: boolean;
   hasAccess: boolean;
   platform: string;
+
+  // XXX: These are part of the DetailedProject serializer
+  plugins: Plugin[];
+  processingIssues: number;
 };
 
 export type Team = {
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.jsx
rename to src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.tsx
similarity index 95%
rename from src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
rename to src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.tsx
index 1307aaade4..11b037e300 100644
--- a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.tsx
@@ -1,8 +1,9 @@
 import {t} from 'app/locale';
+import {NavigationSection} from 'app/views/settings/types';
 
 const pathPrefix = '/settings/account';
 
-const accountNavigation = [
+const accountNavigation: NavigationSection[] = [
   {
     name: t('Account'),
     items: [
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.tsx
similarity index 53%
rename from src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx
rename to src/sentry/static/sentry/app/views/settings/components/settingsNavItem.tsx
index 67af6380b3..b9dc3be676 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.tsx
@@ -1,5 +1,4 @@
 import {Link} from 'react-router';
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
@@ -7,45 +6,37 @@ import Badge from 'app/components/badge';
 import HookOrDefault from 'app/components/hookOrDefault';
 import Tag from 'app/views/settings/components/tag';
 
-class SettingsNavItem extends React.Component {
-  static propTypes = {
-    label: PropTypes.node.isRequired,
-    badge: PropTypes.node,
-    index: PropTypes.bool,
-    id: PropTypes.string,
-  };
-
-  render() {
-    const {badge, label, index, id, ...props} = this.props;
-
-    const LabelHook = HookOrDefault({
-      hookName: 'sidebar:item-label',
-      defaultComponent: ({children}) => {
-        return <React.Fragment>{children}</React.Fragment>;
-      },
-    });
-
-    let renderedBadge = '';
-
-    if (badge === 'new') {
-      renderedBadge = (
-        <StyledTag priority="warning" size="small" border>
-          {badge}
-        </StyledTag>
-      );
-    } else {
-      renderedBadge = <Badge text={badge} />;
-    }
+type Props = {
+  to: React.ComponentProps<Link>['to'];
+  label: React.ReactNode;
+  badge?: string | number | null;
+  index?: boolean;
+  id?: string;
+};
+
+const SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {
+  const LabelHook = HookOrDefault({
+    hookName: 'sidebar:item-label',
+    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,
+  });
+
+  const renderedBadge =
+    badge === 'new' ? (
+      <StyledTag priority="warning" size="small" border>
+        {badge}
+      </StyledTag>
+    ) : (
+      <Badge text={badge} />
+    );
 
-    return (
-      <StyledNavItem onlyActiveOnIndex={index} activeClassName="active" {...props}>
-        <LabelHook id={id}>{label}</LabelHook>
+  return (
+    <StyledNavItem onlyActiveOnIndex={index} activeClassName="active" {...props}>
+      <LabelHook id={id}>{label}</LabelHook>
 
-        {badge ? renderedBadge : null}
-      </StyledNavItem>
-    );
-  }
-}
+      {badge ? renderedBadge : null}
+    </StyledNavItem>
+  );
+};
 
 const StyledTag = styled(Tag)`
   margin-left: 0.25em;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.tsx
similarity index 56%
rename from src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
rename to src/sentry/static/sentry/app/views/settings/components/settingsNavigation.tsx
index 4de7f9c0fd..7de520bd2f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.tsx
@@ -1,24 +1,31 @@
 import * as Sentry from '@sentry/browser';
-import {Box} from 'grid-emotion';
-import PropTypes from 'prop-types';
 import React from 'react';
 
 import SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';
-import SentryTypes from 'app/sentryTypes';
+import {NavigationSection, NavigationProps} from 'app/views/settings/types';
 
-class SettingsNavigation extends React.Component {
-  static propTypes = {
-    hooks: PropTypes.array,
-    hookConfigs: PropTypes.array,
-    navigationObjects: PropTypes.arrayOf(SentryTypes.NavigationObject).isRequired,
-  };
+type Props = NavigationProps & {
+  /**
+   * The configuration for this navigation panel
+   */
+  navigationObjects: NavigationSection[];
+  /**
+   * Additional navigation configuration driven by hooks
+   */
+  hookConfigs: NavigationSection[];
+  /**
+   * Additional navigation elements driven from hooks
+   */
+  hooks: React.ReactElement[];
+};
 
+class SettingsNavigation extends React.Component<Props> {
   static defaultProps = {
     hooks: [],
     hookConfigs: [],
   };
 
-  componentDidCatch(error, errorInfo) {
+  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
     Sentry.withScope(scope => {
       Object.keys(errorInfo).forEach(key => {
         scope.setExtra(key, errorInfo[key]);
@@ -33,16 +40,12 @@ class SettingsNavigation extends React.Component {
     const navWithHooks = navigationObjects.concat(hookConfigs);
 
     return (
-      <Box>
+      <div>
         {navWithHooks.map(config => (
           <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />
         ))}
-        {hooks.map((Hook, i) =>
-          React.cloneElement(Hook, {
-            key: `hook-${i}`,
-          })
-        )}
-      </Box>
+        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}
+      </div>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
deleted file mode 100644
index 05abf5fea5..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
+++ /dev/null
@@ -1,71 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import SentryTypes from 'app/sentryTypes';
-import SettingsNavItem from 'app/views/settings/components/settingsNavItem';
-import replaceRouterParams from 'app/utils/replaceRouterParams';
-
-const NavSection = styled('div')`
-  margin-bottom: 20px;
-`;
-
-const SettingsHeading = styled('div')`
-  color: ${p => p.theme.gray3};
-  font-size: 12px;
-  font-weight: 600;
-  text-transform: uppercase;
-  margin-bottom: 20px;
-`;
-
-export default class NavigationGroup extends React.Component {
-  static propTypes = {
-    ...SentryTypes.NavigationGroup,
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-
-    // Used in the `show` and `badge` function
-    access: PropTypes.object, // eslint-disable-line react/no-unused-prop-types
-    features: PropTypes.object, // eslint-disable-line react/no-unused-prop-types
-    id: PropTypes.string, // eslint-disable-line react/no-unused-prop-types
-  };
-
-  static contextTypes = {
-    router: PropTypes.object,
-    location: PropTypes.object,
-  };
-
-  render() {
-    const {organization, project, name, items} = this.props;
-
-    return (
-      <NavSection data-test-id={name}>
-        <SettingsHeading>{name}</SettingsHeading>
-        {items.map(({path, title, index, show, badge, id}) => {
-          if (typeof show === 'function' && !show(this.props)) {
-            return null;
-          }
-          if (typeof show !== 'undefined' && !show) {
-            return null;
-          }
-          const badgeResult = typeof badge === 'function' ? badge(this.props) : null;
-          const to = replaceRouterParams(path, {
-            orgId: organization && organization.slug,
-            projectId: project && project.slug,
-          });
-
-          return (
-            <SettingsNavItem
-              key={title}
-              to={to}
-              label={title}
-              index={index}
-              badge={badgeResult}
-              id={id}
-            />
-          );
-        })}
-      </NavSection>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.tsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.tsx
new file mode 100644
index 0000000000..ef470e05cd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.tsx
@@ -0,0 +1,54 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import SettingsNavItem from 'app/views/settings/components/settingsNavItem';
+import replaceRouterParams from 'app/utils/replaceRouterParams';
+import {NavigationGroupProps} from 'app/views/settings/types';
+
+const SettingsNavigationGroup = (props: NavigationGroupProps) => {
+  const {organization, project, name, items} = props;
+
+  return (
+    <NavSection data-test-id={name}>
+      <SettingsHeading>{name}</SettingsHeading>
+      {items.map(({path, title, index, show, badge, id}) => {
+        if (typeof show === 'function' && !show(props)) {
+          return null;
+        }
+        if (typeof show !== 'undefined' && !show) {
+          return null;
+        }
+        const badgeResult = typeof badge === 'function' ? badge(props) : null;
+        const to = replaceRouterParams(path, {
+          ...(organization ? {orgId: organization.slug} : {}),
+          ...(project ? {projectId: project.slug} : {}),
+        });
+
+        return (
+          <SettingsNavItem
+            key={title}
+            to={to}
+            label={title}
+            index={index}
+            badge={badgeResult}
+            id={id}
+          />
+        );
+      })}
+    </NavSection>
+  );
+};
+
+const NavSection = styled('div')`
+  margin-bottom: 20px;
+`;
+
+const SettingsHeading = styled('div')`
+  color: ${p => p.theme.gray3};
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+`;
+
+export default SettingsNavigationGroup;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
rename to src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
index b22d21a5a9..2552e4aef8 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
@@ -1,8 +1,9 @@
 import {t} from 'app/locale';
+import {NavigationSection} from 'app/views/settings/types';
 
 const pathPrefix = '/settings/:orgId';
 
-const organizationNavigation = [
+const organizationNavigation: NavigationSection[] = [
   {
     name: t('Organization'),
     items: [
@@ -28,7 +29,7 @@ const organizationNavigation = [
       {
         path: `${pathPrefix}/members/`,
         title: t('Members'),
-        show: ({access}) => access.has('member:read'),
+        show: ({access}) => access!.has('member:read'),
         description: t('Manage user membership for an organization'),
         id: 'members',
       },
@@ -41,13 +42,14 @@ const organizationNavigation = [
       {
         path: `${pathPrefix}/api-keys/`,
         title: t('API Keys'),
-        show: ({access, features}) => features.has('api-keys') && access.has('org:admin'),
+        show: ({access, features}) =>
+          features!.has('api-keys') && access!.has('org:admin'),
         id: 'api-keys',
       },
       {
         path: `${pathPrefix}/audit-log/`,
         title: t('Audit Log'),
-        show: ({access}) => access.has('org:write'),
+        show: ({access}) => access!.has('org:write'),
         description: t('View the audit log for an organization'),
         id: 'audit-log',
       },
@@ -55,7 +57,7 @@ const organizationNavigation = [
         path: `${pathPrefix}/rate-limits/`,
         title: t('Rate Limits'),
         show: ({access, features}) =>
-          features.has('legacy-rate-limits') && access.has('org:write'),
+          features!.has('legacy-rate-limits') && access!.has('org:write'),
         description: t('Configure rate limits for all projects in the organization'),
         id: 'rate-limits',
       },
@@ -82,5 +84,4 @@ const organizationNavigation = [
     ],
   },
 ];
-
 export default organizationNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.tsx
similarity index 51%
rename from src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
rename to src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.tsx
index e7f6ab3da1..311535b765 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.tsx
@@ -1,20 +1,40 @@
 import Reflux from 'reflux';
 import React from 'react';
-
 import createReactClass from 'create-react-class';
 
+import SentryTypes from 'app/sentryTypes';
 import HookStore from 'app/stores/hookStore';
 import SettingsNavigation from 'app/views/settings/components/settingsNavigation';
 import navigationConfiguration from 'app/views/settings/organization/navigationConfiguration';
 import withOrganization from 'app/utils/withOrganization';
-import SentryTypes from 'app/sentryTypes';
+import {Organization} from 'app/types';
+import {HookName, Hooks} from 'app/types/hooks';
+import {NavigationSection} from 'app/views/settings/types';
+
+type Props = {
+  organization: Organization;
+};
+
+type State = {
+  hookConfigs: NavigationSection[];
+  hooks: React.ReactElement[];
+};
 
-const OrganizationSettingsNavigation = createReactClass({
+const OrganizationSettingsNavigation = createReactClass<Props, State>({
   displayName: 'OrganizationSettingsNavigation',
   propTypes: {
     organization: SentryTypes.Organization,
   },
-  mixins: [Reflux.listenTo(HookStore, 'handleHooks')],
+
+  /**
+   * TODO(epurkhiser): Becase the settings organization navigation hooks
+   * do not conform to a normal component style hook, and take a single
+   * parameter 'organization', we cannot use the `Hook` component here,
+   * and must resort to using the mixin style HookStore to retrieve hook data.
+   *
+   * We should update the hook interface for the two hooks used here
+   */
+  mixins: [Reflux.listenTo(HookStore, 'handleHooks') as any],
 
   getInitialState() {
     return this.getHooks();
@@ -27,38 +47,38 @@ const OrganizationSettingsNavigation = createReactClass({
 
   getHooks() {
     // Allow injection via getsentry et all
-    const org = this.props.organization;
+    const {organization} = this.props as Props;
 
     return {
       hookConfigs: HookStore.get('settings:organization-navigation-config').map(cb =>
-        cb(org)
+        cb(organization)
+      ),
+      hooks: HookStore.get('settings:organization-navigation').map(cb =>
+        cb(organization)
       ),
-      hooks: HookStore.get('settings:organization-navigation').map(cb => cb(org)),
     };
   },
 
-  handleHooks(name, hooks) {
+  handleHooks(name: HookName, hooks: Hooks['settings:organization-navigation-config'][]) {
     const org = this.props.organization;
     if (name !== 'settings:organization-navigation-config') {
       return;
     }
-    this.setState(state => ({
-      hookConfigs: hooks.map(cb => cb(org)),
-    }));
+    this.setState({hookConfigs: hooks.map(cb => cb(org))});
   },
 
   render() {
-    const org = this.props.organization;
-    const access = new Set(org.access);
-    const features = new Set(org.features);
-    const {hooks, hookConfigs} = this.state;
+    const {hooks, hookConfigs} = this.state as State;
+    const {organization} = this.props as Props;
+    const access = new Set(organization.access);
+    const features = new Set(organization.features);
 
     return (
       <SettingsNavigation
         navigationObjects={navigationConfiguration}
         access={access}
         features={features}
-        organization={org}
+        organization={organization}
         hooks={hooks}
         hookConfigs={hookConfigs}
       />
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
similarity index 89%
rename from src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
rename to src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
index 3e0c3ec2e6..b6df880481 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
@@ -1,8 +1,15 @@
 import {t} from 'app/locale';
+import {NavigationSection} from 'app/views/settings/types';
+import {Organization, Project} from 'app/types';
+
+type ConfigParams = {
+  organization: Organization;
+  project: Project;
+};
 
 const pathPrefix = '/settings/:orgId/projects/:projectId';
 
-export default function getConfiguration({project}) {
+export default function getConfiguration({project}: ConfigParams): NavigationSection[] {
   const plugins = ((project && project.plugins) || []).filter(plugin => plugin.enabled);
   return [
     {
@@ -28,7 +35,7 @@ export default function getConfiguration({project}) {
           path: `${pathPrefix}/alerts-v2/`,
           title: t('Alerts (New)'),
           description: t('Manage alerts and alert rules for a project'),
-          show: ({features}) => features.has('incidents'),
+          show: ({features}) => features!.has('incidents'),
         },
         {
           path: `${pathPrefix}/tags/`,
@@ -58,6 +65,9 @@ export default function getConfiguration({project}) {
           title: t('Processing Issues'),
           // eslint-disable-next-line no-shadow
           badge: ({project}) => {
+            if (!project) {
+              return null;
+            }
             if (project.processingIssues <= 0) {
               return null;
             }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
deleted file mode 100644
index 9e259b82cb..0000000000
--- a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
+++ /dev/null
@@ -1,46 +0,0 @@
-import React from 'react';
-
-import HookStore from 'app/stores/hookStore';
-import SentryTypes from 'app/sentryTypes';
-import SettingsNavigation from 'app/views/settings/components/settingsNavigation';
-import getConfiguration from 'app/views/settings/project/navigationConfiguration';
-import withOrganization from 'app/utils/withOrganization';
-import withProject from 'app/utils/withProject';
-
-class ProjectSettingsNavigation extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-  };
-
-  constructor(props) {
-    super(props);
-    // Allow injection via getsentry et all
-    const org = this.props.organization;
-    const hooks = [];
-    HookStore.get('project:settings-sidebar').forEach(cb => {
-      hooks.push(cb(org));
-    });
-
-    this.state = {
-      hooks,
-    };
-  }
-
-  render() {
-    const {organization, project} = this.props;
-
-    return (
-      <SettingsNavigation
-        navigationObjects={getConfiguration({project, organization})}
-        access={new Set(organization.access)}
-        features={new Set(organization.features)}
-        organization={organization}
-        project={project}
-        hooks={this.state.hooks}
-      />
-    );
-  }
-}
-
-export default withProject(withOrganization(ProjectSettingsNavigation));
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.tsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.tsx
new file mode 100644
index 0000000000..372f4e9e15
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.tsx
@@ -0,0 +1,24 @@
+import React from 'react';
+
+import SettingsNavigation from 'app/views/settings/components/settingsNavigation';
+import getConfiguration from 'app/views/settings/project/navigationConfiguration';
+import withOrganization from 'app/utils/withOrganization';
+import withProject from 'app/utils/withProject';
+import {Organization, Project} from 'app/types';
+
+type Props = {
+  organization: Organization;
+  project: Project;
+};
+
+const ProjectSettingsNavigation = ({organization, project}: Props) => (
+  <SettingsNavigation
+    navigationObjects={getConfiguration({project, organization})}
+    access={new Set(organization.access)}
+    features={new Set(organization.features)}
+    organization={organization}
+    project={project}
+  />
+);
+
+export default withProject(withOrganization(ProjectSettingsNavigation));
diff --git a/src/sentry/static/sentry/app/views/settings/types.ts b/src/sentry/static/sentry/app/views/settings/types.ts
new file mode 100644
index 0000000000..eb6630178d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/types.ts
@@ -0,0 +1,52 @@
+import {Organization, Project} from 'app/types';
+
+export type NavigationProps = {
+  id?: string;
+  organization?: Organization;
+  project?: Project;
+  access?: Set<string>;
+  features?: Set<string>;
+};
+
+export type NavigationGroupProps = NavigationProps & NavigationSection;
+
+export type NavigationItem = {
+  /**
+   * A string identifier for the navigation item. May be used in hooks to
+   * augment navigation items.
+   */
+  id?: string;
+  /**
+   * The path of the navigation link
+   */
+  path: string;
+  /**
+   * The title of the link. This is what will be rendered in the navigation
+   * panel.
+   */
+  title: string;
+  /**
+   * The description of the settings section. This will be used in search.
+   */
+  description?: string;
+  /**
+   * Is this the index settings page for this navigation config.
+   */
+  index?: boolean;
+  /**
+   * Should the navigation item be displayed?
+   */
+  show?: boolean | ((opts: NavigationGroupProps) => boolean);
+  /**
+   * Returns the text of the badge to render next to the navigation.
+   */
+  badge?: (opts: NavigationGroupProps) => string | number | null;
+};
+
+export type NavigationSection = {
+  /**
+   * Heading of the navigation section
+   */
+  name: string;
+  items: NavigationItem[];
+};
