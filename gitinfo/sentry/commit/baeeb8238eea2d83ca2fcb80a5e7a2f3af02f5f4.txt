commit baeeb8238eea2d83ca2fcb80a5e7a2f3af02f5f4
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Jan 22 11:04:31 2019 -0800

    feat(rest_framework): Add JSONField from Django Rest Framework. (#11444)
    
    * Added the rest framework json field.
    
    * Revised jsonfield and added tests.
    
    * revised tests.
    
    * Used sentry utils json instead.
    
    * removed to_native
    
    * Removed binary.:
    
    * Removed init function

diff --git a/src/sentry/api/serializers/rest_framework/json.py b/src/sentry/api/serializers/rest_framework/json.py
new file mode 100644
index 0000000000..924e7206f6
--- /dev/null
+++ b/src/sentry/api/serializers/rest_framework/json.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from django.utils.translation import ugettext_lazy as _
+from rest_framework.serializers import WritableField, ValidationError
+from sentry.utils import json
+
+# JSONField taken from Django rest framework version 3.9.0
+# See https://github.com/encode/django-rest-framework/blob/0eb2dc1137189027cc8d638630fb1754b02d6cfa/rest_framework/fields.py
+# or https://www.django-rest-framework.org/api-guide/fields/#jsonfield
+# for more information
+
+
+class JSONField(WritableField):
+    default_error_messages = {
+        'invalid': _('Value must be valid JSON.')
+    }
+
+    def from_native(self, data):
+        try:
+            json.dumps(data)
+        except (TypeError, ValueError):
+            raise ValidationError(self.default_error_messages['invalid'])
+        return data
diff --git a/tests/sentry/api/serializers/rest_framework/test_json.py b/tests/sentry/api/serializers/rest_framework/test_json.py
new file mode 100644
index 0000000000..fe54af4034
--- /dev/null
+++ b/tests/sentry/api/serializers/rest_framework/test_json.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+from sentry.api.serializers.rest_framework import JSONField
+
+from rest_framework import serializers
+
+from sentry.testutils import TestCase
+
+
+class DummySerializer(serializers.Serializer):
+    json_field = JSONField()
+
+
+class JSONFieldTest(TestCase):
+    def test_invalid_json(self):
+        data = object()
+        serializer = DummySerializer(data={'json_field': data})
+        assert serializer.is_valid() is False
+        assert serializer.errors == {'json_field': [u'Value must be valid JSON.']}
+        assert serializer.object is None
+
+    def test_valid_json(self):
+        data = {
+            'id': '1234',
+            'name': 'json-tester',
+            'actions': [{'say-hello': 'hello world'}, {'say-goodbye': 'bye'}]
+        }
+
+        serializer = DummySerializer(data={'json_field': data})
+        assert serializer.is_valid()
+        assert serializer.object == {
+            'json_field': {
+                'id': '1234',
+                'name': 'json-tester',
+                'actions': [{'say-hello': 'hello world'}, {'say-goodbye': 'bye'}]
+            }
+        }
