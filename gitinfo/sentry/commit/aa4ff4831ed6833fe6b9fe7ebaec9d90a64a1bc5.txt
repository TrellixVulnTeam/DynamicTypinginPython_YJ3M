commit aa4ff4831ed6833fe6b9fe7ebaec9d90a64a1bc5
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 29 12:00:56 2016 -0700

    Add get_participants helper

diff --git a/src/sentry/models/groupsubscription.py b/src/sentry/models/groupsubscription.py
index 913b798115..f897679888 100644
--- a/src/sentry/models/groupsubscription.py
+++ b/src/sentry/models/groupsubscription.py
@@ -36,6 +36,28 @@ class GroupSubscriptionManager(BaseManager):
         except IntegrityError:
             pass
 
+    def get_participants(self, group):
+        """
+        Identify all users who are participating with a given issue.
+        """
+        from sentry.models import User
+
+        # identify all members of a project
+        users = User.objects.filter(
+            sentry_orgmember_set__teams=group.project.team,
+        )
+
+        # TODO(dcramer): allow members to change from default particpating to
+        # explicit
+        users = users.exclude(
+            id__in=GroupSubscription.objects.filter(
+                group=group,
+                is_active=False,
+            ).values('user')
+        )
+
+        return list(users)
+
 
 class GroupSubscription(Model):
     """
diff --git a/tests/sentry/models/test_groupsubscription.py b/tests/sentry/models/test_groupsubscription.py
index 4ca86da884..0fc5307b37 100644
--- a/tests/sentry/models/test_groupsubscription.py
+++ b/tests/sentry/models/test_groupsubscription.py
@@ -18,3 +18,32 @@ class SubscribeTest(TestCase):
 
         # should not error
         GroupSubscription.objects.subscribe(group=group, user=user)
+
+
+class GetParticipantsTest(TestCase):
+    def test_simple(self):
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        project = self.create_project(team=team, organization=org)
+        group = self.create_group(project=project)
+        user = self.create_user('foo@example.com')
+        user2 = self.create_user('bar@example.com')
+        self.create_member(user=user, organization=org, teams=[team])
+        self.create_member(user=user2, organization=org)
+
+        # implicit membership
+        users = GroupSubscription.objects.get_participants(group=group)
+
+        assert users == [user]
+
+        # unsubscribed
+        GroupSubscription.objects.create(
+            user=user,
+            group=group,
+            project=project,
+            is_active=False,
+        )
+
+        users = GroupSubscription.objects.get_participants(group=group)
+
+        assert users == []
