commit 042f8569b2ade76dc93fd449fcf95661fda9ecab
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 26 10:14:56 2017 -0700

    ui: move create organization into react

diff --git a/CHANGES b/CHANGES
index 30e6612c09..eef2fa9de6 100644
--- a/CHANGES
+++ b/CHANGES
@@ -11,6 +11,8 @@ Version 8.18 (Unreleased)
   users imapcted.
 - Add a new option (`auth.allow-registration`) for determining whether registration
   is allowed on an installation.
+- Moved "create organization" into React.
+- Expanded React Form components (Form, ApiForm).
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/static/sentry/app/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
new file mode 100644
index 0000000000..9fc45ac8f9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
@@ -0,0 +1,66 @@
+import React from 'react';
+
+import {Client} from '../../api';
+import IndicatorStore from '../../stores/indicatorStore';
+import Form from './form';
+import FormState from './state';
+import {t} from '../../locale';
+
+class ApiForm extends Form {
+  constructor(props) {
+    super(props);
+    this.api = new Client();
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+  }
+
+  onSubmit(e) {
+    super.onSubmit(e);
+
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        this.api.request(this.props.apiEndpoint, {
+          method: this.props.apiMethod,
+          data: this.state.formData,
+          success: data => {
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+            this.props.onSubmitComplete && this.props.onSubmitComplete(data);
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+            this.props.onSubmitError && this.props.onSubmitError(error);
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
+  }
+}
+
+ApiForm.propTypes = {
+  ...Form.propTypes,
+  onSubmit: React.PropTypes.func,
+  onSubmitComplete: React.PropTypes.func.isRequired,
+  onSubmitError: React.PropTypes.func,
+  apiMethod: React.PropTypes.string.isRequired,
+  apiEndpoint: React.PropTypes.string.isRequired
+};
+
+export default ApiForm;
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index b41d9f556e..08c0d0aa5e 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -1,37 +1,62 @@
 import React from 'react';
 
+import FormState from './state';
 import {t} from '../../locale';
 
-const Form = React.createClass({
-  propTypes: {
-    onSubmit: React.PropTypes.func.isRequired,
-    submitDisabled: React.PropTypes.bool,
-    submitLabel: React.PropTypes.string.isRequired,
-    footerClass: React.PropTypes.string,
-    extraButton: React.PropTypes.element
-  },
-
-  getDefaultProps() {
-    return {
-      submitLabel: t('Save Changes'),
-      submitDisabled: false,
-      footerClass: 'form-actions align-right'
+class Form extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      formData: Object.assign({}, this.props.initialData),
+      errors: {}
     };
-  },
+    ['onSubmit', 'onFieldChange'].forEach(f => {
+      this[f] = this[f].bind(this);
+    });
+  }
 
   onSubmit(e) {
     e.preventDefault();
-    this.props.onSubmit();
-  },
+    this.props.onSubmit && this.props.onSubmit(this.state.formData);
+  }
+
+  onFieldChange(name, value) {
+    let formData = this.state.formData;
+    formData[name] = value;
+    this.setState({
+      formData: formData
+    });
+  }
 
   render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let {formData, errors} = this.state;
     return (
-      <form onSubmit={this.onSubmit}>
+      <form onSubmit={this.onSubmit} className={this.props.className}>
+        {this.state.state === FormState.ERROR &&
+          <div className="alert alert-error alert-block">
+            {t(
+              'Unable to save your changes. Please ensure all fields are valid and try again.'
+            )}
+          </div>}
+        <fieldset>
+          {this.props.fields.map(config => {
+            return (
+              <config.component
+                key={`field_${config.name}`}
+                {...config}
+                value={formData[config.name]}
+                error={errors[config.name]}
+                onChange={this.onFieldChange.bind(this, config.name)}
+              />
+            );
+          })}
+        </fieldset>
         {this.props.children}
         <div className={this.props.footerClass} style={{marginTop: 25}}>
           <button
             className="btn btn-primary"
-            disabled={this.props.submitDisabled}
+            disabled={isSaving || this.props.submitDisabled}
             type="submit">
             {this.props.submitLabel}
           </button>
@@ -40,6 +65,31 @@ const Form = React.createClass({
       </form>
     );
   }
-});
+}
+
+Form.propTypes = {
+  onSubmit: React.PropTypes.func.isRequired,
+  submitDisabled: React.PropTypes.bool,
+  submitLabel: React.PropTypes.string.isRequired,
+  footerClass: React.PropTypes.string,
+  extraButton: React.PropTypes.element,
+  initialData: React.PropTypes.object,
+  fields: React.PropTypes.arrayOf(
+    React.PropTypes.shape({
+      // this is a function, as its a React definition,
+      // and not an instance of an element
+      component: React.PropTypes.func.isRequired,
+      name: React.PropTypes.string.isRequired,
+      label: React.PropTypes.string.isRequired
+    })
+  )
+};
+
+Form.defaultProps = {
+  submitLabel: t('Save Changes'),
+  submitDisabled: false,
+  footerClass: 'form-actions align-right',
+  className: 'form-stacked'
+};
 
 export default Form;
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index a09d80eb06..35d865c141 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -1,13 +1,8 @@
-const FormState = {
-  LOADING: 'Loading',
-  READY: 'Ready',
-  SAVING: 'Saving',
-  ERROR: 'Error'
-};
-
+export {default as ApiForm} from './apiForm';
 export {default as BooleanField} from './booleanField';
 export {default as EmailField} from './emailField';
 export {default as Form} from './form';
+export {default as FormState} from './state';
 export {default as GenericField} from './genericField';
 export {default as MultipleCheckboxField} from './multipleCheckboxField';
 export {default as NumberField} from './numberField';
@@ -17,5 +12,3 @@ export {default as Select2FieldAutocomplete} from './select2FieldAutocomplete';
 export {default as Select2Field} from './select2Field';
 export {default as TextField} from './textField';
 export {default as TextareaField} from './textareaField';
-
-export {FormState};
diff --git a/src/sentry/static/sentry/app/components/forms/state.jsx b/src/sentry/static/sentry/app/components/forms/state.jsx
new file mode 100644
index 0000000000..2774d531e1
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/state.jsx
@@ -0,0 +1,8 @@
+const FormState = {
+  LOADING: 'Loading',
+  READY: 'Ready',
+  SAVING: 'Saving',
+  ERROR: 'Error'
+};
+
+export default FormState;
diff --git a/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx b/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
index 5279de9243..ad8fea479d 100644
--- a/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
@@ -84,9 +84,9 @@ const OrganizationSelector = React.createClass({
 
               {features.has('organizations:create') &&
                 <li className="org-create">
-                  <a href="/organizations/new/" className="btn btn-default btn-block">
+                  <Link to="/organizations/new/" className="btn btn-default btn-block">
                     {t('New Organization')}
-                  </a>
+                  </Link>
                 </li>}
             </ul>
           </SidebarPanel>}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 8b11a75d1e..f20d52ac78 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -32,6 +32,7 @@ import MyIssuesAssignedToMe from './views/myIssues/assignedToMe';
 import MyIssuesBookmarked from './views/myIssues/bookmarked';
 import MyIssuesViewed from './views/myIssues/viewed';
 import OrganizationAuditLog from './views/organizationAuditLog';
+import OrganizationCreate from './views/organizationCreate';
 import OrganizationDashboard from './views/organizationDashboard';
 import OrganizationDetails from './views/organizationDetails';
 import OrganizationRateLimits from './views/organizationRateLimits';
@@ -134,6 +135,7 @@ function routes() {
       <Redirect from="/share/group/:shareId/" to="/share/issue/:shareId/" />
       <Route path="/share/issue/:shareId/" component={errorHandler(SharedGroupDetails)} />
 
+      <Route path="/organizations/new/" component={errorHandler(OrganizationCreate)} />
       <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
         <IndexRoute component={errorHandler(OrganizationDashboard)} />
 
diff --git a/src/sentry/static/sentry/app/views/organizationCreate.jsx b/src/sentry/static/sentry/app/views/organizationCreate.jsx
new file mode 100644
index 0000000000..5c48af0d73
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationCreate.jsx
@@ -0,0 +1,44 @@
+import React from 'react';
+
+import NarrowLayout from '../components/narrowLayout';
+import {ApiForm, TextField} from '../components/forms';
+import {t} from '../locale';
+
+export default React.createClass({
+  onSubmitComplete(data) {
+    // redirect to project creation
+    // browserHistory.pushState(null, `/organizations/${data.slug}/projects/new/`);
+    window.location.href = `/organizations/${data.slug}/projects/new/`;
+  },
+
+  render() {
+    return (
+      <NarrowLayout>
+        <h3>{t('Create a New Organization')}</h3>
+
+        <p>
+          {t(
+            "Organizations represent the top level in your hierarchy. You'll be able to bundle a collection of teams within an organization as well as give organization-wide permissions to users."
+          )}
+        </p>
+
+        <ApiForm
+          initialData={{defaultTeam: true}}
+          fields={[
+            {
+              name: 'name',
+              label: 'Organization Name',
+              placeholder: 'e.g. My Company',
+              required: true,
+              component: TextField
+            }
+          ]}
+          submitLabel={t('Create Organization')}
+          apiEndpoint="/organizations/"
+          apiMethod="POST"
+          onSubmitComplete={this.onSubmitComplete}
+        />
+      </NarrowLayout>
+    );
+  }
+});
diff --git a/src/sentry/templates/sentry/create-organization.html b/src/sentry/templates/sentry/create-organization.html
deleted file mode 100644
index bf6c57e1bf..0000000000
--- a/src/sentry/templates/sentry/create-organization.html
+++ /dev/null
@@ -1,28 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-
-{% block title %}{% trans "New Organization" %} | {{ block.super }}{% endblock %}
-{% block global_sidebar %}{% endblock %}
-
-{% block main %}
-  <section class="body">
-    <h2 class="m-b-1">{% trans "Create a New Organization" %}</h2>
-
-    <p>{% blocktrans %}Organizations represent the top level in your hierarchy. You'll be able to bundle a collection of teams within an organization as well as give organization-wide permissions to users.{% endblocktrans %}</p>
-
-    <form class="form-stacked" action="" method="post">
-      {% csrf_token %}
-      <fieldset style="margin-bottom: 5px">
-        {{ form|as_crispy_errors }}
-        {% for field in form %}
-            {{ field|as_crispy_field }}
-        {% endfor %}
-      </fieldset>
-      <div class="form-actions">
-        <button type="submit" class="btn btn-primary">{% trans "Create Organization" %}</button>
-      </div>
-    </form>
-  </section>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 4a1859bfb9..f2e7b2d207 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -157,7 +157,7 @@
               {% endfor %}
               {% feature organizations:create %}
                 <li class="divider"></li>
-                <li><a href="{% url 'sentry-create-organization' %}">New Organization</a></li>
+                <li><a href="{% absolute_uri '/organizations/new/' %}">New Organization</a></li>
               {% endfeature %}
             </ul>
           </div>
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 5881e39574..3654edde59 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -150,7 +150,7 @@ class OrganizationMixin(object):
         elif not features.has('organizations:create'):
             return self.respond('sentry/no-organization-access.html', status=403)
         else:
-            url = reverse('sentry-create-organization')
+            url = '/organizations/new/'
         return HttpResponseRedirect(url)
 
 
diff --git a/src/sentry/web/frontend/create_organization.py b/src/sentry/web/frontend/create_organization.py
deleted file mode 100644
index fd66856cf2..0000000000
--- a/src/sentry/web/frontend/create_organization.py
+++ /dev/null
@@ -1,41 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry import features
-from sentry.api import client
-from sentry.web.frontend.base import BaseView
-
-
-class NewOrganizationForm(forms.Form):
-    name = forms.CharField(label=_('Organization Name'), max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('My Company')}))
-
-
-class CreateOrganizationView(BaseView):
-    def get_form(self, request):
-        return NewOrganizationForm(request.POST or None)
-
-    def has_permission(self, request):
-        return features.has('organizations:create', actor=request.user)
-
-    def handle(self, request):
-        form = self.get_form(request)
-        if form.is_valid():
-            resp = client.post('/organizations/', data={
-                'name': form.cleaned_data['name'],
-                'defaultTeam': True,
-            }, request=request)
-
-            url = reverse('sentry-create-project', args=[resp.data['slug']])
-
-            return HttpResponseRedirect(url)
-
-        context = {
-            'form': form,
-        }
-
-        return self.respond('sentry/create-organization.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index f116220629..696d972541 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -25,7 +25,6 @@ from sentry.web.frontend.auth_organization_login import \
     AuthOrganizationLoginView
 from sentry.web.frontend.auth_provider_login import AuthProviderLoginView
 from sentry.web.frontend.auth_close import AuthCloseView
-from sentry.web.frontend.create_organization import CreateOrganizationView
 from sentry.web.frontend.create_organization_member import \
     CreateOrganizationMemberView
 from sentry.web.frontend.create_project import CreateProjectView
@@ -254,8 +253,7 @@ urlpatterns += patterns(
     # Organizations
     url(r'^(?P<organization_slug>[\w_-]+)/$', react_page_view,
         name='sentry-organization-home'),
-    url(r'^organizations/new/$', CreateOrganizationView.as_view(),
-        name='sentry-create-organization'),
+    url(r'^organizations/new/$', generic_react_page_view),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/$', OrganizationApiKeysView.as_view(),
         name='sentry-organization-api-keys'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/(?P<key_id>[\w_-]+)/$', OrganizationApiKeySettingsView.as_view(),
diff --git a/tests/acceptance/test_create_organization.py b/tests/acceptance/test_create_organization.py
new file mode 100644
index 0000000000..4b872dbaee
--- /dev/null
+++ b/tests/acceptance/test_create_organization.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class CreateOrganizationTest(AcceptanceTestCase):
+    def setUp(self):
+        super(CreateOrganizationTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.login_as(self.user)
+
+    def test_simple(self):
+        self.browser.get('/organizations/new/')
+        self.browser.snapshot(name='create organization')
diff --git a/tests/acceptance/test_create_organization_member.py b/tests/acceptance/test_create_organization_member.py
index 71a0d3c16d..03a6d38250 100644
--- a/tests/acceptance/test_create_organization_member.py
+++ b/tests/acceptance/test_create_organization_member.py
@@ -27,5 +27,5 @@ class CreateOrganizationMemberTest(AcceptanceTestCase):
         """
         Add by username (on-premises / by configuration only)
         """
-        self.browser.get('/organizations/{}/members/new'.format(self.org.slug))
+        self.browser.get('/organizations/{}/members/new/'.format(self.org.slug))
         self.browser.snapshot(name='invite organization member')
diff --git a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
new file mode 100644
index 0000000000..0dcf9a056b
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
@@ -0,0 +1,37 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationCreate render() renders correctly 1`] = `
+<NarryLayout>
+  <h3>
+    Create a New Organization
+  </h3>
+  <p>
+    Organizations represent the top level in your hierarchy. You'll be able to bundle a collection of teams within an organization as well as give organization-wide permissions to users.
+  </p>
+  <ApiForm
+    apiEndpoint="/organizations/"
+    apiMethod="POST"
+    className="form-stacked"
+    fields={
+      Array [
+        Object {
+          "component": [Function],
+          "label": "Organization Name",
+          "name": "name",
+          "placeholder": "e.g. My Company",
+          "required": true,
+        },
+      ]
+    }
+    footerClass="form-actions align-right"
+    initialData={
+      Object {
+        "defaultTeam": true,
+      }
+    }
+    onSubmitComplete={[Function]}
+    submitDisabled={false}
+    submitLabel="Create Organization"
+  />
+</NarryLayout>
+`;
diff --git a/tests/js/spec/views/organizationCreate.spec.jsx b/tests/js/spec/views/organizationCreate.spec.jsx
new file mode 100644
index 0000000000..e7f9ab5159
--- /dev/null
+++ b/tests/js/spec/views/organizationCreate.spec.jsx
@@ -0,0 +1,14 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+
+import OrganizationCreate from 'app/views/organizationCreate';
+
+describe('OrganizationCreate', function() {
+  describe('render()', function() {
+    it('renders correctly', function() {
+      let wrapper = shallow(<OrganizationCreate />);
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index 8020d4b930..450cb17819 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -89,7 +89,7 @@ class AuthLoginTest(TestCase):
             resp = self.client.get(self.path)
 
         assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-create-organization')
+        assert resp['Location'] == 'http://testserver/organizations/new/'
 
     def test_register_prefills_invite_email(self):
         self.session['invite_email'] = 'foo@example.com'
diff --git a/tests/sentry/web/frontend/test_create_organization.py b/tests/sentry/web/frontend/test_create_organization.py
deleted file mode 100644
index 5a24791fb6..0000000000
--- a/tests/sentry/web/frontend/test_create_organization.py
+++ /dev/null
@@ -1,42 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import Organization, OrganizationMember
-from sentry.testutils import TestCase
-
-
-class CreateOrganizationTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-create-organization')
-
-    def test_renders_with_context(self):
-        self.login_as(self.user)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/create-organization.html')
-        assert resp.context['form']
-
-    def test_valid_params(self):
-        self.login_as(self.user)
-        resp = self.client.post(self.path, {
-            'name': 'bar',
-        })
-        assert resp.status_code == 302
-
-        org = Organization.objects.get(name='bar')
-
-        assert OrganizationMember.objects.filter(
-            organization=org,
-            user=self.user,
-            role='owner',
-        ).exists()
-
-        assert org.team_set.exists()
-
-        redirect_uri = reverse('sentry-create-project', args=[org.slug])
-        assert resp['Location'] == 'http://testserver%s' % (
-            redirect_uri,
-        )
diff --git a/tests/sentry/web/frontend/test_home.py b/tests/sentry/web/frontend/test_home.py
index 2d1bd89954..df8f5a9f6d 100644
--- a/tests/sentry/web/frontend/test_home.py
+++ b/tests/sentry/web/frontend/test_home.py
@@ -15,7 +15,7 @@ class HomeTest(TestCase):
         resp = self.client.get(self.path)
 
         assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-login')
+        assert resp['Location'] == 'http://testserver/auth/login/'
 
     def test_redirects_to_create_org(self):
         self.login_as(self.user)
@@ -24,7 +24,7 @@ class HomeTest(TestCase):
             resp = self.client.get(self.path)
 
         assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-create-organization')
+        assert resp['Location'] == 'http://testserver/organizations/new/'
 
     def test_shows_no_access(self):
         self.login_as(self.user)
@@ -43,4 +43,4 @@ class HomeTest(TestCase):
             resp = self.client.get(self.path)
 
         assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-organization-home', args=[org.slug])
+        assert resp['Location'] == 'http://testserver/{}/'.format(org.slug)
