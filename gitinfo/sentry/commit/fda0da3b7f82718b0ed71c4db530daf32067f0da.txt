commit fda0da3b7f82718b0ed71c4db530daf32067f0da
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu May 23 09:58:16 2019 -0700

    feat(events-v2): Support special fields with custom rendering functions (#13342)
    
    Support composite fields in the events UI with custom rendering logic that
    can combine the results of multiple underlying columns.

diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
index 3eb43aec51..97fd1434d5 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
@@ -9,15 +9,18 @@ import overflowEllipsis from 'app/styles/overflowEllipsis';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {t} from 'app/locale';
 
+import {SPECIAL_FIELDS} from './utils';
+
 export default class Table extends React.Component {
   static propTypes = {
     view: SentryTypes.EventView.isRequired,
     data: PropTypes.arrayOf(PropTypes.object),
     isLoading: PropTypes.bool,
+    organization: SentryTypes.Organization.isRequired,
   };
 
   renderBody() {
-    const {view, data, isLoading} = this.props;
+    const {view, data, isLoading, organization} = this.props;
     const {fields} = view.data;
 
     if (isLoading) {
@@ -36,7 +39,11 @@ export default class Table extends React.Component {
       <Row key={idx} className={getGridStyle(fields.length)}>
         {fields.map(field => (
           <Cell key={field}>
-            <Data>{row[field]}</Data>
+            <Data>
+              {SPECIAL_FIELDS.hasOwnProperty(field)
+                ? SPECIAL_FIELDS[field].renderFunc(row, organization)
+                : row[field]}
+            </Data>
           </Cell>
         ))}
       </Row>
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
index 7dba10532b..503384163b 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -1,4 +1,7 @@
+import React from 'react';
+
 import {deepFreeze} from 'app/utils';
+import Link from 'app/components/links/link';
 
 export const ALL_VIEWS = deepFreeze([
   {
@@ -6,7 +9,7 @@ export const ALL_VIEWS = deepFreeze([
     name: 'All Events',
     data: {
       query: '',
-      fields: ['title', 'event.type', 'project.name', 'user.email', 'time'],
+      fields: ['event', 'event.type', 'project.name', 'user', 'time'],
       groupBy: [],
       aggregations: [],
       sort: '',
@@ -55,12 +58,25 @@ export const ALL_VIEWS = deepFreeze([
 /**
  * "Special fields" do not map 1:1 to an single column in the event database,
  * they are a UI concept that combines the results of multiple fields and
- * displays with some custom formatting. This map lists the underlying data
- * that we need to fetch in order to populate each of these special field.
+ * displays with a custom render function.
  */
-const SPECIAL_FIELDS = {
-  event: ['id', 'title'],
-  user: ['user.email', 'user.ip'],
+export const SPECIAL_FIELDS = {
+  event: {
+    fields: ['title', 'id', 'project.name'],
+    renderFunc: (data, org) => (
+      <Link
+        to={`/organizations/${org.slug}/projects/${data['project.name']}/events/${
+          data.id
+        }/`}
+      >
+        {data.title}
+      </Link>
+    ),
+  },
+  user: {
+    fields: ['user.email', 'user.ip'],
+    renderFunc: data => data['user.email'] || data['user.ip'],
+  },
 };
 
 /**
@@ -74,21 +90,6 @@ export function getCurrentView(requestedView) {
   return ALL_VIEWS.find(view => view.id === requestedView) || ALL_VIEWS[0];
 }
 
-/**
- * Fetch organization events given view object
- *
- * @param {Object} api
- * @param {String} orgSlug
- * @param {Object} view
- * @returns {Promise<Object>}
- */
-export function fetchOrganizationEvents(api, orgSlug, view) {
-  const query = getQuery(view);
-  return api.requestPromise(`/organizations/${orgSlug}/events/`, {
-    query,
-  });
-}
-
 /**
  * Takes a view and converts it into the format required for the events API
  *
@@ -97,13 +98,16 @@ export function fetchOrganizationEvents(api, orgSlug, view) {
  */
 export function getQuery(view) {
   const data = {...view.data};
-  data.fields = data.fields.reduce((fields, field) => {
+  const fields = data.fields.reduce((list, field) => {
     if (SPECIAL_FIELDS.hasOwnProperty(field)) {
-      fields.push(...SPECIAL_FIELDS[field]);
+      list.push(...SPECIAL_FIELDS[field].fields);
     } else {
-      fields.push(field);
+      list.push(field);
     }
-    return fields;
+    return list;
   }, []);
+
+  data.fields = [...new Set(fields)];
+
   return data;
 }
diff --git a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
index 1ea14c55a1..f8f61cbac1 100644
--- a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
@@ -26,8 +26,9 @@ describe('getQuery()', function() {
     };
 
     expect(getQuery(view).fields).toEqual([
-      'id',
       'title',
+      'id',
+      'project.name',
       'user.email',
       'user.ip',
       'issue.id',
