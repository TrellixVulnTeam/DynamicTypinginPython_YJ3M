commit cbccb46617836025bb1f1ea596fa43f17443d50a
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 30 21:45:01 2014 -0700

    Scrub values which look like passwords or credit cards

diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
new file mode 100644
index 0000000000..2a8491f3a9
--- /dev/null
+++ b/src/sentry/utils/data_scrubber.py
@@ -0,0 +1,102 @@
+"""
+sentry.utils.data_scrubber
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import re
+import six
+
+
+def varmap(func, var, context=None, name=None):
+    """
+    Executes ``func(key_name, value)`` on all values
+    recurisively discovering dict and list scoped
+    values.
+    """
+    if context is None:
+        context = set()
+
+    objid = id(var)
+    if objid in context:
+        return func(name, '<...>')
+    context.add(objid)
+
+    if isinstance(var, dict):
+        ret = dict((k, varmap(func, v, context, k)) for k, v in six.iteritems(var))
+    elif isinstance(var, (list, tuple)):
+        ret = [varmap(func, f, context, name) for f in var]
+    else:
+        ret = func(name, var)
+    context.remove(objid)
+    return ret
+
+
+class SensitiveDataFilter(object):
+    """
+    Asterisk out things that look like passwords, credit card numbers,
+    and API keys in frames, http, and basic extra data.
+    """
+    MASK = '*' * 8
+    FIELDS = frozenset([
+        'password', 'secret', 'passwd', 'authorization', 'api_key', 'apikey'
+    ])
+    VALUES_RE = re.compile(r'^(?:\d[ -]*?){13,16}$')
+
+    def apply(self, data):
+        if 'stacktrace' in data:
+            self.filter_stacktrace(data['stacktrace'])
+
+        if 'exception' in data:
+            if 'stacktrace' in data['exception']:
+                self.filter_stacktrace(data['exception']['stacktrace'])
+
+        if 'request' in data:
+            self.filter_http(data['request'])
+
+    def sanitize(self, key, value):
+        if value is None:
+            return
+
+        if isinstance(value, six.string_types) and self.VALUES_RE.match(value):
+            return self.MASK
+
+        if not key:  # key can be a NoneType
+            return value
+
+        key = key.lower()
+        for field in self.FIELDS:
+            if field in key:
+                # store mask as a fixed length for security
+                return self.MASK
+        return value
+
+    def filter_stacktrace(self, data):
+        if 'frames' not in data:
+            return
+        for frame in data['frames']:
+            if 'vars' not in frame:
+                continue
+            frame['vars'] = varmap(self.sanitize, frame['vars'])
+
+    def filter_http(self, data):
+        for n in ('data', 'cookies', 'headers', 'env', 'query_string'):
+            if n not in data:
+                continue
+
+            if isinstance(data[n], six.string_types) and '=' in data[n]:
+                # at this point we've assumed it's a standard HTTP query
+                querybits = []
+                for bit in data[n].split('&'):
+                    chunk = bit.split('=')
+                    if len(chunk) == 2:
+                        querybits.append((chunk[0], self.sanitize(*chunk)))
+                    else:
+                        querybits.append(chunk)
+
+                data[n] = '&'.join('='.join(k) for k in querybits)
+            else:
+                data[n] = varmap(self.sanitize, data[n])
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 0c5ae1ddf5..81eccf4819 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -44,6 +44,7 @@ from sentry.signals import event_received
 from sentry.plugins import plugins
 from sentry.quotas.base import RateLimit
 from sentry.utils import json
+from sentry.utils.data_scrubber import SensitiveDataFilter
 from sentry.utils.javascript import to_json
 from sentry.utils.http import is_valid_origin, get_origins, is_same_domain
 from sentry.utils.safe import safe_execute
@@ -344,6 +345,10 @@ class StoreView(APIView):
 
         event_id = data['event_id']
 
+        # We filter data immediately before it ever gets into the queue
+        inst = SensitiveDataFilter()
+        inst.apply(data)
+
         # mutates data (strips a lot of context if not queued)
         insert_data_to_database(data)
 
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
new file mode 100644
index 0000000000..db9d1e428f
--- /dev/null
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -0,0 +1,114 @@
+# -*- coding: utf-8 -*-
+
+from sentry.testutils import TestCase
+from sentry.utils.data_scrubber import SensitiveDataFilter
+
+
+VARS = {
+    'foo': 'bar',
+    'password': 'hello',
+    'the_secret': 'hello',
+    'a_password_here': 'hello',
+    'api_key': 'secret_key',
+    'apiKey': 'secret_key',
+}
+
+
+class SensitiveDataFilterTest(TestCase):
+
+    def _check_vars_sanitized(self, vars, proc):
+        """
+        Helper to check that keys have been sanitized.
+        """
+        self.assertTrue('foo' in vars)
+        self.assertEquals(vars['foo'], 'bar')
+        self.assertTrue('password' in vars)
+        self.assertEquals(vars['password'], proc.MASK)
+        self.assertTrue('the_secret' in vars)
+        self.assertEquals(vars['the_secret'], proc.MASK)
+        self.assertTrue('a_password_here' in vars)
+        self.assertEquals(vars['a_password_here'], proc.MASK)
+        self.assertTrue('api_key' in vars)
+        self.assertEquals(vars['api_key'], proc.MASK)
+        self.assertTrue('apiKey' in vars)
+        self.assertEquals(vars['apiKey'], proc.MASK)
+
+    def test_stacktrace(self):
+        data = {
+            'stacktrace': {
+                'frames': [{'vars': VARS}],
+            }
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+
+        self.assertTrue('stacktrace' in data)
+        stack = data['stacktrace']
+        self.assertTrue('frames' in stack)
+        self.assertEquals(len(stack['frames']), 1)
+        frame = stack['frames'][0]
+        self.assertTrue('vars' in frame)
+        self._check_vars_sanitized(frame['vars'], proc)
+
+    def test_http(self):
+        data = {
+            'request': {
+                'data': VARS,
+                'env': VARS,
+                'headers': VARS,
+                'cookies': VARS,
+            }
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+
+        self.assertTrue('request' in data)
+        http = data['request']
+        for n in ('data', 'env', 'headers', 'cookies'):
+            self.assertTrue(n in http)
+            self._check_vars_sanitized(http[n], proc)
+
+    def test_querystring_as_string(self):
+        data = {
+            'request': {
+                'query_string': 'foo=bar&password=hello&the_secret=hello'
+                                '&a_password_here=hello&api_key=secret_key',
+            }
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+
+        self.assertTrue('request' in data)
+        http = data['request']
+        self.assertEquals(
+            http['query_string'],
+            'foo=bar&password=%(m)s&the_secret=%(m)s'
+            '&a_password_here=%(m)s&api_key=%(m)s' % dict(m=proc.MASK))
+
+    def test_querystring_as_string_with_partials(self):
+        data = {
+            'request': {
+                'query_string': 'foo=bar&password&baz=bar',
+            }
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+
+        self.assertTrue('request' in data)
+        http = data['request']
+        self.assertEquals(http['query_string'], 'foo=bar&password&baz=bar' % dict(m=proc.MASK))
+
+    def test_sanitize_credit_card(self):
+        proc = SensitiveDataFilter()
+        result = proc.sanitize('foo', '4242424242424242')
+        self.assertEquals(result, proc.MASK)
+
+    def test_sanitize_credit_card_amex(self):
+        # AMEX numbers are 15 digits, not 16
+        proc = SensitiveDataFilter()
+        result = proc.sanitize('foo', '424242424242424')
+        self.assertEquals(result, proc.MASK)
