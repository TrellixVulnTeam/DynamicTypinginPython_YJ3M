commit cdcf91c485f547710565f3b093257fa4dde390d3
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Dec 14 12:03:00 2017 -0800

    fix: Optimistically check project plugin checkboxes (#6767)

diff --git a/src/sentry/static/sentry/app/stores/indicatorStore.jsx b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
index 48983269d9..668a2f48c2 100644
--- a/src/sentry/static/sentry/app/stores/indicatorStore.jsx
+++ b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
@@ -1,4 +1,5 @@
 import Reflux from 'reflux';
+import {t} from '../locale';
 
 const IndicatorStore = Reflux.createStore({
   init() {
@@ -10,7 +11,7 @@ const IndicatorStore = Reflux.createStore({
     return this.add(message, 'success', {duration: 2000});
   },
 
-  addError(message = 'An error Occurred') {
+  addError(message = t('An error occurred')) {
     return this.add(message, 'error', {duration: 2000});
   },
 
diff --git a/src/sentry/static/sentry/app/views/projectPlugins.jsx b/src/sentry/static/sentry/app/views/projectPlugins.jsx
index 32b2aa6879..a91a150b1e 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins.jsx
@@ -23,20 +23,26 @@ export default class ProjectPlugins extends AsyncView {
 
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
+    this.setState(() => {
+      let plugins = this.state.plugins.slice();
+      plugins[idx].enabled = shouldEnable;
+      return plugins;
+    });
+
     this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
       method,
       success: () => {
-        let plugins = this.state.plugins.slice();
-        plugins[idx].enabled = shouldEnable;
-        this.setState({
-          plugins,
-        });
         IndicatorStore.addSuccess(
           t(`Plugin was ${shouldEnable ? 'enabled' : 'disabled'}`)
         );
       },
       error: () => {
-        IndicatorStore.addError(t('An error occurred'));
+        IndicatorStore.addError(t('Unable to update plugin'));
+        this.setState(() => {
+          let plugins = this.state.plugins.slice();
+          plugins[idx].enabled = !shouldEnable;
+          return plugins;
+        });
       },
       complete: () => IndicatorStore.remove(loadingIndicator),
     });
