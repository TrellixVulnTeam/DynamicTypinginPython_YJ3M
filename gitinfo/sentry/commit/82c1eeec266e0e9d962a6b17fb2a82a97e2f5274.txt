commit 82c1eeec266e0e9d962a6b17fb2a82a97e2f5274
Author: Matte Noble <me@mattenoble.com>
Date:   Wed Aug 29 16:08:55 2018 -0700

    feat(integrations): VSTS Extension installation (#9523)
    
    Introduces the UI necessary to integrate with VSTS' marketplace. After
    the person clicks "Install" on their marketplace, they will be presented
    with a "Configure Sentry" button. That will kick off the process of
    choosing their Sentry Org to associate, as well as OAuth'ing to VSTS.

diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 78e236409b..0fdee257d0 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -69,6 +69,10 @@ class IntegrationProvider(PipelineProvider):
     # a human readable name (e.g. 'Slack')
     name = None
 
+    # Whether the Integration should show up in the list of Providers on the
+    # Organization Integration settings page
+    visible = True
+
     # an IntegrationMetadata object, used to provide extra details in the
     # configuration interface of the integration.
     metadata = None
diff --git a/src/sentry/integrations/vsts_extension/integration.py b/src/sentry/integrations/vsts_extension/integration.py
index 39073e9659..ef54eb1e6b 100644
--- a/src/sentry/integrations/vsts_extension/integration.py
+++ b/src/sentry/integrations/vsts_extension/integration.py
@@ -25,10 +25,6 @@ class VstsExtensionIntegrationProvider(VstsIntegrationProvider):
         return views
 
     def build_integration(self, state):
-        # Normally this is saved into the ``identity`` state, but for some
-        # reason it gets wiped out in the NestedPipeline. Instead, we'll store
-        # it in it's own key (``vsts``) to be used down the line in
-        # ``VSTSOrganizationSelectionView``.
         state['account'] = {
             'AccountId': state['vsts']['AccountId'],
             'AccountName': state['vsts']['AccountName'],
@@ -50,7 +46,6 @@ class VstsExtensionFinishedView(PipelineView):
 
         messages.add_message(request, messages.SUCCESS, 'VSTS Extension installed.')
 
-        # TODO: replace with whatever we decide the finish step is.
         return HttpResponseRedirect(
             absolute_uri('/settings/{}/integrations/vsts-extension/{}/'.format(
                 pipeline.organization.slug,
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 6a4baecad5..319f5f13e0 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -584,6 +584,14 @@ function routes() {
         component={errorHandler(LazyLoad)}
       />
 
+      <Route
+        path="/extensions/vsts/link/"
+        getComponent={(loc, cb) =>
+          import(/*webpackChunkName: "VSTSOrganizationLink" */ './views/vstsOrganizationLink').then(
+            lazyLoad(cb)
+          )}
+      />
+
       <Route newnew path="/settings/" name="Settings" component={SettingsWrapper}>
         <IndexRoute
           getComponent={(loc, cb) =>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
index f1ed2fcfab..8cda076990 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
@@ -78,8 +78,6 @@ export default class OrganizationIntegrations extends AsyncComponent {
       i => i.name
     );
     this.setState({integrations});
-
-    // TODO: Find unmigratable repos and display warning
   };
 
   onRemove = integration => {
diff --git a/src/sentry/static/sentry/app/views/vstsOrganizationLink.jsx b/src/sentry/static/sentry/app/views/vstsOrganizationLink.jsx
new file mode 100644
index 0000000000..d34aab660e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/vstsOrganizationLink.jsx
@@ -0,0 +1,77 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import {CSRF_COOKIE_NAME} from 'app/constants';
+import AsyncView from 'app/views/asyncView';
+import NarrowLayout from 'app/components/narrowLayout';
+import {Form, SelectField} from 'app/components/forms';
+import getCookie from 'app/utils/getCookie';
+
+export default class VSTSOrganizationLink extends AsyncView {
+  getEndpoints() {
+    return [['organizations', '/organizations/']];
+  }
+
+  getTitle() {
+    return 'Link Organization to VSTS';
+  }
+
+  getDefaultState() {
+    return {
+      organizations: [],
+    };
+  }
+
+  get targetId() {
+    return this.props.location.query.targetId;
+  }
+
+  get targetName() {
+    return this.props.location.query.targetName;
+  }
+
+  get organizations() {
+    return this.state.organizations.map(o => [o.slug, o.name]);
+  }
+
+  get defaultChoice() {
+    return !!this.organizations[0] ? this.organizations[0][0] : '';
+  }
+
+  onSubmit() {
+    // Because Form can't also just be a normal form.
+    const form = $('.link-org-form');
+    form.attr('method', 'POST');
+    form.attr('action', '/extensions/vsts/configure/');
+    form.submit();
+  }
+
+  render() {
+    return (
+      <NarrowLayout>
+        <Form
+          className="link-org-form"
+          submitLabel={t('Continue')}
+          onSubmit={this.onSubmit}
+        >
+          <input
+            type="hidden"
+            name="csrfmiddlewaretoken"
+            value={getCookie(CSRF_COOKIE_NAME)}
+          />
+
+          <input type="hidden" name="vsts_id" value={this.targetId} />
+          <input type="hidden" name="vsts_name" value={this.targetName} />
+
+          <SelectField
+            choices={this.organizations}
+            clearable={false}
+            value={this.defaultChoice}
+            name="organization"
+            label={t('Organization to use with VSTS')}
+          />
+        </Form>
+      </NarrowLayout>
+    );
+  }
+}
diff --git a/src/sentry/web/frontend/vsts_extension_configuration.py b/src/sentry/web/frontend/vsts_extension_configuration.py
new file mode 100644
index 0000000000..4652746a8b
--- /dev/null
+++ b/src/sentry/web/frontend/vsts_extension_configuration.py
@@ -0,0 +1,78 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.utils.http import urlencode
+
+from sentry.integrations.pipeline import IntegrationPipeline
+from sentry.models import Organization
+from sentry.web.frontend.base import BaseView
+
+
+class VstsExtensionConfigurationView(BaseView):
+    auth_required = False
+
+    def get(self, request, *args, **kwargs):
+        if not request.user.is_authenticated():
+            configure_uri = '{}?{}'.format(
+                reverse('vsts-extension-configuration'),
+                urlencode({
+                    'targetId': request.GET['targetId'],
+                    'targetName': request.GET['targetName'],
+                }),
+            )
+
+            redirect_uri = '{}?{}'.format(
+                reverse('sentry-login'),
+                urlencode({'next': configure_uri}),
+            )
+
+            return self.redirect(redirect_uri)
+
+        if request.user.get_orgs().count() == 1:
+            org = request.user.get_orgs()[0]
+
+            pipeline = self.init_pipeline(
+                request,
+                org,
+                request.GET['targetId'],
+                request.GET['targetName'],
+            )
+
+            return pipeline.current_step()
+        else:
+            return self.redirect('/extensions/vsts/link/?{}'.format(
+                urlencode({
+                    'targetId': request.GET['targetId'],
+                    'targetName': request.GET['targetName'],
+                })
+            ))
+
+    def post(self, request, *args, **kwargs):
+        # Update Integration with Organization chosen
+        org = Organization.objects.get(
+            slug=request.POST['organization'],
+        )
+
+        pipeline = self.init_pipeline(
+            request,
+            org,
+            request.POST['vsts_id'],
+            request.POST['vsts_name'],
+        )
+
+        return pipeline.current_step()
+
+    def init_pipeline(self, request, organization, id, name):
+        pipeline = IntegrationPipeline(
+            request=request,
+            organization=organization,
+            provider_key='vsts-extension',
+        )
+
+        pipeline.initialize()
+        pipeline.bind_state('vsts', {
+            'AccountId': id,
+            'AccountName': name,
+        })
+
+        return pipeline
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 9f06813a95..3a60c4842c 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -55,6 +55,8 @@ from sentry.web.frontend.unsubscribe_issue_notifications import \
     UnsubscribeIssueNotificationsView
 from sentry.web.frontend.user_avatar import UserAvatarPhotoView
 from sentry.web.frontend.setup_wizard import SetupWizardView
+from sentry.web.frontend.vsts_extension_configuration import \
+    VstsExtensionConfigurationView
 from sentry.web.frontend.js_sdk_loader import JavaScriptSdkLoader
 
 
@@ -198,8 +200,10 @@ urlpatterns += patterns(
         name='sentry-account-confirm-email-send'
     ),
     url(r'^account/authorizations/$',
-        RedirectView.as_view(pattern_name="sentry-account-settings-authorizations", permanent=False),
-    ),
+        RedirectView.as_view(
+            pattern_name="sentry-account-settings-authorizations",
+            permanent=False),
+        ),
     url(
         r'^account/confirm-email/(?P<user_id>[\d]+)/(?P<hash>[0-9a-zA-Z]+)/$',
         accounts.confirm_email,
@@ -218,7 +222,7 @@ urlpatterns += patterns(
     ),
     url(r'^account/settings/$',
         RedirectView.as_view(pattern_name="sentry-account-settings", permanent=False),
-    ),
+        ),
     url(
         r'^account/settings/2fa/$',
         RedirectView.as_view(pattern_name="sentry-account-settings-security", permanent=False),
@@ -255,7 +259,7 @@ urlpatterns += patterns(
     ),
     url(r'^account/settings/emails/$',
         RedirectView.as_view(pattern_name="sentry-account-settings-emails", permanent=False),
-    ),
+        ),
 
     # Project Wizard
     url(
@@ -334,14 +338,14 @@ urlpatterns += patterns(
     ),
     url(r'^api/$',
         RedirectView.as_view(pattern_name="sentry-api", permanent=False),
-    ),
+        ),
     url(r'^api/applications/$',
         RedirectView.as_view(pattern_name="sentry-api-applications", permanent=False)),
     url(r'^api/new-token/$',
         RedirectView.as_view(pattern_name="sentry-api-new-auth-token", permanent=False)),
     url(r'^api/[^0]+/',
         RedirectView.as_view(pattern_name="sentry-api-details", permanent=False),
-    ),
+        ),
     url(r'^out/$', OutView.as_view()),
 
     url(r'^accept-transfer/$', react_page_view, name='sentry-accept-project-transfer'),
@@ -349,16 +353,23 @@ urlpatterns += patterns(
     # acting on behalf of an organization should use react_page_view
     url(r'^settings/account/$', generic_react_page_view, name="sentry-account-settings"),
     url(r'^settings/account/$', generic_react_page_view, name="sentry-account-settings-appearance"),
-    url(r'^settings/account/authorizations/$', generic_react_page_view, name="sentry-account-settings-authorizations"),
-    url(r'^settings/account/security/', generic_react_page_view, name='sentry-account-settings-security'),
+    url(r'^settings/account/authorizations/$', generic_react_page_view,
+        name="sentry-account-settings-authorizations"),
+    url(r'^settings/account/security/', generic_react_page_view,
+        name='sentry-account-settings-security'),
     url(r'^settings/account/avatar/$', generic_react_page_view, name='sentry-account-settings-avatar'),
-    url(r'^settings/account/identities/$', generic_react_page_view, name='sentry-account-settings-identities'),
-    url(r'^settings/account/subscriptions/$', generic_react_page_view, name='sentry-account-settings-subscriptions'),
-    url(r'^settings/account/notifications/', generic_react_page_view, name='sentry-account-settings-notifications'),
+    url(r'^settings/account/identities/$', generic_react_page_view,
+        name='sentry-account-settings-identities'),
+    url(r'^settings/account/subscriptions/$', generic_react_page_view,
+        name='sentry-account-settings-subscriptions'),
+    url(r'^settings/account/notifications/', generic_react_page_view,
+        name='sentry-account-settings-notifications'),
     url(r'^settings/account/emails/$', generic_react_page_view, name='sentry-account-settings-emails'),
     url(r'^settings/account/api/$', generic_react_page_view, name='sentry-api'),
-    url(r'^settings/account/api/applications/$', generic_react_page_view, name='sentry-api-applications'),
-    url(r'^settings/account/api/auth-tokens/new-token/$', generic_react_page_view, name='sentry-api-new-auth-token'),
+    url(r'^settings/account/api/applications/$',
+        generic_react_page_view, name='sentry-api-applications'),
+    url(r'^settings/account/api/auth-tokens/new-token/$',
+        generic_react_page_view, name='sentry-api-new-auth-token'),
     url(r'^settings/account/api/[^0]+/$', generic_react_page_view, name='sentry-api-details'),
     url(r'^settings/account/close-account/$', generic_react_page_view, name='sentry-remove-account'),
     url(r'^settings/account/', generic_react_page_view),
@@ -492,6 +503,13 @@ urlpatterns += patterns(
         name='sentry-team-avatar-url'
     ),
 
+    # VSTS Marketplace extension install flow
+    url(
+        r'^extensions/vsts/configure/$',
+        VstsExtensionConfigurationView.as_view(),
+        name='vsts-extension-configuration',
+    ),
+
     # Generic
     url(r'^$', HomeView.as_view(), name='sentry'),
     url(r'^robots\.txt$', api.robots_txt, name='sentry-api-robots-txt'),
diff --git a/tests/sentry/integrations/vsts/testutils.py b/tests/sentry/integrations/vsts/testutils.py
index d226dfafb2..aacbea3950 100644
--- a/tests/sentry/integrations/vsts/testutils.py
+++ b/tests/sentry/integrations/vsts/testutils.py
@@ -143,29 +143,44 @@ class VstsIntegrationTestCase(IntegrationTestCase):
             }
         )
 
-    def assert_installation(self):
-        # Initial request to the installation URL for VSTS
-        resp = self.client.get(self.init_path)
-
-        redirect = urlparse(resp['Location'])
-        query = parse_qs(redirect.query)
-
-        assert resp.status_code == 302
-        assert redirect.scheme == 'https'
-        assert redirect.netloc == 'app.vssps.visualstudio.com'
-        assert redirect.path == '/oauth2/authorize'
+    def make_init_request(self, path=None, body=None):
+        return self.client.get(
+            path or self.init_path,
+            body or {},
+        )
 
-        # OAuth redirect back to Sentry (identity_pipeline_view)
-        resp = self.client.get('{}?{}'.format(
+    def make_oauth_redirect_request(self, state):
+        return self.client.get('{}?{}'.format(
             self.setup_path,
             urlencode({
                 'code': 'oauth-code',
-                'state': query['state'][0],
+                'state': state,
             }),
         ))
 
-        assert resp.status_code == 200
-        assert '<option value="{}"'.format(self.vsts_account_id) in resp.content
+    def assert_vsts_oauth_redirect(self, redirect):
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'app.vssps.visualstudio.com'
+        assert redirect.path == '/oauth2/authorize'
+
+    def assert_account_selection(self, response, account_id=None):
+        account_id = account_id or self.vsts_account_id
+        assert response.status_code == 200
+        assert '<option value="{}"'.format(account_id) in response.content
+
+    def assert_installation(self):
+        # Initial request to the installation URL for VSTS
+        resp = self.make_init_request()
+        redirect = urlparse(resp['Location'])
+
+        assert resp.status_code == 302
+        self.assert_vsts_oauth_redirect(redirect)
+
+        query = parse_qs(redirect.query)
+
+        # OAuth redirect back to Sentry (identity_pipeline_view)
+        resp = self.make_oauth_redirect_request(query['state'][0])
+        self.assert_account_selection(resp)
 
         # User choosing which VSTS Account to use (AccountConfigView)
         # Final step.
diff --git a/tests/sentry/integrations/vsts_extension/test_provider.py b/tests/sentry/integrations/vsts_extension/test_provider.py
index 61ee6acbb9..76baed0694 100644
--- a/tests/sentry/integrations/vsts_extension/test_provider.py
+++ b/tests/sentry/integrations/vsts_extension/test_provider.py
@@ -1,18 +1,20 @@
 from __future__ import absolute_import
 
+from django.core.urlresolvers import reverse
 from mock import patch
+from six.moves.urllib.parse import urlparse, parse_qs
 
 from sentry.integrations.vsts import VstsIntegrationProvider
 from sentry.integrations.vsts_extension import (
     VstsExtensionIntegrationProvider,
     VstsExtensionFinishedView,
 )
-from sentry.testutils import TestCase
+from sentry.models import Integration
+from tests.sentry.integrations.vsts.testutils import VstsIntegrationTestCase
 
 
-class VstsExtensionIntegrationProviderTest(TestCase):
-    def setUp(self):
-        self.provider = VstsExtensionIntegrationProvider()
+class VstsExtensionIntegrationProviderTest(VstsIntegrationTestCase):
+    provider = VstsExtensionIntegrationProvider()
 
     def test_get_pipeline_views(self):
         # Should be same as the VSTS integration, but with a different last
@@ -34,14 +36,38 @@ class VstsExtensionIntegrationProviderTest(TestCase):
                 'AccountId': '123',
                 'AccountName': 'test',
             },
+            'instance': 'test.visualstudio.com',
             'identity': {
                 'data': {
                     'access_token': '123',
-                    'expires_in': '3600',
-                    'refresh_token': '321',
+                    'expires_in': 3000,
                 },
             },
         })
 
         assert integration['external_id'] == '123'
         assert integration['name'] == 'test'
+
+    def test_builds_integration_with_vsts_key(self):
+        self._stub_vsts()
+
+        # Emulate the request from VSTS to us
+        resp = self.make_init_request(
+            path=reverse('vsts-extension-configuration'),
+            body={
+                'targetId': self.vsts_account_id,
+                'targetName': self.vsts_account_name,
+                'targetUri': self.vsts_account_uri,
+            },
+        )
+
+        self.assert_vsts_oauth_redirect(urlparse(resp['Location']))
+
+        # We redirect the user to OAuth with VSTS, so emulate the response from
+        # VSTS to us.
+        self.make_oauth_redirect_request(
+            state=parse_qs(urlparse(resp['Location']).query)['state'][0]
+        )
+
+        # Should have create the Integration using the ``vsts`` key
+        assert Integration.objects.filter(provider='vsts').exists()
diff --git a/tests/sentry/web/frontend/test_vsts_extension_configuration.py b/tests/sentry/web/frontend/test_vsts_extension_configuration.py
new file mode 100644
index 0000000000..dc8f05acb3
--- /dev/null
+++ b/tests/sentry/web/frontend/test_vsts_extension_configuration.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import TestCase
+from sentry.models import OrganizationMember
+
+
+class VstsExtensionConfigurationTest(TestCase):
+    @property
+    def path(self):
+        return reverse('vsts-extension-configuration')
+
+    def setUp(self):
+        self.user = self.create_user()
+        self.org = self.create_organization()
+
+        OrganizationMember.objects.create(
+            user=self.user,
+            organization=self.org,
+        )
+
+    def test_logged_in_one_org(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path, {
+            'targetId': '1',
+            'targetName': 'foo',
+        })
+
+        # Goes straight to VSTS OAuth
+        assert resp.status_code == 302
+        assert resp.url.startswith(
+            'https://app.vssps.visualstudio.com/oauth2/authorize')
+
+    def test_logged_in_many_orgs(self):
+        self.login_as(self.user)
+
+        org = self.create_organization()
+        OrganizationMember.objects.create(
+            user=self.user,
+            organization=org,
+        )
+
+        resp = self.client.get(self.path, {
+            'targetId': '1',
+            'targetName': 'foo',
+        })
+
+        assert resp.status_code == 302
+        assert '/extensions/vsts/link/' in resp.url
+
+    def test_choose_org(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'vsts_id': '1',
+            'vsts_name': 'foo',
+            'organization': self.org.slug,
+        })
+
+        assert resp.status_code == 302
+        assert resp.url.startswith(
+            'https://app.vssps.visualstudio.com/oauth2/authorize')
+
+    def test_logged_out(self):
+        resp = self.client.get(self.path, {
+            'targetId': '1',
+            'targetName': 'foo',
+        })
+
+        assert resp.status_code == 302
+        assert '/auth/login/' in resp.url
+        # URL encoded post-login redirect URL
+        assert 'next=%2Fextensions%2Fvsts%2Fconfigure%2F%3FtargetName%3Dfoo%26targetId%3D1' in resp.url
