commit 792eacbe36a1485954f585ac0447a2a52507f967
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Feb 26 11:25:21 2016 -0800

    Allow overriding some security features at the org level
    
    Fixes GH-2757

diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index 7a9731d5c9..f1ec0484ce 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -221,3 +221,19 @@ class Organization(Model):
             model.objects.filter(
                 organization=from_org,
             ).update(organization=to_org)
+
+    # TODO: Make these a mixin
+    def update_option(self, *args, **kwargs):
+        from sentry.models import OrganizationOption
+
+        return OrganizationOption.objects.set_value(self, *args, **kwargs)
+
+    def get_option(self, *args, **kwargs):
+        from sentry.models import OrganizationOption
+
+        return OrganizationOption.objects.get_value(self, *args, **kwargs)
+
+    def delete_option(self, *args, **kwargs):
+        from sentry.models import OrganizationOption
+
+        return OrganizationOption.objects.unset_value(self, *args, **kwargs)
diff --git a/src/sentry/templates/sentry/organization-settings.html b/src/sentry/templates/sentry/organization-settings.html
index 0f21cbb8d9..4fc8aadf84 100644
--- a/src/sentry/templates/sentry/organization-settings.html
+++ b/src/sentry/templates/sentry/organization-settings.html
@@ -33,6 +33,10 @@
 
         {{ form.allow_shared_issues|as_crispy_field }}
         {{ form.enhanced_privacy|as_crispy_field }}
+        {{ form.scrub_data|as_crispy_field }}
+        {{ form.scrub_defaults|as_crispy_field }}
+        {{ form.sensitive_fields|as_crispy_field }}
+        {{ form.scrub_ip_address|as_crispy_field }}
 
         <fieldset class="form-actions">
           <button type="submit" class="btn btn-primary btn-lg">{% trans "Save Changes" %}</button>
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 3a35f81b10..2d5abe7b8d 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -57,7 +57,7 @@ class SensitiveDataFilter(object):
             fields = ()
         if include_defaults:
             fields += DEFAULT_SCRUBBED_FIELDS
-        self.fields = fields
+        self.fields = set(fields)
 
     def apply(self, data):
         # TODO(dcramer): move this into each interface
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 373c2c96ea..cdd074ca88 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -20,7 +20,7 @@ from sentry.coreapi import (
     APIError, APIForbidden, APIRateLimited, ClientApiHelper, CspApiHelper,
 )
 from sentry.event_manager import EventManager
-from sentry.models import Project
+from sentry.models import Project, OrganizationOption
 from sentry.signals import event_received
 from sentry.quotas.base import RateLimit
 from sentry.utils import json, metrics
@@ -339,7 +339,12 @@ class StoreView(APIView):
         manager = EventManager(data, version=auth.version)
         data = manager.normalize()
 
-        scrub_ip_address = project.get_option('sentry:scrub_ip_address', False)
+        org_options = OrganizationOption.objects.get_all_values(project.organization_id)
+
+        scrub_ip_address_key = 'sentry:scrub_ip_address'
+        scrub_ip_address = org_options.get(scrub_ip_address_key, False)
+        if not scrub_ip_address:
+            scrub_ip_address = project.get_option(scrub_ip_address_key, False)
 
         # insert IP address if not available
         if auth.is_public and not scrub_ip_address:
@@ -354,11 +359,26 @@ class StoreView(APIView):
         if cache.get(cache_key) is not None:
             raise APIForbidden('An event with the same ID already exists (%s)' % (event_id,))
 
-        if project.get_option('sentry:scrub_data', True):
+        scrub_data_key = 'sentry:scrub_data'
+        scrub_data = org_options.get(scrub_data_key, False)
+        if not scrub_data:
+            scrub_data = project.get_option('sentry:scrub_data', True)
+        if scrub_data:
             # We filter data immediately before it ever gets into the queue
+            sensitive_fields_key = 'sentry:sensitive_fields'
+            sensitive_fields = (
+                org_options.get(sensitive_fields_key, []) +
+                project.get_option(sensitive_fields_key, [])
+            )
+
+            scrub_defaults_key = 'sentry:scrub_defaults'
+            scrub_defaults = org_options.get(scrub_defaults_key, False)
+            if not scrub_defaults:
+                scrub_defaults = project.get_option(scrub_defaults_key, True)
+
             inst = SensitiveDataFilter(
-                fields=project.get_option('sentry:sensitive_fields', None),
-                include_defaults=project.get_option('sentry:scrub_defaults', True),
+                fields=sensitive_fields,
+                include_defaults=scrub_defaults,
             )
             inst.apply(data)
 
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index b37b96cd2f..cc01e56502 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -4,6 +4,7 @@ from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
+from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import roles
@@ -39,11 +40,43 @@ class OrganizationSettingsForm(forms.ModelForm):
         help_text=_('Enable sharing of limited details on issues to anonymous users.'),
         required=False,
     )
+    scrub_data = forms.BooleanField(
+        label=_('Data Scrubber'),
+        help_text=_('Enable organization-wide server-side data scrubbing.'),
+        required=False
+    )
+    scrub_defaults = forms.BooleanField(
+        label=_('Use Default Scrubbers'),
+        help_text=_('Apply organization-wide default scrubbers to prevent things like passwords and credit cards from being stored.'),
+        required=False
+    )
+    sensitive_fields = forms.CharField(
+        label=_('Additional sensitive fields'),
+        help_text=_('Additional organization-wide field names to match against when scrubbing data. Separate multiple entries with a newline.'),
+        widget=forms.Textarea(attrs={
+            'placeholder': mark_safe(_('e.g. email')),
+            'class': 'span8',
+            'rows': '3',
+        }),
+        required=False,
+    )
+    scrub_ip_address = forms.BooleanField(
+        label=_('Don\'t store IP Addresses'),
+        help_text=_('Prevent IP addresses from being stored for new events organization-wide.'),
+        required=False
+    )
 
     class Meta:
         fields = ('name', 'slug', 'default_role')
         model = Organization
 
+    def clean_sensitive_fields(self):
+        value = self.cleaned_data.get('sensitive_fields')
+        if not value:
+            return
+
+        return filter(bool, (v.lower().strip() for v in value.split('\n')))
+
 
 class OrganizationSettingsView(OrganizationView):
     required_scope = 'org:write'
@@ -57,17 +90,32 @@ class OrganizationSettingsView(OrganizationView):
                 'allow_joinleave': bool(organization.flags.allow_joinleave),
                 'enhanced_privacy': bool(organization.flags.enhanced_privacy),
                 'allow_shared_issues': bool(not organization.flags.disable_shared_issues),
+                'scrub_data': bool(organization.get_option('sentry:scrub_data', False)),
+                'scrub_defaults': bool(organization.get_option('sentry:scrub_defaults', False)),
+                'sensitive_fields': '\n'.join(organization.get_option('sentry:sensitive_fields', None) or []),
+                'scrub_ip_address': bool(organization.get_option('sentry:scrub_ip_address', False)),
             }
         )
 
     def handle(self, request, organization):
         form = self.get_form(request, organization)
         if form.is_valid():
-            instance = form.save(commit=False)
-            instance.flags.allow_joinleave = form.cleaned_data['allow_joinleave']
-            instance.flags.enhanced_privacy = form.cleaned_data['enhanced_privacy']
-            instance.flags.disable_shared_issues = not form.cleaned_data['allow_shared_issues']
-            instance.save()
+            organization = form.save(commit=False)
+            organization.flags.allow_joinleave = form.cleaned_data['allow_joinleave']
+            organization.flags.enhanced_privacy = form.cleaned_data['enhanced_privacy']
+            organization.flags.disable_shared_issues = not form.cleaned_data['allow_shared_issues']
+            organization.save()
+
+            for opt in (
+                    'scrub_data',
+                    'scrub_defaults',
+                    'sensitive_fields',
+                    'scrub_ip_address'):
+                value = form.cleaned_data.get(opt)
+                if value is None:
+                    organization.delete_option('sentry:%s' % (opt,))
+                else:
+                    organization.update_option('sentry:%s' % (opt,), value)
 
             AuditLogEntry.objects.create(
                 organization=organization,
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 73019d3223..74c0cae3c5 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -68,11 +68,24 @@ class EditProjectForm(forms.ModelForm):
     blacklisted_ips = IPNetworksField(label=_('Blacklisted IP Addresses'), required=False,
         help_text=_('Separate multiple entries with a newline.'))
 
+    # Options that are overridden by Organization level settings
+    org_overrides = ('scrub_data', 'scrub_defaults', 'scrub_ip_address')
+
     class Meta:
         fields = ('name', 'team', 'slug')
         model = Project
 
     def __init__(self, request, organization, team_list, data, instance, *args, **kwargs):
+        # First, we need to check for the value overrides from the Organization options
+        # We need to do this before `initial` gets passed into the Form.
+        disabled = []
+        if 'initial' in kwargs:
+            for opt in self.org_overrides:
+                value = bool(organization.get_option('sentry:%s' % (opt,), False))
+                if value:
+                    disabled.append(opt)
+                    kwargs['initial'][opt] = value
+
         super(EditProjectForm, self).__init__(data=data, instance=instance, *args, **kwargs)
 
         self.organization = organization
@@ -81,6 +94,11 @@ class EditProjectForm(forms.ModelForm):
         self.fields['team'].choices = self.get_team_choices(team_list, instance.team)
         self.fields['team'].widget.choices = self.fields['team'].choices
 
+        # After the Form is initialized, we now need to disable the fields that have been
+        # overridden from Organization options.
+        for opt in disabled:
+            self.fields[opt].widget.attrs['disabled'] = 'disabled'
+
     def get_team_label(self, team):
         return '%s (%s)' % (team.name, team.slug)
 
@@ -161,7 +179,8 @@ class ProjectSettingsView(ProjectView):
 
         return EditProjectForm(
             request, organization, team_list, request.POST or None,
-            instance=project, initial={
+            instance=project,
+            initial={
                 'origins': '\n'.join(project.get_option('sentry:origins', ['*'])),
                 'token': security_token,
                 'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
@@ -186,9 +205,12 @@ class ProjectSettingsView(ProjectView):
                     'scrub_data',
                     'scrub_defaults',
                     'sensitive_fields',
-                    'scrub_ip_addresses',
+                    'scrub_ip_address',
                     'scrape_javascript',
                     'blacklisted_ips'):
+                # Value can't be overridden if set on the org level
+                if opt in form.org_overrides and organization.get_option('sentry:%s' % (opt,), False):
+                    continue
                 value = form.cleaned_data.get(opt)
                 if value is None:
                     project.delete_option('sentry:%s' % (opt,))
