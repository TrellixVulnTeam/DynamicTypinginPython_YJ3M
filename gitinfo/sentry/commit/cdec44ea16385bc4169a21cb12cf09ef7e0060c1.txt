commit cdec44ea16385bc4169a21cb12cf09ef7e0060c1
Author: Mark Story <mark@sentry.io>
Date:   Tue May 12 10:38:16 2020 -0400

    fix(pref-views) Add placeholder/loading state to summary stats (#18739)
    
    Add a placeholder/loading state for user stats so we don't reflow the
    layout as data loads.

diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
index 1aeee83548..8ae032bed7 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
@@ -7,7 +7,6 @@ import space from 'app/styles/space';
 import EventView from 'app/utils/discover/eventView';
 import {t} from 'app/locale';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
-import {assert} from 'app/types/utils';
 import DiscoverQuery from 'app/utils/discover/discoverQuery';
 
 type Props = {
@@ -16,6 +15,10 @@ type Props = {
   organization: Organization;
 };
 
+type Results = {
+  [key: string]: React.ReactNode;
+} | null;
+
 class UserStats extends React.Component<Props> {
   generateUserStatsEventView(eventView: EventView): EventView {
     // narrow the search conditions of the Performance Summary event view
@@ -37,9 +40,25 @@ class UserStats extends React.Component<Props> {
     return eventView;
   }
 
+  renderContents(stats: Results) {
+    return (
+      <Container>
+        <div>
+          <StatTitle>{t('Apdex Score')}</StatTitle>
+          <StatNumber>{!stats ? '\u2014' : stats['apdex()']}</StatNumber>
+        </div>
+        <div>
+          <StatTitle>{t('User Misery')}</StatTitle>
+          <StatNumber>{!stats ? '\u2014' : stats['user_misery(300)']}</StatNumber>
+        </div>
+      </Container>
+    );
+  }
+
   render() {
     const {organization, location} = this.props;
     const eventView = this.generateUserStatsEventView(this.props.eventView);
+    const columnOrder = eventView.getColumns();
 
     return (
       <DiscoverQuery
@@ -52,41 +71,28 @@ class UserStats extends React.Component<Props> {
           const hasResults =
             tableData && tableData.data && tableData.meta && tableData.data.length > 0;
 
-          if (isLoading || !tableData || !hasResults || !eventView.isValid()) {
-            return null;
+          if (
+            isLoading ||
+            !tableData ||
+            !tableData.meta ||
+            !hasResults ||
+            !eventView.isValid()
+          ) {
+            return this.renderContents(null);
           }
-
-          const columnOrder = eventView.getColumns();
-
-          assert(tableData.meta);
           const tableMeta = tableData.meta;
           const row = tableData.data[0];
 
-          const stats: {[key: string]: React.ReactNode} = columnOrder.reduce(
-            (acc, column) => {
-              const field = String(column.key);
-
-              const fieldRenderer = getFieldRenderer(field, tableMeta);
-
-              acc[field] = fieldRenderer(row, {organization, location});
-
-              return acc;
-            },
-            {}
-          );
-
-          return (
-            <Container>
-              <div>
-                <StatTitle>{t('Apdex Score')}</StatTitle>
-                <StatNumber>{stats['apdex()']}</StatNumber>
-              </div>
-              <div>
-                <StatTitle>{t('User Misery')}</StatTitle>
-                <StatNumber>{stats['user_misery(300)']}</StatNumber>
-              </div>
-            </Container>
-          );
+          const stats: Results = columnOrder.reduce((acc, column) => {
+            const field = String(column.key);
+
+            const fieldRenderer = getFieldRenderer(field, tableMeta);
+
+            acc[field] = fieldRenderer(row, {organization, location});
+
+            return acc;
+          }, {});
+          return this.renderContents(stats);
         }}
       </DiscoverQuery>
     );
