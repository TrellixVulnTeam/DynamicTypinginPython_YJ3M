commit f203abc0ed41c7d1b5fad365e678dc0f937d33b5
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Oct 3 16:19:22 2019 -0700

    feat(members): Add new Invite Members modal (#14886)

diff --git a/src/sentry/static/sentry/app/actionCreators/modal.tsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
index e7a50d168d..965d50f1f3 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -211,3 +211,10 @@ export function openDebugFileSourceModal(options: ModalOptions = {}) {
       });
     });
 }
+
+export async function openInviteMembersModal(options = {}) {
+  const mod = await import(/* webpackChunkName: "InviteMembersModal" */ 'app/components/modals/inviteMembersModal');
+  const {default: Modal, modalClassName} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />, {modalClassName});
+}
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx
new file mode 100644
index 0000000000..80c1956be6
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx
@@ -0,0 +1,389 @@
+import React from 'react';
+import styled, {css} from 'react-emotion';
+
+import {t, tn, tct} from 'app/locale';
+import {ModalRenderProps} from 'app/actionCreators/modal';
+import InlineSvg from 'app/components/inlineSvg';
+import Button from 'app/components/button';
+import space from 'app/styles/space';
+import AsyncComponent from 'app/components/asyncComponent';
+import {Organization} from 'app/types';
+import withLatestContext from 'app/utils/withLatestContext';
+import LoadingIndicator from 'app/components/loadingIndicator';
+
+import {InviteRow, InviteStatus, NormalizedInvite} from './types';
+import InviteRowControl from './inviteRowControl';
+
+type Props = AsyncComponent['props'] &
+  ModalRenderProps & {
+    organization: Organization;
+  };
+
+type State = AsyncComponent['state'] & {
+  pendingInvites: InviteRow[];
+  sendingInvites: boolean;
+  complete: boolean;
+  inviteStatus: InviteStatus;
+};
+
+const DEFAULT_ROLE = 'member';
+
+class InviteMembersModal extends AsyncComponent<Props, State> {
+  get inviteTemplate(): InviteRow {
+    return {emails: new Set(), teams: new Set(), role: DEFAULT_ROLE};
+  }
+
+  getEndpoints(): [string, string][] {
+    const orgId = this.props.organization.slug;
+
+    // TODO(epurkhiser): For admins we cannot lookup me, and will not have
+    // roles when viewing this modal as an admin. We need to add some hardcoded
+    // defaults like in the old page.
+
+    return [['member', `/organizations/${orgId}/members/me/`]];
+  }
+
+  getDefaultState() {
+    const state = super.getDefaultState();
+    return {
+      ...state,
+      pendingInvites: [this.inviteTemplate],
+      inviteStatus: {},
+      complete: false,
+      sendingInvites: false,
+    };
+  }
+
+  reset = () =>
+    this.setState({
+      pendingInvites: [this.inviteTemplate],
+      inviteStatus: {},
+      complete: false,
+      sendingInvites: false,
+    });
+
+  sendInvite = async (invite: NormalizedInvite) => {
+    const {slug} = this.props.organization;
+    const data = {
+      email: invite.email,
+      teams: [...invite.teams],
+      role: invite.role,
+    };
+
+    this.setState(state => ({
+      inviteStatus: {...state.inviteStatus, [invite.email]: {sent: false}},
+    }));
+
+    try {
+      await this.api.requestPromise(`/organizations/${slug}/members/`, {
+        method: 'POST',
+        data,
+      });
+    } catch (err) {
+      const errorResponse = err.responseJSON;
+
+      // Use the email error message if available. This inconsistently is
+      // returned as either a list of errors for the field, or a single error.
+      const emailError =
+        !errorResponse || !errorResponse.email
+          ? false
+          : Array.isArray(errorResponse.email)
+          ? errorResponse.email[0]
+          : errorResponse.email;
+
+      const error = emailError || t('Could not invite user');
+
+      this.setState(state => ({
+        inviteStatus: {...state.inviteStatus, [invite.email]: {sent: false, error}},
+      }));
+      return;
+    }
+
+    this.setState(state => ({
+      inviteStatus: {...state.inviteStatus, [invite.email]: {sent: true}},
+    }));
+  };
+
+  sendInvites = async () => {
+    this.setState({sendingInvites: true});
+    await Promise.all(this.invites.map(this.sendInvite));
+    this.setState({sendingInvites: false, complete: true});
+  };
+
+  addInviteRow = () =>
+    this.setState(state => ({
+      pendingInvites: [...state.pendingInvites, this.inviteTemplate],
+    }));
+
+  setEmails(emails: string[], index: number) {
+    this.setState(state => {
+      const pendingInvites = [...state.pendingInvites];
+      pendingInvites[index] = {...pendingInvites[index], emails: new Set(emails)};
+
+      return {pendingInvites};
+    });
+  }
+
+  setTeams(teams: string[], index: number) {
+    this.setState(state => {
+      const pendingInvites = [...state.pendingInvites];
+      pendingInvites[index] = {...pendingInvites[index], teams: new Set(teams)};
+
+      return {pendingInvites};
+    });
+  }
+
+  setRole(role: string, index: number) {
+    this.setState(state => {
+      const pendingInvites = [...state.pendingInvites];
+      pendingInvites[index] = {...pendingInvites[index], role};
+
+      return {pendingInvites};
+    });
+  }
+
+  removeInviteRow(index: number) {
+    this.setState(state => {
+      const pendingInvites = [...state.pendingInvites];
+      pendingInvites.splice(index, 1);
+      return {pendingInvites};
+    });
+  }
+
+  get invites(): NormalizedInvite[] {
+    return this.state.pendingInvites.reduce<NormalizedInvite[]>(
+      (acc, row) => [
+        ...acc,
+        ...[...row.emails].map(email => ({email, teams: row.teams, role: row.role})),
+      ],
+      []
+    );
+  }
+
+  get hasDuplicateEmails() {
+    const emails = this.invites.map(inv => inv.email);
+    return emails.length !== new Set(emails).size;
+  }
+
+  get isValidInvites() {
+    return this.invites.length > 0 && !this.hasDuplicateEmails;
+  }
+
+  get statusMessage() {
+    const {sendingInvites, complete, inviteStatus} = this.state;
+
+    if (sendingInvites) {
+      return (
+        <StatusMessage>
+          <LoadingIndicator mini relative hideMessage size={16} />
+          {t('Sending organization invitations...')}
+        </StatusMessage>
+      );
+    }
+
+    if (complete) {
+      const statuses = Object.values(inviteStatus);
+      const sentCount = statuses.filter(i => i.sent).length;
+      const errorCount = statuses.filter(i => i.error).length;
+
+      const invites = <strong>{tn('%d invite', '%d invites', sentCount)}</strong>;
+
+      return (
+        <StatusMessage status="success">
+          <InlineSvg src="icon-checkmark-sm" size="16px" />
+          {errorCount > 0
+            ? tct('Sent [invites], [failed] failed to send.', {
+                invites,
+                failed: errorCount,
+              })
+            : tct('Sent [invites]', {invites})}
+        </StatusMessage>
+      );
+    }
+
+    if (this.hasDuplicateEmails) {
+      return (
+        <StatusMessage status="error">
+          <InlineSvg src="icon-warning-sm" size="16px" />
+          {t('Duplicate emails between invite rows.')}
+        </StatusMessage>
+      );
+    }
+
+    return null;
+  }
+
+  render() {
+    const {Footer, closeModal, organization} = this.props;
+    const {pendingInvites, sendingInvites, complete, inviteStatus, member} = this.state;
+
+    const disableInputs = sendingInvites || complete;
+
+    return (
+      <React.Fragment>
+        <Heading>
+          <InlineSvg src="icon-mail" size="36px" />
+          {t('Invite New Members')}
+        </Heading>
+        <Subtext>
+          {t('Invite new members by email invitation to join your Organization.')}
+        </Subtext>
+
+        <InviteeHeadings>
+          <div>{t('Email addresses')}</div>
+          <div>{t('Role')}</div>
+          <div>{t('Add to team')}</div>
+        </InviteeHeadings>
+
+        {pendingInvites.map(({emails, role, teams}, i) => (
+          <StyledInviteRow
+            key={i}
+            disabled={disableInputs}
+            emails={[...emails]}
+            role={role}
+            teams={[...teams]}
+            roleOptions={member && member.roles}
+            teamOptions={organization.teams}
+            inviteStatus={inviteStatus}
+            onRemove={() => this.removeInviteRow(i)}
+            onChangeEmails={opts => this.setEmails(opts.map(v => v.value), i)}
+            onChangeRole={({value}) => this.setRole(value, i)}
+            onChangeTeams={opts => this.setTeams(opts.map(v => v.value), i)}
+            disableRemove={disableInputs || pendingInvites.length === 1}
+          />
+        ))}
+
+        <AddButton
+          disabled={disableInputs}
+          priority="link"
+          onClick={this.addInviteRow}
+          icon="icon-circle-add"
+        >
+          {t('Add another')}
+        </AddButton>
+
+        <Footer>
+          <FooterContent>
+            <div>{this.statusMessage}</div>
+
+            {complete ? (
+              <React.Fragment>
+                <Button data-test-id="send-more" size="small" onClick={this.reset}>
+                  {t('Send more invites')}
+                </Button>
+                <Button
+                  data-test-id="close"
+                  priority="primary"
+                  size="small"
+                  onClick={closeModal}
+                >
+                  {t('Close')}
+                </Button>
+              </React.Fragment>
+            ) : (
+              <React.Fragment>
+                <Button
+                  data-test-id="cancel"
+                  size="small"
+                  onClick={closeModal}
+                  disabled={disableInputs}
+                >
+                  {t('Cancel')}
+                </Button>
+                <Button
+                  size="small"
+                  data-test-id="send-invites"
+                  priority="primary"
+                  disabled={!this.isValidInvites || disableInputs}
+                  onClick={this.sendInvites}
+                >
+                  {this.invites.length > 0
+                    ? tn('Send invite', 'Send invites (%d)', this.invites.length)
+                    : t('Send invites')}
+                </Button>
+              </React.Fragment>
+            )}
+          </FooterContent>
+        </Footer>
+      </React.Fragment>
+    );
+  }
+}
+
+const Heading = styled('h1')`
+  display: grid;
+  grid-gap: ${space(1.5)};
+  grid-template-columns: max-content 1fr;
+  align-items: center;
+  font-weight: 400;
+  font-size: ${p => p.theme.headerFontSize};
+  margin-top: 0;
+  margin-bottom: ${space(0.75)};
+`;
+
+const Subtext = styled('p')`
+  color: ${p => p.theme.gray3};
+  margin-bottom: ${space(3)};
+`;
+
+const inviteRowGrid = css`
+  display: grid;
+  grid-gap: ${space(1.5)};
+  grid-template-columns: 3fr 180px 2fr max-content;
+`;
+
+const InviteeHeadings = styled('div')`
+  ${inviteRowGrid};
+
+  margin-bottom: ${space(1)};
+  font-weight: 600;
+  text-transform: uppercase;
+  font-size: ${p => p.theme.fontSizeSmall};
+`;
+
+const StyledInviteRow = styled(InviteRowControl)`
+  ${inviteRowGrid};
+  margin-bottom: ${space(1.5)};
+`;
+
+const AddButton = styled(Button)`
+  margin-top: ${space(3)};
+`;
+
+const FooterContent = styled('div')`
+  width: 100%;
+  display: grid;
+  grid-template-columns: 1fr max-content max-content;
+  grid-gap: ${space(1)};
+`;
+
+const StatusMessage = styled('div')<{status?: 'success' | 'error'}>`
+  display: grid;
+  grid-template-columns: max-content max-content;
+  grid-gap: ${space(1)};
+  align-items: center;
+  font-size: ${p => p.theme.fontSizeMedium};
+
+  color: ${p => (p.status === 'error' ? p.theme.red : p.theme.gray3)};
+
+  ${p =>
+    p.status === 'success' &&
+    css`
+      ${InlineSvg} {
+        color: ${p.theme.green};
+      }
+    `};
+`;
+
+const modalClassName = css`
+  padding: 50px;
+
+  .modal-dialog {
+    position: unset;
+    width: 100%;
+    max-width: 800px;
+    margin: 50px auto;
+  }
+`;
+export {modalClassName};
+export default withLatestContext(InviteMembersModal);
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx
new file mode 100644
index 0000000000..d5c9f36b58
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx
@@ -0,0 +1,95 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import {Team} from 'app/types';
+import Button from 'app/components/button';
+import SelectControl from 'app/components/forms/selectControl';
+
+import RoleSelectControl from './roleSelectControl';
+import renderEmailValue from './renderEmailValue';
+import {InviteStatus} from './types';
+
+type Props = {
+  className?: string;
+  disabled: boolean;
+  disableRemove: boolean;
+  emails: string[];
+  role: string;
+  teams: string[];
+  roleOptions: string[];
+  teamOptions: Team[];
+  inviteStatus: InviteStatus;
+  onRemove: () => void;
+
+  // TODO(ts): Update when we have react-select typings
+  onChangeEmails: (options: any) => void;
+  onChangeRole: (value: any) => void;
+  onChangeTeams: (value: any) => void;
+};
+
+const InviteRowControl = ({
+  className,
+  disabled,
+  emails,
+  role,
+  teams,
+  roleOptions,
+  teamOptions,
+  inviteStatus,
+  onRemove,
+  onChangeEmails,
+  onChangeRole,
+  onChangeTeams,
+  disableRemove,
+}: Props) => (
+  <div className={className}>
+    <div>
+      <SelectControl
+        disabled={disabled}
+        placeholder={t('Enter one or more email')}
+        value={emails}
+        options={emails.map(value => ({
+          value,
+          label: value,
+        }))}
+        valueComponent={props => renderEmailValue(inviteStatus[props.value.value], props)}
+        onChange={onChangeEmails}
+        multiple
+        creatable
+        clearable
+        noMenu
+      />
+    </div>
+    <div>
+      <RoleSelectControl
+        disabled={disabled}
+        value={role}
+        roles={roleOptions}
+        onChange={onChangeRole}
+      />
+    </div>
+    <div>
+      <SelectControl
+        disabled={disabled}
+        placeholder={t('Add to teams...')}
+        value={teams}
+        options={teamOptions.map(({slug}) => ({
+          value: slug,
+          label: `#${slug}`,
+        }))}
+        onChange={onChangeTeams}
+        multiple
+        clearable
+      />
+    </div>
+    <Button
+      borderless
+      icon="icon-close"
+      size="micro"
+      onClick={onRemove}
+      disabled={disableRemove}
+    />
+  </div>
+);
+
+export default InviteRowControl;
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/renderEmailValue.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/renderEmailValue.tsx
new file mode 100644
index 0000000000..1928f15e7a
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/renderEmailValue.tsx
@@ -0,0 +1,75 @@
+import React from 'react';
+import styled, {css} from 'react-emotion';
+import {Value} from 'react-select';
+
+import InlineSvg from 'app/components/inlineSvg';
+import space from 'app/styles/space';
+import Tooltip from 'app/components/tooltip';
+import LoadingIndicator from 'app/components/loadingIndicator';
+
+import {InviteStatus} from './types';
+
+function renderEmailValue(status: InviteStatus[string], valueProps) {
+  const {children, ...props} = valueProps;
+  const error = status && status.error;
+
+  const emailLabel =
+    status === undefined ? (
+      children
+    ) : (
+      <Tooltip disabled={!error} title={error}>
+        <EmailLabel>
+          {children}
+          {!status.sent && !status.error && <SendingIndicator />}
+          {status.error && <InlineSvg src="icon-warning-sm" size="10px" />}
+          {status.sent && <InlineSvg src="icon-checkmark-sm" size="10px" />}
+        </EmailLabel>
+      </Tooltip>
+    );
+
+  return (
+    <EmailValue status={status}>
+      <Value {...props}>{emailLabel}</Value>
+    </EmailValue>
+  );
+}
+
+const EmailValue = styled('div')<{status: InviteStatus[string]}>`
+  display: initial;
+
+  .Select--multi.is-disabled & .Select-value {
+    ${p =>
+      p.status &&
+      p.status.error &&
+      css`
+        color: ${p.theme.red};
+        border-color: ${p.theme.redLight};
+        background-color: ${p.theme.redLightest};
+      `};
+  }
+
+  .Select-value ${InlineSvg} {
+    color: ${p => (p.status && p.status.sent ? p.theme.green : 'inherit')};
+  }
+`;
+
+const EmailLabel = styled('div')`
+  display: inline-grid;
+  grid-auto-flow: column;
+  grid-gap: ${space(0.5)};
+  align-items: center;
+`;
+
+const SendingIndicator = styled(LoadingIndicator)`
+  margin: 0;
+  .loading-indicator {
+    border-width: 2px;
+  }
+`;
+
+SendingIndicator.defaultProps = {
+  hideMessage: true,
+  size: 14,
+};
+
+export default renderEmailValue;
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx
new file mode 100644
index 0000000000..6d1c5e6de2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx
@@ -0,0 +1,60 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import space from 'app/styles/space';
+import SelectControl from 'app/components/forms/selectControl';
+import {MemberRole} from 'app/types';
+
+type Props = SelectControl['props'] & {
+  roles: MemberRole[];
+};
+
+const RoleSelector = ({roles, ...props}: Props) => (
+  <RoleSelectControl
+    options={roles && roles.map(r => ({value: r.id, label: r.name}))}
+    optionRenderer={option => {
+      const {name, desc} = roles.find(r => r.id === option.value);
+
+      return (
+        <RoleItem>
+          <h1>{name}</h1>
+          <div>{desc}</div>
+        </RoleItem>
+      );
+    }}
+    {...props}
+  />
+);
+
+const RoleSelectControl = styled(SelectControl)`
+  .Select-menu-outer {
+    margin-top: ${space(1)};
+    width: 350px;
+    border-radius: 4px;
+    overflow: hidden;
+    box-shadow: 0 0 6px rgba(0, 0, 0, 0.15);
+  }
+
+  &.Select.is-focused.is-open > .Select-control {
+    border-radius: 4px;
+  }
+
+  .Select-option:not(:last-child) {
+    border-bottom: 1px solid ${p => p.theme.borderLight};
+  }
+`;
+
+const RoleItem = styled('div')`
+  display: grid;
+  grid-template-columns: 80px 1fr;
+  grid-gap: ${space(1)};
+
+  h1,
+  div {
+    font-size: ${p => p.theme.fontSizeSmall};
+    line-height: 1.4;
+    margin: ${space(0.25)} 0;
+  }
+`;
+
+export default RoleSelector;
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/types.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/types.tsx
new file mode 100644
index 0000000000..a11ad42d59
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/types.tsx
@@ -0,0 +1,13 @@
+export type InviteStatus = {[email: string]: {error?: string; sent: boolean}};
+
+export type InviteRow = {
+  emails: Set<string>;
+  teams: Set<string>;
+  role: string;
+};
+
+export type NormalizedInvite = {
+  email: string;
+  teams: Set<string>;
+  role: string;
+};
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 3f69334b25..d8eb661647 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -14,6 +14,7 @@ export type Organization = {
   projects: Project[];
   access: string[];
   features: string[];
+  teams: Team[];
 };
 
 export type OrganizationDetailed = Organization & {
@@ -482,3 +483,9 @@ export type Commit = {
   repository?: Repository;
   author?: User;
 };
+
+export type MemberRole = {
+  id: string;
+  name: string;
+  desc: string;
+};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
index 9a3803229b..21731f2809 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
@@ -12,8 +12,8 @@ import ConfigStore from 'app/stores/configStore';
 import Pagination from 'app/components/pagination';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import recreateRoute from 'app/utils/recreateRoute';
 import {redirectToRemainingOrganization} from 'app/actionCreators/organizations';
+import {openInviteMembersModal} from 'app/actionCreators/modal';
 
 import OrganizationAccessRequests from './organizationAccessRequests';
 import OrganizationMemberRow from './organizationMemberRow';
@@ -133,7 +133,7 @@ class OrganizationMembersView extends AsyncView {
 
   handleDeny = id => this.approveOrDeny(false, id);
 
-  handleRemove = ({id, name}, e) => {
+  handleRemove = ({id, name}) => {
     const {organization} = this.context;
     const {slug: orgName} = organization;
 
@@ -155,7 +155,7 @@ class OrganizationMembersView extends AsyncView {
     );
   };
 
-  handleLeave = ({id}, e) => {
+  handleLeave = ({id}) => {
     const {organization} = this.context;
     const {slug: orgName} = organization;
 
@@ -186,7 +186,7 @@ class OrganizationMembersView extends AsyncView {
     this.api.request(`/organizations/${this.props.params.orgId}/members/${id}/`, {
       method: 'PUT',
       data: {reinvite: 1},
-      success: data =>
+      success: () =>
         this.setState(state => ({
           invited: state.invited.set(id, 'success'),
         })),
@@ -247,7 +247,7 @@ class OrganizationMembersView extends AsyncView {
                   ? t('You do not have enough permission to add new members')
                   : undefined
               }
-              to={recreateRoute('new/', {routes, params})}
+              onClick={openInviteMembersModal}
               icon="icon-circle-add"
               data-test-id="invite-member"
             >
diff --git a/tests/js/spec/components/modals/inviteMembersModal.spec.jsx b/tests/js/spec/components/modals/inviteMembersModal.spec.jsx
new file mode 100644
index 0000000000..9aa5112b7a
--- /dev/null
+++ b/tests/js/spec/components/modals/inviteMembersModal.spec.jsx
@@ -0,0 +1,260 @@
+import {Modal} from 'react-bootstrap';
+import React from 'react';
+
+import {mount} from 'enzyme';
+import InviteMembersModal from 'app/components/modals/inviteMembersModal';
+
+describe('InviteMembersModal', function() {
+  const org = TestStubs.Organization();
+
+  const roles = [
+    {
+      id: 'admin',
+      name: 'Admin',
+      desc: 'This is the admin role',
+    },
+    {
+      id: 'member',
+      name: 'Member',
+      desc: 'This is the member role',
+    },
+  ];
+
+  MockApiClient.addMockResponse({
+    url: `/organizations/${org.slug}/members/me/`,
+    method: 'GET',
+    body: {roles},
+  });
+
+  it('renders', async function() {
+    const wrapper = mount(
+      <InviteMembersModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        Footer={Modal.Footer}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    // Starts with one invite row
+    expect(wrapper.find('StyledInviteRow')).toHaveLength(1);
+
+    // We have two roles loaded from the members/me endpoint, defaulting to the
+    // 'member' role.
+    expect(wrapper.find('RoleSelectControl').props().options).toHaveLength(roles.length);
+    expect(wrapper.find('RoleSelectControl Value').text()).toBe('Member');
+  });
+
+  it('can add a second row', async function() {
+    const wrapper = mount(
+      <InviteMembersModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        Footer={Modal.Footer}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('StyledInviteRow')).toHaveLength(1);
+    wrapper.find('AddButton').simulate('click');
+    expect(wrapper.find('StyledInviteRow')).toHaveLength(2);
+  });
+
+  it('errors on duplicate emails', async function() {
+    const wrapper = mount(
+      <InviteMembersModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        Footer={Modal.Footer}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper.find('AddButton').simulate('click');
+    expect(wrapper.find('StyledInviteRow')).toHaveLength(2);
+
+    const rows = wrapper.find('StyledInviteRow');
+
+    rows
+      .at(0)
+      .props()
+      .onChangeEmails([{value: 'test@test.com'}]);
+    rows
+      .at(1)
+      .props()
+      .onChangeEmails([{value: 'test@test.com'}]);
+    wrapper.update();
+
+    expect(wrapper.find('StatusMessage[status="error"]').text()).toBe(
+      'Duplicate emails between invite rows.'
+    );
+  });
+
+  it('indicates the total invites on the invite button', function() {
+    const wrapper = mount(
+      <InviteMembersModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        Footer={Modal.Footer}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('StyledInviteRow')
+      .first()
+      .props()
+      .onChangeEmails([{value: 'test1@test.com'}, {value: 'test2@test.com'}]);
+    wrapper.update();
+
+    expect(wrapper.find('Button[data-test-id="send-invites"]').text()).toBe(
+      'Send invites (2)'
+    );
+  });
+
+  it('can be closed', function() {
+    const close = jest.fn();
+
+    const wrapper = mount(
+      <InviteMembersModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        Footer={Modal.Footer}
+        organization={org}
+        closeModal={close}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper.find('Button[data-test-id="cancel"]').simulate('click');
+    expect(close).toHaveBeenCalled();
+  });
+
+  it('sends all successful invites', async function() {
+    const createMemberMock = MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/members/`,
+      method: 'POST',
+    });
+
+    const wrapper = mount(
+      <InviteMembersModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        Footer={Modal.Footer}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper.find('AddButton').simulate('click');
+
+    // Setup two rows, one email each, the first with a admin role.
+    const inviteRowProps = wrapper
+      .find('StyledInviteRow')
+      .first()
+      .props();
+
+    inviteRowProps.onChangeEmails([{value: 'test1@test.com'}]);
+    inviteRowProps.onChangeRole({value: 'admin'});
+    inviteRowProps.onChangeTeams([{value: 'team1'}]);
+    wrapper
+      .find('StyledInviteRow')
+      .at(1)
+      .props()
+      .onChangeEmails([{value: 'test2@test.com'}]);
+
+    wrapper.update();
+    wrapper.find('FooterContent Button[priority="primary"]').simulate('click');
+
+    // Verify data sent to the backend
+    expect(createMemberMock).toHaveBeenCalledTimes(2);
+
+    expect(createMemberMock).toHaveBeenNthCalledWith(
+      1,
+      `/organizations/${org.slug}/members/`,
+      expect.objectContaining({
+        data: {email: 'test1@test.com', role: 'admin', teams: ['team1']},
+      })
+    );
+    expect(createMemberMock).toHaveBeenNthCalledWith(
+      2,
+      `/organizations/${org.slug}/members/`,
+      expect.objectContaining({
+        data: {email: 'test2@test.com', role: 'member', teams: []},
+      })
+    );
+
+    // Pending invites being created..
+    expect(
+      wrapper.find('InviteRowControl SelectControl EmailLabel LoadingIndicator')
+    ).toHaveLength(2);
+
+    expect(wrapper.find('Button[data-test-id="cancel"][disabled]').exists()).toBe(true);
+    expect(wrapper.find('Button[data-test-id="send-invites"][disabled]').exists()).toBe(
+      true
+    );
+    expect(wrapper.find('StatusMessage LoadingIndicator').exists()).toBe(true);
+
+    // Await request completion
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('StatusMessage').text()).toBe('Sent 2 invites');
+    expect(wrapper.find('Button[data-test-id="close"]').exists()).toBe(true);
+    expect(wrapper.find('Button[data-test-id="send-more"]').exists()).toBe(true);
+    expect(
+      wrapper.find('SelectControl EmailLabel InlineSvg[src="icon-checkmark-sm"]').exists()
+    ).toBe(true);
+
+    // Send more reset the modal
+    wrapper.find('Button[data-test-id="send-more"]').simulate('click');
+    expect(wrapper.find('InviteRowControl SelectControl EmailLabel').exists()).toBe(
+      false
+    );
+  });
+
+  it('marks failed invites', async function() {
+    const faildCreateMemberMock = MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/members/`,
+      method: 'POST',
+      statusCode: 401,
+    });
+
+    const wrapper = mount(
+      <InviteMembersModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        Footer={Modal.Footer}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    const inviteRowProps = wrapper
+      .find('StyledInviteRow')
+      .first()
+      .props();
+
+    inviteRowProps.onChangeEmails([{value: 'bademail'}]);
+    wrapper.update();
+    wrapper.find('FooterContent Button[priority="primary"]').simulate('click');
+
+    expect(faildCreateMemberMock).toHaveBeenCalled();
+
+    // Await request completion
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('StatusMessage').text()).toBe(
+      'Sent 0 invites, 1 failed to send.'
+    );
+
+    expect(
+      wrapper.find('SelectControl EmailLabel InlineSvg[src="icon-warning-sm"]').exists()
+    ).toBe(true);
+  });
+});
