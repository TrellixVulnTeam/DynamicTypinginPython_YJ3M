commit d833b43a384f7edf29b8a3800976f85ce5e79bef
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Dec 5 10:47:32 2019 -0800

    ref: Decouple NodeData from the Django ORM (#15704)
    
    NodeData no longer assumes it's directly tied to a NodeField, instead we
    just pass the parts that we need (ref function and ref version) to
    NodeData.
    
    This will help to migrate the Event model away from the Django ORM.

diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 1e78b74e10..a63390f032 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -37,14 +37,14 @@ class NodeData(collections.MutableMapping):
         data={...} means, this is an object that should be saved to nodestore.
     """
 
-    def __init__(self, field, id, data=None, wrapper=None):
-        self.field = field
+    def __init__(self, id, data=None, wrapper=None, ref_version=None, ref_func=None):
         self.id = id
         self.ref = None
         # ref version is used to discredit a previous ref
         # (this does not mean the Event is mutable, it just removes ref checking
         #  in the case of something changing on the data model)
-        self.ref_version = None
+        self.ref_version = ref_version
+        self.ref_func = ref_func
         self.wrapper = wrapper
         if data is not None and self.wrapper is not None:
             data = self.wrapper(data)
@@ -91,9 +91,9 @@ class NodeData(collections.MutableMapping):
         return "<%s: id=%s>" % (cls_name, self.id)
 
     def get_ref(self, instance):
-        if not self.field or not self.field.ref_func:
+        if not self.ref_func:
             return
-        return self.field.ref_func(instance)
+        return self.ref_func(instance)
 
     def copy(self):
         return self.data.copy()
@@ -113,19 +113,14 @@ class NodeData(collections.MutableMapping):
             return self._node_data
 
         rv = {}
-        if self.field is not None and self.field.wrapper is not None:
-            rv = self.field.wrapper(rv)
+        if self.wrapper is not None:
+            rv = self.wrapper(rv)
         return rv
 
     def bind_data(self, data, ref=None):
         self.ref = data.pop("_ref", ref)
-        self.ref_version = data.pop("_ref_version", None)
-        if (
-            self.field is not None
-            and self.ref_version == self.field.ref_version
-            and ref is not None
-            and self.ref != ref
-        ):
+        ref_version = data.pop("_ref_version", None)
+        if ref_version == self.ref_version and ref is not None and self.ref != ref:
             raise NodeIntegrityFailure(
                 "Node reference for %s is invalid: %s != %s" % (self.id, ref, self.ref)
             )
@@ -137,7 +132,7 @@ class NodeData(collections.MutableMapping):
         ref = self.get_ref(instance)
         if ref:
             self.data["_ref"] = ref
-            self.data["_ref_version"] = self.field.ref_version
+            self.data["_ref_version"] = self.ref_version
 
     def save(self):
         """
@@ -218,7 +213,13 @@ class NodeField(GzippedDictField):
             # to load data from, and no data to save.
             value = None
 
-        return NodeData(self, node_id, value, wrapper=self.wrapper)
+        return NodeData(
+            node_id,
+            value,
+            wrapper=self.wrapper,
+            ref_version=self.ref_version,
+            ref_func=self.ref_func,
+        )
 
     def get_prep_value(self, value):
         """
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 7ecdebb010..0425deab27 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -424,7 +424,7 @@ class SnubaEvent(EventCommon):
         node_id = SnubaEvent.generate_node_id(
             self.snuba_data["project_id"], self.snuba_data["event_id"]
         )
-        self.data = NodeData(None, node_id, data=None, wrapper=EventDict)
+        self.data = NodeData(node_id, data=None, wrapper=EventDict)
 
     def __getattr__(self, name):
         """
@@ -542,6 +542,10 @@ class SnubaEvent(EventCommon):
         raise NotImplementedError
 
 
+def ref_func(x):
+    return x.project_id or x.project.id
+
+
 class Event(EventCommon, Model):
     """
     An event backed by data stored in postgres.
@@ -560,7 +564,7 @@ class Event(EventCommon, Model):
     data = NodeField(
         blank=True,
         null=True,
-        ref_func=lambda x: x.project_id or x.project.id,
+        ref_func=ref_func,
         ref_version=2,
         wrapper=EventDict,
         skip_nodestore_save=True,
diff --git a/src/sentry/models/rawevent.py b/src/sentry/models/rawevent.py
index 35bf4970e7..e197a6998f 100644
--- a/src/sentry/models/rawevent.py
+++ b/src/sentry/models/rawevent.py
@@ -8,6 +8,10 @@ from sentry.db.models.manager import BaseManager
 from sentry.utils.canonical import CanonicalKeyView
 
 
+def ref_func(x):
+    return x.project_id or x.project.id
+
+
 class RawEvent(Model):
     __core__ = False
 
@@ -15,11 +19,7 @@ class RawEvent(Model):
     event_id = models.CharField(max_length=32, null=True)
     datetime = models.DateTimeField(default=timezone.now)
     data = NodeField(
-        blank=True,
-        null=True,
-        ref_func=lambda x: x.project_id or x.project.id,
-        ref_version=1,
-        wrapper=CanonicalKeyView,
+        blank=True, null=True, ref_func=ref_func, ref_version=1, wrapper=CanonicalKeyView
     )
 
     objects = BaseManager()
