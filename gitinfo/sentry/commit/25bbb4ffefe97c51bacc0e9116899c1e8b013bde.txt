commit 25bbb4ffefe97c51bacc0e9116899c1e8b013bde
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Oct 24 10:31:16 2017 -0700

    ref(saml): Harden the ACS endpoint
    
    This fixes a few breaking issues with the SAML ACS endpoint:
    
     1. Setup of a SAML2 provider was broken during the ACS setup, as the
        dispatch would always assume it was IdP initiated authentication due
        to the brittle 'auth' session key check, which changed in 03c045373.
    
        This caused it to fall through logic in the
        AuthOrganizationLoginView that would trigger a redirect and flow
        through the `sentry.web.frontend.Base.respond` method causing
        SENTRY-4ZP.
    
     2. This also cause similar problems when no provider is configured and
        the user attempts to do IdP initiated auth. This is fixed by
        re-implementing the IdP initiated auth flow directly in the handler
        instead of dispatching to the AuthOrganizationLoginView which has
        logic more specific to sentry user initiated login.

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index df693d472a..1c2c036daa 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -129,6 +129,9 @@ class AuthHelper(object):
     @classmethod
     def get_for_request(cls, request):
         state = RedisBackedState(request)
+        if not state.is_valid():
+            return None
+
         organization_id = state.org_id
         if not organization_id:
             logging.info('Invalid SSO data found')
diff --git a/src/sentry/auth/providers/saml2.py b/src/sentry/auth/providers/saml2.py
index ba9ea97834..9c5a54496e 100644
--- a/src/sentry/auth/providers/saml2.py
+++ b/src/sentry/auth/providers/saml2.py
@@ -82,25 +82,39 @@ class SAML2LoginView(AuthView):
 class SAML2AcceptACSView(BaseView):
     @method_decorator(csrf_exempt)
     def dispatch(self, request, organization_slug):
-        # NB: The 'auth' key is used in the helper
-        in_auth_flow = request.session.get('auth', False)
+        from sentry.auth.helper import AuthHelper
+        helper = AuthHelper.get_for_request(request)
 
-        # SP initiated authentication
-        if in_auth_flow:
+        # SP initiated authentication, request helper is provided
+        if helper:
             from sentry.web.frontend.auth_provider_login import AuthProviderLoginView
             sso_login = AuthProviderLoginView()
             return sso_login.handle(request)
 
-        # IdP initiated authentication. Start from org login flow
-        from sentry.web.frontend.auth_organization_login import AuthOrganizationLoginView
+        # IdP initiated authentication. The organizatio_slug must be valid and
+        # an auth provider must exist for this organization to proceed with
+        # IdP initiated SAML auth.
+        try:
+            organization = Organization.objects.get(slug=organization_slug)
+        except Organization.DoesNotExist:
+            messages.add_message(request, messages.ERROR, ERR_NO_SAML_SSO)
+            return self.redirect(reverse('sentry-login'))
+
+        try:
+            auth_provider = AuthProvider.objects.get(organization=organization)
+        except AuthProvider.DoesNotExist:
+            messages.add_message(request, messages.ERROR, ERR_NO_SAML_SSO)
+            return self.redirect(reverse('sentry-login'))
 
-        # AuthOranizationLogin will init the login flow *only if* the ``init``
-        # parameter is set.
-        request.POST = request.POST.copy()
-        request.POST['init'] = True
+        helper = AuthHelper(
+            request=request,
+            organization=organization,
+            auth_provider=auth_provider,
+            flow=AuthHelper.FLOW_LOGIN,
+        )
 
-        org_login = AuthOrganizationLoginView()
-        return org_login.handle(request, organization_slug)
+        helper.init_pipeline()
+        return helper.current_step()
 
 
 class SAML2ACSView(AuthView):
diff --git a/tests/sentry/web/frontend/test_auth_saml2.py b/tests/sentry/web/frontend/test_auth_saml2.py
index 3e2deb7a48..9b623112fb 100644
--- a/tests/sentry/web/frontend/test_auth_saml2.py
+++ b/tests/sentry/web/frontend/test_auth_saml2.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import six
 import pytest
 import base64
 import mock
@@ -12,6 +13,7 @@ from django.core.urlresolvers import reverse
 from sentry.auth.providers.saml2 import SAML2Provider, Attributes, HAS_SAML2
 from sentry.models import AuthProvider
 from sentry.testutils import AuthProviderTestCase
+from sentry.testutils.helpers import Feature
 
 
 dummy_provider_config = {
@@ -34,6 +36,9 @@ class DummySAML2Provider(SAML2Provider):
     def get_saml_setup_pipeline(self):
         return []
 
+    def build_config(self, state):
+        return dummy_provider_config
+
 
 @pytest.mark.skipif(not HAS_SAML2, reason='SAML2 library is not installed')
 class AuthSAML2Test(AuthProviderTestCase):
@@ -76,6 +81,10 @@ class AuthSAML2Test(AuthProviderTestCase):
     def acs_path(self):
         return reverse('sentry-auth-organization-saml-acs', args=['saml2-org'])
 
+    @fixture
+    def setup_path(self):
+        return reverse('sentry-organization-auth-settings', args=['saml2-org'])
+
     def test_redirects_to_idp(self):
         resp = self.client.post(self.login_path, {'init': True})
 
@@ -86,7 +95,7 @@ class AuthSAML2Test(AuthProviderTestCase):
         assert redirect.path == '/sso_url'
         assert 'SAMLRequest' in query
 
-    def accept_auth(self):
+    def accept_auth(self, **kargs):
         saml_response = self.load_fixture('saml2_auth_response.xml')
         saml_response = base64.b64encode(saml_response)
 
@@ -94,18 +103,52 @@ class AuthSAML2Test(AuthProviderTestCase):
         is_valid = 'onelogin.saml2.response.OneLogin_Saml2_Response.is_valid'
 
         with mock.patch(is_valid, return_value=True):
-            resp = self.client.post(self.acs_path, {'SAMLResponse': saml_response})
-
-        assert resp.status_code == 200
-        assert resp.context['existing_user'] == self.user
+            return self.client.post(self.acs_path, {'SAMLResponse': saml_response}, **kargs)
 
     def test_auth_sp_initiated(self):
         # Start auth process from SP side
         self.client.post(self.login_path, {'init': True})
-        self.accept_auth()
+        auth = self.accept_auth()
+
+        assert auth.status_code == 200
+        assert auth.context['existing_user'] == self.user
 
     def test_auth_idp_initiated(self):
-        self.accept_auth()
+        auth = self.accept_auth()
+
+        assert auth.status_code == 200
+        assert auth.context['existing_user'] == self.user
+
+    def test_auth_setup(self):
+        self.auth_provider.delete()
+        self.login_as(self.user)
+
+        data = {'init': True, 'provider': self.provider_name}
+
+        with Feature(['organizations:sso', 'organizations:sso-saml2']):
+            setup = self.client.post(self.setup_path, data)
+
+        assert setup.status_code == 302
+        redirect = urlparse(setup.get('Location', ''))
+        assert redirect.path == '/sso_url'
+
+        auth = self.accept_auth(follow=True)
+
+        messages = map(lambda m: six.text_type(m), auth.context['messages'])
+
+        assert len(messages) == 2
+        assert messages[0] == 'You have successfully linked your account to your SSO provider.'
+        assert messages[1].startswith('SSO has been configured for your organization')
+
+    def test_auth_idp_initiated_no_provider(self):
+        self.auth_provider.delete()
+        auth = self.accept_auth(follow=True)
+
+        assert auth.status_code == 200
+
+        messages = map(lambda m: six.text_type(m), auth.context['messages'])
+        assert len(messages) == 1
+        assert messages[0] == 'The organization does not exist or does not have SAML SSO enabled.'
 
     def test_saml_metadata(self):
         path = reverse('sentry-auth-organization-saml-metadata', args=['saml2-org'])
