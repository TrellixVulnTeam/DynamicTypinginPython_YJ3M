commit f356e704449bff14f53edcfcfa69daf56ee06996
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jun 4 14:24:18 2020 -0700

    feat(ui): Add row-level error handling to Alerts list (#19184)
    
    This adds error boxes to specific portions of alert list rows (e.g. if `events-stats` fails to load). Also adds an `<ErrorBoundary>` for the row.

diff --git a/src/sentry/static/sentry/app/components/placeholder.tsx b/src/sentry/static/sentry/app/components/placeholder.tsx
index b5be242c51..eb3032da70 100644
--- a/src/sentry/static/sentry/app/components/placeholder.tsx
+++ b/src/sentry/static/sentry/app/components/placeholder.tsx
@@ -16,13 +16,14 @@ type DefaultProps = Readonly<typeof defaultProps>;
 type Props = {
   className?: string;
   children?: React.ReactNode;
+  error?: React.ReactNode;
 } & Partial<DefaultProps>;
 
 const Placeholder = styled((props: Props) => {
-  const {className, children} = props;
+  const {className, children, error} = props;
   return (
     <div data-test-id="loading-placeholder" className={className}>
-      {children}
+      {error || children}
     </div>
   );
 })<Props>`
@@ -31,7 +32,8 @@ const Placeholder = styled((props: Props) => {
   flex-shrink: 0;
   justify-content: center;
 
-  background-color: ${p => p.theme.placeholderBackground};
+  background-color: ${p => (p.error ? p.theme.red100 : p.theme.placeholderBackground)};
+${p => p.error && `color: ${p.theme.red300};`}
   width: ${p => p.width};
   height: ${p => p.height};
   ${p => (p.shape === 'circle' ? 'border-radius: 100%;' : '')}
diff --git a/src/sentry/static/sentry/app/views/alerts/list/row.tsx b/src/sentry/static/sentry/app/views/alerts/list/row.tsx
index 075168fff5..6af01b475c 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/row.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/row.tsx
@@ -3,14 +3,18 @@ import memoize from 'lodash/memoize';
 import moment from 'moment';
 import styled from '@emotion/styled';
 
+import {IconWarning} from 'app/icons';
 import {PanelItem} from 'app/components/panels';
+import {t} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
 import Count from 'app/components/count';
 import Duration from 'app/components/duration';
+import ErrorBoundary from 'app/components/errorBoundary';
 import IdBadge from 'app/components/idBadge';
 import Link from 'app/components/links/link';
 import Placeholder from 'app/components/placeholder';
 import Projects from 'app/utils/projects';
+import Tooltip from 'app/components/tooltip';
 import getDynamicText from 'app/utils/getDynamicText';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
@@ -47,9 +51,13 @@ class AlertListRow extends AsyncComponent<Props, State> {
     return this.renderBody();
   }
 
+  renderError() {
+    return this.renderBody();
+  }
+
   renderBody() {
     const {incident, orgId, projectsLoaded, projects} = this.props;
-    const {loading, stats} = this.state;
+    const {loading, error, stats} = this.state;
     const started = moment(incident.dateStarted);
     const duration = moment
       .duration(moment(incident.dateClosed || new Date()).diff(started))
@@ -57,41 +65,62 @@ class AlertListRow extends AsyncComponent<Props, State> {
     const slug = incident.projects[0];
 
     return (
-      <IncidentPanelItem>
-        <TableLayout>
-          <TitleAndSparkLine>
-            <TitleLink to={`/organizations/${orgId}/alerts/${incident.identifier}/`}>
-              {incident.title}
-            </TitleLink>
-
-            <SparkLine eventStats={stats?.eventStats} />
-          </TitleAndSparkLine>
-
-          <ProjectBadge
-            avatarSize={18}
-            project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}
-          />
-
-          <Status incident={incident} />
-
-          <div>
-            {started.format('L')}
-            <LightDuration seconds={getDynamicText({value: duration, fixed: 1200})} />
-          </div>
-
-          <NumericColumn>
-            {!loading ? <Count value={stats.uniqueUsers} /> : <NumericPlaceholder />}
-          </NumericColumn>
-
-          <NumericColumn>
-            {!loading ? <Count value={stats.totalEvents} /> : <NumericPlaceholder />}
-          </NumericColumn>
-        </TableLayout>
-      </IncidentPanelItem>
+      <ErrorBoundary>
+        <IncidentPanelItem>
+          <TableLayout>
+            <TitleAndSparkLine>
+              <TitleLink to={`/organizations/${orgId}/alerts/${incident.identifier}/`}>
+                {incident.title}
+              </TitleLink>
+
+              <SparkLine
+                error={error && <ErrorLoadingStatsIcon />}
+                eventStats={stats?.eventStats}
+              />
+            </TitleAndSparkLine>
+
+            <ProjectBadge
+              avatarSize={18}
+              project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}
+            />
+
+            <Status incident={incident} />
+
+            <div>
+              {started.format('L')}
+              <LightDuration seconds={getDynamicText({value: duration, fixed: 1200})} />
+            </div>
+
+            <NumericColumn>
+              {!loading && !error ? (
+                <Count value={stats?.uniqueUsers} />
+              ) : (
+                <NumericPlaceholder error={error && <ErrorLoadingStatsIcon />} />
+              )}
+            </NumericColumn>
+
+            <NumericColumn>
+              {!loading && !error ? (
+                <Count value={stats?.totalEvents} />
+              ) : (
+                <NumericPlaceholder error={error && <ErrorLoadingStatsIcon />} />
+              )}
+            </NumericColumn>
+          </TableLayout>
+        </IncidentPanelItem>
+      </ErrorBoundary>
     );
   }
 }
 
+function ErrorLoadingStatsIcon() {
+  return (
+    <Tooltip title={t('Error loading alert stats')}>
+      <IconWarning />
+    </Tooltip>
+  );
+}
+
 const LightDuration = styled(Duration)`
   color: ${p => p.theme.gray400};
   font-size: 0.9em;
@@ -110,7 +139,13 @@ const IncidentPanelItem = styled(PanelItem)`
   padding: ${space(1)} ${space(2)};
 `;
 
-const NumericPlaceholder = styled(Placeholder)`
+const NumericPlaceholder = styled(Placeholder)<{error?: React.ReactNode}>`
+  ${p =>
+    p.error &&
+    `
+    align-items: center;
+    line-height: 1;
+    `}
   height: 100%;
 `;
 
diff --git a/src/sentry/static/sentry/app/views/alerts/list/sparkLine.tsx b/src/sentry/static/sentry/app/views/alerts/list/sparkLine.tsx
index 0bf93f95dc..5166afb80d 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/sparkLine.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/sparkLine.tsx
@@ -1,9 +1,9 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
+import {IncidentStats} from 'app/views/alerts/types';
 import Placeholder from 'app/components/placeholder';
 import theme from 'app/utils/theme';
-import {IncidentStats} from 'app/views/alerts/types';
 
 // Height of sparkline
 const SPARKLINE_HEIGHT = 38;
@@ -11,6 +11,7 @@ const SPARKLINE_HEIGHT = 38;
 type Props = {
   className?: string;
   eventStats: IncidentStats['eventStats'];
+  error?: React.ReactNode;
 };
 
 const Sparklines = React.lazy(() =>
@@ -22,7 +23,11 @@ const SparklinesLine = React.lazy(() =>
 
 class SparkLine extends React.Component<Props> {
   render() {
-    const {className, eventStats} = this.props;
+    const {className, error, eventStats} = this.props;
+
+    if (error) {
+      return <SparklineError error={error} />;
+    }
 
     if (!eventStats) {
       return <SparkLinePlaceholder />;
@@ -56,4 +61,9 @@ const SparkLinePlaceholder = styled(Placeholder)`
   height: ${SPARKLINE_HEIGHT}px;
 `;
 
+const SparklineError = styled(SparkLinePlaceholder)`
+  align-items: center;
+  line-height: 1;
+`;
+
 export default StyledSparkLine;
