commit 67c03cf261c2869f4c89cdc9b67aa448df7efacc
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat Mar 4 10:28:35 2017 +0100

    Refactor system symbol handling to do error handling as well

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 949893dfde..ace1b531e6 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1112,7 +1112,7 @@ def get_raven_config():
         ],
     }
 
-SYMBOL_SERVER_ENABLED = True
+SYMBOL_SERVER_ENABLED = False
 SYMBOL_SERVER_URL = 'http://127.0.0.1:3000/'
 
 RAVEN_CONFIG = get_raven_config()
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 262a8be0fa..cd26410a1a 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -15,13 +15,13 @@ from symsynd.utils import parse_addr
 
 from sentry.models import Project, EventError
 from sentry.plugins import Plugin2
-from sentry.http import safe_urlopen
 from sentry.lang.native.symbolizer import Symbolizer, SymbolicationFailed, \
     ImageLookup
 from sentry.lang.native.utils import \
     find_apple_crash_report_referenced_images, get_sdk_from_event, \
     get_sdk_from_apple_system_info, cpu_name_from_data, APPLE_SDK_MAPPING, \
     rebase_addr
+from sentry.lang.native.systemsymbols import lookup_system_symbols
 from sentry.stacktraces import StacktraceProcessor
 from sentry.reprocessing import report_processing_issue
 from sentry.constants import NATIVE_UNKNOWN_STRING
@@ -351,21 +351,6 @@ def preprocess_apple_crash_event(data):
     return data
 
 
-def sdk_info_to_sdk_id(sdk_info):
-    if sdk_info is None:
-        return None
-    rv = '%s_%d.%d.%d' % (
-        sdk_info['sdk_name'],
-        sdk_info['version_major'],
-        sdk_info['version_minor'],
-        sdk_info['version_patchlevel'],
-    )
-    build = sdk_info.get('build')
-    if build is not None:
-        rv = '%s_%s' % (rv, build)
-    return rv
-
-
 class NativeStacktraceProcessor(StacktraceProcessor):
 
     def __init__(self, *args, **kwargs):
@@ -490,15 +475,10 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         if not to_lookup:
             return
 
-        symbol_query = {
-            'sdk_id': sdk_info_to_sdk_id(self.sdk_info),
-            'cpu_name': self.sym.cpu_name,
-            'symbols': to_lookup,
-        }
-        rv = safe_urlopen('%s/lookup' % settings.SYMBOL_SERVER_URL.rstrip('/'),
-                          method='POST', json=symbol_query)
-        if rv.status_code == 200:
-            for symrv, pf in zip(rv.json()['symbols'], pf_list):
+        rv = lookup_system_symbols(to_lookup, self.sdk_info,
+                                   self.sym.cpu_name)
+        if rv is not None:
+            for symrv, pf in zip(rv, pf_list):
                 if symrv is None:
                     continue
                 pf.data['symbolserver_match'] = symrv
diff --git a/src/sentry/lang/native/systemsymbols.py b/src/sentry/lang/native/systemsymbols.py
new file mode 100644
index 0000000000..b07e6c23f3
--- /dev/null
+++ b/src/sentry/lang/native/systemsymbols.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+import logging
+
+from django.conf import settings
+
+from requests.exceptions import RequestException
+
+from sentry.http import safe_urlopen
+from sentry.lang.native.utils import sdk_info_to_sdk_id
+
+
+MAX_ATTEMPTS = 3
+
+
+logger = logging.getLogger(__name__)
+
+
+def lookup_system_symbols(symbols, sdk_info=None, cpu_name=None):
+    """Looks for system symbols in the configured system server if
+    enabled.  If this failes or the server is disabled, `None` is
+    returned.
+    """
+    if not settings.SYMBOL_SERVER_ENABLED:
+        return
+
+    symbol_query = {
+        'sdk_id': sdk_info_to_sdk_id(sdk_info),
+        'cpu_name': cpu_name,
+        'symbols': symbols,
+    }
+
+    attempts = 0
+    while 1:
+        try:
+            rv = safe_urlopen('%s/lookup' % settings.SYMBOL_SERVER_URL.rstrip('/'),
+                              method='POST', json=symbol_query)
+            rv.raise_for_status()
+            return rv.json()['symbols']
+        except (IOError, RequestException):
+            attempts += 1
+            if attempts > MAX_ATTEMPTS:
+                logger.error('Failed to contact system symbol server',
+                             exc_info=True)
+                return
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 10cbf16448..ffd6a41efd 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -159,3 +159,18 @@ def cpu_name_from_data(data):
 def rebase_addr(instr_addr, img):
     return parse_addr(img['image_vmaddr']) + \
         parse_addr(instr_addr) - parse_addr(img['image_addr'])
+
+
+def sdk_info_to_sdk_id(sdk_info):
+    if sdk_info is None:
+        return None
+    rv = '%s_%d.%d.%d' % (
+        sdk_info['sdk_name'],
+        sdk_info['version_major'],
+        sdk_info['version_minor'],
+        sdk_info['version_patchlevel'],
+    )
+    build = sdk_info.get('build')
+    if build is not None:
+        rv = '%s_%s' % (rv, build)
+    return rv
