commit ac506cf919afeb305740c7d058ff575b0fbb52bd
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Feb 18 14:41:02 2020 -0800

    refs(incidents): Remove initial incident snapshot, and ability to store snapshots against activities
    
    We don't use initial snapshots anymore, so removing the code that takes these. Also removing the
    ability to store snapshots against an activity since we're not likely to use.

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index bb917ec86e..475dc71b4b 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0044_auto_20200219_0018
+sentry: 0045_remove_incidentactivity_event_stats_snapshot
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/api/serializers/models/incidentactivity.py b/src/sentry/api/serializers/models/incidentactivity.py
index e2748e3d63..d52d50fede 100644
--- a/src/sentry/api/serializers/models/incidentactivity.py
+++ b/src/sentry/api/serializers/models/incidentactivity.py
@@ -3,10 +3,8 @@ from __future__ import absolute_import
 import six
 
 from sentry.api.serializers import Serializer, register
-from sentry.utils.snuba import SnubaTSResult
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.user import UserSerializer
-from sentry.api.serializers.snuba import SnubaTSResultSerializer
 from sentry.incidents.models import IncidentActivity
 from sentry.utils.db import attach_foreignkey
 
@@ -15,7 +13,6 @@ from sentry.utils.db import attach_foreignkey
 class IncidentActivitySerializer(Serializer):
     def get_attrs(self, item_list, user, **kwargs):
         attach_foreignkey(item_list, IncidentActivity.incident, related=("organization",))
-        attach_foreignkey(item_list, IncidentActivity.event_stats_snapshot)
         attach_foreignkey(item_list, IncidentActivity.user)
         user_serializer = UserSerializer()
         serialized_users = serialize(
@@ -29,18 +26,6 @@ class IncidentActivitySerializer(Serializer):
     def serialize(self, obj, attrs, user):
         incident = obj.incident
 
-        event_stats = None
-        if obj.event_stats_snapshot:
-            serializer = SnubaTSResultSerializer(obj.incident.organization, None, user)
-            event_stats = serializer.serialize(
-                SnubaTSResult(
-                    obj.event_stats_snapshot.snuba_values,
-                    obj.event_stats_snapshot.start,
-                    obj.event_stats_snapshot.end,
-                    obj.event_stats_snapshot.period,
-                )
-            )
-
         return {
             "id": six.text_type(obj.id),
             "incidentIdentifier": six.text_type(incident.identifier),
@@ -49,6 +34,5 @@ class IncidentActivitySerializer(Serializer):
             "value": obj.value,
             "previousValue": obj.previous_value,
             "comment": obj.comment,
-            "eventStats": event_stats,
             "dateCreated": obj.date_added,
         }
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 1edd74102d..62578a99b6 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -43,8 +43,6 @@ from sentry.snuba.subscriptions import (
 )
 from sentry.utils.snuba import bulk_raw_query, SnubaQueryParams, SnubaTSResult
 
-MAX_INITIAL_INCIDENT_PERIOD = timedelta(days=7)
-
 
 class AlreadyDeletedError(Exception):
     pass
@@ -100,13 +98,7 @@ def create_incident(
                 [IncidentGroup(incident=incident, group=group) for group in groups]
             )
 
-        event_stats_snapshot = create_initial_event_stats_snapshot(incident)
-        create_incident_activity(
-            incident,
-            IncidentActivityType.DETECTED,
-            event_stats_snapshot=event_stats_snapshot,
-            user=user,
-        )
+        create_incident_activity(incident, IncidentActivityType.DETECTED, user=user)
         analytics.record(
             "incident.created",
             incident_id=incident.id,
@@ -178,18 +170,6 @@ def set_incident_seen(incident, user=None):
     return incident_seen
 
 
-def create_initial_event_stats_snapshot(incident):
-    """
-    Creates an event snapshot representing the state at the beginning of
-    an incident. It's intended to capture the history of the events involved in
-    the incident, the spike and a short period of time after that.
-    """
-    initial_period_length = min(timezone.now() - incident.date_started, MAX_INITIAL_INCIDENT_PERIOD)
-    end = incident.date_started + initial_period_length
-    start = end - (initial_period_length * 4)
-    return create_event_stat_snapshot(incident, start, end)
-
-
 @transaction.atomic
 def create_incident_activity(
     incident,
@@ -198,7 +178,6 @@ def create_incident_activity(
     value=None,
     previous_value=None,
     comment=None,
-    event_stats_snapshot=None,
     mentioned_user_ids=None,
 ):
     if activity_type == IncidentActivityType.COMMENT and user:
@@ -212,7 +191,6 @@ def create_incident_activity(
         value=value,
         previous_value=previous_value,
         comment=comment,
-        event_stats_snapshot=event_stats_snapshot,
     )
 
     if mentioned_user_ids:
@@ -441,9 +419,7 @@ def get_incident_subscribers(incident):
 
 
 def get_incident_activity(incident):
-    return IncidentActivity.objects.filter(incident=incident).select_related(
-        "user", "event_stats_snapshot", "incident"
-    )
+    return IncidentActivity.objects.filter(incident=incident).select_related("user", "incident")
 
 
 class AlertRuleNameAlreadyUsedError(Exception):
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index 4761c94a6a..8126481e98 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -191,7 +191,6 @@ class IncidentActivity(Model):
     value = models.TextField(null=True)
     previous_value = models.TextField(null=True)
     comment = models.TextField(null=True)
-    event_stats_snapshot = FlexibleForeignKey("sentry.TimeSeriesSnapshot", null=True)
     date_added = models.DateTimeField(default=timezone.now)
 
     class Meta:
diff --git a/src/sentry/migrations/0045_remove_incidentactivity_event_stats_snapshot.py b/src/sentry/migrations/0045_remove_incidentactivity_event_stats_snapshot.py
new file mode 100644
index 0000000000..792a322511
--- /dev/null
+++ b/src/sentry/migrations/0045_remove_incidentactivity_event_stats_snapshot.py
@@ -0,0 +1,35 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.28 on 2020-02-20 02:02
+from __future__ import unicode_literals
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+    dependencies = [("sentry", "0044_auto_20200219_0018")]
+
+    operations = [
+        migrations.SeparateDatabaseAndState(
+            state_operations=[
+                migrations.RemoveField(model_name="incidentactivity", name="event_stats_snapshot")
+            ],
+            database_operations=[],
+        )
+    ]
diff --git a/tests/sentry/api/endpoints/test_organization_incident_activity_index.py b/tests/sentry/api/endpoints/test_organization_incident_activity_index.py
index f0241cd1bd..9c04174289 100644
--- a/tests/sentry/api/endpoints/test_organization_incident_activity_index.py
+++ b/tests/sentry/api/endpoints/test_organization_incident_activity_index.py
@@ -6,7 +6,7 @@ from django.utils import timezone
 from exam import fixture
 
 from sentry.api.serializers import serialize
-from sentry.incidents.logic import create_incident_activity, create_initial_event_stats_snapshot
+from sentry.incidents.logic import create_incident_activity
 from sentry.incidents.models import IncidentActivityType
 from sentry.testutils import APITestCase
 
@@ -46,14 +46,12 @@ class OrganizationIncidentActivityIndexTest(APITestCase):
         incident = self.create_incident(
             date_started=timezone.now() - timedelta(hours=2), projects=[self.project], query=""
         )
-        snapshot = create_initial_event_stats_snapshot(incident)
         activities = [
             create_incident_activity(
                 incident=incident,
                 activity_type=IncidentActivityType.DETECTED,
                 user=self.user,
                 comment="hello",
-                event_stats_snapshot=snapshot,
             ),
             create_incident_activity(
                 incident=incident,
diff --git a/tests/sentry/api/serializers/test_incident_activity.py b/tests/sentry/api/serializers/test_incident_activity.py
index b79f565182..a944cfd978 100644
--- a/tests/sentry/api/serializers/test_incident_activity.py
+++ b/tests/sentry/api/serializers/test_incident_activity.py
@@ -11,7 +11,7 @@ from freezegun import freeze_time
 
 from sentry.api.serializers import serialize
 from sentry.incidents.models import IncidentActivityType
-from sentry.incidents.logic import create_incident_activity, create_initial_event_stats_snapshot
+from sentry.incidents.logic import create_incident_activity
 from sentry.testutils import SnubaTestCase, TestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
 
@@ -68,13 +68,11 @@ class IncidentActivitySerializerTest(TestCase, SnubaTestCase):
             incident = self.create_incident(
                 date_started=timezone.now() - timedelta(hours=2), projects=[self.project], query=""
             )
-            snapshot = create_initial_event_stats_snapshot(incident)
             activity = create_incident_activity(
                 incident=incident,
                 activity_type=IncidentActivityType.COMMENT,
                 user=self.user,
                 comment="hello",
-                event_stats_snapshot=snapshot,
             )
             result = serialize(activity)
 
@@ -85,7 +83,4 @@ class IncidentActivitySerializerTest(TestCase, SnubaTestCase):
             assert result["value"] is None
             assert result["previousValue"] is None
             assert result["comment"] == activity.comment
-            event_stats = result["eventStats"]["data"]
-            assert [stat[1] for stat in event_stats[:-1]] == [[]] * len(event_stats[:-1])
-            assert event_stats[-1][1] == [{"count": 2}]
             assert result["dateCreated"] == activity.date_added
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 45ba8579b5..2e63c97d71 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -32,7 +32,6 @@ from sentry.incidents.logic import (
     create_incident,
     create_incident_activity,
     create_incident_snapshot,
-    create_initial_event_stats_snapshot,
     delete_alert_rule,
     delete_alert_rule_trigger,
     delete_alert_rule_trigger_action,
@@ -130,9 +129,7 @@ class CreateIncidentTest(TestCase):
         )
         assert (
             IncidentActivity.objects.filter(
-                incident=incident,
-                type=IncidentActivityType.DETECTED.value,
-                event_stats_snapshot__isnull=False,
+                incident=incident, type=IncidentActivityType.DETECTED.value
             ).count()
             == 1
         )
@@ -173,7 +170,6 @@ class UpdateIncidentStatus(TestCase):
         assert activity.value == six.text_type(status.value)
         assert activity.previous_value == six.text_type(prev_status)
         assert activity.comment == comment
-        assert activity.event_stats_snapshot is None
 
         assert len(self.record_event.call_args_list) == 1
         event = self.record_event.call_args[0][0]
@@ -425,35 +421,6 @@ class CreateIncidentActivityTest(TestCase, BaseIncidentsTest):
         self.assert_notifications_sent(activity)
         assert not self.record_event.called
 
-    def test_snapshot(self):
-        self.create_event(self.now - timedelta(minutes=2))
-        self.create_event(self.now - timedelta(minutes=2))
-        self.create_event(self.now - timedelta(minutes=1))
-        # Define events outside incident range. Should be included in the
-        # snapshot
-        self.create_event(self.now - timedelta(minutes=20))
-        self.create_event(self.now - timedelta(minutes=30))
-
-        # Too far out, should be excluded
-        self.create_event(self.now - timedelta(minutes=100))
-
-        incident = self.create_incident(
-            date_started=self.now - timedelta(minutes=5), query="", projects=[self.project]
-        )
-        event_stats_snapshot = create_initial_event_stats_snapshot(incident)
-        self.record_event.reset_mock()
-        activity = create_incident_activity(
-            incident, IncidentActivityType.DETECTED, event_stats_snapshot=event_stats_snapshot
-        )
-        assert activity.incident == incident
-        assert activity.type == IncidentActivityType.DETECTED.value
-        assert activity.value is None
-        assert activity.previous_value is None
-
-        assert event_stats_snapshot == activity.event_stats_snapshot
-        self.assert_notifications_sent(activity)
-        assert not self.record_event.called
-
     def test_comment(self):
         incident = self.create_incident()
         comment = "hello"
@@ -527,28 +494,6 @@ class CreateIncidentActivityTest(TestCase, BaseIncidentsTest):
         }
 
 
-class CreateInitialEventStatsSnapshotTest(TestCase, BaseIncidentsTest):
-    def test_snapshot(self):
-        with freeze_time(self.now):
-            self.create_event(self.now - timedelta(minutes=2))
-            self.create_event(self.now - timedelta(minutes=2))
-            self.create_event(self.now - timedelta(minutes=1))
-            # Define events outside incident range. Should be included in the
-            # snapshot
-            self.create_event(self.now - timedelta(minutes=15))
-            self.create_event(self.now - timedelta(minutes=20))
-
-            # Too far out, should be excluded
-            self.create_event(self.now - timedelta(minutes=100))
-
-            incident = self.create_incident(
-                date_started=self.now - timedelta(minutes=5), query="", projects=[self.project]
-            )
-            event_stat_snapshot = create_initial_event_stats_snapshot(incident)
-            assert event_stat_snapshot.start == self.now - timedelta(minutes=20)
-            assert [row[1] for row in event_stat_snapshot.values] == [1, 1, 2, 1]
-
-
 class GetIncidentSubscribersTest(TestCase, BaseIncidentsTest):
     def test_simple(self):
         incident = self.create_incident()
