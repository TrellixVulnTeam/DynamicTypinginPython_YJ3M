commit 88038f86718d43f1febded4259abe7b43f416c67
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 28 12:14:36 2015 -0700

    Add EventUser storage and capabilities
    
    This adds a new model for storing users seen within events (which
    were previously only stored as tags). It also updates the search
    engine to allow queries such as 'user.email:foo@example.com' and
    will look these up from EventUser first to try and map them up with
    the appropriate tag.
    
    Refs GH-2033

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index aef0618357..f9daa22938 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -202,7 +202,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 ))
 
         if query is not None:
-            query_kwargs.update(parse_query(query, request.user))
+            query_kwargs.update(parse_query(project, query, request.user))
 
         cursor_result = search.query(**query_kwargs)
 
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 1ae2495fd8..6486a17d17 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -65,6 +65,7 @@ class GroupSerializer(Serializer):
         for item in item_list:
             active_date = item.active_at or item.last_seen
 
+            # TODO(dcramer): switch to serializers
             tags = {}
             for key in tag_counts.iterkeys():
                 try:
diff --git a/src/sentry/api/serializers/models/grouptagvalue.py b/src/sentry/api/serializers/models/grouptagvalue.py
index 5ef352a1aa..cc5ac91b96 100644
--- a/src/sentry/api/serializers/models/grouptagvalue.py
+++ b/src/sentry/api/serializers/models/grouptagvalue.py
@@ -1,29 +1,61 @@
 from __future__ import absolute_import
 
+import operator
+
+from django.db.models import Q
+
 from sentry.api.serializers import Serializer, register
-from sentry.models import GroupTagValue, TagValue
+from sentry.models import EventUser, GroupTagValue, TagValue
+
+
+def parse_user_tag(value):
+    lookup, value = value.split(':', 1)
+    if lookup == 'id':
+        lookup = 'ident'
+    return {lookup: value}
 
 
 @register(GroupTagValue)
 class GroupTagValueSerializer(Serializer):
     def get_attrs(self, item_list, user):
-        assert len(set(i.key for i in item_list)) < 2
+        project = item_list[0].project
+
+        user_lookups = [
+            Q(**parse_user_tag(i.value))
+            for i in item_list
+            if i.key == 'sentry:user'
+        ]
+
+        tag_labels = {}
+        if user_lookups:
+            tag_labels.update({
+                ('sentry:user', euser.tag_value): euser.get_label()
+                for euser in EventUser.objects.filter(
+                    reduce(operator.or_, user_lookups),
+                    project=project,
+                )
+            })
 
-        tagvalues = dict(
-            (t.value, t)
-            for t in TagValue.objects.filter(
-                project=item_list[0].project,
-                key=item_list[0].key,
-                value__in=[i.value for i in item_list]
-            )
-        )
+        other_lookups = [
+            Q(key=i.key, value=i.value)
+            for i in item_list
+            if i.key != 'sentry:user'
+        ]
+        if other_lookups:
+            tag_labels.update({
+                (t.key, t.value): t.get_label()
+                for t in TagValue.objects.filter(
+                    reduce(operator.or_, other_lookups),
+                    project=project,
+                )
+            })
 
         result = {}
         for item in item_list:
             try:
-                label = tagvalues[item.value].get_label()
+                label = tag_labels[(item.key, item.value)]
             except KeyError:
-                label = item.value.replace('_', ' ').title()
+                label = item.value
             result[item] = {
                 'name': label,
             }
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
index b071099fe4..6a6cb30a5e 100644
--- a/src/sentry/api/serializers/models/tagvalue.py
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -1,11 +1,50 @@
 from __future__ import absolute_import
 
+import operator
+
+from django.db.models import Q
+
 from sentry.api.serializers import Serializer, register
-from sentry.models import TagValue
+from sentry.models import EventUser, TagValue
+
+
+def parse_user_tag(value):
+    lookup, value = value.split(':', 1)
+    if lookup == 'id':
+        lookup = 'ident'
+    return {lookup: value}
 
 
 @register(TagValue)
 class TagValueSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        user_lookups = [
+            Q(**parse_user_tag(i.value))
+            for i in item_list
+            if i.key == 'sentry:user'
+        ]
+
+        tag_labels = {}
+        if user_lookups:
+            tag_labels.update({
+                ('sentry:user', euser.tag_value): euser.get_label()
+                for euser in EventUser.objects.filter(
+                    reduce(operator.or_, user_lookups),
+                    project=item_list[0].project,
+                )
+            })
+
+        result = {}
+        for item in item_list:
+            try:
+                label = tag_labels[(item.key, item.value)]
+            except KeyError:
+                label = item.get_label()
+            result[item] = {
+                'name': label,
+            }
+        return result
+
     def serialize(self, obj, attrs, user):
         if obj.key.startswith('sentry:'):
             key = obj.key.split('sentry:', 1)[-1]
@@ -14,6 +53,7 @@ class TagValueSerializer(Serializer):
 
         return {
             'key': key,
+            'name': attrs['name'],
             'value': obj.value,
             'count': obj.times_seen,
             'lastSeen': obj.last_seen,
diff --git a/src/sentry/migrations/0201_auto__add_eventuser__add_unique_eventuser_project_ident__add_index_eve.py b/src/sentry/migrations/0201_auto__add_eventuser__add_unique_eventuser_project_ident__add_index_eve.py
new file mode 100644
index 0000000000..3780bbf53c
--- /dev/null
+++ b/src/sentry/migrations/0201_auto__add_eventuser__add_unique_eventuser_project_ident__add_index_eve.py
@@ -0,0 +1,461 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'EventUser'
+        db.create_table('sentry_eventuser', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'])),
+            ('ident', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
+            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75, null=True)),
+            ('username', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
+            ('ip_address', self.gf('django.db.models.fields.GenericIPAddressField')(max_length=39, null=True)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, db_index=True)),
+        ))
+        db.send_create_signal('sentry', ['EventUser'])
+
+        # Adding unique constraint on 'EventUser', fields ['project', 'ident']
+        db.create_unique('sentry_eventuser', ['project_id', 'ident'])
+
+        # Adding index on 'EventUser', fields ['project', 'email']
+        db.create_index('sentry_eventuser', ['project_id', 'email'])
+
+        # Adding index on 'EventUser', fields ['project', 'username']
+        db.create_index('sentry_eventuser', ['project_id', 'username'])
+
+        # Adding index on 'EventUser', fields ['project', 'ip_address']
+        db.create_index('sentry_eventuser', ['project_id', 'ip_address'])
+
+
+    def backwards(self, orm):
+        # Removing index on 'EventUser', fields ['project', 'ip_address']
+        db.delete_index('sentry_eventuser', ['project_id', 'ip_address'])
+
+        # Removing index on 'EventUser', fields ['project', 'username']
+        db.delete_index('sentry_eventuser', ['project_id', 'username'])
+
+        # Removing index on 'EventUser', fields ['project', 'email']
+        db.delete_index('sentry_eventuser', ['project_id', 'email'])
+
+        # Removing unique constraint on 'EventUser', fields ['project', 'ident']
+        db.delete_unique('sentry_eventuser', ['project_id', 'ident'])
+
+        # Deleting model 'EventUser'
+        db.delete_table('sentry_eventuser')
+
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'badge': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project', 'ident'),)", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'storage': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'storage_options': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.group': {
+            'Meta': {'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.helppage': {
+            'Meta': {'object_name': 'HelpPage'},
+            'content': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_visible': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'priority': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'counter': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {'object_name': 'UserReport', 'index_together': "(('project', 'event_id'),)"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index dfa2d0debb..39b9b3bac5 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -102,39 +102,6 @@ class Event(Model):
 
         return None
 
-    @memoize
-    def user_ident(self):
-        """
-        The identifier from a user is considered from several interfaces.
-
-        In order:
-
-        - User.id
-        - User.email
-        - User.username
-        - Http.env.REMOTE_ADDR
-
-        """
-        user_data = self.data.get('sentry.interfaces.User', self.data.get('user'))
-        if user_data:
-            ident = user_data.get('id')
-            if ident:
-                return 'id:%s' % (ident,)
-
-            ident = user_data.get('email')
-            if ident:
-                return 'email:%s' % (ident,)
-
-            ident = user_data.get('username')
-            if ident:
-                return 'username:%s' % (ident,)
-
-        ident = self.ip_address
-        if ident:
-            return 'ip:%s' % (ident,)
-
-        return None
-
     def get_interfaces(self):
         result = []
         for key, data in self.data.iteritems():
diff --git a/src/sentry/models/eventuser.py b/src/sentry/models/eventuser.py
new file mode 100644
index 0000000000..fcec96c508
--- /dev/null
+++ b/src/sentry/models/eventuser.py
@@ -0,0 +1,55 @@
+from __future__ import absolute_import
+
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import FlexibleForeignKey, Model, sane_repr
+from sentry.utils.cache import memoize
+
+
+class EventUser(Model):
+    __core__ = False
+
+    project = FlexibleForeignKey('sentry.Project')
+    ident = models.CharField(max_length=64, null=True)
+    email = models.EmailField(null=True)
+    username = models.CharField(max_length=64, null=True)
+    ip_address = models.GenericIPAddressField(null=True)
+    date_added = models.DateTimeField(default=timezone.now, db_index=True)
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_eventuser'
+        unique_together = (('project', 'ident'),)
+        index_together = (
+            ('project', 'email'),
+            ('project', 'username'),
+            ('project', 'ip_address'),
+        )
+
+    __repr__ = sane_repr('project_id', 'ident', 'email', 'username', 'ip_address')
+
+    def save(self, *args, **kwargs):
+        assert self.ident or self.username or self.email or self.ip_address, \
+            'No identifying value found for user'
+        super(EventUser, self).save(*args, **kwargs)
+
+    @memoize
+    def tag_value(self):
+        """
+        Return the identifier used with tags to link this user.
+        """
+        assert self.ident or self.username or self.email or self.ip_address, \
+            'No identifying value found for user'
+
+        if self.ident:
+            return 'id:{}'.format(self.ident)
+        if self.email:
+            return 'email:{}'.format(self.email)
+        if self.username:
+            return 'username:{}'.format(self.username)
+        if self.ip_address:
+            return 'ip:{}'.format(self.ip_address)
+
+    def get_label(self):
+        return self.email or self.username or self.ident or self.ip_address
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index c96510c16e..3f3ae4fda4 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -1,11 +1,29 @@
 from __future__ import absolute_import, division, print_function
 
 from sentry.constants import STATUS_CHOICES
-from sentry.models import User
+from sentry.models import EventUser, User
 from sentry.utils.auth import find_users
 
 
-def parse_query(query, user):
+def get_user_tag(project, key, value):
+    if key == 'id':
+        lookup = 'ident'
+    else:
+        lookup = key
+
+    # TODO(dcramer): do something with case of multiple matches
+    try:
+        euser = EventUser.objects.filter(
+            project=project,
+            **{lookup: value}
+        )[0]
+    except IndexError:
+        return '{}:{}'.format(key, value)
+
+    return euser.tag_value
+
+
+def parse_query(project, query, user):
     # TODO(dcramer): handle query being wrapped in quotes
     tokens = query.split(' ')
 
@@ -60,7 +78,15 @@ def parse_query(query, user):
         elif key == 'release':
             results['tags']['sentry:release'] = value
         elif key == 'user':
-            results['tags']['sentry:user'] = value
+            if ':' in value:
+                comp, value = value.split(':', 1)
+            else:
+                comp = 'id'
+            results['tags']['sentry:user'] = get_user_tag(
+                project, comp, value)
+        elif key.startswith('user.'):
+            results['tags']['sentry:user'] = get_user_tag(
+                project, key.split('.', 1)[1], value)
         else:
             results['tags'][key] = value
 
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 7944ecde28..88d59a0ebf 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import, print_function
 
 from celery.utils.log import get_task_logger
 from django.conf import settings
+from django.db import IntegrityError, transaction
 from hashlib import md5
 
 from sentry.constants import PLATFORM_LIST, PLATFORM_ROOTS
@@ -99,14 +100,20 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
 @instrumented_task(
     name='sentry.tasks.post_process.record_affected_user')
 def record_affected_user(event, **kwargs):
-    from sentry.models import Group
+    from sentry.models import EventUser, Group
 
-    user_ident = event.user_ident
-    if not user_ident:
+    user_data = event.data.get('sentry.interfaces.User', event.data.get('user'))
+    if not user_data:
         logger.info('No user data found for event_id=%s', event.event_id)
         return
 
-    user_data = event.data.get('sentry.interfaces.User', event.data.get('user', {}))
+    euser = EventUser(
+        project=event.project,
+        ident=user_data.get('id'),
+        email=user_data.get('email'),
+        username=user_data.get('username'),
+        ip_address=event.ip_address,
+    )
 
     tag_data = {}
     for key in ('id', 'email', 'username', 'data'):
@@ -117,8 +124,14 @@ def record_affected_user(event, **kwargs):
     if ip_address:
         tag_data['ip'] = ip_address
 
+    try:
+        with transaction.atomic():
+            euser.save()
+    except IntegrityError:
+        pass
+
     Group.objects.add_tags(event.group, [
-        ('sentry:user', user_ident, tag_data)
+        ('sentry:user', euser.tag_value, tag_data)
     ])
 
 
diff --git a/tests/sentry/api/serializers/test_grouptagvalue.py b/tests/sentry/api/serializers/test_grouptagvalue.py
new file mode 100644
index 0000000000..4f35bc7b18
--- /dev/null
+++ b/tests/sentry/api/serializers/test_grouptagvalue.py
@@ -0,0 +1,48 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.models import EventUser, GroupTagValue, TagValue
+from sentry.testutils import TestCase
+
+
+class GroupTagValueSerializerTest(TestCase):
+    def test_with_user(self):
+        user = self.create_user()
+        project = self.create_project()
+        euser = EventUser.objects.create(
+            project=project,
+            email='foo@example.com',
+        )
+        tagvalue = TagValue.objects.create(
+            project=project,
+            key='sentry:user',
+            value=euser.tag_value,
+        )
+        grouptagvalue = GroupTagValue.objects.create(
+            project=project,
+            group=self.create_group(project=project),
+            key=tagvalue.key,
+            value=tagvalue.value,
+        )
+
+        result = serialize(grouptagvalue, user)
+        assert result['key'] == 'user'
+        assert result['value'] == grouptagvalue.value
+        assert result['name'] == euser.get_label()
+
+    def test_with_no_tagvalue(self):
+        user = self.create_user()
+        project = self.create_project()
+        grouptagvalue = GroupTagValue.objects.create(
+            project=project,
+            group=self.create_group(project=project),
+            key='sentry:user',
+            value='email:foo@example.com',
+        )
+
+        result = serialize(grouptagvalue, user)
+        assert result['key'] == 'user'
+        assert result['value'] == grouptagvalue.value
+        assert result['name'] == grouptagvalue.value
diff --git a/tests/sentry/api/serializers/test_tagvalue.py b/tests/sentry/api/serializers/test_tagvalue.py
new file mode 100644
index 0000000000..6df900649b
--- /dev/null
+++ b/tests/sentry/api/serializers/test_tagvalue.py
@@ -0,0 +1,41 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.models import EventUser, TagValue
+from sentry.testutils import TestCase
+
+
+class TagValueSerializerTest(TestCase):
+    def test_with_user(self):
+        user = self.create_user()
+        project = self.create_project()
+        euser = EventUser.objects.create(
+            project=project,
+            email='foo@example.com',
+        )
+        tagvalue = TagValue.objects.create(
+            project=project,
+            key='sentry:user',
+            value=euser.tag_value,
+        )
+
+        result = serialize(tagvalue, user)
+        assert result['key'] == 'user'
+        assert result['value'] == tagvalue.value
+        assert result['name'] == euser.get_label()
+
+    def test_basic(self):
+        user = self.create_user()
+        project = self.create_project()
+        tagvalue = TagValue.objects.create(
+            project=project,
+            key='sentry:user',
+            value='email:foo@example.com',
+        )
+
+        result = serialize(tagvalue, user)
+        assert result['key'] == 'user'
+        assert result['value'] == tagvalue.value
+        assert result['name'] == tagvalue.get_label()
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 4d4b8400de..b062ab1478 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -1,67 +1,96 @@
 from __future__ import absolute_import
 
-from sentry.models import GroupStatus
+from sentry.models import EventUser, GroupStatus
 from sentry.testutils import TestCase
 from sentry.search.utils import parse_query
 
 
 class ParseQueryTest(TestCase):
+    def parse_query(self, query):
+        return parse_query(self.project, query, self.user)
+
     def test_simple(self):
-        result = parse_query('foo bar', self.user)
+        result = self.parse_query('foo bar')
         assert result == {'tags': {}, 'query': 'foo bar'}
 
     def test_useless_prefix(self):
-        result = parse_query('foo: bar', self.user)
+        result = self.parse_query('foo: bar')
         assert result == {'tags': {}, 'query': 'foo: bar'}
 
     def test_mix_tag_and_query(self):
-        result = parse_query('foo bar key:value', self.user)
+        result = self.parse_query('foo bar key:value')
         assert result == {'tags': {'key': 'value'}, 'query': 'foo bar'}
 
     def test_single_tag(self):
-        result = parse_query('key:value', self.user)
+        result = self.parse_query('key:value')
         assert result == {'tags': {'key': 'value'}, 'query': ''}
 
     def test_tag_with_colon_in_value(self):
-        result = parse_query('url:http://example.com', self.user)
+        result = self.parse_query('url:http://example.com')
         assert result == {'tags': {'url': 'http://example.com'}, 'query': ''}
 
     def test_multiple_tags(self):
-        result = parse_query('foo:bar key:value', self.user)
+        result = self.parse_query('foo:bar key:value')
         assert result == {'tags': {'key': 'value', 'foo': 'bar'}, 'query': ''}
 
     def test_single_tag_with_quotes(self):
-        result = parse_query('foo:"bar"', self.user)
+        result = self.parse_query('foo:"bar"')
         assert result == {'tags': {'foo': 'bar'}, 'query': ''}
 
     def test_tag_with_quotes_and_query(self):
-        result = parse_query('key:"a value" hello', self.user)
+        result = self.parse_query('key:"a value" hello')
         assert result == {'tags': {'key': 'a value'}, 'query': 'hello'}
 
     def test_is_resolved(self):
-        result = parse_query('is:resolved', self.user)
+        result = self.parse_query('is:resolved')
         assert result == {'status': GroupStatus.RESOLVED, 'tags': {}, 'query': ''}
 
     def test_assigned_me(self):
-        result = parse_query('assigned:me', self.user)
+        result = self.parse_query('assigned:me')
         assert result == {'assigned_to': self.user, 'tags': {}, 'query': ''}
 
     def test_assigned_email(self):
-        result = parse_query('assigned:%s' % (self.user.email,), self.user)
+        result = self.parse_query('assigned:%s' % (self.user.email,))
         assert result == {'assigned_to': self.user, 'tags': {}, 'query': ''}
 
     def test_assigned_unknown_user(self):
-        result = parse_query('assigned:fake@example.com', self.user)
+        result = self.parse_query('assigned:fake@example.com')
         assert result['assigned_to'].id == 0
 
     def test_first_release(self):
-        result = parse_query('first-release:bar', self.user)
+        result = self.parse_query('first-release:bar')
         assert result == {'first_release': 'bar', 'tags': {}, 'query': ''}
 
     def test_release(self):
-        result = parse_query('release:bar', self.user)
+        result = self.parse_query('release:bar')
         assert result == {'tags': {'sentry:release': 'bar'}, 'query': ''}
 
     def test_padded_spacing(self):
-        result = parse_query('release:bar  foo   bar', self.user)
+        result = self.parse_query('release:bar  foo   bar')
         assert result == {'tags': {'sentry:release': 'bar'}, 'query': 'foo bar'}
+
+    def test_unknown_user_with_dot_query(self):
+        result = self.parse_query('user.email:fake@example.com')
+        assert result['tags']['sentry:user'] == 'email:fake@example.com'
+
+    def test_user_lookup_with_dot_query(self):
+        euser = EventUser.objects.create(
+            project=self.project,
+            ident='1',
+            username='foobar',
+        )
+        result = self.parse_query('user.username:foobar')
+        assert result['tags']['sentry:user'] == euser.tag_value
+
+    def test_unknown_user_legacy_syntax(self):
+        result = self.parse_query('user:email:fake@example.com')
+        assert result['tags']['sentry:user'] == 'email:fake@example.com'
+
+    def test_user_lookup_legacy_syntax(self):
+        euser = EventUser.objects.create(
+            project=self.project,
+            ident='1',
+            username='foobar',
+        )
+        result = self.parse_query('user:username:foobar')
+        assert result['tags']['sentry:user'] == euser.tag_value
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 082d0bbd34..cdf21bfb56 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -4,7 +4,7 @@ from __future__ import absolute_import
 
 from mock import Mock, patch
 
-from sentry.models import Group
+from sentry.models import EventUser, Group
 from sentry.testutils import TestCase
 from sentry.tasks.post_process import (
     post_process_group, record_affected_user, record_affected_code,
@@ -103,6 +103,11 @@ class RecordAffectedUserTest(TestCase):
                 })
             ])
 
+        assert EventUser.objects.filter(
+            project=1,
+            email='foo@example.com',
+        ).exists()
+
 
 class RecordAdditionalTagsTest(TestCase):
     def test_simple(self):
