commit 32d8503a85c3117f08507d157c1b5871cc984d46
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Sun Aug 24 21:28:18 2014 +0000

    Smarter long line trimming in stack traces

diff --git a/src/sentry/tasks/fetch_source.py b/src/sentry/tasks/fetch_source.py
index 028f1f9dbd..0ffadb8a61 100644
--- a/src/sentry/tasks/fetch_source.py
+++ b/src/sentry/tasks/fetch_source.py
@@ -50,14 +50,35 @@ UrlResult = namedtuple('UrlResult', ['url', 'headers', 'body'])
 logger = logging.getLogger(__name__)
 
 
-def trim_line(line):
+def trim_line(line, column=0):
     line = line.strip('\n')
-    if len(line) > 150:
-        line = line[:140] + ' [... truncated]'
+    ll = len(line)
+    assert column < ll
+    if ll <= 150:
+        return line
+    start = max(column - 60, 0)
+    # Round down if it brings us close to the edge
+    if start < 5:
+        start = 0
+    end = min(start + 140, ll)
+    # Round up to the end if it's close
+    if end > ll - 5:
+        end = ll
+    # If we are bumped all the way to the end,
+    # make sure we still get a full 140 characters in the line
+    if end == ll:
+        start = max(end - 140, 0)
+    line = line[start:end]
+    if end < ll:
+        # we've snipped from the end
+        line += ' {snip}'
+    if start > 0:
+        # we've snipped from the beginning
+        line = '{snip} ' + line
     return line
 
 
-def get_source_context(source, lineno, context=LINES_OF_CONTEXT):
+def get_source_context(source, lineno, colno, context=LINES_OF_CONTEXT):
     # lineno's in JS are 1-indexed
     # just in case. sometimes math is hard
     if lineno > 0:
@@ -72,7 +93,7 @@ def get_source_context(source, lineno, context=LINES_OF_CONTEXT):
         pre_context = []
 
     try:
-        context_line = trim_line(source[lineno])
+        context_line = trim_line(source[lineno], colno)
     except IndexError:
         context_line = ''
 
@@ -354,7 +375,7 @@ def expand_javascript_source(data, **kwargs):
 
         # TODO: theoretically a minified source could point to another mapped, minified source
         frame.pre_context, frame.context_line, frame.post_context = get_source_context(
-            source=source, lineno=frame.lineno)
+            source=source, lineno=frame.lineno, colno=frame.colno or 0)
 
     if has_changes:
         logger.debug('Updating stacktraces with expanded source context')
diff --git a/tests/sentry/tasks/fetch_source/tests.py b/tests/sentry/tasks/fetch_source/tests.py
index 0ac1cebcf2..508cd64e05 100644
--- a/tests/sentry/tasks/fetch_source/tests.py
+++ b/tests/sentry/tasks/fetch_source/tests.py
@@ -6,7 +6,7 @@ from mock import patch
 
 from sentry.tasks.fetch_source import (
     UrlResult, expand_javascript_source, discover_sourcemap,
-    fetch_sourcemap, fetch_url, generate_module, BAD_SOURCE)
+    fetch_sourcemap, fetch_url, generate_module, BAD_SOURCE, trim_line)
 from sentry.utils.sourcemaps import (SourceMap, SourceMapIndex)
 from sentry.testutils import TestCase
 
@@ -217,3 +217,14 @@ class FetchBase64SourcemapTest(TestCase):
         content = {'/test.js': ['console.log("hello, World!")']}
 
         assert index == SourceMapIndex(states, keys, sources, content)
+
+
+class TrimLineTest(TestCase):
+    long_line = 'The public is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
+
+    def test_simple(self):
+        assert trim_line('foo') == 'foo'
+        assert trim_line(self.long_line) == 'The public is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it li {snip}'
+        assert trim_line(self.long_line, column=10) == 'The public is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it li {snip}'
+        assert trim_line(self.long_line, column=66) == '{snip} blic is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it lives wi {snip}'
+        assert trim_line(self.long_line, column=190) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
