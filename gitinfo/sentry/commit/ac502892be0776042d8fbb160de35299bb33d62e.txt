commit ac502892be0776042d8fbb160de35299bb33d62e
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Sep 8 19:58:57 2015 -0700

    Guard the Stacktrace interface against some non-string inputs

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 7cab40b3fd..bd2256f068 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -11,6 +11,8 @@ from __future__ import absolute_import
 __all__ = ('Stacktrace',)
 
 import re
+from types import NoneType
+from six import string_types
 
 from django.conf import settings
 from django.utils.translation import ugettext as _
@@ -148,6 +150,11 @@ class Frame(Interface):
     def to_python(cls, data):
         abs_path = data.get('abs_path')
         filename = data.get('filename')
+        function = data.get('function')
+        module = data.get('module')
+
+        for v in (abs_path, filename, function, module):
+            assert isinstance(v, (string_types, NoneType))
 
         # absolute path takes priority over filename
         # (in the end both will get set)
@@ -165,7 +172,7 @@ class Frame(Interface):
             else:
                 filename = abs_path
 
-        assert filename or data.get('function') or data.get('module')
+        assert filename or function or module
 
         context_locals = data.get('vars') or {}
         if isinstance(context_locals, (list, tuple)):
@@ -196,8 +203,8 @@ class Frame(Interface):
         kwargs = {
             'abs_path': trim(abs_path, 256),
             'filename': trim(filename, 256),
-            'module': trim(data.get('module'), 256),
-            'function': trim(data.get('function'), 256),
+            'module': trim(module, 256),
+            'function': trim(function, 256),
             'in_app': validate_bool(data.get('in_app'), False),
             'context_line': context_line,
             # TODO(dcramer): trim pre/post_context
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index f5d40baf91..308a36caf7 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -328,6 +328,28 @@ class StacktraceTest(TestCase):
         result = interface.get_stacktrace(event)
         self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo", line 3, in biz\n    def foo(r):\n  File "bar", line 5, in baz\n    return None')
 
+    def test_bad_input(self):
+        with self.assertRaises(AssertionError):
+            Frame.to_python({
+                'filename': 1,
+            })
+
+        with self.assertRaises(AssertionError):
+            Frame.to_python({
+                'filename': 'foo',
+                'abs_path': 1,
+            })
+
+        with self.assertRaises(AssertionError):
+            Frame.to_python({
+                'function': 1,
+            })
+
+        with self.assertRaises(AssertionError):
+            Frame.to_python({
+                'module': 1,
+            })
+
 
 class SlimFrameDataTest(TestCase):
     def test_under_max(self):
