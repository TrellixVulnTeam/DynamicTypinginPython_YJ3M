commit 7b833fd6c25089bc6ef70b78bb5941500f38c34c
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 4 19:57:25 2014 -0700

    Add basic rate limiting to notifications (15 per minute)

diff --git a/src/sentry/app.py b/src/sentry/app.py
index 1e4389ac86..af820244fb 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -28,5 +28,7 @@ cache = get_instance(settings.SENTRY_CACHE, settings.SENTRY_CACHE_OPTIONS)
 quotas = get_instance(settings.SENTRY_QUOTAS, settings.SENTRY_QUOTA_OPTIONS)
 nodestore = get_instance(
     settings.SENTRY_NODESTORE, settings.SENTRY_NODESTORE_OPTIONS)
+ratelimiter = get_instance(
+    settings.SENTRY_RATELIMITER, settings.SENTRY_RATELIMITER_OPTIONS)
 search = get_instance(settings.SENTRY_SEARCH, settings.SENTRY_SEARCH_OPTIONS)
 tsdb = get_instance(settings.SENTRY_TSDB, settings.SENTRY_TSDB_OPTIONS)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 3c5b292688..2ee5098bae 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -596,6 +596,10 @@ SENTRY_CACHE_OPTIONS = {}
 SENTRY_QUOTAS = 'sentry.quotas.Quota'
 SENTRY_QUOTA_OPTIONS = {}
 
+# Rate limiting backend
+SENTRY_RATELIMITER = 'sentry.ratelimits.base.RateLimiter'
+SENTRY_RATELIMITER_OPTIONS = {}
+
 # The default value for project-level quotas
 SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE = '90%'
 
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index bd0b0e7ba6..7473cf6d2d 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -7,6 +7,8 @@ sentry.plugins.bases.notify
 """
 from django import forms
 from django.utils.translation import ugettext_lazy as _
+
+from sentry.app import ratelimiter
 from sentry.plugins import Plugin
 from sentry.models import UserOption, AccessGroup
 
@@ -92,7 +94,11 @@ class NotificationPlugin(Plugin):
         if not send_to:
             return False
 
-        return True
+        return ratelimiter.is_limited(
+            project=project,
+            key=self.get_conf_key(),
+            limit=15,
+        )
 
     def test_configuration(self, project):
         from sentry.utils.samples import create_sample_event
diff --git a/src/sentry/ratelimits/__init__.py b/src/sentry/ratelimits/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/ratelimits/base.py b/src/sentry/ratelimits/base.py
new file mode 100644
index 0000000000..11a37c5f7f
--- /dev/null
+++ b/src/sentry/ratelimits/base.py
@@ -0,0 +1,3 @@
+class RateLimiter(object):
+    def is_limited(self, project, key, limit):
+        return False
diff --git a/src/sentry/ratelimits/redis.py b/src/sentry/ratelimits/redis.py
new file mode 100644
index 0000000000..499861a0fb
--- /dev/null
+++ b/src/sentry/ratelimits/redis.py
@@ -0,0 +1,35 @@
+from django.conf import settings
+from nydus.db import create_cluster
+from time import time
+
+from sentry.ratelimits.base import RateLimiter
+
+
+class RedisRateLimiter(RateLimiter):
+    ttl = 60
+
+    def __init__(self, **options):
+        if not options:
+            # inherit default options from REDIS_OPTIONS
+            options = settings.SENTRY_REDIS_OPTIONS
+        options.setdefault('hosts', {0: {}})
+        options.setdefault('router', 'nydus.db.routers.keyvalue.PartitionRouter')
+
+        self.conn = create_cluster({
+            'engine': 'nydus.db.backends.redis.Redis',
+            'router': options['router'],
+            'hosts': options['hosts'],
+        })
+
+    def is_limited(self, project, key, limit):
+        key = 'rl:%s:%s:%s' % (
+            key, project.id, int(time() / self.ttl)
+        )
+
+        with self.conn.map() as conn:
+            proj_result = conn.incr(key)
+            conn.expire(key, self.ttl)
+
+        if int(proj_result) > limit:
+            return True
+        return False
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index 3154f4548b..f55f5dc1d4 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -72,7 +72,7 @@ SENTRY_REDIS_OPTIONS = {
 }
 
 ###########
-## CACHE ##
+## Cache ##
 ###########
 
 # If you wish to use memcached, install the dependencies and adjust the config
@@ -102,6 +102,12 @@ SENTRY_CACHE = 'sentry.cache.redis.RedisCache'
 CELERY_ALWAYS_EAGER = False
 BROKER_URL = 'redis://localhost:6379'
 
+#################
+## Rate Limits ##
+#################
+
+SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'
+
 ####################
 ## Update Buffers ##
 ####################
diff --git a/tests/sentry/ratelimits/__init__.py b/tests/sentry/ratelimits/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/ratelimits/test_redis.py b/tests/sentry/ratelimits/test_redis.py
new file mode 100644
index 0000000000..25aa983888
--- /dev/null
+++ b/tests/sentry/ratelimits/test_redis.py
@@ -0,0 +1,17 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.ratelimits.redis import RedisRateLimiter
+from sentry.testutils import TestCase
+
+
+class RedisRateLimiterTest(TestCase):
+    def setUp(self):
+        self.backend = RedisRateLimiter(hosts={
+            0: {'db': 9}
+        })
+
+    def test_integration(self):
+        assert not self.backend.is_limited(self.project, 'foo', 1)
+        assert self.backend.is_limited(self.project, 'foo', 1)
