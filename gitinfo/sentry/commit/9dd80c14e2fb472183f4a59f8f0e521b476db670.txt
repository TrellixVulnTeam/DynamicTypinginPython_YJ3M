commit 9dd80c14e2fb472183f4a59f8f0e521b476db670
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Oct 18 22:38:53 2012 -0700

    Make transformers look slightly more interesting (API)

diff --git a/src/sentry/static/sentry/scripts/sentry/app.js b/src/sentry/static/sentry/scripts/sentry/app.js
index c5d8b64ebc..571aef37a7 100644
--- a/src/sentry/static/sentry/scripts/sentry/app.js
+++ b/src/sentry/static/sentry/scripts/sentry/app.js
@@ -111,14 +111,6 @@
         historicalData: []
       };
 
-      Group.prototype.getHistorical = function() {
-        if (this.historicalData) {
-          return this.historicalData.join(', ');
-        } else {
-          return '';
-        }
-      };
-
       return Group;
 
     })(Backbone.Model);
@@ -218,12 +210,33 @@
       };
 
       GroupView.prototype.render = function() {
-        this.$el.html(this.template({
-          model: this.model
-        }));
+        var data;
+        data = this.model.toJSON();
+        data.historicalData = this.getHistoricalAsString(this.model);
+        this.$el.html(this.template(data));
+        this.$el.addClass(this.getLevelClassName(this.model));
+        if (data.isResolved) {
+          this.$el.addClass('resolved');
+        }
+        if (data.historicalData) {
+          this.$el.addClass('with-metadata');
+        }
+        this.$el.attr('data-id', data.id);
         return this;
       };
 
+      GroupView.prototype.getHistoricalAsString = function(obj) {
+        if (obj.historicalData) {
+          return obj.historicalData.join(', ');
+        } else {
+          return '';
+        }
+      };
+
+      GroupView.prototype.getLevelClassName = function(obj) {
+        return 'level-' + obj.attributes.levelName;
+      };
+
       GroupView.prototype.updateCount = function(obj) {
         return $('.count span', this.$el).text(this.model.get("count"));
       };
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 4e69160c77..5c0cb812ef 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -13,6 +13,9 @@ from sentry.templatetags.sentry_plugins import get_tags
 from sentry.utils import json
 
 
+transformers = {}
+
+
 def transform(obj, request=None):
     if isinstance(obj, (list, tuple)):
         return [transform(o, request=request) for o in obj]
@@ -25,32 +28,41 @@ def transform(obj, request=None):
     return obj
 
 
-def transform_group(obj, request=None):
-    d = {
-        'id': str(obj.id),
-        'count': str(obj.times_seen),
-        'title': escape(obj.message_top()),
-        'message': escape(obj.error()),
-        'level': obj.level,
-        'levelName': escape(obj.get_level_display()),
-        'logger': escape(obj.logger),
-        'permalink': reverse('sentry-group', args=[obj.project.slug, obj.id]),
-        'versions': list(obj.get_version() or []),
-        'lastSeen': obj.last_seen.isoformat(),
-        'timeSpent': obj.avg_time_spent,
-        'canResolve': request and request.user.is_authenticated(),
-        'isResolved': obj.status == STATUS_RESOLVED,
-    }
-    if request:
-        d['tags'] = list(get_tags(obj, request))
-    return d
-
-
-transformers = {
-    Group: transform_group,
-}
-
-
 def to_json(obj, request=None):
     result = transform(obj, request=request)
     return json.dumps(result)
+
+
+def register(type):
+    def wrapped(func):
+        transformers[type()] = func
+        return func
+    return wrapped
+
+
+class Transformer(object):
+    def transform(obj, request=None):
+        return {}
+
+
+@register(Group)
+class GroupTransformer(Transformer):
+    def transform(obj, request=None):
+        d = {
+            'id': str(obj.id),
+            'count': str(obj.times_seen),
+            'title': escape(obj.message_top()),
+            'message': escape(obj.error()),
+            'level': obj.level,
+            'levelName': escape(obj.get_level_display()),
+            'logger': escape(obj.logger),
+            'permalink': reverse('sentry-group', args=[obj.project.slug, obj.id]),
+            'versions': list(obj.get_version() or []),
+            'lastSeen': obj.last_seen.isoformat(),
+            'timeSpent': obj.avg_time_spent,
+            'canResolve': request and request.user.is_authenticated(),
+            'isResolved': obj.status == STATUS_RESOLVED,
+        }
+        if request:
+            d['tags'] = list(get_tags(obj, request))
+        return d
