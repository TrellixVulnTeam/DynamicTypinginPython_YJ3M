commit 97257a89b54db9c679fbdd8a5dd18665bc03c24c
Author: Mark Story <mark@sentry.io>
Date:   Wed Jan 8 11:45:17 2020 -0500

    ref(discover) Remove editable field names (#16275)
    
    Allowing the user to edit fieldnames has not been as helpful as we
    originally thought. Using the column/aggregate name is more transparent
    and simpler to work with. It also makes our URLs shorter :)

diff --git a/src/sentry/api/serializers/models/discoversavedquery.py b/src/sentry/api/serializers/models/discoversavedquery.py
index 40930cdc70..909047aee2 100644
--- a/src/sentry/api/serializers/models/discoversavedquery.py
+++ b/src/sentry/api/serializers/models/discoversavedquery.py
@@ -11,7 +11,6 @@ class DiscoverSavedQuerySerializer(Serializer):
     def serialize(self, obj, attrs, user, **kwargs):
 
         query_keys = [
-            "fieldnames",
             "environment",
             "query",
             "fields",
diff --git a/src/sentry/discover/endpoints/serializers.py b/src/sentry/discover/endpoints/serializers.py
index 7af2261c2a..4a58ceb7e4 100644
--- a/src/sentry/discover/endpoints/serializers.py
+++ b/src/sentry/discover/endpoints/serializers.py
@@ -158,14 +158,13 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
 
     # Attributes that are only accepted if version = 2
     environment = ListField(child=serializers.CharField(), required=False, allow_null=True)
-    fieldnames = ListField(child=serializers.CharField(), required=False, allow_null=True)
     query = serializers.CharField(required=False, allow_null=True)
     tags = ListField(child=serializers.CharField(), required=False, allow_null=True)
     widths = ListField(child=serializers.CharField(), required=False, allow_null=True)
     yAxis = serializers.CharField(required=False, allow_null=True)
 
     disallowed_fields = {
-        1: set(["environment", "fieldnames", "query", "tags", "yAxis"]),
+        1: set(["environment", "query", "tags", "yAxis"]),
         2: set(["groupby", "rollup", "aggregations", "conditions", "limit"]),
     }
 
@@ -189,7 +188,6 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
     def validate(self, data):
         query = {}
         query_keys = [
-            "fieldnames",
             "environment",
             "query",
             "fields",
@@ -215,11 +213,6 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
             if len(query["fields"]) < 1:
                 raise serializers.ValidationError("You must include at least one field.")
 
-            if query.get("fieldnames") and len(query["fieldnames"]) != len(query["fields"]):
-                raise serializers.ValidationError(
-                    "You must provide an equal number of field names and fields"
-                )
-
         if data["projects"] == ALL_ACCESS_PROJECTS:
             data["projects"] = []
             query["all_projects"] = True
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index 2d97d5c583..f390ae6381 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -143,7 +143,6 @@ class SpanDetail extends React.Component<Props, State> {
         'transaction.duration',
         'timestamp',
       ],
-      fieldnames: ['transaction', 'project', 'trace.span', 'duration', 'timestamp'],
       orderby: '-timestamp',
       query: `event.type:transaction trace:${span.trace_id} trace.parent_span:${
         span.span_id
@@ -189,7 +188,6 @@ class SpanDetail extends React.Component<Props, State> {
         'transaction.duration',
         'timestamp',
       ],
-      fieldnames: ['transaction', 'project', 'trace.span', 'duration', 'timestamp'],
       orderby: '-timestamp',
       query: `event.type:transaction trace:${span.trace_id}`,
       tags: ['release', 'project.name', 'user.email', 'user.ip', 'environment'],
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 11f95a72ef..2d2754493e 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -673,7 +673,6 @@ export type NewQuery = {
   name: string;
   projects: Readonly<number[]>;
   fields: Readonly<string[]>;
-  fieldnames: Readonly<string[]>;
   widths?: Readonly<string[]>;
   query: string;
   orderby?: string;
diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index b7b0540db4..dc005b294d 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -4,7 +4,7 @@ import isObject from 'lodash/isObject';
 import isString from 'lodash/isString';
 import isUndefined from 'lodash/isUndefined';
 
-import {NewQuery, Project} from 'app/types';
+import {Project} from 'app/types';
 import {appendTagCondition} from 'app/utils/queryString';
 
 function arrayIsEqual(arr?: any[], other?: any[], deep?: boolean): boolean {
@@ -274,18 +274,3 @@ export function generateQueryWithTag(
 
   return query;
 }
-
-/**
- * Takes in a DiscoverV2 NewQuery object and returns a Partial containing
- * the desired fields to populate into reload analytics
- */
-export function extractAnalyticsQueryFields(payload: NewQuery): Partial<NewQuery> {
-  const {projects, fields, fieldnames, query, tags} = payload;
-  return {
-    projects,
-    fields,
-    fieldnames,
-    query,
-    tags,
-  };
-}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 2f8fc2d9ed..aee2612b6e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -35,7 +35,6 @@ export const DEFAULT_EVENT_VIEW: Readonly<NewQuery> = {
   query: '',
   projects: [],
   fields: ['title', 'event.type', 'project', 'user', 'timestamp'],
-  fieldnames: ['title', 'type', 'project', 'user', 'time'],
   orderby: '-timestamp',
   version: 2,
   tags: ['event.type', 'release', 'project.name', 'user.email', 'user.ip', 'environment'],
@@ -54,7 +53,6 @@ export const TRANSACTION_VIEWS: Readonly<Array<NewQuery>> = [
       'p75',
       'p95',
     ],
-    fieldnames: ['transaction', 'project', 'count', 'avg', '75th', '95th'],
     orderby: '-count_id',
     query: 'event.type:transaction',
     tags: ['release', 'project.name', 'user.email', 'user.ip', 'environment'],
@@ -69,7 +67,6 @@ export const ALL_VIEWS: Readonly<Array<NewQuery>> = [
     id: undefined,
     name: t('Errors'),
     fields: ['title', 'count(id)', 'count_unique(user)', 'project', 'last_seen'],
-    fieldnames: ['error', 'count', 'users', 'project', 'last seen'],
     orderby: '-count_id',
     query: 'event.type:error',
     tags: ['project.name', 'release', 'environment'],
@@ -81,7 +78,6 @@ export const ALL_VIEWS: Readonly<Array<NewQuery>> = [
     id: undefined,
     name: t('Project Summary'),
     fields: ['project', 'count(id)', 'count_unique(issue.id)'],
-    fieldnames: ['project', 'count', 'unique errors'],
     orderby: '-count_id',
     query: 'event.type:error',
     tags: ['error.type', 'project.name', 'release', 'environment'],
@@ -93,7 +89,6 @@ export const ALL_VIEWS: Readonly<Array<NewQuery>> = [
     id: undefined,
     name: t('Errors by URL'),
     fields: ['url', 'count(id)', 'count_unique(issue.id)'],
-    fieldnames: ['URL', 'count', 'unique errors'],
     orderby: '-count_id',
     query: 'event.type:error',
     tags: ['error.type', 'project.name', 'url', 'release', 'environment'],
@@ -106,7 +101,6 @@ export const ALL_VIEWS: Readonly<Array<NewQuery>> = [
     id: undefined,
     name: t('Errors by Release'),
     fields: ['release', 'count(id)', 'count_unique(user)', 'timestamp'],
-    fieldnames: ['Release', 'Issue', 'Users', 'time'],
     orderby: '-count_id',
     tags: ['event.type', 'release', 'project', 'user.email', 'user.ip', 'environment'],
     projects: [],
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 89e9472404..7fc8e08dcf 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -51,13 +51,11 @@ const reverseSort = (sort: Sort): Sort => {
 
 export type Field = {
   field: string;
-  title: string;
   width?: number;
 };
 export type Column = {
   aggregation: string;
   field: string;
-  fieldname: string;
   width?: number;
 };
 
@@ -131,11 +129,6 @@ const decodeFields = (location: Location): Array<Field> => {
     : isString(query.field)
     ? [query.field]
     : [];
-  const fieldnames: string[] = Array.isArray(query.fieldnames)
-    ? query.fieldnames
-    : isString(query.fieldnames)
-    ? [query.fieldnames]
-    : [];
   const widths = Array.isArray(query.widths)
     ? query.widths
     : isString(query.widths)
@@ -144,12 +137,10 @@ const decodeFields = (location: Location): Array<Field> => {
 
   const parsed: Field[] = [];
   fields.forEach((field, i) => {
-    const title = fieldnames[i] ? fieldnames[i] : field;
-
     const w = Number(widths[i]);
     const width = !isNaN(w) ? w : COL_WIDTH_UNDEFINED;
 
-    parsed.push({field, title, width});
+    parsed.push({field, width});
   });
 
   return parsed;
@@ -390,11 +381,10 @@ class EventView {
 
   static fromSavedQuery(saved: NewQuery | SavedQuery): EventView {
     const fields = saved.fields.map((field, i) => {
-      const title = saved.fieldnames && saved.fieldnames[i] ? saved.fieldnames[i] : field;
       const width =
         saved.widths && saved.widths[i] ? Number(saved.widths[i]) : COL_WIDTH_UNDEFINED;
 
-      return {field, title, width};
+      return {field, width};
     });
     const yAxis = saved.yAxis;
 
@@ -483,7 +473,6 @@ class EventView {
       id: this.id,
       name: this.name || '',
       fields: this.getFields(),
-      fieldnames: this.getFieldNames(),
       widths: this.getWidths().map(w => String(w)),
       orderby,
       tags: this.tags,
@@ -520,7 +509,6 @@ class EventView {
       id: undefined,
       name: undefined,
       field: undefined,
-      fieldnames: undefined,
       widths: undefined,
       sort: undefined,
       tag: undefined,
@@ -540,7 +528,6 @@ class EventView {
       id: this.id,
       name: this.name,
       field: this.getFields(),
-      fieldnames: this.getFieldNames(),
       widths: this.getWidths(),
       sort: encodeSorts(this.sorts),
       tag: this.tags,
@@ -567,10 +554,6 @@ class EventView {
     return this.fields.map(field => field.field);
   }
 
-  getFieldNames(): string[] {
-    return this.fields.map(field => field.title);
-  }
-
   getWidths(): number[] {
     return this.fields.map(field => (field.width ? field.width : COL_WIDTH_UNDEFINED));
   }
@@ -621,12 +604,8 @@ class EventView {
     const field = newColumn.field.trim();
     const aggregation = newColumn.aggregation.trim();
     const fieldAsString = generateFieldAsString({field, aggregation});
-    const name = newColumn.fieldname.trim();
-    const hasName = name.length > 0;
-
     const newField: Field = {
       field: fieldAsString,
-      title: hasName ? name : fieldAsString,
       width: newColumn.width || COL_WIDTH_UNDEFINED,
     };
 
@@ -648,16 +627,15 @@ class EventView {
     updatedColumn: Column,
     tableMeta: MetaType | undefined
   ): EventView {
-    const {aggregation, field, fieldname, width} = updatedColumn;
+    const {aggregation, field, width} = updatedColumn;
 
     const columnToBeUpdated = this.fields[columnIndex];
     const fieldAsString = generateFieldAsString({field, aggregation});
 
     const updateField = columnToBeUpdated.field !== fieldAsString;
-    const updateFieldName = columnToBeUpdated.title !== fieldname;
     const updateWidth = columnToBeUpdated.width !== width;
 
-    if (!updateField && !updateFieldName && !updateWidth) {
+    if (!updateField && !updateWidth) {
       return this;
     }
 
@@ -668,7 +646,6 @@ class EventView {
 
     const updatedField: Field = {
       field: fieldAsString,
-      title: fieldname,
       width: width || COL_WIDTH_UNDEFINED,
     };
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 7337237819..36d2106d2d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -30,8 +30,8 @@ import EventView, {Field} from './eventView';
 import {generateTitle} from './utils';
 
 const CHART_AXIS_OPTIONS = [
-  {label: 'count', value: 'count(id)'},
-  {label: 'users', value: 'count_unique(user)'},
+  {label: 'count(id)', value: 'count(id)'},
+  {label: 'count_unique(users)', value: 'count_unique(user)'},
 ];
 
 type Props = {
@@ -125,7 +125,7 @@ class Results extends React.Component<Props, State> {
           (field: Field) => ['last_seen', 'latest_event'].includes(field.field) === false
         )
         .map((field: Field) => {
-          return {label: field.title, value: field.field};
+          return {label: field.field, value: field.field};
         })
         .concat(CHART_AXIS_OPTIONS),
       'value'
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
index 384e7c7720..889ab18c4b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
@@ -1,7 +1,6 @@
 import {Client} from 'app/api';
 import {t} from 'app/locale';
-import {Organization, SavedQuery} from 'app/types';
-import {extractAnalyticsQueryFields} from 'app/utils';
+import {Organization, NewQuery, SavedQuery} from 'app/types';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 
 import {
@@ -225,3 +224,17 @@ export function getAnalyticsCreateEventKeyName(
     eventName,
   };
 }
+
+/**
+ * Takes in a DiscoverV2 NewQuery object and returns a Partial containing
+ * the desired fields to populate into reload analytics
+ */
+export function extractAnalyticsQueryFields(payload: NewQuery): Partial<NewQuery> {
+  const {projects, fields, query, tags} = payload;
+  return {
+    projects,
+    fields,
+    query,
+    tags,
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx b/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
index fd63f50eeb..dca3099a6f 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
@@ -71,12 +71,12 @@ class SortLink extends React.Component<Props> {
     const {align, field, tableDataMeta} = this.props;
 
     if (!isFieldSortable(field, tableDataMeta)) {
-      return <StyledNonLink align={align}>{field.title}</StyledNonLink>;
+      return <StyledNonLink align={align}>{field.field}</StyledNonLink>;
     }
 
     return (
       <StyledLink align={align} to={this.getTarget()}>
-        {field.title} {this.renderChevron()}
+        {field.field} {this.renderChevron()}
       </StyledLink>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
index 5bcac86890..ab8f487998 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
@@ -4,7 +4,7 @@ import uniq from 'lodash/uniq';
 
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {t} from 'app/locale';
-import {Form, SelectField, TextField} from 'app/components/forms';
+import {Form, SelectField} from 'app/components/forms';
 import InlineSvg from 'app/components/inlineSvg';
 import {Organization} from 'app/types';
 import space from 'app/styles/space';
@@ -70,7 +70,6 @@ type TableModalEditColumnFormProps = {
 type TableModalEditColumnFormState = {
   aggregations: Aggregation[];
   fields: Field[];
-  name: string;
 };
 
 class TableModalEditColumnBodyForm extends React.Component<
@@ -87,7 +86,6 @@ class TableModalEditColumnBodyForm extends React.Component<
       this.props.tagKeys,
       this.props.column ? this.props.column.aggregation : ''
     ),
-    name: this.props.column ? this.props.column.name : '',
   };
 
   componentDidMount() {
@@ -128,17 +126,11 @@ class TableModalEditColumnBodyForm extends React.Component<
   };
 
   onChangeField = (value: Field) => {
-    const name = this.state.name === '' ? String(value) : this.state.name;
     this.setState({
       aggregations: filterAggregationByField(this.props.organization, value),
-      name,
     });
   };
 
-  onChangeName = (value: string) => {
-    this.setState({name: value});
-  };
-
   onSubmitForm = (values: any) => {
     const {indexColumnOrder, column} = this.props;
     const {createColumn, updateColumn, onSuccess, onError} = this.props.actions;
@@ -172,38 +164,23 @@ class TableModalEditColumnBodyForm extends React.Component<
           initialData={{
             aggregation: column ? column.aggregation : '',
             field: column ? column.field : '',
-            name: this.state.name,
           }}
         >
           <FormRow>
-            <FormRowItemLeft>
-              <SelectField
-                name="aggregation"
-                label={t('Aggregate')}
-                placeholder="Select Aggregate"
-                choices={this.state.aggregations}
-                onChange={this.onChangeAggregation}
-              />
-            </FormRowItemLeft>
-            <FormRowItemRight>
-              <SelectField
-                required
-                name="field"
-                label={t('Column Type')}
-                placeholder="Select Column Type"
-                choices={this.state.fields}
-                onChange={this.onChangeField}
-              />
-            </FormRowItemRight>
-          </FormRow>
-          <FormRow>
-            <TextField
+            <SelectField
+              name="aggregation"
+              label={t('Aggregate')}
+              placeholder="Select Aggregate"
+              choices={this.state.aggregations}
+              onChange={this.onChangeAggregation}
+            />
+            <SelectField
               required
-              name="name"
-              value={this.state.name}
-              label={t('Display Name')}
-              placeholder="Display Name"
-              onChange={this.onChangeName}
+              name="field"
+              label={t('Column Type')}
+              placeholder="Select Column Type"
+              choices={this.state.fields}
+              onChange={this.onChangeField}
             />
           </FormRow>
         </Form>
@@ -314,20 +291,9 @@ function filterFieldByAggregation(
 
 const FormRow = styled('div')`
   box-sizing: border-box;
-`;
-const FormRowItem = styled('div')`
-  display: inline-block;
-  padding-right: ${space(1)};
-
-  &:last-child {
-    padding-right: 0;
-  }
-`;
-const FormRowItemLeft = styled(FormRowItem)`
-  width: 35%;
-`;
-const FormRowItemRight = styled(FormRowItem)`
-  width: 65%;
+  display: grid;
+  grid-template-columns: 35% auto;
+  grid-column-gap: ${space(2)};
 `;
 
 const FooterContent = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index db411c13c3..3751a7e71c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -113,7 +113,6 @@ class TableView extends React.Component<TableViewProps> {
     const payload = {
       aggregation: String(nextColumn.aggregation),
       field: String(nextColumn.field),
-      fieldname: String(nextColumn.name),
       width: nextColumn.width ? Number(nextColumn.width) : COL_WIDTH_UNDEFINED,
     };
 
@@ -128,7 +127,6 @@ class TableView extends React.Component<TableViewProps> {
 
       const aggregationChanged = prevField.aggregation !== nextField.aggregation;
       const fieldChanged = prevField.field !== nextField.field;
-      const fieldnameChanged = prevField.fieldname !== nextField.fieldname;
       const widthChanged = prevField.width !== nextField.width;
 
       if (aggregationChanged) {
@@ -139,10 +137,6 @@ class TableView extends React.Component<TableViewProps> {
         changed.push('field');
       }
 
-      if (fieldnameChanged) {
-        changed.push('fieldname');
-      }
-
       if (widthChanged) {
         changed.push('width');
       }
@@ -183,7 +177,6 @@ class TableView extends React.Component<TableViewProps> {
       organization_id: organization.id,
       aggregation: prevField.aggregation,
       field: prevField.field,
-      fieldname: prevField.fieldname,
     });
 
     pushEventViewToLocation({
@@ -211,7 +204,6 @@ class TableView extends React.Component<TableViewProps> {
       organization_id: organization.id,
       aggregation: prevField.aggregation,
       field: prevField.field,
-      fieldname: prevField.fieldname,
     });
 
     pushEventViewToLocation({
@@ -490,7 +482,6 @@ const ExpandAggregateRow = (props: {
         const updatedColumn = {
           aggregation: '',
           field: exploded.field,
-          fieldname: exploded.field,
           width: exploded.width,
         };
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index f8af9838cc..8cd57bbeb5 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -59,7 +59,6 @@ export function explodeField(
 ): {
   aggregation: string;
   field: string;
-  fieldname: string;
   width: number;
 } {
   const results = explodeFieldString(field.field);
@@ -67,7 +66,6 @@ export function explodeField(
   return {
     aggregation: results.aggregation,
     field: results.field,
-    fieldname: field.title,
     width: field.width || COL_WIDTH_DEFAULT,
   };
 }
@@ -258,16 +256,15 @@ export function getAggregateAlias(field: string): string {
 export type QueryWithColumnState =
   | Query
   | {
-      fieldnames: string | string[] | null | undefined;
       field: string | string[] | null | undefined;
       sort: string | string[] | null | undefined;
     };
 
 const TEMPLATE_TABLE_COLUMN: TableColumn<React.ReactText> = {
   key: '',
-  name: '',
   aggregation: '',
   field: '',
+  name: '',
   width: COL_WIDTH_DEFAULT,
 
   type: 'never',
@@ -275,14 +272,14 @@ const TEMPLATE_TABLE_COLUMN: TableColumn<React.ReactText> = {
   isSortable: false,
   isPrimary: false,
 
-  eventViewField: Object.freeze({field: '', title: '', width: COL_WIDTH_DEFAULT}),
+  eventViewField: Object.freeze({field: '', width: COL_WIDTH_DEFAULT}),
 };
 
 export function decodeColumnOrder(
   fields: Readonly<FieldType[]>
 ): TableColumn<React.ReactText>[] {
   return fields.map((f: FieldType) => {
-    const col = {aggregationField: f.field, name: f.title, width: f.width};
+    const col = {aggregationField: f.field, name: f.field, width: f.width};
     const column: TableColumn<React.ReactText> = {...TEMPLATE_TABLE_COLUMN};
 
     // "field" will be split into ["field"]
@@ -297,15 +294,14 @@ export function decodeColumnOrder(
       column.aggregation = aggregationField[0] as Aggregation;
       column.field = aggregationField[1] as Field;
     }
-
     column.key = col.aggregationField;
-    column.name = col.name;
     column.type = column.aggregation ? 'number' : FIELDS[column.field];
     column.width =
       col.width && col.width !== COL_WIDTH_UNDEFINED
         ? col.width
         : getDefaultWidth(aggregationField[0]);
 
+    column.name = column.key;
     column.isSortable = AGGREGATIONS[column.aggregation]
       ? AGGREGATIONS[column.aggregation].isSortable
       : false;
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index 961037e2e9..08ea9634d4 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -25,7 +25,6 @@ def all_events_query(**kwargs):
         "field": ["title", "event.type", "project", "user", "timestamp"],
         "tag": ["event.type", "release", "project.name", "user.email", "user.ip", "environment"],
         "name": ["All Events"],
-        "fieldnames": ["title", "type", "project", "user", "time"],
     }
     options.update(kwargs)
 
@@ -36,7 +35,6 @@ def errors_query(**kwargs):
     options = {
         "sort": ["-last_seen", "-title"],
         "name": ["Errors"],
-        "fieldnames": ["error", "events", "users", "project", "last seen"],
         "field": ["title", "count(id)", "count_unique(user)", "project", "last_seen"],
         "tag": ["error.type", "project.name"],
         "query": ["event.type:error"],
@@ -50,7 +48,6 @@ def transactions_query(**kwargs):
     options = {
         "sort": ["-count"],
         "name": ["Transactions"],
-        "fieldnames": ["transaction", "project", "volume"],
         "field": ["transaction", "project", "count()"],
         "tag": ["release", "project.name", "user.email", "user.ip", "environment"],
         "statsPeriod": ["14d"],
@@ -380,11 +377,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
     def test_create_saved_query(self):
         # Simulate a custom query
-        query = {
-            "fieldnames": ["project", "count"],
-            "field": ["project.id", "count()"],
-            "query": "event.type:error",
-        }
+        query = {"field": ["project.id", "count()"], "query": "event.type:error"}
         query_name = "A new custom query"
         with self.feature(FEATURE_NAMES):
             # Go directly to the query builder view
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index f4edc93952..48083bc002 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -9,7 +9,6 @@ const generateFields = fields => {
   return fields.map(field => {
     return {
       field,
-      title: field,
     };
   });
 };
@@ -51,7 +50,6 @@ describe('EventView.fromLocation()', function() {
         id: '42',
         name: 'best query',
         field: ['count()', 'id'],
-        fieldnames: ['events', 'projects'],
         widths: ['123', '456'],
         sort: ['title', '-count'],
         tag: ['foo', 'bar'],
@@ -70,10 +68,7 @@ describe('EventView.fromLocation()', function() {
     expect(eventView).toMatchObject({
       id: '42',
       name: 'best query',
-      fields: [
-        {field: 'count()', title: 'events', width: 123},
-        {field: 'id', title: 'projects', width: 456},
-      ],
+      fields: [{field: 'count()', width: 123}, {field: 'id', width: 456}],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:transaction',
@@ -92,7 +87,6 @@ describe('EventView.fromLocation()', function() {
         id: '42',
         name: 'best query',
         field: ['count()', 'id'],
-        fieldnames: ['events', 'projects'],
         widths: ['123', '456'],
         sort: ['title', '-count'],
         tag: ['foo', 'bar'],
@@ -110,10 +104,7 @@ describe('EventView.fromLocation()', function() {
     expect(eventView).toMatchObject({
       id: '42',
       name: 'best query',
-      fields: [
-        {field: 'count()', title: 'events', width: 123},
-        {field: 'id', title: 'projects', width: 456},
-      ],
+      fields: [{field: 'count()', width: 123}, {field: 'id', width: 456}],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:transaction',
@@ -131,7 +122,6 @@ describe('EventView.fromLocation()', function() {
         id: '42',
         name: 'best query',
         field: ['count()', 'id'],
-        fieldnames: ['events', 'projects'],
         widths: ['123', '456'],
         sort: ['title', '-count'],
         tag: ['foo', 'bar'],
@@ -148,10 +138,7 @@ describe('EventView.fromLocation()', function() {
     expect(eventView).toMatchObject({
       id: '42',
       name: 'best query',
-      fields: [
-        {field: 'count()', title: 'events', width: 123},
-        {field: 'id', title: 'projects', width: 456},
-      ],
+      fields: [{field: 'count()', width: 123}, {field: 'id', width: 456}],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:transaction',
@@ -206,8 +193,8 @@ describe('EventView.fromSavedQuery()', function() {
       id: saved.id,
       name: saved.name,
       fields: [
-        {field: 'count()', title: 'count()', width: COL_WIDTH_UNDEFINED},
-        {field: 'id', title: 'id', width: COL_WIDTH_UNDEFINED},
+        {field: 'count()', width: COL_WIDTH_UNDEFINED},
+        {field: 'id', width: COL_WIDTH_UNDEFINED},
       ],
       sorts: [{field: 'id', kind: 'desc'}],
       tags: [],
@@ -229,8 +216,8 @@ describe('EventView.fromSavedQuery()', function() {
       id: saved.id,
       name: saved.name,
       fields: [
-        {field: 'count()', title: 'count()', width: COL_WIDTH_UNDEFINED},
-        {field: 'id', title: 'id', width: COL_WIDTH_UNDEFINED},
+        {field: 'count()', width: COL_WIDTH_UNDEFINED},
+        {field: 'id', width: COL_WIDTH_UNDEFINED},
       ],
       sorts: [{field: 'id', kind: 'desc'}],
       tags: [],
@@ -248,7 +235,6 @@ describe('EventView.fromSavedQuery()', function() {
       orderby: '-count_id',
       name: 'foo bar',
       fields: ['release', 'count(id)'],
-      fieldnames: ['Release tags', 'counts'],
       widths: [111, 222],
       dateCreated: '2019-10-30T06:13:17.632078Z',
       environment: ['dev', 'production'],
@@ -265,10 +251,7 @@ describe('EventView.fromSavedQuery()', function() {
     const expected = {
       id: '5',
       name: 'foo bar',
-      fields: [
-        {field: 'release', title: 'Release tags', width: 111},
-        {field: 'count(id)', title: 'counts', width: 222},
-      ],
+      fields: [{field: 'release', width: 111}, {field: 'count(id)', width: 222}],
       sorts: generateSorts(['count_id']),
       query: '',
       project: [1],
@@ -283,15 +266,14 @@ describe('EventView.fromSavedQuery()', function() {
     const saved = {
       name: 'best query',
       fields: ['count()', 'title'],
-      fieldnames: ['volume', 'caption'],
       range: '14d',
       start: '',
       end: '',
     };
     const eventView = EventView.fromSavedQuery(saved);
     expect(eventView.fields).toEqual([
-      {field: 'count()', title: 'volume', width: COL_WIDTH_UNDEFINED},
-      {field: 'title', title: 'caption', width: COL_WIDTH_UNDEFINED},
+      {field: 'count()', width: COL_WIDTH_UNDEFINED},
+      {field: 'title', width: COL_WIDTH_UNDEFINED},
     ]);
     expect(eventView.name).toEqual(saved.name);
     expect(eventView.statsPeriod).toEqual('14d');
@@ -305,7 +287,6 @@ describe('EventView.fromSavedQuery()', function() {
       end: '2019-10-23T19:27:04+0000',
       name: 'release query',
       fields: ['release', 'count(timestamp)'],
-      fieldnames: ['release', 'counts'],
       dateCreated: '2019-10-30T05:10:23.718937Z',
       environment: ['dev', 'production'],
       start: '2019-10-20T21:02:51+0000',
@@ -347,7 +328,6 @@ describe('EventView.fromSavedQuery()', function() {
       end: '2019-10-23T19:27:04+0000',
       name: 'release query',
       fields: ['release', 'count(timestamp)'],
-      fieldnames: ['release', 'counts'],
       dateCreated: '2019-10-30T05:10:23.718937Z',
       environment: ['dev', 'production'],
       start: '2019-10-20T21:02:51+0000',
@@ -386,7 +366,6 @@ describe('EventView.fromNewQueryWithLocation()', function() {
     query: '',
     projects: [],
     fields: ['title', 'event.type', 'project', 'user', 'timestamp'],
-    fieldnames: ['title', 'type', 'project', 'user', 'time'],
     orderby: '-timestamp',
     version: 2,
     tags: [
@@ -412,11 +391,11 @@ describe('EventView.fromNewQueryWithLocation()', function() {
       id: undefined,
       name: 'All Events',
       fields: [
-        {field: 'title', title: 'title'},
-        {field: 'event.type', title: 'type'},
-        {field: 'project', title: 'project'},
-        {field: 'user', title: 'user'},
-        {field: 'timestamp', title: 'time'},
+        {field: 'title'},
+        {field: 'event.type'},
+        {field: 'project'},
+        {field: 'user'},
+        {field: 'timestamp'},
       ],
       sorts: [{field: 'timestamp', kind: 'desc'}],
       tags: [
@@ -453,11 +432,11 @@ describe('EventView.fromNewQueryWithLocation()', function() {
       id: undefined,
       name: 'All Events',
       fields: [
-        {field: 'title', title: 'title'},
-        {field: 'event.type', title: 'type'},
-        {field: 'project', title: 'project'},
-        {field: 'user', title: 'user'},
-        {field: 'timestamp', title: 'time'},
+        {field: 'title'},
+        {field: 'event.type'},
+        {field: 'project'},
+        {field: 'user'},
+        {field: 'timestamp'},
       ],
       sorts: [{field: 'timestamp', kind: 'desc'}],
       tags: [
@@ -500,11 +479,11 @@ describe('EventView.fromNewQueryWithLocation()', function() {
       id: undefined,
       name: 'All Events',
       fields: [
-        {field: 'title', title: 'title'},
-        {field: 'event.type', title: 'type'},
-        {field: 'project', title: 'project'},
-        {field: 'user', title: 'user'},
-        {field: 'timestamp', title: 'time'},
+        {field: 'title'},
+        {field: 'event.type'},
+        {field: 'project'},
+        {field: 'user'},
+        {field: 'timestamp'},
       ],
       sorts: [{field: 'timestamp', kind: 'desc'}],
       tags: [
@@ -549,11 +528,11 @@ describe('EventView.fromNewQueryWithLocation()', function() {
       id: undefined,
       name: 'All Events',
       fields: [
-        {field: 'title', title: 'title'},
-        {field: 'event.type', title: 'type'},
-        {field: 'project', title: 'project'},
-        {field: 'user', title: 'user'},
-        {field: 'timestamp', title: 'time'},
+        {field: 'title'},
+        {field: 'event.type'},
+        {field: 'project'},
+        {field: 'user'},
+        {field: 'timestamp'},
       ],
       sorts: [{field: 'timestamp', kind: 'desc'}],
       tags: [
@@ -593,7 +572,6 @@ describe('EventView.generateQueryStringObject()', function() {
       id: undefined,
       name: undefined,
       field: ['id', 'title'],
-      fieldnames: ['id', 'title'],
       widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
       sort: [],
       tag: [],
@@ -609,10 +587,7 @@ describe('EventView.generateQueryStringObject()', function() {
     const state = {
       id: '1234',
       name: 'best query',
-      fields: [
-        {field: 'count()', title: 'events', width: 123},
-        {field: 'project.id', title: 'project', width: 456},
-      ],
+      fields: [{field: 'count()', width: 123}, {field: 'project.id', width: 456}],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:error',
@@ -630,7 +605,6 @@ describe('EventView.generateQueryStringObject()', function() {
       id: '1234',
       name: 'best query',
       field: ['count()', 'project.id'],
-      fieldnames: ['events', 'project'],
       widths: [123, 456],
       sort: ['-count'],
       tag: ['foo', 'bar'],
@@ -646,31 +620,28 @@ describe('EventView.generateQueryStringObject()', function() {
     expect(eventView.generateQueryStringObject()).toEqual(expected);
   });
 
-  it('encodes fields and fieldnames', function() {
+  it('encodes fields', function() {
     const eventView = new EventView({
-      fields: [{field: 'id', title: 'ID'}, {field: 'title', title: 'Event'}],
+      fields: [{field: 'id'}, {field: 'title'}],
       tags: [],
       sorts: [],
     });
     const query = eventView.generateQueryStringObject();
     expect(query.field).toEqual(['id', 'title']);
-    expect(query.fieldnames).toEqual(['ID', 'Event']);
   });
 
   it('returns a copy of data preventing mutation', function() {
     const eventView = new EventView({
-      fields: [{field: 'id', title: 'ID'}, {field: 'title', title: 'Event'}],
+      fields: [{field: 'id'}, {field: 'title'}],
       tags: [],
       sorts: [],
     });
     const query = eventView.generateQueryStringObject();
     query.field.push('newthing');
-    query.fieldnames.push('new thing');
 
     // Getting the query again should return the original values.
     const secondQuery = eventView.generateQueryStringObject();
     expect(secondQuery.field).toEqual(['id', 'title']);
-    expect(secondQuery.fieldnames).toEqual(['ID', 'Event']);
 
     expect(query).not.toEqual(secondQuery);
   });
@@ -969,10 +940,7 @@ describe('EventView.toNewQuery()', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events', width: 123},
-      {field: 'project.id', title: 'project', width: 456},
-    ],
+    fields: [{field: 'count()', width: 123}, {field: 'project.id', width: 456}],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -992,7 +960,6 @@ describe('EventView.toNewQuery()', function() {
       version: 2,
       id: '1234',
       name: 'best query',
-      fieldnames: ['events', 'project'],
       fields: ['count()', 'project.id'],
       widths: ['123', '456'],
       orderby: '-count',
@@ -1023,7 +990,6 @@ describe('EventView.toNewQuery()', function() {
       version: 2,
       id: '1234',
       name: 'best query',
-      fieldnames: ['events', 'project'],
       fields: ['count()', 'project.id'],
       widths: ['123', '456'],
       orderby: '-count',
@@ -1053,7 +1019,6 @@ describe('EventView.toNewQuery()', function() {
       version: 2,
       id: '1234',
       name: 'best query',
-      fieldnames: ['events', 'project'],
       fields: ['count()', 'project.id'],
       widths: ['123', '456'],
       orderby: '-count',
@@ -1072,10 +1037,7 @@ describe('EventView.toNewQuery()', function() {
 describe('EventView.isValid()', function() {
   it('event view is valid when there is at least one field', function() {
     const eventView = new EventView({
-      fields: [
-        {field: 'count()', title: 'count'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: [],
       tags: [],
       project: [],
@@ -1096,29 +1058,10 @@ describe('EventView.isValid()', function() {
   });
 });
 
-describe('EventView.getFieldNames()', function() {
-  it('returns field names', function() {
-    const eventView = new EventView({
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
-      sorts: [],
-      tags: [],
-      project: [],
-    });
-
-    expect(eventView.getFieldNames()).toEqual(['events', 'project']);
-  });
-});
-
 describe('EventView.getFields()', function() {
   it('returns fields', function() {
     const eventView = new EventView({
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: [],
       tags: [],
       project: [],
@@ -1131,10 +1074,7 @@ describe('EventView.getFields()', function() {
 describe('EventView.hasAutolinkField()', function() {
   it('returns false when none of the fields are auto-linkable', function() {
     const eventView = new EventView({
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: [],
       tags: [],
       project: [],
@@ -1162,10 +1102,7 @@ describe('EventView.numOfColumns()', function() {
     // has columns
 
     const eventView = new EventView({
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: [],
       tags: [],
       project: [],
@@ -1191,10 +1128,7 @@ describe('EventView.clone()', function() {
     const state = {
       id: '1234',
       name: 'best query',
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:error',
@@ -1221,10 +1155,7 @@ describe('EventView.withNewColumn()', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
-    ],
+    fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -1241,7 +1172,6 @@ describe('EventView.withNewColumn()', function() {
     const newColumn = {
       aggregation: '',
       field: 'title',
-      fieldname: 'event title',
     };
 
     const eventView2 = eventView.withNewColumn(newColumn);
@@ -1252,7 +1182,7 @@ describe('EventView.withNewColumn()', function() {
 
     const nextState = {
       ...state,
-      fields: [...state.fields, {field: 'title', title: 'event title'}],
+      fields: [...state.fields, {field: 'title'}],
     };
 
     expect(eventView2).toMatchObject(nextState);
@@ -1264,7 +1194,6 @@ describe('EventView.withNewColumn()', function() {
     const newColumn = {
       aggregation: 'count',
       field: '',
-      fieldname: 'another count column',
     };
 
     const eventView2 = eventView.withNewColumn(newColumn);
@@ -1275,7 +1204,7 @@ describe('EventView.withNewColumn()', function() {
 
     const nextState = {
       ...state,
-      fields: [...state.fields, {field: 'count()', title: 'another count column'}],
+      fields: [...state.fields, {field: 'count()'}],
     };
 
     expect(eventView2).toMatchObject(nextState);
@@ -1287,7 +1216,6 @@ describe('EventView.withNewColumn()', function() {
     const newColumn = {
       aggregation: 'avg',
       field: 'transaction.duration',
-      fieldname: 'average',
     };
 
     const eventView2 = eventView.withNewColumn(newColumn);
@@ -1298,7 +1226,7 @@ describe('EventView.withNewColumn()', function() {
 
     const nextState = {
       ...state,
-      fields: [...state.fields, {field: 'avg(transaction.duration)', title: 'average'}],
+      fields: [...state.fields, {field: 'avg(transaction.duration)'}],
     };
 
     expect(eventView2).toMatchObject(nextState);
@@ -1309,10 +1237,7 @@ describe('EventView.withUpdatedColumn()', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
-    ],
+    fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -1333,7 +1258,6 @@ describe('EventView.withUpdatedColumn()', function() {
     const newColumn = {
       aggregation: 'count',
       field: '',
-      fieldname: 'events',
     };
 
     const eventView2 = eventView.withUpdatedColumn(0, newColumn, meta);
@@ -1348,7 +1272,6 @@ describe('EventView.withUpdatedColumn()', function() {
     const newColumn = {
       aggregation: '',
       field: 'title',
-      fieldname: 'event title',
     };
 
     const eventView2 = eventView.withUpdatedColumn(1, newColumn, meta);
@@ -1359,7 +1282,7 @@ describe('EventView.withUpdatedColumn()', function() {
 
     const nextState = {
       ...state,
-      fields: [state.fields[0], {field: 'title', title: 'event title'}],
+      fields: [state.fields[0], {field: 'title'}],
     };
 
     expect(eventView2).toMatchObject(nextState);
@@ -1371,7 +1294,6 @@ describe('EventView.withUpdatedColumn()', function() {
     const newColumn = {
       aggregation: 'count',
       field: '',
-      fieldname: 'counts',
     };
 
     const eventView2 = eventView.withUpdatedColumn(1, newColumn, meta);
@@ -1382,7 +1304,7 @@ describe('EventView.withUpdatedColumn()', function() {
 
     const nextState = {
       ...state,
-      fields: [state.fields[0], {field: 'count()', title: 'counts'}],
+      fields: [state.fields[0], {field: 'count()'}],
     };
 
     expect(eventView2).toMatchObject(nextState);
@@ -1394,7 +1316,6 @@ describe('EventView.withUpdatedColumn()', function() {
     const newColumn = {
       aggregation: 'avg',
       field: 'transaction.duration',
-      fieldname: 'average',
     };
 
     const eventView2 = eventView.withUpdatedColumn(1, newColumn, meta);
@@ -1405,7 +1326,7 @@ describe('EventView.withUpdatedColumn()', function() {
 
     const nextState = {
       ...state,
-      fields: [state.fields[0], {field: 'avg(transaction.duration)', title: 'average'}],
+      fields: [state.fields[0], {field: 'avg(transaction.duration)'}],
     };
 
     expect(eventView2).toMatchObject(nextState);
@@ -1418,7 +1339,6 @@ describe('EventView.withUpdatedColumn()', function() {
       const newColumn = {
         aggregation: '',
         field: 'title',
-        fieldname: 'event title',
       };
 
       const eventView2 = eventView.withUpdatedColumn(0, newColumn, meta);
@@ -1430,7 +1350,7 @@ describe('EventView.withUpdatedColumn()', function() {
       const nextState = {
         ...state,
         sorts: [{field: 'title', kind: 'desc'}],
-        fields: [{field: 'title', title: 'event title'}, state.fields[1]],
+        fields: [{field: 'title'}, state.fields[1]],
       };
 
       expect(eventView2).toMatchObject(nextState);
@@ -1439,7 +1359,7 @@ describe('EventView.withUpdatedColumn()', function() {
     it('the sorted column occurs at least twice', function() {
       const modifiedState = {
         ...state,
-        fields: [...state.fields, {field: 'count()', title: 'events 2'}],
+        fields: [...state.fields, {field: 'count()'}],
       };
 
       const eventView = new EventView(modifiedState);
@@ -1447,7 +1367,6 @@ describe('EventView.withUpdatedColumn()', function() {
       const newColumn = {
         aggregation: '',
         field: 'title',
-        fieldname: 'event title',
       };
 
       const eventView2 = eventView.withUpdatedColumn(0, newColumn, meta);
@@ -1458,11 +1377,7 @@ describe('EventView.withUpdatedColumn()', function() {
 
       const nextState = {
         ...state,
-        fields: [
-          {field: 'title', title: 'event title'},
-          state.fields[1],
-          {field: 'count()', title: 'events 2'},
-        ],
+        fields: [{field: 'title'}, state.fields[1], {field: 'count()'}],
       };
 
       expect(eventView2).toMatchObject(nextState);
@@ -1477,13 +1392,12 @@ describe('EventView.withUpdatedColumn()', function() {
       const expected = {
         ...state,
         sorts: [{field: 'title', kind: 'desc'}],
-        fields: [{field: 'title', title: 'event title'}, state.fields[1]],
+        fields: [{field: 'title'}, state.fields[1]],
       };
 
       const newColumn = {
         aggregation: '',
         field: 'title',
-        fieldname: 'event title',
       };
 
       const eventView2 = eventView.withUpdatedColumn(0, newColumn, {});
@@ -1501,10 +1415,7 @@ describe('EventView.withUpdatedColumn()', function() {
     it('default to a sortable column', function() {
       const modifiedState = {
         ...state,
-        fields: [
-          {field: 'count()', title: 'events'},
-          {field: 'title', title: 'event title'},
-        ],
+        fields: [{field: 'count()'}, {field: 'title'}],
       };
 
       const eventView = new EventView(modifiedState);
@@ -1513,7 +1424,6 @@ describe('EventView.withUpdatedColumn()', function() {
       const newColumn = {
         aggregation: '',
         field: 'project.id',
-        fieldname: 'project',
       };
 
       const eventView2 = eventView.withUpdatedColumn(0, newColumn, meta);
@@ -1525,10 +1435,7 @@ describe('EventView.withUpdatedColumn()', function() {
       const nextState = {
         ...state,
         sorts: [{field: 'title', kind: 'desc'}],
-        fields: [
-          {field: 'project.id', title: 'project'},
-          {field: 'title', title: 'event title'},
-        ],
+        fields: [{field: 'project.id'}, {field: 'title'}],
       };
 
       expect(eventView2).toMatchObject(nextState);
@@ -1537,7 +1444,7 @@ describe('EventView.withUpdatedColumn()', function() {
     it('has no sort if there are no sortable columns', function() {
       const modifiedState = {
         ...state,
-        fields: [{field: 'count()', title: 'events'}],
+        fields: [{field: 'count()'}],
       };
 
       const eventView = new EventView(modifiedState);
@@ -1546,7 +1453,6 @@ describe('EventView.withUpdatedColumn()', function() {
       const newColumn = {
         aggregation: '',
         field: 'project.id',
-        fieldname: 'project',
       };
 
       const eventView2 = eventView.withUpdatedColumn(0, newColumn, meta);
@@ -1558,7 +1464,7 @@ describe('EventView.withUpdatedColumn()', function() {
       const nextState = {
         ...state,
         sorts: [],
-        fields: [{field: 'project.id', title: 'project'}],
+        fields: [{field: 'project.id'}],
       };
 
       expect(eventView2).toMatchObject(nextState);
@@ -1570,10 +1476,7 @@ describe('EventView.withDeletedColumn()', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
-    ],
+    fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -1591,7 +1494,7 @@ describe('EventView.withDeletedColumn()', function() {
   it('returns itself when attempting to delete the last remaining column', function() {
     const modifiedState = {
       ...state,
-      fields: [{field: 'count()', title: 'events'}],
+      fields: [{field: 'count()'}],
     };
 
     const eventView = new EventView(modifiedState);
@@ -1609,11 +1512,7 @@ describe('EventView.withDeletedColumn()', function() {
 
       const state2 = {
         ...state,
-        fields: [
-          {field: 'title', title: 'title'},
-          {field: 'timestamp', title: 'timestamp'},
-          {field: 'count(id)', title: 'count(id)'},
-        ],
+        fields: [{field: 'title'}, {field: 'timestamp'}, {field: 'count(id)'}],
         sorts: generateSorts(['timestamp']),
       };
 
@@ -1622,10 +1521,7 @@ describe('EventView.withDeletedColumn()', function() {
       const expected = {
         ...state,
         sorts: generateSorts(['title']),
-        fields: [
-          {field: 'title', title: 'title'},
-          {field: 'count(id)', title: 'count(id)'},
-        ],
+        fields: [{field: 'title'}, {field: 'count(id)'}],
       };
 
       const eventView2 = eventView.withDeletedColumn(1, {});
@@ -1659,11 +1555,7 @@ describe('EventView.withDeletedColumn()', function() {
     it('has a remaining sortable column', function() {
       const modifiedState = {
         ...state,
-        fields: [
-          {field: 'count()', title: 'events'},
-          {field: 'project.id', title: 'project'},
-          {field: 'title', title: 'event title'},
-        ],
+        fields: [{field: 'count()'}, {field: 'project.id'}, {field: 'title'}],
       };
 
       const eventView = new EventView(modifiedState);
@@ -1676,10 +1568,7 @@ describe('EventView.withDeletedColumn()', function() {
       const nextState = {
         ...state,
         sorts: [{field: 'title', kind: 'desc'}],
-        fields: [
-          {field: 'project.id', title: 'project'},
-          {field: 'title', title: 'event title'},
-        ],
+        fields: [{field: 'project.id'}, {field: 'title'}],
       };
 
       expect(eventView2).toMatchObject(nextState);
@@ -1712,10 +1601,7 @@ describe('EventView.withMovedColumn()', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
-    ],
+    fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -1755,10 +1641,7 @@ describe('EventView.withMovedColumn()', function() {
 describe('EventView.getSorts()', function() {
   it('returns fields', function() {
     const eventView = new EventView({
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
       tags: [],
       project: [],
@@ -1812,10 +1695,7 @@ describe('EventView.isFieldSorted()', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
-    ],
+    fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -1834,7 +1714,6 @@ describe('EventView.isFieldSorted()', function() {
 
     const field = {
       field: 'count()',
-      title: 'events',
     };
 
     const actual = eventView.isFieldSorted(field, meta);
@@ -1851,7 +1730,6 @@ describe('EventView.isFieldSorted()', function() {
 
     const field = {
       field: 'project.id',
-      title: 'project',
     };
 
     expect(eventView.isFieldSorted(field, meta)).toBe(void 0);
@@ -1862,10 +1740,7 @@ describe('EventView.sortOnField()', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
-    ],
+    fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -1910,7 +1785,7 @@ describe('EventView.sortOnField()', function() {
   it('sort on new field', function() {
     const modifiedState = {
       ...state,
-      fields: [...state.fields, {field: 'title', title: 'event title'}],
+      fields: [...state.fields, {field: 'title'}],
     };
 
     const eventView = new EventView(modifiedState);
@@ -1936,10 +1811,7 @@ describe('EventView.isEqualTo()', function() {
     const state = {
       id: '1234',
       name: 'best query',
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:error',
@@ -1968,10 +1840,7 @@ describe('EventView.isEqualTo()', function() {
     const state = {
       id: '1234',
       name: 'best query',
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:error',
@@ -1995,10 +1864,7 @@ describe('EventView.isEqualTo()', function() {
     const state = {
       id: '1234',
       name: 'best query',
-      fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
-      ],
+      fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:error',
@@ -2028,8 +1894,8 @@ describe('EventView.isEqualTo()', function() {
       ...state,
       fields: [
         // swapped columns
-        {field: 'project.id', title: 'project'},
-        {field: 'count()', title: 'events'},
+        {field: 'project.id'},
+        {field: 'count()'},
       ],
     });
     expect(eventView.isEqualTo(eventView2)).toBe(false);
@@ -2110,10 +1976,7 @@ describe('isAPIPayloadSimilar', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
-    ],
+    fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -2174,10 +2037,7 @@ describe('isAPIPayloadSimilar', function() {
       const location = {};
       const thisAPIPayload = thisEventView.getEventsAPIPayload(location);
 
-      const otherEventView = thisEventView.sortOnField(
-        {field: 'count()', title: 'events'},
-        meta
-      );
+      const otherEventView = thisEventView.sortOnField({field: 'count()'}, meta);
       const otherLocation = {};
       const otherAPIPayload = otherEventView.getEventsAPIPayload(otherLocation);
 
@@ -2194,7 +2054,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: '',
         field: 'title',
-        fieldname: 'event title',
       };
 
       const otherEventView = thisEventView.withNewColumn(newColumn);
@@ -2214,7 +2073,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: 'count',
         field: '',
-        fieldname: 'events',
       };
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
@@ -2234,7 +2092,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: '',
         field: 'title',
-        fieldname: 'event title',
       };
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
@@ -2254,7 +2111,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: 'avg',
         field: '',
-        fieldname: 'events',
       };
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
@@ -2274,7 +2130,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: 'count',
         field: '',
-        fieldname: 'my events',
       };
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
@@ -2321,10 +2176,7 @@ describe('isAPIPayloadSimilar', function() {
       const location = {};
       const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
 
-      const otherEventView = thisEventView.sortOnField(
-        {field: 'count()', title: 'events'},
-        meta
-      );
+      const otherEventView = thisEventView.sortOnField({field: 'count()'}, meta);
       const otherLocation = {};
       const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
 
@@ -2341,7 +2193,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: '',
         field: 'title',
-        fieldname: 'event title',
       };
 
       const otherEventView = thisEventView.withNewColumn(newColumn);
@@ -2361,7 +2212,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: 'count',
         field: '',
-        fieldname: 'events',
       };
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
@@ -2381,7 +2231,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: '',
         field: 'title',
-        fieldname: 'event title',
       };
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
@@ -2401,7 +2250,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: 'avg',
         field: '',
-        fieldname: 'events',
       };
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
@@ -2421,7 +2269,6 @@ describe('isAPIPayloadSimilar', function() {
       const newColumn = {
         aggregation: 'count',
         field: '',
-        fieldname: 'my events',
       };
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index 08bad9b8f4..153756c7ad 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -8,21 +8,17 @@ import Results from 'app/views/eventsV2/results';
 const FIELDS = [
   {
     field: 'title',
-    title: 'Custom Title',
   },
   {
     field: 'timestamp',
-    title: 'Custom Time',
   },
   {
     field: 'user',
-    title: 'Custom User',
   },
 ];
 
 const generateFields = () => {
   return {
-    fieldnames: FIELDS.map(i => i.title),
     field: FIELDS.map(i => i.field),
   };
 };
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index 8baf3a2cd8..7311b92943 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -40,7 +40,6 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
   const errorsViewModified = EventView.fromSavedQuery(errorsQuery);
   errorsViewModified.id = '1';
   errorsViewModified.name = 'Modified Name';
-  errorsViewModified.fields[0].title = 'Modified Field Name';
 
   const savedQuery = errorsViewSaved.toNewQuery();
 
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 1503e6c0d7..6a865d6bc5 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -246,21 +246,18 @@ describe('decodeColumnOrder', function() {
   });
 
   it('can decode fields', function() {
-    const results = decodeColumnOrder([
-      {field: 'title', title: 'Event title', width: 123},
-    ]);
+    const results = decodeColumnOrder([{field: 'title', width: 123}]);
 
     expect(Array.isArray(results)).toBeTruthy();
 
     expect(results[0]).toEqual({
       key: 'title',
-      name: 'Event title',
+      name: 'title',
       aggregation: '',
       field: 'title',
       width: 123,
       eventViewField: {
         field: 'title',
-        title: 'Event title',
         width: 123,
       },
       isDragging: false,
@@ -271,21 +268,18 @@ describe('decodeColumnOrder', function() {
   });
 
   it('can decode aggregate functions with no arguments', function() {
-    const results = decodeColumnOrder([
-      {field: 'count()', title: 'projects', width: 123},
-    ]);
+    const results = decodeColumnOrder([{field: 'count()', width: 123}]);
 
     expect(Array.isArray(results)).toBeTruthy();
 
     expect(results[0]).toEqual({
       key: 'count()',
-      name: 'projects',
+      name: 'count()',
       aggregation: 'count',
       field: '',
       width: 123,
       eventViewField: {
         field: 'count()',
-        title: 'projects',
         width: 123,
       },
       isDragging: false,
@@ -296,19 +290,17 @@ describe('decodeColumnOrder', function() {
   });
 
   it('can decode elements with aggregate functions with arguments', function() {
-    const results = decodeColumnOrder([
-      {field: 'avg(transaction.duration)', title: 'average'},
-    ]);
+    const results = decodeColumnOrder([{field: 'avg(transaction.duration)'}]);
 
     expect(Array.isArray(results)).toBeTruthy();
 
     expect(results[0]).toEqual({
       key: 'avg(transaction.duration)',
-      name: 'average',
+      name: 'avg(transaction.duration)',
       aggregation: 'avg',
       field: 'transaction.duration',
       width: COL_WIDTH_NUMBER,
-      eventViewField: {field: 'avg(transaction.duration)', title: 'average'},
+      eventViewField: {field: 'avg(transaction.duration)'},
       isDragging: false,
       isPrimary: false,
       isSortable: true,
@@ -321,10 +313,7 @@ describe('pushEventViewToLocation', function() {
   const state = {
     id: '1234',
     name: 'best query',
-    fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
-    ],
+    fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: [{field: 'count', kind: 'desc'}],
     tags: ['foo', 'bar'],
     query: 'event.type:error',
@@ -354,7 +343,6 @@ describe('pushEventViewToLocation', function() {
         id: '1234',
         name: 'best query',
         field: ['count()', 'project.id'],
-        fieldnames: ['events', 'project'],
         widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
         sort: ['-count'],
         tag: ['foo', 'bar'],
@@ -384,7 +372,6 @@ describe('pushEventViewToLocation', function() {
         id: '1234',
         name: 'best query',
         field: ['count()', 'project.id'],
-        fieldnames: ['events', 'project'],
         widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
         sort: ['-count'],
         tag: ['foo', 'bar'],
diff --git a/tests/snuba/api/endpoints/test_discover_saved_queries.py b/tests/snuba/api/endpoints/test_discover_saved_queries.py
index 0a57bfdeaf..9eb978a49b 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_queries.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_queries.py
@@ -209,13 +209,13 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
                     "range": "24h",
                     "limit": 20,
                     "environment": ["dev"],
-                    "fieldnames": ["event id"],
+                    "yAxis": "count(id)",
                     "aggregations": [],
                     "orderby": "-time",
                 },
             )
         assert response.status_code == 400, response.content
-        assert "cannot use the environment, fieldnames attribute(s)" in response.content
+        assert "cannot use the environment, yAxis attribute(s)" in response.content
 
 
 class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
@@ -254,23 +254,6 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
         assert response.status_code == 400, response.content
         assert "include at least one field" in response.content
 
-    def test_post_fieldnames_length_mismatch(self):
-        with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
-            response = self.client.post(
-                url,
-                {
-                    "name": "new query",
-                    "projects": self.project_ids,
-                    "fields": ["event", "count()", "project"],
-                    "fieldnames": ["event", "total"],
-                    "range": "24h",
-                    "version": 2,
-                },
-            )
-        assert response.status_code == 400, response.content
-        assert "equal number of field names and fields" in response.content
-
     def test_post_success(self):
         with self.feature(self.feature_name):
             url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
@@ -281,7 +264,6 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
                     "projects": self.project_ids,
                     "fields": ["title", "count()", "project"],
                     "environment": ["dev"],
-                    "fieldnames": ["event title", "total", "project"],
                     "query": "event.type:error browser.name:Firefox",
                     "range": "24h",
                     "tags": ["release", "environment"],
@@ -292,7 +274,6 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
         assert response.status_code == 201, response.content
         data = response.data
         assert data["fields"] == ["title", "count()", "project"]
-        assert data["fieldnames"] == ["event title", "total", "project"]
         assert data["range"] == "24h"
         assert data["environment"] == ["dev"]
         assert data["query"] == "event.type:error browser.name:Firefox"
@@ -300,21 +281,6 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
         assert data["yAxis"] == "count(id)"
         assert data["version"] == 2
 
-    def test_post_success_no_fieldnames(self):
-        with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
-            response = self.client.post(
-                url,
-                {
-                    "name": "new query",
-                    "projects": self.project_ids,
-                    "fields": ["event", "count()", "project"],
-                    "range": "24h",
-                    "version": 2,
-                },
-            )
-        assert response.status_code == 201, response.content
-
     def test_post_all_projects(self):
         with self.feature(self.feature_name):
             url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
