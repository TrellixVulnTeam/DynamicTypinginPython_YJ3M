commit a59045a19f689aacc0b1b0dbdbf82b6a2f974ae0
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue May 19 08:51:43 2020 -0700

    ref(slack): Render multi-org note to users (#18890)
    
    * render multi-org note

diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index 365730657c..9c1fbc49f0 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -3,6 +3,8 @@ from __future__ import absolute_import
 import six
 
 from collections import namedtuple, defaultdict
+from django.db.models import Q
+from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.identity.pipeline import IdentityProviderPipeline
@@ -16,6 +18,7 @@ from sentry.integrations import (
 
 from sentry.models import Integration, Rule, RuleStatus
 from sentry.pipeline import NestedPipelineView, PipelineView
+from sentry.utils.compat import map
 from sentry.utils.http import absolute_uri
 from sentry.shared_integrations.exceptions import ApiError, IntegrationError
 from sentry.integrations.slack import post_migration
@@ -172,11 +175,13 @@ class SlackIntegrationProvider(IntegrationProvider):
         # are using in post_install to send messages to slack
         if state.get("integration_id"):
             metadata["installation_type"] = "migrated_to_bot"
+            metadata["migrated_at"] = timezone.now()
 
             post_install_data = {
                 "user_id": state["user_id"],
                 "private_channels": state["private_channels"],
                 "missing_channels": state["missing_channels"],
+                "extra_orgs": state["extra_orgs"],
             }
 
             integration["integration_id"] = state.get("integration_id")
@@ -218,12 +223,27 @@ class SlackReAuthIntro(PipelineView):
     """
 
     def dispatch(self, request, pipeline):
-        if "integration_id" in request.GET:
-            pipeline.bind_state("integration_id", request.GET["integration_id"])
+        integration_id = request.GET.get("integration_id")
+
+        if integration_id:
+            pipeline.bind_state("integration_id", integration_id)
             pipeline.bind_state("user_id", request.user.id)
 
             try:
-                all_channels = _get_channels_from_rules(pipeline)
+                integration = Integration.objects.get(id=integration_id, provider="slack",)
+            except Integration.DoesNotExist:
+                return pipeline.error(IntegrationError("Could not find Slack integration."))
+
+            # We check if there are any other orgs tied to the integration to let the
+            # user know those organizations will be affected by the migration
+            extra_orgs = map(
+                lambda x: x.slug, integration.organizations.filter(~Q(id=pipeline.organization.id))
+            )
+
+            pipeline.bind_state("extra_orgs", extra_orgs)
+
+            try:
+                all_channels = _get_channels_from_rules(pipeline.organization, integration)
             except IntegrationError as error:
                 return pipeline.error(error)
 
@@ -235,6 +255,8 @@ class SlackReAuthIntro(PipelineView):
                 template="sentry/integrations/slack-reauth-introduction.html",
                 context={
                     "next_url": "%s%s" % (absolute_uri("/extensions/slack/setup/"), next_param),
+                    "workspace": integration.name,
+                    "extra_orgs": extra_orgs,
                 },
                 request=request,
             )
@@ -326,15 +348,7 @@ def _request_channel_info(pipeline):
     return channel_responses
 
 
-def _get_channels_from_rules(pipeline):
-    organization = pipeline.organization
-    integration_id = pipeline.fetch_state("integration_id")
-
-    try:
-        integration = Integration.objects.get(id=integration_id, provider="slack",)
-    except Integration.DoesNotExist:
-        raise IntegrationError("Could not find Slack integration.")
-
+def _get_channels_from_rules(organization, integration):
     rules = Rule.objects.filter(
         project__in=organization.project_set.all(), status=RuleStatus.ACTIVE,
     )
diff --git a/src/sentry/templates/sentry/integrations/slack-reauth-introduction.html b/src/sentry/templates/sentry/integrations/slack-reauth-introduction.html
index e86a1c8039..37199588a2 100644
--- a/src/sentry/templates/sentry/integrations/slack-reauth-introduction.html
+++ b/src/sentry/templates/sentry/integrations/slack-reauth-introduction.html
@@ -26,6 +26,17 @@
     .section-info {
         font-size: 80%;
     }
+    .extra-org {
+        display: block;
+        margin-left: 10px;
+    }
+    .extra-org::before {
+        content: " â€¢ ";
+    }
+    .multi-org-alert {
+        display: flex;
+        flex-direction: column;
+    }
     .loader, .loader:after {
         border-radius: 50%;
         width: 10em;
@@ -111,6 +122,23 @@
          {% endblocktrans %}
      </p>
 
+    {% if extra_orgs %}
+    <p class="alert alert-block flex">
+        <i class="icon icon-exclamation"></i>
+        <span class="multi-org-alert">
+            <span>
+                {% blocktrans %}
+                    Your Slack workspace, <strong>{{workspace}}</strong>, is installed on additional organizations:
+                {% endblocktrans %}
+            </span>
+            {% for org in extra_orgs %}
+                <span class="extra-org">{{org}}</span>
+            {% endfor %}
+                {% trans "Once you've upgraded your integration, all other organizations with the same workspace will be upgraded as well." %}
+        </span>
+    </p>
+    {% endif %}
+
     <div id="loader"></div>
     <div class="form-actions clearfix">
         <div class="pull-right">
diff --git a/tests/sentry/integrations/slack/test_migration_flow.py b/tests/sentry/integrations/slack/test_migration_flow.py
index 1dbd65f93e..31de58a235 100644
--- a/tests/sentry/integrations/slack/test_migration_flow.py
+++ b/tests/sentry/integrations/slack/test_migration_flow.py
@@ -138,14 +138,14 @@ class SlackMigrationTest(IntegrationTestCase):
 
         assert integration.external_id == "TXXXXXXX1"
         assert integration.name == "Example"
-        assert integration.metadata == {
-            "access_token": "xoxb-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
-            "old_access_token": "xoxa-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
-            "scopes": sorted(self.provider.identity_oauth_scopes),
-            "icon": "http://example.com/ws_icon.jpg",
-            "domain_name": "test-slack-workspace.slack.com",
-            "installation_type": "migrated_to_bot",
-        }
+        md = integration.metadata
+        assert md["access_token"] == "xoxb-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx"
+        assert md["old_access_token"] == "xoxa-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx"
+        assert md["scopes"] == sorted(self.provider.identity_oauth_scopes)
+        assert md["icon"] == "http://example.com/ws_icon.jpg"
+        assert md["domain_name"] == "test-slack-workspace.slack.com"
+        assert md["installation_type"] == "migrated_to_bot"
+        assert md["migrated_at"]
 
         oi = OrganizationIntegration.objects.get(
             integration=integration, organization=self.organization
@@ -165,6 +165,17 @@ class SlackMigrationTest(IntegrationTestCase):
             }
         )
 
+    def test_multiple_orgs_same_workspace(self):
+        new_org = self.create_organization(owner=self.create_user())
+        OrganizationIntegration.objects.create(organization=new_org, integration=self.integration)
+
+        resp = self.client.get(
+            u"{}?{}".format(self.init_path, urlencode({"integration_id": self.integration.id}))
+        )
+        assert resp.status_code == 200
+        self.assertContains(resp, self.integration.name)
+        self.assertContains(resp, new_org.slug)
+
     @patch("sentry.integrations.slack.post_migration.run_post_migration")
     @responses.activate
     def test_migration_flow_no_channels(self, run_post_migration):
