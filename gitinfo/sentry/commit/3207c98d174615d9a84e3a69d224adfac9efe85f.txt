commit 3207c98d174615d9a84e3a69d224adfac9efe85f
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Jul 9 12:31:35 2018 -0700

    ref(integrations): Update delete flow and allow reinstalls for integrations (#8854)
    
    * feat(integrations): Allow reinstalling of GitHub integration

diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index 3b7a62c1e4..e30e2d8023 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -20,6 +20,7 @@ class IntegrationSerializer(Serializer):
             'name': obj.name,
             'icon': obj.metadata.get('icon'),
             'domainName': obj.metadata.get('domain_name'),
+            'accountType': obj.metadata.get('account_type'),
             'status': obj.get_status_display(),
             'provider': {
                 'key': provider.key,
@@ -27,6 +28,7 @@ class IntegrationSerializer(Serializer):
                 'canAdd': provider.can_add,
                 'canAddProject': provider.can_add_project,
                 'features': [f.value for f in provider.features],
+                'aspects': provider.metadata.aspects,
             },
         }
 
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index 872c46db15..84b20fd044 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -24,6 +24,15 @@ Define a relationship between Sentry and GitHub.
  * Authorize repositories to be added for syncing commit data.
  * Create or link existing GitHub issues. (coming soon)
 """
+disable_dialog = {
+    'actionText': 'Visit GitHub',
+    'body': 'Before deleting this integration, you must uninstall this integration from GitHub. After uninstalling, your integration will be disabled at which point you can choose to delete this integration.'
+}
+
+removal_dialog = {
+    'actionText': 'Delete',
+    'body': 'Deleting this integration will delete all associated repositories and commit data. This action cannot be undone. Are you sure you want to delete your integration?'
+}
 
 metadata = IntegrationMetadata(
     description=DESCRIPTION.strip(),
@@ -31,7 +40,10 @@ metadata = IntegrationMetadata(
     noun=_('Installation'),
     issue_url='https://github.com/getsentry/sentry/issues/new?title=GitHub%20Integration:%20&labels=Component%3A%20Integrations',
     source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/github',
-    aspects={},
+    aspects={
+        'disable_dialog': disable_dialog,
+        'removal_dialog': removal_dialog,
+    },
 )
 
 API_ERRORS = {
@@ -50,6 +62,9 @@ class GitHubIntegration(Integration, GitHubIssueBasic, RepositoryMixin):
     def get_repositories(self):
         return self.get_client().get_repositories()
 
+    def reinstall(self):
+        self.reinstall_repositories()
+
     def message_from_error(self, exc):
         if isinstance(exc, ApiError):
             message = API_ERRORS.get(exc.code)
@@ -129,7 +144,7 @@ class GitHubIntegrationProvider(IntegrationProvider):
         installation = self.get_installation_info(
             identity['access_token'], state['installation_id'])
 
-        return {
+        integration = {
             'name': installation['account']['login'],
             # TODO(adhiraj): This should be a constant representing the entire github cloud.
             'external_id': installation['id'],
@@ -142,6 +157,7 @@ class GitHubIntegrationProvider(IntegrationProvider):
                 'expires_at': None,
                 'icon': installation['account']['avatar_url'],
                 'domain_name': installation['account']['html_url'].replace('https://', ''),
+                'account_type': installation['account']['type'],
             },
             'user_identity': {
                 'type': 'github',
@@ -151,6 +167,11 @@ class GitHubIntegrationProvider(IntegrationProvider):
             },
         }
 
+        if state.get('reinstall_id'):
+            integration['reinstall_id'] = state['reinstall_id']
+
+        return integration
+
     def setup(self):
         from sentry.plugins import bindings
         bindings.add(
@@ -166,6 +187,9 @@ class GitHubInstallationRedirect(PipelineView):
         return 'https://github.com/apps/%s' % name
 
     def dispatch(self, request, pipeline):
+        if 'reinstall_id' in request.GET:
+            pipeline.bind_state('reinstall_id', request.GET['reinstall_id'])
+
         if 'installation_id' in request.GET:
             pipeline.bind_state('installation_id', request.GET['installation_id'])
             return pipeline.next_step()
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index 70b62cb9a3..ac27bffc02 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -8,6 +8,7 @@ from django.utils import timezone
 from django.utils.translation import ugettext as _
 
 from sentry.api.serializers import serialize
+from sentry.constants import ObjectStatus
 from sentry.models import Identity, IdentityProvider, IdentityStatus, Integration
 from sentry.pipeline import Pipeline
 from sentry.utils import json
@@ -55,7 +56,15 @@ class IntegrationPipeline(Pipeline):
         return response
 
     def _finish_pipeline(self, data):
-        if 'expect_exists' in data:
+        if 'reinstall_id' in data:
+            integration = Integration.objects.get(
+                provider=self.provider.key,
+                id=data['reinstall_id'],
+            )
+            integration.update(external_id=data['external_id'], status=ObjectStatus.VISIBLE)
+            integration.get_installation().reinstall()
+
+        elif 'expect_exists' in data:
             integration = Integration.objects.get(
                 provider=self.provider.key,
                 external_id=data['external_id'],
diff --git a/src/sentry/integrations/repositories.py b/src/sentry/integrations/repositories.py
index 60d3ee4f17..32f849b411 100644
--- a/src/sentry/integrations/repositories.py
+++ b/src/sentry/integrations/repositories.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+from sentry.constants import ObjectStatus
+from sentry.models import Repository
+
 
 class RepositoryMixin(object):
 
@@ -11,3 +14,14 @@ class RepositoryMixin(object):
         >>>     return self.get_client().get_repositories()
         """
         raise NotImplementedError
+
+    def reinstall_repositories(self):
+        """
+        reinstalls repositories associated with the integration
+        """
+        organizations = self.model.organizations.all()
+        Repository.objects.filter(
+            organization_id__in=organizations.values_list('id', flat=True),
+            provider='integrations:%s' % self.model.provider,
+            integration_id=self.model.id,
+        ).update(status=ObjectStatus.VISIBLE)
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
index d32522f3ee..d368f58f68 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
@@ -31,6 +31,8 @@ export default class AddIntegrationButton extends React.Component {
   static propTypes = {
     provider: PropTypes.object.isRequired,
     onAddIntegration: PropTypes.func.isRequired,
+    integration: PropTypes.object,
+    reinstall: PropTypes.bool,
   };
 
   componentDidMount() {
@@ -50,10 +52,13 @@ export default class AddIntegrationButton extends React.Component {
     const name = 'sentryAddIntegration';
 
     const {url, width, height} = provider.setupDialog;
+    const {integration, reinstall} = this.props;
     const {left, top} = computeCenteredWindow(width, height);
 
+    const installUrl = reinstall ? url + `?reinstall_id=${integration.id}` : url;
+
     this.dialog = window.open(
-      url,
+      installUrl,
       name,
       `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`
     );
@@ -85,7 +90,8 @@ export default class AddIntegrationButton extends React.Component {
 
   render() {
     // eslint-disable-next-line no-unused-vars
-    const {provider, onAddIntegration, ...buttonProps} = this.props;
+    const {provider, onAddIntegration, reinstall, ...buttonProps} = this.props;
+    let buttonText = reinstall ? t('Reinstall') : t('Add') + ' ' + provider.metadata.noun;
 
     return (
       <Tooltip
@@ -99,7 +105,8 @@ export default class AddIntegrationButton extends React.Component {
             disabled={!provider.canAdd}
             onClick={() => this.handleAddIntegration(provider)}
           >
-            <span className="icon icon-add" /> {t('Add') + ' ' + provider.metadata.noun}
+            {!reinstall && <span className="icon icon-add" />}
+            {buttonText}
           </Button>
         </span>
       </Tooltip>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
index 8e5dc4353a..d7e62f352d 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
@@ -4,9 +4,11 @@ import React from 'react';
 
 import {PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
+import Alert from 'app/components/alert';
 import Button from 'app/components/buttons/button';
 import Confirm from 'app/components/confirm';
 import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
+import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
 
 const CONFIGURABLE_FEATURES = ['commits'];
 
@@ -17,6 +19,7 @@ export default class InstalledIntegration extends React.Component {
     integration: PropTypes.object.isRequired,
     onRemove: PropTypes.func.isRequired,
     onDisable: PropTypes.func.isRequired,
+    onReinstallIntegration: PropTypes.func,
   };
 
   /**
@@ -37,13 +40,29 @@ export default class InstalledIntegration extends React.Component {
     );
   }
 
+  reinstallIntegration = integration => {
+    const activeIntegration = Object.assign({}, this.props.integration, {
+      status: 'active',
+    });
+    this.props.onReinstallIntegration(activeIntegration);
+  };
+
   renderDisableIntegration(integration) {
-    const message = `You must uninstall this integration from
-      %s in order to delete this integration in Sentry.`;
+    const {body, actionText} = integration.provider.aspects.disable_dialog;
+    const message = (
+      <div>
+        <Alert type="error" icon="icon-circle-exclamation">
+          This integration cannot be removed on Sentry
+        </Alert>
+        {body}
+      </div>
+    );
+
     return (
       <Confirm
-        confirmText={t('Remove on GitHub')}
-        message={t(message, integration.provider.key)}
+        confirmText={actionText}
+        message={message}
+        priority="danger"
         onConfirm={() => this.props.onDisable(integration)}
       >
         <Button size="small" icon="icon-trash" />
@@ -51,14 +70,38 @@ export default class InstalledIntegration extends React.Component {
     );
   }
 
+  getRemovalBodyAndText(aspects) {
+    if (aspects && aspects.removal_dialog) {
+      return {
+        body: aspects.removal_dialog.body,
+        actionText: aspects.removal_dialog.actionText,
+      };
+    } else {
+      return {
+        body: t(
+          'Deleting this integration will remove any project associated data. This action cannot be undone. Are you sure you want to delete this integration?'
+        ),
+        actionText: t('Delete'),
+      };
+    }
+  }
+
   renderRemoveIntegration(integration) {
-    const message = `Removing this integration will disable the integration for
-      all projects and any repositories from this integration.  Are you sure
-      you want to remove this integration?`;
+    const {body, actionText} = this.getRemovalBodyAndText(integration.provider.aspects);
+
+    const message = (
+      <div>
+        <Alert type="error" icon="icon-circle-exclamation">
+          Deleting this integration has consequences!
+        </Alert>
+        {body}
+      </div>
+    );
     return (
       <Confirm
-        disabled={integration.status === 'disabled'}
-        message={t(message)}
+        message={message}
+        confirmText={actionText}
+        priority="danger"
         onConfirm={() => this.props.onRemove()}
       >
         <Button size="small" icon="icon-trash" />
@@ -68,23 +111,35 @@ export default class InstalledIntegration extends React.Component {
 
   render() {
     const {integration, provider, orgId} = this.props;
-    const style =
-      integration.status === 'disabled' ? {filter: 'grayscale(1)', opacity: '0.4'} : {};
+    const style = integration.status === 'disabled' ? {color: '#bebebe'} : {};
 
     return (
       <React.Fragment>
         <PanelItem p={0} py={2} key={integration.id} align="center">
-          <Box px={2} flex={1} style={style}>
-            <IntegrationItem integration={integration} />
+          <Box px={2} flex={1}>
+            <IntegrationItem integration={integration} style={style} />
           </Box>
-          {this.hasConfiguration() && (
+          {integration.status === 'active' &&
+            this.hasConfiguration() && (
+              <Box mr={1}>
+                <Button
+                  size="small"
+                  to={`/settings/${orgId}/integrations/${provider.key}/${integration.id}/`}
+                >
+                  {t('Configure')}
+                </Button>
+              </Box>
+            )}
+          {integration.status === 'disabled' && (
             <Box mr={1}>
-              <Button
+              <AddIntegrationButton
                 size="small"
-                to={`/settings/${orgId}/integrations/${provider.key}/${integration.id}/`}
-              >
-                {t('Configure')}
-              </Button>
+                priority="danger"
+                provider={provider}
+                integration={integration}
+                onAddIntegration={this.reinstallIntegration}
+                reinstall={true}
+              />
             </Box>
           )}
           <Box mr={1} pr={2}>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
index 51e22f356e..c8f289724b 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
@@ -2,6 +2,7 @@ import {Box, Flex} from 'grid-emotion';
 import React from 'react';
 import styled from 'react-emotion';
 import PropTypes from 'prop-types';
+import Tooltip from 'app/components/tooltip';
 
 import IntegrationIcon from 'app/views/organizationIntegrations/integrationIcon';
 
@@ -21,15 +22,26 @@ export default class IntegrationItem extends React.Component {
   };
 
   render() {
-    const {integration} = this.props;
+    const {integration, style} = this.props;
     return (
       <Flex>
         <Box>
           <IntegrationIcon integration={integration} />
         </Box>
         <Box pl={2}>
-          <IntegrationName>{integration.name}</IntegrationName>
-          <DomainName>{integration.domainName}</DomainName>
+          <IntegrationName style={style}>
+            {integration.name}
+            {integration.status === 'disabled' && (
+              <Tooltip
+                title={
+                  'This Integration has been disconnected from the external provider'
+                }
+              >
+                <small> — Disabled</small>
+              </Tooltip>
+            )}
+          </IntegrationName>
+          <DomainName style={style}>{integration.domainName}</DomainName>
         </Box>
       </Flex>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx
index 99cf9cca12..6f7b63e7bc 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx
@@ -81,8 +81,15 @@ export default class Integration extends AsyncView {
     this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);
   };
 
-  handleDisableIntegration = () => {
-    window.open('https://github.com/settings/installations', '_blank');
+  handleDisableIntegration = integration => {
+    let url;
+    if (integration.accountType === 'User') {
+      url = 'https://github.com/settings/installations';
+    } else {
+      let orgName = integration.domainName.split('/')[1];
+      url = `https://github.com/organizations/${orgName}/settings/installations`;
+    }
+    window.open(url, '_blank');
   };
 
   renderAlertLink(provider) {
@@ -136,7 +143,8 @@ export default class Integration extends AsyncView {
             integration={integration}
             onToggleEnabled={e => this.handleToggleProjectIntegration(integration, e)}
             onRemove={() => this.handleDeleteIntegration(integration)}
-            onDisable={() => this.handleDisableIntegration()}
+            onDisable={() => this.handleDisableIntegration(integration)}
+            onReinstallIntegration={this.mergeIntegration}
           />
         ))
       );
@@ -154,6 +162,7 @@ export default class Integration extends AsyncView {
                 size="xsmall"
                 provider={provider}
                 onAddIntegration={this.mergeIntegration}
+                reinstall={false}
               />
             </Box>
           </PanelHeader>
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
index 27a5a469cb..db932b2b71 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
@@ -60,6 +60,7 @@ exports[`Integration render() with one integration renders 1`] = `
                 },
               }
             }
+            reinstall={false}
             size="xsmall"
           />
         </Box>
@@ -91,6 +92,7 @@ exports[`Integration render() with one integration renders 1`] = `
           }
           key="1"
           onDisable={[Function]}
+          onReinstallIntegration={[Function]}
           onRemove={[Function]}
           onToggleEnabled={[Function]}
           orgId="org-slug"
diff --git a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
index 226ce2e3a6..2b27b8a1af 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
@@ -139,9 +139,12 @@ describe('Integration', function() {
           method: 'DELETE',
           statusCode: 200,
         });
-
         wrapper.find('PanelBody Button').simulate('click');
-        wrapper.find('PanelBody Modal Button[priority="primary"]').simulate('click');
+        wrapper
+          .find('PanelBody Modal Button')
+          // Delete button should be last
+          .last()
+          .simulate('click');
 
         expect(wrapper.find('PanelBody EmptyMessage').exists()).toBe(true);
       });
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 41e6fc8f1c..a80d6a1836 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -28,6 +28,7 @@ class GroupIntegrationDetailsTest(APITestCase):
             'name': integration.name,
             'icon': integration.metadata.get('icon'),
             'domainName': integration.metadata.get('domain_name'),
+            'accountType': integration.metadata.get('account_type'),
             'status': integration.get_status_display(),
             'provider': {
                 'key': provider.key,
@@ -35,6 +36,7 @@ class GroupIntegrationDetailsTest(APITestCase):
                 'canAdd': provider.can_add,
                 'canAddProject': provider.can_add_project,
                 'features': [f.value for f in provider.features],
+                'aspects': provider.metadata.aspects,
             },
             'linkIssueConfig': [{
                 'default': '',
@@ -65,6 +67,7 @@ class GroupIntegrationDetailsTest(APITestCase):
             'name': integration.name,
             'icon': integration.metadata.get('icon'),
             'domainName': integration.metadata.get('domain_name'),
+            'accountType': integration.metadata.get('account_type'),
             'status': integration.get_status_display(),
             'provider': {
                 'key': provider.key,
@@ -72,6 +75,7 @@ class GroupIntegrationDetailsTest(APITestCase):
                 'canAdd': provider.can_add,
                 'canAddProject': provider.can_add_project,
                 'features': [f.value for f in provider.features],
+                'aspects': provider.metadata.aspects,
             },
             'createIssueConfig': [
                 {
diff --git a/tests/sentry/api/endpoints/test_group_integrations.py b/tests/sentry/api/endpoints/test_group_integrations.py
index 32358df24c..94e7c7c96a 100644
--- a/tests/sentry/api/endpoints/test_group_integrations.py
+++ b/tests/sentry/api/endpoints/test_group_integrations.py
@@ -41,6 +41,7 @@ class GroupIntegrationsTest(APITestCase):
             'name': integration.name,
             'icon': integration.metadata.get('icon'),
             'domainName': integration.metadata.get('domain_name'),
+            'accountType': integration.metadata.get('account_type'),
             'status': integration.get_status_display(),
             'provider': {
                 'key': provider.key,
@@ -48,6 +49,7 @@ class GroupIntegrationsTest(APITestCase):
                 'canAdd': provider.can_add,
                 'canAddProject': provider.can_add_project,
                 'features': [f.value for f in provider.features],
+                'aspects': provider.metadata.aspects,
             },
             'externalIssues': [{
                 'description': 'this is an example description',
diff --git a/tests/sentry/integrations/github/test_integration.py b/tests/sentry/integrations/github/test_integration.py
index e96dd47801..dc30513e8c 100644
--- a/tests/sentry/integrations/github/test_integration.py
+++ b/tests/sentry/integrations/github/test_integration.py
@@ -5,6 +5,7 @@ import six
 from mock import patch
 from six.moves.urllib.parse import parse_qs, urlencode, urlparse
 
+from sentry.constants import ObjectStatus
 from sentry.integrations.github import GitHubIntegrationProvider
 from sentry.models import (
     Identity, IdentityProvider, IdentityStatus, Integration, OrganizationIntegration,
@@ -70,6 +71,7 @@ class GitHubIntegrationTest(IntegrationTestCase):
                     'login': 'Test Organization',
                     'avatar_url': 'http://example.com/avatar.png',
                     'html_url': 'https://github.com/Test-Organization',
+                    'type': 'Organization',
                 },
             }
         )
@@ -118,6 +120,7 @@ class GitHubIntegrationTest(IntegrationTestCase):
             'expires_at': None,
             'icon': 'http://example.com/avatar.png',
             'domain_name': 'github.com/Test-Organization',
+            'account_type': 'Organization',
         }
         oi = OrganizationIntegration.objects.get(
             integration=integration,
@@ -156,3 +159,105 @@ class GitHubIntegrationTest(IntegrationTestCase):
         resp = self.assert_setup_flow()
         assert '"success":false' in resp.content
         assert 'The provided Github account is linked to a different user' in resp.content
+
+    @responses.activate
+    @patch('sentry.integrations.github.integration.get_jwt', return_value='jwt_token_1')
+    def test_reinstall_flow(self, get_jwt, installation_id='install_id_2',
+                            app_id='app_1', user_id='user_id_1'):
+        self.assert_setup_flow()
+        responses.reset()
+
+        integration = Integration.objects.get(provider=self.provider.key)
+        integration.update(status=ObjectStatus.DISABLED)
+        assert integration.status == ObjectStatus.DISABLED
+        assert integration.external_id == 'install_id_1'
+
+        resp = self.client.get('{}?{}'.format(
+            self.init_path,
+            urlencode({'reinstall_id': integration.id})
+        ))
+
+        assert resp.status_code == 302
+        redirect = urlparse(resp['Location'])
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'github.com'
+        assert redirect.path == '/apps/sentry-test-app'
+
+        resp = self.client.get('{}?{}'.format(
+            self.setup_path,
+            urlencode({'installation_id': installation_id})
+        ))
+
+        assert resp.status_code == 302
+        redirect = urlparse(resp['Location'])
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'github.com'
+        assert redirect.path == '/login/oauth/authorize'
+
+        params = parse_qs(redirect.query)
+        assert params['state']
+        assert params['redirect_uri'] == ['http://testserver/extensions/github/setup/']
+        assert params['response_type'] == ['code']
+        assert params['client_id'] == ['github-client-id']
+        # once we've asserted on it, switch to a singular values to make life
+        # easier
+        authorize_params = {k: v[0] for k, v in six.iteritems(params)}
+
+        access_token = 'xxxxx-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx'
+
+        responses.add(
+            responses.POST, 'https://github.com/login/oauth/access_token',
+            json={'access_token': access_token}
+        )
+
+        responses.add(
+            responses.GET, 'https://api.github.com/user',
+            json={'id': user_id}
+        )
+
+        responses.add(
+            responses.GET,
+            u'https://api.github.com/app/installations/{}'.format(installation_id),
+            json={
+                'id': installation_id,
+                'app_id': app_id,
+                'account': {
+                    'login': 'Test Organization',
+                    'avatar_url': 'http://example.com/avatar.png',
+                    'html_url': 'https://github.com/Test-Organization',
+                    'type': 'Organization',
+                },
+            }
+        )
+
+        responses.add(
+            responses.GET, u'https://api.github.com/user/installations',
+            json={
+                'installations': [{'id': installation_id}],
+            }
+        )
+
+        resp = self.client.get('{}?{}'.format(
+            self.setup_path,
+            urlencode({
+                'code': 'oauth-code',
+                'state': authorize_params['state'],
+            })
+        ))
+
+        mock_access_token_request = responses.calls[0].request
+        req_params = parse_qs(mock_access_token_request.body)
+        assert req_params['grant_type'] == ['authorization_code']
+        assert req_params['code'] == ['oauth-code']
+        assert req_params['redirect_uri'] == ['http://testserver/extensions/github/setup/']
+        assert req_params['client_id'] == ['github-client-id']
+        assert req_params['client_secret'] == ['github-client-secret']
+
+        assert resp.status_code == 200
+
+        auth_header = responses.calls[2].request.headers['Authorization']
+        assert auth_header == 'Bearer jwt_token_1'
+
+        integration = Integration.objects.get(provider=self.provider.key)
+        assert integration.status == ObjectStatus.VISIBLE
+        assert integration.external_id == 'install_id_2'
