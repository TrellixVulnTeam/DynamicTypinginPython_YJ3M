commit 413d110b17dbd27ae223454b665f30070778a071
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 12 11:28:27 2016 -0700

    Add test proving manager cannot modify auth settings (#4100)
    
    * Add test proving manager cannot modify auth settings

diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 0cb7bc2503..b77455f2c3 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -320,13 +320,7 @@ class PermissionTestCase(TestCase):
         assert resp.status_code >= 300
 
     def assert_member_can_access(self, path):
-        user = self.create_user(is_superuser=False)
-        self.create_member(
-            user=user, organization=self.organization,
-            role='member', teams=[self.team],
-        )
-
-        self.assert_can_access(user, path)
+        return self.assert_role_can_access(path, 'member')
 
     def assert_teamless_member_can_access(self, path):
         user = self.create_user(is_superuser=False)
@@ -338,22 +332,10 @@ class PermissionTestCase(TestCase):
         self.assert_can_access(user, path)
 
     def assert_member_cannot_access(self, path):
-        user = self.create_user(is_superuser=False)
-        self.create_member(
-            user=user, organization=self.organization,
-            role='member', teams=[self.team],
-        )
-
-        self.assert_cannot_access(user, path)
+        return self.assert_role_cannot_access(path, 'member')
 
     def assert_manager_cannot_access(self, path):
-        user = self.create_user(is_superuser=False)
-        self.create_member(
-            user=user, organization=self.organization,
-            role='manager', teams=[self.team],
-        )
-
-        self.assert_cannot_access(user, path)
+        return self.assert_role_cannot_access(path, 'manager')
 
     def assert_teamless_member_cannot_access(self, path):
         user = self.create_user(is_superuser=False)
@@ -365,13 +347,7 @@ class PermissionTestCase(TestCase):
         self.assert_cannot_access(user, path)
 
     def assert_team_admin_can_access(self, path):
-        user = self.create_user(is_superuser=False)
-        self.create_member(
-            user=user, organization=self.organization,
-            teams=[self.team], role='admin',
-        )
-
-        self.assert_can_access(user, path)
+        return self.assert_role_can_access(path, 'owner')
 
     def assert_teamless_admin_can_access(self, path):
         user = self.create_user(is_superuser=False)
@@ -383,13 +359,7 @@ class PermissionTestCase(TestCase):
         self.assert_can_access(user, path)
 
     def assert_team_admin_cannot_access(self, path):
-        user = self.create_user(is_superuser=False)
-        self.create_member(
-            user=user, organization=self.organization,
-            teams=[self.team], role='admin',
-        )
-
-        self.assert_cannot_access(user, path)
+        return self.assert_role_cannot_access(path, 'admin')
 
     def assert_teamless_admin_cannot_access(self, path):
         user = self.create_user(is_superuser=False)
@@ -401,36 +371,36 @@ class PermissionTestCase(TestCase):
         self.assert_cannot_access(user, path)
 
     def assert_team_owner_can_access(self, path):
-        user = self.create_user(is_superuser=False)
-        self.create_member(
-            user=user, organization=self.organization,
-            teams=[self.team], role='owner',
-        )
-
-        self.assert_can_access(user, path)
+        return self.assert_role_can_access(path, 'owner')
 
     def assert_owner_can_access(self, path):
+        return self.assert_role_can_access(path, 'owner')
+
+    def assert_owner_cannot_access(self, path):
+        return self.assert_role_cannot_access(path, 'owner')
+
+    def assert_non_member_cannot_access(self, path):
+        user = self.create_user(is_superuser=False)
+        self.assert_cannot_access(user, path)
+
+    def assert_role_can_access(self, path, role):
         user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            role='owner', teams=[self.team],
+            role=role, teams=[self.team],
         )
 
         self.assert_can_access(user, path)
 
-    def assert_owner_cannot_access(self, path):
+    def assert_role_cannot_access(self, path, role):
         user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            role='owner', teams=[self.team],
+            role=role, teams=[self.team],
         )
 
         self.assert_cannot_access(user, path)
 
-    def assert_non_member_cannot_access(self, path):
-        user = self.create_user(is_superuser=False)
-        self.assert_cannot_access(user, path)
-
 
 class PluginTestCase(TestCase):
     plugin = None
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index 713b516dc1..48043ae486 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -19,6 +19,10 @@ class OrganizationAuthSettingsPermissionTest(PermissionTestCase):
         with self.feature('organizations:sso'):
             self.assert_team_admin_cannot_access(self.path)
 
+    def test_manager_cannot_load(self):
+        with self.feature('organizations:sso'):
+            self.assert_role_cannot_access(self.path, 'manager')
+
     def test_owner_can_load(self):
         with self.feature('organizations:sso'):
             self.assert_owner_can_access(self.path)
