commit 66825df7d8811a9280b1ae25ea4bf59cc863c01f
Author: Jan Michael Auer <account@jauer.org>
Date:   Fri Nov 23 11:31:10 2018 +0100

    ref(apple_crash): Handle null values gracefully in apple crash reports (#10731)

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 13209ec196..7390afc984 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -14,6 +14,7 @@ from sentry.api.bases.group import GroupPermission
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import Event
 from sentry.lang.native.applecrashreport import AppleCrashReport
+from sentry.utils.safe import get_path
 
 
 class EventAppleCrashReportEndpoint(Endpoint):
@@ -45,22 +46,15 @@ class EventAppleCrashReportEndpoint(Endpoint):
                 }, status=403
             )
 
-        threads = (event.data.get('threads') or {}).get('values')
-        exceptions = (event.data.get(
-            'exception') or {}).get('values')
-
         symbolicated = (request.GET.get('minified') not in ('1', 'true'))
-        debug_images = None
-        if (event.data.get('debug_meta') and event.data.get('debug_meta').get('images')):
-            debug_images = event.data.get('debug_meta').get('images')
 
         apple_crash_report_string = six.text_type(
             AppleCrashReport(
-                threads=threads,
+                threads=get_path(event.data, 'threads', 'values', filter=True),
                 context=event.data.get('contexts'),
-                debug_images=debug_images,
+                debug_images=get_path(event.data, 'debug_meta', 'images', filter=True),
+                exceptions=get_path(event.data, 'exception', 'values', filter=True),
                 symbolicated=symbolicated,
-                exceptions=exceptions
             )
         )
 
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index d393d3c71a..69d05025b6 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -2,10 +2,11 @@ from __future__ import absolute_import
 
 import posixpath
 
+from sentry.constants import NATIVE_UNKNOWN_STRING
 from sentry.interfaces.exception import upgrade_legacy_mechanism
 from sentry.lang.native.utils import image_name
 from sentry.utils.compat import implements_to_string
-from sentry.constants import NATIVE_UNKNOWN_STRING
+from sentry.utils.safe import get_path
 
 from symbolic import parse_addr
 
@@ -33,43 +34,46 @@ class AppleCrashReport(object):
 
     def _get_meta_header(self):
         return 'OS Version: %s %s (%s)\nReport Version: %s' % (
-            self.context.get('os').get(
-                'name'), self.context.get('os').get('version'),
-            self.context.get('os').get('build'), REPORT_VERSION
+            get_path(self.context, 'os', 'name'),
+            get_path(self.context, 'os', 'version'),
+            get_path(self.context, 'os', 'build'),
+            REPORT_VERSION,
         )
 
     def _get_exception_info(self):
         rv = []
-        if self.exceptions and self.exceptions[0]:
-            # We only have one exception at a time
-            exception = self.exceptions[0] or {}
-            mechanism = upgrade_legacy_mechanism(exception.get('mechanism')) or {}
-            mechanism_meta = mechanism.get('meta', {})
-
-            signal = mechanism_meta.get('signal', {}).get('name')
-            name = mechanism_meta.get('mach_exception', {}).get('name')
-
-            if name or signal:
-                rv.append(
-                    'Exception Type: %s%s' %
-                    (name or 'Unknown', signal and (' (%s)' % signal) or '', )
-                )
 
-            exc_name = (mechanism_meta.get('signal', {})).get('code_name')
-            exc_addr = mechanism.get('data', {}).get('relevant_address')
-            if exc_name:
-                rv.append(
-                    'Exception Codes: %s%s' %
-                    (exc_name, exc_addr is not None and (
-                        ' at %s' % exc_addr) or '', )
-                )
+        # We only have one exception at a time
+        exception = get_path(self.exceptions, 0)
+        if not exception:
+            return ''
+
+        mechanism = upgrade_legacy_mechanism(exception.get('mechanism')) or {}
+        mechanism_meta = get_path(mechanism, 'meta', default={})
 
-            if exception.get('thread_id') is not None:
-                rv.append('Crashed Thread: %s' % exception['thread_id'])
+        signal = get_path(mechanism_meta, 'signal', 'name')
+        name = get_path(mechanism_meta, 'mach_exception', 'name')
 
-            if exception.get('value'):
-                rv.append('\nApplication Specific Information:\n%s' %
-                          exception['value'])
+        if name or signal:
+            rv.append(
+                'Exception Type: %s%s' %
+                (name or 'Unknown', signal and (' (%s)' % signal) or '', )
+            )
+
+        exc_name = get_path(mechanism_meta, 'signal', 'code_name')
+        exc_addr = get_path(mechanism, 'data', 'relevant_address')
+        if exc_name:
+            rv.append(
+                'Exception Codes: %s%s' %
+                (exc_name, exc_addr is not None and (
+                    ' at %s' % exc_addr) or '', )
+            )
+
+        if exception.get('thread_id') is not None:
+            rv.append('Crashed Thread: %s' % exception['thread_id'])
+
+        if exception.get('value'):
+            rv.append('\nApplication Specific Information:\n%s' % exception['value'])
 
         return '\n'.join(rv)
 
@@ -85,11 +89,12 @@ class AppleCrashReport(object):
 
     def get_thread_apple_string(self, thread_info):
         rv = []
-        stacktrace = thread_info.get('stacktrace')
+        stacktrace = get_path(thread_info, 'stacktrace')
         if stacktrace is None:
             return None
+
         if stacktrace:
-            frames = stacktrace.get('frames')
+            frames = get_path(stacktrace, 'frames', filter=True)
             if frames:
                 for i, frame in enumerate(reversed(frames)):
                     frame_string = self._convert_frame_to_apple_string(
@@ -104,10 +109,9 @@ class AppleCrashReport(object):
         if len(rv) == 0:
             return None  # No frames in thread, so we remove thread
 
-        is_exception = thread_info.get('mechanism', False)
-        thread_id = thread_info.get('id', False) or thread_info.get(
-            'thread_id', False) or '0'
-        thread_name = thread_info.get('name', False)
+        is_exception = bool(thread_info.get('mechanism'))
+        thread_id = thread_info.get('id') or thread_info.get('thread_id') or '0'
+        thread_name = thread_info.get('name')
         thread_name_string = ' name: %s' % (thread_name) if thread_name else ''
         thread_crashed = thread_info.get('crashed') or is_exception
         thread_crashed_thread = ' Crashed:' if thread_crashed else ''
