commit aa2d4d20edd45e392707485628b92ecd9dc31817
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 12 10:34:17 2016 -0700

    [vcs] add commit-based release emails (#4332)
    
    - add commit log
    - limit subscribers to authors (whom are project members)
    - only create activity (and send) upon dateReleased being filled

diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index da857bbbed..5e6dc15fda 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -13,11 +13,12 @@ from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.paginator import DateTimePaginator, OffsetPaginator
 from sentry.api.serializers import serialize
+from sentry.db.models.query import in_iexact
 from sentry.models import (
     AuditLogEntryEvent, Organization, OrganizationMember,
     OrganizationMemberTeam, OrganizationStatus, ProjectPlatform
 )
-from sentry.search.utils import tokenize_query, in_iexact
+from sentry.search.utils import tokenize_query
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
diff --git a/src/sentry/api/endpoints/project_index.py b/src/sentry/api/endpoints/project_index.py
index 6042c58587..729891d25a 100644
--- a/src/sentry/api/endpoints/project_index.py
+++ b/src/sentry/api/endpoints/project_index.py
@@ -8,10 +8,11 @@ from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.project import ProjectPermission
 from sentry.api.paginator import DateTimePaginator
 from sentry.api.serializers import serialize, ProjectWithOrganizationSerializer
+from sentry.db.models.query import in_iexact
 from sentry.models import (
     Project, ProjectPlatform, ProjectStatus
 )
-from sentry.search.utils import tokenize_query, in_iexact
+from sentry.search.utils import tokenize_query
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 713fa717f7..75e03ce13f 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -154,6 +154,9 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
                     project=project,
                     version=result['version'],
                 ), False
+                was_released = bool(release.date_released)
+            else:
+                was_released = False
 
             commit_list = result.get('commits')
             if commit_list:
@@ -161,6 +164,16 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
                 # TODO(dcramer): handle errors with release payloads
                 hook.set_commits(release.version, commit_list)
 
+            if (not was_released and release.date_released):
+                activity = Activity.objects.create(
+                    type=Activity.RELEASE,
+                    project=project,
+                    ident=result['version'],
+                    data={'version': result['version']},
+                    datetime=release.date_released,
+                )
+                activity.send_notification()
+
             if not created:
                 # This is the closest status code that makes sense, and we want
                 # a unique 2xx response code so people can understand when
@@ -168,13 +181,7 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
                 #   208 Already Reported (WebDAV; RFC 5842)
                 status = 208
             else:
-                Activity.objects.create(
-                    type=Activity.RELEASE,
-                    project=project,
-                    ident=result['version'],
-                    data={'version': result['version']},
-                    datetime=release.date_released or release.date_added,
-                )
                 status = 201
+
             return Response(serialize(release, request.user), status=status)
         return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/release_details.py b/src/sentry/api/endpoints/release_details.py
index 1633f2ef27..b4ab2df1bf 100644
--- a/src/sentry/api/endpoints/release_details.py
+++ b/src/sentry/api/endpoints/release_details.py
@@ -8,7 +8,7 @@ from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import CommitSerializer, ListField
-from sentry.models import Group, Release, ReleaseFile
+from sentry.models import Activity, Group, Release, ReleaseFile
 from sentry.plugins.interfaces.releasehook import ReleaseHook
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -117,7 +117,6 @@ class ReleaseDetailsEndpoint(ProjectEndpoint):
                                       the current time is assumed.
         :auth: required
         """
-        # TODO(dcramer): handle Activity creation
         try:
             release = Release.objects.get(
                 project=project,
@@ -133,6 +132,8 @@ class ReleaseDetailsEndpoint(ProjectEndpoint):
 
         result = serializer.object
 
+        was_released = bool(release.date_released)
+
         kwargs = {}
         if result.get('dateStarted'):
             kwargs['date_started'] = result['dateStarted']
@@ -152,6 +153,16 @@ class ReleaseDetailsEndpoint(ProjectEndpoint):
             # TODO(dcramer): handle errors with release payloads
             hook.set_commits(release.version, commit_list)
 
+        if (not was_released and release.date_released):
+            activity = Activity.objects.create(
+                type=Activity.RELEASE,
+                project=project,
+                ident=result['version'],
+                data={'version': result['version']},
+                datetime=release.date_released,
+            )
+            activity.send_notification()
+
         return Response(serialize(release, request.user))
 
     # @attach_scenarios([delete_release_scenario])
diff --git a/src/sentry/api/endpoints/user_index.py b/src/sentry/api/endpoints/user_index.py
index 3eb5d04c62..e3def72fdb 100644
--- a/src/sentry/api/endpoints/user_index.py
+++ b/src/sentry/api/endpoints/user_index.py
@@ -3,24 +3,16 @@ from __future__ import absolute_import
 import six
 
 from django.db.models import Q
-from six.moves import reduce
 
 from sentry.api.base import Endpoint
 from sentry.api.paginator import DateTimePaginator
 from sentry.api.permissions import SuperuserPermission
 from sentry.api.serializers import serialize
+from sentry.db.models.query import in_iexact
 from sentry.models import User
 from sentry.search.utils import tokenize_query
 
 
-def in_iexact(column, values):
-    from operator import or_
-
-    query = '{}__iexact'.format(column)
-
-    return reduce(or_, [Q(**{query: v}) for v in values])
-
-
 class UserIndexEndpoint(Endpoint):
     permission_classes = (SuperuserPermission,)
 
diff --git a/src/sentry/db/models/query.py b/src/sentry/db/models/query.py
index 6c73e82b53..340c2732cb 100644
--- a/src/sentry/db/models/query.py
+++ b/src/sentry/db/models/query.py
@@ -12,9 +12,10 @@ import itertools
 import six
 
 from django.db import IntegrityError, router, transaction
-from django.db.models import Model
+from django.db.models import Model, Q
 from django.db.models.expressions import ExpressionNode
 from django.db.models.signals import post_save
+from six.moves import reduce
 
 from .utils import resolve_expression_node
 
@@ -95,3 +96,11 @@ def create_or_update(model, using=None, **kwargs):
         affected = objects.filter(**kwargs).update(**values)
 
     return affected, False
+
+
+def in_iexact(column, values):
+    from operator import or_
+
+    query = '{}__iexact'.format(column)
+
+    return reduce(or_, [Q(**{query: v}) for v in values])
diff --git a/src/sentry/models/commit.py b/src/sentry/models/commit.py
index 57d0f65802..697e9bace5 100644
--- a/src/sentry/models/commit.py
+++ b/src/sentry/models/commit.py
@@ -6,6 +6,7 @@ from django.utils import timezone
 from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 )
+from sentry.utils.cache import memoize
 
 
 class Commit(Model):
@@ -31,3 +32,15 @@ class Commit(Model):
         )
 
     __repr__ = sane_repr('organization_id', 'repository_id', 'key')
+
+    @memoize
+    def title(self):
+        if not self.message:
+            return ''
+        return self.message.splitlines()[0]
+
+    @memoize
+    def short_id(self):
+        if len(self.key) == 40:
+            return self.key[:12]
+        return self.key
diff --git a/src/sentry/plugins/sentry_mail/activity/release.py b/src/sentry/plugins/sentry_mail/activity/release.py
new file mode 100644
index 0000000000..6be666d836
--- /dev/null
+++ b/src/sentry/plugins/sentry_mail/activity/release.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+
+from sentry.db.models.query import in_iexact
+from sentry.models import Release, ReleaseCommit, User
+
+from .base import ActivityEmail
+
+
+class ReleaseActivityEmail(ActivityEmail):
+    def __init__(self, activity):
+        super(ReleaseActivityEmail, self).__init__(activity)
+        try:
+            self.release = Release.objects.get(
+                project=self.project,
+                version=activity.data['version'],
+            )
+        except Release.DoesNotExist:
+            self.release = None
+            self.commit_list = []
+        else:
+            self.commit_list = [
+                rc.commit
+                for rc in ReleaseCommit.objects.filter(
+                    release=self.release,
+                ).select_related('commit', 'commit__author')
+            ]
+
+    def should_email(self):
+        return bool(self.release)
+
+    def get_participants(self):
+        project = self.project
+
+        email_list = set([
+            c.author.email for c in self.commit_list
+            if c.author
+        ])
+
+        if not email_list:
+            return set()
+
+        # identify members which have been seen in the commit log and have
+        # verified the matching email address
+        return set(User.objects.filter(
+            in_iexact('emails__email', email_list),
+            emails__is_verified=True,
+            sentry_orgmember_set__teams=project.team,
+            is_active=True,
+        ).distinct())
+
+    def get_context(self):
+        return {
+            'commit_list': self.commit_list,
+        }
+
+    def get_subject(self):
+        return u'Released {}'.format(self.release.short_version)
+
+    def get_template(self):
+        return 'sentry/emails/activity/release.txt'
+
+    def get_html_template(self):
+        return 'sentry/emails/activity/release.html'
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index ff388c1a9c..f40755d59e 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -4,9 +4,7 @@ import six
 
 from collections import defaultdict
 from datetime import datetime, timedelta
-from django.db.models import Q
 from django.utils import timezone
-from six.moves import reduce
 
 from sentry.constants import STATUS_CHOICES
 from sentry.models import EventUser, Release, User
@@ -282,11 +280,3 @@ def parse_query(project, query, user):
     results['query'] = ' '.join(results['query'])
 
     return results
-
-
-def in_iexact(column, values):
-    from operator import or_
-
-    query = '{}__iexact'.format(column)
-
-    return reduce(or_, [Q(**{query: v}) for v in values])
diff --git a/src/sentry/templates/sentry/debug/mail/preview.html b/src/sentry/templates/sentry/debug/mail/preview.html
index 9e307c1f67..99ba0525bc 100644
--- a/src/sentry/templates/sentry/debug/mail/preview.html
+++ b/src/sentry/templates/sentry/debug/mail/preview.html
@@ -8,6 +8,7 @@
         <option value="mail/assigned/">Assigned</option>
         <option value="mail/assigned/self/">Assigned (Self)</option>
         <option value="mail/note/">Note</option>
+        <option value="mail/release/">Release</option>
         <option value="mail/regression/">Regression</option>
         <option value="mail/regression/release/">Regression (w/ Release)</option>
         <option value="mail/resolved/">Resolved</option>
diff --git a/src/sentry/templates/sentry/emails/activity/release.html b/src/sentry/templates/sentry/emails/activity/release.html
index 75c741c4bd..d91735fbd9 100644
--- a/src/sentry/templates/sentry/emails/activity/release.html
+++ b/src/sentry/templates/sentry/emails/activity/release.html
@@ -12,4 +12,19 @@
         Version {{ release.short_version }}
     </h2>
     <p><a href="{{ release_link }}" class="highlight">{{ release.short_version }}</a> was released for <a href="{{ project_link }}">{{ project.name }}</a> on {{ release.date_added }}</p>
+    <h3>Commits</h3>
+    {% if commit_list %}
+        <ul style="padding-left: 20px;">
+            {% for commit in commit_list %}
+                <li style="padding: 5px 0;">
+                    {% if commit.message %}
+                        <strong>{{ commit.title }}</strong> &mdash; {% if commit.author %}{{ commit.author.name }}{% endif %}<br />
+                    {% endif %}
+                    <small>{{ commit.short_id }}</small>
+                </li>
+            {% endfor %}
+        </ul>
+    {% else %}
+        <p>It looks like there's no commit data wired up yet :(</p>
+    {% endif %}
 {% endblock %}
diff --git a/src/sentry/templates/sentry/emails/activity/release.txt b/src/sentry/templates/sentry/emails/activity/release.txt
index e69de29bb2..c988dffac2 100644
--- a/src/sentry/templates/sentry/emails/activity/release.txt
+++ b/src/sentry/templates/sentry/emails/activity/release.txt
@@ -0,0 +1,3 @@
+{{ release.short_version }} was released for {{ project.name }} on {{ release.date_added }}.
+
+{{ release_link }}
diff --git a/src/sentry/web/frontend/debug/debug_new_release_email.py b/src/sentry/web/frontend/debug/debug_new_release_email.py
index bedc4c945d..187ff52286 100644
--- a/src/sentry/web/frontend/debug/debug_new_release_email.py
+++ b/src/sentry/web/frontend/debug/debug_new_release_email.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import
 
 from django.views.generic import View
-from hashlib import sha1
-from uuid import uuid4
 
-from sentry.models import Organization, Team, Project, Release
+from sentry.models import (
+    Commit, CommitAuthor, Organization, Team, Project, Release
+)
 from sentry.utils.http import absolute_uri
 
 from .mail import MailPreview
@@ -32,7 +32,7 @@ class DebugNewReleaseEmailView(View):
         )
         release = Release(
             project=project,
-            version=sha1(uuid4().bytes).hexdigest(),
+            version='6c998f755f304593a4713abd123eaf8833a2de5e',
         )
 
         release_link = absolute_uri('/{}/{}/releases/{}/'.format(
@@ -46,6 +46,18 @@ class DebugNewReleaseEmailView(View):
             project.slug,
         ))
 
+        commit_list = [
+            Commit(key='48b86fcd677da3dba5679d7a738240ce6fb74b20'),
+            Commit(
+                key='a53a2756bb8d111b43196210b34df90b87ed336b',
+                message='Update README.rst',
+                author=CommitAuthor(
+                    name='David Cramer',
+                    email='david@sentry.io',
+                )
+            ),
+        ]
+
         return MailPreview(
             html_template='sentry/emails/activity/release.html',
             text_template='sentry/emails/activity/release.txt',
@@ -54,5 +66,6 @@ class DebugNewReleaseEmailView(View):
                 'project': project,
                 'release_link': release_link,
                 'project_link': project_link,
+                'commit_list': commit_list,
             },
         ).render(request)
diff --git a/tests/acceptance/test_emails.py b/tests/acceptance/test_emails.py
index 743a7572fd..7aa5cde0c8 100644
--- a/tests/acceptance/test_emails.py
+++ b/tests/acceptance/test_emails.py
@@ -70,6 +70,16 @@ class EmailTestCase(AcceptanceTestCase):
         self.browser.wait_until('#preview')
         self.browser.snapshot('regression_with_version email txt')
 
+    def test_release_html(self):
+        self.browser.get(self.build_url('/debug/mail/new-release/'))
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('release email html')
+
+    def test_release_txt(self):
+        self.browser.get(self.build_url('/debug/mail/new-release/', 'txt'))
+        self.browser.wait_until('#preview')
+        self.browser.snapshot('release email txt')
+
     def test_resolved_html(self):
         self.browser.get(self.build_url('/debug/mail/resolved/'))
         self.browser.wait_until('#preview')
diff --git a/tests/sentry/plugins/mail/activity/__init__.py b/tests/sentry/plugins/mail/activity/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/plugins/mail/activity/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/plugins/mail/activity/test_release.py b/tests/sentry/plugins/mail/activity/test_release.py
new file mode 100644
index 0000000000..39ccf80200
--- /dev/null
+++ b/tests/sentry/plugins/mail/activity/test_release.py
@@ -0,0 +1,115 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from django.core import mail
+from django.utils import timezone
+from sentry.models import (
+    Activity, Commit, CommitAuthor, Release, ReleaseCommit, Repository,
+    UserEmail
+)
+from sentry.plugins.sentry_mail.activity.release import ReleaseActivityEmail
+from sentry.testutils import TestCase
+
+
+class ReleaseTestCase(TestCase):
+    def setUp(self):
+        super(ReleaseTestCase, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        assert UserEmail.objects.filter(
+            user=self.user,
+            email=self.user.email,
+        ).update(
+            is_verified=True,
+        )
+        self.user2 = self.create_user('bar@example.com')
+        assert UserEmail.objects.filter(
+            user=self.user2,
+            email=self.user2.email,
+        ).update(
+            is_verified=True,
+        )
+        self.org = self.create_organization(owner=None)
+        self.team = self.create_team(organization=self.org)
+        self.create_member(user=self.user, organization=self.org, teams=[self.team])
+        self.create_member(user=self.user2, organization=self.org)
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+        )
+        self.release = Release.objects.create(
+            version='a' * 40,
+            project_id=self.project.id,
+            date_released=timezone.now(),
+        )
+        repository = Repository.objects.create(
+            organization_id=self.org.id,
+            name=self.project.name,
+        )
+        self.commit = Commit.objects.create(
+            key='a' * 40,
+            repository_id=repository.id,
+            organization_id=self.org.id,
+            author=CommitAuthor.objects.create(
+                organization_id=self.org.id,
+                name=self.user.name,
+                email=self.user.email,
+            ),
+        )
+        self.commit2 = Commit.objects.create(
+            key='b' * 40,
+            repository_id=repository.id,
+            organization_id=self.org.id,
+            author=CommitAuthor.objects.create(
+                organization_id=self.org.id,
+                name=self.user2.name,
+                email=self.user2.email,
+            )
+        )
+        ReleaseCommit.objects.create(
+            project_id=self.project.id,
+            release=self.release,
+            commit=self.commit,
+            order=0,
+        )
+        ReleaseCommit.objects.create(
+            project_id=self.project.id,
+            release=self.release,
+            commit=self.commit2,
+            order=1,
+        )
+
+    def test_simple(self):
+        email = ReleaseActivityEmail(
+            Activity(
+                project=self.project,
+                user=self.user,
+                type=Activity.RELEASE,
+                data={'version': self.release.version},
+            )
+        )
+
+        assert email.get_participants() == set([self.user])
+
+        context = email.get_context()
+        assert context['commit_list'] == [self.commit, self.commit2]
+
+        with self.tasks():
+            email.send()
+
+        assert len(mail.outbox) == 1
+        msg = mail.outbox[-1]
+        assert msg.to == [self.user.email]
+
+    def test_doesnt_generate_on_no_release(self):
+        email = ReleaseActivityEmail(
+            Activity(
+                project=self.project,
+                user=self.user,
+                type=Activity.RELEASE,
+                data={'version': 'a'},
+            )
+        )
+
+        assert email.release is None
+        assert not email.should_email()
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index ad92b32770..5a3fe3512c 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -21,7 +21,7 @@ from sentry.models import (
 from sentry.plugins import Notification
 from sentry.plugins.sentry_mail.activity.base import ActivityEmail
 from sentry.plugins.sentry_mail.models import MailPlugin
-from sentry.testutils import TestCase, TransactionTestCase
+from sentry.testutils import TestCase
 from sentry.utils.email import MessageBuilder
 
 
@@ -347,7 +347,7 @@ class MailPluginTest(TestCase):
         assert msg.to == [self.user.email]
 
 
-class ActivityEmailTestCase(TransactionTestCase):
+class ActivityEmailTestCase(TestCase):
     def get_fixture_data(self, users):
         organization = self.create_organization(owner=self.create_user())
         team = self.create_team(organization=organization)
