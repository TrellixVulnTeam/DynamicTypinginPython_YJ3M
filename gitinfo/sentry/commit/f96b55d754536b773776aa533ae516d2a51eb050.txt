commit f96b55d754536b773776aa533ae516d2a51eb050
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 14 16:26:15 2011 -0700

    Update authentication docs to take secret/public keys

diff --git a/docs/technical/index.rst b/docs/technical/index.rst
index 717bb008a4..057bcc63f3 100644
--- a/docs/technical/index.rst
+++ b/docs/technical/index.rst
@@ -105,9 +105,10 @@ with the following structure::
 
 You must also send along the following authentication headers::
 
-    Authorization: Sentry sentry_signature=<hmac signature>,
-    sentry_timestamp=<signature timestamp>,
-    sentry_version=<client version, arbitrary>
+    X-Sentry-Auth: Sentry sentry_signature=<hmac signature>,
+    sentry_timestamp=<signature timestamp>[,
+    sentry_key=<public api key>,[
+    sentry_version=<client version, arbitrary>]]
 
 The header is composed of a SHA1-signed HMAC, the timestamp from when the message
 was generated, and an arbitrary client version string. The client version should
@@ -117,9 +118,14 @@ To generate the HMAC signature, take the following example (in Python)::
 
     hmac.new(SENTRY_KEY, '%s %s' % (timestamp, message), hashlib.sha1).hexdigest()
 
+If you are using project auth, you should sign with your project-specific ``secret_key``
+instead of the global superuser key. If you are signing with your secret key, you will
+also need to ensure you're provided your ``public_key`` as ``sentry_key`` in the
+auth header.
+
 The variables which are required within the signing of the message consist of the following:
 
-- The ``SENTRY_KEY`` is a the shared secret key between client and server.
+- ``key`` is either the ``public_key`` or the shared global key between client and server.
 - ``timestamp`` is the timestamp of which this message was generated
 - ``message`` is the encoded :ref:`POST Body`
 
diff --git a/sentry/web/api.py b/sentry/web/api.py
index dfcb26a4cd..7e69ab2992 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -31,7 +31,7 @@ logger = logging.getLogger(__name__)
 @require_http_methods(['POST'])
 def store(request):
     if request.META.get('HTTP_X_SENTRY_AUTH', '').startswith('Sentry'):
-        # Auth version 2.0
+        # Auth version 3.0 (same as 2.0, diff header)
         auth_vars = parse_auth_header(request.META['HTTP_X_SENTRY_AUTH'])
     elif request.META.get('HTTP_AUTHORIZATION', '').startswith('Sentry'):
         # Auth version 2.0
