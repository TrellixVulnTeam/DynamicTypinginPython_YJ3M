commit 9bb18db574459ec6e5b9569d09f0c4ccebd9bbc7
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 23 11:34:16 2012 -0800

    Added project options to MailProcessor

diff --git a/sentry/plugins/sentry_mail/__init__.py b/sentry/plugins/sentry_mail/__init__.py
index f0dfb58c14..314bd05531 100644
--- a/sentry/plugins/sentry_mail/__init__.py
+++ b/sentry/plugins/sentry_mail/__init__.py
@@ -8,6 +8,7 @@ sentry.plugins.sentry_mail
 from django.core.mail import send_mail
 from django.template.loader import render_to_string
 from sentry.conf import settings
+from sentry.models import ProjectOption
 from sentry.plugins import Plugin
 
 NOTSET = object()
@@ -37,6 +38,11 @@ class MailProcessor(Plugin):
     def mail_admins(self, group, event, fail_silently=True):
         interfaces = event.interfaces
 
+        project = group.project
+
+        send_to = ProjectOption.objects.get_value(project, 'mail:send_to', self.send_to)
+        subject_prefix = ProjectOption.objects.get_value(project, 'mail:subject_prefix', self.subject_prefix)
+
         if 'sentry.interfaces.Exception' in interfaces:
             traceback = interfaces['sentry.interfaces.Exception'].to_string(event)
         else:
@@ -46,9 +52,9 @@ class MailProcessor(Plugin):
 
         if http:
             ip_repr = (http.env.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL')
-            subject = '%sError (%s IP): %s' % (self.subject_prefix, ip_repr, http.url)
+            subject = '%sError (%s IP): %s' % (subject_prefix, ip_repr, http.url)
         else:
-            subject = '%sError: %s' % (self.subject_prefix, event.message)
+            subject = '%sError: %s' % (subject_prefix, event.message)
 
         if event.site:
             subject = '[%s] %s' % (event.site, subject)
@@ -63,17 +69,22 @@ class MailProcessor(Plugin):
         })
 
         send_mail(subject, body,
-                  settings.SERVER_EMAIL, self.send_to,
+                  settings.SERVER_EMAIL, send_to,
                   fail_silently=fail_silently)
 
     def should_mail(self, group, event):
-        if not self.send_to:
+        project = group.project
+        send_to = ProjectOption.objects.get_value(project, 'mail:send_to', self.send_to)
+        if not send_to:
             return False
-        if int(group.level) < self.min_level:
+        min_level = ProjectOption.objects.get_value(project, 'mail:min_level', self.min_level)
+        if min_level is not None and int(group.level) < min_level:
             return False
-        if self.include_loggers is not None and group.logger not in self.include_loggers:
+        include_loggers = ProjectOption.objects.get_value(project, 'mail:include_loggers', self.include_loggers)
+        if include_loggers is not None and group.logger not in include_loggers:
             return False
-        if self.exclude_loggers and group.logger in self.exclude_loggers:
+        exclude_loggers = ProjectOption.objects.get_value(project, 'mail:exclude_loggers', self.exclude_loggers)
+        if exclude_loggers and group.logger in exclude_loggers:
             return False
         return True
 
diff --git a/tests/plugins/mail/__init__.py b/tests/plugins/mail/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/plugins/mail/tests.py b/tests/plugins/mail/tests.py
new file mode 100644
index 0000000000..022fd06c5d
--- /dev/null
+++ b/tests/plugins/mail/tests.py
@@ -0,0 +1,46 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import mock
+from sentry.plugins.sentry_mail import MailProcessor
+
+from tests.base import TestCase
+
+
+class MailProcessorTest(TestCase):
+    def test_should_mail(self):
+        Mock = mock.Mock
+        with mock.patch('sentry.models.ProjectOption.objects.get_value') as get_value:
+            get_value.side_effect = lambda p, k, d: d
+
+            # no admins
+            p = MailProcessor(send_to=())
+            self.assertFalse(p.should_mail(group=Mock(), event=Mock()))
+
+            # not min level
+            p = MailProcessor(send_to=['foo@exampe.com'], min_level=2)
+            group = Mock()
+            group.level = 1
+            self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+            # not in inclusion
+            p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, include_loggers=['foo'])
+            group = Mock()
+            group.level = 5
+            group.logger = 'root'
+            self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+            # in exclusion
+            p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, exclude_loggers=['root'])
+            group = Mock()
+            group.level = 5
+            group.logger = 'root'
+            self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+            # in exclusion
+            p = MailProcessor(send_to=['foo@exampe.com'], min_level=None)
+            group = Mock()
+            group.level = 5
+            group.logger = 'root'
+            self.assertTrue(p.should_mail(group=group, event=Mock()))
