commit d169b6b110703d6c8b86d2cebb887df296020579
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Oct 16 13:13:10 2019 -0700

    ref(eventstore): Move get latest/earliest event to eventstore (#15107)
    
    Since this is pretty similar to getting a next/previous event, let's move this responsibility into the Eventstore.

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 4cdebfbd89..4c5b644206 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from rest_framework.exceptions import PermissionDenied
 
-from sentry import eventstore
 from sentry.api.bases import OrganizationEndpoint, OrganizationEventsError
 from sentry.api.event_search import (
     get_filter,
@@ -14,11 +13,6 @@ from sentry.models.project import Project
 from sentry.utils import snuba
 
 
-class Direction(object):
-    NEXT = 0
-    PREV = 1
-
-
 class OrganizationEventsEndpointBase(OrganizationEndpoint):
     def get_snuba_query_args(self, request, organization, params):
         query = request.GET.get("query")
@@ -108,72 +102,3 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
             )
 
         return snuba_args
-
-    def next_event_id(self, snuba_args, event):
-        """
-        Returns the next event ID if there is a subsequent event matching the
-        conditions provided. Ignores the project_id.
-        """
-        next_event = eventstore.get_next_event_id(event, filter=self._get_filter(snuba_args))
-
-        if next_event:
-            return next_event[1]
-
-    def prev_event_id(self, snuba_args, event):
-        """
-        Returns the previous event ID if there is a previous event matching the
-        conditions provided. Ignores the project_id.
-        """
-        prev_event = eventstore.get_prev_event_id(event, filter=self._get_filter(snuba_args))
-
-        if prev_event:
-            return prev_event[1]
-
-    def _get_filter(self, snuba_args):
-        return eventstore.Filter(
-            conditions=snuba_args["conditions"],
-            start=snuba_args.get("start", None),
-            end=snuba_args.get("end", None),
-            project_ids=snuba_args["filter_keys"].get("project_id", None),
-            group_ids=snuba_args["filter_keys"].get("issue", None),
-        )
-
-    def oldest_event_id(self, snuba_args, event):
-        """
-        Returns the oldest event ID if there is a subsequent event matching the
-        conditions provided
-        """
-        return self._get_terminal_event_id(Direction.PREV, snuba_args, event)
-
-    def latest_event_id(self, snuba_args, event):
-        """
-        Returns the latest event ID if there is a newer event matching the
-        conditions provided
-        """
-        return self._get_terminal_event_id(Direction.NEXT, snuba_args, event)
-
-    def _get_terminal_event_id(self, direction, snuba_args, event):
-        if direction == Direction.NEXT:
-            time_condition = [["timestamp", ">", event.timestamp]]
-            orderby = ["-timestamp", "-event_id"]
-        else:
-            time_condition = [["timestamp", "<", event.timestamp]]
-            orderby = ["timestamp", "event_id"]
-
-        conditions = snuba_args["conditions"][:]
-        conditions.extend(time_condition)
-
-        result = snuba.dataset_query(
-            selected_columns=["event_id"],
-            start=snuba_args.get("start", None),
-            end=snuba_args.get("end", None),
-            conditions=conditions,
-            dataset=snuba.detect_dataset(snuba_args, aliased_conditions=True),
-            filter_keys=snuba_args["filter_keys"],
-            orderby=orderby,
-            limit=1,
-        )
-        if not result or "data" not in result or len(result["data"]) == 0:
-            return None
-
-        return result["data"][0]["event_id"]
diff --git a/src/sentry/api/endpoints/organization_event_details.py b/src/sentry/api/endpoints/organization_event_details.py
index 8960effab8..2cc0b8ef57 100644
--- a/src/sentry/api/endpoints/organization_event_details.py
+++ b/src/sentry/api/endpoints/organization_event_details.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 from rest_framework.response import Response
-from enum import Enum
 
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
 from sentry.api.event_search import get_reference_event_conditions
@@ -10,11 +9,6 @@ from sentry.models.project import Project
 from sentry.api.serializers import serialize
 
 
-class EventOrdering(Enum):
-    LATEST = 0
-    OLDEST = 1
-
-
 class OrganizationEventDetailsEndpoint(OrganizationEventsEndpointBase):
     def get(self, request, organization, project_slug, event_id):
         if not features.has("organizations:events-v2", organization, actor=request.user):
@@ -54,3 +48,52 @@ class OrganizationEventDetailsEndpoint(OrganizationEventsEndpointBase):
         data["projectSlug"] = project_slug
 
         return Response(data)
+
+    def next_event_id(self, snuba_args, event):
+        """
+        Returns the next event ID if there is a subsequent event matching the
+        conditions provided. Ignores the project_id.
+        """
+        next_event = eventstore.get_next_event_id(event, filter=self._get_filter(snuba_args))
+
+        if next_event:
+            return next_event[1]
+
+    def prev_event_id(self, snuba_args, event):
+        """
+        Returns the previous event ID if there is a previous event matching the
+        conditions provided. Ignores the project_id.
+        """
+        prev_event = eventstore.get_prev_event_id(event, filter=self._get_filter(snuba_args))
+
+        if prev_event:
+            return prev_event[1]
+
+    def latest_event_id(self, snuba_args, event):
+        """
+        Returns the latest event ID if there is a newer event matching the
+        conditions provided
+        """
+        latest_event = eventstore.get_latest_event_id(event, filter=self._get_filter(snuba_args))
+
+        if latest_event:
+            return latest_event[1]
+
+    def oldest_event_id(self, snuba_args, event):
+        """
+        Returns the oldest event ID if there is a subsequent event matching the
+        conditions provided
+        """
+        oldest_event = eventstore.get_earliest_event_id(event, filter=self._get_filter(snuba_args))
+
+        if oldest_event:
+            return oldest_event[1]
+
+    def _get_filter(self, snuba_args):
+        return eventstore.Filter(
+            conditions=snuba_args["conditions"],
+            start=snuba_args.get("start", None),
+            end=snuba_args.get("end", None),
+            project_ids=snuba_args["filter_keys"].get("project_id", None),
+            group_ids=snuba_args["filter_keys"].get("issue", None),
+        )
diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index 6fee32cb56..b9224b9363 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -123,6 +123,8 @@ class EventStorage(Service):
         "get_events",
         "get_prev_event_id",
         "get_next_event_id",
+        "get_earliest_event_id",
+        "get_latest_event_id",
         "bind_nodes",
     )
 
@@ -198,6 +200,28 @@ class EventStorage(Service):
         """
         raise NotImplementedError
 
+    def get_earliest_event_id(self, event, filter):
+        """
+        Gets the earliest event given a current event and some conditions/filters.
+        Returns a tuple of (project_id, event_id)
+
+        Arguments:
+        event (Event): Event object
+        filter (Filter): Filter
+        """
+        raise NotImplementedError
+
+    def get_latest_event_id(self, event, filter):
+        """
+        Gets the latest event given a current event and some conditions/filters.
+        Returns a tuple of (project_id, event_id)
+
+        Arguments:
+        event (Event): Event object
+        filter (Filter): Filter
+        """
+        raise NotImplementedError
+
     def bind_nodes(self, object_list, node_name="data"):
         """
         For a list of Event objects, and a property name where we might find an
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 67e221cebe..e9552014b5 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -74,6 +74,26 @@ class SnubaEventStorage(EventStorage):
             return SnubaEvent(result["data"][0])
         return None
 
+    def get_earliest_event_id(self, event, filter):
+        time_condition = [["timestamp", "<", event.timestamp]]
+        orderby = ["timestamp", "event_id"]
+
+        filter = deepcopy(filter)
+        filter.conditions = filter.conditions or []
+        filter.conditions.extend(time_condition)
+
+        return self.__get_event_id_from_filter(filter=filter, orderby=orderby)
+
+    def get_latest_event_id(self, event, filter):
+        time_condition = [["timestamp", ">", event.timestamp]]
+        orderby = ["-timestamp", "-event_id"]
+
+        filter = deepcopy(filter)
+        filter.conditions = filter.conditions or []
+        filter.conditions.extend(time_condition)
+
+        return self.__get_event_id_from_filter(filter=filter, orderby=orderby)
+
     def get_next_event_id(self, event, filter):
         """
         Returns (project_id, event_id) of a next event given a current event
@@ -95,7 +115,7 @@ class SnubaEventStorage(EventStorage):
         filter.start = event.datetime
         filter.end = datetime.utcnow()
 
-        return self.__get_next_or_prev_event_id(filter=filter, orderby=["timestamp", "event_id"])
+        return self.__get_event_id_from_filter(filter=filter, orderby=["timestamp", "event_id"])
 
     def get_prev_event_id(self, event, filter):
         """
@@ -118,7 +138,7 @@ class SnubaEventStorage(EventStorage):
         filter.end = event.datetime
         filter.start = datetime.utcfromtimestamp(0)
 
-        return self.__get_next_or_prev_event_id(filter=filter, orderby=["-timestamp", "-event_id"])
+        return self.__get_event_id_from_filter(filter=filter, orderby=["-timestamp", "-event_id"])
 
     def __get_columns(self, additional_columns):
         columns = EventStorage.minimal_columns
@@ -128,7 +148,7 @@ class SnubaEventStorage(EventStorage):
 
         return [col.value for col in columns]
 
-    def __get_next_or_prev_event_id(self, filter=None, orderby=None):
+    def __get_event_id_from_filter(self, filter=None, orderby=None):
         columns = ["event_id", "project_id"]
         result = snuba.dataset_query(
             selected_columns=columns,
@@ -140,8 +160,7 @@ class SnubaEventStorage(EventStorage):
             referrer="eventstore.get_next_or_prev_event_id",
             orderby=orderby,
             dataset=snuba.detect_dataset(
-                {"selected_columns": columns, "conditions": filter.conditions},
-                aliased_conditions=True,
+                {"conditions": filter.conditions}, aliased_conditions=True
             ),
         )
 
diff --git a/tests/sentry/eventstore/snuba/test_backend.py b/tests/sentry/eventstore/snuba/test_backend.py
index c4fcfc8119..fb1efdf344 100644
--- a/tests/sentry/eventstore/snuba/test_backend.py
+++ b/tests/sentry/eventstore/snuba/test_backend.py
@@ -127,6 +127,23 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
         assert self.eventstore.get_prev_event_id(None, filter=filter) is None
         assert self.eventstore.get_next_event_id(None, filter=filter) is None
 
+    def test_get_latest_or_oldest_event_id(self):
+        # Returns a latest/oldest event
+        event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
+        filter = Filter(project_ids=[self.project1.id, self.project2.id])
+        oldest_event = self.eventstore.get_earliest_event_id(event, filter=filter)
+        latest_event = self.eventstore.get_latest_event_id(event, filter=filter)
+        assert oldest_event == (six.text_type(self.project1.id), "a" * 32)
+        assert latest_event == (six.text_type(self.project2.id), "e" * 32)
+
+        # Returns none when no latest/oldest event that meets conditions
+        event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
+        filter = Filter(project_ids=[self.project1.id], group_ids=[self.event2.group_id])
+        oldest_event = self.eventstore.get_earliest_event_id(event, filter=filter)
+        latest_event = self.eventstore.get_latest_event_id(event, filter=filter)
+        assert oldest_event is None
+        assert latest_event is None
+
     def test_transaction_get_event_by_id(self):
         event = self.eventstore.get_event_by_id(self.project2.id, self.transaction_event.event_id)
 
