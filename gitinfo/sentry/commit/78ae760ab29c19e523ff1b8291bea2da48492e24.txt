commit 78ae760ab29c19e523ff1b8291bea2da48492e24
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Sep 22 13:25:48 2015 -0700

    Add versioning to plugin configurations

diff --git a/src/sentry/plugins/base/configuration.py b/src/sentry/plugins/base/configuration.py
index 34c4c17ecc..d9a5b43894 100644
--- a/src/sentry/plugins/base/configuration.py
+++ b/src/sentry/plugins/base/configuration.py
@@ -15,15 +15,9 @@ from django.contrib import messages
 
 
 def default_plugin_config(plugin, project, request):
-    NOTSET = object()
-
     plugin_key = plugin.get_conf_key()
-    if project:
-        form_class = plugin.project_conf_form
-        template = plugin.project_conf_template
-    else:
-        form_class = plugin.site_conf_form
-        template = plugin.site_conf_template
+    form_class = plugin.get_conf_form(project)
+    template = plugin.get_conf_template(project)
 
     if form_class is None:
         return HttpResponseRedirect(reverse(
@@ -31,20 +25,10 @@ def default_plugin_config(plugin, project, request):
 
     test_results = None
 
-    initials = plugin.get_form_initial(project)
-    for field in form_class.base_fields:
-        key = '%s:%s' % (plugin_key, field)
-        if project:
-            value = ProjectOption.objects.get_value(project, key, NOTSET)
-        else:
-            value = options.get(key)
-        if value is not NOTSET:
-            initials[field] = value
-
     form = form_class(
         request.POST if request.POST.get('plugin') == plugin.slug else None,
-        initial=initials,
-        prefix=plugin_key
+        initial=plugin.get_conf_options(project),
+        prefix=plugin_key,
     )
     if form.is_valid():
         if 'action_test' in request.POST and plugin.is_testable():
@@ -87,3 +71,22 @@ def default_plugin_config(plugin, project, request):
         'plugin_test_results': test_results,
         'plugin_is_configured': is_configured,
     }, context_instance=RequestContext(request)))
+
+
+def default_plugin_options(plugin, project):
+    form_class = plugin.get_conf_form(project)
+    if form_class is None:
+        return {}
+
+    NOTSET = object()
+    plugin_key = plugin.get_conf_key()
+    initials = plugin.get_form_initial(project)
+    for field in form_class.base_fields:
+        key = '%s:%s' % (plugin_key, field)
+        if project is not None:
+            value = ProjectOption.objects.get_value(project, key, NOTSET)
+        else:
+            value = options.get(key)
+        if value is not NOTSET:
+            initials[field] = value
+    return initials
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index b0035469eb..52db6d78a4 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -14,11 +14,14 @@ import logging
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from threading import local
+from hashlib import md5
 
 from sentry.auth import access
 from sentry.plugins.base.response import Response
 from sentry.plugins.base.view import PluggableViewMixin
-from sentry.plugins.base.configuration import default_plugin_config
+from sentry.plugins.base.configuration import (
+    default_plugin_config, default_plugin_options,
+)
 
 
 class PluginMount(type):
@@ -167,6 +170,25 @@ class IPlugin(local, PluggableViewMixin):
             return self.get_conf_title().lower().replace(' ', '_')
         return self.conf_key
 
+    def get_conf_form(self, project=None):
+        if project is not None:
+            return self.project_conf_form
+        return self.site_conf_form
+
+    def get_conf_template(self, project=None):
+        if project is not None:
+            return self.project_conf_template
+        return self.site_conf_template
+
+    def get_conf_options(self, project=None):
+        return default_plugin_options(self, project)
+
+    def get_conf_version(self, project):
+        options = self.get_conf_options(project)
+        return md5(
+            '&'.join(sorted('%s=%s' % o for o in options.iteritems()))
+        ).hexdigest()[:3]
+
     def get_conf_title(self):
         """
         Returns a string representing the title to be shown on the configuration page.
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index e6afe5249a..7a3f67e011 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -13,9 +13,12 @@ import logging
 
 from django.http import HttpResponseRedirect
 from threading import local
+from hashlib import md5
 
 from sentry.plugins.base.response import Response
-from sentry.plugins.base.configuration import default_plugin_config
+from sentry.plugins.base.configuration import (
+    default_plugin_config, default_plugin_options,
+)
 
 
 class PluginMount(type):
@@ -153,12 +156,34 @@ class IPlugin2(local):
             self.conf_key = self.get_conf_title().lower().replace(' ', '_')
         return self.conf_key
 
+    def get_conf_form(self, project=None):
+        if project is not None:
+            return self.project_conf_form
+        return self.site_conf_form
+
+    def get_conf_template(self, project=None):
+        if project is not None:
+            return self.project_conf_template
+        return self.site_conf_template
+
+    def get_conf_options(self, project=None):
+        return default_plugin_options(self, project)
+
+    def get_conf_version(self, project):
+        options = self.get_conf_options(project)
+        return md5(
+            '&'.join(sorted('%s=%s' % o for o in options.iteritems()))
+        ).hexdigest()[:3]
+
     def get_conf_title(self):
         """
         Returns a string representing the title to be shown on the configuration page.
         """
         return self.conf_title or self.get_title()
 
+    def get_form_initial(self, project=None):
+        return {}
+
     def has_project_conf(self):
         return self.project_conf_form is not None
 
