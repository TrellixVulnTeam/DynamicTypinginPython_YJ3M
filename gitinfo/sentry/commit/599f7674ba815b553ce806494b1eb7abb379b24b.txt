commit 599f7674ba815b553ce806494b1eb7abb379b24b
Author: Ryan Skonnord <ryan.skonnord@sentry.io>
Date:   Wed Apr 29 14:05:51 2020 -0700

    perf(serializer): Add instrumentation to serializers (#18516)
    
    Add instrumentation to the base `serialize` function. This will add time
    cost coverage across all API endpoints. When a serializer calls another
    serializer, we will be able to see when (as a recursively nested span)
    and its type.
    
    The child spans allow us to distinguish the time cost of `get_attrs`
    (which is done with a constant number of DB queries) from the cost of
    iterating linearly over all objects to be serialized. Because these are
    done in the base `serialize` function, it's possible to measure them
    only here, not on a per-model basis.
    
    Because this supplants the `serialize_all_organization_projects` span,
    revert it.
    
    Add finer-grained instrumentation to ProjectSerializer's
    get_feature_list.  The span is expected to represent the majority of the
    cost of each iteration over a list of projects being serialized. By
    capturing them all, we can sum the span lengths to find its percentage
    of the total cost. The output is be a little different from other spans
    in that the number of span instances scales linearly with the number of
    projects being iterated over.

diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index c2238a2839..88e47a4c70 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -5,8 +5,6 @@ import six
 from django.db.models import Q
 from rest_framework.response import Response
 
-import sentry_sdk
-
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.paginator import OffsetPaginator
@@ -109,11 +107,7 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint, EnvironmentMixin):
 
         if get_all_projects:
             queryset = queryset.order_by("slug").select_related("organization")
-            projects = list(queryset)
-            with sentry_sdk.start_span(op="serialize_all_organization_projects") as span:
-                span.set_data("Project Count", len(projects))
-                serialized = serialize(projects, request.user, ProjectSummarySerializer())
-            return Response(serialized)
+            return Response(serialize(list(queryset), request.user, ProjectSummarySerializer()))
         else:
             return self.paginate(
                 request=request,
diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index 6158fa6c94..cbf005d006 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 from django.contrib.auth.models import AnonymousUser
 
+import sentry_sdk
+
 registry = {}
 
 
@@ -27,15 +29,21 @@ def serialize(objects, user=None, serializer=None, **kwargs):
         else:
             return objects
 
-    attrs = serializer.get_attrs(
-        # avoid passing NoneType's to the serializer as they're allowed and
-        # filtered out of serialize()
-        item_list=[o for o in objects if o is not None],
-        user=user,
-        **kwargs
-    )
+    with sentry_sdk.start_span(op="serialize") as span:
+        span.set_data("Serializer Type", type(serializer))
+        span.set_data("Object Count", len(objects))
+
+        with sentry_sdk.start_span(op="serialize.get_attrs"):
+            attrs = serializer.get_attrs(
+                # avoid passing NoneType's to the serializer as they're allowed and
+                # filtered out of serialize()
+                item_list=[o for o in objects if o is not None],
+                user=user,
+                **kwargs
+            )
 
-    return [serializer(o, attrs=attrs.get(o, {}), user=user, **kwargs) for o in objects]
+        with sentry_sdk.start_span(op="serialize.iterate"):
+            return [serializer(o, attrs=attrs.get(o, {}), user=user, **kwargs) for o in objects]
 
 
 def register(type):
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 5fc8f58242..ee6ea24181 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -9,6 +9,8 @@ from django.db.models import Q
 from django.db.models.aggregates import Count
 from django.utils import timezone
 
+import sentry_sdk
+
 from sentry import options, roles, tsdb, projectoptions
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.api.serializers.models.plugin import PluginSerializer
@@ -163,20 +165,24 @@ class ProjectSerializer(Serializer):
         from sentry import features
         from sentry.features.base import ProjectFeature
 
-        # Retrieve all registered organization features
-        project_features = features.all(feature_type=ProjectFeature).keys()
-        feature_list = set()
+        with sentry_sdk.start_span(op="project_feature_list") as span:
+            # Retrieve all registered organization features
+            project_features = features.all(feature_type=ProjectFeature).keys()
+            feature_list = set()
+
+            for feature_name in project_features:
+                if not feature_name.startswith("projects:"):
+                    continue
+                if features.has(feature_name, obj, actor=user):
+                    # Remove the project scope prefix
+                    feature_list.add(feature_name[len("projects:") :])
+
+            if obj.flags.has_releases:
+                feature_list.add("releases")
 
-        for feature_name in project_features:
-            if not feature_name.startswith("projects:"):
-                continue
-            if features.has(feature_name, obj, actor=user):
-                # Remove the project scope prefix
-                feature_list.add(feature_name[len("projects:") :])
+            span.set_data("Feature Count", len(feature_list))
 
-        if obj.flags.has_releases:
-            feature_list.add("releases")
-        return feature_list
+            return feature_list
 
     def serialize(self, obj, attrs, user):
         feature_list = self.get_feature_list(obj, user)
