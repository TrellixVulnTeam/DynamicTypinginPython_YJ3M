commit 1838863a2c02278859bde536f98f28d6dbe29b06
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 20 17:01:16 2010 -0700

    Added tests for signals

diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index 65220636ce..04d5e3c20f 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 
 from django.core.handlers.wsgi import WSGIRequest
+from django.core.signals import got_request_exception
 from django.db import models
 from django.test.client import Client
 from django.test import TestCase
@@ -299,7 +300,7 @@ class DBLogTestCase(TestCase):
         except Error.DoesNotExist, exc:
             ErrorBatch.handle_exception(request=request, sender=self)
         else:
-            self.fail('Unable to create `Error` entry.')
+            self.fail('Expected an exception.')
         
         cur = (Error.objects.count(), ErrorBatch.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
@@ -320,7 +321,7 @@ class DBLogTestCase(TestCase):
         except Error.DoesNotExist, exc:
             ErrorBatch.handle_exception(request=request, sender=self)
         else:
-            self.fail('Unable to create `Error` entry.')
+            self.fail('Expected an exception.')
         
         cur = (Error.objects.count(), ErrorBatch.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
@@ -334,4 +335,25 @@ class DBLogTestCase(TestCase):
         for i in range(0, 50):
             Error.objects.create_from_text('hi')
         
-        self.assertEquals(Error.objects.count(), settings.THRASHING_LIMIT)
\ No newline at end of file
+        self.assertEquals(Error.objects.count(), settings.THRASHING_LIMIT)
+    
+    def testSignals(self):
+        Error.objects.all().delete()
+        ErrorBatch.objects.all().delete()
+
+        request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
+
+        try:
+            Error.objects.get(id=999999999)
+        except Error.DoesNotExist, exc:
+            got_request_exception.send(sender=self.__class__, request=request)
+        else:
+            self.fail('Expected an exception.')
+            
+        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
+        last = Error.objects.all().order_by('-id')[0:1].get()
+        self.assertEquals(last.logger, 'root')
+        self.assertEquals(last.class_name, 'DoesNotExist')
+        self.assertEquals(last.level, logging.ERROR)
+        self.assertEquals(last.message, smart_unicode(exc))        
