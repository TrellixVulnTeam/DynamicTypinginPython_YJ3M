commit 317f7e14b386791cc9fc435527256bf316576797
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 31 12:51:35 2011 -0800

    Fix several issues where the new permissions were not precise and adjust get_project_list to use an access range

diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 18be0458c4..24df68db9f 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -58,8 +58,6 @@ def project_from_auth_vars(auth_vars, data):
     if api_key:
         try:
             pm = ProjectMember.objects.get(api_key=api_key)
-            if not pm.has_perm('add_message'):
-                raise ProjectMember.DoesNotExist
         except ProjectMember.DoesNotExist:
             raise APIForbidden('Invalid signature')
         project = pm.project
@@ -93,18 +91,12 @@ def project_from_api_key_and_id(api_key, project):
     except ProjectMember.DoesNotExist:
         raise APIUnauthorized()
 
-    if not pm.has_perm('add_message'):
-        raise ProjectMember.DoesNotExist
-
     return pm.project
 
 
 def project_from_id(request):
     try:
         pm = ProjectMember.objects.get(user=request.user, project=request.GET['project_id'])
-        # TODO: do we need this check?
-        # if not pm.has_perm('add_message'):
-        #     raise ProjectMember.DoesNotExist
     except ProjectMember.DoesNotExist:
         raise APIUnauthorized()
 
diff --git a/sentry/web/decorators.py b/sentry/web/decorators.py
index 2ccb25f4b5..b16f96159b 100644
--- a/sentry/web/decorators.py
+++ b/sentry/web/decorators.py
@@ -3,15 +3,17 @@ from django.http import HttpResponseRedirect
 
 from sentry.conf import settings
 from sentry.models import Project
-from sentry.web.helpers import get_project_list, render_to_response, get_login_url
+from sentry.web.helpers import get_project_list, render_to_response, \
+  get_login_url
 
 
 def has_access(group_or_func=None):
     """
-    Tests and transforms project_id for permissions based on the requesting user. Passes
-    the actual project instance to the decorated view.
+    Tests and transforms project_id for permissions based on the requesting
+    user. Passes the actual project instance to the decorated view.
 
-    The default permission scope is 'user'.
+    The default permission scope is 'user', which
+    allows both 'user' and 'owner' access, but not 'system agent'.
 
     >>> @has_access('owner')
     >>> def foo(request, project):
@@ -39,7 +41,6 @@ def has_access(group_or_func=None):
 
             if project_id:
                 project_list = get_project_list(request.user, group_or_func)
-
                 try:
                     project = project_list[int(project_id)]
                 except (KeyError, ValueError):
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 13f2aa4316..e8d1ca1e66 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -102,7 +102,7 @@ def ajax_handler(request, project):
         except Group.DoesNotExist:
             return HttpResponseForbidden()
 
-        if group.project and group.project.pk not in get_project_list(request.user, 'change_message_status'):
+        if group.project and group.project.pk not in get_project_list(request.user):
             return HttpResponseForbidden()
 
         Group.objects.filter(pk=group.pk).update(status=1)
@@ -125,7 +125,7 @@ def ajax_handler(request, project):
         return response
 
     def clear(request, project):
-        projects = get_project_list(request.user, 'change_message_status')
+        projects = get_project_list(request.user)
 
         event_list = Group.objects.filter(Q(project__in=projects.keys()) | Q(project__isnull=True))
 
@@ -149,7 +149,7 @@ def ajax_handler(request, project):
             except Group.DoesNotExist:
                 return HttpResponseForbidden()
 
-            if group.project and group.project.pk not in get_project_list(request.user, 'read_message'):
+            if group.project and group.project.pk not in get_project_list(request.user):
                 return HttpResponseForbidden()
 
             data = Group.objects.get_chart_data(group, max_days=days)
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index c4a46a781e..017d8a60e9 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -42,7 +42,7 @@ def new_project(request):
 
 
 @login_required
-@has_access('remove_project')
+@has_access('owner')
 @csrf_protect
 def remove_project(request, project):
     project_list = filter(lambda x: x != project, get_project_list(request.user).itervalues())
@@ -73,7 +73,7 @@ def remove_project(request, project):
 
 
 @login_required
-@has_access('change_project')
+@has_access('owner')
 @csrf_protect
 def manage_project(request, project):
     form = EditProjectForm(request.POST or None, instance=project)
@@ -118,7 +118,7 @@ def new_project_member(request, project):
 
 
 @csrf_protect
-@has_access('change_member')
+@has_access('owner')
 def edit_project_member(request, project, member_id):
     member = project.member_set.get(pk=member_id)
 
@@ -139,7 +139,7 @@ def edit_project_member(request, project, member_id):
 
 
 @csrf_protect
-@has_access('delete_member')
+@has_access('owner')
 def remove_project_member(request, project, member_id):
     member = project.member_set.get(pk=member_id)
     if member.user == project.owner:
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index 2917d326ca..b3f4174358 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -14,12 +14,12 @@ from django.http import HttpResponse
 from django.template import loader
 
 from sentry.conf import settings
-from sentry.models import ProjectMember, Project
+from sentry.models import ProjectMember, Project, MEMBER_USER
 
 logger = logging.getLogger('sentry.errors')
 
 
-def get_project_list(user=None, flag=None, hidden=False):
+def get_project_list(user=None, access=MEMBER_USER, hidden=False):
     """
     Returns a set of all projects a user has some level of access to.
     """
@@ -36,10 +36,8 @@ def get_project_list(user=None, flag=None, hidden=False):
               .select_related('project')
         if not hidden:
             qs = qs.filter(project__status=0)
-        projects.update(dict(
-            (pm.project_id, pm.project)
-            for pm in qs
-            if (not flag or pm.has_perm(flag))))
+        projects.update(dict((pm.project_id, pm.project)
+            for pm in qs if pm.type <= access))
 
     return projects
 
