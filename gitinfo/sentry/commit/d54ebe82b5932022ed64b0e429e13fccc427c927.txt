commit d54ebe82b5932022ed64b0e429e13fccc427c927
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Apr 3 11:02:17 2016 -0700

    Remove zip usage in serializers

diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 68885740e0..ee7a9d6236 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -54,13 +54,15 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint):
                 team__in=team_list,
             ).order_by('name'))
 
-        team_map = dict(
-            (t.id, c) for (t, c) in zip(team_list, serialize(team_list, request.user)),
-        )
+        team_map = {
+            d['id']: d
+            for d in serialize(team_list, request.user)
+        }
 
         context = []
         for project, pdata in zip(project_list, serialize(project_list, request.user)):
-            pdata['team'] = team_map[project.team_id]
+            assert str(project.id) == pdata['id']
+            pdata['team'] = team_map[str(project.team_id)]
             context.append(pdata)
 
         return Response(context)
diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index 828e4c3aaf..4a1ae23ef0 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -12,7 +12,9 @@ def serialize(objects, user=None, serializer=None):
 
     if not objects:
         return objects
-    elif not isinstance(objects, (list, tuple)):
+    # sets aren't predictable, so generally you should use a list, but it's
+    # supported out of convenience
+    elif not isinstance(objects, (list, tuple, set, frozenset)):
         return serialize([objects], user=user, serializer=serializer)[0]
 
     # elif isinstance(obj, dict):
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
index 1fb0520642..5352d74a47 100644
--- a/src/sentry/api/serializers/models/activity.py
+++ b/src/sentry/api/serializers/models/activity.py
@@ -8,14 +8,14 @@ from sentry.models import Activity
 class ActivitySerializer(Serializer):
     def get_attrs(self, item_list, user):
         # TODO(dcramer); assert on relations
-        users = dict(zip(
-            item_list,
-            serialize([i.user for i in item_list], user)
-        ))
+        users = {
+            d['id']: d
+            for d in serialize(set(i.user for i in item_list if i.user_id), user)
+        }
 
         return {
             item: {
-                'user': users[item],
+                'user': users[str(item.user_id)] if item.user_id else None,
             } for item in item_list
         }
 
@@ -36,21 +36,19 @@ class OrganizationActivitySerializer(ActivitySerializer):
             item_list, user,
         )
 
-        group_list = list(set([i.group for i in item_list if i.group]))
-        groups = dict(zip(
-            [g.id for g in group_list],
-            serialize(group_list, user)
-        ))
+        groups = {
+            d['id']: d
+            for d in serialize(set(i.group for i in item_list if i.group_id), user)
+        }
 
-        project_list = list(set([i.project for i in item_list]))
-        projects = dict(zip(
-            [p.id for p in project_list],
-            serialize(project_list, user)
-        ))
+        projects = {
+            d['id']: d
+            for d in serialize(set(i.project for i in item_list), user)
+        }
 
         for item in item_list:
-            attrs[item]['issue'] = groups[item.group_id] if item.group_id else None
-            attrs[item]['project'] = projects[item.project_id]
+            attrs[item]['issue'] = groups[str(item.group_id)] if item.group_id else None
+            attrs[item]['project'] = projects[str(item.project_id)]
         return attrs
 
     def serialize(self, obj, attrs, user):
diff --git a/src/sentry/api/serializers/models/groupseen.py b/src/sentry/api/serializers/models/groupseen.py
index bc17327348..9352057c3b 100644
--- a/src/sentry/api/serializers/models/groupseen.py
+++ b/src/sentry/api/serializers/models/groupseen.py
@@ -7,16 +7,15 @@ from sentry.models import GroupSeen
 @register(GroupSeen)
 class GroupSeenSerializer(Serializer):
     def get_attrs(self, item_list, user):
-        user_list = [i.user for i in item_list]
         user_map = {
-            u: d
-            for u, d in zip(user_list, serialize(user_list, user))
+            d['id']: d
+            for d in serialize(set(i.user for i in item_list), user)
         }
 
         result = {}
         for item in item_list:
             result[item] = {
-                'user': user_map[item.user],
+                'user': user_map[str(item.user_id)],
             }
         return result
 
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index aa34ce6731..2a95593533 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -16,17 +16,15 @@ class ReleaseSerializer(Serializer):
             )
         }
         owners = {
-            k: v
-            for k, v in zip(
-                item_list, serialize([i.owner for i in item_list], user)
-            )
+            d['id']: d
+            for d in serialize(set(i.owner for i in item_list if i.owner_id), user)
         }
 
         result = {}
         for item in item_list:
             result[item] = {
                 'tag': tags.get(item.version),
-                'owner': owners[item],
+                'owner': owners[str(item.owner_id)] if item.owner_id else None,
             }
         return result
 
diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
index 6e99888437..36962388fd 100644
--- a/src/sentry/api/serializers/models/userreport.py
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -22,14 +22,16 @@ class UserReportSerializer(Serializer):
 class ProjectUserReportSerializer(UserReportSerializer):
     def get_attrs(self, item_list, user):
         # TODO(dcramer); assert on relations
-        groups = dict(zip(
-            item_list,
-            serialize([i.group for i in item_list], user)
-        ))
+        groups = {
+            d['id']: d
+            for d in serialize(set(i.group for i in item_list if i.group_id), user)
+        }
 
         attrs = {}
         for item in item_list:
-            attrs[item] = {'group': groups[item]}
+            attrs[item] = {
+                'group': groups[str(item.group_id)] if item.group_id else None,
+            }
         return attrs
 
     def serialize(self, obj, attrs, user):
