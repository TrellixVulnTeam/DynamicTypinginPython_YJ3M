commit 1f07d672b80c57c5493cdbc23440b8739cf03a56
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Mon Feb 10 16:27:39 2020 -0800

    feat(adoption): Add has source maps flag (#16917)

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index e2c1770194..7801ae686a 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0033_auto_20200210_2137
+sentry: 0034_auto_20200210_2311
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/migrations/0034_auto_20200210_2311.py b/src/sentry/migrations/0034_auto_20200210_2311.py
new file mode 100644
index 0000000000..689a8f0490
--- /dev/null
+++ b/src/sentry/migrations/0034_auto_20200210_2311.py
@@ -0,0 +1,50 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.27 on 2020-02-10 23:11
+from __future__ import unicode_literals
+
+import bitfield.models
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    """
+    BEGIN;
+    --
+    -- Alter field flags on project
+    --
+    COMMIT;
+    """
+
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+    dependencies = [("sentry", "0033_auto_20200210_2137")]
+
+    operations = [
+        migrations.AlterField(
+            model_name="project",
+            name="flags",
+            field=bitfield.models.BitField(
+                (
+                    (b"has_releases", b"This Project has sent release data"),
+                    (b"has_sourcemaps", b"This Project has processed source maps"),
+                ),
+                default=0,
+                null=True,
+            ),
+        )
+    ]
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index f7ffcc3e81..41b114fc48 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -103,7 +103,12 @@ class Project(Model, PendingDeletionMixin):
     # will have their first_event field set to date_added
     first_event = models.DateTimeField(null=True)
     flags = BitField(
-        flags=(("has_releases", "This Project has sent release data"),), default=0, null=True
+        flags=(
+            ("has_releases", "This Project has sent release data"),
+            ("has_sourcemaps", "This Project has processed source maps"),
+        ),
+        default=0,
+        null=True,
     )
 
     objects = ProjectManager(cache_fields=["pk", "slug"])
