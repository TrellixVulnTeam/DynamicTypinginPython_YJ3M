commit 650991e7a5296caae22b8df8ed47e48a32fb9d87
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Tue Nov 13 15:34:30 2018 -0800

    feat(api): Add org events stats endpoint

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index f684132251..f5d3a97a5e 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from collections import namedtuple
+from datetime import timedelta
 from functools32 import partial
 
 from rest_framework.exceptions import PermissionDenied
@@ -12,13 +14,18 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.event import SnubaEvent
+from sentry.api.serializers.snuba import SnubaTSResultSerializer
 from sentry.api.utils import get_date_range_from_params, InvalidParams
 from sentry.models import (
     Environment, OrganizationMember, OrganizationMemberTeam, Project, ProjectStatus
 )
+from sentry.utils.dates import parse_stats_period
 from sentry.utils.snuba import raw_query
 
 
+SnubaTSResult = namedtuple('SnubaTSResult', ('data', 'start', 'end', 'rollup'))
+
+
 class OrganizationEventsError(Exception):
     pass
 
@@ -130,3 +137,37 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
                 [SnubaEvent(row) for row in results], request.user),
             paginator=GenericOffsetPaginator(data_fn=data_fn)
         )
+
+
+class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
+
+    def get(self, request, organization):
+        try:
+            snuba_args = self.get_snuba_query_args(request, organization)
+        except OrganizationEventsError as exc:
+            return Response({'detail': exc.message}, status=400)
+
+        interval = parse_stats_period(request.GET.get('interval', '1h'))
+        if interval is None:
+            interval = timedelta(hours=1)
+
+        rollup = int(interval.total_seconds())
+
+        result = raw_query(
+            aggregations=[
+                ('count()', '', 'count'),
+            ],
+            orderby='time',
+            groupby=['time'],
+            rollup=rollup,
+            referrer='api.organization-events-stats',
+            **snuba_args
+        )
+
+        serializer = SnubaTSResultSerializer(organization, None, request.user)
+        return Response(
+            serializer.serialize(
+                SnubaTSResult(result, snuba_args['start'], snuba_args['end'], rollup),
+            ),
+            status=200,
+        )
diff --git a/src/sentry/api/serializers/snuba.py b/src/sentry/api/serializers/snuba.py
index 305afca370..cbcac6ff33 100644
--- a/src/sentry/api/serializers/snuba.py
+++ b/src/sentry/api/serializers/snuba.py
@@ -239,6 +239,9 @@ class BaseSnubaSerializer(object):
         self.user = user
 
     def get_attrs(self, item_list):
+        if self.lookup is None:
+            return item_list
+
         return self.lookup.serializer(
             self.organization, item_list, self.user)
 
@@ -296,22 +299,28 @@ class SnubaTSResultSerializer(BaseSnubaSerializer):
             (key, list(group))
             for key, group in itertools.groupby(result.data['data'], key=lambda r: r['time'])
         ]
-        attrs = self.get_attrs([
-            value_from_row(r, self.lookup.columns)
-            for _, v in data
-            for r in v
-        ])
+        if self.lookup:
+            attrs = self.get_attrs([
+                value_from_row(r, self.lookup.columns)
+                for _, v in data
+                for r in v
+            ])
         rv = []
         for k, v in data:
             row = []
             for r in v:
-                value = value_from_row(r, self.lookup.columns)
-                row.append({
-                    'count': r['count'],
-                    self.lookup.name: attrs.get(value),
-                })
+                item = {'count': r['count']}
+                if self.lookup:
+                    value = value_from_row(r, self.lookup.columns)
+                    item[self.lookup.name] = attrs.get(value),
+                row.append(item)
             rv.append((k, row))
-        return {
+
+        res = {
             'data': zerofill(rv, result.start, result.end, result.rollup),
-            'totals': {'count': result.data['totals']['count']},
         }
+
+        if result.data.get('totals'):
+            res['totals'] = {'count': result.data['totals']['count']}
+
+        return res
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 4051edbd5e..ca87b8a96b 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -61,7 +61,7 @@ from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_discover_query import OrganizationDiscoverQueryEndpoint
 from .endpoints.organization_discover_saved_queries import OrganizationDiscoverSavedQueriesEndpoint
 from .endpoints.organization_discover_saved_query_detail import OrganizationDiscoverSavedQueryDetailEndpoint
-from .endpoints.organization_events import OrganizationEventsEndpoint
+from .endpoints.organization_events import OrganizationEventsEndpoint, OrganizationEventsStatsEndpoint
 from .endpoints.organization_health import OrganizationHealthTopEndpoint, OrganizationHealthGraphEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_environments import OrganizationEnvironmentsEndpoint
@@ -494,6 +494,11 @@ urlpatterns = patterns(
         OrganizationEventsEndpoint.as_view(),
         name='sentry-api-0-organization-events'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/events-stats/$',
+        OrganizationEventsStatsEndpoint.as_view(),
+        name='sentry-api-0-organization-events-stats'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/issues/new/$',
         OrganizationIssuesNewEndpoint.as_view(),
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 0622f90e78..72753cefd7 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -2,19 +2,21 @@ from __future__ import absolute_import
 
 from six.moves.urllib.parse import urlencode
 
-from datetime import timedelta
+from datetime import datetime, timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
 
 
-class OrganizationEventsTest(APITestCase, SnubaTestCase):
+class OrganizationEventsTestBase(APITestCase, SnubaTestCase):
     def setUp(self):
-        super(OrganizationEventsTest, self).setUp()
+        super(OrganizationEventsTestBase, self).setUp()
         self.min_ago = timezone.now() - timedelta(minutes=1)
         self.day_ago = timezone.now() - timedelta(days=1)
 
+
+class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
     def assert_events_in_response(self, response, event_ids):
         assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(event_ids)
 
@@ -443,3 +445,65 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         self.assert_events_in_response(response, [event_2.event_id])
+
+
+class OrganizationEventsStatsEndpointTest(OrganizationEventsTestBase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        project2 = self.create_project()
+        group = self.create_group(project=project)
+        group2 = self.create_group(project=project2)
+        self.create_event(
+            'a' * 32,
+            group=group,
+            datetime=datetime(
+                2018,
+                11,
+                1,
+                10,
+                59,
+                00,
+                tzinfo=timezone.utc))
+        self.create_event(
+            'b' * 32,
+            group=group2,
+            datetime=datetime(
+                2018,
+                11,
+                1,
+                11,
+                30,
+                00,
+                tzinfo=timezone.utc))
+        self.create_event(
+            'c' * 32,
+            group=group2,
+            datetime=datetime(
+                2018,
+                11,
+                1,
+                11,
+                45,
+                00,
+                tzinfo=timezone.utc))
+
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
+        )
+        response = self.client.get('%s?%s' % (url, urlencode({
+            'start': '2018-11-01T10:00:00',
+            'end': '2018-11-01T11:59:00',
+            'interval': '1h',
+        })), format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['data'] == [
+            (1541062800, []),
+            (1541066400, [{'count': 1}]),
+            (1541070000, [{'count': 2}]),
+        ]
