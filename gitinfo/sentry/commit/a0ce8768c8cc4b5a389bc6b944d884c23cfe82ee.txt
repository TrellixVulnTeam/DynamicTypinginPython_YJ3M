commit a0ce8768c8cc4b5a389bc6b944d884c23cfe82ee
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Dec 14 12:53:34 2014 -0800

    Add createuser command

diff --git a/docs/quickstart/index.rst b/docs/quickstart/index.rst
index 5da876086c..4a55e2ba59 100644
--- a/docs/quickstart/index.rst
+++ b/docs/quickstart/index.rst
@@ -232,7 +232,7 @@ Next up you'll need to create the first user, which will act as a superuser:
 .. code-block:: bash
 
     # create a new user
-    $ sentry --config=/etc/sentry.conf.py createsuperuser
+    $ sentry --config=/etc/sentry.conf.py createuser
 
 All schema changes and database upgrades are handled via the ``upgrade`` command, and this is the first
 thing you'll want to run when upgrading to future versions of Sentry.
@@ -356,8 +356,8 @@ power and flexibility that goes with it.
 
 Some of those which you'll likely find useful are:
 
-createsuperuser
-~~~~~~~~~~~~~~~
+createuser
+~~~~~~~~~~
 
 Quick and easy creation of superusers. These users have full access to the entirety of the Sentry server.
 
diff --git a/src/sentry/management/commands/createuser.py b/src/sentry/management/commands/createuser.py
new file mode 100644
index 0000000000..e34584daed
--- /dev/null
+++ b/src/sentry/management/commands/createuser.py
@@ -0,0 +1,97 @@
+"""
+sentry.management.commands.createuser
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import getpass
+import sys
+
+from django.core.exceptions import ValidationError
+from django.core.management.base import BaseCommand, CommandError, make_option
+
+from sentry.models import User
+
+
+class Command(BaseCommand):
+    help = 'Creates a new user'
+
+    option_list = BaseCommand.option_list + (
+        make_option('--email', dest='email'),
+        make_option('--superuser', dest='is_superuser', action='store_true', default=None),
+        make_option('--no-password', dest='nopassword', action='store_true', default=False),
+        make_option('--no-input', dest='noinput', action='store_true', default=False),
+    )
+
+    def _get_field(self, field_name):
+        return User._meta.get_field(field_name)
+
+    def get_email(self):
+        raw_value = raw_input('Email: ')
+        if not raw_value:
+            raise CommandError('Invalid email address: This field cannot be blank')
+
+        field = self._get_field('email')
+        try:
+            return field.clean(raw_value, None)
+        except ValidationError as e:
+            raise CommandError('Invalid email address: %s' % '; '.join(e.messages))
+
+    def get_password(self):
+        raw_value = getpass.getpass()
+
+        field = self._get_field('password')
+        try:
+            return field.clean(raw_value, None)
+        except ValidationError as e:
+            raise CommandError('Invalid password: %s' % '; '.join(e.messages))
+
+    def get_superuser(self):
+        if raw_input('Should this user be a superuser? [yN] ').lower() == 'y':
+            return True
+        return False
+
+    def handle(self, **options):
+        email = options['email']
+        is_superuser = options['is_superuser']
+
+        if not options['noinput']:
+            try:
+                if not email:
+                    email = self.get_email()
+
+                if not options['nopassword']:
+                    password = self.get_password()
+
+                if is_superuser is None:
+                    is_superuser = self.get_superuser()
+            except KeyboardInterrupt:
+                self.stderr.write("\nOperation cancelled.")
+                sys.exit(1)
+
+        else:
+            password = None
+
+        if not email:
+            raise CommandError('Invalid or missing email address')
+
+        if not options['nopassword'] and not password:
+            raise CommandError('No password set and --no-password not passed')
+
+        user = User(
+            email=email,
+            username=email,
+            is_superuser=is_superuser,
+            is_staff=is_superuser,
+            is_active=True,
+        )
+
+        if password:
+            user.set_password(password)
+
+        user.save()
+
+        self.stdout.write('User created: %s' % (email,))
