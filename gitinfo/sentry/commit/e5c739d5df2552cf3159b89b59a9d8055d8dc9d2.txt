commit e5c739d5df2552cf3159b89b59a9d8055d8dc9d2
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jan 14 11:56:06 2019 -0800

    feat(issues): Add organization group events component (#11492)
    
    This is based on src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
    minus environment related filtering code.

diff --git a/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx
new file mode 100644
index 0000000000..67e0e2986f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx
@@ -0,0 +1,160 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+import createReactClass from 'create-react-class';
+
+import SentryTypes from 'app/sentryTypes';
+import {Panel, PanelBody} from 'app/components/panels';
+import {t} from 'app/locale';
+import ApiMixin from 'app/mixins/apiMixin';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import EventsTable from 'app/components/eventsTable/eventsTable';
+import OrganizationState from 'app/mixins/organizationState';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import Pagination from 'app/components/pagination';
+import SearchBar from 'app/components/searchBar';
+import parseApiError from 'app/utils/parseApiError';
+
+const GroupEvents = createReactClass({
+  displayName: 'GroupEvents',
+
+  propTypes: {
+    group: SentryTypes.Group.isRequired,
+  },
+
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    const queryParams = this.props.location.query;
+
+    const initialState = {
+      eventList: [],
+      loading: true,
+      error: false,
+      pageLinks: '',
+      query: queryParams.query || '',
+    };
+
+    return initialState;
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (this.props.location.search !== nextProps.location.search) {
+      const queryParams = nextProps.location.query;
+
+      this.setState(
+        {
+          query: queryParams.query,
+        },
+        this.fetchData
+      );
+    }
+  },
+
+  handleSearch(query) {
+    let targetQueryParams = {...this.props.location.query};
+    targetQueryParams.query = query;
+    let {groupId, orgId} = this.props.params;
+
+    browserHistory.push({
+      pathname: `/organizations/${orgId}/issues/${groupId}/events/`,
+      query: targetQueryParams,
+    });
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+      error: false,
+    });
+
+    const query = {...this.props.location.query, limit: 50, query: this.state.query};
+
+    this.api.request(`/issues/${this.props.params.groupId}/events/`, {
+      query,
+      method: 'GET',
+      success: (data, _, jqXHR) => {
+        this.setState({
+          eventList: data,
+          error: false,
+          loading: false,
+          pageLinks: jqXHR.getResponseHeader('Link'),
+        });
+      },
+      error: err => {
+        this.setState({
+          error: parseApiError(err),
+          loading: false,
+        });
+      },
+    });
+  },
+
+  renderNoQueryResults() {
+    return (
+      <EmptyStateWarning>
+        <p>{t('Sorry, no events match your search query.')}</p>
+      </EmptyStateWarning>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <EmptyStateWarning>
+        <p>{t("There don't seem to be any events yet.")}</p>
+      </EmptyStateWarning>
+    );
+  },
+
+  renderResults() {
+    let group = this.props.group;
+    let tagList = group.tags.filter(tag => tag.key !== 'user') || [];
+
+    return (
+      <EventsTable
+        tagList={tagList}
+        events={this.state.eventList}
+        params={this.props.params}
+      />
+    );
+  },
+
+  renderBody() {
+    let body;
+
+    if (this.state.loading) body = <LoadingIndicator />;
+    else if (this.state.error)
+      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
+    else if (this.state.eventList.length > 0) body = this.renderResults();
+    else if (this.state.query && this.state.query !== '')
+      body = this.renderNoQueryResults();
+    else body = this.renderEmpty();
+
+    return body;
+  },
+
+  render() {
+    return (
+      <div>
+        <div style={{marginBottom: 20}}>
+          <SearchBar
+            defaultQuery=""
+            placeholder={t('search event id, message, or tags')}
+            query={this.state.query}
+            onSearch={this.handleSearch}
+          />
+        </div>
+        <Panel className="event-list">
+          <PanelBody>{this.renderBody()}</PanelBody>
+        </Panel>
+        <Pagination pageLinks={this.state.pageLinks} />
+      </div>
+    );
+  },
+});
+
+export default GroupEvents;
diff --git a/tests/js/spec/views/groupDetails/__snapshots__/groupEvents.spec.jsx.snap b/tests/js/spec/views/groupDetails/__snapshots__/organizationGroupEvents.spec.jsx.snap
similarity index 100%
rename from tests/js/spec/views/groupDetails/__snapshots__/groupEvents.spec.jsx.snap
rename to tests/js/spec/views/groupDetails/__snapshots__/organizationGroupEvents.spec.jsx.snap
diff --git a/tests/js/spec/views/groupDetails/__snapshots__/projectGroupEvents.spec.jsx.snap b/tests/js/spec/views/groupDetails/__snapshots__/projectGroupEvents.spec.jsx.snap
new file mode 100644
index 0000000000..5cf84a01a4
--- /dev/null
+++ b/tests/js/spec/views/groupDetails/__snapshots__/projectGroupEvents.spec.jsx.snap
@@ -0,0 +1,60 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`groupEvents renders 1`] = `
+<div>
+  <div
+    style={
+      Object {
+        "marginBottom": 20,
+      }
+    }
+  >
+    <SearchBar
+      defaultQuery=""
+      onSearch={[Function]}
+      placeholder="search event id, message, or tags"
+      query=""
+    />
+  </div>
+  <Panel
+    className="event-list"
+  >
+    <PanelBody
+      direction="column"
+      disablePadding={true}
+      flex={false}
+    >
+      <EventsTable
+        events={
+          Array [
+            Object {
+              "eventID": "12345",
+              "groupID": "1",
+              "id": "1",
+              "message": "ApiException",
+            },
+            Object {
+              "eventID": "12346",
+              "groupID": "1",
+              "id": "2",
+              "message": "TestException",
+            },
+          ]
+        }
+        params={
+          Object {
+            "groupId": "1",
+            "orgId": "orgId",
+            "projectId": "projectId",
+          }
+        }
+        tagList={Array []}
+      />
+    </PanelBody>
+  </Panel>
+  <Pagination
+    className="stream-pagination"
+    onCursor={[Function]}
+  />
+</div>
+`;
diff --git a/tests/js/spec/views/groupDetails/organizationGroupEvents.spec.jsx b/tests/js/spec/views/groupDetails/organizationGroupEvents.spec.jsx
new file mode 100644
index 0000000000..67cc562eb3
--- /dev/null
+++ b/tests/js/spec/views/groupDetails/organizationGroupEvents.spec.jsx
@@ -0,0 +1,66 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {shallow} from 'enzyme';
+import {browserHistory} from 'react-router';
+
+import OrgnanizationGroupEvents from 'app/views/groupDetails/organization/groupEvents';
+
+describe('groupEvents', function() {
+  beforeEach(function() {
+    MockApiClient.addMockResponse({
+      url: '/issues/1/events/',
+      body: TestStubs.Events(),
+    });
+
+    browserHistory.push = jest.fn();
+  });
+
+  it('renders', function() {
+    const component = shallow(
+      <OrgnanizationGroupEvents
+        group={TestStubs.Group()}
+        params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
+        location={{query: {}}}
+      />,
+      {
+        context: {...TestStubs.router()},
+        childContextTypes: {
+          router: PropTypes.object,
+        },
+      }
+    );
+
+    expect(component).toMatchSnapshot();
+  });
+
+  it('handles search', function() {
+    const component = shallow(
+      <OrgnanizationGroupEvents
+        params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
+        group={TestStubs.Group()}
+        location={{query: {}}}
+      />,
+      {
+        context: {...TestStubs.router()},
+        childContextTypes: {
+          router: PropTypes.object,
+        },
+      }
+    );
+
+    const list = [
+      {searchTerm: '', expectedQuery: ''},
+      {searchTerm: 'test', expectedQuery: 'test'},
+      {searchTerm: 'environment:production test', expectedQuery: 'test'},
+    ];
+
+    list.forEach(item => {
+      component.instance().handleSearch(item.searchTerm);
+      expect(browserHistory.push).toHaveBeenCalledWith(
+        expect.objectContaining({
+          query: {query: item.expectedQuery},
+        })
+      );
+    });
+  });
+});
diff --git a/tests/js/spec/views/groupDetails/groupEvents.spec.jsx b/tests/js/spec/views/groupDetails/projectGroupEvents.spec.jsx
similarity index 100%
rename from tests/js/spec/views/groupDetails/groupEvents.spec.jsx
rename to tests/js/spec/views/groupDetails/projectGroupEvents.spec.jsx
