commit 706bc9f9873887cdbdd219e0f3f99ba99b5d9273
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Oct 4 19:57:13 2015 -0700

    Convert admin stats page to React

diff --git a/src/sentry/static/sentry/app/components/flotChart.jsx b/src/sentry/static/sentry/app/components/flotChart.jsx
index a7c4f69da5..71d07341a2 100644
--- a/src/sentry/static/sentry/app/components/flotChart.jsx
+++ b/src/sentry/static/sentry/app/components/flotChart.jsx
@@ -137,7 +137,10 @@ var FlotChart = React.createClass({
 
   render() {
     return (
-      <figure className={this.props.className} ref="chartNode" />
+      <figure
+        className={this.props.className || 'chart'}
+        style={this.props.style}
+        ref="chartNode" />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/header/userNav.jsx b/src/sentry/static/sentry/app/components/header/userNav.jsx
index 47444ebfed..2ad249792a 100644
--- a/src/sentry/static/sentry/app/components/header/userNav.jsx
+++ b/src/sentry/static/sentry/app/components/header/userNav.jsx
@@ -29,7 +29,7 @@ var UserNav = React.createClass({
           title={title}>
         <MenuItem href={urlPrefix + '/account/settings/'}>Account</MenuItem>
         {user.isSuperuser &&
-          <MenuItem href={urlPrefix + '/manage/'}>Admin</MenuItem>
+          <MenuItem to="admin">Admin</MenuItem>
         }
         <MenuItem href={urlPrefix + '/auth/logout/'}>Sign out</MenuItem>
       </DropdownLink>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index ad5229ab81..473aed09ef 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -3,6 +3,8 @@ import Router from "react-router";
 var Route = Router.Route;
 var DefaultRoute = Router.DefaultRoute;
 
+import Admin from "./views/admin";
+import AdminOverview from "./views/adminOverview";
 import App from "./views/app";
 import GroupActivity from "./views/groupActivity";
 import GroupDetails from "./views/groupDetails";
@@ -32,6 +34,9 @@ import Stream from "./views/stream";
 
 var routes = (
   <Route name="app" path="/" handler={App}>
+    <Route name="admin" path="/manage/" handler={Admin}>
+      <DefaultRoute name="adminOverview" handler={AdminOverview} />
+    </Route>
     <Route path="/organizations/:orgId/" handler={OrganizationDetails}>
       <Route name="organizationStats" path="stats/" handler={OrganizationStats} />
     </Route>
diff --git a/src/sentry/static/sentry/app/views/admin/index.jsx b/src/sentry/static/sentry/app/views/admin/index.jsx
new file mode 100644
index 0000000000..0c182e6db1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/admin/index.jsx
@@ -0,0 +1,59 @@
+import DocumentTitle from "react-document-title";
+import React from "react";
+import Router from "react-router";
+
+import ConfigStore from "../../stores/configStore";
+import Footer from "../../components/footer";
+import Header from "../../components/header";
+import ListLink from "../../components/listLink";
+
+const Admin = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getTitle() {
+    return 'Sentry Admin';
+  },
+
+  render() {
+    let urlPrefix = ConfigStore.get('urlPrefix');
+
+    return (
+      <DocumentTitle title={this.getTitle()}>
+        <div className="app">
+          <Header />
+          <div className="container">
+            <div className="content">
+              <div className="row">
+                <div className="col-md-2">
+                  <h6 className="nav-header">System</h6>
+                  <ul className="nav nav-stacked">
+                    <ListLink to="adminOverview">Overview</ListLink>
+                    <li><a href={`${urlPrefix}/manage/queue/`}>Queue</a></li>
+                    <li><a href={`${urlPrefix}/manage/environment/`}>Environment</a></li>
+                    <li><a href={`${urlPrefix}/manage/packages/`}>Packages</a></li>
+                    <li><a href={`${urlPrefix}/manage/mail/`}>Mail</a></li>
+                  </ul>
+
+                  <h6 className="nav-header">Manage</h6>
+                  <ul className="nav nav-stacked">
+                    <li><a href={`${urlPrefix}/manage/teams/`}>Teams</a></li>
+                    <li><a href={`${urlPrefix}/manage/projects/`}>Projects</a></li>
+                    <li><a href={`${urlPrefix}/manage/users/`}>Users</a></li>
+                  </ul>
+                </div>
+                <div className="col-md-10">
+                  <Router.RouteHandler />
+                </div>
+              </div>
+            </div>
+          </div>
+          <Footer />
+        </div>
+      </DocumentTitle>
+    );
+  }
+});
+
+export default Admin;
diff --git a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
new file mode 100644
index 0000000000..d0297b8e52
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
@@ -0,0 +1,124 @@
+import React from "react";
+
+import api from "../../api";
+import FlotChart from "../../components/flotChart";
+import LoadingError from "../../components/loadingError";
+import LoadingIndicator from "../../components/loadingIndicator";
+
+const ApiChart = React.createClass({
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  getInitialState() {
+    return {
+      error: false,
+      loading: true,
+      rawData: {
+        "client-api.all-versions.responses.2xx": null,
+        "client-api.all-versions.responses.4xx": null,
+        "client-api.all-versions.responses.5xx": null
+      },
+    };
+  },
+
+  fetchData() {
+    let statNameList = [
+      "client-api.all-versions.responses.2xx",
+      "client-api.all-versions.responses.4xx",
+      "client-api.all-versions.responses.5xx"
+    ];
+
+    statNameList.forEach((statName) => {
+      api.request('/internal/stats/', {
+        method: "GET",
+        data: {
+          since: this.props.since,
+          resolution: '1h',
+          key: statName
+        },
+        success: (data) => {
+          this.state.rawData[statName] = data;
+          this.setState({
+            rawData: this.state.rawData,
+          }, this.requestFinished);
+        },
+        error: (data) => {
+          this.setState({
+            error: true
+          });
+        }
+      });
+    });
+  },
+
+  requestFinished() {
+    let {rawData} = this.state;
+    if (rawData['events.total'] && rawData['events.dropped']) {
+      this.processOrgData();
+    }
+    if (rawData['client-api.all-versions.responses.2xx'] && rawData['client-api.all-versions.responses.4xx'] && rawData['client-api.all-versions.responses.5xx']) {
+      this.setState({
+        loading: false
+      });
+    }
+  },
+
+  processRawSeries(series) {
+    return series.map((item) => {
+      return [item[0] * 1000, item[1]];
+    });
+  },
+
+  getChartPoints() {
+    let {rawData} = this.state;
+    return [
+      {
+        data: this.processRawSeries(rawData['client-api.all-versions.responses.4xx']),
+        color: 'rgb(86, 175, 232)',
+        shadowSize: 0,
+        label: '4xx',
+        stack: true,
+        lines: {
+          lineWidth: 2,
+          show: true,
+          fill: true
+        }
+      },
+      {
+        data: this.processRawSeries(rawData['client-api.all-versions.responses.5xx']),
+        color: 'rgb(244, 63, 32)',
+        shadowSize: 0,
+        label: '5xx',
+        stack: true,
+        lines: {
+          lineWidth: 2,
+          show: true,
+          fill: true
+        }
+      },
+      {
+        data: this.processRawSeries(rawData['client-api.all-versions.responses.2xx']),
+        label: '2xx',
+        color: 'rgb(78, 222, 73)',
+        shadowSize: 0,
+        stack: true,
+        lines: {
+          lineWidth: 2,
+          show: true,
+          fill: true
+        }
+      }
+    ];
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+    return <FlotChart style={{height: 250}} plotData={this.getChartPoints()} />;
+  }
+});
+
+export default ApiChart;
diff --git a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
new file mode 100644
index 0000000000..d72701525f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
@@ -0,0 +1,151 @@
+import jQuery from "jquery";
+import React from "react";
+
+import api from "../../api";
+import FlotChart from "../../components/flotChart";
+import LoadingError from "../../components/loadingError";
+import LoadingIndicator from "../../components/loadingIndicator";
+
+const EventChart = React.createClass({
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  getInitialState() {
+    return {
+      error: false,
+      loading: true,
+      rawData: {
+        "events.total": null,
+        "events.dropped": null,
+      },
+      stats: {received: [], rejected: []},
+      systemTotal: {received: 0, rejected: 0, accepted: 0}
+    };
+  },
+
+  fetchData() {
+    let statNameList = [
+      "events.total",
+      "events.dropped",
+    ];
+
+    statNameList.forEach((statName) => {
+      // query the organization stats via a separate call as its possible the project stats
+      // are too heavy
+      api.request('/internal/stats/', {
+        method: "GET",
+        data: {
+          since: this.props.since,
+          resolution: this.props.resolution,
+          key: statName
+        },
+        success: (data) => {
+          this.state.rawData[statName] = data;
+          this.setState({
+            rawData: this.state.rawData,
+          }, this.requestFinished);
+        },
+        error: (data) => {
+          this.setState({
+            error: true
+          });
+        }
+      });
+    });
+  },
+
+  requestFinished() {
+    let {rawData} = this.state;
+    if (rawData['events.total'] && rawData['events.dropped']) {
+      this.processOrgData();
+    }
+  },
+
+  processOrgData() {
+    var {rawData} = this.state;
+    var oReceived = 0;
+    var oRejected = 0;
+    var sReceived = {};
+    var sRejected = {};
+    var aReceived = [0, 0]; // received, points
+    jQuery.each(rawData['events.total'], function(idx, point){
+      let dReceived = point[1];
+      let dRejected = rawData['events.dropped'][idx][1];
+      let ts = point[0] * 1000;
+      if (sReceived[ts] === undefined) {
+        sReceived[ts] = dReceived;
+        sRejected[ts] = dRejected;
+      } else {
+        sReceived[ts] += dReceived;
+        sRejected[ts] += dRejected;
+      }
+      oReceived += dReceived;
+      oRejected += dRejected;
+      if (dReceived > 0) {
+        aReceived[0] += dReceived;
+        aReceived[1] += 1;
+      }
+    });
+    this.setState({
+      systemTotal: {
+        received: oReceived,
+        rejected: oRejected,
+        accepted: oReceived - oRejected,
+        avgRate: parseInt((aReceived[0] / aReceived[1]) / 60, 10)
+      },
+      stats: {
+        rejected: jQuery.map(sRejected, function(value, ts) {
+          return [[ts, value || null]];
+        }),
+        accepted: jQuery.map(sReceived, function(value, ts) {
+          // total number of events accepted (received - rejected)
+          return [[ts, value - sRejected[ts]]];
+        })
+      },
+      loading: false
+    });
+  },
+
+  getChartPoints() {
+    let {stats} = this.state;
+
+    return [
+      {
+        data: stats.accepted,
+        label: 'Accepted',
+        color: 'rgba(86, 175, 232, 1)',
+        shadowSize: 0,
+        stack: true,
+        lines: {
+          lineWidth: 2,
+          show: true,
+          fill: true
+        }
+      },
+      {
+        data: stats.rejected,
+        color: 'rgba(244, 63, 32, 1)',
+        shadowSize: 0,
+        label: 'Dropped',
+        stack: true,
+        lines: {
+          lineWidth: 2,
+          show: true,
+          fill: true
+        }
+      }
+    ];
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
+    return <FlotChart style={{height: 250}} plotData={this.getChartPoints()} />;
+  }
+});
+
+export default EventChart;
diff --git a/src/sentry/static/sentry/app/views/adminOverview/index.jsx b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
new file mode 100644
index 0000000000..86dc9ad9d2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
@@ -0,0 +1,50 @@
+import React from "react";
+
+import ApiChart from "./apiChart";
+import EventChart from "./eventChart";
+
+const AdminOverview = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getInitialState() {
+    return {
+      since: new Date().getTime() / 1000 - 3600 * 24 * 7,
+      resolution: '1h'
+    };
+  },
+
+  render() {
+    return (
+      <div>
+        <h3>System Overview</h3>
+
+        <div className="box">
+          <div className="box-header">
+            <h4>
+              Event Throughput
+              <span id="rate" className="pull-right"></span>
+            </h4>
+          </div>
+          <div className="box-content with-padding">
+            <EventChart since={this.state.since}
+                        resolution={this.state.resolution} />
+          </div>
+        </div>
+
+        <div className="box">
+          <div className="box-header">
+            <h4>API Responses</h4>
+          </div>
+          <div className="box-content with-padding">
+            <ApiChart since={this.state.since}
+                      resolution={this.state.resolution} />
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default AdminOverview;
diff --git a/src/sentry/templates/sentry/admin/stats.html b/src/sentry/templates/sentry/admin/stats.html
deleted file mode 100644
index a07a3cc27c..0000000000
--- a/src/sentry/templates/sentry/admin/stats.html
+++ /dev/null
@@ -1,209 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% block admin-nav-overview %} class="active"{% endblock %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Overview" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  <h3>{% trans "System Overview" %}</h3>
-
-  <div class="box">
-    <div class="box-header">
-      <h4>
-        Event Throughput
-        <span id="rate" class="pull-right"></span>
-      </h4>
-    </div>
-    <div class="box-content with-padding">
-      <div id="blk_chart" style="height:250px"></div>
-    </div>
-  </div>
-
-  <div class="box">
-    <div class="box-header">
-      <h4>API Responses</h4>
-    </div>
-    <div class="box-content with-padding">
-      <div id="blk_api_chart" style="height:250px"></div>
-    </div>
-  </div>
-
-  <script>
-  $(function(){
-    var $projectData = $('#project_data');
-    var rawData = {
-      "events.total": null,
-      "events.dropped": null,
-      "client-api.all-versions.responses.2xx": null,
-      "client-api.all-versions.responses.4xx": null,
-      "client-api.all-versions.responses.5xx": null
-    };
-    var statsEndpoint = '{{ URL_PREFIX }}/api/0/internal/stats/';
-    var stats = {received: [], rejected: []};
-    var systemTotal = {received: 0, rejected: 0, accepted: 0};
-
-    $.each(rawData, function(statName, _) {
-      // query the organization stats via a separate call as its possible the project stats
-      // are too heavy
-      $.ajax({
-        url: statsEndpoint,
-        type: 'get',
-        dataType: 'json',
-        data: {
-          since: new Date().getTime() / 1000 - 3600 * 24 * 7,
-          resolution: '1h',
-          key: statName
-        },
-        success: function(data){
-          rawData[statName] = data;
-          requestFinished();
-        },
-        error: function(data) {
-          $chart.html('<div class="error">There was an error loading statistics.</div>');
-        }
-      });
-    });
-
-    function requestFinished() {
-      if (rawData['events.total'] && rawData['events.dropped']) {
-        processOrgData();
-        renderOrgChart();
-      }
-      if (rawData['client-api.all-versions.responses.2xx'] && rawData['client-api.all-versions.responses.4xx'] && rawData['client-api.all-versions.responses.5xx']) {
-        renderApiChart();
-      }
-    }
-
-    function processRawSeries(series) {
-      var result = [];
-      var item;
-      for (var i = 0; i < series.length; i++) {
-        item = series[i];
-        result.push([item[0] * 1000, item[1]]);
-      }
-      return result;
-    }
-
-    function processOrgData() {
-      var oReceived = 0;
-      var oRejected = 0;
-      var sReceived = {};
-      var sRejected = {};
-      var aReceived = [0, 0]; // received, points
-      $.each(rawData['events.total'], function(idx, point){
-        var dReceived = point[1];
-        var dRejected = rawData['events.dropped'][idx][1];
-        var ts = point[0] * 1000;
-        if (sReceived[ts] === undefined) {
-          sReceived[ts] = dReceived;
-          sRejected[ts] = dRejected;
-        } else {
-          sReceived[ts] += dReceived;
-          sRejected[ts] += dRejected;
-        }
-        oReceived += dReceived;
-        oRejected += dRejected;
-        if (dReceived > 0) {
-          aReceived[0] += dReceived;
-          aReceived[1] += 1;
-        }
-      });
-      systemTotal.received = oReceived;
-      systemTotal.rejected = oRejected;
-      systemTotal.accepted = oReceived - oRejected;
-      systemTotal.avgRate = parseInt((aReceived[0] / aReceived[1]) / 60, 10);
-
-      stats.rejected = $.map(sRejected, function(value, ts) { return [[ts, value || null]]; });
-      stats.accepted = $.map(sReceived, function(value, ts) {
-        // total number of events accepted (received - rejected)
-        return [[ts, value - sRejected[ts]]];
-      });
-    }
-
-    function renderOrgChart() {
-      var points = [
-        {
-          data: stats.accepted,
-          label: 'Accepted',
-          color: 'rgba(86, 175, 232, 1)',
-          shadowSize: 0,
-          stack: true,
-          lines: {
-            lineWidth: 2,
-            show: true,
-            fill: true
-          }
-        },
-        {
-          data: stats.rejected,
-          color: 'rgba(244, 63, 32, 1)',
-          shadowSize: 0,
-          label: 'Dropped',
-          stack: true,
-          lines: {
-            lineWidth: 2,
-            show: true,
-            fill: true
-          }
-        }
-      ];
-
-      React.render(React.createFactory(Sentry.FlotChart)({
-         className: "chart",
-         plotData: points
-      }), document.getElementById('blk_chart'));
-
-      $('#rate').text(systemTotal.avgRate + ' avg EPM');
-    }
-
-    function renderApiChart() {
-      var points = [
-        {
-          data: processRawSeries(rawData['client-api.all-versions.responses.4xx']),
-          color: 'rgb(86, 175, 232)',
-          shadowSize: 0,
-          label: '4xx',
-          stack: true,
-          lines: {
-            lineWidth: 2,
-            show: true,
-            fill: true
-          }
-        },
-        {
-          data: processRawSeries(rawData['client-api.all-versions.responses.5xx']),
-          color: 'rgb(244, 63, 32)',
-          shadowSize: 0,
-          label: '5xx',
-          stack: true,
-          lines: {
-            lineWidth: 2,
-            show: true,
-            fill: true
-          }
-        },
-        {
-          data: processRawSeries(rawData['client-api.all-versions.responses.2xx']),
-          label: '2xx',
-          color: 'rgb(78, 222, 73)',
-          shadowSize: 0,
-          stack: true,
-          lines: {
-            lineWidth: 2,
-            show: true,
-            fill: true
-          }
-        }
-      ];
-
-      React.render(React.createFactory(Sentry.FlotChart)({
-         className: "chart",
-         plotData: points
-      }), document.getElementById('blk_api_chart'));
-    }
-  });
-  </script>
-{% endblock %}
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index ae380ac956..299dfb1dbe 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -7,9 +7,9 @@ sentry.web.frontend.admin
 """
 from __future__ import absolute_import, print_function
 
-import datetime
 import logging
 import pkg_resources
+import six
 import sys
 import uuid
 
@@ -20,11 +20,8 @@ from django.core.urlresolvers import reverse
 from django.db import transaction
 from django.db.models import Count
 from django.http import HttpResponseRedirect, HttpResponse
-from django.utils import timezone
 from django.views.decorators.csrf import csrf_protect
 
-import six
-
 from sentry.app import env
 from sentry.models import Team, Project, User
 from sentry.plugins import plugins
@@ -352,18 +349,3 @@ def status_mail(request):
         'EMAIL_USE_TLS': settings.EMAIL_USE_TLS,
         'SERVER_EMAIL': settings.SERVER_EMAIL,
     }, request)
-
-
-@requires_admin
-def overview(request):
-    new_projects = Project.objects.filter(
-        date_added__gte=timezone.now() - datetime.timedelta(hours=24),
-    ).count()
-    statistics = (
-        ('Projects', Project.objects.count()),
-        ('Projects (24h)', new_projects),
-    )
-
-    return render_to_response('sentry/admin/stats.html', {
-        'statistics': statistics,
-    }, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 70f13efa04..ba763c7003 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -172,7 +172,7 @@ urlpatterns += patterns(
     url(r'^account/settings/social/', include('social_auth.urls')),
 
     # Admin
-    url(r'^manage/$', admin.overview,
+    url(r'^manage/$', ReactPageView.as_view(),
         name='sentry-admin-overview'),
     url(r'^manage/queue/$', AdminQueueView.as_view(),
         name='sentry-admin-queue'),
