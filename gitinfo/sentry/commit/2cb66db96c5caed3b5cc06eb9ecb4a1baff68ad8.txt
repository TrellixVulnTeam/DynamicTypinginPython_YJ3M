commit 2cb66db96c5caed3b5cc06eb9ecb4a1baff68ad8
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 11 23:04:21 2014 -0800

    Add audit entries for major events

diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 5d298130c7..9432d87935 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -5,7 +5,9 @@ from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
 from sentry.api.serializers import serialize
-from sentry.models import Organization, Team
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Organization, Team
+)
 from sentry.permissions import can_create_teams
 
 
@@ -43,11 +45,22 @@ class OrganizationTeamsEndpoint(Endpoint):
 
         if serializer.is_valid():
             result = serializer.object
+
             team = Team.objects.create(
                 name=result['name'],
                 slug=result.get('slug'),
                 owner=result.get('owner') or organization.owner,
                 organization=organization,
             )
+
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=team.id,
+                event=AuditLogEntryEvent.TEAM_ADD,
+                data=team.get_audit_log_data(),
+            )
+
             return Response(serialize(team, request.user), status=201)
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 800a128b42..e2fe3f8e55 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -7,8 +7,11 @@ from sentry.api.base import Endpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import MEMBER_ADMIN
-from sentry.models import Project
+from sentry.constants import MEMBER_ADMIN, STATUS_HIDDEN
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Project
+)
+from sentry.tasks.deletion import delete_project
 
 
 class ProjectSerializer(serializers.ModelSerializer):
@@ -48,6 +51,15 @@ class ProjectDetailsEndpoint(Endpoint):
             if 'sentry:resolve_age' in options:
                 project.update_option('sentry:resolve_age', int(options['sentry:resolve_age']))
 
+            AuditLogEntry.objects.create(
+                organization=project.organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=project.id,
+                event=AuditLogEntryEvent.PROJECT_EDIT,
+                data=project.get_audit_log_data(),
+            )
+
             data = serialize(project, request.user)
             data['options'] = {
                 'sentry:origins': '\n'.join(project.get_option('sentry:origins', None) or []),
@@ -68,7 +80,17 @@ class ProjectDetailsEndpoint(Endpoint):
         if not (request.user.is_superuser or project.team.owner_id == request.user.id):
             return Response('{"error": "form"}', status=status.HTTP_403_FORBIDDEN)
 
-        # TODO(dcramer): this needs to push it into the queue
-        project.delete()
+        if project.status != STATUS_HIDDEN:
+            project.update(status=STATUS_HIDDEN)
+            delete_project.delay(object_id=project.id)
+
+            AuditLogEntry.objects.create(
+                organization=project.organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=project.id,
+                event=AuditLogEntryEvent.PROJECT_REMOVE,
+                data=project.get_audit_log_data(),
+            )
 
         return Response(status=204)
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index b7c261edb4..08d20106b7 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -8,7 +8,9 @@ from sentry.api.base import Endpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.models import OrganizationMemberType, Team, TeamStatus
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Team, TeamStatus
+)
 from sentry.tasks.deletion import delete_team
 
 
@@ -55,6 +57,16 @@ class TeamDetailsEndpoint(Endpoint):
 
         if serializer.is_valid():
             team = serializer.save()
+
+            AuditLogEntry.objects.create(
+                organization=team.organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=team.id,
+                event=AuditLogEntryEvent.TEAM_EDIT,
+                data=team.get_audit_log_data(),
+            )
+
             return Response(serialize(team, request.user))
 
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
@@ -75,4 +87,13 @@ class TeamDetailsEndpoint(Endpoint):
         kwargs = {'object_id': team.id}
         delete_team.apply_async(kwargs=kwargs, countdown=60 * 5)
 
+        AuditLogEntry.objects.create(
+            organization=team.organization,
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=team.id,
+            event=AuditLogEntryEvent.TEAM_REMOVE,
+            data=team.get_audit_log_data(),
+        )
+
         return Response(status=204)
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index fad90c699a..db92d96997 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -23,6 +23,19 @@ class AuditLogEntryEvent(object):
     MEMBER_EDIT = 4
     MEMBER_REMOVE = 5
 
+    ORG_ADD = 10
+    ORG_EDIT = 11
+
+    TEAM_ADD = 20
+    TEAM_EDIT = 21
+    TEAM_REMOVE = 22
+
+    PROJECT_ADD = 30
+    PROJECT_EDIT = 31
+    PROJECT_REMOVE = 32
+    PROJECT_SET_PUBLIC = 33
+    PROJECT_SET_PRIVATE = 34
+
 
 class AuditLogEntry(Model):
     organization = models.ForeignKey('sentry.Organization')
@@ -31,11 +44,24 @@ class AuditLogEntry(Model):
     target_user = models.ForeignKey('sentry.User', null=True, related_name='audit_targets')
     event = BoundedPositiveIntegerField(choices=(
         # We emulate github a bit with event naming
-        (AuditLogEntryEvent.MEMBER_INVITE, 'org.invite-member'),
-        (AuditLogEntryEvent.MEMBER_ADD, 'org.add-member'),
-        (AuditLogEntryEvent.MEMBER_ACCEPT, 'org.accept-invite'),
-        (AuditLogEntryEvent.MEMBER_REMOVE, 'org.rempoe-member'),
-        (AuditLogEntryEvent.MEMBER_EDIT, 'org.edit-member'),
+        (AuditLogEntryEvent.MEMBER_INVITE, 'member.invite'),
+        (AuditLogEntryEvent.MEMBER_ADD, 'member.add'),
+        (AuditLogEntryEvent.MEMBER_ACCEPT, 'member.accept-invite'),
+        (AuditLogEntryEvent.MEMBER_REMOVE, 'member.remove'),
+        (AuditLogEntryEvent.MEMBER_EDIT, 'member.edit'),
+
+        (AuditLogEntryEvent.TEAM_ADD, 'team.create'),
+        (AuditLogEntryEvent.TEAM_EDIT, 'team.edit'),
+        (AuditLogEntryEvent.TEAM_REMOVE, 'team.remove'),
+
+        (AuditLogEntryEvent.PROJECT_ADD, 'project.create'),
+        (AuditLogEntryEvent.PROJECT_EDIT, 'project.edit'),
+        (AuditLogEntryEvent.PROJECT_REMOVE, 'project.remove'),
+        (AuditLogEntryEvent.PROJECT_SET_PUBLIC, 'project.set-public'),
+        (AuditLogEntryEvent.PROJECT_SET_PRIVATE, 'project.set-private'),
+
+        (AuditLogEntryEvent.ORG_ADD, 'org.create'),
+        (AuditLogEntryEvent.ORG_EDIT, 'org.edit'),
     ))
     ip_address = models.GenericIPAddressField(null=True, unpack_ipv4=True)
     data = GzippedDictField()
@@ -49,12 +75,28 @@ class AuditLogEntry(Model):
 
     def get_note(self):
         if self.event == AuditLogEntryEvent.MEMBER_INVITE:
-            return 'invited %s' % (self.data['email'],)
+            return 'invited member %s' % (self.data['email'],)
         elif self.event == AuditLogEntryEvent.MEMBER_ADD:
-            return 'added %s' % (self.target_user.get_display_name(),)
+            return 'added member %s' % (self.target_user.get_display_name(),)
         elif self.event == AuditLogEntryEvent.MEMBER_ACCEPT:
             return 'accepted the membership invite'
         elif self.event == AuditLogEntryEvent.MEMBER_REMOVE:
-            return 'removed %s' % (self.data.get('email') or self.target_user.get_display_name(),)
+            return 'removed member %s' % (self.data.get('email') or self.target_user.get_display_name(),)
         elif self.event == AuditLogEntryEvent.MEMBER_EDIT:
-            return 'edited %s' % (self.data.get('email') or self.target_user.get_display_name(),)
+            return 'edited member %s' % (self.data.get('email') or self.target_user.get_display_name(),)
+
+        elif self.event == AuditLogEntryEvent.TEAM_ADD:
+            return 'created team %s' % (self.data['slug'],)
+        elif self.event == AuditLogEntryEvent.TEAM_EDIT:
+            return 'edited team %s' % (self.data['slug'],)
+        elif self.event == AuditLogEntryEvent.TEAM_REMOVE:
+            return 'removed team %s' % (self.data['slug'],)
+
+        elif self.event == AuditLogEntryEvent.PROJECT_ADD:
+            return 'created project %s' % (self.data['slug'],)
+        elif self.event == AuditLogEntryEvent.PROJECT_EDIT:
+            return 'edited project %s' % (self.data['slug'],)
+        elif self.event == AuditLogEntryEvent.PROJECT_REMOVE:
+            return 'removed project %s' % (self.data['slug'],)
+
+        return ''
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index 584b7a52af..ecbef457af 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -100,3 +100,10 @@ class Organization(Model):
         if not self.slug:
             slugify_instance(self, self.name, reserved=RESERVED_ORGANIZATION_SLUGS)
         super(Organization, self).save(*args, **kwargs)
+
+    def get_audit_log_data(self):
+        return {
+            'slug': self.slug,
+            'name': self.name,
+            'status': self.status,
+        }
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index b235b9ed1b..8ab26af5dd 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -196,3 +196,12 @@ class Project(Model):
             queryset = queryset.filter(type__lte=access)
 
         return queryset.exists()
+
+    def get_audit_log_data(self):
+        return {
+            'slug': self.slug,
+            'name': self.name,
+            'status': self.status,
+            'public': self.public,
+            'platform': self.platform,
+        }
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 0e7f2e3b87..9a8cd76419 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -167,3 +167,10 @@ class Team(Model):
             queryset = queryset.filter(type__lte=access)
 
         return queryset.exists()
+
+    def get_audit_log_data(self):
+        return {
+            'slug': self.slug,
+            'name': self.name,
+            'status': self.status,
+        }
diff --git a/src/sentry/web/frontend/create_organization.py b/src/sentry/web/frontend/create_organization.py
index f7a3df9a28..299972d4b8 100644
--- a/src/sentry/web/frontend/create_organization.py
+++ b/src/sentry/web/frontend/create_organization.py
@@ -5,7 +5,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import Organization, Team
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Organization
+)
 from sentry.permissions import can_create_organizations
 from sentry.web.frontend.base import BaseView
 
@@ -35,16 +37,18 @@ class CreateOrganizationView(BaseView):
             org.owner = request.user
             org.save()
 
-            # create a default team for this org
-            team = Team.objects.create(
-                name=org.name,
+            AuditLogEntry.objects.create(
                 organization=org,
-                owner=org.owner,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=org.id,
+                event=AuditLogEntryEvent.ORG_ADD,
+                data=org.get_audit_log_data(),
             )
 
-            url = reverse('sentry-create-project', args=[org.slug])
+            url = reverse('sentry-create-team', args=[org.slug])
 
-            return HttpResponseRedirect('%s?team=%s' % (url, team.slug))
+            return HttpResponseRedirect(url)
 
         context = {
             'form': form,
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index 2de81f15fd..57e9e74f24 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -5,7 +5,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import Project, OrganizationMemberType, Team
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Project, OrganizationMemberType, Team
+)
 from sentry.web.frontend.base import OrganizationView
 from sentry.utils.samples import create_sample_event
 
@@ -68,6 +70,15 @@ class CreateProjectView(OrganizationView):
             project.organization = organization
             project.save()
 
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=project.id,
+                event=AuditLogEntryEvent.PROJECT_ADD,
+                data=project.get_audit_log_data(),
+            )
+
             create_sample_event(project)
 
             if project.platform not in (None, 'other'):
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index 5c135486be..2b30733217 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -5,7 +5,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationMemberType, Project, Team
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Project, Team
+)
 from sentry.permissions import can_create_teams, Permissions
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.frontend.generic import missing_perm
@@ -54,11 +56,29 @@ class CreateTeamView(OrganizationView):
             team.owner = organization.owner
             team.save()
 
+            AuditLogEntry.objects.create(
+                organization=team.organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=team.id,
+                event=AuditLogEntryEvent.TEAM_ADD,
+                data=team.get_audit_log_data(),
+            )
+
             project = project_form.save(commit=False)
             project.team = team
             project.organization = organization
             project.save()
 
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=project.id,
+                event=AuditLogEntryEvent.PROJECT_ADD,
+                data=project.get_audit_log_data(),
+            )
+
             if project.platform not in (None, 'other'):
                 url = reverse('sentry-docs-client', args=[organization.slug, project.slug, project.platform])
             else:
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index 579cb98542..c67af112f4 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -6,7 +6,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import Organization, OrganizationMemberType
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationMemberType
+)
 from sentry.web.frontend.base import OrganizationView
 
 
@@ -30,6 +32,15 @@ class OrganizationSettingsView(OrganizationView):
         if form.is_valid():
             form.save()
 
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=organization.id,
+                event=AuditLogEntryEvent.ORG_EDIT,
+                data=organization.get_audit_log_data(),
+            )
+
             messages.add_message(request, messages.SUCCESS,
                 _('Changes to your organization were saved.'))
 
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 2f4bf8c2ad..a8321804ef 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -8,7 +8,9 @@ from django.http import HttpResponseRedirect
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationMemberType, Project, Team
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Project, Team
+)
 from sentry.permissions import can_remove_project, can_set_public_projects
 from sentry.plugins import plugins
 from sentry.web.forms.fields import RangeField
@@ -176,6 +178,15 @@ class ProjectSettingsView(ProjectView):
             project.update_option('sentry:origins', form.cleaned_data.get('origins') or [])
             project.update_option('sentry:resolve_age', form.cleaned_data.get('resolve_age'))
 
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=project.id,
+                event=AuditLogEntryEvent.PROJECT_EDIT,
+                data=project.get_audit_log_data(),
+            )
+
             messages.add_message(
                 request, messages.SUCCESS,
                 _('Changes to your project were saved.'))
diff --git a/src/sentry/web/frontend/remove_project.py b/src/sentry/web/frontend/remove_project.py
index 33dff00c69..da3954886f 100644
--- a/src/sentry/web/frontend/remove_project.py
+++ b/src/sentry/web/frontend/remove_project.py
@@ -7,7 +7,9 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import STATUS_HIDDEN
-from sentry.models import OrganizationMemberType
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType
+)
 from sentry.permissions import can_remove_project
 from sentry.tasks.deletion import delete_project
 from sentry.web.frontend.base import ProjectView
@@ -49,6 +51,15 @@ class RemoveProjectView(ProjectView):
                 project.update(status=STATUS_HIDDEN)
                 delete_project.delay(object_id=project.id)
 
+                AuditLogEntry.objects.create(
+                    organization=organization,
+                    actor=request.user,
+                    ip_address=request.META['REMOTE_ADDR'],
+                    target_object=project.id,
+                    event=AuditLogEntryEvent.PROJECT_REMOVE,
+                    data=project.get_audit_log_data(),
+                )
+
             messages.add_message(
                 request, messages.SUCCESS,
                 _('Deletion has been queued and will happen automatically.'))
diff --git a/src/sentry/web/frontend/remove_team.py b/src/sentry/web/frontend/remove_team.py
index 0f595b54ed..9b3db3cb53 100644
--- a/src/sentry/web/frontend/remove_team.py
+++ b/src/sentry/web/frontend/remove_team.py
@@ -6,7 +6,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationMemberType, TeamStatus
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, TeamStatus
+)
 from sentry.permissions import can_remove_team
 from sentry.tasks.deletion import delete_team
 from sentry.web.frontend.base import TeamView
@@ -25,16 +27,7 @@ class RemoveTeamView(TeamView):
             return RemoveTeamForm(request.POST)
         return RemoveTeamForm(None)
 
-    def get(self, request, organization, team):
-        form = self.get_form(request)
-
-        context = {
-            'form': form,
-        }
-
-        return self.respond('sentry/teams/remove.html', context)
-
-    def post(self, request, organization, team):
+    def handle(self, request, organization, team):
         if not can_remove_team(request.user, team):
             return HttpResponseRedirect(reverse('sentry'))
 
@@ -43,7 +36,18 @@ class RemoveTeamView(TeamView):
         if form.is_valid():
             team.update(status=TeamStatus.PENDING_DELETION)
 
-            delete_team.delay(object_id=team.id)
+            # we delay the task for 5 minutes so we can implement an undo
+            kwargs = {'object_id': team.id}
+            delete_team.apply_async(kwargs=kwargs, countdown=60 * 5)
+
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=team.id,
+                event=AuditLogEntryEvent.TEAM_REMOVE,
+                data=team.get_audit_log_data(),
+            )
 
             messages.add_message(
                 request, messages.SUCCESS,
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 270b127601..7c10a0138f 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -6,7 +6,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import Team, OrganizationMemberType
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Team, OrganizationMemberType
+)
 from sentry.permissions import can_remove_team
 from sentry.plugins import plugins
 from sentry.web.frontend.base import TeamView
@@ -53,6 +55,15 @@ class TeamSettingsView(TeamView):
         if form.is_valid():
             team = form.save()
 
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=team.id,
+                event=AuditLogEntryEvent.TEAM_EDIT,
+                data=team.get_audit_log_data(),
+            )
+
             messages.add_message(request, messages.SUCCESS,
                 _('Changes to your team were saved.'))
 
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 9c614378cc..a6c1113b94 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -1,4 +1,10 @@
+from __future__ import absolute_import
+
+import mock
+
 from django.core.urlresolvers import reverse
+
+from sentry.constants import STATUS_HIDDEN
 from sentry.models import Project
 from sentry.testutils import APITestCase
 
@@ -29,7 +35,8 @@ class ProjectUpdateTest(APITestCase):
 
 
 class ProjectDeleteTest(APITestCase):
-    def test_simple(self):
+    @mock.patch('sentry.api.endpoints.project_details.delete_project')
+    def test_simple(self, mock_delete_project):
         project = self.create_project()
 
         self.login_as(user=self.user)
@@ -40,9 +47,14 @@ class ProjectDeleteTest(APITestCase):
             response = self.client.delete(url)
 
         assert response.status_code == 204
-        assert not Project.objects.filter(id=project.id).exists()
 
-    def test_internal_project(self):
+        mock_delete_project.delay.assert_called_once_with(
+            object_id=project.id)
+
+        assert Project.objects.get(id=project.id).status == STATUS_HIDDEN
+
+    @mock.patch('sentry.api.endpoints.project_details.delete_project')
+    def test_internal_project(self, mock_delete_project):
         project = self.create_project()
 
         self.login_as(user=self.user)
@@ -52,4 +64,6 @@ class ProjectDeleteTest(APITestCase):
         with self.settings(SENTRY_PROJECT=project.id):
             response = self.client.delete(url)
 
+        assert not mock_delete_project.delay.mock_calls
+
         assert response.status_code == 403
diff --git a/tests/sentry/web/frontend/test_create_organization.py b/tests/sentry/web/frontend/test_create_organization.py
index 787b6f6741..bcac89974f 100644
--- a/tests/sentry/web/frontend/test_create_organization.py
+++ b/tests/sentry/web/frontend/test_create_organization.py
@@ -30,10 +30,5 @@ class CreateOrganizationTest(TestCase):
 
         assert org.owner == self.user
 
-        team = org.team_set.get()
-
-        assert team.name == 'bar'
-        assert team.owner == org.owner
-
-        redirect_uri = reverse('sentry-create-project', args=[org.slug])
-        assert resp['Location'] == 'http://testserver%s?team=%s' % (redirect_uri, team.slug)
+        redirect_uri = reverse('sentry-create-team', args=[org.slug])
+        assert resp['Location'] == 'http://testserver%s' % (redirect_uri,)
