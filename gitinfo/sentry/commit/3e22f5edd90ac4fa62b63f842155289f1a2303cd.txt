commit 3e22f5edd90ac4fa62b63f842155289f1a2303cd
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Mon May 23 16:10:07 2016 -0700

    Log failures to `process_pending` task. (#3305)
    
    These tasks can run long, and this prevents them from being logged as errors.
    
    This also adds a `UnableToAcquireLock` exception so that the specific error can be caught and handled, as well as tests for the exception.
    
    Fixes SENTRY-1AQ.

diff --git a/src/sentry/tasks/process_buffer.py b/src/sentry/tasks/process_buffer.py
index 12d5b8b2a9..eb02506e6f 100644
--- a/src/sentry/tasks/process_buffer.py
+++ b/src/sentry/tasks/process_buffer.py
@@ -8,7 +8,13 @@ sentry.tasks.process_buffer
 
 from __future__ import absolute_import
 
+import logging
+
 from sentry.tasks.base import instrumented_task
+from sentry.utils.locking import UnableToAcquireLock
+
+
+logger = logging.getLogger(__name__)
 
 
 @instrumented_task(
@@ -19,8 +25,11 @@ def process_pending():
     """
     from sentry import app
     lock = app.locks.get('buffer:process_pending', duration=60)
-    with lock.acquire():
-        app.buffer.process_pending()
+    try:
+        with lock.acquire():
+            app.buffer.process_pending()
+    except UnableToAcquireLock as error:
+        logger.warning('Failed to process pending buffers due to error: %s', error)
 
 
 @instrumented_task(
diff --git a/src/sentry/utils/locking/__init__.py b/src/sentry/utils/locking/__init__.py
index e69de29bb2..6c1f05051c 100644
--- a/src/sentry/utils/locking/__init__.py
+++ b/src/sentry/utils/locking/__init__.py
@@ -0,0 +1,2 @@
+class UnableToAcquireLock(Exception):
+    """Exception raised when a lock cannot be acquired."""
diff --git a/src/sentry/utils/locking/backends/redis.py b/src/sentry/utils/locking/backends/redis.py
index 40741ebfb7..b335dddbb9 100644
--- a/src/sentry/utils/locking/backends/redis.py
+++ b/src/sentry/utils/locking/backends/redis.py
@@ -42,8 +42,9 @@ class RedisLockBackend(LockBackend):
 
     def acquire(self, key, duration, routing_key=None):
         client = self.get_client(key, routing_key)
-        if client.set(self.prefix_key(key), self.uuid, ex=duration, nx=True) is not True:
-            raise Exception('Could not acquire lock!')
+        full_key = self.prefix_key(key)
+        if client.set(full_key, self.uuid, ex=duration, nx=True) is not True:
+            raise Exception('Could not set key: {!r}'.format(full_key))
 
     def release(self, key, routing_key=None):
         client = self.get_client(key, routing_key)
diff --git a/src/sentry/utils/locking/lock.py b/src/sentry/utils/locking/lock.py
index 1868100970..3b8cdd13b0 100644
--- a/src/sentry/utils/locking/lock.py
+++ b/src/sentry/utils/locking/lock.py
@@ -1,6 +1,9 @@
 import logging
 from contextlib import contextmanager
 
+from sentry.utils.locking import UnableToAcquireLock
+
+
 logger = logging.getLogger(__name__)
 
 
@@ -20,9 +23,13 @@ class Lock(object):
 
         If the lock is successfully acquired, this method returns a context
         manager that will automatically release the lock when exited. If the
-        lock cannot be acquired, an exception will be raised.
+        lock cannot be acquired, an ``UnableToAcquireLock`` error will be
+        raised.
         """
-        self.backend.acquire(self.key, self.duration, self.routing_key)
+        try:
+            self.backend.acquire(self.key, self.duration, self.routing_key)
+        except Exception as error:
+            raise UnableToAcquireLock('Unable to acquire {!r} due to error: {}'.format(self, error))
 
         @contextmanager
         def releaser():
diff --git a/tests/sentry/utils/locking/test_lock.py b/tests/sentry/utils/locking/test_lock.py
index b4f9bddf75..468e67637c 100644
--- a/tests/sentry/utils/locking/test_lock.py
+++ b/tests/sentry/utils/locking/test_lock.py
@@ -1,6 +1,8 @@
 import mock
+import pytest
 
 from sentry.testutils import TestCase
+from sentry.utils.locking import UnableToAcquireLock
 from sentry.utils.locking.backends import LockBackend
 from sentry.utils.locking.lock import Lock
 
@@ -27,6 +29,10 @@ class LockTestCase(TestCase):
             routing_key,
         )
 
+        backend.acquire.side_effect = Exception('Boom!')
+        with pytest.raises(UnableToAcquireLock):
+            lock.acquire()
+
     def test_context_manager_interface(self):
         backend = mock.Mock(spec=LockBackend)
         key = 'lock'
