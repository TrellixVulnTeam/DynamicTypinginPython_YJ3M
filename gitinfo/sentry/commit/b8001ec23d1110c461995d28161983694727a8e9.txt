commit b8001ec23d1110c461995d28161983694727a8e9
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Feb 27 16:42:03 2018 -0800

    feat(rules): Support keyed grouping of rule futures

diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index fae86d7ea4..d703d1d84b 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -86,8 +86,10 @@ class SlackNotifyServiceAction(EventAction):
             if not resp.get('ok'):
                 self.logger.info('rule.fail.slack_post', extra={'error': resp.get('error')})
 
+        key = u'slack:{}:{}'.format(integration_id, channel)
+
         metrics.incr('notifications.sent', instance='slack.notification')
-        yield self.future(send_notification)
+        yield self.future(send_notification, key=key)
 
     def render_label(self):
         try:
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index f7ca8dbc5d..193d5b1cf0 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -46,7 +46,10 @@ from django.utils.safestring import mark_safe
 
 from sentry.utils.html import escape
 
-CallbackFuture = namedtuple('CallbackFuture', ['callback', 'kwargs'])
+# Encapsulates a reference to the callback, including arguments. The `key`
+# attribute may be specifically used to key the callbacks when they are
+# collated during rule processing.
+CallbackFuture = namedtuple('CallbackFuture', ['callback', 'kwargs', 'key'])
 
 
 class RuleDescriptor(type):
@@ -105,9 +108,10 @@ class RuleBase(object):
 
         return form.is_valid()
 
-    def future(self, callback, **kwargs):
+    def future(self, callback, key=None, **kwargs):
         return CallbackFuture(
             callback=callback,
+            key=key,
             kwargs=kwargs,
         )
 
diff --git a/src/sentry/rules/processor.py b/src/sentry/rules/processor.py
index 53e763f63b..ba70be8ac1 100644
--- a/src/sentry/rules/processor.py
+++ b/src/sentry/rules/processor.py
@@ -1,8 +1,9 @@
 from __future__ import absolute_import
 
 import logging
+import six
 
-from collections import defaultdict, namedtuple
+from collections import namedtuple
 from datetime import timedelta
 from django.utils import timezone
 
@@ -45,7 +46,7 @@ class RuleProcessor(object):
         self.is_regression = is_regression
         self.is_new_group_environment = is_new_group_environment
 
-        self.futures_by_cb = defaultdict(list)
+        self.grouped_futures = {}
 
     def get_rules(self):
         return Rule.get_for_project(self.project.id)
@@ -138,11 +139,16 @@ class RuleProcessor(object):
                 continue
 
             for future in results:
-                self.futures_by_cb[future.callback
-                                   ].append(RuleFuture(rule=rule, kwargs=future.kwargs))
+                key = future.key is not None or future.callback
+                rule_future = RuleFuture(rule=rule, kwargs=future.kwargs)
+
+                if key not in self.grouped_futures:
+                    self.grouped_futures[key] = (future.callback, [rule_future])
+                else:
+                    self.grouped_futures[key][1].append(rule_future)
 
     def apply(self):
-        self.futures_by_cb = defaultdict(list)
+        self.grouped_futures.clear()
         for rule in self.get_rules():
             self.apply_rule(rule)
-        return list(self.futures_by_cb.items())
+        return six.itervalues(self.grouped_futures)
