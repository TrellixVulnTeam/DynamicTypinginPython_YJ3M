commit caffa655a5211f397a91ed64c5c5bd3c7fd2b596
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Thu Jul 13 15:08:59 2017 -0700

    Remove project from serializer and check for project on `GroupTombstoneDetailsEndpoint` before deleting

diff --git a/src/sentry/api/endpoints/group_tombstone_details.py b/src/sentry/api/endpoints/group_tombstone_details.py
index e7d7e1fb7e..fa365b514c 100644
--- a/src/sentry/api/endpoints/group_tombstone_details.py
+++ b/src/sentry/api/endpoints/group_tombstone_details.py
@@ -21,10 +21,11 @@ class GroupTombstoneDetailsEndpoint(ProjectEndpoint):
 
         :pparam string organization_slug: the slug of the organization.
         :pparam string project_slug: the slug of the project to which this tombstone belongs.
-        :pparam string issue_id: the ID of the tombstone to remove.
+        :pparam string tombstone_id: the ID of the tombstone to remove.
         :auth: required
         """
         GroupHash.objects.filter(
+            project_id=project.id,
             group_tombstone=tombstone_id,
         ).update(
             # will allow new events to be captured
@@ -32,7 +33,10 @@ class GroupTombstoneDetailsEndpoint(ProjectEndpoint):
         )
 
         try:
-            GroupTombstone.objects.get(id=tombstone_id).delete()
+            GroupTombstone.objects.get(
+                project_id=project.id,
+                id=tombstone_id
+            ).delete()
         except GroupTombstone.DoesNotExist:
             pass
 
diff --git a/src/sentry/api/serializers/models/grouptombstone.py b/src/sentry/api/serializers/models/grouptombstone.py
index 75ec25937c..c6735e530e 100644
--- a/src/sentry/api/serializers/models/grouptombstone.py
+++ b/src/sentry/api/serializers/models/grouptombstone.py
@@ -14,11 +14,6 @@ from sentry.models import (
 class GroupTombstoneSerializer(Serializer):
 
     def get_attrs(self, item_list, user):
-        project_set = set(i.project for i in item_list)
-        projects = {
-            p.id: d for p, d in izip(project_set, serialize(project_set, user))
-        }
-
         user_list = list(User.objects.filter(id__in=[item.actor_id for item in item_list]))
         users = {
             u.id: d for u, d in izip(user_list, serialize(user_list, user))
@@ -27,7 +22,6 @@ class GroupTombstoneSerializer(Serializer):
         attrs = {}
         for item in item_list:
             attrs[item] = {
-                'project': projects.get(item.project_id, {}),
                 'user': users.get(item.actor_id, {}),
             }
         return attrs
@@ -35,7 +29,6 @@ class GroupTombstoneSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
             'id': six.text_type(obj.id),
-            'project': attrs['project'],
             'level': LOG_LEVELS.get(obj.level, 'unknown'),
             'message': obj.message,
             'culprit': obj.culprit,
diff --git a/tests/sentry/api/endpoints/test_group_tombstone_details.py b/tests/sentry/api/endpoints/test_group_tombstone_details.py
index 1c0dcf87cc..fcb5a6aae1 100644
--- a/tests/sentry/api/endpoints/test_group_tombstone_details.py
+++ b/tests/sentry/api/endpoints/test_group_tombstone_details.py
@@ -51,3 +51,56 @@ class GroupTombstoneDetailsTest(APITestCase):
 
         assert response.status_code == 204, response
         assert not GroupHash.objects.filter(group_tombstone=tombstone).exists()
+
+    def test_dont_delete_from_other_proj(self):
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            owner=self.user,
+            name='Rowdy Tiger'
+        )
+        self.team = self.create_team(
+            organization=self.org,
+            name='Mariachi Band'
+        )
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Bengal',
+        )
+
+        self.other_project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Snake',
+        )
+
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        tombstone = GroupTombstone.objects.create(
+            project_id=group.project_id,
+            level=group.level,
+            message=group.message,
+            culprit=group.culprit,
+            data=group.data,
+            previous_group_id=group.id,
+        )
+        GroupHash.objects.create(
+            project=group.project,
+            hash='x' * 32,
+            group=group,
+            group_tombstone=tombstone
+        )
+        assert GroupHash.objects.filter(group_tombstone=tombstone).exists()
+        path = reverse('sentry-api-0-group-tombstone-details',
+                       kwargs={
+                           'organization_slug': self.org.slug,
+                           'project_slug': self.other_project.slug,
+                           'tombstone_id': tombstone.id,
+                       }
+                       )
+        response = self.client.delete(path)
+
+        assert response.status_code == 204, response
+        assert GroupHash.objects.filter(group_tombstone=tombstone).exists()
+        assert GroupTombstone.objects.filter(project_id=self.project.id, id=tombstone.id).exists()
diff --git a/tests/sentry/api/serializers/test_group_tombstone.py b/tests/sentry/api/serializers/test_group_tombstone.py
index 088607ce68..11e2db21f1 100644
--- a/tests/sentry/api/serializers/test_group_tombstone.py
+++ b/tests/sentry/api/serializers/test_group_tombstone.py
@@ -38,5 +38,4 @@ class GroupTombstoneSerializerTest(TestCase):
 
         assert result['message'] == group.message
         assert result['culprit'] == group.culprit
-        assert result['project']['name'] == 'CoolProj'
         assert result['actor']['email'] == 'foo@example.com'
