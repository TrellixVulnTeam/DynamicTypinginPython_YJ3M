commit 6f869586e4d00cae664472371c752d6082876fb0
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 9 15:24:30 2016 -0700

    Various improvements to exec (#3894)
    
    * Various improvements to exec
    
    - Handle __future__ imports
    - Fix errors from invalid references (e.g. via sentry exec bin/load-mocks)
    - Dont include configure() handler when already present in code
    
    @getsentry/infrastructure

diff --git a/src/sentry/runner/commands/exec.py b/src/sentry/runner/commands/exec.py
index 1f9bbb209c..c874880a9d 100644
--- a/src/sentry/runner/commands/exec.py
+++ b/src/sentry/runner/commands/exec.py
@@ -13,15 +13,14 @@ import click
 
 # If this changes, make sure to also update in the `__doc__`
 SCRIPT_TEMPLATE = u"""\
-from sentry.runner import configure; configure()
-from django.conf import settings
-from sentry.models import *
+%(header)s
 
 try:
-    %(script)s
+    %(body)s
 except Exception:
     import traceback
     traceback.print_exc()
+    raise ScriptError('Failed to execute script {!r}'.format(%(filename)r))
 """
 
 
@@ -76,9 +75,40 @@ def exec_(c, file):
     else:
         file = '<string>'
 
+    header = []
+
+    if 'from __future__' in c:
+        body = []
+        state = 0
+
+        for line in c.splitlines():
+            if line.startswith('from __future__'):
+                state = 1
+            elif line and not line.startswith('#', '"', "'") and state == 1:
+                state = 2
+            if state == 2:
+                body.append(line)
+            else:
+                header.append(line)
+        body = '\n'.join(body)
+    else:
+        header = []
+        body = c
+
+    if 'from sentry.runner import configure' not in c:
+        header.extend([
+            'from sentry.runner import configure; configure()',
+            'from django.conf import settings',
+            'from sentry.models import *',
+        ])
+
+    header.append('class ScriptError(Exception): pass')
+
     script = SCRIPT_TEMPLATE % {
         # Need to reindent the code to fit inside the `try` block
-        'script': c.replace('\n', '\n' + (' ' * 4)),
+        'body': body.replace('\n', '\n' + (' ' * 4)),
+        'header': '\n'.join(header),
+        'filename': file,
     }
 
     # Chop off `exec` from `sys.argv` so scripts can handle
@@ -89,7 +119,8 @@ def exec_(c, file):
     g = {
         # Inject `__name__ = '__main__' for scripts
         '__name__': '__main__',
+        '__file__': '<script>',
     }
-    # locals context
-    l = {}
-    six.exec_(compile(script, file, 'exec'), g, l)
+    # we use globals as locals due to:
+    # http://stackoverflow.com/a/2906198/154651
+    six.exec_(compile(script, file, 'exec'), g, g)
