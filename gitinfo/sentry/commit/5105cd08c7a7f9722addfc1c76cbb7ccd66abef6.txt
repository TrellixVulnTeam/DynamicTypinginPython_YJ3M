commit 5105cd08c7a7f9722addfc1c76cbb7ccd66abef6
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 14 15:50:06 2018 -0700

    feat(ui): Add UI to resend email verification (#7597)
    
    * fix(ui): Fix "set as primary" button alignment
    * feat(api): Add endpoint to send verification emails
    * feat(ui): Add UI to resend email verification

diff --git a/src/sentry/api/endpoints/user_emails.py b/src/sentry/api/endpoints/user_emails.py
index 7e900f52ee..d8ffd586b8 100644
--- a/src/sentry/api/endpoints/user_emails.py
+++ b/src/sentry/api/endpoints/user_emails.py
@@ -177,7 +177,7 @@ class UserEmailsEndpoint(UserEndpoint):
 
         if not new_email_obj.is_verified:
             return self.respond(
-                {'email': 'You must verified your email address before marking it as primary.'}, status=400)
+                {'email': 'You must verify your email address before marking it as primary.'}, status=400)
 
         # update notification settings for those set to primary email with new primary email
         alert_email = UserOption.objects.get_value(user=user, key='alert_email')
diff --git a/src/sentry/api/endpoints/user_emails_confirm.py b/src/sentry/api/endpoints/user_emails_confirm.py
new file mode 100644
index 0000000000..67e02b079f
--- /dev/null
+++ b/src/sentry/api/endpoints/user_emails_confirm.py
@@ -0,0 +1,81 @@
+from __future__ import absolute_import
+
+import logging
+
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.bases.user import UserEndpoint
+from sentry.api.decorators import sudo_required
+from sentry.models import UserEmail
+
+logger = logging.getLogger('sentry.accounts')
+
+
+class InvalidEmailResponse(Response):
+    def __init__(self):
+        super(InvalidEmailResponse, self).__init__(
+            {'detail': 'Invalid email', 'email': 'Invalid email'},
+            status=status.HTTP_400_BAD_REQUEST
+        )
+
+
+class InvalidEmailError(Exception):
+    pass
+
+
+class DuplicateEmailError(Exception):
+    pass
+
+
+class EmailSerializer(serializers.Serializer):
+    email = serializers.EmailField(required=True)
+
+
+class UserEmailsConfirmEndpoint(UserEndpoint):
+    @sudo_required
+    def post(self, request, user):
+        """
+        Sends a confirmation email to user
+        ``````````````````````````````````
+
+        :auth required:
+        """
+
+        from sentry.app import ratelimiter
+
+        if ratelimiter.is_limited(
+            'auth:confirm-email:{}'.format(user.id),
+            limit=10,
+            window=60,  # 10 per minute should be enough for anyone
+        ):
+            return self.respond({'detail': 'You have made too many email confirmation requests. Please try again later.', },
+                                status=status.HTTP_429_TOO_MANY_REQUESTS)
+
+        serializer = EmailSerializer(data=request.DATA)
+
+        if not serializer.is_valid():
+            return InvalidEmailResponse()
+
+        # If email is specified then try to only send one confirmation email
+        try:
+            email_to_send = UserEmail.objects.get(
+                user=user, email=serializer.object['email'].lower().strip())
+        except UserEmail.DoesNotExist:
+            return InvalidEmailResponse()
+        else:
+            if email_to_send.is_verified:
+                return self.respond({'detail': 'Email is already verified'},
+                                    status=status.HTTP_400_BAD_REQUEST)
+
+            user.send_confirm_email_singular(email_to_send)
+
+            logger.info(
+                'user.email.start_confirm',
+                extra={
+                    'user_id': user.id,
+                    'ip_address': request.META['REMOTE_ADDR'],
+                    'email': email_to_send,
+                }
+            )
+            return self.respond(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index ca79cd1258..70bd02064d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -146,6 +146,7 @@ from .endpoints.user_identity_details import UserIdentityDetailsEndpoint
 from .endpoints.user_index import UserIndexEndpoint
 from .endpoints.user_details import UserDetailsEndpoint
 from .endpoints.user_emails import UserEmailsEndpoint
+from .endpoints.user_emails_confirm import UserEmailsConfirmEndpoint
 from .endpoints.user_organizations import UserOrganizationsEndpoint
 from .endpoints.user_notification_details import UserNotificationDetailsEndpoint
 from .endpoints.user_password import UserPasswordEndpoint
@@ -241,6 +242,11 @@ urlpatterns = patterns(
         UserEmailsEndpoint.as_view(),
         name='sentry-api-0-user-emails'
     ),
+    url(
+        r'^users/(?P<user_id>[^\/]+)/emails/confirm/$',
+        UserEmailsConfirmEndpoint.as_view(),
+        name='sentry-api-0-user-emails-confirm'
+    ),
     url(
         r'^users/(?P<user_id>[^\/]+)/identities/(?P<identity_id>[^\/]+)/$',
         UserIdentityDetailsEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
index 414cad2b77..48df8ab03f 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
@@ -3,6 +3,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {addErrorMessage} from '../../../actionCreators/indicator';
 import {t} from '../../../locale';
 import AlertLink from '../../../components/alertLink';
 import AsyncView from '../../asyncView';
@@ -13,8 +14,8 @@ import Panel from '../components/panel';
 import PanelBody from '../components/panelBody';
 import PanelHeader from '../components/panelHeader';
 import PanelItem from '../components/panelItem';
-import Tag from '../components/tag';
 import SettingsPageHeader from '../components/settingsPageHeader';
+import Tag from '../components/tag';
 import accountEmailsFields from '../../../data/forms/accountEmails';
 
 const ENDPOINT = '/users/me/emails/';
@@ -34,6 +35,7 @@ class EmailRow extends React.Component {
     isPrimary: PropTypes.bool,
     hideRemove: PropTypes.bool,
     onRemove: PropTypes.func,
+    onVerify: PropTypes.func,
     onSetPrimary: PropTypes.func,
   };
 
@@ -45,6 +47,10 @@ class EmailRow extends React.Component {
     this.props.onRemove(this.props.email, e);
   };
 
+  handleVerify = e => {
+    this.props.onVerify(this.props.email, e);
+  };
+
   render() {
     let {email, isPrimary, isVerified, hideRemove} = this.props;
 
@@ -55,22 +61,27 @@ class EmailRow extends React.Component {
           {!isVerified && <Tag priority="warning">{t('Unverified')}</Tag>}
           {isPrimary && <Tag priority="success">{t('Primary')}</Tag>}
         </Flex>
-        {!isPrimary && (
-          <Button size="small" onClick={this.handleSetPrimary}>
-            {t('Set as primary')}
-          </Button>
-        )}
-        {!isPrimary &&
-          !hideRemove && (
-            <Flex>
-              <Box ml={1}>
-                <RemoveButton
-                  onClick={this.handleRemove}
-                  hidden={isPrimary || hideRemove}
-                />
-              </Box>
-            </Flex>
+        <Flex>
+          {!isPrimary &&
+            isVerified && (
+              <Button size="small" onClick={this.handleSetPrimary}>
+                {t('Set as primary')}
+              </Button>
+            )}
+          {!isVerified && (
+            <Button size="small" onClick={this.handleVerify}>
+              {t('Resend verification')}
+            </Button>
+          )}
+          {!hideRemove && (
+            <Box ml={1}>
+              <RemoveButton
+                onClick={this.handleRemove}
+                hidden={isPrimary || hideRemove}
+              />
+            </Box>
           )}
+        </Flex>
       </PanelItem>
     );
   }
@@ -90,29 +101,47 @@ class AccountEmails extends AsyncView {
     this.remountComponent();
   };
 
-  handleSetPrimary = email => {
+  handleError = err => {
+    this.remountComponent();
+
+    if (err && err.responseJSON && err.responseJSON.email) {
+      addErrorMessage(err.responseJSON.email);
+    }
+  };
+
+  createApiCall = (endpoint, requestParams) => {
     this.setState({loading: true, emails: []}, () => {
       this.api
-        .requestPromise(ENDPOINT, {
-          method: 'PUT',
-          data: {
-            email,
-          },
-        })
-        .then(this.remountComponent.bind(this));
+        .requestPromise(endpoint, requestParams)
+        .then(this.remountComponent.bind(this))
+        .catch(this.handleError);
+    });
+  };
+
+  handleSetPrimary = email => {
+    this.createApiCall(ENDPOINT, {
+      method: 'PUT',
+      data: {
+        email,
+      },
     });
   };
 
   handleRemove = email => {
-    this.setState({loading: true, emails: []}, () => {
-      this.api
-        .requestPromise(ENDPOINT, {
-          method: 'DELETE',
-          data: {
-            email,
-          },
-        })
-        .then(this.remountComponent.bind(this));
+    this.createApiCall(ENDPOINT, {
+      method: 'DELETE',
+      data: {
+        email,
+      },
+    });
+  };
+
+  handleVerify = email => {
+    this.createApiCall(`${ENDPOINT}confirm/`, {
+      method: 'POST',
+      data: {
+        email,
+      },
     });
   };
 
@@ -137,6 +166,7 @@ class AccountEmails extends AsyncView {
                     key={emailObj.email}
                     onSetPrimary={this.handleSetPrimary}
                     onRemove={this.handleRemove}
+                    onVerify={this.handleVerify}
                     {...emailObj}
                   />
                 );
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
index 306ee88f31..09d225b899 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 
-import SettingsLayout from '../settingsLayout';
 import AccountSettingsNavigation from './accountSettingsNavigation';
+import SettingsLayout from '../settingsLayout';
 
 class AccountSettingsLayout extends React.Component {
   render() {
diff --git a/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
index 1beaf4367b..5bd1e61113 100644
--- a/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
@@ -30,6 +30,7 @@ exports[`AccountEmails renders with emails 1`] = `
           key="secondary1@example.com"
           onRemove={[Function]}
           onSetPrimary={[Function]}
+          onVerify={[Function]}
         />
         <EmailRow
           email="secondary2@example.com"
@@ -38,6 +39,7 @@ exports[`AccountEmails renders with emails 1`] = `
           key="secondary2@example.com"
           onRemove={[Function]}
           onSetPrimary={[Function]}
+          onVerify={[Function]}
         />
       </PanelBody>
     </Panel>
diff --git a/tests/js/spec/views/accountEmails.spec.jsx b/tests/js/spec/views/accountEmails.spec.jsx
index cb471bcac0..f8f5ffb39b 100644
--- a/tests/js/spec/views/accountEmails.spec.jsx
+++ b/tests/js/spec/views/accountEmails.spec.jsx
@@ -43,7 +43,7 @@ describe('AccountEmails', function() {
 
     // The first Button should be delete button for first secondary email (NOT primary)
     wrapper
-      .find('Button')
+      .find('RemoveButton')
       .at(1)
       .simulate('click');
 
@@ -76,7 +76,7 @@ describe('AccountEmails', function() {
 
     // The first Button should be delete button for first secondary email (NOT primary)
     wrapper
-      .find('Button')
+      .find('Button[children="Set as primary"]')
       .first()
       .simulate('click');
 
@@ -91,6 +91,35 @@ describe('AccountEmails', function() {
     );
   });
 
+  it('can resend verification email', function() {
+    let mock = Client.addMockResponse({
+      url: `${ENDPOINT}confirm/`,
+      method: 'POST',
+      statusCode: 200,
+    });
+
+    let wrapper = mount(
+      <ThemeProvider theme={theme}>
+        <AccountEmails />
+      </ThemeProvider>,
+      TestStubs.routerContext()
+    );
+
+    expect(mock).not.toHaveBeenCalled();
+
+    wrapper.find('Button[children="Resend verification"]').simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      `${ENDPOINT}confirm/`,
+      expect.objectContaining({
+        method: 'POST',
+        data: {
+          email: 'secondary2@example.com',
+        },
+      })
+    );
+  });
+
   it('can add a secondary email', function() {
     let mock = Client.addMockResponse({
       url: ENDPOINT,
diff --git a/tests/sentry/api/endpoints/test_user_emails_confirm.py b/tests/sentry/api/endpoints/test_user_emails_confirm.py
new file mode 100644
index 0000000000..98e6ba62fe
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_emails_confirm.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+import mock
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import UserEmail
+from sentry.testutils import APITestCase
+
+
+class UserEmailsConfirmTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(email='foo@example.com')
+        self.login_as(user=self.user)
+
+    @mock.patch('sentry.models.User.send_confirm_email_singular')
+    def test_can_confirm(self, send_confirm_email):
+        email = UserEmail.objects.create(email='bar@example.com', is_verified=False, user=self.user)
+        email.save()
+        self.path = reverse('sentry-api-0-user-emails-confirm', kwargs={'user_id': self.user.id})
+        resp = self.client.post(
+            self.path, {'email': 'bar@example.com'},
+        )
+        assert resp.status_code == 204
+        send_confirm_email.assert_called_once_with(UserEmail.objects.get(email='bar@example.com'))
+
+    @mock.patch('sentry.models.User.send_confirm_email_singular')
+    def test_cant_confirm_verified_email(self, send_confirm_email):
+        email = UserEmail.objects.create(email='bar@example.com', is_verified=True, user=self.user)
+        email.save()
+        self.path = reverse('sentry-api-0-user-emails-confirm', kwargs={'user_id': self.user.id})
+        resp = self.client.post(
+            self.path, {'email': 'bar@example.com'},
+        )
+        assert resp.status_code == 400
+        assert send_confirm_email.call_count == 0
+
+    @mock.patch('sentry.models.User.send_confirm_email_singular')
+    def test_validate_email(self, send_confirm_email):
+        self.path = reverse('sentry-api-0-user-emails-confirm', kwargs={'user_id': self.user.id})
+        resp = self.client.post(
+            self.path, {'email': ''},
+        )
+        assert resp.status_code == 400
+        assert send_confirm_email.call_count == 0
