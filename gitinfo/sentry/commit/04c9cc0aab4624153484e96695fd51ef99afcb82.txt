commit 04c9cc0aab4624153484e96695fd51ef99afcb82
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Dec 4 13:41:24 2019 -0800

    feat(identity): Add newstyle Google IdentityProvider (#15925)

diff --git a/src/sentry/identity/__init__.py b/src/sentry/identity/__init__.py
index f23389788e..27c50aaab1 100644
--- a/src/sentry/identity/__init__.py
+++ b/src/sentry/identity/__init__.py
@@ -11,6 +11,7 @@ from .vsts import *  # NOQA
 from .vsts_extension import *  # NOQA
 from .bitbucket import *  # NOQA
 from .gitlab import *  # NOQA
+from .google import *  # NOQA
 
 default_manager = IdentityManager()
 all = default_manager.all
@@ -28,3 +29,4 @@ register(VSTSIdentityProvider)  # NOQA
 register(VstsExtensionIdentityProvider)  # NOQA
 register(BitbucketIdentityProvider)  # NOQA
 register(GitlabIdentityProvider)  # NOQA
+register(GoogleIdentityProvider)  # NOQA
diff --git a/src/sentry/identity/base.py b/src/sentry/identity/base.py
index 05b03efd59..b20998ad79 100644
--- a/src/sentry/identity/base.py
+++ b/src/sentry/identity/base.py
@@ -1,25 +1,10 @@
 from __future__ import absolute_import, print_function
 
 import logging
-from collections import namedtuple
 
 from sentry.pipeline import PipelineProvider
 
 
-class MigratingIdentityId(namedtuple("MigratingIdentityId", ["id", "legacy_id"])):
-    """
-    MigratingIdentityId may be used in the ``id`` field of an identity
-    dictionary to facilitate migrating user identities from one identifying id
-    to another.
-    """
-
-    __slots__ = ()
-
-    def __unicode__(self):
-        # Default to id when coercing for query lookup
-        return self.id
-
-
 class Provider(PipelineProvider):
     """
     A provider indicates how identity authenticate should happen for a given service.
diff --git a/src/sentry/identity/google/__init__.py b/src/sentry/identity/google/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/identity/google/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/identity/google/provider.py b/src/sentry/identity/google/provider.py
new file mode 100644
index 0000000000..62ee09c1dd
--- /dev/null
+++ b/src/sentry/identity/google/provider.py
@@ -0,0 +1,58 @@
+from __future__ import absolute_import
+
+from sentry import options
+from sentry.identity.oauth2 import OAuth2Provider
+from sentry.auth.exceptions import IdentityNotValid
+from sentry.utils import json
+from sentry.utils.signing import urlsafe_b64decode
+from sentry.auth.provider import MigratingIdentityId
+
+
+class GoogleIdentityProvider(OAuth2Provider):
+    key = "google"
+    name = "Google"
+
+    oauth_access_token_url = "https://www.googleapis.com/oauth2/v4/token"
+    oauth_authorize_url = "https://accounts.google.com/o/oauth2/auth"
+
+    oauth_scopes = ("email",)
+
+    def get_oauth_client_id(self):
+        return options.get("auth-google.client-id")
+
+    def get_oauth_client_secret(self):
+        return options.get("auth-google.client-secret")
+
+    def build_identity(self, state):
+        data = state["data"]
+
+        try:
+            id_token = data["id_token"]
+        except KeyError:
+            raise IdentityNotValid(u"Missing id_token in OAuth response: %s" % data)
+
+        try:
+            _, payload, _ = map(urlsafe_b64decode, id_token.split(".", 2))
+        except Exception as exc:
+            raise IdentityNotValid(u"Unable to decode id_token: %s" % exc)
+
+        try:
+            user_data = json.loads(payload)
+        except ValueError as exc:
+            raise IdentityNotValid(u"Unable to decode id_token payload: %s" % exc)
+
+        # XXX(epurkhiser): This is carryover from the AuthProvider version of
+        # google identity. Because we will have code that handles interop
+        # between newstyle generic Identity, and oldstyle AuthProviders, we
+        # have to keep the MigratingIdentityId here.
+        user_id = MigratingIdentityId(id=user_data["sub"], legacy_id=user_data["email"])
+
+        return {
+            "type": "google",
+            "id": user_id,
+            "email": user_data["email"],
+            "email_verified": user_data["email_verified"],
+            "name": user_data["email"],
+            "scopes": [],  # Google apps do not have user scopes
+            "data": self.get_oauth_data(data),
+        }
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index d29c8eca35..b610c75acc 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -107,10 +107,9 @@ class IntegrationPipeline(Pipeline):
             except IntegrityError:
                 # If the external_id is already used for a different user or
                 # the user already has a different external_id remove those
-                # identities and recreate it, except in the case of GitHub
-                # where we need to be more careful because users may be using
-                # those identities to log in.
-                if idp.type in ("github", "vsts"):
+                # identities and recreate it, except in the case of Identities
+                # being used for login.
+                if idp.type in ("github", "vsts", "google"):
                     try:
                         other_identity = Identity.objects.get(
                             idp=idp, external_id=identity["external_id"]
@@ -123,7 +122,7 @@ class IntegrationPipeline(Pipeline):
                         # The external_id is linked to a different user. If that user doesn't
                         # have a password, we don't delete the link as it may lock them out.
                         if not other_identity.user.has_usable_password():
-                            proper_name = "GitHub" if idp.type == "github" else "Azure DevOps"
+                            proper_name = idp.get_provider().name
                             return self._dialog_response(
                                 {
                                     "error": _(
diff --git a/src/sentry/models/identity.py b/src/sentry/models/identity.py
index 856e71c126..ae154e9188 100644
--- a/src/sentry/models/identity.py
+++ b/src/sentry/models/identity.py
@@ -44,6 +44,11 @@ class IdentityProvider(Model):
         db_table = "sentry_identityprovider"
         unique_together = (("type", "external_id"),)
 
+    def get_provider(self):
+        from sentry.identity import get
+
+        return get(self.type)
+
 
 class Identity(Model):
     """
diff --git a/src/sentry/static/sentry/app/views/auth/login.jsx b/src/sentry/static/sentry/app/views/auth/login.jsx
index 5525f5ce4d..e578aec4dc 100644
--- a/src/sentry/static/sentry/app/views/auth/login.jsx
+++ b/src/sentry/static/sentry/app/views/auth/login.jsx
@@ -45,11 +45,12 @@ class Login extends React.Component {
     try {
       const response = await api.requestPromise('/auth/config/');
 
-      const {vsts_login_link, github_login_link, ...config} = response;
+      const {vsts_login_link, github_login_link, google_login_link, ...config} = response;
       const authConfig = {
         ...config,
         vstsLoginLink: vsts_login_link,
         githubLoginLink: github_login_link,
+        googleLoginLink: google_login_link,
       };
 
       this.setState({authConfig});
@@ -61,8 +62,8 @@ class Login extends React.Component {
   };
 
   get hasAuthProviders() {
-    const {githubLoginLink, vstsLoginLink} = this.state.authConfig;
-    return githubLoginLink || vstsLoginLink;
+    const {githubLoginLink, googleLoginLink, vstsLoginLink} = this.state.authConfig;
+    return githubLoginLink || vstsLoginLink || googleLoginLink;
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/auth/loginForm.jsx b/src/sentry/static/sentry/app/views/auth/loginForm.jsx
index aaf1700972..a57ed3f1a1 100644
--- a/src/sentry/static/sentry/app/views/auth/loginForm.jsx
+++ b/src/sentry/static/sentry/app/views/auth/loginForm.jsx
@@ -16,9 +16,14 @@ import space from 'app/styles/space';
 
 // TODO(epurkhiser): The abstraction here would be much nicer if we just
 // exposed a configuration object telling us what auth providers there are.
-const LoginProviders = ({vstsLoginLink, githubLoginLink}) => (
+const LoginProviders = ({vstsLoginLink, githubLoginLink, googleLoginLink}) => (
   <ProviderWrapper>
     <ProviderHeading>{t('External Account Login')}</ProviderHeading>
+    {googleLoginLink && (
+      <Button align="left" size="small" icon="icon-google" href={googleLoginLink}>
+        {t('Sign in with Google')}
+      </Button>
+    )}
     {githubLoginLink && (
       <Button align="left" size="small" icon="icon-github" href={githubLoginLink}>
         {t('Sign in with GitHub')}
@@ -35,6 +40,7 @@ const LoginProviders = ({vstsLoginLink, githubLoginLink}) => (
 LoginProviders.propTypes = {
   githubLoginLink: PropTypes.string,
   vstsLoginLink: PropTypes.string,
+  googleLoginLink: PropTypes.string,
 };
 
 class LoginForm extends React.Component {
diff --git a/src/sentry/templates/sentry/login.html b/src/sentry/templates/sentry/login.html
index af1659c973..c54ac62b90 100644
--- a/src/sentry/templates/sentry/login.html
+++ b/src/sentry/templates/sentry/login.html
@@ -47,8 +47,16 @@
             </div>
           </form>
         </div>
-        {% if github_login_link or vsts_login_link %}
+        {% if github_login_link or vsts_login_link or google_login_link %}
           <div class="auth-provider-column">
+            {% if google_login_link %}
+              <p>
+                <a class="btn btn-default btn-login-google" href="{{ google_login_link }}" style="display: block">
+                  <span class="provider-logo google"></span> Sign in with Google
+                </a>
+              </p>
+            {% endif %}
+
             {% if github_login_link %}
               <p>
                 <a class="btn btn-default btn-login-github" href="{{ github_login_link }}" style="display: block">
