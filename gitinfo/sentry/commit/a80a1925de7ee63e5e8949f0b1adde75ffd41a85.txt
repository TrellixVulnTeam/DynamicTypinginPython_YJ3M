commit a80a1925de7ee63e5e8949f0b1adde75ffd41a85
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 12 19:02:41 2015 -0700

    The Great Role Refactor
    
    This adds fours roles to replace the previous matrix of possible roles, as well as makes them customizable for installs:
    
    **Owner**
    Full scope access to the entire organization and all teams.
    
    **Manager**
    Access to all teams and the ability to manager members (except owner).
    
    **Admin**
    Can add/remove teams and projects. Cannot remove teams unless they are already a member.
    
    **Member**
    Can perform general actions on events and view most data.
    
    Additionally this changes how Teams work so that by default you are not
    a member of any team unless you choose to be. This means owners are no
    longer implicitly a member of new teams.
    
    The following additional changes are part of this:
    
    - Removal of @has_access
    - Added ``Organization``.default_role
    - Deprecated (migrated) ``AuthProvider.default_role``
    - Add configurable roles via ``SENTRY_ROLES`` and ``sentry.roles``
    - Add configurable scopes via ``SENTRY_SCOPES``
    - All team membership is now opt-in
    - ``OrganizationMemberType`` was removed
    - ``OrganizationMember.type`` is no longer used anywhere
    - ``MEMBER_*`` constants have been removed
    
    Fixes GH-2158, GH-1893

diff --git a/bin/load-mocks b/bin/load-mocks
index 2adf448ced..282bfba705 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -12,11 +12,11 @@ from hashlib import md5
 from pytz import utc
 from random import randint
 
+from sentry import roles
 from sentry.app import tsdb, buffer
 from sentry.models import (
     Activity, File, GroupMeta, Organization, OrganizationAccessRequest,
-    OrganizationMember, OrganizationMemberType, Project, Release, ReleaseFile,
-    Team, User, UserReport
+    OrganizationMember, Project, Release, ReleaseFile, Team, User, UserReport
 )
 from sentry.utils.samples import create_sample_event
 
@@ -135,21 +135,16 @@ def main(num_events=1):
     OrganizationMember.objects.get_or_create(
         user=user,
         organization=org,
-        defaults={
-            'type': OrganizationMemberType.OWNER,
-            'has_global_access': True,
-        }
+        role=roles.get_top_dog().id,
     )
 
     dummy_member, _ = OrganizationMember.objects.get_or_create(
         user=dummy_user,
         organization=org,
         defaults={
-            'has_global_access': False,
+            'role': roles.get_default().id,
         }
     )
-    if dummy_member.has_global_access:
-        dummy_member.update(has_global_access=False)
 
     for team_name, project_names in mocks:
         print('> Mocking team {}'.format(team_name))
diff --git a/docs/faq.rst b/docs/faq.rst
index 9ad9b9d1d6..23781cea00 100644
--- a/docs/faq.rst
+++ b/docs/faq.rst
@@ -55,24 +55,10 @@ and users?
             OrganizationmemberType
         )
 
-        user = User()
-        user.username = 'admin'
-        user.email = 'admin@localhost'
-        user.is_superuser = True
-        user.set_password('admin')
-        user.save()
-
         organization = Organization()
         organization.name = 'MyOrg'
         organization.save()
 
-        OrganizationMember.objects.create(
-            organization=organization,
-            user=user,
-            type=OrganizationMemberType.OWNER,
-            has_global_access=True,
-        )
-
         team = Team()
         team.name = 'Sentry'
         team.organization = organization
@@ -84,5 +70,23 @@ and users?
         project.organization = organization
         project.save()
 
+        user = User()
+        user.username = 'admin'
+        user.email = 'admin@localhost'
+        user.is_superuser = True
+        user.set_password('admin')
+        user.save()
+
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            user=user,
+            role='owner',
+        )
+
+        OrganizationMemberTeam.objects.create(
+            organizationmember=member,
+            team=team,
+        )
+
         key = ProjectKey.objects.filter(project=project)[0]
         print 'SENTRY_DSN = "%s"' % (key.get_dsn(),)
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index c80257fb3f..05af6c40c4 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -23,11 +23,10 @@ class ProjectPermission(ScopedPermission):
 
         request.access = access.from_user(request.user, project.organization)
 
-        if not request.access.has_team(project.team):
-            return False
-
-        allowed_scopes = set(self.scope_map.get(request.method, []))
-        return any(request.access.has_scope(s) for s in allowed_scopes)
+        for scope in self.scope_map.get(request.method, []):
+            if request.access.has_team_scope(project.team, scope):
+                return True
+        return False
 
 
 class ProjectEventPermission(ProjectPermission):
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index d1afc4f052..515fcfb969 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -23,11 +23,8 @@ class TeamPermission(ScopedPermission):
 
         request.access = access.from_user(request.user, team.organization)
 
-        if not request.access.has_team(team):
-            return False
-
         allowed_scopes = set(self.scope_map.get(request.method, []))
-        return any(request.access.has_scope(s) for s in allowed_scopes)
+        return any(request.access.has_team_scope(team, s) for s in allowed_scopes)
 
 
 class TeamEndpoint(Endpoint):
diff --git a/src/sentry/api/endpoints/organization_access_request_details.py b/src/sentry/api/endpoints/organization_access_request_details.py
index 89e1ad91d8..315aa178e5 100644
--- a/src/sentry/api/endpoints/organization_access_request_details.py
+++ b/src/sentry/api/endpoints/organization_access_request_details.py
@@ -40,7 +40,7 @@ class OrganizationAccessRequestDetailsEndpoint(OrganizationEndpoint):
         if is_approved is None:
             return Response(status=400)
 
-        if not access_request.member.has_global_access:
+        if is_approved:
             affected, _ = OrganizationMemberTeam.objects.create_or_update(
                 organizationmember=access_request.member,
                 team=access_request.team,
@@ -48,7 +48,7 @@ class OrganizationAccessRequestDetailsEndpoint(OrganizationEndpoint):
                     'is_active': is_approved,
                 }
             )
-            if affected and is_approved:
+            if affected:
                 omt = OrganizationMemberTeam.objects.get(
                     organizationmember=access_request.member,
                     team=access_request.team,
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 153cc47ab7..0c96b7fe81 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -3,11 +3,12 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
+from sentry import roles
 from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.serializers import serialize
 from sentry.models import (
-    AuditLogEntryEvent, Organization, OrganizationMember, OrganizationMemberType
+    AuditLogEntryEvent, Organization, OrganizationMember
 )
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -85,8 +86,7 @@ class OrganizationIndexEndpoint(Endpoint):
             OrganizationMember.objects.create(
                 user=request.user,
                 organization=org,
-                type=OrganizationMemberType.OWNER,
-                has_global_access=True,
+                role=roles.get_top_dog().id,
             )
 
             self.create_audit_entry(
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index fb354f4971..1d33679528 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -4,13 +4,13 @@ from django.db import transaction
 from rest_framework import serializers
 from rest_framework.response import Response
 
+from sentry import roles
 from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationPermission
 )
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import (
-    AuditLogEntryEvent, AuthIdentity, AuthProvider, OrganizationMember,
-    OrganizationMemberType
+    AuditLogEntryEvent, AuthIdentity, AuthProvider, OrganizationMember
 )
 
 ERR_NO_AUTH = 'You cannot remove this member with an unauthenticated API request.'
@@ -28,7 +28,7 @@ class OrganizationMemberSerializer(serializers.Serializer):
     reinvite = serializers.BooleanField()
 
 
-class RelaxedOrganizationPermission(OrganizationPermission):
+class RelaxedMemberPermission(OrganizationPermission):
     scope_map = {
         'GET': ['member:read', 'member:write', 'member:delete'],
         'POST': ['member:write', 'member:delete'],
@@ -41,7 +41,7 @@ class RelaxedOrganizationPermission(OrganizationPermission):
 
 
 class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
-    permission_classes = [RelaxedOrganizationPermission]
+    permission_classes = [RelaxedMemberPermission]
 
     def _get_member(self, request, organization, member_id):
         if member_id == 'me':
@@ -57,13 +57,12 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         return queryset.select_related('user').get()
 
     def _is_only_owner(self, member):
-        if member.type != OrganizationMemberType.OWNER:
+        if member.role != roles.get_top_dog().id:
             return False
 
         queryset = OrganizationMember.objects.filter(
             organization=member.organization_id,
-            type=OrganizationMemberType.OWNER,
-            has_global_access=True,
+            role=roles.get_top_dog().id,
             user__isnull=False,
         ).exclude(id=member.id)
         if queryset.exists():
@@ -99,29 +98,26 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         return Response(status=204)
 
     def delete(self, request, organization, member_id):
-        if request.user.is_superuser:
-            authorizing_access = OrganizationMemberType.OWNER
-        elif request.user.is_authenticated():
+        try:
+            om = self._get_member(request, organization, member_id)
+        except OrganizationMember.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        if request.user.is_authenticated() and not request.user.is_superuser:
             try:
-                authorizing_access = OrganizationMember.objects.get(
+                acting_member = OrganizationMember.objects.get(
                     organization=organization,
                     user=request.user,
-                    has_global_access=True,
-                ).type
+                )
             except OrganizationMember.DoesNotExist:
                 return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
-        elif request.access.has_scope('member:delete'):
-            authorizing_access = OrganizationMemberType.OWNER
-        else:
-            return Response({'detail': ERR_INSUFFICIENT_SCOPE}, status=400)
-
-        try:
-            om = self._get_member(request, organization, member_id)
-        except OrganizationMember.DoesNotExist:
-            raise ResourceDoesNotExist
+            else:
+                if not acting_member.can_manage_member(om):
+                    return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
 
-        if om.type < authorizing_access:
-            return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
+        # TODO(dcramer): do we even need this check?
+        elif not request.access.has_scope('member:delete'):
+            return Response({'detail': ERR_INSUFFICIENT_SCOPE}, status=400)
 
         if self._is_only_owner(om):
             return Response({'detail': ERR_ONLY_OWNER}, status=403)
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 436b791425..6b9647fd5d 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -90,44 +90,31 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         except Team.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if not om.has_global_access:
-            try:
-                omt = OrganizationMemberTeam.objects.get(
-                    team=team,
-                    organizationmember=om,
-                )
-            except OrganizationMemberTeam.DoesNotExist:
-                # TODO(dcramer): this should create a pending request and
-                # return a 202
-                if not organization.flags.allow_joinleave:
-                    omt, created = OrganizationAccessRequest.objects.get_or_create(
-                        team=team,
-                        member=om,
-                    )
-                    if created:
-                        omt.send_request_email()
-                    return Response(status=202)
-
-                omt = OrganizationMemberTeam(
+        try:
+            omt = OrganizationMemberTeam.objects.get(
+                team=team,
+                organizationmember=om,
+            )
+        except OrganizationMemberTeam.DoesNotExist:
+            if not (request.access.has_scope('org:write') or organization.flags.allow_joinleave):
+                omt, created = OrganizationAccessRequest.objects.get_or_create(
                     team=team,
-                    organizationmember=om,
-                    is_active=False,
+                    member=om,
                 )
-
-            if omt.is_active:
-                return Response(status=204)
+                if created:
+                    omt.send_request_email()
+                return Response(status=202)
+
+            omt = OrganizationMemberTeam.objects.create(
+                team=team,
+                organizationmember=om,
+                is_active=True,
+            )
         else:
-            try:
-                omt = OrganizationMemberTeam.objects.get(
-                    team=team,
-                    organizationmember=om,
-                )
-            except OrganizationMemberTeam.DoesNotExist:
-                # if the relationship doesnt exist, they're already a member
+            if omt.is_active:
                 return Response(status=204)
-
-        omt.is_active = True
-        omt.save()
+            omt.is_active = True
+            omt.save()
 
         self.create_audit_entry(
             request=request,
@@ -163,29 +150,15 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         except Team.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if not om.has_global_access:
-            try:
-                omt = OrganizationMemberTeam.objects.get(
-                    team=team,
-                    organizationmember=om,
-                )
-            except OrganizationMemberTeam.DoesNotExist:
-                # if the relationship doesnt exist, they're already a member
-                return Response(serialize(
-                    team, request.user, TeamWithProjectsSerializer()), status=200)
-        else:
-            try:
-                omt = OrganizationMemberTeam.objects.get(
-                    team=team,
-                    organizationmember=om,
-                    is_active=True,
-                )
-            except OrganizationMemberTeam.DoesNotExist:
-                omt = OrganizationMemberTeam(
-                    team=team,
-                    organizationmember=om,
-                    is_active=True,
-                )
+        try:
+            omt = OrganizationMemberTeam.objects.get(
+                team=team,
+                organizationmember=om,
+            )
+        except OrganizationMemberTeam.DoesNotExist:
+            # if the relationship doesnt exist, they're already a member
+            return Response(serialize(
+                team, request.user, TeamWithProjectsSerializer()), status=200)
 
         if omt.is_active:
             omt.is_active = False
diff --git a/src/sentry/api/endpoints/project_member_index.py b/src/sentry/api/endpoints/project_member_index.py
index 0e1aacc3cb..a0b666af4c 100644
--- a/src/sentry/api/endpoints/project_member_index.py
+++ b/src/sentry/api/endpoints/project_member_index.py
@@ -1,21 +1,21 @@
 from __future__ import absolute_import
 
-from django.db.models import Q
 from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import User
+from sentry.models import OrganizationMember, User
 
 
 class ProjectMemberIndexEndpoint(ProjectEndpoint):
     def get(self, request, project):
         member_list = sorted(set(User.objects.filter(
-            sentry_orgmember_set__organization=project.organization,
             is_active=True,
-        ).filter(
-            Q(sentry_orgmember_set__teams=project.team) |
-            Q(sentry_orgmember_set__has_global_access=True)
+            sentry_orgmember_set__organization=project.organization,
+            sentry_orgmember_set__id__in=OrganizationMember.objects.filter(
+                organizationmemberteam__is_active=True,
+                organizationmemberteam__team=project.team,
+            ).values('id')
         ).distinct()[:1000]), key=lambda x: x.email)
 
         member_list = serialize(member_list, request.user)
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index 3fb577755c..4c626dfe15 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -10,7 +10,8 @@ class OrganizationMemberSerializer(Serializer):
         d = {
             'id': str(obj.id),
             'email': obj.get_email(),
-            'roleName': obj.get_type_display(),
+            'role': obj.role,
+            'roleName': obj.get_role_display(),
             'pending': obj.is_pending,
             'flags': {
                 'sso:linked': bool(getattr(obj.flags, 'sso:linked')),
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index 3673c9bb1b..11b5b5a576 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -1,33 +1,14 @@
 from __future__ import absolute_import
 
-__all__ = ['from_user', 'from_member', 'DEFAULT', 'SCOPES']
-
-from sentry.models import (
-    AuthIdentity, AuthProvider, OrganizationMember
-)
-
-SCOPES = set([
-    'org:read',
-    'org:write',
-    'org:delete',
-    'member:read',
-    'member:write',
-    'member:delete',
-    'team:read',
-    'team:write',
-    'team:delete',
-    'project:read',
-    'project:write',
-    'project:delete',
-    'event:read',
-    'event:write',
-    'event:delete',
-])
+__all__ = ['from_user', 'from_member', 'DEFAULT']
+
+from django.conf import settings
+
+from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
 
 
 class BaseAccess(object):
     is_active = False
-    is_global = False
     sso_is_valid = False
     teams = ()
     scopes = frozenset()
@@ -42,20 +23,25 @@ class BaseAccess(object):
             return False
         return team in self.teams
 
+    def has_team_scope(self, team, scope):
+        return self.has_team(team) and self.has_scope(scope)
+
     def to_django_context(self):
-        return {s.replace(':', '_'): self.has_scope(s) for s in SCOPES}
+        return {
+            s.replace(':', '_'): self.has_scope(s)
+            for s in settings.SENTRY_SCOPES
+        }
 
 
 class Access(BaseAccess):
     # TODO(dcramer): this is still a little gross, and ideally backend access
     # would be based on the same scopes as API access so theres clarity in
     # what things mean
-    def __init__(self, scopes, is_active, is_global, teams, sso_is_valid):
+    def __init__(self, scopes, is_active, teams, sso_is_valid):
         self.teams = teams
         self.scopes = scopes
 
         self.is_active = is_active
-        self.is_global = is_global
         self.sso_is_valid = sso_is_valid
 
 
@@ -65,9 +51,8 @@ def from_user(user, organization):
 
     if user.is_superuser:
         return Access(
-            scopes=SCOPES,
+            scopes=settings.SENTRY_SCOPES,
             is_active=True,
-            is_global=True,
             teams=organization.team_set.all(),
             sso_is_valid=True,
         )
@@ -89,8 +74,6 @@ def from_user(user, organization):
 def from_member(member):
     # TODO(dcramer): we want to optimize this access pattern as its several
     # network hops and needed in a lot of places
-    teams = member.get_teams()
-
     try:
         auth_provider = AuthProvider.objects.get(
             organization=member.organization_id,
@@ -113,10 +96,9 @@ def from_member(member):
 
     return Access(
         is_active=True,
-        is_global=member.has_global_access,
         sso_is_valid=sso_is_valid,
         scopes=member.get_scopes(),
-        teams=teams,
+        teams=member.get_teams(),
     )
 
 
@@ -125,10 +107,6 @@ class NoAccess(BaseAccess):
     def sso_is_valid(self):
         return True
 
-    @property
-    def is_global(self):
-        return False
-
     @property
     def is_active(self):
         return False
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 76c11ef4ba..6a6b307f1d 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -223,8 +223,7 @@ class AuthHelper(object):
             except OrganizationMember.DoesNotExist:
                 member = OrganizationMember.objects.create(
                     organization=organization,
-                    type=auth_provider.default_role,
-                    has_global_access=auth_provider.default_global_access,
+                    role=organization.default_role,
                     user=user,
                     flags=getattr(OrganizationMember.flags, 'sso:linked'),
                 )
@@ -296,8 +295,7 @@ class AuthHelper(object):
 
         om = OrganizationMember.objects.create(
             organization=organization,
-            type=auth_provider.default_role,
-            has_global_access=auth_provider.default_global_access,
+            role=organization.default_role,
             user=user,
             flags=getattr(OrganizationMember.flags, 'sso:linked'),
         )
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 38ac7714a3..253fa830a1 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -809,6 +809,79 @@ SENTRY_DISALLOWED_IPS = (
 # 'first_name' in SENTRY_MANAGED_USER_FIELDS.
 SENTRY_MANAGED_USER_FIELDS = ('email',)
 
+SENTRY_SCOPES = set([
+    'org:read',
+    'org:write',
+    'org:delete',
+    'member:read',
+    'member:write',
+    'member:delete',
+    'team:read',
+    'team:write',
+    'team:delete',
+    'project:read',
+    'project:write',
+    'project:delete',
+    'event:read',
+    'event:write',
+    'event:delete',
+])
+
+SENTRY_DEFAULT_ROLE = 'member'
+
+# Roles are ordered, which represents a sort-of hierarchy, as well as how
+# they're presented in the UI. This is primarily important in that a member
+# that is earlier in the chain cannot manage the settings of a member later
+# in the chain (they still require the appropriate scope).
+SENTRY_ROLES = (
+    {
+        'id': 'member',
+        'name': 'Member',
+        'desc': 'Members can view and act on events, as well as view most other data within the organization.',
+        'scopes': set([
+            'event:read', 'event:write', 'event:delete',
+            'project:read', 'org:read', 'member:read', 'team:read',
+        ]),
+    },
+    {
+        'id': 'admin',
+        'name': 'Admin',
+        'desc': 'Admin privileges on any teams of which they\'re a member. They can create new teams and projects, as well as remove teams and projects which they already hold membership on.',
+        'scopes': set([
+            'event:read', 'event:write', 'event:delete',
+            'org:read', 'member:read',
+            'project:read', 'project:write', 'project:delete',
+            'team:read', 'team:write', 'team:delete',
+        ]),
+    },
+    {
+        'id': 'manager',
+        'name': 'Manager',
+        'desc': 'Gains admin access on all teams as well as the ability to add and remove members.',
+        'is_global': True,
+        'scopes': set([
+            'event:read', 'event:write', 'event:delete',
+            'member:read', 'member:write', 'member:delete',
+            'project:read', 'project:write', 'project:delete',
+            'team:read', 'team:write', 'team:delete',
+            'org:read',
+        ]),
+    },
+    {
+        'id': 'owner',
+        'name': 'Owner',
+        'desc': 'Gains full permission across the organization. Can manage members as well as perform catastrophic operations such as removing the organization.',
+        'is_global': True,
+        'scopes': set([
+            'org:read', 'org:write', 'org:delete',
+            'member:read', 'member:write', 'member:delete',
+            'team:read', 'team:write', 'team:delete',
+            'project:read', 'project:write', 'project:delete',
+            'event:read', 'event:write', 'event:delete',
+        ]),
+    },
+)
+
 # See sentry/options/__init__.py for more information
 SENTRY_OPTIONS = {}
 
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index da405bb977..0b073d48f8 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -59,19 +59,6 @@ STATUS_CHOICES = {
     'muted': STATUS_MUTED,
 }
 
-
-MEMBER_OWNER = 0
-MEMBER_ADMIN = 25
-MEMBER_USER = 50
-MEMBER_SYSTEM = 100
-
-MEMBER_TYPES = (
-    (MEMBER_OWNER, _('Owner')),
-    (MEMBER_ADMIN, _('Admin')),
-    (MEMBER_USER, _('User')),
-    # (MEMBER_SYSTEM, _('System Agent')),
-)
-
 # A list of values which represent an unset or empty password on
 # a User instance.
 EMPTY_PASSWORD_VALUES = ('!', '', '$')
diff --git a/src/sentry/management/commands/createuser.py b/src/sentry/management/commands/createuser.py
index 68b5c43270..9892f90efc 100644
--- a/src/sentry/management/commands/createuser.py
+++ b/src/sentry/management/commands/createuser.py
@@ -14,9 +14,8 @@ from django.conf import settings
 from django.core.exceptions import ValidationError
 from django.core.management.base import BaseCommand, CommandError, make_option
 
-from sentry.models import (
-    Organization, OrganizationMember, OrganizationMemberType, User
-)
+from sentry import roles
+from sentry.models import Organization, OrganizationMember, User
 
 
 class Command(BaseCommand):
@@ -105,7 +104,6 @@ class Command(BaseCommand):
             OrganizationMember.objects.create(
                 organization=org,
                 user=user,
-                type=OrganizationMemberType.OWNER,
-                has_global_access=user.is_superuser,
+                role=roles.get_top_dog().id,
             )
             self.stdout.write('Added to organization: %s' % (org.slug,))
diff --git a/src/sentry/migrations/0207_auto__add_field_organization_default_role.py b/src/sentry/migrations/0207_auto__add_field_organization_default_role.py
new file mode 100644
index 0000000000..d5736d3a5a
--- /dev/null
+++ b/src/sentry/migrations/0207_auto__add_field_organization_default_role.py
@@ -0,0 +1,433 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding field 'Organization.default_role'
+        db.add_column('sentry_organization', 'default_role',
+                      self.gf('django.db.models.fields.CharField')(default='member', max_length=32),
+                      keep_default=False)
+
+
+    def backwards(self, orm):
+        # Deleting field 'Organization.default_role'
+        db.delete_column('sentry_organization', 'default_role')
+
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'badge': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project', 'ident'), ('project', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'storage': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'storage_options': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.group': {
+            'Meta': {'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.helppage': {
+            'Meta': {'object_name': 'HelpPage'},
+            'content': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_visible': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'priority': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'counter': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {'object_name': 'UserReport', 'index_together': "(('project', 'event_id'),)"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/src/sentry/migrations/0208_backfill_default_role.py b/src/sentry/migrations/0208_backfill_default_role.py
new file mode 100644
index 0000000000..462cdf31cc
--- /dev/null
+++ b/src/sentry/migrations/0208_backfill_default_role.py
@@ -0,0 +1,441 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import DataMigration
+from django.db import models
+
+class Migration(DataMigration):
+
+    def forwards(self, orm):
+        Organization = orm['sentry.Organization']
+        AuthProvider = orm['sentry.AuthProvider']
+
+        for auth_provider in AuthProvider.objects.all():
+            if auth_provider.default_role <= 0:
+                if auth_provider.default_global_access:
+                    role = 'owner'
+            elif auth_provider.default_role <= 25:
+                role = 'admin'
+            else:
+                continue
+
+            Organization.objects.filter(
+                id=auth_provider.organization_id.id,
+            ).update(default_role=role)
+
+    def backwards(self, orm):
+        pass
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'badge': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project', 'ident'), ('project', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'storage': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'storage_options': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.group': {
+            'Meta': {'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.helppage': {
+            'Meta': {'object_name': 'HelpPage'},
+            'content': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_visible': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'priority': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'counter': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {'object_name': 'UserReport', 'index_together': "(('project', 'event_id'),)"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        }
+    }
+
+    complete_apps = ['sentry']
+    symmetrical = True
diff --git a/src/sentry/models/authprovider.py b/src/sentry/models/authprovider.py
index 47adbb8ac2..2397ca6f0c 100644
--- a/src/sentry/models/authprovider.py
+++ b/src/sentry/models/authprovider.py
@@ -9,11 +9,6 @@ from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 )
 
-from .organizationmember import OrganizationMember
-
-
-_organizationmember_type_field = OrganizationMember._meta.get_field('type')
-
 
 class AuthProvider(Model):
     organization = FlexibleForeignKey('sentry.Organization', unique=True)
@@ -24,10 +19,7 @@ class AuthProvider(Model):
     sync_time = BoundedPositiveIntegerField(null=True)
     last_sync = models.DateTimeField(null=True)
 
-    default_role = BoundedPositiveIntegerField(
-        choices=_organizationmember_type_field.choices,
-        default=_organizationmember_type_field.default
-    )
+    default_role = BoundedPositiveIntegerField(default=50)
     default_global_access = models.BooleanField(default=True)
     # TODO(dcramer): ManyToMany has the same issue as ForeignKey and we need
     # to either write our own which works w/ BigAuto or switch this to use
@@ -53,5 +45,4 @@ class AuthProvider(Model):
         return {
             'provider': self.provider,
             'config': self.config,
-            'default_Role': self.default_role,
         }
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index e643fda98c..419519df46 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -14,6 +14,7 @@ from django.utils import timezone
 from django.utils.functional import cached_property
 from django.utils.translation import ugettext_lazy as _
 
+from sentry import roles
 from sentry.constants import RESERVED_ORGANIZATION_SLUGS
 from sentry.db.models import (
     BaseManager, BoundedPositiveIntegerField, Model,
@@ -34,45 +35,29 @@ class OrganizationManager(BaseManager):
     # def get_by_natural_key(self, slug):
     #     return self.get(slug=slug)
 
-    def get_for_user(self, user, access=None):
+    def get_for_user(self, user, scope=None):
         """
         Returns a set of all organizations a user has access to.
-
-        Each <Organization> returned has an ``member_type`` attribute which
-        holds the OrganizationMemberType value.
         """
-        from sentry.models import OrganizationMember, OrganizationMemberType
-
-        results = []
+        from sentry.models import OrganizationMember
 
         if not user.is_authenticated():
-            return results
+            return []
 
-        if settings.SENTRY_PUBLIC and access is None:
-            qs = self.filter(status=OrganizationStatus.VISIBLE)
-            for org in qs:
-                org.member_type = OrganizationMemberType.MEMBER
-                results.append(org)
-
-        else:
-            qs = OrganizationMember.objects.filter(
-                user=user,
-                organization__status=OrganizationStatus.VISIBLE,
-            ).select_related('organization')
-            if access is not None:
-                # if we're requesting specific access the member *must* have
-                # global access to teams
-                qs = qs.filter(
-                    type__lte=access,
-                    has_global_access=True,
-                )
+        if settings.SENTRY_PUBLIC and scope is None:
+            return list(self.filter(status=OrganizationStatus.VISIBLE))
 
-            for om in qs:
-                org = om.organization
-                org.member_type = om.type
-                results.append(org)
+        results = list(OrganizationMember.objects.filter(
+            user=user,
+            organization__status=OrganizationStatus.VISIBLE,
+        ).select_related('organization'))
 
-        return results
+        if scope is not None:
+            return [
+                r.organization for r in results
+                if scope not in r.get_scopes()
+            ]
+        return [r.organization for r in results]
 
 
 class Organization(Model):
@@ -88,6 +73,11 @@ class Organization(Model):
     ), default=OrganizationStatus.VISIBLE)
     date_added = models.DateTimeField(default=timezone.now)
     members = models.ManyToManyField(settings.AUTH_USER_MODEL, through='sentry.OrganizationMember', related_name='org_memberships')
+    default_role = models.CharField(
+        choices=roles.get_choices(),
+        max_length=32,
+        default=roles.get_default().id,
+    )
 
     flags = BitField(flags=(
         ('allow_joinleave', 'Allow members to join and leave teams without requiring approval.'),
@@ -152,22 +142,22 @@ class Organization(Model):
             'name': self.name,
             'status': self.status,
             'flags': self.flags,
+            'default_role': self.default_role,
         }
 
     def get_default_owner(self):
-        from sentry.models import OrganizationMemberType, User
+        from sentry.models import User
 
         return User.objects.filter(
-            sentry_orgmember_set__type=OrganizationMemberType.OWNER,
+            sentry_orgmember_set__role='owner',
             sentry_orgmember_set__organization=self,
         )[0]
 
     def has_single_owner(self):
-        from sentry.models import OrganizationMember, OrganizationMemberType
+        from sentry.models import OrganizationMember
         count = OrganizationMember.objects.filter(
             organization=self,
-            type=OrganizationMemberType.OWNER,
-            has_global_access=True,
+            role='owner',
             user__isnull=False,
         ).count()
         return count == 1
@@ -178,10 +168,6 @@ class Organization(Model):
             Project, Team
         )
 
-        team_list = list(Team.objects.filter(
-            organization=to_org,
-        ))
-
         for from_member in OrganizationMember.objects.filter(organization=from_org):
             try:
                 to_member = OrganizationMember.objects.get(
@@ -191,17 +177,19 @@ class Organization(Model):
             except OrganizationMember.DoesNotExist:
                 from_member.update(organization=to_org)
                 to_member = from_member
-
-            if to_member.has_global_access:
-                for team in team_list:
-                    OrganizationMemberTeam.objects.get_or_create(
+            else:
+                qs = OrganizationMemberTeam.objects.filter(
+                    organizationmember=from_member,
+                    is_active=True,
+                ).select_related()
+                for omt in qs:
+                    OrganizationMemberTeam.objects.create_or_update(
                         organizationmember=to_member,
-                        team=team,
+                        team=omt.team,
                         defaults={
-                            'is_active': False,
+                            'is_active': True,
                         },
                     )
-
         for model in (Team, Project, ApiKey, AuditLogEntry):
             model.objects.filter(
                 organization=from_org,
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 59f11cd2d8..b0d5d71795 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -15,44 +15,15 @@ from django.core.urlresolvers import reverse
 from django.db import models, transaction
 from django.db.models import F
 from django.utils import timezone
-from django.utils.translation import ugettext_lazy as _
 from hashlib import md5
 
+from sentry import roles
 from sentry.db.models import (
     BaseModel, BoundedAutoField, BoundedPositiveIntegerField,
     FlexibleForeignKey, Model, sane_repr
 )
 from sentry.utils.http import absolute_uri
 
-ROLE_SCOPES = {
-    'owner': set([
-        'org:read', 'org:write', 'org:delete',
-        'member:read', 'member:write', 'member:delete',
-        'team:read', 'team:write', 'team:delete',
-        'project:read', 'project:write', 'project:delete',
-        'event:read', 'event:write', 'event:delete',
-    ]),
-    'admin': set([
-        'event:read', 'event:write', 'event:delete',
-        'org:read', 'member:read',
-        'project:read', 'project:write', 'project:delete',
-        'team:read', 'team:write', 'team:delete',
-    ]),
-    'member': set([
-        'event:read', 'event:write', 'event:delete',
-        'project:read', 'project:write',
-        'org:read', 'member:read', 'team:read',
-    ]),
-}
-
-
-# TODO(dcramer): pull in enum library
-class OrganizationMemberType(object):
-    OWNER = 0
-    ADMIN = 25
-    MEMBER = 50
-    BOT = 100
-
 
 class OrganizationMemberTeam(BaseModel):
     id = BoundedAutoField(primary_key=True)
@@ -91,21 +62,11 @@ class OrganizationMember(Model):
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, null=True, blank=True,
                              related_name="sentry_orgmember_set")
     email = models.EmailField(null=True, blank=True)
-
-    role = models.CharField(choices=(
-        ('owner', _('Owner')),
-        ('admin', _('Admin')),
-        ('member', _('Member')),
-    ), max_length=32, default='member')
-
-    # deprecated -- role replaces this
-    type = BoundedPositiveIntegerField(choices=(
-        (OrganizationMemberType.BOT, _('Bot')),
-        (OrganizationMemberType.MEMBER, _('Member')),
-        (OrganizationMemberType.ADMIN, _('Admin')),
-        (OrganizationMemberType.OWNER, _('Owner')),
-    ), default=OrganizationMemberType.MEMBER)
-
+    role = models.CharField(
+        choices=roles.get_choices(),
+        max_length=32,
+        default=roles.get_default().id,
+    )
     flags = BitField(flags=(
         ('sso:linked', 'sso:linked'),
         ('sso:invalid', 'sso:invalid'),
@@ -116,6 +77,9 @@ class OrganizationMember(Model):
     teams = models.ManyToManyField('sentry.Team', blank=True,
                                    through='sentry.OrganizationMemberTeam')
 
+    # Deprecated -- no longer used
+    type = BoundedPositiveIntegerField(default=50, blank=True)
+
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_organizationmember'
@@ -130,7 +94,6 @@ class OrganizationMember(Model):
     def save(self, *args, **kwargs):
         assert self.user_id or self.email, \
             'Must set user or email'
-        self.role = self._compute_role()
         super(OrganizationMember, self).save(*args, **kwargs)
         if not self.counter:
             self._set_counter()
@@ -141,14 +104,6 @@ class OrganizationMember(Model):
         if self.counter:
             self._unshift_counter()
 
-    def _compute_role(self):
-        if self.has_global_access:
-            if self.type <= OrganizationMemberType.OWNER:
-                return 'owner'
-        if self.type <= OrganizationMemberType.ADMIN:
-            return 'admin'
-        return 'member'
-
     def _unshift_counter(self):
         assert self.counter
         OrganizationMember.objects.filter(
@@ -179,9 +134,6 @@ class OrganizationMember(Model):
             checksum.update(x)
         return checksum.hexdigest()
 
-    def get_scopes(self):
-        return ROLE_SCOPES[self.role]
-
     def send_invite_email(self):
         from sentry.utils.email import MessageBuilder
 
@@ -241,28 +193,35 @@ class OrganizationMember(Model):
         return self.email
 
     def get_audit_log_data(self):
+        from sentry.models import Team
         return {
             'email': self.email,
             'user': self.user_id,
-            'teams': [t.id for t in self.get_teams()],
+            'teams': list(Team.objects.filter(
+                id__in=OrganizationMemberTeam.objects.filter(
+                    organizationmember=self,
+                    is_active=True,
+                ).values_list('team', flat=True)
+            )),
             'has_global_access': self.has_global_access,
+            'role': self.role,
         }
 
     def get_teams(self):
         from sentry.models import Team
 
-        if self.has_global_access:
-            return Team.objects.filter(
-                organization=self.organization,
-            ).exclude(
-                id__in=OrganizationMemberTeam.objects.filter(
-                    organizationmember=self,
-                    is_active=False,
-                ).values('team')
-            )
+        if roles.get(self.role).is_global:
+            return self.organization.team_set.all()
+
         return Team.objects.filter(
             id__in=OrganizationMemberTeam.objects.filter(
                 organizationmember=self,
                 is_active=True,
             ).values('team')
         )
+
+    def get_scopes(self):
+        return roles.get(self.role).scopes
+
+    def can_manage_member(self, member):
+        return roles.can_manage(self.role, member.role)
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index d417738ced..df5e4bd901 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -13,7 +13,7 @@ import warnings
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import models
-from django.db.models import F, Q
+from django.db.models import F
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
@@ -36,7 +36,7 @@ class ProjectStatus(object):
 
 class ProjectManager(BaseManager):
     # TODO(dcramer): we might want to cache this per user
-    def get_for_user(self, team, user, access=None, _skip_team_check=False):
+    def get_for_user(self, team, user, _skip_team_check=False):
         from sentry.models import Team
 
         if not (user and user.is_authenticated()):
@@ -46,7 +46,6 @@ class ProjectManager(BaseManager):
             team_list = Team.objects.get_for_user(
                 organization=team.organization,
                 user=user,
-                access=access,
             )
 
             try:
@@ -191,14 +190,11 @@ class Project(Model):
     def member_set(self):
         from sentry.models import OrganizationMember
         return self.organization.member_set.filter(
-            Q(organizationmemberteam__team=self.team) |
-            Q(has_global_access=True),
-            user__is_active=True,
-        ).exclude(
             id__in=OrganizationMember.objects.filter(
-                organizationmemberteam__is_active=False,
+                organizationmemberteam__is_active=True,
                 organizationmemberteam__team=self.team,
-            ).values('id')
+            ).values('id'),
+            user__is_active=True,
         ).distinct()
 
     def has_access(self, user, access=None):
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 0994890592..cb0d93583e 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -11,7 +11,6 @@ import warnings
 
 from django.conf import settings
 from django.db import models
-from django.db.models import Q
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
@@ -24,17 +23,11 @@ from sentry.utils.cache import Lock
 
 
 class TeamManager(BaseManager):
-    def get_for_user(self, organization, user, access=None, with_projects=False):
+    def get_for_user(self, organization, user, with_projects=False):
         """
         Returns a list of all teams a user has some level of access to.
-
-        Each <Team> returned has an ``access_type`` attribute which holds the
-        OrganizationMemberType value.
         """
-        from sentry.models import (
-            OrganizationMember, OrganizationMemberTeam,
-            OrganizationMemberType, Project
-        )
+        from sentry.models import OrganizationMemberTeam, Project
 
         if not user.is_authenticated():
             return []
@@ -44,44 +37,17 @@ class TeamManager(BaseManager):
             status=TeamStatus.VISIBLE
         )
 
-        if user.is_superuser or (settings.SENTRY_PUBLIC and access is None):
-            inactive = list(OrganizationMemberTeam.objects.filter(
-                organizationmember__user=user,
-                organizationmember__organization=organization,
-                is_active=False,
-            ).values_list('team', flat=True))
-
-            team_list = base_team_qs
-            if inactive:
-                team_list = team_list.exclude(id__in=inactive)
-
-            team_list = list(team_list)
-
-            if user.is_superuser:
-                access = OrganizationMemberType.OWNER
-            else:
-                access = OrganizationMemberType.MEMBER
-            for team in team_list:
-                team.access_type = access
+        if user.is_superuser or settings.SENTRY_PUBLIC:
+            team_list = list(base_team_qs)
 
         else:
-            om_qs = OrganizationMember.objects.filter(
-                user=user,
-                organization=organization,
-            )
-            if access is not None:
-                om_qs = om_qs.filter(type__lte=access)
-
-            try:
-                om = om_qs.get()
-            except OrganizationMember.DoesNotExist:
-                team_qs = self.none()
-            else:
-                team_qs = om.get_teams()
-                for team in team_qs:
-                    team.access_type = om.type
-
-            team_list = set(team_qs)
+            team_list = list(base_team_qs.filter(
+                id__in=OrganizationMemberTeam.objects.filter(
+                    organizationmember__user=user,
+                    organizationmember__organization=organization,
+                    is_active=True,
+                ).values_list('team'),
+            ))
 
         results = sorted(team_list, key=lambda x: x.name.lower())
 
@@ -129,7 +95,7 @@ class Team(Model):
         db_table = 'sentry_team'
         unique_together = (('organization', 'slug'),)
 
-    __repr__ = sane_repr('slug', 'owner_id', 'name')
+    __repr__ = sane_repr('slug', 'name')
 
     def __unicode__(self):
         return u'%s (%s)' % (self.name, self.slug)
@@ -145,16 +111,10 @@ class Team(Model):
 
     @property
     def member_set(self):
-        from sentry.models import OrganizationMember
         return self.organization.member_set.filter(
-            Q(organizationmemberteam__team=self) |
-            Q(has_global_access=True),
+            organizationmemberteam__team=self,
+            organizationmemberteam__is_active=True,
             user__is_active=True,
-        ).exclude(
-            id__in=OrganizationMember.objects.filter(
-                organizationmemberteam__is_active=False,
-                organizationmemberteam__team=self,
-            ).values('id')
         ).distinct()
 
     def has_access(self, user, access=None):
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 67c9e538dc..8db57ad111 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -11,7 +11,7 @@ from pkg_resources import parse_version as Version
 
 from sentry import options
 from sentry.models import (
-    Organization, OrganizationMember, OrganizationMemberType, Project, User,
+    Organization, OrganizationMember, Project, User,
     Team, ProjectKey, TagKey, TagValue, GroupTagValue, GroupTagKey, Activity
 )
 from sentry.signals import buffer_incr_complete, regression_signal
@@ -79,10 +79,7 @@ def create_default_project(id, name, slug, verbosity=2, **kwargs):
     OrganizationMember.objects.get_or_create(
         user=user,
         organization=org,
-        defaults={
-            'type': OrganizationMemberType.OWNER,
-            'has_global_access': True,
-        },
+        role='owner',
     )
 
     team, _ = Team.objects.get_or_create(
diff --git a/src/sentry/roles/__init__.py b/src/sentry/roles/__init__.py
new file mode 100644
index 0000000000..df23361562
--- /dev/null
+++ b/src/sentry/roles/__init__.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import, print_function
+
+from django.conf import settings
+
+from .manager import RoleManager
+
+
+default_manager = RoleManager(settings.SENTRY_ROLES, settings.SENTRY_DEFAULT_ROLE)
+
+can_manage = default_manager.can_manage
+get = default_manager.get
+get_all = default_manager.get_all
+get_choices = default_manager.get_choices
+get_default = default_manager.get_default
+get_top_dog = default_manager.get_top_dog
+with_scope = default_manager.with_scope
diff --git a/src/sentry/roles/manager.py b/src/sentry/roles/manager.py
new file mode 100644
index 0000000000..0a2fe668f5
--- /dev/null
+++ b/src/sentry/roles/manager.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+from collections import OrderedDict
+
+
+class Role(object):
+    def __init__(self, priority, id, name, desc='', scopes=(), is_global=False):
+        assert len(id) <= 32, 'Role id must be no more than 32 characters'
+
+        self.priority = priority
+        self.id = id
+        self.name = name
+        self.desc = desc
+        self.scopes = frozenset(scopes)
+        self.is_global = bool(is_global)
+
+    def __str__(self):
+        return self.name.encode('utf-8')
+
+    def __unicode__(self):
+        return unicode(self.name)
+
+    def __repr__(self):
+        return '<Role: {}>'.format(self.id)
+
+    def has_scope(self, scope):
+        return scope in self.scopes
+
+
+class RoleManager(object):
+    def __init__(self, config, default=None):
+        role_list = []
+        self._roles = OrderedDict()
+        for idx, role in enumerate(config):
+            role = Role(idx, **role)
+            role_list.append(role)
+            self._roles[role.id] = role
+
+        self._choices = tuple(
+            (r.id, r.name)
+            for r in role_list
+        )
+
+        if default:
+            self._default = self._roles[default]
+        else:
+            self._default = role_list[0]
+
+        self._top_dog = role_list[-1]
+
+    def __iter__(self):
+        return self._roles.itervalues()
+
+    def can_manage(self, role, other):
+        return role.priority > other.priority
+
+    def get(self, id):
+        return self._roles[id]
+
+    def get_all(self):
+        return self._roles.values()
+
+    def get_choices(self):
+        return self._choices
+
+    def get_default(self):
+        return self._default
+
+    def get_top_dog(self):
+        return self._top_dog
+
+    def with_scope(self, scope):
+        for role in self.get_all():
+            if role.has_scope(scope):
+                yield role
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 62edc79637..76529d92e4 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -2296,22 +2296,32 @@ table.integrations {
   }
 }
 
-.radio-inputs {
+ul.radio-inputs {
+  .list-unstyled;
   position: relative;
   display: inline-block;
+  margin-bottom: 10px;
 
-  .radio {
-    margin-top: 7px;
+  li.radio {
+    margin-top: 0;
     margin-right: 10px;
-    margin-bottom: 0;
-    margin-left: 20px;
+    margin-bottom: 10px;
+    margin-left: 0;
     display: inline-block;
     font-weight: normal;
 
-    input {
-      margin-left: -20px;
-      margin-top: 4px;
-      vertical-align: middle;
+    label {
+      padding-left: 25px;
+
+      input {
+        margin-left: -25px;
+        margin-top: 4px;
+        vertical-align: middle;
+      }
+
+      .help-block {
+        margin-bottom: 0;
+      }
     }
   }
 }
diff --git a/src/sentry/templates/sentry/accept-organization-invite.html b/src/sentry/templates/sentry/accept-organization-invite.html
index 98ea3f285b..be4b00e76f 100644
--- a/src/sentry/templates/sentry/accept-organization-invite.html
+++ b/src/sentry/templates/sentry/accept-organization-invite.html
@@ -23,7 +23,7 @@
         <ul>
           {% for project in project_list|slice:"5" %}
             <li>
-              {{ project.name }}
+              {{ project.get_full_name }}
             </li>
           {% endfor %}
         </ul>
diff --git a/src/sentry/templates/sentry/create-organization-member.html b/src/sentry/templates/sentry/create-organization-member.html
index 8cd2dc44bf..f157068846 100644
--- a/src/sentry/templates/sentry/create-organization-member.html
+++ b/src/sentry/templates/sentry/create-organization-member.html
@@ -6,25 +6,48 @@
 {% block title %}{% trans "Add Member to Organization" %} | {{ block.super }}{% endblock %}
 
 {% block main %}
-  <div class="create-flow">
-    <div class="page-header">
-      <div class="pull-right">
-        <a class="go-back" href="{% url 'sentry-organization-home' organization.slug %}">Back to Organization Home</a>
+  <div class="page-header">
+    <a class="back-arrow" style="top: 0px;" href="{% url 'sentry-organization-members' organization.slug %}"><span class="icon-arrow-left"></span></a>
+    <h2>{% trans "Add Member to Organization" %}</h2>
+  </div>
+
+  {% if is_invite %}
+    <p>{% trans "Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one." %}</p>
+  {% else %}
+    <p>{% trans "You may add a user by their username if they already have an account." %}</p>
+  {% endif %}
+
+  <form class="form-stacked" action="" method="post">
+    {% csrf_token %}
+
+    {% for field in form %}
+      {% if field.name != "role" %}
+        {{ field|as_crispy_field }}
+      {% endif %}
+    {% endfor %}
+
+    <div class="box">
+      <div class="box-header">
+        <h3>{% trans "Role" %}</h3>
+      </div>
+      <div class="box-content with-padding">
+        <ul class="radio-inputs">
+          {% for role in role_list %}
+            <li class="radio">
+              <label>
+                <input type="radio" name="role" value="{{ role.id }}"
+                       {% if role.id == form.role.value %} checked{% endif %} />
+                {{ role.name }}
+                <div class="help-block">{{ role.desc|linebreaksbr }}</div>
+              </label>
+            </li>
+          {% endfor %}
+        </ul>
       </div>
-      <h2>{% trans "Add Member to Organization" %}</h2>
     </div>
 
-    <fieldset>
-      {% if is_invite %}
-        <p>{% trans "Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one." %}</p>
-        <p>{% trans "You will be able to configure permissions and team access on the following page." %}</p>
-        {% trans "Send Invite" as submit_label %}
-        {% include "sentry/partial/_form.html" %}
-      {% else %}
-        <p>{% trans "You may add a user by their username if they already have an account." %}</p>
-        <p>{% trans "You will be able to configure permissions and team access on the following page." %}</p>
-        {% include "sentry/partial/_form.html" %}
-      {% endif %}
-    </fieldset>
-  </div>
+    <div class="form-actions">
+      <button type="submit" class="btn btn-primary">{% trans "Add Member" %}</button>
+    </div>
+  </form>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/organization-member-details.html b/src/sentry/templates/sentry/organization-member-details.html
index 66090c7fbf..1aaecb43ac 100644
--- a/src/sentry/templates/sentry/organization-member-details.html
+++ b/src/sentry/templates/sentry/organization-member-details.html
@@ -14,44 +14,64 @@
       <br><small>Member Settings</small>
     </h2>
   </div>
-  <div class="row" style="margin-bottom: 10px">
-    <div class="col-md-4">
-      <div class="control-group">
-        <label>{% trans "Email" %}</label>
-        <div class="controls">
-          <a href="mailto:{{ member.get_email }}">{{ member.get_email }}</a>
-        </div>
-      </div>
+
+
+  <div class="box">
+    <div class="box-header">
+      <h3>{% trans "Basics" %}</h3>
     </div>
-    <div class="col-md-4">
-      <div class="control-group">
-        <label>{% trans "Status" %}</label>
-        <div class="controls">
-          {% if member.is_pending %}
-            Invited
-          {% else %}
-            Active
-          {% endif %}
+
+    <div class="box-content with-padding">
+      <div class="row" style="margin-bottom:10px">
+        <div class="col-md-6">
+          <div class="control-group">
+            <label>{% trans "Email" %}</label>
+            <div class="controls">
+              <a href="mailto:{{ member.get_email }}">{{ member.get_email }}</a>
+            </div>
+          </div>
         </div>
-      </div>
-    </div>
-    <div class="col-md-4">
-      <div class="control-group">
-        <label>{% trans "Role" %}</label>
-        <div class="controls">
-          {{ member.get_type_display }}
+        <div class="col-md-3">
+          <div class="control-group">
+            <label>{% trans "Status" %}</label>
+            <div class="controls">
+              {% if member.is_pending %}
+                Invited
+              {% else %}
+                Active
+              {% endif %}
+            </div>
+          </div>
+        </div>
+        <div class="col-md-3">
+          <div class="control-group">
+            <label>{% trans "Added" %}</label>
+            <div class="controls">
+              {{ member.date_added|date }}
+            </div>
+          </div>
         </div>
       </div>
     </div>
   </div>
 
-  <div class="control-group">
-    <div class="controls">
-      <label class="checkbox">
-        <input type="checkbox" class="checkboxinput"
-               disabled="disabled"{% if member.has_global_access %} checked="checked'{% endif %}">
-        This member should have global access within the organization (including all teams).
-      </label>
+  <div class="box">
+    <div class="box-header">
+      <h3>{% trans "Role" %}</h3>
+    </div>
+    <div class="box-content with-padding">
+      <ul class="radio-inputs">
+        {% for role in role_list %}
+          <li class="radio disabled">
+            <label>
+              <input type="radio" name="role" value="{{ role.id }}"
+                     disabled {% if role.id == member.role %} checked{% endif %} />
+              {{ role.name }}
+              <div class="help-block">{{ role.desc|linebreaksbr }}</div>
+            </label>
+          </li>
+        {% endfor %}
+      </ul>
     </div>
   </div>
 
@@ -76,7 +96,6 @@
     </div>
   </div>
 
-
   <div class="form-actions">
     <div class="alert alert-block alert-info">
       {% if member.user == user %}
@@ -86,5 +105,4 @@
       {% endif %}
     </div>
   </div>
-
 {% endblock %}
diff --git a/src/sentry/templates/sentry/organization-member-settings.html b/src/sentry/templates/sentry/organization-member-settings.html
index d6dbd53deb..b8a8387cae 100644
--- a/src/sentry/templates/sentry/organization-member-settings.html
+++ b/src/sentry/templates/sentry/organization-member-settings.html
@@ -24,34 +24,64 @@
 
     {{ form|as_crispy_errors }}
 
-    <div class="row">
-      <div class="control-group col-md-4">
-        <label>{% trans "Email" %}</label>
-        <div class="controls">
-          {% if member.get_email %}
-            <a href="mailto:{{ member.get_email }}">{{ member.get_email }}</a>
-          {% else %}
-            No email provided
-          {% endif %}
-        </div>
+    <div class="box">
+      <div class="box-header">
+        <h3>{% trans "Basics" %}</h3>
       </div>
 
-      <div class="control-group col-md-4">
-        <label>{% trans "Status" %}</label>
-        <div class="controls">
-          {% if member.is_pending %}
-            Invited
-          {% else %}
-            Active
-          {% endif %}
+      <div class="box-content with-padding">
+        <div class="row" style="margin-bottom:10px">
+          <div class="col-md-6">
+            <div class="control-group">
+              <label>{% trans "Email" %}</label>
+              <div class="controls">
+                <a href="mailto:{{ member.get_email }}">{{ member.get_email }}</a>
+              </div>
+            </div>
+          </div>
+          <div class="col-md-3">
+            <div class="control-group">
+              <label>{% trans "Status" %}</label>
+              <div class="controls">
+                {% if member.is_pending %}
+                  Invited
+                {% else %}
+                  Active
+                {% endif %}
+              </div>
+            </div>
+          </div>
+          <div class="col-md-3">
+            <div class="control-group">
+              <label>{% trans "Added" %}</label>
+              <div class="controls">
+                {{ member.date_added|date }}
+              </div>
+            </div>
+          </div>
         </div>
       </div>
-      <div class="control-group col-md-4">
-      {{ form.type|as_crispy_field }}
-      </div>
     </div>
 
-    {{ form.has_global_access|as_crispy_field }}
+    <div class="box">
+      <div class="box-header">
+        <h3>{% trans "Role" %}</h3>
+      </div>
+      <div class="box-content with-padding">
+        <ul class="radio-inputs">
+          {% for role in role_list %}
+            <li class="radio">
+              <label>
+                <input type="radio" name="role" value="{{ role.id }}"
+                       {% if role.id == form.role.value %} checked{% endif %} />
+                {{ role.name }}
+                <div class="help-block">{{ role.desc|linebreaksbr }}</div>
+              </label>
+            </li>
+          {% endfor %}
+        </ul>
+      </div>
+    </div>
 
     <div class="box">
       <div class="box-header">
@@ -75,7 +105,9 @@
     </div>
 
     <div class="form-actions">
-      <button type="submit" name="op" value="reinvite" class="btn btn-default">{% trans "Resend Invite" %}</button>
+      {% if organizationmember.is_pending %}
+        <button type="submit" name="op" value="reinvite" class="btn btn-default">{% trans "Resend Invite" %}</button>
+      {% endif %}
       <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
     </div>
   </form>
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
index 60be8c5d86..956528285b 100644
--- a/src/sentry/templates/sentry/organization-members.html
+++ b/src/sentry/templates/sentry/organization-members.html
@@ -57,14 +57,13 @@
         <th>Member</th>
         <th>&nbsp;</th>
         <th>Role</th>
-        <th>Teams</th>
-        {% if access_is_global %}
+        {% if can_admin %}
           <th class="squash">&nbsp;</th>
         {% endif %}
       </tr>
     </thead>
     <tbody>
-      {% for member, team_list, needs_sso in member_list %}
+      {% for member, needs_sso in member_list %}
         <tr>
           <td class="table-user-info">
             <img class="avatar" src="{% gravatar_url member.get_email size 80 %}">
@@ -85,25 +84,11 @@
               <a href="javascript:void(0)" class="resend-invite btn btn-sm btn-primary" data-member-id="{{ member.id }}" style="padding: 0 4px; margin-top: 2px">Resend invite</a>
             {% endif %}
           </td>
-          <td>{{ member.get_type_display }}</td>
-          <td>
-            {% if member.has_global_access %}
-              <span class="tip" title="Access to all teams">&infin;</span>
-            {% elif team_list|length > 1 %}
-              <span class="tip"
-                    title="{% for team in team_list %}{{ team.name }}{% if not forloop.last %}, {% endif %}{% endfor %}">
-                {{ team_list|length }} teams
-              </span>
-            {% else %}
-              {{ team_list.0.name }}
-            {% endif %}
-          </td>
-          {% if access_is_global %}
+          <td>{{ member.get_role_display }}</td>
+          {% if can_admin %}
           <td class="align-right squash">
-            {% if authorizing_access <= member.type  %}
-              {% if member.user != request.user or member_can_leave %}
+            {% if member.user != request.user or member_can_leave %}
               <a href="javascript:void(0)" class="btn btn-default btn-sm remove-member" data-member-id="{{ member.id }}"><span class="icon icon-trash"></span> &nbsp;Remove</a>
-              {% endif %}
             {% endif %}
           </td>
           {% endif %}
diff --git a/src/sentry/templates/sentry/projects/keys.html b/src/sentry/templates/sentry/projects/keys.html
index 72f2d695b5..e2ae2f3dbd 100644
--- a/src/sentry/templates/sentry/projects/keys.html
+++ b/src/sentry/templates/sentry/projects/keys.html
@@ -7,7 +7,10 @@
 
 {% block main %}
     {% if ACCESS.project_write %}
-        <a href="{% url 'sentry-new-project-key' project.organization.slug project.slug %}" class="btn pull-right btn-primary btn-sm" style="position: relative; top: -6px;">{% trans "Generate New Key" %}</a>
+        <form method="post" class="pull-right" action="{% url 'sentry-new-project-key' project.organization.slug project.slug %}"
+               style="position: relative; top: -6px;">
+            <button type="submit" class="btn btn-primary btn-sm">{% trans "Generate New Key" %}</button>
+        </form>
     {% endif %}
     <h2>{% trans "Client Keys" %}</h2>
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 42b099b372..75adee723b 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -30,7 +30,7 @@ from rest_framework.test import APITestCase as BaseAPITestCase
 from sentry import auth
 from sentry.auth.providers.dummy import DummyProvider
 from sentry.constants import MODULE_ROOT
-from sentry.models import GroupMeta, OrganizationMemberType, ProjectOption
+from sentry.models import GroupMeta, ProjectOption
 from sentry.plugins import plugins
 from sentry.rules import EventState
 from sentry.utils import json
@@ -244,7 +244,7 @@ class RuleTestCase(TestCase):
 class PermissionTestCase(TestCase):
     def setUp(self):
         super(PermissionTestCase, self).setUp()
-        self.owner = self.create_user()
+        self.owner = self.create_user(is_superuser=False)
         self.organization = self.create_organization(owner=self.owner)
         self.team = self.create_team(organization=self.organization)
 
@@ -258,182 +258,107 @@ class PermissionTestCase(TestCase):
         resp = getattr(self.client, method.lower())(path)
         assert resp.status_code >= 300
 
-    def assert_team_member_can_access(self, path):
-        user = self.create_user()
+    def assert_member_can_access(self, path):
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=False, teams=[self.team],
-        )
-
-        self.assert_can_access(user, path)
-
-    def assert_org_member_can_access(self, path):
-        user = self.create_user()
-        self.create_member(
-            user=user, organization=self.organization,
-            has_global_access=True,
+            role='member', teams=[self.team],
         )
 
         self.assert_can_access(user, path)
 
     def assert_teamless_member_can_access(self, path):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=False,
+            role='member', teams=[],
         )
 
         self.assert_can_access(user, path)
 
-    def assert_team_member_cannot_access(self, path):
-        user = self.create_user()
+    def assert_member_cannot_access(self, path):
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=False, teams=[self.team],
-        )
-
-        self.assert_cannot_access(user, path)
-
-    def assert_org_member_cannot_access(self, path):
-        user = self.create_user()
-        self.create_member(
-            user=user, organization=self.organization,
-            has_global_access=True,
+            role='member', teams=[self.team],
         )
 
         self.assert_cannot_access(user, path)
 
     def assert_teamless_member_cannot_access(self, path):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=False,
+            role='member', teams=[],
         )
 
         self.assert_cannot_access(user, path)
 
     def assert_team_admin_can_access(self, path):
-        user = self.create_user()
-        self.create_member(
-            user=user, organization=self.organization,
-            has_global_access=False, teams=[self.team],
-            type=OrganizationMemberType.ADMIN,
-        )
-
-        self.assert_can_access(user, path)
-
-    def assert_org_admin_can_access(self, path):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=True,
-            type=OrganizationMemberType.ADMIN,
+            teams=[self.team], role='admin',
         )
 
         self.assert_can_access(user, path)
 
     def assert_teamless_admin_can_access(self, path):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=False,
-            type=OrganizationMemberType.ADMIN,
+            role='admin', teams=[],
         )
 
         self.assert_can_access(user, path)
 
     def assert_team_admin_cannot_access(self, path):
-        user = self.create_user()
-        self.create_member(
-            user=user, organization=self.organization,
-            has_global_access=False, teams=[self.team],
-            type=OrganizationMemberType.ADMIN,
-        )
-
-        self.assert_cannot_access(user, path)
-
-    def assert_org_admin_cannot_access(self, path):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=True,
-            type=OrganizationMemberType.ADMIN,
+            teams=[self.team], role='admin',
         )
 
         self.assert_cannot_access(user, path)
 
     def assert_teamless_admin_cannot_access(self, path):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=False,
-            type=OrganizationMemberType.ADMIN,
+            role='admin', teams=[],
         )
 
         self.assert_cannot_access(user, path)
 
     def assert_team_owner_can_access(self, path):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=False, teams=[self.team],
-            type=OrganizationMemberType.OWNER,
+            teams=[self.team], role='owner',
         )
 
         self.assert_can_access(user, path)
 
-    def assert_org_owner_can_access(self, path):
-        user = self.create_user()
+    def assert_owner_can_access(self, path):
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=True,
-            type=OrganizationMemberType.OWNER,
+            role='owner', teams=[self.team],
         )
 
         self.assert_can_access(user, path)
 
-    def assert_teamless_owner_can_access(self, path):
-        user = self.create_user()
-        self.create_member(
-            user=user, organization=self.organization,
-            has_global_access=False,
-            type=OrganizationMemberType.OWNER,
-        )
-
-        self.assert_can_access(user, path)
-
-    def assert_team_owner_cannot_access(self, path):
-        user = self.create_user()
-        self.create_member(
-            user=user, organization=self.organization,
-            has_global_access=False, teams=[self.team],
-            type=OrganizationMemberType.OWNER,
-        )
-
-        self.assert_cannot_access(user, path)
-
-    def assert_org_owner_cannot_access(self, path):
-        user = self.create_user()
-        self.create_member(
-            user=user, organization=self.organization,
-            has_global_access=True,
-            type=OrganizationMemberType.OWNER,
-        )
-
-        self.assert_cannot_access(user, path)
-
-    def assert_teamless_owner_cannot_access(self, path):
-        user = self.create_user()
+    def assert_owner_cannot_access(self, path):
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user, organization=self.organization,
-            has_global_access=False,
-            type=OrganizationMemberType.OWNER,
+            role='owner', teams=[self.team],
         )
 
         self.assert_cannot_access(user, path)
 
     def assert_non_member_cannot_access(self, path):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         self.assert_cannot_access(user, path)
 
 
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 33ec15a238..9ae977b578 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -16,7 +16,7 @@ from uuid import uuid4
 
 from sentry.models import (
     Activity, Event, Group, Organization, OrganizationMember,
-    OrganizationMemberTeam, OrganizationMemberType, Project, Team, User
+    OrganizationMemberTeam, Project, Team, User
 )
 from sentry.utils.compat import pickle
 from sentry.utils.strings import decompress
@@ -47,11 +47,22 @@ class Fixtures(object):
 
     @fixture
     def team(self):
-        return self.create_team(
+        team = self.create_team(
             organization=self.organization,
             name='foo',
             slug='foo',
         )
+        # XXX: handle legacy team fixture
+        queryset = OrganizationMember.objects.filter(
+            organization=self.organization,
+        )
+        for om in queryset:
+            OrganizationMemberTeam.objects.create(
+                team=team,
+                organizationmember=om,
+                is_active=True,
+            )
+        return team
 
     @fixture
     def project(self):
@@ -88,13 +99,12 @@ class Fixtures(object):
         self.create_member(
             organization=org,
             user=owner,
-            type=OrganizationMemberType.OWNER,
-            has_global_access=True,
+            role='owner',
         )
         return org
 
     def create_member(self, teams=None, **kwargs):
-        kwargs.setdefault('type', OrganizationMemberType.MEMBER)
+        kwargs.setdefault('role', 'member')
 
         om = OrganizationMember.objects.create(**kwargs)
         if teams:
@@ -102,6 +112,7 @@ class Fixtures(object):
                 OrganizationMemberTeam.objects.create(
                     team=team,
                     organizationmember=om,
+                    is_active=True,
                 )
         return om
 
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index a3b2adb0f2..809df84206 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -260,13 +260,10 @@ class MockUtils(object):
             user=owner,
             organization=org,
             defaults={
-                'has_global_access': False,
+                'role': 'member',
             }
         )
 
-        if dummy_member.has_global_access:
-            dummy_member.update(has_global_access=False)
-
         return org
 
     def create_api_key(self, org, label='Default'):
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index b7e50fa873..695b74c7b8 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -1,225 +1,10 @@
 from __future__ import absolute_import
 
-import logging
-import warnings
-
 from functools import wraps
 from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect, HttpResponse
-from django.shortcuts import get_object_or_404
-from sudo.decorators import sudo_required
-
-from sentry.constants import MEMBER_OWNER
-from sentry.models import Organization, Project, Team, Group
-from sentry.web.helpers import (
-    render_to_response, get_login_url)
-
-
-def has_access(access_or_func=None, organization=None, access=None):
-    """
-    Tests and transforms project_id for permissions based on the requesting
-    user. Passes the actual project instance to the decorated view.
-
-    The default permission scope is 'user', which
-    allows both 'user' and 'owner' access, but not 'system agent'.
-
-    >>> @has_access(MEMBER_OWNER)
-    >>> def foo(request, project):
-    >>>     return
-
-    >>> @has_access
-    >>> def foo(request, project):
-    >>>     return
-    """
-    # TODO(dcramer): this code is far too hacky these days and should
-    # be replaced with class based views
-
-    if callable(access_or_func):
-        return has_access(None)(access_or_func)
-
-    access = access_or_func
-
-    def wrapped(func):
-        warnings.warn(
-            '%s.%s is used deprecated @has_access' % (func.__module__, func.__name__),
-            DeprecationWarning)
-
-        @wraps(func)
-        def _wrapped(request, *args, **kwargs):
-            # All requests require authentication
-            if not request.user.is_authenticated():
-                request.session['_next'] = request.get_full_path()
-                if request.is_ajax():
-                    return HttpResponse(status=401)
-
-                if 'organization_slug' in kwargs:
-                    redirect_uri = reverse('sentry-auth-organization',
-                                           args=[kwargs['organization_slug']])
-                else:
-                    redirect_uri = get_login_url()
-                return HttpResponseRedirect(redirect_uri)
-
-            has_org = 'organization_slug' in kwargs
-            has_team = 'team_slug' in kwargs
-            has_project = 'project_id' in kwargs
-
-            organization_slug = kwargs.pop('organization_slug', None)
-            team_slug = kwargs.pop('team_slug', None)
-            project_id = kwargs.pop('project_id', None)
-
-            assert not has_team or has_org, \
-                'Must pass organization_slug with team_slug'
-
-            if organization_slug:
-                if not request.user.is_superuser:
-                    if has_team or has_project:
-                        org_access = None
-                    else:
-                        org_access = access
-                    org_list = Organization.objects.get_for_user(
-                        user=request.user,
-                        access=org_access,
-                    )
-
-                    for o in org_list:
-                        if o.slug == organization_slug:
-                            organization = o
-                            break
-                    else:
-                        logging.debug('User %s is not listed in organization with slug %s', request.user.id, organization_slug)
-                        if request.is_ajax():
-                            return HttpResponse(status=400)
-                        return HttpResponseRedirect(reverse('sentry'))
-
-                else:
-                    try:
-                        organization = Organization.objects.get_from_cache(
-                            slug=organization_slug,
-                        )
-                    except Organization.DoesNotExist:
-                        logging.debug('Organization with slug %s does not exist', organization_slug)
-                        if request.is_ajax():
-                            return HttpResponse(status=400)
-                        return HttpResponseRedirect(reverse('sentry'))
-
-            else:
-                organization = None
-
-            if team_slug:
-                if not request.user.is_superuser:
-                    team_list = Team.objects.get_for_user(
-                        user=request.user,
-                        access=access,
-                        organization=organization,
-                    )
-
-                    for t in team_list:
-                        if t.slug == team_slug:
-                            team = t
-                            break
-                    else:
-                        logging.debug('User %s is not listed in team with slug %s', request.user.id, team_slug)
-                        if request.is_ajax():
-                            return HttpResponse(status=400)
-                        return HttpResponseRedirect(reverse('sentry'))
-
-                else:
-                    try:
-                        team = Team.objects.get_from_cache(
-                            slug=team_slug,
-                            organization=organization,
-                        )
-                    except Team.DoesNotExist:
-                        logging.debug('Team with slug %s does not exist', team_slug)
-                        if request.is_ajax():
-                            return HttpResponse(status=400)
-                        return HttpResponseRedirect(reverse('sentry'))
-
-            else:
-                team = None
-
-            if project_id:
-                # Support project id's
-                if project_id.isdigit():
-                    lookup_kwargs = {'id': int(project_id)}
-                elif organization:
-                    lookup_kwargs = {'slug': project_id, 'organization': organization}
-                else:
-                    return HttpResponseRedirect(reverse('sentry'))
-
-                try:
-                    project = Project.objects.get_from_cache(**lookup_kwargs)
-                except Project.DoesNotExist:
-                    if project_id.isdigit():
-                        # It could be a numerical slug
-                        try:
-                            project = Project.objects.get_from_cache(slug=project_id)
-                        except Project.DoesNotExist:
-                            if request.is_ajax():
-                                return HttpResponse(status=400)
-                            return HttpResponseRedirect(reverse('sentry'))
-                    else:
-                        if request.is_ajax():
-                            return HttpResponse(status=400)
-                        return HttpResponseRedirect(reverse('sentry'))
-
-                if not request.user.is_superuser and not project.has_access(request.user, access=access):
-                    if request.is_ajax():
-                        return HttpResponse(status=400)
-                    return HttpResponseRedirect(reverse('sentry'))
-            else:
-                project = None
-
-            if has_project:
-                kwargs['project'] = project
-
-            if has_team:
-                kwargs['team'] = team
-
-            if has_org:
-                kwargs['organization'] = organization
-
-            return func(request, *args, **kwargs)
-
-        if access == MEMBER_OWNER:
-            _wrapped = login_required(sudo_required(_wrapped))
-        return _wrapped
-    return wrapped
-
-
-def has_group_access(func=None, **kwargs):
-    """
-    Tests and transforms project_id and group_id for permissions based on
-    the requesting user. Passes the actual project and group instances to
-    the decorated view.
-
-    >>> @has_group_access(allow_public=True)
-    >>> def foo(request, project, group):
-    >>>     return
-    """
-    if func:
-        return has_group_access(**kwargs)(func)
-
-    allow_public = kwargs.get('allow_public')
-
-    def decorator(func):
-        prv_func = login_required(has_access(func))
-
-        @wraps(func)
-        def wrapped(request, organization_slug, project_id, group_id, *args, **kwargs):
-            group = get_object_or_404(Group, pk=group_id)
-
-            if project_id not in (group.project.slug, str(group.project.id)):
-                return HttpResponse(status=404)
-
-            if allow_public and (group.is_public or group.project.public):
-                organization = Organization.objects.get_from_cache(slug=organization_slug)
-                group.project.organization = organization
-                return func(request, organization=organization, project=group.project, group=group, *args, **kwargs)
+from django.http import HttpResponseRedirect
 
-            return prv_func(request, organization_slug=organization_slug, project_id=project_id, group=group, *args, **kwargs)
-        return wrapped
-    return decorator
+from sentry.web.helpers import render_to_response, get_login_url
 
 
 def login_required(func):
diff --git a/src/sentry/web/forms/add_organization_member.py b/src/sentry/web/forms/add_organization_member.py
index 77e3006c22..e75be530aa 100644
--- a/src/sentry/web/forms/add_organization_member.py
+++ b/src/sentry/web/forms/add_organization_member.py
@@ -5,7 +5,6 @@ from django.db import transaction, IntegrityError
 
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
-    OrganizationMemberType
 )
 from sentry.web.forms.fields import UserField
 
@@ -14,13 +13,12 @@ class AddOrganizationMemberForm(forms.ModelForm):
     user = UserField()
 
     class Meta:
-        fields = ('user',)
+        fields = ('user', 'role')
         model = OrganizationMember
 
     def save(self, actor, organization, ip_address):
         om = super(AddOrganizationMemberForm, self).save(commit=False)
         om.organization = organization
-        om.type = OrganizationMemberType.MEMBER
 
         with transaction.atomic():
             try:
diff --git a/src/sentry/web/forms/edit_organization_member.py b/src/sentry/web/forms/edit_organization_member.py
index 1c084f2eca..9abe386cce 100644
--- a/src/sentry/web/forms/edit_organization_member.py
+++ b/src/sentry/web/forms/edit_organization_member.py
@@ -1,27 +1,14 @@
 from __future__ import absolute_import
 
 from django import forms
-from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
-    OrganizationMemberTeam, OrganizationMemberType, Team
-)
-from sentry.web.forms.fields import CustomTypedChoiceField
-
-MEMBERSHIP_CHOICES = (
-    (OrganizationMemberType.MEMBER, _('Member')),
-    (OrganizationMemberType.ADMIN, _('Admin')),
-    (OrganizationMemberType.OWNER, _('Owner')),
+    OrganizationMemberTeam, Team
 )
 
 
 class EditOrganizationMemberForm(forms.ModelForm):
-    type = CustomTypedChoiceField(label=_('Role'), choices=(), coerce=int)
-    has_global_access = forms.BooleanField(
-        label=_('This member should have global access within the organization (including all teams).'),
-        required=False,
-    )
     teams = forms.ModelMultipleChoiceField(
         queryset=Team.objects.none(),
         widget=forms.CheckboxSelectMultiple(),
@@ -29,16 +16,12 @@ class EditOrganizationMemberForm(forms.ModelForm):
     )
 
     class Meta:
-        fields = ('type', 'has_global_access')
+        fields = ('role',)
         model = OrganizationMember
 
-    def __init__(self, authorizing_access, *args, **kwargs):
+    def __init__(self, *args, **kwargs):
         super(EditOrganizationMemberForm, self).__init__(*args, **kwargs)
 
-        self.fields['type'].choices = [
-            m for m in MEMBERSHIP_CHOICES
-            if m[0] >= authorizing_access
-        ]
         self.fields['teams'].queryset = Team.objects.filter(
             organization=self.instance.organization,
         )
diff --git a/src/sentry/web/forms/invite_organization_member.py b/src/sentry/web/forms/invite_organization_member.py
index dea58cddf0..93159e811d 100644
--- a/src/sentry/web/forms/invite_organization_member.py
+++ b/src/sentry/web/forms/invite_organization_member.py
@@ -4,20 +4,18 @@ from django import forms
 from django.db import transaction, IntegrityError
 
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
-    OrganizationMemberType
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMember
 )
 
 
 class InviteOrganizationMemberForm(forms.ModelForm):
     class Meta:
-        fields = ('email',)
+        fields = ('email', 'role')
         model = OrganizationMember
 
     def save(self, actor, organization, ip_address):
         om = super(InviteOrganizationMemberForm, self).save(commit=False)
         om.organization = organization
-        om.type = OrganizationMemberType.MEMBER
 
         try:
             existing = OrganizationMember.objects.filter(
diff --git a/src/sentry/web/frontend/accept_organization_invite.py b/src/sentry/web/frontend/accept_organization_invite.py
index a40f4fdee5..9f05ba40d8 100644
--- a/src/sentry/web/frontend/accept_organization_invite.py
+++ b/src/sentry/web/frontend/accept_organization_invite.py
@@ -55,18 +55,7 @@ class AcceptOrganizationInviteView(BaseView):
 
         organization = om.organization
 
-        if om.has_global_access:
-            qs = Project.objects.filter(
-                team__organization=organization,
-            )
-        else:
-            qs = Project.objects.filter(
-                team__in=om.teams.all(),
-            )
-
-        qs = qs.select_related('team')
-
-        project_list = list(qs)
+        project_list = list(Project.objects.select_related('team'))
 
         context = {
             'organization': om.organization,
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index 27cdc776e3..1e3d631581 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -8,7 +8,7 @@ from django.views.decorators.cache import never_cache
 
 from sentry import features
 from sentry.auth.helper import AuthHelper
-from sentry.models import AuthProvider, Organization, OrganizationMemberType
+from sentry.models import AuthProvider, Organization
 from sentry.utils.auth import get_login_redirect
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
@@ -45,8 +45,7 @@ class AuthOrganizationLoginView(BaseView):
             user = register_form.save()
 
             defaults = {
-                'has_global_access': True,
-                'type': OrganizationMemberType.MEMBER,
+                'role': 'member',
             }
 
             organization.member_set.create(
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 53fb532a70..eef31b6c34 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -25,8 +25,7 @@ class OrganizationMixin(object):
     # TODO(dcramer): move the implicit organization logic into its own class
     # as it's only used in a single location and over complicates the rest of
     # the code
-    def get_active_organization(self, request, organization_slug=None,
-                                access=None):
+    def get_active_organization(self, request, organization_slug=None):
         """
         Returns the currently active organization for the request or None
         if no organization.
@@ -54,7 +53,6 @@ class OrganizationMixin(object):
         if active_organization is None:
             organizations = Organization.objects.get_for_user(
                 user=request.user,
-                access=access,
             )
 
         if active_organization is None and organization_slug:
@@ -85,7 +83,7 @@ class OrganizationMixin(object):
 
         return active_organization
 
-    def get_active_team(self, request, organization, team_slug, access=None):
+    def get_active_team(self, request, organization, team_slug):
         """
         Returns the currently selected team for the request or None
         if no match.
@@ -98,12 +96,9 @@ class OrganizationMixin(object):
         except Team.DoesNotExist:
             return None
 
-        if not request.user.is_superuser and not team.has_access(request.user, access):
-            return None
-
         return team
 
-    def get_active_project(self, request, organization, project_slug, access=None):
+    def get_active_project(self, request, organization, project_slug):
         try:
             project = Project.objects.get_from_cache(
                 slug=project_slug,
@@ -112,9 +107,6 @@ class OrganizationMixin(object):
         except Project.DoesNotExist:
             return None
 
-        if not request.user.is_superuser and not project.has_access(request.user, access):
-            return None
-
         return project
 
 
@@ -217,7 +209,7 @@ class OrganizationView(BaseView):
     The 'organization' keyword argument is automatically injected into the
     resulting dispatch.
     """
-    required_access = None
+    required_scope = None
     valid_sso_required = True
 
     def get_access(self, request, organization, *args, **kwargs):
@@ -237,6 +229,10 @@ class OrganizationView(BaseView):
             return False
         if self.valid_sso_required and not request.access.sso_is_valid:
             return False
+        if self.required_scope and not request.access.has_scope(self.required_scope):
+            logging.info('User %s does not have %s permission to access organization %s',
+                         request.user, self.required_scope, organization)
+            return False
         return True
 
     def handle_permission_required(self, request, organization, *args, **kwargs):
@@ -261,7 +257,6 @@ class OrganizationView(BaseView):
     def convert_args(self, request, organization_slug=None, *args, **kwargs):
         active_organization = self.get_active_organization(
             request=request,
-            access=self.required_access,
             organization_slug=organization_slug,
         )
 
@@ -286,10 +281,21 @@ class TeamView(OrganizationView):
         return context
 
     def has_permission(self, request, organization, team, *args, **kwargs):
+        if team is None:
+            return False
         rv = super(TeamView, self).has_permission(request, organization)
         if not rv:
             return rv
-        return team is not None
+        if self.required_scope:
+            if not request.access.has_team_scope(team, self.required_scope):
+                logging.info('User %s does not have %s permission to access team %s',
+                             request.user, self.required_scope, team)
+                return False
+        elif not request.access.has_team(team):
+            logging.info('User %s does not have access to team %s',
+                         request.user, team)
+            return False
+        return True
 
     def convert_args(self, request, organization_slug, team_slug, *args, **kwargs):
         active_organization = self.get_active_organization(
@@ -302,7 +308,6 @@ class TeamView(OrganizationView):
                 request=request,
                 team_slug=team_slug,
                 organization=active_organization,
-                access=self.required_access,
             )
         else:
             active_team = None
@@ -330,10 +335,23 @@ class ProjectView(TeamView):
         return context
 
     def has_permission(self, request, organization, team, project, *args, **kwargs):
+        if project is None:
+            return False
+        if team is None:
+            return False
         rv = super(ProjectView, self).has_permission(request, organization, team)
         if not rv:
             return rv
-        return project is not None
+        if self.required_scope:
+            if not request.access.has_team_scope(team, self.required_scope):
+                logging.info('User %s does not have %s permission to access project %s',
+                             request.user, self.required_scope, project)
+                return False
+        elif not request.access.has_team(team):
+            logging.info('User %s does not have access to project %s',
+                         request.user, project)
+            return False
+        return True
 
     def convert_args(self, request, organization_slug, project_slug, *args, **kwargs):
         active_organization = self.get_active_organization(
@@ -346,7 +364,6 @@ class ProjectView(TeamView):
                 request=request,
                 organization=active_organization,
                 project_slug=project_slug,
-                access=self.required_access,
             )
         else:
             active_project = None
diff --git a/src/sentry/web/frontend/create_organization.py b/src/sentry/web/frontend/create_organization.py
index 356a248619..364891b895 100644
--- a/src/sentry/web/frontend/create_organization.py
+++ b/src/sentry/web/frontend/create_organization.py
@@ -5,10 +5,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry import features
+from sentry import features, roles
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationMember,
-    OrganizationMemberType
+    AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationMember
 )
 from sentry.web.frontend.base import BaseView
 
@@ -37,8 +36,7 @@ class CreateOrganizationView(BaseView):
             OrganizationMember.objects.create(
                 organization=org,
                 user=request.user,
-                type=OrganizationMemberType.OWNER,
-                has_global_access=True,
+                role=roles.get_top_dog().id,
             )
 
             AuditLogEntry.objects.create(
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index c5330bebfc..cb17df9f22 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -6,18 +6,16 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationMemberType
+from sentry import roles
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.forms.invite_organization_member import InviteOrganizationMemberForm
 from sentry.web.forms.add_organization_member import AddOrganizationMemberForm
 
 
 class CreateOrganizationMemberView(OrganizationView):
-    required_access = OrganizationMemberType.ADMIN
-
-    def get_form(self, request):
+    def get_form(self, request, organization):
         initial = {
-            'type': OrganizationMemberType.MEMBER,
+            'role': organization.default_role,
         }
 
         if settings.SENTRY_ENABLE_INVITES:
@@ -28,7 +26,7 @@ class CreateOrganizationMemberView(OrganizationView):
         return form_cls(request.POST or None, initial=initial)
 
     def handle(self, request, organization):
-        form = self.get_form(request)
+        form = self.get_form(request, organization)
         if form.is_valid():
             om, created = form.save(request.user, organization, request.META['REMOTE_ADDR'])
 
@@ -47,6 +45,7 @@ class CreateOrganizationMemberView(OrganizationView):
         context = {
             'form': form,
             'is_invite': settings.SENTRY_ENABLE_INVITES,
+            'role_list': roles.get_all(),
         }
 
         return self.respond('sentry/create-organization-member.html', context)
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index b7ea1ee2e4..e651b45abc 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -4,9 +4,7 @@ from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
 
-from sentry.models import (
-    OrganizationMember, OrganizationMemberType, Project, Team
-)
+from sentry.models import Project, Team
 from sentry.web.forms.add_project import AddProjectForm
 from sentry.web.frontend.base import OrganizationView
 
@@ -54,30 +52,21 @@ class CreateProjectView(OrganizationView):
     # TODO(dcramer): I'm 95% certain the access is incorrect here as it would
     # be probably validating against global org access, and all we care about is
     # team admin
+    required_scope = 'team:write'
+
     def get_form(self, request, organization, team_list):
         return AddProjectWithTeamForm(request.user, team_list, request.POST or None, initial={
             'team': request.GET.get('team'),
         })
 
-    def has_permission(self, request, organization):
-        if organization is None:
-            return False
-        if request.user.is_superuser:
-            return True
-        # we special case permissions here as a team admin can create projects
-        # but they are restricted to only creating projects on teams where they
-        # are an admin
-        return OrganizationMember.objects.filter(
-            user=request.user,
-            type__lte=OrganizationMemberType.ADMIN,
-        )
-
     def handle(self, request, organization):
-        team_list = Team.objects.get_for_user(
-            organization=organization,
-            user=request.user,
-            access=OrganizationMemberType.ADMIN,
-        )
+        team_list = [
+            t for t in Team.objects.get_for_user(
+                organization=organization,
+                user=request.user,
+            )
+            if request.access.has_team_scope(t, self.required_scope)
+        ]
         if not team_list:
             messages.error(request, ERR_NO_TEAMS)
             return self.redirect(reverse('sentry-organization-home', args=[organization.slug]))
diff --git a/src/sentry/web/frontend/create_project_key.py b/src/sentry/web/frontend/create_project_key.py
new file mode 100644
index 0000000000..a9e8320d19
--- /dev/null
+++ b/src/sentry/web/frontend/create_project_key.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, ProjectKey
+from sentry.web.frontend.base import ProjectView
+
+
+class CreateProjectKeyView(ProjectView):
+    required_scope = 'project:write'
+
+    def post(self, request, organization, team, project):
+        key = ProjectKey.objects.create(
+            project=project,
+        )
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=key.id,
+            event=AuditLogEntryEvent.PROJECTKEY_ADD,
+            data=key.get_audit_log_data(),
+        )
+
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index cf0842c29d..fc8e9d81af 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -2,13 +2,12 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import OrganizationMemberType
 from sentry.web.forms.add_team import AddTeamForm
 from sentry.web.frontend.base import OrganizationView
 
 
 class CreateTeamView(OrganizationView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'team:write'
 
     def get_form(self, request):
         return AddTeamForm(request.POST or None, initial={
diff --git a/src/sentry/web/frontend/disable_project_key.py b/src/sentry/web/frontend/disable_project_key.py
new file mode 100644
index 0000000000..ee89138625
--- /dev/null
+++ b/src/sentry/web/frontend/disable_project_key.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
+)
+from sentry.web.frontend.base import ProjectView
+
+
+class DisableProjectKeyView(ProjectView):
+    required_scope = 'project:write'
+
+    def post(self, request, organization, team, project, key_id):
+        try:
+            key = ProjectKey.objects.get(id=key_id)
+        except ProjectKey.DoesNotExist:
+            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
+
+        key.update(status=ProjectKeyStatus.INACTIVE)
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=key.id,
+            event=AuditLogEntryEvent.PROJECTKEY_DISABLE,
+            data=key.get_audit_log_data(),
+        )
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('The API key (%s) was disabled.') % (key.public_key,))
+
+        return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/edit_project_key.py b/src/sentry/web/frontend/edit_project_key.py
new file mode 100644
index 0000000000..c144df77b5
--- /dev/null
+++ b/src/sentry/web/frontend/edit_project_key.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, ProjectKey
+from sentry.web.forms.projectkeys import EditProjectKeyForm
+from sentry.web.frontend.base import ProjectView
+
+
+class EditProjectKeyView(ProjectView):
+    required_scope = 'project:write'
+
+    def handle(self, request, organization, team, project, key_id):
+        try:
+            key = ProjectKey.objects.get(
+                id=key_id,
+                project=project,
+            )
+        except ProjectKey.DoesNotExist():
+            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
+
+        form = EditProjectKeyForm(request.POST or None, instance=key)
+        if form.is_valid():
+            key = form.save()
+
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=key.id,
+                event=AuditLogEntryEvent.PROJECTKEY_EDIT,
+                data=key.get_audit_log_data(),
+            )
+
+            messages.add_message(
+                request, messages.SUCCESS,
+                _('Changes to the API key (%s) were saved.') % (key.public_key,))
+            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
+
+        context = {
+            'page': 'keys',
+            'key': key,
+            'form': form,
+        }
+
+        return self.respond('sentry/projects/edit_key.html', context)
diff --git a/src/sentry/web/frontend/enable_project_key.py b/src/sentry/web/frontend/enable_project_key.py
new file mode 100644
index 0000000000..55b2d01418
--- /dev/null
+++ b/src/sentry/web/frontend/enable_project_key.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
+)
+from sentry.web.frontend.base import ProjectView
+
+
+class EnableProjectKeyView(ProjectView):
+    required_scope = 'project:write'
+
+    def post(self, request, organization, team, project, key_id):
+        try:
+            key = ProjectKey.objects.get(id=key_id)
+        except ProjectKey.DoesNotExist:
+            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
+
+        key.update(status=ProjectKeyStatus.ACTIVE)
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=key.id,
+            event=AuditLogEntryEvent.PROJECTKEY_ENABLE,
+            data=key.get_audit_log_data(),
+        )
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('The API key (%s) was enabled.') % (key.public_key,))
+
+        return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/events.py b/src/sentry/web/frontend/events.py
deleted file mode 100644
index 32d22d6c8a..0000000000
--- a/src/sentry/web/frontend/events.py
+++ /dev/null
@@ -1,80 +0,0 @@
-"""
-sentry.web.frontend.events
-~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-import urlparse
-
-from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.views.decorators.csrf import csrf_protect
-
-from sentry.models import Event
-from sentry.replays import Replayer
-from sentry.utils.http import safe_urlencode
-from sentry.web.decorators import has_group_access, render_to_response
-from sentry.web.forms import ReplayForm
-
-
-@has_group_access
-@csrf_protect
-def replay_event(request, organization, project, group, event_id):
-    try:
-        event = Event.objects.get(group=group, id=event_id)
-    except Event.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    Event.objects.bind_nodes([event], 'data')
-
-    interfaces = event.interfaces
-    if 'sentry.interfaces.Http' not in interfaces:
-        # TODO: show a proper error
-        return HttpResponseRedirect(reverse('sentry'))
-
-    # TODO(mattrobenolt): Add Cookie as a header
-    http = interfaces['sentry.interfaces.Http']
-    if http.headers:
-        headers = '\n'.join('%s: %s' % (k, v) for k, v in http.headers if k[0].upper() == k[0])
-    else:
-        headers = ''
-
-    if isinstance(http.data, dict):
-        data = safe_urlencode(http.data)
-    else:
-        data = http.data
-
-    initial = {
-        'url': urlparse.urldefrag(http.full_url)[0],
-        'method': http.method,
-        'headers': headers,
-        'data': data,
-    }
-
-    form = ReplayForm(request.POST or None, initial=initial)
-    if form.is_valid():
-        result = Replayer(
-            url=form.cleaned_data['url'],
-            method=form.cleaned_data['method'],
-            data=form.cleaned_data['data'],
-            headers=form.cleaned_data['headers'],
-        ).replay()
-    else:
-        result = None
-
-    context = {
-        'organization': organization,
-        'team': project.team,
-        'project': project,
-        'group': event.group,
-        'event': event,
-        'form': form,
-        'result': result,
-    }
-    context.update(csrf(request))
-
-    return render_to_response('sentry/events/replay_request.html', context, request)
diff --git a/src/sentry/web/frontend/group_event_json.py b/src/sentry/web/frontend/group_event_json.py
new file mode 100644
index 0000000000..c88ef9e657
--- /dev/null
+++ b/src/sentry/web/frontend/group_event_json.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import, division
+
+from django.http import HttpResponse
+from django.shortcuts import get_object_or_404
+
+from sentry.models import Group, GroupMeta, Event
+from sentry.utils import json
+from sentry.web.frontend.base import ProjectView
+
+
+class GroupEventJsonView(ProjectView):
+    required_scope = 'event:read'
+
+    def get(self, request, organization, project, team, group_id, event_id_or_latest):
+        group = get_object_or_404(Group, pk=group_id, project=project)
+
+        if event_id_or_latest == 'latest':
+            # It's possible that a message would not be created under certain
+            # circumstances (such as a post_save signal failing)
+            event = group.get_latest_event() or Event(group=group)
+        else:
+            event = get_object_or_404(group.event_set, pk=event_id_or_latest)
+
+        Event.objects.bind_nodes([event], 'data')
+        GroupMeta.objects.populate_cache([group])
+
+        return HttpResponse(json.dumps(event.as_dict()), mimetype='application/json')
diff --git a/src/sentry/web/frontend/group_plugin_action.py b/src/sentry/web/frontend/group_plugin_action.py
new file mode 100644
index 0000000000..fe33e4d766
--- /dev/null
+++ b/src/sentry/web/frontend/group_plugin_action.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import, division
+
+from django.core.urlresolvers import reverse
+from django.http import Http404, HttpResponseRedirect
+from django.shortcuts import get_object_or_404
+
+from sentry.models import Group, GroupMeta
+from sentry.plugins import plugins
+from sentry.web.frontend.base import ProjectView
+
+
+class GroupPluginActionView(ProjectView):
+    required_scope = 'event:read'
+
+    def handle(self, request, organization, team, project, group_id, slug):
+        group = get_object_or_404(Group, pk=group_id, project=project)
+
+        try:
+            plugin = plugins.get(slug)
+        except KeyError:
+            raise Http404('Plugin not found')
+
+        GroupMeta.objects.populate_cache([group])
+
+        response = plugin.get_view_response(request, group)
+        if response:
+            return response
+
+        redirect = request.META.get('HTTP_REFERER') or reverse('sentry-stream', kwargs={
+            'organization_slug': organization.slug,
+            'project_id': group.project.slug
+        })
+        return HttpResponseRedirect(redirect)
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
deleted file mode 100644
index 6b1a6b4b61..0000000000
--- a/src/sentry/web/frontend/groups.py
+++ /dev/null
@@ -1,64 +0,0 @@
-"""
-sentry.web.frontend.groups
-~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-Contains views for the "Events" section of Sentry.
-
-TODO: Move all events.py views into here, and rename this file to events.
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import, division
-
-from django.core.urlresolvers import reverse
-from django.http import (
-    Http404, HttpResponse, HttpResponseRedirect
-)
-from django.shortcuts import get_object_or_404
-
-from sentry.constants import MEMBER_USER
-from sentry.models import Group, GroupMeta, Event
-from sentry.plugins import plugins
-from sentry.utils import json
-from sentry.web.decorators import has_access, login_required
-
-
-@has_access(MEMBER_USER)
-def group_event_details_json(request, organization, project, group_id, event_id_or_latest):
-    group = get_object_or_404(Group, pk=group_id, project=project)
-
-    if event_id_or_latest == 'latest':
-        # It's possible that a message would not be created under certain
-        # circumstances (such as a post_save signal failing)
-        event = group.get_latest_event() or Event(group=group)
-    else:
-        event = get_object_or_404(group.event_set, pk=event_id_or_latest)
-
-    Event.objects.bind_nodes([event], 'data')
-    GroupMeta.objects.populate_cache([group])
-
-    return HttpResponse(json.dumps(event.as_dict()), mimetype='application/json')
-
-
-@login_required
-@has_access(MEMBER_USER)
-def group_plugin_action(request, organization, project, group_id, slug):
-    group = get_object_or_404(Group, pk=group_id, project=project)
-
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        raise Http404('Plugin not found')
-
-    GroupMeta.objects.populate_cache([group])
-
-    response = plugin.get_view_response(request, group)
-    if response:
-        return response
-
-    redirect = request.META.get('HTTP_REFERER') or reverse('sentry-stream', kwargs={
-        'organization_slug': organization.slug,
-        'project_id': group.project.slug
-    })
-    return HttpResponseRedirect(redirect)
diff --git a/src/sentry/web/frontend/organization_api_key_settings.py b/src/sentry/web/frontend/organization_api_key_settings.py
index 585a45d25e..b518c9467f 100644
--- a/src/sentry/web/frontend/organization_api_key_settings.py
+++ b/src/sentry/web/frontend/organization_api_key_settings.py
@@ -6,7 +6,7 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import (
-    ApiKey, AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType
+    ApiKey, AuditLogEntry, AuditLogEntryEvent
 )
 from sentry.web.forms.fields import OriginsField
 from sentry.web.frontend.base import OrganizationView
@@ -22,7 +22,7 @@ class ApiKeyForm(forms.ModelForm):
 
 
 class OrganizationApiKeySettingsView(OrganizationView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'org:write'
 
     def handle(self, request, organization, key_id):
         key = ApiKey.objects.get(organization=organization, id=key_id)
diff --git a/src/sentry/web/frontend/organization_api_keys.py b/src/sentry/web/frontend/organization_api_keys.py
index 23723f292f..86161c7f2f 100644
--- a/src/sentry/web/frontend/organization_api_keys.py
+++ b/src/sentry/web/frontend/organization_api_keys.py
@@ -4,9 +4,7 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from operator import or_
 
-from sentry.models import (
-    ApiKey, AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType
-)
+from sentry.models import ApiKey, AuditLogEntry, AuditLogEntryEvent
 from sentry.web.frontend.base import OrganizationView
 
 DEFAULT_SCOPES = [
@@ -19,7 +17,7 @@ DEFAULT_SCOPES = [
 
 
 class OrganizationApiKeysView(OrganizationView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'org:delete'
 
     def handle(self, request, organization):
         if request.POST.get('op') == 'newkey':
diff --git a/src/sentry/web/frontend/organization_audit_log.py b/src/sentry/web/frontend/organization_audit_log.py
index 9007f020b5..8788a9b87d 100644
--- a/src/sentry/web/frontend/organization_audit_log.py
+++ b/src/sentry/web/frontend/organization_audit_log.py
@@ -1,13 +1,11 @@
 from __future__ import absolute_import
 
-from sentry.models import (
-    AuditLogEntry, OrganizationMemberType
-)
+from sentry.models import AuditLogEntry
 from sentry.web.frontend.base import OrganizationView
 
 
 class OrganizationAuditLogView(OrganizationView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'org:write'
 
     def get(self, request, organization):
         queryset = AuditLogEntry.objects.filter(
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index ada846a30f..6621d1ab56 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -8,12 +8,11 @@ from django.db.models import F
 from django.http import HttpResponse, HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry import features
+from sentry import features, roles
 from sentry.auth import manager
 from sentry.auth.helper import AuthHelper
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, AuthProvider, OrganizationMember,
-    OrganizationMemberType
+    AuditLogEntry, AuditLogEntryEvent, AuthProvider, OrganizationMember
 )
 from sentry.plugins import Response
 from sentry.utils import db
@@ -26,12 +25,6 @@ OK_PROVIDER_DISABLED = _('SSO authentication has been disabled.')
 
 OK_REMINDERS_SENT = _('A reminder email has been sent to members who have not yet linked their accounts.')
 
-MEMBERSHIP_CHOICES = (
-    (OrganizationMemberType.MEMBER, _('Member')),
-    (OrganizationMemberType.ADMIN, _('Admin')),
-    (OrganizationMemberType.OWNER, _('Owner')),
-)
-
 
 class AuthProviderSettingsForm(forms.Form):
     require_link = forms.BooleanField(
@@ -39,20 +32,15 @@ class AuthProviderSettingsForm(forms.Form):
         help_text=_('Require members use a valid linked SSO account to access this organization'),
         required=False,
     )
-    default_global_access = forms.BooleanField(
-        label=_('Default Global Access'),
-        required=False,
-        help_text=_('Give new members access to all teams by default (global access).'),
-    )
     default_role = forms.ChoiceField(
         label=_('Default Role'),
-        choices=MEMBERSHIP_CHOICES,
+        choices=roles.get_choices(),
         help_text=_('The default role new members will receive when logging in for the first time.'),
     )
 
 
 class OrganizationAuthSettingsView(OrganizationView):
-    required_access = OrganizationMemberType.OWNER
+    required_scope = 'org:delete'
 
     def _disable_provider(self, request, organization, auth_provider):
         AuditLogEntry.objects.create(
@@ -122,17 +110,17 @@ class OrganizationAuthSettingsView(OrganizationView):
             data=request.POST if request.POST.get('op') == 'settings' else None,
             initial={
                 'require_link': not auth_provider.flags.allow_unlinked,
-                'default_role': auth_provider.default_role,
-                'default_global_access': auth_provider.default_global_access,
+                'default_role': organization.default_role,
             },
         )
 
         if form.is_valid():
             auth_provider.flags.allow_unlinked = not form.cleaned_data['require_link']
-            auth_provider.default_role = form.cleaned_data['default_role']
-            auth_provider.default_global_access = form.cleaned_data.get('default_global_access') or False
             auth_provider.save()
 
+            organization.default_role = form.cleaned_data['default_role']
+            organization.save()
+
         view = provider.get_configure_view()
         response = view(request, organization, auth_provider)
         if isinstance(response, HttpResponse):
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 8fdeeac024..b96d0a6f3c 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -4,21 +4,24 @@ from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.utils.translation import ugettext_lazy as _, ugettext
 
-from sentry.models import OrganizationMember, OrganizationMemberType, Team
+from sentry import roles
+from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
 
 
 class OrganizationMemberSettingsView(OrganizationView):
-    def get_form(self, request, member, authorizing_access):
+    def get_form(self, request, member):
         return EditOrganizationMemberForm(
-            authorizing_access=authorizing_access,
             data=request.POST or None,
             instance=member,
             initial={
-                'type': member.type,
-                'has_global_access': member.has_global_access,
-                'teams': member.get_teams(),
+                'role': member.role,
+                'teams': Team.objects.filter(
+                    id__in=OrganizationMemberTeam.objects.filter(
+                        organizationmember=member,
+                    ).values('team'),
+                ),
             }
         )
 
@@ -42,6 +45,7 @@ class OrganizationMemberSettingsView(OrganizationView):
             'all_teams': Team.objects.filter(
                 organization=organization,
             ),
+            'role_list': roles.get_all(),
         }
 
         return self.respond('sentry/organization-member-details.html', context)
@@ -55,19 +59,19 @@ class OrganizationMemberSettingsView(OrganizationView):
         if request.POST.get('op') == 'reinvite' and member.is_pending:
             return self.resend_invite(request, organization, member)
 
-        if request.user.is_superuser:
-            authorizing_access = OrganizationMemberType.OWNER
-        else:
-            membership = OrganizationMember.objects.get(
+        can_admin = request.access.has_scope('member:delete')
+
+        if can_admin and not request.user.is_superuser:
+            acting_member = OrganizationMember.objects.get(
                 user=request.user,
                 organization=organization,
             )
-            authorizing_access = membership.type
+            can_admin = acting_member.can_manage_member(member)
 
-        if member.user == request.user or authorizing_access > member.type:
+        if member.user == request.user or not can_admin:
             return self.view_member(request, organization, member)
 
-        form = self.get_form(request, member, authorizing_access)
+        form = self.get_form(request, member)
         if form.is_valid():
             member = form.save(request.user, organization, request.META['REMOTE_ADDR'])
 
@@ -82,6 +86,7 @@ class OrganizationMemberSettingsView(OrganizationView):
         context = {
             'member': member,
             'form': form,
+            'role_list': roles.get_all(),
         }
 
         return self.respond('sentry/organization-member-settings.html', context)
diff --git a/src/sentry/web/frontend/organization_members.py b/src/sentry/web/frontend/organization_members.py
index db21460fb1..c4466101b4 100644
--- a/src/sentry/web/frontend/organization_members.py
+++ b/src/sentry/web/frontend/organization_members.py
@@ -1,35 +1,15 @@
 from __future__ import absolute_import
 
-from collections import defaultdict
-
+from sentry import roles
 from sentry.models import (
-    AuthProvider, OrganizationAccessRequest, OrganizationMember,
-    OrganizationMemberTeam, OrganizationMemberType
+    AuthProvider, OrganizationAccessRequest, OrganizationMember
 )
 from sentry.web.frontend.base import OrganizationView
 
 
 class OrganizationMembersView(OrganizationView):
     def handle(self, request, organization):
-        if request.user.is_superuser:
-            authorizing_access = OrganizationMemberType.OWNER
-            access_is_global = True
-        else:
-            member = OrganizationMember.objects.get(
-                user=request.user,
-                organization=organization,
-            )
-            authorizing_access = member.type
-            access_is_global = member.has_global_access
-
-        queryset = OrganizationMemberTeam.objects.filter(
-            organizationmember__organization=organization,
-            is_active=True,
-        ).select_related('team')
-
-        team_map = defaultdict(list)
-        for omt in queryset:
-            team_map[omt.organizationmember_id].append(omt.team)
+        can_admin = request.access.has_scope('member:delete')
 
         queryset = OrganizationMember.objects.filter(
             organization=organization,
@@ -45,18 +25,18 @@ class OrganizationMembersView(OrganizationView):
         member_list = []
         for om in queryset:
             needs_sso = bool(auth_provider and not getattr(om.flags, 'sso:linked'))
-            member_list.append((om, team_map[om.id], needs_sso))
+            member_list.append((om, needs_sso))
 
         # if the member is not the only owner we allow them to leave the org
         member_can_leave = any(
-            1 for om, _, _ in member_list
-            if (om.type == OrganizationMemberType.OWNER
+            1 for om, _ in member_list
+            if (om.role == roles.get_top_dog().id
                 and om.user != request.user
                 and om.user is not None)
         )
 
         # pending requests
-        if access_is_global and authorizing_access <= OrganizationMemberType.ADMIN:
+        if can_admin:
             access_requests = list(OrganizationAccessRequest.objects.filter(
                 team__organization=organization,
             ).select_related('team', 'member__user'))
@@ -65,11 +45,10 @@ class OrganizationMembersView(OrganizationView):
 
         context = {
             'org_has_sso': auth_provider is not None,
+            'can_admin': can_admin,
             'member_list': member_list,
             'request_list': access_requests,
             'ref': request.GET.get('ref'),
-            'authorizing_access': authorizing_access,
-            'access_is_global': access_is_global,
             'member_can_leave': member_can_leave,
         }
 
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index 0edd074756..886df5f34e 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -6,8 +6,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
+from sentry import roles
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationMemberType
+    AuditLogEntry, AuditLogEntryEvent, Organization
 )
 from sentry.web.frontend.base import OrganizationView
 
@@ -20,20 +21,26 @@ class OrganizationSettingsForm(forms.ModelForm):
         help_text=_('Allow organization members to freely join or leave any team.'),
         required=False,
     )
+    default_role = forms.ChoiceField(
+        label=_('Default Role'),
+        choices=roles.get_choices(),
+        help_text=_('The default role new members will receive.'),
+    )
 
     class Meta:
-        fields = ('name', 'slug')
+        fields = ('name', 'slug', 'default_role')
         model = Organization
 
 
 class OrganizationSettingsView(OrganizationView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'org:write'
 
     def get_form(self, request, organization):
         return OrganizationSettingsForm(
             request.POST or None,
             instance=organization,
             initial={
+                'default_role': organization.default_role,
                 'allow_joinleave': bool(getattr(organization.flags, 'allow_joinleave')),
             }
         )
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
index eddf3d1990..5f509f4866 100644
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ b/src/sentry/web/frontend/project_issue_tracking.py
@@ -5,13 +5,12 @@ from django.http import HttpResponseRedirect, HttpResponse
 from django.utils.safestring import mark_safe
 
 from sentry import constants
-from sentry.models import OrganizationMemberType
 from sentry.plugins import plugins, IssueTrackingPlugin
 from sentry.web.frontend.base import ProjectView
 
 
 class ProjectIssueTrackingView(ProjectView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'project:write'
 
     def _iter_plugins(self):
         for plugin in plugins.all(version=1):
diff --git a/src/sentry/web/frontend/project_keys.py b/src/sentry/web/frontend/project_keys.py
new file mode 100644
index 0000000000..252cb4bda1
--- /dev/null
+++ b/src/sentry/web/frontend/project_keys.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.models import ProjectKey
+from sentry.web.frontend.base import ProjectView
+
+
+class ProjectKeysView(ProjectView):
+    def get(self, request, organization, team, project):
+        key_list = list(ProjectKey.objects.filter(
+            project=project,
+        ).order_by('-id'))
+
+        for key in key_list:
+            key.project = project
+
+        context = {
+            'page': 'keys',
+            'key_list': key_list,
+        }
+
+        return self.respond('sentry/projects/keys.html', context)
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
index 7eda132e22..b770ecca6c 100644
--- a/src/sentry/web/frontend/project_notifications.py
+++ b/src/sentry/web/frontend/project_notifications.py
@@ -7,7 +7,6 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import constants
-from sentry.models import OrganizationMemberType
 from sentry.plugins import plugins, NotificationPlugin
 from sentry.web.forms.projects import NotificationSettingsForm
 from sentry.web.frontend.base import ProjectView
@@ -16,7 +15,7 @@ OK_SETTINGS_SAVED = _('Your settings were saved successfully.')
 
 
 class ProjectNotificationsView(ProjectView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'project:write'
 
     def _iter_plugins(self):
         for plugin in plugins.all(version=1):
diff --git a/src/sentry/web/frontend/project_plugin_configure.py b/src/sentry/web/frontend/project_plugin_configure.py
new file mode 100644
index 0000000000..9d2596d578
--- /dev/null
+++ b/src/sentry/web/frontend/project_plugin_configure.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.http import HttpResponse
+
+from sentry.plugins import plugins
+from sentry.web.frontend.base import ProjectView
+
+
+class ProjectPluginConfigureView(ProjectView):
+    required_scope = 'project:write'
+
+    def handle(self, request, organization, team, project, slug):
+        try:
+            plugin = plugins.get(slug)
+        except KeyError:
+            return self.redirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
+
+        if not plugin.can_configure_for_project(project):
+            return self.redirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
+
+        view = plugin.configure(request, project=project)
+        if isinstance(view, HttpResponse):
+            return view
+
+        context = {
+            'page': 'plugin',
+            'title': plugin.get_title(),
+            'view': view,
+            'plugin': plugin,
+            'plugin_is_enabled': plugin.is_enabled(project),
+        }
+
+        return self.respond('sentry/projects/plugins/configure.html', context)
diff --git a/src/sentry/web/frontend/project_plugin_disable.py b/src/sentry/web/frontend/project_plugin_disable.py
new file mode 100644
index 0000000000..8a202086ca
--- /dev/null
+++ b/src/sentry/web/frontend/project_plugin_disable.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.plugins import plugins
+from sentry.web.frontend.base import ProjectView
+
+
+class ProjectPluginDisableView(ProjectView):
+    required_scope = 'project:write'
+
+    def post(self, request, organization, team, project, slug):
+        try:
+            plugin = plugins.get(slug)
+        except KeyError:
+            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+
+        if not plugin.is_enabled(project):
+            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+
+        plugin.disable(project=project)
+
+        return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
diff --git a/src/sentry/web/frontend/project_plugin_enable.py b/src/sentry/web/frontend/project_plugin_enable.py
new file mode 100644
index 0000000000..61dc1404ed
--- /dev/null
+++ b/src/sentry/web/frontend/project_plugin_enable.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.plugins import plugins
+from sentry.web.frontend.base import ProjectView
+
+
+class ProjectPluginEnableView(ProjectView):
+    required_scope = 'project:write'
+
+    def post(self, request, organization, team, project, slug):
+        try:
+            plugin = plugins.get(slug)
+        except KeyError:
+            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+
+        if not plugin.is_enabled(project):
+            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+
+        plugin.enable(project=project)
+
+        return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
diff --git a/src/sentry/web/frontend/project_plugin_reset.py b/src/sentry/web/frontend/project_plugin_reset.py
new file mode 100644
index 0000000000..e0bc96dc19
--- /dev/null
+++ b/src/sentry/web/frontend/project_plugin_reset.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.plugins import plugins
+from sentry.web.frontend.base import ProjectView
+
+
+class ProjectPluginResetView(ProjectView):
+    required_scope = 'project:write'
+
+    def post(self, request, organization, team, project, slug):
+        try:
+            plugin = plugins.get(slug)
+        except KeyError:
+            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+
+        if not plugin.is_enabled(project):
+            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+
+        plugin.reset_options(project=project)
+
+        return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
diff --git a/src/sentry/web/frontend/project_plugins.py b/src/sentry/web/frontend/project_plugins.py
new file mode 100644
index 0000000000..d17a5c9189
--- /dev/null
+++ b/src/sentry/web/frontend/project_plugins.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from django.contrib import messages
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.plugins import plugins
+from sentry.web.frontend.base import ProjectView
+
+
+class ProjectPluginsView(ProjectView):
+    required_scope = 'project:write'
+
+    def handle(self, request, organization, team, project):
+        if request.POST:
+            enabled = set(request.POST.getlist('plugin'))
+            for plugin in plugins.configurable_for_project(project, version=None):
+                if plugin.slug in enabled:
+                    plugin.enable(project)
+                else:
+                    plugin.disable(project)
+
+            messages.add_message(
+                request, messages.SUCCESS,
+                _('Your settings were saved successfully.'))
+
+            return self.redirect(request.path)
+
+        context = {
+            'page': 'plugins',
+        }
+
+        return self.respond('sentry/projects/plugins/list.html', context)
diff --git a/src/sentry/web/frontend/project_quotas.py b/src/sentry/web/frontend/project_quotas.py
new file mode 100644
index 0000000000..1957d070f0
--- /dev/null
+++ b/src/sentry/web/frontend/project_quotas.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.utils.translation import ugettext_lazy as _
+
+from sentry import app, features
+from sentry.quotas.base import Quota
+from sentry.web.forms.projects import ProjectQuotasForm
+from sentry.web.frontend.base import ProjectView
+
+ERR_NO_SSO = _('The quotas feature is not enabled for this project.')
+
+
+class ProjectQuotasView(ProjectView):
+    required_scope = 'project:write'
+
+    def handle(self, request, organization, team, project):
+        if not features.has('projects:quotas', project, actor=request.user):
+            messages.add_message(
+                request, messages.ERROR,
+                ERR_NO_SSO,
+            )
+            redirect = reverse('sentry-manage-project',
+                               args=[organization.slug, project.slug])
+            return self.redirect(redirect)
+
+        form = ProjectQuotasForm(project, request.POST or None)
+
+        if form and form.is_valid():
+            form.save()
+
+            messages.add_message(
+                request, messages.SUCCESS,
+                _('Your settings were saved successfully.'))
+
+            return self.redirect(reverse('sentry-manage-project-quotas', args=[project.organization.slug, project.slug]))
+
+        context = {
+            'organization': organization,
+            'team': project.team,
+            'page': 'quotas',
+            # TODO(dcramer): has_quotas is an awful hack
+            'has_quotas': type(app.quotas) != Quota,
+            'system_quota': int(app.quotas.get_system_quota()),
+            'team_quota': int(app.quotas.get_team_quota(project.team)),
+            'project': project,
+            'form': form,
+        }
+        return self.respond('sentry/projects/quotas.html', context)
diff --git a/src/sentry/web/frontend/project_release_tracking.py b/src/sentry/web/frontend/project_release_tracking.py
index 9b323f8f9f..4e71e8bec1 100644
--- a/src/sentry/web/frontend/project_release_tracking.py
+++ b/src/sentry/web/frontend/project_release_tracking.py
@@ -11,7 +11,7 @@ from django.utils.translation import ugettext_lazy as _
 from uuid import uuid1
 
 from sentry import constants
-from sentry.models import OrganizationMemberType, ProjectOption
+from sentry.models import ProjectOption
 from sentry.plugins import plugins, ReleaseTrackingPlugin
 from sentry.utils.http import absolute_uri
 from sentry.web.frontend.base import ProjectView
@@ -23,7 +23,7 @@ ERR_NO_FEATURE = _('The release tracking feature is not enabled for this project
 
 
 class ProjectReleaseTrackingView(ProjectView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'project:write'
 
     def _iter_plugins(self):
         for plugin in plugins.all(version=2):
diff --git a/src/sentry/web/frontend/project_rule_edit.py b/src/sentry/web/frontend/project_rule_edit.py
new file mode 100644
index 0000000000..2b0154e27e
--- /dev/null
+++ b/src/sentry/web/frontend/project_rule_edit.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.rules import rules
+from sentry.models import Rule
+from sentry.web.frontend.base import ProjectView
+from sentry.utils import json
+
+
+class ProjectRuleEditView(ProjectView):
+    required_scope = 'project:write'
+
+    def get(self, request, organization, team, project, rule_id=None):
+        if rule_id:
+            try:
+                rule = Rule.objects.get(project=project, id=rule_id)
+            except Rule.DoesNotExist:
+                path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
+                return self.redirect(path)
+        else:
+            rule = Rule(project=project)
+
+        action_list = []
+        condition_list = []
+
+        # TODO: conditions need to be based on actions
+        for rule_type, rule_cls in rules:
+            node = rule_cls(project)
+            context = {
+                'id': node.id,
+                'label': node.label,
+                'html': node.render_form(),
+            }
+
+            if rule_type.startswith('condition/'):
+                condition_list.append(context)
+            elif rule_type.startswith('action/'):
+                action_list.append(context)
+
+        context = {
+            'rule': rule,
+            'page': 'rules',
+            'action_list': json.dumps(action_list),
+            'condition_list': json.dumps(condition_list),
+        }
+
+        return self.respond('sentry/projects/rules/new.html', context)
diff --git a/src/sentry/web/frontend/project_rule_remove.py b/src/sentry/web/frontend/project_rule_remove.py
new file mode 100644
index 0000000000..a01d84ad6e
--- /dev/null
+++ b/src/sentry/web/frontend/project_rule_remove.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.contrib import messages
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import Rule
+from sentry.web.frontend.base import ProjectView
+
+
+class ProjectRuleRemoveView(ProjectView):
+    required_scope = 'project:write'
+
+    def post(self, request, organization, team, project, rule_id):
+        path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
+
+        try:
+            rule = Rule.objects.get(project=project, id=rule_id)
+        except Rule.DoesNotExist:
+            return self.redirect(path)
+
+        rule.delete()
+
+        messages.add_message(request, messages.SUCCESS,
+            _('The rule was removed.'))
+
+        return self.redirect(path)
diff --git a/src/sentry/web/frontend/project_rules.py b/src/sentry/web/frontend/project_rules.py
new file mode 100644
index 0000000000..2e94db6f91
--- /dev/null
+++ b/src/sentry/web/frontend/project_rules.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from sentry.rules import rules
+from sentry.models import Rule
+from sentry.web.frontend.base import ProjectView
+
+
+def _generate_rule_label(project, rule, data):
+    rule_cls = rules.get(data['id'])
+    if rule_cls is None:
+        return
+
+    rule_inst = rule_cls(project, data=data, rule=rule)
+    return rule_inst.render_label()
+
+
+class ProjectRulesView(ProjectView):
+    required_scope = 'project:write'
+
+    def get(self, request, organization, team, project):
+        rule_list = []
+        for rule in Rule.objects.filter(project=project):
+            conditions = []
+            for data in rule.data['conditions']:
+                conditions.append(_generate_rule_label(project, rule, data))
+            conditions = filter(bool, conditions)
+
+            actions = []
+            for data in rule.data['actions']:
+                actions.append(_generate_rule_label(project, rule, data))
+            actions = filter(bool, actions)
+
+            rule_list.append({
+                'id': rule.id,
+                'label': rule.label,
+                'match': rule.data.get('action_match', 'all'),
+                'actions': actions,
+                'conditions': conditions,
+            })
+
+        context = {
+            'page': 'rules',
+            'rule_list': rule_list,
+        }
+
+        return self.respond('sentry/projects/rules/list.html', context)
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index efb6dc836c..7504d0f6ba 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -9,7 +9,7 @@ from django.utils.translation import ugettext_lazy as _
 from uuid import uuid1
 
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Project, Team
+    AuditLogEntry, AuditLogEntryEvent, Project, Team
 )
 from sentry.web.forms.fields import (
     CustomTypedChoiceField, RangeField, OriginsField, IPNetworksField,
@@ -132,24 +132,17 @@ class EditProjectForm(forms.ModelForm):
 
 
 class ProjectSettingsView(ProjectView):
-    required_access = OrganizationMemberType.ADMIN
-
-    def has_permission(self, request, organization, team, project):
-        if project is None:
-            return False
-
-        if request.user.is_superuser:
-            return True
-
-        return True
+    required_scope = 'project:write'
 
     def get_form(self, request, project):
         organization = project.organization
-        team_list = Team.objects.get_for_user(
-            organization=organization,
-            user=request.user,
-            access=OrganizationMemberType.ADMIN,
-        )
+        team_list = [
+            t for t in Team.objects.get_for_user(
+                organization=organization,
+                user=request.user,
+            )
+            if request.access.has_team_scope(t, self.required_scope)
+        ]
 
         # TODO(dcramer): this update should happen within a lock
         security_token = project.get_option('sentry:token', None)
diff --git a/src/sentry/web/frontend/project_tags.py b/src/sentry/web/frontend/project_tags.py
new file mode 100644
index 0000000000..f8ebde62a7
--- /dev/null
+++ b/src/sentry/web/frontend/project_tags.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.models import TagKey, TagKeyStatus
+from sentry.web.frontend.base import ProjectView
+
+
+class ProjectTagsView(ProjectView):
+    def get(self, request, organization, team, project):
+        tag_list = TagKey.objects.filter(
+            project=project,
+            status=TagKeyStatus.VISIBLE,
+        )
+
+        context = {
+            'tag_list': tag_list,
+            'page': 'tags',
+        }
+        return self.respond('sentry/projects/manage_tags.html', context)
diff --git a/src/sentry/web/frontend/projects/__init__.py b/src/sentry/web/frontend/projects/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/src/sentry/web/frontend/projects/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/src/sentry/web/frontend/projects/keys.py b/src/sentry/web/frontend/projects/keys.py
deleted file mode 100644
index 89d6a92504..0000000000
--- a/src/sentry/web/frontend/projects/keys.py
+++ /dev/null
@@ -1,189 +0,0 @@
-"""
-sentry.web.frontend.projects.keys
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.views.decorators.csrf import csrf_protect
-from django.views.decorators.http import require_http_methods
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.constants import MEMBER_ADMIN
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
-)
-from sentry.web.decorators import has_access
-from sentry.web.forms.projectkeys import EditProjectKeyForm
-from sentry.web.helpers import render_to_response
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def manage_project_keys(request, organization, project):
-    key_list = list(ProjectKey.objects.filter(
-        project=project,
-    ).order_by('-id'))
-
-    for key in key_list:
-        key.project = project
-
-    context = csrf(request)
-    context.update({
-        'team': project.team,
-        'organization': organization,
-        'page': 'keys',
-        'project': project,
-        'key_list': key_list,
-    })
-
-    return render_to_response('sentry/projects/keys.html', context, request)
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def new_project_key(request, organization, project):
-    key = ProjectKey.objects.create(
-        project=project,
-    )
-
-    AuditLogEntry.objects.create(
-        organization=organization,
-        actor=request.user,
-        ip_address=request.META['REMOTE_ADDR'],
-        target_object=key.id,
-        event=AuditLogEntryEvent.PROJECTKEY_ADD,
-        data=key.get_audit_log_data(),
-    )
-
-    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def edit_project_key(request, organization, project, key_id):
-    try:
-        key = ProjectKey.objects.get(
-            id=key_id,
-            project=project,
-        )
-    except ProjectKey.DoesNotExist():
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-    form = EditProjectKeyForm(request.POST or None, instance=key)
-    if form.is_valid():
-        key = form.save()
-
-        AuditLogEntry.objects.create(
-            organization=organization,
-            actor=request.user,
-            ip_address=request.META['REMOTE_ADDR'],
-            target_object=key.id,
-            event=AuditLogEntryEvent.PROJECTKEY_EDIT,
-            data=key.get_audit_log_data(),
-        )
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Changes to the API key (%s) were saved.') % (key.public_key,))
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-    context = {
-        'organization': organization,
-        'team': project.team,
-        'project': project,
-        'page': 'keys',
-        'key': key,
-        'form': form,
-    }
-
-    return render_to_response('sentry/projects/edit_key.html', context, request)
-
-
-@require_http_methods(['POST'])
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def remove_project_key(request, organization, project, key_id):
-    try:
-        key = ProjectKey.objects.get(id=key_id)
-    except ProjectKey.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-    audit_data = key.get_audit_log_data()
-
-    key.delete()
-
-    AuditLogEntry.objects.create(
-        organization=organization,
-        actor=request.user,
-        ip_address=request.META['REMOTE_ADDR'],
-        target_object=key.id,
-        event=AuditLogEntryEvent.PROJECTKEY_REMOVE,
-        data=audit_data,
-    )
-
-    messages.add_message(
-        request, messages.SUCCESS,
-        _('The API key (%s) was revoked.') % (key.public_key,))
-
-    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-
-@require_http_methods(['POST'])
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def disable_project_key(request, organization, project, key_id):
-    try:
-        key = ProjectKey.objects.get(id=key_id)
-    except ProjectKey.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-    key.update(status=ProjectKeyStatus.INACTIVE)
-
-    AuditLogEntry.objects.create(
-        organization=organization,
-        actor=request.user,
-        ip_address=request.META['REMOTE_ADDR'],
-        target_object=key.id,
-        event=AuditLogEntryEvent.PROJECTKEY_DISABLE,
-        data=key.get_audit_log_data(),
-    )
-
-    messages.add_message(
-        request, messages.SUCCESS,
-        _('The API key (%s) was disabled.') % (key.public_key,))
-
-    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-
-@require_http_methods(['POST'])
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def enable_project_key(request, organization, project, key_id):
-    try:
-        key = ProjectKey.objects.get(id=key_id)
-    except ProjectKey.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-    key.update(status=ProjectKeyStatus.ACTIVE)
-
-    AuditLogEntry.objects.create(
-        organization=organization,
-        actor=request.user,
-        ip_address=request.META['REMOTE_ADDR'],
-        target_object=key.id,
-        event=AuditLogEntryEvent.PROJECTKEY_ENABLE,
-        data=key.get_audit_log_data(),
-    )
-
-    messages.add_message(
-        request, messages.SUCCESS,
-        _('The API key (%s) was enabled.') % (key.public_key,))
-
-    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/projects/plugins.py b/src/sentry/web/frontend/projects/plugins.py
deleted file mode 100644
index adc7a67218..0000000000
--- a/src/sentry/web/frontend/projects/plugins.py
+++ /dev/null
@@ -1,131 +0,0 @@
-"""
-sentry.web.frontend.projects.plugins
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
-from django.http import HttpResponse, HttpResponseRedirect
-from django.views.decorators.csrf import csrf_protect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.constants import MEMBER_ADMIN
-from sentry.plugins import plugins
-from sentry.web.decorators import has_access
-from sentry.web.helpers import render_to_response
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def manage_plugins(request, organization, project):
-    if request.POST:
-        enabled = set(request.POST.getlist('plugin'))
-        for plugin in plugins.configurable_for_project(project, version=None):
-            if plugin.slug in enabled:
-                plugin.enable(project)
-            else:
-                plugin.disable(project)
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(request.path)
-
-    context = csrf(request)
-    context.update({
-        'organization': organization,
-        'team': project.team,
-        'page': 'plugins',
-        'project': project,
-    })
-
-    return render_to_response('sentry/projects/plugins/list.html', context, request)
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def configure_project_plugin(request, organization, project, slug):
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
-
-    if not plugin.can_configure_for_project(project):
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
-
-    view = plugin.configure(request, project=project)
-    if isinstance(view, HttpResponse):
-        return view
-
-    context = csrf(request)
-    context.update({
-        'organization': organization,
-        'team': project.team,
-        'page': 'plugin',
-        'title': plugin.get_title(),
-        'view': view,
-        'project': project,
-        'plugin': plugin,
-        'plugin_is_enabled': plugin.is_enabled(project),
-    })
-
-    return render_to_response('sentry/projects/plugins/configure.html',
-                              context, request)
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def reset_project_plugin(request, organization, project, slug):
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
-
-    if not plugin.is_enabled(project):
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
-
-    plugin.reset_options(project=project)
-
-    return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def enable_project_plugin(request, organization, project, slug):
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.organization.slug, project.slug]))
-
-    redirect_to = reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug])
-
-    if plugin.is_enabled(project) or not plugin.can_enable_for_projects():
-        return HttpResponseRedirect(redirect_to)
-
-    plugin.enable(project)
-
-    return HttpResponseRedirect(redirect_to)
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def disable_project_plugin(request, organization, project, slug):
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.organization.slug, project.slug]))
-
-    redirect_to = reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug])
-
-    if not (plugin.can_disable and plugin.is_enabled(project) and plugin.can_enable_for_projects()):
-        return HttpResponseRedirect(redirect_to)
-
-    plugin.disable(project)
-
-    return HttpResponseRedirect(redirect_to)
diff --git a/src/sentry/web/frontend/projects/quotas.py b/src/sentry/web/frontend/projects/quotas.py
deleted file mode 100644
index 3806fc2d64..0000000000
--- a/src/sentry/web/frontend/projects/quotas.py
+++ /dev/null
@@ -1,59 +0,0 @@
-"""
-sentry.web.frontend.projects
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry import app, features
-from sentry.constants import MEMBER_ADMIN
-from sentry.quotas.base import Quota
-from sentry.web.decorators import has_access
-from sentry.web.forms.projects import ProjectQuotasForm
-from sentry.web.helpers import render_to_response
-
-
-ERR_NO_SSO = _('The quotas feature is not enabled for this project.')
-
-
-@has_access(MEMBER_ADMIN)
-def manage_project_quotas(request, organization, project):
-    if not features.has('projects:quotas', project, actor=request.user):
-        messages.add_message(
-            request, messages.ERROR,
-            ERR_NO_SSO,
-        )
-        redirect = reverse('sentry-manage-project',
-                           args=[organization.slug, project.slug])
-        return HttpResponseRedirect(redirect)
-
-    form = ProjectQuotasForm(project, request.POST or None)
-
-    if form and form.is_valid():
-        form.save()
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(reverse('sentry-manage-project-quotas', args=[project.organization.slug, project.slug]))
-
-    context = {
-        'organization': organization,
-        'team': project.team,
-        'page': 'quotas',
-        # TODO(dcramer): has_quotas is an awful hack
-        'has_quotas': type(app.quotas) != Quota,
-        'system_quota': int(app.quotas.get_system_quota()),
-        'team_quota': int(app.quotas.get_team_quota(project.team)),
-        'project': project,
-        'form': form,
-    }
-    return render_to_response('sentry/projects/quotas.html', context, request)
diff --git a/src/sentry/web/frontend/projects/rules.py b/src/sentry/web/frontend/projects/rules.py
deleted file mode 100644
index 9c1f448c65..0000000000
--- a/src/sentry/web/frontend/projects/rules.py
+++ /dev/null
@@ -1,126 +0,0 @@
-"""
-sentry.web.frontend.projects.rules
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils.translation import ugettext_lazy as _
-from django.views.decorators.csrf import csrf_protect
-
-from sentry.constants import MEMBER_ADMIN
-from sentry.models import Rule
-from sentry.utils import json
-from sentry.rules import rules
-from sentry.web.decorators import has_access
-from sentry.web.helpers import render_to_response
-
-
-def _generate_rule_label(project, rule, data):
-    rule_cls = rules.get(data['id'])
-    if rule_cls is None:
-        return
-
-    rule_inst = rule_cls(project, data=data, rule=rule)
-    return rule_inst.render_label()
-
-
-@has_access(MEMBER_ADMIN)
-def list_rules(request, organization, project):
-    rule_list = []
-    for rule in Rule.objects.filter(project=project):
-        conditions = []
-        for data in rule.data['conditions']:
-            conditions.append(_generate_rule_label(project, rule, data))
-        conditions = filter(bool, conditions)
-
-        actions = []
-        for data in rule.data['actions']:
-            actions.append(_generate_rule_label(project, rule, data))
-        actions = filter(bool, actions)
-
-        rule_list.append({
-            'id': rule.id,
-            'label': rule.label,
-            'match': rule.data.get('action_match', 'all'),
-            'actions': actions,
-            'conditions': conditions,
-        })
-
-    context = csrf(request)
-    context.update({
-        'organization': organization,
-        'team': project.team,
-        'page': 'rules',
-        'project': project,
-        'rule_list': rule_list,
-    })
-
-    return render_to_response('sentry/projects/rules/list.html', context, request)
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def create_or_edit_rule(request, organization, project, rule_id=None):
-    if rule_id:
-        try:
-            rule = Rule.objects.get(project=project, id=rule_id)
-        except Rule.DoesNotExist:
-            path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
-            return HttpResponseRedirect(path)
-    else:
-        rule = Rule(project=project)
-
-    action_list = []
-    condition_list = []
-
-    # TODO: conditions need to be based on actions
-    for rule_type, rule_cls in rules:
-        node = rule_cls(project)
-        context = {
-            'id': node.id,
-            'label': node.label,
-            'html': node.render_form(),
-        }
-
-        if rule_type.startswith('condition/'):
-            condition_list.append(context)
-        elif rule_type.startswith('action/'):
-            action_list.append(context)
-
-    context = csrf(request)
-    context.update({
-        'rule': rule,
-        'organization': organization,
-        'team': project.team,
-        'page': 'rules',
-        'action_list': json.dumps(action_list),
-        'condition_list': json.dumps(condition_list),
-        'project': project,
-    })
-
-    return render_to_response('sentry/projects/rules/new.html', context, request)
-
-
-@has_access(MEMBER_ADMIN)
-@csrf_protect
-def remove_rule(request, organization, project, rule_id):
-    path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
-
-    try:
-        rule = Rule.objects.get(project=project, id=rule_id)
-    except Rule.DoesNotExist:
-        return HttpResponseRedirect(path)
-
-    rule.delete()
-
-    messages.add_message(request, messages.SUCCESS,
-        _('The rule was removed.'))
-
-    return HttpResponseRedirect(path)
diff --git a/src/sentry/web/frontend/projects/tags.py b/src/sentry/web/frontend/projects/tags.py
deleted file mode 100644
index 0eb74c47fb..0000000000
--- a/src/sentry/web/frontend/projects/tags.py
+++ /dev/null
@@ -1,30 +0,0 @@
-"""
-sentry.web.frontend.projects
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from sentry.constants import MEMBER_ADMIN
-from sentry.models import TagKey, TagKeyStatus
-from sentry.web.decorators import has_access
-from sentry.web.helpers import render_to_response
-
-
-@has_access(MEMBER_ADMIN)
-def manage_project_tags(request, organization, project):
-    tag_list = TagKey.objects.filter(
-        project=project,
-        status=TagKeyStatus.VISIBLE,
-    )
-
-    context = {
-        'organization': organization,
-        'team': project.team,
-        'project': project,
-        'tag_list': tag_list,
-        'page': 'tags',
-    }
-    return render_to_response('sentry/projects/manage_tags.html', context, request)
diff --git a/src/sentry/web/frontend/remove_account.py b/src/sentry/web/frontend/remove_account.py
index 2835a5a4ad..2783c987ca 100644
--- a/src/sentry/web/frontend/remove_account.py
+++ b/src/sentry/web/frontend/remove_account.py
@@ -5,9 +5,10 @@ import logging
 from django import forms
 from django.contrib.auth import logout
 
+from sentry import roles
 from sentry.api import client
 from sentry.models import (
-    Organization, OrganizationMember, OrganizationMemberType, User
+    Organization, OrganizationMember, User
 )
 from sentry.web.frontend.base import BaseView
 
@@ -26,9 +27,8 @@ class RemoveAccountView(BaseView):
 
     def handle(self, request):
         org_list = Organization.objects.filter(
-            member_set__type=OrganizationMemberType.OWNER,
+            member_set__role=roles.get_top_dog().id,
             member_set__user=request.user,
-            member_set__has_global_access=True,
         )
         org_results = []
         for org in sorted(org_list, key=lambda x: x.name):
diff --git a/src/sentry/web/frontend/remove_organization.py b/src/sentry/web/frontend/remove_organization.py
index c8c9e021bd..b5d8d6eda8 100644
--- a/src/sentry/web/frontend/remove_organization.py
+++ b/src/sentry/web/frontend/remove_organization.py
@@ -5,7 +5,7 @@ from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationMemberType, OrganizationStatus
+from sentry.models import OrganizationStatus
 from sentry.tasks.deletion import delete_organization
 from sentry.web.frontend.base import OrganizationView
 
@@ -19,7 +19,7 @@ class RemoveOrganizationForm(forms.Form):
 
 
 class RemoveOrganizationView(OrganizationView):
-    required_access = OrganizationMemberType.OWNER
+    required_scope = 'org:delete'
     sudo_required = True
 
     def get_form(self, request, organization):
diff --git a/src/sentry/web/frontend/remove_project.py b/src/sentry/web/frontend/remove_project.py
index cb3a7d5558..7ea52d2941 100644
--- a/src/sentry/web/frontend/remove_project.py
+++ b/src/sentry/web/frontend/remove_project.py
@@ -7,7 +7,6 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.api import client
-from sentry.models import OrganizationMemberType
 from sentry.web.frontend.base import ProjectView
 
 
@@ -16,7 +15,7 @@ class RemoveProjectForm(forms.Form):
 
 
 class RemoveProjectView(ProjectView):
-    required_access = OrganizationMemberType.OWNER
+    required_scope = 'project:delete'
     sudo_required = True
 
     def get_form(self, request):
diff --git a/src/sentry/web/frontend/remove_project_key.py b/src/sentry/web/frontend/remove_project_key.py
new file mode 100644
index 0000000000..aab9f07cce
--- /dev/null
+++ b/src/sentry/web/frontend/remove_project_key.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, ProjectKey
+from sentry.web.frontend.base import ProjectView
+
+
+class RemoveProjectKeyView(ProjectView):
+    required_scope = 'project:write'
+
+    def handle(self, request, organization, team, project, key_id):
+        try:
+            key = ProjectKey.objects.get(
+                id=key_id,
+                project=project,
+            )
+        except ProjectKey.DoesNotExist():
+            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
+
+        data = key.get_audit_log_data()
+
+        key.delete()
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=key.id,
+            event=AuditLogEntryEvent.PROJECTKEY_REMOVE,
+            data=data,
+        )
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('The API key (%s) was revoked.') % (key.public_key,))
+
+        return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/remove_team.py b/src/sentry/web/frontend/remove_team.py
index 298f0ab673..757ab540c8 100644
--- a/src/sentry/web/frontend/remove_team.py
+++ b/src/sentry/web/frontend/remove_team.py
@@ -7,7 +7,6 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.api import client
-from sentry.models import OrganizationMemberType
 from sentry.web.frontend.base import TeamView
 
 
@@ -16,7 +15,7 @@ class RemoveTeamForm(forms.Form):
 
 
 class RemoveTeamView(TeamView):
-    required_access = OrganizationMemberType.OWNER
+    required_scope = 'team:delete'
     sudo_required = True
 
     def get_form(self, request):
diff --git a/src/sentry/web/frontend/replay_event.py b/src/sentry/web/frontend/replay_event.py
new file mode 100644
index 0000000000..bf7de4ce31
--- /dev/null
+++ b/src/sentry/web/frontend/replay_event.py
@@ -0,0 +1,67 @@
+from __future__ import absolute_import
+
+import urlparse
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import Event
+from sentry.replays import Replayer
+from sentry.utils.http import safe_urlencode
+from sentry.web.forms import ReplayForm
+from sentry.web.frontend.base import ProjectView
+
+
+class ReplayEventView(ProjectView):
+    required_scope = 'event:read'
+
+    def handle(self, request, organization, project, team, group_id, event_id):
+        try:
+            event = Event.objects.get(group=group_id, id=event_id)
+        except Event.DoesNotExist:
+            return self.redirect(reverse('sentry'))
+
+        Event.objects.bind_nodes([event], 'data')
+
+        interfaces = event.interfaces
+        if 'sentry.interfaces.Http' not in interfaces:
+            # TODO: show a proper error
+            return self.redirect(reverse('sentry'))
+
+        # TODO(mattrobenolt): Add Cookie as a header
+        http = interfaces['sentry.interfaces.Http']
+        if http.headers:
+            headers = '\n'.join('%s: %s' % (k, v) for k, v in http.headers if k[0].upper() == k[0])
+        else:
+            headers = ''
+
+        if isinstance(http.data, dict):
+            data = safe_urlencode(http.data)
+        else:
+            data = http.data
+
+        initial = {
+            'url': urlparse.urldefrag(http.full_url)[0],
+            'method': http.method,
+            'headers': headers,
+            'data': data,
+        }
+
+        form = ReplayForm(request.POST or None, initial=initial)
+        if form.is_valid():
+            result = Replayer(
+                url=form.cleaned_data['url'],
+                method=form.cleaned_data['method'],
+                data=form.cleaned_data['data'],
+                headers=form.cleaned_data['headers'],
+            ).replay()
+        else:
+            result = None
+
+        context = {
+            'group': event.group,
+            'event': event,
+            'form': form,
+            'result': result,
+        }
+
+        return self.respond('sentry/events/replay_request.html', context)
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index e6957e598d..8b83f65651 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -3,14 +3,10 @@ from __future__ import absolute_import
 from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
-from django.db.models import Q
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Team, OrganizationMember,
-    OrganizationMemberType
-)
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team
 from sentry.web.frontend.base import TeamView
 
 
@@ -21,7 +17,7 @@ class EditTeamForm(forms.ModelForm):
 
 
 class TeamSettingsView(TeamView):
-    required_access = OrganizationMemberType.ADMIN
+    required_scope = 'team:write'
 
     def get_form(self, request, team):
         return EditTeamForm(request.POST or None, instance=team)
@@ -48,11 +44,7 @@ class TeamSettingsView(TeamView):
         if request.user.is_superuser:
             can_remove_team = True
         else:
-            can_remove_team = OrganizationMember.objects.filter(
-                Q(has_global_access=True) | Q(teams=team),
-                user=request.user,
-                type__lte=OrganizationMemberType.OWNER,
-            ).exists()
+            can_remove_team = request.access.has_team_scope(team, 'team:delete')
 
         context = {
             'form': form,
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 05bf45f573..a016e84cca 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -13,16 +13,8 @@ from django.conf.urls import include, patterns, url
 from django.conf import settings
 from django.views.generic import RedirectView
 
-import sentry.web.frontend.projects.keys
-import sentry.web.frontend.projects.plugins
-import sentry.web.frontend.projects.quotas
-import sentry.web.frontend.projects.rules
-import sentry.web.frontend.projects.tags
-
 from sentry.web import api
-from sentry.web.frontend import (
-    accounts, generic, groups, events, admin
-)
+from sentry.web.frontend import accounts, admin, generic
 
 from sentry.web.frontend.admin_queue import AdminQueueView
 from sentry.web.frontend.accept_organization_invite import AcceptOrganizationInviteView
@@ -32,6 +24,8 @@ from sentry.web.frontend.auth_logout import AuthLogoutView
 from sentry.web.frontend.auth_organization_login import AuthOrganizationLoginView
 from sentry.web.frontend.auth_provider_login import AuthProviderLoginView
 from sentry.web.frontend.error_page_embed import ErrorPageEmbedView
+from sentry.web.frontend.group_event_json import GroupEventJsonView
+from sentry.web.frontend.group_plugin_action import GroupPluginActionView
 from sentry.web.frontend.home import HomeView
 from sentry.web.frontend.mailgun_inbound_webhook import MailgunInboundWebhookView
 from sentry.web.frontend.organization_api_keys import OrganizationApiKeysView
@@ -44,17 +38,34 @@ from sentry.web.frontend.organization_settings import OrganizationSettingsView
 from sentry.web.frontend.create_organization import CreateOrganizationView
 from sentry.web.frontend.create_organization_member import CreateOrganizationMemberView
 from sentry.web.frontend.create_project import CreateProjectView
+from sentry.web.frontend.create_project_key import CreateProjectKeyView
 from sentry.web.frontend.create_team import CreateTeamView
+from sentry.web.frontend.disable_project_key import DisableProjectKeyView
+from sentry.web.frontend.edit_project_key import EditProjectKeyView
+from sentry.web.frontend.enable_project_key import EnableProjectKeyView
+from sentry.web.frontend.remove_project_key import RemoveProjectKeyView
 from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
+from sentry.web.frontend.project_keys import ProjectKeysView
+from sentry.web.frontend.project_plugins import ProjectPluginsView
+from sentry.web.frontend.project_plugin_configure import ProjectPluginConfigureView
+from sentry.web.frontend.project_plugin_disable import ProjectPluginDisableView
+from sentry.web.frontend.project_plugin_enable import ProjectPluginEnableView
+from sentry.web.frontend.project_plugin_reset import ProjectPluginResetView
 from sentry.web.frontend.project_notifications import ProjectNotificationsView
+from sentry.web.frontend.project_quotas import ProjectQuotasView
 from sentry.web.frontend.project_release_tracking import ProjectReleaseTrackingView
+from sentry.web.frontend.project_rules import ProjectRulesView
+from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
+from sentry.web.frontend.project_rule_remove import ProjectRuleRemoveView
 from sentry.web.frontend.project_settings import ProjectSettingsView
+from sentry.web.frontend.project_tags import ProjectTagsView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
 from sentry.web.frontend.release_webhook import ReleaseWebhookView
 from sentry.web.frontend.remove_account import RemoveAccountView
 from sentry.web.frontend.remove_organization import RemoveOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.remove_team import RemoveTeamView
+from sentry.web.frontend.replay_event import ReplayEventView
 from sentry.web.frontend.team_settings import TeamSettingsView
 
 
@@ -251,68 +262,68 @@ urlpatterns += patterns(
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/release-tracking/$',
         ProjectReleaseTrackingView.as_view(),
         name='sentry-project-release-tracking'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/keys/$',
-        sentry.web.frontend.projects.keys.manage_project_keys,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/$',
+        ProjectKeysView.as_view(),
         name='sentry-manage-project-keys'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/keys/new/$',
-        sentry.web.frontend.projects.keys.new_project_key,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/new/$',
+        CreateProjectKeyView.as_view(),
         name='sentry-new-project-key'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/keys/(?P<key_id>\d+)/edit/$',
-        sentry.web.frontend.projects.keys.edit_project_key,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/(?P<key_id>\d+)/edit/$',
+        EditProjectKeyView.as_view(),
         name='sentry-edit-project-key'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/keys/(?P<key_id>\d+)/remove/$',
-        sentry.web.frontend.projects.keys.remove_project_key,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/(?P<key_id>\d+)/remove/$',
+        RemoveProjectKeyView.as_view(),
         name='sentry-remove-project-key'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/keys/(?P<key_id>\d+)/disable/$',
-        sentry.web.frontend.projects.keys.disable_project_key,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/(?P<key_id>\d+)/disable/$',
+        DisableProjectKeyView.as_view(),
         name='sentry-disable-project-key'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/keys/(?P<key_id>\d+)/enable/$',
-        sentry.web.frontend.projects.keys.enable_project_key,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/(?P<key_id>\d+)/enable/$',
+        EnableProjectKeyView.as_view(),
         name='sentry-enable-project-key'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/plugins/$',
-        sentry.web.frontend.projects.plugins.manage_plugins,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/$',
+        ProjectPluginsView.as_view(),
         name='sentry-manage-project-plugins'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/$',
-        sentry.web.frontend.projects.plugins.configure_project_plugin,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/$',
+        ProjectPluginConfigureView.as_view(),
         name='sentry-configure-project-plugin'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/reset/$',
-        sentry.web.frontend.projects.plugins.reset_project_plugin,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/reset/$',
+        ProjectPluginResetView.as_view(),
         name='sentry-reset-project-plugin'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/disable/$',
-        sentry.web.frontend.projects.plugins.disable_project_plugin,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/disable/$',
+        ProjectPluginDisableView.as_view(),
         name='sentry-disable-project-plugin'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/enable/$',
-        sentry.web.frontend.projects.plugins.enable_project_plugin,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/enable/$',
+        ProjectPluginEnableView.as_view(),
         name='sentry-enable-project-plugin'),
 
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/remove/$',
         RemoveProjectView.as_view(),
         name='sentry-remove-project'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/tags/$',
-        sentry.web.frontend.projects.tags.manage_project_tags,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/tags/$',
+        ProjectTagsView.as_view(),
         name='sentry-manage-project-tags'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/quotas/$',
-        sentry.web.frontend.projects.quotas.manage_project_quotas,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/quotas/$',
+        ProjectQuotasView.as_view(),
         name='sentry-manage-project-quotas'),
 
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/notifications/$',
         ProjectNotificationsView.as_view(),
         name='sentry-project-notifications'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/rules/$',
-        sentry.web.frontend.projects.rules.list_rules,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/rules/$',
+        ProjectRulesView.as_view(),
         name='sentry-project-rules'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/rules/(?P<rule_id>\d+)/edit/$',
-        sentry.web.frontend.projects.rules.create_or_edit_rule,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/rules/(?P<rule_id>\d+)/edit/$',
+        ProjectRuleEditView.as_view(),
         name='sentry-edit-project-rule'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/rules/(?P<rule_id>\d+)/remove/$',
-        sentry.web.frontend.projects.rules.remove_rule,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/rules/(?P<rule_id>\d+)/remove/$',
+        ProjectRuleRemoveView.as_view(),
         name='sentry-remove-project-rule'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/rules/new/$',
-        sentry.web.frontend.projects.rules.create_or_edit_rule,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/rules/new/$',
+        ProjectRuleEditView.as_view(),
         name='sentry-new-project-rule'),
 
     # Generic
@@ -340,11 +351,11 @@ urlpatterns += patterns(
         name='sentry-group-events'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/$', ReactPageView.as_view(),
         name='sentry-group-event'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/replay/$', events.replay_event,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/replay/$', ReplayEventView.as_view(),
         name='sentry-replay'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id_or_latest>(\d+|latest))/json/$', groups.group_event_details_json,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id_or_latest>(\d+|latest))/json/$', GroupEventJsonView.as_view(),
         name='sentry-group-event-json'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', groups.group_plugin_action,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', GroupPluginActionView.as_view(),
         name='sentry-group-plugin-action'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/tags/$', ReactPageView.as_view(),
         name='sentry-group-tags'),
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index a0e3a26f79..b4894fab74 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -93,7 +93,6 @@ class RavenIntegrationTest(TransactionTestCase):
     def setUp(self):
         self.user = self.create_user('coreapi@example.com')
         self.project = self.create_project()
-        self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create()[0]
 
         self.configure_sentry_errors()
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 623ca2bb92..4f596229f4 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from mock import Mock
 
 from sentry.api.bases.organization import OrganizationPermission
-from sentry.models import ApiKey, OrganizationMemberType, ProjectKey
+from sentry.models import ApiKey, ProjectKey
 from sentry.testutils import TestCase
 
 
@@ -30,24 +30,12 @@ class OrganizationPermissionTest(OrganizationPermissionBase):
         user = self.create_user(is_superuser=True)
         assert self.has_object_perm(None, user, self.org)
 
-    def test_org_member_with_global_access(self):
+    def test_org_member(self):
         user = self.create_user()
         self.create_member(
             user=user,
             organization=self.org,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=True,
-        )
-        assert self.has_object_perm(None, user, self.org, 'GET')
-        assert not self.has_object_perm(None, user, self.org, 'POST')
-
-    def test_org_member_without_global_access(self):
-        user = self.create_user()
-        self.create_member(
-            user=user,
-            organization=self.org,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
         assert self.has_object_perm(None, user, self.org, 'GET')
         assert not self.has_object_perm(None, user, self.org, 'POST')
diff --git a/tests/sentry/api/bases/test_project.py b/tests/sentry/api/bases/test_project.py
index eac3954fe9..898a80d70e 100644
--- a/tests/sentry/api/bases/test_project.py
+++ b/tests/sentry/api/bases/test_project.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from mock import Mock
 
 from sentry.api.bases.project import ProjectPermission
-from sentry.models import ApiKey, OrganizationMemberType, ProjectKey
+from sentry.models import ApiKey, ProjectKey
 from sentry.testutils import TestCase
 
 
@@ -25,40 +25,49 @@ class ProjectPermissionBase(TestCase):
 
 class ProjectPermissionTest(ProjectPermissionBase):
     def test_regular_user(self):
-        user = self.create_user()
+        user = self.create_user(is_superuser=False)
         assert not self.has_object_perm(None, user, self.project)
 
     def test_superuser(self):
         user = self.create_user(is_superuser=True)
         assert self.has_object_perm(None, user, self.project)
 
-    def test_org_member_without_team_access(self):
-        user = self.create_user()
+    def test_member_for_project_read(self):
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user,
             organization=self.org,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
+            teams=[self.team],
         )
-        assert not self.has_object_perm(None, user, self.project)
+        assert self.has_object_perm(None, user, self.project)
 
-    def test_org_member_with_global_access(self):
-        user = self.create_user()
+    def test_member_for_project_write(self):
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user,
             organization=self.org,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=True,
+            role='member',
+            teams=[self.team],
         )
-        assert self.has_object_perm(None, user, self.project)
+        assert not self.has_object_perm(None, user, self.project, method='POST')
+
+    def test_member_for_project_delete(self):
+        user = self.create_user(is_superuser=False)
+        self.create_member(
+            user=user,
+            organization=self.org,
+            role='member',
+            teams=[self.team],
+        )
+        assert not self.has_object_perm(None, user, self.project, method='DELETE')
 
-    def test_org_member_with_team_access(self):
-        user = self.create_user()
+    def test_member_with_team_access(self):
+        user = self.create_user(is_superuser=False)
         self.create_member(
             user=user,
             organization=self.org,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
             teams=[self.team]
         )
         assert self.has_object_perm(None, user, self.project)
diff --git a/tests/sentry/api/bases/test_team.py b/tests/sentry/api/bases/test_team.py
index 388940c379..d80bcf014b 100644
--- a/tests/sentry/api/bases/test_team.py
+++ b/tests/sentry/api/bases/test_team.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from mock import Mock
 
 from sentry.api.bases.team import TeamPermission
-from sentry.models import ApiKey, OrganizationMemberType, ProjectKey
+from sentry.models import ApiKey, ProjectKey
 from sentry.testutils import TestCase
 
 
@@ -31,33 +31,22 @@ class TeamPermissionTest(TeamPermissionBase):
         user = self.create_user(is_superuser=True)
         assert self.has_object_perm(None, user, self.team)
 
-    def test_org_member_without_team_access(self):
+    def test_member_without_team_access(self):
         user = self.create_user()
         self.create_member(
             user=user,
             organization=self.org,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
+            teams=[],
         )
         assert not self.has_object_perm(None, user, self.team)
 
-    def test_org_member_with_global_access(self):
+    def test_member_with_team_access(self):
         user = self.create_user()
         self.create_member(
             user=user,
             organization=self.org,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=True,
-        )
-        assert self.has_object_perm(None, user, self.team)
-
-    def test_org_member_with_team_access(self):
-        user = self.create_user()
-        self.create_member(
-            user=user,
-            organization=self.org,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
             teams=[self.team],
         )
         assert self.has_object_perm(None, user, self.team)
diff --git a/tests/sentry/api/endpoints/test_organization_access_request_details.py b/tests/sentry/api/endpoints/test_organization_access_request_details.py
index b235977d3d..4174b98953 100644
--- a/tests/sentry/api/endpoints/test_organization_access_request_details.py
+++ b/tests/sentry/api/endpoints/test_organization_access_request_details.py
@@ -4,7 +4,7 @@ from django.core import mail
 from django.core.urlresolvers import reverse
 
 from sentry.models import (
-    OrganizationAccessRequest, OrganizationMemberTeam, OrganizationMemberType
+    OrganizationAccessRequest, OrganizationMemberTeam
 )
 from sentry.testutils import APITestCase
 
@@ -18,8 +18,7 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
         member = self.create_member(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
         team = self.create_team(name='foo', organization=organization)
 
@@ -56,8 +55,7 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
         member = self.create_member(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
         team = self.create_team(name='foo', organization=organization)
 
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index f42e2726b4..532b0988c7 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -3,9 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from mock import patch
 
-from sentry.models import (
-    OrganizationMemberType, Organization, OrganizationStatus
-)
+from sentry.models import Organization, OrganizationStatus
 from sentry.testutils import APITestCase
 
 
@@ -40,15 +38,15 @@ class OrganizationUpdateTest(APITestCase):
 
 class OrganizationDeleteTest(APITestCase):
     @patch('sentry.api.endpoints.organization_details.delete_organization')
-    def test_as_owner(self, mock_delete_organization):
+    def test_can_remove_as_owner(self, mock_delete_organization):
         org = self.create_organization()
 
         user = self.create_user(email='foo@example.com', is_superuser=False)
 
-        org.member_set.create(
+        self.create_member(
+            organization=org,
             user=user,
-            has_global_access=True,
-            type=OrganizationMemberType.OWNER,
+            role='owner',
         )
 
         self.login_as(user)
@@ -70,17 +68,15 @@ class OrganizationDeleteTest(APITestCase):
             countdown=3600,
         )
 
-    def test_as_admin(self):
+    def test_cannot_remove_as_admin(self):
         org = self.create_organization(owner=self.user)
 
         user = self.create_user(email='foo@example.com', is_superuser=False)
 
-        org.member_set.create_or_update(
+        self.create_member(
             organization=org,
             user=user,
-            values={
-                'type': OrganizationMemberType.ADMIN,
-            }
+            role='admin',
         )
 
         self.login_as(user=user)
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index 8a463b122e..55a1ba8f50 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -4,7 +4,7 @@ from django.core.urlresolvers import reverse
 from mock import patch
 
 from sentry.models import (
-    AuthProvider, OrganizationMember, OrganizationMemberType
+    AuthProvider, OrganizationMember
 )
 from sentry.testutils import APITestCase
 
@@ -15,11 +15,10 @@ class UpdateOrganizationMemberTest(APITestCase):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name='foo', owner=self.user)
-        member_om = OrganizationMember.objects.create(
+        member_om = self.create_member(
             organization=organization,
             email='foo@example.com',
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
 
         path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
@@ -37,11 +36,10 @@ class UpdateOrganizationMemberTest(APITestCase):
 
         organization = self.create_organization(name='foo', owner=self.user)
         member = self.create_user('bar@example.com')
-        member_om = OrganizationMember.objects.create(
+        member_om = self.create_member(
             organization=organization,
             user=member,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
         AuthProvider.objects.create(organization=organization, provider='dummy')
 
@@ -60,11 +58,10 @@ class UpdateOrganizationMemberTest(APITestCase):
 
         organization = self.create_organization(name='foo', owner=self.user)
         member = self.create_user('bar@example.com')
-        member_om = OrganizationMember.objects.create(
+        member_om = self.create_member(
             organization=organization,
             user=member,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
 
         path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
@@ -83,11 +80,10 @@ class DeleteOrganizationMemberTest(APITestCase):
         organization = self.create_organization(name='foo', owner=self.user)
         member = self.create_user('bar@example.com')
 
-        member_om = OrganizationMember.objects.create(
+        member_om = self.create_member(
             organization=organization,
             user=member,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
 
         path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
@@ -106,9 +102,9 @@ class DeleteOrganizationMemberTest(APITestCase):
         organization = self.create_organization(name='foo', owner=self.user)
 
         # create a pending member, which shouldn't be counted in the checks
-        OrganizationMember.objects.create(
+        self.create_member(
             organization=organization,
-            type=OrganizationMemberType.OWNER,
+            role='owner',
             email='bar@example.com',
         )
 
@@ -117,6 +113,8 @@ class DeleteOrganizationMemberTest(APITestCase):
             user=self.user,
         )
 
+        assert owner_om.role == 'owner'
+
         path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, owner_om.id])
 
         self.login_as(self.user)
diff --git a/tests/sentry/api/endpoints/test_organization_member_team_details.py b/tests/sentry/api/endpoints/test_organization_member_team_details.py
index 93816431dc..cfd7fe5a85 100644
--- a/tests/sentry/api/endpoints/test_organization_member_team_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_team_details.py
@@ -1,92 +1,38 @@
 from __future__ import absolute_import
 
-from django.core import mail
 from django.core.urlresolvers import reverse
 
-from sentry.models import (
-    Organization, OrganizationAccessRequest, OrganizationMemberTeam,
-    OrganizationMemberType
-)
+from sentry.models import Organization, OrganizationMemberTeam
 from sentry.testutils import APITestCase
 
 
 class CreateOrganizationMemberTeamTest(APITestCase):
-    def test_can_join_as_statusless_global_member(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        user = self.create_user('dummy@example.com')
-        member_om = self.create_member(
-            organization=organization,
-            user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=True,
+    def test_can_join_as_owner_without_open_membership(self):
+        organization = self.create_organization(
+            name='foo',
+            owner=self.user,
+            flags=0,
         )
         team = self.create_team(name='foo', organization=organization)
-
-        path = reverse('sentry-api-0-organization-member-team-details', args=[
-            organization.slug, member_om.id, team.slug,
-        ])
-
-        self.login_as(self.user)
-
-        resp = self.client.post(path)
-
-        assert resp.status_code == 204
-
-    def test_can_join_as_global_member(self):
-        organization = self.create_organization(name='foo', owner=self.user)
         user = self.create_user('dummy@example.com')
         member_om = self.create_member(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=True,
-        )
-        team = self.create_team(name='foo', organization=organization)
-        OrganizationMemberTeam.objects.create(
-            team=team,
-            organizationmember=member_om,
-            is_active=False,
+            role='owner',
+            teams=[],
         )
 
         path = reverse('sentry-api-0-organization-member-team-details', args=[
             organization.slug, member_om.id, team.slug,
         ])
 
-        self.login_as(self.user)
+        self.login_as(user)
 
         resp = self.client.post(path)
 
         assert resp.status_code == 201
 
-        omt = OrganizationMemberTeam.objects.get(
-            team=team,
-            organizationmember=member_om,
-        )
-        assert omt.is_active
-
-    def test_can_join_as_existing_team_member(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(name='foo', organization=organization)
-        user = self.create_user('dummy@example.com')
-        member_om = self.create_member(
-            organization=organization,
-            user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
-            teams=[team],
-        )
-
-        path = reverse('sentry-api-0-organization-member-team-details', args=[
-            organization.slug, member_om.id, team.slug,
-        ])
-
-        self.login_as(self.user)
-
-        resp = self.client.post(path)
-
-        assert resp.status_code == 204
-
-    def test_cannot_join_as_non_team_member(self):
+    def test_cannot_join_as_member_without_open_membership(self):
         organization = self.create_organization(
             name='foo',
             owner=self.user,
@@ -94,12 +40,10 @@ class CreateOrganizationMemberTeamTest(APITestCase):
         )
         team = self.create_team(name='foo', organization=organization)
         user = self.create_user('dummy@example.com')
-
         member_om = self.create_member(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
             teams=[],
         )
 
@@ -113,14 +57,12 @@ class CreateOrganizationMemberTeamTest(APITestCase):
 
         assert resp.status_code == 202
 
-        assert len(mail.outbox) == 1
-
-        assert OrganizationAccessRequest.objects.filter(
-            member=member_om,
+        assert not OrganizationMemberTeam.objects.filter(
             team=team,
+            organizationmember=member_om,
         ).exists()
 
-    def test_can_join_on_open_org(self):
+    def test_can_join_as_member_with_open_membership(self):
         organization = self.create_organization(
             name='foo',
             owner=self.user,
@@ -131,15 +73,15 @@ class CreateOrganizationMemberTeamTest(APITestCase):
         member_om = self.create_member(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
+            teams=[],
         )
 
         path = reverse('sentry-api-0-organization-member-team-details', args=[
             organization.slug, member_om.id, team.slug,
         ])
 
-        self.login_as(self.user)
+        self.login_as(user)
 
         resp = self.client.post(path)
 
@@ -153,58 +95,22 @@ class CreateOrganizationMemberTeamTest(APITestCase):
 
 
 class DeleteOrganizationMemberTeamTest(APITestCase):
-    def test_can_leave_as_statusless_global_member(self):
-        self.login_as(user=self.user)
-
+    def test_can_leave_as_member(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        user = self.create_user('dummy@example.com')
-        member_om = self.create_member(
-            organization=organization,
-            user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=True,
-        )
         team = self.create_team(name='foo', organization=organization)
-
-        path = reverse('sentry-api-0-organization-member-team-details', args=[
-            organization.slug, member_om.id, team.slug,
-        ])
-
-        self.login_as(self.user)
-
-        resp = self.client.delete(path)
-
-        assert resp.status_code == 200
-
-        assert OrganizationMemberTeam.objects.filter(
-            team=team,
-            organizationmember=member_om,
-            is_active=False,
-        ).exists()
-
-    def test_can_leave_as_global_member(self):
-        self.login_as(user=self.user)
-
-        organization = self.create_organization(name='foo', owner=self.user)
         user = self.create_user('dummy@example.com')
         member_om = self.create_member(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=True,
-        )
-        team = self.create_team(name='foo', organization=organization)
-        OrganizationMemberTeam.objects.create(
-            team=team,
-            organizationmember=member_om,
-            is_active=True,
+            role='member',
+            teams=[team],
         )
 
         path = reverse('sentry-api-0-organization-member-team-details', args=[
             organization.slug, member_om.id, team.slug,
         ])
 
-        self.login_as(self.user)
+        self.login_as(user)
 
         resp = self.client.delete(path)
 
@@ -216,54 +122,22 @@ class DeleteOrganizationMemberTeamTest(APITestCase):
             is_active=False,
         ).exists()
 
-    def test_can_leave_as_existing_team_member(self):
-        self.login_as(user=self.user)
-
-        organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(name='foo', organization=organization)
-        user = self.create_user('dummy@example.com')
-        member_om = self.create_member(
-            organization=organization,
-            user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
-            teams=[team],
-        )
-
-        path = reverse('sentry-api-0-organization-member-team-details', args=[
-            organization.slug, member_om.id, team.slug,
-        ])
-
-        self.login_as(self.user)
-
-        resp = self.client.delete(path)
-
-        assert resp.status_code == 200
-
-        assert not OrganizationMemberTeam.objects.filter(
-            team=team,
-            organizationmember=member_om,
-            is_active=True,
-        ).exists()
-
-    def test_can_leave_as_non_team_member(self):
-        self.login_as(user=self.user)
-
+    def test_can_leave_as_non_member(self):
         organization = self.create_organization(name='foo', owner=self.user)
         team = self.create_team(name='foo', organization=organization)
         user = self.create_user('dummy@example.com')
         member_om = self.create_member(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
+            teams=[],
         )
 
         path = reverse('sentry-api-0-organization-member-team-details', args=[
             organization.slug, member_om.id, team.slug,
         ])
 
-        self.login_as(self.user)
+        self.login_as(user)
 
         resp = self.client.delete(path)
 
diff --git a/tests/sentry/api/endpoints/test_project_member_index.py b/tests/sentry/api/endpoints/test_project_member_index.py
index 37dc771012..0289046f18 100644
--- a/tests/sentry/api/endpoints/test_project_member_index.py
+++ b/tests/sentry/api/endpoints/test_project_member_index.py
@@ -14,10 +14,10 @@ class ProjectMemberIndexTest(APITestCase):
         team = self.create_team(organization=org, slug='baz')
         project_1 = self.create_project(team=team, slug='foo')
         self.create_project(team=team, slug='bar')
-        org.member_set.create(user=user_2, has_global_access=True)
-        org.member_set.create(user=user_3, has_global_access=False)
+        self.create_member(organization=org, user=user_2, teams=[project_1.team])
+        self.create_member(organization=org, user=user_3, teams=[project_1.team])
 
-        self.login_as(user=user_1)
+        self.login_as(user=user_2)
 
         url = reverse('sentry-api-0-project-member-index', kwargs={
             'organization_slug': project_1.organization.slug,
@@ -27,4 +27,4 @@ class ProjectMemberIndexTest(APITestCase):
         assert response.status_code == 200
         assert len(response.data) == 2
         assert response.data[0]['email'] == user_2.email
-        assert response.data[1]['email'] == user_1.email
+        assert response.data[1]['email'] == user_3.email
diff --git a/tests/sentry/api/endpoints/test_team_details.py b/tests/sentry/api/endpoints/test_team_details.py
index ec5fe99558..473517ee6d 100644
--- a/tests/sentry/api/endpoints/test_team_details.py
+++ b/tests/sentry/api/endpoints/test_team_details.py
@@ -3,9 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from mock import patch
 
-from sentry.models import (
-    OrganizationMemberType, Team, TeamStatus
-)
+from sentry.models import Team, TeamStatus
 from sentry.testutils import APITestCase
 
 
@@ -42,17 +40,18 @@ class TeamUpdateTest(APITestCase):
 
 class TeamDeleteTest(APITestCase):
     @patch('sentry.api.endpoints.team_details.delete_team')
-    def test_as_admin(self, delete_team):
+    def test_can_remove_as_team_admin(self, delete_team):
         org = self.create_organization()
         team = self.create_team(organization=org)
         project = self.create_project(team=team)  # NOQA
 
         user = self.create_user(email='foo@example.com', is_superuser=False)
 
-        org.member_set.create(
+        self.create_member(
+            organization=org,
             user=user,
-            has_global_access=True,
-            type=OrganizationMemberType.ADMIN,
+            role='admin',
+            teams=[team],
         )
 
         self.login_as(user)
@@ -76,7 +75,7 @@ class TeamDeleteTest(APITestCase):
             countdown=3600,
         )
 
-    def test_as_member(self):
+    def test_cannot_remove_as_member(self):
         org = self.create_organization(owner=self.user)
         team = self.create_team(organization=org)
         project = self.create_project(team=team)  # NOQA
@@ -87,7 +86,7 @@ class TeamDeleteTest(APITestCase):
             organization=org,
             user=user,
             values={
-                'type': OrganizationMemberType.MEMBER,
+                'role': 'member',
             }
         )
 
diff --git a/tests/sentry/auth/test_access.py b/tests/sentry/auth/test_access.py
index e18bdd4172..c2cfebbb88 100644
--- a/tests/sentry/auth/test_access.py
+++ b/tests/sentry/auth/test_access.py
@@ -19,10 +19,13 @@ class FromUserTest(TestCase):
         assert not result.scopes
         assert not result.has_team(team)
 
-    def test_global_org_member_access(self):
+    def test_owner_all_teams(self):
         user = self.create_user()
-        organization = self.create_organization(owner=user)
-        member = organization.member_set.get(user=user)
+        organization = self.create_organization(owner=self.user)
+        member = self.create_member(
+            organization=organization, user=user,
+            role='owner',
+        )
         team = self.create_team(organization=organization)
 
         result = access.from_user(user, organization)
@@ -31,6 +34,21 @@ class FromUserTest(TestCase):
         assert result.scopes == member.get_scopes()
         assert result.has_team(team)
 
+    def test_member_no_teams(self):
+        user = self.create_user()
+        organization = self.create_organization(owner=self.user)
+        member = self.create_member(
+            organization=organization, user=user,
+            role='member',
+        )
+        team = self.create_team(organization=organization)
+
+        result = access.from_user(user, organization)
+        assert result.is_active
+        assert result.sso_is_valid
+        assert result.scopes == member.get_scopes()
+        assert not result.has_team(team)
+
     def test_team_restricted_org_member_access(self):
         user = self.create_user()
         organization = self.create_organization()
@@ -38,7 +56,6 @@ class FromUserTest(TestCase):
         member = self.create_member(
             organization=organization,
             user=user,
-            has_global_access=False,
             teams=[team],
         )
 
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index a98ad3963f..87a700f5be 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -21,7 +21,6 @@ class BaseAPITest(TestCase):
         self.user = self.create_user('coreapi@example.com')
         self.team = self.create_team(name='Foo')
         self.project = self.create_project(team=self.team)
-        self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create()[0]
         self.helper = self.helper_cls(agent='Awesome Browser', ip_address='69.69.69.69')
 
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 5446aaa5a2..10b40bdfe8 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -2,7 +2,6 @@
 
 from __future__ import absolute_import
 
-from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.models import Group, GroupTagValue, Team, User
 from sentry.testutils import TestCase
 
@@ -43,34 +42,18 @@ class TeamManagerTest(TestCase):
     def test_simple(self):
         user = User.objects.create(username='foo')
         user2 = User.objects.create(username='bar')
-        user3 = User.objects.create(username='baz')
-        org = self.create_organization(owner=user)
+        org = self.create_organization()
         team = self.create_team(organization=org, name='Test')
+        self.create_member(organization=org, user=user, teams=[team])
 
         result = Team.objects.get_for_user(
             organization=org,
             user=user,
-            access=MEMBER_OWNER,
         )
         assert result == [team]
 
         result = Team.objects.get_for_user(
             organization=org,
             user=user2,
-            access=MEMBER_OWNER,
-        )
-        assert result == []
-
-        result = Team.objects.get_for_user(
-            organization=org,
-            user=user,
-            access=MEMBER_USER,
-        )
-        assert result == [team]
-
-        result = Team.objects.get_for_user(
-            organization=org,
-            user=user3,
-            access=MEMBER_OWNER,
         )
         assert result == []
diff --git a/tests/sentry/models/test_organization.py b/tests/sentry/models/test_organization.py
index a142154547..43f043bb57 100644
--- a/tests/sentry/models/test_organization.py
+++ b/tests/sentry/models/test_organization.py
@@ -1,8 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.models import (
-    OrganizationMember, OrganizationMemberTeam, OrganizationMemberType, Team
-)
+from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
 from sentry.testutils import TestCase
 
 
@@ -13,35 +11,46 @@ class OrganizationTest(TestCase):
         from_team = self.create_team(organization=from_org)
         from_user = self.create_user('baz@example.com')
         other_user = self.create_user('bizbaz@example.com')
-        self.create_member(organization=from_org, user=from_user,
-                           has_global_access=True)
-        self.create_member(organization=from_org, user=other_user,
-                           has_global_access=True)
+        self.create_member(organization=from_org, user=from_user)
+        other_member = self.create_member(organization=from_org, user=other_user)
+
+        OrganizationMemberTeam.objects.create(
+            organizationmember=other_member,
+            team=from_team,
+        )
 
         to_owner = self.create_user('bar@example.com')
         to_org = self.create_organization(owner=to_owner)
         to_team = self.create_team(organization=to_org)
-        self.create_member(organization=to_org, user=other_user)
+        to_member = self.create_member(organization=to_org, user=other_user)
+
+        OrganizationMemberTeam.objects.create(
+            organizationmember=to_member,
+            team=to_team,
+        )
 
         from_org.merge_to(to_org)
 
         assert OrganizationMember.objects.filter(
             organization=to_org,
             user=from_owner,
-            type=OrganizationMemberType.OWNER,
-            has_global_access=True,
+            role='owner',
         ).exists()
 
         team = Team.objects.get(id=from_team.id)
         assert team.organization == to_org
 
         member = OrganizationMember.objects.get(
-            user=from_user,
+            user=other_user,
             organization=to_org,
         )
-        assert member.has_global_access
         assert OrganizationMemberTeam.objects.filter(
             organizationmember=member,
             team=to_team,
-            is_active=False,
+            is_active=True,
+        ).exists()
+        assert OrganizationMemberTeam.objects.filter(
+            organizationmember=member,
+            team=from_team,
+            is_active=True,
         ).exists()
diff --git a/tests/sentry/models/test_project.py b/tests/sentry/models/test_project.py
index 5b6f3b39cb..00ebab1b29 100644
--- a/tests/sentry/models/test_project.py
+++ b/tests/sentry/models/test_project.py
@@ -7,7 +7,7 @@ from sentry.testutils import TestCase
 
 
 class ProjectTest(TestCase):
-    def test_global_member(self):
+    def test_member_set_simple(self):
         user = self.create_user()
         org = self.create_organization(owner=user)
         team = self.create_team(organization=org)
@@ -16,6 +16,11 @@ class ProjectTest(TestCase):
             user=user,
             organization=org,
         )
+        OrganizationMemberTeam.objects.create(
+            organizationmember=member,
+            team=team,
+            is_active=True
+        )
 
         assert list(project.member_set.all()) == [member]
 
@@ -35,32 +40,3 @@ class ProjectTest(TestCase):
         )
 
         assert list(project.member_set.all()) == []
-
-    def test_active_basic_member(self):
-        user = self.create_user()
-        org = self.create_organization(owner=user)
-        team = self.create_team(organization=org)
-        project = self.create_project(team=team)
-        user2 = self.create_user('foo@example.com')
-        member = self.create_member(
-            user=user2,
-            organization=org,
-            has_global_access=False,
-            teams=[team]
-        )
-
-        assert member in project.member_set.all()
-
-    def test_teamless_basic_member(self):
-        user = self.create_user()
-        org = self.create_organization(owner=user)
-        team = self.create_team(organization=org)
-        project = self.create_project(team=team)
-        user2 = self.create_user('foo@example.com')
-        member = self.create_member(
-            user=user2,
-            organization=org,
-            has_global_access=False,
-        )
-
-        assert member not in project.member_set.all()
diff --git a/tests/sentry/models/test_team.py b/tests/sentry/models/test_team.py
index 1545abf3c9..b83d9193b8 100644
--- a/tests/sentry/models/test_team.py
+++ b/tests/sentry/models/test_team.py
@@ -15,7 +15,11 @@ class TeamTest(TestCase):
             user=user,
             organization=org,
         )
-
+        OrganizationMemberTeam.objects.create(
+            organizationmember=member,
+            team=team,
+            is_active=True,
+        )
         assert list(team.member_set.all()) == [member]
 
     def test_inactive_global_member(self):
@@ -42,8 +46,8 @@ class TeamTest(TestCase):
         member = self.create_member(
             user=user2,
             organization=org,
-            has_global_access=False,
-            teams=[team]
+            role='member',
+            teams=[team],
         )
 
         assert member in team.member_set.all()
@@ -56,7 +60,8 @@ class TeamTest(TestCase):
         member = self.create_member(
             user=user2,
             organization=org,
-            has_global_access=False,
+            role='member',
+            teams=[],
         )
 
         assert member not in team.member_set.all()
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 24127a0164..05e5e758ed 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -10,7 +10,9 @@ from exam import fixture
 from mock import Mock
 
 from sentry.interfaces.stacktrace import Stacktrace
-from sentry.models import Event, Group, Rule
+from sentry.models import (
+    Event, Group, OrganizationMember, OrganizationMemberTeam, Rule
+)
 from sentry.plugins import Notification
 from sentry.plugins.sentry_mail.models import MailPlugin
 from sentry.testutils import TestCase
@@ -170,8 +172,14 @@ class MailPluginTest(TestCase):
         team = self.create_team(organization=organization)
 
         project = self.create_project(name='Test', team=team)
-        organization.member_set.get_or_create(user=user)
-        organization.member_set.get_or_create(user=user2)
+        OrganizationMemberTeam.objects.create(
+            organizationmember=OrganizationMember.objects.get(
+                user=user,
+                organization=organization,
+            ),
+            team=team,
+        )
+        self.create_member(user=user2, organization=organization, teams=[team])
 
         # all members
         assert (sorted(set([user.pk, user2.pk])) ==
@@ -185,8 +193,7 @@ class MailPluginTest(TestCase):
 
         user4 = User.objects.create(username='baz4', email='bar@example.com',
                                     is_active=True)
-        organization.member_set.get_or_create(user=user4)
-
+        self.create_member(user=user4, organization=organization, teams=[team])
         assert user4.pk in self.plugin.get_sendable_users(project)
 
         # disabled by default user4
diff --git a/tests/sentry/web/frontend/groups/tests.py b/tests/sentry/web/frontend/groups/tests.py
index aede69268a..82c864832b 100644
--- a/tests/sentry/web/frontend/groups/tests.py
+++ b/tests/sentry/web/frontend/groups/tests.py
@@ -2,8 +2,6 @@
 
 from __future__ import absolute_import
 
-import json
-
 from django.core.urlresolvers import reverse
 from exam import fixture
 
@@ -88,22 +86,3 @@ class GroupEventDetailsTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/bases/react.html')
-
-
-class GroupEventJsonTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-group-event-json', kwargs={
-            'organization_slug': self.organization.slug,
-            'project_id': self.project.slug,
-            'group_id': self.group.id,
-            'event_id_or_latest': self.event.id,
-        })
-
-    def test_does_render(self):
-        self.login_as(self.user)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        assert resp['Content-Type'] == 'application/json'
-        data = json.loads(resp.content)
-        assert data['id'] == self.event.event_id
diff --git a/tests/sentry/web/frontend/plugins/__init__.py b/tests/sentry/web/frontend/plugins/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/web/frontend/plugins/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/web/frontend/projects/__init__.py b/tests/sentry/web/frontend/projects/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/web/frontend/projects/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
deleted file mode 100644
index 4ef35c4ad2..0000000000
--- a/tests/sentry/web/frontend/projects/tests.py
+++ /dev/null
@@ -1,155 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import, print_function
-
-import logging
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import ProjectKey, ProjectKeyStatus, TagKey
-from sentry.testutils import TestCase
-
-logger = logging.getLogger(__name__)
-
-
-class ManageProjectKeysTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-project-keys', args=[self.organization.slug, self.project.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_renders_with_required_context(self):
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/projects/keys.html')
-        assert 'key_list' in resp.context
-
-
-class NewProjectKeyTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-new-project-key', args=[self.organization.slug, self.project.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_generates_new_key_and_redirects(self):
-        keycount = ProjectKey.objects.filter(project=self.project).count()
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 302
-        newkeycount = ProjectKey.objects.filter(project=self.project).count()
-        assert newkeycount == keycount + 1
-
-
-class RemoveProjectKeyTest(TestCase):
-    def setUp(self):
-        super(RemoveProjectKeyTest, self).setUp()
-        self.key = ProjectKey.objects.create(project=self.project)
-
-    @fixture
-    def path(self):
-        return reverse('sentry-remove-project-key', args=[self.organization.slug, self.project.id, self.key.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path, 'POST')
-
-    def test_does_not_respond_to_get(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 405
-
-    def test_removes_key_and_redirects(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        assert not ProjectKey.objects.filter(id=self.key.id).exists()
-
-
-class EnableProjectKeyTest(TestCase):
-    def setUp(self):
-        super(EnableProjectKeyTest, self).setUp()
-        self.key = ProjectKey.objects.create(
-            project=self.project,
-            status=ProjectKeyStatus.INACTIVE,
-        )
-
-    @fixture
-    def path(self):
-        return reverse('sentry-enable-project-key', args=[self.organization.slug, self.project.id, self.key.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path, 'POST')
-
-    def test_does_not_respond_to_get(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 405
-
-    def test_does_enable(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        key = ProjectKey.objects.get(id=self.key.id)
-        assert key.status == ProjectKeyStatus.ACTIVE
-
-
-class DisableProjectKeyTest(TestCase):
-    def setUp(self):
-        super(DisableProjectKeyTest, self).setUp()
-        self.key = ProjectKey.objects.create(
-            project=self.project,
-            status=ProjectKeyStatus.ACTIVE,
-        )
-
-    @fixture
-    def path(self):
-        return reverse('sentry-disable-project-key', args=[self.organization.slug, self.project.id, self.key.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path, 'POST')
-
-    def test_does_not_respond_to_get(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 405
-
-    def test_does_enable(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        key = ProjectKey.objects.get(id=self.key.id)
-        assert key.status == ProjectKeyStatus.INACTIVE
-
-
-class ManageProjectTagsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-project-tags', args=[self.organization.slug, self.project.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_simple(self):
-        TagKey.objects.create(project=self.project, key='site')
-        TagKey.objects.create(project=self.project, key='url')
-        TagKey.objects.create(project=self.project, key='os')
-
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/projects/manage_tags.html')
-        assert resp.context['organization'] == self.organization
-        assert resp.context['team'] == self.team
-        assert resp.context['project'] == self.project
-        tag_list = [t.key for t in resp.context['tag_list']]
-        assert 'site' in tag_list
-        assert 'url' in tag_list
-        assert 'os' in tag_list
diff --git a/tests/sentry/web/frontend/test_accept_organization_invite.py b/tests/sentry/web/frontend/test_accept_organization_invite.py
index d440e6c0ce..0bc7b3a7ed 100644
--- a/tests/sentry/web/frontend/test_accept_organization_invite.py
+++ b/tests/sentry/web/frontend/test_accept_organization_invite.py
@@ -2,10 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
-    OrganizationMemberType
-)
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, OrganizationMember
 from sentry.testutils import TestCase
 
 
@@ -56,7 +53,7 @@ class AcceptInviteTest(TestCase):
 
         om = OrganizationMember.objects.create(
             email='newuser@example.com',
-            type=OrganizationMemberType.MEMBER,
+            role='member',
             organization=self.organization,
         )
         resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
@@ -79,7 +76,7 @@ class AcceptInviteTest(TestCase):
     def test_cannot_accept_while_unauthenticated(self):
         om = OrganizationMember.objects.create(
             email='newuser@example.com',
-            type=OrganizationMemberType.MEMBER,
+            role='member',
             organization=self.organization,
         )
         resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
diff --git a/tests/sentry/web/frontend/test_create_organization.py b/tests/sentry/web/frontend/test_create_organization.py
index cc98458fa4..782159bc49 100644
--- a/tests/sentry/web/frontend/test_create_organization.py
+++ b/tests/sentry/web/frontend/test_create_organization.py
@@ -3,9 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from exam import fixture
 
-from sentry.models import (
-    Organization, OrganizationMember, OrganizationMemberType
-)
+from sentry.models import Organization, OrganizationMember
 from sentry.testutils import TestCase
 
 
@@ -33,7 +31,7 @@ class CreateOrganizationTest(TestCase):
         assert OrganizationMember.objects.filter(
             organization=org,
             user=self.user,
-            type=OrganizationMemberType.OWNER,
+            role='owner',
         ).exists()
 
         redirect_uri = reverse('sentry-create-team', args=[org.slug])
diff --git a/tests/sentry/web/frontend/test_create_organization_member.py b/tests/sentry/web/frontend/test_create_organization_member.py
index f490bfdf52..84b3a0959d 100644
--- a/tests/sentry/web/frontend/test_create_organization_member.py
+++ b/tests/sentry/web/frontend/test_create_organization_member.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.core import mail
 from django.core.urlresolvers import reverse
 
-from sentry.models import OrganizationMember, OrganizationMemberType
+from sentry.models import OrganizationMember
 from sentry.testutils import TestCase
 
 
@@ -25,7 +25,7 @@ class CreateOrganizationMemberTest(TestCase):
 
         with self.settings(SENTRY_ENABLE_INVITES=True):
             resp = self.client.post(path, {
-                'type': OrganizationMemberType.MEMBER,
+                'role': 'admin',
                 'email': 'foo@example.com',
             })
         assert resp.status_code == 302
@@ -35,7 +35,7 @@ class CreateOrganizationMemberTest(TestCase):
             email='foo@example.com',
         )
 
-        assert member.type == OrganizationMemberType.MEMBER
+        assert member.role == 'admin'
         assert member.user is None
 
         redirect_uri = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
@@ -55,12 +55,12 @@ class CreateOrganizationMemberTest(TestCase):
         member = OrganizationMember.objects.create(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
+            role='member',
         )
 
         with self.settings(SENTRY_ENABLE_INVITES=True):
             resp = self.client.post(path, {
-                'type': OrganizationMemberType.ADMIN,
+                'role': 'member',
                 'email': 'foo@example.com',
             })
 
@@ -68,7 +68,7 @@ class CreateOrganizationMemberTest(TestCase):
 
         member = OrganizationMember.objects.get(id=member.id)
 
-        assert member.type == OrganizationMemberType.MEMBER
+        assert member.role == 'member'
         assert member.email is None
 
         redirect_uri = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
@@ -83,7 +83,7 @@ class CreateOrganizationMemberTest(TestCase):
 
         with self.settings(SENTRY_ENABLE_INVITES=False):
             resp = self.client.post(path, {
-                'type': OrganizationMemberType.MEMBER,
+                'role': 'member',
                 'user': 'foo@example.com',
             })
         assert resp.status_code == 302
@@ -93,7 +93,7 @@ class CreateOrganizationMemberTest(TestCase):
             user=user,
         )
 
-        assert member.type == OrganizationMemberType.MEMBER
+        assert member.role == 'member'
         assert member.email is None
 
         redirect_uri = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
@@ -106,7 +106,7 @@ class CreateOrganizationMemberTest(TestCase):
 
         with self.settings(SENTRY_ENABLE_INVITES=False):
             resp = self.client.post(path, {
-                'type': OrganizationMemberType.MEMBER,
+                'role': 'member',
                 'user': 'bar@example.com',
             })
 
diff --git a/tests/sentry/web/frontend/test_create_project.py b/tests/sentry/web/frontend/test_create_project.py
index c8194d7079..e2bacd7454 100644
--- a/tests/sentry/web/frontend/test_create_project.py
+++ b/tests/sentry/web/frontend/test_create_project.py
@@ -11,20 +11,20 @@ class CreateProjectPermissionTest(PermissionTestCase):
         super(CreateProjectPermissionTest, self).setUp()
         self.path = reverse('sentry-create-project', args=[self.organization.slug])
 
+    def test_non_member_cannot_load(self):
+        self.assert_non_member_cannot_access(self.path)
+
     def test_teamless_admin_cannot_load(self):
         self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_team_member_can_load(self):
-        self.assert_team_member_cannot_access(self.path)
-
     def test_team_admin_can_load(self):
         self.assert_team_admin_can_access(self.path)
 
-    def test_org_member_cannot_load(self):
-        self.assert_org_member_cannot_access(self.path)
+    def test_member_cannot_load(self):
+        self.assert_member_cannot_access(self.path)
 
-    def test_org_admin_can_load(self):
-        self.assert_org_admin_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class CreateProjectTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_create_project_key.py b/tests/sentry/web/frontend/test_create_project_key.py
new file mode 100644
index 0000000000..312f80e6fe
--- /dev/null
+++ b/tests/sentry/web/frontend/test_create_project_key.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import ProjectKey
+from sentry.testutils import TestCase
+
+
+class NewProjectKeyTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-new-project-key', args=[self.organization.slug, self.project.slug])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_generates_new_key_and_redirects(self):
+        keycount = ProjectKey.objects.filter(project=self.project).count()
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path)
+        assert resp.status_code == 302
+        newkeycount = ProjectKey.objects.filter(project=self.project).count()
+        assert newkeycount == keycount + 1
diff --git a/tests/sentry/web/frontend/test_create_team.py b/tests/sentry/web/frontend/test_create_team.py
index 0415238c83..839aab7bf6 100644
--- a/tests/sentry/web/frontend/test_create_team.py
+++ b/tests/sentry/web/frontend/test_create_team.py
@@ -11,17 +11,17 @@ class CreateTeamPermissionTest(PermissionTestCase):
         super(CreateTeamPermissionTest, self).setUp()
         self.path = reverse('sentry-create-team', args=[self.organization.slug])
 
-    def test_teamless_admin_cannot_load(self):
-        self.assert_teamless_admin_cannot_access(self.path)
+    def test_teamless_admin_can_load(self):
+        self.assert_teamless_admin_can_access(self.path)
 
-    def test_team_admin_cannot_load(self):
-        self.assert_team_admin_cannot_access(self.path)
+    def test_team_admin_can_load(self):
+        self.assert_team_admin_can_access(self.path)
 
-    def test_org_member_cannot_load(self):
-        self.assert_org_member_cannot_access(self.path)
+    def test_member_cannot_load(self):
+        self.assert_member_cannot_access(self.path)
 
-    def test_org_admin_can_load(self):
-        self.assert_org_admin_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class CreateTeamTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_disable_project_key.py b/tests/sentry/web/frontend/test_disable_project_key.py
new file mode 100644
index 0000000000..d504a7b771
--- /dev/null
+++ b/tests/sentry/web/frontend/test_disable_project_key.py
@@ -0,0 +1,31 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import ProjectKey, ProjectKeyStatus
+from sentry.testutils import TestCase
+
+
+class DisableProjectKeyTest(TestCase):
+    def setUp(self):
+        super(DisableProjectKeyTest, self).setUp()
+        self.key = ProjectKey.objects.create(
+            project=self.project,
+            status=ProjectKeyStatus.ACTIVE,
+        )
+
+    @fixture
+    def path(self):
+        return reverse('sentry-disable-project-key', args=[self.organization.slug, self.project.slug, self.key.id])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path, 'POST')
+
+    def test_does_enable(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path)
+        assert resp.status_code == 302
+        key = ProjectKey.objects.get(id=self.key.id)
+        assert key.status == ProjectKeyStatus.INACTIVE
diff --git a/tests/sentry/web/frontend/test_enable_project_key.py b/tests/sentry/web/frontend/test_enable_project_key.py
new file mode 100644
index 0000000000..7b114cfd76
--- /dev/null
+++ b/tests/sentry/web/frontend/test_enable_project_key.py
@@ -0,0 +1,31 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import ProjectKey, ProjectKeyStatus
+from sentry.testutils import TestCase
+
+
+class EnableProjectKeyTest(TestCase):
+    def setUp(self):
+        super(EnableProjectKeyTest, self).setUp()
+        self.key = ProjectKey.objects.create(
+            project=self.project,
+            status=ProjectKeyStatus.INACTIVE,
+        )
+
+    @fixture
+    def path(self):
+        return reverse('sentry-enable-project-key', args=[self.organization.slug, self.project.slug, self.key.id])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path, 'POST')
+
+    def test_does_enable(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path)
+        assert resp.status_code == 302
+        key = ProjectKey.objects.get(id=self.key.id)
+        assert key.status == ProjectKeyStatus.ACTIVE
diff --git a/tests/sentry/web/frontend/test_group_event_json.py b/tests/sentry/web/frontend/test_group_event_json.py
new file mode 100644
index 0000000000..65b851c2a1
--- /dev/null
+++ b/tests/sentry/web/frontend/test_group_event_json.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+import json
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.testutils import TestCase
+
+
+class GroupEventJsonTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-event-json', kwargs={
+            'organization_slug': self.organization.slug,
+            'project_slug': self.project.slug,
+            'group_id': self.group.id,
+            'event_id_or_latest': self.event.id,
+        })
+
+    def test_does_render(self):
+        self.login_as(self.user)
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        assert resp['Content-Type'] == 'application/json'
+        data = json.loads(resp.content)
+        assert data['id'] == self.event.event_id
diff --git a/tests/sentry/web/frontend/test_organization_api_key_settings.py b/tests/sentry/web/frontend/test_organization_api_key_settings.py
index cacfcf300f..6eb3bb6008 100644
--- a/tests/sentry/web/frontend/test_organization_api_key_settings.py
+++ b/tests/sentry/web/frontend/test_organization_api_key_settings.py
@@ -14,14 +14,14 @@ class OrganizationApiKeySettingsPermissionTest(PermissionTestCase):
             self.organization.slug, key.id
         ])
 
-    def test_teamless_owner_cannot_load(self):
-        self.assert_teamless_owner_cannot_access(self.path)
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_org_member_cannot_load(self):
-        self.assert_org_member_cannot_access(self.path)
+    def test_member_cannot_load(self):
+        self.assert_member_cannot_access(self.path)
 
-    def test_org_admin_can_load(self):
-        self.assert_org_admin_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class OrganizationApiKeySettingsTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_organization_api_keys.py b/tests/sentry/web/frontend/test_organization_api_keys.py
index c716a24ac5..4420d3cabd 100644
--- a/tests/sentry/web/frontend/test_organization_api_keys.py
+++ b/tests/sentry/web/frontend/test_organization_api_keys.py
@@ -11,14 +11,14 @@ class OrganizationApiKeysPermissionTest(PermissionTestCase):
         super(OrganizationApiKeysPermissionTest, self).setUp()
         self.path = reverse('sentry-organization-api-keys', args=[self.organization.slug])
 
-    def test_teamless_owner_cannot_load(self):
-        self.assert_teamless_owner_cannot_access(self.path)
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_org_member_cannot_load(self):
-        self.assert_org_member_cannot_access(self.path)
+    def test_member_cannot_load(self):
+        self.assert_member_cannot_access(self.path)
 
-    def test_org_admin_can_load(self):
-        self.assert_org_admin_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class OrganizationApiKeysTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_organization_audit_log.py b/tests/sentry/web/frontend/test_organization_audit_log.py
index 616ecbea71..68a623792a 100644
--- a/tests/sentry/web/frontend/test_organization_audit_log.py
+++ b/tests/sentry/web/frontend/test_organization_audit_log.py
@@ -14,11 +14,11 @@ class OrganizationAuditLogPermissionTest(PermissionTestCase):
     def test_teamless_admin_cannot_load(self):
         self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_org_member_cannot_load(self):
-        self.assert_org_member_cannot_access(self.path)
+    def test_member_cannot_load(self):
+        self.assert_member_cannot_access(self.path)
 
-    def test_org_admin_can_load(self):
-        self.assert_org_admin_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class OrganizationAuditLogTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index e3035fda69..80ad94b0c9 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -11,17 +11,17 @@ class OrganizationAuthSettingsPermissionTest(PermissionTestCase):
         super(OrganizationAuthSettingsPermissionTest, self).setUp()
         self.path = reverse('sentry-organization-auth-settings', args=[self.organization.slug])
 
-    def test_teamless_owner_cannot_load(self):
+    def test_teamless_admin_cannot_load(self):
         with self.feature('organizations:sso'):
-            self.assert_teamless_owner_cannot_access(self.path)
+            self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_org_admin_cannot_load(self):
+    def test_team_admin_cannot_load(self):
         with self.feature('organizations:sso'):
-            self.assert_org_admin_cannot_access(self.path)
+            self.assert_team_admin_cannot_access(self.path)
 
-    def test_org_owner_can_load(self):
+    def test_owner_can_load(self):
         with self.feature('organizations:sso'):
-            self.assert_org_owner_can_access(self.path)
+            self.assert_owner_can_access(self.path)
 
 
 class OrganizationAuthSettingsTest(AuthProviderTestCase):
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index 29561d058f..0e6602d841 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -3,10 +3,7 @@ from __future__ import absolute_import
 from django.core import mail
 from django.core.urlresolvers import reverse
 
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
-    OrganizationMemberTeam, OrganizationMemberType
-)
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, OrganizationMember
 from sentry.testutils import TestCase, PermissionTestCase
 
 
@@ -17,11 +14,11 @@ class OrganizationMemberSettingsPermissionTest(PermissionTestCase):
         om = self.create_member(user=member, organization=self.organization)
         self.path = reverse('sentry-organization-member-settings', args=[self.organization.slug, om.id])
 
-    def test_teamless_member_can_load(self):
-        self.assert_teamless_admin_can_access(self.path)
+    def test_non_member_cannot_load(self):
+        self.assert_non_member_cannot_access(self.path)
 
-    def test_org_member_can_load(self):
-        self.assert_org_member_can_access(self.path)
+    def test_member_can_load(self):
+        self.assert_member_can_access(self.path)
 
 
 class OrganizationMemberSettingsTest(TestCase):
@@ -34,8 +31,7 @@ class OrganizationMemberSettingsTest(TestCase):
         member = self.create_member(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
             teams=[team_2],
         )
 
@@ -54,7 +50,7 @@ class OrganizationMemberSettingsTest(TestCase):
         assert resp.context['member'] == member
         assert resp.context['form']
 
-    def test_setting_global_access(self):
+    def test_setting_role(self):
         organization = self.create_organization(name='foo', owner=self.user)
         team_1 = self.create_team(name='foo', organization=organization)
         team_2 = self.create_team(name='bar', organization=organization)
@@ -63,8 +59,7 @@ class OrganizationMemberSettingsTest(TestCase):
         member = OrganizationMember.objects.create(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
 
         path = reverse('sentry-organization-member-settings',
@@ -73,17 +68,15 @@ class OrganizationMemberSettingsTest(TestCase):
         self.login_as(self.user)
 
         resp = self.client.post(path, {
-            'has_global_access': True,
             'teams': [team_1.id, team_2.id],
-            'type': OrganizationMemberType.ADMIN,
+            'role': 'admin',
         })
 
         assert resp.status_code == 302
 
         member = OrganizationMember.objects.get(id=member.id)
 
-        assert member.has_global_access is True
-        assert member.type == OrganizationMemberType.ADMIN
+        assert member.role == 'admin'
 
         assert member.teams.count() == 2
 
@@ -106,8 +99,7 @@ class OrganizationMemberSettingsTest(TestCase):
         member = OrganizationMember.objects.create(
             organization=organization,
             user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
         )
 
         path = reverse('sentry-organization-member-settings',
@@ -117,15 +109,13 @@ class OrganizationMemberSettingsTest(TestCase):
 
         resp = self.client.post(path, {
             'teams': [team_1.id, team_2.id],
-            'type': OrganizationMemberType.ADMIN,
+            'role': 'member',
         })
 
-        assert resp.status_code == 302
+        assert resp.status_code == 302, resp.context['form'].errors
 
         member = OrganizationMember.objects.get(id=member.id)
-
-        assert member.has_global_access is False
-        assert member.type == OrganizationMemberType.ADMIN
+        assert member.role == 'member'
 
         teams = list(member.teams.all())
         assert team_1 in teams
@@ -144,8 +134,6 @@ class OrganizationMemberSettingsTest(TestCase):
 
     def test_reinvite(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
 
         member = OrganizationMember.objects.create(
             organization=organization,
@@ -159,8 +147,6 @@ class OrganizationMemberSettingsTest(TestCase):
 
         resp = self.client.post(path, {
             'op': 'reinvite',
-            'teams': [team_1.id, team_2.id],
-            'type': OrganizationMemberType.ADMIN,
         })
 
         assert resp.status_code == 302
@@ -169,41 +155,6 @@ class OrganizationMemberSettingsTest(TestCase):
         assert mail.outbox[0].to == ['bar@example.com']
         assert mail.outbox[0].subject == 'Invite to join organization: foo'
 
-    def test_ensure_admin_cant_set_owner(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        admin = self.create_user('bar@example.com', is_superuser=False)
-        user = self.create_user('baz@example.com')
-
-        OrganizationMember.objects.create(
-            organization=organization,
-            user=admin,
-            type=OrganizationMemberType.ADMIN,
-            has_global_access=True,
-        )
-
-        member = OrganizationMember.objects.create(
-            organization=organization,
-            user=user,
-        )
-
-        path = reverse('sentry-organization-member-settings',
-                       args=[organization.slug, member.id])
-
-        self.login_as(admin)
-
-        resp = self.client.post(path, {
-            'type': OrganizationMemberType.OWNER,
-        })
-
-        assert resp.status_code == 200
-        assert resp.context['form'].errors['type']
-
-        resp = self.client.post(path, {
-            'type': OrganizationMemberType.MEMBER,
-        })
-
-        assert resp.status_code == 302
-
     def test_cannot_edit_yourself(self):
         organization = self.create_organization(name='foo', owner=self.user)
         member = OrganizationMember.objects.get(
@@ -225,7 +176,7 @@ class OrganizationMemberSettingsTest(TestCase):
         assert resp.context['organization'] == organization
         assert resp.context['member'] == member
 
-    def test_cannot_edit_higher_access(self):
+    def test_admin_cant_edit(self):
         organization = self.create_organization(name='foo', owner=self.user)
         member = self.create_user('foo@example.com', is_superuser=False)
         owner_om = OrganizationMember.objects.get(
@@ -236,7 +187,7 @@ class OrganizationMemberSettingsTest(TestCase):
         OrganizationMember.objects.create(
             organization=organization,
             user=member,
-            type=OrganizationMemberType.ADMIN,
+            role='admin',
         )
 
         path = reverse('sentry-organization-member-settings',
@@ -253,7 +204,7 @@ class OrganizationMemberSettingsTest(TestCase):
         assert resp.context['organization'] == organization
         assert resp.context['member'] == owner_om
 
-    def test_can_view_member_with_team_access(self):
+    def test_member_cant_edit(self):
         organization = self.create_organization(name='foo', owner=self.user)
         member = self.create_user('foo@example.com', is_superuser=False)
         owner_om = OrganizationMember.objects.get(
@@ -264,8 +215,7 @@ class OrganizationMemberSettingsTest(TestCase):
         OrganizationMember.objects.create(
             organization=organization,
             user=member,
-            has_global_access=False,
-            type=OrganizationMemberType.ADMIN,
+            role='member',
         )
 
         path = reverse('sentry-organization-member-settings',
@@ -281,46 +231,3 @@ class OrganizationMemberSettingsTest(TestCase):
 
         assert resp.context['organization'] == organization
         assert resp.context['member'] == owner_om
-
-    def test_global_access_with_inactive_teams(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
-
-        user = self.create_user('bar@example.com')
-        member = OrganizationMember.objects.create(
-            organization=organization,
-            user=user,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=True,
-        )
-
-        OrganizationMemberTeam.objects.create(
-            organizationmember=member,
-            team=team_1,
-            is_active=False,
-        )
-
-        path = reverse('sentry-organization-member-settings',
-                       args=[organization.slug, member.id])
-
-        self.login_as(self.user)
-
-        resp = self.client.post(path, {
-            'has_global_access': True,
-            'type': OrganizationMemberType.MEMBER,
-        })
-
-        assert resp.status_code == 302
-
-        member = OrganizationMember.objects.get(id=member.id)
-
-        assert member.has_global_access is True
-        assert member.type == OrganizationMemberType.MEMBER
-
-        om_teams = OrganizationMemberTeam.objects.filter(
-            organizationmember=member,
-        )
-
-        assert len(om_teams) == 1
-        assert om_teams[0].is_active is False
-        assert om_teams[0].team == team_1
diff --git a/tests/sentry/web/frontend/test_organization_members.py b/tests/sentry/web/frontend/test_organization_members.py
index 4e577d3696..9439157b5e 100644
--- a/tests/sentry/web/frontend/test_organization_members.py
+++ b/tests/sentry/web/frontend/test_organization_members.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import OrganizationMember, OrganizationMemberType
+from sentry.models import OrganizationMember
 from sentry.testutils import TestCase, PermissionTestCase
 
 
@@ -11,11 +11,8 @@ class OrganizationMembersPermissionTest(PermissionTestCase):
         super(OrganizationMembersPermissionTest, self).setUp()
         self.path = reverse('sentry-organization-members', args=[self.organization.slug])
 
-    def test_teamless_member_can_load(self):
-        self.assert_teamless_member_can_access(self.path)
-
-    def test_org_member_can_load(self):
-        self.assert_org_member_can_access(self.path)
+    def test_member_can_load(self):
+        self.assert_member_can_access(self.path)
 
     def test_non_member_cannot_load(self):
         self.assert_non_member_cannot_access(self.path)
@@ -38,8 +35,7 @@ class OrganizationMembersTest(TestCase):
         member_om = self.create_member(
             organization=organization,
             user=member,
-            type=OrganizationMemberType.MEMBER,
-            has_global_access=False,
+            role='member',
             teams=[team_2],
         )
 
@@ -57,6 +53,6 @@ class OrganizationMembersTest(TestCase):
         member_list = sorted(resp.context['member_list'], key=lambda x: x[0].id)
 
         assert member_list == [
-            (owner_om, [], False),
-            (member_om, [team_2], False),
+            (owner_om, False),
+            (member_om, False),
         ]
diff --git a/tests/sentry/web/frontend/test_organization_settings.py b/tests/sentry/web/frontend/test_organization_settings.py
index c73ae3c4d2..036bd5546d 100644
--- a/tests/sentry/web/frontend/test_organization_settings.py
+++ b/tests/sentry/web/frontend/test_organization_settings.py
@@ -14,11 +14,11 @@ class OrganizationSettingsPermissionTest(PermissionTestCase):
     def test_teamless_admin_cannot_load(self):
         self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_org_admin_can_load(self):
-        self.assert_org_admin_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
-    def test_org_member_cannot_load(self):
-        self.assert_org_member_cannot_access(self.path)
+    def test_member_cannot_load(self):
+        self.assert_member_cannot_access(self.path)
 
 
 class OrganizationSettingsTest(TestCase):
@@ -45,7 +45,11 @@ class OrganizationSettingsTest(TestCase):
 
         self.login_as(self.user)
 
-        resp = self.client.post(path, {'name': 'bar', 'slug': 'bar'})
+        resp = self.client.post(path, {
+            'name': 'bar',
+            'slug': 'bar',
+            'default_role': 'admin',
+        })
 
         assert resp.status_code == 302
 
@@ -53,3 +57,4 @@ class OrganizationSettingsTest(TestCase):
 
         assert organization.name == 'bar'
         assert organization.slug == 'bar'
+        assert organization.default_role == 'admin'
diff --git a/tests/sentry/web/frontend/test_project_keys.py b/tests/sentry/web/frontend/test_project_keys.py
new file mode 100644
index 0000000000..3d03bb8da3
--- /dev/null
+++ b/tests/sentry/web/frontend/test_project_keys.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.testutils import TestCase
+
+
+class ManageProjectKeysTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-manage-project-keys', args=[self.organization.slug, self.project.slug])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_renders_with_required_context(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/projects/keys.html')
+        assert 'key_list' in resp.context
diff --git a/tests/sentry/web/frontend/plugins/tests.py b/tests/sentry/web/frontend/test_project_plugins.py
similarity index 96%
rename from tests/sentry/web/frontend/plugins/tests.py
rename to tests/sentry/web/frontend/test_project_plugins.py
index cfc825f84d..9837585d79 100644
--- a/tests/sentry/web/frontend/plugins/tests.py
+++ b/tests/sentry/web/frontend/test_project_plugins.py
@@ -12,7 +12,7 @@ class ManageProjectPluginsTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-manage-project-plugins', args=[
-            self.organization.slug, self.project.id])
+            self.organization.slug, self.project.slug])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
diff --git a/tests/sentry/web/frontend/test_project_quotas.py b/tests/sentry/web/frontend/test_project_quotas.py
new file mode 100644
index 0000000000..65e298e784
--- /dev/null
+++ b/tests/sentry/web/frontend/test_project_quotas.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.testutils import TestCase
+
+
+class ProjectQuotasTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-manage-project-quotas', args=[self.organization.slug, self.project.slug])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_simple(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/projects/quotas.html')
+        assert resp.context['organization'] == self.organization
+        assert resp.context['team'] == self.team
+        assert resp.context['project'] == self.project
diff --git a/tests/sentry/web/frontend/test_project_rules.py b/tests/sentry/web/frontend/test_project_rules.py
new file mode 100644
index 0000000000..38d2c2132c
--- /dev/null
+++ b/tests/sentry/web/frontend/test_project_rules.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.testutils import TestCase
+
+
+class ProjectRuleTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-project-rules', args=[self.organization.slug, self.project.slug])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_simple(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/projects/rules/list.html')
+        assert resp.context['organization'] == self.organization
+        assert resp.context['team'] == self.team
+        assert resp.context['project'] == self.project
+        assert resp.context['rule_list']
diff --git a/tests/sentry/web/frontend/test_project_tags.py b/tests/sentry/web/frontend/test_project_tags.py
new file mode 100644
index 0000000000..23b295ce73
--- /dev/null
+++ b/tests/sentry/web/frontend/test_project_tags.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import TagKey
+from sentry.testutils import TestCase
+
+
+class ProjectTagsTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-manage-project-tags', args=[self.organization.slug, self.project.slug])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_simple(self):
+        TagKey.objects.create(project=self.project, key='site')
+        TagKey.objects.create(project=self.project, key='url')
+        TagKey.objects.create(project=self.project, key='os')
+
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/projects/manage_tags.html')
+        assert resp.context['organization'] == self.organization
+        assert resp.context['team'] == self.team
+        assert resp.context['project'] == self.project
+        tag_list = [t.key for t in resp.context['tag_list']]
+        assert 'site' in tag_list
+        assert 'url' in tag_list
+        assert 'os' in tag_list
diff --git a/tests/sentry/web/frontend/test_remove_account.py b/tests/sentry/web/frontend/test_remove_account.py
index 1c68a6354a..db8d3a2b9c 100644
--- a/tests/sentry/web/frontend/test_remove_account.py
+++ b/tests/sentry/web/frontend/test_remove_account.py
@@ -3,8 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.models import (
-    Organization, OrganizationMember, OrganizationMemberType,
-    OrganizationStatus, User
+    Organization, OrganizationMember, OrganizationStatus, User
 )
 from sentry.testutils import TestCase
 
@@ -20,16 +19,15 @@ class RemoveAccountTest(TestCase):
         self.create_member(
             user=other_user,
             organization=self.organization,
-            type=OrganizationMemberType.ADMIN,
-            has_global_access=True,
+            role='admin',
         )
+
         # dual owner
         self.organization2 = self.create_organization(name='b', owner=self.user)
         self.create_member(
-            organization=self.organization2,
-            type=OrganizationMemberType.OWNER,
-            has_global_access=True,
             user=other_user,
+            organization=self.organization2,
+            role='owner',
         )
 
         # non-owned
diff --git a/tests/sentry/web/frontend/test_remove_organization.py b/tests/sentry/web/frontend/test_remove_organization.py
index ea2f9e6ad7..fdf4e5809d 100644
--- a/tests/sentry/web/frontend/test_remove_organization.py
+++ b/tests/sentry/web/frontend/test_remove_organization.py
@@ -11,14 +11,14 @@ class RemoveOrganizationPermissionTest(PermissionTestCase):
         super(RemoveOrganizationPermissionTest, self).setUp()
         self.path = reverse('sentry-remove-organization', args=[self.organization.slug])
 
-    def test_teamless_owner_cannot_load(self):
-        self.assert_teamless_owner_cannot_access(self.path)
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_org_admin_cannot_load(self):
-        self.assert_org_admin_cannot_access(self.path)
+    def test_team_admin_cannot_load(self):
+        self.assert_team_admin_cannot_access(self.path)
 
-    def test_org_owner_can_load(self):
-        self.assert_org_owner_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class RemoveOrganizationTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_remove_project.py b/tests/sentry/web/frontend/test_remove_project.py
index abb49eaac1..5007e23daf 100644
--- a/tests/sentry/web/frontend/test_remove_project.py
+++ b/tests/sentry/web/frontend/test_remove_project.py
@@ -12,20 +12,14 @@ class RemoveProjectPermissionTest(PermissionTestCase):
         self.project = self.create_project(team=self.team)
         self.path = reverse('sentry-remove-project', args=[self.organization.slug, self.project.slug])
 
-    def test_teamless_owner_cannot_load(self):
-        self.assert_teamless_owner_cannot_access(self.path)
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_team_admin_cannot_load(self):
-        self.assert_team_admin_cannot_access(self.path)
+    def test_team_admin_can_load(self):
+        self.assert_team_admin_can_access(self.path)
 
-    def test_team_owner_can_load(self):
-        self.assert_team_owner_can_access(self.path)
-
-    def test_org_admin_cannot_load(self):
-        self.assert_org_admin_cannot_access(self.path)
-
-    def test_org_owner_can_load(self):
-        self.assert_org_owner_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class RemoveProjectTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_remove_project_key.py b/tests/sentry/web/frontend/test_remove_project_key.py
new file mode 100644
index 0000000000..01c6b0eadb
--- /dev/null
+++ b/tests/sentry/web/frontend/test_remove_project_key.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import ProjectKey
+from sentry.testutils import TestCase
+
+
+class RemoveProjectKeyTest(TestCase):
+    def setUp(self):
+        super(RemoveProjectKeyTest, self).setUp()
+        self.key = ProjectKey.objects.create(project=self.project)
+
+    @fixture
+    def path(self):
+        return reverse('sentry-remove-project-key', args=[self.organization.slug, self.project.slug, self.key.id])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path, 'POST')
+
+    def test_removes_key_and_redirects(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path)
+        assert resp.status_code == 302
+        assert not ProjectKey.objects.filter(id=self.key.id).exists()
diff --git a/tests/sentry/web/frontend/test_remove_team.py b/tests/sentry/web/frontend/test_remove_team.py
index 15b46cc8be..8578e50b46 100644
--- a/tests/sentry/web/frontend/test_remove_team.py
+++ b/tests/sentry/web/frontend/test_remove_team.py
@@ -11,20 +11,14 @@ class RemoveTeamPermissionTest(PermissionTestCase):
         super(RemoveTeamPermissionTest, self).setUp()
         self.path = reverse('sentry-remove-team', args=[self.organization.slug, self.team.slug])
 
-    def test_teamless_owner_cannot_load(self):
-        self.assert_teamless_owner_cannot_access(self.path)
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
 
-    def test_team_admin_cannot_load(self):
-        self.assert_team_admin_cannot_access(self.path)
+    def test_team_admin_can_load(self):
+        self.assert_team_admin_can_access(self.path)
 
-    def test_team_owner_can_load(self):
-        self.assert_team_owner_can_access(self.path)
-
-    def test_org_admin_cannot_load(self):
-        self.assert_org_admin_cannot_access(self.path)
-
-    def test_org_owner_can_load(self):
-        self.assert_org_owner_can_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class RemoveTeamTest(TestCase):
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/test_replay_event.py
similarity index 93%
rename from tests/sentry/web/frontend/tests.py
rename to tests/sentry/web/frontend/test_replay_event.py
index 731bd82565..2f2d8a3602 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/test_replay_event.py
@@ -13,7 +13,7 @@ class ReplayTest(TestCase):
     def path(self):
         return reverse('sentry-replay', kwargs={
             'organization_slug': self.organization.slug,
-            'project_id': self.project.slug,
+            'project_slug': self.project.slug,
             'group_id': self.group.id,
             'event_id': self.event.id,
         })
diff --git a/tests/sentry/web/frontend/test_team_settings.py b/tests/sentry/web/frontend/test_team_settings.py
index 54a35315cd..b0245f219c 100644
--- a/tests/sentry/web/frontend/test_team_settings.py
+++ b/tests/sentry/web/frontend/test_team_settings.py
@@ -15,14 +15,11 @@ class TeamSettingsPermissionTest(PermissionTestCase):
     def test_team_admin_can_load(self):
         self.assert_team_admin_can_access(self.path)
 
-    def test_team_member_cannot_load(self):
-        self.assert_team_member_cannot_access(self.path)
+    def test_member_cannot_load(self):
+        self.assert_member_cannot_access(self.path)
 
-    def test_org_admin_can_load(self):
-        self.assert_org_admin_can_access(self.path)
-
-    def test_org_member_cannot_load(self):
-        self.assert_org_member_cannot_access(self.path)
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
 
 
 class TeamSettingsTest(TestCase):
