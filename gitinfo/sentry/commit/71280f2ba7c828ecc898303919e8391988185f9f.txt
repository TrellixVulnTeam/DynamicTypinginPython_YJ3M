commit 71280f2ba7c828ecc898303919e8391988185f9f
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Oct 28 21:56:44 2015 -0700

    Enable react/sort-comp eslint rule

diff --git a/.eslintrc b/.eslintrc
index d6123c6009..e408a38a52 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -128,6 +128,7 @@
     "react/no-unknown-property": 2,  // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md
     "react/react-in-jsx-scope": 2,   // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md
     "react/self-closing-comp": 2,    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md
+    "react/sort-comp": 2,            // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md
     "react/wrap-multilines": 2,      // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/wrap-multilines.md
   }
 }
diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index e82ed633a0..d91a06228c 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -3,13 +3,13 @@ import AlertActions from '../actions/alertActions';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 var AlertMessage = React.createClass({
-  mixins: [PureRenderMixin],
-
   propTypes: {
     type: React.PropTypes.string,
     message: React.PropTypes.string
   },
 
+  mixins: [PureRenderMixin],
+
   closeAlert: function() {
     AlertActions.closeAlert(this.props.id);
   },
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 2be3c67d47..9d7fdc160d 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -14,6 +14,10 @@ import {valueIsEqual} from "../utils";
 import TooltipMixin from "../mixins/tooltip";
 
 var AssigneeSelector = React.createClass({
+  propTypes: {
+    id: React.PropTypes.string.isRequired
+  },
+
   mixins: [
     Reflux.listenTo(GroupStore, "onGroupChange"),
     TooltipMixin({
@@ -22,10 +26,6 @@ var AssigneeSelector = React.createClass({
     })
   ],
 
-  propTypes: {
-    id: React.PropTypes.string.isRequired
-  },
-
   getInitialState() {
     var group = GroupStore.get(this.props.id);
 
@@ -60,6 +60,12 @@ var AssigneeSelector = React.createClass({
     return valueIsEqual(nextState.assignedTo, this.state.assignedTo, true);
   },
 
+  componentDidUpdate(prevProps, prevState) {
+    // XXX(dcramer): fix odd dedraw issue as of Chrome 45.0.2454.15 dev (64-bit)
+    var node = jQuery(ReactDOM.findDOMNode(this.refs.container));
+    node.hide().show(0);
+  },
+
   onGroupChange(itemIds) {
     if (!itemIds.has(this.props.id)) {
       return;
@@ -117,12 +123,6 @@ var AssigneeSelector = React.createClass({
     );
   },
 
-  componentDidUpdate(prevProps, prevState) {
-    // XXX(dcramer): fix odd dedraw issue as of Chrome 45.0.2454.15 dev (64-bit)
-    var node = jQuery(ReactDOM.findDOMNode(this.refs.container));
-    node.hide().show(0);
-  },
-
   render() {
     var loading = this.state.loading;
     var assignedTo = this.state.assignedTo;
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index fc8fcb0541..a922312e7a 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -4,6 +4,20 @@ import { valueIsEqual } from "../utils";
 import TooltipMixin from "../mixins/tooltip";
 
 var BarChart = React.createClass({
+  propTypes: {
+    points: React.PropTypes.arrayOf(React.PropTypes.shape({
+      x: React.PropTypes.number.isRequired,
+      y: React.PropTypes.number.isRequired,
+      label: React.PropTypes.string
+    })),
+    placement: React.PropTypes.string,
+    label: React.PropTypes.string,
+    markers: React.PropTypes.arrayOf(React.PropTypes.shape({
+      x: React.PropTypes.number.isRequired,
+      label: React.PropTypes.string
+    }))
+  },
+
   mixins: [
     TooltipMixin(function () {
       var barChartInstance = this;
@@ -30,27 +44,12 @@ var BarChart = React.createClass({
     })
   ],
 
-
   statics: {
     getInterval(points) {
       return points.length > 1 ? points[1].x - points[0].x : null;
     }
   },
 
-  propTypes: {
-    points: React.PropTypes.arrayOf(React.PropTypes.shape({
-      x: React.PropTypes.number.isRequired,
-      y: React.PropTypes.number.isRequired,
-      label: React.PropTypes.string
-    })),
-    placement: React.PropTypes.string,
-    label: React.PropTypes.string,
-    markers: React.PropTypes.arrayOf(React.PropTypes.shape({
-      x: React.PropTypes.number.isRequired,
-      label: React.PropTypes.string
-    }))
-  },
-
   getDefaultProps() {
     return {
       className: "",
diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index 5e10d5f597..da1957c89d 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -5,6 +5,10 @@ var Count = React.createClass({
     value: React.PropTypes.any.isRequired
   },
 
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.value !== nextProps.value;
+  },
+
   numberFormats: [
       [1000000000, 'b'],
       [1000000, 'm'],
@@ -36,10 +40,6 @@ var Count = React.createClass({
       return '' + number;
   },
 
-  shouldComponentUpdate(nextProps, nextState) {
-    return this.props.value !== nextProps.value;
-  },
-
   render() {
     return (
       <span>{this.formatNumber(this.props.value)}</span>
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 52c611d03e..32deb29aed 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -28,6 +28,10 @@ var EventEntries = React.createClass({
     };
   },
 
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.event.id !== nextProps.event.id;
+  },
+
   // TODO(dcramer): make this extensible
   interfaces: {
     exception: require("./interfaces/exception"),
@@ -37,10 +41,6 @@ var EventEntries = React.createClass({
     csp: require("./interfaces/csp"),
   },
 
-  shouldComponentUpdate(nextProps, nextState) {
-    return this.props.event.id !== nextProps.event.id;
-  },
-
   render(){
     var group = this.props.group;
     var evt = this.props.event;
diff --git a/src/sentry/static/sentry/app/components/fileSize.jsx b/src/sentry/static/sentry/app/components/fileSize.jsx
index eaeb6dda02..5090693d15 100644
--- a/src/sentry/static/sentry/app/components/fileSize.jsx
+++ b/src/sentry/static/sentry/app/components/fileSize.jsx
@@ -1,12 +1,12 @@
 import React from "react";
 
 var FileSize = React.createClass({
-  units: ['KB','MB','GB','TB','PB','EB','ZB','YB'],
-
   propTypes: {
     bytes: React.PropTypes.number.isRequired
   },
 
+  units: ['KB','MB','GB','TB','PB','EB','ZB','YB'],
+
   formatBytes: function(bytes) {
       var thresh = 1024;
       if (bytes < thresh) {
diff --git a/src/sentry/static/sentry/app/components/flotChart.jsx b/src/sentry/static/sentry/app/components/flotChart.jsx
index 3518d48a5e..07bd7329b2 100644
--- a/src/sentry/static/sentry/app/components/flotChart.jsx
+++ b/src/sentry/static/sentry/app/components/flotChart.jsx
@@ -72,6 +72,24 @@ var FlotChart = React.createClass({
     plotData: React.PropTypes.array
   },
 
+  componentDidMount() {
+    this.renderChart();
+    jQuery(window).resize(this.renderChart);
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    // TODO(dcramer): improve logic here
+    return nextProps.plotData.length > 0;
+  },
+
+  componentDidUpdate() {
+    this.renderChart();
+  },
+
+  componentWillUnmount() {
+    jQuery(window).unbind('resize', this.renderChart);
+  },
+
   renderChart(options) {
     var series = this.props.plotData;
     var plotOptions = {
@@ -118,24 +136,6 @@ var FlotChart = React.createClass({
     jQuery.plot(chart, series, plotOptions);
   },
 
-  shouldComponentUpdate(nextProps, nextState) {
-    // TODO(dcramer): improve logic here
-    return nextProps.plotData.length > 0;
-  },
-
-  componentDidUpdate() {
-    this.renderChart();
-  },
-
-  componentDidMount() {
-    this.renderChart();
-    jQuery(window).resize(this.renderChart);
-  },
-
-  componentWillUnmount() {
-    jQuery(window).unbind('resize', this.renderChart);
-  },
-
   render() {
     return (
       <figure
diff --git a/src/sentry/static/sentry/app/components/group/chart.jsx b/src/sentry/static/sentry/app/components/group/chart.jsx
index 9df426bf87..dea9459537 100644
--- a/src/sentry/static/sentry/app/components/group/chart.jsx
+++ b/src/sentry/static/sentry/app/components/group/chart.jsx
@@ -4,13 +4,13 @@ import PropTypes from "../../proptypes";
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 var GroupChart = React.createClass({
-  mixins: [PureRenderMixin],
-
   propTypes: {
     group: PropTypes.Group.isRequired,
     statsPeriod: React.PropTypes.string.isRequired
   },
 
+  mixins: [PureRenderMixin],
+
   render: function() {
     var group = this.props.group;
     var stats = group.stats[this.props.statsPeriod];
diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
index 83e0cd43b8..522b7f633a 100644
--- a/src/sentry/static/sentry/app/components/groupList.jsx
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -41,16 +41,16 @@ var GroupList = React.createClass({
     };
   },
 
-  shouldComponentUpdate(nextProps, nextState) {
-    return !utils.valueIsEqual(this.state, nextState, true);
-  },
-
   componentWillMount() {
     this._streamManager = new utils.StreamManager(GroupStore);
 
     this.fetchData();
   },
 
+  shouldComponentUpdate(nextProps, nextState) {
+    return !utils.valueIsEqual(this.state, nextState, true);
+  },
+
   componentDidUpdate(prevProps) {
     if (prevProps.orgId !== this.props.orgId ||
       prevProps.projectId !== this.props.projectId) {
diff --git a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
index 8c01f5579d..c3fa8ec297 100644
--- a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
+++ b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
@@ -3,14 +3,14 @@ import Modal from "react-bootstrap/lib/Modal";
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 var LinkWithConfirmation = React.createClass({
-  mixins: [PureRenderMixin],
-
   propTypes: {
     disabled: React.PropTypes.bool,
     message: React.PropTypes.string.isRequired,
     onConfirm: React.PropTypes.func.isRequired
   },
 
+  mixins: [PureRenderMixin],
+
   getInitialState() {
     return {
       isModalOpen: false
diff --git a/src/sentry/static/sentry/app/components/listLink.jsx b/src/sentry/static/sentry/app/components/listLink.jsx
index 5379f9f04c..94d581b026 100644
--- a/src/sentry/static/sentry/app/components/listLink.jsx
+++ b/src/sentry/static/sentry/app/components/listLink.jsx
@@ -3,8 +3,6 @@ import {Link, History} from "react-router";
 import classNames from 'classnames';
 
 var ListLink = React.createClass({
-  mixins: [History],
-
   displayName: 'ListLink',
 
   propTypes: {
@@ -19,6 +17,8 @@ var ListLink = React.createClass({
     isActive: React.PropTypes.func
   },
 
+  mixins: [History],
+
   getDefaultProps() {
     return {
       activeClassName: 'active'
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index 05332be7f8..10067c9d9b 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -7,14 +7,20 @@ import DropdownLink from "../dropdownLink";
 import MenuItem from "../menuItem";
 
 var ProjectSelector = React.createClass({
+  contextTypes: {
+    location: React.PropTypes.object
+  },
+
   getInitialState() {
     return {
       filter: ''
     };
   },
 
-  contextTypes: {
-    location: React.PropTypes.object
+  componentDidUpdate(prevProps, prevState) {
+    // XXX(dcramer): fix odd dedraw issue as of Chrome 45.0.2454.15 dev (64-bit)
+    var node = jQuery(ReactDOM.findDOMNode(this.refs.container));
+    node.hide().show(0);
   },
 
   onFilterChange(evt) {
@@ -124,12 +130,6 @@ var ProjectSelector = React.createClass({
     });
   },
 
-  componentDidUpdate(prevProps, prevState) {
-    // XXX(dcramer): fix odd dedraw issue as of Chrome 45.0.2454.15 dev (64-bit)
-    var node = jQuery(ReactDOM.findDOMNode(this.refs.container));
-    node.hide().show(0);
-  },
-
   render() {
     var org = this.props.organization;
     var filter = this.state.filter.toLowerCase();
diff --git a/src/sentry/static/sentry/app/components/selectInput.jsx b/src/sentry/static/sentry/app/components/selectInput.jsx
index 9b67584ea9..9d593e8a91 100644
--- a/src/sentry/static/sentry/app/components/selectInput.jsx
+++ b/src/sentry/static/sentry/app/components/selectInput.jsx
@@ -18,6 +18,22 @@ var SelectInput = React.createClass({
     };
   },
 
+  componentDidMount() {
+    this.create();
+  },
+
+  componentWillUpdate() {
+    this.destroy();
+  },
+
+  componentDidUpdate() {
+    this.create();
+  },
+
+  componentWillUnmount() {
+    this.destroy();
+  },
+
   getValue() {
     return this.select2.getValue();
   },
@@ -35,22 +51,6 @@ var SelectInput = React.createClass({
     this.props.onChange.call(this, this.select2, ...args);
   },
 
-  componentDidMount() {
-    this.create();
-  },
-
-  componentWillUnmount() {
-    this.destroy();
-  },
-
-  componentWillUpdate() {
-    this.destroy();
-  },
-
-  componentDidUpdate() {
-    this.create();
-  },
-
   render() {
     var opts = {
         ref: 'select',
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 09865c1f19..ff38b4658b 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -15,10 +15,6 @@ import SelectedGroupStore from "../../stores/selectedGroupStore";
 import {valueIsEqual} from "../../utils";
 
 var StreamGroup = React.createClass({
-  mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange")
-  ],
-
   propTypes: {
     id: React.PropTypes.string.isRequired,
     orgId: React.PropTypes.string.isRequired,
@@ -27,6 +23,10 @@ var StreamGroup = React.createClass({
     canSelect: React.PropTypes.bool
   },
 
+  mixins: [
+    Reflux.listenTo(GroupStore, "onGroupChange")
+  ],
+
   getDefaultProps() {
     return {
       canSelect: true,
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index 4525847ce3..1359bed861 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -5,15 +5,15 @@ import GroupStore from "../../stores/groupStore";
 import {valueIsEqual} from "../../utils";
 
 var GroupChart = React.createClass({
-  mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange")
-  ],
-
   propTypes: {
     id: React.PropTypes.string.isRequired,
     statsPeriod: React.PropTypes.string.isRequired,
   },
 
+  mixins: [
+    Reflux.listenTo(GroupStore, "onGroupChange")
+  ],
+
   getInitialState() {
     var data = GroupStore.get(this.props.id);
     return {
diff --git a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
index 1313d90bdf..67a6f145f5 100644
--- a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
@@ -4,14 +4,14 @@ import Reflux from "reflux";
 import SelectedGroupStore from "../../stores/selectedGroupStore";
 
 var GroupCheckBox = React.createClass({
-  mixins: [
-    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange")
-  ],
-
   propTypes: {
     id: React.PropTypes.string.isRequired
   },
 
+  mixins: [
+    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange")
+  ],
+
   getInitialState() {
     return {
       isSelected: SelectedGroupStore.isSelected(this.props.id)
diff --git a/src/sentry/static/sentry/app/components/timeSince.jsx b/src/sentry/static/sentry/app/components/timeSince.jsx
index e5cc5e5e26..90971b85af 100644
--- a/src/sentry/static/sentry/app/components/timeSince.jsx
+++ b/src/sentry/static/sentry/app/components/timeSince.jsx
@@ -3,6 +3,11 @@ import moment from "moment";
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 var TimeSince = React.createClass({
+  propTypes: {
+    date: React.PropTypes.any.isRequired,
+    suffix: React.PropTypes.string
+  },
+
   mixins: [
     PureRenderMixin
   ],
@@ -16,11 +21,6 @@ var TimeSince = React.createClass({
     }
   },
 
-  propTypes: {
-    date: React.PropTypes.any.isRequired,
-    suffix: React.PropTypes.string
-  },
-
   getDefaultProps() {
     return {
       suffix: 'ago'
@@ -37,6 +37,13 @@ var TimeSince = React.createClass({
     this.setRelativeDateTicker();
   },
 
+  componentWillUnmount() {
+    if (this.ticker) {
+      clearTimeout(this.ticker);
+      this.ticker = null;
+    }
+  },
+
   setRelativeDateTicker() {
     const ONE_MINUTE_IN_MS = 3600;
 
@@ -53,13 +60,6 @@ var TimeSince = React.createClass({
     return moment(date).fromNow(true);
   },
 
-  componentWillUnmount() {
-    if (this.ticker) {
-      clearTimeout(this.ticker);
-      this.ticker = null;
-    }
-  },
-
   render() {
     let date = TimeSince.getDateObj(this.props.date);
 
diff --git a/src/sentry/static/sentry/app/views/adminOrganizations.jsx b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
index fad75f87d7..14e17f66dd 100644
--- a/src/sentry/static/sentry/app/views/adminOrganizations.jsx
+++ b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
@@ -27,6 +27,16 @@ const AdminOrganizations = React.createClass({
     this.fetchData();
   },
 
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.location.search !== this.props.location.search) {
+      this.setState({
+        query: this.props.location.query,
+        loading: true,
+        error: false
+      }, this.fetchData);
+    }
+  },
+
   remountComponent() {
     this.setState(this.getInitialState(), this.fetchData);
   },
@@ -54,16 +64,6 @@ const AdminOrganizations = React.createClass({
     });
   },
 
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.location.search !== this.props.location.search) {
-      this.setState({
-        query: this.props.location.query,
-        loading: true,
-        error: false
-      }, this.fetchData);
-    }
-  },
-
   onPage(cursor) {
     let queryParams = jQuery.extend({}, this.props.location.query, {
       cursor: cursor
diff --git a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
index d0297b8e52..b027794fe3 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
@@ -6,10 +6,6 @@ import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
 
 const ApiChart = React.createClass({
-  componentWillMount() {
-    this.fetchData();
-  },
-
   getInitialState() {
     return {
       error: false,
@@ -22,6 +18,10 @@ const ApiChart = React.createClass({
     };
   },
 
+  componentWillMount() {
+    this.fetchData();
+  },
+
   fetchData() {
     let statNameList = [
       "client-api.all-versions.responses.2xx",
diff --git a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
index d72701525f..df58f34638 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
@@ -7,10 +7,6 @@ import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
 
 const EventChart = React.createClass({
-  componentWillMount() {
-    this.fetchData();
-  },
-
   getInitialState() {
     return {
       error: false,
@@ -24,6 +20,10 @@ const EventChart = React.createClass({
     };
   },
 
+  componentWillMount() {
+    this.fetchData();
+  },
+
   fetchData() {
     let statNameList = [
       "events.total",
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index cd2c465836..e6db6d5830 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -13,19 +13,13 @@ const ERROR_TYPES = {
 };
 
 var GroupDetails = React.createClass({
-  mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange")
-  ],
-
   childContextTypes: {
     group: PropTypes.Group,
   },
 
-  getChildContext() {
-    return {
-      group: this.state.group,
-    };
-  },
+  mixins: [
+    Reflux.listenTo(GroupStore, "onGroupChange")
+  ],
 
   getInitialState() {
     return {
@@ -36,6 +30,12 @@ var GroupDetails = React.createClass({
     };
   },
 
+  getChildContext() {
+    return {
+      group: this.state.group,
+    };
+  },
+
   componentWillMount() {
     this.props.setProjectNavSection('stream');
     this.fetchData();
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index c0bfaf4ff0..5077972c89 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -11,18 +11,18 @@ import ListLink from "../../components/listLink";
 import ProjectState from "../../mixins/projectState";
 
 var GroupHeader = React.createClass({
-  mixins: [
-    ProjectState,
-    History
-  ],
+  propTypes: {
+    memberList: React.PropTypes.instanceOf(Array).isRequired
+  },
 
   contextTypes: {
     location: React.PropTypes.object
   },
 
-  propTypes: {
-    memberList: React.PropTypes.instanceOf(Array).isRequired
-  },
+  mixins: [
+    ProjectState,
+    History
+  ],
 
   onToggleMute() {
     var group = this.props.group;
diff --git a/src/sentry/static/sentry/app/views/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
index 0f7cb0a747..e6c28329e9 100644
--- a/src/sentry/static/sentry/app/views/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -29,6 +29,12 @@ var GroupEvents = React.createClass({
     this.fetchData();
   },
 
+  componentDidUpdate(prevProps) {
+    if (prevProps.params.groupId !== this.props.params.groupId) {
+      this.fetchData();
+    }
+  },
+
   fetchData() {
     var queryParams = this.props.location.query;
 
@@ -57,12 +63,6 @@ var GroupEvents = React.createClass({
     });
   },
 
-  componentDidUpdate(prevProps) {
-    if (prevProps.params.groupId !== this.props.params.groupId) {
-      this.fetchData();
-    }
-  },
-
   onPage(cursor) {
     var queryParams = {...this.props.location.query, cursor: cursor};
 
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index bb617c1c8a..535c1cb409 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -18,12 +18,6 @@ var OrganizationDetails = React.createClass({
     organization: PropTypes.Organization
   },
 
-  getChildContext() {
-    return {
-      organization: this.state.organization
-    };
-  },
-
   getInitialState() {
     return {
       loading: true,
@@ -33,10 +27,22 @@ var OrganizationDetails = React.createClass({
     };
   },
 
+  getChildContext() {
+    return {
+      organization: this.state.organization
+    };
+  },
+
   componentWillMount() {
     this.fetchData();
   },
 
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.params.orgId !== this.props.params.orgId) {
+      this.remountComponent();
+    }
+  },
+
   componentWillUnmount() {
     TeamStore.reset();
   },
@@ -45,12 +51,6 @@ var OrganizationDetails = React.createClass({
     this.setState(this.getInitialState(), this.fetchData);
   },
 
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.params.orgId !== this.props.params.orgId) {
-      this.remountComponent();
-    }
-  },
-
   fetchData() {
     api.request(this.getOrganizationDetailsEndpoint(), {
       success: (data) => {
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
index 949d3c5503..c327bf0e6f 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
@@ -8,10 +8,6 @@ import OrganizationState from "../../mixins/organizationState";
 import {defined} from "../../utils";
 
 var OrganizationStatOverview = React.createClass({
-  mixins: [
-    OrganizationState
-  ],
-
   propTypes: {
     orgId: React.PropTypes.string
   },
@@ -20,6 +16,10 @@ var OrganizationStatOverview = React.createClass({
     location: React.PropTypes.object
   },
 
+  mixins: [
+    OrganizationState
+  ],
+
   getInitialState() {
     return {
       totalRejected: null,
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
index 74bb3f561b..139896ff6d 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -20,6 +20,17 @@ var ProjectChart = React.createClass({
     };
   },
 
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps() {
+    this.setState({
+      loading: true,
+      error: false
+    }, this.fetchData);
+  },
+
   getStatsEndpoint() {
     var org = this.getOrganization();
     var project = this.getProject();
@@ -32,17 +43,6 @@ var ProjectChart = React.createClass({
     return '/projects/' + org.slug + '/' + project.slug + '/releases/';
   },
 
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps() {
-    this.setState({
-      loading: true,
-      error: false
-    }, this.fetchData);
-  },
-
   fetchData() {
     api.request(this.getStatsEndpoint(), {
       query: {
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
index 91e5b8eb56..7a067aaa32 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
@@ -6,12 +6,12 @@ import TimeSince from "../../components/timeSince";
 import ProjectState from "../../mixins/projectState";
 
 var EventNode = React.createClass({
-  mixins: [ProjectState],
-
   propTypes: {
     group: PropTypes.Group.isRequired
   },
 
+  mixins: [ProjectState],
+
   makeGroupLink(title) {
     var group = this.props.group;
     var org = this.getOrganization();
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index e628d28d9a..9f9cf74854 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -17,23 +17,16 @@ const ERROR_TYPES = {
 };
 
 var ProjectDetails = React.createClass({
-  mixins: [
-    Reflux.connect(MemberListStore, "memberList"),
-    Reflux.listenTo(TeamStore, "onTeamChange"),
-    OrganizationState
-  ],
-
   childContextTypes: {
     project: PropTypes.Project,
     team: PropTypes.Team
   },
 
-  getChildContext() {
-    return {
-      project: this.state.project,
-      team: this.state.team
-    };
-  },
+  mixins: [
+    Reflux.connect(MemberListStore, "memberList"),
+    Reflux.listenTo(TeamStore, "onTeamChange"),
+    OrganizationState
+  ],
 
   getInitialState() {
     return {
@@ -47,12 +40,15 @@ var ProjectDetails = React.createClass({
     };
   },
 
-  componentWillMount() {
-    this.fetchData();
+  getChildContext() {
+    return {
+      project: this.state.project,
+      team: this.state.team
+    };
   },
 
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
+  componentWillMount() {
+    this.fetchData();
   },
 
   componentWillReceiveProps(nextProps) {
@@ -62,6 +58,10 @@ var ProjectDetails = React.createClass({
     }
   },
 
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
   onTeamChange() {
     this.fetchData();
   },
diff --git a/src/sentry/static/sentry/app/views/projectEvents.jsx b/src/sentry/static/sentry/app/views/projectEvents.jsx
index e8d883ae96..cc62f18d50 100644
--- a/src/sentry/static/sentry/app/views/projectEvents.jsx
+++ b/src/sentry/static/sentry/app/views/projectEvents.jsx
@@ -13,15 +13,15 @@ import Pagination from "../components/pagination";
 import utils from "../utils";
 
 var ProjectEvents = React.createClass({
+  propTypes: {
+    setProjectNavSection: React.PropTypes.func
+  },
+
   mixins: [
     Reflux.listenTo(EventStore, "onEventChange"),
     History
   ],
 
-  propTypes: {
-    setProjectNavSection: React.PropTypes.func
-  },
-
   getInitialState() {
     return {
       eventIds: [],
@@ -32,10 +32,6 @@ var ProjectEvents = React.createClass({
     };
   },
 
-  shouldComponentUpdate(nextProps, nextState) {
-    return !utils.valueIsEqual(this.state, nextState, true);
-  },
-
   componentWillMount() {
     this.props.setProjectNavSection('events');
 
@@ -59,9 +55,8 @@ var ProjectEvents = React.createClass({
     this.fetchData();
   },
 
-  componentWillUnmount() {
-    this._poller.disable();
-    EventStore.reset();
+  shouldComponentUpdate(nextProps, nextState) {
+    return !utils.valueIsEqual(this.state, nextState, true);
   },
 
   componentDidUpdate(prevProps, prevState) {
@@ -80,6 +75,11 @@ var ProjectEvents = React.createClass({
     }
   },
 
+  componentWillUnmount() {
+    this._poller.disable();
+    EventStore.reset();
+  },
+
   fetchData() {
     EventStore.loadInitialData([]);
 
diff --git a/src/sentry/static/sentry/app/views/projectEvents/actions.jsx b/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
index fa5d7cbe29..0918f7b1f7 100644
--- a/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
+++ b/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
@@ -3,15 +3,15 @@ import React from "react";
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 var EventActions = React.createClass({
-  mixins: [
-    PureRenderMixin
-  ],
-
   propTypes: {
     onRealtimeChange: React.PropTypes.func.isRequired,
     realtimeActive: React.PropTypes.bool.isRequired
   },
 
+  mixins: [
+    PureRenderMixin
+  ],
+
   getInitialState() {
     return {
       datePickerActive: false
diff --git a/src/sentry/static/sentry/app/views/projectInstall/index.jsx b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
index be1a722a2a..01010aa60a 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
@@ -9,6 +9,13 @@ const ProjectInstall = React.createClass({
     setProjectNavSection: React.PropTypes.func
   },
 
+  getInitialState() {
+    return {
+      loading: true,
+      platformList: null
+    };
+  },
+
   componentWillMount() {
     this.props.setProjectNavSection('settings');
   },
@@ -17,13 +24,6 @@ const ProjectInstall = React.createClass({
     this.fetchData();
   },
 
-  getInitialState() {
-    return {
-      loading: true,
-      platformList: null
-    };
-  },
-
   fetchData() {
     let {orgId, projectId} = this.props.params;
     api.request(`/projects/${orgId}/${projectId}/docs/`, {
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index 6085eb1810..195cc5ae0f 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -10,6 +10,10 @@ import SearchBar from "../../components/searchBar.jsx";
 import ReleaseList from "./releaseList";
 
 var ProjectReleases = React.createClass({
+  propTypes: {
+    setProjectNavSection: React.PropTypes.func
+  },
+
   mixins: [ History ],
 
   getDefaultProps() {
@@ -18,10 +22,6 @@ var ProjectReleases = React.createClass({
     };
   },
 
-  propTypes: {
-    setProjectNavSection: React.PropTypes.func
-  },
-
   getInitialState() {
     var queryParams = this.props.location.query;
 
@@ -34,15 +34,6 @@ var ProjectReleases = React.createClass({
     };
   },
 
-  onSearch(query) {
-    var targetQueryParams = {};
-    if (query !== '')
-      targetQueryParams.query = query;
-
-    let {orgId, projectId} = this.props.params;
-    this.history.pushState(null, `/${orgId}/${projectId}/releases/`, targetQueryParams);
-  },
-
   componentWillMount() {
     this.props.setProjectNavSection('releases');
     this.fetchData();
@@ -57,6 +48,15 @@ var ProjectReleases = React.createClass({
     }
   },
 
+  onSearch(query) {
+    var targetQueryParams = {};
+    if (query !== '')
+      targetQueryParams.query = query;
+
+    let {orgId, projectId} = this.props.params;
+    this.history.pushState(null, `/${orgId}/${projectId}/releases/`, targetQueryParams);
+  },
+
   fetchData() {
     this.setState({
       loading: true,
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index a836436108..7d5c22f0c2 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -7,13 +7,20 @@ import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
 
 const ProjectSettings = React.createClass({
+  propTypes: {
+    setProjectNavSection: React.PropTypes.func
+  },
 
   contextTypes: {
     location: React.PropTypes.object
   },
 
-  propTypes: {
-    setProjectNavSection: React.PropTypes.func
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      project: null
+    };
   },
 
   componentWillMount() {
@@ -32,14 +39,6 @@ const ProjectSettings = React.createClass({
     }
   },
 
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      project: null
-    };
-  },
-
   fetchData() {
     var params = this.props.params;
 
diff --git a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
index 73d64a3fdb..d329fcadc1 100644
--- a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
@@ -9,12 +9,12 @@ import LoadingIndicator from "../components/loadingIndicator";
 import Pagination from "../components/pagination";
 
 var ReleaseArtifacts = React.createClass({
-  mixins: [ History ],
-
   contextTypes: {
     release: React.PropTypes.object
   },
 
+  mixins: [ History ],
+
   getInitialState() {
     return {
       loading: true,
diff --git a/src/sentry/static/sentry/app/views/releaseDetails.jsx b/src/sentry/static/sentry/app/views/releaseDetails.jsx
index 8f3027d866..f05813a82f 100644
--- a/src/sentry/static/sentry/app/views/releaseDetails.jsx
+++ b/src/sentry/static/sentry/app/views/releaseDetails.jsx
@@ -10,10 +10,6 @@ import TimeSince from "../components/timeSince";
 import Version from "../components/version";
 
 var ReleaseDetails = React.createClass({
-  mixins: [
-    ProjectState
-  ],
-
   propTypes: {
     setProjectNavSection: React.PropTypes.func
   },
@@ -26,11 +22,9 @@ var ReleaseDetails = React.createClass({
     release: React.PropTypes.object
   },
 
-  getChildContext() {
-    return {
-      release: this.state.release
-    };
-  },
+  mixins: [
+    ProjectState
+  ],
 
   getInitialState() {
     return {
@@ -40,6 +34,12 @@ var ReleaseDetails = React.createClass({
     };
   },
 
+  getChildContext() {
+    return {
+      release: this.state.release
+    };
+  },
+
   componentWillMount() {
     this.props.setProjectNavSection('releases');
     this.fetchData();
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
index 193382c3c8..5cb54d0f59 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
@@ -20,6 +20,12 @@ var RuleEditor = React.createClass({
     };
   },
 
+  componentDidUpdate() {
+    if (this.state.error) {
+      $(document.body).scrollTop($(ReactDOM.findDOMNode(this.refs.form)).offset().top);
+    }
+  },
+
   serializeNode(node) {
     var result = {};
     $(node).find('input, select').each((_, el) => {
@@ -30,12 +36,6 @@ var RuleEditor = React.createClass({
     return result;
   },
 
-  componentDidUpdate() {
-    if (this.state.error) {
-      $(document.body).scrollTop($(ReactDOM.findDOMNode(this.refs.form)).offset().top);
-    }
-  },
-
   onSubmit(e) {
     e.preventDefault();
     var form = $(ReactDOM.findDOMNode(this.refs.form));
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
index 50efe2963a..09845a3e16 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
@@ -18,12 +18,6 @@ var SharedGroupDetails = React.createClass({
     group: PropTypes.Group,
   },
 
-  getChildContext() {
-    return {
-      group: this.state.group,
-    };
-  },
-
   getInitialState() {
     return {
       group: null,
@@ -32,10 +26,10 @@ var SharedGroupDetails = React.createClass({
     };
   },
 
-  getTitle() {
-    if (this.state.group)
-      return this.state.group.title;
-    return 'Sentry';
+  getChildContext() {
+    return {
+      group: this.state.group,
+    };
   },
 
   componentWillMount() {
@@ -47,6 +41,12 @@ var SharedGroupDetails = React.createClass({
     jQuery(document.body).removeClass("shared-group");
   },
 
+  getTitle() {
+    if (this.state.group)
+      return this.state.group.title;
+    return 'Sentry';
+  },
+
   fetchData() {
     this.setState({
       loading: true,
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 2cee38a3b7..2d51e5e54c 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -23,16 +23,16 @@ import utils from "../utils";
 import parseLinkHeader from '../utils/parseLinkHeader';
 
 var Stream = React.createClass({
+  propTypes: {
+    setProjectNavSection: React.PropTypes.func
+  },
+
   mixins: [
     Reflux.listenTo(GroupStore, "onGroupChange"),
     Reflux.listenTo(StreamTagStore, "onStreamTagChange"),
     History
   ],
 
-  propTypes: {
-    setProjectNavSection: React.PropTypes.func
-  },
-
   getDefaultProps() {
     return {
       // intentional trailing whitespace / better UX for when uesrs focus on search input
@@ -65,27 +65,6 @@ var Stream = React.createClass({
     }, this.getQueryStringState());
   },
 
-  shouldComponentUpdate(nextProps, nextState) {
-    return !_.isEqual(this.state, nextState, true);
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.location.search !== this.props.location.search) {
-      this.setState(this.getQueryStringState(nextProps), this.fetchData);
-      this._poller.disable();
-    }
-  },
-
-  componentDidUpdate(prevProps, prevState) {
-    if (prevState.realtimeActive !== this.state.realtimeActive) {
-      if (this.state.realtimeActive) {
-        this._poller.enable();
-      } else {
-        this._poller.disable();
-      }
-    }
-  },
-
   componentWillMount() {
     this.props.setProjectNavSection('stream');
 
@@ -110,6 +89,27 @@ var Stream = React.createClass({
     this.fetchData();
   },
 
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.location.search !== this.props.location.search) {
+      this.setState(this.getQueryStringState(nextProps), this.fetchData);
+      this._poller.disable();
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return !_.isEqual(this.state, nextState, true);
+  },
+
+  componentDidUpdate(prevProps, prevState) {
+    if (prevState.realtimeActive !== this.state.realtimeActive) {
+      if (this.state.realtimeActive) {
+        this._poller.enable();
+      } else {
+        this._poller.disable();
+      }
+    }
+  },
+
   componentWillUnmount() {
     this._poller.disable();
     GroupStore.reset();
diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index 10b6a14a21..4100f84317 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -5,14 +5,6 @@ import SelectedGroupStore from "../../stores/selectedGroupStore";
 import TooltipMixin from "../../mixins/tooltip";
 
 var ActionLink = React.createClass({
-  mixins: [
-    PureRenderMixin,
-    TooltipMixin({
-      html: false,
-      container: 'body'
-    })
-  ],
-
   propTypes: {
     actionLabel: React.PropTypes.string,
     canActionAll: React.PropTypes.bool.isRequired,
@@ -24,6 +16,14 @@ var ActionLink = React.createClass({
     selectAllActive: React.PropTypes.bool.isRequired
   },
 
+  mixins: [
+    PureRenderMixin,
+    TooltipMixin({
+      html: false,
+      container: 'body'
+    })
+  ],
+
   getDefaultProps() {
     return {
       actionTypes: {},
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 085c29517d..4a52bff0ed 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -9,11 +9,6 @@ import PureRenderMixin from 'react-addons-pure-render-mixin';
 import SelectedGroupStore from "../../stores/selectedGroupStore";
 
 var StreamActions = React.createClass({
-  mixins: [
-    Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange'),
-    PureRenderMixin
-  ],
-
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
@@ -24,14 +19,10 @@ var StreamActions = React.createClass({
     statsPeriod: React.PropTypes.string.isRequired
   },
 
-  getInitialState() {
-    return {
-      datePickerActive: false,
-      selectAllActive: false,
-      anySelected: false,
-      multiSelected: false,
-    };
-  },
+  mixins: [
+    Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange'),
+    PureRenderMixin
+  ],
 
   getDefaultProps() {
     return {
@@ -42,6 +33,15 @@ var StreamActions = React.createClass({
     };
   },
 
+  getInitialState() {
+    return {
+      datePickerActive: false,
+      selectAllActive: false,
+      anySelected: false,
+      multiSelected: false,
+    };
+  },
+
   selectStatsPeriod(period) {
     return this.props.onSelectStatsPeriod(period);
   },
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 14dfc33691..3daa420f72 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -10,6 +10,10 @@ var StreamFilters = React.createClass({
     projectId: React.PropTypes.string.isRequired
   },
 
+  contextTypes: {
+    location: React.PropTypes.object
+  },
+
   getDefaultProps() {
     return {
       defaultQuery: "",
@@ -23,10 +27,6 @@ var StreamFilters = React.createClass({
     };
   },
 
-  contextTypes: {
-    location: React.PropTypes.object
-  },
-
   getActiveButton() {
     var queryParams = this.context.location.query;
     var activeButton;
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index ad70eed09c..1b08e0a2ed 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -24,7 +24,26 @@ var SearchBar = React.createClass({
     Reflux.listenTo(MemberListStore, 'onMemberListStoreChange')
   ],
 
-  DROPDOWN_BLUR_DURATION: 200,
+  statics: {
+    /**
+     * Given a query, and the current cursor position, return the string-delimiting
+     * index of the search term designated by the cursor.
+     */
+    getLastTermIndex(query, cursor) {
+      // TODO: work with quoted-terms
+      let cursorOffset = query.slice(cursor).search(/\s|$/);
+      return cursor + (cursorOffset === -1 ? 0 : cursorOffset);
+    },
+
+    /**
+     * Returns an array of query terms, including incomplete terms
+     *
+     * e.g. ["is:unassigned", "browser:\"Chrome 33.0\"", "assigned"]
+     */
+    getQueryTerms(query, cursor) {
+      return query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
+    }
+  },
 
   getDefaultProps() {
     return {
@@ -89,26 +108,7 @@ var SearchBar = React.createClass({
     }
   },
 
-  statics: {
-    /**
-     * Given a query, and the current cursor position, return the string-delimiting
-     * index of the search term designated by the cursor.
-     */
-    getLastTermIndex(query, cursor) {
-      // TODO: work with quoted-terms
-      let cursorOffset = query.slice(cursor).search(/\s|$/);
-      return cursor + (cursorOffset === -1 ? 0 : cursorOffset);
-    },
-
-    /**
-     * Returns an array of query terms, including incomplete terms
-     *
-     * e.g. ["is:unassigned", "browser:\"Chrome 33.0\"", "assigned"]
-     */
-    getQueryTerms(query, cursor) {
-      return query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
-    }
-  },
+  DROPDOWN_BLUR_DURATION: 200,
 
   blur() {
     ReactDOM.findDOMNode(this.refs.searchInput).blur();
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 0d72667a92..82974e4d1e 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -9,6 +9,15 @@ var StreamTagFilter = React.createClass({
     projectId: React.PropTypes.string.isRequired
   },
 
+  statics: {
+    tagValueToSelect2Format: (key) => {
+      return {
+        id: key,
+        text: key
+      };
+    }
+  },
+
   getDefaultProps() {
     return {
       tag: {},
@@ -24,26 +33,6 @@ var StreamTagFilter = React.createClass({
     };
   },
 
-  statics: {
-    tagValueToSelect2Format: (key) => {
-      return {
-        id: key,
-        text: key
-      };
-    }
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.value !== this.state.value) {
-      this.setState({
-        value: nextProps.value
-      }, () => {
-        let select = this.refs.select;
-        $(select).select2('val', this.state.value);
-      });
-    }
-  },
-
   componentDidMount() {
     let select = ReactDOM.findDOMNode(this.refs.select);
 
@@ -82,6 +71,17 @@ var StreamTagFilter = React.createClass({
       .on('change', this.onSelectValue);
   },
 
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.value !== this.state.value) {
+      this.setState({
+        value: nextProps.value
+      }, () => {
+        let select = this.refs.select;
+        $(select).select2('val', this.state.value);
+      });
+    }
+  },
+
   componentWillUnmount() {
     let select = ReactDOM.findDOMNode(this.refs.select);
     $(select).select2('destroy');
diff --git a/tests/js/helpers/stubContext.jsx b/tests/js/helpers/stubContext.jsx
index e3a2e27a30..56fbe080fa 100644
--- a/tests/js/helpers/stubContext.jsx
+++ b/tests/js/helpers/stubContext.jsx
@@ -18,9 +18,9 @@ function stubContext(BaseComponent, context) {
 
   var StubbedContextParent = React.createClass({
     displayName: 'StubbedContextParent',
+    contextTypes: _contextTypes,
     childContextTypes: _contextTypes,
     getChildContext() { return _context; },
-    contextTypes: _contextTypes,
 
     render() {
       return React.Children.only(this.props.children);
