commit 65b870cf9eba9bc14c4b9f67c59faf39a186572f
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Jul 30 16:09:03 2018 -0700

    feat(integrations): Add analytics tracking for integration events

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 560d44d9a8..f2e5991d0c 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -4,6 +4,7 @@ from django.db import IntegrityError, transaction
 
 from rest_framework.response import Response
 
+from sentry import analytics
 from sentry.api.bases import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.integration import IntegrationIssueConfigSerializer
@@ -86,7 +87,14 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
             defaults=defaults,
         )
 
-        if not created:
+        if created:
+            analytics.record(
+                'integration.issue.linked',
+                provider=integration.provider,
+                id=integration.id,
+                organization_id=organization_id,
+            )
+        else:
             external_issue.update(**defaults)
 
         installation.after_link_issue(external_issue, data=request.DATA)
@@ -137,7 +145,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
             return Response({'non_field_errors': exc.message}, status=400)
 
         external_issue_key = installation.make_external_key(data)
-        external_issue = ExternalIssue.objects.get_or_create(
+        external_issue, created = ExternalIssue.objects.get_or_create(
             organization_id=organization_id,
             integration_id=integration.id,
             key=external_issue_key,
@@ -145,7 +153,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
                 'title': data.get('title'),
                 'description': data.get('description'),
             }
-        )[0]
+        )
 
         try:
             with transaction.atomic():
@@ -159,6 +167,14 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         except IntegrityError:
             return Response({'detail': 'That issue is already linked'}, status=400)
 
+        if created:
+            analytics.record(
+                'integration.issue.created',
+                provider=integration.provider,
+                id=integration.id,
+                organization_id=organization_id,
+            )
+
         # TODO(jess): return serialized issue
         url = data.get('url') or installation.get_issue_url(external_issue.key)
         context = {
diff --git a/src/sentry/integrations/__init__.py b/src/sentry/integrations/__init__.py
index b4a4a4df13..281685802c 100644
--- a/src/sentry/integrations/__init__.py
+++ b/src/sentry/integrations/__init__.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from .analytics import *  # NOQA
 from .base import *  # NOQA
 from .manager import IntegrationManager  # NOQA
 
diff --git a/src/sentry/integrations/analytics.py b/src/sentry/integrations/analytics.py
new file mode 100644
index 0000000000..44188712f8
--- /dev/null
+++ b/src/sentry/integrations/analytics.py
@@ -0,0 +1,104 @@
+from __future__ import absolute_import, print_function
+
+from sentry import analytics
+
+
+class IntegrationAddedEvent(analytics.Event):
+    type = 'integration.added'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+class IntegrationIssueCreatedEvent(analytics.Event):
+    type = 'integration.issue.created'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+class IntegrationIssueLinkedEvent(analytics.Event):
+    type = 'integration.issue.linked'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+class IntegrationIssueStatusSyncedEvent(analytics.Event):
+    type = 'integration.issue.status.synced'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+class IntegrationIssueAssigneeSyncedEvent(analytics.Event):
+    type = 'integration.issue.assignee.synced'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+class IntegrationIssueCommentsSyncedEvent(analytics.Event):
+    type = 'integration.issue.comments.synced'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+class IntegrationRepoAddedEvent(analytics.Event):
+    type = 'integration.repo.added'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+class IntegrationResolveCommitEvent(analytics.Event):
+    type = 'integration.resolve.commit'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+class IntegrationResolvePREvent(analytics.Event):
+    type = 'integration.resolve.pr'
+
+    attributes = (
+        analytics.Attribute('provider'),
+        analytics.Attribute('id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+analytics.register(IntegrationAddedEvent)
+analytics.register(IntegrationIssueCreatedEvent)
+analytics.register(IntegrationIssueLinkedEvent)
+analytics.register(IntegrationIssueStatusSyncedEvent)
+analytics.register(IntegrationIssueAssigneeSyncedEvent)
+analytics.register(IntegrationIssueCommentsSyncedEvent)
+analytics.register(IntegrationRepoAddedEvent)
+analytics.register(IntegrationResolveCommitEvent)
+analytics.register(IntegrationResolvePREvent)
diff --git a/src/sentry/models/integration.py b/src/sentry/models/integration.py
index fc4a414762..497b31eede 100644
--- a/src/sentry/models/integration.py
+++ b/src/sentry/models/integration.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django.db import models, IntegrityError, transaction
 from django.utils import timezone
 
+from sentry import analytics
 from sentry.constants import ObjectStatus
 from sentry.db.models import (
     BoundedPositiveIntegerField, EncryptedJsonField, FlexibleForeignKey, Model
@@ -31,6 +32,7 @@ class OrganizationIntegration(Model):
     organization = FlexibleForeignKey('sentry.Organization')
     integration = FlexibleForeignKey('sentry.Integration')
     config = EncryptedJsonField(default=lambda: {})
+
     default_auth_id = BoundedPositiveIntegerField(db_index=True, null=True)
     date_added = models.DateTimeField(default=timezone.now, null=True)
 
@@ -107,6 +109,13 @@ class Integration(Model):
                 )
         except IntegrityError:
             return False
+        else:
+            analytics.record(
+                'integration.added',
+                provider=self.provider,
+                id=self.id,
+                organization_id=organization_id,
+            )
 
     def add_project(self, project_id, config=None):
         """
diff --git a/src/sentry/plugins/providers/integration_repository.py b/src/sentry/plugins/providers/integration_repository.py
index f221fee1d0..cf3c1315c8 100644
--- a/src/sentry/plugins/providers/integration_repository.py
+++ b/src/sentry/plugins/providers/integration_repository.py
@@ -4,6 +4,7 @@ import six
 from django.db import IntegrityError, transaction
 from rest_framework.response import Response
 
+from sentry import analytics
 from sentry.api.serializers import serialize
 from sentry.integrations.exceptions import IntegrationError
 from sentry.models import Repository
@@ -68,6 +69,12 @@ class IntegrationRepositoryProvider(object):
                 status=400,
             )
 
+        analytics.record(
+            'integration.repo.added',
+            provider=self.id,
+            id=result.get('integration_id'),
+            organization_id=organization.id,
+        )
         return Response(serialize(repo, request.user), status=201)
 
     def handle_api_error(self, error):
diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 284cebe935..f234ee1f89 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -3,8 +3,9 @@ from __future__ import absolute_import, print_function
 from django.db import IntegrityError, transaction
 from django.db.models.signals import post_save
 
+from sentry import analytics
 from sentry.models import (
-    Activity, Commit, GroupAssignee, GroupLink, Release, PullRequest
+    Activity, Commit, GroupAssignee, GroupLink, Release, Repository, PullRequest
 )
 from sentry.tasks.clear_expired_resolutions import clear_expired_resolutions
 
@@ -30,6 +31,11 @@ def resolved_in_commit(instance, created, **kwargs):
         if link.group_id not in group_ids:
             link.delete()
 
+    try:
+        repo = Repository.objects.get(id=instance.repository_id)
+    except Repository.DoesNotExist:
+        repo = None
+
     for group in groups:
         try:
             with transaction.atomic():
@@ -70,6 +76,14 @@ def resolved_in_commit(instance, created, **kwargs):
                     )
         except IntegrityError:
             pass
+        else:
+            if repo is not None and repo.integration_id is not None:
+                analytics.record(
+                    'integration.resolve.commit',
+                    provider=repo.provider,
+                    id=repo.integration_id,
+                    organization_id=repo.organization_id,
+                )
 
 
 def resolved_in_pull_request(instance, created, **kwargs):
@@ -86,6 +100,11 @@ def resolved_in_pull_request(instance, created, **kwargs):
         if link.group_id not in group_ids:
             link.delete()
 
+    try:
+        repo = Repository.objects.get(id=instance.repository_id)
+    except Repository.DoesNotExist:
+        repo = None
+
     for group in groups:
         try:
             with transaction.atomic():
@@ -126,6 +145,14 @@ def resolved_in_pull_request(instance, created, **kwargs):
                     )
         except IntegrityError:
             pass
+        else:
+            if repo is not None and repo.integration_id is not None:
+                analytics.record(
+                    'integration.resolve.pr',
+                    provider=repo.provider,
+                    id=repo.integration_id,
+                    organization_id=repo.organization_id,
+                )
 
 
 post_save.connect(
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index a0f8c70637..49447afbaf 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from sentry import analytics
 from sentry.models import ExternalIssue, Group, GroupLink, GroupStatus, Integration, User
 from sentry.integrations.exceptions import IntegrationError
 from sentry.tasks.base import instrumented_task, retry
@@ -23,6 +24,12 @@ def post_comment(external_issue_id, data, **kwargs):
     if installation.should_sync('comment'):
         installation.create_comment(
             external_issue.key, data['text'])
+        analytics.record(
+            'integration.issue.comments.synced',
+            provider=integration.provider,
+            id=integration.id,
+            organization_id=external_issue.organization_id,
+        )
 
 
 @instrumented_task(
@@ -58,6 +65,12 @@ def sync_assignee_outbound(external_issue_id, user_id, assign, **kwargs):
     )
     if installation.should_sync('outbound_assignee'):
         installation.sync_assignee_outbound(external_issue, user, assign=assign)
+        analytics.record(
+            'integration.issue.assignee.synced',
+            provider=integration.provider,
+            id=integration.id,
+            organization_id=external_issue.organization_id,
+        )
 
 
 @instrumented_task(
@@ -86,6 +99,12 @@ def sync_status_outbound(group_id, external_issue_id, **kwargs):
         installation.sync_status_outbound(
             external_issue, group.status == GroupStatus.RESOLVED, group.project_id
         )
+        analytics.record(
+            'integration.issue.status.synced',
+            provider=integration.provider,
+            id=integration.id,
+            organization_id=external_issue.organization_id,
+        )
 
 
 @instrumented_task(
