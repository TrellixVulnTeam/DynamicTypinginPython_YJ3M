commit fba64cd6c67505403cdc576c6a5dd3234fa7be58
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Sep 26 10:18:01 2018 -0700

    feat(discover): Add utility functions for saved queries (#9890)
    
    These will be used for saved queries

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
index 684ffef7e8..95f678a543 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
@@ -254,3 +254,12 @@ function disableMacros(value) {
 
   return value;
 }
+
+/**
+ * Generate a saved query name based on the current timestamp
+ *
+ * @returns {String}
+ */
+export function generateQueryName() {
+  return `Result - ${moment.utc().format('MMM DD HH:mm:ss')}`;
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index 44cd7b30c6..f3a1a2ee38 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -70,6 +70,28 @@ export function getOrderByOptions(queryBuilder) {
   return [...columnOptions, ...aggregationOptions];
 }
 
+/**
+ * Takes a saved query and strips associated query metadata in order to match
+ * our internal representation of queries.
+ *
+ * @param {Object} savedQuery
+ * @returns {Object}
+ */
+export function parseSavedQuery(savedQuery) {
+  // eslint-disable-next-line no-unused-vars
+  const {id, name, dateCreated, dateUpdated, createdBy, ...query} = savedQuery;
+  return query;
+}
+
+export function fetchSavedQuery(organization, queryId) {
+  const api = new Client();
+  const endpoint = `/organizations/${organization.slug}/discover/saved/${queryId}/`;
+
+  return api.requestPromise(endpoint, {
+    method: 'GET',
+  });
+}
+
 export function fetchSavedQueries(organization) {
   const api = new Client();
   const endpoint = `/organizations/${organization.slug}/discover/saved/`;
@@ -79,7 +101,7 @@ export function fetchSavedQueries(organization) {
   });
 }
 
-export function createQuery(organization, data) {
+export function createSavedQuery(organization, data) {
   const api = new Client();
   const endpoint = `/organizations/${organization.slug}/discover/saved/`;
 
@@ -89,12 +111,21 @@ export function createQuery(organization, data) {
   });
 }
 
-export function updateQuery(organization, id, data) {
+export function updateSavedQuery(organization, id, data) {
   const api = new Client();
   const endpoint = `/organizations/${organization.slug}/discover/saved/${id}/`;
 
   return api.requestPromise(endpoint, {
-    method: 'POST',
+    method: 'PUT',
     data,
   });
 }
+
+export function deleteSavedQuery(organization, id) {
+  const api = new Client();
+  const endpoint = `/organizations/${organization.slug}/discover/saved/${id}/`;
+
+  return api.requestPromise(endpoint, {
+    method: 'DELETE',
+  });
+}
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
index c42be6b757..924ea42ebb 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
@@ -6,6 +6,7 @@ import {
   getDisplayValue,
   getDisplayText,
   downloadAsCsv,
+  generateQueryName,
 } from 'app/views/organizationDiscover/result/utils';
 
 describe('Utils', function() {
@@ -239,4 +240,8 @@ describe('Utils', function() {
       );
     });
   });
+
+  it('generateQueryName()', function() {
+    expect(generateQueryName()).toBe('Result - Oct 17 02:41:20');
+  });
 });
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index 8e0e81d84a..a558977f2a 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -2,6 +2,7 @@ import {
   getQueryFromQueryString,
   getQueryStringFromQuery,
   getOrderByOptions,
+  parseSavedQuery,
 } from 'app/views/organizationDiscover/utils';
 
 import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
@@ -70,3 +71,25 @@ describe('getOrderByOptions()', function() {
     ]);
   });
 });
+
+describe('parseSavedQuery', function() {
+  it('strips metadata', function() {
+    const queryFromApi = {
+      id: '1',
+      name: 'Test query',
+      dateCreated: '2018-09-25T00:14:04.914Z',
+      dateUpdated: '2018-09-25T00:14:04.914Z',
+      fields: [],
+      projects: [],
+      conditions: [],
+      limit: 10,
+    };
+
+    expect(parseSavedQuery(queryFromApi)).toEqual({
+      fields: [],
+      projects: [],
+      conditions: [],
+      limit: 10,
+    });
+  });
+});
