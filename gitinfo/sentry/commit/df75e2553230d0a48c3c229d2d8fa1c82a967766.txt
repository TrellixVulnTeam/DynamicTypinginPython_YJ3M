commit df75e2553230d0a48c3c229d2d8fa1c82a967766
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 9 07:33:17 2015 -0700

    Some initial work on raw exception

diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 4b69ce2c60..68aea69bf5 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -149,6 +149,14 @@ module.exports = {
     return true;
   },
 
+  trim(str) {
+    return str.replace(/^\s+|\s+$/g,'');
+  },
+
+  defined(item) {
+    return typeof item !== "undefined" && item !== null;
+  },
+
   nl2br(str) {
     return str.replace(/\r?\n/, '<br />');
   },
diff --git a/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
index 0658df51dd..ac1690f8e7 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
@@ -5,8 +5,55 @@ var classSet = require("react/lib/cx");
 
 var GroupEventDataSection = require("../eventDataSection");
 var PropTypes = require("../../../proptypes");
+var RawStacktraceContent = require("./rawStacktraceContent");
 var StacktraceContent = require("./stacktraceContent");
 
+var ExceptionContent = React.createClass({
+  render() {
+    // TODO(dcramer): implement exceptions omitted
+    return (
+      <div>
+        {this.props.values.map((exc, excIdx) => {
+          return (
+            <div key={excIdx}>
+              <h4>
+                <span>{exc.type}</span>
+              </h4>
+              {exc.value &&
+                <div className="exc-message">{exc.value}</div>
+              }
+              <StacktraceContent data={exc.stacktrace} />
+            </div>
+          );
+        })}
+      </div>
+    );
+  }
+});
+
+var RawExceptionContent = React.createClass({
+  render() {
+    // TODO(dcramer): implement exceptions omitted
+    return (
+      <div>
+        {this.props.values.map((exc, excIdx) => {
+          return (
+            <div key={excIdx}>
+              <h4>
+                <span>{exc.type}</span>
+              </h4>
+              {exc.value &&
+                <div className="exc-message">{exc.value}</div>
+              }
+              <RawStacktraceContent data={exc.stacktrace} />
+            </div>
+          );
+        })}
+      </div>
+    );
+  }
+});
+
 var ExceptionInterface = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -15,33 +62,44 @@ var ExceptionInterface = React.createClass({
     data: React.PropTypes.object.isRequired
   },
 
+  getInitialState() {
+    return {
+      raw: false
+    };
+  },
+
+  toggleRaw() {
+    this.setState({
+      raw: !this.state.raw
+    });
+  },
+
   render() {
     var group = this.props.group;
     var evt = this.props.event;
     var data = this.props.data;
 
-    // TODO(dcramer): implement exceptions omitted
-    var children = data.values.map((exc, excIdx) => {
-      return (
-        <div key={excIdx}>
-          <h4>
-            <span>{exc.type}</span>
-          </h4>
-          {exc.value &&
-            <div className="exc-message">{exc.value}</div>
-          }
-          <StacktraceContent data={exc.stacktrace} />
-        </div>
-      );
-    });
+    var title = (
+      <span>
+        Stacktrace
+        <label className="pull-right">
+          <input type="checkbox" onChange={this.toggleRaw} checked={this.state.raw} />
+          Raw
+        </label>
+      </span>
+    );
 
     return (
       <GroupEventDataSection
           group={group}
           event={evt}
           type={this.props.type}
-          title="Exception">
-        {children}
+          title={title}>
+        {this.state.raw ?
+          <RawExceptionContent values={data.values} />
+        :
+          <ExceptionContent values={data.values} />
+        }
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/groupDetails/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/rawStacktraceContent.jsx
new file mode 100644
index 0000000000..eb18e677f7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/rawStacktraceContent.jsx
@@ -0,0 +1,72 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+
+var PropTypes = require("../../../proptypes");
+var {defined, trim} = require("../../../utils");
+
+var RawStacktraceContent = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired
+  },
+
+  getFrame(frame) {
+    return this.getDefaultFrame(frame);
+  },
+
+  getDefaultFrame(frame) {
+    result = '';
+    if (defined(frame.filename)) {
+      result += '  File "' + frame.filename + '"';
+    } else if (defined(frame.module)) {
+      result += '  Module "' + frame.module + '"';
+    } else {
+      result += '  ?';
+    }
+    if (defined(frame.lineNo) && frame.lineNo >= 0) {
+      result += ', line ' + frame.lineNo;
+    }
+    if (defined(frame.colNo) && frame.colNo >= 0) {
+      result += ', col ' + frame.colNo;
+    }
+    if (defined(frame.function)) {
+      result += ', in ' + frame.function;
+    }
+    if (defined(frame.context)) {
+      frame.context.forEach((item) => {
+        if (item[0] === frame.lineNo) {
+          result += '\n    ' + trim(item[1]);
+        }
+      });
+    }
+    return result;
+  },
+
+  render() {
+    var data = this.props.data;
+    var firstFrameOmitted, lastFrameOmitted;
+    var children = [];
+
+    if (data.frames_omitted) {
+      firstFrameOmitted = data.framesOmitted[0];
+      lastFrameOmitted = data.framesOmitted[1];
+    } else {
+      firstFrameOmitted = null;
+      lastFrameOmitted = null;
+    }
+
+    data.frames.forEach((frame, frameIdx) => {
+      children.push(this.getFrame(frame));
+      if (frameIdx === firstFrameOmitted) {
+        children.push((
+          '.. frames ' + firstFrameOmitted + ' until ' + lastFrameOmitted + ' were omitted and not available ..'
+        ));
+      }
+
+    });
+
+    return <pre className="traceback">{children.join('\n')}</pre>;
+  }
+});
+
+module.exports = RawStacktraceContent;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktrace.jsx
index 11138c77d8..1c8fabe4a3 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktrace.jsx
@@ -5,6 +5,7 @@ var classSet = require("react/lib/cx");
 
 var GroupEventDataSection = require("../eventDataSection");
 var PropTypes = require("../../../proptypes");
+var RawStacktraceContent = require("./rawStacktraceContent");
 var StacktraceContent = require("./stacktraceContent");
 
 var StacktraceInterface = React.createClass({
@@ -15,18 +16,43 @@ var StacktraceInterface = React.createClass({
     data: React.PropTypes.object.isRequired
   },
 
+  getInitialState() {
+    return {
+      raw: false
+    };
+  },
+
+  toggleRaw() {
+    this.setState({
+      raw: !this.state.raw
+    });
+  },
+
   render() {
     var group = this.props.group;
     var evt = this.props.event;
     var data = this.props.data;
 
+    var title = (
+      <span>
+        Stacktrace
+        <label className="pull-right">
+          <input type="checkbox" onChange={this.toggleRaw} checked={this.state.raw} />
+        </label>
+      </span>
+    );
+
     return (
       <GroupEventDataSection
           group={group}
           event={evt}
           type={this.props.type}
-          title="Stacktrace">
-        <StacktraceContent data={data} />
+          title={title}>
+        {this.state.raw ?
+          <RawStacktraceContent data={data} />
+        :
+          <StacktraceContent data={data} />
+        }
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktraceContent.jsx
index cc6de785a5..0a5661ce55 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktraceContent.jsx
@@ -5,6 +5,7 @@ var classSet = require("react/lib/cx");
 
 var GroupEventDataSection = require("../eventDataSection");
 var PropTypes = require("../../../proptypes");
+var {defined} = require("../../../utils");
 
 var FrameVariables = React.createClass({
   propTypes: {
@@ -40,10 +41,6 @@ var Frame = React.createClass({
     };
   },
 
-  isDefined(item) {
-    return typeof item !== "undefined" && item !== null;
-  },
-
   isUrl(filename) {
     if (!filename) {
       return false;
@@ -68,25 +65,25 @@ var Frame = React.createClass({
 
     var title = [];
 
-    if (this.isDefined(data.filename || data.module)) {
+    if (defined(data.filename || data.module)) {
       title.push(<code key="filename">{data.filename || data.module}</code>);
       if (this.isUrl(data.absPath)) {
         title.push(<a href={data.absPath} className="icon-share" key="share" />);
       }
-      if (this.isDefined(data.function)) {
+      if (defined(data.function)) {
         title.push(<span className="in-at" key="in"> in </span>);
       }
     }
 
-    if (this.isDefined(data.function)) {
+    if (defined(data.function)) {
         title.push(<code key="function">{data.function}</code>);
     }
 
-    if (this.isDefined(data.lineNo)) {
+    if (defined(data.lineNo)) {
       // TODO(dcramer): we need to implement source mappings
       // title.push(<span className="pull-right blame"><a><span className="icon-mark-github"></span> View Code</a></span>);
       title.push(<span className="in-at" key="at"> at line </span>);
-      if (this.isDefined(data.colNo)) {
+      if (defined(data.colNo)) {
         title.push(<code key="line">{data.lineNo}:{data.colNo}</code>);
       } else {
         title.push(<code key="line">{data.lineNo}</code>);
@@ -99,12 +96,12 @@ var Frame = React.createClass({
     }
 
     var context = '';
-    if (this.isDefined(data.context) && data.context.length) {
+    if (defined(data.context) && data.context.length) {
       var startLineNo = data.context[0][0];
       context = (
         <ol start={startLineNo} className={outerClassName}
             onClick={this.toggleContext}>
-        {this.isDefined(data.errors) &&
+        {defined(data.errors) &&
           <li className="expandable error"
               key="errors">{data.errors.join(", ")}</li>
         }
@@ -119,7 +116,7 @@ var Frame = React.createClass({
             lineWs}</span><span className="contextline">{lineCode
             }</span> <span className="icon-plus"></span></li>;
         })}
-        {this.isDefined(data.vars) &&
+        {defined(data.vars) &&
           <FrameVariables data={data.vars} key="vars" />
         }
         </ol>
