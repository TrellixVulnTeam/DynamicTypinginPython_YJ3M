commit 0f924abc794eca26a909851750a2dafea8396f33
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 26 13:00:45 2010 -0700

    Add DBLOG_ENHANCED_TRACEBACKS setting to enable raw tracebacks by default. Added router (untested) to include within the DBLOG_DATABASE_USING cases.

diff --git a/README.rst b/README.rst
index cfb06c5999..3f6525f669 100644
--- a/README.rst
+++ b/README.rst
@@ -33,7 +33,7 @@ Notable Changes
 Install
 =======
 
-The easiest way to install the package is via setuptools::
+The easiest way to install the package is via pip::
 
 	pip install django-db-log --upgrade
 
@@ -78,19 +78,37 @@ Enable catching of 404 errors in the logs. Default value is ``False``::
 
 You can skip other custom exception types by adding a ``skip_dblog = True`` attribute to them.
 
-##############
-DBLOG_DATABASE
-##############
+####################
+DBLOG_DATABASE_USING
+####################
 
 Use a secondary database to store error logs. This is useful if you have several websites and want to aggregate error logs onto one database server::
 
 	# This should correspond to a key in your DATABASES setting
 	DBLOG_DATABASE_USING = 'default'
 
+You should also enable the ``DBLogRouter`` to avoid things like extraneous table creation::
+
+	DATABASE_ROUTERS = [
+		'djangodblog.routers.DBLogRouter',
+		...
+	]
+
 Some things to note:
 
 * This functionality REQUIRES Django 1.2.
 
+#########################
+DBLOG_ENHANCED_TRACEBACKS
+#########################
+
+Enables showing full embedded (enhanced) tracebacks within the administration for "Messages". These work almost identically to the default exception pages within Django's DEBUG environment::
+
+	# Disable embedded interactive tracebacks in the admin
+	DBLOG_ENHANCED_TRACEBACKS = False
+
+* Note: Even if you disable displaying of enhanced tracebacks, dblog will still store the entire exception stacktrace.
+
 ############################
 Integration with ``logging``
 ############################
diff --git a/djangodblog/admin.py b/djangodblog/admin.py
index fc5f333d4a..8839c168f9 100644
--- a/djangodblog/admin.py
+++ b/djangodblog/admin.py
@@ -1,3 +1,4 @@
+from django.conf import settings
 from django.contrib import admin
 from django.contrib.admin.util import unquote
 from django.contrib.admin.views.main import ChangeList, Paginator
@@ -101,7 +102,7 @@ class ErrorBatchAdmin(EfficientModelAdmin):
     form            = ErrorBatchAdminForm
     list_display    = ('shortened_url', 'logger', 'server_name', 'times_seen', 'last_seen')
     list_display_links = ('shortened_url',)
-    list_filter     = ('logger', 'server_name', 'status', 'last_seen', 'class_name')
+    list_filter     = ('status', 'level', 'last_seen')
     ordering        = ('-last_seen',)
     actions         = ('resolve_errorbatch',)
     search_fields   = ('url', 'class_name', 'message', 'traceback', 'server_name')
@@ -127,7 +128,7 @@ class ErrorAdmin(EfficientModelAdmin):
     form            = ErrorAdminForm
     list_display    = ('shortened_url', 'logger', 'server_name', 'datetime')
     list_display_links = ('shortened_url',)
-    list_filter     = ('logger', 'class_name', 'datetime', 'server_name')
+    list_filter     = ('level', 'datetime')
     ordering        = ('-id',)
     search_fields   = ('url', 'class_name', 'message', 'traceback', 'server_name')
     readonly_fields = ('logger', 'server_name', 'class_name', 'level', 'message', 'datetime')
@@ -142,7 +143,7 @@ class ErrorAdmin(EfficientModelAdmin):
     
     def change_view(self, request, object_id, extra_context={}):
         obj = self.get_object(request, unquote(object_id))
-        has_traceback = bool('exc' in obj.data) and 'raw' not in request.GET
+        has_traceback = getattr(settings, 'DBLOG_ENHANCED_TRACEBACKS', True) and bool('exc' in obj.data) and 'raw' not in request.GET
         if has_traceback:
             try:
                 extra_context.update(self.get_traceback_context(request, obj))
diff --git a/djangodblog/routers.py b/djangodblog/routers.py
new file mode 100644
index 0000000000..19087d9c32
--- /dev/null
+++ b/djangodblog/routers.py
@@ -0,0 +1,16 @@
+from django.conf import settings
+
+class DBLogRouter(object):
+    def db_for_write(self, model, **hints):
+        if model._meta.app_label == 'dblog':
+            return getattr(settings, 'DBLOG_DATABASE_USING', None)
+
+    def db_for_read(self, model, **hints):
+        return self.db_for_write(model, **hints)
+
+    def allow_syncdb(self, db, model):
+        dblog_db = getattr(settings, 'DBLOG_DATABASE_USING', None)
+        if not dblog_db:
+            return None
+        if model._meta.app_label == 'dblog' and db != dblog_db:
+            return False
\ No newline at end of file
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index cb6b3fcdad..6657de0249 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -178,7 +178,6 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.level, logging.DEBUG)
         self.assertEquals(last.message, 'This is an error')
         
-        
     def testAlternateDatabase(self):
         settings.DBLOG_USING = 'default'
         
