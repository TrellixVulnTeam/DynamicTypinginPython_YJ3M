commit 68c285a384daae97f60dbf4407260850f281802f
Author: Eric Eldredge <lettertwo@gmail.com>
Date:   Mon Feb 20 19:27:46 2012 -0500

    MailProcessor plugin now sends to members, allows multiple project emails.
    
    It will also (optionally) send to sentry admins.

diff --git a/sentry/plugins/sentry_mail/__init__.py b/sentry/plugins/sentry_mail/__init__.py
index 77dcc335d4..c32aa5f998 100644
--- a/sentry/plugins/sentry_mail/__init__.py
+++ b/sentry/plugins/sentry_mail/__init__.py
@@ -7,18 +7,33 @@ sentry.plugins.sentry_mail
 """
 from django import forms
 from django.core.mail import send_mail
+from django.core.validators import email_re, ValidationError
 from django.template.loader import render_to_string
 from sentry.conf import settings
 from sentry.plugins import Plugin, register
+import re
 
-NOTSET = object()
+split_re = re.compile(r'\s*,\s*|\s+')
 
+NOTSET = object()
 
 class MailConfigurationForm(forms.Form):
-    send_to = forms.EmailField(max_length=128, widget=forms.TextInput(attrs={
-        'placeholder': 'you@example.com',
-    }))
-
+    send_to = forms.CharField(required=False,
+        help_text='Enter one or more emails separated by commas or lines. '\
+                  'Entering emails will prevent messages being sent to '\
+                  'project members.',
+        widget=forms.Textarea(attrs={
+            'placeholder': 'you@example.com, \nother@example.com',}))
+    send_to_admins = forms.BooleanField(initial=False, required=False,
+        help_text='Send emails to admins as well as members (or emails above).')
+
+    def clean_send_to(self):
+        value = self.cleaned_data['send_to']
+        emails = filter(None, split_re.split(value))
+        for email in emails:
+            if not email_re.match(email):
+                raise ValidationError('%s is not a valid e-mail address.' % email)
+        return ','.join(emails)
 
 @register
 class MailProcessor(Plugin):
@@ -28,7 +43,7 @@ class MailProcessor(Plugin):
     project_conf_form = MailConfigurationForm
 
     def __init__(self, min_level=NOTSET, include_loggers=NOTSET, exclude_loggers=NOTSET,
-                 send_to=NOTSET, *args, **kwargs):
+                 send_to=None, send_to_admins=NOTSET, *args, **kwargs):
 
         super(MailProcessor, self).__init__(*args, **kwargs)
 
@@ -38,23 +53,46 @@ class MailProcessor(Plugin):
             include_loggers = settings.MAIL_INCLUDE_LOGGERS
         if exclude_loggers is NOTSET:
             exclude_loggers = settings.MAIL_EXCLUDE_LOGGERS
-        if send_to is NOTSET:
-            send_to = ','.join(settings.ADMINS)
+        if send_to_admins is NOTSET:
+            send_to_admins = False
 
         self.min_level = min_level
         self.include_loggers = include_loggers
         self.exclude_loggers = exclude_loggers
         self.send_to = send_to
+        self.send_to_admins = send_to_admins
         self.subject_prefix = settings.EMAIL_SUBJECT_PREFIX
 
     def _send_mail(self, subject, body, project=None, fail_silently=True):
-        send_to = self.get_option('send_to', project) or self.send_to
+        send_to = self.get_send_to(project)
+
         subject_prefix = self.get_option('subject_prefix', project) or self.subject_prefix
 
         send_mail('%s%s' % (subject_prefix, subject), body,
-                  settings.SERVER_EMAIL, send_to.split(','),
+                  settings.SERVER_EMAIL, send_to,
                   fail_silently=fail_silently)
 
+    def get_send_to(self, project=None):
+        send_to_list = self.get_option('send_to', project)
+        if not send_to_list:
+            if self.send_to is not None:
+                send_to_list = self.send_to
+            elif project is not None:
+                send_to_list = project.member_set.values_list('user__email', flat=True)
+            else:
+                send_to_list = []
+
+        if isinstance(send_to_list, basestring):
+            send_to_list = send_to_list.split(',')
+
+        send_to_admins = self.get_option('send_to_admins', project)
+        if send_to_admins is None:
+            send_to_admins = self.send_to_admins
+        if send_to_admins:
+            send_to_list = set(list(send_to_list) + list(settings.ADMINS))
+
+        return filter(None, send_to_list)
+
     def send_test_mail(self, project=None):
         self._send_mail(
             subject='Test Email',
@@ -63,7 +101,7 @@ class MailProcessor(Plugin):
             fail_silently=False,
         )
 
-    def mail_admins(self, group, event, fail_silently=True):
+    def mail_members(self, group, event, fail_silently=True):
         interfaces = event.interfaces
 
         project = group.project
@@ -97,7 +135,7 @@ class MailProcessor(Plugin):
 
     def should_mail(self, group, event):
         project = group.project
-        send_to = self.get_option('send_to', project) or self.send_to
+        send_to = self.get_send_to(project)
         if not send_to:
             return False
         min_level = self.get_option('min_level', project) or self.min_level
@@ -118,4 +156,4 @@ class MailProcessor(Plugin):
         if not self.should_mail(group, event):
             return
 
-        self.mail_admins(group, event)
+        self.mail_members(group, event)
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 022fd06c5d..8d5e935afb 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -44,3 +44,47 @@ class MailProcessorTest(TestCase):
             group.level = 5
             group.logger = 'root'
             self.assertTrue(p.should_mail(group=group, event=Mock()))
+
+    def test_send_to(self):
+        Mock = mock.Mock
+        with mock.patch('sentry.models.ProjectOption.objects.get_value') as get_value:
+            opts = {}
+            get_value.side_effect = lambda p, k, d: opts.get(k, d)
+
+            admins = ['admin@fake.com']
+            member_emails = ['test@fake.com', 'member@fake.com']
+            project_emails = ['member@fake.com', 'new@fake.com']
+
+            project = Mock()
+            project.member_set = Mock()
+            project.member_set.values_list.return_value = member_emails
+
+            with mock.patch('sentry.plugins.sentry_mail.settings') as settings:
+                settings.ADMINS = admins
+
+                # member emails without admins
+                p = MailProcessor()
+                self.assertEqual(sorted(set(member_emails)),
+                                 sorted(p.get_send_to(project)))
+
+                # member emails with admins
+                p = MailProcessor()
+                opts = {'mail:send_to_admins': True}
+                p._send_mail('', '', project=project)
+                self.assertEqual(sorted(set(member_emails + admins)),
+                                 sorted(p.get_send_to(project)))
+
+                # project emails without admins
+                p = MailProcessor()
+                opts = {'mail:send_to': ','.join(project_emails)}
+                p._send_mail('', '', project=project)
+                self.assertEqual(sorted(set(project_emails)),
+                                 sorted(p.get_send_to(project)))
+
+                # project emails with admins
+                p = MailProcessor()
+                opts = {'mail:send_to': ','.join(project_emails),
+                        'mail:send_to_admins': True}
+                p._send_mail('', '', project=project)
+                self.assertEqual(sorted(set(project_emails + admins)),
+                                 sorted(p.get_send_to(project)))
