commit a48bf5b5b4a133cf89e9406e0c20c492b213e24c
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 15 14:13:18 2013 +0900

    Swap in NodeField on Event

diff --git a/src/sentry/db/models/fields/__init__.py b/src/sentry/db/models/fields/__init__.py
index ed17cb9bdd..3848429456 100644
--- a/src/sentry/db/models/fields/__init__.py
+++ b/src/sentry/db/models/fields/__init__.py
@@ -10,3 +10,4 @@ from __future__ import absolute_import
 
 from .bounded import *  # NOQA
 from .gzippeddict import *  # NOQA
+from .node import *  # NOQA
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index bb7f63d696..62f8d56d9f 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -29,15 +29,6 @@ class NodeData(collections.MutableMapping):
         self.id = id
         self._node_data = data
 
-    @memoize
-    def data(self):
-        if self._node_data is None:
-            raise Exception('Must populate node data first')
-        return self._node_data
-
-    def bind_node_data(self, data):
-        self.data = data
-
     def __getitem__(self, key):
         return self.data[key]
 
@@ -53,6 +44,22 @@ class NodeData(collections.MutableMapping):
     def __len__(self):
         return len(self.data)
 
+    def __repr__(self):
+        cls_name = type(self).__name__
+        if self._node_data:
+            return '<%s: id=%s data=%r>' % (
+                cls_name, self.id, repr(self._node_data))
+        return '<%s: id=%s>' % (self.id,)
+
+    @memoize
+    def data(self):
+        if self._node_data is None:
+            raise Exception('Must populate node data first')
+        return self._node_data
+
+    def bind_node_data(self, data):
+        self.data = data
+
 
 class NodeField(GzippedDictField):
     """
@@ -91,14 +98,3 @@ class NodeField(GzippedDictField):
         else:
             result = value.data
         return compress(pickle.dumps(result))
-
-    def value_to_string(self, obj):
-        value = self._get_val_from_obj(obj)
-        return self.get_prep_value(value)
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.TextField"
-        args, kwargs = introspector(self)
-        return (field_class, args, kwargs)
diff --git a/src/sentry/models.py b/src/sentry/models.py
index e7f93479a0..7f097ec43a 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -40,7 +40,7 @@ from sentry.constants import (
     LOG_LEVELS, MAX_CULPRIT_LENGTH, MAX_TAG_KEY_LENGTH, MAX_TAG_VALUE_LENGTH)
 from sentry.db.models import (
     Model, GzippedDictField, BoundedIntegerField, BoundedPositiveIntegerField,
-    update, sane_repr)
+    NodeField, update, sane_repr)
 from sentry.manager import (
     GroupManager, ProjectManager,
     MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager,
@@ -482,7 +482,6 @@ class EventBase(Model):
         max_length=MAX_CULPRIT_LENGTH, blank=True, null=True,
         db_column='view')
     checksum = models.CharField(max_length=32, db_index=True)
-    data = GzippedDictField(blank=True, null=True)
     num_comments = BoundedPositiveIntegerField(default=0, null=True)
     platform = models.CharField(max_length=64, null=True)
 
@@ -586,6 +585,7 @@ class Group(EventBase):
     time_spent_count = BoundedIntegerField(default=0)
     score = BoundedIntegerField(default=0)
     is_public = models.NullBooleanField(default=False, null=True)
+    data = GzippedDictField(blank=True, null=True)
 
     objects = GroupManager()
 
@@ -729,6 +729,7 @@ class Event(EventBase):
     time_spent = models.FloatField(null=True)
     server_name = models.CharField(max_length=128, db_index=True, null=True)
     site = models.CharField(max_length=128, db_index=True, null=True)
+    data = NodeField(blank=True, null=True)
 
     objects = BaseManager()
 
@@ -743,7 +744,7 @@ class Event(EventBase):
     @memoize
     def interfaces(self):
         result = []
-        for key, data in self.node_data.iteritems():
+        for key, data in self.data.iteritems():
             if '.' not in key:
                 continue
 
@@ -760,10 +761,6 @@ class Event(EventBase):
 
         return SortedDict((k, v) for k, v in sorted(result, key=lambda x: x[1].get_score(), reverse=True))
 
-    @property
-    def node_data(self):
-        assert hasattr(self, '_node_data_cache'), 'missing node data cache'
-
     def bind_node_data(self):
         from sentry import app
 
