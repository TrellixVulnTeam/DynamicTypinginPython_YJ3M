commit 5a9e007a07d743ff0d4e6130e5113b6dde44fb17
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Aug 20 15:44:37 2015 -0700

    Refactor tooltip code into React lifecycle mixin

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 12b4b7b300..9d92046f46 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -11,10 +11,15 @@ import LoadingIndicator from "../components/loadingIndicator";
 import {compareArrays, valueIsEqual} from "../utils";
 import classNames from "classnames";
 import {userDisplayName} from "../utils/formatters";
+import TooltipMixin from "../mixins/tooltip";
 
 var AssigneeSelector = React.createClass({
   mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange")
+    Reflux.listenTo(GroupStore, "onGroupChange"),
+    TooltipMixin({
+      html: true,
+      selector: ".tip"
+    })
   ],
 
   propTypes: {
@@ -32,26 +37,6 @@ var AssigneeSelector = React.createClass({
     };
   },
 
-  componentDidMount() {
-    this.attachTooltips();
-  },
-
-  componentWillUnmount() {
-    this.removeTooltips();
-    $(this.getDOMNode()).unbind();
-  },
-
-  attachTooltips() {
-    $(this.getDOMNode()).tooltip({
-      html: true,
-      selector: ".tip"
-    });
-  },
-
-  removeTooltips() {
-    $(this.getDOMNode()).tooltip("destroy");
-  },
-
   componentWillReceiveProps(nextProps) {
     var loading = GroupStore.hasStatus(nextProps.id, 'assignTo');
     if (nextProps.id != this.props.id || loading != this.state.loading) {
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index e1de87b911..56904fa96c 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -1,10 +1,21 @@
 import $ from "jquery";
 import moment from "moment";
 import React from "react";
-import TooltipTrigger from "./tooltipTrigger";
 import { valueIsEqual } from "../utils";
+import TooltipMixin from "../mixins/tooltip";
 
 var BarChart = React.createClass({
+  mixins: [
+    TooltipMixin(function () {
+      return {
+        html: true,
+        placement: this.props.placement,
+        selector: ".tip",
+        viewport: this.props.viewport
+      };
+    })
+  ],
+
   propTypes: {
     points: React.PropTypes.arrayOf(React.PropTypes.shape({
       x: React.PropTypes.number.isRequired,
@@ -33,32 +44,10 @@ var BarChart = React.createClass({
     };
   },
 
-  componentDidMount() {
-    this.attachTooltips();
-  },
-
-  componentWillUnmount() {
-    this.removeTooltips();
-    $(this.getDOMNode()).unbind();
-  },
-
   shouldComponentUpdate(nextProps, nextState) {
     return !valueIsEqual(this.props, nextProps, true);
   },
 
-  attachTooltips() {
-    $(this.getDOMNode()).tooltip({
-      html: true,
-      placement: this.props.placement,
-      selector: ".tip",
-      viewport: this.props.viewport
-    });
-  },
-
-  removeTooltips() {
-    $(this.getDOMNode()).tooltip("destroy");
-  },
-
   floatFormat(number, places) {
     var multi = Math.pow(10, places);
     return parseInt(number * multi, 10) / multi;
diff --git a/src/sentry/static/sentry/app/components/tooltipTrigger.jsx b/src/sentry/static/sentry/app/components/tooltipTrigger.jsx
deleted file mode 100644
index 8792d03c6d..0000000000
--- a/src/sentry/static/sentry/app/components/tooltipTrigger.jsx
+++ /dev/null
@@ -1,47 +0,0 @@
-import React from "react";
-import $ from "jquery";
-require("bootstrap/js/tooltip");
-
-var TooltipTrigger = React.createClass({
-  propTypes: {
-    title: React.PropTypes.node.isRequired,
-    placement: React.PropTypes.string,
-    viewport: React.PropTypes.shape({
-      selector: React.PropTypes.string,
-      padding: React.PropTypes.number
-    })
-  },
-
-  getDefaultProps() {
-    return {
-      placement: "left",
-      viewport: {
-        selector: "body",
-        padding: 5
-      }
-    };
-  },
-
-  componentDidMount() {
-    // These can be configured via options; this is just a demo
-    $(this.getDOMNode()).tooltip({
-      html: true,
-      placement: this.props.placement,
-      title: React.renderToString(this.props.title),
-      viewport: this.props.viewport
-    });
-  },
-
-  componentWillUnmount() {
-    var node = $(this.getDOMNode());
-    node.tooltip("destroy");
-    node.unbind();
-  },
-
-  render() {
-    return this.props.children;
-  }
-});
-
-export default TooltipTrigger;
-
diff --git a/src/sentry/static/sentry/app/mixins/tooltip.jsx b/src/sentry/static/sentry/app/mixins/tooltip.jsx
new file mode 100644
index 0000000000..2f9799f65d
--- /dev/null
+++ b/src/sentry/static/sentry/app/mixins/tooltip.jsx
@@ -0,0 +1,26 @@
+import "bootstrap/js/tooltip";
+
+export default function (options) {
+  options = options || {};
+  return {
+    componentDidMount() {
+      this.attachTooltips();
+    },
+
+    componentWillUnmount() {
+      this.removeTooltips();
+      $(this.getDOMNode()).unbind();
+    },
+
+    attachTooltips() {
+      $(this.getDOMNode()).tooltip(
+        Object.prototype.toString.call(options) === '[object Function]' ?
+          options.call(this) : options
+      );
+    },
+
+    removeTooltips() {
+      $(this.getDOMNode()).tooltip("destroy");
+    }
+  };
+}
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
index 571f547634..8614a159d6 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
@@ -4,29 +4,16 @@ import moment from "moment";
 import Gravatar from "../../components/gravatar";
 import GroupState from "../../mixins/groupState";
 import {userDisplayName} from "../../utils/formatters";
+import TooltipMixin from "../../mixins/tooltip";
 
 var GroupSeenBy = React.createClass({
-  mixins: [GroupState],
-
-  componentDidMount() {
-    this.attachTooltips();
-  },
-
-  componentWillUnmount() {
-    this.removeTooltips();
-    $(this.getDOMNode()).unbind();
-  },
-
-  attachTooltips() {
-    $(this.getDOMNode()).tooltip({
+  mixins: [
+    GroupState,
+    TooltipMixin({
       html: true,
       selector: ".tip"
-    });
-  },
-
-  removeTooltips() {
-    $(this.getDOMNode()).tooltip("destroy");
-  },
+    })
+  ],
 
   render() {
     var group = this.getGroup();
