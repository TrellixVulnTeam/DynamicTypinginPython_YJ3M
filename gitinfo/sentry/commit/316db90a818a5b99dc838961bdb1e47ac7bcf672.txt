commit 316db90a818a5b99dc838961bdb1e47ac7bcf672
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Mon Oct 14 10:50:36 2019 -0700

    perf(db): Cache negative hits on GroupSnooze. (#15055)
    
    * perf(db): Cache negative hits on GroupSnooze.
    
    * and only process pre-existing groups.
    
    * is this the caching you're looking for
    
    * Assign has_reappeared no matter what.
    
    * Adjust test for both is_new cases.

diff --git a/src/sentry/models/groupsnooze.py b/src/sentry/models/groupsnooze.py
index 981a1a48c5..d2888a48ba 100644
--- a/src/sentry/models/groupsnooze.py
+++ b/src/sentry/models/groupsnooze.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from datetime import timedelta
 
 from django.db import models
+from django.db.models.signals import post_delete, post_save
 from django.utils import timezone
 
 from sentry.db.models import (
@@ -13,6 +14,7 @@ from sentry.db.models import (
     Model,
     sane_repr,
 )
+from sentry.utils.cache import cache
 
 
 class GroupSnooze(Model):
@@ -49,6 +51,10 @@ class GroupSnooze(Model):
 
     __repr__ = sane_repr("group_id")
 
+    @classmethod
+    def get_cache_key(cls, group_id):
+        return "groupsnooze_group_id:1:%s" % (group_id)
+
     def is_valid(self, group=None, test_rates=False):
         if group is None:
             group = self.group
@@ -103,3 +109,17 @@ class GroupSnooze(Model):
             return False
 
         return True
+
+
+post_save.connect(
+    lambda instance, **kwargs: cache.set(
+        GroupSnooze.get_cache_key(instance.group_id), instance, 3600
+    ),
+    sender=GroupSnooze,
+    weak=False,
+)
+post_delete.connect(
+    lambda instance, **kwargs: cache.set(GroupSnooze.get_cache_key(instance.group_id), False, 3600),
+    sender=GroupSnooze,
+    weak=False,
+)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index e8a318b103..6b39c485b7 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -167,7 +167,8 @@ def post_process_group(event, is_new, is_regression, is_new_group_environment, *
 
         if event.group_id:
             # we process snoozes before rules as it might create a regression
-            has_reappeared = process_snoozes(event.group)
+            # but not if it's new because you can't immediately snooze a new group
+            has_reappeared = False if is_new else process_snoozes(event.group)
 
             handle_owner_assignment(event.project, event.group, event)
 
@@ -222,9 +223,16 @@ def process_snoozes(group):
     """
     from sentry.models import GroupSnooze, GroupStatus
 
-    try:
-        snooze = GroupSnooze.objects.get_from_cache(group=group)
-    except GroupSnooze.DoesNotExist:
+    key = GroupSnooze.get_cache_key(group.id)
+    snooze = cache.get(key)
+    if snooze is None:
+        try:
+            snooze = GroupSnooze.objects.get(group=group)
+        except GroupSnooze.DoesNotExist:
+            snooze = False
+        # This cache is also set in post_save|delete.
+        cache.set(key, snooze, 3600)
+    if not snooze:
         return False
 
     if not snooze.is_valid(group, test_rates=True):
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 9c33276021..38bb4e590d 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -89,11 +89,19 @@ class PostProcessGroupTest(TestCase):
         event = self.create_event(group=group)
         snooze = GroupSnooze.objects.create(group=group, until=timezone.now() - timedelta(hours=1))
 
+        # Check for has_reappeared=False if is_new=True
         post_process_group(
             event=event, is_new=True, is_regression=False, is_new_group_environment=True
         )
 
-        mock_processor.assert_called_with(event, True, False, True, True)
+        mock_processor.assert_called_with(event, True, False, True, False)
+
+        # Check for has_reappeared=True if is_new=False
+        post_process_group(
+            event=event, is_new=False, is_regression=False, is_new_group_environment=True
+        )
+
+        mock_processor.assert_called_with(event, False, False, True, True)
 
         assert not GroupSnooze.objects.filter(id=snooze.id).exists()
 
