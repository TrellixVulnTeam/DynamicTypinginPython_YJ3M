commit c261feff3a19018ebf8c288198f8fa577e6ffbc8
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 17 12:53:39 2016 -0700

    Remove OrganizationMember.counter usage and references
    
    Followup: add migration removing column
    
    @getsentry/infrastructure

diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index f8dda7eea3..129c80e581 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -13,7 +13,6 @@ from bitfield import BitField
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import models, transaction
-from django.db.models import F
 from django.utils import timezone
 from django.utils.encoding import force_bytes
 from hashlib import md5
@@ -79,7 +78,7 @@ class OrganizationMember(Model):
     ), default=0)
     date_added = models.DateTimeField(default=timezone.now)
     has_global_access = models.BooleanField(default=True)
-    counter = BoundedPositiveIntegerField(null=True, blank=True)
+    # counter = BoundedPositiveIntegerField(null=True, blank=True)
     teams = models.ManyToManyField('sentry.Team', blank=True,
                                    through='sentry.OrganizationMemberTeam')
 
@@ -102,34 +101,6 @@ class OrganizationMember(Model):
             'Must set user or email'
         super(OrganizationMember, self).save(*args, **kwargs)
 
-        if not self.counter:
-            self._set_counter()
-
-    @transaction.atomic
-    def delete(self, *args, **kwargs):
-        super(OrganizationMember, self).delete(*args, **kwargs)
-        if self.counter:
-            self._unshift_counter()
-
-    def _unshift_counter(self):
-        assert self.counter
-        OrganizationMember.objects.filter(
-            organization=self.organization,
-            counter__gt=self.counter,
-        ).update(
-            counter=F('counter') - 1,
-        )
-
-    def _set_counter(self):
-        assert self.id and not self.counter
-        # XXX(dcramer): this isnt atomic, but unfortunately MySQL doesnt support
-        # the subquery pattern we'd need
-        self.update(
-            counter=OrganizationMember.objects.filter(
-                organization=self.organization,
-            ).count(),
-        )
-
     @property
     def is_pending(self):
         return self.user_id is None
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index c9e6f3bd42..f4012ef62a 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -9,29 +9,6 @@ from sentry.testutils import TestCase
 
 
 class OrganizationMemberTest(TestCase):
-    def test_counter(self):
-        organization = self.create_organization(name='Foo')
-
-        user2 = self.create_user('foo@example.com')
-        member2 = self.create_member(user=user2, organization=organization)
-        assert member2.counter == 2
-
-        user3 = self.create_user('bar@example.com')
-        member3 = self.create_member(user=user3, organization=organization)
-        assert member3.counter == 3
-
-        user4 = self.create_user('baz@example.com')
-        member4 = self.create_member(user=user4, organization=organization)
-        assert member4.counter == 4
-
-        member2.delete()
-
-        member3 = OrganizationMember.objects.get(id=member3.id)
-        assert member3.counter == 2
-
-        member4 = OrganizationMember.objects.get(id=member4.id)
-        assert member4.counter == 3
-
     def test_token_generation(self):
         member = OrganizationMember(id=1, organization_id=1, email='foo@example.com')
         with self.settings(SECRET_KEY='a'):
