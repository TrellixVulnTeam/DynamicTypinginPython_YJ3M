commit 8198389eb57ee2336b346f33de8411e78d99f420
Author: Marcos Gaeta <31750075+mgaeta@users.noreply.github.com>
Date:   Mon May 11 13:11:01 2020 -0700

    Fix typos across repo (#18654)

diff --git a/conftest.py b/conftest.py
index d4301e3663..c3827628eb 100644
--- a/conftest.py
+++ b/conftest.py
@@ -15,7 +15,7 @@ sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))
 def pytest_configure(config):
     import warnings
 
-    # XXX(dramer): Kombu throws a warning due to transaction.commit_manually
+    # XXX(dcramer): Kombu throws a warning due to transaction.commit_manually
     # being used
     warnings.filterwarnings("error", "", Warning, r"^(?!(|kombu|raven|sentry))")
 
diff --git a/src/sentry/api/bases/organizationissues.py b/src/sentry/api/bases/organizationissues.py
index 0bfd70dcdb..1b9f00a117 100644
--- a/src/sentry/api/bases/organizationissues.py
+++ b/src/sentry/api/bases/organizationissues.py
@@ -14,7 +14,7 @@ ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', a
 
 class OrganizationIssuesEndpoint(OrganizationMemberEndpoint, EnvironmentMixin):
     def get_queryset(self, request, organization, member, project_list):
-        # Must return a 'sorty_by' selector for pagination that is a datetime
+        # Must return a 'sort_by' selector for pagination that is a datetime
         return Group.objects.none()
 
     def get(self, request, organization, member):
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index 7f0804bf7d..097a1246c5 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -11,7 +11,7 @@ from sentry.utils.data_filters import FILTER_STAT_KEYS_TO_VALUES
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
-@scenario("RetrieveEventCountsProjcet")
+@scenario("RetrieveEventCountsProject")
 def retrieve_event_counts_project(runner):
     runner.request(
         method="GET", path="/projects/%s/%s/stats/" % (runner.org.slug, runner.default_project.slug)
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 099cc47b68..eb251cb2b4 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -253,7 +253,7 @@ class GroupSerializerBase(Serializer):
         # should only have 1 org at this point
         organization_id = organization_id_list[0]
 
-        # find all the integration installss that have issue tracking
+        # find all the integration installs that have issue tracking
         for integration in Integration.objects.filter(organizations=organization_id):
             if not (
                 integration.has_feature(IntegrationFeatures.ISSUE_BASIC)
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index af408c9636..7c560856a0 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -172,7 +172,7 @@ class BaseAccess(object):
 
 class Access(BaseAccess):
     # TODO(dcramer): this is still a little gross, and ideally backend access
-    # would be based on the same scopes as API access so theres clarity in
+    # would be based on the same scopes as API access so there's clarity in
     # what things mean
     def __init__(
         self,
diff --git a/src/sentry/auth/providers/github/constants.py b/src/sentry/auth/providers/github/constants.py
index 8645301928..7910231932 100644
--- a/src/sentry/auth/providers/github/constants.py
+++ b/src/sentry/auth/providers/github/constants.py
@@ -11,18 +11,18 @@ REQUIRE_VERIFIED_EMAIL = getattr(settings, "GITHUB_REQUIRE_VERIFIED_EMAIL", Fals
 ERR_NO_ORG_ACCESS = "You do not have access to the required GitHub organization."
 
 ERR_NO_PRIMARY_EMAIL = (
-    "We were unable to find a primary email address associated with your GitHub acount."
+    "We were unable to find a primary email address associated with your GitHub account."
 )
 
 ERR_NO_SINGLE_PRIMARY_EMAIL = (
-    "We were unable to find a single primary email address associated with your GitHub acount."
+    "We were unable to find a single primary email address associated with your GitHub account."
 )
 
 ERR_NO_VERIFIED_PRIMARY_EMAIL = (
-    "We were unable to find a verified, primary email address associated with your GitHub acount."
+    "We were unable to find a verified, primary email address associated with your GitHub account."
 )
 
-ERR_NO_SINGLE_VERIFIED_PRIMARY_EMAIL = "We were unable to find a single verified, primary email address associated with your GitHub acount."
+ERR_NO_SINGLE_VERIFIED_PRIMARY_EMAIL = "We were unable to find a single verified, primary email address associated with your GitHub account."
 
 # we request repo as we share scopes with the other GitHub integration
 SCOPE = "user:email,read:org,repo"
diff --git a/src/sentry/db/models/base.py b/src/sentry/db/models/base.py
index e902944536..fbd6c9138b 100644
--- a/src/sentry/db/models/base.py
+++ b/src/sentry/db/models/base.py
@@ -54,7 +54,7 @@ class BaseModel(models.Model):
         return d
 
     def __hash__(self):
-        # Django decided that it shouldnt let us hash objects even though they have
+        # Django decided that it shouldn't let us hash objects even though they have
         # memory addresses. We need that behavior, so let's revert.
         if self.pk:
             return models.Model.__hash__(self)
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 2cae3addfe..6aae76cd1e 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -1337,7 +1337,7 @@ def _find_hashes(project, hash_list):
 @metrics.wraps("event_manager.save_transactions.materialize_event_metrics")
 def _materialize_event_metrics(jobs):
     for job in jobs:
-        # Enusre the _metrics key exists. This is usually created during
+        # Ensure the _metrics key exists. This is usually created during
         # and prefilled with ingestion sizes.
         event_metrics = job["event"].data.get("_metrics") or {}
         job["event"].data["_metrics"] = event_metrics
diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index 05ef9e17a9..a613d316ff 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -19,7 +19,7 @@ class Filter(object):
     conditions (Sequence[Sequence[str, str, Any]]): List of conditions to fetch - default None
     having (Sequence[str, str, Any]]): List of having conditions to filter by - default None
     project_ids (Sequence[int]): List of project IDs to fetch - default None
-    group_ids (Sequence[int]): List of group IDs to fetch - defualt None
+    group_ids (Sequence[int]): List of group IDs to fetch - default None
     event_ids (Sequence[int]): List of event IDs to fetch - default None
 
     selected_columns (Sequence[str]): List of columns to select
diff --git a/src/sentry/eventstore/utils.py b/src/sentry/eventstore/utils.py
index a9c7ac3a0b..804e0d91c3 100644
--- a/src/sentry/eventstore/utils.py
+++ b/src/sentry/eventstore/utils.py
@@ -28,9 +28,9 @@ def callback_func(context, method, callargs, backends, results):
     if backends == ["snuba", "snuba_discover"]:
         if method in get_by_id_methods:
             snuba_result = results[0].result()
-            snuba_discover_reuslt = results[1].result()
+            snuba_discover_result = results[1].result()
 
-            if snuba_result != snuba_discover_reuslt:
+            if snuba_result != snuba_discover_result:
                 logger.info(
                     "discover.result-mismatch",
                     extra={
diff --git a/src/sentry/grouping/__init__.py b/src/sentry/grouping/__init__.py
index 151295706d..4aadd2b1d5 100644
--- a/src/sentry/grouping/__init__.py
+++ b/src/sentry/grouping/__init__.py
@@ -25,7 +25,7 @@ to annotate the inputs into the hashing function so that they can be shown
 to the user.  These values are not persisted, but the configuration inputs are
 stored in the event.
 
-For reproducability an event config is persisted in the event dictionary
+For reproducibility an event config is persisted in the event dictionary
 consisting of two main sources of configuration: event enhancers and the
 version of the grouping config.  Enhancers are custom rules applied to the
 default grouping algorithm (specifically the stacktrace) and the base version
diff --git a/src/sentry/http.py b/src/sentry/http.py
index 2b831a3757..57ec18b815 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -26,7 +26,7 @@ logger = logging.getLogger(__name__)
 
 # TODO(dcramer): we want to change these to be constants so they are easier
 # to translate/link again
-# the maximum number of remote resources (i.e. sourc eifles) that should be
+# the maximum number of remote resources (i.e. source files) that should be
 # fetched
 MAX_URL_LENGTH = 150
 
diff --git a/src/sentry/integrations/bitbucket/client.py b/src/sentry/integrations/bitbucket/client.py
index 32c8fd3bb4..8ce1802706 100644
--- a/src/sentry/integrations/bitbucket/client.py
+++ b/src/sentry/integrations/bitbucket/client.py
@@ -16,7 +16,7 @@ BITBUCKET_KEY = "%s.bitbucket" % urlparse(absolute_uri()).hostname
 
 class BitbucketAPIPath(object):
     """
-    All UUID's must be surrounded by culybraces.
+    All UUID's must be surrounded by curlybraces.
 
     repo is the fully qualified slug containing 'username/repo_slug'
 
diff --git a/src/sentry/integrations/github/client.py b/src/sentry/integrations/github/client.py
index 78302b4716..847b1b7ee2 100644
--- a/src/sentry/integrations/github/client.py
+++ b/src/sentry/integrations/github/client.py
@@ -80,8 +80,8 @@ class GitHubClientMixin(ApiClient):
     def get_token(self, force_refresh=False):
         """
         Get token retrieves the active access token from the integration model.
-        Should the token have expried, a new token will be generated and
-        automatically presisted into the integration.
+        Should the token have expired, a new token will be generated and
+        automatically persisted into the integration.
         """
         token = self.integration.metadata.get("access_token")
         expires_at = self.integration.metadata.get("expires_at")
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index f710b5892d..65fbe9d75c 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -38,7 +38,7 @@ class ContextType(object):
         self.alias = alias
         ctx_data = {}
         for key, value in six.iteritems(trim(data)):
-            # we use simple checks here, rathern than ' in set()' to avoid
+            # we use simple checks here, rather than ' in set()' to avoid
             # issues with maps/lists
             if value is not None and value != "":
                 ctx_data[force_text(key)] = value
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index a828d0b8e0..ee970a24a3 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -17,7 +17,7 @@ from sentry.utils.strings import to_unicode
 from sentry.utils.safe import get_path
 from sentry.web.helpers import render_to_string
 
-# Instead of relying on a list of hardcoded methods, just loosly match
+# Instead of relying on a list of hardcoded methods, just loosely match
 # against a pattern.
 http_method_re = re.compile(r"^[A-Z\-_]{3,32}$")
 
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 0c02dd3ec8..3a6c7a58a0 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -270,7 +270,7 @@ def fetch_release_file(filename, release, dist=None):
             # on the file system by `ReleaseFile.cache`, instead.
             cache.set(cache_key, (headers, z_body, 200, encoding), 3600)
 
-    # in the cache as an unsucessful attempt
+    # in the cache as an unsuccessful attempt
     elif result == -1:
         result = None
 
@@ -295,7 +295,7 @@ def fetch_file(url, project=None, release=None, dist=None, allow_scraping=True):
 
     Attempts to fetch from the database first (assuming there's a release on the
     event), then the internet. Caches the result of each of those two attempts
-    sperately, whether or not those attempts are successful. Used for both
+    separately, whether or not those attempts are successful. Used for both
     source files and source maps.
     """
 
diff --git a/src/sentry/mediators/service_hooks/creator.py b/src/sentry/mediators/service_hooks/creator.py
index 4200b4c70d..65a2bef4e0 100644
--- a/src/sentry/mediators/service_hooks/creator.py
+++ b/src/sentry/mediators/service_hooks/creator.py
@@ -50,7 +50,7 @@ class Creator(Mediator):
         # For Sentry Apps, if projects = [], the service hook applies to all
         # the projects in the organization.
         # We are using the first project so that we can satisfy the not null
-        # contraint for project_id on the ServiceHook table.
+        # constraint for project_id on the ServiceHook table.
         #
         # Otherwise, we'll always have a single project passed through by
         # the ProjectServiceHooksEndpoint
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index df891fc8d4..c354789a74 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -8,7 +8,7 @@ from django.conf import settings
 
 from sentry.utils.types import type_from_value, Any
 
-# Prevent outselves from clobbering the builtin
+# Prevent ourselves from clobbering the builtin
 _type = type
 
 logger = logging.getLogger("sentry")
@@ -94,7 +94,7 @@ class OptionsManager(object):
         try:
             return self.registry[key]
         except KeyError:
-            # HACK: Historically, Options were used for random adhoc things.
+            # HACK: Historically, Options were used for random ad hoc things.
             # Fortunately, they all share the same prefix, 'sentry:', so
             # we special case them here and construct a faux key until we migrate.
             if key.startswith(("sentry:", "getsentry:")):
@@ -238,7 +238,7 @@ class OptionsManager(object):
             default = type
             default_value = default()
 
-        # Boolean values need to be set to ALLOW_EMPTY becaues otherwise, "False"
+        # Boolean values need to be set to ALLOW_EMPTY because otherwise, "False"
         # would be treated as a not valid value
         if default_value is True or default_value is False:
             flags |= FLAG_ALLOW_EMPTY
@@ -271,7 +271,7 @@ class OptionsManager(object):
 
     def all(self):
         """
-        Return an interator for all keys in the registry.
+        Return an iterator for all keys in the registry.
         """
         return six.itervalues(self.registry)
 
diff --git a/src/sentry/pipeline/__init__.py b/src/sentry/pipeline/__init__.py
index f7539c22b2..b080505431 100644
--- a/src/sentry/pipeline/__init__.py
+++ b/src/sentry/pipeline/__init__.py
@@ -27,7 +27,7 @@ class PipelineProvider(object):
 
     def set_config(self, config):
         """
-        Use set_config to allow additional provider configuration be assend to
+        Use set_config to allow additional provider configuration be assigned to
         the provider instance. This is useful for example when nesting
         pipelines and the provider needs to be configured differently.
         """
@@ -42,7 +42,7 @@ class PipelineProvider(object):
 
 class PipelineView(BaseView):
     """
-    A class implementing the PipelineView may be used in a PipleineProviders
+    A class implementing the PipelineView may be used in a PipelineProviders
     get_pipeline_views list.
     """
 
@@ -114,7 +114,7 @@ class Pipeline(object):
     :provider_model_cls:
     The Provider model object represents the instance of an object implementing
     the PipelineProvider interface. This is used to look up the instance
-    when constructing an in progress pipleine (get_for_request).
+    when constructing an in progress pipeline (get_for_request).
 
     :config:
     A object that specifies additional pipeline and provider runtime
diff --git a/src/sentry/plugins/sentry_interface_types/models.py b/src/sentry/plugins/sentry_interface_types/models.py
index 2d2d8e7f75..7df1af7822 100644
--- a/src/sentry/plugins/sentry_interface_types/models.py
+++ b/src/sentry/plugins/sentry_interface_types/models.py
@@ -13,7 +13,7 @@ class InterfaceTypePlugin(TagPlugin):
     the class name of each interface (e.g. Http, Stacktrace, Exception).
     """
 
-    descrption = __doc__
+    description = __doc__
     slug = "interface_types"
     title = "Auto Tag: Interface Types"
     version = sentry.VERSION
diff --git a/src/sentry/projectoptions/manager.py b/src/sentry/projectoptions/manager.py
index 39cae7e4e2..e0819dacbb 100644
--- a/src/sentry/projectoptions/manager.py
+++ b/src/sentry/projectoptions/manager.py
@@ -87,6 +87,6 @@ class ProjectOptionsManager(object):
 
     def all(self):
         """
-        Return an interator for all keys in the registry.
+        Return an iterator for all keys in the registry.
         """
         return six.itervalues(self.registry)
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 75ab384672..b1e7a68d3f 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -47,7 +47,7 @@ class QuotaConfig(object):
                         quota will only apply to the specified scope instance
                         (e.g. a project key). Requires ``scope`` to be set
                         explicitly.
-    :param limit:       Maxmimum number of matching events allowed. Can be ``0``
+    :param limit:       Maximum number of matching events allowed. Can be ``0``
                         to reject all events, ``None`` for an unlimited counted
                         quota, or a positive number for enforcement. Requires
                         ``window`` if the limit is not ``0``.
diff --git a/src/sentry/runner/commands/config.py b/src/sentry/runner/commands/config.py
index b086ec7baf..192d90a4ee 100644
--- a/src/sentry/runner/commands/config.py
+++ b/src/sentry/runner/commands/config.py
@@ -52,7 +52,7 @@ def get(option, silent):
 
 @config.command()
 @click.option(
-    "--secret", default=False, is_flag=True, help="Hide prompt input when inputing secret data."
+    "--secret", default=False, is_flag=True, help="Hide prompt input when inputting secret data."
 )
 @click.argument("key")
 @click.argument("value", required=False)
diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
index a3b040b0ce..556cd61510 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
@@ -368,7 +368,7 @@ function getNewQueryParams(
 function getParams(params: UrlParams): UrlParams {
   const {start, end, period, statsPeriod, ...otherParams} = params;
 
-  // `statsPeriod` takes precendence for now
+  // `statsPeriod` takes precedence for now
   const coercedPeriod = statsPeriod || period;
 
   // Filter null values
diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
index 901ca707e6..3701b0fe0e 100644
--- a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -174,7 +174,7 @@ export function unpinSearch(api, orgId, type, pinnedSearch) {
 }
 
 /**
- * Send a DELETE rquest to remove a saved search
+ * Send a DELETE request to remove a saved search
  *
  * @param {Object} api API client
  * @param {String} orgId Organization slug
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index f8b8548fe6..7e1394de35 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -128,7 +128,7 @@ export default class AsyncComponent<
     }
   }
 
-  // Compatiblity shim for child classes that call super on this hook.
+  // Compatibility shim for child classes that call super on this hook.
   UNSAFE_componentWillReceiveProps(_newProps: P, _newContext: any) {}
 
   componentDidUpdate(prevProps: P, prevContext: any) {
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index eeaf2543d2..94c6505a5c 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -18,7 +18,7 @@ import Tooltip from './components/tooltip';
 import XAxis from './components/xAxis';
 import YAxis from './components/yAxis';
 
-// If dimension is a number conver it to pixels, otherwise use dimension without transform
+// If dimension is a number convert it to pixels, otherwise use dimension without transform
 const getDimensionValue = dimension => {
   if (typeof dimension === 'number') {
     return `${dimension}px`;
diff --git a/src/sentry/static/sentry/app/components/confirm.tsx b/src/sentry/static/sentry/app/components/confirm.tsx
index 87ba5852fd..bad999dd12 100644
--- a/src/sentry/static/sentry/app/components/confirm.tsx
+++ b/src/sentry/static/sentry/app/components/confirm.tsx
@@ -38,7 +38,7 @@ const defaultProps = {
    * Text to show in the confirmation button
    */
   confirmText: t('Confirm') as React.ReactNode,
-  // Stop event propgation when opening the confirm modal
+  // Stop event propagation when opening the confirm modal
   stopPropagation: false,
 };
 
@@ -128,7 +128,7 @@ class Confirm extends React.PureComponent<Props, State> {
     onCancel: PropTypes.func,
     header: PropTypes.node,
 
-    // Stop event propgation when opening the confirm modal
+    // Stop event propagation when opening the confirm modal
     stopPropagation: PropTypes.bool,
   };
 
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.tsx b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
index a79415dd40..1a16d81b2a 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.tsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
@@ -75,7 +75,7 @@ type Props = DefaultProps & {
   shouldIgnoreClickOutside?: (event: MouseEvent) => boolean;
   /**
    * If this is set, then this will become a "controlled" component.
-   * It will no longer set local state and dropdown visiblity will
+   * It will no longer set local state and dropdown visibility will
    * only follow `isOpen`.
    */
   isOpen?: boolean;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index f63202a1a6..ca4bc10c8a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -572,7 +572,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
 
           if (rectBelowMinimap) {
             // if the first span is below the minimap, we scroll the minimap
-            // to the top. this addresss spurious scrolling to the top of the page
+            // to the top. this addresses spurious scrolling to the top of the page
             if (spanNumber <= 1) {
               minimapSlider.style.top = '0px';
               return;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index 09c49836aa..0e3912e1d4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -151,7 +151,7 @@ export const parseSpanTimestamps = (spanBounds: SpanBoundsType): TimestampStatus
   return TimestampStatus.Reversed;
 };
 
-// given the start and end trace timstamps, and the view window, we want to generate a function
+// given the start and end trace timestamps, and the view window, we want to generate a function
 // that'll output the relative %'s for the width and placements relative to the left-hand side.
 //
 // The view window (viewStart and viewEnd) are percentage values (between 0% and 100%), they correspond to the window placement
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index 8df95bb6a8..9100bc58e8 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -129,7 +129,7 @@ class GridEditable<
   }
 
   componentDidUpdate() {
-    // Redraw columns whenever new props are recieved
+    // Redraw columns whenever new props are received
     this.setGridTemplateColumns(this.props.columnOrder);
   }
 
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/taskConfig.tsx b/src/sentry/static/sentry/app/components/onboardingWizard/taskConfig.tsx
index 78b28bda2b..44cde34088 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/taskConfig.tsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/taskConfig.tsx
@@ -70,7 +70,7 @@ export function getOnboardingTasks(
               api={api}
               organization={organization}
               project={projects[0]}
-              onIssueRecieved={() => !taskIsDone(task) && onCompleteTask()}
+              onIssueReceived={() => !taskIsDone(task) && onCompleteTask()}
             >
               {() => <EventWaitingIndicator />}
             </EventWaiter>
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
index 7fd7a8b5fc..229b5aba3b 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
@@ -143,7 +143,7 @@ export function getParams(
 ): ParsedParams {
   const {start, end, period, statsPeriod, utc, ...otherParams} = params;
 
-  // `statsPeriod` takes precendence for now
+  // `statsPeriod` takes precedence for now
   let coercedPeriod = getStatsPeriodValue(statsPeriod) || getStatsPeriodValue(period);
 
   const dateTimeStart = getDateTimeString(start);
diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.tsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.tsx
index 90a203c148..b1c6bcf90a 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.tsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.tsx
@@ -83,7 +83,7 @@ class Broadcasts extends React.Component<Props, State> {
   };
 
   /**
-   * If tab/window loses visiblity (note: this is different than focus), stop
+   * If tab/window loses visibility (note: this is different than focus), stop
    * polling for broadcasts data, otherwise, if it gains visibility, start
    * polling again.
    */
diff --git a/src/sentry/static/sentry/app/components/version.tsx b/src/sentry/static/sentry/app/components/version.tsx
index fb0ee31394..7c95d870ba 100644
--- a/src/sentry/static/sentry/app/components/version.tsx
+++ b/src/sentry/static/sentry/app/components/version.tsx
@@ -42,7 +42,7 @@ type Props = {
    */
   withPackage?: boolean;
   /**
-   * Will add project ID to the linked url (can be overriden by preserveGlobalSelection).
+   * Will add project ID to the linked url (can be overridden by preserveGlobalSelection).
    * If not provided and user does not have global-views enabled, it will try to take it from current url query.
    */
   projectId?: string;
@@ -141,7 +141,7 @@ Version.propTypes = {
   className: PropTypes.string,
 };
 
-// TODO(matej): try to wrap version with this when truncate prop is true (in seperate PR)
+// TODO(matej): try to wrap version with this when truncate prop is true (in separate PR)
 // const VersionWrapper = styled('div')`
 //   ${overflowEllipsis};
 //   max-width: 100%;
diff --git a/src/sentry/static/sentry/app/components/versionHoverCard.jsx b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
index 1a5253e838..b4bd8f3a9a 100644
--- a/src/sentry/static/sentry/app/components/versionHoverCard.jsx
+++ b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
@@ -110,7 +110,7 @@ class VersionHoverCard extends React.Component {
     const {version} = this.props;
     const lastCommit = release.lastCommit;
 
-    const recentDeploysByEnviroment = deploys.reduce(function(dbe, deploy) {
+    const recentDeploysByEnvironment = deploys.reduce(function(dbe, deploy) {
       const {dateFinished, environment} = deploy;
       if (!dbe.hasOwnProperty(environment)) {
         dbe[environment] = dateFinished;
@@ -118,9 +118,9 @@ class VersionHoverCard extends React.Component {
 
       return dbe;
     }, {});
-    let mostRecentDeploySlice = Object.keys(recentDeploysByEnviroment);
-    if (Object.keys(recentDeploysByEnviroment).length > 3) {
-      mostRecentDeploySlice = Object.keys(recentDeploysByEnviroment).slice(0, 3);
+    let mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment);
+    if (Object.keys(recentDeploysByEnvironment).length > 3) {
+      mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment).slice(0, 3);
     }
     return {
       header: (
@@ -166,7 +166,7 @@ class VersionHoverCard extends React.Component {
                 <h6 className="deploy-heading">{t('Deploys')}</h6>
               </div>
               {mostRecentDeploySlice.map((env, idx) => {
-                const dateFinished = recentDeploysByEnviroment[env];
+                const dateFinished = recentDeploysByEnvironment[env];
                 return (
                   <div className="deploy" key={idx}>
                     <div className="deploy-meta" style={{position: 'relative'}}>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index bb1b897ba6..87e46026de 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -35,7 +35,7 @@ function appendTrailingSlash(nextState, replace) {
  *
  * The method for lazy loading a route leaf node is using the <LazyLoad> component + `componentPromise`.
  * The reason for this is because react-router handles the route tree better and if we use <LazyLoad> it will end
- * up having to re-render more components than necesssary.
+ * up having to re-render more components than necessary.
  */
 const lazyLoad = cb => m => cb(null, m.default);
 
diff --git a/src/sentry/static/sentry/app/types/hooks.ts b/src/sentry/static/sentry/app/types/hooks.ts
index 40d397f244..57cda490fd 100644
--- a/src/sentry/static/sentry/app/types/hooks.ts
+++ b/src/sentry/static/sentry/app/types/hooks.ts
@@ -16,7 +16,7 @@ import FeatureDisabled from 'app/components/acl/featureDisabled';
 
 /**
  * The Hooks type mapping is the master interface for all external Hooks into
- * the sentry frontent application.
+ * the sentry frontend application.
  */
 export type Hooks = {_: any} & RouteHooks &
   ComponentHooks &
@@ -196,7 +196,7 @@ type AnalyticsTrackEvent = (opts: {
 }) => void;
 
 /**
- * Trigger adhoc analytics tracking in the hook store.
+ * Trigger ad hoc analytics tracking in the hook store.
  */
 type AnalyticsTrackAdhocEvent = (opts: {
   /**
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 6fc83cffc3..2a37106e85 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -72,7 +72,7 @@ export type Actor = {
 
 /**
  * Organization summaries are sent when you request a
- * list of all organiations
+ * list of all organizations
  */
 export type OrganizationSummary = {
   status: {
diff --git a/src/sentry/static/sentry/app/utils/eventWaiter.tsx b/src/sentry/static/sentry/app/utils/eventWaiter.tsx
index bb44435041..f620aa2c1f 100644
--- a/src/sentry/static/sentry/app/utils/eventWaiter.tsx
+++ b/src/sentry/static/sentry/app/utils/eventWaiter.tsx
@@ -16,7 +16,7 @@ const recordAnalyticsFirstEvent = ({organization, project}) =>
 
 /**
  * Should no issue object be available (the first issue has expired) then it
- * will simply be boolean true. When no event has been recieved this will be
+ * will simply be boolean true. When no event has been received this will be
  * null. Otherwise it will be the group
  */
 type FirstIssue = null | true | Group;
@@ -27,7 +27,7 @@ type Props = {
   project: Project;
   disabled?: boolean;
   pollInterval?: number;
-  onIssueRecieved?: (props: {firstIssue: FirstIssue}) => void;
+  onIssueReceived?: (props: {firstIssue: FirstIssue}) => void;
   children: (props: {firstIssue: FirstIssue}) => React.ReactNode;
 };
 
@@ -61,7 +61,7 @@ class EventWaiter extends React.Component<Props, State> {
   intervalId: number | null = null;
 
   pollHandler = async () => {
-    const {api, organization, project, onIssueRecieved} = this.props;
+    const {api, organization, project, onIssueReceived} = this.props;
     let firstEvent = null;
 
     try {
@@ -107,8 +107,8 @@ class EventWaiter extends React.Component<Props, State> {
 
     recordAnalyticsFirstEvent({organization, project});
 
-    if (onIssueRecieved) {
-      onIssueRecieved({firstIssue});
+    if (onIssueReceived) {
+      onIssueReceived({firstIssue});
     }
 
     this.stopPolling();
diff --git a/src/sentry/static/sentry/app/utils/getPeriod.tsx b/src/sentry/static/sentry/app/utils/getPeriod.tsx
index f1313c4010..bdb3ad81d7 100644
--- a/src/sentry/static/sentry/app/utils/getPeriod.tsx
+++ b/src/sentry/static/sentry/app/utils/getPeriod.tsx
@@ -26,7 +26,7 @@ export const getPeriod = (
   }
 
   // you can not specify both relative and absolute periods
-  // relative period takes precendence
+  // relative period takes precedence
   if (period) {
     if (!shouldDoublePeriod) {
       return {statsPeriod: period};
diff --git a/src/sentry/static/sentry/app/utils/withExperiment.tsx b/src/sentry/static/sentry/app/utils/withExperiment.tsx
index 919ee9d6f0..b53e4553d1 100644
--- a/src/sentry/static/sentry/app/utils/withExperiment.tsx
+++ b/src/sentry/static/sentry/app/utils/withExperiment.tsx
@@ -62,7 +62,7 @@ type LogExperimentProps = {
  * A HoC wrapper that injects `experimentAssignment` into a component
  *
  * This wrapper will automatically log exposure of the experiment upon
- * receiving the componentDidMount lifecylce event.
+ * receiving the componentDidMount lifecycle event.
  *
  * For organization experiments, an organization object must be provided to the
  * component. You may wish to use the withOrganization HoC for this.
diff --git a/src/sentry/static/sentry/app/views/admin/adminMail.jsx b/src/sentry/static/sentry/app/views/admin/adminMail.jsx
index 59684cb8c7..5cd59e0fa9 100644
--- a/src/sentry/static/sentry/app/views/admin/adminMail.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminMail.jsx
@@ -54,7 +54,7 @@ export default class AdminEnvironment extends AsyncView {
 
           <dt>{t('Host')}</dt>
           <dd>
-            <pre className="vall">
+            <pre className="val">
               {mailHost}:{mailPort}
             </pre>
           </dd>
diff --git a/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx b/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx
index 069acc0725..5ad0192191 100644
--- a/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx
+++ b/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx
@@ -19,7 +19,7 @@ type AggregationState = {
   isOpen: boolean;
 };
 
-const initalState = {
+const initialState = {
   inputValue: '',
   isOpen: false,
 };
@@ -28,7 +28,7 @@ export default class AggregationRow extends React.Component<
   AggregationProps,
   AggregationState
 > {
-  state = initalState;
+  state = initialState;
 
   // This is the ref of the inner react-select component
   private select: any;
diff --git a/src/sentry/static/sentry/app/views/discover/result/utils.tsx b/src/sentry/static/sentry/app/views/discover/result/utils.tsx
index e862c6b74f..76ad087e93 100644
--- a/src/sentry/static/sentry/app/views/discover/result/utils.tsx
+++ b/src/sentry/static/sentry/app/views/discover/result/utils.tsx
@@ -111,7 +111,7 @@ export function getChartDataByDay(rawData: any[], query: Query, options: any = {
   );
 
   // Reverse to get ascending dates - we request descending to ensure latest
-  // day data is compplete in the case of limits being hit
+  // day data is complete in the case of limits being hit
   const dates = [...new Set(rawData.map(entry => formatDate(entry.time)))].reverse();
 
   // Temporarily store series as object with series names as keys
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.tsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.tsx
index b82b1acc4e..092a063b86 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.tsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.tsx
@@ -28,7 +28,7 @@ const Indicator = ({
     {!firstIssue ? (
       <Waiting key="waiting" />
     ) : (
-      <Success key="recieved" firstIssue={firstIssue} {...props} />
+      <Success key="received" firstIssue={firstIssue} {...props} />
     )}
   </PoseGroup>
 );
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
index bb2a318e5d..9c20ae0d54 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
@@ -140,7 +140,7 @@ class AbstractIntegrationDetailedView<
   };
 
   //Returns the string that is shown as the title of a tab
-  getTabDiplay(tab: Tab): string {
+  getTabDisplay(tab: Tab): string {
     //default is return the tab
     return tab;
   }
@@ -305,7 +305,7 @@ class AbstractIntegrationDetailedView<
             className={this.state.tab === tabName ? 'active' : ''}
             onClick={() => this.onTabChange(tabName)}
           >
-            <CapitalizedLink>{t(this.getTabDiplay(tabName))}</CapitalizedLink>
+            <CapitalizedLink>{t(this.getTabDisplay(tabName))}</CapitalizedLink>
           </li>
         ))}
       </ul>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
index 17a15f2842..c268f26682 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
@@ -126,7 +126,7 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
     );
   };
 
-  getTabDiplay(tab: Tab) {
+  getTabDisplay(tab: Tab) {
     //we want to show project configurations to make it more clear
     if (tab === 'configurations') {
       return 'project configurations';
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
index 62e4a47f51..f7331fd0e6 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
@@ -256,7 +256,7 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
     );
   }
 
-  //no configuraitons for sentry apps
+  //no configurations for sentry apps
   renderConfigurations() {
     return null;
   }
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
index 95e0687693..bc08921376 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
@@ -290,7 +290,7 @@ class AccountSecurityEnroll extends AsyncView {
     }
 
     // `authenticator.authId` is NOT the same as `props.params.authId` This is
-    // for backwards compatbility with API endpoint
+    // for backwards compatability with API endpoint
     try {
       await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});
     } catch (err) {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.tsx
index 3d152299ea..229d856c4c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.tsx
@@ -189,7 +189,7 @@ class Field extends React.Component<Props> {
 
     // See comments in prop types
     if (typeof children === 'function') {
-      //need to cast b/c TS claims childen is not otherwise callable
+      //need to cast b/c TS claims children is not otherwise callable
       Control = (children as ChildrenFunction)({
         ...otherProps,
         ...controlProps,
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
index f7e6906728..2904c552f2 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
@@ -146,7 +146,7 @@ class AllTeamsRow extends React.Component {
     );
 
     // You can only view team details if you have access to team -- this should account
-    // for your role + org open memberhsip
+    // for your role + org open membership
     const canViewTeam = team.hasAccess;
 
     return (
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index 45767fbab2..f320be2dac 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -71,7 +71,7 @@ const POLLING_MAX_TIME_LIMIT = 3 * 60000;
 type ConditionOrAction = string;
 
 type RuleTaskResponse = {
-  status: 'pending' | 'failed' | 'succes';
+  status: 'pending' | 'failed' | 'success';
   rule?: IssueAlertRule;
   error?: string;
 };
@@ -176,7 +176,7 @@ class IssueRuleEditor extends AsyncView<Props, State> {
   };
 
   fetchStatus() {
-    // pollHander calls itself until it gets either a sucesss
+    // pollHandler calls itself until it gets either a success
     // or failed status but we don't want to poll forever so we pass
     // in a hard stop time of 3 minutes before we bail.
     const quitTime = Date.now() + POLLING_MAX_TIME_LIMIT;
@@ -224,7 +224,7 @@ class IssueRuleEditor extends AsyncView<Props, State> {
       });
 
       // if we get a 202 back it means that we have an async task
-      // running to lookup and verfity the channel id for Slack.
+      // running to lookup and verify the channel id for Slack.
       if (xhr && xhr.status === 202) {
         this.setState({detailedError: null, loading: true, uuid: resp.uuid});
         this.fetchStatus();
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 691984765e..cf597dba3d 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -514,7 +514,7 @@ def _do_process_event(
                 return
         except RetryProcessing:
             # If `create_failed_event` indicates that we need to retry we
-            # invoke outselves again.  This happens when the reprocessing
+            # invoke ourselves again.  This happens when the reprocessing
             # revision changed while we were processing.
             _do_preprocess_event(cache_key, data, start_time, event_id, process_task, project)
             return
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 90530ce80c..ea421dee93 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -187,7 +187,7 @@ def find_users(username, with_valid_password=True, is_active=None):
 
 def login(request, user, passed_2fa=None, after_2fa=None, organization_id=None, source=None):
     """
-    This logs a user in for the sesion and current request.
+    This logs a user in for the session and current request.
 
     If 2FA is enabled this method will start the MFA flow and return False as
     required.  If `passed_2fa` is set to `True` then the 2FA flow is set to be
diff --git a/src/sentry/utils/batching_kafka_consumer.py b/src/sentry/utils/batching_kafka_consumer.py
index caea13ac3c..8839d42db4 100644
--- a/src/sentry/utils/batching_kafka_consumer.py
+++ b/src/sentry/utils/batching_kafka_consumer.py
@@ -72,7 +72,7 @@ class BatchingKafkaConsumer(object):
     * Messages are processed locally (e.g. not written to an external datastore!) as they are
       read from Kafka, then added to an in-memory batch
     * Batches are flushed based on the batch size or time sent since the first message
-      in the batch was recieved (e.g. "500 items or 1000ms")
+      in the batch was received (e.g. "500 items or 1000ms")
     * Kafka offsets are not automatically committed! If they were, offsets might be committed
       for messages that are still sitting in an in-memory batch, or they might *not* be committed
       when messages are sent to an external datastore right before the consumer process dies
diff --git a/src/sentry/utils/pytest/relay.py b/src/sentry/utils/pytest/relay.py
index e13322c970..281ed1373b 100644
--- a/src/sentry/utils/pytest/relay.py
+++ b/src/sentry/utils/pytest/relay.py
@@ -1,4 +1,4 @@
-# Fixutres used to interact with a test Relay server
+# Fixtures used to interact with a test Relay server
 
 from __future__ import absolute_import
 
diff --git a/src/sentry_plugins/opsgenie/plugin.py b/src/sentry_plugins/opsgenie/plugin.py
index 1ad8ef0201..ffbf67d80b 100644
--- a/src/sentry_plugins/opsgenie/plugin.py
+++ b/src/sentry_plugins/opsgenie/plugin.py
@@ -30,7 +30,7 @@ class OpsGenieOptionsForm(notify.NotificationConfigurationForm):
     )
     recipients = forms.CharField(
         max_length=255,
-        help_text="The user names of individual users or groups (comma seperated)",
+        help_text="The user names of individual users or groups (comma separated)",
         required=False,
     )
     alert_url = forms.CharField(
diff --git a/src/social_auth/backends/__init__.py b/src/social_auth/backends/__init__.py
index 866b5c4866..e52174a946 100644
--- a/src/social_auth/backends/__init__.py
+++ b/src/social_auth/backends/__init__.py
@@ -51,7 +51,7 @@ PIPELINE = setting(
     "SOCIAL_AUTH_PIPELINE",
     (
         "social_auth.backends.pipeline.social.social_auth_user",
-        # Removed by default since it can be a dangerouse behavior that
+        # Removed by default since it can be a dangerous behavior that
         # could lead to accounts take over.
         # 'social_auth.backends.pipeline.associate.associate_by_email',
         "social_auth.backends.pipeline.user.get_username",
@@ -267,7 +267,7 @@ class BaseAuth(object):
         raise NotImplementedError("Implement in subclass")
 
     def auth_complete(self, *args, **kwargs):
-        """Completes loging process, must return user instance"""
+        """Completes logging process, must return user instance"""
         raise NotImplementedError("Implement in subclass")
 
     def to_session_dict(self, next_idx, *args, **kwargs):
@@ -507,7 +507,7 @@ class BaseOAuth1(OAuthAuth):
         return self.request(url, auth=self.oauth_auth(token))
 
     def fetch_response(self, request):
-        """Executes request and fetchs service response"""
+        """Executes request and fetches service response"""
         response = dsa_urlopen(request.to_url())
         return "\n".join(response.readlines())
 
@@ -616,7 +616,7 @@ class BaseOAuth2(OAuthAuth):
         return {"Content-Type": "application/x-www-form-urlencoded", "Accept": "application/json"}
 
     def auth_complete(self, *args, **kwargs):
-        """Completes loging process, must return user instance"""
+        """Completes logging process, must return user instance"""
         self.process_error(self.data)
         params = self.auth_complete_params(self.validate_state())
         request = Request(
diff --git a/src/social_auth/backends/asana.py b/src/social_auth/backends/asana.py
index b2d0f65e0d..ce8001f178 100644
--- a/src/social_auth/backends/asana.py
+++ b/src/social_auth/backends/asana.py
@@ -58,7 +58,7 @@ class AsanaAuth(BaseOAuth2):
             return None
 
     def auth_complete(self, *args, **kwargs):
-        """Completes loging process, must return user instance"""
+        """Completes logging process, must return user instance"""
         self.process_error(self.data)
         params = self.auth_complete_params(self.validate_state())
 
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 41fc27e007..c72219744c 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -22,7 +22,7 @@ fromEntries.shim();
 Enzyme.configure({adapter: new Adapter()});
 
 /**
- * Mock (current) date to alway be below
+ * Mock (current) date to always be below
  */
 const constantDate = new Date(1508208080000); //National Pasta Day
 MockDate.set(constantDate);
diff --git a/tests/js/spec/components/acl/access.spec.jsx b/tests/js/spec/components/acl/access.spec.jsx
index 09581284b3..b57c1d081a 100644
--- a/tests/js/spec/components/acl/access.spec.jsx
+++ b/tests/js/spec/components/acl/access.spec.jsx
@@ -30,7 +30,7 @@ describe('Access', function() {
       });
     });
 
-    it('has accesss', function() {
+    it('has access', function() {
       mount(
         <Access access={['project:write', 'project:read']}>{childrenMock}</Access>,
         routerContext
diff --git a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
index 824dd00681..76ce459484 100644
--- a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
+++ b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
@@ -15,7 +15,7 @@ describe('SentryAppExternalIssueForm', () => {
   let sentryAppInstallation;
   let component;
   let submitUrl;
-  let externalIssueRequst;
+  let externalIssueRequest;
 
   beforeEach(() => {
     group = TestStubs.Group({
@@ -27,7 +27,7 @@ describe('SentryAppExternalIssueForm', () => {
     sentryApp = TestStubs.SentryApp();
     sentryAppInstallation = TestStubs.SentryAppInstallation({sentryApp});
     submitUrl = `/sentry-app-installations/${sentryAppInstallation.uuid}/external-issues/`;
-    externalIssueRequst = Client.addMockResponse({
+    externalIssueRequest = Client.addMockResponse({
       url: submitUrl,
       method: 'POST',
       body: {},
@@ -57,7 +57,7 @@ describe('SentryAppExternalIssueForm', () => {
 
     it('does not submit form if required fields are not set', () => {
       wrapper.find('form').simulate('submit');
-      expect(externalIssueRequst).not.toHaveBeenCalled();
+      expect(externalIssueRequest).not.toHaveBeenCalled();
     });
 
     it('submits to the New External Issue endpoint', () => {
@@ -65,7 +65,7 @@ describe('SentryAppExternalIssueForm', () => {
 
       wrapper.find('form').simulate('submit');
 
-      expect(externalIssueRequst).toHaveBeenCalledWith(
+      expect(externalIssueRequest).toHaveBeenCalledWith(
         submitUrl,
         expect.objectContaining({
           data: {
@@ -125,7 +125,7 @@ describe('SentryAppExternalIssueForm', () => {
 
       wrapper.find('form').simulate('submit');
 
-      expect(externalIssueRequst).toHaveBeenCalledWith(
+      expect(externalIssueRequest).toHaveBeenCalledWith(
         submitUrl,
         expect.objectContaining({
           data: {
diff --git a/tests/js/spec/views/acceptProjectTransfer.spec.jsx b/tests/js/spec/views/acceptProjectTransfer.spec.jsx
index 6c9a3b5e15..13144306ce 100644
--- a/tests/js/spec/views/acceptProjectTransfer.spec.jsx
+++ b/tests/js/spec/views/acceptProjectTransfer.spec.jsx
@@ -32,7 +32,7 @@ describe('AcceptProjectTransfer', function() {
     mountWithTheme(
       <AcceptProjectTransfer
         location={{
-          pathame: 'endpoint',
+          pathname: 'endpoint',
           query: {data: 'XYZ'},
         }}
       />,
@@ -46,7 +46,7 @@ describe('AcceptProjectTransfer', function() {
     const wrapper = mountWithTheme(
       <AcceptProjectTransfer
         location={{
-          pathame: 'endpoint',
+          pathname: 'endpoint',
           query: {data: 'XYZ'},
         }}
       />,
diff --git a/tests/js/spec/views/discover/discover.spec.jsx b/tests/js/spec/views/discover/discover.spec.jsx
index 3637d29139..9c6a8d4c9e 100644
--- a/tests/js/spec/views/discover/discover.spec.jsx
+++ b/tests/js/spec/views/discover/discover.spec.jsx
@@ -133,7 +133,7 @@ describe('Discover', function() {
     });
   });
 
-  describe('componentWillRecieveProps()', function() {
+  describe('componentWillReceiveProps()', function() {
     it('handles navigating to saved query', function() {
       const wrapper = mountWithTheme(
         <Discover
diff --git a/tests/js/spec/views/organizationGroupDetails/organizationGroupEvents.spec.jsx b/tests/js/spec/views/organizationGroupDetails/organizationGroupEvents.spec.jsx
index aba1dc2ebb..f55483ed50 100644
--- a/tests/js/spec/views/organizationGroupDetails/organizationGroupEvents.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/organizationGroupEvents.spec.jsx
@@ -5,7 +5,7 @@ import {browserHistory} from 'react-router';
 import {mount, shallow} from 'sentry-test/enzyme';
 import {GroupEvents} from 'app/views/organizationGroupDetails/groupEvents';
 
-const OrgnanizationGroupEvents = GroupEvents;
+const OrganizationGroupEvents = GroupEvents;
 
 describe('groupEvents', function() {
   let request;
@@ -52,7 +52,7 @@ describe('groupEvents', function() {
 
   it('renders', function() {
     const component = mount(
-      <OrgnanizationGroupEvents
+      <OrganizationGroupEvents
         api={new MockApiClient()}
         group={TestStubs.Group()}
         params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
@@ -66,7 +66,7 @@ describe('groupEvents', function() {
 
   it('handles search', function() {
     const component = shallow(
-      <OrgnanizationGroupEvents
+      <OrganizationGroupEvents
         api={new MockApiClient()}
         params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
         group={TestStubs.Group()}
@@ -98,7 +98,7 @@ describe('groupEvents', function() {
 
   it('handles environment filtering', function() {
     shallow(
-      <OrgnanizationGroupEvents
+      <OrganizationGroupEvents
         api={new MockApiClient()}
         params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
         group={TestStubs.Group()}
diff --git a/tests/js/spec/views/sentryAppExternalInstallation.spec.jsx b/tests/js/spec/views/sentryAppExternalInstallation.spec.jsx
index de21f08545..7a00b8a318 100644
--- a/tests/js/spec/views/sentryAppExternalInstallation.spec.jsx
+++ b/tests/js/spec/views/sentryAppExternalInstallation.spec.jsx
@@ -10,7 +10,7 @@ describe('SentryAppExternalInstallation', () => {
     getOrgsMock,
     getOrgMock,
     getAppMock,
-    getInstalltionsMock,
+    getInstallationsMock,
     getFeaturesMock,
     getMountedComponent,
     org1,
@@ -69,7 +69,7 @@ describe('SentryAppExternalInstallation', () => {
         url: `/organizations/${org1.slug}/`,
         body: org1,
       });
-      getInstalltionsMock = MockApiClient.addMockResponse({
+      getInstallationsMock = MockApiClient.addMockResponse({
         url: `/organizations/${org1.slug}/sentry-app-installations/`,
         body: [],
       });
@@ -81,7 +81,7 @@ describe('SentryAppExternalInstallation', () => {
       expect(getAppMock).toHaveBeenCalled();
       expect(getOrgsMock).toHaveBeenCalled();
       expect(getOrgMock).toHaveBeenCalled();
-      expect(getInstalltionsMock).toHaveBeenCalled();
+      expect(getInstallationsMock).toHaveBeenCalled();
       expect(getFeaturesMock).toHaveBeenCalled();
       expect(wrapper.state('organization')).toBe(org1);
       expect(wrapper.find('.Select-multi-value-wrapper')).toHaveLength(0);
@@ -144,7 +144,7 @@ describe('SentryAppExternalInstallation', () => {
         body: org2,
       });
 
-      getInstalltionsMock = MockApiClient.addMockResponse({
+      getInstallationsMock = MockApiClient.addMockResponse({
         url: `/organizations/${org2.slug}/sentry-app-installations/`,
         body: [],
       });
@@ -163,7 +163,7 @@ describe('SentryAppExternalInstallation', () => {
       expect(wrapper.state('selectedOrgSlug')).toBe(org2.slug);
       expect(wrapper.state('organization')).toBe(org2);
       expect(getOrgMock).toHaveBeenCalled();
-      expect(getInstalltionsMock).toHaveBeenCalled();
+      expect(getInstallationsMock).toHaveBeenCalled();
       expect(getFeaturesMock).toHaveBeenCalled();
     });
   });
diff --git a/tests/sentry/eventstream/kafka/test_consumer.py b/tests/sentry/eventstream/kafka/test_consumer.py
index 237e651fca..31234feed1 100644
--- a/tests/sentry/eventstream/kafka/test_consumer.py
+++ b/tests/sentry/eventstream/kafka/test_consumer.py
@@ -501,16 +501,16 @@ def consume_until_constraints_met(consumer, constraints, iterations, timeout=1):
         )
 
 
-def collect_messages_recieved(count):
+def collect_messages_received(count):
     messages = []
 
-    def messages_recieved_constraint(message):
+    def messages_received_constraint(message):
         if message is not None:
             messages.append(message)
             if len(messages) == count:
                 return True
 
-    return messages_recieved_constraint
+    return messages_received_constraint
 
 
 @pytest.mark.xfail(
@@ -571,7 +571,7 @@ def test_consumer_rebalance_from_uncommitted_offset(requires_kafka):
 
         consume_until_constraints_met(
             consumer_a,
-            [lambda message: assignments_received[consumer_a], collect_messages_recieved(4)],
+            [lambda message: assignments_received[consumer_a], collect_messages_received(4)],
             10,
         )
 
@@ -604,7 +604,7 @@ def test_consumer_rebalance_from_uncommitted_offset(requires_kafka):
 
         consume_until_constraints_met(
             consumer_b,
-            [lambda message: assignments_received[consumer_b], collect_messages_recieved(2)],
+            [lambda message: assignments_received[consumer_b], collect_messages_received(2)],
             10,
         )
 
diff --git a/tests/sentry/integrations/vsts/test_provider.py b/tests/sentry/integrations/vsts/test_provider.py
index 5f6a5e39cc..17fd567c22 100644
--- a/tests/sentry/integrations/vsts/test_provider.py
+++ b/tests/sentry/integrations/vsts/test_provider.py
@@ -140,7 +140,7 @@ class TestAccountConfigView(TestCase):
     @responses.activate
     @patch("sentry.integrations.vsts.integration.get_user_info")
     @patch("sentry.integrations.vsts.integration.render_to_response")
-    def test_no_accounts_recieved(self, mock_render_to_response, mock_get_user_info):
+    def test_no_accounts_received(self, mock_render_to_response, mock_get_user_info):
         responses.reset()
         responses.add(
             responses.GET,
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 61d146de35..62da12b42d 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -2180,7 +2180,7 @@ class GetFacetsTest(SnubaTestCase, TestCase):
         projects = [f for f in result if f.key == "project"]
         assert [p.count for p in projects] == [1, 1]
 
-    def test_enviroment_promoted_tag(self):
+    def test_environment_promoted_tag(self):
         for env in ("prod", "staging", None):
             self.store_event(
                 data={
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index 956a6ccb19..754591cfbb 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -41,7 +41,7 @@ class EventsSnubaSearchTest(TestCase, SnubaTestCase):
             data={
                 "fingerprint": ["put-me-in-group1"],
                 "event_id": "a" * 32,
-                "message": "foo. Also,this message is intended to be greater than 256 characters so that we can put some unique string identifier after that point in the string. The purpose of this is in order to verify we are using snuba to search messsages instead of Postgres (postgres truncates at 256 characters and clickhouse does not). santryrox.",
+                "message": "foo. Also, this message is intended to be greater than 256 characters so that we can put some unique string identifier after that point in the string. The purpose of this is in order to verify we are using snuba to search messages instead of Postgres (postgres truncates at 256 characters and clickhouse does not). santryrox.",
                 "environment": "production",
                 "tags": {"server": "example.com"},
                 "timestamp": event1_timestamp,
diff --git a/webpack.config.js b/webpack.config.js
index e853890b07..ba5d3d8557 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -43,7 +43,7 @@ const FORCE_WEBPACK_DEV_SERVER = !!env.FORCE_WEBPACK_DEV_SERVER;
 const HAS_WEBPACK_DEV_SERVER_CONFIG = SENTRY_BACKEND_PORT && SENTRY_WEBPACK_PROXY_PORT;
 
 /**
- * User/tooling configurable enviroment variables
+ * User/tooling configurable environment variables
  */
 const NO_DEV_SERVER = !!env.NO_DEV_SERVER; // Do not run webpack dev server
 const TS_FORK_WITH_ESLINT = !!env.TS_FORK_WITH_ESLINT; // Do not run eslint with fork-ts plugin
