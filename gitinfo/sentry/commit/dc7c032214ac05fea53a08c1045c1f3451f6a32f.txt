commit dc7c032214ac05fea53a08c1045c1f3451f6a32f
Author: Mark Story <mark@sentry.io>
Date:   Tue Nov 19 16:03:39 2019 -0500

    ref(discover) Remove DiscoverSavedQuery store (#15643)
    
    We no longer have the need to link a menu item and page together with
    reflux. Additionally we're planning on adding pagination to saved
    queries which further complicates the reflux store.

diff --git a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
index b729f87b75..9cd1a0c232 100644
--- a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
@@ -1,13 +1,10 @@
 import {Client} from 'app/api';
 
-import {SavedQuery, NewQuery} from 'app/stores/discoverSavedQueriesStore';
-import DiscoverSavedQueryActions from 'app/actions/discoverSavedQueryActions';
+import {SavedQuery, NewQuery} from 'app/types';
 import {t} from 'app/locale';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 
 export function fetchSavedQueries(api: Client, orgId: string): Promise<SavedQuery[]> {
-  DiscoverSavedQueryActions.startFetchSavedQueries();
-
   const promise: Promise<SavedQuery[]> = api.requestPromise(
     `/organizations/${orgId}/discover/saved/`,
     {
@@ -16,16 +13,9 @@ export function fetchSavedQueries(api: Client, orgId: string): Promise<SavedQuer
     }
   );
 
-  DiscoverSavedQueryActions.startFetchSavedQueries();
-
-  promise
-    .then(resp => {
-      DiscoverSavedQueryActions.fetchSavedQueriesSuccess(resp);
-    })
-    .catch(() => {
-      DiscoverSavedQueryActions.fetchSavedQueriesError();
-      addErrorMessage(t('Unable to load saved queries'));
-    });
+  promise.catch(() => {
+    addErrorMessage(t('Unable to load saved queries'));
+  });
   return promise;
 }
 
@@ -42,15 +32,9 @@ export function createSavedQuery(
     }
   );
 
-  DiscoverSavedQueryActions.startFetchSavedQueries();
-
-  promise
-    .then(resp => {
-      DiscoverSavedQueryActions.createSavedQuerySuccess(resp);
-    })
-    .catch(() => {
-      addErrorMessage(t('Unable to create your saved query'));
-    });
+  promise.catch(() => {
+    addErrorMessage(t('Unable to create your saved query'));
+  });
   return promise;
 }
 
@@ -67,15 +51,9 @@ export function updateSavedQuery(
     }
   );
 
-  DiscoverSavedQueryActions.startFetchSavedQueries();
-
-  promise
-    .then(resp => {
-      DiscoverSavedQueryActions.updateSavedQuerySuccess(resp);
-    })
-    .catch(() => {
-      addErrorMessage(t('Unable to update your saved query'));
-    });
+  promise.catch(() => {
+    addErrorMessage(t('Unable to update your saved query'));
+  });
   return promise;
 }
 
@@ -89,14 +67,8 @@ export function deleteSavedQuery(
     {method: 'DELETE'}
   );
 
-  DiscoverSavedQueryActions.startFetchSavedQueries();
-
-  promise
-    .then(() => {
-      DiscoverSavedQueryActions.deleteSavedQuerySuccess(queryId);
-    })
-    .catch(() => {
-      addErrorMessage(t('Unable to delete the saved query'));
-    });
+  promise.catch(() => {
+    addErrorMessage(t('Unable to delete the saved query'));
+  });
   return promise;
 }
diff --git a/src/sentry/static/sentry/app/actions/discoverSavedQueryActions.tsx b/src/sentry/static/sentry/app/actions/discoverSavedQueryActions.tsx
deleted file mode 100644
index 358b6102ef..0000000000
--- a/src/sentry/static/sentry/app/actions/discoverSavedQueryActions.tsx
+++ /dev/null
@@ -1,11 +0,0 @@
-import Reflux from 'reflux';
-
-export default Reflux.createActions([
-  'resetSavedQueries',
-  'startFetchSavedQueries',
-  'fetchSavedQueriesSuccess',
-  'fetchSavedQueriesError',
-  'createSavedQuerySuccess',
-  'deleteSavedQuerySuccess',
-  'updateSavedQuerySuccess',
-]);
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index a4400e2804..e1f05c9266 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -224,7 +224,7 @@ export default class AsyncComponent<
 
   remountComponent = () => {
     if (this.shouldReload) {
-      this.setState({reloading: true}, this.fetchData);
+      this.reloadData();
     } else {
       this.setState(this.getDefaultState(), this.fetchData);
     }
diff --git a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
deleted file mode 100644
index 229e9631cf..0000000000
--- a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
+++ /dev/null
@@ -1,141 +0,0 @@
-import Reflux from 'reflux';
-import DiscoverSavedQueryActions from 'app/actions/discoverSavedQueryActions';
-
-type Versions = 1 | 2;
-
-export type NewQuery = {
-  id: string | undefined;
-  version: Versions;
-  name: string;
-  projects: Readonly<number[]>;
-  fields: Readonly<string[]>;
-  fieldnames: Readonly<string[]>;
-  query: string;
-  orderby?: string;
-  range?: string;
-  start?: string;
-  end?: string;
-  environment?: Readonly<string[]>;
-  tags?: Readonly<string[]>;
-  yAxis?: string;
-};
-
-export type SavedQuery = NewQuery & {
-  id: string;
-  dateCreated: string;
-  dateUpdated: string;
-  createdBy?: string;
-};
-
-export type SavedQueryState = {
-  savedQueries: SavedQuery[];
-  hasError: boolean;
-  isLoading: boolean;
-};
-
-const DiscoverSavedQueriesStore = Reflux.createStore({
-  init() {
-    const {
-      resetSavedQueries,
-      startFetchSavedQueries,
-      fetchSavedQueriesSuccess,
-      fetchSavedQueriesError,
-      createSavedQuerySuccess,
-      deleteSavedQuerySuccess,
-      updateSavedQuerySuccess,
-    } = DiscoverSavedQueryActions;
-
-    this.listenTo(resetSavedQueries, this.onReset);
-    this.listenTo(startFetchSavedQueries, this.onStartFetchSavedQueries);
-    this.listenTo(fetchSavedQueriesSuccess, this.fetchSavedQueriesSuccess);
-    this.listenTo(fetchSavedQueriesError, this.fetchSavedQueriesError);
-    this.listenTo(createSavedQuerySuccess, this.createSavedQuerySuccess);
-    this.listenTo(updateSavedQuerySuccess, this.updateSavedQuerySuccess);
-    this.listenTo(deleteSavedQuerySuccess, this.deleteSavedQuerySuccess);
-
-    this.reset();
-  },
-  get(): SavedQueryState {
-    return this.state;
-  },
-
-  reset(): void {
-    this.state = {
-      savedQueries: [],
-      hasError: false,
-      isLoading: true,
-    } as SavedQueryState;
-  },
-
-  onReset(): void {
-    this.reset();
-    this.trigger(this.state);
-  },
-
-  onStartFetchSavedQueries(): void {
-    this.state = {
-      ...this.state,
-      isLoading: true,
-    };
-    this.trigger(this.state);
-  },
-
-  fetchSavedQueriesSuccess(data: SavedQuery[]): void {
-    this.state = {
-      ...this.state,
-      savedQueries: data,
-      isLoading: false,
-      hasError: false,
-    };
-    this.trigger(this.state);
-  },
-
-  fetchSavedQueriesError(): void {
-    this.state = {
-      ...this.state,
-      savedQueries: [],
-      isLoading: false,
-      hasError: true,
-    };
-    this.trigger(this.state);
-  },
-
-  createSavedQuerySuccess(query): void {
-    this.state = {
-      ...this.state,
-      savedQueries: [...this.state.savedQueries, query],
-      isLoading: false,
-    };
-    this.trigger(this.state);
-  },
-
-  updateSavedQuerySuccess(query): void {
-    let savedQueries;
-    const index = this.state.savedQueries.findIndex(item => item.id === query.id);
-    if (index > -1) {
-      savedQueries = [...this.state.savedQueries];
-      savedQueries.splice(index, 1, query);
-    } else {
-      savedQueries = [...this.state.savedQueries, query];
-    }
-    this.state = {
-      ...this.state,
-      savedQueries,
-      isLoading: false,
-    };
-    this.trigger(this.state);
-  },
-
-  deleteSavedQuerySuccess(id): void {
-    const savedQueries = [...this.state.savedQueries.filter(query => query.id !== id)];
-    this.state = {
-      ...this.state,
-      savedQueries,
-      isLoading: false,
-    };
-    this.trigger(this.state);
-  },
-});
-
-// TODO(ts): This should be properly typed
-export default DiscoverSavedQueriesStore as any;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 771a0c307d..8a87448f91 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -589,3 +589,35 @@ export type ActiveExperiments = {
   ImprovedInvitesExperiment: 'none' | 'all' | 'join_request' | 'invite_request';
   TrialUpgradeV2Experiment: 'upgrade' | 'trial' | -1;
 };
+
+type SavedQueryVersions = 1 | 2;
+
+export type NewQuery = {
+  id: string | undefined;
+  version: SavedQueryVersions;
+  name: string;
+  projects: Readonly<number[]>;
+  fields: Readonly<string[]>;
+  fieldnames: Readonly<string[]>;
+  query: string;
+  orderby?: string;
+  range?: string;
+  start?: string;
+  end?: string;
+  environment?: Readonly<string[]>;
+  tags?: Readonly<string[]>;
+  yAxis?: string;
+};
+
+export type SavedQuery = NewQuery & {
+  id: string;
+  dateCreated: string;
+  dateUpdated: string;
+  createdBy?: string;
+};
+
+export type SavedQueryState = {
+  savedQueries: SavedQuery[];
+  hasError: boolean;
+  isLoading: boolean;
+};
diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index 0386d79c6f..d76f9eebb3 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -4,8 +4,7 @@ import isObject from 'lodash/isObject';
 import isString from 'lodash/isString';
 import isUndefined from 'lodash/isUndefined';
 
-import {NewQuery} from 'app/stores/discoverSavedQueriesStore';
-import {Project} from 'app/types/index';
+import {NewQuery, Project} from 'app/types';
 import {appendTagCondition} from 'app/utils/queryString';
 
 function arrayIsEqual(arr?: any[], other?: any[], deep?: boolean): boolean {
diff --git a/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx b/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
deleted file mode 100644
index e0d1822ea7..0000000000
--- a/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
+++ /dev/null
@@ -1,70 +0,0 @@
-import React from 'react';
-import Reflux from 'reflux';
-import createReactClass from 'create-react-class';
-
-import DiscoverSavedQueriesStore, {
-  SavedQuery,
-} from 'app/stores/discoverSavedQueriesStore';
-import getDisplayName from 'app/utils/getDisplayName';
-
-type InjectedDiscoverSavedQueriesProps = {
-  savedQueries: SavedQuery[];
-  savedQueriesLoading: boolean;
-};
-
-type State = {
-  savedQueries: SavedQuery[];
-  savedQueriesLoading: boolean;
-};
-
-/**
- * Higher order component that uses DiscoverSavedQueryStor and provides the
- * saved queries for the current organization
- */
-const withDiscoverSavedQueries = <P extends InjectedDiscoverSavedQueriesProps>(
-  WrappedComponent: React.ComponentType<P>
-) =>
-  createReactClass<
-    Omit<P, keyof InjectedDiscoverSavedQueriesProps> &
-      Partial<InjectedDiscoverSavedQueriesProps>,
-    State
-  >({
-    displayName: `withDiscoverSavedQuery(${getDisplayName(WrappedComponent)})`,
-    mixins: [Reflux.listenTo(DiscoverSavedQueriesStore, 'onUpdate') as any],
-
-    getInitialState() {
-      const {savedQueries, isLoading} = DiscoverSavedQueriesStore.get();
-
-      return {
-        savedQueries,
-        savedQueriesLoading: isLoading,
-      };
-    },
-
-    componentDidMount() {
-      this.updateQueries();
-    },
-
-    onUpdate() {
-      this.updateQueries();
-    },
-
-    updateQueries() {
-      const {savedQueries, isLoading} = DiscoverSavedQueriesStore.get();
-
-      const queries = savedQueries.filter((item: SavedQuery) => item.version === 2);
-      this.setState({savedQueries: queries, savedQueriesLoading: isLoading});
-    },
-
-    render() {
-      return (
-        <WrappedComponent
-          savedQueries={this.state.savedQueries}
-          savedQueriesLoading={this.state.savedQueriesLoading}
-          {...this.props as P}
-        />
-      );
-    },
-  });
-
-export default withDiscoverSavedQueries;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 97fdaa5a61..2562e3647b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -11,9 +11,8 @@ import UserBadge from 'app/components/idBadge/userBadge';
 import getDynamicText from 'app/utils/getDynamicText';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import pinIcon from 'app/../images/location-pin.png';
-import {Organization} from 'app/types';
+import {Organization, NewQuery} from 'app/types';
 import Duration from 'app/components/duration';
-import {NewQuery} from 'app/stores/discoverSavedQueriesStore';
 
 import {QueryLink} from './styles';
 import {generateEventDetailsRoute, generateEventSlug} from './eventDetails/utils';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
index 8f524325d3..bfdab4c34b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
@@ -3,12 +3,10 @@ import {browserHistory} from 'react-router';
 
 import {Client} from 'app/api';
 import {t} from 'app/locale';
-import {Organization} from 'app/types';
+import {Organization, SavedQuery} from 'app/types';
 import withApi from 'app/utils/withApi';
-import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
-import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
 
 import InlineInput from 'app/components/inputInline';
 import {handleUpdateQueryName} from './savedQuery/utils';
@@ -20,7 +18,7 @@ type Props = {
   organization: Organization;
   eventView: EventView;
   savedQueries: SavedQuery[];
-  savedQueriesLoading: boolean;
+  onQuerySave: () => void;
 };
 
 const NAME_DEFAULT = t('Untitled query');
@@ -65,8 +63,8 @@ class EventInputName extends React.Component<Props> {
 
     handleUpdateQueryName(api, organization, nextEventView).then(
       (updatedQuery: SavedQuery) => {
+        this.props.onQuerySave();
         const view = EventView.fromSavedQuery(updatedQuery);
-        // May have to delay this for the store to update.
         browserHistory.push({
           pathname: location.pathname,
           query: view.generateQueryStringObject(),
@@ -90,4 +88,4 @@ class EventInputName extends React.Component<Props> {
   }
 }
 
-export default withApi(withDiscoverSavedQueries(EventInputName));
+export default withApi(EventInputName);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 53928ecf6c..983f32a995 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -7,7 +7,7 @@ import moment from 'moment';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
 import {SavedQuery as LegacySavedQuery} from 'app/views/discover/types';
-import {SavedQuery, NewQuery} from 'app/stores/discoverSavedQueriesStore';
+import {SavedQuery, NewQuery} from 'app/types';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 
 import {AUTOLINK_FIELDS, SPECIAL_FIELDS, FIELD_FORMATTERS} from './data';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 85d089777b..ebfde0a754 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -8,9 +8,9 @@ import {Location} from 'history';
 import {t} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import SentryTypes from 'app/sentryTypes';
-import {Organization} from 'app/types';
+import {Organization, SavedQuery} from 'app/types';
 import localStorage from 'app/utils/localStorage';
-import withOrganization from 'app/utils/withOrganization';
+import AsyncComponent from 'app/components/asyncComponent';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import Banner from 'app/components/banner';
@@ -21,6 +21,7 @@ import NoProjectMessage from 'app/components/noProjectMessage';
 
 import {PageContent, PageHeader} from 'app/styles/organization';
 import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
 
 import Events from './events';
 import SavedQueryButtonGroup from './savedQuery';
@@ -43,9 +44,13 @@ type Props = {
   location: Location;
   router: ReactRouter.InjectedRouter;
   params: Params;
-};
+} & AsyncComponent['props'];
+
+type State = {
+  savedQueries: SavedQuery[];
+} & AsyncComponent['state'];
 
-class DiscoverLanding extends React.Component<Props> {
+class DiscoverLanding extends AsyncComponent<Props, State> {
   static propTypes: any = {
     organization: SentryTypes.Organization.isRequired,
     location: PropTypes.object.isRequired,
@@ -53,9 +58,27 @@ class DiscoverLanding extends React.Component<Props> {
   };
 
   state = {
+    loading: true,
+    reloading: false,
+    error: false,
+    errors: [],
     isBannerHidden: checkIsBannerHidden(),
+    savedQueries: [],
   };
 
+  shouldReload = true;
+
+  getEndpoints(): [string, string, any][] {
+    const {organization} = this.props;
+    return [
+      [
+        'savedQueries',
+        `/organizations/${organization.slug}/discover/saved/`,
+        {query: {query: 'version:2'}},
+      ],
+    ];
+  }
+
   componentDidUpdate() {
     const isBannerHidden = checkIsBannerHidden();
     if (isBannerHidden !== this.state.isBannerHidden) {
@@ -77,6 +100,12 @@ class DiscoverLanding extends React.Component<Props> {
     this.setState({isBannerHidden: true});
   };
 
+  // When a query is saved we need to re-fetch the
+  // saved query list as we don't use a reflux store.
+  handleQuerySave = () => {
+    this.fetchData({reloading: true});
+  };
+
   renderBanner() {
     const bannerDismissed = this.state.isBannerHidden;
 
@@ -127,12 +156,17 @@ class DiscoverLanding extends React.Component<Props> {
 
   renderNewQuery() {
     const {location, organization} = this.props;
+    const {savedQueries} = this.state;
 
     return (
       <div>
         {this.renderBanner()}
         {DISPLAY_SEARCH_BAR_FLAG && this.renderActions()}
-        <QueryList location={location} organization={organization} />
+        <QueryList
+          savedQueries={savedQueries}
+          location={location}
+          organization={organization}
+        />
       </div>
     );
   }
@@ -143,20 +177,64 @@ class DiscoverLanding extends React.Component<Props> {
     }
 
     const {organization} = this.props;
+    const {savedQueries} = this.state;
 
     return (
       <div>
-        <EventInputName organization={organization} eventView={eventView} />
+        <EventInputName
+          savedQueries={savedQueries}
+          organization={organization}
+          eventView={eventView}
+          onQuerySave={this.handleQuerySave}
+        />
       </div>
     );
   };
 
-  render() {
+  renderBody() {
     const {organization, location, router} = this.props;
     const eventView = EventView.fromLocation(location);
+    const {savedQueries, reloading} = this.state;
 
     const hasQuery = eventView.isValid();
 
+    return (
+      <React.Fragment>
+        <PageHeader>
+          <DiscoverBreadcrumb
+            eventView={eventView}
+            organization={organization}
+            location={location}
+          />
+          {hasQuery && (
+            <SavedQueryButtonGroup
+              location={location}
+              organization={organization}
+              eventView={eventView}
+              savedQueries={savedQueries}
+              savedQueriesLoading={reloading}
+              onQuerySave={this.handleQuerySave}
+            />
+          )}
+        </PageHeader>
+        {this.renderQueryRename(hasQuery, eventView)}
+        {!hasQuery && this.renderNewQuery()}
+        {hasQuery && (
+          <Events
+            organization={organization}
+            location={location}
+            router={router}
+            eventView={eventView}
+          />
+        )}
+      </React.Fragment>
+    );
+  }
+
+  render() {
+    const {organization, location} = this.props;
+    const eventView = EventView.fromLocation(location);
+
     return (
       <Feature features={['events-v2']} organization={organization} renderDisabled>
         <SentryDocumentTitle
@@ -167,30 +245,7 @@ class DiscoverLanding extends React.Component<Props> {
             <GlobalSelectionHeader organization={organization} />
             <PageContent>
               <NoProjectMessage organization={organization}>
-                <PageHeader>
-                  <DiscoverBreadcrumb
-                    eventView={eventView}
-                    organization={organization}
-                    location={location}
-                  />
-                  {hasQuery && (
-                    <SavedQueryButtonGroup
-                      location={location}
-                      organization={organization}
-                      eventView={eventView}
-                    />
-                  )}
-                </PageHeader>
-                {this.renderQueryRename(hasQuery, eventView)}
-                {!hasQuery && this.renderNewQuery()}
-                {hasQuery && (
-                  <Events
-                    organization={organization}
-                    location={location}
-                    router={router}
-                    eventView={eventView}
-                  />
-                )}
+                {super.render()}
               </NoProjectMessage>
             </PageContent>
           </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index f7abd9ff31..211f6fa324 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -1,4 +1,4 @@
-import React from 'react';
+import React, {MouseEvent} from 'react';
 import {Location} from 'history';
 import styled from 'react-emotion';
 import classNames from 'classnames';
@@ -6,17 +6,15 @@ import {browserHistory} from 'react-router';
 
 import {t} from 'app/locale';
 import space from 'app/styles/space';
-import {Organization} from 'app/types';
+import {Organization, SavedQuery} from 'app/types';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import theme from 'app/utils/theme';
-import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
-import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
-import withApi from 'app/utils/withApi';
+
 import {Client} from 'app/api';
-import {fetchSavedQueries} from 'app/actionCreators/discoverSavedQueries';
 import InlineSvg from 'app/components/inlineSvg';
 import DropdownMenu from 'app/components/dropdownMenu';
 import MenuItem from 'app/components/menuItem';
+import withApi from 'app/utils/withApi';
 
 import EventView from './eventView';
 import {ALL_VIEWS, TRANSACTION_VIEWS} from './data';
@@ -29,15 +27,9 @@ type Props = {
   organization: Organization;
   location: Location;
   savedQueries: SavedQuery[];
-  savedQueriesLoading: boolean;
 };
 
 class QueryList extends React.Component<Props> {
-  componentDidMount() {
-    const {api, organization} = this.props;
-    fetchSavedQueries(api, organization.slug);
-  }
-
   handleDeleteQuery = (eventView: EventView) => (event: React.MouseEvent<Element>) => {
     event.preventDefault();
 
@@ -231,7 +223,7 @@ class ContextMenu extends React.Component {
             >
               <ContextMenuButton
                 {...getActorProps({
-                  onClick: event => {
+                  onClick: (event: MouseEvent) => {
                     event.stopPropagation();
                     event.preventDefault();
                   },
@@ -264,4 +256,4 @@ const ContextMenuButton = styled('div')`
   }
 `;
 
-export default withApi(withDiscoverSavedQueries(QueryList));
+export default withApi(QueryList);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index ef5d2d5403..897bcf08e3 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -5,11 +5,8 @@ import {Location} from 'history';
 
 import {Client} from 'app/api';
 import {t} from 'app/locale';
-import {Organization} from 'app/types';
+import {Organization, SavedQuery} from 'app/types';
 import withApi from 'app/utils/withApi';
-import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
-
-import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
 
 import Button from 'app/components/button';
 import DropdownButton from 'app/components/dropdownButton';
@@ -36,7 +33,9 @@ type Props = {
   eventView: EventView;
   savedQueries: SavedQuery[];
   savedQueriesLoading: boolean;
+  onQuerySave: () => void;
 };
+
 type State = {
   isNewQuery: boolean;
   isEditingQuery: boolean;
@@ -117,6 +116,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     const target = event.target as HTMLInputElement;
     this.setState({queryName: target.value});
   };
+
   onChangeInput = (event: React.FormEvent<HTMLInputElement>) => {
     const target = event.target as HTMLInputElement;
     this.setState({queryName: target.value});
@@ -148,11 +148,12 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
       (savedQuery: any) => {
         const view = EventView.fromSavedQuery(savedQuery);
 
+        this.props.onQuerySave();
+        this.setState({queryName: ''});
         browserHistory.push({
           pathname: location.pathname,
           query: view.generateQueryStringObject(),
         });
-        this.setState({queryName: ''});
       }
     );
   };
@@ -164,6 +165,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     const {api, organization, eventView} = this.props;
 
     handleUpdateQuery(api, organization, eventView).then(() => {
+      this.props.onQuerySave();
       this.setState({queryName: ''});
     });
   };
@@ -175,6 +177,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     const {api, location, organization, eventView} = this.props;
 
     handleDeleteQuery(api, organization, eventView).then(() => {
+      this.props.onQuerySave();
       browserHistory.push({
         pathname: location.pathname,
         query: {},
@@ -335,4 +338,4 @@ const ButtonUpdateIcon = styled('div')`
   background-color: ${p => p.theme.yellow};
 `;
 
-export default withApi(withDiscoverSavedQueries(SavedQueryButtonGroup));
+export default withApi(SavedQueryButtonGroup);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
index 4bd6bffb43..384e7c7720 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
@@ -1,6 +1,6 @@
 import {Client} from 'app/api';
 import {t} from 'app/locale';
-import {Organization} from 'app/types';
+import {Organization, SavedQuery} from 'app/types';
 import {extractAnalyticsQueryFields} from 'app/utils';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 
@@ -10,7 +10,6 @@ import {
   updateSavedQuery,
 } from 'app/actionCreators/discoverSavedQueries';
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
-import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
 
 import EventView from '../eventView';
 
diff --git a/tests/js/spec/stores/discoverSavedQueriesStore.spec.jsx b/tests/js/spec/stores/discoverSavedQueriesStore.spec.jsx
deleted file mode 100644
index 0fc85b4383..0000000000
--- a/tests/js/spec/stores/discoverSavedQueriesStore.spec.jsx
+++ /dev/null
@@ -1,205 +0,0 @@
-import DiscoverSavedQueriesStore from 'app/stores/discoverSavedQueriesStore';
-import {
-  fetchSavedQueries,
-  createSavedQuery,
-  updateSavedQuery,
-  deleteSavedQuery,
-} from 'app/actionCreators/discoverSavedQueries';
-import {Client} from 'app/api';
-
-describe('DiscoverSavedQueriesStore', function() {
-  let api;
-  const now = '2019-09-03T12:13:14';
-
-  beforeAll(async function() {
-    api = new Client();
-    DiscoverSavedQueriesStore.reset();
-    await tick();
-  });
-
-  beforeEach(function() {
-    Client.addMockResponse({
-      url: '/organizations/org-1/discover/saved/',
-      body: [
-        {
-          id: '1',
-          name: 'first query',
-          fields: ['title', 'count()'],
-          dateCreated: now,
-          dateUpdated: now,
-          createdBy: '1',
-        },
-        {
-          id: '2',
-          name: 'second query',
-          fields: ['transaction', 'count()'],
-          dateCreated: now,
-          dateUpdated: now,
-          createdBy: '1',
-        },
-      ],
-    });
-  });
-
-  afterEach(async function() {
-    Client.clearMockResponses();
-    DiscoverSavedQueriesStore.reset();
-    await tick();
-  });
-
-  it('has default state', function() {
-    expect(DiscoverSavedQueriesStore.get()).toEqual({
-      hasError: false,
-      isLoading: true,
-      savedQueries: [],
-    });
-  });
-
-  it('fetching queries updates the store', async function() {
-    fetchSavedQueries(api, 'org-1');
-    await tick();
-    await tick();
-
-    const state = DiscoverSavedQueriesStore.get();
-    expect(state.isLoading).toEqual(false);
-    expect(state.hasError).toEqual(false);
-    expect(state.savedQueries).toHaveLength(2);
-  });
-
-  it('fetching queries updates the store on error', async function() {
-    Client.clearMockResponses();
-    Client.addMockResponse({
-      url: '/organizations/org-1/discover/saved/',
-      method: 'GET',
-      statusCode: 500,
-    });
-    fetchSavedQueries(api, 'org-1');
-    await tick();
-    await tick();
-
-    const state = DiscoverSavedQueriesStore.get();
-    expect(state.isLoading).toEqual(false);
-    expect(state.hasError).toEqual(true);
-    expect(state.savedQueries).toHaveLength(0);
-  });
-
-  it('updating a query updates the store', async function() {
-    Client.addMockResponse({
-      url: '/organizations/org-1/discover/saved/2/',
-      method: 'PUT',
-      body: {
-        id: '2',
-        name: 'best query',
-        fields: ['title', 'count()'],
-        dateCreated: now,
-        dateUpdated: now,
-        createdBy: '2',
-      },
-    });
-    fetchSavedQueries(api, 'org-1');
-    await tick();
-    await tick();
-
-    const query = {
-      id: '2',
-      name: 'best query',
-      fields: ['title', 'count()'],
-    };
-    updateSavedQuery(api, 'org-1', query);
-    await tick();
-    await tick();
-
-    const state = DiscoverSavedQueriesStore.get();
-    expect(state.isLoading).toEqual(false);
-    expect(state.hasError).toEqual(false);
-    expect(state.savedQueries).toHaveLength(2);
-    expect(state.savedQueries[0].name).toEqual('first query');
-    expect(state.savedQueries[1].name).toEqual('best query');
-  });
-
-  it('updating a query appends the store', async function() {
-    Client.addMockResponse({
-      url: '/organizations/org-1/discover/saved/9/',
-      method: 'PUT',
-      body: {
-        id: '9',
-        name: 'best query',
-        fields: ['title', 'count()'],
-        dateCreated: now,
-        dateUpdated: now,
-        createdBy: '2',
-      },
-    });
-    fetchSavedQueries(api, 'org-1');
-    await tick();
-    await tick();
-
-    const query = {
-      id: '9',
-      name: 'best query',
-      fields: ['title', 'count()'],
-    };
-    updateSavedQuery(api, 'org-1', query);
-    await tick();
-    await tick();
-
-    const state = DiscoverSavedQueriesStore.get();
-    expect(state.isLoading).toEqual(false);
-    expect(state.hasError).toEqual(false);
-    expect(state.savedQueries).toHaveLength(3);
-    expect(state.savedQueries[0].name).toEqual('first query');
-    expect(state.savedQueries[1].name).toEqual('second query');
-    expect(state.savedQueries[2].name).toEqual('best query');
-  });
-
-  it('creating a query updates the store', async function() {
-    Client.addMockResponse({
-      url: '/organizations/org-1/discover/saved/',
-      method: 'POST',
-      body: {
-        id: '2',
-        name: 'best query',
-        fields: ['title', 'count()'],
-        dateCreated: now,
-        dateUpdated: now,
-        createdBy: '2',
-      },
-    });
-
-    fetchSavedQueries(api, 'org-1');
-    await tick();
-
-    const query = {
-      name: 'best query',
-      fields: ['title', 'count()'],
-    };
-    createSavedQuery(api, 'org-1', query);
-    await tick();
-    await tick();
-
-    const state = DiscoverSavedQueriesStore.get();
-    expect(state.isLoading).toEqual(false);
-    expect(state.hasError).toEqual(false);
-    expect(state.savedQueries).toHaveLength(3);
-  });
-
-  it('deleting a query updates the store', async function() {
-    Client.addMockResponse({
-      url: '/organizations/org-1/discover/saved/1/',
-      method: 'DELETE',
-      statusCode: 200,
-    });
-
-    fetchSavedQueries(api, 'org-1');
-    await tick();
-
-    deleteSavedQuery(api, 'org-1', '1');
-    await tick();
-    await tick();
-
-    const state = DiscoverSavedQueriesStore.get();
-    expect(state.isLoading).toEqual(false);
-    expect(state.hasError).toEqual(false);
-    expect(state.savedQueries).toHaveLength(1);
-  });
-});
diff --git a/tests/js/spec/utils/withDiscoverSavedQueries.spec.jsx b/tests/js/spec/utils/withDiscoverSavedQueries.spec.jsx
deleted file mode 100644
index 3072d7724b..0000000000
--- a/tests/js/spec/utils/withDiscoverSavedQueries.spec.jsx
+++ /dev/null
@@ -1,57 +0,0 @@
-import React from 'react';
-import {mount} from 'sentry-test/enzyme';
-
-import DiscoverSavedQueriesStore from 'app/stores/discoverSavedQueriesStore';
-import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
-
-describe('withDiscoverSavedQueries HoC', function() {
-  beforeEach(() => {
-    DiscoverSavedQueriesStore.reset();
-  });
-
-  it('works', function() {
-    const MyComponent = () => null;
-    const Container = withDiscoverSavedQueries(MyComponent);
-    const wrapper = mount(<Container />);
-
-    expect(wrapper.find('MyComponent').prop('savedQueries')).toEqual([]);
-
-    // Insert into the store
-    const query = {
-      id: '1',
-      version: 2,
-      fields: ['title', 'count()'],
-      createdAt: new Date(),
-      updatedAt: new Date(),
-      createdBy: '1',
-    };
-    DiscoverSavedQueriesStore.fetchSavedQueriesSuccess([query]);
-
-    wrapper.update();
-    const props = wrapper.find('MyComponent').prop('savedQueries');
-    expect(props).toHaveLength(1);
-    expect(props[0].id).toBe(query.id);
-  });
-
-  it('filters out versionless queries', function() {
-    const MyComponent = () => null;
-    const Container = withDiscoverSavedQueries(MyComponent);
-    const wrapper = mount(<Container />);
-
-    expect(wrapper.find('MyComponent').prop('savedQueries')).toEqual([]);
-
-    // Insert into the store
-    const query = {
-      id: '1',
-      fields: ['title', 'count()'],
-      createdAt: new Date(),
-      updatedAt: new Date(),
-      createdBy: '1',
-    };
-    DiscoverSavedQueriesStore.fetchSavedQueriesSuccess([query]);
-
-    wrapper.update();
-    const props = wrapper.find('MyComponent').prop('savedQueries');
-    expect(props).toHaveLength(0);
-  });
-});
diff --git a/tests/js/spec/views/events/events.spec.jsx b/tests/js/spec/views/events/events.spec.jsx
index a0ebe766a3..eee3853f8b 100644
--- a/tests/js/spec/views/events/events.spec.jsx
+++ b/tests/js/spec/views/events/events.spec.jsx
@@ -255,7 +255,7 @@ describe('EventsErrors', function() {
 
       // After zooming, line chart should re-render once, but table does
       expect(chartRender).toHaveBeenCalledTimes(1);
-      expect(tableRender).toHaveBeenCalledTimes(3);
+      expect(tableRender).toHaveBeenCalledTimes(2);
 
       newParams = {
         start: '2018-11-29T00:00:00',
diff --git a/tests/js/spec/views/eventsV2/index.spec.jsx b/tests/js/spec/views/eventsV2/index.spec.jsx
index 71af8cb912..fe8ac6630a 100644
--- a/tests/js/spec/views/eventsV2/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/index.spec.jsx
@@ -73,38 +73,11 @@ describe('EventsV2', function() {
         tags: [{key: 'browser', value: 'Firefox'}],
       },
     });
-  });
-
-  it('renders a link list', function() {
-    /* TODO(leedongwei)
-    const wrapper = mountWithTheme(
-      <DiscoverLanding
-        organization={TestStubs.Organization({features, projects: [TestStubs.Project()]})}
-        location={{query: {}}}
-        router={{}}
-      />,
-      TestStubs.routerContext()
-    );
-    const content = wrapper.find('PageContent');
-    expect(content.text()).toContain('Events');
-    expect(content.find('LinkContainer').length).toBeGreaterThanOrEqual(3);
-    */
-  });
-
-  it('renders a list of events', function() {
-    /* TODO(leedongwei)
-    const wrapper = mountWithTheme(
-      <DiscoverLanding
-        organization={TestStubs.Organization({features, projects: [TestStubs.Project()]})}
-        location={{query: {...generateFields()}}}
-        router={{}}
-      />,
-      TestStubs.routerContext()
-    );
-    const content = wrapper.find('PageContent');
-    expect(content.find('Events PanelHeaderCell').length).toBeGreaterThan(0);
-    expect(content.find('Events PanelItemCell').length).toBeGreaterThan(0);
-    */
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/discover/saved/',
+      method: 'GET',
+      body: [],
+    });
   });
 
   it('handles no projects', function() {
@@ -121,68 +94,6 @@ describe('EventsV2', function() {
     expect(content.text()).toContain('You need at least one project to use this view');
   });
 
-  it('generates an active sort link based on default sort', function() {
-    /* TODO(leedongwei)
-    const wrapper = mountWithTheme(
-      <DiscoverLanding
-        organization={TestStubs.Organization({features, projects: [TestStubs.Project()]})}
-        location={{query: {...generateFields(), sort: ['-timestamp']}}}
-        router={{}}
-      />,
-      TestStubs.routerContext()
-    );
-
-    const findLink = sortKey =>
-      wrapper
-        .find('Table SortLink')
-        .find({sortKey})
-        .find('StyledLink');
-
-    const timestamp = findLink('timestamp');
-
-    // Sort should be active
-    expect(
-      timestamp
-        .find('InlineSvg')
-        .first()
-        .props().src
-    ).toEqual('icon-chevron-down');
-
-    // Sort link should reverse.
-    expect(timestamp.props().to.query).toEqual({
-      ...generateFields(),
-      sort: 'timestamp',
-    });
-
-    const userlink = findLink('user.id');
-
-    // User link should be descending.
-    expect(userlink.props().to.query).toEqual({
-      ...generateFields(),
-      sort: '-user.id',
-    });
-    */
-  });
-
-  it('generates links to modals', async function() {
-    /* TODO(leedongwei)
-    const wrapper = mountWithTheme(
-      <DiscoverLanding
-        organization={TestStubs.Organization({features, projects: [TestStubs.Project()]})}
-        location={{query: {...generateFields()}}}
-        router={{}}
-      />,
-      TestStubs.routerContext()
-    );
-
-    const link = wrapper.find(`Table Link[aria-label="${eventTitle}"]`).first();
-    expect(link.props().to.query).toEqual({
-      eventSlug: 'project-slug:deadbeef',
-      ...generateFields(),
-    });
-    */
-  });
-
   it('pagination cursor should be cleared when making a search', function() {
     const organization = TestStubs.Organization({
       features,
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index a2b03396f4..0919f85f5a 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -1,8 +1,6 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
-import SavedQueriesStore from 'app/stores/discoverSavedQueriesStore';
-
 import SavedQueryButtonGroup from 'app/views/eventsV2/savedQuery';
 import {ALL_VIEWS} from 'app/views/eventsV2/data';
 import EventView from 'app/views/eventsV2/eventView';
@@ -13,12 +11,20 @@ const SELECTOR_BUTTON_SAVED = 'ButtonSaved';
 const SELECTOR_BUTTON_UPDATE = '[data-test-id="discover2-savedquery-button-update"]';
 const SELECTOR_BUTTON_DELETE = '[data-test-id="discover2-savedquery-button-delete"]';
 
-function generateWrappedComponent(location, organization, eventView) {
+function generateWrappedComponent(
+  location,
+  organization,
+  eventView,
+  savedQueries,
+  onQuerySave
+) {
   return mountWithTheme(
     <SavedQueryButtonGroup
       location={location}
       organization={organization}
       eventView={eventView}
+      savedQueries={savedQueries}
+      onQuerySave={onQuerySave}
     />,
     TestStubs.routerContext()
   );
@@ -44,27 +50,27 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
   errorsViewModified.fields[0].title = 'Modified Field Name';
 
   const errorsSavedQuery = errorsViewSaved.toNewQuery();
-
-  SavedQueriesStore.state = {
-    isLoading: false,
-    hasError: false,
-    savedQueries: [errorsSavedQuery],
-  };
+  const savedQueries = [errorsSavedQuery];
 
   describe('building on a new query', () => {
-    let mockUtils;
-    beforeAll(() => {
-      mockUtils = jest
-        .spyOn(utils, 'handleCreateQuery')
-        .mockImplementation(() => Promise.resolve(errorsSavedQuery));
-    });
+    let onQuerySave;
+    const mockUtils = jest
+      .spyOn(utils, 'handleCreateQuery')
+      .mockImplementation(() => Promise.resolve(errorsSavedQuery));
 
-    afterEach(() => {
+    beforeEach(() => {
+      onQuerySave = jest.fn();
       mockUtils.mockClear();
     });
 
     it('renders the correct set of buttons', () => {
-      const wrapper = generateWrappedComponent(location, organization, errorsView);
+      const wrapper = generateWrappedComponent(
+        location,
+        organization,
+        errorsView,
+        savedQueries,
+        onQuerySave
+      );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
       const buttonSaved = wrapper.find(SELECTOR_BUTTON_SAVED);
@@ -77,70 +83,82 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       expect(buttonDelete.exists()).toBe(false);
     });
 
-    describe('saving the new query', () => {
-      it('accepts a well-formed query', async () => {
-        const wrapper = generateWrappedComponent(location, organization, errorsView);
+    it('saves a well-formed query', async () => {
+      const wrapper = generateWrappedComponent(
+        location,
+        organization,
+        errorsView,
+        savedQueries,
+        onQuerySave
+      );
 
-        // Click on ButtonSaveAs to open dropdown
-        const buttonSaveAs = wrapper.find('DropdownControl').first();
-        buttonSaveAs.simulate('click');
+      // Click on ButtonSaveAs to open dropdown
+      const buttonSaveAs = wrapper.find('DropdownControl').first();
+      buttonSaveAs.simulate('click');
 
-        // Fill in the Input
-        buttonSaveAs
-          .find('ButtonSaveInput')
-          .simulate('change', {target: {value: 'My New Query Name'}}); // currentTarget.value does not work
-        await tick();
+      // Fill in the Input
+      buttonSaveAs
+        .find('ButtonSaveInput')
+        .simulate('change', {target: {value: 'My New Query Name'}}); // currentTarget.value does not work
+      await tick();
 
-        // Click on Save in the Dropdown
-        buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
+      // Click on Save in the Dropdown
+      await buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
 
-        expect(mockUtils).toHaveBeenCalledWith(
-          expect.anything(), // api
-          organization,
-          expect.objectContaining({
-            ...errorsView,
-            name: 'My New Query Name',
-          }),
-          true
-        );
-      });
+      expect(mockUtils).toHaveBeenCalledWith(
+        expect.anything(), // api
+        organization,
+        expect.objectContaining({
+          ...errorsView,
+          name: 'My New Query Name',
+        }),
+        true
+      );
+      expect(onQuerySave).toHaveBeenCalled();
+    });
 
-      it('rejects if query.name is empty', async () => {
-        const wrapper = generateWrappedComponent(location, organization, errorsView);
+    it('rejects if query.name is empty', async () => {
+      const wrapper = generateWrappedComponent(
+        location,
+        organization,
+        errorsView,
+        savedQueries,
+        onQuerySave
+      );
 
-        // Click on ButtonSaveAs to open dropdown
-        const buttonSaveAs = wrapper.find('DropdownControl').first();
-        buttonSaveAs.simulate('click');
+      // Click on ButtonSaveAs to open dropdown
+      const buttonSaveAs = wrapper.find('DropdownControl').first();
+      buttonSaveAs.simulate('click');
 
-        // Do not fill in Input
-        await tick();
+      // Do not fill in Input
+      await tick();
 
-        // Click on Save in the Dropdown
-        buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
+      // Click on Save in the Dropdown
+      buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
 
-        // Check that EventView has a name
-        expect(errorsView.name).toBe('Errors');
+      // Check that EventView has a name
+      expect(errorsView.name).toBe('Errors');
 
-        /**
-         * This does not work because SavedQueryButtonGroup is wrapped by 2 HOCs
-         * and we cannot access the state of the inner component. But it should
-         * be empty because we didn't fill in Input. If it has a value, then the
-         * test will fail anyway
-         */
-        // expect(wrapper.state('queryName')).toBe('');
+      /**
+       * This does not work because SavedQueryButtonGroup is wrapped by 2 HOCs
+       * and we cannot access the state of the inner component. But it should
+       * be empty because we didn't fill in Input. If it has a value, then the
+       * test will fail anyway
+       */
+      // expect(wrapper.state('queryName')).toBe('');
 
-        expect(mockUtils).not.toHaveBeenCalled();
-      });
+      expect(mockUtils).not.toHaveBeenCalled();
     });
   });
 
   describe('viewing a saved query', () => {
-    let mockUtils;
+    let mockUtils, onQuerySave;
 
     beforeEach(() => {
       mockUtils = jest
         .spyOn(utils, 'handleDeleteQuery')
         .mockImplementation(() => Promise.resolve(errorsSavedQuery));
+      onQuerySave = jest.fn();
     });
 
     afterEach(() => {
@@ -148,7 +166,13 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
     });
 
     it('renders the correct set of buttons', () => {
-      const wrapper = generateWrappedComponent(location, organization, errorsViewSaved);
+      const wrapper = generateWrappedComponent(
+        location,
+        organization,
+        errorsViewSaved,
+        savedQueries,
+        onQuerySave
+      );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
       const buttonSaved = wrapper.find(SELECTOR_BUTTON_SAVED);
@@ -161,33 +185,37 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       expect(buttonDelete.exists()).toBe(true);
     });
 
-    it('deletes the saved query', () => {
-      const wrapper = generateWrappedComponent(location, organization, errorsViewSaved);
+    it('deletes the saved query', async () => {
+      const wrapper = generateWrappedComponent(
+        location,
+        organization,
+        errorsViewSaved,
+        savedQueries,
+        onQuerySave
+      );
 
       const buttonDelete = wrapper.find(SELECTOR_BUTTON_DELETE).first();
-      buttonDelete.simulate('click');
+      await buttonDelete.simulate('click');
 
       expect(mockUtils).toHaveBeenCalledWith(
         expect.anything(), // api
         organization,
         expect.objectContaining({id: '1'})
       );
+      expect(onQuerySave).toHaveBeenCalled();
     });
   });
 
   describe('modifying a saved query', () => {
-    let mockUtils;
+    let mockUtils, onQuerySave;
 
     it('renders the correct set of buttons', () => {
-      SavedQueriesStore.state = {
-        isLoading: false,
-        hasError: false,
-        savedQueries: [errorsViewSaved.toNewQuery()],
-      };
       const wrapper = generateWrappedComponent(
         location,
         organization,
-        errorsViewModified
+        errorsViewModified,
+        [errorsViewSaved.toNewQuery()],
+        onQuerySave
       );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
@@ -206,6 +234,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         mockUtils = jest
           .spyOn(utils, 'handleUpdateQuery')
           .mockImplementation(() => Promise.resolve(errorsSavedQuery));
+        onQuerySave = jest.fn();
       });
 
       afterEach(() => {
@@ -216,12 +245,14 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         const wrapper = generateWrappedComponent(
           location,
           organization,
-          errorsViewModified
+          errorsViewModified,
+          savedQueries,
+          onQuerySave
         );
 
         // Click on Save in the Dropdown
         const buttonUpdate = wrapper.find(SELECTOR_BUTTON_UPDATE).first();
-        buttonUpdate.simulate('click');
+        await buttonUpdate.simulate('click');
 
         expect(mockUtils).toHaveBeenCalledWith(
           expect.anything(), // api
@@ -230,6 +261,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
             ...errorsViewModified,
           })
         );
+        expect(onQuerySave).toHaveBeenCalled();
       });
     });
 
@@ -248,7 +280,9 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         const wrapper = generateWrappedComponent(
           location,
           organization,
-          errorsViewModified
+          errorsViewModified,
+          savedQueries,
+          onQuerySave
         );
 
         // Click on ButtonSaveAs to open dropdown
@@ -262,7 +296,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         await tick();
 
         // Click on Save in the Dropdown
-        buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
+        await buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
 
         expect(mockUtils).toHaveBeenCalledWith(
           expect.anything(), // api
@@ -273,6 +307,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
           }),
           false
         );
+        expect(onQuerySave).toHaveBeenCalled();
       });
     });
   });
