commit ed17fc8f2dac477ff601a3db75372152719537e5
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Nov 15 14:25:48 2018 -0800

    ref(auth): Use Feature component to gate auth providers (#10568)

diff --git a/src/sentry/api/endpoints/organization_auth_provider_details.py b/src/sentry/api/endpoints/organization_auth_provider_details.py
index 57e31ee482..5497e0fcdd 100644
--- a/src/sentry/api/endpoints/organization_auth_provider_details.py
+++ b/src/sentry/api/endpoints/organization_auth_provider_details.py
@@ -1,16 +1,12 @@
 from __future__ import absolute_import
 
-from django.utils.translation import ugettext_lazy as _
 from rest_framework import status
 from rest_framework.response import Response
 
-from sentry import features
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationAuthProviderPermission
 from sentry.api.serializers import serialize
 from sentry.models import AuthProvider
 
-ERR_NO_SSO = _('The SSO feature is not enabled for this organization.')
-
 
 class OrganizationAuthProviderDetailsEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationAuthProviderPermission, )
@@ -24,9 +20,6 @@ class OrganizationAuthProviderDetailsEndpoint(OrganizationEndpoint):
         :pparam string organization_slug: the organization short name
         :auth: required
         """
-        if not features.has('organizations:sso-basic', organization, actor=request.user):
-            return Response(ERR_NO_SSO, status=status.HTTP_403_FORBIDDEN)
-
         try:
             auth_provider = AuthProvider.objects.get(
                 organization=organization,
diff --git a/src/sentry/api/endpoints/organization_auth_providers.py b/src/sentry/api/endpoints/organization_auth_providers.py
index c9e95f9583..37c285967b 100644
--- a/src/sentry/api/endpoints/organization_auth_providers.py
+++ b/src/sentry/api/endpoints/organization_auth_providers.py
@@ -2,9 +2,8 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import features
 from sentry.auth import manager
-from sentry.auth.providers.saml2 import SAML2Provider, HAS_SAML2
+from sentry.auth.providers.saml2 import SAML2Provider
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationAdminPermission
 from sentry.api.serializers import serialize
 
@@ -22,14 +21,11 @@ class OrganizationAuthProvidersEndpoint(OrganizationEndpoint):
         """
         provider_list = []
         for k, v in manager:
-            is_saml = issubclass(v, SAML2Provider)
-            if is_saml and not HAS_SAML2:
-                continue
-
-            feature = v.required_feature
-            if feature and not features.has(feature, organization, actor=request.user):
-                continue
-
-            provider_list.append((k, v.name, is_saml))
+            provider_list.append({
+                'key': k,
+                'name': v.name,
+                'requiredFeature': v.required_feature,
+                'disables2FA': issubclass(v, SAML2Provider),
+            })
 
         return Response(serialize(provider_list, request.user))
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 0864c76c34..1e4539fd5b 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -300,6 +300,13 @@ export const PluginsStore = PropTypes.shape({
   pageLinks: PropTypes.any,
 });
 
+export const AuthProvider = PropTypes.shape({
+  key: PropTypes.string,
+  name: PropTypes.string,
+  requiredFeature: PropTypes.string,
+  disables2FA: PropTypes.bool,
+});
+
 export const ProjectDsn = {
   secret: PropTypes.string,
   minidump: PropTypes.string,
@@ -835,6 +842,7 @@ let SentryTypes = {
     id: PropTypes.string.isRequired,
   }),
   Actor,
+  AuthProvider,
   Config,
   Deploy,
   DiscoverSavedQuery,
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 4131bb56c2..90dd95c6f0 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -44,6 +44,9 @@ const validHookNames = new Set([
   'feature-disabled:data-forwarding',
   'feature-disabled:custom-inbound-filters',
   'feature-disabled:rate-limits',
+  'feature-disabled:sso-basic',
+  'feature-disabled:sso-rippling',
+  'feature-disabled:sso-saml2',
 
   // TODO(epurkhiser): These are not used anymore and should be removed
   'organization:sidebar',
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index 186a546c77..53f3bb7715 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -39,8 +39,7 @@ const organizationNavigation = [
       {
         path: `${pathPrefix}/auth/`,
         title: t('Auth'),
-        show: ({organization, access, features}) =>
-          features.has('sso-basic') && access.has('org:admin'),
+        show: ({access}) => access.has('org:admin'),
         description: t('Configure single sign-on'),
       },
       {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
index 780e6d9ac3..8833217d15 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
@@ -2,10 +2,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {CSRF_COOKIE_NAME} from 'app/constants';
+import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
+import {descopeFeatureName} from 'app/utils';
 import {t, tct} from 'app/locale';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import ExternalLink from 'app/components/externalLink';
-import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import getCookie from 'app/utils/getCookie';
@@ -18,18 +19,31 @@ class OrganizationAuthList extends React.Component {
   };
 
   static propTypes = {
-    providerList: PropTypes.array,
+    providerList: PropTypes.arrayOf(SentryTypes.AuthProvider).isRequired,
   };
 
   render() {
-    let {organization} = this.context;
-    let {providerList} = this.props;
-    let hasProviderList = providerList && !!providerList.length;
-    let samlAvailable =
-      hasProviderList &&
-      providerList.some(([providerKey, providerName, providerSaml]) => {
-        return providerSaml;
-      });
+    const {organization} = this.context;
+    const features = organization.features;
+
+    // Sort feature-flagged integrations last
+    const providerList = (this.props.providerList || []).sort((a, b) => {
+      const aEnabled = features.includes(descopeFeatureName(a.requiredFeature));
+      const bEnabled = features.includes(descopeFeatureName(b.requiredFeature));
+
+      if (aEnabled !== bEnabled) {
+        return aEnabled ? -1 : 1;
+      }
+
+      return a.requiredFeature.localeCompare(b.requiredFeature);
+    });
+
+    const warn2FADisable =
+      organization.require2FA &&
+      providerList.some(
+        ({requiredFeature, disables2FA}) =>
+          disables2FA && features.includes(descopeFeatureName(requiredFeature))
+      );
 
     return (
       <div className="sso">
@@ -47,14 +61,13 @@ class OrganizationAuthList extends React.Component {
               )}
             </PanelAlert>
 
-            {organization.require2FA &&
-              samlAvailable && (
-                <PanelAlert m={0} mb={0} type="warning">
-                  {t(
-                    'Require 2FA will be disabled if you enable SAML-based SSO (Okta, OneLogin, Auth0, etc.)'
-                  )}
-                </PanelAlert>
-              )}
+            {warn2FADisable && (
+              <PanelAlert m={0} mb={0} type="warning">
+                {t(
+                  'Require 2FA will be disabled if you enable SAML-based SSO (Okta, OneLogin, Auth0, etc.)'
+                )}
+              </PanelAlert>
+            )}
 
             <form
               action={`/organizations/${organization.slug}/auth/configure/`}
@@ -67,21 +80,15 @@ class OrganizationAuthList extends React.Component {
               />
               <input type="hidden" name="init" value="1" />
 
-              {hasProviderList &&
-                providerList.map(([providerKey, providerName]) => (
-                  <ProviderItem
-                    key={providerKey}
-                    providerKey={providerKey}
-                    providerName={providerName}
-                  />
-                ))}
+              {providerList.map(provider => (
+                <ProviderItem key={provider.key} provider={provider} />
+              ))}
+              {providerList.length === 0 && (
+                <EmptyMessage>
+                  {t('No authentication providers are available.')}
+                </EmptyMessage>
+              )}
             </form>
-
-            {!hasProviderList && (
-              <EmptyMessage style={{padding: 50, textAlign: 'center'}}>
-                {t('No authentication providers are available.')}
-              </EmptyMessage>
-            )}
           </PanelBody>
         </Panel>
       </div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuth/providerItem.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuth/providerItem.jsx
index aab21ade22..216f633b70 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuth/providerItem.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuth/providerItem.jsx
@@ -1,16 +1,20 @@
-import {Box} from 'grid-emotion';
+import {Box, Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
-import {PanelItem} from 'app/components/panels';
+import Feature from 'app/components/acl/feature';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
+import Hovercard from 'app/components/hovercard';
+import SentryTypes from 'app/sentryTypes';
+import Tag from 'app/views/settings/components/tag';
 
 export default class ProviderItem extends React.PureComponent {
   static propTypes = {
-    providerKey: PropTypes.string.isRequired,
-    providerName: PropTypes.string.isRequired,
+    provider: SentryTypes.AuthProvider.isRequired,
     onConfigure: PropTypes.func.isRequired,
   };
 
@@ -19,34 +23,55 @@ export default class ProviderItem extends React.PureComponent {
   };
 
   handleConfigure = e => {
-    if (typeof this.props.onConfigure === 'function') {
-      this.props.onConfigure(this.props.providerKey, e);
-    }
+    this.props.onConfigure(this.props.provider.key, e);
   };
 
+  renderDisabledLock = p => <LockedFeature provider={p.provider} features={p.features} />;
+
+  renderInstallButton = (provider, hasFeature) => (
+    <Button
+      type="submit"
+      name="provider"
+      size="small"
+      value={provider.key}
+      disabled={!hasFeature}
+      onClick={this.handleConfigure}
+    >
+      {t('Configure')}
+    </Button>
+  );
+
   render() {
-    let {providerKey, providerName} = this.props;
+    const {provider} = this.props;
+
     return (
-      <PanelItem align="center">
-        <ProviderLogo className={`provider-logo ${providerName.toLowerCase()}`} />
-        <Box px={2} flex={1}>
-          <ProviderName>{providerName}</ProviderName>
-          <ProviderDetails>
-            {t('Enable your organization to sign in with %s.', providerName)}
-          </ProviderDetails>
-        </Box>
-        <Box>
-          <Button
-            type="submit"
-            name="provider"
-            size="small"
-            value={providerKey}
-            onClick={this.handleConfigure}
-          >
-            {t('Configure')}
-          </Button>
-        </Box>
-      </PanelItem>
+      <Feature
+        features={[provider.requiredFeature].filter(f => f)}
+        renderDisabled={({children, ...props}) =>
+          children({...props, renderDisabled: this.renderDisabledLock})}
+      >
+        {({hasFeature, features, organization, renderDisabled, renderInstallButton}) => (
+          <PanelItem align="center">
+            <Flex flex={1}>
+              <ProviderLogo className={`provider-logo ${provider.name.toLowerCase()}`} />
+              <Box px={2} flex={1}>
+                <ProviderName>{provider.name}</ProviderName>
+                <ProviderDescription>
+                  {t('Enable your organization to sign in with %s.', provider.name)}
+                </ProviderDescription>
+              </Box>
+            </Flex>
+
+            <Box flex={1}>
+              {!hasFeature && renderDisabled({organization, provider, features})}
+            </Box>
+
+            <Box>
+              {(renderInstallButton || this.renderInstallButton)(provider, hasFeature)}
+            </Box>
+          </PanelItem>
+        )}
+      </Feature>
     );
   }
 }
@@ -63,7 +88,32 @@ const ProviderName = styled('div')`
   font-weight: bold;
 `;
 
-const ProviderDetails = styled('div')`
+const ProviderDescription = styled('div')`
   margin-top: 6px;
   font-size: 0.8em;
 `;
+
+const DisabledHovercard = styled(Hovercard)`
+  width: 350px;
+`;
+
+const LockedFeature = ({provider, features, className, ...props}) => (
+  <DisabledHovercard
+    containerClassName={className}
+    body={
+      <FeatureDisabled
+        features={features}
+        hideHelpToggle
+        message={t('%s SSO is disabled.', provider.name)}
+        featureName={t('SSO Auth')}
+      />
+    }
+  >
+    <Tag icon="icon-lock">disabled</Tag>
+  </DisabledHovercard>
+);
+
+LockedFeature.propTypes = {
+  provider: PropTypes.object.isRequired,
+  features: PropTypes.arrayOf(PropTypes.string).isRequired,
+};
diff --git a/tests/js/fixtures/authProviders.js b/tests/js/fixtures/authProviders.js
index d887a1b474..9b421ac8dc 100644
--- a/tests/js/fixtures/authProviders.js
+++ b/tests/js/fixtures/authProviders.js
@@ -1,3 +1,17 @@
 export function AuthProviders(params = []) {
-  return [['dummy', 'Dummy', false], ...params];
+  return [
+    {
+      disables2FA: false,
+      key: 'dummy',
+      name: 'Dummy',
+      requiredFeature: 'organizations:sso-basic',
+    },
+    {
+      disables2FA: true,
+      key: 'dummy',
+      name: 'Dummy',
+      requiredFeature: 'organizations:sso-saml2',
+    },
+    ...params,
+  ];
 }
diff --git a/tests/js/fixtures/authProvidersSaml.js b/tests/js/fixtures/authProvidersSaml.js
deleted file mode 100644
index 1fab164e72..0000000000
--- a/tests/js/fixtures/authProvidersSaml.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export function AuthProvidersSaml(params = []) {
-  return [['dummy', 'Dummy', true], ...params];
-}
diff --git a/tests/js/spec/views/__snapshots__/providerItem.spec.jsx.snap b/tests/js/spec/views/__snapshots__/providerItem.spec.jsx.snap
deleted file mode 100644
index 5219952fb6..0000000000
--- a/tests/js/spec/views/__snapshots__/providerItem.spec.jsx.snap
+++ /dev/null
@@ -1,35 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`ProviderItem renders 1`] = `
-<PanelItem
-  align="center"
-  p={2}
->
-  <ProviderLogo
-    className="provider-logo dummy"
-  />
-  <Box
-    flex={1}
-    px={2}
-  >
-    <ProviderName>
-      Dummy
-    </ProviderName>
-    <ProviderDetails>
-      Enable your organization to sign in with Dummy.
-    </ProviderDetails>
-  </Box>
-  <Box>
-    <Button
-      disabled={false}
-      name="provider"
-      onClick={[Function]}
-      size="small"
-      type="submit"
-      value="dummy"
-    >
-      Configure
-    </Button>
-  </Box>
-</PanelItem>
-`;
diff --git a/tests/js/spec/views/providerItem.spec.jsx b/tests/js/spec/views/providerItem.spec.jsx
index b3f42ee60b..feafe5c3ef 100644
--- a/tests/js/spec/views/providerItem.spec.jsx
+++ b/tests/js/spec/views/providerItem.spec.jsx
@@ -1,26 +1,47 @@
 import React from 'react';
-import {shallow, mount} from 'enzyme';
 
+import {descopeFeatureName} from 'app/utils';
+import {mount} from 'enzyme';
 import ProviderItem from 'app/views/settings/organizationAuth/providerItem';
 
 describe('ProviderItem', function() {
+  const provider = TestStubs.AuthProviders()[0];
+  const org = TestStubs.Organization({
+    features: [descopeFeatureName(provider.requiredFeature)],
+  });
+  const routerContext = TestStubs.routerContext([{organization: org}]);
+
   it('renders', function() {
-    let wrapper = shallow(
-      <ProviderItem providerKey="dummy" providerName="Dummy" onConfigure={() => {}} />,
-      TestStubs.routerContext()
+    let wrapper = mount(
+      <ProviderItem organization={org} provider={provider} onConfigure={() => {}} />,
+      routerContext
     );
 
-    expect(wrapper).toMatchSnapshot();
+    expect(wrapper.find('ProviderDescription').text()).toContain(
+      'Enable your organization to sign in with Dummy.'
+    );
+    expect(wrapper.find('Tag').exists()).toBe(false);
   });
 
   it('calls configure callback', function() {
     let mock = jest.fn();
     let wrapper = mount(
-      <ProviderItem providerKey="dummy" providerName="Dummy" onConfigure={mock} />,
-      TestStubs.routerContext()
+      <ProviderItem organization={org} provider={provider} onConfigure={mock} />,
+      routerContext
     );
 
     wrapper.find('Button').simulate('click');
     expect(mock).toHaveBeenCalledWith('dummy', expect.anything());
   });
+
+  it('renders a disabled Tag when disabled', function() {
+    const noFeatureRouterContext = TestStubs.routerContext();
+    let wrapper = mount(
+      <ProviderItem organization={org} provider={provider} onConfigure={() => {}} />,
+      noFeatureRouterContext
+    );
+
+    expect(wrapper.find('Tag').exists()).toBe(true);
+    expect(wrapper.find('Tag').text()).toBe('disabled');
+  });
 });
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
index f15ba811ea..906dfc81b7 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
@@ -64,8 +64,26 @@ exports[`OrganizationAuthList renders 1`] = `
         <ProviderItem
           key="dummy"
           onConfigure={[Function]}
-          providerKey="dummy"
-          providerName="Dummy"
+          provider={
+            Object {
+              "disables2FA": false,
+              "key": "dummy",
+              "name": "Dummy",
+              "requiredFeature": "organizations:sso-basic",
+            }
+          }
+        />
+        <ProviderItem
+          key="dummy"
+          onConfigure={[Function]}
+          provider={
+            Object {
+              "disables2FA": true,
+              "key": "dummy",
+              "name": "Dummy",
+              "requiredFeature": "organizations:sso-saml2",
+            }
+          }
         />
       </form>
     </PanelBody>
@@ -134,17 +152,10 @@ exports[`OrganizationAuthList renders with no providers 1`] = `
           type="hidden"
           value="1"
         />
+        <EmptyMessage>
+          No authentication providers are available.
+        </EmptyMessage>
       </form>
-      <EmptyMessage
-        style={
-          Object {
-            "padding": 50,
-            "textAlign": "center",
-          }
-        }
-      >
-        No authentication providers are available.
-      </EmptyMessage>
     </PanelBody>
   </Panel>
 </div>
diff --git a/tests/js/spec/views/settings/organizationAuthList.spec.jsx b/tests/js/spec/views/settings/organizationAuthList.spec.jsx
index ad5dadd917..f5b098ec80 100644
--- a/tests/js/spec/views/settings/organizationAuthList.spec.jsx
+++ b/tests/js/spec/views/settings/organizationAuthList.spec.jsx
@@ -28,54 +28,59 @@ describe('OrganizationAuthList', function() {
     expect(wrapper).toMatchSnapshot();
   });
 
-  it('renders require 2fa warning', function() {
-    let wrapper = shallow(
-      <OrganizationAuthList
-        orgId="org-slug"
-        onSendReminders={() => {}}
-        providerList={TestStubs.AuthProvidersSaml()}
-      />,
-      {
-        context: {
-          organization: TestStubs.Organization({require2FA: true}),
-        },
-      }
-    );
+  describe('with 2fa warning', function() {
+    const require2fa = {require2FA: true};
+    const withSAML = {features: ['sso-saml2']};
 
-    expect(wrapper.find('PanelAlert[type="warning"]')).toHaveLength(1);
-  });
+    it('renders', function() {
+      let context = TestStubs.routerContext([
+        {organization: TestStubs.Organization({...require2fa, ...withSAML})},
+      ]);
 
-  it('does not render warning without saml available', function() {
-    let wrapper = shallow(
-      <OrganizationAuthList
-        orgId="org-slug"
-        onSendReminders={() => {}}
-        providerList={TestStubs.AuthProviders()}
-      />,
-      {
-        context: {
-          organization: TestStubs.Organization({require2FA: true}),
-        },
-      }
-    );
+      let wrapper = shallow(
+        <OrganizationAuthList
+          orgId="org-slug"
+          onSendReminders={() => {}}
+          providerList={TestStubs.AuthProviders()}
+        />,
+        context
+      );
 
-    expect(wrapper.find('PanelAlert[type="warning"]')).toHaveLength(0);
-  });
+      expect(wrapper.find('PanelAlert[type="warning"]').exists()).toBe(true);
+    });
 
-  it('does not render warning without require 2fa enabled', function() {
-    let wrapper = shallow(
-      <OrganizationAuthList
-        orgId="org-slug"
-        onSendReminders={() => {}}
-        providerList={TestStubs.AuthProvidersSaml()}
-      />,
-      {
-        context: {
-          organization: TestStubs.Organization({require2FA: false}),
-        },
-      }
-    );
+    it('does not render warning without saml available', function() {
+      let context = TestStubs.routerContext([
+        {organization: TestStubs.Organization({...require2fa})},
+      ]);
+
+      let wrapper = shallow(
+        <OrganizationAuthList
+          orgId="org-slug"
+          onSendReminders={() => {}}
+          providerList={TestStubs.AuthProviders()}
+        />,
+        context
+      );
+
+      expect(wrapper.find('PanelAlert[type="warning"]').exists()).toBe(false);
+    });
+
+    it('does not render without require 2fa enabled', function() {
+      let context = TestStubs.routerContext([
+        {organization: TestStubs.Organization({...withSAML})},
+      ]);
+
+      let wrapper = shallow(
+        <OrganizationAuthList
+          orgId="org-slug"
+          onSendReminders={() => {}}
+          providerList={TestStubs.AuthProviders()}
+        />,
+        context
+      );
 
-    expect(wrapper.find('PanelAlert[type="warning"]')).toHaveLength(0);
+      expect(wrapper.find('PanelAlert[type="warning"]').exists()).toBe(false);
+    });
   });
 });
diff --git a/tests/sentry/api/endpoints/test_organization_auth_providers.py b/tests/sentry/api/endpoints/test_organization_auth_providers.py
index 15fbd0b044..b774f803e3 100644
--- a/tests/sentry/api/endpoints/test_organization_auth_providers.py
+++ b/tests/sentry/api/endpoints/test_organization_auth_providers.py
@@ -44,4 +44,4 @@ class OrganizationAuthProviders(APITestCase):
 
         assert resp.status_code == 200
 
-        assert 'dummy' in [k for k, v, s in resp.data]
+        assert resp.data[0]['key'] == 'dummy'
