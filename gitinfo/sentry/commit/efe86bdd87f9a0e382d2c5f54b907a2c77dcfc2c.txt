commit efe86bdd87f9a0e382d2c5f54b907a2c77dcfc2c
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Oct 18 11:37:32 2019 -0700

    feat(ts): Add types to HookStore (#15145)

diff --git a/src/sentry/static/sentry/app/components/acl/feature.tsx b/src/sentry/static/sentry/app/components/acl/feature.tsx
index 54b3d481ee..fe41d33ef0 100644
--- a/src/sentry/static/sentry/app/components/acl/feature.tsx
+++ b/src/sentry/static/sentry/app/components/acl/feature.tsx
@@ -2,6 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {Project, Organization, Config} from 'app/types';
+import {FeatureDisabledHooks} from 'app/types/hooks';
 import HookStore from 'app/stores/hookStore';
 import SentryTypes from 'app/sentryTypes';
 import withConfig from 'app/utils/withConfig';
@@ -17,7 +18,7 @@ type FeatureProps = {
   features: string[];
   requireAll?: boolean;
   renderDisabled?: Function | boolean;
-  hookName?: string;
+  hookName?: keyof FeatureDisabledHooks;
   children: React.ReactNode;
 };
 
@@ -66,15 +67,13 @@ class Feature extends React.Component<FeatureProps> {
     /**
      * Specify the key to use for hookstore functionality.
      *
-     * The hookstore key that will be checked is:
-     *
-     *     feature-disabled:{hookName}
+     * The hookName should be prefixed with `feature-disabled`.
      *
      * When specified, the hookstore will be checked if the feature is
      * disabled, and the first available hook will be used as the render
      * function.
      */
-    hookName: PropTypes.string,
+    hookName: PropTypes.string as any,
 
     /**
      * If children is a function then will be treated as a render prop and
@@ -164,7 +163,7 @@ class Feature extends React.Component<FeatureProps> {
     // Override the renderDisabled function with a hook store function if there
     // is one registered for the feature.
     if (hookName) {
-      const hooks: Function[] = HookStore.get(`feature-disabled:${hookName}`);
+      const hooks = HookStore.get(hookName);
 
       if (hooks.length > 0) {
         customDisabledRender = hooks[0];
diff --git a/src/sentry/static/sentry/app/components/hook.jsx b/src/sentry/static/sentry/app/components/hook.jsx
deleted file mode 100644
index 719cbee31e..0000000000
--- a/src/sentry/static/sentry/app/components/hook.jsx
+++ /dev/null
@@ -1,64 +0,0 @@
-import PropTypes from 'prop-types';
-import Reflux from 'reflux';
-import createReactClass from 'create-react-class';
-
-import HookStore from 'app/stores/hookStore';
-
-/**
- * Instead of accessing the HookStore directly, use this.
- *
- * If the hook slot needs to perform anything w/ the hooks, you can pass a
- * function as a child and you will receive an object with a `hooks` key
- *
- * Example:
- *
- *   <Hook name="my-hook">
- *     {({hooks}) => hooks.map(hook => (
- *       <Wrapper>{hook}</Wrapper>
- *     ))}
- *   </Hook>
- */
-const Hook = createReactClass({
-  displayName: 'Hook',
-  propTypes: {
-    name: PropTypes.string.isRequired,
-  },
-  mixins: [Reflux.listenTo(HookStore, 'handleHooks')],
-
-  getInitialState() {
-    const {name, ...props} = this.props;
-
-    return {
-      hooks: HookStore.get(name).map(cb => cb(props)),
-    };
-  },
-
-  handleHooks(hookName, hooks) {
-    const {name, ...props} = this.props;
-
-    // Make sure that the incoming hook update matches this component's hook name
-    if (hookName !== name) {
-      return;
-    }
-
-    this.setState(state => ({
-      hooks: hooks.map(cb => cb(props)),
-    }));
-  },
-
-  render() {
-    const {children} = this.props;
-
-    if (!this.state.hooks || !this.state.hooks.length) {
-      return null;
-    }
-
-    if (typeof children === 'function') {
-      return children({hooks: this.state.hooks});
-    }
-
-    return this.state.hooks;
-  },
-});
-
-export default Hook;
diff --git a/src/sentry/static/sentry/app/components/hook.tsx b/src/sentry/static/sentry/app/components/hook.tsx
new file mode 100644
index 0000000000..7b4a71ce6d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/hook.tsx
@@ -0,0 +1,70 @@
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import {HookName, Hooks} from 'app/types/hooks';
+import HookStore from 'app/stores/hookStore';
+
+type Props<H extends HookName> = {
+  /**
+   * The name of the hook as listed in hookstore.add(hookName, callback)
+   */
+  name: H;
+  /**
+   * If children are provided as a function to the Hook, the hooks will be
+   * passed down as a render prop.
+   */
+  children?: (opts: {hooks: Array<Hooks[H]>}) => React.ReactNode;
+} & Omit<Parameters<Hooks[H]>[0], 'name'>;
+
+/**
+ * Instead of accessing the HookStore directly, use this.
+ *
+ * If the hook slot needs to perform anything w/ the hooks, you can pass a
+ * function as a child and you will receive an object with a `hooks` key
+ *
+ * Example:
+ *
+ *   <Hook name="my-hook">
+ *     {({hooks}) => hooks.map(hook => (
+ *       <Wrapper>{hook}</Wrapper>
+ *     ))}
+ *   </Hook>
+ */
+function Hook<H extends HookName>({name, ...props}: Props<H>) {
+  const HookComponent = createReactClass({
+    displayName: `Hook(${name})`,
+    mixins: [Reflux.listenTo(HookStore, 'handleHooks') as any],
+
+    getInitialState() {
+      return {hooks: HookStore.get(name).map(cb => cb(props))};
+    },
+
+    handleHooks(hookName: HookName, hooks: Array<Hooks[H]>) {
+      // Make sure that the incoming hook update matches this component's hook name
+      if (hookName !== name) {
+        return;
+      }
+
+      this.setState({hooks: hooks.map(cb => cb(props))});
+    },
+
+    render() {
+      const {children} = props;
+
+      if (!this.state.hooks || !this.state.hooks.length) {
+        return null;
+      }
+
+      if (typeof children === 'function') {
+        return children({hooks: this.state.hooks});
+      }
+
+      return this.state.hooks;
+    },
+  });
+
+  return <HookComponent />;
+}
+
+export default Hook;
diff --git a/src/sentry/static/sentry/app/components/hookOrDefault.jsx b/src/sentry/static/sentry/app/components/hookOrDefault.jsx
deleted file mode 100644
index bf29308598..0000000000
--- a/src/sentry/static/sentry/app/components/hookOrDefault.jsx
+++ /dev/null
@@ -1,79 +0,0 @@
-import React from 'react';
-import Reflux from 'reflux';
-import createReactClass from 'create-react-class';
-
-import HookStore from 'app/stores/hookStore';
-
-/**
- * Use this instead of the usual ternery operator when using getsentry hooks. So in lieu of
- *		HookStore.get('component:org-auth-view').length
- *		 ? HookStore.get('component:org-auth-view')[0]()
- *		 : OrganizationAuth
- *
- * do this instead
- *  	HookOrDefault({hookName:'component:org-auth-view', defaultComponent: OrganizationAuth})
- *
- *
- * Note, you will need to add the hookstore function in getsentry first and then register
- * it within sentry as a validHookName
- * See: https://github.com/getsentry/getsentry/blob/master/static/getsentry/gsApp/index.jsx
- *		/app/stores/hookStore.jsx
- *
- * @param {String} name The name of the hook as listed in hookstore.add(hookName, callback)
- * @param {Component} defaultComponent Component that will be shown if no hook is available
- * @param {Function} defaultComponentPromise This is a function that returns a promise (more
- *                   specifically a function that returns the result of a dynamic import using
- *                   `import()`. This will use React.Suspense and React.lazy to render the component.
- *
- */
-
-function HookOrDefault({hookName, defaultComponent, defaultComponentPromise, params}) {
-  const HookOrDefaultComponent = createReactClass({
-    displayName: `HookOrDefaultComponent(${hookName})`,
-    mixins: [Reflux.listenTo(HookStore, 'handleHooks')],
-
-    getInitialState() {
-      return {
-        hooks: HookStore.get(hookName),
-      };
-    },
-
-    handleHooks(hookNameFromStore, hooks) {
-      // Make sure that the incoming hook update matches this component's hook name
-      if (hookName !== hookNameFromStore) {
-        return;
-      }
-
-      this.setState({
-        hooks,
-      });
-    },
-
-    getDefaultComponent() {
-      // If `defaultComponentPromise` is passed, then return a Suspended component
-      if (defaultComponentPromise) {
-        const Component = React.lazy(defaultComponentPromise);
-        return props => (
-          <React.Suspense fallback={null}>
-            <Component {...props} />
-          </React.Suspense>
-        );
-      }
-
-      return defaultComponent;
-    },
-
-    render() {
-      const hookExists = this.state.hooks && this.state.hooks.length;
-      const HookComponent =
-        hookExists && this.state.hooks[0]({params})
-          ? this.state.hooks[0]({params})
-          : this.getDefaultComponent();
-
-      return <HookComponent {...this.props} />;
-    },
-  });
-  return HookOrDefaultComponent;
-}
-
-export default HookOrDefault;
diff --git a/src/sentry/static/sentry/app/components/hookOrDefault.tsx b/src/sentry/static/sentry/app/components/hookOrDefault.tsx
new file mode 100644
index 0000000000..9145600c99
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/hookOrDefault.tsx
@@ -0,0 +1,108 @@
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import HookStore from 'app/stores/hookStore';
+
+import {Hooks, HookName} from 'app/types/hooks';
+
+type Params<H extends HookName> = {
+  /**
+   * The name of the hook as listed in hookstore.add(hookName, callback)
+   */
+  hookName: H;
+  /**
+   * Component that will be shown if no hook is available
+   */
+  defaultComponent?: ReturnType<Hooks[H]>;
+  /**
+   * This is a function that returns a promise (more specifically a function
+   * that returns the result of a dynamic import using `import()`. This will
+   * use React.Suspense and React.lazy to render the component.
+   */
+  defaultComponentPromise?: () => Promise<ReturnType<Hooks[H]>>;
+  /**
+   * Parameters to pass into the hook callback
+   */
+  params?: Parameters<Hooks[H]>;
+};
+
+type State<H extends HookName> = {
+  hooks: Array<Hooks[H]>;
+};
+
+/**
+ * Use this instead of the usual ternery operator when using getsentry hooks.
+ * So in lieu of:
+ *
+ *  HookStore.get('component:org-auth-view').length
+ *   ? HookStore.get('component:org-auth-view')[0]()
+ *   : OrganizationAuth
+ *
+ * do this instead:
+ *
+ *   const HookedOrganizationAuth = HookOrDefault({
+ *     hookName:'component:org-auth-view',
+ *     defaultComponent: OrganizationAuth,
+ *   })
+ *
+ * Note, you will need to add the hookstore function in getsentry [0] first and
+ * then register tye types [2] and validHookName [1] in sentry.
+ *
+ * [0] /getsentry/static/getsentry/gsApp/registerHooks.jsx
+ * [1] /sentry/app/stores/hookStore.tsx
+ * [2] /sentry/app/types/hooks.ts
+ */
+function HookOrDefault<H extends HookName>({
+  hookName,
+  defaultComponent,
+  defaultComponentPromise,
+  params,
+}: Params<H>) {
+  type Props = React.ComponentProps<ReturnType<Hooks[H]>>;
+
+  return createReactClass<Props, State<H>>({
+    displayName: `HookOrDefaultComponent(${hookName})`,
+    mixins: [Reflux.listenTo(HookStore, 'handleHooks') as any],
+
+    getInitialState() {
+      return {hooks: HookStore.get(hookName)};
+    },
+
+    handleHooks(hookNameFromStore: HookName, hooks: Array<Hooks[H]>) {
+      // Make sure that the incoming hook update matches this component's hook name
+      if (hookName !== hookNameFromStore) {
+        return;
+      }
+
+      this.setState({hooks});
+    },
+
+    getDefaultComponent() {
+      // If `defaultComponentPromise` is passed, then return a Suspended component
+      if (defaultComponentPromise) {
+        const Component = React.lazy(defaultComponentPromise);
+
+        return (props: Props) => (
+          <React.Suspense fallback={null}>
+            <Component {...props} />
+          </React.Suspense>
+        );
+      }
+
+      return defaultComponent;
+    },
+
+    render() {
+      const hookExists = this.state.hooks && this.state.hooks.length;
+      const HookComponent =
+        hookExists && this.state.hooks[0]({params})
+          ? this.state.hooks[0]({params})
+          : this.getDefaultComponent();
+
+      return <HookComponent {...this.props} />;
+    },
+  });
+}
+
+export default HookOrDefault;
diff --git a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
index 029560337f..d48cfdb937 100644
--- a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
@@ -20,6 +20,7 @@ import marked, {singleLineRenderer} from 'app/utils/marked';
 import space from 'app/styles/space';
 import {IntegrationDetailsModalOptions} from 'app/actionCreators/modal';
 import {Integration} from 'app/types';
+import {Hooks} from 'app/types/hooks';
 
 type Props = {
   closeModal: () => void;
@@ -29,7 +30,6 @@ type Props = {
  * In sentry.io the features list supports rendering plan details. If the hook
  * is not registered for rendering the features list like this simply show the
  * features as a normal list.
- * TODO(TS): Add typing for feature gates
  */
 const defaultFeatureGateComponents = {
   IntegrationFeatures: p =>
@@ -46,7 +46,7 @@ const defaultFeatureGateComponents = {
       ))}
     </ul>
   ),
-};
+} as ReturnType<Hooks['integrations:feature-gates']>;
 
 class IntegrationDetailsModal extends React.Component<Props> {
   static propTypes = {
@@ -189,7 +189,7 @@ class IntegrationDetailsModal extends React.Component<Props> {
   }
 }
 
-const DisabledNotice = styled(({reason, ...p}: {reason: string}) => (
+const DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (
   <Flex align="center" flex={1} {...p}>
     <InlineSvg src="icon-circle-exclamation" size="1.5em" />
     <Box ml={1}>{reason}</Box>
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
index d7a38f2946..481f47fc02 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
@@ -18,6 +18,7 @@ import Tag from 'app/views/settings/components/tag';
 import {toPermissions} from 'app/utils/consolidatedScopes';
 import CircleIndicator from 'app/components/circleIndicator';
 import {SentryAppDetailsModalOptions} from 'app/actionCreators/modal';
+import {Hooks} from 'app/types/hooks';
 
 type Props = {
   closeOnInstall?: boolean;
@@ -25,7 +26,6 @@ type Props = {
 } & SentryAppDetailsModalOptions &
   AsyncComponent['props'];
 
-//TODO(TS): Add typing for feature gates
 const defaultFeatureGateComponents = {
   IntegrationFeatures: p =>
     p.children({
@@ -41,7 +41,7 @@ const defaultFeatureGateComponents = {
       ))}
     </ul>
   ),
-};
+} as ReturnType<Hooks['integrations:feature-gates']>;
 
 export default class SentryAppDetailsModal extends AsyncComponent<Props> {
   static propTypes = {
@@ -219,7 +219,7 @@ const Author = styled(Box)`
   color: ${p => p.theme.gray2};
 `;
 
-const DisabledNotice = styled(({reason, ...p}: {reason: string}) => (
+const DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (
   <Flex align="center" flex={1} {...p}>
     <InlineSvg src="icon-circle-exclamation" size="1.5em" />
     <Box ml={1}>{reason}</Box>
diff --git a/src/sentry/static/sentry/app/components/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectSelector.jsx
index acf6f2e107..35e53f40fe 100644
--- a/src/sentry/static/sentry/app/components/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectSelector.jsx
@@ -391,7 +391,7 @@ class ProjectSelectorItem extends React.PureComponent {
           renderCheckbox={({checkbox}) => (
             <Feature
               features={['organizations:global-views']}
-              hookName="project-selector-checkbox"
+              hookName="feature-disabled:project-selector-checkbox"
               renderDisabled={renderDisabledCheckbox}
             >
               {checkbox}
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 8e69c4677d..5d653d5b79 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -265,7 +265,7 @@ class Sidebar extends React.Component {
 
                   <Feature
                     features={['events']}
-                    hookName="events-sidebar-item"
+                    hookName="feature-disabled:events-sidebar-item"
                     organization={organization}
                   >
                     <SidebarItem
@@ -358,7 +358,7 @@ class Sidebar extends React.Component {
                   </Feature>
                   <Feature
                     features={['discover']}
-                    hookName="discover-sidebar-item"
+                    hookName="feature-disabled:discover-sidebar-item"
                     organization={organization}
                   >
                     <SidebarItem
diff --git a/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx b/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
index 4e0c00fb76..8cb4083659 100644
--- a/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
@@ -54,7 +54,7 @@ export const fields = {
     help: ({organization}) => (
       <Feature
         features={['organizations:custom-symbol-sources']}
-        hookName="custom-symbol-sources"
+        hookName="feature-disabled:custom-symbol-sources"
         organization={organization}
         renderDisabled={p => (
           <FeatureDisabled
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.tsx
similarity index 72%
rename from src/sentry/static/sentry/app/stores/hookStore.jsx
rename to src/sentry/static/sentry/app/stores/hookStore.tsx
index 14e805c0b2..085705b4dd 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.tsx
@@ -2,80 +2,70 @@ import Reflux from 'reflux';
 import _ from 'lodash';
 import * as Sentry from '@sentry/browser';
 
-const validHookNames = new Set([
-  // Additional routes
-  'routes',
-  'routes:admin',
-  'routes:organization',
-  'routes:organization-root',
+import {Hooks, HookName} from 'app/types/hooks';
 
-  // Analytics and tracking hooks
-  'analytics:init-user',
-  'analytics:track-event',
-  'analytics:track-adhoc-event',
+type HookMapping = {[H in HookName]?: Array<Hooks[H]>};
 
-  // TODO(epurkhser): This is deprecated and should be replaced
+/**
+ * See types/hooks for hook usage reference.
+ */
+const validHookNames = new Set<HookName>([
+  '_',
   'analytics:event',
-
-  // Operational metrics
-  'metrics:event',
-
-  // Specific component customizations
-  'component:org-auth-view',
-  'component:org-members-view',
+  'analytics:init-user',
+  'analytics:track-adhoc-event',
+  'analytics:track-event',
   'component:header-date-range',
   'component:header-selector-items',
-
-  // Additional settings
-  'settings:organization-navigation',
-  'settings:organization-navigation-config',
-
-  // Additional interface chrome
-  'footer',
-  'organization:header',
-  'sidebar:help-menu',
-  'sidebar:organization-dropdown-menu',
-  'sidebar:bottom-items',
-  'sidebar:item-label',
-
-  // Onboarding experience
-  'onboarding:invite-members',
-  'onboarding:extra-chrome',
-
-  // Used to provide a component for integration features.
-  'integrations:feature-gates',
-
-  // feature-disabled:<feature-flag> hooks should return components that will
-  // be rendered in place for Feature components when the feature is not
-  // enabled.
+  'component:org-members-view',
   'feature-disabled:custom-inbound-filters',
-  'feature-disabled:discard-groups',
+  'feature-disabled:custom-symbol-sources',
   'feature-disabled:data-forwarding',
+  'feature-disabled:discard-groups',
+  'feature-disabled:discover-page',
+  'feature-disabled:discover-sidebar-item',
+  'feature-disabled:events-page',
+  'feature-disabled:events-sidebar-item',
+  'feature-disabled:project-selector-checkbox',
   'feature-disabled:rate-limits',
   'feature-disabled:sso-basic',
   'feature-disabled:sso-rippling',
   'feature-disabled:sso-saml2',
-  'feature-disabled:events-page',
-  'feature-disabled:events-sidebar-item',
-  'feature-disabled:discover-page',
-  'feature-disabled:discover-sidebar-item',
-  'feature-disabled:project-selector-checkbox',
-  'feature-disabled:custom-symbol-sources',
+  'footer',
+  'integrations:feature-gates',
+  'metrics:event',
+  'onboarding:extra-chrome',
+  'onboarding:invite-members',
+  'organization:header',
+  'routes',
+  'routes:admin',
+  'routes:organization',
+  'routes:organization-root',
+  'settings:organization-navigation',
+  'settings:organization-navigation-config',
+  'sidebar:bottom-items',
+  'sidebar:help-menu',
+  'sidebar:item-label',
+  'sidebar:organization-dropdown-menu',
 ]);
 
-/**
- * HookStore is used to allow extensibility into Sentry's frontend via
- * registration of 'hook functions'.
- *
- * This functionality is primarily used by the SASS sentry.io product.
- */
-const HookStore = Reflux.createStore({
+type HookStoreInterface = {
+  hooks: HookMapping;
+  add<H extends HookName>(hookName: H, callback: Hooks[H]): void;
+  remove<H extends HookName>(hookName: H, callback: Hooks[H]): void;
+  get<H extends HookName>(hookName: H): Array<Hooks[H]>;
+};
+
+const hookStoreConfig: Reflux.StoreDefinition & HookStoreInterface = {
+  hooks: {},
+
   init() {
     this.hooks = {};
   },
 
   add(hookName, callback) {
     // Gracefully error on invalid hooks, but maintain registration
+    // TODO(ts): With typescript we can rmeove this in the future
     if (!validHookNames.has(hookName)) {
       // eslint-disable-next-line no-console
       console.error('Invalid hook name: ' + hookName);
@@ -84,10 +74,12 @@ const HookStore = Reflux.createStore({
         Sentry.captureException(new Error('Invalid hook name'));
       });
     }
+
     if (_.isUndefined(this.hooks[hookName])) {
       this.hooks[hookName] = [];
     }
-    this.hooks[hookName].push(callback);
+
+    this.hooks[hookName]!.push(callback);
     this.trigger(hookName, this.hooks[hookName]);
   },
 
@@ -95,15 +87,23 @@ const HookStore = Reflux.createStore({
     if (_.isUndefined(this.hooks[hookName])) {
       return;
     }
-    this.hooks[hookName] = this.hooks[hookName].filter(cb => {
+    this.hooks[hookName] = this.hooks[hookName]!.filter(cb => {
       return cb !== callback;
     });
     this.trigger(hookName, this.hooks[hookName]);
   },
 
   get(hookName) {
-    return this.hooks[hookName] || [];
+    return this.hooks[hookName]! || [];
   },
-});
+};
 
-export default HookStore;
+type HookStore = Reflux.Store & HookStoreInterface;
+
+/**
+ * HookStore is used to allow extensibility into Sentry's frontend via
+ * registration of 'hook functions'.
+ *
+ * This functionality is primarily used by the SASS sentry.io product.
+ */
+export default Reflux.createStore(hookStoreConfig) as HookStore;
diff --git a/src/sentry/static/sentry/app/types/hooks.ts b/src/sentry/static/sentry/app/types/hooks.ts
new file mode 100644
index 0000000000..8a742abb9f
--- /dev/null
+++ b/src/sentry/static/sentry/app/types/hooks.ts
@@ -0,0 +1,350 @@
+import {Route} from 'react-router';
+import {
+  User,
+  Organization,
+  Project,
+  IntegrationProvider,
+  IntegrationFeature,
+} from 'app/types';
+
+// XXX(epurkhiser): A Note about `_`.
+//
+// We add the `_: any` type int our hooks list to stop
+// typescript from doing too much type tightening. We should absolutely revisit
+// this in the future because all callbacks _should_ be allowed to be
+// functions, but doing so causes some unexpected issues and makes typescript
+// not happy. We still get a huge advantage of typing just by having each hook
+// type here however.
+
+/**
+ * The Hooks type mapping is the master interface for all external Hooks into
+ * the sentry frontent application.
+ */
+export type Hooks = {_: any} & RouteHooks &
+  ComponentHooks &
+  CustomizationHooks &
+  AnalyticsHooks &
+  FeatureDisabledHooks &
+  InterfaceChromeHooks &
+  OnboardingHooks &
+  SettingsHooks;
+
+export type HookName = keyof Hooks;
+
+/**
+ * Route hooks.
+ */
+export type RouteHooks = {
+  routes: RoutesHook;
+  'routes:admin': RoutesHook;
+  'routes:organization': RoutesHook;
+  'routes:organization-root': RoutesHook;
+};
+
+/**
+ * Component wrapping hooks
+ */
+export type ComponentHooks = {
+  'component:org-members-view': GenericComponentHook;
+  'component:header-date-range': GenericComponentHook;
+  'component:header-selector-items': GenericComponentHook;
+};
+
+/**
+ * Customization hooks are advanced hooks that return render-prop style
+ * components the allow for specific customizations of components.
+ *
+ * These are very similar to the component wrapping hooks
+ */
+export type CustomizationHooks = {
+  'integrations:feature-gates': IntegrationsFeatureGatesHook;
+};
+
+/**
+ * Analytics / tracking / and operational metrics backend hooks.
+ */
+export type AnalyticsHooks = {
+  'analytics:init-user': AnalyticsInitUser;
+  'analytics:track-event': AnalyticsTrackEvent;
+  'analytics:track-adhoc-event': AnalyticsTrackAdhocEvent;
+  'metrics:event': MetricsEvent;
+
+  // TODO(epurkhiser): This is deprecated and should be replaced
+  'analytics:event': LegacyAnalyticsEvent;
+};
+
+/**
+ * feature-disabled:<feature-flag> hooks return components that will be
+ * rendered in place for Feature components when the feature is not enabled.
+ */
+export type FeatureDisabledHooks = {
+  'feature-disabled:custom-inbound-filters': FeatureDisabledHook;
+  'feature-disabled:discard-groups': FeatureDisabledHook;
+  'feature-disabled:data-forwarding': FeatureDisabledHook;
+  'feature-disabled:rate-limits': FeatureDisabledHook;
+  'feature-disabled:sso-basic': FeatureDisabledHook;
+  'feature-disabled:sso-rippling': FeatureDisabledHook;
+  'feature-disabled:sso-saml2': FeatureDisabledHook;
+  'feature-disabled:events-page': FeatureDisabledHook;
+  'feature-disabled:events-sidebar-item': FeatureDisabledHook;
+  'feature-disabled:discover-page': FeatureDisabledHook;
+  'feature-disabled:discover-sidebar-item': FeatureDisabledHook;
+  'feature-disabled:project-selector-checkbox': FeatureDisabledHook;
+  'feature-disabled:custom-symbol-sources': FeatureDisabledHook;
+};
+
+/**
+ * Interface chrome hooks.
+ */
+export type InterfaceChromeHooks = {
+  footer: GenericComponentHook;
+  'organization:header': GenericOrganizationComponentHook;
+  'sidebar:help-menu': GenericOrganizationComponentHook;
+  'sidebar:organization-dropdown-menu': GenericOrganizationComponentHook;
+  'sidebar:bottom-items': SidebarBottomItemsHook;
+  'sidebar:item-label': SidebarItemLabelHook;
+};
+
+/**
+ * Onboarding experience hooks
+ */
+export type OnboardingHooks = {
+  'onboarding:invite-members': OnboardingInviteMembersHook;
+  'onboarding:extra-chrome': GenericComponentHook;
+};
+
+/**
+ * Settings navigation hooks.
+ */
+export type SettingsHooks = {
+  'settings:organization-navigation': GenericOrganizationComponentHook;
+  'settings:organization-navigation-config': SettingsConfigHook;
+};
+
+/**
+ * Renders a React node.
+ */
+type GenericComponentHook = () => React.ReactNode;
+
+/**
+ * A route hook provides an injection point for a list of routes.
+ */
+type RoutesHook = () => Route[];
+
+/**
+ * Receives an organization object and should return a React node.
+ */
+type GenericOrganizationComponentHook = (opts: {
+  organization: Organization;
+}) => React.ReactNode;
+
+/**
+ * A FeatureDisabledHook returns a react element when a feature is not enabled.
+ */
+type FeatureDisabledHook = (opts: {
+  /**
+   * The organization that is associated to this feature.
+   */
+  organization: Organization;
+  /**
+   * The project that is associated to this feature.
+   */
+  project: Project;
+  /**
+   * The list of features that are controlled by this hook.
+   */
+  features: string[];
+  /**
+   * Weather the feature is or is not enabled.
+   */
+  hasFeature: boolean;
+}) => React.ReactNode;
+
+/**
+ * Called when the app is mounted.
+ */
+type AnalyticsInitUser = (user: User) => void;
+
+/**
+ * Trigger analytics tracking in the hook store.
+ */
+type AnalyticsTrackEvent = (opts: {
+  /**
+   * The key used to identify the event.
+   */
+  eventKey: string;
+  /**
+   * The English string used as the name of the event.
+   */
+  eventName: string;
+  /**
+   * Arbitrary data to track
+   */
+  [key: string]: any;
+}) => void;
+
+/**
+ * Trigger adhoc analytics tracking in the hook store.
+ */
+type AnalyticsTrackAdhocEvent = (
+  opts: Omit<Parameters<AnalyticsTrackEvent>[0], 'eventName'>
+) => void;
+
+/**
+ * Trigger analytics tracking in the hook store.
+ *
+ * Prefer using `analytics:track-event` or `analytics:track-adhock-event`.
+ *
+ * @deprecated This is the legacy interface.
+ */
+type LegacyAnalyticsEvent = (
+  /**
+   * The key used to identify the event.
+   */
+  name: string,
+  /**
+   * Arbitrary data to track
+   */
+  data: {[key: string]: number | string | boolean}
+) => void;
+
+/**
+ * Trigger recording a metric in the hook store.
+ */
+type MetricsEvent = (
+  /**
+   * Metric name
+   */
+  name: string,
+  /**
+   * Value to record for this metric
+   */
+  value: number,
+  /**
+   * An additional tags object
+   */
+  tags?: object
+) => void;
+
+/**
+ * Provides additional setting configurations
+ *
+ * TODO(ts): The returned object should come from a settings configuration type
+ * once we convert settings configurations into typescript.
+ */
+type SettingsConfigHook = (opts: {
+  organization: Organization;
+}) => {
+  name: string;
+  items: object[];
+};
+
+/**
+ * Each sidebar label is wrapped with this hook, to allow sidebar item
+ * augmentation.
+ */
+type SidebarItemLabelHook = (opts: {
+  /**
+   * The key of the item label currently being rendered.
+   */
+  id: string;
+}) => React.ReactNode;
+
+/**
+ * Returns an additional list of sidebar items.
+ *
+ * TODO(ts): These types should likely come from the Sidebar.tsx itself once it
+ * is converted to typescript.
+ */
+type SidebarBottomItemsHook = (opts: {
+  organization: Organization;
+  /**
+   * The current orientation of the sidebar.
+   */
+  orientation: 'top' | 'left';
+  /**
+   * Is the sidebar collapsed.
+   */
+  collapsed: boolean;
+  /**
+   * Does the sidebar currently have a panel displayed.
+   */
+  hasPanel: boolean;
+}) => React.ReactNode;
+
+/**
+ * Wrapper component to allow for customization of the onboarding member
+ * invitation component.
+ */
+type OnboardingInviteMembersHook = () => React.ComponentType<{
+  organization: Organization;
+}>;
+
+type IntegrationFeatureGroup = {
+  /**
+   * The list of features within this group
+   */
+  features: IntegrationFeature[];
+  /**
+   * Weather the group has all of the features enabled within this group
+   * or not.
+   */
+  hasFeatures: boolean;
+};
+
+type FeatureGateSharedProps = {
+  /**
+   * Organization of the integration we're querying feature gate details for.
+   */
+  organization: Organization;
+  /**
+   * The list of features, typically this is provided by the backend.
+   */
+  features: IntegrationFeature[];
+};
+
+type IntegrationFeaturesProps = FeatureGateSharedProps & {
+  /**
+   * The children function which will be provided with gating details.
+   */
+  children: (opts: {
+    /**
+     * This is the list of features which have *not* been gated in any way.
+     */
+    ungatedFeatures: IntegrationFeature[];
+    /**
+     * Features grouped based on specific gating criteria (for example, in
+     * sentry.io this is features grouped by plans).
+     */
+    gatedFeatureGroups: IntegrationFeatureGroup[];
+    /**
+     * Is the integration disabled for installation because of feature gating?
+     */
+    disabled: boolean;
+    /**
+     * The translated reason that the integration is disabled.
+     */
+    disabledReason: React.ReactNode;
+  }) => React.ReactElement;
+};
+
+type IntegrationFeatureListProps = FeatureGateSharedProps & {
+  provider: Pick<IntegrationProvider, 'key'>;
+};
+
+/**
+ * The integration features gate hook provides components to customize
+ * integration feature lists.
+ */
+type IntegrationsFeatureGatesHook = () => {
+  /**
+   * This is a render-prop style component that given a set of integration
+   * features will call the children function with gating details about the
+   * features.
+   */
+  IntegrationFeatures: React.ComponentType<IntegrationFeaturesProps>;
+  /**
+   * This component renders the list of integration features.
+   */
+  FeatureList: React.ComponentType<IntegrationFeatureListProps>;
+};
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 3dfa40c550..1076cdc1cc 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -390,6 +390,11 @@ export type IntegrationProvider = {
   metadata: any; //TODO(ts)
 };
 
+export type IntegrationFeature = {
+  description: React.ReactNode;
+  featureGate: string;
+};
+
 export type WebhookEvent = 'issue' | 'error';
 
 export type Scope = typeof API_SCOPES[number];
diff --git a/src/sentry/static/sentry/app/utils/analytics.tsx b/src/sentry/static/sentry/app/utils/analytics.tsx
index 0a9c355e19..ee66c1cbb1 100644
--- a/src/sentry/static/sentry/app/utils/analytics.tsx
+++ b/src/sentry/static/sentry/app/utils/analytics.tsx
@@ -1,4 +1,5 @@
 import HookStore from 'app/stores/hookStore';
+import {Hooks} from 'app/types/hooks';
 
 /**
  * Analytics and metric tracking functionality.
@@ -26,13 +27,8 @@ import HookStore from 'app/stores/hookStore';
  *
  * Refer for the backend implementation provided through HookStore for more
  * details.
- *
- * @param {Object} options Event tracking options
- * @param {String} options.eventKey The string key of the event to track
- * @param {String} options.name The human readable string name of the event
- * @param {...Object} options.data The parameters of the event to track
  */
-export const trackAnalyticsEvent = options =>
+export const trackAnalyticsEvent: Hooks['analytics:track-event'] = options =>
   HookStore.get('analytics:track-event').forEach(cb => cb(options));
 
 /**
@@ -43,29 +39,49 @@ export const trackAnalyticsEvent = options =>
  *
  * Refer for the backend implementation provided through HookStore for a more
  * thorough explanation of when to use this.
- *
- * @param {Object} options Event tracking options
- * @param {String} options.eventKey The string key of the event to track
- * @param {...Object} options.data The parameters of the event to track
  */
-export const trackAdhocEvent = (options: {[key: string]: any}) =>
+export const trackAdhocEvent: Hooks['analytics:track-adhoc-event'] = options =>
   HookStore.get('analytics:track-adhoc-event').forEach(cb => cb(options));
 
 /**
- * @param {String} name The name of the event
- * @param {Object} data Additional event data to record
+ * Legacy analytics tracking.
+ *
+ * @deprecated Prefer `trackAnalyticsEvent` and `trackAdhocEvent`.
  */
-export const analytics = (
-  name: string,
-  data: {[key: string]: number | string | boolean}
-): void => HookStore.get('analytics:event').forEach(cb => cb(name, data));
+export const analytics: Hooks['analytics:event'] = (name, data) =>
+  HookStore.get('analytics:event').forEach(cb => cb(name, data));
+
+type RecordMetric = Hooks['metrics:event'] & {
+  mark: (name: string) => void;
+
+  measure: (opts: {
+    /**
+     * Name of the metric event
+     */
+    name?: string;
+    /**
+     * Name of starting mark
+     */
+    start?: string;
+    /**
+     * Name of ending mark
+     */
+    end?: string;
+    /**
+     * Additional data to send with metric event
+     */
+    data?: object;
+    /**
+     * Do not clean up marks and measurements when completed
+     */
+    noCleanup?: boolean;
+  }) => void;
+};
 
 /**
- * @param {String} name Metric name
- * @param {Number} value Value to record for this metric
- * @param {Object} tags An additional tags object
+ * Record metrics.
  */
-export const metric = (name: string, value: number, tags?: object): void =>
+export const metric: RecordMetric = (name, value, tags) =>
   HookStore.get('metrics:event').forEach(cb => cb(name, value, tags));
 
 // JSDOM implements window.performance but not window.performance.mark
@@ -76,7 +92,7 @@ const CAN_MARK =
   typeof window.performance.getEntriesByName === 'function' &&
   typeof window.performance.clearMeasures === 'function';
 
-metric.mark = function metricMark(name: string): void {
+metric.mark = function metricMark(name) {
   // Just ignore if browser is old enough that it doesn't support this
   if (!CAN_MARK) {
     return;
@@ -86,29 +102,10 @@ metric.mark = function metricMark(name: string): void {
 };
 
 /**
- * Performs a measurement between `start` and `end` (or now if `end` is not specified)
- * Calls `metric` with `name` and the measured time difference.
- *
- * @param {Object} options keyword args object
- * @param {String} options.name Name of the metric event
- * @param {String} options.start Name of starting mark
- * @param {String} options.end (optional) Name of ending mark
- * @param {Boolean} options.noCleanup Do not clean up marks and measurements when completed
- * @param {Object} options.data (optional) Additional data to send with metric event
+ * Performs a measurement between `start` and `end` (or now if `end` is not
+ * specified) Calls `metric` with `name` and the measured time difference.
  */
-metric.measure = function metricMeasure({
-  name,
-  start,
-  end,
-  data,
-  noCleanup,
-}: {
-  name?: string;
-  start?: string;
-  end?: string;
-  data?: object;
-  noCleanup?: boolean;
-} = {}): void {
+metric.measure = function metricMeasure({name, start, end, data, noCleanup} = {}) {
   // Just ignore if browser is old enough that it doesn't support this
   if (!CAN_MARK) {
     return;
diff --git a/src/sentry/static/sentry/app/views/discover/index.tsx b/src/sentry/static/sentry/app/views/discover/index.tsx
index 0090fd54c9..e70955b483 100644
--- a/src/sentry/static/sentry/app/views/discover/index.tsx
+++ b/src/sentry/static/sentry/app/views/discover/index.tsx
@@ -194,7 +194,7 @@ class DiscoverContainer extends React.Component<Props, State> {
       <DocumentTitle title={`Discover - ${organization.slug} - Sentry`}>
         <Feature
           features={['organizations:discover']}
-          hookName="discover-page"
+          hookName="feature-disabled:discover-page"
           organization={organization}
           renderDisabled={this.renderNoAccess}
         >
diff --git a/src/sentry/static/sentry/app/views/events/index.jsx b/src/sentry/static/sentry/app/views/events/index.jsx
index 9739ce8d78..b62bd8c28a 100644
--- a/src/sentry/static/sentry/app/views/events/index.jsx
+++ b/src/sentry/static/sentry/app/views/events/index.jsx
@@ -43,7 +43,11 @@ class EventsContainer extends React.Component {
     const {organization, location, children} = this.props;
 
     return (
-      <Feature features={['events']} hookName="events-page" renderDisabled>
+      <Feature
+        features={['events']}
+        hookName="feature-disabled:events-page"
+        renderDisabled
+      >
         <GlobalSelectionHeader
           organization={organization}
           resetParamsOnChange={['cursor']}
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
index af6f4c34f6..0993364190 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
@@ -43,7 +43,7 @@ class DeleteActions extends React.Component {
   renderDiscardModal = ({Body, closeModal}) => (
     <Feature
       features={['projects:discard-groups']}
-      hookName="discard-groups"
+      hookName="feature-disabled:discard-groups"
       organization={this.props.organization}
       project={this.props.project}
       renderDisabled={this.renderDiscardDisabled}
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
index 0431044600..2598b84969 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
@@ -198,7 +198,7 @@ class ProjectFiltersSettings extends AsyncComponent {
   renderCustomFilters = disabled => () => (
     <Feature
       features={['projects:custom-inbound-filters']}
-      hookName="custom-inbound-filters"
+      hookName="feature-disabled:custom-inbound-filters"
       renderDisabled={({children, ...props}) =>
         children({...props, renderDisabled: this.renderDisabledCustomFilters})
       }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index 694ea69ccf..3b601a9e72 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -214,7 +214,7 @@ class KeyRateLimitsForm extends React.Component {
       <Form saveOnBlur apiEndpoint={apiEndpoint} apiMethod="PUT" initialData={data}>
         <Feature
           features={['projects:rate-limits']}
-          hookName="rate-limits"
+          hookName="feature-disabled:rate-limits"
           renderDisabled={({children, ...props}) =>
             children({...props, renderDisabled: disabledAlert})
           }
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataForwarding.jsx b/src/sentry/static/sentry/app/views/settings/projectDataForwarding.jsx
index ef01735f5b..6113f3bbe0 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataForwarding.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataForwarding.jsx
@@ -118,7 +118,10 @@ class ProjectDataForwarding extends AsyncComponent {
 
     return (
       <div data-test-id="data-forwarding-settings">
-        <Feature features={['projects:data-forwarding']} hookName="data-forwarding">
+        <Feature
+          features={['projects:data-forwarding']}
+          hookName="feature-disabled:data-forwarding"
+        >
           {({hasFeature, features}) => (
             <React.Fragment>
               <SettingsPageHeader title={t('Data Forwarding')} />
diff --git a/tests/js/spec/components/acl/feature.spec.jsx b/tests/js/spec/components/acl/feature.spec.jsx
index 75ddb76fb1..2b25a34a9a 100644
--- a/tests/js/spec/components/acl/feature.spec.jsx
+++ b/tests/js/spec/components/acl/feature.spec.jsx
@@ -268,7 +268,7 @@ describe('Feature', function() {
     it('uses hookName if provided', function() {
       const children = <div>The Child</div>;
       const wrapper = mount(
-        <Feature features={['org-bazar']} hookName="test-hook">
+        <Feature features={['org-bazar']} hookName="feature-disabled:test-hook">
           {children}
         </Feature>,
         routerContext
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 1de02757ce..fe1e6e44af 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -478,7 +478,9 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
           "teams": Array [],
         }
       }
-    />
+    >
+      <Hook(sidebar:organization-dropdown-menu) />
+    </Hook>
     <SidebarMenuItem>
       <MenuItemLink>
         <Component
@@ -1027,7 +1029,9 @@ exports[`Sidebar SidebarHelp can toggle help menu 1`] = `
           "teams": Array [],
         }
       }
-    />
+    >
+      <Hook(sidebar:help-menu) />
+    </Hook>
     <SidebarMenuItem
       onClick={[Function]}
     >
diff --git a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
index ac7e0ebc4b..08585da955 100644
--- a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
@@ -1025,7 +1025,9 @@ exports[`SharedGroupDetails renders 1`] = `
                         />
                         <Hook
                           name="footer"
-                        />
+                        >
+                          <Hook(footer) />
+                        </Hook>
                       </div>
                     </footer>
                   </Footer>
