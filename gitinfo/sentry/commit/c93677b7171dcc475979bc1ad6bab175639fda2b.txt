commit c93677b7171dcc475979bc1ad6bab175639fda2b
Author: Eric Feng <erichfeng@gmail.com>
Date:   Mon Feb 22 19:41:41 2016 -0800

    reactifying choose project

diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index fee973699e..c9e73b52d4 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -28,7 +28,7 @@ class OnboardingTasksSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
             'task': obj.task,
-            'status': dict(OrganizationOnboardingTask.STATUS_CHOICES).get(obj.status),
+            'status': dict(OrganizationOnboardingTask.STATUS_CHOICES).get(obj.status).lower(),
             'user': obj.user.name if obj.user else None,
             'dateCompleted': obj.date_completed,
             'data': obj.data,
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
index 911f818ad7..36c1c689db 100644
--- a/src/sentry/static/sentry/app/components/header/index.jsx
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -12,6 +12,35 @@ import UserNav from './userNav';
 import OrganizationSelector from './organizationSelector';
 import TodoList from '../todos';
 
+const OnboardingStatus = React.createClass({
+  render() {
+    let org = this.props.org;
+    let percentage = Math.round(
+      (org.onboardingTasks.filter(
+        t => t.status === 'Complete'
+      ).length) / TodoList.TASKS.length * 100
+    ).toString();
+    let style = {
+      width: percentage + '%',
+    };
+
+    if (percentage >= 100)
+      return null;
+
+    if (org.features.indexOf('onboarding') === -1)
+      return null;
+
+    return (
+      <div className="onboarding-progress-bar" onClick={this.props.onToggleTodos}>
+        <div className="slider" style={style} ></div>
+        {this.props.showTodos &&
+          <div className="dropdown-menu"><TodoList onClose={this.props.onHideTodos} /></div>
+        }
+      </div>
+    );
+  }
+});
+
 const Header = React.createClass({
   mixins: [ApiMixin, OrganizationState],
 
@@ -52,16 +81,6 @@ const Header = React.createClass({
       logo = <span className="icon-sentry-logo-full"/>;
     }
 
-    // NOTE: this.props.orgId not guaranteed to be specified
-    let percentage = Math.round(
-      (org.onboardingTasks.filter(
-        t => t.status === 'Complete'
-      ).length) / TodoList.TASKS.length * 100
-    ).toString();
-    let style = {
-      width: percentage + '%',
-    };
-
     return (
       <header>
         <div className="container">
@@ -75,13 +94,10 @@ const Header = React.createClass({
           <OrganizationSelector organization={org} className="pull-right" />
 
           <StatusPage className="pull-right" />
-          { percentage < 100 && org.features.indexOf('onboarding') >= 0 ?
-            <div className="onboarding-progress-bar" onClick={this.toggleTodos}>
-              <div className="slider" style={style} ></div>
-              { this.state.showTodos ? <div className="dropdown-menu"><TodoList onClose={this.setState.bind(this, {showTodos:false})} /></div> : null }
-            </div>
-            :
-            null
+          {org &&
+            <OnboardingStatus org={org} showTodos={this.state.showTodos}
+                              onShowTodos={this.setState.bind(this, {showTodos: false})}
+                              onToggleTodos={this.toggleTodos} />
           }
         </div>
       </header>
diff --git a/src/sentry/static/sentry/app/components/todos.jsx b/src/sentry/static/sentry/app/components/todos.jsx
index 8b556a79b0..035aaa7d3c 100644
--- a/src/sentry/static/sentry/app/components/todos.jsx
+++ b/src/sentry/static/sentry/app/components/todos.jsx
@@ -34,21 +34,21 @@ const TodoItem = React.createClass({
     let description;
 
     switch(this.props.task.status) {
-      case 'Complete':
+      case 'complete':
         classNames += ' checked';
         description = tct('[user] completed [dateCompleted]', {
           user: this.props.task.user,
           dateCompleted: moment(this.props.task.dateCompleted).fromNow(),
         });
         break;
-      case 'Pending':
+      case 'pending':
         classNames += ' pending';
         description = tct('[user] kicked off [dateCompleted]', {
           user: this.props.task.user,
           dateCompleted: moment(this.props.task.dateCompleted).fromNow(),
         });
         break;
-      case 'Skipped':
+      case 'skipped':
         classNames += ' skipped';
         description = tct('[user] skipped [dateCompleted]', {
           user: this.props.task.user,
@@ -65,24 +65,23 @@ const TodoItem = React.createClass({
 
     let learn_more_url = '';
     if (this.props.task.feature_location === 'project') {
-      learn_more_url = '/organizations/' + org.slug + '/projects/choose/?next=' + this.props.task.location;
+      learn_more_url = '/organizations/' + org.slug + '/projects/choose/?onboarding=1&task=' + this.props.task.task;
     } else if (this.props.task.feature_location === 'organization') {
       learn_more_url = '/organizations/' + org.slug + '/' + this.props.task.location;
     } else if (this.props.task.feature_location === 'absolute') {
       learn_more_url = this.props.task.location;
     }
 
-    let showSkipButton = this.props.task.skippable && this.props.task.status != 'Skipped' &&
-      this.props.task.status != 'Complete' && !this.state.showConfirmation;
+    let showSkipButton = this.props.task.skippable && this.props.task.status != 'skipped' &&
+      this.props.task.status != 'complete' && !this.state.showConfirmation;
 
     return (
       <li className={classNames}>
-        { this.props.task.status == 'Pending' && <span className="pending-bar" /> }
         <div className="todo-content">
           <div className="ob-checkbox">
-            { this.props.task.status == 'Complete' && <span className="icon-checkmark" /> }
-            { this.props.task.status == 'Skipped' && <span className="icon-x" /> }
-            { this.props.task.status == 'Pending' && <span className="icon-ellipsis" /> }
+            { this.props.task.status == 'complete' && <span className="icon-checkmark" /> }
+            { this.props.task.status == 'skipped' && <span className="icon-x" /> }
+            { this.props.task.status == 'pending' && <span className="icon-ellipsis" /> }
           </div>
           <a href={learn_more_url}><h4>{ this.props.task.title }</h4></a>
           <p>
@@ -145,7 +144,7 @@ const TodoList = React.createClass({
         'skippable': false,
         'prereq': [1],
         'feature_location': 'project',
-        'location': 'install',
+        'location': 'settings/install/',
       },
       {
         'task': 3,
@@ -181,7 +180,7 @@ const TodoList = React.createClass({
         'skippable': false,
         'prereq': [1, 2],
         'feature_location': 'project',
-        'location': 'release-tracking',
+        'location': 'settings/release-tracking/',
       },
       {
         'task': 7,
@@ -208,7 +207,7 @@ const TodoList = React.createClass({
         'skippable': true,
         'prereq': [1, 2],
         'feature_location': 'project',
-        'location': 'issue-tracking',
+        'location': 'settings/issue-tracking/',
       },
       {
         'task': 10,
@@ -217,7 +216,7 @@ const TodoList = React.createClass({
         'skippable': true,
         'prereq': [1, 2],
         'feature_location': 'project',
-        'location': 'notification',
+        'location': 'settings/notification/',
       },
     ]
   },
@@ -262,11 +261,11 @@ const TodoList = React.createClass({
     let org = this.getOrganization();
     this.api.request('/organizations/' + org.slug + '/onboarding-tasks/', {
       method: 'POST',
-      data: {'task': skipped_task, 'status': 'Skipped'},
+      data: {'task': skipped_task, 'status': 'skipped'},
       success: () => {
         let new_state = this.state.tasks.map( (task) => {
           if (task.task == skipped_task) {
-            task.status = 'Skipped';
+            task.status = 'skipped';
           }
           return task;
         });
@@ -291,7 +290,7 @@ const TodoList = React.createClass({
       next_tasks = this.state.tasks;
     } else {
       next_tasks = this.state.tasks.filter( (task) => {
-        if (task.status != 'Complete') {
+        if (task.status != 'complete') {
           return task;
         }
       }).slice(0,3);
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 91a3000307..e1a1e2ade1 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -22,6 +22,7 @@ import OrganizationDetails from './views/organizationDetails';
 import OrganizationRateLimits from './views/organizationRateLimits';
 import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
+import ProjectChooser from './views/projectChooser';
 import ProjectDashboard from './views/projectDashboard';
 import ProjectDetails from './views/projectDetails';
 import ProjectEvents from './views/projectEvents';
@@ -71,6 +72,7 @@ let routes = (
       <Route path="/organizations/:orgId/issues/assigned/" component={errorHandler(MyIssuesAssignedToMe)} />
       <Route path="/organizations/:orgId/issues/bookmarks/" component={errorHandler(MyIssuesBookmarked)} />
       <Route path="/organizations/:orgId/issues/history/" component={errorHandler(MyIssuesViewed)} />
+      <Route path="/organizations/:orgId/projects/choose/" component={errorHandler(ProjectChooser)} />
       <Route path="/organizations/:orgId/rate-limits/" component={errorHandler(OrganizationRateLimits)} />
       <Route path="/organizations/:orgId/stats/" component={errorHandler(OrganizationStats)} />
       <Route path="/organizations/:orgId/teams/:teamId/" component={errorHandler(TeamDetails)}>
diff --git a/src/sentry/static/sentry/app/views/projectChooser.jsx b/src/sentry/static/sentry/app/views/projectChooser.jsx
new file mode 100644
index 0000000000..cc467acb07
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectChooser.jsx
@@ -0,0 +1,73 @@
+import React from 'react';
+import {History} from 'react-router';
+import {Link} from 'react-router';
+
+import AllTeamsList from './organizationTeams/allTeamsList';
+import ExpandedTeamList from './organizationTeams/expandedTeamList';
+import OrganizationState from '../mixins/organizationState';
+import TodoList from '../components/todos';
+
+const ProjectChooser = React.createClass({
+  mixins: [
+    OrganizationState,
+    History
+  ],
+
+  componentWillMount() {
+    jQuery(document.body).addClass('narrow');
+  },
+
+  componentWillUnmount() {
+    jQuery(document.body).removeClass('narrow');
+  },
+
+  render() {
+    let org = this.getOrganization();
+
+    // Expect onboarding=1 and task=<task id> parameters and task.feature_location == 'project'
+    // TODO throw up report dialog if not true
+    let task = TodoList.TASKS.filter((task) => task.task == this.props.location.query.task)[0];
+    if (task.feature_location != 'project') {
+      throw new Error("User arrived on project chooser without a valid task id");
+    }
+    let teamProjectList = []
+
+    org.teams.map((team) => {
+      let projectList = []
+      team.projects.map((project) => {
+        let next_url = "/" + org.slug+ "/" + project.slug + "/" + task.location;
+        projectList.push(
+          <tr key={project.id}><td><h5>
+            <a href={next_url}>{project.name}</a>
+          </h5></td></tr>);
+      })
+
+      teamProjectList.push(
+        <div key={team.id}>
+          <div className="box-header" key={team.id}>
+            <h3>{team.name}</h3>
+          </div>
+          <div className="box-content">
+            <table className="table project-list">
+              <tbody>
+                {projectList}
+              </tbody>
+            </table>
+          </div>
+        </div>);
+    })
+
+    return (
+      <div className="container">
+        <h3>Choose a project</h3>
+        <div className="team-list">
+          <div className="box">
+            {teamProjectList}
+          </div>
+        </div>
+      </div>
+    );
+  },
+});
+
+export default ProjectChooser;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
index 13ba00581b..ae42ee1110 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
@@ -101,7 +101,6 @@ const ProjectInstallOverview = React.createClass({
              For a complete list of
              client integrations, please visit see [docLink:our in-depth documentation].
           `, {
-            em: <em />,
             docLink: <a href="https://docs.getsentry.com" />
           })}
         </p>
diff --git a/src/sentry/templates/sentry/choose-project.html b/src/sentry/templates/sentry/choose-project.html
deleted file mode 100644
index a024b99bbb..0000000000
--- a/src/sentry/templates/sentry/choose-project.html
+++ /dev/null
@@ -1,32 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load i18n %}
-
-{% block title %}{% trans "Choose Project" %} | {{ block.super }}{% endblock %}
-
-{% block content %}
-<h4>Choose Project</h4>
-
-{% for team, projects in teams %}
-	<div class="box">
-		<div class="box-header"><h3>{{ team.name }}</h3></div>
-		<div class="box-content">
-			<table class="table project-list">
-				<tbody>
-				{% for project in projects %}
-					<tr>
-						<td>
-							<a href="/{{ organization.slug }}/{{ project.slug }}/{{ next }}">
-								<h5>{{ project.name }}</h5>
-							</a>
-						</td>
-					</tr>
-				{% endfor %}
-				</tbody>
-			</table>
-		</div>
-	</div>
-{% endfor %}
-
-
-{% endblock %}
\ No newline at end of file
diff --git a/src/sentry/web/frontend/choose_project.py b/src/sentry/web/frontend/choose_project.py
deleted file mode 100644
index 321111a3f5..0000000000
--- a/src/sentry/web/frontend/choose_project.py
+++ /dev/null
@@ -1,43 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from django.shortcuts import redirect
-from rest_framework.response import Response
-
-from sentry.models import Team
-from sentry.web.frontend.base import OrganizationView
-
-
-class OrganizationProjectChooser(OrganizationView):
-    required_scope = 'team:read'
-
-    def handle(self, request, organization):
-        teams = Team.objects.get_for_user(
-            organization=organization,
-            user=request.user,
-            with_projects=True,
-        )
-
-        next_param = request.GET.get('next')
-        next_options = {
-            'install': 'settings/install/',
-            'release-tracking': 'settings/release-tracking/',
-            'issue-tracking': 'settings/issue-tracking/',
-            'notifications': 'settings/notifications/'
-        }
-
-        if next_param in next_options:
-            next_url = next_options[next_param]
-        else:
-            return Response({'detail': 'No next page found for next parameter: ' + next_param}, status=404)
-
-        if len(teams) == 1 and len(teams[0][1]) == 1:
-            project = teams[0][1][0]
-            return redirect(reverse('sentry-stream', args=[organization.slug, project.slug]) + next_url)
-
-        context = {
-            'organization': organization,
-            'teams': teams,
-            'next': next_url,
-        }
-        return self.respond('sentry/choose-project.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index cf5315c5e9..c7ef5d7f1a 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -38,7 +38,6 @@ from sentry.web.frontend.organization_settings import OrganizationSettingsView
 from sentry.web.frontend.create_organization import CreateOrganizationView
 from sentry.web.frontend.create_organization_member import CreateOrganizationMemberView
 from sentry.web.frontend.create_project import CreateProjectView
-from sentry.web.frontend.choose_project import OrganizationProjectChooser
 from sentry.web.frontend.create_project_key import CreateProjectKeyView
 from sentry.web.frontend.create_team import CreateTeamView
 from sentry.web.frontend.disable_project_key import DisableProjectKeyView
@@ -257,8 +256,6 @@ urlpatterns += patterns(
         name='sentry-create-team'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/projects/new/$', CreateProjectView.as_view(),
         name='sentry-create-project'),
-    url(r'^organizations/(?P<organization_slug>[\w_-]+)/projects/choose/$', OrganizationProjectChooser.as_view(),
-        name='sentry-organization-project-picker'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/remove/$', RemoveOrganizationView.as_view(),
         name='sentry-remove-organization'),
     url(r'^accept/(?P<member_id>\d+)/(?P<token>\w+)/$', AcceptOrganizationInviteView.as_view(),
