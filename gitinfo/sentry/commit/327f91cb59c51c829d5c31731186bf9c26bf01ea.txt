commit 327f91cb59c51c829d5c31731186bf9c26bf01ea
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Apr 24 10:15:55 2019 -0700

    fix(request-errors): Fix empty promise rejection error (#12891)
    
    API requests that use the promise interface get rejected with an empty Error object that is meant to be the preserved stacktrace.

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 6c9ceec2cb..54bc7882db 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -286,9 +286,17 @@ export class Client {
           includeAllArgs ? resolve([data, ...args]) : resolve(data);
         },
         error: (resp, ...args) => {
-          // Since this method calls `this.request`, and its error handler
-          // modifies the error object, we don't update it
-          reject(preservedError);
+          const errorObjectToUse = createRequestError(
+            resp,
+            preservedError.stack,
+            options.method,
+            path
+          );
+          errorObjectToUse.removeFrames(2);
+
+          // Although `this.request` logs all error responses, this error object can
+          // potentially be logged by Sentry's unhandled rejection handler
+          reject(errorObjectToUse);
         },
       });
     });
diff --git a/tests/js/spec/api.spec.jsx b/tests/js/spec/api.spec.jsx
index 05ee02af6c..166c3e7e10 100644
--- a/tests/js/spec/api.spec.jsx
+++ b/tests/js/spec/api.spec.jsx
@@ -3,6 +3,7 @@ import $ from 'jquery';
 import {Client, Request, paramsToQueryArgs} from 'app/api';
 import GroupActions from 'app/actions/groupActions';
 import {PROJECT_MOVED} from 'app/constants/apiErrorCodes';
+import * as Sentry from '@sentry/browser';
 
 jest.unmock('app/api');
 
@@ -217,4 +218,43 @@ describe('api', function() {
       );
     });
   });
+
+  describe('Sentry reporting', function() {
+    beforeEach(function() {
+      jest.spyOn($, 'ajax');
+
+      $.ajax.mockReset();
+      Sentry.captureException.mockClear();
+
+      $.ajax.mockImplementation(async ({error}) => {
+        await tick();
+        error({
+          status: 404,
+          statusText: 'Not Found',
+          responseJSON: {detail: 'Item was not found'},
+        });
+
+        return {};
+      });
+    });
+
+    it('reports correct error and stacktrace to Sentry', async function() {
+      api.request('/some/url/');
+      await tick();
+
+      const errorObjectSentryCalled = Sentry.captureException.mock.calls[0][0];
+      expect(errorObjectSentryCalled.name).toBe('NotFoundError');
+      expect(errorObjectSentryCalled.message).toBe('GET /some/url/ 404');
+
+      // First line of stack should be this test case
+      expect(errorObjectSentryCalled.stack.split('\n')[1]).toContain('api.spec.jsx');
+    });
+
+    it('reports correct error and stacktrace to Sentry when using promises', async function() {
+      await expect(
+        api.requestPromise('/some/url/')
+      ).rejects.toThrowErrorMatchingInlineSnapshot('"GET /some/url/ 404"');
+      expect(Sentry.captureException).toHaveBeenCalled();
+    });
+  });
 });
