commit f8e24174214c78d0997f299405929168093662b6
Author: Mike Clarke <mike.k.clarke@gmail.com>
Date:   Fri Apr 20 13:50:19 2018 -0700

    feat(newsletter): Update subscriptions to accept multiple lists (#8102)
    
    * feat(newsletter): Update subscriptions to multiple lists
    
    * Avoid using new functions for compatibility with existing newsletter backends
    
    * Add basic coverage for newsletter methods
    
    * Re-create newsletter between tests

diff --git a/src/sentry/newsletter/base.py b/src/sentry/newsletter/base.py
index a62795d96d..72cdd3532a 100644
--- a/src/sentry/newsletter/base.py
+++ b/src/sentry/newsletter/base.py
@@ -5,23 +5,58 @@ from sentry.utils.services import Service
 
 class Newsletter(Service):
     __all__ = (
-        'is_enabled', 'get_default_list_id', 'get_subscriptions', 'update_subscription',
-        'create_or_update_subscription', 'optout_email',
+        'is_enabled', 'get_default_list_id', 'get_default_list_ids',
+        'get_subscriptions', 'update_subscription', 'update_subscriptions',
+        'create_or_update_subscription', 'create_or_update_subscriptions',
+        'optout_email',
     )
 
-    DEFAULT_LIST_ID = 1
+    DEFAULT_LISTS = (1, )
+    DEFAULT_LIST_ID = DEFAULT_LISTS[0]
 
     enabled = False
 
-    def get_default_list_id(self):
-        return self.DEFAULT_LIST_ID
-
     def is_enabled(self):
         return self.enabled
 
+    def optout_email(self, email, **kwargs):
+        raise NotImplementedError
+
+    """
+    Replacements for the functions below that only accept a single list_id argument
+    """
+
+    def get_default_list_ids(self):
+        return self.DEFAULT_LISTS
+
     def get_subscriptions(self, user):
         return None
 
+    def update_subscriptions(self, user, list_ids=None, subscribed=True, create=None,
+                            verified=None, subscribed_date=None, unsubscribed_date=None, **kwargs):
+        return None
+
+    def create_or_update_subscriptions(self, user, list_ids=None, subscribed=True, verified=None,
+                                      subscribed_date=None, unsubscribed_date=None, **kwargs):
+        return self.update_subscriptions(
+            user=user,
+            list_ids=list_ids,
+            subscribed=subscribed,
+            verified=verified,
+            subscribed_date=subscribed_date,
+            unsubscribed_date=unsubscribed_date,
+            create=True,
+            **kwargs
+        )
+
+    """
+    These methods are deprecated in favor of the corresponding functions that
+    accept multiple list IDs
+    """
+
+    def get_default_list_id(self):
+        return self.DEFAULT_LIST_ID
+
     def update_subscription(self, user, list_id=None, subscribed=True, create=None,
                             verified=None, subscribed_date=None, unsubscribed_date=None, **kwargs):
         return None
@@ -38,6 +73,3 @@ class Newsletter(Service):
             create=True,
             **kwargs
         )
-
-    def optout_email(self, email, **kwargs):
-        raise NotImplementedError
diff --git a/src/sentry/newsletter/dummy.py b/src/sentry/newsletter/dummy.py
index aeff0b7be1..d767f0b20b 100644
--- a/src/sentry/newsletter/dummy.py
+++ b/src/sentry/newsletter/dummy.py
@@ -76,10 +76,22 @@ class DummyNewsletter(Newsletter):
         }
 
     def update_subscription(self, user, list_id=None, create=False, **kwargs):
-        if list_id:
-            if create:
-                self._subscriptions[user].setdefault(list_id, NewsletterSubscription(user, list_id, subscribed=True))
-            self._subscriptions[user][list_id].update(**kwargs)
+        if not list_id:
+            list_id = self.get_default_list_id()
+
+        if create:
+            self._subscriptions[user].setdefault(list_id, NewsletterSubscription(user, list_id, subscribed=True))
+        self._subscriptions[user][list_id].update(**kwargs)
+
+        return self._subscriptions[user]
+
+    def update_subscriptions(self, user, list_ids=None, create=False, **kwargs):
+        if not list_ids:
+            list_ids = self.get_default_list_ids()
+
+        for list_id in list_ids:
+            self.update_subscription(user, list_id, create, **kwargs)
+
         return self._subscriptions[user]
 
     def optout_email(self, email, **kwargs):
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index bfc85bd9e1..ca27282756 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -580,6 +580,7 @@ def show_emails(request):
                 # Update newsletter subscription and mark as unverified
                 newsletter.update_subscription(
                     user=user,
+                    create=True,
                     verified=False,
                 )
 
diff --git a/tests/sentry/newsletter/__init__.py b/tests/sentry/newsletter/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/newsletter/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/newsletter/test_base.py b/tests/sentry/newsletter/test_base.py
new file mode 100644
index 0000000000..402baf70ee
--- /dev/null
+++ b/tests/sentry/newsletter/test_base.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+from sentry.newsletter.base import Newsletter
+from sentry.testutils import TestCase
+
+newsletter = Newsletter()
+
+
+class BaseNewsletterTest(TestCase):
+
+    def test_defaults(self):
+        assert newsletter.DEFAULT_LISTS == newsletter.get_default_list_ids()
+        assert newsletter.DEFAULT_LIST_ID == newsletter.get_default_list_id()
+
+    def test_update_subscription(self):
+        user = self.create_user('subscriber@example.com')
+        newsletter.update_subscription(user)
+
+        assert newsletter.get_subscriptions(user) is None
+        assert newsletter.create_or_update_subscription(user) is None
+        assert newsletter.create_or_update_subscriptions(user) is None
+
+    def test_update_subscriptions(self):
+        user = self.create_user('subscriber@example.com')
+        newsletter.update_subscriptions(user)
+
+        assert newsletter.get_subscriptions(user) is None
+        assert newsletter.create_or_update_subscription(user) is None
+        assert newsletter.create_or_update_subscriptions(user) is None
diff --git a/tests/sentry/newsletter/test_dummy.py b/tests/sentry/newsletter/test_dummy.py
new file mode 100644
index 0000000000..b7f9c0fc36
--- /dev/null
+++ b/tests/sentry/newsletter/test_dummy.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from sentry.newsletter.dummy import DummyNewsletter
+from sentry.testutils import TestCase
+
+
+class DummyNewsletterTest(TestCase):
+
+    def setUp(self):
+        self.newsletter = DummyNewsletter()
+
+    def test_defaults(self):
+        assert self.newsletter.DEFAULT_LISTS == self.newsletter.get_default_list_ids()
+        assert self.newsletter.DEFAULT_LIST_ID == self.newsletter.get_default_list_id()
+
+    def assert_subscriptions(self, user, count):
+        subscriptions = self.newsletter.get_subscriptions(user)
+        assert subscriptions.get('subscriptions') is not None
+        assert len(subscriptions['subscriptions']) == count
+
+    def test_update_subscription(self):
+        user = self.create_user('subscriber@example.com')
+
+        self.assert_subscriptions(user, 0)
+        self.newsletter.create_or_update_subscription(user)
+        self.assert_subscriptions(user, 1)
+
+    def test_update_subscriptions(self):
+        user = self.create_user('subscriber@example.com')
+
+        self.assert_subscriptions(user, 0)
+        self.newsletter.create_or_update_subscriptions(user)
+        self.assert_subscriptions(user, 1)
