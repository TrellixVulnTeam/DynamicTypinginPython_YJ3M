commit f65bb860a952c962689dc81cb84f942502cb6add
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Nov 4 16:56:43 2019 -0800

    feat(member-invites): Allow changing request role / teams (#15407)

diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx
index fe55c067c8..7fc5a94384 100644
--- a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx
@@ -70,10 +70,6 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
   getEndpoints(): [string, string][] {
     const orgId = this.props.organization.slug;
 
-    // TODO(epurkhiser): For admins we cannot lookup me, and will not have
-    // roles when viewing this modal as an admin. We need to add some hardcoded
-    // defaults like in the old page.
-
     return [['member', `/organizations/${orgId}/members/me/`]];
   }
 
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx
index a060306694..82f14769d8 100644
--- a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx
@@ -4,8 +4,8 @@ import {t} from 'app/locale';
 import {Team, MemberRole} from 'app/types';
 import Button from 'app/components/button';
 import SelectControl from 'app/components/forms/selectControl';
+import RoleSelectControl from 'app/components/roleSelectControl';
 
-import RoleSelectControl from './roleSelectControl';
 import renderEmailValue from './renderEmailValue';
 import {InviteStatus} from './types';
 
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx b/src/sentry/static/sentry/app/components/roleSelectControl.tsx
similarity index 85%
rename from src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx
rename to src/sentry/static/sentry/app/components/roleSelectControl.tsx
index e42a3664f2..0848df627d 100644
--- a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx
+++ b/src/sentry/static/sentry/app/components/roleSelectControl.tsx
@@ -17,11 +17,7 @@ const RoleSelector = ({roles, disableUnallowed, ...props}: Props) => (
       roles.map(r => ({
         value: r.id,
         label: r.name,
-        disabled:
-          (disableUnallowed && !r.allowed) ||
-          // TODO(epurkhiser): This is a quick hack before we allow invite
-          // acceptance to select a different role.
-          (!disableUnallowed && r.id === 'owner'),
+        disabled: disableUnallowed && !r.allowed,
       }))
     }
     optionRenderer={option => {
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 019e9eae55..e74c43f406 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -376,6 +376,7 @@ export type Member = {
   dateCreated: string;
   inviteStatus: 'approved' | 'requested_to_be_invited' | 'requested_to_join';
   inviterName: string | null;
+  teams: string[];
 };
 
 export type AccessRequest = {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx
index bbe8c4810d..c1870c577e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {Member, Organization} from 'app/types';
+import {Member, Organization, Team, MemberRole} from 'app/types';
 import {PanelItem} from 'app/components/panels';
 import {t, tct} from 'app/locale';
 import Button from 'app/components/button';
@@ -11,6 +11,8 @@ import HookOrDefault from 'app/components/hookOrDefault';
 import Tag from 'app/views/settings/components/tag';
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
+import SelectControl from 'app/components/forms/selectControl';
+import RoleSelectControl from 'app/components/roleSelectControl';
 
 type Props = {
   inviteRequest: Member;
@@ -18,6 +20,9 @@ type Props = {
   organization: Organization;
   onApprove: (inviteRequest: Member) => void;
   onDeny: (inviteRequest: Member) => void;
+  onUpdate: (data: Partial<Member>) => void;
+  allTeams: Team[];
+  allRoles: MemberRole[];
 };
 
 const InviteModalHook = HookOrDefault({
@@ -34,7 +39,13 @@ const InviteRequestRow = ({
   organization,
   onApprove,
   onDeny,
+  onUpdate,
+  allTeams,
+  allRoles,
 }: Props) => {
+  const role = allRoles.find(r => r.id === inviteRequest.role);
+  const roleDisallowed = !(role && role.allowed);
+
   // eslint-disable-next-line react/prop-types
   const hookRenderer: InviteModalRenderFunc = ({sendInvites, canSend, headerInfo}) => (
     <StyledPanelItem>
@@ -62,11 +73,34 @@ const InviteRequestRow = ({
           </Tooltip>
         )}
       </div>
-      <div>{inviteRequest.roleName}</div>
+      <div>
+        <RoleSelectControl
+          name="role"
+          disableUnallowed
+          onChange={r => onUpdate({role: r.value})}
+          value={inviteRequest.role}
+          roles={allRoles}
+        />
+      </div>
+      <div>
+        <SelectControl
+          name="teams"
+          placeholder={t('Add to teams...')}
+          onChange={teams => onUpdate({teams: teams.map(team => team.value)})}
+          value={inviteRequest.teams}
+          options={allTeams.map(({slug}) => ({
+            value: slug,
+            label: `#${slug}`,
+          }))}
+          multiple
+          clearable
+        />
+      </div>
       <ButtonGroup>
         <Confirm
           onConfirm={sendInvites}
           disableConfirmButton={!canSend}
+          disabled={roleDisallowed}
           message={
             <React.Fragment>
               {tct('Are you sure you want to invite [email] to your organization?', {
@@ -80,6 +114,14 @@ const InviteRequestRow = ({
             priority="primary"
             size="small"
             busy={inviteRequestBusy[inviteRequest.id]}
+            title={
+              roleDisallowed
+                ? t(
+                    `You do not have permission to approve a user of this role.
+                     Select a different role to approve this user.`
+                  )
+                : undefined
+            }
           >
             {t('Approve')}
           </Button>
@@ -112,11 +154,14 @@ InviteRequestRow.propTypes = {
     id: PropTypes.string,
     inviterName: PropTypes.string,
     inviteStatus: PropTypes.string,
-    roleName: PropTypes.string,
+    role: PropTypes.string,
+    teams: PropTypes.arrayOf(PropTypes.string),
   }),
   onApprove: PropTypes.func,
   onDeny: PropTypes.func,
   inviteRequestBusy: PropTypes.object,
+  allRoles: PropTypes.arrayOf(PropTypes.object),
+  allTeams: PropTypes.arrayOf(PropTypes.object),
 };
 
 const JoinRequestIndicator = styled(Tag)`
@@ -127,7 +172,7 @@ const JoinRequestIndicator = styled(Tag)`
 
 const StyledPanelItem = styled(PanelItem)`
   display: grid;
-  grid-template-columns: auto 140px max-content;
+  grid-template-columns: auto 140px 180px max-content;
   grid-gap: ${space(2)};
   align-items: center;
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
index 0f40e546a0..e58e85a53e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
@@ -14,7 +14,7 @@ class OrganizationAccessRequests extends React.Component {
   static propTypes = {
     api: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
-    onUpdateRequestList: PropTypes.func.isRequired,
+    onRemoveAccessRequest: PropTypes.func.isRequired,
     requestList: PropTypes.arrayOf(
       PropTypes.shape({
         id: PropTypes.string.isRequired,
@@ -33,7 +33,7 @@ class OrganizationAccessRequests extends React.Component {
   };
 
   handleAction = async ({id, isApproved, successMessage, errorMessage}) => {
-    const {api, orgId, onUpdateRequestList} = this.props;
+    const {api, orgId, onRemoveAccessRequest} = this.props;
 
     this.setState(state => ({
       accessRequestBusy: {...state.accessRequestBusy, [id]: true},
@@ -44,7 +44,7 @@ class OrganizationAccessRequests extends React.Component {
         method: 'PUT',
         data: {isApproved},
       });
-      onUpdateRequestList(id);
+      onRemoveAccessRequest(id);
       addSuccessMessage(successMessage);
     } catch {
       addErrorMessage(errorMessage);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
index 0991ccb265..32243e8051 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
@@ -2,7 +2,7 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import {openInviteMembersModal} from 'app/actionCreators/modal';
-import {OrganizationDetailed} from 'app/types';
+import {OrganizationDetailed, Member} from 'app/types';
 import {Panel} from 'app/components/panels';
 import {t} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
@@ -22,7 +22,11 @@ type Props = AsyncView['props'] & {
   organization: OrganizationDetailed;
 };
 
-class OrganizationMembersWrapper extends AsyncView<Props> {
+type State = AsyncView['state'] & {
+  inviteRequests: Member[];
+};
+
+class OrganizationMembersWrapper extends AsyncView<Props, State> {
   componentDidMount() {
     const {organization} = this.props;
 
@@ -114,18 +118,26 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
     return count ? count.toString() : null;
   }
 
-  updateRequestList = (id: string) =>
+  removeAccessRequest = (id: string) =>
     this.setState(state => ({
-      requestList: state.requestList.filter(({id: existingId}) => existingId !== id),
+      requestList: state.requestList.filter(m => m.id !== id),
     }));
 
-  updateInviteRequests = (id: string) =>
+  removeInviteRequest = (id: string) =>
     this.setState(state => ({
-      inviteRequests: state.inviteRequests.filter(
-        ({id: existingId}) => existingId !== id
-      ),
+      inviteRequests: state.inviteRequests.filter(m => m.id !== id),
     }));
 
+  updateInviteRequest = (id: string, data: Partial<Member>) =>
+    this.setState(state => {
+      const inviteRequests = [...state.inviteRequests];
+      const inviteIndex = inviteRequests.findIndex(m => m.id === id);
+
+      inviteRequests[inviteIndex] = {...inviteRequests[inviteIndex], ...data};
+
+      return {inviteRequests};
+    });
+
   renderBody() {
     const {
       children,
@@ -193,8 +205,9 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
           React.cloneElement(children, {
             requestList,
             inviteRequests,
-            onUpdateInviteRequests: this.updateInviteRequests,
-            onUpdateRequestList: this.updateRequestList,
+            onRemoveInviteRequest: this.removeInviteRequest,
+            onUpdateInviteRequest: this.updateInviteRequest,
+            onRemoveAccessRequest: this.removeAccessRequest,
             showInviteRequests: this.showInviteRequests,
           })}
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
index 9a35c0eb8f..9202a9fd5e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
@@ -2,41 +2,43 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import * as ReactRouter from 'react-router';
 
-import {AccessRequest, Member, Organization} from 'app/types';
+import {MEMBER_ROLES} from 'app/constants';
+import {AccessRequest, Member, Organization, Team} from 'app/types';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t, tct} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
+import withTeams from 'app/utils/withTeams';
+import AsyncView from 'app/views/asyncView';
 
 import InviteRequestRow from './inviteRequestRow';
 import OrganizationAccessRequests from './organizationAccessRequests';
 
 type Props = {
-  api: any;
   params: any;
   router: ReactRouter.InjectedRouter;
   organization: Organization;
   requestList: AccessRequest[];
   inviteRequests: Member[];
-  onUpdateInviteRequests: (id: string) => void;
-  onUpdateRequestList: (id: string) => void;
+  teams: Team[];
+  onUpdateInviteRequest: (id: string, data: Partial<Member>) => void;
+  onRemoveInviteRequest: (id: string) => void;
+  onRemoveAccessRequest: (id: string) => void;
   showInviteRequests: boolean;
 };
 
-type State = {
+type State = AsyncView['state'] & {
   inviteRequestBusy: {[key: string]: boolean};
 };
 
-class OrganizationRequestsView extends React.Component<Props, State> {
+class OrganizationRequestsView extends AsyncView<Props, State> {
   static propTypes = {
-    api: PropTypes.object.isRequired,
     requestList: PropTypes.array.isRequired,
     inviteRequests: PropTypes.array.isRequired,
-    onUpdateInviteRequests: PropTypes.func.isRequired,
-    onUpdateRequestList: PropTypes.func.isRequired,
+    onRemoveInviteRequest: PropTypes.func.isRequired,
+    onRemoveAccessRequest: PropTypes.func.isRequired,
     showInviteRequests: PropTypes.bool.isRequired,
   };
 
@@ -44,11 +46,16 @@ class OrganizationRequestsView extends React.Component<Props, State> {
     inviteRequests: [],
   };
 
-  state: State = {
-    inviteRequestBusy: {},
-  };
+  getDefaultState() {
+    const state = super.getDefaultState();
+    return {
+      ...state,
+      inviteRequestBusy: {},
+    };
+  }
 
   componentWillMount() {
+    super.componentWillMount();
     this.handleRedirect();
   }
 
@@ -66,6 +73,12 @@ class OrganizationRequestsView extends React.Component<Props, State> {
     this.handleRedirect();
   }
 
+  getEndpoints(): [string, string][] {
+    const orgId = this.props.organization.slug;
+
+    return [['member', `/organizations/${orgId}/members/me/`]];
+  }
+
   handleRedirect() {
     const {router, params, requestList, showInviteRequests} = this.props;
 
@@ -87,14 +100,14 @@ class OrganizationRequestsView extends React.Component<Props, State> {
     eventKey,
     eventName,
   }) => {
-    const {api, params, organization, onUpdateInviteRequests} = this.props;
+    const {params, organization, onRemoveInviteRequest} = this.props;
 
     this.setState(state => ({
       inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: true},
     }));
 
     try {
-      await api.requestPromise(
+      await this.api.requestPromise(
         `/organizations/${params.orgId}/invite-requests/${inviteRequest.id}/`,
         {
           method,
@@ -102,7 +115,7 @@ class OrganizationRequestsView extends React.Component<Props, State> {
         }
       );
 
-      onUpdateInviteRequests(inviteRequest.id);
+      onRemoveInviteRequest(inviteRequest.id);
       addSuccessMessage(successMessage);
       trackAnalyticsEvent({
         eventKey,
@@ -124,7 +137,11 @@ class OrganizationRequestsView extends React.Component<Props, State> {
     this.handleAction({
       inviteRequest,
       method: 'PUT',
-      data: {approve: 1},
+      data: {
+        role: inviteRequest.role,
+        teams: inviteRequest.teams,
+        approve: 1,
+      },
       successMessage: tct('[email] has been invited', {email: inviteRequest.email}),
       errorMessage: tct('Error inviting [email]', {email: inviteRequest.email}),
       eventKey: 'invite_request.approved',
@@ -154,10 +171,12 @@ class OrganizationRequestsView extends React.Component<Props, State> {
       requestList,
       showInviteRequests,
       inviteRequests,
-      onUpdateRequestList,
+      onRemoveAccessRequest,
+      onUpdateInviteRequest,
       organization,
+      teams,
     } = this.props;
-    const {inviteRequestBusy} = this.state;
+    const {inviteRequestBusy, member} = this.state;
 
     return (
       <React.Fragment>
@@ -171,8 +190,11 @@ class OrganizationRequestsView extends React.Component<Props, State> {
                   organization={organization}
                   inviteRequest={inviteRequest}
                   inviteRequestBusy={inviteRequestBusy}
+                  allTeams={teams}
+                  allRoles={member ? member.roles : MEMBER_ROLES}
                   onApprove={this.handleApprove}
                   onDeny={this.handleDeny}
+                  onUpdate={data => onUpdateInviteRequest(inviteRequest.id, data)}
                 />
               ))}
               {inviteRequests.length === 0 && (
@@ -185,11 +207,11 @@ class OrganizationRequestsView extends React.Component<Props, State> {
         <OrganizationAccessRequests
           orgId={params.orgId}
           requestList={requestList}
-          onUpdateRequestList={onUpdateRequestList}
+          onRemoveAccessRequest={onRemoveAccessRequest}
         />
       </React.Fragment>
     );
   }
 }
 
-export default withApi(withOrganization(OrganizationRequestsView));
+export default withTeams(withOrganization(OrganizationRequestsView));
diff --git a/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx b/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx
index eac1962931..4eb9a5f086 100644
--- a/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx
@@ -1,8 +1,30 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
+import {selectByValue} from 'sentry-test/select';
 
 import InviteRequestRow from 'app/views/settings/organizationMembers/inviteRequestRow';
 
+const roles = [
+  {
+    id: 'admin',
+    name: 'Admin',
+    desc: 'This is the admin role',
+    allowed: true,
+  },
+  {
+    id: 'member',
+    name: 'Member',
+    desc: 'This is the member role',
+    allowed: true,
+  },
+  {
+    id: 'owner',
+    name: 'Owner',
+    desc: 'This is the owner role',
+    allowed: false,
+  },
+];
+
 describe('InviteRequestRow', function() {
   const orgId = 'org-slug';
   const inviteRequestBusy = new Map();
@@ -11,13 +33,13 @@ describe('InviteRequestRow', function() {
     user: null,
     inviterName: TestStubs.User().name,
     inviteStatus: 'requested_to_be_invited',
-    roleName: 'member',
+    role: 'member',
   });
 
   const joinRequest = TestStubs.Member({
     user: null,
     inviteStatus: 'requested_to_join',
-    roleName: 'member',
+    role: 'member',
   });
 
   it('renders request to be invited', function() {
@@ -26,6 +48,8 @@ describe('InviteRequestRow', function() {
         orgId={orgId}
         inviteRequest={inviteRequest}
         inviteRequestBusy={inviteRequestBusy}
+        allTeams={[]}
+        allRoles={roles}
       />
     );
 
@@ -44,6 +68,8 @@ describe('InviteRequestRow', function() {
         orgId={orgId}
         inviteRequest={joinRequest}
         inviteRequestBusy={inviteRequestBusy}
+        allTeams={[]}
+        allRoles={roles}
       />
     );
 
@@ -62,6 +88,8 @@ describe('InviteRequestRow', function() {
         inviteRequestBusy={inviteRequestBusy}
         onApprove={mockApprove}
         onDeny={mockDeny}
+        allTeams={[]}
+        allRoles={roles}
       />
     );
 
@@ -82,6 +110,8 @@ describe('InviteRequestRow', function() {
         inviteRequestBusy={inviteRequestBusy}
         onApprove={mockApprove}
         onDeny={mockDeny}
+        allTeams={[]}
+        allRoles={roles}
       />
     );
 
@@ -89,4 +119,58 @@ describe('InviteRequestRow', function() {
     expect(mockDeny).toHaveBeenCalledWith(inviteRequest);
     expect(mockApprove).not.toHaveBeenCalled();
   });
+
+  it('can change role and teams', function() {
+    const adminInviteRequest = TestStubs.Member({
+      user: null,
+      inviterName: TestStubs.User().name,
+      inviteStatus: 'requested_to_be_invited',
+      role: 'admin',
+    });
+
+    const mockUpdate = jest.fn();
+
+    const wrapper = mountWithTheme(
+      <InviteRequestRow
+        orgId={orgId}
+        inviteRequest={adminInviteRequest}
+        inviteRequestBusy={inviteRequestBusy}
+        allTeams={[{slug: 'one'}, {slug: 'two'}]}
+        allRoles={roles}
+        onUpdate={mockUpdate}
+      />
+    );
+
+    selectByValue(wrapper, 'member', {name: 'role', control: true});
+    expect(mockUpdate).toHaveBeenCalledWith({role: 'member'});
+
+    selectByValue(wrapper, 'one', {name: 'teams', control: true});
+    expect(mockUpdate).toHaveBeenCalledWith({teams: ['one']});
+  });
+
+  it('cannot be approved when invitee role is not allowed', function() {
+    const ownerInviteRequest = TestStubs.Member({
+      user: null,
+      inviterName: TestStubs.User().name,
+      inviteStatus: 'requested_to_be_invited',
+      role: 'owner',
+    });
+
+    const mockUpdate = jest.fn();
+
+    const wrapper = mountWithTheme(
+      <InviteRequestRow
+        orgId={orgId}
+        inviteRequest={ownerInviteRequest}
+        inviteRequestBusy={inviteRequestBusy}
+        allTeams={[{slug: 'one'}, {slug: 'two'}]}
+        allRoles={roles}
+        onUpdate={mockUpdate}
+      />
+    );
+
+    expect(wrapper.find('button[aria-label="Approve"]').props()['aria-disabled']).toBe(
+      true
+    );
+  });
 });
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx
index 7cf8cf8890..90c65e857d 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx
@@ -13,7 +13,7 @@ describe('OrganizationAccessRequests', function() {
       <OrganizationAccessRequests
         orgId={orgId}
         requestList={[]}
-        onUpdateRequestList={() => {}}
+        onRemoveAccessRequest={() => {}}
       />
     );
 
@@ -25,7 +25,7 @@ describe('OrganizationAccessRequests', function() {
       <OrganizationAccessRequests
         orgId={orgId}
         requestList={requestList}
-        onUpdateRequestList={() => {}}
+        onRemoveAccessRequest={() => {}}
       />
     );
 
@@ -53,7 +53,7 @@ describe('OrganizationAccessRequests', function() {
       <OrganizationAccessRequests
         orgId={orgId}
         requestList={requestList}
-        onUpdateRequestList={onUpdateRequestListMock}
+        onRemoveAccessRequest={onUpdateRequestListMock}
       />
     );
 
@@ -83,7 +83,7 @@ describe('OrganizationAccessRequests', function() {
       <OrganizationAccessRequests
         orgId={orgId}
         requestList={requestList}
-        onUpdateRequestList={onUpdateRequestListMock}
+        onRemoveAccessRequest={onUpdateRequestListMock}
       />
     );
 
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
index 370b7e5fc0..263eb24780 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
+import {selectByValue} from 'sentry-test/select';
 
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import OrganizationRequestsView from 'app/views/settings/organizationMembers/organizationRequestsView';
@@ -9,6 +10,27 @@ jest.mock('app/utils/analytics', () => ({
   trackAnalyticsEvent: jest.fn(),
 }));
 
+const roles = [
+  {
+    id: 'admin',
+    name: 'Admin',
+    desc: 'This is the admin role',
+    allowed: true,
+  },
+  {
+    id: 'member',
+    name: 'Member',
+    desc: 'This is the member role',
+    allowed: true,
+  },
+  {
+    id: 'owner',
+    name: 'Owner',
+    desc: 'This is the owner role',
+    allowed: false,
+  },
+];
+
 describe('OrganizationRequestsView', function() {
   const organization = TestStubs.Organization({
     access: ['member:admin', 'org:admin', 'member:write'],
@@ -29,12 +51,16 @@ describe('OrganizationRequestsView', function() {
     user: null,
     inviteStatus: 'requested_to_be_invited',
     inviter: TestStubs.User(),
+    role: 'member',
+    teams: [],
   });
   const joinRequest = TestStubs.Member({
     id: '456',
     user: null,
     email: 'test@gmail.com',
     inviteStatus: 'requested_to_join',
+    role: 'member',
+    teams: [],
   });
 
   beforeEach(function() {
@@ -54,6 +80,11 @@ describe('OrganizationRequestsView', function() {
       url: `/organizations/org-slug/access-requests/${accessRequest.id}/`,
       method: 'PUT',
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/members/me/',
+      method: 'GET',
+      body: {roles},
+    });
   });
 
   it('renders empty', function() {
@@ -68,7 +99,7 @@ describe('OrganizationRequestsView', function() {
     expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
-  it('can approve access request and update', async function() {
+  it('can approve access request and remove', async function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/access-requests/',
       method: 'GET',
@@ -109,7 +140,7 @@ describe('OrganizationRequestsView', function() {
     expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
-  it('can deny access request and update', async function() {
+  it('can deny access request and remove', async function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/access-requests/',
       method: 'GET',
@@ -267,7 +298,7 @@ describe('OrganizationRequestsView', function() {
     });
   });
 
-  it('can deny invite request and update', async function() {
+  it('can deny invite request and remove', async function() {
     const org = TestStubs.Organization({
       experiments: {ImprovedInvitesExperiment: 'all'},
       access: ['member:admin', 'org:admin', 'member:write'],
@@ -326,4 +357,44 @@ describe('OrganizationRequestsView', function() {
       member_id: parseInt(joinRequest.id, 10),
     });
   });
+
+  it('can update invite requests', async function() {
+    const org = TestStubs.Organization({
+      experiments: {ImprovedInvitesExperiment: 'all'},
+      access: ['member:admin', 'org:admin', 'member:write'],
+      status: {
+        id: 'active',
+      },
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/invite-requests/',
+      method: 'GET',
+      body: [inviteRequest],
+    });
+
+    const updateWithApprove = MockApiClient.addMockResponse({
+      url: `/organizations/org-slug/invite-requests/${inviteRequest.id}/`,
+      method: 'PUT',
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps}>
+        <OrganizationRequestsView organization={org} {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    selectByValue(wrapper, 'admin', {name: 'role', control: true});
+
+    wrapper.find('button[aria-label="Approve"]').simulate('click');
+    wrapper.find('button[aria-label="Confirm"]').simulate('click');
+
+    await tick();
+    wrapper.update();
+
+    expect(updateWithApprove).toHaveBeenCalledWith(
+      `/organizations/org-slug/invite-requests/${inviteRequest.id}/`,
+      expect.objectContaining({data: expect.objectContaining({role: 'admin'})})
+    );
+  });
 });
