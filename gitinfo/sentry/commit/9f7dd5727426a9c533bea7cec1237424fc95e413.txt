commit 9f7dd5727426a9c533bea7cec1237424fc95e413
Author: Dan Fuller <dfuller@sentry.io>
Date:   Mon May 20 14:41:54 2019 -0700

    feat(api): Add api to return activities associated with an incident (SEN-521)
    
    Returns incident activity. Endpoint supports a `desc` parameter which defaults to 1. When 0 orders
    results ascending.

diff --git a/src/sentry/api/bases/incident.py b/src/sentry/api/bases/incident.py
index 5030bc44b3..1f962c5935 100644
--- a/src/sentry/api/bases/incident.py
+++ b/src/sentry/api/bases/incident.py
@@ -13,7 +13,7 @@ from sentry.incidents.models import Incident
 
 class IncidentPermission(OrganizationPermission):
     scope_map = {
-        'GET': ['org:read', 'org:write', 'org:admin'],
+        'GET': ['org:read', 'org:write', 'org:admin', 'project:read', 'project:write', 'project:admin'],
         'POST': ['org:write', 'org:admin', 'project:read', 'project:write', 'project:admin'],
         'PUT': ['org:write', 'org:admin', 'project:read', 'project:write', 'project:admin'],
     }
diff --git a/src/sentry/api/endpoints/organization_incident_activity_index.py b/src/sentry/api/endpoints/organization_incident_activity_index.py
new file mode 100644
index 0000000000..904e4fc44a
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_incident_activity_index.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from sentry.api.bases.incident import (
+    IncidentPermission,
+    IncidentEndpoint,
+)
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.incidents.logic import get_incident_activity
+
+
+class OrganizationIncidentActivityIndexEndpoint(IncidentEndpoint):
+    permission_classes = (IncidentPermission, )
+
+    def get(self, request, organization, incident):
+        if request.GET.get('desc', '1') == '1':
+            order_by = '-date_added'
+        else:
+            order_by = 'date_added'
+
+        return self.paginate(
+            request=request,
+            queryset=get_incident_activity(incident),
+            order_by=order_by,
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/endpoints/organization_incident_comment_index.py b/src/sentry/api/endpoints/organization_incident_comment_index.py
index fe989280e7..7fce3bc5d1 100644
--- a/src/sentry/api/endpoints/organization_incident_comment_index.py
+++ b/src/sentry/api/endpoints/organization_incident_comment_index.py
@@ -22,7 +22,8 @@ class OrganizationIncidentCommentIndexEndpoint(IncidentEndpoint):
             activity = create_incident_activity(
                 incident,
                 IncidentActivityType.COMMENT,
-                user=request.user,
+                # XXX: Serialization fails if user is a `SimpleLazyObject`
+                user=request.user._wrapped,
                 comment=serializer.object['comment']
             )
             return Response(serialize(activity, request.user), status=201)
diff --git a/src/sentry/api/serializers/models/incidentactivity.py b/src/sentry/api/serializers/models/incidentactivity.py
index 7f09b32b43..186b7a9b93 100644
--- a/src/sentry/api/serializers/models/incidentactivity.py
+++ b/src/sentry/api/serializers/models/incidentactivity.py
@@ -6,32 +6,51 @@ from sentry.api.serializers import (
     Serializer,
     register,
 )
-from sentry.incidents.models import (
-    Incident,
-    IncidentActivity,
-)
+from sentry.utils.snuba import SnubaTSResult
+from sentry.api.serializers import serialize
+from sentry.api.serializers.snuba import SnubaTSResultSerializer
+from sentry.incidents.models import IncidentActivity
+from sentry.utils.db import attach_foreignkey
 
 
 @register(IncidentActivity)
 class IncidentActivitySerializer(Serializer):
-    def get_attrs(self, item_list, **kwargs):
-        incidents = Incident.objects.filter(id__in=set(i.incident_id for i in item_list))
-        incident_lookup = {incident.id: incident for incident in incidents}
+    def get_attrs(self, item_list, user, **kwargs):
+        attach_foreignkey(item_list, IncidentActivity.incident, related=('organization',))
+        attach_foreignkey(item_list, IncidentActivity.event_stats_snapshot)
+        attach_foreignkey(item_list, IncidentActivity.user)
+        serialized_users = serialize(
+            set(item.user for item in item_list if item.user_id),
+            user=user,
+        )
+        user_lookup = {user['id']: user for user in serialized_users}
+        return {item: {'user': user_lookup.get(six.text_type(item.user_id))} for item in item_list}
 
-        results = {}
-        for activity in item_list:
-            results[activity] = {'incident': incident_lookup[activity.incident_id]}
+    def serialize(self, obj, attrs, user):
+        incident = obj.incident
 
-        return results
+        event_stats = None
+        if obj.event_stats_snapshot:
+            serializer = SnubaTSResultSerializer(
+                obj.incident.organization,
+                None,
+                user,
+            )
+            event_stats = serializer.serialize(SnubaTSResult(
+                obj.event_stats_snapshot.snuba_values,
+                obj.event_stats_snapshot.start,
+                obj.event_stats_snapshot.end,
+                obj.event_stats_snapshot.period,
+            ))
 
-    def serialize(self, obj, attrs, user):
-        incident = attrs['incident']
         return {
             'id': six.text_type(obj.id),
             'incidentIdentifier': six.text_type(incident.identifier),
-            'userId': six.text_type(obj.user_id),
+            'user': attrs['user'],
             'type': obj.type,
             'value': obj.value,
             'previousValue': obj.previous_value,
             'comment': obj.comment,
+            'eventStats': event_stats,
+            'dateCreated': obj.date_added,
         }
diff --git a/src/sentry/api/serializers/models/incidentseen.py b/src/sentry/api/serializers/models/incidentseen.py
index 02cb62c876..999477fdfa 100644
--- a/src/sentry/api/serializers/models/incidentseen.py
+++ b/src/sentry/api/serializers/models/incidentseen.py
@@ -4,11 +4,13 @@ import six
 
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.incidents.models import IncidentSeen
+from sentry.utils.db import attach_foreignkey
 
 
 @register(IncidentSeen)
 class IncidentSeenSerializer(Serializer):
     def get_attrs(self, item_list, user):
+        attach_foreignkey(item_list, IncidentSeen.user)
         user_map = {d['id']: d for d in serialize(set(i.user for i in item_list), user)}
 
         result = {}
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 4afd5eec48..c61b675306 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -81,6 +81,7 @@ from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_environments import OrganizationEnvironmentsEndpoint
 from .endpoints.organization_eventid import EventIdLookupEndpoint
 from .endpoints.organization_slugs import SlugsUpdateEndpoint
+from .endpoints.organization_incident_activity_index import OrganizationIncidentActivityIndexEndpoint
 from .endpoints.organization_incident_comment_index import OrganizationIncidentCommentIndexEndpoint
 from .endpoints.organization_incident_index import OrganizationIncidentIndexEndpoint
 from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
@@ -417,9 +418,14 @@ urlpatterns = patterns(
 
     # Incidents
     url(
-        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/$',
-        OrganizationIncidentIndexEndpoint.as_view(),
-        name='sentry-api-0-organization-incident-index'
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/activity/$',
+        OrganizationIncidentActivityIndexEndpoint.as_view(),
+        name='sentry-api-0-organization-incident-activity'
+    ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/comments/$',
+        OrganizationIncidentCommentIndexEndpoint.as_view(),
+        name='sentry-api-0-organization-incident-comments'
     ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/$',
@@ -427,9 +433,9 @@ urlpatterns = patterns(
         name='sentry-api-0-organization-incident-details'
     ),
     url(
-        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/comments/$',
-        OrganizationIncidentCommentIndexEndpoint.as_view(),
-        name='sentry-api-0-organization-incident-comments'
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/$',
+        OrganizationIncidentIndexEndpoint.as_view(),
+        name='sentry-api-0-organization-incident-index'
     ),
 
     url(
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 770e3cfec0..3d18b43e36 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -246,3 +246,9 @@ def get_incident_aggregates(incident):
 
 def subscribe_to_incident(incident, user):
     return IncidentSubscription.objects.get_or_create(incident=incident, user=user)
+
+
+def get_incident_activity(incident):
+    return IncidentActivity.objects.filter(
+        incident=incident,
+    ).select_related('user', 'event_stats_snapshot', 'incident')
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index dd66c1db85..e47c284a2a 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -159,6 +159,15 @@ class TimeSeriesSnapshot(Model):
         app_label = 'sentry'
         db_table = 'sentry_timeseriessnapshot'
 
+    @property
+    def snuba_values(self):
+        """
+        Returns values matching the snuba format, a list of dicts with 'time'
+        and 'count' keys.
+        :return:
+        """
+        return {'data': [{'time': time, 'count': count} for time, count in self.values]}
+
 
 class IncidentActivityType(Enum):
     CREATED = 0
diff --git a/tests/sentry/api/endpoints/test_organization_incident_activity_index.py b/tests/sentry/api/endpoints/test_organization_incident_activity_index.py
new file mode 100644
index 0000000000..06051614ce
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_incident_activity_index.py
@@ -0,0 +1,84 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+
+from django.utils import timezone
+from exam import fixture
+
+from sentry.api.serializers import serialize
+from sentry.incidents.logic import (
+    create_incident_activity,
+    create_initial_event_stats_snapshot,
+)
+from sentry.incidents.models import IncidentActivityType
+from sentry.testutils import APITestCase
+
+
+class OrganizationIncidentActivityIndexTest(APITestCase):
+    endpoint = 'sentry-api-0-organization-incident-activity'
+
+    def setUp(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+
+    @fixture
+    def organization(self):
+        return self.create_organization(owner=self.create_user())
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    def test_no_perms(self):
+        incident = self.create_incident()
+        self.login_as(self.create_user())
+        with self.feature('organizations:incidents'):
+            resp = self.get_response(incident.organization.slug, incident.id)
+        assert resp.status_code == 403
+
+    def test_no_feature(self):
+        incident = self.create_incident()
+        resp = self.get_response(incident.organization.slug, incident.id)
+        assert resp.status_code == 404
+
+    def test_simple(self):
+        incident = self.create_incident(
+            date_started=timezone.now() - timedelta(hours=2),
+            projects=[self.project],
+            query='',
+        )
+        snapshot = create_initial_event_stats_snapshot(incident)
+        activities = [
+            create_incident_activity(
+                incident=incident,
+                activity_type=IncidentActivityType.CREATED,
+                user=self.user,
+                comment='hello',
+                event_stats_snapshot=snapshot,
+            ),
+            create_incident_activity(
+                incident=incident,
+                activity_type=IncidentActivityType.COMMENT,
+                user=self.user,
+                comment='goodbye',
+            ),
+        ]
+
+        expected = serialize(activities, user=self.user)
+
+        with self.feature('organizations:incidents'):
+            resp = self.get_valid_response(
+                incident.organization.slug,
+                incident.identifier,
+                desc=0,
+            )
+        assert resp.data == expected
+
+        expected.reverse()
+        with self.feature('organizations:incidents'):
+            resp = self.get_valid_response(incident.organization.slug, incident.identifier)
+        assert resp.data == expected
diff --git a/tests/sentry/api/endpoints/test_organization_incident_comment_index.py b/tests/sentry/api/endpoints/test_organization_incident_comment_index.py
index eba564adc4..65268953b4 100644
--- a/tests/sentry/api/endpoints/test_organization_incident_comment_index.py
+++ b/tests/sentry/api/endpoints/test_organization_incident_comment_index.py
@@ -47,7 +47,7 @@ class OrganizationIncidentCommentCreateEndpointTest(APITestCase):
         assert activity.type == IncidentActivityType.COMMENT.value
         assert activity.user == self.user
         assert activity.comment == comment
-        assert resp.data == serialize([activity])[0]
+        assert resp.data == serialize([activity], self.user)[0]
 
     def test_access(self):
         other_user = self.create_user()
diff --git a/tests/sentry/api/serializers/test_incident_activity.py b/tests/sentry/api/serializers/test_incident_activity.py
index 13e6c18fd8..ac2b2b5056 100644
--- a/tests/sentry/api/serializers/test_incident_activity.py
+++ b/tests/sentry/api/serializers/test_incident_activity.py
@@ -2,16 +2,26 @@
 
 from __future__ import absolute_import
 
+from datetime import timedelta
+from uuid import uuid4
 
 import six
+from django.utils import timezone
+from freezegun import freeze_time
 
 from sentry.api.serializers import serialize
 from sentry.incidents.models import IncidentActivityType
-from sentry.incidents.logic import create_incident_activity
-from sentry.testutils import TestCase
+from sentry.incidents.logic import (
+    create_incident_activity,
+    create_initial_event_stats_snapshot,
+)
+from sentry.testutils import (
+    SnubaTestCase,
+    TestCase,
+)
 
 
-class IncidentSerializerTest(TestCase):
+class IncidentActivitySerializerTest(TestCase, SnubaTestCase):
     def test_simple(self):
         activity = create_incident_activity(
             incident=self.create_incident(),
@@ -23,8 +33,65 @@ class IncidentSerializerTest(TestCase):
 
         assert result['id'] == six.text_type(activity.id)
         assert result['incidentIdentifier'] == six.text_type(activity.incident.identifier)
-        assert result['userId'] == six.text_type(activity.user_id)
+        assert result['user'] == serialize(activity.user)
         assert result['type'] == activity.type
         assert result['value'] is None
         assert result['previousValue'] is None
         assert result['comment'] == activity.comment
+        assert result['dateCreated'] == activity.date_added
+
+    def test_no_user(self):
+        activity = create_incident_activity(
+            incident=self.create_incident(),
+            activity_type=IncidentActivityType.COMMENT,
+            user=None,
+            comment='hello',
+        )
+        result = serialize(activity)
+
+        assert result['id'] == six.text_type(activity.id)
+        assert result['incidentIdentifier'] == six.text_type(activity.incident.identifier)
+        assert result['user'] is None
+        assert result['type'] == activity.type
+        assert result['value'] is None
+        assert result['previousValue'] is None
+        assert result['comment'] == activity.comment
+        assert result['dateCreated'] == activity.date_added
+
+    @freeze_time()
+    def test_event_stats(self):
+        for _ in range(2):
+            self.store_event(
+                data={
+                    'event_id': uuid4().hex,
+                    'fingerprint': ['group1'],
+                    'timestamp': (timezone.now() - timedelta(seconds=1)).isoformat()[:19]
+                },
+                project_id=self.project.id,
+            )
+        incident = self.create_incident(
+            date_started=timezone.now() - timedelta(hours=2),
+            projects=[self.project],
+            query='',
+        )
+        snapshot = create_initial_event_stats_snapshot(incident)
+        activity = create_incident_activity(
+            incident=incident,
+            activity_type=IncidentActivityType.COMMENT,
+            user=self.user,
+            comment='hello',
+            event_stats_snapshot=snapshot,
+        )
+        result = serialize(activity)
+
+        assert result['id'] == six.text_type(activity.id)
+        assert result['incidentIdentifier'] == six.text_type(activity.incident.identifier)
+        assert result['user'] == serialize(activity.user)
+        assert result['type'] == activity.type
+        assert result['value'] is None
+        assert result['previousValue'] is None
+        assert result['comment'] == activity.comment
+        event_stats = result['eventStats']['data']
+        assert [stat[1] for stat in event_stats[:-1]] == [[]] * len(event_stats[:-1])
+        assert event_stats[-1][1] == [{'count': 2}]
+        assert result['dateCreated'] == activity.date_added
