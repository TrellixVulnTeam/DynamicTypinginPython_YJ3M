commit 7921c07d895017b6d14afa72911bbbfd87757abf
Author: Chris Montrois <cmontrois@quickleft.com>
Date:   Fri Jul 10 16:02:17 2015 -0600

    Fix SearchBar state with url params
    
    The last commit had a bug where the SearchBar would not sync its state with the
    url upon mounting. It now syncs and properly passes `state.query` to the
    SearchBar.

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 6142881daa..f2ef3f6a8e 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -73,10 +73,11 @@ var Stream = React.createClass({
       });
     }
 
+    this.syncStateWithRoute();
     this.fetchData();
   },
 
-  routeDidChange() {
+  syncStateWithRoute() {
     var currentQuery = this.context.router.getCurrentQuery();
 
     var filter = {};
@@ -91,12 +92,15 @@ var Stream = React.createClass({
     this.setState({
       filter: filter,
       query: query
-    }, function() {
-      this._poller.disable();
-      this.fetchData();
     });
   },
 
+  routeDidChange() {
+    this.syncStateWithRoute();
+    this._poller.disable();
+    this.fetchData();
+  },
+
   componentWillUnmount() {
     this._poller.disable();
     GroupStore.loadInitialData([]);
@@ -203,10 +207,10 @@ var Stream = React.createClass({
     this.transitionTo();
   },
 
-  onQueryChange(query) {
+  onQueryChange(query, callback) {
     this.setState({
       query: query
-    });
+    }, callback);
   },
 
   onFilterChange(filter) {
@@ -276,15 +280,10 @@ var Stream = React.createClass({
   render() {
     var router = this.context.router;
     var params = router.getCurrentParams();
-    var query = this.state.query;
-
-    if (params.hasOwnProperty("query")) {
-      query = params.query;
-    }
 
     return (
       <div>
-        <StreamFilters query={query}
+        <StreamFilters query={this.state.query}
           onQueryChange={this.onQueryChange}
           onFilterChange={this.onFilterChange}
           onSearch={this.onSearch} />
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 23100c4746..123f28fc96 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -31,8 +31,7 @@ var SearchBar = React.createClass({
   },
 
   clearSearch() {
-    this.props.onQueryChange("");
-    this.props.onSearch();
+    this.props.onQueryChange("", this.props.onSearch);
   },
 
   onQueryFocus() {
diff --git a/tests/js/spec/views/stream/searchBar.spec.js b/tests/js/spec/views/stream/searchBar.spec.js
index e3c31ad083..cd3cfb2428 100644
--- a/tests/js/spec/views/stream/searchBar.spec.js
+++ b/tests/js/spec/views/stream/searchBar.spec.js
@@ -28,11 +28,19 @@ describe("SearchBar", function() {
       expect(stubbedOnQueryChange.calledWith("")).to.be.true;
     });
 
-    it("calls onSearch()", function() {
-      var stubbedOnSearch = this.sandbox.spy();
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar query={"is:unresolved"} onSearch={stubbedOnSearch}/>);
+    it("calls onSearch()", function(done) {
+      var props = {
+        query: "is:unresolved",
+        onSearch: this.sandbox.spy(),
+        onQueryChange: (query, callback) => callback()
+      };
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar {...props} />);
       wrapper.clearSearch();
-      expect(stubbedOnSearch.called).to.be.true;
+
+      setTimeout(() => {
+        expect(props.onSearch.called).to.be.true;
+        done();
+      });
     });
 
   });
@@ -71,16 +79,22 @@ describe("SearchBar", function() {
       expect(stubOnSearch.called).to.be.true;
     });
 
-    it("invokes onSearch() when search is cleared", function() {
-      var stubOnSearch = this.sandbox.spy();
-      var stubOnQueryChange = this.sandbox.spy();
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar onSearch={stubOnSearch} query={"not blank"} onQueryChange={stubOnQueryChange}/>);
+    it("invokes onSearch() when search is cleared", function(done) {
+      var props = {
+        query: "is:unresolved",
+        onSearch: this.sandbox.spy(),
+        onQueryChange: this.sandbox.spy()
+      };
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar {...props} />);
 
       var cancelButton = findWithClass(wrapper, "search-clear-form");
       TestUtils.Simulate.click(cancelButton);
 
-      expect(stubOnSearch.called).to.be.true;
-      expect(stubOnQueryChange.calledWith("")).to.be.true;
+      setTimeout(() => {
+        // expect(props.onSearch.called).to.be.true;
+        expect(props.onQueryChange.calledWith("", props.onSearch)).to.be.true;
+        done();
+      });
     });
 
   });
