commit d95c3ebcf219b99ff95ea48cda00476d4597d1f8
Author: Max Bittker <maxbittker@gmail.com>
Date:   Tue Aug 29 11:15:02 2017 -0700

    update project creation (#5849)
    
    * create new react project creation page that captures platform intent
    
    
    * remove old route & template

diff --git a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
index 2ce8f130b1..5ed0922938 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
@@ -29,7 +29,7 @@ const HomeContainer = React.createClass({
           <div className="align-right hidden-xs">
             {access.has('project:write')
               ? <Button
-                  href={`/organizations/${org.slug}/projects/new/`}
+                  to={`/organizations/${org.slug}/projects/new/`}
                   priority="primary"
                   style={{marginRight: 5}}>
                   {t('New Project')}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index a6604fe495..0fc6482e13 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -43,7 +43,8 @@ import OrganizationSettings from './views/organizationSettings';
 import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import OnboardingWizard from './views/onboarding/index';
-import OnboardingProject from './views/onboarding/project/index';
+import CreateProject from './views/onboarding/createProject';
+
 import OnboardingConfigure from './views/onboarding/configure/index';
 
 import AllTeamsList from './views/organizationTeams/allTeamsList';
@@ -57,6 +58,7 @@ import ProjectDataForwarding from './views/projectDataForwarding';
 import ProjectDetails from './views/projectDetails';
 import ProjectEvents from './views/projectEvents';
 import ProjectFilters from './views/projectFilters';
+import NewProject from './views/projectInstall/newProject';
 import ProjectGettingStarted from './views/projectInstall/gettingStarted';
 import ProjectDocsContext from './views/projectInstall/docsContext';
 import ProjectInstallOverview from './views/projectInstall/overview';
@@ -147,7 +149,7 @@ function routes() {
 
       <Route path="/onboarding/:orgId/" component={errorHandler(OrganizationContext)}>
         <Route path="" component={errorHandler(OnboardingWizard)}>
-          <IndexRoute component={errorHandler(OnboardingProject)} />
+          <IndexRoute component={errorHandler(CreateProject)} />
           <Route
             path=":projectId/configure/(:platform)"
             component={errorHandler(OnboardingConfigure)}
@@ -207,6 +209,11 @@ function routes() {
           component={errorHandler(MyIssuesViewed)}
         />
 
+        <Route
+          path="/organizations/:orgId/projects/new/"
+          component={errorHandler(NewProject)}
+        />
+
         <Route
           path="/organizations/:orgId/projects/choose/"
           component={errorHandler(ProjectChooser)}
diff --git a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
new file mode 100644
index 0000000000..b6e10c655d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
@@ -0,0 +1,135 @@
+import React from 'react';
+import {browserHistory, Link} from 'react-router';
+
+import ApiMixin from '../../mixins/apiMixin';
+import OrganizationState from '../../mixins/organizationState';
+import ProjectActions from '../../actions/projectActions';
+
+import {getPlatformName} from './utils';
+import OnboardingProject from '../onboarding/project';
+
+import {t} from '../../locale';
+import Raven from 'raven-js';
+
+const CreateProject = React.createClass({
+  propTypes: {
+    getDocsUrl: React.PropTypes.func
+  },
+
+  contextTypes: {
+    location: React.PropTypes.object
+  },
+
+  mixins: [ApiMixin, OrganizationState],
+
+  getDefaultProps() {
+    return {
+      getDocsUrl: ({slug, projectSlug, platform}) =>
+        `/onboarding/${slug}/${projectSlug}/configure/${platform}`
+    };
+  },
+
+  getInitialState() {
+    let {teams} = this.getOrganization();
+    let accessTeams = teams.filter(team => team.hasAccess);
+
+    let team =
+      this.context.location.query.team || (accessTeams.length && accessTeams[0].slug);
+    return {
+      loading: true,
+      error: false,
+      platform: '',
+      projectName: '',
+      team: team,
+      inFlight: false
+    };
+  },
+
+  createProject() {
+    let {slug} = this.getOrganization();
+    let {projectName, platform, team, inFlight} = this.state;
+
+    //prevent double-trigger
+    if (inFlight) return;
+    this.setState({inFlight: true});
+
+    if (!projectName) {
+      Raven.captureMessage('Onboarding no project name ', {
+        extra: {props: this.props, state: this.state}
+      });
+    }
+
+    this.api.request(`/teams/${slug}/${team}/projects/`, {
+      method: 'POST',
+      data: {
+        name: projectName,
+        platform: platform
+      },
+      success: data => {
+        ProjectActions.createSuccess(data);
+
+        // navigate to new url _now_
+        const url = this.props.getDocsUrl({slug, projectSlug: data.slug, platform});
+        this.setState({inFlight: false});
+        browserHistory.push(url);
+      },
+      error: err => {
+        this.setState({
+          inFlight: false,
+          error: err.responseJSON.detail
+        });
+
+        if (err.status != 403) {
+          Raven.captureMessage('Onboarding project creation failed', {
+            extra: {
+              err,
+              props: this.props,
+              state: this.state
+            }
+          });
+        }
+      }
+    });
+  },
+
+  render() {
+    let {projectName, platform, error} = this.state;
+    let {slug, teams} = this.getOrganization();
+    let accessTeams = teams.filter(team => team.hasAccess);
+
+    const stepProps = {
+      next: this.createProject,
+      platform: platform,
+      setPlatform: p => {
+        if (!projectName || (platform && getPlatformName(platform) === projectName)) {
+          this.setState({projectName: getPlatformName(p)});
+        }
+        this.setState({platform: p});
+      },
+      name: projectName,
+      setName: n => this.setState({projectName: n}),
+      team: this.state.team,
+      teams: accessTeams,
+      setTeam: teamSlug => this.setState({team: teamSlug})
+    };
+    return (
+      <div>
+        {error && <h2 className="alert alert-error">{error}</h2>}
+        {accessTeams.length
+          ? <OnboardingProject {...stepProps} />
+          : <div>
+              <h4>
+                {t(
+                  'You cannot create a new project because there are no teams to assign it to.'
+                )}
+              </h4>
+              <Link to={`/organizations/${slug}/teams/new/`} className="btn btn-primary">
+                {t('Create a Team')}
+              </Link>
+            </div>}
+      </div>
+    );
+  }
+});
+
+export default CreateProject;
diff --git a/src/sentry/static/sentry/app/views/onboarding/index.jsx b/src/sentry/static/sentry/app/views/onboarding/index.jsx
index fd7b9a7e7a..465fcb5b97 100644
--- a/src/sentry/static/sentry/app/views/onboarding/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/index.jsx
@@ -1,106 +1,13 @@
 import React from 'react';
 import DocumentTitle from 'react-document-title';
-import {browserHistory} from 'react-router';
 
-import ApiMixin from '../../mixins/apiMixin';
 import ProgressNodes from './progress';
-import ProjectActions from '../../actions/projectActions';
-import {getPlatformName} from './utils';
-
-import Raven from 'raven-js';
 
 const OnboardingWizard = React.createClass({
   contextTypes: {
     organization: React.PropTypes.object
   },
 
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      platform: '',
-      projectName: ''
-    };
-  },
-
-  renderStep() {
-    let {projectName, platform} = this.state;
-
-    const stepProps = {
-      next: this.next,
-      platform: platform,
-      setPlatform: p => {
-        if (!projectName || (platform && getPlatformName(platform) === projectName)) {
-          this.setState({projectName: getPlatformName(p)});
-        }
-        this.setState({platform: p});
-      },
-      name: projectName,
-      setName: n => this.setState({projectName: n})
-    };
-
-    return React.cloneElement(this.props.children, stepProps);
-  },
-
-  getProjectUrlProps(project) {
-    let org = this.context.organization;
-    let path = `/onboarding/${org.slug}/${project.slug}/configure/${this.state.platform}`;
-    return path;
-  },
-
-  createProject() {
-    let {orgId} = this.props.params;
-    let {teams} = this.context.organization;
-    let {projectName, platform} = this.state;
-
-    if (!projectName) {
-      Raven.captureMessage('Onboarding no project name ', {
-        extra: {props: this.props, state: this.state}
-      });
-    }
-
-    this.api.request(`/teams/${orgId}/${teams[0].slug}/projects/`, {
-      method: 'POST',
-      data: {
-        name: projectName,
-        platform: platform
-      },
-      success: data => {
-        data = {
-          ...data,
-          orgId: orgId,
-          teamId: orgId
-        };
-
-        ProjectActions.createSuccess(data);
-
-        // navigate to new url _now_
-        const url = this.getProjectUrlProps(data);
-        browserHistory.push(url);
-      },
-      error: err => {
-        Raven.captureMessage('Onboarding project creation failed', {
-          extra: {
-            err,
-            props: this.props,
-            state: this.state
-          }
-        });
-
-        this.setState({
-          loading: false,
-          error: true
-        });
-      }
-    });
-  },
-
-  next() {
-    this.createProject();
-  },
-
   render() {
     return (
       <div className="onboarding-container">
@@ -108,7 +15,7 @@ const OnboardingWizard = React.createClass({
         <div className="step-container">
           <ProgressNodes params={this.props.params} />
           <div>
-            <this.renderStep />
+            {this.props.children}
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/onboarding/onboarding.less b/src/sentry/static/sentry/app/views/onboarding/onboarding.less
index 45739d80e0..b1fe08f84b 100644
--- a/src/sentry/static/sentry/app/views/onboarding/onboarding.less
+++ b/src/sentry/static/sentry/app/views/onboarding/onboarding.less
@@ -1,24 +1,23 @@
 @onboarding-sidebar-width: 300px;
 
 .onboarding-container {
-
   margin-left: @onboarding-sidebar-width - @sidebar-width;
 
   max-width: 800px + @onboarding-sidebar-width;
 
-  @media(max-width: @screen-sm-max) {
-      margin-left: 0;
+  @media (max-width: @screen-sm-max) {
+    margin-left: 0;
   }
 
-  .step-container{
+  .step-container {
     padding: 0 40px;
   }
 
   // Awaiting event
 
   .awaiting-event {
-    background: rgba(255,255,255, .90);
-    box-shadow: 0 -1px 0 rgba(0,0,0, .1);
+    background: rgba(255, 255, 255, .90);
+    box-shadow: 0 -1px 0 rgba(0, 0, 0, .1);
     padding: 20px 0;
     position: sticky;
     bottom: 0;
@@ -50,38 +49,37 @@
     background: url(../../../images/sentry-robot.png);
     background-size: cover;
 
-  .eye {
-    display: block;
-    .square(4px);
-    border-radius: 6px;
-    position: absolute;
-    top: 21px;
-    left: 26px;
+    .eye {
+      display: block;
+      .square(4px);
+      border-radius: 6px;
+      position: absolute;
+      top: 21px;
+      left: 26px;
 
       -webkit-animation: blink-eye .6s infinite;
-      -moz-animation:    blink-eye .6s infinite;
-      -o-animation:      blink-eye .6s infinite;
-      animation:         blink-eye .6s infinite;
+      -moz-animation: blink-eye .6s infinite;
+      -o-animation: blink-eye .6s infinite;
+      animation: blink-eye .6s infinite;
     }
   }
 
-  .onboarding-sidebar{
+  .onboarding-sidebar {
     width: 300px;
     height: 100%;
     position: fixed;
     z-index: 10000;
     top: 0;
-    left:0;
+    left: 0;
     color: whitesmoke;
     background: url(../../../images/sentry-pattern-dark.png);
-    background-color: #3B3247;
+    background-color: #3b3247;
     background-size: 400px;
 
-    @media(max-width: @screen-sm-max) {
+    @media (max-width: @screen-sm-max) {
       display: none;
     }
 
-
     .sentry-flag {
       font-size: 24px;
       line-height: 1;
@@ -91,8 +89,8 @@
       padding: 14px 20px 11px;
     }
 
-    .progress-nodes{
-      div.node{
+    .progress-nodes {
+      div.node {
         width: 190px;
         margin: auto;
         margin-bottom: 30px;
@@ -102,20 +100,20 @@
         padding-left: 26px;
         border-color: @50;
         line-height: 1.2;
-        text-shadow: 0 2px 5px rgba(0,0,0, .2);
+        text-shadow: 0 2px 5px rgba(0, 0, 0, .2);
 
-        &.active{
+        &.active {
           color: white;
           font-weight: 600;
 
-            &::before{
+          &::before {
             border-color: white;
           }
         }
 
         span.node {
-          &::before{
-            content:'';
+          &::before {
+            content: '';
             position: absolute;
             left: -10px;
             border-radius: 100%;
@@ -125,8 +123,8 @@
             border: 3px solid;
           }
 
-          &.done{
-            &::before{
+          &.done {
+            &::before {
               font-size: 14px;
               content: '●';
               text-align: center;
@@ -143,156 +141,181 @@
       text-align: center;
       width: 100%;
       padding: 20px;
-      p,a {
-        margin:0;
+      p,
+      a {
+        margin: 0;
         color: @40;
       }
 
-       &:hover p,a{
-        color:@30;
+      &:hover p,
+      a {
+        color: @30;
       }
     }
   }
 
-  .platformicon-stack{
-    background-color: white;
-    position: absolute;
+  .install .install-content {
+    padding-left: 15px; // Fix .row negative margin
   }
 
-  .project-name{
-    background: #fff;
-    box-shadow: 0 -1px 0 rgba(0,0,0, .1);
-    padding: 20px 0;
+  .new-project-name{
     position: sticky;
-    bottom: 0;
-    .clearfix;
+  }
+}
 
-    .platform-tile{
-      display: inline-block;
-      vertical-align: middle;
-    }
+.create-project-form{
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-end;
+  flex-wrap:wrap;
+  padding: 20px 0;
+  box-shadow: 0 -1px 0 rgba(0, 0, 0, .1);
+
+  p{
+    margin-top: 20px;
+    color: @50;
+  }
+}
 
-    .project-name-wrapper {
-      .form-control;
-      position: relative;
-      padding-left: 44px;
-      width: 300px;
-      float: left;
+.new-project-name{
+  display: flex;
+  flex-direction: column;
+  background: #fff;
+  .clearfix;
 
-      &.required{
-        border: 1px #e03e2f solid;
-      }
+  .platform-tile {
+    display: inline-block;
+    vertical-align: middle;
+  }
 
-      input {
-        background: none;
-        border: 0;
-        display: block;
-        width: 100%;
-        font-weight: 600;
+  h4 {
+     display: inline-block;
+  }
 
-        &:focus {
-          outline: none;
-        }
+  .project-name-wrapper {
+    .form-control;
+    position: relative;
+    padding-left: 44px;
+    width: 300px;
 
-        &::placeholder {
-          color: @50;
-        }
+    &.required {
+      border: 1px #e03e2f solid;
+    }
+
+    input {
+      background: none;
+      border: 0;
+      display: block;
+      width: 100%;
+      font-weight: 600;
+
+      &:focus {
+        outline: none;
       }
 
-      .platform-tile {
-        position: absolute;
-        left: 6px;
-        top: 3px;
-        .platformicon {
-          color: @40 !important;
-        }
+      &::placeholder {
+        color: @50;
+      }
+    }
+
+    .platform-tile {
+      position: absolute;
+      left: 6px;
+      top: 3px;
+      .platformicon {
+        color: @40 !important;
       }
     }
   }
 
-  .install .install-content {
-    padding-left: 15px; // Fix .row negative margin
+}
+.new-project-team{
+  .project-team-wrapper {
+    position: relative;
+    font-weight: 600;
   }
 }
 
+.platformicon-stack {
+  background-color: white;
+  position: absolute;
+}
 
-.platform-picker{
+.platform-picker {
+  .nav-tabs {
     border-bottom: 1px solid @trim;
+    margin: 0 0 15px;
+  }
+  .platform-filter-container {
+    .form-control;
+    border-radius: 22px;
+    padding: 0 8px;
+    position: relative;
+    top: -4px;
 
-    .nav-tabs {
-      border-bottom: 1px solid @trim;
-      margin: 0 0 15px;
+    @media (max-width: @screen-sm-max) {
+      display: none;
     }
-    .platform-filter-container {
-      .form-control;
-      border-radius: 22px;
-      padding: 0 8px;
-      position: relative;
-      top: -4px;
-
-      @media(max-width: @screen-sm-max) {
-        display: none;
-      }
 
-      .icon-search {
-        color: @30;
-        font-size: 12px;
-        margin-right: 4px;
-      }
+    .icon-search {
+      color: @30;
+      font-size: 12px;
+      margin-right: 4px;
     }
-    .platform-filter {
-      background: transparent;
-      border: none;
-      font-size: 14px;
-      &:focus {
-        outline: none;
-      }
-
-      &::placeholder {
-        color: @50;
-      }
+  }
+  .platform-filter {
+    background: transparent;
+    border: none;
+    font-size: 14px;
+    &:focus {
+      outline: none;
     }
-    .platform-tiles{
-      margin: auto;
-      display: flex;
-      flex-wrap: wrap;
-      padding: 0 0 15px;
 
-      .platform-card {
-        display: flex;
-        flex-direction: column;
-        width: 120px;
-        padding: 0 0 14px;
-        cursor: pointer;
-        border-radius: 4px;
-
-        @media(max-width: @screen-sm-max) {
-          width: 70px;
-        }
-
-        &:hover {
-          background: #f7f5fa;
-        }
+    &::placeholder {
+      color: @50;
+    }
+  }
+  .platform-tiles {
+    margin: auto;
+    display: flex;
+    flex-wrap: wrap;
+    padding: 0 0 15px;
 
-        &.selected {
-          background: darken(@alert-info-bg-color, 2);
-      }
+    .platform-card {
+      display: flex;
+      flex-direction: column;
+      width: 120px;
+      padding: 0 0 14px;
+      cursor: pointer;
+      border-radius: 4px;
+
+      @media (max-width: @screen-sm-max) {
+        width: 70px;
       }
 
-      &.client-platform-list li {
-        margin: 0 auto;
+      &:hover {
+        background: #f7f5fa;
       }
-      &.client-platform-list.shade{
-        background-color: @40;
-        filter: brightness(0.4);
+
+      &.selected {
+        background: darken(@alert-info-bg-color, 2);
       }
     }
 
-    h5 {
-      text-align: center;
-      margin: 0;
-      font-size: 15px;
-      .truncate;
-      line-height: 1.2;
+    &.client-platform-list li {
+      margin: 0 auto;
     }
+    &.client-platform-list.shade {
+      background-color: @40;
+      filter: brightness(0.4);
+    }
+  }
+
+  h5 {
+    text-align: center;
+    margin: 0;
+    font-size: 15px;
+    .truncate;
+    line-height: 1.2;
   }
+}
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/index.jsx b/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
index 85ec5aa72c..52ae8d0a52 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
@@ -3,6 +3,7 @@ import classnames from 'classnames';
 
 import PlatformPicker from './platformpicker';
 import PlatformiconTile from './platformiconTile';
+import SelectInput from '../../../components/selectInput';
 import {t} from '../../../locale';
 
 const Project = React.createClass({
@@ -11,7 +12,18 @@ const Project = React.createClass({
     setPlatform: React.PropTypes.func,
     platform: React.PropTypes.string,
     setName: React.PropTypes.func,
-    name: React.PropTypes.string
+    name: React.PropTypes.string,
+    team: React.PropTypes.string,
+    setTeam: React.PropTypes.func,
+    teams: React.PropTypes.array
+  },
+
+  getDefaultProps() {
+    return {
+      team: '',
+      setTeam: () => {},
+      teams: []
+    };
   },
 
   getInitialState() {
@@ -30,31 +42,62 @@ const Project = React.createClass({
     this.setWarning(this.props.name);
     if (this.props.name) this.props.next();
   },
+  renderTeamPicker() {
+    let {team, teams, setTeam} = this.props;
+    if (teams.length < 2) return null;
+    return (
+      <div className="new-project-team">
+        <h4>{t('Team') + ':'}</h4>
+        <div className="project-team-wrapper">
+          <SelectInput
+            value={team}
+            style={{width: 180, padding: '10px'}}
+            required={true}
+            onChange={e => setTeam(e[0].value)}>
+            {teams.map(({slug, name, id}, i) => (
+              <option key={id} value={slug}>{name}</option>
+            ))}
+          </SelectInput>
+        </div>
+      </div>
+    );
+  },
 
   render() {
     return (
       <div className="onboarding-info">
-        <h2>{t('Choose a language or framework')}</h2>
+        <h4>{t('Choose a language or framework') + ':'}</h4>
         <PlatformPicker {...this.props} showOther={true} />
-        <div className="project-name client-platform">
-          <h4>{t('Give your project a name') + ':'}</h4>
-          <div
-            className={classnames('project-name-wrapper', {
-              required: this.state.projectRequired
-            })}>
-            <PlatformiconTile platform={this.props.platform} />
-            <input
-              type="text"
-              name="name"
-              label="Project Name"
-              placeholder="Project name"
-              value={this.props.name}
-              onChange={e => this.props.setName(e.target.value)}
-            />
+        <div className="create-project-form">
+          <div className="new-project-name client-platform">
+            <h4>{t('Give your project a name') + ':'}</h4>
+            <div
+              className={classnames('project-name-wrapper', {
+                required: this.state.projectRequired
+              })}>
+              <PlatformiconTile platform={this.props.platform} />
+              <input
+                type="text"
+                name="name"
+                label="Project Name"
+                placeholder="Project name"
+                autoComplete="off"
+                value={this.props.name}
+                onChange={e => this.props.setName(e.target.value)}
+              />
+            </div>
+          </div>
+          {this.renderTeamPicker()}
+          <div>
+            <button className="btn btn-primary submit-new-team" onClick={this.submit}>
+              {t('Create Project')}
+            </button>
           </div>
-          <button className="btn btn-primary pull-right" onClick={this.submit}>
-            {t('Continue')}
-          </button>
+          <p>
+            {t(
+              'Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects your API server and frontend client.'
+            )}
+          </p>
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx b/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
index 314b2dd199..d446d99714 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
@@ -22,7 +22,10 @@ const GettingStartedBody = React.createClass({
         <div className="container">
           <div className="content">
             <ProjectDocsContext>
-              {this.props.children}
+              {React.cloneElement(this.props.children, {
+                linkPath: (orgId, projectId, platform) =>
+                  `/${orgId}/${projectId}/getting-started/${platform}/`
+              })}
             </ProjectDocsContext>
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
new file mode 100644
index 0000000000..d3a60247c9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
@@ -0,0 +1,36 @@
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+
+import OrganizationState from '../../mixins/organizationState';
+
+import CreateProject from '../onboarding/createProject';
+import ProjectSelector from '../../components/projectHeader/projectSelector';
+
+const NewProject = React.createClass({
+  mixins: [OrganizationState],
+
+  render() {
+    return (
+      <div className="getting-started">
+        <div className="sub-header flex flex-container flex-vertically-centered">
+          <div className="p-t-1 p-b-1">
+            <ProjectSelector organization={this.getOrganization()} />
+          </div>
+        </div>
+        <div className="container">
+          <div className="content">
+            <DocumentTitle title={'Sentry'} />
+            <CreateProject
+              getDocsUrl={({slug, projectSlug, platform}) => {
+                if (platform === 'other') platform = '';
+                return `/${slug}/${projectSlug}/getting-started/${platform}`;
+              }}
+            />
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default NewProject;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index f77fa4163b..71dcab3e5b 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -10,7 +10,7 @@ import {t, tct} from '../../locale';
 
 const ProjectInstallPlatform = React.createClass({
   propTypes: {
-    platformData: React.PropTypes.object.isRequired,
+    platformData: React.PropTypes.object,
     linkPath: React.PropTypes.func
   },
 
@@ -160,8 +160,6 @@ const ProjectInstallPlatform = React.createClass({
                 : <div dangerouslySetInnerHTML={{__html: this.state.html}} />}
 
           {this.isGettingStarted() &&
-            // Using <a /> instead of <Link /> as hashchange events are not
-            // triggered when switching views within React Router
             <p>
               <Link
                 to={`/${orgId}/${projectId}/#welcome`}
diff --git a/src/sentry/templates/sentry/create-project.html b/src/sentry/templates/sentry/create-project.html
deleted file mode 100644
index 3c12e2f875..0000000000
--- a/src/sentry/templates/sentry/create-project.html
+++ /dev/null
@@ -1,35 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_features %}
-
-{% block global_sidebar %}{% endblock %}
-{% block title %}{% trans "New Project" %} | {{ block.super }}{% endblock %}
-{% block sub-header %}{% endblock %}
-
-{% block main %}
-<div class="create-flow">
-  <h2 class="m-b-1">{% trans "Create a New Project" %}</h2>
-
-  <p>{% blocktrans %}Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects for production vs development instances, or separate projects for your web app and mobile app.{% endblocktrans %}</p>
-
-  <form action="" method="post">
-    {% csrf_token %}
-    {% if form.errors %}
-      <div class="alert alert-block alert-error">{% trans "Please correct the errors below." %}</div>
-    {% endif %}
-
-    {{ form|as_crispy_errors }}
-
-    {{ form.name|as_crispy_field }}
-    {% if form.team %}
-      {{ form.team|as_crispy_field }}
-    {% endif %}
-
-    <div class="form-actions">
-      <button type="submit" class="btn btn-primary" name="action_save">{% trans "Create Project" %}</button>
-  </div>
-  </form>
-</div>
-{% endblock %}
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
deleted file mode 100644
index 1b1cea856d..0000000000
--- a/src/sentry/web/frontend/create_project.py
+++ /dev/null
@@ -1,109 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-
-from sentry.api import client
-from sentry.models import Project, Team
-from sentry.web.forms.add_project import AddProjectForm
-from sentry.web.frontend.base import OrganizationView
-from sentry.utils.http import absolute_uri
-
-ERR_NO_TEAMS = 'You cannot create a new project because there are no teams to assign it to.'
-
-
-class AddProjectWithTeamForm(AddProjectForm):
-    team = forms.ChoiceField(
-        choices=(),
-        required=True,
-        help_text='The team controls who has access to this project.',
-    )
-
-    class Meta:
-        fields = ('name', 'team')
-        model = Project
-
-    def __init__(self, user, organization, team_list, *args, **kwargs):
-        super(AddProjectWithTeamForm, self).__init__(organization, *args, **kwargs)
-
-        self.team_list = team_list
-
-        if len(self.team_list) == 1:
-            del self.fields['team']
-        else:
-            self.fields['team'].choices = ((t.slug, t.name) for t in team_list)
-            self.fields['team'].widget.choices = self.fields['team'].choices
-
-    def clean_team(self):
-        value = self.cleaned_data['team']
-        for team in self.team_list:
-            if value == team.slug:
-                return team
-        return None
-
-    def save(self, actor, ip_address):
-        team = self.cleaned_data.get('team', self.team_list[0])
-        return super(AddProjectWithTeamForm, self).save(actor, team, ip_address)
-
-
-class CreateProjectView(OrganizationView):
-    # While currently the UI suggests teams are a parent of a project, in reality
-    # the project is the core component, and which team it is on is simply an
-    # attribute. Because you can already change the team of a project via mutating
-    # it, and because Sentry intends to remove teams as a hierarchy item, we
-    # allow you to view a teams projects, as well as create a new project as long
-    # as you are a member of that team and have project scoped permissions.
-    required_scope = 'project:write'
-
-    def get_form(self, request, organization, team_list):
-        data = {
-            'team': request.GET.get('team'),
-        }
-        return AddProjectWithTeamForm(
-            request.user, organization, team_list, request.POST or None, initial=data
-        )
-
-    def handle(self, request, organization):
-        team_list = [
-            t for t in Team.objects.get_for_user(
-                organization=organization,
-                user=request.user,
-            ) if request.access.has_team_scope(t, self.required_scope)
-        ]
-        if not team_list:
-            messages.error(request, ERR_NO_TEAMS)
-            return self.redirect(reverse('sentry-organization-home', args=[organization.slug]))
-
-        form = self.get_form(request, organization, team_list)
-        if form.is_valid():
-            team = form.cleaned_data.get('team', team_list[0])
-
-            response = client.post(
-                '/teams/{}/{}/projects/'.format(
-                    organization.slug,
-                    team.slug,
-                ),
-                data={
-                    'name': form.cleaned_data['name'],
-                },
-                request=request
-            )
-
-            install_uri = absolute_uri(
-                '/{}/{}/getting-started/'.format(
-                    organization.slug,
-                    response.data['slug'],
-                )
-            )
-
-            if 'signup' in request.GET:
-                install_uri += '?signup'
-
-            return self.redirect(install_uri)
-
-        context = {
-            'form': form,
-        }
-
-        return self.respond('sentry/create-project.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index b6c77f1631..5fa92021ee 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -27,7 +27,6 @@ from sentry.web.frontend.auth_provider_login import AuthProviderLoginView
 from sentry.web.frontend.auth_close import AuthCloseView
 from sentry.web.frontend.create_organization_member import \
     CreateOrganizationMemberView
-from sentry.web.frontend.create_project import CreateProjectView
 from sentry.web.frontend.error_page_embed import ErrorPageEmbedView
 from sentry.web.frontend.group_event_json import GroupEventJsonView
 from sentry.web.frontend.group_plugin_action import GroupPluginActionView
@@ -347,11 +346,6 @@ urlpatterns += patterns(
         name='sentry-remove-team'
     ),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/new/$', react_page_view),
-    url(
-        r'^organizations/(?P<organization_slug>[\w_-]+)/projects/new/$',
-        CreateProjectView.as_view(),
-        name='sentry-create-project'
-    ),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/remove/$',
         RemoveOrganizationView.as_view(),
diff --git a/tests/acceptance/test_create_project.py b/tests/acceptance/test_create_project.py
new file mode 100644
index 0000000000..20e2c3ed5a
--- /dev/null
+++ b/tests/acceptance/test_create_project.py
@@ -0,0 +1,67 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+from sentry.models import Project
+
+
+class CreateProjectTest(AcceptanceTestCase):
+    def setUp(self):
+        super(CreateProjectTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Bengal',
+        )
+        self.login_as(self.user)
+
+        self.path = '/organizations/{}/projects/new/'.format(self.org.slug)
+
+    def test_simple(self):
+        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+        self.browser.get(self.path)
+        self.browser.wait_until_not('.loading')
+
+        self.browser.click('.platformicon-java')
+        self.browser.snapshot(name='create project')
+
+        self.browser.click('.submit-new-team')
+        self.browser.wait_until_not('.loading')
+
+        assert Project.objects.get(team__organization=self.org, name='Java')
+        self.browser.snapshot(name='docs redirect')
+
+    def test_no_teams(self):
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[],
+        )
+        self.browser.get(self.path)
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot(name='create project no teams')
+
+    def test_many_teams(self):
+        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.team2 = self.create_team(organization=self.org, name='team two')
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team, self.team2],
+        )
+        self.browser.get(self.path)
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot(name='create project many teams')
diff --git a/tests/acceptance/test_organization_onboarding.py b/tests/acceptance/test_organization_onboarding.py
index eba11f9fd1..d91c940106 100644
--- a/tests/acceptance/test_organization_onboarding.py
+++ b/tests/acceptance/test_organization_onboarding.py
@@ -11,6 +11,7 @@ class CreateOrganizationTest(AcceptanceTestCase):
             name='Rowdy Tiger',
             owner=self.user,
         )
+        self.team = self.create_team(organization=self.org, name='Rowdy Tiger')
         self.login_as(self.user)
 
     def test_simple(self):
diff --git a/tests/acceptance/test_project_overview.py b/tests/acceptance/test_project_overview.py
index dedb2c513b..73f787908a 100644
--- a/tests/acceptance/test_project_overview.py
+++ b/tests/acceptance/test_project_overview.py
@@ -9,15 +9,18 @@ class ProjectOverviewTest(AcceptanceTestCase):
     def setUp(self):
         super(ProjectOverviewTest, self).setUp()
         self.user = self.create_user('foo@example.com')
-        self.org = self.create_organization(owner=self.user, name='Rowdy Tiger')
-        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.org = self.create_organization(
+            owner=self.user, name='Rowdy Tiger')
+        self.team = self.create_team(
+            organization=self.org, name='Mariachi Band')
         self.project = self.create_project(
             organization=self.org,
             team=self.team,
             name='Bengal',
         )
         self.login_as(self.user)
-        self.path = '/{}/{}/dashboard/'.format(self.org.slug, self.project.slug)
+        self.path = '/{}/{}/dashboard/'.format(
+            self.org.slug, self.project.slug)
 
     def test_with_issues(self):
         self.project.update(first_event=timezone.now())
@@ -35,4 +38,5 @@ class ProjectOverviewTest(AcceptanceTestCase):
         self.browser.get(self.path)
         self.browser.wait_until_not('.loading')
         self.browser.wait_until('.group-list-empty')
+        self.browser.wait_until_not('.loading')
         self.browser.snapshot('project dashboard without issues')
diff --git a/tests/js/spec/views/onboarding/__snapshots__/createProject.spec.jsx.snap b/tests/js/spec/views/onboarding/__snapshots__/createProject.spec.jsx.snap
new file mode 100644
index 0000000000..746fe10e77
--- /dev/null
+++ b/tests/js/spec/views/onboarding/__snapshots__/createProject.spec.jsx.snap
@@ -0,0 +1,774 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`CreateProject render() should block if you have access to no teams 1`] = `
+<div>
+  <div>
+    <h4>
+      You cannot create a new project because there are no teams to assign it to.
+    </h4>
+    <Link
+      className="btn btn-primary"
+      onlyActiveOnIndex={false}
+      style={Object {}}
+      to="/organizations/testOrg/teams/new/"
+    >
+      Create a Team
+    </Link>
+  </div>
+</div>
+`;
+
+exports[`CreateProject render() should fill in project name if its empty when platform is chosen 1`] = `
+<CreateProject
+  getDocsUrl={[Function]}
+  location={
+    Object {
+      "query": Object {},
+    }
+  }
+  params={
+    Object {
+      "orgId": "testOrg",
+      "projectId": "",
+    }
+  }
+>
+  <div>
+    <Project
+      name="another"
+      next={[Function]}
+      platform="csharp"
+      setName={[Function]}
+      setPlatform={[Function]}
+      setTeam={[Function]}
+      team="test"
+      teams={
+        Array [
+          Object {
+            "hasAccess": true,
+            "id": "1",
+            "name": "test",
+            "slug": "test",
+          },
+        ]
+      }
+    >
+      <div
+        className="onboarding-info"
+      >
+        <h4>
+          Choose a language or framework:
+        </h4>
+        <PlatformPicker
+          name="another"
+          next={[Function]}
+          platform="csharp"
+          setName={[Function]}
+          setPlatform={[Function]}
+          setTeam={[Function]}
+          showOther={true}
+          team="test"
+          teams={
+            Array [
+              Object {
+                "hasAccess": true,
+                "id": "1",
+                "name": "test",
+                "slug": "test",
+              },
+            ]
+          }
+        >
+          <div
+            className="platform-picker"
+          >
+            <ul
+              className="nav nav-tabs"
+            >
+              <li
+                style={
+                  Object {
+                    "float": "right",
+                    "marginRight": 0,
+                  }
+                }
+              >
+                <div
+                  className="platform-filter-container"
+                >
+                  <span
+                    className="icon icon-search"
+                  />
+                  <input
+                    className="platform-filter"
+                    label="Filter"
+                    onChange={[Function]}
+                    placeholder="Filter"
+                    type="text"
+                    value=""
+                  />
+                </div>
+              </li>
+              <ListLink
+                activeClassName="active"
+                index={false}
+                isActive={[Function]}
+                onClick={[Function]}
+                to=""
+              >
+                <li
+                  className="active"
+                >
+                  <Link
+                    onClick={[Function]}
+                    onlyActiveOnIndex={false}
+                    style={Object {}}
+                    to=""
+                  >
+                    <a
+                      onClick={[Function]}
+                      style={Object {}}
+                    >
+                      Popular
+                    </a>
+                  </Link>
+                </li>
+              </ListLink>
+              <ListLink
+                activeClassName="active"
+                index={false}
+                isActive={[Function]}
+                onClick={[Function]}
+                to=""
+              >
+                <li
+                  className=""
+                >
+                  <Link
+                    onClick={[Function]}
+                    onlyActiveOnIndex={false}
+                    style={Object {}}
+                    to=""
+                  >
+                    <a
+                      onClick={[Function]}
+                      style={Object {}}
+                    >
+                      Frontend
+                    </a>
+                  </Link>
+                </li>
+              </ListLink>
+              <ListLink
+                activeClassName="active"
+                index={false}
+                isActive={[Function]}
+                onClick={[Function]}
+                to=""
+              >
+                <li
+                  className=""
+                >
+                  <Link
+                    onClick={[Function]}
+                    onlyActiveOnIndex={false}
+                    style={Object {}}
+                    to=""
+                  >
+                    <a
+                      onClick={[Function]}
+                      style={Object {}}
+                    >
+                      Mobile
+                    </a>
+                  </Link>
+                </li>
+              </ListLink>
+              <ListLink
+                activeClassName="active"
+                index={false}
+                isActive={[Function]}
+                onClick={[Function]}
+                to=""
+              >
+                <li
+                  className=""
+                >
+                  <Link
+                    onClick={[Function]}
+                    onlyActiveOnIndex={false}
+                    style={Object {}}
+                    to=""
+                  >
+                    <a
+                      onClick={[Function]}
+                      style={Object {}}
+                    >
+                      Backend
+                    </a>
+                  </Link>
+                </li>
+              </ListLink>
+              <ListLink
+                activeClassName="active"
+                index={false}
+                isActive={[Function]}
+                onClick={[Function]}
+                to=""
+              >
+                <li
+                  className=""
+                >
+                  <Link
+                    onClick={[Function]}
+                    onlyActiveOnIndex={false}
+                    style={Object {}}
+                    to=""
+                  >
+                    <a
+                      onClick={[Function]}
+                      style={Object {}}
+                    >
+                      All
+                    </a>
+                  </Link>
+                </li>
+              </ListLink>
+            </ul>
+            <ul
+              className="client-platform-list platform-tiles"
+            >
+              <PlatformCard
+                className="selected"
+                onClick={[Function]}
+                platform="csharp"
+              >
+                <span
+                  className="platform-card selected"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className="selected"
+                    onClick={[Function]}
+                    platform="csharp"
+                  >
+                    <li
+                      className="platform-tile list-unstyled csharp csharp selected"
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-csharp"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    C#
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="java"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="java"
+                  >
+                    <li
+                      className="platform-tile list-unstyled java java "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-java"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Java
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="javascript-angular"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript-angular"
+                  >
+                    <li
+                      className="platform-tile list-unstyled javascript-angular javascript "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-javascript-angular"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Angular
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="javascript"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript"
+                  >
+                    <li
+                      className="platform-tile list-unstyled javascript javascript "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-javascript"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    JavaScript
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="javascript-react"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript-react"
+                  >
+                    <li
+                      className="platform-tile list-unstyled javascript-react javascript "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-javascript-react"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    React
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="node-express"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="node-express"
+                  >
+                    <li
+                      className="platform-tile list-unstyled node-express node "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-node-express"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Express
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="node"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="node"
+                  >
+                    <li
+                      className="platform-tile list-unstyled node node "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-node"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Node.js
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="php-laravel"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="php-laravel"
+                  >
+                    <li
+                      className="platform-tile list-unstyled php-laravel php "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-php-laravel"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Laravel
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="php"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="php"
+                  >
+                    <li
+                      className="platform-tile list-unstyled php php "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-php"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    PHP
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="php-symfony2"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="php-symfony2"
+                  >
+                    <li
+                      className="platform-tile list-unstyled php-symfony2 php "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-php-symfony2"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Symfony2
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="python-django"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="python-django"
+                  >
+                    <li
+                      className="platform-tile list-unstyled python-django python "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-python-django"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Django
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="python-flask"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="python-flask"
+                  >
+                    <li
+                      className="platform-tile list-unstyled python-flask python "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-python-flask"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Flask
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="python"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="python"
+                  >
+                    <li
+                      className="platform-tile list-unstyled python python "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-python"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Python
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="cocoa"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="cocoa"
+                  >
+                    <li
+                      className="platform-tile list-unstyled cocoa cocoa "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-cocoa"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    React-Native
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="ruby-rails"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="ruby-rails"
+                  >
+                    <li
+                      className="platform-tile list-unstyled ruby-rails ruby "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-ruby-rails"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Rails
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+              <PlatformCard
+                className=""
+                onClick={[Function]}
+                platform="ruby"
+              >
+                <span
+                  className="platform-card"
+                  onClick={[Function]}
+                >
+                  <PlatformiconTile
+                    className=""
+                    onClick={[Function]}
+                    platform="ruby"
+                  >
+                    <li
+                      className="platform-tile list-unstyled ruby ruby "
+                      onClick={[Function]}
+                    >
+                      <span
+                        className="platformicon platformicon-ruby"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <h5>
+                     
+                    Ruby
+                     
+                  </h5>
+                </span>
+              </PlatformCard>
+            </ul>
+          </div>
+        </PlatformPicker>
+        <div
+          className="create-project-form"
+        >
+          <div
+            className="new-project-name client-platform"
+          >
+            <h4>
+              Give your project a name:
+            </h4>
+            <div
+              className="project-name-wrapper"
+            >
+              <PlatformiconTile
+                platform="csharp"
+              >
+                <li
+                  className="platform-tile list-unstyled csharp csharp undefined"
+                >
+                  <span
+                    className="platformicon platformicon-csharp"
+                  />
+                </li>
+              </PlatformiconTile>
+              <input
+                autoComplete="off"
+                label="Project Name"
+                name="name"
+                onChange={[Function]}
+                placeholder="Project name"
+                type="text"
+                value="another"
+              />
+            </div>
+          </div>
+          <div>
+            <button
+              className="btn btn-primary submit-new-team"
+              onClick={[Function]}
+            >
+              Create Project
+            </button>
+          </div>
+          <p>
+            Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects your API server and frontend client.
+          </p>
+        </div>
+      </div>
+    </Project>
+  </div>
+</CreateProject>
+`;
diff --git a/tests/js/spec/views/onboarding/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/__snapshots__/index.spec.jsx.snap
index b1ca91816a..60f52785ec 100644
--- a/tests/js/spec/views/onboarding/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/__snapshots__/index.spec.jsx.snap
@@ -1,6 +1,28 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`OnboardingWizard render() should fill in project name if its empty when platform is chosen 1`] = `
+exports[`OnboardingWizard render() should render NotFound if no matching organization 1`] = `
+<div
+  className="onboarding-container"
+>
+  <DocumentTitle
+    title="Sentry"
+  />
+  <div
+    className="step-container"
+  >
+    <ProgressNodes
+      params={
+        Object {
+          "orgId": "my-cool-org",
+        }
+      }
+    />
+    <div />
+  </div>
+</div>
+`;
+
+exports[`OnboardingWizard render() should render and respond to click events 1`] = `
 <OnboardingWizard
   location={
     Object {
@@ -87,672 +109,680 @@ exports[`OnboardingWizard render() should fill in project name if its empty when
         </div>
       </ProgressNodes>
       <div>
-        <bound renderStep>
-          <Project
-            name="another"
-            next={[Function]}
-            platform="csharp"
-            setName={[Function]}
-            setPlatform={[Function]}
+        <Project
+          name=""
+          next={[Function]}
+          platform=""
+          setName={[Function]}
+          setPlatform={[Function]}
+          setTeam={[Function]}
+          team=""
+          teams={Array []}
+        >
+          <div
+            className="onboarding-info"
           >
-            <div
-              className="onboarding-info"
+            <h4>
+              Choose a language or framework:
+            </h4>
+            <PlatformPicker
+              name=""
+              next={[Function]}
+              platform=""
+              setName={[Function]}
+              setPlatform={[Function]}
+              setTeam={[Function]}
+              showOther={true}
+              team=""
+              teams={Array []}
             >
-              <h2>
-                Choose a language or framework
-              </h2>
-              <PlatformPicker
-                name="another"
-                next={[Function]}
-                platform="csharp"
-                setName={[Function]}
-                setPlatform={[Function]}
-                showOther={true}
+              <div
+                className="platform-picker"
               >
-                <div
-                  className="platform-picker"
+                <ul
+                  className="nav nav-tabs"
                 >
-                  <ul
-                    className="nav nav-tabs"
+                  <li
+                    style={
+                      Object {
+                        "float": "right",
+                        "marginRight": 0,
+                      }
+                    }
+                  >
+                    <div
+                      className="platform-filter-container"
+                    >
+                      <span
+                        className="icon icon-search"
+                      />
+                      <input
+                        className="platform-filter"
+                        label="Filter"
+                        onChange={[Function]}
+                        placeholder="Filter"
+                        type="text"
+                        value=""
+                      />
+                    </div>
+                  </li>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
                   >
                     <li
-                      style={
-                        Object {
-                          "float": "right",
-                          "marginRight": 0,
-                        }
-                      }
+                      className="active"
                     >
-                      <div
-                        className="platform-filter-container"
-                      >
-                        <span
-                          className="icon icon-search"
-                        />
-                        <input
-                          className="platform-filter"
-                          label="Filter"
-                          onChange={[Function]}
-                          placeholder="Filter"
-                          type="text"
-                          value=""
-                        />
-                      </div>
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
+                      >
+                        <a
+                          onClick={[Function]}
+                          style={Object {}}
+                        >
+                          Popular
+                        </a>
+                      </Link>
                     </li>
-                    <ListLink
-                      activeClassName="active"
-                      index={false}
-                      isActive={[Function]}
-                      onClick={[Function]}
-                      to=""
+                  </ListLink>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className=""
                     >
-                      <li
-                        className="active"
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
                       >
-                        <Link
+                        <a
                           onClick={[Function]}
-                          onlyActiveOnIndex={false}
                           style={Object {}}
-                          to=""
                         >
-                          <a
-                            onClick={[Function]}
-                            style={Object {}}
-                          >
-                            Popular
-                          </a>
-                        </Link>
-                      </li>
-                    </ListLink>
-                    <ListLink
-                      activeClassName="active"
-                      index={false}
-                      isActive={[Function]}
-                      onClick={[Function]}
-                      to=""
+                          Frontend
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className=""
                     >
-                      <li
-                        className=""
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
                       >
-                        <Link
+                        <a
                           onClick={[Function]}
-                          onlyActiveOnIndex={false}
                           style={Object {}}
-                          to=""
                         >
-                          <a
-                            onClick={[Function]}
-                            style={Object {}}
-                          >
-                            Frontend
-                          </a>
-                        </Link>
-                      </li>
-                    </ListLink>
-                    <ListLink
-                      activeClassName="active"
-                      index={false}
-                      isActive={[Function]}
-                      onClick={[Function]}
-                      to=""
+                          Mobile
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className=""
                     >
-                      <li
-                        className=""
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
                       >
-                        <Link
+                        <a
                           onClick={[Function]}
-                          onlyActiveOnIndex={false}
                           style={Object {}}
-                          to=""
                         >
-                          <a
-                            onClick={[Function]}
-                            style={Object {}}
-                          >
-                            Mobile
-                          </a>
-                        </Link>
-                      </li>
-                    </ListLink>
-                    <ListLink
-                      activeClassName="active"
-                      index={false}
-                      isActive={[Function]}
-                      onClick={[Function]}
-                      to=""
+                          Backend
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className=""
                     >
-                      <li
-                        className=""
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
                       >
-                        <Link
+                        <a
                           onClick={[Function]}
-                          onlyActiveOnIndex={false}
                           style={Object {}}
-                          to=""
                         >
-                          <a
-                            onClick={[Function]}
-                            style={Object {}}
-                          >
-                            Backend
-                          </a>
-                        </Link>
-                      </li>
-                    </ListLink>
-                    <ListLink
-                      activeClassName="active"
-                      index={false}
-                      isActive={[Function]}
+                          All
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                </ul>
+                <ul
+                  className="client-platform-list platform-tiles"
+                >
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="csharp"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      to=""
                     >
-                      <li
+                      <PlatformiconTile
                         className=""
+                        onClick={[Function]}
+                        platform="csharp"
                       >
-                        <Link
+                        <li
+                          className="platform-tile list-unstyled csharp csharp "
                           onClick={[Function]}
-                          onlyActiveOnIndex={false}
-                          style={Object {}}
-                          to=""
-                        >
-                          <a
-                            onClick={[Function]}
-                            style={Object {}}
-                          >
-                            All
-                          </a>
-                        </Link>
-                      </li>
-                    </ListLink>
-                  </ul>
-                  <ul
-                    className="client-platform-list platform-tiles"
-                  >
-                    <PlatformCard
-                      className="selected"
-                      onClick={[Function]}
-                      platform="csharp"
-                    >
-                      <span
-                        className="platform-card selected"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className="selected"
-                          onClick={[Function]}
-                          platform="csharp"
-                        >
-                          <li
-                            className="platform-tile list-unstyled csharp csharp selected"
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-csharp"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          C#
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                        >
+                          <span
+                            className="platformicon platformicon-csharp"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        C#
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="java"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="java"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="java"
-                        >
-                          <li
-                            className="platform-tile list-unstyled java java "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-java"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Java
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="java"
+                      >
+                        <li
+                          className="platform-tile list-unstyled java java "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-java"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Java
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript-angular"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="javascript-angular"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="javascript-angular"
-                        >
-                          <li
-                            className="platform-tile list-unstyled javascript-angular javascript "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-javascript-angular"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Angular
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="javascript-angular"
+                      >
+                        <li
+                          className="platform-tile list-unstyled javascript-angular javascript "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-javascript-angular"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Angular
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="javascript"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="javascript"
-                        >
-                          <li
-                            className="platform-tile list-unstyled javascript javascript "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-javascript"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          JavaScript
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="javascript"
+                      >
+                        <li
+                          className="platform-tile list-unstyled javascript javascript "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-javascript"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        JavaScript
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript-react"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="javascript-react"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="javascript-react"
-                        >
-                          <li
-                            className="platform-tile list-unstyled javascript-react javascript "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-javascript-react"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          React
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="javascript-react"
+                      >
+                        <li
+                          className="platform-tile list-unstyled javascript-react javascript "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-javascript-react"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        React
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="node-express"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="node-express"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="node-express"
-                        >
-                          <li
-                            className="platform-tile list-unstyled node-express node "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-node-express"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Express
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="node-express"
+                      >
+                        <li
+                          className="platform-tile list-unstyled node-express node "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-node-express"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Express
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="node"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="node"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="node"
-                        >
-                          <li
-                            className="platform-tile list-unstyled node node "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-node"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Node.js
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="node"
+                      >
+                        <li
+                          className="platform-tile list-unstyled node node "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-node"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Node.js
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="php-laravel"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="php-laravel"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="php-laravel"
-                        >
-                          <li
-                            className="platform-tile list-unstyled php-laravel php "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-php-laravel"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Laravel
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="php-laravel"
+                      >
+                        <li
+                          className="platform-tile list-unstyled php-laravel php "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-php-laravel"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Laravel
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="php"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="php"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="php"
-                        >
-                          <li
-                            className="platform-tile list-unstyled php php "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-php"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          PHP
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="php"
+                      >
+                        <li
+                          className="platform-tile list-unstyled php php "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-php"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        PHP
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="php-symfony2"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="php-symfony2"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="php-symfony2"
-                        >
-                          <li
-                            className="platform-tile list-unstyled php-symfony2 php "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-php-symfony2"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Symfony2
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="php-symfony2"
+                      >
+                        <li
+                          className="platform-tile list-unstyled php-symfony2 php "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-php-symfony2"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Symfony2
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="python-django"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="python-django"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="python-django"
-                        >
-                          <li
-                            className="platform-tile list-unstyled python-django python "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-python-django"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Django
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="python-django"
+                      >
+                        <li
+                          className="platform-tile list-unstyled python-django python "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-python-django"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Django
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="python-flask"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="python-flask"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="python-flask"
-                        >
-                          <li
-                            className="platform-tile list-unstyled python-flask python "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-python-flask"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Flask
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="python-flask"
+                      >
+                        <li
+                          className="platform-tile list-unstyled python-flask python "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-python-flask"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Flask
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="python"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="python"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="python"
-                        >
-                          <li
-                            className="platform-tile list-unstyled python python "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-python"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Python
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="python"
+                      >
+                        <li
+                          className="platform-tile list-unstyled python python "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-python"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Python
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="cocoa"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="cocoa"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="cocoa"
-                        >
-                          <li
-                            className="platform-tile list-unstyled cocoa cocoa "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-cocoa"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          React-Native
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="cocoa"
+                      >
+                        <li
+                          className="platform-tile list-unstyled cocoa cocoa "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-cocoa"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        React-Native
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="ruby-rails"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="ruby-rails"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="ruby-rails"
-                        >
-                          <li
-                            className="platform-tile list-unstyled ruby-rails ruby "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-ruby-rails"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Rails
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                    <PlatformCard
-                      className=""
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="ruby-rails"
+                      >
+                        <li
+                          className="platform-tile list-unstyled ruby-rails ruby "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-ruby-rails"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Rails
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="ruby"
+                  >
+                    <span
+                      className="platform-card"
                       onClick={[Function]}
-                      platform="ruby"
                     >
-                      <span
-                        className="platform-card"
-                        onClick={[Function]}
-                      >
-                        <PlatformiconTile
-                          className=""
-                          onClick={[Function]}
-                          platform="ruby"
-                        >
-                          <li
-                            className="platform-tile list-unstyled ruby ruby "
-                            onClick={[Function]}
-                          >
-                            <span
-                              className="platformicon platformicon-ruby"
-                            />
-                          </li>
-                        </PlatformiconTile>
-                        <h5>
-                           
-                          Ruby
-                           
-                        </h5>
-                      </span>
-                    </PlatformCard>
-                  </ul>
-                </div>
-              </PlatformPicker>
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="ruby"
+                      >
+                        <li
+                          className="platform-tile list-unstyled ruby ruby "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-ruby"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Ruby
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                </ul>
+              </div>
+            </PlatformPicker>
+            <div
+              className="create-project-form"
+            >
               <div
-                className="project-name client-platform"
+                className="new-project-name client-platform"
               >
                 <h4>
                   Give your project a name:
@@ -761,61 +791,853 @@ exports[`OnboardingWizard render() should fill in project name if its empty when
                   className="project-name-wrapper"
                 >
                   <PlatformiconTile
-                    platform="csharp"
+                    platform=""
                   >
                     <li
-                      className="platform-tile list-unstyled csharp csharp undefined"
+                      className="platform-tile list-unstyled   undefined"
                     >
                       <span
-                        className="platformicon platformicon-csharp"
+                        className="platformicon platformicon-"
                       />
                     </li>
                   </PlatformiconTile>
                   <input
+                    autoComplete="off"
                     label="Project Name"
                     name="name"
                     onChange={[Function]}
                     placeholder="Project name"
                     type="text"
-                    value="another"
+                    value=""
                   />
                 </div>
+              </div>
+              <div>
                 <button
-                  className="btn btn-primary pull-right"
+                  className="btn btn-primary submit-new-team"
                   onClick={[Function]}
                 >
-                  Continue
+                  Create Project
                 </button>
               </div>
+              <p>
+                Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects your API server and frontend client.
+              </p>
             </div>
-          </Project>
-        </bound renderStep>
+          </div>
+        </Project>
       </div>
     </div>
   </div>
 </OnboardingWizard>
 `;
 
-exports[`OnboardingWizard render() should render NotFound if no matching organization 1`] = `
-<div
-  className="onboarding-container"
+exports[`OnboardingWizard render() should render and respond to click events 2`] = `
+<OnboardingWizard
+  location={
+    Object {
+      "query": Object {},
+    }
+  }
+  params={
+    Object {
+      "orgId": "testOrg",
+      "projectId": "",
+    }
+  }
 >
-  <DocumentTitle
-    title="Sentry"
-  />
   <div
-    className="step-container"
+    className="onboarding-container"
   >
-    <ProgressNodes
-      params={
-        Object {
-          "orgId": "my-cool-org",
-        }
-      }
+    <DocumentTitle
+      title="Sentry"
     />
-    <div>
-      <bound renderStep />
-    </div>
-  </div>
-</div>
+    <div
+      className="step-container"
+    >
+      <ProgressNodes
+        params={
+          Object {
+            "orgId": "testOrg",
+            "projectId": "",
+          }
+        }
+      >
+        <div
+          className="onboarding-sidebar"
+        >
+          <div
+            className="sentry-flag"
+          >
+            <span
+              className="icon-sentry-logo-full"
+              href="/"
+            />
+          </div>
+          <div
+            className="progress-nodes"
+          >
+            <div
+              className="node done"
+            >
+              <span
+                className="node done"
+              />
+              Create an organization in Sentry
+            </div>
+            <div
+              className="node active"
+            >
+              <span
+                className="node active"
+              />
+              Tell us about your project
+            </div>
+            <div
+              className="node"
+            >
+              <span
+                className="node"
+              />
+              Configure your application and send an event
+            </div>
+          </div>
+          <div
+            className="stuck"
+          >
+            <a
+              href="/organizations/testOrg/support/"
+            >
+              <p>
+                 Stuck?
+              </p>
+              <p>
+                 Ask for help
+              </p>
+            </a>
+          </div>
+        </div>
+      </ProgressNodes>
+      <div>
+        <Project
+          name=""
+          next={[Function]}
+          platform=""
+          setName={[Function]}
+          setPlatform={[Function]}
+          setTeam={[Function]}
+          team=""
+          teams={Array []}
+        >
+          <div
+            className="onboarding-info"
+          >
+            <h4>
+              Choose a language or framework:
+            </h4>
+            <PlatformPicker
+              name=""
+              next={[Function]}
+              platform=""
+              setName={[Function]}
+              setPlatform={[Function]}
+              setTeam={[Function]}
+              showOther={true}
+              team=""
+              teams={Array []}
+            >
+              <div
+                className="platform-picker"
+              >
+                <ul
+                  className="nav nav-tabs"
+                >
+                  <li
+                    style={
+                      Object {
+                        "float": "right",
+                        "marginRight": 0,
+                      }
+                    }
+                  >
+                    <div
+                      className="platform-filter-container"
+                    >
+                      <span
+                        className="icon icon-search"
+                      />
+                      <input
+                        className="platform-filter"
+                        label="Filter"
+                        onChange={[Function]}
+                        placeholder="Filter"
+                        type="text"
+                        value=""
+                      />
+                    </div>
+                  </li>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className="active"
+                    >
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
+                      >
+                        <a
+                          onClick={[Function]}
+                          style={Object {}}
+                        >
+                          Popular
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className=""
+                    >
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
+                      >
+                        <a
+                          onClick={[Function]}
+                          style={Object {}}
+                        >
+                          Frontend
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className=""
+                    >
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
+                      >
+                        <a
+                          onClick={[Function]}
+                          style={Object {}}
+                        >
+                          Mobile
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className=""
+                    >
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
+                      >
+                        <a
+                          onClick={[Function]}
+                          style={Object {}}
+                        >
+                          Backend
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                  <ListLink
+                    activeClassName="active"
+                    index={false}
+                    isActive={[Function]}
+                    onClick={[Function]}
+                    to=""
+                  >
+                    <li
+                      className=""
+                    >
+                      <Link
+                        onClick={[Function]}
+                        onlyActiveOnIndex={false}
+                        style={Object {}}
+                        to=""
+                      >
+                        <a
+                          onClick={[Function]}
+                          style={Object {}}
+                        >
+                          All
+                        </a>
+                      </Link>
+                    </li>
+                  </ListLink>
+                </ul>
+                <ul
+                  className="client-platform-list platform-tiles"
+                >
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="csharp"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="csharp"
+                      >
+                        <li
+                          className="platform-tile list-unstyled csharp csharp "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-csharp"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        C#
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="java"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="java"
+                      >
+                        <li
+                          className="platform-tile list-unstyled java java "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-java"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Java
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript-angular"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="javascript-angular"
+                      >
+                        <li
+                          className="platform-tile list-unstyled javascript-angular javascript "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-javascript-angular"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Angular
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="javascript"
+                      >
+                        <li
+                          className="platform-tile list-unstyled javascript javascript "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-javascript"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        JavaScript
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="javascript-react"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="javascript-react"
+                      >
+                        <li
+                          className="platform-tile list-unstyled javascript-react javascript "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-javascript-react"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        React
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="node-express"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="node-express"
+                      >
+                        <li
+                          className="platform-tile list-unstyled node-express node "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-node-express"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Express
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="node"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="node"
+                      >
+                        <li
+                          className="platform-tile list-unstyled node node "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-node"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Node.js
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="php-laravel"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="php-laravel"
+                      >
+                        <li
+                          className="platform-tile list-unstyled php-laravel php "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-php-laravel"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Laravel
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="php"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="php"
+                      >
+                        <li
+                          className="platform-tile list-unstyled php php "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-php"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        PHP
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="php-symfony2"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="php-symfony2"
+                      >
+                        <li
+                          className="platform-tile list-unstyled php-symfony2 php "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-php-symfony2"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Symfony2
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="python-django"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="python-django"
+                      >
+                        <li
+                          className="platform-tile list-unstyled python-django python "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-python-django"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Django
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="python-flask"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="python-flask"
+                      >
+                        <li
+                          className="platform-tile list-unstyled python-flask python "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-python-flask"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Flask
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="python"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="python"
+                      >
+                        <li
+                          className="platform-tile list-unstyled python python "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-python"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Python
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="cocoa"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="cocoa"
+                      >
+                        <li
+                          className="platform-tile list-unstyled cocoa cocoa "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-cocoa"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        React-Native
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="ruby-rails"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="ruby-rails"
+                      >
+                        <li
+                          className="platform-tile list-unstyled ruby-rails ruby "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-ruby-rails"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Rails
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                  <PlatformCard
+                    className=""
+                    onClick={[Function]}
+                    platform="ruby"
+                  >
+                    <span
+                      className="platform-card"
+                      onClick={[Function]}
+                    >
+                      <PlatformiconTile
+                        className=""
+                        onClick={[Function]}
+                        platform="ruby"
+                      >
+                        <li
+                          className="platform-tile list-unstyled ruby ruby "
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="platformicon platformicon-ruby"
+                          />
+                        </li>
+                      </PlatformiconTile>
+                      <h5>
+                         
+                        Ruby
+                         
+                      </h5>
+                    </span>
+                  </PlatformCard>
+                </ul>
+              </div>
+            </PlatformPicker>
+            <div
+              className="create-project-form"
+            >
+              <div
+                className="new-project-name client-platform"
+              >
+                <h4>
+                  Give your project a name:
+                </h4>
+                <div
+                  className="project-name-wrapper"
+                >
+                  <PlatformiconTile
+                    platform=""
+                  >
+                    <li
+                      className="platform-tile list-unstyled   undefined"
+                    >
+                      <span
+                        className="platformicon platformicon-"
+                      />
+                    </li>
+                  </PlatformiconTile>
+                  <input
+                    autoComplete="off"
+                    label="Project Name"
+                    name="name"
+                    onChange={[Function]}
+                    placeholder="Project name"
+                    type="text"
+                    value=""
+                  />
+                </div>
+              </div>
+              <div>
+                <button
+                  className="btn btn-primary submit-new-team"
+                  onClick={[Function]}
+                >
+                  Create Project
+                </button>
+              </div>
+              <p>
+                Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects your API server and frontend client.
+              </p>
+            </div>
+          </div>
+        </Project>
+      </div>
+    </div>
+  </div>
+</OnboardingWizard>
 `;
diff --git a/tests/js/spec/views/onboarding/createProject.spec.jsx b/tests/js/spec/views/onboarding/createProject.spec.jsx
new file mode 100644
index 0000000000..43fb9e268f
--- /dev/null
+++ b/tests/js/spec/views/onboarding/createProject.spec.jsx
@@ -0,0 +1,98 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import CreateProject from 'app/views/onboarding/createProject';
+import Project from 'app/views/onboarding/project';
+
+describe('CreateProject', function() {
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+    this.stubbedApiRequest = this.sandbox.stub(Client.prototype, 'request');
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe('render()', function() {
+    const baseProps = {
+      location: {query: {}},
+      params: {
+        projectId: '',
+        orgId: 'testOrg'
+      }
+    };
+
+    it('should block if you have access to no teams', function() {
+      let props = {
+        ...baseProps
+      };
+
+      let wrapper = shallow(<CreateProject {...props} />, {
+        context: {
+          organization: {
+            id: '1',
+            slug: 'testOrg',
+            teams: [{slug: 'test', id: '1', name: 'test', hasAccess: false}]
+          },
+          location: {query: {}}
+        },
+        childContextTypes: {
+          organization: React.PropTypes.object,
+          location: React.PropTypes.object
+        }
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('should fill in project name if its empty when platform is chosen', function() {
+      let props = {
+        ...baseProps,
+        children: (
+          <Project
+            next={jest.fn()}
+            platform={''}
+            setName={jest.fn()}
+            name={''}
+            setPlatform={jest.fn()}
+          />
+        )
+      };
+
+      let wrapper = mount(<CreateProject {...props} />, {
+        context: {
+          organization: {
+            id: '1',
+            slug: 'testOrg',
+            teams: [{slug: 'test', id: '1', name: 'test', hasAccess: true}]
+          },
+          router: TestStubs.router(),
+          location: {query: {}}
+        },
+        childContextTypes: {
+          router: React.PropTypes.object,
+          organization: React.PropTypes.object,
+          location: React.PropTypes.object
+        }
+      });
+
+      let node = wrapper.find('PlatformCard').first();
+      node.props().onClick();
+      expect(wrapper.state().projectName).toBe('C#');
+
+      node = wrapper.find('PlatformCard').last();
+      node.props().onClick();
+      expect(wrapper.state().projectName).toBe('Ruby');
+
+      //but not replace it when project name is something else:
+      wrapper.setState({projectName: 'another'});
+
+      node = wrapper.find('PlatformCard').first();
+      node.props().onClick();
+      expect(wrapper.state().projectName).toBe('another');
+
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/views/onboarding/index.spec.jsx b/tests/js/spec/views/onboarding/index.spec.jsx
index 6e3fe65741..8ee18be7b1 100644
--- a/tests/js/spec/views/onboarding/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/index.spec.jsx
@@ -38,7 +38,7 @@ describe('OnboardingWizard', function() {
       expect(wrapper).toMatchSnapshot();
     });
 
-    it('should fill in project name if its empty when platform is chosen', function() {
+    it('should render and respond to click events', function() {
       let props = {
         ...baseProps,
         children: (
@@ -63,21 +63,9 @@ describe('OnboardingWizard', function() {
         }
       });
 
+      expect(wrapper).toMatchSnapshot();
       let node = wrapper.find('PlatformCard').first();
       node.props().onClick();
-      expect(wrapper.state().projectName).toBe('C#');
-
-      node = wrapper.find('PlatformCard').last();
-      node.props().onClick();
-      expect(wrapper.state().projectName).toBe('Ruby');
-
-      //but not replace it when project name is something else:
-      wrapper.setState({projectName: 'another'});
-
-      node = wrapper.find('PlatformCard').first();
-      node.props().onClick();
-      expect(wrapper.state().projectName).toBe('another');
-
       expect(wrapper).toMatchSnapshot();
     });
   });
diff --git a/tests/js/spec/views/onboarding/project/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/project/__snapshots__/index.spec.jsx.snap
index eccddfde1a..f6254df81f 100644
--- a/tests/js/spec/views/onboarding/project/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/project/__snapshots__/index.spec.jsx.snap
@@ -4,9 +4,9 @@ exports[`Project render() should render NotFound if no matching organization 1`]
 <div
   className="onboarding-info"
 >
-  <h2>
-    Choose a language or framework
-  </h2>
+  <h4>
+    Choose a language or framework:
+  </h4>
   <PlatformPicker
     location={
       Object {
@@ -23,35 +23,48 @@ exports[`Project render() should render NotFound if no matching organization 1`]
     platform=""
     setName={[Function]}
     setPlatform={[Function]}
+    setTeam={[Function]}
     showOther={true}
+    team=""
+    teams={Array []}
   />
   <div
-    className="project-name client-platform"
+    className="create-project-form"
   >
-    <h4>
-      Give your project a name:
-    </h4>
     <div
-      className="project-name-wrapper"
+      className="new-project-name client-platform"
     >
-      <PlatformiconTile
-        platform=""
-      />
-      <input
-        label="Project Name"
-        name="name"
-        onChange={[Function]}
-        placeholder="Project name"
-        type="text"
-        value=""
-      />
+      <h4>
+        Give your project a name:
+      </h4>
+      <div
+        className="project-name-wrapper"
+      >
+        <PlatformiconTile
+          platform=""
+        />
+        <input
+          autoComplete="off"
+          label="Project Name"
+          name="name"
+          onChange={[Function]}
+          placeholder="Project name"
+          type="text"
+          value=""
+        />
+      </div>
     </div>
-    <button
-      className="btn btn-primary pull-right"
-      onClick={[Function]}
-    >
-      Continue
-    </button>
+    <div>
+      <button
+        className="btn btn-primary submit-new-team"
+        onClick={[Function]}
+      >
+        Create Project
+      </button>
+    </div>
+    <p>
+      Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects your API server and frontend client.
+    </p>
   </div>
 </div>
 `;
@@ -74,13 +87,16 @@ exports[`Project render() should set required class on empty submit 1`] = `
   platform=""
   setName={[Function]}
   setPlatform={[Function]}
+  setTeam={[Function]}
+  team=""
+  teams={Array []}
 >
   <div
     className="onboarding-info"
   >
-    <h2>
-      Choose a language or framework
-    </h2>
+    <h4>
+      Choose a language or framework:
+    </h4>
     <PlatformPicker
       location={
         Object {
@@ -98,7 +114,10 @@ exports[`Project render() should set required class on empty submit 1`] = `
       platform=""
       setName={[Function]}
       setPlatform={[Function]}
+      setTeam={[Function]}
       showOther={true}
+      team=""
+      teams={Array []}
     >
       <div
         className="platform-picker"
@@ -743,40 +762,50 @@ exports[`Project render() should set required class on empty submit 1`] = `
       </div>
     </PlatformPicker>
     <div
-      className="project-name client-platform"
+      className="create-project-form"
     >
-      <h4>
-        Give your project a name:
-      </h4>
       <div
-        className="project-name-wrapper"
+        className="new-project-name client-platform"
       >
-        <PlatformiconTile
-          platform=""
+        <h4>
+          Give your project a name:
+        </h4>
+        <div
+          className="project-name-wrapper"
         >
-          <li
-            className="platform-tile list-unstyled   undefined"
+          <PlatformiconTile
+            platform=""
           >
-            <span
-              className="platformicon platformicon-"
-            />
-          </li>
-        </PlatformiconTile>
-        <input
-          label="Project Name"
-          name="name"
-          onChange={[Function]}
-          placeholder="Project name"
-          type="text"
-          value="bar"
-        />
+            <li
+              className="platform-tile list-unstyled   undefined"
+            >
+              <span
+                className="platformicon platformicon-"
+              />
+            </li>
+          </PlatformiconTile>
+          <input
+            autoComplete="off"
+            label="Project Name"
+            name="name"
+            onChange={[Function]}
+            placeholder="Project name"
+            type="text"
+            value="bar"
+          />
+        </div>
       </div>
-      <button
-        className="btn btn-primary pull-right"
-        onClick={[Function]}
-      >
-        Continue
-      </button>
+      <div>
+        <button
+          className="btn btn-primary submit-new-team"
+          onClick={[Function]}
+        >
+          Create Project
+        </button>
+      </div>
+      <p>
+        Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects your API server and frontend client.
+      </p>
     </div>
   </div>
 </Project>
diff --git a/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap b/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap
new file mode 100644
index 0000000000..1a79d8a7b8
--- /dev/null
+++ b/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap
@@ -0,0 +1,44 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`NewProjectPlatform render() should render 1`] = `
+<div
+  className="getting-started"
+>
+  <div
+    className="sub-header flex flex-container flex-vertically-centered"
+  >
+    <div
+      className="p-t-1 p-b-1"
+    >
+      <ProjectSelector
+        organization={
+          Object {
+            "id": "1337",
+            "slug": "testOrg",
+            "teams": Array [
+              Array [
+                "testProject",
+              ],
+            ],
+          }
+        }
+        projectId={null}
+      />
+    </div>
+  </div>
+  <div
+    className="container"
+  >
+    <div
+      className="content"
+    >
+      <DocumentTitle
+        title="Sentry"
+      />
+      <CreateProject
+        getDocsUrl={[Function]}
+      />
+    </div>
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/views/projectInstall/newProject.spec.jsx b/tests/js/spec/views/projectInstall/newProject.spec.jsx
new file mode 100644
index 0000000000..1b9aa0b273
--- /dev/null
+++ b/tests/js/spec/views/projectInstall/newProject.spec.jsx
@@ -0,0 +1,31 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {Client} from 'app/api';
+import NewProject from 'app/views/projectInstall/newProject';
+
+describe('NewProjectPlatform', function() {
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+    this.stubbedApiRequest = this.sandbox.stub(Client.prototype, 'request');
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe('render()', function() {
+    it('should render', function() {
+      let wrapper = shallow(<NewProject />, {
+        context: {
+          organization: {
+            id: '1337',
+            slug: 'testOrg',
+            teams: [['testProject']]
+          }
+        }
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/sentry/web/frontend/test_create_project.py b/tests/sentry/web/frontend/test_create_project.py
deleted file mode 100644
index 14e7b578c8..0000000000
--- a/tests/sentry/web/frontend/test_create_project.py
+++ /dev/null
@@ -1,77 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import Project
-from sentry.testutils import TestCase, PermissionTestCase
-from sentry.utils.http import absolute_uri
-
-
-class CreateProjectPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(CreateProjectPermissionTest, self).setUp()
-        self.path = reverse('sentry-create-project', args=[self.organization.slug])
-
-    def test_non_member_cannot_load(self):
-        self.assert_non_member_cannot_access(self.path)
-
-    def test_teamless_admin_cannot_load(self):
-        self.assert_teamless_admin_cannot_access(self.path)
-
-    def test_team_admin_can_load(self):
-        self.assert_team_admin_can_access(self.path)
-
-    def test_member_cannot_load(self):
-        self.assert_member_cannot_access(self.path)
-
-    def test_owner_can_load(self):
-        self.assert_owner_can_access(self.path)
-
-
-class CreateProjectTest(TestCase):
-    def test_renders_with_context(self):
-        organization = self.create_organization()
-        self.create_team(organization=organization)
-        path = reverse('sentry-create-project', args=[organization.slug])
-        self.login_as(self.user)
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/create-project.html')
-        assert resp.context['organization'] == organization
-        assert resp.context['form']
-
-    def test_implicit_single_team(self):
-        organization = self.create_organization()
-        team = self.create_team(organization=organization, name='Foo', slug='foo')
-        path = reverse('sentry-create-project', args=[organization.slug])
-        self.login_as(self.user)
-        resp = self.client.post(path, {
-            'name': 'bar',
-        })
-        assert resp.status_code == 302, resp.context['form'].errors
-
-        project = Project.objects.get(team__organization=organization, name='bar')
-
-        assert project.team == team
-
-        redirect_uri = '/{}/{}/getting-started/'.format(organization.slug, project.slug)
-        assert resp['Location'] == absolute_uri(redirect_uri)
-
-    def test_multiple_teams(self):
-        organization = self.create_organization()
-        team = self.create_team(organization=organization, name='Foo', slug='foo')
-        team = self.create_team(organization=organization, name='Bar', slug='bar')
-        path = reverse('sentry-create-project', args=[organization.slug])
-        self.login_as(self.user)
-        resp = self.client.post(path, {
-            'name': 'bar',
-            'team': team.slug,
-        })
-        assert resp.status_code == 302, resp.context['form'].errors
-
-        project = Project.objects.get(team__organization=organization, name='bar')
-
-        assert project.team == team
-
-        redirect_uri = '/{}/{}/getting-started/'.format(organization.slug, project.slug)
-        assert resp['Location'] == absolute_uri(redirect_uri)
