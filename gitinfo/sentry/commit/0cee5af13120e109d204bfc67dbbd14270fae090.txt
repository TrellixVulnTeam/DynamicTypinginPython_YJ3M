commit 0cee5af13120e109d204bfc67dbbd14270fae090
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 6 16:11:26 2012 -0700

    Filters can (and are) now specified as part of plugins. ServerNameFilter and SiteFilter will now error if you are specifying them in FILTERS

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 5ad9d6dc89..84d644cc62 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -21,8 +21,6 @@ FILTERS = (
     'sentry.filters.StatusFilter',
     'sentry.filters.LoggerFilter',
     'sentry.filters.LevelFilter',
-    'sentry.filters.ServerNameFilter',
-    'sentry.filters.SiteFilter',
 )
 
 KEY = None
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index f274510b63..9bd2a7bf1b 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -8,6 +8,7 @@ sentry.filters
 
 from sentry.filters.base import *
 from sentry.filters.builtins import *
+from sentry.filters.helpers import *
 from sentry.filters.widgets import *
 
 # Backwards compatibility
diff --git a/sentry/filters/base.py b/sentry/filters/base.py
index ac76fe3675..4f0183c6c2 100644
--- a/sentry/filters/base.py
+++ b/sentry/filters/base.py
@@ -13,20 +13,10 @@ __all__ = ('Filter', 'GroupFilter', 'EventFilter')
 
 from django.utils.datastructures import SortedDict
 
-from sentry.conf import settings
 from sentry.models import Group, Event, FilterValue, MessageIndex
-from sentry.utils.db import InstanceManager
 from .widgets import ChoiceWidget
 
 
-class FilterInstanceManager(InstanceManager):
-    def filter(self, model):
-        for inst in self.all():
-            if model not in inst.types:
-                continue
-            yield inst
-
-
 class Filter(object):
     label = ''
     column = ''
@@ -80,8 +70,6 @@ class Filter(object):
         widget = self.get_widget()
         return widget.render(self.get_value())
 
-    objects = FilterInstanceManager(settings.FILTERS, instances=False)
-
 
 class EventFilter(Filter):
     types = [Event]
diff --git a/sentry/filters/builtins.py b/sentry/filters/builtins.py
index 10529c346a..8675a13ff2 100644
--- a/sentry/filters/builtins.py
+++ b/sentry/filters/builtins.py
@@ -5,15 +5,12 @@ sentry.filters.base
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from django.conf import settings as django_settings
 from django.utils.datastructures import SortedDict
 from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
-from sentry.models import Event
 from .base import Filter, GroupFilter
 
-__all__ = ('StatusFilter', 'LoggerFilter', 'ServerNameFilter', 'SiteFilter',
-           'LevelFilter')
+__all__ = ('StatusFilter', 'LoggerFilter', 'LevelFilter')
 
 
 class StatusFilter(GroupFilter):
@@ -33,17 +30,6 @@ class LoggerFilter(Filter):
     column = 'logger'
 
 
-class ServerNameFilter(Filter):
-    label = _('Server Name')
-    column = 'server_name'
-
-    def get_query_set(self, queryset):
-        if queryset.model == Event:
-            return queryset.filter(server_name=self.get_value()).distinct()
-        else:
-            return queryset.filter(event_set__server_name=self.get_value()).distinct()
-
-
 class LevelFilter(Filter):
     label = _('Level')
     column = 'level'
@@ -53,30 +39,3 @@ class LevelFilter(Filter):
 
     def get_query_set(self, queryset):
         return queryset.filter(level=self.get_value())
-
-
-class SiteFilter(Filter):
-    label = _('Site')
-    column = 'site'
-
-    def process(self, data):
-        if 'site' in data:
-            return data
-        if settings.SITE is None:
-            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
-                from django.contrib.sites.models import Site
-                try:
-                    settings.SITE = Site.objects.get_current().name
-                except Site.DoesNotExist:
-                    settings.SITE = ''
-            else:
-                settings.SITE = ''
-        if settings.SITE:
-            data['site'] = settings.SITE
-        return data
-
-    def get_query_set(self, queryset):
-        if queryset.model == Event:
-            return queryset.filter(site=self.get_value()).distinct()
-        else:
-            return queryset.filter(event_set__site=self.get_value()).distinct()
diff --git a/sentry/filters/helpers.py b/sentry/filters/helpers.py
new file mode 100644
index 0000000000..0c57d1f329
--- /dev/null
+++ b/sentry/filters/helpers.py
@@ -0,0 +1,53 @@
+"""
+sentry.filters.helpers
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+# Widget api is pretty ugly
+from __future__ import absolute_import
+
+__all__ = ('get_filters',)
+
+import logging
+
+from sentry.conf import settings
+from sentry.plugins import plugins
+
+
+FILTER_CACHE = {}
+
+
+def get_filters(model=None, project=None):
+    filter_list = []
+
+    # Add builtins (specified with the FILTERS setting)
+    for class_path in settings.FILTERS:
+        if class_path not in FILTER_CACHE:
+            module_name, class_name = class_path.rsplit('.', 1)
+            try:
+                module = __import__(module_name, {}, {}, class_name)
+                cls = getattr(module, class_name)
+            except Exception:
+                logger = logging.getLogger('sentry.errors.filters')
+                logger.exception('Unable to import %s' % (class_path,))
+                continue
+            FILTER_CACHE[class_path] = cls
+        filter_list.append(FILTER_CACHE[class_path])
+
+    # Add plugin-provided filters
+    for plugin in plugins.all():
+        if not plugin.is_enabled(project):
+            continue
+
+        for filter_cls in plugin.get_filters(project):
+            if filter_cls not in filter_list:
+                filter_list.append(filter_cls)
+
+    # yield all filters which support ``model``
+    for filter_cls in filter_list:
+        if model and model not in filter_cls.types:
+            continue
+        yield filter_cls
diff --git a/sentry/models.py b/sentry/models.py
index 6ff2b19d50..0fde30c0f0 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -22,7 +22,8 @@ from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import F
-from django.db.models.signals import post_syncdb, post_save, pre_delete
+from django.db.models.signals import post_syncdb, post_save, pre_delete, \
+  class_prepared
 from django.template.defaultfilters import slugify
 from django.utils.datastructures import SortedDict
 from django.utils.encoding import smart_unicode
@@ -699,16 +700,16 @@ class MessageIndex(BaseIndex):
 
 ## Register Signals
 
-def register_indexes():
+def register_indexes(**kwargs):
     """
     Grabs all required indexes from filters and registers them.
     """
-    from sentry.filters import Filter
+    from sentry.filters import get_filters
     logger = logging.getLogger('sentry.setup')
-    for cls in (f for f in Filter.objects.all() if f.column.startswith('data__')):
+    for cls in (f for f in get_filters() if f.column.startswith('data__')):
         MessageIndex.objects.register_index(cls.column, index_to='group')
         logger.debug('Registered index for for %r' % cls.column)
-register_indexes()
+class_prepared.connect(register_indexes, sender=MessageIndex)
 
 
 def create_default_project(created_models, verbosity=2, **kwargs):
diff --git a/sentry/plugins/base.py b/sentry/plugins/base.py
index db0fdc9159..c0b9452dde 100644
--- a/sentry/plugins/base.py
+++ b/sentry/plugins/base.py
@@ -413,6 +413,17 @@ class IPlugin(local):
         >>>     print 'New event created:', event.id
         """
 
+    def get_filters(self, project=None, **kwargs):
+        """
+        Provides additional filters to the builtins.
+
+        Must return an iterable.
+
+        >>> def get_filters(self, project, **kwargs):
+        >>>     return [MyFilterClass]
+        """
+        return []
+
 
 class Plugin(IPlugin):
     """
diff --git a/sentry/plugins/sentry_servers/__init__.py b/sentry/plugins/sentry_servers/__init__.py
index 608b2a3eac..e23ee399e0 100644
--- a/sentry/plugins/sentry_servers/__init__.py
+++ b/sentry/plugins/sentry_servers/__init__.py
@@ -1,51 +1,7 @@
 """
 sentry.plugins.sentry_servers
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-import sentry
-
-from django.db.models import Sum
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.plugins import Plugin, register
-
-
-class ServersPlugin(Plugin):
-    """
-    Adds additional support for showing information about servers including:
-
-    * A panel which shows all servers a message was seen on.
-    * A sidebar module which shows the servers most actively seen on.
-    """
-    slug = 'servers'
-    title = _('Servers')
-    version = sentry.VERSION
-    author = "Sentry Team"
-    author_url = "https://github.com/dcramer/sentry"
-
-    def get_unique_servers(self, group):
-        return group.messagefiltervalue_set.filter(key='server_name')\
-                    .values_list('value')\
-                    .annotate(times_seen=Sum('times_seen'))\
-                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
-                    .order_by('-times_seen')
-
-    def panels(self, request, group, panel_list, **kwargs):
-        panel_list.append((self.get_title(), self.get_url(group)))
-        return panel_list
-
-    def view(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_servers/index.html', {
-            'unique_servers': self.get_unique_servers(group),
-            'group': group,
-        })
-
-    def widget(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_servers/widget.html', {
-            'unique_servers': list(self.get_unique_servers(group)[:10]),
-            'group': group,
-        })
-register(ServersPlugin)
diff --git a/sentry/plugins/sentry_servers/models.py b/sentry/plugins/sentry_servers/models.py
new file mode 100644
index 0000000000..150b5ae8ae
--- /dev/null
+++ b/sentry/plugins/sentry_servers/models.py
@@ -0,0 +1,67 @@
+"""
+sentry.plugins.sentry_servers.models
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+import sentry
+
+from django.db.models import Sum
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.filters import Filter
+from sentry.models import Event
+from sentry.plugins import Plugin, register
+
+
+class ServerNameFilter(Filter):
+    label = _('Server Name')
+    column = 'server_name'
+
+    def get_query_set(self, queryset):
+        if queryset.model == Event:
+            return queryset.filter(server_name=self.get_value()).distinct()
+        else:
+            return queryset.filter(event_set__server_name=self.get_value()).distinct()
+
+
+class ServersPlugin(Plugin):
+    """
+    Adds additional support for showing information about servers including:
+
+    * A panel which shows all servers a message was seen on.
+    * A sidebar module which shows the servers most actively seen on.
+    """
+    slug = 'servers'
+    title = _('Servers')
+    version = sentry.VERSION
+    author = "Sentry Team"
+    author_url = "https://github.com/dcramer/sentry"
+
+    def get_unique_servers(self, group):
+        return group.messagefiltervalue_set.filter(key='server_name')\
+                    .values_list('value')\
+                    .annotate(times_seen=Sum('times_seen'))\
+                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
+                    .order_by('-times_seen')
+
+    def panels(self, request, group, panel_list, **kwargs):
+        panel_list.append((self.get_title(), self.get_url(group)))
+        return panel_list
+
+    def view(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_servers/index.html', {
+            'unique_servers': self.get_unique_servers(group),
+            'group': group,
+        })
+
+    def widget(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_servers/widget.html', {
+            'unique_servers': list(self.get_unique_servers(group)[:10]),
+            'group': group,
+        })
+
+    def get_filters(self, project=None, **kwargs):
+        return [ServerNameFilter]
+register(ServersPlugin)
diff --git a/sentry/plugins/sentry_sites/__init__.py b/sentry/plugins/sentry_sites/__init__.py
index f525037308..4cc4097c48 100644
--- a/sentry/plugins/sentry_sites/__init__.py
+++ b/sentry/plugins/sentry_sites/__init__.py
@@ -1,51 +1,7 @@
 """
 sentry.plugins.sentry_sites
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-import sentry
-
-from django.db.models import Sum
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.plugins import Plugin, register
-
-
-class SitesPlugin(Plugin):
-    """
-    Adds additional support for showing information about sites including:
-
-    * A panel which shows all sites a message was seen on.
-    * A sidebar module which shows the sites most actively seen on.
-    """
-    slug = 'sites'
-    title = _('Sites')
-    version = sentry.VERSION
-    author = "Sentry Team"
-    author_url = "https://github.com/dcramer/sentry"
-
-    def get_unique_sites(self, group):
-        return group.messagefiltervalue_set.filter(key='site')\
-                    .values_list('value')\
-                    .annotate(times_seen=Sum('times_seen'))\
-                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
-                    .order_by('-times_seen')
-
-    def panels(self, request, group, panel_list, **kwargs):
-        panel_list.append((self.get_title(), self.get_url(group)))
-        return panel_list
-
-    def view(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_sites/index.html', {
-            'group': group,
-            'unique_sites': self.get_unique_sites(group),
-        })
-
-    def widget(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_sites/widget.html', {
-            'group': group,
-            'unique_sites': list(self.get_unique_sites(group)[:10]),
-        })
-register(SitesPlugin)
diff --git a/sentry/plugins/sentry_sites/models.py b/sentry/plugins/sentry_sites/models.py
new file mode 100644
index 0000000000..8ee4efadbf
--- /dev/null
+++ b/sentry/plugins/sentry_sites/models.py
@@ -0,0 +1,85 @@
+"""
+sentry.plugins.sentry_sites.models
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+import sentry
+
+from django.conf import settings as django_settings
+from django.db.models import Sum
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.conf import settings
+from sentry.filters import Filter
+from sentry.models import Event
+from sentry.plugins import Plugin, register
+
+
+class SiteFilter(Filter):
+    label = _('Site')
+    column = 'site'
+
+    def process(self, data):
+        if 'site' in data:
+            return data
+        if settings.SITE is None:
+            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
+                from django.contrib.sites.models import Site
+                try:
+                    settings.SITE = Site.objects.get_current().name
+                except Site.DoesNotExist:
+                    settings.SITE = ''
+            else:
+                settings.SITE = ''
+        if settings.SITE:
+            data['site'] = settings.SITE
+        return data
+
+    def get_query_set(self, queryset):
+        if queryset.model == Event:
+            return queryset.filter(site=self.get_value()).distinct()
+        else:
+            return queryset.filter(event_set__site=self.get_value()).distinct()
+
+
+class SitesPlugin(Plugin):
+    """
+    Adds additional support for showing information about sites including:
+
+    * A panel which shows all sites a message was seen on.
+    * A sidebar module which shows the sites most actively seen on.
+    """
+    slug = 'sites'
+    title = _('Sites')
+    version = sentry.VERSION
+    author = "Sentry Team"
+    author_url = "https://github.com/dcramer/sentry"
+
+    def get_unique_sites(self, group):
+        return group.messagefiltervalue_set.filter(key='site')\
+                    .values_list('value')\
+                    .annotate(times_seen=Sum('times_seen'))\
+                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
+                    .order_by('-times_seen')
+
+    def panels(self, request, group, panel_list, **kwargs):
+        panel_list.append((self.get_title(), self.get_url(group)))
+        return panel_list
+
+    def view(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_sites/index.html', {
+            'group': group,
+            'unique_sites': self.get_unique_sites(group),
+        })
+
+    def widget(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_sites/widget.html', {
+            'group': group,
+            'unique_sites': list(self.get_unique_sites(group)[:10]),
+        })
+
+    def get_filters(self, project=None, **kwargs):
+        return [SiteFilter]
+register(SitesPlugin)
diff --git a/sentry/utils/db.py b/sentry/utils/db.py
index 4b8a4a8606..1d7770f274 100644
--- a/sentry/utils/db.py
+++ b/sentry/utils/db.py
@@ -18,6 +18,9 @@ class InstanceManager(object):
         self.instances = instances
         self.update(class_list)
 
+    def get_class_list(self):
+        return self.class_list
+
     def add(self, class_path):
         self.cache = None
         self.class_list.append(class_path)
@@ -37,7 +40,8 @@ class InstanceManager(object):
         """
         Returns a list of cached instances.
         """
-        if not self.class_list:
+        class_list = list(self.get_class_list())
+        if not class_list:
             self.cache = []
             return []
 
@@ -45,7 +49,7 @@ class InstanceManager(object):
             return self.cache
 
         results = []
-        for cls_path in self.class_list:
+        for cls_path in class_list:
             module_name, class_name = cls_path.rsplit('.', 1)
             try:
                 module = __import__(module_name, {}, {}, class_name)
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index 375254f6c4..23494ed1cc 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -15,7 +15,7 @@ from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
 from sentry.models import Event
-from sentry.filters import Filter
+from sentry.filters import get_filters
 from sentry.replays import Replayer
 from sentry.utils.http import safe_urlencode
 from sentry.web.decorators import login_required, has_access, render_to_response
@@ -26,7 +26,7 @@ from sentry.web.forms import ReplayForm
 @has_access
 def event_list(request, project):
     filters = []
-    for cls in Filter.objects.filter(Event):
+    for cls in get_filters(Event, project):
         try:
             filters.append(cls(request, project))
         except Exception, e:
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 7517fe649c..7bda59c6e9 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -20,7 +20,7 @@ from django.utils.safestring import mark_safe
 from sentry.conf import settings
 from sentry.constants import SORT_OPTIONS, SEARCH_SORT_OPTIONS, DATE_OPTIONS, \
   SORT_CLAUSES, MYSQL_SORT_CLAUSES, SQLITE_SORT_CLAUSES, DATE_VALUES
-from sentry.filters import Filter
+from sentry.filters import get_filters
 from sentry.models import Group, Event, View, SearchDocument
 from sentry.plugins import plugins
 from sentry.utils import json
@@ -49,7 +49,7 @@ def _get_rendered_interfaces(event):
 
 def _get_group_list(request, project, view=None):
     filters = []
-    for cls in Filter.objects.filter(Group):
+    for cls in get_filters(Group, project):
         try:
             filters.append(cls(request, project))
         except Exception, e:
