commit 2a1923f1df81c8fe6bd5a2be142bd34b4bd646c6
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Apr 19 11:04:05 2019 -0700

    fix(pinned-searches): Add redirect to permalink after pinning (#12845)
    
    Fixes some bugs with pinning an existing global search

diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index 490cd85efd..69c47ce8fb 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -1,3 +1,4 @@
+import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
@@ -534,9 +535,25 @@ class SmartSearchBar extends React.Component {
     }
 
     if (!!pinnedSearch) {
-      unpinSearch(api, organization.slug, savedSearchType, pinnedSearch);
+      unpinSearch(api, organization.slug, savedSearchType, pinnedSearch).then(() => {
+        browserHistory.push({
+          pathname: `/organizations/${organization.slug}/issues/`,
+          query: {query: pinnedSearch.query},
+        });
+      });
     } else {
-      pinSearch(api, organization.slug, savedSearchType, this.state.query);
+      pinSearch(
+        api,
+        organization.slug,
+        savedSearchType,
+        removeSpace(this.state.query)
+      ).then(resp => {
+        if (resp && resp.id) {
+          browserHistory.push(
+            `/organizations/${organization.slug}/issues/searches/${resp.id}/`
+          );
+        }
+      });
     }
 
     analytics('search.pin', {
diff --git a/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx b/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
index 8b21d2ae43..be77c493ac 100644
--- a/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
+++ b/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
@@ -49,7 +49,9 @@ const SavedSearchesStore = Reflux.createStore({
           !(
             savedSearch.isPinned &&
             savedSearch.type === type &&
-            (!savedSearch.isOrgCustom && !savedSearch.isGlobal)
+            (!savedSearch.isOrgCustom &&
+              !savedSearch.isGlobal &&
+              savedSearch.id !== existingSearchId)
           )
       )
       .map(savedSearch => {
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index 2978159d4f..a6586d3c13 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -70,7 +70,9 @@ export default class InstallWizard extends AsyncView {
       // TODO(dcramer): we need to rethink this logic as doing multiple "is this value actually set"
       // is problematic
       if (
-        option.value !== undefined && option.value !== "" && option.value !== null &&
+        option.value !== undefined &&
+        option.value !== '' &&
+        option.value !== null &&
         (option.field.isSet || optionName != 'beacon.anonymous')
       ) {
         data[optionName] = option.value;
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index cf328c24ce..af62a05e85 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -482,9 +482,219 @@ describe('OrganizationStream', function() {
       );
     });
 
-    it.todo('pins and unpins a custom query');
+    it('pins and unpins a custom query', async function() {
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [savedSearch],
+      });
+      createWrapper();
+      await tick();
+      wrapper.update();
+
+      const createPin = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'PUT',
+        body: {
+          ...savedSearch,
+          id: '666',
+          query: 'assigned:me level:fatal',
+          isPinned: true,
+        },
+      });
+
+      wrapper
+        .find('SmartSearchBar input')
+        .simulate('change', {target: {value: 'assigned:me level:fatal'}});
+      wrapper.find('SmartSearchBar form').simulate('submit');
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          query: expect.objectContaining({
+            query: 'assigned:me level:fatal',
+          }),
+        })
+      );
+
+      wrapper.setProps({
+        location: {
+          ...router.location,
+          query: {
+            query: 'assigned:me level:fatal',
+          },
+        },
+      });
+
+      expect(wrapper.find('OrganizationSavedSearchSelector ButtonTitle').text()).toBe(
+        'Custom Search'
+      );
+
+      wrapper.find('Button[aria-label="Pin this search"]').simulate('click');
+
+      expect(createPin).toHaveBeenCalled();
+
+      await tick();
+      wrapper.update();
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        '/organizations/org-slug/issues/searches/666/'
+      );
+
+      wrapper.setProps({
+        params: {
+          ...router.params,
+          searchId: '666',
+        },
+      });
+
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('OrganizationSavedSearchSelector ButtonTitle').text()).toBe(
+        'My Pinned Search'
+      );
+    });
+
+    it('pins and unpins a saved query', async function() {
+      const assignedToMe = TestStubs.Search({
+        id: '234',
+        name: 'Assigned to Me',
+        isPinned: false,
+        isGlobal: true,
+        query: 'assigned:me',
+        projectId: null,
+        type: 0,
+      });
+
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [savedSearch, assignedToMe],
+      });
+      createWrapper();
+      await tick();
+      wrapper.update();
+
+      let createPin = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'PUT',
+        body: {
+          ...savedSearch,
+          isPinned: true,
+        },
+      });
+
+      wrapper.find('OrganizationSavedSearchSelector DropdownButton').simulate('click');
+      wrapper
+        .find('OrganizationSavedSearchSelector MenuItem a')
+        .first()
+        .simulate('click');
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/searches/789/',
+          query: {
+            environment: [],
+            project: ['3559'],
+          },
+        })
+      );
+
+      wrapper.setProps({
+        params: {
+          ...router.params,
+          searchId: '789',
+        },
+      });
+
+      expect(wrapper.find('OrganizationSavedSearchSelector ButtonTitle').text()).toBe(
+        'Unresolved Issues'
+      );
+
+      wrapper.find('Button[aria-label="Pin this search"]').simulate('click');
+
+      expect(createPin).toHaveBeenCalled();
+
+      await tick();
+      wrapper.update();
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        '/organizations/org-slug/issues/searches/789/'
+      );
 
-    it.todo('pins and unpins a saved query');
+      wrapper.setProps({
+        params: {
+          ...router.params,
+          searchId: '789',
+        },
+      });
+
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('OrganizationSavedSearchSelector ButtonTitle').text()).toBe(
+        'Unresolved Issues'
+      );
+
+      // Select other saved search
+      wrapper.find('OrganizationSavedSearchSelector DropdownButton').simulate('click');
+      wrapper
+        .find('OrganizationSavedSearchSelector MenuItem a')
+        .at(1)
+        .simulate('click');
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/searches/234/',
+          query: {
+            environment: [],
+          },
+        })
+      );
+
+      wrapper.setProps({
+        params: {
+          ...router.params,
+          searchId: '234',
+        },
+      });
+
+      expect(wrapper.find('OrganizationSavedSearchSelector ButtonTitle').text()).toBe(
+        'Assigned to Me'
+      );
+
+      createPin = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'PUT',
+        body: {
+          ...assignedToMe,
+          isPinned: true,
+        },
+      });
+
+      wrapper.find('Button[aria-label="Pin this search"]').simulate('click');
+
+      expect(createPin).toHaveBeenCalled();
+
+      await tick();
+      wrapper.update();
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        '/organizations/org-slug/issues/searches/234/'
+      );
+
+      wrapper.setProps({
+        params: {
+          ...router.params,
+          searchId: '234',
+        },
+      });
+
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('OrganizationSavedSearchSelector ButtonTitle').text()).toBe(
+        'Assigned to Me'
+      );
+    });
 
     it.todo('saves a new query');
 
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 9d2e686e95..e7e3988dc4 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -256,7 +256,7 @@ describe('SearchBar', function() {
         expect.objectContaining({
           method: 'PUT',
           data: {
-            query: 'url:"fu" ',
+            query: 'url:"fu"',
             type: 0,
           },
         })
@@ -271,7 +271,7 @@ describe('SearchBar', function() {
         tagValueLoader: () => Promise.resolve([]),
         supportedTags,
         organization,
-        pinnedSearch: {id: '1', query: 'url:"fu" '},
+        pinnedSearch: {id: '1', query: 'url:"fu"'},
       };
       const searchBar = mount(<SearchBar {...props} />, routerContext);
       searchBar.find('button[aria-label="Pin this search"]').simulate('click');
