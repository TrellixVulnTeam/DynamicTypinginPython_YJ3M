commit af1690001402900d9286313fbdcb0e1146ba8556
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Sep 23 17:25:05 2015 -0700

    Proof of concept sidebar w/ tag value fetching [WIP]

diff --git a/src/sentry/static/sentry/app/actions/streamTagActions.jsx b/src/sentry/static/sentry/app/actions/streamTagActions.jsx
new file mode 100644
index 0000000000..4ec43c4ec3
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/streamTagActions.jsx
@@ -0,0 +1,11 @@
+
+import Reflux from "reflux";
+
+export default Reflux.createActions([
+  "loadTags",
+  "loadTagsError",
+  "loadTagsSuccess",
+  "loadTagValues",
+  "laodTagValuesError",
+  "loadTagValuesSuccess"
+]);
diff --git a/src/sentry/static/sentry/app/api/tags.jsx b/src/sentry/static/sentry/app/api/tags.jsx
new file mode 100644
index 0000000000..5249f744d9
--- /dev/null
+++ b/src/sentry/static/sentry/app/api/tags.jsx
@@ -0,0 +1,26 @@
+import api from "../api";
+import StreamTagActions from "../actions/streamTagActions";
+
+export function fetchTags(params) {
+  StreamTagActions.loadTags();
+
+  return api.request(`/projects/${params.orgId}/${params.projectId}/tags/`, {
+    success: StreamTagActions.loadTagsSuccess,
+    error: StreamTagActions.loadTagsError
+  });
+}
+
+export function fetchTagValues(params, tagKey, query, onSuccess) {
+  StreamTagActions.loadTagValues();
+  return api.request(`/projects/${params.orgId}/${params.projectId}/tags/${tagKey}/values/`, {
+    data: {
+      query: query
+    },
+    method: "GET",
+    success: (values) => {
+      StreamTagActions.loadTagValuesSuccess(tagKey, values.map(v => '"' + v.value + '"'));
+      onSuccess && onSuccess(values);
+    },
+    error: StreamTagActions.loadTagValuesError
+  });
+}
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
new file mode 100644
index 0000000000..5bb83d28cc
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -0,0 +1,67 @@
+import Reflux from "reflux";
+import _ from "underscore";
+
+import StreamTagActions from "../actions/streamTagActions";
+import MemberListStore from "./memberListStore";
+
+var StreamTagStore = Reflux.createStore({
+  listenables: StreamTagActions,
+
+  init: function() {
+    this.tags = {
+      is: {
+        key: 'is',
+        name: 'Status',
+        values: [
+          { value: 'resolved' },
+          { value: 'unresolved' },
+          { value: 'muted' }
+        ],
+        predefined: true
+      },
+      assigned: {
+        key: 'assigned',
+        name: 'User',
+        values: MemberListStore.getAll().map(user => {
+          return { value: user.email };
+        }),
+        predefined: true
+      }
+    };
+  },
+
+  reset: function() {
+
+  },
+
+  getTag(tagName) {
+    return this.tags[tagName];
+  },
+
+  getTagValues(tagKey, query) {
+    return this.tags[tagKey].values || [];
+  },
+
+  onLoadTagsSuccess(data) {
+    Object.assign(this.tags, _.reduce(data, (obj, tag) => {
+      obj[tag.key] = tag;
+      return obj;
+    }, {}));
+
+    this.trigger(_.map(this.tags, (tag) => {
+      return tag;
+    }));
+  },
+
+  onLoadTagValuesSuccess(tagKey, data) {
+    let tag = this.tags[tagKey];
+    if (tag.values)
+      tag.values = _.unique(tag.values.concat(data));
+    else
+      tag.values = data;
+
+    this.trigger([tag]);
+  }
+});
+
+export default StreamTagStore;
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 73f55af59a..69d1e9d489 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -2,7 +2,10 @@ import React from "react";
 import Reflux from "reflux";
 import $ from "jquery";
 import Cookies from "js-cookie";
+import Sticky from 'react-sticky';
+
 import api from "../api";
+
 import GroupStore from "../stores/groupStore";
 import LoadingError from "../components/loadingError";
 import LoadingIndicator from "../components/loadingIndicator";
@@ -10,14 +13,17 @@ import Pagination from "../components/pagination";
 import RouteMixin from "../mixins/routeMixin";
 import StreamGroup from '../components/stream/group';
 import StreamActions from './stream/actions';
+import StreamTagActions from "../actions/streamTagActions";
+import StreamTagStore from "../stores/streamTagStore";
 import StreamFilters from './stream/filters';
+import StreamSidebar from "./stream/sidebar";
 import utils from "../utils";
-import Sticky from 'react-sticky';
 
 
 var Stream = React.createClass({
   mixins: [
     Reflux.listenTo(GroupStore, "onGroupChange"),
+    Reflux.listenTo(StreamTagStore, "onStreamTagChange"),
     RouteMixin
   ],
 
@@ -53,7 +59,8 @@ var Stream = React.createClass({
       error: false,
       query: this.props.defaultQuery,
       sort: this.props.defaultSort,
-      filter: {}
+      filter: {},
+      tags: {}
     }, this.getQueryStringState());
   },
 
@@ -70,6 +77,8 @@ var Stream = React.createClass({
       endpoint: this.getGroupListEndpoint()
     });
 
+    this.fetchTags();
+
     var realtime = Cookies.get("realtimeActive");
     if (realtime) {
       var realtimeActive = realtime === "true";
@@ -89,6 +98,20 @@ var Stream = React.createClass({
     GroupStore.reset();
   },
 
+  fetchTags() {
+    StreamTagActions.loadTags();
+
+    var params = this.context.router.getCurrentParams();
+    api.request(`/projects/${params.orgId}/${params.projectId}/tags/`, {
+      success: (tags) => {
+        StreamTagActions.loadTagsSuccess(tags);
+      },
+      error: (error) => {
+        StreamTagActions.loadTagsError();
+      }
+    });
+  },
+
   getQueryStringState() {
     var currentQuery = this.context.router.getCurrentQuery();
 
@@ -248,6 +271,16 @@ var Stream = React.createClass({
     }
   },
 
+  onStreamTagChange(tags) {
+    console.log(tags);
+    this.setState({
+      tags: tags.reduce((obj, tag) => {
+        obj[tag.key] = tag;
+        return obj;
+      }, this.state.tags)
+    });
+  },
+
   onPage(cursor) {
     var router = this.context.router;
     var params = router.getCurrentParams();
@@ -348,25 +381,33 @@ var Stream = React.createClass({
         <StreamFilters
           query={this.state.query}
           sort={this.state.sort}
+          tags={this.state.tags}
           defaultQuery={this.props.defaultQuery}
           onSortChange={this.onSortChange}
           onFilterChange={this.onFilterChange}
-          onSearch={this.onSearch} />
-          <div className="group-header">
-            <Sticky>
-              <StreamActions
-                orgId={params.orgId}
-                projectId={params.projectId}
-                onSelectStatsPeriod={this.onSelectStatsPeriod}
-                onRealtimeChange={this.onRealtimeChange}
-                realtimeActive={this.state.realtimeActive}
-                statsPeriod={this.state.statsPeriod}
-                groupIds={this.state.groupIds} />
-            </Sticky>
+          onSearch={this.onSearch}
+        />
+        <div className="row">
+          <div className="col-md-10">
+            <div className="group-header">
+              <Sticky>
+                <StreamActions
+                  orgId={params.orgId}
+                  projectId={params.projectId}
+                  onSelectStatsPeriod={this.onSelectStatsPeriod}
+                  onRealtimeChange={this.onRealtimeChange}
+                  realtimeActive={this.state.realtimeActive}
+                  statsPeriod={this.state.statsPeriod}
+                  groupIds={this.state.groupIds} />
+              </Sticky>
+            </div>
+            {this.renderStreamBody()}
+            <Pagination pageLinks={this.state.pageLinks} onPage={this.onPage} />
           </div>
-          {this.renderStreamBody()}
-          <Pagination pageLinks={this.state.pageLinks} onPage={this.onPage} />
-
+          <div className="col-md-2">
+            <StreamSidebar tags={this.state.tags}/>
+          </div>
+        </div>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index e7e5f4934c..59ad5e5560 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -84,6 +84,7 @@ var StreamFilters = React.createClass({
           <div className="col-sm-5">
             <SearchBar
               ref="searchBar"
+              tags={this.props.tags}
               defaultQuery={this.props.defaultQuery}
               placeholder="Search for events, users, tags, and everything else."
               query={this.props.query}
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 8ef10d5cb2..6dfb208553 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -6,6 +6,7 @@ import _ from "underscore";
 import MemberListStore from "../../stores/memberListStore";
 
 import api from "../../api";
+import tagsApi from "../../api/tags";
 
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 
@@ -77,20 +78,6 @@ var SearchBar = React.createClass({
     };
   },
 
-  componentWillMount() {
-    var params = this.context.router.getCurrentParams();
-    api.request(`/projects/${params.orgId}/${params.projectId}/tags/`, {
-      success: (tags) => {
-        this.setState({
-          tags: tags.reduce((obj, tag) => {
-            obj[tag.key] = tag;
-            return obj;
-          }, this.state.tags)
-        });
-      }
-    });
-  },
-
   statics: {
     /**
      * Given a query, and the current cursor position, return the string-delimiting
@@ -221,16 +208,20 @@ var SearchBar = React.createClass({
     });
 
     var params = this.context.router.getCurrentParams();
-    api.request(`/projects/${params.orgId}/${params.projectId}/tags/${tag.key}/values/`, {
-      data: {
-        query: query
-      },
-      method: "GET",
-      success: (values) => {
-        this.setState({ loading: false });
-        callback(values.map(v => '"' + v.value + '"'), tag.key, query);
-      }
+    tagsApi.fetchTagValues(params, tag, query, function (values) {
+      this.setState({ loading: false });
+      callback(values.map(v => '"' + v.value + '"'), tag.key, query);
     });
+    // api.request(`/projects/${params.orgId}/${params.projectId}/tags/${tag.key}/values/`, {
+    //   data: {
+    //     query: query
+    //   },
+    //   method: "GET",
+    //   success: (values) => {
+    //     this.setState({ loading: false });
+    //     callback(values.map(v => '"' + v.value + '"'), tag.key, query);
+    //   }
+    // });
   }, 300),
 
   /**
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
new file mode 100644
index 0000000000..78f9f695a9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -0,0 +1,30 @@
+import React from "react";
+import _ from "underscore";
+import StreamTagFilter from "./tagFilter";
+
+var StreamSidebar = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getDefaultProps() {
+    return {
+      tags: {}
+    };
+  },
+
+  componentWillMount() {
+  },
+
+  render() {
+    return (
+      <div className="stream-sidebar">
+        {_.map(this.props.tags, (tag) => {
+          return <StreamTagFilter tag={tag}/>;
+        })}
+      </div>
+    );
+  }
+});
+
+export default StreamSidebar;
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
new file mode 100644
index 0000000000..a3b0bc96c4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -0,0 +1,83 @@
+import React from "react";
+import Reflux from "reflux";
+import _ from "underscore";
+import DropdownLink from "../../components/dropdownLink";
+import MenuItem from "../../components/menuItem";
+import LoadingIndicator from "../../components/loadingIndicator";
+
+import {fetchTagValues} from "../../api/tags";
+import StreamTagStore from "../../stores/streamTagStore";
+
+var StreamTagFilter = React.createClass({
+  mixins: [
+    Reflux.listenTo(StreamTagStore, "onStreamTagChange")
+  ],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getDefaultProps() {
+    return {
+      tag: {},
+    };
+  },
+
+  getInitialState() {
+    return {
+      tagValues: [],
+      query: '',
+      loading: false
+    };
+  },
+
+  fetchTagValues: _.debounce(function(query) {
+    this.setState({
+      query: query,
+      loading: true
+    });
+
+    let params = this.context.router.getCurrentParams();
+    fetchTagValues(params, this.props.tag.key, query, () => {
+      this.setState({ loading: false });
+    });
+  }, 300),
+
+  onFilterChange(evt) {
+    this.fetchTagValues(evt.target.value);
+  },
+
+  onStreamTagChange(tags) {
+    let tag = _.find(tags, (t) => t.key === this.props.tag.key);
+    if (!tag) return;
+
+    let query = this.state.query.toLowerCase();
+    this.setState({
+      tagValues: _.filter(tag.values || [], (val) => val.toLowerCase().indexOf(query) > -1)
+    });
+  },
+
+  render() {
+    let tag = this.props.tag;
+
+    return (
+      <div>
+        <h6>{tag.name}</h6>
+        <DropdownLink
+          className="btn btn-default btn-sm"
+          title="Search a value...">
+          <MenuItem noAnchor={true} key="filter">
+            <input type="text" className="form-control input-sm"
+                   placeholder="Filter people" ref="filter"
+                   onKeyUp={this.onFilterChange} />
+          </MenuItem>
+          {this.state.loading ? <LoadingIndicator/> : this.state.tagValues.map((val) => {
+            return <MenuItem>{val}</MenuItem>;
+          })}
+        </DropdownLink>
+      </div>
+    );
+  }
+});
+
+export default StreamTagFilter;
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index 5972094490..f3a05c8f67 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -631,6 +631,27 @@
   }
 }
 
+/**
+* Stream Sidebar
+* ============================================================================
+*/
+
+.stream-sidebar {
+  h6 {
+    margin-bottom: 0.5em;
+    color: @gray-light;
+  }
+
+  .dropdown {
+    display: block;
+    margin-bottom: 1em;
+
+    a {
+      display: block;
+    }
+  }
+}
+
 /**
 * Stream Pagination
 * ============================================================================
