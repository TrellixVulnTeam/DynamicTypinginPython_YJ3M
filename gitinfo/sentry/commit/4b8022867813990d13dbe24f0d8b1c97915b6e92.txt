commit 4b8022867813990d13dbe24f0d8b1c97915b6e92
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed Mar 20 10:28:43 2019 -0700

    feat(app-platform): Add stacktrace-link UI (#12457)
    
    * add stacktrace link

diff --git a/src/sentry/mediators/sentry_app_components/preparer.py b/src/sentry/mediators/sentry_app_components/preparer.py
index 8088bedfb2..5916d166df 100644
--- a/src/sentry/mediators/sentry_app_components/preparer.py
+++ b/src/sentry/mediators/sentry_app_components/preparer.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from six.moves.urllib.parse import urlparse, urlencode, urlunparse
 from sentry.mediators import Mediator, Param
 from sentry.mediators.external_requests import SelectRequester
 
@@ -12,6 +13,23 @@ class Preparer(Mediator):
     def call(self):
         if self.component.type == 'issue-link':
             return self._prepare_issue_link()
+        if self.component.type == 'stacktrace-link':
+            return self._prepare_stacktrace_link()
+
+    def _prepare_stacktrace_link(self):
+        schema = self.component.schema
+        uri = schema.get('uri')
+
+        urlparts = list(urlparse(self.install.sentry_app.webhook_url))
+        urlparts[2] = uri
+
+        query = {'installationId': self.install.uuid}
+
+        if self.project:
+            query['projectSlug'] = self.project.slug
+
+        urlparts[4] = urlencode(query)
+        schema.update({'url': urlunparse(urlparts)})
 
     def _prepare_issue_link(self):
         schema = self.component.schema.copy()
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
index eb2f3af6bd..d3c4d0460c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
@@ -1,9 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import SentryTypes from 'app/sentryTypes';
 import {defined} from 'app/utils';
+import OpenInButton from 'app/components/events/interfaces/openInButton';
 
 const ContextLine = function(props) {
-  const {line, isActive} = props;
+  const {line, isActive, filename, group} = props;
   let liClassName = 'expandable';
   if (isActive) {
     liClassName += ' active';
@@ -19,6 +21,7 @@ const ContextLine = function(props) {
     <li className={liClassName} key={line[0]}>
       <span className="ws">{lineWs}</span>
       <span className="contextline">{lineCode}</span>
+      {isActive && <OpenInButton filename={filename} lineNo={line[0]} group={group} />}
     </li>
   );
 };
@@ -26,6 +29,8 @@ const ContextLine = function(props) {
 ContextLine.propTypes = {
   line: PropTypes.array.isRequired,
   isActive: PropTypes.bool,
+  filename: PropTypes.string,
+  group: SentryTypes.Group,
 };
 
 export default ContextLine;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
index dde4ed65d0..efb9529252 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
@@ -16,10 +16,11 @@ class CrashContent extends React.Component {
     newestFirst: PropTypes.bool.isRequired,
     exception: PropTypes.object,
     stacktrace: PropTypes.object,
+    group: SentryTypes.Group,
   };
 
   renderException = () => {
-    const {event, stackView, stackType, newestFirst, exception} = this.props;
+    const {event, stackView, stackType, newestFirst, exception, group} = this.props;
     return stackView === 'raw' ? (
       <RawExceptionContent
         eventId={event.id}
@@ -31,6 +32,7 @@ class CrashContent extends React.Component {
       <ExceptionContent
         type={stackType}
         view={stackView}
+        group={group}
         values={exception.values}
         platform={event.platform}
         newestFirst={newestFirst}
@@ -39,7 +41,7 @@ class CrashContent extends React.Component {
   };
 
   renderStacktrace = () => {
-    const {event, stackView, newestFirst, stacktrace} = this.props;
+    const {event, stackView, newestFirst, stacktrace, group} = this.props;
     return stackView === 'raw' ? (
       <pre className="traceback plain">
         {rawStacktraceContent(stacktrace, event.platform)}
@@ -51,6 +53,7 @@ class CrashContent extends React.Component {
         includeSystemFrames={stackView === 'full'}
         platform={event.platform}
         newestFirst={newestFirst}
+        group={group}
       />
     );
   };
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index 4689fd0d05..d0b285a19b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -1,4 +1,5 @@
 import PropTypes from 'prop-types';
+import SentryTypes from 'app/sentryTypes';
 import React from 'react';
 
 import {defined} from 'app/utils';
@@ -13,11 +14,13 @@ class ExceptionContent extends React.Component {
     view: PropTypes.string.isRequired,
     platform: PropTypes.string,
     newestFirst: PropTypes.bool,
+    group: SentryTypes.Group,
   };
 
   render() {
     const stackView = this.props.view;
     const newestFirst = this.props.newestFirst;
+    const group = this.props.group;
     const children = this.props.values.map((exc, excIdx) => {
       return (
         <div key={excIdx} className="exception">
@@ -47,6 +50,7 @@ class ExceptionContent extends React.Component {
               includeSystemFrames={stackView === 'full'}
               platform={this.props.platform}
               newestFirst={newestFirst}
+              group={group}
             />
           )}
         </div>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 43d9defada..058984cae4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,4 +1,5 @@
 import PropTypes from 'prop-types';
+import SentryTypes from 'app/sentryTypes';
 import React from 'react';
 import _ from 'lodash';
 import classNames from 'classnames';
@@ -36,6 +37,7 @@ const Frame = createReactClass({
     isOnlyFrame: PropTypes.bool,
     timesRepeated: PropTypes.number,
     registers: PropTypes.objectOf(PropTypes.string.isRequired),
+    group: SentryTypes.Group,
   },
 
   getDefaultProps() {
@@ -231,6 +233,7 @@ const Frame = createReactClass({
 
   renderContext() {
     const data = this.props.data;
+    const group = this.props.group;
     let context = '';
     const {isExpanded} = this.state;
 
@@ -261,7 +264,13 @@ const Frame = createReactClass({
           {data.context &&
             contextLines.map((line, index) => {
               return (
-                <ContextLine key={index} line={line} isActive={data.lineNo === line[0]} />
+                <ContextLine
+                  key={index}
+                  line={line}
+                  isActive={data.lineNo === line[0]}
+                  filename={data.filename}
+                  group={group}
+                />
               );
             })}
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx b/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx
new file mode 100644
index 0000000000..39c6eb3f73
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx
@@ -0,0 +1,103 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import SentryTypes from 'app/sentryTypes';
+import Button from 'app/components/button';
+import qs from 'query-string';
+import styled from 'react-emotion';
+import {t} from 'app/locale';
+
+import withApi from 'app/utils/withApi';
+import withLatestContext from 'app/utils/withLatestContext';
+
+class OpenInButton extends React.Component {
+  static propTypes = {
+    api: PropTypes.object,
+    organization: SentryTypes.Organization,
+    lineNo: PropTypes.number,
+    filename: PropTypes.string,
+    group: SentryTypes.Group,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      loading: false,
+      error: false,
+      components: [],
+    };
+  }
+
+  componentWillMount() {
+    this.fetchIssueLinkComponents();
+  }
+
+  fetchIssueLinkComponents() {
+    const {api, organization, group} = this.props;
+    const hasOrganization = !!organization;
+    const features = new Set(organization.features);
+    const hasSentryApps = hasOrganization && features.has('sentry-apps');
+
+    if (hasSentryApps && group && group.project) {
+      api
+        .requestPromise(
+          `/organizations/${organization.slug}/sentry-app-components/?filter=stacktrace-link&projectId=${group
+            .project.id}`
+        )
+        .then(data => {
+          if (data.length) {
+            this.setState({components: data});
+          }
+        })
+        .catch(error => {
+          return;
+        });
+    }
+  }
+
+  getUrl() {
+    const {components} = this.state;
+    const {filename, lineNo} = this.props;
+
+    const queryParams = {
+      lineNo,
+      filename,
+    };
+    const query = qs.stringify(queryParams);
+    return components[0].schema.url + '&' + query;
+  }
+
+  render() {
+    const {components} = this.state;
+    if (!components.length) {
+      return null;
+    }
+
+    const url = this.getUrl();
+    return (
+      <StyledButtonContainer>
+        <StyledButton href={url} size="small" priority="primary">
+          {t(`Debug In ${components[0].sentryApp.name}`)}
+        </StyledButton>
+      </StyledButtonContainer>
+    );
+  }
+}
+
+export {OpenInButton};
+const OpenInButtonComponent = withLatestContext(OpenInButton);
+export default withApi(OpenInButtonComponent);
+
+const StyledButtonContainer = styled('div')`
+  height: 0;
+  position: relative;
+`;
+
+const StyledButton = styled(Button)`
+  position: absolute;
+  z-index: ${p => p.theme.zIndex.header};
+  height: 36px;
+  line-height: 1.5;
+  padding: 0px 5px;
+  top: -31px;
+  right: 30px;
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index c7ea8718d8..6c1499f186 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -1,4 +1,5 @@
 import PropTypes from 'prop-types';
+import SentryTypes from 'app/sentryTypes';
 import React from 'react';
 import createReactClass from 'create-react-class';
 //import GroupEventDataSection from "../eventDataSection";
@@ -15,6 +16,7 @@ const StacktraceContent = createReactClass({
     expandFirstFrame: PropTypes.bool,
     platform: PropTypes.string,
     newestFirst: PropTypes.bool,
+    group: SentryTypes.Group,
   },
 
   mixins: [OrganizationState],
@@ -95,6 +97,7 @@ const StacktraceContent = createReactClass({
             prevFrame={prevFrame}
             platform={this.props.platform}
             timesRepeated={nRepeats}
+            group={this.props.group}
           />
         );
       }
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index d996d28baf..18da0e7643 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1669,7 +1669,6 @@ div.traceback > ul {
 
   .expandable {
     height: 0;
-    overflow: hidden;
     position: relative;
 
     .icon-plus {
@@ -1686,6 +1685,7 @@ div.traceback > ul {
 
     .ws {
       display: none;
+      overflow: hidden;
     }
 
     &:hover {
@@ -1697,12 +1697,12 @@ div.traceback > ul {
 
   .expanded {
     .expandable {
-      overflow: none;
       height: auto;
     }
 
     .ws {
       display: inline;
+      overflow: none;
     }
   }
 
diff --git a/tests/js/spec/components/events/interfaces/openInButton.spec.jsx b/tests/js/spec/components/events/interfaces/openInButton.spec.jsx
new file mode 100644
index 0000000000..d0da4beb27
--- /dev/null
+++ b/tests/js/spec/components/events/interfaces/openInButton.spec.jsx
@@ -0,0 +1,115 @@
+import React from 'react';
+import {Client} from 'app/api';
+import {mount} from 'enzyme';
+import qs from 'query-string';
+
+import {OpenInButton} from 'app/components/events/interfaces/openInButton';
+
+describe('OpenInButton', function() {
+  const api = new Client();
+  const filename = '/sentry/app.py';
+  const lineNo = 123;
+  const org = TestStubs.Organization({features: ['sentry-apps']});
+  const group = TestStubs.Group();
+  const install = TestStubs.SentryAppInstallation();
+
+  beforeEach(() => {
+    Client.clearMockResponses();
+  });
+
+  describe('with stacktrace-link component', function() {
+    it('renders button', async function() {
+      Client.addMockResponse({
+        method: 'GET',
+        url: `/organizations/${org.slug}/sentry-app-components/?filter=stacktrace-link&projectId=${group
+          .project.id}`,
+        body: [
+          {
+            uuid: 'ed517da4-a324-44c0-aeea-1894cd9923fb',
+            type: 'stacktrace-link',
+            schema: {
+              uri: '/redirection',
+              url: `http://localhost:5000/redirection?installationId=${install.uuid}&projectSlug=${group
+                .project.slug}`,
+            },
+            sentryApp: {
+              uuid: 'b468fed3-afba-4917-80d6-bdac99c1ec05',
+              slug: 'foo',
+              name: 'Foo',
+            },
+          },
+        ],
+      });
+      const wrapper = mount(
+        <OpenInButton
+          api={api}
+          organization={org}
+          group={group}
+          filename={filename}
+          lineNo={lineNo}
+        />,
+        TestStubs.routerContext()
+      );
+      await tick();
+      wrapper.update();
+      expect(wrapper.state().components[0].schema.url).toEqual(
+        `http://localhost:5000/redirection?installationId=${install.uuid}&projectSlug=${group
+          .project.slug}`
+      );
+      const base = `http://localhost:5000/redirection?installationId=${install.uuid}&projectSlug=${group
+        .project.slug}`;
+      const queryParams = {
+        lineNo,
+        filename,
+      };
+      const query = qs.stringify(queryParams);
+      expect(wrapper.find('Button').prop('href')).toEqual(base + '&' + query);
+      expect(wrapper.find('Button').text()).toEqual('Debug In Foo');
+    });
+  });
+
+  describe('without stacktrace-link component', function() {
+    it('renders button', async function() {
+      Client.addMockResponse({
+        method: 'GET',
+        url: `/organizations/${org.slug}/sentry-app-components/?filter=stacktrace-link&projectId=${group
+          .project.id}`,
+        body: [],
+      });
+      const wrapper = mount(
+        <OpenInButton
+          api={api}
+          organization={org}
+          group={group}
+          filename={filename}
+          lineNo={lineNo}
+        />,
+        TestStubs.routerContext()
+      );
+      await tick();
+      wrapper.update();
+      expect(wrapper.state().components).toEqual([]);
+      expect(wrapper.find('Button').exists()).toEqual(false);
+    });
+  });
+
+  describe('without group prop passed', function() {
+    it('does not make api request', async function() {
+      const response = Client.addMockResponse({
+        method: 'GET',
+        url: `/organizations/${org.slug}/sentry-app-components/?filter=stacktrace-link&projectId=${group
+          .project.id}`,
+        body: [],
+      });
+      const wrapper = mount(
+        <OpenInButton api={api} organization={org} filename={filename} lineNo={lineNo} />,
+        TestStubs.routerContext()
+      );
+      await tick();
+      wrapper.update();
+      expect(wrapper.state().components).toEqual([]);
+      expect(wrapper.find('Button').exists()).toEqual(false);
+      expect(response).not.toHaveBeenCalled();
+    });
+  });
+});
diff --git a/tests/sentry/mediators/sentry_app_components/test_preparer.py b/tests/sentry/mediators/sentry_app_components/test_preparer.py
index cee56c6936..4097cb543d 100644
--- a/tests/sentry/mediators/sentry_app_components/test_preparer.py
+++ b/tests/sentry/mediators/sentry_app_components/test_preparer.py
@@ -87,3 +87,43 @@ class TestPreparerIssueLink(TestCase):
             project=self.project,
             uri='/sentry/baz',
         ) in run.mock_calls
+
+
+class TestPreparerStacktraceLink(TestCase):
+    def setUp(self):
+        super(TestPreparerStacktraceLink, self).setUp()
+
+        self.sentry_app = self.create_sentry_app(
+            schema={
+                'elements': [{
+                    'type': 'stacktrace-link',
+                    'uri': '/redirection',
+                }]
+            }
+        )
+
+        self.install = self.create_sentry_app_installation(
+            slug=self.sentry_app.slug,
+        )
+
+        self.component = self.sentry_app.components.first()
+        self.project = self.install.organization.project_set.first()
+
+        self.preparer = Preparer(
+            component=self.component,
+            install=self.install,
+            project=self.project,
+        )
+
+    def test_prepares_components_url(self):
+        self.component.schema = {
+            'uri': '/redirection'
+        }
+
+        self.preparer.call()
+
+        assert self.component.schema['url'] == \
+            u'https://example.com/redirection?installationId={}&projectSlug={}'.format(
+                self.install.uuid,
+                self.project.slug,
+        )
