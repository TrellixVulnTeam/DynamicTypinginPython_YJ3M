commit 04fc16c13e53c91cefadb8d35873b861c6f34168
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 25 13:20:22 2015 -0800

    Tests + fix for lack of request in inbound emails

diff --git a/src/sentry/tasks/email.py b/src/sentry/tasks/email.py
index 3e883b8231..1fa77a8e16 100644
--- a/src/sentry/tasks/email.py
+++ b/src/sentry/tasks/email.py
@@ -12,19 +12,20 @@ import logging
 
 from django.core.mail import get_connection
 
+from sentry.auth import access
 from sentry.tasks.base import instrumented_task
 
 logger = logging.getLogger(__name__)
 
 
 def _get_user_from_email(group, email):
-    from sentry.models import Project, User
-    # TODO(dcramer): we should encode the userid in emails so we can avoid this
+    from sentry.models import User
 
+    # TODO(dcramer): we should encode the userid in emails so we can avoid this
     for user in User.objects.filter(email__iexact=email):
         # Make sure that the user actually has access to this project
-        if group.project not in Project.objects.get_for_user(
-                team=group.team, user=user):
+        context = access.from_user(user=user, organization=group.organization)
+        if not context.has_team(group.project.team):
             logger.warning('User %r does not have access to group %r', user, group)
             continue
 
@@ -51,15 +52,16 @@ def process_inbound_email(mailfrom, group_id, payload):
         logger.warning('Inbound email from unknown address: %s', mailfrom)
         return
 
-    event = group.get_latest_event() or Event()
+    event = group.get_latest_event()
 
-    Event.objects.bind_nodes([event], 'data')
-    event.group = group
-    event.project = group.project
+    if event:
+        Event.objects.bind_nodes([event], 'data')
+        event.group = group
+        event.project = group.project
 
     form = NewNoteForm({'text': payload})
     if form.is_valid():
-        form.save(event, user)
+        form.save(group, user, event=event)
 
 
 @instrumented_task(
diff --git a/src/sentry/web/forms/__init__.py b/src/sentry/web/forms/__init__.py
index cb4626cfe4..218aa1ad33 100644
--- a/src/sentry/web/forms/__init__.py
+++ b/src/sentry/web/forms/__init__.py
@@ -88,9 +88,9 @@ class TestEmailForm(forms.Form):
 class NewNoteForm(forms.Form):
     text = forms.CharField(widget=forms.Textarea(attrs={'rows': '1', 'placeholder': 'Type a note and press enter...'}))
 
-    def save(self, event, user):
+    def save(self, group, user, event=None):
         activity = Activity.objects.create(
-            group=event.group, event=event, project=event.project,
+            group=group, event=event, project=group.project,
             type=Activity.NOTE, user=user,
             data=self.cleaned_data
         )
diff --git a/tests/sentry/tasks/test_email.py b/tests/sentry/tasks/test_email.py
new file mode 100644
index 0000000000..7615452588
--- /dev/null
+++ b/tests/sentry/tasks/test_email.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+from sentry.models import Activity
+from sentry.tasks.email import process_inbound_email
+from sentry.testutils import TestCase
+
+
+class ProcessInboundEmailTest(TestCase):
+    def test_task_persistent_name(self):
+        assert process_inbound_email.name == 'sentry.tasks.email.process_inbound_email'
+
+    def test_simple(self):
+        group = self.create_group()
+
+        process_inbound_email(
+            mailfrom=self.user.email,
+            group_id=group.id,
+            payload='hello world!',
+        )
+
+        activity = Activity.objects.get(
+            group=group,
+            type=Activity.NOTE,
+        )
+        assert activity.user == self.user
+        assert activity.data['text'] == 'hello world!'
+
+    def test_handle_unknown_address(self):
+        group = self.create_group()
+
+        process_inbound_email(
+            mailfrom='invalid@example.com',
+            group_id=group.id,
+            payload='hello world!',
+        )
+
+        assert not Activity.objects.filter(
+            group=group,
+            type=Activity.NOTE,
+        ).exists()
