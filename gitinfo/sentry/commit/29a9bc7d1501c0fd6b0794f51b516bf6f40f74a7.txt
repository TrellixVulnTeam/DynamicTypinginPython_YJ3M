commit 29a9bc7d1501c0fd6b0794f51b516bf6f40f74a7
Author: Radu Woinaroski <5281987+RaduW@users.noreply.github.com>
Date:   Wed Jul 24 14:11:39 2019 +0200

    feat(relay): Return full project config to internal Relays (#13992)
    
    The RelayConfig endpoint now returns the previous RelayConfig
    information for external Relays and extended information for
    internal Relays.

diff --git a/src/sentry/api/endpoints/relay_heartbeat.py b/src/sentry/api/endpoints/relay_heartbeat.py
deleted file mode 100644
index c3063033bd..0000000000
--- a/src/sentry/api/endpoints/relay_heartbeat.py
+++ /dev/null
@@ -1,35 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework.response import Response
-
-from datetime import timedelta
-from django.utils import timezone
-
-from sentry.api.base import Endpoint
-from sentry.relay import change_set, query
-from sentry.api.permissions import RelayPermission
-from sentry.api.authentication import RelayAuthentication
-
-
-class RelayHeartbeatEndpoint(Endpoint):
-    authentication_classes = (RelayAuthentication, )
-    permission_classes = (RelayPermission, )
-
-    def post(self, request):
-        now = timezone.now()
-        if now >= request.relay.last_seen + timedelta(minutes=1):
-            request.relay.update(last_seen=now)
-
-        changesets = request.relay_request_data.get('changesets')
-        if changesets:
-            change_set.execute_changesets(request.relay, changesets)
-
-        queries = request.relay_request_data.get('queries')
-        if queries:
-            query_response = query.execute_queries(request.relay, queries)
-        else:
-            query_response = {}
-
-        return Response({
-            'queryResults': query_response,
-        }, status=200)
diff --git a/src/sentry/api/endpoints/relay_projectconfigs.py b/src/sentry/api/endpoints/relay_projectconfigs.py
index 34e1fead5a..81cf6420d6 100644
--- a/src/sentry/api/endpoints/relay_projectconfigs.py
+++ b/src/sentry/api/endpoints/relay_projectconfigs.py
@@ -15,6 +15,15 @@ class RelayProjectConfigsEndpoint(Endpoint):
     permission_classes = (RelayPermission,)
 
     def post(self, request):
+
+        relay = request.relay
+        assert relay is not None  # should be provided during Authentication
+
+        full_config_requested = request.relay_request_data.get('fullConfig')
+
+        if full_config_requested and not relay.is_internal:
+            return Response("Relay unauthorized for full config information", 403)
+
         project_ids = request.relay_request_data.get('projects') or ()
         projects = {}
 
@@ -24,22 +33,26 @@ class RelayProjectConfigsEndpoint(Endpoint):
         # but only the project settings
         if project_ids:
             for project in Project.objects.filter(pk__in=project_ids):
-                projects[six.text_type(project.id)] = (
-                    project, config.get_project_options(project))
+                # for internal relays return the full, rich, configuration,
+                # for external relays return the minimal config
+                proj_config = config.get_project_config(project.id, relay.is_internal and full_config_requested)
+
+                projects[six.text_type(project.id)] = proj_config
+
                 orgs.add(project.organization_id)
 
         # In the second iteration we check if the project has access to
         # the org at all.
         if orgs:
             orgs = {o.id: o for o in Organization.objects.filter(pk__in=orgs)}
-            for (project, cfg) in list(projects.values()):
-                org = orgs.get(project.organization_id)
+            for cfg in list(projects.values()):
+                org = orgs.get(cfg.project.organization_id)
                 if org is None or not request.relay.has_org_access(org):
-                    projects.pop(six.text_type(project.id))
+                    projects.pop(six.text_type(cfg.project.id))
 
         # Fill in configs that we failed the access check for or don't
         # exist.
-        configs = {p_id: c[1] for p_id, c in six.iteritems(projects)}
+        configs = {p_id: cfg.to_camel_case_dict() for p_id, cfg in six.iteritems(projects)}
         for project_id in project_ids:
             configs.setdefault(six.text_type(project_id), None)
 
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 0e4037d676..77d8b15d7a 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -220,7 +220,6 @@ from .endpoints.project_user_stats import ProjectUserStatsEndpoint
 from .endpoints.project_users import ProjectUsersEndpoint
 from .endpoints.prompts_activity import PromptsActivityEndpoint
 from .endpoints.relay_details import RelayDetailsEndpoint
-from .endpoints.relay_heartbeat import RelayHeartbeatEndpoint
 from .endpoints.relay_index import RelayIndexEndpoint
 from .endpoints.relay_projectconfigs import RelayProjectConfigsEndpoint
 from .endpoints.relay_publickeys import RelayPublicKeysEndpoint
@@ -289,11 +288,6 @@ urlpatterns = patterns(
             RelayRegisterResponseEndpoint.as_view(),
             name='sentry-api-0-relay-register-response'
         ),
-        url(
-            r'^heartbeat/$',
-            RelayHeartbeatEndpoint.as_view(),
-            name='sentry-api-0-relay-heartbeat'
-        ),
         url(
             r'^projectconfigs/$',
             RelayProjectConfigsEndpoint.as_view(),
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 9ff9e5375d..2b34093c0e 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -266,14 +266,14 @@ class EventManager(object):
         content_encoding=None,
         is_renormalize=False,
         remove_other=None,
-        relay_config=None
+        project_config=None
     ):
         self._data = _decode_event(data, content_encoding=content_encoding)
         self.version = version
         self._project = project
-        # if not explicitly specified try to get the grouping from relay_config
-        if grouping_config is None and relay_config is not None:
-            config = relay_config.config
+        # if not explicitly specified try to get the grouping from project_config
+        if grouping_config is None and project_config is not None:
+            config = project_config.config
             grouping_config = config.get('grouping_config')
         # if we still don't have a grouping also try the project
         if grouping_config is None and project is not None:
@@ -286,7 +286,7 @@ class EventManager(object):
         self._is_renormalize = is_renormalize
         self._remove_other = remove_other
         self._normalized = False
-        self.relay_config = relay_config
+        self.project_config = project_config
 
     def process_csp_report(self):
         """Only called from the CSP report endpoint."""
@@ -384,27 +384,27 @@ class EventManager(object):
                 if interface.to_python(self._data[name]).should_filter(self._project):
                     return (True, FilterStatKeys.INVALID_CSP)
 
-        if self._client_ip and not is_valid_ip(self.relay_config, self._client_ip):
+        if self._client_ip and not is_valid_ip(self.project_config, self._client_ip):
             return (True, FilterStatKeys.IP_ADDRESS)
 
         release = self._data.get('release')
-        if release and not is_valid_release(self.relay_config, release):
+        if release and not is_valid_release(self.project_config, release):
             return (True, FilterStatKeys.RELEASE_VERSION)
 
         error_message = get_path(self._data, 'logentry', 'formatted') \
             or get_path(self._data, 'logentry', 'message') \
             or ''
-        if error_message and not is_valid_error_message(self.relay_config, error_message):
+        if error_message and not is_valid_error_message(self.project_config, error_message):
             return (True, FilterStatKeys.ERROR_MESSAGE)
 
         for exc in get_path(self._data, 'exception', 'values', filter=True, default=[]):
             message = u': '.join(
                 filter(None, map(exc.get, ['type', 'value']))
             )
-            if message and not is_valid_error_message(self.relay_config, message):
+            if message and not is_valid_error_message(self.project_config, message):
                 return (True, FilterStatKeys.ERROR_MESSAGE)
 
-        return should_filter_event(self.relay_config, self._data)
+        return should_filter_event(self.project_config, self._data)
 
     def get_data(self):
         return self._data
diff --git a/src/sentry/message_filters.py b/src/sentry/message_filters.py
index 6f1be5a779..87bd315316 100644
--- a/src/sentry/message_filters.py
+++ b/src/sentry/message_filters.py
@@ -18,17 +18,17 @@ from sentry.signals import inbound_filter_toggled
 EventFilteredRet = namedtuple('EventFilteredRet', 'should_filter reason')
 
 
-def should_filter_event(relay_config, data):
+def should_filter_event(project_config, data):
     """
     Checks if an event should be filtered
 
-    :param relay_config: relay config for the request (for the project really)
+    :param project_config: relay config for the request (for the project really)
     :param data: the event data
     :return: an EventFilteredRet explaining if the event should be filtered and, if it should the reason
         for filtering
     """
     for event_filter in get_all_filters():
-        if _is_filter_enabled(relay_config, event_filter) and event_filter(relay_config, data):
+        if _is_filter_enabled(project_config, event_filter) and event_filter(project_config, data):
             return EventFilteredRet(should_filter=True, reason=event_filter.spec.id)
 
     return EventFilteredRet(should_filter=False, reason=None)
@@ -38,7 +38,7 @@ def get_all_filters():
     """
     Returns a list of the existing event filters
 
-    An event filter is a function that receives a relay_config and an event data payload and returns a tuple
+    An event filter is a function that receives a project_config and an event data payload and returns a tuple
     (should_filter:bool, filter_reason: string | None) representing
 
     :return: list of registered event filters
@@ -107,7 +107,10 @@ def get_filter_state(filter_id, project):
     if flt is None:
         raise FilterNotRegistered(filter_id)
 
-    filter_state = ProjectOption.objects.get_value(project=project, key=u'filters:{}'.format(flt.spec.id))
+    filter_state = ProjectOption.objects.get_value(
+        project=project,
+        key=u'filters:{}'.format(flt.spec.id),
+    )
 
     if filter_state is None:
         raise ValueError("Could not find filter state for filter {0}."
@@ -128,11 +131,6 @@ class FilterNotRegistered(Exception):
     pass
 
 
-# ########################################################################################################
-# ########################################### Implementation #############################################
-# ########################################################################################################
-
-
 def _filter_from_filter_id(filter_id):
     """
     Returns the corresponding filter for a filter id or None if no filter with the given id found
@@ -163,21 +161,21 @@ class _FilterSpec(object):
             self.serializer_cls = serializer_cls
 
 
-def _get_filter_settings(relay_config, flt):
+def _get_filter_settings(project_config, flt):
     """
     Gets the filter options from the relay config or the default option if not specified in the relay config
 
-    :param relay_config: the relay config for the request
+    :param project_config: the relay config for the request
     :param flt: the filter
     :return: the options for the filter
     """
-    filter_settings = relay_config.config.get('filter_settings', {})
+    filter_settings = project_config.config.get('filter_settings', {})
     filter_key = flt.spec.id
     return filter_settings.get(filter_key, None)
 
 
-def _is_filter_enabled(relay_config, flt):
-    filter_options = _get_filter_settings(relay_config, flt)
+def _is_filter_enabled(project_config, flt):
+    filter_options = _get_filter_settings(project_config, flt)
 
     if filter_options is None:
         raise ValueError("unknown filter", flt.spec.id)
@@ -190,7 +188,7 @@ _LOCAL_IPS = frozenset(['127.0.0.1', '::1'])
 _LOCAL_DOMAINS = frozenset(['127.0.0.1', 'localhost'])
 
 
-def _localhost_filter(relay_config, data):
+def _localhost_filter(project_config, data):
     ip_address = get_path(data, 'user', 'ip_address') or ''
     url = get_path(data, 'request', 'url') or ''
     domain = urlparse(url).hostname
@@ -264,7 +262,7 @@ _EXTENSION_EXC_SOURCES = re.compile(
 )
 
 
-def _browser_extensions_filter(relay_config, data):
+def _browser_extensions_filter(project_config, data):
     if data.get('platform') != 'javascript':
         return False
 
@@ -308,7 +306,7 @@ MIN_VERSIONS = {
 }
 
 
-def _legacy_browsers_filter(relay_config, data):
+def _legacy_browsers_filter(project_config, data):
     def get_user_agent(data):
         try:
             for key, value in get_path(data, 'request', 'headers', filter=True) or ():
@@ -337,10 +335,10 @@ def _legacy_browsers_filter(relay_config, data):
     if browser['family'] == "IE Mobile":
         browser['family'] = "IE"
 
-    filter_settings = _get_filter_settings(relay_config, _legacy_browsers_filter)
+    filter_settings = _get_filter_settings(project_config, _legacy_browsers_filter)
 
     # handle old style config
-    if filter_settings is None or filter_settings.get('default_filter', False):
+    if filter_settings is None:
         return _filter_default(browser)
 
     enabled_sub_filters = filter_settings.get('options')
@@ -482,7 +480,7 @@ def _filter_ie_internal(browser, compare_version):
 
 # list all browser specific sub filters that should be called
 _legacy_browsers_sub_filters = {
-    'all': _filter_default,
+    'default': _filter_default,
     'opera_pre_15': _filter_opera_pre_15,
     'safari_pre_6': _filter_safari_pre_6,
     'android_pre_4': _filter_android_pre_4,
@@ -537,7 +535,7 @@ _CRAWLERS = re.compile(
 )
 
 
-def _web_crawlers_filter(relay_config, data):
+def _web_crawlers_filter(project_config, data):
     try:
         for key, value in get_path(data, 'request', 'headers', filter=True) or ():
             if key.lower() == 'user-agent':
diff --git a/src/sentry/models/relay.py b/src/sentry/models/relay.py
index 2599bd6497..b60b57d259 100644
--- a/src/sentry/models/relay.py
+++ b/src/sentry/models/relay.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import
 
+import six
 from django.db import models
 from django.utils import timezone
 
 from sentry.db.models import Model
-from sentry.relay import config
 from django.utils.functional import cached_property
 
 import semaphore
@@ -28,4 +28,9 @@ class Relay(Model):
         return semaphore.PublicKey.parse(self.public_key)
 
     def has_org_access(self, org):
-        return config.relay_has_org_access(self, org)
+        # Internal relays always have access
+        if self.is_internal:
+            return True
+        # Use the normalized form of the public key for the check
+        return six.text_type(self.public_key_object) \
+            in org.get_option('sentry:trusted-relays', [])
diff --git a/src/sentry/relay/changesets/__init__.py b/src/sentry/relay/changesets/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/src/sentry/relay/changesets/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/src/sentry/relay/changesets/base.py b/src/sentry/relay/changesets/base.py
deleted file mode 100644
index a2c9ee8d54..0000000000
--- a/src/sentry/relay/changesets/base.py
+++ /dev/null
@@ -1,17 +0,0 @@
-from __future__ import absolute_import
-
-
-class ChangesetError(Exception):
-    pass
-
-
-class BaseChangeset(object):
-
-    def __init__(self, relay):
-        self.relay = relay
-
-    def preprocess(self, query):
-        pass
-
-    def execute(self):
-        pass
diff --git a/src/sentry/relay/changesets/store_v7.py b/src/sentry/relay/changesets/store_v7.py
deleted file mode 100644
index d1188a2e9f..0000000000
--- a/src/sentry/relay/changesets/store_v7.py
+++ /dev/null
@@ -1,62 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import resolve, reverse
-from rest_framework.test import APIRequestFactory
-from rest_framework import serializers
-import six
-
-from sentry.models import Project
-from sentry.relay.changesets.base import BaseChangeset, ChangesetError
-
-
-class StoreV7Serializer(serializers.Serializer):
-    project_id = serializers.IntegerField(required=True)
-
-
-class StoreV7(BaseChangeset):
-
-    def preprocess(self, changeset):
-        serializer = StoreV7Serializer(data=changeset)
-        if not serializer.is_valid():
-            raise ChangesetError(str(serializer.errors).splitlines()[0])
-
-        data = changeset.get('data')
-        if not data:
-            raise ChangesetError('Missing data payload')
-
-        self.event = data.get('event')
-        if not self.event:
-            raise ChangesetError('Missing event payload')
-
-        self.public_key = data.get('public_key')
-        if not self.public_key:
-            raise ChangesetError('Missing public key')
-
-        result = serializer.validated_data
-
-        try:
-            Project.objects.filter(
-                id=result.get('project_id'),
-            ).get()
-        except Project.DoesNotExist:
-            raise ChangesetError('Project does not exist')
-
-        self.project_id = result.get('project_id')
-
-    def execute(self):
-        auth = {
-            'sentry_client': 'sentry-relay',
-            'sentry_version': '7',
-            'sentry_key': self.public_key,
-        }
-
-        # TODO(ja): Refactor StoreView and use internal APIs instead
-        factory = APIRequestFactory()
-
-        header = 'Sentry %s' % ', '.join('%s=%s' % (k, v) for k, v in six.iteritems(auth))
-        path = reverse('sentry-api-store', kwargs={'project_id': self.project_id})
-        request = factory.post(path, self.event, HTTP_X_SENTRY_AUTH=header)
-        request.__from_api_client__ = True
-
-        func, args, kwargs = resolve(path)
-        func(request, *args, **kwargs)
diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index fcb46b5016..a4caba5ba3 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -3,15 +3,278 @@ from __future__ import absolute_import
 import re
 import six
 import uuid
-import json
+import sentry.utils as utils
 
 from datetime import datetime
 from pytz import utc
 
-from sentry.models import ProjectKey, OrganizationOption
+from sentry.coreapi import APIError
+from sentry.grouping.api import get_grouping_config_dict_for_project
+from sentry.message_filters import get_all_filters
+
+from sentry.models.organization import Organization
+from sentry.models.organizationoption import OrganizationOption
+from sentry.models.project import Project
+from sentry.models.projectoption import ProjectOption
+from sentry.utils.data_filters import FilterTypes, FilterStatKeys
+from sentry.utils.http import get_origins
+from sentry.utils.outcomes import track_outcome, Outcome
+from sentry.models.projectkey import ProjectKey
 from sentry.utils.sdk import configure_scope
 
 
+def get_project_key_config(project_key):
+    """Returns a dict containing the information for a specific project key"""
+    return {
+        'dsn': project_key.dsn_public,
+    }
+
+
+def get_project_config(project_id, full_config=True):
+    """
+    Constructs the ProjectConfig information.
+
+    :param project_id: the project id as int or string
+    :param full_config: True if only the full config is required, False
+        if only the restricted (for external relays) is required
+        (default True, i.e. full configuration)
+    :return: a ProjectConfig object for the given project
+    """
+    project = _get_project_from_id(six.text_type(project_id))
+
+    if project is None:
+        raise APIError("Invalid project id:{}".format(project_id))
+
+    with configure_scope() as scope:
+        scope.set_tag("project", project.id)
+
+    project_keys = ProjectKey.objects.filter(
+        project=project,
+    ).all()
+
+    public_keys = {}
+    for project_key in list(project_keys):
+        public_keys[project_key.public_key] = project_key.status == 0
+
+    now = datetime.utcnow().replace(tzinfo=utc)
+
+    org_options = OrganizationOption.objects.get_all_values(
+        project.organization_id)
+
+    cfg = {
+        'disabled': project.status > 0,
+        'slug': project.slug,
+        'lastFetch': now,
+        'lastChange': project.get_option('sentry:relay-rev-lastchange', now),
+        'rev': project.get_option('sentry:relay-rev', uuid.uuid4().hex),
+        'publicKeys': public_keys,
+        'config': {
+            'allowedDomains': project.get_option('sentry:origins', ['*']),
+            'trustedRelays': org_options.get('sentry:trusted-relays', []),
+            'piiConfig': _get_pii_config(project, org_options),
+        },
+        'project_id': project.id,
+    }
+
+    if not full_config:
+        # This is all we need for external Relay processors
+        return ProjectConfig(project, **cfg)
+
+    # The organization id is only required for reporting when processing events
+    # internally. Do not expose it to external Relays.
+    cfg['organization_id'] = project.organization_id
+
+    # Explicitly bind Organization so we don't implicitly query it later
+    # this just allows us to comfortably assure that `project.organization` is safe.
+    # This also allows us to pull the object from cache, instead of being
+    # implicitly fetched from database.
+    project.organization = Organization.objects.get_from_cache(
+        id=project.organization_id)
+
+    if project.organization is not None:
+        org_options = OrganizationOption.objects.get_all_values(
+            project.organization_id)
+    else:
+        org_options = {}
+
+    project_cfg = cfg['config']
+
+    invalid_releases = project.get_option(u'sentry:{}'.format(FilterTypes.RELEASES))
+    if invalid_releases is not None:
+        project_cfg[FilterTypes.RELEASES] = invalid_releases
+
+    blacklisted_ips = project.get_option('sentry:blacklisted_ips')
+    if blacklisted_ips is not None:
+        project_cfg['blacklisted_ips'] = blacklisted_ips
+
+    error_messages = project.get_option(u'sentry:{}'.format(FilterTypes.ERROR_MESSAGES))
+    if error_messages is not None:
+        project_cfg[FilterTypes.ERROR_MESSAGES] = error_messages
+
+    # get the filter settings for this project
+    filter_settings = {}
+    project_cfg['filter_settings'] = filter_settings
+
+    for flt in get_all_filters():
+        filter_id = flt.spec.id
+        settings = _load_filter_settings(flt, project)
+        filter_settings[filter_id] = settings
+
+    scrub_ip_address = (org_options.get('sentry:require_scrub_ip_address', False) or
+                        project.get_option('sentry:scrub_ip_address', False))
+
+    project_cfg['scrub_ip_addresses'] = scrub_ip_address
+
+    scrub_data = (org_options.get('sentry:require_scrub_data', False) or
+                  project.get_option('sentry:scrub_data', True))
+
+    project_cfg['scrub_data'] = scrub_data
+    project_cfg['grouping_config'] = get_grouping_config_dict_for_project(project)
+    project_cfg['allowed_domains'] = list(get_origins(project))
+
+    if scrub_data:
+        # We filter data immediately before it ever gets into the queue
+        sensitive_fields_key = 'sentry:sensitive_fields'
+        sensitive_fields = (
+            org_options.get(sensitive_fields_key, []) +
+            project.get_option(sensitive_fields_key, [])
+        )
+        project_cfg['sensitive_fields'] = sensitive_fields
+
+        exclude_fields_key = 'sentry:safe_fields'
+        exclude_fields = (
+            org_options.get(exclude_fields_key, []) +
+            project.get_option(exclude_fields_key, [])
+        )
+        project_cfg['exclude_fields'] = exclude_fields
+
+        scrub_defaults = (org_options.get('sentry:require_scrub_defaults', False) or
+                          project.get_option('sentry:scrub_defaults', True))
+        project_cfg['scrub_defaults'] = scrub_defaults
+
+    return ProjectConfig(project, **cfg)
+
+
+class _ConfigBase(object):
+    """
+    Base class for configuration objects
+
+    Offers a readonly configuration class that can be serialized to json and viewed as a simple dictionary
+
+    >>> x = _ConfigBase( a= 1, b="The b", c= _ConfigBase(x=33, y = _ConfigBase(m=3.14159 , w=[1,2,3], z={'t':1})))
+    >>> x.a
+    1
+    >>> x.b
+    'The b'
+    >>> x.something is None # accessing non-existing elements
+    True
+    >>> x.c.y.w
+    [1, 2, 3]
+
+    """
+
+    def __init__(self, **kwargs):
+        data = {}
+        object.__setattr__(self, "data", data)
+        for (key, val) in six.iteritems(kwargs):
+            if val is not None:
+                data[key] = val
+
+    def __setattr__(self, key, value):
+        raise Exception("Trying to change read only ProjectConfig object")
+
+    def __getattr__(self, name):
+        data = self.__get_data()
+        return data.get(name)
+
+    def to_dict(self):
+        """
+        Converts the config object into a dictionary
+
+        :param to_camel_case: should the dictionary keys be converted to camelCase from snake_case
+        :return: A dictionary containing the object properties, with config properties also converted in dictionaries
+
+        >>> x = _ConfigBase( a= 1, b="The b", c= _ConfigBase(x=33, y = _ConfigBase(m=3.14159 , w=[1,2,3], z={'t':1})))
+        >>> x.to_dict() == {'a': 1, 'c': {'y': {'m': 3.14159, 'w': [1, 2, 3], 'z':{'t': 1}}, 'x': 33}, 'b': 'The b'}
+        True
+        """
+        data = self.__get_data()
+        return {key: value.to_dict() if isinstance(value, _ConfigBase) else value for (key, value) in
+                six.iteritems(data)}
+
+    def to_camel_case_dict(self):
+        return _to_camel_case_dict(self.to_dict())
+
+    def to_json_string(self):
+        """
+        >>> x = _ConfigBase( a = _ConfigBase(b = _ConfigBase( w=[1,2,3])))
+        >>> x.to_json_string()
+        '{"a": {"b": {"w": [1, 2, 3]}}}'
+
+        :return:
+        """
+        data = self.to_dict()
+        data = _to_camel_case_dict(data)
+        return utils.json.dumps(data)
+
+    def get_at_path(self, *args):
+        """
+        Gets an element at the specified path returning None if the element or the path doesn't exists
+
+        :param args: the path to follow ( a list of strings)
+        :return: the element if present at specified path or None otherwise)
+
+        >>> x = _ConfigBase( a= 1, b="The b", c= _ConfigBase(x=33, y = _ConfigBase(m=3.14159 , w=[1,2,3], z={'t':1})))
+        >>> x.get_at_path('c','y','m')
+        3.14159
+        >>> x.get_at_path('bb') is None # property not set
+        True
+        >>> x.get_at_path('a', 'something') is None # trying to go past existing Config paths
+        True
+        >>> x.get_at_path('c','y','z')
+        {'t': 1}
+        >>> x.get_at_path('c','y','z','t') is None # only navigates in ConfigBase does not try to go into normal dicts.
+        True
+
+        """
+        if len(args) == 0:
+            return self
+
+        data = self.__get_data()
+        val = data.get(args[0])
+
+        if len(args) == 1:
+            return val
+
+        if isinstance(val, _ConfigBase):
+            return val.get_at_path(*args[1:])
+
+        return None  # property not set or path goes beyond the Config defined valid path
+
+    def __get_data(self):
+        return object.__getattribute__(self, 'data')
+
+    def __str__(self):
+        try:
+            return utils.json.dumps(self.to_dict(), sort_keys=True)
+        except Exception as e:
+            return "Content Error:{}".format(e)
+
+    def __repr__(self):
+        return "({0}){1}".format(self.__class__.__name__, self)
+
+
+class ProjectConfig(_ConfigBase):
+    """
+    Represents the restricted configuration available to an untrusted
+    """
+
+    def __init__(self, project, **kwargs):
+        object.__setattr__(self, "project", project)
+
+        super(ProjectConfig, self).__init__(**kwargs)
+
+
 def _generate_pii_config(project, org_options):
     scrub_ip_address = (org_options.get('sentry:require_scrub_ip_address', False) or
                         project.get_option('sentry:scrub_ip_address', False))
@@ -59,62 +322,144 @@ def _generate_pii_config(project, org_options):
     }
 
 
-def get_pii_config(project, org_options):
+def _get_pii_config(project, org_options):
     value = project.get_option('sentry:relay_pii_config')
     if value is not None:
         try:
-            return json.loads(value)
+            return utils.json.loads(value)
         except (TypeError, ValueError):
             return None
     return _generate_pii_config(project, org_options)
 
 
-def get_project_options(project):
-    """Returns a dict containing the config for a project for the sentry relay"""
+def _to_camel_case_name(name):
+    """
+    Converts a string from snake_case to camelCase
 
-    with configure_scope() as scope:
-        scope.set_tag("project", project.id)
+    :param name: the string to convert
+    :return: the name converted to camelCase
 
-    project_keys = ProjectKey.objects.filter(
-        project=project,
-    ).all()
+    >>> _to_camel_case_name(22)
+    22
+    >>> _to_camel_case_name("hello_world")
+    'helloWorld'
+    >>> _to_camel_case_name("_hello_world")
+    'helloWorld'
+    >>> _to_camel_case_name("__hello___world___")
+    'helloWorld'
+    >>> _to_camel_case_name("hello")
+    'hello'
+    >>> _to_camel_case_name("Hello_world")
+    'helloWorld'
+    >>> _to_camel_case_name("one_two_three_four")
+    'oneTwoThreeFour'
+    >>> _to_camel_case_name("oneTwoThreeFour")
+    'oneTwoThreeFour'
+    """
 
-    public_keys = {}
-    for project_key in list(project_keys):
-        public_keys[project_key.public_key] = project_key.status == 0
+    def first_lower(s):
+        return s[:1].lower() + s[1:]
 
-    now = datetime.utcnow().replace(tzinfo=utc)
+    def first_upper(s):
+        return s[:1].upper() + s[1:]
 
-    org_options = OrganizationOption.objects.get_all_values(
-        project.organization_id)
+    if not isinstance(name, six.string_types):
+        return name
+    else:
+        name = name.strip("_")
+        pieces = name.split('_')
+        return first_lower(pieces[0]) + ''.join(first_upper(x) for x in pieces[1:])
 
-    rv = {
-        'disabled': project.status > 0,
-        'slug': project.slug,
-        'lastFetch': now,
-        'lastChange': project.get_option('sentry:relay-rev-lastchange', now),
-        'rev': project.get_option('sentry:relay-rev', uuid.uuid4().hex),
-        'publicKeys': public_keys,
-        'config': {
-            'allowedDomains': project.get_option('sentry:origins', ['*']),
-            'trustedRelays': org_options.get('sentry:trusted-relays', []),
-            'piiConfig': get_pii_config(project, org_options),
-        },
-    }
-    return rv
 
+def _to_camel_case_dict(obj):
+    """
+    Converts recursively the keys of a dictionary from snake_case to camelCase
 
-def relay_has_org_access(relay, org):
-    # Internal relays always have access
-    if relay.is_internal:
-        return True
-    # Use the normalized form of the public key for the check
-    return six.text_type(relay.public_key_object) \
-        in org.get_option('sentry:trusted-relays', [])
+    This is intended for converting dictionaries that use the python convention to
+    dictionaries that use the javascript/JSON convention
 
+    NOTE: this function will, by default,  mutate the dictionary in place.
+    If you do not want to change the input use clone=True
 
-def get_project_key_config(project_key):
-    """Returns a dict containing the information for a specific project key"""
-    return {
-        'dsn': project_key.dsn_public,
+    :param obj: the dictionary
+
+    :return: a dictionary with the string keys converted
+
+    >>> _to_camel_case_dict({'_abc': {'_one_two_three': 1}})
+    {'abc': {'oneTwoThree': 1}}
+    >>> val = {'_abc': {'_one_two_three': 1}}
+    >>> _to_camel_case_dict({'_abc': {'_one_two_three': 1}})
+    {'abc': {'oneTwoThree': 1}}
+
+    # check that we didn't affect the original
+    >>> val
+    {'_abc': {'_one_two_three': 1}}
+
+    """
+
+    if not isinstance(obj, dict):
+        raise ValueError("Bad parameter passed expected dictionary got {}".format(repr(type(obj))))
+
+    return {_to_camel_case_name(key): _to_camel_case_dict(value) if isinstance(value, dict) else value
+            for (key, value) in six.iteritems(obj)}
+
+
+def _get_project_from_id(project_id):
+    if not project_id:
+        return None
+    if not project_id.isdigit():
+        track_outcome(0, 0, None, Outcome.INVALID, "project_id")
+        raise APIError('Invalid project_id: %r' % project_id)
+    try:
+        return Project.objects.get_from_cache(id=project_id)
+    except Project.DoesNotExist:
+        track_outcome(0, 0, None, Outcome.INVALID, "project_id")
+        raise APIError('Invalid project_id: %r' % project_id)
+
+
+def _load_filter_settings(flt, project):
+    """
+    Returns the filter settings for the specified project
+
+    :param flt: the filter function
+    :param project: the project for which we want to retrieve the options
+    :return: a dictionary with the filter options.
+        If the project does not explicitly specify the filter options then the
+        default options for the filter will be returned
+    """
+    filter_id = flt.spec.id
+    filter_key = u'filters:{}'.format(filter_id)
+    setting = ProjectOption.objects.get_value(project=project, key=filter_key, default=None)
+
+    return _filter_option_to_config_setting(flt, setting)
+
+
+def _filter_option_to_config_setting(flt, setting):
+    """
+    Encapsulates the logic for associating a filter database option with the filter setting from project_config
+
+    :param flt: the filter
+    :param setting: the option deserialized from the database
+    :return: the option as viewed from project_config
+    """
+    if setting is None:
+        raise ValueError("Could not find filter state for filter {0}."
+                         " You need to register default filter state in projectoptions.defaults.".format(flt.spec.id))
+
+    is_enabled = setting != '0'
+
+    ret_val = {
+        'is_enabled': is_enabled
     }
+
+    # special case for legacy browser.
+    # If the number of special cases increases we'll have to factor this functionality somewhere
+    if flt.spec.id == FilterStatKeys.LEGACY_BROWSER:
+        if is_enabled:
+            if setting == '1':
+                ret_val['options'] = ['default']
+            else:
+                # new style filter, per legacy browser type handling
+                # ret_val['options'] = setting.split(' ')
+                ret_val['options'] = list(setting)
+    return ret_val
diff --git a/src/sentry/relay/queries/__init__.py b/src/sentry/relay/queries/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/src/sentry/relay/queries/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/src/sentry/relay/queries/base.py b/src/sentry/relay/queries/base.py
deleted file mode 100644
index 9b481792eb..0000000000
--- a/src/sentry/relay/queries/base.py
+++ /dev/null
@@ -1,17 +0,0 @@
-from __future__ import absolute_import
-
-
-class InvalidQuery(Exception):
-    pass
-
-
-class BaseQuery(object):
-
-    def __init__(self, relay):
-        self.relay = relay
-
-    def preprocess(self, query):
-        pass
-
-    def execute(self):
-        pass
diff --git a/src/sentry/relay/queries/get_project_config.py b/src/sentry/relay/queries/get_project_config.py
deleted file mode 100644
index 16313c2637..0000000000
--- a/src/sentry/relay/queries/get_project_config.py
+++ /dev/null
@@ -1,35 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework import serializers
-
-from sentry.models import Project
-from sentry.relay import config
-from sentry.relay.queries.base import BaseQuery, InvalidQuery
-
-
-class GetProjectConfigSerializer(serializers.Serializer):
-    project_id = serializers.IntegerField(required=True)
-
-
-class GetProjectConfig(BaseQuery):
-
-    def preprocess(self, query):
-        serializer = GetProjectConfigSerializer(data=query)
-        if not serializer.is_valid():
-            raise InvalidQuery(str(serializer.errors).splitlines()[0])
-
-        result = serializer.validated_data
-
-        try:
-            project = Project.objects.filter(
-                id=result.get('project_id'),
-            ).get()
-        except Project.DoesNotExist:
-            raise InvalidQuery('Project does not exist')
-
-        self.project = project
-
-    def execute(self):
-        if not self.relay.has_org_access(self.project.organization):
-            return None
-        return config.get_project_options(self.project)
diff --git a/src/sentry/utils/data_filters.py b/src/sentry/utils/data_filters.py
index 2f7934f691..d9c0cbdd4e 100644
--- a/src/sentry/utils/data_filters.py
+++ b/src/sentry/utils/data_filters.py
@@ -41,12 +41,12 @@ class FilterTypes(object):
     RELEASES = 'releases'
 
 
-def is_valid_ip(relay_config, ip_address):
+def is_valid_ip(project_config, ip_address):
     """
     Verify that an IP address is not being blacklisted
     for the given project.
     """
-    blacklist = relay_config.config.get('blacklisted_ips')
+    blacklist = project_config.config.get('blacklisted_ips')
     if not blacklist:
         return True
 
@@ -70,12 +70,12 @@ def is_valid_ip(relay_config, ip_address):
     return True
 
 
-def is_valid_release(relay_config, release):
+def is_valid_release(project_config, release):
     """
     Verify that a release is not being filtered
     for the given project.
     """
-    invalid_versions = relay_config.config.get(FilterTypes.RELEASES)
+    invalid_versions = project_config.config.get(FilterTypes.RELEASES)
     if not invalid_versions:
         return True
 
@@ -88,12 +88,12 @@ def is_valid_release(relay_config, release):
     return True
 
 
-def is_valid_error_message(relay_config, message):
+def is_valid_error_message(project_config, message):
     """
     Verify that an error message is not being filtered
     for the given project.
     """
-    filtered_errors = relay_config.config.get(FilterTypes.ERROR_MESSAGES)
+    filtered_errors = project_config.config.get(FilterTypes.ERROR_MESSAGES)
     if not filtered_errors:
         return True
 
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 0aba578a9f..5296a03b73 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -28,7 +28,7 @@ from functools import wraps
 from querystring_parser import parser
 from symbolic import ProcessMinidumpError, Unreal4Error
 
-from sentry import features, quotas
+from sentry import features, options, quotas
 from sentry.attachments import CachedAttachment
 from sentry.constants import ObjectStatus
 from sentry.coreapi import (
@@ -66,8 +66,8 @@ from sentry.utils.pubsub import QueuedPublisherService, KafkaPublisher
 from sentry.utils.safe import safe_execute
 from sentry.utils.sdk import configure_scope
 from sentry.web.helpers import render_to_response
-from sentry.web.relay_config import get_full_relay_config
 from sentry.web.client_config import get_client_config
+from sentry.relay.config import get_project_config
 
 logger = logging.getLogger('sentry')
 minidumps_logger = logging.getLogger('sentry.minidumps')
@@ -179,7 +179,7 @@ def _get_project_id_from_request(project_id, request, auth_helper_cls, helper):
         return helper.project_id_from_auth(auth)
 
 
-def process_event(event_manager, project, key, remote_addr, helper, attachments, relay_config):
+def process_event(event_manager, project, key, remote_addr, helper, attachments, project_config):
     event_received.send_robust(ip=remote_addr, project=project, sender=process_event)
 
     start_time = time()
@@ -192,8 +192,8 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
 
     if should_filter:
         track_outcome(
-            relay_config.organization_id,
-            relay_config.project_id,
+            project_config.organization_id,
+            project_config.project_id,
             key.id,
             Outcome.FILTERED,
             filter_reason,
@@ -224,8 +224,8 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
 
         reason = rate_limit.reason_code if rate_limit else None
         track_outcome(
-            relay_config.organization_id,
-            relay_config.project_id,
+            project_config.organization_id,
+            project_config.project_id,
             key.id,
             Outcome.RATE_LIMITED,
             reason,
@@ -249,12 +249,12 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
 
     # TODO(dcramer): ideally we'd only validate this if the event_id was
     # supplied by the user
-    cache_key = 'ev:%s:%s' % (relay_config.project_id, event_id,)
+    cache_key = 'ev:%s:%s' % (project_config.project_id, event_id,)
 
     if cache.get(cache_key) is not None:
         track_outcome(
-            relay_config.organization_id,
-            relay_config.project_id,
+            project_config.organization_id,
+            project_config.project_id,
             key.id,
             Outcome.INVALID,
             'duplicate',
@@ -263,7 +263,7 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
         raise APIForbidden(
             'An event with the same ID already exists (%s)' % (event_id,))
 
-    config = relay_config.config
+    config = project_config.config
     scrub_ip_address = config.get('scrub_ip_addresses')
 
     scrub_data = config.get('scrub_data')
@@ -323,13 +323,13 @@ class APIView(BaseView):
                 raise APIError('Invalid project_id: %r' % project_id)
             return project
 
-    def _parse_header(self, request, relay_config):
+    def _parse_header(self, request, project_config):
         auth = self.auth_helper_cls.auth_from_request(request)
 
         if auth.version not in PROTOCOL_VERSIONS:
             track_outcome(
-                relay_config.organization_id,
-                relay_config.project_id,
+                project_config.organization_id,
+                project_config.project_id,
                 None,
                 Outcome.INVALID,
                 "auth_version")
@@ -340,8 +340,8 @@ class APIView(BaseView):
 
         if not auth.client:
             track_outcome(
-                relay_config.organization_id,
-                relay_config.project_id,
+                project_config.organization_id,
+                project_config.project_id,
                 None,
                 Outcome.INVALID,
                 "auth_client")
@@ -349,7 +349,7 @@ class APIView(BaseView):
 
         return auth
 
-    def _publish_to_kafka(self, request, relay_config):
+    def _publish_to_kafka(self, request, project_config):
         """
         Sends raw event data to Kafka for later offline processing.
         """
@@ -357,14 +357,12 @@ class APIView(BaseView):
             # This may fail when we e.g. send a multipart form. We ignore those errors for now.
             data = request.body
 
-            config = relay_config.config
-
-            max_event_size = config.get('kafka_max_event_size')
+            max_event_size = options.get('kafka-publisher.raw-event-sample-rate')
             if not data or max_event_size is None or len(data) > max_event_size:
                 return
 
             # Sampling
-            raw_event_sample_rate = config.get('kafka_raw_event_sample_rate')
+            raw_event_sample_rate = options.get('kafka-publisher.max-event-size')
             if raw_event_sample_rate is None or random.random() >= raw_event_sample_rate:
                 return
 
@@ -402,16 +400,17 @@ class APIView(BaseView):
             project_id = _get_project_id_from_request(
                 project_id, request, self.auth_helper_cls, helper)
 
-            relay_config = get_full_relay_config(project_id)
+            project_config = get_project_config(project_id)
 
-            helper.context.bind_project(relay_config.project)
+            helper.context.bind_project(project_config.project)
 
             if kafka_publisher is not None:
-                self._publish_to_kafka(request, relay_config)
+                self._publish_to_kafka(request, project_config)
 
             origin = self.auth_helper_cls.origin_from_request(request)
 
-            response = self._dispatch(request, helper, relay_config, origin=origin, *args, **kwargs)
+            response = self._dispatch(request, helper, project_config,
+                                      origin=origin, *args, **kwargs)
         except APIError as e:
             context = {
                 'error': force_bytes(e.msg, errors='replace'),
@@ -466,36 +465,36 @@ class APIView(BaseView):
 
         return response
 
-    def _dispatch(self, request, helper, relay_config, origin=None, *args, **kwargs):
+    def _dispatch(self, request, helper, project_config, origin=None, *args, **kwargs):
         request.user = AnonymousUser()
 
-        project = relay_config.project
-        config = relay_config.config
+        project = project_config.project
+        config = project_config.config
         allowed = config.get('allowed_domains')
 
         if origin is not None:
             if not is_valid_origin(origin, allowed=allowed):
                 track_outcome(
-                    relay_config.organization_id,
-                    relay_config.project_id,
+                    project_config.organization_id,
+                    project_config.project_id,
                     None,
                     Outcome.INVALID,
                     FilterStatKeys.CORS)
                 raise APIForbidden('Invalid origin: %s' % (origin,))
 
-        auth = self._parse_header(request, relay_config)
+        auth = self._parse_header(request, project_config)
 
         key = helper.project_key_from_auth(auth)
 
         # Legacy API was /api/store/ and the project ID was only available elsewhere
-        if six.text_type(key.project_id) != six.text_type(relay_config.project_id):
+        if six.text_type(key.project_id) != six.text_type(project_config.project_id):
             raise APIError('Two different projects were specified')
 
         helper.context.bind_auth(auth)
 
         response = super(APIView, self).dispatch(
             request=request, project=project, auth=auth, helper=helper, key=key,
-            relay_config=relay_config, **kwargs
+            project_config=project_config, **kwargs
         )
         return response
 
@@ -579,13 +578,13 @@ class StoreView(APIView):
         """Mutate the given EventManager. Hook for subtypes of StoreView (CSP)"""
         pass
 
-    def process(self, request, project, key, auth, helper,
-                data, relay_config, attachments=None, **kwargs):
+    def process(self, request, project, key, auth, helper, data,
+                project_config, attachments=None, **kwargs):
         disable_transaction_events()
         metrics.incr('events.total', skip_internal=False)
 
-        project_id = relay_config.project_id
-        organization_id = relay_config.organization_id
+        project_id = project_config.project_id
+        organization_id = project_config.organization_id
 
         if not data:
             track_outcome(organization_id, project_id, key.id, Outcome.INVALID, "no_data")
@@ -602,7 +601,7 @@ class StoreView(APIView):
             user_agent=helper.context.agent,
             version=auth.version,
             content_encoding=request.META.get('HTTP_CONTENT_ENCODING', ''),
-            relay_config=relay_config,
+            project_config=project_config,
         )
         del data
 
@@ -632,17 +631,17 @@ class StoreView(APIView):
         )
 
         return process_event(event_manager, project,
-                             key, remote_addr, helper, attachments, relay_config)
+                             key, remote_addr, helper, attachments, project_config)
 
 
 class EventAttachmentStoreView(StoreView):
 
-    def post(self, request, project, event_id, relay_config, **kwargs):
+    def post(self, request, project, event_id, project_config, **kwargs):
         if not features.has('organizations:event-attachments',
                             project.organization, actor=request.user):
             raise APIForbidden("Event attachments are not enabled for this organization.")
 
-        project_id = relay_config.project_id
+        project_id = project_config.project_id
 
         if len(request.FILES) == 0:
             return HttpResponse(status=400)
@@ -689,7 +688,7 @@ class MinidumpView(StoreView):
     dump_types = ('application/octet-stream', 'application/x-dmp')
     content_types = ('multipart/form-data',) + dump_types
 
-    def _dispatch(self, request, helper, relay_config, origin=None, config_flags=None, *args,
+    def _dispatch(self, request, helper, project_config, origin=None, config_flags=None, *args,
                   **kwargs):
 
         # TODO(ja): Refactor shared code with CspReportView. Especially, look at
@@ -712,8 +711,8 @@ class MinidumpView(StoreView):
 
         request.user = AnonymousUser()
 
-        project_id = relay_config.project_id
-        project = relay_config.project
+        project_id = project_config.project_id
+        project = project_config.project
 
         # This is yanking the auth from the querystring since it's not
         # in the POST body. This means we expect a `sentry_key` and
@@ -723,7 +722,7 @@ class MinidumpView(StoreView):
         key = helper.project_key_from_auth(auth)
         if key.project_id != project_id:
             track_outcome(
-                relay_config.organization_id,
+                project_config.organization_id,
                 project_id,
                 None,
                 Outcome.INVALID,
@@ -733,10 +732,10 @@ class MinidumpView(StoreView):
         helper.context.bind_auth(auth)
 
         return super(APIView, self).dispatch(
-            request=request, project=project, auth=auth, helper=helper, key=key, relay_config=relay_config, **kwargs
+            request=request, project=project, auth=auth, helper=helper, key=key, project_config=project_config, **kwargs
         )
 
-    def post(self, request, project, relay_config, **kwargs):
+    def post(self, request, project, project_config, **kwargs):
         # Minidump request payloads do not have the same structure as usual
         # events from other SDKs. The minidump can either be transmitted as
         # request body, or as `upload_file_minidump` in a multipart formdata
@@ -775,8 +774,8 @@ class MinidumpView(StoreView):
 
         if not minidump:
             track_outcome(
-                relay_config.organization_id,
-                relay_config.project_id,
+                project_config.organization_id,
+                project_config.project_id,
                 None,
                 Outcome.INVALID,
                 "missing_minidump_upload")
@@ -814,8 +813,8 @@ class MinidumpView(StoreView):
                 minidump_name = minidump.name
             except KeyError:
                 track_outcome(
-                    relay_config.organization_id,
-                    relay_config.project_id,
+                    project_config.organization_id,
+                    project_config.project_id,
                     None,
                     Outcome.INVALID,
                     "missing_minidump_upload")
@@ -824,8 +823,8 @@ class MinidumpView(StoreView):
         minidump.seek(0)
         if minidump.read(4) != 'MDMP':
             track_outcome(
-                relay_config.organization_id,
-                relay_config.project_id,
+                project_config.organization_id,
+                project_config.project_id,
                 None,
                 Outcome.INVALID,
                 "invalid_minidump")
@@ -884,7 +883,7 @@ class MinidumpView(StoreView):
             attachments=attachments,
             data=data,
             project=project,
-            relay_config=relay_config,
+            project_config=project_config,
             **kwargs)
 
         # Return the formatted UUID of the generated event. This is
@@ -900,7 +899,7 @@ class MinidumpView(StoreView):
 class UnrealView(StoreView):
     content_types = ('application/octet-stream',)
 
-    def _dispatch(self, request, helper, relay_config, sentry_key, origin=None,
+    def _dispatch(self, request, helper, project_config, sentry_key, origin=None,
                   config_flags=None, *args, **kwargs):
         if request.method != 'POST':
             track_outcome(0, 0, None, Outcome.INVALID, "disallowed_method")
@@ -913,8 +912,8 @@ class UnrealView(StoreView):
 
         request.user = AnonymousUser()
 
-        project = relay_config.project
-        project_id = relay_config.project_id
+        project = project_config.project
+        project_id = project_config.project_id
 
         auth = Auth(public_key=sentry_key, is_public=False)
         auth.client = 'sentry.unreal_engine'
@@ -922,7 +921,7 @@ class UnrealView(StoreView):
         key = helper.project_key_from_auth(auth)
         if key.project_id != project_id:
             track_outcome(
-                relay_config.organization_id,
+                project_config.organization_id,
                 project_id,
                 None,
                 Outcome.INVALID,
@@ -931,10 +930,10 @@ class UnrealView(StoreView):
 
         helper.context.bind_auth(auth)
         return super(APIView, self).dispatch(
-            request=request, project=project, auth=auth, helper=helper, key=key, relay_config=relay_config, **kwargs
+            request=request, project=project, auth=auth, helper=helper, key=key, project_config=project_config, **kwargs
         )
 
-    def post(self, request, project, relay_config, **kwargs):
+    def post(self, request, project, project_config, **kwargs):
         attachments_enabled = features.has('organizations:event-attachments',
                                            project.organization, actor=request.user)
 
@@ -953,8 +952,8 @@ class UnrealView(StoreView):
         except (ProcessMinidumpError, Unreal4Error) as e:
             minidumps_logger.exception(e)
             track_outcome(
-                relay_config.organization_id,
-                relay_config.project_id,
+                project_config.organization_id,
+                project_config.project_id,
                 None,
                 Outcome.INVALID,
                 "process_minidump_unreal")
@@ -1008,7 +1007,7 @@ class UnrealView(StoreView):
             attachments=attachments,
             data=event,
             project=project,
-            relay_config=relay_config,
+            project_config=project_config,
             **kwargs)
 
         # The return here is only useful for consistency
@@ -1040,7 +1039,7 @@ class SecurityReportView(StoreView):
         'application/expect-staple-report',
     )
 
-    def _dispatch(self, request, helper, relay_config, origin=None,
+    def _dispatch(self, request, helper, project_config, origin=None,
                   config_flags=None, *args, **kwargs):
         # A CSP report is sent as a POST request with no Origin or Referer
         # header. What we're left with is a 'document-uri' key which is
@@ -1058,8 +1057,8 @@ class SecurityReportView(StoreView):
 
         request.user = AnonymousUser()
 
-        project = relay_config.project
-        project_id = relay_config.project_id
+        project = project_config.project
+        project_id = project_config.project_id
 
         # This is yanking the auth from the querystring since it's not
         # in the POST body. This means we expect a `sentry_key` and
@@ -1079,16 +1078,16 @@ class SecurityReportView(StoreView):
         helper.context.bind_auth(auth)
 
         return super(APIView, self).dispatch(
-            request=request, project=project, auth=auth, helper=helper, key=key, relay_config=relay_config, **kwargs
+            request=request, project=project, auth=auth, helper=helper, key=key, project_config=project_config, **kwargs
         )
 
-    def post(self, request, project, helper, key, relay_config, **kwargs):
+    def post(self, request, project, helper, key, project_config, **kwargs):
         json_body = safely_load_json_string(request.body)
         report_type = self.security_report_type(json_body)
         if report_type is None:
             track_outcome(
-                relay_config.organization_id,
-                relay_config.project_id,
+                project_config.organization_id,
+                project_config.project_id,
                 key.id,
                 Outcome.INVALID,
                 "security_report_type")
@@ -1099,8 +1098,8 @@ class SecurityReportView(StoreView):
             instance = interface.from_raw(json_body)
         except jsonschema.ValidationError as e:
             track_outcome(
-                relay_config.organization_id,
-                relay_config.project_id,
+                project_config.organization_id,
+                project_config.project_id,
                 key.id,
                 Outcome.INVALID,
                 "security_report")
@@ -1110,8 +1109,8 @@ class SecurityReportView(StoreView):
         origin = instance.get_origin()
         if not is_valid_origin(origin, project):
             track_outcome(
-                relay_config.organization_id,
-                relay_config.project_id,
+                project_config.organization_id,
+                project_config.project_id,
                 key.id,
                 Outcome.INVALID,
                 FilterStatKeys.CORS)
@@ -1129,7 +1128,7 @@ class SecurityReportView(StoreView):
                      helper=helper,
                      data=data,
                      key=key,
-                     relay_config=relay_config,
+                     project_config=project_config,
                      **kwargs)
 
         return HttpResponse(content_type='application/javascript', status=201)
diff --git a/src/sentry/web/relay_config.py b/src/sentry/web/relay_config.py
deleted file mode 100644
index b9234577a9..0000000000
--- a/src/sentry/web/relay_config.py
+++ /dev/null
@@ -1,398 +0,0 @@
-from __future__ import absolute_import
-import json
-
-import six
-import logging
-
-from sentry.coreapi import APIError
-from sentry.models.organizationoption import OrganizationOption
-from sentry.models.project import Project
-from sentry.models.organization import Organization
-from sentry import options
-from sentry.utils.data_filters import FilterTypes, FilterStatKeys
-from sentry.utils.http import get_origins
-from sentry.utils.outcomes import Outcome, track_outcome
-from sentry.grouping.api import get_grouping_config_dict_for_project
-from sentry.models.projectoption import ProjectOption
-from sentry.message_filters import get_all_filters
-
-logger = logging.getLogger('sentry')
-
-# a list of all the properties available in restricted config
-_restricted_config_properties = frozenset([
-    'project_id',
-
-    'kafka_max_event_size',
-    'kafka_raw_event_sample_rate'
-])
-
-
-def _to_camel_case_name(name):
-    """
-    Converts a string from snake_case to camelCase
-
-    :param name: the string to convert
-    :return: the name converted to camelCase
-
-    >>> _to_camel_case_name(22)
-    22
-    >>> _to_camel_case_name("hello_world")
-    'helloWorld'
-    >>> _to_camel_case_name("_hello_world")
-    'helloWorld'
-    >>> _to_camel_case_name("__hello___world___")
-    'helloWorld'
-    >>> _to_camel_case_name("hello")
-    'hello'
-    >>> _to_camel_case_name("Hello_world")
-    'helloWorld'
-    >>> _to_camel_case_name("one_two_three_four")
-    'oneTwoThreeFour'
-    >>> _to_camel_case_name("oneTwoThreeFour")
-    'oneTwoThreeFour'
-    """
-
-    def first_lower(s):
-        return s[:1].lower() + s[1:]
-
-    def first_upper(s):
-        return s[:1].upper() + s[1:]
-
-    if not isinstance(name, six.string_types):
-        return name
-    else:
-        name = name.strip("_")
-        pieces = name.split('_')
-        return first_lower(pieces[0]) + ''.join(first_upper(x) for x in pieces[1:])
-
-
-def _to_camel_case_dict(obj):
-    """
-    Converts recursively the keys of a dictionary from snake_case to camelCase
-
-    This is intended for converting dictionaries that use the python convention to
-    dictionaries that use the javascript/JSON convention
-
-    NOTE: this function will, by default,  mutate the dictionary in place.
-    If you do not want to change the input use clone=True
-
-    :param obj: the dictionary
-
-    :return: a dictionary with the string keys converted
-
-    >>> _to_camel_case_dict({'_abc': {'_one_two_three': 1}})
-    {'abc': {'oneTwoThree': 1}}
-    >>> val = {'_abc': {'_one_two_three': 1}}
-    >>> _to_camel_case_dict({'_abc': {'_one_two_three': 1}})
-    {'abc': {'oneTwoThree': 1}}
-
-    # check that we didn't affect the original
-    >>> val
-    {'_abc': {'_one_two_three': 1}}
-
-    """
-
-    if not isinstance(obj, dict):
-        raise ValueError("Bad parameter passed expected dictionary got {}".format(repr(type(obj))))
-
-    return {_to_camel_case_name(key): _to_camel_case_dict(value) if isinstance(value, dict) else value
-            for (key, value) in six.iteritems(obj)}
-
-
-class _ConfigBase(object):
-    """
-    Base class for configuration objects
-
-    Offers a readonly configuration class that can be serialized to json and viewed as a simple dictionary
-
-    >>> x = _ConfigBase( a= 1, b="The b", c= _ConfigBase(x=33, y = _ConfigBase(m=3.14159 , w=[1,2,3], z={'t':1})))
-    >>> x.a
-    1
-    >>> x.b
-    'The b'
-    >>> x.something is None # accessing non-existing elements
-    True
-    >>> x.c.y.w
-    [1, 2, 3]
-
-    """
-
-    def __init__(self, **kwargs):
-        data = {}
-        object.__setattr__(self, "data", data)
-        for (key, val) in six.iteritems(kwargs):
-            if val is not None:
-                data[key] = val
-
-    def __setattr__(self, key, value):
-        raise Exception("Trying to change read only RelayConfig object")
-
-    def __getattr__(self, name):
-        data = self.__get_data()
-        return data.get(name)
-
-    def to_dict(self):
-        """
-        Converts the config object into a dictionary
-
-        :param to_camel_case: should the dictionary keys be converted to camelCase from snake_case
-        :return: A dictionary containing the object properties, with config properties also converted in dictionaries
-
-        >>> x = _ConfigBase( a= 1, b="The b", c= _ConfigBase(x=33, y = _ConfigBase(m=3.14159 , w=[1,2,3], z={'t':1})))
-        >>> x.to_dict() == {'a': 1, 'c': {'y': {'m': 3.14159, 'w': [1, 2, 3], 'z':{'t': 1}}, 'x': 33}, 'b': 'The b'}
-        True
-        """
-        data = self.__get_data()
-        return {key: value.to_dict() if isinstance(value, _ConfigBase) else value for (key, value) in
-                six.iteritems(data)}
-
-    def to_json_string(self):
-        """
-        >>> x = _ConfigBase( a = _ConfigBase(b = _ConfigBase( w=[1,2,3])))
-        >>> x.to_json_string()
-        '{"a": {"b": {"w": [1, 2, 3]}}}'
-
-        :return:
-        """
-        data = self.to_dict()
-        data = _to_camel_case_dict(data)
-        return json.dumps(data)
-
-    def get_at_path(self, *args):
-        """
-        Gets an element at the specified path returning None if the element or the path doesn't exists
-
-        :param args: the path to follow ( a list of strings)
-        :return: the element if present at specified path or None otherwise)
-
-        >>> x = _ConfigBase( a= 1, b="The b", c= _ConfigBase(x=33, y = _ConfigBase(m=3.14159 , w=[1,2,3], z={'t':1})))
-        >>> x.get_at_path('c','y','m')
-        3.14159
-        >>> x.get_at_path('bb') is None # property not set
-        True
-        >>> x.get_at_path('a', 'something') is None # trying to go past existing Config paths
-        True
-        >>> x.get_at_path('c','y','z')
-        {'t': 1}
-        >>> x.get_at_path('c','y','z','t') is None # only navigates in ConfigBase does not try to go into normal dicts.
-        True
-
-        """
-        if len(args) == 0:
-            return self
-
-        data = self.__get_data()
-        val = data.get(args[0])
-
-        if len(args) == 1:
-            return val
-
-        if isinstance(val, _ConfigBase):
-            return val.get_at_path(*args[1:])
-
-        return None  # property not set or path goes beyond the Config defined valid path
-
-    def __get_data(self):
-        return object.__getattribute__(self, 'data')
-
-    def __str__(self):
-        try:
-            return json.dumps(self.to_dict(), sort_keys=True)
-        except Exception as e:
-            return "Content Error:{}".format(e)
-
-    def __repr__(self):
-        return "({0}){1}".format(self.__class__.__name__, self)
-
-
-class RestrictedConfig(_ConfigBase):
-    """
-    Represents the full configuration available to a trusted Relay processor
-    """
-
-    def to_restricted(self):
-        return self
-
-
-class FullRelayConfig(_ConfigBase):
-    """
-    Represents the restricted configuration available to an untrusted
-    """
-
-    def __init__(self, project, **kwargs):
-        # TODO RaduW 20.05.2019 (ideally we would like to get rid of the project object), it is
-        #   quite messy at the moment (it is added to the helper context so I don't really know where it ends up)
-        #   For now just add it as a property (will not be serialized to JSON since it is not in the 'data' dictionary)
-        object.__setattr__(self, "project", project)
-
-        super(FullRelayConfig, self).__init__(**kwargs)
-
-    def to_restricted(self):
-        """
-        Constructs a restricted Relay configuration for use on external (untrusted relay pipes)
-
-        :return: a RestrictedConfig
-        """
-        all = self.to_dict()
-        # keep only whitelisted properties for the Restricted conf
-        restricted = {key: value for key, value in six.iteritems(all) if key in _restricted_config_properties}
-        return RestrictedConfig(**restricted)
-
-
-def get_full_relay_config(project_id):
-    """
-    Constructs the internal (big) RelayConfig
-
-    :param project_id: the project id as int or string
-    :return: FullRelayConfig the relay configuration
-    """
-
-    cfg = {}
-    project = _get_project_from_id(six.text_type(project_id))
-
-    if project is None:
-        raise APIError("Invalid project id:{}".format(project_id))
-
-    cfg['project_id'] = project.id
-    cfg['organization_id'] = project.organization_id
-
-    # Explicitly bind Organization so we don't implicitly query it later
-    # this just allows us to comfortably assure that `project.organization` is safe.
-    # This also allows us to pull the object from cache, instead of being
-    # implicitly fetched from database.
-    project.organization = Organization.objects.get_from_cache(
-        id=project.organization_id)
-
-    if project.organization is not None:
-        org_options = OrganizationOption.objects.get_all_values(
-            project.organization_id)
-    else:
-        org_options = {}
-
-    # get the project options
-    project_cfg = {}
-    cfg['config'] = project_cfg
-
-    # getting kafka info
-    try:
-        project_cfg['kafka_max_event_size'] = options.get('kafka-publisher.max-event-size')
-        project_cfg['kafka_raw_event_sample_rate'] = options.get('kafka-publisher.raw-event-sample-rate')
-    except Exception:
-        pass  # should we log ?
-
-    invalid_releases = project.get_option(u'sentry:{}'.format(FilterTypes.RELEASES))
-    if invalid_releases is not None:
-        project_cfg[FilterTypes.RELEASES] = invalid_releases
-
-    blacklisted_ips = project.get_option('sentry:blacklisted_ips')
-    if blacklisted_ips is not None:
-        project_cfg['blacklisted_ips'] = blacklisted_ips
-
-    error_messages = project.get_option(u'sentry:{}'.format(FilterTypes.ERROR_MESSAGES))
-    if error_messages is not None:
-        project_cfg[FilterTypes.ERROR_MESSAGES] = error_messages
-
-    # get the filter settings for this project
-    filter_settings = {}
-    project_cfg['filter_settings'] = filter_settings
-
-    for flt in get_all_filters():
-        filter_id = flt.spec.id
-        settings = _load_filter_settings(flt, project)
-        filter_settings[filter_id] = settings
-
-    scrub_ip_address = (org_options.get('sentry:require_scrub_ip_address', False) or
-                        project.get_option('sentry:scrub_ip_address', False))
-
-    project_cfg['scrub_ip_addresses'] = scrub_ip_address
-
-    scrub_data = (org_options.get('sentry:require_scrub_data', False) or
-                  project.get_option('sentry:scrub_data', True))
-
-    project_cfg['scrub_data'] = scrub_data
-    project_cfg['grouping_config'] = get_grouping_config_dict_for_project(project)
-    project_cfg['allowed_domains'] = list(get_origins(project))
-
-    if scrub_data:
-        # We filter data immediately before it ever gets into the queue
-        sensitive_fields_key = 'sentry:sensitive_fields'
-        sensitive_fields = (
-            org_options.get(sensitive_fields_key, []) +
-            project.get_option(sensitive_fields_key, [])
-        )
-        project_cfg['sensitive_fields'] = sensitive_fields
-
-        exclude_fields_key = 'sentry:safe_fields'
-        exclude_fields = (
-            org_options.get(exclude_fields_key, []) +
-            project.get_option(exclude_fields_key, [])
-        )
-        project_cfg['exclude_fields'] = exclude_fields
-
-        scrub_defaults = (org_options.get('sentry:require_scrub_defaults', False) or
-                          project.get_option('sentry:scrub_defaults', True))
-        project_cfg['scrub_defaults'] = scrub_defaults
-
-    return FullRelayConfig(project, **cfg)
-
-
-def _get_project_from_id(project_id):
-    if not project_id:
-        return None
-    if not project_id.isdigit():
-        track_outcome(0, 0, None, Outcome.INVALID, "project_id")
-        raise APIError('Invalid project_id: %r' % project_id)
-    try:
-        return Project.objects.get_from_cache(id=project_id)
-    except Project.DoesNotExist:
-        track_outcome(0, 0, None, Outcome.INVALID, "project_id")
-        raise APIError('Invalid project_id: %r' % project_id)
-
-
-def _load_filter_settings(flt, project):
-    """
-    Returns the filter settings for the specified project
-
-    :param flt: the filter function
-    :param project: the project for which we want to retrieve the options
-    :return: a dictionary with the filter options.
-        If the project does not explicitly specify the filter options then the
-        default options for the filter will be returned
-    """
-    filter_id = flt.spec.id
-    filter_key = u'filters:{}'.format(filter_id)
-    setting = ProjectOption.objects.get_value(project=project, key=filter_key, default=None)
-
-    return _filter_option_to_config_setting(flt, setting)
-
-
-def _filter_option_to_config_setting(flt, setting):
-    """
-    Encapsulates the logic for associating a filter database option with the filter setting from relay_config
-
-    :param flt: the filter
-    :param setting: the option deserialized from the database
-    :return: the option as viewed from relay_config
-    """
-    if setting is None:
-        raise ValueError("Could not find filter state for filter {0}."
-                         " You need to register default filter state in projectoptions.defaults.".format(flt.spec.id))
-
-    is_enabled = setting != '0'
-
-    ret_val = {
-        'is_enabled': is_enabled
-    }
-
-    # special case for legacy browser.
-    # If the number of special cases increases we'll have to factor this functionality somewhere
-    if flt.spec.id == FilterStatKeys.LEGACY_BROWSER:
-        if is_enabled:
-            if setting == '1':
-                # old style filter
-                ret_val['default_filter'] = True
-            else:
-                # new style filter, per legacy browser type handling
-                # ret_val['options'] = setting.split(' ')
-                ret_val['options'] = list(setting)
-    return ret_val
diff --git a/tests/sentry/api/endpoints/test_relay_changeset_storev7.py b/tests/sentry/api/endpoints/test_relay_changeset_storev7.py
deleted file mode 100644
index a08bb0c728..0000000000
--- a/tests/sentry/api/endpoints/test_relay_changeset_storev7.py
+++ /dev/null
@@ -1,157 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from uuid import uuid4
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import Relay
-from sentry.testutils import APITestCase
-
-from semaphore import generate_key_pair
-
-
-class RelayChangeSetStoreV7Test(APITestCase):
-    def setUp(self):
-        super(RelayChangeSetStoreV7Test, self).setUp()
-
-        self.key_pair = generate_key_pair()
-
-        self.public_key = self.key_pair[1]
-        self.private_key = self.key_pair[0]
-        self.relay_id = six.binary_type(uuid4())
-
-        self.relay = Relay.objects.create(
-            relay_id=self.relay_id,
-            public_key=six.binary_type(self.public_key),
-            is_internal=True
-        )
-
-        self.project = self.create_project()
-
-        self.path = reverse(
-            'sentry-api-0-relay-heartbeat'
-        )
-
-        self.data = {
-            'changesets': [
-                {
-                    'type': 'store_v7',
-                    'project_id': self.project.id,
-                    'data': {
-                        'public_key': self.projectkey.public_key,
-                        'meta': {
-                            'origin': 'http://localhost:1337/',
-                            'remote_addr': '127.0.0.1',
-                            'sentry_client': 'raven-js/3.23.3'
-                        },
-                        'event': {
-                            'event_id': 'efc75e1a3d2d4f7b9ce90520a5225edb',
-                            'culprit': 'http://localhost:1337/error.js',
-                            'logger': 'javascript',
-                            'platform': 'javascript',
-                            'request': {
-                                'url': 'http://localhost:1337/',
-                                'headers': {
-                                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36'
-                                }
-                            },
-                            'breadcrumbs': [
-                                {
-                                    'timestamp': 1524557689,
-                                    'type': 'default',
-                                    'category': 'console',
-                                    'level': 'warning',
-                                    'message': '@sentry/browser configured'
-                                },
-                                {
-                                    'timestamp': 1524557689,
-                                    'type': 'default',
-                                    'category': 'console',
-                                    'level': 'warning',
-                                    'message': '4 exceptions captured and queued'
-                                },
-                                {
-                                    'timestamp': 1524557689,
-                                    'type': 'default',
-                                    'category': 'console',
-                                    'level': 'warning',
-                                    'message': 'Draining queue...'
-                                }
-                            ],
-                            'exception': {
-                                'values': [
-                                    {
-                                        'type': 'Error',
-                                        'value': 'regular exception no. 1',
-                                        'stacktrace': {
-                                            'frames': [
-                                                {
-                                                    'function': '?',
-                                                    'filename': 'http://localhost:1337/error.js',
-                                                    'lineno': 29,
-                                                    'colno': 3,
-                                                    'in_app': True
-                                                },
-                                                {
-                                                    'function': '?',
-                                                    'filename': 'http://localhost:1337/error.js',
-                                                    'lineno': 28,
-                                                    'colno': 3,
-                                                    'in_app': True
-                                                },
-                                                {
-                                                    'function': 'foo',
-                                                    'filename': 'http://localhost:1337/error.js',
-                                                    'lineno': 13,
-                                                    'colno': 11,
-                                                    'in_app': True
-                                                }
-                                            ]
-                                        }
-                                    }
-                                ]
-                            },
-                            'extra': {
-                                'session:duration': 8
-                            },
-                            'sdk': {
-                                'name': 'sentry-browser',
-                                'version': '3.23.3'
-                            },
-                            'project': '10',
-                            'trimHeadFrames': 0
-                        }
-                    }
-                }
-            ],
-            'queries': {}
-        }
-
-    def test_storev7(self):
-        raw_json, signature = self.private_key.pack(self.data)
-
-        resp = self.client.post(
-            self.path,
-            data=raw_json,
-            content_type='application/json',
-            HTTP_X_SENTRY_RELAY_ID=self.relay_id,
-            HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
-        )
-
-        assert resp.status_code == 200, resp.content
-
-    def test_invalid_changeset(self):
-        self.data['changesets'][0]['type'] = 'abc'
-        raw_json, signature = self.private_key.pack(self.data)
-
-        resp = self.client.post(
-            self.path,
-            data=raw_json,
-            content_type='application/json',
-            HTTP_X_SENTRY_RELAY_ID=self.relay_id,
-            HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
-        )
-
-        assert resp.status_code == 200, resp.content
diff --git a/tests/sentry/api/endpoints/test_relay_projectconfigs.py b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
index 646d44d9e6..32115d6a0f 100644
--- a/tests/sentry/api/endpoints/test_relay_projectconfigs.py
+++ b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
@@ -2,21 +2,23 @@ from __future__ import absolute_import
 
 import json
 import six
+import re
 
 from uuid import uuid4
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import Relay
+from sentry.utils import safe
+from sentry.models.relay import Relay
 from sentry.testutils import APITestCase
 
-from semaphore import generate_key_pair
+from semaphore.auth import generate_key_pair
 
 
 class RelayQueryGetProjectConfigTest(APITestCase):
-    def setUp(self):
-        super(RelayQueryGetProjectConfigTest, self).setUp()
+    _date_regex = re.compile(r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z$')
 
+    def _setup_relay(self, internal, add_org_key):
         self.key_pair = generate_key_pair()
 
         self.public_key = self.key_pair[1]
@@ -26,7 +28,7 @@ class RelayQueryGetProjectConfigTest(APITestCase):
         self.relay = Relay.objects.create(
             relay_id=self.relay_id,
             public_key=six.binary_type(self.public_key),
-            is_internal=True
+            is_internal=internal
         )
 
         self.project = self.create_project()
@@ -35,9 +37,23 @@ class RelayQueryGetProjectConfigTest(APITestCase):
             'sentry-api-0-relay-projectconfigs'
         )
 
-    def test_get_project_config(self):
+        org = self.project.organization
+
+        if add_org_key:
+            org.update_option('sentry:trusted-relays', [self.relay.public_key])
+
+    def _call_endpoint(self, full_config):
         projects = [six.text_type(self.project.id)]
-        raw_json, signature = self.private_key.pack({'projects': projects})
+
+        if full_config is None:
+            raw_json, signature = self.private_key.pack({
+                'projects': projects,
+            })
+        else:
+            raw_json, signature = self.private_key.pack({
+                'projects': projects,
+                'fullConfig': full_config
+            })
 
         resp = self.client.post(
             self.path,
@@ -47,9 +63,112 @@ class RelayQueryGetProjectConfigTest(APITestCase):
             HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
         )
 
-        result = json.loads(resp.content)
+        return json.loads(resp.content), resp.status_code
+
+    def test_internal_relays_should_receive_minimal_configs_if_they_do_not_explicitly_ask_for_full_config(
+            self):
+        self._setup_relay(internal=True, add_org_key=False)
+        result, status_code = self._call_endpoint(full_config=False)
+
+        assert status_code < 400
+
+        cfg = safe.get_path(result, 'configs', six.text_type(self.project.id))
+        assert safe.get_path(cfg, 'config', 'filterSettings') is None
+        assert safe.get_path(cfg, 'config', 'groupingConfig') is None
+
+    def test_internal_relays_should_receive_full_configs(self):
+        self._setup_relay(internal=True, add_org_key=False)
+        result, status_code = self._call_endpoint(full_config=True)
+
+        assert status_code < 400
+
+        cfg = safe.get_path(result, 'configs', six.text_type(self.project.id))
+        assert safe.get_path(cfg, 'disabled') is False
+        assert safe.get_path(cfg, 'publicKeys', self.projectkey.public_key) is True
+        assert safe.get_path(cfg, 'slug') == self.project.slug
+        last_change = safe.get_path(cfg, 'lastChange')
+        assert self._date_regex.match(last_change) is not None
+        last_fetch = safe.get_path(cfg, 'lastFetch')
+        assert self._date_regex.match(last_fetch) is not None
+        assert safe.get_path(cfg, 'organizationId') == self.project.organization.id
+        assert safe.get_path(cfg, 'projectId') == self.project.id
+        assert safe.get_path(cfg, 'slug') == self.project.slug
+        assert safe.get_path(cfg, 'rev') is not None
+
+        assert safe.get_path(cfg, 'config', 'trustedRelays') == []
+        assert safe.get_path(cfg, 'config', 'filterSettings') is not None
+        assert safe.get_path(cfg, 'config', 'groupingConfig', 'enhancements') is not None
+        assert safe.get_path(cfg, 'config', 'groupingConfig', 'id') is not None
+        assert safe.get_path(cfg, 'config', 'piiConfig', 'applications') is not None
+        assert safe.get_path(cfg, 'config', 'piiConfig', 'rules') is not None
+        assert safe.get_path(cfg, 'config', 'scrubData') is True
+        assert safe.get_path(cfg, 'config', 'scrubDefaults') is True
+        assert safe.get_path(cfg, 'config', 'scrubIpAddresses') is True
+        assert safe.get_path(cfg, 'config', 'sensitiveFields') == []
+
+    def test_trusted_external_relays_should_not_be_able_to_request_full_configs(self):
+        self._setup_relay(False, True)
+        result, status_code = self._call_endpoint(full_config=True)
+
+        assert status_code == 403
+
+    def test_when_not_sending_full_config_info_into_a_internal_relay_a_restricted_config_is_returned(
+            self):
+        self._setup_relay(internal=True, add_org_key=False)
+        result, status_code = self._call_endpoint(full_config=None)
+
+        assert status_code < 400
+
+        cfg = safe.get_path(result, 'configs', six.text_type(self.project.id))
+        assert safe.get_path(cfg, 'config', 'filterSettings') is None
+        assert safe.get_path(cfg, 'config', 'groupingConfig') is None
+
+    def test_when_not_sending_full_config_info_into_an_external_relay_a_restricted_config_is_returned(
+            self):
+        self._setup_relay(internal=False, add_org_key=True)
+        result, status_code = self._call_endpoint(full_config=None)
+
+        assert status_code < 400
+
+        cfg = safe.get_path(result, 'configs', six.text_type(self.project.id))
+        assert safe.get_path(cfg, 'config', 'filterSettings') is None
+        assert safe.get_path(cfg, 'config', 'groupingConfig') is None
+
+    def test_trusted_external_relays_should_receive_minimal_configs(self):
+        self._setup_relay(False, True)
+        result, status_code = self._call_endpoint(full_config=False)
+
+        assert status_code < 400
+
+        cfg = safe.get_path(result, 'configs', six.text_type(self.project.id))
+        assert safe.get_path(cfg, 'disabled') is False
+        assert safe.get_path(cfg, 'publicKeys', self.projectkey.public_key) is True
+        assert safe.get_path(cfg, 'slug') == self.project.slug
+        last_change = safe.get_path(cfg, 'lastChange')
+        assert self._date_regex.match(last_change) is not None
+        last_fetch = safe.get_path(cfg, 'lastFetch')
+        assert self._date_regex.match(last_fetch) is not None
+        assert safe.get_path(cfg, 'projectId') == self.project.id
+        assert safe.get_path(cfg, 'slug') == self.project.slug
+        assert safe.get_path(cfg, 'rev') is not None
+
+        assert safe.get_path(cfg, 'organizationId') is None
+        assert safe.get_path(cfg, 'config', 'trustedRelays') == [self.relay.public_key]
+        assert safe.get_path(cfg, 'config', 'filterSettings') is None
+        assert safe.get_path(cfg, 'config', 'groupingConfig', ) is None
+        assert safe.get_path(cfg, 'config', 'piiConfig', 'applications') is not None
+        assert safe.get_path(cfg, 'config', 'piiConfig', 'rules') is not None
+        assert safe.get_path(cfg, 'config', 'scrubData') is None
+        assert safe.get_path(cfg, 'config', 'scrubDefaults') is None
+        assert safe.get_path(cfg, 'config', 'scrubIpAddresses') is None
+        assert safe.get_path(cfg, 'config', 'sensitiveFields') is None
+
+    def test_untrusted_external_relays_should_not_receive_configs(self):
+        self._setup_relay(False, False)
+        result, status_code = self._call_endpoint(full_config=False)
+
+        assert status_code < 400
+
         cfg = result['configs'][six.text_type(self.project.id)]
-        assert not cfg['disabled']
-        assert cfg['publicKeys'][self.projectkey.public_key] is True
-        assert cfg['slug'] == self.project.slug
-        assert cfg['config']['trustedRelays'] == []
+
+        assert cfg is None
diff --git a/tests/sentry/api/endpoints/test_relay_query_get_project_config.py b/tests/sentry/api/endpoints/test_relay_query_get_project_config.py
deleted file mode 100644
index b48dd237d3..0000000000
--- a/tests/sentry/api/endpoints/test_relay_query_get_project_config.py
+++ /dev/null
@@ -1,159 +0,0 @@
-from __future__ import absolute_import
-
-import json
-import six
-
-from uuid import uuid4
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import Relay
-from sentry.testutils import APITestCase
-
-from semaphore import generate_key_pair
-
-
-class RelayQueryGetProjectConfigTest(APITestCase):
-    def setUp(self):
-        super(RelayQueryGetProjectConfigTest, self).setUp()
-
-        self.key_pair = generate_key_pair()
-
-        self.public_key = self.key_pair[1]
-        self.private_key = self.key_pair[0]
-        self.relay_id = six.binary_type(uuid4())
-
-        self.relay = Relay.objects.create(
-            relay_id=self.relay_id,
-            public_key=six.binary_type(self.public_key),
-            is_internal=True
-        )
-
-        self.project = self.create_project()
-
-        self.path = reverse(
-            'sentry-api-0-relay-heartbeat'
-        )
-
-    def test_get_project_config(self):
-        query_id = six.binary_type(uuid4())
-
-        data = {
-            'changesets': [],
-            'queries': {
-                query_id: {
-                    'type': 'get_project_config',
-                    'project_id': self.project.id,
-                    'data': None
-                }
-            }
-        }
-
-        raw_json, signature = self.private_key.pack(data)
-
-        resp = self.client.post(
-            self.path,
-            data=raw_json,
-            content_type='application/json',
-            HTTP_X_SENTRY_RELAY_ID=self.relay_id,
-            HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
-        )
-
-        result = json.loads(resp.content)
-
-        assert resp.status_code == 200, resp.content
-        assert result.get('queryResults').get(query_id).get('status') == 'ok'
-        query_result = result.get('queryResults').get(query_id).get('result')
-        assert query_result.get('publicKeys') is not None
-        assert query_result.get('rev') is not None
-        assert query_result.get('disabled') is False
-
-    def test_get_project_config_missing_project_id(self):
-        query_id = six.binary_type(uuid4())
-
-        data = {
-            'changesets': [],
-            'queries': {
-                query_id: {
-                    'type': 'get_project_config',
-                    'data': None
-                }
-            }
-        }
-
-        raw_json, signature = self.private_key.pack(data)
-
-        resp = self.client.post(
-            self.path,
-            data=raw_json,
-            content_type='application/json',
-            HTTP_X_SENTRY_RELAY_ID=self.relay_id,
-            HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
-        )
-
-        result = json.loads(resp.content)
-
-        assert resp.status_code == 200, resp.content
-        assert result.get('queryResults').get(query_id).get('status') == 'error'
-
-    def test_invalid_query(self):
-        query_id = six.binary_type(uuid4())
-
-        data = {
-            'changesets': [],
-            'queries': {
-                query_id: {
-                    'type': 'get_project_configg',
-                    'project_id': self.project.id,
-                    'data': None
-                }
-            }
-        }
-
-        raw_json, signature = self.private_key.pack(data)
-
-        resp = self.client.post(
-            self.path,
-            data=raw_json,
-            content_type='application/json',
-            HTTP_X_SENTRY_RELAY_ID=self.relay_id,
-            HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
-        )
-
-        result = json.loads(resp.content)
-
-        assert resp.status_code == 200, resp.content
-        assert result.get('queryResults').get(query_id).get('status') == 'error'
-        query_result = result.get('queryResults').get(query_id).get('error')
-        assert query_result == 'unknown query'
-
-    def test_project_does_not_exist(self):
-        query_id = six.binary_type(uuid4())
-
-        data = {
-            'changesets': [],
-            'queries': {
-                query_id: {
-                    'type': 'get_project_config',
-                    'project_id': 9999,
-                    'data': None
-                }
-            }
-        }
-
-        raw_json, signature = self.private_key.pack(data)
-
-        resp = self.client.post(
-            self.path,
-            data=raw_json,
-            content_type='application/json',
-            HTTP_X_SENTRY_RELAY_ID=self.relay_id,
-            HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
-        )
-
-        result = json.loads(resp.content)
-
-        assert resp.status_code == 200, resp.content
-        assert result.get('queryResults').get(query_id).get('status') == 'error'
-        query_result = result.get('queryResults').get(query_id).get('error')
-        assert query_result == 'Project does not exist'
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index ad9f545eef..0dcb17082b 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -25,7 +25,7 @@ from sentry.models import (
 from sentry.signals import event_discarded, event_saved
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase
 from sentry.utils.data_filters import FilterStatKeys
-from sentry.web.relay_config import get_full_relay_config
+from sentry.relay.config import get_project_config
 
 
 def make_event(**kwargs):
@@ -1348,15 +1348,15 @@ class EventManagerTest(TestCase):
             },
         }
 
-        relay_config = get_full_relay_config(self.project.id)
-        manager = EventManager(data, project=self.project, relay_config=relay_config)
+        project_config = get_project_config(self.project.id)
+        manager = EventManager(data, project=self.project, project_config=project_config)
 
         mock_is_valid_error_message.side_effect = [item.result for item in items]
 
         assert manager.should_filter() == (True, FilterStatKeys.ERROR_MESSAGE)
 
         assert mock_is_valid_error_message.call_args_list == [
-            mock.call(relay_config, item.formatted) for item in items]
+            mock.call(project_config, item.formatted) for item in items]
 
     def test_legacy_attributes_moved(self):
         event = make_event(
diff --git a/tests/sentry/filters/test_browser_extensions.py b/tests/sentry/filters/test_browser_extensions.py
index f627c33f80..eb2f05f03d 100644
--- a/tests/sentry/filters/test_browser_extensions.py
+++ b/tests/sentry/filters/test_browser_extensions.py
@@ -1,15 +1,15 @@
 from __future__ import absolute_import
 
 from sentry.message_filters import _browser_extensions_filter
-from sentry.web.relay_config import FullRelayConfig
+from sentry.relay.config import ProjectConfig
 from sentry.testutils import TestCase
 
 
 class BrowserExtensionsFilterTest(TestCase):
 
     def apply_filter(self, data):
-        relay_config = FullRelayConfig(self.project)
-        return _browser_extensions_filter(relay_config, data)
+        project_config = ProjectConfig(self.project)
+        return _browser_extensions_filter(project_config, data)
 
     def get_mock_data(self, exc_value=None, exc_source=None):
         return {
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index 130071a7c5..7adec3af5e 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -3,12 +3,11 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.message_filters import _legacy_browsers_filter  # noqa
-from sentry.web.relay_config import _filter_option_to_config_setting  # noqa
 from sentry.models.projectoption import ProjectOption
 from sentry.models.auditlogentry import AuditLogEntry, AuditLogEntryEvent
 from sentry.testutils import APITestCase, TestCase
 from sentry.utils.canonical import CanonicalKeyView
-from sentry.web.relay_config import FullRelayConfig
+from sentry.relay.config import ProjectConfig, _filter_option_to_config_setting  # noqa
 
 USER_AGENTS = {
     'android_2':
@@ -242,8 +241,8 @@ class SetLegacyBrowserFilterTest(APITestCase):
 
 class LegacyBrowsersFilterTest(TestCase):
 
-    def apply_filter(self, relay_config, data):
-        return _legacy_browsers_filter(relay_config, CanonicalKeyView(data))
+    def apply_filter(self, project_config, data):
+        return _legacy_browsers_filter(project_config, CanonicalKeyView(data))
 
     def get_mock_data(self, user_agent):
         return {
@@ -257,14 +256,14 @@ class LegacyBrowsersFilterTest(TestCase):
             }
         }
 
-    def _get_relay_config(self, filter_opt=None):
+    def _get_project_config(self, filter_opt=None):
         """
-        Constructs a test relay_config with the provided legacy_browsers filter setting
+        Constructs a test project_config with the provided legacy_browsers filter setting
         :param filter_opt: the value for 'filters:legacy-browsers' project options (may be None)
-        :return: a RelayConfig object with the filter option set and the project taken from
+        :return: a ProjectConfig object with the filter option set and the project taken from
         the TestCase
         """
-        ret_val = FullRelayConfig(self.project, config={})
+        ret_val = ProjectConfig(self.project, config={})
         config = ret_val.config
         filter_settings = {}
         config['filter_settings'] = filter_settings
@@ -274,151 +273,151 @@ class LegacyBrowsersFilterTest(TestCase):
         return ret_val
 
     def test_filters_android_2_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['android_2'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_does_not_filter_android_4_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['android_4'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_filters_ie_9_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['ie_9'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_filters_iemobile_9_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['iemobile_9'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_does_not_filter_ie_10_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['ie_10'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_does_not_filter_iemobile_10_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['iemobile_10'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_filters_opera_12_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['opera_12'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_filters_opera_mini_7_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_does_not_filter_chrome_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['chrome'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_does_not_filter_edge_by_default(self):
-        relay_config = self._get_relay_config('1')
+        project_config = self._get_project_config('1')
         data = self.get_mock_data(USER_AGENTS['edge'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_filter_opera(self):
-        relay_config = self._get_relay_config(['opera_pre_15'])
+        project_config = self._get_project_config(['opera_pre_15'])
         data = self.get_mock_data(USER_AGENTS['opera_12'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_filter_opera_method(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['opera_12'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_dont_filter_opera_15(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['opera_15'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_filter_opera_mini(self):
-        relay_config = self._get_relay_config(['opera_mini_pre_8'])
+        project_config = self._get_project_config(['opera_mini_pre_8'])
         data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_filter_opera_mini_method(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_dont_filter_opera_mini_8(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['opera_mini_8'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_filters_ie8(self):
-        relay_config = self._get_relay_config(['ie_pre_9'])
+        project_config = self._get_project_config(['ie_pre_9'])
         data = self.get_mock_data(USER_AGENTS['ie_8'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_filters_ie8_method(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['ie_8'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_does_filter_ie9(self):
-        relay_config = self._get_relay_config(['ie9'])
+        project_config = self._get_project_config(['ie9'])
         data = self.get_mock_data(USER_AGENTS['ie_9'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_does_filter_iemobile_9(self):
-        relay_config = self._get_relay_config(['ie9'])
+        project_config = self._get_project_config(['ie9'])
         data = self.get_mock_data(USER_AGENTS['iemobile_9'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_does_filter_ie10(self):
-        relay_config = self._get_relay_config(['ie10'])
+        project_config = self._get_project_config(['ie10'])
         data = self.get_mock_data(USER_AGENTS['ie_10'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_does_not_filter_ie10(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['ie_10'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_does_filter_iemobile_10(self):
-        relay_config = self._get_relay_config(['ie10'])
+        project_config = self._get_project_config(['ie10'])
         data = self.get_mock_data(USER_AGENTS['iemobile_10'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_does_not_filter_iemobile_10(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['iemobile_10'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_filters_safari(self):
-        relay_config = self._get_relay_config(['safari_pre_6'])
+        project_config = self._get_project_config(['safari_pre_6'])
         data = self.get_mock_data(USER_AGENTS['safari_5'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_filters_safari_method(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['safari_5'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_method_does_not_filter_safari_7(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['safari_7'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
 
     def test_filters_android(self):
-        relay_config = self._get_relay_config(['android_pre_4'])
+        project_config = self._get_project_config(['android_pre_4'])
         data = self.get_mock_data(USER_AGENTS['android_2'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_filters_android_method(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['android_2'])
-        assert self.apply_filter(relay_config, data) is True
+        assert self.apply_filter(project_config, data) is True
 
     def test_method_does_not_filter_android_4(self):
-        relay_config = self._get_relay_config()
+        project_config = self._get_project_config()
         data = self.get_mock_data(USER_AGENTS['android_4'])
-        assert self.apply_filter(relay_config, data) is False
+        assert self.apply_filter(project_config, data) is False
diff --git a/tests/sentry/filters/test_localhost.py b/tests/sentry/filters/test_localhost.py
index 99396436b6..bceb662f12 100644
--- a/tests/sentry/filters/test_localhost.py
+++ b/tests/sentry/filters/test_localhost.py
@@ -1,15 +1,15 @@
 from __future__ import absolute_import
 
 from sentry.message_filters import _localhost_filter
-from sentry.web.relay_config import FullRelayConfig
+from sentry.relay.config import ProjectConfig
 from sentry.testutils import TestCase
 
 
 class LocalhostFilterTest(TestCase):
 
     def apply_filter(self, data):
-        relay_config = FullRelayConfig(self.project)
-        return _localhost_filter(relay_config, data)
+        project_config = ProjectConfig(self.project)
+        return _localhost_filter(project_config, data)
 
     def get_mock_data(self, client_ip=None, url=None):
         return {
diff --git a/tests/sentry/filters/test_web_crawlers.py b/tests/sentry/filters/test_web_crawlers.py
index 5dba8d4a4c..8c3d129c12 100644
--- a/tests/sentry/filters/test_web_crawlers.py
+++ b/tests/sentry/filters/test_web_crawlers.py
@@ -4,15 +4,15 @@ from sentry.models.project import Project
 from unittest import TestCase
 
 from sentry.message_filters import _web_crawlers_filter
-from sentry.web.relay_config import FullRelayConfig
+from sentry.relay.config import ProjectConfig
 
 
 class WebCrawlersFilterTest(TestCase):
 
     def apply_filter(self, data):
         project = Project()
-        relay_config = FullRelayConfig(project)
-        return _web_crawlers_filter(relay_config, data)
+        project_config = ProjectConfig(project)
+        return _web_crawlers_filter(project_config, data)
 
     def get_mock_data(self, user_agent):
         return {
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index f4b9167bb9..a8d8a91145 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -25,7 +25,7 @@ from sentry.utils.data_filters import (
     is_valid_error_message,
     FilterTypes,
 )
-from sentry.web.relay_config import get_full_relay_config
+from sentry.relay.config import get_project_config
 
 
 class AbsoluteUriTest(unittest.TestCase):
@@ -255,8 +255,8 @@ class IsValidOriginTestCase(unittest.TestCase):
 class IsValidIPTestCase(TestCase):
     def is_valid_ip(self, ip, inputs):
         self.project.update_option('sentry:blacklisted_ips', inputs)
-        relay_config = get_full_relay_config(self.project.id)
-        return is_valid_ip(relay_config, ip)
+        project_config = get_project_config(self.project.id)
+        return is_valid_ip(project_config, ip)
 
     def test_not_in_blacklist(self):
         assert self.is_valid_ip('127.0.0.1', [])
@@ -277,8 +277,8 @@ class IsValidIPTestCase(TestCase):
 class IsValidReleaseTestCase(TestCase):
     def is_valid_release(self, value, inputs):
         self.project.update_option(u'sentry:{}'.format(FilterTypes.RELEASES), inputs)
-        relay_config = get_full_relay_config(self.project.id)
-        return is_valid_release(relay_config, value)
+        project_config = get_project_config(self.project.id)
+        return is_valid_release(project_config, value)
 
     def test_release_not_in_list(self):
         assert self.is_valid_release('1.2.3', None)
@@ -297,8 +297,8 @@ class IsValidReleaseTestCase(TestCase):
 class IsValidErrorMessageTestCase(TestCase):
     def is_valid_error_message(self, value, inputs):
         self.project.update_option(u'sentry:{}'.format(FilterTypes.ERROR_MESSAGES), inputs)
-        relay_config = get_full_relay_config(self.project.id)
-        return is_valid_error_message(relay_config, value)
+        project_config = get_project_config(self.project.id)
+        return is_valid_error_message(project_config, value)
 
     def test_error_class_not_in_list(self):
         assert self.is_valid_error_message(
