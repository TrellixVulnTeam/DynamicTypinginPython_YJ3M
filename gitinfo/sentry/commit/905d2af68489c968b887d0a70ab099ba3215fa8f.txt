commit 905d2af68489c968b887d0a70ab099ba3215fa8f
Author: Mark Story <mark@sentry.io>
Date:   Wed Jul 24 16:11:36 2019 -0400

    ref(ui) Remove organization prefix from discover (#14132)
    
    The organization prefix doesn't add much as there is no project level
    discover. Add re-export shims for getsentry upsell pages.
    
    Fixes SEN-743

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c040f4b9c8..538fea5a0c 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -945,7 +945,7 @@ function routes() {
           <Route
             path="/organizations/:orgId/discover/"
             componentPromise={() =>
-              import(/* webpackChunkName: "OrganizationDiscover" */ 'app/views/organizationDiscover')
+              import(/* webpackChunkName: "DiscoverContainer" */ 'app/views/discover')
             }
             component={errorHandler(LazyLoad)}
           >
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.tsx b/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.tsx
rename to src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.tsx b/src/sentry/static/sentry/app/views/discover/aggregations/index.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.tsx
rename to src/sentry/static/sentry/app/views/discover/aggregations/index.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.tsx b/src/sentry/static/sentry/app/views/discover/aggregations/utils.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.tsx
rename to src/sentry/static/sentry/app/views/discover/aggregations/utils.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/analytics.tsx b/src/sentry/static/sentry/app/views/discover/analytics.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/analytics.tsx
rename to src/sentry/static/sentry/app/views/discover/analytics.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.tsx b/src/sentry/static/sentry/app/views/discover/conditions/condition.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.tsx
rename to src/sentry/static/sentry/app/views/discover/conditions/condition.tsx
index 206688a38a..80de25289f 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.tsx
+++ b/src/sentry/static/sentry/app/views/discover/conditions/condition.tsx
@@ -30,11 +30,11 @@ export default class ConditionRow extends React.Component<
   ConditionProps,
   ConditionState
 > {
+  state = initalState;
+
   // This is the ref of the inner react-select component
   private select: any;
 
-  state = initalState;
-
   focus() {
     this.select.focus();
   }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.tsx b/src/sentry/static/sentry/app/views/discover/conditions/index.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.tsx
rename to src/sentry/static/sentry/app/views/discover/conditions/index.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.tsx b/src/sentry/static/sentry/app/views/discover/conditions/utils.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.tsx
rename to src/sentry/static/sentry/app/views/discover/conditions/utils.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.tsx b/src/sentry/static/sentry/app/views/discover/data.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/data.tsx
rename to src/sentry/static/sentry/app/views/discover/data.tsx
diff --git a/src/sentry/static/sentry/app/views/discover/discover.tsx b/src/sentry/static/sentry/app/views/discover/discover.tsx
new file mode 100644
index 0000000000..262e8f5278
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/discover/discover.tsx
@@ -0,0 +1,483 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+import moment from 'moment';
+
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import {getUtcDateString} from 'app/utils/dates';
+import {t, tct} from 'app/locale';
+import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
+import PageHeading from 'app/components/pageHeading';
+
+import {
+  DiscoverContainer,
+  DiscoverGlobalSelectionHeader,
+  Body,
+  BodyContent,
+  HeadingContainer,
+  Sidebar,
+  SidebarTabs,
+  SavedQueryWrapper,
+} from './styles';
+import {
+  getQueryStringFromQuery,
+  getQueryFromQueryString,
+  deleteSavedQuery,
+  updateSavedQuery,
+  queryHasChanged,
+} from './utils';
+import {isValidAggregation} from './aggregations/utils';
+import {isValidCondition} from './conditions/utils';
+import {trackQuery} from './analytics';
+import EditSavedQuery from './sidebar/editSavedQuery';
+import Intro from './intro';
+import NewQuery from './sidebar/newQuery';
+import QueryPanel from './sidebar/queryPanel';
+import Result from './result';
+import ResultLoading from './result/loading';
+import SavedQueryList from './sidebar/savedQueryList';
+import createResultManager from './resultManager';
+
+import {Organization, SavedQuery} from './types';
+
+type Props = {
+  organization: Organization;
+  location: any;
+  params: any;
+  queryBuilder: any;
+  // savedQuery is not null if it's a saved query
+  savedQuery: SavedQuery | null;
+  isEditingSavedQuery: boolean;
+  updateSavedQueryData: (q: SavedQuery) => void;
+  view: string;
+  toggleEditMode: () => void;
+  isLoading: boolean;
+  utc: boolean;
+};
+
+type State = {
+  resultManager: any;
+  data: any;
+  isFetchingQuery: boolean;
+  isEditingSavedQuery: boolean;
+  savedQueryName: string | null;
+  view: string;
+};
+
+export default class Discover extends React.Component<Props, State> {
+  static defaultProps = {
+    utc: true,
+  };
+
+  constructor(props: Props) {
+    super(props);
+    const resultManager = createResultManager(props.queryBuilder);
+    this.state = {
+      resultManager,
+      data: resultManager.getAll(),
+      isFetchingQuery: false,
+      isEditingSavedQuery: props.isEditingSavedQuery,
+      savedQueryName: null,
+      view: props.view || 'query',
+    };
+  }
+
+  componentWillReceiveProps(nextProps: Props) {
+    const {
+      queryBuilder,
+      location: {search},
+      savedQuery,
+      isEditingSavedQuery,
+      params,
+      isLoading,
+    } = nextProps;
+    const {resultManager} = this.state;
+
+    // Run query on isLoading change if there is a querystring or saved search
+    const loadingStatusChanged = isLoading !== this.props.isLoading;
+    if (loadingStatusChanged && (savedQuery || !!search)) {
+      this.runQuery();
+      return;
+    }
+
+    if (savedQuery && savedQuery !== this.props.savedQuery) {
+      this.setState({view: 'saved'});
+      this.runQuery();
+    }
+
+    if (isEditingSavedQuery !== this.props.isEditingSavedQuery) {
+      this.setState({isEditingSavedQuery});
+      return;
+    }
+
+    if (!queryHasChanged(this.props.location.search, nextProps.location.search)) {
+      return;
+    }
+
+    const newQuery = getQueryFromQueryString(search);
+    // Clear data only if location.search is empty (reset has been called)
+    if (!search && !params.savedQueryId) {
+      queryBuilder.reset(newQuery);
+      resultManager.reset();
+      this.setState({
+        data: resultManager.getAll(),
+      });
+    } else if (search) {
+      // This indicates navigation changes (e.g. back button on browser)
+      // We need to update our search store and probably runQuery
+      const {projects, range, start, end, utc} = newQuery;
+
+      if (projects) {
+        this.updateProjects(projects);
+      }
+
+      this.updateDateTime({
+        period: range || null,
+        start: start || null,
+        end: end || null,
+        utc: typeof utc !== 'undefined' ? utc : null,
+      });
+
+      // These props come from URL string, so will always be in UTC
+      updateDateTime({
+        start: (start && new Date(moment.utc(start).local() as any)) || null,
+        end: (end && new Date(moment.utc(end).local() as any)) || null,
+        period: range || null,
+        utc: typeof utc !== 'undefined' ? utc : null,
+      });
+
+      this.runQuery();
+    }
+  }
+
+  updateProjects = (val: number[]): void => {
+    this.updateField('projects', val);
+    updateProjects(val);
+  };
+
+  getDateTimeFields = ({
+    period,
+    start,
+    end,
+    utc,
+  }: {
+    period: string;
+    start: string;
+    end: string;
+    utc: boolean;
+  }) => ({
+    range: period || null,
+    utc: typeof utc !== 'undefined' ? utc : null,
+    start: (start && getUtcDateString(start)) || null,
+    end: (end && getUtcDateString(end)) || null,
+  });
+
+  changeTime = (datetime: any) => {
+    this.updateFields(this.getDateTimeFields(datetime));
+  };
+
+  updateDateTime = (datetime: any) => {
+    const {start, end, range, utc} = this.getDateTimeFields(datetime);
+
+    updateDateTime({
+      start,
+      end,
+      period: range,
+      utc,
+    });
+    this.updateFields({start, end, range, utc});
+  };
+
+  // Called when global selection header changes dates
+  updateDateTimeAndRun = (datetime: any) => {
+    this.updateDateTime(datetime);
+    this.runQuery();
+  };
+
+  updateField = (field: string, value: any) => {
+    this.props.queryBuilder.updateField(field, value);
+    this.forceUpdate();
+  };
+
+  updateFields = (query: any) => {
+    Object.entries(query).forEach(([field, value]) => {
+      this.updateField(field, value);
+    });
+  };
+
+  updateAndRunQuery = (query: any) => {
+    this.updateFields(query);
+    this.runQuery();
+  };
+
+  runQuery = () => {
+    const {queryBuilder, organization, location} = this.props;
+    const {resultManager} = this.state;
+
+    // Track query for analytics
+    trackQuery(organization, queryBuilder.getExternal());
+
+    // Strip any invalid conditions and aggregations
+    const {conditions, aggregations} = queryBuilder.getInternal();
+    const filteredConditions = conditions.filter((condition: [any, any, any]) =>
+      isValidCondition(condition, queryBuilder.getColumns())
+    );
+
+    const filteredAggregations = aggregations.filter((aggregation: [any, any, any]) =>
+      isValidAggregation(aggregation, queryBuilder.getColumns())
+    );
+
+    if (filteredConditions.length !== conditions.length) {
+      this.updateField('conditions', filteredConditions);
+    }
+
+    if (filteredAggregations.length !== aggregations.length) {
+      this.updateField('aggregations', filteredAggregations);
+    }
+
+    this.setState({isFetchingQuery: true});
+
+    resultManager
+      .fetchAll()
+      .then((data: any) => {
+        const shouldRedirect = !this.props.params.savedQueryId;
+
+        if (shouldRedirect) {
+          browserHistory.push({
+            pathname: `/organizations/${organization.slug}/discover/`,
+            // This is kind of a hack, but this causes a re-render in result where this.props === nextProps after
+            // a query has completed... we don't preserve `state` when we update browser history, so
+            // if this is present in `Result.shouldComponentUpdate` then should perform a render
+            state: 'fetching',
+            // Don't drop "visualization" from querystring
+            search: getQueryStringFromQuery(queryBuilder.getInternal(), {
+              ...(location.query.visualization && {
+                visualization: location.query.visualization,
+              }),
+            }),
+          });
+        }
+
+        this.setState({
+          data,
+          isFetchingQuery: false,
+        });
+      })
+      .catch((err: any) => {
+        const message = (err && err.message) || t('An error occurred');
+        addErrorMessage(message);
+        this.setState({isFetchingQuery: false});
+      });
+  };
+
+  onFetchPage = (nextOrPrev: string) => {
+    this.setState({isFetchingQuery: true});
+    return this.state.resultManager
+      .fetchPage(nextOrPrev)
+      .then((data: any) => {
+        this.setState({data, isFetchingQuery: false});
+      })
+      .catch((err: any) => {
+        const message = (err && err.message) || t('An error occurred');
+        addErrorMessage(message);
+        this.setState({isFetchingQuery: false});
+      });
+  };
+
+  toggleSidebar = (view: string) => {
+    if (view !== this.state.view) {
+      this.setState({view});
+      browserHistory.replace({
+        pathname: `/organizations/${this.props.organization.slug}/discover/`,
+        query: {...this.props.location.query, view},
+      });
+    }
+  };
+
+  loadSavedQueries = () => {
+    browserHistory.push({
+      pathname: `/organizations/${this.props.organization.slug}/discover/`,
+      query: {view: 'saved'},
+    });
+  };
+
+  reset = () => {
+    const {savedQuery, queryBuilder, organization} = this.props;
+    if (savedQuery) {
+      queryBuilder.reset(savedQuery);
+      this.setState({
+        isEditingSavedQuery: false,
+      });
+    } else {
+      browserHistory.push({
+        pathname: `/organizations/${organization.slug}/discover/`,
+      });
+    }
+  };
+
+  deleteSavedQuery = () => {
+    const {organization, savedQuery} = this.props;
+    const {resultManager} = this.state;
+
+    deleteSavedQuery(organization, savedQuery!.id)
+      .then(() => {
+        addSuccessMessage(
+          tct('Successfully deleted query [name]', {
+            name: savedQuery!.name,
+          })
+        );
+        resultManager.reset();
+        this.loadSavedQueries();
+      })
+      .catch(() => {
+        addErrorMessage(t('Could not delete query'));
+        this.setState({isFetchingQuery: false});
+      });
+  };
+
+  updateSavedQuery = (name: string) => {
+    const {queryBuilder, savedQuery, organization, toggleEditMode} = this.props;
+    const query = queryBuilder.getInternal();
+
+    const data = {...query, name};
+
+    updateSavedQuery(organization, savedQuery!.id, data)
+      .then((resp: SavedQuery) => {
+        addSuccessMessage(t('Updated query'));
+        toggleEditMode(); // Return to read-only mode
+        this.props.updateSavedQueryData(resp);
+      })
+      .catch(() => {
+        addErrorMessage(t('Could not update query'));
+      });
+  };
+
+  renderSidebarNav() {
+    const {view} = this.state;
+    const views = [
+      {id: 'query', title: t('New query')},
+      {id: 'saved', title: t('Saved queries')},
+    ];
+
+    return (
+      <React.Fragment>
+        <SidebarTabs underlined={true}>
+          {views.map(({id, title}) => (
+            <li key={id} className={view === id ? 'active' : ''}>
+              <a onClick={() => this.toggleSidebar(id)}>{title}</a>
+            </li>
+          ))}
+        </SidebarTabs>
+      </React.Fragment>
+    );
+  }
+
+  render() {
+    const {data, isFetchingQuery, view, resultManager, isEditingSavedQuery} = this.state;
+
+    const {
+      queryBuilder,
+      organization,
+      savedQuery,
+      toggleEditMode,
+      isLoading,
+      location,
+      utc,
+    } = this.props;
+
+    const currentQuery = queryBuilder.getInternal();
+
+    const shouldDisplayResult = resultManager.shouldDisplayResult();
+
+    const start =
+      (currentQuery.start &&
+        moment(currentQuery.start)
+          .local()
+          .toDate()) ||
+      currentQuery.start;
+    const end =
+      (currentQuery.end &&
+        moment(currentQuery.end)
+          .local()
+          .toDate()) ||
+      currentQuery.end;
+
+    return (
+      <DiscoverContainer>
+        <Sidebar>
+          {this.renderSidebarNav()}
+          {view === 'saved' && (
+            <SavedQueryWrapper>
+              <SavedQueryList organization={organization} savedQuery={savedQuery} />
+            </SavedQueryWrapper>
+          )}
+          {view === 'query' && (
+            <NewQuery
+              organization={organization}
+              queryBuilder={queryBuilder}
+              isFetchingQuery={isFetchingQuery || isLoading}
+              onUpdateField={this.updateField}
+              onRunQuery={this.runQuery}
+              onReset={this.reset}
+              isLoading={isLoading}
+            />
+          )}
+          {isEditingSavedQuery && savedQuery && (
+            <QueryPanel title={t('Edit Query')} onClose={toggleEditMode}>
+              <EditSavedQuery
+                savedQuery={savedQuery}
+                queryBuilder={queryBuilder}
+                isFetchingQuery={isFetchingQuery}
+                onUpdateField={this.updateField}
+                onRunQuery={this.runQuery}
+                onDeleteQuery={this.deleteSavedQuery}
+                onSaveQuery={this.updateSavedQuery}
+                isLoading={isLoading}
+              />
+            </QueryPanel>
+          )}
+        </Sidebar>
+
+        <DiscoverGlobalSelectionHeader
+          organization={organization}
+          projects={currentQuery.projects}
+          hasCustomRouting={true}
+          relative={currentQuery.range}
+          start={start}
+          end={end}
+          utc={utc}
+          showEnvironmentSelector={false}
+          onChangeProjects={this.updateProjects}
+          onUpdateProjects={this.runQuery}
+          onChangeTime={this.changeTime}
+          onUpdateTime={this.updateDateTimeAndRun}
+        />
+
+        <Body>
+          <BodyContent>
+            {shouldDisplayResult && (
+              <Result
+                location={location}
+                utc={utc}
+                data={data}
+                savedQuery={savedQuery}
+                onToggleEdit={toggleEditMode}
+                onFetchPage={this.onFetchPage}
+              />
+            )}
+            {!shouldDisplayResult && (
+              <React.Fragment>
+                <div>
+                  <HeadingContainer>
+                    <PageHeading>{t('Discover')}</PageHeading>
+                  </HeadingContainer>
+                </div>
+                <Intro updateQuery={this.updateAndRunQuery} />
+              </React.Fragment>
+            )}
+            {isFetchingQuery && <ResultLoading />}
+          </BodyContent>
+        </Body>
+      </DiscoverContainer>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.tsx b/src/sentry/static/sentry/app/views/discover/index.tsx
similarity index 96%
rename from src/sentry/static/sentry/app/views/organizationDiscover/index.tsx
rename to src/sentry/static/sentry/app/views/discover/index.tsx
index c16db08020..b9b0786f5a 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.tsx
+++ b/src/sentry/static/sentry/app/views/discover/index.tsx
@@ -38,7 +38,7 @@ type State = {
   view: string;
 };
 
-class OrganizationDiscoverContainer extends React.Component<Props, State> {
+class DiscoverContainer extends React.Component<Props, State> {
   private queryBuilder: any;
 
   constructor(props: Props) {
@@ -218,5 +218,5 @@ class OrganizationDiscoverContainer extends React.Component<Props, State> {
   }
 }
 
-export default withGlobalSelection(withOrganization(OrganizationDiscoverContainer));
-export {OrganizationDiscoverContainer};
+export default withGlobalSelection(withOrganization(DiscoverContainer));
+export {DiscoverContainer};
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/intro.tsx b/src/sentry/static/sentry/app/views/discover/intro.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/intro.tsx
rename to src/sentry/static/sentry/app/views/discover/intro.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.tsx b/src/sentry/static/sentry/app/views/discover/missingProjectWarningModal.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.tsx
rename to src/sentry/static/sentry/app/views/discover/missingProjectWarningModal.tsx
diff --git a/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx b/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
new file mode 100644
index 0000000000..f982546fa2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
@@ -0,0 +1,373 @@
+import React from 'react';
+import {uniq, partition} from 'lodash';
+import moment from 'moment-timezone';
+
+import {Client} from 'app/api';
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
+import {t} from 'app/locale';
+
+import {openModal} from 'app/actionCreators/modal';
+import ConfigStore from 'app/stores/configStore';
+
+import MissingProjectWarningModal from './missingProjectWarningModal';
+import {COLUMNS, PROMOTED_TAGS, SPECIAL_TAGS, HIDDEN_TAGS} from './data';
+import {isValidAggregation} from './aggregations/utils';
+import {Aggregation, Column, Query, Project, Organization, SnubaResult} from './types';
+
+const API_LIMIT = 10000;
+
+const DEFAULTS = {
+  projects: [],
+  fields: ['id', 'issue.id', 'project.name', 'platform', 'timestamp'],
+  conditions: [],
+  aggregations: [],
+  orderby: '-timestamp',
+  limit: 1000,
+};
+
+function applyDefaults(query: any) {
+  Object.entries(DEFAULTS).forEach(([key, value]) => {
+    if (!(key in query)) {
+      query[key] = value;
+    }
+  });
+  return query;
+}
+
+export interface QueryBuilder {
+  load(): void;
+  getInternal: () => any;
+  getExternal: () => any;
+  updateField: (field: string, value: any) => void;
+  fetch: (data?: any, cursor?: string) => Promise<any>;
+  fetchWithoutLimit: (data?: any) => Promise<any>;
+  cancelRequests(): void;
+  getQueryByType(originalQuery: any, type: string): Query;
+  getColumns(): Column[];
+  reset(q: any): void;
+}
+
+/**
+ * This function is responsible for storing and managing updates to query state,
+ * It applies sensible defaults if query parameters are not provided on
+ * initialization.
+ */
+export default function createQueryBuilder(
+  initial = {},
+  organization: Organization
+): QueryBuilder {
+  const api = new Client();
+  let query = applyDefaults(initial);
+
+  if (!query.start && !query.end && !query.range) {
+    query.range = DEFAULT_STATS_PERIOD;
+  }
+
+  const defaultProjects = organization.projects.filter(projects => projects.isMember);
+
+  const defaultProjectIds = getProjectIds(defaultProjects);
+
+  const hasGlobalProjectAccess =
+    ConfigStore.get('user').isSuperuser || organization.access.includes('org:admin');
+
+  const projectsToFetchTags = getProjectIds(
+    hasGlobalProjectAccess ? organization.projects : defaultProjects
+  );
+
+  const columns = COLUMNS.map(col => ({...col, isTag: false}));
+  let tags: Column[] = [];
+
+  return {
+    getInternal,
+    getExternal,
+    updateField,
+    fetch,
+    fetchWithoutLimit,
+    cancelRequests,
+    getQueryByType,
+    getColumns,
+    load,
+    reset,
+  };
+
+  /**
+   * Loads tags keys for user's projects and updates `tags` with the result.
+   * If the request fails updates `tags` to be the hardcoded list of predefined
+   * promoted tags.
+   *
+   * @returns {Promise<Void>}
+   */
+  function load() {
+    type TagData = {
+      tags_key: string;
+    };
+
+    return fetch({
+      projects: projectsToFetchTags,
+      fields: ['tags_key'],
+      aggregations: [['count()', null, 'count']],
+      orderby: '-count',
+      range: '90d',
+      turbo: true,
+    })
+      .then((res: SnubaResult) => {
+        tags = res.data
+          .filter((tag: TagData) => !HIDDEN_TAGS.includes(tag.tags_key))
+          .map((tag: TagData) => {
+            const type = SPECIAL_TAGS[tag.tags_key] || 'string';
+            return {name: tag.tags_key, type, isTag: true};
+          });
+      })
+      .catch(() => {
+        tags = PROMOTED_TAGS.map((tag: string) => {
+          const type = SPECIAL_TAGS[tag] || 'string';
+          return {name: tag, type, isTag: true};
+        });
+      });
+  }
+
+  /**
+   * Returns the query object (internal state of the query)
+   *
+   * @returns {Object}
+   */
+  function getInternal() {
+    return query;
+  }
+
+  /**
+   * Returns the external representation of the query as required by Snuba.
+   * Applies default projects and fields if these properties were not specified
+   * by the user.
+   *
+   * @returns {Object}
+   */
+  function getExternal() {
+    // Default to all projects if none is selected
+    const projects = query.projects.length ? query.projects : defaultProjectIds;
+
+    // Default to DEFAULT_STATS_PERIOD when no date range selected (either relative or absolute)
+    const {range, start, end} = query;
+    const hasAbsolute = start && end;
+    const daterange = {
+      ...(hasAbsolute && {start, end}),
+      ...(range ? {range} : !hasAbsolute && {range: DEFAULT_STATS_PERIOD}),
+    };
+
+    // Default to all fields if there are none selected, and no aggregation is
+    // specified
+    const useDefaultFields = !query.fields.length && !query.aggregations.length;
+
+    const fields = useDefaultFields ? getColumns().map(({name}) => name) : query.fields;
+
+    // Remove orderby property if it is not set
+    if (!query.orderby) {
+      delete query.orderby;
+    }
+
+    return {
+      ...query,
+      ...daterange,
+      projects,
+      fields,
+    };
+  }
+
+  /**
+   * Updates field in query to value provided. Also updates orderby and limit
+   * parameters if this causes their values to become invalid.
+   *
+   * @param {String} field Name of field to be updated
+   * @param {*} value Value to update field to
+   * @returns {Void}
+   */
+  function updateField(field: string, value: any) {
+    query[field] = value;
+
+    // Ignore non valid aggregations (e.g. user halfway inputting data)
+    const validAggregations = query.aggregations.filter((agg: Aggregation) =>
+      isValidAggregation(agg, getColumns())
+    );
+
+    const orderbyField = (query.orderby || '').replace(/^-/, '');
+    const hasOrderFieldInFields =
+      getColumns().find(f => f.name === orderbyField) !== undefined;
+    const hasOrderFieldInSelectedFields = query.fields.includes(orderbyField);
+    const hasOrderFieldInAggregations = query.aggregations.some(
+      (agg: Aggregation) => orderbyField === agg[2]
+    );
+
+    const hasInvalidOrderbyField = validAggregations.length
+      ? !hasOrderFieldInSelectedFields && !hasOrderFieldInAggregations
+      : !hasOrderFieldInFields;
+
+    // If orderby value becomes invalid, update it to the first valid aggregation
+    if (hasInvalidOrderbyField) {
+      if (validAggregations.length > 0) {
+        query.orderby = `-${validAggregations[0][2]}`;
+      } else {
+        query.orderby = '-timestamp';
+      }
+    }
+
+    // Snuba doesn't allow limit without orderby
+    if (!query.orderby) {
+      query.limit = null;
+    }
+  }
+
+  /**
+   * Fetches either the query provided as an argument or the current query state
+   * if this is not provided and returns the result wrapped in a promise
+   *
+   * @param {Object} [data] Optional field to provide data to fetch
+   * @returns {Promise<Object|Error>}
+   */
+  function fetch(data = getExternal(), cursor = '0:0:1') {
+    const limit = data.limit || 1000;
+    const endpoint = `/organizations/${
+      organization.slug
+    }/discover/query/?per_page=${limit}&cursor=${cursor}`;
+
+    // Reject immediately if no projects are available
+    if (!data.projects.length) {
+      return Promise.reject(new Error(t('No projects selected')));
+    }
+
+    if (typeof data.limit === 'number') {
+      if (data.limit < 1 || data.limit > 1000) {
+        return Promise.reject(new Error(t('Invalid limit parameter')));
+      }
+    }
+
+    if (moment.utc(data.start).isAfter(moment.utc(data.end))) {
+      return Promise.reject(new Error('Start date cannot be after end date'));
+    }
+
+    return api
+      .requestPromise(endpoint, {includeAllArgs: true, method: 'POST', data} as any)
+      .then(([responseData, _, utils]) => {
+        responseData.pageLinks = utils.getResponseHeader('Link');
+        return responseData;
+      })
+      .catch(() => {
+        throw new Error(t('An error occurred'));
+      });
+  }
+
+  /**
+   * Fetches either the query provided as an argument or the current query state
+   * if this is not provided and returns the result wrapped in a promise
+   *
+   * This is similar to `fetch` but does not support pagination and mirrors the API limit
+   *
+   * @param {Object} [data] Optional field to provide data to fetch
+   * @returns {Promise<Object|Error>}
+   */
+  function fetchWithoutLimit(data = getExternal()) {
+    const endpoint = `/organizations/${organization.slug}/discover/query/`;
+
+    // Reject immediately if no projects are available
+    if (!data.projects.length) {
+      return Promise.reject(new Error(t('No projects selected')));
+    }
+
+    if (typeof data.limit === 'number') {
+      if (data.limit < 1 || data.limit > API_LIMIT) {
+        return Promise.reject(new Error(t('Invalid limit parameter')));
+      }
+    }
+
+    if (moment.utc(data.start).isAfter(moment.utc(data.end))) {
+      return Promise.reject(new Error('Start date cannot be after end date'));
+    }
+
+    return api.requestPromise(endpoint, {method: 'POST', data} as any).catch(() => {
+      throw new Error(t('Error with query'));
+    });
+  }
+
+  /**
+   * Cancels any in-flight API requests made via `fetch` or `fetchWithoutLimit`
+   *
+   * @returns {Void}
+   */
+  function cancelRequests() {
+    api.clear();
+  }
+
+  /**
+   * Get the actual query to be run for each visualization type
+   *
+   * @param {Object} originalQuery Original query input by user (external query representation)
+   * @param {String} Type to fetch - currently either byDay or base
+   * @returns {Object} Modified query to be run for that type
+   */
+  function getQueryByType(originalQuery: any, type: string): Query {
+    if (type === 'byDayQuery') {
+      return {
+        ...originalQuery,
+        groupby: ['time'],
+        rollup: 60 * 60 * 24,
+        orderby: '-time',
+        limit: 5000,
+      };
+    }
+
+    // If id or issue.id is present in query fields, always fetch the project.id
+    // so we can generate links
+    if (type === 'baseQuery') {
+      return (originalQuery.fields || []).some(
+        (field: string) => field === 'id' || field === 'issue.id'
+      )
+        ? {
+            ...originalQuery,
+            fields: uniq([...originalQuery.fields, 'project.id']),
+          }
+        : originalQuery;
+    }
+
+    throw new Error('Invalid query type');
+  }
+
+  /**
+   * Returns all column objects, including tags
+   *
+   * @returns {Array<{name: String, type: String}>}
+   */
+  function getColumns() {
+    return [...columns, ...tags];
+  }
+
+  /**
+   * Resets the query to defaults or the query provided
+   * Displays a warning if user does not have access to any project in the query
+   *
+   * @param {Object} [q] optional query to reset to
+   * @returns {Void}
+   */
+  function reset(q: any) {
+    const [validProjects, invalidProjects] = partition(q.projects || [], project =>
+      defaultProjectIds.includes(project)
+    );
+
+    if (invalidProjects.length) {
+      openModal((deps: any) => (
+        <MissingProjectWarningModal
+          organization={organization}
+          validProjects={validProjects}
+          invalidProjects={invalidProjects}
+          {...deps}
+        />
+      ));
+    }
+
+    q.projects = validProjects;
+
+    query = applyDefaults(q);
+  }
+}
+
+function getProjectIds(projects: Project[]) {
+  return projects.map(project => parseInt(project.id, 10));
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.tsx b/src/sentry/static/sentry/app/views/discover/result/index.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/index.tsx
rename to src/sentry/static/sentry/app/views/discover/result/index.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/loading.tsx b/src/sentry/static/sentry/app/views/discover/result/loading.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/loading.tsx
rename to src/sentry/static/sentry/app/views/discover/result/loading.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.tsx b/src/sentry/static/sentry/app/views/discover/result/pagination.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.tsx
rename to src/sentry/static/sentry/app/views/discover/result/pagination.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.tsx b/src/sentry/static/sentry/app/views/discover/result/table.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/table.tsx
rename to src/sentry/static/sentry/app/views/discover/result/table.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.tsx b/src/sentry/static/sentry/app/views/discover/result/utils.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/utils.tsx
rename to src/sentry/static/sentry/app/views/discover/result/utils.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.tsx b/src/sentry/static/sentry/app/views/discover/result/visualizationsToggle.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.tsx
rename to src/sentry/static/sentry/app/views/discover/result/visualizationsToggle.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.tsx b/src/sentry/static/sentry/app/views/discover/resultManager.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/resultManager.tsx
rename to src/sentry/static/sentry/app/views/discover/resultManager.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/editSavedQuery.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/editSavedQuery.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/editSavedQuery.tsx
rename to src/sentry/static/sentry/app/views/discover/sidebar/editSavedQuery.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/newQuery.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.tsx
rename to src/sentry/static/sentry/app/views/discover/sidebar/newQuery.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/orderby.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.tsx
rename to src/sentry/static/sentry/app/views/discover/sidebar/orderby.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/queryFields.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.tsx
rename to src/sentry/static/sentry/app/views/discover/sidebar/queryFields.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryPanel.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/queryPanel.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryPanel.tsx
rename to src/sentry/static/sentry/app/views/discover/sidebar/queryPanel.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.tsx
rename to src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.tsx b/src/sentry/static/sentry/app/views/discover/styles.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/styles.tsx
rename to src/sentry/static/sentry/app/views/discover/styles.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/types.tsx b/src/sentry/static/sentry/app/views/discover/types.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/types.tsx
rename to src/sentry/static/sentry/app/views/discover/types.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.tsx b/src/sentry/static/sentry/app/views/discover/utils.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/utils.tsx
rename to src/sentry/static/sentry/app/views/discover/utils.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx
index 31803ae4ae..7303d5fdc2 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx
@@ -1,4 +1,4 @@
-import {OPERATOR} from 'app/views/organizationDiscover/data';
+import {OPERATOR} from 'app/views/discover/data';
 import {t} from 'app/locale';
 
 /**
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
index e4ca331503..f17da69391 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
@@ -1,7 +1,7 @@
 /**
  * Known affected users
  */
-import {OPERATOR} from 'app/views/organizationDiscover/data';
+import {OPERATOR} from 'app/views/discover/data';
 import {t} from 'app/locale';
 
 const knownUsersAffectedQuery = {
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
index b6c5208b4d..2b23f2dbaf 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
@@ -7,7 +7,7 @@ import {getInterval} from 'app/components/charts/utils';
 import {getPeriod} from 'app/utils/getPeriod';
 import {parsePeriodToHours} from 'app/utils/dates';
 import SentryTypes from 'app/sentryTypes';
-import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+import createQueryBuilder from 'app/views/discover/queryBuilder';
 
 // Note: Limit max releases so that chart is still a bit readable
 const MAX_RECENT_RELEASES = 20;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartDataFunc.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartDataFunc.jsx
index 7934ce3845..db950ddf88 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartDataFunc.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getChartDataFunc.jsx
@@ -1,8 +1,5 @@
 import {WIDGET_DISPLAY} from 'app/views/organizationDashboard/constants';
-import {
-  getChartDataForWidget,
-  getChartDataByDay,
-} from 'app/views/organizationDiscover/result/utils';
+import {getChartDataForWidget, getChartDataByDay} from 'app/views/discover/result/utils';
 import {isTimeSeries} from 'app/views/organizationDashboard/utils/isTimeSeries';
 
 /**
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx
index fc5e28bc6c..bd1e4306d0 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx
@@ -2,7 +2,7 @@ import {
   NEGATION_OPERATORS,
   NULL_OPERATORS,
   WILDCARD_OPERATORS,
-} from 'app/views/organizationDiscover/data';
+} from 'app/views/discover/data';
 import {defined} from 'app/utils';
 
 const checkIsNegation = operator => NEGATION_OPERATORS.includes(operator);
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverUrlPathFromDiscoverQuery.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
index 87f5aa5004..b6ccca054e 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
@@ -1,8 +1,5 @@
-import {
-  getExternal,
-  getInternal,
-} from 'app/views/organizationDiscover/aggregations/utils';
-import {getQueryStringFromQuery} from 'app/views/organizationDiscover/utils';
+import {getExternal, getInternal} from 'app/views/discover/aggregations/utils';
+import {getQueryStringFromQuery} from 'app/views/discover/utils';
 
 export function getDiscoverUrlPathFromDiscoverQuery({organization, selection, query}) {
   const {
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getEventsUrlFromDiscoverQueryWithConditions.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getEventsUrlFromDiscoverQueryWithConditions.jsx
index ce11366fa7..6805c6c49f 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getEventsUrlFromDiscoverQueryWithConditions.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getEventsUrlFromDiscoverQueryWithConditions.jsx
@@ -9,7 +9,7 @@
  */
 import {zipWith} from 'lodash';
 
-import {OPERATOR} from 'app/views/organizationDiscover/data';
+import {OPERATOR} from 'app/views/discover/data';
 import {escapeQuotes} from 'app/components/events/interfaces/utils';
 import {getEventsUrlPathFromDiscoverQuery} from 'app/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery';
 
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.tsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.tsx
index 7e4fd0d247..fd4930a6c2 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.tsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.tsx
@@ -1,483 +1,4 @@
-import {browserHistory} from 'react-router';
-import React from 'react';
-import moment from 'moment';
+// Temporary re-export shim for getsentry
+import Discover from 'app/views/discover/discover';
 
-import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import {getUtcDateString} from 'app/utils/dates';
-import {t, tct} from 'app/locale';
-import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
-import PageHeading from 'app/components/pageHeading';
-
-import {
-  DiscoverContainer,
-  DiscoverGlobalSelectionHeader,
-  Body,
-  BodyContent,
-  HeadingContainer,
-  Sidebar,
-  SidebarTabs,
-  SavedQueryWrapper,
-} from './styles';
-import {
-  getQueryStringFromQuery,
-  getQueryFromQueryString,
-  deleteSavedQuery,
-  updateSavedQuery,
-  queryHasChanged,
-} from './utils';
-import {isValidAggregation} from './aggregations/utils';
-import {isValidCondition} from './conditions/utils';
-import {trackQuery} from './analytics';
-import EditSavedQuery from './sidebar/editSavedQuery';
-import Intro from './intro';
-import NewQuery from './sidebar/newQuery';
-import QueryPanel from './sidebar/queryPanel';
-import Result from './result';
-import ResultLoading from './result/loading';
-import SavedQueryList from './sidebar/savedQueryList';
-import createResultManager from './resultManager';
-
-import {Organization, SavedQuery} from './types';
-
-type Props = {
-  organization: Organization;
-  location: any;
-  params: any;
-  queryBuilder: any;
-  // savedQuery is not null if it's a saved query
-  savedQuery: SavedQuery | null;
-  isEditingSavedQuery: boolean;
-  updateSavedQueryData: (q: SavedQuery) => void;
-  view: string;
-  toggleEditMode: () => void;
-  isLoading: boolean;
-  utc: boolean;
-};
-
-type State = {
-  resultManager: any;
-  data: any;
-  isFetchingQuery: boolean;
-  isEditingSavedQuery: boolean;
-  savedQueryName: string | null;
-  view: string;
-};
-
-export default class OrganizationDiscover extends React.Component<Props, State> {
-  static defaultProps = {
-    utc: true,
-  };
-
-  constructor(props: Props) {
-    super(props);
-    const resultManager = createResultManager(props.queryBuilder);
-    this.state = {
-      resultManager,
-      data: resultManager.getAll(),
-      isFetchingQuery: false,
-      isEditingSavedQuery: props.isEditingSavedQuery,
-      savedQueryName: null,
-      view: props.view || 'query',
-    };
-  }
-
-  componentWillReceiveProps(nextProps: Props) {
-    const {
-      queryBuilder,
-      location: {search},
-      savedQuery,
-      isEditingSavedQuery,
-      params,
-      isLoading,
-    } = nextProps;
-    const {resultManager} = this.state;
-
-    // Run query on isLoading change if there is a querystring or saved search
-    const loadingStatusChanged = isLoading !== this.props.isLoading;
-    if (loadingStatusChanged && (savedQuery || !!search)) {
-      this.runQuery();
-      return;
-    }
-
-    if (savedQuery && savedQuery !== this.props.savedQuery) {
-      this.setState({view: 'saved'});
-      this.runQuery();
-    }
-
-    if (isEditingSavedQuery !== this.props.isEditingSavedQuery) {
-      this.setState({isEditingSavedQuery});
-      return;
-    }
-
-    if (!queryHasChanged(this.props.location.search, nextProps.location.search)) {
-      return;
-    }
-
-    const newQuery = getQueryFromQueryString(search);
-    // Clear data only if location.search is empty (reset has been called)
-    if (!search && !params.savedQueryId) {
-      queryBuilder.reset(newQuery);
-      resultManager.reset();
-      this.setState({
-        data: resultManager.getAll(),
-      });
-    } else if (search) {
-      // This indicates navigation changes (e.g. back button on browser)
-      // We need to update our search store and probably runQuery
-      const {projects, range, start, end, utc} = newQuery;
-
-      if (projects) {
-        this.updateProjects(projects);
-      }
-
-      this.updateDateTime({
-        period: range || null,
-        start: start || null,
-        end: end || null,
-        utc: typeof utc !== 'undefined' ? utc : null,
-      });
-
-      // These props come from URL string, so will always be in UTC
-      updateDateTime({
-        start: (start && new Date(moment.utc(start).local() as any)) || null,
-        end: (end && new Date(moment.utc(end).local() as any)) || null,
-        period: range || null,
-        utc: typeof utc !== 'undefined' ? utc : null,
-      });
-
-      this.runQuery();
-    }
-  }
-
-  updateProjects = (val: number[]): void => {
-    this.updateField('projects', val);
-    updateProjects(val);
-  };
-
-  getDateTimeFields = ({
-    period,
-    start,
-    end,
-    utc,
-  }: {
-    period: string;
-    start: string;
-    end: string;
-    utc: boolean;
-  }) => ({
-    range: period || null,
-    utc: typeof utc !== 'undefined' ? utc : null,
-    start: (start && getUtcDateString(start)) || null,
-    end: (end && getUtcDateString(end)) || null,
-  });
-
-  changeTime = (datetime: any) => {
-    this.updateFields(this.getDateTimeFields(datetime));
-  };
-
-  updateDateTime = (datetime: any) => {
-    const {start, end, range, utc} = this.getDateTimeFields(datetime);
-
-    updateDateTime({
-      start,
-      end,
-      period: range,
-      utc,
-    });
-    this.updateFields({start, end, range, utc});
-  };
-
-  // Called when global selection header changes dates
-  updateDateTimeAndRun = (datetime: any) => {
-    this.updateDateTime(datetime);
-    this.runQuery();
-  };
-
-  updateField = (field: string, value: any) => {
-    this.props.queryBuilder.updateField(field, value);
-    this.forceUpdate();
-  };
-
-  updateFields = (query: any) => {
-    Object.entries(query).forEach(([field, value]) => {
-      this.updateField(field, value);
-    });
-  };
-
-  updateAndRunQuery = (query: any) => {
-    this.updateFields(query);
-    this.runQuery();
-  };
-
-  runQuery = () => {
-    const {queryBuilder, organization, location} = this.props;
-    const {resultManager} = this.state;
-
-    // Track query for analytics
-    trackQuery(organization, queryBuilder.getExternal());
-
-    // Strip any invalid conditions and aggregations
-    const {conditions, aggregations} = queryBuilder.getInternal();
-    const filteredConditions = conditions.filter((condition: [any, any, any]) =>
-      isValidCondition(condition, queryBuilder.getColumns())
-    );
-
-    const filteredAggregations = aggregations.filter((aggregation: [any, any, any]) =>
-      isValidAggregation(aggregation, queryBuilder.getColumns())
-    );
-
-    if (filteredConditions.length !== conditions.length) {
-      this.updateField('conditions', filteredConditions);
-    }
-
-    if (filteredAggregations.length !== aggregations.length) {
-      this.updateField('aggregations', filteredAggregations);
-    }
-
-    this.setState({isFetchingQuery: true});
-
-    resultManager
-      .fetchAll()
-      .then((data: any) => {
-        const shouldRedirect = !this.props.params.savedQueryId;
-
-        if (shouldRedirect) {
-          browserHistory.push({
-            pathname: `/organizations/${organization.slug}/discover/`,
-            // This is kind of a hack, but this causes a re-render in result where this.props === nextProps after
-            // a query has completed... we don't preserve `state` when we update browser history, so
-            // if this is present in `Result.shouldComponentUpdate` then should perform a render
-            state: 'fetching',
-            // Don't drop "visualization" from querystring
-            search: getQueryStringFromQuery(queryBuilder.getInternal(), {
-              ...(location.query.visualization && {
-                visualization: location.query.visualization,
-              }),
-            }),
-          });
-        }
-
-        this.setState({
-          data,
-          isFetchingQuery: false,
-        });
-      })
-      .catch((err: any) => {
-        const message = (err && err.message) || t('An error occurred');
-        addErrorMessage(message);
-        this.setState({isFetchingQuery: false});
-      });
-  };
-
-  onFetchPage = (nextOrPrev: string) => {
-    this.setState({isFetchingQuery: true});
-    return this.state.resultManager
-      .fetchPage(nextOrPrev)
-      .then((data: any) => {
-        this.setState({data, isFetchingQuery: false});
-      })
-      .catch((err: any) => {
-        const message = (err && err.message) || t('An error occurred');
-        addErrorMessage(message);
-        this.setState({isFetchingQuery: false});
-      });
-  };
-
-  toggleSidebar = (view: string) => {
-    if (view !== this.state.view) {
-      this.setState({view});
-      browserHistory.replace({
-        pathname: `/organizations/${this.props.organization.slug}/discover/`,
-        query: {...this.props.location.query, view},
-      });
-    }
-  };
-
-  loadSavedQueries = () => {
-    browserHistory.push({
-      pathname: `/organizations/${this.props.organization.slug}/discover/`,
-      query: {view: 'saved'},
-    });
-  };
-
-  reset = () => {
-    const {savedQuery, queryBuilder, organization} = this.props;
-    if (savedQuery) {
-      queryBuilder.reset(savedQuery);
-      this.setState({
-        isEditingSavedQuery: false,
-      });
-    } else {
-      browserHistory.push({
-        pathname: `/organizations/${organization.slug}/discover/`,
-      });
-    }
-  };
-
-  deleteSavedQuery = () => {
-    const {organization, savedQuery} = this.props;
-    const {resultManager} = this.state;
-
-    deleteSavedQuery(organization, savedQuery!.id)
-      .then(() => {
-        addSuccessMessage(
-          tct('Successfully deleted query [name]', {
-            name: savedQuery!.name,
-          })
-        );
-        resultManager.reset();
-        this.loadSavedQueries();
-      })
-      .catch(() => {
-        addErrorMessage(t('Could not delete query'));
-        this.setState({isFetchingQuery: false});
-      });
-  };
-
-  updateSavedQuery = (name: string) => {
-    const {queryBuilder, savedQuery, organization, toggleEditMode} = this.props;
-    const query = queryBuilder.getInternal();
-
-    const data = {...query, name};
-
-    updateSavedQuery(organization, savedQuery!.id, data)
-      .then((resp: SavedQuery) => {
-        addSuccessMessage(t('Updated query'));
-        toggleEditMode(); // Return to read-only mode
-        this.props.updateSavedQueryData(resp);
-      })
-      .catch(() => {
-        addErrorMessage(t('Could not update query'));
-      });
-  };
-
-  renderSidebarNav() {
-    const {view} = this.state;
-    const views = [
-      {id: 'query', title: t('New query')},
-      {id: 'saved', title: t('Saved queries')},
-    ];
-
-    return (
-      <React.Fragment>
-        <SidebarTabs underlined={true}>
-          {views.map(({id, title}) => (
-            <li key={id} className={view === id ? 'active' : ''}>
-              <a onClick={() => this.toggleSidebar(id)}>{title}</a>
-            </li>
-          ))}
-        </SidebarTabs>
-      </React.Fragment>
-    );
-  }
-
-  render() {
-    const {data, isFetchingQuery, view, resultManager, isEditingSavedQuery} = this.state;
-
-    const {
-      queryBuilder,
-      organization,
-      savedQuery,
-      toggleEditMode,
-      isLoading,
-      location,
-      utc,
-    } = this.props;
-
-    const currentQuery = queryBuilder.getInternal();
-
-    const shouldDisplayResult = resultManager.shouldDisplayResult();
-
-    const start =
-      (currentQuery.start &&
-        moment(currentQuery.start)
-          .local()
-          .toDate()) ||
-      currentQuery.start;
-    const end =
-      (currentQuery.end &&
-        moment(currentQuery.end)
-          .local()
-          .toDate()) ||
-      currentQuery.end;
-
-    return (
-      <DiscoverContainer>
-        <Sidebar>
-          {this.renderSidebarNav()}
-          {view === 'saved' && (
-            <SavedQueryWrapper>
-              <SavedQueryList organization={organization} savedQuery={savedQuery} />
-            </SavedQueryWrapper>
-          )}
-          {view === 'query' && (
-            <NewQuery
-              organization={organization}
-              queryBuilder={queryBuilder}
-              isFetchingQuery={isFetchingQuery || isLoading}
-              onUpdateField={this.updateField}
-              onRunQuery={this.runQuery}
-              onReset={this.reset}
-              isLoading={isLoading}
-            />
-          )}
-          {isEditingSavedQuery && savedQuery && (
-            <QueryPanel title={t('Edit Query')} onClose={toggleEditMode}>
-              <EditSavedQuery
-                savedQuery={savedQuery}
-                queryBuilder={queryBuilder}
-                isFetchingQuery={isFetchingQuery}
-                onUpdateField={this.updateField}
-                onRunQuery={this.runQuery}
-                onDeleteQuery={this.deleteSavedQuery}
-                onSaveQuery={this.updateSavedQuery}
-                isLoading={isLoading}
-              />
-            </QueryPanel>
-          )}
-        </Sidebar>
-
-        <DiscoverGlobalSelectionHeader
-          organization={organization}
-          projects={currentQuery.projects}
-          hasCustomRouting={true}
-          relative={currentQuery.range}
-          start={start}
-          end={end}
-          utc={utc}
-          showEnvironmentSelector={false}
-          onChangeProjects={this.updateProjects}
-          onUpdateProjects={this.runQuery}
-          onChangeTime={this.changeTime}
-          onUpdateTime={this.updateDateTimeAndRun}
-        />
-
-        <Body>
-          <BodyContent>
-            {shouldDisplayResult && (
-              <Result
-                location={location}
-                utc={utc}
-                data={data}
-                savedQuery={savedQuery}
-                onToggleEdit={toggleEditMode}
-                onFetchPage={this.onFetchPage}
-              />
-            )}
-            {!shouldDisplayResult && (
-              <React.Fragment>
-                <div>
-                  <HeadingContainer>
-                    <PageHeading>{t('Discover')}</PageHeading>
-                  </HeadingContainer>
-                </div>
-                <Intro updateQuery={this.updateAndRunQuery} />
-              </React.Fragment>
-            )}
-            {isFetchingQuery && <ResultLoading />}
-          </BodyContent>
-        </Body>
-      </DiscoverContainer>
-    );
-  }
-}
+export default Discover;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.tsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.tsx
index f982546fa2..395197020d 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.tsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.tsx
@@ -1,373 +1,4 @@
-import React from 'react';
-import {uniq, partition} from 'lodash';
-import moment from 'moment-timezone';
+// Temporary re-export shim for getsentry
+import createQueryBuilder from 'app/views/discover/queryBuilder';
 
-import {Client} from 'app/api';
-import {DEFAULT_STATS_PERIOD} from 'app/constants';
-import {t} from 'app/locale';
-
-import {openModal} from 'app/actionCreators/modal';
-import ConfigStore from 'app/stores/configStore';
-
-import MissingProjectWarningModal from './missingProjectWarningModal';
-import {COLUMNS, PROMOTED_TAGS, SPECIAL_TAGS, HIDDEN_TAGS} from './data';
-import {isValidAggregation} from './aggregations/utils';
-import {Aggregation, Column, Query, Project, Organization, SnubaResult} from './types';
-
-const API_LIMIT = 10000;
-
-const DEFAULTS = {
-  projects: [],
-  fields: ['id', 'issue.id', 'project.name', 'platform', 'timestamp'],
-  conditions: [],
-  aggregations: [],
-  orderby: '-timestamp',
-  limit: 1000,
-};
-
-function applyDefaults(query: any) {
-  Object.entries(DEFAULTS).forEach(([key, value]) => {
-    if (!(key in query)) {
-      query[key] = value;
-    }
-  });
-  return query;
-}
-
-export interface QueryBuilder {
-  load(): void;
-  getInternal: () => any;
-  getExternal: () => any;
-  updateField: (field: string, value: any) => void;
-  fetch: (data?: any, cursor?: string) => Promise<any>;
-  fetchWithoutLimit: (data?: any) => Promise<any>;
-  cancelRequests(): void;
-  getQueryByType(originalQuery: any, type: string): Query;
-  getColumns(): Column[];
-  reset(q: any): void;
-}
-
-/**
- * This function is responsible for storing and managing updates to query state,
- * It applies sensible defaults if query parameters are not provided on
- * initialization.
- */
-export default function createQueryBuilder(
-  initial = {},
-  organization: Organization
-): QueryBuilder {
-  const api = new Client();
-  let query = applyDefaults(initial);
-
-  if (!query.start && !query.end && !query.range) {
-    query.range = DEFAULT_STATS_PERIOD;
-  }
-
-  const defaultProjects = organization.projects.filter(projects => projects.isMember);
-
-  const defaultProjectIds = getProjectIds(defaultProjects);
-
-  const hasGlobalProjectAccess =
-    ConfigStore.get('user').isSuperuser || organization.access.includes('org:admin');
-
-  const projectsToFetchTags = getProjectIds(
-    hasGlobalProjectAccess ? organization.projects : defaultProjects
-  );
-
-  const columns = COLUMNS.map(col => ({...col, isTag: false}));
-  let tags: Column[] = [];
-
-  return {
-    getInternal,
-    getExternal,
-    updateField,
-    fetch,
-    fetchWithoutLimit,
-    cancelRequests,
-    getQueryByType,
-    getColumns,
-    load,
-    reset,
-  };
-
-  /**
-   * Loads tags keys for user's projects and updates `tags` with the result.
-   * If the request fails updates `tags` to be the hardcoded list of predefined
-   * promoted tags.
-   *
-   * @returns {Promise<Void>}
-   */
-  function load() {
-    type TagData = {
-      tags_key: string;
-    };
-
-    return fetch({
-      projects: projectsToFetchTags,
-      fields: ['tags_key'],
-      aggregations: [['count()', null, 'count']],
-      orderby: '-count',
-      range: '90d',
-      turbo: true,
-    })
-      .then((res: SnubaResult) => {
-        tags = res.data
-          .filter((tag: TagData) => !HIDDEN_TAGS.includes(tag.tags_key))
-          .map((tag: TagData) => {
-            const type = SPECIAL_TAGS[tag.tags_key] || 'string';
-            return {name: tag.tags_key, type, isTag: true};
-          });
-      })
-      .catch(() => {
-        tags = PROMOTED_TAGS.map((tag: string) => {
-          const type = SPECIAL_TAGS[tag] || 'string';
-          return {name: tag, type, isTag: true};
-        });
-      });
-  }
-
-  /**
-   * Returns the query object (internal state of the query)
-   *
-   * @returns {Object}
-   */
-  function getInternal() {
-    return query;
-  }
-
-  /**
-   * Returns the external representation of the query as required by Snuba.
-   * Applies default projects and fields if these properties were not specified
-   * by the user.
-   *
-   * @returns {Object}
-   */
-  function getExternal() {
-    // Default to all projects if none is selected
-    const projects = query.projects.length ? query.projects : defaultProjectIds;
-
-    // Default to DEFAULT_STATS_PERIOD when no date range selected (either relative or absolute)
-    const {range, start, end} = query;
-    const hasAbsolute = start && end;
-    const daterange = {
-      ...(hasAbsolute && {start, end}),
-      ...(range ? {range} : !hasAbsolute && {range: DEFAULT_STATS_PERIOD}),
-    };
-
-    // Default to all fields if there are none selected, and no aggregation is
-    // specified
-    const useDefaultFields = !query.fields.length && !query.aggregations.length;
-
-    const fields = useDefaultFields ? getColumns().map(({name}) => name) : query.fields;
-
-    // Remove orderby property if it is not set
-    if (!query.orderby) {
-      delete query.orderby;
-    }
-
-    return {
-      ...query,
-      ...daterange,
-      projects,
-      fields,
-    };
-  }
-
-  /**
-   * Updates field in query to value provided. Also updates orderby and limit
-   * parameters if this causes their values to become invalid.
-   *
-   * @param {String} field Name of field to be updated
-   * @param {*} value Value to update field to
-   * @returns {Void}
-   */
-  function updateField(field: string, value: any) {
-    query[field] = value;
-
-    // Ignore non valid aggregations (e.g. user halfway inputting data)
-    const validAggregations = query.aggregations.filter((agg: Aggregation) =>
-      isValidAggregation(agg, getColumns())
-    );
-
-    const orderbyField = (query.orderby || '').replace(/^-/, '');
-    const hasOrderFieldInFields =
-      getColumns().find(f => f.name === orderbyField) !== undefined;
-    const hasOrderFieldInSelectedFields = query.fields.includes(orderbyField);
-    const hasOrderFieldInAggregations = query.aggregations.some(
-      (agg: Aggregation) => orderbyField === agg[2]
-    );
-
-    const hasInvalidOrderbyField = validAggregations.length
-      ? !hasOrderFieldInSelectedFields && !hasOrderFieldInAggregations
-      : !hasOrderFieldInFields;
-
-    // If orderby value becomes invalid, update it to the first valid aggregation
-    if (hasInvalidOrderbyField) {
-      if (validAggregations.length > 0) {
-        query.orderby = `-${validAggregations[0][2]}`;
-      } else {
-        query.orderby = '-timestamp';
-      }
-    }
-
-    // Snuba doesn't allow limit without orderby
-    if (!query.orderby) {
-      query.limit = null;
-    }
-  }
-
-  /**
-   * Fetches either the query provided as an argument or the current query state
-   * if this is not provided and returns the result wrapped in a promise
-   *
-   * @param {Object} [data] Optional field to provide data to fetch
-   * @returns {Promise<Object|Error>}
-   */
-  function fetch(data = getExternal(), cursor = '0:0:1') {
-    const limit = data.limit || 1000;
-    const endpoint = `/organizations/${
-      organization.slug
-    }/discover/query/?per_page=${limit}&cursor=${cursor}`;
-
-    // Reject immediately if no projects are available
-    if (!data.projects.length) {
-      return Promise.reject(new Error(t('No projects selected')));
-    }
-
-    if (typeof data.limit === 'number') {
-      if (data.limit < 1 || data.limit > 1000) {
-        return Promise.reject(new Error(t('Invalid limit parameter')));
-      }
-    }
-
-    if (moment.utc(data.start).isAfter(moment.utc(data.end))) {
-      return Promise.reject(new Error('Start date cannot be after end date'));
-    }
-
-    return api
-      .requestPromise(endpoint, {includeAllArgs: true, method: 'POST', data} as any)
-      .then(([responseData, _, utils]) => {
-        responseData.pageLinks = utils.getResponseHeader('Link');
-        return responseData;
-      })
-      .catch(() => {
-        throw new Error(t('An error occurred'));
-      });
-  }
-
-  /**
-   * Fetches either the query provided as an argument or the current query state
-   * if this is not provided and returns the result wrapped in a promise
-   *
-   * This is similar to `fetch` but does not support pagination and mirrors the API limit
-   *
-   * @param {Object} [data] Optional field to provide data to fetch
-   * @returns {Promise<Object|Error>}
-   */
-  function fetchWithoutLimit(data = getExternal()) {
-    const endpoint = `/organizations/${organization.slug}/discover/query/`;
-
-    // Reject immediately if no projects are available
-    if (!data.projects.length) {
-      return Promise.reject(new Error(t('No projects selected')));
-    }
-
-    if (typeof data.limit === 'number') {
-      if (data.limit < 1 || data.limit > API_LIMIT) {
-        return Promise.reject(new Error(t('Invalid limit parameter')));
-      }
-    }
-
-    if (moment.utc(data.start).isAfter(moment.utc(data.end))) {
-      return Promise.reject(new Error('Start date cannot be after end date'));
-    }
-
-    return api.requestPromise(endpoint, {method: 'POST', data} as any).catch(() => {
-      throw new Error(t('Error with query'));
-    });
-  }
-
-  /**
-   * Cancels any in-flight API requests made via `fetch` or `fetchWithoutLimit`
-   *
-   * @returns {Void}
-   */
-  function cancelRequests() {
-    api.clear();
-  }
-
-  /**
-   * Get the actual query to be run for each visualization type
-   *
-   * @param {Object} originalQuery Original query input by user (external query representation)
-   * @param {String} Type to fetch - currently either byDay or base
-   * @returns {Object} Modified query to be run for that type
-   */
-  function getQueryByType(originalQuery: any, type: string): Query {
-    if (type === 'byDayQuery') {
-      return {
-        ...originalQuery,
-        groupby: ['time'],
-        rollup: 60 * 60 * 24,
-        orderby: '-time',
-        limit: 5000,
-      };
-    }
-
-    // If id or issue.id is present in query fields, always fetch the project.id
-    // so we can generate links
-    if (type === 'baseQuery') {
-      return (originalQuery.fields || []).some(
-        (field: string) => field === 'id' || field === 'issue.id'
-      )
-        ? {
-            ...originalQuery,
-            fields: uniq([...originalQuery.fields, 'project.id']),
-          }
-        : originalQuery;
-    }
-
-    throw new Error('Invalid query type');
-  }
-
-  /**
-   * Returns all column objects, including tags
-   *
-   * @returns {Array<{name: String, type: String}>}
-   */
-  function getColumns() {
-    return [...columns, ...tags];
-  }
-
-  /**
-   * Resets the query to defaults or the query provided
-   * Displays a warning if user does not have access to any project in the query
-   *
-   * @param {Object} [q] optional query to reset to
-   * @returns {Void}
-   */
-  function reset(q: any) {
-    const [validProjects, invalidProjects] = partition(q.projects || [], project =>
-      defaultProjectIds.includes(project)
-    );
-
-    if (invalidProjects.length) {
-      openModal((deps: any) => (
-        <MissingProjectWarningModal
-          organization={organization}
-          validProjects={validProjects}
-          invalidProjects={invalidProjects}
-          {...deps}
-        />
-      ));
-    }
-
-    q.projects = validProjects;
-
-    query = applyDefaults(q);
-  }
-}
-
-function getProjectIds(projects: Project[]) {
-  return projects.map(project => parseInt(project.id, 10));
-}
+export default createQueryBuilder;
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx b/tests/js/spec/views/discover/aggregations/aggregation.spec.jsx
similarity index 97%
rename from tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
rename to tests/js/spec/views/discover/aggregations/aggregation.spec.jsx
index 0e5ebe74c3..287373ff31 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
+++ b/tests/js/spec/views/discover/aggregations/aggregation.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import Aggregation from 'app/views/organizationDiscover/aggregations/aggregation';
+import Aggregation from 'app/views/discover/aggregations/aggregation';
 
 describe('Aggregation', function() {
   describe('render()', function() {
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/index.spec.jsx b/tests/js/spec/views/discover/aggregations/index.spec.jsx
similarity index 95%
rename from tests/js/spec/views/organizationDiscover/aggregations/index.spec.jsx
rename to tests/js/spec/views/discover/aggregations/index.spec.jsx
index 5a60e1b970..a06b2cb528 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/index.spec.jsx
+++ b/tests/js/spec/views/discover/aggregations/index.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import Aggregations from 'app/views/organizationDiscover/aggregations';
+import Aggregations from 'app/views/discover/aggregations';
 
 describe('Aggregations', function() {
   let wrapper, onChangeMock, aggregations;
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx b/tests/js/spec/views/discover/aggregations/utils.spec.jsx
similarity index 94%
rename from tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
rename to tests/js/spec/views/discover/aggregations/utils.spec.jsx
index 79143654cc..eef5116da2 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
+++ b/tests/js/spec/views/discover/aggregations/utils.spec.jsx
@@ -2,9 +2,9 @@ import {
   getInternal,
   getExternal,
   isValidAggregation,
-} from 'app/views/organizationDiscover/aggregations/utils';
+} from 'app/views/discover/aggregations/utils';
 
-import {COLUMNS} from 'app/views/organizationDiscover/data';
+import {COLUMNS} from 'app/views/discover/data';
 
 const aggregationList = [
   {
diff --git a/tests/js/spec/views/organizationDiscover/analytics.spec.jsx b/tests/js/spec/views/discover/analytics.spec.jsx
similarity index 90%
rename from tests/js/spec/views/organizationDiscover/analytics.spec.jsx
rename to tests/js/spec/views/discover/analytics.spec.jsx
index 0ec22e8d3a..cfe3e6297b 100644
--- a/tests/js/spec/views/organizationDiscover/analytics.spec.jsx
+++ b/tests/js/spec/views/discover/analytics.spec.jsx
@@ -1,4 +1,4 @@
-import {trackQuery} from 'app/views/organizationDiscover/analytics';
+import {trackQuery} from 'app/views/discover/analytics';
 import {analytics} from 'app/utils/analytics';
 
 jest.mock('app/utils/analytics');
diff --git a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx b/tests/js/spec/views/discover/conditions/condition.spec.jsx
similarity index 98%
rename from tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
rename to tests/js/spec/views/discover/conditions/condition.spec.jsx
index 8122068cd0..69c18fd359 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
+++ b/tests/js/spec/views/discover/conditions/condition.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import Condition from 'app/views/organizationDiscover/conditions/condition';
+import Condition from 'app/views/discover/conditions/condition';
 
 describe('Condition', function() {
   afterEach(function() {
diff --git a/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx b/tests/js/spec/views/discover/conditions/index.spec.jsx
similarity index 95%
rename from tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx
rename to tests/js/spec/views/discover/conditions/index.spec.jsx
index 06fc81b3f8..125a33fb42 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx
+++ b/tests/js/spec/views/discover/conditions/index.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import Conditions from 'app/views/organizationDiscover/conditions';
+import Conditions from 'app/views/discover/conditions';
 
 describe('Conditions', function() {
   let wrapper, onChangeMock, conditions;
diff --git a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx b/tests/js/spec/views/discover/conditions/utils.spec.jsx
similarity index 96%
rename from tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
rename to tests/js/spec/views/discover/conditions/utils.spec.jsx
index ef9b879a92..d79ba0c470 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
+++ b/tests/js/spec/views/discover/conditions/utils.spec.jsx
@@ -3,9 +3,9 @@ import {
   getExternal,
   isValidCondition,
   ignoreCase,
-} from 'app/views/organizationDiscover/conditions/utils';
+} from 'app/views/discover/conditions/utils';
 
-import {COLUMNS} from 'app/views/organizationDiscover/data';
+import {COLUMNS} from 'app/views/discover/data';
 
 const conditionList = [
   {
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/discover/discover.spec.jsx
similarity index 99%
rename from tests/js/spec/views/organizationDiscover/discover.spec.jsx
rename to tests/js/spec/views/discover/discover.spec.jsx
index 4ea6b37790..fbc08912e5 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/discover/discover.spec.jsx
@@ -3,9 +3,9 @@ import React from 'react';
 
 import {mount} from 'enzyme';
 import ConfigStore from 'app/stores/configStore';
-import Discover from 'app/views/organizationDiscover/discover';
+import Discover from 'app/views/discover/discover';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
-import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+import createQueryBuilder from 'app/views/discover/queryBuilder';
 
 describe('Discover', function() {
   let organization, project, queryBuilder;
diff --git a/tests/js/spec/views/organizationDiscover/index.spec.jsx b/tests/js/spec/views/discover/index.spec.jsx
similarity index 95%
rename from tests/js/spec/views/organizationDiscover/index.spec.jsx
rename to tests/js/spec/views/discover/index.spec.jsx
index 65a14012ba..511311fbce 100644
--- a/tests/js/spec/views/organizationDiscover/index.spec.jsx
+++ b/tests/js/spec/views/discover/index.spec.jsx
@@ -3,12 +3,10 @@ import {mount} from 'enzyme';
 import {browserHistory} from 'react-router';
 
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
-import OrganizationDiscoverContainerWithStore, {
-  OrganizationDiscoverContainer,
-} from 'app/views/organizationDiscover';
+import DiscoverContainerWithStore, {DiscoverContainer} from 'app/views/discover';
 import ProjectsStore from 'app/stores/projectsStore';
 
-describe('OrganizationDiscoverContainer', function() {
+describe('DiscoverContainer', function() {
   beforeEach(function() {
     browserHistory.push = jest.fn();
   });
@@ -34,7 +32,7 @@ describe('OrganizationDiscoverContainer', function() {
         },
       });
       wrapper = mount(
-        <OrganizationDiscoverContainer
+        <DiscoverContainer
           location={{query: {}, search: ''}}
           params={{}}
           selection={{projects: [], environments: [], datetime: {}}}
@@ -62,7 +60,7 @@ describe('OrganizationDiscoverContainer', function() {
       });
 
       wrapper = mount(
-        <OrganizationDiscoverContainerWithStore
+        <DiscoverContainerWithStore
           location={{query: {}, search: ''}}
           params={{}}
           organization={organization}
@@ -81,9 +79,7 @@ describe('OrganizationDiscoverContainer', function() {
     });
 
     const createWrapper = async (props, withStore) => {
-      const Component = withStore
-        ? OrganizationDiscoverContainerWithStore
-        : OrganizationDiscoverContainer;
+      const Component = withStore ? DiscoverContainerWithStore : DiscoverContainer;
       const wrap = mount(
         <Component
           location={{query: {}, search: ''}}
@@ -279,7 +275,7 @@ describe('OrganizationDiscoverContainer', function() {
     it('display no access message', async function() {
       const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
       const wrapper = mount(
-        <OrganizationDiscoverContainer
+        <DiscoverContainer
           location={{query: {}, search: ''}}
           params={{}}
           selection={{datetime: {}}}
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/discover/queryBuilder.spec.jsx
similarity index 99%
rename from tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
rename to tests/js/spec/views/discover/queryBuilder.spec.jsx
index 6600ca4186..dcb2a64105 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/discover/queryBuilder.spec.jsx
@@ -1,4 +1,4 @@
-import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+import createQueryBuilder from 'app/views/discover/queryBuilder';
 import {openModal} from 'app/actionCreators/modal';
 import ConfigStore from 'app/stores/configStore';
 
diff --git a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx b/tests/js/spec/views/discover/result/index.spec.jsx
similarity index 97%
rename from tests/js/spec/views/organizationDiscover/result/index.spec.jsx
rename to tests/js/spec/views/discover/result/index.spec.jsx
index dc689709d1..aa90dca35d 100644
--- a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
+++ b/tests/js/spec/views/discover/result/index.spec.jsx
@@ -1,8 +1,8 @@
 import React from 'react';
 import {mount, shallow} from 'enzyme';
 
-import Result from 'app/views/organizationDiscover/result';
-import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+import Result from 'app/views/discover/result';
+import createQueryBuilder from 'app/views/discover/queryBuilder';
 
 describe('Result', function() {
   describe('New query', function() {
diff --git a/tests/js/spec/views/organizationDiscover/result/table.spec.jsx b/tests/js/spec/views/discover/result/table.spec.jsx
similarity index 97%
rename from tests/js/spec/views/organizationDiscover/result/table.spec.jsx
rename to tests/js/spec/views/discover/result/table.spec.jsx
index c087a84b5a..b6670066a9 100644
--- a/tests/js/spec/views/organizationDiscover/result/table.spec.jsx
+++ b/tests/js/spec/views/discover/result/table.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {shallow, render} from 'enzyme';
 
-import {ResultTable} from 'app/views/organizationDiscover/result/table';
+import {ResultTable} from 'app/views/discover/result/table';
 
 describe('ResultTable', function() {
   let wrapper;
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/discover/result/utils.spec.jsx
similarity index 99%
rename from tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
rename to tests/js/spec/views/discover/result/utils.spec.jsx
index 7817cf5344..b914715316 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/discover/result/utils.spec.jsx
@@ -7,7 +7,7 @@ import {
   getDisplayValue,
   getDisplayText,
   downloadAsCsv,
-} from 'app/views/organizationDiscover/result/utils';
+} from 'app/views/discover/result/utils';
 
 describe('Utils', function() {
   describe('getChartData()', function() {
diff --git a/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx b/tests/js/spec/views/discover/resultManager.spec.jsx
similarity index 94%
rename from tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
rename to tests/js/spec/views/discover/resultManager.spec.jsx
index fec81163e3..a3f8706a29 100644
--- a/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
+++ b/tests/js/spec/views/discover/resultManager.spec.jsx
@@ -1,5 +1,5 @@
-import createResultManager from 'app/views/organizationDiscover/resultManager';
-import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+import createResultManager from 'app/views/discover/resultManager';
+import createQueryBuilder from 'app/views/discover/queryBuilder';
 
 describe('Result manager', function() {
   let resultManager, queryBuilder, discoverMock, discoverByDayMock;
diff --git a/tests/js/spec/views/organizationDiscover/sidebar/orderBy.spec.jsx b/tests/js/spec/views/discover/sidebar/orderBy.spec.jsx
similarity index 96%
rename from tests/js/spec/views/organizationDiscover/sidebar/orderBy.spec.jsx
rename to tests/js/spec/views/discover/sidebar/orderBy.spec.jsx
index c511d01dd0..0eb796e4bf 100644
--- a/tests/js/spec/views/organizationDiscover/sidebar/orderBy.spec.jsx
+++ b/tests/js/spec/views/discover/sidebar/orderBy.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import Orderby from 'app/views/organizationDiscover/sidebar/orderby';
+import Orderby from 'app/views/discover/sidebar/orderby';
 
 describe('orderBy', function() {
   let organization, project, wrapper, onChangeMock, columns;
diff --git a/tests/js/spec/views/organizationDiscover/sidebar/savedQueryList.spec.jsx b/tests/js/spec/views/discover/sidebar/savedQueryList.spec.jsx
similarity index 93%
rename from tests/js/spec/views/organizationDiscover/sidebar/savedQueryList.spec.jsx
rename to tests/js/spec/views/discover/sidebar/savedQueryList.spec.jsx
index d7b4c0f5e6..2c5b44e70d 100644
--- a/tests/js/spec/views/organizationDiscover/sidebar/savedQueryList.spec.jsx
+++ b/tests/js/spec/views/discover/sidebar/savedQueryList.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import SavedQueryList from 'app/views/organizationDiscover/sidebar/savedQueryList';
+import SavedQueryList from 'app/views/discover/sidebar/savedQueryList';
 
 describe('savedQueryList', function() {
   let organization, mockResponse;
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/discover/utils.spec.jsx
similarity index 95%
rename from tests/js/spec/views/organizationDiscover/utils.spec.jsx
rename to tests/js/spec/views/discover/utils.spec.jsx
index 566d2d3c35..5f69c27007 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/discover/utils.spec.jsx
@@ -5,10 +5,10 @@ import {
   getOrderbyFields,
   parseSavedQuery,
   generateQueryName,
-} from 'app/views/organizationDiscover/utils';
+} from 'app/views/discover/utils';
 
-import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
-import {COLUMNS} from 'app/views/organizationDiscover/data';
+import createQueryBuilder from 'app/views/discover/queryBuilder';
+import {COLUMNS} from 'app/views/discover/data';
 
 const queryString =
   '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22';
