commit 5da41880184e43e594bde8b30699244310e070e0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Sep 25 10:17:36 2019 -0700

    feat(ui): Add project selector to Incident Rule Trigger chartâ€¦ (#14783)
    
    Because Incident Rules are now on the org level, we require users to
    select a project before rendering chart. We want to avoid confusion
    around multiple projects since people can assume it will be aggregated.
    If the single project seems reason, we can add multi project support in
    future.
    
    Closes SEN-988

diff --git a/src/sentry/static/sentry/app/components/placeholder.tsx b/src/sentry/static/sentry/app/components/placeholder.tsx
index c9ed1fb85b..c8b24c03f5 100644
--- a/src/sentry/static/sentry/app/components/placeholder.tsx
+++ b/src/sentry/static/sentry/app/components/placeholder.tsx
@@ -15,11 +15,16 @@ type DefaultProps = Readonly<typeof defaultProps>;
 
 type Props = {
   className?: string;
+  children?: React.ReactNode;
 } & Partial<DefaultProps>;
 
 const Placeholder = styled((props: Props) => {
-  const {className} = props;
-  return <div data-test-id="loading-placeholder" className={className} />;
+  const {className, children} = props;
+  return (
+    <div data-test-id="loading-placeholder" className={className}>
+      {children}
+    </div>
+  );
 })<Props>`
   display: flex;
   flex-direction: column;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
index 80f6a80d0a..3a8a538adc 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
@@ -59,7 +59,7 @@ export default class FormPanel extends React.Component<Props> {
 
     return (
       <Panel key={title} id={sanitizeQuerySelector(title)}>
-        <PanelHeader>{title}</PanelHeader>
+        {title && <PanelHeader>{title}</PanelHeader>}
         <PanelBody>
           {typeof renderHeader === 'function' && renderHeader({title, fields})}
 
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
deleted file mode 100644
index a0601c2d45..0000000000
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
+++ /dev/null
@@ -1,14 +0,0 @@
-export enum AlertRuleThreshold {
-  INCIDENT,
-  RESOLUTION,
-}
-
-export enum AlertRuleThresholdType {
-  ABOVE,
-  BELOW,
-}
-
-export enum AlertRuleAggregations {
-  TOTAL,
-  UNIQUE_USERS,
-}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
index 10fc10e108..18d41e51d6 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -2,18 +2,18 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 import styled, {css} from 'react-emotion';
 
+import {IncidentRule} from 'app/views/settings/incidentRules/types';
 import {Organization, Project} from 'app/types';
-import {addSuccessMessage} from 'app/actionCreators/indicator';
 import {openModal} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
+import RuleForm from 'app/views/settings/incidentRules/ruleForm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import TriggerForm from 'app/views/settings/incidentRules/triggers/form';
 import TriggersList from 'app/views/settings/incidentRules/triggers/list';
-
-import {IncidentRule} from './types';
-import RuleForm from './ruleForm';
+import TriggersModal from 'app/views/settings/incidentRules/triggers/modal';
+import withOrganization from 'app/utils/withOrganization';
+import withProjects from 'app/utils/withProjects';
 
 type State = {
   rule: IncidentRule;
@@ -50,31 +50,20 @@ class IncidentRulesDetails extends AsyncView<
   }
 
   handleNewTrigger = () => {
-    const {organization, projects, params} = this.props;
-    const {orgId} = params;
+    const {organization, projects} = this.props;
+
     openModal(
       () => (
-        <div>
-          <h3>
-            Trigger for:
-            {this.state.rule.name}
-          </h3>
-          <TriggerForm
-            organization={organization}
-            projects={projects || []}
-            orgId={orgId}
-            onSubmitSuccess={this.handleSubmitSuccess}
-          />
-        </div>
+        <TriggersModal
+          organization={organization}
+          projects={projects || []}
+          rule={this.state.rule}
+        />
       ),
       {dialogClassName: widthCss}
     );
   };
 
-  handleSubmitSuccess = () => {
-    addSuccessMessage(t('Successfully saved Incident Rule'));
-  };
-
   renderBody() {
     const {orgId, incidentRuleId} = this.props.params;
 
@@ -86,7 +75,6 @@ class IncidentRulesDetails extends AsyncView<
           saveOnBlur={true}
           orgId={orgId}
           incidentRuleId={incidentRuleId}
-          onSubmitSuccess={this.handleSubmitSuccess}
           initialData={this.state.rule}
         />
 
@@ -111,7 +99,7 @@ class IncidentRulesDetails extends AsyncView<
   }
 }
 
-export default IncidentRulesDetails;
+export default withProjects(withOrganization(IncidentRulesDetails));
 
 const TriggersHeader = styled(SettingsPageHeader)`
   margin: 0;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
index 4b43d03e86..265adb14c2 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
@@ -11,8 +11,7 @@ import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
 
-import {AlertRuleAggregations} from './constants';
-import {IncidentRule} from './types';
+import {AlertRuleAggregations, IncidentRule} from './types';
 
 const DEFAULT_METRIC = [AlertRuleAggregations.TOTAL];
 
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/chart.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
similarity index 89%
rename from src/sentry/static/sentry/app/views/settings/incidentRules/chart.tsx
rename to src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
index 3d17e82789..c6878915af 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/chart.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/draggableChart.tsx
@@ -4,12 +4,13 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import {ReactEchartsRef, Series, SeriesDataUnit} from 'app/types/echarts';
-import {Panel} from 'app/components/panels';
 import Graphic from 'app/components/charts/components/graphic';
 import LineChart from 'app/components/charts/lineChart';
+import SelectControl from 'app/components/forms/selectControl';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
-import {Project} from 'app/types';
+
+import {ProjectSelectOption} from './types';
 
 type Props = {
   xAxis: EChartOption.XAxis;
@@ -17,9 +18,11 @@ type Props = {
   alertThreshold: number | null;
   resolveThreshold: number | null;
   isInverted: boolean;
-  projects?: Project[];
+  projectOptions: ProjectSelectOption[];
+  selectedProjects: ProjectSelectOption[];
   onChangeIncidentThreshold: (alertThreshold: number) => void;
   onChangeResolutionThreshold: (resolveThreshold: number) => void;
+  onChangeProjects: (projects: ProjectSelectOption) => void;
   maxValue?: number;
 };
 
@@ -179,6 +182,7 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
         // Resolution is considered "off" if it is -1
         invisible: position === null,
         draggable: true,
+
         position: [0, position],
         // We are doubling the width so that it looks like you are only able to drag along Y axis
         // There doesn't seem to be a way in echarts to lock dragging to a single axis
@@ -229,7 +233,7 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
   };
 
   render() {
-    const {data, xAxis} = this.props;
+    const {data, xAxis, projectOptions, selectedProjects, onChangeProjects} = this.props;
 
     const alertThresholdPosition =
       this.chartRef &&
@@ -239,7 +243,13 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
       this.chartRef.convertToPixel({yAxisIndex: 0}, `${this.props.resolveThreshold}`);
 
     return (
-      <ChartPanel>
+      <Wrapper>
+        <CornerProjectSelect
+          value={selectedProjects.length && selectedProjects[0]}
+          options={projectOptions}
+          onChange={onChangeProjects}
+        />
+
         <LineChart
           isGroupedByDate
           forwardedRef={this.handleRef}
@@ -264,12 +274,27 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
           })}
           series={data}
         />
-      </ChartPanel>
+      </Wrapper>
     );
   }
 }
 
-const ChartPanel = styled(Panel)`
-  background-color: white;
-  margin-bottom: ${space(1)};
+const Wrapper = styled('div')`
+  position: relative;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+`;
+
+const CornerProjectSelect = styled(SelectControl)`
+  position: absolute;
+  top: 0;
+  right: 0;
+  z-index: 1;
+  min-width: 150px;
+
+  .Select-control {
+    border-top: 0;
+    border-top-left-radius: 0;
+    border-bottom-right-radius: 0;
+    border-right: 0;
+  }
 `;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
new file mode 100644
index 0000000000..596e6a3bbf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
@@ -0,0 +1,189 @@
+import {maxBy} from 'lodash';
+import React from 'react';
+import moment from 'moment-timezone';
+import styled from 'react-emotion';
+
+import {Client} from 'app/api';
+import {Config, Organization, Project} from 'app/types';
+import {SeriesDataUnit} from 'app/types/echarts';
+import {getFormattedDate} from 'app/utils/dates';
+import EventsRequest from 'app/views/events/utils/eventsRequest';
+import LoadingMask from 'app/components/loadingMask';
+import Placeholder from 'app/components/placeholder';
+import SelectControl from 'app/components/forms/selectControl';
+
+import {
+  AlertRuleAggregations,
+  IncidentRule,
+  TimeWindow,
+  ProjectSelectOption,
+} from '../../types';
+import DraggableChart from './draggableChart';
+
+type Props = {
+  api: Client;
+  config: Config;
+  organization: Organization;
+  projects: Project[];
+  rule: IncidentRule;
+  isInverted: boolean;
+  timeWindow: number;
+  alertThreshold: number | null;
+  resolveThreshold: number | null;
+  onChangeIncidentThreshold: (alertThreshold: number) => void;
+  onChangeResolutionThreshold: (resolveThreshold: number) => void;
+};
+
+type State = {
+  // This is an array but we are only supporting a single project for now
+  selectedProjects: ProjectSelectOption[];
+};
+
+class TriggersChart extends React.Component<Props, State> {
+  state = {
+    selectedProjects: [],
+  };
+
+  handleSelectProjects = (selectedProjects: ProjectSelectOption) => {
+    this.setState({
+      selectedProjects: [selectedProjects],
+    });
+  };
+
+  render() {
+    const {
+      api,
+      config,
+      organization,
+      projects,
+      alertThreshold,
+      resolveThreshold,
+      isInverted,
+      rule,
+    } = this.props;
+    const {timeWindow} = rule;
+    const {selectedProjects} = this.state;
+    const projectOptions = projects.map(({id, slug}) => ({
+      value: Number(id),
+      label: slug,
+    }));
+
+    // Show a placeholder with a message to select a project (as well as project selector)
+
+    if (selectedProjects.length === 0) {
+      return (
+        <SelectProjectPlaceholder height="200px" bottomGutter={1}>
+          <SelectProjectWrapper>
+            Select Project to see last 24 hours of data
+            <SelectControl
+              options={projectOptions}
+              onChange={this.handleSelectProjects}
+            />
+          </SelectProjectWrapper>
+        </SelectProjectPlaceholder>
+      );
+    }
+    return (
+      <EventsRequest
+        api={api}
+        organization={organization}
+        project={selectedProjects.map(({value}) => value)}
+        interval={`${timeWindow}s`}
+        period={getPeriodForTimeWindow(timeWindow)}
+        yAxis={
+          rule.aggregations[0] === AlertRuleAggregations.TOTAL
+            ? 'event_count'
+            : 'user_count'
+        }
+        includePrevious={false}
+      >
+        {({loading, reloading, timeseriesData}) => {
+          let maxValue: SeriesDataUnit | undefined;
+          if (timeseriesData && timeseriesData.length && timeseriesData[0].data) {
+            maxValue = maxBy(timeseriesData[0].data, ({value}) => value);
+          }
+
+          return (
+            <React.Fragment>
+              {loading ? (
+                <Placeholder height="200px" bottomGutter={1} />
+              ) : (
+                <React.Fragment>
+                  <TransparentLoadingMask visible={reloading} />
+                  <DraggableChart
+                    xAxis={{
+                      axisLabel: {
+                        formatter: (value: moment.MomentInput, index: number) => {
+                          const firstItem = index === 0;
+                          const format =
+                            timeWindow <= TimeWindow.FIVE_MINUTES && !firstItem
+                              ? 'LT'
+                              : 'MMM Do';
+                          return getFormattedDate(value, format, {
+                            local: config.user.options.timezone !== 'UTC',
+                          });
+                        },
+                      },
+                    }}
+                    maxValue={maxValue ? maxValue.value : maxValue}
+                    onChangeIncidentThreshold={this.props.onChangeIncidentThreshold}
+                    alertThreshold={alertThreshold}
+                    onChangeResolutionThreshold={this.props.onChangeResolutionThreshold}
+                    resolveThreshold={resolveThreshold}
+                    isInverted={isInverted}
+                    data={timeseriesData}
+                    projectOptions={projectOptions}
+                    selectedProjects={selectedProjects}
+                    onChangeProjects={this.handleSelectProjects}
+                  />
+                </React.Fragment>
+              )}
+            </React.Fragment>
+          );
+        }}
+      </EventsRequest>
+    );
+  }
+}
+
+export default TriggersChart;
+
+type TimeWindowMapType = {[key in TimeWindow]: string};
+
+const TIME_WINDOW_TO_PERIOD: TimeWindowMapType = {
+  [TimeWindow.ONE_MINUTE]: '12h',
+  [TimeWindow.FIVE_MINUTES]: '12h',
+  [TimeWindow.TEN_MINUTES]: '1d',
+  [TimeWindow.FIFTEEN_MINUTES]: '3d',
+  [TimeWindow.THIRTY_MINUTES]: '3d',
+  [TimeWindow.ONE_HOUR]: '7d',
+  [TimeWindow.TWO_HOURS]: '7d',
+  [TimeWindow.FOUR_HOURS]: '7d',
+  [TimeWindow.ONE_DAY]: '14d',
+};
+
+/**
+ * Gets a reasonable period given a timewindow (in seconds)
+ *
+ * @param timeWindow The time window in seconds
+ * @return period The period string to use (e.g. 14d)
+ */
+function getPeriodForTimeWindow(timeWindow: TimeWindow): string {
+  return TIME_WINDOW_TO_PERIOD[timeWindow];
+}
+
+const TransparentLoadingMask = styled(LoadingMask)<{visible: boolean}>`
+  ${p => !p.visible && 'display: none;'};
+  opacity: 0.4;
+  z-index: 1;
+`;
+
+const SelectProjectPlaceholder = styled(Placeholder)`
+  background-color: white;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  align-items: center;
+`;
+
+const SelectProjectWrapper = styled('div')`
+  width: 40%;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/types.tsx
new file mode 100644
index 0000000000..bf1518e9cf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/types.tsx
@@ -0,0 +1,4 @@
+export type ProjectSelectOption = {
+  label: string;
+  value: number;
+};
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
index c738949bd4..433f3b19e7 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
@@ -1,78 +1,43 @@
-import {debounce, maxBy} from 'lodash';
+import {debounce} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
-import moment from 'moment-timezone';
-import styled from 'react-emotion';
 
 import {Client} from 'app/api';
 import {Config, Organization, Project} from 'app/types';
-import {PanelAlert} from 'app/components/panels';
-import {SeriesDataUnit} from 'app/types/echarts';
 import {addErrorMessage} from 'app/actionCreators/indicator';
-import {getFormattedDate} from 'app/utils/dates';
 import {t} from 'app/locale';
-import EventsRequest from 'app/views/events/utils/eventsRequest';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
-import LoadingMask from 'app/components/loadingMask';
-import Placeholder from 'app/components/placeholder';
 import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
 
+import TriggersChart from './chart';
+
 import {
-  AlertRuleAggregations,
   AlertRuleThreshold,
   AlertRuleThresholdType,
-} from '../constants';
-import {IncidentRule} from '../types';
-import IncidentRulesChart from '../chart';
+  IncidentRule,
+  TimeWindow,
+} from '../types';
 
 type AlertRuleThresholdKey = {
   [AlertRuleThreshold.INCIDENT]: 'alertThreshold';
   [AlertRuleThreshold.RESOLUTION]: 'resolveThreshold';
 };
 
-enum TimeWindow {
-  ONE_MINUTE = 60,
-  FIVE_MINUTES = 300,
-  TEN_MINUTES = 600,
-  FIFTEEN_MINUTES = 900,
-  THIRTY_MINUTES = 1800,
-  ONE_HOUR = 3600,
-  TWO_HOURS = 7200,
-  FOUR_HOURS = 14400,
-  ONE_DAY = 86400,
-}
-
-type TimeWindowMapType = {[key in TimeWindow]: string};
-
-const TIME_WINDOW_TO_PERIOD: TimeWindowMapType = {
-  [TimeWindow.ONE_MINUTE]: '12h',
-  [TimeWindow.FIVE_MINUTES]: '12h',
-  [TimeWindow.TEN_MINUTES]: '1d',
-  [TimeWindow.FIFTEEN_MINUTES]: '3d',
-  [TimeWindow.THIRTY_MINUTES]: '3d',
-  [TimeWindow.ONE_HOUR]: '7d',
-  [TimeWindow.TWO_HOURS]: '7d',
-  [TimeWindow.FOUR_HOURS]: '7d',
-  [TimeWindow.ONE_DAY]: '14d',
-};
-
 const DEFAULT_TIME_WINDOW = 60;
-const DEFAULT_METRIC = [AlertRuleAggregations.TOTAL];
 
 type Props = {
   api: Client;
   config: Config;
   organization: Organization;
-  project?: Project;
-  projects?: Project[];
+  projects: Project[];
   initialData?: IncidentRule;
+  rule: IncidentRule;
 };
 
 type State = {
   width?: number;
-  aggregations: AlertRuleAggregations[];
   isInverted: boolean;
   timeWindow: number;
   alertThreshold: number | null;
@@ -88,9 +53,6 @@ class TriggerForm extends React.Component<Props, State> {
   static defaultProps = {};
 
   state = {
-    aggregations: this.props.initialData
-      ? this.props.initialData.aggregations
-      : DEFAULT_METRIC,
     isInverted: this.props.initialData
       ? this.props.initialData.thresholdType === AlertRuleThresholdType.BELOW
       : false,
@@ -114,15 +76,6 @@ class TriggerForm extends React.Component<Props, State> {
   ): AlertRuleThresholdKey[AlertRuleThreshold] =>
     type === AlertRuleThreshold.RESOLUTION ? 'resolveThreshold' : 'alertThreshold';
 
-  /**
-   * Gets a reasonable period given a timewindow (in seconds)
-   *
-   * @param timeWindow The time window in seconds
-   * @return period The period string to use (e.g. 14d)
-   */
-  getPeriodForTimeWindow = (timeWindow: TimeWindow): string =>
-    TIME_WINDOW_TO_PERIOD[timeWindow];
-
   /**
    * Checks to see if threshold is valid given target value, and state of
    * inverted threshold as well as the *other* threshold
@@ -233,10 +186,6 @@ class TriggerForm extends React.Component<Props, State> {
     this.setState({timeWindow});
   };
 
-  handleChangeMetric = (aggregations: AlertRuleAggregations) => {
-    this.setState({aggregations: [aggregations]});
-  };
-
   /**
    * Changes the threshold type (i.e. if thresholds are inverted or not)
    */
@@ -259,134 +208,70 @@ class TriggerForm extends React.Component<Props, State> {
   };
 
   render() {
-    const {api, config, organization, projects, project} = this.props;
-    const {
-      aggregations,
-      alertThreshold,
-      resolveThreshold,
-      isInverted,
-      timeWindow,
-    } = this.state;
+    const {api, config, organization, projects, rule} = this.props;
+    const {alertThreshold, resolveThreshold, isInverted, timeWindow} = this.state;
 
     return (
       <React.Fragment>
-        <EventsRequest
-          api={api}
-          organization={organization}
-          project={[(project && parseInt(project.id, 10)) || 1]}
-          interval={`${timeWindow}s`}
-          period={this.getPeriodForTimeWindow(timeWindow)}
-          yAxis={
-            aggregations[0] === AlertRuleAggregations.TOTAL ? 'event_count' : 'user_count'
-          }
-          includePrevious={false}
-        >
-          {({loading, reloading, timeseriesData}) => {
-            let maxValue: SeriesDataUnit | undefined;
-            if (timeseriesData && timeseriesData.length && timeseriesData[0].data) {
-              maxValue = maxBy(timeseriesData[0].data, ({value}) => value);
-            }
-
-            return (
-              <React.Fragment>
-                {loading ? (
-                  <Placeholder height="200px" bottomGutter={1} />
-                ) : (
-                  <React.Fragment>
-                    <TransparentLoadingMask visible={reloading} />
-                    <IncidentRulesChart
-                      xAxis={{
-                        axisLabel: {
-                          formatter: (value: moment.MomentInput, index: number) => {
-                            const firstItem = index === 0;
-                            const format =
-                              timeWindow <= TimeWindow.FIVE_MINUTES && !firstItem
-                                ? 'LT'
-                                : 'MMM Do';
-                            return getFormattedDate(value, format, {
-                              local: config.user.options.timezone !== 'UTC',
-                            });
-                          },
-                        },
-                      }}
-                      maxValue={maxValue ? maxValue.value : maxValue}
-                      onChangeIncidentThreshold={this.handleChangeIncidentThreshold}
-                      alertThreshold={alertThreshold}
-                      onChangeResolutionThreshold={this.handleChangeResolutionThreshold}
-                      resolveThreshold={resolveThreshold}
-                      isInverted={isInverted}
-                      data={timeseriesData}
-                      projects={projects}
-                    />
-                  </React.Fragment>
-                )}
-              </React.Fragment>
-            );
-          }}
-        </EventsRequest>
-
-        <div>
-          <JsonForm
-            renderHeader={() => {
-              return (
-                <PanelAlert type="warning">
-                  {t(
-                    'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. Use the sliders to control frequency.'
-                  )}
-                </PanelAlert>
-              );
-            }}
-            forms={[
-              {
-                title: t('Metric'),
-                fields: [
-                  {
-                    name: 'name',
-                    type: 'text',
-                    label: t('Label'),
-                    help: t('This will prefix alerts created by this trigger'),
-                    placeholder: t('SEV-0'),
-                    required: true,
-                  },
-                  {
-                    name: 'alertThreshold',
-                    type: 'range',
-                    label: t('Incident Boundary'),
-                    help: !isInverted
-                      ? t('Anything trending above this limit will trigger an Incident')
-                      : t('Anything trending below this limit will trigger an Incident'),
-                    onChange: this.handleChangeIncidentThresholdInput,
-                    showCustomInput: true,
-                    required: true,
-                    min: 1,
-                  },
-                  {
-                    name: 'resolveThreshold',
-                    type: 'range',
-                    label: t('Resolution Boundary'),
-                    help: !isInverted
-                      ? t('Anything trending below this limit will resolve an Incident')
-                      : t('Anything trending above this limit will resolve an Incident'),
-                    onChange: this.handleChangeResolutionThresholdInput,
-                    showCustomInput: true,
-                    placeholder: resolveThreshold === null ? t('Off') : '',
-                    min: 1,
-                  },
-                  {
-                    name: 'thresholdType',
-                    type: 'boolean',
-                    label: t('Reverse the Boundaries'),
-                    defaultValue: AlertRuleThresholdType.ABOVE,
-                    help: t(
-                      'This is a metric that needs to stay above a certain threshold'
-                    ),
-                    onChange: this.handleChangeThresholdType,
-                  },
-                ],
-              },
-            ]}
-          />
-        </div>
+        <JsonForm
+          renderHeader={() => (
+            <TriggersChart
+              api={api}
+              config={config}
+              organization={organization}
+              projects={projects}
+              rule={rule}
+              isInverted={isInverted}
+              alertThreshold={alertThreshold}
+              resolveThreshold={resolveThreshold}
+              timeWindow={timeWindow}
+              onChangeIncidentThreshold={this.handleChangeIncidentThreshold}
+              onChangeResolutionThreshold={this.handleChangeResolutionThreshold}
+            />
+          )}
+          fields={[
+            {
+              name: 'name',
+              type: 'text',
+              label: t('Label'),
+              help: t('This will prefix alerts created by this trigger'),
+              placeholder: t('SEV-0'),
+              required: true,
+            },
+            {
+              name: 'alertThreshold',
+              type: 'range',
+              label: t('Incident Boundary'),
+              help: !isInverted
+                ? t('Anything trending above this limit will trigger an Incident')
+                : t('Anything trending below this limit will trigger an Incident'),
+              onChange: this.handleChangeIncidentThresholdInput,
+              showCustomInput: true,
+              required: true,
+              min: 1,
+            },
+            {
+              name: 'resolveThreshold',
+              type: 'range',
+              label: t('Resolution Boundary'),
+              help: !isInverted
+                ? t('Anything trending below this limit will resolve an Incident')
+                : t('Anything trending above this limit will resolve an Incident'),
+              onChange: this.handleChangeResolutionThresholdInput,
+              showCustomInput: true,
+              placeholder: resolveThreshold === null ? t('Off') : '',
+              min: 1,
+            },
+            {
+              name: 'thresholdType',
+              type: 'boolean',
+              label: t('Reverse the Boundaries'),
+              defaultValue: AlertRuleThresholdType.ABOVE,
+              help: t('This is a metric that needs to stay above a certain threshold'),
+              onChange: this.handleChangeThresholdType,
+            },
+          ]}
+        />
       </React.Fragment>
     );
   }
@@ -409,12 +294,10 @@ function TriggerFormContainer({
   return (
     <Form
       apiMethod={incidentRuleId ? 'PUT' : 'POST'}
-      apiEndpoint={`/projects/${orgId}/alert-rules/${
+      apiEndpoint={`/organizations/${orgId}/alert-rules/${
         incidentRuleId ? `${incidentRuleId}/` : ''
       }`}
       initialData={{
-        query: '',
-        aggregations: DEFAULT_METRIC,
         thresholdType: AlertRuleThresholdType.ABOVE,
         timeWindow: DEFAULT_TIME_WINDOW,
         ...initialData,
@@ -427,10 +310,4 @@ function TriggerFormContainer({
   );
 }
 
-const TransparentLoadingMask = styled(LoadingMask)<{visible: boolean}>`
-  ${p => !p.visible && 'display: none;'};
-  opacity: 0.4;
-  z-index: 1;
-`;
-
 export default withConfig(withApi(TriggerFormContainer));
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx
new file mode 100644
index 0000000000..c346468c36
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/modal.tsx
@@ -0,0 +1,54 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {IncidentRule} from 'app/views/settings/incidentRules/types';
+import {Organization, Project} from 'app/types';
+import {addSuccessMessage} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+import TriggerForm from 'app/views/settings/incidentRules/triggers/form';
+import space from 'app/styles/space';
+
+type Props = {
+  organization: Organization;
+  projects: Project[];
+  rule: IncidentRule;
+};
+
+class TriggersModal extends React.Component<Props> {
+  handleSubmitSuccess = () => {
+    addSuccessMessage(t('Successfully saved Incident Rule'));
+  };
+
+  render() {
+    const {organization, projects, rule} = this.props;
+    return (
+      <div>
+        <TinyHeader>{t('Trigger for')}</TinyHeader>
+        <RuleName>{rule.name}</RuleName>
+        <TriggerForm
+          organization={organization}
+          projects={projects || []}
+          orgId={organization.slug}
+          onSubmitSuccess={this.handleSubmitSuccess}
+          rule={rule}
+        />
+      </div>
+    );
+  }
+}
+
+export default TriggersModal;
+
+const TinyHeader = styled('h6')`
+  color: ${p => p.theme.gray2};
+  text-transform: uppercase;
+  margin-bottom: ${space(1)};
+
+  &::after {
+    content: ':';
+  }
+`;
+
+const RuleName = styled('h3')`
+  font-weight: normal;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index 4e05c73e12..3fed99798f 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -1,3 +1,18 @@
+export enum AlertRuleThreshold {
+  INCIDENT,
+  RESOLUTION,
+}
+
+export enum AlertRuleThresholdType {
+  ABOVE,
+  BELOW,
+}
+
+export enum AlertRuleAggregations {
+  TOTAL,
+  UNIQUE_USERS,
+}
+
 export type IncidentRule = {
   aggregations: number[];
   aggregation?: number;
@@ -16,3 +31,20 @@ export type IncidentRule = {
   thresholdType: number;
   timeWindow: number;
 };
+
+export enum TimeWindow {
+  ONE_MINUTE = 60,
+  FIVE_MINUTES = 300,
+  TEN_MINUTES = 600,
+  FIFTEEN_MINUTES = 900,
+  THIRTY_MINUTES = 1800,
+  ONE_HOUR = 3600,
+  TWO_HOURS = 7200,
+  FOUR_HOURS = 14400,
+  ONE_DAY = 86400,
+}
+
+export type ProjectSelectOption = {
+  label: string;
+  value: number;
+};
diff --git a/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx b/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
new file mode 100644
index 0000000000..73437d2768
--- /dev/null
+++ b/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
@@ -0,0 +1,70 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import {selectByLabel} from 'app-test/helpers/select';
+import TriggersModal from 'app/views/settings/incidentRules/triggers/modal';
+
+describe('Incident Rules -> Triggers Modal', function() {
+  const {organization, project, routerContext} = initializeOrg();
+  const rule = TestStubs.IncidentRule();
+  let statsMock;
+  const createWrapper = props =>
+    mount(
+      <TriggersModal
+        organization={organization}
+        projects={[project, TestStubs.Project({slug: 'project-2', id: '3'})]}
+        rule={rule}
+        {...props}
+      />,
+      routerContext
+    );
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    statsMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events-stats/',
+    });
+  });
+
+  it('selects a Project to use for chart and changes project after chart renders', async function() {
+    const wrapper = createWrapper();
+
+    expect(wrapper.find('SelectProjectPlaceholder')).toHaveLength(1);
+
+    await tick();
+    expect(statsMock).not.toHaveBeenCalled();
+
+    selectByLabel(wrapper, 'project-slug', {control: true});
+
+    await tick();
+    wrapper.update();
+
+    // API call to render chart
+    expect(statsMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        // Only check for project for now
+        query: expect.objectContaining({
+          project: [2],
+        }),
+      })
+    );
+
+    // Chart renders
+    expect(wrapper.find('LineChart')).toHaveLength(1);
+
+    // Select a new project
+    selectByLabel(wrapper, 'project-2', {control: true});
+
+    // New API call for updated project
+    expect(statsMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        // Only check for project for now
+        query: expect.objectContaining({
+          project: [3],
+        }),
+      })
+    );
+  });
+});
