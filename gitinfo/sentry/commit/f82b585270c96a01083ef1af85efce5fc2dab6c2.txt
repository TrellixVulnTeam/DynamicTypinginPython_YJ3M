commit f82b585270c96a01083ef1af85efce5fc2dab6c2
Author: Anton Ovchinnikov <anton@tonyo.info>
Date:   Thu Nov 29 18:26:48 2018 +0100

    feat(normalize-server): Add threading/forking behavior (#10826)

diff --git a/src/sentry/management/commands/serve_normalize.py b/src/sentry/management/commands/serve_normalize.py
index d7891689dc..8a2d363ef1 100644
--- a/src/sentry/management/commands/serve_normalize.py
+++ b/src/sentry/management/commands/serve_normalize.py
@@ -22,6 +22,11 @@ from django.core.management.base import BaseCommand, CommandError, make_option
 from django.utils.encoding import force_str
 
 
+class ForkingUnixStreamServer(SocketServer.ForkingMixIn,
+                              SocketServer.UnixStreamServer):
+    pass
+
+
 def catch_errors(f):
     def wrapper(*args, **kwargs):
         error = None
@@ -191,6 +196,10 @@ class Command(BaseCommand):
                     help='Unix socket to bind to. Example: "/tmp/normalize.sock"'),
         make_option('--net', dest='network_socket',
                     help='Network socket to bind to. Example: "127.0.0.1:1234"'),
+        make_option('--threading', action='store_true', dest='threading',
+                    help='Start a threading server'),
+        make_option('--forking', action='store_true', dest='forking',
+                    help='Start a forking server'),
     )
 
     def _check_socket_path(self, socket_file):
@@ -209,18 +218,43 @@ class Command(BaseCommand):
     def handle(self, **options):
         socket_file = options.get('socket_file')
         network_socket = options.get('network_socket')
+        threading = options.get('threading')
+        forking = options.get('forking')
+        if threading and forking:
+            raise CommandError('Pick one: threading or forking.')
         if socket_file and network_socket:
             raise CommandError('Only one socket allowed at a time')
-        elif socket_file:
+
+        if threading:
+            server_type = 'threading'
+        elif forking:
+            server_type = 'forking'
+        else:
+            server_type = 'single-threaded'
+        self.stdout.write('Server type: %s\n' % (server_type,))
+
+        if socket_file:
             self.socket_file = os.path.abspath(socket_file)
             self._check_socket_path(socket_file)
-            self.stdout.write('Binding to unix socket: %s' % (socket_file,))
-            server = SocketServer.UnixStreamServer(socket_file, EventNormalizeHandler)
+            self.stdout.write('Binding to unix socket: %s\n' % (socket_file,))
+            if threading:
+                server = SocketServer.ThreadingUnixStreamServer(socket_file, EventNormalizeHandler)
+                server.daemon_threads = True
+            elif forking:
+                server = ForkingUnixStreamServer(socket_file, EventNormalizeHandler)
+            else:
+                server = SocketServer.UnixStreamServer(socket_file, EventNormalizeHandler)
         elif network_socket:
             host, port = network_socket.split(':')
             port = int(port)
-            self.stdout.write('Binding to network socket: %s:%s' % (host, port))
-            server = SocketServer.TCPServer((host, port), EventNormalizeHandler)
+            self.stdout.write('Binding to network socket: %s:%s\n' % (host, port))
+            if threading:
+                server = SocketServer.ThreadingTCPServer((host, port), EventNormalizeHandler)
+                server.daemon_threads = True
+            elif forking:
+                server = SocketServer.ForkingTCPServer((host, port), EventNormalizeHandler)
+            else:
+                server = SocketServer.TCPServer((host, port), EventNormalizeHandler)
         else:
             raise CommandError('No connection option specified')
 
