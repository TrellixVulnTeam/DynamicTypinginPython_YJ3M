commit 9e898f1222234f358cc91d1523537ca9dd01ec68
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Oct 31 15:09:51 2019 -0700

    redis: Support Redis in a non-cluster non-rb mode
    
    This allows, the confunsingly named "redis_clusters" manager to support
    talking to a non-rb and non-cluster mode server. In a single Redis host.
    
    This means this gives us a working Redis implementation out of the box
    and `redis.redis_clusters.get("default")` will work. So things that rely
    on the redis-cluster/redis APIs can use a working redis without needing
    to run redis cluster locally.
    
    This also means that all the features we have that don't work without
    explicitly configuring redis cluster will be able to work against the
    default redis cluster.
    
    I know, these names are terrible and confusing until we get rid of rb.

diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index 290e277483..5e5786c9dd 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -10,7 +10,7 @@ from threading import Lock
 import rb
 from django.utils.functional import SimpleLazyObject
 from pkg_resources import resource_string
-from redis.client import Script
+from redis.client import Script, StrictRedis
 from redis.connection import ConnectionPool
 from redis.exceptions import ConnectionError, BusyLoadingError
 from rediscluster import StrictRedisCluster
@@ -100,7 +100,11 @@ class RetryingStrictRedisCluster(StrictRedisCluster):
 
 class _RedisCluster(object):
     def supports(self, config):
-        return config.get("is_redis_cluster", False)
+        # _RedisCluster supports two configurations:
+        #  * Explicitly configured with is_redis_cluster. This mode is for real redis-cluster.
+        #  * No is_redis_cluster, but only 1 host. This represents a singular node Redis running
+        #    in non-cluster mode.
+        return config.get("is_redis_cluster", False) or len(config.get("hosts")) == 1
 
     def factory(self, **config):
         # StrictRedisCluster expects a list of { host, port } dicts. Coerce the
@@ -111,9 +115,14 @@ class _RedisCluster(object):
         # Redis cluster does not wait to attempt to connect. We'd prefer to not
         # make TCP connections on boot. Wrap the client in a lazy proxy object.
         def cluster_factory():
-            return RetryingStrictRedisCluster(
-                startup_nodes=hosts, decode_responses=True, skip_full_coverage_check=True
-            )
+            if config.get("is_redis_cluster", False):
+                return RetryingStrictRedisCluster(
+                    startup_nodes=hosts, decode_responses=True, skip_full_coverage_check=True
+                )
+            else:
+                host = hosts[0].copy()
+                host["decode_responses"] = True
+                return StrictRedis(**host)
 
         return SimpleLazyObject(cluster_factory)
 
diff --git a/tests/sentry/utils/test_redis.py b/tests/sentry/utils/test_redis.py
index 978c4223de..a24c7f0beb 100644
--- a/tests/sentry/utils/test_redis.py
+++ b/tests/sentry/utils/test_redis.py
@@ -40,16 +40,22 @@ class ClusterManagerTestCase(TestCase):
             manager.get("invalid")
 
     @mock.patch("sentry.utils.redis.RetryingStrictRedisCluster")
-    def test_specific_cluster(self, cluster):
+    @mock.patch("sentry.utils.redis.StrictRedis")
+    def test_specific_cluster(self, StrictRedis, RetryingStrictRedisCluster):
         manager = make_manager(cluster_type=_RedisCluster)
-        slo = manager.get("baz")
 
         # We wrap the cluster in a Simple Lazy Object, force creation of the
         # object to verify it's correct.
-        assert slo._setupfunc() is cluster.return_value
 
+        # cluster foo is fine since it's a single node
+        assert manager.get("foo")._setupfunc() is StrictRedis.return_value
+        # baz works becasue it's explicitly is_redis_cluster
+        assert manager.get("baz")._setupfunc() is RetryingStrictRedisCluster.return_value
+
+        # bar is not a valid redis or redis cluster definition
+        # becasue it is two hosts, without explicitly saying is_redis_cluster
         with pytest.raises(KeyError):
-            manager.get("foo")
+            manager.get("bar")
 
 
 def test_get_cluster_from_options():
