commit 7af869b7396077fffeddb4e87d7ceeec8b9e079b
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Nov 6 13:34:41 2015 -0800

    Coerce tags keys with spaces to using hyphens
    
    We were semi-incorrectly assuming tags with spaces were functional,
    but at one point had prevented them. To ensure maximum support we
    now convert the space to a hyphen instead, which ensures various
    UI behavior continues to work, but data isnt quietly lost.
    
    We also move the vaidation code out of normalize and into coreapi.
    
    Fixes https://github.com/getsentry/raven-objc/issues/64

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index e71c470c25..82e0987310 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -30,7 +30,7 @@ from sentry.constants import (
 )
 from sentry.interfaces.base import get_interface, InterfaceValidationError
 from sentry.interfaces.csp import Csp
-from sentry.models import EventError, Project, ProjectKey
+from sentry.models import EventError, Project, ProjectKey, TagKey
 from sentry.tasks.store import preprocess_event
 from sentry.utils import is_float, json
 from sentry.utils.auth import parse_auth_header
@@ -467,6 +467,19 @@ class ClientApiHelper(object):
                         'value': pair,
                     })
                     continue
+
+                # support tags with spaces by converting them
+                k = k.replace(' ', '-')
+
+                if not TagKey.is_valid_key(k):
+                    self.log.info('Discarded invalid tag key: %s', k)
+                    data['errors'].append({
+                        'type': EventError.INVALID_DATA,
+                        'name': 'tags',
+                        'value': pair,
+                    })
+                    continue
+
                 tags.append((k, v))
             data['tags'] = tags
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index fd59501763..0068324459 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -10,7 +10,6 @@ from __future__ import absolute_import, print_function
 import logging
 import math
 import six
-import re
 
 from datetime import datetime, timedelta
 from django.conf import settings
@@ -22,13 +21,12 @@ from uuid import uuid4
 
 from sentry.app import buffer, tsdb
 from sentry.constants import (
-    CLIENT_RESERVED_ATTRS, LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH,
-    MAX_TAG_VALUE_LENGTH
+    CLIENT_RESERVED_ATTRS, LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
 )
 from sentry.interfaces.base import get_interface
 from sentry.models import (
     Activity, Event, EventMapping, EventUser, Group, GroupHash, GroupStatus,
-    Project, Release, UserReport
+    Project, Release, TagKey, UserReport
 )
 from sentry.plugins import plugins
 from sentry.signals import regression_signal
@@ -41,9 +39,6 @@ from sentry.utils.safe import safe_execute, trim, trim_dict
 from sentry.utils.strings import truncatechars
 from sentry.utils.validators import validate_ip
 
-# Valid pattern for tag key names
-TAG_KEY_RE = re.compile(r'^[a-zA-Z0-9_\.:-]+$')
-
 
 def count_limit(count):
     # TODO: could we do something like num_to_store = max(math.sqrt(100*count)+59, 200) ?
@@ -203,7 +198,7 @@ class EventManager(object):
             data['logger'] = DEFAULT_LOGGER_NAME
         else:
             logger = trim(data['logger'].strip(), 64)
-            if TAG_KEY_RE.match(logger):
+            if TagKey.is_valid_key(logger):
                 data['logger'] = logger
             else:
                 data['logger'] = DEFAULT_LOGGER_NAME
@@ -260,12 +255,6 @@ class EventManager(object):
             if not (key and value):
                 continue
 
-            if len(value) > MAX_TAG_VALUE_LENGTH:
-                continue
-
-            if not TAG_KEY_RE.match(key):
-                continue
-
             data['tags'].append((key, value))
 
         if not isinstance(data['extra'], dict):
diff --git a/src/sentry/models/tagkey.py b/src/sentry/models/tagkey.py
index 7d408abc77..c4679f6c3a 100644
--- a/src/sentry/models/tagkey.py
+++ b/src/sentry/models/tagkey.py
@@ -7,6 +7,8 @@ sentry.models.tagkey
 """
 from __future__ import absolute_import, print_function
 
+import re
+
 from django.db import models
 from django.utils.translation import ugettext_lazy as _
 
@@ -17,6 +19,9 @@ from sentry.db.models import (
 from sentry.db.models.manager import BaseManager
 from sentry.utils.cache import cache
 
+# Valid pattern for tag key names
+TAG_KEY_RE = re.compile(r'^[a-zA-Z0-9_\.:-]+$')
+
 
 # TODO(dcramer): pull in enum library
 class TagKeyStatus(object):
@@ -69,6 +74,10 @@ class TagKey(Model):
 
     __repr__ = sane_repr('project_id', 'key')
 
+    @classmethod
+    def is_valid_key(self, key):
+        return TAG_KEY_RE.match(key)
+
     def get_label(self):
         return self.label \
             or TAG_LABELS.get(self.key) \
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 809d10f208..421dbebe97 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -239,7 +239,7 @@ class ValidateDataTest(BaseAPITest):
             'message': 'foo',
             'tags': {'foo bar': 'baz bar'},
         })
-        assert data['tags'] == [('foo bar', 'baz bar')]
+        assert data['tags'] == [('foo-bar', 'baz bar')]
 
     def test_tags_out_of_bounds(self):
         data = self.helper.validate_data(self.project, {
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 4234d59235..50eaec9b61 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -307,11 +307,6 @@ class EventManagerTest(TransactionTestCase):
         data = manager.normalize()
         assert data['logger'] == DEFAULT_LOGGER_NAME
 
-    def test_bad_tag_key(self):
-        manager = EventManager(self.make_event(tags=[('foo bar', 'x')]))
-        data = manager.normalize()
-        assert data['tags'] == []
-
     def test_event_user(self):
         manager = EventManager(self.make_event(**{
             'sentry.interfaces.User': {
