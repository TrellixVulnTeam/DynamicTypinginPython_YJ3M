commit 8722f150018f5fce3d9e6466b12bf87267ce082f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon May 6 10:54:43 2019 -0700

    fix(pinned-search): Fix resetting query params when pin/unpinning searches (#13054)
    
    We should eventually abstract this as this can be a common source of problems/inconsistencies.
    
    Fixes SEN-608

diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index d1f108354b..0f67a1274f 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -119,6 +119,10 @@ class SmartSearchBar extends React.Component {
     excludeEnvironment: PropTypes.bool,
   };
 
+  static contextTypes = {
+    router: PropTypes.object,
+  };
+
   /**
    * Given a query, and the current cursor position, return the string-delimiting
    * index of the search term designated by the cursor.
@@ -536,6 +540,8 @@ class SmartSearchBar extends React.Component {
       pinnedSearch,
     } = this.props;
 
+    const {router} = this.context;
+
     evt.preventDefault();
     evt.stopPropagation();
 
@@ -543,11 +549,18 @@ class SmartSearchBar extends React.Component {
       return;
     }
 
+    // eslint-disable-next-line no-unused-vars
+    const {cursor: _cursor, page: _page, ...currentQuery} = router.location.query;
+
     if (!!pinnedSearch) {
       unpinSearch(api, organization.slug, savedSearchType, pinnedSearch).then(() => {
         browserHistory.push({
+          ...router.location,
           pathname: `/organizations/${organization.slug}/issues/`,
-          query: {query: pinnedSearch.query},
+          query: {
+            ...currentQuery,
+            query: pinnedSearch.query,
+          },
         });
       });
     } else {
@@ -558,9 +571,11 @@ class SmartSearchBar extends React.Component {
         removeSpace(this.state.query)
       ).then(resp => {
         if (resp && resp.id) {
-          browserHistory.push(
-            `/organizations/${organization.slug}/issues/searches/${resp.id}/`
-          );
+          browserHistory.push({
+            ...router.location,
+            pathname: `/organizations/${organization.slug}/issues/searches/${resp.id}/`,
+            query: currentQuery,
+          });
         }
       });
     }
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 239fb19696..18106db94b 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -208,6 +208,7 @@ const OrganizationStream = createReactClass({
       query: this.getQuery(),
       ...selection.datetime,
     };
+
     if (selection.datetime.period) {
       delete params.period;
       params.statsPeriod = selection.datetime.period;
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 451548baac..83fc772d26 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -540,6 +540,10 @@ describe('OrganizationStream', function() {
           isPinned: true,
         },
       });
+      const deletePin = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'DELETE',
+      });
 
       wrapper
         .find('SmartSearchBar input')
@@ -575,7 +579,11 @@ describe('OrganizationStream', function() {
       wrapper.update();
 
       expect(browserHistory.push).toHaveBeenLastCalledWith(
-        '/organizations/org-slug/issues/searches/666/'
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/searches/666/',
+          query: {},
+          search: '',
+        })
       );
 
       wrapper.setProps({
@@ -591,6 +599,22 @@ describe('OrganizationStream', function() {
       expect(wrapper.find('OrganizationSavedSearchSelector ButtonTitle').text()).toBe(
         'My Pinned Search'
       );
+
+      wrapper.find('Button[aria-label="Unpin this search"]').simulate('click');
+
+      expect(deletePin).toHaveBeenCalled();
+
+      await tick();
+      wrapper.update();
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/',
+          query: {
+            query: 'assigned:me level:fatal',
+          },
+        })
+      );
     });
 
     it('pins and unpins a saved query', async function() {
@@ -656,7 +680,9 @@ describe('OrganizationStream', function() {
       wrapper.update();
 
       expect(browserHistory.push).toHaveBeenLastCalledWith(
-        '/organizations/org-slug/issues/searches/789/'
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/searches/789/',
+        })
       );
 
       wrapper.setProps({
@@ -718,7 +744,9 @@ describe('OrganizationStream', function() {
       wrapper.update();
 
       expect(browserHistory.push).toHaveBeenLastCalledWith(
-        '/organizations/org-slug/issues/searches/234/'
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/searches/234/',
+        })
       );
 
       wrapper.setProps({
@@ -736,6 +764,117 @@ describe('OrganizationStream', function() {
       );
     });
 
+    it('pinning and unpinning searches should keep project selected', async function() {
+      savedSearchesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/searches/',
+        body: [savedSearch],
+      });
+      createWrapper({
+        selection: {
+          projects: [123],
+          environments: ['prod'],
+          datetime: {},
+        },
+        location: {query: {project: ['123'], environment: ['prod']}},
+      });
+      await tick();
+      wrapper.update();
+
+      const deletePin = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'DELETE',
+      });
+      const createPin = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'PUT',
+        body: {
+          ...savedSearch,
+          id: '666',
+          name: 'My Pinned Search',
+          query: 'assigned:me level:fatal',
+          isPinned: true,
+        },
+      });
+
+      wrapper
+        .find('SmartSearchBar input')
+        .simulate('change', {target: {value: 'assigned:me level:fatal'}});
+      wrapper.find('SmartSearchBar form').simulate('submit');
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          query: expect.objectContaining({
+            project: [123],
+            environment: ['prod'],
+            query: 'assigned:me level:fatal',
+          }),
+        })
+      );
+
+      const newRouter = {
+        ...router,
+        location: {
+          ...router.location,
+          query: {
+            ...router.location.query,
+            project: [123],
+            environment: ['prod'],
+            query: 'assigned:me level:fatal',
+          },
+        },
+      };
+
+      wrapper.setProps({...newRouter, router: newRouter});
+      wrapper.setContext({router: newRouter});
+      wrapper.update();
+
+      wrapper.find('Button[aria-label="Pin this search"]').simulate('click');
+
+      expect(createPin).toHaveBeenCalled();
+
+      await tick();
+      wrapper.update();
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/searches/666/',
+          query: expect.objectContaining({
+            project: [123],
+            environment: ['prod'],
+            query: 'assigned:me level:fatal',
+          }),
+        })
+      );
+
+      wrapper.setProps({
+        params: {
+          ...router.params,
+          searchId: '666',
+        },
+      });
+
+      await tick();
+      wrapper.update();
+
+      wrapper.find('Button[aria-label="Unpin this search"]').simulate('click');
+
+      expect(deletePin).toHaveBeenCalled();
+
+      await tick();
+      wrapper.update();
+
+      expect(browserHistory.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          pathname: '/organizations/org-slug/issues/',
+          query: expect.objectContaining({
+            project: [123],
+            environment: ['prod'],
+            query: 'assigned:me level:fatal',
+          }),
+        })
+      );
+    });
+
     it.todo('saves a new query');
 
     it.todo('loads pinned search when invalid saved search id is accessed');
