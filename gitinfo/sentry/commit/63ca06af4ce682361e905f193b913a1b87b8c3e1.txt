commit 63ca06af4ce682361e905f193b913a1b87b8c3e1
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Fri Nov 15 15:04:21 2019 -0500

    feat(discover2): Move events details from the modal into its own route (#15562)

diff --git a/src/sentry/static/sentry/app/components/sentryDocumentTitle.tsx b/src/sentry/static/sentry/app/components/sentryDocumentTitle.tsx
index 49e6c056ff..d8a10cc761 100644
--- a/src/sentry/static/sentry/app/components/sentryDocumentTitle.tsx
+++ b/src/sentry/static/sentry/app/components/sentryDocumentTitle.tsx
@@ -1,4 +1,4 @@
-import React, {FunctionComponent, ReactChildren} from 'react';
+import React, {FunctionComponent} from 'react';
 import DocumentTitle from 'react-document-title';
 
 type DocumentTitleProps = {
@@ -6,7 +6,7 @@ type DocumentTitleProps = {
   title: string;
   // Organization or project slug to give title some context
   objSlug: string;
-  children?: ReactChildren;
+  children?: React.ReactNode;
 };
 
 const SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 815e46b792..16cc32b7f4 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1087,10 +1087,24 @@ function routes() {
           <Route
             path="/organizations/:orgId/eventsv2/"
             componentPromise={() =>
-              import(/* webpackChunkName: "EventsV2" */ 'app/views/eventsV2')
+              import(/* webpackChunkName: "DiscoverV2Container" */ 'app/views/eventsV2')
             }
             component={errorHandler(LazyLoad)}
-          />
+          >
+            <IndexRoute
+              componentPromise={() =>
+                import(/* webpackChunkName: "DiscoverV2Landing" */ 'app/views/eventsV2/landing')
+              }
+              component={errorHandler(LazyLoad)}
+            />
+            <Route
+              path=":eventSlug/"
+              componentPromise={() =>
+                import(/* webpackChunkName: "DiscoverV2Details" */ 'app/views/eventsV2/eventDetails')
+              }
+              component={errorHandler(LazyLoad)}
+            />
+          </Route>
           <Route
             path="/organizations/:orgId/monitors/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
new file mode 100644
index 0000000000..72b0ad7e24
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
@@ -0,0 +1,94 @@
+import React from 'react';
+import styled from 'react-emotion';
+import {Location} from 'history';
+
+import {t} from 'app/locale';
+import {Event, Organization} from 'app/types';
+import PageHeading from 'app/components/pageHeading';
+import BetaTag from 'app/components/betaTag';
+import Link from 'app/components/links/link';
+import InlineSvg from 'app/components/inlineSvg';
+
+import EventView from './eventView';
+
+type Props = {
+  eventView: EventView;
+  event: Event | undefined;
+  organization: Organization;
+  location: Location;
+};
+class DiscoverBreadcrumb extends React.Component<Props> {
+  static defaultProps = {
+    event: undefined,
+  };
+
+  getCrumbs(): React.ReactNode {
+    const {eventView, event, organization} = this.props;
+    const crumbs: React.ReactNode[] = [];
+
+    if (eventView && eventView.isValid()) {
+      const target = {
+        pathname: `/organizations/${organization.slug}/eventsv2/`,
+        query: eventView.generateQueryStringObject(),
+      };
+
+      crumbs.push(
+        <span key="eventview-sep">
+          <InlineSvg height="20px" width="20px" src="icon-chevron-right" />
+        </span>
+      );
+      crumbs.push(
+        <CrumbLink to={target} key="eventview-link">
+          {eventView.name}
+        </CrumbLink>
+      );
+    }
+
+    if (event) {
+      crumbs.push(
+        <span key="event-sep">
+          <InlineSvg height="20px" width="20px" src="icon-chevron-right" />
+        </span>
+      );
+      crumbs.push(<span key="event-name">{t('Event Detail')}</span>);
+    }
+
+    return crumbs;
+  }
+
+  render() {
+    const {organization, location, eventView} = this.props;
+
+    const target = {
+      pathname: `/organizations/${organization.slug}/eventsv2/`,
+      query: {
+        ...location.query,
+        ...eventView.generateBlankQueryStringObject(),
+        ...eventView.getGlobalSelection(),
+      },
+    };
+
+    return (
+      <PageHeading>
+        <CrumbLink to={target}>{t('Discover')}</CrumbLink>
+        <BetaTagWrapper>
+          <BetaTag />
+        </BetaTagWrapper>
+        {this.getCrumbs()}
+      </PageHeading>
+    );
+  }
+}
+
+const BetaTagWrapper = styled('span')`
+  margin-right: 0.4em;
+`;
+
+const CrumbLink = styled(Link)`
+  color: ${p => p.theme.gray2};
+  &:hover {
+    color: ${p => p.theme.gray2};
+  }
+`;
+
+export default DiscoverBreadcrumb;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 7f9b568e27..e35274b9fe 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -15,8 +15,8 @@ import {EventViewv1, Organization} from 'app/types';
 import Duration from 'app/components/duration';
 
 import {QueryLink} from './styles';
+import {generateEventDetailsRoute, generateEventSlug} from './eventDetails/utils';
 
-export const MODAL_QUERY_KEYS = ['eventSlug'] as const;
 export const PIN_ICON = `image://${pinIcon}`;
 export const AGGREGATE_ALIASES = ['p95', 'p75', 'last_seen', 'latest_event'] as const;
 
@@ -190,50 +190,7 @@ export const ALL_VIEWS: Readonly<Array<EventViewv1>> = [
   },
 ];
 
-// sample queries for the discover banner
-export const SAMPLE_VIEWS: Readonly<Array<EventViewv1 & {buttonLabel?: string}>> = [
-  {
-    name: t('Content Security Policy (CSP) Report by User'),
-    buttonLabel: t('CSP Reports by User'),
-    data: {
-      fields: ['user', 'count(id)', 'count_unique(title)'],
-      fieldnames: ['User', '# of events', 'reports'],
-      sort: ['-count_id'],
-      query: 'event.type:csp',
-    },
-    tags: [
-      'project.name',
-      'blocked-uri',
-      'browser.name',
-      'os.name',
-      'release',
-      'environment',
-    ],
-  },
-  {
-    name: t('Browsers with most bugs'),
-    data: {
-      fields: ['browser.name', 'count(id)', 'count_unique(issue.id)'],
-      fieldnames: ['Browser', '# of events', 'unique errors'],
-      sort: ['-count_id'],
-      query: 'event.type:error',
-    },
-    tags: ['error.type', 'project.name', 'url', 'release', 'environment'],
-  },
-  {
-    name: t('Top issues this week'),
-    data: {
-      fields: ['title', 'issue.id', 'project', 'count(id)', 'count_unique(user)'],
-      fieldnames: ['Title', 'issue.id', 'project', '# of events', 'users'],
-      sort: ['-count_id'],
-      query: 'event.type:error',
-    },
-    tags: ['project.name', 'release', 'environment'],
-    statsPeriod: '7d',
-  },
-];
-
-type EventData = {[key: string]: any};
+export type EventData = {[key: string]: any};
 
 type RenderFunctionBaggage = {
   organization: Organization;
@@ -350,15 +307,20 @@ export const FIELD_FORMATTERS: FieldFormatters = {
 
 const eventLink = (
   location: Location,
+  organization: Organization,
   data: EventData,
   content: string | React.ReactNode
 ): React.ReactNode => {
-  const id = data.id || data.latest_event;
+  const eventSlug = generateEventSlug(data);
+  const pathname = generateEventDetailsRoute({
+    organization,
+    eventSlug,
+  });
+
   const target = {
-    pathname: location.pathname,
+    pathname,
     query: {
       ...location.query,
-      eventSlug: `${data['project.name']}:${id}`,
     },
   };
   return <OverflowLink to={target}>{content}</OverflowLink>;
@@ -378,28 +340,28 @@ type LinkFormatters = {
 };
 
 export const LINK_FORMATTERS: LinkFormatters = {
-  string: (field, data, {location}) => {
-    return <Container>{eventLink(location, data, data[field])}</Container>;
+  string: (field, data, {location, organization}) => {
+    return <Container>{eventLink(location, organization, data, data[field])}</Container>;
   },
-  number: (field, data, {location}) => {
+  number: (field, data, {location, organization}) => {
     return (
       <NumberContainer>
         {typeof data[field] === 'number'
-          ? eventLink(location, data, <Count value={data[field]} />)
+          ? eventLink(location, organization, data, <Count value={data[field]} />)
           : emptyValue}
       </NumberContainer>
     );
   },
-  integer: (field, data, {location}) => {
+  integer: (field, data, {location, organization}) => {
     return (
       <NumberContainer>
         {typeof data[field] === 'number'
-          ? eventLink(location, data, <Count value={data[field]} />)
+          ? eventLink(location, organization, data, <Count value={data[field]} />)
           : emptyValue}
       </NumberContainer>
     );
   },
-  date: (field, data, {location}) => {
+  date: (field, data, {location, organization}) => {
     let content = emptyValue;
     if (data[field]) {
       content = getDynamicText({
@@ -407,7 +369,7 @@ export const LINK_FORMATTERS: LinkFormatters = {
         fixed: <span>timestamp</span>,
       });
     }
-    return <Container>{eventLink(location, data, content)}</Container>;
+    return <Container>{eventLink(location, organization, data, content)}</Container>;
   },
 };
 
@@ -452,14 +414,16 @@ export const SPECIAL_FIELDS: SpecialFields = {
   },
   transaction: {
     sortField: 'transaction',
-    renderFunc: (data, {location}) => {
-      const id = data.id || data.latest_event;
+    renderFunc: (data, {location, organization}) => {
+      const eventSlug = generateEventSlug(data);
+      const pathname = generateEventDetailsRoute({
+        organization,
+        eventSlug,
+      });
+
       const target = {
-        pathname: location.pathname,
-        query: {
-          ...location.query,
-          eventSlug: `${data['project.name']}:${id}`,
-        },
+        pathname,
+        query: {...location.query},
       };
       return (
         <Container>
@@ -472,11 +436,16 @@ export const SPECIAL_FIELDS: SpecialFields = {
   },
   title: {
     sortField: 'title',
-    renderFunc: (data, {location}) => {
-      const id = data.id || data.latest_event;
+    renderFunc: (data, {location, organization}) => {
+      const eventSlug = generateEventSlug(data);
+      const pathname = generateEventDetailsRoute({
+        organization,
+        eventSlug,
+      });
+
       const target = {
-        pathname: location.pathname,
-        query: {...location.query, eventSlug: `${data['project.name']}:${id}`},
+        pathname,
+        query: {...location.query},
       };
       return (
         <Container>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails.tsx
deleted file mode 100644
index decb35d6d2..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails.tsx
+++ /dev/null
@@ -1,138 +0,0 @@
-import {Params} from 'react-router/lib/Router';
-import {browserHistory} from 'react-router';
-import styled, {css} from 'react-emotion';
-import omit from 'lodash/omit';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {Location} from 'history';
-import {Organization, Event} from 'app/types';
-import AsyncComponent from 'app/components/asyncComponent';
-import LoadingMask from 'app/components/loadingMask';
-import ModalDialog from 'app/components/modalDialog';
-import NotFound from 'app/components/errors/notFound';
-import SentryTypes from 'app/sentryTypes';
-import space from 'app/styles/space';
-import theme from 'app/utils/theme';
-
-import {EventQuery} from './utils';
-import EventModalContent from './eventModalContent';
-import EventView from './eventView';
-
-const slugValidator = function(
-  props: {[key: string]: any},
-  propName: string,
-  componentName: string
-) {
-  const value = props[propName];
-  // Accept slugs that look like:
-  // * project-slug:deadbeef
-  if (value && typeof value === 'string' && !/^(?:[^:]+):(?:[a-f0-9-]+)$/.test(value)) {
-    return new Error(`Invalid value for ${propName} provided to ${componentName}.`);
-  }
-  return null;
-};
-
-const modalStyles = css`
-  top: 0px;
-  left: 0px;
-  right: 0px;
-
-  margin: ${space(3)};
-  padding: ${space(3)};
-
-  @media (max-width: ${theme.breakpoints[1]}) {
-    margin: ${space(2)};
-  }
-`;
-
-type Props = {
-  organization: Organization;
-  location: Location;
-  eventSlug: string;
-  params: Params;
-  eventView: EventView;
-};
-
-type State = {
-  event: Event;
-};
-
-class EventDetails extends AsyncComponent<Props, State & AsyncComponent['state']> {
-  shouldReload = true;
-
-  static propTypes: any = {
-    organization: SentryTypes.Organization.isRequired,
-    eventSlug: slugValidator,
-    location: PropTypes.object.isRequired,
-  };
-
-  getEndpoints(): Array<[string, string, {query: EventQuery}]> {
-    const {organization, eventSlug, eventView, location} = this.props;
-    const query = eventView.getEventsAPIPayload(location);
-    const url = `/organizations/${organization.slug}/events/${eventSlug}/`;
-
-    // Get a specific event. This could be coming from
-    // a paginated group or standalone event.
-    return [['event', url, {query}]];
-  }
-
-  onDismiss = () => {
-    const {location} = this.props;
-    // Remove modal related query parameters.
-    const query = omit(location.query, ['eventSlug']);
-
-    browserHistory.push({
-      pathname: location.pathname,
-      query,
-    });
-  };
-
-  get projectId() {
-    return this.props.eventSlug.split(':')[0];
-  }
-
-  renderBody() {
-    const {organization, eventView, location} = this.props;
-    const {event, reloading} = this.state;
-
-    return (
-      <ModalDialog onDismiss={this.onDismiss} className={modalStyles}>
-        {reloading && <StyledLoadingMask />}
-        <EventModalContent
-          event={event}
-          projectId={this.projectId}
-          organization={organization}
-          eventView={eventView}
-          location={location}
-        />
-      </ModalDialog>
-    );
-  }
-
-  renderError(error) {
-    const notFound = Object.values(this.state.errors).find(
-      resp => resp && resp.status === 404
-    );
-    return (
-      <ModalDialog onDismiss={this.onDismiss} className={modalStyles}>
-        {notFound ? <NotFound /> : super.renderError(error, true, true)}
-      </ModalDialog>
-    );
-  }
-
-  renderLoading() {
-    return (
-      <ModalDialog onDismiss={this.onDismiss} className={modalStyles}>
-        {super.renderLoading()}
-      </ModalDialog>
-    );
-  }
-}
-
-export default EventDetails;
-
-const StyledLoadingMask = styled(LoadingMask)`
-  z-index: 999999999;
-  opacity: 0.8;
-`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
new file mode 100644
index 0000000000..92793b49a6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
@@ -0,0 +1,318 @@
+import React from 'react';
+import {Params} from 'react-router/lib/Router';
+import {Location} from 'history';
+import styled from 'react-emotion';
+import PropTypes from 'prop-types';
+
+import space from 'app/styles/space';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import {Client} from 'app/api';
+import withApi from 'app/utils/withApi';
+import {getMessage, getTitle} from 'app/utils/events';
+import {Organization, Event} from 'app/types';
+import SentryTypes from 'app/sentryTypes';
+import getDynamicText from 'app/utils/getDynamicText';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import DateTime from 'app/components/dateTime';
+import ExternalLink from 'app/components/links/externalLink';
+import FileSize from 'app/components/fileSize';
+import {PageHeader} from 'app/styles/organization';
+import NotFound from 'app/components/errors/notFound';
+import AsyncComponent from 'app/components/asyncComponent';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+
+import EventView from '../eventView';
+import {hasAggregateField, EventQuery, generateTitle} from '../utils';
+import Pagination from './pagination';
+import LineGraph from './lineGraph';
+import RelatedEvents from '../relatedEvents';
+import TagsTable from '../tagsTable';
+import EventInterfaces from '../eventInterfaces';
+import LinkedIssuePreview from '../linkedIssuePreview';
+import DiscoverBreadcrumb from '../breadcrumb';
+
+const slugValidator = function(
+  props: {[key: string]: any},
+  propName: string,
+  componentName: string
+) {
+  const value = props[propName];
+  // Accept slugs that look like:
+  // * project-slug:deadbeef
+  if (value && typeof value === 'string' && !/^(?:[^:]+):(?:[a-f0-9-]+)$/.test(value)) {
+    return new Error(`Invalid value for ${propName} provided to ${componentName}.`);
+  }
+  return null;
+};
+
+type Props = {
+  organization: Organization;
+  location: Location;
+  params: Params;
+  api: Client;
+  eventSlug: string;
+  eventView: EventView;
+};
+
+type State = {
+  event: Event | undefined;
+};
+
+class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['state']> {
+  static propTypes: any = {
+    organization: SentryTypes.Organization.isRequired,
+    eventSlug: slugValidator,
+    location: PropTypes.object.isRequired,
+  };
+
+  getEndpoints(): Array<[string, string, {query: EventQuery}]> {
+    const {organization, params, location, eventView} = this.props;
+    const {eventSlug} = params;
+
+    const query = eventView.getEventsAPIPayload(location);
+
+    const url = `/organizations/${organization.slug}/events/${eventSlug}/`;
+
+    // Get a specific event. This could be coming from
+    // a paginated group or standalone event.
+    return [['event', url, {query}]];
+  }
+
+  get projectId() {
+    return this.props.eventSlug.split(':')[0];
+  }
+
+  renderBody() {
+    const {event} = this.state;
+
+    if (!event) {
+      return this.renderWrapper(<NotFound />);
+    }
+
+    return this.renderWrapper(this.renderContent(event));
+  }
+
+  renderContent(event: Event) {
+    const {organization, location, eventView} = this.props;
+
+    // metrics
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.event_details',
+      eventName: 'Discoverv2: Opened Event Details',
+      event_type: event.type,
+      organization_id: organization.id,
+    });
+
+    // Having an aggregate field means we want to show pagination/graphs
+    const isGroupedView = hasAggregateField(eventView);
+
+    return (
+      <ColumnGrid>
+        <HeaderBox>
+          <EventHeader event={event} />
+          {isGroupedView && (
+            <Pagination event={event} organization={organization} eventView={eventView} />
+          )}
+          {isGroupedView &&
+            getDynamicText({
+              value: (
+                <LineGraph
+                  organization={organization}
+                  currentEvent={event}
+                  location={location}
+                  eventView={eventView}
+                />
+              ),
+              fixed: 'events chart',
+            })}
+        </HeaderBox>
+        <ContentColumn>
+          <EventInterfaces event={event} projectId={this.projectId} />
+        </ContentColumn>
+        <SidebarColumn>
+          {event.groupID && (
+            <LinkedIssuePreview groupId={event.groupID} eventId={event.eventID} />
+          )}
+          {event.type === 'transaction' && (
+            <RelatedEvents
+              organization={organization}
+              event={event}
+              location={location}
+              eventView={eventView}
+            />
+          )}
+          <EventMetadata
+            event={event}
+            organization={organization}
+            projectId={this.projectId}
+          />
+          <SidebarBlock>
+            <TagsTable tags={event.tags} />
+          </SidebarBlock>
+        </SidebarColumn>
+      </ColumnGrid>
+    );
+  }
+
+  renderError(error) {
+    const notFound = Object.values(this.state.errors).find(
+      resp => resp && resp.status === 404
+    );
+
+    if (notFound) {
+      return this.renderWrapper(<NotFound />);
+    }
+
+    return this.renderWrapper(super.renderError(error, true, true));
+  }
+
+  renderLoading() {
+    return this.renderWrapper(super.renderLoading());
+  }
+
+  renderWrapper(children: React.ReactNode) {
+    const {organization, location, eventView} = this.props;
+    const {event} = this.state;
+
+    return (
+      <EventDetailsWrapper
+        organization={organization}
+        location={location}
+        eventView={eventView}
+        event={event}
+      >
+        {children}
+      </EventDetailsWrapper>
+    );
+  }
+}
+
+type EventDetailsWrapperProps = {
+  organization: Organization;
+  location: Location;
+  eventView: EventView;
+  event: Event | undefined;
+  children: React.ReactNode;
+};
+
+class EventDetailsWrapper extends React.Component<EventDetailsWrapperProps> {
+  getDocumentTitle = (): string => {
+    const {event, eventView} = this.props;
+
+    return generateTitle({
+      eventView,
+      event,
+    });
+  };
+
+  render() {
+    const {organization, location, eventView, event, children} = this.props;
+
+    return (
+      <SentryDocumentTitle title={this.getDocumentTitle()} objSlug={organization.slug}>
+        <React.Fragment>
+          <PageHeader>
+            <DiscoverBreadcrumb
+              eventView={eventView}
+              event={event}
+              organization={organization}
+              location={location}
+            />
+          </PageHeader>
+          {children}
+        </React.Fragment>
+      </SentryDocumentTitle>
+    );
+  }
+}
+
+const EventHeader = (props: {event: Event}) => {
+  const {title} = getTitle(props.event);
+  return (
+    <div data-test-id="event-header">
+      <OverflowHeader>{title}</OverflowHeader>
+      <p>{getMessage(props.event)}</p>
+    </div>
+  );
+};
+
+const OverflowHeader = styled('h2')`
+  line-height: 1.2;
+  ${overflowEllipsis}
+`;
+
+const MetadataContainer = styled('div')`
+  display: flex;
+  justify-content: space-between;
+
+  color: ${p => p.theme.gray3};
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+/**
+ * Render metadata about the event and provide a link to the JSON blob
+ */
+const EventMetadata = (props: {
+  event: Event;
+  organization: Organization;
+  projectId: string;
+}) => {
+  const {event, organization, projectId} = props;
+
+  const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${
+    event.eventID
+  }/json/`;
+
+  return (
+    <SidebarBlock withSeparator>
+      <MetadataContainer data-test-id="event-id">ID {event.eventID}</MetadataContainer>
+      <MetadataContainer>
+        <DateTime
+          date={getDynamicText({
+            value: event.dateCreated || (event.endTimestamp || 0) * 1000,
+            fixed: 'Dummy timestamp',
+          })}
+        />
+        <ExternalLink href={eventJsonUrl} className="json-link">
+          JSON (<FileSize bytes={event.size} />)
+        </ExternalLink>
+      </MetadataContainer>
+    </SidebarBlock>
+  );
+};
+
+const ColumnGrid = styled('div')`
+  display: grid;
+
+  grid-template-columns: 70% 28%;
+  grid-template-rows: auto;
+  grid-column-gap: 2%;
+
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    grid-template-columns: 60% 38%;
+  }
+
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    display: flex;
+    flex-direction: column;
+  }
+`;
+
+const HeaderBox = styled('div')`
+  grid-column: 1 / 3;
+`;
+const ContentColumn = styled('div')`
+  grid-column: 1 / 2;
+`;
+
+const SidebarColumn = styled('div')`
+  grid-column: 2 / 3;
+`;
+
+const SidebarBlock = styled('div')<{withSeparator?: boolean; theme?: any}>`
+  margin: 0 0 ${space(2)} 0;
+  padding: 0 0 ${space(2)} 0;
+  ${p => (p.withSeparator ? `border-bottom: 1px solid ${p.theme.borderLight};` : '')}
+`;
+
+export default withApi(EventDetailsContent);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx
new file mode 100644
index 0000000000..738d890834
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx
@@ -0,0 +1,84 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {Params} from 'react-router/lib/Router';
+import {Location} from 'history';
+
+import {t} from 'app/locale';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import {PageContent} from 'app/styles/organization';
+import NoProjectMessage from 'app/components/noProjectMessage';
+import {Organization} from 'app/types';
+import SentryTypes from 'app/sentryTypes';
+import withOrganization from 'app/utils/withOrganization';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+
+import EventView from '../eventView';
+import EventDetailsContent from './content';
+
+type Props = {
+  organization: Organization;
+  location: Location;
+  params: Params;
+};
+
+class EventDetails extends React.Component<Props> {
+  static propTypes: any = {
+    organization: SentryTypes.Organization.isRequired,
+    location: PropTypes.object.isRequired,
+  };
+
+  getEventSlug = (): string => {
+    const {eventSlug} = this.props.params;
+
+    if (typeof eventSlug === 'string') {
+      return eventSlug.trim();
+    }
+
+    return '';
+  };
+
+  getEventView = (): EventView => {
+    const {location} = this.props;
+
+    return EventView.fromLocation(location);
+  };
+
+  getDocumentTitle = (name: string | undefined): Array<string> => {
+    return typeof name === 'string' && String(name).trim().length > 0
+      ? [String(name).trim(), t('Discover')]
+      : [t('Discover')];
+  };
+
+  render() {
+    const {organization, location, params} = this.props;
+    const eventView = this.getEventView();
+
+    const documentTitle = this.getDocumentTitle(eventView.name).join(' - ');
+
+    return (
+      <SentryDocumentTitle title={documentTitle} objSlug={organization.slug}>
+        <React.Fragment>
+          <GlobalSelectionHeader organization={organization} />
+          <PageContent>
+            <NoProjectMessage organization={organization}>
+              <EventDetailsContent
+                organization={organization}
+                location={location}
+                params={params}
+                eventView={eventView}
+                eventSlug={this.getEventSlug()}
+              />
+            </NoProjectMessage>
+          </PageContent>
+        </React.Fragment>
+      </SentryDocumentTitle>
+    );
+  }
+}
+
+export default withOrganization(EventDetails);
+
+// const StyledLoadingMask = styled(LoadingMask)`
+//   z-index: 999999999;
+//   opacity: 0.8;
+// `;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/modalLineGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/eventsV2/modalLineGraph.tsx
rename to src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
index 22f9125484..8d04149811 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/modalLineGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
@@ -2,7 +2,6 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import {browserHistory} from 'react-router';
 import {Location} from 'history';
-import omit from 'lodash/omit';
 
 import {Client} from 'app/api';
 import {t} from 'app/locale';
@@ -22,8 +21,9 @@ import withGlobalSelection from 'app/utils/withGlobalSelection';
 import theme from 'app/utils/theme';
 import {Event, Organization, GlobalSelection} from 'app/types';
 
-import {MODAL_QUERY_KEYS, PIN_ICON} from './data';
-import EventView from './eventView';
+import {generateEventDetailsRoute, generateEventSlug} from './utils';
+import {PIN_ICON} from '../data';
+import EventView from '../eventView';
 
 /**
  * Generate the data to display a vertical line for the current
@@ -68,14 +68,32 @@ const getCurrentEventMarker = (currentEvent: Event) => {
 /**
  * Handle click events on line markers
  *
- * When a user clicks on a marker we want to update the modal
+ * When a user clicks on a marker we want to update the events details page
  * to display an event from that time slice. While each graph slice
  * could contain thousands of events, we do a search to get the latest
  * event in the slice.
  */
 const handleClick = async function(
   series,
-  {api, currentEvent, organization, queryString, field, interval, selection, location}
+  {
+    api,
+    currentEvent,
+    organization,
+    queryString,
+    field,
+    interval,
+    selection,
+    eventView,
+  }: {
+    api: Client;
+    currentEvent: Event;
+    organization: Organization;
+    queryString: string;
+    field: string[];
+    interval: string;
+    selection: GlobalSelection;
+    eventView: EventView;
+  }
 ) {
   // Get the timestamp that was clicked.
   const value = series.value[0];
@@ -121,16 +139,15 @@ const handleClick = async function(
   }
 
   const event = response.data[0];
+  const eventSlug = generateEventSlug(event);
+
   browserHistory.push({
-    pathname: location.pathname,
-    query: {
-      ...omit(location.query, MODAL_QUERY_KEYS),
-      eventSlug: `${event['project.name']}:${event.id || event.latest_event}`,
-    },
+    pathname: generateEventDetailsRoute({eventSlug, organization}),
+    query: eventView.generateQueryStringObject(),
   });
 };
 
-type ModalLineGraphProps = {
+type LineGraphProps = {
   api: Client;
   organization: Organization;
   location: Location;
@@ -142,7 +159,7 @@ type ModalLineGraphProps = {
 /**
  * Render a graph of event volumes for the current group + event.
  */
-const ModalLineGraph = (props: ModalLineGraphProps) => {
+const LineGraph = (props: LineGraphProps) => {
   const {api, organization, location, selection, currentEvent, eventView} = props;
 
   const isUtc = selection.datetime.utc;
@@ -205,8 +222,8 @@ const ModalLineGraph = (props: ModalLineGraphProps) => {
                 currentEvent,
                 interval,
                 selection,
-                location,
                 queryString,
+                eventView,
               })
             }
             tooltip={tooltip}
@@ -221,7 +238,7 @@ const ModalLineGraph = (props: ModalLineGraphProps) => {
     </Panel>
   );
 };
-ModalLineGraph.propTypes = {
+LineGraph.propTypes = {
   api: PropTypes.object.isRequired,
   currentEvent: SentryTypes.Event.isRequired,
   location: PropTypes.object.isRequired,
@@ -229,4 +246,4 @@ ModalLineGraph.propTypes = {
   selection: PropTypes.object.isRequired,
 } as any;
 
-export default withGlobalSelection(withApi(ModalLineGraph));
+export default withGlobalSelection(withApi(LineGraph));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/modalPagination.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
similarity index 77%
rename from src/sentry/static/sentry/app/views/eventsV2/modalPagination.tsx
rename to src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
index 23f936b9fc..d97b2d9f38 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/modalPagination.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
@@ -1,18 +1,15 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 import isPropValid from '@emotion/is-prop-valid';
-import omit from 'lodash/omit';
-import {Location} from 'history';
 
 import {t} from 'app/locale';
 import Link from 'app/components/links/link';
-import SentryTypes from 'app/sentryTypes';
 import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
-import {Event} from 'app/types';
+import {Event, Organization} from 'app/types';
 
-import {MODAL_QUERY_KEYS} from './data';
+import {generateEventDetailsRoute} from './utils';
+import EventView from '../eventView';
 
 type LinksType = {
   oldest: null;
@@ -25,10 +22,11 @@ type LinksType = {
 /**
  * Generate a mapping of link names => link targets for pagination
  */
-function buildTargets(event: Event, location: Location): LinksType {
-  // Remove slug related keys as we need to create new ones
-  const baseQuery = omit(location.query, MODAL_QUERY_KEYS);
-
+function buildTargets(
+  event: Event,
+  eventView: EventView,
+  organization: Organization
+): LinksType {
   const urlMap: {[k in keyof LinksType]: string | undefined | null} = {
     previous: event.previousEventID,
     next: event.nextEventID,
@@ -43,12 +41,11 @@ function buildTargets(event: Event, location: Location): LinksType {
     if (!value) {
       links[key] = null;
     } else {
+      const eventSlug = `${event.projectSlug}:${value}`;
+
       links[key] = {
-        pathname: location.pathname,
-        query: {
-          ...baseQuery,
-          eventSlug: `${event.projectSlug}:${value}`,
-        },
+        pathname: generateEventDetailsRoute({eventSlug, organization}),
+        query: eventView.generateQueryStringObject(),
       };
     }
   });
@@ -58,12 +55,13 @@ function buildTargets(event: Event, location: Location): LinksType {
 
 type Props = {
   event: Event;
-  location: Location;
+  organization: Organization;
+  eventView: EventView;
 };
 
-const ModalPagination = (props: Props) => {
-  const {event, location} = props;
-  const links = buildTargets(event, location);
+const Pagination = (props: Props) => {
+  const {event, organization, eventView} = props;
+  const links = buildTargets(event, eventView, organization);
 
   return (
     <Wrapper>
@@ -99,10 +97,6 @@ const ModalPagination = (props: Props) => {
     </Wrapper>
   );
 };
-ModalPagination.propTypes = {
-  location: PropTypes.object.isRequired,
-  event: SentryTypes.Event.isRequired,
-};
 
 const StyledLink = styled(Link, {
   shouldForwardProp: isPropValid,
@@ -141,4 +135,4 @@ const ShadowBox = styled('div')`
   }
 `;
 
-export default ModalPagination;
+export default Pagination;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx
new file mode 100644
index 0000000000..0ad3ba3e08
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx
@@ -0,0 +1,19 @@
+import {Organization} from 'app/types';
+
+import {EventData} from '../data';
+
+export function generateEventDetailsRoute({
+  eventSlug,
+  organization,
+}: {
+  eventSlug: string;
+  organization: Organization;
+}): string {
+  return `/organizations/${organization.slug}/eventsv2/${eventSlug}/`;
+}
+
+export function generateEventSlug(eventData: EventData): string {
+  const id = eventData.id || eventData.latest_event;
+
+  return `${eventData['project.name']}:${id}`;
+}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventModalContent.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventModalContent.tsx
deleted file mode 100644
index 7bb5f00d11..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/eventModalContent.tsx
+++ /dev/null
@@ -1,199 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-import {Location} from 'history';
-
-import SentryTypes from 'app/sentryTypes';
-import DateTime from 'app/components/dateTime';
-import ExternalLink from 'app/components/links/externalLink';
-import FileSize from 'app/components/fileSize';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
-import space from 'app/styles/space';
-import getDynamicText from 'app/utils/getDynamicText';
-import {getMessage, getTitle} from 'app/utils/events';
-import {Event, Organization} from 'app/types';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
-
-import EventInterfaces from './eventInterfaces';
-import LinkedIssuePreview from './linkedIssuePreview';
-import ModalPagination from './modalPagination';
-import ModalLineGraph from './modalLineGraph';
-import RelatedEvents from './relatedEvents';
-import TagsTable from './tagsTable';
-import {hasAggregateField} from './utils';
-import EventView from './eventView';
-
-type EventModalContentProps = {
-  event: Event;
-  projectId: string;
-  organization: Organization;
-  location: Location;
-  eventView: EventView;
-};
-
-/**
- * Render the columns and navigation elements inside the event modal view.
- * Controlled by the EventDetails View.
- */
-class EventModalContent extends React.Component<EventModalContentProps> {
-  static propTypes = {
-    event: SentryTypes.Event.isRequired,
-    projectId: PropTypes.string.isRequired,
-    organization: SentryTypes.Organization.isRequired,
-    location: PropTypes.object.isRequired,
-  };
-
-  componentDidMount() {
-    const {event, organization} = this.props;
-    // metrics
-    trackAnalyticsEvent({
-      eventKey: 'discover_v2.event_details',
-      eventName: 'Discoverv2: Opened Event Details',
-      event_type: event.type,
-      organization_id: organization.id,
-    });
-  }
-
-  render() {
-    const {event, projectId, organization, location, eventView} = this.props;
-
-    // Having an aggregate field means we want to show pagination/graphs
-    const isGroupedView = hasAggregateField(eventView);
-    const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${
-      event.eventID
-    }/json/`;
-
-    return (
-      <ColumnGrid>
-        <HeaderBox>
-          <EventHeader event={event} />
-          {isGroupedView && <ModalPagination event={event} location={location} />}
-          {isGroupedView &&
-            getDynamicText({
-              value: (
-                <ModalLineGraph
-                  organization={organization}
-                  currentEvent={event}
-                  location={location}
-                  eventView={eventView}
-                />
-              ),
-              fixed: 'events chart',
-            })}
-        </HeaderBox>
-        <ContentColumn>
-          <EventInterfaces event={event} projectId={projectId} />
-        </ContentColumn>
-        <SidebarColumn>
-          {event.groupID && (
-            <LinkedIssuePreview groupId={event.groupID} eventId={event.eventID} />
-          )}
-          {event.type === 'transaction' && (
-            <RelatedEvents
-              organization={organization}
-              event={event}
-              location={location}
-            />
-          )}
-          <EventMetadata event={event} eventJsonUrl={eventJsonUrl} />
-          <SidebarBlock>
-            <TagsTable tags={event.tags} />
-          </SidebarBlock>
-        </SidebarColumn>
-      </ColumnGrid>
-    );
-  }
-}
-
-/**
- * Render the header of the modal content
- */
-const EventHeader = props => {
-  const {title} = getTitle(props.event);
-  return (
-    <div>
-      <OverflowHeader>{title}</OverflowHeader>
-      <p>{getMessage(props.event)}</p>
-    </div>
-  );
-};
-EventHeader.propTypes = {
-  event: SentryTypes.Event.isRequired,
-};
-
-/**
- * Render metadata about the event and provide a link to the JSON blob
- */
-const EventMetadata = (props: {event: Event; eventJsonUrl: string}) => {
-  const {event, eventJsonUrl} = props;
-
-  return (
-    <SidebarBlock withSeparator>
-      <MetadataContainer data-test-id="event-id">ID {event.eventID}</MetadataContainer>
-      <MetadataContainer>
-        <DateTime
-          date={getDynamicText({
-            value: event.dateCreated || (event.endTimestamp || 0) * 1000,
-            fixed: 'Dummy timestamp',
-          })}
-        />
-        <ExternalLink href={eventJsonUrl} className="json-link">
-          JSON (<FileSize bytes={event.size} />)
-        </ExternalLink>
-      </MetadataContainer>
-    </SidebarBlock>
-  );
-};
-EventMetadata.propTypes = {
-  event: SentryTypes.Event.isRequired,
-  eventJsonUrl: PropTypes.string.isRequired,
-};
-
-const OverflowHeader = styled('h2')`
-  line-height: 1.2;
-  ${overflowEllipsis}
-`;
-
-const MetadataContainer = styled('div')`
-  display: flex;
-  justify-content: space-between;
-
-  color: ${p => p.theme.gray3};
-  font-size: ${p => p.theme.fontSizeMedium};
-`;
-
-const ColumnGrid = styled('div')`
-  display: grid;
-
-  grid-template-columns: 70% 28%;
-  grid-template-rows: auto;
-  grid-column-gap: 2%;
-
-  @media (max-width: ${p => p.theme.breakpoints[1]}) {
-    grid-template-columns: 60% 38%;
-  }
-
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    display: flex;
-    flex-direction: column;
-  }
-`;
-
-const HeaderBox = styled('div')`
-  grid-column: 1 / 3;
-`;
-const ContentColumn = styled('div')`
-  grid-column: 1 / 2;
-`;
-
-const SidebarColumn = styled('div')`
-  grid-column: 2 / 3;
-`;
-
-const SidebarBlock = styled('div')<{withSeparator?: boolean; theme?: any}>`
-  margin: 0 0 ${space(2)} 0;
-  padding: 0 0 ${space(2)} 0;
-  ${p => (p.withSeparator ? `border-bottom: 1px solid ${p.theme.borderLight};` : '')}
-`;
-
-export default EventModalContent;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 0c2d6ca096..ff5ae11e87 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -323,9 +323,15 @@ class EventView {
     environment: Readonly<string[]>;
     yAxis: string | undefined;
   }) {
+    const fields = Array.isArray(props.fields) ? props.fields : [];
+    let sorts = Array.isArray(props.sorts) ? props.sorts : [];
+    const tags = Array.isArray(props.tags) ? props.tags : [];
+    const project = Array.isArray(props.project) ? props.project : [];
+    const environment = Array.isArray(props.environment) ? props.environment : [];
+
     // only include sort keys that are included in the fields
 
-    const sortKeys = props.fields
+    const sortKeys = fields
       .map(field => {
         return getSortKeyFromFieldWithoutMeta(field);
       })
@@ -335,25 +341,25 @@ class EventView {
         }
       );
 
-    const sort = props.sorts.find(currentSort => {
+    const sort = sorts.find(currentSort => {
       return sortKeys.includes(currentSort.field);
     });
 
-    const sorts = sort ? [sort] : [];
+    sorts = sort ? [sort] : [];
 
     const id = props.id !== null && props.id !== void 0 ? String(props.id) : void 0;
 
     this.id = id;
     this.name = props.name;
-    this.fields = props.fields;
+    this.fields = fields;
     this.sorts = sorts;
-    this.tags = props.tags;
+    this.tags = tags;
     this.query = typeof props.query === 'string' ? props.query : '';
-    this.project = props.project;
+    this.project = project;
     this.start = props.start;
     this.end = props.end;
     this.statsPeriod = props.statsPeriod;
-    this.environment = props.environment;
+    this.environment = environment;
     this.yAxis = props.yAxis;
   }
 
@@ -527,6 +533,35 @@ class EventView {
     return newQuery;
   }
 
+  getGlobalSelection() {
+    return {
+      start: this.start,
+      end: this.end,
+      statsPeriod: this.statsPeriod,
+      project: this.project,
+      environment: this.environment,
+    };
+  }
+
+  generateBlankQueryStringObject(): Query {
+    const output = {
+      id: undefined,
+      name: undefined,
+      field: undefined,
+      fieldnames: undefined,
+      sort: undefined,
+      tag: undefined,
+      query: undefined,
+      yAxis: undefined,
+    };
+
+    for (const field of EXTERNAL_QUERY_STRING_KEYS) {
+      output[field] = undefined;
+    }
+
+    return cloneDeep(output as any);
+  }
+
   generateQueryStringObject(): Query {
     const output = {
       id: this.id,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
index e93fa092d6..47ef9249cd 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
@@ -1,213 +1,43 @@
 import React from 'react';
-import DocumentTitle from 'react-document-title';
-import PropTypes from 'prop-types';
-import styled from 'react-emotion';
-import * as ReactRouter from 'react-router';
-import {Params} from 'react-router/lib/Router';
-import {Location} from 'history';
 
 import {t} from 'app/locale';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
-import SentryTypes from 'app/sentryTypes';
 import {Organization} from 'app/types';
-import localStorage from 'app/utils/localStorage';
-import withOrganization from 'app/utils/withOrganization';
-
-import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
-import PageHeading from 'app/components/pageHeading';
-import Banner from 'app/components/banner';
-import Button from 'app/components/button';
-import BetaTag from 'app/components/betaTag';
+import {PageContent} from 'app/styles/organization';
+import SentryTypes from 'app/sentryTypes';
 import Feature from 'app/components/acl/feature';
-import SearchBar from 'app/views/events/searchBar';
-import NoProjectMessage from 'app/components/noProjectMessage';
-
-import {PageContent, PageHeader} from 'app/styles/organization';
-import space from 'app/styles/space';
-
-import Events from './events';
-import EventDetails from './eventDetails';
-import SavedQueryButtonGroup from './savedQuery';
-import EventView from './eventView';
-import EventInputName from './eventInputName';
-import {getFirstQueryString} from './utils';
-import QueryList from './queryList';
-import {DEFAULT_EVENT_VIEW_V1} from './data';
-
-const DISPLAY_SEARCH_BAR_FLAG = false;
+import Alert from 'app/components/alert';
+import withOrganization from 'app/utils/withOrganization';
 
 type Props = {
   organization: Organization;
-  location: Location;
-  router: ReactRouter.InjectedRouter;
-  params: Params;
 };
 
-class EventsV2 extends React.Component<Props> {
-  static propTypes: any = {
+class DiscoverContainer extends React.Component<Props> {
+  static propTypes = {
     organization: SentryTypes.Organization.isRequired,
-    location: PropTypes.object.isRequired,
-    router: PropTypes.object.isRequired,
-  };
-
-  state = {
-    isBannerHidden: localStorage.getItem('discover-banner-dismissed'),
-  };
-
-  getDocumentTitle = (name: string | undefined): Array<string> => {
-    return typeof name === 'string' && String(name).trim().length > 0
-      ? [String(name).trim(), t('Discover')]
-      : [t('Discover')];
-  };
-
-  handleClick = () => {
-    localStorage.setItem('discover-banner-dismissed', true);
-    this.setState({isBannerHidden: true});
   };
 
-  renderBanner() {
-    const bannerDismissed = localStorage.getItem('discover-banner-dismissed');
-
-    if (bannerDismissed) {
-      return null;
-    }
-
+  renderNoAccess() {
     return (
-      <Banner
-        title={t('Discover')}
-        subtitle={t('Customize your query searches')}
-        onCloseClick={this.handleClick}
-      >
-        <Button>{t('Build a new query')}</Button>
-      </Banner>
-    );
-  }
-
-  renderActions() {
-    const eventView = EventView.fromEventViewv1(DEFAULT_EVENT_VIEW_V1);
-
-    const to = {
-      pathname: location.pathname,
-      query: {
-        ...eventView.generateQueryStringObject(),
-      },
-    };
-
-    return (
-      <StyledActions>
-        <StyledSearchBar />
-        <Button
-          priority="primary"
-          to={to}
-          onClick={() => {
-            trackAnalyticsEvent({
-              eventKey: 'discover_v2.prebuilt_query_click',
-              eventName: 'Discoverv2: Click a pre-built query',
-              organization_id: this.props.organization.id,
-              query_name: eventView.name,
-            });
-          }}
-        >
-          {t('Build a new query')}
-        </Button>
-      </StyledActions>
-    );
-  }
-
-  renderNewQuery() {
-    const {location, organization} = this.props;
-
-    return (
-      <div>
-        {this.renderBanner()}
-        {DISPLAY_SEARCH_BAR_FLAG && this.renderActions()}
-        <QueryList location={location} organization={organization} />
-      </div>
+      <PageContent>
+        <Alert type="warning">{t("You don't have access to this feature")}</Alert>
+      </PageContent>
     );
   }
 
   render() {
-    const {organization, location, router} = this.props;
-
-    const eventSlug = getFirstQueryString(location.query, 'eventSlug');
-    const eventView = EventView.fromLocation(location);
-    const documentTitle = this.getDocumentTitle(eventView.name).join(' - ');
-
-    const hasQuery = location.query.field || location.query.eventSlug;
+    const {organization, children} = this.props;
 
     return (
-      <Feature features={['events-v2']} organization={organization} renderDisabled>
-        <DocumentTitle title={`${documentTitle} - ${organization.slug} - Sentry`}>
-          <React.Fragment>
-            <GlobalSelectionHeader organization={organization} />
-            <PageContent>
-              <NoProjectMessage organization={organization}>
-                <PageHeader>
-                  <PageHeading>
-                    {t('Discover')}
-                    <BetaTagWrapper>
-                      <BetaTag />
-                    </BetaTagWrapper>
-                    {hasQuery && (
-                      <React.Fragment>
-                        {' \u2014 '}
-                        <EventInputName
-                          organization={organization}
-                          eventView={eventView}
-                        />
-                      </React.Fragment>
-                    )}
-                  </PageHeading>
-
-                  {hasQuery && (
-                    <SavedQueryButtonGroup
-                      location={location}
-                      organization={organization}
-                      eventView={eventView}
-                    />
-                  )}
-                </PageHeader>
-                {!hasQuery && this.renderNewQuery()}
-                {hasQuery && (
-                  <Events
-                    organization={organization}
-                    location={location}
-                    router={router}
-                    eventView={eventView}
-                  />
-                )}
-                {hasQuery && eventSlug && (
-                  <EventDetails
-                    organization={organization}
-                    params={this.props.params}
-                    eventSlug={eventSlug}
-                    eventView={eventView}
-                    location={location}
-                  />
-                )}
-              </NoProjectMessage>
-            </PageContent>
-          </React.Fragment>
-        </DocumentTitle>
+      <Feature
+        features={['events-v2']}
+        organization={organization}
+        renderDisabled={this.renderNoAccess}
+      >
+        {children}
       </Feature>
     );
   }
 }
 
-const StyledActions = styled('div')`
-  display: flex;
-  margin-bottom: ${space(3)};
-`;
-
-const StyledSearchBar = styled(SearchBar)`
-  margin-right: ${space(1)};
-  flex-grow: 1;
-`;
-
-// Wrapper is needed because BetaTag discards margins applied directly to it
-const BetaTagWrapper = styled('span')`
-  margin-right: 0.4em;
-`;
-
-export default withOrganization(EventsV2);
-export {EventsV2};
+export default withOrganization(DiscoverContainer);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
new file mode 100644
index 0000000000..ebab720266
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -0,0 +1,214 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import * as ReactRouter from 'react-router';
+import {Params} from 'react-router/lib/Router';
+import {Location} from 'history';
+
+import {t} from 'app/locale';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import SentryTypes from 'app/sentryTypes';
+import {Organization} from 'app/types';
+import localStorage from 'app/utils/localStorage';
+import withOrganization from 'app/utils/withOrganization';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import Banner from 'app/components/banner';
+import Button from 'app/components/button';
+import Feature from 'app/components/acl/feature';
+import SearchBar from 'app/views/events/searchBar';
+import NoProjectMessage from 'app/components/noProjectMessage';
+
+import {PageContent, PageHeader} from 'app/styles/organization';
+import space from 'app/styles/space';
+
+import Events from './events';
+import SavedQueryButtonGroup from './savedQuery';
+import EventView from './eventView';
+import EventInputName from './eventInputName';
+import {DEFAULT_EVENT_VIEW_V1} from './data';
+import QueryList from './queryList';
+import DiscoverBreadcrumb from './breadcrumb';
+import {generateTitle} from './utils';
+
+const DISPLAY_SEARCH_BAR_FLAG = false;
+const BANNER_DISMISSED_KEY = 'discover-banner-dismissed';
+
+function checkIsBannerHidden(): boolean {
+  return localStorage.getItem(BANNER_DISMISSED_KEY) === 'true';
+}
+
+type Props = {
+  organization: Organization;
+  location: Location;
+  router: ReactRouter.InjectedRouter;
+  params: Params;
+};
+
+class DiscoverLanding extends React.Component<Props> {
+  static propTypes: any = {
+    organization: SentryTypes.Organization.isRequired,
+    location: PropTypes.object.isRequired,
+    router: PropTypes.object.isRequired,
+  };
+
+  state = {
+    isBannerHidden: checkIsBannerHidden(),
+  };
+
+  componentDidUpdate() {
+    const isBannerHidden = checkIsBannerHidden();
+    if (isBannerHidden !== this.state.isBannerHidden) {
+      // eslint-disable-next-line react/no-did-update-set-state
+      this.setState({
+        isBannerHidden,
+      });
+    }
+  }
+
+  getDocumentTitle = (eventView: EventView): string => {
+    return generateTitle({
+      eventView,
+    });
+  };
+
+  handleClick = () => {
+    localStorage.setItem(BANNER_DISMISSED_KEY, 'true');
+    this.setState({isBannerHidden: true});
+  };
+
+  renderBanner() {
+    const bannerDismissed = this.state.isBannerHidden;
+
+    if (bannerDismissed) {
+      return null;
+    }
+
+    const eventView = EventView.fromEventViewv1(DEFAULT_EVENT_VIEW_V1);
+
+    const to = {
+      pathname: location.pathname,
+      query: {
+        ...eventView.generateQueryStringObject(),
+      },
+    };
+
+    return (
+      <Banner
+        title={t('Discover')}
+        subtitle={t('Customize your query searches')}
+        onCloseClick={this.handleClick}
+      >
+        <Button
+          to={to}
+          onClick={() => {
+            trackAnalyticsEvent({
+              eventKey: 'discover_v2.prebuilt_query_click',
+              eventName: 'Discoverv2: Click a pre-built query',
+              organization_id: this.props.organization.id,
+              query_name: eventView.name,
+            });
+          }}
+        >
+          {t('Build a new query')}
+        </Button>
+      </Banner>
+    );
+  }
+
+  renderActions() {
+    return (
+      <StyledActions>
+        <StyledSearchBar />
+        <Button priority="primary">{t('Build a new query')}</Button>
+      </StyledActions>
+    );
+  }
+
+  renderNewQuery() {
+    const {location, organization} = this.props;
+
+    return (
+      <div>
+        {this.renderBanner()}
+        {DISPLAY_SEARCH_BAR_FLAG && this.renderActions()}
+        <QueryList location={location} organization={organization} />
+      </div>
+    );
+  }
+
+  renderQueryRename = (hasQuery: boolean, eventView: EventView) => {
+    if (!hasQuery) {
+      return null;
+    }
+
+    const {organization} = this.props;
+
+    return (
+      <div>
+        <EventInputName organization={organization} eventView={eventView} />
+      </div>
+    );
+  };
+
+  render() {
+    const {organization, location, router} = this.props;
+    const eventView = EventView.fromLocation(location);
+
+    const hasQuery = eventView.isValid();
+
+    return (
+      <Feature features={['events-v2']} organization={organization} renderDisabled>
+        <SentryDocumentTitle
+          title={this.getDocumentTitle(eventView)}
+          objSlug={organization.slug}
+        >
+          <React.Fragment>
+            <GlobalSelectionHeader organization={organization} />
+            <PageContent>
+              <NoProjectMessage organization={organization}>
+                <PageHeader>
+                  <DiscoverBreadcrumb
+                    eventView={eventView}
+                    organization={organization}
+                    location={location}
+                  />
+                  {hasQuery && (
+                    <SavedQueryButtonGroup
+                      location={location}
+                      organization={organization}
+                      eventView={eventView}
+                    />
+                  )}
+                </PageHeader>
+                {this.renderQueryRename(hasQuery, eventView)}
+                {!hasQuery && this.renderNewQuery()}
+                {hasQuery && (
+                  <Events
+                    organization={organization}
+                    location={location}
+                    router={router}
+                    eventView={eventView}
+                  />
+                )}
+              </NoProjectMessage>
+            </PageContent>
+          </React.Fragment>
+        </SentryDocumentTitle>
+      </Feature>
+    );
+  }
+}
+
+const StyledActions = styled('div')`
+  display: flex;
+  margin-bottom: ${space(3)};
+`;
+
+const StyledSearchBar = styled(SearchBar)`
+  margin-right: ${space(1)};
+  flex-grow: 1;
+`;
+
+export default withOrganization(DiscoverLanding);
+export {DiscoverLanding};
diff --git a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
index 8784152b01..f02e39653d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
@@ -1,4 +1,6 @@
 import React from 'react';
+import isEqual from 'lodash/isEqual';
+import omit from 'lodash/omit';
 
 import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
@@ -18,7 +20,19 @@ type Props = {
   query: string;
 };
 
+const omitProps = (props: Props) => {
+  return omit(props, ['api']);
+};
+
 class MiniGraph extends React.Component<Props> {
+  shouldComponentUpdate(nextProps) {
+    // We pay for the cost of the deep comparison here since it is cheaper
+    // than the cost for rendering the graph, which can take ~200ms to ~300ms to
+    // render.
+
+    return !isEqual(omitProps(this.props), omitProps(nextProps));
+  }
+
   render() {
     const {organization, api, selection, query} = this.props;
     const {start, end, period} = selection.datetime;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/relatedEvents.tsx b/src/sentry/static/sentry/app/views/eventsV2/relatedEvents.tsx
index 243925c503..69e5c2f40c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/relatedEvents.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/relatedEvents.tsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import styled from 'react-emotion';
 import PropTypes from 'prop-types';
-import omit from 'lodash/omit';
 import {Location} from 'history';
 
 import {Organization, Event, Project} from 'app/types';
@@ -17,14 +16,16 @@ import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import withProjects from 'app/utils/withProjects';
 
-import {MODAL_QUERY_KEYS} from './data';
+import {generateEventDetailsRoute, generateEventSlug} from './eventDetails/utils';
 import {EventQuery} from './utils';
+import EventView from './eventView';
 
 type Props = {
   location: Location;
   organization: Organization;
   event: Event;
   projects: Array<Project>;
+  eventView: EventView;
 };
 
 class RelatedEvents extends AsyncComponent<Props> {
@@ -82,7 +83,7 @@ class RelatedEvents extends AsyncComponent<Props> {
   }
 
   renderBody() {
-    const {location, projects, event} = this.props;
+    const {organization, projects, event, eventView} = this.props;
     const {events} = this.state;
     if (!events || !events.data) {
       return null;
@@ -97,12 +98,10 @@ class RelatedEvents extends AsyncComponent<Props> {
           <Card>{t('No related events found.')}</Card>
         ) : (
           events.data.map(item => {
+            const eventSlug = generateEventSlug(item);
             const eventUrl = {
-              pathname: location.pathname,
-              query: {
-                ...omit(location.query, MODAL_QUERY_KEYS),
-                eventSlug: `${item['project.name']}:${item.id}`,
-              },
+              pathname: generateEventDetailsRoute({eventSlug, organization}),
+              query: eventView.generateQueryStringObject(),
             };
             const project = projects.find(p => p.slug === item['project.name']);
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index ff866d2a71..86c63d4582 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -3,7 +3,10 @@ import pick from 'lodash/pick';
 import {Location, Query} from 'history';
 import {browserHistory} from 'react-router';
 
+import {t} from 'app/locale';
+import {Event} from 'app/types';
 import {Client} from 'app/api';
+import {getTitle} from 'app/utils/events';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {generateQueryWithTag} from 'app/utils';
 
@@ -235,33 +238,6 @@ export function getAggregateAlias(field: string): string {
     .toLowerCase();
 }
 
-/**
- * Get the first query string of a given name if there are multiple occurrences of it
- * e.g. foo=42&foo=bar    ==>    foo=42 is the first occurrence for 'foo' and "42" will be returned.
- *
- * @param query     query string map
- * @param name      name of the query string field
- */
-export function getFirstQueryString(
-  query: {[key: string]: string | string[] | null | undefined} = {},
-  name: string,
-  defaultValue?: string
-): string | undefined {
-  const needle = query[name];
-
-  if (typeof needle === 'string') {
-    return needle;
-  }
-
-  if (Array.isArray(needle) && needle.length > 0) {
-    if (typeof needle[0] === 'string') {
-      return needle[0];
-    }
-  }
-
-  return defaultValue;
-}
-
 export type QueryWithColumnState =
   | Query
   | {
@@ -345,3 +321,22 @@ export function pushEventViewToLocation(props: {
     },
   });
 }
+
+export function generateTitle({eventView, event}: {eventView: EventView; event?: Event}) {
+  const titles = [t('Discover')];
+
+  const eventViewName = eventView.name;
+  if (typeof eventViewName === 'string' && String(eventViewName).trim().length > 0) {
+    titles.push(String(eventViewName).trim());
+  }
+
+  const eventTitle = event ? getTitle(event).title : undefined;
+
+  if (eventTitle) {
+    titles.push(eventTitle);
+  }
+
+  titles.reverse();
+
+  return titles.join(' - ');
+}
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index 7879fb686e..bfdf4b062e 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -103,7 +103,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.browser.snapshot("events-v2 - errors")
 
     @patch("django.utils.timezone.now")
-    def test_modal_from_all_events(self, mock_now):
+    def test_event_detail_view_from_all_events(self, mock_now):
         mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
         min_ago = iso_format(before_now(minutes=1))
 
@@ -125,21 +125,21 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.browser.get(self.path + "?" + all_view)
             self.wait_until_loaded()
 
-            # Click the event link to open the modal
+            # Click the event link to open the events detail view
             self.browser.element('[aria-label="{}"]'.format(event.title)).click()
             self.wait_until_loaded()
 
-            header = self.browser.element('[data-test-id="modal-dialog"] h2')
+            header = self.browser.element('[data-test-id="event-header"] h2')
             assert event_data["message"] in header.text
 
             issue_link = self.browser.element('[data-test-id="linked-issue"]')
             issue_event_url_fragment = "/issues/%s/events/%s/" % (event.group_id, event.event_id)
             assert issue_event_url_fragment in issue_link.get_attribute("href")
 
-            self.browser.snapshot("events-v2 - single error modal")
+            self.browser.snapshot("events-v2 - single error details view")
 
     @patch("django.utils.timezone.now")
-    def test_modal_from_errors_view(self, mock_now):
+    def test_event_detail_view_from_errors_view(self, mock_now):
         mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
         event_source = (("a", 1), ("b", 39), ("c", 69))
         event_ids = []
@@ -163,11 +163,11 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.browser.get(self.path + "?" + error_view + "&statsPeriod=24h")
             self.wait_until_loaded()
 
-            # Click the event link to open the modal
+            # Click the event link to open the event detail view
             self.browser.element('[aria-label="{}"]'.format(event.title)).click()
             self.wait_until_loaded()
 
-            self.browser.snapshot("events-v2 - grouped error modal")
+            self.browser.snapshot("events-v2 - grouped error event detail view")
 
             # Check that the newest event is loaded first and that pagination
             # controls display
diff --git a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
index a0bec3617c..e5d9f58d81 100644
--- a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
-import {browserHistory} from 'react-router';
 
 import EventDetails from 'app/views/eventsV2/eventDetails';
 import {ALL_VIEWS, DEFAULT_EVENT_VIEW_V1} from 'app/views/eventsV2/data';
@@ -154,16 +153,15 @@ describe('EventsV2 > EventDetails', function() {
     const wrapper = mountWithTheme(
       <EventDetails
         organization={TestStubs.Organization({projects: [TestStubs.Project()]})}
-        eventSlug="project-slug:deadbeef"
-        location={{query: {eventSlug: 'project-slug:deadbeef'}}}
-        eventView={allEventsView}
+        params={{eventSlug: 'project-slug:deadbeef'}}
+        location={{query: allEventsView.generateQueryStringObject()}}
       />,
       TestStubs.routerContext()
     );
     const content = wrapper.find('EventHeader');
     expect(content.text()).toContain('Oh no something bad');
 
-    const graph = wrapper.find('ModalLineGraph');
+    const graph = wrapper.find('LineGraph');
     expect(graph).toHaveLength(0);
   });
 
@@ -171,9 +169,8 @@ describe('EventsV2 > EventDetails', function() {
     const wrapper = mountWithTheme(
       <EventDetails
         organization={TestStubs.Organization({projects: [TestStubs.Project()]})}
-        eventSlug="project-slug:abad1"
-        location={{query: {eventSlug: 'project-slug:abad1'}}}
-        eventView={allEventsView}
+        params={{eventSlug: 'project-slug:abad1'}}
+        location={{query: allEventsView.generateQueryStringObject()}}
       />,
       TestStubs.routerContext()
     );
@@ -181,44 +178,27 @@ describe('EventsV2 > EventDetails', function() {
     expect(content).toHaveLength(1);
   });
 
-  it('renders a chart in grouped view', function() {
+  it('renders a chart in grouped view', async function() {
     const wrapper = mountWithTheme(
       <EventDetails
         organization={TestStubs.Organization({projects: [TestStubs.Project()]})}
-        eventSlug="project-slug:deadbeef"
-        location={{query: {eventSlug: 'project-slug:deadbeef'}}}
-        eventView={errorsView}
+        params={{eventSlug: 'project-slug:deadbeef'}}
+        location={{query: errorsView.generateQueryStringObject()}}
       />,
       TestStubs.routerContext()
     );
+
+    // loading state
+    await tick();
+    await wrapper.update();
+
     const content = wrapper.find('EventHeader');
     expect(content.text()).toContain('Oh no something bad');
 
-    const graph = wrapper.find('ModalLineGraph');
+    const graph = wrapper.find('LineGraph');
     expect(graph).toHaveLength(1);
   });
 
-  it('removes eventSlug when close button is clicked', function() {
-    const wrapper = mountWithTheme(
-      <EventDetails
-        organization={TestStubs.Organization({projects: [TestStubs.Project()]})}
-        eventSlug="project-slug:deadbeef"
-        location={{
-          pathname: '/organizations/org-slug/events/',
-          query: {eventSlug: 'project-slug:deadbeef'},
-        }}
-        eventView={allEventsView}
-      />,
-      TestStubs.routerContext()
-    );
-    const button = wrapper.find('DismissButton');
-    button.simulate('click');
-    expect(browserHistory.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {},
-    });
-  });
-
   it('navigates when tag values are clicked', async function() {
     const {organization, routerContext} = initializeOrg({
       organization: TestStubs.Organization({projects: [TestStubs.Project()]}),
@@ -234,9 +214,8 @@ describe('EventsV2 > EventDetails', function() {
     const wrapper = mountWithTheme(
       <EventDetails
         organization={organization}
-        eventSlug="project-slug:deadbeef"
-        location={{query: {eventSlug: 'project-slug:deadbeef'}}}
-        eventView={allEventsView}
+        params={{eventSlug: 'project-slug:deadbeef'}}
+        location={{query: allEventsView.generateQueryStringObject()}}
       />,
       routerContext
     );
@@ -270,9 +249,8 @@ describe('EventsV2 > EventDetails', function() {
     const wrapper = mountWithTheme(
       <EventDetails
         organization={organization}
-        eventSlug="project-slug:deadbeef"
-        location={{query: {eventSlug: 'project-slug:deadbeef'}}}
-        eventView={allEventsView}
+        params={{eventSlug: 'project-slug:deadbeef'}}
+        location={{query: allEventsView.generateQueryStringObject()}}
       />,
       routerContext
     );
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index cae7168233..2a7957d29d 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -22,6 +22,27 @@ const generateSorts = sorts => {
   });
 };
 
+describe('EventView constructor', function() {
+  it('instantiates default values', function() {
+    const eventView = new EventView({});
+
+    expect(eventView).toMatchObject({
+      id: undefined,
+      name: undefined,
+      fields: [],
+      sorts: [],
+      tags: [],
+      query: '',
+      project: [],
+      start: undefined,
+      end: undefined,
+      statsPeriod: undefined,
+      environment: [],
+      yAxis: undefined,
+    });
+  });
+});
+
 describe('EventView.fromLocation()', function() {
   it('maps query strings', function() {
     const location = {
@@ -2168,6 +2189,56 @@ describe('isAPIPayloadSimilar', function() {
       expect(results).toBe(true);
     });
   });
+
+  describe('getGlobalSelection', function() {
+    it('return default global selection', function() {
+      const eventView = new EventView({});
+
+      expect(eventView.getGlobalSelection()).toMatchObject({
+        project: [],
+        start: undefined,
+        end: undefined,
+        statsPeriod: undefined,
+        environment: [],
+      });
+    });
+
+    it('returns global selection', function() {
+      const state2 = {
+        project: [42],
+        start: 'start',
+        end: 'end',
+        statsPeriod: '42d',
+        environment: ['prod'],
+      };
+
+      const eventView = new EventView(state2);
+
+      expect(eventView.getGlobalSelection()).toMatchObject(state2);
+    });
+  });
+
+  describe('generateBlankQueryStringObject', function() {
+    it('should return blank values', function() {
+      const eventView = new EventView({});
+
+      expect(eventView.generateBlankQueryStringObject()).toEqual({
+        id: undefined,
+        name: undefined,
+        fields: undefined,
+        sorts: undefined,
+        tags: undefined,
+        query: undefined,
+        project: undefined,
+        start: undefined,
+        end: undefined,
+        statsPeriod: undefined,
+        environment: undefined,
+        yAxis: undefined,
+        cursor: undefined,
+      });
+    });
+  });
 });
 
 describe('pickRelevantLocationQueryStrings', function() {
diff --git a/tests/js/spec/views/eventsV2/index.spec.jsx b/tests/js/spec/views/eventsV2/index.spec.jsx
index bef78d7c69..71af8cb912 100644
--- a/tests/js/spec/views/eventsV2/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/index.spec.jsx
@@ -3,7 +3,7 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 
 import {initializeOrg} from 'sentry-test/initializeOrg';
 
-import {EventsV2} from 'app/views/eventsV2';
+import {DiscoverLanding} from 'app/views/eventsV2/landing';
 
 const FIELDS = [
   {
@@ -78,7 +78,7 @@ describe('EventsV2', function() {
   it('renders a link list', function() {
     /* TODO(leedongwei)
     const wrapper = mountWithTheme(
-      <EventsV2
+      <DiscoverLanding
         organization={TestStubs.Organization({features, projects: [TestStubs.Project()]})}
         location={{query: {}}}
         router={{}}
@@ -94,7 +94,7 @@ describe('EventsV2', function() {
   it('renders a list of events', function() {
     /* TODO(leedongwei)
     const wrapper = mountWithTheme(
-      <EventsV2
+      <DiscoverLanding
         organization={TestStubs.Organization({features, projects: [TestStubs.Project()]})}
         location={{query: {...generateFields()}}}
         router={{}}
@@ -109,7 +109,7 @@ describe('EventsV2', function() {
 
   it('handles no projects', function() {
     const wrapper = mountWithTheme(
-      <EventsV2
+      <DiscoverLanding
         organization={TestStubs.Organization({features})}
         location={{query: {...generateFields()}}}
         router={{}}
@@ -124,7 +124,7 @@ describe('EventsV2', function() {
   it('generates an active sort link based on default sort', function() {
     /* TODO(leedongwei)
     const wrapper = mountWithTheme(
-      <EventsV2
+      <DiscoverLanding
         organization={TestStubs.Organization({features, projects: [TestStubs.Project()]})}
         location={{query: {...generateFields(), sort: ['-timestamp']}}}
         router={{}}
@@ -167,7 +167,7 @@ describe('EventsV2', function() {
   it('generates links to modals', async function() {
     /* TODO(leedongwei)
     const wrapper = mountWithTheme(
-      <EventsV2
+      <DiscoverLanding
         organization={TestStubs.Organization({features, projects: [TestStubs.Project()]})}
         location={{query: {...generateFields()}}}
         router={{}}
@@ -183,25 +183,6 @@ describe('EventsV2', function() {
     */
   });
 
-  it('opens a modal when eventSlug is present', async function() {
-    const organization = TestStubs.Organization({
-      features,
-      projects: [TestStubs.Project()],
-    });
-    const wrapper = mountWithTheme(
-      <EventsV2
-        organization={organization}
-        params={{orgId: organization.slug}}
-        location={{query: {eventSlug: 'project-slug:deadbeef'}}}
-        router={{}}
-      />,
-      TestStubs.routerContext()
-    );
-
-    const modal = wrapper.find('EventDetails');
-    expect(modal).toHaveLength(1);
-  });
-
   it('pagination cursor should be cleared when making a search', function() {
     const organization = TestStubs.Organization({
       features,
@@ -216,7 +197,7 @@ describe('EventsV2', function() {
     });
 
     const wrapper = mountWithTheme(
-      <EventsV2
+      <DiscoverLanding
         organization={organization}
         params={{orgId: organization.slug}}
         location={initialData.router.location}
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 1375f754fe..c9afb6b250 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -151,10 +151,8 @@ describe('getFieldRenderer', function() {
     const value = wrapper.find('OverflowLink');
     expect(value).toHaveLength(1);
     expect(value.props().to).toEqual({
-      pathname: location.pathname,
-      query: {
-        eventSlug: `${project.slug}:deadbeef`,
-      },
+      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      query: {},
     });
     expect(value.text()).toEqual(data.transaction);
   });
@@ -167,10 +165,8 @@ describe('getFieldRenderer', function() {
     const value = wrapper.find('OverflowLink');
     expect(value).toHaveLength(1);
     expect(value.props().to).toEqual({
-      pathname: location.pathname,
-      query: {
-        eventSlug: `${project.slug}:deadbeef`,
-      },
+      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      query: {},
     });
     expect(value.text()).toEqual(data.title);
   });
@@ -201,10 +197,8 @@ describe('getFieldRenderer', function() {
 
     const link = wrapper.find('OverflowLink');
     expect(link.props().to).toEqual({
-      pathname: location.pathname,
-      query: {
-        eventSlug: `${project.slug}:deadbeef`,
-      },
+      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      query: {},
     });
     expect(link.text()).toEqual('/example');
   });
@@ -219,10 +213,8 @@ describe('getFieldRenderer', function() {
 
     const link = wrapper.find('OverflowLink');
     expect(link.props().to).toEqual({
-      pathname: location.pathname,
-      query: {
-        eventSlug: `${project.slug}:deadbeef`,
-      },
+      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      query: {},
     });
     expect(link.find('Count').props().value).toEqual(data.numeric);
   });
@@ -237,10 +229,8 @@ describe('getFieldRenderer', function() {
 
     const link = wrapper.find('OverflowLink');
     expect(link.props().to).toEqual({
-      pathname: location.pathname,
-      query: {
-        eventSlug: `${project.slug}:deadbeef`,
-      },
+      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      query: {},
     });
     expect(link.find('StyledDateTime').props().date).toEqual(data.createdAt);
   });
