commit 2557f750993e986cae8cd14a2e01616ee2a9760b
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 11 21:13:01 2013 -0800

    Add remaining settings for counter backend

diff --git a/src/sentry/app.py b/src/sentry/app.py
index befef7e463..ccf56b5747 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -15,11 +15,12 @@ class State(local):
     request = None
 
 
-def get_buffer(path, options):
+def get_instance(path, options):
     cls = import_string(path)
     if cls is None:
         raise ImportError('Unable to find module %s' % path)
     return cls(**options)
 
-buffer = get_buffer(settings.BUFFER, settings.BUFFER_OPTIONS)
+buffer = get_instance(settings.BUFFER, settings.BUFFER_OPTIONS)
+counter = get_instance(settings.COUNTER, settings.COUNTER_OPTIONS)
 env = State()
diff --git a/src/sentry/conf/defaults.py b/src/sentry/conf/defaults.py
index c75f993c63..4f26f1f7f2 100644
--- a/src/sentry/conf/defaults.py
+++ b/src/sentry/conf/defaults.py
@@ -170,6 +170,10 @@ REDIS_OPTIONS = {}
 BUFFER = 'sentry.buffer.Buffer'
 BUFFER_OPTIONS = {}
 
+# Counter backend to use
+COUNTER = 'sentry.counter.Counter'
+COUNTER_OPTIONS = {}
+
 # Auth engines and the settings required for them to be listed
 AUTH_PROVIDERS = {
     'twitter': ('TWITTER_CONSUMER_KEY', 'TWITTER_CONSUMER_SECRET'),
diff --git a/tests/sentry/app/tests.py b/tests/sentry/app/tests.py
index 01e8319bfc..63623025d6 100644
--- a/tests/sentry/app/tests.py
+++ b/tests/sentry/app/tests.py
@@ -19,14 +19,14 @@ class GetBufferTest(TestCase):
     def test_raises_import_error_on_invalid_path(self, import_string):
         import_string.return_value = None
         with self.assertRaises(ImportError):
-            app.get_buffer('lol.FooBar', {})
+            app.get_instance('lol.FooBar', {})
 
     @mock.patch('sentry.app.import_string')
     def test_instantiates_class_with_options(self, import_string):
         options = {'hello': 'world'}
         path = 'lol.FooBar'
 
-        result = app.get_buffer(path, options)
+        result = app.get_instance(path, options)
 
         import_string.assert_called_once_with(path)
         import_string.return_value.assert_called_once_with(**options)
