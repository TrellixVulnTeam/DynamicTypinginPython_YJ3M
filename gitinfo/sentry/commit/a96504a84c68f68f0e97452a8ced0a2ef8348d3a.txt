commit a96504a84c68f68f0e97452a8ced0a2ef8348d3a
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Dec 4 12:00:46 2015 -0800

    Improvements to my issues
    
    - Refactor shared code into bases
    - Add barchart

diff --git a/src/sentry/api/bases/__init__.py b/src/sentry/api/bases/__init__.py
index bbaa3c7e4c..5edb2a496d 100644
--- a/src/sentry/api/bases/__init__.py
+++ b/src/sentry/api/bases/__init__.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from .group import *  # NOQA
 from .organization import *  # NOQA
+from .organizationissues import *  # NOQA
 from .organizationmember import *  # NOQA
 from .project import *  # NOQA
 from .team import *  # NOQA
diff --git a/src/sentry/api/bases/organizationissues.py b/src/sentry/api/bases/organizationissues.py
new file mode 100644
index 0000000000..31e62b922a
--- /dev/null
+++ b/src/sentry/api/bases/organizationissues.py
@@ -0,0 +1,58 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.serializers import serialize, StreamGroupSerializer
+from sentry.api.paginator import DateTimePaginator
+from sentry.models import Group, GroupStatus, OrganizationMemberTeam, Project
+
+from .organizationmember import OrganizationMemberEndpoint
+
+ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
+
+
+class OrganizationIssuesEndpoint(OrganizationMemberEndpoint):
+    def get_queryset(self, request, organization, member):
+        # Must return a 'sorty_by' selector for pagination that is a datetime
+        return Group.objects.none()
+
+    def get(self, request, organization, member):
+        """
+        Return a list of issues assigned to the given member.
+        """
+        stats_period = request.GET.get('statsPeriod')
+        if stats_period not in (None, '', '24h', '14d'):
+            return Response({"detail": ERR_INVALID_STATS_PERIOD}, status=400)
+        elif stats_period is None:
+            # default
+            stats_period = '24h'
+        elif stats_period == '':
+            # disable stats
+            stats_period = None
+
+        project_list = Project.objects.filter(
+            organization=organization,
+            team__in=OrganizationMemberTeam.objects.filter(
+                organizationmember=member,
+                is_active=True,
+            ).values('team')
+        )
+
+        queryset = self.get_queryset(request, organization, member, project_list)
+        status = request.GET.get('status', 'unresolved')
+        if status == 'unresolved':
+            queryset = queryset.filter(
+                status=GroupStatus.UNRESOLVED,
+            )
+        elif status:
+            return Response({'status': 'Invalid status choice'}, status=400)
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-sort_by',
+            paginator_cls=DateTimePaginator,
+            on_results=lambda x: serialize(x, request.user, StreamGroupSerializer(
+                stats_period=stats_period,
+            )),
+        )
diff --git a/src/sentry/api/endpoints/organization_member_issues_assigned.py b/src/sentry/api/endpoints/organization_member_issues_assigned.py
index f1b815f895..9aa72beecc 100644
--- a/src/sentry/api/endpoints/organization_member_issues_assigned.py
+++ b/src/sentry/api/endpoints/organization_member_issues_assigned.py
@@ -1,45 +1,14 @@
 from __future__ import absolute_import
 
-from rest_framework.response import Response
+from sentry.api.bases import OrganizationIssuesEndpoint
+from sentry.models import Group
 
-from sentry.api.bases import OrganizationMemberEndpoint
-from sentry.api.serializers import serialize
-from sentry.api.paginator import DateTimePaginator
-from sentry.models import Group, GroupStatus, OrganizationMemberTeam, Project
 
-
-class OrganizationMemberIssuesAssignedEndpoint(OrganizationMemberEndpoint):
-    def get(self, request, organization, member):
-        """
-        Return a list of issues assigned to the given member.
-        """
-        project_list = Project.objects.filter(
-            organization=organization,
-            team__in=OrganizationMemberTeam.objects.filter(
-                organizationmember=member,
-                is_active=True,
-            ).values('team')
-        )
-
-        queryset = Group.objects.filter(
+class OrganizationMemberIssuesAssignedEndpoint(OrganizationIssuesEndpoint):
+    def get_queryset(self, request, organization, member, project_list):
+        return Group.objects.filter(
             assignee_set__user=member.user,
             assignee_set__project__in=project_list,
         ).extra(
             select={'sort_by': 'sentry_groupasignee.date_added'},
         ).order_by('-sort_by')
-
-        status = request.GET.get('status', 'unresolved')
-        if status == 'unresolved':
-            queryset = queryset.filter(
-                status=GroupStatus.UNRESOLVED,
-            )
-        elif status:
-            return Response({'status': 'Invalid status choice'}, status=400)
-
-        return self.paginate(
-            request=request,
-            queryset=queryset,
-            order_by='-sort_by',
-            paginator_cls=DateTimePaginator,
-            on_results=lambda x: serialize(x, request.user),
-        )
diff --git a/src/sentry/api/endpoints/organization_member_issues_bookmarked.py b/src/sentry/api/endpoints/organization_member_issues_bookmarked.py
index 6fad9b33f1..50f9c99b1e 100644
--- a/src/sentry/api/endpoints/organization_member_issues_bookmarked.py
+++ b/src/sentry/api/endpoints/organization_member_issues_bookmarked.py
@@ -1,45 +1,14 @@
 from __future__ import absolute_import
 
-from rest_framework.response import Response
+from sentry.api.bases import OrganizationIssuesEndpoint
+from sentry.models import Group
 
-from sentry.api.bases import OrganizationMemberEndpoint
-from sentry.api.serializers import serialize
-from sentry.api.paginator import DateTimePaginator
-from sentry.models import Group, GroupStatus, OrganizationMemberTeam, Project
 
-
-class OrganizationMemberIssuesBookmarkedEndpoint(OrganizationMemberEndpoint):
-    def get(self, request, organization, member):
-        """
-        Return a list of issues assigned to the given member.
-        """
-        project_list = Project.objects.filter(
-            organization=organization,
-            team__in=OrganizationMemberTeam.objects.filter(
-                organizationmember=member,
-                is_active=True,
-            ).values('team')
-        )
-
-        queryset = Group.objects.filter(
+class OrganizationMemberIssuesBookmarkedEndpoint(OrganizationIssuesEndpoint):
+    def get_queryset(self, request, organization, member, project_list):
+        return Group.objects.filter(
             bookmark_set__user=member.user,
             bookmark_set__project__in=project_list,
         ).extra(
             select={'sort_by': 'sentry_groupbookmark.date_added'},
         ).order_by('-sort_by')
-
-        status = request.GET.get('status', 'unresolved')
-        if status == 'unresolved':
-            queryset = queryset.filter(
-                status=GroupStatus.UNRESOLVED,
-            )
-        elif status:
-            return Response({'status': 'Invalid status choice'}, status=400)
-
-        return self.paginate(
-            request=request,
-            queryset=queryset,
-            order_by='-sort_by',
-            paginator_cls=DateTimePaginator,
-            on_results=lambda x: serialize(x, request.user),
-        )
diff --git a/src/sentry/api/endpoints/organization_member_issues_viewed.py b/src/sentry/api/endpoints/organization_member_issues_viewed.py
index d921b378bc..1683abb764 100644
--- a/src/sentry/api/endpoints/organization_member_issues_viewed.py
+++ b/src/sentry/api/endpoints/organization_member_issues_viewed.py
@@ -1,45 +1,14 @@
 from __future__ import absolute_import
 
-from rest_framework.response import Response
+from sentry.api.bases import OrganizationIssuesEndpoint
+from sentry.models import Group
 
-from sentry.api.bases import OrganizationMemberEndpoint
-from sentry.api.serializers import serialize
-from sentry.api.paginator import DateTimePaginator
-from sentry.models import Group, GroupStatus, OrganizationMemberTeam, Project
 
-
-class OrganizationMemberIssuesViewedEndpoint(OrganizationMemberEndpoint):
-    def get(self, request, organization, member):
-        """
-        Return a list of issues assigned to the given member.
-        """
-        project_list = Project.objects.filter(
-            organization=organization,
-            team__in=OrganizationMemberTeam.objects.filter(
-                organizationmember=member,
-                is_active=True,
-            ).values('team')
-        )
-
-        queryset = Group.objects.filter(
+class OrganizationMemberIssuesViewedEndpoint(OrganizationIssuesEndpoint):
+    def get_queryset(self, request, organization, member, project_list):
+        return Group.objects.filter(
             groupseen__user=member.user,
             groupseen__project__in=project_list,
         ).extra(
             select={'sort_by': 'sentry_groupseen.last_seen'},
         ).order_by('-sort_by')
-
-        status = request.GET.get('status', 'unresolved')
-        if status == 'unresolved':
-            queryset = queryset.filter(
-                status=GroupStatus.UNRESOLVED,
-            )
-        elif status:
-            return Response({'status': 'Invalid status choice'}, status=400)
-
-        return self.paginate(
-            request=request,
-            queryset=queryset,
-            order_by='-sort_by',
-            paginator_cls=DateTimePaginator,
-            on_results=lambda x: serialize(x, request.user),
-        )
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index dac7dbf7c2..d028b68c28 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -23,7 +23,7 @@ class GroupSerializer(Serializer):
 
         GroupMeta.objects.populate_cache(item_list)
 
-        attach_foreignkey(item_list, Group.project, ['team'])
+        attach_foreignkey(item_list, Group.project)
 
         if user.is_authenticated() and item_list:
             bookmarks = set(GroupBookmark.objects.filter(
@@ -110,11 +110,8 @@ class GroupSerializer(Serializer):
         else:
             status_label = 'unresolved'
 
-        if obj.team:
-            permalink = absolute_uri(reverse('sentry-group', args=[
-                obj.organization.slug, obj.project.slug, obj.id]))
-        else:
-            permalink = None
+        permalink = absolute_uri(reverse('sentry-group', args=[
+            obj.organization.slug, obj.project.slug, obj.id]))
 
         return {
             'id': str(obj.id),
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index 6903b69431..c0a4ce2d73 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -4,7 +4,7 @@ import {Link} from 'react-router';
 
 import TimeSince from './timeSince';
 import DropdownLink from './dropdownLink';
-
+import GroupChart from './stream/groupChart';
 import GroupStore from '../stores/groupStore';
 
 const CompactIssue = React.createClass({
@@ -67,7 +67,7 @@ const CompactIssue = React.createClass({
 
     return (
       <li className={className} onClick={this.toggleSelect}>
-        <div className="col-md-10">
+        <div className="col-md-9">
           <span className="error-level truncate" title={data.level}></span>
           <h3 className="truncate">
             <Link to={`/${orgId}/${projectId}/issues/${data.id}/`}>
@@ -99,7 +99,12 @@ const CompactIssue = React.createClass({
             </ul>
           </div>
         </div>
-        <div className="col-md-2 align-right">
+        {this.props.statsPeriod &&
+          <div className="col-md-2 hidden-sm hidden-xs event-graph align-right">
+            <GroupChart id={data.id} statsPeriod={this.props.statsPeriod} />
+          </div>
+        }
+        <div className="col-md-1 align-right">
           <DropdownLink
             topLevelClasses="more-menu"
             className="more-menu-toggle"
diff --git a/src/sentry/static/sentry/app/components/issueList.jsx b/src/sentry/static/sentry/app/components/issueList.jsx
index 85d3e151e5..f0ccc74e72 100644
--- a/src/sentry/static/sentry/app/components/issueList.jsx
+++ b/src/sentry/static/sentry/app/components/issueList.jsx
@@ -79,7 +79,13 @@ const IssueList = React.createClass({
       body = (
         <ul className="issue-list">
           {this.state.issueIds.map((id) => {
-            return <CompactIssue key={id} id={id} orgId={params.orgId} />;
+            return (
+              <CompactIssue
+                key={id}
+                id={id}
+                orgId={params.orgId}
+                statsPeriod={this.props.statsPeriod} />
+            );
           })}
         </ul>
       );
diff --git a/src/sentry/static/sentry/app/components/organizationIssueList.jsx b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
index 625b6c6bc4..0aebd55a0d 100644
--- a/src/sentry/static/sentry/app/components/organizationIssueList.jsx
+++ b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
@@ -54,7 +54,10 @@ const OrganizationIssueList = React.createClass({
           </div>
         </div>
         <h3>{this.props.title}</h3>
-        <IssueList endpoint={this.props.endpoint} query={{status: this.state.status}} {...this.props} />
+        <IssueList endpoint={this.props.endpoint} query={{
+          status: this.state.status,
+          statsPeriod: '24h',
+        }} statsPeriod="24h" {...this.props} />
       </OrganizationHomeContainer>
     );
   }
