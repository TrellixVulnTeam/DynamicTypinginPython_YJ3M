commit a0ecdd33d17bbe572ec23188f9d3bfe6c673005c
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Jan 29 15:45:14 2019 -0800

    feat(api): Add "is" queries to the event/group search grammar
    
    "is" queries are the main thing that our search grammar doesn't currently support, so adding it
    as part of work on APP-961.
    
    I didn't put any defensive code in `get_snuba_query_args` to ignore these params. Not sure it's
    necessary, since we'll just treat them as tags if they get passed in an event query, which will
    return no results.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index bec050f15a..ae38bbbdd0 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -4,10 +4,12 @@ import re
 import six
 
 from collections import namedtuple
+from django.utils.functional import cached_property
 
 from parsimonious.exceptions import ParseError
 from parsimonious.grammar import Grammar, NodeVisitor
 
+from sentry.constants import STATUS_CHOICES
 from sentry.search.utils import parse_datetime_string, InvalidQuery
 from sentry.utils.snuba import SENTRY_SNUBA_MAP
 
@@ -56,7 +58,7 @@ event_search_grammar = Grammar(r"""
 # raw_search must come at the end, otherwise other
 # search_terms will be treated as a raw query
 search          = search_term* raw_search?
-search_term     = space? (time_filter / has_filter / basic_filter) space?
+search_term     = space? (time_filter / has_filter / is_filter / basic_filter) space?
 raw_search      = ~r".+$"
 
 # standard key:val filter
@@ -65,6 +67,7 @@ basic_filter    = negation? search_key sep search_value
 time_filter     = "timestamp" operator date_format
 # has filter for not null type checks
 has_filter      = negation? "has" sep (search_key / search_value)
+is_filter      = negation? "is" sep (search_key / search_value)
 
 search_key      = key / quoted_key
 search_value    = quoted_value / value
@@ -129,6 +132,16 @@ class SearchValue(namedtuple('SearchValue', 'raw_value')):
 
 class SearchVisitor(NodeVisitor):
 
+    @cached_property
+    def is_filter_translators(self):
+        is_filter_translators = {
+            'assigned': (SearchKey('unassigned'), SearchValue(False)),
+            'unassigned': (SearchKey('unassigned'), SearchValue(True)),
+        }
+        for status_key, status_value in STATUS_CHOICES.items():
+            is_filter_translators[status_key] = (SearchKey('status'), SearchValue(status_value))
+        return is_filter_translators
+
     unwrapped_exceptions = (InvalidSearchQuery,)
 
     def visit_search(self, node, children):
@@ -203,6 +216,33 @@ class SearchVisitor(NodeVisitor):
             SearchValue(''),
         )
 
+    def visit_is_filter(self, node, children):
+        # the key is "is" here, which we don't need
+        negation, _, _, (search_key,) = children
+
+        # if it matched search value instead, it's not a valid key
+        if isinstance(search_key, SearchValue):
+            raise InvalidSearchQuery(
+                'Invalid format for "is" search: %s' %
+                (search_key.raw_value,))
+
+        if search_key.name not in self.is_filter_translators:
+            raise InvalidSearchQuery(
+                'Invalid value for "is" search, valid values are {}'.format(
+                    sorted(self.is_filter_translators.keys()),
+                ),
+            )
+
+        search_key, search_value = self.is_filter_translators[search_key.name]
+
+        operator = '!=' if self.is_negated(negation) else '='
+
+        return SearchFilter(
+            search_key,
+            operator,
+            search_value,
+        )
+
     def visit_search_key(self, node, children):
         return SearchKey(children[0])
 
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index b25302bdc9..6a1335b65f 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -9,11 +9,12 @@ from sentry.api.event_search import (
     convert_endpoint_params, get_snuba_query_args, parse_search_query,
     InvalidSearchQuery, SearchFilter, SearchKey, SearchValue
 )
+from sentry.constants import STATUS_CHOICES
 from sentry.testutils import TestCase
 
 
-class EventSearchTest(TestCase):
-    def test_parse_search_query(self):
+class ParseSearchQueryTest(TestCase):
+    def test_simple(self):
         # test with raw search query at the end
         assert parse_search_query('user.email:foo@example.com release:1.2.1 hello') == [
             SearchFilter(
@@ -42,7 +43,7 @@ class EventSearchTest(TestCase):
             ),
         ]
 
-    def test_parse_search_query_timestamp(self):
+    def test_timestamp(self):
         # test date format
         assert parse_search_query('timestamp>2015-05-18') == [
             SearchFilter(
@@ -96,7 +97,7 @@ class EventSearchTest(TestCase):
             ),
         ]
 
-    def test_parse_search_query_quoted_val(self):
+    def test_quoted_val(self):
         assert parse_search_query('release:"a release"') == [
             SearchFilter(
                 key=SearchKey(name='release'),
@@ -112,7 +113,7 @@ class EventSearchTest(TestCase):
             ),
         ]
 
-    def test_parse_search_query_quoted_key(self):
+    def test_quoted_key(self):
         assert parse_search_query('"hi:there":value') == [
             SearchFilter(
                 key=SearchKey(name='hi:there'),
@@ -128,7 +129,7 @@ class EventSearchTest(TestCase):
             ),
         ]
 
-    def test_parse_search_query_weird_values(self):
+    def test_weird_values(self):
         # quotes within quotes
         assert parse_search_query('release:"a"thing""') == [
             SearchFilter(
@@ -204,7 +205,7 @@ class EventSearchTest(TestCase):
             ),
         ]
 
-    def test_parse_search_query_custom_tag(self):
+    def test_custom_tag(self):
         assert parse_search_query('fruit:apple release:1.2.1') == [
             SearchFilter(
                 key=SearchKey(name='fruit'),
@@ -218,7 +219,7 @@ class EventSearchTest(TestCase):
             ),
         ]
 
-    def test_parse_search_query_has_tag(self):
+    def test_has_tag(self):
         # unquoted key
         assert parse_search_query('has:release') == [
             SearchFilter(
@@ -241,7 +242,7 @@ class EventSearchTest(TestCase):
         with self.assertRaises(InvalidSearchQuery):
             parse_search_query('has:"hi there"')
 
-    def test_parse_search_query_not_has_tag(self):
+    def test_not_has_tag(self):
         # unquoted key
         assert parse_search_query('!has:release') == [
             SearchFilter(
@@ -260,7 +261,65 @@ class EventSearchTest(TestCase):
             ),
         ]
 
-    def test_get_snuba_query_args(self):
+    def test_is_query_unassigned(self):
+        assert parse_search_query('is:unassigned') == [
+            SearchFilter(
+                key=SearchKey(name='unassigned'),
+                operator='=',
+                value=SearchValue(True),
+            ),
+        ]
+        assert parse_search_query('is:assigned') == [
+            SearchFilter(
+                key=SearchKey(name='unassigned'),
+                operator='=',
+                value=SearchValue(False),
+            ),
+        ]
+
+        assert parse_search_query('!is:unassigned') == [
+            SearchFilter(
+                key=SearchKey(name='unassigned'),
+                operator='!=',
+                value=SearchValue(True),
+            ),
+        ]
+        assert parse_search_query('!is:assigned') == [
+            SearchFilter(
+                key=SearchKey(name='unassigned'),
+                operator='!=',
+                value=SearchValue(False),
+            ),
+        ]
+
+    def test_is_query_status(self):
+        for status_string, status_val in STATUS_CHOICES.items():
+            assert parse_search_query('is:%s' % status_string) == [
+                SearchFilter(
+                    key=SearchKey(name='status'),
+                    operator='=',
+                    value=SearchValue(status_val),
+                ),
+            ]
+            assert parse_search_query('!is:%s' % status_string) == [
+                SearchFilter(
+                    key=SearchKey(name='status'),
+                    operator='!=',
+                    value=SearchValue(status_val),
+                ),
+            ]
+
+    def test_is_query_invalid(self):
+        with self.assertRaises(InvalidSearchQuery) as cm:
+            parse_search_query('is:wrong')
+
+        assert cm.exception.message.startswith(
+            'Invalid value for "is" search, valid values are',
+        )
+
+
+class GetSnubaQueryArgsTest(TestCase):
+    def test_simple(self):
         assert get_snuba_query_args('user.email:foo@example.com release:1.2.1 fruit:apple hello', {
             'project_id': [1, 2, 3],
             'start': datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc),
@@ -277,7 +336,7 @@ class EventSearchTest(TestCase):
             'end': datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc),
         }
 
-    def test_negation_get_snuba_query_args(self):
+    def test_negation(self):
         assert get_snuba_query_args('!user.email:foo@example.com') == {
             'conditions': [
                 [['ifNull', ['email', "''"]], '!=', 'foo@example.com'],
@@ -285,7 +344,7 @@ class EventSearchTest(TestCase):
             'filter_keys': {},
         }
 
-    def test_get_snuba_query_args_no_search(self):
+    def test_no_search(self):
         assert get_snuba_query_args(params={
             'project_id': [1, 2, 3],
             'start': datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc),
@@ -297,7 +356,7 @@ class EventSearchTest(TestCase):
             'end': datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc),
         }
 
-    def test_get_snuba_query_args_wildcard(self):
+    def test_wildcard(self):
         assert get_snuba_query_args('release:3.1.* user.email:*@example.com') == {
             'conditions': [
                 [['match', ['tags[sentry:release]', "'^3\\.1\\..*$'"]], '=', 1],
@@ -306,7 +365,7 @@ class EventSearchTest(TestCase):
             'filter_keys': {},
         }
 
-    def test_get_snuba_query_args_negated_wildcard(self):
+    def test_negated_wildcard(self):
         assert get_snuba_query_args('!release:3.1.* user.email:*@example.com') == {
             'conditions': [
                 [['match', [['ifNull', ['tags[sentry:release]', "''"]], "'^3\\.1\\..*$'"]], '!=', 1],
@@ -315,19 +374,19 @@ class EventSearchTest(TestCase):
             'filter_keys': {},
         }
 
-    def test_get_snuba_query_args_has(self):
+    def test_has(self):
         assert get_snuba_query_args('has:release') == {
             'filter_keys': {},
             'conditions': [[['ifNull', ['tags[sentry:release]', "''"]], '!=', '']]
         }
 
-    def test_get_snuba_query_args_not_has(self):
+    def test_not_has(self):
         assert get_snuba_query_args('!has:release') == {
             'filter_keys': {},
             'conditions': [[['ifNull', ['tags[sentry:release]', "''"]], '=', '']]
         }
 
-    def test_get_snuba_query_args_message_negative(self):
+    def test_message_negative(self):
         assert get_snuba_query_args('!message:"post_process.process_error HTTPError 403"') == {
             'filter_keys': {},
             'conditions': [[
@@ -337,7 +396,9 @@ class EventSearchTest(TestCase):
             ]]
         }
 
-    def test_convert_endpoint_params(self):
+
+class ConvertEndpointParamsTests(TestCase):
+    def test_simple(self):
         assert convert_endpoint_params({
             'project_id': [1, 2, 3],
             'start': datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc),
