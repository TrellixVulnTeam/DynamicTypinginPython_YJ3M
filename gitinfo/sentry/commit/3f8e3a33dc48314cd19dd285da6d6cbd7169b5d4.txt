commit 3f8e3a33dc48314cd19dd285da6d6cbd7169b5d4
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 23 14:58:29 2015 -0800

    Restrict superuser to INTERNAL_IPS (when set)

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index aa78c52dfb..c208f3c7a4 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -21,7 +21,7 @@ class OrganizationPermission(ScopedPermission):
                 return False
             return request.auth.organization_id == organization.id
 
-        request.access = access.from_user(request.user, organization)
+        request.access = access.from_request(request, organization)
         allowed_scopes = set(self.scope_map.get(request.method, []))
         return any(request.access.has_scope(s) for s in allowed_scopes)
 
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 05af6c40c4..15f3bd1d07 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -21,7 +21,7 @@ class ProjectPermission(ScopedPermission):
                 return request.auth.project_id == project.id
             return request.auth.organization_id == project.organization_id
 
-        request.access = access.from_user(request.user, project.organization)
+        request.access = access.from_request(request, project.organization)
 
         for scope in self.scope_map.get(request.method, []):
             if request.access.has_team_scope(project.team, scope):
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index 515fcfb969..0a40690f3c 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -21,7 +21,7 @@ class TeamPermission(ScopedPermission):
                 return False
             return request.auth.organization_id == team.organization_id
 
-        request.access = access.from_user(request.user, team.organization)
+        request.access = access.from_request(request, team.organization)
 
         allowed_scopes = set(self.scope_map.get(request.method, []))
         return any(request.access.has_team_scope(team, s) for s in allowed_scopes)
diff --git a/src/sentry/api/bases/user.py b/src/sentry/api/bases/user.py
index aab17134f3..ff3ecb6684 100644
--- a/src/sentry/api/bases/user.py
+++ b/src/sentry/api/bases/user.py
@@ -4,13 +4,14 @@ from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
 from sentry.models import User
+from sentry.auth.utils import is_active_superuser
 
 
 class UserPermission(ScopedPermission):
     def has_object_permission(self, request, view, user):
         if request.auth:
             return False
-        if request.user.is_superuser:
+        if is_active_superuser(request):
             return True
         return request.user == user
 
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 2bc547f57e..2bf7f04058 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -64,7 +64,7 @@ class OrganizationIndexEndpoint(Endpoint):
                 queryset = queryset.filter(
                     id=request.auth.organization.id
                 )
-        elif member_only or not is_active_superuser(request.user):
+        elif member_only or not is_active_superuser(request):
             queryset = queryset.filter(
                 id__in=OrganizationMember.objects.filter(
                     user=request.user,
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 2683af5868..94929b0cf7 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -108,7 +108,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if request.user.is_authenticated() and not is_active_superuser(request.user):
+        if request.user.is_authenticated() and not is_active_superuser(request):
             try:
                 acting_member = OrganizationMember.objects.get(
                     organization=organization,
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 08714769de..5040af5754 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -45,7 +45,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
 
     def _can_access(self, request, member):
         # TODO(dcramer): ideally org owners/admins could perform these actions
-        if is_active_superuser(request.user):
+        if is_active_superuser(request):
             return True
 
         if not request.user.is_authenticated():
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index aed71aa49f..83f6801691 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -21,7 +21,7 @@ class UserSerializer(serializers.ModelSerializer):
 class UserDetailsEndpoint(UserEndpoint):
     def get(self, request, user):
         data = serialize(user, request.user)
-        data['isSuperuser'] = user == request.user and is_active_superuser(user)
+        data['isSuperuser'] = user == request.user and is_active_superuser(request)
         return Response(data)
 
     @sudo_required
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 1c0dddd45d..449e90efaa 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -48,6 +48,6 @@ class ScopedPermission(permissions.BasePermission):
 
 class SuperuserPermission(permissions.BasePermission):
     def has_permission(self, request, view):
-        if is_active_superuser(request.user):
+        if is_active_superuser(request):
             return True
         return False
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index fe2464bc85..04ad94f389 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -5,6 +5,7 @@ import itertools
 from collections import defaultdict
 from django.conf import settings
 
+from sentry.app import env
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.auth.utils import is_active_superuser
 from sentry.models import (
@@ -16,7 +17,8 @@ from sentry.models import (
 @register(Team)
 class TeamSerializer(Serializer):
     def get_attrs(self, item_list, user):
-        if is_active_superuser(user) or settings.SENTRY_PUBLIC:
+        request = env.request
+        if (is_active_superuser(request) and request.user == user) or settings.SENTRY_PUBLIC:
             inactive_memberships = frozenset(
                 OrganizationMemberTeam.objects.filter(
                     team__in=item_list,
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index fd398dba1a..df14ace787 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -47,17 +47,23 @@ class Access(BaseAccess):
         self.sso_is_valid = sso_is_valid
 
 
-def from_user(user, organization):
+def from_request(request, organization):
     if not organization:
         return DEFAULT
 
-    if is_active_superuser(user):
+    if is_active_superuser(request):
         return Access(
             scopes=settings.SENTRY_SCOPES,
             is_active=True,
             teams=organization.team_set.all(),
             sso_is_valid=True,
         )
+    return from_user(request.user, organization)
+
+
+def from_user(user, organization):
+    if not organization:
+        return DEFAULT
 
     if user.is_anonymous():
         return DEFAULT
diff --git a/src/sentry/auth/utils.py b/src/sentry/auth/utils.py
index a8d77c6066..73b83afa50 100644
--- a/src/sentry/auth/utils.py
+++ b/src/sentry/auth/utils.py
@@ -1,6 +1,16 @@
 from __future__ import absolute_import
 
+from django.conf import settings
+
+
+def is_active_superuser(request):
+    user = getattr(request, 'user', None)
+    if not user:
+        return False
+
+    if settings.INTERNAL_IPS:
+        ip = request.META['REMOTE_ADDR']
+        if not any(ip in addr for addr in settings.INTERNAL_IPS):
+            return False
 
-def is_active_superuser(user):
-    # TODO(dcramer): add VPN support via INTERNAL_IPS + ipaddr ranges
     return user.is_superuser
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index a86db7588d..fe61ebe9a8 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -33,7 +33,7 @@ MAINTENANCE = False
 
 ADMINS = ()
 
-INTERNAL_IPS = ('127.0.0.1',)
+INTERNAL_IPS = ()
 
 MANAGERS = ADMINS
 
diff --git a/src/sentry/conf/urls.py b/src/sentry/conf/urls.py
index 7a18034bcf..259c5a2059 100644
--- a/src/sentry/conf/urls.py
+++ b/src/sentry/conf/urls.py
@@ -10,26 +10,21 @@ These are additional urls used by the Sentry-provided web server
 from __future__ import absolute_import
 
 import debug_toolbar
-import os
 
 try:
     from django.conf.urls import include, patterns, url
 except ImportError:
     # django < 1.5 compat
     from django.conf.urls.defaults import include, patterns, url  # NOQA
-from django.contrib import admin
 from django.views.defaults import page_not_found
 from django.http import HttpResponse
 
-from sentry import status_checks
+from sentry import django_admin, status_checks
 from sentry.utils import json
 from sentry.web.urls import urlpatterns as web_urlpatterns
 from sentry.web.frontend.csrf_failure import CsrfFailureView
 from sentry.web.frontend.error_500 import Error500View
 
-admin.autodiscover()
-admin_media_dir = os.path.join(os.path.dirname(admin.__file__), 'media')
-
 handler404 = lambda x: page_not_found(x, template_name='sentry/404.html')
 handler500 = Error500View.as_view()
 
@@ -50,7 +45,7 @@ def handler_healthcheck(request):
 
 urlpatterns = patterns(
     '',
-    url(r'^admin/', include(admin.site.urls)),
+    url(r'^admin/', include(django_admin.site.urls)),
     url(r'^500/', handler500, name='error-500'),
     url(r'^404/', handler404, name='error-400'),
     url(r'^_health/$', handler_healthcheck, name='healthcheck'),
diff --git a/src/sentry/debug/middleware.py b/src/sentry/debug/middleware.py
index fb192ea52f..1b2dcc8d55 100644
--- a/src/sentry/debug/middleware.py
+++ b/src/sentry/debug/middleware.py
@@ -37,7 +37,7 @@ class DebugMiddleware(object):
         # TODO(dcramer): support VPN via INTERNAL_IPS + ipaddr maps
         if not settings.SENTRY_DEBUGGER:
             return False
-        if not is_active_superuser(request.user):
+        if not is_active_superuser(request):
             return False
         if 'text/html' not in request.META.get('HTTP_ACCEPT', '*/*'):
             return False
diff --git a/src/sentry/django_admin.py b/src/sentry/django_admin.py
new file mode 100644
index 0000000000..48efdce112
--- /dev/null
+++ b/src/sentry/django_admin.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from copy import copy
+from django.contrib import admin
+
+
+class RestrictiveAdminSite(admin.AdminSite):
+    def has_permission(self, request):
+        from sentry.auth.utils import is_active_superuser
+
+        return is_active_superuser(request)
+
+
+def make_site():
+    admin.autodiscover()
+
+    # now kill off autodiscover since it would reset the registry
+    admin.autodiscover = lambda: None
+
+    site = RestrictiveAdminSite()
+    # copy over the autodiscovery
+    site._registry = copy(admin.site._registry)
+
+    # clear the default site registry to avoid leaking an insecure admin
+    admin.site._registry = {}
+
+    # rebind our admin site to maintain compatibility
+    admin.site = site
+
+    return site
+
+
+site = make_site()
diff --git a/src/sentry/middleware/profiler.py b/src/sentry/middleware/profiler.py
index 270a0a90f7..baacdeffa5 100644
--- a/src/sentry/middleware/profiler.py
+++ b/src/sentry/middleware/profiler.py
@@ -12,6 +12,8 @@ import StringIO
 from django.conf import settings
 from django.http import HttpResponse
 
+from sentry.auth.utils import is_active_superuser
+
 words_re = re.compile(r'\s+')
 
 group_prefix_re = [
@@ -38,7 +40,7 @@ class ProfileMiddleware(object):
             return False
         if settings.DEBUG:
             return True
-        if hasattr(request, 'user') and request.user.is_superuser:
+        if is_active_superuser(request):
             return True
         return False
 
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 7fd0dd971d..4d1713a1f9 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -14,6 +14,7 @@ from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
+from sentry.app import env
 from sentry.db.models import (
     BaseManager, BoundedPositiveIntegerField, FlexibleForeignKey, Model,
     sane_repr
@@ -40,7 +41,7 @@ class TeamManager(BaseManager):
             status=TeamStatus.VISIBLE
         )
 
-        if is_active_superuser(user) or settings.SENTRY_PUBLIC:
+        if is_active_superuser(env.request) or settings.SENTRY_PUBLIC:
             team_list = list(base_team_qs)
 
         else:
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 8e004d39b1..2fa795f146 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -70,13 +70,20 @@ class User(BaseModel, AbstractBaseUser):
 
     def has_perm(self, perm_name):
         warnings.warn('User.has_perm is deprecated', DeprecationWarning)
-        from sentry.auth.utils import is_active_superuser
-        return is_active_superuser(self)
+        return self._has_superuser_perm()
 
     def has_module_perms(self, app_label):
-        # the admin requires this method
+        warnings.warn('User.has_module_perms is deprecated', DeprecationWarning)
+        return self._has_superuser_perm()
+
+    def _has_superuser_perm(self):
         from sentry.auth.utils import is_active_superuser
-        return is_active_superuser(self)
+        from sentry.app import env
+        if not env.request:
+            return False
+        if env.request.user != self:
+            return False
+        return is_active_superuser(env.request)
 
     def get_display_name(self):
         return self.first_name or self.email or self.username
@@ -125,7 +132,3 @@ class User(BaseModel, AbstractBaseUser):
         AuthIdentity.objects.filter(
             user=from_user,
         ).update(user=to_user)
-
-    def is_active_superuser(self):
-        # TODO(dcramer): add VPN support via INTERNAL_IPS + ipaddr ranges
-        return self.is_superuser
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index f238b062d6..7885dfe4b6 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -307,7 +307,7 @@ class IPlugin(local, PluggableViewMixin):
         event = group.get_latest_event() or Event()
         event.group = group
 
-        request.access = access.from_user(request.user, group.organization)
+        request.access = access.from_request(request, group.organization)
 
         return response.respond(request, {
             'plugin': self,
diff --git a/src/sentry/utils/debug.py b/src/sentry/utils/debug.py
index e387287bd7..d82213f086 100644
--- a/src/sentry/utils/debug.py
+++ b/src/sentry/utils/debug.py
@@ -33,7 +33,7 @@ class ProfileMiddleware(object):
             return False
         if settings.DEBUG:
             return True
-        if hasattr(request, 'user') and is_active_superuser(request.user):
+        if hasattr(request, 'user') and is_active_superuser(request):
             return True
         return False
 
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 3db6b3b281..1bff1de23b 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -114,7 +114,7 @@ def manage_users(request):
 @transaction.atomic
 @csrf_protect
 def create_new_user(request):
-    if not is_active_superuser(request.user):
+    if not is_active_superuser(request):
         return HttpResponseRedirect(reverse('sentry'))
 
     form = NewUserForm(request.POST or None, initial={
@@ -161,7 +161,7 @@ def create_new_user(request):
 @requires_admin
 @csrf_protect
 def edit_user(request, user_id):
-    if not is_active_superuser(request.user):
+    if not is_active_superuser(request):
         return HttpResponseRedirect(reverse('sentry'))
 
     try:
diff --git a/src/sentry/web/frontend/admin_queue.py b/src/sentry/web/frontend/admin_queue.py
index e5539bed8c..314a2372e0 100644
--- a/src/sentry/web/frontend/admin_queue.py
+++ b/src/sentry/web/frontend/admin_queue.py
@@ -7,7 +7,7 @@ from sentry.web.frontend.base import BaseView
 
 class AdminQueueView(BaseView):
     def has_permission(self, request):
-        return is_active_superuser(request.user)
+        return is_active_superuser(request)
 
     def handle(self, request):
         context = {
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index ce61985c92..7a78f5dedf 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -52,7 +52,7 @@ class OrganizationMixin(object):
             organization_slug = request.session.get('activeorg')
 
         if organization_slug is not None:
-            if is_active_superuser(request.user):
+            if is_active_superuser(request):
                 try:
                     active_organization = Organization.objects.get_from_cache(
                         slug=organization_slug,
@@ -238,7 +238,7 @@ class OrganizationView(BaseView):
     def get_access(self, request, organization, *args, **kwargs):
         if organization is None:
             return access.DEFAULT
-        return access.from_user(request.user, organization)
+        return access.from_request(request, organization)
 
     def get_context_data(self, request, organization, **kwargs):
         context = super(OrganizationView, self).get_context_data(request)
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 623d127e9a..5af5d8bb04 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -66,7 +66,7 @@ class OrganizationMemberSettingsView(OrganizationView):
 
         can_admin = request.access.has_scope('member:delete')
 
-        if can_admin and not is_active_superuser(request.user):
+        if can_admin and not is_active_superuser(request):
             acting_member = OrganizationMember.objects.get(
                 user=request.user,
                 organization=organization,
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 0ccb7b33f9..8682ddd44a 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -66,7 +66,7 @@ class TeamSettingsView(TeamView):
 
             return HttpResponseRedirect(reverse('sentry-manage-team', args=[organization.slug, team.slug]))
 
-        if is_active_superuser(request.user):
+        if is_active_superuser(request):
             can_remove_team = True
         else:
             can_remove_team = request.access.has_team_scope(team, 'team:delete')
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 80b1c5eeda..4b812fb47a 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -97,10 +97,16 @@ def get_default_context(request, existing_context=None, team=None):
         context['selectedProject'] = serialize(project, user)
 
     if not existing_context or 'ACCESS' not in existing_context:
-        context['ACCESS'] = access.from_user(
-            user=user,
-            organization=organization,
-        ).to_django_context()
+        if request:
+            context['ACCESS'] = access.from_request(
+                request=request,
+                organization=organization,
+            ).to_django_context()
+        else:
+            context['ACCESS'] = access.from_user(
+                user=user,
+                organization=organization,
+            ).to_django_context()
 
     return context
 
