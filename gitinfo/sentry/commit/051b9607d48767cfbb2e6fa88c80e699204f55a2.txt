commit 051b9607d48767cfbb2e6fa88c80e699204f55a2
Author: Mark Story <mark@sentry.io>
Date:   Fri Jun 12 10:38:52 2020 -0400

    feat(perf-view) Add transaction details inside performance views. (#19278)
    
    Developer plans won't have access to full discover so we need an event
    details view inside of performance routes to avoid needing special
    escape hatches for performance. This also lets us fix the breadcrumb
    problems that event details had with in performance before.

diff --git a/src/sentry/static/sentry/app/components/events/eventMetadata.tsx b/src/sentry/static/sentry/app/components/events/eventMetadata.tsx
new file mode 100644
index 0000000000..c75fa64fc2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventMetadata.tsx
@@ -0,0 +1,77 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import {Event, OrganizationSummary} from 'app/types';
+import {SectionHeading} from 'app/components/charts/styles';
+import DateTime from 'app/components/dateTime';
+import ExternalLink from 'app/components/links/externalLink';
+import FileSize from 'app/components/fileSize';
+import ProjectBadge from 'app/components/idBadge/projectBadge';
+import space from 'app/styles/space';
+import getDynamicText from 'app/utils/getDynamicText';
+import Projects from 'app/utils/projects';
+
+type Props = {
+  event: Event;
+  organization: OrganizationSummary;
+  projectId: string;
+};
+
+/**
+ * Render metadata about the event and provide a link to the JSON blob.
+ * Used in the sidebar of performance event details and discover2 event details.
+ */
+function EventMetadata({event, organization, projectId}: Props) {
+  const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${event.eventID}/json/`;
+
+  return (
+    <MetaDataID>
+      <SectionHeading>{t('Event ID')}</SectionHeading>
+      <MetadataContainer data-test-id="event-id">{event.eventID}</MetadataContainer>
+      <MetadataContainer>
+        <DateTime
+          date={getDynamicText({
+            value: event.dateCreated || (event.endTimestamp || 0) * 1000,
+            fixed: 'Dummy timestamp',
+          })}
+        />
+      </MetadataContainer>
+      <Projects orgId={organization.slug} slugs={[projectId]}>
+        {({projects}) => {
+          const project = projects.find(p => p.slug === projectId);
+          return (
+            <StyledProjectBadge
+              project={project ? project : {slug: projectId}}
+              avatarSize={16}
+            />
+          );
+        }}
+      </Projects>
+      <MetadataJSON href={eventJsonUrl} className="json-link">
+        {t('Preview JSON')} (<FileSize bytes={event.size} />)
+      </MetadataJSON>
+    </MetaDataID>
+  );
+}
+
+const MetaDataID = styled('div')`
+  margin-bottom: ${space(4)};
+`;
+
+const MetadataContainer = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  color: ${p => p.theme.gray600};
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+const MetadataJSON = styled(ExternalLink)`
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+const StyledProjectBadge = styled(ProjectBadge)`
+  margin-bottom: ${space(2)};
+`;
+
+export default EventMetadata;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx b/src/sentry/static/sentry/app/components/events/opsBreakdown.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
rename to src/sentry/static/sentry/app/components/events/opsBreakdown.tsx
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx b/src/sentry/static/sentry/app/components/tagsTable.tsx
similarity index 66%
rename from src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
rename to src/sentry/static/sentry/app/components/tagsTable.tsx
index 9d14c7b92c..bb3ad4a42c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
+++ b/src/sentry/static/sentry/app/components/tagsTable.tsx
@@ -8,38 +8,33 @@ import Tooltip from 'app/components/tooltip';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
-import {Event, OrganizationSummary} from 'app/types';
+import {Event, EventTag} from 'app/types';
 import Version from 'app/components/version';
-import EventView from 'app/utils/discover/eventView';
-
-import {getExpandedResults} from './utils';
 
 type Props = {
-  organization: OrganizationSummary;
   event: Event;
-  eventView: EventView;
+  query: string;
+  generateUrl: (tag: EventTag) => LocationDescriptor;
+  title?: React.ReactNode;
 };
 
-const TagsTable = (props: Props) => {
-  const {organization, event, eventView} = props;
-
-  // create a clone of the event object, and delete the its id.
-  // we do this so that the id will not be added to the search conditions
-  // when the tag is clicked
-  const eventReference = {...event};
-  if (eventReference.id) {
-    delete eventReference.id;
-  }
-
+const TagsTable = ({
+  event,
+  query,
+  generateUrl,
+  title = t('Event Tag Details'),
+}: Props) => {
   const tags = event.tags;
+
   return (
     <StyledTagsTable>
-      <SectionHeading>{t('Event Tag Details')}</SectionHeading>
+      <SectionHeading>{title}</SectionHeading>
       <StyledTable>
         <tbody>
           {tags.map(tag => {
-            let target: LocationDescriptor | undefined;
-            const tagInQuery = eventView.query.includes(`${tag.key}:`);
+            const tagInQuery = query.includes(`${tag.key}:`);
+            const target = tagInQuery ? undefined : generateUrl(tag);
+
             const renderTagValue = () => {
               switch (tag.key) {
                 case 'release':
@@ -48,14 +43,6 @@ const TagsTable = (props: Props) => {
                   return tag.value;
               }
             };
-            if (!tagInQuery) {
-              const nextView = getExpandedResults(
-                eventView,
-                {[tag.key]: tag.value},
-                eventReference
-              );
-              target = nextView.getResultsViewUrlTarget(organization.slug);
-            }
 
             return (
               <StyledTr key={tag.key}>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 4201f37445..6e5de2dcf6 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1629,6 +1629,24 @@ function routes() {
               component={errorHandler(LazyLoad)}
             />
           </Route>
+          <Route
+            path="/organizations/:orgId/performance/:eventSlug/"
+            componentPromise={() =>
+              import(
+                /* webpackChunkName: "PerformanceContainer" */ 'app/views/performance'
+              )
+            }
+            component={errorHandler(LazyLoad)}
+          >
+            <IndexRoute
+              componentPromise={() =>
+                import(
+                  /* webpackChunkName: "PerformanceTransactionDetails" */ 'app/views/performance/transactionDetails'
+                )
+              }
+              component={errorHandler(LazyLoad)}
+            />
+          </Route>
 
           {/* Admin/manage routes */}
           <Route
diff --git a/src/sentry/static/sentry/app/utils/discover/styles.tsx b/src/sentry/static/sentry/app/utils/discover/styles.tsx
index e7e01a5cbf..853d95f7c4 100644
--- a/src/sentry/static/sentry/app/utils/discover/styles.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/styles.tsx
@@ -10,7 +10,6 @@ import space from 'app/styles/space';
 /**
  * Styled components used to render discover result sets.
  */
-
 export const Container = styled('div')`
   ${overflowEllipsis};
 `;
@@ -72,13 +71,21 @@ export const HeaderBox = styled(ContentBox)`
   flex-grow: 0;
 `;
 
-export const HeaderControls = styled('div')`
+export const HeaderTopControls = styled('div')`
   display: flex;
   justify-self: end;
   grid-row: 1/2;
   grid-column: 2/3;
 `;
 
+export const HeaderBottomControls = styled('div')`
+  display: flex;
+  justify-self: end;
+  justify-content: flex-end;
+  grid-row: 2/3;
+  grid-column: 2/3;
+`;
+
 export const StyledShortId = styled(ShortId)`
   justify-content: flex-start;
 `;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
index 2a9e0f48fd..61fca91c7c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
@@ -4,6 +4,7 @@ import {Location} from 'history';
 import styled from '@emotion/styled';
 import PropTypes from 'prop-types';
 
+import {BorderlessEventEntries} from 'app/components/events/eventEntries';
 import {EventQuery} from 'app/actionCreators/events';
 import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
@@ -12,32 +13,26 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {Client} from 'app/api';
 import withApi from 'app/utils/withApi';
 import {getMessage, getTitle} from 'app/utils/events';
-import {Organization, Event} from 'app/types';
+import {Organization, Event, EventTag} from 'app/types';
 import SentryTypes from 'app/sentryTypes';
 import getDynamicText from 'app/utils/getDynamicText';
-import {SectionHeading} from 'app/components/charts/styles';
-import DateTime from 'app/components/dateTime';
 import Button from 'app/components/button';
-import ExternalLink from 'app/components/links/externalLink';
-import FileSize from 'app/components/fileSize';
+import OpsBreakdown from 'app/components/events/opsBreakdown';
+import EventMetadata from 'app/components/events/eventMetadata';
 import LoadingError from 'app/components/loadingError';
 import NotFound from 'app/components/errors/notFound';
+import TagsTable from 'app/components/tagsTable';
 import AsyncComponent from 'app/components/asyncComponent';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
-import EventEntries from 'app/components/events/eventEntries';
-import {DataSection} from 'app/components/events/styles';
 import Projects from 'app/utils/projects';
 import EventView from 'app/utils/discover/eventView';
-import {ContentBox, HeaderBox} from 'app/utils/discover/styles';
-import ProjectBadge from 'app/components/idBadge/projectBadge';
+import {ContentBox, HeaderBox, HeaderBottomControls} from 'app/utils/discover/styles';
 
-import {generateTitle} from '../utils';
+import {generateTitle, getExpandedResults} from '../utils';
 import Pagination from './pagination';
 import LineGraph from './lineGraph';
-import TagsTable from '../tagsTable';
 import LinkedIssue from './linkedIssue';
 import DiscoverBreadcrumb from '../breadcrumb';
-import OpsBreakdown from './transaction/opsBreakdown';
 
 const slugValidator = function(
   props: {[key: string]: any},
@@ -107,6 +102,25 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
     return this.props.eventSlug.split(':')[0];
   }
 
+  generateTagUrl = (tag: EventTag) => {
+    const {eventView, organization} = this.props;
+    const {event} = this.state;
+    if (!event) {
+      return '';
+    }
+    const eventReference = {...event};
+    if (eventReference.id) {
+      delete eventReference.id;
+    }
+
+    const nextView = getExpandedResults(
+      eventView,
+      {[tag.key]: tag.value},
+      eventReference
+    );
+    return nextView.getResultsViewUrlTarget(organization.slug);
+  };
+
   renderBody() {
     const {event} = this.state;
 
@@ -118,7 +132,7 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
   }
 
   renderContent(event: Event) {
-    const {organization, location, eventView} = this.props;
+    const {api, organization, location, eventView} = this.props;
 
     // metrics
     trackAnalyticsEvent({
@@ -142,7 +156,7 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
             location={location}
           />
           <EventHeader event={event} />
-          <Controller>
+          <HeaderBottomControls>
             <StyledButton size="small" onClick={this.toggleSidebar}>
               {isSidebarVisible ? 'Hide Details' : 'Show Details'}
             </StyledButton>
@@ -153,7 +167,7 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
                 eventView={eventView}
               />
             )}
-          </Controller>
+          </HeaderBottomControls>
         </HeaderBox>
         <ContentBox>
           <div style={{gridColumn: isSidebarVisible ? '1/2' : '1/3'}}>
@@ -171,7 +185,8 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
               })}
             <Projects orgId={organization.slug} slugs={[this.projectId]}>
               {({projects}) => (
-                <StyledEventEntries
+                <BorderlessEventEntries
+                  api={api}
                   organization={organization}
                   event={event}
                   project={projects[0]}
@@ -193,7 +208,11 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
             {event.groupID && (
               <LinkedIssue groupId={event.groupID} eventId={event.eventID} />
             )}
-            <TagsTable eventView={eventView} event={event} organization={organization} />
+            <TagsTable
+              generateUrl={this.generateTagUrl}
+              event={event}
+              query={eventView.query}
+            />
           </div>
         </ContentBox>
       </React.Fragment>
@@ -286,55 +305,6 @@ const EventHeader = (props: {event: Event}) => {
   );
 };
 
-/**
- * Render metadata about the event and provide a link to the JSON blob
- */
-const EventMetadata = (props: {
-  event: Event;
-  organization: Organization;
-  projectId: string;
-}) => {
-  const {event, organization, projectId} = props;
-
-  const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${event.eventID}/json/`;
-
-  return (
-    <MetaDataID>
-      <SectionHeading>{t('Event ID')}</SectionHeading>
-      <MetadataContainer data-test-id="event-id">{event.eventID}</MetadataContainer>
-      <MetadataContainer>
-        <DateTime
-          date={getDynamicText({
-            value: event.dateCreated || (event.endTimestamp || 0) * 1000,
-            fixed: 'Dummy timestamp',
-          })}
-        />
-      </MetadataContainer>
-      <Projects orgId={organization.slug} slugs={[projectId]}>
-        {({projects}) => {
-          const project = projects.find(p => p.slug === projectId);
-          return (
-            <StyledProjectBadge
-              project={project ? project : {slug: projectId}}
-              avatarSize={16}
-            />
-          );
-        }}
-      </Projects>
-      <MetadataJSON href={eventJsonUrl} className="json-link">
-        {t('Preview JSON')} (<FileSize bytes={event.size} />)
-      </MetadataJSON>
-    </MetaDataID>
-  );
-};
-
-const Controller = styled('div')`
-  display: flex;
-  justify-content: flex-end;
-  grid-row: 2/3;
-  grid-column: 2/3;
-`;
-
 const StyledButton = styled(Button)`
   display: none;
 
@@ -355,35 +325,7 @@ const StyledEventHeader = styled('div')`
 const StyledTitle = styled('span')`
   color: ${p => p.theme.gray700};
   margin-right: ${space(1)};
-`;
-
-const MetaDataID = styled('div')`
-  margin-bottom: ${space(4)};
-`;
-
-const MetadataContainer = styled('div')`
-  display: flex;
-  justify-content: space-between;
-  color: ${p => p.theme.gray600};
-  font-size: ${p => p.theme.fontSizeMedium};
-`;
-
-const MetadataJSON = styled(ExternalLink)`
-  font-size: ${p => p.theme.fontSizeMedium};
-`;
-
-const StyledEventEntries = styled(EventEntries)`
-  & ${/* sc-selector */ DataSection} {
-    padding: ${space(3)} 0 0 0;
-  }
-  & ${/* sc-selector */ DataSection}:first-child {
-    padding-top: 0;
-    border-top: none;
-  }
-`;
-
-const StyledProjectBadge = styled(ProjectBadge)`
-  margin-bottom: ${space(2)};
+  align-self: center;
 `;
 
 export default withApi(EventDetailsContent);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
index 82d53e6ffd..e62ea44d59 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
@@ -10,7 +10,7 @@ import Hovercard from 'app/components/hovercard';
 import {t} from 'app/locale';
 import withApi from 'app/utils/withApi';
 import EventView from 'app/utils/discover/eventView';
-import {HeaderBox, HeaderControls} from 'app/utils/discover/styles';
+import {HeaderBox, HeaderTopControls} from 'app/utils/discover/styles';
 
 import DiscoverBreadcrumb from './breadcrumb';
 import EventInputName from './eventInputName';
@@ -92,7 +92,7 @@ class ResultsHeader extends React.Component<Props, State> {
           organization={organization}
           eventView={eventView}
         />
-        <HeaderControls>
+        <HeaderTopControls>
           <Feature
             organization={organization}
             features={['discover-query']}
@@ -110,7 +110,7 @@ class ResultsHeader extends React.Component<Props, State> {
               />
             )}
           </Feature>
-        </HeaderControls>
+        </HeaderTopControls>
       </HeaderBox>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/performance/breadcrumb.tsx b/src/sentry/static/sentry/app/views/performance/breadcrumb.tsx
new file mode 100644
index 0000000000..73781c124f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/breadcrumb.tsx
@@ -0,0 +1,69 @@
+import React from 'react';
+import {Location, LocationDescriptor} from 'history';
+
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';
+import {decodeScalar} from 'app/utils/queryString';
+
+import {getPerformanceLandingUrl} from './utils';
+import {transactionSummaryRouteWithQuery} from './transactionSummary/utils';
+
+type Props = {
+  organization: Organization;
+  location: Location;
+  transactionName?: string;
+  eventSlug?: string;
+};
+
+class Breadcrumb extends React.Component<Props> {
+  getCrumbs() {
+    const crumbs: Crumb[] = [];
+    const {organization, location, transactionName, eventSlug} = this.props;
+
+    const performanceTarget: LocationDescriptor = {
+      pathname: getPerformanceLandingUrl(organization),
+      query: {
+        ...location.query,
+        // clear out the transaction name
+        transaction: undefined,
+      },
+    };
+
+    crumbs.push({
+      to: performanceTarget,
+      label: t('Performance'),
+      preserveGlobalSelection: true,
+    });
+
+    if (transactionName) {
+      const summaryTarget = transactionSummaryRouteWithQuery({
+        orgSlug: organization.slug,
+        transaction: transactionName,
+        projectID: decodeScalar(location.query.project),
+        query: location.query,
+      });
+
+      crumbs.push({
+        to: summaryTarget,
+        label: t('Transaction Summary'),
+        preserveGlobalSelection: true,
+      });
+    }
+
+    if (transactionName && eventSlug) {
+      crumbs.push({
+        to: '',
+        label: t('Event Details'),
+      });
+    }
+
+    return crumbs;
+  }
+
+  render() {
+    return <Breadcrumbs crumbs={this.getCrumbs()} />;
+  }
+}
+
+export default Breadcrumb;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionDetails/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionDetails/content.tsx
new file mode 100644
index 0000000000..002ae59df6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transactionDetails/content.tsx
@@ -0,0 +1,221 @@
+import React from 'react';
+import {Params} from 'react-router/lib/Router';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+import PropTypes from 'prop-types';
+
+import {t} from 'app/locale';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import {Client} from 'app/api';
+import withApi from 'app/utils/withApi';
+import {Organization, Event, EventTag} from 'app/types';
+import SentryTypes from 'app/sentryTypes';
+import EventMetadata from 'app/components/events/eventMetadata';
+import {BorderlessEventEntries} from 'app/components/events/eventEntries';
+import Button from 'app/components/button';
+import LoadingError from 'app/components/loadingError';
+import NotFound from 'app/components/errors/notFound';
+import AsyncComponent from 'app/components/asyncComponent';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import OpsBreakdown from 'app/components/events/opsBreakdown';
+import TagsTable from 'app/components/tagsTable';
+import Projects from 'app/utils/projects';
+import {ContentBox, HeaderBox, HeaderBottomControls} from 'app/utils/discover/styles';
+import Breadcrumb from 'app/views/performance/breadcrumb';
+import {decodeScalar, appendTagCondition} from 'app/utils/queryString';
+
+import {transactionSummaryRouteWithQuery} from '../transactionSummary/utils';
+
+type Props = {
+  organization: Organization;
+  location: Location;
+  params: Params;
+  api: Client;
+  eventSlug: string;
+};
+
+type State = {
+  event: Event | undefined;
+  isSidebarVisible: boolean;
+} & AsyncComponent['state'];
+
+class EventDetailsContent extends AsyncComponent<Props, State> {
+  static propTypes: any = {
+    organization: SentryTypes.Organization.isRequired,
+    eventSlug: PropTypes.string.isRequired,
+    location: PropTypes.object.isRequired,
+  };
+
+  state: State = {
+    // AsyncComponent state
+    loading: true,
+    reloading: false,
+    error: false,
+    errors: [],
+    event: undefined,
+
+    // local state
+    isSidebarVisible: true,
+  };
+
+  toggleSidebar = () => {
+    this.setState({isSidebarVisible: !this.state.isSidebarVisible});
+  };
+
+  getEndpoints(): Array<[string, string]> {
+    const {organization, params} = this.props;
+    const {eventSlug} = params;
+
+    const url = `/organizations/${organization.slug}/events/${eventSlug}/`;
+
+    return [['event', url]];
+  }
+
+  get projectId() {
+    return this.props.eventSlug.split(':')[0];
+  }
+
+  generateTagUrl = (tag: EventTag) => {
+    const {location, organization} = this.props;
+    const {event} = this.state;
+    if (!event) {
+      return '';
+    }
+    const query = decodeScalar(location.query.query) || '';
+    const newQuery = {
+      ...location.query,
+      query: appendTagCondition(query, tag.key, tag.value),
+    };
+    return transactionSummaryRouteWithQuery({
+      orgSlug: organization.slug,
+      transaction: event.title,
+      projectID: decodeScalar(location.query.project),
+      query: newQuery,
+    });
+  };
+
+  renderBody() {
+    const {event} = this.state;
+
+    if (!event) {
+      return this.renderWrapper(<NotFound />);
+    }
+
+    return this.renderWrapper(this.renderContent(event));
+  }
+
+  renderContent(event: Event) {
+    const {api, organization, location, eventSlug} = this.props;
+
+    // metrics
+    trackAnalyticsEvent({
+      eventKey: 'performance.event_details',
+      eventName: 'Performance: Opened Event Details',
+      event_type: event.type,
+      organization_id: parseInt(organization.id, 10),
+    });
+
+    const {isSidebarVisible} = this.state;
+    const transactionName = event.title;
+    const query = decodeScalar(location.query.query) || '';
+
+    return (
+      <React.Fragment>
+        <HeaderBox>
+          <Breadcrumb
+            organization={organization}
+            location={location}
+            transactionName={transactionName}
+            eventSlug={eventSlug}
+          />
+          <StyledTitle data-test-id="event-header">{event.title}</StyledTitle>
+          <HeaderBottomControls>
+            <StyledButton size="small" onClick={this.toggleSidebar}>
+              {isSidebarVisible ? 'Hide Details' : 'Show Details'}
+            </StyledButton>
+          </HeaderBottomControls>
+        </HeaderBox>
+        <ContentBox>
+          <div style={{gridColumn: isSidebarVisible ? '1/2' : '1/3'}}>
+            <Projects orgId={organization.slug} slugs={[this.projectId]}>
+              {({projects}) => (
+                <BorderlessEventEntries
+                  api={api}
+                  organization={organization}
+                  event={event}
+                  project={projects[0]}
+                  location={location}
+                  showExampleCommit={false}
+                  showTagSummary={false}
+                />
+              )}
+            </Projects>
+          </div>
+          <div style={{gridColumn: '2/3', display: isSidebarVisible ? '' : 'none'}}>
+            <EventMetadata
+              event={event}
+              organization={organization}
+              projectId={this.projectId}
+            />
+            <OpsBreakdown event={event} />
+            <TagsTable event={event} query={query} generateUrl={this.generateTagUrl} />
+          </div>
+        </ContentBox>
+      </React.Fragment>
+    );
+  }
+
+  renderError(error) {
+    const notFound = Object.values(this.state.errors).find(
+      resp => resp && resp.status === 404
+    );
+    const permissionDenied = Object.values(this.state.errors).find(
+      resp => resp && resp.status === 403
+    );
+
+    if (notFound) {
+      return this.renderWrapper(<NotFound />);
+    }
+    if (permissionDenied) {
+      return this.renderWrapper(
+        <LoadingError message={t('You do not have permission to view that event.')} />
+      );
+    }
+
+    return this.renderWrapper(super.renderError(error, true, true));
+  }
+
+  renderLoading() {
+    return this.renderWrapper(super.renderLoading());
+  }
+
+  renderWrapper(children: React.ReactNode) {
+    const {organization} = this.props;
+
+    return (
+      <SentryDocumentTitle
+        title={t('Performance - Event Details')}
+        objSlug={organization.slug}
+      >
+        <React.Fragment>{children}</React.Fragment>
+      </SentryDocumentTitle>
+    );
+  }
+}
+
+const StyledButton = styled(Button)`
+  display: none;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: block;
+    width: 110px;
+  }
+`;
+
+const StyledTitle = styled('span')`
+  color: ${p => p.theme.gray700};
+  font-size: ${p => p.theme.headerFontSize};
+  grid-column: 1 / 2;
+`;
+
+export default withApi(EventDetailsContent);
diff --git a/src/sentry/static/sentry/app/views/performance/transactionDetails/index.tsx b/src/sentry/static/sentry/app/views/performance/transactionDetails/index.tsx
new file mode 100644
index 0000000000..3463b0e416
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transactionDetails/index.tsx
@@ -0,0 +1,59 @@
+import {Params} from 'react-router/lib/Router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from '@emotion/styled';
+import {Location} from 'history';
+
+import {Organization} from 'app/types';
+import {PageContent} from 'app/styles/organization';
+import {t} from 'app/locale';
+import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import SentryTypes from 'app/sentryTypes';
+import withOrganization from 'app/utils/withOrganization';
+
+import EventDetailsContent from './content';
+
+type Props = {
+  organization: Organization;
+  location: Location;
+  params: Params;
+};
+
+class EventDetails extends React.Component<Props> {
+  static propTypes: any = {
+    organization: SentryTypes.Organization.isRequired,
+    location: PropTypes.object.isRequired,
+  };
+
+  getEventSlug = (): string => {
+    const {eventSlug} = this.props.params;
+    return typeof eventSlug === 'string' ? eventSlug.trim() : '';
+  };
+
+  render() {
+    const {organization, location, params} = this.props;
+    const documentTitle = t('Performance Details');
+
+    return (
+      <SentryDocumentTitle title={documentTitle} objSlug={organization.slug}>
+        <StyledPageContent>
+          <LightWeightNoProjectMessage organization={organization}>
+            <EventDetailsContent
+              organization={organization}
+              location={location}
+              params={params}
+              eventSlug={this.getEventSlug()}
+            />
+          </LightWeightNoProjectMessage>
+        </StyledPageContent>
+      </SentryDocumentTitle>
+    );
+  }
+}
+
+export default withOrganization(EventDetails);
+
+const StyledPageContent = styled(PageContent)`
+  padding: 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx
deleted file mode 100644
index 8246c976c2..0000000000
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx
+++ /dev/null
@@ -1,60 +0,0 @@
-import React from 'react';
-import {Location} from 'history';
-
-import {t} from 'app/locale';
-import {Organization} from 'app/types';
-import EventView from 'app/utils/discover/eventView';
-import Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';
-
-import {getPerformanceLandingUrl} from '../utils';
-import {transactionSummaryRouteWithQuery} from './utils';
-
-type Props = {
-  eventView: EventView;
-  organization: Organization;
-  location: Location;
-  transactionName: string;
-};
-
-class Breadcrumb extends React.Component<Props> {
-  getCrumbs() {
-    const crumbs: Crumb[] = [];
-    const {eventView, organization, location, transactionName} = this.props;
-
-    const performanceTarget = {
-      pathname: getPerformanceLandingUrl(organization),
-      query: {
-        ...eventView.generateBlankQueryStringObject(),
-        ...location.query,
-        ...eventView.getGlobalSelection(),
-        // clear out the transaction name
-        transaction: undefined,
-      },
-    };
-
-    crumbs.push({
-      to: performanceTarget,
-      label: t('Performance'),
-    });
-
-    const summaryTarget = transactionSummaryRouteWithQuery({
-      orgSlug: organization.slug,
-      transaction: transactionName,
-      projectID: eventView.project.map(id => String(id)),
-      query: eventView.generateQueryStringObject(),
-    });
-
-    crumbs.push({
-      to: summaryTarget,
-      label: t('Transaction Summary'),
-    });
-
-    return crumbs;
-  }
-
-  render() {
-    return <Breadcrumbs crumbs={this.getCrumbs()} />;
-  }
-}
-
-export default Breadcrumb;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index 26c76a2225..712c6942cb 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -15,12 +15,12 @@ import Tags from 'app/views/eventsV2/tags';
 import SearchBar from 'app/views/events/searchBar';
 
 import TransactionList from './transactionList';
-import Breadcrumb from './breadcrumb';
 import UserStats from './userStats';
 import KeyTransactionButton from './keyTransactionButton';
 import TransactionSummaryCharts from './charts';
 import RelatedIssues from './relatedIssues';
 import SidebarCharts from './sidebarCharts';
+import Breadcrumb from '../breadcrumb';
 
 type Props = {
   location: Location;
@@ -81,7 +81,6 @@ class SummaryContent extends React.Component<Props> {
             <Breadcrumb
               organization={organization}
               location={location}
-              eventView={eventView}
               transactionName={transactionName}
             />
           </div>
@@ -107,6 +106,7 @@ class SummaryContent extends React.Component<Props> {
             />
             <TransactionList
               organization={organization}
+              transactionName={transactionName}
               location={location}
               eventView={eventView}
             />
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
index 77f39f83f2..de5cf2e3de 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
@@ -17,7 +17,7 @@ import EventView, {MetaType} from 'app/utils/discover/eventView';
 import SortLink from 'app/components/gridEditable/sortLink';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 import {getAggregateAlias} from 'app/utils/discover/fields';
-import {generateEventSlug, eventDetailsRouteWithEventView} from 'app/utils/discover/urls';
+import {generateEventSlug} from 'app/utils/discover/urls';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {decodeScalar} from 'app/utils/queryString';
 import DiscoverQuery from 'app/utils/discover/discoverQuery';
@@ -27,11 +27,13 @@ import {
 } from 'app/views/performance/constants';
 
 import {GridBodyCell, GridBodyCellNumber, GridHeadCell} from '../styles';
+import {getTransactionDetailsUrl} from '../utils';
 
 type WrapperProps = {
   eventView: EventView;
   location: Location;
   organization: Organization;
+  transactionName: string;
 };
 
 class TransactionList extends React.PureComponent<WrapperProps> {
@@ -68,7 +70,7 @@ class TransactionList extends React.PureComponent<WrapperProps> {
   };
 
   render() {
-    const {eventView, location, organization} = this.props;
+    const {eventView, location, organization, transactionName} = this.props;
     const activeFilter = this.getTransactionSort(location);
     const sortedEventView = eventView.withSorts([activeFilter.sort]);
 
@@ -120,6 +122,7 @@ class TransactionList extends React.PureComponent<WrapperProps> {
             <TransactionTable
               organization={organization}
               location={location}
+              transactionName={transactionName}
               eventView={eventView}
               tableData={tableData}
               isLoading={isLoading}
@@ -135,6 +138,7 @@ type Props = {
   eventView: EventView;
   location: Location;
   organization: Organization;
+  transactionName: string;
 
   isLoading: boolean;
   tableData: TableData | null | undefined;
@@ -205,7 +209,7 @@ class TransactionTable extends React.PureComponent<Props> {
     columnOrder: TableColumn<React.ReactText>[],
     tableMeta: MetaType
   ) {
-    const {organization, location, eventView} = this.props;
+    const {organization, location, transactionName} = this.props;
 
     return columnOrder.map((column, index) => {
       const field = String(column.key);
@@ -219,15 +223,14 @@ class TransactionTable extends React.PureComponent<Props> {
       const isFirstCell = index === 0;
 
       if (isFirstCell) {
-        // the first column of the row should link to the transaction details view
-        // on Discover
+        // The first column of the row should link to the transaction details view
         const eventSlug = generateEventSlug(row);
-
-        const target = eventDetailsRouteWithEventView({
-          orgSlug: organization.slug,
+        const target = getTransactionDetailsUrl(
+          organization,
           eventSlug,
-          eventView,
-        });
+          transactionName,
+          location.query
+        );
 
         rendered = (
           <Link to={target} onClick={this.handleViewDetailsClick}>
diff --git a/src/sentry/static/sentry/app/views/performance/utils.tsx b/src/sentry/static/sentry/app/views/performance/utils.tsx
index 9b72da67c3..a02e3012b8 100644
--- a/src/sentry/static/sentry/app/views/performance/utils.tsx
+++ b/src/sentry/static/sentry/app/views/performance/utils.tsx
@@ -1,5 +1,22 @@
-import {Organization} from 'app/types';
+import {LocationDescriptor, Query} from 'history';
 
-export function getPerformanceLandingUrl(organization: Organization): string {
+import {OrganizationSummary} from 'app/types';
+
+export function getPerformanceLandingUrl(organization: OrganizationSummary): string {
   return `/organizations/${organization.slug}/performance/`;
 }
+
+export function getTransactionDetailsUrl(
+  organization: OrganizationSummary,
+  eventSlug: string,
+  transaction: string,
+  query: Query
+): LocationDescriptor {
+  return {
+    pathname: `/organizations/${organization.slug}/performance/${eventSlug}/`,
+    query: {
+      ...query,
+      transaction,
+    },
+  };
+}
