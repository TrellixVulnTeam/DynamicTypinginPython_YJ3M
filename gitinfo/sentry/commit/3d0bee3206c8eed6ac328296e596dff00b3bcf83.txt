commit 3d0bee3206c8eed6ac328296e596dff00b3bcf83
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 14 15:21:47 2018 -0700

    feat(ui): Allow DropdownAutocomplete to be a controlled component (#7623)
    
    * remove enter delay from settings breadcrumbs
    * add # to team breadcrumb dropdown
    * add padding to breadcrumb
    * change exit delay to 0

diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index ff3f50c207..8bc56dea18 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -30,6 +30,8 @@ class AutoComplete extends React.Component {
      */
     isOpen: PropTypes.bool,
     onSelect: PropTypes.func,
+    onOpen: PropTypes.func,
+    onClose: PropTypes.func,
   };
 
   static defaultProps = {
@@ -57,6 +59,14 @@ class AutoComplete extends React.Component {
     this.items.clear();
   }
 
+  isControlled = () => typeof this.props.isOpen !== 'undefined';
+
+  getOpenState = () => {
+    let {isOpen} = this.props;
+
+    return this.isControlled() ? isOpen : this.state.isOpen;
+  };
+
   /**
    * Resets `this.items` and `this.state.highlightedIndex`.
    * Should be called whenever `inputValue` changes.
@@ -74,9 +84,9 @@ class AutoComplete extends React.Component {
     // We force `isOpen: true` here because:
     // 1) it's possible to have menu closed but input with focus (i.e. hitting "Esc")
     // 2) you select an item, input still has focus, and then change input
+    this.openMenu();
     this.setState({
       inputValue: value,
-      isOpen: true,
     });
 
     callIfFunction(onChange, e);
@@ -169,7 +179,13 @@ class AutoComplete extends React.Component {
    *
    * This is exposed to render function
    */
-  openMenu = () => {
+  openMenu = (...args) => {
+    let {onOpen} = this.props;
+    if (this.isControlled() && typeof onOpen === 'function') {
+      onOpen(...args);
+      return;
+    }
+
     this.setState({
       isOpen: true,
     });
@@ -180,7 +196,13 @@ class AutoComplete extends React.Component {
    *
    * This is exposed to render function
    */
-  closeMenu = () => {
+  closeMenu = (...args) => {
+    let {onClose} = this.props;
+    if (this.isControlled() && typeof onClose === 'function') {
+      onClose(...args);
+      return;
+    }
+
     this.setState({
       isOpen: false,
     });
@@ -216,12 +238,10 @@ class AutoComplete extends React.Component {
 
   render() {
     let {children} = this.props;
+    let isOpen = this.getOpenState();
 
     return (
-      <DropdownMenu
-        isOpen={this.state.isOpen}
-        onClickOutside={() => this.setState({isOpen: false})}
-      >
+      <DropdownMenu isOpen={isOpen} onClickOutside={this.closeMenu}>
         {dropdownMenuProps =>
           children({
             ...dropdownMenuProps,
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
index 5b01c399ec..926be04d19 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
@@ -10,7 +10,6 @@ class DropdownAutoComplete extends React.Component {
   };
 
   static defaultProps = {
-    isOpen: false,
     alignMenu: 'right',
   };
 
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
index af35cb5093..623769d588 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -34,6 +34,13 @@ class DropdownAutoCompleteMenu extends React.Component {
     isOpen: PropTypes.bool,
     onSelect: PropTypes.func,
     alignMenu: PropTypes.oneOf(['left', 'right']),
+
+    /**
+     * Props to pass to menu component
+     */
+    menuProps: PropTypes.object,
+    css: PropTypes.object,
+    style: PropTypes.object,
   };
 
   static defaultProps = {
@@ -76,14 +83,10 @@ class DropdownAutoCompleteMenu extends React.Component {
   };
 
   render() {
-    let {onSelect, children, items, action, ...props} = this.props;
+    let {onSelect, children, items, action, menuProps, style, css, ...props} = this.props;
 
     return (
-      <AutoComplete
-        itemToString={item => ''}
-        onSelect={onSelect}
-        isOpen={this.props.isOpen}
-      >
+      <AutoComplete itemToString={item => ''} onSelect={onSelect} {...props}>
         {({
           getActorProps,
           getRootProps,
@@ -106,7 +109,7 @@ class DropdownAutoCompleteMenu extends React.Component {
               })}
 
               {isOpen && (
-                <StyledMenu {...props} {...getMenuProps()}>
+                <StyledMenu style={style} css={css} {...getMenuProps(menuProps)}>
                   <StyledInputContainer>
                     <StyledInput autoFocus {...getInputProps()} />
                   </StyledInputContainer>
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
index 5bb30b39e1..334cb78bbc 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
@@ -5,6 +5,8 @@ import Crumb from './crumb';
 import DropdownAutoCompleteMenu from '../../../../components/dropdownAutoCompleteMenu';
 import Divider from './divider';
 
+const EXIT_DELAY = 0;
+
 class BreadcrumbDropdown extends React.Component {
   static propTypes = {
     hasMenu: PropTypes.bool,
@@ -17,7 +19,7 @@ class BreadcrumbDropdown extends React.Component {
   };
 
   static defaultProps = {
-    enterDelay: 200,
+    enterDelay: 0,
   };
 
   constructor(...args) {
@@ -25,15 +27,28 @@ class BreadcrumbDropdown extends React.Component {
 
     this.entering = false;
     this.leaving = false;
+    this.state = {
+      isOpen: false,
+    };
   }
 
+  open = () => {
+    this.setState({isOpen: true});
+  };
+
+  close = () => {
+    this.setState({isOpen: false});
+  };
+
+  handleStateChange = () => {};
+
   // Adds a delay when mouse hovers on actor (in this case the breadcrumb)
   handleMouseEnterActor = (actions, e) => {
     if (this.leaving) {
       clearTimeout(this.leaving);
     }
 
-    this.entering = setTimeout(() => actions.open(), this.props.enterDelay);
+    this.entering = setTimeout(() => this.open(), this.props.enterDelay);
   };
 
   // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open
@@ -42,7 +57,7 @@ class BreadcrumbDropdown extends React.Component {
       clearTimeout(this.leaving);
     }
 
-    actions.open();
+    this.open();
   };
 
   // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for
@@ -52,34 +67,43 @@ class BreadcrumbDropdown extends React.Component {
       clearTimeout(this.entering);
     }
 
-    this.leaving = setTimeout(() => actions.open(), 200);
+    this.leaving = setTimeout(() => this.close(), EXIT_DELAY);
   };
 
   // Close immediately when actor is clicked clicked
   handleClickActor = (actions, e) => {
-    actions.close();
+    this.close();
   };
 
   // Close immediately when clicked outside
   handleClose = actions => {
-    actions.close();
+    this.close();
   };
 
   render() {
     let {hasMenu, route, isLast, name, items, onSelect} = this.props;
     return (
-      <DropdownAutoCompleteMenu items={items} onSelect={onSelect} isStyled>
+      <DropdownAutoCompleteMenu
+        onOpen={this.handleMouseEnter}
+        onClose={this.close}
+        isOpen={this.state.isOpen}
+        menuProps={{
+          onMouseEnter: this.handleMouseEnter,
+          onMouseLeave: this.handleMouseLeave,
+        }}
+        items={items}
+        onSelect={onSelect}
+        isStyled
+      >
         {({actions, isOpen}) => {
           return (
-            <Crumb hasMenu={hasMenu}>
-              <div
-                onClick={this.handleClickActor.bind(this, actions)}
-                onMouseEnter={this.handleMouseEnterActor.bind(this, actions)}
-                onMouseLeave={this.handleMouseLeave.bind(this, actions)}
-                style={{display: 'inline'}}
-              >
-                {name || route.name}{' '}
-              </div>
+            <Crumb
+              hasMenu={hasMenu}
+              onClick={this.handleClickActor.bind(this, actions)}
+              onMouseEnter={this.handleMouseEnterActor.bind(this, actions)}
+              onMouseLeave={this.handleMouseLeave.bind(this, actions)}
+            >
+              <span>{name || route.name} </span>
               <Divider isHover={hasMenu && isOpen} isLast={isLast} />
             </Crumb>
           );
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/crumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/crumb.jsx
index fba7a83f20..f950b980bd 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/crumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/crumb.jsx
@@ -7,6 +7,7 @@ const Crumb = styled('div')`
   font-size: 18px;
   color: ${p => p.theme.gray3};
   margin-right: 8px;
+  padding: 6px 0;
   cursor: pointer;
   > span {
     transition: 0.1s all ease;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
index c6577d01bf..278ceb54d8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
@@ -47,7 +47,7 @@ class TeamCrumb extends React.Component {
         route={route}
         items={teams.map(({slug}) => ({
           value: slug,
-          label: slug,
+          label: `#${slug}`,
         }))}
         {...props}
       />
diff --git a/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx b/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
new file mode 100644
index 0000000000..fa03499330
--- /dev/null
+++ b/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
@@ -0,0 +1,87 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';
+
+jest.useFakeTimers();
+
+const CLOSE_DELAY = 0;
+
+describe('Settings Breadcrumb Dropdown', function() {
+  let wrapper;
+  let selectMock = jest.fn();
+  let items = [{value: '1', label: 'foo'}, {value: '2', label: 'bar'}];
+
+  beforeEach(function() {
+    wrapper = mount(
+      <BreadcrumbDropdown items={items} name="Test" hasMenu onSelect={selectMock} />
+    );
+  });
+
+  it('opens when hovered over crumb', function() {
+    wrapper.find('Crumb').simulate('mouseEnter');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('AutoCompleteItem')).toHaveLength(2);
+  });
+
+  it('closes after 200ms when mouse leaves crumb', function() {
+    wrapper.find('Crumb').simulate('mouseEnter');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+
+    wrapper.find('Crumb').simulate('mouseLeave');
+    // wonder what happens when this arg is negative o_O
+    jest.advanceTimersByTime(CLOSE_DELAY - 10);
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+    jest.advanceTimersByTime(10);
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(0);
+  });
+
+  it('closes immediately after selecting an item', function() {
+    wrapper.find('Crumb').simulate('mouseEnter');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+
+    wrapper
+      .find('AutoCompleteItem')
+      .first()
+      .simulate('click');
+    expect(wrapper.find('StyledMenu')).toHaveLength(0);
+  });
+
+  it('stays open when hovered over crumb and then into dropdown menu', function() {
+    wrapper.find('Crumb').simulate('mouseEnter');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+
+    wrapper.find('Crumb').simulate('mouseLeave');
+    wrapper.find('StyledMenu').simulate('mouseEnter');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+  });
+
+  it('closes after entering dropdown and then leaving dropdown', function() {
+    wrapper.find('Crumb').simulate('mouseEnter');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+
+    wrapper.find('Crumb').simulate('mouseLeave');
+    wrapper.find('StyledMenu').simulate('mouseEnter');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(1);
+
+    wrapper.find('StyledMenu').simulate('mouseLeave');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('StyledMenu')).toHaveLength(0);
+  });
+});
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index cfa63260d1..d9b53e8406 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -166,7 +166,6 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                             >
                               <DropdownAutoComplete
                                 alignMenu="right"
-                                isOpen={false}
                                 items={
                                   Array [
                                     Object {
@@ -179,7 +178,6 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                               >
                                 <DropdownAutoCompleteMenu
                                   alignMenu="right"
-                                  isOpen={false}
                                   items={
                                     Array [
                                       Object {
@@ -191,7 +189,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                   onSelect={[Function]}
                                 >
                                   <AutoComplete
-                                    isOpen={false}
+                                    alignMenu="right"
                                     itemToString={[Function]}
                                     onSelect={[Function]}
                                   >
diff --git a/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
index 0f5003c240..ca479db04a 100644
--- a/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
@@ -19,7 +19,6 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
             </Button>
           }
           alignMenu="right"
-          isOpen={false}
           items={
             Array [
               Object {
diff --git a/tests/js/spec/views/__snapshots__/teamMembers.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamMembers.spec.jsx.snap
index 5b79d3b403..71a0806476 100644
--- a/tests/js/spec/views/__snapshots__/teamMembers.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/teamMembers.spec.jsx.snap
@@ -19,7 +19,6 @@ exports[`TeamMembers render() renders 1`] = `
       >
         <DropdownAutoComplete
           alignMenu="right"
-          isOpen={false}
           items={
             Array [
               Object {
