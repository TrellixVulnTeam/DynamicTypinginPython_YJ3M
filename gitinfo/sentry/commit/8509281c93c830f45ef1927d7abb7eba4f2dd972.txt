commit 8509281c93c830f45ef1927d7abb7eba4f2dd972
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Mon Feb 6 21:34:30 2017 +0100

    Add exception info to apple crash report (#4837)

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 1c7d9ed345..8b1c3160fa 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -45,6 +45,11 @@ class EventAppleCrashReportEndpoint(Endpoint):
             event.data.get('threads'
         )).get('values')
 
+        exception = event.data.get(
+            'sentry.interfaces.Exception',
+            event.data.get('exception'
+        )).get('values')
+
         symbolicated = (request.GET.get('minified') not in ('1', 'true'))
         debug_images = None
         if (event.data.get('debug_meta') and
@@ -55,7 +60,8 @@ class EventAppleCrashReportEndpoint(Endpoint):
             threads=threads,
             context=event.data.get('contexts'),
             debug_images=debug_images,
-            symbolicated=symbolicated
+            symbolicated=symbolicated,
+            exception=exception
         ))
 
         response = HttpResponse(apple_crash_report_string, content_type='text/plain')
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index 4849856ee4..3fc1a285a1 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -9,16 +9,18 @@ REPORT_VERSION = '104'
 @implements_to_string
 class AppleCrashReport(object):
 
-    def __init__(self, threads=None, context=None,
-                debug_images=None, symbolicated=False):
+    def __init__(self, threads=None, context=None, debug_images=None,
+            symbolicated=False, exception=None):
         self.threads = threads
         self.context = context
         self.debug_images = debug_images
         self.symbolicated = symbolicated
+        self.exception = exception
 
     def __str__(self):
         rv = []
         rv.append(self._get_meta_header())
+        rv.append(self._get_exception_info())
         rv.append(self.get_threads_apple_string())
         rv.append(self.get_binary_images_apple_string())
         return '\n\n'.join(rv) + '\n\nEOF'
@@ -31,6 +33,85 @@ class AppleCrashReport(object):
             REPORT_VERSION
         )
 
+    def _get_exception_info(self):
+        rv = []
+        if self.exception and self.exception[0]:
+            # We only have one exception at a time
+            exception = self.exception[0]
+            signal = ""
+            if (exception
+                .get('mechanism')
+                .get('posix_signal')
+                .get('name')
+               ):
+                signal = ' ({})'.format(
+                    exception
+                    .get('mechanism')
+                    .get('posix_signal')
+                    .get('name')
+                )
+
+            name = ""
+            if (exception
+                .get('mechanism')
+                .get('mach_exception')
+                .get('exception_name')
+               ):
+                name = '{}'.format(
+                    exception
+                    .get('mechanism')
+                    .get('mach_exception')
+                    .get('exception_name')
+                )
+
+            if name or signal:
+                rv.append('Exception Type: {}{}'.format(
+                    name,
+                    signal
+                ))
+
+            exc_name = ""
+            if (exception
+                .get('mechanism')
+                .get('posix_signal')
+                .get('code_name')
+               ):
+                exc_name = '{}'.format(
+                    exception
+                    .get('mechanism')
+                    .get('posix_signal')
+                    .get('code_name')
+                )
+
+            exc_addr = ""
+            if (exception
+                .get('mechanism')
+                .get('relevant_address')
+               ):
+                exc_addr = ' at {}'.format(
+                    exception
+                    .get('mechanism')
+                    .get('relevant_address')
+                )
+
+            if exc_name and exc_addr:
+                rv.append('Exception Codes: {}{}'.format(
+                    exc_name,
+                    exc_addr
+                ))
+
+            if exception.get('thread_id') is not None:
+                rv.append('Crashed Thread: {}'.format(
+                    exception.get('thread_id')
+                ))
+
+            if exception.get('value'):
+                rv.append('\nApplication Specific Information:\n{}'.format(
+                    exception.get('value')
+                ))
+
+        return "\n".join(rv)
+
     def get_threads_apple_string(self):
         rv = []
         for thread in self.threads:
diff --git a/tests/sentry/lang/native/test_applecrashreport.py b/tests/sentry/lang/native/test_applecrashreport.py
index 4dcf8be9d1..76d71dcd0b 100644
--- a/tests/sentry/lang/native/test_applecrashreport.py
+++ b/tests/sentry/lang/native/test_applecrashreport.py
@@ -312,3 +312,32 @@ def test__convert_debug_meta_to_binary_image_row():
         'uuid': 'B427AE1D-BF36-3B50-936F-D78A7D1C8340'
     })
     assert binary_image == '0xd69a000 - 0xd712fff SentrySwift x86  <b427ae1dbf363b50936fd78a7d1c8340> /Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8F8140DF-B25B-4088-B5FB-57F474A49CD6/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift'
+
+
+def test__get_exception_info():
+    acr = AppleCrashReport(exception=[{
+        "value": "Attempted to dereference garbage pointer 0x10.",
+        "mechanism": {
+            "posix_signal": {
+                "name": "SIGBUS",
+                "code_name": "BUS_NOOP",
+                "signal": 10,
+                "code": 0
+            },
+            "relevant_address": "0x10",
+            "mach_exception": {
+                "exception": 1,
+                "exception_name": "EXC_BAD_ACCESS",
+                "subcode": 8,
+                "code": 16
+            }
+        },
+        "type": "EXC_BAD_ACCESS",
+        "thread_id": 0
+    }])
+    exception_info = acr._get_exception_info()
+    assert exception_info == 'Exception Type: EXC_BAD_ACCESS (SIGBUS)\n\
+Exception Codes: BUS_NOOP at 0x10\n\
+Crashed Thread: 0\n\n\
+Application Specific Information:\n\
+Attempted to dereference garbage pointer 0x10.'
