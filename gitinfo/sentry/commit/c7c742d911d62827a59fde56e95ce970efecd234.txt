commit c7c742d911d62827a59fde56e95ce970efecd234
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Dec 3 17:10:07 2015 -0800

    Move system.url-prefix to option
    
    This was a bit of a yak shave since it introduced a nice circular
    dependency. This also required an addition of a override_options helper

diff --git a/api-docs/generator.py b/api-docs/generator.py
index 187faa2c7e..5741e5dd85 100644
--- a/api-docs/generator.py
+++ b/api-docs/generator.py
@@ -28,7 +28,7 @@ from sentry.utils.apidocs import Runner, MockUtils, iter_scenarios, \
 
 
 OUTPUT_PATH = os.path.join(HERE, 'cache')
-HOST = urlparse.urlparse(settings.SENTRY_URL_PREFIX).netloc
+HOST = urlparse.urlparse(settings.SENTRY_OPTIONS['system.url-prefix']).netloc
 
 
 # We don't care about you, go away
diff --git a/api-docs/sentry.conf.py b/api-docs/sentry.conf.py
index 7d0d778da3..00df2ab814 100644
--- a/api-docs/sentry.conf.py
+++ b/api-docs/sentry.conf.py
@@ -81,3 +81,4 @@ SERVER_EMAIL = 'sentry@getsentry.com'
 SECRET_KEY = 'super secret secret key'
 
 SENTRY_OPTIONS['system.admin-email'] = 'admin@getsentry.com'
+SENTRY_OPTIONS['system.url-prefix'] = SENTRY_URL_PREFIX
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 3dd4c68f3a..baf44d9643 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -614,9 +614,6 @@ SENTRY_IGNORE_EXCEPTIONS = (
     'OperationalError',
 )
 
-# Absolute URL to the sentry root directory. Should not include a trailing slash.
-SENTRY_URL_PREFIX = ''
-
 # Should we send the beacon to the upstream server?
 SENTRY_BEACON = True
 
diff --git a/src/sentry/http.py b/src/sentry/http.py
index cc4f5f8bc0..a2720881c3 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -13,6 +13,7 @@ import socket
 import requests
 import warnings
 
+from sentry import options
 from django.conf import settings
 from django.core.exceptions import SuspiciousOperation
 from ipaddr import IPNetwork
@@ -36,9 +37,7 @@ DISALLOWED_IPS = set((IPNetwork(i) for i in settings.SENTRY_DISALLOWED_IPS))
 
 
 def get_server_hostname():
-    # TODO(dcramer): Ideally this would parse at runtime, but we currently
-    # change the URL prefix when runner initializes which may be post-import
-    return urlparse(settings.SENTRY_URL_PREFIX).hostname
+    return urlparse(options.get('system.url-prefix')).hostname
 
 
 def is_valid_url(url):
diff --git a/src/sentry/middleware/env.py b/src/sentry/middleware/env.py
index adf06ef805..b376538554 100644
--- a/src/sentry/middleware/env.py
+++ b/src/sentry/middleware/env.py
@@ -1,16 +1,9 @@
 from __future__ import absolute_import
 
-from django.conf import settings
-from django.core.urlresolvers import reverse
-
 from sentry.app import env
 
 
 class SentryEnvMiddleware(object):
     def process_request(self, request):
-        # HACK: bootstrap some env crud if we haven't yet
-        if not settings.SENTRY_URL_PREFIX:
-            settings.SENTRY_URL_PREFIX = request.build_absolute_uri(reverse('sentry')).strip('/')
-
         # bind request to env
         env.request = request
diff --git a/src/sentry/models/lostpasswordhash.py b/src/sentry/models/lostpasswordhash.py
index f390c002b5..95a98a813a 100644
--- a/src/sentry/models/lostpasswordhash.py
+++ b/src/sentry/models/lostpasswordhash.py
@@ -46,11 +46,12 @@ class LostPasswordHash(Model):
         return self.date_added > timezone.now() - timedelta(hours=48)
 
     def send_recover_mail(self):
+        from sentry import options
         from sentry.utils.email import MessageBuilder
 
         context = {
             'user': self.user,
-            'domain': urlparse(settings.SENTRY_URL_PREFIX).hostname,
+            'domain': urlparse(options.get('system.url-prefix')).hostname,
             'url': absolute_uri(reverse(
                 'sentry-account-recover-confirm',
                 args=[self.user.id, self.hash]
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index 7180af62f3..fe9efdd677 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -19,6 +19,7 @@ from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
+from sentry import options
 from sentry.db.models import (
     Model, BaseManager, BoundedPositiveIntegerField, FlexibleForeignKey,
     sane_repr
@@ -121,7 +122,11 @@ class ProjectKey(Model):
             key = self.public_key
             url = settings.SENTRY_PUBLIC_ENDPOINT or settings.SENTRY_ENDPOINT
 
-        urlparts = urlparse(url or settings.SENTRY_URL_PREFIX)
+        if url:
+            urlparts = urlparse(url)
+        else:
+            urlparts = urlparse(options.get('system.url-prefix'))
+
         return '%s://%s@%s/%s' % (
             urlparts.scheme,
             key,
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 673693cbeb..64ed1b2f4f 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -18,3 +18,6 @@ register('system.databases', default={}, flags=FLAG_NOSTORE)
 register('system.debug', default=False, flags=FLAG_NOSTORE)
 register('system.secret-key', flags=FLAG_NOSTORE)
 register('redis.options', default={}, flags=FLAG_NOSTORE)
+
+# Absolute URL to the sentry root directory. Should not include a trailing slash.
+register('system.url-prefix', ttl=60, grace=3600)
diff --git a/src/sentry/options/store.py b/src/sentry/options/store.py
index eb0a87d322..d88c36b94c 100644
--- a/src/sentry/options/store.py
+++ b/src/sentry/options/store.py
@@ -13,8 +13,8 @@ from time import time
 from random import random
 
 from django.utils import timezone
+from django.utils.functional import cached_property
 from sentry.db.models.query import create_or_update
-from sentry.models import Option
 from sentry.utils.hashlib import md5
 
 
@@ -59,6 +59,11 @@ class OptionsStore(object):
         self.ttl = ttl
         self.flush_local_cache()
 
+    @cached_property
+    def model(self):
+        from sentry.models.option import Option
+        return Option
+
     def make_key(self, name, default, type, flags, ttl, grace):
         return Key(name, default, type, flags, int(ttl), int(grace), _make_cache_key(name))
 
@@ -156,8 +161,8 @@ class OptionsStore(object):
         is limited at the moment.
         """
         try:
-            value = Option.objects.get(key=key.name).value
-        except Option.DoesNotExist:
+            value = self.model.objects.get(key=key.name).value
+        except self.model.DoesNotExist:
             value = None
         except Exception as e:
             logger.exception(unicode(e))
@@ -185,7 +190,7 @@ class OptionsStore(object):
 
     def set_store(self, key, value):
         create_or_update(
-            model=Option,
+            model=self.model,
             key=key.name,
             values={
                 'value': value,
@@ -215,7 +220,7 @@ class OptionsStore(object):
         return self.delete_cache(key)
 
     def delete_store(self, key):
-        Option.objects.filter(key=key.name).delete()
+        self.model.objects.filter(key=key.name).delete()
 
     def delete_cache(self, key):
         cache_key = key.cache_key
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 36ab6a5a68..52f86304f5 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -77,6 +77,7 @@ def bootstrap_options(settings, config):
     and convert options into Django settings that are
     required to even initialize the rest of the app.
     """
+    from sentry import options as _  # NOQA
     if config is None:
         return
     from sentry.utils.yaml import safe_load
@@ -201,13 +202,11 @@ def apply_legacy_settings(settings):
                       "Use SENTRY_OPTIONS instead, key 'system.admin-email'", DeprecationWarning)
         settings.SENTRY_OPTIONS['system.admin-email'] = settings.SENTRY_ADMIN_EMAIL
 
-    if settings.SENTRY_URL_PREFIX in ('', 'http://sentry.example.com') and not settings.DEBUG:
-        # Maybe also point to a piece of documentation for more information?
-        # This directly coincides with users getting the awkward
-        # `ALLOWED_HOSTS` exception.
-        show_big_error('SENTRY_URL_PREFIX is not configured')
-        # Set `ALLOWED_HOSTS` to the catch-all so it works
-        settings.ALLOWED_HOSTS = ['*']
+    if not settings.SENTRY_OPTIONS.get('system.url-prefix') and hasattr(settings, 'SENTRY_URL_PREFIX'):
+        import warnings
+        warnings.warn('SENTRY_URL_PREFIX is deprecated.'
+                      "Use SENTRY_OPTIONS instead, key 'system.url-prefix'", DeprecationWarning)
+        settings.SENTRY_OPTIONS['system.url-prefix'] = settings.SENTRY_URL_PREFIX
 
     if settings.TIME_ZONE != 'UTC':
         # non-UTC timezones are not supported
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index a717485301..30110c1855 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -160,9 +160,6 @@ SENTRY_FILESTORE_OPTIONS = {
 # Web Server #
 ##############
 
-# You MUST configure the absolute URI root for Sentry:
-SENTRY_URL_PREFIX = 'http://sentry.example.com'  # No trailing slash!
-
 # If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
 # header and uncomment the following settings
 # SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
@@ -214,6 +211,15 @@ YAML_CONFIG_TEMPLATE = """\
 # system.admin-email: 'your.name@example.com'
 system.admin-email: ''
 
+
+##############
+# Web Server #
+##############
+
+# You MUST configure the absolute URI root for Sentry:
+system.url-prefix: 'http://sentry.example.com'  # No trailing slash!
+
+
 ########
 # etc. #
 ########
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index 381e6fe420..627f704d32 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -59,7 +59,7 @@ def get_react_config(context):
 
     context = {
         'singleOrganization': settings.SENTRY_SINGLE_ORGANIZATION,
-        'urlPrefix': settings.SENTRY_URL_PREFIX,
+        'urlPrefix': options.get('system.url-prefix'),
         'version': version_info,
         'features': enabled_features,
         'mediaUrl': get_asset_url('sentry', ''),
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 541f2f889c..8a5047a4ab 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -37,7 +37,7 @@ from sentry.rules import EventState
 from sentry.utils import json
 
 from .fixtures import Fixtures
-from .helpers import AuthProvider, Feature, get_auth_header, TaskRunner
+from .helpers import AuthProvider, Feature, get_auth_header, TaskRunner, override_options
 
 
 class BaseTestCase(Fixtures, Exam):
@@ -206,6 +206,13 @@ class BaseTestCase(Fixtures, Exam):
             )
         return resp
 
+    def options(self, options):
+        """
+        A context manager that temporarily sets a global option and reverts
+        back to the original value when exiting the context.
+        """
+        return override_options(options)
+
     _postWithSignature = _postWithHeader
     _postWithNewSignature = _postWithHeader
 
diff --git a/src/sentry/testutils/helpers/__init__.py b/src/sentry/testutils/helpers/__init__.py
index b510956002..da7e910641 100644
--- a/src/sentry/testutils/helpers/__init__.py
+++ b/src/sentry/testutils/helpers/__init__.py
@@ -12,3 +12,4 @@ from .auth_providers import *  # NOQA
 from .features import *  # NOQA
 from .link_header import *  # NOQA
 from .task_runner import *  # NOQA
+from .options import *  # NOQA
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 8c47c2729d..0b3149c251 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -15,6 +15,7 @@ from urlparse import urlparse, urljoin
 from ipaddr import IPNetwork
 
 from django.conf import settings
+from sentry import options
 
 
 ParsedUriMatch = namedtuple('ParsedUriMatch', ['scheme', 'domain', 'path'])
@@ -22,8 +23,8 @@ ParsedUriMatch = namedtuple('ParsedUriMatch', ['scheme', 'domain', 'path'])
 
 def absolute_uri(url=None):
     if not url:
-        return settings.SENTRY_URL_PREFIX
-    return urljoin(settings.SENTRY_URL_PREFIX.rstrip('/') + '/', url.lstrip('/'))
+        return options.get('system.url-prefix')
+    return urljoin(options.get('system.url-prefix').rstrip('/') + '/', url.lstrip('/'))
 
 
 def safe_urlencode(params, doseq=0):
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index fa4c267d43..fa8cb68201 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -63,7 +63,7 @@ def pytest_configure(config):
     middleware[sudo] = 'sentry.testutils.middleware.SudoMiddleware'
     settings.MIDDLEWARE_CLASSES = tuple(middleware)
 
-    settings.SENTRY_URL_PREFIX = 'http://testserver'
+    settings.SENTRY_OPTIONS['system.url-prefix'] = 'http://testserver'
 
     # enable draft features
     settings.SENTRY_ENABLE_EMAIL_REPLIES = True
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 4b812fb47a..33a8e22e6b 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -45,11 +45,12 @@ def get_login_url(reset=False):
 
 
 def get_default_context(request, existing_context=None, team=None):
+    from sentry import options
     from sentry.plugins import plugins
 
     context = {
         'EVENTS_PER_PAGE': EVENTS_PER_PAGE,
-        'URL_PREFIX': settings.SENTRY_URL_PREFIX,
+        'URL_PREFIX': options.get('system.url-prefix'),
         'SINGLE_ORGANIZATION': settings.SENTRY_SINGLE_ORGANIZATION,
         'PLUGINS': plugins,
         'ALLOWED_HOSTS': settings.ALLOWED_HOSTS,
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index d10b460316..8b2cd5e2c5 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -45,7 +45,7 @@ class OrganizationMemberTest(TestCase):
     def test_send_invite_email(self):
         organization = self.create_organization()
         member = OrganizationMember(id=1, organization=organization, email='foo@example.com')
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             member.send_invite_email()
 
             assert len(mail.outbox) == 1
@@ -57,7 +57,7 @@ class OrganizationMemberTest(TestCase):
     def test_send_sso_link_email(self):
         organization = self.create_organization()
         member = OrganizationMember(id=1, organization=organization, email='foo@example.com')
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             member.send_invite_email()
 
             assert len(mail.outbox) == 1
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 39f410cf6c..5cf033484d 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -21,17 +21,17 @@ from sentry.utils.strings import compress
 class ProjectKeyTest(TestCase):
     def test_get_dsn(self):
         key = ProjectKey(project_id=1, public_key='public', secret_key='secret')
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             self.assertEquals(key.get_dsn(), 'http://public:secret@example.com/1')
 
     def test_get_dsn_with_ssl(self):
         key = ProjectKey(project_id=1, public_key='public', secret_key='secret')
-        with self.settings(SENTRY_URL_PREFIX='https://example.com'):
+        with self.options({'system.url-prefix': 'https://example.com'}):
             self.assertEquals(key.get_dsn(), 'https://public:secret@example.com/1')
 
     def test_get_dsn_with_port(self):
         key = ProjectKey(project_id=1, public_key='public', secret_key='secret')
-        with self.settings(SENTRY_URL_PREFIX='http://example.com:81'):
+        with self.options({'system.url-prefix': 'http://example.com:81'}):
             self.assertEquals(key.get_dsn(), 'http://public:secret@example.com:81/1')
 
     def test_get_dsn_with_public_endpoint_setting(self):
@@ -59,7 +59,7 @@ class LostPasswordTest(TestCase):
         )
 
     def test_send_recover_mail(self):
-        with self.settings(SENTRY_URL_PREFIX='http://testserver'), self.tasks():
+        with self.options({'system.url-prefix': 'http://testserver'}), self.tasks():
             self.password_hash.send_recover_mail()
 
         assert len(mail.outbox) == 1
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 19e3877f36..4ab3078a25 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -47,7 +47,7 @@ class MailPluginTest(TestCase):
 
         notification = Notification(event=event, rule=rule)
 
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             self.plugin.notify(notification)
 
         msg = mail.outbox[0]
@@ -76,7 +76,7 @@ class MailPluginTest(TestCase):
 
         notification = Notification(event=event)
 
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             self.plugin.notify(notification)
 
         stacktrace.get_title.assert_called_once_with()
@@ -103,7 +103,7 @@ class MailPluginTest(TestCase):
 
         notification = Notification(event=event)
 
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             self.plugin.notify(notification)
 
         stacktrace.get_title.assert_called_once_with()
@@ -129,7 +129,7 @@ class MailPluginTest(TestCase):
 
         notification = Notification(event=event)
 
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             self.plugin.notify(notification)
 
         assert _send_mail.call_count is 1
@@ -159,7 +159,7 @@ class MailPluginTest(TestCase):
 
         notification = Notification(event=event)
 
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             self.plugin.notify(notification)
 
         assert _send_mail.call_count is 1
@@ -226,7 +226,7 @@ class MailPluginTest(TestCase):
 
         notification = Notification(event=event)
 
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.options({'system.url-prefix': 'http://example.com'}):
             self.plugin.notify(notification)
 
         msg = mail.outbox[0]
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 5dfcb77bb2..c66d6a4c1a 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -4,9 +4,9 @@ from __future__ import absolute_import
 
 import mock
 
-from django.conf import settings
 from exam import fixture
 
+from sentry import options
 from sentry.models import Project
 from sentry.testutils import TestCase
 from sentry.utils.http import (
@@ -16,10 +16,10 @@ from sentry.utils.http import (
 
 class AbsoluteUriTest(TestCase):
     def test_without_path(self):
-        assert absolute_uri() == settings.SENTRY_URL_PREFIX
+        assert absolute_uri() == options.get('system.url-prefix')
 
     def test_with_path(self):
-        assert absolute_uri('/foo/bar') == '%s/foo/bar' % (settings.SENTRY_URL_PREFIX,)
+        assert absolute_uri('/foo/bar') == '%s/foo/bar' % (options.get('system.url-prefix'),)
 
 
 class SameDomainTestCase(TestCase):
