commit 95eedebe7fab69d6d3ce099091ce359c8fec346f
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 7 02:07:28 2015 -0700

    Move Release cache management into class helpers

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 0339ee435a..6edbbfc20d 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -13,7 +13,6 @@ import six
 
 from datetime import datetime, timedelta
 from django.conf import settings
-from django.core.cache import cache
 from django.db import IntegrityError, transaction
 from django.utils import timezone
 from hashlib import md5
@@ -259,29 +258,6 @@ class EventManager(object):
 
         return data
 
-    def _ensure_release(self, project, version, date):
-        cache_key = 'release:%s:%s' % (project.id, md5(version).hexdigest())
-
-        release_id = cache.get(cache_key)
-        if release_id is None:
-            release = Release.objects.get_or_create(
-                project=project,
-                version=version,
-                defaults={
-                    'date_added': date,
-                },
-            )[0]
-            release_id = release.id
-            cache.set(cache_key, release_id, 3600)
-
-        # fake an instance to ensure Django doesnt complain when we try
-        # to use this as a relation
-        return Release(
-            id=release_id,
-            project=project,
-            version=version,
-        )
-
     @suppress_exceptions
     def save(self, project, raw=False):
         # TODO: culprit should default to "most recent" frame in stacktraces when
@@ -360,10 +336,10 @@ class EventManager(object):
         })
 
         if release:
-            group_kwargs['first_release'] = self._ensure_release(
+            group_kwargs['first_release'] = Release.get_or_create(
                 project=project,
                 version=release,
-                date=date,
+                date_added=date,
             )
 
             Activity.objects.create(
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 57ab9399fc..955cdc3e53 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -391,17 +391,14 @@ class SourceProcessor(object):
             ])
         return frames
 
-    def get_release(self, data):
+    def get_release(self, project, data):
         if not data.get('release'):
             return
 
-        try:
-            return Release.objects.get(
-                project=data['project'],
-                version=data['release'],
-            )
-        except Release.DoesNotExist:
-            return
+        return Release.get(
+            project=project,
+            version=data['release'],
+        )
 
     def process(self, data):
         stacktraces = self.get_stacktraces(data)
@@ -418,7 +415,7 @@ class SourceProcessor(object):
             id=data['project'],
         )
 
-        release = self.get_release(data)
+        release = self.get_release(project, data)
 
         # all of these methods assume mutation on the original
         # objects rather than re-creation
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index b6ec2f613d..5a78fbea07 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -9,9 +9,11 @@ from __future__ import absolute_import, print_function
 
 from django.db import models
 from django.utils import timezone
+from hashlib import md5
 from jsonfield import JSONField
 
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
+from sentry.utils.cache import cache
 
 
 class Release(Model):
@@ -38,3 +40,46 @@ class Release(Model):
         unique_together = (('project', 'version'),)
 
     __repr__ = sane_repr('project_id', 'version')
+
+    @classmethod
+    def get_cache_key(cls, project_id, version):
+        return 'release:2:%s:%s' % (project_id, md5(version).hexdigest())
+
+    @classmethod
+    def get(cls, project, version):
+        cache_key = cls.get_cache_key(project.id, version)
+
+        release = cache.get(cache_key)
+        if release is None:
+            try:
+                release = cls.objects.get(
+                    project=project,
+                    version=version,
+                )
+            except cls.DoesNotExist:
+                release = -1
+            cache.set(cache_key, release, 300)
+
+        if release == -1:
+            return
+
+        return release
+
+    @classmethod
+    def get_or_create(cls, project, version, date_added):
+        cache_key = cls.get_cache_key(project.id, version)
+
+        release = cache.get(cache_key)
+        if release in (None, -1):
+            # TODO(dcramer): if the cache result is -1 we could attempt a
+            # default create here instead of default get
+            release = Release.objects.get_or_create(
+                project=project,
+                version=version,
+                defaults={
+                    'date_added': date_added,
+                },
+            )[0]
+            cache.set(cache_key, release, 3600)
+
+        return release
