commit 1c0450b288a8035c92fe325b0a6329441f68797e
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Nov 30 17:25:35 2012 -0800

    Remove global.js

diff --git a/Makefile b/Makefile
index 7d2501698a..78ad8afcb6 100644
--- a/Makefile
+++ b/Makefile
@@ -1,10 +1,8 @@
 VERSION = 2.0.0
 NPM_ROOT = node_modules/
 STATIC_DIR = src/sentry/static/sentry
-BOOTSTRAP_JS = ${STATIC_DIR}/scripts/bootstrap.js
-BOOTSTRAP_JS_MIN = ${STATIC_DIR}/scripts/bootstrap.min.js
-GLOBAL_JS = ${STATIC_DIR}/scripts/global.js
-GLOBAL_JS_MIN = ${STATIC_DIR}/scripts/global.min.js
+BOOTSTRAP_JS = ${STATIC_DIR}/scripts/lib/bootstrap.js
+BOOTSTRAP_JS_MIN = ${STATIC_DIR}/scripts/lib/bootstrap.min.js
 UGLIFY_JS ?= `which uglifyjs`
 COFFEE ?= `which coffee`
 WATCHR ?= `which watchr`
@@ -60,6 +58,11 @@ lint-python:
 	flake8 --exclude=migrations --ignore=E501,E225,E121,E123,E124,E125,E127,E128 --exit-zero src/sentry || exit 1
 	@echo ""
 
+lint-js:
+	@echo "Linting JavaScript files"
+	@${NPM_ROOT}/jshint/bin/hint src/sentry/ || exit 1
+	@echo ""
+
 coverage:
 	cd src && coverage run --include=sentry/* setup.py test && \
 	coverage html --omit=*/migrations/* -d cover
diff --git a/src/sentry/static/sentry/scripts/global.js b/src/sentry/static/sentry/scripts/global.js
deleted file mode 100644
index 426ca18279..0000000000
--- a/src/sentry/static/sentry/scripts/global.js
+++ /dev/null
@@ -1,783 +0,0 @@
-function varToggle(link, id) {
-    $('#v' + id).toggle();
-    var s = link.getElementsByTagName('span')[0];
-    var uarr = String.fromCharCode(0x25b6);
-    var darr = String.fromCharCode(0x25bc);
-    s.innerHTML = s.innerHTML == uarr ? darr : uarr;
-    return false;
-}
-
-(function() {
-  /**
-   * @private
-   */
-  var prioritySortLow = function(a, b) {
-    return b.priority - a.priority;
-  };
-
-  /**
-   * @private
-   */
-  var prioritySortHigh = function(a, b) {
-    return a.priority - b.priority;
-  };
-
-  /**
-   * @constructor
-   * @class Queue manages a queue of elements with priorities. Default
-   * is highest priority first.
-   *
-   * @param [options] If low is set to true returns lowest first.
-   */
-  Queue = function(options) {
-    var contents = [];
-
-    var sorted = false;
-    var sortStyle;
-    if(options === undefined) {
-        options = {};
-    }
-
-    if(options.low) {
-      sortStyle = prioritySortLow;
-    } else if(options.high) {
-      sortStyle = prioritySortHigh;
-    }
-
-    /**
-     * @private
-     */
-    var sort = function() {
-      contents.sort(sortStyle);
-      sorted = true;
-    };
-
-    var self = {
-      /**
-       * Removes and returns the next element in the queue.
-       * @member Queue
-       * @return The next element in the queue. If the queue is empty returns
-       * undefined.
-       *
-       * @see PrioirtyQueue#top
-       */
-      pop: function() {
-        if(!sorted && sortStyle) {
-          sort();
-        }
-
-        var element = contents.pop();
-
-        if(element) {
-          return element.object;
-        } else {
-          return undefined;
-        }
-      },
-
-      /**
-       * Returns but does not remove the next element in the queue.
-       * @member Queue
-       * @return The next element in the queue. If the queue is empty returns
-       * undefined.
-       *
-       * @see Queue#pop
-       */
-      top: function() {
-        if(!sorted) {
-          sort();
-        }
-
-        var element = contents[contents.length - 1];
-
-        if(element) {
-          return element.object;
-        } else {
-          return undefined;
-        }
-      },
-
-      /**
-       * @member Queue
-       * @param object The object to check the queue for.
-       * @returns true if the object is in the queue, false otherwise.
-       */
-      includes: function(object) {
-        for(var i = contents.length - 1; i >= 0; i--) {
-          if(contents[i].object === object) {
-            return true;
-          }
-        }
-
-        return false;
-      },
-
-      /**
-       * @member Queue
-       * @param object The object to check the queue for.
-       * @returns true if the object was replaced, false if it was pushed.
-       */
-      replace: function(object, priority, key) {
-        for(var i = contents.length - 1; i >= 0; i--) {
-          if(contents[i].object[key] === object[key]) {
-            contents[i] = {object: object, priority: priority};
-            return true;
-          }
-        }
-        self.push(object, priority);
-        return false;
-      },
-
-      /**
-       * @member Queue
-       * @returns the current number of elements in the queue.
-       */
-      size: function() {
-        return contents.length;
-      },
-
-      /**
-       * @member Queue
-       * @returns true if the queue is empty, false otherwise.
-       */
-      empty: function() {
-        return contents.length === 0;
-      },
-
-      /**
-       * @member Queue
-       * @param object The object to be pushed onto the queue.
-       * @param priority The priority of the object.
-       */
-      push: function(object, priority) {
-        contents.push({object: object, priority: priority});
-        sorted = false;
-      }
-    };
-
-    return self;
-  };
-})();
-
-/**
- * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
- * © 2011 Colin Snover <http://zetafleet.com>
- * Released under MIT license.
- */
-(function (Date, undefined) {
-    var origParse = Date.parse, numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ];
-    Date.parse = function (date) {
-        var timestamp, struct, minutesOffset = 0;
-
-        // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
-        // before falling back to any implementation-specific date parsing, so that's what we do, even if native
-        // implementations could be faster
-        //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
-        if ((struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))) {
-            // avoid NaN timestamps caused by "undefined" values being passed to Date.UTC
-            for (var i = 0, k; (k = numericKeys[i]); ++i) {
-                struct[k] = +struct[k] || 0;
-            }
-
-            // allow undefined days and months
-            struct[2] = (+struct[2] || 1) - 1;
-            struct[3] = +struct[3] || 1;
-
-            if (struct[8] !== 'Z' && struct[9] !== undefined) {
-                minutesOffset = struct[10] * 60 + struct[11];
-
-                if (struct[9] === '+') {
-                    minutesOffset = 0 - minutesOffset;
-                }
-            }
-
-            timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
-        }
-        else {
-            timestamp = origParse ? origParse(date) : NaN;
-        }
-
-        return timestamp;
-    };
-}(Date));
-
-if (Sentry === undefined) {
-    var Sentry = {};
-}
-
-(function(){
-    Sentry.options = {
-        urlPrefix: '',
-        mediaUrl: '/media/',
-        defaultImage: '/media/images/sentry.png'
-    };
-
-    Sentry.config = function(data){
-        $.each(data, function(k, v){
-            Sentry.options[k] = v;
-        });
-    };
-
-    Sentry.prettyDate = function(date_str) {
-        // we need to zero out at CST
-        var time = Date.parse(date_str);
-        var now = new Date();
-        var now_utc = Date.UTC(
-            now.getUTCFullYear(),
-            now.getUTCMonth(),
-            now.getUTCDate(),
-            now.getUTCHours(),
-            now.getUTCMinutes(),
-            now.getUTCSeconds()
-        );
-
-        var seconds = (now_utc - time) / 1000;
-        // var offset = (new Date().getTimezoneOffset() - 300) * 60;
-        // seconds = seconds + offset;
-        var token = 'ago';
-        var time_formats = [
-          [60, 'just now', 'just now'], // 60
-          [120, '1 minute ago', '1 minute from now'], // 60*2
-          [3600, 'minutes', 60], // 60*60, 60
-          [7200, '1 hour ago', '1 hour from now'], // 60*60*2
-          [86400, 'hours', 3600], // 60*60*24, 60*60
-          [172800, 'yesterday', 'tomorrow'], // 60*60*24*2
-          [604800, 'days', 86400], // 60*60*24*7, 60*60*24
-          [1209600, 'last week', 'next week'], // 60*60*24*7*4*2
-          [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7
-          [4838400, 'last month', 'next month'], // 60*60*24*7*4*2
-          [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4
-          [58060800, 'last year', 'next year'], // 60*60*24*7*4*12*2
-          [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12
-          [5806080000, 'last century', 'next century'], // 60*60*24*7*4*12*100*2
-          [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100
-        ];
-        var list_choice = 1;
-
-        if (seconds < 0)
-        {
-            seconds = Math.abs(seconds);
-            token = 'from now';
-            list_choice = 2;
-        }
-
-        for (var i=0, format; (format = time_formats[i]); i++) {
-            if (seconds < format[0])
-            {
-                if (typeof format[2] == 'string')
-                    return format[list_choice];
-                else
-                    return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;
-            }
-        }
-        return time;
-    };
-
-    Sentry.prettyDates = function() {
-        $('.pretty-date').each(function(_, el){
-            var $el = $(el);
-            var title = $el.attr('title');
-            if (title) {
-                var date = Sentry.prettyDate(title);
-                if (date) {
-                    $el.text(date);
-                }
-            }
-        });
-    };
-
-    Sentry.toggle = function(el){
-      var $el = $(el);
-      $el.toggle();
-    };
-
-    Sentry.getQueryParams = function() {
-        var vars = {}, hash;
-        var href = window.location.href;
-        if (href.indexOf('?') === -1) {
-          return vars;
-        }
-        var hashes = href.slice(href.indexOf('?') + 1, (href.indexOf('#') !== -1 ? href.indexOf('#') : href.length)).split('&');
-        $.each(hashes, function(_, chunk){
-            hash = chunk.split('=');
-            if (!hash[0] && !hash[1]) {
-              return;
-            }
-            vars[hash[0]] = hash[1] ? decodeURIComponent(hash[1]).replace(/\+/, ' ') : '';
-        });
-        return vars;
-    };
-
-    $(document).ready(function(){
-        // replace text inputs with remote select2 widgets
-        $('.filter').each(function(_, el){
-            var $filter = $(el);
-            var $input = $filter.find('input[type=text]');
-            if ($input.length > 0) {
-                $input.select2({
-                    initSelection: function (el, callback) {
-                        var $el = $(el);
-                        callback({id: $el.val(), text: $el.val()});
-                    },
-                    allowClear: true,
-                    minimumInputLength: 3,
-                    ajax: {
-                        url: Sentry.options.urlPrefix + '/api/' + Sentry.options.projectId + '/tags/search/',
-                        dataType: 'json',
-                        data: function (term, page) {
-                            return {
-                                query: term,
-                                quietMillis: 300,
-                                name: $input.attr('name'),
-                                limit: 10
-                            };
-                        },
-                        results: function (data, page) {
-                            var results = [];
-                            $(data.results).each(function(_, val){
-                                results.push({
-                                    id: val,
-                                    text: val
-                                });
-                            });
-                            return {results: results};
-                        }
-                    }
-                });
-            } else {
-                $input = $filter.find('select').select2({
-                    allowClear: true
-                });
-            }
-            if ($input.length) {
-                $input.on('change', function(e){
-                    var query = Sentry.getQueryParams();
-                    query[e.target.name] = e.val;
-                    window.location.href = '?' + $.param(query);
-                });
-            }
-        });
-
-        // Update date strings periodically
-        setInterval(Sentry.prettyDates, 5000);
-        Sentry.prettyDates();
-    });
-
-    $(document).ajaxSend(function(event, xhr, settings) {
-        function getCookie(name) {
-            var cookieValue = null;
-            if (document.cookie && document.cookie !== '') {
-                var cookies = document.cookie.split(';');
-                for (var i = 0; i < cookies.length; i++) {
-                    var cookie = jQuery.trim(cookies[i]);
-                    // Does this cookie string begin with the name we want?
-                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
-                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
-                        break;
-                    }
-                }
-            }
-            return cookieValue;
-        }
-        function sameOrigin(url) {
-            // url could be relative or scheme relative or absolute
-            var host = document.location.host; // host + port
-            var protocol = document.location.protocol;
-            var sr_origin = '//' + host;
-            var origin = protocol + sr_origin;
-            // Allow absolute or scheme relative URLs to same origin
-            return (url == origin || url.slice(0, origin.length + 1) == origin + '/') ||
-                (url == sr_origin || url.slice(0, sr_origin.length + 1) == sr_origin + '/') ||
-                // or any other URL that isn't scheme relative or absolute i.e relative.
-                !(/^(\/\/|http:|https:).*/.test(url));
-        }
-        function safeMethod(method) {
-            return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
-        }
-
-        if (!safeMethod(settings.type) && sameOrigin(settings.url)) {
-            xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));
-        }
-    });
-
-    $('.popup').live('click', function(){
-        var $this = $(this);
-        var $window = $(window);
-        var $container = $($this.attr('data-container'));
-        var title = $this.attr('data-title') || 'Untitled';
-        var content = $container.html();
-        var height = Math.min($window.height() - 100, $container.height() + 40);
-        var width = Math.min($window.width() - 100, $container.width() + 40);
-        var w = window.open("about:blank", "dsqApiExpand", "toolbar=0,status=0,location=0,menubar=0,height=" + height + ",width=" + width);
-        w.document.write("<!DOCTYPE html><html>" +
-            "<head>" +
-                "<title>" + title + "</title>" +
-                "<link href=\"" + Sentry.options.popupCss + "\" rel=\"stylesheet\" type=\"text/css\"/>" +
-            "</head><body>" +
-                "<div id=\"popup\">" + content + "</div></body>" +
-            "</html>");
-    });
-
-}());
-if (Sentry === undefined) {
-    var Sentry = {};
-}
-(function(){
-    function getRankedPosition(list, value, idx) {
-        for (var i=0, item; (item = list[i]); i++) {
-            if (value > item[idx]) {
-                return i;
-            }
-        }
-        return -1;
-    }
-    function getPosition(list, value, idx) {
-        for (var i=0, item; (item = list[i]); i++) {
-            if (value == item[idx]) {
-                return i;
-            }
-        }
-        return -1;
-    }
-    Sentry.realtime = {};
-    Sentry.realtime.options = {
-        viewId: null,
-        projectId: null
-    };
-    Sentry.realtime.status = false;
-    Sentry.realtime.queue = Queue({high: true});
-
-    Sentry.realtime.init = function(){
-        var sorted = [];
-        $('#event_list .event').each(function(i, el){
-            var $el = $(el);
-            sorted.push([$el.attr('data-score'), $el.attr('data-group')]);
-        });
-        Sentry.realtime.events = sorted;
-
-        $('#sentry-realtime').click(function(){
-            if (Sentry.realtime.status) {
-                Sentry.realtime.disable();
-            } else {
-                Sentry.realtime.enable();
-            }
-        });
-        Sentry.realtime.poll();
-        setInterval(Sentry.realtime.tick, 300);
-    };
-
-    Sentry.realtime.config = function(data){
-        $.each(data, function(k, v){
-            Sentry.realtime.options[k] = v;
-        });
-    };
-
-    Sentry.realtime.toggle = function(){
-        if (Sentry.realtime.status) {
-            Sentry.realtime.enable();
-        } else {
-            Sentry.realtime.disable();
-        }
-    };
-
-    Sentry.realtime.enable = function(){
-        var $el = $('#sentry-realtime');
-        $el.removeClass('realtime-play');
-        $el.addClass('realtime-pause');
-        $el.text('Pause Feed');
-        Sentry.realtime.status = true;
-    };
-
-    Sentry.realtime.disable = function(){
-        var $el = $('#sentry-realtime');
-        $el.addClass('realtime-play');
-        $el.removeClass('realtime-pause');
-        $el.text('Go Live');
-        Sentry.realtime.status = false;
-    };
-
-    Sentry.realtime.tick = function(){
-        if (Sentry.realtime.queue.empty()) {
-            return;
-        }
-        var data = Sentry.realtime.queue.pop();
-        var $row = $('.event[data-group="' + data.id + '"]');
-        var is_new = ($row.length === 0);
-
-        // ensure "no messages" is cleaned up
-        $('#no_messages').remove();
-
-        // resort because we suck at javascript
-        Sentry.realtime.events.sort(function(a, b){
-            return b[0] - a[0];
-        });
-
-        // if the row already was present, let's make sure
-        // the count changed
-        if (!is_new) {
-            if ($row.attr('data-count') == data.count) {
-                return;
-            }
-        }
-
-        // get the ranked position based on data.score
-        pos = getRankedPosition(Sentry.realtime.events, data.score, 0);
-
-        // check to see if the row already exists in the sort,
-        // and get the current position
-        old_pos = getPosition(Sentry.realtime.events, data.id, 1);
-
-        // if the row was already present, adjust its score
-        if (old_pos !== -1) {
-            Sentry.realtime.events[old_pos][0] = data.score;
-            if (old_pos == pos) {
-                return;
-            }
-            $row.remove();
-        } else if (!is_new) {
-            $row.remove();
-        }
-
-        $row = $(data.html);
-
-        // if the row doesnt outrank any existing elements
-        if (pos === -1) {
-            $('#event_list').append($row);
-        } else {
-            $('.event[data-group="' + Sentry.realtime.events[pos][1] + '"]').before($row);
-        }
-
-        // insert it into the events list at the current position
-        if (is_new) {
-            Sentry.realtime.events.splice(pos, 0, [data.score, data.id]);
-        }
-
-        $row.find('.sparkline').sparkline('html', {enableTagOptions: true});
-
-        // shiny fx
-        $row.css('background-color', '#ddd').animate({backgroundColor: '#fff'}, 1200);
-    };
-
-    Sentry.realtime.poll = function(){
-        if (!Sentry.realtime.status) {
-            setTimeout(Sentry.realtime.poll, 1000);
-            return;
-        }
-        data = Sentry.getQueryParams();
-        data.view_id = Sentry.realtime.options.viewId || undefined;
-        data.cursor = Sentry.realtime.cursor || undefined;
-
-        $.ajax({
-            url: Sentry.options.urlPrefix + '/api/' + Sentry.realtime.options.projectId + '/poll/',
-            type: 'get',
-            dataType: 'json',
-            data: data,
-            success: function(groups){
-                if (!groups.length) {
-                    setTimeout(Sentry.realtime.poll, 5000);
-                    return;
-                }
-                Sentry.realtime.cursor = groups[groups.length - 1].score || undefined;
-                $(groups).each(function(i, data){
-                    Sentry.realtime.queue.replace(data, data.score, 'id');
-                });
-                setTimeout(Sentry.realtime.poll, 1000);
-            },
-            error: function(){
-                // if an error happened lets give the server a bit of time before we poll again
-                setTimeout(Sentry.realtime.poll, 10000);
-            }
-        });
-
-        // make sure we limit the number shown
-        while (Sentry.realtime.events.length > 50) {
-            var item = Sentry.realtime.events.pop();
-            $('.event[data-group="' + item[1] + '"]').remove();
-        }
-    };
-
-    $(document).ready(function(){
-        Sentry.realtime.init();
-    });
-
-}());if (Sentry === undefined) {
-    var Sentry = {};
-}
-(function(){
-    Sentry.charts = {};
-    Sentry.charts.render = function(el){
-        var $sparkline = $(el);
-
-        if ($sparkline.length < 1) {
-            return; // Supress an empty chart
-        }
-
-        $.ajax({
-            url: $sparkline.attr('data-api-url'),
-            type: 'get',
-            dataType: 'json',
-            data: {
-                days: 7,
-                gid: $sparkline.attr('data-group') || undefined
-            },
-            success: function(data){
-                $sparkline.height($sparkline.parent().height());
-
-                $.plot($sparkline, [
-                    {
-                        data: data,
-                        color: '#3079d0',
-                        shadowSize: 0,
-                        lines: {
-                            lineWidth: 1,
-                            show: true,
-                            fill: true
-                        }
-                    }
-                ], {
-                    xaxis: {
-                       mode: "time"
-                    },
-                    yaxis: {
-                       min: 0,
-                       tickFormatter: function(value) {
-                            if (value > 999999) {
-                                return (value / 1000000) + 'mm';
-                            }
-                            if (value > 999) {
-                                return (value / 1000) + 'k';
-                            }
-                            return value;
-                       }
-                    },
-                    grid: {
-                        show: true,
-                        backgroundColor: '#f9f9f9',
-                        borderColor: '#eeeeee',
-                        borderWidth: 1,
-                        tickColor: '#eeeeee'
-                    },
-                    hoverable: false,
-                    legend: {
-                        noColumns: 5
-                    },
-                    lines: { show: false }
-
-                });
-            }
-        });
-    };
-}());if (Sentry === undefined) {
-    var Sentry = {};
-}
-(function(){
-    Sentry.notifications = {};
-    Sentry.notifications.status = false;
-
-    Sentry.notifications.enable = function(){
-        // if (window.webkitNotifications.checkPermission()) {
-        //     Sentry.notifications.status = true;
-        //     $('#sentry_notify').text('Disable Notifications');
-        // } else {
-        window.webkitNotifications.requestPermission(function(){
-            Sentry.notifications.status = true;
-            Sentry.notifications.show({'type': 'simple', 'title': 'Sentry', 'body': 'Notifications have been enabled.'});
-            $('#sentry_notify').text('Disable Notifications');
-        });
-        // }
-    };
-
-    Sentry.notifications.disable = function(){
-        Sentry.notifications.status = false;
-        $('#sentry_notify').text('Enable Notifications');
-    };
-
-    Sentry.notifications.show = function(options){
-        if (!Sentry.notifications.status) return;
-
-        var note;
-
-        if (options.type == 'html') {
-            note = window.webkitNotifications.createHTMLNotification(options.url);
-        } else {
-            note = window.webkitNotifications.createNotification(options.image || Sentry.options.defaultImage, options.title, options.body);
-        }
-        note.ondisplay = function() {
-            setTimeout(function(){ note.cancel(); }, 10000);
-        };
-        note.show();
-    };
-
-    $(document).ready(function(){
-        if (window.webkitNotifications){
-            Sentry.notifications.status = (window.webkitNotifications.checkPermission() > 0);
-            $('<li><a id="sentry_notify" href="javascript:void()">' + (Sentry.notifications.status ? 'Disable Notifications' : 'Enable Notifications') + '</a></li>').click(function(){
-                if (Sentry.notifications.status) {
-                    Sentry.notifications.disable();
-                } else {
-                    Sentry.notifications.enable();
-                }
-            }).prependTo('#account');
-        }
-    });
-}());if (Sentry === undefined) {
-    var Sentry = {};
-}
-(function(){
-    Sentry.stream = {};
-    Sentry.stream.clear = function(project_id) {
-        if (confirm("Are you sure you want to mark all your stream as resolved?")) {
-            $.ajax({
-                url: Sentry.options.urlPrefix + '/api/' + project_id + '/clear/',
-                type: 'post',
-                dataType: 'json',
-                success: function(groups){
-                    window.location.reload();
-                }
-            });
-        }
-    };
-    Sentry.stream.resolve = function(project_id, gid, remove){
-        if (typeof(remove) == 'undefined') {
-            remove = true;
-        }
-        $.ajax({
-            url: Sentry.options.urlPrefix + '/api/' + project_id + '/resolve/',
-            type: 'post',
-            dataType: 'json',
-            data: {
-                gid: gid
-            },
-            success: function(groups){
-                for (var i=groups.length-1, data, row; (data=groups[i]); i--) {
-                    $('.event[data-group="' + data.id + '"]').remove();
-                    if (!remove) {
-                        $('#event_list').prepend(data.html);
-                        $('.event[data-group="' + data.id + '"]').addClass('fresh');
-                    }
-                }
-            }
-        });
-    };
-    Sentry.stream.bookmark = function(project_id, gid, el){
-        $.ajax({
-            url: Sentry.options.urlPrefix + '/api/' + project_id + '/bookmark/',
-            type: 'post',
-            dataType: 'json',
-            data: {
-                gid: gid
-            },
-            success: function(data){
-                if (!el) {
-                    return;
-                }
-                var $el = $(el);
-                if (data.bookmarked) {
-                    $el.addClass('checked');
-                } else {
-                    $el.removeClass('checked');
-                }
-            }
-        });
-    };
-}());
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/global.min.js b/src/sentry/static/sentry/scripts/global.min.js
deleted file mode 100644
index 7570afc005..0000000000
--- a/src/sentry/static/sentry/scripts/global.min.js
+++ /dev/null
@@ -1 +0,0 @@
-function varToggle(e,t){$("#v"+t).toggle();var n=e.getElementsByTagName("span")[0],r=String.fromCharCode(9654),i=String.fromCharCode(9660);return n.innerHTML=n.innerHTML==r?i:r,!1}(function(){var e=function(e,t){return t.priority-e.priority},t=function(e,t){return e.priority-t.priority};Queue=function(n){var r=[],i=!1,s;n===undefined&&(n={}),n.low?s=e:n.high&&(s=t);var o=function(){r.sort(s),i=!0},u={pop:function(){!i&&s&&o();var e=r.pop();return e?e.object:undefined},top:function(){i||o();var e=r[r.length-1];return e?e.object:undefined},includes:function(e){for(var t=r.length-1;t>=0;t--)if(r[t].object===e)return!0;return!1},replace:function(e,t,n){for(var i=r.length-1;i>=0;i--)if(r[i].object[n]===e[n])return r[i]={object:e,priority:t},!0;return u.push(e,t),!1},size:function(){return r.length},empty:function(){return r.length===0},push:function(e,t){r.push({object:e,priority:t}),i=!1}};return u}})(),function(e,t){var n=e.parse,r=[1,4,5,6,7,10,11];e.parse=function(i){var s,o,u=0;if(o=/^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(i)){for(var a=0,f;f=r[a];++a)o[f]=+o[f]||0;o[2]=(+o[2]||1)-1,o[3]=+o[3]||1,o[8]!=="Z"&&o[9]!==t&&(u=o[10]*60+o[11],o[9]==="+"&&(u=0-u)),s=e.UTC(o[1],o[2],o[3],o[4],o[5]+u,o[6],o[7])}else s=n?n(i):NaN;return s}}(Date);if(Sentry===undefined)var Sentry={};(function(){Sentry.options={urlPrefix:"",mediaUrl:"/media/",defaultImage:"/media/images/sentry.png"},Sentry.config=function(e){$.each(e,function(e,t){Sentry.options[e]=t})},Sentry.prettyDate=function(e){var t=Date.parse(e),n=new Date,r=Date.UTC(n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate(),n.getUTCHours(),n.getUTCMinutes(),n.getUTCSeconds()),i=(r-t)/1e3,s="ago",o=[[60,"just now","just now"],[120,"1 minute ago","1 minute from now"],[3600,"minutes",60],[7200,"1 hour ago","1 hour from now"],[86400,"hours",3600],[172800,"yesterday","tomorrow"],[604800,"days",86400],[1209600,"last week","next week"],[2419200,"weeks",604800],[4838400,"last month","next month"],[29030400,"months",2419200],[58060800,"last year","next year"],[290304e4,"years",29030400],[580608e4,"last century","next century"],[580608e5,"centuries",290304e4]],u=1;i<0&&(i=Math.abs(i),s="from now",u=2);for(var a=0,f;f=o[a];a++)if(i<f[0])return typeof f[2]=="string"?f[u]:Math.floor(i/f[2])+" "+f[1]+" "+s;return t},Sentry.prettyDates=function(){$(".pretty-date").each(function(e,t){var n=$(t),r=n.attr("title");if(r){var i=Sentry.prettyDate(r);i&&n.text(i)}})},Sentry.toggle=function(e){var t=$(e);t.toggle()},Sentry.getQueryParams=function(){var e={},t,n=window.location.href;if(n.indexOf("?")===-1)return e;var r=n.slice(n.indexOf("?")+1,n.indexOf("#")!==-1?n.indexOf("#"):n.length).split("&");return $.each(r,function(n,r){t=r.split("=");if(!t[0]&&!t[1])return;e[t[0]]=t[1]?decodeURIComponent(t[1]).replace(/\+/," "):""}),e},$(document).ready(function(){$(".filter").each(function(e,t){var n=$(t),r=n.find("input[type=text]");r.length>0?r.select2({initSelection:function(e,t){var n=$(e);t({id:n.val(),text:n.val()})},allowClear:!0,minimumInputLength:3,ajax:{url:Sentry.options.urlPrefix+"/api/"+Sentry.options.projectId+"/tags/search/",dataType:"json",data:function(e,t){return{query:e,quietMillis:300,name:r.attr("name"),limit:10}},results:function(e,t){var n=[];return $(e.results).each(function(e,t){n.push({id:t,text:t})}),{results:n}}}}):r=n.find("select").select2({allowClear:!0}),r.length&&r.on("change",function(e){var t=Sentry.getQueryParams();t[e.target.name]=e.val,window.location.href="?"+$.param(t)})}),setInterval(Sentry.prettyDates,5e3),Sentry.prettyDates()}),$(document).ajaxSend(function(e,t,n){function r(e){var t=null;if(document.cookie&&document.cookie!==""){var n=document.cookie.split(";");for(var r=0;r<n.length;r++){var i=jQuery.trim(n[r]);if(i.substring(0,e.length+1)==e+"="){t=decodeURIComponent(i.substring(e.length+1));break}}}return t}function i(e){var t=document.location.host,n=document.location.protocol,r="//"+t,i=n+r;return e==i||e.slice(0,i.length+1)==i+"/"||e==r||e.slice(0,r.length+1)==r+"/"||!/^(\/\/|http:|https:).*/.test(e)}function s(e){return/^(GET|HEAD|OPTIONS|TRACE)$/.test(e)}!s(n.type)&&i(n.url)&&t.setRequestHeader("X-CSRFToken",r("csrftoken"))}),$(".popup").live("click",function(){var e=$(this),t=$(window),n=$(e.attr("data-container")),r=e.attr("data-title")||"Untitled",i=n.html(),s=Math.min(t.height()-100,n.height()+40),o=Math.min(t.width()-100,n.width()+40),u=window.open("about:blank","dsqApiExpand","toolbar=0,status=0,location=0,menubar=0,height="+s+",width="+o);u.document.write("<!DOCTYPE html><html><head><title>"+r+"</title>"+'<link href="'+Sentry.options.popupCss+'" rel="stylesheet" type="text/css"/>'+"</head><body>"+'<div id="popup">'+i+"</div></body>"+"</html>")})})();if(Sentry===undefined)var Sentry={};(function(){function e(e,t,n){for(var r=0,i;i=e[r];r++)if(t>i[n])return r;return-1}function t(e,t,n){for(var r=0,i;i=e[r];r++)if(t==i[n])return r;return-1}Sentry.realtime={},Sentry.realtime.options={viewId:null,projectId:null},Sentry.realtime.status=!1,Sentry.realtime.queue=Queue({high:!0}),Sentry.realtime.init=function(){var e=[];$("#event_list .event").each(function(t,n){var r=$(n);e.push([r.attr("data-score"),r.attr("data-group")])}),Sentry.realtime.events=e,$("#sentry-realtime").click(function(){Sentry.realtime.status?Sentry.realtime.disable():Sentry.realtime.enable()}),Sentry.realtime.poll(),setInterval(Sentry.realtime.tick,300)},Sentry.realtime.config=function(e){$.each(e,function(e,t){Sentry.realtime.options[e]=t})},Sentry.realtime.toggle=function(){Sentry.realtime.status?Sentry.realtime.enable():Sentry.realtime.disable()},Sentry.realtime.enable=function(){var e=$("#sentry-realtime");e.removeClass("realtime-play"),e.addClass("realtime-pause"),e.text("Pause Feed"),Sentry.realtime.status=!0},Sentry.realtime.disable=function(){var e=$("#sentry-realtime");e.addClass("realtime-play"),e.removeClass("realtime-pause"),e.text("Go Live"),Sentry.realtime.status=!1},Sentry.realtime.tick=function(){if(Sentry.realtime.queue.empty())return;var n=Sentry.realtime.queue.pop(),r=$('.event[data-group="'+n.id+'"]'),i=r.length===0;$("#no_messages").remove(),Sentry.realtime.events.sort(function(e,t){return t[0]-e[0]});if(!i&&r.attr("data-count")==n.count)return;pos=e(Sentry.realtime.events,n.score,0),old_pos=t(Sentry.realtime.events,n.id,1);if(old_pos!==-1){Sentry.realtime.events[old_pos][0]=n.score;if(old_pos==pos)return;r.remove()}else i||r.remove();r=$(n.html),pos===-1?$("#event_list").append(r):$('.event[data-group="'+Sentry.realtime.events[pos][1]+'"]').before(r),i&&Sentry.realtime.events.splice(pos,0,[n.score,n.id]),r.find(".sparkline").sparkline("html",{enableTagOptions:!0}),r.css("background-color","#ddd").animate({backgroundColor:"#fff"},1200)},Sentry.realtime.poll=function(){if(!Sentry.realtime.status){setTimeout(Sentry.realtime.poll,1e3);return}data=Sentry.getQueryParams(),data.view_id=Sentry.realtime.options.viewId||undefined,data.cursor=Sentry.realtime.cursor||undefined,$.ajax({url:Sentry.options.urlPrefix+"/api/"+Sentry.realtime.options.projectId+"/poll/",type:"get",dataType:"json",data:data,success:function(e){if(!e.length){setTimeout(Sentry.realtime.poll,5e3);return}Sentry.realtime.cursor=e[e.length-1].score||undefined,$(e).each(function(e,t){Sentry.realtime.queue.replace(t,t.score,"id")}),setTimeout(Sentry.realtime.poll,1e3)},error:function(){setTimeout(Sentry.realtime.poll,1e4)}});while(Sentry.realtime.events.length>50){var e=Sentry.realtime.events.pop();$('.event[data-group="'+e[1]+'"]').remove()}},$(document).ready(function(){Sentry.realtime.init()})})();if(Sentry===undefined)var Sentry={};(function(){Sentry.charts={},Sentry.charts.render=function(e){var t=$(e);if(t.length<1)return;$.ajax({url:t.attr("data-api-url"),type:"get",dataType:"json",data:{days:7,gid:t.attr("data-group")||undefined},success:function(e){t.height(t.parent().height()),$.plot(t,[{data:e,color:"#3079d0",shadowSize:0,lines:{lineWidth:1,show:!0,fill:!0}}],{xaxis:{mode:"time"},yaxis:{min:0,tickFormatter:function(e){return e>999999?e/1e6+"mm":e>999?e/1e3+"k":e}},grid:{show:!0,backgroundColor:"#f9f9f9",borderColor:"#eeeeee",borderWidth:1,tickColor:"#eeeeee"},hoverable:!1,legend:{noColumns:5},lines:{show:!1}})}})}})();if(Sentry===undefined)var Sentry={};(function(){Sentry.notifications={},Sentry.notifications.status=!1,Sentry.notifications.enable=function(){window.webkitNotifications.requestPermission(function(){Sentry.notifications.status=!0,Sentry.notifications.show({type:"simple",title:"Sentry",body:"Notifications have been enabled."}),$("#sentry_notify").text("Disable Notifications")})},Sentry.notifications.disable=function(){Sentry.notifications.status=!1,$("#sentry_notify").text("Enable Notifications")},Sentry.notifications.show=function(e){if(!Sentry.notifications.status)return;var t;e.type=="html"?t=window.webkitNotifications.createHTMLNotification(e.url):t=window.webkitNotifications.createNotification(e.image||Sentry.options.defaultImage,e.title,e.body),t.ondisplay=function(){setTimeout(function(){t.cancel()},1e4)},t.show()},$(document).ready(function(){window.webkitNotifications&&(Sentry.notifications.status=window.webkitNotifications.checkPermission()>0,$('<li><a id="sentry_notify" href="javascript:void()">'+(Sentry.notifications.status?"Disable Notifications":"Enable Notifications")+"</a></li>").click(function(){Sentry.notifications.status?Sentry.notifications.disable():Sentry.notifications.enable()}).prependTo("#account"))})})();if(Sentry===undefined)var Sentry={};(function(){Sentry.stream={},Sentry.stream.clear=function(e){confirm("Are you sure you want to mark all your stream as resolved?")&&$.ajax({url:Sentry.options.urlPrefix+"/api/"+e+"/clear/",type:"post",dataType:"json",success:function(e){window.location.reload()}})},Sentry.stream.resolve=function(e,t,n){typeof n=="undefined"&&(n=!0),$.ajax({url:Sentry.options.urlPrefix+"/api/"+e+"/resolve/",type:"post",dataType:"json",data:{gid:t},success:function(e){for(var t=e.length-1,r,i;r=e[t];t--)$('.event[data-group="'+r.id+'"]').remove(),n||($("#event_list").prepend(r.html),$('.event[data-group="'+r.id+'"]').addClass("fresh"))}})},Sentry.stream.bookmark=function(e,t,n){$.ajax({url:Sentry.options.urlPrefix+"/api/"+e+"/bookmark/",type:"post",dataType:"json",data:{gid:t},success:function(e){if(!n)return;var t=$(n);e.bookmarked?t.addClass("checked"):t.removeClass("checked")}})}})();
\ No newline at end of file
