commit 396dcf2ca60be773c8c525148bdd21f2a47178e8
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jun 5 11:05:53 2019 -0700

    feat(ui): Move calculating other category into TagDistributionMeter (#13530)
    
    We'll use the same logic for events-v2 as well for group details

diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index fbca1871e9..d72fe74be7 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -2,7 +2,6 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 
-import {t} from 'app/locale';
 import {deviceNameMapper, loadDeviceListModule} from 'app/components/deviceName';
 import SentryTypes from 'app/sentryTypes';
 import withEnvironment from 'app/utils/withEnvironment';
@@ -82,17 +81,6 @@ const GroupTagDistributionMeter = createReactClass({
     let segments = [];
 
     if (topValues) {
-      const totalVisible = topValues.reduce((sum, value) => sum + value.count, 0);
-      const hasOther = totalVisible < totalValues;
-
-      if (hasOther) {
-        topValues.push({
-          value: 'other',
-          name: t('Other'),
-          count: totalValues - totalVisible,
-        });
-      }
-
       segments = this.state.iOSDeviceList
         ? topValues.map(value => ({
             ...value,
diff --git a/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx b/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
index fef3f46ed4..927ed90348 100644
--- a/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
+++ b/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
@@ -38,6 +38,18 @@ export default class TagDistributionMeter extends React.Component {
   renderSegments() {
     const {segments, totalValues} = this.props;
 
+    const totalVisible = segments.reduce((sum, value) => sum + value.count, 0);
+    const hasOther = totalVisible < totalValues;
+
+    if (hasOther) {
+      segments.push({
+        isOther: true,
+        name: t('Other'),
+        value: 'other',
+        count: totalValues - totalVisible,
+      });
+    }
+
     return (
       <React.Fragment>
         {segments.map((value, index) => {
@@ -55,10 +67,11 @@ export default class TagDistributionMeter extends React.Component {
             <Tooltip key={value.value} title={tooltipHtml} containerDisplayMode="inline">
               <Segment
                 style={{width: pct + '%'}}
-                to={value.url}
+                to={value.isOther ? null : value.url}
                 index={index}
                 first={index === 0}
                 last={index === segments.length - 1}
+                isOther={!!value.isOther}
               >
                 <Description first={index == 0}>
                   <Percentage>{pctLabel}%</Percentage>
@@ -124,20 +137,18 @@ const Title = styled('div')`
   line-height: 1;
 `;
 
-const getColor = p => {
-  return [
-    '#7c7484',
-    '#867f90',
-    '#918a9b',
-    '#9b96a7',
-    '#a6a1b3',
-    '#b0acbe',
-    '#bbb7ca',
-    '#c5c3d6',
-    '#d0cee1',
-    '#dad9ed',
-  ][p.index];
-};
+const colors = [
+  '#7c7484',
+  '#867f90',
+  '#918a9b',
+  '#9b96a7',
+  '#a6a1b3',
+  '#b0acbe',
+  '#bbb7ca',
+  '#c5c3d6',
+  '#d0cee1',
+  '#dad9ed',
+];
 
 const Segment = styled(Link, {shouldForwardProp: isPropValid})`
   height: 16px;
@@ -154,7 +165,7 @@ const Segment = styled(Link, {shouldForwardProp: isPropValid})`
   border-top-right-radius: ${p => p.last && p.theme.borderRadius};
   border-bottom-right-radius: ${p => p.last && p.theme.borderRadius};
 
-  background-color: ${getColor};
+  background-color: ${p => (p.isOther ? colors[colors.length - 1] : colors[p.index])};
 `;
 
 const Description = styled('span', {shouldForwardProp: isPropValid})`
