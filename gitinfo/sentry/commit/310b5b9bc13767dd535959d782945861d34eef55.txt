commit 310b5b9bc13767dd535959d782945861d34eef55
Author: Mark Story <mark@mark-story.com>
Date:   Tue Nov 20 10:13:31 2018 -0500

    feat(jira) Start config views for Jira Server (#10637)
    
    This doesn't do much yet but I wanted to avoid making a huge pull
    request that does all the things at once.
    
    Refs APP-801

diff --git a/src/sentry/integrations/jira_server/integration.py b/src/sentry/integrations/jira_server/integration.py
index 07a601c9f8..23b9eefb60 100644
--- a/src/sentry/integrations/jira_server/integration.py
+++ b/src/sentry/integrations/jira_server/integration.py
@@ -2,12 +2,17 @@ from __future__ import absolute_import
 
 import logging
 
+from django import forms
 from django.utils.translation import ugettext as _
 
+from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.integrations import (
     IntegrationFeatures, IntegrationProvider, IntegrationMetadata, FeatureDescription,
 )
 from sentry.integrations.jira import JiraIntegration
+from sentry.pipeline import NestedPipelineView, PipelineView
+from sentry.utils.http import absolute_uri
+from sentry.web.helpers import render_to_response
 
 logger = logging.getLogger('sentry.integrations.jira_server')
 
@@ -53,6 +58,80 @@ metadata = IntegrationMetadata(
 )
 
 
+class InstallationForm(forms.Form):
+    url = forms.CharField(
+        label=_('Jira URL'),
+        help_text=_('The base URL for your Jira Server instance, including the host and protocol.'),
+        widget=forms.TextInput(
+            attrs={'placeholder': 'https://jira.example.com'}
+        ),
+    )
+    verify_ssl = forms.BooleanField(
+        label=_('Verify SSL'),
+        help_text=_('By default, we verify SSL certificates '
+                    'when making requests to your Jira instance.'),
+        widget=forms.CheckboxInput(),
+        required=False,
+        initial=True
+    )
+    client_id = forms.CharField(
+        label=_('Jira Consumer Key'),
+        widget=forms.TextInput(
+            attrs={'placeholder': _(
+                'sentry-consumer-key')}
+        )
+    )
+    private_key = forms.CharField(
+        label=_('Jira Consumer Private Key'),
+        widget=forms.Textarea(
+            attrs={'placeholder': _('--PRIVATE KEY--')}
+        )
+    )
+
+    def clean_url(self):
+        """Strip off trailing / as they cause invalid URLs downstream"""
+        return self.cleaned_data['url'].rstrip('/')
+
+
+class InstallationGuideView(PipelineView):
+    """
+    Display a setup guide for creating an OAuth client in Jira
+    """
+
+    def dispatch(self, request, pipeline):
+        if 'completed_guide' in request.GET:
+            return pipeline.next_step()
+        return render_to_response(
+            template='sentry/integrations/jira-server-config.html',
+            request=request,
+        )
+
+
+class InstallationConfigView(PipelineView):
+    """
+    Collect the OAuth client credentials from the user.
+    """
+
+    def dispatch(self, request, pipeline):
+        if request.method == 'POST':
+            form = InstallationForm(request.POST)
+            if form.is_valid():
+                form_data = form.cleaned_data
+
+                pipeline.bind_state('installation_data', form_data)
+                return pipeline.next_step()
+        else:
+            form = InstallationForm()
+
+        return render_to_response(
+            template='sentry/integrations/jira-server-config.html',
+            context={
+                'form': form,
+            },
+            request=request,
+        )
+
+
 class JiraServerIntegration(JiraIntegration):
     pass
 
@@ -61,19 +140,51 @@ class JiraServerIntegrationProvider(IntegrationProvider):
     key = 'jira_server'
     name = 'Jira Server'
     metadata = metadata
-    integration_cls = JiraIntegration
+    integration_cls = JiraServerIntegration
+
+    needs_default_identity = True
+
+    can_add = True
 
     features = frozenset([
         IntegrationFeatures.ISSUE_BASIC,
         IntegrationFeatures.ISSUE_SYNC
     ])
 
-    can_add = False
+    setup_dialog_config = {
+        'width': 1030,
+        'height': 1000,
+    }
+
+    def _make_identity_pipeline_view(self):
+        """
+        Make the nested identity provider view.
+
+        It is important that this view is not constructed until we reach this step and the
+        ``installation_data`` is available in the pipeline state. This
+        method should be late bound into the pipeline views.
+        """
+        identity_pipeline_config = dict(
+            redirect_url=absolute_uri('/extensions/jira_server/setup/'),
+            **self.pipeline.fetch_state('installation_data')
+        )
+
+        return NestedPipelineView(
+            bind_key='identity',
+            provider_key='jira_server',
+            pipeline_cls=IdentityProviderPipeline,
+            config=identity_pipeline_config,
+        )
 
     def get_pipeline_views(self):
-        return []
+        return [
+            InstallationGuideView(),
+            InstallationConfigView(),
+            # lambda: self._make_identity_pipeline_view()
+        ]
 
     def build_integration(self, state):
+        # TODO complete OAuth
         # TODO(lb): This is wrong. Not currently operational.
         # this should be implemented.
         user = state['identity']['data']
diff --git a/src/sentry/templates/sentry/integrations/jira-server-config.html b/src/sentry/templates/sentry/integrations/jira-server-config.html
new file mode 100644
index 0000000000..851cdf8832
--- /dev/null
+++ b/src/sentry/templates/sentry/integrations/jira-server-config.html
@@ -0,0 +1,66 @@
+{% extends "sentry/bases/modal.html" %}
+{% load crispy_forms_tags %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block css %}
+  <link href="{% asset_url "sentry" "dist/sentry.css" %}" rel="stylesheet"/>
+  <style>
+    ol li {
+      padding:10px 0px;
+    }
+    .code-list {
+      padding: 10px;
+      background-color: #f7f8f9;
+      margin-top: 10px;
+      border-radius: 3px;
+    }
+    .code-list li {
+      font-size: 90%;
+    }
+  </style>
+{% endblock %}
+
+{% block wrapperclass %} narrow auth {% endblock %}
+{% block modal_header_signout %} {% endblock %}
+
+{% block title %} {% trans "Jira-Server Setup" %} | {{ block.super }} {% endblock %}
+
+{% block main %}
+{% if form %}
+<h3>{% trans "Step 2: Connect Sentry with your App" %}</h3>
+  <p>{% trans "Add your Jira Server App credentials to Sentry." %}</p>
+  <form action="" method="post" class="form-stacked">
+    {% csrf_token %}
+    <input type="hidden" name="provider" value="jira_server" />
+
+    {{ form|as_crispy_errors }}
+
+    {% for field in form %}
+    {{ field|as_crispy_field }}
+    {% endfor %}
+
+    <fieldset class="form-actions clearfix">
+      <div class="pull-right">
+        <a class="btn btn-default" href="{% url "sentry-extension-setup" "jira_server" %}">{% trans "Back to instructions" %}</a>
+        <button type="submit" class="btn btn-primary" name="save_mappings" value="url">{% trans "Submit" %}</button>
+      </div>
+    </fieldset>
+  </form>
+{% else %}
+<h3>{% trans "Step 1: Create a Sentry App in Jira Server" %}</h3>
+  <p>{% trans "To configure Jira Server with Sentry, you will need to create a Sentry app in your Jira Server instance." %}</p>
+  <ol>
+    <li>Coming Soon!</li>
+  </ol>
+  <p class="alert alert-block flex">
+    <i class="icon icon-exclamation"></i>
+    {% trans "You must complete the above steps in Jira Server to connect with Sentry." %}
+  </p>
+  <div class="form-actions clearfix">
+    <div class="pull-right">
+        <a class="btn btn-primary" href="{% url "sentry-extension-setup" "jira_server" %}?completed_guide">{% trans "Next" %}</a>
+    </div>
+  </div>
+  {% endif %}
+{% endblock %}
diff --git a/tests/sentry/integrations/jira_server/test_integration.py b/tests/sentry/integrations/jira_server/test_integration.py
index f8872e6249..353f2d4b3e 100644
--- a/tests/sentry/integrations/jira_server/test_integration.py
+++ b/tests/sentry/integrations/jira_server/test_integration.py
@@ -32,3 +32,16 @@ class JiraServerIntegrationTest(IntegrationTestCase):
                 'external_id': '%s:%s' % (state['base_url'], state['identity']['data']['id'])
             }
         }
+
+    def test_setup_guide(self):
+        resp = self.client.get(self.init_path)
+        assert resp.status_code == 200
+        self.assertContains(resp, 'Step 1:')
+        self.assertContains(resp, 'Jira Server')
+        self.assertContains(resp, 'Next</a>')
+
+    def test_config_view(self):
+        resp = self.client.get(self.init_path + '?completed_guide')
+        assert resp.status_code == 200
+        self.assertContains(resp, 'Step 2:')
+        self.assertContains(resp, 'Submit</button>')
