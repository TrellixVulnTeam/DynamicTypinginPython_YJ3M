commit 8e1be38dca5713c6b9869859486376d20939e6e7
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 17 16:29:48 2016 -0800

    Improve event date handling
    
    - Add received datetime
    - Use generated timestamps for project dashboard
    - Add tooltip for generated vs received dates
    
    Refs GH-2702, GH-2577

diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index 04fda9806c..77f88c2977 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -38,7 +38,7 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
         :pparam string organization_slug: the slug of the organization.
         :pparam string project_slug: the slug of the project.
         :qparam string stat: the name of the stat to query (``"received"``,
-                             ``"rejected"``, ``"blacklisted"``)
+                             ``"rejected"``, ``"blacklisted"``, ``generated``)
         :qparam timestamp since: a timestamp to set the start of the query
                                  in seconds since UNIX epoch.
         :qparam timestamp until: a timestamp to set the end of the query
@@ -57,6 +57,8 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
             stat_model = tsdb.models.project_total_rejected
         elif stat == 'blacklisted':
             stat_model = tsdb.models.project_total_blacklisted
+        elif stat == 'generated':
+            stat_model = tsdb.models.project
         else:
             raise ValueError('Invalid stat: %s' % stat)
 
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 385c6bea79..378ff9ef32 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -79,6 +79,7 @@ class EventSerializer(Serializer):
             'tags': tags,
             'platform': obj.platform,
             'dateCreated': obj.datetime,
+            'dateReceived': obj.data.get('received', obj.datetime),
             'timeSpent': obj.time_spent,
             'errors': errors,
         }
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index e0bf33bda1..2711288984 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -247,9 +247,10 @@ class EventManager(object):
         if data.get('platform'):
             data['platform'] = trim(data['platform'], 64)
 
+        current_timestamp = timezone.now()
         timestamp = data.get('timestamp')
         if not timestamp:
-            timestamp = timezone.now()
+            timestamp = current_timestamp
 
         if isinstance(timestamp, datetime):
             # We must convert date to local time so Django doesn't mess it up
@@ -262,6 +263,7 @@ class EventManager(object):
             timestamp = float(timestamp.strftime('%s'))
 
         data['timestamp'] = timestamp
+        data['received'] = current_timestamp
 
         if not data.get('event_id'):
             data['event_id'] = uuid4().hex
diff --git a/src/sentry/static/sentry/app/components/dateTime.jsx b/src/sentry/static/sentry/app/components/dateTime.jsx
index dc81612a77..af63fd20e6 100644
--- a/src/sentry/static/sentry/app/components/dateTime.jsx
+++ b/src/sentry/static/sentry/app/components/dateTime.jsx
@@ -30,7 +30,7 @@ const DateTime = React.createClass({
     }
 
     return (
-      <time>{moment(date).format(format)}</time>
+      <time {...this.props}>{moment(date).format(format)}</time>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
index de039d9935..4e428f5bc4 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
@@ -1,8 +1,12 @@
 import {Link} from 'react-router';
+import moment from 'moment';
 import React from 'react';
+
+import ConfigStore from '../../stores/configStore';
 import PropTypes from '../../proptypes';
 import DateTime from '../../components/dateTime';
 import FileSize from '../../components/fileSize';
+import TooltipMixin from '../../mixins/tooltip';
 import {t} from '../../locale';
 
 let GroupEventToolbar  = React.createClass({
@@ -13,6 +17,35 @@ let GroupEventToolbar  = React.createClass({
     event: PropTypes.Event.isRequired,
   },
 
+  mixins: [
+    TooltipMixin({
+      html: true,
+      selector: '.tip'
+    }),
+  ],
+
+  getDateTooltip() {
+    let evt = this.props.event;
+    let user = ConfigStore.get('user');
+    let options = user ? user.options : {};
+    let format = (
+      options.clock24Hours ? 'HH:mm:ss z' : 'LTS z'
+    );
+    let dateCreated = moment(evt.dateCreated);
+    let dateReceived = moment(evt.dateReceived);
+
+    return (
+      '<dl class="flat" style="text-align:left;margin:0;min-width:200px">' +
+        '<dt>Generated</dt>' +
+        '<dd>' + dateCreated.format('ll') + '<br />' +
+          dateCreated.format(format) + '</dd>' +
+        '<dt>Received</dt>' +
+        '<dd>' + dateReceived.format('ll') + '<br />' +
+          dateReceived.format(format) + '</dd>' +
+      '</dl>'
+    );
+  },
+
   render() {
     let evt = this.props.event;
 
@@ -77,7 +110,8 @@ let GroupEventToolbar  = React.createClass({
         </div>
         <h4>{t('Event %s', evt.eventID)}</h4>
         <span>
-          <DateTime date={evt.dateCreated} />
+          <DateTime date={evt.dateCreated} className="tip" data-title={this.getDateTooltip()}
+                    style={{borderBottom: '1px dotted #ddd'}} />
           <a href={jsonUrl} target="_blank" className="json-link">{'JSON'} &#40;<FileSize bytes={evt.size} />&#41;</a>
         </span>
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
index 47eb459d4e..08875a5a08 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -35,7 +35,7 @@ const ProjectChart = React.createClass({
   getStatsEndpoint() {
     let org = this.getOrganization();
     let project = this.getProject();
-    return '/projects/' + org.slug + '/' + project.slug + '/stats/?resolution=' + this.props.resolution;
+    return '/projects/' + org.slug + '/' + project.slug + '/stats/';
   },
 
   getProjectReleasesEndpoint() {
@@ -47,7 +47,9 @@ const ProjectChart = React.createClass({
   fetchData() {
     this.api.request(this.getStatsEndpoint(), {
       query: {
-        since: this.props.dateSince
+        since: this.props.dateSince,
+        resolution: this.props.resolution,
+        stat: 'generated',
       },
       success: (data) => {
         this.setState({
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index a7ba23f965..5c1c9b18c9 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1212,19 +1212,6 @@ ol.context-line {
   }
 }
 
-dl.flat {
-  margin-bottom: 1em;
-}
-dl.flat dt {
-  float: left;
-  clear: left;
-  width: 70px;
-  padding-bottom: 5px;
-}
-dl.flat dd {
-  padding-bottom: 5px;
-}
-
 #full-message {
   line-height: 1.5em;
 
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index e67727064c..a6a49ff19d 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -1,6 +1,19 @@
 @import url('components/broadcasts.less');
 @import url('components/statuspage.less');
 
+dl.flat {
+  margin-bottom: 1em;
+}
+dl.flat dt {
+  float: left;
+  clear: left;
+  width: 70px;
+  padding-bottom: 5px;
+}
+dl.flat dd {
+  padding-bottom: 5px;
+}
+
 /**
 * Buttons
 * ============================================================================
