commit e896734ff41f3234b58404184b7f59f221b20e31
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri Jan 31 15:30:16 2020 -0800

    feat(plugins): adds endpoint to return list of plugins with projectList (#16654)

diff --git a/conftest.py b/conftest.py
index 6289e081ce..f20ad9a0df 100644
--- a/conftest.py
+++ b/conftest.py
@@ -18,11 +18,8 @@ def pytest_configure(config):
     # being used
     warnings.filterwarnings("error", "", Warning, r"^(?!(|kombu|raven|sentry))")
 
-    # if we are running any tests for plugins, we need to make sure we install them first
-    # (for `py.test --version` or `py.test --help`, there are no files to test)
-    test_targets = config.getoption("file_or_dir")
-    if test_targets and any("tests/sentry_plugins" in s for s in test_targets):
-        install_sentry_plugins()
+    # always install plugins for the tests
+    install_sentry_plugins()
 
 
 def install_sentry_plugins():
diff --git a/src/sentry/api/endpoints/organization_plugins_configs.py b/src/sentry/api/endpoints/organization_plugins_configs.py
new file mode 100644
index 0000000000..aeac723de6
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_plugins_configs.py
@@ -0,0 +1,112 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+import six
+
+from sentry.plugins.base import plugins
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.plugin import PluginSerializer
+from sentry.models import ProjectOption, Project
+
+
+class OrganizationPluginsConfigsEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+
+        """
+        List one or more plugin configurations, including a `projectList` for each plugin which contains
+        all the projects that have that specific plugin both configured and enabled.
+
+        - similar to the `OrganizationPluginsEndpoint`, and can eventually replace it
+
+        :qparam plugins array[string]: an optional list of plugin ids (slugs) if you want specific plugins.
+                                    If not set, will return configurations for all plugins.
+        """
+
+        desired_plugins = []
+        for slug in request.GET.getlist("plugins") or ():
+            # if the user request a plugin that doesn't exist, throw 404
+            try:
+                desired_plugins.append(plugins.get(slug))
+            except KeyError:
+                return Response({"detail": "Plugin %s not found" % slug}, status=404)
+
+        # if no plugins were specified, grab all plugins but limit by those that have the ability to be configured
+        if not desired_plugins:
+            desired_plugins = list(plugins.plugin_that_can_be_configured())
+
+        # `keys_to_check` are the ProjectOption keys that tell us if a plugin is enabled (e.g. `plugin:enabled`) or are
+        # configured properly, meaning they have the required information - plugin.required_field - needed for the
+        # plugin to work (ex:`opsgenie:api_key`)
+        keys_to_check = []
+        for plugin in desired_plugins:
+            keys_to_check.append("%s:enabled" % plugin.slug)
+            if plugin.required_field:
+                keys_to_check.append("%s:%s" % (plugin.slug, plugin.required_field))
+
+        # Get all the project options for org that have truthy values
+        project_options = ProjectOption.objects.filter(
+            key__in=keys_to_check, project__organization=organization
+        ).exclude(value__in=[False, ""])
+
+        """
+        This map stores info about whether a plugin is configured and/or enabled
+        {
+            "plugin_slug": {
+                "project_id": { "enabled": True, "configured": False },
+            },
+        }
+        """
+        info_by_plugin_project = {}
+        for project_option in project_options:
+            [slug, field] = project_option.key.split(":")
+            project_id = project_option.project_id
+
+            # first add to the set of all projects by plugin
+            info_by_plugin_project.setdefault(slug, {}).setdefault(
+                project_id, {"enabled": False, "configured": False}
+            )
+
+            # next check if enabled
+            if field == "enabled":
+                info_by_plugin_project[slug][project_id]["enabled"] = True
+            # if the projectoption is not the enable field, it's configuration field
+            else:
+                info_by_plugin_project[slug][project_id]["configured"] = True
+
+        # get the IDs of all projects for found project options and grab them from the DB
+        project_id_set = set([project_option.project_id for project_option in project_options])
+        projects = Project.objects.filter(id__in=project_id_set)
+
+        # create a key/value map of our projects
+        project_map = {project.id: project for project in projects}
+
+        # iterate through the desired plugins and serialize them
+        serialized_plugins = []
+        for plugin in desired_plugins:
+            serialized_plugin = serialize(plugin, request.user, PluginSerializer())
+
+            serialized_plugin["projectList"] = []
+
+            info_by_project = info_by_plugin_project.get(plugin.slug, {})
+
+            # iterate through the projects
+            for project_id, plugin_info in six.iteritems(info_by_project):
+                project = project_map[project_id]
+
+                # only include plugins which are configured
+                if not plugin_info["configured"]:
+                    continue
+
+                serialized_plugin["projectList"].append(
+                    {
+                        "projectId": project.id,
+                        "projectSlug": project.slug,
+                        "projectName": project.name,  # TODO(steve): do we need?
+                        "enabled": plugin_info["enabled"],
+                        "configured": plugin_info["configured"],  # TODO(steve): do we need?
+                    }
+                )
+            serialized_plugins.append(serialized_plugin)
+
+        return Response(serialized_plugins)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index a8c35040f3..bdcafcd720 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -134,6 +134,7 @@ from .endpoints.organization_monitors import OrganizationMonitorsEndpoint
 from .endpoints.organization_onboarding_tasks import OrganizationOnboardingTaskEndpoint
 from .endpoints.organization_pinned_searches import OrganizationPinnedSearchEndpoint
 from .endpoints.organization_plugins import OrganizationPluginsEndpoint
+from .endpoints.organization_plugins_configs import OrganizationPluginsConfigsEndpoint
 from .endpoints.organization_processingissues import OrganizationProcessingIssuesEndpoint
 from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_recent_searches import OrganizationRecentSearchesEndpoint
@@ -908,6 +909,11 @@ urlpatterns = [
                     OrganizationPluginsEndpoint.as_view(),
                     name="sentry-api-0-organization-plugins",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/plugins/configs/$",
+                    OrganizationPluginsConfigsEndpoint.as_view(),
+                    name="sentry-api-0-organization-plugins-configs",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/releases/$",
                     OrganizationReleasesEndpoint.as_view(),
diff --git a/src/sentry/plugins/base/manager.py b/src/sentry/plugins/base/manager.py
index 22be227795..3349feab3e 100644
--- a/src/sentry/plugins/base/manager.py
+++ b/src/sentry/plugins/base/manager.py
@@ -23,6 +23,11 @@ class PluginManager(InstanceManager):
                 continue
             yield plugin
 
+    def plugin_that_can_be_configured(self):
+        for plugin in self.all():
+            if plugin.has_project_conf():
+                yield plugin
+
     def configurable_for_project(self, project, version=1):
         for plugin in self.all(version=version):
             if not safe_execute(plugin.can_configure_for_project, project, _with_transaction=False):
diff --git a/tests/sentry/api/endpoints/test_organization_config_repositories.py b/tests/sentry/api/endpoints/test_organization_config_repositories.py
index 7bd3bbdcfc..24f0e494f0 100644
--- a/tests/sentry/api/endpoints/test_organization_config_repositories.py
+++ b/tests/sentry/api/endpoints/test_organization_config_repositories.py
@@ -15,8 +15,6 @@ class OrganizationConfigRepositoriesTest(APITestCase):
         response = self.client.get(url, format="json")
 
         assert response.status_code == 200, response.content
-        assert len(response.data["providers"]) == 1
-        provider = response.data["providers"][0]
-        assert provider["id"] == "dummy"
+        provider = filter(lambda x: x["id"] == "dummy", response.data["providers"])[0]
         assert provider["name"] == "Example"
         assert provider["config"]
diff --git a/tests/sentry/api/endpoints/test_organization_plugins_configs.py b/tests/sentry/api/endpoints/test_organization_plugins_configs.py
new file mode 100644
index 0000000000..8662df971f
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_plugins_configs.py
@@ -0,0 +1,94 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from sentry.plugins.base import plugins
+from sentry.testutils import APITestCase
+
+
+class OrganizationPluginsTest(APITestCase):
+    def setUp(self):
+        self.projectA = self.create_project()
+        self.organization = self.projectA.organization
+        self.projectB = self.create_project(organization=self.organization)
+
+        self.url = reverse(
+            "sentry-api-0-organization-plugins-configs",
+            kwargs={"organization_slug": self.organization.slug},
+        )
+
+        self.login_as(user=self.user)
+
+    def test_no_configs(self):
+        response = self.client.get(self.url)
+        assert response.status_code == 200, (response.status_code, response.content)
+        # the number of plugins might change so let's just make sure we have most of them
+        assert len(response.data) > 18
+
+    def test_only_configuable_plugins(self):
+        response = self.client.get(self.url)
+        assert filter(lambda x: not x["hasConfiguration"], response.data) == []
+
+    def test_enabled_not_configured(self):
+        plugins.get("webhooks").enable(self.projectA)
+        response = self.client.get(self.url)
+        assert filter(lambda x: x["slug"] == "webhooks", response.data)[0]["projectList"] == []
+
+    def test_configured_not_enabled(self):
+        plugins.get("trello").disable(self.projectA)
+        plugins.get("trello").set_option("key", "some_value", self.projectA)
+        response = self.client.get(self.url)
+        assert filter(lambda x: x["slug"] == "trello", response.data)[0]["projectList"] == [
+            {
+                "projectId": self.projectA.id,
+                "projectSlug": self.projectA.slug,
+                "projectName": self.projectA.name,
+                "enabled": False,
+                "configured": True,
+            }
+        ]
+
+    def test_configured_and_enabled(self):
+        plugins.get("trello").enable(self.projectA)
+        plugins.get("trello").set_option("key", "some_value", self.projectA)
+        response = self.client.get(self.url)
+        assert filter(lambda x: x["slug"] == "trello", response.data)[0]["projectList"] == [
+            {
+                "projectId": self.projectA.id,
+                "projectSlug": self.projectA.slug,
+                "projectName": self.projectA.name,
+                "enabled": True,
+                "configured": True,
+            }
+        ]
+
+    def test_configured_multiple_projects(self):
+        plugins.get("trello").set_option("key", "some_value", self.projectA)
+        plugins.get("trello").set_option("key", "another_value", self.projectB)
+        response = self.client.get(self.url)
+        projectList = filter(lambda x: x["slug"] == "trello", response.data)[0]["projectList"]
+        assert filter(lambda x: x["projectId"] == self.projectA.id, projectList)[0] == {
+            "projectId": self.projectA.id,
+            "projectSlug": self.projectA.slug,
+            "projectName": self.projectA.name,
+            "enabled": False,
+            "configured": True,
+        }
+        assert filter(lambda x: x["projectId"] == self.projectB.id, projectList)[0] == {
+            "projectId": self.projectB.id,
+            "projectSlug": self.projectB.slug,
+            "projectName": self.projectB.name,
+            "enabled": False,
+            "configured": True,
+        }
+
+    def test_query_parameter(self):
+        url = self.url + "?plugins=trello"
+        response = self.client.get(url)
+        assert len(response.data) == 1
+        assert response.data[0]["id"] == "trello"
+
+    def test_query_parameter_bad_slug(self):
+        url = self.url + "?plugins=bad_plugin"
+        response = self.client.get(url)
+        assert response.status_code == 404
+        assert response.data["detail"] == "Plugin bad_plugin not found"
diff --git a/tests/sentry/api/endpoints/test_project_plugins.py b/tests/sentry/api/endpoints/test_project_plugins.py
index 5ee7b5300b..9b8733af34 100644
--- a/tests/sentry/api/endpoints/test_project_plugins.py
+++ b/tests/sentry/api/endpoints/test_project_plugins.py
@@ -27,7 +27,7 @@ class ProjectPluginsTest(APITestCase):
         assert response.status_code == 200, (response.status_code, response.content)
         assert len(response.data) >= 9
 
-        auto_tag = response.data[0]
+        auto_tag = filter(lambda p: p["slug"] == "browsers", response.data)[0]
         assert auto_tag["name"] == "Auto Tag: Browsers"
         assert auto_tag["enabled"] is True
         assert auto_tag["isHidden"] is False
