commit 291820a140bfad008bbd5f538b3e0ae1cdb43723
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 26 18:39:40 2011 -0800

    Change how we allow authentication under certain circumstances

diff --git a/sentry/web/api.py b/sentry/web/api.py
index 46803a3a07..6358dd7cbb 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -10,7 +10,6 @@ import base64
 import datetime
 import logging
 import time
-import warnings
 import zlib
 
 from django.http import HttpResponse, HttpResponseBadRequest, \
@@ -41,6 +40,8 @@ def store(request):
     else:
         auth_vars = None
 
+    data = request.raw_post_data
+
     if auth_vars:
         signature = auth_vars.get('sentry_signature')
         timestamp = auth_vars.get('sentry_timestamp')
@@ -60,10 +61,6 @@ def store(request):
             project = None
             secret_key = settings.KEY
 
-        format = 'json'
-
-        data = request.raw_post_data
-
         # Signed data packet
         if signature and timestamp:
             try:
@@ -78,24 +75,55 @@ def store(request):
             if sig_hmac != signature:
                 return HttpResponseForbidden('Invalid signature')
         else:
-            return HttpResponse('Unauthorized', status_code=401)
+            return HttpResponse('Unauthorized', status=401)
+
+    # SSL requests dont need a signature
+    elif request.GET.get('api_key') and request.GET.get('project_id'):
+        if not request.is_secure():
+            return HttpResponse('Unauthorized', status=401)
+
+        api_key = request.GET['api_key']
+        project = request.GET['project_id']
 
-    try:
         try:
-            data = base64.b64decode(data).decode('zlib')
-        except zlib.error:
-            data = base64.b64decode(data)
-    except Exception, e:
-        # This error should be caught as it suggests that there's a
-        # bug somewhere in the client's code.
-        logger.exception('Bad data received')
-        return HttpResponseForbidden('Bad data decoding request (%s, %s)' % (e.__class__.__name__, e))
+            pm = ProjectMember.objects.get(api_key=api_key, project=project)
+            if not pm.has_perm('add_message'):
+                raise ProjectMember.DoesNotExist
+        except ProjectMember.DoesNotExist:
+            return HttpResponse('Unauthorized', status=401)
+
+        project = pm.project
+
+    # Support client side requests from our server from the authenticated user
+    elif request.GET.get('project_id') and request.user.is_authenticated():
+        try:
+            pm = ProjectMember.objects.get(user=request.user, project=request.GET['project_id'])
+            # TODO: do we need this check?
+            # if not pm.has_perm('add_message'):
+            #     raise ProjectMember.DoesNotExist
+        except ProjectMember.DoesNotExist:
+            return HttpResponse('Unauthorized', status=401)
+
+        project = pm.project
+
+    else:
+        return HttpResponse('Unauthorized', status=401)
+
+    if not data.startswith('{'):
+        print "Decoding"
+        try:
+            try:
+                data = base64.b64decode(data).decode('zlib')
+            except zlib.error:
+                data = base64.b64decode(data)
+        except Exception, e:
+            # This error should be caught as it suggests that there's a
+            # bug somewhere in the client's code.
+            logger.exception('Bad data received')
+            return HttpResponseForbidden('Bad data decoding request (%s, %s)' % (e.__class__.__name__, e))
 
     try:
-        if format == 'pickle':
-            data = pickle.loads(data)
-        elif format == 'json':
-            data = json.loads(data)
+        data = json.loads(data)
     except Exception, e:
         # This error should be caught as it suggests that there's a
         # bug somewhere in the client's code.
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index d27758c8f6..3cbcc23870 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -6,6 +6,8 @@ sentry.web.views
 :license: BSD, see LICENSE for more details.
 """
 
+import logging
+
 from django.conf import settings as dj_settings
 from django.core.urlresolvers import reverse, resolve
 from django.http import HttpResponse
@@ -14,6 +16,8 @@ from django.template import loader
 from sentry.conf import settings
 from sentry.models import ProjectMember, Project
 
+logger = logging.getLogger('sentry.errors')
+
 
 def get_project_list(user=None, flag=None, hidden=False):
     """
@@ -70,10 +74,13 @@ def iter_data(obj):
 def render_to_string(template, context=None, request=None):
     if context is None:
         context = {}
+
     context.update({
         'has_search': False,
         'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
+        'PROJECT_ID': settings.PROJECT,
     })
+
     if request:
         context['request'] = request
         if 'project_list' not in context:
