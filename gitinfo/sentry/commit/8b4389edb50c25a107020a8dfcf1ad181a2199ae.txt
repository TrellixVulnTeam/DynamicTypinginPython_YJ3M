commit 8b4389edb50c25a107020a8dfcf1ad181a2199ae
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jan 13 21:35:27 2013 -0800

    Trim the number of frames shown in Stacktrace.to_string

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index db41292e6d..f78c0b6770 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -369,9 +369,9 @@ class Stacktrace(Interface):
         })
 
     def to_string(self, event):
-        return self.get_stacktrace(event, system_frames=False)
+        return self.get_stacktrace(event, system_frames=False, max_frames=5)
 
-    def get_stacktrace(self, event, system_frames=True, newest_first=None):
+    def get_stacktrace(self, event, system_frames=True, newest_first=None, max_frames=None):
         if newest_first is None:
             newest_first = self.is_newest_frame_first(event)
 
@@ -384,15 +384,23 @@ class Stacktrace(Interface):
         result.append('')
 
         frames = self.frames
+
+        num_frames = len(frames)
+
         if not system_frames:
-            frames = [f for f in frames if f.get('in_app')]
+            frames = [f for f in frames if f.get('in_app') is not False]
             if not frames:
                 frames = self.frames
 
         if newest_first:
             frames = frames[::-1]
 
-        for frame in frames:
+        if max_frames:
+            visible_frames = max_frames
+        else:
+            visible_frames = len(frames)
+
+        for frame in frames[:max_frames]:
             pieces = ['  File "%(filename)s"']
             if 'lineno' in frame:
                 pieces.append(', line %(lineno)s')
@@ -403,6 +411,9 @@ class Stacktrace(Interface):
             if 'context_line' in frame:
                 result.append('    %s' % frame['context_line'].strip())
 
+        if visible_frames < num_frames:
+            result.extend('(%d additional frame(s) were not displayed)' % (num_frames - visible_frames,))
+
         return '\n'.join(result)
 
     def get_traceback(self, event, newest_first=None):
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index c9779969ae..0643b9f407 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -85,7 +85,7 @@ class StacktraceTest(TestCase):
         event = mock.Mock(spec=Event())
         interface = Stacktrace(frames=[])
         result = interface.to_string(event)
-        get_stacktrace.assert_called_once_with(event, system_frames=False)
+        get_stacktrace.assert_called_once_with(event, system_frames=False, max_frames=5)
         self.assertEquals(result, get_stacktrace.return_value)
 
     @mock.patch('sentry.interfaces.Stacktrace.get_stacktrace')
diff --git a/tests/sentry/interfaces/tests.py b/tests/sentry/interfaces/tests.py
index 0d275eaec8..481c91826b 100644
--- a/tests/sentry/interfaces/tests.py
+++ b/tests/sentry/interfaces/tests.py
@@ -139,4 +139,4 @@ class StacktraceTest(InterfaceBase):
     @mock.patch('sentry.interfaces.Stacktrace.get_stacktrace')
     def test_to_string_returns_stacktrace(self, get_stacktrace):
         assert self.interface.to_string(self.event) == get_stacktrace.return_value
-        get_stacktrace.assert_called_once_with(self.event, system_frames=False)
+        get_stacktrace.assert_called_once_with(self.event, system_frames=False, max_frames=5)
