commit 8cfd73ee2375cc280b4f1d56736d2b3ff2a020ce
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Sep 24 22:34:07 2010 -0700

    Added INCLUDE_PATHS and cleaned up logic for discovering views

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 025ee9afb6..ff7512cd75 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -131,12 +131,21 @@ class SentryClient(object):
         frames = varmap(shorten, reporter.get_traceback_frames())
 
         if not kwargs.get('view'):
+            # This should be cached
             modules = get_installed_apps()
+            if settings.INCLUDE_PATHS:
+                modules = set(list(modules) + settings.INCLUDE_PATHS)
 
             def iter_tb_frames(tb):
                 while tb:
                     yield tb.tb_frame
                     tb = tb.tb_next
+            
+            def contains(iterator, value):
+                for k in iterator:
+                    if value.startswith(k):
+                        return True
+                return False
                 
             # We iterate through each frame looking for an app in INSTALLED_APPS
             # When one is found, we mark it as last "best guess" (best_guess) and then
@@ -145,12 +154,8 @@ class SentryClient(object):
             best_guess = None
             for frame in iter_tb_frames(exc_traceback):
                 view = '.'.join([frame.f_globals['__name__'], frame.f_code.co_name])
-                if frame.f_globals['__name__'].rsplit('.', 1)[0] in modules:
-                    save = True
-                    for m in settings.EXCLUDE_PATHS:
-                        if view.startswith(m):
-                            save = False
-                    if save or not best_guess:
+                if contains(modules, view):
+                    if not (contains(settings.EXCLUDE_PATHS, view) and best_guess):
                         best_guess = view
                 elif best_guess:
                     break
diff --git a/sentry/settings.py b/sentry/settings.py
index cdbae54916..c1c7ec70cb 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -66,4 +66,8 @@ SITE = getattr(settings, 'SENTRY_SITE', None)
 
 # Extending this allow you to ignore module prefixes when we attempt to
 # discover which function an error comes from (typically a view)
-EXCLUDE_PATHS = getattr(settings, 'SENTRY_EXCLUDE_PATHS', [])
\ No newline at end of file
+EXCLUDE_PATHS = getattr(settings, 'SENTRY_EXCLUDE_PATHS', [])
+
+# By default Sentry only looks at modules in INSTALLED_APPS for drilling down
+# where an exception is located
+INCLUDE_PATHS = getattr(settings, 'SENTRY_INCLUDE_PATHS', [])
\ No newline at end of file
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 909233e05b..ca2af70ff2 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -546,6 +546,17 @@ class SentryTestCase(TestCase):
 
         self.assertEquals(GroupedMessage.objects.count(), 1)
 
+    def testIncludeModules(self):
+        settings.INCLUDE_PATHS = ['django.shortcuts.get_object_or_404']
+        
+        self.assertRaises(Exception, self.client.get, reverse('sentry-django-exc'))
+        
+        last = Message.objects.get()
+        
+        self.assertEquals(last.view, 'django.shortcuts.get_object_or_404')
+        
+        settings.INCLUDE_PATHS = []
+
 class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     fixtures = ['sentry/tests/fixtures/views.json']
diff --git a/sentry/tests/urls.py b/sentry/tests/urls.py
index ddba2ff4f1..94b30f8f6c 100644
--- a/sentry/tests/urls.py
+++ b/sentry/tests/urls.py
@@ -7,5 +7,6 @@ urlpatterns = patterns('',
     url(r'^admin/', include(admin.site.urls)),
     url(r'^trigger-500$', 'sentry.tests.views.raise_exc', name='sentry-raise-exc'),
     url(r'^trigger-500-decorated$', 'sentry.tests.views.decorated_raise_exc', name='sentry-raise-exc-decor'),
+    url(r'^trigger-500-django$', 'sentry.tests.views.django_exc', name='sentry-django-exc'),
     url(r'', include('sentry.urls')),
 )
\ No newline at end of file
diff --git a/sentry/tests/views.py b/sentry/tests/views.py
index ae5c01ed0b..69842f584f 100644
--- a/sentry/tests/views.py
+++ b/sentry/tests/views.py
@@ -1,3 +1,8 @@
+from django.shortcuts import get_object_or_404
+
+def django_exc(request):
+    return get_object_or_404(Exception, pk=1)
+
 def raise_exc(request):
     raise Exception(request.GET.get('message', 'view exception'))
 
