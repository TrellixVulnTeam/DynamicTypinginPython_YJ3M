commit b9914465d1c92d71f1a5baa543a98e58e214e021
Author: Ben Vinegar <benvinegar@users.noreply.github.com>
Date:   Tue Jun 14 11:21:21 2016 -0700

    Don't output invalid src location errors if no source (#3480)
    
    /cc @getsentry/infrastructure

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index edd1473f00..68870684cc 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -696,7 +696,7 @@ class SourceProcessor(object):
             frame.pre_context, frame.context_line, frame.post_context = get_source_context(
                 source=source, lineno=frame.lineno, colno=frame.colno or 0)
 
-            if not frame.context_line:
+            if not frame.context_line and source:
                 all_errors.append({
                     'type': EventError.JS_INVALID_SOURCEMAP_LOCATION,
                     'column': frame.colno,
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 47c4493d01..000e496e40 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -386,6 +386,59 @@ class JavascriptIntegrationTest(TestCase):
         assert frame.context_line == '\treturn a + b;'
         assert frame.post_context == ['}']
 
+    @responses.activate
+    def test_sourcemap_expansion_with_missing_source(self):
+        """
+        Tests a successful sourcemap expansion that points to source files
+        that are not found.
+        """
+        responses.add(responses.GET, 'http://example.com/file.min.js',
+                      body=load_fixture('file.min.js'))
+        responses.add(responses.GET, 'http://example.com/file.sourcemap.js',
+                      body=load_fixture('file.sourcemap.js'))
+        responses.add(responses.GET, 'http://example.com/file1.js',
+                      body='Not Found', status=404)
+
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'Error',
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'abs_path': 'http://example.com/file.min.js',
+                                'filename': 'file.min.js',
+                                'lineno': 1,
+                                'colno': 39,
+                            },
+                        ],
+                    },
+                }],
+            }
+        }
+
+        resp = self._postWithHeader(data)
+        assert resp.status_code, 200
+
+        event = Event.objects.get()
+        assert event.data['errors'] == [{'url': u'http://example.com/file1.js', 'type': 'js_invalid_http_code', 'value': 404}]
+
+        exception = event.interfaces['sentry.interfaces.Exception']
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+
+        # no context information ...
+        assert frame.pre_context is None
+        assert frame.context_line is None
+        assert frame.post_context is None
+
+        # ... but line, column numbers are still correctly mapped
+        assert frame.lineno == 3
+        assert frame.colno == 8
+
     @responses.activate
     def test_failed_sourcemap_expansion(self):
         """
