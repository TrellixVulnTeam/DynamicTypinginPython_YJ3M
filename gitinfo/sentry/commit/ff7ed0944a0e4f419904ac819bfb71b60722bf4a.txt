commit ff7ed0944a0e4f419904ac819bfb71b60722bf4a
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu May 14 09:51:49 2020 -0700

    refs(alert_rules): Stop using `AlertRule.query_subscriptions` relationship (#18781)
    
    We now fetch these rows via the `snuba_query`. We also add in a migratio to remove constraints from
    several through tables that we'll be removing soon.
    
    Depends on https://github.com/getsentry/sentry/pull/18780

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index ba6723b670..41f15e5a8c 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0075_metric_alerts_fix_releases
+sentry: 0076_alert_rules_disable_constraints
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/api/serializers/models/alert_rule.py b/src/sentry/api/serializers/models/alert_rule.py
index 7d5eebe9e0..e850d8cede 100644
--- a/src/sentry/api/serializers/models/alert_rule.py
+++ b/src/sentry/api/serializers/models/alert_rule.py
@@ -62,7 +62,7 @@ class DetailedAlertRuleSerializer(AlertRuleSerializer):
         result = super(DetailedAlertRuleSerializer, self).get_attrs(item_list, user, **kwargs)
         alert_rule_projects = AlertRule.objects.filter(
             id__in=[item.id for item in item_list]
-        ).values_list("id", "query_subscriptions__project__slug")
+        ).values_list("id", "snuba_query__subscriptions__project__slug")
         alert_rules = {item.id: item for item in item_list}
         for alert_rule_id, project_slug in alert_rule_projects:
             rule_result = result[alert_rules[alert_rule_id]].setdefault("projects", [])
diff --git a/src/sentry/incidents/endpoints/bases.py b/src/sentry/incidents/endpoints/bases.py
index 0d8327e5f8..7cd8a008a7 100644
--- a/src/sentry/incidents/endpoints/bases.py
+++ b/src/sentry/incidents/endpoints/bases.py
@@ -22,7 +22,7 @@ class ProjectAlertRuleEndpoint(ProjectEndpoint):
 
         try:
             kwargs["alert_rule"] = AlertRule.objects.get(
-                query_subscriptions__project=project, id=alert_rule_id
+                snuba_query__subscriptions__project=project, id=alert_rule_id
             )
         except AlertRule.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index ad3b0146ed..628d66d615 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -16,7 +16,6 @@ from sentry.incidents.models import (
     AlertRule,
     AlertRuleEnvironment,
     AlertRuleExcludedProjects,
-    AlertRuleQuerySubscription,
     AlertRuleStatus,
     AlertRuleTrigger,
     AlertRuleTriggerAction,
@@ -745,7 +744,7 @@ def update_alert_rule(
             or include_all_projects is not None
             or excluded_projects is not None
         ):
-            existing_subs = alert_rule.query_subscriptions.all().select_related("project")
+            existing_subs = alert_rule.snuba_query.subscriptions.all().select_related("project")
 
         new_projects = []
         deleted_subs = []
@@ -818,15 +817,9 @@ def subscribe_projects_to_alert_rule(alert_rule, projects):
     Subscribes a list of projects to an alert rule
     :return: The list of created subscriptions
     """
-    subscriptions = bulk_create_snuba_subscriptions(
+    return bulk_create_snuba_subscriptions(
         projects, tasks.INCIDENTS_SNUBA_SUBSCRIPTION_TYPE, alert_rule.snuba_query
     )
-    subscription_links = [
-        AlertRuleQuerySubscription(query_subscription=subscription, alert_rule=alert_rule)
-        for subscription in subscriptions
-    ]
-    AlertRuleQuerySubscription.objects.bulk_create(subscription_links)
-    return subscriptions
 
 
 def delete_alert_rule(alert_rule):
@@ -839,7 +832,7 @@ def delete_alert_rule(alert_rule):
 
     with transaction.atomic():
         incidents = Incident.objects.filter(alert_rule=alert_rule)
-        bulk_delete_snuba_subscriptions(list(alert_rule.query_subscriptions.all()))
+        bulk_delete_snuba_subscriptions(list(alert_rule.snuba_query.subscriptions.all()))
         if incidents:
             alert_rule.update(status=AlertRuleStatus.SNAPSHOT.value)
         else:
@@ -1007,7 +1000,7 @@ def get_subscriptions_from_alert_rule(alert_rule, projects):
     :param projects: The Project we want subscriptions for
     :return: A list of QuerySubscriptions
     """
-    excluded_subscriptions = alert_rule.query_subscriptions.filter(project__in=projects)
+    excluded_subscriptions = alert_rule.snuba_query.subscriptions.filter(project__in=projects)
     if len(excluded_subscriptions) != len(projects):
         invalid_slugs = set([p.slug for p in projects]) - set(
             [s.project.slug for s in excluded_subscriptions]
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index 8c153ce854..23cb3ed8e4 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -318,7 +318,7 @@ class AlertRuleManager(BaseManager):
         return self.filter(organization=organization)
 
     def fetch_for_project(self, project):
-        return self.filter(query_subscriptions__project=project)
+        return self.filter(snuba_query__subscriptions__project=project)
 
     @classmethod
     def __build_subscription_cache_key(self, subscription_id):
@@ -332,7 +332,7 @@ class AlertRuleManager(BaseManager):
         cache_key = self.__build_subscription_cache_key(subscription.id)
         alert_rule = cache.get(cache_key)
         if alert_rule is None:
-            alert_rule = AlertRule.objects.get(query_subscriptions=subscription)
+            alert_rule = AlertRule.objects.get(snuba_query__subscriptions=subscription)
             cache.set(cache_key, alert_rule, 3600)
 
         return alert_rule
@@ -343,9 +343,9 @@ class AlertRuleManager(BaseManager):
 
     @classmethod
     def clear_alert_rule_subscription_caches(cls, instance, **kwargs):
-        subscription_ids = AlertRuleQuerySubscription.objects.filter(
-            alert_rule=instance
-        ).values_list("query_subscription_id", flat=True)
+        subscription_ids = QuerySubscription.objects.filter(
+            snuba_query=instance.snuba_query
+        ).values_list("id", flat=True)
         if subscription_ids:
             cache.delete_many(
                 cls.__build_subscription_cache_key(sub_id) for sub_id in subscription_ids
@@ -355,8 +355,8 @@ class AlertRuleManager(BaseManager):
 class AlertRuleEnvironment(Model):
     __core__ = True
 
-    environment = FlexibleForeignKey("sentry.Environment")
-    alert_rule = FlexibleForeignKey("sentry.AlertRule")
+    environment = FlexibleForeignKey("sentry.Environment", db_constraint=False)
+    alert_rule = FlexibleForeignKey("sentry.AlertRule", db_constraint=False)
 
     class Meta:
         app_label = "sentry"
@@ -367,8 +367,10 @@ class AlertRuleEnvironment(Model):
 class AlertRuleQuerySubscription(Model):
     __core__ = True
 
-    query_subscription = FlexibleForeignKey("sentry.QuerySubscription", unique=True)
-    alert_rule = FlexibleForeignKey("sentry.AlertRule")
+    query_subscription = FlexibleForeignKey(
+        "sentry.QuerySubscription", db_constraint=False, unique=True
+    )
+    alert_rule = FlexibleForeignKey("sentry.AlertRule", db_constraint=False)
 
     class Meta:
         app_label = "sentry"
diff --git a/src/sentry/migrations/0076_alert_rules_disable_constraints.py b/src/sentry/migrations/0076_alert_rules_disable_constraints.py
new file mode 100644
index 0000000000..61a8804ee9
--- /dev/null
+++ b/src/sentry/migrations/0076_alert_rules_disable_constraints.py
@@ -0,0 +1,64 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-05-13 02:04
+from __future__ import unicode_literals
+
+from django.db import migrations
+import django.db.models.deletion
+import sentry.db.models.fields.foreignkey
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+
+    dependencies = [
+        ('sentry', '0075_metric_alerts_fix_releases'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='alertruleenvironment',
+            name='alert_rule',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule'),
+        ),
+        migrations.AlterField(
+            model_name='alertruleenvironment',
+            name='environment',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment'),
+        ),
+        migrations.AlterField(
+            model_name='alertrulequerysubscription',
+            name='alert_rule',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule'),
+        ),
+        migrations.AlterField(
+            model_name='alertrulequerysubscription',
+            name='query_subscription',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.QuerySubscription', unique=True),
+        ),
+        migrations.AlterField(
+            model_name='querysubscriptionenvironment',
+            name='environment',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment'),
+        ),
+        migrations.AlterField(
+            model_name='querysubscriptionenvironment',
+            name='query_subscription',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.QuerySubscription'),
+        ),
+    ]
diff --git a/src/sentry/snuba/models.py b/src/sentry/snuba/models.py
index b3ff750ac2..90f777fa0b 100644
--- a/src/sentry/snuba/models.py
+++ b/src/sentry/snuba/models.py
@@ -28,8 +28,8 @@ class QueryDatasets(Enum):
 class QuerySubscriptionEnvironment(Model):
     __core__ = True
 
-    query_subscription = FlexibleForeignKey("sentry.QuerySubscription")
-    environment = FlexibleForeignKey("sentry.Environment")
+    query_subscription = FlexibleForeignKey("sentry.QuerySubscription", db_constraint=False)
+    environment = FlexibleForeignKey("sentry.Environment", db_constraint=False)
     date_added = models.DateTimeField(default=timezone.now)
 
     class Meta:
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
index 382685c9fc..c38c17d83d 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
@@ -175,13 +175,13 @@ class AlertRuleDetailsPutEndpointTest(AlertRuleDetailsBase, APITestCase):
                 self.organization.slug, alert_rule.id, **serialized_alert_rule
             )
 
-        existing_sub = self.alert_rule.query_subscriptions.first()
+        existing_sub = self.alert_rule.snuba_query.subscriptions.first()
 
         # Alert rule should be exactly the same
         assert resp.data == serialize(self.alert_rule)
         # If the aggregation changed we'd have a new subscription, validate that
         # it hasn't changed explicitly
-        updated_sub = AlertRule.objects.get(id=self.alert_rule.id).query_subscriptions.first()
+        updated_sub = AlertRule.objects.get(id=self.alert_rule.id).snuba_query.subscriptions.first()
         assert updated_sub.subscription_id == existing_sub.subscription_id
 
     def test_update_trigger_label_to_unallowed_value(self):
diff --git a/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py b/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
index 5cbd502448..a50d798a6c 100644
--- a/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
+++ b/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
@@ -159,13 +159,13 @@ class AlertRuleDetailsPutEndpointTest(AlertRuleDetailsBase, APITestCase):
                 self.organization.slug, self.project.slug, self.alert_rule.id, **test_params
             )
 
-        existing_sub = self.alert_rule.query_subscriptions.first()
+        existing_sub = self.alert_rule.snuba_query.subscriptions.first()
 
         # Alert rule should be exactly the same
         assert resp.data == serialize(self.alert_rule)
         # If the aggregation changed we'd have a new subscription, validate that
         # it hasn't changed explicitly
-        updated_sub = AlertRule.objects.get(id=self.alert_rule.id).query_subscriptions.first()
+        updated_sub = AlertRule.objects.get(id=self.alert_rule.id).snuba_query.subscriptions.first()
         assert updated_sub.subscription_id == existing_sub.subscription_id
 
     def test_update_snapshot(self):
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 08e6684c8b..305706d9cc 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -70,7 +70,7 @@ from sentry.incidents.models import (
     IncidentSubscription,
     IncidentType,
 )
-from sentry.snuba.models import QueryAggregations, QueryDatasets, QuerySubscription
+from sentry.snuba.models import QueryAggregations, QueryDatasets
 from sentry.snuba.subscriptions import aggregation_function_translations
 from sentry.models.integration import Integration
 from sentry.testutils import TestCase, SnubaTestCase
@@ -718,10 +718,10 @@ class CreateAlertRuleTest(TestCase, BaseIncidentsTest):
             time_window,
             threshold_period,
         )
-        assert alert_rule.query_subscriptions.get().project == self.project
+        assert alert_rule.snuba_query.subscriptions.get().project == self.project
         assert alert_rule.name == name
         assert alert_rule.status == AlertRuleStatus.PENDING.value
-        assert alert_rule.query_subscriptions.all().count() == 1
+        assert alert_rule.snuba_query.subscriptions.all().count() == 1
         assert alert_rule.snuba_query.dataset == QueryDatasets.EVENTS.value
         assert alert_rule.dataset == QueryDatasets.EVENTS.value
         assert alert_rule.snuba_query.query == query
@@ -738,14 +738,14 @@ class CreateAlertRuleTest(TestCase, BaseIncidentsTest):
         include_all_projects = True
         self.project
         alert_rule = self.create_alert_rule(projects=[], include_all_projects=include_all_projects)
-        assert alert_rule.query_subscriptions.get().project == self.project
+        assert alert_rule.snuba_query.subscriptions.get().project == self.project
         assert alert_rule.include_all_projects == include_all_projects
 
         new_project = self.create_project(fire_project_created=True)
         alert_rule = self.create_alert_rule(
             projects=[], include_all_projects=include_all_projects, excluded_projects=[self.project]
         )
-        assert alert_rule.query_subscriptions.get().project == new_project
+        assert alert_rule.snuba_query.subscriptions.get().project == new_project
         assert alert_rule.include_all_projects == include_all_projects
 
     def test_invalid_query(self):
@@ -839,7 +839,7 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
         )
         assert self.alert_rule.id == updated_rule.id
         assert self.alert_rule.name == name
-        updated_subscriptions = self.alert_rule.query_subscriptions.all()
+        updated_subscriptions = self.alert_rule.snuba_query.subscriptions.all()
         assert set([sub.project for sub in updated_subscriptions]) == set(updated_projects)
         for subscription in updated_subscriptions:
             assert subscription.snuba_query.query == query
@@ -863,10 +863,12 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
         assert self.alert_rule.threshold_period == threshold_period
 
     def test_update_subscription(self):
-        old_subscription_id = self.alert_rule.query_subscriptions.get().subscription_id
+        old_subscription_id = self.alert_rule.snuba_query.subscriptions.get().subscription_id
         with self.tasks():
             update_alert_rule(self.alert_rule, query="some new query")
-        assert old_subscription_id != self.alert_rule.query_subscriptions.get().subscription_id
+        assert (
+            old_subscription_id != self.alert_rule.snuba_query.subscriptions.get().subscription_id
+        )
 
     def test_empty_query(self):
         alert_rule = update_alert_rule(self.alert_rule, query="")
@@ -901,7 +903,7 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
             1,
         )
         update_alert_rule(alert_rule, [self.project])
-        assert self.alert_rule.query_subscriptions.get().project == self.project
+        assert self.alert_rule.snuba_query.subscriptions.get().project == self.project
 
     def test_new_updated_deleted_projects(self):
         alert_rule = create_alert_rule(
@@ -918,7 +920,7 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
         updated_projects = [self.project, new_project]
         with self.tasks():
             update_alert_rule(alert_rule, updated_projects, query=query_update)
-        updated_subscriptions = alert_rule.query_subscriptions.all()
+        updated_subscriptions = alert_rule.snuba_query.subscriptions.all()
         assert set([sub.project for sub in updated_subscriptions]) == set(updated_projects)
         for sub in updated_subscriptions:
             assert sub.query == query_update
@@ -927,62 +929,45 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
         orig_project = self.project
         alert_rule = self.create_alert_rule(projects=[orig_project])
         new_project = self.create_project(fire_project_created=True)
-        assert not QuerySubscription.objects.filter(
-            project=new_project, alert_rules=alert_rule
-        ).exists()
+        assert not alert_rule.snuba_query.subscriptions.filter(project=new_project).exists()
         update_alert_rule(alert_rule, include_all_projects=True)
-        assert set(
-            [sub.project for sub in QuerySubscription.objects.filter(alert_rules=alert_rule)]
-        ) == set([new_project, orig_project])
+        assert set([sub.project for sub in alert_rule.snuba_query.subscriptions.all()]) == set(
+            [new_project, orig_project]
+        )
 
     def test_update_to_include_all_with_exclude(self):
         orig_project = self.project
         alert_rule = self.create_alert_rule(projects=[orig_project])
         new_project = self.create_project(fire_project_created=True)
         excluded_project = self.create_project()
-        assert not QuerySubscription.objects.filter(
-            project=new_project, alert_rules=alert_rule
-        ).exists()
+        assert not alert_rule.snuba_query.subscriptions.filter(project=new_project).exists()
         update_alert_rule(
             alert_rule, include_all_projects=True, excluded_projects=[excluded_project]
         )
-        assert set(
-            [sub.project for sub in QuerySubscription.objects.filter(alert_rules=alert_rule)]
-        ) == set([orig_project, new_project])
+        assert set([sub.project for sub in alert_rule.snuba_query.subscriptions.all()]) == set(
+            [orig_project, new_project]
+        )
 
     def test_update_include_all_exclude_list(self):
         new_project = self.create_project(fire_project_created=True)
         projects = set([new_project, self.project])
         alert_rule = self.create_alert_rule(include_all_projects=True)
-        assert (
-            set([sub.project for sub in QuerySubscription.objects.filter(alert_rules=alert_rule)])
-            == projects
-        )
+        assert set([sub.project for sub in alert_rule.snuba_query.subscriptions.all()]) == projects
         with self.tasks():
             update_alert_rule(alert_rule, excluded_projects=[self.project])
-        assert [
-            sub.project for sub in QuerySubscription.objects.filter(alert_rules=alert_rule)
-        ] == [new_project]
+        assert [sub.project for sub in alert_rule.snuba_query.subscriptions.all()] == [new_project]
 
         update_alert_rule(alert_rule, excluded_projects=[])
-        assert (
-            set([sub.project for sub in QuerySubscription.objects.filter(alert_rules=alert_rule)])
-            == projects
-        )
+        assert set([sub.project for sub in alert_rule.snuba_query.subscriptions.all()]) == projects
 
     def test_update_from_include_all(self):
         new_project = self.create_project(fire_project_created=True)
         projects = set([new_project, self.project])
         alert_rule = self.create_alert_rule(include_all_projects=True)
-        assert (
-            set([sub.project for sub in QuerySubscription.objects.filter(alert_rules=alert_rule)])
-            == projects
-        )
+        assert set([sub.project for sub in alert_rule.snuba_query.subscriptions.all()]) == projects
         with self.tasks():
             update_alert_rule(alert_rule, projects=[new_project], include_all_projects=False)
-        assert [
-            sub.project for sub in QuerySubscription.objects.filter(alert_rules=alert_rule)
-        ] == [new_project]
+        assert [sub.project for sub in alert_rule.snuba_query.subscriptions.all()] == [new_project]
 
     def test_with_attached_incident(self):
         # A snapshot of the pre-updated rule should be created, and the incidents should also be resolved.
diff --git a/tests/sentry/incidents/test_models.py b/tests/sentry/incidents/test_models.py
index 0bd226fd3b..ec7ffa4422 100644
--- a/tests/sentry/incidents/test_models.py
+++ b/tests/sentry/incidents/test_models.py
@@ -69,7 +69,7 @@ class FetchForOrganizationTest(TestCase):
 class IncidentGetForSubscriptionTest(TestCase):
     def test(self):
         alert_rule = self.create_alert_rule()
-        subscription = alert_rule.query_subscriptions.get()
+        subscription = alert_rule.snuba_query.subscriptions.get()
         # First test fetching from database
         assert cache.get(AlertRule.objects.CACHE_SUBSCRIPTION_KEY % subscription.id) is None
         assert AlertRule.objects.get_for_subscription(subscription) == alert_rule
@@ -82,7 +82,7 @@ class IncidentGetForSubscriptionTest(TestCase):
 class IncidentClearSubscriptionCacheTest(TestCase):
     def setUp(self):
         self.alert_rule = self.create_alert_rule()
-        self.subscription = self.alert_rule.query_subscriptions.get()
+        self.subscription = self.alert_rule.snuba_query.subscriptions.get()
 
     def test_updated_subscription(self):
         AlertRule.objects.get_for_subscription(self.subscription)
diff --git a/tests/sentry/incidents/test_receivers.py b/tests/sentry/incidents/test_receivers.py
index 5f328228ab..209179af89 100644
--- a/tests/sentry/incidents/test_receivers.py
+++ b/tests/sentry/incidents/test_receivers.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 from datetime import datetime
 import pytz
-from sentry.snuba.models import QuerySubscription
 from sentry.testutils import TestCase
 from sentry.models import Organization
 from sentry.incidents.models import (
@@ -17,16 +16,12 @@ class AddProjectToIncludeAllRulesTest(TestCase):
     def test_include_all_projects_enabled(self):
         alert_rule = self.create_alert_rule(include_all_projects=True)
         new_project = self.create_project()
-        assert QuerySubscription.objects.filter(
-            project=new_project, alert_rules=alert_rule
-        ).exists()
+        assert alert_rule.snuba_query.subscriptions.filter(project=new_project).exists()
 
     def test_include_all_projects_disabled(self):
         alert_rule = self.create_alert_rule(include_all_projects=False)
         new_project = self.create_project()
-        assert not QuerySubscription.objects.filter(
-            project=new_project, alert_rules=alert_rule
-        ).exists()
+        assert not alert_rule.snuba_query.subscriptions.filter(project=new_project).exists()
 
     def test_update_noop(self):
         new_project = self.create_project()
@@ -34,9 +29,7 @@ class AddProjectToIncludeAllRulesTest(TestCase):
             include_all_projects=True, excluded_projects=[new_project]
         )
         new_project.update(name="hi")
-        assert not QuerySubscription.objects.filter(
-            project=new_project, alert_rules=alert_rule
-        ).exists()
+        assert not alert_rule.snuba_query.subscriptions.filter(project=new_project).exists()
 
 
 class PreSaveIncidentTriggerTest(TestCase):
diff --git a/tests/sentry/incidents/test_subscription_processor.py b/tests/sentry/incidents/test_subscription_processor.py
index 9427f1efd7..5c2ad2bd22 100644
--- a/tests/sentry/incidents/test_subscription_processor.py
+++ b/tests/sentry/incidents/test_subscription_processor.py
@@ -70,11 +70,11 @@ class ProcessUpdateTest(TestCase):
 
     @fixture
     def sub(self):
-        return self.rule.query_subscriptions.filter(project=self.project).get()
+        return self.rule.snuba_query.subscriptions.filter(project=self.project).get()
 
     @fixture
     def other_sub(self):
-        return self.rule.query_subscriptions.filter(project=self.other_project).get()
+        return self.rule.snuba_query.subscriptions.filter(project=self.other_project).get()
 
     @fixture
     def rule(self):
diff --git a/tests/snuba/incidents/test_tasks.py b/tests/snuba/incidents/test_tasks.py
index eb272afef7..3a878481c6 100644
--- a/tests/snuba/incidents/test_tasks.py
+++ b/tests/snuba/incidents/test_tasks.py
@@ -51,7 +51,7 @@ class HandleSnubaQueryUpdateTest(TestCase):
 
     @fixture
     def subscription(self):
-        return self.rule.query_subscriptions.get()
+        return self.rule.snuba_query.subscriptions.get()
 
     @fixture
     def rule(self):
