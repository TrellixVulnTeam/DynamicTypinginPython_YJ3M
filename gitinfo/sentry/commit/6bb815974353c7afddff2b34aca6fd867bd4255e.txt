commit 6bb815974353c7afddff2b34aca6fd867bd4255e
Author: Burak Yigit Kaya <byk@sentry.io>
Date:   Mon Dec 2 13:17:49 2019 +0300

    feat(backfill): Add last X days option to backfill_eventstream (#15875)
    
    I'm using this over at getsentry/onpremise to migrate 9.1 installations to 10 with a max retention days. Since doing cross-platform (BSD vs GNU) `date` logic is hard, I decided to implement the feature in Python, baked into the script.

diff --git a/src/sentry/management/commands/backfill_eventstream.py b/src/sentry/management/commands/backfill_eventstream.py
index 87e5166a93..c328feaf85 100644
--- a/src/sentry/management/commands/backfill_eventstream.py
+++ b/src/sentry/management/commands/backfill_eventstream.py
@@ -4,6 +4,8 @@ import sys
 
 import six
 
+from datetime import timedelta, datetime
+
 from django.core.management.base import BaseCommand, CommandError
 from django.utils.dateparse import parse_datetime
 
@@ -24,6 +26,9 @@ class Command(BaseCommand):
         parser.add_argument(
             "--to-ts", dest="to_ts", type=six.text_type, help="Last event timestamp (ISO 8601)."
         ),
+        parser.add_argument(
+            "--last-days", dest="last_days", type=int, help="Events in the last X days"
+        )
         parser.add_argument(
             "--from-id", dest="from_id", type=int, help="Starting event ID (primary key)."
         ),
@@ -41,12 +46,26 @@ class Command(BaseCommand):
             raise CommandError("Cannot parse --to-ts")
         return Event.objects.filter(datetime__gte=from_date, datetime__lte=to_date)
 
+    def get_events_by_last_days(self, last_days):
+        to_date = datetime.now()
+        from_date = to_date - timedelta(days=last_days)
+        return Event.objects.filter(datetime__gte=from_date, datetime__lte=to_date)
+
     def get_events_by_id(self, from_id, to_id):
         if from_id > to_id:
             raise CommandError("Invalid ID range.")
         return Event.objects.filter(id__gte=from_id, id__lte=to_id)
 
-    def handle(self, **options):
+    def handle(
+        self,
+        from_ts=None,
+        to_ts=None,
+        last_days=None,
+        from_id=None,
+        to_id=None,
+        no_input=False,
+        **options
+    ):
         def _attach_related(_events):
             project_ids = set([event.project_id for event in _events])
             projects = {p.id: p for p in Project.objects.filter(id__in=project_ids)}
@@ -60,19 +79,21 @@ class Command(BaseCommand):
         from sentry import eventstream
         from sentry.utils.query import RangeQuerySetWrapper
 
-        from_ts = options["from_ts"]
-        to_ts = options["to_ts"]
-        from_id = options["from_id"]
-        to_id = options["to_id"]
-
-        if (from_ts or to_ts) and (from_id or to_id):
-            raise CommandError("You can either limit by primary key, or by timestamp.")
+        filter_methods = bool(last_days) + bool(from_ts or to_ts) + bool(from_id or to_id)
+        if filter_methods > 1:
+            raise CommandError(
+                "You can either limit by primary key, or by timestamp, or last X days."
+            )
         elif from_ts and to_ts:
             events = self.get_events_by_timestamp(from_ts, to_ts)
+        elif last_days:
+            events = self.get_events_by_last_days(last_days)
         elif from_id and to_id:
             events = self.get_events_by_id(from_id, to_id)
         else:
-            raise CommandError("Invalid arguments: either use --from/--to-id, or --from/--to-ts.")
+            raise CommandError(
+                "Invalid arguments: either use --from/--to-id, or --from/--to-ts, or --last-days."
+            )
 
         count = events.count()
         self.stdout.write("Events to process: {}\n".format(count))
@@ -81,7 +102,7 @@ class Command(BaseCommand):
             self.stdout.write("Nothing to do.\n")
             sys.exit(0)
 
-        if not options["no_input"]:
+        if not no_input:
             proceed = six.moves.input("Do you want to continue? [y/N] ")
             if proceed.strip().lower() not in ["yes", "y"]:
                 raise CommandError("Aborted.")
