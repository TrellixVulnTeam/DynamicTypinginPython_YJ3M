commit dd20772c14cbf558bae5d05727038d5866a2cd53
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Feb 5 14:10:25 2019 -0800

    fix(events-stream): Fix extra re-renders when changing dates (#11844)
    
    This fixes extra re-renders when changing global selection header. This is caused by `withRouter`

diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 9c32939ae8..07031a6020 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -1,7 +1,6 @@
 import * as Sentry from '@sentry/browser';
 import {Flex} from 'grid-emotion';
 import {isEqual} from 'lodash';
-import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
@@ -148,7 +147,7 @@ class OrganizationEvents extends AsyncView {
   }
 
   renderBody() {
-    const {organization, location} = this.props;
+    const {organization, location, router} = this.props;
     const {error, loading, reloading, events, eventsPageLinks} = this.state;
     const parsedLinks = !loading && !error ? utils.parseLinkHeader(eventsPageLinks) : {};
 
@@ -162,6 +161,7 @@ class OrganizationEvents extends AsyncView {
           )}
         <Panel>
           <EventsChart
+            router={router}
             query={location.query.query}
             organization={organization}
             onZoom={this.handleZoom}
@@ -178,6 +178,7 @@ class OrganizationEvents extends AsyncView {
         />
 
         {!loading &&
+          !reloading &&
           !error && (
             <Flex align="center" justify="space-between">
               <RowDisplay>
@@ -207,5 +208,5 @@ const RowDisplay = styled('div')`
   color: ${p => p.theme.gray6};
 `;
 
-export default withRouter(withOrganization(OrganizationEvents));
+export default withOrganization(OrganizationEvents);
 export {OrganizationEvents, parseRowFromLinks};
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index 7afca44a94..8b27cae0e8 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -1,5 +1,4 @@
 import {isEqual} from 'lodash';
-import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
@@ -75,13 +74,14 @@ class EventsChart extends React.Component {
     period: PropTypes.string,
     query: PropTypes.string,
     utc: PropTypes.bool,
+    router: PropTypes.object,
   };
 
   render() {
-    const {api, period, utc, query, ...props} = this.props;
+    const {api, period, utc, query, router, ...props} = this.props;
 
     return (
-      <ChartZoom period={period} utc={utc} {...props}>
+      <ChartZoom router={router} period={period} utc={utc} {...props}>
         {({interval, ...zoomRenderProps}) => (
           <EventsRequest
             {...props}
@@ -126,29 +126,27 @@ class EventsChart extends React.Component {
   }
 }
 
-const EventsChartContainer = withRouter(
-  withGlobalSelection(
-    withApi(
-      class EventsChartWithParams extends React.Component {
-        static propTypes = {
-          selection: SentryTypes.GlobalSelection,
-        };
-
-        render() {
-          const {selection, ...props} = this.props;
-          const {datetime, projects, environments} = selection;
-
-          return (
-            <EventsChart
-              {...datetime}
-              project={projects || []}
-              environment={environments || []}
-              {...props}
-            />
-          );
-        }
+const EventsChartContainer = withGlobalSelection(
+  withApi(
+    class EventsChartWithParams extends React.Component {
+      static propTypes = {
+        selection: SentryTypes.GlobalSelection,
+      };
+
+      render() {
+        const {selection, ...props} = this.props;
+        const {datetime, projects, environments} = selection;
+
+        return (
+          <EventsChart
+            {...datetime}
+            project={projects || []}
+            environment={environments || []}
+            {...props}
+          />
+        );
       }
-    )
+    }
   )
 );
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 6041ce7bc6..5ad53d541f 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -1,4 +1,3 @@
-import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
@@ -71,9 +70,7 @@ class OrganizationEventsContainer extends React.Component {
     );
   }
 }
-export default withRouter(
-  withOrganization(withGlobalSelection(OrganizationEventsContainer))
-);
+export default withOrganization(withGlobalSelection(OrganizationEventsContainer));
 export {OrganizationEventsContainer};
 
 const Body = styled('div')`
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index eb5679c471..d80f1afa3e 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -1,3 +1,4 @@
+import {withRouter} from 'react-router';
 import React from 'react';
 
 import OrganizationEvents, {parseRowFromLinks} from 'app/views/organizationEvents/events';
@@ -18,6 +19,8 @@ const pageTwoLinks =
   '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:0:1>; rel="previous"; results="true"; cursor="0:0:1", ' +
   '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:200:0>; rel="next"; results="false"; cursor="0:200:0"';
 
+const OrganizationEventsWithRouter = withRouter(OrganizationEvents);
+
 describe('OrganizationEventsErrors', function() {
   const {organization, router, routerContext} = initializeOrg({
     projects: [{isMember: true}, {isMember: true, slug: 'new-project', id: 3}],
@@ -31,7 +34,6 @@ describe('OrganizationEventsErrors', function() {
       },
     },
   });
-  const org = organization;
 
   let eventsMock;
   let eventsStatsMock;
@@ -39,7 +41,7 @@ describe('OrganizationEventsErrors', function() {
 
   beforeAll(function() {
     MockApiClient.addMockResponse({
-      url: `/organizations/${org.slug}/environments/`,
+      url: `/organizations/${organization.slug}/environments/`,
       body: TestStubs.Environments(),
     });
   });
@@ -69,17 +71,17 @@ describe('OrganizationEventsErrors', function() {
 
   it('renders with errors', async function() {
     MockApiClient.addMockResponse({
-      url: `/organizations/${org.slug}/events/`,
+      url: `/organizations/${organization.slug}/events/`,
       statusCode: 500,
       body: {details: 'Error'},
     });
     MockApiClient.addMockResponse({
-      url: `/organizations/${org.slug}/events-stats/`,
+      url: `/organizations/${organization.slug}/events-stats/`,
       statusCode: 500,
       body: {details: 'Error'},
     });
     const wrapper = mount(
-      <OrganizationEvents organization={org} location={{query: {}}} />,
+      <OrganizationEvents organization={organization} location={{query: {}}} />,
       routerContext
     );
     await tick();
@@ -92,7 +94,7 @@ describe('OrganizationEventsErrors', function() {
 
   it('renders events table', async function() {
     const wrapper = mount(
-      <OrganizationEvents organization={org} location={{query: {}}} />,
+      <OrganizationEvents organization={organization} location={{query: {}}} />,
       routerContext
     );
     await tick();
@@ -105,8 +107,8 @@ describe('OrganizationEventsErrors', function() {
 
   it('renders TotalEventCount with internal flag', async function() {
     const newOrg = TestStubs.Organization({
-      ...org,
-      features: [...org.features, 'internal-catchall'],
+      ...organization,
+      features: [...organization.features, 'internal-catchall'],
     });
     const wrapper = mount(
       <OrganizationEvents organization={newOrg} location={{query: {}}} />,
@@ -122,8 +124,8 @@ describe('OrganizationEventsErrors', function() {
   // Use `search` to compare instead of `query` because that's what we check in `AsyncComponent`
   it('location.query changes updates events table', async function() {
     const wrapper = mount(
-      <OrganizationEvents
-        organization={org}
+      <OrganizationEventsWithRouter
+        organization={organization}
         location={{
           search: '?statsPeriod=14d',
           query: {
@@ -201,8 +203,15 @@ describe('OrganizationEventsErrors', function() {
       };
 
       wrapper = mount(
-        <OrganizationEventsContainer organization={org}>
-          <OrganizationEvents organization={org} />
+        <OrganizationEventsContainer
+          router={newRouter}
+          organization={organization}
+          location={newRouter.location}
+        >
+          <OrganizationEventsWithRouter
+            location={newRouter.location}
+            organization={organization}
+          />
         </OrganizationEventsContainer>,
         newRouterContext
       );
@@ -313,7 +322,10 @@ describe('OrganizationEventsContainer', function() {
         organization={organization}
         location={router.location}
       >
-        <OrganizationEvents location={router.location} organization={organization} />
+        <OrganizationEventsWithRouter
+          location={router.location}
+          organization={organization}
+        />
       </OrganizationEventsContainer>,
       routerContext
     );
