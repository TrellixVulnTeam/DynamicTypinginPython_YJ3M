commit d91e95db9de8ec6d2ce23a81600518d970db4231
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 29 01:06:52 2013 -0700

    Some more initial work on rest api

diff --git a/setup.py b/setup.py
index 12de7209e8..ff3cff61df 100755
--- a/setup.py
+++ b/setup.py
@@ -72,7 +72,7 @@ install_requires = [
     'django-picklefield>=0.3.0,<0.4.0',
     'django-static-compiler>=0.3.0,<0.4.0',
     'django-templatetag-sugar>=0.1.0,<0.2.0',
-    'djangorestframework>=2.3.6,<2.4.0',
+    'djangorestframework>=2.3.8,<2.4.0',
     'gunicorn>=0.17.2,<0.18.0',
     'logan>=0.5.8.2,<0.6.0',
     'nydus>=0.10.0,<0.11.0',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 1a293d630d..c6f5c80944 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -404,6 +404,13 @@ if os.path.exists(NPM_ROOT):
         },
     }
 
+# django-rest-framework
+
+REST_FRAMEWORK = {
+    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
+}
+
+
 # Sentry and Raven configuration
 
 SENTRY_PUBLIC = False
diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index 1208666608..72ce32eda4 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -120,10 +120,7 @@ class BaseTestCase(Exam):
 
     @fixture
     def group(self):
-        return Group.objects.create(
-            message='Foo bar',
-            project=self.project,
-        )
+        return self.create_group()
 
     @fixture
     def event(self):
@@ -135,6 +132,22 @@ class BaseTestCase(Exam):
             data=LEGACY_DATA,
         )
 
+    def create_group(self, project=None, **kwargs):
+        Group.objects.create(
+            message='Foo bar',
+            project=project or self.project,
+            **kwargs
+        )
+
+    def create_event(self, project=None, group=None):
+        return Event.objects.create(
+            event_id='a' * 32,
+            group=group or self.group,
+            message='Foo bar',
+            project=project or self.project,
+            data=LEGACY_DATA,
+        )
+
     def assertRequiresAuthentication(self, path, method='GET'):
         resp = getattr(self.client, method.lower())(path)
         assert resp.status_code == 302
diff --git a/src/sentry/web/restapi/authentication.py b/src/sentry/web/restapi/authentication.py
index 3f821e7152..c1657fc48a 100644
--- a/src/sentry/web/restapi/authentication.py
+++ b/src/sentry/web/restapi/authentication.py
@@ -12,6 +12,6 @@ class KeyAuthentication(BasicAuthentication):
             raise AuthenticationFailed('Invalid api key')
 
         if pk.secret_key != password:
-            raise AuthenticationFailed('Invalid api key')            
+            raise AuthenticationFailed('Invalid api key')
 
-        return (pk.user, pk)
\ No newline at end of file
+        return (pk.user, pk)
diff --git a/src/sentry/web/restapi/base.py b/src/sentry/web/restapi/base.py
new file mode 100644
index 0000000000..f5168210df
--- /dev/null
+++ b/src/sentry/web/restapi/base.py
@@ -0,0 +1,12 @@
+from rest_framework.authentication import SessionAuthentication
+from rest_framework.parsers import JSONParser
+from rest_framework.views import APIView
+
+from .authentication import KeyAuthentication
+from .permissions import HasProjectPermission
+
+
+class BaseView(APIView):
+    authentication_classes = (KeyAuthentication, SessionAuthentication)
+    permission_classes = (HasProjectPermission,)
+    parser_classes = (JSONParser,)
diff --git a/src/sentry/web/restapi/endpoints/__init__.py b/src/sentry/web/restapi/endpoints/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/web/restapi/endpoints/event_details.py b/src/sentry/web/restapi/endpoints/event_details.py
new file mode 100644
index 0000000000..3a17ce9478
--- /dev/null
+++ b/src/sentry/web/restapi/endpoints/event_details.py
@@ -0,0 +1,19 @@
+from django.utils.decorators import method_decorator
+
+from sentry.models import Group
+from sentry.web.decorators import has_access
+from sentry.web.restapi.base import BaseView
+from sentry.utils.javascript import transform
+
+from rest_framework.response import Response
+
+
+class EventDetailsView(BaseView):
+    @method_decorator(has_access)
+    def get(self, request, team, project, group_id):
+        group = Group.objects.get(
+            id=group_id,
+            project=project,
+        )
+
+        return Response(transform(group, request))
diff --git a/src/sentry/web/restapi/endpoints/event_index.py b/src/sentry/web/restapi/endpoints/event_index.py
new file mode 100644
index 0000000000..eb443bab21
--- /dev/null
+++ b/src/sentry/web/restapi/endpoints/event_index.py
@@ -0,0 +1,35 @@
+from django.core.urlresolvers import reverse
+
+from sentry.models import Project, Team
+from sentry.web.frontend.groups import _get_group_list
+from sentry.web.restapi.base import BaseView
+from sentry.utils.http import absolute_uri
+from sentry.utils.javascript import transform
+
+from rest_framework.response import Response
+
+
+class EventListView(BaseView):
+    def get(self, request, team_slug, project_id):
+        team = Team.objects.get_from_cache(slug=team_slug)
+        project = Project.objects.get_from_cache(id=project_id)
+        assert project.team_id == team.id
+        project.team_cache = team
+
+        offset = 0
+        limit = 100
+
+        response = _get_group_list(
+            request=request,
+            project=project,
+        )
+
+        group_list = response['event_list']
+        group_list = list(group_list[offset:limit])
+
+        # TODO: need to make a custom serializer
+        results = transform(group_list, request)
+        for group in results:
+            group['uri'] = absolute_uri(reverse('sentry-api-1-event-details', args=(team.slug, project.slug, group['id'])))
+
+        return Response(results)
diff --git a/src/sentry/web/restapi/endpoints/event_resolve.py b/src/sentry/web/restapi/endpoints/event_resolve.py
new file mode 100644
index 0000000000..4aa71f61b5
--- /dev/null
+++ b/src/sentry/web/restapi/endpoints/event_resolve.py
@@ -0,0 +1,40 @@
+from django.utils import timezone
+from django.utils.decorators import method_decorator
+
+from sentry.constants import STATUS_RESOLVED
+from sentry.models import Activity, Group
+from sentry.web.decorators import has_access
+from sentry.web.restapi.base import BaseView
+from sentry.utils.javascript import transform
+
+from rest_framework.response import Response
+
+
+class ResolveEventView(BaseView):
+    @method_decorator(has_access)
+    def post(self, request, team, project, group_id):
+        group = Group.objects.get(
+            id=group_id,
+            project=project,
+        )
+
+        now = timezone.now()
+
+        happened = Group.objects.filter(
+            id=group.id,
+        ).exclude(status=STATUS_RESOLVED).update(
+            status=STATUS_RESOLVED,
+            resolved_at=now,
+        )
+        group.status = STATUS_RESOLVED
+        group.resolved_at = now
+
+        if happened:
+            Activity.objects.create(
+                project=project,
+                group=group,
+                type=Activity.SET_RESOLVED,
+                user=request.user,
+            )
+
+        return Response(transform(group, request))
diff --git a/src/sentry/web/restapi/permissions.py b/src/sentry/web/restapi/permissions.py
index f37afd91d5..0ea3f05e33 100644
--- a/src/sentry/web/restapi/permissions.py
+++ b/src/sentry/web/restapi/permissions.py
@@ -10,4 +10,4 @@ class HasProjectPermission(BasePermission):
         elif not isinstance(obj, Project):
             raise NotImplementedError('Object does not support permissions')
 
-        return obj in Project.objects.get_for_user(request.user)
\ No newline at end of file
+        return obj in Project.objects.get_for_user(request.user)
diff --git a/src/sentry/web/restapi/urls.py b/src/sentry/web/restapi/urls.py
index 0790371e75..86c47863fe 100644
--- a/src/sentry/web/restapi/urls.py
+++ b/src/sentry/web/restapi/urls.py
@@ -1,13 +1,19 @@
-from django.conf.urls import patterns, url, include
+from django.conf.urls import patterns, url
 
-from . import views
+from .endpoints.event_index import EventListView
+from .endpoints.event_details import EventDetailsView
+from .endpoints.event_resolve import ResolveEventView
 
-urlpatterns = patterns('',
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/$', views.EventListView.as_view(),
-    	name='sentry-api-1-event-list'),
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/(?P<group_id>\d+)/$', views.EventDetailsView.as_view(),
-    	name='sentry-api-1-event-details'),
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/(?P<group_id>\d+)/resolve/$', views.ResolveEventView.as_view(),
-    	name='sentry-api-1-resolve-event'),
+urlpatterns = patterns(
+    '',
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/$',
+        EventListView.as_view(),
+        name='sentry-api-1-event-list'),
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/(?P<group_id>\d+)/$',
+        EventDetailsView.as_view(),
+        name='sentry-api-1-event-details'),
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/(?P<group_id>\d+)/resolve/$',
+        ResolveEventView.as_view(),
+        name='sentry-api-1-resolve-event'),
     # url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
 )
diff --git a/src/sentry/web/restapi/views.py b/src/sentry/web/restapi/views.py
deleted file mode 100644
index f62cade23d..0000000000
--- a/src/sentry/web/restapi/views.py
+++ /dev/null
@@ -1,85 +0,0 @@
-from django.core.urlresolvers import reverse
-from django.utils import timezone
-from django.utils.decorators import method_decorator
-
-from sentry.constants import STATUS_RESOLVED
-from sentry.models import Activity, Group
-from sentry.web.decorators import has_access
-from sentry.web.frontend.groups import _get_group_list
-from sentry.utils.http import absolute_uri
-from sentry.utils.javascript import transform
-
-from rest_framework.authentication import SessionAuthentication
-from rest_framework.views import APIView
-from rest_framework.response import Response
-
-from .authentication import KeyAuthentication
-from .permissions import HasProjectPermission
-
-
-class BaseView(APIView):
-    authentication_classes = (KeyAuthentication, SessionAuthentication)
-    permission_classes = (HasProjectPermission,)
-
-
-class EventListView(BaseView):
-    @method_decorator(has_access)
-    def get(self, request, team, project):
-        offset = 0
-        limit = 100
-
-        response = _get_group_list(
-            request=request,
-            project=project,
-        )
-
-        group_list = response['event_list']
-        group_list = list(group_list[offset:limit])
-
-        # TODO: need to make a custom serializer
-        results = transform(group_list, request)
-        for group in results:
-            group['uri'] = absolute_uri(reverse('sentry-api-1-event-details', args=(team.slug, project.slug, group['id'])))
-
-        return Response(results)
-
-
-class EventDetailsView(BaseView):
-    @method_decorator(has_access)
-    def get(self, request, team, project, group_id):
-        group = Group.objects.get(
-            id=group_id,
-            project=project,
-        )
-
-        return Response(transform(group, request))
-
-
-class ResolveEventView(BaseView):
-    @method_decorator(has_access)
-    def post(self, request, team, project, group_id):
-        group = Group.objects.get(
-            id=group_id,
-            project=project,
-        )
-
-        now = timezone.now()
-
-        happened = Group.objects.filter(
-            id=group.id,
-        ).exclude(status=STATUS_RESOLVED).update(
-            status=STATUS_RESOLVED,
-            resolved_at=now,
-        )
-        group.status = STATUS_RESOLVED
-        group.resolved_at = now
-
-        if happened:
-            Activity.objects.create(
-                project=project,
-                group=group,
-                type=Activity.SET_RESOLVED,
-                user=request.user,
-            )
-
-        return Response(transform(group, request))
diff --git a/tests/sentry/web/restapi/__init__.py b/tests/sentry/web/restapi/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/restapi/endpoints/__init__.py b/tests/sentry/web/restapi/endpoints/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/restapi/endpoints/test_event_details.py b/tests/sentry/web/restapi/endpoints/test_event_details.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/restapi/endpoints/test_event_index.py b/tests/sentry/web/restapi/endpoints/test_event_index.py
new file mode 100644
index 0000000000..f71bc3b0f7
--- /dev/null
+++ b/tests/sentry/web/restapi/endpoints/test_event_index.py
@@ -0,0 +1,16 @@
+from django.core.urlresolvers import reverse
+from rest_framework.test import APITestCase
+from sentry.testutils import BaseTestCase
+
+
+class EventIndexTest(BaseTestCase, APITestCase):
+    def test_simple(self):
+        self.create_group(checksum='a' * 32)
+        self.create_group(checksum='b' * 32)
+
+        self.client.force_authenticate(user=self.user)
+        url = reverse('sentry-api-1-event-list', kwargs={
+            'project_id': self.project.id, 'team_slug': self.team.slug})
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
+        assert response.data == 'ok'
diff --git a/tests/sentry/web/restapi/endpoints/test_event_resolve.py b/tests/sentry/web/restapi/endpoints/test_event_resolve.py
new file mode 100644
index 0000000000..e69de29bb2
