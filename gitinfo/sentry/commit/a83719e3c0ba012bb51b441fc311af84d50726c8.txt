commit a83719e3c0ba012bb51b441fc311af84d50726c8
Author: Matej Minar <matej.minar@sentry.io>
Date:   Tue Feb 4 10:59:20 2020 +0100

    ref(ts): Changes typing of defaultProps and React.FC (#16746)
    
    * ref(ts): Changes typing of defaultProps
    
    * wip
    
    * removed React.FC
    
    * translation

diff --git a/src/sentry/static/sentry/app/components/actions/actionLink.tsx b/src/sentry/static/sentry/app/components/actions/actionLink.tsx
index fb652fc1de..9f7dfbb783 100644
--- a/src/sentry/static/sentry/app/components/actions/actionLink.tsx
+++ b/src/sentry/static/sentry/app/components/actions/actionLink.tsx
@@ -5,12 +5,15 @@ import PropTypes from 'prop-types';
 
 import Confirm from 'app/components/confirm';
 
-type ActionLinkProps = {
+type DefaultProps = {
+  disabled: boolean;
+  shouldConfirm: boolean;
+};
+
+type ActionLinkProps = DefaultProps & {
   title: string;
   message: React.ReactNode;
-  disabled?: boolean;
   onAction: () => void;
-  shouldConfirm?: boolean;
   confirmLabel?: string;
 } & React.HTMLAttributes<HTMLDivElement>;
 
@@ -25,7 +28,7 @@ export default class ActionLink extends React.Component<ActionLinkProps> {
     confirmLabel: PropTypes.string,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     shouldConfirm: false,
     disabled: false,
   };
diff --git a/src/sentry/static/sentry/app/components/activity/note/body.tsx b/src/sentry/static/sentry/app/components/activity/note/body.tsx
index 55d40f75ca..43b9074a0e 100644
--- a/src/sentry/static/sentry/app/components/activity/note/body.tsx
+++ b/src/sentry/static/sentry/app/components/activity/note/body.tsx
@@ -8,7 +8,7 @@ type Props = {
   className: string;
 };
 
-const NoteBody: React.FC<Props> = ({className, text}) => (
+const NoteBody = ({className, text}: Props) => (
   <div
     className={className}
     data-test-id="activity-note-body"
diff --git a/src/sentry/static/sentry/app/components/alertLink.tsx b/src/sentry/static/sentry/app/components/alertLink.tsx
index 40f6b337c7..0c66fcf2be 100644
--- a/src/sentry/static/sentry/app/components/alertLink.tsx
+++ b/src/sentry/static/sentry/app/components/alertLink.tsx
@@ -13,15 +13,17 @@ type PropsWithHref = {href: string};
 type PropsWithTo = {to: LocationDescriptor};
 type OtherProps = {
   icon?: string;
+  onClick?: (e: React.MouseEvent) => void;
+};
+type DefaultProps = {
   size: Size;
   priority: Priority;
-  onClick?: (e: React.MouseEvent) => void;
 };
 
-type Props = (PropsWithHref | PropsWithTo) & OtherProps;
+type Props = (PropsWithHref | PropsWithTo) & OtherProps & DefaultProps;
 
 export default class AlertLink extends React.Component<Props> {
-  static defaultProps: Partial<Props> = {
+  static defaultProps: DefaultProps = {
     priority: 'warning',
     size: 'normal',
   };
diff --git a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.tsx b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.tsx
index d77721560e..8d0dded1a3 100644
--- a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.tsx
@@ -3,6 +3,7 @@ import debounce from 'lodash/debounce';
 import React from 'react';
 import styled from '@emotion/styled';
 
+import {t} from 'app/locale';
 import Input from 'app/views/settings/components/forms/controls/input';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import {Client} from 'app/api';
@@ -14,36 +15,40 @@ type RenderProps = {
   value: string;
 };
 
-type Props = ReactRouter.WithRouterProps & {
-  api: Client;
-  className?: string;
-  /**
-   * URL to make the search request to
-   */
-  url: string;
+type DefaultProps = {
   /**
    * Placeholder text in the search input
    */
-  placeholder?: string;
+  placeholder: string;
   /**
    * Time in milliseconds to wait before firing off the request
    */
-  debounceWait?: number;
-  /**
-   * Updates URL with search query in the URL param: `query`
-   */
-  updateRoute?: boolean;
-
-  onSearchSubmit?: (query: string, event: React.FormEvent) => void;
-  onSuccess: (data: object, jqXHR: JQueryXHR | undefined) => void;
-  onError: () => void;
-
-  /**
-   * A render-prop child may be passed to handle custom rendering of the input.
-   */
-  children?: (otps: RenderProps) => React.ReactNode;
+  debounceWait?: number; // optional, otherwise src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx L:191 is not happy
 };
 
+type Props = ReactRouter.WithRouterProps &
+  DefaultProps & {
+    api: Client;
+    className?: string;
+    /**
+     * URL to make the search request to
+     */
+    url: string;
+    /**
+     * Updates URL with search query in the URL param: `query`
+     */
+    updateRoute?: boolean;
+
+    onSearchSubmit?: (query: string, event: React.FormEvent) => void;
+    onSuccess: (data: object, jqXHR: JQueryXHR | undefined) => void;
+    onError: () => void;
+
+    /**
+     * A render-prop child may be passed to handle custom rendering of the input.
+     */
+    children?: (otps: RenderProps) => React.ReactNode;
+  };
+
 type State = {
   query: string;
   busy: boolean;
@@ -55,8 +60,8 @@ type State = {
  * It probably doesn't make too much sense outside of an AsyncComponent atm.
  */
 class AsyncComponentSearchInput extends React.Component<Props, State> {
-  static defaultProps = {
-    placeholder: 'Search...',
+  static defaultProps: DefaultProps = {
+    placeholder: t('Search...'),
     debounceWait: 200,
   };
 
diff --git a/src/sentry/static/sentry/app/components/betaTag.tsx b/src/sentry/static/sentry/app/components/betaTag.tsx
index 166cbe3515..4c1087e0bf 100644
--- a/src/sentry/static/sentry/app/components/betaTag.tsx
+++ b/src/sentry/static/sentry/app/components/betaTag.tsx
@@ -7,10 +7,12 @@ import space from 'app/styles/space';
 import {t} from 'app/locale';
 
 type Props = {
-  title: string;
+  title?: string;
 };
 
-const BetaTag = ({title}: Props) => (
+const BetaTag = ({
+  title = t('This feature is in beta and may change in the future.'),
+}: Props) => (
   <Tooltip title={title} position="right">
     <StyledTag priority="beta" size="small">
       {t('beta')}
@@ -18,10 +20,6 @@ const BetaTag = ({title}: Props) => (
   </Tooltip>
 );
 
-BetaTag.defaultProps = {
-  title: t('This feature is in beta and may change in the future.'),
-};
-
 const StyledTag = styled(Tag)`
   position: relative;
   top: -1px;
diff --git a/src/sentry/static/sentry/app/components/clipboard.tsx b/src/sentry/static/sentry/app/components/clipboard.tsx
index f69a4aa2ab..66342a6d63 100644
--- a/src/sentry/static/sentry/app/components/clipboard.tsx
+++ b/src/sentry/static/sentry/app/components/clipboard.tsx
@@ -5,15 +5,18 @@ import ReactDOM from 'react-dom';
 
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 
-type Props = {
-  value: string;
+type DefaultProps = {
   successMessage: string;
   errorMessage: string;
-  hideMessages: string;
+  hideMessages: boolean;
+};
+
+type Props = {
+  value: string;
   hideUnsupported?: boolean;
   onSuccess?: () => void;
   onError?: () => void;
-};
+} & DefaultProps;
 
 class Clipboard extends React.Component<Props> {
   static propTypes = {
@@ -30,7 +33,7 @@ class Clipboard extends React.Component<Props> {
     onError: PropTypes.func,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     hideMessages: false,
     successMessage: 'Copied to clipboard',
     errorMessage: 'Error copying to clipboard',
diff --git a/src/sentry/static/sentry/app/components/confirm.tsx b/src/sentry/static/sentry/app/components/confirm.tsx
index bb2be0ad8c..87ba5852fd 100644
--- a/src/sentry/static/sentry/app/components/confirm.tsx
+++ b/src/sentry/static/sentry/app/components/confirm.tsx
@@ -21,34 +21,32 @@ type ChildrenRenderProps = {
   close: () => void;
 };
 
-type Props = {
+const defaultProps = {
   /**
-   * Callback when user confirms
+   * Button priority
    */
-  onConfirm: () => void;
-
+  priority: 'primary' as React.ComponentProps<typeof Button>['priority'],
   /**
-   * Text to show in the confirmation button
+   * Disables the confirm button
    */
-  confirmText: React.ReactNode;
-
+  disableConfirmButton: false,
   /**
    * Text to show in the cancel button
    */
-  cancelText: React.ReactNode;
-
+  cancelText: t('Cancel') as React.ReactNode,
   /**
-   * Button priority
+   * Text to show in the confirmation button
    */
-  priority: React.ComponentProps<typeof Button>['priority'];
+  confirmText: t('Confirm') as React.ReactNode,
+  // Stop event propgation when opening the confirm modal
+  stopPropagation: false,
+};
 
+type Props = {
   /**
-   * Disables the confirm button
+   * Callback when user confirms
    */
-  disableConfirmButton: boolean;
-
-  // Stop event propgation when opening the confirm modal
-  stopPropagation: boolean;
+  onConfirm: () => void;
 
   /**
    * If true, will skip the confirmation modal and call `onConfirm` callback
@@ -93,7 +91,7 @@ type Props = {
    * Header of modal
    */
   header?: React.ReactNode;
-};
+} & typeof defaultProps;
 
 type State = {
   /**
@@ -134,13 +132,7 @@ class Confirm extends React.PureComponent<Props, State> {
     stopPropagation: PropTypes.bool,
   };
 
-  static defaultProps = {
-    priority: 'primary',
-    disableConfirmButton: false,
-    cancelText: t('Cancel'),
-    confirmText: t('Confirm'),
-    stopPropagation: false,
-  };
+  static defaultProps = defaultProps;
 
   state: State = {
     isModalOpen: false,
diff --git a/src/sentry/static/sentry/app/components/dateTime.tsx b/src/sentry/static/sentry/app/components/dateTime.tsx
index 85ee88a6fc..6808c1f536 100644
--- a/src/sentry/static/sentry/app/components/dateTime.tsx
+++ b/src/sentry/static/sentry/app/components/dateTime.tsx
@@ -4,12 +4,15 @@ import moment from 'moment-timezone';
 
 import ConfigStore from 'app/stores/configStore';
 
-type Props = {
+type DefaultProps = {
+  seconds: boolean;
+};
+
+type Props = DefaultProps & {
   date: moment.MomentInput;
   dateOnly?: boolean;
   timeOnly?: boolean;
   shortDate?: boolean;
-  seconds?: boolean;
   utc?: boolean;
 };
 
@@ -23,7 +26,7 @@ class DateTime extends React.Component<Props> {
     utc: PropTypes.bool,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     seconds: true,
   };
 
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.tsx b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
index e880e57835..ab55d1fe35 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.tsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
@@ -47,7 +47,18 @@ type RenderProps = {
   };
 };
 
-type Props = {
+type DefaultProps = {
+  /**
+   * Keeps dropdown menu open when menu is clicked
+   */
+  keepMenuOpen: boolean;
+  /**
+   * closes menu on "Esc" keypress
+   */
+  closeOnEscape: boolean;
+};
+
+type Props = DefaultProps & {
   onOpen?: Function;
   onClose?: Function;
   /**
@@ -66,19 +77,11 @@ type Props = {
    * only follow `isOpen`.
    */
   isOpen?: boolean;
-  /**
-   * Keeps dropdown menu open when menu is clicked
-   */
-  keepMenuOpen?: boolean;
   /**
    * Compatibility for <DropdownLink>
    * This will change where we attach event handlers
    */
   alwaysRenderMenu?: boolean;
-  /**
-   * closes menu on "Esc" keypress
-   */
-  closeOnEscape?: boolean;
   /**
    * If this is set to true, the dropdown behaves as a "nested dropdown" and is
    * triggered on mouse enter and mouse leave
@@ -107,7 +110,7 @@ class DropdownMenu extends React.Component<Props, State> {
     isNestedDropdown: PropTypes.bool,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     keepMenuOpen: false,
     closeOnEscape: true,
   };
diff --git a/src/sentry/static/sentry/app/components/emptyStateWarning.tsx b/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
index d7aabfb213..ba830929b8 100644
--- a/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
+++ b/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
@@ -8,9 +8,10 @@ import EmptyMessage from 'app/views/settings/components/emptyMessage';
 
 type Props = {
   small?: boolean;
+  children: React.ReactNode;
 };
 
-const EmptyStateWarning: React.FC<Props> = ({small, children}) =>
+const EmptyStateWarning = ({small = false, children}: Props) =>
   small ? (
     <EmptyMessage>
       <SmallMessage>
@@ -29,10 +30,6 @@ EmptyStateWarning.propTypes = {
   small: PropTypes.bool,
 };
 
-EmptyStateWarning.defaultProps = {
-  small: false,
-};
-
 const EmptyStreamWrapper = styled('div')`
   text-align: center;
   font-size: 22px;
diff --git a/src/sentry/static/sentry/app/components/errorBoundary.tsx b/src/sentry/static/sentry/app/components/errorBoundary.tsx
index 23f7627fd7..901e7fe148 100644
--- a/src/sentry/static/sentry/app/components/errorBoundary.tsx
+++ b/src/sentry/static/sentry/app/components/errorBoundary.tsx
@@ -8,8 +8,11 @@ import {t} from 'app/locale';
 import Alert from 'app/components/alert';
 import DetailedError from 'app/components/errors/detailedError';
 
-type Props = {
-  mini?: boolean;
+type DefaultProps = {
+  mini: boolean;
+};
+
+type Props = DefaultProps & {
   message?: React.ReactNode;
   customComponent?: React.ReactNode;
   className?: string;
@@ -32,7 +35,7 @@ class ErrorBoundary extends React.Component<Props, State> {
     customComponent: PropTypes.node,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     mini: false,
   };
 
@@ -40,9 +43,6 @@ class ErrorBoundary extends React.Component<Props, State> {
     error: null,
   };
 
-  // XXX: browserHistory.listen does not have a correct return type.
-  unlistenBrowserHistory: any;
-
   componentDidMount() {
     // Listen for route changes so we can clear error
     this.unlistenBrowserHistory = browserHistory.listen(() =>
@@ -64,6 +64,9 @@ class ErrorBoundary extends React.Component<Props, State> {
     }
   }
 
+  // XXX: browserHistory.listen does not have a correct return type.
+  unlistenBrowserHistory: any;
+
   render() {
     const {error} = this.state;
 
diff --git a/src/sentry/static/sentry/app/components/errors/detailedError.tsx b/src/sentry/static/sentry/app/components/errors/detailedError.tsx
index 08e3909f6f..7df2730ee9 100644
--- a/src/sentry/static/sentry/app/components/errors/detailedError.tsx
+++ b/src/sentry/static/sentry/app/components/errors/detailedError.tsx
@@ -7,7 +7,14 @@ import {t} from 'app/locale';
 import InlineSvg from 'app/components/inlineSvg';
 import Button from 'app/components/button';
 
-type Props = {
+type DefaultProps = {
+  /**
+   * Hide support links in footer of error message
+   */
+  hideSupportLinks: boolean;
+};
+
+type Props = DefaultProps & {
   className?: string;
   /**
    * Error heading
@@ -21,10 +28,6 @@ type Props = {
    * Retry callback
    */
   onRetry?: (e: React.MouseEvent) => void;
-  /**
-   * Hide support links in footer of error message
-   */
-  hideSupportLinks?: boolean;
 };
 
 function openFeedback(e: React.MouseEvent) {
@@ -41,7 +44,7 @@ class DetailedError extends React.Component<Props> {
     hideSupportLinks: PropTypes.bool,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     hideSupportLinks: false,
   };
 
diff --git a/src/sentry/static/sentry/app/components/events/eventDataSection.tsx b/src/sentry/static/sentry/app/components/events/eventDataSection.tsx
index d518f9a7cf..bd681385d2 100644
--- a/src/sentry/static/sentry/app/components/events/eventDataSection.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventDataSection.tsx
@@ -17,7 +17,7 @@ type Props = {
   title: React.ReactText;
   type: string;
   toggleRaw?: (enable: boolean) => void;
-} & Partial<DefaultProps>;
+} & DefaultProps;
 
 class EventDataSection extends React.Component<Props> {
   static propTypes = {
diff --git a/src/sentry/static/sentry/app/components/events/eventMessage.tsx b/src/sentry/static/sentry/app/components/events/eventMessage.tsx
index 2cca9cf13d..8446db4746 100644
--- a/src/sentry/static/sentry/app/components/events/eventMessage.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventMessage.tsx
@@ -15,13 +15,13 @@ type Props = {
   className?: string;
 };
 
-const EventMessage: React.FC<Props> = ({
+const EventMessage = ({
   className,
   level,
   levelIndicatorSize,
   message,
   annotations,
-}) => {
+}: Props) => {
   return (
     <div className={className}>
       {level && (
diff --git a/src/sentry/static/sentry/app/components/events/eventTags.tsx b/src/sentry/static/sentry/app/components/events/eventTags.tsx
index 9bec4be25c..bd59ca2936 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.tsx
@@ -15,17 +15,19 @@ import Pill from 'app/components/pill';
 import VersionHoverCard from 'app/components/versionHoverCard';
 import InlineSvg from 'app/components/inlineSvg';
 
-type EventTagsProps = {
+type DefaultProps = {
+  hideGuide: boolean;
+};
+
+type Props = DefaultProps & {
   event: Event;
   orgId: string;
   projectId: string;
-  hideGuide: boolean;
-
   location: Location;
 };
 
-class EventTags extends React.Component<EventTagsProps> {
-  static defaultProps = {
+class EventTags extends React.Component<Props> {
+  static defaultProps: DefaultProps = {
     hideGuide: false,
   };
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx b/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
index bbaf9f7b87..2bbb504eb6 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
@@ -16,13 +16,7 @@ interface Props {
   filePath: string;
 }
 
-const Assembly: React.FC<Props> = ({
-  name,
-  version,
-  culture,
-  publicKeyToken,
-  filePath,
-}) => {
+const Assembly = ({name, version, culture, publicKeyToken, filePath}: Props) => {
   return (
     <AssemblyWrapper>
       <Icon src="icon-return-key" />
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
index 1bc7b7ee6c..48cc218d4a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
@@ -11,7 +11,7 @@ type Props = {
   onShowAllImages: () => void;
 };
 
-const ImageForBar: React.FC<Props> = ({frame, onShowAllImages}) => {
+const ImageForBar = ({frame, onShowAllImages}: Props) => {
   return (
     <Wrapper>
       <MatchedFunctionWrapper>
diff --git a/src/sentry/static/sentry/app/components/globalModal.tsx b/src/sentry/static/sentry/app/components/globalModal.tsx
index 6f5b9f8e7e..d8012f480b 100644
--- a/src/sentry/static/sentry/app/components/globalModal.tsx
+++ b/src/sentry/static/sentry/app/components/globalModal.tsx
@@ -10,10 +10,13 @@ import {closeModal, ModalRenderProps, ModalOptions} from 'app/actionCreators/mod
 import Confirm from 'app/components/confirm';
 import ModalStore from 'app/stores/modalStore';
 
-type Props = {
-  children?: (renderProps: ModalRenderProps) => React.ReactNode;
+type DefaultProps = {
   options: ModalOptions;
   visible: boolean;
+};
+
+type Props = DefaultProps & {
+  children?: (renderProps: ModalRenderProps) => React.ReactNode;
   onClose?: () => void;
 };
 
@@ -43,7 +46,7 @@ class GlobalModal extends React.Component<Props> {
     onClose: PropTypes.func,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     visible: false,
     options: {},
   };
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index 5b265c1e7f..693b85c2b2 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -75,7 +75,7 @@ const PanelWithProtectedBorder = styled(Panel)`
   overflow: hidden;
   z-index: ${Z_INDEX_PANEL};
 `;
-export const Body: React.FC = props => (
+export const Body = props => (
   <PanelWithProtectedBorder>
     <PanelBody>{props.children}</PanelBody>
   </PanelWithProtectedBorder>
@@ -309,7 +309,7 @@ const GridStatusFloat = styled('div')`
   z-index: ${Z_INDEX_GRID_STATUS};
   background: ${p => p.theme.white};
 `;
-export const GridBodyCellStatus: React.FC = props => (
+export const GridBodyCellStatus = props => (
   <GridStatusWrapper>
     <GridStatusFloat>{props.children}</GridStatusFloat>
   </GridStatusWrapper>
diff --git a/src/sentry/static/sentry/app/components/idBadge/memberBadge.tsx b/src/sentry/static/sentry/app/components/idBadge/memberBadge.tsx
index 473840321e..69f0476c7e 100644
--- a/src/sentry/static/sentry/app/components/idBadge/memberBadge.tsx
+++ b/src/sentry/static/sentry/app/components/idBadge/memberBadge.tsx
@@ -9,11 +9,6 @@ import space from 'app/styles/space';
 import SentryTypes from 'app/sentryTypes';
 import omit from 'lodash/omit';
 
-const defaultProps = {
-  useLink: true,
-  hideEmail: false,
-};
-
 type Props = {
   avatarSize: UserAvatar['props']['size'];
   member: Member;
@@ -21,7 +16,9 @@ type Props = {
   displayName?: string;
   displayEmail?: string;
   orgId?: string;
-} & Partial<typeof defaultProps>;
+  useLink?: boolean;
+  hideEmail?: boolean;
+};
 
 function getUser(member: Member): AvatarUser {
   if (member.user) {
@@ -44,8 +41,8 @@ const MemberBadge = ({
   member,
   orgId,
   avatarSize,
-  useLink,
-  hideEmail,
+  useLink = true,
+  hideEmail = false,
 }: Props) => {
   const user = getUser(member);
   const title =
@@ -88,8 +85,6 @@ MemberBadge.propTypes = {
   hideEmail: PropTypes.bool,
 };
 
-MemberBadge.defaultProps = defaultProps;
-
 const StyledUserBadge = styled('div')`
   display: flex;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.tsx b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.tsx
index a0776eecc5..1bbcbcdd20 100644
--- a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.tsx
+++ b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.tsx
@@ -8,15 +8,18 @@ import {Organization} from 'app/types';
 import OrganizationAvatar from 'app/components/avatar/organizationAvatar';
 import withOrganization from 'app/utils/withOrganization';
 
-type Props = {
+type DefaultProps = {
+  avatarSize: OrganizationAvatar['props']['size'];
+  // If true, will use default max-width, or specify one as a string
+  hideOverflow: boolean | string;
+  hideAvatar: boolean;
+};
+
+type Props = DefaultProps & {
   // A full organization is not used, but required to satisfy types with
   // withOrganization()
   organization: Organization;
   className?: string;
-  avatarSize?: OrganizationAvatar['props']['size'];
-  // If true, will use default max-width, or specify one as a string
-  hideOverflow?: boolean | string;
-  hideAvatar?: boolean;
 };
 
 class OrganizationBadge extends React.Component<Props> {
@@ -28,7 +31,7 @@ class OrganizationBadge extends React.Component<Props> {
     hideAvatar: PropTypes.bool,
   };
 
-  static defaultProps: Partial<Props> = {
+  static defaultProps: DefaultProps = {
     avatarSize: 24,
     hideAvatar: false,
     hideOverflow: true,
diff --git a/src/sentry/static/sentry/app/components/idBadge/teamBadge.tsx b/src/sentry/static/sentry/app/components/idBadge/teamBadge.tsx
index 6293f054c8..56a24cbfb6 100644
--- a/src/sentry/static/sentry/app/components/idBadge/teamBadge.tsx
+++ b/src/sentry/static/sentry/app/components/idBadge/teamBadge.tsx
@@ -11,13 +11,16 @@ import SentryTypes from 'app/sentryTypes';
 import TeamStore from 'app/stores/teamStore';
 import {Team} from 'app/types';
 
-type Props = {
+type DefaultProps = {
+  avatarSize: TeamAvatar['props']['size'];
+  // If true, will use default max-width, or specify one as a string
+  hideOverflow: boolean | string;
+  hideAvatar: boolean;
+};
+
+type Props = DefaultProps & {
   team: Team;
   className?: string;
-  avatarSize?: TeamAvatar['props']['size'];
-  // If true, will use default max-width, or specify one as a string
-  hideOverflow?: boolean | string;
-  hideAvatar?: boolean;
 };
 
 class TeamBadge extends React.Component<Props> {
@@ -29,7 +32,7 @@ class TeamBadge extends React.Component<Props> {
     hideAvatar: PropTypes.bool,
   };
 
-  static defaultProps: Partial<Props> = {
+  static defaultProps: DefaultProps = {
     avatarSize: 24,
     hideOverflow: true,
     hideAvatar: false,
diff --git a/src/sentry/static/sentry/app/components/idBadge/userBadge.tsx b/src/sentry/static/sentry/app/components/idBadge/userBadge.tsx
index 4f0dc29175..609ceb702d 100644
--- a/src/sentry/static/sentry/app/components/idBadge/userBadge.tsx
+++ b/src/sentry/static/sentry/app/components/idBadge/userBadge.tsx
@@ -7,24 +7,21 @@ import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 import SentryTypes from 'app/sentryTypes';
 
-const defaultProps = {
-  hideEmail: false,
-};
-
 type Props = {
   avatarSize: UserAvatar['props']['size'];
   className?: string;
   displayName?: string;
   displayEmail?: string;
   user?: AvatarUser;
-} & Partial<typeof defaultProps>;
+  hideEmail?: boolean;
+};
 
 const UserBadge = ({
   className,
   displayName,
   displayEmail,
   avatarSize,
-  hideEmail,
+  hideEmail = false,
   user,
 }: Props) => {
   const title =
@@ -61,8 +58,6 @@ UserBadge.propTypes = {
   hideEmail: PropTypes.bool,
 };
 
-UserBadge.defaultProps = defaultProps;
-
 const StyledUserBadge = styled('div')`
   display: flex;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/components/links/listLink.tsx b/src/sentry/static/sentry/app/components/links/listLink.tsx
index b5ed81442d..9c0d44c18e 100644
--- a/src/sentry/static/sentry/app/components/links/listLink.tsx
+++ b/src/sentry/static/sentry/app/components/links/listLink.tsx
@@ -5,10 +5,13 @@ import {Link} from 'react-router';
 import classNames from 'classnames';
 import {LocationDescriptor} from 'history';
 
-type Props = {
-  to: LocationDescriptor;
+type DefaultProps = {
   index: boolean;
   activeClassName: string;
+};
+
+type Props = DefaultProps & {
+  to: LocationDescriptor;
   className?: string;
   query?: string;
   onClick?: () => void;
@@ -25,7 +28,7 @@ class ListLink extends React.Component<Props> {
     router: PropTypes.object.isRequired,
   };
 
-  static defaultProps: Partial<Props> = {
+  static defaultProps: DefaultProps = {
     activeClassName: 'active',
     index: false,
   };
diff --git a/src/sentry/static/sentry/app/components/loadingError.tsx b/src/sentry/static/sentry/app/components/loadingError.tsx
index 19440f1b07..5dde42f5d1 100644
--- a/src/sentry/static/sentry/app/components/loadingError.tsx
+++ b/src/sentry/static/sentry/app/components/loadingError.tsx
@@ -2,9 +2,12 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {t} from 'app/locale';
 
-type Props = {
+type DefaultProps = {
+  message: React.ReactNode;
+};
+
+type Props = DefaultProps & {
   onRetry?: () => void;
-  message?: React.ReactNode;
 };
 class LoadingError extends React.Component<Props> {
   static propTypes = {
@@ -12,7 +15,7 @@ class LoadingError extends React.Component<Props> {
     message: PropTypes.string,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     message: t('There was an error loading data.'),
   };
 
diff --git a/src/sentry/static/sentry/app/components/organizations/headerItem.tsx b/src/sentry/static/sentry/app/components/organizations/headerItem.tsx
index a07cd2cdc6..c12f0c45d9 100644
--- a/src/sentry/static/sentry/app/components/organizations/headerItem.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/headerItem.tsx
@@ -9,11 +9,14 @@ import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 
+type DefaultProps = {
+  allowClear: boolean;
+};
+
 type Props = {
   icon: React.ReactElement;
   lockedMessage: string;
   settingsLink: string;
-  allowClear: boolean;
   hasChanges: boolean;
   hasSelected: boolean;
   isOpen: boolean;
@@ -21,11 +24,11 @@ type Props = {
   loading: boolean;
   forwardRef?: React.Ref<HTMLDivElement>;
   onClear: () => void;
-} & React.HTMLAttributes<HTMLDivElement>;
+} & DefaultProps &
+  React.HTMLAttributes<HTMLDivElement>;
 
 class HeaderItem extends React.Component<Props> {
   static propTypes = {
-    allowClear: PropTypes.bool,
     icon: PropTypes.element,
     onClear: PropTypes.func,
     hasChanges: PropTypes.bool,
@@ -36,7 +39,7 @@ class HeaderItem extends React.Component<Props> {
     settingsLink: PropTypes.string,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     allowClear: true,
   };
 
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleSelectorSubmitRow.tsx b/src/sentry/static/sentry/app/components/organizations/multipleSelectorSubmitRow.tsx
index 1e5bb7b1ab..8dae7fbde4 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleSelectorSubmitRow.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleSelectorSubmitRow.tsx
@@ -10,7 +10,7 @@ type Props = {
   onSubmit: () => void;
 };
 
-const MultipleSelectorSubmitRow: React.FC<Props> = ({onSubmit}) => {
+const MultipleSelectorSubmitRow = ({onSubmit}: Props) => {
   return (
     <SubmitButtonContainer>
       <SubmitButton onClick={onSubmit} size="xsmall" priority="primary">
diff --git a/src/sentry/static/sentry/app/components/pagination.tsx b/src/sentry/static/sentry/app/components/pagination.tsx
index 87246df31c..e6ac3500f4 100644
--- a/src/sentry/static/sentry/app/components/pagination.tsx
+++ b/src/sentry/static/sentry/app/components/pagination.tsx
@@ -23,7 +23,7 @@ type Props = {
   className?: string;
   pageLinks: string | null | undefined;
   to?: string;
-} & Partial<DefaultProps>;
+} & DefaultProps;
 
 class Pagination extends React.Component<Props> {
   static propTypes = {
diff --git a/src/sentry/static/sentry/app/components/platformIcon.tsx b/src/sentry/static/sentry/app/components/platformIcon.tsx
index a7adb4e3cf..ce62e36998 100644
--- a/src/sentry/static/sentry/app/components/platformIcon.tsx
+++ b/src/sentry/static/sentry/app/components/platformIcon.tsx
@@ -70,7 +70,7 @@ type Props = {
   height?: string;
 };
 
-const PlatformIcon: React.FC<Props> = ({platform, size, width, height, ...props}) => {
+const PlatformIcon = ({platform, size, width, height, ...props}: Props) => {
   const icon = getIcon(platform);
 
   return (
diff --git a/src/sentry/static/sentry/app/components/previewFeature.tsx b/src/sentry/static/sentry/app/components/previewFeature.tsx
index 2bb3fadb2e..b5c0b877f4 100644
--- a/src/sentry/static/sentry/app/components/previewFeature.tsx
+++ b/src/sentry/static/sentry/app/components/previewFeature.tsx
@@ -8,7 +8,7 @@ type Props = {
   type?: AlertProps['type'];
 };
 
-const PreviewFeature: React.FC<Props> = ({type = 'info'}) => {
+const PreviewFeature = ({type = 'info'}: Props) => {
   return (
     <Alert type={type} icon="icon-labs">
       {t(
diff --git a/src/sentry/static/sentry/app/components/projects/bookmarkStar.tsx b/src/sentry/static/sentry/app/components/projects/bookmarkStar.tsx
index 991cd0a349..6dcaac7af8 100644
--- a/src/sentry/static/sentry/app/components/projects/bookmarkStar.tsx
+++ b/src/sentry/static/sentry/app/components/projects/bookmarkStar.tsx
@@ -22,14 +22,14 @@ type Props = {
   onToggle?: (isBookmarked: boolean) => void;
 };
 
-const BookmarkStar: React.FC<Props> = ({
+const BookmarkStar = ({
   api,
   isBookmarked: isBookmarkedProp,
   className,
   organization,
   project,
   onToggle,
-}) => {
+}: Props) => {
   const isBookmarked = defined(isBookmarkedProp)
     ? isBookmarkedProp
     : project.isBookmarked;
diff --git a/src/sentry/static/sentry/app/components/queryCount.tsx b/src/sentry/static/sentry/app/components/queryCount.tsx
index 58ee07c5eb..0d592a308e 100644
--- a/src/sentry/static/sentry/app/components/queryCount.tsx
+++ b/src/sentry/static/sentry/app/components/queryCount.tsx
@@ -19,13 +19,13 @@ type Props = {
  * Render nothing by default if `count` is falsy.
  */
 
-const QueryCount: React.FC<Props> = ({
+const QueryCount = ({
   className,
   count,
   max,
   hideIfEmpty = true,
   inline = true,
-}) => {
+}: Props) => {
   const countOrMax = defined(count) && defined(max) && count >= max ? `${max}+` : count;
   const cx = classNames('query-count', className, {
     inline,
diff --git a/src/sentry/static/sentry/app/components/radio.tsx b/src/sentry/static/sentry/app/components/radio.tsx
index 3bd24503db..81d1669edb 100644
--- a/src/sentry/static/sentry/app/components/radio.tsx
+++ b/src/sentry/static/sentry/app/components/radio.tsx
@@ -1,8 +1,12 @@
 import React from 'react';
 import classNames from 'classnames';
 
-class Radio extends React.Component<React.HTMLProps<HTMLInputElement>> {
-  static defaultProps = {
+type DefaultProps = {
+  checked: boolean;
+};
+
+class Radio extends React.Component<React.HTMLProps<HTMLInputElement> & DefaultProps> {
+  static defaultProps: DefaultProps = {
     checked: false,
   };
 
diff --git a/src/sentry/static/sentry/app/components/repositoryRow.tsx b/src/sentry/static/sentry/app/components/repositoryRow.tsx
index bbb8e2c70a..83d52b4058 100644
--- a/src/sentry/static/sentry/app/components/repositoryRow.tsx
+++ b/src/sentry/static/sentry/app/components/repositoryRow.tsx
@@ -11,16 +11,19 @@ import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import space from 'app/styles/space';
 
-type Props = {
+type DefaultProps = {
+  showProvider?: boolean;
+};
+
+type Props = DefaultProps & {
   repository: Repository;
   api: Client;
   orgId: string;
-  showProvider?: boolean;
   onRepositoryChange?: (data: {id: string; status: RepositoryStatus}) => void;
 };
 
 class RepositoryRow extends React.Component<Props> {
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     showProvider: false,
   };
 
diff --git a/src/sentry/static/sentry/app/components/searchBar.tsx b/src/sentry/static/sentry/app/components/searchBar.tsx
index 8a8e8cb887..4a7b71e190 100644
--- a/src/sentry/static/sentry/app/components/searchBar.tsx
+++ b/src/sentry/static/sentry/app/components/searchBar.tsx
@@ -1,10 +1,13 @@
 import React from 'react';
 import classNames from 'classnames';
 
-type Props = {
+type DefaultProps = {
   query: string;
   defaultQuery: string;
   onSearch: (query: string) => void;
+};
+
+type Props = DefaultProps & {
   placeholder?: string;
   className?: string;
 };
@@ -15,7 +18,7 @@ type State = {
 };
 
 class SearchBar extends React.PureComponent<Props, State> {
-  static defaultProps: Partial<Props> = {
+  static defaultProps: DefaultProps = {
     query: '',
     defaultQuery: '',
     onSearch: function() {},
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.tsx b/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.tsx
index 74325ae228..4413d64a0a 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.tsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.tsx
@@ -11,7 +11,7 @@ type Props = {
   organization: Organization;
 };
 
-const SidebarOrgSummary: React.FC<Props> = ({organization}) => {
+const SidebarOrgSummary = ({organization}: Props) => {
   const projects = organization.projects && organization.projects.length;
   const extra: string[] = [];
 
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarPanelItem.tsx b/src/sentry/static/sentry/app/components/sidebar/sidebarPanelItem.tsx
index 7e275841c8..e259207ef5 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarPanelItem.tsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarPanelItem.tsx
@@ -14,14 +14,7 @@ type Props = {
   cta?: string;
 };
 
-const SidebarPanelItem: React.FC<Props> = ({
-  hasSeen,
-  title,
-  image,
-  message,
-  link,
-  cta,
-}) => (
+const SidebarPanelItem = ({hasSeen, title, image, message, link, cta}: Props) => (
   <SidebarPanelItemRoot>
     {title && <Title hasSeen={hasSeen}>{title}</Title>}
     {image && (
diff --git a/src/sentry/static/sentry/app/components/spreadLayout.tsx b/src/sentry/static/sentry/app/components/spreadLayout.tsx
index d143ff3894..0d9e4cd4ea 100644
--- a/src/sentry/static/sentry/app/components/spreadLayout.tsx
+++ b/src/sentry/static/sentry/app/components/spreadLayout.tsx
@@ -11,13 +11,13 @@ type Props = React.HTMLAttributes<HTMLDivElement> & {
 //
 // Intended for children.length === 2
 // "responsive" will change flex-direction to be column on small widths
-const SpreadLayout: React.FC<Props> = ({
+const SpreadLayout = ({
   responsive = false,
   center = true,
   children,
   className,
   ...props
-}) => {
+}: Props) => {
   const cx = classNames('spread-layout', className, {
     center,
     'allow-responsive': responsive,
diff --git a/src/sentry/static/sentry/app/components/switch.tsx b/src/sentry/static/sentry/app/components/switch.tsx
index 3574eb132b..a44a0fb07e 100644
--- a/src/sentry/static/sentry/app/components/switch.tsx
+++ b/src/sentry/static/sentry/app/components/switch.tsx
@@ -13,16 +13,16 @@ type Props = {
   toggle: React.HTMLProps<HTMLButtonElement>['onClick'];
 };
 
-const Switch: React.FC<Props> = ({
+const Switch = ({
   forwardRef,
-  size,
+  size = 'sm',
   isActive,
   isLoading,
   isDisabled,
   toggle,
   id,
   className,
-}) => (
+}: Props) => (
   <SwitchButton
     ref={forwardRef}
     id={id}
@@ -51,10 +51,6 @@ Switch.propTypes = {
   toggle: PropTypes.func.isRequired,
 };
 
-Switch.defaultProps = {
-  size: 'sm',
-};
-
 type StyleProps = Partial<Props>;
 
 const getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);
diff --git a/src/sentry/static/sentry/app/components/timeSince.tsx b/src/sentry/static/sentry/app/components/timeSince.tsx
index d3ae2b9fb7..3db2b3f382 100644
--- a/src/sentry/static/sentry/app/components/timeSince.tsx
+++ b/src/sentry/static/sentry/app/components/timeSince.tsx
@@ -11,19 +11,19 @@ const ONE_MINUTE_IN_MS = 60000;
 
 type RelaxedDateType = string | number | Date;
 
-type Props = {
-  /**
-   * The date value, can be string, number (e.g. timestamp), or instance of Date
-   */
-  date: RelaxedDateType;
-
+type DefaultProps = {
   /**
    * Suffix after elapsed time
    * e.g. "ago" in "5 minutes ago"
    */
+  suffix: string;
+};
 
-  // TODO(ts): This should be "required", but emotion doesn't seem to like its defaultProps
-  suffix?: string;
+type Props = DefaultProps & {
+  /**
+   * The date value, can be string, number (e.g. timestamp), or instance of Date
+   */
+  date: RelaxedDateType;
 
   className?: string;
 };
@@ -38,7 +38,7 @@ class TimeSince extends React.PureComponent<Props, State> {
     suffix: PropTypes.string,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     suffix: 'ago',
   };
 
diff --git a/src/sentry/static/sentry/app/components/tooltip.tsx b/src/sentry/static/sentry/app/components/tooltip.tsx
index 55e35d2bec..31021814e9 100644
--- a/src/sentry/static/sentry/app/components/tooltip.tsx
+++ b/src/sentry/static/sentry/app/components/tooltip.tsx
@@ -9,13 +9,16 @@ import {domId} from 'app/utils/domId';
 
 const IS_HOVERABLE_DELAY = 50; // used if isHoverable is true (for hiding AND showing)
 
-type Props = {
+type DefaultProps = {
+  position: PopperJS.Placement;
+  containerDisplayMode: React.CSSProperties['display'];
+};
+
+type Props = DefaultProps & {
   children: React.ReactElement;
   disabled?: boolean;
   title: React.ReactNode;
-  position: PopperJS.Placement;
   popperStyle?: React.CSSProperties;
-  containerDisplayMode?: React.CSSProperties['display'];
   delay?: number;
   isHoverable?: boolean;
 };
@@ -87,7 +90,7 @@ class Tooltip extends React.Component<Props, State> {
     isHoverable: PropTypes.bool,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     position: 'top',
     containerDisplayMode: 'inline-block',
   };
diff --git a/src/sentry/static/sentry/app/components/truncate.tsx b/src/sentry/static/sentry/app/components/truncate.tsx
index c34b6e5a02..3aa533509b 100644
--- a/src/sentry/static/sentry/app/components/truncate.tsx
+++ b/src/sentry/static/sentry/app/components/truncate.tsx
@@ -1,10 +1,13 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 
-type Props = {
-  value: string;
+type DefaultProps = {
   maxLength: number;
   leftTrim: boolean;
+};
+
+type Props = DefaultProps & {
+  value: string;
   className?: string;
 };
 
@@ -19,7 +22,7 @@ class Truncate extends React.Component<Props, State> {
     maxLength: PropTypes.number,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     maxLength: 50,
     leftTrim: false,
   };
diff --git a/src/sentry/static/sentry/app/components/version.tsx b/src/sentry/static/sentry/app/components/version.tsx
index 8a1dbf3d46..47850665b0 100644
--- a/src/sentry/static/sentry/app/components/version.tsx
+++ b/src/sentry/static/sentry/app/components/version.tsx
@@ -4,10 +4,13 @@ import React from 'react';
 import GlobalSelectionLink from 'app/components/globalSelectionLink';
 import Link from 'app/components/links/link';
 
-type Props = {
+type DefaultProps = {
+  anchor: boolean;
+};
+
+type Props = DefaultProps & {
   version: string;
   orgId: string;
-  anchor?: boolean;
   preserveGlobalSelection?: boolean;
   className?: string;
 };
@@ -24,7 +27,7 @@ export default class Version extends React.Component<Props> {
     preserveGlobalSelection: PropTypes.bool,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     anchor: true,
   };
 
diff --git a/src/sentry/static/sentry/app/plugins/components/pluginIcon.tsx b/src/sentry/static/sentry/app/plugins/components/pluginIcon.tsx
index d9d8b95d0d..5be73d2ee7 100644
--- a/src/sentry/static/sentry/app/plugins/components/pluginIcon.tsx
+++ b/src/sentry/static/sentry/app/plugins/components/pluginIcon.tsx
@@ -80,7 +80,7 @@ export const ICON_PATHS = {
 
 type Props = {
   pluginId?: string;
-  size: number;
+  size?: number;
 };
 
 const PluginIcon = styled('div')<Props>`
@@ -106,7 +106,7 @@ PluginIcon.defaultProps = {
 
 PluginIcon.propTypes = {
   pluginId: PropTypes.string,
-  size: PropTypes.number.isRequired,
+  size: PropTypes.number,
 };
 
 export default PluginIcon;
diff --git a/src/sentry/static/sentry/app/views/alerts/status.tsx b/src/sentry/static/sentry/app/views/alerts/status.tsx
index a7620a158e..2e34351854 100644
--- a/src/sentry/static/sentry/app/views/alerts/status.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/status.tsx
@@ -13,7 +13,7 @@ type Props = {
   isSmall?: boolean;
 };
 
-const Status: React.FC<Props> = ({className, incident, isSmall}: Props) => {
+const Status = ({className, incident, isSmall}: Props) => {
   const isIncidentOpen = incident.status !== IncidentStatus.CLOSED;
 
   // TODO(incidents): Make this work
diff --git a/src/sentry/static/sentry/app/views/discover/discover.tsx b/src/sentry/static/sentry/app/views/discover/discover.tsx
index 0728bb0291..7e0d286aa6 100644
--- a/src/sentry/static/sentry/app/views/discover/discover.tsx
+++ b/src/sentry/static/sentry/app/views/discover/discover.tsx
@@ -47,7 +47,11 @@ import createResultManager from './resultManager';
 
 import {SavedQuery} from './types';
 
-type Props = {
+type DefaultProps = {
+  utc: boolean;
+};
+
+type Props = DefaultProps & {
   organization: Organization;
   location: any;
   params: any;
@@ -59,7 +63,6 @@ type Props = {
   view: string;
   toggleEditMode: () => void;
   isLoading: boolean;
-  utc: boolean;
 };
 
 type State = {
@@ -72,7 +75,7 @@ type State = {
 };
 
 export default class Discover extends React.Component<Props, State> {
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     utc: true,
   };
 
diff --git a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
index 81e471dbf4..1d9f87b39a 100644
--- a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
@@ -29,23 +29,24 @@ type RenderProps = {
   timeAggregatedData?: Series | {};
 };
 
+type DefaultProps = {
+  period: any;
+  start: any;
+  end: any;
+  interval: string;
+  limit: number;
+  query: string;
+  includePrevious: boolean;
+  includeTransformedData: boolean;
+};
+
 type EventsRequestPartialProps = {
   api: Client;
   organization: Organization;
-
   project?: number[];
   environment?: string[];
-  period?: string;
-  start?: any;
-  end?: any;
-  interval?: string;
   field?: string[];
   referenceEvent?: string;
-
-  limit?: number;
-  query?: string;
-  includePrevious?: boolean;
-  includeTransformedData?: boolean;
   loading?: boolean;
   showLoading?: boolean;
   yAxis?: string;
@@ -56,7 +57,7 @@ type TimeAggregationProps =
   | {includeTimeAggregation: true; timeAggregationSeriesName: string}
   | {includeTimeAggregation?: false; timeAggregationSeriesName?: undefined};
 
-type EventsRequestProps = TimeAggregationProps & EventsRequestPartialProps;
+type EventsRequestProps = DefaultProps & TimeAggregationProps & EventsRequestPartialProps;
 
 type EventsRequestState = {
   reloading: boolean;
@@ -162,7 +163,7 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
     referenceEvent: PropTypes.string,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     period: null,
     start: null,
     end: null,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
index 2a20e7e739..b1fd1de4a5 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
@@ -11,15 +11,18 @@ import space from 'app/styles/space';
 import EventView from './eventView';
 import {getDiscoverLandingUrl} from './utils';
 
-type Props = {
-  eventView: EventView;
+type DefaultProps = {
   event: Event | undefined;
+};
+
+type Props = DefaultProps & {
+  eventView: EventView;
   organization: Organization;
   location: Location;
 };
 
 class DiscoverBreadcrumb extends React.Component<Props> {
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     event: undefined,
   };
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index 403253acfb..5fc9a2220c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -19,7 +19,11 @@ import EventView from '../eventView';
 import {getDiscoverLandingUrl} from '../utils';
 import {handleCreateQuery, handleUpdateQuery, handleDeleteQuery} from './utils';
 
-type Props = {
+type DefaultProps = {
+  disabled: boolean;
+};
+
+type Props = DefaultProps & {
   api: Client;
 
   /**
@@ -34,7 +38,6 @@ type Props = {
   eventView: EventView;
   savedQuery: SavedQuery | undefined;
   savedQueryLoading: boolean;
-  disabled?: boolean;
 };
 
 type State = {
@@ -100,7 +103,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     }
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     disabled: false,
   };
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.tsx
index 62f310c849..6f5960a59a 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.tsx
@@ -7,7 +7,7 @@ import {Integration} from 'app/types';
 
 type Props = {
   integration: Integration;
-  size: number;
+  size?: number;
 };
 
 type IconProps = Pick<Props, 'size'>;
@@ -39,7 +39,7 @@ class Icon extends React.Component<Props> {
   }
 }
 
-const IntegrationIcon = ({integration, size}: Props) =>
+const IntegrationIcon = ({integration, size = 32}: Props) =>
   integration.icon ? (
     <Icon size={size} integration={integration} />
   ) : (
@@ -51,8 +51,4 @@ IntegrationIcon.propTypes = {
   size: PropTypes.number,
 };
 
-IntegrationIcon.defaultProps = {
-  size: 32,
-};
-
 export default IntegrationIcon;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
index c22070f639..28db41c82d 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
@@ -9,9 +9,12 @@ import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
 import {Integration} from 'app/types';
 
-type Props = {
+type DefaultProps = {
+  compact: boolean;
+};
+
+type Props = DefaultProps & {
   integration: Integration;
-  compact?: boolean;
 };
 export default class IntegrationItem extends React.Component<Props> {
   static propTypes = {
@@ -19,7 +22,7 @@ export default class IntegrationItem extends React.Component<Props> {
     compact: PropTypes.bool,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     compact: false,
   };
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
index 75446b83ad..72343aa7f1 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
@@ -19,7 +19,11 @@ import space from 'app/styles/space';
 import {growDown, highlight} from 'app/styles/animations';
 import {IntegrationProvider, Integration} from 'app/types';
 
-type Props = {
+type DefaultProps = {
+  enabledPlugins: string[];
+};
+
+type Props = DefaultProps & {
   provider: IntegrationProvider;
   orgId: string;
   onInstall: (integration: Integration) => void;
@@ -27,16 +31,11 @@ type Props = {
   onDisable: (integration: Integration) => void;
   onReinstall: (integration: Integration) => void;
   onCloseModal?: () => void;
-  enabledPlugins: string[];
   newlyInstalledIntegrationId: string;
   integrations: Integration[];
 };
 
 export default class ProviderRow extends React.Component<Props> {
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-  };
-
   static propTypes = {
     provider: PropTypes.object.isRequired,
     integrations: PropTypes.array.isRequired,
@@ -50,7 +49,11 @@ export default class ProviderRow extends React.Component<Props> {
     onCloseModal: PropTypes.func,
   };
 
-  static defaultProps = {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  static defaultProps: DefaultProps = {
     enabledPlugins: [],
   };
 
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableHead.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableHead.tsx
index 7c40330006..9e5e46c291 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableHead.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableHead.tsx
@@ -11,7 +11,7 @@ import {
   ChartColumn,
 } from 'app/views/releasesV2/list/commonLayout';
 
-const ReleasesV2TableHead: React.FC = () => {
+const ReleasesV2TableHead = () => {
   return (
     <Layout>
       <Column />
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableRow.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableRow.tsx
index f71d625c67..4de9f02476 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableRow.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releasesV2TableRow.tsx
@@ -22,7 +22,7 @@ type Props = ReleasesV2RowData & {
   organizationId: string;
 };
 
-const ReleasesV2TableRow: React.FC<Props> = ({
+const ReleasesV2TableRow = ({
   release,
   crashFreeUsersPercent,
   graphData,
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
index 5f13fa5741..8378053b88 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
@@ -5,16 +5,19 @@ import LazyLoad from 'react-lazyload';
 import {t} from 'app/locale';
 import BarChart from 'app/components/barChart';
 
-type Props = {
+type DefaultProps = {
+  height: number;
+};
+
+type Props = DefaultProps & {
   statsPeriod: '24h' | '14d';
   data: {
     [statsPeriod: string]: [number, number][];
   };
-  height?: number;
 };
 
 class UsersChart extends React.Component<Props> {
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     height: 24,
   };
 
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/version.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/version.tsx
index 498906c535..53bb2ffc68 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/version.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/version.tsx
@@ -4,10 +4,13 @@ import React from 'react';
 import GlobalSelectionLink from 'app/components/globalSelectionLink';
 import Link from 'app/components/links/link';
 
-type Props = {
+type DefaultProps = {
+  anchor: boolean;
+};
+
+type Props = DefaultProps & {
   version: string;
   orgId: string;
-  anchor?: boolean;
   preserveGlobalSelection?: boolean;
   className?: string;
 };
@@ -24,7 +27,7 @@ export default class Version extends React.Component<Props> {
     preserveGlobalSelection: PropTypes.bool,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     anchor: true,
   };
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
index 6241fb82f7..e04f220b08 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
@@ -16,14 +16,7 @@ type Props = {
   onChange: (id: string, e: React.MouseEvent) => void;
 };
 
-const RadioGroup: React.FC<Props> = ({
-  value,
-  disabled,
-  choices,
-  label,
-  onChange,
-  ...props
-}) => {
+const RadioGroup = ({value, disabled, choices, label, onChange, ...props}: Props) => {
   return (
     <div {...props} role="radiogroup" aria-labelledby={label}>
       {(choices || []).map(([id, name, description], index) => {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
index c6f6eb4802..ed426d37df 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
@@ -11,7 +11,7 @@ const defaultProps = {
   flexibleControlStateSize: false,
 };
 
-type Props = Partial<typeof defaultProps> & {
+type Props = typeof defaultProps & {
   inline?: boolean;
   alignRight?: boolean;
   disabled?: boolean;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
index bc68b8769f..9d8cd54a63 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
@@ -11,6 +11,10 @@ import {FieldObject, JsonFormObject} from './type';
 import FieldFromConfig from './fieldFromConfig';
 import FormPanel from './formPanel';
 
+type DefaultProps = {
+  additionalFieldProps: {[key: string]: any};
+};
+
 type Props = {
   /**
    * Fields that are grouped by "section"
@@ -23,7 +27,11 @@ type Props = {
    */
   fields?: FieldObject[];
   location?: Location;
-} & Omit<React.ComponentProps<typeof FormPanel>, 'highlighted' | 'fields'>;
+} & DefaultProps &
+  Omit<
+    React.ComponentProps<typeof FormPanel>,
+    'highlighted' | 'fields' | 'additionalFieldProps'
+  >;
 
 type Context = {
   location?: Location;
@@ -73,14 +81,14 @@ class JsonForm extends React.Component<Props, State> {
     disabled: PropTypes.bool,
   };
 
-  static defaultProps = {
-    additionalFieldProps: {},
-  };
-
   static contextTypes = {
     location: PropTypes.object,
   };
 
+  static defaultProps: DefaultProps = {
+    additionalFieldProps: {},
+  };
+
   state: State = {
     highlighted: getLocation(this.props, this.context).hash,
   };
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
index 8c99099761..eb04e1cf6e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
@@ -24,7 +24,7 @@ type Props = {
   name?: string;
   columnLabels: object;
   columnKeys: string[];
-} & Partial<DefaultProps> &
+} & DefaultProps &
   InputField['props'];
 
 export default class TableField extends React.Component<Props> {
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.tsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.tsx
index 7de520bd2f..ef26a3629a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.tsx
@@ -4,11 +4,7 @@ import React from 'react';
 import SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';
 import {NavigationSection, NavigationProps} from 'app/views/settings/types';
 
-type Props = NavigationProps & {
-  /**
-   * The configuration for this navigation panel
-   */
-  navigationObjects: NavigationSection[];
+type DefaultProps = {
   /**
    * Additional navigation configuration driven by hooks
    */
@@ -19,8 +15,16 @@ type Props = NavigationProps & {
   hooks: React.ReactElement[];
 };
 
+type Props = DefaultProps &
+  NavigationProps & {
+    /**
+     * The configuration for this navigation panel
+     */
+    navigationObjects: NavigationSection[];
+  };
+
 class SettingsNavigation extends React.Component<Props> {
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     hooks: [],
     hookConfigs: [],
   };
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/index.tsx
index 8590789a2c..4b0a7aa117 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/index.tsx
@@ -2,7 +2,11 @@ import React from 'react';
 
 import Feature from 'app/components/acl/feature';
 
-const IncidentRules: React.FC = ({children}) => (
+type Props = {
+  children: React.ReactNode;
+};
+
+const IncidentRules = ({children}: Props) => (
   <Feature features={['incidents']} renderDisabled>
     {children}
   </Feature>
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/thresholdsChart.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/thresholdsChart.tsx
index 93a3693840..40e576ceca 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/thresholdsChart.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/thresholdsChart.tsx
@@ -12,9 +12,12 @@ import theme from 'app/utils/theme';
 
 import {Trigger, AlertRuleThresholdType} from '../../types';
 
-type Props = {
-  xAxis: EChartOption.XAxis;
+type DefaultProps = {
   data: Series[];
+};
+
+type Props = DefaultProps & {
+  xAxis: EChartOption.XAxis;
   triggers: Trigger[];
   maxValue?: number;
 };
@@ -53,7 +56,7 @@ const COLOR = {
  * Metric Alert rule.
  */
 export default class ThresholdsChart extends React.PureComponent<Props, State> {
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     data: [],
   };
 
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
index 046784c646..e92c34422b 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
@@ -23,11 +23,7 @@ type DeleteButtonProps = {
 /**
  * Button to delete a trigger
  */
-const DeleteButton: React.FC<DeleteButtonProps> = ({
-  triggerIndex,
-  onDelete,
-  disabled,
-}: DeleteButtonProps) => (
+const DeleteButton = ({triggerIndex, onDelete, disabled}: DeleteButtonProps) => (
   <Button
     type="button"
     icon="icon-trash"
diff --git a/src/sentry/static/sentry/app/views/settings/organization/permissionAlert.tsx b/src/sentry/static/sentry/app/views/settings/organization/permissionAlert.tsx
index a5c9ac36a7..1ecf033ea6 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/permissionAlert.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/permissionAlert.tsx
@@ -8,7 +8,7 @@ import Alert from 'app/components/alert';
 type Props = React.ComponentPropsWithoutRef<typeof Alert> &
   Pick<React.ComponentProps<typeof Access>, 'access'>;
 
-const PermissionAlert = ({access, ...props}: Props) => (
+const PermissionAlert = ({access = ['org:write'], ...props}: Props) => (
   <Access access={access}>
     {({hasAccess}) =>
       !hasAccess && (
@@ -26,8 +26,4 @@ PermissionAlert.propTypes = {
   access: PropTypes.arrayOf(PropTypes.string),
 };
 
-PermissionAlert.defaultProps = {
-  access: ['org:write'],
-};
-
 export default PermissionAlert;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
index 6588a49269..6f14c55c71 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.tsx
@@ -8,24 +8,22 @@ import PermissionSelection from 'app/views/settings/organizationDeveloperSetting
 import Subscriptions from 'app/views/settings/organizationDeveloperSettings/resourceSubscriptions';
 import {WebhookEvent, Permissions, Scope} from 'app/types';
 
-type Props = {
-  scopes: Scope[];
-  events: WebhookEvent[];
+type DefaultProps = {
   webhookDisabled: boolean;
   appPublished: boolean;
 };
 
+type Props = DefaultProps & {
+  scopes: Scope[];
+  events: WebhookEvent[];
+};
+
 type State = {
   permissions: Permissions;
   events: WebhookEvent[];
 };
 
 export default class PermissionsObserver extends React.Component<Props, State> {
-  static contextTypes = {
-    router: PropTypes.object.isRequired,
-    form: PropTypes.object,
-  };
-
   static propTypes = {
     scopes: PropTypes.arrayOf(PropTypes.string).isRequired,
     events: PropTypes.arrayOf(PropTypes.string).isRequired,
@@ -33,7 +31,12 @@ export default class PermissionsObserver extends React.Component<Props, State> {
     appPublished: PropTypes.bool.isRequired,
   };
 
-  static defaultProps = {
+  static contextTypes = {
+    router: PropTypes.object.isRequired,
+    form: PropTypes.object,
+  };
+
+  static defaultProps: DefaultProps = {
     webhookDisabled: false,
     appPublished: false,
   };
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
index dc56b98eb1..e0ab3bf718 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
@@ -12,19 +12,17 @@ import {Context} from 'app/components/forms/form';
 
 type Resource = typeof EVENT_CHOICES[number];
 
-type Props = {
+type DefaultProps = {
+  webhookDisabled: boolean;
+};
+
+type Props = DefaultProps & {
   permissions: Permissions;
   events: WebhookEvent[];
   onChange: (events: WebhookEvent[]) => void;
-  webhookDisabled: boolean;
 };
 
 export default class Subscriptions extends React.Component<Props> {
-  static contextTypes = {
-    router: PropTypes.object.isRequired,
-    form: PropTypes.object,
-  };
-
   static propTypes = {
     permissions: PropTypes.object.isRequired,
     events: PropTypes.array.isRequired,
@@ -32,7 +30,12 @@ export default class Subscriptions extends React.Component<Props> {
     webhookDisabled: PropTypes.bool.isRequired,
   };
 
-  static defaultProps = {
+  static contextTypes = {
+    router: PropTypes.object.isRequired,
+    form: PropTypes.object,
+  };
+
+  static defaultProps: DefaultProps = {
     webhookDisabled: false,
   };
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.tsx
index 2414a21f1b..53ad5ca3b8 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.tsx
@@ -15,10 +15,13 @@ import {Organization} from 'app/types';
 
 type Resource = typeof EVENT_CHOICES[number];
 
-type Props = {
+type DefaultProps = {
+  webhookDisabled: boolean;
+};
+
+type Props = DefaultProps & {
   resource: Resource;
   disabledFromPermissions: boolean;
-  webhookDisabled: boolean;
   checked: boolean;
   onChange: (resource: Resource, checked: boolean) => void;
   organization: Organization;
@@ -34,7 +37,7 @@ export class SubscriptionBox extends React.Component<Props> {
     organization: SentryTypes.Organization,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     webhookDisabled: false,
   };
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/components/membersFilter.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/components/membersFilter.tsx
index c15ecf13f8..0e3527f993 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/components/membersFilter.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/components/membersFilter.tsx
@@ -19,6 +19,7 @@ type Props = {
 type BooleanFilterProps = {
   onChange: (value: boolean | null) => void;
   value: boolean | null;
+  children: React.ReactNode;
 };
 
 type Filters = {
@@ -31,7 +32,7 @@ type Filters = {
 const getBoolean = (list: string[]) =>
   Array.isArray(list) ? list && list.map(v => v.toLowerCase()).includes('true') : null;
 
-const MembersFilter: React.FC<Props> = ({className, roles, query, onChange}) => {
+const MembersFilter = ({className, roles, query, onChange}: Props) => {
   const search = tokenizeSearch(query);
 
   const filters = {
@@ -112,7 +113,7 @@ const MembersFilter: React.FC<Props> = ({className, roles, query, onChange}) =>
   );
 };
 
-const BooleanFilter: React.FC<BooleanFilterProps> = ({onChange, value, children}) => (
+const BooleanFilter = ({onChange, value, children}: BooleanFilterProps) => (
   <label>
     <Checkbox
       checked={value !== null}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
index 7d8d8cb0ae..0406c74579 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
@@ -16,16 +16,20 @@ import AsyncView from 'app/views/asyncView';
 import InviteRequestRow from './inviteRequestRow';
 import OrganizationAccessRequests from './organizationAccessRequests';
 
+type DefaultProps = {
+  inviteRequests: Member[];
+};
+
 type Props = {
   organization: Organization;
   requestList: AccessRequest[];
-  inviteRequests: Member[];
   teams: Team[];
   onUpdateInviteRequest: (id: string, data: Partial<Member>) => void;
   onRemoveInviteRequest: (id: string) => void;
   onRemoveAccessRequest: (id: string) => void;
   showInviteRequests: boolean;
-} & RouteComponentProps<{orgId: string}, {}>;
+} & RouteComponentProps<{orgId: string}, {}> &
+  DefaultProps;
 
 type State = AsyncView['state'] & {
   inviteRequestBusy: {[key: string]: boolean};
@@ -40,7 +44,7 @@ class OrganizationRequestsView extends AsyncView<Props, State> {
     showInviteRequests: PropTypes.bool.isRequired,
   };
 
-  static defaultProps = {
+  static defaultProps: DefaultProps = {
     inviteRequests: [],
   };
 
diff --git a/src/sentry/static/sentry/app/views/settings/project/permissionAlert.tsx b/src/sentry/static/sentry/app/views/settings/project/permissionAlert.tsx
index 215cad83af..6e6e0f3313 100644
--- a/src/sentry/static/sentry/app/views/settings/project/permissionAlert.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/permissionAlert.tsx
@@ -8,7 +8,7 @@ import Alert from 'app/components/alert';
 type Props = React.ComponentPropsWithoutRef<typeof Alert> &
   Pick<React.ComponentProps<typeof Access>, 'access'>;
 
-const PermissionAlert = ({access, ...props}: Props) => (
+const PermissionAlert = ({access = ['project:write'], ...props}: Props) => (
   <Access access={access}>
     {({hasAccess}) =>
       !hasAccess && (
@@ -26,8 +26,4 @@ PermissionAlert.propTypes = {
   access: PropTypes.arrayOf(PropTypes.string),
 };
 
-PermissionAlert.defaultProps = {
-  access: ['project:write'],
-};
-
 export default PermissionAlert;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.tsx
index 483fe2501c..64519c56a7 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.tsx
@@ -21,7 +21,7 @@ const DEFAULT_PROPS = {
 type Props = {
   projectId: string;
   data: ProjectKey;
-} & Partial<typeof DEFAULT_PROPS>;
+} & typeof DEFAULT_PROPS;
 
 class ProjectKeyCredentials extends React.Component<Props> {
   static defaultProps = DEFAULT_PROPS;
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index dc2a0cae65..0712b8d7e4 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -562,7 +562,6 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                     <UserBadge
                       avatarSize={32}
                       className="css-1b4dtj5-UserBadgeNoOverflow e1fowdfw2"
-                      hideEmail={false}
                       user={
                         Object {
                           "email": "foo@example.com",
@@ -3346,7 +3345,6 @@ exports[`Sidebar renders without org and router 1`] = `
                     <UserBadge
                       avatarSize={32}
                       className="css-1b4dtj5-UserBadgeNoOverflow e1fowdfw2"
-                      hideEmail={false}
                       user={
                         Object {
                           "email": "foo@example.com",
diff --git a/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
index 482c17223f..0bec91a381 100644
--- a/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
@@ -212,9 +212,7 @@ exports[`ProjectDebugFiles renders 1`] = `
             <div
               className="css-1ehogmz-FlexBox e1vnwt6f0"
             >
-              <EmptyStateWarning
-                small={false}
-              >
+              <EmptyStateWarning>
                 <EmptyStreamWrapper
                   data-test-id="empty-state"
                 >
@@ -327,9 +325,7 @@ exports[`ProjectDebugFiles renders empty 1`] = `
       disablePadding={true}
       flex={false}
     >
-      <EmptyStateWarning
-        small={false}
-      >
+      <EmptyStateWarning>
         <p>
           There are no debug symbols for this project.
         </p>
diff --git a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
index eee12950e5..c8efa6b365 100644
--- a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
@@ -9,13 +9,7 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
       noTitleStyles={false}
       title="Issue Owners"
     />
-    <PermissionAlert
-      access={
-        Array [
-          "project:write",
-        ]
-      }
-    />
+    <PermissionAlert />
     <Panel>
       <PanelHeader>
         Ownership Rules
diff --git a/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
index d4296e623b..6c5a4535c9 100644
--- a/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
@@ -51,13 +51,7 @@ exports[`ProjectTags renders 1`] = `
           </div>
         </SettingsPageHeading>
       </StyledSettingsPageHeading>
-      <PermissionAlert
-        access={
-          Array [
-            "project:write",
-          ]
-        }
-      >
+      <PermissionAlert>
         <WithOrganizationMockWrapper
           access={
             Array [
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
index 7b3c5b82d8..420e97fd84 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationAuthList.spec.jsx.snap
@@ -8,13 +8,7 @@ exports[`OrganizationAuthList renders 1`] = `
     noTitleStyles={false}
     title="Authentication"
   />
-  <PermissionAlert
-    access={
-      Array [
-        "org:write",
-      ]
-    }
-  />
+  <PermissionAlert />
   <Panel>
     <PanelHeader>
       Choose a provider
@@ -102,13 +96,7 @@ exports[`OrganizationAuthList renders with no providers 1`] = `
     noTitleStyles={false}
     title="Authentication"
   />
-  <PermissionAlert
-    access={
-      Array [
-        "org:write",
-      ]
-    }
-  />
+  <PermissionAlert />
   <Panel>
     <PanelHeader>
       Choose a provider
diff --git a/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
index 831b57bd1f..4f76353ff8 100644
--- a/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
@@ -195,13 +195,7 @@ exports[`ProjectEnvironments render active renders empty message 1`] = `
         </div>
       </SettingsPageHeading>
     </StyledSettingsPageHeading>
-    <PermissionAlert
-      access={
-        Array [
-          "project:write",
-        ]
-      }
-    >
+    <PermissionAlert>
       <WithOrganizationMockWrapper
         access={
           Array [
@@ -557,13 +551,7 @@ exports[`ProjectEnvironments render hidden renders empty message 1`] = `
         </div>
       </SettingsPageHeading>
     </StyledSettingsPageHeading>
-    <PermissionAlert
-      access={
-        Array [
-          "project:write",
-        ]
-      }
-    >
+    <PermissionAlert>
       <WithOrganizationMockWrapper
         access={
           Array [
@@ -919,13 +907,7 @@ exports[`ProjectEnvironments render hidden renders environment list 1`] = `
         </div>
       </SettingsPageHeading>
     </StyledSettingsPageHeading>
-    <PermissionAlert
-      access={
-        Array [
-          "project:write",
-        ]
-      }
-    >
+    <PermissionAlert>
       <WithOrganizationMockWrapper
         access={
           Array [
