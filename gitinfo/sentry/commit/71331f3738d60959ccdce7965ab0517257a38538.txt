commit 71331f3738d60959ccdce7965ab0517257a38538
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 29 18:47:33 2014 -0800

    Add custom csrf failure error page

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 682c17c2c1..c56fa8d360 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -189,6 +189,8 @@ LOCALE_PATHS = (
     os.path.join(PROJECT_ROOT, 'locale'),
 )
 
+CSRF_FAILURE_VIEW = 'sentry.web.frontend.csrf_failure.view'
+
 # Auth configuration
 
 try:
diff --git a/src/sentry/conf/urls.py b/src/sentry/conf/urls.py
index 89ead076b9..dec2afac9c 100644
--- a/src/sentry/conf/urls.py
+++ b/src/sentry/conf/urls.py
@@ -20,6 +20,7 @@ from django.contrib import admin
 from django.views.defaults import page_not_found
 
 from sentry.web.urls import urlpatterns as web_urlpatterns
+from sentry.web.frontend.csrf_failure import CsrfFailureView
 
 
 admin.autodiscover()
@@ -43,8 +44,10 @@ def handler500(request):
     t = loader.get_template('sentry/500.html')
     return HttpResponseServerError(t.render(Context(context)))
 
+
 urlpatterns = patterns('',
     url(r'^admin/', include(admin.site.urls)),
-    url(r'^500/', handler500),
-    url(r'^404/', handler404),
+    url(r'^500/', handler500, name='error-500'),
+    url(r'^404/', handler404, name='error-400'),
+    url(r'^403-csrf-failure/', CsrfFailureView.as_view(), name='error-403-csrf-failure'),
 ) + web_urlpatterns
diff --git a/src/sentry/templates/sentry/403-csrf-failure.html b/src/sentry/templates/sentry/403-csrf-failure.html
new file mode 100644
index 0000000000..2eee56f758
--- /dev/null
+++ b/src/sentry/templates/sentry/403-csrf-failure.html
@@ -0,0 +1,29 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "CSRF Verification Failed" %} | {{ block.super }}{% endblock %}
+
+{% block page_header_block %}{% endblock %}
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "CSRF Verification Failed" %}</h2>
+        </div>
+
+        <p>{% trans "CSRF verification failed. Request aborted." %}</p>
+
+        {% if no_referer %}
+          <p>You are seeing this message because Sentry requires a 'Referer
+           header' to be sent by your Web browser, but none was sent. This header is
+           required for security reasons, to ensure that your browser is not being
+           hijacked by third parties.</p>
+
+          <p>If you have configured your browser to disable 'Referer' headers, please
+           re-enable them, at least for this site, or for HTTPS connections, or for
+           'same-origin' requests.</p>
+        {% endif %}
+    </section>
+{% endblock %}
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 37c3276a9d..df24250705 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -169,12 +169,13 @@ class BaseView(View, OrganizationMixin):
         context = csrf(request)
         return context
 
-    def respond(self, template, context=None):
+    def respond(self, template, context=None, status=200):
         default_context = self.default_context
         if context:
             default_context.update(context)
 
-        return render_to_response(template, default_context, self.request)
+        return render_to_response(template, default_context, self.request,
+                                  status=status)
 
     def redirect(self, url):
         return HttpResponseRedirect(url)
diff --git a/src/sentry/web/frontend/csrf_failure.py b/src/sentry/web/frontend/csrf_failure.py
new file mode 100644
index 0000000000..008b61f8d4
--- /dev/null
+++ b/src/sentry/web/frontend/csrf_failure.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from django.middleware.csrf import REASON_NO_REFERER
+
+from sentry.web.frontend.base import BaseView
+
+
+class CsrfFailureView(BaseView):
+    auth_required = False
+    sudo_required = False
+
+    def handle(self, request, reason=""):
+        context = {
+            'no_referer': reason == REASON_NO_REFERER
+        }
+
+        return self.respond('sentry/403-csrf-failure.html', status=403)
+
+
+view = CsrfFailureView.as_view()
diff --git a/tests/sentry/web/frontend/test_csrf_failure.py b/tests/sentry/web/frontend/test_csrf_failure.py
new file mode 100644
index 0000000000..1087021f50
--- /dev/null
+++ b/tests/sentry/web/frontend/test_csrf_failure.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import TestCase
+
+
+class CsrfFailureTest(TestCase):
+    urls = 'sentry.conf.urls'
+
+    def test_simple(self):
+        path = reverse('error-403-csrf-failure')
+
+        resp = self.client.get(path)
+        assert resp.status_code == 403
+        self.assertTemplateUsed(resp, 'sentry/403-csrf-failure.html')
