commit 2143d66fdd0c4e3d61dce5d8f8314b1ec4cc9155
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Jan 31 14:38:02 2018 -0800

    fix(environments): Limit several attributes in `GroupSerializer` to the active environment filter (#6964)

diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index ff2253edea..2619033fad 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -148,10 +148,37 @@ class GroupSerializer(Serializer):
             environment = self.environment_func()
         except Environment.DoesNotExist:
             user_counts = {}
+            first_seen = {}
+            last_seen = {}
+            times_seen = {}
         else:
-            environment_id = environment and environment.id
+            project_id = item_list[0].project_id
+            item_ids = [g.id for g in item_list]
             user_counts = tagstore.get_groups_user_counts(
-                item_list[0].project_id, [g.id for g in item_list], environment_id=environment_id)
+                project_id,
+                item_ids,
+                environment_id=environment and environment.id,
+            )
+            first_seen = {}
+            last_seen = {}
+            times_seen = {}
+            if environment is not None:
+                environment_tagvalues = tagstore.get_group_list_tag_value(
+                    project_id,
+                    item_ids,
+                    environment.id,
+                    'environment',
+                    environment.name,
+                )
+                for item_id, value in environment_tagvalues.items():
+                    first_seen[item_id] = value.first_seen
+                    last_seen[item_id] = value.last_seen
+                    times_seen[item_id] = value.times_seen
+            else:
+                for item in item_list:
+                    first_seen[item.id] = item.first_seen
+                    last_seen[item.id] = item.last_seen
+                    times_seen[item.id] = item.times_seen
 
         ignore_items = {g.group_id: g for g in GroupSnooze.objects.filter(
             group__in=item_list,
@@ -219,6 +246,9 @@ class GroupSerializer(Serializer):
                 'resolution': resolution,
                 'resolution_actor': resolution_actor,
                 'share_id': share_ids.get(item.id),
+                'times_seen': times_seen.get(item.id, 0),
+                'first_seen': first_seen.get(item.id),  # TODO: missing?
+                'last_seen': last_seen.get(item.id),
             }
         return result
 
@@ -303,13 +333,13 @@ class GroupSerializer(Serializer):
             'id': six.text_type(obj.id),
             'shareId': share_id,
             'shortId': obj.qualified_short_id,
-            'count': six.text_type(obj.times_seen),
+            'count': six.text_type(attrs['times_seen']),
             'userCount': attrs['user_count'],
             'title': obj.title,
             'culprit': obj.culprit,
             'permalink': permalink,
-            'firstSeen': obj.first_seen,
-            'lastSeen': obj.last_seen,
+            'firstSeen': attrs['first_seen'],
+            'lastSeen': attrs['last_seen'],
             'logger': obj.logger or None,
             'level': LOG_LEVELS.get(obj.level, 'unknown'),
             'status': status_label,
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 0722c14ef7..f61307d82f 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -57,6 +57,7 @@ class TagStorage(Service):
         'get_group_tag_keys',
         'get_group_tag_value',
         'get_group_tag_values',
+        'get_group_list_tag_value',
 
         'delete_tag_key',
         'delete_all_group_tag_keys',
@@ -283,6 +284,12 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
+    def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
+        """
+        >>> get_group_tag_value(1, [1, 2, 3, 4, 5], 3, "key1", "value1")
+        """
+        raise NotImplementedError
+
     def delete_tag_key(self, project_id, key):
         """
         >>> delete_tag_key(1, "key1")
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index ae53208bab..5a73d65390 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -279,15 +279,19 @@ class LegacyTagStorage(TagStorage):
     def get_group_tag_value(self, project_id, group_id, environment_id, key, value):
         from sentry.tagstore.exceptions import GroupTagValueNotFound
 
-        try:
-            return GroupTagValue.objects.get(
-                group_id=group_id,
-                key=key,
-                value=value,
-            )
-        except GroupTagValue.DoesNotExist:
+        value = self.get_group_list_tag_value(
+            project_id,
+            [group_id],
+            environment_id,
+            key,
+            value,
+        ).get(group_id)
+
+        if value is None:
             raise GroupTagValueNotFound
 
+        return value
+
     def get_group_tag_values(self, project_id, group_id, environment_id, key):
         qs = GroupTagValue.objects.filter(
             group_id=group_id,
@@ -296,6 +300,14 @@ class LegacyTagStorage(TagStorage):
 
         return list(qs)
 
+    def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
+        qs = GroupTagValue.objects.filter(
+            group_id__in=group_id_list,
+            key=key,
+            value=value,
+        )
+        return {result.group_id: result for result in qs}
+
     def delete_tag_key(self, project_id, key):
         from sentry.tagstore.tasks import delete_tag_key as delete_tag_key_task
 
diff --git a/src/sentry/tagstore/multi/backend.py b/src/sentry/tagstore/multi/backend.py
index e90283a857..7d225e2ba3 100644
--- a/src/sentry/tagstore/multi/backend.py
+++ b/src/sentry/tagstore/multi/backend.py
@@ -174,6 +174,9 @@ class MultiTagStorage(TagStorage):
     def get_group_tag_values(self, *args, **kwargs):
         return self._call_one_backend('get_group_tag_values', *args, **kwargs)
 
+    def get_group_list_tag_value(self, *args, **kwargs):
+        return self._call_one_backend('get_group_list_tag_value', *args, **kwargs)
+
     def delete_tag_key(self, *args, **kwargs):
         return self._call_all_backends('delete_tag_key', *args, **kwargs)
 
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 4cf0a3d9d3..d26e595a48 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -361,29 +361,39 @@ class V2TagStorage(TagStorage):
     def get_group_tag_value(self, project_id, group_id, environment_id, key, value):
         from sentry.tagstore.exceptions import GroupTagValueNotFound
 
+        value = self.get_group_list_tag_value(
+            project_id,
+            [group_id],
+            environment_id,
+            key,
+            value,
+        ).get(group_id)
+
+        if value is None:
+            raise GroupTagValueNotFound
+
+        return value
+
+    def get_group_tag_values(self, project_id, group_id, environment_id, key):
         qs = GroupTagValue.objects.filter(
-            project_id=project_id,
             group_id=group_id,
             _key__key=key,
-            _value__value=value,
         )
 
         qs = self._add_environment_filter(qs, environment_id)
 
-        try:
-            return qs.get()
-        except GroupTagValue.DoesNotExist:
-            raise GroupTagValueNotFound
+        return list(qs)
 
-    def get_group_tag_values(self, project_id, group_id, environment_id, key):
+    def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
         qs = GroupTagValue.objects.filter(
-            group_id=group_id,
+            project_id=project_id,
+            group_id__in=group_id_list,
             _key__key=key,
+            _value__value=value,
         )
 
         qs = self._add_environment_filter(qs, environment_id)
-
-        return list(qs)
+        return {result.group_id: result for result in qs}
 
     def delete_tag_key(self, project_id, key):
         from sentry.tagstore.tasks import delete_tag_key as delete_tag_key_task
