commit 6de8310661a10444b1aa4c1f3cb941d6095ca231
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Feb 16 09:14:41 2018 -0800

    feat(ui): Refactor "indicators" actionCreators (#7273)
    
    * Rename `remove` to `removeIndicator` and `clear` to `clearIndicators`
    * Add `addLoadingMessage` with "loading' type and default "Saving
    changes..." message

diff --git a/src/sentry/static/sentry/app/actionCreators/indicator.jsx b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
index 564664c6d1..9e23c3ca6f 100644
--- a/src/sentry/static/sentry/app/actionCreators/indicator.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
@@ -1,13 +1,14 @@
 import {DEFAULT_TOAST_DURATION} from '../constants';
+import {t} from '../locale';
 import IndicatorActions from '../actions/indicatorActions';
 
 // Removes a single indicator
-export function remove(indicator) {
+export function removeIndicator(indicator) {
   IndicatorActions.remove(indicator);
 }
 
 // Clears all indicators
-export function clear() {
+export function clearIndicators() {
   IndicatorActions.clear();
 }
 
@@ -22,12 +23,20 @@ export function addMessage(msg, type, options = {}) {
   return IndicatorActions[action](msg, type, {...options, duration});
 }
 
-export function addErrorMessage(msg, duration, options = {}) {
-  addMessage(msg, 'error', {...options, duration});
+function addMessageWithType(type) {
+  return (msg, duration, options = {}) => addMessage(msg, type, {...options, duration});
 }
 
-export function addSuccessMessage(msg, duration, options = {}) {
-  addMessage(msg, 'success', {...options, duration});
+export function addLoadingMessage(msg = t('Saving changes...'), ...args) {
+  return addMessageWithType('loading')(msg, ...args);
+}
+
+export function addErrorMessage(...args) {
+  return addMessageWithType('error')(...args);
+}
+
+export function addSuccessMessage(...args) {
+  return addMessageWithType('success')(...args);
 }
 
 /**
diff --git a/src/sentry/static/sentry/app/components/indicators.jsx b/src/sentry/static/sentry/app/components/indicators.jsx
index e12234e051..0eb609f4b2 100644
--- a/src/sentry/static/sentry/app/components/indicators.jsx
+++ b/src/sentry/static/sentry/app/components/indicators.jsx
@@ -10,7 +10,7 @@ import {cx} from 'emotion';
 import ToastIndicator from '../components/alerts/toastIndicator';
 import IndicatorStore from '../stores/indicatorStore';
 import theme from '../utils/theme';
-import {remove} from '../actionCreators/indicator';
+import {removeIndicator} from '../actionCreators/indicator';
 
 const Toasts = styled.div`
   position: fixed;
@@ -36,7 +36,7 @@ class Indicators extends React.Component {
   };
 
   handleDismiss = indicator => {
-    remove(indicator);
+    removeIndicator(indicator);
   };
 
   render() {
diff --git a/tests/js/spec/components/indicators.spec.jsx b/tests/js/spec/components/indicators.spec.jsx
index 50267cda67..5ea12bc0dd 100644
--- a/tests/js/spec/components/indicators.spec.jsx
+++ b/tests/js/spec/components/indicators.spec.jsx
@@ -5,7 +5,7 @@ import theme from 'app/utils/theme';
 import Indicators from 'app/components/indicators';
 import IndicatorStore from 'app/stores/indicatorStore';
 import {
-  clear,
+  clearIndicators,
   addSuccessMessage,
   addErrorMessage,
   addMessage,
@@ -23,7 +23,7 @@ describe('Indicators', function() {
       </ThemeProvider>
     );
 
-    clear();
+    clearIndicators();
     jest.runAllTimers();
   });
 
@@ -94,7 +94,7 @@ describe('Indicators', function() {
     expect(wrapper.find('Message').text()).toBe('Loading');
 
     // If no indicator is specified, will remove all indicators
-    clear();
+    clearIndicators();
     jest.runAllTimers();
     wrapper.update();
     expect(wrapper.find('ToastIndicator')).toHaveLength(0);
@@ -123,7 +123,7 @@ describe('Indicators', function() {
     expect(wrapper.find('ToastIndicator')).toHaveLength(1);
     expect(wrapper.find('Message').text()).toBe('success');
 
-    clear();
+    clearIndicators();
     addErrorMessage('error', null);
     jest.runAllTimers();
     wrapper.update();
@@ -163,7 +163,7 @@ describe('Indicators', function() {
     ).toBe('Error');
 
     // clears all toasts
-    clear();
+    clearIndicators();
     jest.runAllTimers();
     wrapper.update();
     expect(wrapper.find('ToastIndicator')).toHaveLength(0);
