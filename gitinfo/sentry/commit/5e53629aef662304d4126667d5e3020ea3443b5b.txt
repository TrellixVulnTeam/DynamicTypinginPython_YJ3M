commit 5e53629aef662304d4126667d5e3020ea3443b5b
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 6 23:28:33 2013 -0700

    Hide sentry:* tags form all get_tags functions

diff --git a/src/sentry/filters/helpers.py b/src/sentry/filters/helpers.py
index e2f9acac7a..cdcd37b95a 100644
--- a/src/sentry/filters/helpers.py
+++ b/src/sentry/filters/helpers.py
@@ -43,10 +43,6 @@ def get_filters(model=None, project=None):
 
     if project:
         for tag in project.get_tags():
-            # sentry:* are reserved
-            if tag.startswith('sentry:'):
-                continue
-
             if tag not in TAG_FILTER_CACHE:
                 # Generate a new filter class because we are lazy and do
                 # not want to rewrite code
diff --git a/src/sentry/models.py b/src/sentry/models.py
index b876c52508..4998d72241 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -295,7 +295,10 @@ class Project(Model):
             tags = ProjectOption.objects.get_value(self, 'tags', None)
             if tags is None:
                 tags = TagKey.objects.all_keys(self)
-            self._tag_cache = tags
+            self._tag_cache = [
+                t for t in tags
+                if not t.startswith('sentry:')
+            ]
         return self._tag_cache
 
     # TODO: Make these a mixin
@@ -618,10 +621,12 @@ class Group(EventBase):
 
     def get_tags(self):
         if not hasattr(self, '_tag_cache'):
-            tags = sorted(self.grouptagkey_set.filter(
-                project=self.project,
-            ).values_list('key', flat=True))
-            self._tag_cache = tags
+            self._tag_cache = sorted([
+                t for t in self.grouptagkey_set.filter(
+                    project=self.project,
+                ).values_list('key', flat=True)
+                if not t.startswith('sentry:')
+            ])
         return self._tag_cache
 
 
@@ -696,7 +701,10 @@ class Event(EventBase):
         return module, self.data['__sentry__']['version']
 
     def get_tags(self):
-        return self.data.get('tags', ())
+        return [
+            t for t in self.data.get('tags', ())
+            if not t.startswith('sentry:')
+        ]
 
     def as_dict(self):
         # We use a SortedDict to keep elements ordered for a potential JSON serializer
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 4af1dda6c1..3e378e93bb 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -424,10 +424,6 @@ def group_tag_list(request, team, project, group):
     # O(N) db access
     tag_list = []
     for tag_name in group.get_tags():
-        # sentry:* are reserved
-        if tag_name.startswith('sentry:'):
-            continue
-
         tag_list.append((tag_name, [
             (value, times_seen, percent(group.times_seen, times_seen))
             for (value, times_seen, first_seen, last_seen)
