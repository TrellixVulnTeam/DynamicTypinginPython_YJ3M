commit 14efc7290fef51f62d65272a5c017ff3f4f50899
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 15 17:50:10 2014 -0700

    Add basic Group model + client side versioning

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 5df63ebe3c..9fc9e54c61 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -450,6 +450,8 @@ SENTRY_STATIC_BUNDLES = {
                 "sentry/app/directives/count.js",
                 "sentry/app/directives/timeSince.js",
                 "sentry/app/directives/broadcast.js",
+
+                "sentry/app/models/group.js",
             ],
         },
 
diff --git a/src/sentry/static/sentry/app/controllers/projectStream.js b/src/sentry/static/sentry/app/controllers/projectStream.js
index b5001b7216..ecd5f9ee0d 100644
--- a/src/sentry/static/sentry/app/controllers/projectStream.js
+++ b/src/sentry/static/sentry/app/controllers/projectStream.js
@@ -17,53 +17,53 @@
     }
   ]);
 
-  SentryApp.classy.controller({
-    name: 'ProjectStreamCtrl',
-
-    inject: ['Collection', 'selectedProject', '$http', '$scope', '$window', '$timeout'],
-
-    init: function() {
-      var self = this;
+  SentryApp.controller('ProjectStreamCtrl', [
+    '$http', '$scope', '$timeout', 'Collection', 'GroupModel', 'selectedProject',
+    function($http, $scope, $timeout, Collection, GroupModel, selectedProject) {
+      var timeoutId;
+      var pollForChanges = function() {
+        $http.get('/api/0/projects/' + selectedProject.id + '/groups/')
+          .success(function(data){
+            var duration = $scope.chartDuration;
+            data = $.map(data, GroupModel);
+            $timeout(function(){
+              angular.forEach(data, function(group){
+                group.activeChartData = group.stats[duration];
+              });
+              $scope.groupList.extend(data);
+            });
+          }).finally(function(){
+            timeoutId = window.setTimeout(pollForChanges, 1000);
+          });
+      };
+      var groupList = $.map(window.groupList, GroupModel);
 
-      this.$scope.groupList = new this.Collection(this.$window.groupList, {
+      $scope.groupList = new Collection(groupList, {
         sortFunc: function(data) {
           app.utils.sortArray(data, function(item){
             return [item.score];
           });
         },
+        canUpdate: function(current, pending) {
+          return (current.version < pending.version);
+        },
         limit: 50
       });
-      this.timeoutId = window.setTimeout(this.pollForChanges, 1000);
-
-      this.$scope.$on('destroy', function(){
-        window.clearTimeout(self.timeoutId);
-      });
 
-      this.setChartDuration('24h');
-    },
+      $scope.setChartDuration = function(duration) {
+        $scope.chartDuration = duration;
+        angular.forEach($scope.groupList, function(group){
+          group.activeChartData = group.stats[duration];
+        });
+      };
 
-    setChartDuration: function(duration) {
-      this.$scope.chartDuration = duration;
-      angular.forEach(this.$scope.groupList, function(group){
-        group.activeChartData = group.stats[duration];
+      // we explicitly avoid $timeout here to prevent the watcher
+      timeoutId = window.setTimeout(pollForChanges, 1000);
+      $scope.$on('destroy', function(){
+        window.clearTimeout(timeoutId);
       });
-    },
-
-    pollForChanges: function() {
-      var self = this;
 
-      this.$http.get('/api/0/projects/' + this.selectedProject.id + '/groups/')
-        .success(function(data){
-          var duration = self.$scope.chartDuration;
-          self.$timeout(function(){
-            angular.forEach(data, function(group){
-              group.activeChartData = group.stats[duration];
-            });
-            self.$scope.groupList.extend(data);
-          });
-        }).finally(function(){
-          self.timeoutId = window.setTimeout(self.pollForChanges, 1000);
-        });
+      $scope.setChartDuration('24h');
     }
-  });
+  ]);
 }());
diff --git a/src/sentry/static/sentry/app/models/group.js b/src/sentry/static/sentry/app/models/group.js
new file mode 100644
index 0000000000..d3646f35bb
--- /dev/null
+++ b/src/sentry/static/sentry/app/models/group.js
@@ -0,0 +1,10 @@
+(function(){
+  'use strict';
+
+  SentryApp.factory('GroupModel', function(){
+    return function(data) {
+      data.version = new Date().getTime();
+      return data;
+    };
+  });
+}());
diff --git a/src/sentry/static/sentry/app/modules/collection.js b/src/sentry/static/sentry/app/modules/collection.js
index 2d306b9afb..68e60c8638 100644
--- a/src/sentry/static/sentry/app/modules/collection.js
+++ b/src/sentry/static/sentry/app/modules/collection.js
@@ -8,6 +8,9 @@
         limit: null,
         equals: function(item, other) {
           return item.id == other.id;
+        },
+        canUpdate: function(current, pending) {
+          return true;
         }
       };
 
@@ -84,8 +87,13 @@
       };
 
       Collection.prototype._updateExisting = function _updateExisting(item) {
+        // returns true if the item already existed and was updated (as configured)
+
         var existing = this.indexOf(item);
         if (existing !== -1) {
+          if (!this.options.canUpdate(this[existing], item)) {
+            return true;
+          }
           $.extend(true, this[existing], item);
           return true;
         }
