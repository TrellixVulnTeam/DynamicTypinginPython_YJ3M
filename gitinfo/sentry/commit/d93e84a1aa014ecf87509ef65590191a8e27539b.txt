commit d93e84a1aa014ecf87509ef65590191a8e27539b
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Aug 24 10:24:16 2017 -0700

    Switched over to new heuritics for original function names

diff --git a/setup.py b/setup.py
index 30e72373f4..c3a7657e0f 100755
--- a/setup.py
+++ b/setup.py
@@ -110,7 +110,7 @@ install_requires = [
     'honcho>=0.7.0,<0.8.0',
     'kombu==3.0.35',
     'ipaddress>=1.0.16,<1.1.0',
-    'libsourcemap>=0.8.0,<0.9.0',
+    'libsourcemap>=0.8.1,<0.9.0',
     'loremipsum>=1.0.5,<1.1.0',
     'lxml>=3.4.1',
     'mock>=0.8.0,<1.1',
diff --git a/src/sentry/lang/javascript/cache.py b/src/sentry/lang/javascript/cache.py
index 689d2d4434..9edbeec5e4 100644
--- a/src/sentry/lang/javascript/cache.py
+++ b/src/sentry/lang/javascript/cache.py
@@ -20,7 +20,7 @@ class SourceCache(object):
             url = self._aliases[url]
         return url
 
-    def get(self, url):
+    def get(self, url, raw=False):
         url = self._get_canonical_url(url)
         try:
             parsed, rv = self._cache[url]
@@ -30,7 +30,10 @@ class SourceCache(object):
         # We have already gotten this file and we've
         # decoded the response, so just return
         if parsed:
-            return rv
+            parsed, raw_body = rv
+            if raw:
+                return raw_body
+            return parsed
 
         # Otherwise, we have a 2-tuple that needs to be applied
         body, encoding = rv
@@ -40,10 +43,11 @@ class SourceCache(object):
         if callable(body):
             body = body()
 
+        raw_body = body
         body = body.decode(codec_lookup(encoding, 'utf-8').name, 'replace').split(u'\n')
 
         # Set back a marker to indicate we've parsed this url
-        self._cache[url] = (True, body)
+        self._cache[url] = (True, (body, raw_body))
         return body
 
     def get_errors(self, url):
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index a4acf04b9a..eca36b6afa 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -600,24 +600,34 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                     )
 
             if token is not None:
-                # Token's return zero-indexed lineno's
+                # the tokens are zero indexed, so offset correctly
                 new_frame['lineno'] = token.src_line + 1
                 new_frame['colno'] = token.src_col
-                last_token = None
-
-                # we might go back to a frame that is unhandled.  In that
-                # case we might not find the token in the data.
-                if processable_frame.previous_frame:
-                    last_token = processable_frame.previous_frame.data.get('token')
-
-                # The offending function is always the previous function in the stack
-                # Honestly, no idea what the bottom most frame is, so
-                # we're ignoring that atm.
-                #
-                # XXX: we should actually be parsing the source code here
-                # and not use the last token
-                if last_token:
-                    new_frame['function'] = last_token.name or frame.get('function')
+
+                # Find the original function name with a bit of guessing
+                original_function_name = None
+
+                # In the ideal case we can use the function name from the
+                # frame and the location to resolve the original name
+                # through the heuristics in our sourcemap library.
+                if frame.get('function'):
+                    minified_source = self.get_source(frame['abs_path'], raw=True)
+                    original_function_name = sourcemap_view.get_original_function_name(
+                        token.dst_line, token.dst_col, frame['function'],
+                        minified_source)
+                if original_function_name is None:
+                    last_token = None
+
+                    # Find the previous token for function name handling as a
+                    # fallback.
+                    if processable_frame.previous_frame and \
+                       processable_frame.previous_frame.processor is self:
+                        last_token = processable_frame.previous_frame.data.get('token')
+                        if last_token:
+                            original_function_name = last_token.name
+
+                if original_function_name is not None:
+                    new_frame['function'] = original_function_name
 
                 filename = token.src
                 # special case webpack support
@@ -702,10 +712,10 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
             return True
         return False
 
-    def get_source(self, filename):
+    def get_source(self, filename, raw=False):
         if filename not in self.cache:
             self.cache_source(filename)
-        return self.cache.get(filename)
+        return self.cache.get(filename, raw=raw)
 
     def cache_source(self, filename):
         sourcemaps = self.sourcemaps
diff --git a/tests/sentry/lang/javascript/test_example.py b/tests/sentry/lang/javascript/test_example.py
index a53444499d..3aaa4d35f7 100644
--- a/tests/sentry/lang/javascript/test_example.py
+++ b/tests/sentry/lang/javascript/test_example.py
@@ -67,13 +67,14 @@ class ExampleTestCase(TestCase):
 
         assert len(frame_list) == 4
 
+        import pprint
+        pprint.pprint(frame_list)
+
         assert frame_list[0].function == 'produceStack'
         assert frame_list[0].lineno == 6
         assert frame_list[0].filename == 'index.html'
 
-        # This function name is obviously wrong but the current logic we
-        # have does not permit better data here
-        assert frame_list[1].function == 'i'
+        assert frame_list[1].function == 'test'
         assert frame_list[1].lineno == 20
         assert frame_list[1].filename == 'test.js'
 
@@ -81,8 +82,6 @@ class ExampleTestCase(TestCase):
         assert frame_list[2].lineno == 15
         assert frame_list[2].filename == 'test.js'
 
-        # This function name is obviously wrong but the current logic we
-        # have does not permit better data here
-        assert frame_list[3].function == 'cb'
+        assert frame_list[3].function == 'onFailure'
         assert frame_list[3].lineno == 5
         assert frame_list[3].filename == 'test.js'
