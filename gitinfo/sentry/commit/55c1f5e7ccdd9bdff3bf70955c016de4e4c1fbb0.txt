commit 55c1f5e7ccdd9bdff3bf70955c016de4e4c1fbb0
Author: Mark Story <mark@mark-story.com>
Date:   Fri Dec 7 10:06:18 2018 -0500

    fix(integrations) Allow multiple labels to be assigned in jira (#10952)
    
    Allow multiple labels to be applied to created issues via a comma
    separated string. I had originally thought of using a multi-select but
    the `creatable` mode doesn't work inside JsonConfig based forms.
    
    Fixes APP-865

diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index a3c01f3351..6a90f89f90 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -29,7 +29,7 @@ FEATURE_DESCRIPTIONS = [
     FeatureDescription(
         """
         Create and link Sentry issue groups directly to a Jira ticket in any of your
-        projects, providing a quick way to jump from Sentry bug to tracked ticket!
+        projects, providing a quick way to jump from a Sentry bug to tracked ticket!
         """,
         IntegrationFeatures.ISSUE_BASIC,
     ),
@@ -475,6 +475,7 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
 
         dynamic_fields = issue_type_meta['fields'].keys()
         dynamic_fields.sort(key=lambda f: anti_gravity.get(f) or 0)
+
         # build up some dynamic fields based on required shit.
         for field in dynamic_fields:
             if field in standard_fields or field in [x.strip() for x in ignored_fields]:
@@ -524,6 +525,14 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
             elif field == 'summary':
                 cleaned_data['summary'] = data['title']
                 continue
+            elif field == 'labels' and 'labels' in data:
+                labels = [
+                    label.strip()
+                    for label in data['labels'].split(',')
+                    if label.strip()
+                ]
+                cleaned_data['labels'] = labels
+                continue
             if field in data.keys():
                 v = data.get(field)
                 if not v:
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 7f09f5083c..4445ff98fd 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -2,9 +2,11 @@ from __future__ import absolute_import
 
 import json
 import mock
+import responses
 import six
 
 from django.core.urlresolvers import reverse
+from exam import fixture
 
 from sentry.integrations.exceptions import IntegrationError
 from sentry.models import (
@@ -45,6 +47,16 @@ SAMPLE_CREATE_META_RESPONSE = """
               "operations": [
                 "set"
               ]
+            },
+            "labels": {
+              "required": false,
+              "schema": {
+                "type": "array",
+                "items": "string",
+                "system": "labels"
+              },
+              "name": "Labels",
+              "key": "labels"
             }
           }
         }
@@ -368,19 +380,30 @@ class MockJiraApiClient(object):
 
 
 class JiraIntegrationTest(APITestCase):
+    @fixture
+    def integration(self):
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Jira Cloud',
+            metadata={
+                'oauth_client_id': 'oauth-client-id',
+                'shared_secret': 'a-super-secret-key-from-atlassian',
+                'base_url': 'https://example.atlassian.net',
+                'domain_name': 'example.atlassian.net',
+            }
+        )
+        integration.add_organization(
+            self.organization,
+            self.user)
+        return integration
+
     def test_get_create_issue_config(self):
         org = self.organization
         self.login_as(self.user)
         group = self.create_group()
         self.create_event(group=group)
 
-        integration = Integration.objects.create(
-            provider='jira',
-            name='Example Jira',
-        )
-        integration.add_organization(org, self.user)
-
-        installation = integration.get_installation(org.id)
+        installation = self.integration.get_installation(org.id)
 
         def get_client():
             return MockJiraApiClient()
@@ -423,6 +446,11 @@ class JiraIntegrationTest(APITestCase):
                 'name': 'issuetype',
                 'label': 'Issue Type',
                 'updatesForm': True,
+            }, {
+                'required': False,
+                'type': 'text',
+                'name': 'labels',
+                'label': 'Labels',
             }]
 
     def test_get_create_issue_config_with_default_and_param(self):
@@ -431,18 +459,13 @@ class JiraIntegrationTest(APITestCase):
         group = self.create_group()
         self.create_event(group=group)
 
-        integration = Integration.objects.create(
-            provider='jira',
-            name='Example Jira',
-        )
-        org_integration = integration.add_organization(org, self.user)
-        org_integration.config = {
+        installation = self.integration.get_installation(org.id)
+        installation.org_integration.config = {
             'project_issue_defaults': {
                 six.text_type(group.project_id): {'project': '10001'}
             }
         }
-        org_integration.save()
-        installation = integration.get_installation(org.id)
+        installation.org_integration.save()
 
         def get_client():
             return MockJiraApiClient()
@@ -466,18 +489,13 @@ class JiraIntegrationTest(APITestCase):
         group = self.create_group()
         self.create_event(group=group)
 
-        integration = Integration.objects.create(
-            provider='jira',
-            name='Example Jira',
-        )
-        org_integration = integration.add_organization(org, self.user)
-        org_integration.config = {
+        installation = self.integration.get_installation(org.id)
+        installation.org_integration.config = {
             'project_issue_defaults': {
                 six.text_type(group.project_id): {'project': '10001'}
             }
         }
-        org_integration.save()
-        installation = integration.get_installation(org.id)
+        installation.org_integration.save()
 
         def get_client():
             return MockJiraApiClient()
@@ -500,13 +518,7 @@ class JiraIntegrationTest(APITestCase):
         self.login_as(self.user)
         group = self.create_group()
 
-        integration = Integration.objects.create(
-            provider='jira',
-            name='Example Jira',
-        )
-        integration.add_organization(org, self.user)
-
-        installation = integration.get_installation(org.id)
+        installation = self.integration.get_installation(org.id)
 
         assert installation.get_link_issue_config(group) == [
             {
@@ -515,7 +527,8 @@ class JiraIntegrationTest(APITestCase):
                 'default': '',
                 'type': 'select',
                 'url': reverse(
-                    'sentry-extensions-jira-search', args=[org.slug, integration.id],
+                    'sentry-extensions-jira-search',
+                    args=[org.slug, self.integration.id],
                 )
             }
         ]
@@ -524,13 +537,7 @@ class JiraIntegrationTest(APITestCase):
         org = self.organization
         self.login_as(self.user)
 
-        integration = Integration.objects.create(
-            provider='jira',
-            name='Example Jira',
-        )
-        integration.add_organization(org, self.user)
-
-        installation = integration.get_installation(org.id)
+        installation = self.integration.get_installation(org.id)
 
         def get_client():
             return MockJiraApiClient()
@@ -547,6 +554,49 @@ class JiraIntegrationTest(APITestCase):
                 'key': 'APP-123'
             }
 
+    @responses.activate
+    def test_create_issue_labels(self):
+        org = self.organization
+        self.login_as(self.user)
+
+        installation = self.integration.get_installation(org.id)
+
+        responses.add(
+            responses.GET,
+            'https://example.atlassian.net/rest/api/2/issue/createmeta',
+            body=SAMPLE_CREATE_META_RESPONSE,
+            content_type='json',
+            match_querystring=False,
+        )
+        responses.add(
+            responses.GET,
+            'https://example.atlassian.net/rest/api/2/issue/APP-123',
+            body=SAMPLE_GET_ISSUE_RESPONSE,
+            content_type='json',
+            match_querystring=False,
+        )
+
+        def responder(request):
+            body = json.loads(request.body)
+            assert body['fields']['labels'] == ['fuzzy', 'bunnies']
+            return (200, {'content-type': 'application/json'}, '{"key":"APP-123"}')
+
+        responses.add_callback(
+            responses.POST,
+            'https://example.atlassian.net/rest/api/2/issue',
+            callback=responder,
+            match_querystring=False,
+        )
+
+        result = installation.create_issue({
+            'title': 'example summary',
+            'description': 'example bug report',
+            'issuetype': '1',
+            'project': '10000',
+            'labels': 'fuzzy , ,  bunnies'
+        })
+        assert result['key'] == 'APP-123'
+
     def test_outbound_issue_sync(self):
         org = self.organization
         project = self.project
