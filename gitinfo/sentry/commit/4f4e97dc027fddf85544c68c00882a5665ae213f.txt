commit 4f4e97dc027fddf85544c68c00882a5665ae213f
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Mar 14 10:33:36 2018 -0700

    Add `TagStorage.get_event_tag_qs`. (#7582)

diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 0619208ebd..d84868d227 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -80,6 +80,7 @@ class TagStorage(Service):
 
         'get_tag_value_qs',
         'get_group_tag_value_qs',
+        'get_event_tag_qs',
     )
 
     def setup_deletions(self, tagkey_model, tagvalue_model, grouptagkey_model,
@@ -359,6 +360,12 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
+    def get_event_tag_qs(self, project_id, environment_id, key, value):
+        """
+        >>> get_event_tag_qs(1, 2, 'environment', 'prod')
+        """
+        raise NotImplementedError
+
     def get_groups_user_counts(self, project_id, group_ids, environment_id):
         """
         >>> get_groups_user_counts(1, [2, 3], 4)
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 15a8633f50..41bdedebdc 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -630,6 +630,9 @@ class LegacyTagStorage(TagStorage):
 
         return queryset
 
+    def get_event_tag_qs(self, project_id, environment_id, key, value):
+        raise NotImplementedError  # there is no index that can appopriate satisfy this query
+
     def update_group_for_events(self, project_id, event_ids, destination_id):
         return EventTag.objects.filter(
             project_id=project_id,
diff --git a/src/sentry/tagstore/multi/backend.py b/src/sentry/tagstore/multi/backend.py
index 2ee802c7be..7487741c86 100644
--- a/src/sentry/tagstore/multi/backend.py
+++ b/src/sentry/tagstore/multi/backend.py
@@ -280,5 +280,8 @@ class MultiTagStorage(TagStorage):
     def get_group_tag_value_qs(self, *args, **kwargs):
         return self._call_one_backend('get_group_tag_value_qs', *args, **kwargs)
 
+    def get_event_tag_qs(self, *args, **kwargs):
+        return self._call_one_backend('get_event_tag_qs', *args, **kwargs)
+
     def update_group_for_events(self, *args, **kwargs):
         return self._call_all_backends('update_group_for_events', *args, **kwargs)
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 222ecf769c..6c55409e20 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -834,6 +834,17 @@ class V2TagStorage(TagStorage):
         qs = self._add_environment_filter(qs, environment_id)
         return qs
 
+    def get_event_tag_qs(self, project_id, environment_id, key, value):
+        qs = EventTag.objects.filter(
+            project_id=project_id,
+            key__key=key,
+            value__value=value,
+        )
+
+        qs = self._add_environment_filter(qs, environment_id)
+
+        return qs
+
     def update_group_for_events(self, project_id, event_ids, destination_id):
         return EventTag.objects.filter(
             project_id=project_id,
@@ -847,8 +858,11 @@ class V2TagStorage(TagStorage):
         """
         if environment_id is None:
             environment_id = AGGREGATE_ENVIRONMENT_ID
+
         if queryset.model == TagKey:
             return queryset.filter(environment_id=environment_id)
+        elif queryset.model in (EventTag,):
+            return queryset.filter(key__environment_id=environment_id)
         elif queryset.model in (TagValue, GroupTagKey, GroupTagValue):
             return queryset.filter(_key__environment_id=environment_id)
         else:
diff --git a/tests/sentry/tagstore/v2/test_backend.py b/tests/sentry/tagstore/v2/test_backend.py
index 58a4f9da3a..bbeb756971 100644
--- a/tests/sentry/tagstore/v2/test_backend.py
+++ b/tests/sentry/tagstore/v2/test_backend.py
@@ -342,6 +342,14 @@ class TagStorage(TestCase):
                 key_id=k.id,
                 value_id=v.id,
             ) is not None
+            assert set(
+                self.ts.get_event_tag_qs(
+                    self.proj1.id,
+                    self.proj1env1.id,
+                    k.key,
+                    v.value,
+                ).values_list('group_id', flat=True)
+            ) == set([self.proj1group1.id])
 
     def test_delete_tag_key(self):
         tk1 = self.ts.create_tag_key(
