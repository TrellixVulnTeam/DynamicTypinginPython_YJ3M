commit 9090b95f5c435b296298c2d49159052adf390c96
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Mar 24 10:38:24 2020 -0700

    chore(ts): Convert utils/formatAbbreviatedNumber (#17854)

diff --git a/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx b/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx
deleted file mode 100644
index ccb6c5ee4e..0000000000
--- a/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx
+++ /dev/null
@@ -1,28 +0,0 @@
-import floatFormat from './floatFormat';
-
-const numberFormats = [
-  [1000000000, 'b'],
-  [1000000, 'm'],
-  [1000, 'k'],
-];
-
-export default function formatNumber(number) {
-  let b, x, y, o, p;
-
-  number = parseInt(number, 10);
-
-  // eslint-disable-next-line no-cond-assign
-  for (let i = 0; (b = numberFormats[i]); i++) {
-    x = b[0];
-    y = b[1];
-    o = Math.floor(number / x);
-    p = number % x;
-    if (o > 0) {
-      if (o / 10 > 1 || !p) {
-        return '' + o + y;
-      }
-      return '' + floatFormat(number / x, 1) + y;
-    }
-  }
-  return '' + number.toLocaleString();
-}
diff --git a/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.tsx b/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.tsx
new file mode 100644
index 0000000000..dca4f4ec67
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.tsx
@@ -0,0 +1,30 @@
+import floatFormat from './floatFormat';
+
+const numberFormats = [
+  [1000000000, 'b'],
+  [1000000, 'm'],
+  [1000, 'k'],
+] as const;
+
+export default function formatNumber(number: number | string) {
+  number = Number(number);
+
+  let lookup: typeof numberFormats[number];
+
+  // eslint-disable-next-line no-cond-assign
+  for (let i = 0; (lookup = numberFormats[i]); i++) {
+    const [suffixNum, suffix] = lookup;
+    const shortValue = Math.floor(number / suffixNum);
+    const fitsBound = number % suffixNum;
+
+    if (shortValue <= 0) {
+      continue;
+    }
+
+    return shortValue / 10 > 1 || !fitsBound
+      ? `${shortValue}${suffix}`
+      : `${floatFormat(number / suffixNum, 1)}${suffix}`;
+  }
+
+  return number.toLocaleString();
+}
