commit 209d44bbabfc0ad614bc174b1c0c7b6b7e270430
Author: Matte Noble <me@mattenoble.com>
Date:   Thu Oct 18 11:52:26 2018 -0700

    feat(app-platform): Create Sentry App (#10130)
    
    Adds endpoint to create a Sentry App. The Organization that owns the App
    must be passed in and the User making the request must be in that Org.

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index a99fae0823..1c89aae439 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -116,7 +116,7 @@ class Endpoint(APIView):
 
         request.json_body = None
 
-        if request.META.get('CONTENT_TYPE') != 'application/json':
+        if not request.META.get('CONTENT_TYPE', '').startswith('application/json'):
             return
 
         if not len(request.body):
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index 4303544148..ab77355d58 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -1,12 +1,15 @@
 from __future__ import absolute_import
 
 from rest_framework.permissions import IsAuthenticated
+from rest_framework.response import Response
 
 from sentry.api.base import Endpoint, SessionAuthentication
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework import SentryAppSerializer
 from sentry.constants import SentryAppStatus
 from sentry.features.helpers import requires_feature
+from sentry.mediators.sentry_apps import Creator
 from sentry.models import SentryApp
 
 
@@ -30,3 +33,28 @@ class SentryAppsEndpoint(Endpoint):
             paginator_cls=OffsetPaginator,
             on_results=lambda x: serialize(x, request.user),
         )
+
+    @requires_feature('organizations:internal-catchall', any_org=True)
+    def post(self, request):
+        serializer = SentryAppSerializer(data=request.json_body)
+
+        if not serializer.is_valid():
+            return Response({'errors': serializer.errors}, status=422)
+
+        sentry_app = Creator.run(
+            name=request.json_body.get('name'),
+            organization=self._get_user_org(request),
+            scopes=request.json_body.get('scopes'),
+            webhook_url=request.json_body.get('webhook_url'),
+        )
+
+        return Response(serialize(sentry_app), status=201)
+
+    def _get_user_org(self, request):
+        return next(
+            (
+                org for org in request.user.get_orgs()
+                if org.slug == request.json_body['organization']
+            ),
+            None,
+        )
diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
new file mode 100644
index 0000000000..a42f664423
--- /dev/null
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.serializers import Serializer, ValidationError
+
+from sentry.models import ApiScopes
+
+
+class ApiScopesField(serializers.WritableField):
+    def validate(self, data):
+        valid_scopes = ApiScopes()
+        if data is None:
+            raise ValidationError('Must provide scopes')
+
+        for scope in data:
+            if scope not in valid_scopes:
+                raise ValidationError(u'{} not a valid scope'.format(scope))
+
+
+class SentryAppSerializer(Serializer):
+    name = serializers.CharField()
+    scopes = ApiScopesField()
+    webhook_url = serializers.CharField()
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 7c9be7ec4e..b63d33992c 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
@@ -11,9 +13,11 @@ from sentry.constants import SentryAppStatus
 class SentryAppsTest(APITestCase):
     def setUp(self):
         self.superuser = self.create_user(email='a@example.com', is_superuser=True)
+        self.super_org = self.create_organization(owner=self.superuser)
+
         self.user = self.create_user(email='boop@example.com')
         self.org = self.create_organization(owner=self.user)
-        self.super_org = self.create_organization(owner=self.superuser)
+
         self.published_app = Creator.run(
             name='Test',
             organization=self.org,
@@ -21,14 +25,18 @@ class SentryAppsTest(APITestCase):
             webhook_url='https://example.com',
         )
         self.published_app.update(status=SentryAppStatus.PUBLISHED)
+
         self.unpublished_app = Creator.run(
             name='Testin',
             organization=self.org,
             scopes=(),
             webhook_url='https://example.com',
         )
+
         self.url = reverse('sentry-api-0-sentry-apps')
 
+
+class GetSentryAppsTest(SentryAppsTest):
     @with_feature('organizations:internal-catchall')
     def test_superuser_sees_all_apps(self):
         self.login_as(user=self.superuser)
@@ -58,3 +66,67 @@ class SentryAppsTest(APITestCase):
 
         response = self.client.get(self.url, format='json')
         assert response.status_code == 404
+
+
+class PostSentryAppsTest(SentryAppsTest):
+    @with_feature('organizations:internal-catchall')
+    def test_creates_sentry_app(self):
+        self.login_as(user=self.user)
+
+        response = self._post()
+        expected = {
+            'name': 'MyApp',
+            'scopes': ['project:read', 'project:write'],
+            'webhook_url': 'https://example.com',
+        }
+
+        assert response.status_code == 201, response.content
+        assert six.viewitems(expected) <= six.viewitems(response.data)
+
+    @with_feature('organizations:internal-catchall')
+    def test_missing_name(self):
+        self.login_as(self.user)
+        response = self._post(name=None)
+
+        assert response.status_code == 422, response.content
+        assert 'name' in response.data['errors']
+
+    @with_feature('organizations:internal-catchall')
+    def test_missing_scopes(self):
+        self.login_as(self.user)
+        response = self._post(scopes=None)
+
+        assert response.status_code == 422, response.content
+        assert 'scopes' in response.data['errors']
+
+    @with_feature('organizations:internal-catchall')
+    def test_invalid_scope(self):
+        self.login_as(self.user)
+        response = self._post(scopes=('not:ascope', ))
+
+        assert response.status_code == 422, response.content
+        assert 'scopes' in response.data['errors']
+
+    @with_feature('organizations:internal-catchall')
+    def test_missing_webhook_url(self):
+        self.login_as(self.user)
+        response = self._post(webhook_url=None)
+
+        assert response.status_code == 422, response.content
+        assert 'webhook_url' in response.data['errors']
+
+    def _post(self, **kwargs):
+        body = {
+            'name': 'MyApp',
+            'organization': self.org.slug,
+            'scopes': ('project:read', 'project:write'),
+            'webhook_url': 'https://example.com',
+        }
+
+        body.update(**kwargs)
+
+        return self.client.post(
+            self.url,
+            body,
+            headers={'Content-Type': 'application/json'},
+        )
