commit b828880206b5121f088417726490e26b0b40ff88
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jan 28 02:29:27 2020 -0800

    fix(migrations): Fix event migration (#16646)
    
    Add missing method to calculate primary hash to event migration.
    
    Fixes https://github.com/getsentry/onpremise/issues/366
    
    Co-authored-by: Burak Yigit Kaya <ben@byk.im>

diff --git a/src/sentry/migrations/0024_auto_20191230_2052.py b/src/sentry/migrations/0024_auto_20191230_2052.py
index b62a3b80af..a2ea15f3b6 100644
--- a/src/sentry/migrations/0024_auto_20191230_2052.py
+++ b/src/sentry/migrations/0024_auto_20191230_2052.py
@@ -3,6 +3,7 @@
 from __future__ import unicode_literals, print_function
 
 import os
+import types
 from datetime import timedelta, datetime
 
 from django.db import migrations
@@ -52,6 +53,31 @@ def backfill_eventstream(apps, schema_editor):
             event.group = groups.get(event.group_id)
         eventstore.bind_nodes(_events, "data")
 
+    def _get_grouping_variants(event):
+        from sentry.grouping.api import get_grouping_variants_for_event, load_grouping_config
+        from sentry.stacktraces.processing import normalize_stacktraces_for_grouping
+
+        config = event.data.get("grouping_config")
+        config = load_grouping_config(config)
+        return get_grouping_variants_for_event(event, config)
+
+    def _get_primary_hash(event):
+        hashes = event.data.get("hashes")
+        if hashes is None:
+            hashes = (
+                hash
+                for hash in (x.get_hash() for x in _get_grouping_variants(event).values())
+                if hash
+            )
+        else:
+            hashes = iter(hashes)
+
+        return next(hashes)
+
+    def _get_raw_data(event):
+        """Returns the internal raw event data dict."""
+        return dict(event.data.items())
+
     if skip_backfill:
         print("Skipping backfill.\n")
         return
@@ -67,10 +93,11 @@ def backfill_eventstream(apps, schema_editor):
 
     processed = 0
     for event in RangeQuerySetWrapper(events, step=100, callbacks=(_attach_related,)):
-        primary_hash = event.get_primary_hash()
+        primary_hash = _get_primary_hash(event)
         if event.project is None or event.group is None:
             print("Skipped {} as group or project information is invalid.\n".format(event))
             continue
+        event.get_raw_data = types.MethodType(_get_raw_data, event)
 
         eventstream.insert(
             group=event.group,
