commit 78a8a79c43d338a7215bd5bed39ed9c56a5d92f8
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 24 15:02:12 2012 -0800

    General improvements to tests (and bug fixes)

diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index ec81b3830c..c4d186d938 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -9,7 +9,8 @@ sentry.testutils
 from __future__ import absolute_import
 
 import base64
-from exam import fixture
+from exam import Exam, fixture, before  # NOQA
+from functools import wraps
 
 from sentry.conf import settings
 from sentry.utils import json
@@ -30,6 +31,16 @@ from django.utils.importlib import import_module
 from sentry.models import Project, ProjectOption, Option, Team
 
 
+def with_settings(**mapping):
+    def wrapped(func):
+        @wraps(func)
+        def _wrapped(*args, **kwargs):
+            with Settings(**mapping):
+                return func(*args, **kwargs)
+        return _wrapped
+    return wrapped
+
+
 class Settings(object):
     """
     Allows you to define settings that are required for this function to work.
@@ -67,7 +78,7 @@ class Settings(object):
                 setattr(settings, k, v)
 
 
-class BaseTestCase(object):
+class BaseTestCase(Exam):
     urls = 'tests.sentry.web.urls'
 
     Settings = Settings
diff --git a/src/sentry/web/forms/teams.py b/src/sentry/web/forms/teams.py
index 0a1f79699b..ef2bc9e3d2 100644
--- a/src/sentry/web/forms/teams.py
+++ b/src/sentry/web/forms/teams.py
@@ -17,7 +17,8 @@ class RemoveTeamForm(forms.Form):
 
 
 class NewTeamForm(forms.ModelForm):
-    name = forms.CharField(label=_('Team Name'), max_length=200, widget=forms.TextInput(attrs={'placeholder': _('My Team Name')}))
+    name = forms.CharField(label=_('Team Name'), max_length=200,
+        widget=forms.TextInput(attrs={'placeholder': _('My Team Name')}))
 
     class Meta:
         fields = ('name',)
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 58ad438c12..eced007221 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -92,12 +92,14 @@ def new_project(request):
         project = project_form.save(commit=False)
         if not project.owner:
             project.owner = request.user
+
         if is_new_team:
             team = new_team_form.save(commit=False)
             team.owner = project.owner
             team.save()
         else:
             team = select_team_form.cleaned_data['team']
+
         project.team = team
         project.save()
         return HttpResponseRedirect(reverse('sentry-project-client-help', args=[project.slug]))
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 6568f5277d..9d03802e58 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -75,8 +75,15 @@ def manage_team(request, team):
         'owner': team.owner,
     }, instance=team)
 
+    # XXX: form.is_valid() changes the foreignkey
+    original_owner = team.owner
     if form.is_valid():
+
         team = form.save()
+        if team.owner != original_owner:
+            # Update access for new membership if it's changed
+            # (e.g. member used to be USER, but is now OWNER)
+            team.member_set.filter(user=team.owner).update(type=MEMBER_OWNER)
 
         return HttpResponseRedirect(request.path + '?success=1')
 
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 181f20933c..7b95779f15 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -75,3 +75,5 @@ class ManageProjectTeamTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed('sentry/projects/team.html')
         self.assertIn('pending_member_list', resp.context)
+        self.assertIn('member_list', resp.context)
+        self.assertIn('can_add_member', resp.context)
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index a7226fe42e..d0a8d9ca83 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -9,20 +9,12 @@ from django.core.urlresolvers import reverse
 
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.models import Team, TeamMember, PendingTeamMember
-from sentry.testutils import fixture
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, fixture, before, with_settings
 
 
 class BaseTeamTest(TestCase):
     fixtures = ['tests/fixtures/views.json']
 
-    @fixture
-    def user(self):
-        user = User(username="user", email="admin@localhost", is_staff=False, is_superuser=False)
-        user.set_password('password')
-        user.save()
-        return user
-
     @fixture
     def user2(self):
         user = User.objects.create(username="other", email="other@localhost")
@@ -37,9 +29,9 @@ class BaseTeamTest(TestCase):
     def tm2(self):
         return self.team.member_set.get(user=self.user2)
 
-    def setUp(self):
-        self.team = Team.objects.create(name='foo', slug='foo', owner=self.user)
-        assert self.client.login(username=self.user.username, password='password')
+    @before
+    def login_user(self):
+        self.login_as(self.user)
 
 
 class TeamListTest(BaseTeamTest):
@@ -67,6 +59,7 @@ class NewTeamTest(BaseTeamTest):
         self.assertTemplateUsed(resp, 'sentry/teams/new.html')
 
     @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=True))
+    @mock.patch('django.contrib.auth.models.User.has_perm', mock.Mock(return_value=False))
     def test_valid_params(self):
         resp = self.client.post(self.path, {
             'name': 'Test Team',
@@ -114,6 +107,7 @@ class ManageTeamTest(BaseTeamTest):
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/teams/manage.html')
 
+    @mock.patch('django.contrib.auth.models.User.has_perm', mock.Mock(return_value=False))
     def test_valid_params(self):
         path = reverse('sentry-manage-team', args=[self.team.slug])
         resp = self.client.post(path, {
@@ -124,6 +118,25 @@ class ManageTeamTest(BaseTeamTest):
         team = Team.objects.get(pk=self.team.pk)
         self.assertEquals(team.name, 'bar')
 
+    @mock.patch('django.contrib.auth.models.User.has_perm', mock.Mock(return_value=True))
+    @with_settings(SENTRY_DEFAULT_PROJECT_ACCESS='MEMBER_OWNER')
+    def test_superuser_can_set_owner(self):
+        path = reverse('sentry-manage-team', args=[self.team.slug])
+        resp = self.client.post(path, {
+            'name': self.team.name,
+            'owner': self.user2.username,
+        })
+        self.assertNotEquals(resp.status_code, 200)
+
+        team = Team.objects.get(id=self.team.id)
+
+        assert team.owner == self.user2
+
+        members = [(t.user, t.type) for t in self.team.member_set.all()]
+
+        assert (self.user2, MEMBER_OWNER) in members
+        assert (self.user, MEMBER_OWNER) in members
+
 
 class RemoveTeamTest(BaseTeamTest):
     @mock.patch('sentry.web.frontend.teams.can_remove_team', mock.Mock(return_value=False))
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 16402fb577..d4b83d685d 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -7,27 +7,18 @@ import json
 
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
-from exam import fixture
 
 from sentry.conf import settings
 from sentry.constants import MEMBER_USER
 from sentry.models import Group, Project, TeamMember, Team
-
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, fixture, before
 
 logger = logging.getLogger(__name__)
 
 
 class BaseViewTest(TestCase):
-    @fixture
-    def user(self):
-        user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
-        user.set_password('password')
-        user.save()
-        return user
-
     def login(self):
-        self.client.login(username=self.user.username, password='password')
+        self.login_as(self.user)
 
 
 class DashboardTest(BaseViewTest):
@@ -127,14 +118,16 @@ class StatsTest(BaseViewTest):
 class SentryViewsTest(BaseViewTest):
     fixtures = ['tests/fixtures/views.json']
 
+    @before
+    def login_user(self):
+        self.login_as(self.user)
+
     def test_index(self):
-        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry', kwargs={'project_id': 1}) + '?sort=freq', follow=False)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
 
     def test_group_details(self):
-        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group', kwargs={'project_id': 1, 'group_id': 2}), follow=False)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/details.html')
@@ -143,7 +136,6 @@ class SentryViewsTest(BaseViewTest):
         self.assertEquals(resp.context['group'], group)
 
     def test_group_event_list(self):
-        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group-events', kwargs={'project_id': 1, 'group_id': 2}), follow=False)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
@@ -152,7 +144,6 @@ class SentryViewsTest(BaseViewTest):
         self.assertEquals(resp.context['group'], group)
 
     def test_group_message_details(self):
-        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group-event', kwargs={'project_id': 1, 'group_id': 2, 'event_id': 4}), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/event.html')
@@ -161,7 +152,6 @@ class SentryViewsTest(BaseViewTest):
         self.assertEquals(resp.context['group'], group)
 
     def test_group_json_multi(self):
-        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group-events-json', kwargs={'project_id': 1, 'group_id': 2}))
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/json')
@@ -172,28 +162,24 @@ class SentryViewsTest(BaseViewTest):
         self.assertEquals(resp.status_code, 400)
 
     def test_group_events_details_json(self):
-        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group-event-json', kwargs={'project_id': 1, 'group_id': 2, 'event_id_or_latest': 'latest'}))
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/json')
         self.assertEquals(json.loads(resp.content)['level'], 'error')
 
     def test_manage_users(self):
-        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-admin-users'), follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/admin/users/list.html')
 
     def test_event_list(self):
-        self.client.login(username=self.user.username, password='password')
-        resp = self.client.get(reverse('sentry-events', kwargs={'project_id': 1}))
+        resp = self.client.get(reverse('sentry-events', kwargs={'project_id': self.project.id}))
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/events/event_list.html')
 
     def test_replay_event(self):
         # bad event_id
-        self.client.login(username=self.user.username, password='password')
-        resp = self.client.get(reverse('sentry-replay', kwargs={'project_id': 1, 'event_id': 1}))
+        resp = self.client.get(reverse('sentry-replay', kwargs={'project_id': self.project.id, 'event_id': 1}))
         self.assertEquals(resp.status_code, 302)
 
         # valid params
@@ -469,24 +455,18 @@ class RemoveTeamMemberTest(PermissionBase):
 
 
 class SentrySearchTest(TestCase):
-    def setUp(self):
-        self.client.login(username=self.user.username, password='password')
-
-    @fixture
-    def user(self):
-        user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
-        user.set_password('password')
-        user.save()
-        return user
+    @before
+    def login_user(self):
+        self.login_as(self.user)
 
     @fixture
     def path(self):
-        return reverse('sentry-search', kwargs={'project_id': 1})
+        return reverse('sentry-search', kwargs={'project_id': self.project.id})
 
     def test_checksum_query(self):
         checksum = 'a' * 32
         g = Group.objects.create(
-            project_id=1,
+            project=self.project,
             logger='root',
             culprit='a',
             checksum=checksum,
@@ -500,14 +480,14 @@ class SentrySearchTest(TestCase):
     def test_dupe_checksum(self):
         checksum = 'a' * 32
         g1 = Group.objects.create(
-            project_id=1,
+            project=self.project,
             logger='root',
             culprit='a',
             checksum=checksum,
             message='hi',
         )
         g2 = Group.objects.create(
-            project_id=1,
+            project=self.project,
             logger='root',
             culprit='b',
             checksum=checksum,
