commit 07f28433b3c114a978a1ee4b91594d0b3d2f7f83
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Fri May 17 09:06:35 2019 +0200

    ref(symbolicator): Prepare for minidumps without thread lists (#13252)
    
    Prepares the symbolicator code to handle minidumps without thread lists.
    
    Minidumps usually contain a non-empty thread list. If that list is missing, the processor emits a special error code. However, it might still contain OS and device info, which we can extract. This prepares the symbolicator code to handle this code correctly.

diff --git a/src/sentry/lang/native/minidump.py b/src/sentry/lang/native/minidump.py
index b3bcdb23d6..26a1ac3293 100644
--- a/src/sentry/lang/native/minidump.py
+++ b/src/sentry/lang/native/minidump.py
@@ -10,6 +10,8 @@ from symbolic import normalize_arch, ProcessState, id_from_breakpad
 
 from sentry.lang.native.utils import get_sdk_from_event, handle_symbolication_failed, merge_symbolicated_frame
 from sentry.lang.native.symbolicator import merge_symbolicator_image
+from sentry.lang.native.symbolizer import SymbolicationFailed
+from sentry.models.eventerror import EventError
 from sentry.attachments import attachment_cache
 from sentry.coreapi import cache_key_for_event
 from sentry.utils.safe import get_path, set_path, setdefault_path
@@ -268,7 +270,12 @@ def merge_symbolicator_minidump_response(data, response):
     data_exception['type'] = response.get('crash_reason')
 
     data_threads = []
-    data['threads'] = {'values': data_threads}
+    if response['stacktraces']:
+        data['threads'] = {'values': data_threads}
+    else:
+        error = SymbolicationFailed(message='minidump has no thread list',
+                                    type=EventError.NATIVE_SYMBOLICATOR_FAILED)
+        handle_symbolication_failed(error, data=data)
 
     for complete_stacktrace in response['stacktraces']:
         is_requesting = complete_stacktrace.get('is_requesting')
@@ -301,5 +308,3 @@ def merge_symbolicator_minidump_response(data, response):
             new_frame = {}
             merge_symbolicated_frame(new_frame, complete_frame)
             data_stacktrace['frames'].append(new_frame)
-
-    # TODO(markus): Add exception data here once merge_process_state_event is gone
