commit 05923b638ff285509e23f49f63b95a462b2bc784
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Aug 22 11:23:28 2018 -0700

    feat(discover): Make views toggleable (#9463)
    
    Add a toggle button that allows toggling between table/line/bar results. Motivation for this is that it's a lot more readable than rendering everything in one long view.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index e75fd82bcf..be1c423dda 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -17,8 +17,7 @@ import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 
 import Aggregations from './aggregations';
 import Conditions from './conditions';
-import ResultTable from './result/table';
-import ResultChart from './result/chart';
+import Result from './result';
 import Intro from './intro';
 
 import {isValidCondition} from './conditions/utils';
@@ -273,8 +272,9 @@ export default class OrganizationDiscover extends React.Component {
             </Flex>
           </Box>
           <Box w={[2 / 3, 2 / 3, 2 / 3, 3 / 4]} pl={2}>
-            {chartData && <ResultChart data={chartData} query={chartQuery} />}
-            {result && <ResultTable result={result} />}
+            {result && (
+              <Result data={result} chartData={chartData} chartQuery={chartQuery} />
+            )}
             {!result && <Intro />}
           </Box>
         </Flex>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/chart.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/chart.jsx
deleted file mode 100644
index f3cb674c63..0000000000
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/chart.jsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import React from 'react';
-import moment from 'moment';
-import PropTypes from 'prop-types';
-
-import BarChart from 'app/components/charts/barChart';
-import LineChart from 'app/components/charts/lineChart';
-
-export default class Result extends React.Component {
-  static propTypes = {
-    data: PropTypes.object.isRequired,
-    query: PropTypes.object.isRequired,
-  };
-
-  // Converts a value to a string for the chart label. This could
-  // potentially cause incorrect grouping, e.g. if the value null and string
-  // 'null' are both present in the same series they will be merged into 1 value
-  getLabel(value) {
-    if (typeof value === 'object') {
-      try {
-        value = JSON.stringify(value);
-      } catch (err) {
-        // eslint-disable-next-line no-console
-        console.error(err);
-      }
-    }
-
-    return value;
-  }
-
-  getChartData(queryData, groupbyFields) {
-    const {aggregations} = this.props.query;
-    // We only chart the first aggregation for now
-    const aggregate = aggregations[0][2];
-    const dates = [
-      ...new Set(queryData.map(entry => moment.utc(entry.time * 1000).format('MMM Do'))),
-    ];
-    const output = {};
-    queryData.forEach(data => {
-      const key = groupbyFields.length
-        ? groupbyFields.map(field => this.getLabel(data[field])).join(',')
-        : aggregate;
-      if (key in output) {
-        output[key].data.push({
-          value: data[aggregate],
-          name: moment.utc(data.time * 1000).format('MMM Do'),
-        });
-      } else {
-        output[key] = {
-          data: [
-            {value: data[aggregate], name: moment.utc(data.time * 1000).format('MMM Do')},
-          ],
-        };
-      }
-    });
-    const result = [];
-    for (let key in output) {
-      const addDates = dates.filter(
-        date => !output[key].data.map(entry => entry.name).includes(date)
-      );
-      for (let i = 0; i < addDates.length; i++) {
-        output[key].data.push({
-          value: null,
-          name: addDates[i],
-        });
-      }
-
-      result.push({seriesName: key, data: output[key].data});
-    }
-    return result;
-  }
-
-  render() {
-    const {fields} = this.props.query;
-    const {data} = this.props.data;
-
-    const chartData = this.getChartData(data, fields);
-
-    return (
-      <div>
-        <LineChart series={chartData} style={{height: 300}} />
-        <BarChart series={chartData} stacked={true} style={{height: 300}} />
-      </div>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
new file mode 100644
index 0000000000..7c356d6a56
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -0,0 +1,166 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import classNames from 'classnames';
+import styled from 'react-emotion';
+import {Box, Flex} from 'grid-emotion';
+import moment from 'moment';
+
+import {t} from 'app/locale';
+import BarChart from 'app/components/charts/barChart';
+import LineChart from 'app/components/charts/lineChart';
+
+import Table from './table';
+
+export default class Result extends React.Component {
+  static propTypes = {
+    data: PropTypes.object,
+    chartData: PropTypes.object,
+    chartQuery: PropTypes.object,
+  };
+
+  constructor() {
+    super();
+    this.state = {
+      view: 'table',
+    };
+  }
+
+  componentWillReceiveProps(nextProps) {
+    if (!nextProps.chartData && this.state.view !== 'table') {
+      this.setState({
+        view: 'table',
+      });
+    }
+  }
+
+  // Converts a value to a string for the chart label. This could
+  // potentially cause incorrect grouping, e.g. if the value null and string
+  // 'null' are both present in the same series they will be merged into 1 value
+  getLabel(value) {
+    if (typeof value === 'object') {
+      try {
+        value = JSON.stringify(value);
+      } catch (err) {
+        // eslint-disable-next-line no-console
+        console.error(err);
+      }
+    }
+
+    return value;
+  }
+
+  getChartData(queryData, groupbyFields) {
+    const {aggregations} = this.props.chartQuery;
+    // We only chart the first aggregation for now
+    const aggregate = aggregations[0][2];
+    const dates = [
+      ...new Set(queryData.map(entry => moment.utc(entry.time * 1000).format('MMM Do'))),
+    ];
+    const output = {};
+    queryData.forEach(data => {
+      const key = groupbyFields.length
+        ? groupbyFields.map(field => this.getLabel(data[field])).join(',')
+        : aggregate;
+      if (key in output) {
+        output[key].data.push({
+          value: data[aggregate],
+          name: moment.utc(data.time * 1000).format('MMM Do'),
+        });
+      } else {
+        output[key] = {
+          data: [
+            {value: data[aggregate], name: moment.utc(data.time * 1000).format('MMM Do')},
+          ],
+        };
+      }
+    });
+    const result = [];
+    for (let key in output) {
+      const addDates = dates.filter(
+        date => !output[key].data.map(entry => entry.name).includes(date)
+      );
+      for (let i = 0; i < addDates.length; i++) {
+        output[key].data.push({
+          value: null,
+          name: addDates[i],
+        });
+      }
+
+      result.push({seriesName: key, data: output[key].data});
+    }
+    return result;
+  }
+
+  renderToggle() {
+    const options = [{id: 'table', name: t('Table')}];
+
+    if (this.props.chartData) {
+      options.push({id: 'line', name: t('Line')}, {id: 'bar', name: t('Bar')});
+    }
+
+    return (
+      <Flex justify="flex-end" align="center" my={2}>
+        <div className="btn-group">
+          {options.map(opt => {
+            const active = opt.id === this.state.view;
+            return (
+              <a
+                key={opt.id}
+                className={classNames('btn btn-default btn-sm', {active})}
+                onClick={() => {
+                  this.setState({view: opt.id});
+                }}
+              >
+                {opt.name}
+              </a>
+            );
+          })}
+        </div>
+      </Flex>
+    );
+  }
+
+  renderSummary() {
+    const {data, chartData} = this.props;
+    const summaryData = this.state.view === 'table' ? data : chartData;
+
+    return (
+      <Summary>
+        snuba query time: {summaryData.timing.duration_ms}ms, {summaryData.data.length}{' '}
+        rows
+      </Summary>
+    );
+  }
+
+  render() {
+    const {data, chartQuery, chartData} = this.props;
+    const {view} = this.state;
+
+    return (
+      <div>
+        {this.renderToggle()}
+
+        {view === 'table' && <Table data={data} />}
+        {view === 'line' && (
+          <LineChart
+            series={this.getChartData(chartData.data, chartQuery.fields)}
+            height={300}
+          />
+        )}
+        {view === 'bar' && (
+          <BarChart
+            series={this.getChartData(chartData.data, chartQuery.fields)}
+            stacked={true}
+            height={300}
+          />
+        )}
+        {this.renderSummary()}
+      </div>
+    );
+  }
+}
+
+const Summary = styled(Box)`
+  color: ${p => p.theme.gray6};
+  font-size: 12px;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
index 09cb8b42b0..085492d8f0 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
@@ -2,7 +2,6 @@ import React from 'react';
 import {MultiGrid, AutoSizer} from 'react-virtualized';
 import PropTypes from 'prop-types';
 import styled from 'react-emotion';
-import {Box} from 'grid-emotion';
 
 import theme from 'app/utils/theme';
 import AutoSelectText from 'app/components/autoSelectText';
@@ -14,7 +13,7 @@ import {getDisplayValue, getDisplayText} from './utils';
  */
 export default class ResultTable extends React.Component {
   static propTypes = {
-    result: PropTypes.object.isRequired,
+    data: PropTypes.object.isRequired,
   };
 
   componentDidMount() {
@@ -23,13 +22,13 @@ export default class ResultTable extends React.Component {
   }
 
   componentWillReceiveProps(nextProps) {
-    if (this.props.result.meta !== nextProps.result.meta) {
+    if (this.props.data.meta !== nextProps.data.meta) {
       this.grid.recomputeGridSize();
     }
   }
 
   cellRenderer = ({key, rowIndex, columnIndex, style}) => {
-    const {meta, data} = this.props.result;
+    const {meta, data} = this.props.data;
     const colName = meta[columnIndex].name;
 
     return (
@@ -50,7 +49,7 @@ export default class ResultTable extends React.Component {
     const MIN_COL_WIDTH = 100;
     const MAX_COL_WIDTH = 400;
 
-    const {meta, data} = this.props.result;
+    const {meta, data} = this.props.data;
 
     if (meta.length === 1) {
       return tableWidth;
@@ -82,7 +81,7 @@ export default class ResultTable extends React.Component {
   };
 
   renderTable() {
-    const {meta, data} = this.props.result;
+    const {meta, data} = this.props.data;
 
     const maxVisibleResults = Math.min(data.length, 15);
 
@@ -115,20 +114,13 @@ export default class ResultTable extends React.Component {
   }
 
   render() {
-    const {error, timing, data} = this.props.result;
+    const {error} = this.props.data;
 
     if (error) {
       return <div>{error}</div>;
     }
 
-    return (
-      <div>
-        <Summary mb={1}>
-          snuba query time: {timing.duration_ms}ms, {data.length} rows
-        </Summary>
-        {this.renderTable()}
-      </div>
-    );
+    return <div>{this.renderTable()}</div>;
   }
 }
 
@@ -146,7 +138,3 @@ const Cell = styled('div')`
   line-height: 30px;
   padding: 0 4px;
 `;
-
-const Summary = styled(Box)`
-  font-size: 12px;
-`;
diff --git a/tests/js/spec/views/organizationDiscover/result/chart.spec.jsx b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
similarity index 90%
rename from tests/js/spec/views/organizationDiscover/result/chart.spec.jsx
rename to tests/js/spec/views/organizationDiscover/result/index.spec.jsx
index a406197022..793bae9296 100644
--- a/tests/js/spec/views/organizationDiscover/result/chart.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
@@ -1,9 +1,9 @@
 import React from 'react';
 import {shallow} from 'enzyme';
 
-import ResultChart from 'app/views/organizationDiscover/result/chart';
+import Result from 'app/views/organizationDiscover/result';
 
-describe('Chart Data', function() {
+describe('Result', function() {
   const data = {
     data: [
       {
@@ -55,15 +55,18 @@ describe('Chart Data', function() {
         time: 1532070000,
       },
     ],
+    timing: {
+      duration_ms: 5,
+    },
   };
   const query = {
     aggregations: [['count()', null, 'count']],
     fields: ['platform', 'exception_stacks.type'],
   };
 
-  const wrapper = shallow(<ResultChart data={data} query={query} />);
+  const wrapper = shallow(<Result data={data} chartData={data} chartQuery={query} />);
 
-  describe('getLineChartData()', function() {
+  describe('getChartData()', function() {
     const expectedData = [
       {
         data: [
