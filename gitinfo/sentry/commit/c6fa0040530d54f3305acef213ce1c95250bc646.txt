commit c6fa0040530d54f3305acef213ce1c95250bc646
Author: Scott Cooper <scttcper@gmail.com>
Date:   Wed May 6 11:47:39 2020 -0700

    fix(ui): remove titlecase when displaying environment names (#18626)
    
    Environments are case sensitive, applying titlecase creates confusion around which environment is being changed/selected.

diff --git a/src/sentry/static/sentry/app/stores/organizationEnvironmentsStore.jsx b/src/sentry/static/sentry/app/stores/organizationEnvironmentsStore.jsx
index 08bf399b76..84a8009b40 100644
--- a/src/sentry/static/sentry/app/stores/organizationEnvironmentsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/organizationEnvironmentsStore.jsx
@@ -1,10 +1,7 @@
 import Reflux from 'reflux';
 
-import {toTitleCase} from 'app/utils';
 import EnvironmentActions from 'app/actions/environmentActions';
-
-const DEFAULT_EMPTY_ENV_NAME = '(No Environment)';
-const DEFAULT_EMPTY_ROUTING_NAME = 'none';
+import {getDisplayName, getUrlRoutingName} from 'app/utils/environment';
 
 const OrganizationEnvironmentsStore = Reflux.createStore({
   init() {
@@ -27,10 +24,10 @@ const OrganizationEnvironmentsStore = Reflux.createStore({
       id: item.id,
       name: item.name,
       get displayName() {
-        return toTitleCase(item.name) || DEFAULT_EMPTY_ENV_NAME;
+        return getDisplayName(item);
       },
       get urlRoutingName() {
-        return encodeURIComponent(item.name) || DEFAULT_EMPTY_ROUTING_NAME;
+        return getUrlRoutingName(item);
       },
     };
   },
diff --git a/src/sentry/static/sentry/app/utils/environment.tsx b/src/sentry/static/sentry/app/utils/environment.tsx
index bab0b5aa80..0fd77e7858 100644
--- a/src/sentry/static/sentry/app/utils/environment.tsx
+++ b/src/sentry/static/sentry/app/utils/environment.tsx
@@ -1,5 +1,4 @@
 import {Environment} from 'app/types';
-import {toTitleCase} from 'app/utils';
 
 const DEFAULT_EMPTY_ROUTING_NAME = 'none';
 const DEFAULT_EMPTY_ENV_NAME = '(No Environment)';
@@ -9,5 +8,5 @@ export function getUrlRoutingName(env: Omit<Environment, 'id'>) {
 }
 
 export function getDisplayName(env: Omit<Environment, 'id'>) {
-  return toTitleCase(env.name) || DEFAULT_EMPTY_ENV_NAME;
+  return env.name || DEFAULT_EMPTY_ENV_NAME;
 }
diff --git a/tests/js/sentry-test/fixtures/environments.js b/tests/js/sentry-test/fixtures/environments.js
index 6dd4de12aa..21ba223539 100644
--- a/tests/js/sentry-test/fixtures/environments.js
+++ b/tests/js/sentry-test/fixtures/environments.js
@@ -5,6 +5,7 @@ export function Environments(hidden) {
     return [
       {id: '1', name: 'production', displayName: 'Production', isHidden: false},
       {id: '2', name: 'staging', displayName: 'Staging', isHidden: false},
+      {id: '3', name: 'STAGING', displayName: 'STAGING', isHidden: true},
     ];
   }
 }
diff --git a/tests/js/spec/components/group/releaseStats.spec.jsx b/tests/js/spec/components/group/releaseStats.spec.jsx
index e8ae3da510..7caa53a1b5 100644
--- a/tests/js/spec/components/group/releaseStats.spec.jsx
+++ b/tests/js/spec/components/group/releaseStats.spec.jsx
@@ -41,7 +41,9 @@ describe('GroupReleaseStats', function() {
 
   it('renders specific environments', function() {
     const wrapper = createWrapper({environments: TestStubs.Environments()});
-    expect(wrapper.find('[data-test-id="env-label"]').text()).toBe('Production, Staging');
+    expect(wrapper.find('[data-test-id="env-label"]').text()).toBe(
+      'Production, Staging, STAGING'
+    );
     expect(wrapper.find('GroupReleaseChart')).toHaveLength(2);
     expect(wrapper.find('SeenInfo')).toHaveLength(2);
   });
diff --git a/tests/js/spec/stores/organizationEnvironmentsStore.spec.jsx b/tests/js/spec/stores/organizationEnvironmentsStore.spec.jsx
index 26edeb3c2c..797fed3f1c 100644
--- a/tests/js/spec/stores/organizationEnvironmentsStore.spec.jsx
+++ b/tests/js/spec/stores/organizationEnvironmentsStore.spec.jsx
@@ -19,9 +19,17 @@ describe('OrganizationEnvironmentsStore', function() {
 
     const {environments} = OrganizationEnvironmentsStore.get();
 
-    expect(environments.length).toBe(2);
-    expect(environments.map(env => env.name)).toEqual(['production', 'staging']);
-    expect(environments.map(env => env.displayName)).toEqual(['Production', 'Staging']);
+    expect(environments).toHaveLength(3);
+    expect(environments.map(env => env.name)).toEqual([
+      'production',
+      'staging',
+      'STAGING',
+    ]);
+    expect(environments.map(env => env.displayName)).toEqual([
+      'production',
+      'staging',
+      'STAGING',
+    ]);
   });
 
   it('has the correct loading state', async function() {
diff --git a/tests/js/spec/views/settings/projectAlerts/list.spec.jsx b/tests/js/spec/views/settings/projectAlerts/list.spec.jsx
index 16336bc8d1..fe71a5d526 100644
--- a/tests/js/spec/views/settings/projectAlerts/list.spec.jsx
+++ b/tests/js/spec/views/settings/projectAlerts/list.spec.jsx
@@ -59,7 +59,7 @@ describe('ProjectAlertsList', function() {
         .find('RuleDescription')
         .at(0)
         .text()
-    ).toBe('Environment: Staging');
+    ).toBe('Environment: staging');
 
     expect(
       wrapper
@@ -94,7 +94,7 @@ describe('ProjectAlertsList', function() {
         .find('RuleDescription')
         .at(0)
         .text()
-    ).toBe('Environment: Staging');
+    ).toBe('Environment: staging');
     expect(wrapper.find('RuleName')).toHaveLength(0);
   });
 });
