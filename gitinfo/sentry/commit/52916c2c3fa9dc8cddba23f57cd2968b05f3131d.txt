commit 52916c2c3fa9dc8cddba23f57cd2968b05f3131d
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 9 11:56:06 2012 -0700

    You can now pass an address and a number of workers to services

diff --git a/setup.py b/setup.py
index 9eb5d3aeee..2b5f19ed49 100755
--- a/setup.py
+++ b/setup.py
@@ -69,7 +69,7 @@ install_requires = [
 
 setup(
     name='sentry',
-    version='5.0.3',
+    version='5.0.4',
     author='David Cramer',
     author_email='dcramer@gmail.com',
     url='http://www.getsentry.com',
diff --git a/src/sentry/management/commands/start.py b/src/sentry/management/commands/start.py
index 15012a0841..621c8b5bc7 100644
--- a/src/sentry/management/commands/start.py
+++ b/src/sentry/management/commands/start.py
@@ -24,11 +24,25 @@ class Command(BaseCommand):
             action='store_false',
             dest='upgrade',
             default=True),
+        make_option('--workers', '-w',
+            dest='workers',
+            type=int,
+            default=None),
     )
 
-    def handle(self, service_name='http', upgrade=True, **options):
+    def handle(self, service_name='http', address=None, upgrade=True, **options):
         from sentry.services import http, udp
 
+        if address:
+            if ':' in address:
+                host, port = address.split(':', 1)
+                port = int(port)
+            else:
+                host = address
+                port = None
+        else:
+            host, port = None, None
+
         services = {
             'http': http.SentryHTTPServer,
             'udp': udp.SentryUDPServer,
@@ -48,7 +62,10 @@ class Command(BaseCommand):
             raise CommandError('%r is not a valid service' % service_name)
 
         service = service_class(
-            debug=options['debug'],
+            debug=options.get('debug'),
+            host=host,
+            port=port,
+            workers=options.get('workers'),
         )
 
         print "Running service: %r" % service_name
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index 2f3180b681..f427c91302 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -51,11 +51,12 @@ class SentryApplication(djangoapp.DjangoApplication):
 class SentryHTTPServer(Service):
     name = 'http'
 
-    def __init__(self, host=None, port=None, debug=False):
+    def __init__(self, host=None, port=None, debug=False, workers=None):
         from sentry.conf import settings
 
         self.host = host or settings.WEB_HOST
         self.port = port or settings.WEB_PORT
+        self.workers = workers
 
         # import cProfile, os
 
@@ -69,15 +70,15 @@ class SentryHTTPServer(Service):
         #         cProfile.runctx('orig_init_process()', globals(), locals(), ofile)
         #     worker.init_process = profiling_init_process.__get__(worker)
 
-        options = {
-            'bind': '%s:%s' % (self.host, self.port),
-            'debug': debug,
-            'daemon': False,
-            'timeout': 30,
-            # 'post_fork': post_fork,
-        }
-        options.update(settings.WEB_OPTIONS or {})
+        options = (settings.WEB_OPTIONS or {}).copy()
+        options['bind'] = '%s:%s' % (self.host, self.port)
+        options['debug'] = debug
+        options['daemon'] = False
+        options.setdefault('timeout', 30)
+        if workers:
+            options['workers'] = workers
 
+        print options
         self.app = SentryApplication(options)
 
     def run(self):
diff --git a/src/sentry/services/udp.py b/src/sentry/services/udp.py
index 26fede09f5..08a2ef99ee 100644
--- a/src/sentry/services/udp.py
+++ b/src/sentry/services/udp.py
@@ -58,12 +58,13 @@ class BaseUDPServer(Service):
     _socket = None
     _spawn = None
 
-    def __init__(self, host=None, port=None, debug=False):
+    def __init__(self, host=None, port=None, debug=False, workers=POOL_SIZE):
         super(BaseUDPServer, self).__init__(debug=debug)
         from sentry.conf import settings
 
         self.host = host or settings.UDP_HOST
         self.port = port or settings.UDP_PORT
+        self.workers = workers
 
     def setup(self):
         assert self._socket and self._spawn, \
@@ -97,7 +98,7 @@ class EventletUDPServer(BaseUDPServer):
         import eventlet
         from eventlet.green import socket
         self._socket = socket.socket
-        self._pool = eventlet.GreenPool(size=self.POOL_SIZE)
+        self._pool = eventlet.GreenPool(size=self.workers)
         self._spawn = self._pool.spawn_n
 
 
@@ -108,7 +109,7 @@ class GeventUDPServer(BaseUDPServer):
     def setup(self):
         from gevent import socket, pool
         self._socket = socket.socket
-        self._pool = pool.Pool(size=self.POOL_SIZE)
+        self._pool = pool.Pool(size=self.workers)
         self._spawn = self._pool.spawn
 
 
