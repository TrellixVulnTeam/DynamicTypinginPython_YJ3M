commit 2a35098d5dae0a297d78f1062ad2d57e9f037375
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jan 16 13:26:09 2019 -0800

    feat(dashboard): Update discover query limits for widgets (APP-1008) (#11526)
    
    This updates the limit for discover queries from 1000 to 10,000. However we restrict the discover UI itself to remain at 1,000.

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index c3fa85f359..942a691938 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -43,7 +43,7 @@ class DiscoverQuerySerializer(serializers.Serializer):
         required=False,
         allow_null=True,
     )
-    limit = serializers.IntegerField(min_value=0, max_value=1000, required=False)
+    limit = serializers.IntegerField(min_value=0, max_value=10000, required=False)
     rollup = serializers.IntegerField(required=False)
     orderby = serializers.CharField(required=False)
     conditions = ListField(
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx
index af6c48e6a4..1fd97b58c7 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx
@@ -5,7 +5,7 @@ const anonymousUsersAffectedQuery = {
   fields: [],
   conditions: [['user.email', 'IS NULL', null]],
   aggregations: [['count()', null, 'Anonymous Users']],
-  limit: 1000,
+  limit: 2000,
 
   orderby: '-time',
   groupby: ['time'],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx
index d05c852bdd..fb431e81fc 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx
@@ -5,7 +5,7 @@ const events = {
   fields: [],
   conditions: [],
   aggregations: [['count()', null, 'Events']],
-  limit: 1000,
+  limit: 2000,
 
   orderby: '-time',
   groupby: ['time'],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx
index 20930e8334..880a34bd27 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx
@@ -5,7 +5,7 @@ const eventsByRelease = {
   fields: ['sentry:release'],
   conditions: [],
   aggregations: [['count()', null, 'Events']],
-  limit: 1000,
+  limit: 2000,
 
   orderby: '-time',
   groupby: ['time'],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx
index 5fb137d90c..36385cfbfc 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx
@@ -5,7 +5,7 @@ const handledVsUnhandledQuery = {
   fields: ['error.handled'],
   conditions: [],
   aggregations: [['count()', null, 'count']],
-  limit: 1000,
+  limit: 2000,
 
   orderby: '-time',
   groupby: ['time'],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
index 6d092e0e8a..f7d8d6aed0 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
@@ -5,7 +5,7 @@ const knownUsersAffectedQuery = {
   fields: [],
   conditions: [['user.email', 'IS NOT NULL', null]],
   aggregations: [['uniq', 'user.email', 'Known Users']],
-  limit: 1000,
+  limit: 2000,
 
   orderby: '-time',
   groupby: ['time'],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx
index 0d2a119664..389c786309 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx
@@ -5,7 +5,7 @@ const eventsQuery = {
   fields: ['url'],
   conditions: [],
   aggregations: [['count()', null, 'count']],
-  limit: 1000,
+  limit: 2000,
 
   orderby: '-time',
   groupby: ['time'],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
index bf460d6376..32cc9f8174 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
@@ -84,7 +84,7 @@ class DiscoverQuery extends React.Component {
     this.resetQueries();
 
     // Fetch
-    const promises = this.queryBuilders.map(builder => builder.fetch());
+    const promises = this.queryBuilders.map(builder => builder.fetchWithoutLimit());
     let results = await Promise.all(promises);
     let previousData = null;
     let data = null;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 1d973daaed..eabbe6f7bc 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -13,6 +13,8 @@ import MissingProjectWarningModal from './missingProjectWarningModal';
 import {COLUMNS, PROMOTED_TAGS, SPECIAL_TAGS} from './data';
 import {isValidAggregation} from './aggregations/utils';
 
+const API_LIMIT = 10000;
+
 const DEFAULTS = {
   projects: [],
   fields: ['id', 'issue.id', 'project.name', 'platform', 'timestamp'],
@@ -50,6 +52,7 @@ export default function createQueryBuilder(initial = {}, organization) {
     getExternal,
     updateField,
     fetch,
+    fetchWithoutLimit,
     getQueryByType,
     getColumns,
     load,
@@ -205,6 +208,39 @@ export default function createQueryBuilder(initial = {}, organization) {
       });
   }
 
+  /**
+   * Fetches either the query provided as an argument or the current query state
+   * if this is not provided and returns the result wrapped in a promise
+   *
+   * This is similar to `fetch` but does not support pagination and mirrors the API limit
+   *
+   * @param {Object} [data] Optional field to provide data to fetch
+   * @returns {Promise<Object|Error>}
+   */
+  function fetchWithoutLimit(data = getExternal()) {
+    const api = new Client();
+    const endpoint = `/organizations/${organization.slug}/discover/query/`;
+
+    // Reject immediately if no projects are available
+    if (!data.projects.length) {
+      return Promise.reject(new Error(t('No projects selected')));
+    }
+
+    if (typeof data.limit === 'number') {
+      if (data.limit < 1 || data.limit > API_LIMIT) {
+        return Promise.reject(new Error(t('Invalid limit parameter')));
+      }
+    }
+
+    if (moment.utc(data.start).isAfter(moment.utc(data.end))) {
+      return Promise.reject(new Error('Start date cannot be after end date'));
+    }
+
+    return api.requestPromise(endpoint, {method: 'POST', data}).catch(() => {
+      throw new Error(t('Error with query'));
+    });
+  }
+
   /**
    * Get the actual query to be run for each visualization type
    *
diff --git a/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx b/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
index ea4efcf5d7..eeab7c5feb 100644
--- a/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
+++ b/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
@@ -34,7 +34,7 @@ describe('OrganizationDashboard', function() {
       body: TestStubs.Environments(),
     });
     discoverMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
+      url: '/organizations/org-slug/discover/query/',
       method: 'POST',
       body: {
         data: [],
