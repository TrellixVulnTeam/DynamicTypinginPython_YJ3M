commit 647aba4457959bedcdb3b147ead8183ea03547d4
Author: Chris Fuller <cfuller@sentry.io>
Date:   Mon Jan 27 12:21:37 2020 -0500

    ref(workflow): Remove AlertRuleTrigger and AlertRuleTriggerAction API support (#16582)

diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e3a954b527..92e6f116d5 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -290,18 +290,6 @@ from sentry.incidents.endpoints.organization_alert_rule_details import (
 from sentry.incidents.endpoints.organization_alert_rule_index import (
     OrganizationAlertRuleIndexEndpoint,
 )
-from sentry.incidents.endpoints.organization_alert_rule_trigger_action_details import (
-    OrganizationAlertRuleTriggerActionDetailsEndpoint,
-)
-from sentry.incidents.endpoints.organization_alert_rule_trigger_action_index import (
-    OrganizationAlertRuleTriggerActionIndexEndpoint,
-)
-from sentry.incidents.endpoints.organization_alert_rule_trigger_details import (
-    OrganizationAlertRuleTriggerDetailsEndpoint,
-)
-from sentry.incidents.endpoints.organization_alert_rule_trigger_index import (
-    OrganizationAlertRuleTriggerIndexEndpoint,
-)
 from sentry.incidents.endpoints.project_alert_rule_details import ProjectAlertRuleDetailsEndpoint
 from sentry.incidents.endpoints.project_alert_rule_index import (
     ProjectAlertRuleIndexEndpoint,
@@ -581,26 +569,6 @@ urlpatterns = [
                     OrganizationAlertRuleIndexEndpoint.as_view(),
                     name="sentry-api-0-organization-alert-rules",
                 ),
-                url(
-                    r"^(?P<organization_slug>[^\/]+)/alert-rules/(?P<alert_rule_id>[^\/]+)/triggers/(?P<alert_rule_trigger_id>[^\/]+)/$",
-                    OrganizationAlertRuleTriggerDetailsEndpoint.as_view(),
-                    name="sentry-api-0-organization-alert-rule-trigger-details",
-                ),
-                url(
-                    r"^(?P<organization_slug>[^\/]+)/alert-rules/(?P<alert_rule_id>[^\/]+)/triggers/$",
-                    OrganizationAlertRuleTriggerIndexEndpoint.as_view(),
-                    name="sentry-api-0-organization-alert-rules-triggers",
-                ),
-                url(
-                    r"^(?P<organization_slug>[^\/]+)/alert-rules/(?P<alert_rule_id>[^\/]+)/triggers/(?P<alert_rule_trigger_id>[^\/]+)/actions/(?P<alert_rule_trigger_action_id>[^\/]+)/$",
-                    OrganizationAlertRuleTriggerActionDetailsEndpoint.as_view(),
-                    name="sentry-api-0-organization-alert-rule-trigger-action-details",
-                ),
-                url(
-                    r"^(?P<organization_slug>[^\/]+)/alert-rules/(?P<alert_rule_id>[^\/]+)/triggers/(?P<alert_rule_trigger_id>[^\/]+)/actions/$",
-                    OrganizationAlertRuleTriggerActionIndexEndpoint.as_view(),
-                    name="sentry-api-0-organization-alert-rules-trigger-actions",
-                ),
                 # Incidents
                 url(
                     r"^(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/activity/$",
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py
deleted file mode 100644
index 5d0a060ec2..0000000000
--- a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py
+++ /dev/null
@@ -1,49 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework import status
-from rest_framework.response import Response
-
-from sentry.api.serializers import serialize
-from sentry.incidents.endpoints.bases import OrganizationAlertRuleTriggerActionEndpoint
-from sentry.incidents.endpoints.serializers import AlertRuleTriggerActionSerializer
-from sentry.incidents.logic import delete_alert_rule_trigger_action, InvalidTriggerActionError
-
-
-class OrganizationAlertRuleTriggerActionDetailsEndpoint(OrganizationAlertRuleTriggerActionEndpoint):
-    def get(self, request, organization, alert_rule, alert_rule_trigger, alert_rule_trigger_action):
-        """
-        Fetch an alert rule trigger action.
-        ```````````````````````````````````
-        :auth: required
-        """
-        data = serialize(alert_rule_trigger_action, request.user)
-        return Response(data)
-
-    def put(self, request, organization, alert_rule, alert_rule_trigger, alert_rule_trigger_action):
-        serializer = AlertRuleTriggerActionSerializer(
-            context={
-                "organization": organization,
-                "alert_rule": alert_rule,
-                "alert_rule_trigger": alert_rule_trigger,
-                "access": request.access,
-            },
-            instance=alert_rule_trigger_action,
-            data=request.data,
-        )
-
-        if serializer.is_valid():
-            try:
-                alert_rule_trigger_action = serializer.save()
-            except InvalidTriggerActionError as e:
-                return Response(e.message, status=status.HTTP_400_BAD_REQUEST)
-            return Response(
-                serialize(alert_rule_trigger_action, request.user), status=status.HTTP_200_OK
-            )
-
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
-
-    def delete(
-        self, request, organization, alert_rule, alert_rule_trigger, alert_rule_trigger_action
-    ):
-        delete_alert_rule_trigger_action(alert_rule_trigger_action)
-        return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_index.py b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_index.py
deleted file mode 100644
index 478e0359f2..0000000000
--- a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_index.py
+++ /dev/null
@@ -1,56 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework import status
-from rest_framework.response import Response
-
-from sentry import features
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.paginator import OffsetPaginator
-from sentry.api.serializers import serialize
-from sentry.incidents.endpoints.bases import OrganizationAlertRuleTriggerEndpoint
-from sentry.incidents.endpoints.serializers import AlertRuleTriggerActionSerializer
-from sentry.incidents.logic import get_actions_for_trigger, InvalidTriggerActionError
-
-
-class OrganizationAlertRuleTriggerActionIndexEndpoint(OrganizationAlertRuleTriggerEndpoint):
-    def get(self, request, organization, alert_rule, alert_rule_trigger):
-        """
-        Fetches actions for a trigger
-        """
-        if not features.has("organizations:incidents", organization, actor=request.user):
-            raise ResourceDoesNotExist
-
-        return self.paginate(
-            request,
-            queryset=get_actions_for_trigger(alert_rule_trigger),
-            order_by="type",
-            paginator_cls=OffsetPaginator,
-            on_results=lambda x: serialize(x, request.user),
-            default_per_page=25,
-        )
-
-    def post(self, request, organization, alert_rule, alert_rule_trigger):
-        """
-        Create an action on a trigger
-        """
-        if not features.has("organizations:incidents", organization, actor=request.user):
-            raise ResourceDoesNotExist
-
-        serializer = AlertRuleTriggerActionSerializer(
-            context={
-                "organization": organization,
-                "alert_rule": alert_rule,
-                "trigger": alert_rule_trigger,
-                "access": request.access,
-            },
-            data=request.data,
-        )
-
-        if serializer.is_valid():
-            try:
-                action = serializer.save()
-            except InvalidTriggerActionError as e:
-                return Response(e.message, status=status.HTTP_400_BAD_REQUEST)
-            return Response(serialize(action, request.user), status=status.HTTP_201_CREATED)
-
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_details.py b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_details.py
deleted file mode 100644
index da4a7e68c0..0000000000
--- a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_details.py
+++ /dev/null
@@ -1,48 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework import status
-from rest_framework.response import Response
-
-from sentry.api.serializers import serialize
-from sentry.api.serializers.models.alert_rule_trigger import DetailedAlertRuleTriggerSerializer
-from sentry.incidents.endpoints.bases import OrganizationAlertRuleTriggerEndpoint
-from sentry.incidents.endpoints.serializers import AlertRuleTriggerSerializer
-from sentry.incidents.logic import AlreadyDeletedError, delete_alert_rule_trigger
-
-
-class OrganizationAlertRuleTriggerDetailsEndpoint(OrganizationAlertRuleTriggerEndpoint):
-    def get(self, request, organization, alert_rule, alert_rule_trigger):
-        """
-        Fetch an alert rule trigger.
-        ``````````````````
-        :auth: required
-        """
-        data = serialize(alert_rule_trigger, request.user, DetailedAlertRuleTriggerSerializer())
-        return Response(data)
-
-    def put(self, request, organization, alert_rule, alert_rule_trigger):
-        serializer = AlertRuleTriggerSerializer(
-            context={
-                "organization": organization,
-                "alert_rule": alert_rule,
-                "access": request.access,
-            },
-            instance=alert_rule_trigger,
-            data=request.data,
-            partial=True,
-        )
-
-        if serializer.is_valid():
-            trigger = serializer.save()
-            return Response(serialize(trigger, request.user), status=status.HTTP_200_OK)
-
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
-
-    def delete(self, request, organization, alert_rule, alert_rule_trigger):
-        try:
-            delete_alert_rule_trigger(alert_rule_trigger)
-            return Response(status=status.HTTP_204_NO_CONTENT)
-        except AlreadyDeletedError:
-            return Response(
-                "This trigger has already been deleted", status=status.HTTP_400_BAD_REQUEST
-            )
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_index.py b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_index.py
deleted file mode 100644
index 69b2692612..0000000000
--- a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_index.py
+++ /dev/null
@@ -1,52 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework import status
-from rest_framework.response import Response
-
-from sentry import features
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.paginator import OffsetPaginator
-from sentry.api.serializers import serialize
-from sentry.incidents.endpoints.bases import OrganizationAlertRuleEndpoint
-from sentry.incidents.endpoints.serializers import AlertRuleTriggerSerializer
-from sentry.incidents.logic import get_triggers_for_alert_rule
-
-
-class OrganizationAlertRuleTriggerIndexEndpoint(OrganizationAlertRuleEndpoint):
-    def get(self, request, organization, alert_rule):
-        """
-        Fetches triggers for an alert_rule
-        """
-        if not features.has("organizations:incidents", organization, actor=request.user):
-            raise ResourceDoesNotExist
-
-        return self.paginate(
-            request,
-            queryset=get_triggers_for_alert_rule(alert_rule),
-            order_by="-label",
-            paginator_cls=OffsetPaginator,
-            on_results=lambda x: serialize(x, request.user),
-            default_per_page=25,
-        )
-
-    def post(self, request, organization, alert_rule):
-        """
-        Create a trigger on an alert rule
-        """
-        if not features.has("organizations:incidents", organization, actor=request.user):
-            raise ResourceDoesNotExist
-
-        serializer = AlertRuleTriggerSerializer(
-            context={
-                "organization": organization,
-                "alert_rule": alert_rule,
-                "access": request.access,
-            },
-            data=request.data,
-        )
-
-        if serializer.is_valid():
-            trigger = serializer.save()
-            return Response(serialize(trigger, request.user), status=status.HTTP_201_CREATED)
-
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
index 20d61772df..ffd5c08ae3 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
@@ -1,5 +1,5 @@
 import {Client} from 'app/api';
-import {SavedIncidentRule, IncidentRule, Trigger} from './types';
+import {SavedIncidentRule, IncidentRule} from './types';
 
 function isSavedRule(rule: IncidentRule): rule is SavedIncidentRule {
   return !!rule.id;
@@ -46,16 +46,3 @@ export function deleteRule(
     method: 'DELETE',
   });
 }
-
-export function deleteTrigger(
-  api: Client,
-  orgId: string,
-  trigger: Trigger
-): Promise<void> {
-  return api.requestPromise(
-    `/organizations/${orgId}/alert-rules/${trigger.alertRuleId}/triggers/${trigger.id}`,
-    {
-      method: 'DELETE',
-    }
-  );
-}
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
deleted file mode 100644
index 6fc2a90594..0000000000
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
+++ /dev/null
@@ -1,175 +0,0 @@
-from __future__ import absolute_import
-
-import six
-from exam import fixture
-
-from sentry.api.serializers import serialize
-from sentry.incidents.endpoints.serializers import action_target_type_to_string
-from sentry.incidents.logic import (
-    create_alert_rule,
-    create_alert_rule_trigger,
-    create_alert_rule_trigger_action,
-)
-from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTriggerAction
-from sentry.snuba.models import QueryAggregations
-from sentry.testutils import APITestCase
-
-
-class AlertRuleTriggerActionDetailsBase(object):
-    endpoint = "sentry-api-0-organization-alert-rule-trigger-action-details"
-
-    @fixture
-    def organization(self):
-        return self.create_organization()
-
-    @fixture
-    def project(self):
-        return self.create_project(organization=self.organization)
-
-    @fixture
-    def user(self):
-        return self.create_user()
-
-    @fixture
-    def alert_rule(self):
-        return create_alert_rule(
-            self.organization,
-            [self.project],
-            "hello",
-            "level:error",
-            QueryAggregations.TOTAL,
-            10,
-            1,
-        )
-
-    @fixture
-    def trigger(self):
-        return create_alert_rule_trigger(
-            self.alert_rule, "hello", AlertRuleThresholdType.ABOVE, 1000, 400
-        )
-
-    @fixture
-    def action(self):
-        return create_alert_rule_trigger_action(
-            self.trigger,
-            AlertRuleTriggerAction.Type.EMAIL,
-            AlertRuleTriggerAction.TargetType.USER,
-            six.text_type(self.user.id),
-        )
-
-    def test_invalid_action_id(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_response(
-                self.organization.slug, self.alert_rule.id, self.trigger.id, 1234
-            )
-
-        assert resp.status_code == 404
-
-    def test_permissions(self):
-        self.create_team(organization=self.organization, members=[self.user])
-        self.login_as(self.create_user())
-        with self.feature("organizations:incidents"):
-            resp = self.get_response(
-                self.organization.slug, self.alert_rule.id, self.trigger.id, self.action.id
-            )
-
-        assert resp.status_code == 403
-
-    def test_no_feature(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        resp = self.get_response(
-            self.organization.slug, self.alert_rule.id, self.trigger.id, self.action.id
-        )
-        assert resp.status_code == 404
-
-
-class AlertRuleTriggerActionDetailsGetEndpointTest(AlertRuleTriggerActionDetailsBase, APITestCase):
-    def test_simple(self):
-        self.create_team(organization=self.organization, members=[self.user])
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_response(
-                self.organization.slug, self.alert_rule.id, self.trigger.id, self.action.id
-            )
-
-        assert resp.data == serialize(self.action)
-
-
-class AlertRuleTriggerActionDetailsPutEndpointTest(AlertRuleTriggerActionDetailsBase, APITestCase):
-    method = "put"
-
-    def test_simple(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_response(
-                self.organization.slug,
-                self.alert_rule.id,
-                self.trigger.id,
-                self.action.id,
-                type=AlertRuleTriggerAction.get_registered_type(
-                    AlertRuleTriggerAction.Type(self.action.type)
-                ).slug,
-                target_type=action_target_type_to_string[AlertRuleTriggerAction.TargetType.TEAM],
-                target_identifier=six.text_type(self.team.id),
-            )
-
-        self.action.target_type = AlertRuleTriggerAction.TargetType.TEAM.value
-        self.action.target_identifier = six.text_type(self.team.id)
-        assert resp.data == serialize(self.action)
-        assert resp.data["targetIdentifier"] == six.text_type(self.team.id)
-
-    def test_not_updated_fields(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(
-                self.organization.slug,
-                self.alert_rule.id,
-                self.trigger.id,
-                self.action.id,
-                type=AlertRuleTriggerAction.get_registered_type(
-                    AlertRuleTriggerAction.Type(self.action.type)
-                ).slug,
-                targetType=action_target_type_to_string[
-                    AlertRuleTriggerAction.TargetType(self.action.target_type)
-                ],
-                targetIdentifier=self.action.target_identifier,
-            )
-
-        # Alert rule should be exactly the same
-        assert resp.data == serialize(self.action)
-
-
-class AlertRuleTriggerActionDetailsDeleteEndpointTest(
-    AlertRuleTriggerActionDetailsBase, APITestCase
-):
-    method = "delete"
-
-    def test_simple(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            self.get_valid_response(
-                self.organization.slug,
-                self.alert_rule.id,
-                self.trigger.id,
-                self.action.id,
-                status_code=204,
-            )
-
-        assert not AlertRuleTriggerAction.objects.filter(id=self.action.id).exists()
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py
deleted file mode 100644
index 0de6371843..0000000000
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py
+++ /dev/null
@@ -1,103 +0,0 @@
-from __future__ import absolute_import
-
-import six
-from exam import fixture
-from freezegun import freeze_time
-
-from sentry.api.serializers import serialize
-from sentry.incidents.endpoints.serializers import action_target_type_to_string
-from sentry.incidents.logic import create_alert_rule_trigger, create_alert_rule_trigger_action
-from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTriggerAction
-from sentry.testutils import APITestCase
-
-
-class AlertRuleTriggerActionIndexBase(object):
-    endpoint = "sentry-api-0-organization-alert-rules-trigger-actions"
-
-    @fixture
-    def organization(self):
-        return self.create_organization()
-
-    @fixture
-    def project(self):
-        return self.create_project(organization=self.organization)
-
-    @fixture
-    def user(self):
-        return self.create_user()
-
-    @fixture
-    def alert_rule(self):
-        return self.create_alert_rule()
-
-    @fixture
-    def trigger(self):
-        return create_alert_rule_trigger(
-            self.alert_rule, "test", AlertRuleThresholdType.ABOVE, 1000, 400
-        )
-
-
-class AlertRuleTriggerActionListEndpointTest(AlertRuleTriggerActionIndexBase, APITestCase):
-    def test_simple(self):
-        self.create_team(organization=self.organization, members=[self.user])
-        action = create_alert_rule_trigger_action(
-            self.trigger,
-            AlertRuleTriggerAction.Type.EMAIL,
-            AlertRuleTriggerAction.TargetType.SPECIFIC,
-            "hello",
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(
-                self.organization.slug, self.alert_rule.id, self.trigger.id
-            )
-
-        assert resp.data == serialize([action])
-
-    def test_no_feature(self):
-        self.create_team(organization=self.organization, members=[self.user])
-        self.login_as(self.user)
-        resp = self.get_response(self.organization.slug, self.alert_rule.id, self.trigger.id)
-        assert resp.status_code == 404
-
-
-@freeze_time()
-class AlertRuleTriggerActionCreateEndpointTest(AlertRuleTriggerActionIndexBase, APITestCase):
-    method = "post"
-
-    def test_simple(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(
-                self.organization.slug,
-                self.alert_rule.id,
-                self.trigger.id,
-                type=AlertRuleTriggerAction.get_registered_type(
-                    AlertRuleTriggerAction.Type.EMAIL
-                ).slug,
-                target_type=action_target_type_to_string[AlertRuleTriggerAction.TargetType.USER],
-                target_identifier=six.text_type(self.user.id),
-                status_code=201,
-            )
-        assert "id" in resp.data
-        action = AlertRuleTriggerAction.objects.get(id=resp.data["id"])
-        assert resp.data == serialize(action, self.user)
-
-    def test_no_feature(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        resp = self.get_response(self.organization.slug, self.alert_rule.id, self.trigger.id)
-        assert resp.status_code == 404
-
-    def test_no_perms(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="member", teams=[self.team]
-        )
-        self.login_as(self.user)
-        resp = self.get_response(self.organization.slug, self.alert_rule.id, self.trigger.id)
-        assert resp.status_code == 403
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_details.py
deleted file mode 100644
index 0f5f73a0d3..0000000000
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_details.py
+++ /dev/null
@@ -1,131 +0,0 @@
-from __future__ import absolute_import
-
-from exam import fixture
-
-from sentry.api.serializers import serialize
-from sentry.api.serializers.models.alert_rule_trigger import DetailedAlertRuleTriggerSerializer
-from sentry.incidents.logic import create_alert_rule, create_alert_rule_trigger
-from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTrigger
-from sentry.snuba.models import QueryAggregations
-from sentry.testutils import APITestCase
-
-
-class AlertRuleTriggerDetailsBase(object):
-    endpoint = "sentry-api-0-organization-alert-rule-trigger-details"
-
-    @fixture
-    def organization(self):
-        return self.create_organization()
-
-    @fixture
-    def project(self):
-        return self.create_project(organization=self.organization)
-
-    @fixture
-    def user(self):
-        return self.create_user()
-
-    @fixture
-    def alert_rule(self):
-        return create_alert_rule(
-            self.organization,
-            [self.project],
-            "hello",
-            "level:error",
-            QueryAggregations.TOTAL,
-            10,
-            1,
-        )
-
-    @fixture
-    def trigger(self):
-        return create_alert_rule_trigger(
-            self.alert_rule, "hello", AlertRuleThresholdType.ABOVE, 1000, 400
-        )
-
-    def test_invalid_trigger_id(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_response(self.organization.slug, self.alert_rule.id, 1234)
-
-        assert resp.status_code == 404
-
-    def test_permissions(self):
-        self.create_team(organization=self.organization, members=[self.user])
-        self.login_as(self.create_user())
-        with self.feature("organizations:incidents"):
-            resp = self.get_response(self.organization.slug, self.alert_rule.id, self.trigger.id)
-
-        assert resp.status_code == 403
-
-    def test_no_feature(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        resp = self.get_response(self.organization.slug, self.alert_rule.id, self.trigger.id)
-        assert resp.status_code == 404
-
-
-class AlertRuleTriggerDetailsGetEndpointTest(AlertRuleTriggerDetailsBase, APITestCase):
-    def test_simple(self):
-        self.create_team(organization=self.organization, members=[self.user])
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(
-                self.organization.slug, self.alert_rule.id, self.trigger.id
-            )
-
-        assert resp.data == serialize(self.trigger, serializer=DetailedAlertRuleTriggerSerializer())
-
-
-class AlertRuleTriggerDetailsPutEndpointTest(AlertRuleTriggerDetailsBase, APITestCase):
-    method = "put"
-
-    def test_simple(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(
-                self.organization.slug, self.alert_rule.id, self.trigger.id, label="what"
-            )
-
-        self.trigger.label = "what"
-        assert resp.data == serialize(self.trigger)
-        assert resp.data["label"] == "what"
-
-    def test_not_updated_fields(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(
-                self.organization.slug, self.alert_rule.id, self.trigger.id
-            )
-
-        # Alert rule should be exactly the same
-        assert resp.data == serialize(self.trigger)
-
-
-class AlertRuleTriggerDetailsDeleteEndpointTest(AlertRuleTriggerDetailsBase, APITestCase):
-    method = "delete"
-
-    def test_simple(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            self.get_valid_response(
-                self.organization.slug, self.alert_rule.id, self.trigger.id, status_code=204
-            )
-
-        assert not AlertRuleTrigger.objects.filter(id=self.trigger.id).exists()
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_index.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_index.py
deleted file mode 100644
index 3ed548bdd1..0000000000
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_index.py
+++ /dev/null
@@ -1,124 +0,0 @@
-from __future__ import absolute_import
-
-from exam import fixture
-from freezegun import freeze_time
-
-from sentry.api.serializers import serialize
-from sentry.incidents.logic import create_alert_rule_trigger
-from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTrigger
-from sentry.testutils import APITestCase
-
-
-class AlertRuleTriggerListEndpointTest(APITestCase):
-    endpoint = "sentry-api-0-organization-alert-rules-triggers"
-
-    @fixture
-    def organization(self):
-        return self.create_organization()
-
-    @fixture
-    def project(self):
-        return self.create_project(organization=self.organization)
-
-    @fixture
-    def user(self):
-        return self.create_user()
-
-    def test_simple(self):
-        self.create_team(organization=self.organization, members=[self.user])
-        alert_rule = self.create_alert_rule()
-        trigger = create_alert_rule_trigger(
-            alert_rule, "test", AlertRuleThresholdType.ABOVE, 1000, 400
-        )
-
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(self.organization.slug, alert_rule.id)
-
-        assert resp.data == serialize([trigger])
-
-    def test_no_feature(self):
-        self.create_team(organization=self.organization, members=[self.user])
-        self.login_as(self.user)
-        resp = self.get_response(self.organization.slug, self.create_alert_rule().id)
-        assert resp.status_code == 404
-
-
-@freeze_time()
-class AlertRuleTriggerCreateEndpointTest(APITestCase):
-    endpoint = "sentry-api-0-organization-alert-rules-triggers"
-    method = "post"
-
-    @fixture
-    def organization(self):
-        return self.create_organization()
-
-    @fixture
-    def project(self):
-        return self.create_project(organization=self.organization)
-
-    @fixture
-    def user(self):
-        return self.create_user()
-
-    @fixture
-    def alert_rule(self):
-        return self.create_alert_rule()
-
-    def test_simple(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(
-                self.organization.slug,
-                self.alert_rule.id,
-                label="an alert",
-                thresholdType=1,
-                alertThreshold=1000,
-                resolveThreshold=300,
-                actions=[],
-                status_code=201,
-            )
-        assert "id" in resp.data
-        trigger = AlertRuleTrigger.objects.get(id=resp.data["id"])
-        assert resp.data == serialize(trigger, self.user)
-
-    def test_invalid_excluded_projects(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(
-                self.organization.slug,
-                self.alert_rule.id,
-                label="an alert",
-                thresholdType=1,
-                alertThreshold=1000,
-                resolveThreshold=300,
-                excludedProjects=[
-                    self.project.slug,
-                    self.create_project(organization=self.create_organization()).slug,
-                ],
-                actions=[],
-                status_code=400,
-            )
-        assert resp.data == {"excludedProjects": [u"Invalid project"]}
-
-    def test_no_feature(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        resp = self.get_response(self.organization.slug, self.alert_rule.id)
-        assert resp.status_code == 404
-
-    def test_no_perms(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="member", teams=[self.team]
-        )
-        self.login_as(self.user)
-        resp = self.get_response(self.organization.slug, self.alert_rule.id)
-        assert resp.status_code == 403
