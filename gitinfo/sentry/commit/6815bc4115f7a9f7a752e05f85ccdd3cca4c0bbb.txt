commit 6815bc4115f7a9f7a752e05f85ccdd3cca4c0bbb
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Oct 29 13:59:42 2018 -0700

    feat(feature): Enhance Feature to check HookStore (#10282)
    
    This enhances the Feature component to check HookStore for a render
    function to used when a feature is disabled. It also makes the API more
    consistent for when a children function is rendered, what render props
    are passed, and when the custom disabled function is rendered.
    
     - `renderNoFeatureMessage` has been renamed to `renderDisabled` to be
       more consistent with it's intended purpose.
    
     - If a `children` function is passed, this will now *always* be
       rendered, even if the renderDisabled prop is set to true or given a
       render function.
    
       This allows rendering of the disabled message to be more flexible
       within context of the children render function. For example, you may
       want to disable the action button in your rendered component, and
       also render the renderDisabled component above the content.
    
     - When a SINGLE FEATURE is passed and renderDisabled is true or set to
       a function, HookStore will now be checked for that feature using the
       hook store key `feature-disabled:<unprefixed feature>`. When a hook
       is registered the first hook for this key will be used as the
       renderDisabled function.
    
     - When renderDisabled is called by the Feature (children is not a
       function), it will be passed all the same render props as children
       would be passed if it were a function.

diff --git a/src/sentry/static/sentry/app/components/acl/comingSoon.jsx b/src/sentry/static/sentry/app/components/acl/comingSoon.jsx
new file mode 100644
index 0000000000..c2247e6e70
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/acl/comingSoon.jsx
@@ -0,0 +1,12 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import Alert from 'app/components/alert';
+
+const ComingSoon = p => (
+  <Alert type="info" icon="icon-circle-info">
+    {t('This feature is coming soon!')}
+  </Alert>
+);
+
+export default ComingSoon;
diff --git a/src/sentry/static/sentry/app/components/acl/feature.jsx b/src/sentry/static/sentry/app/components/acl/feature.jsx
index fc27661cbb..57fdcd9ada 100644
--- a/src/sentry/static/sentry/app/components/acl/feature.jsx
+++ b/src/sentry/static/sentry/app/components/acl/feature.jsx
@@ -3,28 +3,24 @@ import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 
-import {t} from 'app/locale';
-import Alert from 'app/components/alert';
+import {descopeFeatureName} from 'app/utils';
 import ConfigStore from 'app/stores/configStore';
+import HookStore from 'app/stores/hookStore';
 import SentryTypes from 'app/sentryTypes';
 
-const DEFAULT_NO_FEATURE_MESSAGE = (
-  <Alert type="info" icon="icon-circle-info">
-    {t('This feature is coming soon!')}
-  </Alert>
-);
+import ComingSoon from './comingSoon';
 
 /**
  * Component to handle feature flags.
  */
 class Feature extends React.Component {
   static propTypes = {
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-
     /**
-     * Configuration features from ConfigStore
+     * The following properties will be set by the FeatureContainer component
+     * that typically wraps this component.
      */
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
     configFeatures: PropTypes.arrayOf(PropTypes.string),
 
     /**
@@ -42,17 +38,47 @@ class Feature extends React.Component {
     requireAll: PropTypes.bool,
 
     /**
-     * Custom renderer function for "no feature" message OR `true` to use default message.
-     * `false` will suppress message.
+     * Custom renderer function for when the feature is not enabled.
+     *
+     *  - [default] Set this to false to disable rendering anything. If the
+     *    feature is not enabled no children will be rendererd.
+     *
+     *  - Set this to `true` to use the default `ComingSoon` alert component.
+     *
+     *  - Provide a custom render function to customize the rendered component.
+     *
+     * When a custom render function is used, the same object that would be
+     * passed to `children` if a func is provided there, will be used here.
+     *
+     * NOTE: HookStore capability.
+     *
+     * Enabling the renderDisabled prop (by setting `true` or passing a
+     * function) will enable functionality to check the HookStore for a hook to
+     * retrieve the no feature render function.
+     *
+     * The hookstore key that will be checked is:
+     *
+     *     feature-disabled:{unscoped-feature-name}
+     *
+     * This functionality will ONLY BE ACTIVATED when exactly ONE feature is
+     * provided through the feature property.
      */
-    renderNoFeatureMessage: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
+    renderDisabled: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
 
     /**
-     * If children is a function then will be treated as a render prop and passed this object:
+     * If children is a function then will be treated as a render prop and
+     * passed this object:
+     *
+     *   {
+     *     organization,
+     *     project,
+     *     features: [],
+     *     hasFeature: bool,
+     *     renderDisabled: function,
+     *   }
      *
-     * {
-     *   hasFeature: bool,
-     * }
+     * Remember that the renderDisabled function may have been set by the
+     * hookstore.
      *
      * The other interface is more simple, only show `children` if org/project has
      * all the required feature.
@@ -61,20 +87,20 @@ class Feature extends React.Component {
   };
 
   static defaultProps = {
-    renderNoFeatureMessage: false,
+    renderDisabled: false,
     requireAll: true,
   };
 
-  getAllFeatures = () => {
+  getAllFeatures() {
     let {organization, project, configFeatures} = this.props;
     return {
       configFeatures: configFeatures || [],
       organization: (organization && organization.features) || [],
       project: (project && project.features) || [],
     };
-  };
+  }
 
-  hasFeature = (feature, features) => {
+  hasFeature(feature, features) {
     let shouldMatchOnlyProject = feature.match(/^project:(\w+)/);
     let shouldMatchOnlyOrg = feature.match(/^organization:(\w+)/);
 
@@ -95,31 +121,52 @@ class Feature extends React.Component {
       organization.includes(feature) ||
       project.includes(feature)
     );
-  };
+  }
 
   render() {
-    let {children, features, renderNoFeatureMessage, requireAll} = this.props;
+    let {
+      children,
+      features,
+      renderDisabled,
+      organization,
+      project,
+      requireAll,
+    } = this.props;
 
     let allFeatures = this.getAllFeatures();
     let method = requireAll ? 'every' : 'some';
     let hasFeature =
       !features || features[method](feat => this.hasFeature(feat, allFeatures));
 
+    // Default renderDisabled to the ComingSoon component
+    let customDisabledRender =
+      renderDisabled === false
+        ? false
+        : typeof renderDisabled === 'function' ? renderDisabled : () => <ComingSoon />;
+
+    // Override the renderDisabled function with a hook store function if there
+    // is one registered for the feature.
+    if (renderDisabled !== false && features.length === 1) {
+      HookStore.get(`feature-disabled:${descopeFeatureName(features[0])}`)
+        .slice(0, 1)
+        .map(hookFn => (customDisabledRender = hookFn));
+    }
+
     let renderProps = {
+      organization,
+      project,
+      features,
       hasFeature,
+      renderDisabled: customDisabledRender,
     };
 
-    if (!hasFeature && typeof renderNoFeatureMessage === 'function') {
-      return renderNoFeatureMessage(renderProps);
-    } else if (!hasFeature && renderNoFeatureMessage) {
-      return DEFAULT_NO_FEATURE_MESSAGE;
-    }
-
     if (typeof children === 'function') {
       return children(renderProps);
     }
 
-    return hasFeature ? children : null;
+    return hasFeature
+      ? children
+      : renderDisabled !== false ? customDisabledRender(renderProps) : null;
   }
 }
 
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index e3d8c4d577..fcbea80965 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -227,6 +227,15 @@ export function sortProjects(projects) {
 export const buildUserId = id => `user:${id}`;
 export const buildTeamId = id => `team:${id}`;
 
+/**
+ * Removes the organization / project scope prefix on feature names.
+ */
+export function descopeFeatureName(feature) {
+  return typeof feature.match !== 'function'
+    ? feature
+    : feature.match(/(?:^(?:project|organization):)?(.*)/).pop();
+}
+
 // re-export under utils
 export {parseLinkHeader, Collection, PendingChangeQueue, CursorPoller};
 
@@ -246,6 +255,7 @@ export default {
   parseLinkHeader,
   buildUserId,
   buildTeamId,
+  descopeFeatureName,
 
   // external imports
   objectToArray,
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 16a59d2d0b..94021b6281 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -129,7 +129,7 @@ class OrganizationEventsContainer extends React.Component {
       organization.projects && organization.projects.filter(({isMember}) => isMember);
 
     return (
-      <Feature features={['events-stream']} renderNoFeatureMessage>
+      <Feature features={['events-stream']} renderDisabled>
         <EventsContext.Provider
           value={{actions: this.actions, ...this.state.queryValues}}
         >
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
index dd9371d45a..2ce6908bf8 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
@@ -85,7 +85,7 @@ class OrganizationHealth extends React.Component {
       organization.projects && organization.projects.filter(({isMember}) => isMember);
 
     return (
-      <Feature features={['health']} renderNoFeatureMessage>
+      <Feature features={['health']} renderDisabled>
         <HealthContext.Provider value={{actions: this.actions, ...this.state}}>
           <HealthWrapper>
             <HealthNavigationMenu />
diff --git a/tests/js/spec/components/acl/feature.spec.jsx b/tests/js/spec/components/acl/feature.spec.jsx
index 3d87168d44..c8af9fa6f6 100644
--- a/tests/js/spec/components/acl/feature.spec.jsx
+++ b/tests/js/spec/components/acl/feature.spec.jsx
@@ -3,6 +3,7 @@ import {mount} from 'enzyme';
 
 import Feature from 'app/components/acl/feature';
 import ConfigStore from 'app/stores/configStore';
+import HookStore from 'app/stores/hookStore';
 
 describe('Feature', function() {
   const organization = TestStubs.Organization({
@@ -25,19 +26,24 @@ describe('Feature', function() {
     });
 
     it('has features', function() {
-      mount(
-        <Feature features={['org-foo', 'project-foo']}>{childrenMock}</Feature>,
-        routerContext
-      );
+      const features = ['org-foo', 'project-foo'];
+
+      mount(<Feature features={features}>{childrenMock}</Feature>, routerContext);
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
+        renderDisabled: false,
+        features,
+        organization,
+        project,
       });
     });
 
     it('has features when requireAll is false', function() {
+      const features = ['org-foo', 'project-foo', 'apple'];
+
       mount(
-        <Feature features={['org-foo', 'project-foo', 'apple']} requireAll={false}>
+        <Feature features={features} requireAll={false}>
           {childrenMock}
         </Feature>,
         routerContext
@@ -45,6 +51,10 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
+        renderDisabled: false,
+        organization,
+        project,
+        features,
       });
     });
 
@@ -53,28 +63,36 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
+        renderDisabled: false,
+        organization,
+        project,
+        features: ['org-baz'],
       });
     });
 
     it('calls render function when no features', function() {
       const noFeatureRenderer = jest.fn(() => null);
       mount(
-        <Feature features={['org-baz']} renderNoFeatureMessage={noFeatureRenderer}>
+        <Feature features={['org-baz']} renderDisabled={noFeatureRenderer}>
           {childrenMock}
         </Feature>,
         routerContext
       );
 
-      expect(childrenMock).not.toHaveBeenCalled();
-      expect(noFeatureRenderer).toHaveBeenCalled();
+      expect(noFeatureRenderer).not.toHaveBeenCalled();
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasFeature: false,
+        renderDisabled: noFeatureRenderer,
+        organization,
+        project,
+        features: ['org-baz'],
+      });
     });
 
     it('can specify org from props', function() {
+      const customOrg = TestStubs.Organization({features: ['org-bazar']});
       mount(
-        <Feature
-          organization={TestStubs.Organization({features: ['org-bazar']})}
-          features={['org-bazar']}
-        >
+        <Feature organization={customOrg} features={['org-bazar']}>
           {childrenMock}
         </Feature>,
         routerContext
@@ -82,15 +100,17 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
+        renderDisabled: false,
+        organization: customOrg,
+        project,
+        features: ['org-bazar'],
       });
     });
 
     it('can specify project from props', function() {
+      const customProject = TestStubs.Project({features: ['project-baz']});
       mount(
-        <Feature
-          project={TestStubs.Project({features: ['project-baz']})}
-          features={['project-baz']}
-        >
+        <Feature project={customProject} features={['project-baz']}>
           {childrenMock}
         </Feature>,
         routerContext
@@ -98,12 +118,17 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
+        renderDisabled: false,
+        organization,
+        project: customProject,
+        features: ['project-baz'],
       });
     });
 
     it('handles no org/project', function() {
+      const features = ['org-foo', 'project-foo'];
       mount(
-        <Feature organization={null} project={null} features={['org-foo', 'project-foo']}>
+        <Feature organization={null} project={null} features={features}>
           {childrenMock}
         </Feature>,
         routerContext
@@ -111,6 +136,10 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
+        renderDisabled: false,
+        organization: null,
+        project: null,
+        features,
       });
     });
 
@@ -128,6 +157,10 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
+        renderDisabled: false,
+        organization,
+        project,
+        features: ['organization:bar'],
       });
 
       mount(
@@ -139,6 +172,10 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: false,
+        renderDisabled: false,
+        organization,
+        project,
+        features: ['project:bar'],
       });
     });
 
@@ -153,15 +190,17 @@ describe('Feature', function() {
 
       expect(childrenMock).toHaveBeenCalledWith({
         hasFeature: true,
+        renderDisabled: false,
+        organization,
+        project,
+        features: ['organizations:create'],
       });
     });
   });
 
   describe('as React node', function() {
-    let wrapper;
-
     it('has features', function() {
-      wrapper = mount(
+      const wrapper = mount(
         <Feature features={['org-bar']}>
           <div>The Child</div>
         </Feature>,
@@ -172,7 +211,7 @@ describe('Feature', function() {
     });
 
     it('has no features', function() {
-      wrapper = mount(
+      const wrapper = mount(
         <Feature features={['org-baz']}>
           <div>The Child</div>
         </Feature>,
@@ -181,5 +220,84 @@ describe('Feature', function() {
 
       expect(wrapper.find('Feature div')).toHaveLength(0);
     });
+
+    it('renders a default disabled component', function() {
+      const wrapper = mount(
+        <Feature features={['org-baz']} renderDisabled>
+          <div>The Child</div>
+        </Feature>,
+        routerContext
+      );
+
+      expect(wrapper.exists('ComingSoon')).toBe(true);
+      expect(wrapper.exists('Feature div[children="The Child"]')).not.toBe(true);
+    });
+
+    it('calls renderDisabled function when no features', function() {
+      const noFeatureRenderer = jest.fn(() => null);
+      const wrapper = mount(
+        <Feature features={['org-baz']} renderDisabled={noFeatureRenderer}>
+          <div>The Child</div>
+        </Feature>,
+        routerContext
+      );
+
+      expect(wrapper.find('Feature div')).toHaveLength(0);
+      expect(noFeatureRenderer).toHaveBeenCalledWith({
+        hasFeature: false,
+        renderDisabled: noFeatureRenderer,
+        organization,
+        project,
+        features: ['org-baz'],
+      });
+    });
+  });
+
+  describe('using HookStore for renderDisabled', function() {
+    let hookFn;
+
+    beforeEach(function() {
+      hookFn = jest.fn(() => null);
+      HookStore.hooks['feature-disabled:org-baz'] = [hookFn];
+    });
+
+    afterEach(function() {
+      delete HookStore.hooks['feature-disabled:org-baz'];
+    });
+
+    it('calls renderDisabled function from HookStore when no features', function() {
+      const noFeatureRenderer = jest.fn(() => null);
+      const wrapper = mount(
+        <Feature features={['org-baz']} renderDisabled={noFeatureRenderer}>
+          <div>The Child</div>
+        </Feature>,
+        routerContext
+      );
+
+      expect(wrapper.find('Feature div')).toHaveLength(0);
+      expect(noFeatureRenderer).not.toHaveBeenCalled();
+
+      expect(hookFn).toHaveBeenCalledWith({
+        hasFeature: false,
+        renderDisabled: hookFn,
+        organization,
+        project,
+        features: ['org-baz'],
+      });
+    });
+
+    it('does not check hook store for multiple features', function() {
+      const noFeatureRenderer = jest.fn(() => null);
+      const wrapper = mount(
+        <Feature features={['org-baz', 'org-bazar']} renderDisabled={noFeatureRenderer}>
+          <div>The Child</div>
+        </Feature>,
+        routerContext
+      );
+
+      expect(wrapper.find('Feature div')).toHaveLength(0);
+      expect(hookFn).not.toHaveBeenCalled();
+      expect(noFeatureRenderer).toHaveBeenCalled();
+    });
   });
 });
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
index 5ea20c3367..8217bb3e29 100644
--- a/tests/js/spec/utils/utils.spec.jsx
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -4,6 +4,7 @@ import {
   parseRepo,
   explodeSlug,
   sortProjects,
+  descopeFeatureName,
 } from 'app/utils';
 
 describe('utils.valueIsEqual', function() {
@@ -234,3 +235,12 @@ describe('utils.projectDisplayCompare', function() {
     ]);
   });
 });
+
+describe('utils.descopeFeatureName', function() {
+  [
+    ['organization:feature', 'feature'],
+    ['project:feature', 'feature'],
+    ['unknown-scope:feature', 'unknown-scope:feature'],
+    ['', ''],
+  ].map(([input, expected]) => expect(descopeFeatureName(input)).toEqual(expected));
+});
