commit 8d5c9cb3e9199b05dc7b0fe3432b69cb5fc745db
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed May 13 15:45:50 2020 -0700

    refs(subscriptions): Use more fields from `snuba_query` to replace fields on the alert rule. (#18780)
    
    This continues the work from https://github.com/getsentry/sentry/pull/18751. This converts most of
    the fields in Sentry to use this new model. Will follow this up with a pr to remove the old fields.

diff --git a/src/sentry/api/serializers/models/incident.py b/src/sentry/api/serializers/models/incident.py
index db980e1273..45cb054a84 100644
--- a/src/sentry/api/serializers/models/incident.py
+++ b/src/sentry/api/serializers/models/incident.py
@@ -53,7 +53,7 @@ class IncidentSerializer(Serializer):
 class DetailedIncidentSerializer(IncidentSerializer):
     def get_attrs(self, item_list, user, **kwargs):
         results = super(DetailedIncidentSerializer, self).get_attrs(item_list, user=user, **kwargs)
-        attach_foreignkey(item_list, Incident.alert_rule)
+        attach_foreignkey(item_list, Incident.alert_rule, related=("snuba_query",))
         subscribed_incidents = set()
         if user.is_authenticated():
             subscribed_incidents = set(
@@ -108,9 +108,9 @@ class DetailedIncidentSerializer(IncidentSerializer):
         query = incident.query
         if (
             incident.alert_rule
-            and QueryDatasets(incident.alert_rule.dataset) == QueryDatasets.EVENTS
+            and QueryDatasets(incident.alert_rule.snuba_query.dataset) == QueryDatasets.EVENTS
         ):
-            query = incident.alert_rule.query
+            query = incident.alert_rule.snuba_query.query
             condition = "event.type:error"
             query = "{} {}".format(condition, query) if query else condition
 
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 519eb26da8..ad3b0146ed 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -38,6 +38,7 @@ from sentry.models import Integration, Project
 from sentry.snuba.discover import resolve_discover_aliases
 from sentry.snuba.models import query_aggregation_to_snuba, QueryAggregations, QueryDatasets
 from sentry.snuba.subscriptions import (
+    aggregate_to_query_aggregation,
     bulk_create_snuba_subscriptions,
     bulk_delete_snuba_subscriptions,
     create_snuba_query,
@@ -355,11 +356,11 @@ def bulk_build_incident_query_params(incidents, start=None, end=None, windowed_s
         if project_ids:
             params["project_id"] = project_ids
 
-        snuba_filter = get_filter(incident.query, params)
+        snuba_filter = get_filter(incident.alert_rule.snuba_query.query, params)
         conditions = resolve_discover_aliases(snuba_filter)[0].conditions
         if incident.alert_rule:
             conditions = apply_dataset_conditions(
-                QueryDatasets(incident.alert_rule.dataset), conditions
+                QueryDatasets(incident.alert_rule.snuba_query.dataset), conditions
             )
         snuba_args = {
             "start": snuba_filter.start,
@@ -428,16 +429,18 @@ def bulk_get_incident_event_stats(incidents, query_params_list):
         SnubaQueryParams(
             aggregations=[
                 (
-                    query_aggregation_to_snuba[QueryAggregations(incident.aggregation)][0],
-                    query_aggregation_to_snuba[QueryAggregations(incident.aggregation)][1],
+                    query_aggregation_to_snuba[
+                        aggregate_to_query_aggregation[incident.alert_rule.snuba_query.aggregate]
+                    ][0],
+                    query_aggregation_to_snuba[
+                        aggregate_to_query_aggregation[incident.alert_rule.snuba_query.aggregate]
+                    ][1],
                     "count",
                 )
             ],
             orderby="time",
             groupby=["time"],
-            rollup=incident.alert_rule.snuba_query.time_window
-            if incident.alert_rule is not None
-            else 60,  # TODO: When time_window is persisted, switch to using that instead of alert_rule.time_window.
+            rollup=incident.alert_rule.snuba_query.time_window,
             limit=10000,
             **query_param
         )
@@ -816,10 +819,7 @@ def subscribe_projects_to_alert_rule(alert_rule, projects):
     :return: The list of created subscriptions
     """
     subscriptions = bulk_create_snuba_subscriptions(
-        projects,
-        tasks.INCIDENTS_SNUBA_SUBSCRIPTION_TYPE,
-        alert_rule.snuba_query,
-        QueryAggregations(alert_rule.aggregation),
+        projects, tasks.INCIDENTS_SNUBA_SUBSCRIPTION_TYPE, alert_rule.snuba_query
     )
     subscription_links = [
         AlertRuleQuerySubscription(query_subscription=subscription, alert_rule=alert_rule)
diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index 7df87f65f0..f58548fd43 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -23,7 +23,7 @@ from sentry.incidents.models import (
     TriggerStatus,
 )
 from sentry.incidents.tasks import handle_trigger_action
-from sentry.snuba.models import QueryAggregations
+from sentry.snuba.subscriptions import aggregate_to_query_aggregation
 from sentry.utils import metrics, redis
 from sentry.utils.dates import to_datetime, to_timestamp
 from sentry.utils.compat import zip
@@ -127,7 +127,7 @@ class SubscriptionProcessor(object):
                 "Subscription returned more than 1 row of data",
                 extra={
                     "subscription_id": self.subscription.id,
-                    "dataset": self.subscription.dataset,
+                    "dataset": self.subscription.snuba_query.dataset,
                     "snuba_subscription_id": self.subscription.subscription_id,
                     "result": subscription_update,
                 },
@@ -185,8 +185,10 @@ class SubscriptionProcessor(object):
                     # TODO: Include more info in name?
                     self.alert_rule.name,
                     alert_rule=self.alert_rule,
-                    query=self.subscription.query,
-                    aggregation=QueryAggregations(self.alert_rule.aggregation),
+                    query=self.subscription.snuba_query.query,
+                    aggregation=aggregate_to_query_aggregation[
+                        self.alert_rule.snuba_query.aggregate
+                    ],
                     date_started=detected_at,
                     date_detected=detected_at,
                     projects=[self.subscription.project],
diff --git a/src/sentry/snuba/subscriptions.py b/src/sentry/snuba/subscriptions.py
index fd84ce5dc9..dee5dfba09 100644
--- a/src/sentry/snuba/subscriptions.py
+++ b/src/sentry/snuba/subscriptions.py
@@ -83,10 +83,10 @@ def update_snuba_query(snuba_query, query, aggregation, time_window, resolution,
             resolution=int(resolution.total_seconds()),
             environment=environment,
         )
-        bulk_update_snuba_subscriptions(query_subscriptions, snuba_query, aggregation)
+        bulk_update_snuba_subscriptions(query_subscriptions, snuba_query)
 
 
-def bulk_create_snuba_subscriptions(projects, subscription_type, snuba_query, aggregation):
+def bulk_create_snuba_subscriptions(projects, subscription_type, snuba_query):
     """
     Creates a subscription to a snuba query for each project.
 
@@ -94,20 +94,16 @@ def bulk_create_snuba_subscriptions(projects, subscription_type, snuba_query, ag
     :param subscription_type: Text identifier for the subscription type this is. Used
     to identify the registered callback associated with this subscription.
     :param snuba_query: A `SnubaQuery` instance to subscribe the projects to.
-    :param aggregation: An aggregation to calculate over the time window. This will be
-    removed soon, once we're relying entirely on `snuba_query`.
     :return: A list of QuerySubscriptions
     """
     subscriptions = []
     # TODO: Batch this up properly once we care about multi-project rules.
     for project in projects:
-        subscriptions.append(
-            create_snuba_subscription(project, subscription_type, snuba_query, aggregation)
-        )
+        subscriptions.append(create_snuba_subscription(project, subscription_type, snuba_query))
     return subscriptions
 
 
-def create_snuba_subscription(project, subscription_type, snuba_query, aggregation):
+def create_snuba_subscription(project, subscription_type, snuba_query):
     """
     Creates a subscription to a snuba query.
 
@@ -115,8 +111,6 @@ def create_snuba_subscription(project, subscription_type, snuba_query, aggregati
     :param subscription_type: Text identifier for the subscription type this is. Used
     to identify the registered callback associated with this subscription.
     :param snuba_query: A `SnubaQuery` instance to subscribe the project to.
-    :param aggregation: An aggregation to calculate over the time window. This will be
-    removed soon, once we're relying entirely on `snuba_query`.
     :return: The QuerySubscription representing the subscription
     """
     subscription = QuerySubscription.objects.create(
@@ -126,7 +120,7 @@ def create_snuba_subscription(project, subscription_type, snuba_query, aggregati
         type=subscription_type,
         dataset=snuba_query.dataset,
         query=snuba_query.query,
-        aggregation=aggregation.value,
+        aggregation=aggregate_to_query_aggregation[snuba_query.aggregate].value,
         time_window=snuba_query.time_window,
         resolution=snuba_query.resolution,
     )
@@ -142,26 +136,22 @@ def create_snuba_subscription(project, subscription_type, snuba_query, aggregati
     return subscription
 
 
-def bulk_update_snuba_subscriptions(subscriptions, snuba_query, aggregation):
+def bulk_update_snuba_subscriptions(subscriptions, snuba_query):
     """
     Updates a list of query subscriptions.
 
     :param subscriptions: The subscriptions we're updating
     :param snuba_query: A `SnubaQuery` instance to subscribe the project to.
-    :param aggregation: An aggregation to calculate over the time window. This will be
-    removed soon, once we're relying entirely on `snuba_query`.
     :return: A list of QuerySubscriptions
     """
     updated_subscriptions = []
     # TODO: Batch this up properly once we care about multi-project rules.
     for subscription in subscriptions:
-        updated_subscriptions.append(
-            update_snuba_subscription(subscription, snuba_query, aggregation)
-        )
+        updated_subscriptions.append(update_snuba_subscription(subscription, snuba_query))
     return subscriptions
 
 
-def update_snuba_subscription(subscription, snuba_query, aggregation):
+def update_snuba_subscription(subscription, snuba_query):
     """
     Updates a subscription to a snuba query.
 
@@ -176,7 +166,7 @@ def update_snuba_subscription(subscription, snuba_query, aggregation):
         subscription.update(
             status=QuerySubscription.Status.UPDATING.value,
             query=snuba_query.query,
-            aggregation=aggregation.value,
+            aggregation=aggregate_to_query_aggregation[snuba_query.aggregate].value,
             time_window=snuba_query.time_window,
             resolution=snuba_query.resolution,
         )
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index a623a42b40..765f6509c8 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -819,6 +819,10 @@ class Factories(object):
     ):
         if not title:
             title = petname.Generate(2, " ", letters=10).title()
+        if alert_rule is None:
+            alert_rule = Factories.create_alert_rule(
+                organization, projects, query=query, time_window=1
+            )
 
         incident = Incident.objects.create(
             organization=organization,
diff --git a/tests/sentry/api/serializers/test_incident.py b/tests/sentry/api/serializers/test_incident.py
index d8945102f7..0d45699815 100644
--- a/tests/sentry/api/serializers/test_incident.py
+++ b/tests/sentry/api/serializers/test_incident.py
@@ -10,9 +10,8 @@ from freezegun import freeze_time
 
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.incident import DetailedIncidentSerializer
-from sentry.incidents.logic import create_alert_rule, subscribe_to_incident
+from sentry.incidents.logic import subscribe_to_incident
 from sentry.incidents.models import IncidentGroup
-from sentry.snuba.models import QueryAggregations
 from sentry.testutils import TestCase
 
 
@@ -57,22 +56,11 @@ class DetailedIncidentSerializerTest(TestCase):
         result = serialize(incident, serializer=serializer)
         assert result["groups"] == [six.text_type(self.group.id)]
 
-    def test_no_alert_rule(self):
-        incident = self.create_incident()
-        serializer = DetailedIncidentSerializer()
-        result = serialize(incident, serializer=serializer)
-        assert result["alertRule"] is None
-        assert result["discoverQuery"] == incident.query
-
     def test_alert_rule(self):
         incident = self.create_incident()
         query = "test query"
-        alert_rule = create_alert_rule(
-            self.organization, [self.project], "hi", "test query", QueryAggregations.TOTAL, 10, 1
-        )
-        incident.update(alert_rule=alert_rule)
 
         serializer = DetailedIncidentSerializer()
         result = serialize(incident, serializer=serializer)
-        assert result["alertRule"] == serialize(alert_rule)
+        assert result["alertRule"] == serialize(incident.alert_rule)
         assert result["discoverQuery"] == "event.type:error {}".format(query)
diff --git a/tests/sentry/incidents/test_action_handlers.py b/tests/sentry/incidents/test_action_handlers.py
index 0c43b6f63a..b50d412674 100644
--- a/tests/sentry/incidents/test_action_handlers.py
+++ b/tests/sentry/incidents/test_action_handlers.py
@@ -111,7 +111,7 @@ class EmailActionHandlerGenerateEmailContextTest(TestCase):
             "aggregate": handler.query_aggregations_display[
                 QueryAggregations(action.alert_rule_trigger.alert_rule.aggregation)
             ],
-            "query": action.alert_rule_trigger.alert_rule.query,
+            "query": action.alert_rule_trigger.alert_rule.snuba_query.query,
             "threshold": action.alert_rule_trigger.alert_threshold,
             "status": INCIDENT_STATUS[IncidentStatus(incident.status)],
             "environment": "All",
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 30a80fcdf5..08e6684c8b 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -664,12 +664,10 @@ class CreateIncidentSnapshotTest(TestCase, BaseIncidentsTest):
 @freeze_time()
 class BulkGetIncidentStatsTest(TestCase, BaseIncidentsTest):
     def test(self):
-        closed_incident = create_incident(
+        closed_incident = self.create_incident(
             self.organization,
-            IncidentType.ALERT_TRIGGERED,
-            "Closed",
-            "",
-            QueryAggregations.TOTAL,
+            title="Closed",
+            query="",
             groups=[self.group],
             date_started=timezone.now() - timedelta(days=30),
         )
@@ -678,12 +676,10 @@ class BulkGetIncidentStatsTest(TestCase, BaseIncidentsTest):
             IncidentStatus.CLOSED,
             status_method=IncidentStatusMethod.RULE_TRIGGERED,
         )
-        open_incident = create_incident(
+        open_incident = self.create_incident(
             self.organization,
-            IncidentType.ALERT_TRIGGERED,
-            "Open",
-            "",
-            QueryAggregations.TOTAL,
+            title="Open",
+            query="",
             groups=[self.group],
             date_started=timezone.now() - timedelta(days=30),
         )
diff --git a/tests/sentry/snuba/test_query_subscription_consumer.py b/tests/sentry/snuba/test_query_subscription_consumer.py
index 8241cb63fa..aa14c8d19a 100644
--- a/tests/sentry/snuba/test_query_subscription_consumer.py
+++ b/tests/sentry/snuba/test_query_subscription_consumer.py
@@ -111,9 +111,7 @@ class HandleMessageTest(BaseQuerySubscriptionTest, TestCase):
                 timedelta(minutes=1),
                 None,
             )
-            sub = create_snuba_subscription(
-                self.project, registration_key, snuba_query, QueryAggregations.TOTAL
-            )
+            sub = create_snuba_subscription(self.project, registration_key, snuba_query)
         sub.refresh_from_db()
 
         data = self.valid_wrapper
diff --git a/tests/sentry/snuba/test_subscriptions.py b/tests/sentry/snuba/test_subscriptions.py
index f237194507..12904c8d65 100644
--- a/tests/sentry/snuba/test_subscriptions.py
+++ b/tests/sentry/snuba/test_subscriptions.py
@@ -59,7 +59,7 @@ class CreateSnubaSubscriptionTest(TestCase):
         snuba_query = create_snuba_query(
             dataset, query, aggregation, time_window, resolution, self.environment
         )
-        subscription = create_snuba_subscription(self.project, type, snuba_query, aggregation)
+        subscription = create_snuba_subscription(self.project, type, snuba_query)
 
         assert subscription.status == QuerySubscription.Status.CREATING.value
         assert subscription.project == self.project
@@ -82,7 +82,7 @@ class CreateSnubaSubscriptionTest(TestCase):
             snuba_query = create_snuba_query(
                 dataset, query, aggregation, time_window, resolution, self.environment
             )
-            subscription = create_snuba_subscription(self.project, type, snuba_query, aggregation)
+            subscription = create_snuba_subscription(self.project, type, snuba_query)
             subscription = QuerySubscription.objects.get(id=subscription.id)
             assert subscription.status == QuerySubscription.Status.ACTIVE.value
             assert subscription.project == self.project
@@ -105,7 +105,7 @@ class CreateSnubaSubscriptionTest(TestCase):
             snuba_query = create_snuba_query(
                 dataset, query, aggregation, time_window, resolution, self.environment
             )
-            subscription = create_snuba_subscription(self.project, type, snuba_query, aggregation)
+            subscription = create_snuba_subscription(self.project, type, snuba_query)
         subscription = QuerySubscription.objects.get(id=subscription.id)
         assert subscription.status == QuerySubscription.Status.ACTIVE.value
         assert subscription.project == self.project
@@ -175,7 +175,7 @@ class UpdateSnubaQueryTest(TestCase):
             timedelta(minutes=2),
             self.environment,
         )
-        sub = create_snuba_subscription(self.project, "hi", snuba_query, QueryAggregations.TOTAL)
+        sub = create_snuba_subscription(self.project, "hi", snuba_query)
 
         new_env = self.create_environment()
         query = "level:error"
@@ -201,9 +201,7 @@ class UpdateSnubaSubscriptionTest(TestCase):
                 timedelta(minutes=1),
                 None,
             )
-            subscription = create_snuba_subscription(
-                self.project, "something", snuba_query, QueryAggregations.TOTAL
-            )
+            subscription = create_snuba_subscription(self.project, "something", snuba_query)
 
         query = "level:warning"
         aggregation = QueryAggregations.UNIQUE_USERS
@@ -219,7 +217,7 @@ class UpdateSnubaSubscriptionTest(TestCase):
             aggregate=aggregation_function_translations[aggregation],
         )
         assert subscription_id is not None
-        update_snuba_subscription(subscription, snuba_query, aggregation)
+        update_snuba_subscription(subscription, snuba_query)
         assert subscription.status == QuerySubscription.Status.UPDATING.value
         assert subscription.subscription_id == subscription_id
         assert subscription.snuba_query.query == query
@@ -241,9 +239,7 @@ class UpdateSnubaSubscriptionTest(TestCase):
                 timedelta(minutes=1),
                 None,
             )
-            subscription = create_snuba_subscription(
-                self.project, "something", snuba_query, QueryAggregations.TOTAL
-            )
+            subscription = create_snuba_subscription(self.project, "something", snuba_query)
 
             query = "level:warning"
             aggregation = QueryAggregations.UNIQUE_USERS
@@ -257,8 +253,9 @@ class UpdateSnubaSubscriptionTest(TestCase):
                 time_window=int(time_window.total_seconds()),
                 resolution=int(resolution.total_seconds()),
                 environment=self.environment,
+                aggregate=translate_aggregation(aggregation),
             )
-            update_snuba_subscription(subscription, snuba_query, aggregation)
+            update_snuba_subscription(subscription, snuba_query)
             subscription = QuerySubscription.objects.get(id=subscription.id)
             assert subscription.status == QuerySubscription.Status.ACTIVE.value
             assert subscription.subscription_id is not None
@@ -280,9 +277,7 @@ class BulkDeleteSnubaSubscriptionTest(TestCase):
                 timedelta(minutes=1),
                 None,
             )
-            subscription = create_snuba_subscription(
-                self.project, "something", snuba_query, QueryAggregations.TOTAL
-            )
+            subscription = create_snuba_subscription(self.project, "something", snuba_query)
             snuba_query = create_snuba_query(
                 QueryDatasets.EVENTS,
                 "level:error",
@@ -292,10 +287,7 @@ class BulkDeleteSnubaSubscriptionTest(TestCase):
                 None,
             )
             other_subscription = create_snuba_subscription(
-                self.create_project(organization=self.organization),
-                "something",
-                snuba_query,
-                QueryAggregations.TOTAL,
+                self.create_project(organization=self.organization), "something", snuba_query
             )
         subscription_ids = [subscription.id, other_subscription.id]
         bulk_delete_snuba_subscriptions([subscription, other_subscription])
@@ -320,9 +312,7 @@ class DeleteSnubaSubscriptionTest(TestCase):
                 timedelta(minutes=1),
                 None,
             )
-            subscription = create_snuba_subscription(
-                self.project, "something", snuba_query, QueryAggregations.TOTAL
-            )
+            subscription = create_snuba_subscription(self.project, "something", snuba_query)
         # Refetch since snuba creation happens in a task
         subscription = QuerySubscription.objects.get(id=subscription.id)
         subscription_id = subscription.subscription_id
@@ -341,9 +331,7 @@ class DeleteSnubaSubscriptionTest(TestCase):
                 timedelta(minutes=1),
                 None,
             )
-            subscription = create_snuba_subscription(
-                self.project, "something", snuba_query, QueryAggregations.TOTAL
-            )
+            subscription = create_snuba_subscription(self.project, "something", snuba_query)
             subscription_id = subscription.id
             delete_snuba_subscription(subscription)
             assert not QuerySubscription.objects.filter(id=subscription_id).exists()
diff --git a/tests/snuba/snuba/test_query_subscription_consumer.py b/tests/snuba/snuba/test_query_subscription_consumer.py
index fbf186936c..69561d3ba5 100644
--- a/tests/snuba/snuba/test_query_subscription_consumer.py
+++ b/tests/snuba/snuba/test_query_subscription_consumer.py
@@ -94,9 +94,7 @@ class QuerySubscriptionConsumerTest(TestCase, SnubaTestCase):
                 timedelta(minutes=1),
                 None,
             )
-            sub = create_snuba_subscription(
-                self.project, self.registration_key, snuba_query, QueryAggregations.TOTAL
-            )
+            sub = create_snuba_subscription(self.project, self.registration_key, snuba_query)
             sub.subscription_id = self.subscription_id
             sub.status = 0
             sub.save()
