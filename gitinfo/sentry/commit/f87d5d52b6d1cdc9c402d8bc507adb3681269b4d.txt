commit f87d5d52b6d1cdc9c402d8bc507adb3681269b4d
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Sep 30 15:18:03 2015 -0700

    Refactor objToQuery out of Sidebar into util function

diff --git a/src/sentry/static/sentry/app/utils/stream.jsx b/src/sentry/static/sentry/app/utils/stream.jsx
index 0b1f1952a5..e0ac5d860a 100644
--- a/src/sentry/static/sentry/app/utils/stream.jsx
+++ b/src/sentry/static/sentry/app/utils/stream.jsx
@@ -35,4 +35,24 @@ export function queryToObj(queryStr) {
     queryObj.__text = text.join(' ');
 
   return queryObj;
-}
\ No newline at end of file
+}
+
+/**
+ * Converts an object representation of a stream query to a string
+ * (consumable by the Sentry stream HTTP API).
+ */
+export function objToQuery(queryObj) {
+  let tags = _.omit(queryObj, '__text');
+
+  let parts = _.map(tags, (value, tagKey) => {
+      if (value.indexOf(' ') > -1)
+        value = `"${value}"`;
+
+      return `${tagKey}:${value}`;
+    });
+
+  if (queryObj.__text)
+    parts.push(queryObj.__text);
+
+  return parts.join(' ');
+}
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 9db397b573..78392c5d9d 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -1,9 +1,11 @@
 import React from "react";
 import _ from "underscore";
 import StreamTagFilter from "./tagFilter";
-import {queryToObj} from "../../utils/stream";
+import {queryToObj, objToQuery} from "../../utils/stream";
 
 
+let TEXT_FILTER_DEBOUNCE_IN_MS = 300;
+
 var StreamSidebar = React.createClass({
   contextTypes: {
     router: React.PropTypes.func
@@ -32,8 +34,9 @@ var StreamSidebar = React.createClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    // query was updated by another source (e.g. sidebar filters)
-    let query = this.getQueryStr();
+    // If query was updated by another source (e.g. SearchBar),
+    // clobber state of sidebar with new query.
+    let query = objToQuery(this.state.queryObj);
 
     if (!_.isEqual(nextProps.query, query)) {
       let queryObj = queryToObj(nextProps.query);
@@ -44,19 +47,6 @@ var StreamSidebar = React.createClass({
     }
   },
 
-  getQueryStr() {
-    let tags = _.omit(this.state.queryObj, '__text');
-
-    return _.map(tags, (value, tagKey) => {
-        if (value.indexOf(' ') > -1)
-          value = `"${value}"`;
-
-        return `${tagKey}:${value}`;
-      })
-      .concat(this.state.queryObj.__text)
-      .join(' ');
-  },
-
   onSelectTag(tag, value) {
     let newQuery = {...this.state.queryObj};
     if (value)
@@ -72,9 +62,7 @@ var StreamSidebar = React.createClass({
   onTextChange: function (evt) {
     let text = evt.target.value;
 
-    this.setState({
-      textFilter: text
-    });
+    this.setState({ textFilter: text });
 
     this.debouncedTextChange(text);
   },
@@ -83,10 +71,10 @@ var StreamSidebar = React.createClass({
     this.setState({
       queryObj: {...this.state.queryObj, __text:text}
     }, this.onQueryChange);
-  }, 300),
+  }, TEXT_FILTER_DEBOUNCE_IN_MS),
 
   onQueryChange() {
-    let query = this.getQueryStr();
+    let query = objToQuery(this.state.queryObj);
     this.props.onQueryChange && this.props.onQueryChange(query);
   },
 
diff --git a/tests/js/spec/utils/stream.spec.jsx b/tests/js/spec/utils/stream.spec.jsx
index eeae04ff70..ec5878f661 100644
--- a/tests/js/spec/utils/stream.spec.jsx
+++ b/tests/js/spec/utils/stream.spec.jsx
@@ -1,4 +1,4 @@
-import {queryToObj} from "app/utils/stream";
+import {queryToObj, objToQuery} from "app/utils/stream";
 
 describe("utils/stream", function () {
   describe("queryToObj()", function () {
@@ -31,4 +31,28 @@ describe("utils/stream", function () {
       });
     });
   });
+
+  describe('objToQuery()', function () {
+    it('should convert a query object to a query string', function () {
+      expect(objToQuery({
+        is: 'unresolved'
+      })).to.eql('is:unresolved');
+
+      expect(objToQuery({
+        is: 'unresolved',
+        assigned: 'foo@bar.com'
+      })).to.eql('is:unresolved assigned:foo@bar.com');
+
+      expect(objToQuery({
+        is: 'unresolved',
+        __text: 'python exception'
+      })).to.eql('is:unresolved python exception');
+    });
+
+    it('should quote query values that contain spaces', function () {
+      expect(objToQuery({
+        browser: 'Chrome 36'
+      })).to.eql('browser:"Chrome 36"');
+    });
+  });
 });
\ No newline at end of file
