commit 8090c0322cc756e63609a12180e3b922e57b6e19
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 28 21:44:08 2014 -0700

    Limit/offset pattern for search

diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 098bdcacf7..aed6c66f28 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -61,7 +61,7 @@ class SearchBackend(object):
 
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, sort_by='date', date_filter='last_seen',
-              date_from=None, date_to=None, cursor=None, limit=100):
+              date_from=None, date_to=None, offset=0, limit=100):
         raise NotImplementedError
 
     def upgrade(self):
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 96505fa966..5bfa844f80 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -25,7 +25,7 @@ class DjangoSearchBackend(SearchBackend):
 
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, sort_by='date', date_filter='last_seen',
-              date_from=None, date_to=None, cursor=None, limit=100):
+              date_from=None, date_to=None, offset=0, limit=100):
         from sentry.models import Group
 
         queryset = Group.objects.filter(project=project)
@@ -71,41 +71,33 @@ class DjangoSearchBackend(SearchBackend):
 
         engine = get_db_engine('default')
         if engine.startswith('sqlite'):
-            score_clause = SQLITE_SORT_CLAUSES.get(sort_by)
-            filter_clause = SQLITE_SCORE_CLAUSES.get(sort_by)
+            score_clause = SQLITE_SORT_CLAUSES[sort_by]
+            filter_clause = SQLITE_SCORE_CLAUSES[sort_by]
         elif engine.startswith('mysql'):
-            score_clause = MYSQL_SORT_CLAUSES.get(sort_by)
-            filter_clause = MYSQL_SCORE_CLAUSES.get(sort_by)
+            score_clause = MYSQL_SORT_CLAUSES[sort_by]
+            filter_clause = MYSQL_SCORE_CLAUSES[sort_by]
         elif engine.startswith('oracle'):
-            score_clause = ORACLE_SORT_CLAUSES.get(sort_by)
-            filter_clause = ORACLE_SCORE_CLAUSES.get(sort_by)
+            score_clause = ORACLE_SORT_CLAUSES[sort_by]
+            filter_clause = ORACLE_SCORE_CLAUSES[sort_by]
         elif engine in MSSQL_ENGINES:
-            score_clause = MSSQL_SORT_CLAUSES.get(sort_by)
-            filter_clause = MSSQL_SCORE_CLAUSES.get(sort_by)
+            score_clause = MSSQL_SORT_CLAUSES[sort_by]
+            filter_clause = MSSQL_SCORE_CLAUSES[sort_by]
         else:
-            score_clause = SORT_CLAUSES.get(sort_by)
-            filter_clause = SCORE_CLAUSES.get(sort_by)
+            score_clause = SORT_CLAUSES[sort_by]
+            filter_clause = SCORE_CLAUSES[sort_by]
 
         if sort_by == 'tottime':
             queryset = queryset.filter(time_spent_count__gt=0)
         elif sort_by == 'avgtime':
             queryset = queryset.filter(time_spent_count__gt=0)
 
-        if score_clause:
-            queryset = queryset.extra(
-                select={'sort_value': score_clause},
-            )
-            # HACK: don't sort by the same column twice
-            if sort_by == 'date':
-                queryset = queryset.order_by('-last_seen')
-            else:
-                queryset = queryset.order_by('-sort_value', '-last_seen')
-
-            if cursor:
-                queryset = queryset.extra(
-                    where=['%s > %%s' % filter_clause],
-                    params=[float(cursor)],
-                )
+        queryset = queryset.extra(
+            select={'sort_value': score_clause},
+        )
+        # HACK: don't sort by the same column twice
+        if sort_by == 'date':
+            queryset = queryset.order_by('-last_seen')
+        else:
+            queryset = queryset.order_by('-sort_value', '-last_seen')
 
-        # HACK:
-        return SearchResult(instances=list(queryset[:limit]))
+        return SearchResult(instances=list(queryset[offset:offset + limit]))
diff --git a/src/sentry/search/elastic_search/backend.py b/src/sentry/search/elastic_search/backend.py
index e428cd3143..eaa671dd04 100644
--- a/src/sentry/search/elastic_search/backend.py
+++ b/src/sentry/search/elastic_search/backend.py
@@ -83,8 +83,8 @@ class ElasticSearchBackend(SearchBackend):
 
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, sort_by='date', date_filter='last_seen',
-              date_from=None, date_to=None, cursor=None, limit=100):
-        # TODO(dcramer): implement limit
+              date_from=None, date_to=None, offset=0, limit=100):
+
         query_body = {
             'filter': {
                 'and': [
@@ -133,7 +133,8 @@ class ElasticSearchBackend(SearchBackend):
 
         if bookmarked_by:
             # TODO(dcramer): we could store an array on each event similar to how
-            # we are doing tags?
+            # we are doing tags? should we just make bookmarked events a special
+            # thing that isn't searchable?
             raise NotImplementedError
 
         if sort_by == 'date':
@@ -158,11 +159,15 @@ class ElasticSearchBackend(SearchBackend):
                 'query': {'filtered': query_body},
                 'sort': sort_clause,
                 'size': limit,
+                'from': offset,
             },
         )
         if not results.get('hits'):
             return SearchResult([])
-        return SearchResult([int(n['_id']) for n in results['hits']['hits']])
+
+        instance_ids = [int(n['_id']) for n in results['hits']['hits']]
+
+        return SearchResult(instance_ids)
 
     def upgrade(self):
         self.backend.indices.put_template(
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index e014450fdb..500ddd7954 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -134,10 +134,16 @@ class DjangoSearchBackendTest(TestCase):
         results = self.backend.query(self.project2)
         assert len(results) == 0
 
-    def test_limit(self):
+    def test_limit_and_offset(self):
         results = self.backend.query(self.project1, limit=1)
         assert len(results) == 1
 
+        results = self.backend.query(self.project1, offset=1, limit=1)
+        assert len(results) == 1
+
+        results = self.backend.query(self.project1, offset=2, limit=1)
+        assert len(results) == 0
+
     def test_first_seen_date_filter(self):
         backend = self.create_backend()
 
diff --git a/tests/sentry/search/elastic_search/test_backend.py b/tests/sentry/search/elastic_search/test_backend.py
index c1d5c717bd..9d48a62e76 100644
--- a/tests/sentry/search/elastic_search/test_backend.py
+++ b/tests/sentry/search/elastic_search/test_backend.py
@@ -152,10 +152,16 @@ class ElasticSearchTest(TestCase):
         assert len(results) == 1
         assert results[0] == self.group2
 
-    def test_limit(self):
+    def test_limit_and_offset(self):
         results = self.backend.query(self.project1, limit=1)
         assert len(results) == 1
 
+        results = self.backend.query(self.project1, offset=1, limit=1)
+        assert len(results) == 1
+
+        results = self.backend.query(self.project1, offset=2, limit=1)
+        assert len(results) == 0
+
     def test_first_seen_date_filter(self):
         backend = self.create_backend()
 
