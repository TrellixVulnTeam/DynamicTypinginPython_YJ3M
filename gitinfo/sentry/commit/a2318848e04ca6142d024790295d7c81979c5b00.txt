commit a2318848e04ca6142d024790295d7c81979c5b00
Author: Tony <Zylphrex@users.noreply.github.com>
Date:   Fri Jun 12 10:32:30 2020 -0400

    feat(async-csv): Add metrics (#19313)

diff --git a/src/sentry/data_export/tasks.py b/src/sentry/data_export/tasks.py
index 7b2dcecc39..f71218ab5c 100644
--- a/src/sentry/data_export/tasks.py
+++ b/src/sentry/data_export/tasks.py
@@ -11,6 +11,7 @@ from celery.task import current
 from celery.exceptions import MaxRetriesExceededError
 from django.core.files.base import ContentFile
 from django.db import transaction, IntegrityError
+from django.utils import timezone
 
 from sentry.models import (
     AssembleChecksumMismatch,
@@ -129,6 +130,11 @@ def assemble_download(
         try:
             current.retry()
         except MaxRetriesExceededError:
+            metrics.incr(
+                "dataexport.end",
+                tags={"success": False, "error": six.text_type(error)},
+                sample_rate=1.0,
+            )
             return data_export.email_failure(message="Internal processing failure")
     else:
         if rows and len(rows) >= batch_size and new_bytes_written and next_offset < export_limit:
@@ -141,6 +147,8 @@ def assemble_download(
                 environment_id=environment_id,
             )
         else:
+            metrics.timing("dataexport.row_count", next_offset)
+            metrics.timing("dataexport.file_size", bytes_written)
             merge_export_blobs.delay(data_export_id)
 
 
@@ -259,10 +267,17 @@ def merge_export_blobs(data_export_id, **kwargs):
             file.save()
             data_export.finalize_upload(file=file)
 
+            time_elapsed = (timezone.now() - data_export.date_added).total_seconds()
+            metrics.timing("dataexport.duration", time_elapsed)
             logger.info("dataexport.end", extra={"data_export_id": data_export_id})
-            metrics.incr("dataexport.end", sample_rate=1.0)
+            metrics.incr("dataexport.end", tags={"success": True}, sample_rate=1.0)
     except Exception as error:
         metrics.incr("dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0)
+        metrics.incr(
+            "dataexport.end",
+            tags={"success": False, "error": six.text_type(error)},
+            sample_rate=1.0,
+        )
         logger.error(
             "dataexport.error: %s",
             six.text_type(error),
