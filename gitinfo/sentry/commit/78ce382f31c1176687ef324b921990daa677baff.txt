commit 78ce382f31c1176687ef324b921990daa677baff
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jan 19 11:15:01 2014 -0800

    Remove UDP server

diff --git a/docs/cli/index.rst b/docs/cli/index.rst
index 601b46db11..a2d89c4c47 100644
--- a/docs/cli/index.rst
+++ b/docs/cli/index.rst
@@ -35,11 +35,9 @@ Builtin Commands
 
     Starts a Sentry service. By default this value is 'http'.
 
-    Other services are 'udp', for the UDP server.
-
     ::
 
-        sentry start udp
+        sentry start
 
 .. data:: upgrade
 
diff --git a/docs/config/index.rst b/docs/config/index.rst
index daa2dd88b7..1b9d0abd74 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -145,43 +145,6 @@ The following settings are available for the built-in webserver:
             'worker_class': 'gevent',
         }
 
-
-.. _config-udp-server:
-
-UDP Server
-~~~~~~~~~~
-
-The following settings are available for the built-in UDP API server:
-
-.. data:: SENTRY_UDP_HOST
-    :noindex:
-
-    The hostname which the udp server should bind to.
-
-    Defaults to ``localhost``.
-
-    ::
-
-        SENTRY_UDP_HOST = '0.0.0.0'  # bind to all addresses
-
-.. data:: SENTRY_UDP_PORT
-    :noindex:
-
-    The port which the udp server should listen on.
-
-    Defaults to ``9001``.
-
-    ::
-
-        SENTRY_UDP_PORT = 9001
-
-.. data:: SENTRY_USE_IPV6_UDP
-    :noindex:
-
-    Instruct the UDP server to bind to an ipv6 address.
-
-    Defaults to ``False``.
-
 .. _config-smtp-server:
 
 SMTP Server
diff --git a/docs/index.rst b/docs/index.rst
index 18652b65ca..ffd174ffc9 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -24,7 +24,6 @@ Users Guide
    queue/index
    buffer/index
    nodestore/index
-   udp_server/index
    throttling/index
    performance/index
    cli/index
diff --git a/docs/udp_server/index.rst b/docs/udp_server/index.rst
deleted file mode 100644
index a9ad394e62..0000000000
--- a/docs/udp_server/index.rst
+++ /dev/null
@@ -1,24 +0,0 @@
-Utilizing the UDP Server
-========================
-
-.. note:: The UDP server has many limitations, and is unsupported for general Sentry usage.
-
-The UDP server requires the `eventlet`_ module.
-
-.. _eventlet: http://eventlet.net/
-
-::
-
-    pip install eventlet
-
-To start the server:
-
-::
-
-    sentry start udp
-
-
-Configuration
--------------
-
-See the section on :ref:`UDP server settings <config-udp-server>`.
diff --git a/src/sentry/management/commands/start.py b/src/sentry/management/commands/start.py
index eb46ca5240..85b39eb004 100644
--- a/src/sentry/management/commands/start.py
+++ b/src/sentry/management/commands/start.py
@@ -38,7 +38,7 @@ class Command(BaseCommand):
     )
 
     def handle(self, service_name='http', address=None, upgrade=True, **options):
-        from sentry.services import http, udp, smtp
+        from sentry.services import http, smtp
 
         if address:
             if ':' in address:
@@ -52,7 +52,6 @@ class Command(BaseCommand):
 
         services = {
             'http': http.SentryHTTPServer,
-            'udp': udp.SentryUDPServer,
             'smtp': smtp.SentrySMTPServer,
         }
 
diff --git a/src/sentry/services/udp.py b/src/sentry/services/udp.py
deleted file mode 100644
index 827e0cea5a..0000000000
--- a/src/sentry/services/udp.py
+++ /dev/null
@@ -1,168 +0,0 @@
-"""
-sentry.services.udp
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-import socket
-import logging
-
-from sentry.services.base import Service
-
-logger = logging.getLogger(__file__)
-
-
-class CommandError(Exception):
-    pass
-
-
-def handle_sentry(data, address):
-    from sentry.coreapi import (project_from_auth_vars, decode_and_decompress_data,
-        safely_load_json_string, validate_data, insert_data_to_database, APIError,
-        APIForbidden)
-    from sentry.models import Group
-    from sentry.exceptions import InvalidData
-    from sentry.plugins import plugins
-    from sentry.utils.auth import parse_auth_header
-
-    try:
-        try:
-            auth_header, data = data.split('\n\n', 1)
-        except ValueError:
-            raise APIError('missing auth header')
-
-        try:
-            auth_vars = parse_auth_header(auth_header)
-        except (ValueError, IndexError):
-            raise APIError('invalid auth header')
-
-        project, user = project_from_auth_vars(auth_vars)
-
-        result = plugins.first('has_perm', user, 'create_event', project)
-        if result is False:
-            raise APIForbidden('Creation of this event was blocked')
-
-        client = auth_vars.get('sentry_client')
-
-        if not data.startswith('{'):
-            data = decode_and_decompress_data(data)
-        data = safely_load_json_string(data)
-
-        try:
-            validate_data(project, data, client)
-        except InvalidData, e:
-            raise APIError(u'Invalid data: %s (%s)' % (unicode(e), type(e)))
-
-        Group.objects.normalize_event_data(data)
-
-        return insert_data_to_database(data)
-    except APIError, error:
-        logger.exception('bad message from %s' % (address,))
-        return error
-
-
-class BaseUDPServer(Service):
-
-    BUF_SIZE = 2 ** 16
-    POOL_SIZE = 1000
-
-    _socket = None
-    _spawn = None
-
-    def __init__(self, host=None, port=None, debug=False,
-                 workers=None, use_ipv6=False):
-        super(BaseUDPServer, self).__init__(debug=debug)
-        from django.conf import settings
-
-        self.use_ipv6 = use_ipv6 or settings.SENTRY_USE_IPV6_UDP
-        self.host = host or settings.SENTRY_UDP_HOST
-        self.port = port or settings.SENTRY_UDP_PORT
-        self.workers = workers or self.POOL_SIZE
-
-    def setup(self):
-        assert self._socket and self._spawn, \
-            'Base class cannot be used to run the udp service.'
-
-    def handle(self, data, address):
-        return handle_sentry(data, address)
-
-    def run(self):
-        try:
-            self.setup()
-        except ImportError:
-            raise CommandError(
-                'It seems that you don\'t have the ``%s`` package installed, '
-                'which is required to run the udp service.' % (self.name,))
-
-        if self.use_ipv6:
-            sock = self._socket(socket.AF_INET6, socket.SOCK_DGRAM)
-            sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY, 0)
-            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
-            sock.bind((self.host.strip('[]'), self.port))
-        else:
-            sock = self._socket(socket.AF_INET, socket.SOCK_DGRAM)
-            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
-            sock.bind((self.host, self.port))
-
-        while True:
-            try:
-                self._spawn(self.handle, *sock.recvfrom(self.BUF_SIZE))
-            except (SystemExit, KeyboardInterrupt):
-                break
-
-
-class EventletUDPServer(BaseUDPServer):
-
-    name = 'eventlet'
-
-    def setup(self):
-        import eventlet
-        from eventlet.green import socket
-        self._socket = socket.socket
-        self._pool = eventlet.GreenPool(size=self.workers)
-        self._spawn = self._pool.spawn_n
-
-
-class GeventUDPServer(BaseUDPServer):
-
-    name = 'gevent'
-
-    def setup(self):
-        from gevent import socket, pool
-        self._socket = socket.socket
-        self._pool = pool.Pool(size=self.workers)
-        self._spawn = self._pool.spawn
-
-
-default_servers = {
-    'gevent': GeventUDPServer,
-    'eventlet': EventletUDPServer,
-}
-
-
-def get_server_class(worker=None):
-    from django.conf import settings
-
-    if worker is None:
-        # Use eventlet as default worker type
-        worker = getattr(settings, 'SENTRY_UDP_WORKER', None) or 'eventlet'
-    if worker not in default_servers:
-        raise CommandError(
-            'Unsupported udp server type; expected one of %s, but got "%s".'
-            % (', '.join(default_servers.keys()), worker))
-
-    return default_servers[worker]
-
-
-class SentryUDPServer(Service):
-    '''
-    It's factory for sentry udp servers. The factory class used for
-    compatibility reason, you should not subclass it. See `get_server_class`
-    function for details.
-    '''
-    def __new__(cls, *args, **kwargs):
-        worker = kwargs.pop('worker', None)
-        server_cls = get_server_class(worker=worker)
-        return server_cls(*args, **kwargs)
diff --git a/tests/sentry/udp/__init__.py b/tests/sentry/udp/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/udp/tests.py b/tests/sentry/udp/tests.py
deleted file mode 100644
index 1fdd686af9..0000000000
--- a/tests/sentry/udp/tests.py
+++ /dev/null
@@ -1,28 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.models import Project, User
-from sentry.services.udp import SentryUDPServer
-from sentry.testutils import TestCase
-from sentry.testutils.helpers import get_auth_header
-
-
-class SentryUDPTest(TestCase):
-    def setUp(self):
-        self.address = (('0.0.0.0', 0))
-        self.server = SentryUDPServer(*self.address)
-        self.user = User.objects.create(username='coreapi')
-        self.project = Project.objects.create(owner=self.user, name='Foo', slug='bar')
-        self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
-        self.pk = self.project.key_set.get_or_create(user=self.user)[0]
-
-    def test_failure(self):
-        self.assertNotEquals(None, self.server.handle('deadbeef', self.address))
-
-    def test_success(self):
-        data = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
-        message = self._makeMessage(data)
-        header = get_auth_header('udpTest', api_key=self.pk.public_key, secret_key=self.pk.secret_key)
-        packet = header + '\n\n' + message
-        self.assertEquals(None, self.server.handle(packet, self.address))
