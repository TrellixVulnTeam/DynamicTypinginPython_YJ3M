commit dc085141882d60a6fdd45f993440a9c47b22004c
Author: evanh <evanh@users.noreply.github.com>
Date:   Mon Mar 16 10:39:04 2020 -0400

    fix(discover/issue search) Use contexts syntax for promoted context câ€¦ (#17550)
    
    Snuba prefers the contexts syntax for promoted context columns, in order to
    hide the underlying table structure.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 119e551b68..99174d617b 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -239,10 +239,6 @@ class SearchVisitor(NodeVisitor):
             "project_id",
             "project.id",
             "issue.id",
-            "device.battery_level",
-            "device.charging",
-            "device.online",
-            "device.simulator",
             "error.handled",
             "stack.colno",
             "stack.in_app",
diff --git a/src/sentry/data/samples/android.json b/src/sentry/data/samples/android.json
index ef5d209573..d24236955f 100644
--- a/src/sentry/data/samples/android.json
+++ b/src/sentry/data/samples/android.json
@@ -24,6 +24,7 @@
       "screen_density": 3,
       "type": "device",
       "charging": true,
+      "locale": "US",
       "model_id": "NYC",
       "brand": "google",
       "storage_size": 817143808,
@@ -33,6 +34,7 @@
       "name": "Android SDK built for x86",
       "free_storage": 508784640,
       "model": "Android SDK built for x86",
+      "uuid": "abadcade-feed-dead-beef-baddadfeeded",
       "archs": [
         "x86"
       ]
diff --git a/src/sentry/snuba/events.py b/src/sentry/snuba/events.py
index 7b1d27c232..6824a82451 100644
--- a/src/sentry/snuba/events.py
+++ b/src/sentry/snuba/events.py
@@ -39,43 +39,96 @@ class Columns(Enum):
     USER_IP_ADDRESS = Column("events.ip_address", "ip_address", "ip_address", "user.ip")
     SDK_NAME = Column("events.sdk_name", "sdk_name", "sdk_name", "sdk.name")
     SDK_VERSION = Column("events.sdk_version", "sdk_version", "sdk_version", "sdk.version")
-    HTTP_METHOD = Column("events.http_method", "http_method", "http_method", "http.method")
-    HTTP_REFERER = Column("events.http_referer", "http_referer", "http_referer", "http.url")
-    OS_BUILD = Column("events.os_build", "os_build", "os_build", "os.build")
+    HTTP_METHOD = Column(
+        "events.contexts[http.method]",
+        "contexts[http.method]",
+        "contexts[http.method]",
+        "http.method",
+    )
+    HTTP_REFERER = Column(
+        "events.contexts[http.referer]",
+        "contexts[http.referer]",
+        "contexts[http.referer]",
+        "http.referer",
+    )
+    HTTP_URL = Column(
+        "events.contexts[http.url]", "contexts[http.url]", "contexts[http.url]", "http.url"
+    )
+    OS_BUILD = Column(
+        "events.contexts[os.build]", "contexts[os.build]", "contexts[os.build]", "os.build"
+    )
     OS_KERNEL_VERSION = Column(
-        "events.os_kernel_version", "os_kernel_version", "os_kernel_version", "os.kernel_version"
+        "events.contexts[os.kernel_version]",
+        "contexts[os.kernel_version]",
+        "contexts[os.kernel_version]",
+        "os.kernel_version",
+    )
+    DEVICE_ARCH = Column(
+        "events.contexts[device.arch]",
+        "contexts[device.arch]",
+        "contexts[device.arch]",
+        "device.arch",
     )
-    DEVICE_ARCH = Column("events.device_arch", "device_arch", "device_arch", "device.arch")
     DEVICE_BATTERY_LEVEL = Column(
-        "events.device_battery_level",
-        "device_battery_level",
-        "device_battery_level",
+        "events.contexts[device.battery_level]",
+        "contexts[device.battery_level]",
+        "contexts[device.battery_level]",
         "device.battery_level",
     )
-    DEVICE_BRAND = Column("events.device_brand", "device_brand", "device_brand", "device.brand")
+    DEVICE_BRAND = Column(
+        "events.contexts[device.brand]",
+        "contexts[device.brand]",
+        "contexts[device.brand]",
+        "device.brand",
+    )
     DEVICE_CHARGING = Column(
-        "events.device_charging", "device_charging", "device_charging", "device.charging"
+        "events.contexts[device.charging]",
+        "contexts[device.charging]",
+        "contexts[device.charging]",
+        "device.charging",
     )
     DEVICE_LOCALE = Column(
-        "events.device_locale", "device_locale", "device_locale", "device.locale"
+        "events.contexts[device.locale]",
+        "contexts[device.locale]",
+        "contexts[device.locale]",
+        "device.locale",
     )
     DEVICE_MODEL_ID = Column(
-        "events.device_model_id", "device_model_id", "device_model_id", "device.model_id"
+        "events.contexts[device.model_id]",
+        "contexts[device.model_id]",
+        "contexts[device.model_id]",
+        "device.model_id",
+    )
+    DEVICE_NAME = Column(
+        "events.contexts[device.name]",
+        "contexts[device.name]",
+        "contexts[device.name]",
+        "device.name",
     )
-    DEVICE_NAME = Column("events.device_name", "device_name", "device_name", "device.name")
     DEVICE_ONLINE = Column(
-        "events.device_online", "device_online", "device_online", "device.online"
+        "events.contexts[device.online]",
+        "contexts[device.online]",
+        "contexts[device.online]",
+        "device.online",
     )
     DEVICE_ORIENTATION = Column(
-        "events.device_orientation",
-        "device_orientation",
-        "device_orientation",
+        "events.contexts[device.orientation]",
+        "contexts[device.orientation]",
+        "contexts[device.orientation]",
         "device.orientation",
     )
     DEVICE_SIMULATOR = Column(
-        "events.device_simulator", "device_simulator", "device_simulator", "device.simulator"
+        "events.contexts[device.simulator]",
+        "contexts[device.simulator]",
+        "contexts[device.simulator]",
+        "device.simulator",
+    )
+    DEVICE_UUID = Column(
+        "events.contexts[device.uuid]",
+        "contexts[device.uuid]",
+        "contexts[device.uuid]",
+        "device.uuid",
     )
-    DEVICE_UUID = Column("events.device_uuid", "device_uuid", "device_uuid", "device.uuid")
     GEO_COUNTRY_CODE = Column(
         "events.geo_country_code", "geo_country_code", "geo_country_code", "geo.country_code"
     )
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 05841633a0..f0927093b1 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -739,7 +739,7 @@ class QueryTransformTest(TestCase):
         )
         mock_query.assert_called_with(
             selected_columns=["transaction", "duration"],
-            conditions=[["http_method", "=", "GET"]],
+            conditions=[["contexts[http.method]", "=", "GET"]],
             filter_keys={"project_id": [self.project.id]},
             groupby=[],
             dataset=Dataset.Discover,
@@ -828,7 +828,7 @@ class QueryTransformTest(TestCase):
         )
         mock_query.assert_called_with(
             selected_columns=["transaction", "duration"],
-            conditions=[["http_method", "=", "GET"]],
+            conditions=[["contexts[http.method]", "=", "GET"]],
             filter_keys={"project_id": [self.project.id]},
             groupby=[],
             dataset=Dataset.Discover,
@@ -858,7 +858,7 @@ class QueryTransformTest(TestCase):
         )
         mock_query.assert_called_with(
             selected_columns=["transaction"],
-            conditions=[["http_method", "=", "GET"]],
+            conditions=[["contexts[http.method]", "=", "GET"]],
             filter_keys={"project_id": [self.project.id]},
             groupby=["transaction"],
             dataset=Dataset.Discover,
@@ -889,7 +889,7 @@ class QueryTransformTest(TestCase):
 
         mock_query.assert_called_with(
             selected_columns=["transaction"],
-            conditions=[["http_method", "=", "GET"]],
+            conditions=[["contexts[http.method]", "=", "GET"]],
             filter_keys={"project_id": [self.project.id]},
             groupby=["transaction"],
             dataset=Dataset.Discover,
@@ -920,7 +920,7 @@ class QueryTransformTest(TestCase):
 
         mock_query.assert_called_with(
             selected_columns=["transaction"],
-            conditions=[["http_method", "=", "GET"]],
+            conditions=[["contexts[http.method]", "=", "GET"]],
             filter_keys={"project_id": [self.project.id]},
             groupby=["transaction"],
             dataset=Dataset.Discover,
@@ -951,7 +951,7 @@ class QueryTransformTest(TestCase):
         )
         mock_query.assert_called_with(
             selected_columns=["transaction"],
-            conditions=[["http_method", "=", "GET"]],
+            conditions=[["contexts[http.method]", "=", "GET"]],
             filter_keys={"project_id": [self.project.id]},
             groupby=["transaction"],
             dataset=Dataset.Discover,
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 9bf4e10b25..29152b85ee 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+import pytest
 
 from django.core.urlresolvers import reverse
 
@@ -1961,3 +1963,132 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert len(data) == 2
             assert data[0]["issue"] == event1.group.qualified_short_id
             assert data[1]["issue"] == "unknown"
+
+    def test_context_fields(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        data = load_data("android")
+        transaction_data = load_data("transaction")
+        data["spans"] = transaction_data["spans"]
+        data["contexts"]["trace"] = transaction_data["contexts"]["trace"]
+        data["type"] = "transaction"
+        data["transaction"] = "/error_rate/1"
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        data["user"]["geo"] = {"country_code": "US", "region": "CA", "city": "San Francisco"}
+        data["contexts"]["http"] = {
+            "method": "GET",
+            "referer": "something.something",
+            "url": "https://areyouasimulation.com",
+        }
+        self.store_event(data, project_id=project.id)
+
+        fields = [
+            "http.method",
+            "http.referer",
+            "http.url",
+            "os.build",
+            "os.kernel_version",
+            "device.arch",
+            "device.battery_level",
+            "device.brand",
+            "device.charging",
+            "device.locale",
+            "device.model_id",
+            "device.name",
+            "device.online",
+            "device.orientation",
+            "device.simulator",
+            "device.uuid",
+        ]
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={"field": fields + ["count()"], "query": "event.type:transaction"},
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        results = response.data["data"]
+
+        for field in fields:
+            key, value = field.split(".", 1)
+            expected = data["contexts"][key][value]
+
+            # TODO (evanh) There is a bug in snuba right now where if a promoted column is used for a boolean
+            # value, it returns "1" or "0" instead of "True" and "False" (not that those make more sense)
+            if expected in (True, False):
+                expected = six.text_type(expected)
+            # All context columns are treated as strings, regardless of the type of data they stored.
+            elif isinstance(expected, six.integer_types):
+                expected = "{:.1f}".format(expected)
+
+            assert results[0][field] == expected
+        assert results[0]["count"] == 1
+
+    @pytest.mark.xfail(reason="these fields behave differently between the types of events")
+    def test_context_fields_in_errors(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        data = load_data("android")
+        transaction_data = load_data("transaction")
+        data["spans"] = transaction_data["spans"]
+        data["contexts"]["trace"] = transaction_data["contexts"]["trace"]
+        data["type"] = "error"
+        data["transaction"] = "/error_rate/1"
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        data["user"]["geo"] = {"country_code": "US", "region": "CA", "city": "San Francisco"}
+        data["contexts"]["http"] = {
+            "method": "GET",
+            "referer": "something.something",
+            "url": "https://areyouasimulation.com",
+        }
+        self.store_event(data, project_id=project.id)
+
+        fields = [
+            "http.method",
+            "http.referer",
+            "http.url",
+            "os.build",
+            "os.kernel_version",
+            "device.arch",
+            "device.battery_level",
+            "device.brand",
+            "device.charging",
+            "device.locale",
+            "device.model_id",
+            "device.name",
+            "device.online",
+            "device.orientation",
+            "device.simulator",
+            "device.uuid",
+        ]
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={"field": fields + ["count()"], "query": "event.type:error"},
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        results = response.data["data"]
+
+        for field in fields:
+            key, value = field.split(".", 1)
+            expected = data["contexts"][key][value]
+
+            # TODO (evanh) There is a bug in snuba right now where if a promoted column is used for a boolean
+            # value, it returns "1" or "0" instead of "True" and "False" (not that those make more sense)
+            if expected in (True, False):
+                expected = six.text_type(expected)
+            # All context columns are treated as strings, regardless of the type of data they stored.
+            elif isinstance(expected, six.integer_types):
+                expected = "{:.1f}".format(expected)
+
+            assert results[0][field] == expected
+        assert results[0]["count"] == 1
