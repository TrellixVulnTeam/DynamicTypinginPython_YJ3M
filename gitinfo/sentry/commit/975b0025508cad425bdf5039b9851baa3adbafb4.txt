commit 975b0025508cad425bdf5039b9851baa3adbafb4
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 25 11:20:24 2011 -0700

    Indexer and Paging now work without INSTALLED_APPS changes. The score value is now an actual colum in GroupedMessage. MessageIndex has been created to work with Indexer 0.3.0

diff --git a/docs/config.rst b/docs/config.rst
index ae93a7d01e..5f6093a4d7 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -8,8 +8,6 @@ To configure Sentry for use in a multi-server environment, first you'll want to
 
 	INSTALLED_APPS = [
 	  ...
-	  'indexer',
-	  'paging',
 	  'sentry',
 	  'sentry.client',
 	]
diff --git a/docs/install.rst b/docs/install.rst
index c063e0eac4..37c057be90 100644
--- a/docs/install.rst
+++ b/docs/install.rst
@@ -17,9 +17,6 @@ Once installed, update your settings.py and add ``sentry``, ``sentry.client``, `
 	    'django.contrib.contenttypes',
 	    'django.contrib.sessions',
 	    
-	    # don't forget to add the dependencies!
-	    'indexer',
-	    'paging',
 	    'sentry',
 	    'sentry.client',
 	    ...
diff --git a/example_project/settings.py b/example_project/settings.py
index c05fbefb92..4c0ba427a0 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -106,9 +106,7 @@ INSTALLED_APPS = (
     'sentry.plugins.sentry_sites',
     'sentry.plugins.sentry_urls',
     'haystack',
-    'paging',
     'south',
-    'indexer',
     # Uncomment the next line to enable the admin:
     # 'django.contrib.admin',
 )
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index d488f31904..b8672e686c 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -88,10 +88,10 @@ class SentryFilter(object):
                                                      .order_by('value'))
     
     def get_query_set(self, queryset):
-        from indexer.models import Index
+        from sentry.models import MessageIndex
         kwargs = {self.column: self.get_value()}
         if self.column.startswith('data__'):
-            return Index.objects.get_for_queryset(queryset, **kwargs)
+            return MessageIndex.objects.get_for_queryset(queryset, **kwargs)
         return queryset.filter(**kwargs)
     
     def process(self, data):
diff --git a/sentry/manager.py b/sentry/manager.py
index f9597a2f07..8bdbf69324 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -64,17 +64,19 @@ class SentryManager(models.Manager):
             )
             kwargs.pop('data', None)
             if not created:
-                GroupedMessage.objects.filter(pk=group.pk).update(
-                    times_seen=models.F('times_seen') + 1,
-                    status=0,
-                    last_seen=now,
-                )
                 # HACK: maintain appeared state
                 if group.status == 1:
                     mail = True
                 group.status = 0
                 group.last_seen = now
                 group.times_seen += 1
+                GroupedMessage.objects.filter(pk=group.pk).update(
+                    times_seen=models.F('times_seen') + 1,
+                    status=0,
+                    last_seen=now,
+                    # XXX: this is precise and non-atomic
+                    score=group.get_score(),
+                )
                 signals.post_save.send(sender=GroupedMessage, instance=group, created=False)
             else: 
                 mail = True
diff --git a/sentry/migrations/0010_auto__add_messageindex__add_unique_messageindex_column_value_object_id.py b/sentry/migrations/0010_auto__add_messageindex__add_unique_messageindex_column_value_object_id.py
new file mode 100644
index 0000000000..985dab3c94
--- /dev/null
+++ b/sentry/migrations/0010_auto__add_messageindex__add_unique_messageindex_column_value_object_id.py
@@ -0,0 +1,83 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'MessageIndex'
+        db.create_table('sentry_messageindex', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
+            ('column', self.gf('django.db.models.fields.CharField')(max_length=32)),
+            ('value', self.gf('django.db.models.fields.CharField')(max_length=128)),
+        ))
+        db.send_create_signal('sentry', ['MessageIndex'])
+
+        # Adding unique constraint on 'MessageIndex', fields ['column', 'value', 'object_id']
+        db.create_unique('sentry_messageindex', ['column', 'value', 'object_id'])
+
+
+    def backwards(self, orm):
+        
+        # Removing unique constraint on 'MessageIndex', fields ['column', 'value', 'object_id']
+        db.delete_unique('sentry_messageindex', ['column', 'value', 'object_id'])
+
+        # Deleting model 'MessageIndex'
+        db.delete_table('sentry_messageindex')
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/migrations/0011_auto__add_field_groupedmessage_score.py b/sentry/migrations/0011_auto__add_field_groupedmessage_score.py
new file mode 100644
index 0000000000..f3469e4106
--- /dev/null
+++ b/sentry/migrations/0011_auto__add_field_groupedmessage_score.py
@@ -0,0 +1,72 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding field 'GroupedMessage.score'
+        db.add_column('sentry_groupedmessage', 'score', self.gf('django.db.models.fields.IntegerField')(default=0), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Deleting field 'GroupedMessage.score'
+        db.delete_column('sentry_groupedmessage', 'score')
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 9c12b9d4b7..55ec6528c0 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -7,13 +7,11 @@ except ImportError:
     import pickle
 import datetime
 import logging
-import sys
+import math
 
 from django.conf import settings
-from django.core.exceptions import ImproperlyConfigured
-from django.db import models, transaction
+from django.db import models
 from django.db.models import Count
-from django.db.models.signals import post_syncdb
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
@@ -22,13 +20,7 @@ from sentry.helpers import cached_property, construct_checksum, get_db_engine, t
 from sentry.manager import GroupedMessageManager, SentryManager
 from sentry.reporter import FakeRequest
 
-_reqs = ('paging', 'indexer')
-for r in _reqs:
-    if r not in settings.INSTALLED_APPS:
-        raise ImproperlyConfigured("Put '%s' in your "
-            "INSTALLED_APPS setting in order to use the sentry application." % r)
-
-from indexer.models import Index
+from indexer.models import BaseIndex
 
 try:
     from idmapper.models import SharedMemoryModel as Model
@@ -119,6 +111,8 @@ class GroupedMessage(MessageBase):
     last_seen       = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     first_seen      = models.DateTimeField(default=datetime.datetime.now, db_index=True)
 
+    score           = models.IntegerField(default=0)
+    
     objects         = GroupedMessageManager()
 
     class Meta:
@@ -140,24 +134,13 @@ class GroupedMessage(MessageBase):
     def natural_key(self):
         return (self.logger, self.view, self.checksum)
 
-    @classmethod
-    def create_sort_index(cls, sender, db, created_models, **kwargs):
-        # This is only supported in postgres
-        engine = get_db_engine()
-        if not engine.startswith('postgresql'):
-            return
-        if cls not in created_models:
-            return
+    def save(self, *args, **kwargs):
+        self.score = self.get_score()
+        super(GroupedMessage, self).save(*args, **kwargs)
+
+    def get_score(self):
+        int(math.log(self.times_seen) * 600 + int(self.last_seen.strftime('%s')))
 
-        from django.db import connections
-        
-        try:
-            cursor = connections[db].cursor()
-            cursor.execute("create index sentry_groupedmessage_score on sentry_groupedmessage ((%s))" % (cls.get_score_clause(),))
-            cursor.close()
-        except:
-            transaction.rollback_unless_managed()
-        
     @classmethod
     def get_score_clause(cls):
         engine = get_db_engine()
@@ -314,6 +297,11 @@ class FilterValue(models.Model):
     class Meta:
         unique_together = (('key', 'value'),)
 
+### django-indexer
+
+class MessageIndex(BaseIndex):
+    model = Message
+
 ### Helper methods
 
 def register_indexes():
@@ -323,10 +311,6 @@ def register_indexes():
     logger = logging.getLogger('sentry.setup')
     for filter_ in get_filters():
         if filter_.column.startswith('data__'):
-            Index.objects.register_model(Message, filter_.column, index_to='group')
+            MessageIndex.objects.register_index(filter_.column, index_to='group')
             logger.debug('Registered index for for %s' % filter_.column)
 register_indexes()
-
-# XXX: Django sucks and we can't listen to our specific app
-# post_syncdb.connect(GroupedMessage.create_sort_index, sender=__name__)
-post_syncdb.connect(GroupedMessage.create_sort_index, sender=sys.modules[__name__])
diff --git a/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html b/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html
index c387841b0a..da78e297cd 100644
--- a/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html
+++ b/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html
@@ -1,7 +1,5 @@
 {% extends BASE_TEMPLATE %}
 
-{% load paging_extras %}
-
 {% block inner %}
     <h2>Create Redmine Issue</h2>
     <form method="post" action="">
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
index 706ddb3919..652cafb9a8 100644
--- a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
+++ b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
@@ -1,6 +1,6 @@
 {% extends "sentry/group/details.html" %}
 
-{% load paging_extras %}
+{% load sentry_helpers %}
 
 {% block inner %}
     <h2>Server List</h2>
diff --git a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
index eff5bed1d2..888f472886 100644
--- a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
+++ b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
@@ -1,6 +1,6 @@
 {% extends "sentry/group/details.html" %}
 
-{% load paging_extras %}
+{% load sentry_helpers %}
 
 {% block inner %}
     <h2>Site List</h2>
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
index 5027a19d43..4e949a3007 100644
--- a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
+++ b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
@@ -1,6 +1,6 @@
 {% extends "sentry/group/details.html" %}
 
-{% load paging_extras %}
+{% load sentry_helpers %}
 
 {% block inner %}
     <h2>URL List</h2>
diff --git a/sentry/runtests.py b/sentry/runtests.py
index 6277b81d9b..32ab9f82c6 100644
--- a/sentry/runtests.py
+++ b/sentry/runtests.py
@@ -22,8 +22,6 @@ if not settings.configured:
             # Included to fix Disqus' test Django which solves IntegrityMessage case
             'django.contrib.contenttypes',
 
-            'paging',
-            'indexer',
             'south',
             'djcelery', # celery client
             'haystack',
diff --git a/sentry/templates/sentry/group/message.html b/sentry/templates/sentry/group/message.html
index 78fa7b4290..2a0b98b4c6 100644
--- a/sentry/templates/sentry/group/message.html
+++ b/sentry/templates/sentry/group/message.html
@@ -1,6 +1,5 @@
 {% extends "sentry/group/details.html" %}
 
-{% load paging_extras %}
 {% load sentry_helpers %}
 
 {% block title %}{{ group.error }} | Sentry{% endblock %}
diff --git a/sentry/templates/sentry/group/message_list.html b/sentry/templates/sentry/group/message_list.html
index 6a7423b03e..310afc4bbd 100644
--- a/sentry/templates/sentry/group/message_list.html
+++ b/sentry/templates/sentry/group/message_list.html
@@ -1,6 +1,6 @@
 {% extends "sentry/group/details.html" %}
 
-{% load paging_extras %}
+{% load sentry_helpers %}
 
 {% block inner %}
     <h2>Message List</h2>
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index 4b852fb8dd..d61fabde47 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -1,6 +1,5 @@
 {% extends "sentry/layout.html" %}
 
-{% load paging_extras %}
 {% load sentry_helpers %}
 
 {% block heading %}Dashboard{% endblock %}
diff --git a/sentry/templates/sentry/layout.html b/sentry/templates/sentry/layout.html
index e143d7664c..1a6e990ed1 100644
--- a/sentry/templates/sentry/layout.html
+++ b/sentry/templates/sentry/layout.html
@@ -1,4 +1,3 @@
-{% load paging_extras %}
 {% load sentry_helpers %}
 
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 
diff --git a/sentry/templates/sentry/partial/_pager.html b/sentry/templates/sentry/partial/_pager.html
new file mode 100644
index 0000000000..99d8889ae5
--- /dev/null
+++ b/sentry/templates/sentry/partial/_pager.html
@@ -0,0 +1,23 @@
+{% if paginator.has_pages %}
+    <div class="paging">
+        <div class="paging-meta">Page {{ paginator.page }}{% if paginator.num_pages %} of {{ paginator.num_pages }}{% endif %}</div>
+        {% if paginator.num_pages %}
+            <ul class="paging-numeric">
+                <li class="paging-first">{% if not paginator.is_first %}<a href="?{{ query_string|escape }}&amp;p=1">First</a>{% else %}<span>First</span>{% endif %}</li>
+                <li class="paging-previous">{% if paginator.has_previous %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.previous_page }}">Previous</a>{% else %}<span>Previous</span>{% endif %}</li>
+                {% for p in paginator.page_range %}
+                    <li{% ifequal p paginator.page %} class="paging-current"{% endifequal %}><a href="?{{ query_string|escape }}&amp;p={{ p }}">{{ p }}</a></li>
+                {% endfor %}
+                <li class="paging-next">{% if paginator.has_next %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.next_page }}">Next</a>{% else %}<span>Next</span>{% endif %}</li>
+                {% if paginator.num_pages %}
+                    <li class="paging-last">{% if not paginator.is_last %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.num_pages }}">Last</a>{% else %}<span>Last</span>{% endif %}</li>
+                {% endif %}
+            </ul>
+        {% else %}
+            <ul class="paging-endless">
+                <li class="paging-previous">{% if paginator.has_previous %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.previous_page }}">Previous Page</a>{% else %}<span>Previous Page</span>{% endif %}</li>
+                <li class="paging-next">{% if paginator.has_next %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.next_page }}">Next Page</a>{% else %}<span>Next Page</span>{% endif %}</li>
+            </ul>
+        {% endif %}
+    </div>
+{% endif %}
\ No newline at end of file
diff --git a/sentry/templates/sentry/search.html b/sentry/templates/sentry/search.html
index b47f1f7255..414f99c016 100644
--- a/sentry/templates/sentry/search.html
+++ b/sentry/templates/sentry/search.html
@@ -1,6 +1,5 @@
 {% extends "sentry/layout.html" %}
 
-{% load paging_extras %}
 {% load sentry_helpers %}
 
 {% block heading %}Dashboard{% endblock %}
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 26ba6f8695..14f5143c6d 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -1,9 +1,16 @@
+# XXX: Import django-paging's template tags so we dont have to worry about
+#      INSTALLED_APPS
 from django import template
 from django.db.models import Count
 from django.utils import simplejson
+from django.utils.safestring import mark_safe
+from django.template import RequestContext
 from django.template.defaultfilters import stringfilter
-
+from django.template.loader import render_to_string
+from paging.helpers import paginate as paginate_func
 from sentry.plugins import GroupActionProvider
+from templatetag_sugar.register import tag
+from templatetag_sugar.parser import Name, Variable, Constant, Optional
 
 import datetime
 
@@ -155,4 +162,23 @@ def truncatechars(value, arg):
     if len(value) > length:
         return value[:length] + '...'
     return value
-truncatechars.is_safe = True
\ No newline at end of file
+truncatechars.is_safe = True
+
+# XXX: this is taken from django-paging so that we may render
+#      a custom template, and not worry about INSTALLED_APPS
+@tag(register, [Variable('queryset_or_list'),
+                Constant('from'), Variable('request'),
+                Optional([Constant('as'), Name('asvar')]),
+                Optional([Constant('per_page'), Variable('per_page')]),
+                Optional([Variable('is_endless')])])
+def paginate(context, queryset_or_list, request, asvar, per_page=25, is_endless=True):
+    """{% paginate queryset_or_list from request as foo[ per_page 25][ is_endless False %}"""
+    context_instance = RequestContext(request)
+    paging_context = paginate_func(request, queryset_or_list, per_page, endless=is_endless)
+    paging = mark_safe(render_to_string('sentry/partial/_pager.html', paging_context, context_instance))
+
+    result = dict(objects=paging_context['paginator'].get('objects', []), paging=paging)
+    if asvar:
+        context[asvar] = result
+        return ''
+    return result
\ No newline at end of file
diff --git a/setup.py b/setup.py
index e82a4479d9..ac0ccb469c 100644
--- a/setup.py
+++ b/setup.py
@@ -17,7 +17,7 @@ tests_require = [
 
 setup(
     name='django-sentry',
-    version='1.6.10',
+    version='1.7.0',
     author='David Cramer',
     author_email='dcramer@gmail.com',
     url='http://github.com/dcramer/django-sentry',
@@ -26,7 +26,7 @@ setup(
     zip_safe=False,
     install_requires=[
         'django-paging>=0.2.2',
-        'django-indexer==0.2.1',
+        'django-indexer==0.3.0',
         'uuid',
     ],
     dependency_links=[
