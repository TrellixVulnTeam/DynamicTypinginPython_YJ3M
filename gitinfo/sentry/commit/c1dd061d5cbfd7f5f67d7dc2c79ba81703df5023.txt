commit c1dd061d5cbfd7f5f67d7dc2c79ba81703df5023
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jan 2 15:18:40 2018 -0800

    feat(ui+api): Add/open sudo modal when API endpoints require sudo (#6727)
    
    * feat(api): Add `sudo` API endpoint
    * feat(api): Add API endpoint to list authenticators (u2f only rn)
    * feat(ui): Add form options to reset on error, customize error message
    * feat(ui): Add u2f container that uses API to see if u2f is supported, modify u2fsignin to handle onTap outside of component
    * feat(ui): Add support for a sudo modal for any API request

diff --git a/src/sentry/api/decorators.py b/src/sentry/api/decorators.py
index 499cdfd0d8..6c83b970e2 100644
--- a/src/sentry/api/decorators.py
+++ b/src/sentry/api/decorators.py
@@ -1,17 +1,19 @@
 from __future__ import absolute_import
 
-import json
-
-from django.http import HttpResponse
+from rest_framework.response import Response
 from functools import wraps
 
 from sentry.models import ApiKey, ApiToken
 
 
 def is_considered_sudo(request):
+    # Users without a password are assumed to always have sudo powers
+    user = request.user
+
     return request.is_sudo() or \
         isinstance(request.auth, ApiKey) or \
-        isinstance(request.auth, ApiToken)
+        isinstance(request.auth, ApiToken) or \
+        user.is_authenticated() and not user.has_usable_password()
 
 
 def sudo_required(func):
@@ -27,7 +29,7 @@ def sudo_required(func):
                 "sudoRequired": True,
                 "username": request.user.username,
             }
-            return HttpResponse(json.dumps(data), status=401)
+            return Response(data, status=401)
         return func(self, request, *args, **kwargs)
 
     return wrapped
diff --git a/src/sentry/api/endpoints/authenticator_index.py b/src/sentry/api/endpoints/authenticator_index.py
new file mode 100644
index 0000000000..3cc2b468ed
--- /dev/null
+++ b/src/sentry/api/endpoints/authenticator_index.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+from rest_framework.permissions import IsAuthenticated
+
+from sentry.api.base import Endpoint
+from sentry.models import Authenticator
+
+
+class AuthenticatorIndexEndpoint(Endpoint):
+    permission_classes = (IsAuthenticated, )
+
+    def get(self, request):
+        """Returns u2f interface for a user, otherwise an empty array
+        """
+
+        # Currently just expose u2f challenge, not sure if it's necessary to list all
+        # authenticator interfaces that are enabled
+        try:
+            interface = Authenticator.objects.get_interface(request.user, 'u2f')
+            if not interface.is_enrolled:
+                raise LookupError()
+        except LookupError:
+            return Response([])
+
+        challenge = interface.activate(request._request).challenge
+
+        # I don't think we currently support multiple interfaces of the same type
+        # but just future proofing I guess
+        return Response([{
+            'id': 'u2f',
+            'challenge': challenge
+        }])
diff --git a/src/sentry/api/endpoints/sudo.py b/src/sentry/api/endpoints/sudo.py
new file mode 100644
index 0000000000..b9590e660a
--- /dev/null
+++ b/src/sentry/api/endpoints/sudo.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+from django.contrib import auth
+from rest_framework.response import Response
+from rest_framework.permissions import IsAuthenticated
+from sudo.utils import grant_sudo_privileges
+
+from sentry.api.base import Endpoint
+from sentry.models import Authenticator
+from sentry.utils import json
+
+
+class SudoEndpoint(Endpoint):
+    permission_classes = (IsAuthenticated, )
+
+    def post(self, request):
+        authenticated = False
+
+        if 'challenge' in request.DATA and 'response' in request.DATA:
+            try:
+                interface = Authenticator.objects.get_interface(request.user, 'u2f')
+                if not interface.is_enrolled:
+                    raise LookupError()
+
+                challenge = json.loads(request.DATA['challenge'])
+                response = json.loads(request.DATA['response'])
+                authenticated = interface.validate_response(request, challenge, response)
+            except ValueError:
+                pass
+            except LookupError:
+                pass
+
+        else:
+            authenticated = auth.authenticate(
+                username=request.user.email,
+                password=request.DATA.get('password'))
+
+        if authenticated:
+            grant_sudo_privileges(request._request)
+            return Response(status=200)
+
+        return Response({'allowFail': True}, content_type="application/json", status=401)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index f386a1ba4d..b472b42941 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -7,6 +7,7 @@ from .endpoints.api_application_details import ApiApplicationDetailsEndpoint
 from .endpoints.api_authorizations import ApiAuthorizationsEndpoint
 from .endpoints.api_tokens import ApiTokensEndpoint
 from .endpoints.auth_index import AuthIndexEndpoint
+from .endpoints.authenticator_index import AuthenticatorIndexEndpoint
 from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.catchall import CatchallEndpoint
 from .endpoints.event_details import EventDetailsEndpoint
@@ -120,6 +121,7 @@ from .endpoints.dsym_files import DSymFilesEndpoint, \
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
 from .endpoints.system_health import SystemHealthEndpoint
 from .endpoints.system_options import SystemOptionsEndpoint
+from .endpoints.sudo import SudoEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_groups_new import TeamGroupsNewEndpoint
 from .endpoints.team_groups_trending import TeamGroupsTrendingEndpoint
@@ -162,6 +164,14 @@ urlpatterns = patterns(
     # Auth
     url(r'^auth/$', AuthIndexEndpoint.as_view(), name='sentry-api-0-auth'),
 
+    # List Authentiactors
+    url(r'^authenticators/$',
+        AuthenticatorIndexEndpoint.as_view(),
+        name='sentry-api-0-authenticator-index'),
+
+    # Sudo
+    url(r'^sudo/$', SudoEndpoint.as_view(), name='sentry-api-0-sudo'),
+
     # Broadcasts
     url(r'^broadcasts/$', BroadcastIndexEndpoint.as_view(),
         name='sentry-api-0-broadcast-index'),
diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index 1a22df92d7..17791ab483 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -1,3 +1,5 @@
+const RealClient = require.requireActual('app/api');
+
 export class Request {}
 
 const respond = (isAsync, fn, ...args) => {
@@ -50,6 +52,10 @@ class Client {
     });
   }
 
+  wrapCallback(id, error) {
+    return (...args) => respond(Client.mockAsync, error, ...args);
+  }
+
   requestPromise(url, options) {
     return new Promise((resolve, reject) =>
       this.request(url, {
@@ -82,7 +88,13 @@ class Client {
         responseText: JSON.stringify(response.body),
         responseJSON: response.body,
       };
-      respond(Client.mockAsync, options.error, resp);
+      this.handleRequestError(
+        {
+          path: url,
+          requestOptions: options,
+        },
+        resp
+      );
     } else {
       response.callCount++;
       respond(
@@ -97,4 +109,6 @@ class Client {
   }
 }
 
+Client.prototype.handleRequestError = RealClient.Client.prototype.handleRequestError;
+
 export {Client};
diff --git a/src/sentry/static/sentry/app/actionCreators/sudo.jsx b/src/sentry/static/sentry/app/actionCreators/sudo.jsx
new file mode 100644
index 0000000000..0d2837c149
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/sudo.jsx
@@ -0,0 +1,8 @@
+import SudoActions from '../actions/sudoActions';
+
+/**
+ * Show "sudo" modal
+ */
+export function openSudo(options = {}) {
+  SudoActions.openModal(options);
+}
diff --git a/src/sentry/static/sentry/app/actions/sudoActions.jsx b/src/sentry/static/sentry/app/actions/sudoActions.jsx
new file mode 100644
index 0000000000..db8055a60d
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/sudoActions.jsx
@@ -0,0 +1,3 @@
+import Reflux from 'reflux';
+
+export default Reflux.createActions(['openModal', 'closeModal']);
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 270f4a6f5a..05ef60599b 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -2,6 +2,7 @@ import $ from 'jquery';
 import _ from 'lodash';
 
 import GroupActions from './actions/groupActions';
+import {openSudo} from './actionCreators/sudo';
 
 export class Request {
   constructor(xhr) {
@@ -68,6 +69,31 @@ export class Client {
     }
   }
 
+  handleRequestError({id, path, requestOptions}, response, ...responseArgs) {
+    let isSudoRequired =
+      response && response.responseJSON && response.responseJSON.sudoRequired;
+
+    if (isSudoRequired) {
+      openSudo({
+        retryRequest: () => {
+          return this.requestPromise(path, requestOptions)
+            .then((...args) => {
+              if (typeof requestOptions.success !== 'function') return;
+
+              requestOptions.success(...args);
+            })
+            .catch((...args) => {
+              if (typeof requestOptions.error !== 'function') return;
+              requestOptions.error(...args);
+            });
+        },
+      });
+    } else {
+      // Call normal error callback
+      this.wrapCallback(id, requestOptions.error)(response, ...responseArgs);
+    }
+  }
+
   request(path, options = {}) {
     let query = $.param(options.query || '', true);
     let method = options.method || (options.data ? 'POST' : 'GET');
@@ -102,7 +128,15 @@ export class Client {
           Accept: 'application/json; charset=utf-8',
         },
         success: this.wrapCallback(id, options.success),
-        error: this.wrapCallback(id, options.error),
+        error: (...args) =>
+          this.handleRequestError(
+            {
+              id,
+              path,
+              requestOptions: options,
+            },
+            ...args
+          ),
         complete: this.wrapCallback(id, options.complete, true),
       })
     );
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index fbf54fdb69..e4af149ac7 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -18,6 +18,9 @@ export default class Form extends React.Component {
     extraButton: PropTypes.element,
     initialData: PropTypes.object,
     requireChanges: PropTypes.bool,
+    errorMessage: PropTypes.node,
+    hideErrors: PropTypes.bool,
+    resetOnError: PropTypes.bool,
   };
 
   static defaultProps = {
@@ -27,6 +30,11 @@ export default class Form extends React.Component {
     footerClass: 'form-actions align-right',
     className: 'form-stacked',
     requireChanges: false,
+    hideErrors: false,
+    resetOnError: false,
+    errorMessage: t(
+      'Unable to save your changes. Please ensure all fields are valid and try again.'
+    ),
   };
 
   static childContextTypes = {
@@ -80,6 +88,13 @@ export default class Form extends React.Component {
       state: FormState.ERROR,
       errors: error.responseJSON,
     });
+
+    if (this.props.resetOnError) {
+      this.setState({
+        initialData: {},
+      });
+    }
+
     this.props.onSubmitError && this.props.onSubmitError(error);
   };
 
@@ -95,33 +110,32 @@ export default class Form extends React.Component {
   render() {
     let isSaving = this.state.state === FormState.SAVING;
     let {initialData, data} = this.state;
-    let {requireChanges} = this.props;
+    let {errorMessage, hideErrors, requireChanges} = this.props;
     let hasChanges = requireChanges
       ? Object.keys(data).length && !_.isEqual(data, initialData)
       : true;
     let isError = this.state.state == FormState.ERROR;
+    let nonFieldErrors = this.state.errors && this.state.errors.non_field_errors;
+
     return (
       <form onSubmit={this.onSubmit} className={this.props.className}>
-        {isError && (
-          <div className="alert alert-error alert-block">
-            {this.state.errors.non_field_errors ? (
-              <div>
-                <p>
-                  {t(
-                    'Unable to save your changes. Please correct the following errors try again.'
-                  )}
-                </p>
-                <ul>
-                  {this.state.errors.non_field_errors.map((e, i) => <li key={i}>{e}</li>)}
-                </ul>
-              </div>
-            ) : (
-              t(
-                'Unable to save your changes. Please ensure all fields are valid and try again.'
-              )
-            )}
-          </div>
-        )}
+        {isError &&
+          !hideErrors && (
+            <div className="alert alert-error alert-block">
+              {nonFieldErrors ? (
+                <div>
+                  <p>
+                    {t(
+                      'Unable to save your changes. Please correct the following errors try again.'
+                    )}
+                  </p>
+                  <ul>{nonFieldErrors.map((e, i) => <li key={i}>{e}</li>)}</ul>
+                </div>
+              ) : (
+                errorMessage
+              )}
+            </div>
+          )}
         {this.props.children}
         <div className={this.props.footerClass} style={{marginTop: 25}}>
           <button
diff --git a/src/sentry/static/sentry/app/components/forms/simplePasswordField.jsx b/src/sentry/static/sentry/app/components/forms/simplePasswordField.jsx
new file mode 100644
index 0000000000..e18d141a7c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/simplePasswordField.jsx
@@ -0,0 +1,7 @@
+import InputField from './inputField';
+
+export default class SimplePasswordField extends InputField {
+  getType() {
+    return 'password';
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
new file mode 100644
index 0000000000..a8255dae5d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
@@ -0,0 +1,142 @@
+import {browserHistory} from 'react-router';
+import Modal from 'react-bootstrap/lib/Modal';
+import React from 'react';
+import Reflux from 'reflux';
+import classNames from 'classnames';
+
+import {t} from '../../locale';
+import ApiForm from '../forms/apiForm';
+import ApiMixin from '../../mixins/apiMixin';
+import LoadingIndicator from '../loadingIndicator';
+import SimplePasswordField from '../forms/simplePasswordField';
+import SudoActions from '../../actions/sudoActions';
+import SudoModalStore from '../../stores/sudoModalStore';
+import U2fContainer from '../u2fContainer';
+
+const SudoModal = React.createClass({
+  mixins: [ApiMixin, Reflux.connect(SudoModalStore, 'modalProps')],
+
+  getInitialState() {
+    return {
+      modalProps: false,
+      error: false,
+      busy: false,
+    };
+  },
+
+  componentDidMount() {
+    // Listen for route changes so we can dismiss modal
+    this.unlisten = browserHistory.listen(() =>
+      this.setState({
+        modalProps: false,
+      })
+    );
+  },
+
+  componentWillUnmount() {
+    if (this.unlisten) {
+      this.unlisten();
+    }
+  },
+
+  handleSubmit() {
+    this.setState({busy: true});
+  },
+
+  handleSuccess() {
+    if (!this.state.modalProps || !this.state.modalProps.retryRequest) return;
+
+    this.setState(
+      {
+        busy: true,
+      },
+      () => {
+        if (!this.state.modalProps) return;
+
+        this.state.modalProps.retryRequest().then(() => {
+          this.setState(
+            {
+              busy: false,
+            },
+            SudoActions.closeModal
+          );
+        });
+      }
+    );
+  },
+
+  handleError() {
+    this.setState({
+      busy: false,
+      error: true,
+    });
+  },
+
+  handleU2fTap(data) {
+    this.setState({busy: true});
+    // u2Interface expects this to return a promise
+    return this.api
+      .requestPromise('/sudo/', {
+        method: 'POST',
+        data,
+      })
+      .then(() => {
+        this.handleSuccess();
+      })
+      .catch(err => {
+        this.setState({busy: false});
+
+        // u2fInterface relies on this
+        throw err;
+      });
+  },
+
+  render() {
+    let {className} = this.props;
+    let cx = classNames('sudo-modal', className);
+    let showModal = !!this.state.modalProps;
+
+    return (
+      <Modal
+        className={cx}
+        show={showModal}
+        animation={false}
+        onHide={SudoActions.closeModal}
+      >
+        {showModal && (
+          <ApiForm
+            apiMethod="POST"
+            apiEndpoint="/sudo/"
+            footerClass="modal-footer"
+            submitLabel={t('Continue')}
+            onSubmit={this.handleSubmit}
+            onSubmitSuccess={this.handleSuccess}
+            onSubmitError={this.handleError}
+            hideErrors
+            resetOnError
+          >
+            <Modal.Header closeButton onHide={SudoActions.closeModal}>
+              {t('Confirm Your Identity')}
+            </Modal.Header>
+
+            <Modal.Body>
+              {this.state.busy && <LoadingIndicator overlay />}
+              <p>{t('Help us keep your account safe by confirming your identity.')}</p>
+              {this.state.error && (
+                <div className="alert alert-error alert-block">
+                  {t('Incorrect password')}
+                </div>
+              )}
+
+              <SimplePasswordField label={t('Password')} required name="password" />
+
+              <U2fContainer displayMode="sudo" onTap={this.handleU2fTap} />
+            </Modal.Body>
+          </ApiForm>
+        )}
+      </Modal>
+    );
+  },
+});
+
+export default SudoModal;
diff --git a/src/sentry/static/sentry/app/components/u2fContainer.jsx b/src/sentry/static/sentry/app/components/u2fContainer.jsx
new file mode 100644
index 0000000000..a2f0b0f437
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/u2fContainer.jsx
@@ -0,0 +1,52 @@
+import React from 'react';
+
+import {Client} from '../api';
+import U2fSign from './u2fsign';
+
+class U2fContainer extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      authenticators: null,
+    };
+    this.api = new Client();
+  }
+
+  componentDidMount() {
+    this.api
+      .requestPromise('/authenticators/')
+      .then(resp => {
+        this.setState({
+          authenticators: resp || [],
+        });
+      })
+      .catch(() => {
+        // ignore errors
+      });
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+    this.api = null;
+  }
+
+  render() {
+    if (this.state.authenticators) {
+      return (
+        <div>
+          {this.state.authenticators.map(({id, ...other}) => {
+            if (id === 'u2f' && other.challenge) {
+              return <U2fSign key={id} {...this.props} challengeData={other.challenge} />;
+            }
+
+            return null;
+          })}
+        </div>
+      );
+    }
+
+    return null;
+  }
+}
+
+export default U2fContainer;
diff --git a/src/sentry/static/sentry/app/components/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2finterface.jsx
index 7038cd8754..2e7b35a92e 100644
--- a/src/sentry/static/sentry/app/components/u2finterface.jsx
+++ b/src/sentry/static/sentry/app/components/u2finterface.jsx
@@ -68,10 +68,27 @@ class U2fInterface extends React.Component {
             hasBeenTapped: true,
           },
           () => {
-            //eslint-disable-next-line react/no-direct-mutation-state
-            this.state.responseElement.value = JSON.stringify(data);
-            if (!this.props.onTap || this.props.onTap()) {
-              this.state.formElement.submit();
+            let u2fResponse = JSON.stringify(data);
+            let challenge = JSON.stringify(this.props.challengeData);
+
+            // eslint-disable-next-line react/no-direct-mutation-state
+            this.state.responseElement.value = u2fResponse;
+
+            if (!this.props.onTap) {
+              this.state.formElement && this.state.formElement.submit();
+            } else {
+              this.props
+                .onTap({
+                  response: u2fResponse,
+                  challenge,
+                })
+                .catch(err => {
+                  // This is kind of gross but I want to limit the amount of changes to this component
+                  this.setState({
+                    deviceFailure: 'UNKNOWN_ERROR',
+                    hasBeenTapped: false,
+                  });
+                });
             }
           }
         );
@@ -105,9 +122,12 @@ class U2fInterface extends React.Component {
   bindChallengeElement = ref => {
     this.setState({
       challengeElement: ref,
-      formElement: ref.form,
+      formElement: ref && ref.form,
     });
-    ref.value = JSON.stringify(this.props.challengeData);
+
+    if (ref) {
+      ref.value = JSON.stringify(this.props.challengeData);
+    }
   };
 
   bindResponseElement = ref => {
@@ -151,10 +171,11 @@ class U2fInterface extends React.Component {
     );
     return (
       <div className="failure-message">
-        <p>
+        <div>
           <strong>{t('Error: ')}</strong>{' '}
           {
             {
+              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),
               DEVICE_ERROR: t('Your U2F device reported an error.'),
               DUPLICATE_DEVICE: t('This device is already in use.'),
               UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),
@@ -172,13 +193,13 @@ class U2fInterface extends React.Component {
               ),
             }[deviceFailure]
           }
-        </p>
+        </div>
         {this.canTryAgain() && (
-          <p>
+          <div style={{marginTop: 18}}>
             <a onClick={this.onTryAgain} className="btn btn-primary">
               {t('Try Again')}
             </a>
-          </p>
+          </div>
         )}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/u2fsign.jsx b/src/sentry/static/sentry/app/components/u2fsign.jsx
index 07e728bf8a..b159766286 100644
--- a/src/sentry/static/sentry/app/components/u2fsign.jsx
+++ b/src/sentry/static/sentry/app/components/u2fsign.jsx
@@ -15,10 +15,10 @@ class U2fSign extends React.Component {
   };
 
   render() {
-    const {displayMode} = this.props;
+    const {displayMode, ...props} = this.props;
     return (
       <U2fInterface
-        challengeData={this.props.challengeData}
+        {...props}
         silentIfUnsupported={displayMode === 'sudo'}
         flowMode={'sign'}
       >
diff --git a/src/sentry/static/sentry/app/stores/sudoModalStore.jsx b/src/sentry/static/sentry/app/stores/sudoModalStore.jsx
new file mode 100644
index 0000000000..cd1215bb57
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/sudoModalStore.jsx
@@ -0,0 +1,27 @@
+import Reflux from 'reflux';
+
+import SudoActions from '../actions/sudoActions';
+
+const SudoModalStore = Reflux.createStore({
+  init() {
+    this.reset();
+    this.listenTo(SudoActions.closeModal, this.onCloseModal);
+    this.listenTo(SudoActions.openModal, this.onOpenModal);
+  },
+
+  reset() {
+    this.modalProps = null;
+  },
+
+  onCloseModal() {
+    this.modalProps = null;
+    this.trigger(this.modalProps);
+  },
+
+  onOpenModal(props) {
+    this.modalProps = props;
+    this.trigger(this.modalProps);
+  },
+});
+
+export default SudoModalStore;
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 36039f46da..a3f2a601f8 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -1,24 +1,24 @@
 /*global __webpack_public_path__ */
 /*eslint no-native-reassign:0 */
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
 import $ from 'jquery';
+import createReactClass from 'create-react-class';
 import Cookies from 'js-cookie';
 import {ThemeProvider} from 'emotion-theming';
-import theme from '../utils/theme';
+import PropTypes from 'prop-types';
+import React from 'react';
 
-import ApiMixin from '../mixins/apiMixin';
-import Alerts from '../components/alerts';
+import {t} from '../locale';
 import AlertActions from '../actions/alertActions';
+import Alerts from '../components/alerts';
+import ApiMixin from '../mixins/apiMixin';
 import ConfigStore from '../stores/configStore';
 import Indicators from '../components/indicators';
 import InstallWizard from './installWizard';
 import LoadingIndicator from '../components/loadingIndicator';
 import OrganizationsLoader from '../components/organizations/organizationsLoader';
 import OrganizationsStore from '../stores/organizationsStore';
-
-import {t} from '../locale';
+import SudoModal from '../components/modals/sudoModal';
+import theme from '../utils/theme';
 
 if (window.globalStaticUrl) __webpack_public_path__ = window.globalStaticUrl; // defined in layout.html
 
@@ -100,7 +100,13 @@ const App = createReactClass({
       // TODO: Need better way of identifying anonymous pages
       //       that don't trigger redirect
       let pageAllowsAnon = /^\/share\//.test(window.location.pathname);
-      if (jqXHR && jqXHR.status === 401 && !pageAllowsAnon) {
+      if (
+        jqXHR &&
+        jqXHR.status === 401 &&
+        !pageAllowsAnon &&
+        (!jqXHR.responseJSON ||
+          (!jqXHR.responseJSON.sudoRequired && !jqXHR.responseJSON.allowFail))
+      ) {
         Cookies.set('session_expired', 1);
         // User has become unauthenticated; reload URL, and let Django
         // redirect to login page
@@ -141,6 +147,7 @@ const App = createReactClass({
     return (
       <ThemeProvider theme={theme}>
         <OrganizationsLoader>
+          <SudoModal />
           <Alerts className="messages-container" />
           <Indicators className="indicators-container" />
           {this.props.children}
diff --git a/tests/js/spec/sudoModal.spec.jsx b/tests/js/spec/sudoModal.spec.jsx
new file mode 100644
index 0000000000..d91c68a1e0
--- /dev/null
+++ b/tests/js/spec/sudoModal.spec.jsx
@@ -0,0 +1,105 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import ConfigStore from 'app/stores/configStore';
+import App from 'app/views/app';
+
+describe('Sudo Modal', function() {
+  beforeEach(function() {
+    ConfigStore.set('messages', []);
+
+    Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/internal/health/',
+      body: {
+        problems: [],
+      },
+    });
+    Client.addMockResponse({
+      url: '/organizations/',
+      body: [TestStubs.Organization()],
+    });
+    Client.addMockResponse({
+      url: '/organizations/org-slug/',
+      method: 'DELETE',
+      statusCode: 401,
+      body: {
+        sudoRequired: true,
+      },
+    });
+  });
+
+  afterEach(function() {
+    // trigger.mockReset();
+    ConfigStore.set('messages', []);
+  });
+
+  it('can delete an org with sudo flow', function(done) {
+    mount(<App />);
+
+    let api = new Client();
+    let successCb = jest.fn();
+    let errorCb = jest.fn();
+
+    // No Modal
+    expect($('.modal input').length).toBe(0);
+
+    // Should return w/ `sudoRequired`
+    api.request('/organizations/org-slug/', {
+      method: 'DELETE',
+      success: successCb,
+      error: errorCb,
+    });
+
+    setTimeout(() => {
+      // SudoModal
+      const $input = $('.modal input');
+      expect($input.length).toBe(1);
+
+      // Original callbacks should not have been called
+      expect(successCb).not.toBeCalled();
+      expect(errorCb).not.toBeCalled();
+
+      // Clear mocks and allow DELETE
+      Client.clearMockResponses();
+      Client.addMockResponse({
+        url: '/organizations/org-slug/',
+        method: 'DELETE',
+        statusCode: 200,
+      });
+      Client.addMockResponse({
+        url: '/sudo/',
+        method: 'POST',
+        statusCode: 200,
+      });
+
+      // "Sudo" auth
+      $input.val('password');
+      $('.modal [type="submit"]').click();
+
+      expect(
+        Client.getCallCount(
+          Client.findMockResponse('/sudo/', {
+            method: 'POST',
+          })
+        )
+      ).toBe(1);
+
+      setTimeout(() => {
+        // Modal can be around but should be "busy"
+
+        // Retry API request
+        expect(successCb).toHaveBeenCalled();
+        expect(
+          Client.getCallCount(
+            Client.findMockResponse('/organizations/org-slug/', {
+              method: 'DELETE',
+            })
+          )
+        ).toBe(1);
+        done();
+      }, 1);
+    }, 1);
+  });
+});
diff --git a/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
index e3eeb0cd2d..d0fbcb1032 100644
--- a/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
@@ -13,7 +13,9 @@ exports[`AdminSettings render() renders 1`] = `
       apiMethod="PUT"
       cancelLabel="Cancel"
       className="form-stacked"
+      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
       footerClass="form-actions align-right"
+      hideErrors={false}
       initialData={
         Object {
           "api.rate-limit.org-create": 25,
@@ -29,6 +31,7 @@ exports[`AdminSettings render() renders 1`] = `
         }
       }
       requireChanges={true}
+      resetOnError={false}
       submitDisabled={false}
       submitLabel="Save Changes"
     >
diff --git a/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap b/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
index 950e14baef..0bc9623d84 100644
--- a/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
@@ -43,7 +43,9 @@ exports[`ApiNewToken render() renders 1`] = `
       apiMethod="POST"
       cancelLabel="Cancel"
       className="form-stacked api-new-token"
+      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
       footerClass="form-actions align-right"
+      hideErrors={false}
       initialData={
         Object {
           "scopes": Array [
@@ -60,6 +62,7 @@ exports[`ApiNewToken render() renders 1`] = `
       onCancel={[Function]}
       onSubmitSuccess={[Function]}
       requireChanges={false}
+      resetOnError={false}
       submitDisabled={false}
       submitLabel="Save Changes"
     >
diff --git a/tests/js/spec/views/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
index 9ce5b9d72c..2bfd7d8886 100644
--- a/tests/js/spec/views/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
@@ -25,7 +25,9 @@ exports[`OrganizationApiKeyDetailsView renders 1`] = `
         apiMethod="PUT"
         cancelLabel="Cancel"
         className="form-stacked"
+        errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
         footerClass="form-actions align-right"
+        hideErrors={false}
         initialData={
           Object {
             "allowed_origins": "",
@@ -45,6 +47,7 @@ exports[`OrganizationApiKeyDetailsView renders 1`] = `
         onSubmitError={[Function]}
         onSubmitSuccess={[Function]}
         requireChanges={false}
+        resetOnError={false}
         submitDisabled={false}
         submitLabel="Save Changes"
       >
diff --git a/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap
index 410859e60c..14f20c855f 100644
--- a/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap
@@ -61,7 +61,9 @@ exports[`OrganizationAuthProvider renders 1`] = `
         apiMethod="PUT"
         cancelLabel="Cancel"
         className="form-stacked"
+        errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
         footerClass="form-actions align-right"
+        hideErrors={false}
         initialData={
           Object {
             "auth_provider": Object {
@@ -78,6 +80,7 @@ exports[`OrganizationAuthProvider renders 1`] = `
         }
         onSubmit={[Function]}
         requireChanges={false}
+        resetOnError={false}
         submitDisabled={false}
         submitLabel="Save Settings"
       >
@@ -311,7 +314,9 @@ exports[`OrganizationAuthProvider renders with Unlinked members  1`] = `
         apiMethod="PUT"
         cancelLabel="Cancel"
         className="form-stacked"
+        errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
         footerClass="form-actions align-right"
+        hideErrors={false}
         initialData={
           Object {
             "auth_provider": Object {
@@ -328,6 +333,7 @@ exports[`OrganizationAuthProvider renders with Unlinked members  1`] = `
         }
         onSubmit={[Function]}
         requireChanges={false}
+        resetOnError={false}
         submitDisabled={false}
         submitLabel="Save Settings"
       >
@@ -492,7 +498,9 @@ Array [
       apiMethod="PUT"
       cancelLabel="Cancel"
       className="form-stacked"
+      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
       footerClass="form-actions align-right"
+      hideErrors={false}
       initialData={
         Object {
           "auth_provider": Object {
@@ -509,6 +517,7 @@ Array [
       }
       onSubmit={[Function]}
       requireChanges={false}
+      resetOnError={false}
       submitDisabled={false}
       submitLabel="Save Settings"
     >
diff --git a/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap
index 714a185fea..a06fe97a88 100644
--- a/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap
@@ -55,10 +55,13 @@ exports[`OrganizationAuthView renders from api 1`] = `
         apiMethod="PUT"
         cancelLabel="Cancel"
         className="form-stacked"
+        errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
         footerClass="form-actions align-right"
+        hideErrors={false}
         initialData={Object {}}
         onSubmit={[Function]}
         requireChanges={false}
+        resetOnError={false}
         submitDisabled={false}
         submitLabel="Save Settings"
       >
diff --git a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
index ace4b9f275..f8bf739736 100644
--- a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
@@ -16,7 +16,9 @@ exports[`OrganizationCreate render() renders correctly 1`] = `
       apiMethod="POST"
       cancelLabel="Cancel"
       className="form-stacked"
+      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
       footerClass="form-actions align-right"
+      hideErrors={false}
       initialData={
         Object {
           "defaultTeam": true,
@@ -24,6 +26,7 @@ exports[`OrganizationCreate render() renders correctly 1`] = `
       }
       onSubmitSuccess={[Function]}
       requireChanges={true}
+      resetOnError={false}
       submitDisabled={false}
       submitLabel="Create Organization"
     >
diff --git a/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap
index 2c5c499b4e..d4a827e583 100644
--- a/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap
@@ -13,7 +13,9 @@ exports[`projectGeneralSettings renders 1`] = `
       apiMethod="PUT"
       cancelLabel="Cancel"
       className="form-stacked"
+      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
       footerClass="form-actions align-right"
+      hideErrors={false}
       initialData={
         Object {
           "allowedDomains": undefined,
@@ -37,6 +39,7 @@ exports[`projectGeneralSettings renders 1`] = `
       }
       onSubmitSuccess={[Function]}
       requireChanges={false}
+      resetOnError={false}
       submitDisabled={false}
       submitLabel="Save Changes"
     >
diff --git a/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
index e3aede9722..f5c8d3e29c 100644
--- a/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
@@ -16,9 +16,12 @@ exports[`TeamCreate render() renders correctly 1`] = `
       apiMethod="POST"
       cancelLabel="Cancel"
       className="form-stacked"
+      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
       footerClass="form-actions align-right"
+      hideErrors={false}
       onSubmitSuccess={[Function]}
       requireChanges={true}
+      resetOnError={false}
       submitDisabled={false}
       submitLabel="Save Changes"
     >
diff --git a/tests/js/spec/views/__snapshots__/teamSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamSettings.spec.jsx.snap
index c76b32803b..3acad3b034 100644
--- a/tests/js/spec/views/__snapshots__/teamSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/teamSettings.spec.jsx.snap
@@ -15,7 +15,9 @@ exports[`TeamSettings render() renders 1`] = `
         apiMethod="PUT"
         cancelLabel="Cancel"
         className="form-stacked"
+        errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
         footerClass="form-actions align-right"
+        hideErrors={false}
         initialData={
           Object {
             "name": "Team Name",
@@ -24,6 +26,7 @@ exports[`TeamSettings render() renders 1`] = `
         }
         onSubmitSuccess={[Function]}
         requireChanges={true}
+        resetOnError={false}
         submitDisabled={false}
         submitLabel="Save Changes"
       >
diff --git a/tests/sentry/api/endpoints/test_sudo.py b/tests/sentry/api/endpoints/test_sudo.py
new file mode 100644
index 0000000000..deff58b369
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sudo.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.conf import settings
+
+from sentry.testutils import APITestCase
+
+
+class SudoTest(APITestCase):
+    def test_sudo_required_del_org(self):
+        org = self.create_organization()
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug
+        })
+
+        user = self.create_user(email='foo@example.com')
+        self.create_member(
+            organization=org,
+            user=user,
+            role='owner',
+        )
+
+        self.login_as(user)
+
+        middleware = list(settings.MIDDLEWARE_CLASSES)
+        index = middleware.index('sentry.testutils.middleware.SudoMiddleware')
+        middleware[index] = 'sentry.middleware.sudo.SudoMiddleware'
+
+        with self.settings(MIDDLEWARE_CLASSES=tuple(middleware)):
+            response = self.client.delete(url, is_sudo=False)
+            assert response.status_code == 401
+            assert response.data['sudoRequired']
+
+            sudo_url = reverse('sentry-api-0-sudo', kwargs={})
+            # Now try to gain sudo access
+            response = self.client.post(sudo_url, {
+                'username': 'foo@example.com',
+                'password': 'admin',
+            })
+            assert response.status_code == 200
+
+            # This should now work
+            response = self.client.delete(url, is_sudo=False)
+            assert response.status_code == 204
diff --git a/tests/sentry/api/endpoints/test_user_authenticators_index.py b/tests/sentry/api/endpoints/test_user_authenticators_index.py
new file mode 100644
index 0000000000..c6b7cb8b86
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_authenticators_index.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.conf import settings
+
+from sentry.models import Authenticator
+from sentry.testutils import APITestCase
+
+
+class AuthenticatorIndex(APITestCase):
+    def test_simple(self):
+        user = self.create_user(email='a@example.com', is_superuser=True)
+        Authenticator.objects.create(
+            type=3,  # u2f
+            user=user,
+            config={
+                'devices': [{
+                    'binding': {
+                        'publicKey': u'aowekroawker',
+                        'keyHandle': u'aowkeroakewrokaweokrwoer',
+                        'appId': u'https://dev.getsentry.net:8000/auth/2fa/u2fappid.json'
+                    },
+                    'name': u'Amused Beetle',
+                    'ts': 1512505334
+                }]
+            }
+        )
+
+        self.login_as(user=user, superuser=True)
+
+        url = reverse(
+            'sentry-api-0-authenticator-index',
+        )
+
+        new_options = settings.SENTRY_OPTIONS.copy()
+        new_options['system.url-prefix'] = 'https://testserver'
+        with self.settings(SENTRY_OPTIONS=new_options):
+            resp = self.client.get(url, format='json')
+
+            assert resp.status_code == 200, (resp.status_code, resp.content)
+            assert resp.data
+            assert resp.data[0]['challenge']
+            assert resp.data[0]['id'] == 'u2f'
