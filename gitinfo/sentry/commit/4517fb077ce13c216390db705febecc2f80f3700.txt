commit 4517fb077ce13c216390db705febecc2f80f3700
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 20 14:50:33 2010 -0700

    Refactor sort method so it may take advantage of a proper index

diff --git a/sentry/migrations/0006_auto.py b/sentry/migrations/0006_auto.py
new file mode 100644
index 0000000000..a0ddb9dad2
--- /dev/null
+++ b/sentry/migrations/0006_auto.py
@@ -0,0 +1,79 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Removing index on 'Message', fields ['checksum']
+        db.delete_index('sentry_message', ['checksum'])
+
+        # Removing index on 'Message', fields ['view']
+        db.delete_index('sentry_message', ['view'])
+
+        # Removing index on 'GroupedMessage', fields ['checksum']
+        db.delete_index('sentry_groupedmessage', ['checksum'])
+
+        # Removing index on 'GroupedMessage', fields ['view']
+        db.delete_index('sentry_groupedmessage', ['view'])
+
+
+    def backwards(self, orm):
+        
+        # Adding index on 'GroupedMessage', fields ['view']
+        db.create_index('sentry_groupedmessage', ['view'])
+
+        # Adding index on 'GroupedMessage', fields ['checksum']
+        db.create_index('sentry_groupedmessage', ['checksum'])
+
+        # Adding index on 'Message', fields ['view']
+        db.create_index('sentry_message', ['view'])
+
+        # Adding index on 'Message', fields ['checksum']
+        db.create_index('sentry_message', ['checksum'])
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '255'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 8f86093077..053131ee58 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -12,6 +12,7 @@ import warnings
 from django.conf import settings as dj_settings
 from django.core.exceptions import ImproperlyConfigured
 from django.db import models, transaction
+from django.db.models.signals import post_syncdb
 from django.http import Http404
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
@@ -129,13 +130,28 @@ class GroupedMessage(MessageBase):
     def natural_key(self):
         return (self.logger, self.view, self.checksum)
 
+    @classmethod
+    def create_sort_index(cls, sender, db, created_models, **kwargs):
+        # This is only supported in postgres
+        engine = get_db_engine()
+        if not engine.startswith('postgresql'):
+            return
+        if cls not in created_models:
+            return
+
+        from django.db import connections
+        
+        cursor = connections[db].cursor()
+        cursor.execute("create index sentry_groupedmessage_score on sentry_groupedmessage ((%s))" % (cls.get_score_clause(),))
+        cursor.close()
+
     @classmethod
     def get_score_clause(cls):
         engine = get_db_engine()
         if engine.startswith('postgresql'):
-            return 'times_seen / (pow((floor(extract(epoch from now() - last_seen) / 3600) + 2), 1.25) + 1)'
+            return 'times_seen * 3600 + last_seen::abstime::int'
         if engine.startswith('mysql'):
-            return 'times_seen / (pow((floor((unix_timestamp(now()) - unix_timestamp(last_seen)) / 3600) + 2), 1.25) + 1)'
+            return 'times_seen * 3600 + unix_timestamp(last_seen)'
         return 'times_seen'
 
     def mail_admins(self, request=None, fail_silently=True):
@@ -236,4 +252,8 @@ class FilterValue(models.Model):
     value = models.CharField(max_length=255)
     
     class Meta:
-        unique_together = (('key', 'value'),)
\ No newline at end of file
+        unique_together = (('key', 'value'),)
+
+# XXX: Django sucks and we can't listen to our specific app
+# post_syncdb.connect(GroupedMessage.create_sort_index, sender=__name__)
+post_syncdb.connect(GroupedMessage.create_sort_index)
\ No newline at end of file
