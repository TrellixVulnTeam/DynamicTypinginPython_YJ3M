commit 42f6aae410c01eb6dd23a4d2ca0fcecf4df8444e
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 2 13:25:59 2015 -0800

    Scrub pairs as if they were mappings
    
    This also corrects the behavior in HTTP as it coerces headers to a list of pairs.

diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 6046a2951e..ce754fe78b 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -30,7 +30,11 @@ def varmap(func, var, context=None, name=None):
     if isinstance(var, dict):
         ret = dict((k, varmap(func, v, context, k)) for k, v in six.iteritems(var))
     elif isinstance(var, (list, tuple)):
-        ret = [varmap(func, f, context, name) for f in var]
+        # treat it like a mapping
+        if all(v for v in var if isinstance(v, (list, tuple)) and len(v) == 2):
+            ret = [(k, varmap(func, v, context, k)) for k, v in var]
+        else:
+            ret = [varmap(func, f, context, name) for f in var]
     else:
         ret = func(name, var)
     context.remove(objid)
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index 07d1bf6073..d5715f752c 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -59,7 +59,7 @@ class SensitiveDataFilterTest(TestCase):
             'sentry.interfaces.Http': {
                 'data': VARS,
                 'env': VARS,
-                'headers': VARS,
+                'headers': VARS.items(),
                 'cookies': VARS,
             }
         }
@@ -69,10 +69,13 @@ class SensitiveDataFilterTest(TestCase):
 
         self.assertTrue('sentry.interfaces.Http' in data)
         http = data['sentry.interfaces.Http']
-        for n in ('data', 'env', 'headers', 'cookies'):
-            self.assertTrue(n in http)
+        for n in ('data', 'env', 'cookies'):
+            assert n in http
             self._check_vars_sanitized(http[n], proc)
 
+        assert 'headers' in http
+        self._check_vars_sanitized(dict(http['headers']), proc)
+
     def test_extra(self):
         data = {
             'extra': VARS
