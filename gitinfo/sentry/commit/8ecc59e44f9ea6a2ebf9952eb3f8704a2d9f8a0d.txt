commit 8ecc59e44f9ea6a2ebf9952eb3f8704a2d9f8a0d
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Feb 12 09:23:12 2019 -0800

    fix(search): Fix quoted string regex to not be too greedy (#12027)

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index e7a0f19365..2751bb2a90 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -58,6 +58,20 @@ def translate(pat):
     return '^' + res + '$'
 
 
+# Explaination of quoted string regex, courtesy of Matt
+# "              // literal quote
+# (              // begin capture group
+#   (?:          // begin uncaptured group
+#     [^"]       // any character that's not quote
+#     |          // or
+#     (?<=\\)["] // A quote, preceded by a \ (for escaping)
+#   )            // end uncaptured group
+#   *            // repeat the uncaptured group
+# )              // end captured group
+# ?              // allow to be empty (allow empty quotes)
+# "              // quote literal
+
+
 event_search_grammar = Grammar(r"""
 # raw_search must come at the end, otherwise other
 # search_terms will be treated as a raw query
@@ -85,7 +99,7 @@ is_filter       = negation? "is" sep search_value
 search_key      = key / quoted_key
 search_value    = quoted_value / value
 value           = ~r"\S*"
-quoted_value    = ~r"\"(.*)\""s
+quoted_value    = ~r"\"((?:[^\"]|(?<=\\)[\"])*)?\""s
 key             = ~r"[a-zA-Z0-9_\.-]+"
 # only allow colons in quoted keys
 quoted_key      = ~r"\"([a-zA-Z0-9_\.:-]+)\""
@@ -316,7 +330,7 @@ class SearchVisitor(NodeVisitor):
         return node.text
 
     def visit_quoted_value(self, node, children):
-        return node.match.groups()[0]
+        return node.match.groups()[0].replace('\\"', '"')
 
     def visit_quoted_key(self, node, children):
         return node.match.groups()[0]
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 1f38c89bc5..38dd5293e7 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -225,17 +225,7 @@ class ParseSearchQueryTest(TestCase):
             ),
         ]
 
-    def test_weird_values(self):
-        # quotes within quotes
-        assert parse_search_query('release:"a"thing""') == [
-            SearchFilter(
-                key=SearchKey(name='release'),
-                operator='=',
-                value=SearchValue(raw_value='a"thing"'),
-            ),
-        ]
-
-        # newline within quote
+    def test_newline_within_quote(self):
         assert parse_search_query('release:"a\nrelease"') == [
             SearchFilter(
                 key=SearchKey(name='release'),
@@ -243,11 +233,12 @@ class ParseSearchQueryTest(TestCase):
                 value=SearchValue(raw_value='a\nrelease')
             ),
         ]
-        # newline outside quote
+
+    def test_newline_outside_quote(self):
         with self.assertRaises(IncompleteParseError):
             parse_search_query('release:a\nrelease')
 
-        # tab within quote
+    def test_tab_within_quote(self):
         assert parse_search_query('release:"a\trelease"') == [
             SearchFilter(
                 key=SearchKey(name='release'),
@@ -255,6 +246,8 @@ class ParseSearchQueryTest(TestCase):
                 value=SearchValue(raw_value='a\trelease')
             ),
         ]
+
+    def test_tab_outside_quote(self):
         # tab outside quote
         assert parse_search_query('release:a\trelease') == [
             SearchFilter(
@@ -269,15 +262,15 @@ class ParseSearchQueryTest(TestCase):
             ),
         ]
 
-        # escaped quotes
-        assert parse_search_query('release:"a\"thing\""') == [
+    def test_escaped_quotes(self):
+        assert parse_search_query('release:"a\\"thing\\""') == [
             SearchFilter(
                 key=SearchKey(name='release'),
                 operator='=',
                 value=SearchValue(raw_value='a"thing"')
             ),
         ]
-        assert parse_search_query('release:"a\"\"release"') == [
+        assert parse_search_query('release:"a\\"\\"release"') == [
             SearchFilter(
                 key=SearchKey(name='release'),
                 operator='=',
@@ -285,19 +278,48 @@ class ParseSearchQueryTest(TestCase):
             ),
         ]
 
-        # poorly escaped quotes
-        assert parse_search_query('release:"a release\"') == [
+    def test_multiple_quotes(self):
+        assert parse_search_query('device.family:"" browser.name:"Chrome"') == [
             SearchFilter(
-                key=SearchKey(name='release'),
+                key=SearchKey(name='device.family'),
                 operator='=',
-                value=SearchValue(raw_value='a release')
+                value=SearchValue(raw_value=''),
+            ),
+            SearchFilter(
+                key=SearchKey(name='browser.name'),
+                operator='=',
+                value=SearchValue(raw_value='Chrome'),
             ),
         ]
-        assert parse_search_query('release:\"a release "') == [
+
+        assert parse_search_query('device.family:"\\"" browser.name:"Chrome"') == [
             SearchFilter(
-                key=SearchKey(name='release'),
+                key=SearchKey(name='device.family'),
                 operator='=',
-                value=SearchValue(raw_value='a release ')
+                value=SearchValue(raw_value='"'),
+            ),
+            SearchFilter(
+                key=SearchKey(name='browser.name'),
+                operator='=',
+                value=SearchValue(raw_value='Chrome'),
+            ),
+        ]
+
+    def test_sooo_many_quotes(self):
+        assert parse_search_query('device.family:"\\"\\"\\"\\"\\"\\"\\"\\"\\"\\""') == [
+            SearchFilter(
+                key=SearchKey(name='device.family'),
+                operator='=',
+                value=SearchValue(raw_value='""""""""""'),
+            ),
+        ]
+
+    def test_empty_string(self):
+        assert parse_search_query('device.family:""') == [
+            SearchFilter(
+                key=SearchKey(name='device.family'),
+                operator='=',
+                value=SearchValue(raw_value=''),
             ),
         ]
 
