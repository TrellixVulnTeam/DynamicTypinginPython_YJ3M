commit 4517e6ddb76a5c1246f9bc05a741913727c9d364
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Dec 4 15:01:19 2015 -0800

    When bulk updating from stream, use current query

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 179b60e08d..2b6b4e7e8f 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -138,7 +138,14 @@ export class Client {
 
   bulkUpdate(params, options) {
     let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
-    let query = (params.itemIds ? {id: params.itemIds} : undefined);
+
+    let query =
+      params.itemIds
+        ? {id: params.itemIds}
+        : params.query
+          ? {query: params.query}
+          : undefined;
+
     let id = this.uniqueId();
 
     GroupActions.update(id, params.itemIds, params.data);
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 1f48bcb63a..02793c541e 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -426,6 +426,7 @@ const Stream = React.createClass({
                 <StreamActions
                   orgId={params.orgId}
                   projectId={params.projectId}
+                  query={this.state.query}
                   onSelectStatsPeriod={this.onSelectStatsPeriod}
                   onRealtimeChange={this.onRealtimeChange}
                   realtimeActive={this.state.realtimeActive}
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 44a44838a4..89fe31dfd5 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -77,7 +77,8 @@ const StreamActions = React.createClass({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
         itemIds: itemIds,
-        data: data
+        data: data,
+        query: this.props.query
       }, {
         complete: () => {
           IndicatorStore.remove(loadingIndicator);
diff --git a/tests/js/spec/api.spec.jsx b/tests/js/spec/api.spec.jsx
index b41e50a6f7..95857d0556 100644
--- a/tests/js/spec/api.spec.jsx
+++ b/tests/js/spec/api.spec.jsx
@@ -1,12 +1,18 @@
+import $ from 'jquery';
 import {Client, Request} from 'app/api';
 
 describe('api', function () {
   beforeEach(function () {
     this.sandbox = sinon.sandbox.create();
+
     this.api = new Client();
   });
 
   describe('Client', function () {
+    beforeEach(function () {
+      this.sandbox.stub($, 'ajax');
+    });
+
     describe('cancel()', function () {
       it('should abort any open XHR requests', function () {
         let req1 = new Request({
@@ -28,4 +34,38 @@ describe('api', function () {
       });
     });
   });
+
+  describe('bulkUpdate()', function () {
+    beforeEach(function () {
+      this.sandbox.stub(this.api, '_wrapRequest');
+    });
+
+    it('should use itemIds as query if provided', function () {
+      this.api.bulkUpdate({
+        orgId: '1337',
+        projectId: '1337',
+        itemIds: [1,2,3],
+        data: {status: 'unresolved'},
+        query: 'is:resolved'
+      });
+
+      expect(this.api._wrapRequest.calledOnce).to.be.ok;
+      let requestArgs = this.api._wrapRequest.getCall(0).args[1];
+      expect(requestArgs.query).to.eql({id: [1, 2, 3]});
+    });
+
+    it('should use query as query if itemIds are absent', function () {
+      this.api.bulkUpdate({
+        orgId: '1337',
+        projectId: '1337',
+        itemIds: null,
+        data: {status: 'unresolved'},
+        query: 'is:resolved'
+      });
+
+      expect(this.api._wrapRequest.calledOnce).to.be.ok;
+      let requestArgs = this.api._wrapRequest.getCall(0).args[1];
+      expect(requestArgs.query).to.eql({query: 'is:resolved'});
+    });
+  });
 });
