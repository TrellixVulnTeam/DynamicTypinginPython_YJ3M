commit 93b2d180bfcd81b0fa5cae36fb87a7f8f9ab3445
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Mar 16 11:30:45 2017 -0700

    Encrypt potentially sensitive data (#3485)
    
    This adds a new encryption utility, disabled by default, which allows encryption of field-specific data.
    
    It implements it in the following locations:
    
    - AuthIdentity.data
    - AuthProvider.config
    - Option.value
    - OrganizationOption.value
    - ProjectOption.value
    - UserOption.value

diff --git a/CHANGES b/CHANGES
index c183040125..65bf2088ad 100644
--- a/CHANGES
+++ b/CHANGES
@@ -19,6 +19,17 @@ Schema Changes
 
 - Added ``Deploy`` model
 
+Security
+~~~~~~~~
+
+- Added encryption to the following fields:
+  - AuthIdentity.data
+  - AuthProvider.config
+  - Option.value
+  - OrganizationOption.value
+  - ProjectOption.value
+  - UserOption.value
+
 Version 8.14.1
 --------------
 
diff --git a/src/sentry/db/models/fields/__init__.py b/src/sentry/db/models/fields/__init__.py
index 9423cac7e0..92c29743ec 100644
--- a/src/sentry/db/models/fields/__init__.py
+++ b/src/sentry/db/models/fields/__init__.py
@@ -9,6 +9,7 @@ sentry.db.models.fields
 from __future__ import absolute_import
 
 from .bounded import *  # NOQA
+from .encrypted import *  # NOQA
 from .foreignkey import *  # NOQA
 from .gzippeddict import *  # NOQA
 from .node import *  # NOQA
diff --git a/src/sentry/db/models/fields/bounded.py b/src/sentry/db/models/fields/bounded.py
index 2ac53e4d71..12fabf52c0 100644
--- a/src/sentry/db/models/fields/bounded.py
+++ b/src/sentry/db/models/fields/bounded.py
@@ -109,4 +109,3 @@ add_introspection_rules([], ["^sentry\.db\.models\.fields\.bounded\.BoundedBigAu
 add_introspection_rules([], ["^sentry\.db\.models\.fields\.bounded\.BoundedIntegerField"])
 add_introspection_rules([], ["^sentry\.db\.models\.fields\.bounded\.BoundedBigIntegerField"])
 add_introspection_rules([], ["^sentry\.db\.models\.fields\.bounded\.BoundedPositiveIntegerField"])
-add_introspection_rules([], ["^sentry\.db\.models\.fields\.pickle\.UnicodePickledObjectField"])
diff --git a/src/sentry/db/models/fields/encrypted.py b/src/sentry/db/models/fields/encrypted.py
new file mode 100644
index 0000000000..e429b32ad8
--- /dev/null
+++ b/src/sentry/db/models/fields/encrypted.py
@@ -0,0 +1,96 @@
+from __future__ import absolute_import
+
+__all__ = (
+    'EncryptedCharField',
+    'EncryptedJsonField',
+    'EncryptedPickledObjectField',
+    'EncryptedTextField',
+)
+
+import six
+
+from django.db.models import CharField, TextField
+from jsonfield import JSONField
+from picklefield.fields import PickledObjectField
+from sentry.utils.encryption import decrypt, encrypt
+from south.modelsinspector import add_introspection_rules
+
+
+class EncryptedCharField(CharField):
+    def get_db_prep_value(self, value, *args, **kwargs):
+        value = super(EncryptedCharField, self).get_db_prep_value(
+            value, *args, **kwargs)
+        return encrypt(value)
+
+    def to_python(self, value):
+        if value is not None and isinstance(value, six.string_types):
+            value = decrypt(value)
+        return super(EncryptedCharField, self).to_python(value)
+
+    def get_prep_lookup(self, lookup_type, value):
+        raise NotImplementedError('{!r} lookup type for {!r} is not supported'.format(
+            lookup_type,
+            self,
+        ))
+
+
+class EncryptedJsonField(JSONField):
+    def get_db_prep_value(self, value, *args, **kwargs):
+        value = super(EncryptedJsonField, self).get_db_prep_value(
+            value, *args, **kwargs)
+        return encrypt(value)
+
+    def to_python(self, value):
+        if value is not None and isinstance(value, six.string_types):
+            value = decrypt(value)
+        return super(EncryptedJsonField, self).to_python(value)
+
+    def get_prep_lookup(self, lookup_type, value):
+        raise NotImplementedError('{!r} lookup type for {!r} is not supported'.format(
+            lookup_type,
+            self,
+        ))
+
+
+class EncryptedPickledObjectField(PickledObjectField):
+    def get_db_prep_value(self, value, *args, **kwargs):
+        if isinstance(value, six.binary_type):
+            value = value.decode('utf-8')
+        value = super(EncryptedPickledObjectField, self).get_db_prep_value(
+            value, *args, **kwargs)
+        return encrypt(value)
+
+    def to_python(self, value):
+        if value is not None and isinstance(value, six.string_types):
+            value = decrypt(value)
+        return super(EncryptedPickledObjectField, self).to_python(value)
+
+    def get_prep_lookup(self, lookup_type, value):
+        raise NotImplementedError('{!r} lookup type for {!r} is not supported'.format(
+            lookup_type,
+            self,
+        ))
+
+
+class EncryptedTextField(TextField):
+    def get_db_prep_value(self, value, *args, **kwargs):
+        value = super(EncryptedTextField, self).get_db_prep_value(
+            value, *args, **kwargs)
+        return encrypt(value)
+
+    def to_python(self, value):
+        if value is not None and isinstance(value, six.string_types):
+            value = decrypt(value)
+        return super(EncryptedTextField, self).to_python(value)
+
+    def get_prep_lookup(self, lookup_type, value):
+        raise NotImplementedError('{!r} lookup type for {!r} is not supported'.format(
+            lookup_type,
+            self,
+        ))
+
+
+add_introspection_rules([], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedPickledObjectField"])
+add_introspection_rules([], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedCharField"])
+add_introspection_rules([], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedJsonField"])
+add_introspection_rules([], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedTextField"])
diff --git a/src/sentry/db/models/fields/pickle.py b/src/sentry/db/models/fields/pickle.py
index 18ab961227..f2a06fee82 100644
--- a/src/sentry/db/models/fields/pickle.py
+++ b/src/sentry/db/models/fields/pickle.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 
 from picklefield.fields import PickledObjectField
+from south.modelsinspector import add_introspection_rules
 
 
 class UnicodePickledObjectField(PickledObjectField):
@@ -11,3 +12,6 @@ class UnicodePickledObjectField(PickledObjectField):
             value = value.decode('utf-8')
         return super(UnicodePickledObjectField, self).get_db_prep_value(
             value, *args, **kwargs)
+
+
+add_introspection_rules([], ["^sentry\.db\.models\.fields\.pickle\.UnicodePickledObjectField"])
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index ae6e754bba..0e71845a95 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -27,8 +27,10 @@ from django.utils.functional import cached_property
 from django.core.urlresolvers import reverse
 
 from sentry import options
-from sentry.db.models import BaseManager, BaseModel, BoundedAutoField, \
-    FlexibleForeignKey, BoundedPositiveIntegerField, UnicodePickledObjectField
+from sentry.db.models import (
+    BaseManager, BaseModel, BoundedAutoField, BoundedPositiveIntegerField,
+    EncryptedPickledObjectField, FlexibleForeignKey
+)
 from sentry.utils.decorators import classproperty
 from sentry.utils.otp import generate_secret_key, TOTP
 from sentry.utils.sms import send_sms, sms_available
@@ -560,7 +562,7 @@ class Authenticator(BaseModel):
     created_at = models.DateTimeField(_('created at'), default=timezone.now)
     last_used_at = models.DateTimeField(_('last used at'), null=True)
     type = BoundedPositiveIntegerField(choices=AUTHENTICATOR_CHOICES)
-    config = UnicodePickledObjectField()
+    config = EncryptedPickledObjectField()
 
     objects = AuthenticatorManager()
 
diff --git a/src/sentry/models/authidentity.py b/src/sentry/models/authidentity.py
index 0c11134e36..b9524545cf 100644
--- a/src/sentry/models/authidentity.py
+++ b/src/sentry/models/authidentity.py
@@ -4,9 +4,10 @@ from datetime import timedelta
 from django.conf import settings
 from django.db import models
 from django.utils import timezone
-from jsonfield import JSONField
 
-from sentry.db.models import FlexibleForeignKey, Model, sane_repr
+from sentry.db.models import (
+    EncryptedJsonField, FlexibleForeignKey, Model, sane_repr
+)
 
 
 class AuthIdentity(Model):
@@ -15,7 +16,7 @@ class AuthIdentity(Model):
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL)
     auth_provider = FlexibleForeignKey('sentry.AuthProvider')
     ident = models.CharField(max_length=128)
-    data = JSONField()
+    data = EncryptedJsonField()
     last_verified = models.DateTimeField(default=timezone.now)
     last_synced = models.DateTimeField(default=timezone.now)
     date_added = models.DateTimeField(default=timezone.now)
diff --git a/src/sentry/models/authprovider.py b/src/sentry/models/authprovider.py
index 1412f59055..7320d02c77 100644
--- a/src/sentry/models/authprovider.py
+++ b/src/sentry/models/authprovider.py
@@ -3,10 +3,10 @@ from __future__ import absolute_import, print_function
 from bitfield import BitField
 from django.db import models
 from django.utils import timezone
-from jsonfield import JSONField
 
 from sentry.db.models import (
-    BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
+    BoundedPositiveIntegerField, EncryptedJsonField, FlexibleForeignKey, Model,
+    sane_repr
 )
 
 
@@ -15,7 +15,7 @@ class AuthProvider(Model):
 
     organization = FlexibleForeignKey('sentry.Organization', unique=True)
     provider = models.CharField(max_length=128)
-    config = JSONField()
+    config = EncryptedJsonField()
 
     date_added = models.DateTimeField(default=timezone.now)
     sync_time = BoundedPositiveIntegerField(null=True)
diff --git a/src/sentry/models/groupsubscription.py b/src/sentry/models/groupsubscription.py
index 3d63999d1d..767bcbfede 100644
--- a/src/sentry/models/groupsubscription.py
+++ b/src/sentry/models/groupsubscription.py
@@ -88,19 +88,21 @@ class GroupSubscriptionManager(BaseManager):
 
         # Find users which by default do not subscribe.
         participating_only = set(
-            UserOption.objects.filter(
+            uo.user_id for uo in UserOption.objects.filter(
                 Q(project__isnull=True) | Q(project=group.project),
                 user__in=users,
                 key='workflow:notifications',
-                value=UserOptionValue.participating_only,
             ).exclude(
-                user__in=UserOption.objects.filter(
-                    user__in=users,
-                    key='workflow:notifications',
-                    project=group.project,
-                    value=UserOptionValue.all_conversations,
-                )
-            ).values_list('user', flat=True)
+                user__in=[
+                    uo.user_id for uo in UserOption.objects.filter(
+                        project=group.project,
+                        user__in=users,
+                        key='workflow:notifications',
+                    )
+                    if uo.value == UserOptionValue.all_conversations
+                ]
+            )
+            if uo.value == UserOptionValue.participating_only
         )
 
         if participating_only:
diff --git a/src/sentry/models/option.py b/src/sentry/models/option.py
index f5ca54bbb8..555b108c1c 100644
--- a/src/sentry/models/option.py
+++ b/src/sentry/models/option.py
@@ -11,7 +11,7 @@ from django.db import models
 from django.utils import timezone
 
 from sentry.db.models import Model, sane_repr
-from sentry.db.models.fields import UnicodePickledObjectField
+from sentry.db.models.fields import EncryptedPickledObjectField
 
 
 class Option(Model):
@@ -25,7 +25,7 @@ class Option(Model):
     __core__ = True
 
     key = models.CharField(max_length=64, unique=True)
-    value = UnicodePickledObjectField()
+    value = EncryptedPickledObjectField()
     last_updated = models.DateTimeField(default=timezone.now)
 
     class Meta:
diff --git a/src/sentry/models/organizationoption.py b/src/sentry/models/organizationoption.py
index 56a3db6253..cd4dcc70b0 100644
--- a/src/sentry/models/organizationoption.py
+++ b/src/sentry/models/organizationoption.py
@@ -12,7 +12,7 @@ from django.core.signals import request_finished
 from django.db import models
 
 from sentry.db.models import Model, FlexibleForeignKey, sane_repr
-from sentry.db.models.fields import UnicodePickledObjectField
+from sentry.db.models.fields import EncryptedPickledObjectField
 from sentry.db.models.manager import BaseManager
 from sentry.utils.cache import cache
 
@@ -123,7 +123,7 @@ class OrganizationOption(Model):
 
     organization = FlexibleForeignKey('sentry.Organization')
     key = models.CharField(max_length=64)
-    value = UnicodePickledObjectField()
+    value = EncryptedPickledObjectField()
 
     objects = OrganizationOptionManager()
 
diff --git a/src/sentry/models/projectoption.py b/src/sentry/models/projectoption.py
index 2bc8a76839..9035ce4700 100644
--- a/src/sentry/models/projectoption.py
+++ b/src/sentry/models/projectoption.py
@@ -12,7 +12,7 @@ from django.core.signals import request_finished
 from django.db import models
 
 from sentry.db.models import Model, FlexibleForeignKey, sane_repr
-from sentry.db.models.fields import UnicodePickledObjectField
+from sentry.db.models.fields import EncryptedPickledObjectField
 from sentry.db.models.manager import BaseManager
 from sentry.utils.cache import cache
 
@@ -116,7 +116,7 @@ class ProjectOption(Model):
 
     project = FlexibleForeignKey('sentry.Project')
     key = models.CharField(max_length=64)
-    value = UnicodePickledObjectField()
+    value = EncryptedPickledObjectField()
 
     objects = ProjectOptionManager()
 
diff --git a/src/sentry/models/useroption.py b/src/sentry/models/useroption.py
index dca58bb334..d8fddceaf8 100644
--- a/src/sentry/models/useroption.py
+++ b/src/sentry/models/useroption.py
@@ -13,7 +13,7 @@ from django.conf import settings
 from django.db import models
 
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
-from sentry.db.models.fields import UnicodePickledObjectField
+from sentry.db.models.fields import EncryptedPickledObjectField
 from sentry.db.models.manager import BaseManager
 
 
@@ -117,7 +117,7 @@ class UserOption(Model):
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL)
     project = FlexibleForeignKey('sentry.Project', null=True)
     key = models.CharField(max_length=64)
-    value = UnicodePickledObjectField()
+    value = EncryptedPickledObjectField()
 
     objects = UserOptionManager()
 
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 15e3deb05e..5c32722f2f 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -137,11 +137,13 @@ class NotificationPlugin(Plugin):
         # determine members default settings
         members_to_check = set(u for u in member_set if u not in alert_settings)
         if members_to_check:
-            disabled = set(UserOption.objects.filter(
-                key='subscribe_by_default',
-                value='0',
-                user__in=members_to_check,
-            ).values_list('user', flat=True))
+            disabled = set((
+                uo.user_id for uo in UserOption.objects.filter(
+                    key='subscribe_by_default',
+                    user__in=members_to_check,
+                )
+                if uo.value == '0'
+            ))
             member_set = [x for x in member_set if x not in disabled]
 
         return member_set
diff --git a/src/sentry/utils/encryption.py b/src/sentry/utils/encryption.py
index 0ef0cd22e8..83db44b6d0 100644
--- a/src/sentry/utils/encryption.py
+++ b/src/sentry/utils/encryption.py
@@ -2,10 +2,15 @@ from __future__ import absolute_import
 
 import six
 
+from base64 import b64encode, b64decode
 from collections import OrderedDict
 from django.conf import settings
 from django.utils.encoding import smart_bytes
 
+MARKER = u'\xef\xbb\xbf'
+
+_marker_length = len(MARKER)
+
 
 class EncryptionManager(object):
     def __init__(self, schemes=()):
@@ -25,21 +30,31 @@ class EncryptionManager(object):
             return value
         value = smart_bytes(value)
         scheme = self.schemes[self.default_scheme]
-        return b'{}${}'.format(self.default_scheme, scheme.encrypt(value))
+        return u'{}{}${}'.format(
+            MARKER,
+            self.default_scheme,
+            b64encode(scheme.encrypt(value)),
+        )
 
     def decrypt(self, value):
+        # we assume that if encryption is not configured, it was never
+        # configured
+        if not self.schemes:
+            return value
+        if not value.startswith(MARKER):
+            return value
         try:
-            enc_method, enc_data = value.split('$', 1)
+            enc_method, enc_data = value[_marker_length:].split('$', 1)
         except (ValueError, IndexError):
-            pass
-        else:
-            enc_data = smart_bytes(enc_data)
-            try:
-                scheme = self.schemes[enc_method]
-            except KeyError:
-                raise ValueError('Unknown encryption scheme: %s'.format(enc_method))
-            value = scheme.decrypt(enc_data)
-        return value
+            return value
+        if not enc_method:
+            return value
+        enc_data = b64decode(enc_data)
+        try:
+            scheme = self.schemes[enc_method]
+        except KeyError:
+            raise ValueError('Unknown encryption scheme: {!r}'.format(enc_method))
+        return scheme.decrypt(enc_data)
 
 default_manager = EncryptionManager(settings.SENTRY_ENCRYPTION_SCHEMES)
 
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index e330fef5f2..6dc9e9bb0d 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -469,10 +469,14 @@ def show_emails(request):
         email_form.save()
 
         if user.email != old_email:
-            useroptions = UserOption.objects.filter(user=user, value=old_email)
-            for option in useroptions:
-                option.value = user.email
-                option.save()
+            queryset = UserOption.objects.filter(
+                user=user,
+                key='mail:email',
+            )
+            for option in queryset:
+                if option.value == old_email:
+                    option.value = user.email
+                    option.save()
             UserEmail.objects.filter(user=user, email=old_email).delete()
             try:
                 with transaction.atomic():
diff --git a/tests/sentry/models/test_organizationoption.py b/tests/sentry/models/test_organizationoption.py
index 594ccc92e9..7d74c1c639 100644
--- a/tests/sentry/models/test_organizationoption.py
+++ b/tests/sentry/models/test_organizationoption.py
@@ -9,8 +9,9 @@ from sentry.testutils import TestCase
 class OrganizationOptionManagerTest(TestCase):
     def test_set_value(self):
         OrganizationOption.objects.set_value(self.organization, 'foo', 'bar')
-        assert OrganizationOption.objects.filter(
-            organization=self.organization, key='foo', value='bar').exists()
+        assert OrganizationOption.objects.get(
+            organization=self.organization, key='foo',
+        ).value == 'bar'
 
     def test_get_value(self):
         result = OrganizationOption.objects.get_value(self.organization, 'foo')
diff --git a/tests/sentry/models/test_projectoption.py b/tests/sentry/models/test_projectoption.py
index b6bb80355c..65e31eabe8 100644
--- a/tests/sentry/models/test_projectoption.py
+++ b/tests/sentry/models/test_projectoption.py
@@ -9,8 +9,10 @@ from sentry.testutils import TestCase
 class ProjectOptionManagerTest(TestCase):
     def test_set_value(self):
         ProjectOption.objects.set_value(self.project, 'foo', 'bar')
-        assert ProjectOption.objects.filter(
-            project=self.project, key='foo', value='bar').exists()
+        assert ProjectOption.objects.get(
+            project=self.project,
+            key='foo',
+        ).value == 'bar'
 
     def test_get_value(self):
         result = ProjectOption.objects.get_value(self.project, 'foo')
diff --git a/tests/sentry/utils/test_encryption.py b/tests/sentry/utils/test_encryption.py
index 5894e68bce..adeedf2eb3 100644
--- a/tests/sentry/utils/test_encryption.py
+++ b/tests/sentry/utils/test_encryption.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from cryptography.fernet import Fernet
 
 from sentry.testutils import TestCase
-from sentry.utils.encryption import EncryptionManager
+from sentry.utils.encryption import EncryptionManager, MARKER
 
 
 class EncryptionManagerTest(TestCase):
@@ -12,7 +12,7 @@ class EncryptionManagerTest(TestCase):
             ('1', Fernet('J5NxyG0w1OyZEDdEOX0Nyv2upm5H3J35rTEb1jEiVbs=')),
         ))
         value = manager.encrypt('hello world')
-        assert value.startswith('1$')
+        assert value.startswith(u'{}1$'.format(MARKER))
         result = manager.decrypt(value)
         assert result == 'hello world'
 
@@ -27,7 +27,7 @@ class EncryptionManagerTest(TestCase):
 
         value2 = manager.encrypt('hello world')
         assert value2 != value
-        assert value2.startswith('2$')
+        assert value2.startswith(u'{}2$'.format(MARKER))
 
     def test_no_schemes(self):
         manager = EncryptionManager(schemes=())
