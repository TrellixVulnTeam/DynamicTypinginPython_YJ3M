commit cafbf6c265116fa2827baa9d8741de66763c1541
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Aug 24 17:57:11 2013 -0700

    Handle team quotas explicitly

diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 6303682468..d2c68bb33a 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -22,15 +22,6 @@ class Quota(object):
     def is_rate_limited(self, project):
         return False
 
-    def get_active_quota(self, project):
-        quotas = filter(bool, [
-            self.get_project_quota(project),
-            self.get_team_quota(project.team),
-        ])
-        if not quotas:
-            return 0
-        return min(quotas)
-
     def translate_quota(self, quota, parent_quota):
         if quota.endswith('%'):
             pct = int(quota[:-1])
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 0639442c5c..3de730bf0c 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -30,15 +30,22 @@ class RedisQuota(Quota):
         })
 
     def is_rate_limited(self, project):
-        quota = self.get_active_quota(project)
+        proj_quota = self.get_project_quota(project)
+        if project.team:
+            team_quota = self.get_team_quota(project.team)
+        else:
+            team_quota = 0
         system_quota = self.get_system_quota()
 
-        if not (quota or system_quota):
+        if not (proj_quota or system_quota or team_quota):
             return False
 
-        sys_result, proj_result = self._incr_project(project)
+        sys_result, team_result, proj_result = self._incr_project(project)
 
-        if quota and proj_result > quota:
+        if proj_quota and proj_result > proj_quota:
+            return True
+
+        if team_quota and team_result > team_quota:
             return True
 
         if system_quota and sys_result > system_quota:
@@ -46,13 +53,22 @@ class RedisQuota(Quota):
 
         return False
 
-    def _get_system_key(self, project):
-        return 'sentry_quotas:system:%s' % (int(time.time() / 60),)
+    def _get_system_key(self):
+        return 'quota:s:%s' % (int(time.time() / 60),)
+
+    def _get_team_key(self, team):
+        return 'quota:t:%s:%s' % (team.id, int(time.time() / 60))
 
     def _get_project_key(self, project):
-        return 'sentry_quotas:%s:%s' % (project.id, int(time.time() / 60))
+        return 'quota:p:%s:%s' % (project.id, int(time.time() / 60))
 
     def _incr_project(self, project):
+        if project.team:
+            team_key = self._get_team_key(project.team)
+        else:
+            team_key = None
+            team_result = 0
+
         proj_key = self._get_project_key(project)
         sys_key = self._get_system_key()
         with self.conn.map() as conn:
@@ -60,5 +76,8 @@ class RedisQuota(Quota):
             conn.expire(proj_key, 60)
             sys_result = conn.incr(sys_key)
             conn.expire(sys_key, 60)
+            if team_key:
+                team_result = conn.incr(team_key)
+                conn.expire(team_key, 60)
 
-        return int(sys_result), int(proj_result)
+        return int(sys_result), int(team_result), int(proj_result)
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index f7f226e8df..fd73a945c1 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -4,58 +4,96 @@ from __future__ import absolute_import
 
 import mock
 
+from exam import fixture, patcher
+
 from sentry.quotas.redis import RedisQuota
 from sentry.testutils import TestCase
 
 
 class RedisQuotaTest(TestCase):
-    def setUp(self):
-        self.quota = RedisQuota(hosts={
+    @fixture
+    def quota(self):
+        inst = RedisQuota(hosts={
             0: {'db': 9}
         })
-        self.quota.conn.flushdb()
+        inst.conn.flushdb()
+        return inst
+
+    @patcher.object(RedisQuota, 'get_system_quota')
+    def get_system_quota(self):
+        inst = mock.MagicMock()
+        inst.return_value = 0
+        return inst
+
+    @patcher.object(RedisQuota, 'get_team_quota')
+    def get_team_quota(self):
+        inst = mock.MagicMock()
+        inst.return_value = 0
+        return inst
+
+    @patcher.object(RedisQuota, 'get_project_quota')
+    def get_project_quota(self):
+        inst = mock.MagicMock()
+        inst.return_value = 0
+        return inst
+
+    @patcher.object(RedisQuota, '_incr_project')
+    def _incr_project(self):
+        inst = mock.MagicMock()
+        inst.return_value = (0, 0, 0)
+        return inst
 
     def test_default_host_is_local(self):
         quota = RedisQuota()
         self.assertEquals(len(quota.conn.hosts), 1)
         self.assertEquals(quota.conn.hosts[0].host, 'localhost')
 
-    @mock.patch.object(RedisQuota, 'get_system_quota')
-    @mock.patch.object(RedisQuota, 'get_project_quota')
-    @mock.patch.object(RedisQuota, '_incr_project')
-    def test_bails_immediately_without_quota(self, incr, get_project_quota, get_system_quota):
-        get_system_quota.return_value = 0
-        get_project_quota.return_value = 0
-        incr.return_value = (0, 0)
+    def test_bails_immediately_without_any_quota(self):
+        self._incr_project.return_value = (0, 0, 0)
+
+        result = self.quota.is_rate_limited(self.project)
+
+        assert not self._incr_project.called
+        assert result is False
+
+    def test_enforces_project_quota(self):
+        self.get_project_quota.return_value = 100
+        self._incr_project.return_value = (0, 0, 101)
+
+        result = self.quota.is_rate_limited(self.project)
+
+        assert result is True
+
+        self._incr_project.return_value = (0, 0, 99)
+
+        result = self.quota.is_rate_limited(self.project)
+
+        assert result is False
+
+    def test_enforces_team_quota(self):
+        self.get_team_quota.return_value = 100
+        self._incr_project.return_value = (0, 101, 0)
+
+        result = self.quota.is_rate_limited(self.project)
+
+        assert result is True
+
+        self._incr_project.return_value = (0, 99, 0)
 
         result = self.quota.is_rate_limited(self.project)
 
-        get_project_quota.assert_called_once_with(self.project)
-        assert not incr.called
         assert result is False
 
-    @mock.patch.object(RedisQuota, 'get_system_quota')
-    @mock.patch.object(RedisQuota, 'get_project_quota')
-    @mock.patch.object(RedisQuota, '_incr_project')
-    def test_over_quota(self, incr, get_project_quota, get_system_quota):
-        get_project_quota.return_value = 100
-        get_system_quota.return_value = 0
-        incr.return_value = (0, 101)
+    def test_enforces_system_quota(self):
+        self.get_system_quota.return_value = 100
+        self._incr_project.return_value = (101, 0, 0)
 
         result = self.quota.is_rate_limited(self.project)
 
-        incr.assert_called_once_with(self.project)
         assert result is True
 
-    @mock.patch.object(RedisQuota, 'get_system_quota')
-    @mock.patch.object(RedisQuota, 'get_project_quota')
-    @mock.patch.object(RedisQuota, '_incr_project')
-    def test_under_quota(self, incr, get_project_quota, get_system_quota):
-        get_project_quota.return_value = 100
-        get_system_quota.return_value = 0
-        incr.return_value = (0, 99)
+        self._incr_project.return_value = (99, 0, 0)
 
         result = self.quota.is_rate_limited(self.project)
 
-        incr.assert_called_once_with(self.project)
         assert result is False
