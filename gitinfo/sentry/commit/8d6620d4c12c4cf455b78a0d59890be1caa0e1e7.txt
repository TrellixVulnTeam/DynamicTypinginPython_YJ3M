commit 8d6620d4c12c4cf455b78a0d59890be1caa0e1e7
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Nov 14 08:37:08 2019 -0800

    feat(apm): Add more manual react profile points (#15600)
    
    This adds more manual react profile points to
    
    - User feedback
    - Releases
    - Release details
    - Issues list
    - Issue details

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index 61109d5c5f..74d1352eda 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -18,6 +18,11 @@ type AsyncComponentProps = {
   location?: Location;
   router?: any;
   params?: any;
+
+  // optional sentry APM profiling
+  // Note we don't decorate `AsyncComponent` but rather the subclass
+  // so we can get its component name
+  finishProfile?: () => void;
 };
 
 type AsyncComponentState = {
@@ -146,6 +151,11 @@ export default class AsyncComponent<
         },
       });
       this._measurement.hasMeasured = true;
+
+      // sentry apm profiling
+      if (typeof this.props.finishProfile === 'function') {
+        this.props.finishProfile();
+      }
     }
 
     // Re-fetch data when router params change.
diff --git a/src/sentry/static/sentry/app/views/issueList/overview.jsx b/src/sentry/static/sentry/app/views/issueList/overview.jsx
index fb77b0fa0d..9d39daef90 100644
--- a/src/sentry/static/sentry/app/views/issueList/overview.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/overview.jsx
@@ -1,15 +1,15 @@
 import {browserHistory} from 'react-router';
-import isEqual from 'lodash/isEqual';
-import omit from 'lodash/omit';
-import pickBy from 'lodash/pickBy';
-import uniq from 'lodash/uniq';
 import Cookies from 'js-cookie';
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 import classNames from 'classnames';
 import createReactClass from 'create-react-class';
+import isEqual from 'lodash/isEqual';
+import omit from 'lodash/omit';
+import pickBy from 'lodash/pickBy';
 import qs from 'query-string';
+import uniq from 'lodash/uniq';
 
 import {Client} from 'app/api';
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
@@ -41,6 +41,7 @@ import StreamManager from 'app/utils/streamManager';
 import TagStore from 'app/stores/tagStore';
 import parseApiError from 'app/utils/parseApiError';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
+import profiler from 'app/utils/profiler';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 import withSavedSearches from 'app/utils/withSavedSearches';
@@ -61,8 +62,8 @@ const CongratsRobots = React.lazy(() =>
   import(/* webpackChunkName: "CongratsRobots" */ 'app/views/issueList/congratsRobots')
 );
 
-const IssueList = createReactClass({
-  displayName: 'IssueList',
+const IssueListOverview = createReactClass({
+  displayName: 'IssueListOverview',
 
   propTypes: {
     organization: SentryTypes.Organization,
@@ -70,6 +71,9 @@ const IssueList = createReactClass({
     savedSearch: SentryTypes.SavedSearch,
     savedSearches: PropTypes.arrayOf(SentryTypes.SavedSearch),
     savedSearchLoading: PropTypes.bool.isRequired,
+
+    // TODO(apm): manual profiling
+    finishProfile: PropTypes.func,
   },
 
   mixins: [
@@ -168,6 +172,14 @@ const IssueList = createReactClass({
       // This can happen when transitionTo is called
       this.fetchData();
     }
+
+    if (
+      prevState.issuesLoading &&
+      !this.state.issuesLoading &&
+      typeof this.props.finishProfile === 'function'
+    ) {
+      this.props.finishProfile();
+    }
   },
 
   componentWillUnmount() {
@@ -754,5 +766,7 @@ const IssueList = createReactClass({
   },
 });
 
-export default withSavedSearches(withGlobalSelection(withOrganization(IssueList)));
-export {IssueList};
+export default withSavedSearches(
+  withGlobalSelection(withOrganization(profiler()(IssueListOverview)))
+);
+export {IssueListOverview};
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
index 6aee3f3c2f..f8bc73ed14 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.jsx
@@ -1,21 +1,22 @@
 import {browserHistory} from 'react-router';
-import isEqual from 'lodash/isEqual';
 import DocumentTitle from 'react-document-title';
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 import * as Sentry from '@sentry/browser';
 import createReactClass from 'create-react-class';
+import isEqual from 'lodash/isEqual';
 
 import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
-import withApi from 'app/utils/withApi';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import GroupStore from 'app/stores/groupStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import ProjectsStore from 'app/stores/projectsStore';
 import SentryTypes from 'app/sentryTypes';
+import profiler from 'app/utils/profiler';
+import withApi from 'app/utils/withApi';
 
 import {ERROR_TYPES} from './constants';
 import GroupHeader from './header';
@@ -33,6 +34,8 @@ const GroupDetails = createReactClass({
     environments: PropTypes.arrayOf(PropTypes.string),
     enableSnuba: PropTypes.bool,
     showGlobalHeader: PropTypes.bool,
+
+    finishProfile: PropTypes.func,
   },
 
   childContextTypes: {
@@ -74,13 +77,21 @@ const GroupDetails = createReactClass({
     }
   },
 
-  componentDidUpdate(prevProps) {
+  componentDidUpdate(prevProps, prevState) {
     if (
       prevProps.params.groupId !== this.props.params.groupId ||
       !isEqual(prevProps.environments, this.props.environments)
     ) {
       this.fetchData();
     }
+
+    if (
+      prevState.loading &&
+      !this.state.loading &&
+      typeof this.props.finishProfile === 'function'
+    ) {
+      this.props.finishProfile();
+    }
   },
 
   remountComponent() {
@@ -123,7 +134,7 @@ const GroupDetails = createReactClass({
         const project = this.props.project || ProjectsStore.getById(data.project.id);
 
         if (!project) {
-          Sentry.withScope(scope => {
+          Sentry.withScope(() => {
             Sentry.captureException(new Error('Project not found'));
           });
         } else {
@@ -284,4 +295,4 @@ const GroupDetails = createReactClass({
 
 export {GroupDetails};
 
-export default withApi(GroupDetails);
+export default withApi(profiler()(GroupDetails));
diff --git a/src/sentry/static/sentry/app/views/releases/detail/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/index.jsx
index 0e00e6c79c..a568e755fc 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/index.jsx
@@ -2,20 +2,20 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import pick from 'lodash/pick';
 
-import SentryTypes from 'app/sentryTypes';
+import {PageContent} from 'app/styles/organization';
+import {URL_PARAM} from 'app/constants/globalSelectionHeader';
+import {t} from 'app/locale';
+import Alert from 'app/components/alert';
+import AsyncView from 'app/views/asyncView';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
-import Alert from 'app/components/alert';
-import {URL_PARAM} from 'app/constants/globalSelectionHeader';
-import withOrganization from 'app/utils/withOrganization';
+import SentryTypes from 'app/sentryTypes';
+import profiler from 'app/utils/profiler';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
+import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
 
-import AsyncView from 'app/views/asyncView';
-import {PageContent} from 'app/styles/organization';
-import {t} from 'app/locale';
-
 import ReleaseHeader from './releaseHeader';
 
 const ReleaseDetailsContainer = props => {
@@ -136,5 +136,5 @@ class OrganizationReleaseDetails extends AsyncView {
 }
 
 export default withProjects(
-  withOrganization(withGlobalSelection(ReleaseDetailsContainer))
+  withOrganization(withGlobalSelection(profiler()(ReleaseDetailsContainer)))
 );
diff --git a/src/sentry/static/sentry/app/views/releases/list/index.jsx b/src/sentry/static/sentry/app/views/releases/list/index.jsx
index 2c3a51e097..83688f5c8c 100644
--- a/src/sentry/static/sentry/app/views/releases/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/index.jsx
@@ -1,27 +1,28 @@
-import React from 'react';
 import {browserHistory} from 'react-router';
+import React from 'react';
 
-import SentryTypes from 'app/sentryTypes';
-import {t} from 'app/locale';
-import SearchBar from 'app/components/searchBar';
+import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
+import {PageContent, PageHeader} from 'app/styles/organization';
 import {Panel, PanelBody} from 'app/components/panels';
-import Pagination from 'app/components/pagination';
-import LoadingIndicator from 'app/components/loadingIndicator';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
-import {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';
+import LoadingIndicator from 'app/components/loadingIndicator';
 import NoProjectMessage from 'app/components/noProjectMessage';
-import AsyncView from 'app/views/asyncView';
-import withOrganization from 'app/utils/withOrganization';
-import withGlobalSelection from 'app/utils/withGlobalSelection';
-import {PageContent, PageHeader} from 'app/styles/organization';
 import PageHeading from 'app/components/pageHeading';
+import Pagination from 'app/components/pagination';
+import SearchBar from 'app/components/searchBar';
+import SentryTypes from 'app/sentryTypes';
+import profiler from 'app/utils/profiler';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
+import withOrganization from 'app/utils/withOrganization';
 
+import {getQuery} from './utils';
+import ReleaseLanding from './releaseLanding';
 import ReleaseList from './releaseList';
 import ReleaseListHeader from './releaseListHeader';
-import ReleaseLanding from './releaseLanding';
 import ReleaseProgress from './releaseProgress';
-import {getQuery} from './utils';
 
 const ReleasesContainer = props => {
   const {organization} = props;
@@ -181,4 +182,4 @@ class OrganizationReleases extends AsyncView {
   }
 }
 
-export default withOrganization(withGlobalSelection(ReleasesContainer));
+export default withOrganization(withGlobalSelection(profiler()(ReleasesContainer)));
diff --git a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.tsx b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.tsx
index 4a1b3e19f3..9fc79400e4 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.tsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.tsx
@@ -2,22 +2,23 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {PageContent} from 'app/styles/organization';
 import {Organization, UserReport} from 'app/types';
+import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import CompactIssue from 'app/components/issues/compactIssue';
 import EventUserFeedback from 'app/components/events/userFeedback';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
-import LoadingIndicator from 'app/components/loadingIndicator';
 import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
+import LoadingIndicator from 'app/components/loadingIndicator';
 import SentryTypes from 'app/sentryTypes';
+import profiler from 'app/utils/profiler';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 
+import {getQuery} from './utils';
 import UserFeedbackContainer from './container';
 import UserFeedbackEmpty from './userFeedbackEmpty';
-import {getQuery} from './utils';
 
 type State = AsyncView['state'] & {
   reportList: UserReport[];
@@ -128,7 +129,7 @@ class OrganizationUserFeedback extends AsyncView<Props, State> {
 }
 
 export {OrganizationUserFeedback};
-export default withOrganization(OrganizationUserFeedback);
+export default withOrganization(profiler()(OrganizationUserFeedback));
 
 const StyledEventUserFeedback = styled(EventUserFeedback)`
   margin: ${space(2)} 0 0;
diff --git a/tests/js/spec/views/issueList/overview.spec.jsx b/tests/js/spec/views/issueList/overview.spec.jsx
index c6b48fbb35..85abbae666 100644
--- a/tests/js/spec/views/issueList/overview.spec.jsx
+++ b/tests/js/spec/views/issueList/overview.spec.jsx
@@ -6,7 +6,7 @@ import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mountWithTheme, shallow} from 'sentry-test/enzyme';
 import ErrorRobot from 'app/components/errorRobot';
 import GroupStore from 'app/stores/groupStore';
-import IssueListWithStores, {IssueList} from 'app/views/issueList/overview';
+import IssueListWithStores, {IssueListOverview} from 'app/views/issueList/overview';
 import StreamGroup from 'app/components/stream/group';
 import TagStore from 'app/stores/tagStore';
 
@@ -988,7 +988,7 @@ describe('IssueList,', function() {
   describe('transitionTo', function() {
     let instance;
     beforeEach(function() {
-      wrapper = shallow(<IssueList {...props} />, {
+      wrapper = shallow(<IssueListOverview {...props} />, {
         disableLifecycleMethods: false,
       });
       instance = wrapper.instance();
@@ -1107,7 +1107,7 @@ describe('IssueList,', function() {
 
   describe('getEndpointParams', function() {
     beforeEach(function() {
-      wrapper = shallow(<IssueList {...props} />, {
+      wrapper = shallow(<IssueListOverview {...props} />, {
         disableLifecycleMethods: false,
       });
     });
@@ -1154,7 +1154,7 @@ describe('IssueList,', function() {
 
   describe('componentDidMount', function() {
     beforeEach(function() {
-      wrapper = shallow(<IssueList {...props} />);
+      wrapper = shallow(<IssueListOverview {...props} />);
     });
 
     it('fetches tags and sets state', async function() {
@@ -1197,7 +1197,7 @@ describe('IssueList,', function() {
         },
       });
       fetchDataMock.mockReset();
-      wrapper = shallow(<IssueList {...props} />, {
+      wrapper = shallow(<IssueListOverview {...props} />, {
         disableLifecycleMethods: false,
       });
     });
@@ -1250,7 +1250,7 @@ describe('IssueList,', function() {
 
   describe('componentDidUpdate fetching members', function() {
     beforeEach(function() {
-      wrapper = shallow(<IssueList {...props} />, {
+      wrapper = shallow(<IssueListOverview {...props} />, {
         disableLifecycleMethods: false,
       });
       wrapper.instance().fetchData = jest.fn();
@@ -1273,7 +1273,7 @@ describe('IssueList,', function() {
 
   describe('componentDidUpdate fetching tags', function() {
     beforeEach(function() {
-      wrapper = shallow(<IssueList {...props} />, {
+      wrapper = shallow(<IssueListOverview {...props} />, {
         disableLifecycleMethods: false,
       });
       wrapper.instance().fetchData = jest.fn();
@@ -1297,7 +1297,7 @@ describe('IssueList,', function() {
 
   describe('processingIssues', function() {
     beforeEach(function() {
-      wrapper = shallow(<IssueList {...props} />);
+      wrapper = shallow(<IssueListOverview {...props} />);
     });
 
     it('fetches and displays processing issues', async function() {
@@ -1318,7 +1318,7 @@ describe('IssueList,', function() {
 
   describe('render states', function() {
     beforeEach(function() {
-      wrapper = shallow(<IssueList {...props} />, {
+      wrapper = shallow(<IssueListOverview {...props} />, {
         disableLifecycleMethods: false,
       });
     });
@@ -1359,7 +1359,7 @@ describe('IssueList,', function() {
         },
       };
 
-      wrapper = shallow(<IssueList {...errorsOnlyQuery} />, {
+      wrapper = shallow(<IssueListOverview {...errorsOnlyQuery} />, {
         disableLifecycleMethods: false,
       });
 
@@ -1380,7 +1380,7 @@ describe('IssueList,', function() {
         },
       };
 
-      wrapper = shallow(<IssueList {...hasBrowserQuery} />, {
+      wrapper = shallow(<IssueListOverview {...hasBrowserQuery} />, {
         disableLifecycleMethods: false,
       });
 
@@ -1411,7 +1411,7 @@ describe('IssueList,', function() {
         }),
         ...moreProps,
       };
-      const localWrapper = shallow(<IssueList {...defaultProps} />, {
+      const localWrapper = shallow(<IssueListOverview {...defaultProps} />, {
         disableLifecycleMethods: false,
       });
       localWrapper.setState({
