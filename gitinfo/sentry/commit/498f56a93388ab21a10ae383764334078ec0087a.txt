commit 498f56a93388ab21a10ae383764334078ec0087a
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Jul 12 16:43:52 2018 -0700

    fix: Pass environment during bulk update/delete/merge (#9024)

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 66342dee97..d36dff2788 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -1,5 +1,5 @@
 import $ from 'jquery';
-import {isUndefined} from 'lodash';
+import {isUndefined, isNil} from 'lodash';
 import idx from 'idx';
 
 import {openSudo} from 'app/actionCreators/modal';
@@ -22,11 +22,17 @@ export class Request {
  * @param params
  */
 export function paramsToQueryArgs(params) {
-  return params.itemIds
+  let p = params.itemIds
     ? {id: params.itemIds} // items matching array of itemids
     : params.query
       ? {query: params.query} // items matching search query
       : undefined; // all items
+
+  // only include environment if it is not null/undefined
+  if (params.query && !isNil(params.environment)) {
+    p.environment = params.environment;
+  }
+  return p;
 }
 
 export class Client {
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index d5d845b3db..8dca343fe5 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -12,6 +12,7 @@ import DropdownLink from 'app/components/dropdownLink';
 import IndicatorStore from 'app/stores/indicatorStore';
 import MenuItem from 'app/components/menuItem';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
+import SentryTypes from 'app/proptypes';
 import {t, tct, tn} from 'app/locale';
 
 import Checkbox from 'app/components/checkbox';
@@ -145,6 +146,7 @@ const StreamActions = createReactClass({
     realtimeActive: PropTypes.bool.isRequired,
     statsPeriod: PropTypes.string.isRequired,
     query: PropTypes.string.isRequired,
+    environment: SentryTypes.Environment,
     queryCount: PropTypes.number,
     hasReleases: PropTypes.bool,
     latestRelease: PropTypes.object,
@@ -208,6 +210,7 @@ const StreamActions = createReactClass({
           itemIds,
           data,
           query: this.props.query,
+          environment: this.props.environment && this.props.environment.name,
         },
         {
           complete: () => {
@@ -228,6 +231,7 @@ const StreamActions = createReactClass({
           projectId: this.props.projectId,
           itemIds,
           query: this.props.query,
+          environment: this.props.environment && this.props.environment.name,
         },
         {
           complete: () => {
@@ -248,6 +252,7 @@ const StreamActions = createReactClass({
           projectId: this.props.projectId,
           itemIds,
           query: this.props.query,
+          environment: this.props.environment && this.props.environment.name,
         },
         {
           complete: () => {
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index 2a7321d099..bdaff688f1 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -759,6 +759,7 @@ const Stream = createReactClass({
               projectId={params.projectId}
               hasReleases={projectFeatures.has('releases')}
               latestRelease={this.context.project.latestRelease}
+              environment={this.state.environment}
               query={this.state.query}
               queryCount={this.state.queryCount}
               onSelectStatsPeriod={this.onSelectStatsPeriod}
diff --git a/tests/js/spec/api.spec.jsx b/tests/js/spec/api.spec.jsx
index e675d3c05d..d6207abc6b 100644
--- a/tests/js/spec/api.spec.jsx
+++ b/tests/js/spec/api.spec.jsx
@@ -45,6 +45,24 @@ describe('api', function() {
         })
       ).toBeUndefined();
     });
+
+    it('should keep environment when query is provided', function() {
+      expect(
+        paramsToQueryArgs({
+          query: 'is:unresolved',
+          environment: 'production',
+        })
+      ).toEqual({query: 'is:unresolved', environment: 'production'});
+    });
+
+    it('should exclude environment when it is null/undefined', function() {
+      expect(
+        paramsToQueryArgs({
+          query: 'is:unresolved',
+          environment: null,
+        })
+      ).toEqual({query: 'is:unresolved'});
+    });
   });
 
   describe('Client', function() {
