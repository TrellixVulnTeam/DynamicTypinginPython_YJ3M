commit 86fc67a313ab71e17529680c35dbfc01d2799b4a
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Feb 23 13:00:12 2017 +0100

    Rename to cache_enabled to domain_lock_enabled, Remove JS_ errors

diff --git a/src/sentry/http.py b/src/sentry/http.py
index 5866582c1a..92777aeea7 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -227,14 +227,14 @@ def expose_url(url):
     return url
 
 
-def fetch_file(url, headers=None, cache_enabled=True):
+def fetch_file(url, headers=None, domain_lock_enabled=True):
     """
     Pull down a URL, returning a UrlResult object.
 
     Attempts to fetch from the cache.
     """
     # lock down domains that are problematic
-    if cache_enabled:
+    if domain_lock_enabled:
         domain = urlparse(url).netloc
         domain_key = 'source:blacklist:v2:%s' % (
             md5_text(domain).hexdigest(),
@@ -320,7 +320,7 @@ def fetch_file(url, headers=None, cache_enabled=True):
                 }
 
             # TODO(dcramer): we want to be less aggressive on disabling domains
-            if cache_enabled:
+            if domain_lock_enabled:
                 cache.set(domain_key, error or '', 300)
             logger.warning('source.disabled', extra=error)
             raise CannotFetch(error)
@@ -338,7 +338,7 @@ def fetch_file(url, headers=None, cache_enabled=True):
         logger.debug('HTTP %s when fetching %r', result[2], url,
                      exc_info=True)
         error = {
-            'type': EventError.JS_INVALID_HTTP_CODE,
+            'type': EventError.FETCH_INVALID_HTTP_CODE,
             'value': result[2],
             'url': expose_url(url),
         }
@@ -350,13 +350,13 @@ def fetch_file(url, headers=None, cache_enabled=True):
     # binary and say utf8 encoding.
     if not isinstance(result[1], six.binary_type):
         try:
-            result = (result[0], result[1].encode('utf8'), None)
+            result = (result[0], result[1].encode('utf8'), result[2], result[3])
         except UnicodeEncodeError:
             error = {
-                'type': EventError.JS_INVALID_SOURCE_ENCODING,
+                'type': EventError.FETCH_INVALID_ENCODING,
                 'value': 'utf8',
                 'url': expose_url(url),
             }
             raise CannotFetch(error)
 
-    return UrlResult(url, result[0], result[1], response.status_code, result[3])
+    return UrlResult(url, result[0], result[1], result[2], result[3])
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index ff0bded02f..5bda42daef 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -315,7 +315,7 @@ def fetch_file(url, project=None, release=None, allow_scraping=True):
         with metrics.timer('sourcemaps.fetch'):
             result = http.fetch_file(url, headers)
             z_body = zlib.compress(result.body)
-            cache.set(cache_key, (url, headers, z_body, result.status, result.encoding), 60)
+            cache.set(cache_key, (url, result.headers, z_body, result.status, result.encoding), 60)
 
     # For JavaScript files, check if content is something other than JavaScript/JSON (i.e. HTML)
     # NOTE: possible to have JS files that don't actually end w/ ".js", but this should catch 99% of cases
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 8646b9a6a7..76208c8cb2 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -27,13 +27,15 @@ class EventError(object):
 
     JS_GENERIC_FETCH_ERROR = 'js_generic_fetch_error'  # deprecated in favor of FETCH_GENERIC_ERROR
     FETCH_GENERIC_ERROR = 'fetch_generic_error'
-    JS_INVALID_HTTP_CODE = 'js_invalid_http_code'
+    JS_INVALID_HTTP_CODE = 'js_invalid_http_code'  # deprecated in favor of FETCH_INVALID_HTTP_CODE
+    FETCH_INVALID_HTTP_CODE = 'fetch_invalid_http_code'
     JS_INVALID_CONTENT = 'js_invalid_content'
     JS_NO_COLUMN = 'js_no_column'
     JS_MISSING_SOURCE = 'js_no_source'
     JS_INVALID_SOURCEMAP = 'js_invalid_source'
     JS_TOO_MANY_REMOTE_SOURCES = 'js_too_many_sources'
     JS_INVALID_SOURCE_ENCODING = 'js_invalid_source_encoding'
+    FETCH_INVALID_ENCODING = 'fetch_invalid_source_encoding'
     JS_INVALID_SOURCEMAP_LOCATION = 'js_invalid_sourcemap_location'
     JS_TOO_LARGE = 'js_too_large'  # deprecated in favor of FETCH_TOO_LARGE
     FETCH_TOO_LARGE = 'fetch_too_large'
@@ -60,12 +62,14 @@ class EventError(object):
         JS_GENERIC_FETCH_ERROR: u'Unable to fetch resource: {url}',  # deprecated in favor of FETCH_GENERIC_ERROR
         FETCH_GENERIC_ERROR: u'Unable to fetch resource: {url}',
         JS_INVALID_HTTP_CODE: u'HTTP returned {value} response on {url}',
+        FETCH_INVALID_HTTP_CODE: u'HTTP returned {value} response on {url}',  # deprecated in favor of FETCH_INVALID_HTTP_CODE
         JS_INVALID_CONTENT: u'Source file was not JavaScript: {url}',
         JS_NO_COLUMN: u'Cannot expand sourcemap due to no column information for {url}',
         JS_MISSING_SOURCE: u'Source code was not found for {url}',
         JS_INVALID_SOURCEMAP: u'Sourcemap was invalid or not parseable: {url}',
         JS_TOO_MANY_REMOTE_SOURCES: u'The maximum number of remote source requests was made',
         JS_INVALID_SOURCE_ENCODING: u'Source file was not \'{value}\' encoding: {url}',
+        FETCH_INVALID_ENCODING: u'Source file was not \'{value}\' encoding: {url}',
         JS_INVALID_SOURCEMAP_LOCATION: u'Invalid location in sourcemap: ({column}, {row})',
         JS_TOO_LARGE: u'Remote file too large: ({max_size:g}MB, {url})',  # deprecated in favor of FETCH_TOO_LARGE
         FETCH_TOO_LARGE: u'Remote file too large: ({max_size:g}MB, {url})',
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index de51a1882a..0b1ef81d84 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -13,7 +13,7 @@ from requests.exceptions import RequestException
 from sentry import http
 from sentry.lang.javascript.processor import (
     discover_sourcemap, fetch_sourcemap, fetch_file, generate_module,
-    trim_line, UrlResult, fetch_release_file, CannotFetch,
+    trim_line, fetch_release_file,
     UnparseableSourcemap,
 )
 from sentry.lang.javascript.errormapping import (
@@ -58,8 +58,9 @@ class FetchReleaseFileTest(TestCase):
 
         result = fetch_release_file('file.min.js', release)
 
-        assert type(result[1]) is six.binary_type
-        assert result == (
+        assert type(result.body) is six.binary_type
+        assert result == http.UrlResult(
+            'file.min.js',
             {'content-type': 'application/json; charset=utf-8'},
             binary_body,
             200,
@@ -133,7 +134,8 @@ class FetchFileTest(TestCase):
     @responses.activate
     @patch('sentry.lang.javascript.processor.fetch_release_file')
     def test_non_url_with_release(self, mock_fetch_release_file):
-        mock_fetch_release_file.return_value = (
+        mock_fetch_release_file.return_value = http.UrlResult(
+            '/example.js',
             {'content-type': 'application/json'},
             'foo',
             200,
@@ -176,7 +178,7 @@ class FetchFileTest(TestCase):
     @responses.activate
     def test_truncated(self):
         url = truncatechars('http://example.com', 3)
-        with pytest.raises(CannotFetch) as exc:
+        with pytest.raises(http.CannotFetch) as exc:
             fetch_file(url)
 
         assert exc.value.data['type'] == EventError.JS_MISSING_SOURCE
@@ -186,38 +188,38 @@ class FetchFileTest(TestCase):
 class DiscoverSourcemapTest(TestCase):
     # discover_sourcemap(result)
     def test_simple(self):
-        result = UrlResult('http://example.com', {}, '', None)
+        result = http.UrlResult('http://example.com', {}, '', 200, None)
         assert discover_sourcemap(result) is None
 
-        result = UrlResult('http://example.com', {
+        result = http.UrlResult('http://example.com', {
             'x-sourcemap': 'http://example.com/source.map.js'
-        }, '', None)
+        }, '', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = UrlResult('http://example.com', {
+        result = http.UrlResult('http://example.com', {
             'sourcemap': 'http://example.com/source.map.js'
-        }, '', None)
+        }, '', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = UrlResult('http://example.com', {}, '//@ sourceMappingURL=http://example.com/source.map.js\nconsole.log(true)', None)
+        result = http.UrlResult('http://example.com', {}, '//@ sourceMappingURL=http://example.com/source.map.js\nconsole.log(true)', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = UrlResult('http://example.com', {}, '//# sourceMappingURL=http://example.com/source.map.js\nconsole.log(true)', None)
+        result = http.UrlResult('http://example.com', {}, '//# sourceMappingURL=http://example.com/source.map.js\nconsole.log(true)', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = UrlResult('http://example.com', {}, 'console.log(true)\n//@ sourceMappingURL=http://example.com/source.map.js', None)
+        result = http.UrlResult('http://example.com', {}, 'console.log(true)\n//@ sourceMappingURL=http://example.com/source.map.js', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = UrlResult('http://example.com', {}, 'console.log(true)\n//# sourceMappingURL=http://example.com/source.map.js', None)
+        result = http.UrlResult('http://example.com', {}, 'console.log(true)\n//# sourceMappingURL=http://example.com/source.map.js', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = UrlResult('http://example.com', {}, 'console.log(true)\n//# sourceMappingURL=http://example.com/source.map.js\n//# sourceMappingURL=http://example.com/source2.map.js', None)
+        result = http.UrlResult('http://example.com', {}, 'console.log(true)\n//# sourceMappingURL=http://example.com/source.map.js\n//# sourceMappingURL=http://example.com/source2.map.js', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/source2.map.js'
 
-        result = UrlResult('http://example.com', {}, '//# sourceMappingURL=app.map.js/*ascii:lol*/', None)
+        result = http.UrlResult('http://example.com', {}, '//# sourceMappingURL=app.map.js/*ascii:lol*/', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/app.map.js'
 
-        result = UrlResult('http://example.com', {}, '//# sourceMappingURL=/*lol*/', None)
+        result = http.UrlResult('http://example.com', {}, '//# sourceMappingURL=/*lol*/', 200, None)
         with self.assertRaises(AssertionError):
             discover_sourcemap(result)
 
@@ -280,7 +282,7 @@ class FetchSourcemapTest(TestCase):
         responses.add(responses.GET, 'http://example.com', body='{}',
                       content_type='application/json; charset=NOPE')
 
-        with pytest.raises(CannotFetch) as exc:
+        with pytest.raises(http.CannotFetch) as exc:
             fetch_sourcemap('http://example.com')
 
         assert exc.value.data['type'] == EventError.JS_INVALID_SOURCE_ENCODING
