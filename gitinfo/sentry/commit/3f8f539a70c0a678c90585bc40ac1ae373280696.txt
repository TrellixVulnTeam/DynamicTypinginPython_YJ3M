commit 3f8f539a70c0a678c90585bc40ac1ae373280696
Author: Matte Noble <me@mattenoble.com>
Date:   Tue Jan 29 12:59:22 2019 -0800

    feat(app-platform): Issue Ignored Webhooks (#11768)
    
    When an Issue is ignored, send webhooks to Sentry Apps that subscribe to
    them.

diff --git a/src/sentry/receivers/sentry_apps.py b/src/sentry/receivers/sentry_apps.py
index 47cb1b7442..520bdf6c67 100644
--- a/src/sentry/receivers/sentry_apps.py
+++ b/src/sentry/receivers/sentry_apps.py
@@ -5,6 +5,7 @@ from django.dispatch import receiver
 
 from sentry.models import Group, Organization
 from sentry.signals import (
+    issue_ignored,
     issue_resolved,
     issue_resolved_in_release,
     resolved_with_commit,
@@ -37,7 +38,7 @@ def issue_resolved_in_release(project, group, user, resolution_type, **kwargs):
         group,
         user,
         'issue.resolved',
-        'resolved_in_release',
+        {'resolution_type': 'resolved_in_release'},
     )
 
 
@@ -48,10 +49,21 @@ def issue_resolved(project, group, user, **kwargs):
         group,
         user,
         'issue.resolved',
-        'resolved',
+        {'resolution_type': 'resolved'},
     )
 
 
+@issue_ignored.connect(weak=False)
+def issue_ignored(project, user, group_list, **kwargs):
+    for issue in group_list:
+        send_workflow_webhooks(
+            project.organization,
+            issue,
+            user,
+            'issue.ignored',
+        )
+
+
 @resolved_with_commit.connect(weak=False)
 def resolved_with_commit(organization_id, group, user, **kwargs):
     organization = Organization.objects.get(id=organization_id)
@@ -60,18 +72,20 @@ def resolved_with_commit(organization_id, group, user, **kwargs):
         group,
         user,
         'issue.resolved',
-        'resolved_in_commit',
+        {'resolution_type': 'resolved_in_commit'},
     )
 
 
-def send_workflow_webhooks(organization, issue, user, event, resolution_type):
+def send_workflow_webhooks(organization, issue, user, event, data=None):
+    data = data or {}
+
     for install in installations_to_notify(organization, event):
         workflow_notification.delay(
             installation_id=install.id,
             issue_id=issue.id,
-            type='resolved',
+            type=event.split('.')[-1],
             user_id=(user.id if user else None),
-            data={'resolution_type': resolution_type},
+            data=data,
         )
 
 
diff --git a/tests/sentry/receivers/test_sentry_apps.py b/tests/sentry/receivers/test_sentry_apps.py
index d4be2c026e..c65eb54957 100644
--- a/tests/sentry/receivers/test_sentry_apps.py
+++ b/tests/sentry/receivers/test_sentry_apps.py
@@ -27,11 +27,13 @@ class TestIssueSaved(TestCase):
 # This testcase needs to be an APITestCase because all of the logic to resolve
 # Issues and kick off side effects are just chillin in the endpoint code -_-
 @patch('sentry.tasks.sentry_apps.workflow_notification.delay')
-class TestIssueResolved(APITestCase):
+class TestIssueWorkflowNotifications(APITestCase):
     def setUp(self):
         self.issue = self.create_group(project=self.project)
 
-        self.sentry_app = self.create_sentry_app(events=['issue.resolved'])
+        self.sentry_app = self.create_sentry_app(
+            events=['issue.resolved', 'issue.ignored'],
+        )
 
         self.install = self.create_sentry_app_installation(
             organization=self.organization,
@@ -46,13 +48,13 @@ class TestIssueResolved(APITestCase):
 
         self.login_as(self.user)
 
-    def resolve_issue(self, _data=None):
+    def update_issue(self, _data=None):
         data = {'status': 'resolved'}
         data.update(_data or {})
         self.client.put(self.url, data=data, format='json')
 
     def test_notify_after_basic_resolved(self, delay):
-        self.resolve_issue()
+        self.update_issue()
 
         assert faux(delay).called_with(
             installation_id=self.install.id,
@@ -66,7 +68,7 @@ class TestIssueResolved(APITestCase):
         repo = self.create_repo(project=self.project)
         commit = self.create_commit(repo=repo)
 
-        self.resolve_issue({
+        self.update_issue({
             'statusDetails': {
                 'inCommit': {
                     'repository': repo.name,
@@ -86,7 +88,7 @@ class TestIssueResolved(APITestCase):
     def test_notify_after_resolve_in_specific_release(self, delay):
         release = self.create_release(project=self.project)
 
-        self.resolve_issue({
+        self.update_issue({
             'statusDetails': {
                 'inRelease': release.version,
             },
@@ -103,7 +105,7 @@ class TestIssueResolved(APITestCase):
     def test_notify_after_resolve_in_latest_release(self, delay):
         self.create_release(project=self.project)
 
-        self.resolve_issue({
+        self.update_issue({
             'statusDetails': {
                 'inRelease': 'latest',
             },
@@ -120,7 +122,7 @@ class TestIssueResolved(APITestCase):
     def test_notify_after_resolve_in_next_release(self, delay):
         self.create_release(project=self.project)
 
-        self.resolve_issue({
+        self.update_issue({
             'statusDetails': {
                 'inNextRelease': True,
             },
@@ -178,3 +180,14 @@ class TestIssueResolved(APITestCase):
             user_id=None,
             data={'resolution_type': 'resolved_in_commit'},
         )
+
+    def test_notify_after_issue_ignored(self, delay):
+        self.update_issue({'status': 'ignored'})
+
+        assert faux(delay).called_with(
+            installation_id=self.install.id,
+            issue_id=self.issue.id,
+            type='ignored',
+            user_id=self.user.id,
+            data={},
+        )
