commit 2ad59fc6280753d53021d273daa422d9ba69215c
Author: Evan Hicks <evan.hicks@sentry.io>
Date:   Wed Dec 11 11:25:45 2019 -0500

    feat(discover) Add sum aggregation to snuba APIs
    
    Add the sum aggregation to the query builders and APIs.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index ffa5dad442..848030c482 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -722,6 +722,7 @@ VALID_AGGREGATES = {
     "min": {"snuba_name": "min", "fields": ["time", "timestamp", "transaction.duration"]},
     "max": {"snuba_name": "max", "fields": ["time", "timestamp", "transaction.duration"]},
     "avg": {"snuba_name": "avg", "fields": ["transaction.duration"]},
+    "sum": {"snuba_name": "sum", "fields": ["transaction.duration"]},
 }
 
 AGGREGATE_PATTERN = re.compile(r"^(?P<function>[^\(]+)\((?P<column>[a-z\._]*)\)$")
diff --git a/src/sentry/discover/endpoints/serializers.py b/src/sentry/discover/endpoints/serializers.py
index 3a5f477562..cb5590349a 100644
--- a/src/sentry/discover/endpoints/serializers.py
+++ b/src/sentry/discover/endpoints/serializers.py
@@ -89,7 +89,7 @@ class DiscoverQuerySerializer(serializers.Serializer):
         return [self.get_condition(condition) for condition in value]
 
     def validate_aggregations(self, value):
-        valid_functions = set(["count()", "uniq", "avg"])
+        valid_functions = set(["count()", "uniq", "avg", "sum"])
         requested_functions = set(agg[0] for agg in value)
 
         if not requested_functions.issubset(valid_functions):
diff --git a/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx b/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx
index 4ea0eade67..83f735126f 100644
--- a/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx
+++ b/src/sentry/static/sentry/app/views/discover/aggregations/aggregation.tsx
@@ -46,6 +46,7 @@ export default class AggregationRow extends React.Component<
       {value: 'count', label: 'count'},
       {value: 'uniq', label: 'uniq(...)'},
       {value: 'avg', label: 'avg(...)'},
+      {value: 'sum', label: 'sum(...)'},
     ];
 
     if (input.startsWith('uniq')) {
@@ -66,6 +67,15 @@ export default class AggregationRow extends React.Component<
         }));
     }
 
+    if (input.startsWith('sum')) {
+      optionList = this.props.columns
+        .filter(({type}) => type === 'number')
+        .map(({name}) => ({
+          value: `sum(${name})`,
+          label: `sum(${name})`,
+        }));
+    }
+
     return optionList.filter(({label}) => label.includes(input));
   };
 
@@ -74,7 +84,7 @@ export default class AggregationRow extends React.Component<
   }
 
   handleChange = (option: ReactSelectOption) => {
-    if (option.value === 'uniq' || option.value === 'avg') {
+    if (option.value === 'uniq' || option.value === 'avg' || option.value === 'sum') {
       this.setState({inputValue: option.value}, this.focus);
     } else {
       this.setState({inputValue: option.value, isOpen: false});
diff --git a/src/sentry/static/sentry/app/views/discover/aggregations/utils.tsx b/src/sentry/static/sentry/app/views/discover/aggregations/utils.tsx
index bf3b34a919..3e444d0993 100644
--- a/src/sentry/static/sentry/app/views/discover/aggregations/utils.tsx
+++ b/src/sentry/static/sentry/app/views/discover/aggregations/utils.tsx
@@ -25,7 +25,7 @@ export function isValidAggregation(aggregation: Aggregation, cols: Column[]): bo
     return columns.has(col || '');
   }
 
-  if (func === 'avg') {
+  if (func === 'avg' || func === 'sum') {
     const validCols = new Set(
       cols.filter(({type}) => type === 'number').map(({name}) => name)
     );
@@ -60,6 +60,10 @@ export function getInternal(external: Aggregation): string {
     return `avg(${col})`;
   }
 
+  if (func === 'sum') {
+    return `sum(${col})`;
+  }
+
   return func;
 }
 
@@ -87,6 +91,7 @@ function getAlias(columnName: string): string {
 export function getExternal(internal: string): Aggregation {
   const uniqRegex = /^uniq\((.+)\)$/;
   const avgRegex = /^avg\((.+)\)$/;
+  const sumRegex = /^sum\((.+)\)$/;
 
   let match = internal.match(uniqRegex);
   if (match && match[1]) {
@@ -100,5 +105,11 @@ export function getExternal(internal: string): Aggregation {
     return ['avg', column, `avg_${getAlias(column)}`];
   }
 
+  match = internal.match(sumRegex);
+  if (match && match[1]) {
+    const column = match[1];
+    return ['sum', column, `sum_${getAlias(column)}`];
+  }
+
   return ['count()', null, 'count'];
 }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index 9f1ee807dc..3ca1ad1138 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -42,6 +42,10 @@ export const AGGREGATIONS = {
     type: ['duration'],
     isSortable: true,
   },
+  sum: {
+    type: ['duration'],
+    isSortable: true,
+  },
   /*
   cidr: {
     type: 'string',
diff --git a/tests/js/spec/views/discover/aggregations/aggregation.spec.jsx b/tests/js/spec/views/discover/aggregations/aggregation.spec.jsx
index 9d4d427b88..369d9863ba 100644
--- a/tests/js/spec/views/discover/aggregations/aggregation.spec.jsx
+++ b/tests/js/spec/views/discover/aggregations/aggregation.spec.jsx
@@ -5,7 +5,7 @@ import Aggregation from 'app/views/discover/aggregations/aggregation';
 
 describe('Aggregation', function() {
   describe('render()', function() {
-    it('renders empty, count, uniq and avg', async function() {
+    it('renders empty, count, uniq, avg and sum', async function() {
       const data = [
         {value: [null, null, null], expectedTextValue: 'Add aggregation function...'},
         {value: ['count()', null, 'count'], expectedTextValue: 'count'},
@@ -17,6 +17,10 @@ describe('Aggregation', function() {
           value: ['avg', 'device.battery_level', 'avg_device_battery_level'],
           expectedTextValue: 'avg(device.battery_level)',
         },
+        {
+          value: ['sum', 'device.battery_level', 'sum_device_battery_level'],
+          expectedTextValue: 'sum(device.battery_level)',
+        },
         {
           value: ['uniq', 'message', 'uniq_message'],
           expectedTextValue: 'uniq(message)',
@@ -51,8 +55,8 @@ describe('Aggregation', function() {
       wrapper.setState({inputValue: ''});
       const options = wrapper.instance().filterOptions();
 
-      expect(options).toHaveLength(3);
-      expect(options.map(({value}) => value)).toEqual(['count', 'uniq', 'avg']);
+      expect(options).toHaveLength(4);
+      expect(options.map(({value}) => value)).toEqual(['count', 'uniq', 'avg', 'sum']);
     });
 
     it('displays uniq options for non-array fields only', function() {
@@ -69,6 +73,13 @@ describe('Aggregation', function() {
       expect(options).toHaveLength(1);
       expect(options[0]).toEqual({value: 'avg(col2)', label: 'avg(col2)'});
     });
+
+    it('displays number value options on input `sum`', function() {
+      wrapper.setState({inputValue: 'sum'});
+      const options = wrapper.instance().filterOptions();
+      expect(options).toHaveLength(1);
+      expect(options[0]).toEqual({value: 'sum(col2)', label: 'sum(col2)'});
+    });
   });
 
   describe('handleChange()', function() {
@@ -99,12 +110,18 @@ describe('Aggregation', function() {
         expect(wrapper.instance().state.inputValue).toBe('avg');
         expect(focusSpy).toHaveBeenCalled();
       });
+
+      it('sum', function() {
+        wrapper.instance().handleChange({value: 'sum'});
+        expect(wrapper.instance().state.inputValue).toBe('sum');
+        expect(focusSpy).toHaveBeenCalled();
+      });
     });
 
     describe('handles final selections', function() {
-      const validFinalSelections = ['count', 'avg(col2)', 'uniq(col1)'];
+      const validFinalSelections = ['count', 'avg(col2)', 'uniq(col1)', 'sum(col2)'];
 
-      it('handles count, avg, uniq', function() {
+      it('handles count, avg, uniq, sum', function() {
         validFinalSelections.forEach(function(value) {
           wrapper.instance().handleChange({value});
           expect(wrapper.instance().state.inputValue).toBe(value);
diff --git a/tests/js/spec/views/discover/aggregations/utils.spec.jsx b/tests/js/spec/views/discover/aggregations/utils.spec.jsx
index eef5116da2..261d0d2c7c 100644
--- a/tests/js/spec/views/discover/aggregations/utils.spec.jsx
+++ b/tests/js/spec/views/discover/aggregations/utils.spec.jsx
@@ -27,6 +27,10 @@ const aggregationList = [
     internal: 'uniq(browser.name)',
     external: ['uniq', 'browser.name', 'uniq_browser_name'],
   },
+  {
+    internal: 'sum(device.battery_level)',
+    external: ['sum', 'device.battery_level', 'sum_device_battery_level'],
+  },
 ];
 
 describe('Aggregations', function() {
@@ -73,5 +77,18 @@ describe('Aggregations', function() {
         isValidAggregation(['avg', 'user.email', 'avg_user_email'], COLUMNS)
       ).toEqual(false);
     });
+
+    it('validates sum', function() {
+      expect(
+        isValidAggregation(
+          ['sum', 'device.battery_level', 'sum_device_battery_level'],
+          COLUMNS
+        )
+      ).toEqual(true);
+
+      expect(
+        isValidAggregation(['sum', 'user.email', 'sum_user_email'], COLUMNS)
+      ).toEqual(false);
+    });
   });
 });
