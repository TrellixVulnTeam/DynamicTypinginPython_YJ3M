commit 348f90a66302abe41dce161a437be0a9278baac8
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Fri Jan 10 15:36:29 2020 -0500

    fix(discover2): Use transaction root span only if there are no descendent spans for the ops breakdown (#16377)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
index 830ea7dcab..0cd2f16aba 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
@@ -64,7 +64,22 @@ class OpsBreakdown extends React.Component<Props> {
       (entry: {type: string}) => entry.type === 'spans'
     );
 
-    const spans: RawSpanType[] = get(spanEntry, 'data', []);
+    let spans: RawSpanType[] = get(spanEntry, 'data', []);
+
+    spans =
+      spans.length > 0
+        ? spans
+        : // if there are no descendent spans, then use the transaction root span
+          [
+            {
+              op: traceContext.op,
+              timestamp: event.endTimestamp,
+              start_timestamp: event.startTimestamp,
+              trace_id: traceContext.trace_id || '',
+              span_id: traceContext.span_id || '',
+              data: {},
+            },
+          ];
 
     type AggregateType = {
       [opname: string]: {
@@ -74,16 +89,6 @@ class OpsBreakdown extends React.Component<Props> {
 
     let cumulativeDuration = 0;
 
-    // add the transaction itself as a span
-    spans.push({
-      op: traceContext.op,
-      timestamp: event.endTimestamp,
-      start_timestamp: event.startTimestamp,
-      trace_id: traceContext.trace_id || '',
-      span_id: traceContext.span_id || '',
-      data: {},
-    });
-
     const aggregateByOp: AggregateType = spans.reduce(
       (aggregate: AggregateType, span: RawSpanType) => {
         let op = span.op;
@@ -111,22 +116,6 @@ class OpsBreakdown extends React.Component<Props> {
       {}
     );
 
-    // cumulativeDuration is the cumulative duration sum of the transaction span,
-    // and all of its descendants.
-    // If the cumulative duration sum of the transaction's descendants (excluding the transaction span)
-    // is non-zero, then we can subtract the transaction span's duration away from cumulativeDuration.
-    //
-    // In cases when (cumulativeDuration - transactionDuration) <= 0, this could mean either:
-    // 1. There are no descendants, or
-    // 2. All descendants have durations of 0.
-    //
-    // This change for cumulativeDuration ensures that the duration sum of the transaction
-    // span with respect to cumulativeDuration is at least 100%.
-    const transactionDuration = Math.abs(event.endTimestamp - event.startTimestamp);
-    if (cumulativeDuration - transactionDuration > 0) {
-      cumulativeDuration = cumulativeDuration - transactionDuration;
-    }
-
     const ops = Object.keys(aggregateByOp).map(opName => {
       return {
         name: opName,
