commit 64177defebdf98df7aae15e86187e1ed539a046b
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Dec 13 09:23:44 2018 -0800

    ref(tagstore): Refactor a couple of methods to support multi project/env (#11028)
    
    * ref(tagstore): Refactor get_groups_user_counts to support multi project/env
    
    * ref(tagstore): Refactor get_group_list_tag_value to support multi project/env

diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 9edbb42e3b..e14193535d 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -158,18 +158,18 @@ class GroupSerializer(Serializer):
             project_id = item_list[0].project_id
             item_ids = [g.id for g in item_list]
             user_counts = tagstore.get_groups_user_counts(
-                project_id,
+                [project_id],
                 item_ids,
-                environment_id=environment and environment.id,
+                environment_ids=environment and [environment.id],
             )
             first_seen = {}
             last_seen = {}
             times_seen = {}
             if environment is not None:
                 environment_tagvalues = tagstore.get_group_list_tag_value(
-                    project_id,
+                    [project_id],
                     item_ids,
-                    environment.id,
+                    [environment.id],
                     'environment',
                     environment.name,
                 )
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 7e25fe92a6..ee0737253c 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -430,7 +430,7 @@ class Group(Model):
 
     def count_users_seen(self):
         return tagstore.get_groups_user_counts(
-            self.project_id, [self.id], environment_id=None)[self.id]
+            [self.project_id], [self.id], environment_ids=None)[self.id]
 
     @classmethod
     def calculate_score(cls, times_seen, last_seen):
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index a469df8185..93f10f52af 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -266,9 +266,9 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
+    def get_group_list_tag_value(self, project_ids, group_id_list, environment_ids, key, value):
         """
-        >>> get_group_tag_value(1, [1, 2, 3, 4, 5], 3, "key1", "value1")
+        >>> get_group_tag_value([1, 2], [1, 2, 3, 4, 5], [3], "key1", "value1")
         """
         raise NotImplementedError
 
@@ -351,9 +351,9 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def get_groups_user_counts(self, project_id, group_ids, environment_id):
+    def get_groups_user_counts(self, project_ids, group_ids, environment_ids):
         """
-        >>> get_groups_user_counts(1, [2, 3], 4)
+        >>> get_groups_user_counts([1, 2], [2, 3], [4, 5])
         """
         raise NotImplementedError
 
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index e14e65b41f..96ba5f3b37 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -356,9 +356,9 @@ class LegacyTagStorage(TagStorage):
         from sentry.tagstore.exceptions import GroupTagValueNotFound
 
         value = self.get_group_list_tag_value(
-            project_id,
+            [project_id],
             [group_id],
-            environment_id,
+            [environment_id] if environment_id is not None else environment_id,
             key,
             value,
         ).get(group_id)
@@ -376,7 +376,7 @@ class LegacyTagStorage(TagStorage):
 
         return set(map(transformers[models.GroupTagValue], qs))
 
-    def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
+    def get_group_list_tag_value(self, project_ids, group_id_list, environment_ids, key, value):
         qs = models.GroupTagValue.objects.filter(
             group_id__in=group_id_list,
             key=key,
@@ -498,9 +498,13 @@ class LegacyTagStorage(TagStorage):
 
         return {'id__in': set(matches)}
 
-    def get_groups_user_counts(self, project_id, group_ids, environment_id):
+    def get_groups_user_counts(self, project_ids, group_ids, environment_ids):
+        # only the snuba backend supports multi project
+        if len(project_ids) > 1:
+            raise NotImplementedError
+
         qs = models.GroupTagKey.objects.filter(
-            project_id=project_id,
+            project_id=project_ids[0],
             group_id__in=group_ids,
             key='sentry:user'
         )
@@ -535,7 +539,8 @@ class LegacyTagStorage(TagStorage):
             last_seen__gte=cutoff,
         ).aggregate(t=Sum('times_seen'))['t']
 
-    def get_top_group_tag_values(self, project_id, group_id, environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT):
+    def get_top_group_tag_values(self, project_id, group_id,
+                                 environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT):
         if db.is_postgres():
             # This doesnt guarantee percentage is accurate, but it does ensure
             # that the query has a maximum cost
@@ -688,7 +693,7 @@ class LegacyTagStorage(TagStorage):
             )
 
     def get_tag_value_paginator(self, project_id, environment_id, key, query=None,
-            order_by='-last_seen'):
+                                order_by='-last_seen'):
         from sentry.api.paginator import DateTimePaginator
 
         queryset = models.TagValue.objects.filter(
@@ -715,7 +720,7 @@ class LegacyTagStorage(TagStorage):
         return RangeQuerySetWrapper(queryset=qs, callbacks=callbacks)
 
     def get_group_tag_value_paginator(self, project_id, group_id, environment_id, key,
-            order_by='-id'):
+                                      order_by='-id'):
         from sentry.api.paginator import DateTimePaginator, Paginator
 
         qs = self.get_group_tag_value_qs(project_id, group_id, environment_id, key)
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index 6bfbd674a1..6b8271a147 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -256,15 +256,15 @@ class SnubaTagStorage(TagStorage):
                                                 limit=None, raise_on_empty=False)
         return set(key.top_values)
 
-    def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
+    def get_group_list_tag_value(self, project_ids, group_id_list, environment_ids, key, value):
         start, end = self.get_time_range()
         tag = u'tags[{}]'.format(key)
         filters = {
-            'project_id': [project_id],
+            'project_id': project_ids,
             'issue': group_id_list,
         }
-        if environment_id:
-            filters['environment'] = [environment_id]
+        if environment_ids:
+            filters['environment'] = environment_ids
         conditions = [
             [tag, '=', value]
         ]
@@ -468,14 +468,14 @@ class SnubaTagStorage(TagStorage):
                 )
         return values
 
-    def get_groups_user_counts(self, project_id, group_ids, environment_id):
+    def get_groups_user_counts(self, project_ids, group_ids, environment_ids):
         start, end = self.get_time_range()
         filters = {
-            'project_id': [project_id],
+            'project_id': project_ids,
             'issue': group_ids,
         }
-        if environment_id:
-            filters['environment'] = [environment_id]
+        if environment_ids:
+            filters['environment'] = environment_ids
         aggregations = [['uniq', 'tags[sentry:user]', 'count']]
 
         result = snuba.query(start, end, ['issue'], None, filters, aggregations,
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 1f13058e21..37d47fb6cc 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -536,9 +536,9 @@ class V2TagStorage(TagStorage):
         from sentry.tagstore.exceptions import GroupTagValueNotFound
 
         value = self.get_group_list_tag_value(
-            project_id,
+            [project_id],
             [group_id],
-            environment_id,
+            [environment_id],
             key,
             value,
         ).get(group_id)
@@ -566,17 +566,21 @@ class V2TagStorage(TagStorage):
             )
         )
 
-    def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
+    def get_group_list_tag_value(self, project_ids, group_id_list, environment_ids, key, value):
+        # only the snuba backend supports multi project/env
+        if len(project_ids) > 1 or environment_ids and len(environment_ids) > 1:
+            raise NotImplementedError
+
         qs = models.GroupTagValue.objects.select_related('_key', '_value').filter(
-            project_id=project_id,
+            project_id=project_ids[0],
             group_id__in=group_id_list,
-            _key__project_id=project_id,
+            _key__project_id=project_ids[0],
             _key__key=key,
-            _value__project_id=project_id,
+            _value__project_id=project_ids[0],
             _value__value=value,
         )
 
-        qs = self._add_environment_filter(qs, environment_id)
+        qs = self._add_environment_filter(qs, environment_ids[0])
         t = transformers[models.GroupTagValue]
         return {result.group_id: t(result) for result in qs}
 
@@ -731,15 +735,19 @@ class V2TagStorage(TagStorage):
 
         return {'id__in': set(matches)}
 
-    def get_groups_user_counts(self, project_id, group_ids, environment_id):
+    def get_groups_user_counts(self, project_ids, group_ids, environment_ids):
+        # only the snuba backend supports multi project/env
+        if len(project_ids) > 1 or environment_ids and len(environment_ids) > 1:
+            raise NotImplementedError
+
         qs = models.GroupTagKey.objects.filter(
-            project_id=project_id,
+            project_id=project_ids[0],
             group_id__in=group_ids,
-            _key__project_id=project_id,
+            _key__project_id=project_ids[0],
             _key__key='sentry:user',
         )
 
-        qs = self._add_environment_filter(qs, environment_id)
+        qs = self._add_environment_filter(qs, environment_ids and environment_ids[0])
 
         return defaultdict(int, qs.values_list('group_id', 'values_seen'))
 
@@ -783,7 +791,8 @@ class V2TagStorage(TagStorage):
         qs = self._add_environment_filter(qs, environment_id)
         return qs.aggregate(t=Sum('times_seen'))['t']
 
-    def get_top_group_tag_values(self, project_id, group_id, environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT):
+    def get_top_group_tag_values(self, project_id, group_id,
+                                 environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT):
         if db.is_postgres():
             environment_id = AGGREGATE_ENVIRONMENT_ID if environment_id is None else environment_id
 
diff --git a/tests/sentry/tagstore/v2/test_backend.py b/tests/sentry/tagstore/v2/test_backend.py
index 3eb08168ac..0864e1f1b2 100644
--- a/tests/sentry/tagstore/v2/test_backend.py
+++ b/tests/sentry/tagstore/v2/test_backend.py
@@ -484,9 +484,9 @@ class TagStorage(TestCase):
 
         assert dict(
             self.ts.get_groups_user_counts(
-                self.proj1.id,
+                [self.proj1.id],
                 [self.proj1group1.id, self.proj1group2.id],
-                self.proj1env1.id).items()) == {self.proj1group1.id: 7, self.proj1group2.id: 11}
+                [self.proj1env1.id]).items()) == {self.proj1group1.id: 7, self.proj1group2.id: 11}
 
     def test_get_group_tag_value_count(self):
         v1, _ = self.ts.get_or_create_group_tag_value(
diff --git a/tests/snuba/tagstore/test_tagstore_backend.py b/tests/snuba/tagstore/test_tagstore_backend.py
index 83519e4c43..9c45d25eaa 100644
--- a/tests/snuba/tagstore/test_tagstore_backend.py
+++ b/tests/snuba/tagstore/test_tagstore_backend.py
@@ -230,9 +230,9 @@ class TagStorageTest(SnubaTestCase):
 
     def test_get_groups_user_counts(self):
         assert self.ts.get_groups_user_counts(
-            project_id=self.proj1.id,
+            project_ids=[self.proj1.id],
             group_ids=[self.proj1group1.id, self.proj1group2.id],
-            environment_id=self.proj1env1.id
+            environment_ids=[self.proj1env1.id]
         ) == {
             self.proj1group1.id: 2,
             self.proj1group2.id: 1,
