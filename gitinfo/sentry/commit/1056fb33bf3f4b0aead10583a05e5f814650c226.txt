commit 1056fb33bf3f4b0aead10583a05e5f814650c226
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Thu Jan 10 14:56:16 2019 -0800

    ref(app-platform): change sentry app webhooks schema (#11426)
    
    * ref(app-platform): change sentry app webhook schema

diff --git a/src/sentry/api/serializers/models/app_platform_event.py b/src/sentry/api/serializers/models/app_platform_event.py
index 47952e6acc..f68430dc8b 100644
--- a/src/sentry/api/serializers/models/app_platform_event.py
+++ b/src/sentry/api/serializers/models/app_platform_event.py
@@ -1,11 +1,62 @@
 from __future__ import absolute_import
 
+import six
+from time import time
+from uuid import uuid4
+from sentry.utils import json
 
-def app_platform_event(action, install, data, actor=None):
-    return {
-        'action': action,
-        'installation': {
-            'uuid': install.uuid,
-        },
-        'data': data,
-    }
+
+class AppPlatformEvent(object):
+    def __init__(self, resource, action, install, data, actor=None):
+        self.resource = resource
+        self.action = action
+        self.install = install
+        self.data = data
+        self.actor = actor
+
+    def get_actor(self):
+        # when sentry auto assigns, auto resolves, etc.
+        # or when an alert rule is triggered
+        if not self.actor:
+            return {
+                'type': 'application',
+                'id': 'sentry',
+                'name': 'Sentry',
+            }
+
+        if self.actor.is_sentry_app:
+            return {
+                'type': 'application',
+                'id': self.install.sentry_app.uuid,
+                'name': self.install.sentry_app.name,
+            }
+
+        return {
+            'type': 'user',
+            'id': self.actor.id,
+            'name': self.actor.name,
+        }
+
+    @property
+    def body(self):
+        return {
+            'action': self.action,
+            'installation': {
+                'uuid': self.install.uuid,
+            },
+            'data': self.data,
+            'actor': self.get_actor(),
+        }
+
+    @property
+    def headers(self):
+        body = json.dumps(self.body)
+        request_uuid = uuid4().hex
+
+        return {
+            'Content-Type': 'application/json',
+            'Request-ID': request_uuid,
+            'Sentry-Hook-Resource': self.resource,
+            'Sentry-Hook-Timestamp': six.text_type(int(time())),
+            'Sentry-Hook-Signature': self.install.sentry_app.build_signature(body)
+        }
diff --git a/src/sentry/mediators/sentry_app_installations/installation_notifier.py b/src/sentry/mediators/sentry_app_installations/installation_notifier.py
index d286111604..e7cd1963be 100644
--- a/src/sentry/mediators/sentry_app_installations/installation_notifier.py
+++ b/src/sentry/mediators/sentry_app_installations/installation_notifier.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.api.serializers import SentryAppInstallationSerializer, app_platform_event
+from sentry.api.serializers import SentryAppInstallationSerializer, AppPlatformEvent
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.mediators import Mediator, Param
 from sentry.utils.cache import memoize
@@ -15,19 +15,25 @@ class InstallationNotifier(Mediator):
 
     def _send_webhook(self):
         safe_urlread(
-            safe_urlopen(self.sentry_app.webhook_url, json=self.body, timeout=5)
+            safe_urlopen(
+                url=self.sentry_app.webhook_url,
+                data=self.request.body,
+                headers=self.request.headers,
+                timeout=5,
+            )
         )
 
     @property
-    def body(self):
+    def request(self):
         data = SentryAppInstallationSerializer().serialize(
             self.install,
             attrs={'code': self.api_grant.code},
             user=self.user,
         )
 
-        return app_platform_event(
-            action='installation',
+        return AppPlatformEvent(
+            resource='installation',
+            action='created',
             install=self.install,
             data=data,
             actor=self.user,
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index fdfb2df346..83883da6c6 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -2,11 +2,13 @@ from __future__ import absolute_import
 
 import six
 import uuid
+import hmac
 
 from django.db import models
 from django.db.models import Q
 from django.utils import timezone
 from django.template.defaultfilters import slugify
+from hashlib import sha256
 
 from sentry.constants import SentryAppStatus, SENTRY_APP_SLUG_MAX_LENGTH
 from sentry.models import Organization
@@ -127,3 +129,11 @@ class SentryApp(ParanoidModel, HasApiScopes):
         """
         if not self.slug:
             self.slug = slugify(self.name)
+
+    def build_signature(self, body):
+        secret = self.application.client_secret
+        return hmac.new(
+            key=secret.encode('utf-8'),
+            msg=body.encode('utf-8'),
+            digestmod=sha256,
+        ).hexdigest()
diff --git a/src/sentry/models/signals.py b/src/sentry/models/signals.py
index 70cd52a367..cb9a3669c8 100644
--- a/src/sentry/models/signals.py
+++ b/src/sentry/models/signals.py
@@ -12,6 +12,7 @@ def resource_changed(sender, instance, created, **kwargs):
         from sentry.tasks.servicehooks import process_resource_change
 
         process_resource_change.delay(
+            action='created',
             sender=sender.__name__,
             instance_id=instance.id,
         )
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 1c0a93d91f..343c5aeb25 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -1,63 +1,104 @@
 from __future__ import absolute_import, print_function
 
-import six
-from time import time
+import logging
+
+from django.core.urlresolvers import reverse
 from requests.exceptions import RequestException
 
 from sentry.http import safe_urlopen
 from sentry.tasks.base import instrumented_task, retry
-from sentry.utils import json
 from sentry.utils.http import absolute_uri
-from sentry.models import SentryAppInstallation
-from sentry.api.serializers import serialize, app_platform_event
+from sentry.models import SentryAppInstallation, SentryApp
+from sentry.api.serializers import AppPlatformEvent
 
+logger = logging.Logger('sentry.tasks.sentry_apps')
 
-def notify_sentry_app(event, futures):
-    group = event.group
-    project = group.project
-    project_url_base = absolute_uri(u'/{}/{}'.format(
-        project.organization.slug,
-        project.slug,
-    ))
 
-    event_context = serialize(event)
-    event_context['url'] = u'{}/issues/{}/events/{}/'.format(
-        project_url_base,
-        group.id,
-        event.id,
-    )
-    data = {'event': event_context}
+def notify_sentry_app(event, futures):
     for f in futures:
-        sentry_app = f.kwargs['sentry_app']
-        try:
-            install = SentryAppInstallation.objects.get(
-                organization=event.project.organization_id,
-                sentry_app=sentry_app,
-            )
-        except SentryAppInstallation.DoesNotExist:
+        if not f.kwargs.get('sentry_app'):
             continue
 
-        payload = app_platform_event('alert', install, data)
-        send_alert_event.delay(sentry_app=sentry_app, payload=payload)
+        sentry_app = f.kwargs['sentry_app']
+        send_alert_event.delay(
+            event=event,
+            rule=f.rule.label,
+            sentry_app_id=sentry_app.id,
+        )
 
 
 @instrumented_task(
     name='sentry.tasks.sentry_apps.send_alert_event', default_retry_delay=60 * 5, max_retries=5
 )
 @retry(on=(RequestException, ))
-def send_alert_event(sentry_app, payload):
+def send_alert_event(event, rule, sentry_app_id):
+
+    group = event.group
+    project = group.project
+
+    try:
+        sentry_app = SentryApp.objects.get(id=sentry_app_id)
+    except SentryApp.DoesNotExist:
+        logger.info(
+            'event_alert_webhook.missing_sentry_app',
+            extra={
+                'sentry_app_id': sentry_app_id,
+                'project': project.slug,
+                'organization': project.organization.slug,
+                'rule': rule,
+            },
+        )
+        return
 
-    body = json.dumps(payload)
+    try:
+        install = SentryAppInstallation.objects.get(
+            organization=event.project.organization_id,
+            sentry_app=sentry_app,
+        )
+    except SentryAppInstallation.DoesNotExist:
+        logger.info(
+            'event_alert_webhook.missing_installation',
+            extra={
+                'sentry_app': sentry_app.slug,
+                'project': project.slug,
+                'organization': project.organization.slug,
+                'rule': rule,
+            },
+        )
+        return
+
+    event_context = event.as_dict()
+    event_context['url'] = absolute_uri(reverse('sentry-api-0-project-event-details', args=[
+        project.organization.slug,
+        project.slug,
+        event.id,
+    ]))
+    event_context['web_url'] = absolute_uri(reverse('sentry-group-event', args=[
+        project.organization.slug,
+        project.slug,
+        group.id,
+        event.id,
+    ]))
+    event_context['issue_url'] = absolute_uri(
+        '/api/0/issues/{}/'.format(group.id),
+    )
 
-    headers = {
-        'Content-Type': 'application/json',
-        'X-ServiceHook-Timestamp': six.text_type(int(time())),
-        'X-ServiceHook-GUID': sentry_app.uuid,
+    data = {
+        'event': event_context,
     }
 
+    data['triggered_rule'] = rule
+
+    request_data = AppPlatformEvent(
+        resource='event_alert',
+        action='triggered',
+        install=install,
+        data=data,
+    )
+
     safe_urlopen(
         url=sentry_app.webhook_url,
-        data=body,
-        headers=headers,
+        data=request_data.body,
+        headers=request_data.headers,
         timeout=5,
     )
diff --git a/src/sentry/tasks/servicehooks.py b/src/sentry/tasks/servicehooks.py
index 1a173ee9d1..acbbfef382 100644
--- a/src/sentry/tasks/servicehooks.py
+++ b/src/sentry/tasks/servicehooks.py
@@ -6,7 +6,7 @@ import inspect
 from time import time
 from celery.task import current
 
-from sentry.api.serializers import serialize, app_platform_event
+from sentry.api.serializers import serialize, AppPlatformEvent
 from sentry.http import safe_urlopen
 from sentry.models import Group, SentryAppInstallation, ServiceHook
 from sentry.tasks.base import instrumented_task, retry
@@ -15,7 +15,7 @@ from sentry.utils.http import absolute_uri
 
 # This is an extra, explicit, measure to ensure we only send events for
 # resource changes we deem necessary.
-ALLOWED_ACTIONS = (
+ALLOWED_EVENTS = (
     'issue.created',
 )
 
@@ -38,7 +38,7 @@ TYPES = {
     max_retries=5,
 )
 @retry()
-def process_resource_change(sender, instance_id, *args, **kwargs):
+def process_resource_change(action, sender, instance_id, *args, **kwargs):
     model = None
     name = None
 
@@ -59,9 +59,9 @@ def process_resource_change(sender, instance_id, *args, **kwargs):
         # we hit the max number of retries.
         return current.retry(exc=e)
 
-    action = u'{}.created'.format(name)
+    event = '{}.{}'.format(name, action)
 
-    if action not in ALLOWED_ACTIONS:
+    if event not in ALLOWED_EVENTS:
         return
 
     project = None
@@ -76,19 +76,25 @@ def process_resource_change(sender, instance_id, *args, **kwargs):
         project_id=project.id,
     )
 
-    for servicehook in filter(lambda s: action in s.events, servicehooks):
+    for servicehook in filter(lambda s: event in s.events, servicehooks):
         # For now, these ``post_save`` callbacks are only valid for service
         # hooks created by a Sentry App.
         if not servicehook.created_by_sentry_app:
             continue
 
-        payload = app_platform_event(
-            action,
-            SentryAppInstallation.objects.get(id=servicehook.actor_id),
-            serialize(instance),
+        request_data = AppPlatformEvent(
+            resource=name,
+            action=action,
+            install=SentryAppInstallation.objects.get(id=servicehook.actor_id),
+            data=serialize(instance),
         )
 
-        send_request(servicehook, payload, verify_ssl=True)
+        safe_urlopen(
+            url=servicehook.url,
+            data=request_data.body,
+            headers=request_data.headers,
+            timeout=5,
+        )
 
 
 def send_request(servicehook, payload, verify_ssl=None):
diff --git a/tests/sentry/api/serializers/test_app_platform_event.py b/tests/sentry/api/serializers/test_app_platform_event.py
new file mode 100644
index 0000000000..c397f2c8cc
--- /dev/null
+++ b/tests/sentry/api/serializers/test_app_platform_event.py
@@ -0,0 +1,84 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.api.serializers import AppPlatformEvent
+from sentry.testutils import TestCase
+from sentry.utils import json
+
+
+class AppPlatformEventSerializerTest(TestCase):
+    def setUp(self):
+        self.user = self.create_user(username='foo')
+        self.organization = self.create_organization(owner=self.user)
+        self.sentry_app = self.create_sentry_app(organization=self.organization)
+        self.install = self.create_sentry_app_installation(
+            organization=self.organization,
+            slug=self.sentry_app.slug,
+        )
+
+    def test_no_actor(self):
+        result = AppPlatformEvent(
+            resource='event_alert',
+            action='triggered',
+            install=self.install,
+            data={},
+        )
+        assert result.body == {
+            'action': 'triggered',
+            'installation': {
+                'uuid': self.install.uuid,
+            },
+            'data': {},
+            'actor': {
+                'type': 'application',
+                'id': 'sentry',
+                'name': 'Sentry',
+            }
+        }
+        body = json.dumps(result.body)
+        signature = self.sentry_app.build_signature(body)
+
+        assert result.headers['Content-Type'] == 'application/json'
+        assert result.headers['Sentry-Hook-Resource'] == 'event_alert'
+        assert result.headers['Sentry-Hook-Signature'] == signature
+
+    def test_sentry_app_actor(self):
+        result = AppPlatformEvent(
+            resource='issue',
+            action='assigned',
+            install=self.install,
+            data={},
+            actor=self.sentry_app.proxy_user,
+        )
+        assert result.body['actor'] == {
+            'type': 'application',
+            'id': self.sentry_app.uuid,
+            'name': self.sentry_app.name,
+        }
+        body = json.dumps(result.body)
+        signature = self.sentry_app.build_signature(body)
+
+        assert result.headers['Content-Type'] == 'application/json'
+        assert result.headers['Sentry-Hook-Resource'] == 'issue'
+        assert result.headers['Sentry-Hook-Signature'] == signature
+
+    def test_user_actor(self):
+        result = AppPlatformEvent(
+            resource='installation',
+            action='created',
+            install=self.install,
+            data={},
+            actor=self.user,
+        )
+        assert result.body['actor'] == {
+            'type': 'user',
+            'id': self.user.id,
+            'name': self.user.name,
+        }
+        body = json.dumps(result.body)
+        signature = self.sentry_app.build_signature(body)
+
+        assert result.headers['Content-Type'] == 'application/json'
+        assert result.headers['Sentry-Hook-Resource'] == 'installation'
+        assert result.headers['Sentry-Hook-Signature'] == signature
diff --git a/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py b/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
index 9f3ee63bb0..2f17971adf 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
@@ -5,13 +5,22 @@ from mock import patch
 from sentry.mediators import sentry_apps
 from sentry.mediators.sentry_app_installations import Creator, InstallationNotifier
 from sentry.testutils import TestCase
+from sentry.testutils.helpers.faux import faux
+
+
+class DictContaining(object):
+    def __init__(self, *keys):
+        self.keys = keys
+
+    def __eq__(self, other):
+        return all([k in other.keys() for k in self.keys])
 
 
 class TestInstallationNotifier(TestCase):
     def setUp(self):
         super(TestInstallationNotifier, self).setUp()
 
-        self.user = self.create_user()
+        self.user = self.create_user(name='foo')
         self.org = self.create_organization(owner=self.user)
 
         self.sentry_app = sentry_apps.Creator.run(
@@ -34,24 +43,35 @@ class TestInstallationNotifier(TestCase):
             user=self.user,
         )
 
-        safe_urlopen.assert_called_once_with(
-            'https://example.com',
-            json={
-                'action': 'installation',
-                'installation': {
-                    'uuid': self.install.uuid,
+        data = faux(safe_urlopen).kwargs['data']
+
+        assert data == {
+            'action': 'created',
+            'installation': {
+                'uuid': self.install.uuid,
+            },
+            'data': {
+                'app': {
+                    'uuid': self.sentry_app.uuid,
+                    'slug': self.sentry_app.slug,
                 },
-                'data': {
-                    'app': {
-                        'uuid': self.sentry_app.uuid,
-                        'slug': self.sentry_app.slug,
-                    },
-                    'organization': {
-                        'slug': self.org.slug,
-                    },
-                    'uuid': self.install.uuid,
-                    'code': self.install.api_grant.code,
+                'organization': {
+                    'slug': self.org.slug,
                 },
+                'uuid': self.install.uuid,
+                'code': self.install.api_grant.code,
             },
-            timeout=5,
-        )
+            'actor': {
+                'id': self.user.id,
+                'name': self.user.name,
+                'type': 'user',
+            },
+        }
+
+        assert faux(safe_urlopen).kwarg_equals('headers', DictContaining(
+            'Content-Type',
+            'Request-ID',
+            'Sentry-Hook-Resource',
+            'Sentry-Hook-Timestamp',
+            'Sentry-Hook-Signature',
+        ))
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
new file mode 100644
index 0000000000..4fe0da1607
--- /dev/null
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -0,0 +1,122 @@
+from __future__ import absolute_import
+
+from collections import namedtuple
+from django.core.urlresolvers import reverse
+from mock import patch
+
+from sentry.models import Rule
+from sentry.testutils import TestCase
+from sentry.tasks.sentry_apps import notify_sentry_app
+from sentry.testutils.helpers.faux import faux
+from sentry.utils.http import absolute_uri
+
+RuleFuture = namedtuple('RuleFuture', ['rule', 'kwargs'])
+
+
+class DictContaining(object):
+    def __init__(self, *keys):
+        self.keys = keys
+
+    def __eq__(self, other):
+        return all([k in other.keys() for k in self.keys])
+
+
+class TestSentryAppAlertEvent(TestCase):
+    def setUp(self):
+        self.organization = self.create_organization(slug='foo')
+        self.sentry_app = self.create_sentry_app(organization=self.organization)
+        self.project = self.create_project(organization=self.organization)
+        self.rule = Rule.objects.create(project=self.project, label='Issa Rule')
+        self.install = self.create_sentry_app_installation(
+            organization=self.project.organization,
+            slug=self.sentry_app.slug,
+        )
+
+    @patch('sentry.tasks.sentry_apps.safe_urlopen')
+    def test_no_sentry_app(self, safe_urlopen):
+        group = self.create_group(project=self.project)
+        event = self.create_event(group=group)
+        rule_future = RuleFuture(
+            rule=self.rule,
+            kwargs={},
+        )
+
+        with self.tasks():
+            notify_sentry_app(event, [rule_future])
+
+        assert not safe_urlopen.called
+
+    @patch('sentry.tasks.sentry_apps.safe_urlopen')
+    def test_no_installation(self, safe_urlopen):
+        sentry_app = self.create_sentry_app(
+            organization=self.organization
+        )
+        group = self.create_group(project=self.project)
+        event = self.create_event(group=group)
+        rule_future = RuleFuture(
+            rule=self.rule,
+            kwargs={'sentry_app': sentry_app},
+        )
+
+        with self.tasks():
+            notify_sentry_app(event, [rule_future])
+
+        assert not safe_urlopen.called
+
+    @patch('sentry.tasks.sentry_apps.safe_urlopen')
+    def test_send_alert_event(self, safe_urlopen):
+        group = self.create_group(project=self.project)
+        event = self.create_event(group=group)
+        rule_future = RuleFuture(
+            rule=self.rule,
+            kwargs={'sentry_app': self.sentry_app},
+        )
+
+        event_data = self._get_event_data(event)
+
+        with self.tasks():
+            notify_sentry_app(event, [rule_future])
+
+        data = faux(safe_urlopen).kwargs['data']
+        assert data == {
+            'action': 'triggered',
+            'installation': {
+                'uuid': self.install.uuid,
+            },
+            'data': {
+                'event': event_data,
+                'triggered_rule': self.rule.label,
+            },
+            'actor': {
+                'type': 'application',
+                'id': 'sentry',
+                'name': 'Sentry',
+            }
+        }
+
+        assert faux(safe_urlopen).kwarg_equals('headers', DictContaining(
+            'Content-Type',
+            'Request-ID',
+            'Sentry-Hook-Resource',
+            'Sentry-Hook-Timestamp',
+            'Sentry-Hook-Signature',
+        ))
+
+    def _get_event_data(self, event):
+        group = event.group
+        event_data = event.as_dict()
+        event_data['url'] = absolute_uri(reverse('sentry-api-0-project-event-details', args=[
+            self.organization.slug,
+            self.project.slug,
+            event.id,
+        ]))
+        event_data['web_url'] = absolute_uri(reverse('sentry-group-event', args=[
+            self.organization.slug,
+            self.project.slug,
+            group.id,
+            event.id,
+        ]))
+        event_data['issue_url'] = absolute_uri(
+            '/api/0/issues/{}/'.format(group.id),
+        )
+        return event_data
diff --git a/tests/sentry/tasks/test_servicehooks.py b/tests/sentry/tasks/test_servicehooks.py
index 2e16a90525..d5bcd04a03 100644
--- a/tests/sentry/tasks/test_servicehooks.py
+++ b/tests/sentry/tasks/test_servicehooks.py
@@ -47,17 +47,35 @@ class TestServiceHooks(TestCase):
         with self.tasks():
             issue = self.create_group(project=self.project)
 
-        data = json.loads(faux(safe_urlopen).kwargs['data'])
-        assert data['action'] == 'issue.created'
+        data = faux(safe_urlopen).kwargs['data']
+        assert data['action'] == 'created'
         assert data['installation']['uuid'] == self.install.uuid
         assert data['data']['id'] == six.text_type(issue.id)
         assert faux(safe_urlopen).kwarg_equals('headers', DictContaining(
             'Content-Type',
-            'X-ServiceHook-Timestamp',
-            'X-ServiceHook-GUID',
-            'X-ServiceHook-Signature',
+            'Request-ID',
+            'Sentry-Hook-Resource',
+            'Sentry-Hook-Timestamp',
+            'Sentry-Hook-Signature',
         ))
 
+    @patch('sentry.tasks.servicehooks.safe_urlopen')
+    def test_verify_sentry_hook_signature(self, safe_urlopen):
+        import hmac
+        from hashlib import sha256
+
+        with self.tasks():
+            self.create_group(project=self.project)
+
+        secret = self.install.sentry_app.application.client_secret
+        body = json.dumps(faux(safe_urlopen).kwargs['data'])
+        expected = hmac.new(
+            key=secret.encode('utf-8'),
+            msg=body,
+            digestmod=sha256,
+        ).hexdigest()
+        assert expected == faux(safe_urlopen).kwargs['headers']['Sentry-Hook-Signature']
+
     @patch('sentry.tasks.servicehooks.safe_urlopen')
     def test_non_group_events_dont_send_service_hooks(self, safe_urlopen):
         with self.tasks():
@@ -103,9 +121,9 @@ class TestServiceHooks(TestCase):
         group.update(last_seen=datetime.now())
 
         # Only called once for the create, not also for the update.
-        delay.assert_called_once_with(sender='Group', instance_id=group.id)
+        delay.assert_called_once_with(action='created', sender='Group', instance_id=group.id)
 
     @patch('sentry.tasks.servicehooks.safe_urlopen')
     def test_handles_previous_method_signature(self, safe_urlopen):
         group = self.create_group(project=self.project)
-        process_resource_change(Group, group.id, True)  # Doesn't raise
+        process_resource_change('created', Group, group.id, True)  # Doesn't raise
