commit dd85fbd619d02a122d700346ce1efda62e67e8b0
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Mar 30 18:57:02 2020 -0700

    chore(ts): Convert bootstrap + index (#17984)

diff --git a/src/sentry/static/sentry/app/bootstrap.jsx b/src/sentry/static/sentry/app/bootstrap.tsx
similarity index 93%
rename from src/sentry/static/sentry/app/bootstrap.jsx
rename to src/sentry/static/sentry/app/bootstrap.tsx
index 92d0953bf4..7222049efb 100644
--- a/src/sentry/static/sentry/app/bootstrap.jsx
+++ b/src/sentry/static/sentry/app/bootstrap.tsx
@@ -39,7 +39,11 @@ function getSentryIntegrations() {
   if (window.__SENTRY__USER && window.__SENTRY__USER.isStaff) {
     // eslint-disable-next-line no-console
     console.log('[sentry] Instrumenting session with rrweb');
-    integrations.push(new SentryRRWeb());
+
+    // TODO(ts): The type returned by SentryRRWeb seems to be somewhat
+    // incompatible. It's a newer plugin, so this can be expected, but we
+    // should fix.
+    integrations.push(new SentryRRWeb() as any);
   }
   return integrations;
 }
@@ -81,7 +85,7 @@ jQuery.ajaxSetup({
   beforeSend: ajaxCsrfSetup,
 });
 
-const render = Component => {
+const render = (Component: React.ComponentType) => {
   const rootEl = document.getElementById('blk_router');
 
   try {
@@ -102,7 +106,7 @@ const render = Component => {
 // The password strength component is very heavyweight as it includes the
 // zxcvbn, a relatively byte-heavy password strength estimation library. Load
 // it on demand.
-async function loadPasswordStrength(callback) {
+async function loadPasswordStrength(callback: Function) {
   const module = await import(
     /* webpackChunkName: "passwordStrength" */ 'app/components/passwordStrength'
   );
@@ -133,6 +137,7 @@ const globals = {
 
   // django templates make use of these globals
   createReactClass,
+  SentryApp: {},
 };
 
 // The SentryApp global contains exported app modules for use in javascript
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.tsx
similarity index 93%
rename from src/sentry/static/sentry/app/index.js
rename to src/sentry/static/sentry/app/index.tsx
index 6f7de98ce9..38b24e388e 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.tsx
@@ -2,9 +2,11 @@
 import 'core-js/stable';
 import 'regenerator-runtime/runtime';
 
+import {Config} from 'app/types';
+
 const BOOTSTRAP_URL = '/api/client-config/';
 
-const bootApplication = data => {
+const bootApplication = (data: Config) => {
   const {distPrefix, csrfCookieName, sentryConfig, userIdentity} = data;
 
   // TODO(epurkhiser): Would be great if we could remove some of these from
@@ -23,7 +25,7 @@ const bootApplication = data => {
 
 async function bootWithHydration() {
   const response = await fetch(BOOTSTRAP_URL);
-  const data = await response.json();
+  const data: Config = await response.json();
 
   // XXX(epurkhiser): Currently we only boot with hydration in experimental SPA
   // mode, where assets are *currently not versioned*. We hardcode this here
