commit 1ebb343352ed6323d8a5edc90ebd5b748bef43cd
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri May 17 08:39:16 2019 -0700

    analytics(js): Measure AsyncComponent render times (#10922)
    
    This measures how long it takes AsyncComponent to mount --> (fetch api requests) --> render

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index 0640d58d42..eab9765b67 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -4,16 +4,19 @@ import React from 'react';
 import * as Sentry from '@sentry/browser';
 
 import {Client} from 'app/api';
+import {metric} from 'app/utils/analytics';
 import {t} from 'app/locale';
 import AsyncComponentSearchInput from 'app/components/asyncComponentSearchInput';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import PermissionDenied from 'app/views/permissionDenied';
 import RouteError from 'app/views/routeError';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 export default class AsyncComponent extends React.Component {
   static propTypes = {
     location: PropTypes.object,
+    router: PropTypes.object,
   };
 
   static contextTypes = {
@@ -66,6 +69,13 @@ export default class AsyncComponent extends React.Component {
     this.render = AsyncComponent.errorHandler(this, this.render.bind(this));
 
     this.state = this.getDefaultState();
+
+    this._measurement = {
+      hasMeasured: false,
+    };
+    if (props.router && props.router.routes) {
+      metric.mark(`async-component-${getRouteStringFromRoutes(props.router.routes)}`);
+    }
   }
 
   componentWillMount() {
@@ -99,6 +109,26 @@ export default class AsyncComponent extends React.Component {
       return;
     }
 
+    // Take a measurement from when this component is initially created until it finishes it's first
+    // set of API requests
+    if (
+      !this._measurement.hasMeasured &&
+      this._measurement.finished &&
+      this.props.router &&
+      this.props.router.routes
+    ) {
+      const routeString = getRouteStringFromRoutes(this.props.router.routes);
+      metric.measure({
+        name: 'app.component.async-component',
+        start: `async-component-${routeString}`,
+        data: {
+          route: routeString,
+          error: this._measurement.error,
+        },
+      });
+      this._measurement.hasMeasured = true;
+    }
+
     // Re-fetch data when router params change.
     if (
       !isEqual(this.props.params, prevProps.params) ||
@@ -132,6 +162,14 @@ export default class AsyncComponent extends React.Component {
     return state;
   }
 
+  // Check if we should measure render time for this component
+  markShouldMeasure = ({remainingRequests, error} = {}) => {
+    if (!this._measurement.hasMeasured) {
+      this._measurement.finished = remainingRequests === 0;
+      this._measurement.error = error || this._measurement.error;
+    }
+  };
+
   remountComponent = () => {
     if (this.shouldReload) {
       this.setState(
@@ -222,6 +260,7 @@ export default class AsyncComponent extends React.Component {
         state.remainingRequests = prevState.remainingRequests - 1;
         state.loading = prevState.remainingRequests > 1;
         state.reloading = prevState.reloading && state.loading;
+        this.markShouldMeasure({remainingRequests: state.remainingRequests});
       }
 
       return state;
@@ -251,6 +290,7 @@ export default class AsyncComponent extends React.Component {
       state.remainingRequests = prevState.remainingRequests - 1;
       state.loading = prevState.remainingRequests > 1;
       state.reloading = prevState.reloading && state.loading;
+      this.markShouldMeasure({remainingRequests: state.remainingRequests, error: true});
 
       return state;
     });
diff --git a/src/sentry/static/sentry/app/utils/analytics.jsx b/src/sentry/static/sentry/app/utils/analytics.jsx
index c8e205a301..e5e0deedca 100644
--- a/src/sentry/static/sentry/app/utils/analytics.jsx
+++ b/src/sentry/static/sentry/app/utils/analytics.jsx
@@ -80,6 +80,11 @@ metric.measure = function metricMeasure({name, start, end, data, noCleanup} = {}
     performance.mark(endMarkName);
   }
 
+  // Check if starting mark exists
+  if (!performance.getEntriesByName(start, 'mark').length) {
+    return;
+  }
+
   performance.measure(name, start, endMarkName);
 
   // Retrieve measurement entries
