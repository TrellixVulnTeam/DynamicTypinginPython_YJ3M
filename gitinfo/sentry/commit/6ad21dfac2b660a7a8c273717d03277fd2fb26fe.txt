commit 6ad21dfac2b660a7a8c273717d03277fd2fb26fe
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 16 00:32:34 2013 -0800

    Rebrand origins as Sentry is no longer purely CORS

diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 53a381b668..388581f847 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -41,7 +41,7 @@
                 <div><legend>{% trans "Client Security" %}</legend></div>
                 {% with form.origins as field %}
                     <p>{% blocktrans with 'https://github.com/getsentry/raven-js' as link %}Configure origin URLs which Sentry should accept events from. This is used for communication with clients like <a href="{{ link }}">raven-js</a>.{% endblocktrans %}
-                    <p>{% blocktrans with 'http://en.wikipedia.org/wiki/Cross-origin_resource_sharing' as link %}For more information check out the <a href="{{ link }}">Wikipedia page on CORS</a>.{% endblocktrans %}</p>
+                    <p>{% blocktrans %}This will restrict requests based on the <code>Origin</code> and <code>Referer</code> headers.{% endblocktrans %}</p>
                     {{ field|as_crispy_field }}
                 {% endwith %}
             </fieldset>
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 5116ca4e39..1a6792a43c 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -48,7 +48,9 @@ class UserField(CharField):
 
 class OriginsField(CharField):
     _url_validator = URLValidator(verify_exists=False)
-    widget = Textarea(attrs={'placeholder': mark_safe('e.g. http://example.com<br>*.example.com'), 'class': 'span8'})
+    widget = Textarea(
+        attrs={'placeholder': mark_safe(_('e.g. example.com or https://example.com')), 'class': 'span8'},
+    )
 
     def clean(self, value):
         if not value:
@@ -56,7 +58,7 @@ class OriginsField(CharField):
         values = filter(bool, (v.strip() for v in value.split('\n')))
         for value in values:
             if not self.is_valid_origin(value):
-                raise ValidationError('%r is not an acceptable origin' % value)
+                raise ValidationError('%r is not an acceptable value' % value)
         return values
 
     def is_valid_origin(self, value):
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 0edd6b31dc..6c39d1d54c 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -99,9 +99,11 @@ class RemoveProjectForm(forms.Form):
 
 
 class EditProjectForm(forms.ModelForm):
-    public = forms.BooleanField(required=False, help_text=_('Allow anyone (even anonymous users) to view this project'))
+    public = forms.BooleanField(required=False,
+        help_text=_('Allow anyone (even anonymous users) to view this project'))
     team = forms.TypedChoiceField(choices=(), coerce=int)
-    origins = OriginsField(required=False)
+    origins = OriginsField(label=_('Allowed Domains'), required=False,
+        help_text=_('Separate multiple entries with a newline.'))
 
     class Meta:
         fields = ('name', 'platform', 'public', 'team')
