commit f7acdaa385ab02e0aec72bd835b6273525334c41
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Feb 28 15:56:47 2020 -0800

    chore(lint): Apply `arrow-body-style` `as-needed` fixes (#17262)

diff --git a/src/sentry/static/sentry/app/actionCreators/serviceIncidents.jsx b/src/sentry/static/sentry/app/actionCreators/serviceIncidents.jsx
index 9ece4603e2..de9d42ea63 100644
--- a/src/sentry/static/sentry/app/actionCreators/serviceIncidents.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/serviceIncidents.jsx
@@ -14,9 +14,7 @@ function getIncidentsFromIncidentResponse(incidents) {
     }
     log.push({
       name: item.name,
-      updates: item.incident_updates.map(update => {
-        return update.body;
-      }),
+      updates: item.incident_updates.map(update => update.body),
       url: item.shortlink,
       status: item.status,
     });
diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index 8dae2cfe89..b7dbe1696d 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -83,9 +83,7 @@ export function loadOrganizationTags(api, orgId, selection) {
       method: 'GET',
       query,
     })
-    .then(tags => {
-      return [...BUILTIN_TAGS, ...tags];
-    });
+    .then(tags => [...BUILTIN_TAGS, ...tags]);
 
   promise.then(
     results => {
@@ -117,9 +115,7 @@ export function fetchOrganizationTags(api, orgId, projectIds = null) {
       method: 'GET',
       query,
     })
-    .then(tags => {
-      return [...BUILTIN_TAGS, ...tags];
-    });
+    .then(tags => [...BUILTIN_TAGS, ...tags]);
   promise.then(tagFetchSuccess, TagActions.loadTagsError);
 
   return promise;
diff --git a/src/sentry/static/sentry/app/api.tsx b/src/sentry/static/sentry/app/api.tsx
index 39f4a066a6..f805fb12f5 100644
--- a/src/sentry/static/sentry/app/api.tsx
+++ b/src/sentry/static/sentry/app/api.tsx
@@ -192,8 +192,8 @@ export class Client {
       openSudo({
         superuser: code === SUPERUSER_REQUIRED,
         sudo: code === SUDO_REQUIRED,
-        retryRequest: () => {
-          return this.requestPromise(path, requestOptions)
+        retryRequest: () =>
+          this.requestPromise(path, requestOptions)
             .then(data => {
               if (typeof requestOptions.success !== 'function') {
                 return;
@@ -206,8 +206,7 @@ export class Client {
                 return;
               }
               requestOptions.error(err);
-            });
-        },
+            }),
         onClose: () => {
           if (typeof requestOptions.error !== 'function') {
             return;
@@ -335,13 +334,12 @@ export class Client {
             errorThrown
           );
         },
-        complete: (jqXHR: JQueryXHR, textStatus: string) => {
-          return this.wrapCallback<[JQueryXHR, string]>(
+        complete: (jqXHR: JQueryXHR, textStatus: string) =>
+          this.wrapCallback<[JQueryXHR, string]>(
             id,
             options.complete,
             true
-          )(jqXHR, textStatus);
-        },
+          )(jqXHR, textStatus),
       })
     );
 
@@ -392,9 +390,9 @@ export class Client {
   }
 
   _chain<Args extends any[]>(...funcs: Array<((...args: Args) => any) | undefined>) {
-    const filteredFuncs = funcs.filter((f): f is (...args: Args) => any => {
-      return typeof f === 'function';
-    });
+    const filteredFuncs = funcs.filter(
+      (f): f is (...args: Args) => any => typeof f === 'function'
+    );
     return (...args: Args): void => {
       filteredFuncs.forEach(func => {
         func.apply(funcs, args);
diff --git a/src/sentry/static/sentry/app/components/actions/ignore.jsx b/src/sentry/static/sentry/app/components/actions/ignore.jsx
index 496d0907e8..43e5fa87b9 100644
--- a/src/sentry/static/sentry/app/components/actions/ignore.jsx
+++ b/src/sentry/static/sentry/app/components/actions/ignore.jsx
@@ -151,18 +151,16 @@ export default class IgnoreActions extends React.Component {
                 isNestedDropdown
                 alwaysRenderMenu
               >
-                {this.getIgnoreDurations().map(duration => {
-                  return (
-                    <MenuItem noAnchor key={duration}>
-                      <ActionLink
-                        {...actionLinkProps}
-                        onAction={() => this.onIgnore({ignoreDuration: duration})}
-                      >
-                        <Duration seconds={duration * 60} />
-                      </ActionLink>
-                    </MenuItem>
-                  );
-                })}
+                {this.getIgnoreDurations().map(duration => (
+                  <MenuItem noAnchor key={duration}>
+                    <ActionLink
+                      {...actionLinkProps}
+                      onAction={() => this.onIgnore({ignoreDuration: duration})}
+                    >
+                      <Duration seconds={duration * 60} />
+                    </ActionLink>
+                  </MenuItem>
+                ))}
                 <MenuItem divider />
                 <MenuItem noAnchor>
                   <a onClick={() => this.setState({modal: 'duration'})}>{t('Custom')}</a>
@@ -176,44 +174,40 @@ export default class IgnoreActions extends React.Component {
                 isNestedDropdown
                 alwaysRenderMenu
               >
-                {this.getIgnoreCounts().map(count => {
-                  return (
-                    <li className="dropdown-submenu" key={count}>
-                      <DropdownLink
-                        title={tn('one time\u2026', '%s times\u2026', count)}
-                        caret={false}
-                        isNestedDropdown
-                        alwaysRenderMenu
-                      >
-                        <MenuItem noAnchor>
+                {this.getIgnoreCounts().map(count => (
+                  <li className="dropdown-submenu" key={count}>
+                    <DropdownLink
+                      title={tn('one time\u2026', '%s times\u2026', count)}
+                      caret={false}
+                      isNestedDropdown
+                      alwaysRenderMenu
+                    >
+                      <MenuItem noAnchor>
+                        <ActionLink
+                          {...actionLinkProps}
+                          onAction={() => this.onIgnore({ignoreCount: count})}
+                        >
+                          {t('from now')}
+                        </ActionLink>
+                      </MenuItem>
+                      {this.getIgnoreWindows().map(([hours, label]) => (
+                        <MenuItem noAnchor key={hours}>
                           <ActionLink
                             {...actionLinkProps}
-                            onAction={() => this.onIgnore({ignoreCount: count})}
+                            onAction={() =>
+                              this.onIgnore({
+                                ignoreCount: count,
+                                ignoreWindow: hours,
+                              })
+                            }
                           >
-                            {t('from now')}
+                            {label}
                           </ActionLink>
                         </MenuItem>
-                        {this.getIgnoreWindows().map(([hours, label]) => {
-                          return (
-                            <MenuItem noAnchor key={hours}>
-                              <ActionLink
-                                {...actionLinkProps}
-                                onAction={() =>
-                                  this.onIgnore({
-                                    ignoreCount: count,
-                                    ignoreWindow: hours,
-                                  })
-                                }
-                              >
-                                {label}
-                              </ActionLink>
-                            </MenuItem>
-                          );
-                        })}
-                      </DropdownLink>
-                    </li>
-                  );
-                })}
+                      ))}
+                    </DropdownLink>
+                  </li>
+                ))}
                 <MenuItem divider />
                 <MenuItem noAnchor>
                   <a onClick={() => this.setState({modal: 'count'})}>{t('Custom')}</a>
@@ -227,44 +221,40 @@ export default class IgnoreActions extends React.Component {
                 isNestedDropdown
                 alwaysRenderMenu
               >
-                {this.getIgnoreCounts().map(count => {
-                  return (
-                    <li className="dropdown-submenu" key={count}>
-                      <DropdownLink
-                        title={tn('one user\u2026', '%s users\u2026', count)}
-                        caret={false}
-                        isNestedDropdown
-                        alwaysRenderMenu
-                      >
-                        <MenuItem noAnchor>
+                {this.getIgnoreCounts().map(count => (
+                  <li className="dropdown-submenu" key={count}>
+                    <DropdownLink
+                      title={tn('one user\u2026', '%s users\u2026', count)}
+                      caret={false}
+                      isNestedDropdown
+                      alwaysRenderMenu
+                    >
+                      <MenuItem noAnchor>
+                        <ActionLink
+                          {...actionLinkProps}
+                          onAction={() => this.onIgnore({ignoreUserCount: count})}
+                        >
+                          {t('from now')}
+                        </ActionLink>
+                      </MenuItem>
+                      {this.getIgnoreWindows().map(([hours, label]) => (
+                        <MenuItem noAnchor key={hours}>
                           <ActionLink
                             {...actionLinkProps}
-                            onAction={() => this.onIgnore({ignoreUserCount: count})}
+                            onAction={() =>
+                              this.onIgnore({
+                                ignoreUserCount: count,
+                                ignoreUserWindow: hours,
+                              })
+                            }
                           >
-                            {t('from now')}
+                            {label}
                           </ActionLink>
                         </MenuItem>
-                        {this.getIgnoreWindows().map(([hours, label]) => {
-                          return (
-                            <MenuItem noAnchor key={hours}>
-                              <ActionLink
-                                {...actionLinkProps}
-                                onAction={() =>
-                                  this.onIgnore({
-                                    ignoreUserCount: count,
-                                    ignoreUserWindow: hours,
-                                  })
-                                }
-                              >
-                                {label}
-                              </ActionLink>
-                            </MenuItem>
-                          );
-                        })}
-                      </DropdownLink>
-                    </li>
-                  );
-                })}
+                      ))}
+                    </DropdownLink>
+                  </li>
+                ))}
                 <MenuItem divider />
                 <MenuItem noAnchor>
                   <a onClick={() => this.setState({modal: 'users'})}>{t('Custom')}</a>
diff --git a/src/sentry/static/sentry/app/components/actions/resolve.tsx b/src/sentry/static/sentry/app/components/actions/resolve.tsx
index a5d84d766e..210d1b68e8 100644
--- a/src/sentry/static/sentry/app/components/actions/resolve.tsx
+++ b/src/sentry/static/sentry/app/components/actions/resolve.tsx
@@ -181,17 +181,15 @@ class ResolveActions extends React.Component<Props, State> {
                     <ActionLink
                       {...actionLinkProps}
                       title={t('The next release')}
-                      onAction={() => {
-                        return (
-                          hasRelease &&
-                          onUpdate({
-                            status: ResolutionStatus.RESOLVED,
-                            statusDetails: {
-                              inNextRelease: true,
-                            },
-                          })
-                        );
-                      }}
+                      onAction={() =>
+                        hasRelease &&
+                        onUpdate({
+                          status: ResolutionStatus.RESOLVED,
+                          statusDetails: {
+                            inNextRelease: true,
+                          },
+                        })
+                      }
                     >
                       {t('The next release')}
                     </ActionLink>
@@ -200,17 +198,15 @@ class ResolveActions extends React.Component<Props, State> {
                     <ActionLink
                       {...actionLinkProps}
                       title={t('The current release')}
-                      onAction={() => {
-                        return (
-                          hasRelease &&
-                          onUpdate({
-                            status: ResolutionStatus.RESOLVED,
-                            statusDetails: {
-                              inRelease: latestRelease ? latestRelease.version : 'latest',
-                            },
-                          })
-                        );
-                      }}
+                      onAction={() =>
+                        hasRelease &&
+                        onUpdate({
+                          status: ResolutionStatus.RESOLVED,
+                          statusDetails: {
+                            inRelease: latestRelease ? latestRelease.version : 'latest',
+                          },
+                        })
+                      }
                     >
                       {latestRelease
                         ? t(
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.tsx b/src/sentry/static/sentry/app/components/assigneeSelector.tsx
index 49d9572ed1..0d77d64470 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.tsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.tsx
@@ -180,51 +180,47 @@ const AssigneeSelectorComponent = createReactClass<Props, State>({
     const {size} = this.props;
     const members = putSessionUserFirst(this.memberList());
 
-    return members.map(member => {
-      return {
-        value: {type: 'member', assignee: member},
-        searchKey: `${member.email} ${member.name}`,
-        label: ({inputValue}) => (
-          <MenuItemWrapper
-            data-test-id="assignee-option"
-            key={buildUserId(member.id)}
-            onSelect={this.assignToUser.bind(this, member)}
-          >
-            <IconContainer>
-              <UserAvatar user={member} size={size} />
-            </IconContainer>
-            <Label>
-              <Highlight text={inputValue}>{member.name || member.email}</Highlight>
-            </Label>
-          </MenuItemWrapper>
-        ),
-      };
-    });
+    return members.map(member => ({
+      value: {type: 'member', assignee: member},
+      searchKey: `${member.email} ${member.name}`,
+      label: ({inputValue}) => (
+        <MenuItemWrapper
+          data-test-id="assignee-option"
+          key={buildUserId(member.id)}
+          onSelect={this.assignToUser.bind(this, member)}
+        >
+          <IconContainer>
+            <UserAvatar user={member} size={size} />
+          </IconContainer>
+          <Label>
+            <Highlight text={inputValue}>{member.name || member.email}</Highlight>
+          </Label>
+        </MenuItemWrapper>
+      ),
+    }));
   },
 
   renderNewTeamNodes() {
     const {size} = this.props;
 
-    return this.assignableTeams().map(({id, display, team}) => {
-      return {
-        value: {type: 'team', assignee: team},
-        searchKey: team.slug,
-        label: ({inputValue}) => (
-          <MenuItemWrapper
-            data-test-id="assignee-option"
-            key={id}
-            onSelect={this.assignToTeam.bind(this, team)}
-          >
-            <IconContainer>
-              <TeamAvatar team={team} size={size} />
-            </IconContainer>
-            <Label>
-              <Highlight text={inputValue}>{display}</Highlight>
-            </Label>
-          </MenuItemWrapper>
-        ),
-      };
-    });
+    return this.assignableTeams().map(({id, display, team}) => ({
+      value: {type: 'team', assignee: team},
+      searchKey: team.slug,
+      label: ({inputValue}) => (
+        <MenuItemWrapper
+          data-test-id="assignee-option"
+          key={id}
+          onSelect={this.assignToTeam.bind(this, team)}
+        >
+          <IconContainer>
+            <TeamAvatar team={team} size={size} />
+          </IconContainer>
+          <Label>
+            <Highlight text={inputValue}>{display}</Highlight>
+          </Label>
+        </MenuItemWrapper>
+      ),
+    }));
   },
 
   renderNewDropdownItems() {
@@ -295,18 +291,16 @@ const AssigneeSelectorComponent = createReactClass<Props, State>({
               </InviteMemberLink>
             }
           >
-            {({getActorProps}) => {
-              return (
-                <DropdownButton {...getActorProps({})}>
-                  {assignedTo ? (
-                    <ActorAvatar actor={assignedTo} className="avatar" size={24} />
-                  ) : (
-                    <IconUser src="icon-user" />
-                  )}
-                  <StyledChevron src="icon-chevron-down" />
-                </DropdownButton>
-              );
-            }}
+            {({getActorProps}) => (
+              <DropdownButton {...getActorProps({})}>
+                {assignedTo ? (
+                  <ActorAvatar actor={assignedTo} className="avatar" size={24} />
+                ) : (
+                  <IconUser src="icon-user" />
+                )}
+                <StyledChevron src="icon-chevron-down" />
+              </DropdownButton>
+            )}
           </DropdownAutoComplete>
         )}
       </div>
diff --git a/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx b/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
index 45a16ca87c..c2b9c2e237 100644
--- a/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
@@ -75,9 +75,7 @@ const GuideAnchor = createReactClass({
 
   interpolate(template, variables) {
     const regex = /\${([^{]+)}/g;
-    return template.replace(regex, (_match, g1) => {
-      return variables[g1.trim()];
-    });
+    return template.replace(regex, (_match, g1) => variables[g1.trim()]);
   },
 
   /* Terminology:
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index 6d1ac6dc05..dd1f35c1aa 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -275,12 +275,10 @@ class AutoComplete extends React.Component {
       return;
     }
 
-    this.setState(state => {
-      return {
-        isOpen: false,
-        inputValue: resetInputOnClose ? '' : state.inputValue,
-      };
-    });
+    this.setState(state => ({
+      isOpen: false,
+      inputValue: resetInputOnClose ? '' : state.inputValue,
+    }));
   };
 
   getInputProps = inputProps => ({
diff --git a/src/sentry/static/sentry/app/components/avatar/avatarList.tsx b/src/sentry/static/sentry/app/components/avatar/avatarList.tsx
index 331f90ed7b..5a4a204b5f 100644
--- a/src/sentry/static/sentry/app/components/avatar/avatarList.tsx
+++ b/src/sentry/static/sentry/app/components/avatar/avatarList.tsx
@@ -65,18 +65,16 @@ export default class AvatarList extends React.Component<Props> {
             </CollapsedUsers>
           </Tooltip>
         )}
-        {visibleUsers.map(user => {
-          return (
-            <StyledAvatar
-              key={`${user.id}-${user.email}`}
-              user={user}
-              size={avatarSize}
-              renderTooltip={renderTooltip}
-              tooltipOptions={tooltipOptions}
-              hasTooltip
-            />
-          );
-        })}
+        {visibleUsers.map(user => (
+          <StyledAvatar
+            key={`${user.id}-${user.email}`}
+            user={user}
+            size={avatarSize}
+            renderTooltip={renderTooltip}
+            tooltipOptions={tooltipOptions}
+            hasTooltip
+          />
+        ))}
       </AvatarListWrapper>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/avatar/projectList.tsx b/src/sentry/static/sentry/app/components/avatar/projectList.tsx
index cf9d305e33..848fd19ecd 100644
--- a/src/sentry/static/sentry/app/components/avatar/projectList.tsx
+++ b/src/sentry/static/sentry/app/components/avatar/projectList.tsx
@@ -31,17 +31,15 @@ const ProjectList = ({projects, maxVisibleProjects = 5, avatarSize = 20}: Props)
         </Tooltip>
       )}
 
-      {visibleProjects.map(project => {
-        return (
-          <StyledProjectAvatar
-            project={project}
-            key={project.slug}
-            tooltip={project.slug}
-            size={avatarSize}
-            hasTooltip
-          />
-        );
-      })}
+      {visibleProjects.map(project => (
+        <StyledProjectAvatar
+          project={project}
+          key={project.slug}
+          tooltip={project.slug}
+          size={avatarSize}
+          hasTooltip
+        />
+      ))}
     </ProjectListWrapper>
   );
 };
diff --git a/src/sentry/static/sentry/app/components/avatarCropper.tsx b/src/sentry/static/sentry/app/components/avatarCropper.tsx
index e69ea48f1f..1e960b1f8d 100644
--- a/src/sentry/static/sentry/app/components/avatarCropper.tsx
+++ b/src/sentry/static/sentry/app/components/avatarCropper.tsx
@@ -194,21 +194,14 @@ class AvatarCropper extends React.Component<Props, State> {
 
   // Normalize diff across dimensions so that negative diffs are always making
   // the cropper smaller and positive ones are making the cropper larger
-  getDiffNW = (yDiff: number, xDiff: number) => {
-    return (yDiff - yDiff * 2 + (xDiff - xDiff * 2)) / 2;
-  };
+  getDiffNW = (yDiff: number, xDiff: number) =>
+    (yDiff - yDiff * 2 + (xDiff - xDiff * 2)) / 2;
 
-  getDiffNE = (yDiff: number, xDiff: number) => {
-    return (yDiff - yDiff * 2 + xDiff) / 2;
-  };
+  getDiffNE = (yDiff: number, xDiff: number) => (yDiff - yDiff * 2 + xDiff) / 2;
 
-  getDiffSW = (yDiff: number, xDiff: number) => {
-    return (yDiff + (xDiff - xDiff * 2)) / 2;
-  };
+  getDiffSW = (yDiff: number, xDiff: number) => (yDiff + (xDiff - xDiff * 2)) / 2;
 
-  getDiffSE = (yDiff: number, xDiff: number) => {
-    return (yDiff + xDiff) / 2;
-  };
+  getDiffSE = (yDiff: number, xDiff: number) => (yDiff + xDiff) / 2;
 
   getNewDimensions = (container: HTMLDivElement, yDiff: number, xDiff: number) => {
     const {resizeDimensions: oldDimensions, resizeDirection} = this.state;
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index 92a4e6a4fb..694e199bef 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -30,9 +30,7 @@ class BarChart extends React.Component {
   };
 
   render() {
-    const points = this.props.points.map(point => {
-      return {x: point.x, y: [point.y]};
-    });
+    const points = this.props.points.map(point => ({x: point.x, y: [point.y]}));
     const props = Object.assign({}, this.props, {points});
     return <StackedBarChart {...props} />;
   }
diff --git a/src/sentry/static/sentry/app/components/charts/barChart.jsx b/src/sentry/static/sentry/app/components/charts/barChart.jsx
index 5db6136f89..cf14458da8 100644
--- a/src/sentry/static/sentry/app/components/charts/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/barChart.jsx
@@ -15,13 +15,13 @@ export default class BarChart extends React.Component {
       <BaseChart
         {...props}
         xAxis={xAxis !== null ? {...(xAxis || {}), boundaryGap: true} : null}
-        series={series.map((s, i) => {
-          return BarSeries({
+        series={series.map((s, i) =>
+          BarSeries({
             name: s.seriesName,
             stack: stacked ? 'stack1' : null,
             data: s.data.map(({value, name}) => [name, value]),
-          });
-        })}
+          })
+        )}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/components/charts/components/legend.jsx b/src/sentry/static/sentry/app/components/charts/components/legend.jsx
index 7ce3527866..fb72cb3d87 100644
--- a/src/sentry/static/sentry/app/components/charts/components/legend.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/legend.jsx
@@ -3,9 +3,7 @@ import 'echarts/lib/component/legendScroll';
 import {truncationFormatter} from '../utils';
 
 export default function Legend({truncate, ...props} = {}) {
-  const formatter = value => {
-    return truncationFormatter(value, truncate);
-  };
+  const formatter = value => truncationFormatter(value, truncate);
 
   return {
     show: true,
diff --git a/src/sentry/static/sentry/app/components/charts/lineChart.jsx b/src/sentry/static/sentry/app/components/charts/lineChart.jsx
index 9929660e0b..6c0eca24ae 100644
--- a/src/sentry/static/sentry/app/components/charts/lineChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/lineChart.jsx
@@ -16,14 +16,14 @@ export default class LineChart extends React.Component {
     return (
       <BaseChart
         {...props}
-        series={series.map(({seriesName, data, dataArray, ...options}) => {
-          return LineSeries({
+        series={series.map(({seriesName, data, dataArray, ...options}) =>
+          LineSeries({
             ...seriesOptions,
             ...options,
             name: seriesName,
             data: dataArray || data.map(({value, name}) => [name, value]),
-          });
-        })}
+          })
+        )}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx b/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
index fd3ddc897f..5927f864ae 100644
--- a/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
@@ -33,9 +33,10 @@ export default class PercentageAreaChart extends React.Component {
     const {series, getDataItemName, getValue} = this.props;
 
     const totalsArray = series.length
-      ? series[0].data.map(({name}, i) => {
-          return [name, series.reduce((sum, {data}) => sum + data[i].value, 0)];
-        })
+      ? series[0].data.map(({name}, i) => [
+          name,
+          series.reduce((sum, {data}) => sum + data[i].value, 0),
+        ])
       : [];
     const totals = new Map(totalsArray);
     return [
diff --git a/src/sentry/static/sentry/app/components/charts/pieChart.jsx b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
index 75b3025650..df4a844652 100644
--- a/src/sentry/static/sentry/app/components/charts/pieChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
@@ -146,13 +146,12 @@ class PieChart extends React.Component {
             left: 10,
             top: 10,
             bottom: 10,
-            formatter: name => {
-              return `${name} ${
+            formatter: name =>
+              `${name} ${
                 typeof seriesPercentages[name] !== 'undefined'
                   ? `(${seriesPercentages[name]}%)`
                   : ''
-              }`;
-            },
+              }`,
           }),
         }}
         series={[
@@ -162,9 +161,7 @@ class PieChart extends React.Component {
             avoidLabelOverlap: false,
             label: {
               normal: {
-                formatter: ({name, percent, dataIndex}) => {
-                  return `${name}\n${percent}%`;
-                },
+                formatter: ({name, percent, dataIndex}) => `${name}\n${percent}%`,
                 show: false,
                 position: 'center',
               },
diff --git a/src/sentry/static/sentry/app/components/charts/tableChart.jsx b/src/sentry/static/sentry/app/components/charts/tableChart.jsx
index 8847ccebe5..78334e172d 100644
--- a/src/sentry/static/sentry/app/components/charts/tableChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/tableChart.jsx
@@ -121,54 +121,52 @@ export const TableChart = styled(
         rowTotalWidth,
         widths,
         ...props
-      }) => {
-        return (
-          <Row>
+      }) => (
+        <Row>
+          {items &&
+            items.slice(0, dataStartIndex).map((rowHeaderValue, columnIndex) =>
+              renderCell({
+                isTableHeader,
+                isHeader: true,
+                value: rowHeaderValue,
+                columnIndex,
+                rowIndex,
+                width:
+                  columnIndex < widths.length
+                    ? widths[columnIndex]
+                    : showRowTotal
+                    ? rowTotalWidth
+                    : null,
+                showRowTotal,
+                ...props,
+              })
+            )}
+
+          <DataGroup>
             {items &&
-              items.slice(0, dataStartIndex).map((rowHeaderValue, columnIndex) =>
-                renderCell({
+              items.slice(dataStartIndex).map((rowDataValue, columnIndex) => {
+                const index = columnIndex + dataStartIndex;
+                const renderCellProps = {
                   isTableHeader,
-                  isHeader: true,
-                  value: rowHeaderValue,
-                  columnIndex,
+                  value: rowDataValue,
+                  columnIndex: index,
                   rowIndex,
                   width:
-                    columnIndex < widths.length
-                      ? widths[columnIndex]
+                    index < widths.length
+                      ? widths[index]
                       : showRowTotal
                       ? rowTotalWidth
                       : null,
+                  justify: 'right',
                   showRowTotal,
                   ...props,
-                })
-              )}
-
-            <DataGroup>
-              {items &&
-                items.slice(dataStartIndex).map((rowDataValue, columnIndex) => {
-                  const index = columnIndex + dataStartIndex;
-                  const renderCellProps = {
-                    isTableHeader,
-                    value: rowDataValue,
-                    columnIndex: index,
-                    rowIndex,
-                    width:
-                      index < widths.length
-                        ? widths[index]
-                        : showRowTotal
-                        ? rowTotalWidth
-                        : null,
-                    justify: 'right',
-                    showRowTotal,
-                    ...props,
-                  };
-
-                  return renderCell(renderCellProps);
-                })}
-            </DataGroup>
-          </Row>
-        );
-      };
+                };
+
+                return renderCell(renderCellProps);
+              })}
+          </DataGroup>
+        </Row>
+      );
 
       // Default renderer for ALL cells
       const defaultRenderCell = p => {
diff --git a/src/sentry/static/sentry/app/components/charts/worldMapChart.jsx b/src/sentry/static/sentry/app/components/charts/worldMapChart.jsx
index 02546cc8ad..ec1903ba13 100644
--- a/src/sentry/static/sentry/app/components/charts/worldMapChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/worldMapChart.jsx
@@ -44,8 +44,8 @@ export default class WorldMapChart extends React.Component {
     }
 
     const {series, seriesOptions, ...props} = this.props;
-    const processedSeries = series.map(({seriesName, data, ...options}) => {
-      return MapSeries({
+    const processedSeries = series.map(({seriesName, data, ...options}) =>
+      MapSeries({
         ...seriesOptions,
         ...options,
         mapType: 'world',
@@ -69,8 +69,8 @@ export default class WorldMapChart extends React.Component {
           },
         },
         data,
-      });
-    });
+      })
+    );
 
     // TODO(billy):
     // For absolute values, we want min/max to based on min/max of series
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
index 478b8c731c..1b23515217 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -185,22 +185,19 @@ class DropdownAutoCompleteMenu extends React.Component {
   };
 
   filterItems = (items, inputValue) =>
-    items.filter(item => {
-      return (
+    items.filter(
+      item =>
         (item.searchKey || `${item.value} ${item.label}`)
           .toLowerCase()
           .indexOf(inputValue.toLowerCase()) > -1
-      );
-    });
+    );
 
   filterGroupedItems = (groups, inputValue) =>
     groups
-      .map(group => {
-        return {
-          ...group,
-          items: this.filterItems(group.items, inputValue),
-        };
-      })
+      .map(group => ({
+        ...group,
+        items: this.filterItems(group.items, inputValue),
+      }))
       .filter(group => group.items.length > 0);
 
   autoCompleteFilter = (items, inputValue) => {
@@ -257,11 +254,11 @@ class DropdownAutoCompleteMenu extends React.Component {
               height={this.getHeight(items)}
               onScroll={onScroll}
               rowCount={items.length}
-              rowHeight={({index}) => {
-                return items[index].groupLabel && virtualizedLabelHeight
+              rowHeight={({index}) =>
+                items[index].groupLabel && virtualizedLabelHeight
                   ? virtualizedLabelHeight
-                  : virtualizedHeight;
-              }}
+                  : virtualizedHeight
+              }
               rowRenderer={({key, index, style}) => {
                 const item = items[index];
                 return this.renderRow({
diff --git a/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx b/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
index e060723783..f507a06798 100644
--- a/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
@@ -86,16 +86,14 @@ class EventOrGroupExtraDetails extends React.Component {
           </LoggerAnnotation>
         )}
         {annotations &&
-          annotations.map((annotation, key) => {
-            return (
-              <AnnotationNoMargin
-                dangerouslySetInnerHTML={{
-                  __html: annotation,
-                }}
-                key={key}
-              />
-            );
-          })}
+          annotations.map((annotation, key) => (
+            <AnnotationNoMargin
+              dangerouslySetInnerHTML={{
+                __html: annotation,
+              }}
+              key={key}
+            />
+          ))}
 
         {showAssignee && assignedTo && (
           <div>{tct('Assigned to [name]', {name: assignedTo.name})}</div>
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx b/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx
index 3f17364b5e..c02b43232d 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx
@@ -32,9 +32,7 @@ const User = ({data}: Props) => {
     return null;
   }
 
-  const getKeyValueData = (val: object) => {
-    return Object.keys(val).map(key => [key, val[key]]);
-  };
+  const getKeyValueData = (val: object) => Object.keys(val).map(key => [key, val[key]]);
 
   return (
     <div className="user-widget">
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
index 72089720e5..d1312946e1 100644
--- a/src/sentry/static/sentry/app/components/events/errors.jsx
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -33,9 +33,7 @@ class EventErrors extends React.Component {
     this.setState({isOpen: !this.state.isOpen});
   };
 
-  uniqueErrors = errors => {
-    return uniqWith(errors, isEqual);
-  };
+  uniqueErrors = errors => uniqWith(errors, isEqual);
 
   render() {
     const eventErrors = this.props.event.errors;
@@ -63,9 +61,9 @@ class EventErrors extends React.Component {
           data-test-id="event-error-details"
           style={{display: isOpen ? 'block' : 'none'}}
         >
-          {errors.map((error, errorIdx) => {
-            return <EventErrorItem key={errorIdx} error={error} />;
-          })}
+          {errors.map((error, errorIdx) => (
+            <EventErrorItem key={errorIdx} error={error} />
+          ))}
         </ErrorList>
       </StyledBanner>
     );
diff --git a/src/sentry/static/sentry/app/components/events/eventAttachments.tsx b/src/sentry/static/sentry/app/components/events/eventAttachments.tsx
index da81cc4ad7..fe8855a532 100644
--- a/src/sentry/static/sentry/app/components/events/eventAttachments.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventAttachments.tsx
@@ -82,13 +82,11 @@ class EventAttachments extends React.Component<Props, State> {
   }
 
   handleDelete = async (deletedAttachmentId: string) => {
-    this.setState(prevState => {
-      return {
-        attachmentList: prevState.attachmentList.filter(
-          attachment => attachment.id !== deletedAttachmentId
-        ),
-      };
-    });
+    this.setState(prevState => ({
+      attachmentList: prevState.attachmentList.filter(
+        attachment => attachment.id !== deletedAttachmentId
+      ),
+    }));
   };
 
   render() {
@@ -103,27 +101,25 @@ class EventAttachments extends React.Component<Props, State> {
       <EventDataSection type="attachments" title={title}>
         <Panel>
           <PanelBody>
-            {attachmentList.map(attachment => {
-              return (
-                <PanelItem key={attachment.id} alignItems="center">
-                  <AttachmentName>{attachment.name}</AttachmentName>
-                  <FileSizeWithGap bytes={attachment.size} />
-                  <AttachmentUrl
-                    projectId={projectId}
-                    eventId={event.id}
-                    attachment={attachment}
-                  >
-                    {url => (
-                      <EventAttachmentActions
-                        url={url}
-                        onDelete={this.handleDelete}
-                        attachmentId={attachment.id}
-                      />
-                    )}
-                  </AttachmentUrl>
-                </PanelItem>
-              );
-            })}
+            {attachmentList.map(attachment => (
+              <PanelItem key={attachment.id} alignItems="center">
+                <AttachmentName>{attachment.name}</AttachmentName>
+                <FileSizeWithGap bytes={attachment.size} />
+                <AttachmentUrl
+                  projectId={projectId}
+                  eventId={event.id}
+                  attachment={attachment}
+                >
+                  {url => (
+                    <EventAttachmentActions
+                      url={url}
+                      onDelete={this.handleDelete}
+                      attachmentId={attachment.id}
+                    />
+                  )}
+                </AttachmentUrl>
+              </PanelItem>
+            ))}
           </PanelBody>
         </Panel>
       </EventDataSection>
diff --git a/src/sentry/static/sentry/app/components/events/eventCause.jsx b/src/sentry/static/sentry/app/components/events/eventCause.jsx
index e657974e67..60087571c6 100644
--- a/src/sentry/static/sentry/app/components/events/eventCause.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventCause.jsx
@@ -115,9 +115,9 @@ class EventCause extends React.Component {
           )}
         </CauseHeader>
         <Panel>
-          {commits.slice(0, expanded ? 100 : 1).map(commit => {
-            return <CommitRow key={commit.id} commit={commit} />;
-          })}
+          {commits.slice(0, expanded ? 100 : 1).map(commit => (
+            <CommitRow key={commit.id} commit={commit} />
+          ))}
         </Panel>
       </DataSection>
     );
diff --git a/src/sentry/static/sentry/app/components/events/eventMessage.tsx b/src/sentry/static/sentry/app/components/events/eventMessage.tsx
index 8446db4746..3556d1a08d 100644
--- a/src/sentry/static/sentry/app/components/events/eventMessage.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventMessage.tsx
@@ -21,19 +21,17 @@ const EventMessage = ({
   levelIndicatorSize,
   message,
   annotations,
-}: Props) => {
-  return (
-    <div className={className}>
-      {level && (
-        <StyledErrorLevel size={levelIndicatorSize} level={level}>
-          {level}
-        </StyledErrorLevel>
-      )}
-      {message && <Message>{message}</Message>}
-      {annotations}
-    </div>
-  );
-};
+}: Props) => (
+  <div className={className}>
+    {level && (
+      <StyledErrorLevel size={levelIndicatorSize} level={level}>
+        {level}
+      </StyledErrorLevel>
+    )}
+    {message && <Message>{message}</Message>}
+    {annotations}
+  </div>
+);
 
 EventMessage.propTypes = {
   level: PropTypes.oneOf(['error', 'fatal', 'info', 'warning', 'sample']),
diff --git a/src/sentry/static/sentry/app/components/events/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
index 19e96a6fea..9937e64a89 100644
--- a/src/sentry/static/sentry/app/components/events/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -48,13 +48,11 @@ class EventRow extends React.Component {
             <Link to={eventLink}>{event.title || event.message}</Link>
           </h5>
           <small className="tagList">
-            {tagList.map(tag => {
-              return (
-                <span key={tag[0]}>
-                  {tag[0]} = {tag[1]}{' '}
-                </span>
-              );
-            })}
+            {tagList.map(tag => (
+              <span key={tag[0]}>
+                {tag[0]} = {tag[1]}{' '}
+              </span>
+            ))}
           </small>
         </td>
         <td className="event-user table-user-info">
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
index d7d13a077e..8b976e07b9 100644
--- a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
@@ -256,12 +256,10 @@ class GroupingConfigSelect extends AsyncComponent {
         selectedItem={configId}
         items={this.state.data
           .filter(item => !item.hidden || item.id === eventConfigId)
-          .map(item => {
-            return {
-              value: item.id,
-              label: renderIdLabel(item.id),
-            };
-          })}
+          .map(item => ({
+            value: item.id,
+            label: renderIdLabel(item.id),
+          }))}
       >
         {({isOpen}) => (
           <Tooltip title="Click here to experiment with other grouping configs">
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx b/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
index 269db96459..3c13dc6f9d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
@@ -16,36 +16,34 @@ interface Props {
   filePath: string | null;
 }
 
-const Assembly = ({name, version, culture, publicKeyToken, filePath}: Props) => {
-  return (
-    <AssemblyWrapper>
-      <Icon src="icon-return-key" />
-      <AssemblyInfo>
-        <Caption>Assembly:</Caption>
-        {name || '-'}
-      </AssemblyInfo>
-      <AssemblyInfo>
-        <Caption>{t('Version')}:</Caption>
-        {version || '-'}
-      </AssemblyInfo>
-      <AssemblyInfo>
-        <Caption>{t('Culture')}:</Caption>
-        {culture || '-'}
-      </AssemblyInfo>
-      <AssemblyInfo>
-        <Caption>PublicKeyToken:</Caption>
-        {publicKeyToken || '-'}
-      </AssemblyInfo>
+const Assembly = ({name, version, culture, publicKeyToken, filePath}: Props) => (
+  <AssemblyWrapper>
+    <Icon src="icon-return-key" />
+    <AssemblyInfo>
+      <Caption>Assembly:</Caption>
+      {name || '-'}
+    </AssemblyInfo>
+    <AssemblyInfo>
+      <Caption>{t('Version')}:</Caption>
+      {version || '-'}
+    </AssemblyInfo>
+    <AssemblyInfo>
+      <Caption>{t('Culture')}:</Caption>
+      {culture || '-'}
+    </AssemblyInfo>
+    <AssemblyInfo>
+      <Caption>PublicKeyToken:</Caption>
+      {publicKeyToken || '-'}
+    </AssemblyInfo>
 
-      {filePath && (
-        <FilePathInfo>
-          <Caption>{t('Path')}:</Caption>
-          <TextCopyInput>{filePath}</TextCopyInput>
-        </FilePathInfo>
-      )}
-    </AssemblyWrapper>
-  );
-};
+    {filePath && (
+      <FilePathInfo>
+        <Caption>{t('Path')}:</Caption>
+        <TextCopyInput>{filePath}</TextCopyInput>
+      </FilePathInfo>
+    )}
+  </AssemblyWrapper>
+);
 
 // TODO(ts): we should be able to delete these after disabling react/prop-types rule in tsx functional components
 Assembly.propTypes = {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index 14215b96d9..c3b63aea2d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -65,27 +65,22 @@ class BreadcrumbsInterface extends React.Component {
     });
   };
 
-  renderBreadcrumbs = crumbs => {
+  renderBreadcrumbs = crumbs =>
     // reverse array to get consistent idx between collapsed/expanded state
     // (indexes begin and increment from last breadcrumb)
-    return crumbs
+    crumbs
       .reverse()
-      .map((item, idx) => {
-        return <Breadcrumb key={idx} crumb={item} />;
-      })
+      .map((item, idx) => <Breadcrumb key={idx} crumb={item} />)
       .reverse(); // un-reverse rendered result
-  };
 
-  renderNoMatch = () => {
-    return (
-      <li className="crumb-empty">
-        <p>
-          <span className="icon icon-exclamation" />{' '}
-          {t('Sorry, no breadcrumbs match your search query.')}
-        </p>
-      </li>
-    );
-  };
+  renderNoMatch = () => (
+    <li className="crumb-empty">
+      <p>
+        <span className="icon icon-exclamation" />{' '}
+        {t('Sorry, no breadcrumbs match your search query.')}
+      </p>
+    </li>
+  );
 
   getVirtualCrumb = () => {
     const evt = this.props.event;
@@ -130,15 +125,15 @@ class BreadcrumbsInterface extends React.Component {
     });
   };
 
-  filterCrumbs = (crumbs, queryValue) => {
-    return crumbs.filter(item => {
-      // return true if any of category, message, or level contain queryValue
-      return !!['category', 'message', 'level'].find(prop => {
-        const propValue = (item[prop] || '').toLowerCase();
-        return propValue.includes(queryValue);
-      });
-    });
-  };
+  filterCrumbs = (crumbs, queryValue) =>
+    crumbs.filter(
+      item =>
+        // return true if any of category, message, or level contain queryValue
+        !!['category', 'message', 'level'].find(prop => {
+          const propValue = (item[prop] || '').toLowerCase();
+          return propValue.includes(queryValue);
+        })
+    );
 
   clearSearch = () => {
     this.setState({
@@ -147,28 +142,26 @@ class BreadcrumbsInterface extends React.Component {
     });
   };
 
-  getSearchField = () => {
-    return (
-      <div className="breadcrumb-filter">
-        <input
-          type="text"
-          className="search-input form-control"
-          placeholder={t('Search breadcrumbs...')}
-          autoComplete="off"
-          value={this.state.queryValue}
-          onChange={this.setQuery}
-        />
-        <span className="icon-search" />
-        {this.state.queryValue && (
-          <div>
-            <a className="search-clear-form" onClick={this.clearSearch}>
-              <span className="icon-circle-cross" />
-            </a>
-          </div>
-        )}
-      </div>
-    );
-  };
+  getSearchField = () => (
+    <div className="breadcrumb-filter">
+      <input
+        type="text"
+        className="search-input form-control"
+        placeholder={t('Search breadcrumbs...')}
+        autoComplete="off"
+        value={this.state.queryValue}
+        onChange={this.setQuery}
+      />
+      <span className="icon-search" />
+      {this.state.queryValue && (
+        <div>
+          <a className="search-clear-form" onClick={this.clearSearch}>
+            <span className="icon-circle-cross" />
+          </a>
+        </div>
+      )}
+    </div>
+  );
 
   render() {
     const evt = this.props.event;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 5a209309be..caf92fd17c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -30,9 +30,7 @@ class ExceptionInterface extends React.Component {
     };
   }
 
-  eventHasThreads = () => {
-    return !!this.props.event.entries.find(x => x.type === 'threads');
-  };
+  eventHasThreads = () => !!this.props.event.entries.find(x => x.type === 'threads');
 
   render() {
     const {projectId, event, data, hideGuide, type} = this.props;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index faa50b9076..cebe804591 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -19,43 +19,41 @@ class ExceptionContent extends React.Component {
 
   render() {
     const {newestFirst, event, view: stackView, platform, values} = this.props;
-    const children = values.map((exc, excIdx) => {
-      return (
-        <div key={excIdx} className="exception">
-          <h5 className="break-word" style={{marginBottom: 5}}>
-            <span>{exc.type}</span>
-          </h5>
+    const children = values.map((exc, excIdx) => (
+      <div key={excIdx} className="exception">
+        <h5 className="break-word" style={{marginBottom: 5}}>
+          <span>{exc.type}</span>
+        </h5>
 
-          <Annotated object={exc} objectKey="value" required>
-            {value => (
-              <pre className="exc-message" style={{marginTop: 0}}>
-                {value}
-              </pre>
-            )}
-          </Annotated>
-
-          {exc.mechanism && (
-            <ExceptionMechanism data={exc.mechanism} platform={this.props.platform} />
-          )}
-          {defined(exc.stacktrace) && (
-            <StacktraceContent
-              data={
-                this.props.type === 'original'
-                  ? exc.stacktrace
-                  : exc.rawStacktrace || exc.stacktrace
-              }
-              expandFirstFrame={
-                platform === 'csharp' ? excIdx === values.length - 1 : excIdx === 0
-              }
-              includeSystemFrames={stackView === 'full'}
-              platform={this.props.platform}
-              newestFirst={newestFirst}
-              event={event}
-            />
+        <Annotated object={exc} objectKey="value" required>
+          {value => (
+            <pre className="exc-message" style={{marginTop: 0}}>
+              {value}
+            </pre>
           )}
-        </div>
-      );
-    });
+        </Annotated>
+
+        {exc.mechanism && (
+          <ExceptionMechanism data={exc.mechanism} platform={this.props.platform} />
+        )}
+        {defined(exc.stacktrace) && (
+          <StacktraceContent
+            data={
+              this.props.type === 'original'
+                ? exc.stacktrace
+                : exc.rawStacktrace || exc.stacktrace
+            }
+            expandFirstFrame={
+              platform === 'csharp' ? excIdx === values.length - 1 : excIdx === 0
+            }
+            includeSystemFrames={stackView === 'full'}
+            platform={this.props.platform}
+            newestFirst={newestFirst}
+            event={event}
+          />
+        )}
+      </div>
+    ));
     if (newestFirst) {
       children.reverse();
     }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
index b9c61b9ece..c3959cdac6 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
@@ -26,9 +26,7 @@ class frameRegistersValue extends React.Component<Props, State> {
     this.setState(state => ({view: (state.view + 1) % REGISTER_VIEWS.length}));
   };
 
-  tooltipTitle = () => {
-    return REGISTER_VIEWS[this.state.view];
-  };
+  tooltipTitle = () => REGISTER_VIEWS[this.state.view];
 
   formatValue = () => {
     const value = this.props.value;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
index c1f857420f..7d0195873a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
@@ -12,19 +12,17 @@ type Props = {
   onShowAllImages: () => void;
 };
 
-const ImageForBar = ({frame, onShowAllImages}: Props) => {
-  return (
-    <Wrapper>
-      <MatchedFunctionWrapper>
-        <MatchedFunctionCaption>{t('Image for: ')}</MatchedFunctionCaption>
-        <FrameFunctionName frame={frame} />
-      </MatchedFunctionWrapper>
-      <ResetAddressFilterCaption onClick={onShowAllImages}>
-        {t('Show all images')}
-      </ResetAddressFilterCaption>
-    </Wrapper>
-  );
-};
+const ImageForBar = ({frame, onShowAllImages}: Props) => (
+  <Wrapper>
+    <MatchedFunctionWrapper>
+      <MatchedFunctionCaption>{t('Image for: ')}</MatchedFunctionCaption>
+      <FrameFunctionName frame={frame} />
+    </MatchedFunctionWrapper>
+    <ResetAddressFilterCaption onClick={onShowAllImages}>
+      {t('Show all images')}
+    </ResetAddressFilterCaption>
+  </Wrapper>
+);
 
 ImageForBar.propTypes = {
   frame: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index 427d837fc3..9a6ebe786d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -32,12 +32,11 @@ class RequestInterface extends React.Component {
     };
   }
 
-  isPartial = () => {
+  isPartial = () =>
     // We assume we only have a partial interface is we're missing
     // an HTTP method. This means we don't have enough information
     // to reliably construct a full HTTP request.
-    return !this.props.data.method || !this.props.data.url;
-  };
+    !this.props.data.method || !this.props.data.url;
 
   toggleView = value => {
     this.setState({
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/cursorGuideHandler.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/cursorGuideHandler.tsx
index 6d67f666bf..9a4d5184d4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/cursorGuideHandler.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/cursorGuideHandler.tsx
@@ -45,9 +45,7 @@ export class Provider extends React.Component<PropType, StateType> {
     traceViewMouseLeft: void 0,
   };
 
-  hasInteractiveLayer = (): boolean => {
-    return !!this.props.interactiveLayerRef.current;
-  };
+  hasInteractiveLayer = (): boolean => !!this.props.interactiveLayerRef.current;
 
   displayCursorGuide = (mousePageX: number) => {
     if (!this.hasInteractiveLayer()) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
index e18c0c36b6..7cd0ce7472 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
@@ -38,12 +38,8 @@ const DividerManagerContext = React.createContext<DividerHandlerManagerChildrenP
   dividerPosition: DEFAULT_DIVIDER_POSITION,
   onDragStart: () => {},
   setHover: () => {},
-  addDividerLineRef: () => {
-    return React.createRef<HTMLDivElement>();
-  },
-  addGhostDividerLineRef: () => {
-    return React.createRef<HTMLDivElement>();
-  },
+  addDividerLineRef: () => React.createRef<HTMLDivElement>(),
+  addGhostDividerLineRef: () => React.createRef<HTMLDivElement>(),
 });
 
 type PropType = {
@@ -65,9 +61,7 @@ export class Provider extends React.Component<PropType, StateType> {
   dividerLineRefs: Array<React.RefObject<HTMLDivElement>> = [];
   ghostDividerLineRefs: Array<React.RefObject<HTMLDivElement>> = [];
 
-  hasInteractiveLayer = (): boolean => {
-    return !!this.props.interactiveLayerRef.current;
-  };
+  hasInteractiveLayer = (): boolean => !!this.props.interactiveLayerRef.current;
 
   addDividerLineRef = () => {
     const ref = React.createRef<HTMLDivElement>();
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
index cfc7501851..6825ba8061 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
@@ -94,9 +94,7 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
 
   previousUserSelect: UserSelectValues | null = null;
 
-  hasInteractiveLayer = (): boolean => {
-    return !!this.props.interactiveLayerRef.current;
-  };
+  hasInteractiveLayer = (): boolean => !!this.props.interactiveLayerRef.current;
 
   onDragStart = (viewHandle: ViewHandleType) => (
     event: React.MouseEvent<HTMLDivElement, MouseEvent>
@@ -203,27 +201,23 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
 
     switch (this.state.currentDraggingHandle) {
       case ViewHandleType.Left: {
-        this.setState(state => {
-          return {
-            isDragging: false,
-            currentDraggingHandle: void 0,
-
-            // commit leftHandlePosition to be viewWindowStart
-            viewWindowStart: state.leftHandlePosition,
-          };
-        });
+        this.setState(state => ({
+          isDragging: false,
+          currentDraggingHandle: void 0,
+
+          // commit leftHandlePosition to be viewWindowStart
+          viewWindowStart: state.leftHandlePosition,
+        }));
         return;
       }
       case ViewHandleType.Right: {
-        this.setState(state => {
-          return {
-            isDragging: false,
-            currentDraggingHandle: void 0,
-
-            // commit rightHandlePosition to be viewWindowEnd
-            viewWindowEnd: state.rightHandlePosition,
-          };
-        });
+        this.setState(state => ({
+          isDragging: false,
+          currentDraggingHandle: void 0,
+
+          // commit rightHandlePosition to be viewWindowEnd
+          viewWindowEnd: state.rightHandlePosition,
+        }));
         return;
       }
       default: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
index 6004d5025d..7ae07ea765 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
@@ -117,20 +117,18 @@ class TraceViewHeader extends React.Component<PropType> {
     );
   };
 
-  renderFog = (dragProps: DragManagerChildrenProps) => {
-    return (
-      <React.Fragment>
-        <Fog style={{height: '100%', width: toPercent(dragProps.viewWindowStart)}} />
-        <Fog
-          style={{
-            height: '100%',
-            width: toPercent(1 - dragProps.viewWindowEnd),
-            left: toPercent(dragProps.viewWindowEnd),
-          }}
-        />
-      </React.Fragment>
-    );
-  };
+  renderFog = (dragProps: DragManagerChildrenProps) => (
+    <React.Fragment>
+      <Fog style={{height: '100%', width: toPercent(dragProps.viewWindowStart)}} />
+      <Fog
+        style={{
+          height: '100%',
+          width: toPercent(1 - dragProps.viewWindowEnd),
+          left: toPercent(dragProps.viewWindowEnd),
+        }}
+      />
+    </React.Fragment>
+  );
 
   renderDurationGuide = ({
     showCursorGuide,
@@ -272,58 +270,56 @@ class TraceViewHeader extends React.Component<PropType> {
       <HeaderContainer>
         <ActualMinimap trace={this.props.trace} />
         <CursorGuideHandler.Consumer>
-          {({displayCursorGuide, hideCursorGuide, mouseLeft, showCursorGuide}) => {
-            return (
-              <div
-                ref={this.props.minimapInteractiveRef}
-                style={{
-                  width: '100%',
-                  height: `${MINIMAP_HEIGHT + TIME_AXIS_HEIGHT}px`,
-                  position: 'absolute',
-                  left: 0,
-                  top: 0,
-                }}
-                onMouseEnter={event => {
-                  displayCursorGuide(event.pageX);
-                }}
-                onMouseLeave={() => {
-                  hideCursorGuide();
-                }}
-                onMouseMove={event => {
-                  displayCursorGuide(event.pageX);
-                }}
-                onMouseDown={event => {
-                  const target = event.target;
-
-                  if (
-                    target instanceof Element &&
-                    target.getAttribute &&
-                    target.getAttribute('data-ignore')
-                  ) {
-                    // ignore this event if we need to
-                    return;
-                  }
-
-                  this.props.dragProps.onWindowSelectionDragStart(event);
-                }}
-              >
-                <MinimapContainer>
-                  {this.renderFog(this.props.dragProps)}
-                  {this.renderCursorGuide({
-                    showCursorGuide,
-                    mouseLeft,
-                    cursorGuideHeight: MINIMAP_HEIGHT,
-                  })}
-                  {this.renderViewHandles(this.props.dragProps)}
-                  {this.renderWindowSelection(this.props.dragProps)}
-                </MinimapContainer>
-                {this.renderTimeAxis({
+          {({displayCursorGuide, hideCursorGuide, mouseLeft, showCursorGuide}) => (
+            <div
+              ref={this.props.minimapInteractiveRef}
+              style={{
+                width: '100%',
+                height: `${MINIMAP_HEIGHT + TIME_AXIS_HEIGHT}px`,
+                position: 'absolute',
+                left: 0,
+                top: 0,
+              }}
+              onMouseEnter={event => {
+                displayCursorGuide(event.pageX);
+              }}
+              onMouseLeave={() => {
+                hideCursorGuide();
+              }}
+              onMouseMove={event => {
+                displayCursorGuide(event.pageX);
+              }}
+              onMouseDown={event => {
+                const target = event.target;
+
+                if (
+                  target instanceof Element &&
+                  target.getAttribute &&
+                  target.getAttribute('data-ignore')
+                ) {
+                  // ignore this event if we need to
+                  return;
+                }
+
+                this.props.dragProps.onWindowSelectionDragStart(event);
+              }}
+            >
+              <MinimapContainer>
+                {this.renderFog(this.props.dragProps)}
+                {this.renderCursorGuide({
                   showCursorGuide,
                   mouseLeft,
+                  cursorGuideHeight: MINIMAP_HEIGHT,
                 })}
-              </div>
-            );
-          }}
+                {this.renderViewHandles(this.props.dragProps)}
+                {this.renderWindowSelection(this.props.dragProps)}
+              </MinimapContainer>
+              {this.renderTimeAxis({
+                showCursorGuide,
+                mouseLeft,
+              })}
+            </div>
+          )}
         </CursorGuideHandler.Consumer>
       </HeaderContainer>
     );
@@ -648,40 +644,38 @@ const Handle = ({
   left: number;
   onMouseDown: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
   isDragging: boolean;
-}) => {
-  return (
-    <ViewHandleContainer
-      style={{
-        left: toPercent(left),
-      }}
+}) => (
+  <ViewHandleContainer
+    style={{
+      left: toPercent(left),
+    }}
+  >
+    <svg
+      width={1}
+      height={MINIMAP_HEIGHT - VIEW_HANDLE_HEIGHT}
+      fill="none"
+      style={{width: '1px', overflow: 'visible'}}
     >
-      <svg
-        width={1}
-        height={MINIMAP_HEIGHT - VIEW_HANDLE_HEIGHT}
-        fill="none"
-        style={{width: '1px', overflow: 'visible'}}
-      >
-        <line
-          x1="0"
-          x2="0"
-          y1="0"
-          y2={MINIMAP_HEIGHT - VIEW_HANDLE_HEIGHT}
-          strokeWidth="1"
-          strokeDasharray="5 3"
-          style={{stroke: '#302839'}}
-        />
-      </svg>
-      <ViewHandle
-        data-ignore="true"
-        onMouseDown={onMouseDown}
-        isDragging={isDragging}
-        style={{
-          height: `${VIEW_HANDLE_HEIGHT}px`,
-        }}
+      <line
+        x1="0"
+        x2="0"
+        y1="0"
+        y2={MINIMAP_HEIGHT - VIEW_HANDLE_HEIGHT}
+        strokeWidth="1"
+        strokeDasharray="5 3"
+        style={{stroke: '#302839'}}
       />
-    </ViewHandleContainer>
-  );
-};
+    </svg>
+    <ViewHandle
+      data-ignore="true"
+      onMouseDown={onMouseDown}
+      isDragging={isDragging}
+      style={{
+        height: `${VIEW_HANDLE_HEIGHT}px`,
+      }}
+    />
+  </ViewHandleContainer>
+);
 
 const WindowSelection = styled('div')`
   position: absolute;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 0c083edf7c..4239456268 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -212,11 +212,9 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
   _mounted: boolean = false;
 
   toggleDisplayDetail = () => {
-    this.setState(state => {
-      return {
-        showDetail: !state.showDetail,
-      };
-    });
+    this.setState(state => ({
+      showDetail: !state.showDetail,
+    }));
   };
 
   renderDetail = ({isVisible}: {isVisible: boolean}) => {
@@ -576,31 +574,29 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     }
   };
 
-  renderCursorGuide = () => {
-    return (
-      <CursorGuideHandler.Consumer>
-        {({
-          showCursorGuide,
-          traceViewMouseLeft,
-        }: {
-          showCursorGuide: boolean;
-          traceViewMouseLeft: number | undefined;
-        }) => {
-          if (!showCursorGuide || !traceViewMouseLeft) {
-            return null;
-          }
+  renderCursorGuide = () => (
+    <CursorGuideHandler.Consumer>
+      {({
+        showCursorGuide,
+        traceViewMouseLeft,
+      }: {
+        showCursorGuide: boolean;
+        traceViewMouseLeft: number | undefined;
+      }) => {
+        if (!showCursorGuide || !traceViewMouseLeft) {
+          return null;
+        }
 
-          return (
-            <CursorGuide
-              style={{
-                left: toPercent(traceViewMouseLeft),
-              }}
-            />
-          );
-        }}
-      </CursorGuideHandler.Consumer>
-    );
-  };
+        return (
+          <CursorGuide
+            style={{
+              left: toPercent(traceViewMouseLeft),
+            }}
+          />
+        );
+      }}
+    </CursorGuideHandler.Consumer>
+  );
 
   renderDivider = (
     dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps
@@ -752,9 +748,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
         <DividerHandlerManager.Consumer>
           {(
             dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps
-          ) => {
-            return this.renderHeader(dividerHandlerChildrenProps);
-          }}
+          ) => this.renderHeader(dividerHandlerChildrenProps)}
         </DividerHandlerManager.Consumer>
         {this.renderDetail({isVisible: isSpanVisible})}
       </SpanRow>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index 3690fff281..87f4e54be7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -245,13 +245,11 @@ class SpanDetail extends React.Component<Props, State> {
               {String(!!span.same_process_as_parent)}
             </Row>
             <Tags span={span} />
-            {map(get(span, 'data', {}), (value, key) => {
-              return (
-                <Row title={key} key={key}>
-                  {JSON.stringify(value, null, 4) || ''}
-                </Row>
-              );
-            })}
+            {map(get(span, 'data', {}), (value, key) => (
+              <Row title={key} key={key}>
+                {JSON.stringify(value, null, 4) || ''}
+              </Row>
+            ))}
           </tbody>
         </table>
       </SpanDetailContainer>
@@ -321,9 +319,9 @@ const Tags = ({span}: {span: RawSpanType}) => {
       <td className="key">Tags</td>
       <td className="value">
         <Pills style={{padding: '8px'}}>
-          {keys.map((key, index) => {
-            return <Pill key={index} name={key} value={String(tags[key]) || ''} />;
-          })}
+          {keys.map((key, index) => (
+            <Pill key={index} name={key} value={String(tags[key]) || ''} />
+          ))}
         </Pills>
       </td>
     </tr>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
index f0c5436ed5..279dd57bd2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
@@ -34,11 +34,9 @@ class SpanGroup extends React.Component<PropType, State> {
   };
 
   toggleSpanTree = () => {
-    this.setState(state => {
-      return {
-        showSpanTree: !state.showSpanTree,
-      };
-    });
+    this.setState(state => ({
+      showSpanTree: !state.showSpanTree,
+    }));
   };
 
   renderSpanChildren = () => {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
index c7153f9e29..09fa9595c9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
@@ -114,12 +114,8 @@ class TraceView extends React.PureComponent<Props, State> {
         ]);
 
         const basicValues: string[] = Object.values(pickedSpan)
-          .filter(value => {
-            return !!value;
-          })
-          .map(value => {
-            return String(value);
-          });
+          .filter(value => !!value)
+          .map(value => String(value));
 
         indexed.push(...basicValues);
 
@@ -140,9 +136,9 @@ class TraceView extends React.PureComponent<Props, State> {
         let dataValues: string[] = [];
         if (data) {
           dataKeys = Object.keys(data);
-          dataValues = Object.values(data).map(value => {
-            return JSON.stringify(value, null, 4) || '';
-          });
+          dataValues = Object.values(data).map(
+            value => JSON.stringify(value, null, 4) || ''
+          );
         }
 
         return {
@@ -185,15 +181,13 @@ class TraceView extends React.PureComponent<Props, State> {
     });
   }
 
-  renderHeader = (dragProps: DragManagerChildrenProps, parsedTrace: ParsedTraceType) => {
-    return (
-      <TraceViewHeader
-        minimapInteractiveRef={this.minimapInteractiveRef}
-        dragProps={dragProps}
-        trace={parsedTrace}
-      />
-    );
-  };
+  renderHeader = (dragProps: DragManagerChildrenProps, parsedTrace: ParsedTraceType) => (
+    <TraceViewHeader
+      minimapInteractiveRef={this.minimapInteractiveRef}
+      dragProps={dragProps}
+      trace={parsedTrace}
+    />
+  );
 
   render() {
     const {event} = this.props;
@@ -211,24 +205,22 @@ class TraceView extends React.PureComponent<Props, State> {
 
     return (
       <DragManager interactiveLayerRef={this.minimapInteractiveRef}>
-        {(dragProps: DragManagerChildrenProps) => {
-          return (
-            <CursorGuideHandler.Provider
-              interactiveLayerRef={this.minimapInteractiveRef}
-              dragProps={dragProps}
+        {(dragProps: DragManagerChildrenProps) => (
+          <CursorGuideHandler.Provider
+            interactiveLayerRef={this.minimapInteractiveRef}
+            dragProps={dragProps}
+            trace={parsedTrace}
+          >
+            {this.renderHeader(dragProps, parsedTrace)}
+            <SpanTree
+              eventView={eventView}
               trace={parsedTrace}
-            >
-              {this.renderHeader(dragProps, parsedTrace)}
-              <SpanTree
-                eventView={eventView}
-                trace={parsedTrace}
-                dragProps={dragProps}
-                filterSpans={this.state.filterSpans}
-                orgId={orgId}
-              />
-            </CursorGuideHandler.Provider>
-          );
-        }}
+              dragProps={dragProps}
+              filterSpans={this.state.filterSpans}
+              orgId={orgId}
+            />
+          </CursorGuideHandler.Provider>
+        )}
       </DragManager>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index 1f44a3116c..6880946ac6 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -43,23 +43,19 @@ export const rectOfContent = (element: Element): Rect => {
   };
 };
 
-export const rectOfViewport = (): Rect => {
-  return {
-    x: window.pageXOffset,
-    y: window.pageYOffset,
-    width: window.document.documentElement.clientWidth,
-    height: window.document.documentElement.clientHeight,
-  };
-};
-
-export const rectRelativeTo = (rect: Rect, pos = {x: 0, y: 0}): Rect => {
-  return {
-    x: rect.x - pos.x,
-    y: rect.y - pos.y,
-    width: rect.width,
-    height: rect.height,
-  };
-};
+export const rectOfViewport = (): Rect => ({
+  x: window.pageXOffset,
+  y: window.pageYOffset,
+  width: window.document.documentElement.clientWidth,
+  height: window.document.documentElement.clientHeight,
+});
+
+export const rectRelativeTo = (rect: Rect, pos = {x: 0, y: 0}): Rect => ({
+  x: rect.x - pos.x,
+  y: rect.y - pos.y,
+  width: rect.width,
+  height: rect.height,
+});
 
 export const rectOfElement = (element: HTMLElement): Rect => {
   const {x, y} = getOffsetOfElement(element);
@@ -81,13 +77,10 @@ export const clamp = (value: number, min: number, max: number): number => {
   return value;
 };
 
-export const isValidSpanID = (maybeSpanID: any) => {
-  return isString(maybeSpanID) && maybeSpanID.length > 0;
-};
+export const isValidSpanID = (maybeSpanID: any) =>
+  isString(maybeSpanID) && maybeSpanID.length > 0;
 
-export const toPercent = (value: number) => {
-  return `${(value * 100).toFixed(3)}%`;
-};
+export const toPercent = (value: number) => `${(value * 100).toFixed(3)}%`;
 
 export type SpanBoundsType = {startTimestamp: number; endTimestamp: number};
 export type SpanGeneratedBoundsType =
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 9901926308..01b8720c1c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -39,11 +39,8 @@ export default class StacktraceContent extends React.Component {
     return <li {...props}>{text}</li>;
   };
 
-  frameIsVisible = (frame, nextFrame) => {
-    return (
-      this.props.includeSystemFrames || frame.inApp || (nextFrame && nextFrame.inApp)
-    );
-  };
+  frameIsVisible = (frame, nextFrame) =>
+    this.props.includeSystemFrames || frame.inApp || (nextFrame && nextFrame.inApp);
 
   findImageForAddress(address) {
     const images = get(
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/threads.jsx
index 5b4350387b..c9ea00e03e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/threads.jsx
@@ -43,21 +43,19 @@ class Thread extends React.Component {
     stacktrace: PropTypes.object,
   };
 
-  renderMissingStacktrace = () => {
-    return (
-      <div className="traceback missing-traceback">
-        <ul>
-          <li className="frame missing-frame">
-            <div className="title">
-              <span className="informal">
-                {this.props.data.crashed ? 'Thread Crashed' : 'No or unknown stacktrace'}
-              </span>
-            </div>
-          </li>
-        </ul>
-      </div>
-    );
-  };
+  renderMissingStacktrace = () => (
+    <div className="traceback missing-traceback">
+      <ul>
+        <li className="frame missing-frame">
+          <div className="title">
+            <span className="informal">
+              {this.props.data.crashed ? 'Thread Crashed' : 'No or unknown stacktrace'}
+            </span>
+          </div>
+        </li>
+      </ul>
+    </div>
+  );
 
   hasMissingStacktrace = () => {
     const {exception, stacktrace} = this.props;
@@ -142,17 +140,14 @@ class ThreadsInterface extends React.Component {
     });
   };
 
-  getStacktrace = () => {
-    return getThreadStacktrace(
+  getStacktrace = () =>
+    getThreadStacktrace(
       this.state.activeThread,
       this.props.event,
       this.state.stackType !== 'original'
     );
-  };
 
-  getException = () => {
-    return getThreadException(this.state.activeThread, this.props.event);
-  };
+  getException = () => getThreadException(this.state.activeThread, this.props.event);
 
   onSelectNewThread = thread => {
     let newStackView = this.state.stackView;
diff --git a/src/sentry/static/sentry/app/components/events/sdkUpdates.jsx b/src/sentry/static/sentry/app/components/events/sdkUpdates.jsx
index 1a070f028d..96a0744131 100644
--- a/src/sentry/static/sentry/app/components/events/sdkUpdates.jsx
+++ b/src/sentry/static/sentry/app/components/events/sdkUpdates.jsx
@@ -96,13 +96,11 @@ class EventSdkUpdateSuggestion extends React.Component {
         {title}
         {t(' so you can')}
         <AlertUl>
-          {suggestion.enables.map((suggestion2, i) => {
-            return (
-              <li key={getSuggestionComponentKey(suggestion2)}>
-                <EventSdkUpdateSuggestion event={event} suggestion={suggestion2} />
-              </li>
-            );
-          })}
+          {suggestion.enables.map((suggestion2, i) => (
+            <li key={getSuggestionComponentKey(suggestion2)}>
+              <EventSdkUpdateSuggestion event={event} suggestion={suggestion2} />
+            </li>
+          ))}
         </AlertUl>
       </span>
     );
@@ -120,18 +118,16 @@ class EventSdkUpdates extends React.Component {
 
     return (
       <EventDataSection title={null} type="sdk-updates">
-        {data.map(suggestion => {
-          return (
-            <Alert
-              type="info"
-              icon="icon-upgrade"
-              key={getSuggestionComponentKey(suggestion)}
-            >
-              {t('We recommend you ')}
-              <EventSdkUpdateSuggestion event={event} suggestion={suggestion} />
-            </Alert>
-          );
-        })}
+        {data.map(suggestion => (
+          <Alert
+            type="info"
+            icon="icon-upgrade"
+            key={getSuggestionComponentKey(suggestion)}
+          >
+            {t('We recommend you ')}
+            <EventSdkUpdateSuggestion event={event} suggestion={suggestion} />
+          </Alert>
+        ))}
       </EventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
index 9772e3407b..a07b9fea1b 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
@@ -26,25 +26,23 @@ class EventsTable extends React.Component {
             <th>{t('ID')}</th>
             {hasUser && <th>{t('User')}</th>}
 
-            {tagList.map(tag => {
-              return <th key={tag.key}>{tag.name}</th>;
-            })}
+            {tagList.map(tag => (
+              <th key={tag.key}>{tag.name}</th>
+            ))}
           </tr>
         </thead>
         <tbody>
-          {events.map(event => {
-            return (
-              <EventsTableRow
-                key={event.id}
-                event={event}
-                orgId={orgId}
-                projectId={projectId}
-                groupId={groupId}
-                tagList={tagList}
-                hasUser={hasUser}
-              />
-            );
-          })}
+          {events.map(event => (
+            <EventsTableRow
+              key={event.id}
+              event={event}
+              orgId={orgId}
+              projectId={projectId}
+              groupId={groupId}
+              tagList={tagList}
+              hasUser={hasUser}
+            />
+          ))}
         </tbody>
       </table>
     );
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
index 8a5f8ef59e..6aacab9e03 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
@@ -85,19 +85,17 @@ class EventsTableRow extends React.Component {
           </td>
         )}
 
-        {tagList.map(tag => {
-          return (
-            <td key={tag.key}>
-              <div>
-                {tag.key === 'device' ? (
-                  <DeviceName value={tagMap[tag.key]} />
-                ) : (
-                  tagMap[tag.key]
-                )}
-              </div>
-            </td>
-          );
-        })}
+        {tagList.map(tag => (
+          <td key={tag.key}>
+            <div>
+              {tag.key === 'device' ? (
+                <DeviceName value={tagMap[tag.key]} />
+              ) : (
+                tagMap[tag.key]
+              )}
+            </div>
+          </td>
+        ))}
       </tr>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
index 67798b8bf2..d47ea5773d 100644
--- a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
@@ -77,22 +77,20 @@ export default class MultipleCheckboxField extends FormField {
         </div>
 
         <div className="control-list">
-          {choices.map(([value, choiceLabel]) => {
-            return (
-              <label className="checkbox" key={value}>
-                <input
-                  type="checkbox"
-                  value={value}
-                  onChange={this.onChange.bind(this, value)}
-                  disabled={disabled}
-                  checked={
-                    defined(this.state.value) && this.state.value.indexOf(value) !== -1
-                  }
-                />
-                {choiceLabel}
-              </label>
-            );
-          })}
+          {choices.map(([value, choiceLabel]) => (
+            <label className="checkbox" key={value}>
+              <input
+                type="checkbox"
+                value={value}
+                onChange={this.onChange.bind(this, value)}
+                disabled={disabled}
+                checked={
+                  defined(this.state.value) && this.state.value.indexOf(value) !== -1
+                }
+              />
+              {choiceLabel}
+            </label>
+          ))}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
index e0eab022d8..e4aee2b443 100644
--- a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
@@ -72,8 +72,8 @@ class SelectAsyncControl extends React.Component {
       );
   }, 250);
 
-  handleLoadOptions = () => {
-    return new Promise((resolve, reject) => {
+  handleLoadOptions = () =>
+    new Promise((resolve, reject) => {
       this.doQuery((err, result) => {
         if (err) {
           reject(err);
@@ -100,7 +100,6 @@ class SelectAsyncControl extends React.Component {
         console.error(err);
       }
     );
-  };
 
   handleInputChange = query => {
     this.setState({query});
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
index 0a0fe71727..a66bbadcb8 100644
--- a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
@@ -41,10 +41,9 @@ class SelectAsyncField extends SelectField {
     return (results && results.map(({id, text}) => ({value: id, label: text}))) || [];
   };
 
-  onQuery = query => {
+  onQuery = query =>
     // Used by legacy integrations
-    return {autocomplete_query: query, autocomplete_field: this.props.name};
-  };
+    ({autocomplete_query: query, autocomplete_field: this.props.name});
 
   getField() {
     // Callers should be able to override all props except onChange
diff --git a/src/sentry/static/sentry/app/components/forms/selectControlLegacy.jsx b/src/sentry/static/sentry/app/components/forms/selectControlLegacy.jsx
index 6337918854..3119706995 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControlLegacy.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControlLegacy.jsx
@@ -43,9 +43,7 @@ class SelectControlLegacy extends React.Component {
     height: 36,
   };
 
-  renderArrow = () => {
-    return <span className="icon-arrow-down" />;
-  };
+  renderArrow = () => <span className="icon-arrow-down" />;
 
   render() {
     const {async, creatable, options, choices, clearable, noMenu, ...props} = this.props;
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index 9b9ddb71d1..d119538fdb 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -418,9 +418,9 @@ class GridEditable<
     return (
       <GridRow>
         {prependColumns &&
-          prependColumns.map((item, i) => {
-            return <GridHeadCellStatic key={`prepend-${i}`}>{item}</GridHeadCellStatic>;
-          })}
+          prependColumns.map((item, i) => (
+            <GridHeadCellStatic key={`prepend-${i}`}>{item}</GridHeadCellStatic>
+          ))}
         {/* Note that this.onResizeMouseDown assumes GridResizer is nested
             2 levels under GridHeadCell */
         columnOrder.map((column, i) => (
@@ -481,9 +481,9 @@ class GridEditable<
     return (
       <GridRow key={row}>
         {prependColumns &&
-          prependColumns.map((item, i) => {
-            return <GridBodyCell key={`prepend-${i}`}>{item}</GridBodyCell>;
-          })}
+          prependColumns.map((item, i) => (
+            <GridBodyCell key={`prepend-${i}`}>{item}</GridBodyCell>
+          ))}
         {columnOrder.map((col, i) => (
           <GridBodyCell key={`${col.key}${i}`}>
             {grid.renderBodyCell ? grid.renderBodyCell(col, dataRow) : dataRow[col.key]}
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueForm.tsx b/src/sentry/static/sentry/app/components/group/externalIssueForm.tsx
index 593a23a496..431f868c55 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueForm.tsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueForm.tsx
@@ -121,8 +121,8 @@ class ExternalIssueForm extends AsyncComponent<Props, State> {
     }
   };
 
-  getOptions = (field: IssueConfigField, input: string) => {
-    return new Promise((resolve, reject) => {
+  getOptions = (field: IssueConfigField, input: string) =>
+    new Promise((resolve, reject) => {
       if (!input) {
         const options = (field.choices || []).map(([value, label]) => ({value, label}));
         return resolve({options});
@@ -135,7 +135,6 @@ class ExternalIssueForm extends AsyncComponent<Props, State> {
         }
       });
     });
-  };
 
   debouncedOptionLoad = debounce(
     async (
diff --git a/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx b/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
index 0f8d066e0e..50a0437494 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
@@ -174,11 +174,9 @@ class ExternalIssueList extends AsyncComponent<Props, State> {
     const {group, project} = this.props;
 
     return group.pluginIssues && group.pluginIssues.length
-      ? group.pluginIssues.map((plugin, i) => {
-          return (
-            <PluginActions group={group} project={project} plugin={plugin} key={i} />
-          );
-        })
+      ? group.pluginIssues.map((plugin, i) => (
+          <PluginActions group={group} project={project} plugin={plugin} key={i} />
+        ))
       : null;
   }
 
@@ -186,13 +184,11 @@ class ExternalIssueList extends AsyncComponent<Props, State> {
     const {group} = this.props;
 
     return group.pluginActions && group.pluginActions.length
-      ? group.pluginActions.map((plugin, i) => {
-          return (
-            <IssueSyncListElement externalIssueLink={plugin[1]} key={i}>
-              {plugin[0]}
-            </IssueSyncListElement>
-          );
-        })
+      ? group.pluginActions.map((plugin, i) => (
+          <IssueSyncListElement externalIssueLink={plugin[1]} key={i}>
+            {plugin[0]}
+          </IssueSyncListElement>
+        ))
       : null;
   }
 
diff --git a/src/sentry/static/sentry/app/components/group/participants.jsx b/src/sentry/static/sentry/app/components/group/participants.jsx
index 39fa818707..8a38062e23 100644
--- a/src/sentry/static/sentry/app/components/group/participants.jsx
+++ b/src/sentry/static/sentry/app/components/group/participants.jsx
@@ -14,13 +14,11 @@ const GroupParticipants = props => {
         </span>
       </h6>
       <ul className="faces">
-        {participants.map(user => {
-          return (
-            <li key={user.username}>
-              <UserAvatar size={28} user={user} hasTooltip />
-            </li>
-          );
-        })}
+        {participants.map(user => (
+          <li key={user.username}>
+            <UserAvatar size={28} user={user} hasTooltip />
+          </li>
+        ))}
       </ul>
     </div>
   );
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
index 50a967b597..cdc0a33374 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
@@ -50,11 +50,10 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
     addErrorMessage(t('Unable to %s %s issue.', action, appName));
   };
 
-  getOptions = (field: Field, input: string) => {
-    return new Promise(resolve => {
+  getOptions = (field: Field, input: string) =>
+    new Promise(resolve => {
       this.debouncedOptionLoad(field, input, resolve);
     });
-  };
 
   debouncedOptionLoad = debounce(
     // debounce is used to prevent making a request for every input change and
@@ -80,8 +79,8 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
     {trailing: true}
   );
 
-  fieldProps = field => {
-    return field.uri
+  fieldProps = field =>
+    field.uri
       ? {
           loadOptions: (input: string) => this.getOptions(field, input),
           async: true,
@@ -92,7 +91,6 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
           autoload: false,
         }
       : {};
-  };
 
   getStacktrace() {
     const evt = this.props.event;
@@ -161,9 +159,9 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
         onSubmitSuccess={this.onSubmitSuccess}
         onSubmitError={this.onSubmitError}
       >
-        {metaFields.map(field => {
-          return <FieldFromConfig key={field.name} field={field} />;
-        })}
+        {metaFields.map(field => (
+          <FieldFromConfig key={field.name} field={field} />
+        ))}
 
         {requiredFields.map(field => {
           field = Object.assign({}, field, {
diff --git a/src/sentry/static/sentry/app/components/group/times.tsx b/src/sentry/static/sentry/app/components/group/times.tsx
index 1e366e619c..e39e08b1c4 100644
--- a/src/sentry/static/sentry/app/components/group/times.tsx
+++ b/src/sentry/static/sentry/app/components/group/times.tsx
@@ -19,30 +19,28 @@ type Props = {
   firstSeen: string;
 };
 
-const Times = ({lastSeen, firstSeen}: Props) => {
-  return (
-    <Container>
-      <div
-        css={css`
-          ${overflowEllipsis}
-        `}
-      >
-        {lastSeen && (
-          <React.Fragment>
-            <GroupTimeIcon src="icon-clock-sm" />
-            <TimeSince date={lastSeen} suffix={t('ago')} />
-          </React.Fragment>
-        )}
-        {firstSeen && lastSeen && (
-          <span className="hidden-xs hidden-sm">&nbsp;—&nbsp;</span>
-        )}
-        {firstSeen && (
-          <TimeSince date={firstSeen} suffix={t('old')} className="hidden-xs hidden-sm" />
-        )}
-      </div>
-    </Container>
-  );
-};
+const Times = ({lastSeen, firstSeen}: Props) => (
+  <Container>
+    <div
+      css={css`
+        ${overflowEllipsis}
+      `}
+    >
+      {lastSeen && (
+        <React.Fragment>
+          <GroupTimeIcon src="icon-clock-sm" />
+          <TimeSince date={lastSeen} suffix={t('ago')} />
+        </React.Fragment>
+      )}
+      {firstSeen && lastSeen && (
+        <span className="hidden-xs hidden-sm">&nbsp;—&nbsp;</span>
+      )}
+      {firstSeen && (
+        <TimeSince date={firstSeen} suffix={t('old')} className="hidden-xs hidden-sm" />
+      )}
+    </div>
+  </Container>
+);
 Times.propTypes = {
   lastSeen: PropTypes.string,
   firstSeen: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/components/inactivePlugins.jsx b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
index ed7ed06555..86f5041a3b 100644
--- a/src/sentry/static/sentry/app/components/inactivePlugins.jsx
+++ b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
@@ -14,9 +14,7 @@ class InactivePlugins extends React.Component {
     onEnablePlugin: PropTypes.func.isRequired,
   };
 
-  enablePlugin = plugin => {
-    return this.props.onEnablePlugin(plugin, true);
-  };
+  enablePlugin = plugin => this.props.onEnablePlugin(plugin, true);
 
   render() {
     const plugins = this.props.plugins;
@@ -29,20 +27,18 @@ class InactivePlugins extends React.Component {
 
         <PanelBody>
           <Plugins>
-            {plugins.map(plugin => {
-              return (
-                <IntegrationButton
-                  key={plugin.id}
-                  onClick={this.enablePlugin.bind(this, plugin)}
-                  className={`ref-plugin-enable-${plugin.id}`}
-                >
-                  <Label>
-                    <StyledPluginIcon pluginId={plugin.id} />
-                    <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>
-                  </Label>
-                </IntegrationButton>
-              );
-            })}
+            {plugins.map(plugin => (
+              <IntegrationButton
+                key={plugin.id}
+                onClick={this.enablePlugin.bind(this, plugin)}
+                className={`ref-plugin-enable-${plugin.id}`}
+              >
+                <Label>
+                  <StyledPluginIcon pluginId={plugin.id} />
+                  <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>
+                </Label>
+              </IntegrationButton>
+            ))}
           </Plugins>
         </PanelBody>
       </Panel>
diff --git a/src/sentry/static/sentry/app/components/indicators.jsx b/src/sentry/static/sentry/app/components/indicators.jsx
index 458d6d0433..209a276f48 100644
--- a/src/sentry/static/sentry/app/components/indicators.jsx
+++ b/src/sentry/static/sentry/app/components/indicators.jsx
@@ -43,19 +43,13 @@ class Indicators extends React.Component {
 
     return (
       <Toasts {...props}>
-        {items.map((indicator, i) => {
+        {items.map((indicator, i) => (
           // We purposefully use `i` as key here because of transitions
           // Toasts can now queue up, so when we change from [firstToast] -> [secondToast],
           // we don't want to  animate `firstToast` out and `secondToast` in, rather we want
           // to replace `firstToast` with `secondToast`
-          return (
-            <ToastIndicator
-              onDismiss={this.handleDismiss}
-              indicator={indicator}
-              key={i}
-            />
-          );
-        })}
+          <ToastIndicator onDismiss={this.handleDismiss} indicator={indicator} key={i} />
+        ))}
       </Toasts>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/internalStatChart.jsx b/src/sentry/static/sentry/app/components/internalStatChart.jsx
index 6c8a02cdc0..dfd0f62691 100644
--- a/src/sentry/static/sentry/app/components/internalStatChart.jsx
+++ b/src/sentry/static/sentry/app/components/internalStatChart.jsx
@@ -64,9 +64,7 @@ class InternalStatChart extends React.Component {
   }
 
   getChartPoints() {
-    return this.state.data.map(([x, y]) => {
-      return {x, y};
-    });
+    return this.state.data.map(([x, y]) => ({x, y}));
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/issueLink.jsx b/src/sentry/static/sentry/app/components/issueLink.jsx
index 70a652eb67..3df0f100f0 100644
--- a/src/sentry/static/sentry/app/components/issueLink.jsx
+++ b/src/sentry/static/sentry/app/components/issueLink.jsx
@@ -75,14 +75,12 @@ export default class IssueLink extends React.Component {
                     </Link>
                   </EventAnnotation>
                 )}
-                {issue.annotations.map((annotation, i) => {
-                  return (
-                    <EventAnnotation
-                      key={i}
-                      dangerouslySetInnerHTML={{__html: annotation}}
-                    />
-                  );
-                })}
+                {issue.annotations.map((annotation, i) => (
+                  <EventAnnotation
+                    key={i}
+                    dangerouslySetInnerHTML={{__html: annotation}}
+                  />
+                ))}
               </React.Fragment>
             }
           />
diff --git a/src/sentry/static/sentry/app/components/issueList.jsx b/src/sentry/static/sentry/app/components/issueList.jsx
index eab5dccd22..83caad6a6a 100644
--- a/src/sentry/static/sentry/app/components/issueList.jsx
+++ b/src/sentry/static/sentry/app/components/issueList.jsx
@@ -113,17 +113,15 @@ const IssueList = createReactClass({
       body = (
         <Panel style={panelStyle}>
           <PanelBody className="issue-list">
-            {this.state.data.map(issue => {
-              return (
-                <CompactIssue
-                  key={issue.id}
-                  id={issue.id}
-                  data={issue}
-                  statsPeriod={this.props.statsPeriod}
-                  showActions={this.props.showActions}
-                />
-              );
-            })}
+            {this.state.data.map(issue => (
+              <CompactIssue
+                key={issue.id}
+                id={issue.id}
+                data={issue}
+                statsPeriod={this.props.statsPeriod}
+                showActions={this.props.showActions}
+              />
+            ))}
           </PanelBody>
         </Panel>
       );
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
index c8591d6ec9..1e4f2b5f34 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
@@ -46,13 +46,13 @@ class PublishRequestFormModel extends FormModel {
   getTransformedData() {
     const data = this.getData();
     //map object to list of questions
-    const questionnaire = Array.from(this.fieldDescriptor.values()).map(field => {
+    const questionnaire = Array.from(this.fieldDescriptor.values()).map(field =>
       //we read the meta for the question that has a react node for the label
-      return {
+      ({
         question: field.meta || field.label,
         answer: data[field.name],
-      };
-    });
+      })
+    );
     return {questionnaire};
   }
 }
diff --git a/src/sentry/static/sentry/app/components/mutedBox.jsx b/src/sentry/static/sentry/app/components/mutedBox.jsx
index 0eb2f65315..b47eabe2e2 100644
--- a/src/sentry/static/sentry/app/components/mutedBox.jsx
+++ b/src/sentry/static/sentry/app/components/mutedBox.jsx
@@ -51,19 +51,17 @@ export default class MutedBox extends React.PureComponent {
     return t('This issue has been ignored');
   };
 
-  render = () => {
-    return (
-      <BannerContainer priority="default">
-        <BannerSummary>
-          <span className="icon icon-soundoff" style={{color: theme.red}} />
-          <span>
-            {this.renderReason()}&nbsp;&mdash;&nbsp;
-            {t(
-              'You will not be notified of any changes and it will not show up by default in feeds.'
-            )}
-          </span>
-        </BannerSummary>
-      </BannerContainer>
-    );
-  };
+  render = () => (
+    <BannerContainer priority="default">
+      <BannerSummary>
+        <span className="icon icon-soundoff" style={{color: theme.red}} />
+        <span>
+          {this.renderReason()}&nbsp;&mdash;&nbsp;
+          {t(
+            'You will not be notified of any changes and it will not show up by default in feeds.'
+          )}
+        </span>
+      </BannerSummary>
+    </BannerContainer>
+  );
 }
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
index 08f1516af6..b3354d6080 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
@@ -55,9 +55,7 @@ const getDateTimeString = (
       return undefined;
     }
 
-    const result = maybe.find(needle => {
-      return moment.utc(needle).isValid();
-    });
+    const result = maybe.find(needle => moment.utc(needle).isValid());
 
     return normalizeDateTimeString(result);
   }
@@ -78,9 +76,7 @@ const getUtcValue = (maybe: string | string[] | undefined | null): string | unde
       return undefined;
     }
 
-    return maybe.find(needle => {
-      return !!parseUtcValue(needle);
-    });
+    return maybe.find(needle => !!parseUtcValue(needle));
   }
 
   maybe = parseUtcValue(maybe);
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
index 415bf6d88f..008ba5e9f6 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
@@ -334,9 +334,8 @@ class GlobalSelectionHeader extends React.Component {
     this.updateStoreIfChange(prevProps, this.props);
   }
 
-  hasMultipleProjectSelection = () => {
-    return new Set(this.props.organization.features).has('global-views');
-  };
+  hasMultipleProjectSelection = () =>
+    new Set(this.props.organization.features).has('global-views');
 
   /**
    * If user does not have access to `global-views` (e.g. multi project select), then
@@ -510,11 +509,10 @@ class GlobalSelectionHeader extends React.Component {
     return [memberProjects, []];
   };
 
-  getFirstProject = () => {
-    return flatten(this.getProjects())
+  getFirstProject = () =>
+    flatten(this.getProjects())
       .map(getProjectIdFromProject)
       .slice(0, 1);
-  };
 
   getBackButton = () => {
     const {organization, location} = this.props;
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleSelectorSubmitRow.tsx b/src/sentry/static/sentry/app/components/organizations/multipleSelectorSubmitRow.tsx
index 6968eacc51..f09ba5dd8d 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleSelectorSubmitRow.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleSelectorSubmitRow.tsx
@@ -11,15 +11,13 @@ type Props = {
   onSubmit: () => void;
 };
 
-const MultipleSelectorSubmitRow = ({onSubmit}: Props) => {
-  return (
-    <SubmitButtonContainer>
-      <SubmitButton onClick={onSubmit} size="xsmall" priority="primary">
-        {t('Apply')}
-      </SubmitButton>
-    </SubmitButtonContainer>
-  );
-};
+const MultipleSelectorSubmitRow = ({onSubmit}: Props) => (
+  <SubmitButtonContainer>
+    <SubmitButton onClick={onSubmit} size="xsmall" priority="primary">
+      {t('Apply')}
+    </SubmitButton>
+  </SubmitButtonContainer>
+);
 
 MultipleSelectorSubmitRow.propTypes = {
   onSubmit: PropTypes.func.isRequired,
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx
index b37109c636..46d3ad454d 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx
@@ -84,11 +84,10 @@ class DateRange extends React.Component {
     router: PropTypes.object,
   };
 
-  static getTimeStringFromDate = date => {
-    return moment(date)
+  static getTimeStringFromDate = date =>
+    moment(date)
       .local()
       .format('HH:mm');
-  };
 
   handleSelectDateRange = ({selection}) => {
     const {onChange} = this.props;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/relativeSelector.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/relativeSelector.jsx
index aadd4bd3cc..47a4d10927 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/relativeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/relativeSelector.jsx
@@ -5,23 +5,19 @@ import {DEFAULT_RELATIVE_PERIODS} from 'app/constants';
 
 import SelectorItem from './selectorItem';
 
-const RelativeSelector = ({onClick, selected, relativePeriods}) => {
-  return (
-    <React.Fragment>
-      {Object.entries(relativePeriods || DEFAULT_RELATIVE_PERIODS).map(
-        ([value, label]) => (
-          <SelectorItem
-            key={value}
-            onClick={onClick}
-            value={value}
-            label={label}
-            selected={selected === value}
-          />
-        )
-      )}
-    </React.Fragment>
-  );
-};
+const RelativeSelector = ({onClick, selected, relativePeriods}) => (
+  <React.Fragment>
+    {Object.entries(relativePeriods || DEFAULT_RELATIVE_PERIODS).map(([value, label]) => (
+      <SelectorItem
+        key={value}
+        onClick={onClick}
+        value={value}
+        label={label}
+        selected={selected === value}
+      />
+    ))}
+  </React.Fragment>
+);
 
 RelativeSelector.propTypes = {
   onClick: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/components/platformList.jsx b/src/sentry/static/sentry/app/components/platformList.jsx
index 6e04ac928a..ef18dab452 100644
--- a/src/sentry/static/sentry/app/components/platformList.jsx
+++ b/src/sentry/static/sentry/app/components/platformList.jsx
@@ -36,12 +36,11 @@ class PlatformList extends React.Component {
     return <StyledPlatformIcon key={platform} platform={platform} size={size} />;
   };
 
-  getIcons = platforms => {
-    return platforms
+  getIcons = platforms =>
+    platforms
       .slice()
       .reverse()
       .map(this.getIcon);
-  };
 
   render() {
     const {platforms, max, size, direction, consistentWidth, className} = this.props;
diff --git a/src/sentry/static/sentry/app/components/pluginList.tsx b/src/sentry/static/sentry/app/components/pluginList.tsx
index 185b572397..6bc6446934 100644
--- a/src/sentry/static/sentry/app/components/pluginList.tsx
+++ b/src/sentry/static/sentry/app/components/pluginList.tsx
@@ -58,17 +58,15 @@ const PluginList = ({
     <div>
       {pluginList
         .filter(p => p.enabled)
-        .map(data => {
-          return (
-            <PluginConfig
-              data={data}
-              organization={organization}
-              project={project}
-              key={data.id}
-              onDisablePlugin={handleDisablePlugin}
-            />
-          );
-        })}
+        .map(data => (
+          <PluginConfig
+            data={data}
+            organization={organization}
+            project={project}
+            key={data.id}
+            onDisablePlugin={handleDisablePlugin}
+          />
+        ))}
 
       <InactivePlugins
         plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}
diff --git a/src/sentry/static/sentry/app/components/previewFeature.tsx b/src/sentry/static/sentry/app/components/previewFeature.tsx
index b5c0b877f4..866bfb002f 100644
--- a/src/sentry/static/sentry/app/components/previewFeature.tsx
+++ b/src/sentry/static/sentry/app/components/previewFeature.tsx
@@ -8,15 +8,13 @@ type Props = {
   type?: AlertProps['type'];
 };
 
-const PreviewFeature = ({type = 'info'}: Props) => {
-  return (
-    <Alert type={type} icon="icon-labs">
-      {t(
-        'This feature is a preview and may change in the future. Thanks for being an early adopter!'
-      )}
-    </Alert>
-  );
-};
+const PreviewFeature = ({type = 'info'}: Props) => (
+  <Alert type={type} icon="icon-labs">
+    {t(
+      'This feature is a preview and may change in the future. Thanks for being an early adopter!'
+    )}
+  </Alert>
+);
 
 PreviewFeature.propTypes = {
   type: PropTypes.oneOf(['success', 'error', 'warning', 'info']),
diff --git a/src/sentry/static/sentry/app/components/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectSelector.jsx
index 99404fd31e..69e7d0f024 100644
--- a/src/sentry/static/sentry/app/components/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectSelector.jsx
@@ -124,9 +124,7 @@ class ProjectSelector extends React.Component {
 
     if (multiProjects) {
       return [
-        sortArray(multiProjects, project => {
-          return [!project.isBookmarked, project.name];
-        }),
+        sortArray(multiProjects, project => [!project.isBookmarked, project.name]),
         nonMemberProjects || [],
       ];
     }
@@ -140,9 +138,7 @@ class ProjectSelector extends React.Component {
       : unfilteredProjects.filter(project => project.isMember);
 
     return [
-      sortArray(filteredProjects, project => {
-        return [!project.isBookmarked, project.name];
-      }),
+      sortArray(filteredProjects, project => [!project.isBookmarked, project.name]),
       [],
     ];
   }
diff --git a/src/sentry/static/sentry/app/components/projects/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/projects/missingProjectMembership.jsx
index aac6f76dc7..f7f3a64426 100644
--- a/src/sentry/static/sentry/app/components/projects/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/projects/missingProjectMembership.jsx
@@ -104,13 +104,11 @@ class MissingProjectMembership extends React.Component {
       );
     }
 
-    return teams.map(team => {
-      return (
-        <p key={team.slug}>
-          #{team.slug}: {this.renderJoinTeam(team, features)}
-        </p>
-      );
-    });
+    return teams.map(team => (
+      <p key={team.slug}>
+        #{team.slug}: {this.renderJoinTeam(team, features)}
+      </p>
+    ));
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/resolutionBox.jsx b/src/sentry/static/sentry/app/components/resolutionBox.jsx
index 2a5dbb63c8..6bc51bd4a9 100644
--- a/src/sentry/static/sentry/app/components/resolutionBox.jsx
+++ b/src/sentry/static/sentry/app/components/resolutionBox.jsx
@@ -63,14 +63,12 @@ export default class ResolutionBox extends React.Component {
     return t('This issue has been marked as resolved.');
   };
 
-  render = () => {
-    return (
-      <BannerContainer priority="default">
-        <BannerSummary>
-          <IconCheckmark color={theme.green} />
-          <span>{this.renderReason()}</span>
-        </BannerSummary>
-      </BannerContainer>
-    );
-  };
+  render = () => (
+    <BannerContainer priority="default">
+      <BannerSummary>
+        <IconCheckmark color={theme.green} />
+        <span>{this.renderReason()}</span>
+      </BannerSummary>
+    </BannerContainer>
+  );
 }
diff --git a/src/sentry/static/sentry/app/components/resultGrid.jsx b/src/sentry/static/sentry/app/components/resultGrid.jsx
index 7acf91be7a..cddfb1059f 100644
--- a/src/sentry/static/sentry/app/components/resultGrid.jsx
+++ b/src/sentry/static/sentry/app/components/resultGrid.jsx
@@ -19,9 +19,9 @@ class Filter extends React.Component {
   };
 
   getCurrentLabel = () => {
-    const selected = this.props.options.filter(item => {
-      return item[0] === (this.props.value || '');
-    })[0];
+    const selected = this.props.options.filter(
+      item => item[0] === (this.props.value || '')
+    )[0];
     if (selected) {
       return this.props.name + ': ' + selected[1];
     }
@@ -46,29 +46,27 @@ class Filter extends React.Component {
     );
   };
 
-  getSelector = () => {
-    return (
-      <DropdownLink title={this.getCurrentLabel()}>
-        {this.getDefaultItem()}
-        {this.props.options.map(item => {
-          const filterQuery = {};
-          filterQuery[this.props.queryKey] = item[0];
-          filterQuery.cursor = '';
-          const query = $.extend({}, this.props.location.query, filterQuery);
-          return (
-            <MenuItem
-              key={item[0]}
-              isActive={this.props.value === item[0]}
-              to={this.props.path}
-              query={query}
-            >
-              {item[1]}
-            </MenuItem>
-          );
-        })}
-      </DropdownLink>
-    );
-  };
+  getSelector = () => (
+    <DropdownLink title={this.getCurrentLabel()}>
+      {this.getDefaultItem()}
+      {this.props.options.map(item => {
+        const filterQuery = {};
+        filterQuery[this.props.queryKey] = item[0];
+        filterQuery.cursor = '';
+        const query = $.extend({}, this.props.location.query, filterQuery);
+        return (
+          <MenuItem
+            key={item[0]}
+            isActive={this.props.value === item[0]}
+            to={this.props.path}
+            query={query}
+          >
+            {item[1]}
+          </MenuItem>
+        );
+      })}
+    </DropdownLink>
+  );
 
   render() {
     return (
@@ -91,34 +89,29 @@ class SortBy extends React.Component {
     value: PropTypes.any,
   };
 
-  getCurrentSortLabel = () => {
-    return this.props.options.filter(item => {
-      return item[0] === this.props.value;
-    })[0][1];
-  };
+  getCurrentSortLabel = () =>
+    this.props.options.filter(item => item[0] === this.props.value)[0][1];
 
-  getSortBySelector = () => {
-    return (
-      <DropdownLink title={this.getCurrentSortLabel()} className="sorted-by">
-        {this.props.options.map(item => {
-          const query = $.extend({}, this.props.location.query, {
-            sortBy: item[0],
-            cursor: '',
-          });
-          return (
-            <MenuItem
-              isActive={this.props.value === item[0]}
-              key={item[0]}
-              to={this.props.path}
-              query={query}
-            >
-              {item[1]}
-            </MenuItem>
-          );
-        })}
-      </DropdownLink>
-    );
-  };
+  getSortBySelector = () => (
+    <DropdownLink title={this.getCurrentSortLabel()} className="sorted-by">
+      {this.props.options.map(item => {
+        const query = $.extend({}, this.props.location.query, {
+          sortBy: item[0],
+          cursor: '',
+        });
+        return (
+          <MenuItem
+            isActive={this.props.value === item[0]}
+            key={item[0]}
+            to={this.props.path}
+            query={query}
+          >
+            {item[1]}
+          </MenuItem>
+        );
+      })}
+    </DropdownLink>
+  );
 
   render() {
     if (this.props.options.length === 0) {
@@ -309,9 +302,9 @@ const ResultGrid = createReactClass({
   },
 
   renderResults() {
-    return this.state.rows.map(row => {
-      return <tr key={this.props.keyForRow(row)}>{this.props.columnsForRow(row)}</tr>;
-    });
+    return this.state.rows.map(row => (
+      <tr key={this.props.keyForRow(row)}>{this.props.columnsForRow(row)}</tr>
+    ));
   },
 
   render() {
@@ -346,18 +339,16 @@ const ResultGrid = createReactClass({
             path={this.props.path}
             location={this.props.location}
           />
-          {Object.keys(filters).map(filterKey => {
-            return (
-              <Filter
-                key={filterKey}
-                queryKey={filterKey}
-                value={this.state.filters[filterKey]}
-                path={this.props.path}
-                location={this.props.location}
-                {...filters[filterKey]}
-              />
-            );
-          })}
+          {Object.keys(filters).map(filterKey => (
+            <Filter
+              key={filterKey}
+              queryKey={filterKey}
+              value={this.state.filters[filterKey]}
+              path={this.props.path}
+              location={this.props.location}
+              {...filters[filterKey]}
+            />
+          ))}
         </div>
 
         <table className="table table-grid">
diff --git a/src/sentry/static/sentry/app/components/scoreBar.jsx b/src/sentry/static/sentry/app/components/scoreBar.jsx
index c52b8af704..d3c3b75082 100644
--- a/src/sentry/static/sentry/app/components/scoreBar.jsx
+++ b/src/sentry/static/sentry/app/components/scoreBar.jsx
@@ -40,9 +40,9 @@ class ScoreBar extends React.Component {
 
     return (
       <div className={className}>
-        {[...Array(scoreInBounds)].map((j, i) => {
-          return <Bar {...barProps} key={i} color={palette[paletteIndex]} />;
-        })}
+        {[...Array(scoreInBounds)].map((j, i) => (
+          <Bar {...barProps} key={i} color={palette[paletteIndex]} />
+        ))}
         {[...Array(maxScore - scoreInBounds)].map((j, i) => (
           <Bar key={`empty-${i}`} {...barProps} empty />
         ))}
diff --git a/src/sentry/static/sentry/app/components/search/index.jsx b/src/sentry/static/sentry/app/components/search/index.jsx
index 98b2a55074..59e574a59c 100644
--- a/src/sentry/static/sentry/app/components/search/index.jsx
+++ b/src/sentry/static/sentry/app/components/search/index.jsx
@@ -222,14 +222,14 @@ class Search extends React.Component {
                         </LoadingWrapper>
                       )}
                       {!isLoading &&
-                        results.slice(0, maxResults).map((resultObj, index) => {
-                          return this.renderItem({
+                        results.slice(0, maxResults).map((resultObj, index) =>
+                          this.renderItem({
                             resultObj,
                             index,
                             highlightedIndex,
                             getItemProps,
-                          });
-                        })}
+                          })
+                        )}
                       {!isLoading && !hasAnyResults && (
                         <EmptyItem>{t('No results found')}</EmptyItem>
                       )}
diff --git a/src/sentry/static/sentry/app/components/selectMembers/index.tsx b/src/sentry/static/sentry/app/components/selectMembers/index.tsx
index cb16cf66ac..b3dcd7f056 100644
--- a/src/sentry/static/sentry/app/components/selectMembers/index.tsx
+++ b/src/sentry/static/sentry/app/components/selectMembers/index.tsx
@@ -102,52 +102,46 @@ class SelectMembers extends React.Component<Props, State> {
     this.closeSelectMenu();
   });
 
-  renderUserBadge = (user: User) => {
-    return <IdBadge avatarSize={24} user={user} hideEmail useLink={false} />;
-  };
-
-  createMentionableUser = (user: User) => {
-    return {
-      value: user.id,
-      label: this.renderUserBadge(user),
-      searchKey: getSearchKeyForUser(user),
-      actor: {
-        type: 'user',
-        id: user.id,
-        name: user.name,
-      },
-    };
-  };
+  renderUserBadge = (user: User) => (
+    <IdBadge avatarSize={24} user={user} hideEmail useLink={false} />
+  );
+
+  createMentionableUser = (user: User) => ({
+    value: user.id,
+    label: this.renderUserBadge(user),
+    searchKey: getSearchKeyForUser(user),
+    actor: {
+      type: 'user',
+      id: user.id,
+      name: user.name,
+    },
+  });
 
-  createUnmentionableUser = ({user}) => {
-    return {
-      ...this.createMentionableUser(user),
-      disabled: true,
-      label: (
-        <DisabledLabel>
-          <Tooltip
-            position="left"
-            title={t('%s is not a member of project', user.name || user.email)}
-          >
-            {this.renderUserBadge(user)}
-          </Tooltip>
-        </DisabledLabel>
-      ),
-    };
-  };
+  createUnmentionableUser = ({user}) => ({
+    ...this.createMentionableUser(user),
+    disabled: true,
+    label: (
+      <DisabledLabel>
+        <Tooltip
+          position="left"
+          title={t('%s is not a member of project', user.name || user.email)}
+        >
+          {this.renderUserBadge(user)}
+        </Tooltip>
+      </DisabledLabel>
+    ),
+  });
 
-  createMentionableTeam = (team: Team): MentionableTeam => {
-    return {
-      value: team.id,
-      label: <IdBadge team={team} />,
-      searchKey: `#${team.slug}`,
-      actor: {
-        type: 'team',
-        id: team.id,
-        name: team.slug,
-      },
-    };
-  };
+  createMentionableTeam = (team: Team): MentionableTeam => ({
+    value: team.id,
+    label: <IdBadge team={team} />,
+    searchKey: `#${team.slug}`,
+    actor: {
+      type: 'team',
+      id: team.id,
+      name: team.slug,
+    },
+  });
 
   createUnmentionableTeam = (team: Team): UnmentionableTeam => {
     const {organization} = this.props;
@@ -311,15 +305,16 @@ class SelectMembers extends React.Component<Props, State> {
         }
       });
     })
-      .then(members => {
-        // Be careful here as we actually want the `users` object, otherwise it means user
-        // has not registered for sentry yet, but has been invited
-        return (members
-          ? (members as Member[])
-              .filter(({user}) => user && usersInProjectById.indexOf(user.id) === -1)
-              .map(this.createUnmentionableUser)
-          : []) as UnmentionableUser[];
-      })
+      .then(
+        members =>
+          // Be careful here as we actually want the `users` object, otherwise it means user
+          // has not registered for sentry yet, but has been invited
+          (members
+            ? (members as Member[])
+                .filter(({user}) => user && usersInProjectById.indexOf(user.id) === -1)
+                .map(this.createUnmentionableUser)
+            : []) as UnmentionableUser[]
+      )
       .then((members: UnmentionableUser[]) => {
         const options = [...usersInProject, ...members];
         this.setState({options});
diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
index d35c0be1ee..275dc30885 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
@@ -160,18 +160,16 @@ class Broadcasts extends React.Component {
                 {t('No recent updates from the Sentry team.')}
               </SidebarPanelEmpty>
             ) : (
-              broadcasts.map(item => {
-                return (
-                  <SidebarPanelItem
-                    key={item.id}
-                    hasSeen={item.hasSeen}
-                    title={item.title}
-                    message={item.message}
-                    link={item.link}
-                    cta={item.cta}
-                  />
-                );
-              })
+              broadcasts.map(item => (
+                <SidebarPanelItem
+                  key={item.id}
+                  hasSeen={item.hasSeen}
+                  title={item.title}
+                  message={item.message}
+                  link={item.link}
+                  cta={item.cta}
+                />
+              ))
             )}
           </SidebarPanel>
         )}
diff --git a/src/sentry/static/sentry/app/components/sidebar/help.jsx b/src/sentry/static/sentry/app/components/sidebar/help.jsx
index e2dc4daa97..393fab290f 100644
--- a/src/sentry/static/sentry/app/components/sidebar/help.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/help.jsx
@@ -32,37 +32,35 @@ class SidebarHelp extends React.Component {
   render() {
     return (
       <DropdownMenu>
-        {({isOpen, getActorProps, getMenuProps}) => {
-          return (
-            <HelpRoot>
-              <HelpActor {...getActorProps({onClick: this.handleActorClick})}>
-                <SidebarItem
-                  orientation={this.props.orientation}
-                  collapsed={this.props.collapsed}
-                  hasPanel={false}
-                  icon={<IconQuestion size="md" />}
-                  label={t('Help')}
-                  id="help"
-                />
-              </HelpActor>
+        {({isOpen, getActorProps, getMenuProps}) => (
+          <HelpRoot>
+            <HelpActor {...getActorProps({onClick: this.handleActorClick})}>
+              <SidebarItem
+                orientation={this.props.orientation}
+                collapsed={this.props.collapsed}
+                hasPanel={false}
+                icon={<IconQuestion size="md" />}
+                label={t('Help')}
+                id="help"
+              />
+            </HelpActor>
 
-              {isOpen && (
-                <HelpMenu {...getMenuProps()}>
-                  <Hook name="sidebar:help-menu" organization={this.props.organization} />
-                  <SidebarMenuItem onClick={this.handleSearchClick}>
-                    {t('Search Docs and FAQs')}
-                  </SidebarMenuItem>
-                  <SidebarMenuItem href="https://forum.sentry.io/" target="_blank">
-                    {t('Community Discussions')}
-                  </SidebarMenuItem>
-                  <SidebarMenuItem href="https://status.sentry.io/" target="_blank">
-                    {t('Service Status')}
-                  </SidebarMenuItem>
-                </HelpMenu>
-              )}
-            </HelpRoot>
-          );
-        }}
+            {isOpen && (
+              <HelpMenu {...getMenuProps()}>
+                <Hook name="sidebar:help-menu" organization={this.props.organization} />
+                <SidebarMenuItem onClick={this.handleSearchClick}>
+                  {t('Search Docs and FAQs')}
+                </SidebarMenuItem>
+                <SidebarMenuItem href="https://forum.sentry.io/" target="_blank">
+                  {t('Community Discussions')}
+                </SidebarMenuItem>
+                <SidebarMenuItem href="https://status.sentry.io/" target="_blank">
+                  {t('Service Status')}
+                </SidebarMenuItem>
+              </HelpMenu>
+            )}
+          </HelpRoot>
+        )}
       </DropdownMenu>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
index ab14575db7..882394bb03 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
@@ -73,95 +73,93 @@ const SidebarDropdown = withApi(
 
       return (
         <DropdownMenu>
-          {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
-            return (
-              <SidebarDropdownRoot {...getRootProps()}>
-                <SidebarDropdownActor
-                  type="button"
-                  data-test-id="sidebar-dropdown"
-                  {...getActorProps()}
-                >
-                  {avatar}
-                  {!collapsed && orientation !== 'top' && (
-                    <OrgAndUserWrapper>
-                      <OrgOrUserName>
-                        {hasOrganization ? org.name : user.name}{' '}
-                        <i className="icon-arrow-down" />
-                      </OrgOrUserName>
-                      <UserNameOrEmail>
-                        {hasOrganization ? user.name : user.email}
-                      </UserNameOrEmail>
-                    </OrgAndUserWrapper>
+          {({isOpen, getRootProps, getActorProps, getMenuProps}) => (
+            <SidebarDropdownRoot {...getRootProps()}>
+              <SidebarDropdownActor
+                type="button"
+                data-test-id="sidebar-dropdown"
+                {...getActorProps()}
+              >
+                {avatar}
+                {!collapsed && orientation !== 'top' && (
+                  <OrgAndUserWrapper>
+                    <OrgOrUserName>
+                      {hasOrganization ? org.name : user.name}{' '}
+                      <i className="icon-arrow-down" />
+                    </OrgOrUserName>
+                    <UserNameOrEmail>
+                      {hasOrganization ? user.name : user.email}
+                    </UserNameOrEmail>
+                  </OrgAndUserWrapper>
+                )}
+              </SidebarDropdownActor>
+
+              {isOpen && (
+                <OrgAndUserMenu {...getMenuProps()}>
+                  {hasOrganization && (
+                    <React.Fragment>
+                      <SidebarOrgSummary organization={org} />
+                      {hasOrgRead && (
+                        <SidebarMenuItem to={`/settings/${org.slug}/`}>
+                          {t('Organization settings')}
+                        </SidebarMenuItem>
+                      )}
+                      {hasMemberRead && (
+                        <SidebarMenuItem to={`/settings/${org.slug}/members/`}>
+                          {t('Members')}
+                        </SidebarMenuItem>
+                      )}
+
+                      {hasTeamRead && (
+                        <SidebarMenuItem to={`/settings/${org.slug}/teams/`}>
+                          {t('Teams')}
+                        </SidebarMenuItem>
+                      )}
+
+                      <Hook
+                        name="sidebar:organization-dropdown-menu"
+                        organization={org}
+                      />
+
+                      {!config.singleOrganization && (
+                        <SidebarMenuItem>
+                          <SwitchOrganization canCreateOrganization={canCreateOrg} />
+                        </SidebarMenuItem>
+                      )}
+
+                      <Divider />
+                    </React.Fragment>
                   )}
-                </SidebarDropdownActor>
-
-                {isOpen && (
-                  <OrgAndUserMenu {...getMenuProps()}>
-                    {hasOrganization && (
-                      <React.Fragment>
-                        <SidebarOrgSummary organization={org} />
-                        {hasOrgRead && (
-                          <SidebarMenuItem to={`/settings/${org.slug}/`}>
-                            {t('Organization settings')}
-                          </SidebarMenuItem>
-                        )}
-                        {hasMemberRead && (
-                          <SidebarMenuItem to={`/settings/${org.slug}/members/`}>
-                            {t('Members')}
-                          </SidebarMenuItem>
-                        )}
 
-                        {hasTeamRead && (
-                          <SidebarMenuItem to={`/settings/${org.slug}/teams/`}>
-                            {t('Teams')}
-                          </SidebarMenuItem>
+                  {!!user && (
+                    <React.Fragment>
+                      <UserSummary to="/settings/account/details/">
+                        <UserBadgeNoOverflow user={user} avatarSize={32} />
+                      </UserSummary>
+
+                      <div>
+                        <SidebarMenuItem to="/settings/account/">
+                          {t('User settings')}
+                        </SidebarMenuItem>
+                        <SidebarMenuItem to="/settings/account/api/">
+                          {t('API keys')}
+                        </SidebarMenuItem>
+                        {user.isSuperuser && (
+                          <SidebarMenuItem to="/manage/">{t('Admin')}</SidebarMenuItem>
                         )}
-
-                        <Hook
-                          name="sidebar:organization-dropdown-menu"
-                          organization={org}
-                        />
-
-                        {!config.singleOrganization && (
-                          <SidebarMenuItem>
-                            <SwitchOrganization canCreateOrganization={canCreateOrg} />
-                          </SidebarMenuItem>
-                        )}
-
-                        <Divider />
-                      </React.Fragment>
-                    )}
-
-                    {!!user && (
-                      <React.Fragment>
-                        <UserSummary to="/settings/account/details/">
-                          <UserBadgeNoOverflow user={user} avatarSize={32} />
-                        </UserSummary>
-
-                        <div>
-                          <SidebarMenuItem to="/settings/account/">
-                            {t('User settings')}
-                          </SidebarMenuItem>
-                          <SidebarMenuItem to="/settings/account/api/">
-                            {t('API keys')}
-                          </SidebarMenuItem>
-                          {user.isSuperuser && (
-                            <SidebarMenuItem to="/manage/">{t('Admin')}</SidebarMenuItem>
-                          )}
-                          <SidebarMenuItem
-                            data-test-id="sidebarSignout"
-                            onClick={this.handleLogout}
-                          >
-                            {t('Sign out')}
-                          </SidebarMenuItem>
-                        </div>
-                      </React.Fragment>
-                    )}
-                  </OrgAndUserMenu>
-                )}
-              </SidebarDropdownRoot>
-            );
-          }}
+                        <SidebarMenuItem
+                          data-test-id="sidebarSignout"
+                          onClick={this.handleLogout}
+                        >
+                          {t('Sign out')}
+                        </SidebarMenuItem>
+                      </div>
+                    </React.Fragment>
+                  )}
+                </OrgAndUserMenu>
+              )}
+            </SidebarDropdownRoot>
+          )}
         </DropdownMenu>
       );
     }
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx
index 80da6a90ac..4b1380ab1e 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx
@@ -28,65 +28,63 @@ class SwitchOrganization extends React.Component {
 
     return (
       <DropdownMenu isNestedDropdown>
-        {({isOpen, getMenuProps, getActorProps}) => {
-          return (
-            <React.Fragment>
-              <SwitchOrganizationMenuActor
-                data-test-id="sidebar-switch-org"
-                {...getActorProps()}
-                onClick={e => {
-                  // This overwrites `DropdownMenu.getActorProps.onClick` which normally handles clicks on actor
-                  // to toggle visibility of menu. Instead, do nothing because it is nested and we only want it
-                  // to appear when hovered on. Will also stop menu from closing when clicked on (which seems to be common
-                  // behavior);
-
-                  // Stop propagation so that dropdown menu doesn't close here
-                  e.stopPropagation();
-                }}
+        {({isOpen, getMenuProps, getActorProps}) => (
+          <React.Fragment>
+            <SwitchOrganizationMenuActor
+              data-test-id="sidebar-switch-org"
+              {...getActorProps()}
+              onClick={e => {
+                // This overwrites `DropdownMenu.getActorProps.onClick` which normally handles clicks on actor
+                // to toggle visibility of menu. Instead, do nothing because it is nested and we only want it
+                // to appear when hovered on. Will also stop menu from closing when clicked on (which seems to be common
+                // behavior);
+
+                // Stop propagation so that dropdown menu doesn't close here
+                e.stopPropagation();
+              }}
+            >
+              {t('Switch organization')}
+
+              <SubMenuCaret>
+                <i className="icon-arrow-right" />
+              </SubMenuCaret>
+            </SwitchOrganizationMenuActor>
+
+            {isOpen && (
+              <SwitchOrganizationMenu
+                data-test-id="sidebar-switch-org-menu"
+                {...getMenuProps()}
               >
-                {t('Switch organization')}
-
-                <SubMenuCaret>
-                  <i className="icon-arrow-right" />
-                </SubMenuCaret>
-              </SwitchOrganizationMenuActor>
-
-              {isOpen && (
-                <SwitchOrganizationMenu
-                  data-test-id="sidebar-switch-org-menu"
-                  {...getMenuProps()}
-                >
-                  <OrganizationList>
-                    {organizations.map(organization => {
-                      const url = `/organizations/${organization.slug}/`;
-
-                      return (
-                        <SidebarMenuItem key={organization.slug} to={url}>
-                          <SidebarOrgSummary organization={organization} />
-                        </SidebarMenuItem>
-                      );
-                    })}
-                  </OrganizationList>
-                  {hasOrganizations && canCreateOrganization && (
-                    <Divider css={{marginTop: 0}} />
-                  )}
-                  {canCreateOrganization && (
-                    <SidebarMenuItem
-                      data-test-id="sidebar-create-org"
-                      to="/organizations/new/"
-                      style={{alignItems: 'center'}}
-                    >
-                      <MenuItemLabelWithIcon>
-                        <AddIcon src="icon-circle-add" />
-                        <span>{t('Create a new organization')}</span>
-                      </MenuItemLabelWithIcon>
-                    </SidebarMenuItem>
-                  )}
-                </SwitchOrganizationMenu>
-              )}
-            </React.Fragment>
-          );
-        }}
+                <OrganizationList>
+                  {organizations.map(organization => {
+                    const url = `/organizations/${organization.slug}/`;
+
+                    return (
+                      <SidebarMenuItem key={organization.slug} to={url}>
+                        <SidebarOrgSummary organization={organization} />
+                      </SidebarMenuItem>
+                    );
+                  })}
+                </OrganizationList>
+                {hasOrganizations && canCreateOrganization && (
+                  <Divider css={{marginTop: 0}} />
+                )}
+                {canCreateOrganization && (
+                  <SidebarMenuItem
+                    data-test-id="sidebar-create-org"
+                    to="/organizations/new/"
+                    style={{alignItems: 'center'}}
+                  >
+                    <MenuItemLabelWithIcon>
+                      <AddIcon src="icon-circle-add" />
+                      <span>{t('Create a new organization')}</span>
+                    </MenuItemLabelWithIcon>
+                  </SidebarMenuItem>
+                )}
+              </SwitchOrganizationMenu>
+            )}
+          </React.Fragment>
+        )}
       </DropdownMenu>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
index c3f4e3f18b..75cfefd1e8 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
@@ -15,9 +15,7 @@ import TextOverflow from '../textOverflow';
 
 const LabelHook = HookOrDefault({
   hookName: 'sidebar:item-label',
-  defaultComponent: ({children}) => {
-    return <React.Fragment>{children}</React.Fragment>;
-  },
+  defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,
 });
 
 class SidebarItem extends React.Component {
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index f566381268..f2bed3604d 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -200,9 +200,8 @@ class SmartSearchBar extends React.Component {
    *
    * e.g. ["is:unassigned", "browser:\"Chrome 33.0\"", "assigned"]
    */
-  static getQueryTerms = (query, cursor) => {
-    return query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
-  };
+  static getQueryTerms = (query, cursor) =>
+    query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
 
   static defaultProps = {
     defaultQuery: '',
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/searchDropdown.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/searchDropdown.jsx
index 9dd64779a2..fe0f03d78e 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/searchDropdown.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/searchDropdown.jsx
@@ -48,17 +48,15 @@ class SearchDropdown extends React.PureComponent {
     );
   };
 
-  renderHeaderItem = item => {
-    return (
-      <SearchDropdownGroup key={item.title}>
-        <SearchDropdownGroupTitle>
-          <GroupTitleIcon className={classNames('icon', item.icon)} />
-          {item.title && item.title}
-          {item.desc && <span>{item.desc}</span>}
-        </SearchDropdownGroupTitle>
-      </SearchDropdownGroup>
-    );
-  };
+  renderHeaderItem = item => (
+    <SearchDropdownGroup key={item.title}>
+      <SearchDropdownGroupTitle>
+        <GroupTitleIcon className={classNames('icon', item.icon)} />
+        {item.title && item.title}
+        {item.desc && <span>{item.desc}</span>}
+      </SearchDropdownGroupTitle>
+    </SearchDropdownGroup>
+  );
 
   renderItem = item => (
     <SearchItem
diff --git a/src/sentry/static/sentry/app/components/splitDiff.jsx b/src/sentry/static/sentry/app/components/splitDiff.jsx
index b1d5e48b31..9b58949193 100644
--- a/src/sentry/static/sentry/app/components/splitDiff.jsx
+++ b/src/sentry/static/sentry/app/components/splitDiff.jsx
@@ -51,13 +51,11 @@ class SplitDiff extends React.Component {
                   <Line>
                     {line
                       .filter(result => !result.added)
-                      .map((result, i) => {
-                        return (
-                          <Word key={i} isRemoved={result.removed}>
-                            {result.value}
-                          </Word>
-                        );
-                      })}
+                      .map((result, i) => (
+                        <Word key={i} isRemoved={result.removed}>
+                          {result.value}
+                        </Word>
+                      ))}
                   </Line>
                 </Cell>
 
@@ -67,13 +65,11 @@ class SplitDiff extends React.Component {
                   <Line>
                     {line
                       .filter(result => !result.removed)
-                      .map((result, i) => {
-                        return (
-                          <Word key={i} isAdded={result.added}>
-                            {result.value}
-                          </Word>
-                        );
-                      })}
+                      .map((result, i) => (
+                        <Word key={i} isAdded={result.added}>
+                          {result.value}
+                        </Word>
+                      ))}
                   </Line>
                 </Cell>
               </tr>
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index f1d10adc38..896901084d 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -106,12 +106,11 @@ class StackedBarChart extends React.Component {
     return !isEqual(this.props, nextProps);
   }
 
-  getInterval = series => {
+  getInterval = series =>
     // TODO(dcramer): not guaranteed correct
-    return series.length && series[0].data.length > 1
+    series.length && series[0].data.length > 1
       ? series[0].data[1].x - series[0].data[0].x
       : null;
-  };
 
   pointsToSeries = points => {
     const series = [];
@@ -353,13 +352,9 @@ class StackedBarChart extends React.Component {
         const p = pointIndex[k];
         return {x: p.x, y: p.y};
       })
-      .sort((a, b) => {
-        return a.x - b.x;
-      });
+      .sort((a, b) => a.x - b.x);
 
-    markers.sort((a, b) => {
-      return a.x - b.x;
-    });
+    markers.sort((a, b) => a.x - b.x);
 
     const children = [];
     const markerChildren = [];
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index cfce1ef714..2f4d2463e4 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -31,9 +31,7 @@ class GroupChart extends React.Component {
       return null;
     }
     const {height} = this.props;
-    const chartData = stats.map(point => {
-      return {x: point[0], y: point[1]};
-    });
+    const chartData = stats.map(point => ({x: point[0], y: point[1]}));
 
     return (
       <LazyLoad debounce={50} height={height}>
diff --git a/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx b/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx
index 77927e515f..c0d9f56bcb 100644
--- a/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx
+++ b/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx
@@ -67,17 +67,15 @@ class ProcessingIssueList extends React.Component {
 
     return (
       <React.Fragment>
-        {issues.map((p, idx) => {
-          return (
-            <ProcessingIssueHint
-              key={idx}
-              issue={p}
-              projectId={p.project}
-              orgId={organization.slug}
-              showProject={showProject}
-            />
-          );
-        })}
+        {issues.map((p, idx) => (
+          <ProcessingIssueHint
+            key={idx}
+            issue={p}
+            projectId={p.project}
+            orgId={organization.slug}
+            showProject={showProject}
+          />
+        ))}
       </React.Fragment>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/u2f/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2f/u2finterface.jsx
index 3fd867b7f7..3fc8ab8848 100644
--- a/src/sentry/static/sentry/app/components/u2f/u2finterface.jsx
+++ b/src/sentry/static/sentry/app/components/u2f/u2finterface.jsx
@@ -157,9 +157,7 @@ class U2fInterface extends React.Component {
     );
   };
 
-  canTryAgain = () => {
-    return this.state.deviceFailure !== 'BAD_APPID';
-  };
+  canTryAgain = () => this.state.deviceFailure !== 'BAD_APPID';
 
   renderFailure = () => {
     const {deviceFailure} = this.state;
diff --git a/src/sentry/static/sentry/app/components/version.tsx b/src/sentry/static/sentry/app/components/version.tsx
index 45596daa23..08503bbad3 100644
--- a/src/sentry/static/sentry/app/components/version.tsx
+++ b/src/sentry/static/sentry/app/components/version.tsx
@@ -103,23 +103,21 @@ const Version = ({
     );
   };
 
-  const renderTooltipContent = () => {
-    return (
-      <TooltipContent
-        onClick={e => {
-          e.stopPropagation();
-        }}
-      >
-        <TooltipVersionWrapper>{version}</TooltipVersionWrapper>
-
-        <Clipboard value={version}>
-          <TooltipClipboardIconWrapper>
-            <IconCopy size="xs" color="white" />
-          </TooltipClipboardIconWrapper>
-        </Clipboard>
-      </TooltipContent>
-    );
-  };
+  const renderTooltipContent = () => (
+    <TooltipContent
+      onClick={e => {
+        e.stopPropagation();
+      }}
+    >
+      <TooltipVersionWrapper>{version}</TooltipVersionWrapper>
+
+      <Clipboard value={version}>
+        <TooltipClipboardIconWrapper>
+          <IconCopy size="xs" color="white" />
+        </TooltipClipboardIconWrapper>
+      </Clipboard>
+    </TooltipContent>
+  );
 
   return (
     <Tooltip
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 6204d77579..03a6702418 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -139,16 +139,13 @@ export const fields = {
         </HintPanelItem>
       );
     },
-    choices: ({groupingConfigs}) => {
-      return groupingConfigs.map(({id, hidden}) => {
-        return [
-          id.toString(),
-          <GroupingConfigItem key={id} hidden={hidden}>
-            {id}
-          </GroupingConfigItem>,
-        ];
-      });
-    },
+    choices: ({groupingConfigs}) =>
+      groupingConfigs.map(({id, hidden}) => [
+        id.toString(),
+        <GroupingConfigItem key={id} hidden={hidden}>
+          {id}
+        </GroupingConfigItem>,
+      ]),
     help: t('Sets the grouping algorithm to be used for new events.'),
     visible: ({features}) => features.has('set-grouping-config'),
   },
@@ -175,12 +172,8 @@ export const fields = {
         </HintPanelItem>
       );
     },
-    choices: ({groupingEnhancementBases}) => {
-      return groupingEnhancementBases.map(({id}) => [
-        id.toString(),
-        <code key={id}>{id}</code>,
-      ]);
-    },
+    choices: ({groupingEnhancementBases}) =>
+      groupingEnhancementBases.map(({id}) => [id.toString(), <code key={id}>{id}</code>]),
     help: t('The built-in base version of grouping enhancements.'),
     visible: ({features}) => features.has('set-grouping-config'),
   },
diff --git a/src/sentry/static/sentry/app/data/forms/sentryApplication.tsx b/src/sentry/static/sentry/app/data/forms/sentryApplication.tsx
index de0b6a66f0..efa3c1f7af 100644
--- a/src/sentry/static/sentry/app/data/forms/sentryApplication.tsx
+++ b/src/sentry/static/sentry/app/data/forms/sentryApplication.tsx
@@ -68,9 +68,7 @@ const getPublicFormFields = (): Field[] => [
     label: 'Schema',
     autosize: true,
     help: 'Schema for your UI components',
-    getValue: (val: string) => {
-      return val === '' ? {} : JSON.parse(val);
-    },
+    getValue: (val: string) => (val === '' ? {} : JSON.parse(val)),
     setValue: (val: string) => {
       const schema = JSON.stringify(val, null, 2);
       if (schema === '{}') {
diff --git a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
index f2bd552d69..ebaee7d75f 100644
--- a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
@@ -440,13 +440,11 @@ class IssueActions extends PluginComponentBase {
               </p>
               <p>The following settings must be configured:</p>
               <ul>
-                {error.required_auth_settings.map((setting, i) => {
-                  return (
-                    <li key={i}>
-                      <code>{setting}</code>
-                    </li>
-                  );
-                })}
+                {error.required_auth_settings.map((setting, i) => (
+                  <li key={i}>
+                    <code>{setting}</code>
+                  </li>
+                ))}
               </ul>
             </div>
           ) : (
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index 0ad6f90930..34695b825d 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -203,15 +203,15 @@ class PluginSettings extends PluginComponentBase {
               </ul>
             </div>
           )}
-          {this.state.fieldList.map(f => {
-            return this.renderField({
+          {this.state.fieldList.map(f =>
+            this.renderField({
               key: f.name,
               config: f,
               formData: this.state.formData,
               formErrors: this.state.errors,
               onChange: this.changeField.bind(this, f.name),
-            });
-          })}
+            })
+          )}
         </Flex>
       </Form>
     );
diff --git a/src/sentry/static/sentry/app/plugins/jira/components/issueActions.jsx b/src/sentry/static/sentry/app/plugins/jira/components/issueActions.jsx
index a7066810ba..9d1a6370e4 100644
--- a/src/sentry/static/sentry/app/plugins/jira/components/issueActions.jsx
+++ b/src/sentry/static/sentry/app/plugins/jira/components/issueActions.jsx
@@ -88,9 +88,7 @@ class IssueActions extends DefaultIssuePlugin.DefaultIssueActions {
             </div>
           );
         };
-        const isRequired = f => {
-          return f.required !== null ? f.required : true;
-        };
+        const isRequired = f => (f.required !== null ? f.required : true);
 
         const fields = this.state.createFieldList;
         const requiredFields = fields.filter(f => isRequired(f)).map(f => renderField(f));
diff --git a/src/sentry/static/sentry/app/plugins/jira/components/settings.jsx b/src/sentry/static/sentry/app/plugins/jira/components/settings.jsx
index 25989a2517..9a5ba11e07 100644
--- a/src/sentry/static/sentry/app/plugins/jira/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/jira/components/settings.jsx
@@ -142,15 +142,13 @@ class Settings extends BasePlugin.DefaultSettings {
     let onSubmit;
     let submitLabel;
     if (this.state.editing) {
-      fields = this.state.fieldList.filter(f => {
-        return this.PAGE_FIELD_LIST[this.state.page].includes(f.name);
-      });
+      fields = this.state.fieldList.filter(f =>
+        this.PAGE_FIELD_LIST[this.state.page].includes(f.name)
+      );
       onSubmit = this.onSubmit;
       submitLabel = this.isLastPage() ? 'Finish' : 'Save and Continue';
     } else {
-      fields = this.state.fieldList.map(f => {
-        return Object.assign({}, f, {readonly: true});
-      });
+      fields = this.state.fieldList.map(f => Object.assign({}, f, {readonly: true}));
       onSubmit = this.startEditing;
       submitLabel = 'Edit';
     }
@@ -178,14 +176,14 @@ class Settings extends BasePlugin.DefaultSettings {
             </ul>
           </div>
         )}
-        {fields.map(f => {
-          return this.renderField({
+        {fields.map(f =>
+          this.renderField({
             config: f,
             formData: this.state.formData,
             formErrors: this.state.errors,
             onChange: this.changeField.bind(this, f.name),
-          });
-        })}
+          })
+        )}
       </Form>
     );
   }
diff --git a/src/sentry/static/sentry/app/plugins/sessionstack/components/settings.jsx b/src/sentry/static/sentry/app/plugins/sessionstack/components/settings.jsx
index a8d319a421..22063c0e58 100644
--- a/src/sentry/static/sentry/app/plugins/sessionstack/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/sessionstack/components/settings.jsx
@@ -16,20 +16,18 @@ class Settings extends BasePlugin.DefaultSettings {
   }
 
   renderFields(fields) {
-    return fields.map(f => {
-      return this.renderField({
+    return fields.map(f =>
+      this.renderField({
         config: f,
         formData: this.state.formData,
         formErrors: this.state.errors,
         onChange: this.changeField.bind(this, f.name),
-      });
-    });
+      })
+    );
   }
 
   filterFields(fields, fieldNames) {
-    return fields.filter(field => {
-      return fieldNames.includes(field.name);
-    });
+    return fields.filter(field => fieldNames.includes(field.name));
   }
 
   toggleOnPremisesConfiguration() {
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index e6089dd6eb..52238054d7 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -16,18 +16,16 @@ import localStorage from 'app/utils/localStorage';
 
 const DEFAULT_PARAMS = getParams({});
 
-const getDefaultSelection = () => {
-  return {
-    projects: [],
-    environments: [],
-    datetime: {
-      [DATE_TIME.START]: DEFAULT_PARAMS.start || null,
-      [DATE_TIME.END]: DEFAULT_PARAMS.end || null,
-      [DATE_TIME.PERIOD]: DEFAULT_PARAMS.statsPeriod || null,
-      [DATE_TIME.UTC]: DEFAULT_PARAMS.utc || null,
-    },
-  };
-};
+const getDefaultSelection = () => ({
+  projects: [],
+  environments: [],
+  datetime: {
+    [DATE_TIME.START]: DEFAULT_PARAMS.start || null,
+    [DATE_TIME.END]: DEFAULT_PARAMS.end || null,
+    [DATE_TIME.PERIOD]: DEFAULT_PARAMS.statsPeriod || null,
+    [DATE_TIME.UTC]: DEFAULT_PARAMS.utc || null,
+  },
+});
 
 const getProjectsByIds = async (organization, projectIds, api) => {
   const query = {};
diff --git a/src/sentry/static/sentry/app/stores/groupingStore.jsx b/src/sentry/static/sentry/app/stores/groupingStore.jsx
index 57a8a72341..e2b8a8f095 100644
--- a/src/sentry/static/sentry/app/stores/groupingStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupingStore.jsx
@@ -87,25 +87,26 @@ const GroupingStore = Reflux.createStore({
     this.init();
     this.triggerFetchState();
 
-    const promises = requests.map(({endpoint, queryParams, dataKey}) => {
-      return new Promise((resolve, reject) => {
-        api.request(endpoint, {
-          method: 'GET',
-          data: queryParams,
-          success: (data, _, jqXHR) => {
-            resolve({
-              dataKey,
-              data,
-              links: jqXHR.getResponseHeader('Link'),
-            });
-          },
-          error: err => {
-            const error = (err.responseJSON && err.responseJSON.detail) || true;
-            reject(error);
-          },
-        });
-      });
-    });
+    const promises = requests.map(
+      ({endpoint, queryParams, dataKey}) =>
+        new Promise((resolve, reject) => {
+          api.request(endpoint, {
+            method: 'GET',
+            data: queryParams,
+            success: (data, _, jqXHR) => {
+              resolve({
+                dataKey,
+                data,
+                links: jqXHR.getResponseHeader('Link'),
+              });
+            },
+            error: err => {
+              const error = (err.responseJSON && err.responseJSON.detail) || true;
+              reject(error);
+            },
+          });
+        })
+    );
 
     const responseProcessors = {
       merged: item => {
diff --git a/src/sentry/static/sentry/app/stores/guideStore.jsx b/src/sentry/static/sentry/app/stores/guideStore.jsx
index bac775e588..704fdba866 100644
--- a/src/sentry/static/sentry/app/stores/guideStore.jsx
+++ b/src/sentry/static/sentry/app/stores/guideStore.jsx
@@ -77,9 +77,9 @@ const GuideStore = Reflux.createStore({
   onCloseGuide() {
     const {currentGuide} = this.state;
     this.state.guides[
-      Object.keys(this.state.guides).find(key => {
-        return this.state.guides[key].id === currentGuide.id;
-      })
+      Object.keys(this.state.guides).find(
+        key => this.state.guides[key].id === currentGuide.id
+      )
     ].seen = true;
     // Don't continue to force show if the user dismissed the guide.
     this.state.forceShow = false;
@@ -136,11 +136,11 @@ const GuideStore = Reflux.createStore({
     // sort() so that we pick a guide deterministically every time this function is called.
     let guideKeys = Object.keys(this.state.guides)
       .sort()
-      .filter(key => {
-        return this.state.guides[key].required_targets.every(
+      .filter(key =>
+        this.state.guides[key].required_targets.every(
           t => availableTargets.indexOf(t) >= 0
-        );
-      });
+        )
+      );
 
     if (!this.state.forceShow) {
       const user = ConfigStore.get('user');
diff --git a/src/sentry/static/sentry/app/stores/hookStore.tsx b/src/sentry/static/sentry/app/stores/hookStore.tsx
index 4c71330eaa..4e4d3ffa37 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.tsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.tsx
@@ -94,9 +94,7 @@ const hookStoreConfig: Reflux.StoreDefinition & HookStoreInterface = {
     if (isUndefined(this.hooks[hookName])) {
       return;
     }
-    this.hooks[hookName] = this.hooks[hookName]!.filter(cb => {
-      return cb !== callback;
-    });
+    this.hooks[hookName] = this.hooks[hookName]!.filter(cb => cb !== callback);
     this.trigger(hookName, this.hooks[hookName]);
   },
 
diff --git a/src/sentry/static/sentry/app/stores/indicatorStore.jsx b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
index d17918c1a3..8a25a83088 100644
--- a/src/sentry/static/sentry/app/stores/indicatorStore.jsx
+++ b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
@@ -86,9 +86,7 @@ const IndicatorStore = Reflux.createStore({
       return;
     }
 
-    this.items = this.items.filter(item => {
-      return item !== indicator;
-    });
+    this.items = this.items.filter(item => item !== indicator);
 
     if (indicator.clearId) {
       window.clearTimeout(indicator.options.clearId);
diff --git a/src/sentry/static/sentry/app/stores/tagStore.jsx b/src/sentry/static/sentry/app/stores/tagStore.jsx
index 54fb64ee90..9f0550883d 100644
--- a/src/sentry/static/sentry/app/stores/tagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/tagStore.jsx
@@ -16,9 +16,7 @@ const getUsername = ({isManaged, username, email}) => {
   }
 };
 
-const getMemberListStoreUsernames = () => {
-  return MemberListStore.getAll().map(getUsername);
-};
+const getMemberListStoreUsernames = () => MemberListStore.getAll().map(getUsername);
 
 const TagStore = Reflux.createStore({
   listenables: TagActions,
diff --git a/src/sentry/static/sentry/app/styles/text.tsx b/src/sentry/static/sentry/app/styles/text.tsx
index 2c00077bd5..f105691f9b 100644
--- a/src/sentry/static/sentry/app/styles/text.tsx
+++ b/src/sentry/static/sentry/app/styles/text.tsx
@@ -1,74 +1,72 @@
 import {css} from '@emotion/core';
 
-const textStyles = () => {
-  return css`
-    /* stylelint-disable no-descending-specificity */
-    h1,
-    h2,
-    h3,
-    h4,
-    h5,
-    h6,
-    p,
-    ul,
-    ol,
-    table,
-    dl,
-    blockquote,
-    form,
-    pre,
-    .auto-select-text,
-    .section,
-    [class^='highlight-'] {
-      margin-bottom: 20px;
+const textStyles = () => css`
+  /* stylelint-disable no-descending-specificity */
+  h1,
+  h2,
+  h3,
+  h4,
+  h5,
+  h6,
+  p,
+  ul,
+  ol,
+  table,
+  dl,
+  blockquote,
+  form,
+  pre,
+  .auto-select-text,
+  .section,
+  [class^='highlight-'] {
+    margin-bottom: 20px;
 
-      &:last-child {
-        margin-bottom: 0;
-      }
+    &:last-child {
+      margin-bottom: 0;
     }
+  }
 
-    h1,
-    h2,
-    h3,
-    h4,
-    h5,
-    h6 {
-      line-height: 1.2;
-    }
+  h1,
+  h2,
+  h3,
+  h4,
+  h5,
+  h6 {
+    line-height: 1.2;
+  }
 
-    p,
-    ul,
-    ol,
-    blockquote {
-      line-height: 1.5;
-    }
+  p,
+  ul,
+  ol,
+  blockquote {
+    line-height: 1.5;
+  }
 
-    h1 {
-      font-size: 2em;
-    }
+  h1 {
+    font-size: 2em;
+  }
 
-    h2 {
-      font-size: 1.75em;
-    }
+  h2 {
+    font-size: 1.75em;
+  }
 
-    h3 {
-      font-size: 1.5em;
-    }
+  h3 {
+    font-size: 1.5em;
+  }
 
-    h4 {
-      font-size: 1.25em;
-    }
+  h4 {
+    font-size: 1.25em;
+  }
 
-    h5 {
-      font-size: 1em;
-    }
+  h5 {
+    font-size: 1em;
+  }
 
-    pre {
-      word-break: break-all;
-      white-space: pre-wrap;
-    }
-    /* stylelint-enable */
-  `;
-};
+  pre {
+    word-break: break-all;
+    white-space: pre-wrap;
+  }
+  /* stylelint-enable */
+`;
 
 export default textStyles;
diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index b688488155..338e7345a8 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -144,9 +144,10 @@ export function percent(value: number, totalValue: number): number {
 }
 
 export function toTitleCase(str: string): string {
-  return str.replace(/\w\S*/g, txt => {
-    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
-  });
+  return str.replace(
+    /\w\S*/g,
+    txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
+  );
 }
 
 export function formatBytes(bytes: number): string {
diff --git a/src/sentry/static/sentry/app/utils/__mocks__/localStorage.tsx b/src/sentry/static/sentry/app/utils/__mocks__/localStorage.tsx
index a50ff82387..3305988b68 100644
--- a/src/sentry/static/sentry/app/utils/__mocks__/localStorage.tsx
+++ b/src/sentry/static/sentry/app/utils/__mocks__/localStorage.tsx
@@ -1,9 +1,7 @@
 const localStorageMock = function() {
   let store = {};
   return {
-    getItem: jest.fn(key => {
-      return store[key];
-    }),
+    getItem: jest.fn(key => store[key]),
     setItem: jest.fn((key, value) => {
       store[key] = value.toString();
     }),
diff --git a/src/sentry/static/sentry/app/utils/consolidatedScopes.tsx b/src/sentry/static/sentry/app/utils/consolidatedScopes.tsx
index 97d101f466..0310b44343 100644
--- a/src/sentry/static/sentry/app/utils/consolidatedScopes.tsx
+++ b/src/sentry/static/sentry/app/utils/consolidatedScopes.tsx
@@ -44,9 +44,7 @@ const permissionLevel = (scope: string): number => {
   return PERMISSION_LEVELS[permission];
 };
 
-const compareScopes = (a: string, b: string) => {
-  return permissionLevel(a) - permissionLevel(b);
-};
+const compareScopes = (a: string, b: string) => permissionLevel(a) - permissionLevel(b);
 
 /**
  * Return the most permissive scope for each resource.
diff --git a/src/sentry/static/sentry/app/utils/getStacktraceBody.jsx b/src/sentry/static/sentry/app/utils/getStacktraceBody.jsx
index b34bfede73..82d5514fcc 100644
--- a/src/sentry/static/sentry/app/utils/getStacktraceBody.jsx
+++ b/src/sentry/static/sentry/app/utils/getStacktraceBody.jsx
@@ -27,7 +27,5 @@ export default function getStacktraceBody(event) {
   return exc.data.values
     .filter(value => !!value.stacktrace)
     .map(value => rawStacktraceContent(value.stacktrace, event.platform, value))
-    .reduce((acc, value) => {
-      return acc.concat(value);
-    }, []);
+    .reduce((acc, value) => acc.concat(value), []);
 }
diff --git a/src/sentry/static/sentry/app/utils/guid.tsx b/src/sentry/static/sentry/app/utils/guid.tsx
index 0a87ce8cf7..84d1b7263d 100644
--- a/src/sentry/static/sentry/app/utils/guid.tsx
+++ b/src/sentry/static/sentry/app/utils/guid.tsx
@@ -1,8 +1,7 @@
 export function uniqueId(): string {
-  const s4 = (): string => {
-    return Math.floor((1 + Math.random()) * 0x10000)
+  const s4 = (): string =>
+    Math.floor((1 + Math.random()) * 0x10000)
       .toString(16)
       .substring(1);
-  };
   return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
 }
diff --git a/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx b/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
index a752c5d995..373810d89c 100644
--- a/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
+++ b/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
@@ -65,8 +65,8 @@ const getFuseMatches = ({value, indices}) => {
 /**
  * Given a match object from fuse.js, returns an array of components with "highlighted" (bold) substrings.
  */
-const highlightFuseMatches = (matchObj, Marker = 'mark') => {
-  return getFuseMatches(matchObj).map(({highlight, text}, index) => {
+const highlightFuseMatches = (matchObj, Marker = 'mark') =>
+  getFuseMatches(matchObj).map(({highlight, text}, index) => {
     if (!text) {
       return null;
     }
@@ -76,7 +76,6 @@ const highlightFuseMatches = (matchObj, Marker = 'mark') => {
 
     return <span key={index}>{text}</span>;
   });
-};
 
 export {getFuseMatches};
 export default highlightFuseMatches;
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 56e42d91c6..4fc70fc409 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -25,9 +25,8 @@ export const clearAnalyticsSession = () => {
   window.sessionStorage.removeItem(INTEGRATIONS_ANALYTICS_SESSION_KEY);
 };
 
-export const getAnalyticsSessionId = () => {
-  return window.sessionStorage.getItem(INTEGRATIONS_ANALYTICS_SESSION_KEY);
-};
+export const getAnalyticsSessionId = () =>
+  window.sessionStorage.getItem(INTEGRATIONS_ANALYTICS_SESSION_KEY);
 
 export const isIntegrationDirectoryActive = () =>
   localStorage.getItem(USE_INTEGRATION_DIRECTORY) === '1';
diff --git a/src/sentry/static/sentry/app/utils/streamManager.jsx b/src/sentry/static/sentry/app/utils/streamManager.jsx
index 93b98b56d6..102fcc633d 100644
--- a/src/sentry/static/sentry/app/utils/streamManager.jsx
+++ b/src/sentry/static/sentry/app/utils/streamManager.jsx
@@ -41,9 +41,7 @@ class StreamManager {
     return this.store
       .getAllItems()
       .slice()
-      .sort((a, b) => {
-        return this.idList.indexOf(a.id) - this.idList.indexOf(b.id);
-      });
+      .sort((a, b) => this.idList.indexOf(a.id) - this.idList.indexOf(b.id));
   }
 
   unshift(items = []) {
diff --git a/src/sentry/static/sentry/app/views/admin/adminLayout.jsx b/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
index eeead60ef9..cccae54bd6 100644
--- a/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
@@ -6,9 +6,7 @@ import ListLink from 'app/components/links/listLink';
 import Sidebar from 'app/components/sidebar';
 
 export default class AdminLayout extends React.Component {
-  getTitle = () => {
-    return 'Sentry Admin';
-  };
+  getTitle = () => 'Sentry Admin';
 
   render() {
     return (
diff --git a/src/sentry/static/sentry/app/views/admin/adminOrganizations.jsx b/src/sentry/static/sentry/app/views/admin/adminOrganizations.jsx
index 275058842c..43c6823e16 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOrganizations.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOrganizations.jsx
@@ -6,17 +6,15 @@ import ResultGrid from 'app/components/resultGrid';
 import {t} from 'app/locale';
 
 class AdminOrganizations extends React.Component {
-  getRow = row => {
-    return [
-      <td>
-        <strong>
-          <Link to={`/${row.slug}/`}>{row.name}</Link>
-        </strong>
-        <br />
-        <small>{row.slug}</small>
-      </td>,
-    ];
-  };
+  getRow = row => [
+    <td>
+      <strong>
+        <Link to={`/${row.slug}/`}>{row.name}</Link>
+      </strong>
+      <br />
+      <small>{row.slug}</small>
+    </td>,
+  ];
 
   render() {
     const columns = [<th>Organization</th>];
diff --git a/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
index 2126aa9d82..f182c26244 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
@@ -86,9 +86,7 @@ const ApiChart = createReactClass({
   },
 
   processRawSeries(series) {
-    return series.map(item => {
-      return {x: item[0], y: item[1]};
-    });
+    return series.map(item => ({x: item[0], y: item[1]}));
   },
 
   getChartSeries() {
diff --git a/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
index c7728088e5..946e6092af 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
@@ -110,13 +110,11 @@ const EventChart = createReactClass({
         avgRate: parseInt(aReceived[0] / aReceived[1] / 60, 10),
       },
       stats: {
-        rejected: Object.keys(sRejected).map(ts => {
-          return {x: ts, y: sRejected[ts] || null};
-        }),
-        accepted: Object.keys(sReceived).map(ts => {
+        rejected: Object.keys(sRejected).map(ts => ({x: ts, y: sRejected[ts] || null})),
+        accepted: Object.keys(sReceived).map(ts =>
           // total number of events accepted (received - rejected)
-          return {x: ts, y: sReceived[ts] - sRejected[ts]};
-        }),
+          ({x: ts, y: sReceived[ts] - sRejected[ts]})
+        ),
       },
       loading: false,
     });
diff --git a/src/sentry/static/sentry/app/views/admin/adminProjects.jsx b/src/sentry/static/sentry/app/views/admin/adminProjects.jsx
index ecb0f7b12d..7696ded1c3 100644
--- a/src/sentry/static/sentry/app/views/admin/adminProjects.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminProjects.jsx
@@ -10,19 +10,17 @@ export const prettyDate = function(x) {
 };
 
 class AdminProjects extends React.Component {
-  getRow = row => {
-    return [
-      <td>
-        <strong>
-          <a href={`/${row.organization.slug}/${row.slug}/`}>{row.name}</a>
-        </strong>
-        <br />
-        <small>{row.organization.name}</small>
-      </td>,
-      <td style={{textAlign: 'center'}}>{row.status}</td>,
-      <td style={{textAlign: 'right'}}>{prettyDate(row.dateCreated)}</td>,
-    ];
-  };
+  getRow = row => [
+    <td>
+      <strong>
+        <a href={`/${row.organization.slug}/${row.slug}/`}>{row.name}</a>
+      </strong>
+      <br />
+      <small>{row.organization.name}</small>
+    </td>,
+    <td style={{textAlign: 'center'}}>{row.status}</td>,
+    <td style={{textAlign: 'right'}}>{prettyDate(row.dateCreated)}</td>,
+  ];
 
   render() {
     const columns = [
diff --git a/src/sentry/static/sentry/app/views/admin/adminQueue.jsx b/src/sentry/static/sentry/app/views/admin/adminQueue.jsx
index 43b1b79bb1..af48d139f3 100644
--- a/src/sentry/static/sentry/app/views/admin/adminQueue.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminQueue.jsx
@@ -46,19 +46,17 @@ export default class AdminQueue extends AsyncView {
     return (
       <div>
         <div className="btn-group pull-right">
-          {['1h', '1d', '1w'].map(r => {
-            return (
-              <a
-                className={`btn btn-sm ${
-                  r === this.state.timeWindow ? 'btn-primary' : 'btn-default'
-                }`}
-                onClick={() => this.changeWindow(r)}
-                key={r}
-              >
-                {r}
-              </a>
-            );
-          })}
+          {['1h', '1d', '1w'].map(r => (
+            <a
+              className={`btn btn-sm ${
+                r === this.state.timeWindow ? 'btn-primary' : 'btn-default'
+              }`}
+              onClick={() => this.changeWindow(r)}
+              key={r}
+            >
+              {r}
+            </a>
+          ))}
         </div>
 
         <h3 className="no-border">Queue Overview</h3>
diff --git a/src/sentry/static/sentry/app/views/admin/adminUsers.jsx b/src/sentry/static/sentry/app/views/admin/adminUsers.jsx
index cc2a2fe392..98355cb4cb 100644
--- a/src/sentry/static/sentry/app/views/admin/adminUsers.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminUsers.jsx
@@ -11,19 +11,17 @@ export const prettyDate = function(x) {
 };
 
 class AdminUsers extends React.Component {
-  getRow = row => {
-    return [
-      <td>
-        <strong>
-          <Link to={`/manage/users/${row.id}/`}>{row.username}</Link>
-        </strong>
-        <br />
-        {row.email !== row.username && <small>{row.email}</small>}
-      </td>,
-      <td style={{textAlign: 'center'}}>{prettyDate(row.dateJoined)}</td>,
-      <td style={{textAlign: 'center'}}>{prettyDate(row.lastLogin)}</td>,
-    ];
-  };
+  getRow = row => [
+    <td>
+      <strong>
+        <Link to={`/manage/users/${row.id}/`}>{row.username}</Link>
+      </strong>
+      <br />
+      {row.email !== row.username && <small>{row.email}</small>}
+    </td>,
+    <td style={{textAlign: 'center'}}>{prettyDate(row.dateJoined)}</td>,
+    <td style={{textAlign: 'center'}}>{prettyDate(row.lastLogin)}</td>,
+  ];
 
   render() {
     const columns = [
diff --git a/src/sentry/static/sentry/app/views/alerts/details/activity/activityPlaceholder.tsx b/src/sentry/static/sentry/app/views/alerts/details/activity/activityPlaceholder.tsx
index 2f7d22a4b6..73a0888e70 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/activity/activityPlaceholder.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/activity/activityPlaceholder.tsx
@@ -5,19 +5,17 @@ import ActivityItem from 'app/components/activity/item';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
-const ActivityPlaceholder = () => {
-  return (
-    <ActivityItem
-      author={null}
-      bubbleProps={{
-        background: theme.placeholderBackground,
-        borderColor: theme.placeholderBackground,
-      }}
-    >
-      {() => <Placeholder />}
-    </ActivityItem>
-  );
-};
+const ActivityPlaceholder = () => (
+  <ActivityItem
+    author={null}
+    bubbleProps={{
+      background: theme.placeholderBackground,
+      borderColor: theme.placeholderBackground,
+    }}
+  >
+    {() => <Placeholder />}
+  </ActivityItem>
+);
 
 const Placeholder = styled('div')`
   padding: ${space(4)};
diff --git a/src/sentry/static/sentry/app/views/alerts/details/chart.tsx b/src/sentry/static/sentry/app/views/alerts/details/chart.tsx
index ce3d662af4..8256cc85e2 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/chart.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/chart.tsx
@@ -48,12 +48,10 @@ export default class Chart extends React.PureComponent<Props> {
   render() {
     const {aggregation, data, detected, closed} = this.props;
 
-    const chartData = data.map(([ts, val]) => {
-      return [
-        ts * 1000,
-        val.length ? val.reduce((acc, {count} = {count: 0}) => acc + count, 0) : 0,
-      ];
-    });
+    const chartData = data.map(([ts, val]) => [
+      ts * 1000,
+      val.length ? val.reduce((acc, {count} = {count: 0}) => acc + count, 0) : 0,
+    ]);
 
     const detectedTs = detected && moment.utc(detected).unix();
     const closedTs = closed && moment.utc(closed).unix();
diff --git a/src/sentry/static/sentry/app/views/discover/analytics.tsx b/src/sentry/static/sentry/app/views/discover/analytics.tsx
index 6215f4add2..1ec8998ac7 100644
--- a/src/sentry/static/sentry/app/views/discover/analytics.tsx
+++ b/src/sentry/static/sentry/app/views/discover/analytics.tsx
@@ -26,13 +26,11 @@ export function trackQuery(organization: Organization, query: Query) {
 
   data.conditions =
     query.conditions &&
-    query.conditions.map(condition => {
-      return [
-        condition[0],
-        condition[1],
-        typeof condition[2] === 'string' ? '[REDACTED]' : condition[2],
-      ];
-    });
+    query.conditions.map(condition => [
+      condition[0],
+      condition[1],
+      typeof condition[2] === 'string' ? '[REDACTED]' : condition[2],
+    ]);
 
   analytics('discover.query', data);
 }
diff --git a/src/sentry/static/sentry/app/views/discover/index.tsx b/src/sentry/static/sentry/app/views/discover/index.tsx
index 133aea3982..3e29168bb4 100644
--- a/src/sentry/static/sentry/app/views/discover/index.tsx
+++ b/src/sentry/static/sentry/app/views/discover/index.tsx
@@ -132,9 +132,7 @@ class DiscoverContainer extends React.Component<Props, State> {
 
   private queryBuilder: any;
 
-  loadTags = () => {
-    return this.queryBuilder.load();
-  };
+  loadTags = () => this.queryBuilder.load();
 
   setGlobalSelectionDate(query: ReturnType<typeof getQueryFromQueryString> | null) {
     if (query) {
diff --git a/src/sentry/static/sentry/app/views/discover/result/table.tsx b/src/sentry/static/sentry/app/views/discover/result/table.tsx
index 0e4ff1f6db..42ad1e4539 100644
--- a/src/sentry/static/sentry/app/views/discover/result/table.tsx
+++ b/src/sentry/static/sentry/app/views/discover/result/table.tsx
@@ -191,9 +191,9 @@ class ResultTable extends React.Component<Props> {
     }
 
     const row = data[rowIndex - 1]; // -1 offset due to header row
-    const colWidths = columnsToCheck.map(col => {
-      return this.measureText(getDisplayText(row[col]), false);
-    });
+    const colWidths = columnsToCheck.map(col =>
+      this.measureText(getDisplayText(row[col]), false)
+    );
     const maxColWidth = Math.max(...colWidths, 0);
 
     // Number of rows to be rendered based on text content divided by cell width
diff --git a/src/sentry/static/sentry/app/views/discover/result/utils.tsx b/src/sentry/static/sentry/app/views/discover/result/utils.tsx
index 6fe4250c79..e862c6b74f 100644
--- a/src/sentry/static/sentry/app/views/discover/result/utils.tsx
+++ b/src/sentry/static/sentry/app/views/discover/result/utils.tsx
@@ -21,18 +21,14 @@ const CHART_KEY = '__CHART_KEY__';
 export function getChartData(data: any[], query: any) {
   const {fields} = query;
 
-  return query.aggregations.map((aggregation: Aggregation) => {
-    return {
-      seriesName: aggregation[2],
-      animation: false,
-      data: data.map(res => {
-        return {
-          value: res[aggregation[2]],
-          name: fields.map((field: string) => `${field} ${res[field]}`).join(' '),
-        };
-      }),
-    };
-  });
+  return query.aggregations.map((aggregation: Aggregation) => ({
+    seriesName: aggregation[2],
+    animation: false,
+    data: data.map(res => ({
+      value: res[aggregation[2]],
+      name: fields.map((field: string) => `${field} ${res[field]}`).join(' '),
+    })),
+  }));
 }
 
 /**
@@ -133,12 +129,10 @@ export function getChartDataByDay(rawData: any[], query: Query, options: any = {
   });
 
   // Format for echarts
-  return Object.entries(seriesHash).map(([seriesName, series]) => {
-    return {
-      seriesName,
-      data: series,
-    };
-  });
+  return Object.entries(seriesHash).map(([seriesName, series]) => ({
+    seriesName,
+    data: series,
+  }));
 }
 
 /**
@@ -193,12 +187,10 @@ function getEmptySeriesHash(seriesSet: any, dates: number[]): any {
 }
 
 function getEmptySeries(dates: number[]) {
-  return dates.map(date => {
-    return {
-      value: 0,
-      name: date,
-    };
-  });
+  return dates.map(date => ({
+    value: 0,
+    name: date,
+  }));
 }
 
 // Get the top series ranked by latest time / largest aggregate
@@ -362,9 +354,7 @@ export function downloadAsCsv(result: SnubaResult) {
 
   const csvContent = Papa.unparse({
     fields: headings,
-    data: data.map(row => {
-      return headings.map(col => disableMacros(row[col]));
-    }),
+    data: data.map(row => headings.map(col => disableMacros(row[col]))),
   });
 
   // Need to also manually replace # since encodeURI skips them
diff --git a/src/sentry/static/sentry/app/views/discover/result/visualizationsToggle.tsx b/src/sentry/static/sentry/app/views/discover/result/visualizationsToggle.tsx
index 899ee07274..9325b06000 100644
--- a/src/sentry/static/sentry/app/views/discover/result/visualizationsToggle.tsx
+++ b/src/sentry/static/sentry/app/views/discover/result/visualizationsToggle.tsx
@@ -24,18 +24,16 @@ type Props = {
 };
 
 class VisualizationsToggle extends React.Component<Props> {
-  getMenuItem = (opt: Option) => {
-    return (
-      <MenuItem
-        key={opt.id}
-        onSelect={this.props.handleChange}
-        eventKey={opt.id}
-        isActive={opt.id === this.props.visualization}
-      >
-        {opt.name}
-      </MenuItem>
-    );
-  };
+  getMenuItem = (opt: Option) => (
+    <MenuItem
+      key={opt.id}
+      onSelect={this.props.handleChange}
+      eventKey={opt.id}
+      isActive={opt.id === this.props.visualization}
+    >
+      {opt.name}
+    </MenuItem>
+  );
 
   getButtonItems = (opt: Option) => {
     const active = opt.id === this.props.visualization;
@@ -63,15 +61,11 @@ class VisualizationsToggle extends React.Component<Props> {
     return (
       <ResultViewActions>
         <ResultViewButtons>
-          {options.map(opt => {
-            return this.getButtonItems(opt);
-          })}
+          {options.map(opt => this.getButtonItems(opt))}
         </ResultViewButtons>
         <ResultViewDropdownButtons>
           <DropdownLink title={dropdownTitle} className="btn btn-default btn-sm">
-            {options.map(opt => {
-              return this.getMenuItem(opt);
-            })}
+            {options.map(opt => this.getMenuItem(opt))}
           </DropdownLink>
         </ResultViewDropdownButtons>
         {this.getDownloadCsvButton()}
diff --git a/src/sentry/static/sentry/app/views/discover/sidebar/queryFields.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/queryFields.tsx
index 29b4e0961a..17dcd6ba95 100644
--- a/src/sentry/static/sentry/app/views/discover/sidebar/queryFields.tsx
+++ b/src/sentry/static/sentry/app/views/discover/sidebar/queryFields.tsx
@@ -49,14 +49,12 @@ export default class QueryFields extends React.Component<QueryFieldsProps> {
     return <PlaceholderText>{text}</PlaceholderText>;
   };
 
-  optionRenderer = ({label, isTag}: ReactSelectOption) => {
-    return (
-      <Option>
-        {label}
-        {isTag && <Badge text="tag" />}
-      </Option>
-    );
-  };
+  optionRenderer = ({label, isTag}: ReactSelectOption) => (
+    <Option>
+      {label}
+      {isTag && <Badge text="tag" />}
+    </Option>
+  );
 
   render() {
     const {
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index 71a0c1b472..43aa655dcc 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -238,39 +238,37 @@ class EventsChart extends React.Component {
             includePrevious={includePrevious}
             yAxis={yAxis}
           >
-            {({loading, reloading, errored, timeseriesData, previousTimeseriesData}) => {
-              return (
-                <ReleaseSeries utc={utc} api={api} projects={projects}>
-                  {({releaseSeries}) => {
-                    if (errored) {
-                      return (
-                        <ErrorPanel>
-                          <IconWarning color={theme.gray2} size="lg" />
-                        </ErrorPanel>
-                      );
-                    }
-
+            {({loading, reloading, errored, timeseriesData, previousTimeseriesData}) => (
+              <ReleaseSeries utc={utc} api={api} projects={projects}>
+                {({releaseSeries}) => {
+                  if (errored) {
                     return (
-                      <TransitionChart loading={loading} reloading={reloading}>
-                        <React.Fragment>
-                          <TransparentLoadingMask visible={reloading} />
-                          <EventsAreaChart
-                            {...zoomRenderProps}
-                            loading={loading}
-                            reloading={reloading}
-                            utc={utc}
-                            showLegend={showLegend}
-                            releaseSeries={releaseSeries}
-                            timeseriesData={timeseriesData}
-                            previousTimeseriesData={previousTimeseriesData}
-                          />
-                        </React.Fragment>
-                      </TransitionChart>
+                      <ErrorPanel>
+                        <IconWarning color={theme.gray2} size="lg" />
+                      </ErrorPanel>
                     );
-                  }}
-                </ReleaseSeries>
-              );
-            }}
+                  }
+
+                  return (
+                    <TransitionChart loading={loading} reloading={reloading}>
+                      <React.Fragment>
+                        <TransparentLoadingMask visible={reloading} />
+                        <EventsAreaChart
+                          {...zoomRenderProps}
+                          loading={loading}
+                          reloading={reloading}
+                          utc={utc}
+                          showLegend={showLegend}
+                          releaseSeries={releaseSeries}
+                          timeseriesData={timeseriesData}
+                          previousTimeseriesData={previousTimeseriesData}
+                        />
+                      </React.Fragment>
+                    </TransitionChart>
+                  );
+                }}
+              </ReleaseSeries>
+            )}
           </EventsRequest>
         )}
       </ChartZoom>
diff --git a/src/sentry/static/sentry/app/views/events/searchBar.jsx b/src/sentry/static/sentry/app/views/events/searchBar.jsx
index 9a3136ee84..856b840626 100644
--- a/src/sentry/static/sentry/app/views/events/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/events/searchBar.jsx
@@ -77,9 +77,7 @@ class SearchBar extends React.PureComponent {
   /**
    * Prepare query string (e.g. strip special characters like negation operator)
    */
-  prepareQuery = query => {
-    return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');
-  };
+  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');
 
   render() {
     return (
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 6d7cfe7697..16203a4407 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -279,29 +279,24 @@ export const SPECIAL_FIELDS: SpecialFields = {
   },
   last_seen: {
     sortField: 'last_seen',
-    renderFunc: data => {
-      return (
-        <Container>
-          {data.last_seen
-            ? getDynamicText({
-                value: <StyledDateTime date={data.last_seen} />,
-                fixed: 'time',
-              })
-            : emptyValue}
-        </Container>
-      );
-    },
+    renderFunc: data => (
+      <Container>
+        {data.last_seen
+          ? getDynamicText({
+              value: <StyledDateTime date={data.last_seen} />,
+              fixed: 'time',
+            })
+          : emptyValue}
+      </Container>
+    ),
   },
   release: {
     sortField: 'release',
-    renderFunc: data => {
-      return (
-        data.release && (
-          <VersionContainer>
-            <Version version={data.release} anchor={false} tooltipRawVersion truncate />
-          </VersionContainer>
-        )
-      );
-    },
+    renderFunc: data =>
+      data.release && (
+        <VersionContainer>
+          <Version version={data.release} anchor={false} tooltipRawVersion truncate />
+        </VersionContainer>
+      ),
   },
 };
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx
index 8021f88382..795222fb10 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx
@@ -44,11 +44,10 @@ class EventDetails extends React.Component<Props> {
     return EventView.fromLocation(location);
   };
 
-  getDocumentTitle = (name: string | undefined): Array<string> => {
-    return typeof name === 'string' && String(name).trim().length > 0
+  getDocumentTitle = (name: string | undefined): Array<string> =>
+    typeof name === 'string' && String(name).trim().length > 0
       ? [String(name).trim(), t('Discover')]
       : [t('Discover')];
-  };
 
   render() {
     const {organization, location, params} = this.props;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
index f3d8eb849f..13a9baa187 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
@@ -51,9 +51,7 @@ const getCurrentEventMarker = (currentEvent: Event) => {
         },
       },
       tooltip: {
-        formatter: () => {
-          return `<div>${getFormattedDate(eventTime, 'MMM D, YYYY LT')}</div>`;
-        },
+        formatter: () => `<div>${getFormattedDate(eventTime, 'MMM D, YYYY LT')}</div>`,
       },
       label: {
         show: false,
@@ -198,9 +196,7 @@ const LineGraph = (props: LineGraphProps) => {
   };
 
   const tooltip = {
-    formatAxisLabel: value => {
-      return getFormattedDate(value, 'lll', {local: !isUtc});
-    },
+    formatAxisLabel: value => getFormattedDate(value, 'lll', {local: !isUtc}),
   };
 
   const queryString = eventView.getQuery(location.query.query);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
index ab533d7b73..806ce1fa67 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
@@ -117,13 +117,11 @@ class OpsBreakdown extends React.Component<Props> {
       {}
     );
 
-    const ops = Object.keys(aggregateByOp).map(opName => {
-      return {
-        name: opName,
-        percentage: aggregateByOp[opName].totalDuration / cumulativeDuration,
-        totalDuration: aggregateByOp[opName].totalDuration,
-      };
-    });
+    const ops = Object.keys(aggregateByOp).map(opName => ({
+      name: opName,
+      percentage: aggregateByOp[opName].totalDuration / cumulativeDuration,
+      totalDuration: aggregateByOp[opName].totalDuration,
+    }));
 
     ops.sort((firstOp, secondOp) => {
       // sort in descending order based on total duration
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 1816f211fe..77abc1909e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -43,12 +43,10 @@ export type Sort = {
   field: string;
 };
 
-const reverseSort = (sort: Sort): Sort => {
-  return {
-    kind: sort.kind === 'desc' ? 'asc' : 'desc',
-    field: sort.field,
-  };
-};
+const reverseSort = (sort: Sort): Sort => ({
+  kind: sort.kind === 'desc' ? 'asc' : 'desc',
+  field: sort.field,
+});
 
 export type Field = {
   field: string;
@@ -205,9 +203,8 @@ const encodeSort = (sort: Sort): string => {
   }
 };
 
-const encodeSorts = (sorts: Readonly<Array<Sort>>): Array<string> => {
-  return sorts.map(encodeSort);
-};
+const encodeSorts = (sorts: Readonly<Array<Sort>>): Array<string> =>
+  sorts.map(encodeSort);
 
 const collectQueryStringByKey = (query: Query, key: string): Array<string> => {
   const needle = query[key];
@@ -298,16 +295,10 @@ class EventView {
 
     // only include sort keys that are included in the fields
     const sortKeys = fields
-      .map(field => {
-        return getSortKeyFromField(field, undefined);
-      })
-      .filter((sortKey): sortKey is string => {
-        return !!sortKey;
-      });
-
-    const sort = sorts.find(currentSort => {
-      return sortKeys.includes(currentSort.field);
-    });
+      .map(field => getSortKeyFromField(field, undefined))
+      .filter((sortKey): sortKey is string => !!sortKey);
+
+    const sort = sorts.find(currentSort => sortKeys.includes(currentSort.field));
 
     sorts = sort ? [sort] : [];
 
@@ -637,9 +628,9 @@ class EventView {
 
     // if the updated column is one of the sorted columns, we may need to remove
     // it from the list of sorts
-    const needleSortIndex = this.sorts.findIndex(sort => {
-      return isSortEqualToField(sort, columnToBeUpdated, tableMeta);
-    });
+    const needleSortIndex = this.sorts.findIndex(sort =>
+      isSortEqualToField(sort, columnToBeUpdated, tableMeta)
+    );
 
     if (needleSortIndex >= 0) {
       const needleSort = this.sorts[needleSortIndex];
@@ -684,9 +675,9 @@ class EventView {
 
           newEventView.sorts = [sort];
         } else {
-          const sortableFieldIndex = newEventView.fields.findIndex(currentField => {
-            return isFieldSortable(currentField, tableMeta);
-          });
+          const sortableFieldIndex = newEventView.fields.findIndex(currentField =>
+            isFieldSortable(currentField, tableMeta)
+          );
           if (sortableFieldIndex >= 0) {
             const fieldToBeSorted = newEventView.fields[sortableFieldIndex];
             const sort = fieldToSort(fieldToBeSorted, tableMeta)!;
@@ -724,9 +715,9 @@ class EventView {
     // if the deleted column is one of the sorted columns, we need to remove
     // it from the list of sorts
     const columnToBeDeleted = this.fields[columnIndex];
-    const needleSortIndex = this.sorts.findIndex(sort => {
-      return isSortEqualToField(sort, columnToBeDeleted, tableMeta);
-    });
+    const needleSortIndex = this.sorts.findIndex(sort =>
+      isSortEqualToField(sort, columnToBeDeleted, tableMeta)
+    );
 
     if (needleSortIndex >= 0) {
       const needleSort = this.sorts[needleSortIndex];
@@ -748,9 +739,9 @@ class EventView {
 
         if (newEventView.sorts.length <= 0 && newEventView.fields.length > 0) {
           // establish a default sort by finding the first sortable field
-          const sortableFieldIndex = newEventView.fields.findIndex(field => {
-            return isFieldSortable(field, tableMeta);
-          });
+          const sortableFieldIndex = newEventView.fields.findIndex(field =>
+            isFieldSortable(field, tableMeta)
+          );
 
           if (sortableFieldIndex >= 0) {
             const fieldToBeSorted = newEventView.fields[sortableFieldIndex];
@@ -780,12 +771,13 @@ class EventView {
   }
 
   getSorts(): TableColumnSort<React.ReactText>[] {
-    return this.sorts.map(sort => {
-      return {
-        key: sort.field,
-        order: sort.kind,
-      } as TableColumnSort<string>;
-    });
+    return this.sorts.map(
+      sort =>
+        ({
+          key: sort.field,
+          order: sort.kind,
+        } as TableColumnSort<string>)
+    );
   }
 
   // returns query input for the search
@@ -878,9 +870,7 @@ class EventView {
   }
 
   isFieldSorted(field: Field, tableMeta: MetaType): Sort | undefined {
-    const needle = this.sorts.find(sort => {
-      return isSortEqualToField(sort, field, tableMeta);
-    });
+    const needle = this.sorts.find(sort => isSortEqualToField(sort, field, tableMeta));
 
     return needle;
   }
@@ -891,9 +881,9 @@ class EventView {
       return this;
     }
 
-    const needleIndex = this.sorts.findIndex(sort => {
-      return isSortEqualToField(sort, field, tableMeta);
-    });
+    const needleIndex = this.sorts.findIndex(sort =>
+      isSortEqualToField(sort, field, tableMeta)
+    );
 
     if (needleIndex >= 0) {
       const newEventView = this.clone();
@@ -927,9 +917,7 @@ class EventView {
         .filter(
           (field: Field) => ['last_seen', 'latest_event'].includes(field.field) === false
         )
-        .map((field: Field) => {
-          return {label: field.field, value: field.field};
-        })
+        .map((field: Field) => ({label: field.field, value: field.field}))
         .concat(CHART_AXIS_OPTIONS),
       'value'
     );
@@ -947,9 +935,9 @@ class EventView {
     }
 
     // ensure current selected yAxis is one of the items in yAxisOptions
-    const result = yAxisOptions.findIndex((option: SelectValue<string>) => {
-      return option.value === yAxis;
-    });
+    const result = yAxisOptions.findIndex(
+      (option: SelectValue<string>) => option.value === yAxis
+    );
 
     if (result >= 0) {
       return yAxis;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
index a4936a7c77..601a25bc2d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
@@ -101,18 +101,16 @@ class MiniGraph extends React.Component<Props> {
             );
           }
 
-          const data = (timeseriesData || []).map(series => {
-            return {
-              ...series,
-              areaStyle: {
-                opacity: 0.4,
-              },
-              lineStyle: {
-                opacity: 0,
-              },
-              smooth: true,
-            };
-          });
+          const data = (timeseriesData || []).map(series => ({
+            ...series,
+            areaStyle: {
+              opacity: 0.4,
+            },
+            lineStyle: {
+              opacity: 0,
+            },
+            smooth: true,
+          }));
 
           return (
             <AreaChart
@@ -152,9 +150,9 @@ class MiniGraph extends React.Component<Props> {
   }
 }
 
-const StyledGraphContainer = styled(props => {
-  return <LoadingContainer {...props} maskBackgroundColor="transparent" />;
-})`
+const StyledGraphContainer = styled(props => (
+  <LoadingContainer {...props} maskBackgroundColor="transparent" />
+))`
   height: 100px;
 
   display: flex;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index d9dbbe1349..7c94e90af5 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -121,15 +121,13 @@ class QueryList extends React.Component<Props> {
           title={eventView.name}
           subtitle={eventView.statsPeriod ? recentTimeline : customTimeline}
           queryDetail={eventView.query}
-          renderGraph={() => {
-            return (
-              <MiniGraph
-                location={location}
-                eventView={eventView}
-                organization={organization}
-              />
-            );
-          }}
+          renderGraph={() => (
+            <MiniGraph
+              location={location}
+              eventView={eventView}
+              organization={organization}
+            />
+          )}
           onEventClick={() => {
             trackAnalyticsEvent({
               eventKey: 'discover_v2.prebuilt_query_click',
@@ -178,33 +176,29 @@ class QueryList extends React.Component<Props> {
               query_name: eventView.name,
             });
           }}
-          renderGraph={() => {
-            return (
-              <MiniGraph
-                location={location}
-                eventView={eventView}
-                organization={organization}
-              />
-            );
-          }}
-          renderContextMenu={() => {
-            return (
-              <ContextMenu>
-                <MenuItem
-                  data-test-id="delete-query"
-                  onClick={this.handleDeleteQuery(eventView)}
-                >
-                  {t('Delete Query')}
-                </MenuItem>
-                <MenuItem
-                  data-test-id="duplicate-query"
-                  onClick={this.handleDuplicateQuery(eventView)}
-                >
-                  {t('Duplicate Query')}
-                </MenuItem>
-              </ContextMenu>
-            );
-          }}
+          renderGraph={() => (
+            <MiniGraph
+              location={location}
+              eventView={eventView}
+              organization={organization}
+            />
+          )}
+          renderContextMenu={() => (
+            <ContextMenu>
+              <MenuItem
+                data-test-id="delete-query"
+                onClick={this.handleDeleteQuery(eventView)}
+              >
+                {t('Delete Query')}
+              </MenuItem>
+              <MenuItem
+                data-test-id="duplicate-query"
+                onClick={this.handleDuplicateQuery(eventView)}
+              >
+                {t('Duplicate Query')}
+              </MenuItem>
+            </ContextMenu>
+          )}
         />
       );
     });
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 1d032424a4..a0443dfe5d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -95,15 +95,13 @@ class Table extends React.PureComponent<TableProps, TableState> {
           return;
         }
 
-        this.setState(prevState => {
-          return {
-            isLoading: false,
-            tableFetchID: undefined,
-            error: null,
-            pageLinks: jqXHR ? jqXHR.getResponseHeader('Link') : prevState.pageLinks,
-            tableData: data,
-          };
-        });
+        this.setState(prevState => ({
+          isLoading: false,
+          tableFetchID: undefined,
+          error: null,
+          pageLinks: jqXHR ? jqXHR.getResponseHeader('Link') : prevState.pageLinks,
+          tableData: data,
+        }));
       })
       .catch(err => {
         this.setState({
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
index e11c0bc806..316589ca32 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
@@ -36,22 +36,20 @@ export function renderTableModalEditColumnFactory(
       column?: TableColumn<ReactText>,
       onSuccessFromChild?: () => void,
       onErrorFromChild?: (error?: Error) => void
-    ) => {
-      return (
-        <TableModalEditColumnBodyForm
-          organization={organization}
-          indexColumnOrder={indexColumnOrder}
-          column={column}
-          tagKeys={tagKeys}
-          actions={{
-            createColumn: actions.createColumn,
-            updateColumn: actions.updateColumn,
-            onSuccess: onSuccessFromChild,
-            onError: onErrorFromChild,
-          }}
-        />
-      );
-    },
+    ) => (
+      <TableModalEditColumnBodyForm
+        organization={organization}
+        indexColumnOrder={indexColumnOrder}
+        column={column}
+        tagKeys={tagKeys}
+        actions={{
+          createColumn: actions.createColumn,
+          updateColumn: actions.updateColumn,
+          onSuccess: onSuccessFromChild,
+          onError: onErrorFromChild,
+        }}
+      />
+    ),
     renderModalFooter: () => <TableModalEditColumnFooter />,
   };
 }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index af34be177e..17ea3eb947 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -423,42 +423,40 @@ class TableView extends React.Component<TableViewProps> {
           startColumnDrag,
           draggingColumnIndex,
           destinationColumnIndex,
-        }) => {
-          return (
-            <GridEditable
-              editFeatures={['organizations:discover-query']}
-              noEditMessage={t('Requires discover query feature.')}
-              onToggleEdit={this.onToggleEdit}
-              isColumnDragging={isColumnDragging}
-              gridHeadCellButtonProps={{className: DRAGGABLE_COLUMN_CLASSNAME_IDENTIFIER}}
-              isLoading={isLoading}
-              error={error}
-              data={tableData ? tableData.data : []}
-              columnOrder={this.generateColumnOrder({
-                initialColumnIndex: draggingColumnIndex,
-                destinationColumnIndex,
-              })}
-              columnSortBy={columnSortBy}
-              grid={{
-                renderHeadCell: this._renderGridHeaderCell as any,
-                renderBodyCell: this._renderGridBodyCell as any,
-                onResizeColumn: this._updateColumn as any,
-                renderPrependColumns: this._renderPrependColumns as any,
-                prependColumnWidths: ['40px'],
-              }}
-              modalEditColumn={{
-                renderBodyWithForm: renderModalBodyWithForm as any,
-                renderFooter: renderModalFooter,
-              }}
-              actions={{
-                deleteColumn: this._deleteColumn,
-                moveColumnCommit: this._moveColumnCommit,
-                onDragStart: startColumnDrag,
-                downloadAsCsv: () => downloadAsCsv(tableData, columnOrder, title),
-              }}
-            />
-          );
-        }}
+        }) => (
+          <GridEditable
+            editFeatures={['organizations:discover-query']}
+            noEditMessage={t('Requires discover query feature.')}
+            onToggleEdit={this.onToggleEdit}
+            isColumnDragging={isColumnDragging}
+            gridHeadCellButtonProps={{className: DRAGGABLE_COLUMN_CLASSNAME_IDENTIFIER}}
+            isLoading={isLoading}
+            error={error}
+            data={tableData ? tableData.data : []}
+            columnOrder={this.generateColumnOrder({
+              initialColumnIndex: draggingColumnIndex,
+              destinationColumnIndex,
+            })}
+            columnSortBy={columnSortBy}
+            grid={{
+              renderHeadCell: this._renderGridHeaderCell as any,
+              renderBodyCell: this._renderGridBodyCell as any,
+              onResizeColumn: this._updateColumn as any,
+              renderPrependColumns: this._renderPrependColumns as any,
+              prependColumnWidths: ['40px'],
+            }}
+            modalEditColumn={{
+              renderBodyWithForm: renderModalBodyWithForm as any,
+              renderFooter: renderModalFooter,
+            }}
+            actions={{
+              deleteColumn: this._deleteColumn,
+              moveColumnCommit: this._moveColumnCommit,
+              onDragStart: startColumnDrag,
+              downloadAsCsv: () => downloadAsCsv(tableData, columnOrder, title),
+            }}
+          />
+        )}
       </DraggableColumns>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 0d55da23c1..09f2908d38 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -317,8 +317,8 @@ export function downloadAsCsv(tableData, columnOrder, filename) {
 
   const csvContent = Papa.unparse({
     fields: headings,
-    data: data.map(row => {
-      return headings.map(col => {
+    data: data.map(row =>
+      headings.map(col => {
         // alias for project doesn't match the table data name
         if (col === 'project') {
           col = 'project.name';
@@ -326,8 +326,8 @@ export function downloadAsCsv(tableData, columnOrder, filename) {
           col = getAggregateAlias(col);
         }
         return disableMacros(row[col]);
-      });
-    }),
+      })
+    ),
   });
 
   // Need to also manually replace # since encodeURI skips them
diff --git a/src/sentry/static/sentry/app/views/issueList/actions.jsx b/src/sentry/static/sentry/app/views/issueList/actions.jsx
index 8fe320ad13..131550c0b2 100644
--- a/src/sentry/static/sentry/app/views/issueList/actions.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/actions.jsx
@@ -48,8 +48,8 @@ const getBulkConfirmMessage = (action, queryCount) => {
   );
 };
 
-const getConfirm = (numIssues, allInQuerySelected, query, queryCount) => {
-  return function(action, canBeUndone, append = '') {
+const getConfirm = (numIssues, allInQuerySelected, query, queryCount) =>
+  function(action, canBeUndone, append = '') {
     const question = allInQuerySelected
       ? getBulkConfirmMessage(`${action}${append}`, queryCount)
       : tn(
@@ -84,10 +84,9 @@ const getConfirm = (numIssues, allInQuerySelected, query, queryCount) => {
       </div>
     );
   };
-};
 
-const getLabel = (numIssues, allInQuerySelected) => {
-  return function(action, append = '') {
+const getLabel = (numIssues, allInQuerySelected) =>
+  function(action, append = '') {
     const capitalized = capitalize(action);
     const text = allInQuerySelected
       ? t(`Bulk ${action} issues`)
@@ -99,7 +98,6 @@ const getLabel = (numIssues, allInQuerySelected) => {
 
     return text + append;
   };
-};
 
 const ExtraDescription = ({all, query, queryCount}) => {
   if (!all) {
diff --git a/src/sentry/static/sentry/app/views/issueList/sidebar.jsx b/src/sentry/static/sentry/app/views/issueList/sidebar.jsx
index 5d205f46fe..73944760c4 100644
--- a/src/sentry/static/sentry/app/views/issueList/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/sidebar.jsx
@@ -141,18 +141,16 @@ const IssueListSidebar = createReactClass({
               <hr />
             </div>
 
-            {map(tags, tag => {
-              return (
-                <IssueListTagFilter
-                  value={this.state.queryObj[tag.key]}
-                  key={tag.key}
-                  tag={tag}
-                  onSelect={this.onSelectTag}
-                  orgId={orgId}
-                  tagValueLoader={tagValueLoader}
-                />
-              );
-            })}
+            {map(tags, tag => (
+              <IssueListTagFilter
+                value={this.state.queryObj[tag.key]}
+                key={tag.key}
+                tag={tag}
+                onSelect={this.onSelectTag}
+                orgId={orgId}
+                tagValueLoader={tagValueLoader}
+              />
+            ))}
           </div>
         )}
       </div>
diff --git a/src/sentry/static/sentry/app/views/issueList/sortOptions.jsx b/src/sentry/static/sentry/app/views/issueList/sortOptions.jsx
index 6c97860b76..58885a7d04 100644
--- a/src/sentry/static/sentry/app/views/issueList/sortOptions.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/sortOptions.jsx
@@ -25,17 +25,15 @@ class IssueListSortOptions extends React.PureComponent {
     });
   }
 
-  getMenuItem = key => {
-    return (
-      <DropdownItem
-        onSelect={this.onSelect}
-        eventKey={key}
-        isActive={this.state.sortKey === key}
-      >
-        {this.getSortLabel(key)}
-      </DropdownItem>
-    );
-  };
+  getMenuItem = key => (
+    <DropdownItem
+      onSelect={this.onSelect}
+      eventKey={key}
+      isActive={this.state.sortKey === key}
+    >
+      {this.getSortLabel(key)}
+    </DropdownItem>
+  );
 
   onSelect = sort => {
     this.setState({sortKey: sort});
diff --git a/src/sentry/static/sentry/app/views/issueList/tagFilter.jsx b/src/sentry/static/sentry/app/views/issueList/tagFilter.jsx
index 34f0e05ac2..868d448da2 100644
--- a/src/sentry/static/sentry/app/views/issueList/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/tagFilter.jsx
@@ -15,12 +15,10 @@ class IssueListTagFilter extends React.Component {
     tagValueLoader: PropTypes.func.isRequired,
   };
 
-  static tagValueToSelectFormat = ({value}) => {
-    return {
-      value,
-      label: value,
-    };
-  };
+  static tagValueToSelectFormat = ({value}) => ({
+    value,
+    label: value,
+  });
 
   static defaultProps = {
     tag: {},
diff --git a/src/sentry/static/sentry/app/views/monitors/monitorCheckIns.tsx b/src/sentry/static/sentry/app/views/monitors/monitorCheckIns.tsx
index a4a1518a4c..7e68714782 100644
--- a/src/sentry/static/sentry/app/views/monitors/monitorCheckIns.tsx
+++ b/src/sentry/static/sentry/app/views/monitors/monitorCheckIns.tsx
@@ -45,21 +45,17 @@ export default class MonitorCheckIns extends AsyncComponent<Props, State> {
   renderBody() {
     return (
       <PanelBody>
-        {this.state.checkInList.map(checkIn => {
-          return (
-            <PanelItem key={checkIn.id}>
-              <CheckInIconWrapper>
-                <CheckInIcon status={checkIn.status} size={16} />
-              </CheckInIconWrapper>
-              <TimeSinceWrapper>
-                <TimeSince date={checkIn.dateCreated} />
-              </TimeSinceWrapper>
-              <div>
-                {checkIn.duration && <Duration seconds={checkIn.duration / 100} />}
-              </div>
-            </PanelItem>
-          );
-        })}
+        {this.state.checkInList.map(checkIn => (
+          <PanelItem key={checkIn.id}>
+            <CheckInIconWrapper>
+              <CheckInIcon status={checkIn.status} size={16} />
+            </CheckInIconWrapper>
+            <TimeSinceWrapper>
+              <TimeSince date={checkIn.dateCreated} />
+            </TimeSinceWrapper>
+            <div>{checkIn.duration && <Duration seconds={checkIn.duration / 100} />}</div>
+          </PanelItem>
+        ))}
       </PanelBody>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/monitors/monitorForm.jsx b/src/sentry/static/sentry/app/views/monitors/monitorForm.jsx
index 038e7ef785..f1db35c26d 100644
--- a/src/sentry/static/sentry/app/views/monitors/monitorForm.jsx
+++ b/src/sentry/static/sentry/app/views/monitors/monitorForm.jsx
@@ -117,9 +117,7 @@ class MonitorForm extends Component {
                   disabled={!hasAccess}
                   choices={this.props.organization.projects
                     .filter(p => p.isMember)
-                    .map(p => {
-                      return [p.slug, p.slug];
-                    })}
+                    .map(p => [p.slug, p.slug])}
                   required
                 />
                 <TextField
diff --git a/src/sentry/static/sentry/app/views/monitors/monitors.jsx b/src/sentry/static/sentry/app/views/monitors/monitors.jsx
index 9f39beec17..8e20230adb 100644
--- a/src/sentry/static/sentry/app/views/monitors/monitors.jsx
+++ b/src/sentry/static/sentry/app/views/monitors/monitors.jsx
@@ -86,23 +86,21 @@ class Monitors extends AsyncView {
         </PageHeader>
         <Panel>
           <PanelBody>
-            {this.state.monitorList.map(monitor => {
-              return (
-                <PanelItemCentered key={monitor.id}>
-                  <MonitorIcon status={monitor.status} size={16} />
-                  <StyledLink
-                    to={`/organizations/${organization.slug}/monitors/${monitor.id}/`}
-                  >
-                    {monitor.name}
-                  </StyledLink>
-                  {monitor.nextCheckIn ? (
-                    <TimeSince date={monitor.lastCheckIn} />
-                  ) : (
-                    t('n/a')
-                  )}
-                </PanelItemCentered>
-              );
-            })}
+            {this.state.monitorList.map(monitor => (
+              <PanelItemCentered key={monitor.id}>
+                <MonitorIcon status={monitor.status} size={16} />
+                <StyledLink
+                  to={`/organizations/${organization.slug}/monitors/${monitor.id}/`}
+                >
+                  {monitor.name}
+                </StyledLink>
+                {monitor.nextCheckIn ? (
+                  <TimeSince date={monitor.lastCheckIn} />
+                ) : (
+                  t('n/a')
+                )}
+              </PanelItemCentered>
+            ))}
           </PanelBody>
         </Panel>
         {monitorListPageLinks && (
diff --git a/src/sentry/static/sentry/app/views/organizationActivity/activityFeed.jsx b/src/sentry/static/sentry/app/views/organizationActivity/activityFeed.jsx
index 23d8298f65..75bb19ea35 100644
--- a/src/sentry/static/sentry/app/views/organizationActivity/activityFeed.jsx
+++ b/src/sentry/static/sentry/app/views/organizationActivity/activityFeed.jsx
@@ -95,17 +95,15 @@ class ActivityFeed extends React.Component {
     } else if (this.state.itemList.length > 0) {
       body = (
         <div data-test-id="activity-feed-list" className="activity">
-          {this.state.itemList.map(item => {
-            return (
-              <ErrorBoundary
-                mini
-                css={{marginBottom: space(1), borderRadius: 0}}
-                key={item.id}
-              >
-                <ActivityFeedItem organization={this.props.organization} item={item} />
-              </ErrorBoundary>
-            );
-          })}
+          {this.state.itemList.map(item => (
+            <ErrorBoundary
+              mini
+              css={{marginBottom: space(1), borderRadius: 0}}
+              key={item.id}
+            >
+              <ActivityFeedItem organization={this.props.organization} item={item} />
+            </ErrorBoundary>
+          ))}
         </div>
       );
     } else {
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachments.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachments.tsx
index 6a3949e53e..6b41e296ea 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachments.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachments.tsx
@@ -47,11 +47,9 @@ class GroupEventAttachments extends AsyncComponent<Props, State> {
   }
 
   handleDelete = (deletedAttachmentId: string) => {
-    this.setState(prevState => {
-      return {
-        deletedAttachments: [...prevState.deletedAttachments, deletedAttachmentId],
-      };
-    });
+    this.setState(prevState => ({
+      deletedAttachments: [...prevState.deletedAttachments, deletedAttachmentId],
+    }));
   };
 
   renderNoQueryResults() {
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx
index f1230238a8..3d3e7b64d4 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx
@@ -27,25 +27,23 @@ const GroupEventAttachmentsTable = ({
     <table className="table events-table">
       <thead>
         <tr>
-          {tableRowNames.map(name => {
-            return <th key={name}>{name}</th>;
-          })}
+          {tableRowNames.map(name => (
+            <th key={name}>{name}</th>
+          ))}
         </tr>
       </thead>
       <tbody>
-        {attachments.map(attachment => {
-          return (
-            <GroupEventAttachmentsTableRow
-              key={attachment.id}
-              attachment={attachment}
-              orgId={orgId}
-              projectId={projectId}
-              groupId={groupId}
-              onDelete={onDelete}
-              isDeleted={deletedAttachments.some(id => attachment.id === id)}
-            />
-          );
-        })}
+        {attachments.map(attachment => (
+          <GroupEventAttachmentsTableRow
+            key={attachment.id}
+            attachment={attachment}
+            orgId={orgId}
+            projectId={projectId}
+            groupId={groupId}
+            onDelete={onDelete}
+            isDeleted={deletedAttachments.some(id => attachment.id === id)}
+          />
+        ))}
       </tbody>
     </table>
   );
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx
index ec82dfb713..75ef452893 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx
@@ -26,50 +26,48 @@ const GroupEventAttachmentsTableRow = ({
   isDeleted,
   orgId,
   groupId,
-}: Props) => {
-  return (
-    <TableRow isDeleted={isDeleted}>
-      <td>
-        <h5>
-          {attachment.name}
-          <br />
-          <small>
-            <DateTime date={attachment.dateCreated} /> &middot;{' '}
-            <Link
-              to={`/organizations/${orgId}/issues/${groupId}/events/${attachment.event_id}/`}
-            >
-              {attachment.event_id}
-            </Link>
-          </small>
-        </h5>
-      </td>
+}: Props) => (
+  <TableRow isDeleted={isDeleted}>
+    <td>
+      <h5>
+        {attachment.name}
+        <br />
+        <small>
+          <DateTime date={attachment.dateCreated} /> &middot;{' '}
+          <Link
+            to={`/organizations/${orgId}/issues/${groupId}/events/${attachment.event_id}/`}
+          >
+            {attachment.event_id}
+          </Link>
+        </small>
+      </h5>
+    </td>
 
-      <td>{types[attachment.type] || t('Other')}</td>
+    <td>{types[attachment.type] || t('Other')}</td>
 
-      <td>
-        <FileSize bytes={attachment.size} />
-      </td>
+    <td>
+      <FileSize bytes={attachment.size} />
+    </td>
 
-      <td>
-        <AttachmentUrl
-          projectId={projectId}
-          eventId={attachment.event_id}
-          attachment={attachment}
-        >
-          {url =>
-            !isDeleted && (
-              <EventAttachmentActions
-                url={url}
-                onDelete={onDelete}
-                attachmentId={attachment.id}
-              />
-            )
-          }
-        </AttachmentUrl>
-      </td>
-    </TableRow>
-  );
-};
+    <td>
+      <AttachmentUrl
+        projectId={projectId}
+        eventId={attachment.event_id}
+        attachment={attachment}
+      >
+        {url =>
+          !isDeleted && (
+            <EventAttachmentActions
+              url={url}
+              onDelete={onDelete}
+              attachmentId={attachment.id}
+            />
+          )
+        }
+      </AttachmentUrl>
+    </td>
+  </TableRow>
+);
 
 const TableRow = styled('tr')<{isDeleted: boolean}>`
   opacity: ${p => (p.isDeleted ? 0.3 : 1)};
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx
index 47829ae815..131eb9c74e 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx
@@ -13,16 +13,14 @@ type Props = RouteComponentProps<{orgId: string; groupId: string}, {}> & {
   group: Group;
 };
 
-const GroupEventAttachmentsContainer = ({organization, group}: Props) => {
-  return (
-    <Feature
-      features={['event-attachments']}
-      organization={organization}
-      renderDisabled={props => <FeatureDisabled {...props} />}
-    >
-      <GroupEventAttachments projectSlug={group.project.slug} />
-    </Feature>
-  );
-};
+const GroupEventAttachmentsContainer = ({organization, group}: Props) => (
+  <Feature
+    features={['event-attachments']}
+    organization={organization}
+    renderDisabled={props => <FeatureDisabled {...props} />}
+  >
+    <GroupEventAttachments projectSlug={group.project.slug} />
+  </Feature>
+);
 
 export default withOrganization(GroupEventAttachmentsContainer);
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupMerged/mergedList.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupMerged/mergedList.jsx
index 46e42e4b36..8327ab9eeb 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupMerged/mergedList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupMerged/mergedList.jsx
@@ -22,13 +22,11 @@ class MergedList extends React.Component {
     projectId: PropTypes.string.isRequired,
   };
 
-  renderEmpty = () => {
-    return (
-      <EmptyStateWarning>
-        <p>{t("There don't seem to be any hashes for this issue.")}</p>
-      </EmptyStateWarning>
-    );
-  };
+  renderEmpty = () => (
+    <EmptyStateWarning>
+      <p>{t("There don't seem to be any hashes for this issue.")}</p>
+    </EmptyStateWarning>
+  );
 
   render() {
     const {items, pageLinks, onToggleCollapse, onUnmerge, orgId, projectId} = this.props;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupSimilar/similarList.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupSimilar/similarList.jsx
index 7432e4cd63..c889c4fa75 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupSimilar/similarList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupSimilar/similarList.jsx
@@ -41,15 +41,13 @@ class SimilarList extends React.Component {
     };
   }
 
-  renderEmpty = () => {
-    return (
-      <Panel>
-        <EmptyStateWarning>
-          <p>{t('There are no similar issues.')}</p>
-        </EmptyStateWarning>
-      </Panel>
-    );
-  };
+  renderEmpty = () => (
+    <Panel>
+      <EmptyStateWarning>
+        <p>{t('There are no similar issues.')}</p>
+      </EmptyStateWarning>
+    </Panel>
+  );
 
   handleShowAll = () => {
     this.setState({showAllItems: true});
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupUserFeedback.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupUserFeedback.jsx
index 3939a259c3..cbec5a459b 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupUserFeedback.jsx
@@ -75,16 +75,14 @@ class GroupUserFeedback extends React.Component {
       return (
         <div className="row">
           <div className="col-md-9">
-            {reportList.map((item, idx) => {
-              return (
-                <EventUserFeedback
-                  key={idx}
-                  report={item}
-                  orgId={organization.slug}
-                  issueId={group.id}
-                />
-              );
-            })}
+            {reportList.map((item, idx) => (
+              <EventUserFeedback
+                key={idx}
+                report={item}
+                orgId={organization.slug}
+                issueId={group.id}
+              />
+            ))}
             <Pagination pageLinks={this.state.pageLinks} />
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/SplitInstallationIdModal.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/SplitInstallationIdModal.tsx
index 53ea6549f1..976c6d2c58 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/SplitInstallationIdModal.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/SplitInstallationIdModal.tsx
@@ -22,10 +22,9 @@ export default class SplitInstallationIdModal extends React.Component<Props> {
     closeModal: PropTypes.func.isRequired,
   };
 
-  onCopy = async () => {
+  onCopy = async () =>
     //This hack is needed because the normal copying methods with TextCopyInput do not work correctly
-    return await navigator.clipboard.writeText(this.props.installationId);
-  };
+    await navigator.clipboard.writeText(this.props.installationId);
 
   handleContinue = () => {
     const delay = 2000;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
index b78a72b360..417b11911b 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
@@ -341,14 +341,12 @@ class AbstractIntegrationDetailedView<
                 <AuthorName>{this.author}</AuthorName>
               </div>
             )}
-            {this.resourceLinks.map(({title, url}) => {
-              return (
-                <ExternalLinkContainer key={url}>
-                  {this.getIcon(title)}
-                  <ExternalLink href={url}>{t(title)}</ExternalLink>
-                </ExternalLinkContainer>
-              );
-            })}
+            {this.resourceLinks.map(({title, url}) => (
+              <ExternalLinkContainer key={url}>
+                {this.getIcon(title)}
+                <ExternalLink href={url}>{t(title)}</ExternalLink>
+              </ExternalLinkContainer>
+            ))}
           </Metadata>
         </Flex>
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
index eca5eec284..d16e276dcb 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
@@ -208,9 +208,8 @@ class OrganizationIntegrations extends AsyncComponent<
     this.setState({appInstalls: [install, ...this.state.appInstalls]});
   };
 
-  getAppInstall = (app: SentryApp) => {
-    return this.state.appInstalls.find(i => i.app.slug === app.slug);
-  };
+  getAppInstall = (app: SentryApp) =>
+    this.state.appInstalls.find(i => i.app.slug === app.slug);
 
   //Returns 0 if uninstalled, 1 if pending, and 2 if installed
   getInstallValue(integration: AppOrProvider) {
@@ -306,9 +305,9 @@ class OrganizationIntegrations extends AsyncComponent<
 
     // we dont want the app to render twice if its the org that created
     // the published app.
-    const orgOwned = orgOwnedApps.filter(app => {
-      return !published.find(p => p.slug === app.slug);
-    });
+    const orgOwned = orgOwnedApps.filter(
+      app => !published.find(p => p.slug === app.slug)
+    );
 
     /**
      * We should have three sections:
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index 2647c889bc..c9df8929bd 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -95,9 +95,9 @@ export class OrganizationIntegrations extends AsyncComponent<
 
     // we dont want the app to render twice if its the org that created
     // the published app.
-    const orgOwned = orgOwnedApps.filter(app => {
-      return !published.find(p => p.slug === app.slug);
-    });
+    const orgOwned = orgOwnedApps.filter(
+      app => !published.find(p => p.slug === app.slug)
+    );
 
     /**
      * We should have three sections:
@@ -182,9 +182,8 @@ export class OrganizationIntegrations extends AsyncComponent<
     return this.state.config.providers;
   }
 
-  getAppInstall = (app: SentryApp) => {
-    return this.state.appInstalls.find(i => i.app.slug === app.slug);
-  };
+  getAppInstall = (app: SentryApp) =>
+    this.state.appInstalls.find(i => i.app.slug === app.slug);
 
   //Returns 0 if uninstalled, 1 if pending, and 2 if installed
   getInstallValue(integration: AppOrProviderOrPlugin) {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.tsx
index 0add8315aa..99745b9942 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.tsx
@@ -153,17 +153,15 @@ export default class IntegrationRepos extends AsyncComponent<Props, State> {
     const repositoryOptions = (this.state.integrationRepos.repos || []).filter(
       repo => !repositories.has(repo.identifier)
     );
-    const items = repositoryOptions.map(repo => {
-      return {
-        searchKey: repo.name,
-        value: repo.identifier,
-        label: (
-          <StyledListElement>
-            <StyledName>{repo.name}</StyledName>
-          </StyledListElement>
-        ),
-      };
-    });
+    const items = repositoryOptions.map(repo => ({
+      searchKey: repo.name,
+      value: repo.identifier,
+      label: (
+        <StyledListElement>
+          <StyledName>{repo.name}</StyledName>
+        </StyledListElement>
+      ),
+    }));
 
     const menuHeader = <StyledReposLabel>{t('Repositories')}</StyledReposLabel>;
     const onChange = this.state.integrationRepos.searchable
@@ -240,17 +238,15 @@ export default class IntegrationRepos extends AsyncComponent<Props, State> {
                 }
               />
             )}
-            {itemList.map(repo => {
-              return (
-                <RepositoryRow
-                  key={repo.id}
-                  repository={repo}
-                  orgId={orgId}
-                  api={this.api}
-                  onRepositoryChange={this.onRepositoryChange}
-                />
-              );
-            })}
+            {itemList.map(repo => (
+              <RepositoryRow
+                key={repo.id}
+                repository={repo}
+                orgId={orgId}
+                api={this.api}
+                onRepositoryChange={this.onRepositoryChange}
+              />
+            ))}
           </PanelBody>
         </Panel>
         {itemListPageLinks && (
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
index eda40e306e..6beebc6dcb 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
@@ -104,9 +104,9 @@ const StyledLink = styled(Link)`
 
 type PublishStatusProps = {status: SentryApp['status']; theme?: any};
 
-const PublishStatus = styled(({status, ...props}: PublishStatusProps) => {
-  return <div {...props}>{t(`${status}`)}</div>;
-})`
+const PublishStatus = styled(({status, ...props}: PublishStatusProps) => (
+  <div {...props}>{t(`${status}`)}</div>
+))`
   color: ${(props: PublishStatusProps) =>
     props.status === 'published' ? props.theme.success : props.theme.gray2};
   font-weight: light;
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index ea7eac0972..69efd927aa 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -90,13 +90,11 @@ class OrganizationStatsContainer extends React.Component {
           projectMap[project.id] = project;
         });
 
-        this.setState(prevState => {
-          return {
-            pageLinks: jqxhr.getResponseHeader('Link'),
-            projectMap,
-            projectsRequestsPending: prevState.projectsRequestsPending - 1,
-          };
-        });
+        this.setState(prevState => ({
+          pageLinks: jqxhr.getResponseHeader('Link'),
+          projectMap,
+          projectsRequestsPending: prevState.projectsRequestsPending - 1,
+        }));
       },
       error: () => {
         this.setState({
diff --git a/src/sentry/static/sentry/app/views/projectsDashboard/deploys.jsx b/src/sentry/static/sentry/app/views/projectsDashboard/deploys.jsx
index 210cc87455..e62fa4ef17 100644
--- a/src/sentry/static/sentry/app/views/projectsDashboard/deploys.jsx
+++ b/src/sentry/static/sentry/app/views/projectsDashboard/deploys.jsx
@@ -21,11 +21,9 @@ export default class Deploys extends React.Component {
   render() {
     const {project, organization} = this.props;
 
-    const flattenedDeploys = Object.entries(project.latestDeploys || {}).map(
-      ([environment, value]) => {
-        return {environment, ...value};
-      }
-    );
+    const flattenedDeploys = Object.entries(
+      project.latestDeploys || {}
+    ).map(([environment, value]) => ({environment, ...value}));
 
     const deploys = (flattenedDeploys || [])
       .sort((a, b) => new Date(b.dateFinished) - new Date(a.dateFinished))
diff --git a/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx b/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
index 846333bc07..ee059f804a 100644
--- a/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
@@ -135,13 +135,11 @@ class Dashboard extends React.Component {
   }
 }
 
-const OrganizationDashboard = props => {
-  return (
-    <OrganizationDashboardWrapper>
-      <Dashboard {...props} />
-    </OrganizationDashboardWrapper>
-  );
-};
+const OrganizationDashboard = props => (
+  <OrganizationDashboardWrapper>
+    <Dashboard {...props} />
+  </OrganizationDashboardWrapper>
+);
 
 const TeamLink = styled(Link)`
   display: flex;
diff --git a/src/sentry/static/sentry/app/views/projectsDashboard/newIssues.jsx b/src/sentry/static/sentry/app/views/projectsDashboard/newIssues.jsx
index f1cca88121..9891dff674 100644
--- a/src/sentry/static/sentry/app/views/projectsDashboard/newIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectsDashboard/newIssues.jsx
@@ -13,21 +13,17 @@ export default class NewIssues extends React.Component {
 
   issueListRef = React.createRef();
 
-  getEndpoint = () => {
-    return `/organizations/${this.props.params.orgId}/issues/new/`;
-  };
+  getEndpoint = () => `/organizations/${this.props.params.orgId}/issues/new/`;
 
-  renderEmpty = () => {
-    return (
-      <Panel>
-        <PanelBody>
-          <PanelItem justifyContent="center">
-            {t('No new issues have been seen in the last week.')}
-          </PanelItem>
-        </PanelBody>
-      </Panel>
-    );
-  };
+  renderEmpty = () => (
+    <Panel>
+      <PanelBody>
+        <PanelItem justifyContent="center">
+          {t('No new issues have been seen in the last week.')}
+        </PanelItem>
+      </PanelBody>
+    </Panel>
+  );
 
   refresh = () => {
     this.issueListRef.current.remountComponent();
diff --git a/src/sentry/static/sentry/app/views/releases/detail/commitAuthorStats.jsx b/src/sentry/static/sentry/app/views/releases/detail/commitAuthorStats.jsx
index 00a397ec27..8efcec84e5 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/commitAuthorStats.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/commitAuthorStats.jsx
@@ -101,9 +101,7 @@ class CommitAuthorStats extends React.Component {
     const commitAuthorValues = Object.values(commitAuthors);
 
     // sort commitAuthors by highest commitCount to lowest commitCount
-    commitAuthorValues.sort((a, b) => {
-      return b.commitCount - a.commitCount;
-    });
+    commitAuthorValues.sort((a, b) => b.commitCount - a.commitCount);
 
     return (
       <div style={{marginTop: 5}}>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/groupListHeader.jsx b/src/sentry/static/sentry/app/views/releases/detail/groupListHeader.jsx
index d508bb1823..3c4f8bd6db 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/groupListHeader.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/groupListHeader.jsx
@@ -4,31 +4,29 @@ import {Flex, Box} from 'reflexbox';
 import {t} from 'app/locale';
 import {PanelHeader} from 'app/components/panels';
 
-const GroupListHeader = () => {
-  return (
-    <PanelHeader disablePadding>
-      <Box width={[8 / 12, 8 / 12, 6 / 12]} mx={2} flex="1" className="toolbar-header">
-        {t('Issue')}
-      </Box>
-      <Box width={160} mx={2} className="toolbar-header hidden-xs hidden-sm">
-        {t('Last 24 hours')}
-      </Box>
-      <Flex width={80} mx={2} justifyContent="flex-end" className="toolbar-header">
-        {t('events')}
-      </Flex>
-      <Flex width={80} mx={2} justifyContent="flex-end" className="toolbar-header">
-        {t('users')}
-      </Flex>
-      <Flex
-        width={80}
-        mx={2}
-        justifyContent="flex-end"
-        className="hidden-xs hidden-sm toolbar-header"
-      >
-        {t('Assignee')}
-      </Flex>
-    </PanelHeader>
-  );
-};
+const GroupListHeader = () => (
+  <PanelHeader disablePadding>
+    <Box width={[8 / 12, 8 / 12, 6 / 12]} mx={2} flex="1" className="toolbar-header">
+      {t('Issue')}
+    </Box>
+    <Box width={160} mx={2} className="toolbar-header hidden-xs hidden-sm">
+      {t('Last 24 hours')}
+    </Box>
+    <Flex width={80} mx={2} justifyContent="flex-end" className="toolbar-header">
+      {t('events')}
+    </Flex>
+    <Flex width={80} mx={2} justifyContent="flex-end" className="toolbar-header">
+      {t('users')}
+    </Flex>
+    <Flex
+      width={80}
+      mx={2}
+      justifyContent="flex-end"
+      className="hidden-xs hidden-sm toolbar-header"
+    >
+      {t('Assignee')}
+    </Flex>
+  </PanelHeader>
+);
 
 export default GroupListHeader;
diff --git a/src/sentry/static/sentry/app/views/releases/detail/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/index.jsx
index a568e755fc..b181b94ec7 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/index.jsx
@@ -18,14 +18,12 @@ import withProjects from 'app/utils/withProjects';
 
 import ReleaseHeader from './releaseHeader';
 
-const ReleaseDetailsContainer = props => {
-  return (
-    <React.Fragment>
-      <GlobalSelectionHeader organization={props.organization} />
-      <OrganizationReleaseDetails {...props} />
-    </React.Fragment>
-  );
-};
+const ReleaseDetailsContainer = props => (
+  <React.Fragment>
+    <GlobalSelectionHeader organization={props.organization} />
+    <OrganizationReleaseDetails {...props} />
+  </React.Fragment>
+);
 ReleaseDetailsContainer.propTypes = {
   organization: SentryTypes.Organization,
 };
@@ -123,9 +121,7 @@ class OrganizationReleaseDetails extends AsyncView {
             )}
             :{' '}
             {selected_projects
-              .map(p => {
-                return all_projects.find(pp => parseInt(pp.id, 10) === p).name;
-              })
+              .map(p => all_projects.find(pp => parseInt(pp.id, 10) === p).name)
               .join(', ')}
           </Alert>
         </PageContent>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releases/detail/releaseArtifacts.jsx
index 79be8f59ec..ce0e457d4d 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/releaseArtifacts.jsx
@@ -84,9 +84,7 @@ class ReleaseArtifacts extends React.Component {
     this.props.api.request(this.getFilesEndpoint() + `${id}/`, {
       method: 'DELETE',
       success: () => {
-        const fileList = this.state.fileList.filter(file => {
-          return file.id !== id;
-        });
+        const fileList = this.state.fileList.filter(file => file.id !== id);
 
         this.setState({
           fileList,
@@ -129,59 +127,57 @@ class ReleaseArtifacts extends React.Component {
             <Flex flex="3">{t('Size')}</Flex>
           </PanelHeader>
           <PanelBody>
-            {this.state.fileList.map(file => {
-              return (
-                <PanelItem key={file.id}>
-                  <Flex
-                    flex="7"
-                    pr={2}
-                    style={{wordWrap: 'break-word', wordBreak: 'break-all'}}
-                  >
-                    <strong>{file.name || '(empty)'}</strong>
-                  </Flex>
-                  <Flex flex="2">
-                    {file.dist || <span className="text-light">{t('None')}</span>}
-                  </Flex>
-                  <Flex flex="3" justifyContent="space-between">
-                    <FileSize bytes={file.size} />
-                    <Flex alignItems="center">
-                      {access.has('project:write') ? (
-                        <a
-                          href={
-                            this.props.api.baseUrl +
-                            this.getFilesEndpoint() +
-                            `${file.id}/?download=1`
-                          }
-                          className="btn btn-sm btn-default"
-                        >
+            {this.state.fileList.map(file => (
+              <PanelItem key={file.id}>
+                <Flex
+                  flex="7"
+                  pr={2}
+                  style={{wordWrap: 'break-word', wordBreak: 'break-all'}}
+                >
+                  <strong>{file.name || '(empty)'}</strong>
+                </Flex>
+                <Flex flex="2">
+                  {file.dist || <span className="text-light">{t('None')}</span>}
+                </Flex>
+                <Flex flex="3" justifyContent="space-between">
+                  <FileSize bytes={file.size} />
+                  <Flex alignItems="center">
+                    {access.has('project:write') ? (
+                      <a
+                        href={
+                          this.props.api.baseUrl +
+                          this.getFilesEndpoint() +
+                          `${file.id}/?download=1`
+                        }
+                        className="btn btn-sm btn-default"
+                      >
+                        <span className="icon icon-open" />
+                      </a>
+                    ) : (
+                      <Tooltip
+                        title={t(
+                          'You do not have the required permission to download this artifact.'
+                        )}
+                      >
+                        <div className="btn btn-sm btn-default disabled">
                           <span className="icon icon-open" />
-                        </a>
-                      ) : (
-                        <Tooltip
-                          title={t(
-                            'You do not have the required permission to download this artifact.'
-                          )}
-                        >
-                          <div className="btn btn-sm btn-default disabled">
-                            <span className="icon icon-open" />
-                          </div>
-                        </Tooltip>
-                      )}
-                      <div style={{marginLeft: 5}}>
-                        <LinkWithConfirmation
-                          className="btn btn-sm btn-default"
-                          title={t('Delete artifact')}
-                          message={t('Are you sure you want to remove this artifact?')}
-                          onConfirm={this.handleRemove.bind(this, file.id)}
-                        >
-                          <span className="icon icon-trash" />
-                        </LinkWithConfirmation>
-                      </div>
-                    </Flex>
+                        </div>
+                      </Tooltip>
+                    )}
+                    <div style={{marginLeft: 5}}>
+                      <LinkWithConfirmation
+                        className="btn btn-sm btn-default"
+                        title={t('Delete artifact')}
+                        message={t('Are you sure you want to remove this artifact?')}
+                        onConfirm={this.handleRemove.bind(this, file.id)}
+                      >
+                        <span className="icon icon-trash" />
+                      </LinkWithConfirmation>
+                    </div>
                   </Flex>
-                </PanelItem>
-              );
-            })}
+                </Flex>
+              </PanelItem>
+            ))}
           </PanelBody>
         </Panel>
         <Pagination pageLinks={this.state.pageLinks} />
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseCommits.jsx b/src/sentry/static/sentry/app/views/releases/detail/releaseCommits.jsx
index 7d63a196cd..dd3499dce7 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/releaseCommits.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/releaseCommits.jsx
@@ -96,9 +96,9 @@ class ReleaseCommits extends React.Component {
       <Panel key={repo}>
         <PanelHeader>{repo}</PanelHeader>
         <PanelBody>
-          {activeCommits.map(commit => {
-            return <CommitRow key={commit.id} commit={commit} />;
-          })}
+          {activeCommits.map(commit => (
+            <CommitRow key={commit.id} commit={commit} />
+          ))}
         </PanelBody>
       </Panel>
     );
@@ -136,20 +136,18 @@ class ReleaseCommits extends React.Component {
                   >
                     <a>{t('All Repositories')}</a>
                   </MenuItem>
-                  {Object.keys(commitsByRepository).map(repository => {
-                    return (
-                      <MenuItem
-                        key={commitsByRepository[repository].id}
-                        noAnchor
-                        onClick={() => {
-                          this.setActiveRepo(repository);
-                        }}
-                        isActive={this.state.activeRepo === repository}
-                      >
-                        <a>{repository}</a>
-                      </MenuItem>
-                    );
-                  })}
+                  {Object.keys(commitsByRepository).map(repository => (
+                    <MenuItem
+                      key={commitsByRepository[repository].id}
+                      noAnchor
+                      onClick={() => {
+                        this.setActiveRepo(repository);
+                      }}
+                      isActive={this.state.activeRepo === repository}
+                    >
+                      <a>{repository}</a>
+                    </MenuItem>
+                  ))}
                 </DropdownLink>
               </div>
             </div>
@@ -157,9 +155,9 @@ class ReleaseCommits extends React.Component {
         </div>
         {activeRepo
           ? this.renderCommitsForRepo(activeRepo)
-          : Object.keys(commitsByRepository).map(repository => {
-              return this.renderCommitsForRepo(repository);
-            })}
+          : Object.keys(commitsByRepository).map(repository =>
+              this.renderCommitsForRepo(repository)
+            )}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/releases/detail/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/detail/releaseOverview.jsx
index 76d0dfdfca..bf1f3c4dd5 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/releaseOverview.jsx
@@ -54,15 +54,13 @@ export default class ReleaseOverview extends AsyncComponent {
             <ReleaseIssues version={version} orgId={orgId} query={query} />
             {hasRepos && (
               <div>
-                {Object.keys(filesByRepository).map((repository, i) => {
-                  return (
-                    <RepositoryFileSummary
-                      key={i}
-                      repository={repository}
-                      fileChangeSummary={filesByRepository[repository]}
-                    />
-                  );
-                })}
+                {Object.keys(filesByRepository).map((repository, i) => (
+                  <RepositoryFileSummary
+                    key={i}
+                    repository={repository}
+                    fileChangeSummary={filesByRepository[repository]}
+                  />
+                ))}
               </div>
             )}
           </div>
@@ -77,16 +75,14 @@ export default class ReleaseOverview extends AsyncComponent {
                 <ul className="nav nav-stacked">
                   {release.projects.length === 0
                     ? this.renderEmpty()
-                    : release.projects.map(project => {
-                        return (
-                          <ReleaseProjectStatSparkline
-                            key={project.slug}
-                            orgId={orgId}
-                            project={project}
-                            version={version}
-                          />
-                        );
-                      })}
+                    : release.projects.map(project => (
+                        <ReleaseProjectStatSparkline
+                          key={project.slug}
+                          orgId={orgId}
+                          project={project}
+                          version={version}
+                        />
+                      ))}
                 </ul>
               </div>
             ) : (
diff --git a/src/sentry/static/sentry/app/views/releases/list/progressBar.jsx b/src/sentry/static/sentry/app/views/releases/list/progressBar.jsx
index 867e425d4e..602d69bb4d 100644
--- a/src/sentry/static/sentry/app/views/releases/list/progressBar.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/progressBar.jsx
@@ -2,13 +2,11 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import styled from '@emotion/styled';
 
-const ProgressBar = props => {
-  return (
-    <StyledBar>
-      <StyledSlider width={props.width} />
-    </StyledBar>
-  );
-};
+const ProgressBar = props => (
+  <StyledBar>
+    <StyledSlider width={props.width} />
+  </StyledBar>
+);
 ProgressBar.propTypes = {
   width: PropTypes.number,
 };
diff --git a/src/sentry/static/sentry/app/views/releases/list/releaseLanding.tsx b/src/sentry/static/sentry/app/views/releases/list/releaseLanding.tsx
index 4ea72dbaf6..6395e77e64 100644
--- a/src/sentry/static/sentry/app/views/releases/list/releaseLanding.tsx
+++ b/src/sentry/static/sentry/app/views/releases/list/releaseLanding.tsx
@@ -114,9 +114,7 @@ const ReleaseLanding = withOrganization(
         });
       };
 
-      getCard = stepId => {
-        return cards[stepId];
-      };
+      getCard = stepId => cards[stepId];
 
       render() {
         const {stepId} = this.state;
diff --git a/src/sentry/static/sentry/app/views/releases/list/releaseList.jsx b/src/sentry/static/sentry/app/views/releases/list/releaseList.jsx
index 93651b4cb3..46f89f978b 100644
--- a/src/sentry/static/sentry/app/views/releases/list/releaseList.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/releaseList.jsx
@@ -35,47 +35,45 @@ const ReleaseList = props => {
     <div>
       <Projects orgId={orgId} slugs={projectSlugs}>
         {({projects}) =>
-          releaseList.map(release => {
-            return (
-              <ReleasePanelItem key={release.version}>
-                <Layout>
-                  <VersionColumn>
-                    <VersionWrapper>
-                      <Version
-                        version={release.version}
-                        preserveGlobalSelection
-                        tooltipRawVersion
-                        truncate
-                      />
-                    </VersionWrapper>
-                    <LatestDeployOrReleaseTime orgId={orgId} release={release} />
-                  </VersionColumn>
-                  <StatsColumn>
-                    <ReleaseStats release={release} />
-                  </StatsColumn>
-                  <ProjectsColumn>
-                    <ProjectList
-                      projects={projects.filter(project =>
-                        release.projects.map(p => p.slug).includes(project.slug)
-                      )}
-                      orgId={orgId}
+          releaseList.map(release => (
+            <ReleasePanelItem key={release.version}>
+              <Layout>
+                <VersionColumn>
+                  <VersionWrapper>
+                    <Version
                       version={release.version}
+                      preserveGlobalSelection
+                      tooltipRawVersion
+                      truncate
                     />
-                  </ProjectsColumn>
-                  <CountColumn>
-                    <Count className="release-count" value={release.newGroups || 0} />
-                  </CountColumn>
-                  <LastEventColumn>
-                    {release.lastEvent ? (
-                      <TimeSince date={release.lastEvent} />
-                    ) : (
-                      <span>—</span>
+                  </VersionWrapper>
+                  <LatestDeployOrReleaseTime orgId={orgId} release={release} />
+                </VersionColumn>
+                <StatsColumn>
+                  <ReleaseStats release={release} />
+                </StatsColumn>
+                <ProjectsColumn>
+                  <ProjectList
+                    projects={projects.filter(project =>
+                      release.projects.map(p => p.slug).includes(project.slug)
                     )}
-                  </LastEventColumn>
-                </Layout>
-              </ReleasePanelItem>
-            );
-          })
+                    orgId={orgId}
+                    version={release.version}
+                  />
+                </ProjectsColumn>
+                <CountColumn>
+                  <Count className="release-count" value={release.newGroups || 0} />
+                </CountColumn>
+                <LastEventColumn>
+                  {release.lastEvent ? (
+                    <TimeSince date={release.lastEvent} />
+                  ) : (
+                    <span>—</span>
+                  )}
+                </LastEventColumn>
+              </Layout>
+            </ReleasePanelItem>
+          ))
         }
       </Projects>
     </div>
diff --git a/src/sentry/static/sentry/app/views/releases/list/releaseListHeader.jsx b/src/sentry/static/sentry/app/views/releases/list/releaseListHeader.jsx
index 1525c0df5a..41ae637433 100644
--- a/src/sentry/static/sentry/app/views/releases/list/releaseListHeader.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/releaseListHeader.jsx
@@ -12,17 +12,15 @@ import {
   StatsColumn,
 } from './layout';
 
-const ReleaseListHeader = () => {
-  return (
-    <PanelHeader>
-      <Layout>
-        <VersionColumn>{t('Version')}</VersionColumn>
-        <ProjectsColumn>{t('Project')}</ProjectsColumn>
-        <StatsColumn />
-        <CountColumn>{t('New Issues')}</CountColumn>
-        <LastEventColumn>{t('Last Event')}</LastEventColumn>
-      </Layout>
-    </PanelHeader>
-  );
-};
+const ReleaseListHeader = () => (
+  <PanelHeader>
+    <Layout>
+      <VersionColumn>{t('Version')}</VersionColumn>
+      <ProjectsColumn>{t('Project')}</ProjectsColumn>
+      <StatsColumn />
+      <CountColumn>{t('New Issues')}</CountColumn>
+      <LastEventColumn>{t('Last Event')}</LastEventColumn>
+    </Layout>
+  </PanelHeader>
+);
 export default ReleaseListHeader;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index bf91ccc979..3e9063d060 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -94,8 +94,8 @@ class ReleasesList extends AsyncView<Props, State> {
   }
 
   transformToProjectRelease(releases: Release[]): ProjectRelease[] {
-    return releases.flatMap(release => {
-      return release.projects.map(project => {
+    return releases.flatMap(release =>
+      release.projects.map(project => {
         const {
           version,
           dateCreated,
@@ -118,8 +118,8 @@ class ReleasesList extends AsyncView<Props, State> {
           projectSlug: slug,
           // TODO(releasesv2): make api send also project platform
         };
-      });
-    });
+      })
+    );
   }
 
   renderInnerBody() {
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
index f313d8224b..0ea02b12b1 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
@@ -20,77 +20,75 @@ type Props = {
   project?: Project | AvatarProject;
 };
 
-const ReleaseCard = ({release, project}: Props) => {
+const ReleaseCard = ({release, project}: Props) => (
   // TODO(releasesv2): probably makes sense at this point to split the header and data to different files (move styles to share layout file)
-  return (
-    <Panel>
-      <PanelBody>
-        <StyledPanelItem>
-          <HeaderLayout>
-            <VersionColumn>
-              <ColumnTitle>{t('Version')}</ColumnTitle>
-            </VersionColumn>
-            <ProjectsColumn>
-              <ColumnTitle>{t('Project name')}</ColumnTitle>
-            </ProjectsColumn>
-            <CommitsColumn>
-              {release.commitCount > 0 && (
-                <ColumnTitle>
-                  {[
-                    tn('%s commit', '%s commits', release.commitCount || 0),
-                    t('by'),
-                    tn('%s author', '%s authors', release.authors?.length || 0),
-                  ].join(' ')}
-                </ColumnTitle>
-              )}
-            </CommitsColumn>
-            <CreatedColumn>
-              <ColumnTitle>{t('Created')}</ColumnTitle>
-            </CreatedColumn>
-            <NewIssuesColumn>
-              <ColumnTitle>{t('New issues')}</ColumnTitle>
-            </NewIssuesColumn>
-          </HeaderLayout>
-          <Layout>
-            <VersionColumn>
-              <VersionWrapper>
-                <Version
-                  version={release.version}
-                  preserveGlobalSelection
-                  tooltipRawVersion
-                  truncate
-                />
-                <TimeWithIcon date={release.dateReleased || release.dateCreated} />
-              </VersionWrapper>
-            </VersionColumn>
-
-            <ProjectsColumn>
-              <ProjectBadge project={project} avatarSize={14} key={project?.slug} />
-            </ProjectsColumn>
-
-            <CommitsColumn>
-              <ReleaseStats release={release} withHeading={false} />
-            </CommitsColumn>
-
-            <CreatedColumn>
-              {release.dateReleased || release.dateCreated ? (
-                <TimeSince date={release.dateReleased || release.dateCreated} />
-              ) : (
-                <span>-</span>
-              )}
-            </CreatedColumn>
-
-            <NewIssuesColumn>
-              <Count value={release.newGroups || 0} />
-            </NewIssuesColumn>
-          </Layout>
-        </StyledPanelItem>
-      </PanelBody>
-
-      {release.healthData && <ReleaseHealth release={release} />}
-    </Panel>
-  );
-};
+  <Panel>
+    <PanelBody>
+      <StyledPanelItem>
+        <HeaderLayout>
+          <VersionColumn>
+            <ColumnTitle>{t('Version')}</ColumnTitle>
+          </VersionColumn>
+          <ProjectsColumn>
+            <ColumnTitle>{t('Project name')}</ColumnTitle>
+          </ProjectsColumn>
+          <CommitsColumn>
+            {release.commitCount > 0 && (
+              <ColumnTitle>
+                {[
+                  tn('%s commit', '%s commits', release.commitCount || 0),
+                  t('by'),
+                  tn('%s author', '%s authors', release.authors?.length || 0),
+                ].join(' ')}
+              </ColumnTitle>
+            )}
+          </CommitsColumn>
+          <CreatedColumn>
+            <ColumnTitle>{t('Created')}</ColumnTitle>
+          </CreatedColumn>
+          <NewIssuesColumn>
+            <ColumnTitle>{t('New issues')}</ColumnTitle>
+          </NewIssuesColumn>
+        </HeaderLayout>
+        <Layout>
+          <VersionColumn>
+            <VersionWrapper>
+              <Version
+                version={release.version}
+                preserveGlobalSelection
+                tooltipRawVersion
+                truncate
+              />
+              <TimeWithIcon date={release.dateReleased || release.dateCreated} />
+            </VersionWrapper>
+          </VersionColumn>
+
+          <ProjectsColumn>
+            <ProjectBadge project={project} avatarSize={14} key={project?.slug} />
+          </ProjectsColumn>
+
+          <CommitsColumn>
+            <ReleaseStats release={release} withHeading={false} />
+          </CommitsColumn>
+
+          <CreatedColumn>
+            {release.dateReleased || release.dateCreated ? (
+              <TimeSince date={release.dateReleased || release.dateCreated} />
+            ) : (
+              <span>-</span>
+            )}
+          </CreatedColumn>
+
+          <NewIssuesColumn>
+            <Count value={release.newGroups || 0} />
+          </NewIssuesColumn>
+        </Layout>
+      </StyledPanelItem>
+    </PanelBody>
+
+    {release.healthData && <ReleaseHealth release={release} />}
+  </Panel>
+);
 
 const StyledPanelItem = styled(PanelItem)`
   flex-direction: column;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
index 8378053b88..df6e3f3ae1 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
@@ -38,9 +38,7 @@ class UsersChart extends React.Component<Props> {
       return null;
     }
 
-    const chartData = stats.map(point => {
-      return {x: point[0], y: point[1]};
-    });
+    const chartData = stats.map(point => ({x: point[0], y: point[1]}));
 
     return (
       <LazyLoad debounce={50} height={height}>
diff --git a/src/sentry/static/sentry/app/views/routeNotFound.tsx b/src/sentry/static/sentry/app/views/routeNotFound.tsx
index 0e9c0dedf9..4ee5ac0bcf 100644
--- a/src/sentry/static/sentry/app/views/routeNotFound.tsx
+++ b/src/sentry/static/sentry/app/views/routeNotFound.tsx
@@ -14,9 +14,7 @@ class RouteNotFound extends React.Component {
     });
   }
 
-  getTitle = () => {
-    return 'Page Not Found';
-  };
+  getTitle = () => 'Page Not Found';
 
   render() {
     // TODO(dcramer): show additional resource links
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx b/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx
index 84ae2a037f..a36210f87e 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx
@@ -103,15 +103,13 @@ class AccountAuthorizations extends AsyncView {
 
             {!isEmpty && (
               <div>
-                {data.map(authorization => {
-                  return (
-                    <AuthorizationRow
-                      key={authorization.id}
-                      authorization={authorization}
-                      onRevoke={this.handleRevoke}
-                    />
-                  );
-                })}
+                {data.map(authorization => (
+                  <AuthorizationRow
+                    key={authorization.id}
+                    authorization={authorization}
+                    onRevoke={this.handleRevoke}
+                  />
+                ))}
               </div>
             )}
           </PanelBody>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx b/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
index 48d00f6c3b..ec437a0e2d 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
@@ -61,11 +61,10 @@ class AccountClose extends AsyncView {
   }
 
   // Returns an array of single owners
-  getSingleOwners = () => {
-    return this.state.organizations
+  getSingleOwners = () =>
+    this.state.organizations
       .filter(({singleOwner}) => singleOwner)
       .map(({organization}) => organization.slug);
-  };
 
   handleChange = ({slug}, isSingle, event) => {
     const checked = event.target.checked;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
index d36ba7dd74..a1858458ed 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
@@ -162,17 +162,15 @@ class AccountEmails extends AsyncView {
             )}
 
             {secondary &&
-              secondary.map(emailObj => {
-                return (
-                  <EmailRow
-                    key={emailObj.email}
-                    onSetPrimary={this.handleSetPrimary}
-                    onRemove={this.handleRemove}
-                    onVerify={this.handleVerify}
-                    {...emailObj}
-                  />
-                );
-              })}
+              secondary.map(emailObj => (
+                <EmailRow
+                  key={emailObj.email}
+                  onSetPrimary={this.handleSetPrimary}
+                  onRemove={this.handleRemove}
+                  onVerify={this.handleVerify}
+                  {...emailObj}
+                />
+              ))}
           </PanelBody>
         </Panel>
 
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
index 083859f542..4cda8d4a73 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
@@ -122,45 +122,37 @@ class AccountNotificationsByProject extends React.Component {
     const {title, description, ...fieldConfig} = field;
 
     // Display as select box in this view regardless of the type specified in the config
-    return Object.values(projectsByOrg).map(org => {
-      return {
-        name: org.organization.name,
-        projects: org.projects.map(project => {
-          return {
-            ...fieldConfig,
-            // `name` key refers to field name
-            // we use project.id because slugs are not unique across orgs
-            name: project.id,
-            label: project.slug,
-          };
-        }),
-      };
-    });
+    return Object.values(projectsByOrg).map(org => ({
+      name: org.organization.name,
+      projects: org.projects.map(project => ({
+        ...fieldConfig,
+        // `name` key refers to field name
+        // we use project.id because slugs are not unique across orgs
+        name: project.id,
+        label: project.slug,
+      })),
+    }));
   }
 
   render() {
     const data = this.getFieldData();
 
-    return data.map(({name, projects: projectFields}) => {
-      return (
-        <div key={name}>
-          <PanelHeader>{name}</PanelHeader>
-          {projectFields.map(field => {
-            return (
-              <PanelBodyLineItem key={field.name}>
-                <SelectField
-                  deprecatedSelectControl
-                  defaultValue={field.defaultValue}
-                  name={field.name}
-                  choices={field.choices}
-                  label={field.label}
-                />
-              </PanelBodyLineItem>
-            );
-          })}
-        </div>
-      );
-    });
+    return data.map(({name, projects: projectFields}) => (
+      <div key={name}>
+        <PanelHeader>{name}</PanelHeader>
+        {projectFields.map(field => (
+          <PanelBodyLineItem key={field.name}>
+            <SelectField
+              deprecatedSelectControl
+              defaultValue={field.defaultValue}
+              name={field.name}
+              choices={field.choices}
+              label={field.label}
+            />
+          </PanelBodyLineItem>
+        ))}
+      </div>
+    ));
   }
 }
 
@@ -176,15 +168,13 @@ class AccountNotificationsByOrganization extends React.Component {
     const {title, description, ...fieldConfig} = field;
 
     // Display as select box in this view regardless of the type specified in the config
-    return organizations.map(org => {
-      return {
-        ...fieldConfig,
-        // `name` key refers to field name
-        // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)
-        name: org.id,
-        label: org.slug,
-      };
-    });
+    return organizations.map(org => ({
+      ...fieldConfig,
+      // `name` key refers to field name
+      // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)
+      name: org.id,
+      label: org.slug,
+    }));
   }
 
   render() {
@@ -192,19 +182,17 @@ class AccountNotificationsByOrganization extends React.Component {
 
     return (
       <React.Fragment>
-        {orgFields.map(field => {
-          return (
-            <PanelBodyLineItem key={field.name}>
-              <SelectField
-                deprecatedSelectControl
-                defaultValue={field.defaultValue}
-                name={field.name}
-                choices={field.choices}
-                label={field.label}
-              />
-            </PanelBodyLineItem>
-          );
-        })}
+        {orgFields.map(field => (
+          <PanelBodyLineItem key={field.name}>
+            <SelectField
+              deprecatedSelectControl
+              defaultValue={field.defaultValue}
+              name={field.name}
+              choices={field.choices}
+              label={field.label}
+            />
+          </PanelBodyLineItem>
+        ))}
       </React.Fragment>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecuritySessionHistory.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecuritySessionHistory.jsx
index 916d94996f..d3b73d5a06 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecuritySessionHistory.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecuritySessionHistory.jsx
@@ -97,9 +97,9 @@ class AccountSecuritySessionHistory extends AsyncView {
           </SessionPanelHeader>
 
           <PanelBody>
-            {ipList.map(ipObj => {
-              return <SessionRow key={ipObj.id} {...ipObj} />;
-            })}
+            {ipList.map(ipObj => (
+              <SessionRow key={ipObj.id} {...ipObj} />
+            ))}
           </PanelBody>
         </Panel>
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.tsx b/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.tsx
index 36576daf7d..13aeac9aac 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.tsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.tsx
@@ -3,8 +3,8 @@ import React from 'react';
 import SettingsNavigation from 'app/views/settings/components/settingsNavigation';
 import navigationConfiguration from 'app/views/settings/account/navigationConfiguration';
 
-const AccountSettingsNavigation = () => {
-  return <SettingsNavigation navigationObjects={navigationConfiguration} />;
-};
+const AccountSettingsNavigation = () => (
+  <SettingsNavigation navigationObjects={navigationConfiguration} />
+);
 
 export default AccountSettingsNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
index 9118c728f8..8ea711b9b3 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
@@ -51,15 +51,13 @@ class ApiApplicationsDetails extends AsyncView<Props, State> {
 
             <PanelBody>
               <FormField name="clientID" label="Client ID" overflow>
-                {({value}) => {
-                  return (
-                    <div>
-                      <TextCopyInput>
-                        {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
-                      </TextCopyInput>
-                    </div>
-                  );
-                }}
+                {({value}) => (
+                  <div>
+                    <TextCopyInput>
+                      {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
+                    </TextCopyInput>
+                  </div>
+                )}
               </FormField>
 
               <FormField
@@ -69,15 +67,15 @@ class ApiApplicationsDetails extends AsyncView<Props, State> {
                 help={t(`Your secret is only available briefly after application creation. Make
                   sure to save this value!`)}
               >
-                {({value}) => {
-                  return value ? (
+                {({value}) =>
+                  value ? (
                     <TextCopyInput>
                       {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
                     </TextCopyInput>
                   ) : (
                     <em>hidden</em>
-                  );
-                }}
+                  )
+                }
               </FormField>
 
               <FormField name="" label="Authorization URL">
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx
index db25817a30..97fd9ce9d6 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx
@@ -75,16 +75,14 @@ class ApiApplications extends AsyncView<Props, State> {
 
           <PanelBody>
             {!isEmpty ? (
-              this.state.appList.map(app => {
-                return (
-                  <Row
-                    api={this.api}
-                    key={app.id}
-                    app={app}
-                    onRemove={this.handleRemoveApplication}
-                  />
-                );
-              })
+              this.state.appList.map(app => (
+                <Row
+                  api={this.api}
+                  key={app.id}
+                  app={app}
+                  onRemove={this.handleRemoveApplication}
+                />
+              ))
             ) : (
               <EmptyMessage>
                 {t("You haven't created any applications yet.")}
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiTokens.jsx b/src/sentry/static/sentry/app/views/settings/account/apiTokens.jsx
index 46eeb924b6..2aa167155b 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiTokens.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiTokens.jsx
@@ -117,15 +117,13 @@ export class ApiTokens extends AsyncView {
             )}
 
             {!isEmpty &&
-              tokenList.map(token => {
-                return (
-                  <ApiTokenRow
-                    key={token.token}
-                    token={token}
-                    onRemove={this.handleRemoveToken}
-                  />
-                );
-              })}
+              tokenList.map(token => (
+                <ApiTokenRow
+                  key={token.token}
+                  token={token}
+                  onRemove={this.handleRemoveToken}
+                />
+              ))}
           </PanelBody>
         </Panel>
       </div>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
index 0ef5c83fd7..cf6c788d94 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
@@ -52,22 +52,20 @@ export default class MultipleCheckbox extends React.Component {
 
     return (
       <MultipleCheckboxWrapper>
-        {choices.map(([choiceValue, choiceLabel]) => {
-          return (
-            <Box key={choiceValue} width={[1, 1 / 2, 1 / 3, 1 / 4]}>
-              <Label>
-                <input
-                  type="checkbox"
-                  value={choiceValue}
-                  onChange={this.onChange.bind(this, choiceValue)}
-                  disabled={disabled}
-                  checked={defined(value) && value.indexOf(choiceValue) !== -1}
-                />
-                <CheckboxLabel>{choiceLabel}</CheckboxLabel>
-              </Label>
-            </Box>
-          );
-        })}
+        {choices.map(([choiceValue, choiceLabel]) => (
+          <Box key={choiceValue} width={[1, 1 / 2, 1 / 3, 1 / 4]}>
+            <Label>
+              <input
+                type="checkbox"
+                value={choiceValue}
+                onChange={this.onChange.bind(this, choiceValue)}
+                disabled={disabled}
+                checked={defined(value) && value.indexOf(choiceValue) !== -1}
+              />
+              <CheckboxLabel>{choiceLabel}</CheckboxLabel>
+            </Label>
+          </Box>
+        ))}
       </MultipleCheckboxWrapper>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
index c0f9d28736..8348fcb92c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
@@ -16,40 +16,38 @@ type Props = {
   onChange: (id: string, e: React.MouseEvent) => void;
 };
 
-const RadioGroup = ({value, disabled, choices, label, onChange, ...props}: Props) => {
-  return (
-    <div {...props} role="radiogroup" aria-labelledby={label}>
-      {(choices || []).map(([id, name, description], index) => {
-        const isSelected = value === id;
+const RadioGroup = ({value, disabled, choices, label, onChange, ...props}: Props) => (
+  <div {...props} role="radiogroup" aria-labelledby={label}>
+    {(choices || []).map(([id, name, description], index) => {
+      const isSelected = value === id;
 
-        return (
-          <RadioLineItem
-            key={index}
-            onClick={e => !disabled && onChange(id, e)}
-            role="radio"
-            index={index}
-            aria-checked={isSelected}
-            disabled={disabled}
-          >
-            <RadioLineButton aria-label={id} type="button" disabled={disabled}>
-              {isSelected && (
-                <RadioLineButtonFill disabled={disabled} animate={value !== ''} />
-              )}
-            </RadioLineButton>
-            <RadioLineText disabled={disabled}>{name}</RadioLineText>
-            {description && (
-              <React.Fragment>
-                {/* If there is a description then we want to have a 2x2 grid so the first column width aligns with Radio Button */}
-                <div />
-                <Description>{description}</Description>
-              </React.Fragment>
+      return (
+        <RadioLineItem
+          key={index}
+          onClick={e => !disabled && onChange(id, e)}
+          role="radio"
+          index={index}
+          aria-checked={isSelected}
+          disabled={disabled}
+        >
+          <RadioLineButton aria-label={id} type="button" disabled={disabled}>
+            {isSelected && (
+              <RadioLineButtonFill disabled={disabled} animate={value !== ''} />
             )}
-          </RadioLineItem>
-        );
-      })}
-    </div>
-  );
-};
+          </RadioLineButton>
+          <RadioLineText disabled={disabled}>{name}</RadioLineText>
+          {description && (
+            <React.Fragment>
+              {/* If there is a description then we want to have a 2x2 grid so the first column width aligns with Radio Button */}
+              <div />
+              <Description>{description}</Description>
+            </React.Fragment>
+          )}
+        </RadioLineItem>
+      );
+    })}
+  </div>
+);
 
 RadioGroup.propTypes = {
   value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
index 3a8d9baf47..7197a96cc2 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
@@ -26,11 +26,11 @@ export default class InputField extends React.Component {
 
     return (
       <FormField className={className} {...this.props}>
-        {({children, ...formFieldProps}) => {
-          return field({
+        {({children, ...formFieldProps}) =>
+          field({
             ...formFieldProps,
-          });
-        }}
+          })
+        }
       </FormField>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/returnButton.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/returnButton.jsx
index d47114e064..20946d9a96 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/returnButton.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/returnButton.jsx
@@ -34,16 +34,14 @@ const ClickTargetStyled = styled('div')`
   }
 `;
 
-const returnButton = props => {
-  return (
-    <ClickTargetStyled {...props}>
-      <Tooltip title={t('Save')}>
-        <SubmitButton>
-          <InlineSvg size="0.75em" src="icon-return-key" />
-        </SubmitButton>
-      </Tooltip>
-    </ClickTargetStyled>
-  );
-};
+const returnButton = props => (
+  <ClickTargetStyled {...props}>
+    <Tooltip title={t('Save')}>
+      <SubmitButton>
+        <InlineSvg size="0.75em" src="icon-return-key" />
+      </SubmitButton>
+    </Tooltip>
+  </ClickTargetStyled>
+);
 
 export default returnButton;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
index f6ecfca339..e9c539a10c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
@@ -60,16 +60,14 @@ export default class SelectField extends React.Component {
       <InputField
         {...otherProps}
         alignRight={this.props.small}
-        field={({onChange, onBlur, required: _required, ...props}) => {
-          return (
-            <SelectControl
-              {...props}
-              clearable={allowClear}
-              multiple={multiple}
-              onChange={this.handleChange.bind(this, onBlur, onChange)}
-            />
-          );
-        }}
+        field={({onChange, onBlur, required: _required, ...props}) => (
+          <SelectControl
+            {...props}
+            clearable={allowClear}
+            multiple={multiple}
+            onChange={this.handleChange.bind(this, onBlur, onChange)}
+          />
+        )}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
index c1be087d3d..93598186c5 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
@@ -97,21 +97,19 @@ class BreadcrumbDropdown extends React.Component {
         onSelect={onSelect}
         virtualizedHeight={41}
       >
-        {({getActorProps, actions, isOpen}) => {
-          return (
-            <Crumb
-              {...getActorProps({
-                hasMenu,
-                onClick: this.handleClickActor.bind(this, actions),
-                onMouseEnter: this.handleMouseEnterActor.bind(this, actions),
-                onMouseLeave: this.handleMouseLeave.bind(this, actions),
-              })}
-            >
-              <span>{name || route.name} </span>
-              <Divider isHover={hasMenu && isOpen} isLast={isLast} />
-            </Crumb>
-          );
-        }}
+        {({getActorProps, actions, isOpen}) => (
+          <Crumb
+            {...getActorProps({
+              hasMenu,
+              onClick: this.handleClickActor.bind(this, actions),
+              onMouseEnter: this.handleMouseEnterActor.bind(this, actions),
+              onMouseLeave: this.handleMouseLeave.bind(this, actions),
+            })}
+          >
+            <span>{name || route.name} </span>
+            <Divider isHover={hasMenu && isOpen} isLast={isLast} />
+          </Crumb>
+        )}
       </DropdownAutoCompleteMenu>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx b/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
index 93ec7fb2eb..fc33a5a30c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
@@ -76,9 +76,7 @@ class TeamSelect extends React.Component {
       options = [];
     } else {
       options = teams
-        .filter(team => {
-          return !selectedTeams.includes(team.slug);
-        })
+        .filter(team => !selectedTeams.includes(team.slug))
         .map(team => ({
           value: team.slug,
           searchKey: team.slug,
@@ -125,18 +123,16 @@ class TeamSelect extends React.Component {
         ? confirmLastTeamRemoveMessage
         : null;
 
-    return selectedTeams.map(team => {
-      return (
-        <TeamRow
-          key={team}
-          orgId={organization.slug}
-          team={team}
-          onRemove={this.handleRemove}
-          disabled={disabled}
-          confirmMessage={confirmMessage}
-        />
-      );
-    });
+    return selectedTeams.map(team => (
+      <TeamRow
+        key={team}
+        orgId={organization.slug}
+        team={team}
+        onRemove={this.handleRemove}
+        disabled={disabled}
+        confirmMessage={confirmMessage}
+      />
+    ));
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuditLog/auditLogList.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuditLog/auditLogList.jsx
index c8ee597e52..ddfd35e835 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuditLog/auditLogList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuditLog/auditLogList.jsx
@@ -108,39 +108,37 @@ class AuditLogList extends React.Component {
             )}
 
             {hasEntries &&
-              entries.map(entry => {
-                return (
-                  <StyledPanelItem alignItems="center" key={entry.id}>
-                    <UserInfo>
-                      <div>
-                        {entry.actor.email && (
-                          <UserAvatar style={avatarStyle} user={entry.actor} />
-                        )}
-                      </div>
-                      <NameContainer>
-                        <Name data-test-id="actor-name">
-                          {entry.actor.isSuperuser
-                            ? t('%s (Sentry Staff)', entry.actor.name)
-                            : entry.actor.name}
-                        </Name>
-                        <Note>{entry.note}</Note>
-                      </NameContainer>
-                    </UserInfo>
-                    <div>{entry.event}</div>
+              entries.map(entry => (
+                <StyledPanelItem alignItems="center" key={entry.id}>
+                  <UserInfo>
                     <div>
-                      <Tooltip
-                        title={entry.ipAddress}
-                        disabled={entry.ipAddress && entry.ipAddress.length <= ipv4Length}
-                      >
-                        <OverflowBox>{entry.ipAddress}</OverflowBox>
-                      </Tooltip>
+                      {entry.actor.email && (
+                        <UserAvatar style={avatarStyle} user={entry.actor} />
+                      )}
                     </div>
-                    <div>
-                      <DateTime date={entry.dateCreated} />
-                    </div>
-                  </StyledPanelItem>
-                );
-              })}
+                    <NameContainer>
+                      <Name data-test-id="actor-name">
+                        {entry.actor.isSuperuser
+                          ? t('%s (Sentry Staff)', entry.actor.name)
+                          : entry.actor.name}
+                      </Name>
+                      <Note>{entry.note}</Note>
+                    </NameContainer>
+                  </UserInfo>
+                  <div>{entry.event}</div>
+                  <div>
+                    <Tooltip
+                      title={entry.ipAddress}
+                      disabled={entry.ipAddress && entry.ipAddress.length <= ipv4Length}
+                    >
+                      <OverflowBox>{entry.ipAddress}</OverflowBox>
+                    </Tooltip>
+                  </div>
+                  <div>
+                    <DateTime date={entry.dateCreated} />
+                  </div>
+                </StyledPanelItem>
+              ))}
           </PanelBody>
         </Panel>
         {pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
index 3a88628cea..7ed9329dbe 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.tsx
@@ -54,9 +54,9 @@ export default class Subscriptions extends React.Component<Props> {
   componentDidUpdate() {
     const {permissions, events} = this.props;
 
-    const permittedEvents = events.filter(resource => {
-      return permissions[PERMISSIONS_MAP[resource]] !== 'no-access';
-    });
+    const permittedEvents = events.filter(
+      resource => permissions[PERMISSIONS_MAP[resource]] !== 'no-access'
+    );
 
     if (JSON.stringify(events) !== JSON.stringify(permittedEvents)) {
       this.save(permittedEvents);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx
index b9b4aa4071..d5e81fe4f1 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx
@@ -83,8 +83,8 @@ const ResponseCode = ({code}: {code: number}) => {
   );
 };
 
-const TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string}) => {
-  return link ? (
+const TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string}) =>
+  link ? (
     <Link to={link} target="_blank">
       <DateTime date={date} />
       <StyledInlineSvg src="icon-open" size="12px" />
@@ -92,7 +92,6 @@ const TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string})
   ) : (
     <DateTime date={date} />
   );
-};
 
 type Props = AsyncComponent['props'] & {
   app: SentryApp;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index e60ded708f..1490706fb0 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -233,44 +233,42 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
   renderTokens = () => {
     const {tokens} = this.state;
     if (tokens.length > 0) {
-      return tokens.map(token => {
-        return (
-          <StyledPanelItem key={token.token}>
-            <TokenItem>
-              <Tooltip
-                disabled={this.showAuthInfo}
-                position="right"
-                containerDisplayMode="inline"
-                title={t(
-                  'You do not have access to view these credentials because the permissions for this integration exceed those of your role.'
-                )}
-              >
-                <TextCopyInput>
-                  {getDynamicText({value: token.token, fixed: 'xxxxxx'})}
-                </TextCopyInput>
-              </Tooltip>
-            </TokenItem>
-            <CreatedDate>
-              <CreatedTitle>Created:</CreatedTitle>
-              <DateTime
-                date={getDynamicText({
-                  value: token.dateCreated,
-                  fixed: new Date(1508208080000),
-                })}
-              />
-            </CreatedDate>
-            <Button
-              onClick={this.onRemoveToken.bind(this, token)}
-              size="small"
-              icon="icon-trash"
-              data-test-id="token-delete"
-              type="button"
+      return tokens.map(token => (
+        <StyledPanelItem key={token.token}>
+          <TokenItem>
+            <Tooltip
+              disabled={this.showAuthInfo}
+              position="right"
+              containerDisplayMode="inline"
+              title={t(
+                'You do not have access to view these credentials because the permissions for this integration exceed those of your role.'
+              )}
             >
-              {t('Revoke')}
-            </Button>
-          </StyledPanelItem>
-        );
-      });
+              <TextCopyInput>
+                {getDynamicText({value: token.token, fixed: 'xxxxxx'})}
+              </TextCopyInput>
+            </Tooltip>
+          </TokenItem>
+          <CreatedDate>
+            <CreatedTitle>Created:</CreatedTitle>
+            <DateTime
+              date={getDynamicText({
+                value: token.dateCreated,
+                fixed: new Date(1508208080000),
+              })}
+            />
+          </CreatedDate>
+          <Button
+            onClick={this.onRemoveToken.bind(this, token)}
+            size="small"
+            icon="icon-trash"
+            data-test-id="token-delete"
+            type="button"
+          >
+            {t('Revoke')}
+          </Button>
+        </StyledPanelItem>
+      ));
     } else {
       return <EmptyMessage description={t('No tokens created yet.')} />;
     }
@@ -369,18 +367,16 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
               <PanelBody>
                 {app.status !== 'internal' && (
                   <FormField name="clientId" label="Client ID" overflow>
-                    {({value}) => {
-                      return (
-                        <TextCopyInput>
-                          {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
-                        </TextCopyInput>
-                      );
-                    }}
+                    {({value}) => (
+                      <TextCopyInput>
+                        {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
+                      </TextCopyInput>
+                    )}
                   </FormField>
                 )}
                 <FormField overflow name="clientSecret" label="Client Secret">
-                  {({value}) => {
-                    return value ? (
+                  {({value}) =>
+                    value ? (
                       <Tooltip
                         disabled={this.showAuthInfo}
                         position="right"
@@ -395,8 +391,8 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
                       </Tooltip>
                     ) : (
                       <em>hidden</em>
-                    );
-                  }}
+                    )
+                  }
                 </FormField>
               </PanelBody>
             </Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
index 1723b78050..402be62e60 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
@@ -236,13 +236,11 @@ const StatusIndicator = styled(({status, ...props}: StatusIndicatorProps) => {
 
 type PublishStatusProps = {status: SentryApp['status']; theme?: any};
 
-const PublishStatus = styled(({status, ...props}: PublishStatusProps) => {
-  return (
-    <Flex alignItems="center">
-      <div {...props}>{t(`${status}`)}</div>
-    </Flex>
-  );
-})`
+const PublishStatus = styled(({status, ...props}: PublishStatusProps) => (
+  <Flex alignItems="center">
+    <div {...props}>{t(`${status}`)}</div>
+  </Flex>
+))`
   color: ${(props: PublishStatusProps) =>
     props.status === 'published' ? props.theme.success : props.theme.gray2};
   font-weight: light;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
index 143ff07e30..0153257911 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
@@ -44,18 +44,16 @@ export const UninstallButton = ({
 type InstallButtonProps = {
   onClickInstall?: () => void;
 };
-export const InstallButton = ({onClickInstall}: InstallButtonProps) => {
-  return (
-    <Button
-      onClick={onClickInstall}
-      size="small"
-      icon="icon-circle-add"
-      className="btn btn-default"
-    >
-      {t('Install')}
-    </Button>
-  );
-};
+export const InstallButton = ({onClickInstall}: InstallButtonProps) => (
+  <Button
+    onClick={onClickInstall}
+    size="small"
+    icon="icon-circle-add"
+    className="btn btn-default"
+  >
+    {t('Install')}
+  </Button>
+);
 
 const StyledButton = styled(Button)`
   color: ${p => p.theme.gray2};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index 20c54e00e1..b852bab8bd 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -104,12 +104,11 @@ class InviteMember extends React.Component {
     router.push(replaceRouterParams(pathToParentRoute, params));
   };
 
-  splitEmails = text => {
-    return text
+  splitEmails = text =>
+    text
       .split(',')
       .map(e => e.trim())
       .filter(e => e);
-  };
 
   inviteUser = email => {
     const {slug} = this.props.organization;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
index 2aa4c6c2ad..c3946cac77 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
@@ -204,27 +204,25 @@ class OrganizationMembersList extends AsyncView<Props, State> {
           <PanelHeader>{t('Members')}</PanelHeader>
 
           <PanelBody>
-            {members.map(member => {
-              return (
-                <OrganizationMemberRow
-                  routes={routes}
-                  params={params}
-                  key={member.id}
-                  member={member}
-                  status={this.state.invited[member.id]}
-                  orgId={params.orgId}
-                  orgName={orgName}
-                  memberCanLeave={!isOnlyOwner}
-                  currentUser={currentUser}
-                  canRemoveMembers={canRemove}
-                  canAddMembers={canAddMembers}
-                  requireLink={requireLink}
-                  onSendInvite={this.handleSendInvite}
-                  onRemove={this.handleRemove}
-                  onLeave={this.handleLeave}
-                />
-              );
-            })}
+            {members.map(member => (
+              <OrganizationMemberRow
+                routes={routes}
+                params={params}
+                key={member.id}
+                member={member}
+                status={this.state.invited[member.id]}
+                orgId={params.orgId}
+                orgName={orgName}
+                memberCanLeave={!isOnlyOwner}
+                currentUser={currentUser}
+                canRemoveMembers={canRemove}
+                canAddMembers={canAddMembers}
+                requireLink={requireLink}
+                onSendInvite={this.handleSendInvite}
+                onRemove={this.handleRemove}
+                onLeave={this.handleLeave}
+              />
+            ))}
             {members.length === 0 && (
               <EmptyMessage>{t('No members found.')}</EmptyMessage>
             )}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationProjects/projectStatsGraph.jsx b/src/sentry/static/sentry/app/views/settings/organizationProjects/projectStatsGraph.jsx
index b3b02f8c30..dc020785e1 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationProjects/projectStatsGraph.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationProjects/projectStatsGraph.jsx
@@ -7,11 +7,7 @@ import SentryTypes from 'app/sentryTypes';
 
 const ProjectStatsGraph = ({project, stats}) => {
   stats = stats || project.stats;
-  const chartData =
-    stats &&
-    stats.map(point => {
-      return {x: point[0], y: point[1]};
-    });
+  const chartData = stats && stats.map(point => ({x: point[0], y: point[1]}));
 
   return (
     <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRateLimits/organizationRateLimits.jsx b/src/sentry/static/sentry/app/views/settings/organizationRateLimits/organizationRateLimits.jsx
index e7f52a95e9..d21972bc49 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRateLimits/organizationRateLimits.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRateLimits/organizationRateLimits.jsx
@@ -83,13 +83,13 @@ export default class OrganizationRateLimit extends React.Component {
                     'The maximum number of events to accept across this entire organization.'
                   )}
                   placeholder="e.g. 500"
-                  formatLabel={value => {
-                    return !value
+                  formatLabel={value =>
+                    !value
                       ? t('No Limit')
                       : tct('[number] per hour', {
                           number: value.toLocaleString(),
-                        });
-                  }}
+                        })
+                  }
                 />
               ) : (
                 <Field
@@ -118,15 +118,15 @@ export default class OrganizationRateLimit extends React.Component {
                 step={5}
                 min={50}
                 max={100}
-                formatLabel={value => {
-                  return value !== 100 ? (
+                formatLabel={value =>
+                  value !== 100 ? (
                     `${value}%`
                   ) : (
                     <span
                       dangerouslySetInnerHTML={{__html: `${t('No Limit')} &mdash; 100%`}}
                     />
-                  );
-                }}
+                  )
+                }
               />
             </Form>
           </PanelBody>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx b/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
index 071745323d..50cf1bb915 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
@@ -140,18 +140,16 @@ class AddRepositoryLink extends PluginComponentBase {
           </div>
         )}
         {!hasIntegration && this.renderNote(provider)}
-        {provider.config.map(field => {
-          return (
-            <div key={field.name}>
-              {this.renderField({
-                config: field,
-                formData: this.state.formData,
-                formErrors: errors,
-                onChange: this.changeField.bind(this, field.name),
-              })}
-            </div>
-          );
-        })}
+        {provider.config.map(field => (
+          <div key={field.name}>
+            {this.renderField({
+              config: field,
+              formData: this.state.formData,
+              formErrors: errors,
+              onChange: this.changeField.bind(this, field.name),
+            })}
+          </div>
+        ))}
       </form>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRepositories/organizationRepositories.tsx b/src/sentry/static/sentry/app/views/settings/organizationRepositories/organizationRepositories.tsx
index 65765db413..c638cda173 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRepositories/organizationRepositories.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRepositories/organizationRepositories.tsx
@@ -58,18 +58,16 @@ const OrganizationRepositories = ({itemList, onRepositoryChange, api, params}: P
           </PanelHeader>
           <PanelBody>
             <Box>
-              {itemList.map(repo => {
-                return (
-                  <RepositoryRow
-                    key={repo.id}
-                    repository={repo}
-                    api={api}
-                    showProvider
-                    orgId={orgId}
-                    onRepositoryChange={onRepositoryChange}
-                  />
-                );
-              })}
+              {itemList.map(repo => (
+                <RepositoryRow
+                  key={repo.id}
+                  repository={repo}
+                  api={api}
+                  showProvider
+                  orgId={orgId}
+                  onRepositoryChange={onRepositoryChange}
+                />
+              ))}
             </Box>
           </PanelBody>
         </Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
index dc8cd8b958..25ff68c448 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
@@ -37,18 +37,16 @@ class AllTeamsList extends React.Component {
 
   render() {
     const {access, organization, urlPrefix, openMembership, useCreateModal} = this.props;
-    const teamNodes = this.props.teamList.map((team, teamIdx) => {
-      return (
-        <AllTeamsRow
-          urlPrefix={urlPrefix}
-          access={access}
-          team={team}
-          organization={organization}
-          openMembership={openMembership}
-          key={team.slug}
-        />
-      );
-    });
+    const teamNodes = this.props.teamList.map((team, teamIdx) => (
+      <AllTeamsRow
+        urlPrefix={urlPrefix}
+        access={access}
+        team={team}
+        organization={organization}
+        openMembership={openMembership}
+        key={team.slug}
+      />
+    ));
 
     if (teamNodes.length !== 0) {
       return teamNodes;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
index be08cea620..756cff639c 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
@@ -84,9 +84,7 @@ class TeamMembers extends React.Component {
       {
         success: () => {
           this.setState({
-            teamMemberList: this.state.teamMemberList.filter(m => {
-              return m.id !== member.id;
-            }),
+            teamMemberList: this.state.teamMemberList.filter(m => m.id !== member.id),
           });
           addSuccessMessage(t('Successfully removed member from team.'));
         },
@@ -166,9 +164,9 @@ class TeamMembers extends React.Component {
       },
       {
         success: () => {
-          const orgMember = this.state.orgMemberList.find(member => {
-            return member.id === selection.value;
-          });
+          const orgMember = this.state.orgMemberList.find(
+            member => member.id === selection.value
+          );
           this.setState({
             loading: false,
             error: false,
@@ -208,18 +206,16 @@ class TeamMembers extends React.Component {
 
     const items = (this.state.orgMemberList || [])
       .filter(m => !existingMembers.has(m.id))
-      .map(m => {
-        return {
-          searchKey: `${m.name} ${m.email}`,
-          value: m.id,
-          label: (
-            <StyledUserListElement>
-              <StyledAvatar user={m} size={24} className="avatar" />
-              <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>
-            </StyledUserListElement>
-          ),
-        };
-      });
+      .map(m => ({
+        searchKey: `${m.name} ${m.email}`,
+        value: m.id,
+        label: (
+          <StyledUserListElement>
+            <StyledAvatar user={m} size={24} className="avatar" />
+            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>
+          </StyledUserListElement>
+        ),
+      }));
 
     const menuHeader = (
       <StyledMembersLabel>
@@ -261,22 +257,20 @@ class TeamMembers extends React.Component {
     );
   };
 
-  removeButton = member => {
-    return (
-      <Button
-        size="small"
-        onClick={this.removeMember.bind(this, member)}
-        label={t('Remove')}
-      >
-        <InlineSvg
-          src="icon-circle-subtract"
-          size="1.25em"
-          style={{marginRight: space(1)}}
-        />
-        {t('Remove')}
-      </Button>
-    );
-  };
+  removeButton = member => (
+    <Button
+      size="small"
+      onClick={this.removeMember.bind(this, member)}
+      label={t('Remove')}
+    >
+      <InlineSvg
+        src="icon-circle-subtract"
+        size="1.25em"
+        style={{marginRight: space(1)}}
+      />
+      {t('Remove')}
+    </Button>
+  );
 
   render() {
     if (this.state.loading) {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamProjects.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamProjects.jsx
index 88e73782e8..381adcc998 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamProjects.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamProjects.jsx
@@ -123,9 +123,7 @@ class TeamProjects extends React.Component {
   };
 
   handleProjectSelected = selection => {
-    const project = this.state.unlinkedProjects.find(p => {
-      return p.id === selection.value;
-    });
+    const project = this.state.unlinkedProjects.find(p => p.id === selection.value);
 
     this.handleLinkProject(project, 'add');
   };
@@ -179,13 +177,11 @@ class TeamProjects extends React.Component {
 
     const access = new Set(this.props.organization.access);
 
-    const otherProjects = unlinkedProjects.map(p => {
-      return {
-        value: p.id,
-        searchKey: p.slug,
-        label: <ProjectListElement>{p.slug}</ProjectListElement>,
-      };
-    });
+    const otherProjects = unlinkedProjects.map(p => ({
+      value: p.id,
+      searchKey: p.slug,
+      label: <ProjectListElement>{p.slug}</ProjectListElement>,
+    }));
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx b/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
index 1b5a2f21d1..3f4972ec06 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
@@ -145,19 +145,17 @@ class ProjectEnvironments extends React.Component {
     return (
       <React.Fragment>
         {this.renderAllEnvironmentsSystemRow()}
-        {envs.map(env => {
-          return (
-            <EnvironmentRow
-              key={env.id}
-              name={env.name}
-              environment={env}
-              isHidden={isHidden}
-              onHide={this.toggleEnv}
-              actionText={buttonText}
-              shouldShowAction
-            />
-          );
-        })}
+        {envs.map(env => (
+          <EnvironmentRow
+            key={env.id}
+            name={env.name}
+            environment={env}
+            isHidden={isHidden}
+            onHide={this.toggleEnv}
+            actionText={buttonText}
+            shouldShowAction
+          />
+        ))}
       </React.Fragment>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
index 90f6604931..ea22306b6f 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
@@ -108,15 +108,13 @@ class GroupTombstones extends AsyncComponent {
 
     return tombstones.length ? (
       <Panel>
-        {tombstones.map(data => {
-          return (
-            <GroupTombstoneRow
-              key={data.id}
-              data={data}
-              onUndiscard={this.handleUndiscard}
-            />
-          );
-        })}
+        {tombstones.map(data => (
+          <GroupTombstoneRow
+            key={data.id}
+            data={data}
+            onUndiscard={this.handleUndiscard}
+          />
+        ))}
       </Panel>
     ) : (
       this.renderEmpty()
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
index 8237d28421..0b818f25a4 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
@@ -63,19 +63,17 @@ class ProjectFiltersChart extends React.Component {
   }
 
   formatData(rawData) {
-    return Object.keys(this.getStatOpts()).map(stat => {
-      return {
-        data: rawData[stat].map(([x, y]) => {
-          if (y > 0) {
-            this.setState({blankStats: false});
-          }
-
-          return {x, y};
-        }),
-        label: this.getStatOpts()[stat],
-        statName: stat,
-      };
-    });
+    return Object.keys(this.getStatOpts()).map(stat => ({
+      data: rawData[stat].map(([x, y]) => {
+        if (y > 0) {
+          this.setState({blankStats: false});
+        }
+
+        return {x, y};
+      }),
+      label: this.getStatOpts()[stat],
+      statName: stat,
+    }));
   }
 
   getFilterStats() {
@@ -88,11 +86,11 @@ class ProjectFiltersChart extends React.Component {
       until: this.state.queryUntil,
       resolution: '1d',
     };
-    const requests = statOptions.map(stat => {
-      return this.props.api.requestPromise(statEndpoint, {
+    const requests = statOptions.map(stat =>
+      this.props.api.requestPromise(statEndpoint, {
         query: Object.assign({stat}, query),
-      });
-    });
+      })
+    );
     Promise.all(requests)
       .then(results => {
         const rawStatsData = {};
@@ -138,8 +136,8 @@ class ProjectFiltersChart extends React.Component {
         <div>
           {intcomma(totalY)} {tn('total event', 'total events', totalY)}
         </div>
-        {formattedData.map((dataPoint, i) => {
-          return (
+        {formattedData.map(
+          (dataPoint, i) =>
             point.y[i] > 0 && (
               <dl className="legend" key={dataPoint.statName}>
                 <dt>
@@ -154,8 +152,7 @@ class ProjectFiltersChart extends React.Component {
                 </dd>
               </dl>
             )
-          );
-        })}
+        )}
       </div>
     );
   };
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx
index 0e16b3b2dc..2d449264a4 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx
@@ -51,13 +51,9 @@ class ProjectKeys extends AsyncView<Props, State> {
 
     addLoadingMessage(t('Revoking key..'));
 
-    this.setState(state => {
-      return {
-        keyList: state.keyList.filter(key => {
-          return key.id !== data.id;
-        }),
-      };
-    });
+    this.setState(state => ({
+      keyList: state.keyList.filter(key => key.id !== data.id),
+    }));
 
     const {orgId, projectId} = this.props.params;
 
@@ -118,11 +114,9 @@ class ProjectKeys extends AsyncView<Props, State> {
         }
       );
 
-      this.setState(state => {
-        return {
-          keyList: [...state.keyList, data],
-        };
-      });
+      this.setState(state => ({
+        keyList: [...state.keyList, data],
+      }));
       addSuccessMessage(t('Created a new key.'));
     } catch (_err) {
       addErrorMessage(t('Unable to create new key. Please try again.'));
@@ -147,23 +141,21 @@ class ProjectKeys extends AsyncView<Props, State> {
 
     return (
       <React.Fragment>
-        {this.state.keyList.map(key => {
-          return (
-            <KeyRow
-              api={this.api}
-              access={access}
-              key={key.id}
-              orgId={orgId}
-              projectId={`${projectId}`}
-              data={key}
-              onToggle={this.handleToggleKey}
-              onRemove={this.handleRemoveKey}
-              routes={routes}
-              location={location}
-              params={params}
-            />
-          );
-        })}
+        {this.state.keyList.map(key => (
+          <KeyRow
+            api={this.api}
+            access={access}
+            key={key.id}
+            orgId={orgId}
+            projectId={`${projectId}`}
+            data={key}
+            onToggle={this.handleToggleKey}
+            onRemove={this.handleRemoveKey}
+            routes={routes}
+            location={location}
+            params={params}
+          />
+        ))}
         <Pagination pageLinks={this.state.keyListPageLinks} />
       </React.Fragment>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
index 37f825cf50..5b43d84f7c 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
@@ -25,10 +25,9 @@ class ProjectOwnershipModal extends AsyncComponent {
         `/issues/${issueId}/tags/url/`,
         {},
         {
-          allowError: error => {
+          allowError: error =>
             // Allow for 404s
-            return error.status === 404;
-          },
+            error.status === 404,
         },
       ],
       ['eventData', `/issues/${issueId}/events/latest/`],
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
index 9c9e48c15f..2b0b411586 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
@@ -82,52 +82,46 @@ export default class SelectOwners extends React.Component {
     }
   }
 
-  renderUserBadge = user => {
-    return <IdBadge avatarSize={24} user={user} hideEmail useLink={false} />;
-  };
-
-  createMentionableUser = user => {
-    return {
-      value: buildUserId(user.id),
-      label: this.renderUserBadge(user),
-      searchKey: getSearchKeyForUser(user),
-      actor: {
-        type: 'user',
-        id: user.id,
-        name: user.name,
-      },
-    };
-  };
-
-  createUnmentionableUser = ({user}) => {
-    return {
-      ...this.createMentionableUser(user),
-      disabled: true,
-      label: (
-        <DisabledLabel>
-          <Tooltip
-            position="left"
-            title={t('%s is not a member of project', user.name || user.email)}
-          >
-            {this.renderUserBadge(user)}
-          </Tooltip>
-        </DisabledLabel>
-      ),
-    };
-  };
-
-  createMentionableTeam = team => {
-    return {
-      value: buildTeamId(team.id),
-      label: <IdBadge team={team} />,
-      searchKey: `#${team.slug}`,
-      actor: {
-        type: 'team',
-        id: team.id,
-        name: team.slug,
-      },
-    };
-  };
+  renderUserBadge = user => (
+    <IdBadge avatarSize={24} user={user} hideEmail useLink={false} />
+  );
+
+  createMentionableUser = user => ({
+    value: buildUserId(user.id),
+    label: this.renderUserBadge(user),
+    searchKey: getSearchKeyForUser(user),
+    actor: {
+      type: 'user',
+      id: user.id,
+      name: user.name,
+    },
+  });
+
+  createUnmentionableUser = ({user}) => ({
+    ...this.createMentionableUser(user),
+    disabled: true,
+    label: (
+      <DisabledLabel>
+        <Tooltip
+          position="left"
+          title={t('%s is not a member of project', user.name || user.email)}
+        >
+          {this.renderUserBadge(user)}
+        </Tooltip>
+      </DisabledLabel>
+    ),
+  });
+
+  createMentionableTeam = team => ({
+    value: buildTeamId(team.id),
+    label: <IdBadge team={team} />,
+    searchKey: `#${team.slug}`,
+    actor: {
+      type: 'team',
+      id: team.id,
+      name: team.slug,
+    },
+  });
 
   createUnmentionableTeam = team => {
     const {organization} = this.props;
@@ -282,34 +276,27 @@ export default class SelectOwners extends React.Component {
         }
       });
     })
-      .then(members => {
+      .then(members =>
         // Be careful here as we actually want the `users` object, otherwise it means user
         // has not registered for sentry yet, but has been invited
-        return members
+        members
           ? members
               .filter(({user}) => user && usersInProjectById.indexOf(user.id) === -1)
               .map(this.createUnmentionableUser)
-          : [];
-      })
-      .then(members => {
-        return {
-          options: [
-            ...usersInProject,
-            ...teamsInProject,
-            ...teamsNotInProject,
-            ...members,
-          ],
-        };
-      });
+          : []
+      )
+      .then(members => ({
+        options: [...usersInProject, ...teamsInProject, ...teamsNotInProject, ...members],
+      }));
   };
 
   render() {
     return (
       <MultiSelectControl
         deprecatedSelectControl
-        filterOptions={(options, filterText) => {
-          return options.filter(({searchKey}) => searchKey.indexOf(filterText) > -1);
-        }}
+        filterOptions={(options, filterText) =>
+          options.filter(({searchKey}) => searchKey.indexOf(filterText) > -1)
+        }
         ref={ref => (this.selectRef = ref)}
         loadOptions={this.handleLoadOptions}
         defaultOptions
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
index 7b220b9fb2..4ca129ad47 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
@@ -216,23 +216,19 @@ class ProjectProcessingIssues extends React.Component {
     return body;
   };
 
-  renderLoading = () => {
-    return (
-      <div className="box">
-        <LoadingIndicator />
-      </div>
-    );
-  };
+  renderLoading = () => (
+    <div className="box">
+      <LoadingIndicator />
+    </div>
+  );
 
-  renderEmpty = () => {
-    return (
-      <Panel>
-        <EmptyStateWarning>
-          <p>{t('Good news! There are no processing issues.')}</p>
-        </EmptyStateWarning>
-      </Panel>
-    );
-  };
+  renderEmpty = () => (
+    <Panel>
+      <EmptyStateWarning>
+        <p>{t('Good news! There are no processing issues.')}</p>
+      </EmptyStateWarning>
+    </Panel>
+  );
 
   getProblemDescription = item => {
     const msg = MESSAGES[item.type];
@@ -382,20 +378,18 @@ class ProjectProcessingIssues extends React.Component {
           </div>
           <div className="list-group">
             {processingRow}
-            {this.state.processingIssues.issues.map((item, idx) => {
-              return (
-                <div key={idx} className="list-group-item">
-                  <div className="row row-flex row-center-vertically">
-                    <div className="col-sm-3">{this.renderProblem(item)}</div>
-                    <div className="col-sm-5">{this.renderDetails(item)}</div>
-                    <div className="col-sm-2">{item.numEvents + ''}</div>
-                    <div className="col-sm-2">
-                      <TimeSince date={item.lastSeen} />
-                    </div>
+            {this.state.processingIssues.issues.map((item, idx) => (
+              <div key={idx} className="list-group-item">
+                <div className="row row-flex row-center-vertically">
+                  <div className="col-sm-3">{this.renderProblem(item)}</div>
+                  <div className="col-sm-5">{this.renderDetails(item)}</div>
+                  <div className="col-sm-2">{item.numEvents + ''}</div>
+                  <div className="col-sm-2">
+                    <TimeSince date={item.lastSeen} />
                   </div>
                 </div>
-              );
-            })}
+              </div>
+            ))}
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
index d445d67c2a..720800e68c 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
@@ -117,17 +117,15 @@ export default class ProjectServiceHooks extends AsyncView {
             Service Hooks are an early adopter preview feature and will change in the
             future.
           </PanelAlert>
-          {this.state.hookList.map(hook => {
-            return (
-              <ServiceHookRow
-                key={hook.id}
-                orgId={orgId}
-                projectId={projectId}
-                hook={hook}
-                onToggleActive={this.onToggleActive.bind(this, hook)}
-              />
-            );
-          })}
+          {this.state.hookList.map(hook => (
+            <ServiceHookRow
+              key={hook.id}
+              orgId={orgId}
+              projectId={projectId}
+              hook={hook}
+              onToggleActive={this.onToggleActive.bind(this, hook)}
+            />
+          ))}
         </PanelBody>
       </React.Fragment>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
index f5c4f180ee..ef0e670fa3 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
@@ -49,21 +49,15 @@ class ProjectTeams extends AsyncView {
   };
 
   handleRemovedTeam = teamSlug => {
-    this.setState(prevState => {
-      return {
-        projectTeams: this.state.projectTeams.filter(team => {
-          return team.slug !== teamSlug;
-        }),
-      };
-    });
+    this.setState(prevState => ({
+      projectTeams: this.state.projectTeams.filter(team => team.slug !== teamSlug),
+    }));
   };
 
   handleAddedTeam = team => {
-    this.setState(prevState => {
-      return {
-        projectTeams: this.state.projectTeams.concat([team]),
-      };
-    });
+    this.setState(prevState => ({
+      projectTeams: this.state.projectTeams.concat([team]),
+    }));
   };
 
   handleAdd = team => {
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
index 6eb486c2ac..b992751385 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
@@ -64,18 +64,16 @@ class RuleNodeList extends React.Component<Props> {
       <React.Fragment>
         {items && !!items.length && (
           <RuleNodes>
-            {items.map((item, idx) => {
-              return (
-                <RuleNode
-                  key={idx}
-                  index={idx}
-                  node={this.getNode(item.id)}
-                  onDelete={onDeleteRow}
-                  data={item}
-                  onPropertyChange={onPropertyChange}
-                />
-              );
-            })}
+            {items.map((item, idx) => (
+              <RuleNode
+                key={idx}
+                index={idx}
+                node={this.getNode(item.id)}
+                onDelete={onDeleteRow}
+                data={item}
+                onPropertyChange={onPropertyChange}
+              />
+            ))}
           </RuleNodes>
         )}
         <StyledSelectControl
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
index 85620f26d7..634c230e83 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
@@ -132,13 +132,11 @@ class RuleRow extends React.Component<Props, State> {
                   </h6>
                   <table className="conditions-list table">
                     <tbody>
-                      {data.conditions.map((condition, i) => {
-                        return (
-                          <tr key={i}>
-                            <td>{condition.name}</td>
-                          </tr>
-                        );
-                      })}
+                      {data.conditions.map((condition, i) => (
+                        <tr key={i}>
+                          <td>{condition.name}</td>
+                        </tr>
+                      ))}
                     </tbody>
                   </table>
                 </Condition>
@@ -156,13 +154,11 @@ class RuleRow extends React.Component<Props, State> {
                   </h6>
                   <table className="actions-list table">
                     <tbody>
-                      {data.actions.map((action, i) => {
-                        return (
-                          <tr key={i}>
-                            <td>{action.name}</td>
-                          </tr>
-                        );
-                      })}
+                      {data.actions.map((action, i) => (
+                        <tr key={i}>
+                          <td>{action.name}</td>
+                        </tr>
+                      ))}
                     </tbody>
                   </table>
                 </Condition>
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
index 5c099550ef..399d20a41e 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
@@ -71,17 +71,17 @@ class RuleRow extends React.Component<Props, State> {
             </MatchTypeHeader>
             {data.conditions.length !== 0 && (
               <Conditions>
-                {data.conditions.map((condition, i) => {
-                  return <div key={i}>{condition.name}</div>;
-                })}
+                {data.conditions.map((condition, i) => (
+                  <div key={i}>{condition.name}</div>
+                ))}
               </Conditions>
             )}
           </div>
 
           <Actions>
-            {data.actions.map((action, i) => {
-              return <div key={i}>{action.name}</div>;
-            })}
+            {data.actions.map((action, i) => (
+              <div key={i}>{action.name}</div>
+            ))}
           </Actions>
         </TriggerAndActions>
       </RuleItem>
@@ -106,26 +106,22 @@ class RuleRow extends React.Component<Props, State> {
 
         <div>
           {data.triggers.length !== 0 &&
-            data.triggers.map((trigger, i) => {
-              return (
-                <TriggerAndActions key={i}>
-                  <Trigger>
-                    <StatusBadge>{trigger.label}</StatusBadge>
-                    <div>
-                      {data.aggregations[0] === 0 ? t('Events') : t('Users')}{' '}
-                      {trigger.thresholdType === 0 ? t('above') : t('below')}{' '}
-                      {trigger.alertThreshold}/{data.timeWindow}min
-                    </div>
-                  </Trigger>
-                  <Actions>
-                    {trigger.actions &&
-                      trigger.actions.map((action, j) => (
-                        <div key={j}>{action.desc}</div>
-                      ))}
-                  </Actions>
-                </TriggerAndActions>
-              );
-            })}
+            data.triggers.map((trigger, i) => (
+              <TriggerAndActions key={i}>
+                <Trigger>
+                  <StatusBadge>{trigger.label}</StatusBadge>
+                  <div>
+                    {data.aggregations[0] === 0 ? t('Events') : t('Users')}{' '}
+                    {trigger.thresholdType === 0 ? t('above') : t('below')}{' '}
+                    {trigger.alertThreshold}/{data.timeWindow}min
+                  </div>
+                </Trigger>
+                <Actions>
+                  {trigger.actions &&
+                    trigger.actions.map((action, j) => <div key={j}>{action.desc}</div>)}
+                </Actions>
+              </TriggerAndActions>
+            ))}
         </div>
       </RuleItem>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index e0701683bb..540ab51965 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -245,9 +245,7 @@ class ProjectGeneralSettings extends AsyncView {
     );
   }
 
-  isProjectAdmin = () => {
-    return new Set(this.context.organization.access).has('project:admin');
-  };
+  isProjectAdmin = () => new Set(this.context.organization.access).has('project:admin');
 
   renderRemoveProject() {
     const project = this.state.data;
diff --git a/src/sentry/static/sentry/app/views/settings/projectPlugins/projectPlugins.jsx b/src/sentry/static/sentry/app/views/settings/projectPlugins/projectPlugins.jsx
index ba94d5821c..55d4baf54e 100644
--- a/src/sentry/static/sentry/app/views/settings/projectPlugins/projectPlugins.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectPlugins/projectPlugins.jsx
@@ -51,8 +51,8 @@ class ProjectPlugins extends Component {
         <PanelBody>
           <PanelAlert type="warning">
             <Access access={['org:integrations']}>
-              {({hasAccess}) => {
-                return hasAccess
+              {({hasAccess}) =>
+                hasAccess
                   ? tct(
                       "Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available. Visit the [link:organization integrations] settings to manage them.",
                       {
@@ -61,8 +61,8 @@ class ProjectPlugins extends Component {
                     )
                   : t(
                       "Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available."
-                    );
-              }}
+                    )
+              }
             </Access>
           </PanelAlert>
 
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 568e6bf75f..41fc27e007 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -78,9 +78,7 @@ jest.mock('react-virtualized', () => {
   const ActualReactVirtualized = require.requireActual('react-virtualized');
   return {
     ...ActualReactVirtualized,
-    AutoSizer: ({children}) => {
-      return children({width: 100, height: 100});
-    },
+    AutoSizer: ({children}) => children({width: 100, height: 100}),
   };
 });
 
@@ -207,8 +205,6 @@ window.TestStubs = {
     },
   }),
 
-  AllAuthenticators: () => {
-    return Object.values(fixtures.Authenticators()).map(x => x());
-  },
+  AllAuthenticators: () => Object.values(fixtures.Authenticators()).map(x => x()),
   ...fixtures,
 };
diff --git a/tests/js/spec/components/activity/note/input.spec.jsx b/tests/js/spec/components/activity/note/input.spec.jsx
index b44e50b2df..c7565a98b6 100644
--- a/tests/js/spec/components/activity/note/input.spec.jsx
+++ b/tests/js/spec/components/activity/note/input.spec.jsx
@@ -68,9 +68,8 @@ describe('NoteInput', function() {
       teams: [],
     };
 
-    const createWrapper = props => {
-      return mountWithTheme(<NoteInput {...defaultProps} {...props} />, routerContext);
-    };
+    const createWrapper = props =>
+      mountWithTheme(<NoteInput {...defaultProps} {...props} />, routerContext);
 
     it('edits existing message', async function() {
       const onUpdate = jest.fn();
diff --git a/tests/js/spec/components/activity/note/inputWithStorage.spec.jsx b/tests/js/spec/components/activity/note/inputWithStorage.spec.jsx
index 2f8a437e14..981cc99b3f 100644
--- a/tests/js/spec/components/activity/note/inputWithStorage.spec.jsx
+++ b/tests/js/spec/components/activity/note/inputWithStorage.spec.jsx
@@ -17,12 +17,8 @@ describe('NoteInputWithStorage', function() {
   };
   const routerContext = TestStubs.routerContext();
 
-  const createWrapper = props => {
-    return mountWithTheme(
-      <NoteInputWithStorage {...defaultProps} {...props} />,
-      routerContext
-    );
-  };
+  const createWrapper = props =>
+    mountWithTheme(<NoteInputWithStorage {...defaultProps} {...props} />, routerContext);
 
   it('loads draft item from local storage when mounting', function() {
     localStorage.getItem.mockImplementation(() => JSON.stringify({item1: 'saved item'}));
diff --git a/tests/js/spec/components/avatar.spec.jsx b/tests/js/spec/components/avatar.spec.jsx
index 1b31f0b76e..f9d0c99e18 100644
--- a/tests/js/spec/components/avatar.spec.jsx
+++ b/tests/js/spec/components/avatar.spec.jsx
@@ -3,13 +3,11 @@ import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import Avatar from 'app/components/avatar';
 
-jest.mock('app/stores/configStore', () => {
-  return {
-    getConfig: () => ({
-      gravatarBaseUrl: 'gravatarBaseUrl',
-    }),
-  };
-});
+jest.mock('app/stores/configStore', () => ({
+  getConfig: () => ({
+    gravatarBaseUrl: 'gravatarBaseUrl',
+  }),
+}));
 
 describe('Avatar', function() {
   const USER = {
diff --git a/tests/js/spec/components/dropdownMenu.spec.jsx b/tests/js/spec/components/dropdownMenu.spec.jsx
index f638f49f46..2799a363c0 100644
--- a/tests/js/spec/components/dropdownMenu.spec.jsx
+++ b/tests/js/spec/components/dropdownMenu.spec.jsx
@@ -11,18 +11,16 @@ describe('DropdownMenu', function() {
   beforeEach(function() {
     wrapper = mount(
       <DropdownMenu>
-        {({getRootProps, getActorProps, getMenuProps, isOpen}) => {
-          return (
-            <span {...getRootProps({})}>
-              <button {...getActorProps({})}>Open Dropdown</button>
-              {isOpen && (
-                <ul {...getMenuProps({})}>
-                  <li>Dropdown Menu Item 1</li>
-                </ul>
-              )}
-            </span>
-          );
-        }}
+        {({getRootProps, getActorProps, getMenuProps, isOpen}) => (
+          <span {...getRootProps({})}>
+            <button {...getActorProps({})}>Open Dropdown</button>
+            {isOpen && (
+              <ul {...getMenuProps({})}>
+                <li>Dropdown Menu Item 1</li>
+              </ul>
+            )}
+          </span>
+        )}
       </DropdownMenu>
     );
   });
@@ -72,18 +70,16 @@ describe('DropdownMenu', function() {
   it('ignores "Escape" key if `closeOnEscape` is false', function() {
     wrapper = mount(
       <DropdownMenu closeOnEscape={false}>
-        {({getRootProps, getActorProps, getMenuProps, isOpen}) => {
-          return (
-            <span {...getRootProps({})}>
-              <button {...getActorProps({})}>Open Dropdown</button>
-              {isOpen && (
-                <ul {...getMenuProps({})}>
-                  <li>Dropdown Menu Item 1</li>
-                </ul>
-              )}
-            </span>
-          );
-        }}
+        {({getRootProps, getActorProps, getMenuProps, isOpen}) => (
+          <span {...getRootProps({})}>
+            <button {...getActorProps({})}>Open Dropdown</button>
+            {isOpen && (
+              <ul {...getMenuProps({})}>
+                <li>Dropdown Menu Item 1</li>
+              </ul>
+            )}
+          </span>
+        )}
       </DropdownMenu>
     );
 
@@ -97,18 +93,16 @@ describe('DropdownMenu', function() {
   it('keeps dropdown open when clicking on anything in menu with `keepMenuOpen` prop', function() {
     wrapper = mount(
       <DropdownMenu keepMenuOpen>
-        {({getRootProps, getActorProps, getMenuProps, isOpen}) => {
-          return (
-            <span {...getRootProps({})}>
-              <button {...getActorProps({})}>Open Dropdown</button>
-              {isOpen && (
-                <ul {...getMenuProps({})}>
-                  <li>Dropdown Menu Item 1</li>
-                </ul>
-              )}
-            </span>
-          );
-        }}
+        {({getRootProps, getActorProps, getMenuProps, isOpen}) => (
+          <span {...getRootProps({})}>
+            <button {...getActorProps({})}>Open Dropdown</button>
+            {isOpen && (
+              <ul {...getMenuProps({})}>
+                <li>Dropdown Menu Item 1</li>
+              </ul>
+            )}
+          </span>
+        )}
       </DropdownMenu>
     );
 
@@ -127,35 +121,33 @@ describe('DropdownMenu', function() {
 
     wrapper = mount(
       <DropdownMenu keepMenuOpen>
-        {({getRootProps, getActorProps, getMenuProps, isOpen}) => {
-          return (
-            <span
-              {...getRootProps({
-                className: 'root',
-                onClick: rootClick,
+        {({getRootProps, getActorProps, getMenuProps, isOpen}) => (
+          <span
+            {...getRootProps({
+              className: 'root',
+              onClick: rootClick,
+            })}
+          >
+            <button
+              {...getActorProps({
+                className: 'actor',
+                onClick: actorClick,
               })}
             >
-              <button
-                {...getActorProps({
-                  className: 'actor',
-                  onClick: actorClick,
+              Open Dropdown
+            </button>
+            {isOpen && (
+              <ul
+                {...getMenuProps({
+                  className: 'menu',
+                  onClick: menuClick,
                 })}
               >
-                Open Dropdown
-              </button>
-              {isOpen && (
-                <ul
-                  {...getMenuProps({
-                    className: 'menu',
-                    onClick: menuClick,
-                  })}
-                >
-                  <li>Dropdown Menu Item 1</li>
-                </ul>
-              )}
-            </span>
-          );
-        }}
+                <li>Dropdown Menu Item 1</li>
+              </ul>
+            )}
+          </span>
+        )}
       </DropdownMenu>
     );
 
@@ -186,30 +178,28 @@ describe('DropdownMenu', function() {
 
     wrapper = mount(
       <DropdownMenu alwaysRenderMenu>
-        {({getRootProps, getActorProps, getMenuProps, isOpen}) => {
-          return (
-            <span
-              {...getRootProps({
-                className: 'root',
+        {({getRootProps, getActorProps, getMenuProps, isOpen}) => (
+          <span
+            {...getRootProps({
+              className: 'root',
+            })}
+          >
+            <button
+              {...getActorProps({
+                className: 'actor',
               })}
             >
-              <button
-                {...getActorProps({
-                  className: 'actor',
-                })}
-              >
-                Open Dropdown
-              </button>
-              <ul
-                {...getMenuProps({
-                  className: 'menu',
-                })}
-              >
-                <li>Dropdown Menu Item 1</li>
-              </ul>
-            </span>
-          );
-        }}
+              Open Dropdown
+            </button>
+            <ul
+              {...getMenuProps({
+                className: 'menu',
+              })}
+            >
+              <li>Dropdown Menu Item 1</li>
+            </ul>
+          </span>
+        )}
       </DropdownMenu>
     );
 
diff --git a/tests/js/spec/components/events/meta/annotated.spec.jsx b/tests/js/spec/components/events/meta/annotated.spec.jsx
index 4b79f200dd..9f3d195fae 100644
--- a/tests/js/spec/components/events/meta/annotated.spec.jsx
+++ b/tests/js/spec/components/events/meta/annotated.spec.jsx
@@ -7,8 +7,8 @@ import {withMeta} from 'app/components/events/meta/metaProxy';
 describe('Annotated', () => {
   const mock = jest.fn(() => null);
 
-  const createEvent = (value, {err, rem, chunks} = {}) => {
-    return withMeta({
+  const createEvent = (value, {err, rem, chunks} = {}) =>
+    withMeta({
       value,
       _meta: {
         value: {
@@ -20,7 +20,6 @@ describe('Annotated', () => {
         },
       },
     });
-  };
 
   beforeEach(function() {
     mock.mockClear();
diff --git a/tests/js/spec/components/group/externalIssueForm.spec.jsx b/tests/js/spec/components/group/externalIssueForm.spec.jsx
index 8b61cf7e6a..2db76f34b5 100644
--- a/tests/js/spec/components/group/externalIssueForm.spec.jsx
+++ b/tests/js/spec/components/group/externalIssueForm.spec.jsx
@@ -5,19 +5,17 @@ import ExternalIssueForm from 'app/components/group/externalIssueForm';
 
 jest.mock('lodash/debounce', () => {
   const debounceMap = new Map();
-  const mockDebounce = (fn, timeout) => {
-    return (...args) => {
-      if (debounceMap.has(fn)) {
-        clearTimeout(debounceMap.get(fn));
-      }
-      debounceMap.set(
-        fn,
-        setTimeout(() => {
-          fn.apply(fn, args);
-          debounceMap.delete(fn);
-        }, timeout)
-      );
-    };
+  const mockDebounce = (fn, timeout) => (...args) => {
+    if (debounceMap.has(fn)) {
+      clearTimeout(debounceMap.get(fn));
+    }
+    debounceMap.set(
+      fn,
+      setTimeout(() => {
+        fn.apply(fn, args);
+        debounceMap.delete(fn);
+      }, timeout)
+    );
   };
   return mockDebounce;
 });
diff --git a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
index 3f6460e225..6041c7c063 100644
--- a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
+++ b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
@@ -212,9 +212,7 @@ describe('SentryAppExternalIssueForm Async Field', () => {
       await tick();
       wrapper.update();
 
-      const optionLabelSelector = label => {
-        return `[aria-label="${label}"]`;
-      };
+      const optionLabelSelector = label => `[aria-label="${label}"]`;
 
       expect(wrapper.find(optionLabelSelector('Issue 1')).exists()).toBe(true);
       expect(wrapper.find(optionLabelSelector('Issue 2')).exists()).toBe(true);
diff --git a/tests/js/spec/components/hook.spec.jsx b/tests/js/spec/components/hook.spec.jsx
index b290a748ba..d39d165a83 100644
--- a/tests/js/spec/components/hook.spec.jsx
+++ b/tests/js/spec/components/hook.spec.jsx
@@ -11,13 +11,11 @@ describe('Hook', function() {
   const routerContext = TestStubs.routerContext();
 
   beforeEach(function() {
-    HookStore.add('footer', ({organization} = {}) => {
-      return (
-        <Wrapper key="initial" organization={organization}>
-          {organization.slug}
-        </Wrapper>
-      );
-    });
+    HookStore.add('footer', ({organization} = {}) => (
+      <Wrapper key="initial" organization={organization}>
+        {organization.slug}
+      </Wrapper>
+    ));
   });
 
   afterEach(function() {
@@ -60,13 +58,11 @@ describe('Hook', function() {
 
     expect(wrapper.find('Wrapper')).toHaveLength(1);
 
-    HookStore.add('footer', ({organization} = {}) => {
-      return (
-        <Wrapper key="new" organization={null}>
-          New Hook
-        </Wrapper>
-      );
-    });
+    HookStore.add('footer', ({organization} = {}) => (
+      <Wrapper key="new" organization={null}>
+        New Hook
+      </Wrapper>
+    ));
 
     wrapper.update();
 
@@ -90,13 +86,11 @@ describe('Hook', function() {
       routerContext
     );
 
-    HookStore.add('footer', ({organization} = {}) => {
-      return (
-        <Wrapper key="new" organization={null}>
-          New Hook
-        </Wrapper>
-      );
-    });
+    HookStore.add('footer', ({organization} = {}) => (
+      <Wrapper key="new" organization={null}>
+        New Hook
+      </Wrapper>
+    ));
 
     wrapper.update();
 
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index beee83687b..0719783bfd 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -23,12 +23,10 @@ const changeQuery = (routerContext, query) => ({
   },
 });
 
-jest.mock('app/utils/localStorage', () => {
-  return {
-    getItem: () => JSON.stringify({projects: [3], environments: ['staging']}),
-    setItem: jest.fn(),
-  };
-});
+jest.mock('app/utils/localStorage', () => ({
+  getItem: () => JSON.stringify({projects: [3], environments: ['staging']}),
+  setItem: jest.fn(),
+}));
 
 describe('GlobalSelectionHeader', function() {
   const {organization, router, routerContext} = initializeOrg({
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
index e759b9604e..8b3f7ed868 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
@@ -10,27 +10,25 @@ import DateRange from 'app/components/organizations/timeRangeSelector/dateRange'
 const start = new Date(1507948680000);
 const end = new Date(1508207880000); //National Pasta Day
 
-const getSelectedRange = wrapper => {
-  return [
-    wrapper
-      .find('.rdrStartEdge')
+const getSelectedRange = wrapper => [
+  wrapper
+    .find('.rdrStartEdge')
+    .closest('DayCell')
+    .find('.rdrDayNumber span')
+    .text(),
+  ...wrapper.find('.rdrInRange').map(el =>
+    el
       .closest('DayCell')
       .find('.rdrDayNumber span')
-      .text(),
-    ...wrapper.find('.rdrInRange').map(el =>
-      el
-        .closest('DayCell')
-        .find('.rdrDayNumber span')
-        .text()
-    ),
-
-    wrapper
-      .find('.rdrEndEdge')
-      .closest('DayCell')
-      .find('.rdrDayNumber span')
-      .text(),
-  ];
-};
+      .text()
+  ),
+
+  wrapper
+    .find('.rdrEndEdge')
+    .closest('DayCell')
+    .find('.rdrDayNumber span')
+    .text(),
+];
 
 describe('DateRange', function() {
   let wrapper;
diff --git a/tests/js/spec/stores/globalSelectionStore.spec.jsx b/tests/js/spec/stores/globalSelectionStore.spec.jsx
index a4b07f4ac2..6dbdf5c6f9 100644
--- a/tests/js/spec/stores/globalSelectionStore.spec.jsx
+++ b/tests/js/spec/stores/globalSelectionStore.spec.jsx
@@ -5,12 +5,10 @@ import {
   updateEnvironments,
 } from 'app/actionCreators/globalSelection';
 
-jest.mock('app/utils/localStorage', () => {
-  return {
-    getItem: () => JSON.stringify({projects: [5], environments: ['staging']}),
-    setItem: jest.fn(),
-  };
-});
+jest.mock('app/utils/localStorage', () => ({
+  getItem: () => JSON.stringify({projects: [5], environments: ['staging']}),
+  setItem: jest.fn(),
+}));
 
 describe('GlobalSelectionStore', function() {
   const organization = TestStubs.Organization({
diff --git a/tests/js/spec/views/events/events.spec.jsx b/tests/js/spec/views/events/events.spec.jsx
index 41d875af6a..d00b27d016 100644
--- a/tests/js/spec/views/events/events.spec.jsx
+++ b/tests/js/spec/views/events/events.spec.jsx
@@ -88,9 +88,7 @@ describe('EventsErrors', function() {
     });
     eventsStatsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
-      body: (_url, opts) => {
-        return TestStubs.EventsStats(opts.query);
-      },
+      body: (_url, opts) => TestStubs.EventsStats(opts.query),
     });
     eventsMetaMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-meta/',
@@ -343,9 +341,7 @@ describe('EventsContainer', function() {
     });
     eventsStatsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
-      body: (_url, opts) => {
-        return TestStubs.EventsStats(opts.query);
-      },
+      body: (_url, opts) => TestStubs.EventsStats(opts.query),
     });
     eventsMetaMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-meta/',
diff --git a/tests/js/spec/views/events/utils/eventsRequest.spec.jsx b/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
index a2612a2e6a..ff578c0668 100644
--- a/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
+++ b/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
@@ -8,11 +8,9 @@ const COUNT_OBJ = {
   count: 123,
 };
 
-jest.mock('app/actionCreators/events', () => {
-  return {
-    doEventsRequest: jest.fn(),
-  };
-});
+jest.mock('app/actionCreators/events', () => ({
+  doEventsRequest: jest.fn(),
+}));
 
 describe('EventsRequest', function() {
   const project = TestStubs.Project();
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index 14ec050d0b..174b66fffb 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -5,22 +5,16 @@ import EventView, {
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable/utils';
 import {CHART_AXIS_OPTIONS} from 'app/views/eventsV2/data';
 
-const generateFields = fields => {
-  return fields.map(field => {
-    return {
-      field,
-    };
-  });
-};
-
-const generateSorts = sorts => {
-  return sorts.map(sortName => {
-    return {
-      field: sortName,
-      kind: 'desc',
-    };
-  });
-};
+const generateFields = fields =>
+  fields.map(field => ({
+    field,
+  }));
+
+const generateSorts = sorts =>
+  sorts.map(sortName => ({
+    field: sortName,
+    kind: 'desc',
+  }));
 
 describe('EventView constructor', function() {
   it('instantiates default values', function() {
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index 2390dd0e81..0f0f2f270d 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -20,11 +20,9 @@ const FIELDS = [
   },
 ];
 
-const generateFields = () => {
-  return {
-    field: FIELDS.map(i => i.field),
-  };
-};
+const generateFields = () => ({
+  field: FIELDS.map(i => i.field),
+});
 
 describe('EventsV2 > Results', function() {
   const eventTitle = 'Oh no something bad';
diff --git a/tests/js/spec/views/eventsV2/tags.spec.jsx b/tests/js/spec/views/eventsV2/tags.spec.jsx
index 540dc4eb7b..b6910f045a 100644
--- a/tests/js/spec/views/eventsV2/tags.spec.jsx
+++ b/tests/js/spec/views/eventsV2/tags.spec.jsx
@@ -97,9 +97,7 @@ describe('Tags', function() {
 
     const environmentFacetMap = wrapper
       .find('TagDistributionMeter')
-      .filterWhere(component => {
-        return component.props().title === 'environment';
-      })
+      .filterWhere(component => component.props().title === 'environment')
       .first();
 
     const clickable = environmentFacetMap.find('Segment').first();
diff --git a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
index dc3c0e160e..5c787d814b 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
@@ -333,8 +333,8 @@ describe('groupEventDetails', () => {
     let wrapper; // eslint-disable-line
     let componentsRequest;
 
-    const mountWithThemeWrapper = () => {
-      return mountWithTheme(
+    const mountWithThemeWrapper = () =>
+      mountWithTheme(
         <GroupEventDetails
           api={new MockApiClient()}
           group={group}
@@ -346,7 +346,6 @@ describe('groupEventDetails', () => {
         />,
         routerContext
       );
-    };
 
     beforeEach(() => {
       const unpublishedIntegration = TestStubs.SentryApp({status: 'unpublished'});
diff --git a/tests/js/spec/views/organizationIntegrations/integrationDetailedView.spec.jsx b/tests/js/spec/views/organizationIntegrations/integrationDetailedView.spec.jsx
index 715ad0059e..5be9150eb3 100644
--- a/tests/js/spec/views/organizationIntegrations/integrationDetailedView.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations/integrationDetailedView.spec.jsx
@@ -5,12 +5,12 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import IntegrationDetailedView from 'app/views/organizationIntegrations/integrationDetailedView';
 
 const mockResponse = mocks => {
-  mocks.forEach(([url, body]) => {
-    return Client.addMockResponse({
+  mocks.forEach(([url, body]) =>
+    Client.addMockResponse({
       url,
       body,
-    });
-  });
+    })
+  );
 };
 
 describe('IntegrationDetailedView', function() {
diff --git a/tests/js/spec/views/organizationIntegrations/integrationListDirectory.spec.jsx b/tests/js/spec/views/organizationIntegrations/integrationListDirectory.spec.jsx
index c99d4e1762..0d10cc7ee6 100644
--- a/tests/js/spec/views/organizationIntegrations/integrationListDirectory.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations/integrationListDirectory.spec.jsx
@@ -5,12 +5,12 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import IntegrationListDirectory from 'app/views/organizationIntegrations/integrationListDirectory';
 
 const mockResponse = mocks => {
-  mocks.forEach(([url, body]) => {
-    return Client.addMockResponse({
+  mocks.forEach(([url, body]) =>
+    Client.addMockResponse({
       url,
       body,
-    });
-  });
+    })
+  );
 };
 
 describe('IntegrationListDirectory', function() {
@@ -319,9 +319,9 @@ describe('IntegrationListDirectory', function() {
     });
 
     it('shows legacy plugin that has a First Party Integration if installed', async function() {
-      const legacyPluginRow = wrapper.find('IntegrationRow').filterWhere(node => {
-        return node.props().displayName === 'PagerDuty (Legacy)';
-      });
+      const legacyPluginRow = wrapper
+        .find('IntegrationRow')
+        .filterWhere(node => node.props().displayName === 'PagerDuty (Legacy)');
 
       expect(legacyPluginRow).toHaveLength(1);
     });
diff --git a/tests/js/spec/views/organizationIntegrations/pluginDetailedView.spec.js b/tests/js/spec/views/organizationIntegrations/pluginDetailedView.spec.js
index 7521da31c3..0df2f18ef5 100644
--- a/tests/js/spec/views/organizationIntegrations/pluginDetailedView.spec.js
+++ b/tests/js/spec/views/organizationIntegrations/pluginDetailedView.spec.js
@@ -6,12 +6,12 @@ import PluginDetailedView from 'app/views/organizationIntegrations/pluginDetaile
 import * as modal from 'app/actionCreators/modal';
 
 const mockResponse = mocks => {
-  mocks.forEach(([url, body]) => {
-    return Client.addMockResponse({
+  mocks.forEach(([url, body]) =>
+    Client.addMockResponse({
       url,
       body,
-    });
-  });
+    })
+  );
 };
 
 describe('PluginDetailedView', function() {
diff --git a/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx b/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
index b3f38e1254..8ca83d5312 100644
--- a/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
@@ -7,13 +7,13 @@ import {initializeOrg} from 'sentry-test/initializeOrg';
 import SentryAppDetailedView from 'app/views/organizationIntegrations/sentryAppDetailedView';
 
 const mockResponse = mocks => {
-  mocks.forEach(([url, body, method = 'GET']) => {
-    return Client.addMockResponse({
+  mocks.forEach(([url, body, method = 'GET']) =>
+    Client.addMockResponse({
       url,
       body,
       method,
-    });
-  });
+    })
+  );
 };
 
 describe('SentryAppDetailedView', function() {
diff --git a/tests/js/spec/views/projectFilters.spec.jsx b/tests/js/spec/views/projectFilters.spec.jsx
index b6071d6a42..558f2c5fb8 100644
--- a/tests/js/spec/views/projectFilters.spec.jsx
+++ b/tests/js/spec/views/projectFilters.spec.jsx
@@ -11,12 +11,11 @@ describe('ProjectFilters', function() {
 
   const getFilterEndpoint = filter => `${PROJECT_URL}filters/${filter}/`;
 
-  const createFilterMock = filter => {
-    return MockApiClient.addMockResponse({
+  const createFilterMock = filter =>
+    MockApiClient.addMockResponse({
       url: getFilterEndpoint(filter),
       method: 'PUT',
     });
-  };
 
   const creator = custom => {
     if (custom) {
@@ -214,8 +213,8 @@ describe('ProjectFilters', function() {
   });
 
   it('has custom inbound filters with flag + can change', function() {
-    wrapper = creator(() => {
-      return mountWithTheme(
+    wrapper = creator(() =>
+      mountWithTheme(
         <ProjectFilters
           params={{projectId: project.slug, orgId: org.slug}}
           location={{}}
@@ -230,8 +229,8 @@ describe('ProjectFilters', function() {
           },
           childContextTypes: TestStubs.routerContext().childContextTypes,
         }
-      );
-    });
+      )
+    );
 
     expect(wrapper.find('TextArea[name="filters:releases"]')).toHaveLength(1);
     expect(wrapper.find('TextArea[name="filters:error_messages"]')).toHaveLength(1);
diff --git a/tests/js/spec/views/projectsDashboard/index.spec.jsx b/tests/js/spec/views/projectsDashboard/index.spec.jsx
index 0960ac5471..86a7f26ed5 100644
--- a/tests/js/spec/views/projectsDashboard/index.spec.jsx
+++ b/tests/js/spec/views/projectsDashboard/index.spec.jsx
@@ -8,19 +8,17 @@ import * as projectsActions from 'app/actionCreators/projects';
 jest.unmock('lodash/debounce');
 jest.mock('lodash/debounce', () => {
   const debounceMap = new Map();
-  const mockDebounce = (fn, timeout) => {
-    return (...args) => {
-      if (debounceMap.has(fn)) {
-        clearTimeout(debounceMap.get(fn));
-      }
-      debounceMap.set(
-        fn,
-        setTimeout(() => {
-          fn.apply(fn, args);
-          debounceMap.delete(fn);
-        }, timeout)
-      );
-    };
+  const mockDebounce = (fn, timeout) => (...args) => {
+    if (debounceMap.has(fn)) {
+      clearTimeout(debounceMap.get(fn));
+    }
+    debounceMap.set(
+      fn,
+      setTimeout(() => {
+        fn.apply(fn, args);
+        debounceMap.delete(fn);
+      }, timeout)
+    );
   };
   return mockDebounce;
 });
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/permissionSelection.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/permissionSelection.spec.jsx
index 43d279e0b1..0b1ee43cf6 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/permissionSelection.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/permissionSelection.spec.jsx
@@ -79,9 +79,7 @@ describe('PermissionSelection', () => {
   });
 
   it('stores the permissions the User has selected', () => {
-    const getStateValue = resource => {
-      return wrapper.instance().state.permissions[resource];
-    };
+    const getStateValue = resource => wrapper.instance().state.permissions[resource];
 
     selectByValue(wrapper, 'write', {name: 'Project--permission'});
     selectByValue(wrapper, 'read', {name: 'Team--permission'});
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
index a2d26d236c..d5bce4e520 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
@@ -367,12 +367,12 @@ describe('OrganizationMemberDetail', function() {
     });
 
     it('can reset member 2FA', function() {
-      const deleteMocks = has2fa.user.authenticators.map(auth => {
-        return MockApiClient.addMockResponse({
+      const deleteMocks = has2fa.user.authenticators.map(auth =>
+        MockApiClient.addMockResponse({
           url: `/users/${has2fa.user.id}/authenticators/${auth.id}/`,
           method: 'DELETE',
-        });
-      });
+        })
+      );
 
       wrapper = mountWithTheme(
         <OrganizationMemberDetail params={{memberId: has2fa.id}} />,
