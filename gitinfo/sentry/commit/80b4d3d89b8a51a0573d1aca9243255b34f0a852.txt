commit 80b4d3d89b8a51a0573d1aca9243255b34f0a852
Author: Jay Soffian <jaysoffian@gmail.com>
Date:   Thu Apr 23 14:49:00 2015 -0400

    redis buffer: use atomic set + expire
    
    Using setnx followed by expire will leave a stale lock if the set
    succeeds but the expire fails. Switch to atomic set, specifying NX
    and EX as options. This form of the set command has been available
    since Redis 2.6.12.

diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index e5b4a1db06..892c7854af 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -89,9 +89,8 @@ class RedisBuffer(Buffer):
     def process_pending(self):
         lock_key = self._make_lock_key(self.pending_key)
         # prevent a stampede due to celerybeat + periodic task
-        if not self.conn.setnx(lock_key, '1'):
+        if not self.conn.set(lock_key, '1', nx=True, ex=60):
             return
-        self.conn.expire(lock_key, 60)
 
         try:
             for conn in self.conn.hosts.itervalues():
@@ -112,9 +111,8 @@ class RedisBuffer(Buffer):
         lock_key = self._make_lock_key(key)
         # prevent a stampede due to the way we use celery etas + duplicate
         # tasks
-        if not self.conn.setnx(lock_key, '1'):
+        if not self.conn.set(lock_key, '1', nx=True, ex=10):
             return
-        self.conn.expire(lock_key, 10)
 
         with self.conn.map() as conn:
             values = conn.hgetall(key)
