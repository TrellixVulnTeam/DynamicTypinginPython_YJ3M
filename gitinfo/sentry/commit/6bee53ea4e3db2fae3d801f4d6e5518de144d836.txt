commit 6bee53ea4e3db2fae3d801f4d6e5518de144d836
Author: Ben Vinegar <ben@benv.ca>
Date:   Tue Sep 27 20:20:33 2016 -0700

    Fix letter avatar tests

diff --git a/src/sentry/static/sentry/app/components/userLetterAvatar.jsx b/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
index f21edddeee..169e1098f8 100644
--- a/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
@@ -8,8 +8,7 @@ const UserLetterAvatar = React.createClass({
 
   getIdentifier() {
     let user = this.props.user;
-    let identifier = user.email || user.username || user.id || user.ip_address;
-    return identifier;
+    return user.email || user.username || user.id || user.ip_address;
   },
 
   getDisplayName() {
diff --git a/tests/js/spec/components/lettarAvatar.spec.jsx b/tests/js/spec/components/lettarAvatar.spec.jsx
deleted file mode 100644
index 198561a945..0000000000
--- a/tests/js/spec/components/lettarAvatar.spec.jsx
+++ /dev/null
@@ -1,91 +0,0 @@
-import React from 'react';
-import TestUtils from 'react-addons-test-utils';
-import LetterAvatar from 'app/components/letterAvatar';
-
-describe('LetterAvatar', function() {
-  const USER_1 = {
-    id: 1,
-    name: 'Jane Doe',
-    email: 'janedoe@example.com'
-  };
-  const USER_2 = {
-    id: 2,
-    email: 'johnsmith@example.com'
-  };
-  const USER_3 = {
-    id: 2,
-    username: 'foo@example.com'
-  };
-  const USER_4 = {
-    id: 2
-  };
-  const USER_5 = {
-    ip_address: '127.0.0.1'
-  };
-  const USER_6 = {
-    id: 1,
-    name: 'Jane Doe ',
-    email: 'janedoe@example.com'
-  };
-  const USER_7 = {
-    id: 1,
-    name: ' ',
-    email: 'janedoe@example.com'
-  };
-
-  describe('getInitials()', function() {
-    it('should get initials based on name', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_1}/>);
-      expect(this.letterAvatar.getInitials()).to.eql('JD');
-    });
-
-    it('should get initials based on email', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_2}/>);
-      expect(this.letterAvatar.getInitials()).to.eql('J');
-    });
-
-    it('should get initials based on username', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_3}/>);
-      expect(this.letterAvatar.getInitials()).to.eql('F');
-    });
-
-    it('should show question mark if user has no display name', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_4}/>);
-      expect(this.letterAvatar.getInitials()).to.eql('?');
-    });
-
-    it('should show question mark even if display name is a space', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_7}/>);
-      expect(this.letterAvatar.getInitials()).to.eql('?');
-    });
-
-    it('should get initials based on name even if there are trailing spaces', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_6}/>);
-      expect(this.letterAvatar.getInitials()).to.eql('JD');
-    });
-  });
-
-
-  describe('getColor()', function() {
-    it('should return a color based on email', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_1}/>);
-      expect(this.letterAvatar.getColor()).to.eql('#E56AA6');
-    });
-
-    it('should return a color based on username', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_3}/>);
-      expect(this.letterAvatar.getColor()).to.eql('#1D87CE');
-    });
-
-    it('should return a color based on id', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_4}/>);
-      expect(this.letterAvatar.getColor()).to.eql('#6FBA57');
-    });
-
-    it('should return a color based on ip address', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar user={USER_5}/>);
-      expect(this.letterAvatar.getColor()).to.eql('#E35141');
-    });
-  });
-
-});
diff --git a/tests/js/spec/components/letterAvatar.spec.jsx b/tests/js/spec/components/letterAvatar.spec.jsx
new file mode 100644
index 0000000000..45d0fb58b0
--- /dev/null
+++ b/tests/js/spec/components/letterAvatar.spec.jsx
@@ -0,0 +1,90 @@
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
+import LetterAvatar from 'app/components/letterAvatar';
+
+describe('LetterAvatar', function() {
+  const USER_1 = {
+    identifier: 'janedoe@example.com',
+    displayName: 'Jane Doe',
+  };
+  const USER_2 = {
+    identifier: 'johnsmith@example.com',
+    displayName: 'johnsmith@example.com'
+  };
+  const USER_3 = {
+    identifier: 'foo@example.com',
+    displayName: 'foo@example.com'
+  };
+  const USER_4 = {
+    identifier: 2,
+    displayName: ''
+  };
+  const USER_5 = {
+    identifier: '127.0.0.1',
+    displayName: ''
+  };
+  const USER_6 = {
+    identifier: 'janedoe@example.com',
+    displayName: 'Jane Doe ',
+  };
+  const USER_7 = {
+    identifier: 'janedoe@example.com',
+    displayName: ' '
+  };
+
+  describe('getInitials()', function() {
+    it('should get initials based on name', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1}/>);
+      expect(letterAvatar.getInitials()).to.eql('JD');
+    });
+
+    it('should get initials based on email', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_2}/>);
+      expect(letterAvatar.getInitials()).to.eql('J');
+    });
+
+    it('should get initials based on username', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3}/>);
+      expect(letterAvatar.getInitials()).to.eql('F');
+    });
+
+    it('should show question mark if user has no display name', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4}/>);
+      expect(letterAvatar.getInitials()).to.eql('?');
+    });
+
+    it('should show question mark even if display name is a space', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_7}/>);
+      expect(letterAvatar.getInitials()).to.eql('?');
+    });
+
+    it('should get initials based on name even if there are trailing spaces', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_6}/>);
+      expect(letterAvatar.getInitials()).to.eql('JD');
+    });
+  });
+
+
+  describe('getColor()', function() {
+    it('should return a color based on email', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1}/>);
+      expect(letterAvatar.getColor()).to.eql('#f868bc');
+    });
+
+    it('should return a color based on username', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3}/>);
+      expect(letterAvatar.getColor()).to.eql('#315cac');
+    });
+
+    it('should return a color based on id', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4}/>);
+      expect(letterAvatar.getColor()).to.eql('#57be8c');
+    });
+
+    it('should return a color based on ip address', function() {
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_5}/>);
+      expect(letterAvatar.getColor()).to.eql('#ec5e44');
+    });
+  });
+
+});
diff --git a/tests/js/spec/components/userLetterAvatar.spec.jsx b/tests/js/spec/components/userLetterAvatar.spec.jsx
new file mode 100644
index 0000000000..f92d4bbb23
--- /dev/null
+++ b/tests/js/spec/components/userLetterAvatar.spec.jsx
@@ -0,0 +1,71 @@
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
+import UserLetterAvatar from 'app/components/userLetterAvatar';
+
+describe('LetterAvatar', function() {
+  const USER_1 = {
+    id: 1,
+    name: 'Jane Doe',
+    email: 'janedoe@example.com'
+  };
+  const USER_2 = {
+    id: 2,
+    email: 'johnsmith@example.com'
+  };
+  const USER_3 = {
+    id: 2,
+    username: 'foo@example.com'
+  };
+  const USER_4 = {
+    id: 2
+  };
+  const USER_5 = {
+    ip_address: '127.0.0.1'
+  };
+
+  describe('getDisplayName()', function() {
+    it('should set displayName based on name', function() {
+      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_1}/>);
+      expect(this.letterAvatar.getDisplayName()).to.eql('Jane Doe');
+    });
+
+    it('should set displayName based on email', function() {
+      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_2}/>);
+      expect(this.letterAvatar.getDisplayName()).to.eql('johnsmith@example.com');
+    });
+
+    it('should set displayName based on username', function() {
+      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_3}/>);
+      expect(this.letterAvatar.getDisplayName()).to.eql('foo@example.com');
+    });
+
+    it('should set displayName to empty string if nothing useful', function() {
+      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_4}/>);
+      expect(this.letterAvatar.getDisplayName()).to.eql('');
+    });
+  });
+
+
+  describe('getIdentifier()', function() {
+    it('should use email', function() {
+      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_1}/>);
+      expect(this.letterAvatar.getIdentifier()).to.eql('janedoe@example.com');
+    });
+
+    it('should use username', function() {
+      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_3}/>);
+      expect(this.letterAvatar.getIdentifier()).to.eql('foo@example.com');
+    });
+
+    it('should use id', function() {
+      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_4}/>);
+      expect(this.letterAvatar.getIdentifier()).to.eql(2);
+    });
+
+    it('should use ip address', function() {
+      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_5}/>);
+      expect(this.letterAvatar.getIdentifier()).to.eql('127.0.0.1');
+    });
+  });
+
+});
