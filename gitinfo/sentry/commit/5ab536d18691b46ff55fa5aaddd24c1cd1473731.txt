commit 5ab536d18691b46ff55fa5aaddd24c1cd1473731
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 13 17:52:13 2015 -0700

    Various fixes for sort by dropdown / remove Sticky

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index c0e04e5c06..7416be6cd2 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -10,7 +10,6 @@ var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
 var Pagination = require("../components/pagination");
 var RouteMixin = require("../mixins/routeMixin");
-var Sticky = require('react-sticky');
 var StreamGroup = require('./stream/group');
 var StreamActions = require('./stream/actions');
 var StreamFilters = require('./stream/filters');
@@ -163,18 +162,16 @@ var Stream = React.createClass({
     return (
       <div>
         <StreamFilters />
-        <Sticky stickyClass="sticky">
-          <div className="group-header">
-            <StreamActions
-              orgId={params.orgId}
-              projectId={params.projectId}
-              onSelectStatsPeriod={this.handleSelectStatsPeriod}
-              onRealtimeChange={this.handleRealtimeChange}
-              realtimeActive={this.state.realtimeActive}
-              statsPeriod={this.state.statsPeriod}
-              groupList={this.state.groupList} />
-          </div>
-        </Sticky>
+        <div className="group-header">
+          <StreamActions
+            orgId={params.orgId}
+            projectId={params.projectId}
+            onSelectStatsPeriod={this.handleSelectStatsPeriod}
+            onRealtimeChange={this.handleRealtimeChange}
+            realtimeActive={this.state.realtimeActive}
+            statsPeriod={this.state.statsPeriod}
+            groupList={this.state.groupList} />
+        </div>
         {this.state.loading ?
           <LoadingIndicator />
         : (this.state.error ?
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 410dafe5bc..707eafd8f6 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -141,54 +141,59 @@ var SortOptions = React.createClass({
     router: React.PropTypes.func
   },
 
-  getMenuItem(key, label, isActive) {
+  mixins: [
+    PureRenderMixin
+  ],
+
+  getInitialState() {
     var router = this.context.router;
     var queryParams = router.getCurrentQuery();
+
+    return {
+      sortKey: queryParams.sort || 'date'
+    };
+  },
+
+  getMenuItem(key) {
+    var router = this.context.router;
+    var queryParams = $.extend({}, router.getCurrentQuery());
     var params = router.getCurrentParams();
 
     queryParams.sort = key;
 
     return (
-      <MenuItem to="stream" params={params} query={queryParams} isActive={isActive}>
-        {label}
+      <MenuItem to="stream" params={params} query={queryParams}
+                isActive={this.state.sortKey === key}>
+        {this.getSortLabel(key)}
       </MenuItem>
     );
   },
 
   componentWillReceiveProps(nextProps) {
     var router = this.context.router;
-    this._activeRoutePath = router.getCurrentPath();
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    var router = this.context.router;
-    return this._activeRoutePath != router.getCurrentPath();
+    this.setState({
+      sortKey: router.getCurrentQuery().sort || 'date'
+    });
   },
 
-  render() {
-    var router = this.context.router;
-    var queryParams = router.getCurrentQuery();
-    var sortBy = queryParams.sort || 'date';
-    var sortLabel;
-
-    switch (sortBy) {
+  getSortLabel(key) {
+    switch (key) {
       case 'new':
-        sortLabel = 'First Seen';
-        break;
+        return 'First Seen';
       case 'priority':
-        sortLabel = 'Priority';
-        break;
+        return 'Priority';
       case 'freq':
-        sortLabel = 'Frequency';
-        break;
-      default:
-        sortLabel = 'Last Seen';
-        sortBy = 'date';
+        return 'Frequency';
+      case 'date':
+        return 'Last Seen';
     }
+  },
 
+  render() {
     var dropdownTitle = (
       <span>
-        <span className="hidden-sm hidden-xs">Sort by:</span> {sortLabel}
+        <span className="hidden-sm hidden-xs">Sort by:</span>
+        &nbsp; {this.getSortLabel(this.state.sortKey)}
       </span>
     );
 
@@ -198,10 +203,10 @@ var SortOptions = React.createClass({
           className="btn btn-sm"
           btnGroup={true}
           title={dropdownTitle}>
-        {this.getMenuItem('priority', 'Priority', sortBy === 'priority')}
-        {this.getMenuItem('date', 'Last Seen', sortBy === 'date')}
-        {this.getMenuItem('new', 'First Seen', sortBy === 'new')}
-        {this.getMenuItem('freq', 'Occurances', sortBy === 'freq')}
+        {this.getMenuItem('priority')}
+        {this.getMenuItem('date')}
+        {this.getMenuItem('new')}
+        {this.getMenuItem('freq')}
       </DropdownLink>
     );
   }
