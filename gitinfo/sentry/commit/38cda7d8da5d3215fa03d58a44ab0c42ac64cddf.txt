commit 38cda7d8da5d3215fa03d58a44ab0c42ac64cddf
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Dec 19 17:25:10 2018 -0800

    feat(user-feedback): Implement basic version of org user feedback (#11110)
    
    Implement basic version of org user feedback page behind sentry10
    feature flag. This doesn't currently include the org header. Only
    currently supports filtering by status, not environments, projects
    or datetime.

diff --git a/src/sentry/static/sentry/app/components/events/userFeedback.jsx b/src/sentry/static/sentry/app/components/events/userFeedback.jsx
index 51cca14eff..00239b111b 100644
--- a/src/sentry/static/sentry/app/components/events/userFeedback.jsx
+++ b/src/sentry/static/sentry/app/components/events/userFeedback.jsx
@@ -5,6 +5,8 @@ import TimeSince from 'app/components/timeSince';
 import utils from 'app/utils';
 import Link from 'app/components/link';
 
+import {t} from 'app/locale';
+
 class EventUserFeedback extends React.Component {
   static propTypes = {
     report: PropTypes.object.isRequired,
@@ -35,7 +37,7 @@ class EventUserFeedback extends React.Component {
                           to={`/${orgId}/${projectId}/issues/${issueId}/events/${report
                             .event.id}`}
                         >
-                          View event
+                          {t('View event')}
                         </Link>
                       </small>
                     )}
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 3270d00625..3d91ec145e 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -225,6 +225,13 @@ class Sidebar extends React.Component {
                     label={t('Releases')}
                     to={`/organizations/${organization.slug}/releases/`}
                   />
+                  <SidebarItem
+                    {...sidebarItemProps}
+                    onClick={this.hidePanel}
+                    icon={<InlineSvg src="icon-support" />}
+                    label={t('User Feedback')}
+                    to={`/organizations/${organization.slug}/user-feedback/`}
+                  />
                 </Feature>
                 <Feature features={['global-views']}>
                   <SidebarItem
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 782a734f1f..9a64af4b38 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -782,6 +782,13 @@ function routes() {
             />
           </Route>
 
+          <Route
+            path="/organizations/:orgId/user-feedback/"
+            componentPromise={() =>
+              import(/*webpackChunkName: "OrganizationUserFeedback"*/ './views/userFeedback/organizationUserFeedback')}
+            component={errorHandler(LazyLoad)}
+          />
+
           <Route
             path="/organizations/:orgId/releases/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
index 9ca826a2ac..f93c44fb56 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
@@ -1,17 +1,147 @@
 import React from 'react';
+// import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import {isEqual} from 'lodash';
+
+import {t} from 'app/locale';
+import withOrganization from 'app/utils/withOrganization';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
+import SentryTypes from 'app/sentryTypes';
+import Feature from 'app/components/acl/feature';
+import Alert from 'app/components/alert';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import CompactIssue from 'app/components/compactIssue';
+import EventUserFeedback from 'app/components/events/userFeedback';
+import space from 'app/styles/space';
 
 import UserFeedbackContainer from './container';
+import {fetchUserFeedback, getQuery} from './utils';
+
+class OrganizationUserFeedback extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    // selection: PropTypes.object,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {reportList: [], loading: true, error: false, pageLinks: ''};
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps) {
+    if (
+      !isEqual(getQuery(prevProps.location.search), getQuery(this.props.location.search))
+    ) {
+      this.fetchData();
+    }
+  }
+
+  fetchData = () => {
+    this.setState({loading: true, error: false});
+
+    const query = getQuery(this.props.location.search);
+
+    fetchUserFeedback(this.props.organization, query)
+      .then(([reportList, _, jqXHR]) => {
+        this.setState({
+          reportList,
+          loading: false,
+          pageLinks: jqXHR.getResponseHeader('Link'),
+        });
+      })
+      .catch(() => this.setState({error: true, loading: false}));
+  };
+
+  renderNoAccess() {
+    return <Alert type="warning">{t("You don't have access to this feature")}</Alert>;
+  }
+
+  renderEmpty() {
+    return (
+      <EmptyStateWarning>
+        <p>{t('Sorry, no results match your serch query.')}</p>
+      </EmptyStateWarning>
+    );
+  }
 
-export default class OrganizationUserFeedback extends React.Component {
   renderList() {
-    // TODO: implement this
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    }
+
+    if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
+
+    if (this.state.reportList.length === 0) {
+      return this.renderEmpty();
+    }
+
+    return this.renderResults();
+  }
+
+  renderResults() {
+    const {orgId} = this.props.params;
+
+    const children = this.state.reportList.map(item => {
+      const issue = item.issue;
+      const projectId = issue.project.slug;
+      return (
+        <CompactIssue
+          key={item.id}
+          id={issue.id}
+          data={issue}
+          orgId={orgId}
+          projectId={projectId}
+        >
+          <EventUserFeedback
+            report={item}
+            orgId={orgId}
+            projectId={projectId}
+            issueId={issue.id}
+          />
+        </CompactIssue>
+      );
+    });
+
+    return children;
   }
 
   render() {
+    const {status} = getQuery(this.props.location.search);
     return (
-      <UserFeedbackContainer location={this.props.location} pageLinks={''} status={''}>
-        {this.renderList()}
-      </UserFeedbackContainer>
+      <Content>
+        <Feature
+          features={['organizations:sentry10']}
+          organization={this.props.organization}
+          renderDisabled={this.renderNoAccess}
+        >
+          <UserFeedbackContainer
+            location={this.props.location}
+            pageLinks={this.state.pageLinks}
+            status={status}
+          >
+            {this.renderList()}
+          </UserFeedbackContainer>
+        </Feature>
+      </Content>
     );
   }
 }
+
+const Content = styled('div')`
+  display: flex;
+  flex-direction: column;
+  flex: 1;
+  overflow: hidden;
+  padding: ${space(2)} ${space(4)} ${space(3)};
+  margin-bottom: -20px; /* <footer> has margin-top: 20px; */
+`;
+
+export default withOrganization(withGlobalSelection(OrganizationUserFeedback));
diff --git a/src/sentry/static/sentry/app/views/userFeedback/utils.jsx b/src/sentry/static/sentry/app/views/userFeedback/utils.jsx
new file mode 100644
index 0000000000..59d79c1dd5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/userFeedback/utils.jsx
@@ -0,0 +1,49 @@
+import {Client} from 'app/api';
+import qs from 'query-string';
+
+const DEFAULT_STATUS = 'unresolved';
+
+/**
+ * Fetch user feedback for organization filtered by the query provided.
+ * Either statsPeriod or start, end and utc values should be provided.
+ *
+ * @param {Object} organization
+ * @param {Object} query
+ * @param {Number[]} query.projects
+ * @param {String[]} query.environments
+ * @param {String} [query.statsPeriod]
+ * @param {String} [query.start]
+ * @param {String} [query.end]
+ * @param {Boolean} [query.utc]
+ * @returns {Promise<Array>}
+ */
+export function fetchUserFeedback(organization, query = {}) {
+  const api = new Client();
+
+  return api.requestPromise(`/organizations/${organization.slug}/user-feedback/`, {
+    includeAllArgs: true,
+    query: {
+      per_page: 50,
+      ...query,
+    },
+  });
+}
+
+/**
+ * Get query for API given the current location.search string
+ * We are using qs.parse since location.query re-uses the same object making it
+ * incorrectly seem like the query string has not changed
+ *
+ * @param {String} search
+ * @returns {Object}
+ */
+export function getQuery(search) {
+  const query = qs.parse(search);
+
+  const status = typeof query.status !== 'undefined' ? query.status : DEFAULT_STATUS;
+  const cursor = query.cursor;
+
+  const queryParams = {status, cursor};
+
+  return queryParams;
+}
