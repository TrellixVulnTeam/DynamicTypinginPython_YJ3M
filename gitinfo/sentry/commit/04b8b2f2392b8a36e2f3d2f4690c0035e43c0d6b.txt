commit 04b8b2f2392b8a36e2f3d2f4690c0035e43c0d6b
Author: ted kaemming <ted@kaemming.com>
Date:   Thu Sep 14 14:41:25 2017 -0700

    perf(similarity): add upper limit on candidate query (#6131)
    
    This prevents bad queries from being worse and blocking the request queue.
    
    This, incidentally, should improve performance — `SMEMBERS` is *typically* `O(N)`, but when called from a Redis script, it's implicitly lexicographically sorted to preserve a deterministic order in the script[1], which likely ends up being `O(N log N)` instead. Using `SRANDMEMBER` should remain `O(N)` where `N` is the number of items requested, but it causes the script to be marked as read-only after `SRANDMEMBER` is called if you're not using script effects replication (we try to enable it at the beginning of the script, but don't require it.) This should be OK for us — for now at least — since we only call `SRANDMEMBER` as part of fetching candidates on read-only commands anyway.
    
    1: https://redis.io/commands/eval#scripts-as-pure-functions

diff --git a/src/sentry/scripts/similarity/index.lua b/src/sentry/scripts/similarity/index.lua
index 0ec1330373..c4301096cf 100644
--- a/src/sentry/scripts/similarity/index.lua
+++ b/src/sentry/scripts/similarity/index.lua
@@ -241,23 +241,34 @@ end
 
 local TimeSeriesSet = {}
 
-function TimeSeriesSet:new(interval, retention, timestamp, key_function)
+function TimeSeriesSet:new(interval, retention, timestamp, key_function, limit)
     return setmetatable({
         interval = interval,
         retention = retention,
         timestamp = timestamp,
         key_function = key_function,
+        limit = limit,
     }, {__index = self})
 end
 
 function TimeSeriesSet:members()
     local results = {}
     local current = math.floor(self.timestamp / self.interval)
+    local n = 0
     for index = current - self.retention, current do
-        local members = redis.call('SMEMBERS', self.key_function(index))
-        for i = 1, #members do
-            local k = members[i]
-            results[k] = (results[k] or 0) + 1
+        local sample = redis.call('SRANDMEMBER', self.key_function(index), self.limit)
+        for i = 1, #sample do
+            local member = sample[i]
+            local count = results[member]
+            if count ~= nil then
+                results[member] = count + 1
+            else
+                n = n + 1
+                results[member] = 1
+                if n >= self.limit then
+                    return results
+                end
+            end
         end
     end
     return results
@@ -405,7 +416,8 @@ local function get_bucket_membership_set(configuration, index, band, bucket)
                 get_key_prefix(configuration, index),
                 i
             ) .. pack_frequency_coordinate(band, bucket)
-        end
+        end,
+        configuration.candidate_set_limit
     )
 end
 
@@ -828,6 +840,7 @@ local cursor, command, configuration = multiple_argument_parser(
         {"bands", argument_parser(validate_integer)},
         {"interval", argument_parser(validate_integer)},
         {"retention", argument_parser(validate_integer)},  -- how many previous intervals to store (does not include current interval)
+        {"candidate_set_limit", argument_parser(validate_integer)},
         {"scope", argument_parser(validate_value)},
     })
 )(1, ARGV)
diff --git a/src/sentry/similarity/__init__.py b/src/sentry/similarity/__init__.py
index c83a50a289..ec939da17b 100644
--- a/src/sentry/similarity/__init__.py
+++ b/src/sentry/similarity/__init__.py
@@ -83,6 +83,7 @@ def _make_index_backend(cluster=None):
         8,
         60 * 60 * 24 * 30,
         3,
+        5000,
     )
 
 
diff --git a/src/sentry/similarity/backends/redis.py b/src/sentry/similarity/backends/redis.py
index 9d58d96b02..46f5eb081a 100644
--- a/src/sentry/similarity/backends/redis.py
+++ b/src/sentry/similarity/backends/redis.py
@@ -21,13 +21,15 @@ def flatten(value):
 
 
 class RedisMinHashIndexBackend(AbstractIndexBackend):
-    def __init__(self, cluster, namespace, signature_builder, bands, interval, retention):
+    def __init__(self, cluster, namespace, signature_builder,
+                 bands, interval, retention, candidate_set_limit):
         self.cluster = cluster
         self.namespace = namespace
         self.signature_builder = signature_builder
         self.bands = bands
         self.interval = interval
         self.retention = retention
+        self.candidate_set_limit = candidate_set_limit
 
     def _build_signature_arguments(self, features):
         if not features:
@@ -91,6 +93,7 @@ class RedisMinHashIndexBackend(AbstractIndexBackend):
             self.bands,
             self.interval,
             self.retention,
+            self.candidate_set_limit,
             scope,
             limit if limit is not None else -1,
         ]
@@ -112,6 +115,7 @@ class RedisMinHashIndexBackend(AbstractIndexBackend):
             self.bands,
             self.interval,
             self.retention,
+            self.candidate_set_limit,
             scope,
             limit if limit is not None else -1,
             key,
@@ -136,6 +140,7 @@ class RedisMinHashIndexBackend(AbstractIndexBackend):
             self.bands,
             self.interval,
             self.retention,
+            self.candidate_set_limit,
             scope,
             key,
         ]
@@ -157,6 +162,7 @@ class RedisMinHashIndexBackend(AbstractIndexBackend):
             self.bands,
             self.interval,
             self.retention,
+            self.candidate_set_limit,
             scope,
             destination,
         ]
@@ -177,6 +183,7 @@ class RedisMinHashIndexBackend(AbstractIndexBackend):
             self.bands,
             self.interval,
             self.retention,
+            self.candidate_set_limit,
             scope,
         ]
 
@@ -196,6 +203,7 @@ class RedisMinHashIndexBackend(AbstractIndexBackend):
             self.bands,
             self.interval,
             self.retention,
+            self.candidate_set_limit,
             scope,
         ]
 
@@ -232,6 +240,7 @@ class RedisMinHashIndexBackend(AbstractIndexBackend):
             self.bands,
             self.interval,
             self.retention,
+            self.candidate_set_limit,
             scope,
         ]
 
@@ -251,6 +260,7 @@ class RedisMinHashIndexBackend(AbstractIndexBackend):
             self.bands,
             self.interval,
             self.retention,
+            self.candidate_set_limit,
             scope,
         ]
 
diff --git a/tests/sentry/similarity/test_index.py b/tests/sentry/similarity/test_index.py
index 5054260d36..be141d77a4 100644
--- a/tests/sentry/similarity/test_index.py
+++ b/tests/sentry/similarity/test_index.py
@@ -23,6 +23,7 @@ class RedisMinHashIndexBackendTestCase(TestCase):
             16,
             60 * 60,
             12,
+            10,
         )
 
     def test_basic(self):
@@ -102,6 +103,7 @@ class RedisMinHashIndexBackendTestCase(TestCase):
             self.index.bands,
             self.index.interval,
             self.index.retention,
+            self.index.candidate_set_limit,
         ).compare('example', '1', [('index', 0)]) == []
 
     def test_multiple_index(self):
