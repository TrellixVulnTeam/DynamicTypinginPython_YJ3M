commit 0e56e41762738e28f33cdebf3f21eceff0587df0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Oct 22 10:54:51 2019 -0700

    ref(ts): Refactor `app/views/settings/components/forms/form` (#15162)

diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
similarity index 72%
rename from src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
index 376b8af2b6..04f61f143d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
@@ -3,12 +3,58 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {APIRequestMethod} from 'app/api';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
-import FormModel from 'app/views/settings/components/forms/model';
+import FormModel, {
+  FormOptions,
+  FieldValue,
+} from 'app/views/settings/components/forms/model';
 import Panel from 'app/components/panels/panel';
 
-export default class Form extends React.Component {
+type Data = {};
+
+type Props = {
+  apiMethod: APIRequestMethod;
+  apiEndpoint: string;
+  children: React.ReactNode;
+
+  className?: string;
+  cancelLabel?: string;
+  submitDisabled?: boolean;
+  submitLabel?: string;
+  submitPriority?: Button['props']['priority'];
+  footerClass?: string;
+  footerStyle?: React.CSSProperties;
+  extraButton?: React.ReactNode;
+  initialData?: Data;
+  // Require changes before able to submit form
+  requireChanges?: boolean;
+  // Reset form when there are errors; after submit
+  resetOnError?: boolean;
+  hideFooter?: boolean;
+  allowUndo?: boolean;
+  // Save field on control blur
+  saveOnBlur?: boolean;
+  model?: FormModel;
+  'data-test-id'?: string;
+
+  onCancel?: (e: React.MouseEvent) => void;
+  onSubmit?: (
+    data: Data,
+    onSubmitSuccess: (data: Data) => void,
+    onSubmitError: (error: any) => void,
+    e: React.FormEvent,
+    setFormSaving: FormModel['setFormSaving']
+  ) => void;
+} & Pick<FormOptions, 'onSubmitSuccess' | 'onSubmitError' | 'onFieldChange'>;
+
+type Context = {
+  saveOnBlur: boolean;
+  form: FormModel;
+};
+
+export default class Form extends React.Component<Props> {
   static propTypes = {
     cancelLabel: PropTypes.string,
     onCancel: PropTypes.func,
@@ -27,9 +73,7 @@ export default class Form extends React.Component {
     requireChanges: PropTypes.bool,
     // Reset form when there are errors, after submit
     resetOnError: PropTypes.bool,
-    // Hide Footer
     hideFooter: PropTypes.bool,
-    // Allow undo
     allowUndo: PropTypes.bool,
     // Save field on control blur
     saveOnBlur: PropTypes.bool,
@@ -39,6 +83,11 @@ export default class Form extends React.Component {
     'data-test-id': PropTypes.string,
   };
 
+  static childContextTypes = {
+    saveOnBlur: PropTypes.bool.isRequired,
+    form: PropTypes.object.isRequired,
+  };
+
   static defaultProps = {
     cancelLabel: t('Cancel'),
     submitLabel: t('Save Changes'),
@@ -48,16 +97,9 @@ export default class Form extends React.Component {
     requireChanges: false,
     allowUndo: false,
     saveOnBlur: false,
-    onSubmitSuccess: () => {},
-    onSubmitError: () => {},
   };
 
-  static childContextTypes = {
-    saveOnBlur: PropTypes.bool.isRequired,
-    form: PropTypes.object.isRequired,
-  };
-
-  constructor(props, context) {
+  constructor(props: Props, context: Context) {
     super(props, context);
     const {
       saveOnBlur,
@@ -68,11 +110,9 @@ export default class Form extends React.Component {
       onSubmitError,
       onFieldChange,
       initialData,
-      model,
       allowUndo,
     } = props;
 
-    this.model = model || new FormModel();
     this.model.setInitialData(initialData);
     this.model.setFormOptions({
       resetOnError,
@@ -95,9 +135,10 @@ export default class Form extends React.Component {
 
   componentWillUnmount() {
     this.model.reset();
-    this.model = null;
   }
 
+  model: FormModel = this.props.model || new FormModel();
+
   onSubmit = e => {
     e.preventDefault();
     if (this.model.isSaving) {
@@ -118,13 +159,21 @@ export default class Form extends React.Component {
   };
 
   onSubmitSuccess = data => {
+    const {onSubmitSuccess} = this.props;
     this.model.submitSuccess(data);
-    this.props.onSubmitSuccess(data, this.model);
+
+    if (onSubmitSuccess) {
+      onSubmitSuccess(data, this.model);
+    }
   };
 
   onSubmitError = error => {
+    const {onSubmitError} = this.props;
     this.model.submitError(error);
-    this.props.onSubmitError(error, this.model);
+
+    if (onSubmitError) {
+      onSubmitError(error, this.model);
+    }
   };
 
   render() {
@@ -155,7 +204,11 @@ export default class Form extends React.Component {
         <div>{children}</div>
 
         {shouldShowFooter && (
-          <StyledFooter className={footerClass} style={footerStyle}>
+          <StyledFooter
+            className={footerClass}
+            style={footerStyle}
+            saveOnBlur={saveOnBlur}
+          >
             <Observer>
               {() => (
                 <Button
@@ -195,7 +248,7 @@ export default class Form extends React.Component {
   }
 }
 
-const StyledFooter = styled('div')`
+const StyledFooter = styled('div')<{saveOnBlur?: boolean}>`
   text-align: right;
   margin-top: 25px;
   border-top: 1px solid #e9ebec;
@@ -222,3 +275,5 @@ const StyledFooter = styled('div')`
   }
   `};
 `;
+
+export {FieldValue};
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
index f5dcff5f17..61fbc66b8e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
@@ -8,10 +8,11 @@ import {t} from 'app/locale';
 import FormState from 'app/components/forms/state';
 
 type Snapshot = Map<string, FieldValue>;
-type FieldValue = string | number | boolean | undefined; //is undefined valid here?
 type SaveSnapshot = (() => number) | null;
 
-type FormOptions = {
+export type FieldValue = string | number | boolean | undefined; //is undefined valid here?
+
+export type FormOptions = {
   apiEndpoint?: string;
   apiMethod?: APIRequestMethod;
   allowUndo?: boolean;
@@ -135,7 +136,7 @@ class FormModel {
    *
    * Also resets snapshots
    */
-  setInitialData(initialData: Object) {
+  setInitialData(initialData?: object) {
     this.fields.replace(initialData || {});
     this.initialData = this.fields.toJSON() || {};
 
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
index 88d12d1879..af0e0145e8 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
@@ -159,8 +159,9 @@ type RuleFormContainerProps = {
   orgId: string;
   incidentRuleId?: string;
   saveOnBlur?: boolean;
-  onSubmitSuccess?: Function;
-} & React.ComponentProps<typeof RuleForm>;
+} & React.ComponentProps<typeof RuleForm> & {
+    onSubmitSuccess?: Form['props']['onSubmitSuccess'];
+  };
 
 function RuleFormContainer({
   orgId,
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
index aab79185ef..3ae52125ed 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
@@ -267,8 +267,9 @@ class TriggerForm extends React.Component<Props, State> {
 
 type TriggerFormContainerProps = {
   orgId: string;
-  onSubmitSuccess?: Function;
-} & React.ComponentProps<typeof TriggerForm>;
+} & React.ComponentProps<typeof TriggerForm> & {
+    onSubmitSuccess?: Form['props']['onSubmitSuccess'];
+  };
 
 function TriggerFormContainer({
   orgId,
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index 3586540fc1..9ae883aff3 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -8,7 +8,7 @@ import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 import {Panel, PanelItem, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
-import Form from 'app/views/settings/components/forms/form';
+import Form, {FieldValue} from 'app/views/settings/components/forms/form';
 import FormModel from 'app/views/settings/components/forms/model';
 import FormField from 'app/views/settings/components/forms/formField';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
@@ -280,7 +280,7 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
     }
   };
 
-  onFieldChange = (name: string, value: string | number): void => {
+  onFieldChange = (name: string, value: FieldValue): void => {
     if (name === 'webhookUrl' && !value && this.isInternal) {
       //if no webhook, then set isAlertable to false
       this.form.setValue('isAlertable', false);
diff --git a/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap
index 493a207fef..0e4c216243 100644
--- a/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap
@@ -36,8 +36,8 @@ exports[`FormField + model renders with Form 1`] = `
         "apiEndpoint": undefined,
         "apiMethod": undefined,
         "onFieldChange": undefined,
-        "onSubmitError": [Function],
-        "onSubmitSuccess": [Function],
+        "onSubmitError": undefined,
+        "onSubmitSuccess": undefined,
         "resetOnError": undefined,
         "saveOnBlur": false,
       },
@@ -46,8 +46,6 @@ exports[`FormField + model renders with Form 1`] = `
       ],
     }
   }
-  onSubmitError={[Function]}
-  onSubmitSuccess={[Function]}
   requireChanges={false}
   saveOnBlur={false}
   submitDisabled={false}
@@ -138,8 +136,8 @@ exports[`FormField + model renders with Form 1`] = `
                                     "apiEndpoint": undefined,
                                     "apiMethod": undefined,
                                     "onFieldChange": undefined,
-                                    "onSubmitError": [Function],
-                                    "onSubmitSuccess": [Function],
+                                    "onSubmitError": undefined,
+                                    "onSubmitSuccess": undefined,
                                     "resetOnError": undefined,
                                     "saveOnBlur": false,
                                   },
@@ -290,8 +288,8 @@ exports[`FormField + model renders with Form 1`] = `
                                                                 "apiEndpoint": undefined,
                                                                 "apiMethod": undefined,
                                                                 "onFieldChange": undefined,
-                                                                "onSubmitError": [Function],
-                                                                "onSubmitSuccess": [Function],
+                                                                "onSubmitError": undefined,
+                                                                "onSubmitSuccess": undefined,
                                                                 "resetOnError": undefined,
                                                                 "saveOnBlur": false,
                                                               },
@@ -332,9 +330,11 @@ exports[`FormField + model renders with Form 1`] = `
         </InputField>
       </TextField>
     </div>
-    <StyledFooter>
+    <StyledFooter
+      saveOnBlur={false}
+    >
       <div
-        className="css-1g4ne7-StyledFooter e1jxgbzp0"
+        className="css-1g4ne7-StyledFooter e1r1zmbj0"
       >
         <Observer>
           <Button
diff --git a/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
index c8fbcd1904..bd4b561e54 100644
--- a/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
@@ -51,7 +51,6 @@ exports[`AccountEmails renders with emails 1`] = `
       apiMethod="POST"
       cancelLabel="Cancel"
       className="form-stacked"
-      onSubmitError={[Function]}
       onSubmitSuccess={[Function]}
       requireChanges={false}
       saveOnBlur={true}
diff --git a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
index 098cfcdac4..eee12950e5 100644
--- a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
@@ -161,8 +161,6 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
           "fallthrough": "false",
         }
       }
-      onSubmitError={[Function]}
-      onSubmitSuccess={[Function]}
       requireChanges={false}
       saveOnBlur={true}
       submitDisabled={false}
@@ -201,8 +199,6 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
           "autoAssignment": "false",
         }
       }
-      onSubmitError={[Function]}
-      onSubmitSuccess={[Function]}
       requireChanges={false}
       saveOnBlur={true}
       submitDisabled={false}
diff --git a/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectCspReports.spec.jsx.snap b/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectCspReports.spec.jsx.snap
index d2314a2bbb..b5be2fee58 100644
--- a/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectCspReports.spec.jsx.snap
+++ b/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectCspReports.spec.jsx.snap
@@ -28,8 +28,6 @@ exports[`ProjectCspReports renders 1`] = `
       cancelLabel="Cancel"
       className="form-stacked"
       initialData={Object {}}
-      onSubmitError={[Function]}
-      onSubmitSuccess={[Function]}
       requireChanges={false}
       saveOnBlur={true}
       submitDisabled={false}
