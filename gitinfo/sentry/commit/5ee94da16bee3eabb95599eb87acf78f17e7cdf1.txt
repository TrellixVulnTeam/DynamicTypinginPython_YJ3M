commit 5ee94da16bee3eabb95599eb87acf78f17e7cdf1
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Mar 26 17:31:23 2018 -0700

    ref: Remove unnecessary form rendering code

diff --git a/src/sentry/api/endpoints/project_rules_configuration.py b/src/sentry/api/endpoints/project_rules_configuration.py
index 8962d8893d..5c96d1e23c 100644
--- a/src/sentry/api/endpoints/project_rules_configuration.py
+++ b/src/sentry/api/endpoints/project_rules_configuration.py
@@ -23,8 +23,6 @@ class ProjectRulesConfigurationEndpoint(ProjectEndpoint):
             context = {
                 'id': node.id,
                 'label': node.label,
-                # TODO: remove after we migrate UI to generate form from form_fields object
-                'html': node.render_form(),
                 'enabled': node.is_enabled(),
             }
 
diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index 2e2a0a45e1..ed544f762b 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -17,18 +17,10 @@ strip_channel_chars = ''.join([MEMBER_PREFIX, CHANNEL_PREFIX])
 
 class SlackNotifyServiceForm(forms.Form):
     workspace = forms.ChoiceField(choices=(), widget=forms.Select(
-        attrs={'style': 'width:150px'},
-    ))
-    channel = forms.CharField(widget=forms.TextInput(
-        attrs={'placeholder': 'i.e #critical'},
     ))
+    channel = forms.CharField(widget=forms.TextInput())
     channel_id = forms.HiddenInput()
-    tags = forms.CharField(required=False, widget=forms.TextInput(
-        attrs={
-            'placeholder': 'i.e environment,user,my_tag',
-            'style': 'width:200px',
-        },
-    ))
+    tags = forms.CharField(required=False, widget=forms.TextInput())
 
     def __init__(self, *args, **kwargs):
         # NOTE: Workspace maps directly to the integration ID
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index 945aec38a1..e59c246715 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -38,13 +38,9 @@ by the rule's logic. Each rule condition may be associated with a form.
 from __future__ import absolute_import
 
 import logging
-import re
 import six
 
 from collections import namedtuple
-from django.utils.safestring import mark_safe
-
-from sentry.utils.html import escape
 
 # Encapsulates a reference to the callback, including arguments. The `key`
 # attribute may be specifically used to key the callbacks when they are
@@ -88,18 +84,6 @@ class RuleBase(object):
     def render_label(self):
         return self.label.format(**self.data)
 
-    def render_form(self):
-        if not self.form_cls:
-            return self.label
-
-        form = self.get_form_instance()
-
-        def replace_field(match):
-            field = match.group(1)
-            return six.text_type(form[field])
-
-        return mark_safe(re.sub(r'{([^}]+)}', replace_field, escape(self.label)))
-
     def validate_form(self):
         if not self.form_cls:
             return True
diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index b9766102da..ab19ad0240 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -69,8 +69,6 @@ class FixedTypeaheadInput(forms.TextInput):
 class EventAttributeForm(forms.Form):
     attribute = forms.CharField(
         widget=FixedTypeaheadInput(
-            attrs={'style': 'width:200px',
-                   'placeholder': 'i.e. exception.type'},
             choices=[{
                 'id': a,
                 'text': a
@@ -78,14 +76,10 @@ class EventAttributeForm(forms.Form):
         )
     )
     match = forms.ChoiceField(
-        MATCH_CHOICES.items(), widget=forms.Select(
-            attrs={'style': 'width:150px'},
-        )
+        MATCH_CHOICES.items()
     )
     value = forms.CharField(
-        widget=forms.TextInput(
-            attrs={'placeholder': 'value'},
-        ), required=False
+        widget=forms.TextInput(), required=False
     )
 
 
diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index f8dd29d630..33aaf0cd84 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -33,8 +33,7 @@ class EventFrequencyForm(forms.Form):
         ]
     )
     value = forms.IntegerField(
-        widget=forms.TextInput(attrs={'placeholder': '100',
-                                      'type': 'number'})
+        widget=forms.TextInput()
     )
 
 
diff --git a/src/sentry/rules/conditions/level.py b/src/sentry/rules/conditions/level.py
index 925d724986..a93140c8d1 100644
--- a/src/sentry/rules/conditions/level.py
+++ b/src/sentry/rules/conditions/level.py
@@ -37,11 +37,9 @@ MATCH_CHOICES = OrderedDict(
 class LevelEventForm(forms.Form):
     level = forms.ChoiceField(
         choices=LEVEL_CHOICES.items(),
-        initial=30,
     )
     match = forms.ChoiceField(
         choices=MATCH_CHOICES.items(),
-        initial=MatchType.GREATER_OR_EQUAL,
     )
 
 
diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index 44f334d790..6069614285 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -37,13 +37,11 @@ MATCH_CHOICES = OrderedDict(
 
 
 class TaggedEventForm(forms.Form):
-    key = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'key'}))
+    key = forms.CharField(widget=forms.TextInput())
     match = forms.ChoiceField(
-        MATCH_CHOICES.items(), widget=forms.Select(
-            attrs={'style': 'width:150px'},
-        )
+        MATCH_CHOICES.items(), widget=forms.Select()
     )
-    value = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'value'}))
+    value = forms.CharField(widget=forms.TextInput())
 
 
 class TaggedEventCondition(EventCondition):
