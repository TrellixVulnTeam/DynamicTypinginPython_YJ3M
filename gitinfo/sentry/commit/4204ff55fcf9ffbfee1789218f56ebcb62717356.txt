commit 4204ff55fcf9ffbfee1789218f56ebcb62717356
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Jul 24 18:53:42 2018 +0200

    feat(canonical): Add a shim for canonical keys (#8789)

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 6f4d90e23e..a9007148f5 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -12,7 +12,7 @@ from sentry.models import Event, EventError
 @register(Event)
 class EventSerializer(Serializer):
     _reserved_keys = frozenset(
-        ['sentry.interfaces.User', 'sdk', 'device', 'contexts'])
+        ['user', 'sdk', 'device', 'contexts'])
 
     def _get_entries(self, event, user, is_public=False):
         # XXX(dcramer): These are called entries for future-proofing
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index e99c45cb3f..bc981fd231 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -863,20 +863,8 @@ SENTRY_INTERFACES = {
     'contexts': 'sentry.interfaces.contexts.Contexts',
     'threads': 'sentry.interfaces.threads.Threads',
     'debug_meta': 'sentry.interfaces.debug_meta.DebugMeta',
-    'sentry.interfaces.Exception': 'sentry.interfaces.exception.Exception',
-    'sentry.interfaces.Message': 'sentry.interfaces.message.Message',
-    'sentry.interfaces.Stacktrace': 'sentry.interfaces.stacktrace.Stacktrace',
-    'sentry.interfaces.Template': 'sentry.interfaces.template.Template',
-    'sentry.interfaces.Query': 'sentry.interfaces.query.Query',
-    'sentry.interfaces.Http': 'sentry.interfaces.http.Http',
-    'sentry.interfaces.User': 'sentry.interfaces.user.User',
-    'sentry.interfaces.Csp': 'sentry.interfaces.security.Csp',
-    'sentry.interfaces.AppleCrashReport': 'sentry.interfaces.applecrash.AppleCrashReport',
-    'sentry.interfaces.Breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
-    'sentry.interfaces.Contexts': 'sentry.interfaces.contexts.Contexts',
-    'sentry.interfaces.Threads': 'sentry.interfaces.threads.Threads',
-    'sentry.interfaces.DebugMeta': 'sentry.interfaces.debug_meta.DebugMeta',
 }
+PREFER_CANONICAL_LEGACY_KEYS = False
 
 SENTRY_EMAIL_BACKEND_ALIASES = {
     'smtp': 'django.core.mail.backends.smtp.EmailBackend',
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 1152768a7c..d2f20bc583 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -37,6 +37,7 @@ from sentry.utils.http import origin_from_request
 from sentry.utils.data_filters import is_valid_ip, \
     is_valid_release, is_valid_error_message, FilterStatKeys
 from sentry.utils.strings import decompress
+from sentry.utils.canonical import CANONICAL_TYPES
 
 
 _dist_re = re.compile(r'^[a-zA-Z0-9_.-]+$')
@@ -350,8 +351,8 @@ class ClientApiHelper(object):
     def insert_data_to_database(self, data, start_time=None, from_reprocessing=False):
         if start_time is None:
             start_time = time()
-        # we might be passed LazyData
-        if isinstance(data, LazyData):
+        # we might be passed some sublcasses of dict that fail dumping
+        if isinstance(data, DOWNGRADE_DATA_TYPES):
             data = dict(data.items())
         cache_key = 'e:{1}:{0}'.format(data['project'], data['event_id'])
         default_cache.set(cache_key, data, timeout=3600)
@@ -538,3 +539,6 @@ class LazyData(MutableMapping):
         if not self._decoded:
             self._decode()
         return iter(self._data)
+
+
+DOWNGRADE_DATA_TYPES = CANONICAL_TYPES + (LazyData,)
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index bdd77d962a..4294248575 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -21,6 +21,7 @@ from sentry import nodestore
 from sentry.utils.cache import memoize
 from sentry.utils.compat import pickle
 from sentry.utils.strings import decompress, compress
+from sentry.utils.canonical import CANONICAL_TYPES, CanonicalKeyDict
 
 from .gzippeddict import GzippedDictField
 
@@ -48,6 +49,25 @@ class NodeData(collections.MutableMapping):
         self.ref_version = None
         self._node_data = data
 
+    def __getstate__(self):
+        data = dict(self.__dict__)
+        # downgrade this into a normal dict in case it's a shim dict.
+        # This is needed as older workers might not know about newer
+        # collection types.  For isntance we have events where this is a
+        # CanonicalKeyDict
+        data.pop('data', None)
+        data['_node_data_CANONICAL'] = isinstance(data['_node_data'], CANONICAL_TYPES)
+        data['_node_data'] = dict(data['_node_data'].items())
+        return data
+
+    def __setstate__(self, state):
+        # If there is a legacy pickled version that used to have data as a
+        # duplicate, reject it.
+        state.pop('data', None)
+        if state.pop('_node_data_CANONICAL', False):
+            state['_node_data'] = CanonicalKeyDict(state['_node_data'])
+        self.__dict__ = state
+
     def __getitem__(self, key):
         return self.data[key]
 
@@ -91,7 +111,10 @@ class NodeData(collections.MutableMapping):
             self.bind_data(nodestore.get(self.id) or {})
             return self._node_data
 
-        return {}
+        rv = {}
+        if self.field.wrapper is not None:
+            rv = self.field.wrapper(rv)
+        return rv
 
     def bind_data(self, data, ref=None):
         self.ref = data.pop('_ref', ref)
@@ -100,6 +123,8 @@ class NodeData(collections.MutableMapping):
             raise NodeIntegrityFailure(
                 'Node reference for %s is invalid: %s != %s' % (self.id, ref, self.ref, )
             )
+        if self.field.wrapper is not None:
+            data = self.field.wrapper(data)
         self._node_data = data
 
     def bind_ref(self, instance):
@@ -118,6 +143,7 @@ class NodeField(GzippedDictField):
     def __init__(self, *args, **kwargs):
         self.ref_func = kwargs.pop('ref_func', None)
         self.ref_version = kwargs.pop('ref_version', None)
+        self.wrapper = kwargs.pop('wrapper', None)
         super(NodeField, self).__init__(*args, **kwargs)
 
     def contribute_to_class(self, cls, name):
@@ -148,6 +174,9 @@ class NodeField(GzippedDictField):
             node_id = None
             data = value
 
+        if self.wrapper is not None and data is not None:
+            data = self.wrapper(data)
+
         return NodeData(self, node_id, data)
 
     def get_prep_value(self, value):
@@ -155,12 +184,18 @@ class NodeField(GzippedDictField):
             # save ourselves some storage
             return None
 
+        # We can't put our wrappers into the nodestore, so we need to
+        # ensure that the data is converted into a plain old dict
+        data = value.data
+        if isinstance(data, CANONICAL_TYPES):
+            data = dict(data.items())
+
         # TODO(dcramer): we should probably do this more intelligently
         # and manually
         if not value.id:
-            value.id = nodestore.create(value.data)
+            value.id = nodestore.create(data)
         else:
-            nodestore.set(value.id, value.data)
+            nodestore.set(value.id, data)
 
         return compress(pickle.dumps({'node_id': value.id}))
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 565bbe0992..aab83bc816 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -41,6 +41,7 @@ from sentry.tasks.integrations import kick_off_status_syncs
 from sentry.tasks.merge import merge_group
 from sentry.utils import metrics
 from sentry.utils.cache import default_cache
+from sentry.utils.canonical import CanonicalKeyDict
 from sentry.utils.db import get_db_engine
 from sentry.utils.safe import safe_execute, trim, trim_dict, get_path
 from sentry.utils.strings import truncatechars
@@ -308,7 +309,7 @@ class EventManager(object):
     logger = logging.getLogger('sentry.events')
 
     def __init__(self, data, version='5'):
-        self.data = data.copy()
+        self.data = CanonicalKeyDict(data)
         self.version = version
 
     def normalize(self, request_env=None):
@@ -338,15 +339,12 @@ class EventManager(object):
             'tags': lambda v: [(text(v_k).replace(' ', '-').strip(), text(v_v).strip()) for (v_k, v_v) in dict(v).items()],
             'timestamp': lambda v: process_timestamp(v),
             'platform': lambda v: v if v in VALID_PLATFORMS else 'other',
-            'sentry.interfaces.Message': lambda v: v if isinstance(v, dict) else {'message': v},
+            'logentry': lambda v: v if isinstance(v, dict) else {'message': v},
 
             # These can be sent as lists and need to be converted to {'values': [...]}
             'exception': to_values,
-            'sentry.interfaces.Exception': to_values,
             'breadcrumbs': to_values,
-            'sentry.interfaces.Breadcrumbs': to_values,
             'threads': to_values,
-            'sentry.interfaces.Threads': to_values,
         }
 
         for c in casts:
@@ -385,8 +383,10 @@ class EventManager(object):
             if get_path(data, ['user', 'ip_address']) == '{{auto}}':
                 data['user']['ip_address'] = client_ip
 
-        # Validate main event body and tags against schema
-        is_valid, event_errors = validate_and_default_interface(data, 'event')
+        # Validate main event body and tags against schema.
+        # XXX(ja): jsonschema does not like CanonicalKeyDict, so we need to pass
+        #          in the inner data dict.
+        is_valid, event_errors = validate_and_default_interface(data.data, 'event')
         errors.extend(event_errors)
         if 'tags' in data:
             is_valid, tag_errors = validate_and_default_interface(data['tags'], 'tags', name='tags')
@@ -595,6 +595,7 @@ class EventManager(object):
             **kwargs
         )
         event._project_cache = project
+        data = event.data.data
 
         # convert this to a dict to ensure we're only storing one value per key
         # as most parts of Sentry dont currently play well with multiple values
diff --git a/src/sentry/eventstream/kafka.py b/src/sentry/eventstream/kafka.py
index 4100e67915..33bb2265ee 100644
--- a/src/sentry/eventstream/kafka.py
+++ b/src/sentry/eventstream/kafka.py
@@ -61,7 +61,7 @@ class KafkaEventStream(EventStream):
                 'message': event.message,
                 'platform': event.platform,
                 'datetime': event.datetime,
-                'data': event.data.data,
+                'data': dict(event.data.items()),
                 'primary_hash': primary_hash,
                 'retention_days': retention_days,
             }, {
diff --git a/src/sentry/eventstream/snuba.py b/src/sentry/eventstream/snuba.py
index b1f1c416ab..91a7565740 100644
--- a/src/sentry/eventstream/snuba.py
+++ b/src/sentry/eventstream/snuba.py
@@ -13,7 +13,7 @@ class SnubaEventStream(EventStream):
             'message': event.message,
             'platform': event.platform,
             'datetime': event.datetime,
-            'data': event.data.data,
+            'data': dict(event.data.items()),
             'primary_hash': primary_hash,
         }])
         super(SnubaEventStream, self).publish(group, event, is_new, is_sample, is_regression, is_new_group_environment, primary_hash, skip_consume)
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 413937cf2d..0afbaff745 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -6,6 +6,7 @@ from collections import OrderedDict
 from django.conf import settings
 from django.utils.translation import ugettext as _
 
+from sentry.utils.canonical import get_canonical_name
 from sentry.utils.html import escape
 from sentry.utils.imports import import_string
 from sentry.utils.safe import safe_execute
@@ -13,6 +14,7 @@ from sentry.utils.safe import safe_execute
 
 def get_interface(name):
     try:
+        name = get_canonical_name(name)
         import_path = settings.SENTRY_INTERFACES[name]
     except KeyError:
         raise ValueError('Invalid interface name: %s' % (name, ))
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 7979a43252..3cf5c67688 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -18,10 +18,11 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry import eventtypes
 from sentry.db.models import (
-    BaseManager, BoundedBigIntegerField, BoundedIntegerField, Model, NodeField, sane_repr
+    BoundedBigIntegerField, BoundedIntegerField, Model, NodeField, sane_repr
 )
 from sentry.interfaces.base import get_interfaces
 from sentry.utils.cache import memoize
+from sentry.utils.canonical import CanonicalKeyDict, CanonicalKeyView
 from sentry.utils.strings import truncatechars
 
 
@@ -43,10 +44,9 @@ class Event(Model):
         null=True,
         ref_func=lambda x: x.project_id or x.project.id,
         ref_version=2,
+        wrapper=CanonicalKeyDict,
     )
 
-    objects = BaseManager()
-
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_message'
@@ -57,6 +57,19 @@ class Event(Model):
 
     __repr__ = sane_repr('project_id', 'group_id')
 
+    def __getstate__(self):
+        state = Model.__getstate__(self)
+
+        # do not pickle cached info.  We want to fetch this on demand
+        # again.  In particular if we were to pickle interfaces we would
+        # pickle a CanonicalKeyView which old sentry workers do not know
+        # about
+        state.pop('_project_cache', None)
+        state.pop('_group_cache', None)
+        state.pop('interfaces', None)
+
+        return state
+
     # Implement a ForeignKey-like accessor for backwards compat
     def _set_group(self, group):
         self.group_id = group.id
@@ -106,8 +119,9 @@ class Event(Model):
         etype = self.data.get('type', 'default')
         if 'metadata' not in self.data:
             # TODO(dcramer): remove after Dec 1 2016
-            data = self.data.copy() if self.data else {}
+            data = dict(self.data or {})
             data['message'] = self.message
+            data = CanonicalKeyView(data)
             return eventtypes.get(etype)(data).get_metadata()
         return self.data['metadata']
 
@@ -152,7 +166,7 @@ class Event(Model):
         return None
 
     def get_interfaces(self):
-        return get_interfaces(self.data)
+        return CanonicalKeyView(get_interfaces(self.data))
 
     @memoize
     def interfaces(self):
diff --git a/src/sentry/models/rawevent.py b/src/sentry/models/rawevent.py
index 9799f63ec5..c9c3961b5f 100644
--- a/src/sentry/models/rawevent.py
+++ b/src/sentry/models/rawevent.py
@@ -10,7 +10,8 @@ from __future__ import absolute_import
 from django.db import models
 from django.utils import timezone
 
-from sentry.db.models import (BaseManager, Model, NodeField, FlexibleForeignKey, sane_repr)
+from sentry.db.models import (Model, NodeField, FlexibleForeignKey, sane_repr)
+from sentry.utils.canonical import CanonicalKeyView
 
 
 class RawEvent(Model):
@@ -24,10 +25,9 @@ class RawEvent(Model):
         null=True,
         ref_func=lambda x: x.project_id or x.project.id,
         ref_version=1,
+        wrapper=CanonicalKeyView,
     )
 
-    objects = BaseManager()
-
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_rawevent'
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index d4936cd607..7ae3f86e49 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -22,6 +22,7 @@ from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
 from sentry.stacktraces import process_stacktraces, \
     should_process_for_stacktraces
+from sentry.utils.canonical import CanonicalKeyDict, CANONICAL_TYPES
 from sentry.utils.dates import to_datetime
 from sentry.models import ProjectOption, Activity, Project
 
@@ -62,6 +63,7 @@ def _do_preprocess_event(cache_key, data, start_time, event_id, process_event):
         error_logger.error('preprocess.failed.empty', extra={'cache_key': cache_key})
         return
 
+    data = CanonicalKeyDict(data)
     project = data['project']
     Raven.tags_context({
         'project': project,
@@ -115,6 +117,7 @@ def _do_process_event(cache_key, start_time, event_id, process_task):
         error_logger.error('process.failed.empty', extra={'cache_key': cache_key})
         return
 
+    data = CanonicalKeyDict(data)
     project = data['project']
     Raven.tags_context({
         'project': project,
@@ -161,6 +164,10 @@ def _do_process_event(cache_key, start_time, event_id, process_task):
                                event_id=event_id)
             return
 
+        # We cannot persist canonical types in the cache, so we need to
+        # downgrade this.
+        if isinstance(data, CANONICAL_TYPES):
+            data = dict(data.items())
         default_cache.set(cache_key, data, 3600)
 
     save_event.delay(
@@ -264,6 +271,7 @@ def create_failed_event(cache_key, project_id, issues, event_id, start_time=None
         error_logger.error('process.failed_raw.empty', extra={'cache_key': cache_key})
         return True
 
+    data = CanonicalKeyDict(data)
     from sentry.models import RawEvent, ProcessingIssue
     raw_event = RawEvent.objects.create(
         project_id=project_id,
@@ -299,6 +307,9 @@ def save_event(cache_key=None, data=None, start_time=None, event_id=None,
     if cache_key:
         data = default_cache.get(cache_key)
 
+    if data is not None:
+        data = CanonicalKeyDict(data)
+
     if event_id is None and data is not None:
         event_id = data['event_id']
 
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index fd489c7b0f..f75a9c0f44 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -29,6 +29,7 @@ from sentry.models import (
     OrganizationMemberTeam, Project, Team, User, UserEmail, Release, Commit, ReleaseCommit,
     CommitAuthor, Repository, CommitFileChange, ProjectDSymFile, File, UserPermission
 )
+from sentry.utils.canonical import CanonicalKeyDict
 
 loremipsum = Generator()
 
@@ -494,6 +495,7 @@ class Fixtures(object):
                 }
             )
 
+        kwargs['data'] = CanonicalKeyDict(kwargs.pop('data'))
         event = Event(event_id=event_id, **kwargs)
         EventMapping.objects.create(
             project_id=event.project.id,
diff --git a/src/sentry/utils/canonical.py b/src/sentry/utils/canonical.py
new file mode 100644
index 0000000000..be668370a6
--- /dev/null
+++ b/src/sentry/utils/canonical.py
@@ -0,0 +1,131 @@
+"""
+sentry.utils.canonical
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2018 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import, print_function
+
+from django.conf import settings
+
+import copy
+import collections
+import six
+
+__all__ = ('CanonicalKeyDict', 'CanonicalKeyView', 'get_canonical_name')
+
+CANONICAL_KEY_MAPPING = {
+    'sentry.interfaces.Exception': 'exception',
+    'sentry.interfaces.Message': 'logentry',
+    'sentry.interfaces.Stacktrace': 'stacktrace',
+    'sentry.interfaces.Template': 'template',
+    'sentry.interfaces.Query': 'query',
+    'sentry.interfaces.Http': 'request',
+    'sentry.interfaces.User': 'user',
+    'sentry.interfaces.Csp': 'csp',
+    'sentry.interfaces.AppleCrashReport': 'applecrashreport',
+    'sentry.interfaces.Breadcrumbs': 'breadcrumbs',
+    'sentry.interfaces.Contexts': 'contexts',
+    'sentry.interfaces.Threads': 'threads',
+    'sentry.interfaces.DebugMeta': 'debug_meta',
+}
+
+LEGACY_KEY_MAPPING = {CANONICAL_KEY_MAPPING[k]: k for k in CANONICAL_KEY_MAPPING}
+
+
+def get_canonical_name(key):
+    return CANONICAL_KEY_MAPPING.get(key, key)
+
+
+def get_legacy_name(key):
+    return LEGACY_KEY_MAPPING.get(key, key)
+
+
+class CanonicalKeyView(collections.Mapping):
+    def __init__(self, data):
+        self.data = data
+        self._len = len(set(get_canonical_name(key) for key in self.data))
+
+    def copy(self):
+        return self
+
+    __copy__ = copy
+
+    def __len__(self):
+        return self._len
+
+    def __iter__(self):
+        # Preserve the order of iteration while prioritizing canonical keys
+        keys = list(self.data)
+        for key in keys:
+            canonical = get_canonical_name(key)
+            if canonical == key or canonical not in keys:
+                yield canonical
+
+    def __getitem__(self, key):
+        canonical = get_canonical_name(key)
+        if canonical in self.data:
+            return self.data[canonical]
+
+        legacy = get_legacy_name(key)
+        if legacy in self.data:
+            return self.data[legacy]
+
+        raise KeyError(key)
+
+
+class CanonicalKeyDict(collections.MutableMapping):
+    def __init__(self, data, legacy=None):
+        self.legacy = legacy
+        self.__init(data)
+
+    def __init(self, data):
+        legacy = self.legacy
+        if legacy is None:
+            legacy = settings.PREFER_CANONICAL_LEGACY_KEYS
+        norm_func = legacy and get_legacy_name or get_canonical_name
+        self._norm_func = norm_func
+        self.data = {}
+        for key, value in six.iteritems(data):
+            canonical_key = norm_func(key)
+            if key == canonical_key or canonical_key not in self.data:
+                self.data[canonical_key] = value
+
+    def __getstate__(self):
+        state = dict(self.__dict__)
+        state.pop('_norm_func', None)
+        return state
+
+    def __setstate__(self, state):
+        self.__dict__.update(state)
+        self.__init(state['data'])
+
+    def copy(self):
+        rv = object.__new__(self.__class__)
+        rv.data = copy.copy(self.data)
+        return rv
+
+    __copy__ = copy
+
+    def __len__(self):
+        return len(self.data)
+
+    def __iter__(self):
+        return iter(self.data)
+
+    def __contains__(self, key):
+        return self._norm_func(key) in self.data
+
+    def __getitem__(self, key):
+        return self.data[self._norm_func(key)]
+
+    def __setitem__(self, key, value):
+        self.data[self._norm_func(key)] = value
+
+    def __delitem__(self, key):
+        del self.data[self._norm_func(key)]
+
+
+CANONICAL_TYPES = (CanonicalKeyDict, CanonicalKeyView)
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index f79f19dc67..d0879e76a7 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -7,6 +7,7 @@ sentry.utils.safe
 """
 from __future__ import absolute_import, print_function
 
+import collections
 import logging
 import six
 
@@ -130,7 +131,7 @@ def get_path(data, path, default=None):
     if not isinstance(path, (list, tuple)) or len(path) == 0:
         raise ValueError
     for p in path:
-        if not isinstance(data, dict) or p not in data:
+        if not isinstance(data, collections.Mapping) or p not in data:
             return default
         data = data[p]
     return data
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index beb4c90226..3c4471b43c 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -18,6 +18,7 @@ from sentry.coreapi import ClientApiHelper
 from sentry.event_manager import EventManager
 from sentry.interfaces.user import User as UserInterface
 from sentry.utils import json
+from sentry.utils.canonical import CanonicalKeyDict
 
 epoch = datetime.utcfromtimestamp(0)
 
@@ -129,6 +130,7 @@ def load_data(platform, default=None, timestamp=None, sample_name=None):
     if data is None:
         return
 
+    data = CanonicalKeyDict(data)
     if platform in ('csp', 'hkpk', 'expectct', 'expectstaple'):
         return data
 
@@ -184,7 +186,9 @@ def load_data(platform, default=None, timestamp=None, sample_name=None):
     breadcrumbs = data.get('sentry.interfaces.Breadcrumbs')
     if breadcrumbs is not None:
         duration = 1000
-        values = breadcrumbs['values']
+        # At this point, breadcrumbs are not normalized. They can either be a
+        # direct list or a values object containing a list.
+        values = isinstance(breadcrumbs, list) and breadcrumbs or breadcrumbs['values']
         for value in reversed(values):
             value['timestamp'] = milliseconds_ago(start, duration)
 
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index cfd249f024..0b5bea3b9a 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -483,7 +483,7 @@ class CspReportTest(TestCase):
         assert output['message'] == e.data['sentry.interfaces.Message']['message']
         for key, value in six.iteritems(output['tags']):
             assert e.get_tag(key) == value
-        self.assertDictContainsSubset(output['data'], e.data.data, e.data.data)
+        self.assertDictContainsSubset(output['data'], e.data, e.data)
 
     def assertReportRejected(self, input):
         resp = self._postCspWithHeader(input)
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index 600f27e9ab..785d3bfb9c 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+import pickle
+
 from sentry.models import Environment
 from sentry.testutils import TestCase
+from sentry.db.models.fields.node import NodeData
 
 
 class EventTest(TestCase):
@@ -19,6 +22,53 @@ class EventTest(TestCase):
         assert event.server_name == 'bar'
         assert event.culprit == event.group.culprit
 
+    def test_pickling_compat(self):
+        event = self.create_event(
+            data={'tags': [
+                ('logger', 'foobar'),
+                ('site', 'foo'),
+                ('server_name', 'bar'),
+            ]}
+        )
+
+        # Ensure we load and memoize the interfaces as well.
+        assert len(event.interfaces) > 0
+
+        # When we pickle an event we need to make sure our canonical code
+        # does not appear here or it breaks old workers.
+        data = pickle.dumps(event, protocol=2)
+        assert 'canonical' not in data
+
+        # For testing we remove the backwards compat support in the
+        # `NodeData` as well.
+        nodedata_getstate = NodeData.__getstate__
+        del NodeData.__getstate__
+
+        # Old worker loading
+        try:
+            event2 = pickle.loads(data)
+            assert event2.data == event.data
+        finally:
+            NodeData.__getstate__ = nodedata_getstate
+
+        # New worker loading
+        event2 = pickle.loads(data)
+        assert event2.data == event.data
+
+    def test_event_as_dict(self):
+        event = self.create_event(
+            data={
+                'sentry.interfaces.Message': {
+                    'message': 'Hello World!',
+                },
+            }
+        )
+
+        d = event.as_dict()
+        assert d['logentry'] == {
+            'message': 'Hello World!',
+        }
+
     def test_email_subject(self):
         event1 = self.create_event(
             event_id='a' * 32, group=self.group, tags={'level': 'info'}, message='Foo bar'
diff --git a/tests/sentry/test_canonical.py b/tests/sentry/test_canonical.py
new file mode 100644
index 0000000000..b550e86ca9
--- /dev/null
+++ b/tests/sentry/test_canonical.py
@@ -0,0 +1,165 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import, print_function
+
+from collections import OrderedDict
+
+from sentry.testutils import TestCase
+from sentry.utils.canonical import CanonicalKeyView, CanonicalKeyDict
+
+
+class CanonicalKeyViewTests(TestCase):
+    canonical_data = OrderedDict([
+        ('release', 'asdf'),
+        ('exception', {'type': 'DemoException'}),
+        ('user', {'id': 'DemoUser'}),
+    ])
+
+    legacy_data = OrderedDict([
+        ('release', 'asdf'),
+        ('sentry.interfaces.Exception', {'type': 'DemoException'}),
+        ('sentry.interfaces.User', {'id': 'DemoUser'}),
+    ])
+
+    mixed_data = OrderedDict([
+        ('release', 'asdf'),
+        ('sentry.interfaces.User', {'id': 'INVALID'}),
+        ('exception', {'type': 'DemoException'}),
+        ('user', {'id': 'DemoUser'}),
+        ('sentry.interfaces.Exception', {'type': 'INVALID'}),
+    ])
+
+    def test_len(self):
+        assert len(CanonicalKeyView(self.canonical_data)) == 3
+        assert len(CanonicalKeyView(self.legacy_data)) == 3
+        assert len(CanonicalKeyView(self.mixed_data)) == 3
+
+    def test_iter(self):
+        assert CanonicalKeyView(self.canonical_data).keys() == ['release', 'exception', 'user']
+        assert CanonicalKeyView(self.legacy_data).keys() == ['release', 'exception', 'user']
+        assert CanonicalKeyView(self.mixed_data).keys() == ['release', 'exception', 'user']
+
+    def test_contains(self):
+        assert 'user' in CanonicalKeyView(self.canonical_data)
+        assert 'user' in CanonicalKeyView(self.legacy_data)
+        assert 'user' in CanonicalKeyView(self.mixed_data)
+
+        assert 'sentry.interfaces.User' in CanonicalKeyView(self.canonical_data)
+        assert 'sentry.interfaces.User' in CanonicalKeyView(self.legacy_data)
+        assert 'sentry.interfaces.User' in CanonicalKeyView(self.mixed_data)
+
+    def test_getitem(self):
+        assert CanonicalKeyView(self.canonical_data)['user'] == {'id': 'DemoUser'}
+        assert CanonicalKeyView(self.legacy_data)['user'] == {'id': 'DemoUser'}
+        assert CanonicalKeyView(self.mixed_data)['user'] == {'id': 'DemoUser'}
+
+        assert CanonicalKeyView(self.canonical_data)['sentry.interfaces.User'] == {'id': 'DemoUser'}
+        assert CanonicalKeyView(self.legacy_data)['sentry.interfaces.User'] == {'id': 'DemoUser'}
+        assert CanonicalKeyView(self.mixed_data)['sentry.interfaces.User'] == {'id': 'DemoUser'}
+
+
+class CanonicalKeyDictTests(TestCase):
+    canonical_data = {
+        'release': 'asdf',
+        'exception': {'type': 'DemoException'},
+        'user': {'id': 'DemoUser'},
+    }
+
+    def test_canonical(self):
+        assert CanonicalKeyDict({
+            'release': 'asdf',
+            'exception': {'type': 'DemoException'},
+            'user': {'id': 'DemoUser'},
+        }) == self.canonical_data
+
+    def test_legacy(self):
+        assert CanonicalKeyDict({
+            'release': 'asdf',
+            'sentry.interfaces.Exception': {'type': 'DemoException'},
+            'sentry.interfaces.User': {'id': 'DemoUser'},
+        }) == self.canonical_data
+
+    def test_mixed(self):
+        assert CanonicalKeyDict({
+            'release': 'asdf',
+            'exception': {'type': 'DemoException'},
+            'user': {'id': 'DemoUser'},
+            'sentry.interfaces.Exception': {'type': 'INVALID'},
+            'sentry.interfaces.User': {'id': 'INVALID'},
+        }) == self.canonical_data
+
+    def test_getitem_setitem(self):
+        d = CanonicalKeyDict({'user': {'id': 'DemoUser'}})
+        d['user'] = {'id': 'other'}
+        assert d['user'] == {'id': 'other'}
+        assert d['sentry.interfaces.User'] == {'id': 'other'}
+
+        d = CanonicalKeyDict({'user': {'id': 'DemoUser'}})
+        d['sentry.interfaces.User'] = {'id': 'other'}
+        assert d['user'] == {'id': 'other'}
+        assert d['sentry.interfaces.User'] == {'id': 'other'}
+
+    def test_delitem(self):
+        d = CanonicalKeyDict({'user': {'id': 'DemoUser'}})
+        del d['user']
+        assert d == {}
+
+        d = CanonicalKeyDict({'user': {'id': 'DemoUser'}})
+        del d['sentry.interfaces.User']
+        assert d == {}
+
+    def test_contains(self):
+        d = CanonicalKeyDict({'user': {'id': 'DemoUser'}})
+        'user' in d
+        'sentry.interfaces.User' in d
+
+    def test_len(self):
+        assert len(CanonicalKeyDict({
+            'release': 'asdf',
+            'exception': {'type': 'DemoException'},
+            'user': {'id': 'DemoUser'},
+            'sentry.interfaces.Exception': {'type': 'INVALID'},
+            'sentry.interfaces.User': {'id': 'INVALID'},
+        })) == 3
+
+
+class LegacyCanonicalKeyDictTests(TestCase):
+    canonical_data = {
+        'release': 'asdf',
+        'sentry.interfaces.Exception': {'type': 'DemoException'},
+        'sentry.interfaces.User': {'id': 'DemoUser'},
+    }
+
+    def test_canonical(self):
+        assert CanonicalKeyDict({
+            'release': 'asdf',
+            'exception': {'type': 'DemoException'},
+            'user': {'id': 'DemoUser'},
+        }, legacy=True) == self.canonical_data
+
+    def test_legacy(self):
+        assert CanonicalKeyDict({
+            'release': 'asdf',
+            'sentry.interfaces.Exception': {'type': 'DemoException'},
+            'sentry.interfaces.User': {'id': 'DemoUser'},
+        }, legacy=True) == self.canonical_data
+
+    def test_mixed(self):
+        assert CanonicalKeyDict({
+            'release': 'asdf',
+            'sentry.interfaces.Exception': {'type': 'DemoException'},
+            'sentry.interfaces.User': {'id': 'DemoUser'},
+            'exception': {'type': 'INVALID'},
+            'user': {'id': 'INVALID'},
+        }, legacy=True) == self.canonical_data
+
+    def test_getitem_setitem(self):
+        d = CanonicalKeyDict({'user': {'id': 'DemoUser'}}, legacy=True)
+        d['user'] = {'id': 'other'}
+        assert d['user'] == {'id': 'other'}
+        assert d['sentry.interfaces.User'] == {'id': 'other'}
+
+        d = CanonicalKeyDict({'user': {'id': 'DemoUser'}}, legacy=True)
+        d['sentry.interfaces.User'] = {'id': 'other'}
+        assert d['user'] == {'id': 'other'}
+        assert d['sentry.interfaces.User'] == {'id': 'other'}
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 9f6c90e22b..40dd1d0e34 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -132,8 +132,9 @@ class EventManagerTest(TransactionTestCase):
         manager = EventManager(self.make_event(user={'id': '1'}))
         data = manager.normalize()
 
-        assert data['sentry.interfaces.User'] == {'id': '1'}
-        assert 'user' not in data
+        assert data['user'] == {'id': '1'}
+        # data is a CanonicalKeyDict, so we need to check .keys() explicitly
+        assert 'sentry.interfaces.User' not in data.keys()
 
     def test_does_default_ip_address_to_user(self):
         manager = EventManager(
diff --git a/tests/sentry/utils/test_safe.py b/tests/sentry/utils/test_safe.py
index eb85edaa2f..61e3071c0c 100644
--- a/tests/sentry/utils/test_safe.py
+++ b/tests/sentry/utils/test_safe.py
@@ -4,6 +4,7 @@ from collections import OrderedDict
 from functools import partial
 
 from sentry.testutils import TestCase
+from sentry.utils.canonical import CanonicalKeyDict
 from sentry.utils.safe import safe_execute, trim, trim_dict, get_path
 
 a_very_long_string = 'a' * 1024
@@ -100,3 +101,4 @@ class GetChainTest(TestCase):
         assert get_path({'a': 2}, ['b'], 1) == 1
         assert get_path({'a': {'b': []}}, ['a', 'b']) == []
         assert get_path({'a': []}, ['a', 'b']) is None
+        assert get_path(CanonicalKeyDict({'a': 2}), ['a']) == 2
