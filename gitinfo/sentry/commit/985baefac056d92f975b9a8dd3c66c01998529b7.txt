commit 985baefac056d92f975b9a8dd3c66c01998529b7
Author: Matej Minar <matej.minar@sentry.io>
Date:   Mon Mar 9 14:25:21 2020 +0100

    feat: Release v2 health API (#17281)
    
    This adds the health API connection to the release v2 page.

diff --git a/docs-ui/components/button.stories.js b/docs-ui/components/button.stories.js
index 7b28a1c724..bce31d7b4e 100644
--- a/docs-ui/components/button.stories.js
+++ b/docs-ui/components/button.stories.js
@@ -4,6 +4,7 @@ import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
 import {action} from '@storybook/addon-actions';
 import {boolean, number} from '@storybook/addon-knobs';
+
 import Button from 'app/components/button';
 import ButtonBar from 'app/components/buttonBar';
 import DropdownButton from 'app/components/dropdownButton';
diff --git a/docs-ui/components/columnEditor.stories.js b/docs-ui/components/columnEditor.stories.js
index cbfc8bfcbd..0be4e74c6d 100644
--- a/docs-ui/components/columnEditor.stories.js
+++ b/docs-ui/components/columnEditor.stories.js
@@ -1,8 +1,8 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
 import {action} from '@storybook/addon-actions';
+
 import {openModal} from 'app/actionCreators/modal';
 import Button from 'app/components/button';
 import GlobalModal from 'app/components/globalModal';
diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index 739e44a05f..1810520f52 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -1,24 +1,36 @@
 from __future__ import absolute_import
 
+from itertools import izip
+
 import six
 from django.db import IntegrityError, transaction
 from rest_framework.response import Response
+from rest_framework.exceptions import ParseError
 
 from sentry.api.bases import NoProjects, OrganizationEventsError
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
 from sentry.api.exceptions import InvalidRepository
-from sentry.api.paginator import OffsetPaginator
+from sentry.api.paginator import OffsetPaginator, MergingOffsetPaginator
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.release import ReleaseSerializer
 from sentry.api.serializers.rest_framework import (
     ReleaseHeadCommitSerializer,
     ReleaseHeadCommitSerializerDeprecated,
     ReleaseWithVersionSerializer,
     ListField,
 )
-from sentry.models import Activity, Release
+from sentry.models import Activity, Release, Project
 from sentry.signals import release_created
+from sentry.snuba.sessions import (
+    get_changed_project_release_model_adoptions,
+    get_project_releases_by_stability,
+)
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.utils.cache import cache
+
+
+ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
 
 
 @scenario("CreateNewOrganizationReleaseWithRef")
@@ -74,6 +86,47 @@ class ReleaseSerializerWithProjects(ReleaseWithVersionSerializer):
     refs = ListField(child=ReleaseHeadCommitSerializer(), required=False, allow_null=False)
 
 
+def debounce_update_release_health_data(organization, project_ids):
+    """This causes a flush of snuba health data to the postgres tables once
+    per minute for the given projects.
+    """
+    # Figure out which projects need to get updates from the snuba.
+    should_update = {}
+    cache_keys = ["debounce-health:%d" % id for id in project_ids]
+    cache_data = cache.get_many(cache_keys)
+    for project_id, cache_key in izip(project_ids, cache_keys):
+        if cache_data.get(cache_key) is None:
+            should_update[project_id] = cache_key
+
+    if not should_update:
+        return
+
+    projects = {p.id: p for p in Project.objects.get_many_from_cache(should_update.keys())}
+
+    # This gives us updates for all release-projects which have seen new
+    # health data over the last 24 hours. It will miss releases where the last
+    # date is <24h ago.  We need to aggregate the data for the totals per release
+    # manually here now.  This does not take environments into account.
+    for project_id, version in get_changed_project_release_model_adoptions(should_update.keys()):
+        project = projects.get(project_id)
+        if project is None:
+            # should not happen
+            continue
+
+        # We might have never observed the release.  This for instance can
+        # happen if the release only had health data so far.  For these cases
+        # we want to create the release the first time we observed it on the
+        # health side.
+        release = Release.get_or_create(project=project, version=version)
+
+        # Make sure that the release knows about this project.  Like we had before
+        # the project might not have been associated with this release yet.
+        release.add_project(project)
+
+    # Debounce updates for a minute
+    cache.set_many(dict(izip(should_update.values(), [True] * len(should_update))), 60)
+
+
 class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, EnvironmentMixin):
     doc_section = DocSection.RELEASES
 
@@ -89,6 +142,17 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
                               "starts with" filter for the version.
         """
         query = request.GET.get("query")
+        with_health = request.GET.get("health") == "1"
+        flatten = request.GET.get("flatten") == "1"
+        sort = request.GET.get("sort") or "date"
+        stats_period = request.GET.get("healthStatsPeriod")
+        if stats_period not in (None, "", "24h", "14d"):
+            raise ParseError(detail=ERR_INVALID_STATS_PERIOD)
+        if stats_period is None and with_health:
+            stats_period = "24h"
+
+        paginator_cls = OffsetPaginator
+        paginator_kwargs = {}
 
         try:
             filter_params = self.get_filter_params(request, organization, date_filter_optional=True)
@@ -97,13 +161,13 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
         except OrganizationEventsError as e:
             return Response({"detail": six.text_type(e)}, status=400)
 
-        queryset = (
-            Release.objects.filter(
-                organization=organization, projects__id__in=filter_params["project_id"]
-            )
-            .select_related("owner")
-            .distinct()
-        )
+        # This should get us all the projects into postgres that have received
+        # health data in the last 24 hours.  If health data is not requested
+        # we don't upsert releases.
+        if with_health:
+            debounce_update_release_health_data(organization, filter_params["project_id"])
+
+        queryset = Release.objects.filter(organization=organization).select_related("owner")
 
         if "environment" in filter_params:
             queryset = queryset.filter(
@@ -114,20 +178,60 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
         if query:
             queryset = queryset.filter(version__istartswith=query)
 
-        sort_query = "COALESCE(sentry_release.date_released, sentry_release.date_added)"
-        queryset = queryset.extra(select={"sort": sort_query})
+        select_extra = {}
+        sort_query = None
+
+        if flatten:
+            select_extra["_for_project_id"] = "sentry_release_project.project_id"
+        else:
+            queryset = queryset.distinct()
+
+        if sort == "date":
+            sort_query = "COALESCE(sentry_release.date_released, sentry_release.date_added)"
+        elif sort in ("crash_free_sessions", "crash_free_users", "sessions_1h", "sessions_24h"):
+            if not flatten:
+                return Response(
+                    {"detail": "sorting by crash statistics requires flattening (flatten=1)"},
+                    status=400,
+                )
+            paginator_cls = MergingOffsetPaginator
+            paginator_kwargs.update(
+                data_load_func=lambda offset, limit: get_project_releases_by_stability(
+                    project_ids=filter_params["project_id"],
+                    environments=filter_params.get("environment"),
+                    scope=sort,
+                    offset=offset,
+                    limit=limit,
+                ),
+                apply_to_queryset=lambda queryset, rows: queryset.filter(
+                    projects__id__in=list(x[0] for x in rows), version__in=list(x[1] for x in rows)
+                ),
+                key_from_model=lambda x: (x._for_project_id, x.version),
+            )
+        else:
+            return Response({"detail": "invalid sort"}, status=400)
+
+        if sort_query is not None:
+            queryset = queryset.filter(projects__id__in=filter_params["project_id"])
+            select_extra["sort"] = sort_query
+            paginator_kwargs["order_by"] = "-sort"
+
+        queryset = queryset.extra(select=select_extra)
         if filter_params["start"] and filter_params["end"]:
             queryset = queryset.extra(
-                where=["%s BETWEEN %%s and %%s" % sort_query],
+                where=[
+                    "COALESCE(sentry_release.date_released, sentry_release.date_added) BETWEEN %s and %s"
+                ],
                 params=[filter_params["start"], filter_params["end"]],
             )
 
+        serializer = ReleaseSerializer(with_health_data=with_health, stats_period=stats_period)
         return self.paginate(
             request=request,
             queryset=queryset,
-            order_by="-sort",
-            paginator_cls=OffsetPaginator,
-            on_results=lambda x: serialize(x, request.user),
+            paginator_cls=paginator_cls,
+            on_results=lambda x: serialize(x, request.user, serializer=serializer),
+            **paginator_kwargs
         )
 
     @attach_scenarios([create_new_org_release_ref_scenario, create_new_org_release_commit_scenario])
diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index f25a2652a4..21bfef6dd6 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -255,6 +255,70 @@ class OffsetPaginator(object):
         return CursorResult(results=results, next=next_cursor, prev=prev_cursor)
 
 
+class MergingOffsetPaginator(OffsetPaginator):
+    """This paginator uses a function to first look up items from an
+    independently paginated resource to only then fall back to a query set.
+    This is for instance useful if you want to query snuba for the primary
+    sort order and then look up data in postgres.
+    """
+
+    def __init__(
+        self,
+        queryset,
+        data_load_func,
+        apply_to_queryset,
+        key_from_model=None,
+        key_from_data=None,
+        max_limit=MAX_LIMIT,
+        on_results=None,
+    ):
+        super(MergingOffsetPaginator, self).__init__(
+            queryset, max_limit=max_limit, on_results=on_results
+        )
+        self.data_load_func = data_load_func
+        self.apply_to_queryset = apply_to_queryset
+        self.key_from_model = key_from_model or (lambda x: x.id)
+        self.key_from_data = key_from_data or (lambda x: x)
+
+    def get_result(self, limit=100, cursor=None):
+        if cursor is None:
+            cursor = Cursor(0, 0, 0)
+
+        limit = min(limit, self.max_limit)
+
+        page = cursor.offset
+        offset = cursor.offset * cursor.value
+        limit = (cursor.value or limit) + 1
+
+        if self.max_offset is not None and offset >= self.max_offset:
+            raise BadPaginationError("Pagination offset too large")
+        if offset < 0:
+            raise BadPaginationError("Pagination offset cannot be negative")
+
+        primary_results = self.data_load_func(offset=offset, limit=limit)
+
+        queryset = self.apply_to_queryset(self.queryset, primary_results)
+
+        mapping = {}
+        for model in queryset:
+            mapping[self.key_from_model(model)] = model
+
+        results = []
+        for row in primary_results:
+            model = mapping.get(self.key_from_data(row))
+            if model is not None:
+                results.append(model)
+
+        next_cursor = Cursor(limit, page + 1, False, len(primary_results) > limit)
+        prev_cursor = Cursor(limit, page - 1, True, page > 0)
+        results = list(results[:limit])
+
+        if self.on_results:
+            results = self.on_results(results)
+
+        return CursorResult(results=results, next=next_cursor, prev=prev_cursor)
+
+
 def reverse_bisect_left(a, x, lo=0, hi=None):
     """\
     Similar to ``bisect.bisect_left``, but expects the data in the array ``a``
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index fdaff395ad..25818a55b6 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -2,13 +2,14 @@ from __future__ import absolute_import
 
 import six
 
-
 from collections import defaultdict
+
 from django.db.models import Sum
 
 from sentry import tagstore
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.db.models.query import in_iexact
+from sentry.snuba.sessions import get_release_health_data_overview
 from sentry.models import (
     Commit,
     CommitAuthor,
@@ -71,6 +72,11 @@ def get_users_for_authors(organization_id, authors, user=None):
 
 @register(Release)
 class ReleaseSerializer(Serializer):
+    def __init__(self, *args, **kwargs):
+        self.with_health_data = kwargs.pop("with_health_data", False)
+        self.stats_period = kwargs.pop("stats_period", None)
+        Serializer.__init__(self, *args, **kwargs)
+
     def _get_commit_metadata(self, item_list, user):
         """
         Returns a dictionary of release_id => commit metadata,
@@ -153,15 +159,34 @@ class ReleaseSerializer(Serializer):
             result[item] = {"last_deploy": deploys.get(item.last_deploy_id)}
         return result
 
+    def __get_project_id_list(self, item_list):
+        project_ids = set()
+        need_fallback = False
+
+        for release in item_list:
+            if release._for_project_id is not None:
+                project_ids.add(release._for_project_id)
+            else:
+                need_fallback = True
+
+        if not need_fallback:
+            return sorted(project_ids), True
+
+        return (
+            list(
+                ReleaseProject.objects.filter(release__in=item_list)
+                .values_list("project_id", flat=True)
+                .distinct()
+            ),
+            False,
+        )
+
     def __get_release_data_no_environment(self, project, item_list):
         if project is not None:
             project_ids = [project.id]
+            specialized = True
         else:
-            project_ids = list(
-                ReleaseProject.objects.filter(release__in=item_list)
-                .values_list("project_id", flat=True)
-                .distinct()
-            )
+            project_ids, specialized = self.__get_project_id_list(item_list)
 
         first_seen = {}
         last_seen = {}
@@ -174,21 +199,17 @@ class ReleaseSerializer(Serializer):
             first_seen[tv.value] = min(tv.first_seen, first_val) if first_val else tv.first_seen
             last_seen[tv.value] = max(tv.last_seen, last_val) if last_val else tv.last_seen
 
+        group_counts_by_release = {}
         if project is not None:
-            group_counts_by_release = dict(
-                ReleaseProject.objects.filter(project=project, release__in=item_list).values_list(
-                    "release_id", "new_groups"
-                )
-            )
+            for release_id, new_groups in ReleaseProject.objects.filter(
+                project=project, release__in=item_list
+            ).values_list("release_id", "new_groups"):
+                group_counts_by_release[release_id] = {project.id: new_groups}
         else:
-            # assume it should be a sum across release
-            # if no particular project specified
-            group_counts_by_release = dict(
-                ReleaseProject.objects.filter(release__in=item_list, new_groups__isnull=False)
-                .values("release_id")
-                .annotate(new_groups=Sum("new_groups"))
-                .values_list("release_id", "new_groups")
-            )
+            for project_id, release_id, new_groups in ReleaseProject.objects.filter(
+                release__in=item_list, new_groups__isnull=False
+            ).values_list("project_id", "release_id", "new_groups"):
+                group_counts_by_release.setdefault(release_id, {})[project_id] = new_groups
         return first_seen, last_seen, group_counts_by_release
 
     def __get_release_data_with_environment(self, project, item_list, environment):
@@ -203,12 +224,13 @@ class ReleaseSerializer(Serializer):
             first_seen[release_project_env.release.version] = release_project_env.first_seen
             last_seen[release_project_env.release.version] = release_project_env.last_seen
 
-        issue_counts_by_release = dict(
-            release_project_envs.values("release_id")
-            .annotate(new_issues_count=Sum("new_issues_count"))
-            .values_list("release_id", "new_issues_count")
-        )
-        return first_seen, last_seen, issue_counts_by_release
+        group_counts_by_release = {}
+        for project_id, release_id, new_groups in release_project_envs.annotate(
+            aggregated_new_issues_count=Sum("new_issues_count")
+        ).values_list("project_id", "release_id", "aggregated_new_issues_count"):
+            group_counts_by_release.setdefault(release_id, {})[project_id] = new_groups
+
+        return first_seen, last_seen, group_counts_by_release
 
     def get_attrs(self, item_list, user, **kwargs):
         project = kwargs.get("project")
@@ -231,24 +253,53 @@ class ReleaseSerializer(Serializer):
 
         release_projects = defaultdict(list)
         project_releases = ReleaseProject.objects.filter(release__in=item_list).values(
-            "release_id", "project__slug", "project__name"
+            "release_id", "release__version", "project__slug", "project__name", "project__id"
         )
-        for pr in project_releases:
-            release_projects[pr["release_id"]].append(
-                {"slug": pr["project__slug"], "name": pr["project__name"]}
+
+        if self.with_health_data:
+            health_data = get_release_health_data_overview(
+                [(pr["project__id"], pr["release__version"]) for pr in project_releases],
+                stats_period=self.stats_period,
             )
+        else:
+            health_data = None
+
+        for pr in project_releases:
+            pr_rv = {
+                "id": pr["project__id"],
+                "slug": pr["project__slug"],
+                "name": pr["project__name"],
+            }
+            if health_data is not None:
+                pr_rv["health_data"] = health_data.get((pr["project__id"], pr["release__version"]))
+            release_projects[pr["release_id"]].append(pr_rv)
 
         result = {}
         for item in item_list:
-            result[item] = {
+            single_release_projects = release_projects.get(item.id, [])
+
+            if item._for_project_id is not None:
+                single_release_projects = [
+                    x for x in single_release_projects if x["id"] == item._for_project_id
+                ]
+                release_new_groups = (issue_counts_by_release.get(item.id) or {}).get(
+                    item._for_project_id
+                ) or 0
+            else:
+                release_new_groups = sum((issue_counts_by_release.get(item.id) or {}).values())
+
+            p = {
                 "owner": owners[six.text_type(item.owner_id)] if item.owner_id else None,
-                "new_groups": issue_counts_by_release.get(item.id) or 0,
-                "projects": release_projects.get(item.id, []),
+                "new_groups": release_new_groups,
+                "projects": single_release_projects,
                 "first_seen": first_seen.get(item.version),
                 "last_seen": last_seen.get(item.version),
             }
-            result[item].update(release_metadata_attrs[item])
-            result[item].update(deploy_metadata_attrs[item])
+
+            p.update(release_metadata_attrs[item])
+            p.update(deploy_metadata_attrs[item])
+
+            result[item] = p
         return result
 
     def serialize(self, obj, attrs, user, **kwargs):
@@ -273,6 +324,27 @@ class ReleaseSerializer(Serializer):
                 "buildHash": info["build_hash"],
             }
 
+        def expose_health_data(data):
+            if not data:
+                return None
+            return {
+                "durationP50": data["duration_p50"],
+                "durationP90": data["duration_p90"],
+                "crashFreeUsers": data["crash_free_users"],
+                "crashFreeSessions": data["crash_free_sessions"],
+                "sessionsCrashed": data["sessions_crashed"],
+                "sessionsErrored": data["sessions_errored"],
+                "totalUsers": data["total_users"],
+                "adoption": data["adoption"],
+                "stats": data.get("stats"),
+            }
+
+        def expose_project(project):
+            rv = {"id": project["id"], "slug": project["slug"], "name": project["name"]}
+            if "health_data" in project:
+                rv["healthData"] = expose_health_data(project["health_data"])
+            return rv
+
         d = {
             "version": obj.version,
             "shortVersion": obj.version,
@@ -289,7 +361,7 @@ class ReleaseSerializer(Serializer):
             "deployCount": obj.total_deploys,
             "lastDeploy": attrs.get("last_deploy"),
             "authors": attrs.get("authors", []),
-            "projects": attrs.get("projects", []),
+            "projects": [expose_project(p) for p in attrs.get("projects", [])],
             "firstEvent": attrs.get("first_seen"),
             "lastEvent": attrs.get("last_seen"),
         }
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 5bdf6500f0..d9489f0f85 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -86,6 +86,13 @@ class Release(Model):
     total_deploys = BoundedPositiveIntegerField(null=True, default=0)
     last_deploy_id = BoundedPositiveIntegerField(null=True)
 
+    # HACK HACK HACK
+    # As a transitionary step we permit release rows to exist multiple times
+    # where they are "specialized" for a specific project.  The goal is to
+    # later split up releases by project again.  This is for instance used
+    # by the org release listing.
+    _for_project_id = None
+
     class Meta:
         app_label = "sentry"
         db_table = "sentry_release"
@@ -93,6 +100,13 @@ class Release(Model):
 
     __repr__ = sane_repr("organization_id", "version")
 
+    def __eq__(self, other):
+        """Make sure that specialized releases are only comparable to the same
+        other specialized release.  This for instance lets us treat them
+        separately for serialization purposes.
+        """
+        return Model.__eq__(self, other) and self._for_project_id == other._for_project_id
+
     @staticmethod
     def is_valid_version(value):
         return not (
diff --git a/src/sentry/snuba/dataset.py b/src/sentry/snuba/dataset.py
index c02d162b6e..7b29c39c39 100644
--- a/src/sentry/snuba/dataset.py
+++ b/src/sentry/snuba/dataset.py
@@ -10,3 +10,4 @@ class Dataset(Enum):
     Discover = "discover"
     Outcomes = "outcomes"
     OutcomesRaw = "outcomes_raw"
+    Sessions = "sessions"
diff --git a/src/sentry/snuba/sessions.py b/src/sentry/snuba/sessions.py
new file mode 100644
index 0000000000..d6105b31f5
--- /dev/null
+++ b/src/sentry/snuba/sessions.py
@@ -0,0 +1,172 @@
+from __future__ import absolute_import
+
+import pytz
+from datetime import datetime, timedelta
+
+from sentry.utils.snuba import raw_query, parse_snuba_datetime
+from sentry.utils.dates import to_timestamp
+from sentry.snuba.dataset import Dataset
+
+
+def _get_conditions_and_filter_keys(project_releases, environments):
+    conditions = [["release", "IN", list(x[1] for x in project_releases)]]
+    if environments is not None:
+        conditions.append(["environment", "IN", environments])
+    filter_keys = {"project_id": list(set(x[0] for x in project_releases))}
+    return conditions, filter_keys
+
+
+def get_changed_project_release_model_adoptions(project_ids):
+    """Returns the last 48 hours worth of releases."""
+    start = datetime.now(pytz.utc) - timedelta(days=2)
+    rv = []
+
+    # Find all releases with adoption in the last 24 hours
+    for x in raw_query(
+        dataset=Dataset.Sessions,
+        selected_columns=["project_id", "release", "users"],
+        groupby=["release", "project_id"],
+        start=start,
+        filter_keys={"project_id": project_ids},
+    )["data"]:
+        rv.append((x["project_id"], x["release"]))
+
+    return rv
+
+
+def get_project_releases_by_stability(project_ids, offset, limit, scope, environments=None):
+    """Given some project IDs returns adoption rates that should be updated
+    on the postgres tables.
+    """
+    orderby, delta = {
+        "crash_free_sessions": ([["divide", ["sessions_crashed", "sessions"]]], timedelta(days=1)),
+        "crash_free_users": ([["divide", ["users_crashed", "users"]]], timedelta(days=1)),
+        "sessions_1h": (["sessions"], timedelta(hours=1)),
+        "sessions_24h": (["sessions"], timedelta(days=1)),
+    }[scope]
+    start = datetime.utcnow() - delta
+
+    conditions = []
+    if environments is not None:
+        conditions.append(["environment", "IN", environments])
+    filter_keys = {"project_id": project_ids}
+    rv = []
+
+    for x in raw_query(
+        dataset=Dataset.Sessions,
+        selected_columns=["project_id", "release"],
+        groupby=["release", "project_id"],
+        orderby=orderby,
+        start=start,
+        offset=offset,
+        limit=limit,
+        conditions=conditions,
+        filter_keys=filter_keys,
+    )["data"]:
+        rv.append((x["project_id"], x["release"]))
+
+    return rv
+
+
+def _make_stats(start, rollup, buckets):
+    rv = []
+    start = int(to_timestamp(start) // rollup) * rollup
+    for x in range(buckets):
+        rv.append([start, 0])
+        start += rollup
+    return rv
+
+
+def get_release_health_data_overview(project_releases, environments=None, stats_period=None):
+    """Checks quickly for which of the given project releases we have
+    health data available.  The argument is a tuple of `(project_id, release_name)`
+    tuples.  The return value is a set of all the project releases that have health
+    data.
+    """
+
+    def _nan_as_none(val):
+        return None if val != val else val
+
+    yesterday = datetime.now(pytz.utc) - timedelta(days=1)
+    conditions, filter_keys = _get_conditions_and_filter_keys(project_releases, environments)
+
+    if stats_period == "24h":
+        stats_rollup = 3600
+        stats_start = yesterday
+        stats_buckets = 24
+    elif stats_period == "14d":
+        stats_rollup = 86400
+        stats_start = datetime.now(pytz.utc) - timedelta(days=14)
+        stats_buckets = 14
+    elif not stats_period:
+        stats_rollup = None
+        stats_start = None
+    else:
+        raise TypeError("Invalid stats period")
+
+    total_users_24h = {}
+    for x in raw_query(
+        dataset=Dataset.Sessions,
+        selected_columns=["release", "users"],
+        groupby=["release", "project_id"],
+        start=yesterday,
+        conditions=conditions,
+        filter_keys=filter_keys,
+    )["data"]:
+        total_users_24h[x["project_id"]] = x["users"]
+
+    rv = {}
+    for x in raw_query(
+        dataset=Dataset.Sessions,
+        selected_columns=[
+            "release",
+            "project_id",
+            "duration_quantiles",
+            "users",
+            "sessions",
+            "sessions_errored",
+            "sessions_crashed",
+            "users_crashed",
+        ],
+        groupby=["release", "project_id"],
+        start=yesterday,
+        conditions=conditions,
+        filter_keys=filter_keys,
+    )["data"]:
+        total_users = total_users_24h.get(x["project_id"])
+        rp = {
+            "duration_p50": _nan_as_none(x["duration_quantiles"][0]),
+            "duration_p90": _nan_as_none(x["duration_quantiles"][1]),
+            "crash_free_users": (
+                100 - x["users_crashed"] / float(x["users"]) * 100 if x["users"] else None
+            ),
+            "crash_free_sessions": (
+                100 - x["sessions_crashed"] / float(x["sessions"]) * 100 if x["sessions"] else None
+            ),
+            "total_users": x["users"],
+            "total_sessions": x["sessions"],
+            "sessions_crashed": x["sessions_crashed"],
+            "sessions_errored": x["sessions_errored"],
+            "adoption": x["users"] / total_users * 100 if total_users and x["users"] else None,
+        }
+        if stats_period:
+            rp["stats"] = {stats_period: _make_stats(stats_start, stats_rollup, stats_buckets)}
+        rv[x["project_id"], x["release"]] = rp
+
+    if stats_period:
+        for x in raw_query(
+            dataset=Dataset.Sessions,
+            selected_columns=["release", "project_id", "bucketed_started", "sessions"],
+            groupby=["release", "project_id", "bucketed_started"],
+            rollup=stats_rollup,
+            start=stats_start,
+            conditions=conditions,
+            filter_keys=filter_keys,
+        )["data"]:
+            time_bucket = int(
+                (parse_snuba_datetime(x["bucketed_started"]) - stats_start).total_seconds()
+                / stats_rollup
+            )
+            rv[x["project_id"], x["release"]]["stats"][stats_period][time_bucket][1] = x["sessions"]
+
+    return rv
diff --git a/src/sentry/static/sentry/app/components/scoreBar.jsx b/src/sentry/static/sentry/app/components/scoreBar.jsx
index d3c3b75082..7c8acb9b1d 100644
--- a/src/sentry/static/sentry/app/components/scoreBar.jsx
+++ b/src/sentry/static/sentry/app/components/scoreBar.jsx
@@ -40,10 +40,10 @@ class ScoreBar extends React.Component {
 
     return (
       <div className={className}>
-        {[...Array(scoreInBounds)].map((j, i) => (
+        {[...Array(scoreInBounds)].map((_j, i) => (
           <Bar {...barProps} key={i} color={palette[paletteIndex]} />
         ))}
-        {[...Array(maxScore - scoreInBounds)].map((j, i) => (
+        {[...Array(maxScore - scoreInBounds)].map((_j, i) => (
           <Bar key={`empty-${i}`} {...barProps} empty />
         ))}
       </div>
@@ -71,4 +71,6 @@ const Bar = styled('div')`
   width: ${p => (!p.vertical ? p.thickness : p.size)}px;
   height: ${p => (!p.vertical ? p.size : p.thickness)}px;
 `;
+
+export {Bar, StyledScoreBar};
 export default StyledScoreBar;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index c35cf50bb0..e94578254f 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -128,12 +128,12 @@ export type ProjectRelease = {
 };
 
 export type Health = {
-  crash_free_users: number | null;
-  total_users: number;
-  crash_free_sessions: number | null;
+  crashFreeUsers: number | null;
+  totalUsers: number;
+  crashFreeSessions: number | null;
   stats: HealthGraphData;
-  crashes: number;
-  errors: number;
+  sessionsCrashed: number;
+  sessionsErrored: number;
   adoption: number | null;
 };
 export type HealthGraphData = {
diff --git a/src/sentry/static/sentry/app/views/releases/list/progressBar.jsx b/src/sentry/static/sentry/app/views/releases/list/progressBar.jsx
index 602d69bb4d..bffecb6f0a 100644
--- a/src/sentry/static/sentry/app/views/releases/list/progressBar.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/progressBar.jsx
@@ -33,4 +33,5 @@ const StyledSlider = styled('div')`
   bottom: 0;
   left: 0;
 `;
+
 export default ProgressBar;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index 3e9063d060..6a1fe06d0f 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -51,9 +51,16 @@ class ReleasesList extends AsyncView<Props, State> {
     const {organization, location} = this.props;
 
     const query = {
-      ...pick(location.query, [...Object.values(URL_PARAM), 'cursor', 'query', 'sort']),
+      ...pick(location.query, [
+        ...Object.values(URL_PARAM),
+        'cursor',
+        'query',
+        'sort',
+        'healthStatsPeriod',
+      ]),
       per_page: 50,
       health: 1,
+      flatten: 1,
     };
 
     return [['releases', `/organizations/${organization.slug}/releases/`, {query}]];
@@ -123,7 +130,7 @@ class ReleasesList extends AsyncView<Props, State> {
   }
 
   renderInnerBody() {
-    const {organization} = this.props;
+    const {organization, location} = this.props;
     const {loading, releases} = this.state;
 
     if (loading) {
@@ -144,6 +151,7 @@ class ReleasesList extends AsyncView<Props, State> {
               key={`${release.version}-${release.dateCreated}`}
               release={release}
               project={projects.find(p => p.slug === release.projectSlug)}
+              location={location}
             />
           ))
         }
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
index 0ea02b12b1..cb91bd4f4d 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseCard.tsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import styled from '@emotion/styled';
+import {Location} from 'history';
 
 import space from 'app/styles/space';
 import Count from 'app/components/count';
@@ -18,9 +19,10 @@ import ReleaseHealth from './releaseHealth';
 type Props = {
   release: ProjectRelease;
   project?: Project | AvatarProject;
+  location: Location;
 };
 
-const ReleaseCard = ({release, project}: Props) => (
+const ReleaseCard = ({release, project, location}: Props) => (
   // TODO(releasesv2): probably makes sense at this point to split the header and data to different files (move styles to share layout file)
   <Panel>
     <PanelBody>
@@ -86,7 +88,7 @@ const ReleaseCard = ({release, project}: Props) => (
       </StyledPanelItem>
     </PanelBody>
 
-    {release.healthData && <ReleaseHealth release={release} />}
+    {release.healthData && <ReleaseHealth release={release} location={location} />}
   </Panel>
 );
 
@@ -97,7 +99,7 @@ const StyledPanelItem = styled(PanelItem)`
 const Layout = styled('div')`
   display: grid;
   grid-template-areas: 'version projects commits created new-issues';
-  grid-template-columns: 3fr minmax(230px, 2fr) 4fr 1fr 1fr;
+  grid-template-columns: 3fr minmax(230px, 2fr) 4fr 160px 1fr;
   grid-column-gap: ${space(1.5)};
   width: 100%;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
index 6a568c2db6..45b876edce 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseHealth.tsx
@@ -1,37 +1,70 @@
 import React from 'react';
 import styled from '@emotion/styled';
+import {Location} from 'history';
 
+import Link from 'app/components/links/link';
 import {ProjectRelease} from 'app/types';
 import {PanelHeader, PanelBody, PanelItem} from 'app/components/panels';
-import {t, tn} from 'app/locale';
+import {t} from 'app/locale';
 import space from 'app/styles/space';
 import ProgressRing from 'app/components/progressRing';
 import Count from 'app/components/count';
 import {defined} from 'app/utils';
+import theme from 'app/utils/theme';
+import ScoreBar, {Bar} from 'app/components/scoreBar';
 
 import UsersChart from './usersChart';
-import {mockData} from './mock';
+import {displayCrashFreePercent, convertAdoptionToProgress} from '../utils';
 
 type Props = {
   release: ProjectRelease;
+  location: Location;
 };
 
-const ReleaseHealth = ({release}: Props) => {
+const ReleaseHealth = ({release, location}: Props) => {
+  const {pathname, query} = location;
+  const activeHealthStatsPeriod = (query.healthStatsPeriod || '24h') as '24h' | '14d';
   const {
     adoption,
-    total_users,
-    crash_free_users,
-    crash_free_sessions,
-    crashes,
-    errors,
+    stats,
+    crashFreeUsers,
+    crashFreeSessions,
+    sessionsCrashed,
+    sessionsErrored,
   } = release.healthData!;
 
-  // TODO(releasesv2): make dynamic once api is finished
+  const healthStatsPeriods = [
+    {
+      key: '24h',
+      label: t('24h'),
+    },
+    {
+      key: '14d',
+      label: t('14d'),
+    },
+  ];
+
   return (
     <React.Fragment>
       <StyledPanelHeader>
         <HeaderLayout>
-          <DailyUsersColumn>{t('Daily active users')}</DailyUsersColumn>
+          <DailyUsersColumn>
+            {t('Daily Sessions')}:
+            <StatsPeriodChanger>
+              {healthStatsPeriods.map(healthStatsPeriod => (
+                <StatsPeriod
+                  key={healthStatsPeriod.key}
+                  to={{
+                    pathname,
+                    query: {...query, healthStatsPeriod: healthStatsPeriod.key},
+                  }}
+                  active={activeHealthStatsPeriod === healthStatsPeriod.key}
+                >
+                  {healthStatsPeriod.label}
+                </StatsPeriod>
+              ))}
+            </StatsPeriodChanger>
+          </DailyUsersColumn>
           <AdoptionColumn>{t('Release adoption')}</AdoptionColumn>
           <CrashFreeUsersColumn>{t('Crash free users')}</CrashFreeUsersColumn>
           <CrashFreeSessionsColumn>{t('Crash free sessions')}</CrashFreeSessionsColumn>
@@ -45,28 +78,40 @@ const ReleaseHealth = ({release}: Props) => {
           <Layout>
             <DailyUsersColumn>
               <ChartWrapper>
-                <UsersChart data={mockData[0].graphData} height={20} statsPeriod="24h" />
+                <UsersChart
+                  data={stats}
+                  height={20}
+                  statsPeriod={activeHealthStatsPeriod}
+                />
               </ChartWrapper>
             </DailyUsersColumn>
 
             <AdoptionColumn>
               {defined(adoption) ? (
-                <React.Fragment>
-                  <ProgressRing value={adoption} />
-                  <ProgressRingCaption>
-                    {`${adoption}% ${tn('with %s user', 'with %s users', total_users)}`}
-                  </ProgressRingCaption>
-                </React.Fragment>
+                <ScoreBar
+                  score={convertAdoptionToProgress(adoption)}
+                  size={14}
+                  thickness={14}
+                  palette={[
+                    theme.red,
+                    theme.yellowOrange,
+                    theme.yellowOrange,
+                    theme.green,
+                    theme.green,
+                  ]}
+                />
               ) : (
                 '-'
               )}
             </AdoptionColumn>
 
             <CrashFreeUsersColumn>
-              {defined(crash_free_users) ? (
+              {defined(crashFreeUsers) ? (
                 <React.Fragment>
-                  <ProgressRing value={crash_free_users} />
-                  <ProgressRingCaption>{crash_free_users}%</ProgressRingCaption>
+                  <StyledProgressRing value={crashFreeUsers} />
+                  <ProgressRingCaption>
+                    {displayCrashFreePercent(crashFreeUsers)}
+                  </ProgressRingCaption>
                 </React.Fragment>
               ) : (
                 '-'
@@ -74,10 +119,12 @@ const ReleaseHealth = ({release}: Props) => {
             </CrashFreeUsersColumn>
 
             <CrashFreeSessionsColumn>
-              {defined(crash_free_sessions) ? (
+              {defined(crashFreeSessions) ? (
                 <React.Fragment>
-                  <ProgressRing value={crash_free_sessions} />
-                  <ProgressRingCaption>{crash_free_sessions}%</ProgressRingCaption>
+                  <StyledProgressRing value={crashFreeSessions} />
+                  <ProgressRingCaption>
+                    {displayCrashFreePercent(crashFreeSessions)}
+                  </ProgressRingCaption>
                 </React.Fragment>
               ) : (
                 '-'
@@ -85,11 +132,11 @@ const ReleaseHealth = ({release}: Props) => {
             </CrashFreeSessionsColumn>
 
             <CrashesColumn>
-              <Count value={crashes ?? 0} />
+              <Count value={sessionsCrashed ?? 0} />
             </CrashesColumn>
 
             <ErrorsColumn>
-              <Count value={errors ?? 0} />
+              <Count value={sessionsErrored ?? 0} />
             </ErrorsColumn>
           </Layout>
         </StyledPanelItem>
@@ -111,7 +158,7 @@ const StyledPanelHeader = styled(PanelHeader)`
 const Layout = styled('div')`
   display: grid;
   grid-template-areas: 'daily-users adoption crash-free-users crash-free-sessions crashes errors';
-  grid-template-columns: 3fr minmax(230px, 2fr) 2fr 2fr 1fr 1fr;
+  grid-template-columns: 3fr minmax(230px, 2fr) 2fr 2fr 160px 1fr;
   grid-column-gap: ${space(1.5)};
   width: 100%;
   align-items: center;
@@ -144,6 +191,7 @@ const CenterColumn = styled(Column)`
 const DailyUsersColumn = styled(Column)`
   grid-area: daily-users;
   display: flex;
+  align-items: flex-end;
   @media (max-width: ${p => p.theme.breakpoints[2]}) {
     display: none;
   }
@@ -153,6 +201,11 @@ const AdoptionColumn = styled(Column)`
   @media (max-width: ${p => p.theme.breakpoints[1]}) {
     display: none;
   }
+
+  ${Bar} {
+    /* TODO(releasesV2): this is still wip */
+    margin: 3px;
+  }
 `;
 const CrashFreeUsersColumn = styled(CenterColumn)`
   grid-area: crash-free-users;
@@ -181,15 +234,41 @@ const StyledPanelItem = styled(PanelItem)`
   padding-top: 0;
 `;
 
+const StyledProgressRing = styled(ProgressRing)`
+  position: relative;
+  top: ${space(0.5)};
+`;
+
 const ProgressRingCaption = styled('span')`
   margin-left: ${space(1)};
 `;
 
 const ChartWrapper = styled('div')`
+  flex: 1;
   margin-right: ${space(2)};
   g > .barchart-rect {
-    background: ${p => p.theme.gray2};
-    fill: ${p => p.theme.gray2};
+    /* TODO(releasesV2): figure out with design these colors */
+    background: #c6becf;
+    fill: #c6becf;
+  }
+`;
+
+const StatsPeriodChanger = styled('div')`
+  display: grid;
+  grid-template-columns: auto auto;
+  grid-column-gap: ${space(0.75)};
+  flex: 1;
+  justify-content: flex-end;
+  text-align: right;
+  margin-right: ${space(2)};
+  margin-left: ${space(0.5)};
+`;
+
+const StatsPeriod = styled(Link)<{active: boolean}>`
+  color: ${p => (p.active ? p.theme.gray3 : p.theme.gray2)};
+
+  &:hover {
+    color: ${p => (p.active ? p.theme.gray3 : p.theme.gray2)};
   }
 `;
 
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx
index 289ac39a8c..1d5bc9d029 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx
@@ -16,17 +16,17 @@ const ReleaseListSortOptions = ({selected = 'date', onSelect}: Props) => {
       label: t('Date Created'),
     },
     {
-      key: 'adoptionRate',
-      label: t('Adoption Rate'),
-    },
-    {
-      key: 'crashFreeUsers',
+      key: 'crash_free_users',
       label: t('Crash Free Users'),
     },
     {
-      key: 'crashFreeSessions',
+      key: 'crash_free_sessions',
       label: t('Crash Free Sessions'),
     },
+    {
+      key: 'sessions_24h',
+      label: t('Sessions in 24 Hours'),
+    },
   ];
 
   const label = (
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
index df6e3f3ae1..82c42dc07a 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/usersChart.tsx
@@ -45,7 +45,7 @@ class UsersChart extends React.Component<Props> {
         <BarChart
           points={chartData}
           height={height}
-          label={t('users')}
+          label={t('sessions')}
           minHeights={[3]}
           gap={1}
         />
diff --git a/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
new file mode 100644
index 0000000000..1688aa3d8b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
@@ -0,0 +1,16 @@
+import round from 'lodash/round';
+
+export const displayCrashFreePercent = (
+  percent: number,
+  decimalThreshold = 95,
+  decimalPlaces = 3
+): string => {
+  const rounded = round(percent, percent > decimalThreshold ? decimalPlaces : 0);
+
+  return `${rounded}%`;
+};
+
+export const convertAdoptionToProgress = (
+  percent: number,
+  numberOfProgressUnits = 5
+): number => Math.ceil((percent * numberOfProgressUnits) / 100);
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index e86b47e915..52ff390f19 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -80,6 +80,11 @@ DATASET_FIELDS = {
 }
 
 
+def parse_snuba_datetime(value):
+    """Parses a datetime value from snuba."""
+    return parse_datetime(value)
+
+
 class SnubaError(Exception):
     pass
 
@@ -307,7 +312,7 @@ def get_arrayjoin(column):
         return match.groups()[0]
 
 
-def get_query_params_to_update_for_projects(query_params):
+def get_query_params_to_update_for_projects(query_params, with_org=False):
     """
     Get the project ID and query params that need to be updated for project
     based datasets, before we send the query to Snuba.
@@ -334,7 +339,11 @@ def get_query_params_to_update_for_projects(query_params):
     # any project will do, as they should all be from the same organization
     organization_id = Project.objects.get_from_cache(pk=project_ids[0]).organization_id
 
-    return organization_id, {"project": project_ids}
+    params = {"project": project_ids}
+    if with_org:
+        params["organization"] = organization_id
+
+    return organization_id, params
 
 
 def get_query_params_to_update_for_organizations(query_params):
@@ -375,8 +384,10 @@ def _prepare_query_params(query_params):
             query_params.filter_keys, is_grouprelease=query_params.is_grouprelease
         )
 
-    if query_params.dataset in [Dataset.Events, Dataset.Discover]:
-        (organization_id, params_to_update) = get_query_params_to_update_for_projects(query_params)
+    if query_params.dataset in [Dataset.Events, Dataset.Discover, Dataset.Sessions]:
+        (organization_id, params_to_update) = get_query_params_to_update_for_projects(
+            query_params, with_org=query_params.dataset == Dataset.Sessions
+        )
     elif query_params.dataset in [Dataset.Outcomes, Dataset.OutcomesRaw]:
         (organization_id, params_to_update) = get_query_params_to_update_for_organizations(
             query_params
