commit 3c8146142823d4a857f5b7a84de2a612aa9559b4
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Sep 4 15:20:19 2019 -0700

    ref(user-feedback): Add empty state  (#14501)

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 2907c2ca49..3fee9390cb 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -28,6 +28,7 @@ from sentry.models import (
     ProjectTeam,
     Release,
     UserOption,
+    UserReport,
     DEFAULT_SUBJECT_TEMPLATE,
 )
 from sentry.utils.data_filters import FilterTypes
@@ -266,6 +267,10 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
     def get_attrs(self, item_list, user):
         attrs = super(ProjectSummarySerializer, self).get_attrs(item_list, user)
 
+        projects_with_user_reports = set(
+            UserReport.objects.filter(project_id__in=item_list).values_list("project", flat=True)
+        )
+
         project_envs = (
             EnvironmentProject.objects.filter(
                 project_id__in=[i.id for i in item_list],
@@ -329,8 +334,7 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
                 "dateFinished": date_finished,
             }
 
-        # We  just return the version key here so that we cut down on response
-        # size
+        # We just return the version key here so that we cut down on response size
         latest_release_verions = {
             release.actual_project_id: {"version": release.version}
             for release in bulk_fetch_project_latest_releases(item_list)
@@ -340,6 +344,7 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             attrs[item]["latest_release"] = latest_release_verions.get(item.id)
             attrs[item]["deploys"] = deploys_by_project.get(item.id)
             attrs[item]["environments"] = environments_by_project.get(item.id, [])
+            attrs[item]["has_user_reports"] = item.id in projects_with_user_reports
 
         return attrs
 
@@ -362,6 +367,7 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             "platforms": attrs["platforms"],
             "latestDeploys": attrs["deploys"],
             "latestRelease": attrs["latest_release"],
+            "hasUserReports": attrs["has_user_reports"],
         }
         if "stats" in attrs:
             context["stats"] = attrs["stats"]
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupUserFeedback.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupUserFeedback.jsx
index 45fe0eae04..f2f1590118 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupUserFeedback.jsx
@@ -1,16 +1,14 @@
 import React from 'react';
-import {Link} from 'react-router';
 import {isEqual} from 'lodash';
 
 import SentryTypes from 'app/sentryTypes';
 import EventUserFeedback from 'app/components/events/userFeedback';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import {t} from 'app/locale';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {Panel} from 'app/components/panels';
 import Pagination from 'app/components/pagination';
 import withOrganization from 'app/utils/withOrganization';
+import UserFeedbackEmpty from 'app/views/userFeedback/userFeedbackEmpty';
 import {fetchGroupUserReports} from './utils';
 
 class GroupUserFeedback extends React.Component {
@@ -62,12 +60,6 @@ class GroupUserFeedback extends React.Component {
       });
   };
 
-  getUserFeedbackUrl() {
-    const {organization, group} = this.props;
-
-    return `/${organization.slug}/${group.project.slug}/settings/user-feedback/`;
-  }
-
   render() {
     const {reportList} = this.state;
     const {organization, group} = this.props;
@@ -98,20 +90,9 @@ class GroupUserFeedback extends React.Component {
       );
     }
 
-    const emptyStateMessage = isEqual(this.props.params, {})
-      ? t('No user reports match your selected filters.')
-      : t('No user reports have been collected.');
-
     return (
       <Panel>
-        <EmptyStateWarning>
-          <p>{emptyStateMessage}</p>
-          <p>
-            <Link to={this.getUserFeedbackUrl()}>
-              {t('Learn how to integrate User Feedback')}
-            </Link>
-          </p>
-        </EmptyStateWarning>
+        <UserFeedbackEmpty projectIds={[group.project.id]} />
       </Panel>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
index 4a3a01b828..9bab14480b 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
@@ -1,14 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 import * as Sentry from '@sentry/browser';
 
-import {t, tct} from 'app/locale';
+import {t} from 'app/locale';
 import Access from 'app/components/acl/access';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import space from 'app/styles/space';
 import TextBlock from 'app/views/settings/components/text/textBlock';
 import formGroups from 'app/data/forms/userFeedback';
 
@@ -26,15 +28,12 @@ class ProjectUserFeedbackSettings extends AsyncView {
     window.sentryEmbedCallback = function(embed) {
       // Mock the embed's submit xhr to always be successful
       // NOTE: this will not have errors if the form is empty
-      embed.submit = function(body) {
+      embed.submit = function(_body) {
         this._submitInProgress = true;
-        setTimeout(
-          function() {
-            this._submitInProgress = false;
-            this.onSuccess();
-          }.bind(this),
-          500
-        );
+        setTimeout(() => {
+          this._submitInProgress = false;
+          this.onSuccess();
+        }, 500);
       };
     };
   }
@@ -66,31 +65,29 @@ class ProjectUserFeedbackSettings extends AsyncView {
         <SettingsPageHeader title={t('User Feedback')} />
         <TextBlock>
           {t(
-            'Enabling User Feedback allows you to interact with your users on an unprecedented level. Collect additional details about issues affecting them, and more importantly reach out to them with resolutions.'
+            `Don't rely on stack traces and graphs alone to understand
+            the cause and impact of errors. Enable User Feedback to collect
+            your users' comments when they encounter a crash or bug.`
           )}
         </TextBlock>
         <TextBlock>
           {t(
-            'When configured, your users will be presented with a dialog prompting them for additional information. That information will get attached to the issue in Sentry.'
+            `When configured, your users will be presented with a dialog prompting
+            them for additional information. That information will get attached to
+            the issue in Sentry.`
           )}
         </TextBlock>
-        <TextBlock>
-          {tct(
-            'A detailed guide how to integrate it with our different SDKs can be found in [link].',
-            {
-              link: (
-                <a href="https://docs.sentry.io/enriching-error-data/user-feedback/">
-                  our docs
-                </a>
-              ),
-            }
-          )}
-        </TextBlock>
-        <TextBlock>
+        <ButtonList>
+          <Button
+            external
+            href="https://docs.sentry.io/enriching-error-data/user-feedback/"
+          >
+            {t('Read the docs')}
+          </Button>
           <Button priority="primary" onClick={this.handleClick}>
-            {t('See the report dialog in action')}
+            {t('Open the report dialog')}
           </Button>
-        </TextBlock>
+        </ButtonList>
 
         <Form
           saveOnBlur
@@ -107,4 +104,11 @@ class ProjectUserFeedbackSettings extends AsyncView {
   }
 }
 
+const ButtonList = styled('div')`
+  display: inline-grid;
+  grid-auto-flow: column;
+  grid-gap: ${space(1)};
+  margin-bottom: ${space(2)};
+`;
+
 export default ProjectUserFeedbackSettings;
diff --git a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
index 18ff801b45..da9dcc9d27 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
@@ -5,7 +5,6 @@ import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import CompactIssue from 'app/components/issues/compactIssue';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
 import EventUserFeedback from 'app/components/events/userFeedback';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -15,6 +14,7 @@ import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 
 import UserFeedbackContainer from './container';
+import UserFeedbackEmpty from './userFeedbackEmpty';
 import {getQuery} from './utils';
 
 class OrganizationUserFeedback extends AsyncView {
@@ -61,11 +61,10 @@ class OrganizationUserFeedback extends AsyncView {
   }
 
   renderEmpty() {
-    return (
-      <EmptyStateWarning>
-        <p>{t('Sorry, no results match your search query.')}</p>
-      </EmptyStateWarning>
-    );
+    const {project} = this.props.location.query;
+    const projectIds = project ? [].concat(project) : [];
+
+    return <UserFeedbackEmpty projectIds={projectIds} />;
   }
 
   renderLoading() {
diff --git a/src/sentry/static/sentry/app/views/userFeedback/userFeedbackEmpty.jsx b/src/sentry/static/sentry/app/views/userFeedback/userFeedbackEmpty.jsx
new file mode 100644
index 0000000000..ab358b40c0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/userFeedback/userFeedbackEmpty.jsx
@@ -0,0 +1,192 @@
+import React from 'react';
+import styled from 'react-emotion';
+import PropTypes from 'prop-types';
+import * as Sentry from '@sentry/browser';
+
+import {t} from 'app/locale';
+import {trackAnalyticsEvent, trackAdhocEvent} from 'app/utils/analytics';
+import Button from 'app/components/button';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+import userFeedback from 'sentry-dreamy-components/dist/user-feedback.svg';
+import withOrganization from 'app/utils/withOrganization';
+
+class UserFeedbackEmpty extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    projectIds: PropTypes.arrayOf(PropTypes.string.isRequired),
+  };
+
+  componentDidMount() {
+    const {organization, projectIds} = this.props;
+
+    window.sentryEmbedCallback = function(embed) {
+      // Mock the embed's submit xhr to always be successful
+      // NOTE: this will not have errors if the form is empty
+      embed.submit = function(_body) {
+        this._submitInProgress = true;
+        setTimeout(() => {
+          this._submitInProgress = false;
+          this.onSuccess();
+        }, 500);
+      };
+    };
+
+    if (this.hasAnyFeedback === false) {
+      // send to reload only due to higher event volume
+      trackAdhocEvent({
+        eventKey: 'user_feedback.viewed',
+        org_id: parseInt(organization.id, 10),
+        projects: projectIds,
+      });
+    }
+  }
+
+  componentWillUnmount() {
+    window.sentryEmbedCallback = null;
+  }
+
+  get hasAnyFeedback() {
+    const {
+      organization: {projects},
+      projectIds,
+    } = this.props;
+
+    const selectedProjects =
+      projectIds && projectIds.length
+        ? projects.filter(({id}) => projectIds.includes(id))
+        : projects;
+
+    return selectedProjects.some(({hasUserReports}) => !!hasUserReports);
+  }
+
+  trackAnalytics({eventKey, eventName}) {
+    const {organization, projectIds} = this.props;
+
+    trackAnalyticsEvent({
+      eventKey,
+      eventName,
+      organization_id: organization.id,
+      projects: projectIds,
+    });
+  }
+
+  render() {
+    if (this.hasAnyFeedback === true) {
+      return (
+        <EmptyStateWarning>
+          <p>{t('Sorry, no user reports match your filters.')}</p>
+        </EmptyStateWarning>
+      );
+    }
+
+    return (
+      <UserFeedbackLanding>
+        <IllustrationContainer>
+          <CardComponentContainer>
+            <Illustration data={userFeedback} />
+          </CardComponentContainer>
+        </IllustrationContainer>
+
+        <StyledBox>
+          <h3>{t('No User Feedback Collected')}</h3>
+          <p>
+            {t(
+              `Don't rely on stack traces and graphs alone to understand
+              the cause and impact of errors. Enable User Feedback to collect
+              your users' comments when they encounter a crash or bug.`
+            )}
+          </p>
+          <ButtonList>
+            <Button
+              external
+              onClick={() =>
+                this.trackAnalytics({
+                  eventKey: 'user_feedback.docs_clicked',
+                  eventName: 'User Feedback Docs Clicked',
+                })
+              }
+              href="https://docs.sentry.io/enriching-error-data/user-feedback/"
+            >
+              {t('Read the docs')}
+            </Button>
+            <Button
+              priority="primary"
+              onClick={() => {
+                Sentry.showReportDialog({
+                  // should never make it to the Sentry API, but just in case, use throwaway id
+                  eventId: '00000000000000000000000000000000',
+                });
+
+                this.trackAnalytics({
+                  eventKey: 'user_feedback.dialog_opened',
+                  eventName: 'User Feedback Dialog Opened',
+                });
+              }}
+            >
+              {t('Open the report dialog')}
+            </Button>
+          </ButtonList>
+        </StyledBox>
+      </UserFeedbackLanding>
+    );
+  }
+}
+
+const UserFeedbackLanding = styled('div')`
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  flex-wrap: wrap;
+  min-height: 450px;
+  padding: ${space(1)};
+`;
+
+const StyledBox = styled('div')`
+  flex: 1;
+  padding: ${space(3)};
+`;
+
+const IllustrationContainer = styled(StyledBox)`
+  display: flex;
+  align-items: center;
+  justify-content: center;
+`;
+
+const CardComponentContainer = styled('div')`
+  width: 550px;
+  height: 340px;
+
+  img {
+    vertical-align: baseline;
+  }
+
+  @media (max-width: 1150px) {
+    font-size: ${p => p.theme.fontSizeMedium};
+    width: 450px;
+  }
+
+  @media (max-width: 1000px) {
+    font-size: ${p => p.theme.fontSizeSmall};
+    width: 320px;
+    max-height: 180px;
+  }
+`;
+
+const Illustration = styled(({data, className}) => (
+  <object data={data} className={className}>
+    <img src={data} className={className} />
+  </object>
+))`
+  width: 100%;
+  height: 100%;
+`;
+
+const ButtonList = styled('div')`
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));
+  grid-gap: ${space(1)};
+`;
+
+export default withOrganization(UserFeedbackEmpty);
diff --git a/tests/js/spec/views/userFeedback/organizationUserFeedback.spec.jsx b/tests/js/spec/views/userFeedback/organizationUserFeedback.spec.jsx
index 1c5fcbfd86..968cc0310e 100644
--- a/tests/js/spec/views/userFeedback/organizationUserFeedback.spec.jsx
+++ b/tests/js/spec/views/userFeedback/organizationUserFeedback.spec.jsx
@@ -5,11 +5,11 @@ import {OrganizationUserFeedback} from 'app/views/userFeedback/organizationUserF
 
 describe('OrganizationUserFeedback', function() {
   let organization, routerContext;
-  beforeEach(function() {
-    const pageLinks =
-      '<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", ' +
-      '<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:100:0>; rel="next"; results="true"; cursor="0:100:0"';
+  const pageLinks =
+    '<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", ' +
+    '<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:100:0>; rel="next"; results="true"; cursor="0:100:0"';
 
+  beforeEach(function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/user-feedback/',
       body: [TestStubs.UserFeedback()],
@@ -49,4 +49,80 @@ describe('OrganizationUserFeedback', function() {
 
     expect(wrapper.find('CompactIssue')).toHaveLength(1);
   });
+
+  it('renders no project message', function() {
+    const params = {
+      organization: TestStubs.Organization({
+        projects: [],
+      }),
+      location: {query: {}, search: ''},
+      params: {
+        orgId: organization.slug,
+      },
+    };
+    const wrapper = mount(<OrganizationUserFeedback {...params} />, routerContext);
+
+    expect(wrapper.find('NoProjectMessage').exists()).toBe(true);
+    expect(wrapper.find('UserFeedbackEmpty').exists()).toBe(false);
+  });
+
+  it('renders empty state', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/user-feedback/',
+      body: [],
+    });
+
+    const params = {
+      organization: TestStubs.Organization({
+        projects: [TestStubs.Project({isMember: true})],
+      }),
+      location: {query: {}, search: ''},
+      params: {
+        orgId: organization.slug,
+      },
+    };
+    const wrapper = mount(<OrganizationUserFeedback {...params} />, routerContext);
+
+    expect(wrapper.find('UserFeedbackEmpty').prop('projectIds')).toEqual([]);
+  });
+
+  it('renders empty state with project query', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/user-feedback/',
+      body: [],
+    });
+
+    const params = {
+      organization: TestStubs.Organization({
+        projects: [TestStubs.Project({isMember: true})],
+      }),
+      location: {query: {project: '112'}, search: ''},
+      params: {
+        orgId: organization.slug,
+      },
+    };
+    const wrapper = mount(<OrganizationUserFeedback {...params} />, routerContext);
+
+    expect(wrapper.find('UserFeedbackEmpty').prop('projectIds')).toEqual(['112']);
+  });
+
+  it('renders empty state with multi project query', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/user-feedback/',
+      body: [],
+    });
+
+    const params = {
+      organization: TestStubs.Organization({
+        projects: [TestStubs.Project({isMember: true})],
+      }),
+      location: {query: {project: ['112', '113']}, search: ''},
+      params: {
+        orgId: organization.slug,
+      },
+    };
+    const wrapper = mount(<OrganizationUserFeedback {...params} />, routerContext);
+
+    expect(wrapper.find('UserFeedbackEmpty').prop('projectIds')).toEqual(['112', '113']);
+  });
 });
diff --git a/tests/js/spec/views/userFeedback/userFeedbackEmpty.spec.jsx b/tests/js/spec/views/userFeedback/userFeedbackEmpty.spec.jsx
new file mode 100644
index 0000000000..637bb0d9f2
--- /dev/null
+++ b/tests/js/spec/views/userFeedback/userFeedbackEmpty.spec.jsx
@@ -0,0 +1,107 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import UserFeedbackEmpty from 'app/views/userFeedback/userFeedbackEmpty';
+
+describe('UserFeedbackEmpty', function() {
+  const routerContext = TestStubs.routerContext();
+  const project = TestStubs.Project({id: '1'});
+  const projectWithReports = TestStubs.Project({id: '2', hasUserReports: true});
+
+  it('renders empty', function() {
+    const organization = TestStubs.Organization();
+    mount(<UserFeedbackEmpty organization={organization} />, routerContext);
+  });
+
+  it('renders landing for project with no user feedback', function() {
+    const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
+    const wrapper = mount(
+      <UserFeedbackEmpty organization={organization} />,
+      routerContext
+    );
+
+    expect(wrapper.find('UserFeedbackLanding').exists()).toBe(true);
+  });
+
+  it('renders warning for project with any user feedback', function() {
+    const organization = TestStubs.Organization({
+      projects: [projectWithReports],
+    });
+    const wrapper = mount(
+      <UserFeedbackEmpty organization={organization} />,
+      routerContext
+    );
+
+    expect(wrapper.find('EmptyStateWarning').exists()).toBe(true);
+  });
+
+  it('renders warning for projects with any user feedback', function() {
+    const organization = TestStubs.Organization({
+      projects: [TestStubs.Project(), TestStubs.Project({hasUserReports: true})],
+    });
+    const wrapper = mount(
+      <UserFeedbackEmpty organization={organization} />,
+      routerContext
+    );
+
+    expect(wrapper.find('EmptyStateWarning').exists()).toBe(true);
+  });
+
+  it('renders warning for project query with user feedback', function() {
+    const organization = TestStubs.Organization({
+      projects: [project, projectWithReports],
+    });
+    const wrapper = mount(
+      <UserFeedbackEmpty
+        organization={organization}
+        projectIds={[projectWithReports.id]}
+      />,
+      routerContext
+    );
+
+    expect(wrapper.find('EmptyStateWarning').exists()).toBe(true);
+  });
+
+  it('renders landing for project query without any user feedback', function() {
+    const organization = TestStubs.Organization({
+      projects: [project, projectWithReports],
+    });
+    const wrapper = mount(
+      <UserFeedbackEmpty organization={organization} projectIds={[project.id]} />,
+      routerContext
+    );
+
+    expect(wrapper.find('UserFeedbackLanding').exists()).toBe(true);
+  });
+
+  it('renders warning for multi project query with any user feedback', function() {
+    const organization = TestStubs.Organization({
+      projects: [project, projectWithReports],
+    });
+    const wrapper = mount(
+      <UserFeedbackEmpty
+        organization={organization}
+        projectIds={[project.id, projectWithReports.id]}
+      />,
+      routerContext
+    );
+
+    expect(wrapper.find('EmptyStateWarning').exists()).toBe(true);
+  });
+
+  it('renders landing for multi project query without any user feedback', function() {
+    const projectWithoutReports = TestStubs.Project({id: '3'});
+    const organization = TestStubs.Organization({
+      projects: [project, projectWithoutReports],
+    });
+    const wrapper = mount(
+      <UserFeedbackEmpty
+        organization={organization}
+        projectIds={[project.id, projectWithoutReports.id]}
+      />,
+      routerContext
+    );
+
+    expect(wrapper.find('UserFeedbackEmpty').exists()).toBe(true);
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index fba462c5b8..4bf508f864 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -69,7 +69,7 @@ class OrganizationDetailsTest(APITestCase):
 
         # TODO(dcramer): we need to pare this down -- lots of duplicate queries
         # for membership data
-        with self.assertNumQueries(35, using="default"):
+        with self.assertNumQueries(36, using="default"):
             from django.db import connections
 
             response = self.client.get(url, format="json")
diff --git a/tests/sentry/api/serializers/test_project.py b/tests/sentry/api/serializers/test_project.py
index b3ddcf2e5e..bcd2aa97dd 100644
--- a/tests/sentry/api/serializers/test_project.py
+++ b/tests/sentry/api/serializers/test_project.py
@@ -22,6 +22,7 @@ from sentry.models import (
     EnvironmentProject,
     Release,
     ReleaseProjectEnvironment,
+    UserReport,
 )
 from sentry.testutils import TestCase
 
@@ -211,6 +212,28 @@ class ProjectSummarySerializerTest(TestCase):
         assert result["latestRelease"] == {"version": self.release.version}
         assert result["environments"] == ["production", "staging"]
 
+    def test_user_reports(self):
+        result = serialize(self.project, self.user, ProjectSummarySerializer())
+        assert result["hasUserReports"] is False
+
+        UserReport.objects.create(
+            project=self.project,
+            event_id="1",
+            name="foo",
+            email="bar@example.com",
+            comments="It broke!",
+        )
+        UserReport.objects.create(
+            project=self.project,
+            event_id="2",
+            name="foo",
+            email="bar@example.com",
+            comments="It broke again!",
+        )
+
+        result = serialize(self.project, self.user, ProjectSummarySerializer())
+        assert result["hasUserReports"] is True
+
     def test_no_enviroments(self):
         # remove environments and related models
         Deploy.objects.all().delete()
