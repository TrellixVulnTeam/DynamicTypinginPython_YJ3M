commit 6af44913899f3ebe053a58a11f01b718aec4e173
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Nov 18 16:04:19 2019 -0800

    chore(ts): Convert organizationMembersList (#15599)

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 16cc32b7f4..daffa3a303 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -587,7 +587,7 @@ function routes() {
         <Route component={OrganizationMembersWrapper}>
           <IndexRoute
             componentPromise={() =>
-              import(/* webpackChunkName: "OrganizationMembers" */ 'app/views/settings/organizationMembers')
+              import(/* webpackChunkName: "OrganizationMembersList" */ 'app/views/settings/organizationMembers/organizationMembersList')
             }
             component={errorHandler(LazyLoad)}
           />
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
deleted file mode 100644
index 9a8c9f60f4..0000000000
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
+++ /dev/null
@@ -1,245 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import debounce from 'lodash/debounce';
-
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import {t, tct} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import ConfigStore from 'app/stores/configStore';
-import Pagination from 'app/components/pagination';
-import routeTitleGen from 'app/utils/routeTitle';
-import SentryTypes from 'app/sentryTypes';
-import {redirectToRemainingOrganization} from 'app/actionCreators/organizations';
-import withOrganization from 'app/utils/withOrganization';
-
-import OrganizationMemberRow from './organizationMemberRow';
-
-class OrganizationMembersView extends AsyncView {
-  static propTypes = {
-    routes: PropTypes.array,
-  };
-
-  static contextTypes = {
-    router: PropTypes.object.isRequired,
-    organization: SentryTypes.Organization,
-  };
-
-  componentWillReceiveProps(nextProps, nextContext) {
-    super.componentWillReceiveProps(nextProps, nextContext);
-    const searchQuery = nextProps.location.query.query;
-    if (searchQuery !== this.props.location.query.query) {
-      this.setState({searchQuery});
-    }
-  }
-
-  // XXX(billy): setState causes re-render of the entire view...
-  // we should not do this
-  getDefaultState() {
-    const state = super.getDefaultState();
-    return {
-      ...state,
-      members: [],
-      invited: new Map(),
-      searchQuery: this.props.location.query.query || '',
-    };
-  }
-
-  getEndpoints() {
-    return [
-      [
-        'members',
-        `/organizations/${this.props.params.orgId}/members/`,
-        {
-          query: {
-            query: this.props.location.query.query,
-          },
-        },
-        {paginate: true},
-      ],
-      [
-        'authProvider',
-        `/organizations/${this.props.params.orgId}/auth-provider/`,
-        {},
-        {
-          allowError: error => {
-            // Allow for 403s
-            return error.status === 403;
-          },
-        },
-      ],
-    ];
-  }
-
-  getTitle() {
-    const orgId = this.props.organization.slug;
-    return routeTitleGen(t('Members'), orgId, false);
-  }
-
-  removeMember = id => {
-    const {params} = this.props;
-    const {orgId} = params || {};
-
-    return new Promise((resolve, reject) => {
-      this.api.request(`/organizations/${orgId}/members/${id}/`, {
-        method: 'DELETE',
-        data: {},
-        success: data => {
-          this.setState(state => ({
-            members: state.members.filter(({id: existingId}) => existingId !== id),
-          }));
-          resolve(data);
-        },
-        error: err => reject(err),
-      });
-    });
-  };
-
-  handleRemove = ({id, name}) => {
-    const {organization} = this.props;
-    const {slug: orgName} = organization;
-
-    this.removeMember(id).then(
-      () =>
-        addSuccessMessage(
-          tct('Removed [name] from [orgName]', {
-            name,
-            orgName,
-          })
-        ),
-      () =>
-        addErrorMessage(
-          tct('Error removing [name] from [orgName]', {
-            name,
-            orgName,
-          })
-        )
-    );
-  };
-
-  handleLeave = ({id}) => {
-    const {organization} = this.props;
-    const {slug: orgName} = organization;
-
-    this.removeMember(id).then(
-      () => {
-        redirectToRemainingOrganization({orgId: orgName, removeOrg: true});
-
-        addSuccessMessage(
-          tct('You left [orgName]', {
-            orgName,
-          })
-        );
-      },
-      () =>
-        addErrorMessage(
-          tct('Error leaving [orgName]', {
-            orgName,
-          })
-        )
-    );
-  };
-
-  handleSendInvite = ({id}) => {
-    this.setState(state => ({
-      invited: state.invited.set(id, 'loading'),
-    }));
-
-    this.api.request(`/organizations/${this.props.params.orgId}/members/${id}/`, {
-      method: 'PUT',
-      data: {reinvite: 1},
-      success: () =>
-        this.setState(state => ({
-          invited: state.invited.set(id, 'success'),
-        })),
-      error: () => {
-        this.setState(state => ({
-          invited: state.invited.set(id, null),
-        }));
-        addErrorMessage(t('Error sending invite'));
-      },
-    });
-  };
-
-  handleChange = evt => {
-    const searchQuery = evt.target.value;
-    this.getMembers(searchQuery);
-    this.setState({searchQuery});
-  };
-
-  getMembers = debounce(searchQuery => {
-    const {params} = this.props;
-    const {orgId} = params || {};
-
-    this.api.request(`/organizations/${orgId}/members/?query=${searchQuery}`, {
-      method: 'GET',
-      success: (data, _, jqXHR) => {
-        this.handleRequestSuccess({stateKey: 'members', data, jqXHR});
-      },
-    });
-  }, 200);
-
-  renderBody() {
-    const {params, routes, organization} = this.props;
-    const {membersPageLinks, members} = this.state;
-    const {orgId} = params || {};
-    const {name: orgName, access} = organization;
-    const canAddMembers = access.indexOf('member:write') > -1;
-    const canRemove = access.indexOf('member:admin') > -1;
-    const currentUser = ConfigStore.get('user');
-    // Find out if current user is the only owner
-    const isOnlyOwner = !members.find(
-      ({role, email}) => role === 'owner' && email !== currentUser.email
-    );
-    // Only admins/owners can remove members
-    const requireLink = !!this.state.authProvider && this.state.authProvider.require_link;
-
-    return (
-      <React.Fragment>
-        <Panel data-test-id="org-member-list">
-          <PanelHeader hasButtons>
-            {t('Members')}
-
-            {this.renderSearchInput({
-              updateRoute: true,
-              placeholder: t('Search Members'),
-              className: 'search',
-            })}
-          </PanelHeader>
-
-          <PanelBody>
-            {members.map(member => {
-              return (
-                <OrganizationMemberRow
-                  routes={routes}
-                  params={params}
-                  key={member.id}
-                  member={member}
-                  status={this.state.invited.get(member.id)}
-                  orgId={orgId}
-                  orgName={orgName}
-                  memberCanLeave={!isOnlyOwner}
-                  currentUser={currentUser}
-                  canRemoveMembers={canRemove}
-                  canAddMembers={canAddMembers}
-                  requireLink={requireLink}
-                  onSendInvite={this.handleSendInvite}
-                  onRemove={this.handleRemove}
-                  onLeave={this.handleLeave}
-                />
-              );
-            })}
-            {members.length === 0 && (
-              <EmptyMessage>{t('No members found.')}</EmptyMessage>
-            )}
-          </PanelBody>
-        </Panel>
-
-        <Pagination pageLinks={membersPageLinks} />
-      </React.Fragment>
-    );
-  }
-}
-
-export default withOrganization(OrganizationMembersView);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
new file mode 100644
index 0000000000..c2dcaa736d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
@@ -0,0 +1,216 @@
+import React from 'react';
+
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import {Organization, Member} from 'app/types';
+import {t, tct} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import ConfigStore from 'app/stores/configStore';
+import Pagination from 'app/components/pagination';
+import routeTitleGen from 'app/utils/routeTitle';
+import SentryTypes from 'app/sentryTypes';
+import {redirectToRemainingOrganization} from 'app/actionCreators/organizations';
+import withOrganization from 'app/utils/withOrganization';
+
+import OrganizationMemberRow from './organizationMemberRow';
+
+type Props = AsyncView['props'] & {
+  organization: Organization;
+};
+
+type State = AsyncView['state'] & {
+  members: Member[];
+  invited: {[key: string]: 'loading' | 'success' | null};
+};
+
+class OrganizationMembersList extends AsyncView<Props, State> {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  get searchQuery() {
+    const {location} = this.props;
+
+    if (!location || !location.query.query) {
+      return '';
+    }
+
+    if (Array.isArray(location.query.query)) {
+      return location.query.query[0];
+    }
+
+    return location.query.query;
+  }
+
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      members: [],
+      invited: {},
+      searchQuery: this.searchQuery,
+    };
+  }
+
+  getEndpoints(): [
+    string,
+    string,
+    {query?: {query: string}},
+    {paginate?: boolean; allowError?: (error: any) => boolean}
+  ][] {
+    const {orgId} = this.props.params;
+
+    return [
+      [
+        'members',
+        `/organizations/${orgId}/members/`,
+        {
+          query: {
+            query: this.searchQuery,
+          },
+        },
+        {paginate: true},
+      ],
+      [
+        'authProvider',
+        `/organizations/${orgId}/auth-provider/`,
+        {},
+        {
+          // Allow for 403s
+          allowError: error => error.status === 403,
+        },
+      ],
+    ];
+  }
+
+  getTitle() {
+    const orgId = this.props.organization.slug;
+    return routeTitleGen(t('Members'), orgId, false);
+  }
+
+  removeMember = async (id: string) => {
+    const {orgId} = this.props.params;
+
+    await this.api.requestPromise(`/organizations/${orgId}/members/${id}/`, {
+      method: 'DELETE',
+      data: {},
+    });
+
+    this.setState(state => ({
+      members: state.members.filter(({id: existingId}) => existingId !== id),
+    }));
+  };
+
+  handleRemove = async ({id, name}: Member) => {
+    const {organization} = this.props;
+    const {slug: orgName} = organization;
+
+    try {
+      await this.removeMember(id);
+    } catch {
+      addErrorMessage(tct('Error removing [name] from [orgName]', {name, orgName}));
+      return;
+    }
+
+    addSuccessMessage(tct('Removed [name] from [orgName]', {name, orgName}));
+  };
+
+  handleLeave = async ({id}: Member) => {
+    const {organization} = this.props;
+    const {slug: orgName} = organization;
+
+    try {
+      await this.removeMember(id);
+    } catch {
+      addErrorMessage(tct('Error leaving [orgName]', {orgName}));
+      return;
+    }
+
+    redirectToRemainingOrganization({orgId: orgName, removeOrg: true});
+    addSuccessMessage(tct('You left [orgName]', {orgName}));
+  };
+
+  handleSendInvite = async ({id}: Member) => {
+    this.setState(state => ({
+      invited: {...state.invited, [id]: 'loading'},
+    }));
+
+    try {
+      await this.api.requestPromise(
+        `/organizations/${this.props.params.orgId}/members/${id}/`,
+        {method: 'PUT', data: {reinvite: 1}}
+      );
+    } catch {
+      this.setState(state => ({invited: {...state.invited, [id]: null}}));
+      addErrorMessage(t('Error sending invite'));
+      return;
+    }
+
+    this.setState(state => ({invited: {...state.invited, [id]: 'success'}}));
+  };
+
+  renderBody() {
+    const {params, router, organization} = this.props;
+    const {membersPageLinks, members} = this.state;
+    const {name: orgName, access} = organization;
+
+    const canAddMembers = access.includes('member:write');
+    const canRemove = access.includes('member:admin');
+    const currentUser = ConfigStore.get('user');
+
+    // Find out if current user is the only owner
+    const isOnlyOwner = !members.find(
+      ({role, email}) => role === 'owner' && email !== currentUser.email
+    );
+
+    // Only admins/owners can remove members
+    const requireLink = !!this.state.authProvider && this.state.authProvider.require_link;
+
+    return (
+      <React.Fragment>
+        <Panel data-test-id="org-member-list">
+          <PanelHeader hasButtons>
+            {t('Members')}
+
+            {this.renderSearchInput({
+              updateRoute: true,
+              placeholder: t('Search Members'),
+              className: 'search',
+            })}
+          </PanelHeader>
+
+          <PanelBody>
+            {members.map(member => {
+              return (
+                <OrganizationMemberRow
+                  routes={router.routes}
+                  params={params}
+                  key={member.id}
+                  member={member}
+                  status={this.state.invited[member.id]}
+                  orgId={params.orgId}
+                  orgName={orgName}
+                  memberCanLeave={!isOnlyOwner}
+                  currentUser={currentUser}
+                  canRemoveMembers={canRemove}
+                  canAddMembers={canAddMembers}
+                  requireLink={requireLink}
+                  onSendInvite={this.handleSendInvite}
+                  onRemove={this.handleRemove}
+                  onLeave={this.handleLeave}
+                />
+              );
+            })}
+            {members.length === 0 && (
+              <EmptyMessage>{t('No members found.')}</EmptyMessage>
+            )}
+          </PanelBody>
+        </Panel>
+
+        <Pagination pageLinks={membersPageLinks} />
+      </React.Fragment>
+    );
+  }
+}
+
+export default withOrganization(OrganizationMembersList);
diff --git a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMembersList.spec.jsx
similarity index 99%
rename from tests/js/spec/views/settings/organizationMembers/index.spec.jsx
rename to tests/js/spec/views/settings/organizationMembers/organizationMembersList.spec.jsx
index 590070b837..751f8b06a8 100644
--- a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMembersList.spec.jsx
@@ -4,7 +4,7 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 
 import {Client} from 'app/api';
 import ConfigStore from 'app/stores/configStore';
-import OrganizationMembers from 'app/views/settings/organizationMembers';
+import OrganizationMembers from 'app/views/settings/organizationMembers/organizationMembersList';
 import OrganizationsStore from 'app/stores/organizationsStore';
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 
@@ -18,7 +18,7 @@ describe('OrganizationMembers', function() {
     orgId: 'org-slug',
     orgName: 'Organization Name',
     status: '',
-    routes: [],
+    router: {routes: []},
     requireLink: false,
     memberCanLeave: false,
     canAddMembers: false,
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
index 6c6f62232b..486c8c1fc5 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
@@ -3,11 +3,12 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 
 import {openInviteMembersModal} from 'app/actionCreators/modal';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
-import OrganizationMembers from 'app/views/settings/organizationMembers';
+import OrganizationMembersList from 'app/views/settings/organizationMembers/organizationMembersList';
 import OrganizationMembersWrapper from 'app/views/settings/organizationMembers/organizationMembersWrapper';
 
 jest.mock('app/utils/analytics', () => ({
   trackAnalyticsEvent: jest.fn(),
+  metric: {mark: jest.fn()},
 }));
 jest.mock('app/actionCreators/modal', () => ({
   openInviteMembersModal: jest.fn(),
@@ -236,12 +237,12 @@ describe('OrganizationMembersWrapper', function() {
     });
     const wrapper = mountWithTheme(
       <OrganizationMembersWrapper organization={organization} {...defaultProps}>
-        <OrganizationMembers {...defaultProps} />
+        <OrganizationMembersList {...defaultProps} router={{routes: []}} />
       </OrganizationMembersWrapper>,
       TestStubs.routerContext()
     );
 
-    expect(wrapper.find('OrganizationMembersView').exists()).toBe(true);
+    expect(wrapper.find('OrganizationMembersList').exists()).toBe(true);
     expect(
       wrapper
         .find('PanelHeader')
