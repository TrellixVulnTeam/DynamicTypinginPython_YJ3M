commit 87b995036cfb378b206575c22e6ec849217d140c
Author: Mark Story <mark@sentry.io>
Date:   Fri Aug 23 11:18:43 2019 -0400

    fix(api) Don't fail on serialized users in notes (#14485)
    
    The issue note update API is currently storing Users in a gzipped dict,
    the API serializers are not prepared for this and fail when Users cannot
    be converted to JSON. Given that we don't store mentions when notes are
    created, I've opted to exclude mentions from the update result as well.
    
    Fixes SEN-957
    Fixes SENTRY-B2M

diff --git a/src/sentry/api/endpoints/group_notes_details.py b/src/sentry/api/endpoints/group_notes_details.py
index eb81d2fdd1..586decd497 100644
--- a/src/sentry/api/endpoints/group_notes_details.py
+++ b/src/sentry/api/endpoints/group_notes_details.py
@@ -45,9 +45,16 @@ class GroupNotesDetailsEndpoint(GroupEndpoint):
         serializer = NoteSerializer(data=request.data)
 
         if serializer.is_valid():
+            payload = serializer.validated_data
+            # TODO adding mentions to a note doesn't do subscriptions
+            # or notifications. Should it?
+            # Remove mentions as they shouldn't go into the database
+            payload.pop("mentions", [])
+
             # Would be nice to have a last_modified timestamp we could bump here
-            note.data.update(dict(serializer.validated_data))
+            note.data.update(dict(payload))
             note.save()
+
             if note.data.get("external_id"):
                 self.update_external_comment(request, group, note)
             return Response(serialize(note, request.user), status=200)
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
index 20ab7e35ea..0434d95968 100644
--- a/src/sentry/api/serializers/models/activity.py
+++ b/src/sentry/api/serializers/models/activity.py
@@ -87,6 +87,11 @@ class ActivitySerializer(Serializer):
             data = {"fingerprints": obj.data["fingerprints"], "destination": attrs["destination"]}
         else:
             data = obj.data
+            # XXX: We had a problem where Users were embedded into the mentions
+            # attribute of group notes which needs to be removed
+            # While group_note update has been fixed there are still many skunky comments
+            # in the database.
+            data.pop("mentions", None)
 
         return {
             "id": six.text_type(obj.id),
diff --git a/tests/sentry/api/endpoints/test_group_notes_details.py b/tests/sentry/api/endpoints/test_group_notes_details.py
index 7ebf91bf53..b4c41d3cb2 100644
--- a/tests/sentry/api/endpoints/test_group_notes_details.py
+++ b/tests/sentry/api/endpoints/test_group_notes_details.py
@@ -72,6 +72,31 @@ class GroupNotesDetailsTest(APITestCase):
         assert mock_update_comment.call_args[0][1] == self.user.id
         assert mock_update_comment.call_args[0][2] == activity
 
+    @responses.activate
+    def test_put_ignore_mentions(self):
+        GroupLink.objects.filter(group_id=self.group.id).delete()
+        self.login_as(user=self.user)
+
+        with self.tasks():
+            with self.feature("organizations:integrations-issue-sync"):
+                response = self.client.put(
+                    self.url,
+                    format="json",
+                    data={
+                        "text": "hi **@{}**".format(self.user.username),
+                        "mentions": ["user:{}".format(self.user.id)],
+                    },
+                )
+        assert response.status_code == 200, response.content
+
+        activity = Activity.objects.get(id=response.data["id"])
+        assert activity.user == self.user
+        assert activity.group == self.group
+        assert activity.data == {
+            "external_id": "123",
+            "text": "hi **@{}**".format(self.user.username),
+        }
+
     @patch("sentry.integrations.issues.IssueBasicMixin.update_comment")
     def test_put_no_external_id(self, mock_update_comment):
         del self.activity.data["external_id"]
