commit 091d883aaa62099d27e60d85ad15c2fa70b4a70c
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Apr 11 14:18:40 2018 -0700

    feat(api): Add dedicated organization avatar endpoint

diff --git a/src/sentry/api/endpoints/organization_avatar.py b/src/sentry/api/endpoints/organization_avatar.py
new file mode 100644
index 0000000000..d262f06db5
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_avatar.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from sentry.api.bases.avatar import AvatarMixin
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.models import OrganizationAvatar
+
+
+class OrganizationAvatarEndpoint(AvatarMixin, OrganizationEndpoint):
+    object_type = 'organization'
+    model = OrganizationAvatar
+
+    def get_avatar_filename(self, obj):
+        # for consistency with organization details endpoint
+        return '{}.png'.format(obj.slug)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e830223cdf..2e6ab99318 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -46,6 +46,7 @@ from .endpoints.organization_api_key_details import OrganizationApiKeyDetailsEnd
 from .endpoints.organization_auth_providers import OrganizationAuthProvidersEndpoint
 from .endpoints.organization_auth_provider_details import OrganizationAuthProviderDetailsEndpoint
 from .endpoints.organization_auth_provider_send_reminders import OrganizationAuthProviderSendRemindersEndpoint
+from .endpoints.organization_avatar import OrganizationAvatarEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_slugs import SlugsUpdateEndpoint
@@ -361,6 +362,11 @@ urlpatterns = patterns(
         OrganizationAuthProviderSendRemindersEndpoint.as_view(),
         name='sentry-api-0-organization-auth-provider-send-reminders'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/avatar/$',
+        OrganizationAvatarEndpoint.as_view(),
+        name='sentry-api-0-organization-avatar'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/config/integrations/$',
         OrganizationConfigIntegrationsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_avatar.py b/tests/sentry/api/endpoints/test_organization_avatar.py
new file mode 100644
index 0000000000..d0e5eb2bbf
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_avatar.py
@@ -0,0 +1,85 @@
+from __future__ import absolute_import
+
+import six
+
+from base64 import b64encode
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import OrganizationAvatar
+from sentry.testutils import APITestCase
+
+
+class OrganizationAvatarTest(APITestCase):
+    def test_get(self):
+        organization = self.organization  # force creation
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-organization-avatar',
+            kwargs={
+                'organization_slug': organization.slug,
+            }
+        )
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert response.data['id'] == six.text_type(organization.id)
+        assert response.data['avatar']['avatarType'] == 'letter_avatar'
+        assert response.data['avatar']['avatarUuid'] is None
+
+    def test_upload(self):
+        organization = self.organization  # force creation
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-organization-avatar',
+            kwargs={
+                'organization_slug': organization.slug,
+            }
+        )
+        response = self.client.put(
+            url,
+            data={
+                'avatar_type': 'upload',
+                'avatar_photo': b64encode(self.load_fixture('avatar.jpg')),
+            },
+            format='json'
+        )
+
+        avatar = OrganizationAvatar.objects.get(organization=organization)
+        assert response.status_code == 200, response.content
+        assert avatar.get_avatar_type_display() == 'upload'
+        assert avatar.file
+
+    def test_put_bad(self):
+        organization = self.organization  # force creation
+        OrganizationAvatar.objects.create(organization=organization)
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-organization-avatar',
+            kwargs={
+                'organization_slug': organization.slug,
+            }
+        )
+        response = self.client.put(url, data={'avatar_type': 'upload'}, format='json')
+
+        avatar = OrganizationAvatar.objects.get(organization=organization)
+        assert response.status_code == 400
+        assert avatar.get_avatar_type_display() == 'letter_avatar'
+
+        response = self.client.put(url, data={'avatar_type': 'foo'}, format='json')
+        assert response.status_code == 400
+        assert avatar.get_avatar_type_display() == 'letter_avatar'
+
+    def test_put_forbidden(self):
+        organization = self.organization  # force creation
+        user = self.create_user(email='a@example.com')
+
+        self.login_as(user=user)
+        url = reverse(
+            'sentry-api-0-organization-avatar',
+            kwargs={
+                'organization_slug': organization.slug,
+            }
+        )
+        response = self.client.put(url, data={'avatar_type': 'letter_avatar'}, format='json')
+
+        assert response.status_code == 403
