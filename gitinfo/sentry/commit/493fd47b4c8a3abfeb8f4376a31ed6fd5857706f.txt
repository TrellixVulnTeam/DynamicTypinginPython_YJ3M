commit 493fd47b4c8a3abfeb8f4376a31ed6fd5857706f
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 2 14:26:06 2017 -0700

    workflow: show latest release in resolve action

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index ee454f1dd3..6a919d9abe 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -9,7 +9,7 @@ from django.db.models.aggregates import Count
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.models import (
     Project, ProjectBookmark, ProjectOption, ProjectPlatform, ProjectStatus,
-    UserOption
+    Release, UserOption
 )
 
 STATUS_LABELS = {
@@ -77,6 +77,32 @@ class ProjectSerializer(Serializer):
         for project_id, num_issues in num_issues_projects:
             processing_issues_by_project[project_id] = num_issues
 
+        latest_release_list = list(Release.objects.raw("""
+            SELECT lr.project_id as actual_project_id, r.*
+            FROM (
+                SELECT (
+                    SELECT lrr.id FROM sentry_release lrr
+                    JOIN sentry_release_project lrp
+                    ON lrp.release_id = lrr.id
+                    WHERE lrp.project_id = p.id
+                    ORDER BY lrr.date_added DESC
+                    LIMIT 1
+                ) as release_id,
+                p.id as project_id
+                FROM sentry_project p
+                WHERE p.id IN ({})
+            ) as lr
+            JOIN sentry_release r
+            ON r.id = lr.release_id
+        """.format(
+            ', '.join(six.text_type(i.id) for i in item_list),
+        )))
+
+        latest_releases = {
+            r.actual_project_id: d
+            for r, d in zip(latest_release_list, serialize(latest_release_list, user))
+        }
+
         result = {}
         for item in item_list:
             result[item] = {
@@ -85,6 +111,7 @@ class ProjectSerializer(Serializer):
                     (item.id, 'mail:alert'),
                     default_subscribe,
                 )),
+                'latest_release': latest_releases.get(item.id),
                 'default_environment': default_environments.get(item.id),
                 'reviewed-callsign': reviewed_callsigns.get(item.id),
                 'platforms': platforms_by_project[item.id],
@@ -119,6 +146,7 @@ class ProjectSerializer(Serializer):
             'callSignReviewed': bool(attrs['reviewed-callsign']),
             'dateCreated': obj.date_added,
             'firstEvent': obj.first_event,
+            'latestRelease': attrs['latest_release'],
             'features': feature_list,
             'status': status_label,
             'platforms': attrs['platforms'],
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index 130fcff358..b70d593edd 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -13,11 +13,13 @@ import MenuItem from '../../components/menuItem';
 import LinkWithConfirmation from '../../components/linkWithConfirmation';
 import TooltipMixin from '../../mixins/tooltip';
 import {t} from '../../locale';
+import {getShortVersion} from '../../utils';
 
 const ResolveActions = React.createClass({
   propTypes: {
     group: React.PropTypes.object.isRequired,
     hasRelease: React.PropTypes.bool.isRequired,
+    latestRelease: React.PropTypes.object,
     onUpdate: React.PropTypes.func.isRequired,
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired
@@ -40,7 +42,7 @@ const ResolveActions = React.createClass({
   },
 
   render() {
-    let {group, hasRelease, onUpdate} = this.props;
+    let {group, hasRelease, latestRelease, onUpdate} = this.props;
     let resolveClassName = 'group-resolve btn btn-default btn-sm';
     if (group.status === 'resolved') {
       resolveClassName += ' active';
@@ -124,14 +126,18 @@ const ResolveActions = React.createClass({
                     onUpdate({
                       status: 'resolved',
                       statusDetails: {
-                        inRelease: 'latest'
+                        inRelease: latestRelease ? latestRelease.version : 'latest'
                       }
                     })
                   );
                 }}
                 className={actionClassName}
                 title={actionTitle}>
-                {t('The current release')}
+                {latestRelease ?
+                  t('The current release (%s)', getShortVersion(latestRelease.version))
+                :
+                  t('The current release')
+                }
               </a>
               <a
                 onClick={() => hasRelease && this.setState({modal: true})}
@@ -434,6 +440,7 @@ export default React.createClass({
         <ResolveActions
           group={group}
           hasRelease={hasRelease}
+          latestRelease={project.latestRelease}
           onUpdate={this.onUpdate}
           orgId={org.slug}
           projectId={project.slug}
