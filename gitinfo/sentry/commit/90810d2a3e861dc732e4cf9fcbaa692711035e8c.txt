commit 90810d2a3e861dc732e4cf9fcbaa692711035e8c
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Sep 30 11:16:25 2015 -0700

    Remove dead code, fix tabs vs spaces, other cleanup

diff --git a/src/sentry/static/sentry/app/actions/streamTagActions.jsx b/src/sentry/static/sentry/app/actions/streamTagActions.jsx
index 4ec43c4ec3..ebc0b4dd7f 100644
--- a/src/sentry/static/sentry/app/actions/streamTagActions.jsx
+++ b/src/sentry/static/sentry/app/actions/streamTagActions.jsx
@@ -4,8 +4,5 @@ import Reflux from "reflux";
 export default Reflux.createActions([
   "loadTags",
   "loadTagsError",
-  "loadTagsSuccess",
-  "loadTagValues",
-  "laodTagValuesError",
-  "loadTagValuesSuccess"
+  "loadTagsSuccess"
 ]);
diff --git a/src/sentry/static/sentry/app/api/tags.jsx b/src/sentry/static/sentry/app/api/tags.jsx
deleted file mode 100644
index 5249f744d9..0000000000
--- a/src/sentry/static/sentry/app/api/tags.jsx
+++ /dev/null
@@ -1,26 +0,0 @@
-import api from "../api";
-import StreamTagActions from "../actions/streamTagActions";
-
-export function fetchTags(params) {
-  StreamTagActions.loadTags();
-
-  return api.request(`/projects/${params.orgId}/${params.projectId}/tags/`, {
-    success: StreamTagActions.loadTagsSuccess,
-    error: StreamTagActions.loadTagsError
-  });
-}
-
-export function fetchTagValues(params, tagKey, query, onSuccess) {
-  StreamTagActions.loadTagValues();
-  return api.request(`/projects/${params.orgId}/${params.projectId}/tags/${tagKey}/values/`, {
-    data: {
-      query: query
-    },
-    method: "GET",
-    success: (values) => {
-      StreamTagActions.loadTagValuesSuccess(tagKey, values.map(v => '"' + v.value + '"'));
-      onSuccess && onSuccess(values);
-    },
-    error: StreamTagActions.loadTagValuesError
-  });
-}
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index 3458e7d401..a3d57014db 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -61,16 +61,6 @@ var StreamTagStore = Reflux.createStore({
     }));
   },
 
-  onLoadTagValuesSuccess(tagKey, data) {
-    let tag = this.tags[tagKey];
-    if (tag.values)
-      tag.values = _.unique(tag.values.concat(data));
-    else
-      tag.values = data;
-
-    this.trigger([tag]);
-  },
-
   onMemberListStoreChange(members) {
     let assignedTag = this.tags.assigned;
     assignedTag.values = MemberListStore.getAll().map(user => user.email);
diff --git a/src/sentry/static/sentry/app/utils/stream.jsx b/src/sentry/static/sentry/app/utils/stream.jsx
index e5490abfc4..0b1f1952a5 100644
--- a/src/sentry/static/sentry/app/utils/stream.jsx
+++ b/src/sentry/static/sentry/app/utils/stream.jsx
@@ -16,23 +16,23 @@ import _ from "underscore";
  */
 
 export function queryToObj(queryStr) {
-	var text = [];
+  var text = [];
 
-	let queryItems = queryStr.match(/\S+:"[^"]*"?|\S+/g);
-	let queryObj = _.inject(queryItems, (obj, item) => {
-	  let index = item.indexOf(':');
-	  if (index === -1) {
-	  	text.push(item);
-	  } else {
-		  let tagKey = item.slice(0, index);
-		  let value = item.slice(index + 1).replace(/^"|"$/g, '');
-		  obj[tagKey] = value;
-	  }
-	  return obj;
-	}, {});
+  let queryItems = queryStr.match(/\S+:"[^"]*"?|\S+/g);
+  let queryObj = _.inject(queryItems, (obj, item) => {
+    let index = item.indexOf(':');
+    if (index === -1) {
+      text.push(item);
+    } else {
+      let tagKey = item.slice(0, index);
+      let value = item.slice(index + 1).replace(/^"|"$/g, '');
+      obj[tagKey] = value;
+    }
+    return obj;
+  }, {});
 
-	if (text.length)
-		queryObj.__text = text.join(' ');
+  if (text.length)
+    queryObj.__text = text.join(' ');
 
-	return queryObj;
+  return queryObj;
 }
\ No newline at end of file
diff --git a/tests/js/spec/utils/stream.spec.jsx b/tests/js/spec/utils/stream.spec.jsx
index 57942cf3d2..eeae04ff70 100644
--- a/tests/js/spec/utils/stream.spec.jsx
+++ b/tests/js/spec/utils/stream.spec.jsx
@@ -1,34 +1,34 @@
 import {queryToObj} from "app/utils/stream";
 
 describe("utils/stream", function () {
-	describe("queryToObj()", function () {
-		it("should convert a basic query string to a query object", function () {
-			expect(queryToObj('is:unresolved')).to.eql({
-				is: 'unresolved'
-			});
+  describe("queryToObj()", function () {
+    it("should convert a basic query string to a query object", function () {
+      expect(queryToObj('is:unresolved')).to.eql({
+        is: 'unresolved'
+      });
 
-			expect(queryToObj('is:unresolved browser:"Chrome 36"')).to.eql({
-				is: 'unresolved',
-				browser: 'Chrome 36'
-			});
+      expect(queryToObj('is:unresolved browser:"Chrome 36"')).to.eql({
+        is: 'unresolved',
+        browser: 'Chrome 36'
+      });
 
-			expect(queryToObj('python is:unresolved browser:"Chrome 36"')).to.eql({
-				__text: 'python',
-				is: 'unresolved',
-				browser: 'Chrome 36'
-			});
-		});
+      expect(queryToObj('python is:unresolved browser:"Chrome 36"')).to.eql({
+        __text: 'python',
+        is: 'unresolved',
+        browser: 'Chrome 36'
+      });
+    });
 
-		it('should convert separate query tokens into a single __text property', function () {
-			expect(queryToObj('python    exception')).to.eql({
-				__text: 'python exception'
-			});
+    it('should convert separate query tokens into a single __text property', function () {
+      expect(queryToObj('python    exception')).to.eql({
+        __text: 'python exception'
+      });
 
-			// NOTE: "python exception" is extracted despite being broken up by "is:unresolved"
-			expect(queryToObj('python  is:unresolved exception')).to.eql({
-				__text: 'python exception',
-				is: 'unresolved'
-			});
-		});
-	});
+      // NOTE: "python exception" is extracted despite being broken up by "is:unresolved"
+      expect(queryToObj('python  is:unresolved exception')).to.eql({
+        __text: 'python exception',
+        is: 'unresolved'
+      });
+    });
+  });
 });
\ No newline at end of file
