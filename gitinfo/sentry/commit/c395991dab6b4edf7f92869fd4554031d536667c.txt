commit c395991dab6b4edf7f92869fd4554031d536667c
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Sep 7 15:11:52 2017 -0700

    fix(workflow): fix assignee selector loading (#6052)
    
    * fix(css): loading alignment of assignee selector
    
    * feat(react): add "center" prop to <FlowLayout>
    
    * feat(react): add "center" prop to <FlowLayout>
    
    * fix(workflow): fix assignee selector loading
    
    * problem was due to `shouldComponentUpdate`
    * now displays a loader if member list request does not finish before
    selector is first opened
    * still does NOT update assignee selector if `MemberListStore` loads new
    members
    * cleaned up deprecated react string refs
    
    Fixes GH-4434

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 7a42727c92..77a0cb2135 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -1,20 +1,21 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import ReactDOM from 'react-dom';
 import Reflux from 'reflux';
 import classNames from 'classnames';
+
+import {t} from '../locale';
+import {userDisplayName} from '../utils/formatters';
+import {valueIsEqual} from '../utils';
 import ApiMixin from '../mixins/apiMixin';
 import Avatar from '../components/avatar';
-import GroupStore from '../stores/groupStore';
 import ConfigStore from '../stores/configStore';
 import DropdownLink from './dropdownLink';
+import FlowLayout from './flowLayout';
+import GroupStore from '../stores/groupStore';
+import LoadingIndicator from '../components/loadingIndicator';
 import MemberListStore from '../stores/memberListStore';
 import MenuItem from './menuItem';
-import LoadingIndicator from '../components/loadingIndicator';
-import {userDisplayName} from '../utils/formatters';
-import {valueIsEqual} from '../utils';
 import TooltipMixin from '../mixins/tooltip';
-import {t} from '../locale';
 
 const AssigneeSelector = React.createClass({
   propTypes: {
@@ -32,6 +33,7 @@ const AssigneeSelector = React.createClass({
 
   statics: {
     filterMembers(memberList, filter) {
+      if (!memberList) return [];
       if (!filter) return memberList;
 
       filter = filter.toLowerCase();
@@ -62,7 +64,7 @@ const AssigneeSelector = React.createClass({
 
     return {
       assignedTo: group.assignedTo,
-      memberList: MemberListStore.getAll(),
+      memberList: MemberListStore.loaded ? MemberListStore.getAll() : null,
       filter: '',
       loading: false
     };
@@ -79,7 +81,6 @@ const AssigneeSelector = React.createClass({
     }
   },
 
-  // TODO(dcramer): this should check changes in member list
   shouldComponentUpdate(nextProps, nextState) {
     if (nextState.filter !== this.state.filter) {
       return true;
@@ -87,13 +88,26 @@ const AssigneeSelector = React.createClass({
     if (nextState.loading !== this.state.loading) {
       return true;
     }
+
+    // XXX(billyvg): this means that once `memberList` is not-null, this component will never update due to `memberList` changes
+    // Note: this allows us to show a "loading" state for memberList, but only before `MemberListStore.loadInitialData`
+    // is called
+    if (
+      this.state.memberList === null &&
+      nextState.memberList !== this.state.memberList
+    ) {
+      return true;
+    }
     return !valueIsEqual(nextState.assignedTo, this.state.assignedTo, true);
   },
 
   componentDidUpdate(prevProps, prevState) {
     // XXX(dcramer): fix odd dedraw issue as of Chrome 45.0.2454.15 dev (64-bit)
-    let node = jQuery(ReactDOM.findDOMNode(this.refs.container));
-    node.hide().show(0);
+    if (!this.containerRef) {
+      let node = jQuery(this.containerRef);
+      node.hide().show(0);
+    }
+
     let oldAssignee = prevState.assignedTo && prevState.assignedTo.id;
     let newAssignee = this.state.assignedTo && this.state.assignedTo.id;
     if (oldAssignee !== newAssignee) {
@@ -127,7 +141,8 @@ const AssigneeSelector = React.createClass({
 
   onFilterKeyUp(evt) {
     if (evt.key === 'Escape') {
-      this.refs.dropdown.close();
+      if (!this.dropdownRef) return;
+      this.dropdownRef.close();
     } else {
       this.setState({
         filter: evt.target.value
@@ -148,7 +163,9 @@ const AssigneeSelector = React.createClass({
   },
 
   onDropdownOpen() {
-    ReactDOM.findDOMNode(this.refs.filter).focus();
+    if (this.filterRef) {
+      this.filterRef.focus();
+    }
   },
 
   onDropdownClose() {
@@ -178,52 +195,41 @@ const AssigneeSelector = React.createClass({
   },
 
   render() {
-    let loading = this.state.loading;
-    let assignedTo = this.state.assignedTo;
+    let {loading, assignedTo, filter, memberList} = this.state;
+    let memberListLoading = this.state.memberList === null;
 
-    let className = 'assignee-selector anchor-right';
-    if (!assignedTo) {
-      className += ' unassigned';
-    }
+    let className = classNames('assignee-selector anchor-right', {
+      unassigned: !assignedTo
+    });
 
-    let members = AssigneeSelector.filterMembers(
-      this.state.memberList,
-      this.state.filter
-    );
+    let members = AssigneeSelector.filterMembers(memberList, filter);
     members = AssigneeSelector.putSessionUserFirst(members);
 
-    let memberNodes = members.map(item => {
-      return (
-        <MenuItem
-          key={item.id}
-          disabled={loading}
-          onSelect={this.assignTo.bind(this, item)}>
-          <Avatar user={item} className="avatar" size={48} />
-          {this.highlight(item.name || item.email, this.state.filter)}
-        </MenuItem>
-      );
-    });
-
-    if (memberNodes.length === 0) {
-      memberNodes = [
-        <li className="not-found" key="no-user">
+    let memberNodes = members && members.length
+      ? members.map(item => {
+          return (
+            <MenuItem
+              key={item.id}
+              disabled={loading}
+              onSelect={this.assignTo.bind(this, item)}>
+              <Avatar user={item} className="avatar" size={48} />
+              {this.highlight(item.name || item.email, filter)}
+            </MenuItem>
+          );
+        })
+      : <li className="not-found">
           <span>{t('No matching users found.')}</span>
-        </li>
-      ];
-    }
+        </li>;
 
-    let tooltipTitle = null;
-    if (assignedTo) {
-      tooltipTitle = userDisplayName(assignedTo);
-    }
+    let tooltipTitle = assignedTo ? userDisplayName(assignedTo) : null;
 
     return (
-      <div ref="container">
+      <div ref={ref => (this.containerRef = ref)}>
         <div className={classNames(className, 'tip')} title={tooltipTitle}>
           {loading
-            ? <LoadingIndicator mini={true} />
+            ? <LoadingIndicator mini />
             : <DropdownLink
-                ref="dropdown"
+                ref={ref => (this.dropdownRef = ref)}
                 className="assignee-selector-toggle"
                 onOpen={this.onDropdownOpen}
                 onClose={this.onDropdownClose}
@@ -232,28 +238,33 @@ const AssigneeSelector = React.createClass({
                     ? <Avatar user={assignedTo} className="avatar" size={48} />
                     : <span className="icon-user" />
                 }>
-                <MenuItem noAnchor={true} key="filter">
-                  <input
-                    type="text"
-                    className="form-control input-sm"
-                    placeholder={t('Filter people')}
-                    ref="filter"
-                    onKeyDown={this.onFilterKeyDown}
-                    onKeyUp={this.onFilterKeyUp}
-                  />
-                </MenuItem>
-                {assignedTo
-                  ? <MenuItem
-                      key="clear"
-                      className="clear-assignee"
-                      disabled={!loading}
-                      onSelect={this.clearAssignTo}>
-                      <span className="icon-circle-cross" /> {t('Clear Assignee')}
-                    </MenuItem>
-                  : ''}
-                <li>
-                  <ul>{memberNodes}</ul>
-                </li>
+                {!memberListLoading &&
+                  <MenuItem noAnchor>
+                    <input
+                      type="text"
+                      className="form-control input-sm"
+                      placeholder={t('Filter people')}
+                      ref={ref => (this.filterRef = ref)}
+                      onKeyDown={this.onFilterKeyDown}
+                      onKeyUp={this.onFilterKeyUp}
+                    />
+                  </MenuItem>}
+                {!memberListLoading &&
+                  assignedTo &&
+                  <MenuItem
+                    className="clear-assignee"
+                    disabled={!loading}
+                    onSelect={this.clearAssignTo}>
+                    <span className="icon-circle-cross" /> {t('Clear Assignee')}
+                  </MenuItem>}
+                {!memberListLoading && memberNodes}
+
+                {memberListLoading &&
+                  <li>
+                    <FlowLayout center className="list-loading-container">
+                      <LoadingIndicator mini />
+                    </FlowLayout>
+                  </li>}
               </DropdownLink>}
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/components/flowLayout.jsx b/src/sentry/static/sentry/app/components/flowLayout.jsx
index c72d480a3c..20dc71211f 100644
--- a/src/sentry/static/sentry/app/components/flowLayout.jsx
+++ b/src/sentry/static/sentry/app/components/flowLayout.jsx
@@ -7,6 +7,8 @@ import '../../less/components/flowLayout.less';
 // Takes up remaining space of a flexbox container (i.e. "flex: 1")
 const FlowLayout = React.createClass({
   propTypes: {
+    /** Centers content via `justify-content` */
+    center: PropTypes.bool,
     /** Applies "overflow: hidden" to container so that children can be truncated */
     truncate: PropTypes.bool
   },
@@ -18,8 +20,9 @@ const FlowLayout = React.createClass({
   },
 
   render() {
-    let {className, children, truncate, ...otherProps} = this.props;
+    let {className, children, truncate, center, ...otherProps} = this.props;
     let cx = classNames('flow-layout', className, {
+      'is-center': center,
       'is-truncated': truncate
     });
 
diff --git a/src/sentry/static/sentry/app/stores/memberListStore.jsx b/src/sentry/static/sentry/app/stores/memberListStore.jsx
index e1bb1ec952..d16c5e86b6 100644
--- a/src/sentry/static/sentry/app/stores/memberListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/memberListStore.jsx
@@ -5,15 +5,19 @@ const MemberListStore = Reflux.createStore({
 
   init() {
     this.items = [];
+    this.loaded = false;
   },
 
   // TODO(dcramer): this should actually come from an action of some sorts
   loadInitialData(items) {
     this.items = items;
+    this.loaded = true;
     this.trigger(this.items, 'initial');
   },
 
   getById(id) {
+    if (!this.items) return null;
+
     id = '' + id;
     for (let i = 0; i < this.items.length; i++) {
       if (this.items[i].id === id) {
@@ -24,6 +28,8 @@ const MemberListStore = Reflux.createStore({
   },
 
   getByEmail(email) {
+    if (!this.items) return null;
+
     email = email.toLowerCase();
     for (let i = 0; i < this.items.length; i++) {
       if (this.items[i].email.toLowerCase() === email) {
diff --git a/src/sentry/static/sentry/less/components/flowLayout.less b/src/sentry/static/sentry/less/components/flowLayout.less
index 1b42486a85..d101529956 100644
--- a/src/sentry/static/sentry/less/components/flowLayout.less
+++ b/src/sentry/static/sentry/less/components/flowLayout.less
@@ -7,4 +7,8 @@
   &.is-truncated {
     overflow: hidden;
   }
+
+  &.is-center {
+    justify-content: center;
+  }
 }
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 2d97be7085..3636e6d189 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -1768,6 +1768,10 @@ ul.faces {
 .assignee-selector {
   height: 24px;
 
+  .loading {
+    display: inline-block;
+  }
+
   .btn-group {
     height: 24px;
 
@@ -1893,6 +1897,10 @@ ul.faces {
       opacity: .3;
     }
   }
+
+  .list-loading-container {
+    padding: 15px 0 10px 0;
+  }
 }
 
 /**
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index 1c2abf472b..2e68792696 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -21,6 +21,11 @@ describe('AssigneeSelector', function() {
     name: 'John Smith',
     email: 'johnsmith@example.com'
   };
+  const USER_3 = {
+    id: 3,
+    name: 'J J',
+    email: 'jj@example.com'
+  };
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
@@ -87,8 +92,48 @@ describe('AssigneeSelector', function() {
     });
   });
 
+  describe('loading', function() {
+    let assigneeSelector;
+    beforeEach(function() {
+      // Reset sandbox because we don't want <LoadingIndicator /> stubbed
+      this.sandbox.restore();
+      this.sandbox = sinon.sandbox.create();
+      this.sandbox.stub(GroupStore, 'get').returns({
+        id: 1337,
+        assignedTo: null
+      });
+      MemberListStore.items = [];
+      MemberListStore.loaded = false;
+      assigneeSelector = mount(<AssigneeSelector id="1337" />);
+    });
+
+    it('should initially have loading state', function() {
+      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(true);
+    });
+
+    it('does not have loading state and shows member list after calling MemberListStore.loadInitialData', function() {
+      MemberListStore.loadInitialData([USER_1, USER_2]);
+
+      expect(assigneeSelector.find('Avatar').length).toBe(2);
+      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+    });
+
+    it('does NOT update member list after initial load', function() {
+      MemberListStore.loadInitialData([USER_1, USER_2]);
+
+      expect(assigneeSelector.find('Avatar').length).toBe(2);
+      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+
+      MemberListStore.loadInitialData([USER_1, USER_2, USER_3]);
+
+      expect(assigneeSelector.find('Avatar').length).toBe(2);
+      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+    });
+  });
+
   describe('onFilterKeyDown()', function() {
     beforeEach(function() {
+      MemberListStore.loaded = true;
       let assigneeSelector = (this.assigneeSelector = mount(
         <AssigneeSelector id="1337" />
       ));
@@ -96,13 +141,17 @@ describe('AssigneeSelector', function() {
       this.assignTo = this.sandbox.stub(assigneeSelector.instance(), 'assignTo');
     });
 
+    afterEach(function() {
+      MemberListStore.loaded = false;
+    });
+
     it('should assign the first filtered member when the Enter key is pressed and filter is truthy', function() {
       let assigneeSelector = this.assigneeSelector;
       assigneeSelector.setState({filter: 'Jane'});
 
-      assigneeSelector
-        .ref('filter')
-        .simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
+      let filterEl = assigneeSelector.instance().filterRef;
+      let filter = assigneeSelector.findWhere(node => node.node === filterEl);
+      filter.simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
 
       expect(this.assignTo.calledOnce).toBeTruthy();
       expect(this.assignTo.lastCall.args[0]).toHaveProperty('name', 'Jane Doe');
@@ -112,9 +161,9 @@ describe('AssigneeSelector', function() {
       let assigneeSelector = this.assigneeSelector;
       assigneeSelector.setState({filter: ''});
 
-      assigneeSelector
-        .ref('filter')
-        .simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
+      let filterEl = assigneeSelector.instance().filterRef;
+      let filter = assigneeSelector.findWhere(node => node.node === filterEl);
+      filter.simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
 
       expect(this.assignTo.notCalled).toBeTruthy();
     });
@@ -123,26 +172,30 @@ describe('AssigneeSelector', function() {
       let assigneeSelector = this.assigneeSelector;
       assigneeSelector.setState({filter: 'Jane'});
 
-      assigneeSelector
-        .ref('filter')
-        .simulate('keyDown', {key: 'h', keyCode: 72, which: 72});
+      let filterEl = assigneeSelector.instance().filterRef;
+      let filter = assigneeSelector.findWhere(node => node.node === filterEl);
+      filter.simulate('keyDown', {key: 'h', keyCode: 72, which: 72});
       expect(this.assignTo.notCalled).toBeTruthy();
     });
   });
 
   describe('onFilterKeyUp()', function() {
     beforeEach(function() {
+      MemberListStore.loaded = true;
       this.assigneeSelector = mount(<AssigneeSelector id="1337" />);
     });
 
+    afterEach(function() {
+      MemberListStore.loaded = false;
+    });
+
     it('should close the dropdown when keyup is triggered with the Escape key', function() {
       let assigneeSelector = this.assigneeSelector;
-      let closeStub = this.sandbox.stub(
-        assigneeSelector.instance().refs.dropdown,
-        'close'
-      );
+      let closeStub = this.sandbox.stub(assigneeSelector.instance().dropdownRef, 'close');
 
-      assigneeSelector.ref('filter').simulate('keyUp', {key: 'Escape'});
+      let filterEl = assigneeSelector.instance().filterRef;
+      let filter = assigneeSelector.findWhere(node => node.node === filterEl);
+      filter.simulate('keyUp', {key: 'Escape'});
 
       expect(closeStub.calledOnce).toBeTruthy();
     });
@@ -150,7 +203,9 @@ describe('AssigneeSelector', function() {
     it('should update the local filter state if any other key is pressed', function() {
       let assigneeSelector = this.assigneeSelector;
 
-      assigneeSelector.ref('filter').simulate('keyUp', {target: {value: 'foo'}});
+      let filterEl = assigneeSelector.instance().filterRef;
+      let filter = assigneeSelector.findWhere(node => node.node === filterEl);
+      filter.simulate('keyUp', {target: {value: 'foo'}});
       expect(assigneeSelector.state('filter')).toEqual('foo');
     });
   });
