commit cbe40ad4524947b7d2d54a214aa2ef1236bbfdf0
Author: Mark Story <mark@mark-story.com>
Date:   Thu Nov 8 13:59:01 2018 -0500

    ref(ui) Extract repository add/delete/cancel to action creators (#10458)
    
    Move repository related actions to action creators & promises. I've
    colocated the indicator operations with the API requests so that the
    react components can be more focused on their state management and have
    fewer concerns intertwined.

diff --git a/src/sentry/static/sentry/app/actionCreators/integrations.jsx b/src/sentry/static/sentry/app/actionCreators/integrations.jsx
index 5df7599db5..22cb6b98ec 100644
--- a/src/sentry/static/sentry/app/actionCreators/integrations.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/integrations.jsx
@@ -3,8 +3,9 @@ import {
   addErrorMessage,
   addLoadingMessage,
   addSuccessMessage,
+  clearIndicators,
 } from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 
 const api = new Client();
 
@@ -49,3 +50,100 @@ export function addIntegrationToProject(orgId, projectId, integration) {
     }
   );
 }
+
+/**
+ * Delete a respository
+ *
+ * @param {Object} client ApiClient
+ * @param {String} orgId Organization Slug
+ * @param {String} repositoryId Repository ID
+ */
+export function deleteRepository(client, orgId, repositoryId) {
+  addLoadingMessage();
+  let promise = client.requestPromise(`/organizations/${orgId}/repos/${repositoryId}/`, {
+    method: 'DELETE',
+  });
+  promise.then(
+    () => clearIndicators(),
+    () => addErrorMessage(t('Unable to delete repository.'))
+  );
+  return promise;
+}
+
+/**
+ * Cancel the deletion of a respository
+ *
+ * @param {Object} client ApiClient
+ * @param {String} orgId Organization Slug
+ * @param {String} repositoryId Repository ID
+ */
+export function cancelDeleteRepository(client, orgId, repositoryId) {
+  addLoadingMessage();
+  let promise = client.requestPromise(`/organizations/${orgId}/repos/${repositoryId}/`, {
+    method: 'PUT',
+    data: {status: 'visible'},
+  });
+  promise.then(
+    () => clearIndicators(),
+    () => addErrorMessage(t('Unable to cancel deletion.'))
+  );
+  return promise;
+}
+
+function applyRepositoryAddComplete(promise) {
+  promise.then(
+    repo => {
+      let message = tct('[repo] has been successfully added.', {
+        repo: repo.name,
+      });
+      addSuccessMessage(message);
+    },
+    errorData => {
+      let text = errorData.responseJSON.errors
+        ? errorData.responseJSON.errors.__all__
+        : t('Unable to add repository.');
+      addErrorMessage(text);
+    }
+  );
+  return promise;
+}
+
+/**
+ * Migrate a repository to a new integration.
+ *
+ * @param {Object} client ApiClient
+ * @param {String} orgId Organization Slug
+ * @param {String} repositoryId Repository ID
+ * @param {Object} integration Integration provider data.
+ */
+export function migrateRepository(client, orgId, repositoryId, integration) {
+  let data = {integrationId: integration.id};
+  addLoadingMessage();
+  let promise = client.requestPromise(`/organizations/${orgId}/repos/${repositoryId}/`, {
+    data,
+    method: 'PUT',
+  });
+  return applyRepositoryAddComplete(promise);
+}
+
+/**
+ * Add a repository
+ *
+ * @param {Object} client ApiClient
+ * @param {String} orgId Organization Slug
+ * @param {String} name Repository identifier/name to add
+ * @param {Object} integration Integration provider data.
+ */
+export function addRepository(client, orgId, name, integration) {
+  let data = {
+    installation: integration.id,
+    identifier: name,
+    provider: `integrations:${integration.provider.key}`,
+  };
+  addLoadingMessage();
+  let promise = client.requestPromise(`/organizations/${orgId}/repos/`, {
+    method: 'POST',
+    data,
+  });
+  return applyRepositoryAddComplete(promise);
+}
diff --git a/src/sentry/static/sentry/app/components/repositoryRow.jsx b/src/sentry/static/sentry/app/components/repositoryRow.jsx
index 87f0ac3938..ccd0353125 100644
--- a/src/sentry/static/sentry/app/components/repositoryRow.jsx
+++ b/src/sentry/static/sentry/app/components/repositoryRow.jsx
@@ -3,10 +3,10 @@ import React from 'react';
 import styled from 'react-emotion';
 import PropTypes from 'prop-types';
 
+import {deleteRepository, cancelDeleteRepository} from 'app/actionCreators/integrations';
 import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import SpreadLayout from 'app/components/spreadLayout';
-import IndicatorStore from 'app/stores/indicatorStore';
 import {Repository} from 'app/sentryTypes';
 import {t} from 'app/locale';
 
@@ -55,30 +55,22 @@ class RepositoryRow extends React.Component {
 
   cancelDelete = () => {
     let {api, orgId, repository, onRepositoryChange} = this.props;
-    let indicator = IndicatorStore.add(t('Saving changes...'));
-
-    api.request(`/organizations/${orgId}/repos/${repository.id}/`, {
-      method: 'PUT',
-      data: {status: 'visible'},
-      success: data => {
+    cancelDeleteRepository(api, orgId, repository.id).then(
+      data => {
         if (onRepositoryChange) onRepositoryChange(data);
       },
-      error: () => IndicatorStore.addError(t('An error occurred.')),
-      complete: () => IndicatorStore.remove(indicator),
-    });
+      () => {}
+    );
   };
 
   deleteRepo = () => {
     let {api, orgId, repository, onRepositoryChange} = this.props;
-    let indicator = IndicatorStore.add(t('Saving changes..'));
-    api.request(`/organizations/${orgId}/repos/${repository.id}/`, {
-      method: 'DELETE',
-      success: data => {
+    deleteRepository(api, orgId, repository.id).then(
+      data => {
         if (onRepositoryChange) onRepositoryChange(data);
       },
-      error: () => IndicatorStore.addError(t('Unable to delete repository.')),
-      complete: () => IndicatorStore.remove(indicator),
-    });
+      () => {}
+    );
   };
 
   get isActive() {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
index a15cca72ea..ecc32bde76 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
@@ -4,18 +4,18 @@ import {debounce} from 'lodash';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {migrateRepository, addRepository} from 'app/actionCreators/integrations';
 import AsyncComponent from 'app/components/asyncComponent';
 import Button from 'app/components/button';
 import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
 import DropdownButton from 'app/components/dropdownButton';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import IndicatorStore from 'app/stores/indicatorStore';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import Pagination from 'app/components/pagination';
 import RepositoryRow from 'app/components/repositoryRow';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import space from 'app/styles/space';
-import {t, tct} from 'app/locale';
+import {t} from 'app/locale';
 
 export default class IntegrationRepos extends AsyncComponent {
   static propTypes = {
@@ -92,44 +92,24 @@ export default class IntegrationRepos extends AsyncComponent {
 
   addRepo(selection) {
     let {integration} = this.props;
-    let orgId = this.context.organization.slug;
     let {itemList} = this.state;
-    let migratableRepo = itemList.filter(item => selection.value === item.name)[0];
-    let path = migratableRepo
-      ? `/organizations/${orgId}/repos/${migratableRepo.id}/`
-      : `/organizations/${orgId}/repos/`;
-    let data = migratableRepo
-      ? {integrationId: integration.id}
-      : {
-          installation: integration.id,
-          identifier: selection.value,
-          provider: `integrations:${integration.provider.key}`,
-        };
-    let method = migratableRepo ? 'PUT' : 'POST';
-    let saveIndicator = IndicatorStore.add(t('Adding repository...'));
+    let orgId = this.context.organization.slug;
+
     this.setState({adding: true});
-    this.api.request(path, {
-      data,
-      method,
-      success: repo => {
-        this.setState({itemList: itemList.concat(repo)});
-        IndicatorStore.addSuccess(
-          tct('[repo] has been successfully added.', {
-            repo: repo.name,
-          })
-        );
-      },
-      error: errorData => {
-        let text = errorData.responseJSON.errors
-          ? errorData.responseJSON.errors.__all__
-          : t('Unable to add repository.');
-        IndicatorStore.addError(text);
-      },
-      complete: () => {
-        IndicatorStore.remove(saveIndicator);
-        this.setState({adding: false});
+
+    let migratableRepo = itemList.filter(item => selection.value === item.name)[0];
+    let promise;
+    if (migratableRepo) {
+      promise = migrateRepository(this.api, orgId, migratableRepo.id, integration);
+    } else {
+      promise = addRepository(this.api, orgId, selection.value, integration);
+    }
+    promise.then(
+      repo => {
+        this.setState({adding: false, itemList: itemList.concat(repo)});
       },
-    });
+      () => this.setState({adding: false})
+    );
   }
 
   renderDropdown() {
