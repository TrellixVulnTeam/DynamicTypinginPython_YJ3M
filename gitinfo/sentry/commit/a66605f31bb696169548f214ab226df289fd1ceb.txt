commit a66605f31bb696169548f214ab226df289fd1ceb
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Aug 24 17:01:10 2013 -0700

    Cleanup and tests of quotas form

diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index b94110d8b5..0fa1c6b63b 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -184,14 +184,16 @@ class ProjectQuotasForm(forms.Form):
         self.project = project
         super(ProjectQuotasForm, self).__init__(*args, **kwargs)
         per_minute = ProjectOption.objects.get_value(
-            self.project, 'quotas:per_minute', ''
+            self.project, 'quotas:per_minute', None
         )
-        if per_minute == '':
+        if per_minute is None:
             per_minute = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
         self.fields['per_minute'].initial = per_minute
 
     def clean_per_minute(self):
         value = self.cleaned_data.get('per_minute')
+        if not value:
+            return value
         if value.endswith('%'):
             try:
                 pct = int(value[:-1])
@@ -200,7 +202,7 @@ class ProjectQuotasForm(forms.Form):
             if pct > 100:
                 raise forms.ValidationError('Invalid percentage')
             if pct == 0:
-                value = 0
+                value = '0'
         return value
 
     def save(self):
diff --git a/tests/sentry/web/forms/projects/tests.py b/tests/sentry/web/forms/projects/tests.py
index 810abc01ce..ad1a591efa 100644
--- a/tests/sentry/web/forms/projects/tests.py
+++ b/tests/sentry/web/forms/projects/tests.py
@@ -1,5 +1,5 @@
-from django.contrib.auth.models import User
-from sentry.web.forms.projects import RemoveProjectForm
+from sentry.models import User, Project
+from sentry.web.forms.projects import RemoveProjectForm, ProjectQuotasForm
 from sentry.testutils import TestCase
 
 
@@ -14,3 +14,29 @@ class RemoveProjectFormTest(TestCase):
         user.set_password('foo')
         form = RemoveProjectForm(user=user, project_list=[])
         self.assertIn('password', form.fields)
+
+
+class ProjectQuotasFormTest(TestCase):
+    def test_accepts_percentage(self):
+        project = Project(id=1)
+        form = ProjectQuotasForm(project, {'per_minute': '50%'})
+        assert form.is_valid()
+        assert form.cleaned_data['per_minute'] == '50%'
+
+    def test_invalidates_101_percent(self):
+        project = Project(id=1)
+        form = ProjectQuotasForm(project, {'per_minute': '101%'})
+        assert not form.is_valid()
+        assert 'per_minute' in form.errors
+
+    def test_accepts_numbers(self):
+        project = Project(id=1)
+        form = ProjectQuotasForm(project, {'per_minute': '100'})
+        assert form.is_valid()
+        assert form.cleaned_data['per_minute'] == '100'
+
+    def test_discards_0_percent(self):
+        project = Project(id=1)
+        form = ProjectQuotasForm(project, {'per_minute': '0%'})
+        assert form.is_valid()
+        assert form.cleaned_data['per_minute'] == '0'
