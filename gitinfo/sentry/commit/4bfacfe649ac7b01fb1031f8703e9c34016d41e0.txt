commit 4bfacfe649ac7b01fb1031f8703e9c34016d41e0
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Aug 26 22:40:24 2019 +0000

    Feat (app-platform): Better schema validation (#14487)

diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index acb2bdeb06..1e096fd76f 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -6,7 +6,7 @@ from rest_framework import serializers
 from rest_framework.serializers import Serializer, ValidationError
 
 from django.template.defaultfilters import slugify
-from sentry.api.validators.sentry_apps.schema import validate as validate_schema
+from sentry.api.validators.sentry_apps.schema import validate_ui_element_schema
 from sentry.models import ApiScopes, SentryApp
 from sentry.models.sentryapp import VALID_EVENT_RESOURCES, REQUIRED_EVENT_PERMISSIONS
 
@@ -47,7 +47,7 @@ class SchemaField(serializers.Field):
             return {}
 
         try:
-            validate_schema(data)
+            validate_ui_element_schema(data)
         except SchemaValidationError as e:
             raise ValidationError(e.message)
         return data
diff --git a/src/sentry/api/validators/sentry_apps/schema.py b/src/sentry/api/validators/sentry_apps/schema.py
index 3c7d540e1c..66dbaad981 100644
--- a/src/sentry/api/validators/sentry_apps/schema.py
+++ b/src/sentry/api/validators/sentry_apps/schema.py
@@ -1,13 +1,18 @@
 from __future__ import absolute_import
 
+import logging
+import json
 from jsonschema import Draft4Validator
 from jsonschema.exceptions import best_match
+from jsonschema.exceptions import ValidationError as SchemaValidationError
+
+logger = logging.getLogger(__name__)
 
 SCHEMA = {
     "type": "object",
     "definitions": {
         # Property Types
-        "uri": {"type": "string", "format": "uri", "pattern": "^\/"},
+        "uri": {"type": "string", "format": "uri", "pattern": r"^\/"},
         "options": {
             "type": "array",
             "minItems": 1,
@@ -75,7 +80,7 @@ SCHEMA = {
             "type": "object",
             "properties": {
                 "type": {"type": "string", "enum": ["image"]},
-                "url": {"type": "string", "format": "uri", "pattern": "^(?:https?|\/)"},
+                "url": {"type": "string", "format": "uri", "pattern": r"^(?:https?|\/)"},
                 "alt": {"type": "string"},
             },
             "required": ["type", "url"],
@@ -84,7 +89,7 @@ SCHEMA = {
             "type": "object",
             "properties": {
                 "type": {"type": "string", "enum": ["video"]},
-                "url": {"type": "string", "format": "uri", "pattern": "^(?:https?|\/)"},
+                "url": {"type": "string", "format": "uri", "pattern": r"^(?:https?|\/)"},
             },
             "required": ["type", "url"],
         },
@@ -177,9 +182,64 @@ SCHEMA = {
     "required": ["elements"],
 }
 
+element_types = ["issue-link", "alert-rule-action", "issue-media", "stacktrace-link"]
+
+
+def validate_component(schema):
+    """
+    In order to test individual components, that aren't normally allowed at the
+    top-level of a schema, we just plop all `definitions` into `properties`.
+    This makes the validator think they're all valid top-level elements.
+    """
+    component_schema = SCHEMA.copy()
+    component_schema["properties"] = component_schema["definitions"]
+    del component_schema["required"]
+    validate(instance={schema["type"]: schema}, schema=component_schema)
+
+
+def check_elements_is_array(instance):
+    if not isinstance(instance["elements"], list):
+        raise SchemaValidationError("'elements' should be an array of objects")
 
-def validate(instance, schema=SCHEMA):
-    v = Draft4Validator(schema)
 
+def check_each_element_for_error(instance):
+    for element in instance["elements"]:
+        if "type" not in element:
+            raise SchemaValidationError("Each element needs a 'type' field")
+        found_type = element["type"]
+        if found_type not in element_types:
+            raise SchemaValidationError(
+                "Element has type '%s'. Type must be one of the following: %s"
+                % (found_type, element_types)
+            )
+        try:
+            validate_component(element)
+        except SchemaValidationError as e:
+            # catch the validation error and re-write the error so the user knows which element has the issue
+            raise SchemaValidationError("%s for element of type '%s'" % (e.message, found_type))
+
+
+def validate_ui_element_schema(instance):
+    try:
+        # schema validator will catch elements missing
+        check_elements_is_array(instance)
+        check_each_element_for_error(instance)
+    except SchemaValidationError as e:
+        raise e
+    except Exception as e:
+        logger.warn(
+            "Unexepcted error validating schema: %s",
+            e,
+            exc_info=True,
+            extra={"schema": json.dumps(instance)},
+        )
+        # pre-validators might have unexpected errors if the format is not what they expect in the check
+        # if that happens, we should eat the error and let the main validator find the schema error
+        pass
+    validate(instance, SCHEMA)
+
+
+def validate(instance, schema):
+    v = Draft4Validator(schema)
     if not v.is_valid(instance):
         raise best_match(v.iter_errors(instance))
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index c814138957..bccb17cb18 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -319,14 +319,16 @@ class PostSentryAppsTest(SentryAppsTest):
         }
         response = self._post(**kwargs)
         assert response.status_code == 400
-        assert response.data == {"schema": ["['#general'] is too short"]}
+        assert response.data == {
+            "schema": ["['#general'] is too short for element of type 'alert-rule-action'"]
+        }
 
         record.assert_called_with(
             "sentry_app.schema_validation_error",
             user_id=self.user.id,
             organization_id=self.org.id,
             sentry_app_name="MyApp",
-            error_message="['#general'] is too short",
+            error_message="['#general'] is too short for element of type 'alert-rule-action'",
             schema='{"elements":[{"required_fields":[{"label":"Channel","type":"select","options":[["#general"]],"name":"channel"}],"type":"alert-rule-action"}]}',
         )
 
diff --git a/tests/sentry/api/validators/sentry_apps/test_alert_rule_action.py b/tests/sentry/api/validators/sentry_apps/test_alert_rule_action.py
index 4e144b7fd3..c102250b27 100644
--- a/tests/sentry/api/validators/sentry_apps/test_alert_rule_action.py
+++ b/tests/sentry/api/validators/sentry_apps/test_alert_rule_action.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestAlertRuleActionSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_header.py b/tests/sentry/api/validators/sentry_apps/test_header.py
index bf73d95c80..fbcd85b85c 100644
--- a/tests/sentry/api/validators/sentry_apps/test_header.py
+++ b/tests/sentry/api/validators/sentry_apps/test_header.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestHeaderSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_image.py b/tests/sentry/api/validators/sentry_apps/test_image.py
index 69b13c6d03..d78355378d 100644
--- a/tests/sentry/api/validators/sentry_apps/test_image.py
+++ b/tests/sentry/api/validators/sentry_apps/test_image.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestImageSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_issue_link.py b/tests/sentry/api/validators/sentry_apps/test_issue_link.py
index 88a2739331..9c33e7587d 100644
--- a/tests/sentry/api/validators/sentry_apps/test_issue_link.py
+++ b/tests/sentry/api/validators/sentry_apps/test_issue_link.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestIssueLinkSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_issue_media.py b/tests/sentry/api/validators/sentry_apps/test_issue_media.py
index 553790bb86..af7daa1de8 100644
--- a/tests/sentry/api/validators/sentry_apps/test_issue_media.py
+++ b/tests/sentry/api/validators/sentry_apps/test_issue_media.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestIssueMediaSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_markdown.py b/tests/sentry/api/validators/sentry_apps/test_markdown.py
index 38969dcc0a..fe61afa134 100644
--- a/tests/sentry/api/validators/sentry_apps/test_markdown.py
+++ b/tests/sentry/api/validators/sentry_apps/test_markdown.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestMarkdownSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_schema.py b/tests/sentry/api/validators/sentry_apps/test_schema.py
index 724c6bf6f6..2ffb2e350b 100644
--- a/tests/sentry/api/validators/sentry_apps/test_schema.py
+++ b/tests/sentry/api/validators/sentry_apps/test_schema.py
@@ -1,7 +1,13 @@
 from __future__ import absolute_import
 
+import pytest
+
+# needed so we can see the full assertion errror in util
+pytest.register_assert_rewrite("tests.sentry.api.validators.sentry_apps.util")
+
+from .util import invalid_schema_with_error_message
 from sentry.testutils import TestCase
-from sentry.api.validators.sentry_apps.schema import validate
+from sentry.api.validators.sentry_apps.schema import validate_ui_element_schema
 
 
 class TestSchemaValidation(TestCase):
@@ -71,4 +77,35 @@ class TestSchemaValidation(TestCase):
         }
 
     def test_valid_schema_with_options(self):
-        validate(self.schema)
+        validate_ui_element_schema(self.schema)
+
+    @invalid_schema_with_error_message("'elements' is a required property")
+    def test_invalid_schema_elements_missing(self):
+        schema = {"type": "nothing"}
+        validate_ui_element_schema(schema)
+
+    @invalid_schema_with_error_message("'elements' should be an array of objects")
+    def test_invalid_schema_elements_not_array(self):
+        schema = {"elements": {"type": "issue-link"}}
+        validate_ui_element_schema(schema)
+
+    @invalid_schema_with_error_message("Each element needs a 'type' field")
+    def test_invalid_schema_type_missing(self):
+        schema = {"elements": [{"key": "issue-link"}]}
+        validate_ui_element_schema(schema)
+
+    @invalid_schema_with_error_message(
+        "Element has type 'other'. Type must be one of the following: ['issue-link', 'alert-rule-action', 'issue-media', 'stacktrace-link']"
+    )
+    def test_invalid_schema_type_invalid(self):
+        schema = {"elements": [{"type": "other"}]}
+        validate_ui_element_schema(schema)
+
+    @invalid_schema_with_error_message(
+        "'uri' is a required property for element of type 'stacktrace-link'"
+    )
+    def test_invalid_chema_element_missing_uri(self):
+        schema = {
+            "elements": [{"url": "/stacktrace/github/getsentry/sentry", "type": "stacktrace-link"}]
+        }
+        validate_ui_element_schema(schema)
diff --git a/tests/sentry/api/validators/sentry_apps/test_select.py b/tests/sentry/api/validators/sentry_apps/test_select.py
index fd672f9eb4..743d1807e7 100644
--- a/tests/sentry/api/validators/sentry_apps/test_select.py
+++ b/tests/sentry/api/validators/sentry_apps/test_select.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestSelectSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_stacktrace_link.py b/tests/sentry/api/validators/sentry_apps/test_stacktrace_link.py
index 6d8962af08..b1eba55fc2 100644
--- a/tests/sentry/api/validators/sentry_apps/test_stacktrace_link.py
+++ b/tests/sentry/api/validators/sentry_apps/test_stacktrace_link.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestOpenInSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_text.py b/tests/sentry/api/validators/sentry_apps/test_text.py
index b012f98092..0212dc4cb0 100644
--- a/tests/sentry/api/validators/sentry_apps/test_text.py
+++ b/tests/sentry/api/validators/sentry_apps/test_text.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestTextSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_textarea.py b/tests/sentry/api/validators/sentry_apps/test_textarea.py
index b383c52c77..4c9be05634 100644
--- a/tests/sentry/api/validators/sentry_apps/test_textarea.py
+++ b/tests/sentry/api/validators/sentry_apps/test_textarea.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestTextareaSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/test_video.py b/tests/sentry/api/validators/sentry_apps/test_video.py
index c59e583288..78026c6243 100644
--- a/tests/sentry/api/validators/sentry_apps/test_video.py
+++ b/tests/sentry/api/validators/sentry_apps/test_video.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from sentry.testutils import TestCase
 
-from .util import invalid_schema, validate_component
+from .util import invalid_schema
+from sentry.api.validators.sentry_apps.schema import validate_component
 
 
 class TestVideoSchemaValidation(TestCase):
diff --git a/tests/sentry/api/validators/sentry_apps/util.py b/tests/sentry/api/validators/sentry_apps/util.py
index aaf1271b9b..f11212fd09 100644
--- a/tests/sentry/api/validators/sentry_apps/util.py
+++ b/tests/sentry/api/validators/sentry_apps/util.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 from jsonschema import ValidationError
-from sentry.api.validators.sentry_apps.schema import validate, SCHEMA
 
 
 def invalid_schema(func):
@@ -12,13 +11,16 @@ def invalid_schema(func):
     return inner
 
 
-def validate_component(schema):
-    """
-    In order to test individual components, that aren't normally allowed at the
-    top-level of a schema, we just plop all `definitions` into `properties`.
-    This makes the validator think they're all valid top-level elements.
-    """
-    component_schema = SCHEMA.copy()
-    component_schema["properties"] = component_schema["definitions"]
-    del component_schema["required"]
-    validate(instance={schema["type"]: schema}, schema=component_schema)
+def invalid_schema_with_error_message(message):
+    def decorator(func):
+        def inner(self, *args, **kwargs):
+            with self.assertRaises(ValidationError) as cm:
+                func(self)
+            # assert cm.exception.message == message
+            found_message = cm.exception.message
+            if found_message != message:
+                assert found_message == message
+
+        return inner
+
+    return decorator
