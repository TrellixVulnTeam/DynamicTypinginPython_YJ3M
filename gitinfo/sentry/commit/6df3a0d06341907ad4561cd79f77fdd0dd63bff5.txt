commit 6df3a0d06341907ad4561cd79f77fdd0dd63bff5
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 30 17:41:16 2010 -0700

    Pull in Django styles

diff --git a/dblog/admin.py b/dblog/admin.py
index 38bf192f6a..57cee7cd9e 100644
--- a/dblog/admin.py
+++ b/dblog/admin.py
@@ -9,7 +9,7 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 from django import forms
 
-from dblog.helpers import ImprovedExceptionReporter
+from dblog.helpers import ImprovedExceptionReporter, FakeRequest, UNDEFINED
 from dblog.models import GroupedMessage, Message
 from dblog.settings import *
 
@@ -78,11 +78,6 @@ class EfficientAllValuesFilterSpec(AllValuesFilterSpec):
                    'query_string': cl.get_query_string({self.field.name: val}),
                    'display': val}
 FilterSpec.filter_specs.insert(-1, (lambda f: hasattr(f, 'model') and f.model._meta.app_label == 'dblog', EfficientAllValuesFilterSpec))
-
-UNDEFINED = object()
-
-class FakeRequest(object):
-    def build_absolute_uri(self): return self.url
     
 # Custom forms/fields for the admin
 
diff --git a/dblog/helpers.py b/dblog/helpers.py
index cb8f0618c7..ac485a992b 100644
--- a/dblog/helpers.py
+++ b/dblog/helpers.py
@@ -62,6 +62,12 @@ def get_installed_apps():
         out.add(app.split('.')[0])
     return out
 
+
+UNDEFINED = object()
+
+class FakeRequest(object):
+    def build_absolute_uri(self): return self.url
+
 TECHNICAL_500_TEMPLATE = """
 <div id="summary">
   <h1>{{ exception_type }}{% if request.path_info %} at {{ request.path_info|escape }}{% endif %}</h1>
diff --git a/dblog/models.py b/dblog/models.py
index 02911f2464..1ac08cfb30 100644
--- a/dblog/models.py
+++ b/dblog/models.py
@@ -78,11 +78,14 @@ class MessageBase(Model):
     full_url.admin_order_field = 'url'
     
     def error(self):
-        message = smart_unicode(self.message)
-        if len(message) > 100:
-            message = message[:97] + '...'
-        if self.class_name:
-            return "%s: %s" % (self.class_name, message)
+        if self.message:
+            message = smart_unicode(self.message)
+            if len(message) > 100:
+                message = message[:97] + '...'
+            if self.class_name:
+                return "%s: %s" % (self.class_name, message)
+        else:
+            self.message = self._class_name or ''
         return message
     error.short_description = _('error')
 
diff --git a/dblog/templates/dblog/group.html b/dblog/templates/dblog/group.html
index 905a569f45..ab04ac2381 100644
--- a/dblog/templates/dblog/group.html
+++ b/dblog/templates/dblog/group.html
@@ -15,7 +15,7 @@
 				<pre class="traceback">{{ message.shortened_traceback }}</pre>
 			</li>
 		</ul>
-		<pre>{{ message.traceback }}</pre>
+		{{ interactive_traceback }}
 	</div>
 
 	<div id="footer">Powered by sexy Django magic.</div> 
diff --git a/dblog/templates/dblog/index.html b/dblog/templates/dblog/index.html
index 888a015f76..f82e72fd76 100644
--- a/dblog/templates/dblog/index.html
+++ b/dblog/templates/dblog/index.html
@@ -3,9 +3,65 @@
 	<head> 
 		<meta http-equiv="content-type" content="text/html; charset=utf-8"> 
 		<meta name="robots" content="NONE,NOARCHIVE"><title>Django DB Log</title> 
+		<script type="text/javascript"> 
+		//<!--
+		function getElementsByClassName(oElm, strTagName, strClassName){
+		    // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
+		    var arrElements = (strTagName == "*" && document.all)? document.all :
+		    oElm.getElementsByTagName(strTagName);
+		    var arrReturnElements = new Array();
+		    strClassName = strClassName.replace(/\-/g, "\\-");
+		    var oRegExp = new RegExp("(^|\\s)" + strClassName + "(\\s|$)");
+		    var oElement;
+		    for(var i=0; i<arrElements.length; i++){
+		        oElement = arrElements[i];
+		        if(oRegExp.test(oElement.className)){
+		            arrReturnElements.push(oElement);
+		        }
+		    }
+		    return (arrReturnElements)
+		}
+		function hideAll(elems) {
+		  for (var e = 0; e < elems.length; e++) {
+		    elems[e].style.display = 'none';
+		  }
+		}
+		window.onload = function() {
+		  hideAll(getElementsByClassName(document, 'table', 'vars'));
+		  hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
+		  hideAll(getElementsByClassName(document, 'ol', 'post-context'));
+		  hideAll(getElementsByClassName(document, 'div', 'pastebin'));
+		}
+		function toggle() {
+		  for (var i = 0; i < arguments.length; i++) {
+		    var e = document.getElementById(arguments[i]);
+		    if (e) {
+		      e.style.display = e.style.display == 'none' ? 'block' : 'none';
+		    }
+		  }
+		  return false;
+		}
+		function varToggle(link, id) {
+		  toggle('v' + id);
+		  var s = link.getElementsByTagName('span')[0];
+		  var uarr = String.fromCharCode(0x25b6);
+		  var darr = String.fromCharCode(0x25bc);
+		  s.innerHTML = s.innerHTML == uarr ? darr : uarr;
+		  return false;
+		}
+		function switchPastebinFriendly(link) {
+		  s1 = "Switch to copy-and-paste view";
+		  s2 = "Switch back to interactive view";
+		  link.innerHTML = link.innerHTML == s1 ? s2 : s1;
+		  toggle('browserTraceback', 'pastebinTraceback');
+		  return false;
+		}
+		//-->
+		</script>
 		<style type="text/css"> 
 			html * { padding:0; margin:0; }
-			body * { padding:10px 20px; }
+			#header, #footer { padding:10px 20px; }
+			#body { padding: 10px 0; }
 			body * * { padding:0; }
 			body { font:small sans-serif; background:#f6f6f6; }
 			h1 { font-weight:normal; }
@@ -24,7 +80,51 @@
 			#header h2 { font-weight: normal; color: #666; margin-bottom: 0; }
 			#footer { background:#eee; clear: both; border-top:1px solid #ddd; }
 			#header table { border:none; background:transparent; }
-			.messages { list-style: none; margin-left: 0; }
+			
+			/* tracebacks */
+			table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
+			tbody td, tbody th { vertical-align:top; padding:2px 3px; }
+			thead th { padding:1px 6px 1px 3px; background:#fefefe; text-align:left; font-weight:normal; font-size:11px; border:1px solid #ddd; }
+			tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
+			table.vars { margin:5px 0 2px 40px; }
+			table.vars td, table.req td { font-family:monospace; }
+			table td.code { width:100%; }
+			table td.code div { overflow:hidden; }
+			table.source th { color:#666; }
+			table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
+			ul.traceback { list-style-type:none; }
+			ul.traceback li.frame { margin-bottom:1em; }
+			div.context { margin: 10px 0; }
+			div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
+			div.context ol li { font-family:monospace; white-space:pre; color:#666; cursor:pointer; }
+			div.context ol.context-line li { color:black; background-color:#ccc; }
+			div.context ol.context-line li span { float: right; }
+			div.commands { margin-left: 40px; }
+			div.commands a { color:black; text-decoration:none; }
+			#template, #template-not-exist { background:#f6f6f6; }
+			#template-not-exist ul { margin: 0 0 0 20px; }
+			#unicode-hint { background:#eee; }
+			#traceback { background:#eee; padding: 10px; }
+			#requestinfo { background:#f6f6f6; padding-left:120px; }
+			#summary { background: #ffc; padding: 10px; }
+			#summary h2 { font-weight: normal; color: #666; }
+			#explanation { background:#eee; }
+			#summary table { border:none; background:transparent; }
+			#requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
+			#requestinfo h3 { margin-bottom:-1em; }
+			#reporter_body { 
+				padding: 8px;
+				background: none repeat scroll 0 0 #FFFFCC
+			}
+			#reporter_body #traceback li { list-style-type: inherit; }
+			#reporter_body #traceback { padding: 8px; margin-top: 10px; }
+			#reporter_body td, #reporter_body th { border-bottom: 0; font:small sans-serif; line-height: auto; }
+			.error { background: #ffc; }
+			.specific { color:#cc3300; font-weight:bold; }
+			h2 span.commands { font-size:.7em;}
+			span.commands a:link {color:#5E5694;}
+			pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }
+			.messages { list-style: none; margin: 1em 20px; }
 			.messages .count { width: 25px; text-align: center; background: #000; -moz-border-radius: 4px; border-radius: 4px; padding: 0 8px; line-height: 19px; color: #fff; display: inline-block; margin-right: 5px; }
 			.messages h3 { height: 20px; line-height: 20px; display: inline-block; margin: 0; }
 			.messages .message {
diff --git a/dblog/views.py b/dblog/views.py
index f9e0891d14..e58e257fba 100644
--- a/dblog/views.py
+++ b/dblog/views.py
@@ -1,10 +1,18 @@
 # TODO: login
 from django.shortcuts import render_to_response
+from django.utils.safestring import mark_safe
 
-from dblog.models import GroupedMessage
+from dblog.helpers import FakeRequest, ImprovedExceptionReporter
+from dblog.models import GroupedMessage, Message
 
 from math import log
 
+import base64
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
+
 def index(request):
     # this only works in postgres
     message_list = list(GroupedMessage.objects.filter(
@@ -38,17 +46,7 @@ def group(request, group_id):
             'score': 'times_seen / (pow((floor(extract(epoch from now() - last_seen) / 3600) + 2), 1.25) + 1)',
         }
     ).get(pk=group_id)
-    
-    try:
-        prev_message = GroupedMessage.objects.filter(id__gt=group_id).order_by('id')[0]
-    except IndexError:
-        prev_message = None
 
-    try:
-        next_message = GroupedMessage.objects.filter(id__lt=group_id).order_by('-id')[0]
-    except IndexError:
-        next_message = None
-    
     score = log(message.score)
     if score > 2:
         message.priority = 'high'
@@ -60,5 +58,31 @@ def group(request, group_id):
         message.priority = 'verylow'
     else:
         message.priority = 'veryhigh'
+
+    obj = Message.objects.filter(checksum=message.checksum, logger=message.logger, view=message.view)[0]
+
+    module, args, frames = pickle.loads(base64.b64decode(obj.data['exc']).decode('zlib'))
+    obj.class_name = str(obj.class_name)
+
+    # We fake the exception class due to many issues with imports/builtins/etc
+    exc_type = type(obj.class_name, (Exception,), {})
+    exc_value = exc_type(obj.message)
+
+    exc_value.args = args
+    
+    fake_request = FakeRequest()
+    fake_request.META = obj.data.get('META', {})
+    fake_request.GET = obj.data.get('GET', {})
+    fake_request.POST = obj.data.get('POST', {})
+    fake_request.FILES = obj.data.get('FILES', {})
+    fake_request.COOKIES = obj.data.get('COOKIES', {})
+    fake_request.url = obj.url
+    if obj.url:
+        fake_request.path_info = '/' + obj.url.split('/', 3)[-1]
+    else:
+        fake_request.path_info = ''
+
+    reporter = ImprovedExceptionReporter(fake_request, exc_type, exc_value, frames)
+    interactive_traceback = mark_safe(reporter.get_traceback_html())
     
     return render_to_response('dblog/group.html', locals())
\ No newline at end of file
