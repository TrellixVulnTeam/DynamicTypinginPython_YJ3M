commit c272aaa23e657a17b29b08b1de0bd2cdb88145be
Author: Mark Story <mark@sentry.io>
Date:   Wed Jun 17 15:54:00 2020 -0400

    chore: Remove aggregate only components (#19422)
    
    These components are no longer visible and we don't need them adding
    weight to pages.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 35a9afa895..d39ae607bb 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -1,9 +1,6 @@
 import {t} from 'app/locale';
-import pinIcon from 'app/../images/graph/icon-location-filled.svg';
 import {NewQuery} from 'app/types';
 
-export const PIN_ICON = `image://${pinIcon}`;
-
 export const DEFAULT_EVENT_VIEW: Readonly<NewQuery> = {
   id: undefined,
   name: t('All Events'),
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
index d34674fb44..8d6cc379f7 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
@@ -15,7 +15,6 @@ import withApi from 'app/utils/withApi';
 import {getMessage, getTitle} from 'app/utils/events';
 import {Organization, Event, EventTag} from 'app/types';
 import SentryTypes from 'app/sentryTypes';
-import getDynamicText from 'app/utils/getDynamicText';
 import Button from 'app/components/button';
 import OpsBreakdown from 'app/components/events/opsBreakdown';
 import EventMetadata from 'app/components/events/eventMetadata';
@@ -29,8 +28,6 @@ import EventView from 'app/utils/discover/eventView';
 import {ContentBox, HeaderBox, HeaderBottomControls} from 'app/utils/discover/styles';
 
 import {generateTitle, getExpandedResults} from '../utils';
-import Pagination from './pagination';
-import LineGraph from './lineGraph';
 import LinkedIssue from './linkedIssue';
 import DiscoverBreadcrumb from '../breadcrumb';
 
@@ -145,8 +142,6 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
       organization_id: parseInt(organization.id, 10),
     });
 
-    // Having an aggregate field means we want to show pagination/graphs
-    const isGroupedView = eventView.hasAggregateField();
     const {isSidebarVisible} = this.state;
 
     return (
@@ -163,29 +158,10 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
             <StyledButton size="small" onClick={this.toggleSidebar}>
               {isSidebarVisible ? 'Hide Details' : 'Show Details'}
             </StyledButton>
-            {isGroupedView && (
-              <Pagination
-                event={event}
-                organization={organization}
-                eventView={eventView}
-              />
-            )}
           </HeaderBottomControls>
         </HeaderBox>
         <ContentBox>
           <div style={{gridColumn: isSidebarVisible ? '1/2' : '1/3'}}>
-            {isGroupedView &&
-              getDynamicText({
-                value: (
-                  <LineGraph
-                    organization={organization}
-                    currentEvent={event}
-                    location={location}
-                    eventView={eventView}
-                  />
-                ),
-                fixed: 'events chart',
-              })}
             <Projects orgId={organization.slug} slugs={[this.projectId]}>
               {({projects}) => (
                 <BorderlessEventEntries
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
deleted file mode 100644
index 7deeda6d72..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
+++ /dev/null
@@ -1,260 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import {browserHistory} from 'react-router';
-import styled from '@emotion/styled';
-import {Location} from 'history';
-
-import {Client} from 'app/api';
-import {t} from 'app/locale';
-import SentryTypes from 'app/sentryTypes';
-import {getInterval} from 'app/components/charts/utils';
-import {
-  getFormattedDate,
-  getUtcDateString,
-  intervalToMilliseconds,
-} from 'app/utils/dates';
-import EventsRequest from 'app/components/charts/eventsRequest';
-import LineChart from 'app/components/charts/lineChart';
-import MarkLine from 'app/components/charts/components/markLine';
-import {Panel} from 'app/components/panels';
-import withApi from 'app/utils/withApi';
-import withGlobalSelection from 'app/utils/withGlobalSelection';
-import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
-import theme from 'app/utils/theme';
-import {Event, Organization, GlobalSelection} from 'app/types';
-import EventView from 'app/utils/discover/eventView';
-import {eventDetailsRouteWithEventView, generateEventSlug} from 'app/utils/discover/urls';
-
-import {PIN_ICON} from '../data';
-
-/**
- * Generate the data to display a vertical line for the current
- * event on the graph.
- */
-const getCurrentEventMarker = (currentEvent: Event) => {
-  const title = t('Current Event');
-  const eventTime = +new Date(
-    currentEvent.dateCreated || (currentEvent.endTimestamp || 0) * 1000
-  );
-
-  return {
-    type: 'line',
-    data: [],
-    markLine: MarkLine({
-      symbol: [PIN_ICON, 'none'],
-      symbolSize: [16, 150],
-      lineStyle: {
-        normal: {
-          color: theme.redLight,
-          type: 'solid',
-          width: 1,
-        },
-      },
-      tooltip: {
-        formatter: () => `<div>${getFormattedDate(eventTime, 'MMM D, YYYY LT')}</div>`,
-      },
-      label: {
-        show: false,
-      },
-      data: [
-        {
-          xAxis: eventTime,
-          name: title,
-        },
-      ],
-    }),
-  };
-};
-
-type ClickHandlerOptions = {
-  api: Client;
-  currentEvent: Event;
-  organization: Organization;
-  queryString: string;
-  field: string[];
-  interval: string;
-  selection: GlobalSelection;
-  eventView: EventView;
-};
-
-/**
- * Handle click events on line markers
- *
- * When a user clicks on a marker we want to update the events details page
- * to display an event from that time slice. While each graph slice
- * could contain thousands of events, we do a search to get the latest
- * event in the slice.
- */
-const handleClick = async function(
-  series,
-  {
-    api,
-    currentEvent,
-    organization,
-    queryString,
-    field,
-    interval,
-    selection,
-    eventView,
-  }: ClickHandlerOptions
-) {
-  // Get the timestamp that was clicked.
-  const value = series.value[0];
-
-  // If the current fieldlist has a timestamp column sort
-  // by that. If there are no timestamp fields we will get non-deterministic
-  // results.
-  const sortField = field.includes('timestamp')
-    ? 'timestamp'
-    : field.includes('last_seen')
-    ? 'last_seen'
-    : null;
-
-  const endValue = getUtcDateString(value + intervalToMilliseconds(interval));
-  const startValue = getUtcDateString(value);
-
-  // Remove and replace any timestamp conditions from the existing query.
-  const newQuery = tokenizeSearch(queryString);
-  newQuery.timestamp = [`>${startValue}`, `<=${endValue}`];
-
-  // Get events that match the clicked timestamp
-  // taking into account the group and current environment & query
-  const query: any = {
-    environment: selection.environments,
-    limit: 1,
-    referenceEvent: `${currentEvent.projectSlug}:${currentEvent.eventID}`,
-    query: stringifyQueryObject(newQuery),
-    field,
-  };
-
-  // Perserve the current query window
-  if (selection.datetime.period) {
-    query.statsPeriod = selection.datetime.period;
-  } else {
-    query.start = selection.datetime.start;
-    query.end = selection.datetime.end;
-  }
-  if (sortField !== null) {
-    query.sort = sortField;
-  }
-
-  const url = `/organizations/${organization.slug}/eventsv2/`;
-  let response;
-  try {
-    response = await api.requestPromise(url, {
-      method: 'GET',
-      query,
-    });
-  } catch (e) {
-    // Do nothing, user could have clicked on a blank space.
-    return;
-  }
-  if (!response.data || !response.data.length) {
-    // Did not find anything.
-    return;
-  }
-
-  const event = response.data[0];
-  const eventSlug = generateEventSlug(event);
-
-  browserHistory.push(
-    eventDetailsRouteWithEventView({eventSlug, orgSlug: organization.slug, eventView})
-  );
-};
-
-type LineGraphProps = {
-  api: Client;
-  organization: Organization;
-  location: Location;
-  currentEvent: Event;
-  eventView: EventView;
-  selection: GlobalSelection;
-};
-
-/**
- * Render a graph of event volumes for the current group + event.
- */
-const LineGraph = (props: LineGraphProps) => {
-  const {api, organization, location, selection, currentEvent, eventView} = props;
-  const isUtc = selection.datetime.utc;
-  const interval = getInterval(selection.datetime, true);
-  const tooltip = {
-    formatAxisLabel: value => getFormattedDate(value, 'lll', {local: !isUtc}),
-  };
-  const queryString = eventView.getQuery(location.query.query);
-  const referenceEvent = `${currentEvent.projectSlug}:${currentEvent.eventID}`;
-
-  return (
-    <StyledPanel>
-      <EventsRequest
-        api={api}
-        organization={organization}
-        period={selection.datetime.period}
-        project={selection.projects}
-        environment={selection.environments}
-        // TODO(ts): adjust. Expects date, got strings
-        start={selection.datetime.start as any}
-        end={selection.datetime.end as any}
-        interval={interval}
-        showLoading
-        query={queryString}
-        field={eventView.getFields()}
-        referenceEvent={referenceEvent}
-        includePrevious={false}
-      >
-        {({loading, reloading, timeseriesData}) => (
-          <LineChart
-            {...selection.datetime}
-            isGroupedByDate
-            loading={loading}
-            reloading={reloading}
-            series={[...timeseriesData, getCurrentEventMarker(currentEvent)]}
-            seriesOptions={{
-              showSymbol: false,
-            }}
-            onClick={series =>
-              handleClick(series, {
-                field: eventView.getFields(),
-                api,
-                organization,
-                currentEvent,
-                interval,
-                selection,
-                queryString,
-                eventView,
-              })
-            }
-            tooltip={tooltip}
-            grid={{
-              left: '24px',
-              right: '24px',
-              top: '24px',
-              bottom: '12px',
-            }}
-          />
-        )}
-      </EventsRequest>
-    </StyledPanel>
-  );
-};
-
-// eChart does not recalculate width
-
-const StyledPanel = styled(Panel)`
-  .echarts-for-react div:first-child {
-    width: 100% !important;
-  }
-  image {
-    y: 0px;
-  }
-`;
-
-LineGraph.propTypes = {
-  api: PropTypes.object.isRequired,
-  currentEvent: SentryTypes.Event.isRequired,
-  location: PropTypes.object.isRequired,
-  organization: SentryTypes.Organization.isRequired,
-  selection: PropTypes.object.isRequired,
-} as any;
-
-export default withGlobalSelection(withApi(LineGraph));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
deleted file mode 100644
index 948eac9e6d..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
+++ /dev/null
@@ -1,107 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import Button from 'app/components/button';
-import ButtonBar from 'app/components/buttonBar';
-import {IconPrevious, IconNext} from 'app/icons';
-import {t} from 'app/locale';
-import space from 'app/styles/space';
-import {Event, Organization} from 'app/types';
-import EventView from 'app/utils/discover/eventView';
-import {eventDetailsRouteWithEventView} from 'app/utils/discover/urls';
-
-type LinksType = {
-  oldest: null;
-  latest: null;
-
-  next: {};
-  previous: {};
-};
-
-/**
- * Generate a mapping of link names => link targets for pagination
- */
-function buildTargets(
-  event: Event,
-  eventView: EventView,
-  organization: Organization
-): LinksType {
-  const urlMap: {[k in keyof LinksType]: string | undefined | null} = {
-    previous: event.previousEventID,
-    next: event.nextEventID,
-    oldest: event.oldestEventID,
-    latest: event.latestEventID,
-  };
-
-  const links: {[k in keyof LinksType]?: any} = {};
-
-  Object.entries(urlMap).forEach(([key, eventSlug]) => {
-    // If the urlMap has no value we want to skip this link as it is 'disabled';
-    if (!eventSlug) {
-      links[key] = null;
-    } else {
-      links[key] = eventDetailsRouteWithEventView({
-        eventSlug,
-        eventView,
-        orgSlug: organization.slug,
-      });
-    }
-  });
-
-  return links as LinksType;
-}
-
-type Props = {
-  event: Event;
-  organization: Organization;
-  eventView: EventView;
-};
-
-const Pagination = (props: Props) => {
-  const {event, organization, eventView} = props;
-  const links = buildTargets(event, eventView, organization);
-
-  return (
-    <Paginator merged>
-      <Button
-        size="small"
-        to={links.oldest || ''}
-        disabled={links.previous === null || links.oldest === null}
-        icon={<IconPrevious size="xs" />}
-      />
-      <Button
-        size="small"
-        data-test-id="older-event"
-        to={links.previous}
-        disabled={links.previous === null}
-      >
-        {t('Older')}
-      </Button>
-      <Button
-        size="small"
-        data-test-id="newer-event"
-        to={links.next}
-        disabled={links.next === null}
-      >
-        {t('Newer')}
-      </Button>
-      <Button
-        size="small"
-        to={links.latest || ''}
-        disabled={links.next === null || links.latest === null}
-        icon={<IconNext size="xs" />}
-      />
-    </Paginator>
-  );
-};
-
-const Paginator = styled(ButtonBar)`
-  margin-top: ${space(2)};
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    margin-left: ${space(1.5)};
-    margin-top: 0;
-  }
-`;
-
-export default Pagination;
diff --git a/src/sentry/static/sentry/images/graph/icon-location-filled.svg b/src/sentry/static/sentry/images/graph/icon-location-filled.svg
deleted file mode 100644
index 70447a59f6..0000000000
--- a/src/sentry/static/sentry/images/graph/icon-location-filled.svg
+++ /dev/null
@@ -1,5 +0,0 @@
-<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 150">
-  <title>icon-location-filled</title>
-  <path d="M8,134a.74.74,0,0,1,.45.15c4,3,6.09,6.16,6.09,9.29a6.54,6.54,0,1,1-13.08,0c0-3.13,2.05-6.26,6.09-9.29A.74.74,0,0,1,8,134Z" style="fill:#e03e2f"/>
-  <circle cx="8" cy="143.94" r="2.02" style="fill:#fff"/>
-</svg>
diff --git a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
index 60d2e3b40c..db1814a96b 100644
--- a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
@@ -103,9 +103,6 @@ describe('EventsV2 > EventDetails', function() {
     );
     const content = wrapper.find('EventHeader');
     expect(content.text()).toContain('Oh no something bad');
-
-    const graph = wrapper.find('LineGraph');
-    expect(graph).toHaveLength(0);
   });
 
   it('renders a 404', function() {
@@ -137,9 +134,6 @@ describe('EventsV2 > EventDetails', function() {
 
     const content = wrapper.find('EventHeader');
     expect(content.text()).toContain('Oh no something bad');
-
-    const graph = wrapper.find('LineGraph');
-    expect(graph).toHaveLength(1);
   });
 
   it('renders an alert when linked issues are missing', function() {
