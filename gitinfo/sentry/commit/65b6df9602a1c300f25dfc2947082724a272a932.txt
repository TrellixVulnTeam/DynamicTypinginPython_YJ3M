commit 65b6df9602a1c300f25dfc2947082724a272a932
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 3 19:41:10 2012 -0700

    Partial permissions code refactor

diff --git a/CHANGES b/CHANGES
index f1566a986b..d53815c08b 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,12 @@
+Version 5.0.0
+-------------
+
+- Variable versions of Django are no longer supported. Django 1.4.x must now be used.
+- Public projects are restricted to viewing without being authenticated.
+- The default behavior of Sentry is to now use timezone-aware datetimes everywhere.
+- Permissions have been refactored to be more precise.
+
+
 Version 4.10.0
 --------------
 
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index a4ccc38267..ea06a927f5 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -1,3 +1,13 @@
+"""
+sentry.constants
+~~~~~~~~~~~~~~~~
+
+These settings act as the default (base) settings for the Sentry-provided web-server
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
 from django.utils.datastructures import SortedDict
 from django.utils.translation import ugettext_lazy as _
 
@@ -34,3 +44,19 @@ SEARCH_SORT_OPTIONS = SortedDict((
     ('date', _('Last Seen')),
     ('new', _('First Seen')),
 ))
+
+STATUS_UNRESOLVED = 0
+STATUS_RESOLVED = 1
+STATUS_LEVELS = (
+    (STATUS_UNRESOLVED, _('unresolved')),
+    (STATUS_RESOLVED, _('resolved')),
+)
+
+MEMBER_OWNER = 0
+MEMBER_USER = 50
+MEMBER_SYSTEM = 100
+MEMBER_TYPES = (
+    (0, _('owner')),
+    (50, _('user')),
+    (100, _('system agent')),
+)
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index d7f3db7e81..18cf7eb221 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -420,8 +420,6 @@ class GroupManager(BaseManager, ChartMixin):
         elif timezone.is_aware(date):
             date = date.replace(tzinfo=None)
 
-        print date
-
         data = kwargs
 
         kwargs = {
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 680f41b1bf..4ca9035736 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -17,8 +17,10 @@ import urlparse
 from hashlib import md5
 from indexer.models import BaseIndex
 from picklefield.fields import PickledObjectField
+from south.modelsinspector import add_introspection_rules
 
 from django.contrib.auth.models import User
+from django.contrib.auth.signals import user_logged_in
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import F
@@ -31,6 +33,8 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
+from sentry.constants import STATUS_LEVELS, STATUS_RESOLVED, STATUS_UNRESOLVED, \
+  MEMBER_TYPES, MEMBER_OWNER, MEMBER_USER, MEMBER_SYSTEM  # NOQA
 from sentry.manager import GroupManager, ProjectManager, \
   MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager, \
   UserOptionManager, FilterKeyManager
@@ -41,29 +45,6 @@ from sentry.templatetags.sentry_helpers import truncatechars
 
 __all__ = ('Event', 'Group', 'Project', 'SearchDocument')
 
-STATUS_UNRESOLVED = 0
-STATUS_RESOLVED = 1
-STATUS_LEVELS = (
-    (STATUS_UNRESOLVED, _('unresolved')),
-    (STATUS_RESOLVED, _('resolved')),
-)
-
-# These are predefined builtin's
-FILTER_KEYS = (
-    ('server_name', _('server name')),
-    ('logger', _('logger')),
-    ('site', _('site')),
-)
-
-MEMBER_OWNER = 0
-MEMBER_USER = 50
-MEMBER_SYSTEM = 100
-MEMBER_TYPES = (
-    (0, _('owner')),
-    (50, _('user')),
-    (100, _('system agent')),
-)
-
 
 class Option(Model):
     """
@@ -588,7 +569,7 @@ class FilterKey(Model):
     Stores references to available filters keys.
     """
     project = models.ForeignKey(Project)
-    key = models.CharField(choices=FILTER_KEYS, max_length=32)
+    key = models.CharField(max_length=32)
 
     objects = FilterKeyManager()
 
@@ -604,7 +585,7 @@ class FilterValue(Model):
     Stores references to available filters.
     """
     project = models.ForeignKey(Project, null=True)
-    key = models.CharField(choices=FILTER_KEYS, max_length=32)
+    key = models.CharField(max_length=32)
     value = models.CharField(max_length=200)
 
     objects = BaseManager()
@@ -624,7 +605,7 @@ class MessageFilterValue(Model):
     project = models.ForeignKey(Project, null=True)
     group = models.ForeignKey(Group)
     times_seen = models.PositiveIntegerField(default=0)
-    key = models.CharField(choices=FILTER_KEYS, max_length=32)
+    key = models.CharField(max_length=32)
     value = models.CharField(max_length=200)
     last_seen = models.DateTimeField(default=timezone.now, db_index=True, null=True)
     first_seen = models.DateTimeField(default=timezone.now, db_index=True, null=True)
@@ -847,6 +828,7 @@ def remove_key_for_team_member(instance, **kwargs):
             user=instance.user,
         ).delete()
 
+
 # Set user language if set
 def set_language_on_logon(request, user, **kwargs):
     language = UserOption.objects.get_value(
@@ -894,16 +876,6 @@ pre_delete.connect(
     dispatch_uid="remove_key_for_team_member",
     weak=False,
 )
-# Only available in Django >= 1.3
-try:
-    from django.contrib.auth.signals import user_logged_in
-    user_logged_in.connect(set_language_on_logon)
-except:
-    pass
-
-try:
-    import south
-    from south.modelsinspector import add_introspection_rules
-    add_introspection_rules([], ["^social_auth\.fields\.JSONField"])
-except:
-    pass
+user_logged_in.connect(set_language_on_logon)
+
+add_introspection_rules([], ["^social_auth\.fields\.JSONField"])
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 0e44c119f1..89d7a612c8 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -5,88 +5,165 @@ sentry.permissions
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from functools import wraps
 from sentry.conf import settings
+from sentry.constants import MEMBER_OWNER
 from sentry.plugins import plugins
 
 
+def perm_override(perm):
+    def inner(func):
+        @wraps(func)
+        def wrapped(user, *args, **kwargs):
+            # permissions always take precedence
+            if user.has_perm('sentry.%s' % (perm,)):
+                return True
+
+            return func(user, *args, **kwargs)
+        return wrapped
+    return inner
+
+
+def requires_login(func):
+    @wraps(func)
+    def wrapped(user, *args, **kwargs):
+        if not (user and user.is_authenticated()):
+            return False
+
+        return func(user, *args, **kwargs)
+    return wrapped
+
+
+@requires_login
+@perm_override('can_add_project')
 def can_create_projects(user, team=None):
     """
     Returns a boolean describing whether a user has the ability to
     create new projects.
     """
-    if not (user and user.is_authenticated()):
+    # must be an owner of team
+    if team and not team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
         return False
 
-    if user.has_perm('sentry.can_add_project'):
-        return True
-
     result = plugins.first('has_perm', user, 'add_project', team)
     if result is None:
         result = settings.ALLOW_PROJECT_CREATION
 
     if result is False:
         return result
+
     return True
 
 
+@requires_login
+@perm_override('can_add_team')
 def can_create_teams(user):
     """
     Returns a boolean describing whether a user has the ability to
     create new projects.
     """
-    if not (user and user.is_authenticated()):
-        return False
-
-    if user.has_perm('sentry.can_add_team'):
-        return True
-
     result = plugins.first('has_perm', user, 'add_team')
     if result is None:
         result = settings.ALLOW_TEAM_CREATION
 
     if result is False:
         return result
+
     return True
 
 
+@requires_login
+@perm_override('can_change_project')
 def can_set_public_projects(user):
     """
     Returns a boolean describing whether a user has the ability to
     change the ``public`` attribute of projects.
     """
-    if not (user and user.is_authenticated()):
-        return False
-
-    if user.has_perm('sentry.can_change_project'):
-        return True
-
     result = plugins.first('has_perm', user, 'set_project_public')
     if result is None:
         result = settings.ALLOW_PUBLIC_PROJECTS
 
     if result is False:
         return result
+
     return True
 
 
+@requires_login
+@perm_override('can_add_teammember')
 def can_add_team_member(user, team):
+    # must be an owner of the team
+    if not team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+        return False
+
     result = plugins.first('has_perm', user, 'add_team_member', team)
-    if result is False and not user.has_perm('sentry.can_add_teammember'):
+    if result is False:
         return False
+
     return True
 
 
+@requires_login
+def can_manage_team_member(user, member, django_perm, perm):
+    # permissions always take precedence
+    if user.has_perm(django_perm):
+        return True
+
+    # must be an owner of the team
+    if not member.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+        return False
+
+    result = plugins.first('has_perm', user, perm, member)
+    if result is False:
+        return False
+
+    return True
+
+
+def can_edit_team_member(user, member):
+    return can_manage_team_member(user, member, 'sentry.can_change_teammember', 'edit_team_member')
+
+
+def can_remove_team_member(user, member):
+    return can_manage_team_member(user, member, 'sentry.can_remove_teammember', 'remove_team_member')
+
+
+@requires_login
 def can_remove_team(user, team):
+    # projects with teams can never be removed
     if team.project_set.exists():
         return False
+
+    # permissions always take precedence
+    if user.has_perm('sentry.can_remove_team'):
+        return True
+
+    # must be an owner of the team
+    if not team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+        return False
+
     result = plugins.first('has_perm', user, 'remove_team', team)
-    if result is False and not user.has_perm('sentry.can_remove_team'):
+    if result is False:
         return False
+
     return True
 
 
-def can_remove_project(user, team):
-    result = plugins.first('has_perm', user, 'remove_project', team)
-    if result is False and not user.has_perm('sentry.can_remove_project'):
+@requires_login
+def can_remove_project(user, project):
+    if project.is_default_project():
+        return False
+
+    # permissions always take precedence
+    if user.has_perm('sentry.can_remove_project'):
+        return True
+
+    # must be an owner of the team
+    if not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
         return False
+
+    result = plugins.first('has_perm', user, 'remove_project', project)
+    if result is True:
+        return True
+
     return True
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 4a18544943..a174a8dd3d 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -22,7 +22,7 @@ from sentry.exceptions import InvalidData
 from sentry.coreapi import project_from_auth_vars, project_from_id, \
   decode_and_decompress_data, safely_load_json_string, validate_data, \
   insert_data_to_database, APIError, APIUnauthorized, extract_auth_vars
-from sentry.models import Group, GroupBookmark, Project, View
+from sentry.models import Group, GroupBookmark, Project, View, MEMBER_USER
 from sentry.templatetags.sentry_helpers import as_bookmarks
 from sentry.utils import json
 from sentry.utils.cache import cache
@@ -228,7 +228,7 @@ def poll(request, project):
 
 
 @csrf_exempt
-@has_access
+@has_access(MEMBER_USER)
 @never_cache
 def resolve(request, project):
     gid = request.REQUEST.get('gid')
@@ -256,7 +256,7 @@ def resolve(request, project):
 
 
 @csrf_exempt
-@has_access
+@has_access(MEMBER_USER)
 @never_cache
 def make_group_public(request, project, group_id):
     try:
@@ -274,7 +274,7 @@ def make_group_public(request, project, group_id):
 
 
 @csrf_exempt
-@has_access
+@has_access(MEMBER_USER)
 @never_cache
 def make_group_private(request, project, group_id):
     try:
@@ -292,7 +292,7 @@ def make_group_private(request, project, group_id):
 
 
 @csrf_exempt
-@has_access
+@has_access(MEMBER_USER)
 @never_cache
 def remove_group(request, project, group_id):
     try:
@@ -311,7 +311,6 @@ def remove_group(request, project, group_id):
 
 
 @csrf_exempt
-@has_access
 @never_cache
 def bookmark(request, project):
     gid = request.REQUEST.get('gid')
@@ -340,7 +339,7 @@ def bookmark(request, project):
 
 
 @csrf_exempt
-@has_access
+@has_access(MEMBER_USER)
 @never_cache
 def clear(request, project):
     view_id = request.GET.get('view_id')
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index b2dfa5ed9f..665e74886d 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -33,7 +33,7 @@ def has_access(group_or_func=None):
         def _wrapped(request, project_id=None, *args, **kwargs):
             # If we're asking for anything other than implied access, the user
             # must be authenticated
-            if group_or_func and not request.user.is_authenticated():
+            if group_or_func is not None and not request.user.is_authenticated():
                 request.session['_next'] = request.build_absolute_uri()
                 return HttpResponseRedirect(get_login_url())
 
@@ -69,7 +69,7 @@ def has_access(group_or_func=None):
                 project_list = get_project_list(request.user, group_or_func, key=key)
                 try:
                     project = project_list[value]
-                except (KeyError, ValueError):
+                except KeyError:
                     return HttpResponseRedirect(reverse('sentry'))
             else:
                 project = None
@@ -111,7 +111,7 @@ def has_team_access(group_or_func=None):
             team_list = get_team_list(request.user, group_or_func)
             try:
                 team = team_list[team_slug]
-            except (KeyError, ValueError):
+            except KeyError:
                 return HttpResponseRedirect(reverse('sentry'))
 
             return func(request, team, *args, **kwargs)
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index ebf57a2c0a..56c9aeee9e 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -21,7 +21,8 @@ from sentry.conf import settings
 from sentry.constants import SORT_OPTIONS, SEARCH_SORT_OPTIONS, \
   SORT_CLAUSES, MYSQL_SORT_CLAUSES, SQLITE_SORT_CLAUSES
 from sentry.filters import get_filters
-from sentry.models import Group, Event, View, SearchDocument, TeamMember, MEMBER_OWNER
+from sentry.models import Group, Event, View, SearchDocument, TeamMember, MEMBER_OWNER, \
+  MEMBER_USER
 from sentry.plugins import plugins
 from sentry.utils import json
 from sentry.utils.dates import parse_date
@@ -336,7 +337,7 @@ def group_event_details_json(request, project, group, event_id_or_latest):
 
 
 @login_required
-@has_access
+@has_access(MEMBER_USER)
 def group_plugin_action(request, project, group_id, slug):
     group = get_object_or_404(Group, pk=group_id, project=project)
 
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index d421114811..b4c1e71e5d 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -11,7 +11,7 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
-from sentry.models import TeamMember, MEMBER_OWNER, \
+from sentry.models import TeamMember, MEMBER_OWNER, MEMBER_USER, \
   ProjectKey, Team, FilterKey
 from sentry.permissions import can_create_projects, can_remove_project, can_create_teams
 from sentry.plugins import plugins
@@ -107,13 +107,9 @@ def new_project(request):
     }, request)
 
 
-@login_required
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def remove_project(request, project):
-    if project.is_default_project():
-        return HttpResponseRedirect(reverse('sentry-project-list'))
-
     if not can_remove_project(request.user, project):
         return HttpResponseRedirect(reverse('sentry'))
 
@@ -144,7 +140,6 @@ def remove_project(request, project):
     return render_to_response('sentry/projects/remove.html', context, request)
 
 
-@login_required
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def manage_project(request, project):
@@ -152,7 +147,7 @@ def manage_project(request, project):
     if result is False and not request.user.has_perm('sentry.can_change_project'):
         return HttpResponseRedirect(reverse('sentry'))
 
-    team_list = get_team_list(request.user)
+    team_list = get_team_list(request.user, MEMBER_OWNER)
 
     if request.user.has_perm('sentry.can_change_project'):
         form_cls = EditProjectAdminForm
@@ -187,8 +182,7 @@ def manage_project(request, project):
     return render_to_response('sentry/projects/manage.html', context, request)
 
 
-@login_required
-@has_access
+@has_access(MEMBER_USER)
 def client_help(request, project):
     try:
         key = ProjectKey.objects.get(user=request.user, project=project)
@@ -209,7 +203,6 @@ def client_help(request, project):
     return render_to_response('sentry/projects/client_help.html', context, request)
 
 
-@login_required
 @has_access(MEMBER_OWNER)
 def manage_project_tags(request, project):
     tag_list = FilterKey.objects.all_keys(project)
@@ -235,7 +228,6 @@ def manage_project_tags(request, project):
     return render_to_response('sentry/projects/manage_tags.html', context, request)
 
 
-@login_required
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def configure_project_plugin(request, project, slug):
@@ -271,7 +263,6 @@ def configure_project_plugin(request, project, slug):
     return render_to_response('sentry/projects/plugins/configure.html', context, request)
 
 
-@login_required
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def manage_plugins(request, project):
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 77bc2c7ce7..c97308e20a 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -12,7 +12,7 @@ from django.views.decorators.csrf import csrf_protect
 
 from sentry.models import PendingTeamMember, TeamMember, MEMBER_USER, MEMBER_OWNER
 from sentry.permissions import can_add_team_member, can_remove_team, can_create_projects, \
-  can_create_teams
+  can_create_teams, can_edit_team_member, can_remove_team_member
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required, has_team_access
 from sentry.web.forms.teams import NewTeamForm, NewTeamAdminForm, \
@@ -193,8 +193,7 @@ def edit_team_member(request, team, member_id):
     except TeamMember.DoesNotExist:
         return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
 
-    result = plugins.first('has_perm', request.user, 'edit_team_member', member)
-    if result is False and not request.user.has_perm('sentry.can_change_teammember'):
+    if not can_edit_team_member(request.user, member):
         return HttpResponseRedirect(reverse('sentry'))
 
     form = EditTeamMemberForm(team, request.POST or None, instance=member)
@@ -223,8 +222,7 @@ def remove_team_member(request, team, member_id):
     if member.user == team.owner:
         return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
 
-    result = plugins.first('has_perm', request.user, 'remove_team_member', member)
-    if result is False and not request.user.has_perm('sentry.can_remove_teammember'):
+    if not can_remove_team_member(request.user, member):
         return HttpResponseRedirect(reverse('sentry'))
 
     if request.POST:
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 40cde22337..22cacfd578 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -18,7 +18,7 @@ from django.utils.safestring import mark_safe
 
 from sentry.conf import settings
 from sentry.models import Project, View, \
-  MEMBER_USER, Option, ProjectOption, Team
+  Option, ProjectOption, Team, MEMBER_USER
 from sentry.permissions import can_create_projects, can_create_teams
 
 logger = logging.getLogger('sentry.errors')
@@ -28,9 +28,6 @@ def get_project_list(user=None, access=None, hidden=False, key='id'):
     """
     Returns a SortedDict of all projects a user has some level of access to.
     """
-    if access is None:
-        access = MEMBER_USER
-
     base_qs = Project.objects
     if not hidden:
         base_qs = base_qs.filter(status=0)
@@ -41,33 +38,36 @@ def get_project_list(user=None, access=None, hidden=False, key='id'):
 
     # If we're not requesting specific access include all
     # public projects
-    if access <= MEMBER_USER:
+    if access is None:
         filters |= Q(public=True)
 
     # If the user is authenticated, include their memberships
-    if user and user.is_authenticated():
+    elif user and user.is_authenticated():
         teams = get_team_list(user, access).values()
+        if not teams:
+            return SortedDict()
         filters |= Q(team__in=teams)
 
+    else:
+        return SortedDict()
+
     return SortedDict((getattr(p, key), p)
         for p in base_qs.filter(filters).order_by('name'))
 
 
-def get_team_list(user, access=None):
+def get_team_list(user, access=MEMBER_USER):
     """
     Returns a SortedDict of all teams a user has some level of access to.
     """
-    if access is None:
-        access = MEMBER_USER
-
-    if not user.is_authenticated():
+    if access is None or not user.is_authenticated():
         return SortedDict()
 
     qs = Team.objects.filter(
         member_set__user=user,
         member_set__is_active=True,
-        member_set__type__lte=access,
+        member_set__type__lte=access
     ).order_by('name')
+
     return SortedDict((p.slug, p) for p in qs)
 
 _LOGIN_URL = None
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 04ac41c27e..aea41c356e 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -101,7 +101,7 @@ class SentryViewsTest(TestCase):
         self.assertEquals(json.loads(resp.content)[0]['level'], 'error')
         resp = self.client.get(reverse('sentry-group-events-json', kwargs={'project_id': 1, 'group_id': 2}), {'limit': 1})
         self.assertEquals(resp.status_code, 200)
-        resp = self.client.get(reverse('sentry-group-events-json', kwargs={'project_id': 1, 'group_id': 2}), {'limit': settings.MAX_JSON_RESULTS+1})
+        resp = self.client.get(reverse('sentry-group-events-json', kwargs={'project_id': 1, 'group_id': 2}), {'limit': settings.MAX_JSON_RESULTS + 1})
         self.assertEquals(resp.status_code, 400)
 
     def test_group_events_details_json(self):
@@ -160,7 +160,7 @@ class SentryViewsTest(TestCase):
         # self.assertTemplateUsed(resp, 'sentry/events/replay.html')
 
 
-class ViewPermissionTest(TestCase):
+class PermissionBase(TestCase):
     """
     These tests simply ensure permission requirements for various views.
     """
@@ -179,7 +179,7 @@ class ViewPermissionTest(TestCase):
         self.user4 = User(username="owner", email="owner@localhost")
         self.user4.set_password('owner')
         self.user4.save()
-        self.team = Team.objects.create(owner=self.user4, name='foo')
+        self.team = Team.objects.create(owner=self.user4, name='foo', slug='foo')
         self.project = Project.objects.get(id=1)
         self.project.update(public=False, team=self.team)
         self.tm = TeamMember.objects.get_or_create(
@@ -211,78 +211,182 @@ class ViewPermissionTest(TestCase):
             self.assertEquals(resp.status_code, 302)
             self.assertTemplateNotUsed(resp, template)
 
-    def test_project_list(self):
-        path = reverse('sentry-project-list')
-        template = 'sentry/projects/list.html'
 
-        self._assertPerm(path, template, 'admin')
-        self._assertPerm(path, template, 'nobody')
-        self._assertPerm(path, template, None, False)
+class ProjectListTest(PermissionBase):
+    path = reverse('sentry-project-list')
+    template = 'sentry/projects/list.html'
 
-    def test_new_project(self):
-        path = reverse('sentry-new-project')
-        template = 'sentry/projects/new.html'
+    def test_admin_can_load(self):
+        self._assertPerm(self.path, self.template, 'admin')
 
-        self._assertPerm(path, template, 'admin')
-        self._assertPerm(path, template, 'nobody', False)
-        self._assertPerm(path, template, None, False)
+    def test_user_can_load(self):
+        self._assertPerm(self.path, self.template, 'nobody')
 
+    def test_anonymous_cannot_load(self):
+        self._assertPerm(self.path, self.template, None, False)
+
+
+class NewProjectTest(PermissionBase):
+    path = reverse('sentry-new-project')
+    template = 'sentry/projects/new.html'
+
+    def test_admin_can_load(self):
+        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
+            self._assertPerm(self.path, self.template, 'admin')
+
+    def test_user_cannot_load(self):
+        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
+            self._assertPerm(self.path, self.template, 'nobody', False)
+
+    def test_anonymous_cannot_load(self):
+        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
+            self._assertPerm(self.path, self.template, None, False)
+
+    def test_public_creation_admin_can_load(self):
+        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
+            self._assertPerm(self.path, self.template, 'admin')
+
+    def test_public_creation_user_can_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
-            self._assertPerm(path, template, 'admin')
-            self._assertPerm(path, template, 'nobody')
-            self._assertPerm(path, template, None, False)
-
-    def test_manage_project(self):
-        path = reverse('sentry-manage-project', kwargs={'project_id': 1})
-        template = 'sentry/projects/manage.html'
-
-        self._assertPerm(path, template, 'admin')
-        self._assertPerm(path, template, 'owner')
-        self._assertPerm(path, template, None, False)
-        self._assertPerm(path, template, 'nobody', False)
-        self._assertPerm(path, template, 'member', False)
-
-    def test_remove_project(self):
-        # We cant delete the default project
+            self._assertPerm(self.path, self.template, 'nobody')
+
+    def test_public_anonymous_cannot_load(self):
+        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
+            self._assertPerm(self.path, self.template, None, False)
+
+
+class ManageProjectTest(PermissionBase):
+    path = reverse('sentry-manage-project', kwargs={'project_id': 1})
+    template = 'sentry/projects/manage.html'
+
+    def test_admin_can_load(self):
+        self._assertPerm(self.path, self.template, 'admin')
+
+    def test_owner_can_load(self):
+        self._assertPerm(self.path, self.template, 'owner')
+
+    def test_anonymous_cannot_load(self):
+        self._assertPerm(self.path, self.template, None, False)
+
+    def test_user_cannot_load(self):
+        self._assertPerm(self.path, self.template, 'nobody', False)
+
+    def test_member_cannot_load(self):
+        self._assertPerm(self.path, self.template, 'member', False)
+
+
+class RemoveProjectTest(PermissionBase):
+    path = reverse('sentry-remove-project', kwargs={'project_id': 1})
+    template = 'sentry/projects/remove.html'
+
+    def test_admin_cannot_remove_default(self):
+        with self.Settings(SENTRY_PROJECT=1):
+            self._assertPerm(self.path, self.template, 'admin', False)
+
+    def test_owner_cannot_remove_default(self):
+        with self.Settings(SENTRY_PROJECT=1):
+            self._assertPerm(self.path, self.template, 'owner', False)
+
+    def test_anonymous_cannot_remove_default(self):
+        with self.Settings(SENTRY_PROJECT=1):
+            self._assertPerm(self.path, self.template, None, False)
+
+    def test_user_cannot_remove_default(self):
+        with self.Settings(SENTRY_PROJECT=1):
+            self._assertPerm(self.path, self.template, 'nobody', False)
+
+    def test_member_cannot_remove_default(self):
+        with self.Settings(SENTRY_PROJECT=1):
+            self._assertPerm(self.path, self.template, 'member', False)
+
+    def test_admin_can_load(self):
+        with self.Settings(SENTRY_PROJECT=2):
+            self._assertPerm(self.path, self.template, 'admin')
+
+    def test_owner_can_load(self):
+        with self.Settings(SENTRY_PROJECT=2):
+            self._assertPerm(self.path, self.template, 'owner')
+
+    def test_anonymous_cannot_load(self):
+        with self.Settings(SENTRY_PROJECT=2):
+            self._assertPerm(self.path, self.template, None, False)
+
+    def test_user_cannot_load(self):
+        with self.Settings(SENTRY_PROJECT=2):
+            self._assertPerm(self.path, self.template, 'nobody', False)
+
+    def test_member_cannot_load(self):
         with self.Settings(SENTRY_PROJECT=2):
-            path = reverse('sentry-remove-project', kwargs={'project_id': 1})
-            template = 'sentry/projects/remove.html'
-
-            self._assertPerm(path, template, 'admin')
-            self._assertPerm(path, template, 'owner')
-            self._assertPerm(path, template, None, False)
-            self._assertPerm(path, template, 'nobody', False)
-            self._assertPerm(path, template, 'member', False)
-
-    def test_new_team_member(self):
-        path = reverse('sentry-new-team-member', kwargs={'team_slug': self.team.slug})
-        template = 'sentry/teams/members/new.html'
-
-        self._assertPerm(path, template, 'admin')
-        self._assertPerm(path, template, 'owner')
-        self._assertPerm(path, template, None, False)
-        self._assertPerm(path, template, 'nobody', False)
-        self._assertPerm(path, template, 'member', False)
-
-    def test_edit_team_member(self):
-        path = reverse('sentry-edit-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
-        template = 'sentry/teams/members/edit.html'
-
-        self._assertPerm(path, template, 'admin')
-        self._assertPerm(path, template, 'owner')
-        self._assertPerm(path, template, None, False)
-        self._assertPerm(path, template, 'nobody', False)
-        self._assertPerm(path, template, 'member', False)
-
-    def test_remove_team_member(self):
-        path = reverse('sentry-remove-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
-        template = 'sentry/teams/members/remove.html'
-
-        self._assertPerm(path, template, 'admin')
-        self._assertPerm(path, template, 'owner')
-        self._assertPerm(path, template, None, False)
-        self._assertPerm(path, template, 'nobody', False)
-        self._assertPerm(path, template, 'member', False)
+            self._assertPerm(self.path, self.template, 'member', False)
+
+
+class NewTeamMemberTest(PermissionBase):
+    template = 'sentry/teams/members/new.html'
+
+    def setUp(self):
+        super(NewTeamMemberTest, self).setUp()
+        self.path = reverse('sentry-new-team-member', kwargs={'team_slug': self.team.slug})
+
+    def test_admin_can_load(self):
+        self._assertPerm(self.path, self.template, 'admin')
+
+    def test_owner_can_load(self):
+        self._assertPerm(self.path, self.template, 'owner')
+
+    def test_anonymous_cannot_load(self):
+        self._assertPerm(self.path, self.template, None, False)
+
+    def test_user_cannot_load(self):
+        self._assertPerm(self.path, self.template, 'nobody', False)
+
+    def test_member_cannot_load(self):
+        self._assertPerm(self.path, self.template, 'member', False)
+
+
+class EditTeamMemberTest(PermissionBase):
+    template = 'sentry/teams/members/edit.html'
+
+    def setUp(self):
+        super(EditTeamMemberTest, self).setUp()
+        self.path = reverse('sentry-edit-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
+
+    def test_admin_can_load(self):
+        self._assertPerm(self.path, self.template, 'admin')
+
+    def test_owner_can_load(self):
+        self._assertPerm(self.path, self.template, 'owner')
+
+    def test_anonymous_cannot_load(self):
+        self._assertPerm(self.path, self.template, None, False)
+
+    def test_user_cannot_load(self):
+        self._assertPerm(self.path, self.template, 'nobody', False)
+
+    def test_member_cannot_load(self):
+        self._assertPerm(self.path, self.template, 'member', False)
+
+
+class RemoveTeamMemberTest(PermissionBase):
+    template = 'sentry/teams/members/remove.html'
+
+    def setUp(self):
+        super(RemoveTeamMemberTest, self).setUp()
+        self.path = reverse('sentry-remove-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
+
+    def test_admin_can_load(self):
+        self._assertPerm(self.path, self.template, 'admin')
+
+    def test_owner_can_load(self):
+        self._assertPerm(self.path, self.template, 'owner')
+
+    def test_anonymous_cannot_load(self):
+        self._assertPerm(self.path, self.template, None, False)
+
+    def test_user_cannot_load(self):
+        self._assertPerm(self.path, self.template, 'nobody', False)
+
+    def test_member_cannot_load(self):
+        self._assertPerm(self.path, self.template, 'member', False)
 
 
 class SentrySearchTest(TestCase):
