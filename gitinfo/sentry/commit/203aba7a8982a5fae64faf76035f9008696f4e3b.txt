commit 203aba7a8982a5fae64faf76035f9008696f4e3b
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Apr 9 08:36:26 2020 -0400

    feat(perf-view): Display Key Transactions (#17954)

diff --git a/src/sentry/static/sentry/app/actionCreators/events.tsx b/src/sentry/static/sentry/app/actionCreators/events.tsx
index 70e6d76ed3..bb285a80c6 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.tsx
@@ -7,7 +7,13 @@ import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviou
 import {getPeriod} from 'app/utils/getPeriod';
 import {EventsStats, Organization, YAxisEventsStats} from 'app/types';
 
-const getBaseUrl = (org: Organization) => `/organizations/${org.slug}/events-stats/`;
+function getBaseUrl(org: Organization, keyTransactions: boolean | undefined) {
+  if (keyTransactions) {
+    return `/organizations/${org.slug}/key-transactions-stats/`;
+  }
+
+  return `/organizations/${org.slug}/events-stats/`;
+}
 
 type Options = {
   organization: Organization;
@@ -23,6 +29,7 @@ type Options = {
   yAxis?: string | string[];
   field?: string[];
   referenceEvent?: string;
+  keyTransactions?: boolean;
 };
 
 /**
@@ -54,6 +61,7 @@ export const doEventsRequest = (
     yAxis,
     field,
     referenceEvent,
+    keyTransactions,
   }: Options
 ): Promise<EventsStats | YAxisEventsStats> => {
   const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);
@@ -74,7 +82,7 @@ export const doEventsRequest = (
   // the tradeoff for now.
   const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});
 
-  return api.requestPromise(`${getBaseUrl(organization)}`, {
+  return api.requestPromise(`${getBaseUrl(organization, keyTransactions)}`, {
     query: {
       ...urlQuery,
       ...periodObj,
diff --git a/src/sentry/static/sentry/app/actionCreators/performance.tsx b/src/sentry/static/sentry/app/actionCreators/performance.tsx
new file mode 100644
index 0000000000..96eb37d745
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/performance.tsx
@@ -0,0 +1,71 @@
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+
+export function saveKeyTransaction(
+  api: Client,
+  orgId: string,
+  projects: number[],
+  transactionName: string
+): Promise<undefined> {
+  const promise: Promise<undefined> = api.requestPromise(
+    `/organizations/${orgId}/key-transactions/`,
+    {
+      method: 'POST',
+      query: {
+        project: projects.map(id => String(id)),
+      },
+      data: {transaction: transactionName},
+    }
+  );
+
+  promise.catch(response => {
+    const non_field_errors = response?.responseJSON?.non_field_errors;
+
+    if (
+      Array.isArray(non_field_errors) &&
+      non_field_errors.length &&
+      non_field_errors[0]
+    ) {
+      addErrorMessage(response.responseJSON.non_field_errors[0]);
+    } else {
+      addErrorMessage(t('Unable to update key transaction'));
+    }
+  });
+
+  return promise;
+}
+
+export function deleteKeyTransaction(
+  api: Client,
+  orgId: string,
+  projects: number[],
+  transactionName: string
+): Promise<undefined> {
+  const promise: Promise<undefined> = api.requestPromise(
+    `/organizations/${orgId}/key-transactions/`,
+    {
+      method: 'DELETE',
+      query: {
+        project: projects.map(id => String(id)),
+      },
+      data: {transaction: transactionName},
+    }
+  );
+
+  promise.catch(response => {
+    const non_field_errors = response?.responseJSON?.non_field_errors;
+
+    if (
+      Array.isArray(non_field_errors) &&
+      non_field_errors.length &&
+      non_field_errors[0]
+    ) {
+      addErrorMessage(response.responseJSON.non_field_errors[0]);
+    } else {
+      addErrorMessage(t('Unable to update key transaction'));
+    }
+  });
+
+  return promise;
+}
diff --git a/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx b/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx
index 080d8526ef..e859ec2a26 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx
@@ -20,6 +20,7 @@ type Props = {
   eventView: EventView;
   organization: Organization;
   extraQuery?: {[key: string]: any};
+  keyTransactions?: boolean;
 
   children: (props: ChildrenProps) => React.ReactNode;
 };
@@ -29,6 +30,10 @@ type State = {
 } & ChildrenProps;
 
 class EventsV2 extends React.Component<Props, State> {
+  static defaultProps = {
+    keyTransactions: false,
+  };
+
   state: State = {
     isLoading: true,
     tableFetchID: undefined,
@@ -43,12 +48,18 @@ class EventsV2 extends React.Component<Props, State> {
   }
 
   componentDidUpdate(prevProps: Props) {
-    // Reload data if we aren't already loading, or if we've moved
-    // from an invalid view state to a valid one.
-    if (
-      (!this.state.isLoading && this.shouldRefetchData(prevProps)) ||
-      (prevProps.eventView.isValid() === false && this.props.eventView.isValid())
-    ) {
+    // Reload data if we aren't already loading,
+    const refetchCondition = !this.state.isLoading && this.shouldRefetchData(prevProps);
+
+    // or if we've moved from an invalid view state to a valid one,
+    const eventViewValidation =
+      prevProps.eventView.isValid() === false && this.props.eventView.isValid();
+
+    // or if toggling between key transactions and all transactions
+    const togglingTransactionsView =
+      prevProps.keyTransactions !== this.props.keyTransactions;
+
+    if (refetchCondition || eventViewValidation || togglingTransactionsView) {
       this.fetchData();
     }
   }
@@ -61,13 +72,15 @@ class EventsV2 extends React.Component<Props, State> {
   };
 
   fetchData = () => {
-    const {eventView, organization, location, extraQuery} = this.props;
+    const {eventView, organization, location, extraQuery, keyTransactions} = this.props;
 
     if (!eventView.isValid()) {
       return;
     }
 
-    const url = `/organizations/${organization.slug}/eventsv2/`;
+    const route = keyTransactions ? 'key-transactions' : 'eventsv2';
+
+    const url = `/organizations/${organization.slug}/${route}/`;
     const tableFetchID = Symbol('tableFetchID');
     const apiPayload = eventView.getEventsAPIPayload(location);
 
diff --git a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
index 7738af7799..f217ac112a 100644
--- a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
@@ -60,6 +60,7 @@ type EventsRequestPartialProps = {
   currentSeriesName?: string;
   previousSeriesName?: string;
   children: (renderProps: RenderProps) => React.ReactNode;
+  keyTransactions?: boolean;
 };
 
 type TimeAggregationProps =
@@ -180,6 +181,11 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
 
     field: PropTypes.arrayOf(PropTypes.string),
     referenceEvent: PropTypes.string,
+
+    /**
+     * Determines if the "key transactions" version of the event-stats endpoint should be used
+     */
+    keyTransactions: PropTypes.bool,
   };
 
   static defaultProps: DefaultProps = {
diff --git a/src/sentry/static/sentry/app/views/performance/charts/index.tsx b/src/sentry/static/sentry/app/views/performance/charts/index.tsx
index 5cceb96caa..3982674246 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/index.tsx
@@ -41,11 +41,12 @@ type Props = {
   organization: Organization;
   location: Location;
   router: ReactRouter.InjectedRouter;
+  keyTransactions: boolean;
 };
 
 class Container extends React.Component<Props> {
   render() {
-    const {api, organization, location, eventView, router} = this.props;
+    const {api, organization, location, eventView, router, keyTransactions} = this.props;
 
     // construct request parameters for fetching chart data
 
@@ -83,6 +84,7 @@ class Container extends React.Component<Props> {
             query={eventView.getEventsAPIPayload(location).query}
             includePrevious={false}
             yAxis={YAXIS_OPTIONS.map(option => option.value)}
+            keyTransactions={keyTransactions}
           >
             {({loading, reloading, errored, results}) => {
               if (errored) {
diff --git a/src/sentry/static/sentry/app/views/performance/landing.tsx b/src/sentry/static/sentry/app/views/performance/landing.tsx
index 0d2fed13b2..e949918d2e 100644
--- a/src/sentry/static/sentry/app/views/performance/landing.tsx
+++ b/src/sentry/static/sentry/app/views/performance/landing.tsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import {Location} from 'history';
 import * as ReactRouter from 'react-router';
+import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
 import {Organization} from 'app/types';
@@ -13,12 +14,21 @@ import Alert from 'app/components/alert';
 import EventView from 'app/utils/discover/eventView';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
-import {StyledPageHeader} from 'app/views/eventsV2/landing';
+import space from 'app/styles/space';
+import Button from 'app/components/button';
+import ButtonBar from 'app/components/buttonBar';
 
 import {generatePerformanceEventView, DEFAULT_STATS_PERIOD} from './data';
 import Table from './table';
 import Charts from './charts/index';
 
+enum FilterViews {
+  ALL_TRANSACTIONS = 'ALL_TRANSACTIONS',
+  KEY_TRANSACTIONS = 'KEY_TRANSACTIONS',
+}
+
+const VIEWS = Object.values(FilterViews);
+
 type Props = {
   organization: Organization;
   location: Location;
@@ -28,6 +38,7 @@ type Props = {
 type State = {
   eventView: EventView;
   error: string | undefined;
+  currentView: FilterViews;
 };
 
 class PerformanceLanding extends React.Component<Props, State> {
@@ -35,9 +46,10 @@ class PerformanceLanding extends React.Component<Props, State> {
     return {...prevState, eventView: generatePerformanceEventView(nextProps.location)};
   }
 
-  state = {
+  state: State = {
     eventView: generatePerformanceEventView(this.props.location),
     error: undefined,
+    currentView: FilterViews.ALL_TRANSACTIONS,
   };
 
   renderError = () => {
@@ -100,6 +112,44 @@ class PerformanceLanding extends React.Component<Props, State> {
     return false;
   };
 
+  getViewLabel(currentView: FilterViews): string {
+    switch (currentView) {
+      case FilterViews.ALL_TRANSACTIONS:
+        return t('All Transactions');
+      case FilterViews.KEY_TRANSACTIONS:
+        return t('My Key Transactions');
+      default:
+        throw Error(`Unknown view: ${currentView}`);
+    }
+  }
+
+  renderDropdown() {
+    const selectView = (viewKey: FilterViews) => {
+      return () => {
+        this.setState({
+          currentView: viewKey,
+        });
+      };
+    };
+
+    return (
+      <ButtonBar merged active={this.state.currentView}>
+        {VIEWS.map(viewKey => {
+          return (
+            <Button
+              key={viewKey}
+              barId={viewKey}
+              size="small"
+              onClick={selectView(viewKey)}
+            >
+              {this.getViewLabel(viewKey)}
+            </Button>
+          );
+        })}
+      </ButtonBar>
+    );
+  }
+
   render() {
     const {organization, location, router} = this.props;
     const {eventView} = this.state;
@@ -114,19 +164,24 @@ class PerformanceLanding extends React.Component<Props, State> {
           />
           <PageContent>
             <NoProjectMessage organization={organization}>
-              <StyledPageHeader>{t('Performance')}</StyledPageHeader>
+              <StyledPageHeader>
+                <div>{t('Performance')}</div>
+                <div>{this.renderDropdown()}</div>
+              </StyledPageHeader>
               {this.renderError()}
               <Charts
                 eventView={eventView}
                 organization={organization}
                 location={location}
                 router={router}
+                keyTransactions={this.state.currentView === 'KEY_TRANSACTIONS'}
               />
               <Table
                 eventView={eventView}
                 organization={organization}
                 location={location}
                 setError={this.setError}
+                keyTransactions={this.state.currentView === 'KEY_TRANSACTIONS'}
               />
             </NoProjectMessage>
           </PageContent>
@@ -136,4 +191,14 @@ class PerformanceLanding extends React.Component<Props, State> {
   }
 }
 
+export const StyledPageHeader = styled('div')`
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  font-size: ${p => p.theme.headerFontSize};
+  color: ${p => p.theme.gray4};
+  height: 40px;
+  margin-bottom: ${space(1)};
+`;
+
 export default withOrganization(PerformanceLanding);
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index 0f242c65ee..3dd250085e 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -60,6 +60,7 @@ type Props = {
   organization: Organization;
   location: Location;
   setError: (msg: string | undefined) => void;
+  keyTransactions: boolean;
 
   projects: Project[];
   loadingProjects: boolean;
@@ -240,11 +241,16 @@ class Table extends React.Component<Props> {
   };
 
   render() {
-    const {eventView, organization, location} = this.props;
+    const {eventView, organization, location, keyTransactions} = this.props;
     const columnOrder = eventView.getColumns();
 
     return (
-      <EventsV2 eventView={eventView} organization={organization} location={location}>
+      <EventsV2
+        eventView={eventView}
+        organization={organization}
+        location={location}
+        keyTransactions={keyTransactions}
+      >
         {({pageLinks, isLoading, tableData}) => (
           <div>
             <StyledSearchBar
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index 867f8c7c4e..80f94b1b08 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -12,6 +12,7 @@ import EventsV2 from 'app/utils/discover/eventsv2';
 import SummaryContentTable from './table';
 import Breadcrumb from './breadcrumb';
 import UserStats from './userStats';
+import KeyTransactionButton from './keyTransactionButton';
 
 const TOP_SLOWEST_TRANSACTIONS = 5;
 
@@ -24,6 +25,18 @@ type Props = {
 };
 
 class SummaryContent extends React.Component<Props> {
+  renderKeyTransactionButton() {
+    const {eventView, organization, transactionName} = this.props;
+
+    return (
+      <KeyTransactionButton
+        transactionName={transactionName}
+        eventView={eventView}
+        organization={organization}
+      />
+    );
+  }
+
   render() {
     const {transactionName, location, eventView, organization, totalValues} = this.props;
 
@@ -38,6 +51,9 @@ class SummaryContent extends React.Component<Props> {
               transactionName={transactionName}
             />
           </div>
+          <KeyTransactionContainer>
+            {this.renderKeyTransactionButton()}
+          </KeyTransactionContainer>
           <StyledTitleHeader>{transactionName}</StyledTitleHeader>
         </HeaderBox>
         <ContentBox>
@@ -92,4 +108,9 @@ const Side = styled('div')`
   grid-column: 2/3;
 `;
 
+const KeyTransactionContainer = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+`;
+
 export default SummaryContent;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/keyTransactionButton.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/keyTransactionButton.tsx
new file mode 100644
index 0000000000..22b23aae61
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/keyTransactionButton.tsx
@@ -0,0 +1,152 @@
+import React from 'react';
+
+import withApi from 'app/utils/withApi';
+import {Client} from 'app/api';
+import Button from 'app/components/button';
+import {IconStar} from 'app/icons';
+import {t} from 'app/locale';
+import theme from 'app/utils/theme';
+import EventView from 'app/utils/discover/eventView';
+import {Organization} from 'app/types';
+import {saveKeyTransaction, deleteKeyTransaction} from 'app/actionCreators/performance';
+
+type Props = {
+  api: Client;
+  eventView: EventView;
+  organization: Organization;
+  transactionName: string;
+};
+
+type State = {
+  isLoading: boolean;
+  keyFetchID: symbol | undefined;
+  error: null | string;
+
+  isKeyTransaction: boolean;
+};
+
+class KeyTransactionButton extends React.Component<Props, State> {
+  state: State = {
+    isLoading: true,
+    keyFetchID: undefined,
+    error: null,
+
+    isKeyTransaction: false,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    const orgSlugChanged = prevProps.organization.slug !== this.props.organization.slug;
+    const projectsChanged =
+      prevProps.eventView.project.length === 1 &&
+      this.props.eventView.project.length === 1 &&
+      prevProps.eventView.project[0] !== this.props.eventView.project[0];
+
+    if (orgSlugChanged || projectsChanged) {
+      this.fetchData();
+    }
+  }
+
+  fetchData = () => {
+    const {organization, eventView, transactionName} = this.props;
+
+    const projects = eventView.project as number[];
+
+    if (projects.length !== 1) {
+      return;
+    }
+
+    const url = `/organizations/${organization.slug}/is-key-transactions/`;
+    const keyFetchID = Symbol('keyFetchID');
+
+    this.setState({isLoading: true, keyFetchID});
+
+    this.props.api
+      .requestPromise(url, {
+        method: 'GET',
+        includeAllArgs: true,
+        query: {
+          project: projects.map(id => String(id)),
+          transaction: transactionName,
+        },
+      })
+      .then(([data, _, _jqXHR]) => {
+        if (this.state.keyFetchID !== keyFetchID) {
+          // invariant: a different request was initiated after this request
+          return;
+        }
+
+        this.setState({
+          isLoading: false,
+          keyFetchID: undefined,
+          error: null,
+          isKeyTransaction: !!data?.isKey,
+        });
+      })
+      .catch(err => {
+        this.setState({
+          isLoading: false,
+          keyFetchID: undefined,
+          error: err.responseJSON.detail,
+          isKeyTransaction: false,
+        });
+      });
+  };
+
+  toggleKeyTransaction = () => {
+    const {eventView, api, organization, transactionName} = this.props;
+    const projects = eventView.project as number[];
+
+    if (!this.state.isKeyTransaction) {
+      this.setState({
+        isKeyTransaction: true,
+      });
+
+      saveKeyTransaction(api, organization.slug, projects, transactionName).catch(() => {
+        this.setState({
+          isKeyTransaction: false,
+        });
+      });
+    } else {
+      this.setState({
+        isKeyTransaction: false,
+      });
+
+      deleteKeyTransaction(api, organization.slug, projects, transactionName).catch(
+        () => {
+          this.setState({
+            isKeyTransaction: true,
+          });
+        }
+      );
+    }
+  };
+
+  render() {
+    const {isKeyTransaction, isLoading} = this.state;
+
+    if (this.props.eventView.project.length !== 1 || isLoading) {
+      return null;
+    }
+
+    return (
+      <Button
+        icon={
+          <IconStar
+            size="xs"
+            color={isKeyTransaction ? theme.yellow : undefined}
+            solid={!!isKeyTransaction}
+          />
+        }
+        onClick={this.toggleKeyTransaction}
+      >
+        {t('Key Transaction')}
+      </Button>
+    );
+  }
+}
+
+export default withApi(KeyTransactionButton);
