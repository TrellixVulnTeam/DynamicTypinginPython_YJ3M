commit 9be64bfc7cf5365f6e02a75a05b1fea30b37cd5c
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 25 15:34:04 2016 +0100

    Improvements to the native stacktrace rendering and symbol handling

diff --git a/src/sentry/migrations/0235_auto__add_dsymfile__add_unique_dsymfile_project_uuid.py b/src/sentry/migrations/0235_auto__add_dsymfile__add_unique_dsymfile_project_uuid.py
index 14e984b06b..f0a7409c02 100644
--- a/src/sentry/migrations/0235_auto__add_dsymfile__add_unique_dsymfile_project_uuid.py
+++ b/src/sentry/migrations/0235_auto__add_dsymfile__add_unique_dsymfile_project_uuid.py
@@ -502,4 +502,4 @@ class Migration(SchemaMigration):
         }
     }
 
-    complete_apps = ['sentry']
\ No newline at end of file
+    complete_apps = ['sentry']
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 56f1fb9cae..2b817440ae 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -56,6 +56,13 @@ class DSymFile(Model):
         object to a dsym file.  This will not verify the uuid.  Use
         `create_files_from_macho_zip` for doing everything.
         """
+        # If we already have a match, return that one.  This is especially
+        # necessary for global dsyms which do not have a unique index
+        try:
+            return DSymFile.objects.get(project=project, uuid=uuid)
+        except DSymFile.DoesNotExist:
+            pass
+
         file = File.objects.create(
             name=uuid,
             type='%s.dsym' % (project and 'project' or 'global'),
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 4862d78757..da827bd1d8 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -95,7 +95,10 @@ const Frame = React.createClass({
       title.push(<code key="function">{data.function}</code>);
     }
 
-    if (defined(data.lineNo)) {
+    // we don't want to render out zero line numbers which are used to
+    // indicate lack of source information for native setups.  We could
+    // TODO(mitsuhiko): only do this for events from native platforms?
+    if (defined(data.lineNo) && data.lineNo != 0) {
       // TODO(dcramer): we need to implement source mappings
       // title.push(<span className="pull-right blame"><a><span className="icon-mark-github"></span> View Code</a></span>);
       title.push(<span className="in-at" key="at"> {t('at line')} </span>);
@@ -106,6 +109,11 @@ const Frame = React.createClass({
       }
     }
 
+    if (defined(data.package)) {
+      title.push(<span className="within" key="within"> {t('within')} </span>);
+      title.push(<code>{data.package}</code>);
+    }
+
     if (defined(data.origAbsPath)) {
       title.push(
         <a key="original-src" className="in-at tip original-src" data-title={this.renderOriginalSourceInfo()}>
