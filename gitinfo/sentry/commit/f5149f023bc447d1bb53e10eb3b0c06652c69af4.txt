commit f5149f023bc447d1bb53e10eb3b0c06652c69af4
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 1 20:18:59 2015 -0800

    Various tweaks/fixes for stream

diff --git a/src/sentry/static/sentry/app-react/components/barChart.jsx b/src/sentry/static/sentry/app-react/components/barChart.jsx
index f5fca52c53..374c9cd47c 100644
--- a/src/sentry/static/sentry/app-react/components/barChart.jsx
+++ b/src/sentry/static/sentry/app-react/components/barChart.jsx
@@ -38,9 +38,12 @@ var BarChart = React.createClass({
     var children = [];
     points.forEach(function(point){
       var pct = this.floatFormat(point.y / maxval * 99, 2) + '%';
-      var title = point.y + ' events';
+
+      var title;
       if (point.label) {
-        title = title + '<br>(' + point.label + ')';
+        title = <span>{point.y} events<br />({point.label})</span>;
+      } else {
+        title = <span>{point.y} events</span>;
       }
 
       children.push((
diff --git a/src/sentry/static/sentry/app-react/components/stream.jsx b/src/sentry/static/sentry/app-react/components/stream.jsx
index 07c915682b..c7f60d3690 100644
--- a/src/sentry/static/sentry/app-react/components/stream.jsx
+++ b/src/sentry/static/sentry/app-react/components/stream.jsx
@@ -133,6 +133,7 @@ var ActionLink = React.createClass({
     aggList: React.PropTypes.array.isRequired,
     canActionAll: React.PropTypes.bool.isRequired,
     confirmLabel: React.PropTypes.string,
+    disabled: React.PropTypes.bool,
     neverConfirm: React.PropTypes.bool,
     onAction: React.PropTypes.func.isRequired,
     onlyIfBulk: React.PropTypes.bool,
@@ -143,7 +144,8 @@ var ActionLink = React.createClass({
     return {
       confirmLabel: 'Edit',
       onlyIfBulk: false,
-      neverConfirm: false
+      neverConfirm: false,
+      disabled: false
     };
   },
 
@@ -154,6 +156,9 @@ var ActionLink = React.createClass({
   },
 
   handleToggle: function() {
+    if (this.props.disabled) {
+      return;
+    }
     this.setState({
       isModalOpen: !this.state.isModalOpen
     });
@@ -161,10 +166,16 @@ var ActionLink = React.createClass({
 
   handleActionAll: function(event) {
     this.props.onAction(ActionLink.ALL, event);
+    this.setState({
+      isModalOpen: false
+    });
   },
 
   handleActionSelected: function(event) {
-    this.props.onAction(this.props.aggList, event);
+    this.props.onAction(ActionLink.SELECTED, event);
+    this.setState({
+      isModalOpen: false
+    });
   },
 
   defaultActionLabel: function(confirmLabel) {
@@ -172,8 +183,12 @@ var ActionLink = React.createClass({
   },
 
   render: function () {
+    var className = this.props.className;
+    if (this.props.disabled) {
+      className += ' disabled';
+    }
     return (
-      <a {...this.props} onClick={this.handleToggle}>
+      <a className={className} disabled={this.props.disabled} onClick={this.handleToggle}>
         {this.props.children}
       </a>
     );
@@ -208,7 +223,7 @@ var ActionLink = React.createClass({
     if (!shouldConfirm) {
       this.handleActionSelected();
       this.state.isModalOpen = false;
-      return '<span/>';
+      return <span />;
     }
 
     var confirmLabel = this.props.confirmLabel;
@@ -557,35 +572,45 @@ var Stream = React.createClass({
   },
   actionAggregates: function(aggList, options) {
     var url = options.url || '/api/0/projects/' + this.props.project.id + '/groups/';
-    if (aggList !== ActionLink.ALL) {
-      url += '?id=' + aggList.map(function(node){ return node.id; }).join('&id=');
+
+    var selectedAggList;
+    if (aggList === ActionLink.SELECTED) {
+      selectedAggList = [];
+      for (var i = 0, node; (node = this.props.aggList[i]); i++) {
+        if (node.isSelected === true) {
+          selectedAggList.push(node);
+        }
+      }
+      url += '?id=' + selectedAggList.map(function(node){ return node.id; }).join('&id=');
+    } else {
+      selectedAggList = this.props.aggList;
     }
 
+    var data = options.data || {};
+
     // TODO(dcramer): handle errors
     $.ajax({
       url: url,
       method: options.method || 'PUT',
-      data: options.data || {}
+      contentType: 'application/json',
+      data: JSON.stringify(data)
     });
 
     if (aggList === ActionLink.ALL) {
       aggList = this.props.aggList;
     }
-    aggList.forEach(function(node){
+    selectedAggList.forEach(function(node){
       node.version = new Date().getTime() + 10;
+      node.isSelected = false;
       for (var key in data) {
         node[key] = data[key];
       }
     });
 
     if (typeof options.success !== "undefined") {
-      options.success(groupList);
+      options.success(selectedAggList);
     }
 
-    this.props.aggList.forEach(function(node){
-      node.isSelected = false;
-    });
-
     this.setState({
       aggList: this.props.aggList,
       selectAllActive: false,
diff --git a/src/sentry/static/sentry/app-react/main.jsx b/src/sentry/static/sentry/app-react/main.jsx
index f842a4b25b..312ed031c2 100644
--- a/src/sentry/static/sentry/app-react/main.jsx
+++ b/src/sentry/static/sentry/app-react/main.jsx
@@ -1,9 +1,51 @@
 /*** @jsx React.DOM */
 
+var jQuery = require("jquery");
+
+// setup jquery for CSRF tokens
+function getCookie(name) {
+  var cookieValue = null;
+  if (document.cookie && document.cookie !== '') {
+    var cookies = document.cookie.split(';');
+    for (var i = 0; i < cookies.length; i++) {
+      var cookie = jQuery.trim(cookies[i]);
+      // Does this cookie string begin with the name we want?
+      if (cookie.substring(0, name.length + 1) == (name + '=')) {
+        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
+        break;
+      }
+    }
+  }
+  return cookieValue;
+}
+
+function sameOrigin(url) {
+  // url could be relative or scheme relative or absolute
+  var host = document.location.host; // host + port
+  var protocol = document.location.protocol;
+  var sr_origin = '//' + host;
+  var origin = protocol + sr_origin;
+  // Allow absolute or scheme relative URLs to same origin
+  return (url == origin || url.slice(0, origin.length + 1) == origin + '/') ||
+      (url == sr_origin || url.slice(0, sr_origin.length + 1) == sr_origin + '/') ||
+      // or any other URL that isn't scheme relative or absolute i.e relative.
+      !(/^(\/\/|http:|https:).*/.test(url));
+}
+
+function safeMethod(method) {
+  return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
+}
+
+jQuery(document).ajaxSend(function(event, xhr, settings) {
+  if (!safeMethod(settings.type) && sameOrigin(settings.url)) {
+    xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));
+  }
+});
+
 // these get exported to a global variable, which is important as its the only
 // way we can call into scoped objects
 module.exports = {
-  jQuery: require("jquery"),
+  jQuery: jQuery,
   Raven: require("raven-js"),
   React: require("react"),
 
