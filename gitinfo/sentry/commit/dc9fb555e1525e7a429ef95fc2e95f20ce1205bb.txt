commit dc9fb555e1525e7a429ef95fc2e95f20ce1205bb
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jun 21 11:43:44 2019 -0700

    perf(events-v2): Fetch tag distributions in parallel (#13753)
    
    This is an attempt to improve heatmap performance by fetching requested
    fields in parallel.

diff --git a/src/sentry/api/endpoints/organization_events_heatmap.py b/src/sentry/api/endpoints/organization_events_heatmap.py
index 1a872b4d9f..2cd108d4f5 100644
--- a/src/sentry/api/endpoints/organization_events_heatmap.py
+++ b/src/sentry/api/endpoints/organization_events_heatmap.py
@@ -1,22 +1,20 @@
 from __future__ import absolute_import
 
-import logging
 import six
 
 from rest_framework.response import Response
-
-from sentry import tagstore
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
-from sentry.api.serializers import serialize
-from sentry.tagstore.snuba.utils import lookup_tags
-from sentry.utils.snuba import SnubaError
-from sentry import features
+from sentry.utils.snuba import get_snuba_column_name, raw_query
+from sentry import features, tagstore
+from sentry.tagstore.base import TOP_VALUES_DEFAULT_LIMIT
 
-logger = logging.getLogger('sentry.api.organization-events-heatmap')
 
+# If the requested key is project.name, we get the distribution by project.id
+# from Snuba and convert those values back to names
+PROJECT_KEY = 'project.name'
 
-class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
 
+class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
     def get(self, request, organization):
         try:
             snuba_args = self.get_snuba_query_args(request, organization)
@@ -26,40 +24,66 @@ class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
             return Response({'detail': 'A valid project must be included.'}, status=400)
 
         try:
-            keys = self._validate_keys(request)
+            key = self._validate_key(request)
             self._validate_project_ids(request, organization, snuba_args)
         except OrganizationEventsError as error:
             return Response({'detail': six.text_type(error)}, status=400)
 
-        try:
-            tags = lookup_tags(keys, **snuba_args)
-        except (KeyError, SnubaError) as error:
-            logger.info(
-                'api.organization-events-heatmap',
-                extra={
-                    'organization_id': organization.id,
-                    'user_id': request.user.id,
-                    'keys': keys,
-                    'snuba_args': snuba_args,
-                    'error': six.text_type(error)
-                }
-            )
-            return Response({
-                'detail': 'Invalid query.'
-            }, status=400)
-
-        return Response(serialize(tags, request.user))
-
-    def _validate_keys(self, request):
-        keys = request.GET.getlist('key')
-        if not keys:
-            raise OrganizationEventsError('Tag keys must be specified.')
-
-        for key in keys:
-            if not tagstore.is_valid_key(key):
-                raise OrganizationEventsError('Tag key %s is not valid.' % key)
-
-        return keys
+        colname = get_snuba_column_name(key)
+
+        if key == PROJECT_KEY:
+            colname = 'project_id'
+
+        top_values = raw_query(
+            start=snuba_args['start'],
+            end=snuba_args['end'],
+            conditions=snuba_args['conditions'] + [[colname, 'IS NOT NULL', None]],
+            filter_keys=snuba_args['filter_keys'],
+            groupby=[colname],
+            aggregations=[('count()', None, 'count')],
+            orderby='-count',
+            limit=TOP_VALUES_DEFAULT_LIMIT,
+            referrer='api.organization-events-heatmap',
+        )['data']
+
+        projects = {p.id: p.slug for p in self.get_projects(request, organization)}
+
+        if key == PROJECT_KEY:
+            resp = {
+                'key': PROJECT_KEY,
+                'topValues': [
+                    {
+                        'value': projects[v['project_id']],
+                        'name': projects[v['project_id']],
+                        'count': v['count'],
+                    } for v in top_values
+                ]
+            }
+        else:
+            resp = {
+                'key': key,
+                'topValues': [
+                    {
+                        'value': v[colname],
+                        'name': tagstore.get_tag_value_label(colname, v[colname]),
+                        'count': v['count'],
+                    }
+                    for v in top_values
+                ],
+            }
+
+        return Response(resp)
+
+    def _validate_key(self, request):
+        key = request.GET.get('key')
+
+        if not key:
+            raise OrganizationEventsError('Tag key must be specified.')
+
+        if not tagstore.is_valid_key(key):
+            raise OrganizationEventsError('Tag key %s is not valid.' % key)
+
+        return key
 
     def _validate_project_ids(self, request, organization, snuba_args):
         project_ids = snuba_args['filter_keys']['project_id']
diff --git a/src/sentry/api/endpoints/organization_events_meta.py b/src/sentry/api/endpoints/organization_events_meta.py
index 04d8397211..8f281f8c2e 100644
--- a/src/sentry/api/endpoints/organization_events_meta.py
+++ b/src/sentry/api/endpoints/organization_events_meta.py
@@ -19,12 +19,9 @@ class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
         data = raw_query(
             aggregations=[['count()', '', 'count']],
             referrer='api.organization-event-meta',
-            turbo=True,
             **snuba_args
         )['data'][0]
 
         return Response({
-            # this needs to be multiplied to account for the `TURBO_SAMPLE_RATE`
-            # in snuba
-            'count': data['count'] * 10,
+            'count': data['count'],
         })
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/tags.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/tags.jsx
index 3e42b57160..c9276e0e35 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/tags.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/tags.jsx
@@ -2,11 +2,12 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 import {isEqual, omit} from 'lodash';
+import * as Sentry from '@sentry/browser';
 
 import SentryTypes from 'app/sentryTypes';
 import TagDistributionMeter from 'app/components/tagDistributionMeter';
 import withApi from 'app/utils/withApi';
-import {fetchTags, getEventTagSearchUrl} from './utils';
+import {fetchTagDistribution, fetchTotalCount, getEventTagSearchUrl} from './utils';
 import {MODAL_QUERY_KEYS} from './data';
 
 class Tags extends React.Component {
@@ -18,8 +19,8 @@ class Tags extends React.Component {
   };
 
   state = {
-    isLoading: true,
     tags: {},
+    totalValues: null,
   };
 
   componentDidMount() {
@@ -41,21 +42,38 @@ class Tags extends React.Component {
   fetchData = async () => {
     const {api, organization, view, location} = this.props;
 
+    this.setState({tags: {}, totalValues: null});
+
+    view.tags.forEach(async tag => {
+      try {
+        const val = await fetchTagDistribution(
+          api,
+          organization.slug,
+          tag,
+          location.query
+        );
+
+        this.setState(state => ({tags: {...state.tags, [tag]: val}}));
+      } catch (err) {
+        Sentry.captureException(err);
+      }
+    });
+
     try {
-      const tags = await fetchTags(api, organization.slug, view.tags, location.query);
-      this.setState({tags, isLoading: false});
+      const totalValues = await fetchTotalCount(api, organization.slug, location.query);
+      this.setState({totalValues});
     } catch (err) {
-      this.setState({tags: {}, isLoading: false});
+      Sentry.captureException(err);
     }
   };
 
   renderTag(tag) {
     const {location} = this.props;
-    const {isLoading, tags} = this.state;
+    const {tags, totalValues} = this.state;
+    const isLoading = !tags[tag] || totalValues === null;
     let segments = [];
-    let totalValues = 0;
-    if (!isLoading && tags[tag]) {
-      totalValues = tags[tag].totalValues;
+
+    if (!isLoading) {
       segments = tags[tag].topValues;
     }
 
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
index d3d3e16e29..220aaa18b3 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -93,25 +93,36 @@ export function getEventTagSearchUrl(tagKey, tagValue, location) {
 }
 
 /**
- * Fetches tag distributions for heatmaps for an array of tag keys
+ * Fetches tag distributions for a single tag key
  *
  * @param {Object} api
  * @param {String} orgSlug
- * @param {Array} tagList
+ * @param {String} key
+ * @param {string} query
  * @returns {Promise<Object>}
  */
-export function fetchTags(api, orgSlug, tagList, query) {
+export function fetchTagDistribution(api, orgSlug, key, query) {
+  const urlParams = pick(query, Object.values(URL_PARAM));
+
+  return api.requestPromise(`/organizations/${orgSlug}/events-heatmap/`, {
+    query: {...urlParams, key, query: query.query},
+  });
+}
+
+/**
+ * Fetches total count of events for a given query
+ *
+ * @param {Object} api
+ * @param {String} orgSlug
+ * @param {string} query
+ * @returns {Promise<Number>}
+ */
+export function fetchTotalCount(api, orgSlug, query) {
   const urlParams = pick(query, Object.values(URL_PARAM));
 
   return api
-    .requestPromise(`/organizations/${orgSlug}/events-heatmap/`, {
-      query: {...urlParams, key: tagList, query: query.query},
+    .requestPromise(`/organizations/${orgSlug}/events-meta/`, {
+      query: {...urlParams, query: query.query},
     })
-    .then(resp => {
-      const tags = {};
-      resp.forEach(tag => {
-        tags[tag.key] = tag;
-      });
-      return tags;
-    });
+    .then(res => res.count);
 }
diff --git a/src/sentry/tagstore/snuba/utils.py b/src/sentry/tagstore/snuba/utils.py
deleted file mode 100644
index f2279dc6f7..0000000000
--- a/src/sentry/tagstore/snuba/utils.py
+++ /dev/null
@@ -1,168 +0,0 @@
-from __future__ import absolute_import
-
-from collections import OrderedDict
-from copy import deepcopy
-
-from sentry import tagstore
-from sentry.models import Project
-from sentry.tagstore.types import TagKey, TagValue
-from sentry.tagstore.base import TOP_VALUES_DEFAULT_LIMIT
-from sentry.utils.snuba import (
-    raw_query,
-    SENTRY_SNUBA_MAP,
-)
-
-NON_TAG_KEYS = SENTRY_SNUBA_MAP.copy()
-NON_TAG_KEYS.update({'project.name': 'project_id'})
-
-
-def lookup_tags(keys, **snuba_args):
-    tag_keys = []
-    non_tag_keys = []
-
-    for key in keys:
-        if key in NON_TAG_KEYS:
-            non_tag_keys.append(key)
-        else:
-            tag_keys.append(tagstore.prefix_reserved_key(key))
-
-    if tag_keys:
-        top_values = get_top_values(keys=tag_keys, **snuba_args)
-    else:
-        top_values = []
-
-    if non_tag_keys:
-        handle_non_tag_keys(non_tag_keys, top_values, **snuba_args)
-
-    total_count = get_total_value_count(**snuba_args)
-    tag_keys = create_tag_objects(keys, total_count, top_values)
-
-    # sort heatmap categories in the same order requested.
-    tag_keys = sorted(tag_keys, key=lambda x: keys.index(x.key))
-    return tag_keys
-
-
-def handle_non_tag_keys(keys, top_values, **kwargs):
-    for key in keys:
-        data = query_non_tag_data(NON_TAG_KEYS[key], **kwargs)
-
-        if key == 'project.name':
-            for value in data:
-                # Skip the project as the current user might not be able to see it.
-                if value['project_id'] not in kwargs['filter_keys']['project_id']:
-                    continue
-                project_slug = (Project.objects
-                                .values_list('slug', flat=True)
-                                .get(id=value['project_id']))
-                value['tags_key'] = key
-                value['tags_value'] = project_slug
-        else:
-            for value in data:
-                tag_value = value[NON_TAG_KEYS[key]]
-                # If we have multiple values take the last one.
-                # This happens most commonly with error.type and chained
-                # exceptions.
-                if isinstance(tag_value, list):
-                    tag_value = tag_value[-1] if len(tag_value) else ''
-                value['tags_key'] = key
-                value['tags_value'] = tag_value
-
-        top_values += data
-
-    # order combined values by count
-    top_values = sorted(top_values, key=lambda x: x['count'])
-    return top_values
-
-
-def query_non_tag_data(key, value_limit=TOP_VALUES_DEFAULT_LIMIT, **kwargs):
-    kwargs = deepcopy(kwargs)
-    data = raw_query(
-        groupby=[key],
-        conditions=kwargs.pop('conditions', []) + [
-            [['isNotNull', [key]], '=', 1]
-        ],
-        aggregations=kwargs.pop('aggregations', []) + [
-            ['count()', '', 'count'],
-            ['min', 'timestamp', 'first_seen'],
-            ['max', 'timestamp', 'last_seen'],
-        ],
-        orderby='-count',
-        referrer='api.organization-events-heatmap',
-        limit=value_limit,
-        **kwargs
-    )
-
-    return data['data']
-
-
-def create_tag_objects(keys, total_count, top_values):
-    tag_keys_dict = OrderedDict()
-
-    for top_value in top_values:
-        key = top_value['tags_key']
-
-        if key not in tag_keys_dict:
-            tag_keys_dict[key] = TagKey(
-                key=key,
-                top_values=[],
-                count=total_count,
-            )
-        tag_keys_dict[key].top_values.append(
-            TagValue(
-                key=key,
-                value=top_value['tags_value'],
-                times_seen=top_value['count'],
-                first_seen=top_value['first_seen'],
-                last_seen=top_value['last_seen'],
-            )
-        )
-
-    # Add categories with no values
-    for key in keys:
-        if key not in tag_keys_dict:
-            tag_keys_dict[key] = TagKey(
-                key=key,
-                top_values=[],
-                count=total_count,
-            )
-    return tag_keys_dict.values()
-
-
-def get_total_value_count(**kwargs):
-    kwargs = deepcopy(kwargs)
-    aggregations = kwargs.pop('aggregations', [])
-    aggregations += [
-        ['count()', '', 'count'],
-    ]
-
-    total_count = raw_query(
-        aggregations=aggregations,
-        referrer='api.organization-events-heatmap',
-        **kwargs
-    )['data'][0]['count']
-    return total_count
-
-
-def get_top_values(keys, value_limit=TOP_VALUES_DEFAULT_LIMIT, **kwargs):
-
-    kwargs = deepcopy(kwargs)
-    filters = kwargs.pop('filter_keys', {})
-    filters['tags_key'] = keys
-
-    aggregations = kwargs.pop('aggregations', [])
-    aggregations += [
-        ['count()', '', 'count'],
-        ['min', 'timestamp', 'first_seen'],
-        ['max', 'timestamp', 'last_seen'],
-    ]
-
-    values = raw_query(
-        groupby=['tags_key', 'tags_value'],
-        filter_keys=filters,
-        aggregations=aggregations,
-        orderby='-count',
-        limitby=[value_limit, 'tags_key'],
-        referrer='api.organization-events-heatmap',
-        **kwargs
-    )
-    return values['data']
diff --git a/tests/js/spec/views/organizationEventsV2/tags.spec.jsx b/tests/js/spec/views/organizationEventsV2/tags.spec.jsx
index 017e1ece5e..d94f852b8f 100644
--- a/tests/js/spec/views/organizationEventsV2/tags.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/tags.spec.jsx
@@ -9,20 +9,19 @@ describe('Tags', function() {
   beforeEach(function() {
     Client.addMockResponse({
       url: `/organizations/${org.slug}/events-heatmap/`,
-      body: [
-        {
-          key: 'release',
-          name: 'Release',
-          totalValues: 2,
-          topValues: [{count: 2, value: 'abcd123', name: 'abcd123'}],
-        },
-        {
-          key: 'environment',
-          name: 'Environment',
-          totalValues: 1,
-          topValues: [{count: 1, value: 'production', name: 'production'}],
-        },
-      ],
+      body: {
+        key: 'release',
+        name: 'Release',
+        totalValues: 2,
+        topValues: [{count: 2, value: 'abcd123', name: 'abcd123'}],
+      },
+    });
+
+    Client.addMockResponse({
+      url: `/organizations/${org.slug}/events-meta/`,
+      body: {
+        count: 2,
+      },
     });
   });
 
diff --git a/tests/snuba/api/endpoints/test_organization_events_heatmap.py b/tests/snuba/api/endpoints/test_organization_events_heatmap.py
index 937be81f35..f88b27ce35 100644
--- a/tests/snuba/api/endpoints/test_organization_events_heatmap.py
+++ b/tests/snuba/api/endpoints/test_organization_events_heatmap.py
@@ -26,14 +26,6 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
         self.min_ago_iso = self.min_ago.isoformat()
 
     def test_simple(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
-            },
-            project_id=self.project.id
-        )
         self.store_event(
             data={
                 'event_id': uuid4().hex,
@@ -46,7 +38,7 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
             data={
                 'event_id': uuid4().hex,
                 'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
+                'tags': {'number': 'one'},
             },
             project_id=self.project.id
         )
@@ -54,115 +46,30 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
             data={
                 'event_id': uuid4().hex,
                 'timestamp': self.min_ago_iso,
-                'tags': {'color': 'red'},
+                'tags': {'number': 'two'},
             },
             project_id=self.project.id
         )
 
         with self.feature('organizations:global-views'):
-            response = self.client.get(self.url, {'key': ['number', 'color']}, format='json')
+            response = self.client.get(self.url, {'key': 'number'}, format='json')
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': 'one',
-                    'value': 'one',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'number',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Number',
-            'key': 'number'
-        }
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': 'green',
-                    'value': 'green',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': 'red',
-                    'value': 'red',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-    def test_single_key(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'world': 'hello'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'yellow'},
-            },
-            project_id=self.project.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'red'},
-            },
-            project_id=self.project2.id
-        )
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'yellow'},
-            },
-            project_id=self.project.id
-        )
 
-        with self.feature('organizations:global-views'):
-            response = self.client.get(self.url, {'key': ['color']}, format='json')
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0] == {
+        assert response.data == {
             'topValues': [
                 {
                     'count': 2,
-                    'name': 'yellow',
-                    'value': 'yellow',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
+                    'name': 'one',
+                    'value': 'one',
                 },
                 {
                     'count': 1,
-                    'name': 'red',
-                    'value': 'red',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
+                    'name': 'two',
+                    'value': 'two',
                 }
             ],
-            'totalValues': 4,
-            'name': 'Color',
-            'key': 'color'
+            'key': 'number'
         }
 
     def test_with_message_query(self):
@@ -197,32 +104,23 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
         with self.feature('organizations:global-views'):
             response = self.client.get(
                 self.url, {
-                    'query': 'delet', 'key': ['color']}, format='json')
+                    'query': 'delet', 'key': 'color'}, format='json')
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 1
 
-        assert response.data[0] == {
+        assert response.data == {
             'topValues': [
                 {
                     'count': 1,
                     'name': 'yellow',
                     'value': 'yellow',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
                 },
                 {
                     'count': 1,
                     'name': 'red',
                     'value': 'red',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
                 }
             ],
-            'totalValues': 2,
-            'name': 'Color',
             'key': 'color'
         }
 
@@ -258,43 +156,21 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
         with self.feature('organizations:global-views'):
             response = self.client.get(
                 self.url, {
-                    'query': 'color:yellow', 'key': ['color', 'project.name']}, format='json')
+                    'query': 'color:yellow', 'key': 'color'}, format='json')
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 2
 
-        assert response.data[0] == {
+        assert response.data == {
             'topValues': [
                 {
                     'count': 1,
                     'name': 'yellow',
                     'value': 'yellow',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
                 },
             ],
-            'totalValues': 1,
-            'name': 'Color',
             'key': 'color'
         }
 
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': self.project2.slug,
-                    'value': self.project2.slug,
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'project.name',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 1,
-            'name': 'Project.Name',
-            'key': 'project.name'
-        }
-
     def test_start_end(self):
         two_days_ago = self.day_ago - timedelta(days=1)
         hour_ago = self.min_ago - timedelta(hours=1)
@@ -345,20 +221,14 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
             )
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0] == {
+        assert response.data == {
             'topValues': [
                 {
                     'count': 2,
                     'name': 'red',
                     'value': 'red',
-                    'lastSeen': hour_ago.isoformat(),
-                    'key': 'color',
-                    'firstSeen': two_hours_ago.isoformat()
                 }
             ],
-            'totalValues': 2,
-            'name': 'Color',
             'key': 'color'
         }
 
@@ -393,35 +263,26 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
         response = self.client.get(
             self.url,
             {
-                'key': ['user'],
+                'key': 'user',
                 'project': [self.project.id]
             },
             format='json'
         )
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0] == {
+        assert response.data == {
             'topValues': [
                 {
                     'count': 2,
                     'name': self.user2.email,
                     'value': self.user2.email,
-                    'lastSeen': self.day_ago.isoformat(),
-                    'key': 'user',
-                    'firstSeen': self.day_ago.isoformat()
                 },
                 {
                     'count': 1,
                     'name': self.user.email,
                     'value': self.user.email,
-                    'lastSeen': self.day_ago.isoformat(),
-                    'key': 'user',
-                    'firstSeen': self.day_ago.isoformat()
                 }
             ],
-            'totalValues': 3,
-            'name': 'User',
             'key': 'user'
         }
 
@@ -433,14 +294,14 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
                 'organization_slug': org.slug,
             }
         )
-        response = self.client.get(url, {'key': ['color']}, format='json')
+        response = self.client.get(url, {'key': 'color'}, format='json')
         assert response.status_code == 400, response.content
         assert response.data == {'detail': 'A valid project must be included.'}
 
     def test_no_key_param(self):
         response = self.client.get(self.url, {'project': [self.project.id]}, format='json')
         assert response.status_code == 400, response.content
-        assert response.data == {'detail': 'Tag keys must be specified.'}
+        assert response.data == {'detail': 'Tag key must be specified.'}
 
     def test_multiple_projects_without_global_view(self):
         self.store_event(
@@ -456,7 +317,7 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
             project_id=self.project2.id
         )
 
-        response = self.client.get(self.url, {'key': ['color']}, format='json')
+        response = self.client.get(self.url, {'key': 'color'}, format='json')
         assert response.status_code == 400, response.content
         assert response.data == {'detail': 'You cannot view events from multiple projects.'}
 
@@ -465,7 +326,7 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
             data={
                 'event_id': uuid4().hex,
                 'timestamp': self.min_ago_iso,
-                'tags': {'color': 'green'},
+                'tags': {'number': 'two'},
             },
             project_id=self.project.id
         )
@@ -480,50 +341,20 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
 
         with self.feature('organizations:global-views'):
             response = self.client.get(
-                self.url, {
-                    'key': [
-                        'number', 'color', 'project.name'], 'project': [
-                        self.project.id]}, format='json')
+                self.url,
+                {'key': 'number', 'project': [self.project.id]},
+                format='json'
+            )
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 3
-        assert response.data[0] == {
-            'topValues': [],
-            'totalValues': 1,
-            'name': 'Number',
+        assert response.data == {
+            'topValues': [{
+                'name': 'two',
+                'value': 'two',
+                'count': 1,
+            }],
             'key': 'number'
         }
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': 'green',
-                    'value': 'green',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 1,
-            'name': 'Color',
-            'key': 'color'
-        }
-
-        assert response.data[2] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': self.project.slug,
-                    'value': self.project.slug,
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'project.name',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 1,
-            'name': 'Project.Name',
-            'key': 'project.name'
-        }
 
     def test_project_key(self):
         self.store_event(
@@ -561,73 +392,25 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
 
         with self.feature('organizations:global-views'):
             response = self.client.get(
-                self.url, {
-                    'key': [
-                        'project.name', 'number', 'color']}, format='json')
+                self.url, {'key': 'project.name'}, format='json')
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 3
-        assert response.data[0] == {
+
+        assert response.data == {
             'topValues': [
                 {
                     'count': 3,
                     'name': self.project.slug,
                     'value': self.project.slug,
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'project.name',
-                    'firstSeen': self.min_ago_iso
                 },
                 {
                     'count': 1,
                     'name': self.project2.slug,
                     'value': self.project2.slug,
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'project.name',
-                    'firstSeen': self.min_ago_iso
                 }
             ],
-            'totalValues': 4,
-            'name': 'Project.Name',
             'key': 'project.name'
         }
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': 'one',
-                    'value': 'one',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'number',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Number',
-            'key': 'number'
-        }
-        assert response.data[2] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': 'green',
-                    'value': 'green',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': 'red',
-                    'value': 'red',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'color',
-                    'firstSeen': self.min_ago_iso
-                }
-            ],
-            'totalValues': 4,
-            'name': 'Color',
-            'key': 'color'
-        }
 
     def test_non_tag_key(self):
         user1 = {
@@ -679,127 +462,25 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
 
         with self.feature('organizations:global-views'):
             response = self.client.get(
-                self.url, {
-                    'key': [
-                        'user.email', 'user.ip']}, format='json')
+                self.url, {'key': 'user.email'}, format='json')
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 2
 
-        assert response.data[0] == {
+        assert response.data == {
             'topValues': [
                 {
                     'count': 2,
                     'name': user1['email'],
                     'value': user1['email'],
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'user.email',
-                    'firstSeen': self.min_ago_iso
                 },
                 {
                     'count': 1,
                     'name': user2['email'],
                     'value': user2['email'],
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'user.email',
-                    'firstSeen': self.min_ago_iso
                 }
             ],
-            'totalValues': 4,
-            'name': 'User.Email',
             'key': 'user.email'
         }
-        assert response.data[1] == {
-            'topValues': [
-                {
-                    'count': 2,
-                    'name': user1['ip_address'],
-                    'value': user1['ip_address'],
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'user.ip',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': user2['ip_address'],
-                    'value': user2['ip_address'],
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'user.ip',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 4,
-            'name': 'User.Ip',
-            'key': 'user.ip'
-        }
-
-    def test_non_tag_key__multiple_values_and_no_value(self):
-        frame = {
-            'filename': 'server.php',
-            'lineno': 21,
-            'in_app': True,
-        }
-
-        # Check that error.type works with chained exceptions
-        # as they create multiple results for exception_stacks.type
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'exception': {
-                    'values': [
-                        {'type': 'PDOException', 'stacktrace': {
-                            'frames': [frame]}, 'value': 'Database error'},
-                        {'type': 'QueryException', 'stacktrace': {
-                            'frames': [frame]}, 'value': 'Query failed'},
-                    ]
-                }
-            },
-            project_id=self.project.id
-        )
-        # No stack traces
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'exception': {
-                    'values': []
-                }
-            },
-            project_id=self.project.id
-        )
-
-        response = self.client.get(
-            self.url,
-            {'key': ['error.type'], 'project': [self.project.id]},
-            format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-
-        assert response.data[0] == {
-            'topValues': [
-                {
-                    'count': 1,
-                    'name': '',
-                    'value': '',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'error.type',
-                    'firstSeen': self.min_ago_iso
-                },
-                {
-                    'count': 1,
-                    'name': 'QueryException',
-                    'value': 'QueryException',
-                    'lastSeen': self.min_ago_iso,
-                    'key': 'error.type',
-                    'firstSeen': self.min_ago_iso
-                },
-            ],
-            'totalValues': 2,
-            'name': 'Error.Type',
-            'key': 'error.type'
-        }
 
     def test_value_limit(self):
         for i in range(0, 12):
@@ -829,46 +510,14 @@ class OrganizationEventsHeatmapEndpointTest(APITestCase, SnubaTestCase):
         )
         with self.feature('organizations:global-views'):
             response = self.client.get(
-                self.url, {
-                    'key': ['project.name', 'color']}, format='json')
+                self.url, {'key': 'color'}, format='json')
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-        assert len(response.data[0]['topValues']) == TOP_VALUES_DEFAULT_LIMIT
-        assert response.data[0]['topValues'][0] == {
-            'count': 2, 'name': self.project2.slug, 'value': self.project2.slug,
-            'lastSeen': self.min_ago_iso, 'key': 'project.name', 'firstSeen': self.min_ago_iso
-        }
-        assert len(response.data[1]['topValues']) == TOP_VALUES_DEFAULT_LIMIT
-        assert response.data[1]['topValues'][0] == {
-            'count': 2, 'name': 'yellow', 'value': 'yellow',
-            'lastSeen': self.min_ago_iso, 'key': 'color', 'firstSeen': self.min_ago_iso
-        }
-
-    def test_special_fields_ignored(self):
-        self.store_event(
-            data={
-                'event_id': uuid4().hex,
-                'timestamp': self.min_ago_iso,
-                'tags': {'color': 'yellow'}
-            },
-            project_id=self.project2.id
-        )
-        with self.feature('organizations:global-views'):
-            response = self.client.get(
-                self.url, {
-                    'key': ['color'], 'query': 'user_count:>5'}, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0] == {
-            'topValues': [{
-                'count': 1, 'name': 'yellow', 'value': 'yellow',
-                'lastSeen': self.min_ago_iso, 'key': 'color', 'firstSeen': self.min_ago_iso
-            }],
-            'totalValues': 1,
-            'name': 'Color',
-            'key': 'color'
+        assert len(response.data['topValues']) == TOP_VALUES_DEFAULT_LIMIT
+        assert response.data['topValues'][0] == {
+            'count': 2,
+            'name': 'yellow',
+            'value': 'yellow',
         }
 
     def test_malformed_query(self):
diff --git a/tests/snuba/api/endpoints/test_organization_events_meta.py b/tests/snuba/api/endpoints/test_organization_events_meta.py
index 58ca6bde58..61636a526b 100644
--- a/tests/snuba/api/endpoints/test_organization_events_meta.py
+++ b/tests/snuba/api/endpoints/test_organization_events_meta.py
@@ -31,8 +31,7 @@ class OrganizationEventsMetaEndpoint(APITestCase, SnubaTestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        # this is not exact because of turbo=True
-        assert response.data['count'] == 10
+        assert response.data['count'] == 2
 
     def test_search(self):
         self.login_as(user=self.user)
@@ -60,8 +59,7 @@ class OrganizationEventsMetaEndpoint(APITestCase, SnubaTestCase):
         response = self.client.get(url, {'query': 'delet'}, format='json')
 
         assert response.status_code == 200, response.content
-        # this is not exact because of turbo=True
-        assert response.data['count'] == 10
+        assert response.data['count'] == 1
 
     def test_no_projects(self):
         org = self.create_organization(owner=self.user)
