commit cf579e465defebafc0a9b669f5f32ce68af9e839
Author: David Wang <davidw1339@gmail.com>
Date:   Thu Oct 31 13:02:05 2019 -0700

    feat(ui): Added metric to capture length of user-teams endpoint (#15365)
    
    Adding a 'app.component.perf' (getsentry/reload#119) metric to capture the user-teams endpoint.

diff --git a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
index 08aa99ab9f..fa2f8a8ead 100644
--- a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
+++ b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
@@ -7,6 +7,7 @@ import getDisplayName from 'app/utils/getDisplayName';
 import getProjectsByTeams from 'app/utils/getProjectsByTeams';
 import ConfigStore from 'app/stores/configStore';
 import TeamActions from 'app/actions/teamActions';
+import {metric} from './analytics';
 
 // We require these props when using this HOC
 type DependentProps = {
@@ -52,13 +53,27 @@ const withTeamsForUser = <P extends InjectedTeamsProps>(
         loadingTeams: true,
       });
       try {
+        metric.mark('user-teams-fetch-start');
         const teamsWithProjects: TeamWithProjects[] = await this.props.api.requestPromise(
           this.getUsersTeamsEndpoint()
         );
-        this.setState({
-          teams: teamsWithProjects,
-          loadingTeams: false,
-        });
+        this.setState(
+          {
+            teams: teamsWithProjects,
+            loadingTeams: false,
+          },
+          () => {
+            metric.measure({
+              name: 'app.component.perf',
+              start: 'user-teams-fetch-start',
+              data: {
+                name: 'user-teams',
+                route: '/organizations/:orgid/user-teams',
+                organization_id: parseInt(this.props.organization.id, 10),
+              },
+            });
+          }
+        );
 
         // also fill up TeamStore so org context does not have to refetch org
         // details due to lack of teams/projects
