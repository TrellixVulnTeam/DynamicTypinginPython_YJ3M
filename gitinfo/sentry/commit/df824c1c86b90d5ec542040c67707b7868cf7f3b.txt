commit df824c1c86b90d5ec542040c67707b7868cf7f3b
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 3 19:01:45 2016 -0700

    Overhaul internal admin
    
    - Pull in ResultGrid from getsentry
    - Move projects list to react
    - Move user list to react
    - Remove teams admin
    - Remove django-paging
    - Remove various unused templates
    - Added 'routes' hook for extending registered routes
    - Added 'routes:admin' hook for extending registered admin routes
    - Added 'admin:sidebar:manage' for extending the 'Manage' section of the admin sidebar
    
    @getsentry/ui

diff --git a/setup.py b/setup.py
index 97731a9d99..195bd54666 100755
--- a/setup.py
+++ b/setup.py
@@ -96,7 +96,6 @@ install_requires = [
     'django-bitfield>=1.7.0,<1.8.0',
     'django-crispy-forms>=1.4.0,<1.5.0',
     'django-debug-toolbar>=1.3.2,<1.4.0',
-    'django-paging>=0.2.5,<0.3.0',
     'django-jsonfield>=0.9.13,<0.9.14',
     'django-picklefield>=0.3.0,<0.4.0',
     'django-recaptcha>=1.0.4,<1.1.0',
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index b10854f721..21673be14b 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -1,18 +1,20 @@
 from __future__ import absolute_import
 
 from django.db import IntegrityError, transaction
-from django.db.models import Q
+from django.db.models import Count, Q, Sum
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
 from sentry import roles
 from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
-from sentry.api.paginator import OffsetPaginator
+from sentry.api.paginator import DateTimePaginator, OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.models import (
-    AuditLogEntryEvent, Organization, OrganizationMember, OrganizationStatus
+    AuditLogEntryEvent, Organization, OrganizationMember, OrganizationStatus,
+    ProjectPlatform
 )
+from sentry.search.utils import tokenize_query, in_iexact
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -73,16 +75,61 @@ class OrganizationIndexEndpoint(Endpoint):
 
         query = request.GET.get('query')
         if query:
-            queryset = queryset.filter(
-                Q(name__icontains=query) | Q(slug__icontains=query),
+            tokens = tokenize_query(query)
+            for key, value in tokens.iteritems():
+                if key == 'query':
+                    value = ' '.join(value)
+                    queryset = queryset.filter(
+                        Q(name__icontains=value) |
+                        Q(slug__icontains=value) |
+                        Q(members__email__iexact=value)
+                    )
+                elif key == 'slug':
+                    queryset = queryset.filter(
+                        in_iexact('slug', value)
+                    )
+                elif key == 'email':
+                    queryset = queryset.filter(
+                        in_iexact('members__email', value)
+                    )
+                elif key == 'platform':
+                    queryset = queryset.filter(
+                        project__in=ProjectPlatform.objects.filter(
+                            platform__in=value,
+                        ).values('project_id')
+                    )
+
+        sort_by = request.GET.get('sortBy')
+        if sort_by == 'members':
+            queryset = queryset.annotate(
+                member_count=Count('member_set'),
+            )
+            order_by = '-member_count'
+            paginator_cls = OffsetPaginator
+        elif sort_by == 'projects':
+            queryset = queryset.annotate(
+                project_count=Count('project'),
+            )
+            order_by = '-project_count'
+            paginator_cls = OffsetPaginator
+        elif sort_by == 'events':
+            queryset = queryset.annotate(
+                event_count=Sum('stats__events_24h'),
+            ).filter(
+                stats__events_24h__isnull=False,
             )
+            order_by = '-event_count'
+            paginator_cls = OffsetPaginator
+        else:
+            order_by = '-date_added'
+            paginator_cls = DateTimePaginator
 
         return self.paginate(
             request=request,
             queryset=queryset,
-            order_by='name',
+            order_by=order_by,
             on_results=lambda x: serialize(x, request.user),
-            paginator_cls=OffsetPaginator,
+            paginator_cls=paginator_cls,
         )
 
     # XXX: endpoint useless for end-users as it needs user context.
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index e3ad680105..77778851fe 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -53,8 +53,10 @@ class UserSerializer(Serializer):
             'isActive': obj.is_active,
             'isManaged': obj.is_managed,
             'dateJoined': obj.date_joined,
+            'lastLogin': obj.last_login,
             'has2fa': attrs['has2fa'],
         }
+
         if obj == user:
             options = {
                 o.key: o.value
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 0474f9cd32..8d7e6f1022 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import, division, print_function
 
 from collections import defaultdict
 from datetime import datetime, timedelta
+from django.db.models import Q
 from django.utils import timezone
 
 from sentry.constants import STATUS_CHOICES
@@ -248,3 +249,11 @@ def parse_query(project, query, user):
     results['query'] = ' '.join(results['query'])
 
     return results
+
+
+def in_iexact(column, values):
+    from operator import or_
+
+    query = '{}__iexact'.format(column)
+
+    return reduce(or_, [Q(**{query: v}) for v in values])
diff --git a/src/sentry/static/sentry/app/components/resultGrid.jsx b/src/sentry/static/sentry/app/components/resultGrid.jsx
new file mode 100644
index 0000000000..110fe7471c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/resultGrid.jsx
@@ -0,0 +1,361 @@
+import React from 'react';
+import $ from 'jquery';
+import {History} from 'react-router';
+
+import ApiMixin from '../mixins/apiMixin';
+import DropdownLink from './dropdownLink';
+import MenuItem from './menuItem';
+import Pagination from './pagination';
+
+const Filter = React.createClass({
+  propTypes: {
+    name: React.PropTypes.string.isRequired,
+    queryKey: React.PropTypes.string.isRequired,
+    options: React.PropTypes.array.isRequired,
+    path: React.PropTypes.string.isRequired,
+    value: React.PropTypes.any,
+  },
+
+  getCurrentLabel() {
+    let selected = this.props.options.filter((item) => {
+      return item[0] === (this.props.value || '');
+    })[0];
+    if (selected) return this.props.name + ': ' + selected[1];
+    return this.props.name + ': ' + 'Any';
+  },
+
+  getDefaultItem() {
+      let query = $.extend({}, this.props.location.query, {
+        cursor: ''
+      });
+      delete query[this.props.queryKey];
+
+      return (
+        <MenuItem
+          key=""
+          isActive={this.props.value === '' || !this.props.value}
+          to={this.props.path}
+          query={query}>Any</MenuItem>
+      );
+  },
+
+  getSelector() {
+    return (
+      <DropdownLink title={this.getCurrentLabel()}>
+        {this.getDefaultItem()}
+        {this.props.options.map((item) => {
+          let filterQuery = {};
+          filterQuery[this.props.queryKey] = item[0];
+          filterQuery.cursor = '';
+          let query = $.extend({}, this.props.location.query, filterQuery);
+          return (
+            <MenuItem
+              key={item[0]}
+              isActive={this.props.value === item[0]}
+              to={this.props.path}
+              query={query}>{item[1]}</MenuItem>
+          );
+        })}
+      </DropdownLink>
+    );
+  },
+
+  render() {
+    return (
+      <div className="filter-options">
+        {this.props.options.length === 1 ?
+          <strong>{this.getCurrentLabel()}</strong>
+        :
+          this.getSelector()
+        }
+      </div>
+    );
+  }
+});
+
+const SortBy = React.createClass({
+  propTypes: {
+    options: React.PropTypes.array.isRequired,
+    path: React.PropTypes.string.isRequired,
+    location: React.PropTypes.string.isRequired,
+    value: React.PropTypes.any,
+  },
+
+  getCurrentSortLabel() {
+    return this.props.options.filter((item) => {
+      return item[0] === this.props.value;
+    })[0][1];
+  },
+
+  getSortBySelector() {
+    return (
+      <DropdownLink title={this.getCurrentSortLabel()} className="sorted-by">
+        {this.props.options.map((item) => {
+          let query = $.extend({}, this.props.location.query, {
+            sortBy: item[0],
+            cursor: '',
+          });
+          return (
+            <MenuItem
+              isActive={this.props.value === item[0]}
+              key={item[0]}
+              to={this.props.path}
+              query={query}>{item[1]}</MenuItem>
+          );
+        })}
+      </DropdownLink>
+    );
+  },
+
+  render() {
+    if (this.props.options.length === 0)
+      return null;
+
+    return (
+      <div className="sort-options">
+        Showing results sorted by
+        {this.props.options.length === 1 ?
+          <strong className="sorted-by">{this.getCurrentSortLabel()}</strong>
+        :
+          this.getSortBySelector()
+        }
+      </div>
+    );
+  }
+});
+
+const ResultGrid = React.createClass({
+  propTypes: {
+    columns: React.PropTypes.array,
+    columnsForRow: React.PropTypes.func,
+    defaultSort: React.PropTypes.string,
+    defaultParams: React.PropTypes.object,
+    endpoint: React.PropTypes.string,
+    filters: React.PropTypes.object,
+    hasPagination: React.PropTypes.bool,
+    hasSearch: React.PropTypes.bool,
+    keyForRow: React.PropTypes.func,
+    location: React.PropTypes.string,
+    method: React.PropTypes.string,
+    options: React.PropTypes.array,
+    path: React.PropTypes.string,
+    sortOptions: React.PropTypes.array,
+  },
+
+  mixins: [ApiMixin, History],
+
+  getDefaultProps() {
+    return {
+      path: '',
+      endpoint: '',
+      method: 'GET',
+      columns: [],
+      sortOptions: [],
+      filters: {},
+      defaultSort: '',
+      keyForRow: function(row) { return row.id; },
+      columnsForRow: function(row) { return []; },
+      defaultParams: {
+        per_page: 50,
+      },
+      hasPagination: true,
+      hasSearch: false,
+    };
+  },
+
+  getInitialState() {
+    let queryParams = (this.props.location || {}).query || {};
+
+    return {
+      rows: [],
+      loading: true,
+      error: false,
+      pageLinks: null,
+      query: queryParams.query || '',
+      sortBy: queryParams.sortBy || this.props.defaultSort,
+      filters: Object.assign({}, queryParams),
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let queryParams = (nextProps.location || {}).query || {};
+    this.setState({
+      query: queryParams.query || '',
+      sortBy: queryParams.sortBy || this.props.defaultSort,
+      filters: Object.assign({}, queryParams),
+      pageLinks: null,
+      loading: true,
+      error: false,
+    }, this.fetchData);
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  refresh() {
+    this.setState({
+      loading: true,
+    }, this.fetchData());
+  },
+
+  fetchData() {
+    // TODO(dcramer): this should whitelist filters/sortBy/cursor/perPage
+    let queryParams = $.extend({}, this.props.defaultParams,
+      {sortBy: this.state.sortBy},
+      (this.props.location || {}).query || {});
+
+    this.api.request(this.props.endpoint, {
+      method: this.props.method,
+      data: queryParams,
+      success: (data, _, jqXHR) => {
+        this.setState({
+          loading: false,
+          error: false,
+          rows: data,
+          pageLinks: jqXHR.getResponseHeader('Link'),
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  onSearch(e) {
+    let location = this.props.location || {};
+    let {query} = this.state;
+    let targetQueryParams = jQuery.extend({}, location.query || {}, {
+      query: query,
+      cursor: '',
+    });
+
+    e.preventDefault();
+
+    this.history.pushState(null, this.props.path, targetQueryParams);
+  },
+
+  onQueryChange(evt) {
+    this.setState({query: evt.target.value});
+  },
+
+  renderLoading() {
+    return (
+      <tr>
+        <td colSpan={this.props.columns.length}>
+          <div className="loading">
+            <div className="loading-indicator" />
+            <div className="loading-message">Hold on to your butts!</div>
+          </div>
+        </td>
+      </tr>
+    );
+  },
+
+  renderError() {
+    return (
+      <tr>
+        <td colSpan={this.props.columns.length}>
+          <div className="alert-block alert-error">Something bad happened :(</div>
+        </td>
+      </tr>
+    );
+  },
+
+  renderNoResults() {
+    return (
+      <tr>
+        <td colSpan={this.props.columns.length}>
+          No results found.
+        </td>
+      </tr>
+    );
+  },
+
+  renderResults() {
+    return this.state.rows.map((row) => {
+      return (
+        <tr key={this.props.keyForRow(row)}>
+          {this.props.columnsForRow(row)}
+        </tr>
+      );
+    });
+  },
+
+  render() {
+    let {filters} = this.props;
+    return (
+      <div className="result-grid">
+        <div className="table-options">
+          {this.props.hasSearch &&
+            <div className="result-grid-search">
+              <form onSubmit={this.onSearch}>
+                <div className="form-group">
+                  <input type="text"
+                         className="form-control input-search"
+                         placeholder="search"
+                         style={{width: 300}}
+                         name="query"
+                         ref="searchInput"
+                         autoComplete="off"
+                         value={this.state.query}
+                         onChange={this.onQueryChange} />
+                  <button type="submit" className="btn btn-sm btn-primary">
+                    <span className="icon-search" />
+                  </button>
+                </div>
+              </form>
+            </div>
+          }
+          <SortBy options={this.props.sortOptions}
+                  value={this.state.sortBy}
+                  path={this.props.path}
+                  location={this.props.location} />
+          {Object.keys(filters).map((filterKey) => {
+            return (
+              <Filter
+                key={filterKey}
+                queryKey={filterKey}
+                value={this.state.filters[filterKey]}
+                path={this.props.path}
+                location={this.props.location}
+                {...filters[filterKey]} />
+              );
+          })}
+        </div>
+
+        <table className="table table-grid">
+          <thead>
+            <tr>
+              {this.props.columns}
+            </tr>
+          </thead>
+          <tbody>
+            {this.state.loading ?
+              this.renderLoading()
+            : (this.state.error ?
+              this.renderError()
+            : (this.state.rows.length === 0 ?
+              this.renderNoResults()
+            :
+              this.renderResults()
+            ))}
+          </tbody>
+        </table>
+        {this.props.hasPagination && this.state.pageLinks &&
+          <Pagination pageLinks={this.state.pageLinks}/>
+        }
+      </div>
+    );
+  }
+});
+
+export default ResultGrid;
+
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 0946166128..8991ebf120 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1,13 +1,17 @@
 import React from 'react';
 import {Redirect, Route, IndexRoute} from 'react-router';
 
+import HookStore from './stores/hookStore';
+
 import ApiDashboard from './views/apiDashboard';
 import ApiNewToken from './views/apiNewToken';
 import Admin from './views/admin';
 import AdminBuffer from './views/adminBuffer';
 import AdminOrganizations from './views/adminOrganizations';
 import AdminOverview from './views/adminOverview';
+import AdminProjects from './views/adminProjects';
 import AdminSettings from './views/adminSettings';
+import AdminUsers from './views/adminUsers';
 import App from './views/app';
 import GroupActivity from './views/groupActivity';
 import GroupDetails from './views/groupDetails';
@@ -63,81 +67,98 @@ function appendTrailingSlash(nextState, replaceState) {
   }
 }
 
-let routes = (
-  <Route path="/" component={errorHandler(App)}>
-    <Route path="/api/" component={errorHandler(ApiDashboard)} />
-    <Route path="/api/new-token/" component={errorHandler(ApiNewToken)} />
-
-    <Route path="/manage/" component={errorHandler(Admin)}>
-      <IndexRoute component={errorHandler(AdminOverview)} />
-      <Route path="buffer/" component={errorHandler(AdminBuffer)} />
-      <Route path="organizations/" component={errorHandler(AdminOrganizations)} />
-      <Route path="settings/" component={errorHandler(AdminSettings)} />
-    </Route>
+function routes() {
+  let hooksRoutes = [];
+  HookStore.get('routes').forEach((cb) => {
+    hooksRoutes.push(cb());
+  });
 
-    <Redirect from="/share/group/:shareId/" to="/share/issue/:shareId/" />
-    <Route path="/share/issue/:shareId/" component={errorHandler(SharedGroupDetails)} />
+  let hooksAdminRoutes = [];
+  HookStore.get('routes:admin').forEach((cb) => {
+    hooksAdminRoutes.push(cb());
+  });
 
-    <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
-      <IndexRoute component={errorHandler(OrganizationDashboard)}/>
+  return (
+    <Route path="/" component={errorHandler(App)}>
+      <Route path="/api/" component={errorHandler(ApiDashboard)} />
+      <Route path="/api/new-token/" component={errorHandler(ApiNewToken)} />
 
-      <Route path="/organizations/:orgId/audit-log/" component={errorHandler(OrganizationAuditLog)} />
-      <Route path="/organizations/:orgId/teams/" component={errorHandler(OrganizationTeams)} />
-      <Route path="/organizations/:orgId/all-teams/" component={errorHandler(OrganizationTeams)}>
-        <IndexRoute component={errorHandler(AllTeamsList)}/>
+      <Route path="/manage/" component={errorHandler(Admin)}>
+        <IndexRoute component={errorHandler(AdminOverview)} />
+        <Route path="buffer/" component={errorHandler(AdminBuffer)} />
+        <Route path="organizations/" component={errorHandler(AdminOrganizations)} />
+        <Route path="projects/" component={errorHandler(AdminProjects)} />
+        <Route path="settings/" component={errorHandler(AdminSettings)} />
+        <Route path="users/" component={errorHandler(AdminUsers)} />
+        {hooksAdminRoutes}
       </Route>
-      <Route path="/organizations/:orgId/issues/assigned/" component={errorHandler(MyIssuesAssignedToMe)} />
-      <Route path="/organizations/:orgId/issues/bookmarks/" component={errorHandler(MyIssuesBookmarked)} />
-      <Route path="/organizations/:orgId/issues/history/" component={errorHandler(MyIssuesViewed)} />
-      <Route path="/organizations/:orgId/projects/choose/" component={errorHandler(ProjectChooser)} />
-      <Route path="/organizations/:orgId/rate-limits/" component={errorHandler(OrganizationRateLimits)} />
-      <Route path="/organizations/:orgId/stats/" component={errorHandler(OrganizationStats)} />
-      <Route path="/organizations/:orgId/teams/:teamId/" component={errorHandler(TeamDetails)}>
-        <Route path="settings/" component={errorHandler(TeamSettings)} />
-        <Route path="members/" component={errorHandler(TeamMembers)} />
-      </Route>
-      <Route path="/organizations/:orgId/actions/set-callsigns/" component={errorHandler(SetCallsignsAction)} />
-
-      <Route path=":projectId/" component={errorHandler(ProjectDetails)}>
-        <IndexRoute component={errorHandler(Stream)} />
-        <Route path="searches/:searchId/" component={errorHandler(Stream)} />
-        <Route path="dashboard/" component={errorHandler(ProjectDashboard)} />
-        <Route path="events/" component={errorHandler(ProjectEvents)} />
-        <Route path="releases/" component={errorHandler(ProjectReleases)} />
-        <Route name="releaseDetails" path="releases/:version/" component={errorHandler(ReleaseDetails)}>
-          <IndexRoute component={errorHandler(ReleaseNewEvents)} />
-          <Route path="all-events/" component={errorHandler(ReleaseAllEvents)} />
-          <Route path="artifacts/" component={errorHandler(ReleaseArtifacts)} />
+
+      <Redirect from="/share/group/:shareId/" to="/share/issue/:shareId/" />
+      <Route path="/share/issue/:shareId/" component={errorHandler(SharedGroupDetails)} />
+
+      <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
+        <IndexRoute component={errorHandler(OrganizationDashboard)}/>
+
+        <Route path="/organizations/:orgId/audit-log/" component={errorHandler(OrganizationAuditLog)} />
+        <Route path="/organizations/:orgId/teams/" component={errorHandler(OrganizationTeams)} />
+        <Route path="/organizations/:orgId/all-teams/" component={errorHandler(OrganizationTeams)}>
+          <IndexRoute component={errorHandler(AllTeamsList)}/>
         </Route>
-        <Route path="user-feedback/" component={errorHandler(ProjectUserReports)} />
-        <Route path="settings/" component={errorHandler(ProjectSettings)}>
-          <Route path="install/" component={errorHandler(ProjectInstall)}>
-            <IndexRoute component={errorHandler(ProjectInstallOverview)}/>
-            <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)}/>
-          </Route>
-          <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
-          <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
-          <Route path="user-feedback/" component={errorHandler(ProjectUserReportSettings)} />
-          <Route path="csp/" component={errorHandler(ProjectCspSettings)} />
+        <Route path="/organizations/:orgId/issues/assigned/" component={errorHandler(MyIssuesAssignedToMe)} />
+        <Route path="/organizations/:orgId/issues/bookmarks/" component={errorHandler(MyIssuesBookmarked)} />
+        <Route path="/organizations/:orgId/issues/history/" component={errorHandler(MyIssuesViewed)} />
+        <Route path="/organizations/:orgId/projects/choose/" component={errorHandler(ProjectChooser)} />
+        <Route path="/organizations/:orgId/rate-limits/" component={errorHandler(OrganizationRateLimits)} />
+        <Route path="/organizations/:orgId/stats/" component={errorHandler(OrganizationStats)} />
+        <Route path="/organizations/:orgId/teams/:teamId/" component={errorHandler(TeamDetails)}>
+          <Route path="settings/" component={errorHandler(TeamSettings)} />
+          <Route path="members/" component={errorHandler(TeamMembers)} />
         </Route>
-        <Redirect from="group/:groupId/" to="issues/:groupId/" />
-        <Route path="issues/:groupId/" component={errorHandler(GroupDetails)}
-               ignoreScrollBehavior>
-          <IndexRoute component={errorHandler(GroupEventDetails)} />
-
-          <Route path="activity/" component={errorHandler(GroupActivity)} />
-          <Route path="events/:eventId/" component={errorHandler(GroupEventDetails)} />
-          <Route path="events/" component={errorHandler(GroupEvents)} />
-          <Route path="hashes/" component={errorHandler(GroupHashes)} />
-          <Route path="tags/" component={errorHandler(GroupTags)} />
-          <Route path="tags/:tagKey/" component={errorHandler(GroupTagValues)} />
-          <Route path="feedback/" component={errorHandler(GroupUserReports)} />
+        <Route path="/organizations/:orgId/actions/set-callsigns/" component={errorHandler(SetCallsignsAction)} />
+
+        <Route path=":projectId/" component={errorHandler(ProjectDetails)}>
+          <IndexRoute component={errorHandler(Stream)} />
+          <Route path="searches/:searchId/" component={errorHandler(Stream)} />
+          <Route path="dashboard/" component={errorHandler(ProjectDashboard)} />
+          <Route path="events/" component={errorHandler(ProjectEvents)} />
+          <Route path="releases/" component={errorHandler(ProjectReleases)} />
+          <Route name="releaseDetails" path="releases/:version/" component={errorHandler(ReleaseDetails)}>
+            <IndexRoute component={errorHandler(ReleaseNewEvents)} />
+            <Route path="all-events/" component={errorHandler(ReleaseAllEvents)} />
+            <Route path="artifacts/" component={errorHandler(ReleaseArtifacts)} />
+          </Route>
+          <Route path="user-feedback/" component={errorHandler(ProjectUserReports)} />
+          <Route path="settings/" component={errorHandler(ProjectSettings)}>
+            <Route path="install/" component={errorHandler(ProjectInstall)}>
+              <IndexRoute component={errorHandler(ProjectInstallOverview)}/>
+              <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)}/>
+            </Route>
+            <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
+            <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
+            <Route path="user-feedback/" component={errorHandler(ProjectUserReportSettings)} />
+            <Route path="csp/" component={errorHandler(ProjectCspSettings)} />
+          </Route>
+          <Redirect from="group/:groupId/" to="issues/:groupId/" />
+          <Route path="issues/:groupId/" component={errorHandler(GroupDetails)}
+                 ignoreScrollBehavior>
+            <IndexRoute component={errorHandler(GroupEventDetails)} />
+
+            <Route path="activity/" component={errorHandler(GroupActivity)} />
+            <Route path="events/:eventId/" component={errorHandler(GroupEventDetails)} />
+            <Route path="events/" component={errorHandler(GroupEvents)} />
+            <Route path="hashes/" component={errorHandler(GroupHashes)} />
+            <Route path="tags/" component={errorHandler(GroupTags)} />
+            <Route path="tags/:tagKey/" component={errorHandler(GroupTagValues)} />
+            <Route path="feedback/" component={errorHandler(GroupUserReports)} />
+          </Route>
         </Route>
       </Route>
-    </Route>
 
-    <Route path="*" component={errorHandler(RouteNotFound)} onEnter={appendTrailingSlash}/>
-  </Route>
-);
+      {hooksRoutes}
+
+      <Route path="*" component={errorHandler(RouteNotFound)} onEnter={appendTrailingSlash}/>
+    </Route>
+  );
+}
 
 export default routes;
diff --git a/src/sentry/static/sentry/app/views/admin/index.jsx b/src/sentry/static/sentry/app/views/admin/index.jsx
index 9b6c32c9c9..c016761a45 100644
--- a/src/sentry/static/sentry/app/views/admin/index.jsx
+++ b/src/sentry/static/sentry/app/views/admin/index.jsx
@@ -5,9 +5,22 @@ import React from 'react';
 import ConfigStore from '../../stores/configStore';
 import Footer from '../../components/footer';
 import Header from '../../components/header';
+import HookStore from '../../stores/hookStore';
 import ListLink from '../../components/listLink';
 
 const Admin = React.createClass({
+  getInitialState() {
+    // Allow injection via getsentry et all
+    let hooksManage = [];
+    HookStore.get('admin:sidebar:manage').forEach((cb) => {
+      hooksManage.push(cb());
+    });
+
+    return {
+      hooksManage: hooksManage,
+    };
+  },
+
   getTitle() {
     return 'Sentry Admin';
   },
@@ -38,9 +51,9 @@ const Admin = React.createClass({
                   <h6 className="nav-header">Manage</h6>
                   <ul className="nav nav-stacked">
                     <ListLink to="/manage/organizations/">Organizations</ListLink>
-                    <li><a href={`${urlPrefix}/manage/teams/`}>Teams</a></li>
-                    <li><a href={`${urlPrefix}/manage/projects/`}>Projects</a></li>
-                    <li><a href={`${urlPrefix}/manage/users/`}>Users</a></li>
+                    <ListLink to="/manage/projects/">Projects</ListLink>
+                    <ListLink to="/manage/users/">Users</ListLink>
+                    {this.state.hooksManage}
                   </ul>
                 </div>
                 <div className="col-md-10">
diff --git a/src/sentry/static/sentry/app/views/adminOrganizations.jsx b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
index 3cc624b6d1..e0f7aafa4a 100644
--- a/src/sentry/static/sentry/app/views/adminOrganizations.jsx
+++ b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
@@ -1,168 +1,50 @@
+/* eslint-disable getsentry/jsx-needs-il8n */
+/* eslint-disable react/jsx-key */
 import React from 'react';
-import {Link, History} from 'react-router';
+import {Link} from 'react-router';
 
-import ApiMixin from '../mixins/apiMixin';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import Pagination from '../components/pagination';
-import SearchBar from '../components/searchBar.jsx';
+import ResultGrid from '../components/resultGrid';
 import {t} from '../locale';
 
 const AdminOrganizations = React.createClass({
-  mixins: [
-    ApiMixin,
-    History
-  ],
-
-  getInitialState() {
-    let queryParams = this.props.location.query;
-
-    return {
-      data: [],
-      loading: true,
-      error: false,
-      query: queryParams.query || '',
-      pageLinks: '',
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.location.search !== this.props.location.search) {
-      this.setState({
-        query: this.props.location.query,
-        loading: true,
-        error: false
-      }, this.fetchData);
-    }
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData() {
-    let queryParams = this.props.location.query;
-
-    this.api.request(`/organizations/`, {
-      method: 'GET',
-      data: queryParams,
-      success: (data, _, jqXHR) => {
-        this.setState({
-          data: data,
-          error: false,
-          loading: false,
-          pageLinks: jqXHR.getResponseHeader('Link')
-        });
-      },
-      error: (error) => {
-        this.setState({
-          error: true,
-          loading: false
-        });
-      }
-    });
-  },
-
-  onSearch(query) {
-    let targetQueryParams = {};
-    if (query !== '')
-      targetQueryParams.query = query;
-
-    this.history.pushState(null, '/manage/organizations/', targetQueryParams);
-  },
-
-  renderLoading() {
-    return (
-      <tr>
-        <td colSpan="3">
-          <LoadingIndicator />
-        </td>
-      </tr>
-    );
-  },
-
-  renderError() {
-    return (
-      <tr>
-        <td colSpan="3">
-          <LoadingError onRetry={this.remountComponent} />
-        </td>
-      </tr>
-    );
-  },
-
-  renderNoResults() {
-    return (
-      <tr>
-        <td colSpan="3">
-          <span className="icon icon-exclamation" />
-          <p>{t('Sorry, no results match your filters.')}</p>
-        </td>
-      </tr>
-    );
-  },
-
-  renderResults() {
-    return this.state.data.map((item) => {
-      return (
-        <tr>
-          <td>
-            <Link to={`/${item.slug}/`}>
-              {item.name}
-            </Link><br />
-            <small>{item.slug}</small>
-          </td>
-          <td>&mdash;</td>
-          <td>&mdash;</td>
-        </tr>
-      );
-    });
+  getRow(row) {
+    return [
+      <td>
+        <strong><Link to={`/${row.slug}/`}>
+          {row.name}
+        </Link></strong><br />
+        <small>{row.slug}</small>
+      </td>
+    ];
   },
 
   render() {
+    let columns = [
+      <th>Organization</th>,
+    ];
+
     return (
       <div>
-        <div className="row">
-          <div className="col-sm-7">
-            <h3>{t('Organizations')}</h3>
-          </div>
-          <div className="col-sm-5">
-            <SearchBar defaultQuery=""
-              placeholder={t('Search for an organization.')}
-              query={this.state.query}
-              onSearch={this.onSearch}
-            />
-          </div>
-        </div>
-
-        <table className="table">
-          <thead>
-            <tr>
-              <th>{t('Organization')}</th>
-              <th style={{width: 100}}>{t('Members')}</th>
-              <th style={{width: 100}}>{t('Projects')}</th>
-            </tr>
-          </thead>
-          <tbody>
-            {this.state.loading ?
-              this.renderLoading()
-            : (this.state.error ?
-              this.renderError()
-            : (this.state.data.length === 0 ?
-              this.renderNoResults()
-            :
-              this.renderResults()
-            ))}
-          </tbody>
-        </table>
-        <Pagination pageLinks={this.state.pageLinks}/>
+        <h3>{t('Organizations')}</h3>
+        <ResultGrid
+          path="/manage/organizations/"
+          endpoint={`/organizations/`}
+          method="GET"
+          columns={columns}
+          columnsForRow={this.getRow}
+          hasSearch={true}
+          sortOptions={[
+            ['date', 'Date Joined'],
+            ['members', 'Members'],
+            ['events', 'Events'],
+            ['projects', 'Projects'],
+            ['employees', 'Employees'],
+          ]}
+          defaultSort="date"
+          {...this.props} />
       </div>
     );
-  }
+  },
 });
 
 export default AdminOrganizations;
diff --git a/src/sentry/static/sentry/app/views/adminProjects.jsx b/src/sentry/static/sentry/app/views/adminProjects.jsx
new file mode 100644
index 0000000000..39f45795b3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/adminProjects.jsx
@@ -0,0 +1,63 @@
+/* eslint-disable getsentry/jsx-needs-il8n */
+/* eslint-disable react/jsx-key */
+import React from 'react';
+import moment from 'moment';
+
+import ResultGrid from '../components/resultGrid';
+import {t} from '../locale';
+
+export const prettyDate = function(x) {
+    return moment(x).format('ll');
+};
+
+const AdminProjects = React.createClass({
+  getRow(row) {
+    return [
+      <td>
+        <strong><a href={`/${row.organization.slug}/${row.slug}/`}>
+          {row.name}
+        </a></strong><br />
+        <small>{row.organization.name}</small>
+      </td>,
+      <td style={{textAlign: 'center'}}>{row.status}</td>,
+      <td style={{textAlign: 'right'}}>{prettyDate(row.dateCreated)}</td>,
+    ];
+  },
+
+  render() {
+    let columns = [
+      <th>Project</th>,
+      <th style={{width: 150, textAlign: 'center'}}>Status</th>,
+      <th style={{width: 200, textAlign: 'right'}}>Created</th>,
+    ];
+
+    return (
+      <div>
+        <h3>{t('Projects')}</h3>
+        <ResultGrid
+          path="/manage/projects/"
+          endpoint={`/projects/`}
+          method="GET"
+          columns={columns}
+          columnsForRow={this.getRow}
+          hasSearch={true}
+          filters={{
+            status: {
+              name: 'Status',
+              options: [
+                ['active', 'Active'],
+                ['deleted', 'Deleted'],
+              ],
+            },
+          }}
+          sortOptions={[
+            ['date', 'Date Created'],
+          ]}
+          defaultSort="date"
+          {...this.props} />
+      </div>
+    );
+  },
+});
+
+export default AdminProjects;
diff --git a/src/sentry/static/sentry/app/views/adminUsers.jsx b/src/sentry/static/sentry/app/views/adminUsers.jsx
new file mode 100644
index 0000000000..c7ea299bc6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/adminUsers.jsx
@@ -0,0 +1,65 @@
+/* eslint-disable getsentry/jsx-needs-il8n */
+/* eslint-disable react/jsx-key */
+import React from 'react';
+import moment from 'moment';
+
+import ResultGrid from '../components/resultGrid';
+import {t} from '../locale';
+
+export const prettyDate = function(x) {
+    return moment(x).format('ll');
+};
+
+const AdminUsers = React.createClass({
+  getRow(row) {
+    return [
+      <td>
+        <strong><a href={`/manage/users/${row.id}/`}>
+          {row.username}
+        </a></strong><br />
+        {row.email !== row.username &&
+          <small>{row.email}</small>
+        }
+      </td>,
+      <td style={{textAlign: 'center'}}>{prettyDate(row.dateJoined)}</td>,
+      <td style={{textAlign: 'center'}}>{prettyDate(row.lastLogin)}</td>
+    ];
+  },
+
+  render() {
+    let columns = [
+      <th>User</th>,
+      <th style={{textAlign: 'center', width: 150}}>Joined</th>,
+      <th style={{textAlign: 'center', width: 150}}>Last Login</th>
+    ];
+
+    return (
+      <div>
+        <h3>{t('Users')}</h3>
+        <ResultGrid
+          path="/manage/users/"
+          endpoint={`/users/`}
+          method="GET"
+          columns={columns}
+          columnsForRow={this.getRow}
+          hasSearch={true}
+          filters={{
+            status: {
+              name: 'Status',
+              options: [
+                ['active', 'Active'],
+                ['disabled', 'Disabled'],
+              ],
+            },
+          }}
+          sortOptions={[
+            ['date', 'Date Joined'],
+          ]}
+          defaultSort="date"
+          {...this.props} />
+      </div>
+    );
+  },
+});
+
+export default AdminUsers;
diff --git a/src/sentry/static/sentry/less/result-grid.less b/src/sentry/static/sentry/less/result-grid.less
new file mode 100644
index 0000000000..1553ce872c
--- /dev/null
+++ b/src/sentry/static/sentry/less/result-grid.less
@@ -0,0 +1,69 @@
+.result-grid {
+  clear: both;
+
+  .table-grid {
+    .table;
+  }
+
+  .table-grid thead th {
+    font-size: 12px;
+    text-transform: uppercase;
+  }
+
+  td small {
+    font-size: 0.8em;
+  }
+
+  .table-options {
+    position: relative;
+    margin-bottom: 20px;
+  }
+
+  .filter-options, .sort-options {
+    display: inline-block;
+    margin-right: 5px;
+  }
+
+  .filter-options .dropdown-toggle {
+    color: inherit;
+  }
+
+  .sorted-by, .filter-options {
+    margin-left: 5px;
+    padding: 0 10px;
+    background: #f9f9f9;
+    font-weight: 600;
+    color: inherit;
+    display: inline-block;
+
+    &:hover {
+      color: inherit;
+    }
+
+    .icon-arrow-down {
+      margin-left: 5px;
+    }
+  }
+
+  .result-grid-search {
+    .pull-right;
+    .form-inline;
+
+    .input-search {
+      padding: 3px 8px 3px;
+      font-size: 14px;
+      vertical-align: middle;
+    }
+
+    .btn,
+    .btn-primary,
+    .btn-default {
+      border: 0;
+      margin-left: -10px;
+      position: relative;
+    }
+    .btn-sm {
+      padding: 5px 10px;
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 1d8f73c362..8dcb105c88 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -16,5 +16,6 @@
 @import url("./auth.less");
 @import url("./misc.less");
 @import url("./admin.less");
+@import url("./result-grid.less");
 
 @import "~platformicons/platformicons/platformicons.css";
diff --git a/src/sentry/templates/sentry/admin/projects/list.html b/src/sentry/templates/sentry/admin/projects/list.html
deleted file mode 100644
index 84c1f9d641..0000000000
--- a/src/sentry/templates/sentry/admin/projects/list.html
+++ /dev/null
@@ -1,73 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_admin_helpers %}
-
-{% block title %}{% trans "Manage Projects" %} | {{ block.super }}{% endblock %}
-
-{% block admin-nav-projects %} class="active"{% endblock %}
-
-{% block main %}
-    {% paginator project_list from request as project_list per_page 50 %}
-
-    <form class="pull-right" method="GET" action="">
-        <input class="form-control" type="text" name="pquery" value="{% if project_query %}{{ project_query }}{% endif %}" placeholder="search by project name" style="width: 240px; margin-top: -4px;">
-    </form>
-
-    <h3 class="no-border">{% trans "Projects" %}</h3>
-
-    {% if sort == "events" %}
-        <p class="alert alert-info">{% trans "You are viewing projects sorted by the number of events created in the last 24 hours. Projects that have not sent any data are not shown in this view." %}</p>
-    {% endif %}
-
-    {% querystring from request without sort as sort_querystring %}
-
-    {% if project_list.paginator.objects %}
-        <table class="table" style="margin-bottom: 20px">
-            <colgroup>
-                <col>
-                <col style="width:150px;">
-                <col style="width:150px;">
-                <col style="width:150px;">
-            </colgroup>
-            <thead>
-                <tr>
-                    <th><a href="?{{ sort_querystring }}&amp;sort=name">{% trans "Project" %}</a></th>
-                    <th style="text-align:right;">{% trans "Events (24h)" %}</th>
-                    <th style="text-align:right;"><a href="?{{ sort_querystring }}&amp;sort=date">{% trans "Date Added" %}</a></th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for project, avg_events in project_list.paginator.objects|with_event_counts %}
-                    <tr>
-                        <td>
-                            {% if project.team %}
-                                <a href="{% url 'sentry-manage-project' project.organization.slug project.slug %}"><strong>{{ project.organization.slug }}/{{ project.slug }}</strong></a>
-                                <a href="{% url 'sentry-stream' project.organization.slug project.slug %}">[stream]</a><br/>
-                            {% else %}
-                                <strong>{{ project.slug }}</strong>
-                            {% endif %}
-                        </td>
-                        <td style="text-align:right; vertical-align:middle;">
-                            {{ avg_events|small_count }}
-                        </td>
-                        <td style="text-align:right; vertical-align:middle;">
-                            {{ project.date_added|date }}
-                        </td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-
-    {% else %}
-        <p class="alert alert-notice">{% trans "There are no active projects in Sentry." %}</p>
-    {% endif %}
-
-    <div class="btn-toolbar">
-        <div class="btn-group pull-right">
-            <a class="btn btn-lg prev{% if not project_list.paginator.has_previous %} disabled{% else %}" href="?{{ project_list.query_string|escape }}&amp;p={{ project_list.paginator.previous_page }}{% endif %}"><span class="icon-arrow-left"></span></a>
-            <a class="btn btn-lg next{% if not project_list.paginator.has_next %} disabled{% else %}" href="?{{ project_list.query_string|escape }}&amp;p={{ project_list.paginator.next_page }}{% endif %}"><span class="icon-arrow-right"></span></a>
-        </div>
-    </div>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/admin/teams/list.html b/src/sentry/templates/sentry/admin/teams/list.html
deleted file mode 100644
index 4589329a76..0000000000
--- a/src/sentry/templates/sentry/admin/teams/list.html
+++ /dev/null
@@ -1,64 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_admin_helpers %}
-
-{% block title %}{% trans "Manage Teams" %} | {{ block.super }}{% endblock %}
-
-{% block admin-nav-teams %} class="active"{% endblock %}
-
-{% block main %}
-    {% paginator team_list from request as team_list per_page 50 %}
-        <form class="pull-right" method="GET" action="">
-            <input class="form-control" type="text" name="tquery" value="{% if team_query %}{{ team_query }}{% endif %}" placeholder="search by team name" style="width: 240px; margin-top: -4px">
-        </form>
-        <h3 class="no-border">{% trans "Teams" %}</h3>
-
-        {% querystring from request without sort as sort_querystring %}
-
-        {% if team_list.paginator.objects %}
-        <table class="table" style="margin-bottom: 20px;">
-            <colgroup>
-                <col>
-                <col style="width:150px;">
-                <col style="width:150px;">
-                <col style="width:150px;">
-            </colgroup>
-            <thead>
-                <tr>
-                    <th><a href="?{{ sort_querystring }}&amp;sort=name">{% trans "Team" %}</a></th>
-                    <th style="text-align:right;"><a href="?{{ sort_querystring }}&amp;sort=projects">{% trans "Projects" %}</a></th>
-                    <th style="text-align:right;"><a href="?{{ sort_querystring }}&amp;sort=date">{% trans "Date Added" %}</a></th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for team in team_list.paginator.objects %}
-                    <tr>
-                        <td>
-                            <a href="{% absolute_uri '/organizations/{}/teams/{}/settings/' team.organization.slug team.slug %}">
-                                <strong>{{ team.slug }}</strong>
-                            </a>
-                        </td>
-                        <td style="text-align:right; vertical-align:middle;">
-                            {{ team.num_projects }}
-                        </td>
-                        <td style="text-align:right; vertical-align:middle;">
-                            {{ team.date_added|date }}
-                        </td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-
-    {% else %}
-        <p class="alert alert-notice">{% trans "There are no active teams in Sentry." %}</p>
-    {% endif %}
-
-    <div class="btn-toolbar">
-        <div class="btn-group pull-right">
-            <a class="btn btn-lg prev{% if not team_list.paginator.has_previous %} disabled{% else %}" href="?{{ team_list.query_string|escape }}&amp;p={{ team_list.paginator.previous_page }}{% endif %}"><span class="icon-arrow-left"></span></a>
-            <a class="btn btn-lg next{% if not team_list.paginator.has_next %} disabled{% else %}" href="?{{ team_list.query_string|escape }}&amp;p={{ team_list.paginator.next_page }}{% endif %}"><span class="icon-arrow-right"></span></a>
-        </div>
-    </div>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/admin/users/edit.html b/src/sentry/templates/sentry/admin/users/edit.html
index 3e7f75019e..bf99a79960 100644
--- a/src/sentry/templates/sentry/admin/users/edit.html
+++ b/src/sentry/templates/sentry/admin/users/edit.html
@@ -1,4 +1,4 @@
-{% extends "sentry/admin/users/list.html" %}
+{% extends "sentry/bases/admin.html" %}
 
 {% load crispy_forms_tags %}
 {% load i18n %}
@@ -9,6 +9,7 @@
 
 {% block main %}
     <section class="body">
+        <h3>User Details <small>{{ user.username }}</small></h3>
         <form action="" method="post">
             {% csrf_token %}
             {{ form|as_crispy_errors }}
@@ -24,9 +25,9 @@
                 {% endif %}
             </fieldset>
         </form>
+        <br />
         {% if project_list %}
-            <h3>{% trans "Projects" %}</h3>
-            <br/>
+            <h4>{% trans "Projects" %}</h4>
             <table class="table table-bordered table-striped">
                 <colgroup>
                     <col>
diff --git a/src/sentry/templates/sentry/admin/users/list.html b/src/sentry/templates/sentry/admin/users/list.html
deleted file mode 100644
index 4eae914bd2..0000000000
--- a/src/sentry/templates/sentry/admin/users/list.html
+++ /dev/null
@@ -1,77 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Manage Users" %} | {{ block.super }}{% endblock %}
-
-{% block admin-nav-users %} class="active"{% endblock %}
-
-{% block main %}
-    {% paginator user_list from request as user_list per_page 50 %}
-
-    <form class="pull-right" method="GET" action="">
-        <input class="form-control" type="text" name="uquery" value="{% if user_query %}{{ user_query }}{% endif %}" placeholder="search by email address" style="width: 240px; margin-top: -4px;">
-    </form>
-
-    <h3 class="no-border">{% trans "Users" %}</h3>
-
-    {% if user_list.paginator.objects %}
-        {% querystring from request without sort as sort_querystring %}
-
-        <table class="table" style="margin-bottom: 20px">
-            <colgroup>
-                <col>
-                <col style="width:150px;">
-                <col style="width:150px;">
-            </colgroup>
-            <thead>
-                <tr>
-                    <th><a href="?{{ sort_querystring }}&amp;sort=name">{% trans "Name" %}</a></th>
-                    <th style="text-align:center;"><a href="?{{ sort_querystring }}&amp;sort=joined">{% trans "Joined" %}</a></th>
-                    <th style="text-align:center;"><a href="?{{ sort_querystring }}&amp;sort=login">{% trans "Last Login" %}</a></th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for user in user_list.paginator.objects %}
-                    <tr>
-                        <td>
-                            <strong><a href="{% url 'sentry-admin-edit-user' user.pk %}">
-                                {{ user.username }}
-                            </a></strong>
-                            {% if not user.is_active %}
-                                <em>inactive account</em>
-                            {% endif %}
-                            <br/>
-                            <small>
-                                {% if user.name %}
-                                    {{ user.name }} ({{ user.email }})
-                                {% else %}
-                                    {{ user.email }}
-                                {% endif %}
-                            </small>
-                        </td>
-                        <td style="text-align:center; vertical-align:middle;">
-                            {{ user.date_joined|date }}
-                        </td>
-                        <td style="text-align:center; vertical-align:middle;">
-                            {{ user.last_login|date }}
-                        </td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-
-    {% else %}
-        <p class="alert alert-notice">{% trans "There are no users matching your query in Sentry." %}</p>
-    {% endif %}
-
-    <div class="btn-toolbar">
-        <a href="{% url 'sentry-admin-new-user' %}" class="btn btn-primary">{% trans "Create a new user" %}</a>
-        <div class="btn-group pull-right">
-            <a class="btn btn-lg prev{% if not user_list.paginator.has_previous %} disabled{% else %}" href="?{{ user_list.query_string|escape }}&amp;p={{ user_list.paginator.previous_page }}{% endif %}"><span class="icon-arrow-left"></span></a>
-            <a class="btn btn-lg next{% if not user_list.paginator.has_next %} disabled{% else %}" href="?{{ user_list.query_string|escape }}&amp;p={{ user_list.paginator.next_page }}{% endif %}"><span class="icon-arrow-right"></span></a>
-        </div>
-    </div>
-
-{% endblock %}
diff --git a/src/sentry/templates/sentry/admin/users/list_projects.html b/src/sentry/templates/sentry/admin/users/list_projects.html
deleted file mode 100644
index cc7c8f7904..0000000000
--- a/src/sentry/templates/sentry/admin/users/list_projects.html
+++ /dev/null
@@ -1,49 +0,0 @@
-{% extends "sentry/admin/users/edit.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_admin_helpers %}
-
-{% block title %}{% trans "Projects" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    {% paginate project_list from request as project_list per_page 50 %}
-
-    <section class="body">
-        {% if project_list.objects %}
-            {{ project_list.paging }}
-
-            <table class="table table-striped">
-                <colgroup>
-                    <col>
-                    <col style="width:150px;">
-                    <col style="width:150px;">
-                </colgroup>
-                <thead>
-                    <tr>
-                        <th>{% trans "Project" %}</th>
-                        <th style="text-align:center;">{% trans "Daily Events" %}</th>
-                    </tr>
-                </thead>
-                <tbody>
-                    {% for project, avg_events in project_list.objects|with_event_counts %}
-                        <tr>
-                            <td>
-                                {{ project.name }} <a href="{% url 'sentry-stream' project.organization.slug project.slug %}">[view]</a>
-                                </a>
-                            </td>
-                            <td style="text-align:center; vertical-align:middle;">
-                                <em>~{{ avg_events }}</em>
-                            </td>
-                        </tr>
-                    {% endfor %}
-                </tbody>
-            </table>
-
-            {{ project_list.paging }}
-        {% else %}
-            <p class="alert alert-notice">{% trans "There are no active projects for this user." %}</p>
-        {% endif %}
-
-    </section>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/admin/users/new.html b/src/sentry/templates/sentry/admin/users/new.html
index 8fa8fb8df6..2556065456 100644
--- a/src/sentry/templates/sentry/admin/users/new.html
+++ b/src/sentry/templates/sentry/admin/users/new.html
@@ -1,4 +1,4 @@
-{% extends "sentry/admin/users/list.html" %}
+{% extends "sentry/bases/admin.html" %}
 
 {% load i18n %}
 {% load sentry_helpers %}
@@ -7,6 +7,8 @@
 
 {% block main %}
     <section class="body">
+        <h3>New User</h3>
+
         {% include "sentry/partial/_form.html" %}
     </section>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/admin/users/remove.html b/src/sentry/templates/sentry/admin/users/remove.html
index 8f4b79aa5c..72bd052991 100644
--- a/src/sentry/templates/sentry/admin/users/remove.html
+++ b/src/sentry/templates/sentry/admin/users/remove.html
@@ -7,6 +7,8 @@
 
 {% block main %}
     <section class="body">
+        <h3>Remove User <small>{{ user.username }}</small></h3>
+
         <form action="" method="post">
             {% csrf_token %}
             {{ form|as_crispy_errors }}
diff --git a/src/sentry/templates/sentry/bases/admin.html b/src/sentry/templates/sentry/bases/admin.html
index 7f888b9f8d..19971abab1 100644
--- a/src/sentry/templates/sentry/bases/admin.html
+++ b/src/sentry/templates/sentry/bases/admin.html
@@ -21,10 +21,9 @@
 
     <h6 class="nav-header">{% trans "Manage" %}</h6>
     <ul class="nav nav-stacked">
-        <li{% block admin-nav-organizations %}{% endblock %}><a href="{% absolute_uri '/manage/organizations/' %}">{% trans "Organizations" %}</a></li>
-        <li{% block admin-nav-teams %}{% endblock %}><a href="{% url 'sentry-admin-teams' %}">{% trans "Teams" %}</a></li>
-        <li{% block admin-nav-projects %}{% endblock %}><a href="{% url 'sentry-admin-projects' %}">{% trans "Projects" %}</a></li>
-        <li{% block admin-nav-users %}{% endblock %}><a href="{% url 'sentry-admin-users' %}">{% trans "Users" %}</a></li>
+        <li><a href="{% absolute_uri '/manage/organizations/' %}">{% trans "Organizations" %}</a></li>
+        <li><a href="{% absolute_uri '/manage/projects/' %}">{% trans "Projects" %}</a></li>
+        <li><a href="{% absolute_uri '/manage/users/' %}">{% trans "Users" %}</a></li>
     </ul>
 
     {% with plugins=PLUGINS.for_site|as_sorted %}
diff --git a/src/sentry/templates/sentry/bases/react.html b/src/sentry/templates/sentry/bases/react.html
index 5505e42612..70e1289f8a 100644
--- a/src/sentry/templates/sentry/bases/react.html
+++ b/src/sentry/templates/sentry/bases/react.html
@@ -16,7 +16,7 @@
   <script>
   $(function(){
     ReactDOM.render(
-      React.createElement(Router.Router, {history:Sentry.createHistory()}, Sentry.routes),
+      React.createElement(Router.Router, {history:Sentry.createHistory()}, Sentry.routes()),
       document.getElementById('blk_router')
     );
   });
diff --git a/src/sentry/templates/sentry/organization-audit-log.html b/src/sentry/templates/sentry/organization-audit-log.html
deleted file mode 100644
index bd409fc5ca..0000000000
--- a/src/sentry/templates/sentry/organization-audit-log.html
+++ /dev/null
@@ -1,61 +0,0 @@
-{% extends "sentry/bases/organization.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Audit Log" %} | {{ block.super }}{% endblock %}
-
-{% block org_auditlog_nav %}active{% endblock %}
-
-{% block main %}
-
-  <h3>Audit Log</h3>
-
-  {% paginate audit_log_queryset from request as entry_list per_page 50 %}
-
-  {% if entry_list.objects %}
-    <p>{% blocktrans %}Sentry keeps track of important events within your organization.{% endblocktrans %}</p>
-
-    <table class="table">
-      <thead>
-        <tr>
-          <th>Member</th>
-          <th>Action</th>
-          <th>IP</th>
-          <th>Time</th>
-        </tr>
-      </thead>
-      <tbody>
-        {% for entry in entry_list.objects %}
-          <tr>
-            <td class="table-user-info">
-              {% if entry.actor %}
-                <span class="avatar">
-                  {% letter_avatar_svg entry.actor.get_display_name entry.actor.get_label %}
-                  {% if entry.actor.get_avatar_type == 'upload' %}
-                    <img src="{% profile_photo_url entry.actor.id size 72 %}">
-                  {% elif entry.actor.get_avatar_type == 'gravatar' %}
-                    <img src="{% gravatar_url entry.actor.email size 72 default 'blank' %}" />
-                  {% endif %}
-                </span>
-              {% endif %}
-              <h5>{{ entry.get_actor_name }}</h5>
-              {{ entry.get_note }}
-            </td>
-            <td>{{ entry.get_event_display }}</td>
-            <td>{{ entry.ip_address }}</td>
-            <td>
-              <span class="pretty-date" title="{{ entry.datetime|date:"c" }}Z">{{ entry.datetime|timesince }}</span>
-            </td>
-          </tr>
-        {% endfor %}
-      </tbody>
-    </table>
-
-    {{ event_list.paging }}
-  {% else %}
-    <div class="well">
-      <p style="margin: 0;">It looks like nothing has really happened within your organization. Check back later!</p>
-    </div>
-  {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/plugins/bases/tag/index.html b/src/sentry/templates/sentry/plugins/bases/tag/index.html
deleted file mode 100644
index e2291718bb..0000000000
--- a/src/sentry/templates/sentry/plugins/bases/tag/index.html
+++ /dev/null
@@ -1,43 +0,0 @@
-{% extends "sentry/groups/details.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block main %}
-    {% paginate unique_tags from request as tag_list per_page 25 %}
-
-    {% if tag_list.objects %}
-        {{ tag_list.paging }}
-
-        <table class="table table-striped">
-            <colgroup>
-                <col>
-                <col style="width: 100px;">
-                <col style="width: 120px;">
-                <col style="width: 120px;">
-            </colgroup>
-            <thead>
-                <tr>
-                    <th>{{ tag_label }}</th>
-                    <td style="text-align:center"><a href="?sort=freq">{% trans "Times Seen" %}</a></th>
-                    <td style="text-align:center"><a href="?sort=new">{% trans "First Seen" %}</a></th>
-                    <td style="text-align:center"><a href="?sort=date">{% trans "Last Seen" %}</a></th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for tag_value, times_seen, first_seen, last_seen in tag_list.objects %}
-                    <tr>
-                        <td><a href="{% url 'sentry-stream' group.organization.slug group.project.slug %}?{{ tag_name }}={{ tag_value }}">{{ tag_value }}</a></td>
-                        <td style="text-align:center">{{ times_seen|small_count }}</td>
-                        <td style="text-align:center">{% if first_seen %}{{ first_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
-                        <td style="text-align:center">{% if last_seen %}{{ last_seen|timesince }}{% else %}<em>n/a</em>{% endif %}</td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-
-        {{ tag_list.paging }}
-    {% else %}
-        <p class="alert alert-notice">{% trans "There are no records recorded for this event." %}</p>
-    {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/plugins/bases/tag/widget.html b/src/sentry/templates/sentry/plugins/bases/tag/widget.html
deleted file mode 100644
index 7f41457340..0000000000
--- a/src/sentry/templates/sentry/plugins/bases/tag/widget.html
+++ /dev/null
@@ -1,7 +0,0 @@
-<div class="tag-widget">
-    <h6>{{ title }}</h6>
-	<ul class="nav nav-stacked tag-widget-list"
-	    data-url="{% url 'sentry-api-group-tags' group.organization.slug group.project.slug group.id tag_name %}">
-	    <li class="loading">Loading...</li>
-	</ul>
-</div>
diff --git a/src/sentry/templates/sentry/users/details.html b/src/sentry/templates/sentry/users/details.html
index 295479a1e0..9bda55f04d 100644
--- a/src/sentry/templates/sentry/users/details.html
+++ b/src/sentry/templates/sentry/users/details.html
@@ -1,4 +1,4 @@
-{% extends "sentry/users/list.html" %}
+{% extends "sentry/bases/admin.html" %}
 
 {% load i18n %}
 {% load sentry_helpers %}
diff --git a/src/sentry/templates/sentry/users/list.html b/src/sentry/templates/sentry/users/list.html
deleted file mode 100644
index e9f499dbc3..0000000000
--- a/src/sentry/templates/sentry/users/list.html
+++ /dev/null
@@ -1,57 +0,0 @@
-{% extends "sentry/bases/explore.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_plugins %}
-
-{% block title %}Users | {{ block.super }}{% endblock %}
-
-{% block main %}
-    {% paginator tag_list from request as tag_list %}
-    {% querystring from request without sort as sort_querystring %}
-
-    <div class="btn-toolbar">
-        <div class="btn-group">
-            <a href="#" class="btn dropdown-toggle" data-toggle="dropdown">{% blocktrans with sort_label as label %}Sort by: {{ label }}{% endblocktrans %} <span class="caret"></span></a>
-            <ul class="dropdown-menu">
-                <li{% ifequal sort 'recent' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=recent">{{ SORT_OPTIONS.recent }}</a></li>
-                <li{% ifequal sort 'newest' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=newest">{{ SORT_OPTIONS.newest }}</a></li>
-                <li{% ifequal sort 'events' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=events">{{ SORT_OPTIONS.events }}</a></li>
-            </ul>
-        </div>
-        <div class="btn-group pull-right">
-            <a class="btn prev{% if not tag_list.paginator.has_previous %} disabled{% else %}" href="?{{ tag_list.query_string|escape }}&amp;p={{ tag_list.paginator.previous_page }}{% endif %}"><span>{% trans "Previous" %}</span></a>
-            <a class="btn next{% if not tag_list.paginator.has_next %} disabled{% else %}" href="?{{ tag_list.query_string|escape }}&amp;p={{ tag_list.paginator.next_page }}{% endif %}"><span>{% trans "Next" %}</span></a>
-        </div>
-    </div>
-
-    {% if not tag_list.paginator.objects %}
-        <p>{% blocktrans %}You dont seem to have any user data recorded. For more information on how to send this information consult your client's documentation.{% endblocktrans %}</p>
-    {% else %}
-        <table class="table table-bordered table-striped">
-            <thead>
-                <tr>
-                    <th>{% trans "User" %}</th>
-                    <th style="width:150px;text-align:center">{% trans "Last Seen" %}</th>
-                    <th style="width:100px;text-align:center">{% trans "Events Seen" %}</th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for tag in tag_list.paginator.objects %}
-                    <tr>
-                        <td><a href="{% url 'sentry-user-details' organization.slug project.slug tag.id %}">{{ tag.get_label }}</a></td>
-                        <td style="text-align:center">{{ tag.last_seen|timesince }}</td>
-                        <td style="text-align:center">{{ tag.times_seen|small_count }}</td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-
-        <div class="btn-toolbar">
-            <div class="btn-group pull-right">
-                <a class="btn prev{% if not tag_list.paginator.has_previous %} disabled{% else %}" href="?{{ tag_list.query_string|escape }}&amp;p={{ tag_list.paginator.previous_page }}{% endif %}"><span>{% trans "Previous" %}</span></a>
-                <a class="btn next{% if not tag_list.paginator.has_next %} disabled{% else %}" href="?{{ tag_list.query_string|escape }}&amp;p={{ tag_list.paginator.next_page }}{% endif %}"><span>{% trans "Next" %}</span></a>
-            </div>
-        </div>
-    {% endif %}
-{% endblock %}
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 6e3aed0ced..d1e8b206fc 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -17,7 +17,6 @@ import six
 
 from collections import namedtuple
 from datetime import timedelta
-from paging.helpers import paginate as paginate_func
 from pkg_resources import parse_version as Version
 from six.moves import range
 from urllib import quote, urlencode
@@ -25,9 +24,7 @@ from urllib import quote, urlencode
 from django import template
 from django.conf import settings
 from django.core.urlresolvers import reverse
-from django.template import RequestContext
 from django.template.defaultfilters import stringfilter
-from django.template.loader import render_to_string
 from django.utils import timezone
 from django.utils.html import escape
 from django.utils.safestring import mark_safe
@@ -35,7 +32,6 @@ from django.utils.translation import ugettext as _
 
 from sentry import options
 from sentry.api.serializers import serialize as serialize_func
-from sentry.constants import EVENTS_PER_PAGE
 from sentry.models import UserAvatar, Organization
 from sentry.utils import json
 from sentry.utils.strings import to_unicode
@@ -215,57 +211,6 @@ def duration(value):
     return ''.join(output)
 
 
-# XXX: this is taken from django-paging so that we may render
-#      a custom template, and not worry about INSTALLED_APPS
-@tag(register, [Variable('queryset_or_list'),
-                Constant('from'), Variable('request'),
-                Optional([Constant('as'), Name('asvar')]),
-                Optional([Constant('per_page'), Variable('per_page')])])
-def paginate(context, queryset_or_list, request, asvar=None, per_page=EVENTS_PER_PAGE):
-    """{% paginate queryset_or_list from request as foo[ per_page 25] %}"""
-    result = paginate_func(request, queryset_or_list, per_page, endless=True)
-
-    context_instance = RequestContext(request)
-    paging = mark_safe(render_to_string('sentry/partial/_pager.html', result, context_instance))
-
-    result = dict(objects=result['paginator'].get('objects', []), paging=paging)
-
-    if asvar:
-        context[asvar] = result
-        return ''
-    return result
-
-
-@tag(register, [Variable('queryset_or_list'),
-                Constant('from'), Variable('request'),
-                Optional([Constant('as'), Name('asvar')]),
-                Optional([Constant('per_page'), Variable('per_page')])])
-def paginator(context, queryset_or_list, request, asvar=None, per_page=EVENTS_PER_PAGE):
-    """{% paginator queryset_or_list from request as foo[ per_page 25] %}"""
-    result = paginate_func(request, queryset_or_list, per_page, endless=True)
-
-    if asvar:
-        context[asvar] = result
-        return ''
-    return result
-
-
-@tag(register, [Constant('from'), Variable('request'),
-                Optional([Constant('without'), Name('withoutvar')]),
-                Optional([Constant('as'), Name('asvar')])])
-def querystring(context, request, withoutvar, asvar=None):
-    params = request.GET.copy()
-
-    if withoutvar in params:
-        del params[withoutvar]
-
-    result = params.urlencode()
-    if asvar:
-        context[asvar] = result
-        return ''
-    return result
-
-
 @register.filter
 def date(dt, arg=None):
     from django.template.defaultfilters import date
@@ -361,15 +306,6 @@ def with_metadata(group_list, request):
         }
 
 
-@register.inclusion_tag('sentry/plugins/bases/tag/widget.html')
-def render_tag_widget(group, tag):
-    return {
-        'title': tag['label'],
-        'tag_name': tag['key'],
-        'group': group,
-    }
-
-
 @register.simple_tag
 def percent(value, total):
     if not (value and total):
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index e8208e300a..7d493c55b4 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -19,13 +19,12 @@ from django.conf import settings
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db import transaction
-from django.db.models import Count
 from django.http import HttpResponse, HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
 from sentry import options
 from sentry.app import env
-from sentry.models import Project, Team, User
+from sentry.models import Project, User
 from sentry.plugins import plugins
 from sentry.utils.email import send_mail
 from sentry.utils.http import absolute_uri
@@ -54,65 +53,6 @@ def configure_plugin(request, slug):
     }, request)
 
 
-@requires_admin
-def manage_projects(request):
-    project_list = Project.objects.filter(
-        status=0,
-        team__isnull=False,
-    ).select_related('team')
-
-    project_query = request.GET.get('pquery')
-    if project_query:
-        project_list = project_list.filter(name__icontains=project_query)
-
-    sort = request.GET.get('sort')
-    if sort not in ('name', 'date'):
-        sort = 'date'
-
-    if sort == 'date':
-        order_by = '-date_added'
-    elif sort == 'name':
-        order_by = 'name'
-
-    project_list = project_list.order_by(order_by)
-
-    context = {
-        'project_list': project_list,
-        'project_query': project_query,
-        'sort': sort,
-    }
-
-    return render_to_response('sentry/admin/projects/list.html', context, request)
-
-
-@requires_admin
-def manage_users(request):
-    user_list = User.objects.all().order_by('-date_joined')
-
-    user_query = request.GET.get('uquery')
-    if user_query:
-        user_list = user_list.filter(email__icontains=user_query)
-
-    sort = request.GET.get('sort')
-    if sort not in ('name', 'joined', 'login'):
-        sort = 'joined'
-
-    if sort == 'joined':
-        order_by = '-date_joined'
-    elif sort == 'login':
-        order_by = '-last_login'
-    elif sort == 'name':
-        order_by = 'name'
-
-    user_list = user_list.order_by(order_by)
-
-    return render_to_response('sentry/admin/users/list.html', {
-        'user_list': user_list,
-        'user_query': user_query,
-        'sort': sort,
-    }, request)
-
-
 @requires_admin
 @transaction.atomic
 @csrf_protect
@@ -221,56 +161,6 @@ def remove_user(request, user_id):
     return render_to_response('sentry/admin/users/remove.html', context, request)
 
 
-@requires_admin
-def list_user_projects(request, user_id):
-    try:
-        user = User.objects.get(pk=user_id)
-    except User.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-admin-users'))
-
-    project_list = Project.objects.filter(
-        status=0,
-        organization__member_set__user=user,
-    ).order_by('-date_added')
-
-    context = {
-        'project_list': project_list,
-        'the_user': user,
-    }
-
-    return render_to_response('sentry/admin/users/list_projects.html', context, request)
-
-
-@requires_admin
-def manage_teams(request):
-    team_list = Team.objects.order_by('-date_added')
-
-    team_query = request.GET.get('tquery')
-    if team_query:
-        team_list = team_list.filter(name__icontains=team_query)
-
-    sort = request.GET.get('sort')
-    if sort not in ('name', 'date', 'events'):
-        sort = 'date'
-
-    if sort == 'date':
-        order_by = '-date_added'
-    elif sort == 'name':
-        order_by = 'name'
-    elif sort == 'projects':
-        order_by = '-num_projects'
-
-    team_list = team_list.annotate(
-        num_projects=Count('project'),
-    ).order_by(order_by)
-
-    return render_to_response('sentry/admin/teams/list.html', {
-        'team_list': team_list,
-        'team_query': team_query,
-        'sort': sort,
-    }, request)
-
-
 @requires_admin
 def status_env(request):
     reserved = ('PASSWORD', 'SECRET', 'KEY')
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 4729f7811b..14af6d0317 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -290,25 +290,13 @@ urlpatterns += patterns(
     url(r'^manage/status/warnings/$', admin.status_warnings,
         name='sentry-admin-warnings-status'),
 
-    # Admin - Teams
-    url(r'^manage/teams/$', admin.manage_teams,
-        name='sentry-admin-teams'),
-
-    # Admin - Projects
-    url(r'^manage/projects/$', admin.manage_projects,
-        name='sentry-admin-projects'),
-
     # Admin - Users
-    url(r'^manage/users/$', admin.manage_users,
-        name='sentry-admin-users'),
     url(r'^manage/users/new/$', admin.create_new_user,
         name='sentry-admin-new-user'),
     url(r'^manage/users/(?P<user_id>\d+)/$', admin.edit_user,
         name='sentry-admin-edit-user'),
     url(r'^manage/users/(?P<user_id>\d+)/remove/$', admin.remove_user,
         name='sentry-admin-remove-user'),
-    url(r'^manage/users/(?P<user_id>\d+)/projects/$', admin.list_user_projects,
-        name='sentry-admin-list-user-projects'),
 
     # Admin - Plugins
     url(r'^manage/plugins/(?P<slug>[\w_-]+)/$', admin.configure_plugin,
diff --git a/tests/sentry/web/frontend/test_admin.py b/tests/sentry/web/frontend/test_admin.py
index eed1756758..be61e0b10b 100644
--- a/tests/sentry/web/frontend/test_admin.py
+++ b/tests/sentry/web/frontend/test_admin.py
@@ -57,48 +57,3 @@ class MailStatusTest(TestCase):
         resp = self.client.get(self.path)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/admin/status/mail.html')
-
-
-class ManageUsersTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-admin-users')
-
-    def test_does_render(self):
-        self.login_as(self.user)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/admin/users/list.html')
-        assert self.user in resp.context['user_list']
-
-
-class ManageTeamsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-admin-teams')
-
-    def test_does_render(self):
-        team = self.create_team()
-        self.create_project(team=team)
-        self.create_project(team=team)
-        self.login_as(self.user)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/admin/teams/list.html')
-        assert team in resp.context['team_list']
-
-
-class ManageProjectsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-admin-projects')
-
-    def test_does_render(self):
-        project = self.create_project()
-        project2 = self.create_project()
-        self.login_as(self.user)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/admin/projects/list.html')
-        assert project in resp.context['project_list']
-        assert project2 in resp.context['project_list']
