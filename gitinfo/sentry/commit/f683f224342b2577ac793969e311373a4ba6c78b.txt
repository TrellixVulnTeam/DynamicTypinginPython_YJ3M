commit f683f224342b2577ac793969e311373a4ba6c78b
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jun 13 12:38:40 2018 -0700

    feat(integrations): VSTS Repository Provider. (#8621)
    
    * Copied over the vsts repo stuff.
    
    * Made first broad changes to the repo provider.
    
    * Added changes to the tests. Will need to test after client is merged.
    
    * Added vsts to the repo list. Set up choices.
    
    * Added the organization_id to repo methods.
    
    * Changed test to have integration_id.
    
    * Removed delete_repo

diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index e881831a73..9c30d9da22 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -11,6 +11,8 @@ from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.utils.http import absolute_uri
+
+from .repository import VstsRepositoryProvider
 DESCRIPTION = """
 VSTS
 """
@@ -148,6 +150,14 @@ class VstsIntegrationProvider(IntegrationProvider):
 
         return data
 
+    def setup(self):
+        from sentry.plugins import bindings
+        bindings.add(
+            'integration-repository.provider',
+            VstsRepositoryProvider,
+            id='integrations:vsts',
+        )
+
 
 def get_projects(instance, access_token):
     session = http.build_session()
diff --git a/src/sentry/integrations/vsts/repository.py b/src/sentry/integrations/vsts/repository.py
new file mode 100644
index 0000000000..660dc6a0fd
--- /dev/null
+++ b/src/sentry/integrations/vsts/repository.py
@@ -0,0 +1,160 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.plugins import providers
+from six.moves.urllib.parse import urlparse
+from sentry.models import Integration
+
+MAX_COMMIT_DATA_REQUESTS = 90
+
+
+class VstsRepositoryProvider(providers.IntegrationRepositoryProvider):
+    name = 'Visual Studio Team Services v2'
+
+    def get_installation(self, integration_id, organization_id):
+        if integration_id is None:
+            raise ValueError('%s requires an integration_id' % self.name)
+
+        try:
+            integration_model = Integration.objects.get(id=integration_id)
+        except Integration.DoesNotExist as error:
+            self.handle_api_error(error)
+
+        return integration_model.get_installation(organization_id)
+
+    def get_config(self, organization):
+        choices = []
+        for i in Integration.objects.filter(organizations=organization, provider='vsts'):
+            choices.append((i.id, i.name))
+
+        if not choices:
+            choices = [('', '')]
+        return [
+            {
+                'name': 'integration_id',
+                'label': 'Visual Studio Installation',
+                'type': 'choice',
+                'choices': choices,
+                'initial': choices[0][0],
+                'help': 'Select which %s integration to authenticate with.' % self.name,
+                'required': True,
+            },
+            {
+                'name': 'url',
+                'label': 'Repository URL',
+                'type': 'text',
+                'placeholder': 'e.g. https://example.visualstudio.com/_git/MyFirstProject',
+                'required': True,
+            },
+            {
+                'name': 'project',
+                'label': 'Project Name',
+                'type': 'text',
+                'placeholder': 'e.g. MyFirstProject',
+                'help': 'Optional project name if it does not match the repository name',
+                'required': False,
+            }
+        ]
+
+    def validate_config(self, organization, config, actor=None):
+        if config.get('url'):
+            installation = self.get_installation(config['integration_id'], organization.id)
+            client = installation.get_client()
+
+            # parse out the repo name and the instance
+            parts = urlparse(config['url'])
+            instance = parts.netloc
+            name = parts.path.rsplit('_git/', 1)[-1]
+            project = config.get('project') or name
+
+            try:
+                repo = client.get_repo(instance, name, project)
+            except Exception as e:
+                installation.raise_error(e)
+            config.update({
+                'instance': instance,
+                'project': project,
+                'name': repo['name'],
+                'external_id': six.text_type(repo['id']),
+                'url': repo['_links']['web']['href'],
+            })
+        return config
+
+    def create_repository(self, organization, data, actor=None):
+        return {
+            'name': data['name'],
+            'external_id': data['external_id'],
+            'url': data['url'],
+            'config': {
+                'instance': data['instance'],
+                'project': data['project'],
+                'name': data['name'],
+            },
+            'integration_id': data['integration_id'],
+        }
+
+    def transform_changes(self, patch_set):
+        type_mapping = {
+            'add': 'A',
+            'delete': 'D',
+            'edit': 'M',
+        }
+        file_changes = []
+        # https://docs.microsoft.com/en-us/rest/api/vsts/git/commits/get%20changes#versioncontrolchangetype
+        for change in patch_set:
+            change_type = type_mapping.get(change['changeType'])
+
+            if change_type and change.get('item') and change['item']['gitObjectType'] == 'blob':
+                file_changes.append({
+                    'path': change['item']['path'],
+                    'type': change_type
+                })
+
+        return file_changes
+
+    def zip_commit_data(self, repo, commit_list, organization_id):
+        installation = self.get_installation(repo.integration_id, organization_id)
+        client = installation.get_client()
+        n = 0
+        for commit in commit_list:
+            commit.update(
+                {'patch_set': self.transform_changes(
+                    client.get_commit_filechanges(
+                        repo.config['instance'], repo.external_id, commit['commitId'])
+                )})
+
+            n += 1
+            if n > MAX_COMMIT_DATA_REQUESTS:
+                break
+
+        return commit_list
+
+    def compare_commits(self, repo, start_sha, end_sha, actor=None, organization_id=None):
+
+        installation = self.get_installation(repo.integration_id, organization_id)
+        client = installation.get_client()
+        instance = repo.config['instance']
+
+        try:
+            if start_sha is None:
+                res = client.get_commits(instance, repo.external_id, commit=end_sha, limit=10)
+            else:
+                res = client.get_commit_range(instance, repo.external_id, start_sha, end_sha)
+        except Exception as e:
+            installation.raise_error(e)
+
+        commits = self.zip_commit_data(repo, res['value'], organization_id)
+        return self._format_commits(repo, commits)
+
+    def _format_commits(self, repo, commit_list):
+        return [
+            {
+                'id': c['commitId'],
+                'repository': repo.name,
+                'author_email': c['author']['email'],
+                'author_name': c['author']['name'],
+                'message': c['comment'],
+                'patch_set': c.get('patch_set'),
+            } for c in commit_list
+        ]
diff --git a/src/sentry/plugins/providers/integration_repository.py b/src/sentry/plugins/providers/integration_repository.py
index f45a25b162..1be7ec5146 100644
--- a/src/sentry/plugins/providers/integration_repository.py
+++ b/src/sentry/plugins/providers/integration_repository.py
@@ -121,7 +121,7 @@ class IntegrationRepositoryProvider(object):
     def delete_repository(self, repo, actor=None):
         pass
 
-    def compare_commits(self, repo, start_sha, end_sha, actor=None):
+    def compare_commits(self, repo, start_sha, end_sha, actor=None, organization_id=None):
         raise NotImplementedError
 
     @staticmethod
diff --git a/tests/sentry/integrations/vsts/test_repository.py b/tests/sentry/integrations/vsts/test_repository.py
new file mode 100644
index 0000000000..d9b1d1b557
--- /dev/null
+++ b/tests/sentry/integrations/vsts/test_repository.py
@@ -0,0 +1,105 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+
+from sentry.testutils import TestCase
+from sentry.models import Identity, IdentityProvider, Integration, Repository
+from sentry.integrations.vsts.repository import VstsRepositoryProvider
+
+from .testutils import (
+    COMPARE_COMMITS_EXAMPLE, FILE_CHANGES_EXAMPLE
+)
+
+
+class VisualStudioRepositoryProviderTest(TestCase):
+    @fixture
+    def provider(self):
+        return VstsRepositoryProvider('integrations:vsts')
+
+    @responses.activate
+    def test_compare_commits(self):
+
+        responses.add(
+            responses.POST,
+            'https://visualstudio.com/DefaultCollection/_apis/git/repositories/None/commitsBatch',
+            body=COMPARE_COMMITS_EXAMPLE,
+        )
+        responses.add(
+            responses.GET,
+            'https://visualstudio.com/DefaultCollection/_apis/git/repositories/None/commits/6c36052c58bde5e57040ebe6bdb9f6a52c906fff/changes',
+            body=FILE_CHANGES_EXAMPLE,
+        )
+        integration = Integration.objects.create(
+            provider='vsts',
+            external_id='vsts_external_id',
+            name='Hello world',
+        )
+        default_auth = Identity.objects.create(
+            idp=IdentityProvider.objects.create(
+                type='vsts',
+                config={},
+            ),
+            user=self.user,
+            external_id='123',
+            data={
+                'access_token': '123456789'
+            },
+        )
+        integration.add_organization(self.organization.id, default_auth.id)
+        repo = Repository.objects.create(
+            provider='visualstudio',
+            name='example',
+            organization_id=self.organization.id,
+            config={
+                'instance': 'visualstudio.com',
+                'project': 'project-name',
+                'name': 'example',
+            },
+            integration_id=integration.id,
+        )
+
+        res = self.provider.compare_commits(repo, "a", "b", organization_id=self.organization.id)
+
+        assert res == [{
+            'patch_set': [{'path': u'/README.md',
+                           'type': 'M'}],
+            'author_email': 'max@sentry.io',
+            'author_name': 'max bittker',
+            'message': 'Updated README.md',
+            'id': '6c36052c58bde5e57040ebe6bdb9f6a52c906fff',
+            'repository': 'example'
+        }]
+
+    @responses.activate
+    def test_create_repository(self):
+        organization = self.create_organization()
+        integration = Integration.objects.create(
+            provider='vsts',
+            external_id='vsts_external_id',
+            name='Hello world',
+        )
+        data = {
+            'name': 'MyFirstProject',
+            'external_id': '654321',
+            'url': 'https://mbittker.visualstudio.com/_git/MyFirstProject/',
+            'instance': 'https://visualstudio.com',
+            'project': 'MyFirstProject',
+            'integration_id': integration.id,
+        }
+        data = self.provider.create_repository(organization, data)
+
+        assert data == {
+            'name': 'MyFirstProject',
+            'external_id': '654321',
+            'url': 'https://mbittker.visualstudio.com/_git/MyFirstProject/',
+
+            'config': {
+                'project': 'MyFirstProject',
+                'name': 'MyFirstProject',
+                'instance': 'https://visualstudio.com'
+
+            },
+            'integration_id': integration.id,
+        }
diff --git a/tests/sentry/integrations/vsts/testutils.py b/tests/sentry/integrations/vsts/testutils.py
new file mode 100644
index 0000000000..8b3ed06929
--- /dev/null
+++ b/tests/sentry/integrations/vsts/testutils.py
@@ -0,0 +1,49 @@
+from __future__ import absolute_import
+
+COMPARE_COMMITS_EXAMPLE = b"""
+{
+  "count": 1,
+  "value": [
+    {
+      "commitId": "6c36052c58bde5e57040ebe6bdb9f6a52c906fff",
+      "author": {
+        "name": "max bittker",
+        "email": "max@sentry.io",
+        "date": "2018-04-24T00:03:18Z"
+      },
+      "committer": {
+        "name": "max bittker",
+        "email": "max@sentry.io",
+        "date": "2018-04-24T00:03:18Z"
+      },
+      "comment": "Updated README.md",
+      "changeCounts": {"Add": 0, "Edit": 1, "Delete": 0},
+      "url":
+        "https://mbittker.visualstudio.com/_apis/git/repositories/b1e25999-c080-4ea1-8c61-597c4ec41f06/commits/6c36052c58bde5e57040ebe6bdb9f6a52c906fff",
+      "remoteUrl":
+        "https://mbittker.visualstudio.com/_git/MyFirstProject/commit/6c36052c58bde5e57040ebe6bdb9f6a52c906fff"
+    }
+  ]
+}
+"""
+
+
+FILE_CHANGES_EXAMPLE = b"""
+{
+  "changeCounts": {"Edit": 1},
+  "changes": [
+    {
+      "item": {
+        "objectId": "b48e843656a0a12926a0bcedefe8ef3710fe2867",
+        "originalObjectId": "270b590a4edf3f19aa7acc7b57379729e34fc681",
+        "gitObjectType": "blob",
+        "commitId": "6c36052c58bde5e57040ebe6bdb9f6a52c906fff",
+        "path": "/README.md",
+        "url":
+          "https://mbittker.visualstudio.com/DefaultCollection/_apis/git/repositories/b1e25999-c080-4ea1-8c61-597c4ec41f06/items/README.md?versionType=Commit&version=6c36052c58bde5e57040ebe6bdb9f6a52c906fff"
+      },
+      "changeType": "edit"
+    }
+  ]
+}
+"""
