commit 9f709b92779e2627f8deba59ae5765a98a958082
Author: Matte Noble <me@mattenoble.com>
Date:   Fri Feb 8 09:22:23 2019 -0800

    fix(app-platform): Mock webhook requests (#11941)

diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 8b6b05fb40..73546d056e 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -784,7 +784,7 @@ class Fixtures(object):
         if not events:
             events = ('event.created',)
         if not url:
-            url = 'https://example/sentry/webhook'
+            url = 'https://example.com/sentry/webhook'
 
         _kwargs = {
             'actor': actor,
diff --git a/tests/sentry/mediators/sentry_app_installations/test_creator.py b/tests/sentry/mediators/sentry_app_installations/test_creator.py
index 275b7eb886..867d7d6447 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_creator.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_creator.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import responses
+
 from mock import patch
 
 from sentry.mediators.sentry_app_installations import Creator
@@ -15,6 +17,8 @@ class TestCreator(TestCase):
         self.project1 = self.create_project(organization=self.org)
         self.project2 = self.create_project(organization=self.org)
 
+        responses.add(responses.POST, 'https://example.com/webhook')
+
         self.sentry_app = self.create_sentry_app(
             name='nulldb',
             organization=self.org,
@@ -28,7 +32,9 @@ class TestCreator(TestCase):
             user=self.user,
         )
 
+    @responses.activate
     def test_creates_api_authorization(self):
+        responses.add(responses.POST, 'https://example.com/webhook')
         self.creator.call()
 
         assert ApiAuthorization.objects.filter(
@@ -37,15 +43,21 @@ class TestCreator(TestCase):
             scopes=self.sentry_app.scopes,
         ).exists()
 
+    @responses.activate
     def test_creates_installation(self):
+        responses.add(responses.POST, 'https://example.com/webhook')
         install = self.creator.call()
         assert install.pk
 
+    @responses.activate
     def test_creates_api_grant(self):
+        responses.add(responses.POST, 'https://example.com/webhook')
         install = self.creator.call()
         assert ApiGrant.objects.filter(id=install.api_grant_id).exists()
 
-    def test_creates_service_hook(self):
+    @responses.activate
+    def test_creates_service_hooks(self):
+        responses.add(responses.POST, 'https://example.com/webhook')
         install = self.creator.call()
 
         hook = ServiceHook.objects.get(organization_id=self.org.id)
@@ -58,12 +70,16 @@ class TestCreator(TestCase):
 
         assert not ServiceHookProject.objects.all()
 
+    @responses.activate
     @patch('sentry.tasks.sentry_apps.installation_webhook.delay')
     def test_notifies_service(self, installation_webhook):
+        responses.add(responses.POST, 'https://example.com/webhook')
         install = self.creator.call()
         installation_webhook.assert_called_once_with(install.id, self.user.id)
 
+    @responses.activate
     def test_associations(self):
+        responses.add(responses.POST, 'https://example.com/webhook')
         install = self.creator.call()
 
         assert install.api_grant is not None
diff --git a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
index c250c28bad..6992800eb8 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import responses
+
 from django.db import connection
 
 from sentry.mediators.sentry_app_installations import Creator, Destroyer
@@ -8,11 +10,14 @@ from sentry.testutils import TestCase
 
 
 class TestDestroyer(TestCase):
+    @responses.activate
     def setUp(self):
         self.user = self.create_user()
         self.org = self.create_organization()
         self.project = self.create_project(organization=self.org)
 
+        responses.add(responses.POST, 'https://example.com/webhook')
+
         self.sentry_app = self.create_sentry_app(
             name='nulldb',
             organization=self.org,
@@ -31,20 +36,25 @@ class TestDestroyer(TestCase):
             user=self.user,
         )
 
+    @responses.activate
     def test_deletes_authorization(self):
         auth = self.install.authorization
 
+        responses.add(responses.POST, 'https://example.com/webhook')
         self.destroyer.call()
 
         assert not ApiAuthorization.objects.filter(pk=auth.id).exists()
 
+    @responses.activate
     def test_deletes_grant(self):
         grant = self.install.api_grant
 
+        responses.add(responses.POST, 'https://example.com/webhook')
         self.destroyer.call()
 
         assert not ApiGrant.objects.filter(pk=grant.id).exists()
 
+    @responses.activate
     def test_deletes_service_hooks(self):
         hook = self.create_service_hook(
             application=self.sentry_app.application,
@@ -53,11 +63,14 @@ class TestDestroyer(TestCase):
             actor=self.install,
         )
 
+        responses.add(responses.POST, 'https://example.com/webhook')
         self.destroyer.call()
 
         assert not ServiceHook.objects.filter(pk=hook.id).exists()
 
+    @responses.activate
     def test_soft_deletes_installation(self):
+        responses.add(responses.POST, 'https://example.com/webhook')
         self.destroyer.call()
 
         with self.assertRaises(SentryAppInstallation.DoesNotExist):
