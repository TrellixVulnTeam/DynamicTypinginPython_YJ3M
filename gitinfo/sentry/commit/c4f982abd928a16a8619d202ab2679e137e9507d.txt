commit c4f982abd928a16a8619d202ab2679e137e9507d
Author: Mark Story <mark@sentry.io>
Date:   Thu Jan 23 13:44:03 2020 -0500

    ref(ts) Convert AutoSelectText to typescript (#16594)
    
    Update the types for selectText() as it internally type checks against
    HTML element types which EventTarget is not one of. This does mean that
    we need to cast `e.target` as typescript types that as EventTarget and
    not the HTMLElement it is supposed to be.
    
    I've pulled out an `isRenderFunc` type guard method as we have a few
    children-as-function style components and we'll need something like this
    for those components.

diff --git a/src/sentry/static/sentry/app/components/acl/access.tsx b/src/sentry/static/sentry/app/components/acl/access.tsx
index 631cc18969..dff62a72ec 100644
--- a/src/sentry/static/sentry/app/components/acl/access.tsx
+++ b/src/sentry/static/sentry/app/components/acl/access.tsx
@@ -7,6 +7,7 @@ import Alert from 'app/components/alert';
 import SentryTypes from 'app/sentryTypes';
 import withConfig from 'app/utils/withConfig';
 import withOrganization from 'app/utils/withOrganization';
+import {isRenderFunc} from 'app/utils/isRenderFunc';
 
 const DEFAULT_NO_ACCESS_MESSAGE = (
   <Alert type="error" icon="icon-circle-info">
@@ -22,11 +23,6 @@ export type ChildRenderProps = {
 
 type ChildFunction = (props: ChildRenderProps) => React.ReactNode;
 
-// Type guard for render func.
-function isRenderFunc(func: React.ReactNode | Function): func is ChildFunction {
-  return typeof func === 'function';
-}
-
 type DefaultProps = {
   /**
    * Should the component require all access levels or just one or more.
@@ -119,7 +115,7 @@ class Access extends React.Component<Props> {
       return DEFAULT_NO_ACCESS_MESSAGE;
     }
 
-    if (isRenderFunc(children)) {
+    if (isRenderFunc<ChildFunction>(children)) {
       return children(renderProps);
     }
 
diff --git a/src/sentry/static/sentry/app/components/acl/featureDisabled.tsx b/src/sentry/static/sentry/app/components/acl/featureDisabled.tsx
index 0a1b1d9751..5543b4bed3 100644
--- a/src/sentry/static/sentry/app/components/acl/featureDisabled.tsx
+++ b/src/sentry/static/sentry/app/components/acl/featureDisabled.tsx
@@ -102,7 +102,7 @@ class FeatureDisabled extends React.Component<Props, State> {
                 }
               )}
             </p>
-            <pre onClick={e => selectText(e.target)}>
+            <pre onClick={e => selectText(e.target as HTMLElement)}>
               <code>{installText(features, featureName)}</code>
             </pre>
           </HelpDescription>
diff --git a/src/sentry/static/sentry/app/components/autoSelectText.jsx b/src/sentry/static/sentry/app/components/autoSelectText.tsx
similarity index 55%
rename from src/sentry/static/sentry/app/components/autoSelectText.jsx
rename to src/sentry/static/sentry/app/components/autoSelectText.tsx
index 8f6f4c20a5..de88a3ad43 100644
--- a/src/sentry/static/sentry/app/components/autoSelectText.jsx
+++ b/src/sentry/static/sentry/app/components/autoSelectText.tsx
@@ -1,21 +1,37 @@
-import React from 'react';
+import React, {CSSProperties} from 'react';
 import PropTypes from 'prop-types';
 import classNames from 'classnames';
 
 import {selectText} from 'app/utils/selectText';
+import {isRenderFunc} from 'app/utils/isRenderFunc';
 
-class AutoSelectText extends React.Component {
+type ChildRenderProps = {
+  doSelect: () => void;
+  doMount: (el: HTMLElement) => void;
+};
+
+type ChildFunction = (props: ChildRenderProps) => React.ReactNode;
+
+type Props = {
+  /**
+   * Can be a `node` for a simple auto select div container.
+   * When children is a render function, it is passed 2 functions:
+   * - `doMount` - should be applied on parent element's `ref` whose
+   * children is the text to be copied
+   * - `doSelect` - selects text
+   */
+  children: React.ReactNode | ChildFunction;
+  className?: string;
+  style?: CSSProperties;
+};
+
+class AutoSelectText extends React.Component<Props> {
   static propTypes = {
-    /**
-     * Can be a `node` for a simple auto select div container.
-     * When children is a render function, it is passed 2 functions:
-     * - `doMount` - should be applied on parent element's `ref` whose
-     * children is the text to be copied
-     * - `doSelect` - selects text
-     */
     children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
   };
 
+  private el: HTMLElement | undefined;
+
   selectText = () => {
     if (!this.el) {
       return;
@@ -24,14 +40,14 @@ class AutoSelectText extends React.Component {
     selectText(this.el);
   };
 
-  handleMount = el => {
+  handleMount = (el: HTMLElement) => {
     this.el = el;
   };
 
   render() {
     const {children, className, ...props} = this.props;
 
-    if (typeof children === 'function') {
+    if (isRenderFunc<ChildFunction>(children)) {
       return children({
         doMount: this.handleMount,
         doSelect: this.selectText,
diff --git a/src/sentry/static/sentry/app/utils/isRenderFunc.tsx b/src/sentry/static/sentry/app/utils/isRenderFunc.tsx
new file mode 100644
index 0000000000..76fda38027
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/isRenderFunc.tsx
@@ -0,0 +1,6 @@
+/**
+ * Generic type guard for children a function patterns.
+ */
+export function isRenderFunc<T>(func: React.ReactNode | Function): func is T {
+  return typeof func === 'function';
+}
diff --git a/src/sentry/static/sentry/app/utils/selectText.tsx b/src/sentry/static/sentry/app/utils/selectText.tsx
index 19e5108e0b..3e59be094f 100644
--- a/src/sentry/static/sentry/app/utils/selectText.tsx
+++ b/src/sentry/static/sentry/app/utils/selectText.tsx
@@ -1,4 +1,4 @@
-export function selectText(node: EventTarget): void {
+export function selectText(node: HTMLElement): void {
   if (node instanceof HTMLInputElement && node.type === 'text') {
     node.select();
   } else if (node instanceof Node && window.getSelection) {
