commit 62af2d2b7e509f6240f56f2451080d34b0ac8f02
Author: ted kaemming <ted@kaemming.com>
Date:   Mon Jul 24 13:46:01 2017 -0700

    Add tests for `MinHashIndex.merge`. (#5753)

diff --git a/tests/sentry/similarity/test_index.py b/tests/sentry/similarity/test_index.py
index 0744c3ed5d..7bde9c14dd 100644
--- a/tests/sentry/similarity/test_index.py
+++ b/tests/sentry/similarity/test_index.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import time
 
 import msgpack
+from exam import fixture
 
 from sentry.similarity.index import MinHashIndex
 from sentry.similarity.signatures import MinHashSignatureBuilder
@@ -13,8 +14,9 @@ signature_builder = MinHashSignatureBuilder(32, 0xFFFF)
 
 
 class MinHashIndexTestCase(TestCase):
-    def test_index(self):
-        index = MinHashIndex(
+    @fixture
+    def index(self):
+        return MinHashIndex(
             redis.clusters.get('default'),
             'sim',
             signature_builder,
@@ -23,86 +25,95 @@ class MinHashIndexTestCase(TestCase):
             12,
         )
 
-        index.record('example', '1', [('index', 'hello world')])
-        index.record('example', '2', [('index', 'hello world')])
-        index.record('example', '3', [('index', 'jello world')])
-        index.record('example', '4', [('index', 'yellow world')])
-        index.record('example', '4', [('index', 'mellow world')])
-        index.record('example', '5', [('index', 'pizza world')])
+    def test_basic(self):
+        self.index.record('example', '1', [('index', 'hello world')])
+        self.index.record('example', '2', [('index', 'hello world')])
+        self.index.record('example', '3', [('index', 'jello world')])
+        self.index.record('example', '4', [('index', 'yellow world')])
+        self.index.record('example', '4', [('index', 'mellow world')])
+        self.index.record('example', '5', [('index', 'pizza world')])
 
-        results = index.compare('example', '1', ['index'])[0]
+        results = self.index.compare('example', '1', ['index'])[0]
         assert results[0] == ('1', 1.0)
         assert results[1] == ('2', 1.0)  # identical contents
         assert results[2][0] in ('3', '4')  # equidistant pairs, order doesn't really matter
         assert results[3][0] in ('3', '4')
         assert results[4][0] == '5'
 
-        results = index.classify('example', [('index', 'hello world')])[0]
+        results = self.index.classify('example', [('index', 'hello world')])[0]
         assert results[0:2] == [('1', 1.0), ('2', 1.0)]
         assert results[2][0] in ('3', '4')  # equidistant pairs, order doesn't really matter
         assert results[3][0] in ('3', '4')
         assert results[4][0] == '5'
 
-        index.delete('example', [('index', '3')])
-        assert [key for key, _ in index.compare('example', '1', ['index'])[0]] == [
+        self.index.delete('example', [('index', '3')])
+        assert [key for key, _ in self.index.compare('example', '1', ['index'])[0]] == [
             '1', '2', '4', '5'
         ]
 
         assert MinHashIndex(
-            redis.clusters.get('default'),
-            'sim2',
-            signature_builder,
-            8,
-            60 * 60,
-            12,
+            self.index.cluster,
+            self.index.namespace + '2',
+            self.index.signature_builder,
+            self.index.bands,
+            self.index.interval,
+            self.index.retention,
         ).compare('example', '1', ['index']) == [[]]
 
-    def test_export_import(self):
-        retention = 12
-        index = MinHashIndex(
-            redis.clusters.get('default'),
-            'sim',
-            signature_builder,
-            8,
-            60 * 60,
-            retention,
-        )
+    def test_merge(self):
+        self.index.record('example', '1', [('index', ['foo', 'bar'])])
+        self.index.record('example', '2', [('index', ['baz'])])
+        assert self.index.classify('example', [('index', ['foo', 'bar'])])[0] == [
+            ('1', 1.0),
+        ]
+
+        self.index.merge('example', '1', [('index', '2')])
+        assert self.index.classify('example', [('index', ['foo', 'bar'])])[0] == [
+            ('1', 0.5),
+        ]
+
+        # merge into an empty key should act as a move
+        self.index.merge('example', '2', [('index', '1')])
+        assert self.index.classify('example', [('index', ['foo', 'bar'])])[0] == [
+            ('2', 0.5),
+        ]
 
-        index.record('example', '1', [('index', 'hello world')])
+    def test_export_import(self):
+        self.index.record('example', '1', [('index', 'hello world')])
 
         timestamp = int(time.time())
-        result = index.export('example', [('index', 1)], timestamp=timestamp)
+        result = self.index.export('example', [('index', 1)], timestamp=timestamp)
         assert len(result) == 1
 
         data = msgpack.unpackb(result[0])
-        assert len(data) == index.bands
+        assert len(data) == self.index.bands
 
         for band in data:
-            assert len(band) == (retention + 1)
+            assert len(band) == (self.index.retention + 1)
             assert sum(
                 sum(dict(bucket_frequencies).values()) for index, bucket_frequencies in band
             ) == 1
 
         # Copy the data from key 1 to key 2.
-        index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
+        self.index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
 
-        assert index.export(
+        assert self.index.export(
             'example', [('index', 1)], timestamp=timestamp
-        ) == index.export(
+        ) == self.index.export(
             'example', [('index', 2)], timestamp=timestamp
         )
 
         # Copy the data again to key 2 (duplicating all of the data.)
-        index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
+        self.index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
 
-        result = index.export('example', [('index', 2)], timestamp=timestamp)
+        result = self.index.export('example', [('index', 2)], timestamp=timestamp)
         assert len(result) == 1
 
         data = msgpack.unpackb(result[0])
-        assert len(data) == index.bands
+        assert len(data) == self.index.bands
 
         for band in data:
-            assert len(band) == (retention + 1)
+            assert len(band) == (self.index.retention + 1)
             assert sum(
                 sum(dict(bucket_frequencies).values()) for index, bucket_frequencies in band
             ) == 2
