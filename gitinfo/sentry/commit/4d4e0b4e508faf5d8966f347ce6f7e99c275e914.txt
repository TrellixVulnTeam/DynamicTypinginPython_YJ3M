commit 4d4e0b4e508faf5d8966f347ce6f7e99c275e914
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Oct 26 13:09:24 2016 -0700

    api: Properly handle internationalized domain names (#4437)
    
    If a user specified `*.løcalhost` in their "Allowed Origins" setting,
    then a request came from `Origin: http://løcalhost`, we errored comparing
    since the hostname was bytes, and allowed origins was text.
    
    This is coercing both sides to bytes. Hostname shouldn't ever actually
    be text, but added a check to make sure since I'm not confident there
    isn't a case where that'd be false.
    
    Rather than just blindly coercing to bytes, we coerce both the Origin
    and the Allowed Domains to punycode. This allows comparison between
    punycode and utf-8 encoded results as well. Also allowing a user to
    specify Allowed Domains as either unicode or punycode.

diff --git a/CHANGES b/CHANGES
index 9a93b08578..74b585effc 100644
--- a/CHANGES
+++ b/CHANGES
@@ -9,6 +9,7 @@ Version 8.10 (Unreleased)
 - ``SENTRY_FILESTORE`` deprecated and replaced with ``filestore.backend``
 - ``SENTRY_FILESTORE_OPTIONS`` deprecated and replaced with ``filestore.options``
 - Add watchOS support for cocoa interface.
+- Fix support for internationalized Origins and raven-js.
 
 API Changes
 ~~~~~~~~~~~
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index ca5e974393..3414591171 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -93,6 +93,20 @@ def parse_uri_match(value):
     else:
         domain, path = value, '*'
 
+    if ':' in domain:
+        domain, port = value.split(':', 1)
+    else:
+        port = None
+
+    # we need to coerce our unicode inputs into proper
+    # idna/punycode encoded representation for normalization.
+    if type(domain) == six.binary_type:
+        domain = domain.decode('utf8')
+    domain = domain.encode('idna')
+
+    if port:
+        domain = '%s:%s' % (domain, port)
+
     return ParsedUriMatch(scheme, domain, path)
 
 
@@ -132,14 +146,27 @@ def is_valid_origin(origin, project=None, allowed=None):
     if origin == 'null':
         return False
 
+    if type(origin) == six.binary_type:
+        origin = origin.decode('utf-8')
+
     parsed = urlparse(origin)
 
     # There is no hostname, so the header is probably invalid
     if parsed.hostname is None:
         return False
 
+    parsed_hostname = parsed.hostname.encode('idna')
+    if parsed.port:
+        parsed_netloc = '%s:%d' % (parsed_hostname, parsed.port)
+    else:
+        parsed_netloc = parsed_hostname
+
     for value in allowed:
-        bits = parse_uri_match(value)
+        try:
+            bits = parse_uri_match(value)
+        except UnicodeError:
+            # We hit a bad uri, so ignore this value
+            continue
 
         # scheme supports exact and any match
         if bits.scheme not in ('*', parsed.scheme):
@@ -147,10 +174,10 @@ def is_valid_origin(origin, project=None, allowed=None):
 
         # domain supports exact, any, and prefix match
         if bits.domain[:2] == '*.':
-            if parsed.hostname.endswith(bits.domain[1:]) or parsed.hostname == bits.domain[2:]:
+            if parsed_hostname.endswith(bits.domain[1:]) or parsed_hostname == bits.domain[2:]:
                 return True
             continue
-        elif bits.domain not in ('*', parsed.hostname, parsed.netloc):
+        elif bits.domain not in ('*', parsed_hostname, parsed_netloc):
             continue
 
         # path supports exact, any, and suffix match (with or without *)
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index f85893ae96..0ee65ef56e 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -52,7 +52,7 @@ class GetOriginsTestCase(TestCase):
 
     def test_project(self):
         project = Project.objects.get()
-        project.update_option('sentry:origins', ['http://foo.example'])
+        project.update_option('sentry:origins', [u'http://foo.example'])
 
         with self.settings(SENTRY_ALLOW_ORIGIN=None):
             result = get_origins(project)
@@ -60,7 +60,7 @@ class GetOriginsTestCase(TestCase):
 
     def test_project_and_setting(self):
         project = Project.objects.get()
-        project.update_option('sentry:origins', ['http://foo.example'])
+        project.update_option('sentry:origins', [u'http://foo.example'])
 
         with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
             result = get_origins(project)
@@ -191,6 +191,28 @@ class IsValidOriginTestCase(TestCase):
         result = self.isValidOrigin('sp://custom-thing.bizbaz/foo/bar', ['sp://*.foobar'])
         assert result is False
 
+    def test_unicode(self):
+        result = self.isValidOrigin(u'http://l\xf8calhost', [u'*.l\xf8calhost'])
+        assert result is True
+
+    def test_punycode(self):
+        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'*.l\xf8calhost'])
+        assert result is True
+        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'*.xn--lcalhost-54a'])
+        assert result is True
+        result = self.isValidOrigin(u'http://l\xf8calhost', [u'*.xn--lcalhost-54a'])
+        assert result is True
+        result = self.isValidOrigin('http://l\xc3\xb8calhost', [u'*.xn--lcalhost-54a'])
+        assert result is True
+        result = self.isValidOrigin('http://xn--lcalhost-54a', [u'l\xf8calhost'])
+        assert result is True
+        result = self.isValidOrigin('http://xn--lcalhost-54a:80', [u'l\xf8calhost:80'])
+        assert result is True
+
+    def test_unparseable_uri(self):
+        result = self.isValidOrigin('http://example.com', ['.'])
+        assert result is False
+
 
 class IsValidIPTestCase(TestCase):
     def is_valid_ip(self, ip, inputs):
diff --git a/tests/sentry/web/frontend/test_error_page_embed.py b/tests/sentry/web/frontend/test_error_page_embed.py
index 8cced642a3..5d4f81a569 100644
--- a/tests/sentry/web/frontend/test_error_page_embed.py
+++ b/tests/sentry/web/frontend/test_error_page_embed.py
@@ -14,7 +14,7 @@ class ErrorPageEmbedTest(TestCase):
     def setUp(self):
         super(ErrorPageEmbedTest, self).setUp()
         self.project = self.create_project()
-        self.project.update_option('sentry:origins', 'example.com')
+        self.project.update_option('sentry:origins', ['example.com'])
         self.key = self.create_project_key(self.project)
         self.event_id = uuid4().hex
         self.path = '%s?eventId=%s&dsn=%s' % (
