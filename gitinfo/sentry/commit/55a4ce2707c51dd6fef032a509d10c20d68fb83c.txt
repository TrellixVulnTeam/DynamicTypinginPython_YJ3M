commit 55a4ce2707c51dd6fef032a509d10c20d68fb83c
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Mar 9 16:00:59 2016 -0800

    Generate `List-Id` header from `MessageBuilder.reference`.
    
    Adds `List-Id` header to messages built with `MessageBuilder` that
    include a reference to a Project, Group or Event instance. This also
    adds a `mail.list-namespace` option that can be used to define the RFC
    2919 list namespace.
    
    Fixes GH-2461.

diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 37f0edf94a..10f635c9dc 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -59,3 +59,4 @@ register('mail.use-tls', default=False, flags=FLAG_PRIORITIZE_DISK)
 register('mail.subject-prefix', default='[Sentry] ', flags=FLAG_PRIORITIZE_DISK)
 register('mail.from', default='root@localhost', flags=FLAG_PRIORITIZE_DISK)
 register('mail.enable-replies', default=False, flags=FLAG_PRIORITIZE_DISK)
+register('mail.list-namespace', type=String, default='localhost', flags=FLAG_NOSTORE)
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 4bd071a7ab..5a5f46f08f 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -11,6 +11,8 @@ import logging
 import os
 import time
 from email.utils import parseaddr
+import toronado
+from operator import attrgetter
 from random import randrange
 
 from django.conf import settings
@@ -25,10 +27,12 @@ from django.utils.encoding import force_bytes, force_str, force_text
 from toronado import from_string as inline_css
 
 from sentry import options
-from sentry.models import Group, GroupEmailThread, User, UserOption
+from sentry.models import GroupEmailThread, Group, Project, Event, User, UserOption
+from sentry.web.helpers import render_to_string
 from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
-from sentry.web.helpers import render_to_string
+from sentry.utils.strings import is_valid_dot_atom
+
 
 logger = logging.getLogger(__name__)
 
@@ -161,6 +165,43 @@ def get_email_addresses(user_ids, project=None):
     return results
 
 
+class ListResolver(object):
+
+    class UnregisteredTypeError(Exception):
+        pass
+
+    def __init__(self, namespace, type_handlers):
+        assert is_valid_dot_atom(namespace)
+        self.__namespace = namespace
+        self.__type_handlers = type_handlers
+
+    def __call__(self, instance):
+        try:
+            handler = self.__type_handlers[type(instance)]
+        except KeyError:
+            raise self.UnregisteredTypeError(
+                'Cannot generate mailing list identifier for {!r}'.format(instance)
+            )
+
+        label = '.'.join(map(str, handler(instance)))
+        assert is_valid_dot_atom(label)
+
+        return '{}.{}'.format(label, self.__namespace)
+
+
+default_list_type_handlers = {
+    Project: attrgetter('slug', 'organization.slug'),
+    Group: attrgetter('project.slug', 'organization.slug'),
+    Event: attrgetter('project.slug', 'organization.slug'),
+}
+
+
+make_listid_from_instance = ListResolver(
+    options.get('mail.list-namespace'),
+    default_list_type_handlers,
+)
+
+
 class MessageBuilder(object):
     def __init__(self, subject, context=None, template=None, html_template=None,
                  body=None, html_body=None, headers=None, reference=None,
@@ -169,6 +210,9 @@ class MessageBuilder(object):
         assert not (html_body and html_template)
         assert context or not (template or html_template)
 
+        if headers is None:
+            headers = {}
+
         self.subject = subject
         self.context = context or {}
         self.template = template
@@ -181,6 +225,14 @@ class MessageBuilder(object):
         self.from_email = from_email or options.get('mail.from')
         self._send_to = set()
 
+        if reference is not None and 'List-Id' not in headers:
+            try:
+                headers['List-Id'] = make_listid_from_instance(reference)
+            except ListResolver.UnregisteredTypeError as error:
+                logger.debug(str(error))
+            except AssertionError as error:
+                logger.warning(str(error))
+
     def __render_html_body(self):
         html_body = None
         if self.html_template:
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index 29bcb1550f..83c1e74e0d 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -9,6 +9,7 @@ from __future__ import absolute_import
 
 import base64
 import re
+import string
 import zlib
 from itertools import count
 
@@ -171,3 +172,18 @@ def tokens_from_name(value, remove_digits=False):
         word = word.lower()
         if word:
             yield word
+
+
+valid_dot_atom_characters = frozenset(
+    string.ascii_letters +
+    string.digits +
+    ".!#$%&'*+-/=?^_`{|}~"
+)
+
+
+def is_valid_dot_atom(value):
+    """Validate an input string as an RFC 2822 dot-atom-text value."""
+    return (isinstance(value, basestring)  # must be a string type
+        and not value[0] == '.'
+        and not value[-1] == '.'  # cannot start or end with a dot
+        and set(value).issubset(valid_dot_atom_characters))  # can only contain valid characters
diff --git a/tests/sentry/utils/email/tests.py b/tests/sentry/utils/email/tests.py
index 6cf7c9d5a7..d5ebae0c30 100644
--- a/tests/sentry/utils/email/tests.py
+++ b/tests/sentry/utils/email/tests.py
@@ -1,12 +1,44 @@
 from __future__ import absolute_import
 
+import functools
+import pytest
 from mock import patch
 
 from django.core import mail
 
+from sentry import options
 from sentry.models import User, UserOption, GroupEmailThread
 from sentry.testutils import TestCase
-from sentry.utils.email import MessageBuilder, get_from_email_domain
+from sentry.utils.email import MessageBuilder, ListResolver, default_list_type_handlers, get_from_email_domain
+
+
+class ListResolverTestCase(TestCase):
+    resolver = ListResolver(
+        'namespace',
+        default_list_type_handlers,
+    )
+
+    def test_rejects_invalid_namespace(self):
+        with pytest.raises(AssertionError):
+            ListResolver('\x00', {})
+
+    def test_rejects_invalid_types(self):
+        with pytest.raises(ListResolver.UnregisteredTypeError):
+            self.resolver(object())
+
+    def test_generates_list_ids(self):
+        expected = "{0.project.slug}.{0.organization.slug}.namespace".format(self.event)
+        assert self.resolver(self.event) == expected
+        assert self.resolver(self.event.group) == expected
+        assert self.resolver(self.event.project) == expected
+
+    def test_rejects_invalid_objects(self):
+        resolver = ListResolver('namespace', {
+            object: lambda value: ('\x00',),
+        })
+
+        with pytest.raises(AssertionError):
+            resolver(object())
 
 
 class MessageBuilderTest(TestCase):
@@ -230,6 +262,39 @@ class MessageBuilderTest(TestCase):
         assert out.to == ['foo@example.com']
         assert out.bcc == ['bar@example.com']
 
+    def test_generates_list_ids_for_registered_types(self):
+        build_message = functools.partial(
+            MessageBuilder,
+            subject='Test',
+            body='hello world',
+            html_body='<b>hello world</b>',
+        )
+
+        expected = "{event.project.slug}.{event.organization.slug}.{namespace}".format(
+            event=self.event,
+            namespace=options.get('mail.list-namespace'),
+        )
+
+        references = (
+            self.event,
+            self.event.group,
+            self.event.project,
+        )
+
+        for reference in references:
+            (message,) = build_message(reference=reference).get_built_messages(['foo@example.com'])
+            assert message.message()['List-Id'] == expected
+
+    def test_does_not_generates_list_ids_for_unregistered_types(self):
+        message = MessageBuilder(
+            subject='Test',
+            body='hello world',
+            html_body='<b>hello world</b>',
+            reference=object(),
+        ).get_built_messages(['foo@example.com'])[0].message()
+
+        assert 'List-Id' not in message
+
 
 class MiscTestCase(TestCase):
     def test_get_from_email_domain(self):
diff --git a/tests/sentry/utils/test_strings.py b/tests/sentry/utils/test_strings.py
index a21dbe5b43..e1ae3bae8d 100644
--- a/tests/sentry/utils/test_strings.py
+++ b/tests/sentry/utils/test_strings.py
@@ -1,5 +1,6 @@
 import functools
 from sentry.utils.strings import (
+    is_valid_dot_atom,
     soft_break,
     soft_hyphenate,
     tokens_from_name,
@@ -61,3 +62,11 @@ def test_iter_callsign_choices():
     choices = iter_callsign_choices('GetHub')
     assert next(choices) == 'GH2'
     assert next(choices) == 'GH3'
+
+
+def test_is_valid_dot_atom():
+    assert is_valid_dot_atom('foo')
+    assert is_valid_dot_atom('foo.bar')
+    assert not is_valid_dot_atom('.foo.bar')
+    assert not is_valid_dot_atom('foo.bar.')
+    assert not is_valid_dot_atom('foo.\x00')
