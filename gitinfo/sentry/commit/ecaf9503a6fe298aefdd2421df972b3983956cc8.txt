commit ecaf9503a6fe298aefdd2421df972b3983956cc8
Author: Jan Michael Auer <account@jauer.org>
Date:   Fri Nov 23 13:12:40 2018 +0100

    ref(event_manager): Treat null values equal to missing data (#10738)

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index b7ca5a1506..80744c5e81 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -61,7 +61,7 @@ from sentry.utils.data_filters import (
 from sentry.utils.dates import to_timestamp
 from sentry.utils.db import is_postgres, is_mysql
 from sentry.utils.meta import Meta
-from sentry.utils.safe import safe_execute, trim, trim_dict, get_path
+from sentry.utils.safe import safe_execute, trim, trim_dict, get_path, set_path, setdefault_path
 from sentry.utils.strings import truncatechars
 from sentry.utils.geo import rust_geoip
 from sentry.utils.validators import is_float
@@ -225,14 +225,12 @@ else:
 
 
 def generate_culprit(data, platform=None):
-    try:
-        stacktraces = [
-            e['stacktrace'] for e in data['exception']['values']
-            if e and e.get('stacktrace')
-        ]
-    except KeyError:
+    exceptions = get_path(data, 'exception', 'values')
+    if exceptions:
+        stacktraces = [e['stacktrace'] for e in exceptions if get_path(e, 'stacktrace', 'frames')]
+    else:
         stacktrace = data.get('stacktrace')
-        if stacktrace:
+        if stacktrace and stacktrace.get('frames'):
             stacktraces = [stacktrace]
         else:
             stacktraces = None
@@ -245,8 +243,8 @@ def generate_culprit(data, platform=None):
             platform=platform,
         )
 
-    if not culprit and 'request' in data:
-        culprit = data['request'].get('url', '')
+    if not culprit and data.get('request'):
+        culprit = get_path(data, 'request', 'url')
 
     return truncatechars(culprit or '', MAX_CULPRIT_LENGTH)
 
@@ -540,7 +538,7 @@ class EventManager(object):
         meta = Meta(data.get('_meta'))
 
         for c in casts:
-            if c in data:
+            if data.get(c) is not None:
                 try:
                     data[c] = casts[c](data[c])
                 except InvalidTimestamp as it:
@@ -588,7 +586,7 @@ class EventManager(object):
         #          in the inner data dict.
         is_valid, event_errors = validate_and_default_interface(data.data, 'event')
         errors.extend(event_errors)
-        if 'tags' in data:
+        if data.get('tags') is not None:
             is_valid, tag_errors = validate_and_default_interface(data['tags'], 'tags', name='tags')
             errors.extend(tag_errors)
 
@@ -651,16 +649,16 @@ class EventManager(object):
             data['timestamp'] = timestamp
             data['received'] = float(timezone.now().strftime('%s'))
 
-            data.setdefault('checksum', None)
-            data.setdefault('culprit', None)
-            data.setdefault('dist', None)
-            data.setdefault('environment', None)
-            data.setdefault('extra', {})
-            data.setdefault('fingerprint', None)
-            data.setdefault('logger', DEFAULT_LOGGER_NAME)
-            data.setdefault('platform', None)
-            data.setdefault('tags', [])
-            data.setdefault('transaction', None)
+            setdefault_path(data, 'checksum', value=None)
+            setdefault_path(data, 'culprit', value=None)
+            setdefault_path(data, 'dist', value=None)
+            setdefault_path(data, 'environment', value=None)
+            setdefault_path(data, 'extra', value={})
+            setdefault_path(data, 'fingerprint', value=None)
+            setdefault_path(data, 'logger', value=DEFAULT_LOGGER_NAME)
+            setdefault_path(data, 'platform', value=None)
+            setdefault_path(data, 'tags', value=[])
+            setdefault_path(data, 'transaction', value=None)
 
             # Fix case where legacy apps pass 'environment' as a tag
             # instead of a top level key.
@@ -677,21 +675,24 @@ class EventManager(object):
             data['type'] = eventtypes.infer(data).key
             data['version'] = self.version
 
-        exception = data.get('exception')
+        exceptions = get_path(data, 'exception', 'values', filter=True)
         stacktrace = data.get('stacktrace')
-        if exception and len(exception['values']) == 1 and stacktrace:
-            exception['values'][0]['stacktrace'] = stacktrace
+        if stacktrace and exceptions and len(exceptions) == 1:
+            exceptions[0]['stacktrace'] = stacktrace
+            stacktrace_meta = meta.enter('stacktrace')
+            meta.enter('exception', 'values', 0, 'stacktrace').merge(stacktrace_meta)
             del data['stacktrace']
+            # TODO(ja): Remove meta data of data['stacktrace'] here, too
 
         # Exception mechanism needs SDK information to resolve proper names in
         # exception meta (such as signal names). "SDK Information" really means
         # the operating system version the event was generated on. Some
         # normalization still works without sdk_info, such as mach_exception
         # names (they can only occur on macOS).
-        if exception:
+        if exceptions:
             sdk_info = get_sdk_from_event(data)
-            for ex in exception['values']:
-                if ex is not None and 'mechanism' in ex:
+            for ex in exceptions:
+                if 'mechanism' in ex:
                     normalize_mechanism_meta(ex['mechanism'], sdk_info)
 
         # Please note that we eventually remove this check after we validated that it
@@ -706,16 +707,17 @@ class EventManager(object):
             ms = int((time.time() - start_time) * 1000)
             metrics.timing('events.normalize.user_agent.duration', ms)
 
-        # If there is no User ip_addres, update it either from the Http interface
-        # or the client_ip of the request.
-        is_public = self._auth and self._auth.is_public
-        add_ip_platforms = ('javascript', 'cocoa', 'objc')
+        if not get_path(data, "user", "ip_address"):
+            # If there is no User ip_address, update it either from the Http
+            # interface or the client_ip of the request.
+            is_public = self._auth and self._auth.is_public
+            add_ip_platforms = ('javascript', 'cocoa', 'objc')
 
-        http_ip = data.get('request', {}).get('env', {}).get('REMOTE_ADDR')
-        if http_ip:
-            data.setdefault('user', {}).setdefault('ip_address', http_ip)
-        elif self._client_ip and (is_public or data.get('platform') in add_ip_platforms):
-            data.setdefault('user', {}).setdefault('ip_address', self._client_ip)
+            http_ip = get_path(data, 'request', 'env', 'REMOTE_ADDR')
+            if http_ip:
+                set_path(data, 'user', 'ip_address', value=http_ip)
+            elif self._client_ip and (is_public or data.get('platform') in add_ip_platforms):
+                set_path(data, 'user', 'ip_address', value=self._client_ip)
 
         # Trim values
         if data.get('logger'):
@@ -768,20 +770,15 @@ class EventManager(object):
         if release and not is_valid_release(self._project, release):
             return (True, FilterStatKeys.RELEASE_VERSION)
 
-        message_interface = self._data.get('logentry', {})
-        error_message = message_interface.get('formatted', '') or message_interface.get(
-            'message', ''
-        )
+        error_message = get_path(self._data, 'logentry', 'formatted') \
+            or get_path(self._data, 'logentry', 'message') \
+            or ''
         if error_message and not is_valid_error_message(self._project, error_message):
             return (True, FilterStatKeys.ERROR_MESSAGE)
 
-        for exception_interface in self._data.get(
-            'exception', {}
-        ).get('values', []):
-            if exception_interface is None:
-                continue
+        for exc in get_path(self._data, 'exception', 'values', filter=True, default=[]):
             message = u': '.join(
-                filter(None, map(exception_interface.get, ['type', 'value']))
+                filter(None, map(exc.get, ['type', 'value']))
             )
             if message and not is_valid_error_message(self._project, message):
                 return (True, FilterStatKeys.ERROR_MESSAGE)
@@ -841,7 +838,7 @@ class EventManager(object):
         data = self._data
         message = ''
 
-        if 'logentry' in data:
+        if data.get('logentry'):
             message += (data['logentry'].get('formatted') or
                         data['logentry'].get('message') or '')
 
diff --git a/src/sentry/eventtypes/base.py b/src/sentry/eventtypes/base.py
index 99df12a04f..9cae32ece9 100644
--- a/src/sentry/eventtypes/base.py
+++ b/src/sentry/eventtypes/base.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.utils.strings import truncatechars, strip
+from sentry.utils.safe import get_path
 
 
 class BaseEvent(object):
@@ -27,13 +28,14 @@ class DefaultEvent(BaseEvent):
         return True
 
     def get_metadata(self):
-        message_interface = self.data.get('logentry') or {}
-        message = strip(message_interface.get('formatted') or
-                        message_interface.get('message'))
+        message = get_path(self.data, 'logentry', 'formatted') \
+            or get_path(self.data, 'logentry', 'message')
+
         if not message:
             title = '<unlabeled event>'
         else:
-            title = truncatechars(message.splitlines()[0], 100)
+            title = truncatechars(strip(message).splitlines()[0], 100)
+
         return {
             'title': title,
         }
diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index 0d9d1e5d1b..a59965bfde 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
-from sentry.utils.safe import trim
+import six
+
+from sentry.utils.safe import get_path, trim
 from sentry.utils.strings import truncatechars
 
 from .base import BaseEvent
@@ -22,21 +24,16 @@ class ErrorEvent(BaseEvent):
     key = 'error'
 
     def has_metadata(self):
-        try:
-            exception = self.data['exception']['values'][-1]
-            exception['type']
-            exception['value']
-            return True
-        except Exception:
-            return False
+        exception = get_path(self.data, 'exception', 'values', -1)
+        return exception and any(v is not None for v in six.itervalues(exception))
 
     def get_metadata(self):
-        exception = self.data['exception']['values'][-1]
+        exception = get_path(self.data, 'exception', 'values', -1)
 
         # in some situations clients are submitting non-string data for these
         rv = {
-            'type': trim(exception.get('type', 'Error'), 128),
-            'value': trim(exception.get('value', ''), 1024),
+            'type': trim(get_path(exception, 'type', default='Error'), 128),
+            'value': trim(get_path(exception, 'value', default=''), 1024),
         }
 
         # Attach crash location
diff --git a/src/sentry/eventtypes/security.py b/src/sentry/eventtypes/security.py
index 784a8ec9e0..71813b3b63 100644
--- a/src/sentry/eventtypes/security.py
+++ b/src/sentry/eventtypes/security.py
@@ -7,8 +7,7 @@ class CspEvent(BaseEvent):
     key = 'csp'
 
     def has_metadata(self):
-        # TODO(alexh) also look for 'csp' ?
-        return 'csp' in self.data
+        return self.data.get('csp') is not None
 
     def get_metadata(self):
         from sentry.interfaces.security import Csp
@@ -30,7 +29,7 @@ class HpkpEvent(BaseEvent):
     key = 'hpkp'
 
     def has_metadata(self):
-        return 'hpkp' in self.data
+        return self.data.get('hpkp') is not None
 
     def get_metadata(self):
         from sentry.interfaces.security import Hpkp
@@ -48,7 +47,7 @@ class ExpectCTEvent(BaseEvent):
     key = 'expectct'
 
     def has_metadata(self):
-        return 'expectct' in self.data
+        return self.data.get('expectct') is not None
 
     def get_metadata(self):
         from sentry.interfaces.security import ExpectCT
@@ -66,7 +65,7 @@ class ExpectStapleEvent(BaseEvent):
     key = 'expectstaple'
 
     def has_metadata(self):
-        return 'expectstaple' in self.data
+        return self.data.get('expectstaple') is not None
 
     def get_metadata(self):
         from sentry.interfaces.security import ExpectStaple
diff --git a/tests/sentry/event_manager/test_generate_culprit.py b/tests/sentry/event_manager/test_generate_culprit.py
index ac1d33db4b..c2ed85fa83 100644
--- a/tests/sentry/event_manager/test_generate_culprit.py
+++ b/tests/sentry/event_manager/test_generate_culprit.py
@@ -45,7 +45,33 @@ def test_with_exception_interface():
     assert generate_culprit(data) == 'bar.py in ?'
 
 
-def test_with_missing_exception_interface():
+def test_with_missing_exception_stacktrace():
+    data = {
+        'exception': {
+            'values': [
+                {
+                    'stacktrace': None,
+                },
+                {
+                    'stacktrace': {
+                        'frames': None,
+                    }
+                },
+                {
+                    'stacktrace': {
+                        'frames': [None],
+                    }
+                },
+            ]
+        },
+        'request': {
+            'url': 'http://example.com'
+        },
+    }
+    assert generate_culprit(data) == 'http://example.com'
+
+
+def test_with_stacktrace_interface():
     data = {
         'stacktrace': {
             'frames': [
@@ -66,6 +92,18 @@ def test_with_missing_exception_interface():
     assert generate_culprit(data) == 'PLZNOTME.py in ?'
 
 
+def test_with_missing_stacktrace_frames():
+    data = {
+        'stacktrace': {
+            'frames': None,
+        },
+        'request': {
+            'url': 'http://example.com'
+        },
+    }
+    assert generate_culprit(data) == 'http://example.com'
+
+
 def test_with_empty_stacktrace():
     data = {
         'stacktrace': None,
@@ -84,11 +122,23 @@ def test_with_only_http_interface():
     }
     assert generate_culprit(data) == 'http://example.com'
 
+    data = {
+        'request': {
+            'url': None
+        },
+    }
+    assert generate_culprit(data) == ''
+
     data = {
         'request': {},
     }
     assert generate_culprit(data) == ''
 
+    data = {
+        'request': None,
+    }
+    assert generate_culprit(data) == ''
+
 
 def test_empty_data():
     assert generate_culprit({}) == ''
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
index 01c2df2c5f..d6e74f0052 100644
--- a/tests/sentry/event_manager/test_normalization.py
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import pytest
 import mock
 import logging
 
@@ -22,6 +23,14 @@ def make_event(**kwargs):
     return result
 
 
+def test_tags_none():
+    manager = EventManager(make_event(tags=None))
+    manager.normalize()
+    data = manager.get_data()
+
+    assert data['tags'] == []
+
+
 def test_tags_as_list():
     manager = EventManager(make_event(tags=[('foo', 'bar')]))
     manager.normalize()
@@ -46,19 +55,28 @@ def test_interface_is_relabeled():
     assert data['user'] == {'id': '1'}
 
 
-def test_does_default_ip_address_to_user():
-    manager = EventManager(
-        make_event(
-            **{
-                'request': {
-                    'url': 'http://example.com',
-                    'env': {
-                        'REMOTE_ADDR': '127.0.0.1',
-                    }
-                }
+def test_interface_none():
+    manager = EventManager(make_event(user=None))
+    manager.normalize()
+    data = manager.get_data()
+
+    assert 'user' not in data
+
+
+@pytest.mark.parametrize('user', ['missing', None, {}, {'ip_address': None}])
+def test_does_default_ip_address_to_user(user):
+    event = {
+        'request': {
+            'url': 'http://example.com',
+            'env': {
+                'REMOTE_ADDR': '127.0.0.1',
             }
-        )
-    )
+        }
+    }
+    if user != 'missing':
+        event['user'] = user
+
+    manager = EventManager(make_event(**event))
     manager.normalize()
     data = manager.get_data()
 
@@ -189,6 +207,36 @@ def test_logger():
     assert not any(e.get('name') == 'logger' for e in data['errors'])
 
 
+def test_moves_stacktrace_to_exception():
+    manager = EventManager(
+        make_event(
+            exception={
+                'type': 'MyException',
+            },
+            stacktrace={
+                'frames': [
+                    {
+                        'lineno': 1,
+                        'filename': 'foo.py',
+                    }, {
+                        'lineno': 1,
+                        'filename': 'bar.py',
+                    }
+                ]
+            }
+        )
+    )
+    manager.normalize()
+    data = manager.get_data()
+
+    frames = data['exception']['values'][0]['stacktrace']['frames']
+    assert frames[0]['lineno'] == 1
+    assert frames[0]['filename'] == 'foo.py'
+    assert frames[1]['lineno'] == 1
+    assert frames[1]['filename'] == 'bar.py'
+    assert 'stacktrace' not in data
+
+
 def test_bad_interfaces_no_exception():
     manager = EventManager(
         make_event(
diff --git a/tests/sentry/event_manager/test_validate_data.py b/tests/sentry/event_manager/test_validate_data.py
index 7695acc064..aac9edef4a 100644
--- a/tests/sentry/event_manager/test_validate_data.py
+++ b/tests/sentry/event_manager/test_validate_data.py
@@ -418,3 +418,9 @@ def test_messages_old_behavior():
     assert "message" not in data
     assert len(data["errors"]) == 1
     assert data["logentry"] == {"message": "foo is bar"}
+
+
+def test_none_interface():
+    data = validate_and_normalize({"exception": None})
+    assert data.get("exception") is None
+    assert not data.get("errors")
diff --git a/tests/sentry/eventtypes/test_error.py b/tests/sentry/eventtypes/test_error.py
index b4d8108df3..21de7aa9c9 100644
--- a/tests/sentry/eventtypes/test_error.py
+++ b/tests/sentry/eventtypes/test_error.py
@@ -5,6 +5,61 @@ from sentry.testutils import TestCase
 
 
 class ErrorEventTest(TestCase):
+    def test_has_metadata_none(self):
+        inst = ErrorEvent({})
+        assert not inst.has_metadata()
+
+        inst = ErrorEvent({'exception': None})
+        assert not inst.has_metadata()
+
+        inst = ErrorEvent({'exception': {'values': None}})
+        assert not inst.has_metadata()
+
+        inst = ErrorEvent({'exception': {'values': [None]}})
+        assert not inst.has_metadata()
+
+        inst = ErrorEvent({'exception': {'values': [{}]}})
+        assert not inst.has_metadata()
+
+        inst = ErrorEvent({'exception': {'values': [{
+            'type': None,
+            'value': None,
+        }]}})
+        assert not inst.has_metadata()
+
+    def test_has_metadata(self):
+        inst = ErrorEvent({'exception': {'values': [{
+            'type': 'Exception',
+            'value': 'Foo',
+        }]}})
+        assert inst.has_metadata()
+
+        inst = ErrorEvent({'exception': {'values': [{
+            'stacktrace': {},
+        }]}})
+        assert inst.has_metadata()
+
+    def test_get_metadata(self):
+        inst = ErrorEvent({'exception': {'values': [{
+            'type': 'Exception',
+            'value': 'Foo',
+        }]}})
+        assert inst.get_metadata() == {
+            'type': 'Exception',
+            'value': 'Foo',
+        }
+
+    def test_get_metadata_none(self):
+        inst = ErrorEvent({'exception': {'values': [{
+            'type': None,
+            'value': None,
+            'stacktrace': {},
+        }]}})
+        assert inst.get_metadata() == {
+            'type': 'Error',
+            'value': '',
+        }
+
     def test_to_string_none_value(self):
         inst = ErrorEvent({})
         result = inst.to_string({'type': 'Error', 'value': None})
