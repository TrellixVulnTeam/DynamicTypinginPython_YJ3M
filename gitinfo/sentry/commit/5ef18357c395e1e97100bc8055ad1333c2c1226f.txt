commit 5ef18357c395e1e97100bc8055ad1333c2c1226f
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 15 22:59:46 2012 -0800

    Allow permissions to extend permissions in some areas, and move tests into a structure compatible with nose-quickunit

diff --git a/CHANGES b/CHANGES
index ed7c130ea2..36cfe1cf34 100644
--- a/CHANGES
+++ b/CHANGES
@@ -2,12 +2,18 @@ Version 3.0.0
 -------------
 
 Version 3 of Sentry is centered around a restructure of the internal services and
-the architecture for running those.
+the architecture for running those and additional improvements to the plugin architecture.
+
+The upgrade process should be trivial, just be aware that if you were using --config before
+you must change the way you pass it so that it's before the subcommand. For example
+if you were doing ``sentry start --config...`` the command would now be changed to
+``sentry --config... start``.
 
 * Sentry no longer provides the ability to daemonize processes. This should now be
   done at the system level.
 * All of Sentry's CLI is now handled through Logan (https://github.com/dcramer/logan),
   which simply pipes commands to Django's internal system utilizing custom configuration.
+* Plugins now have a hook for managing some level of permissions (beyond the required defaults).
 
 Version 2.9.0
 -------------
diff --git a/sentry/permissions.py b/sentry/permissions.py
new file mode 100644
index 0000000000..e6c3344bac
--- /dev/null
+++ b/sentry/permissions.py
@@ -0,0 +1,25 @@
+"""
+sentry.permissions
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.conf import settings
+from sentry.plugins import plugins
+
+
+def can_create_projects(user):
+    if not (user and user.is_authenticated()):
+        return False
+
+    if user.has_perm('sentry.can_add_project'):
+        return True
+
+    result = plugins.first('has_perm', user, 'add_project')
+    if result is None:
+        result = settings.ALLOW_PROJECT_CREATION
+
+    if result is False:
+        return result
+    return True
diff --git a/sentry/plugins/base.py b/sentry/plugins/base.py
index 12fc8e1aeb..99144bb5b2 100644
--- a/sentry/plugins/base.py
+++ b/sentry/plugins/base.py
@@ -52,6 +52,12 @@ class PluginManager(InstanceManager):
                 return plugin
         raise KeyError
 
+    def first(self, func_name, *args, **kwargs):
+        for plugin in self.all():
+            result = getattr(plugin, func_name)(*args, **kwargs)
+            if result is not None:
+                return result
+
     def register(self, cls):
         self.add('%s.%s' % (cls.__module__, cls.__name__))
         return cls
@@ -138,6 +144,9 @@ class IPlugin(object):
     def get_url(self, group):
         return reverse('sentry-group-plugin-action', args=(group.project_id, group.pk, self.slug))
 
+    def has_perm(self, user, perm, *objects):
+        return None
+
     # The following methods are specific to web requests
 
     def get_view_response(self, request, group):
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index 2d71a4c483..fb009ea038 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -5,6 +5,7 @@ from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
 from sentry.models import ProjectMember, MEMBER_USER, MEMBER_OWNER
+from sentry.permissions import can_create_projects
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required, has_access
 from sentry.web.forms import EditProjectForm, NewProjectForm, \
@@ -33,7 +34,7 @@ def project_list(request):
 @login_required
 @csrf_protect
 def new_project(request):
-    if not (settings.ALLOW_PROJECT_CREATION or request.user.has_perm('sentry.can_add_project')):
+    if not can_create_projects(request.user):
         return HttpResponseRedirect(reverse('sentry'))
 
     if request.user.has_perm('sentry.can_add_project'):
@@ -65,6 +66,10 @@ def new_project(request):
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def remove_project(request, project):
+    result = plugins.first('has_perm', request.user, 'remove_project', project)
+    if result is False and not request.user.has_perm('sentry.can_remove_project'):
+        return HttpResponseRedirect(reverse('sentry'))
+
     if str(project.id) == str(settings.PROJECT):
         return HttpResponseRedirect(reverse('sentry-project-list'))
 
@@ -99,6 +104,10 @@ def remove_project(request, project):
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def manage_project(request, project):
+    result = plugins.first('has_perm', request.user, 'edit_project', project)
+    if result is False and not request.user.has_perm('sentry.can_change_project'):
+        return HttpResponseRedirect(reverse('sentry'))
+
     form = EditProjectForm(request.POST or None, instance=project)
 
     if form.is_valid():
@@ -122,6 +131,10 @@ def manage_project(request, project):
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def new_project_member(request, project):
+    result = plugins.first('has_perm', request.user, 'add_project_member', project)
+    if result is False and not request.user.has_perm('sentry.can_add_projectmember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
     form = NewProjectMemberForm(project, request.POST or None, initial={
         'type': MEMBER_USER,
     })
@@ -146,6 +159,10 @@ def new_project_member(request, project):
 def edit_project_member(request, project, member_id):
     member = project.member_set.get(pk=member_id)
 
+    result = plugins.first('has_perm', request.user, 'edit_project_member', member)
+    if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
     form = EditProjectMemberForm(project, request.POST or None, instance=member)
     if form.is_valid():
         member = form.save(commit=True)
@@ -170,6 +187,10 @@ def remove_project_member(request, project, member_id):
     if member.user == project.owner:
         return HttpResponseRedirect(reverse('sentry-project-list'))
 
+    result = plugins.first('has_perm', request.user, 'remove_project_member', member)
+    if result is False and not request.user.has_perm('sentry.can_remove_projectmember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
     if request.POST:
         member.delete()
 
@@ -193,6 +214,10 @@ def configure_project_plugin(request, project, slug):
     except KeyError:
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
 
+    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
+    if result is False and not request.user.is_superuser:
+        return HttpResponseRedirect(reverse('sentry'))
+
     form = plugin.project_conf_form
     if form is None:
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index 4cc6e02e77..b7e2e86de6 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -18,6 +18,7 @@ from django.utils.safestring import mark_safe
 from sentry.conf import settings
 from sentry.models import ProjectMember, Project, View, \
   MEMBER_USER, Option, ProjectOption
+from sentry.permissions import can_create_projects
 
 logger = logging.getLogger('sentry.errors')
 
@@ -78,29 +79,37 @@ def iter_data(obj):
         yield k, v
 
 
-def render_to_string(template, context=None, request=None):
+def get_default_context(request):
     from sentry.plugins import plugins
 
-    if context is None:
-        context = {}
-
-    context.update({
+    context = {
         'HAS_SEARCH': settings.USE_SEARCH,
         'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
         'PROJECT_ID': int(settings.PROJECT),
         'VIEWS': list(View.objects.all()),
         'URL_PREFIX': settings.URL_PREFIX,
         'PLUGINS': plugins,
-    })
+    }
 
     if request:
         context.update({
             'request': request,
-            'can_create_projects': request.user.has_perm('sentry.add_project'),
+            'can_create_projects': can_create_projects(request.user),
         })
         if 'project_list' not in context:
             context['project_list'] = get_project_list(request.user).values()
 
+    return context
+
+
+def render_to_string(template, context=None, request=None):
+    default_context = get_default_context(request)
+
+    if context is None:
+        context = default_context
+    else:
+        context.update(default_context)
+
     if request:
         context = RequestContext(request, context)
     else:
diff --git a/tests/base.py b/tests/base.py
index bc7cdfe208..413062046b 100644
--- a/tests/base.py
+++ b/tests/base.py
@@ -56,7 +56,7 @@ class Settings(object):
 
 
 class BaseTestCase(object):
-    urls = 'tests.web.urls'
+    urls = 'tests.sentry.web.urls'
 
     Settings = Settings
 
diff --git a/tests/api/__init__.py b/tests/fixtures/__init__.py
similarity index 100%
rename from tests/api/__init__.py
rename to tests/fixtures/__init__.py
diff --git a/tests/http/__init__.py b/tests/sentry/__init__.py
similarity index 100%
rename from tests/http/__init__.py
rename to tests/sentry/__init__.py
diff --git a/tests/manager/__init__.py b/tests/sentry/api/__init__.py
similarity index 100%
rename from tests/manager/__init__.py
rename to tests/sentry/api/__init__.py
diff --git a/tests/api/tests.py b/tests/sentry/api/tests.py
similarity index 100%
rename from tests/api/tests.py
rename to tests/sentry/api/tests.py
diff --git a/tests/models/__init__.py b/tests/sentry/http/__init__.py
similarity index 100%
rename from tests/models/__init__.py
rename to tests/sentry/http/__init__.py
diff --git a/tests/http/tests.py b/tests/sentry/http/tests.py
similarity index 100%
rename from tests/http/tests.py
rename to tests/sentry/http/tests.py
diff --git a/tests/plugins/__init__.py b/tests/sentry/manager/__init__.py
similarity index 100%
rename from tests/plugins/__init__.py
rename to tests/sentry/manager/__init__.py
diff --git a/tests/manager/tests.py b/tests/sentry/manager/tests.py
similarity index 100%
rename from tests/manager/tests.py
rename to tests/sentry/manager/tests.py
diff --git a/tests/plugins/mail/__init__.py b/tests/sentry/models/__init__.py
similarity index 100%
rename from tests/plugins/mail/__init__.py
rename to tests/sentry/models/__init__.py
diff --git a/tests/models/tests.py b/tests/sentry/models/tests.py
similarity index 100%
rename from tests/models/tests.py
rename to tests/sentry/models/tests.py
diff --git a/tests/search/__init__.py b/tests/sentry/permissions/__init__.py
similarity index 100%
rename from tests/search/__init__.py
rename to tests/sentry/permissions/__init__.py
diff --git a/tests/sentry/permissions/tests.py b/tests/sentry/permissions/tests.py
new file mode 100644
index 0000000000..d573a8ec79
--- /dev/null
+++ b/tests/sentry/permissions/tests.py
@@ -0,0 +1,27 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from django.contrib.auth.models import User, AnonymousUser
+from sentry.permissions import can_create_projects
+from tests.base import TestCase
+
+
+class CanCreateProjectTest(TestCase):
+    def test_superuser_is_true(self):
+        user = User(id=100000, is_superuser=True)
+        self.assertTrue(can_create_projects(user))
+
+    def test_anonymous_is_false(self):
+        user = AnonymousUser()
+        self.assertFalse(can_create_projects(user))
+
+    def test_allow_creation_is_true(self):
+        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True):
+            user = User(id=100000)
+            self.assertTrue(can_create_projects(user))
+
+    def test_dont_allow_creation_is_false(self):
+        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False):
+            user = User(id=100000)
+            self.assertFalse(can_create_projects(user))
diff --git a/tests/signals/__init__.py b/tests/sentry/plugins/__init__.py
similarity index 100%
rename from tests/signals/__init__.py
rename to tests/sentry/plugins/__init__.py
diff --git a/tests/tasks/__init__.py b/tests/sentry/plugins/mail/__init__.py
similarity index 100%
rename from tests/tasks/__init__.py
rename to tests/sentry/plugins/mail/__init__.py
diff --git a/tests/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
similarity index 100%
rename from tests/plugins/mail/tests.py
rename to tests/sentry/plugins/mail/tests.py
diff --git a/tests/plugins/tests.py b/tests/sentry/plugins/tests.py
similarity index 100%
rename from tests/plugins/tests.py
rename to tests/sentry/plugins/tests.py
diff --git a/tests/tasks/cleanup/__init__.py b/tests/sentry/search/__init__.py
similarity index 100%
rename from tests/tasks/cleanup/__init__.py
rename to tests/sentry/search/__init__.py
diff --git a/tests/search/tests.py b/tests/sentry/search/tests.py
similarity index 100%
rename from tests/search/tests.py
rename to tests/sentry/search/tests.py
diff --git a/tests/udp/__init__.py b/tests/sentry/signals/__init__.py
similarity index 100%
rename from tests/udp/__init__.py
rename to tests/sentry/signals/__init__.py
diff --git a/tests/signals/tests.py b/tests/sentry/signals/tests.py
similarity index 100%
rename from tests/signals/tests.py
rename to tests/sentry/signals/tests.py
diff --git a/tests/utils/__init__.py b/tests/sentry/tasks/__init__.py
similarity index 100%
rename from tests/utils/__init__.py
rename to tests/sentry/tasks/__init__.py
diff --git a/tests/utils/http/__init__.py b/tests/sentry/tasks/cleanup/__init__.py
similarity index 100%
rename from tests/utils/http/__init__.py
rename to tests/sentry/tasks/cleanup/__init__.py
diff --git a/tests/tasks/cleanup/tests.py b/tests/sentry/tasks/cleanup/tests.py
similarity index 100%
rename from tests/tasks/cleanup/tests.py
rename to tests/sentry/tasks/cleanup/tests.py
diff --git a/tests/templates/404.html b/tests/sentry/templates/404.html
similarity index 100%
rename from tests/templates/404.html
rename to tests/sentry/templates/404.html
diff --git a/tests/utils/instancemanager/__init__.py b/tests/sentry/templates/__init__.py
similarity index 100%
rename from tests/utils/instancemanager/__init__.py
rename to tests/sentry/templates/__init__.py
diff --git a/tests/utils/json/__init__.py b/tests/sentry/templates/sentry-tests/__init__.py
similarity index 100%
rename from tests/utils/json/__init__.py
rename to tests/sentry/templates/sentry-tests/__init__.py
diff --git a/tests/templates/sentry-tests/error.html b/tests/sentry/templates/sentry-tests/error.html
similarity index 100%
rename from tests/templates/sentry-tests/error.html
rename to tests/sentry/templates/sentry-tests/error.html
diff --git a/tests/views/__init__.py b/tests/sentry/udp/__init__.py
similarity index 100%
rename from tests/views/__init__.py
rename to tests/sentry/udp/__init__.py
diff --git a/tests/udp/tests.py b/tests/sentry/udp/tests.py
similarity index 100%
rename from tests/udp/tests.py
rename to tests/sentry/udp/tests.py
diff --git a/tests/web/__init__.py b/tests/sentry/utils/__init__.py
similarity index 100%
rename from tests/web/__init__.py
rename to tests/sentry/utils/__init__.py
diff --git a/tests/utils/instancemanager/tests.py b/tests/sentry/utils/http/__init__.py
similarity index 100%
rename from tests/utils/instancemanager/tests.py
rename to tests/sentry/utils/http/__init__.py
diff --git a/tests/utils/http/tests.py b/tests/sentry/utils/http/tests.py
similarity index 100%
rename from tests/utils/http/tests.py
rename to tests/sentry/utils/http/tests.py
diff --git a/tests/sentry/utils/instancemanager/__init__.py b/tests/sentry/utils/instancemanager/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/utils/instancemanager/tests.py b/tests/sentry/utils/instancemanager/tests.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/utils/json/__init__.py b/tests/sentry/utils/json/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/utils/json/tests.py b/tests/sentry/utils/json/tests.py
similarity index 100%
rename from tests/utils/json/tests.py
rename to tests/sentry/utils/json/tests.py
diff --git a/tests/sentry/views/__init__.py b/tests/sentry/views/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/views/tests.py b/tests/sentry/views/tests.py
similarity index 100%
rename from tests/views/tests.py
rename to tests/sentry/views/tests.py
diff --git a/tests/sentry/web/__init__.py b/tests/sentry/web/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/web/tests.py b/tests/sentry/web/tests.py
similarity index 100%
rename from tests/web/tests.py
rename to tests/sentry/web/tests.py
diff --git a/tests/web/urls.py b/tests/sentry/web/urls.py
similarity index 100%
rename from tests/web/urls.py
rename to tests/sentry/web/urls.py
diff --git a/tests/web/views.py b/tests/sentry/web/views.py
similarity index 100%
rename from tests/web/views.py
rename to tests/sentry/web/views.py
