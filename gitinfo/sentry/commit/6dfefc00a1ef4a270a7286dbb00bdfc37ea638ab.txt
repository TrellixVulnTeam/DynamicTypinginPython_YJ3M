commit 6dfefc00a1ef4a270a7286dbb00bdfc37ea638ab
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Oct 30 16:22:44 2019 -0700

    feat(experiments): Gate all join / invite requests features (#15305)

diff --git a/src/sentry/api/endpoints/organization_invite_request_index.py b/src/sentry/api/endpoints/organization_invite_request_index.py
index bb29dcd71b..076566f23d 100644
--- a/src/sentry/api/endpoints/organization_invite_request_index.py
+++ b/src/sentry/api/endpoints/organization_invite_request_index.py
@@ -4,7 +4,7 @@ from django.db import transaction
 from django.db.models import Q
 from rest_framework.response import Response
 
-from sentry import roles, features
+from sentry import roles, features, experiments
 from sentry.app import locks
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationPermission
 from sentry.api.paginator import OffsetPaginator
@@ -61,6 +61,10 @@ class OrganizationInviteRequestIndexEndpoint(OrganizationEndpoint):
                 {"organization": "Your organization is not allowed to invite members"}, status=403
             )
 
+        variant = experiments.get(org=organization, experiment_name="ImprovedInvitesExperiment")
+        if variant not in ("all", "invite_request"):
+            return Response(status=403)
+
         serializer = OrganizationMemberSerializer(
             data=request.data,
             context={"organization": organization, "allowed_roles": roles.get_all()},
diff --git a/src/sentry/api/endpoints/organization_join_request.py b/src/sentry/api/endpoints/organization_join_request.py
index 7d97891869..da50c7155a 100644
--- a/src/sentry/api/endpoints/organization_join_request.py
+++ b/src/sentry/api/endpoints/organization_join_request.py
@@ -15,8 +15,6 @@ from sentry.models import AuthProvider, InviteStatus, OrganizationMember
 from sentry.signals import join_request_created
 
 
-JOIN_REQUEST_EXPERIMENT = "JoinRequestExperiment"
-
 logger = logging.getLogger(__name__)
 
 
@@ -57,8 +55,8 @@ class OrganizationJoinRequestEndpoint(OrganizationEndpoint):
     permission_classes = []
 
     def post(self, request, organization):
-        assignment = experiments.get(org=organization, experiment_name=JOIN_REQUEST_EXPERIMENT)
-        if assignment != 1:
+        variant = experiments.get(org=organization, experiment_name="ImprovedInvitesExperiment")
+        if variant not in ("all", "join_request"):
             return Response(status=403)
 
         if organization.get_option("sentry:join_requests") is False:
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 3702c63d88..46e2937d3c 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -241,7 +241,8 @@ const formGroups = [
           ),
         },
         visible: ({experiments}) =>
-          !!experiments && experiments.JoinRequestExperiment === 1,
+          !!experiments &&
+          ['all', 'join_request'].includes(experiments.ImprovedInvitesExperiment),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 221b92ab9c..809319f08b 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -590,6 +590,4 @@ export type RouterProps = {
 export type ActiveExperiments = {
   ImprovedInvitesExperiment: 'none' | 'all' | 'join_request' | 'invite_request';
   TrialUpgradeV2Experiment: 'upgrade' | 'trial' | -1;
-  JoinRequestExperiment: 0 | 1 | -1;
-  InviteRequestExperiment: 0 | 1 | -1;
 };
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index e7ae740268..0c592957ad 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -8,7 +8,7 @@ import styled from 'react-emotion';
 
 import {ORGANIZATION_FETCH_ERROR_TYPES} from 'app/constants';
 import {fetchOrganizationDetails} from 'app/actionCreators/organization';
-import {metric} from 'app/utils/analytics';
+import {metric, logExperiment} from 'app/utils/analytics';
 import {openSudo} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
 import Alert from 'app/components/alert';
@@ -141,6 +141,15 @@ const OrganizationContext = createReactClass({
         hooks.push(cb(organization));
       });
 
+      // Log exposure to the improved invite experiment
+      logExperiment({
+        organization,
+        key: 'ImprovedInvitesExperiment',
+        unitName: 'org_id',
+        unitId: parseInt(organization.id, 10),
+        param: 'variant',
+      });
+
       // Configure scope to have organization tag
       Sentry.configureScope(scope => {
         scope.setTag('organization', organization.id);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
index 65507c6fa4..e10de4972e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
@@ -53,13 +53,24 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
   get hasExperiment() {
     const {organization} = this.props;
 
+    return (
+      !!organization &&
+      !!organization.experiments &&
+      organization.experiments.ImprovedInvitesExperiment !== undefined &&
+      organization.experiments.ImprovedInvitesExperiment !== 'none'
+    );
+  }
+
+  get hasInviteRequestExperiment() {
+    const {organization} = this.props;
+
     if (!organization || !organization.experiments) {
       return false;
     }
-    return (
-      organization.experiments.JoinRequestExperiment === 1 ||
-      organization.experiments.InviteRequestExperiment === 1
-    );
+
+    const variant = organization.experiments.ImprovedInvitesExperiment;
+
+    return variant === 'all' || variant === 'invite_request';
   }
 
   get onRequestsTab() {
@@ -74,6 +85,10 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
     return organization.access.includes('member:write');
   }
 
+  get canOpeninviteModal() {
+    return this.hasWriteAccess || this.hasInviteRequestExperiment;
+  }
+
   get showInviteRequests() {
     return this.hasWriteAccess && this.hasExperiment;
   }
@@ -135,9 +150,9 @@ class OrganizationMembersWrapper extends AsyncView<Props> {
             priority="primary"
             size="small"
             onClick={openInviteMembersModal}
-            disabled={!this.hasWriteAccess}
+            disabled={!this.canOpeninviteModal}
             title={
-              !this.hasWriteAccess
+              !this.canOpeninviteModal
                 ? t('You do not have enough permission to add new members')
                 : undefined
             }
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 2ecb16cc7c..1d74c71c7e 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -23,8 +23,6 @@ from sentry.utils.sdk import capture_exception
 
 ERR_NO_SSO = _("The organization does not exist or does not have Single Sign-On enabled.")
 
-JOIN_REQUEST_EXPERIMENT = "JoinRequestExperiment"
-
 
 # Stores callbacks that are called to get additional template context data before the login page
 # is rendered. Callbacks are called in any order. If an error is encountered in a callback it is
@@ -85,8 +83,8 @@ class AuthLoginView(BaseView):
         if not organization:
             return None
 
-        assignment = experiments.get(org=organization, experiment_name=JOIN_REQUEST_EXPERIMENT)
-        if assignment != 1:
+        variant = experiments.get(org=organization, experiment_name="ImprovedInvitesExperiment")
+        if variant not in ("all", "join_request"):
             return None
 
         if organization.get_option("sentry:join_requests") is False:
diff --git a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx b/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
index 112d9c7fbd..8f0c59093e 100644
--- a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
@@ -296,7 +296,7 @@ describe('OrganizationGeneralSettings', function() {
 
   it('renders join request switch with experiment', async function() {
     const organization = TestStubs.Organization({
-      experiments: {JoinRequestExperiment: 1},
+      experiments: {ImprovedInvitesExperiment: 'join_request'},
     });
     const wrapper = mountWithTheme(
       <OrganizationGeneralSettings params={{orgId: organization.slug}} />,
@@ -309,24 +309,9 @@ describe('OrganizationGeneralSettings', function() {
     expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(true);
   });
 
-  it('does not render join request switch not in experiment', async function() {
-    const organization = TestStubs.Organization({
-      experiments: {JoinRequestExperiment: -1},
-    });
-    const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: organization.slug}} />,
-      TestStubs.routerContext([{organization}])
-    );
-
-    wrapper.setState({loading: false});
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(false);
-  });
-
   it('does not render join request switch in experiment control', async function() {
     const organization = TestStubs.Organization({
-      experiments: {JoinRequestExperiment: 0},
+      experiments: {ImprovedInvitesExperiment: 'none'},
     });
     const wrapper = mountWithTheme(
       <OrganizationGeneralSettings params={{orgId: organization.slug}} />,
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
index e79802ef5a..2650a90c9e 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
@@ -74,7 +74,7 @@ describe('OrganizationMembersWrapper', function() {
 
   it('does not render requests tab without access', function() {
     const org = TestStubs.Organization({
-      experiments: {InviteRequestExperiment: 1},
+      experiments: {ImprovedInvitesExperiment: 'invite_request'},
       access: [],
       status: {
         id: 'active',
@@ -90,9 +90,9 @@ describe('OrganizationMembersWrapper', function() {
     expect(trackAnalyticsEvent).not.toHaveBeenCalled();
   });
 
-  it('renders requests tab with InviteRequestExperiment', function() {
+  it('renders requests tab with ImprovedInvitesExperiment invite_request', function() {
     const org = TestStubs.Organization({
-      experiments: {InviteRequestExperiment: 1},
+      experiments: {ImprovedInvitesExperiment: 'invite_request'},
       access: ['member:admin', 'org:admin', 'member:write'],
       status: {
         id: 'active',
@@ -128,9 +128,9 @@ describe('OrganizationMembersWrapper', function() {
     });
   });
 
-  it('renders requests tab with JoinRequestExperiment', function() {
+  it('renders requests tab with ImprovedInvitesExperiment join_request', function() {
     const org = TestStubs.Organization({
-      experiments: {JoinRequestExperiment: 1},
+      experiments: {ImprovedInvitesExperiment: 'join_request'},
       access: ['member:admin', 'org:admin', 'member:write'],
       status: {
         id: 'active',
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
index 658cda7868..370b7e5fc0 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
@@ -151,7 +151,7 @@ describe('OrganizationRequestsView', function() {
     });
 
     const org = TestStubs.Organization({
-      experiments: {InviteRequestExperiment: 0},
+      experiments: {ImprovedInvitesExperiment: 'none'},
       access: ['member:admin', 'org:admin', 'member:write'],
       status: {
         id: 'active',
@@ -185,7 +185,7 @@ describe('OrganizationRequestsView', function() {
     });
 
     const org = TestStubs.Organization({
-      experiments: {InviteRequestExperiment: 1},
+      experiments: {ImprovedInvitesExperiment: 'all'},
       access: [],
       status: {
         id: 'active',
@@ -208,7 +208,7 @@ describe('OrganizationRequestsView', function() {
 
   it('can approve invite request and update', async function() {
     const org = TestStubs.Organization({
-      experiments: {InviteRequestExperiment: 1},
+      experiments: {ImprovedInvitesExperiment: 'all'},
       access: ['member:admin', 'org:admin', 'member:write'],
       status: {
         id: 'active',
@@ -269,7 +269,7 @@ describe('OrganizationRequestsView', function() {
 
   it('can deny invite request and update', async function() {
     const org = TestStubs.Organization({
-      experiments: {JoinRequestExperiment: 1},
+      experiments: {ImprovedInvitesExperiment: 'all'},
       access: ['member:admin', 'org:admin', 'member:write'],
       status: {
         id: 'active',
diff --git a/tests/sentry/api/endpoints/test_organization_invite_request_index.py b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
index e961102a60..33209cab87 100644
--- a/tests/sentry/api/endpoints/test_organization_invite_request_index.py
+++ b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django.core import mail
 from django.core.urlresolvers import reverse
 from exam import fixture
+from mock import patch
 
 from sentry.testutils import APITestCase
 from sentry.models import OrganizationMember, OrganizationMemberTeam, InviteStatus
@@ -58,7 +59,8 @@ class OrganizationInviteRequestCreateTest(APITestCase):
             kwargs={"organization_slug": self.org.slug},
         )
 
-    def test_simple(self):
+    @patch("sentry.experiments.get", return_value="invite_request")
+    def test_simple(self, mocked_experiment):
         self.login_as(user=self.user)
         with self.tasks():
             response = self.client.post(
@@ -81,7 +83,8 @@ class OrganizationInviteRequestCreateTest(APITestCase):
         assert len(teams) == 1
         assert teams[0].team_id == self.team.id
 
-    def test_higher_role(self):
+    @patch("sentry.experiments.get", return_value="invite_request")
+    def test_higher_role(self, mocked_experiment):
         self.login_as(user=self.user)
         response = self.client.post(
             self.url, {"email": "eric@localhost", "role": "owner", "teams": [self.team.slug]}
@@ -93,7 +96,8 @@ class OrganizationInviteRequestCreateTest(APITestCase):
         member = OrganizationMember.objects.get(organization=self.org, email=response.data["email"])
         assert member.role == "owner"
 
-    def test_existing_member(self):
+    @patch("sentry.experiments.get", return_value="invite_request")
+    def test_existing_member(self, mocked_experiment):
         self.login_as(user=self.user)
 
         user2 = self.create_user("foobar@example.com")
@@ -106,7 +110,8 @@ class OrganizationInviteRequestCreateTest(APITestCase):
         assert resp.status_code == 400
         assert "The user %s is already a member" % user2.email in resp.content
 
-    def test_existing_invite_request(self):
+    @patch("sentry.experiments.get", return_value="invite_request")
+    def test_existing_invite_request(self, mocked_experiment):
         self.login_as(user=self.user)
 
         invite_request = self.create_member(
diff --git a/tests/sentry/api/endpoints/test_organization_join_request.py b/tests/sentry/api/endpoints/test_organization_join_request.py
index 7752ec0a3f..3b441360a5 100644
--- a/tests/sentry/api/endpoints/test_organization_join_request.py
+++ b/tests/sentry/api/endpoints/test_organization_join_request.py
@@ -6,7 +6,6 @@ from django.core import mail
 
 from sentry.models import AuthProvider, InviteStatus, OrganizationOption, OrganizationMember
 from sentry.testutils import APITestCase
-from sentry.api.endpoints.organization_join_request import JOIN_REQUEST_EXPERIMENT
 
 
 class OrganizationJoinRequestTest(APITestCase):
@@ -26,32 +25,28 @@ class OrganizationJoinRequestTest(APITestCase):
         resp = self.get_response("invalid-slug", email=self.email)
         assert resp.status_code == 404
 
-    def test_experiment(self):
-        with patch("sentry.experiments.get", return_value=-1) as mock_experiment:
-            resp = self.get_response(self.org.slug, email=self.email)
-            assert resp.status_code == 403
+    @patch("sentry.experiments.get", return_value="none")
+    def test_experiment(self, mock_experiment):
+        resp = self.get_response(self.org.slug, email=self.email)
+        assert resp.status_code == 403
 
         mock_experiment.assert_called_once_with(
-            org=self.org, experiment_name=JOIN_REQUEST_EXPERIMENT
+            org=self.org, experiment_name="ImprovedInvitesExperiment"
         )
 
-        with patch("sentry.experiments.get", return_value=0):
-            resp = self.get_response(self.org.slug, email=self.email)
-            assert resp.status_code == 403
-
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_email_required(self, mock_experiment):
         resp = self.get_response(self.org.slug)
         assert resp.status_code == 400
         assert resp.data["email"][0] == "This field is required."
 
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_invalid_email(self, mock_experiment):
         resp = self.get_response(self.org.slug, email="invalid-email")
         assert resp.status_code == 400
         assert resp.data["email"][0] == "Enter a valid email address."
 
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_organization_setting_disabled(self, mock_experiment):
         OrganizationOption.objects.create(
             organization_id=self.org.id, key="sentry:join_requests", value=False
@@ -63,14 +58,14 @@ class OrganizationJoinRequestTest(APITestCase):
     @patch(
         "sentry.api.endpoints.organization_join_request.ratelimiter.is_limited", return_value=True
     )
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_ratelimit(self, mock_experiment, is_limited):
         resp = self.get_response(self.org.slug, email=self.email)
         assert resp.status_code == 429
         assert resp.data["detail"] == "Rate limit exceeded."
 
     @patch("sentry.api.endpoints.organization_join_request.logger")
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_org_sso_enabled(self, mock_experiment, mock_log):
         AuthProvider.objects.create(organization=self.org, provider="google")
 
@@ -82,7 +77,7 @@ class OrganizationJoinRequestTest(APITestCase):
         assert not mock_log.info.called
 
     @patch("sentry.api.endpoints.organization_join_request.logger")
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_user_already_exists(self, mock_experiment, mock_log):
         resp = self.get_response(self.org.slug, email=self.user.email)
         assert resp.status_code == 204
@@ -92,7 +87,7 @@ class OrganizationJoinRequestTest(APITestCase):
         assert not mock_log.info.called
 
     @patch("sentry.api.endpoints.organization_join_request.logger")
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_pending_member_already_exists(self, mock_experiment, mock_log):
         pending_email = "pending@example.com"
         original_pending = self.create_member(
@@ -110,7 +105,7 @@ class OrganizationJoinRequestTest(APITestCase):
 
     @patch("sentry.analytics.record")
     @patch("sentry.api.endpoints.organization_join_request.logger")
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_already_requested_to_join(self, mock_experiment, mock_log, mock_record):
         join_request_email = "join-request@example.com"
         original_join_request = self.create_member(
@@ -133,7 +128,7 @@ class OrganizationJoinRequestTest(APITestCase):
 
     @patch("sentry.analytics.record")
     @patch("sentry.api.endpoints.organization_join_request.logger")
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_request_to_join(self, mock_experiment, mock_log, mock_record):
         with self.tasks():
             resp = self.get_response(self.org.slug, email=self.email)
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index be8d8d2ec7..3c39bd7efe 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -41,7 +41,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert not any(c[0][0] == "join_request.link_viewed" for c in mock_record.call_args_list)
 
     @patch("sentry.analytics.record")
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_get_request_join_link_with_experiment(self, mock_experiment, mock_record):
         self.login_as(self.user)
         resp = self.client.get(self.path)
@@ -55,7 +55,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
             "join_request.link_viewed", organization_id=self.organization.id
         )
 
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="join_request")
     def test_cannot_get_request_join_link_with_setting_disabled(self, mock_experiment):
         OrganizationOption.objects.create(
             organization_id=self.organization.id, key="sentry:join_requests", value=False
