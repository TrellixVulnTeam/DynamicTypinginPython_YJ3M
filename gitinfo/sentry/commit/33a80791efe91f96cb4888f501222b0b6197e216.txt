commit 33a80791efe91f96cb4888f501222b0b6197e216
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Nov 12 16:24:20 2018 -0800

    feat(integrations): GitLab limit issue search to project scope and add issue search by iid. (#10533)
    
    * Added search by iid as well as limited search by project rather than group.
    
    * removed issue group search.
    
    * Corrected client link url.
    
    * Update src/sentry/integrations/gitlab/issues.py
    
    Co-Authored-By: lauryndbrown <lauryndbrown@gmail.com>
    
    * corrected test.
    
    * fixed existing gitlab search tests.
    
    * Added tests containing search by iid
    
    * reordered statements in create_issue_config
    
    * Added a no project sent during search external issues test

diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index 4e4326bd1e..177255756d 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -18,12 +18,12 @@ class GitLabApiClientPath(object):
     compare = u'/projects/{project}/repository/compare'
     diff = u'/projects/{project}/repository/commits/{sha}/diff'
     group = u'/groups/{group}'
-    group_issues = u'/groups/{group}/issues'
     group_projects = u'/groups/{group}/projects'
     hooks = u'/hooks'
     issue = u'/projects/{project}/issues/{issue}'
     issues = u'/projects/{project}/issues'
     project = u'/projects/{project}'
+    project_issues = u'/projects/{project}/issues'
     project_hooks = u'/projects/{project}/hooks'
     project_hook = u'/projects/{project}/hooks/{hook_id}'
     user = u'/user'
@@ -183,16 +183,17 @@ class GitLabApiClient(ApiClient):
             data=data,
         )
 
-    def search_group_issues(self, group_id, query):
-        """Search issues in a group
+    def search_project_issues(self, project_id, query, iids=None):
+        """Search issues in a project
 
-        See https://docs.gitlab.com/ee/api/issues.html#list-group-issues
+        See https://docs.gitlab.com/ee/api/issues.html#list-project-issues
         """
-        path = GitLabApiClientPath.group_issues.format(group=group_id)
+        path = GitLabApiClientPath.project_issues.format(project=project_id)
 
         return self.get(path, params={
             'scope': 'all',
-            'search': query
+            'search': query,
+            'iids': iids,
         })
 
     def create_project_webhook(self, project_id):
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index dffbc68325..84873acceb 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -99,10 +99,9 @@ class GitlabIntegration(IntegrationInstallation, GitlabIssueBasic, RepositoryMix
         group_id = self.get_group_id()
         return client.search_group_projects(group_id, query)
 
-    def search_issues(self, query):
+    def search_issues(self, project_id, query, iids):
         client = self.get_client()
-        group_id = self.get_group_id()
-        return client.search_group_issues(group_id, query)
+        return client.search_project_issues(project_id, query, iids)
 
 
 class InstallationForm(forms.Form):
diff --git a/src/sentry/integrations/gitlab/issues.py b/src/sentry/integrations/gitlab/issues.py
index 2bba194edf..816e25615a 100644
--- a/src/sentry/integrations/gitlab/issues.py
+++ b/src/sentry/integrations/gitlab/issues.py
@@ -25,6 +25,15 @@ class GitlabIssueBasic(IssueBasicMixin):
     def get_persisted_default_config_fields(self):
         return ['project']
 
+    def get_projects_and_default(self, group, **kwargs):
+        params = kwargs.get('params', {})
+        defaults = self.get_project_defaults(group.project_id)
+        kwargs['repo'] = params.get('project', defaults.get('project'))
+
+        # In GitLab Repositories are called Projects
+        default_project, project_choices = self.get_repository_choices(group, **kwargs)
+        return default_project, project_choices
+
     def create_default_repo_choice(self, default_repo):
         client = self.get_client()
         try:
@@ -35,13 +44,8 @@ class GitlabIssueBasic(IssueBasicMixin):
         return (project['id'], project['name_with_namespace'])
 
     def get_create_issue_config(self, group, **kwargs):
-        params = kwargs.get('params', {})
-        defaults = self.get_project_defaults(group.project_id)
-        kwargs['repo'] = params.get('project', defaults.get('project'))
-
+        default_project, project_choices = self.get_projects_and_default(group, **kwargs)
         fields = super(GitlabIssueBasic, self).get_create_issue_config(group, **kwargs)
-        # In GitLab Repositories are called Projects
-        default_project, project_choices = self.get_repository_choices(group, **kwargs)
 
         org = group.organization
         autocomplete_url = reverse(
@@ -92,12 +96,24 @@ class GitlabIssueBasic(IssueBasicMixin):
         }
 
     def get_link_issue_config(self, group, **kwargs):
+        default_project, project_choices = self.get_projects_and_default(group, **kwargs)
+
         org = group.organization
         autocomplete_url = reverse(
             'sentry-extensions-gitlab-search', args=[org.slug, self.model.id],
         )
 
         return [
+            {
+                'name': 'project',
+                'label': 'GitLab Project',
+                'type': 'select',
+                'default': default_project,
+                'choices': project_choices,
+                'url': autocomplete_url,
+                'updatesForm': True,
+                'required': True,
+            },
             {
                 'name': 'externalIssue',
                 'label': 'Issue',
@@ -105,7 +121,6 @@ class GitlabIssueBasic(IssueBasicMixin):
                 'type': 'select',
                 'url': autocomplete_url,
                 'required': True,
-                'updatesForm': True,
             },
         ]
 
diff --git a/src/sentry/integrations/gitlab/search.py b/src/sentry/integrations/gitlab/search.py
index 1f46fdad43..d1f4f4030d 100644
--- a/src/sentry/integrations/gitlab/search.py
+++ b/src/sentry/integrations/gitlab/search.py
@@ -29,13 +29,23 @@ class GitlabIssueSearchEndpoint(OrganizationEndpoint):
         installation = integration.get_installation(organization.id)
 
         if field == 'externalIssue':
-            response = installation.search_issues(query)
+            project = request.GET.get('project')
+            if project is None:
+                return Response({'detail': 'project is a required parameter'}, status=400)
+            try:
+                iids = [int(query)]
+                query = None
+            except ValueError:
+                iids = None
+
+            response = installation.search_issues(query=query, project_id=project, iids=iids)
+
             return Response([{
                 'label': '(#%s) %s' % (i['iid'], i['title']),
                 'value': '%s#%s' % (i['project_id'], i['iid'])
             } for i in response])
 
-        if field == 'project':
+        elif field == 'project':
             response = installation.search_projects(query)
             return Response([{
                 'label': project['name_with_namespace'],
diff --git a/tests/sentry/integrations/gitlab/test_issues.py b/tests/sentry/integrations/gitlab/test_issues.py
index 637fb32426..dbd3cc9258 100644
--- a/tests/sentry/integrations/gitlab/test_issues.py
+++ b/tests/sentry/integrations/gitlab/test_issues.py
@@ -77,15 +77,33 @@ class GitlabIssuesTest(GitLabTestCase):
 
     @responses.activate
     def test_get_link_issue_config(self):
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/groups/%s/projects' % self.installation.model.metadata['group_id'],
+            json=[
+                {'name_with_namespace': 'getsentry / sentry', 'id': 1},
+                {'name_with_namespace': 'getsentry / hello', 'id': 22},
+            ]
+        )
+        autocomplete_url = '/extensions/gitlab/search/baz/%d/' % self.installation.model.id
         assert self.installation.get_link_issue_config(self.group) == [
+            {
+                'name': 'project',
+                'label': 'GitLab Project',
+                'type': 'select',
+                'default': 1,
+                'choices': [(1, u'getsentry / sentry'), (22, u'getsentry / hello')],
+                'url': autocomplete_url,
+                'updatesForm': True,
+                'required': True,
+            },
             {
                 'name': 'externalIssue',
                 'label': 'Issue',
                 'default': '',
                 'type': 'select',
-                'url': '/extensions/gitlab/search/baz/%d/' % self.installation.model.id,
+                'url': autocomplete_url,
                 'required': True,
-                'updatesForm': True,
             },
         ]
 
diff --git a/tests/sentry/integrations/gitlab/test_search.py b/tests/sentry/integrations/gitlab/test_search.py
index d44bd7b95d..052adb96ce 100644
--- a/tests/sentry/integrations/gitlab/test_search.py
+++ b/tests/sentry/integrations/gitlab/test_search.py
@@ -24,10 +24,10 @@ class GitlabSearchTest(GitLabTestCase):
     def test_finds_external_issue_results(self):
         responses.add(
             responses.GET,
-            'https://example.gitlab.com/api/v4/groups/1/issues?scope=all&search=AEIOU',
+            'https://example.gitlab.com/api/v4/projects/5/issues?scope=all&search=AEIOU',
             json=[
-                {'iid': 25, 'title': 'AEIOU Error', 'project_id': '1'},
-                {'iid': 45, 'title': 'AEIOU Error', 'project_id': '2'}
+                {'iid': 25, 'title': 'AEIOU Error', 'project_id': '5'},
+                {'iid': 45, 'title': 'AEIOU Error', 'project_id': '5'}
             ]
         )
         resp = self.client.get(
@@ -35,13 +35,37 @@ class GitlabSearchTest(GitLabTestCase):
             data={
                 'field': 'externalIssue',
                 'query': 'AEIOU',
+                'project': '5'
             }
         )
 
         assert resp.status_code == 200
         assert resp.data == [
-            {'value': '1#25', 'label': '(#25) AEIOU Error'},
-            {'value': '2#45', 'label': '(#45) AEIOU Error'}
+            {'value': '5#25', 'label': '(#25) AEIOU Error'},
+            {'value': '5#45', 'label': '(#45) AEIOU Error'}
+        ]
+
+    @responses.activate
+    def test_finds_external_issue_results_with_iid(self):
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/5/issues?scope=all&search=25',
+            json=[
+                {'iid': 25, 'title': 'AEIOU Error', 'project_id': '5'},
+            ]
+        )
+        resp = self.client.get(
+            self.url,
+            data={
+                'field': 'externalIssue',
+                'query': '25',
+                'project': '5'
+            }
+        )
+
+        assert resp.status_code == 200
+        assert resp.data == [
+            {'value': '5#25', 'label': '(#25) AEIOU Error'},
         ]
 
     @responses.activate
@@ -80,7 +104,7 @@ class GitlabSearchTest(GitLabTestCase):
     def test_finds_no_external_issues_results(self):
         responses.add(
             responses.GET,
-            'https://example.gitlab.com/api/v4/groups/1/issues?scope=all&search=XYZ',
+            'https://example.gitlab.com/api/v4/projects/5/issues?scope=all&search=XYZ',
             json=[]
         )
         resp = self.client.get(
@@ -88,6 +112,26 @@ class GitlabSearchTest(GitLabTestCase):
             data={
                 'field': 'externalIssue',
                 'query': 'XYZ',
+                'project': '5',
+            }
+        )
+
+        assert resp.status_code == 200
+        assert resp.data == []
+
+    @responses.activate
+    def test_finds_no_external_issues_results_iid(self):
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/5/issues?scope=all&search=11',
+            json=[]
+        )
+        resp = self.client.get(
+            self.url,
+            data={
+                'field': 'externalIssue',
+                'query': '11',
+                'project': '5',
             }
         )
 
@@ -143,6 +187,26 @@ class GitlabSearchTest(GitLabTestCase):
 
         assert resp.status_code == 400
 
+    @responses.activate
+    def test_missing_project_with_external_issue_field(self):
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/projects/5/issues?scope=all&search=AEIOU',
+            json=[
+                {'iid': 25, 'title': 'AEIOU Error', 'project_id': '5'},
+                {'iid': 45, 'title': 'AEIOU Error', 'project_id': '5'}
+            ]
+        )
+        resp = self.client.get(
+            self.url,
+            data={
+                'field': 'externalIssue',
+                'query': 'AEIOU',
+            }
+        )
+
+        assert resp.status_code == 400
+
     # Missing Resources
     def test_missing_integration(self):
         url = reverse(
@@ -188,6 +252,7 @@ class GitlabSearchTest(GitLabTestCase):
             data={
                 'field': 'externalIssue',
                 'query': 'GetSentry',
+                'project': '5',
             }
         )
         assert resp.status_code == 500
