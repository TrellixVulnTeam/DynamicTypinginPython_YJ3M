commit cecab00a258fb780dcc703e48db2209d136f7905
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Dec 4 11:19:44 2018 -0800

    feat: Improve organization merges
    
    - Add AuthProvider
    - Add OrganizationAvatar
    - Add OrganizationIntegration
    - Add logging

diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index 2b6eb67a34..f1c264740d 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -7,6 +7,7 @@ sentry.models.organization
 """
 from __future__ import absolute_import, print_function
 
+import logging
 import six
 
 from datetime import timedelta
@@ -227,7 +228,10 @@ class Organization(Model):
         from sentry.models import (
             ApiKey,
             AuditLogEntry,
+            AuthProvider,
             Commit,
+            OrganizationAvatar,
+            OrganizationIntegration,
             OrganizationMember,
             OrganizationMemberTeam,
             Project,
@@ -244,6 +248,7 @@ class Organization(Model):
         for from_member in OrganizationMember.objects.filter(
             organization=from_org, user__isnull=False
         ):
+            logger = logging.getLogger('sentry.merge')
             try:
                 to_member = OrganizationMember.objects.get(
                     organization=to_org,
@@ -265,58 +270,113 @@ class Organization(Model):
                             'is_active': True,
                         },
                     )
-
-        for team in Team.objects.filter(organization=from_org):
+            logger.info('user.migrate', extra={
+                'instance_id': from_member.id,
+                'new_member_id': to_member.id,
+                'from_organization_id': from_org.id,
+                'to_organization_id': to_org.id,
+            })
+
+        for from_team in Team.objects.filter(organization=from_org):
             try:
                 with transaction.atomic():
-                    team.update(organization=to_org)
+                    from_team.update(organization=to_org)
             except IntegrityError:
-                slugify_instance(team, team.name, organization=to_org)
-                team.update(
+                slugify_instance(from_team, from_team.name, organization=to_org)
+                from_team.update(
                     organization=to_org,
-                    slug=team.slug,
+                    slug=from_team.slug,
                 )
-
-        for project in Project.objects.filter(organization=from_org):
+            logger.info('team.migrate', extra={
+                'instance_id': from_team.id,
+                'new_slug': from_team.slug,
+                'from_organization_id': from_org.id,
+                'to_organization_id': to_org.id,
+            })
+
+        for from_project in Project.objects.filter(organization=from_org):
             try:
                 with transaction.atomic():
-                    project.update(organization=to_org)
+                    from_project.update(organization=to_org)
             except IntegrityError:
                 slugify_instance(
-                    project,
-                    project.name,
+                    from_project,
+                    from_project.name,
                     organization=to_org,
                     reserved=RESERVED_PROJECT_SLUGS)
-                project.update(
+                from_project.update(
                     organization=to_org,
-                    slug=project.slug,
+                    slug=from_project.slug,
                 )
+            logger.info('project.migrate', extra={
+                'instance_id': from_project.id,
+                'new_slug': from_project.slug,
+                'from_organization_id': from_org.id,
+                'to_organization_id': to_org.id,
+            })
 
         # TODO(jess): update this when adding unique constraint
         # on version, organization for releases
-        for release in Release.objects.filter(organization=from_org):
+        for from_release in Release.objects.filter(organization=from_org):
             try:
-                to_release = Release.objects.get(version=release.version, organization=to_org)
+                to_release = Release.objects.get(version=from_release.version, organization=to_org)
             except Release.DoesNotExist:
-                Release.objects.filter(id=release.id).update(organization=to_org)
+                Release.objects.filter(id=from_release.id).update(organization=to_org)
             else:
-                Release.merge(to_release, [release])
-
-        for model in (ApiKey, AuditLogEntry, ReleaseFile):
-            model.objects.filter(
-                organization=from_org,
-            ).update(organization=to_org)
-
-        for model in (
-            Commit, ReleaseCommit, ReleaseEnvironment, ReleaseHeadCommit, Repository, Environment
-        ):
+                Release.merge(to_release, [from_release])
+            logger.info('release.migrate', extra={
+                'instance_id': from_release.id,
+                'from_organization_id': from_org.id,
+                'to_organization_id': to_org.id,
+            })
+
+        def do_update(queryset, params):
+            model_name = queryset.model.__name__.lower()
             try:
                 with transaction.atomic():
-                    model.objects.filter(
-                        organization_id=from_org.id,
-                    ).update(organization_id=to_org.id)
+                    queryset.update(**params)
             except IntegrityError:
-                pass
+                for instance in queryset:
+                    try:
+                        with transaction.atomic():
+                            instance.update(**params)
+                    except IntegrityError:
+                        logger.info('{}.migrate-skipped'.format(model_name), extra={
+                            'from_organization_id': from_org.id,
+                            'to_organization_id': to_org.id,
+                        })
+                    else:
+                        logger.info('{}.migrate'.format(model_name), extra={
+                            'instance_id': instance.id,
+                            'from_organization_id': from_org.id,
+                            'to_organization_id': to_org.id,
+                        })
+            else:
+                logger.info('{}.migrate'.format(model_name), extra={
+                    'from_organization_id': from_org.id,
+                    'to_organization_id': to_org.id,
+                })
+
+        INST_MODEL_LIST = (
+            AuthProvider, ApiKey, AuditLogEntry, OrganizationAvatar,
+            OrganizationIntegration, ReleaseFile,
+        )
+
+        ATTR_MODEL_LIST = (
+            Commit, ReleaseCommit, ReleaseEnvironment, ReleaseHeadCommit, Repository, Environment,
+        )
+
+        for model in INST_MODEL_LIST:
+            queryset = model.objects.filter(
+                organization=from_org,
+            )
+            do_update(queryset, {'organization': to_org})
+
+        for model in ATTR_MODEL_LIST:
+            queryset = model.objects.filter(
+                organization_id=from_org.id,
+            )
+            do_update(queryset, {'organization_id': to_org.id})
 
     # TODO: Make these a mixin
     def update_option(self, *args, **kwargs):
diff --git a/tests/sentry/models/test_organization.py b/tests/sentry/models/test_organization.py
index 173e703fa4..ce2e1f51b3 100644
--- a/tests/sentry/models/test_organization.py
+++ b/tests/sentry/models/test_organization.py
@@ -4,7 +4,7 @@ import copy
 import mock
 
 from sentry.models import (
-    ApiKey, AuditLogEntry, AuditLogEntryEvent, Commit, File, OrganizationMember,
+    ApiKey, AuditLogEntry, AuditLogEntryEvent, Commit, File, Integration, OrganizationAvatar, OrganizationMember, OrganizationIntegration,
     OrganizationMemberTeam, OrganizationOption, Project, Release, ReleaseCommit,
     ReleaseEnvironment, ReleaseFile, Team, TotpInterface, User,
 )
@@ -47,6 +47,20 @@ class OrganizationTest(TestCase):
             organization_id=from_org.id,
             environment_id=1
         )
+        from_avatar = OrganizationAvatar.objects.create(
+            organization=from_org,
+        )
+        integration = Integration.objects.create(
+            provider='slack',
+            external_id='some_slack',
+            name='Test Slack',
+            metadata={
+                'domain_name': 'slack-test.slack.com',
+            },
+        )
+
+        integration.add_organization(from_org, from_owner)
+
         from_user = self.create_user('baz@example.com')
         other_user = self.create_user('bizbaz@example.com')
         self.create_member(organization=from_org, user=from_user)
@@ -129,6 +143,10 @@ class OrganizationTest(TestCase):
             id=from_release_environment.id
         ).release_id == to_release.id
 
+        assert OrganizationAvatar.objects.filter(id=from_avatar.id, organization=to_org).exists()
+        assert OrganizationIntegration.objects.filter(
+            integration=integration, organization=to_org).exists()
+
     def test_get_default_owner(self):
         user = self.create_user('foo@example.com')
         org = self.create_organization(owner=user)
