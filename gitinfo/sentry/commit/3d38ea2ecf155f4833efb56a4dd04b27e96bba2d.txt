commit 3d38ea2ecf155f4833efb56a4dd04b27e96bba2d
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 6 12:22:48 2013 -0800

    Correct infinite loop on dashboard when user cannot create teams and has no memberships (fixes GH-751)

diff --git a/src/sentry/templates/sentry/generic_error.html b/src/sentry/templates/sentry/generic_error.html
new file mode 100644
index 0000000000..b8206f2bee
--- /dev/null
+++ b/src/sentry/templates/sentry/generic_error.html
@@ -0,0 +1,15 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+
+{% block title %}{{ title }} | {{ block.super }}{% endblock %}
+
+{% block page_header %}
+    <h2>{{ title }}</h2>
+{% endblock %}
+
+{% block content %}
+    <section class="body">
+        {{ message|linebreaks }}
+    </section>
+{% endblock %}
diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index 350cff19dd..b576342c01 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -161,6 +161,9 @@ class BaseTestCase(Exam):
         }
         self.client.cookies[session_cookie].update(cookie_data)
 
+    def login(self):
+        self.login_as(self.user)
+
     def _pre_setup(self):
         cache.clear()
         ProjectOption.objects.clear_cache()
diff --git a/src/sentry/web/frontend/generic.py b/src/sentry/web/frontend/generic.py
index 03e374b5f4..61f69b66c0 100644
--- a/src/sentry/web/frontend/generic.py
+++ b/src/sentry/web/frontend/generic.py
@@ -9,9 +9,12 @@ from django.http import HttpResponseRedirect
 from django.contrib.staticfiles import finders
 from django.core.urlresolvers import reverse
 from django.utils.datastructures import SortedDict
+from django.utils.translation import ugettext as _
 
 from sentry.models import Team
+from sentry.permissions import can_create_teams
 from sentry.web.decorators import login_required
+from sentry.web.helpers import render_to_response
 
 
 def find_static_files(ignore_patterns=()):
@@ -26,7 +29,13 @@ def find_static_files(ignore_patterns=()):
 def dashboard(request, template='dashboard.html'):
     team_list = Team.objects.get_for_user(request.user)
     if not team_list:
-        return HttpResponseRedirect(reverse('sentry-new-team'))
+        if can_create_teams(request.user):
+            return HttpResponseRedirect(reverse('sentry-new-team'))
+
+        return render_to_response('sentry/generic_error.html', {
+            'title': _('No Membership'),
+            'message': _('You are not a member of any teams in Sentry and you do not have access to create a new team.'),
+        }, request)
 
     # This cookie gets automatically set by render_to_response
     last_team = request.session.get('team')
diff --git a/tests/sentry/web/frontend/generic/__init__.py b/tests/sentry/web/frontend/generic/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/frontend/generic/tests.py b/tests/sentry/web/frontend/generic/tests.py
new file mode 100644
index 0000000000..109922e56b
--- /dev/null
+++ b/tests/sentry/web/frontend/generic/tests.py
@@ -0,0 +1,44 @@
+import mock
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import TestCase, fixture, before
+
+
+class DashboardTest(TestCase):
+    @before
+    def login_user(self):
+        self.login()
+
+    @fixture
+    def path(self):
+        return reverse('sentry')
+
+    @mock.patch('sentry.web.frontend.generic.can_create_teams')
+    def test_redirects_to_new_team_when_possible(self, can_create_teams):
+        can_create_teams.return_value = True
+
+        resp = self.client.get(self.path)
+
+        can_create_teams.assert_called_once_with(self.user)
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver' + reverse('sentry-new-team')
+
+    @mock.patch('sentry.web.frontend.generic.can_create_teams', mock.Mock(return_value=True))
+    def test_redirects_to_first_team_when_possible(self):
+        # HACK: force team creation
+        team = self.team
+
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver' + reverse('sentry', args=[team.slug])
+
+    @mock.patch('sentry.web.frontend.generic.can_create_teams', mock.Mock(return_value=False))
+    def test_shows_error_when_no_teams_and_cannot_create(self):
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/generic_error.html')
+        assert 'title' in resp.context
+        assert 'message' in resp.context
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 3fd62c49ff..855046536a 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -17,19 +17,7 @@ logger = logging.getLogger(__name__)
 
 
 class BaseViewTest(TestCase):
-    def login(self):
-        self.login_as(self.user)
-
-
-class DashboardTest(BaseViewTest):
-    @fixture
-    def path(self):
-        return reverse('sentry')
-
-    def test_requires_authentication(self):
-        resp = self.client.get(reverse('sentry'), follow=True)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/login.html')
+    pass
 
 
 class EnvStatusTest(BaseViewTest):
