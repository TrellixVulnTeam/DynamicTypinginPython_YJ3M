commit 4dad82107fb4b37d5e89347682f55e18e5767eb6
Author: William Mak <william@wmak.io>
Date:   Thu Apr 9 17:19:08 2020 -0400

    fix(perf-views) - Allow members create/delete key transactions
    
    - OrganizationPermission only allows post/put/delete on higher member
      roles

diff --git a/src/sentry/discover/endpoints/discover_key_transactions.py b/src/sentry/discover/endpoints/discover_key_transactions.py
index 8d4a66f344..3eea1de6bc 100644
--- a/src/sentry/discover/endpoints/discover_key_transactions.py
+++ b/src/sentry/discover/endpoints/discover_key_transactions.py
@@ -10,8 +10,17 @@ from sentry.discover.endpoints.serializers import KeyTransactionSerializer
 from sentry.snuba.discover import key_transaction_query, key_transaction_timeseries_query
 
 
+class KeyTransactionPermission(OrganizationPermission):
+    scope_map = {
+        "GET": ["org:read"],
+        "POST": ["org:read"],
+        "PUT": ["org:read"],
+        "DELETE": ["org:read"],
+    }
+
+
 class IsKeyTransactionEndpoint(KeyTransactionBase):
-    permission_classes = (OrganizationPermission,)
+    permission_classes = (KeyTransactionPermission,)
 
     def get(self, request, organization):
         """ Get the Key Transactions for a user """
@@ -35,7 +44,7 @@ class IsKeyTransactionEndpoint(KeyTransactionBase):
 
 
 class KeyTransactionEndpoint(KeyTransactionBase):
-    permission_classes = (OrganizationPermission,)
+    permission_classes = (KeyTransactionPermission,)
 
     def post(self, request, organization):
         """ Create a Key Transaction """
@@ -107,7 +116,7 @@ class KeyTransactionEndpoint(KeyTransactionBase):
 
 
 class KeyTransactionStatsEndpoint(KeyTransactionBase):
-    permission_classes = (OrganizationPermission,)
+    permission_classes = (KeyTransactionPermission,)
 
     def get(self, request, organization):
         """ Get the Key Transactions for a user """
diff --git a/tests/snuba/api/endpoints/test_discover_key_transactions.py b/tests/snuba/api/endpoints/test_discover_key_transactions.py
index dc27e73513..92d8711c5e 100644
--- a/tests/snuba/api/endpoints/test_discover_key_transactions.py
+++ b/tests/snuba/api/endpoints/test_discover_key_transactions.py
@@ -22,6 +22,22 @@ class KeyTransactionTest(APITestCase, SnubaTestCase):
 
         self.project = self.create_project(name="bar", organization=self.org)
 
+    def test_save_key_transaction_as_member(self):
+        user = self.create_user()
+        self.create_member(user=user, organization=self.org, role="member")
+        self.login_as(user=user, superuser=False)
+
+        data = load_data("transaction")
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": data["transaction"]}
+            )
+        assert response.status_code == 201
+
+        key_transactions = KeyTransaction.objects.filter(owner=user)
+        assert len(key_transactions) == 1
+
     def test_save_key_transaction(self):
         data = load_data("transaction")
         with self.feature("organizations:performance-view"):
@@ -411,6 +427,31 @@ class KeyTransactionTest(APITestCase, SnubaTestCase):
             == 0
         )
 
+    def test_delete_key_transaction_as_member(self):
+        user = self.create_user()
+        self.create_member(user=user, organization=self.org, role="member")
+        self.login_as(user=user, superuser=False)
+
+        event_data = load_data("transaction")
+
+        KeyTransaction.objects.create(
+            owner=user,
+            organization=self.org,
+            transaction=event_data["transaction"],
+            project=self.project,
+        )
+
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.delete(
+                url + "?project={}".format(self.project.id),
+                {"transaction": event_data["transaction"]},
+            )
+        assert response.status_code == 204
+
+        key_transactions = KeyTransaction.objects.filter(owner=user)
+        assert len(key_transactions) == 0
+
     def test_delete_nonexistent_transaction(self):
         event_data = load_data("transaction")
 
