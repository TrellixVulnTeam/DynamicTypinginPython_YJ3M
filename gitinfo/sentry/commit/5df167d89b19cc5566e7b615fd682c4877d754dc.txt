commit 5df167d89b19cc5566e7b615fd682c4877d754dc
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Jan 23 12:59:45 2020 -0800

    feat(integrations): adds analytics events for sentry apps (#16588)

diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
index 5e08f718a4..27b12e0e7d 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
@@ -87,6 +87,7 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
         integration: sentryApp.slug,
         already_installed: isInstalled,
         view,
+        integration_status: sentryApp.status,
       },
       organization,
       {startSession: view === 'external_install'} //new session on external installs
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 33ef99963e..d67c4af57d 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -40,11 +40,21 @@ type OtherSingleIntegrationEvents = {
     | 'Integrations: Uninstall Completed';
 };
 
-type SingleIntegrationEvent = (ModalOpenEvent | OtherSingleIntegrationEvents) & {
-  integration: string; //the slug
-  integration_type: 'sentry_app' | 'plugin' | 'first_party';
+type SentryAppEvent = {
+  integration_type: 'sentry_app';
+  //include the status since people might do weird things testing unpublished integrations
+  integration_status: 'published' | 'unpublished' | 'internal';
 };
 
+type NonSentryAppEvent = {
+  integration_type: 'plugin' | 'first_party';
+};
+
+type SingleIntegrationEvent = (ModalOpenEvent | OtherSingleIntegrationEvents) &
+  (SentryAppEvent | NonSentryAppEvent) & {
+    integration: string; //the slug
+  };
+
 //TODO(Steve): hook up events
 type MultipleIntegrationsEvent = {
   eventKey: 'integrations.index_viewed';
@@ -66,24 +76,43 @@ type IntegrationsEventParams = (MultipleIntegrationsEvent | SingleIntegrationEve
  * Uses the current session ID or generates a new one if startSession == true
  */
 export const trackIntegrationEvent = (
-  analtyicsParams: IntegrationsEventParams,
+  analyticsParams: IntegrationsEventParams,
   org?: Organization, //we should pass in org whenever we can but not every place guarantees this
   options?: {startSession: boolean}
 ) => {
   const {startSession} = options || {};
-  const sessionId = startSession ? startAnalyticsSession() : getAnalyticsSessionId();
-  const fullParams = {
+  let sessionId = startSession ? startAnalyticsSession() : getAnalyticsSessionId();
+
+  //we should always have a session id but if we don't, we should generate one
+  if (!sessionId) {
+    // eslint-disable-next-line no-console
+    console.warn(`analytics_session_id absent from event ${analyticsParams.eventName}`);
+    sessionId = startAnalyticsSession();
+  }
+
+  const params = {
     analytics_session_id: sessionId,
     organization_id: org?.id,
     role: org?.role,
     integration_directory_active: false, //TODO: should be configurable
-    ...analtyicsParams,
+    ...analyticsParams,
   };
 
+  //add the integration_status to the type of params so TS doesn't complain about what we do below
+  const fullParams: typeof params & {
+    integration_status?: string;
+  } = params;
+
+  //Reload expects integration_status even though it's not relevant for non-sentry apps
+  //Passing in a dummy value of published in those cases
+  if (analyticsParams.integration && analyticsParams.integration_type !== 'sentry_app') {
+    fullParams.integration_status = 'published';
+  }
+
   //TODO(steve): remove once we pass in org always
   if (!org) {
     // eslint-disable-next-line no-console
-    console.warn(`Organization absent from event ${analtyicsParams.eventName}`);
+    console.warn(`Organization absent from event ${analyticsParams.eventName}`);
   }
 
   //could put this into a debug method or for the main trackAnalyticsEvent event
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
index 5ea7178868..bf4a9aa87f 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
@@ -14,6 +14,7 @@ import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
 import {openModal} from 'app/actionCreators/modal';
 import SplitInstallationIdModal from 'app/views/organizationIntegrations/SplitInstallationIdModal';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 
 type Props = {
   api: Client;
@@ -37,6 +38,33 @@ class SentryAppInstallationDetail extends React.Component<Props> {
   redirectUser = (install: SentryAppInstallation) => {
     const {organization, app} = this.props;
 
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.installation_start',
+        eventName: 'Integrations: Installation Start',
+        integration_type: 'sentry_app',
+        integration: app.slug,
+        view: 'integrations_page',
+        integration_status: app.status,
+      },
+      this.props.organization
+    );
+
+    //installation is complete if the status is installed
+    if (install.status === 'installed') {
+      trackIntegrationEvent(
+        {
+          eventKey: 'integrations.installation_complete',
+          eventName: 'Integrations: Installation Complete',
+          integration_type: 'sentry_app',
+          integration: app.slug,
+          view: 'integrations_page',
+          integration_status: app.status,
+        },
+        this.props.organization
+      );
+    }
+
     if (!app.redirectUrl) {
       addSuccessMessage(t(`${app.slug} successfully installed.`));
       this.props.onAppInstall(install);
@@ -71,9 +99,31 @@ class SentryAppInstallationDetail extends React.Component<Props> {
 
   handleUninstall = (install: SentryAppInstallation) => {
     const {api, app} = this.props;
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.uninstall_clicked',
+        eventName: 'Integrations: Uninstall Clicked',
+        integration: app.slug,
+        integration_type: 'sentry_app',
+        integration_status: app.status,
+      },
+      this.props.organization
+    );
 
     uninstallSentryApp(api, install).then(
-      () => this.props.onAppUninstall(),
+      () => {
+        this.props.onAppUninstall();
+        trackIntegrationEvent(
+          {
+            eventKey: 'integrations.uninstall_completed',
+            eventName: 'Integrations: Uninstall Completed',
+            integration: app.slug,
+            integration_type: 'sentry_app',
+            integration_status: app.status,
+          },
+          this.props.organization
+        );
+      },
       () => {
         addErrorMessage(t(`Unable to uninstall ${app.name}`));
       }
diff --git a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
index 86957a84e9..21b6308612 100644
--- a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
@@ -20,6 +20,7 @@ import NarrowLayout from 'app/components/narrowLayout';
 import OrganizationAvatar from 'app/components/avatar/organizationAvatar';
 import SelectControl from 'app/components/forms/selectControl';
 import SentryAppDetailsModal from 'app/components/modals/sentryAppDetailsModal';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 
 type Props = RouteComponentProps<{sentryAppSlug: string}, {}>;
 
@@ -96,7 +97,34 @@ export default class SentryAppExternalInstallation extends AsyncView<Props, Stat
     if (!organization || !sentryApp) {
       return undefined;
     }
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.installation_start',
+        eventName: 'Integrations: Installation Start',
+        integration_type: 'sentry_app',
+        integration: sentryApp.slug,
+        view: 'external_install',
+        integration_status: sentryApp.status,
+      },
+      organization
+    );
+
     const install = await installSentryApp(this.api, organization.slug, sentryApp);
+    //installation is complete if the status is installed
+    if (install.status === 'installed') {
+      trackIntegrationEvent(
+        {
+          eventKey: 'integrations.installation_complete',
+          eventName: 'Integrations: Installation Complete',
+          integration_type: 'sentry_app',
+          integration: sentryApp.slug,
+          view: 'external_install',
+          integration_status: sentryApp.status,
+        },
+        organization
+      );
+    }
+
     if (sentryApp.redirectUrl) {
       const queryParams = {
         installationId: install.uuid,
