commit 895718d57330f913cc72b1db76ab0d26d6db91f3
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Mar 17 16:01:45 2016 -0700

    A bit more refactoring of queue monitoring

diff --git a/src/sentry/monitoring/queues.py b/src/sentry/monitoring/queues.py
index 928a993d6f..acbbeff9e2 100644
--- a/src/sentry/monitoring/queues.py
+++ b/src/sentry/monitoring/queues.py
@@ -8,6 +8,7 @@ sentry.monitoring.queues
 from __future__ import absolute_import, print_function
 
 from urlparse import urlparse
+from django.conf import settings
 from django.utils.functional import cached_property
 
 
@@ -21,16 +22,16 @@ class RedisBackend(object):
         return StrictRedis.from_url(self.broker_url)
 
     def bulk_get_sizes(self, queues):
-        return [(queue.name, self.get_size(queue)) for queue in queues]
+        return [(queue, self.get_size(queue)) for queue in queues]
 
     def get_size(self, queue):
-        return self.client.llen(queue.name)
+        return self.client.llen(queue)
 
     def purge_queue(self, queue):
         # This is slightly inaccurate since things could be queued between calling
         # LLEN and DEL, but it's close enough for this use case.
         size = self.get_size(queue)
-        self.client.delete(queue.name)
+        self.client.delete(queue)
         return size
 
 
@@ -54,7 +55,7 @@ class AmqpBackend(object):
         # which is basically checking for it's existence (passive=True), this also
         # returns back the queue size.
         try:
-            _, size, _ = channel.queue_declare(queue.name, passive=True)
+            _, size, _ = channel.queue_declare(queue, passive=True)
         except Exception:
             return 0
         return size
@@ -64,7 +65,8 @@ class AmqpBackend(object):
         with self.get_conn() as conn:
             with conn.channel() as channel:
                 for queue in queues:
-                    sizes.append((queue.name, self._get_size_from_channel(channel, queue)))
+                    sizes.append((queue, self._get_size_from_channel(channel, queue)))
+                print(sizes)
                 return sizes
 
     def get_size(self, queue):
@@ -75,15 +77,26 @@ class AmqpBackend(object):
     def purge_queue(self, queue):
         with self.get_conn() as conn:
             with conn.channel() as channel:
-                return channel.queue_purge(queue.name)
+                return channel.queue_purge(queue)
 
 
 def get_backend_for_broker(broker_url):
     return backends[urlparse(broker_url).scheme](broker_url)
 
 
+def get_queue_by_name(name):
+    "Lookup a celery Queue object by it's name"
+    for queue in settings.CELERY_QUEUES:
+        if queue.name == name:
+            return queue
+
 backends = {
     'redis': RedisBackend,
     'amqp': AmqpBackend,
     'librabbitmq': AmqpBackend,
 }
+
+try:
+    backend = get_backend_for_broker(settings.BROKER_URL)
+except KeyError:
+    backend = None
diff --git a/src/sentry/runner/commands/queues.py b/src/sentry/runner/commands/queues.py
index e8379b2b9b..1834908ae5 100644
--- a/src/sentry/runner/commands/queues.py
+++ b/src/sentry/runner/commands/queues.py
@@ -21,17 +21,15 @@ def queues():
 @click.option('-r', 'reverse', default=False, is_flag=True, help='Reverse the sort order.')
 @configuration
 def list(sort_size, reverse):
-    "List queues."
+    "List queues and their sizes."
 
     from django.conf import settings
-    from sentry.monitoring.queues import get_backend_for_broker
+    from sentry.monitoring.queues import backend
 
-    try:
-        backend = get_backend_for_broker(settings.BROKER_URL)
-    except KeyError as e:
-        raise click.ClickException('unknown broker type: %r' % e.message)
+    if backend is None:
+        raise click.ClickException('unknown broker type')
 
-    queues = backend.bulk_get_sizes(settings.CELERY_QUEUES)
+    queues = backend.bulk_get_sizes([q.name for q in settings.CELERY_QUEUES])
 
     if sort_size:
         queues = sorted(queues, key=lambda q: (-q[1], q[0]), reverse=reverse)
@@ -49,20 +47,13 @@ def list(sort_size, reverse):
 def purge(force, queue):
     "Purge all messages from a queue."
 
-    from django.conf import settings
-    for q in settings.CELERY_QUEUES:
-        if q.name == queue:
-            queue = q
-            break
-    else:
-        raise click.ClickException('unknown queue: %r' % queue)
+    from sentry.monitoring.queues import get_queue_by_name, backend
 
-    from sentry.monitoring.queues import get_backend_for_broker
+    if get_queue_by_name(queue) is None:
+        raise click.ClickException('unknown queue: %r' % queue)
 
-    try:
-        backend = get_backend_for_broker(settings.BROKER_URL)
-    except KeyError as e:
-        raise click.ClickException('unknown broker type: %r' % e.message)
+    if backend is None:
+        raise click.ClickException('unknown broker type')
 
     size = backend.get_size(queue)
 
@@ -71,6 +62,6 @@ def purge(force, queue):
         return
 
     if not force:
-        click.confirm('Are you sure you want to purge %d messages from the queue %r?' % (size, queue.name), abort=True)
+        click.confirm('Are you sure you want to purge %d messages from the queue \'%s\'?' % (size, queue), abort=True)
 
     click.echo('Poof, %d messages deleted' % backend.purge_queue(queue), err=True)
