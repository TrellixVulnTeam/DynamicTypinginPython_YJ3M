commit 9b627d6db11001f07b657a7a79b2058128e3a303
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Aug 6 15:52:01 2015 -0700

    Fix broken alert close button

diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index b5ebf67d91..cd6385b32e 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -11,7 +11,7 @@ var AlertMessage = React.createClass({
   },
 
   closeAlert: function() {
-    AlertActions.closeAlert(this);
+    AlertActions.closeAlert(this.props.id);
   },
 
   render: function() {
@@ -26,7 +26,7 @@ var AlertMessage = React.createClass({
                 onClick={this.closeAlert}>
           <span aria-hidden="true">&times;</span>
         </button>
-        {this.props.children}
+        {this.props.message}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/alerts.jsx b/src/sentry/static/sentry/app/components/alerts.jsx
index 1299574173..f6252b89fd 100644
--- a/src/sentry/static/sentry/app/components/alerts.jsx
+++ b/src/sentry/static/sentry/app/components/alerts.jsx
@@ -3,6 +3,7 @@ import Reflux from "reflux";
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 
 import AlertStore from '../stores/alertStore';
+import AlertMessage from './alertMessage';
 
 var Alerts = React.createClass({
   mixins: [
@@ -20,7 +21,7 @@ var Alerts = React.createClass({
     return (
       <div {...this.props}>
         {this.state.alerts.map(function(alert, key) {
-           return <div key={key}>{alert}</div>;
+           return <AlertMessage id={alert.id} key={key} type={alert.type} message={alert.message} />;
         })}
       </div>
     );
@@ -28,4 +29,3 @@ var Alerts = React.createClass({
 });
 
 export default Alerts;
-
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index bf3ba8e37f..56c5ec6b25 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -8,23 +8,21 @@ var AlertStore = Reflux.createStore({
 
   init: function() {
     this.alerts = [];
+    this.count = 0;
   },
 
   onAddAlert: function(message, type){
-    if (React.isValidElement(message)) {
-      this.alerts.push(message);
-    } else {
-      this.alerts.push(<AlertMessage type={type}>{message}</AlertMessage>);
-    }
+    this.alerts.push({
+      id: this.count++,
+      message: message,
+      type: type
+    });
+
     this.trigger(this.alerts);
   },
 
-  onCloseAlert: function(alert){
-    this.alerts = this.alerts.filter(function(item){
-      // XXX(dcramer): there is likely a safer way to do this that isnt using
-      // what seems to be a private operator
-      return item !== alert._currentElement;
-    });
+  onCloseAlert: function(id){
+    this.alerts = this.alerts.filter(item => item.id !== id);
     this.trigger(this.alerts);
   }
 });
diff --git a/tests/js/spec/stores/alertStore.spec.js b/tests/js/spec/stores/alertStore.spec.js
new file mode 100644
index 0000000000..419bc79647
--- /dev/null
+++ b/tests/js/spec/stores/alertStore.spec.js
@@ -0,0 +1,42 @@
+import AlertStore from 'app/stores/alertStore';
+
+describe('AlertStore', function () {
+  beforeEach(function () {
+    AlertStore.alerts = [];
+    AlertStore.count = 0;
+  });
+
+  describe('onAddAlert()', function () {
+    it('should add a new alert with incrementing id', function () {
+      AlertStore.onAddAlert({
+        message: 'Bzzzzzzp *crash*',
+        type: 'error'
+      });
+
+      AlertStore.onAddAlert({
+        message: 'Everything is super',
+        type: 'info'
+      });
+
+      expect(AlertStore.alerts.length).to.eql(2);
+      expect(AlertStore.alerts[0].id).to.eql(0);
+      expect(AlertStore.alerts[1].id).to.eql(1);
+    });
+  });
+
+  describe('onCloseAlert()', function () {
+    it('should remove alert with given id', function () {
+      AlertStore.alerts = [
+        { id: 1, message: 'foo', type: 'error '},
+        { id: 2, message: 'bar', type: 'error '},
+        { id: 3, message: 'baz', type: 'error '},
+      ];
+
+      AlertStore.onCloseAlert(2);
+
+      expect(AlertStore.alerts.length).to.eql(2);
+      expect(AlertStore.alerts[0].id).to.eql(1);
+      expect(AlertStore.alerts[1].id).to.eql(3);
+    });
+  });
+});
