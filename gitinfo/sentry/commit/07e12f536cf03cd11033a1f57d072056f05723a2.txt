commit 07e12f536cf03cd11033a1f57d072056f05723a2
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 5 12:34:51 2015 -0800

    Basic (hacky) breadcrumbs

diff --git a/src/sentry/static/sentry/app/components/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/breadcrumbs.jsx
index a8cc775cac..d7246b7ef2 100644
--- a/src/sentry/static/sentry/app/components/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/breadcrumbs.jsx
@@ -6,7 +6,9 @@ var Reflux = require("reflux");
 var BreadcrumbStore = require('../stores/breadcrumbStore');
 
 var Breadcrumbs = React.createClass({
-  mixins: [Reflux.listenTo(BreadcrumbStore, "onBreadcrumbChange", "onBreadcrumbChange")],
+  mixins: [
+    Reflux.listenTo(BreadcrumbStore, "onBreadcrumbChange", "onBreadcrumbChange"),
+  ],
 
   getInitialState() {
       return {
diff --git a/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx b/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx
index 0a3b0d91ab..63f1e92884 100644
--- a/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx
+++ b/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx
@@ -3,8 +3,12 @@
 var BreadcrumbStore = require("../stores/breadcrumbStore");
 
 module.exports = {
+
   componentWillMount() {
-    this.crumbs = this.getBreadcrumbNodes();
+    this.crumbs = this.getInitialBreadcrumbs();
+  },
+
+  componentDidMount() {
     this.crumbs.forEach((node) => {
       BreadcrumbStore.push(node);
     });
@@ -14,5 +18,17 @@ module.exports = {
     this.crumbs.forEach(() => {
       BreadcrumbStore.pop();
     });
+  },
+
+  setBreadcrumbs(nodes) {
+    this.componentWillUnmount();
+    this.crumbs = nodes;
+    this.crumbs.forEach((node) => {
+      BreadcrumbStore.push(node);
+    });
+  },
+
+  getInitialBreadcrumbs() {
+    return [];
   }
 };
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index 5e280c1421..18be88c8f2 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -10,6 +10,9 @@ var PropTypes = {
   }),
   Event: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
+  }),
+  User: React.PropTypes.shape({
+    id: React.PropTypes.string.isRequired
   })
 };
 
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 09d49871ed..577fc41f29 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -10,9 +10,15 @@ var AggregateEvents = require("./views/aggregateEvents");
 var AggregateTags = require("./views/aggregateTags");
 var AggregateOverview = require("./views/aggregateOverview");
 var ProjectDetails = require("./views/projectDetails");
+var PropTypes = require("./proptypes");
 var Stream = require("./views/stream");
 
 var App = React.createClass({
+  propTypes: {
+    isAuthenticated: React.PropTypes.bool.isRequired,
+    user: PropTypes.User
+  },
+
   render: function () {
     return (
       <Router.RouteHandler />
diff --git a/src/sentry/static/sentry/app/views/aggregate.jsx b/src/sentry/static/sentry/app/views/aggregate.jsx
index 0465a18768..c9555e7858 100644
--- a/src/sentry/static/sentry/app/views/aggregate.jsx
+++ b/src/sentry/static/sentry/app/views/aggregate.jsx
@@ -7,11 +7,14 @@ var Router = require("react-router");
 var api = require("../api");
 var AggregateHeader = require("./aggregate/header");
 var AggregateListStore = require("../stores/aggregateListStore");
+var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var utils = require("../utils");
 
 var AggregateDetails = React.createClass({
   mixins: [
+    BreadcrumbMixin,
     Reflux.listenTo(AggregateListStore, "onAggListChange"),
+    Router.Navigation,
     Router.State
   ],
 
@@ -38,6 +41,12 @@ var AggregateDetails = React.createClass({
     api.request(this.getAggregateDetailsEndpoint(), {
       success: function(data, textStatus, jqXHR) {
         AggregateListStore.loadInitialData([data]);
+
+        this.setBreadcrumbs([
+          <a onClick={this.transitionTo.bind(this, "aggregateDetails", this.getParams(), {})}>
+            {data.title}
+          </a>
+        ]);
       }.bind(this)
     });
   },
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index b4c87212c7..3e3b4a320f 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -10,37 +10,52 @@ var MemberListStore = require("../stores/memberListStore");
 
 var ProjectDetails = React.createClass({
   mixins: [
-    Reflux.connect(MemberListStore, "memberList"),
-    Router.State,
     BreadcrumbMixin,
+    Reflux.connect(MemberListStore, "memberList"),
+    Router.Navigation,
+    Router.State
   ],
 
-  getInitialState: function(){
+  getInitialState(){
     return {
-      memberList: []
+      memberList: [],
+      project: null
     };
   },
 
-  getBreadcrumbNodes: function() {
-    return [
-      <a href="#">Foobar</a>
-    ];
-  },
-
-  componentWillMount: function() {
+  componentWillMount() {
     api.request(this.getMemberListEndpoint(), {
-      success: function(data, textStatus, jqXHR) {
+      success: (data) => {
         MemberListStore.loadInitialData(data);
-      }.bind(this)
+      }
+    });
+
+    api.request(this.getProjectDetailsEndpoint(), {
+      success: (data) => {
+        this.setState({
+          project: data
+        });
+
+        this.setBreadcrumbs([
+          <a onClick={this.transitionTo.bind(this, "projectDetails", this.getParams(), {})}>
+            {data.name}
+          </a>
+        ]);
+      }
     });
   },
 
-  getMemberListEndpoint: function() {
+  getProjectDetailsEndpoint() {
+    var params = this.getParams();
+    return '/projects/' + params.orgId + '/' + params.projectId + '/';
+  },
+
+  getMemberListEndpoint() {
     var params = this.getParams();
     return '/projects/' + params.orgId + '/' + params.projectId + '/members/';
   },
 
-  render: function () {
+  render() {
     return (
       <Router.RouteHandler memberList={this.state.memberList} />
     );
