commit 00680c4a22f0fc066c83982c6ec6d772a89f9d66
Author: Max Bittker <maxbittker@gmail.com>
Date:   Mon Mar 27 16:52:36 2017 -0700

    Committers endpoint (#5122)
    
    * add event-file-committers endpoint
    
    * add release and commit fixtures

diff --git a/CHANGES b/CHANGES
index d6371d4725..26a084ff37 100644
--- a/CHANGES
+++ b/CHANGES
@@ -18,6 +18,7 @@ API Changes
 - Added IssuesResolvedInReleaseEndpoint
 - Added ReleaseDeploysEndpoint
 - Added OrganizationReleaseCommitsEndpoint
+- Added EventFileCommittersEndpoint
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/bin/load-mocks b/bin/load-mocks
index bb701a432c..533c714df5 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -302,6 +302,22 @@ def main(num_events=1, extra_events=False):
                     release.add_project(project)
 
             raw_commits = [
+                {
+                    'key': '5fb7672bee9c461a8aa074f52ed72eddzc9399e7a',
+                    'message': 'modified js view',
+                    'author': (user.name, user.email),
+                    'files': [
+                        ('/sentry/scripts/views.js', 'M'),
+                    ],
+                },
+                {
+                    'key': '6fb7672bee9c469a8aa074f52ed72eddzc9399e7d',
+                    'message': 'modified raven base',
+                    'author': (user.name, user.email),
+                    'files': [
+                        ('/getsentry/src/raven/raven/base.py', 'M'),
+                    ],
+                },
                 {
                     'key': '6fb7672bee9c469a8aa074f52ed72eddc939ae7d',
                     'message': 'Fix widget for real this time\n\nTurns out the sprocket configuration was broken.',
diff --git a/src/sentry/api/endpoints/event_file_committers.py b/src/sentry/api/endpoints/event_file_committers.py
new file mode 100644
index 0000000000..02f2b378e3
--- /dev/null
+++ b/src/sentry/api/endpoints/event_file_committers.py
@@ -0,0 +1,171 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+import operator
+
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import (
+    Release, ReleaseCommit, Commit, CommitFileChange, Event
+)
+from sentry.api.serializers.models.release import get_users_for_commits
+
+from django.db.models import Q
+
+from itertools import izip
+from collections import defaultdict
+
+
+def tokenize_path(path):
+    # TODO(maxbittker) tokenize in a smarter crossplatform way.
+    return reversed(path.split('/'))
+
+
+def score_path_match_length(path_a, path_b):
+    score = 0
+    for a, b in izip(tokenize_path(path_a), tokenize_path(path_b)):
+        if a != b:
+            break
+        score += 1
+    return score
+
+
+class EventFileCommittersEndpoint(ProjectEndpoint):
+
+    def _get_frame_paths(self, event):
+        data = event.data
+        try:
+            frames = data['sentry.interfaces.Stacktrace']['frames']
+        except KeyError:
+            try:
+                frames = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
+            except KeyError:
+                return []  # can't find stacktrace information
+
+        return frames
+
+    def _get_commits(self, project, version):
+        try:
+            commits = Commit.objects.filter(
+                releasecommit=ReleaseCommit.objects.filter(
+                    release=Release.objects.get(
+                        projects=project,
+                        version=version,
+                    ),
+                )
+            )
+        except Release.DoesNotExist:
+            return None
+
+        return list(commits)
+
+    def _get_commit_file_changes(self, commits, path_name_set):
+        # build a single query to get all of the commit file that might match the first n frames
+
+        path_query = reduce(operator.or_, (
+            Q(filename__endswith=next(tokenize_path(path)))
+            for path in path_name_set
+        ))
+
+        query = Q(commit__in=commits) & path_query
+
+        commit_file_change_matches = CommitFileChange.objects.filter(query)
+
+        return list(commit_file_change_matches)
+
+    def _match_commits_frame(self, commit_file_changes, frame):
+        #  find commits that match the run time path the best.
+
+        matching_commits = {}
+        best_score = 0
+        for file_change in commit_file_changes:
+            score = score_path_match_length(file_change.filename, frame['abs_path'])
+            if score > best_score:
+                # reset matches for better match.
+                best_score = score
+                matching_commits = {}
+            if score == best_score:
+                #  we want a list of unique commits that tie for longest match
+                matching_commits[file_change.commit.id] = file_change.commit
+
+        return matching_commits.values()
+
+    def _get_committers(self, annotated_frames, commits):
+        # extract the unique committers and return their serialized sentry accounts
+        committers = defaultdict(int)
+
+        limit = 5
+        for annotated_frame in annotated_frames:
+            if limit == 0:
+                break
+            for commit in annotated_frame['commits']:
+                committers[commit.author.id] += limit
+                limit -= 1
+                if limit == 0:
+                    break
+
+        # organize them by this heuristic (first frame is worth 5 points, second is worth 4, etc.)
+        sorted_committers = sorted(committers, key=committers.get)
+        sentry_user_dict = get_users_for_commits(commits)
+
+        return [sentry_user_dict[author_id] for author_id in sorted_committers]
+
+    def get(self, _, project, event_id):
+        """
+        Retrieve Committer information for an event
+        ```````````````````````````````
+
+        Return commiters on an individual event, plus a per-frame breakdown.
+
+        :pparam string project_slug: the slug of the project the event
+                                     belongs to.
+        :pparam string event_id: the hexadecimal ID of the event to
+                                 retrieve (as reported by the raven client).
+        :auth: required
+        """
+        try:
+            event = Event.objects.get(
+                id=event_id,
+                project_id=project.id,
+            )
+        except Event.DoesNotExist:
+            return Response({'detail': 'Event not found'}, status=404)
+
+        # populate event data
+        Event.objects.bind_nodes([event], 'data')
+
+        commits = self._get_commits(event.project, event.get_tag('sentry:release'))
+        if not commits:
+            return Response({'detail': 'No Commits found for Release'}, status=404)
+
+        frames = self._get_frame_paths(event)
+        frame_limit = 10
+        app_frames = [frame for frame in frames if frame['in_app']][:frame_limit]
+
+        # TODO(maxbittker) return this set instead of annotated frames
+        path_set = {frame['abs_path'] for frame in app_frames}
+
+        file_changes = []
+        if path_set:
+            file_changes = self._get_commit_file_changes(commits, path_set)
+
+        annotated_frames = [{
+            'frame': frame,
+            'commits': self._match_commits_frame(file_changes, frame)
+        } for frame in app_frames]
+
+        committers = self._get_committers(annotated_frames, commits)
+
+        # serialize the commit objects
+        serialized_annotated_frames = [{
+            'frame': frame['frame'],
+            'commits': serialize(frame['commits'])
+        } for frame in annotated_frames]
+
+        data = {
+            # map author ids to sentry user dicts
+            'committers': committers,
+            'annotatedFrames': serialized_annotated_frames
+        }
+        return Response(data)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index dba076067f..88170e3224 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -109,6 +109,7 @@ from .endpoints.user_identity_details import UserIdentityDetailsEndpoint
 from .endpoints.user_index import UserIndexEndpoint
 from .endpoints.user_details import UserDetailsEndpoint
 from .endpoints.user_organizations import UserOrganizationsEndpoint
+from .endpoints.event_file_committers import EventFileCommittersEndpoint
 
 urlpatterns = patterns(
     '',
@@ -296,6 +297,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>[\w-]+)/$',
         ProjectEventDetailsEndpoint.as_view(),
         name='sentry-api-0-project-event-details'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>[\w-]+)/committers/$',
+        EventFileCommittersEndpoint.as_view(),
+        name='sentry-api-0-event-file-committers'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/filters/$',
         ProjectFiltersEndpoint.as_view(),
         name='sentry-api-0-project-filters'),
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index e6ba91e444..5fc54baaa4 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -17,10 +17,14 @@ import warnings
 from django.utils.text import slugify
 from exam import fixture
 from uuid import uuid4
+import os
+from django.utils import timezone
+
 
 from sentry.models import (
     Activity, Event, EventError, EventMapping, Group, Organization,
-    OrganizationMember, OrganizationMemberTeam, Project, Team, User
+    OrganizationMember, OrganizationMemberTeam, Project, Team, User,
+    Release, Commit, ReleaseCommit, CommitAuthor, Repository, CommitFileChange
 )
 
 DEFAULT_EVENT_DATA = {
@@ -45,6 +49,43 @@ DEFAULT_EVENT_DATA = {
     },
     'sentry.interfaces.Stacktrace': {
         'frames': [
+            {
+                'abs_path': 'www/src/sentry/models/foo.py',
+                'context_line': '                        string_max_length=self.string_max_length)',
+                'filename': 'raven/base.py',
+                'function': 'build_msg',
+                'in_app': True,
+                'lineno': 29,
+                'module': 'raven.base',
+                'post_context': [
+                    '                },',
+                    '            })',
+                    '',
+                    "        if 'sentry.interfaces.Stacktrace' in data:",
+                    '            if self.include_paths:'
+                ],
+                'pre_context': [
+                    '',
+                    '            data.update({',
+                    "                'sentry.interfaces.Stacktrace': {",
+                    "                    'frames': get_stack_info(frames,",
+                    '                        list_max_length=self.list_max_length,'],
+                'vars': {
+                    'culprit': 'raven.scripts.runner',
+                    'date': 'datetime.datetime(2013, 2, 14, 20, 6, 33, 479471)',
+                    'event_id': '598fb19363e745ec8be665e6ba88b1b2',
+                    'event_type': 'raven.events.Message',
+                    'frames': '<generator object iter_stack_frames at 0x103fef050>',
+                    'handler': '<raven.events.Message object at 0x103feb710>',
+                    'k': 'sentry.interfaces.Message',
+                    'public_key': None,
+                    'result': {'sentry.interfaces.Message': "{'message': 'This is a test message generated using ``raven test``', 'params': []}"},
+                    'self': '<raven.base.Client object at 0x104397f10>',
+                    'stack': True,
+                    'tags': None,
+                    'time_spent': None,
+                },
+            },
             {
                 'abs_path': '/Users/dcramer/.virtualenvs/sentry/lib/python2.7/site-packages/raven/base.py',
                 'context_line': '                        string_max_length=self.string_max_length)',
@@ -208,6 +249,88 @@ class Fixtures(object):
     def create_project_key(self, project):
         return project.key_set.get_or_create()[0]
 
+    # TODO(maxbittker) make new fixtures less hardcoded
+    def create_release(self, project, user, version=None):
+        if version is None:
+            version = os.urandom(20).encode('hex')
+
+        release = Release.objects.create(
+            version=version,
+            organization_id=project.organization_id,
+        )
+
+        release.add_project(project)
+
+        Activity.objects.create(
+            type=Activity.RELEASE,
+            project=project,
+            ident=version,
+            user=user,
+            data={'version': version},
+        )
+        # add commits
+
+        author = self.create_commit_author(project, user)
+
+        repo = self.create_repo(project)
+
+        self.create_commit(project, repo, author, release)
+
+        return release
+
+    def create_repo(self, project):
+        repo = Repository.objects.create(
+            organization_id=project.organization_id,
+            name='organization-{}'.format(project.name),
+        )
+        return repo
+
+    def create_commit(self, project, repo, author, release):
+        commit = Commit.objects.get_or_create(
+            organization_id=project.organization_id,
+            repository_id=repo.id,
+            key='deadbeef',
+            defaults={
+                'message': 'placeholder commit message',
+                'author': author,
+                'date_added': timezone.now(),
+            }
+        )[0]
+
+        # add it to release
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            release=release,
+            commit=commit,
+            order=1,
+        )
+
+        self.create_commit_file_change(commit, release, project, '/models/foo.py')
+        self.create_commit_file_change(commit, release, project, '/worsematch/foo.py')
+        self.create_commit_file_change(commit, release, project, '/models/other.py')
+
+        return commit
+
+    def create_commit_author(self, project, user):
+        commit_author = CommitAuthor.objects.get_or_create(
+            organization_id=project.organization_id,
+            email=user,
+            defaults={
+                'name': user,
+            }
+        )[0]
+        return commit_author
+
+    def create_commit_file_change(self, commit, release, project, filename):
+        commit_file_change = CommitFileChange.objects.get_or_create(
+            organization_id=project.organization_id,
+            commit=commit,
+            filename=filename,
+            type='M',
+        )
+        return commit_file_change
+
     def create_user(self, email=None, **kwargs):
         if not email:
             email = uuid4().hex + '@example.com'
diff --git a/tests/sentry/api/endpoints/test_event_committers.py b/tests/sentry/api/endpoints/test_event_committers.py
new file mode 100644
index 0000000000..0399587e89
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_event_committers.py
@@ -0,0 +1,64 @@
+from __future__ import absolute_import
+
+from datetime import datetime
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class EventCommittersTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+
+        group = self.create_group(project=project)
+
+        release = self.create_release(
+            project,
+            self.user
+        )
+
+        event = self.create_event(
+            event_id='a',
+            group=group,
+            datetime=datetime(2016, 8, 13, 3, 8, 25),
+            tags={'sentry:release': release.version}
+        )
+
+        url = reverse('sentry-api-0-event-file-committers', kwargs={
+            'event_id': event.id,
+            'project_slug': event.project.slug,
+            'organization_slug': event.project.organization.slug,
+        })
+
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data['committers']) == 1
+        assert response.data['committers'][0]['username'] == 'admin@localhost'
+
+        assert len(response.data['annotatedFrames']) == 1
+        assert len(response.data['annotatedFrames'][0]['commits']) == 1
+        assert response.data['annotatedFrames'][0]['commits'][0]['author']['username'] == 'admin@localhost'
+        # TODO(maxbittker) test more edge cases here
+
+    def test_no_commits(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        event = self.create_event(
+            event_id='a',
+            group=group,
+            datetime=datetime(2016, 8, 13, 3, 8, 25),
+        )
+
+        url = reverse('sentry-api-0-event-file-committers', kwargs={
+            'event_id': event.id,
+            'project_slug': event.project.slug,
+            'organization_slug': event.project.organization.slug,
+        })
+
+        response = self.client.get(url, format='json')
+        assert response.status_code == 404, response.content
+        assert response.data['detail'] == "No Commits found for Release"
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 30f0992393..687a0b7bf0 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -41,7 +41,7 @@ class StacktraceTest(TestCase):
         # objects
         event = self.event
         interface = Stacktrace.to_python(event.data['sentry.interfaces.Stacktrace'])
-        assert len(interface.frames) == 1
+        assert len(interface.frames) == 2
         assert interface == event.interfaces['sentry.interfaces.Stacktrace']
 
     def test_requires_filename(self):
