commit b11e6484a0eebf2694e0e5e701f575759c970e81
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Sun Mar 23 21:56:20 2014 -0700

    Make Plugins testable

diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index de5f46be86..072759511d 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -528,6 +528,12 @@ class IPlugin(local):
         """
         return []
 
+    def is_testable(self, **kwargs):
+        """
+        Returns True if this plugin is able to be tested.
+        """
+        return hasattr(self, 'test_configuration')
+
 
 class Plugin(IPlugin):
     """
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 4d976107e6..79337ce793 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -98,6 +98,11 @@ class NotificationPlugin(Plugin):
                 return False
         return True
 
+    def test_configuration(self, project):
+        from sentry.utils.samples import create_sample_event
+        event = create_sample_event(project, default='python')
+        return self.post_process(event.group, event, is_new=True, is_sample=False)
+
     ## plugin hooks
 
     def post_process(self, group, event, is_new, is_sample, **kwargs):
@@ -107,7 +112,7 @@ class NotificationPlugin(Plugin):
         if not self.should_notify(group, event):
             return
 
-        self.notify_users(group, event)
+        return self.notify_users(group, event)
 
 # Backwards-compatibility
 NotifyConfigurationForm = NotificationConfigurationForm
diff --git a/src/sentry/templates/sentry/partial/_form.html b/src/sentry/templates/sentry/partial/_form.html
index d228d7d391..2e0a4ef52e 100644
--- a/src/sentry/templates/sentry/partial/_form.html
+++ b/src/sentry/templates/sentry/partial/_form.html
@@ -6,6 +6,9 @@
     {% include "sentry/partial/form_base.html" %}
 
     <fieldset class="form-actions">
-        <button type="submit" class="btn btn-primary">{% if submit_label %}{{ submit_label }}{% else %}{% trans "Save Changes" %}{% endif %}</button>
+        <button type="submit" class="btn btn-primary" name="action_save">{% if submit_label %}{{ submit_label }}{% else %}{% trans "Save Changes" %}{% endif %}</button>
+        {% if plugin.is_testable %}
+        <button type="submit" class="btn" name="action_test" {% if not plugin_is_configured %}disabled{% endif %}>{% trans "Test Configuration" %}</button>
+        {% endif %}
     </fieldset>
 </form>
diff --git a/src/sentry/templates/sentry/plugins/project_configuration.html b/src/sentry/templates/sentry/plugins/project_configuration.html
index c209373b29..b3da014a46 100644
--- a/src/sentry/templates/sentry/plugins/project_configuration.html
+++ b/src/sentry/templates/sentry/plugins/project_configuration.html
@@ -1,3 +1,8 @@
 {% load i18n %}
 
 {% include "sentry/partial/_form.html" %}
+
+{% if plugin_test_results %}
+<h4>Test Results</h4>
+<pre>{{ plugin_test_results }}</pre>
+{% endif %}
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index 5c50665bac..b36b27a930 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -12,14 +12,23 @@ from sentry.models import Group
 from sentry.utils import json
 
 
-def load_data(platform):
-    json_path = os.path.join(DATA_ROOT, 'samples', '%s.json' % (platform.encode('utf-8'),))
+def load_data(platform, default=None):
+    data = None
+    for platform in (platform, default):
+        if platform is None:
+            continue
 
-    if not os.path.exists(json_path):
-        return
+        json_path = os.path.join(DATA_ROOT, 'samples', '%s.json' % (platform.encode('utf-8'),))
+
+        if not os.path.exists(json_path):
+            continue
 
-    with open(json_path) as fp:
-        data = json.loads(fp.read())
+        with open(json_path) as fp:
+            data = json.loads(fp.read())
+            break
+
+    if data is None:
+        return
 
     data['platform'] = platform
     data['message'] = 'This is an example %s exception' % (
@@ -49,16 +58,16 @@ def load_data(platform):
     return data
 
 
-def create_sample_event(project, platform=None):
+def create_sample_event(project, platform=None, default=None):
     if not platform:
         platform = project.platform
 
-    if not platform:
+    if not platform and not default:
         return
 
     platform = PLATFORM_ROOTS.get(platform, platform)
 
-    data = load_data(platform)
+    data = load_data(platform, default)
 
     if not data:
         return
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index fbecc51328..911626b0fd 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -181,6 +181,8 @@ def plugin_config(plugin, project, request):
         form_class = plugin.site_conf_form
         template = plugin.site_conf_template
 
+    test_results = None
+
     initials = plugin.get_form_initial(project)
     for field in form_class.base_fields:
         key = '%s:%s' % (plugin_key, field)
@@ -197,14 +199,28 @@ def plugin_config(plugin, project, request):
         prefix=plugin_key
     )
     if form.is_valid():
-        for field, value in form.cleaned_data.iteritems():
-            key = '%s:%s' % (plugin_key, field)
-            if project:
-                ProjectOption.objects.set_value(project, key, value)
-            else:
-                Option.objects.set_value(key, value)
-
-        return ('redirect', None)
+        if 'action_save' in request.POST:
+            for field, value in form.cleaned_data.iteritems():
+                key = '%s:%s' % (plugin_key, field)
+                if project:
+                    ProjectOption.objects.set_value(project, key, value)
+                else:
+                    Option.objects.set_value(key, value)
+
+            return ('redirect', None)
+        elif 'action_test' in request.POST and plugin.is_testable():
+            try:
+                test_results = plugin.test_configuration(project)
+            except Exception as exc:
+                if hasattr(exc, 'read') and callable(exc.read):
+                    test_results = '%s\n%s' % (exc, exc.read())
+                else:
+                    test_results = exc
+
+    if hasattr(plugin, 'is_configured'):
+        is_configured = plugin.is_configured(project)
+    else:
+        is_configured = True
 
     from django.template.loader import render_to_string
     return ('display', mark_safe(render_to_string(template, {
@@ -212,6 +228,8 @@ def plugin_config(plugin, project, request):
         'request': request,
         'plugin': plugin,
         'plugin_description': plugin.get_description() or '',
+        'plugin_test_results': test_results,
+        'plugin_is_configured': is_configured,
     }, context_instance=RequestContext(request))))
 
 
