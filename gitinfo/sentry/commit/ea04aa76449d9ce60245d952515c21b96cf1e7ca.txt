commit ea04aa76449d9ce60245d952515c21b96cf1e7ca
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 13 22:32:11 2012 -0800

    Add tracking of global project statistics and basic project overview page per user

diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index 1eab00636a..4a16597272 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -128,9 +128,5 @@ import logging
 logger = logging.getLogger()
 logger.setLevel(logging.ERROR)
 
-# Configure South logger
-logger = logging.getLogger('south')
-logger.setLevel(logging.DEBUG)
-
 # Configure default sentry logging
 setup_logging(SentryHandler())
diff --git a/sentry/interfaces.py b/sentry/interfaces.py
index c5442eebcc..64ff5bc6e9 100644
--- a/sentry/interfaces.py
+++ b/sentry/interfaces.py
@@ -380,6 +380,8 @@ class Http(Interface):
 
 
 class Template(Interface):
+    score = 1001
+
     def __init__(self, filename, context_line, lineno, pre_context=None, post_context=None,
                  abs_path=None):
         self.abs_path = abs_path
diff --git a/sentry/manager.py b/sentry/manager.py
index 22c08dc4f6..ca7eb1273a 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -24,8 +24,7 @@ from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
 from sentry.utils import get_db_engine
 from sentry.utils.charts import has_charts
-from sentry.utils.compat.db import connections
-from sentry.utils.dates import utc_to_local
+from sentry.utils.dates import utc_to_local, get_sql_date_trunc
 from sentry.queue.client import delay
 from sentry.queue.tasks.index import index_event
 
@@ -94,18 +93,6 @@ class ModuleProxyCache(dict):
 
 
 class ChartMixin(object):
-    def _get_date_trunc(self, col, db='default'):
-        conn = connections[db]
-
-        engine = get_db_engine(db)
-        # TODO: does extract work for sqlite?
-        if engine.startswith('oracle'):
-            method = conn.ops.date_trunc_sql('hh24', col)
-        else:
-            method = conn.ops.date_trunc_sql('hour', col)
-
-        return method
-
     def get_chart_data(self, instance, max_days=90):
         if hasattr(instance, '_state'):
             db = instance._state.db
@@ -116,10 +103,10 @@ class ChartMixin(object):
             return []
 
         hours = max_days * 24
-        today = datetime.datetime.utcnow().replace(microsecond=0, second=0, minute=0)
+        today = datetime.datetime.now().replace(microsecond=0, second=0, minute=0)
         min_date = today - datetime.timedelta(hours=hours)
 
-        method = self._get_date_trunc('date', db)
+        method = get_sql_date_trunc('date', db)
 
         chart_qs = list(instance.messagecountbyminute_set\
                           .filter(date__gte=min_date)\
@@ -445,6 +432,17 @@ class GroupManager(models.Manager, ChartMixin):
                 time_spent_count=time_spent and 1 or 0,
             )
 
+        affected = project.projectcountbyminute_set.filter(
+            date=normalized_datetime,
+        ).update(**update_kwargs)
+        if not affected:
+            project.projectcountbyminute_set.create(
+                date=normalized_datetime,
+                times_seen=1,
+                time_spent_total=time_spent or 0,
+                time_spent_count=time_spent and 1 or 0,
+            )
+
         http = event.interfaces.get('sentry.interfaces.Http')
         if http:
             url = http.url
diff --git a/sentry/migrations/0042_auto__add_projectcountbyminute__add_unique_projectcountbyminute_projec.py b/sentry/migrations/0042_auto__add_projectcountbyminute__add_unique_projectcountbyminute_projec.py
new file mode 100644
index 0000000000..0f165c2312
--- /dev/null
+++ b/sentry/migrations/0042_auto__add_projectcountbyminute__add_unique_projectcountbyminute_projec.py
@@ -0,0 +1,231 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'ProjectCountByMinute'
+        db.create_table('sentry_projectcountbyminute', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('project', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Project'], null=True)),
+            ('date', self.gf('django.db.models.fields.DateTimeField')()),
+            ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
+            ('time_spent_total', self.gf('django.db.models.fields.FloatField')(default=0)),
+            ('time_spent_count', self.gf('django.db.models.fields.IntegerField')(default=0)),
+        ))
+        db.send_create_signal('sentry', ['ProjectCountByMinute'])
+
+        # Adding unique constraint on 'ProjectCountByMinute', fields ['project', 'date']
+        db.create_unique('sentry_projectcountbyminute', ['project_id', 'date'])
+
+
+    def backwards(self, orm):
+        
+        # Removing unique constraint on 'ProjectCountByMinute', fields ['project', 'date']
+        db.delete_unique('sentry_projectcountbyminute', ['project_id', 'date'])
+
+        # Deleting model 'ProjectCountByMinute'
+        db.delete_table('sentry_projectcountbyminute')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 4bc8c3b5c2..07a94a64d4 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -517,6 +517,23 @@ class MessageCountByMinute(Model):
         return u'group_id=%s, times_seen=%s, date=%s' % (self.group_id, self.times_seen, self.date)
 
 
+class ProjectCountByMinute(Model):
+    """
+    Stores the total number of messages seen by a project at N minute intervals.
+
+    e.g. if it happened at 08:34:55 the time would be normalized to 08:30:00
+    """
+
+    project = models.ForeignKey(Project, null=True)
+    date = models.DateTimeField()  # normalized to HH:MM:00
+    times_seen = models.PositiveIntegerField(default=0)
+    time_spent_total = models.FloatField(default=0)
+    time_spent_count = models.IntegerField(default=0)
+
+    class Meta:
+        unique_together = (('project', 'date'),)
+
+
 class SearchDocument(Model):
     project = models.ForeignKey(Project)
     group = models.ForeignKey(Group)
diff --git a/sentry/templates/sentry/admin/base.html b/sentry/templates/sentry/admin/base.html
index 94c07c5318..4eb808f044 100644
--- a/sentry/templates/sentry/admin/base.html
+++ b/sentry/templates/sentry/admin/base.html
@@ -14,6 +14,7 @@
 {% block sidebar %}
     <h6>{% trans "Overview" %}</h6>
     <ul class="nav nav-tabs nav-stacked">
+        <li{% block admin-nav-projects %}{% endblock %}><a href="{% url sentry-admin-projects %}">{% trans "Projects" %}</a></li>
         <li{% block admin-nav-users %}{% endblock %}><a href="{% url sentry-admin-users %}">{% trans "Users" %}</a></li>
     </ul>
 
diff --git a/sentry/templates/sentry/admin/projects/list.html b/sentry/templates/sentry/admin/projects/list.html
new file mode 100644
index 0000000000..8cdd73c032
--- /dev/null
+++ b/sentry/templates/sentry/admin/projects/list.html
@@ -0,0 +1,63 @@
+{% extends "sentry/admin/base.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+{% load sentry_admin_helpers %}
+
+{% block title %}{% trans "Manage Projects" %} | {{ block.super }}{% endblock %}
+
+{% block admin-nav-projects %} class="active"{% endblock %}
+
+{% block breadcrumb %}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-admin-projects %}">{% trans "Projects" %}</a></li>
+{% endblock %}
+
+{% block page_header %}
+{% endblock %}
+{% block main %}
+    {% paginate project_list from request as project_list per_page 50 %}
+
+    <section class="body">
+        {% if project_list.objects %}
+            {{ project_list.paging }}
+
+            <table class="table table-bordered">
+                <colgroup>
+                    <col>
+                    <col style="width:150px;">
+                    <col style="width:150px;">
+                    <col style="width:50px;">
+                </colgroup>
+                <thead>
+                    <tr>
+                        <th>{% trans "Project" %}</th>
+                        <th style="text-align:center;">{% trans "Daily Events" %}</th>
+                        <th style="text-align:center;">{% trans "Last Event" %}</th>
+                    </tr>
+                </thead>
+                <tbody>
+                    {% for project in project_list.objects %}
+                        <tr>
+                            <td>
+                                {{ project.name }} <a href="{% url sentry project.pk %}">[view]</a>
+                                </a>
+                            </td>
+                            <td style="text-align:center; vertical-align:middle;">
+                                <em>~{{ project|avg_events_per_day }}</em>
+                            </td>
+                            <td style="text-align:center; vertical-align:middle;">
+                                {{ project.last_event|timesince }}
+                            </td>
+                        </tr>
+                    {% endfor %}
+                </tbody>
+            </table>
+
+            {{ project_list.paging }}
+        {% else %}
+            <p class="alert alert-notice">{% trans "There are no active projects in Sentry." %}</p>
+        {% endif %}
+
+    </section>
+{% endblock %}
diff --git a/sentry/templates/sentry/admin/users/list.html b/sentry/templates/sentry/admin/users/list.html
index 5c5c5a40fe..9cc84cd249 100644
--- a/sentry/templates/sentry/admin/users/list.html
+++ b/sentry/templates/sentry/admin/users/list.html
@@ -64,7 +64,7 @@
                             {{ user.last_login|date }}
                         </td>
                         <td style="text-align:center; vertical-align:middle;">
-                            {{ user.num_projects }}
+                            <a href="{% url sentry-admin-list-user-projects user.pk %}">{{ user.num_projects }}</a>
                         </td>
                     </tr>
                 {% endfor %}
diff --git a/sentry/templates/sentry/admin/users/list_projects.html b/sentry/templates/sentry/admin/users/list_projects.html
new file mode 100644
index 0000000000..fef21351a0
--- /dev/null
+++ b/sentry/templates/sentry/admin/users/list_projects.html
@@ -0,0 +1,60 @@
+{% extends "sentry/admin/users/edit.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+{% load sentry_admin_helpers %}
+
+{% block title %}{% trans "Projects" %} | {{ block.super }}{% endblock %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-admin-list-user-projects the_user.pk %}">{% trans "Projects" %}</a></li>
+{% endblock %}
+
+{% block main %}
+    {% paginate project_list from request as project_list per_page 50 %}
+
+    <section class="body">
+        {% if project_list.objects %}
+            {{ project_list.paging }}
+
+            <table class="table table-bordered">
+                <colgroup>
+                    <col>
+                    <col style="width:150px;">
+                    <col style="width:150px;">
+                    <col style="width:50px;">
+                </colgroup>
+                <thead>
+                    <tr>
+                        <th>{% trans "Project" %}</th>
+                        <th style="text-align:center;">{% trans "Daily Events" %}</th>
+                        <th style="text-align:center;">{% trans "Last Event" %}</th>
+                    </tr>
+                </thead>
+                <tbody>
+                    {% for project in project_list.objects %}
+                        <tr>
+                            <td>
+                                {{ project.name }} <a href="{% url sentry project.pk %}">[view]</a>
+                                </a>
+                            </td>
+                            <td style="text-align:center; vertical-align:middle;">
+                                <em>~{{ project|avg_events_per_day }}</em>
+                            </td>
+                            <td style="text-align:center; vertical-align:middle;">
+                                {{ project.last_event|timesince }}
+                            </td>
+                        </tr>
+                    {% endfor %}
+                </tbody>
+            </table>
+
+            {{ project_list.paging }}
+        {% else %}
+            <p class="alert alert-notice">{% trans "There are no active projects for this user." %}</p>
+        {% endif %}
+
+    </section>
+{% endblock %}
diff --git a/sentry/templates/sentry/layout.html b/sentry/templates/sentry/layout.html
index 093def48c9..75de87abc3 100644
--- a/sentry/templates/sentry/layout.html
+++ b/sentry/templates/sentry/layout.html
@@ -89,7 +89,7 @@
             <div class="container">
                 {% block footer %}
                     Sentry {% sentry_version %} | Conjured up by the <a href="http://code.disqus.com">DISQUS</a> team and other noble <a href="https://github.com/dcramer/sentry/contributors">sorcerers</a>. | Sentry is <a href="https://github.com/dcramer/sentry">Open Source Software</a>
-                {% endblock %
+                {% endblock %}
             </div>
         </footer>
         {% endblock %}
diff --git a/sentry/templatetags/sentry_admin_helpers.py b/sentry/templatetags/sentry_admin_helpers.py
new file mode 100644
index 0000000000..6518732557
--- /dev/null
+++ b/sentry/templatetags/sentry_admin_helpers.py
@@ -0,0 +1,27 @@
+"""
+sentry.templatetags.sentry_admin_helpers
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django import template
+
+from sentry.conf import settings
+
+register = template.Library()
+
+
+@register.filter
+def avg_events_per_day(project):
+    """
+    Project is expected to have already been annotated with avg_events_per_n
+    and n_value properties.
+    """
+    if not project.avg_events_per_n:
+        per_day = 0
+    else:
+        n_per_hour = (60 / settings.MINUTE_NORMALIZATION)
+        per_day = int(project.avg_events_per_n / project.n_value) - (project.n_value % n_per_hour)
+
+    return per_day
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index df8680d0ff..f42d736925 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -1,3 +1,10 @@
+"""
+sentry.templatetags.sentry_helpers
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
 # XXX: Import django-paging's template tags so we dont have to worry about
 #      INSTALLED_APPS
 from django import template
diff --git a/sentry/utils/dates.py b/sentry/utils/dates.py
index c9fd6b640a..01627a13ad 100644
--- a/sentry/utils/dates.py
+++ b/sentry/utils/dates.py
@@ -8,6 +8,8 @@ sentry.utils.dates
 import pytz
 
 from django.conf import settings
+from django.db import connections
+from sentry.utils import get_db_engine
 
 
 def utc_to_local(dt):
@@ -18,3 +20,16 @@ def utc_to_local(dt):
 def local_to_utc(dt):
     tz = pytz.timezone(settings.TIME_ZONE)
     return dt.replace(tzinfo=tz).astimezone(pytz.utc).replace(tzinfo=None)
+
+
+def get_sql_date_trunc(col, db='default'):
+    conn = connections[db]
+
+    engine = get_db_engine(db)
+    # TODO: does extract work for sqlite?
+    if engine.startswith('oracle'):
+        method = conn.ops.date_trunc_sql('hh24', col)
+    else:
+        method = conn.ops.date_trunc_sql('hour', col)
+
+    return method
diff --git a/sentry/web/frontend/admin.py b/sentry/web/frontend/admin.py
index 65e2a42327..2717089df1 100644
--- a/sentry/web/frontend/admin.py
+++ b/sentry/web/frontend/admin.py
@@ -15,7 +15,7 @@ from django.core.context_processors import csrf
 from django.core.mail import send_mail
 from django.core.urlresolvers import reverse
 from django.db import transaction
-from django.db.models import Sum, Count
+from django.db.models import Sum, Count, Max
 from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 from djkombu.models import Queue
@@ -48,12 +48,28 @@ def configure_plugin(request, slug):
 
 
 @requires_admin
-def manage_users(request):
-    if not request.user.has_perm('auth.can_add_user'):
-        return HttpResponseRedirect(reverse('sentry'))
+def manage_projects(request):
+    project_list = Project.objects.filter(
+        status=0,
+    ).exclude(
+        projectcountbyminute__date__lte=datetime.datetime.now() - datetime.timedelta(days=30),
+    ).annotate(
+        last_event=Max('messagecountbyminute__date'),
+        avg_events_per_n=Sum('projectcountbyminute__times_seen'),
+        n_value=Count('projectcountbyminute__times_seen')
+    ).order_by('-date_added')
+
+    context = {
+        'project_list': project_list,
+    }
 
+    return render_to_response('sentry/admin/projects/list.html', context, request)
+
+
+@requires_admin
+def manage_users(request):
     users = User.objects.annotate(num_projects=Count('sentry_project_set'))\
-                .order_by('-last_login')
+                .order_by('-date_joined')
 
     return render_to_response('sentry/admin/users/list.html', {
         'user_list': users,
@@ -169,6 +185,32 @@ def remove_user(request, user_id):
     return render_to_response('sentry/admin/users/remove.html', context, request)
 
 
+@requires_admin
+def list_user_projects(request, user_id):
+    try:
+        user = User.objects.get(pk=user_id)
+    except User.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-admin-users'))
+
+    project_list = Project.objects.filter(
+        status=0,
+        member_set__user=user,
+    ).exclude(
+        projectcountbyminute__date__lte=datetime.datetime.now() - datetime.timedelta(days=30),
+    ).annotate(
+        last_event=Max('messagecountbyminute__date'),
+        avg_events_per_n=Sum('projectcountbyminute__times_seen'),
+        n_value=Count('projectcountbyminute__times_seen')
+    ).order_by('-date_added')
+
+    context = {
+        'project_list': project_list,
+        'the_user': user,
+    }
+
+    return render_to_response('sentry/admin/users/list_projects.html', context, request)
+
+
 @requires_admin
 def status_env(request):
     config = []
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 589c2ad221..02c2d5ed72 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -61,10 +61,18 @@ urlpatterns = patterns('',
     url(r'^manage/status/packages/$', admin.status_packages, name='sentry-admin-packages-status'),
     url(r'^manage/status/queue/$', admin.status_queue, name='sentry-admin-queue-status'),
     url(r'^manage/stats/$', admin.stats, name='sentry-admin-stats'),
+
+    # Admin - Projects
+    url(r'^manage/projects/$', admin.manage_projects, name='sentry-admin-projects'),
+
+    # Admin - Users
     url(r'^manage/users/$', admin.manage_users, name='sentry-admin-users'),
     url(r'^manage/users/new/$', admin.create_new_user, name='sentry-admin-new-user'),
     url(r'^manage/users/(?P<user_id>\d+)/$', admin.edit_user, name='sentry-admin-edit-user'),
     url(r'^manage/users/(?P<user_id>\d+)/remove/$', admin.remove_user, name='sentry-admin-remove-user'),
+    url(r'^manage/users/(?P<user_id>\d+)/projects/$', admin.list_user_projects, name='sentry-admin-list-user-projects'),
+
+    # Admin - Plugins
     url(r'^manage/plugins/(?P<slug>[\w_-]+)/$', admin.configure_plugin, name='sentry-admin-configure-plugin'),
 
     # API / JS
