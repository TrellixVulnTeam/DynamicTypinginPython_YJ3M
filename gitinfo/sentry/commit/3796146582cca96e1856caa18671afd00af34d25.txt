commit 3796146582cca96e1856caa18671afd00af34d25
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Thu Oct 25 15:35:15 2018 -0700

    feat(snuba): Add `use_group_id_column` option (#10269)

diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 96a6b83edb..2cf4586b8a 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -135,6 +135,7 @@ register('vsts.client-id', flags=FLAG_PRIORITIZE_DISK)
 register('vsts.client-secret', flags=FLAG_PRIORITIZE_DISK)
 
 # Snuba
+register('snuba.use_group_id_column', default=False)
 register('snuba.search.max-pre-snuba-candidates', default=500)
 register('snuba.search.chunk-growth-rate', default=1.5)
 register('snuba.search.max-chunk-size', default=2000)
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index d2d1742e4a..10023ba9f1 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -14,7 +14,7 @@ import urllib3
 from django.conf import settings
 from django.db.models import Q
 
-from sentry import quotas
+from sentry import quotas, options
 from sentry.event_manager import HASH_RE
 from sentry.models import (
     Environment, Group, GroupHash, GroupHashTombstone, GroupRelease,
@@ -127,17 +127,21 @@ def raw_query(start, end, groupby=None, conditions=None, filter_keys=None,
         if start > end:
             raise QueryOutsideRetentionError
 
-    # If the grouping, aggregation, or any of the conditions reference `issue`
-    # we need to fetch the issue definitions (issue -> fingerprint hashes)
-    aggregate_cols = [a[1] for a in aggregations]
-    condition_cols = all_referenced_columns(conditions)
-    all_cols = groupby + aggregate_cols + condition_cols + selected_columns
-    get_issues = 'issue' in all_cols
+    use_group_id_column = options.get('snuba.use_group_id_column')
+    issues = None
+    if not use_group_id_column:
+        # If the grouping, aggregation, or any of the conditions reference `issue`
+        # we need to fetch the issue definitions (issue -> fingerprint hashes)
+        aggregate_cols = [a[1] for a in aggregations]
+        condition_cols = all_referenced_columns(conditions)
+        all_cols = groupby + aggregate_cols + condition_cols + selected_columns
+        get_issues = 'issue' in all_cols
 
-    with timer('get_project_issues'):
-        issues = get_project_issues(project_ids, filter_keys.get('issue')) if get_issues else None
+        if get_issues:
+            with timer('get_project_issues'):
+                issues = get_project_issues(project_ids, filter_keys.get('issue'))
 
-    start, end = shrink_time_window(issues, start, end)
+    start, end = shrink_time_window(filter_keys.get('issue'), start, end)
 
     # if `shrink_time_window` pushed `start` after `end` it means the user queried
     # a Group for T1 to T2 when the group was only active for T3 to T4, so the query
@@ -155,6 +159,7 @@ def raw_query(start, end, groupby=None, conditions=None, filter_keys=None,
         'project': project_ids,
         'aggregations': aggregations,
         'granularity': rollup,
+        'use_group_id_column': use_group_id_column,
         'issues': issues,
         'arrayjoin': arrayjoin,
         'limit': limit,
@@ -464,8 +469,7 @@ def insert_raw(data):
 
 def shrink_time_window(issues, start, end):
     if issues and len(issues) == 1:
-        group_id = issues[0][0]
-        group = Group.objects.get(pk=group_id)
+        group = Group.objects.get(pk=issues[0])
         start = max(start, naiveify_datetime(group.first_seen) - timedelta(minutes=5))
         end = min(end, naiveify_datetime(group.last_seen) + timedelta(minutes=5))
 
diff --git a/tests/snuba/test_snuba.py b/tests/snuba/test_snuba.py
index 7c381b087f..77a74ac9a9 100644
--- a/tests/snuba/test_snuba.py
+++ b/tests/snuba/test_snuba.py
@@ -71,11 +71,11 @@ class SnubaTest(SnubaTestCase):
         assert self.group.id in group_ids
         assert None not in group_ids
 
-    def _insert_event_for_time(self, ts, hash='a' * 32):
+    def _insert_event_for_time(self, ts, hash='a' * 32, group_id=None):
         self.snuba_insert({
             'event_id': uuid.uuid4().hex,
             'primary_hash': hash,
-            'group_id': int(hash[:16], 16),
+            'group_id': group_id if group_id else int(hash[:16], 16),
             'project_id': self.project.id,
             'message': 'message',
             'platform': 'python',
@@ -173,3 +173,34 @@ class SnubaTest(SnubaTestCase):
                     'project_id': [self.project.id],
                 },
             ) == {}
+
+    def test_use_group_id(self):
+        base_time = datetime.utcnow()
+        group = self.create_group()
+        self._insert_event_for_time(base_time, group_id=group.id)
+
+        with self.options({'snuba.use_group_id_column': True}):
+            # verify filter_keys and aggregation
+            assert snuba.query(
+                start=base_time - timedelta(days=1),
+                end=base_time + timedelta(days=1),
+                groupby=['issue'],
+                filter_keys={
+                    'project_id': [self.project.id],
+                    'issue': [group.id]
+                },
+            ) == {group.id: 1}
+
+            # verify raw_query selecting issue row
+            assert snuba.raw_query(
+                start=base_time - timedelta(days=1),
+                end=base_time + timedelta(days=1),
+                selected_columns=['issue', 'timestamp'],
+                filter_keys={
+                    'project_id': [self.project.id],
+                    'issue': [group.id]
+                },
+            )['data'] == [{
+                'issue': group.id,
+                'timestamp': base_time.strftime('%Y-%m-%dT%H:%M:%S+00:00'),
+            }]
diff --git a/tests/snuba/test_util.py b/tests/snuba/test_util.py
index b3376c1db2..7e4e128ff0 100644
--- a/tests/snuba/test_util.py
+++ b/tests/snuba/test_util.py
@@ -67,15 +67,11 @@ class SnubaUtilTest(TestCase):
         group2 = self.create_group()
         GroupHash.objects.create(project_id=group2.project_id, group=group2, hash='b' * 32)
 
-        # issues is a list like [(gid, pid, [(hash, tombstone_date), ...]), ...]
-        issues = [(group1.id, group1.project_id, [('a' * 32, None)])]
+        issues = [group1.id]
         assert snuba.shrink_time_window(issues, year_ago, year_ahead) == \
             (now - timedelta(hours=1, minutes=5), now + timedelta(minutes=5))
 
-        issues = [
-            (group1.id, group1.project_id, [('a' * 32, None)]),
-            (group2.id, group2.project_id, [('b' * 32, None)]),
-        ]
+        issues = [group1.id, group2.id]
         assert snuba.shrink_time_window(issues, year_ago, year_ahead) == (year_ago, year_ahead)
 
         with pytest.raises(snuba.QueryOutsideGroupActivityError):
