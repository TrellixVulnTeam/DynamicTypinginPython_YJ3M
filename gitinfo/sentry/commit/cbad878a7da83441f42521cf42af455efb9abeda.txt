commit cbad878a7da83441f42521cf42af455efb9abeda
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Mar 29 13:07:46 2015 -0700

    Globalize "has system frames" property

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 18c7633452..169cff52b0 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -226,10 +226,31 @@ class Exception(Interface):
 
     def get_context(self, event, is_public=False, **kwargs):
         newest_first = is_newest_frame_first(event)
+
+        system_frames = False
+        app_frames = False
+        for exc in self.values:
+            if not exc.stacktrace:
+                continue
+
+            for frame in exc.stacktrace.frames:
+                if frame.in_app:
+                    app_frames = True
+                else:
+                    system_frames = True
+
+                if (app_frames and system_frames):
+                    break
+
+        # if there is a mix of frame styles then we indicate that system frames
+        # are present and should be represented as a split
+        has_system_frames = app_frames and system_frames
+
         context_kwargs = {
             'event': event,
             'is_public': is_public,
             'newest_first': newest_first,
+            'has_system_frames': has_system_frames,
         }
 
         exceptions = []
@@ -255,7 +276,7 @@ class Exception(Interface):
 
         return {
             'newest_first': newest_first,
-            'system_frames': sum(e['stacktrace'].get('system_frames', 0) for e in exceptions),
+            'system_frames': has_system_frames,
             'exceptions': exceptions,
             'stacktrace': self.get_stacktrace(event, newest_first=newest_first),
             'first_exc_omitted': first_exc_omitted,
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index f1fed1ee70..b2f9973efb 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -469,9 +469,6 @@ class Stacktrace(Interface):
     def get_path(self):
         return 'sentry.interfaces.Stacktrace'
 
-    def has_app_frames(self):
-        return any(f.in_app is not None for f in self.frames)
-
     def compute_hashes(self, platform):
         system_hash = self.get_hash(system_frames=True)
         if not system_hash:
@@ -499,7 +496,8 @@ class Stacktrace(Interface):
         return output
 
     def get_context(self, event, is_public=False, newest_first=None,
-                    with_stacktrace=True, **kwargs):
+                    with_stacktrace=True, has_system_frames=None, **kwargs):
+
         system_frames = 0
         frames = []
         for frame in self.frames:
@@ -511,8 +509,11 @@ class Stacktrace(Interface):
         if len(frames) == system_frames:
             system_frames = 0
 
-        # if theres no system frames, pretend they're all part of the app
-        if not system_frames:
+        if has_system_frames is None:
+            has_system_frames = bool(system_frames)
+
+        # if there are no system frames, pretend they're all part of the app
+        if has_system_frames:
             for frame in frames:
                 frame['in_app'] = True
 
@@ -529,7 +530,7 @@ class Stacktrace(Interface):
         context = {
             'is_public': is_public,
             'newest_first': newest_first,
-            'system_frames': system_frames,
+            'system_frames': has_system_frames,
             'event': event,
             'frames': frames,
             'stack_id': 'stacktrace_1',
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index b52fa83b12..247a370add 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -82,6 +82,93 @@ ValueError: hello world
         result = self.interface.to_html(self.event)
         assert result
 
+    def test_context_with_mixed_frames(self):
+        inst = Exception.to_python(dict(values=[{
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': [{
+                'filename': 'foo/baz.py',
+                'lineno': 1,
+                'in_app': True,
+            }]},
+        }, {
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': [{
+                'filename': 'foo/baz.py',
+                'lineno': 1,
+                'in_app': False,
+            }]},
+        }]))
+
+        event = self.create_event(data={
+            'sentry.interfaces.Exception': inst.to_json(),
+        })
+        context = inst.get_context(event)
+        assert context['system_frames']
+        assert context['exceptions'][0]['stacktrace']['system_frames']
+        assert context['exceptions'][1]['stacktrace']['system_frames']
+
+    def test_context_with_only_system_frames(self):
+        inst = Exception.to_python(dict(values=[{
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': [{
+                'filename': 'foo/baz.py',
+                'lineno': 1,
+                'in_app': False,
+            }]},
+        }, {
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': [{
+                'filename': 'foo/baz.py',
+                'lineno': 1,
+                'in_app': False,
+            }]},
+        }]))
+
+        event = self.create_event(data={
+            'sentry.interfaces.Exception': inst.to_json(),
+        })
+        context = inst.get_context(event)
+        assert not context['system_frames']
+        assert not context['exceptions'][0]['stacktrace']['system_frames']
+        assert not context['exceptions'][1]['stacktrace']['system_frames']
+
+    def test_context_with_only_app_frames(self):
+        inst = Exception.to_python(dict(values=[{
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': [{
+                'filename': 'foo/baz.py',
+                'lineno': 1,
+                'in_app': True,
+            }]},
+        }, {
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': [{
+                'filename': 'foo/baz.py',
+                'lineno': 1,
+                'in_app': True,
+            }]},
+        }]))
+
+        event = self.create_event(data={
+            'sentry.interfaces.Exception': inst.to_json(),
+        })
+        context = inst.get_context(event)
+        assert not context['system_frames']
+        assert not context['exceptions'][0]['stacktrace']['system_frames']
+        assert not context['exceptions'][1]['stacktrace']['system_frames']
+
 
 class SingleExceptionTest(TestCase):
     @fixture
