commit aa6e127e64038f8bfb1a1e7513f423767b322498
Author: David Wang <davidw1339@gmail.com>
Date:   Tue Dec 10 15:52:03 2019 -0800

    fix(ui): LightWeightNoProjectMessage changed to not be so disruptive (#16034)
    
    Previously setting the projects in the project store would trigger a DOM unmount, remount because of this lightweight component which would conditionally render its children or let the NoProjectMessage render its children. This was causing unnecessary refetching of data for the issues page which is being converted into the lightweight org context.
    
    Now it will always render the NoProjectMessage but supply an additional prop to specify if the projects are loaded or not.

diff --git a/src/sentry/static/sentry/app/components/lightWeightNoProjectMessage.tsx b/src/sentry/static/sentry/app/components/lightWeightNoProjectMessage.tsx
index 9131597ae8..383b28942e 100644
--- a/src/sentry/static/sentry/app/components/lightWeightNoProjectMessage.tsx
+++ b/src/sentry/static/sentry/app/components/lightWeightNoProjectMessage.tsx
@@ -13,13 +13,13 @@ type Props = {
 class LightWeightNoProjectMessage extends React.Component<Props> {
   render() {
     const {organization, projects, loadingProjects} = this.props;
-    if ('projects' in organization) {
-      return <NoProjectMessage {...this.props} />;
-    }
-    if (loadingProjects) {
-      return this.props.children;
-    }
-    return <NoProjectMessage {...this.props} projects={projects} />;
+    return (
+      <NoProjectMessage
+        {...this.props}
+        projects={projects}
+        loadingProjects={!('projects' in organization) && loadingProjects}
+      />
+    );
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/noProjectMessage.tsx b/src/sentry/static/sentry/app/components/noProjectMessage.tsx
index bae1dcfeec..3d3f58ddde 100644
--- a/src/sentry/static/sentry/app/components/noProjectMessage.tsx
+++ b/src/sentry/static/sentry/app/components/noProjectMessage.tsx
@@ -16,6 +16,7 @@ import img from '../../images/dashboard/hair-on-fire.svg';
 type Props = {
   organization: LightWeightOrganization | Organization;
   projects?: Project[];
+  loadingProjects?: boolean;
 };
 
 export default class NoProjectMessage extends React.Component<Props> {
@@ -25,10 +26,11 @@ export default class NoProjectMessage extends React.Component<Props> {
     children: PropTypes.node,
     organization: SentryTypes.Organization,
     projects: PropTypes.arrayOf(SentryTypes.Project),
+    loadingProjects: PropTypes.bool,
   };
 
   render() {
-    const {children, organization, projects} = this.props;
+    const {children, organization, projects, loadingProjects} = this.props;
     const orgId = organization.slug;
     const canCreateProject = organization.access.includes('project:write');
     const canJoinTeam = organization.access.includes('team:read');
@@ -44,7 +46,7 @@ export default class NoProjectMessage extends React.Component<Props> {
       hasProjects = projects && projects.length > 0;
     }
 
-    return hasProjects ? (
+    return hasProjects || loadingProjects ? (
       children
     ) : (
       <Wrapper>
diff --git a/tests/js/spec/views/projectsDashboard/lightWeightNoProjectMessage.spec.jsx b/tests/js/spec/views/projectsDashboard/lightWeightNoProjectMessage.spec.jsx
index ad945e0afe..0dd57d24bb 100644
--- a/tests/js/spec/views/projectsDashboard/lightWeightNoProjectMessage.spec.jsx
+++ b/tests/js/spec/views/projectsDashboard/lightWeightNoProjectMessage.spec.jsx
@@ -5,6 +5,10 @@ import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMess
 import ProjectsStore from 'app/stores/projectsStore';
 
 describe('LightWeightNoProjectMessage', function() {
+  beforeEach(function() {
+    ProjectsStore.reset();
+  });
+
   it('renders', async function() {
     const project1 = TestStubs.Project();
     const project2 = TestStubs.Project();
@@ -20,4 +24,46 @@ describe('LightWeightNoProjectMessage', function() {
     expect(wrapper.prop('children')).toBe(null);
     expect(wrapper.find('NoProjectMessage').exists()).toBe(true);
   });
+
+  it('does not remount when the projects store loads', async function() {
+    const mount = jest.fn();
+    const unmount = jest.fn();
+    class MockComponent extends React.Component {
+      componentWillMount() {
+        mount();
+      }
+      componentWillUnmount() {
+        unmount();
+      }
+      render() {
+        return <div>children</div>;
+      }
+    }
+
+    const project1 = TestStubs.Project();
+    const project2 = TestStubs.Project();
+    const organization = TestStubs.Organization({slug: 'org-slug'});
+    delete organization.projects;
+    const wrapper = mountWithTheme(
+      <LightWeightNoProjectMessage organization={organization}>
+        <MockComponent />
+      </LightWeightNoProjectMessage>,
+      TestStubs.routerContext()
+    );
+
+    // verify MockComponent is mounted once
+    expect(mount).toHaveBeenCalledTimes(1);
+    expect(wrapper.find('NoProjectMessage')).toHaveLength(1);
+    expect(wrapper.find('NoProjectMessage').prop('loadingProjects')).toEqual(true);
+    ProjectsStore.loadInitialData([project1, project2]);
+    // await for trigger from projects store to resolve
+    await tick();
+    wrapper.update();
+
+    // verify MockComponent is not unmounted and is still mounted once
+    expect(unmount).toHaveBeenCalledTimes(0);
+    expect(mount).toHaveBeenCalledTimes(1);
+    expect(wrapper.find('NoProjectMessage')).toHaveLength(1);
+    expect(wrapper.find('NoProjectMessage').prop('loadingProjects')).toEqual(false);
+  });
 });
diff --git a/tests/js/spec/views/projectsDashboard/noProjectMessage.spec.jsx b/tests/js/spec/views/projectsDashboard/noProjectMessage.spec.jsx
index 2fbfe65709..bee2d3d9c9 100644
--- a/tests/js/spec/views/projectsDashboard/noProjectMessage.spec.jsx
+++ b/tests/js/spec/views/projectsDashboard/noProjectMessage.spec.jsx
@@ -55,4 +55,20 @@ describe('NoProjectMessage', function() {
       wrapper.find('Button[to="/organizations/org-slug/projects/new/"]')
     ).toHaveLength(1);
   });
+
+  it('handles loading projects from props', function() {
+    const lightWeightOrg = TestStubs.Organization();
+    delete lightWeightOrg.projects;
+
+    const child = <div>child</div>;
+
+    const wrapper = shallow(
+      <NoProjectMessage projects={[]} loadingProjects organization={lightWeightOrg}>
+        {child}
+      </NoProjectMessage>,
+      TestStubs.routerContext()
+    );
+    // ensure loading projects causes children to render
+    expect(wrapper.find('div')).toHaveLength(1);
+  });
 });
