commit dafcb1267f522778a5a66e256af56cbb0cf3c358
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Jul 26 09:33:45 2017 -0700

    Add `expected_extraction_errors` to `FeatureSet`. (#5744)

diff --git a/src/sentry/similarity/__init__.py b/src/sentry/similarity/__init__.py
index 22d99228b8..b7c1a38cc8 100644
--- a/src/sentry/similarity/__init__.py
+++ b/src/sentry/similarity/__init__.py
@@ -8,8 +8,9 @@ from sentry.interfaces.stacktrace import Frame
 from sentry.similarity.encoder import Encoder
 from sentry.similarity.index import MinHashIndex
 from sentry.similarity.features import (
-    FeatureSet,
     ExceptionFeature,
+    FeatureSet,
+    InterfaceDoesNotExist,
     MessageFeature,
     get_application_chunks,
 )
@@ -103,6 +104,9 @@ features = FeatureSet(
             ),
         ),
     },
+    expected_extraction_errors=(
+        InterfaceDoesNotExist,
+    ),
     expected_encoding_errors=(
         FrameEncodingError,
     ),
diff --git a/src/sentry/similarity/features.py b/src/sentry/similarity/features.py
index 4e89d6ff0f..6047cbe998 100644
--- a/src/sentry/similarity/features.py
+++ b/src/sentry/similarity/features.py
@@ -27,14 +27,20 @@ def get_application_chunks(exception):
     )
 
 
+class InterfaceDoesNotExist(KeyError):
+    pass
+
+
 class ExceptionFeature(object):
     def __init__(self, function):
         self.function = function
 
     def extract(self, event):
-        return self.function(
-            event.interfaces['sentry.interfaces.Exception'].values[0],
-        )
+        try:
+            interface = event.interfaces['sentry.interfaces.Exception']
+        except KeyError:
+            raise InterfaceDoesNotExist()
+        return self.function(interface.values[0])
 
 
 class MessageFeature(object):
@@ -42,17 +48,21 @@ class MessageFeature(object):
         self.function = function
 
     def extract(self, event):
-        return self.function(
-            event.interfaces['sentry.interfaces.Message'],
-        )
+        try:
+            interface = event.interfaces['sentry.interfaces.Message']
+        except KeyError:
+            raise InterfaceDoesNotExist()
+        return self.function(interface)
 
 
 class FeatureSet(object):
-    def __init__(self, index, encoder, aliases, features, expected_encoding_errors):
+    def __init__(self, index, encoder, aliases, features,
+                 expected_extraction_errors, expected_encoding_errors):
         self.index = index
         self.encoder = encoder
         self.aliases = aliases
         self.features = features
+        self.expected_extraction_errors = expected_extraction_errors
         self.expected_encoding_errors = expected_encoding_errors
         assert set(self.aliases) == set(self.features)
 
@@ -68,7 +78,15 @@ class FeatureSet(object):
             try:
                 results[label] = strategy.extract(event)
             except Exception as error:
-                logger.warning(
+                log = (
+                    logger.debug
+                    if isinstance(error, self.expected_extraction_errors) else
+                    functools.partial(
+                        logger.warning,
+                        exc_info=True
+                    )
+                )
+                log(
                     'Could not extract features from %r for %r due to error: %r',
                     event,
                     label,
