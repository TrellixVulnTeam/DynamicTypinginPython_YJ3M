commit 11b1cfa9afa2e66096c2361781e6fe37f196d0f0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jun 4 09:40:25 2019 -0700

    feat(api): Add searching for org projects by slug(s) (#13513)
    
    This allows the organization projects API to search for projects by slug(s).

diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index e4a38393d3..a6037b1a2d 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -106,6 +106,8 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint, EnvironmentMixin):
                     queryset = queryset.filter(Q(name__icontains=value) | Q(slug__icontains=value))
                 elif key == 'id':
                     queryset = queryset.filter(id__in=value)
+                elif key == 'slug':
+                    queryset = queryset.filter(slug__in=value)
                 elif key == "team":
                     team_list = list(Team.objects.filter(slug__in=value))
                     queryset = queryset.filter(teams__in=team_list)
diff --git a/tests/sentry/api/endpoints/test_organization_projects.py b/tests/sentry/api/endpoints/test_organization_projects.py
index b61ffa9a51..0b80017b07 100644
--- a/tests/sentry/api/endpoints/test_organization_projects.py
+++ b/tests/sentry/api/endpoints/test_organization_projects.py
@@ -81,6 +81,22 @@ class OrganizationProjectsTest(APITestCase):
 
         self.check_valid_response(response, [project_bar, project_foo])
 
+    def test_search_by_slugs(self):
+        self.login_as(user=self.user)
+
+        project_bar = self.create_project(teams=[self.team], name='bar', slug='bar')
+        project_foo = self.create_project(teams=[self.team], name='foo', slug='foo')
+        self.create_project(teams=[self.team], name='baz', slug='baz')
+
+        path = u'{}?query=slug:{}'.format(self.path, project_foo.slug)
+        response = self.client.get(path)
+        self.check_valid_response(response, [project_foo])
+
+        path = u'{}?query=slug:{} slug:{}'.format(self.path, project_bar.slug, project_foo.slug)
+        response = self.client.get(path)
+
+        self.check_valid_response(response, [project_bar, project_foo])
+
     def test_bookmarks_appear_first_across_pages(self):
         self.login_as(user=self.user)
 
