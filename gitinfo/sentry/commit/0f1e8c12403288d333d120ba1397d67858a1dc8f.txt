commit 0f1e8c12403288d333d120ba1397d67858a1dc8f
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 2 12:53:25 2010 -0700

    Remove final refs to dblog

diff --git a/README.rst b/README.rst
index 01615d25e0..4d9e72f2f8 100644
--- a/README.rst
+++ b/README.rst
@@ -85,10 +85,10 @@ Use a secondary database to store error logs. This is useful if you have several
 	# This should correspond to a key in your DATABASES setting
 	SENTRY_DATABASE_USING = 'default'
 
-You should also enable the ``DBLogRouter`` to avoid things like extraneous table creation::
+You should also enable the ``SentryRouter`` to avoid things like extraneous table creation::
 
 	DATABASE_ROUTERS = [
-		'sentry.routers.DBLogRouter',
+		'sentry.routers.SentryRouter',
 		...
 	]
 
@@ -99,7 +99,7 @@ You should also enable the ``DBLogRouter`` to avoid things like extraneous table
 SENTRY_LOGGING
 ##############
 
-Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``sentry``. Use this in conjuction with ``sentry.handlers.DBLogHandler`` or your own handler to tweak how logging is dealt with.
+Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``sentry``. Use this in conjuction with ``sentry.handlers.SentryHandler`` or your own handler to tweak how logging is dealt with.
 
 A good example use case for this, is if you want to write to something like a syslog ahead of time, and later process that into the database with another tool.
 
@@ -107,12 +107,12 @@ A good example use case for this, is if you want to write to something like a sy
 Integration with ``logging``
 ############################
 
-django-db-log supports the ability to directly tie into the ``logging`` module. To use it simply add ``DBLogHandler`` to your logger::
+django-db-log supports the ability to directly tie into the ``logging`` module. To use it simply add ``SentryHandler`` to your logger::
 
 	import logging
-	from sentry.handlers import DBLogHandler
+	from sentry.handlers import SentryHandler
 	
-	logging.getLogger().addHandler(DBLogHandler())
+	logging.getLogger().addHandler(SentryHandler())
 
 	# Add StreamHandler to sentry's default so you can catch missed exceptions
 	logging.getLogger('sentry').addHandler(logging.StreamHandler())
diff --git a/sentry/handlers.py b/sentry/handlers.py
index 768d09bf7f..78712f4f8e 100644
--- a/sentry/handlers.py
+++ b/sentry/handlers.py
@@ -1,6 +1,6 @@
 import logging
 
-class DBLogHandler(logging.Handler):
+class SentryHandler(logging.Handler):
     def emit(self, record):
         from sentry.models import Message
 
diff --git a/sentry/manager.py b/sentry/manager.py
index d27c818b7a..95eb10d31c 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -23,11 +23,11 @@ assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DAT
 
 logger = logging.getLogger('sentry')
 
-class DBLogManager(models.Manager):
+class SentryManager(models.Manager):
     use_for_related_fields = True
 
     def get_query_set(self):
-        qs = super(DBLogManager, self).get_query_set()
+        qs = super(SentryManager, self).get_query_set()
         if settings.DATABASE_USING:
             qs = qs.using(settings.DATABASE_USING)
         return qs
@@ -179,6 +179,6 @@ class DBLogManager(models.Manager):
             **kwargs
         )
 
-class GroupedMessageManager(DBLogManager):
+class GroupedMessageManager(SentryManager):
     def get_by_natural_key(self, logger, view, checksum):
         return self.get(logger=logger, view=view, checksum=checksum)
\ No newline at end of file
diff --git a/sentry/middleware.py b/sentry/middleware.py
deleted file mode 100644
index 46042527f3..0000000000
--- a/sentry/middleware.py
+++ /dev/null
@@ -1,8 +0,0 @@
-import warnings
-
-__all__ = ('DBLogMiddleware',)
-
-class DBLogMiddleware(object):
-    """We now use signals"""
-    def process_exception(self, request, exception):
-        warnings.warn("DBLogMiddleware is no longer used.", DeprecationWarning)
diff --git a/sentry/models.py b/sentry/models.py
index aa5084cb39..0337e9928d 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -7,7 +7,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry import settings
 from sentry.helpers import construct_checksum, get_installed_apps
-from sentry.manager import DBLogManager, GroupedMessageManager
+from sentry.manager import SentryManager, GroupedMessageManager
 from sentry.utils import GzippedDictField
 
 import datetime
@@ -47,7 +47,7 @@ class MessageBase(Model):
     view            = models.CharField(max_length=255, db_index=True, blank=True, null=True)
     checksum        = models.CharField(max_length=32, db_index=True)
 
-    objects         = DBLogManager()
+    objects         = SentryManager()
 
     class Meta:
         abstract = True
diff --git a/sentry/routers.py b/sentry/routers.py
index 440e3d5d34..4e031bef37 100644
--- a/sentry/routers.py
+++ b/sentry/routers.py
@@ -1,6 +1,6 @@
 from sentry import settings
 
-class DBLogRouter(object):
+class SentryRouter(object):
     def db_for_write(self, model, **hints):
         if model._meta.app_label == 'sentry':
             return settings.DATABASE_USING
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 68f8359c8b..4a57cd8854 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -7,7 +7,6 @@ from django.test.client import Client
 from django.test import TestCase
 from django.utils.encoding import smart_unicode
 
-from sentry.middleware import DBLogMiddleware
 from sentry.models import Message, GroupedMessage
 from sentry.tests.models import TestModel, DuplicateKeyModel
 from sentry import settings
@@ -46,7 +45,7 @@ class RequestFactory(Client):
  
 RF = RequestFactory()
 
-class DBLogTestCase(TestCase):
+class SentryTestCase(TestCase):
     urls = 'sentry.tests.urls'
 
     def setUp(self):
@@ -64,7 +63,7 @@ class DBLogTestCase(TestCase):
         
     def setUpHandler(self):
         self.tearDownHandler()
-        from sentry.handlers import DBLogHandler
+        from sentry.handlers import SentryHandler
         
         logger = logging.getLogger()
         self._handlers = logger.handlers
@@ -75,7 +74,7 @@ class DBLogTestCase(TestCase):
             logger.removeHandler(h)
     
         logger.setLevel(logging.DEBUG)
-        sentry_handler = DBLogHandler()
+        sentry_handler = SentryHandler()
         logger.addHandler(sentry_handler)
     
     def tearDownHandler(self):
@@ -418,7 +417,7 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.message, 'view exception')
         self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
 
-class DBLogViewsTest(TestCase):
+class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     
     def setUp(self):
@@ -432,7 +431,7 @@ class DBLogViewsTest(TestCase):
         
     def setUpHandler(self):
         self.tearDownHandler()
-        from sentry.handlers import DBLogHandler
+        from sentry.handlers import SentryHandler
         
         logger = logging.getLogger()
         self._handlers = logger.handlers
@@ -443,7 +442,7 @@ class DBLogViewsTest(TestCase):
             logger.removeHandler(h)
     
         logger.setLevel(logging.DEBUG)
-        sentry_handler = DBLogHandler()
+        sentry_handler = SentryHandler()
         logger.addHandler(sentry_handler)
     
     def tearDownHandler(self):
@@ -469,7 +468,7 @@ class DBLogViewsTest(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, 'view exception')
 
-class DBLogFeedsTest(TestCase):
+class SentryFeedsTest(TestCase):
     fixtures = ['sentry/tests/fixtures/feeds.json']
     urls = 'sentry.tests.urls'
     
