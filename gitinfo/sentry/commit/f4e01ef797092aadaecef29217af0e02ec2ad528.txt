commit f4e01ef797092aadaecef29217af0e02ec2ad528
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon May 22 15:27:23 2017 -0700

    get rid of org, name locks when creating enviroments (#5401)
    
    * get rid of org, name locks when creating enviroments
    
    * use get_or_create

diff --git a/src/sentry/api/endpoints/release_deploys.py b/src/sentry/api/endpoints/release_deploys.py
index 2e37fead04..3d5fa9f14a 100644
--- a/src/sentry/api/endpoints/release_deploys.py
+++ b/src/sentry/api/endpoints/release_deploys.py
@@ -12,9 +12,7 @@ from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.app import locks
 from sentry.models import Deploy, Environment, Release
-from sentry.utils.retries import TimedRetryPolicy
 
 
 class DeploySerializer(serializers.Serializer):
@@ -94,27 +92,15 @@ class ReleaseDeploysEndpoint(OrganizationReleasesBaseEndpoint):
         serializer = DeploySerializer(data=request.DATA)
 
         if serializer.is_valid():
+            projects = list(release.projects.all())
             result = serializer.object
-            try:
-                env = Environment.objects.get(
-                    organization_id=organization.id,
-                    name=result['environment'],
-                )
-            except Environment.DoesNotExist:
-                # TODO(jess): clean up when changing unique constraint
-                lock_key = Environment.get_lock_key(organization.id, result['environment'])
-                lock = locks.get(lock_key, duration=5)
-                with TimedRetryPolicy(10)(lock.acquire):
-                    try:
-                        env = Environment.objects.get(
-                            organization_id=organization.id,
-                            name=result['environment'],
-                        )
-                    except Environment.DoesNotExist:
-                        env = Environment.objects.create(
-                            organization_id=organization.id,
-                            name=result['environment'],
-                        )
+
+            env = Environment.objects.get_or_create(
+                name=result['environment'],
+                organization_id=organization.id,
+            )[0]
+            for project in projects:
+                env.add_project(project)
 
             try:
                 with transaction.atomic():
diff --git a/src/sentry/models/environment.py b/src/sentry/models/environment.py
index eec7644c0a..fc51865a20 100644
--- a/src/sentry/models/environment.py
+++ b/src/sentry/models/environment.py
@@ -10,13 +10,11 @@ from __future__ import absolute_import, print_function
 from django.db import IntegrityError, models, transaction
 from django.utils import timezone
 
-from sentry.app import locks
 from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 )
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
-from sentry.utils.retries import TimedRetryPolicy
 
 
 class EnvironmentProject(Model):
@@ -51,51 +49,25 @@ class Environment(Model):
     __repr__ = sane_repr('organization_id', 'name')
 
     @classmethod
-    def get_cache_key(cls, project_id, name):
-        return 'env:1:%s:%s' % (project_id, md5_text(name).hexdigest())
-
-    @classmethod
-    def get_lock_key(cls, organization_id, name):
-        return 'environment:%s:%s' % (organization_id, md5_text(name).hexdigest())
+    def get_cache_key(cls, organization_id, name):
+        return 'env:2:%s:%s' % (organization_id, md5_text(name).hexdigest())
 
     @classmethod
     def get_or_create(cls, project, name):
         name = name or ''
 
-        cache_key = cls.get_cache_key(project.id, name)
+        cache_key = cls.get_cache_key(project.organization_id, name)
 
         env = cache.get(cache_key)
         if env is None:
-            try:
-                env = cls.objects.get(
-                    projects=project,
-                    organization_id=project.organization_id,
-                    name=name,
-                )
-            except cls.DoesNotExist:
-                env = cls.objects.filter(
-                    organization_id=project.organization_id,
-                    name=name,
-                ).order_by('date_added').first()
-                if not env:
-                    lock_key = cls.get_lock_key(project.organization_id, name)
-                    lock = locks.get(lock_key, duration=5)
-                    with TimedRetryPolicy(10)(lock.acquire):
-                        try:
-                            env = cls.objects.get(
-                                organization_id=project.organization_id,
-                                name=name,
-                            )
-                        except cls.DoesNotExist:
-                            env = cls.objects.create(
-                                project_id=project.id,
-                                name=name,
-                                organization_id=project.organization_id
-                            )
-                env.add_project(project)
-
+            env = cls.objects.get_or_create(
+                name=name,
+                organization_id=project.organization_id,
+            )[0]
             cache.set(cache_key, env, 3600)
 
+        env.add_project(project)
+
         return env
 
     def add_project(self, project):
diff --git a/tests/sentry/models/test_environment.py b/tests/sentry/models/test_environment.py
index 1d2f14cfcb..65cda9eba4 100644
--- a/tests/sentry/models/test_environment.py
+++ b/tests/sentry/models/test_environment.py
@@ -13,8 +13,8 @@ class GetOrCreateTest(TestCase):
             name='prod',
         )
 
-        assert env.project_id == project.id
         assert env.name == 'prod'
+        assert env.projects.first().id == project.id
 
         env2 = Environment.get_or_create(
             project=project,
