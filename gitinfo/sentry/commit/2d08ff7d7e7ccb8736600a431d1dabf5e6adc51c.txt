commit 2d08ff7d7e7ccb8736600a431d1dabf5e6adc51c
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 29 15:29:38 2015 -0700

    Add less crawlable shared IDs

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 49443ad95c..80e40faaec 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -94,6 +94,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
             {method} {path}
 
         """
+        # TODO(dcramer): handle unauthenticated/public response
         data = serialize(group, request.user)
 
         # TODO: these probably should be another endpoint
diff --git a/src/sentry/api/endpoints/group_index.py b/src/sentry/api/endpoints/group_index.py
new file mode 100644
index 0000000000..71a90ba997
--- /dev/null
+++ b/src/sentry/api/endpoints/group_index.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import, print_function
+
+from rest_framework.response import Response
+
+from sentry.api import client
+from sentry.api.base import DocSection, Endpoint
+from sentry.models import Group
+
+
+class GroupIndexEndpoint(Endpoint):
+    doc_section = DocSection.EVENTS
+
+    permission_classes = ()
+
+    def get(self, request):
+        """
+        Retrieve an aggregate
+
+        Return details on an individual aggregate specified by query parameters.
+
+            {method} {path}?shareId=mnIX
+
+        """
+        share_id = request.GET.get('shareId')
+        if share_id:
+            try:
+                group = Group.from_share_id(share_id)
+            except Group.DoesNotExist:
+                group = None
+        else:
+            group = None
+
+        if not group:
+            return Response({'detail': 'No groups found'}, status=404)
+
+        return client.get('/groups/{}/'.format(group.id), request.user, request.auth)
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index da0fa401ca..7fa3437fbf 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -101,6 +101,7 @@ class GroupSerializer(Serializer):
 
         d = {
             'id': str(obj.id),
+            'shareId': obj.get_share_id(),
             'count': str(obj.times_seen),
             'title': obj.message_short,
             'culprit': obj.culprit,
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 90fa7abf81..c1119ff0cf 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -13,6 +13,7 @@ import six
 import time
 import warnings
 
+from base64 import b16decode, b16encode
 from datetime import timedelta
 from django.core.urlresolvers import reverse
 from django.db import models
@@ -177,6 +178,17 @@ class Group(Model):
             return GroupStatus.RESOLVED
         return self.status
 
+    def get_share_id(self):
+        return b16encode('{}.{}'.format(self.project_id, self.id)).lower()
+
+    @classmethod
+    def from_share_id(cls, share_id):
+        try:
+            project_id, group_id = b16decode(share_id.upper()).split('.')
+        except ValueError:
+            raise cls.DoesNotExist
+        return cls.objects.get(project=project_id, id=group_id)
+
     def get_score(self):
         return int(math.log(self.times_seen) * 600 + float(time.mktime(self.last_seen.timetuple())))
 
