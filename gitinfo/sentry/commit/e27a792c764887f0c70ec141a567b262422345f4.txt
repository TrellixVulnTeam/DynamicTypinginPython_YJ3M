commit e27a792c764887f0c70ec141a567b262422345f4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Nov 8 11:45:24 2018 -0800

    fix(org-events): Fix project selector not updating (#10489)
    
    + tests

diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 90edfc84d8..d6dddefdcd 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -153,7 +153,7 @@ class OrganizationEventsContainer extends React.Component {
 
   handleUpdateEnvironmments = () => this.handleUpdate('environment');
 
-  handleUpdateProjects = () => this.handleUpdate('projects');
+  handleUpdateProjects = () => this.handleUpdate('project');
 
   render() {
     const {organization, children} = this.props;
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 902f22ae0a..70e94c74aa 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -8,16 +8,11 @@ import {clearValue, selectByLabel} from '../../../helpers/select';
 
 describe('OrganizationEvents', function() {
   let wrapper;
-  const router = TestStubs.router({
-    location: {
-      pathname: '/organizations/org-slug/events/',
-      query: {},
-    },
-  });
+  let router;
   const project = TestStubs.Project({isMember: true});
   const organization = TestStubs.Organization({
     features: ['events-stream'],
-    projects: [project],
+    projects: [project, TestStubs.Project({isMember: true, slug: 'new-project', id: 3})],
   });
 
   beforeAll(async function() {
@@ -28,6 +23,15 @@ describe('OrganizationEvents', function() {
 
     setActiveOrganization(organization);
     await tick();
+  });
+
+  beforeEach(function() {
+    router = TestStubs.router({
+      location: {
+        pathname: '/organizations/org-slug/events/',
+        query: {},
+      },
+    });
 
     wrapper = mount(
       <OrganizationEventsContainer router={router} organization={organization}>
@@ -108,21 +112,12 @@ describe('OrganizationEvents', function() {
   });
 
   it('does not update component state when router is changed', async function() {
-    wrapper = mount(
-      <OrganizationEventsContainer router={router} organization={organization}>
-        <div />
-      </OrganizationEventsContainer>,
-      TestStubs.routerContext([
-        {
-          organization,
-        },
-      ])
-    );
     expect(wrapper.state('environment')).toEqual([]);
 
     // This shouldn't happen, we only use URL params for initial state
     wrapper.setProps({
       router: {
+        ...router,
         location: {
           pathname: '/organizations/org-slug/events/',
           query: {
@@ -134,4 +129,52 @@ describe('OrganizationEvents', function() {
     });
     expect(wrapper.state('environment')).toEqual([]);
   });
+
+  it('updates router when changing projects', function() {
+    expect(wrapper.state('project')).toEqual([]);
+
+    wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
+
+    wrapper
+      .find('MultipleProjectSelector AutoCompleteItem')
+      .at(0)
+      .simulate('click');
+    expect(wrapper.state('project')).toEqual([2]);
+
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {
+        project: [2],
+        statsPeriod: '14d',
+      },
+    });
+  });
+
+  it('selects multiple projects', async function() {
+    expect(wrapper.state('project')).toEqual([]);
+
+    wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
+
+    wrapper
+      .find('MultipleProjectSelector AutoCompleteItem MultiSelectWrapper')
+      .at(0)
+      .simulate('click');
+    expect(wrapper.state('project')).toEqual([2]);
+
+    wrapper
+      .find('MultipleProjectSelector AutoCompleteItem MultiSelectWrapper')
+      .at(1)
+      .simulate('click');
+    expect(wrapper.state('project')).toEqual([2, 3]);
+
+    wrapper.find('MultipleProjectSelector StyledChevron').simulate('click');
+
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {
+        project: [2, 3],
+        statsPeriod: '14d',
+      },
+    });
+  });
 });
