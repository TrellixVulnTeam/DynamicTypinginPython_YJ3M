commit 122637ca094846f8ab3cbc57322d07e8408c3c8a
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Apr 16 19:21:13 2020 -0700

    feat(mail): Add stats to `MailPlugin` and `MailAdapter` so that we can monitor the migration. (#18322)
    
    This lets us keep track of how many calls are going to each class. Once the migration is finished we
    should be able to see all calls to `MailPlugin` drop off, but the calls to `MailAdapter` should
    remain the same.

diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index 56c52b7a4c..db99bb0267 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -58,6 +58,7 @@ class MailAdapter(object):
     alert_option_key = "mail:alert"
 
     def rule_notify(self, event, futures, target_type, target_identifier=None):
+        metrics.incr("mail_adapter.rule_notify")
         rules = []
         extra = {
             "event_id": event.event_id,
@@ -154,6 +155,7 @@ class MailAdapter(object):
         return project.get_notification_recipients(self.alert_option_key)
 
     def should_notify(self, group):
+        metrics.incr("mail_adapter.should_notify")
         send_to = self.get_sendable_users(group.project)
         if not send_to:
             return False
@@ -280,6 +282,7 @@ class MailAdapter(object):
         )
 
     def notify(self, notification, target_type, target_identifier=None, **kwargs):
+        metrics.incr("mail_adapter.notify")
         event = notification.event
 
         environment = event.get_tag("environment")
@@ -388,6 +391,7 @@ class MailAdapter(object):
         )
 
     def notify_digest(self, project, digest, target_type, target_identifier=None):
+        metrics.incr("mail_adapter.notify_digest")
         user_ids = self.get_send_to(project, target_type, target_identifier)
         for user_id, digest in get_personalized_digests(project.id, digest, user_ids):
             start, end, counts = get_digest_metadata(digest)
@@ -434,6 +438,7 @@ class MailAdapter(object):
             )
 
     def notify_about_activity(self, activity):
+        metrics.incr("mail_adapter.notify_about_activity")
         # TODO: We should move these into the `mail` module.
         from sentry.plugins.sentry_mail.activity import emails
 
@@ -448,6 +453,7 @@ class MailAdapter(object):
         email.send()
 
     def handle_user_report(self, payload, project, **kwargs):
+        metrics.incr("mail_adapter.handle_user_report")
         group = Group.objects.get(id=payload["report"]["issue"]["id"])
 
         participants = GroupSubscription.objects.get_participants(group=group)
@@ -518,5 +524,6 @@ class MailAdapter(object):
             msg.send_async()
 
     def handle_signal(self, name, payload, **kwargs):
+        metrics.incr("mail_adapter.handle_signal")
         if name == "user-reports.created":
             self.handle_user_report(payload, **kwargs)
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 6d722c3fb3..d2de8d871a 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -3,9 +3,9 @@ from __future__ import absolute_import
 import logging
 
 import sentry
-
 from sentry.mail.adapter import MailAdapter, ActionTargetType
 from sentry.plugins.bases.notify import NotificationPlugin
+from sentry.utils import metrics
 from sentry.utils.http import absolute_uri
 
 logger = logging.getLogger(__name__)
@@ -23,6 +23,7 @@ class MailPlugin(NotificationPlugin):
     mail_adapter = MailAdapter()
 
     def rule_notify(self, event, futures):
+        metrics.incr("mail_plugin.rule_notify")
         return self.mail_adapter.rule_notify(
             event, futures, target_type=ActionTargetType.ISSUE_OWNERS
         )
@@ -35,28 +36,33 @@ class MailPlugin(NotificationPlugin):
         return True
 
     def should_notify(self, group, event):
+        metrics.incr("mail_plugin.should_notify")
         return (
             not group.project.flags.has_issue_alerts_targeting
             and self.mail_adapter.should_notify(group)
         )
 
     def notify(self, notification, **kwargs):
+        metrics.incr("mail_plugin.notify")
         return self.mail_adapter.notify(
             notification, target_type=ActionTargetType.ISSUE_OWNERS, **kwargs
         )
 
     def notify_digest(self, project, digest):
+        metrics.incr("mail_plugin.notify_digest")
         return self.mail_adapter.notify_digest(
             project, digest, target_type=ActionTargetType.ISSUE_OWNERS
         )
 
     def notify_about_activity(self, activity):
+        metrics.incr("mail_plugin.notify_about_activity")
         if activity.project.flags.has_issue_alerts_targeting:
             return
 
         return self.mail_adapter.notify_about_activity(activity)
 
     def handle_signal(self, name, payload, **kwargs):
+        metrics.incr("mail_plugin.handle_signal")
         if name == "user-reports.created":
             project = kwargs.get("project")
             if project and not project.flags.has_issue_alerts_targeting:
