commit 0a9bb6c6f2195d841ed1c155fd0aae6f3fc2fcbd
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jan 18 13:30:13 2019 -0800

    feat(dashboard): Add release markers to Events Chart and Widgets (#11597)
    
    This adds release markers to the Events Chart and Widgets. Will followup with a design pass.
    
    * use xAxis.type = "time" - required to support releases. Otherwise we would lose some precision since we would have to have release timestamps match xaxis labels
    
    * change tooltip trigger to be by item instead of axis so that we can have tooltips on release mark lines (which do not have a corresponding axis item)

diff --git a/src/sentry/static/sentry/app/components/charts/chartZoom.jsx b/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
index e40e8c3073..64855c56d5 100644
--- a/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
+++ b/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
@@ -188,9 +188,8 @@ class ChartZoom extends React.Component {
 
   handleDataZoom = (evt, chart) => {
     const model = chart.getModel();
-    const {xAxis, series} = model.option;
+    const {xAxis} = model.option;
     const axis = xAxis[0];
-    const [firstSeries] = series;
 
     // if `rangeStart` and `rangeEnd` are null, then we are going back
     if (axis.rangeStart === null && axis.rangeEnd === null) {
@@ -202,10 +201,10 @@ class ChartZoom extends React.Component {
 
       this.setPeriod(previousPeriod);
     } else {
-      const start = moment.utc(firstSeries.data[axis.rangeStart][0]);
+      const start = moment.utc(axis.rangeStart);
 
       // Add a day so we go until the end of the day (e.g. next day at midnight)
-      const end = moment.utc(firstSeries.data[axis.rangeEnd][0]);
+      const end = moment.utc(axis.rangeEnd);
 
       this.setPeriod({period: null, start, end}, true);
     }
diff --git a/src/sentry/static/sentry/app/components/charts/components/markLine.jsx b/src/sentry/static/sentry/app/components/charts/components/markLine.jsx
index ddacea026e..749fd39af9 100644
--- a/src/sentry/static/sentry/app/components/charts/components/markLine.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/markLine.jsx
@@ -8,10 +8,7 @@ import 'echarts/lib/component/markLine';
 export default function MarkLine(props) {
   return {
     // The second symbol is a very ugly arrow, we don't want it
-    symbol: ['circle', 'none'],
-
-    // Default size is super big imo
-    symbolSize: 6,
+    symbol: ['none', 'none'],
     ...props,
   };
 }
diff --git a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
index f8c1331173..be134da9b9 100644
--- a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
@@ -21,7 +21,10 @@ function valueFormatter(value) {
 
 function getFormatter({filter, isGroupedByDate, truncate, formatAxisLabel, utc}) {
   const getFilter = seriesParam => {
-    const value = seriesParam.data[1];
+    // Series do not necessarily have `data` defined, e.g. releases don't have `data`, but rather
+    // has a series using strictly `markLine`s.
+    // However, real series will have `data` as a tuple of (key, value)
+    const value = seriesParam.data && seriesParam.data.length && seriesParam.data[1];
     if (typeof filter === 'function') {
       return filter(value);
     }
@@ -29,14 +32,21 @@ function getFormatter({filter, isGroupedByDate, truncate, formatAxisLabel, utc})
     return true;
   };
 
-  return seriesParams => {
+  return seriesParamsOrParam => {
+    // If this is a tooltip for the axis, it will include all series for that axis item.
+    // In this case seriesParamsOrParam will be of type `Object[]`
+    //
+    // Otherwise, it will be an `Object`, and is a tooltip for a single item
+    const isAxisItem = Array.isArray(seriesParamsOrParam);
+    const seriesParams = isAxisItem ? seriesParamsOrParam : [seriesParamsOrParam];
+
+    // If axis, timestamp comes from axis, otherwise for a single item it is defined in its data
+    const timestamp = isAxisItem ? seriesParams[0].axisValue : seriesParams[0]?.data[0];
+
     const label =
       seriesParams.length &&
-      (formatAxisLabel || defaultFormatAxisLabel)(
-        seriesParams[0].axisValueLabel,
-        isGroupedByDate,
-        utc
-      );
+      (formatAxisLabel || defaultFormatAxisLabel)(timestamp, isGroupedByDate, utc);
+
     return [
       `<div>${truncationFormatter(label, truncate)}</div>`,
       seriesParams
@@ -61,7 +71,7 @@ export default function Tooltip(
 
   return {
     show: true,
-    trigger: 'axis',
+    trigger: 'item',
     formatter,
     ...props,
   };
diff --git a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
index d0a0e0039d..5918cf291f 100644
--- a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
@@ -15,7 +15,7 @@ export default function XAxis({isGroupedByDate, interval, utc, ...props} = {}) {
   };
 
   return {
-    type: 'category',
+    type: isGroupedByDate ? 'time' : 'category',
     boundaryGap: false,
     axisLine: {
       lineStyle: {
@@ -29,11 +29,24 @@ export default function XAxis({isGroupedByDate, interval, utc, ...props} = {}) {
       },
       ...(props.axisTick || {}),
     },
+    splitLine: {
+      show: false,
+    },
     axisLabel: {
       margin: 12,
       formatter: axisLabelFormatter,
       ...(props.axisLabel || {}),
     },
+    axisPointer: {
+      show: true,
+      type: 'line',
+      label: {
+        show: false,
+      },
+      lineStyle: {
+        width: 0.5,
+      },
+    },
     ...props,
   };
 }
diff --git a/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx b/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx
new file mode 100644
index 0000000000..049027714d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx
@@ -0,0 +1,94 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {getFormattedDate} from 'app/utils/dates';
+import {t} from 'app/locale';
+import MarkLine from 'app/components/charts/components/markLine';
+import SentryTypes from 'app/sentryTypes';
+import theme from 'app/utils/theme';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+function getOrganizationReleases(api, organization) {
+  return api.requestPromise(`/organizations/${organization.slug}/releases/`);
+}
+
+function getReleaseSeries(releases) {
+  return {
+    seriesName: 'Releases',
+    data: [],
+    markLine: MarkLine({
+      lineStyle: {
+        normal: {
+          color: theme.purpleLight,
+          opacity: 0.3,
+          type: 'solid',
+        },
+      },
+      tooltip: {
+        formatter: ({data}) => {
+          return `<div>${getFormattedDate(data.value, 'MMM D, YYYY LT')} <br />
+            Release: ${data.name}<br />
+            </div>`;
+        },
+      },
+      label: {
+        show: false,
+      },
+      data: releases.map(release => ({
+        xAxis: +new Date(release.dateCreated),
+        name: release.shortVersion,
+        value: release.shortVersion,
+        label: {
+          formatter: () => release.shortVersion,
+        },
+      })),
+    }),
+  };
+}
+
+class ReleaseSeries extends React.Component {
+  static propTypes = {
+    api: PropTypes.object,
+    organization: SentryTypes.Organization,
+
+    // Array of releases, if empty, component will fetch releases itself
+    releases: PropTypes.arrayOf(SentryTypes.Release),
+  };
+
+  state = {
+    releases: null,
+    releaseSeries: [],
+  };
+
+  componentDidMount() {
+    if (this.props.releases) {
+      return;
+    }
+
+    const {api, organization} = this.props;
+
+    getOrganizationReleases(api, organization)
+      .then(releases => {
+        this.setState({
+          releases,
+          releaseSeries: [getReleaseSeries(releases)],
+        });
+      })
+      .catch(() => {
+        addErrorMessage(t('Error fetching releases'));
+      });
+  }
+
+  render() {
+    const {children} = this.props;
+
+    return children({
+      releases: this.state.releases,
+      releaseSeries: this.state.releaseSeries,
+    });
+  }
+}
+
+export default withOrganization(withApi(ReleaseSeries));
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/dashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/dashboard.jsx
index 05e1ac927d..ace4e4c622 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/dashboard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/dashboard.jsx
@@ -2,33 +2,24 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
 import SentryTypes from 'app/sentryTypes';
 import Widget from 'app/views/organizationDashboard/widget';
 import space from 'app/styles/space';
 
-class Dashboard extends AsyncView {
+class Dashboard extends React.Component {
   static propTypes = {
+    releases: PropTypes.arrayOf(SentryTypes.Release),
     widgets: PropTypes.arrayOf(SentryTypes.Widget),
   };
 
-  getTitle() {
-    return t('Dashboard');
-  }
-
-  getEndpoints() {
-    return [];
-  }
-
   render() {
-    const {widgets} = this.props;
+    const {releases, widgets} = this.props;
 
     return (
       <Widgets>
         {widgets.map((widget, i) => (
           <WidgetWrapper key={i}>
-            <Widget widget={widget} />
+            <Widget releases={releases} widget={widget} />
           </WidgetWrapper>
         ))}
       </Widgets>
@@ -36,7 +27,6 @@ class Dashboard extends AsyncView {
   }
 }
 export default Dashboard;
-export {Dashboard};
 
 const Widgets = styled('div')`
   display: flex;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/events.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/events.jsx
index 6ded7c9d27..b535cb97ab 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/widgets/events.jsx
@@ -7,8 +7,10 @@ const events = {
   queries: {
     discover: [eventsQuery],
   },
-  includePreviousPeriod: true,
   title: 'Events',
+
+  includePreviousPeriod: true,
+  includeReleases: true,
   aggregateLabelMap: {
     count: 'Events',
   },
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard.jsx
index 7eea11e608..a0fe49ef79 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard.jsx
@@ -1,11 +1,26 @@
 import React from 'react';
 
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
 import Dashboard from 'app/views/organizationDashboard/dashboard';
 import overviewDashboard from 'app/views/organizationDashboard/data/dashboards/overviewDashboard';
 
-class OverviewDashboard extends React.Component {
-  render() {
-    return <Dashboard {...overviewDashboard} />;
+class OverviewDashboard extends AsyncView {
+  getEndpoints() {
+    return [['releases', `/organizations/${this.props.params.orgId}/releases/`]];
+  }
+
+  getTitle() {
+    return t('Dashboard - %s', this.props.params.orgId);
+  }
+
+  renderLoading() {
+    // We don't want a loading state
+    return this.renderBody();
+  }
+
+  renderBody() {
+    return <Dashboard releases={this.state.releases} {...overviewDashboard} />;
   }
 }
 export default OverviewDashboard;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/index.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/index.jsx
deleted file mode 100644
index 061eb4422a..0000000000
--- a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/index.jsx
+++ /dev/null
@@ -1 +0,0 @@
-export {default} from './overviewDashboard';
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/overviewDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/overviewDashboard.jsx
deleted file mode 100644
index 7eea11e608..0000000000
--- a/src/sentry/static/sentry/app/views/organizationDashboard/overviewDashboard/overviewDashboard.jsx
+++ /dev/null
@@ -1,11 +0,0 @@
-import React from 'react';
-
-import Dashboard from 'app/views/organizationDashboard/dashboard';
-import overviewDashboard from 'app/views/organizationDashboard/data/dashboards/overviewDashboard';
-
-class OverviewDashboard extends React.Component {
-  render() {
-    return <Dashboard {...overviewDashboard} />;
-  }
-}
-export default OverviewDashboard;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx
index 6892643932..0aa41b855f 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx
@@ -9,6 +9,7 @@ import {getChartComponent} from 'app/views/organizationDashboard/utils/getChartC
 import {getData} from 'app/views/organizationDashboard/utils/getData';
 import {getQueryStringFromQuery} from 'app/views/organizationDiscover/utils';
 import Button from 'app/components/button';
+import ReleaseSeries from 'app/components/charts/releaseSeries';
 import InlineSvg from 'app/components/inlineSvg';
 import SentryTypes from 'app/sentryTypes';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
@@ -18,6 +19,7 @@ import DiscoverQuery from './discoverQuery';
 
 class Widget extends React.Component {
   static propTypes = {
+    releases: PropTypes.arrayOf(SentryTypes.Release),
     widget: SentryTypes.Widget,
     organization: SentryTypes.Organization,
     selection: SentryTypes.GlobalSelection,
@@ -65,7 +67,7 @@ class Widget extends React.Component {
   };
 
   renderResults(results) {
-    const {widget} = this.props;
+    const {releases, widget} = this.props;
     const isTable = widget.type === WIDGET_DISPLAY.TABLE;
 
     // get visualization based on widget data
@@ -80,6 +82,20 @@ class Widget extends React.Component {
       }),
     };
 
+    if (widget.includeReleases) {
+      return (
+        <ReleaseSeries releases={releases}>
+          {({releaseSeries}) => (
+            <ChartComponent
+              {...chartData}
+              {...extra}
+              series={[...chartData.series, ...releaseSeries]}
+            />
+          )}
+        </ReleaseSeries>
+      );
+    }
+
     return <ChartComponent {...chartData} {...extra} />;
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index 50cc56b026..0737f23039 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -3,6 +3,7 @@ import React from 'react';
 
 import {t} from 'app/locale';
 import ChartZoom from 'app/components/charts/chartZoom';
+import ReleaseSeries from 'app/components/charts/releaseSeries';
 import LineChart from 'app/components/charts/lineChart';
 import withApi from 'app/utils/withApi';
 
@@ -13,6 +14,7 @@ const DEFAULT_GET_CATEGORY = () => t('Events');
 
 class EventsChart extends React.Component {
   static propTypes = {
+    api: PropTypes.object,
     period: PropTypes.string,
     query: PropTypes.string,
     utc: PropTypes.bool,
@@ -34,21 +36,27 @@ class EventsChart extends React.Component {
           >
             {({timeseriesData, previousTimeseriesData}) => {
               return (
-                <LineChart
-                  {...zoomRenderProps}
-                  utc={utc}
-                  series={timeseriesData}
-                  seriesOptions={{
-                    showSymbol: false,
+                <ReleaseSeries api={this.props.api}>
+                  {({releaseSeries}) => {
+                    return (
+                      <LineChart
+                        {...zoomRenderProps}
+                        utc={utc}
+                        series={[...timeseriesData, ...releaseSeries]}
+                        seriesOptions={{
+                          showSymbol: false,
+                        }}
+                        previousPeriod={
+                          previousTimeseriesData ? [previousTimeseriesData] : null
+                        }
+                        grid={{
+                          left: '30px',
+                          right: '18px',
+                        }}
+                      />
+                    );
                   }}
-                  previousPeriod={
-                    previousTimeseriesData ? [previousTimeseriesData] : null
-                  }
-                  grid={{
-                    left: '30px',
-                    right: '18px',
-                  }}
-                />
+                </ReleaseSeries>
               );
             }}
           </EventsRequest>
diff --git a/tests/js/helpers/charts.jsx b/tests/js/helpers/charts.jsx
index 430b0c416a..26d690dc9d 100644
--- a/tests/js/helpers/charts.jsx
+++ b/tests/js/helpers/charts.jsx
@@ -11,8 +11,8 @@ let data = [
 let model = {
   xAxis: [
     {
-      rangeStart: 2,
-      rangeEnd: 5,
+      rangeStart: 1543449600000,
+      rangeEnd: 1543708800000,
     },
   ],
   series: [
diff --git a/tests/js/spec/components/charts/releaseSeries.spec.jsx b/tests/js/spec/components/charts/releaseSeries.spec.jsx
new file mode 100644
index 0000000000..d1097acf4b
--- /dev/null
+++ b/tests/js/spec/components/charts/releaseSeries.spec.jsx
@@ -0,0 +1,72 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import ReleaseSeries from 'app/components/charts/releaseSeries';
+
+describe('ReleaseSeries', function() {
+  const renderFunc = jest.fn(() => null);
+  const {routerContext, organization} = initializeOrg();
+  const releases = [TestStubs.Release()];
+  let releasesMock;
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    releasesMock = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/releases/`,
+      body: releases,
+    });
+  });
+
+  it('does not fetch releases if releases is truthy', function() {
+    mount(
+      <ReleaseSeries organization={organization} releases={[]}>
+        {renderFunc}
+      </ReleaseSeries>,
+      routerContext
+    );
+
+    expect(releasesMock).not.toHaveBeenCalled();
+  });
+
+  it('fetches releases if no releases passed through props', async function() {
+    let wrapper = mount(<ReleaseSeries>{renderFunc}</ReleaseSeries>, routerContext);
+
+    await tick();
+    wrapper.update();
+
+    expect(releasesMock).toHaveBeenCalled();
+
+    expect(renderFunc).toHaveBeenCalledWith(
+      expect.objectContaining({
+        releases,
+      })
+    );
+  });
+
+  it('generates an eCharts `markLine` series from releases', async function() {
+    let wrapper = mount(<ReleaseSeries>{renderFunc}</ReleaseSeries>, routerContext);
+
+    await tick();
+    wrapper.update();
+
+    expect(renderFunc).toHaveBeenCalledWith(
+      expect.objectContaining({
+        releaseSeries: [
+          expect.objectContaining({
+            // we don't care about the other properties for now
+            markLine: expect.objectContaining({
+              data: [
+                expect.objectContaining({
+                  name: '92eccef',
+                  value: '92eccef',
+                  xAxis: 1530206345000,
+                }),
+              ],
+            }),
+          }),
+        ],
+      })
+    );
+  });
+});
diff --git a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
index 7f0ed953ed..df2e615f15 100644
--- a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
@@ -18,12 +18,11 @@ describe('EventsChart', function() {
   let render;
   let wrapper;
 
-  beforeAll(function() {});
   beforeEach(function() {
-    mockZoomRange(2, 5);
+    mockZoomRange(1543449600000, 1543708800000);
     wrapper = mount(
       <EventsChart
-        api={MockApiClient}
+        api={new MockApiClient()}
         location={{query: {}}}
         organization={org}
         project={[]}
@@ -103,7 +102,7 @@ describe('EventsChart', function() {
     expect(chartZoomInstance.currentPeriod.end).toEqual('2018-12-02T00:00:00');
 
     // Zoom again
-    mockZoomRange(3, 5);
+    mockZoomRange(1543536000000, 1543708800000);
     doZoom(wrapper, chart);
     expect(chartZoomInstance.currentPeriod.period).toEqual(null);
     expect(chartZoomInstance.currentPeriod.start).toEqual('2018-11-30T00:00:00');
@@ -146,9 +145,9 @@ describe('EventsChart', function() {
 
     doZoom(wrapper, chart);
     // Zoom again
-    mockZoomRange(3, 5);
+    mockZoomRange(1543536000000, 1543708800000);
     doZoom(wrapper, chart);
-    mockZoomRange(4, 5);
+    mockZoomRange(1543622400000, 1543708800000);
     doZoom(wrapper, chart);
 
     const chartZoomInstance = wrapper.find('ChartZoom').instance();
