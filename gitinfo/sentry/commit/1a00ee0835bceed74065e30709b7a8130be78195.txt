commit 1a00ee0835bceed74065e30709b7a8130be78195
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Sep 20 16:42:50 2017 -0500

    feat(workflow): add diff for merged events (#6076)
    
    * fix(ui): fix events endpoint for issue diff
    
    * feat(workflow): add diff for merged events

diff --git a/src/sentry/static/sentry/app/actions/groupingActions.jsx b/src/sentry/static/sentry/app/actions/groupingActions.jsx
index 3ef7c32e6d..0e6e79903c 100644
--- a/src/sentry/static/sentry/app/actions/groupingActions.jsx
+++ b/src/sentry/static/sentry/app/actions/groupingActions.jsx
@@ -8,8 +8,7 @@ let GroupingActions = Reflux.createActions([
   'toggleMerge',
   'unmerge',
   'merge',
-  'expandFingerprints',
-  'collapseFingerprints',
-  'toggleCollapseFingerprint'
+  'toggleCollapseFingerprint',
+  'toggleCollapseFingerprints'
 ]);
 export default GroupingActions;
diff --git a/src/sentry/static/sentry/app/components/issueDiff.jsx b/src/sentry/static/sentry/app/components/issueDiff.jsx
index e230c768d5..eaf6b82dee 100644
--- a/src/sentry/static/sentry/app/components/issueDiff.jsx
+++ b/src/sentry/static/sentry/app/components/issueDiff.jsx
@@ -73,6 +73,10 @@ const IssueDiff = React.createClass({
   },
 
   getEndpoint(issueId, eventId) {
+    if (eventId !== 'latest') {
+      return `/events/${eventId}/`;
+    }
+
     return `/issues/${issueId}/events/${eventId}/`;
   },
 
diff --git a/src/sentry/static/sentry/app/stores/groupingStore.jsx b/src/sentry/static/sentry/app/stores/groupingStore.jsx
index 2d7edee02a..a849f602fa 100644
--- a/src/sentry/static/sentry/app/stores/groupingStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupingStore.jsx
@@ -19,20 +19,27 @@ const checkBelowThreshold = scores => {
 const GroupingStore = Reflux.createStore({
   listenables: [GroupingActions],
   init() {
-    let state = this.getDefaultState();
+    let state = this.getInitialState();
 
     Object.entries(state).forEach(([key, value]) => {
       this[key] = value;
     });
   },
 
-  getDefaultState() {
+  getInitialState() {
     return {
+      // List of fingerprints that belong to issue
       mergedItems: [],
-      unmergeList: new Set(),
+      // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged
+      unmergeList: new Map(),
+      // Map of state for each fingerprint (i.e. "collapsed")
       unmergeState: new Map(),
-      unmergeDisabled: false,
-      unmergeCollapseState: new Set(),
+      // Disabled state of "Unmerge" button in "Merged" tab (for Issues)
+      unmergeDisabled: true,
+      // If "Collapse All" was just used, this will be true
+      unmergeLastCollapsed: false,
+      // "Compare" button state
+      enableFingerprintCompare: false,
 
       similarItems: [],
       filteredSimilarItems: [],
@@ -58,39 +65,14 @@ const GroupingStore = Reflux.createStore({
     });
   },
 
-  // Resets status of a remaining item (to be unmerged) if it exists
-  resetRemainingUnmergeItem() {
-    if (!this.remainingItem) return;
-
-    // If there was a single unchecked item before, make sure we reset its disabled state
-    this.setStateForId(this.unmergeState, this.remainingItem.id, {
-      disabled: false
-    });
-    this.remainingItem = null;
-  },
-
-  checkForRemainingUnmergeItem() {
+  isAllUnmergedSelected() {
     let lockedItems = Array.from(this.unmergeState.values()).filter(({busy}) => busy) || [
     ];
-    let hasRemainingItem =
-      this.unmergeList.size + 1 === this.mergedItems.length - lockedItems.length;
-
-    if (!hasRemainingItem) return;
-
-    // Check if there's only one remaining item, and make sure to disable it from being
-    // selected to unmerge
-    let remainingItem = this.mergedItems.find(item => {
-      let notSelected = !this.unmergeList.has(item.id);
-      let itemState = this.unmergeState.has(item.id) && this.unmergeState.get(item.id);
-      return notSelected && (!itemState || !itemState.busy);
-    });
-
-    if (!remainingItem) return;
-
-    this.remainingItem = remainingItem;
-    this.setStateForId(this.unmergeState, remainingItem.id, {
-      disabled: true
-    });
+    return (
+      this.unmergeList.size ===
+      this.mergedItems.filter(({latestEvent}) => !!latestEvent).length -
+        lockedItems.length
+    );
   },
 
   // Fetches data
@@ -217,60 +199,54 @@ const GroupingStore = Reflux.createStore({
   },
 
   // Toggle unmerge check box
-  onToggleUnmerge(id) {
+  onToggleUnmerge([fingerprint, eventId]) {
     let checked;
 
     // Uncheck an item to unmerge
-    let state = this.unmergeState.has(id) && this.unmergeState.get(id);
+    let state = this.unmergeState.get(fingerprint);
 
     if (state && state.busy === true) return;
 
-    if (this.unmergeList.has(id)) {
-      this.unmergeList.delete(id);
+    if (this.unmergeList.has(fingerprint)) {
+      this.unmergeList.delete(fingerprint);
       checked = false;
-
-      this.resetRemainingUnmergeItem();
     } else {
-      // at least 1 item must be unchecked for unmerge
-      // make sure that not all events have been selected
-
-      // Account for items in unmerge queue, or "locked" items
-      let lockedItems = Array.from(this.unmergeState.values()).filter(
-        ({busy}) => busy
-      ) || [];
-
-      let canUnmerge =
-        this.unmergeList.size + 1 < this.mergedItems.length - lockedItems.length;
-      if (!canUnmerge) return;
-      this.unmergeList.add(id);
+      this.unmergeList.set(fingerprint, eventId);
       checked = true;
-
-      this.checkForRemainingUnmergeItem();
     }
 
     // Update "checked" state for row
-    this.setStateForId(this.unmergeState, id, {
+    this.setStateForId(this.unmergeState, fingerprint, {
       checked
     });
 
+    // Unmerge should be disabled if 0 or all items are selected
+    this.unmergeDisabled = this.unmergeList.size === 0 || this.isAllUnmergedSelected();
+    this.enableFingerprintCompare = this.unmergeList.size === 2;
+
     this.triggerUnmergeState();
   },
 
   onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {
-    let ids = Array.from(this.unmergeList.values());
+    let ids = Array.from(this.unmergeList.keys());
 
-    // Disable unmerge button
-    this.unmergeDisabled = true;
+    return new Promise((resolve, reject) => {
+      if (this.isAllUnmergedSelected()) {
+        reject(new Error('Not allowed to unmerge ALL events'));
+        return;
+      }
 
-    // Disable rows
-    this.setStateForId(this.unmergeState, ids, {
-      checked: false,
-      busy: true
-    });
-    this.triggerUnmergeState();
-    let loadingIndicator = IndicatorStore.add(loadingMessage);
+      // Disable unmerge button
+      this.unmergeDisabled = true;
+
+      // Disable rows
+      this.setStateForId(this.unmergeState, ids, {
+        checked: false,
+        busy: true
+      });
+      this.triggerUnmergeState();
+      let loadingIndicator = IndicatorStore.add(loadingMessage);
 
-    let promise = new Promise((resolve, reject) => {
       api.request(`/issues/${groupId}/hashes/`, {
         method: 'DELETE',
         query: {
@@ -302,8 +278,6 @@ const GroupingStore = Reflux.createStore({
         }
       });
     });
-
-    return promise;
   },
 
   onMerge({params, query}) {
@@ -364,22 +338,16 @@ const GroupingStore = Reflux.createStore({
     });
   },
 
-  onExpandFingerprints() {
+  // Toggle collapsed state of all fingerprints
+  onToggleCollapseFingerprints() {
     this.setStateForId(this.unmergeState, this.mergedItems.map(({id}) => id), {
-      collapsed: false
+      collapsed: !this.unmergeLastCollapsed
     });
 
-    this.trigger({
-      unmergeCollapseState: this.unmergeCollapseState
-    });
-  },
-
-  onCollapseFingerprints() {
-    this.setStateForId(this.unmergeState, this.mergedItems.map(({id}) => id), {
-      collapsed: true
-    });
+    this.unmergeLastCollapsed = !this.unmergeLastCollapsed;
 
     this.trigger({
+      unmergeLastCollapsed: this.unmergeLastCollapsed,
       unmergeState: this.unmergeState
     });
   },
@@ -418,7 +386,8 @@ const GroupingStore = Reflux.createStore({
       'unmergeDisabled',
       'unmergeState',
       'unmergeList',
-      'unmergeCollapseState'
+      'enableFingerprintCompare',
+      'unmergeLastCollapsed'
     ]);
     this.trigger(state);
     return state;
diff --git a/src/sentry/static/sentry/app/views/groupMerged/groupMergedView.jsx b/src/sentry/static/sentry/app/views/groupMerged/groupMergedView.jsx
index f3840d481d..7583ac49d0 100644
--- a/src/sentry/static/sentry/app/views/groupMerged/groupMergedView.jsx
+++ b/src/sentry/static/sentry/app/views/groupMerged/groupMergedView.jsx
@@ -119,8 +119,7 @@ const GroupMergedView = React.createClass({
             busyMap={this.state.busy}
             hiddenMap={this.state.hidden}
             onUnmerge={this.handleUnmerge}
-            onCollapse={GroupingActions.collapseFingerprints}
-            onExpand={GroupingActions.expandFingerprints}
+            onToggleCollapse={GroupingActions.toggleCollapseFingerprints}
           />}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/groupMerged/mergedItem.jsx b/src/sentry/static/sentry/app/views/groupMerged/mergedItem.jsx
index 534aae554d..9181557069 100644
--- a/src/sentry/static/sentry/app/views/groupMerged/mergedItem.jsx
+++ b/src/sentry/static/sentry/app/views/groupMerged/mergedItem.jsx
@@ -65,18 +65,18 @@ const MergedItem = React.createClass({
   },
 
   handleToggle(e) {
-    let {disabled, fingerprint} = this.props;
+    let {disabled, fingerprint, event} = this.props;
 
     if (disabled || this.state.busy) return;
 
     // clicking anywhere in the row will toggle the checkbox
-    GroupingActions.toggleUnmerge(fingerprint);
+    GroupingActions.toggleUnmerge([fingerprint, event.id]);
   },
 
   render() {
     let {disabled, event, orgId, fingerprint, projectId, groupId} = this.props;
     let checkboxDisabled = disabled || this.state.disabled;
-    let cx = classNames('fingerprint-group', {
+    let cx = classNames('merged-group', {
       expanded: !this.state.collapsed,
       busy: this.state.busy
     });
diff --git a/src/sentry/static/sentry/app/views/groupMerged/mergedList.jsx b/src/sentry/static/sentry/app/views/groupMerged/mergedList.jsx
index 9221809c34..80dbac3cf1 100644
--- a/src/sentry/static/sentry/app/views/groupMerged/mergedList.jsx
+++ b/src/sentry/static/sentry/app/views/groupMerged/mergedList.jsx
@@ -11,7 +11,7 @@ import QueryCount from '../../components/queryCount';
 const MergedList = React.createClass({
   propTypes: {
     onUnmerge: PropTypes.func.isRequired,
-    onCollapse: PropTypes.func.isRequired,
+    onToggleCollapse: PropTypes.func.isRequired,
     items: PropTypes.arrayOf(Event),
     pageLinks: PropTypes.string
   },
@@ -26,7 +26,7 @@ const MergedList = React.createClass({
   },
 
   render() {
-    let {items, pageLinks, onCollapse, onUnmerge, ...otherProps} = this.props;
+    let {items, pageLinks, onToggleCollapse, onUnmerge, ...otherProps} = this.props;
     let itemsWithLatestEvent = items.filter(({latestEvent}) => !!latestEvent);
     let hasResults = itemsWithLatestEvent.length > 0;
 
@@ -45,7 +45,11 @@ const MergedList = React.createClass({
           <QueryCount count={itemsWithLatestEvent.length} />
         </h2>
 
-        <MergedToolbar onCollapse={onCollapse} onUnmerge={onUnmerge} />
+        <MergedToolbar
+          {...otherProps}
+          onToggleCollapse={onToggleCollapse}
+          onUnmerge={onUnmerge}
+        />
 
         <div className="merged-list">
           {itemsWithLatestEvent.map(({id, latestEvent}) => (
diff --git a/src/sentry/static/sentry/app/views/groupMerged/mergedToolbar.jsx b/src/sentry/static/sentry/app/views/groupMerged/mergedToolbar.jsx
index 35a773c906..8147b19263 100644
--- a/src/sentry/static/sentry/app/views/groupMerged/mergedToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupMerged/mergedToolbar.jsx
@@ -1,10 +1,12 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
+import _ from 'lodash';
 
 import {t} from '../../locale';
 import GroupingStore from '../../stores/groupingStore';
-
+import ProjectActions from '../../actions/projectActions';
+import Button from '../../components/buttons/button';
 import LinkWithConfirmation from '../../components/linkWithConfirmation';
 import Toolbar from '../../components/toolbar';
 import SpreadLayout from '../../components/spreadLayout';
@@ -12,48 +14,95 @@ import SpreadLayout from '../../components/spreadLayout';
 const MergedToolbar = React.createClass({
   propTypes: {
     onUnmerge: PropTypes.func,
-    onCollapse: PropTypes.func
+    groupId: PropTypes.string,
+    onToggleCollapse: PropTypes.func
   },
 
   mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
+
   getInitialState() {
+    let {
+      unmergeList,
+      unmergeLastCollapsed,
+      unmergeDisabled,
+      enableFingerprintCompare
+    } = GroupingStore;
+
     return {
-      unmergeCount: 0
+      enableFingerprintCompare,
+      unmergeList,
+      unmergeLastCollapsed,
+      unmergeDisabled
     };
   },
 
-  onGroupingUpdate({unmergeList}) {
-    if (unmergeList && unmergeList.size !== this.state.unmergedCount) {
-      this.setState({
-        unmergeCount: unmergeList.size
-      });
-    }
+  onGroupingUpdate(updateObj) {
+    let allowedKeys = [
+      'unmergeLastCollapsed',
+      'unmergeDisabled',
+      'unmergeList',
+      'enableFingerprintCompare'
+    ];
+
+    this.setState(_.pick(updateObj, allowedKeys));
+  },
+
+  handleShowDiff(e) {
+    let {groupId} = this.props;
+    let entries = this.state.unmergeList.entries();
+
+    // `unmergeList` should only have 2 items in map
+    if (entries.length !== 2) return;
+
+    // only need eventId, not fingerprint
+    let [baseEventId, targetEventId] = Array.from(entries).map(([, eventId]) => eventId);
+    ProjectActions.openDiffModal({
+      baseIssueId: groupId,
+      targetIssueId: groupId,
+      baseEventId,
+      targetEventId
+    });
+
+    e.stopPropagation();
   },
 
   render() {
-    let {onUnmerge, onCollapse} = this.props;
+    let {onUnmerge, onToggleCollapse} = this.props;
+    let unmergeCount = (this.state.unmergeList && this.state.unmergeList.size) || 0;
+
     return (
       <Toolbar className="merged-toolbar">
         <SpreadLayout responsive>
           <SpreadLayout>
             <div className="merged-toolbar-actions">
               <LinkWithConfirmation
-                disabled={this.state.unmergeCount === 0}
-                title={t(`Unmerging ${this.state.unmergeCount} events`)}
+                disabled={this.state.unmergeDisabled}
+                title={t(`Unmerging ${unmergeCount} events`)}
                 message={t(
                   'These events will be unmerged and grouped into a new issue. Are you sure you want to unmerge these events?'
                 )}
                 className="btn btn-sm btn-default"
                 onConfirm={onUnmerge}>
-                {t('Unmerge')} ({this.state.unmergeCount || 0})
+                {t('Unmerge')} ({unmergeCount || 0})
               </LinkWithConfirmation>
+
+              <Button
+                style={{marginLeft: 10}}
+                size="small"
+                disabled={!this.state.enableFingerprintCompare}
+                onClick={this.handleShowDiff}>
+                {t('Compare')}
+              </Button>
             </div>
           </SpreadLayout>
           <SpreadLayout>
             <div>
-              <button className="btn btn-sm btn-default" onClick={onCollapse}>
-                Collapse All
-              </button>
+              <Button
+                className="toggle-collapse-all"
+                size="small"
+                onClick={onToggleCollapse}>
+                {this.state.unmergeLastCollapsed ? t('Expand All') : t('Collapse All')}
+              </Button>
             </div>
           </SpreadLayout>
         </SpreadLayout>
diff --git a/tests/js/spec/stores/groupingStore.spec.jsx b/tests/js/spec/stores/groupingStore.spec.jsx
index c2956291f4..bf6467ceaa 100644
--- a/tests/js/spec/stores/groupingStore.spec.jsx
+++ b/tests/js/spec/stores/groupingStore.spec.jsx
@@ -441,12 +441,10 @@ describe('Grouping Store', function() {
   describe('Hashes list (to be unmerged)', function() {
     let unmergeList;
     let unmergeState;
-    let unmergeCollapseState;
 
     beforeEach(async function() {
-      unmergeList = new Set();
+      unmergeList = new Map();
       unmergeState = new Map();
-      unmergeCollapseState = new Set();
       await GroupingStore.onFetch([
         {dataKey: 'merged', endpoint: '/issues/groupId/hashes/'}
       ]);
@@ -467,15 +465,15 @@ describe('Grouping Store', function() {
 
       it('can check and uncheck unlocked items', function() {
         // Check
-        GroupingStore.onToggleUnmerge('2');
-        unmergeList.add('2');
+        GroupingStore.onToggleUnmerge(['2', 'event-2']);
+        unmergeList.set('2', 'event-2');
         unmergeState.set('2', {busy: false, checked: true});
 
         expect(GroupingStore.unmergeList).toEqual(unmergeList);
         expect(GroupingStore.unmergeState).toEqual(unmergeState);
 
         // Uncheck
-        GroupingStore.onToggleUnmerge('2');
+        GroupingStore.onToggleUnmerge(['2', 'event-2']);
         unmergeList.delete('2');
         unmergeState.set('2', {busy: false, checked: false});
 
@@ -483,48 +481,60 @@ describe('Grouping Store', function() {
         expect(GroupingStore.unmergeState).toEqual(unmergeState);
 
         // Check
-        GroupingStore.onToggleUnmerge('2');
-        unmergeList.add('2');
+        GroupingStore.onToggleUnmerge(['2', 'event-2']);
+        unmergeList.set('2', 'event-2');
         unmergeState.set('2', {busy: false, checked: true});
 
         expect(GroupingStore.unmergeList).toEqual(unmergeList);
         expect(GroupingStore.unmergeState).toEqual(unmergeState);
 
         expect(trigger).toHaveBeenLastCalledWith({
-          unmergeCollapseState,
+          enableFingerprintCompare: false,
+          unmergeLastCollapsed: false,
           unmergeDisabled: false,
           unmergeList,
           unmergeState
         });
       });
 
-      it('selecting the second to last available checkbox should disable the remaining checkbox and re-enable when unchecking', function() {
-        GroupingStore.onToggleUnmerge('3');
-        GroupingStore.onToggleUnmerge('4');
-        unmergeList.add('3');
-        unmergeList.add('4');
+      it('should have Compare button enabled only when two fingerprints are checked', function() {
+        expect(GroupingStore.enableFingerprintCompare).toBe(false);
+
+        GroupingStore.onToggleUnmerge(['2', 'event-2']);
+        GroupingStore.onToggleUnmerge(['3', 'event-3']);
+        expect(GroupingStore.enableFingerprintCompare).toBe(true);
+
+        GroupingStore.onToggleUnmerge(['2', 'event-2']);
+        expect(GroupingStore.enableFingerprintCompare).toBe(false);
+      });
+
+      it('selecting all available checkboxes should disable the unmerge button and re-enable when unchecking', function() {
+        GroupingStore.onToggleUnmerge(['2', 'event-2']);
+        GroupingStore.onToggleUnmerge(['3', 'event-3']);
+        GroupingStore.onToggleUnmerge(['4', 'event-4']);
+        unmergeList.set('2', 'event-2');
+        unmergeList.set('3', 'event-3');
+        unmergeList.set('4', 'event-4');
+        unmergeState.set('2', {busy: false, checked: true});
         unmergeState.set('3', {busy: false, checked: true});
         unmergeState.set('4', {busy: false, checked: true});
-        unmergeState.set('2', {busy: false, disabled: true});
 
-        expect(GroupingStore.remainingItem).toMatchObject({
-          id: '2'
-        });
         expect(GroupingStore.unmergeList).toEqual(unmergeList);
         expect(GroupingStore.unmergeState).toEqual(unmergeState);
+        expect(GroupingStore.unmergeDisabled).toBe(true);
 
         // Unchecking
-        GroupingStore.onToggleUnmerge('4');
+        GroupingStore.onToggleUnmerge(['4', 'event-4']);
         unmergeList.delete('4');
         unmergeState.set('4', {busy: false, checked: false});
-        unmergeState.set('2', {busy: false, disabled: false});
 
-        expect(GroupingStore.remainingItem).toBe(null);
         expect(GroupingStore.unmergeList).toEqual(unmergeList);
         expect(GroupingStore.unmergeState).toEqual(unmergeState);
+        expect(GroupingStore.unmergeDisabled).toBe(false);
 
         expect(trigger).toHaveBeenLastCalledWith({
-          unmergeCollapseState,
+          enableFingerprintCompare: true,
+          unmergeLastCollapsed: false,
           unmergeDisabled: false,
           unmergeList,
           unmergeState
@@ -543,8 +553,8 @@ describe('Grouping Store', function() {
       afterEach(function() {});
 
       it('disables rows to be merged', function() {
-        GroupingStore.onToggleUnmerge('1');
-        unmergeList.add('1');
+        GroupingStore.onToggleUnmerge(['1', 'event-1']);
+        unmergeList.set('1', 'event-1');
         unmergeState.set('1', {checked: true, busy: false});
 
         trigger.mockClear();
@@ -553,7 +563,8 @@ describe('Grouping Store', function() {
         });
 
         expect(trigger).toHaveBeenCalledWith({
-          unmergeCollapseState,
+          enableFingerprintCompare: false,
+          unmergeLastCollapsed: false,
           unmergeDisabled: true,
           unmergeList,
           unmergeState
@@ -561,8 +572,8 @@ describe('Grouping Store', function() {
       });
 
       it('keeps rows in "busy" state and unchecks after successfully adding to unmerge queue', async function() {
-        GroupingStore.onToggleUnmerge('1');
-        unmergeList.add('1');
+        GroupingStore.onToggleUnmerge(['1', 'event-1']);
+        unmergeList.set('1', 'event-1');
         unmergeState.set('1', {checked: true, busy: false});
 
         let promise = GroupingStore.onUnmerge({
@@ -570,7 +581,8 @@ describe('Grouping Store', function() {
         });
 
         expect(trigger).toHaveBeenCalledWith({
-          unmergeCollapseState,
+          enableFingerprintCompare: false,
+          unmergeLastCollapsed: false,
           unmergeDisabled: true,
           unmergeList,
           unmergeState
@@ -579,9 +591,10 @@ describe('Grouping Store', function() {
         await promise;
 
         expect(trigger).toHaveBeenLastCalledWith({
-          unmergeCollapseState,
+          enableFingerprintCompare: false,
+          unmergeLastCollapsed: false,
           unmergeDisabled: false,
-          unmergeList: new Set(),
+          unmergeList: new Map(),
           unmergeState
         });
       });
@@ -595,8 +608,8 @@ describe('Grouping Store', function() {
           body: {}
         });
 
-        GroupingStore.onToggleUnmerge('2');
-        unmergeList.add('1');
+        GroupingStore.onToggleUnmerge(['2', 'event-2']);
+        unmergeList.set('1', 'event-1');
         unmergeState.set('1', {checked: true, busy: false});
 
         let promise = GroupingStore.onUnmerge({
@@ -604,7 +617,8 @@ describe('Grouping Store', function() {
         });
 
         expect(trigger).toHaveBeenCalledWith({
-          unmergeCollapseState,
+          enableFingerprintCompare: false,
+          unmergeLastCollapsed: false,
           unmergeDisabled: true,
           unmergeList,
           unmergeState
@@ -613,7 +627,8 @@ describe('Grouping Store', function() {
         await promise;
 
         expect(trigger).toHaveBeenLastCalledWith({
-          unmergeCollapseState,
+          enableFingerprintCompare: false,
+          unmergeLastCollapsed: false,
           unmergeDisabled: false,
           unmergeList,
           unmergeState
diff --git a/tests/js/spec/views/__snapshots__/groupMergedView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/groupMergedView.spec.jsx.snap
index 6736829622..362e6bb347 100644
--- a/tests/js/spec/views/__snapshots__/groupMergedView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/groupMergedView.spec.jsx.snap
@@ -246,8 +246,7 @@ exports[`Issues -> Merged View renders with mocked data 1`] = `
           },
         ]
       }
-      onCollapse={[Function]}
-      onExpand={[Function]}
+      onToggleCollapse={[Function]}
       onUnmerge={[Function]}
       orgId="orgId"
       projectId="projectId"
@@ -282,8 +281,11 @@ exports[`Issues -> Merged View renders with mocked data 1`] = `
           </QueryCount>
         </h2>
         <MergedToolbar
-          onCollapse={[Function]}
+          groupId="groupId"
+          onToggleCollapse={[Function]}
           onUnmerge={[Function]}
+          orgId="orgId"
+          projectId="projectId"
         >
           <Toolbar
             className="merged-toolbar"
@@ -372,6 +374,30 @@ exports[`Issues -> Merged View renders with mocked data 1`] = `
                             </Modal>
                           </a>
                         </LinkWithConfirmation>
+                        <Button
+                          disabled={true}
+                          onClick={[Function]}
+                          size="small"
+                          style={
+                            Object {
+                              "marginLeft": 10,
+                            }
+                          }
+                        >
+                          <button
+                            className="button button-default button-sm button-disabled"
+                            disabled={true}
+                            onClick={[Function]}
+                            role="button"
+                            style={
+                              Object {
+                                "marginLeft": 10,
+                              }
+                            }
+                          >
+                            Compare
+                          </button>
+                        </Button>
                       </div>
                     </div>
                   </SpreadLayout>
@@ -380,12 +406,21 @@ exports[`Issues -> Merged View renders with mocked data 1`] = `
                       className="spread-layout"
                     >
                       <div>
-                        <button
-                          className="btn btn-sm btn-default"
+                        <Button
+                          className="toggle-collapse-all"
+                          disabled={false}
                           onClick={[Function]}
+                          size="small"
                         >
-                          Collapse All
-                        </button>
+                          <button
+                            className="toggle-collapse-all button button-default button-sm"
+                            disabled={false}
+                            onClick={[Function]}
+                            role="button"
+                          >
+                            Collapse All
+                          </button>
+                        </Button>
                       </div>
                     </div>
                   </SpreadLayout>
@@ -499,12 +534,11 @@ exports[`Issues -> Merged View renders with mocked data 1`] = `
             fingerprint="2c4887696f708c476a81ce4e834c4b02"
             groupId="groupId"
             itemCount={2}
-            onExpand={[Function]}
             orgId="orgId"
             projectId="projectId"
           >
             <div
-              className="fingerprint-group expanded"
+              className="merged-group expanded"
             >
               <SpreadLayout
                 className="merged-controls"
@@ -999,12 +1033,11 @@ exports[`Issues -> Merged View renders with mocked data 1`] = `
             fingerprint="e05da55328a860b21f62e371f0a7507d"
             groupId="groupId"
             itemCount={2}
-            onExpand={[Function]}
             orgId="orgId"
             projectId="projectId"
           >
             <div
-              className="fingerprint-group expanded"
+              className="merged-group expanded"
             >
               <SpreadLayout
                 className="merged-controls"
@@ -1637,8 +1670,7 @@ exports[`Issues -> Merged View renders with mocked data 2`] = `
           },
         ]
       }
-      onCollapse={[Function]}
-      onExpand={[Function]}
+      onToggleCollapse={[Function]}
       onUnmerge={[Function]}
       orgId="orgId"
       projectId="projectId"
@@ -1673,8 +1705,11 @@ exports[`Issues -> Merged View renders with mocked data 2`] = `
           </QueryCount>
         </h2>
         <MergedToolbar
-          onCollapse={[Function]}
+          groupId="groupId"
+          onToggleCollapse={[Function]}
           onUnmerge={[Function]}
+          orgId="orgId"
+          projectId="projectId"
         >
           <Toolbar
             className="merged-toolbar"
@@ -1763,6 +1798,30 @@ exports[`Issues -> Merged View renders with mocked data 2`] = `
                             </Modal>
                           </a>
                         </LinkWithConfirmation>
+                        <Button
+                          disabled={true}
+                          onClick={[Function]}
+                          size="small"
+                          style={
+                            Object {
+                              "marginLeft": 10,
+                            }
+                          }
+                        >
+                          <button
+                            className="button button-default button-sm button-disabled"
+                            disabled={true}
+                            onClick={[Function]}
+                            role="button"
+                            style={
+                              Object {
+                                "marginLeft": 10,
+                              }
+                            }
+                          >
+                            Compare
+                          </button>
+                        </Button>
                       </div>
                     </div>
                   </SpreadLayout>
@@ -1771,12 +1830,21 @@ exports[`Issues -> Merged View renders with mocked data 2`] = `
                       className="spread-layout"
                     >
                       <div>
-                        <button
-                          className="btn btn-sm btn-default"
+                        <Button
+                          className="toggle-collapse-all"
+                          disabled={false}
                           onClick={[Function]}
+                          size="small"
                         >
-                          Collapse All
-                        </button>
+                          <button
+                            className="toggle-collapse-all button button-default button-sm"
+                            disabled={false}
+                            onClick={[Function]}
+                            role="button"
+                          >
+                            Collapse All
+                          </button>
+                        </Button>
                       </div>
                     </div>
                   </SpreadLayout>
@@ -1890,12 +1958,11 @@ exports[`Issues -> Merged View renders with mocked data 2`] = `
             fingerprint="2c4887696f708c476a81ce4e834c4b02"
             groupId="groupId"
             itemCount={2}
-            onExpand={[Function]}
             orgId="orgId"
             projectId="projectId"
           >
             <div
-              className="fingerprint-group expanded"
+              className="merged-group expanded"
             >
               <SpreadLayout
                 className="merged-controls"
@@ -2390,12 +2457,11 @@ exports[`Issues -> Merged View renders with mocked data 2`] = `
             fingerprint="e05da55328a860b21f62e371f0a7507d"
             groupId="groupId"
             itemCount={2}
-            onExpand={[Function]}
             orgId="orgId"
             projectId="projectId"
           >
             <div
-              className="fingerprint-group expanded"
+              className="merged-group expanded"
             >
               <SpreadLayout
                 className="merged-controls"
diff --git a/tests/js/spec/views/groupMergedView.spec.jsx b/tests/js/spec/views/groupMergedView.spec.jsx
index 619363ac7c..34732b6a0a 100644
--- a/tests/js/spec/views/groupMergedView.spec.jsx
+++ b/tests/js/spec/views/groupMergedView.spec.jsx
@@ -1,7 +1,6 @@
 /* eslint-env jest */
 import React, {PropTypes} from 'react';
 import {mount, shallow} from 'enzyme';
-import toJson from 'enzyme-to-json';
 
 import GroupMergedView from 'app/views/groupMerged/groupMergedView';
 import {Client} from 'app/api';
@@ -51,7 +50,7 @@ describe('Issues -> Merged View', function() {
       />
     );
 
-    expect(toJson(component)).toMatchSnapshot();
+    expect(component).toMatchSnapshot();
   });
 
   it('renders with mocked data', function(done) {
@@ -70,7 +69,7 @@ describe('Issues -> Merged View', function() {
 
     wrapper.instance().componentDidUpdate = jest.fn(() => {
       if (!wrapper.state('loading')) {
-        expect(toJson(wrapper)).toMatchSnapshot();
+        expect(wrapper).toMatchSnapshot();
         done();
       }
     });
