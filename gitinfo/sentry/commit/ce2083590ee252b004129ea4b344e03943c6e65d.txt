commit ce2083590ee252b004129ea4b344e03943c6e65d
Author: Mark Story <mark@sentry.io>
Date:   Tue Aug 20 12:15:41 2019 -0400

    feat(discover2) Event details graph should reflect current group (#14435)
    
    The summary graph on the event details view needs to reflect the current
    'group'. For example if you are group results by title, projectid, and
    view a result, the summary graph should show all events matching the
    currently selected result. By passing a 'reference event' and field list
    we can generate additional conditions to ensure only sibling events are
    included in the results.
    
    Refs SEN-932

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index c278a50654..3aaedd7b59 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -4,7 +4,13 @@ from rest_framework.exceptions import PermissionDenied
 
 from sentry import eventstore, features
 from sentry.api.bases import OrganizationEndpoint, OrganizationEventsError
-from sentry.api.event_search import get_snuba_query_args, resolve_field_list, InvalidSearchQuery
+from sentry.api.event_search import (
+    get_snuba_query_args,
+    resolve_field_list,
+    InvalidSearchQuery,
+    find_reference_event,
+    get_reference_event_conditions,
+)
 from sentry.models.project import Project
 
 
@@ -44,6 +50,13 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
             except InvalidSearchQuery as exc:
                 raise OrganizationEventsError(exc.message)
 
+        reference_event_id = request.GET.get("referenceEvent")
+        if reference_event_id:
+            reference_event = find_reference_event(snuba_args, reference_event_id)
+            snuba_args["conditions"] = get_reference_event_conditions(
+                snuba_args, reference_event.snuba_data
+            )
+
         # TODO(lb): remove once boolean search is fully functional
         has_boolean_op_flag = features.has(
             "organizations:boolean-search", organization, actor=request.user
diff --git a/src/sentry/api/endpoints/organization_events_stats.py b/src/sentry/api/endpoints/organization_events_stats.py
index c424e6b6a4..65e70a8b02 100644
--- a/src/sentry/api/endpoints/organization_events_stats.py
+++ b/src/sentry/api/endpoints/organization_events_stats.py
@@ -22,7 +22,7 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
                 snuba_args = self.get_snuba_query_args(request, organization, params)
             else:
                 snuba_args = self.get_snuba_query_args_legacy(request, organization)
-        except OrganizationEventsError as exc:
+        except (OrganizationEventsError, InvalidSearchQuery) as exc:
             raise ParseError(detail=six.text_type(exc))
         except NoProjects:
             return Response({"data": []})
@@ -36,12 +36,16 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
 
         result = snuba.transform_aliases_and_query(
             skip_conditions=True,
+            aggregations=snuba_args.get("aggregations"),
+            conditions=snuba_args.get("conditions"),
+            filter_keys=snuba_args.get("filter_keys"),
+            start=snuba_args.get("start"),
+            end=snuba_args.get("end"),
             orderby="time",
             groupby=["time"],
             rollup=rollup,
             referrer="api.organization-events-stats",
             limit=10000,
-            **snuba_args
         )
         serializer = SnubaTSResultSerializer(organization, None, request.user)
         return Response(
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 91f75b81c3..0fa13b0ac8 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -803,9 +803,9 @@ def resolve_field_list(fields, snuba_args):
     }
 
 
-def find_reference_event(snuba_args, reference_event_id):
+def find_reference_event(snuba_args, reference_event_slug):
     try:
-        project_slug, event_id = reference_event_id.split(":")
+        project_slug, event_id = reference_event_slug.split(":")
     except ValueError:
         raise InvalidSearchQuery("Invalid reference event")
     try:
@@ -814,7 +814,6 @@ def find_reference_event(snuba_args, reference_event_id):
         )
     except Project.DoesNotExist:
         raise InvalidSearchQuery("Invalid reference event")
-
     reference_event = eventstore.get_event_by_id(project.id, event_id, eventstore.full_columns)
     if not reference_event:
         raise InvalidSearchQuery("Invalid reference event")
diff --git a/src/sentry/static/sentry/app/actionCreators/events.tsx b/src/sentry/static/sentry/app/actionCreators/events.tsx
index cfceaad0eb..dfa62ee497 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.tsx
@@ -17,6 +17,8 @@ type Options = {
   limit?: number;
   query?: string;
   yAxis?: 'event_count' | 'user_count';
+  field?: string[];
+  referenceEvent?: string;
 };
 
 /**
@@ -46,6 +48,8 @@ export const doEventsRequest = (
     includePrevious,
     query,
     yAxis,
+    field,
+    referenceEvent,
   }: Options
 ): Promise<EventsStats> => {
   const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);
@@ -56,6 +60,8 @@ export const doEventsRequest = (
       environment,
       query,
       yAxis,
+      field,
+      referenceEvent,
     }).filter(([, value]) => typeof value !== 'undefined')
   );
 
diff --git a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
index feee2d3e41..c6f550b848 100644
--- a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
@@ -38,6 +38,8 @@ type EventsRequestPartialProps = {
   start?: any;
   end?: any;
   interval?: string;
+  field?: string[];
+  referenceEvent?: string;
 
   limit?: number;
   query?: string;
@@ -154,6 +156,9 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
      * The yAxis being plotted
      */
     yAxis: PropTypes.string,
+
+    field: PropTypes.arrayOf(PropTypes.string),
+    referenceEvent: PropTypes.string,
   };
 
   static defaultProps = {
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/eventDetails.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/eventDetails.jsx
index 1e5ad37977..55c3936fcb 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/eventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/eventDetails.jsx
@@ -17,10 +17,8 @@ import {getQuery} from './utils';
 const slugValidator = function(props, propName, componentName) {
   const value = props[propName];
   // Accept slugs that look like:
-  // * project-slug:deadbeef:latest
-  // * project-slug:deadbeef:oldest
   // * project-slug:deadbeef
-  if (value && !/^(?:[^:]+):(?:[a-f0-9]+)(?:\:latest|oldest)?$/.test(value)) {
+  if (value && !/^(?:[^:]+):(?:[a-f0-9]+)$/.test(value)) {
     return new Error(`Invalid value for ${propName} provided to ${componentName}.`);
   }
   return null;
@@ -50,19 +48,7 @@ class EventDetails extends AsyncComponent {
   getEndpoints() {
     const {organization, eventSlug, view, location} = this.props;
     const query = getQuery(view, location);
-
-    // Check the eventid for the latest/oldest keyword and use that to choose
-    // the endpoint as oldest/latest have special endpoints.
-    const [projectId, eventId, keyword] = eventSlug.toString().split(':');
-
-    let url = `/organizations/${organization.slug}/events/`;
-    // TODO the latest/oldest links are currently broken as they require a
-    // new endpoint that works with the upcoming discover2 queries.
-    if (['latest', 'oldest'].includes(keyword)) {
-      url += `${keyword}/`;
-    } else {
-      url += `${projectId}:${eventId}/`;
-    }
+    const url = `/organizations/${organization.slug}/events/${eventSlug}/`;
 
     // Get a specific event. This could be coming from
     // a paginated group or standalone event.
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
index 6e65cffbf8..27135805d5 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
@@ -67,26 +67,39 @@ const getCurrentEventMarker = currentEvent => {
  *
  * When a user clicks on a marker we want to update the modal
  * to display an event from that time slice. While each graph slice
- * could contain thousands of events, we use the /latest endpoint
- * to pick one.
+ * could contain thousands of events, we do a search to get the latest
+ * event in the slice.
  */
 const handleClick = async function(
   series,
-  {api, organization, queryString, interval, selection, location}
+  {api, currentEvent, organization, queryString, field, interval, selection, location}
 ) {
   // Get the timestamp that was clicked.
   const value = series.value[0];
 
+  // If the current fieldlist has a timestamp column sort
+  // by that. If there are no timestamp fields we will get non-deterministic
+  // results.
+  const sortField = field.includes('timestamp')
+    ? 'timestamp'
+    : field.includes('last_seen')
+    ? 'last_seen'
+    : null;
+
   // Get events that match the clicked timestamp
   // taking into account the group and current environment & query
   const query = {
     environment: selection.environments,
-    query: queryString,
     start: getUtcDateString(value),
     end: getUtcDateString(value + intervalToMilliseconds(interval)),
+    limit: 1,
+    sort: sortField,
+    referenceEvent: `${currentEvent.projectSlug}:${currentEvent.eventID}`,
+    query: queryString,
+    field,
   };
 
-  const url = `/organizations/${organization.slug}/events/latest/`;
+  const url = `/organizations/${organization.slug}/eventsv2/`;
   let response;
   try {
     response = await api.requestPromise(url, {
@@ -97,12 +110,17 @@ const handleClick = async function(
     // Do nothing, user could have clicked on a blank space.
     return;
   }
+  if (!response.data || !response.data.length) {
+    // Did not find anything.
+    return;
+  }
 
+  const event = response.data[0];
   browserHistory.push({
     pathname: location.pathname,
     query: {
       ...omit(location.query, MODAL_QUERY_KEYS),
-      eventSlug: `${response.projectSlug}:${response.eventID}`,
+      eventSlug: `${event['project.name']}:${event.id || event.latest_event}`,
     },
   });
 };
@@ -136,15 +154,8 @@ const ModalLineGraph = props => {
     },
   };
 
-  // Generate a query string that finds events similar to our
-  // current event based on the type of view being used.
-  const eventConditions = {};
-  if (view.id === 'transactions') {
-    eventConditions.transaction = currentEvent.location;
-  } else {
-    eventConditions['issue.id'] = currentEvent.groupID;
-  }
-  const queryString = getQueryString(view, location, eventConditions);
+  const queryString = getQueryString(view, location);
+  const referenceEvent = `${currentEvent.projectSlug}:${currentEvent.eventID}`;
 
   return (
     <Panel>
@@ -159,6 +170,8 @@ const ModalLineGraph = props => {
         interval={interval}
         showLoading={true}
         query={queryString}
+        field={view.data.fields}
+        referenceEvent={referenceEvent}
         includePrevious={false}
       >
         {({loading, reloading, timeseriesData}) => (
@@ -171,12 +184,14 @@ const ModalLineGraph = props => {
             }}
             onClick={series =>
               handleClick(series, {
+                field: view.data.fields,
                 api,
                 organization,
-                queryString,
+                currentEvent,
                 interval,
                 selection,
                 location,
+                queryString,
               })
             }
             tooltip={tooltip}
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
index bc050f8503..35efb27e5b 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -71,9 +71,8 @@ export function getQuery(view, location) {
  *
  * @param {Object} view defaults containing `.data.query`
  * @param {Location} browser location
- * @param {Object} additional parameters to merge into the query string.
  */
-export function getQueryString(view, location, additional) {
+export function getQueryString(view, location) {
   const queryParts = [];
   if (view.data.query) {
     queryParts.push(view.data.query);
@@ -81,13 +80,6 @@ export function getQueryString(view, location, additional) {
   if (location.query && location.query.query) {
     queryParts.push(location.query.query);
   }
-  if (additional) {
-    Object.entries(additional).forEach(([key, value]) => {
-      if (value) {
-        queryParts.push(`${key}:${value}`);
-      }
-    });
-  }
 
   return queryParts.join(' ');
 }
diff --git a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
index 2b6d23a549..452af1ed0f 100644
--- a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
@@ -71,24 +71,6 @@ describe('getQueryString()', function() {
     };
     expect(getQueryString(view, location)).toEqual('event.type:transaction TypeError');
   });
-
-  it('includes non-empty additional data', function() {
-    const view = {
-      data: {
-        query: 'event.type:transaction',
-      },
-    };
-    const location = {};
-    const additional = {
-      nope: '',
-      undef: undefined,
-      nullish: null,
-      yes: 'value',
-    };
-    expect(getQueryString(view, location, additional)).toEqual(
-      'event.type:transaction yes:value'
-    );
-  });
 });
 
 describe('eventTagSearchUrl()', function() {
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index a027f6dca6..4310c4fb17 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from six.moves.urllib.parse import urlencode
-
 from datetime import timedelta
 from django.utils import timezone
 
@@ -10,6 +8,10 @@ from django.core.urlresolvers import reverse
 from sentry.testutils import APITestCase, SnubaTestCase
 
 
+def iso_timestamp(date):
+    return date.isoformat()[:19]
+
+
 class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationEventsStatsEndpointTest, self).setUp()
@@ -21,29 +23,37 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
 
         self.project = self.create_project()
         self.project2 = self.create_project()
-
-        self.group = self.create_group(project=self.project)
-        self.group2 = self.create_group(project=self.project2)
-
         self.user = self.create_user()
         self.user2 = self.create_user()
-        self.create_event(
-            event_id="a" * 32,
-            group=self.group,
-            datetime=self.day_ago + timedelta(minutes=1),
-            tags={"sentry:user": self.user.email},
+        self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "message": "very bad",
+                "timestamp": iso_timestamp(self.day_ago + timedelta(minutes=1)),
+                "fingerprint": ["group1"],
+                "tags": {"sentry:user": self.user.email},
+            },
+            project_id=self.project.id,
         )
-        self.create_event(
-            event_id="b" * 32,
-            group=self.group2,
-            datetime=self.day_ago + timedelta(hours=1, minutes=1),
-            tags={"sentry:user": self.user2.email},
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "message": "oh my",
+                "timestamp": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=1)),
+                "fingerprint": ["group2"],
+                "tags": {"sentry:user": self.user2.email},
+            },
+            project_id=self.project2.id,
         )
-        self.create_event(
-            event_id="c" * 32,
-            group=self.group2,
-            datetime=self.day_ago + timedelta(hours=1, minutes=2),
-            tags={"sentry:user": self.user2.email},
+        self.store_event(
+            data={
+                "event_id": "c" * 32,
+                "message": "very bad",
+                "timestamp": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=2)),
+                "fingerprint": ["group2"],
+                "tags": {"sentry:user": self.user2.email},
+            },
+            project_id=self.project2.id,
         )
         self.url = reverse(
             "sentry-api-0-organization-events-stats",
@@ -52,17 +62,12 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
 
     def test_simple(self):
         response = self.client.get(
-            "%s?%s"
-            % (
-                self.url,
-                urlencode(
-                    {
-                        "start": self.day_ago.isoformat()[:19],
-                        "end": (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-                        "interval": "1h",
-                    }
-                ),
-            ),
+            self.url,
+            data={
+                "start": iso_timestamp(self.day_ago),
+                "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
+                "interval": "1h",
+            },
             format="json",
         )
 
@@ -86,18 +91,16 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
         assert len(response.data["data"]) == 0
 
     def test_groupid_filter(self):
-        url = "%s?%s" % (
+        response = self.client.get(
             self.url,
-            urlencode(
-                {
-                    "start": self.day_ago.isoformat()[:19],
-                    "end": (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-                    "interval": "1h",
-                    "group": self.group.id,
-                }
-            ),
+            data={
+                "start": iso_timestamp(self.day_ago),
+                "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
+                "interval": "1h",
+                "group": self.group.id,
+            },
+            format="json",
         )
-        response = self.client.get(url, format="json")
 
         assert response.status_code == 200, response.content
         assert len(response.data["data"])
@@ -109,25 +112,24 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
         assert response.status_code == 400, response.content
 
     def test_user_count(self):
-        self.create_event(
-            event_id="d" * 32,
-            group=self.group2,
-            datetime=self.day_ago + timedelta(minutes=2),
-            tags={"sentry:user": self.user2.email},
+        self.store_event(
+            data={
+                "event_id": "d" * 32,
+                "message": "something",
+                "timestamp": iso_timestamp(self.day_ago + timedelta(minutes=2)),
+                "tags": {"sentry:user": self.user2.email},
+                "fingerprint": ["group2"],
+            },
+            project_id=self.project2.id,
         )
         response = self.client.get(
-            "%s?%s"
-            % (
-                self.url,
-                urlencode(
-                    {
-                        "start": self.day_ago.isoformat()[:19],
-                        "end": (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-                        "interval": "1h",
-                        "yAxis": "user_count",
-                    }
-                ),
-            ),
+            self.url,
+            data={
+                "start": iso_timestamp(self.day_ago),
+                "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
+                "interval": "1h",
+                "yAxis": "user_count",
+            },
             format="json",
         )
         assert response.status_code == 200, response.content
@@ -139,18 +141,13 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
 
     def test_with_event_count_flag(self):
         response = self.client.get(
-            "%s?%s"
-            % (
-                self.url,
-                urlencode(
-                    {
-                        "start": self.day_ago.isoformat()[:19],
-                        "end": (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
-                        "interval": "1h",
-                        "yAxis": "event_count",
-                    }
-                ),
-            ),
+            self.url,
+            data={
+                "start": iso_timestamp(self.day_ago),
+                "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
+                "interval": "1h",
+                "yAxis": "event_count",
+            },
             format="json",
         )
 
@@ -167,8 +164,8 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
                 self.url,
                 format="json",
                 data={
-                    "start": self.day_ago.isoformat()[:19],
-                    "end": (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+                    "start": iso_timestamp(self.day_ago),
+                    "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
                     "interval": "1h",
                     "yAxis": "count()",
                 },
@@ -186,8 +183,8 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
                 self.url,
                 format="json",
                 data={
-                    "start": self.day_ago.isoformat()[:19],
-                    "end": (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+                    "start": iso_timestamp(self.day_ago),
+                    "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
                     "interval": "1h",
                     "yAxis": "count_unique(user)",
                 },
@@ -205,10 +202,90 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
                 self.url,
                 format="json",
                 data={
-                    "start": self.day_ago.isoformat()[:19],
-                    "end": (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+                    "start": iso_timestamp(self.day_ago),
+                    "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
                     "interval": "1h",
                     "yAxis": "nope(lol)",
                 },
             )
         assert response.status_code == 400, response.content
+
+    def test_with_field_and_reference_event_invalid(self):
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "start": iso_timestamp(self.day_ago),
+                    "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
+                    "interval": "1h",
+                    "referenceEvent": "nope-invalid",
+                    "yAxis": "count()",
+                },
+            )
+        assert response.status_code == 400, response.content
+        assert "reference" in response.content
+
+    def test_only_reference_event(self):
+        # Create a new event that message matches events made in setup
+        event = self.store_event(
+            data={
+                "event_id": "e" * 32,
+                "message": "oh my",
+                "timestamp": iso_timestamp(self.day_ago + timedelta(minutes=2)),
+                "tags": {"sentry:user": "bob@example.com"},
+                "fingerprint": ["group3"],
+            },
+            project_id=self.project.id,
+        )
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "start": iso_timestamp(self.day_ago),
+                    "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
+                    "interval": "1h",
+                    "referenceEvent": "%s:%s" % (self.project.slug, event.event_id),
+                    "yAxis": "count()",
+                },
+            )
+        assert response.status_code == 200, response.content
+        # Because we didn't send fields, the reference event is not applied
+        assert [attrs for time, attrs in response.data["data"]] == [
+            [],
+            [{"count": 2}],
+            [{"count": 2}],
+        ]
+
+    def test_field_and_reference_event(self):
+        # Create a new event that message matches events made in setup
+        event = self.store_event(
+            data={
+                "event_id": "e" * 32,
+                "message": "oh my",
+                "timestamp": iso_timestamp(self.day_ago + timedelta(minutes=2)),
+                "tags": {"sentry:user": "bob@example.com"},
+                "fingerprint": ["group3"],
+            },
+            project_id=self.project.id,
+        )
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "start": iso_timestamp(self.day_ago),
+                    "end": iso_timestamp(self.day_ago + timedelta(hours=1, minutes=59)),
+                    "field": ["message", "count()"],
+                    "interval": "1h",
+                    "referenceEvent": "%s:%s" % (self.project.slug, event.event_id),
+                    "yAxis": "count()",
+                },
+            )
+        assert response.status_code == 200, response.content
+        assert [attrs for time, attrs in response.data["data"]] == [
+            [],
+            [{"count": 1}],
+            [{"count": 1}],
+        ]
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 7f25197446..8e66104bfd 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -503,3 +503,50 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data["data"]) == 0
+
+    def test_reference_event(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        reference = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+            },
+            project_id=project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "transaction": "/example",
+                "message": "how to make more faster?",
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "c" * 32,
+                "transaction": "/nomatch",
+                "message": "how to make fast",
+                "timestamp": self.min_ago,
+            },
+            project_id=project.id,
+        )
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["transaction", "count()"],
+                    "query": "",
+                    "referenceEvent": "{}:{}".format(project.slug, reference.event_id),
+                },
+            )
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        data = response.data["data"]
+        assert data[0]["transaction"] == "/example"
+        assert data[0]["latest_event"] == "b" * 32
