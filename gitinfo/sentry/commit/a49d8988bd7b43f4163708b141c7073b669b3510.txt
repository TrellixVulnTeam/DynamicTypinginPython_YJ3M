commit a49d8988bd7b43f4163708b141c7073b669b3510
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Thu Apr 2 16:54:54 2020 -0700

    ref(experiments): Remove guides experiment (#18036)

diff --git a/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx b/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx
index 834fb79ed9..9232f7d70e 100644
--- a/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx
+++ b/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx
@@ -4,166 +4,83 @@ import {t, tct} from 'app/locale';
 import {GuidesContent} from 'app/components/assistant/types';
 import ExternalLink from 'app/components/links/externalLink';
 
-export default function getGuidesContent(user): GuidesContent {
-  const hasExperiment = user?.experiments?.AssistantGuideExperiment === 1;
-
+export default function getGuidesContent(): GuidesContent {
   return [
-    hasExperiment
-      ? {
-          guide: 'issue',
-          requiredTargets: ['issue_title', 'exception'],
-          steps: [
-            {
-              title: t("Let's Get This Over With"),
-              target: 'issue_title',
-              description: t(
-                `No one likes a product tour. But stick with us, and you'll find it a
+    {
+      guide: 'issue',
+      requiredTargets: ['issue_title', 'exception'],
+      steps: [
+        {
+          title: t("Let's Get This Over With"),
+          target: 'issue_title',
+          description: t(
+            `No one likes a product tour. But stick with us, and you'll find it a
                 whole lot easier to use Sentry's Issue details page.`
-              ),
-            },
-            {
-              title: t('Resolve Your Issues'),
-              target: 'resolve',
-              description: t(
-                'So you fixed your problem? Congrats. Hit resolve to make it all go away.'
-              ),
-            },
-            {
-              title: t('Deal With It Later, Or Never'),
-              target: 'ignore_delete_discard',
-              description: t(
-                `Just can't deal with this Issue right now? Ignore it. Saving it for later?
+          ),
+        },
+        {
+          title: t('Resolve Your Issues'),
+          target: 'resolve',
+          description: t(
+            'So you fixed your problem? Congrats. Hit resolve to make it all go away.'
+          ),
+        },
+        {
+          title: t('Deal With It Later, Or Never'),
+          target: 'ignore_delete_discard',
+          description: t(
+            `Just can't deal with this Issue right now? Ignore it. Saving it for later?
                 Star it. Want it gone and out of your life forever?
                 Delete that sh*t.`
-              ),
-            },
-            {
-              title: t('Identify Your Issues'),
-              target: 'issue_number',
-              description: tct(
-                `You've got a lot of Issues. That's fine. Use the Issue number in your commit mesage,
+          ),
+        },
+        {
+          title: t('Identify Your Issues'),
+          target: 'issue_number',
+          description: tct(
+            `You've got a lot of Issues. That's fine. Use the Issue number in your commit mesage,
                 and we'll automatically resolve the Issue when your code is deployed. [link:Learn more]`,
-                {link: <ExternalLink href="https://docs.sentry.io/learn/releases/" />}
-              ),
-            },
-            {
-              title: t('Annoy the Right People'),
-              target: 'owners',
-              description: tct(
-                `Notification overload makes it tempting to hurl your phone into the ocean.
+            {link: <ExternalLink href="https://docs.sentry.io/learn/releases/" />}
+          ),
+        },
+        {
+          title: t('Annoy the Right People'),
+          target: 'owners',
+          description: tct(
+            `Notification overload makes it tempting to hurl your phone into the ocean.
                 Define who is responsible for what, so alerts reach the right people and your
                 devices stay on dry land. [link:Learn more]`,
-                {
-                  link: (
-                    <ExternalLink href="https://docs.sentry.io/learn/issue-owners/" />
-                  ),
-                }
-              ),
-            },
             {
-              title: t('Find Information You Can Use'),
-              target: 'tags',
-              description: t(
-                `So many bugs, so little time. When you've got bugs as far as the mouse can scroll,
+              link: <ExternalLink href="https://docs.sentry.io/learn/issue-owners/" />,
+            }
+          ),
+        },
+        {
+          title: t('Find Information You Can Use'),
+          target: 'tags',
+          description: t(
+            `So many bugs, so little time. When you've got bugs as far as the mouse can scroll,
                 search and filter Events with tags or visualize Issues with a heat map.`
-              ),
-            },
-            {
-              title: t('Narrow Down Suspects'),
-              target: 'exception',
-              description: t(
-                `We've got stack trace. See the exact sequence of function calls leading to the error
+          ),
+        },
+        {
+          title: t('Narrow Down Suspects'),
+          target: 'exception',
+          description: t(
+            `We've got stack trace. See the exact sequence of function calls leading to the error
                 in question, no detective skills necessary.`
-              ),
-            },
-            {
-              title: t('Retrace Your Steps'),
-              target: 'breadcrumbs',
-              description: t(
-                `Not sure how you got here? Sentry automatically captures breadcrumbs for events in web
+          ),
+        },
+        {
+          title: t('Retrace Your Steps'),
+          target: 'breadcrumbs',
+          description: t(
+            `Not sure how you got here? Sentry automatically captures breadcrumbs for events in web
                 frameworks to lead you straight to your error.`
-              ),
-            },
-          ],
-        }
-      : {
-          guide: 'issue',
-          requiredTargets: ['issue_title', 'exception'],
-          steps: [
-            {
-              title: t('Issue Details'),
-              target: 'issue_title',
-              description: t(
-                "The issue page contains all the details about an issue. Let's get started."
-              ),
-            },
-            {
-              title: t('Stacktrace'),
-              target: 'exception',
-              description: t(
-                `See the sequence of function calls that led to the error, and global/local variables
-                for each stack frame.`
-              ),
-            },
-            {
-              title: t('Breadcrumbs'),
-              target: 'breadcrumbs',
-              description: t(
-                `Breadcrumbs are a trail of events that happened prior to the error. They're similar
-                to traditional logs but can record more rich structured data. When Sentry is used with
-                web frameworks, breadcrumbs are automatically captured for events like database calls and
-                network requests.`
-              ),
-            },
-            {
-              title: t('Tags'),
-              target: 'tags',
-              description: t(
-                `Attach arbitrary key-value pairs to each event which you can search and filter on.
-                View a heatmap of all tags for an issue on the right panel.`
-              ),
-            },
-            {
-              title: t('Resolve'),
-              target: 'resolve',
-              description: tct(
-                `Resolve an issue to remove it from your issue list. Sentry can also [link:alert you]
-                when a new issue occurs or a resolved issue re-occurs.`,
-                {link: <ExternalLink href="/settings/account/notifications/" />}
-              ),
-            },
-            {
-              title: t('Delete and Ignore'),
-              target: 'ignore_delete_discard',
-              description: t(
-                `Delete an issue to remove it from your issue list until it happens again.
-                Ignore an issue to remove it permanently or until certain conditions are met.`
-              ),
-            },
-            {
-              title: t('Issue Number'),
-              target: 'issue_number',
-              description: tct(
-                `Include this unique identifier in your commit message to have Sentry automatically
-                resolve the issue when your code is deployed. [link:Learn more]`,
-                {link: <ExternalLink href="https://docs.sentry.io/learn/releases/" />}
-              ),
-            },
-            {
-              title: t('Ownership Rules'),
-              target: 'owners',
-              description: tct(
-                `Define users or teams responsible for specific file paths or URLs so that alerts can
-                be routed to the right person. [link:Learn more]`,
-                {
-                  link: (
-                    <ExternalLink href="https://docs.sentry.io/learn/issue-owners/" />
-                  ),
-                }
-              ),
-            },
-          ],
+          ),
         },
+      ],
+    },
     {
       guide: 'issue_stream',
       requiredTargets: ['issue_stream'],
diff --git a/src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx b/src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx
index 22936991b2..85af7f5370 100644
--- a/src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx
+++ b/src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx
@@ -1,4 +1,3 @@
-import {ClassNames} from '@emotion/core';
 import createReactClass from 'create-react-class';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -14,11 +13,9 @@ import {
   registerAnchor,
   unregisterAnchor,
 } from 'app/actionCreators/guides';
-import {CloseIcon} from 'app/components/assistant/styles';
 import {Guide} from 'app/components/assistant/types';
 import {t, tct} from 'app/locale';
 import Button from 'app/components/button';
-import ConfigStore from 'app/stores/configStore';
 import GuideStore from 'app/stores/guideStore';
 import Hovercard, {Body as HovercardBody} from 'app/components/hovercard';
 import space from 'app/styles/space';
@@ -88,6 +85,7 @@ const GuideAnchor = createReactClass<Props, State>({
     const active =
       data.currentGuide &&
       data.currentGuide.steps[data.currentStep].target === this.props.target;
+
     this.setState({
       active,
       currentGuide: data.currentGuide,
@@ -121,7 +119,7 @@ const GuideAnchor = createReactClass<Props, State>({
     dismissGuide(currentGuide.guide, step, orgId);
   },
 
-  getHovercardExpBody() {
+  getHovercardBody() {
     const {currentGuide, step} = this.state;
 
     const totalStepCount = currentGuide.steps.length;
@@ -131,7 +129,7 @@ const GuideAnchor = createReactClass<Props, State>({
     const hasManySteps = totalStepCount > 1;
 
     return (
-      <GuideExpContainer>
+      <GuideContainer>
         <GuideContent>
           <GuideTitle>{currentStep.title}</GuideTitle>
           <GuideDescription>{currentStep.description}</GuideDescription>
@@ -139,7 +137,11 @@ const GuideAnchor = createReactClass<Props, State>({
         <GuideAction>
           <div>
             {lastStep ? (
-              <StyledButton size="small" onClick={this.handleFinish}>
+              <StyledButton
+                size="small"
+                href="#" // to clear `#assistant` from the url
+                onClick={this.handleFinish}
+              >
                 {hasManySteps ? t('Enough Already') : t('Got It')}
               </StyledButton>
             ) : (
@@ -168,50 +170,22 @@ const GuideAnchor = createReactClass<Props, State>({
             </StepCount>
           )}
         </GuideAction>
-      </GuideExpContainer>
-    );
-  },
-
-  getHovercardBody() {
-    const {currentGuide, step} = this.state;
-
-    return (
-      <GuideContainer>
-        <GuideInputRow>
-          <StyledTitle>{currentGuide.steps[step].title}</StyledTitle>
-          {step < currentGuide.steps.length - 1 && (
-            <CloseLink onClick={this.handleDismiss} href="#" data-test-id="close-button">
-              <CloseIcon />
-            </CloseLink>
-          )}
-        </GuideInputRow>
-        <StyledContent>
-          <div>{currentGuide.steps[step].description}</div>
-          <Actions>
-            <div>
-              {step < currentGuide.steps.length - 1 ? (
-                <Button priority="success" size="small" onClick={this.handleNextStep}>
-                  {t('Next')}
-                </Button>
-              ) : (
-                <Button priority="success" size="small" onClick={this.handleFinish}>
-                  {t(currentGuide.steps.length === 1 ? 'Got It' : 'Done')}
-                </Button>
-              )}
-            </div>
-          </Actions>
-        </StyledContent>
       </GuideContainer>
     );
   },
 
-  renderHovercardExp() {
-    const {children, position, offset} = this.props;
+  render() {
+    const {disabled, children, position, offset} = this.props;
+    const {active} = this.state;
+
+    if (!active || disabled) {
+      return children ? children : null;
+    }
 
     return (
       <StyledHovercard
         show
-        body={this.getHovercardExpBody()}
+        body={this.getHovercardBody()}
         tipColor={theme.purple}
         position={position}
         offset={offset}
@@ -220,82 +194,9 @@ const GuideAnchor = createReactClass<Props, State>({
       </StyledHovercard>
     );
   },
-
-  render() {
-    const {disabled, children, position} = this.props;
-    const {active} = this.state;
-    const user = ConfigStore.get('user');
-
-    if (!active || disabled || !user) {
-      return children ? children : null;
-    }
-
-    const hasExperiment = user?.experiments?.AssistantGuideExperiment === 1;
-
-    return hasExperiment ? (
-      this.renderHovercardExp()
-    ) : (
-      <ClassNames>
-        {({css}) => (
-          <Hovercard
-            show
-            body={this.getHovercardBody()}
-            bodyClassName={css`
-              background-color: ${theme.greenDark};
-              margin: -1px;
-            `}
-            tipColor={theme.greenDark}
-            position={position}
-          >
-            <span ref={el => (this.containerElement = el)}>{children}</span>
-          </Hovercard>
-        )}
-      </ClassNames>
-    );
-  },
 });
 
 const GuideContainer = styled('div')`
-  background-color: ${p => p.theme.greenDark};
-  border-color: ${p => p.theme.greenLight};
-  color: ${p => p.theme.offWhite};
-`;
-
-const CloseLink = styled('a')`
-  color: ${p => p.theme.offWhite};
-  &:hover {
-    color: ${p => p.theme.offWhite};
-  }
-  display: flex;
-`;
-
-const GuideInputRow = styled('div')`
-  display: flex;
-  align-items: center;
-`;
-
-const StyledTitle = styled('div')`
-  font-weight: bold;
-  font-size: ${p => p.theme.fontSizeLarge};
-  flex-grow: 1;
-`;
-
-const StyledContent = styled('div')`
-  margin-top: ${space(1)};
-  font-size: ${p => p.theme.fontSizeMedium};
-  line-height: 1.5;
-
-  a {
-    color: ${p => p.theme.greenLight};
-  }
-`;
-
-const Actions = styled('div')`
-  margin-top: 1em;
-`;
-
-// experiment styles
-const GuideExpContainer = styled('div')`
   display: grid;
   grid-template-rows: repeat(2, auto);
   grid-gap: ${space(2)};
diff --git a/src/sentry/static/sentry/app/data/experimentConfig.tsx b/src/sentry/static/sentry/app/data/experimentConfig.tsx
index 4a28e3eb7e..c1623ab53c 100644
--- a/src/sentry/static/sentry/app/data/experimentConfig.tsx
+++ b/src/sentry/static/sentry/app/data/experimentConfig.tsx
@@ -37,12 +37,6 @@ export const experimentList = [
     parameter: 'exposed',
     assignments: [1, 0, -1],
   },
-  {
-    key: 'AssistantGuideExperiment',
-    type: ExperimentType.User,
-    parameter: 'exposed',
-    assignments: [0, 1, -1],
-  },
 ] as const;
 
 export const experimentConfig = experimentList.reduce(
diff --git a/src/sentry/static/sentry/app/stores/guideStore.tsx b/src/sentry/static/sentry/app/stores/guideStore.tsx
index 723e79cd35..5100f51fe1 100644
--- a/src/sentry/static/sentry/app/stores/guideStore.tsx
+++ b/src/sentry/static/sentry/app/stores/guideStore.tsx
@@ -3,12 +3,14 @@ import Reflux from 'reflux';
 
 import {Client} from 'app/api';
 import {Guide, GuidesServerData, GuidesContent} from 'app/components/assistant/types';
-import {logExperiment, trackAnalyticsEvent} from 'app/utils/analytics';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import ConfigStore from 'app/stores/configStore';
 import getGuidesContent from 'app/components/assistant/getGuidesContent';
 import GuideActions from 'app/actions/guideActions';
 import OrganizationsActions from 'app/actions/organizationsActions';
 
+const guidesContent: GuidesContent = getGuidesContent();
+
 type GuideStoreState = {
   /**
    * All tooltip guides
@@ -97,9 +99,6 @@ const guideStoreConfig: Reflux.StoreDefinition & GuideStoreInterface = {
       return;
     }
 
-    const user = ConfigStore.get('user');
-    const guidesContent: GuidesContent = getGuidesContent(user);
-
     // map server guide state (i.e. seen status) with guide content
     const guides = guidesContent.reduce((acc: Guide[], content) => {
       const serverGuide = data.find(guide => guide.guide === content.guide);
@@ -155,8 +154,6 @@ const guideStoreConfig: Reflux.StoreDefinition & GuideStoreInterface = {
       user_id: parseInt(user.id, 10),
     };
     trackAnalyticsEvent(data);
-
-    logExperiment({key: 'AssistantGuideExperiment'});
   },
 
   updatePrevGuide(nextGuide) {
diff --git a/tests/js/spec/components/assistant/guideAnchor.spec.jsx b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
index 9e42a386d1..2f9d369147 100644
--- a/tests/js/spec/components/assistant/guideAnchor.spec.jsx
+++ b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
@@ -39,33 +39,33 @@ describe('GuideAnchor', function() {
     await tick();
     wrapper.update();
 
-    // has old content and design without experiment
     expect(wrapper.find('Hovercard').exists()).toBe(true);
-    expect(wrapper.find('StyledTitle').text()).toBe('Issue Details');
-    expect(wrapper.find('Hovercard').prop('tipColor')).toBe(theme.greenDark);
+    expect(wrapper.find('GuideTitle').text()).toBe("Let's Get This Over With");
+    expect(wrapper.find('Hovercard').prop('tipColor')).toBe(theme.purple);
 
     // Clicking on next should deactivate the current card and activate the next one.
-    wrapper
-      .find('Button')
-      .first()
-      .simulate('click');
+    wrapper.find('StyledButton[aria-label="Next"]').simulate('click');
+
     await tick();
     wrapper.update();
     wrapper2.update();
     expect(wrapper.state('active')).toBeFalsy();
     expect(wrapper2.state('active')).toBeTruthy();
+
     expect(wrapper2.find('Hovercard').exists()).toBe(true);
-    expect(wrapper2.find('StyledTitle').text()).toBe('Stacktrace');
+    expect(wrapper2.find('GuideTitle').text()).toBe('Narrow Down Suspects');
 
     // Clicking on the button in the last step should finish the guide.
     const finishMock = MockApiClient.addMockResponse({
       method: 'PUT',
       url: '/assistant/',
     });
+
     wrapper2
       .find('Button')
       .last()
       .simulate('click');
+
     expect(finishMock).toHaveBeenCalledWith(
       '/assistant/',
       expect.objectContaining({
@@ -87,10 +87,9 @@ describe('GuideAnchor', function() {
       method: 'PUT',
       url: '/assistant/',
     });
-    wrapper
-      .find('[data-test-id="close-button"]')
-      .first()
-      .simulate('click');
+
+    wrapper.find('StyledButton[aria-label="Dismiss"]').simulate('click');
+
     expect(dismissMock).toHaveBeenCalledWith(
       '/assistant/',
       expect.objectContaining({
@@ -101,6 +100,7 @@ describe('GuideAnchor', function() {
         },
       })
     );
+
     await tick();
     expect(wrapper.state('active')).toBeFalsy();
   });
@@ -118,24 +118,6 @@ describe('GuideAnchor', function() {
     expect(wrapper.find('Hovercard').exists()).toBe(false);
   });
 
-  it('has new content and design with experiment', async function() {
-    ConfigStore.config = {
-      user: {
-        isSuperuser: false,
-        dateJoined: new Date(2020, 0, 1),
-        experiments: {AssistantGuideExperiment: 1},
-      },
-    };
-
-    GuideActions.fetchSucceeded(serverGuide);
-    await tick();
-    wrapper.update();
-
-    expect(wrapper.find('Hovercard').exists()).toBe(true);
-    expect(wrapper.find('GuideTitle').text()).toBe("Let's Get This Over With");
-    expect(wrapper.find('Hovercard').prop('tipColor')).toBe(theme.purple);
-  });
-
   it('renders children when disabled', async function() {
     const wrapper3 = mountWithTheme(
       <GuideAnchor disabled target="exception">
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
index 9730310dcd..5727e64e58 100644
--- a/tests/js/spec/stores/guideStore.spec.jsx
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -1,4 +1,4 @@
-import {logExperiment, trackAnalyticsEvent} from 'app/utils/analytics';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import ConfigStore from 'app/stores/configStore';
 import GuideStore from 'app/stores/guideStore';
 
@@ -14,7 +14,6 @@ describe('GuideStore', function() {
 
   beforeEach(function() {
     trackAnalyticsEvent.mockClear();
-    logExperiment.mockClear();
     ConfigStore.config = {
       user,
     };
@@ -87,10 +86,6 @@ describe('GuideStore', function() {
     GuideStore.onNextStep();
     expect(spy).toHaveBeenCalledTimes(1);
     spy.mockRestore();
-
-    expect(logExperiment).toHaveBeenCalledWith({
-      key: 'AssistantGuideExperiment',
-    });
   });
 
   it('only shows guides with server data and content', function() {
