commit 23a27615381e8f5800eaab791b93d497a15a28ab
Author: Ryan Skonnord <ryan.skonnord@sentry.io>
Date:   Mon Apr 27 17:54:36 2020 -0700

    perf(api): Add instrumentation around the Project model in API layer (#18494)

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 24f439ddff..3a0affb0d7 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -4,6 +4,8 @@ import six
 from rest_framework.exceptions import PermissionDenied, ParseError
 from django.core.cache import cache
 
+import sentry_sdk
+
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.helpers.environments import get_environments
@@ -217,19 +219,26 @@ class OrganizationEndpoint(Endpoint):
         if project_ids:
             qs = qs.filter(id__in=project_ids)
 
-        if force_global_perms:
+        with sentry_sdk.start_span(op="fetch_organization_projects") as span:
             projects = list(qs)
-        else:
-            if (
-                user
-                and is_active_superuser(request)
-                or requested_projects
-                or include_all_accessible
-            ):
-                func = request.access.has_project_access
+            span.set_data("Project Count", len(projects))
+        with sentry_sdk.start_span(op="apply_project_permissions") as span:
+            span.set_data("Project Count", len(projects))
+            if force_global_perms:
+                span.set_tag("mode", "force_global_perms")
             else:
-                func = request.access.has_project_membership
-            projects = [p for p in qs if func(p)]
+                if (
+                    user
+                    and is_active_superuser(request)
+                    or requested_projects
+                    or include_all_accessible
+                ):
+                    span.set_tag("mode", "has_project_access")
+                    func = request.access.has_project_access
+                else:
+                    span.set_tag("mode", "has_project_membership")
+                    func = request.access.has_project_membership
+                projects = [p for p in qs if func(p)]
 
         project_ids = set(p.id for p in projects)
 
@@ -285,7 +294,8 @@ class OrganizationEndpoint(Endpoint):
         except Organization.DoesNotExist:
             raise ResourceDoesNotExist
 
-        self.check_object_permissions(request, organization)
+        with sentry_sdk.start_span(op="check_object_permissions_on_organization"):
+            self.check_object_permissions(request, organization)
 
         bind_organization_context(organization)
 
diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 88e47a4c70..c2238a2839 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -5,6 +5,8 @@ import six
 from django.db.models import Q
 from rest_framework.response import Response
 
+import sentry_sdk
+
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.paginator import OffsetPaginator
@@ -107,7 +109,11 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint, EnvironmentMixin):
 
         if get_all_projects:
             queryset = queryset.order_by("slug").select_related("organization")
-            return Response(serialize(list(queryset), request.user, ProjectSummarySerializer()))
+            projects = list(queryset)
+            with sentry_sdk.start_span(op="serialize_all_organization_projects") as span:
+                span.set_data("Project Count", len(projects))
+                serialized = serialize(projects, request.user, ProjectSummarySerializer())
+            return Response(serialized)
         else:
             return self.paginate(
                 request=request,
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index d0029943bb..5b6f35c706 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -7,6 +7,8 @@ import warnings
 from django.conf import settings
 from django.utils.functional import cached_property
 
+import sentry_sdk
+
 from sentry import roles
 from sentry.auth.superuser import is_active_superuser
 from sentry.auth.system import is_system_auth
@@ -360,9 +362,12 @@ def from_member(member, scopes=None):
     requires_sso, sso_is_valid = _sso_params(member)
 
     team_list = member.get_teams()
-    project_list = list(
-        Project.objects.filter(status=ProjectStatus.VISIBLE, teams__in=team_list).distinct()
-    )
+    with sentry_sdk.start_span(op="get_project_access_in_teams") as span:
+        project_list = list(
+            Project.objects.filter(status=ProjectStatus.VISIBLE, teams__in=team_list).distinct()
+        )
+        span.set_data("Project Count", len(project_list))
+        span.set_data("Team Count", len(team_list))
 
     if scopes is not None:
         scopes = set(scopes) & member.get_scopes()
