commit cf063e0a0b2d00f87295f9588bceb0de3d4c1f15
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 9 17:10:18 2016 -0800

    Improve user details mutating support

diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index 509618a88a..5a91a4f761 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from django.conf import settings
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
@@ -9,12 +10,57 @@ from sentry.api.serializers import serialize
 from sentry.models import User
 
 
-class UserSerializer(serializers.ModelSerializer):
-    name = serializers.CharField()
+class BaseUserSerializer(serializers.ModelSerializer):
+    def validate_username(self, attrs, source):
+        value = attrs[source]
+        if User.objects.filter(username__iexact=value).exclude(id=self.object.id).exists():
+            raise serializers.ValidationError('That username is already in use.')
+        return attrs
+
+    def validate(self, attrs):
+        attrs = super(BaseUserSerializer, self).validate(attrs)
+
+        if self.object.email == self.object.username:
+            if attrs.get('username', self.object.email) != self.object.email:
+                attrs.setdefault('email', attrs['username'])
+
+        return attrs
+
+    def restore_object(self, attrs, instance=None):
+        instance = super(BaseUserSerializer, self).restore_object(attrs, instance)
+        instance.is_active = attrs.get('isActive', instance.is_active)
+        return instance
+
+
+class UserSerializer(BaseUserSerializer):
+    class Meta:
+        model = User
+        fields = ('name', 'username', 'email')
+
+    def validate_username(self, attrs, source):
+        value = attrs[source]
+        if User.objects.filter(username__iexact=value).exclude(id=self.object.id).exists():
+            raise serializers.ValidationError('That username is already in use.')
+        return attrs
+
+    def validate(self, attrs):
+        for field in settings.SENTRY_MANAGED_USER_FIELDS:
+            attrs.pop(field, None)
+
+        attrs = super(UserSerializer, self).validate(attrs)
+
+        return attrs
+
+
+class AdminUserSerializer(BaseUserSerializer):
+    isActive = serializers.BooleanField(source='is_active')
 
     class Meta:
         model = User
-        fields = ('name', 'email')
+        # no idea wtf is up with django rest framework, but we need is_active
+        # and isActive
+        fields = ('name', 'username', 'isActive', 'email')
+        # write_only_fields = ('password',)
 
 
 class UserDetailsEndpoint(UserEndpoint):
@@ -24,8 +70,13 @@ class UserDetailsEndpoint(UserEndpoint):
 
     @sudo_required
     def put(self, request, user):
-        serializer = UserSerializer(user, data=request.DATA, partial=True)
+        if request.is_superuser():
+            print('here')
+            serializer_cls = AdminUserSerializer
+        else:
+            serializer_cls = UserSerializer
 
+        serializer = serializer_cls(user, data=request.DATA, partial=True)
         if serializer.is_valid():
             user = serializer.save()
             return Response(serialize(user, request.user))
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index c12bedad47..e4e93ed0ca 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -33,7 +33,7 @@ class UserUpdateTest(APITestCase):
 
         resp = self.client.put(url, data={
             'name': 'hello world',
-            'email': 'b@example.com',
+            'username': 'b@example.com',
         })
         assert resp.status_code == 200, resp.content
         assert resp.data['id'] == str(user.id)
@@ -41,3 +41,29 @@ class UserUpdateTest(APITestCase):
         user = User.objects.get(id=user.id)
         assert user.name == 'hello world'
         assert user.email == 'b@example.com'
+        assert user.username == user.email
+
+    def test_superuser(self):
+        user = self.create_user(email='a@example.com')
+        superuser = self.create_user(email='b@example.com', is_superuser=True)
+
+        self.login_as(user=superuser)
+
+        url = reverse('sentry-api-0-user-details', kwargs={
+            'user_id': user.id,
+        })
+
+        resp = self.client.put(url, data={
+            'name': 'hello world',
+            'email': 'c@example.com',
+            'username': 'foo',
+            'isActive': 'false',
+        })
+        assert resp.status_code == 200, resp.content
+        assert resp.data['id'] == str(user.id)
+
+        user = User.objects.get(id=user.id)
+        assert user.name == 'hello world'
+        assert user.email == 'c@example.com'
+        assert user.username == 'foo'
+        assert not user.is_active
