commit d3249d6e5b8b8e57b9b6ffa526c9232d475cd70a
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Feb 22 16:28:10 2017 -0800

    filter first/last event by project in release serializer (#4967)
    
    * filtr first/last event by project in release serializer
    
    * fix tests

diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index c1d51b784d..835c310907 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -116,24 +116,34 @@ class ReleaseSerializer(Serializer):
         return result
 
     def get_attrs(self, item_list, user, *args, **kwargs):
-        tags = {
-            tk.value: tk
-            for tk in TagValue.objects.filter(
-                project_id__in=ReleaseProject.objects.filter(
-                    release__in=item_list
-                ).values_list('project_id', flat=True),
-                key='sentry:release',
-                value__in=[o.version for o in item_list],
-            )
-        }
+        project = kwargs.get('project')
+        if project:
+            project_ids = [project.id]
+        else:
+            project_ids = ReleaseProject.objects.filter(
+                release__in=item_list
+            ).values_list('project_id', flat=True)
+
+        tags = {}
+        tks = TagValue.objects.filter(
+            project_id__in=project_ids,
+            key='sentry:release',
+            value__in=[o.version for o in item_list],
+        )
+        for tk in tks:
+            val = tags.get(tk.value)
+            tags[tk.value] = {
+                'first_seen': min(tk.first_seen, val['first_seen']) if val else tk.first_seen,
+                'last_seen': max(tk.last_seen, val['last_seen']) if val else tk.last_seen
+            }
         owners = {
             d['id']: d
             for d in serialize(set(i.owner for i in item_list if i.owner_id), user)
         }
 
-        if kwargs.get('project'):
+        if project:
             group_counts_by_release = dict(ReleaseProject.objects.filter(
-                project=kwargs.get('project'),
+                project=project,
                 release__in=item_list
             ).values_list('release_id', 'new_groups'))
         else:
@@ -179,8 +189,8 @@ class ReleaseSerializer(Serializer):
         }
         if attrs['tag']:
             d.update({
-                'lastEvent': attrs['tag'].last_seen,
-                'firstEvent': attrs['tag'].first_seen,
+                'lastEvent': attrs['tag']['last_seen'],
+                'firstEvent': attrs['tag']['first_seen'],
             })
         else:
             d.update({
diff --git a/tests/sentry/api/serializers/test_release.py b/tests/sentry/api/serializers/test_release.py
index f9391ee61c..a46e09239f 100644
--- a/tests/sentry/api/serializers/test_release.py
+++ b/tests/sentry/api/serializers/test_release.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+import datetime
+
 from django.utils import timezone
 from uuid import uuid4
 
@@ -30,7 +32,7 @@ class ReleaseSerializerTest(TestCase):
             release=release,
             project=project2
         ).update(new_groups=1)
-        TagValue.objects.create(
+        tag1 = TagValue.objects.create(
             project=project,
             key='sentry:release',
             value=release.version,
@@ -38,6 +40,14 @@ class ReleaseSerializerTest(TestCase):
             last_seen=timezone.now(),
             times_seen=5,
         )
+        tag2 = TagValue.objects.create(
+            project=project2,
+            key='sentry:release',
+            value=release.version,
+            first_seen=timezone.now() - datetime.timedelta(days=2),
+            last_seen=timezone.now() - datetime.timedelta(days=1),
+            times_seen=5,
+        )
         commit_author = CommitAuthor.objects.create(
             name='stebe',
             email='stebe@sentry.io',
@@ -63,14 +73,18 @@ class ReleaseSerializerTest(TestCase):
         assert result['shortVersion'] == release.version
         # should be sum of all projects
         assert result['newGroups'] == 2
-        assert result['firstEvent']
-        assert result['lastEvent']
+        # should be tags from all projects
+        assert result['firstEvent'] == TagValue.objects.get(id=tag2.id).first_seen
+        assert result['lastEvent'] == TagValue.objects.get(id=tag1.id).last_seen
         assert result['commitCount'] == 1
         assert result['authors'] == [{'name': 'stebe', 'email': 'stebe@sentry.io'}]
 
         result = serialize(release, user, project=project)
         # should be groups from one project
         assert result['newGroups'] == 1
+        # should be tags from one project
+        assert result['firstEvent'] == TagValue.objects.get(id=tag1.id).first_seen
+        assert result['lastEvent'] == TagValue.objects.get(id=tag1.id).last_seen
 
         # Make sure a sha1 value gets truncated
         release.version = '0' * 40
