commit 83b55cf36b5e962b2ca941a8759940658a53c0a7
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Tue Jul 9 21:20:56 2019 +0200

    ref(native): Implement a UI for debug sources (#13898)
    
    Adds a UI for configuring debug sources and also adds server-side support for HTTP and GCS sources.

diff --git a/src/sentry/lang/native/symbolicator.py b/src/sentry/lang/native/symbolicator.py
index 6a5d388f79..37c23f28aa 100644
--- a/src/sentry/lang/native/symbolicator.py
+++ b/src/sentry/lang/native/symbolicator.py
@@ -29,6 +29,8 @@ logger = logging.getLogger(__name__)
 VALID_LAYOUTS = (
     'native',
     'symstore',
+    'symstore_index2',
+    'ssqp',
 )
 
 VALID_FILE_TYPES = (
@@ -68,6 +70,9 @@ COMMON_SOURCE_PROPERTIES = {
         'type': 'string',
         'minLength': 1,
     },
+    'name': {
+        'type': 'string',
+    },
     'layout': LAYOUT_SCHEMA,
     'filetypes': {
         'type': 'array',
@@ -78,6 +83,19 @@ COMMON_SOURCE_PROPERTIES = {
     },
 }
 
+HTTP_SOURCE_SCHEMA = {
+    'type': 'object',
+    'properties': dict(
+        type={
+            'type': 'string',
+            'enum': ['http'],
+        },
+        url={'type': 'string'},
+        **COMMON_SOURCE_PROPERTIES
+    ),
+    'required': ['type', 'id', 'url', 'layout'],
+    'additionalProperties': False,
+}
 
 S3_SOURCE_SCHEMA = {
     'type': 'object',
@@ -97,12 +115,30 @@ S3_SOURCE_SCHEMA = {
     'additionalProperties': False,
 }
 
+GCS_SOURCE_SCHEMA = {
+    'type': 'object',
+    'properties': dict(
+        type={
+            'type': 'string',
+            'enum': ['gcs'],
+        },
+        bucket={'type': 'string'},
+        client_email={'type': 'string'},
+        private_key={'type': 'string'},
+        prefix={'type': 'string'},
+        **COMMON_SOURCE_PROPERTIES
+    ),
+    'required': ['type', 'id', 'bucket', 'client_email', 'private_key', 'layout'],
+    'additionalProperties': False,
+}
+
 SOURCES_SCHEMA = {
     'type': 'array',
     'items': {
         'oneOf': [
-            # TODO: Implement HTTP sources
+            HTTP_SOURCE_SCHEMA,
             S3_SOURCE_SCHEMA,
+            GCS_SOURCE_SCHEMA,
         ],
     }
 }
diff --git a/src/sentry/static/sentry/app/actionCreators/modal.jsx b/src/sentry/static/sentry/app/actionCreators/modal.jsx
index 3a4b200bb3..5ef5b8c5ee 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.jsx
@@ -175,3 +175,13 @@ export function openSentryAppDetailsModal(options = {}) {
       });
     });
 }
+
+export function openDebugFileSourceModal(options = {}) {
+  import(/* webpackChunkName: "DebugFileSourceModal" */ 'app/components/modals/debugFileSourceModal')
+    .then(mod => mod.default)
+    .then(Modal => {
+      openModal(deps => <Modal {...deps} {...options} />, {
+        modalClassName: 'debug-file-source',
+      });
+    });
+}
diff --git a/src/sentry/static/sentry/app/components/modals/debugFileSourceModal.jsx b/src/sentry/static/sentry/app/components/modals/debugFileSourceModal.jsx
new file mode 100644
index 0000000000..fa7911f793
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/debugFileSourceModal.jsx
@@ -0,0 +1,276 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t, tct} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import {objectToArray} from 'app/utils';
+import {
+  AWS_REGIONS,
+  DEBUG_SOURCE_LAYOUTS,
+  DEBUG_SOURCE_CASINGS,
+  getDebugSourceName,
+} from 'app/data/debugFileSources';
+import ExternalLink from 'app/components/links/externalLink';
+import Form from 'app/views/settings/components/forms/form';
+import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
+
+function objectToChoices(obj) {
+  return objectToArray(obj).map(([key, value]) => [key, t(value)]);
+}
+
+const commonFields = {
+  id: {
+    name: 'id',
+    type: 'hidden',
+    required: true,
+    defaultValue: () =>
+      Math.random()
+        .toString(36)
+        .substring(2),
+  },
+  name: {
+    name: 'name',
+    type: 'string',
+    required: true,
+    label: t('Name'),
+    placeholder: t('New Repository'),
+    help: t('A display name for this repository'),
+  },
+  // filters are explicitly not exposed to the UI
+  layoutType: {
+    name: 'layout.type',
+    type: 'select',
+    label: t('Directory Layout'),
+    help: t('The layout of the folder structure.'),
+    defaultValue: 'native',
+    choices: objectToChoices(DEBUG_SOURCE_LAYOUTS),
+  },
+  layoutCasing: {
+    name: 'layout.casing',
+    type: 'select',
+    label: t('Path Casing'),
+    help: t('The case of files and folders.'),
+    defaultValue: 'default',
+    choices: objectToChoices(DEBUG_SOURCE_CASINGS),
+  },
+  prefix: {
+    name: 'prefix',
+    type: 'string',
+    label: 'Root Path',
+    placeholder: '/',
+    help: t('The path at which files are located within this repository.'),
+  },
+  separator: {
+    type: 'separator',
+  },
+};
+
+const httpFields = {
+  url: {
+    name: 'url',
+    type: 'url',
+    required: true,
+    label: t('Download Url'),
+    placeholder: 'https://msdl.microsoft.com/download/symbols/',
+    help: t('Full URL to the symbol server'),
+  },
+};
+
+const s3Fields = {
+  bucket: {
+    name: 'bucket',
+    type: 'string',
+    required: true,
+    label: t('Bucket'),
+    placeholder: 's3-bucket-name',
+    help: t('Name of the S3 bucket. Read permissions are required to download symbols.'),
+  },
+  region: {
+    name: 'region',
+    type: 'select',
+    required: true,
+    label: t('Region'),
+    help: t('The AWS region and availability zone of the bucket.'),
+    choices: AWS_REGIONS.map(([k, v]) => [
+      k,
+      <span key={k}>
+        <code>{k}</code> {v}
+      </span>,
+    ]),
+  },
+  accessKey: {
+    name: 'access_key',
+    type: 'string',
+    required: true,
+    label: t('Access Key ID'),
+    placeholder: 'AKIAIOSFODNN7EXAMPLE',
+    help: tct(
+      'Access key to the AWS account. Credentials can be managed in the [link].',
+      {
+        link: (
+          <ExternalLink href="https://console.aws.amazon.com/iam/">
+            IAM console
+          </ExternalLink>
+        ),
+      }
+    ),
+  },
+  secretKey: {
+    name: 'secret_key',
+    type: 'string',
+    required: true,
+    label: t('Secret Access Key'),
+    placeholder: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',
+  },
+};
+
+const gcsFields = {
+  bucket: {
+    name: 'bucket',
+    type: 'string',
+    required: true,
+    label: t('Bucket'),
+    placeholder: 'gcs-bucket-name',
+    help: t('Name of the GCS bucket. Read permissions are required to download symbols.'),
+  },
+  clientEmail: {
+    name: 'client_email',
+    type: 'email',
+    required: true,
+    label: t('Client Email'),
+    placeholder: 'user@project.iam.gserviceaccount.com',
+    help: t('Email address of the GCS service account.'),
+  },
+  privateKey: {
+    name: 'private_key',
+    type: 'string',
+    required: true,
+    multiline: true,
+    autosize: true,
+    maxRows: 5,
+    label: t('Private Key'),
+    placeholder: '-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----',
+    help: tct('The service account key. Credentials can be managed on the [link].', {
+      link: (
+        <ExternalLink href="https://console.cloud.google.com/project/_/iam-admin">
+          IAM &amp; Admin Page
+        </ExternalLink>
+      ),
+    }),
+  },
+};
+
+function getFormFields(type) {
+  switch (type) {
+    case 'http':
+      return [
+        commonFields.id,
+        commonFields.name,
+        httpFields.url,
+        commonFields.separator,
+        commonFields.layoutType,
+        commonFields.layoutCasing,
+      ];
+    case 's3':
+      return [
+        commonFields.id,
+        commonFields.name,
+        commonFields.separator,
+        s3Fields.bucket,
+        s3Fields.region,
+        s3Fields.accessKey,
+        s3Fields.secretKey,
+        commonFields.separator,
+        commonFields.prefix,
+        commonFields.layoutType,
+        commonFields.layoutCasing,
+      ];
+    case 'gcs':
+      return [
+        commonFields.id,
+        commonFields.name,
+        commonFields.separator,
+        gcsFields.bucket,
+        gcsFields.clientEmail,
+        gcsFields.privateKey,
+        commonFields.separator,
+        commonFields.prefix,
+        commonFields.layoutType,
+        commonFields.layoutCasing,
+      ];
+    default:
+      return null;
+  }
+}
+
+class DebugFileSourceModal extends React.Component {
+  static propTypes = {
+    /**
+     * Callback invoked with the updated config value.
+     */
+    onSave: PropTypes.func.isRequired,
+
+    /**
+     * Type of this source.
+     */
+    sourceType: SentryTypes.DebugSourceType.isRequired,
+
+    /**
+     * The sourceConfig. May be empty to create a new one.
+     */
+    sourceConfig: SentryTypes.DebugSourceConfig,
+
+    // Injected by the modal parent
+    closeModal: PropTypes.func.isRequired,
+    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
+  };
+
+  handleSave = data => {
+    const {sourceType, onSave, closeModal} = this.props;
+    onSave({...data, type: sourceType});
+    closeModal();
+  };
+
+  renderForm() {
+    const {sourceConfig, sourceType} = this.props;
+    const fields = getFormFields(sourceType);
+
+    if (!fields) {
+      return null;
+    }
+
+    return (
+      <Form
+        allowUndo
+        requireChanges
+        initialData={sourceConfig}
+        onSubmit={this.handleSave}
+        footerClass="modal-footer"
+      >
+        {fields.map((field, i) => (
+          <FieldFromConfig key={field.name || i} field={field} inline={false} stacked />
+        ))}
+      </Form>
+    );
+  }
+
+  render() {
+    const {closeModal, sourceType, sourceConfig, Header} = this.props;
+
+    const headerText = sourceConfig
+      ? 'Update [name] Repository'
+      : 'Add [name] Repository';
+
+    return (
+      <React.Fragment>
+        <Header closeButton onHide={closeModal}>
+          {tct(headerText, {name: getDebugSourceName(sourceType)})}
+        </Header>
+
+        {this.renderForm()}
+      </React.Fragment>
+    );
+  }
+}
+
+export default DebugFileSourceModal;
diff --git a/src/sentry/static/sentry/app/data/debugFileSources.jsx b/src/sentry/static/sentry/app/data/debugFileSources.jsx
new file mode 100644
index 0000000000..2168570a0b
--- /dev/null
+++ b/src/sentry/static/sentry/app/data/debugFileSources.jsx
@@ -0,0 +1,47 @@
+export const DEBUG_SOURCE_LAYOUTS = {
+  native: 'Platform-Specific (SymStore / GDB / LLVM)',
+  symstore: 'Microsoft SymStore',
+  symstore_index2: 'Microsoft SymStore (with index2.txt)',
+  ssqp: 'Microsoft SSQP',
+};
+
+export const DEBUG_SOURCE_CASINGS = {
+  default: 'Default (mixed case)',
+  uppercase: 'Uppercase',
+  lowercase: 'Lowercase',
+};
+
+export const AWS_REGIONS = [
+  ['us-east-2', 'US East (Ohio)'],
+  ['us-east-1', 'US East (N. Virginia)'],
+  ['us-west-1', 'US West (N. California)'],
+  ['us-west-2', 'US West (Oregon)'],
+  ['ap-east-1', 'Asia Pacific (Hong Kong)'],
+  ['ap-south-1', 'Asia Pacific (Mumbai)'],
+  // ['ap-northeast-3', 'Asia Pacific (Osaka-Local)'],
+  ['ap-northeast-2', 'Asia Pacific (Seoul)'],
+  ['ap-southeast-1', 'Asia Pacific (Singapore)'],
+  ['ap-southeast-2', 'Asia Pacific (Sydney)'],
+  ['ap-northeast-1', 'Asia Pacific (Tokyo)'],
+  ['ca-central-1', 'Canada (Central)'],
+  ['cn-north-1', 'China (Beijing)'],
+  ['cn-northwest-1', 'China (Ningxia)'],
+  ['eu-central-1', 'EU (Frankfurt)'],
+  ['eu-west-1', 'EU (Ireland)'],
+  ['eu-west-2', 'EU (London)'],
+  ['eu-west-3', 'EU (Paris)'],
+  ['eu-north-1', 'EU (Stockholm)'],
+  ['sa-east-1', 'South America (São Paulo)'],
+  ['us-gov-east-1', 'AWS GovCloud (US-East)'],
+  ['us-gov-west-1', 'AWS GovCloud (US)'],
+];
+
+export const DEBUG_SOURCE_TYPES = {
+  gcs: 'Google Cloud Storage',
+  http: 'SymbolServer (HTTP)',
+  s3: 'Amazon S3',
+};
+
+export function getDebugSourceName(type) {
+  return DEBUG_SOURCE_TYPES[type] || 'Unknown';
+}
diff --git a/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx b/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
index 8de4c44b3c..8d92379f1e 100644
--- a/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectDebugFiles.jsx
@@ -1,8 +1,36 @@
+import _ from 'lodash';
+import React from 'react';
+
 import {t} from 'app/locale';
+import {openDebugFileSourceModal} from 'app/actionCreators/modal';
+import {DEBUG_SOURCE_TYPES} from 'app/data/debugFileSources';
+import TextBlock from 'app/views/settings/components/text/textBlock';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/:orgId/projects/:projectId/debug-symbols/';
 
+function flattenKeys(obj) {
+  const result = {};
+  _.forEach(obj, (value, key) => {
+    if (_.isObject(value)) {
+      _.forEach(value, (innerValue, innerKey) => {
+        result[`${key}.${innerKey}`] = innerValue;
+      });
+    } else {
+      result[key] = value;
+    }
+  });
+  return result;
+}
+
+function unflattenKeys(obj) {
+  const result = {};
+  _.forEach(obj, (value, key) => {
+    _.set(result, key.split('.'), value);
+  });
+  return result;
+}
+
 export const fields = {
   builtinSymbolSources: {
     name: 'builtinSymbolSources',
@@ -18,30 +46,70 @@ export const fields = {
   },
   symbolSources: {
     name: 'symbolSources',
-    type: 'string',
+    type: 'rich_list',
     label: t('Custom Repositories'),
-    placeholder: t('Paste JSON here.'),
-    multiline: true,
-    monospace: true,
-    autosize: true,
-    inline: false,
-    maxRows: 10,
-    saveOnBlur: false,
-    saveMessageAlertType: 'info',
-    saveMessage: t('Updates will apply to future events only.'),
+    help: t('Configures custom repositories containing debug files.'),
     formatMessageValue: false,
-    help: t(
-      'Configures custom repositories containing debug files. At the moment, only Amazon S3 buckets are supported.'
-    ),
-    validate: ({id, form}) => {
-      try {
-        if (form[id].trim()) {
-          JSON.parse(form[id]);
-        }
-      } catch (e) {
-        return [[id, e.toString().replace(/^SyntaxError: JSON.parse: /, '')]];
-      }
-      return [];
+    addButtonText: t('Add Repository'),
+    addDropdown: {
+      items: [
+        {
+          value: 's3',
+          label: t(DEBUG_SOURCE_TYPES.s3),
+          searchKey: t('aws amazon s3 bucket'),
+        },
+        {
+          value: 'gcs',
+          label: t(DEBUG_SOURCE_TYPES.gcs),
+          searchKey: t('gcs google cloud storage bucket'),
+        },
+        {
+          value: 'http',
+          label: t(DEBUG_SOURCE_TYPES.http),
+          searchKey: t('http symbol server ssqp symstore symsrv'),
+        },
+      ],
+    },
+
+    getValue: sources => JSON.stringify(sources.map(unflattenKeys)),
+    setValue: raw => (JSON.parse(raw || null) || []).map(flattenKeys),
+
+    renderItem(item) {
+      return item.name || <em>{t('<Unnamed Repository>')}</em>;
+    },
+
+    onAddItem(item, addItem) {
+      openDebugFileSourceModal({
+        sourceType: item.value,
+        onSave: addItem,
+      });
+    },
+
+    onEditItem(item, updateItem) {
+      openDebugFileSourceModal({
+        sourceConfig: item,
+        sourceType: item.type,
+        onSave: updateItem,
+      });
+    },
+
+    removeConfirm: {
+      title: t('Remove Repository?'),
+      confirmText: t('Remove Repository'),
+      message: (
+        <React.Fragment>
+          <TextBlock>
+            <strong>
+              {t('Removing this repository applies instantly to new events.')}
+            </strong>
+          </TextBlock>
+          <TextBlock>
+            {t(
+              'Debug files from this repository will not be used to symbolicate future events. This may create new issues and alert members in your organization.'
+            )}
+          </TextBlock>
+        </React.Fragment>
+      ),
     },
   },
 };
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 0d63a78cb6..e76af7defa 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -483,6 +483,12 @@ export const GlobalSelection = PropTypes.shape({
   }),
 });
 
+export const DebugSourceType = PropTypes.oneOf(['http', 's3', 'gcs']);
+
+// Avoiding code duplication here. This is validated strictly by the server and
+// form elements in the `DebugFilesSourceModal`.
+export const DebugSourceConfig = PropTypes.object;
+
 export const Widget = PropTypes.shape({
   queries: PropTypes.shape({
     discover: PropTypes.arrayOf(DiscoverQuery),
@@ -993,6 +999,8 @@ const SentryTypes = {
   Activity,
   AuthProvider,
   Config,
+  DebugSourceConfig,
+  DebugSourceType,
   Deploy,
   DiscoverQuery,
   DiscoverSavedQuery,
diff --git a/src/sentry/static/sentry/app/views/projectDebugFiles.jsx b/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
index fdf793986f..acfee8cf13 100644
--- a/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
+++ b/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
@@ -232,7 +232,7 @@ class ProjectDebugSymbols extends AsyncComponent {
         </TextBlock>
 
         {features.has('symbol-sources') && (
-          <>
+          <React.Fragment>
             <PermissionAlert />
 
             <Form
@@ -247,11 +247,11 @@ class ProjectDebugSymbols extends AsyncComponent {
                 features={features}
                 title={t('External Sources')}
                 disabled={!access.has('project:write')}
-                fields={[fields.builtinSymbolSources, fields.symbolSources]}
+                fields={[fields.symbolSources, fields.builtinSymbolSources]}
                 additionalFieldProps={fieldProps}
               />
             </Form>
-          </>
+          </React.Fragment>
         )}
 
         <TextBlock>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index e7b9b99fd4..a91e0a0e23 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -12,6 +12,8 @@ import TextareaField from './textareaField';
 import RadioField from './radioField';
 import InputField from './inputField';
 import ChoiceMapperField from './choiceMapperField';
+import RichListField from './richListField';
+import FieldSeparator from './fieldSeparator';
 
 export default class FieldFromConfig extends React.Component {
   static propTypes = {
@@ -28,8 +30,10 @@ export default class FieldFromConfig extends React.Component {
         'number',
         'radio',
         'range',
+        'rich_list',
         'secret',
         'select',
+        'separator',
         'string',
         'text',
         'textarea',
@@ -69,6 +73,8 @@ export default class FieldFromConfig extends React.Component {
     };
 
     switch (field.type) {
+      case 'separator':
+        return <FieldSeparator {...props} />;
       case 'secret':
         return <InputField {...props} type="password" />;
       case 'range':
@@ -108,6 +114,8 @@ export default class FieldFromConfig extends React.Component {
         return <ChoiceMapperField {...props} />;
       case 'radio':
         return <RadioField {...props} />;
+      case 'rich_list':
+        return <RichListField {...props} />;
       default:
         return null;
     }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldSeparator.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldSeparator.jsx
new file mode 100644
index 0000000000..3814a95755
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldSeparator.jsx
@@ -0,0 +1,5 @@
+import React from 'react';
+
+export default function FieldSeparator(props) {
+  return <hr />;
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 511069d110..27e18dddd6 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -228,7 +228,11 @@ class FormField extends React.Component {
     flexibleControlStateSize: PropTypes.bool,
 
     // Default value to use for form field if value is not specified in `<Form>` parent
-    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+    defaultValue: PropTypes.oneOfType([
+      PropTypes.string,
+      PropTypes.number,
+      PropTypes.func,
+    ]),
 
     // the following should only be used without form context
     onChange: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 12efe4fad9..60fa5dd3d0 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -139,7 +139,11 @@ class FormModel {
       typeof props.defaultValue !== 'undefined' &&
       typeof this.initialData[id] === 'undefined'
     ) {
-      this.initialData[id] = props.defaultValue;
+      this.initialData[id] =
+        typeof props.defaultValue === 'function'
+          ? props.defaultValue()
+          : props.defaultValue;
+
       this.fields.set(id, this.initialData[id]);
     }
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/richListField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/richListField.jsx
new file mode 100644
index 0000000000..4fd1cdb76e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/richListField.jsx
@@ -0,0 +1,228 @@
+import _ from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import InputField from 'app/views/settings/components/forms/inputField';
+import InlineSvg from 'app/components/inlineSvg';
+import Confirm from 'app/components/confirm';
+
+const RichListProps = {
+  /**
+   * Text used for the add item button.
+   */
+  addButtonText: PropTypes.node,
+
+  /**
+   * Configuration for the add item dropdown.
+   */
+  addDropdown: PropTypes.shape(DropdownAutoComplete.propTypes).isRequired,
+
+  /**
+   * Render function to render an item.
+   */
+  renderItem: PropTypes.func,
+
+  /**
+   * Callback invoked when an item is added via the dropdown menu.
+   */
+  onAddItem: PropTypes.func,
+
+  /**
+   * Callback invoked when an item is interacted with.
+   */
+  onEditItem: PropTypes.func,
+
+  /**
+   * Callback invoked when an item is removed.
+   */
+  onRemoveItem: PropTypes.func,
+
+  /**
+   * Properties for the confirm remove dialog. If missing, the item will be
+   * removed immediately.
+   */
+  removeConfirm: PropTypes.object,
+};
+
+function getDefinedProps(propTypes, props) {
+  return _.pickBy(props, (_prop, key) => key in propTypes);
+}
+
+class RichList extends React.PureComponent {
+  static propTypes = {
+    ...RichListProps,
+
+    /**
+     * The list of items to render.
+     */
+    value: PropTypes.array.isRequired,
+  };
+
+  static defaultProps = {
+    addButtonText: t('Add Item'),
+    renderItem: item => item,
+    onAddItem: (item, addItem) => addItem(item),
+    onRemoveItem: (item, removeItem) => removeItem(item),
+  };
+
+  triggerChange = items => {
+    this.props.onChange(items, {});
+    this.props.onBlur(items, {});
+  };
+
+  addItem = data => {
+    const items = [...this.props.value, data];
+    this.triggerChange(items);
+  };
+
+  updateItem = (data, index) => {
+    const items = [...this.props.value];
+    items.splice(index, 1, data);
+    this.triggerChange(items);
+  };
+
+  removeItem = index => {
+    const items = [...this.props.value];
+    items.splice(index, 1);
+    this.triggerChange(items);
+  };
+
+  onSelectDropdownItem = item => {
+    this.props.onAddItem(item, this.addItem);
+  };
+
+  onEditItem = (item, index) => {
+    this.props.onEditItem(item, data => this.updateItem(data, index));
+  };
+
+  onRemoveItem = (item, index) => {
+    this.props.onRemoveItem(item, () => this.removeItem(index));
+  };
+
+  renderItem = (item, index) => {
+    const removeIcon = (onClick = null) => (
+      <ItemIcon onClick={onClick}>
+        <InlineSvg src="icon-trash" size="12px" />
+      </ItemIcon>
+    );
+
+    const removeConfirm = this.props.removeConfirm ? (
+      <Confirm
+        priority="danger"
+        confirmText={t('Remove')}
+        {...this.props.removeConfirm}
+        onConfirm={() => this.onRemoveItem(item, index)}
+      >
+        {removeIcon()}
+      </Confirm>
+    ) : (
+      removeIcon(() => this.onRemoveItem(item, index))
+    );
+
+    return (
+      <Item size="small" key={index}>
+        <ItemLabel>
+          {this.props.renderItem(item)}
+          {this.props.onEditItem && (
+            <ItemIcon onClick={() => this.onEditItem(item, index)}>
+              <InlineSvg src="icon-settings" size="12px" />
+            </ItemIcon>
+          )}
+          {removeConfirm}
+        </ItemLabel>
+      </Item>
+    );
+  };
+
+  renderDropdown = () => {
+    return (
+      <DropdownAutoComplete
+        {...this.props.addDropdown}
+        alignMenu="left"
+        onSelect={this.onSelectDropdownItem}
+      >
+        {({isOpen}) => (
+          <DropdownButton icon="icon-circle-add" isOpen={isOpen} size="small">
+            {this.props.addButtonText}
+          </DropdownButton>
+        )}
+      </DropdownAutoComplete>
+    );
+  };
+
+  render() {
+    return (
+      <ItemList>
+        {this.props.value.map(this.renderItem)}
+        {this.renderDropdown()}
+      </ItemList>
+    );
+  }
+}
+
+export default class RichListField extends React.PureComponent {
+  static propTypes = {
+    ...InputField.propTypes,
+    ...RichListProps,
+  };
+
+  renderRichList = fieldProps => {
+    const richListProps = getDefinedProps(RichListProps, this.props);
+    const {value, ...props} = fieldProps;
+
+    // We must not render this field until `setValue` has been applied by the
+    // model, which is done after the field is mounted for the first time. To
+    // check this, we cannot use Array.isArray because the value passed in by
+    // the model might actually be an ObservableArray.
+    if (typeof value === 'string' || value.length === undefined) {
+      return null;
+    }
+
+    return <RichList {...props} value={[...value]} {...richListProps} />;
+  };
+
+  render() {
+    return <InputField {...this.props} field={this.renderRichList} />;
+  }
+}
+
+const ItemList = styled('ul')`
+  display: flex;
+  flex-wrap: wrap;
+  align-items: flex-start;
+  padding: 0;
+`;
+
+const Item = styled('li')`
+  display: inline-block;
+  background-color: ${p => p.theme.button.default.background};
+  border: 1px solid ${p => p.theme.button.default.border};
+  border-radius: ${p => p.theme.button.borderRadius};
+  color: ${p => p.theme.button.default.color};
+  cursor: default;
+  font-size: ${p => p.theme.fontSizeSmall};
+  font-weight: 600;
+  line-height: 1;
+  padding: 0;
+  text-transform: none;
+  margin: 0 10px 5px 0;
+`;
+
+const ItemLabel = styled('div')`
+  padding: 8px 12px;
+  white-space: nowrap;
+`;
+
+const ItemIcon = styled('span')`
+  padding-left: 10px;
+  color: ${p => p.theme.gray2};
+  cursor: pointer;
+
+  &:hover {
+    color: ${p => p.theme.button.default.color};
+  }
+`;
