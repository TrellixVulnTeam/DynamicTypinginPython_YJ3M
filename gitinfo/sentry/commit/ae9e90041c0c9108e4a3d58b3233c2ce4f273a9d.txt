commit ae9e90041c0c9108e4a3d58b3233c2ce4f273a9d
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jan 6 00:32:37 2012 -0800

    Massive refactoring of plugins. New SentryMiddleware is now required as part of configuration.

diff --git a/docs/install/index.rst b/docs/install/index.rst
index 1ed682b095..a18fe647d5 100644
--- a/docs/install/index.rst
+++ b/docs/install/index.rst
@@ -48,6 +48,8 @@ upgrading the actual Sentry server.
 This includes several new tables (such as Project), and alters on almost all existing tables. It
 also means it needs to backfill the project_id column on all related tables.
 
+You should also read over the installation guide again, as some things have likely changed.
+
 Running a Sentry Server
 -----------------------
 
@@ -157,6 +159,15 @@ need to update your settings.py and add ``sentry`` and ``raven.contrib.django``
 
 .. note:: Raven is a seperate project, and the official Python client for Sentry.
 
+Next, add the required middleware to your settings::
+
+    MIDDLEWARE_CLASSES = (
+        ...
+        'sentry.middleware.SentryMiddleware',
+    )
+
+
+
 You will also need to add ``sentry.web.urls`` to your url patterns::
 
     urlpatterns = patterns('',
diff --git a/runtests.py b/runtests.py
index 1f3bf6feeb..5cfd5dc19b 100644
--- a/runtests.py
+++ b/runtests.py
@@ -13,46 +13,14 @@ logging.getLogger('sentry').addHandler(logging.StreamHandler())
 from django.conf import settings
 
 if not settings.configured:
-    settings.configure(
-        DATABASE_ENGINE='sqlite3',
-        DATABASES={
-            'default': {
-                'ENGINE': 'sqlite3',
-                'TEST_NAME': 'sentry_tests.db',
-            },
-        },
-        # HACK: this fixes our threaded runserver remote tests
-        # DATABASE_NAME='test_sentry',
-        TEST_DATABASE_NAME='sentry_tests.db',
-        INSTALLED_APPS=[
-            'django.contrib.auth',
-            'django.contrib.admin',
-            'django.contrib.sessions',
-            'django.contrib.sites',
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.conf.server'
 
-            # Included to fix Disqus' test Django which solves IntegrityMessage case
-            'django.contrib.contenttypes',
+# override a few things with our test specifics
+settings.INSTALLED_APPS = tuple(settings.INSTALLED_APPS) + (
+    'tests',
+)
+settings.SENTRY_KEY = base64.b64encode(os.urandom(40))
 
-            'djkombu',
-            'south',
-
-            'sentry',
-
-            # included plugin tests
-            'sentry.plugins.sentry_servers',
-            'sentry.plugins.sentry_sites',
-            'sentry.plugins.sentry_urls',
-            'sentry.plugins.sentry_redmine',
-
-            'tests',
-        ],
-        ROOT_URLCONF='',
-        DEBUG=False,
-        SITE_ID=1,
-        SENTRY_THRASHING_LIMIT=0,
-        TEMPLATE_DEBUG=True,
-        SENTRY_KEY=base64.b64encode(os.urandom(40)),
-    )
 
 from django_nose import NoseTestSuiteRunner
 
diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index c628439397..6394e05fda 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -78,6 +78,7 @@ MIDDLEWARE_CLASSES = (
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'sentry.middleware.SentryMiddleware',
     # 'django.contrib.messages.middleware.MessageMiddleware',
 )
 
diff --git a/sentry/middleware.py b/sentry/middleware.py
new file mode 100644
index 0000000000..6d85cf3671
--- /dev/null
+++ b/sentry/middleware.py
@@ -0,0 +1,25 @@
+from sentry.models import Project
+from sentry.plugins import Plugin
+
+
+def get_plugins(request, project):
+    plugins = []
+    for cls in Plugin.plugins.itervalues():
+        plugin = cls(request)
+        plugin.configure(project)
+        plugins.append(plugin)
+    return plugins
+
+
+class SentryMiddleware(object):
+    def process_view(self, request, view_func, view_args, view_kwargs):
+        if 'project_id' not in view_kwargs:
+            return
+        project = Project.objects.get(pk=view_kwargs['project_id'])
+
+        request.plugins = get_plugins(request, project)
+
+    def process_response(self, request, response):
+        request.plugins = []
+
+        return response
diff --git a/sentry/models.py b/sentry/models.py
index c36141fc53..7719b8ec35 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -210,7 +210,12 @@ class Group(MessageBase):
         return int(math.log(self.times_seen) * 600 + float(time.mktime(self.last_seen.timetuple())))
 
     def get_latest_event(self):
-        return self.event_set.order_by('-id')[0]
+        if not hasattr(self, '_latest_event'):
+            try:
+                self._latest_event = self.event_set.order_by('-id')[0]
+            except IndexError:
+                self._latest_event = None
+        return self._latest_event
 
     def mail_admins(self, request=None, fail_silently=True):
         from django.core.mail import send_mail
diff --git a/sentry/plugins/__init__.py b/sentry/plugins/__init__.py
index 3b86d71d8c..1f2fc798f9 100644
--- a/sentry/plugins/__init__.py
+++ b/sentry/plugins/__init__.py
@@ -6,8 +6,19 @@ sentry.plugins
 :license: BSD, see LICENSE for more details.
 """
 
-# Based on http://martyalchin.com/2008/jan/10/simple-plugin-framework/
 from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from sentry.web.helpers import render_to_response
+
+
+class Response(object):
+    def __init__(self, template, context=None):
+        self.template = template
+        self.context = context
+
+    def respond(self, request, context):
+        context.update(self.context)
+        return render_to_response(self.template, context, request)
 
 
 class PluginMount(type):
@@ -26,73 +37,70 @@ class PluginMount(type):
             cls.plugins[cls.slug] = cls
 
 
-class ActionProvider(object):
+class Plugin(object):
+    """
+    All children should allow **kwargs on all inherited methods.
     """
-    Base interface for adding action providers.
-
-    Plugins implementing this reference should provide the following attributes:
-
-    ========  ========================================================
-    title     The text to be displayed, describing the action
 
-    view      The view which will perform this action
+    __metaclass__ = PluginMount
 
-    selected  Boolean indicating whether the action is the one
-              currently being performed
+    enabled = True
 
-    ========  ========================================================
-    """
-    __metaclass__ = PluginMount
+    def __init__(self, request):
+        self.request = request
 
-    def __init__(self):
-        self.url = reverse('sentry-plugin-action', args=(self.slug,))
+    def __call__(self, group):
+        self.selected = self.request.path == self.get_url(group)
 
-    def __call__(self, request):
-        self.selected = request.path == self.url
         if not self.selected:
             return
 
-        return self.perform(request)
+        response = self.view(group)
 
+        if not response:
+            return
 
-class GroupActionProvider(object):
-    # TODO: should be able to specify modal support
+        if isinstance(response, HttpResponseRedirect):
+            return response
 
-    __metaclass__ = PluginMount
+        if not isinstance(response, Response):
+            raise NotImplementedError('Please use self.render() when returning responses.')
 
-    new_window = False
+        return response.respond(self.request, {
+            'project': group.project,
+            'group': group,
+        })
 
-    @classmethod
-    def get_url(cls, project_id, group_id):
-        return reverse('sentry-group-plugin-action', args=(project_id, group_id, cls.slug))
+    def redirect(self, url):
+        return HttpResponseRedirect(url)
 
-    def __init__(self, project_id, group_id):
-        self.url = self.__class__.get_url(project_id, group_id)
+    def render(self, template, context=None):
+        return Response(template, context)
 
-    def __call__(self, request, project, group):
-        self.selected = request.path == self.url
-        if not self.selected:
-            return
-        return self.view(request, project, group)
+    def configure(self, project):
+        pass
+
+    def get_url(self, group):
+        return reverse('sentry-group-plugin-action', args=(group.project_id, group.pk, self.slug))
 
-    def view(self, request, project, group):
+    def view(self, group, **kwargs):
         """
         Handles the view logic. If no response is given, we continue to the next action provider.
         """
 
-    def tags(self, request, tag_list, project, group):
+    def tags(self, group, tag_list, **kwargs):
         """Modifies the tag list for a grouped message."""
         return tag_list
 
-    def actions(self, request, action_list, project, group):
+    def actions(self, group, action_list, **kwargs):
         """Modifies the action list for a grouped message."""
         return action_list
 
-    def panels(self, request, panel_list, project, group):
+    def panels(self, group, panel_list, **kwargs):
         """Modifies the panel list for a grouped message."""
         return panel_list
 
-    def widget(self, request, project, group):
+    def widget(self, group, **kwargs):
         """
         Renders as a widget in the group details sidebar.
         """
diff --git a/sentry/plugins/sentry_redmine/models.py b/sentry/plugins/sentry_redmine/models.py
index 5279b79f99..8166eae6b7 100644
--- a/sentry/plugins/sentry_redmine/models.py
+++ b/sentry/plugins/sentry_redmine/models.py
@@ -11,11 +11,10 @@ from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.http import HttpResponseRedirect
-from django.shortcuts import render_to_response
 from django.utils.safestring import mark_safe
 
 from sentry.models import Group
-from sentry.plugins import GroupActionProvider
+from sentry.plugins import Plugin
 from sentry.plugins.sentry_redmine import conf
 from sentry.utils import json
 
@@ -34,17 +33,17 @@ class RedmineIssueForm(forms.Form):
     description = forms.CharField(widget=forms.Textarea())
 
 
-class CreateRedmineIssue(GroupActionProvider):
+class CreateRedmineIssue(Plugin):
     title = 'Create Redmine Issue'
 
-    def actions(self, request, action_list, project, group):
+    def actions(self, group, action_list, **kwargs):
         if 'redmine' not in group.data:
-            action_list.append((self.title, self.__class__.get_url(project.pk, group.pk)))
+            action_list.append((self.title, self.get_url(group)))
         return action_list
 
-    def view(self, request, group):
-        if request.POST:
-            form = RedmineIssueForm(request.POST)
+    def view(self, group, **kwargs):
+        if self.request.POST:
+            form = RedmineIssueForm(self.request.POST)
             if form.is_valid():
                 data = json.dumps({
                     'key': conf.REDMINE_API_KEY,
@@ -86,9 +85,9 @@ class CreateRedmineIssue(GroupActionProvider):
                     RedmineIssue.objects.create(group=group, issue_id=data['issue']['id'])
                     group.data['redmine'] = {'issue_id': data['issue']['id']}
                     group.save()
-                    return HttpResponseRedirect(reverse('sentry-group', args=[group.project_id, group.pk]))
+                    return HttpResponseRedirect(reverse('sentry-group', args=[group.project.pk, group.pk]))
         else:
-            description = 'Sentry Message: %s' % request.build_absolute_uri(group.get_absolute_url())
+            description = 'Sentry Message: %s' % self.request.build_absolute_uri(group.get_absolute_url())
             description += '\n\n<pre>' + (group.traceback or group.message) + '</pre>'
 
             form = RedmineIssueForm(initial={
@@ -97,21 +96,19 @@ class CreateRedmineIssue(GroupActionProvider):
             })
 
         context = {
-            'request': request,
-            'group': group,
             'form': form,
             'global_errors': form.errors.get('__all__'),
             'BASE_TEMPLATE': 'sentry/groups/details.html',
         }
-        context.update(csrf(request))
+        context.update(csrf(self.request))
 
-        return render_to_response('sentry/plugins/redmine/create_issue.html', context)
+        return self.render('sentry/plugins/redmine/create_issue.html', context)
 
-    def tags(self, request, tags, project, group):
+    def tags(self, group, tag_list):
         if 'redmine' in group.data:
             issue_id = group.data['redmine']['issue_id']
-            tags.append(mark_safe('<a href="%s">#%s</a>' % (
+            tag_list.append(mark_safe('<a href="%s">#%s</a>' % (
                 '%s/issues/%s' % (conf.REDMINE_URL, issue_id),
                 issue_id,
             )))
-        return tags
+        return tag_list
diff --git a/sentry/plugins/sentry_servers/models.py b/sentry/plugins/sentry_servers/models.py
index 4bcbbc96fa..cdc9298afd 100644
--- a/sentry/plugins/sentry_servers/models.py
+++ b/sentry/plugins/sentry_servers/models.py
@@ -6,13 +6,10 @@ sentry.plugins.sentry_servers.models
 :license: BSD, see LICENSE for more details.
 """
 
-from django.shortcuts import render_to_response
-from django.template.loader import render_to_string
+from sentry.plugins import Plugin
 
-from sentry.plugins import GroupActionProvider
 
-
-class ServerGroupPanel(GroupActionProvider):
+class ServerGroupPanel(Plugin):
     """Adds additional support for showing information about servers including:
 
     * A panel which shows all servers a message was seen on.
@@ -21,20 +18,12 @@ class ServerGroupPanel(GroupActionProvider):
 
     title = 'Servers'
 
-    def panels(self, request, panel_list, project, group):
-        panel_list.append((self.title, self.__class__.get_url(project.pk, group.pk)))
+    def panels(self, group, panel_list, **kwargs):
+        panel_list.append((self.title, self.get_url(group)))
         return panel_list
 
-    def view(self, request, project, group):
-        return render_to_response('sentry/plugins/sentry_servers/index.html', {
-            'request': request,
-            'project': project,
-            'group': group,
-        })
-
-    def widget(self, request, project, group):
-        return render_to_string('sentry/plugins/sentry_servers/widget.html', {
-            'request': request,
-            'project': project,
-            'group': group,
-        })
+    def view(self, group, **kwargs):
+        return self.render('sentry/plugins/sentry_servers/index.html')
+
+    def widget(self, group, **kwargs):
+        return self.render('sentry/plugins/sentry_servers/widget.html')
diff --git a/sentry/plugins/sentry_sites/models.py b/sentry/plugins/sentry_sites/models.py
index abe565a02e..6553dd6a9d 100644
--- a/sentry/plugins/sentry_sites/models.py
+++ b/sentry/plugins/sentry_sites/models.py
@@ -6,13 +6,10 @@ sentry.plugins.sentry_sites.models
 :license: BSD, see LICENSE for more details.
 """
 
-from django.shortcuts import render_to_response
-from django.template.loader import render_to_string
+from sentry.plugins import Plugin
 
-from sentry.plugins import GroupActionProvider
 
-
-class SiteGroupPanel(GroupActionProvider):
+class SiteGroupPanel(Plugin):
     """Adds additional support for showing information about sites including:
 
     * A panel which shows all sites a message was seen on.
@@ -21,20 +18,12 @@ class SiteGroupPanel(GroupActionProvider):
 
     title = 'Sites'
 
-    def panels(self, request, panel_list, project, group):
-        panel_list.append((self.title, self.__class__.get_url(project.pk, group.pk)))
+    def panels(self, group, panel_list, **kwargs):
+        panel_list.append((self.title, self.get_url(group)))
         return panel_list
 
-    def view(self, request, project, group):
-        return render_to_response('sentry/plugins/sentry_sites/index.html', {
-            'request': request,
-            'project': project,
-            'group': group,
-        })
-
-    def widget(self, request, project, group):
-        return render_to_string('sentry/plugins/sentry_sites/widget.html', {
-            'request': request,
-            'project': project,
-            'group': group,
-        })
+    def view(self, group, **kwargs):
+        return self.render('sentry/plugins/sentry_sites/index.html')
+
+    def widget(self, group, **kwargs):
+        return self.render('sentry/plugins/sentry_sites/widget.html')
diff --git a/sentry/plugins/sentry_urls/models.py b/sentry/plugins/sentry_urls/models.py
index 3cb2c5d7a2..29f7bb055a 100644
--- a/sentry/plugins/sentry_urls/models.py
+++ b/sentry/plugins/sentry_urls/models.py
@@ -6,13 +6,10 @@ sentry.plugins.sentry_urls.models
 :license: BSD, see LICENSE for more details.
 """
 
-from django.shortcuts import render_to_response
-from django.template.loader import render_to_string
+from sentry.plugins import Plugin
 
-from sentry.plugins import GroupActionProvider
 
-
-class ServerUrlsPanel(GroupActionProvider):
+class ServerUrlsPanel(Plugin):
     """Adds additional support for showing information about urls including:
 
     * A panel which shows all urls a message was seen on.
@@ -21,20 +18,12 @@ class ServerUrlsPanel(GroupActionProvider):
 
     title = 'URLs'
 
-    def panels(self, request, panel_list, project, group):
-        panel_list.append((self.title, self.__class__.get_url(project.pk, group.pk)))
+    def panels(self, group, panel_list, **kwargs):
+        panel_list.append((self.title, self.get_url(group)))
         return panel_list
 
-    def view(self, request, project, group):
-        return render_to_response('sentry/plugins/sentry_urls/index.html', {
-            'request': request,
-            'project': project,
-            'group': group,
-        })
-
-    def widget(self, request, project, group):
-        return render_to_string('sentry/plugins/sentry_urls/widget.html', {
-            'request': request,
-            'project': project,
-            'group': group,
-        })
+    def view(self, group, **kwargs):
+        return self.render('sentry/plugins/sentry_urls/index.html')
+
+    def widget(self, group, **kwargs):
+        return self.render('sentry/plugins/sentry_urls/widget.html')
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index ea29f8d9a9..c1387e369b 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -8,7 +8,6 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
 from paging.helpers import paginate as paginate_func
 from sentry.conf import settings
-from sentry.plugins import GroupActionProvider
 from sentry.utils import json
 from templatetag_sugar.register import tag
 from templatetag_sugar.parser import Name, Variable, Constant, Optional
@@ -118,9 +117,8 @@ def sentry_version():
 @register.filter
 def get_actions(group, request):
     action_list = []
-    for cls in GroupActionProvider.plugins.itervalues():
-        inst = cls(group.project_id, group.pk)
-        action_list = inst.actions(request, action_list, group.project, group)
+    for inst in request.plugins:
+        action_list = inst.actions(group, action_list)
     for action in action_list:
         yield action[0], action[1], request.path == action[1]
 
@@ -128,18 +126,16 @@ def get_actions(group, request):
 @register.filter
 def get_panels(group, request):
     panel_list = []
-    for cls in GroupActionProvider.plugins.itervalues():
-        inst = cls(group.project_id, group.pk)
-        panel_list = inst.panels(request, panel_list, group.project, group)
+    for inst in request.plugins:
+        panel_list = inst.panels(group, panel_list)
     for panel in panel_list:
         yield panel[0], panel[1], request.path == panel[1]
 
 
 @register.filter
 def get_widgets(group, request):
-    for cls in GroupActionProvider.plugins.itervalues():
-        inst = cls(group.project_id, group.pk)
-        resp = inst.widget(request, group.project, group)
+    for inst in request.plugins:
+        resp = inst.widget(group)
         if resp:
             yield resp
 
@@ -147,9 +143,8 @@ def get_widgets(group, request):
 @register.filter
 def get_tags(group, request):
     tag_list = []
-    for cls in GroupActionProvider.plugins.itervalues():
-        inst = cls(group.project_id, group.pk)
-        tag_list = inst.tags(request, tag_list, group.project, group)
+    for inst in request.plugins:
+        tag_list = inst.tags(group, tag_list)
     for tag in tag_list:
         yield tag
 
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index 1e4e77048e..8178c779e0 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -143,6 +143,7 @@ class MockDjangoRequest(HttpRequest):
     raw_post_data = ''
     url = ''
     path = '/'
+    plugins = []
 
     def __init__(self, **kwargs):
         self.__dict__.update(kwargs)
diff --git a/sentry/web/frontend/generic.py b/sentry/web/frontend/generic.py
index 5478f60e66..acbafffe5d 100644
--- a/sentry/web/frontend/generic.py
+++ b/sentry/web/frontend/generic.py
@@ -16,7 +16,7 @@ from djkombu.models import Queue
 
 from sentry import environment
 from sentry.conf import settings
-from sentry.plugins import GroupActionProvider
+from sentry.plugins import Plugin
 from sentry.web.decorators import login_required
 from sentry.web.helpers import get_project_list, render_to_response, \
   get_login_url
@@ -64,7 +64,7 @@ def status(request):
         'environment': environment,
         'python_version': sys.version,
         'modules': sorted([(p.project_name, p.version) for p in pkg_resources.working_set]),
-        'extensions': [(cls.title, cls.__module__.rsplit('.', 1)[0]) for cls in GroupActionProvider.plugins.itervalues()],
+        'extensions': [(cls.title, cls.__module__.rsplit('.', 1)[0]) for cls in Plugin.plugins.itervalues()],
         'views': [(x.__class__.__name__, x.__module__) for x in View.handlers.all()],
         'processors': [(x.__class__.__name__, x.__module__) for x in Processor.handlers.all()],
         'pending_tasks': pending_tasks,
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 3af1a6c61a..12d7f23682 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -22,7 +22,6 @@ from django.views.decorators.csrf import csrf_exempt
 from sentry.conf import settings
 from sentry.filters import Filter
 from sentry.models import Group, Event, Project, View
-from sentry.plugins import GroupActionProvider
 from sentry.utils import json, get_db_engine
 from sentry.web.decorators import has_access, login_required
 from sentry.web.helpers import render_to_response, \
@@ -409,11 +408,14 @@ def group_plugin_action(request, project, group_id, slug):
     if group.project and group.project != project:
         return HttpResponseRedirect(reverse('sentry-group-plugin-action', kwargs={'group_id': group.pk, 'project_id': group.project_id, 'slug': slug}))
 
-    try:
-        cls = GroupActionProvider.plugins[slug]
-    except KeyError:
+    plugin = None
+    for inst in request.plugins:
+        if inst.slug == slug:
+            plugin = inst
+            break
+    if not plugin:
         raise Http404('Plugin not found')
-    response = cls(group.project_id, group_id)(request, project, group)
+    response = inst(group)
     if response:
         return response
     return HttpResponseRedirect(request.META.get('HTTP_REFERER') or reverse('sentry', kwargs={'project_id': group.project_id}))
diff --git a/tests/plugins/tests.py b/tests/plugins/tests.py
index 099b4e4842..8bd08efe55 100644
--- a/tests/plugins/tests.py
+++ b/tests/plugins/tests.py
@@ -2,27 +2,10 @@
 
 from __future__ import absolute_import
 
-from sentry.models import Group
-from sentry.utils import MockDjangoRequest
-
 from tests.base import TestCase
 
 
 class SentryPluginTest(TestCase):
     def test_registration(self):
-        from sentry.plugins import GroupActionProvider
-        self.assertEquals(len(GroupActionProvider.plugins), 4)
-
-    def test_get_actions(self):
-        from sentry.templatetags.sentry_helpers import get_actions
-        checksum = 'a' * 32
-        group = Group.objects.create(
-            project_id=1,
-            logger='root',
-            culprit='a',
-            checksum=checksum,
-            message='hi',
-        )
-
-        widgets = list(get_actions(group, MockDjangoRequest()))
-        self.assertEquals(len(widgets), 1)
+        from sentry.plugins import Plugin
+        self.assertEquals(len(Plugin.plugins), 3)
