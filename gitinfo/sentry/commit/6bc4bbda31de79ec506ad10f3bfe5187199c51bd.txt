commit 6bc4bbda31de79ec506ad10f3bfe5187199c51bd
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jan 2 13:43:29 2019 -0800

    feat(Releases): OrganizationReleases accept commit ranges. (#11116)
    
    * releases accept commit ranges.
    
    * Added set_ref tests
    
    * Added test case and added tests to organization releases. project releases does not have refs.
    
    * refactored handle commit ranges function

diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index b0273d7873..37546f84dd 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -36,6 +36,7 @@ _sha1_re = re.compile(r'^[a-f0-9]{40}$')
 _dotted_path_prefix_re = re.compile(r'^([a-zA-Z][a-zA-Z0-9-]+)(\.[a-zA-Z][a-zA-Z0-9-]+)+-')
 BAD_RELEASE_CHARS = '\n\f\t/'
 DB_VERSION_LENGTH = 250
+COMMIT_RANGE_DELIMITER = '..'
 
 
 class ReleaseProject(Model):
@@ -270,6 +271,21 @@ class Release(Model):
         else:
             return True
 
+    def handle_commit_ranges(self, refs):
+        """
+        Takes commit refs of the form:
+        [
+            {
+                'previousCommit': None,
+                'commit': 'previous_commit..commit',
+            }
+        ]
+        Note: Overwrites 'previousCommit' and 'commit'
+        """
+        for ref in refs:
+            if COMMIT_RANGE_DELIMITER in ref['commit']:
+                ref['previousCommit'], ref['commit'] = ref['commit'].split(COMMIT_RANGE_DELIMITER)
+
     def set_refs(self, refs, user, fetch=False):
         from sentry.api.exceptions import InvalidRepository
         from sentry.models import Commit, ReleaseHeadCommit, Repository
@@ -296,6 +312,8 @@ class Release(Model):
         if invalid_repos:
             raise InvalidRepository('Invalid repository names: %s' % ','.join(invalid_repos))
 
+        self.handle_commit_ranges(refs)
+
         for ref in refs:
             repo = repos_by_name[ref['repository']]
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 154a266d31..a0cdf6d1da 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -11,7 +11,8 @@ from __future__ import absolute_import
 __all__ = (
     'TestCase', 'TransactionTestCase', 'APITestCase', 'TwoFactorAPITestCase', 'AuthProviderTestCase', 'RuleTestCase',
     'PermissionTestCase', 'PluginTestCase', 'CliTestCase', 'AcceptanceTestCase',
-    'IntegrationTestCase', 'UserReportEnvironmentTestCase', 'SnubaTestCase', 'IntegrationRepositoryTestCase', 'ReleaseCommitPatchTest'
+    'IntegrationTestCase', 'UserReportEnvironmentTestCase', 'SnubaTestCase', 'IntegrationRepositoryTestCase',
+    'ReleaseCommitPatchTest', 'SetRefsTestCase'
 )
 
 import base64
@@ -54,7 +55,7 @@ from sentry.auth.superuser import (
 )
 from sentry.constants import MODULE_ROOT
 from sentry.models import (
-    GroupEnvironment, GroupHash, GroupMeta, ProjectOption, DeletedOrganization,
+    GroupEnvironment, GroupHash, GroupMeta, ProjectOption, Repository, DeletedOrganization,
     Environment, GroupStatus, Organization, TotpInterface, UserReport,
 )
 from sentry.plugins import plugins
@@ -963,3 +964,45 @@ class ReleaseCommitPatchTest(APITestCase):
         assert file_change.type == type
         assert file_change.filename == filename
         assert file_change.commit_id == commit_id
+
+
+class SetRefsTestCase(APITestCase):
+    def setUp(self):
+        super(SetRefsTestCase, self).setUp()
+        self.user = self.create_user(is_staff=False, is_superuser=False)
+        self.org = self.create_organization()
+
+        self.team = self.create_team(organization=self.org)
+        self.project = self.create_project(name='foo', organization=self.org, teams=[self.team])
+        self.create_member(teams=[self.team], user=self.user, organization=self.org)
+        self.login_as(user=self.user)
+
+        self.group = self.create_group(project=self.project)
+        self.repo = Repository.objects.create(
+            organization_id=self.org.id,
+            name='test/repo',
+        )
+
+    def assert_fetch_commits(self, mock_fetch_commit, prev_release_id, release_id, refs):
+        assert len(mock_fetch_commit.method_calls) == 1
+        kwargs = mock_fetch_commit.method_calls[0][2]['kwargs']
+        assert kwargs == {
+            'prev_release_id': prev_release_id,
+            'refs': refs,
+            'release_id': release_id,
+            'user_id': self.user.id,
+        }
+
+    def assert_head_commit(self, head_commit, commit_key, release_id=None):
+        assert self.org.id == head_commit.organization_id
+        assert self.repo.id == head_commit.repository_id
+        if release_id:
+            assert release_id == head_commit.release_id
+        else:
+            assert self.release.id == head_commit.release_id
+        self.assert_commit(head_commit.commit, commit_key)
+
+    def assert_commit(self, commit, key):
+        assert self.org.id == commit.organization_id
+        assert self.repo.id == commit.repository_id
+        assert commit.key == key
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 137a4cf346..f466a69897 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -14,17 +14,19 @@ from sentry.models import (
     Activity,
     ApiKey,
     ApiToken,
+    Commit,
     CommitAuthor,
     CommitFileChange,
     Environment,
     Release,
     ReleaseCommit,
+    ReleaseHeadCommit,
     ReleaseProjectEnvironment,
     ReleaseProject,
     Repository,
 )
 from sentry.plugins.providers.dummy.repository import DummyRepositoryProvider
-from sentry.testutils import APITestCase, ReleaseCommitPatchTest
+from sentry.testutils import APITestCase, ReleaseCommitPatchTest, SetRefsTestCase
 
 
 class OrganizationReleaseListTest(APITestCase):
@@ -649,7 +651,8 @@ class OrganizationReleaseCreateTest(APITestCase):
                     },
                 ],
                 'projects': [project.slug]
-            }
+            },
+            format='json',
         )
 
         mock_fetch_commits.apply_async.assert_called_with(
@@ -911,6 +914,132 @@ class OrganizationReleaseCreateTest(APITestCase):
         assert response.data == {'refs': [u'Invalid repository names: not_a_repo']}
 
 
+class OrganizationReleaseCommitRangesTest(SetRefsTestCase):
+    def setUp(self):
+        super(OrganizationReleaseCommitRangesTest, self).setUp()
+        self.url = reverse('sentry-api-0-organization-releases',
+                           kwargs={'organization_slug': self.org.slug})
+
+    @patch('sentry.tasks.commits.fetch_commits')
+    def test_simple(self, mock_fetch_commits):
+        refs = [
+            {
+                'repository': 'test/repo',
+                'previousCommit': None,
+                'commit': 'previous-commit-id..current-commit-id',
+            },
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-will-be-ignored',
+                'commit': 'previous-commit-id-2..current-commit-id-2',
+            },
+            {
+                'repository': 'test/repo',
+                'commit': 'previous-commit-id-3..current-commit-id-3',
+            },
+        ]
+
+        response = self.client.post(
+            self.url,
+            data={
+                'version': '1',
+                'refs': refs,
+                'projects': [self.project.slug]
+            },
+        )
+
+        assert response.status_code == 201
+
+        release = Release.objects.get(version='1', organization=self.org)
+
+        commits = Commit.objects.all().order_by('id')
+        self.assert_commit(commits[0], 'current-commit-id')
+        self.assert_commit(commits[1], 'current-commit-id-2')
+        self.assert_commit(commits[2], 'current-commit-id-3')
+
+        head_commits = ReleaseHeadCommit.objects.all()
+        self.assert_head_commit(head_commits[0], 'current-commit-id-3', release_id=release.id)
+
+        refs_expected = [
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id',
+                'commit': 'current-commit-id',
+            },
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id-2',
+                'commit': 'current-commit-id-2',
+            },
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id-3',
+                'commit': 'current-commit-id-3',
+            },
+        ]
+        self.assert_fetch_commits(mock_fetch_commits, None, release.id, refs_expected)
+
+    @patch('sentry.tasks.commits.fetch_commits')
+    def test_head_commit(self, mock_fetch_commits):
+        headCommits = [
+            {
+                'currentId': 'current-commit-id',
+                'previousId': 'previous-commit-id',
+                'repository': self.repo.name
+            },
+            {
+                'currentId': 'current-commit-id-2',
+                'previousId': 'previous-commit-id-2',
+                'repository': self.repo.name
+            },
+            {
+                'currentId': 'current-commit-id-3',
+                'previousId': 'previous-commit-id-3',
+                'repository': self.repo.name
+            },
+        ]
+
+        response = self.client.post(
+            self.url,
+            data={
+                'version': '1',
+                'headCommits': headCommits,
+                'projects': [self.project.slug]
+            },
+        )
+
+        assert response.status_code == 201
+
+        release = Release.objects.get(version='1', organization=self.org)
+
+        commits = Commit.objects.all().order_by('id')
+        self.assert_commit(commits[0], 'current-commit-id')
+        self.assert_commit(commits[1], 'current-commit-id-2')
+        self.assert_commit(commits[2], 'current-commit-id-3')
+
+        head_commits = ReleaseHeadCommit.objects.all()
+        self.assert_head_commit(head_commits[0], 'current-commit-id-3', release_id=release.id)
+
+        refs_expected = [
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id',
+                'commit': 'current-commit-id',
+            },
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id-2',
+                'commit': 'current-commit-id-2',
+            },
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id-3',
+                'commit': 'current-commit-id-3',
+            },
+        ]
+        self.assert_fetch_commits(mock_fetch_commits, None, release.id, refs_expected)
+
+
 class OrganizationReleaseListEnvironmentsTest(APITestCase):
     def setUp(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index bb83605a4b..f53dfd7f3f 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -1,15 +1,18 @@
 from __future__ import absolute_import
 
+import pytest
 import six
+
 from mock import patch
 
+from sentry.api.exceptions import InvalidRepository
 from sentry.models import (
     Commit, CommitAuthor, Environment, Group, GroupRelease, GroupResolution, GroupLink, GroupStatus,
     ExternalIssue, Integration, OrganizationIntegration, Release, ReleaseCommit, ReleaseEnvironment,
     ReleaseHeadCommit, ReleaseProject, ReleaseProjectEnvironment, Repository
 )
 
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, SetRefsTestCase
 
 
 class MergeReleasesTest(TestCase):
@@ -543,3 +546,115 @@ class SetCommitsTestCase(TestCase):
         assert resolution.actor_id is None
 
         assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
+
+
+class SetRefsTest(SetRefsTestCase):
+
+    def setUp(self):
+        super(SetRefsTest, self).setUp()
+        self.release = Release.objects.create(version='abcdabc', organization=self.org)
+        self.release.add_project(self.project)
+
+    @patch('sentry.tasks.commits.fetch_commits')
+    def test_simple(self, mock_fetch_commit):
+        refs = [
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id',
+                'commit': 'current-commit-id',
+            },
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id-2',
+                'commit': 'current-commit-id-2',
+            }
+        ]
+
+        self.release.set_refs(refs, self.user, True)
+
+        commits = Commit.objects.all().order_by('id')
+        self.assert_commit(commits[0], refs[0]['commit'])
+        self.assert_commit(commits[1], refs[1]['commit'])
+
+        head_commits = ReleaseHeadCommit.objects.all()
+        self.assert_head_commit(head_commits[0], refs[1]['commit'])
+
+        self.assert_fetch_commits(mock_fetch_commit, None, self.release.id, refs)
+
+    @patch('sentry.tasks.commits.fetch_commits')
+    def test_invalid_repos(self, mock_fetch_commit):
+        refs = [
+            {
+                'repository': 'unknown-repository-name',
+                'previousCommit': 'previous-commit-id',
+                'commit': 'current-commit-id',
+            },
+            {
+                'repository': 'unknown-repository-name',
+                'previousCommit': 'previous-commit-id-2',
+                'commit': 'current-commit-id-2',
+            }
+        ]
+
+        with pytest.raises(InvalidRepository):
+            self.release.set_refs(refs, self.user)
+
+        assert len(Commit.objects.all()) == 0
+        assert len(ReleaseHeadCommit.objects.all()) == 0
+
+    @patch('sentry.tasks.commits.fetch_commits')
+    def test_handle_commit_ranges(self, mock_fetch_commit):
+        refs = [
+            {
+                'repository': 'test/repo',
+                'previousCommit': None,
+                'commit': 'previous-commit-id..current-commit-id',
+            },
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-will-be-ignored',
+                'commit': 'previous-commit-id-2..current-commit-id-2',
+            },
+            {
+                'repository': 'test/repo',
+                'commit': 'previous-commit-id-3..current-commit-id-3',
+            },
+        ]
+
+        self.release.set_refs(refs, self.user, True)
+
+        commits = Commit.objects.all().order_by('id')
+        self.assert_commit(commits[0], 'current-commit-id')
+        self.assert_commit(commits[1], 'current-commit-id-2')
+        self.assert_commit(commits[2], 'current-commit-id-3')
+
+        head_commits = ReleaseHeadCommit.objects.all()
+        self.assert_head_commit(head_commits[0], 'current-commit-id-3')
+
+        self.assert_fetch_commits(mock_fetch_commit, None, self.release.id, refs)
+
+    @patch('sentry.tasks.commits.fetch_commits')
+    def test_fetch_false(self, mock_fetch_commit):
+        refs = [
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id',
+                'commit': 'current-commit-id',
+            },
+            {
+                'repository': 'test/repo',
+                'previousCommit': 'previous-commit-id-2',
+                'commit': 'current-commit-id-2',
+            }
+        ]
+
+        self.release.set_refs(refs, self.user, False)
+
+        commits = Commit.objects.all().order_by('id')
+        self.assert_commit(commits[0], refs[0]['commit'])
+        self.assert_commit(commits[1], refs[1]['commit'])
+
+        head_commits = ReleaseHeadCommit.objects.all()
+        self.assert_head_commit(head_commits[0], refs[1]['commit'])
+
+        assert len(mock_fetch_commit.method_calls) == 0
