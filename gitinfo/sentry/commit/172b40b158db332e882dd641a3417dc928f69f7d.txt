commit 172b40b158db332e882dd641a3417dc928f69f7d
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Nov 27 12:32:32 2019 -0800

    feat(members): Add filter UI (#15812)

diff --git a/src/sentry/static/sentry/app/utils/tokenizeSearch.tsx b/src/sentry/static/sentry/app/utils/tokenizeSearch.tsx
new file mode 100644
index 0000000000..09c9f6de92
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/tokenizeSearch.tsx
@@ -0,0 +1,142 @@
+import flatMap from 'lodash/flatMap';
+
+type QueryResults = {
+  /**
+   * The text portion of the string query
+   */
+  query: string[];
+  [k: string]: string[];
+};
+
+/**
+ * Tokenize a search into a an object
+ *
+ * Example:
+ *   tokenizeSearch('is:resolved foo bar tag:value');
+ *   {
+ *     is ['resolved'],
+ *     query: ['foo', 'bar'],
+ *     tag: ['value'],
+ *   }
+ */
+export function tokenizeSearch(query: string) {
+  const tokens = splitSearchIntoTokens(query);
+
+  const searchParams: {query: string[]; tags: string[]} = {
+    query: [],
+    tags: [],
+  };
+
+  for (const token of tokens) {
+    const tokenChars = Array.from(token);
+    let tokenState: 'query' | 'tags' = 'query';
+
+    tokenChars.forEach((char, idx) => {
+      const nextChar = tokenChars.length > idx ? tokenChars[idx + 1] : null;
+
+      if (idx === 0 && [':', ' '].includes(char)) {
+        return;
+      }
+
+      if (char === ':') {
+        tokenState = [':', ' '].includes(nextChar !== null ? nextChar : '')
+          ? 'query'
+          : 'tags';
+        return;
+      }
+    });
+
+    searchParams[tokenState].push(token);
+  }
+
+  const results: QueryResults = {
+    query: searchParams.query.map(formatQuery),
+  };
+
+  for (const tag of searchParams.tags) {
+    const [key, value] = formatTag(tag);
+    results[key] = Array.isArray(results[key]) ? [...results[key], value] : [value];
+  }
+
+  return results;
+}
+
+/**
+ * Convert a QueryResults object back to a query string
+ */
+export function stringifyQueryObject(results: QueryResults) {
+  const {query, ...tags} = results;
+
+  const stringTags = flatMap(Object.entries(tags), ([k, values]) =>
+    values.map(tag => `${k}:${/\s/g.test(tag) ? `"${tag}"` : tag}`)
+  );
+
+  return `${query.join(' ')} ${stringTags.join(' ')}`.trim();
+}
+
+/**
+ * Splits search strings into tokens for parsing by tokenizeSearch.
+ */
+function splitSearchIntoTokens(query: string) {
+  const queryChars = Array.from(query);
+  const tokens: string[] = [];
+
+  let token = '';
+  let endOfPrevWord = '';
+  let quoteType = '';
+  let quoteEnclosed = false;
+
+  queryChars.forEach((char, idx) => {
+    const nextChar = queryChars.length - 1 > idx ? queryChars[idx + 1] : null;
+    token += char;
+
+    if (nextChar !== null && !isSpace(char) && isSpace(nextChar)) {
+      endOfPrevWord = char;
+    }
+
+    if (isSpace(char) && !quoteEnclosed && endOfPrevWord !== ':' && !isSpace(token)) {
+      tokens.push(token.trim());
+      token = '';
+    }
+
+    if (["'", '"'].includes(char) && (!quoteEnclosed || quoteType === char)) {
+      quoteEnclosed = !quoteEnclosed;
+      if (quoteEnclosed) {
+        quoteType = char;
+      }
+    }
+  });
+
+  const trimmedToken = token.trim();
+  if (trimmedToken !== '') {
+    tokens.push(trimmedToken);
+  }
+
+  return tokens;
+}
+
+/**
+ * Checks if the string is only spaces
+ */
+function isSpace(s: string) {
+  return s.trim() === '';
+}
+
+/**
+ * Splits tags on ':' and removes enclosing quotes if present, and returns both
+ * sides of the split as strings.
+ */
+function formatTag(tag: string) {
+  const idx = tag.indexOf(':');
+  const key = tag.slice(0, idx).replace(/^"+|"+$/g, '');
+  const value = tag.slice(idx + 1).replace(/^"+|"+$/g, '');
+
+  return [key, value];
+}
+
+/**
+ * Strips enclosing quotes from a query, if present.
+ */
+function formatQuery(query: string) {
+  return query.replace(/^"+|"+$/g, '');
+}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/components/membersFilter.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/components/membersFilter.tsx
new file mode 100644
index 0000000000..65fe6fe103
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/components/membersFilter.tsx
@@ -0,0 +1,196 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import {MemberRole} from 'app/types';
+import space from 'app/styles/space';
+import Checkbox from 'app/components/checkbox';
+import Switch from 'app/components/switch';
+import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
+
+type Props = {
+  className?: string;
+  roles: MemberRole[];
+  query: string;
+  onChange: (query: string) => void;
+};
+
+type BooleanFilterProps = {
+  onChange: (value: boolean | null) => void;
+  value: boolean | null;
+};
+
+type Filters = {
+  roles: string[];
+  isInvited: boolean | null;
+  ssoLinked: boolean | null;
+  has2fa: boolean | null;
+};
+
+const getBoolean = (list: string[]) =>
+  Array.isArray(list) ? list && list.map(v => v.toLowerCase()).includes('true') : null;
+
+const MembersFilter: React.FC<Props> = ({className, roles, query, onChange}) => {
+  const search = tokenizeSearch(query);
+
+  const filters = {
+    roles: search.role || [],
+    isInvited: getBoolean(search.isInvited),
+    ssoLinked: getBoolean(search.ssoLinked),
+    has2fa: getBoolean(search.has2fa),
+  };
+
+  const handleRoleFilter = (id: string) => () => {
+    const roleList = new Set(search.role ? [...search.role] : []);
+
+    if (roleList.has(id)) {
+      roleList.delete(id);
+    } else {
+      roleList.add(id);
+    }
+
+    onChange(stringifyQueryObject({...search, role: [...roleList]}));
+  };
+
+  const handleBoolFilter = (key: keyof Filters) => (value: boolean | null) => {
+    const {[key]: _, ...searchObjectWithoutKey} = search;
+
+    const newQueryObject =
+      value !== null
+        ? {...search, [key]: [Boolean(value).toString()]}
+        : searchObjectWithoutKey;
+
+    onChange(stringifyQueryObject(newQueryObject));
+  };
+
+  return (
+    <FilterContainer className={className}>
+      <FilterHeader>{t('Filter By')}</FilterHeader>
+
+      <FilterLists>
+        <Filters>
+          <h3>{t('User Role')}</h3>
+          {roles.map(({id, name}) => (
+            <label key={id}>
+              <Checkbox
+                data-test-id={`filter-role-${id}`}
+                checked={filters.roles.includes(id)}
+                onChange={handleRoleFilter(id)}
+              />
+              {name}
+            </label>
+          ))}
+        </Filters>
+
+        <Filters>
+          <h3>{t('Status')}</h3>
+          <BooleanFilter
+            data-test-id="filter-isInvited"
+            onChange={handleBoolFilter('isInvited')}
+            value={filters.isInvited}
+          >
+            {t('Invited')}
+          </BooleanFilter>
+          <BooleanFilter
+            data-test-id="filter-has2fa"
+            onChange={handleBoolFilter('has2fa')}
+            value={filters.has2fa}
+          >
+            {t('2FA')}
+          </BooleanFilter>
+          <BooleanFilter
+            data-test-id="filter-ssoLinked"
+            onChange={handleBoolFilter('ssoLinked')}
+            value={filters.ssoLinked}
+          >
+            {t('SSO Linked')}
+          </BooleanFilter>
+        </Filters>
+      </FilterLists>
+    </FilterContainer>
+  );
+};
+
+const BooleanFilter: React.FC<BooleanFilterProps> = ({onChange, value, children}) => (
+  <label>
+    <Checkbox
+      checked={value !== null}
+      onChange={() => onChange(value === null ? true : null)}
+    />
+    {children}
+    <Switch
+      isDisabled={value === null}
+      isActive={value === true}
+      toggle={() => onChange(!value)}
+    />
+  </label>
+);
+
+MembersFilter.propTypes = {
+  roles: PropTypes.arrayOf(PropTypes.object).isRequired as any,
+  query: PropTypes.string.isRequired,
+  onChange: PropTypes.func.isRequired,
+};
+
+BooleanFilter.propTypes = {
+  onChange: PropTypes.func.isRequired,
+  value: PropTypes.oneOf([null, true, false]),
+};
+
+const FilterContainer = styled('div')`
+  border-radius: 4px;
+  background: #fff;
+  box-shadow: ${p => p.theme.dropShadowLight};
+  border: 1px solid ${p => p.theme.borderLight};
+`;
+
+const FilterHeader = styled('h2')`
+  border-top-left-radius: 4px;
+  border-top-right-radius: 4px;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  background: ${p => p.theme.offWhite};
+  color: ${p => p.theme.gray3};
+  text-transform: uppercase;
+  font-size: ${p => p.theme.fontSizeExtraSmall};
+  padding: ${space(1)};
+  margin: 0;
+`;
+
+const FilterLists = styled('div')`
+  display: grid;
+  grid-template-columns: 100px max-content;
+  grid-gap: ${space(3)};
+  margin: ${space(1.5)};
+  margin-top: ${space(0.75)};
+`;
+
+const Filters = styled('div')`
+  display: grid;
+  grid-template-rows: repeat(auto-fit, minmax(0, max-content));
+  grid-gap: ${space(1)};
+  font-size: ${p => p.theme.fontSizeMedium};
+
+  h3 {
+    color: #000;
+    font-size: ${p => p.theme.fontSizeSmall};
+    text-transform: uppercase;
+    margin: ${space(1)} 0;
+  }
+
+  label {
+    display: grid;
+    grid-template-columns: max-content 1fr max-content;
+    grid-gap: ${space(0.75)};
+    align-items: center;
+    font-weight: normal;
+    white-space: nowrap;
+    height: ${space(2)};
+  }
+
+  input,
+  label {
+    margin: 0;
+  }
+`;
+export default MembersFilter;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
index e3ff3f20d2..5d3c4ce06c 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx
@@ -1,8 +1,9 @@
 import React from 'react';
+import styled, {css} from 'react-emotion';
 
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import {Organization, Member} from 'app/types';
+import {Organization, Member, MemberRole} from 'app/types';
 import {t, tct} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
@@ -13,14 +14,21 @@ import SentryTypes from 'app/sentryTypes';
 import {redirectToRemainingOrganization} from 'app/actionCreators/organizations';
 import {resendMemberInvite} from 'app/actionCreators/members';
 import withOrganization from 'app/utils/withOrganization';
+import Button from 'app/components/button';
+import DropdownMenu from 'app/components/dropdownMenu';
+import space from 'app/styles/space';
+import {MEMBER_ROLES} from 'app/constants';
+import theme from 'app/utils/theme';
 
 import OrganizationMemberRow from './organizationMemberRow';
+import MembersFilter from './components/membersFilter';
 
 type Props = AsyncView['props'] & {
   organization: Organization;
 };
 
 type State = AsyncView['state'] & {
+  member: Member & {roles: MemberRole[]};
   members: Member[];
   invited: {[key: string]: 'loading' | 'success' | null};
 };
@@ -30,26 +38,11 @@ class OrganizationMembersList extends AsyncView<Props, State> {
     organization: SentryTypes.Organization,
   };
 
-  get searchQuery() {
-    const {location} = this.props;
-
-    if (!location || !location.query.query) {
-      return '';
-    }
-
-    if (Array.isArray(location.query.query)) {
-      return location.query.query[0];
-    }
-
-    return location.query.query;
-  }
-
   getDefaultState() {
     return {
       ...super.getDefaultState(),
       members: [],
       invited: {},
-      searchQuery: this.searchQuery,
     };
   }
 
@@ -62,16 +55,8 @@ class OrganizationMembersList extends AsyncView<Props, State> {
     const {orgId} = this.props.params;
 
     return [
-      [
-        'members',
-        `/organizations/${orgId}/members/`,
-        {
-          query: {
-            query: this.searchQuery,
-          },
-        },
-        {paginate: true},
-      ],
+      ['members', `/organizations/${orgId}/members/`, {}, {paginate: true}],
+      ['member', `/organizations/${orgId}/members/me/`, {}, {}],
       [
         'authProvider',
         `/organizations/${orgId}/auth-provider/`,
@@ -153,7 +138,7 @@ class OrganizationMembersList extends AsyncView<Props, State> {
 
   renderBody() {
     const {params, router, organization} = this.props;
-    const {membersPageLinks, members} = this.state;
+    const {membersPageLinks, members, member: currentMember} = this.state;
     const {name: orgName, access} = organization;
 
     const canAddMembers = access.includes('member:write');
@@ -169,18 +154,50 @@ class OrganizationMembersList extends AsyncView<Props, State> {
     // Only admins/owners can remove members
     const requireLink = !!this.state.authProvider && this.state.authProvider.require_link;
 
+    type RenderSearch = React.ComponentProps<
+      typeof AsyncView.prototype.renderSearchInput
+    >['children'];
+
+    // eslint-disable-next-line react/prop-types
+    const renderSearch: RenderSearch = ({defaultSearchBar, value, handleChange}) => (
+      <SearchWrapper>
+        {defaultSearchBar}
+        <DropdownMenu closeOnEscape>
+          {({getActorProps, isOpen}) => (
+            <FilterWrapper>
+              <Button
+                size="small"
+                icon="icon-sliders"
+                {...getActorProps({isStyled: true})}
+              >
+                {t('Search Filters')}
+              </Button>
+              {isOpen && (
+                <StyledMembersFilter
+                  roles={currentMember.roles || MEMBER_ROLES}
+                  query={value}
+                  onChange={(query: string) => handleChange(query)}
+                />
+              )}
+            </FilterWrapper>
+          )}
+        </DropdownMenu>
+      </SearchWrapper>
+    );
+
     return (
       <React.Fragment>
+        {this.renderSearchInput({
+          updateRoute: true,
+          placeholder: t('Search Members'),
+          children: renderSearch,
+          className: css`
+            font-size: ${theme.fontSizeMedium};
+            padding: ${space(0.75)};
+          `,
+        })}
         <Panel data-test-id="org-member-list">
-          <PanelHeader hasButtons>
-            {t('Members')}
-
-            {this.renderSearchInput({
-              updateRoute: true,
-              placeholder: t('Search Members'),
-              className: 'search',
-            })}
-          </PanelHeader>
+          <PanelHeader>{t('Members')}</PanelHeader>
 
           <PanelBody>
             {members.map(member => {
@@ -216,4 +233,39 @@ class OrganizationMembersList extends AsyncView<Props, State> {
   }
 }
 
+const SearchWrapper = styled('div')`
+  display: grid;
+  grid-template-columns: 1fr max-content;
+  grid-gap: ${space(1.5)};
+  margin-bottom: ${space(3)};
+  position: relative;
+`;
+
+const FilterWrapper = styled('div')`
+  position: relative;
+`;
+
+const StyledMembersFilter = styled(MembersFilter)`
+  position: absolute;
+  right: 0;
+  top: 42px;
+  z-index: ${p => p.theme.zIndex.dropdown};
+
+  &:before,
+  &:after {
+    position: absolute;
+    top: -16px;
+    right: 32px;
+    content: '';
+    height: 16px;
+    width: 16px;
+    border: 8px solid transparent;
+    border-bottom-color: ${p => p.theme.offWhite};
+  }
+
+  &:before {
+    margin-top: -1px;
+    border-bottom-color: ${p => p.theme.borderLight};
+  }
+`;
 export default withOrganization(OrganizationMembersList);
diff --git a/tests/js/spec/utils/tokenizeSearch.spec.jsx b/tests/js/spec/utils/tokenizeSearch.spec.jsx
new file mode 100644
index 0000000000..5ba53ad8d4
--- /dev/null
+++ b/tests/js/spec/utils/tokenizeSearch.spec.jsx
@@ -0,0 +1,66 @@
+import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
+
+describe('utils/tokenizeSearch', function() {
+  describe('tokenizeSearch()', function() {
+    const cases = [
+      {
+        name: 'should convert a basic query string to a query object',
+        string: 'is:unresolved',
+        object: {query: [], is: ['unresolved']},
+      },
+      {
+        name: 'should convert qutoed strings',
+        string: 'is:unresolved browser:"Chrome 36"',
+        object: {query: [], is: ['unresolved'], browser: ['Chrome 36']},
+      },
+      {
+        name: 'should populate the text query',
+        string: 'python is:unresolved browser:"Chrome 36"',
+        object: {is: ['unresolved'], browser: ['Chrome 36'], query: ['python']},
+      },
+      {
+        name: 'should tokenize the text query',
+        string: 'python   exception',
+        object: {query: ['python', 'exception']},
+      },
+      {
+        name: 'should remove spaces in the query',
+        string: 'python  is:unresolved exception',
+        object: {is: ['unresolved'], query: ['python', 'exception']},
+      },
+    ];
+
+    for (const {name, string, object} of cases) {
+      it(name, () => expect(tokenizeSearch(string)).toEqual(object));
+    }
+  });
+
+  describe('stringifyQueryObject()', function() {
+    const cases = [
+      {
+        name: 'should convert a basic object to a query string',
+        object: {query: [], is: ['unresolved']},
+        string: 'is:unresolved',
+      },
+      {
+        name: 'should quote tags with spaces',
+        object: {query: [], is: ['unresolved'], browser: ['Chrome 36']},
+        string: 'is:unresolved browser:"Chrome 36"',
+      },
+      {
+        name: 'should stringify the query',
+        object: {is: ['unresolved'], browser: ['Chrome 36'], query: ['python']},
+        string: 'python is:unresolved browser:"Chrome 36"',
+      },
+      {
+        name: 'should join tokenized queries',
+        object: {query: ['python', 'exception']},
+        string: 'python exception',
+      },
+    ];
+
+    for (const {name, string, object} of cases) {
+      it(name, () => expect(stringifyQueryObject(object)).toEqual(string));
+    }
+  });
+});
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMembersList.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMembersList.spec.jsx
index d5c6c9f4c9..a572e8727c 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMembersList.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMembersList.spec.jsx
@@ -4,14 +4,29 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 
 import {Client} from 'app/api';
 import ConfigStore from 'app/stores/configStore';
-import OrganizationMembers from 'app/views/settings/organizationMembers/organizationMembersList';
+import OrganizationMembersList from 'app/views/settings/organizationMembers/organizationMembersList';
 import OrganizationsStore from 'app/stores/organizationsStore';
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 
 jest.mock('app/api');
 jest.mock('app/actionCreators/indicator');
 
-describe('OrganizationMembers', function() {
+const roles = [
+  {
+    id: 'admin',
+    name: 'Admin',
+    desc: 'This is the admin role',
+    allowed: true,
+  },
+  {
+    id: 'member',
+    name: 'Member',
+    desc: 'This is the member role',
+    allowed: true,
+  },
+];
+
+describe('OrganizationMembersList', function() {
   const members = TestStubs.Members();
   const currentUser = members[1];
   const defaultProps = {
@@ -44,6 +59,11 @@ describe('OrganizationMembers', function() {
 
   beforeEach(function() {
     Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/organizations/org-id/members/me/',
+      method: 'GET',
+      body: {roles},
+    });
     Client.addMockResponse({
       url: '/organizations/org-id/members/',
       method: 'GET',
@@ -94,12 +114,7 @@ describe('OrganizationMembers', function() {
     });
 
     const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
       TestStubs.routerContext([{organization}])
     );
 
@@ -129,12 +144,7 @@ describe('OrganizationMembers', function() {
     });
 
     const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
       TestStubs.routerContext([{organization}])
     );
 
@@ -163,12 +173,7 @@ describe('OrganizationMembers', function() {
     });
 
     const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
       TestStubs.routerContext([{organization}])
     );
 
@@ -204,12 +209,7 @@ describe('OrganizationMembers', function() {
     OrganizationsStore.add(secondOrg);
 
     const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
       TestStubs.routerContext([{organization}])
     );
 
@@ -240,12 +240,7 @@ describe('OrganizationMembers', function() {
     });
 
     const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
       TestStubs.routerContext([{organization}])
     );
 
@@ -277,12 +272,7 @@ describe('OrganizationMembers', function() {
     });
 
     const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
       TestStubs.routerContext([{organization}])
     );
 
@@ -304,12 +294,7 @@ describe('OrganizationMembers', function() {
     });
 
     const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
       TestStubs.routerContext([{organization}])
     );
 
@@ -328,12 +313,7 @@ describe('OrganizationMembers', function() {
     });
     const routerContext = TestStubs.routerContext();
     const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
       routerContext
     );
 
@@ -351,8 +331,68 @@ describe('OrganizationMembers', function() {
       })
     );
 
-    wrapper.find('PanelHeader form').simulate('submit');
+    wrapper.find('SearchWrapper form').simulate('submit');
 
     expect(routerContext.context.router.push).toHaveBeenCalledTimes(1);
   });
+
+  it('can filter members', async function() {
+    const searchMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-id/members/',
+      body: [],
+    });
+    const routerContext = TestStubs.routerContext();
+    const wrapper = mountWithTheme(
+      <OrganizationMembersList {...defaultProps} params={{orgId: 'org-id'}} />,
+      routerContext
+    );
+
+    wrapper.find('AsyncComponentSearchInput DropdownMenu Button').simulate('click');
+
+    wrapper
+      .find('AsyncComponentSearchInput [data-test-id="filter-role-member"] input')
+      .simulate('change', {target: {checked: true}});
+
+    expect(searchMock).toHaveBeenLastCalledWith(
+      '/organizations/org-id/members/',
+      expect.objectContaining({
+        method: 'GET',
+        query: {query: 'role:member'},
+      })
+    );
+
+    wrapper
+      .find('AsyncComponentSearchInput [data-test-id="filter-role-member"] input')
+      .simulate('change', {target: {checked: false}});
+
+    for (const filter of ['isInvited', 'has2fa', 'ssoLinked']) {
+      wrapper
+        .find(`AsyncComponentSearchInput [data-test-id="filter-${filter}"] input`)
+        .simulate('change', {target: {checked: true}});
+
+      expect(searchMock).toHaveBeenLastCalledWith(
+        '/organizations/org-id/members/',
+        expect.objectContaining({
+          method: 'GET',
+          query: {query: `${filter}:true`},
+        })
+      );
+
+      wrapper
+        .find(`AsyncComponentSearchInput [data-test-id="filter-${filter}"] Switch`)
+        .simulate('click');
+
+      expect(searchMock).toHaveBeenLastCalledWith(
+        '/organizations/org-id/members/',
+        expect.objectContaining({
+          method: 'GET',
+          query: {query: `${filter}:false`},
+        })
+      );
+
+      wrapper
+        .find(`AsyncComponentSearchInput [data-test-id="filter-${filter}"] input`)
+        .simulate('change', {target: {checked: false}});
+    }
+  });
 });
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
index 217b6bd515..e31b282e78 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
@@ -42,6 +42,11 @@ describe('OrganizationMembersWrapper', function() {
   beforeEach(function() {
     trackAnalyticsEvent.mockClear();
     MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/members/me/',
+      method: 'GET',
+      body: {roles: []},
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/invite-requests/',
       method: 'GET',
