commit 1e086b9a3a21168e3c014fbbad09785149e98008
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 5 17:09:44 2013 -0800

    Improve how public events are rendered and restrict the data made available

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index b2ba6667c3..7cfbeab04b 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -116,10 +116,10 @@ class Interface(object):
     def get_hash(self):
         return []
 
-    def to_html(self, event):
+    def to_html(self, event, is_public=False, **kwargs):
         return ''
 
-    def to_string(self, event):
+    def to_string(self, event, is_public=False, **kwargs):
         return ''
 
     def get_slug(self):
@@ -383,7 +383,7 @@ class Stacktrace(Interface):
 
         return newest_first
 
-    def to_html(self, event):
+    def to_html(self, event, is_public=False, **kwargs):
         if not self.frames:
             return ''
 
@@ -404,12 +404,6 @@ class Stacktrace(Interface):
                 context = []
                 start_lineno = None
 
-            context_vars = []
-            if frame.get('vars'):
-                context_vars = frame['vars']
-            else:
-                context_vars = []
-
             if frame.get('lineno') is not None:
                 lineno = int(frame['lineno'])
             else:
@@ -424,9 +418,10 @@ class Stacktrace(Interface):
                 'start_lineno': start_lineno,
                 'lineno': lineno,
                 'context': context,
-                'vars': context_vars,
                 'in_app': in_app,
             }
+            if not is_public:
+                frame_data['vars'] = frame.get('vars') or []
 
             if event.platform == 'javascript' and frame.get('data'):
                 data = frame['data']
@@ -450,6 +445,7 @@ class Stacktrace(Interface):
             frames = frames[::-1]
 
         return render_to_string('sentry/partial/interfaces/stacktrace.html', {
+            'is_public': is_public,
             'newest_first': newest_first,
             'system_frames': system_frames,
             'event': event,
@@ -457,7 +453,7 @@ class Stacktrace(Interface):
             'stacktrace': self.get_traceback(event, newest_first=newest_first),
         })
 
-    def to_string(self, event):
+    def to_string(self, event, is_public=False, **kwargs):
         return self.get_stacktrace(event, system_frames=False, max_frames=5)
 
     def get_stacktrace(self, event, system_frames=True, newest_first=None, max_frames=None):
@@ -562,12 +558,13 @@ class Exception(Interface):
     def get_hash(self):
         return filter(bool, [self.type, self.value])
 
-    def to_html(self, event):
+    def to_html(self, event, is_public=False, **kwargs):
         last_frame = None
         interface = event.interfaces.get('sentry.interfaces.Stacktrace')
         if interface is not None and interface.frames:
             last_frame = interface.frames[-1]
         return render_to_string('sentry/partial/interfaces/exception.html', {
+            'is_public': is_public,
             'event': event,
             'exception_value': self.value,
             'exception_type': self.type,
@@ -669,7 +666,7 @@ class Http(Interface):
             'env': self.env,
         }
 
-    def to_string(self, event):
+    def to_string(self, event, is_public=False, **kwargs):
         return render_to_string('sentry/partial/interfaces/http.txt', {
             'event': event,
             'full_url': '?'.join(filter(bool, [self.url, self.query_string])),
@@ -690,7 +687,7 @@ class Http(Interface):
         else:
             return True, value
 
-    def to_html(self, event):
+    def to_html(self, event, is_public=False, **kwargs):
         data = self.data
         data_is_dict = False
         headers_is_dict, headers = self._to_dict(self.headers)
@@ -698,10 +695,10 @@ class Http(Interface):
         if headers_is_dict and headers.get('Content-Type') == 'application/x-www-form-urlencoded':
             data_is_dict, data = self._to_dict(data)
 
-        # It's kind of silly we store this twice
-        cookies_is_dict, cookies = self._to_dict(self.cookies or headers.pop('Cookie', {}))
+        cookies = self.cookies or headers.pop('Cookie', {})
 
-        return render_to_string('sentry/partial/interfaces/http.html', {
+        context = {
+            'is_public': is_public,
             'event': event,
             'full_url': '?'.join(filter(bool, [self.url, self.query_string])),
             'url': self.url,
@@ -709,12 +706,20 @@ class Http(Interface):
             'data': data,
             'data_is_dict': data_is_dict,
             'query_string': self.query_string,
-            'cookies': cookies,
-            'cookies_is_dict': cookies_is_dict,
             'headers': self.headers,
             'headers_is_dict': headers_is_dict,
-            'env': self.env,
-        })
+        }
+        if not is_public:
+            # It's kind of silly we store this twice
+            cookies_is_dict, cookies = self._to_dict(cookies)
+
+            context.update({
+                'cookies': cookies,
+                'cookies_is_dict': cookies_is_dict,
+                'env': self.env,
+            })
+
+        return render_to_string('sentry/partial/interfaces/http.html', context)
 
     def get_title(self):
         return _('Request')
@@ -773,7 +778,7 @@ class Template(Interface):
     def get_hash(self):
         return [self.filename, self.context_line]
 
-    def to_string(self, event):
+    def to_string(self, event, is_public=False, **kwargs):
         context = get_context(
             lineno=self.lineno,
             context_line=self.context_line,
@@ -790,7 +795,7 @@ class Template(Interface):
 
         return '\n'.join(result)
 
-    def to_html(self, event):
+    def to_html(self, event, is_public=False, **kwargs):
         context = get_context(
             lineno=self.lineno,
             context_line=self.context_line,
@@ -808,6 +813,7 @@ class Template(Interface):
             'start_lineno': context[0][0],
             'context': context,
             'template': self.get_traceback(event, context),
+            'is_public': is_public,
         })
 
     def get_traceback(self, event, context):
@@ -860,8 +866,9 @@ class User(Interface):
     def get_hash(self):
         return []
 
-    def to_html(self, event):
+    def to_html(self, event, is_public=False, **kwargs):
         return render_to_string('sentry/partial/interfaces/user.html', {
+            'is_public': is_public,
             'event': event,
             'user_id': self.id,
             'user_username': self.username,
diff --git a/src/sentry/templates/sentry/groups/details.html b/src/sentry/templates/sentry/groups/details.html
index dba4b42a77..893424f861 100644
--- a/src/sentry/templates/sentry/groups/details.html
+++ b/src/sentry/templates/sentry/groups/details.html
@@ -22,7 +22,7 @@
 
     <section class="body">
         {% block inner %}
-            {% with event|get_rendered_interfaces as interface_list %}
+            {% with event|get_rendered_interfaces:request as interface_list %}
 
                 {% if group|has_charts %}
                     <div class="module">
diff --git a/src/sentry/templates/sentry/groups/public_details.html b/src/sentry/templates/sentry/groups/public_details.html
new file mode 100644
index 0000000000..1a1f829863
--- /dev/null
+++ b/src/sentry/templates/sentry/groups/public_details.html
@@ -0,0 +1,60 @@
+{% extends "sentry/groups/details.html" %}
+
+{% load i18n %}
+{% load sentry_activity %}
+{% load sentry_helpers %}
+{% load sentry_plugins %}
+
+{% block title %}{{ event.error }} | {{ block.super }}{% endblock %}
+
+{% block page_header_block %}
+    <section id="page-header" class="toolbar" style="height:5px;">
+    </section>
+{% endblock %}
+
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    {% handle_before_events request group %}
+
+    <div id="details">
+        <div id="event_list" class="inactive"></div>
+    </div>
+
+    <section class="body">
+        {% block inner %}
+
+            {% with event|get_rendered_interfaces:request as interface_list %}
+
+                <div class="btn-toolbar event-toolbar">
+                    <!-- We switch the ordering of events here as it makes more sense visually -->
+                    <a class="btn pull-left prev {% if not next_event %} disabled{% endif %}"{% if next_event %} href="{% url sentry-group-event group.team.slug group.project.slug group.id next_event.id %}"{% endif %}><span></span> {% trans "Newer Event" %}</a>
+                    <a class="btn pull-right next {% if not prev_event %} disabled{% endif %}"{% if prev_event %} href="{% url sentry-group-event group.team.slug group.project.slug group.id prev_event.id %}"{% endif %}>{% trans "Older Event" %} <span></span></a>
+                    <h4>Event at {{ event.datetime }} {{ event.datetime.tzinfo }}</h4>
+                </div>
+
+                {% include "sentry/partial/event_nav.html" %}
+            
+                <div class="alert alert-block alert-info">
+                    <p>{% trans "You are viewing a publicly available version of this event's data. Some information may not be available." %}</p>
+                </div>
+
+                {% if event.has_two_part_message %}
+                    <pre id="full-message">{{ event.message }}</pre>
+                {% endif %}
+
+                {% include "sentry/partial/_event_details.html" %}
+            {% endwith %}
+        {% endblock %}
+    </section>
+{% endblock %}
+
+{% block content_after %}
+    <script type="text/javascript">
+    $(document).ready(function() {
+        new app.GroupDetailsPage({
+            group: {{ group|to_json:request|safe }},
+        });
+    });
+    </script>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/header.html b/src/sentry/templates/sentry/header.html
index 3ab9d735cc..4091d36ece 100644
--- a/src/sentry/templates/sentry/header.html
+++ b/src/sentry/templates/sentry/header.html
@@ -11,7 +11,9 @@
                         <ul>
                             <li{% if SECTION == 'events' %} class="active"{% endif %}><a href="{% url sentry team.slug %}">Events</a></li>
                             <!-- <li{% if SECTION == 'users' %} class="active"{% endif %}><a href="{% url sentry-users team.slug %}">Users</a></li> -->
-                            <li{% if SECTION == 'team' %} class="active"{% endif %}><a href="{% url sentry-manage-team team.slug %}">Team</a></li>
+                            {% if can_admin_team %}
+                                <li{% if SECTION == 'team' %} class="active"{% endif %}><a href="{% url sentry-manage-team team.slug %}">Team</a></li>
+                            {% endif %}
                         </ul>
                     </nav>
                 {% endif %}
diff --git a/src/sentry/templates/sentry/partial/interfaces/http.html b/src/sentry/templates/sentry/partial/interfaces/http.html
index 74efa68da2..15cb9fb538 100644
--- a/src/sentry/templates/sentry/partial/interfaces/http.html
+++ b/src/sentry/templates/sentry/partial/interfaces/http.html
@@ -3,7 +3,9 @@
 
 <div class="module">
     <div class="page-header">
-        <a href="{% url sentry-replay event.team.slug event.project.slug event.id %}" class="btn small pull-right">{% trans "Replay this request" %}</a>
+        {% if not is_public %}
+            <a href="{% url sentry-replay event.team.slug event.project.slug event.id %}" class="btn small pull-right">{% trans "Replay this request" %}</a>
+        {% endif %}
         <h2>{% trans "Request" %}</h2>
     </div>
     <div class="module-content">
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index b808b117fd..a3b814dc94 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -18,6 +18,7 @@ from paging.helpers import paginate as paginate_func
 from sentry.conf import settings
 from sentry.constants import STATUS_MUTED
 from sentry.models import Group
+from sentry.web.helpers import group_is_public
 from sentry.utils.avatar import get_gravatar_url
 from sentry.utils.javascript import to_json
 from sentry.utils.safe import safe_execute
@@ -337,10 +338,11 @@ def split(value, delim=''):
 
 
 @register.filter
-def get_rendered_interfaces(event):
+def get_rendered_interfaces(event, request):
     interface_list = []
+    is_public = group_is_public(event.group, request.user)
     for interface in event.interfaces.itervalues():
-        html = safe_execute(interface.to_html, event)
+        html = safe_execute(interface.to_html, event, is_public)
         if not html:
             continue
         interface_list.append((interface, mark_safe(html)))
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 78d8370e72..746bf86ac3 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -34,7 +34,7 @@ from sentry.utils import json
 from sentry.utils.dates import parse_date
 from sentry.utils.db import has_trending, get_db_engine
 from sentry.web.decorators import has_access, has_group_access, login_required
-from sentry.web.helpers import render_to_response
+from sentry.web.helpers import render_to_response, group_is_public
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$', re.I)
 event_re = re.compile(r'^(?P<event_id>[a-z0-9]{32})\$(?P<checksum>[a-z0-9]{32})$', re.I)
@@ -153,6 +153,51 @@ def _get_group_list(request, project):
     }
 
 
+def render_with_group_context(group, template, context, request=None, event=None):
+    activity = Activity.objects.filter(
+        group=group,
+    ).order_by('-datetime').select_related('user')
+    if event:
+        activity = activity.filter(Q(event__isnull=True) | Q(event=event))
+
+    activity = list(activity)
+
+    context.update({
+        'team': group.project.team,
+        'project': group.project,
+        'group': group,
+        'can_admin_event': can_admin_group(request.user, group),
+        'SECTION': 'events',
+        'activity': activity,
+    })
+
+    if event:
+        if event.id:
+            base_qs = group.event_set.exclude(id=event.id)
+            try:
+                next_event = base_qs.filter(datetime__gte=event.datetime).order_by('datetime')[0:1].get()
+            except Event.DoesNotExist:
+                next_event = None
+
+            try:
+                prev_event = base_qs.filter(datetime__lte=event.datetime).order_by('-datetime')[0:1].get()
+            except Event.DoesNotExist:
+                prev_event = None
+        else:
+            next_event = None
+            prev_event = None
+
+        context.update({
+            'event': event,
+            'json_data': event.data.get('extra', {}),
+            'version_data': event.data.get('modules', None),
+            'next_event': next_event,
+            'prev_event': prev_event,
+        })
+
+    return render_to_response(template, context, request)
+
+
 @login_required
 def redirect_to_group(request, project_id, group_id):
     group = get_object_or_404(Group, id=group_id)
@@ -293,61 +338,22 @@ def group_list(request, team, project):
     }, request)
 
 
-def render_with_group_context(group, template, context, request=None, event=None):
-    activity = Activity.objects.filter(
-        group=group,
-    ).order_by('-datetime').select_related('user')
-    if event:
-        activity = activity.filter(Q(event__isnull=True) | Q(event=event))
-
-    activity = list(activity)
-
-    context.update({
-        'team': group.project.team,
-        'project': group.project,
-        'group': group,
-        'can_admin_event': can_admin_group(request.user, group),
-        'SECTION': 'events',
-        'activity': activity,
-    })
-
-    if event:
-        if event.id:
-            base_qs = group.event_set.exclude(id=event.id)
-            try:
-                next_event = base_qs.filter(datetime__gte=event.datetime).order_by('datetime')[0:1].get()
-            except Event.DoesNotExist:
-                next_event = None
-
-            try:
-                prev_event = base_qs.filter(datetime__lte=event.datetime).order_by('-datetime')[0:1].get()
-            except Event.DoesNotExist:
-                prev_event = None
-        else:
-            next_event = None
-            prev_event = None
-
-        context.update({
-            'event': event,
-            'json_data': event.data.get('extra', {}),
-            'version_data': event.data.get('modules', None),
-            'next_event': next_event,
-            'prev_event': prev_event,
-        })
-
-    return render_to_response(template, context, request)
-
-
 @has_group_access
 def group(request, team, project, group):
     # It's possible that a message would not be created under certain
     # circumstances (such as a post_save signal failing)
     event = group.get_latest_event() or Event()
-    event.group
+    event.group = group
 
-    return render_with_group_context(group, 'sentry/groups/details.html', {
-        'page': 'details',
-    }, request, event=event)
+    context = {'page': 'details'}
+
+    if group_is_public(group, request.user):
+        template = 'sentry/groups/public_details.html'
+        context['PROJECT_LIST'] = [project]
+    else:
+        template = 'sentry/groups/details.html'
+
+    return render_with_group_context(group, template, context, request, event=event)
 
 
 @has_group_access
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 4506095da8..d47c9d87ca 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -57,6 +57,14 @@ def get_project_list(user=None, access=None, hidden=False, key='id', select_rela
         for p in base_qs.filter(filters).order_by('name'))
 
 
+def group_is_public(group, user):
+    """
+    Return ``True`` if the this group is publicly viewable and the user viewing it should
+    see a restricted view.
+    """
+    return group.is_public and not (user.is_authenticated() and group.project in get_project_list(user))
+
+
 def get_team_list(user, access=None):
     warnings.warn('get_team_list is Deprecated. Use Team.objects.get_for_user instead.', DeprecationWarning)
     return Team.objects.get_for_user(user, access)
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index 3cf6ecfbeb..56afea7b4c 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -151,6 +151,7 @@ class StacktraceTest(TestCase):
             'stacktrace': 'bar',
             'system_frames': 0,
             'newest_first': False,
+            'is_public': False,
         })
         self.assertEquals(result, render_to_string.return_value)
 
