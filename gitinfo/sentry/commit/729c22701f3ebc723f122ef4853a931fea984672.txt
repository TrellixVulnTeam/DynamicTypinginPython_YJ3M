commit 729c22701f3ebc723f122ef4853a931fea984672
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Oct 27 10:50:29 2017 -0700

    feat(workflow): Design/ux changes to invite member (#6450)
    
    * Fix Role/Team select box headers (removed ":")
    * Fix buggy Team select checkboxes
    * Fix 401 causing page refresh
    * Change loading state to hide form
    * Add busy state to submit button

diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index 8811dfcdbe..cc7513c412 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -94,7 +94,7 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
 
         if not features.has('organizations:invite-members', organization, actor=request.user):
             return Response(
-                {'organization': 'Your organization is not allowed to invite members'}, status=401)
+                {'organization': 'Your organization is not allowed to invite members'}, status=403)
 
         serializer = OrganizationMemberSerializer(data=request.DATA)
 
diff --git a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
index 5e6bbc36bb..3ab741d24e 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
@@ -30,6 +30,7 @@ const InviteMember = React.createClass({
       selectedRole: 'member',
       email: '',
       loading: true,
+      busy: false,
       error: undefined
     };
   },
@@ -83,7 +84,7 @@ const InviteMember = React.createClass({
           resolve();
         },
         error: err => {
-          if (err.status === 401) {
+          if (err.status === 403) {
             AlertActions.addAlert({
               message: "You aren't allowed to invite members.",
               type: 'error'
@@ -107,8 +108,7 @@ const InviteMember = React.createClass({
     let {email} = this.state;
     let emails = this.splitEmails(email);
     if (!emails.length) return;
-    this.setState({loading: true});
-
+    this.setState({busy: true});
     Promise.all(emails.map(this.inviteUser))
       .then(() => setTimeout(this.redirectToMemberPage, 3000))
       .catch(error => {
@@ -117,18 +117,22 @@ const InviteMember = React.createClass({
             extra: {error, state: this.state}
           });
         }
-        this.setState({error, loading: false});
+        this.setState({error, busy: false});
       });
   },
 
   toggleTeam(slug) {
-    let {selectedTeams} = this.state;
-    if (selectedTeams.has(slug)) {
-      selectedTeams.delete(slug);
-    } else {
-      selectedTeams.add(slug);
-    }
-    this.setState({selectedTeams});
+    this.setState(state => {
+      let {selectedTeams} = state;
+      if (selectedTeams.has(slug)) {
+        selectedTeams.delete(slug);
+      } else {
+        selectedTeams.add(slug);
+      }
+      return {
+        selectedTeams
+      };
+    });
   },
 
   render() {
@@ -147,31 +151,39 @@ const InviteMember = React.createClass({
                 'You may add a user by their username if they already have an account. Multiple inputs delimited by commas.'
               )}
         </p>
-        <div className={classNames({'has-error': error && error.email})}>
-          {loading && <LoadingIndicator mini className="pull-right" />}
-          <TextField
-            name="email"
-            label={invitesEnabled ? t('Email') + '(s)' : t('Username') + '(s)'}
-            placeholder="e.g. teammate@example.com"
-            spellCheck="false"
-            onChange={v => this.setState({email: v})}
-          />
-          {error && error.email && <p className="error">{error.email}</p>}
-        </div>
-        {error && error.role && <p className="error alert-error">{error.role}</p>}
-        <RoleSelect
-          roleList={roleList}
-          selectedRole={selectedRole}
-          setRole={slug => this.setState({selectedRole: slug})}
-        />
-        <TeamSelect
-          teams={teams}
-          selectedTeams={selectedTeams}
-          toggleTeam={this.toggleTeam}
-        />
-        <Button priority="primary" className="invite-member-submit" onClick={this.submit}>
-          {t('Add Member')}
-        </Button>
+
+        {loading && <LoadingIndicator />}
+        {!loading &&
+          <div>
+            <div className={classNames({'has-error': error && error.email})}>
+              <TextField
+                name="email"
+                label={invitesEnabled ? t('Email') + '(s)' : t('Username') + '(s)'}
+                placeholder="e.g. teammate@example.com"
+                spellCheck="false"
+                onChange={v => this.setState({email: v})}
+              />
+              {error && error.email && <p className="error">{error.email}</p>}
+            </div>
+            {error && error.role && <p className="error alert-error">{error.role}</p>}
+            <RoleSelect
+              roleList={roleList}
+              selectedRole={selectedRole}
+              setRole={slug => this.setState({selectedRole: slug})}
+            />
+            <TeamSelect
+              teams={teams}
+              selectedTeams={selectedTeams}
+              toggleTeam={this.toggleTeam}
+            />
+            <Button
+              priority="primary"
+              busy={this.state.busy}
+              className="invite-member-submit"
+              onClick={this.submit}>
+              {t('Add Member')}
+            </Button>
+          </div>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx b/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx
index e4bcde0966..0eda45932f 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx
@@ -18,7 +18,7 @@ const RoleSelect = React.createClass({
     return (
       <div className="new-invite-team box">
         <div className="box-header">
-          <h4>{t('Role') + ':'}</h4>
+          <h4>{t('Role')}</h4>
         </div>
         <div className="box-content with-padding">
           <ul className="radio-inputs">
diff --git a/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx b/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx
index 2e1fc24cd1..17a3775a33 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx
@@ -19,19 +19,19 @@ const TeamSelect = React.createClass({
     return (
       <div className="new-invite-team box">
         <div className="box-header">
-          <h4>{t('Team') + ':'}</h4>
+          <h4>{t('Team')}</h4>
         </div>
         <div className="grouping-controls team-choices row box-content with-padding">
           {teams.map(({slug, name}, i) => (
-            <div
-              key={slug}
-              onClick={e => {
-                e.preventDefault();
-                toggleTeam(slug);
-              }}
-              className="col-md-3">
+            <div key={slug} className="col-md-3">
               <label className="checkbox">
-                <Checkbox id={slug} value={name} checked={selectedTeams.has(slug)} />
+                <Checkbox
+                  id={slug}
+                  checked={selectedTeams.has(slug)}
+                  onChange={e => {
+                    toggleTeam(slug);
+                  }}
+                />
                 {name}
                 <span className="team-slug">{slug}</span>
               </label>
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index 8e2d7dca1a..aea48fd848 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -1,6 +1,6 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`CreateProject render() should render 1`] = `
+exports[`CreateProject render() should render loading 1`] = `
 <div>
   <h3>
     Add Member to Organization
@@ -8,61 +8,11 @@ exports[`CreateProject render() should render 1`] = `
   <p>
     Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one. Multiple emails delimited by commas.
   </p>
-  <div
-    className=""
-  >
-    <LoadingIndicator
-      className="pull-right"
-      mini={true}
-    />
-    <TextField
-      disabled={false}
-      hideErrorMessage={false}
-      label="Email(s)"
-      name="email"
-      onChange={[Function]}
-      placeholder="e.g. teammate@example.com"
-      required={false}
-      spellCheck="false"
-    />
-  </div>
-  <RoleSelect
-    roleList={Array []}
-    selectedRole="member"
-    setRole={[Function]}
-  />
-  <TeamSelect
-    selectedTeams={Array []}
-    teams={
-      Array [
-        Object {
-          "hasAccess": true,
-          "id": "1",
-          "name": "bar",
-          "slug": "bar",
-        },
-        Object {
-          "hasAccess": false,
-          "id": "2",
-          "name": "foo",
-          "slug": "foo",
-        },
-      ]
-    }
-    toggleTeam={[Function]}
-  />
-  <Button
-    className="invite-member-submit"
-    disabled={false}
-    onClick={[Function]}
-    priority="primary"
-  >
-    Add Member
-  </Button>
+  <LoadingIndicator />
 </div>
 `;
 
-exports[`CreateProject render() should render no team select when there is only one option 1`] = `
+exports[`CreateProject render() should render roles when available and allowed, and handle submitting 1`] = `
 <InviteMember
   params={
     Object {
@@ -77,508 +27,282 @@ exports[`CreateProject render() should render no team select when there is only
     <p>
       Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one. Multiple emails delimited by commas.
     </p>
-    <div
-      className=""
-    >
-      <TextField
-        disabled={false}
-        hideErrorMessage={false}
-        label="Email(s)"
-        name="email"
-        onChange={[Function]}
-        placeholder="e.g. teammate@example.com"
-        required={false}
-        spellCheck="false"
+    <div>
+      <div
+        className=""
       >
-        <div
-          className="control-group"
+        <TextField
+          disabled={false}
+          hideErrorMessage={false}
+          label="Email(s)"
+          name="email"
+          onChange={[Function]}
+          placeholder="e.g. teammate@example.com"
+          required={false}
+          spellCheck="false"
         >
           <div
-            className="controls"
+            className="control-group"
           >
-            <label
-              className="control-label"
-              htmlFor="id-email"
+            <div
+              className="controls"
             >
-              Email(s)
-            </label>
-            <input
-              className="form-control"
-              disabled={false}
-              id="id-email"
-              onChange={[Function]}
-              placeholder="e.g. teammate@example.com"
-              required={false}
-              spellCheck="false"
-              type="text"
-              value=""
-            />
+              <label
+                className="control-label"
+                htmlFor="id-email"
+              >
+                Email(s)
+              </label>
+              <input
+                className="form-control"
+                disabled={false}
+                id="id-email"
+                onChange={[Function]}
+                placeholder="e.g. teammate@example.com"
+                required={false}
+                spellCheck="false"
+                type="text"
+                value=""
+              />
+            </div>
           </div>
-        </div>
-      </TextField>
-    </div>
-    <RoleSelect
-      roleList={
-        Array [
-          Object {
-            "allowed": true,
-            "role": Object {
-              "desc": "a normal member",
-              "id": "1",
-              "name": "member",
+        </TextField>
+      </div>
+      <RoleSelect
+        roleList={
+          Array [
+            Object {
+              "allowed": true,
+              "role": Object {
+                "desc": "a normal member",
+                "id": "1",
+                "name": "member",
+              },
             },
-          },
-        ]
-      }
-      selectedRole="member"
-      setRole={[Function]}
-    >
-      <div
-        className="new-invite-team box"
+            Object {
+              "allowed": true,
+              "role": Object {
+                "desc": "another role",
+                "id": "2",
+                "name": "bar",
+              },
+            },
+          ]
+        }
+        selectedRole="1"
+        setRole={[Function]}
       >
         <div
-          className="box-header"
-        >
-          <h4>
-            Role:
-          </h4>
-        </div>
-        <div
-          className="box-content with-padding"
+          className="new-invite-team box"
         >
-          <ul
-            className="radio-inputs"
+          <div
+            className="box-header"
           >
-            <li
-              className="radio"
-              onClick={[Function]}
-              style={Object {}}
+            <h4>
+              Role
+            </h4>
+          </div>
+          <div
+            className="box-content with-padding"
+          >
+            <ul
+              className="radio-inputs"
             >
-              <label
+              <li
+                className="radio"
+                onClick={[Function]}
                 style={Object {}}
               >
-                <Radio
-                  checked={false}
-                  id="1"
-                  readOnly={true}
-                  value="member"
+                <label
+                  style={Object {}}
                 >
-                  <input
-                    checked={false}
-                    className="radio-select"
+                  <Radio
+                    checked={true}
                     id="1"
                     readOnly={true}
-                    type="radio"
                     value="member"
-                  />
-                </Radio>
-                member
-                <div
-                  className="help-block"
+                  >
+                    <input
+                      checked={true}
+                      className="radio-select"
+                      id="1"
+                      readOnly={true}
+                      type="radio"
+                      value="member"
+                    />
+                  </Radio>
+                  member
+                  <div
+                    className="help-block"
+                  >
+                    a normal member
+                  </div>
+                </label>
+              </li>
+              <li
+                className="radio"
+                onClick={[Function]}
+                style={Object {}}
+              >
+                <label
+                  style={Object {}}
                 >
-                  a normal member
-                </div>
-              </label>
-            </li>
-          </ul>
-        </div>
-      </div>
-    </RoleSelect>
-    <TeamSelect
-      selectedTeams={
-        Array [
-          "bar",
-        ]
-      }
-      teams={
-        Array [
-          Object {
-            "hasAccess": true,
-            "id": "1",
-            "name": "bar",
-            "slug": "bar",
-          },
-        ]
-      }
-      toggleTeam={[Function]}
-    />
-    <Button
-      className="invite-member-submit"
-      disabled={false}
-      onClick={[Function]}
-      priority="primary"
-    >
-      <button
-        className="invite-member-submit button button-primary"
-        disabled={false}
-        onClick={[Function]}
-        role="button"
-      >
-        <FlowLayout
-          truncate={false}
-        >
-          <div
-            className="flow-layout"
-          >
-            <span
-              className="button-label"
-            >
-              Add Member
-            </span>
-          </div>
-        </FlowLayout>
-      </button>
-    </Button>
-  </div>
-</InviteMember>
-`;
-
-exports[`CreateProject render() should render roles when available and allowed, and handle submitting 1`] = `
-<InviteMember
-  params={
-    Object {
-      "orgId": "testOrg",
-    }
-  }
->
-  <div>
-    <h3>
-      Add Member to Organization
-    </h3>
-    <p>
-      Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one. Multiple emails delimited by commas.
-    </p>
-    <div
-      className=""
-    >
-      <TextField
-        disabled={false}
-        hideErrorMessage={false}
-        label="Email(s)"
-        name="email"
-        onChange={[Function]}
-        placeholder="e.g. teammate@example.com"
-        required={false}
-        spellCheck="false"
-      >
-        <div
-          className="control-group"
-        >
-          <div
-            className="controls"
-          >
-            <label
-              className="control-label"
-              htmlFor="id-email"
-            >
-              Email(s)
-            </label>
-            <input
-              className="form-control"
-              disabled={false}
-              id="id-email"
-              onChange={[Function]}
-              placeholder="e.g. teammate@example.com"
-              required={false}
-              spellCheck="false"
-              type="text"
-              value=""
-            />
+                  <Radio
+                    checked={false}
+                    id="2"
+                    readOnly={true}
+                    value="bar"
+                  >
+                    <input
+                      checked={false}
+                      className="radio-select"
+                      id="2"
+                      readOnly={true}
+                      type="radio"
+                      value="bar"
+                    />
+                  </Radio>
+                  bar
+                  <div
+                    className="help-block"
+                  >
+                    another role
+                  </div>
+                </label>
+              </li>
+            </ul>
           </div>
         </div>
-      </TextField>
-    </div>
-    <RoleSelect
-      roleList={
-        Array [
-          Object {
-            "allowed": true,
-            "role": Object {
-              "desc": "a normal member",
+      </RoleSelect>
+      <TeamSelect
+        selectedTeams={
+          Array [
+            "bar",
+          ]
+        }
+        teams={
+          Array [
+            Object {
+              "hasAccess": true,
               "id": "1",
-              "name": "member",
+              "name": "bar",
+              "slug": "bar",
             },
-          },
-          Object {
-            "allowed": true,
-            "role": Object {
-              "desc": "another role",
+            Object {
+              "hasAccess": false,
               "id": "2",
-              "name": "bar",
+              "name": "foo",
+              "slug": "foo",
             },
-          },
-        ]
-      }
-      selectedRole="1"
-      setRole={[Function]}
-    >
-      <div
-        className="new-invite-team box"
+          ]
+        }
+        toggleTeam={[Function]}
       >
         <div
-          className="box-header"
+          className="new-invite-team box"
         >
-          <h4>
-            Role:
-          </h4>
-        </div>
-        <div
-          className="box-content with-padding"
-        >
-          <ul
-            className="radio-inputs"
+          <div
+            className="box-header"
+          >
+            <h4>
+              Team
+            </h4>
+          </div>
+          <div
+            className="grouping-controls team-choices row box-content with-padding"
           >
-            <li
-              className="radio"
-              onClick={[Function]}
-              style={Object {}}
+            <div
+              className="col-md-3"
             >
               <label
-                style={Object {}}
+                className="checkbox"
               >
-                <Radio
+                <Checkbox
                   checked={true}
-                  id="1"
-                  readOnly={true}
-                  value="member"
+                  id="bar"
+                  onChange={[Function]}
                 >
                   <input
                     checked={true}
-                    className="radio-select"
-                    id="1"
-                    readOnly={true}
-                    type="radio"
-                    value="member"
+                    className="chk-select"
+                    id="bar"
+                    onChange={[Function]}
+                    type="checkbox"
                   />
-                </Radio>
-                member
-                <div
-                  className="help-block"
+                </Checkbox>
+                bar
+                <span
+                  className="team-slug"
                 >
-                  a normal member
-                </div>
+                  bar
+                </span>
               </label>
-            </li>
-            <li
-              className="radio"
-              onClick={[Function]}
-              style={Object {}}
+            </div>
+            <div
+              className="col-md-3"
             >
               <label
-                style={Object {}}
+                className="checkbox"
               >
-                <Radio
+                <Checkbox
                   checked={false}
-                  id="2"
-                  readOnly={true}
-                  value="bar"
+                  id="foo"
+                  onChange={[Function]}
                 >
                   <input
                     checked={false}
-                    className="radio-select"
-                    id="2"
-                    readOnly={true}
-                    type="radio"
-                    value="bar"
+                    className="chk-select"
+                    id="foo"
+                    onChange={[Function]}
+                    type="checkbox"
                   />
-                </Radio>
-                bar
-                <div
-                  className="help-block"
+                </Checkbox>
+                foo
+                <span
+                  className="team-slug"
                 >
-                  another role
-                </div>
+                  foo
+                </span>
               </label>
-            </li>
-          </ul>
-        </div>
-      </div>
-    </RoleSelect>
-    <TeamSelect
-      selectedTeams={
-        Array [
-          "bar",
-        ]
-      }
-      teams={
-        Array [
-          Object {
-            "hasAccess": true,
-            "id": "1",
-            "name": "bar",
-            "slug": "bar",
-          },
-          Object {
-            "hasAccess": false,
-            "id": "2",
-            "name": "foo",
-            "slug": "foo",
-          },
-        ]
-      }
-      toggleTeam={[Function]}
-    >
-      <div
-        className="new-invite-team box"
-      >
-        <div
-          className="box-header"
-        >
-          <h4>
-            Team:
-          </h4>
-        </div>
-        <div
-          className="grouping-controls team-choices row box-content with-padding"
-        >
-          <div
-            className="col-md-3"
-            onClick={[Function]}
-          >
-            <label
-              className="checkbox"
-            >
-              <Checkbox
-                checked={true}
-                id="bar"
-                value="bar"
-              >
-                <input
-                  checked={true}
-                  className="chk-select"
-                  id="bar"
-                  type="checkbox"
-                  value="bar"
-                />
-              </Checkbox>
-              bar
-              <span
-                className="team-slug"
-              >
-                bar
-              </span>
-            </label>
-          </div>
-          <div
-            className="col-md-3"
-            onClick={[Function]}
-          >
-            <label
-              className="checkbox"
-            >
-              <Checkbox
-                checked={false}
-                id="foo"
-                value="foo"
-              >
-                <input
-                  checked={false}
-                  className="chk-select"
-                  id="foo"
-                  type="checkbox"
-                  value="foo"
-                />
-              </Checkbox>
-              foo
-              <span
-                className="team-slug"
-              >
-                foo
-              </span>
-            </label>
+            </div>
           </div>
         </div>
-      </div>
-    </TeamSelect>
-    <Button
-      className="invite-member-submit"
-      disabled={false}
-      onClick={[Function]}
-      priority="primary"
-    >
-      <button
-        className="invite-member-submit button button-primary"
+      </TeamSelect>
+      <Button
+        busy={false}
+        className="invite-member-submit"
         disabled={false}
         onClick={[Function]}
-        role="button"
+        priority="primary"
       >
-        <FlowLayout
-          truncate={false}
+        <button
+          className="invite-member-submit button button-primary"
+          disabled={false}
+          onClick={[Function]}
+          role="button"
         >
-          <div
-            className="flow-layout"
+          <FlowLayout
+            truncate={false}
           >
-            <span
-              className="button-label"
+            <div
+              className="flow-layout"
             >
-              Add Member
-            </span>
-          </div>
-        </FlowLayout>
-      </button>
-    </Button>
+              <span
+                className="button-label"
+              >
+                Add Member
+              </span>
+            </div>
+          </FlowLayout>
+        </button>
+      </Button>
+    </div>
   </div>
 </InviteMember>
 `;
 
 exports[`CreateProject render() should use invite/add language based on config 1`] = `
-<div>
-  <h3>
-    Add Member to Organization
-  </h3>
-  <p>
-    You may add a user by their username if they already have an account. Multiple inputs delimited by commas.
-  </p>
-  <div
-    className=""
-  >
-    <LoadingIndicator
-      className="pull-right"
-      mini={true}
-    />
-    <TextField
-      disabled={false}
-      hideErrorMessage={false}
-      label="Username(s)"
-      name="email"
-      onChange={[Function]}
-      placeholder="e.g. teammate@example.com"
-      required={false}
-      spellCheck="false"
-    />
-  </div>
-  <RoleSelect
-    roleList={Array []}
-    selectedRole="member"
-    setRole={[Function]}
-  />
-  <TeamSelect
-    selectedTeams={Array []}
-    teams={
-      Array [
-        Object {
-          "hasAccess": true,
-          "id": "1",
-          "name": "bar",
-          "slug": "bar",
-        },
-        Object {
-          "hasAccess": false,
-          "id": "2",
-          "name": "foo",
-          "slug": "foo",
-        },
-      ]
-    }
-    toggleTeam={[Function]}
-  />
-  <Button
-    className="invite-member-submit"
-    disabled={false}
-    onClick={[Function]}
-    priority="primary"
-  >
-    Add Member
-  </Button>
-</div>
+<p>
+  You may add a user by their username if they already have an account. Multiple inputs delimited by commas.
+</p>
 `;
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index 4cd0c92550..2f435f95f4 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -46,7 +46,7 @@ describe('CreateProject', function() {
       }
     };
 
-    it('should render', function() {
+    it('should render loading', function() {
       let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
       expect(wrapper).toMatchSnapshot();
     });
@@ -70,11 +70,13 @@ describe('CreateProject', function() {
 
       let context = _.cloneDeep(baseContext);
 
-      context.context.organization.teams = context.context.organization.teams.slice(0, 1);
+      let team = context.context.organization.teams.slice(0, 1);
+      context.context.organization.teams = team;
 
       let wrapper = mount(<InviteMember {...baseProps} />, context);
 
-      expect(wrapper).toMatchSnapshot();
+      expect(wrapper.state('selectedTeams').size).toBe(1);
+      expect(wrapper.state('selectedTeams').has(team[0].slug)).toBe(true);
     });
 
     it('should use invite/add language based on config', function() {
@@ -82,8 +84,12 @@ describe('CreateProject', function() {
       this.sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: false});
 
       let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
+      wrapper.setState({
+        loading: false
+      });
 
-      expect(wrapper).toMatchSnapshot();
+      // Lets just target message
+      expect(wrapper.find('div > p')).toMatchSnapshot();
     });
 
     it('should redirect when no roles available', function() {
@@ -118,9 +124,7 @@ describe('CreateProject', function() {
       expect(wrapper.state('loading')).toBe(false);
     });
 
-    it('should render roles when available and allowed, and handle submitting', function(
-      done
-    ) {
+    it('should render roles when available and allowed, and handle submitting', function() {
       Client.addMockResponse({
         url: '/organizations/testOrg/members/me/',
         body: {
@@ -146,37 +150,28 @@ describe('CreateProject', function() {
 
       Client.addMockResponse(inviteRequest);
 
-      let wrapper;
-
-      // 👺 ⚠️ this is a hack to defeat the method auto binding so we can fully stub the method. It would not be neccessary with es6 class components and it relies on react internals so it's fragile - maxbittker
-      const index =
-        InviteMember.prototype.__reactAutoBindPairs.indexOf('redirectToMemberPage') + 1;
-
-      InviteMember.prototype.__reactAutoBindPairs[index] = () => {
-        expect(Client.getCallCount(inviteRequest)).toBe(3);
-        expect(wrapper.state('loading')).toBe(true);
-        done();
-      };
-
-      wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+      let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
 
       expect(wrapper.state('loading')).toBe(false);
 
       let node = wrapper.find('.radio').first();
       node.props().onClick();
 
-      node = wrapper.find('.team-choices > div').first();
-      node.props().onClick({preventDefault: () => {}});
+      node = wrapper.find('.team-choices input').first();
+      node.props().onChange({preventDefault: () => {}});
 
       expect(wrapper).toMatchSnapshot();
 
       node = wrapper.find('.invite-member-submit').first();
       node.props().onClick({preventDefault: () => {}});
-      expect(wrapper.state('loading')).toBe(false);
+      expect(wrapper.state('busy')).toBe(false);
 
       wrapper.setState({email: 'test@email.com, test2@email.com, test3@email.com, '});
 
       node.props().onClick({preventDefault: () => {}});
+      expect(wrapper.state('busy')).toBe(true);
+      expect(wrapper.state('error')).toBe(undefined);
+      expect(Client.getCallCount(inviteRequest)).toBe(3);
     });
   });
 });
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index bee8d2d752..af99f8d392 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -249,7 +249,7 @@ class OrganizationMemberListTest(APITestCase):
                     self.team.slug,
                 ]})
 
-        assert resp.status_code == 401
+        assert resp.status_code == 403
 
     def test_no_team_invites(self):
         self.login_as(user=self.owner_user)
