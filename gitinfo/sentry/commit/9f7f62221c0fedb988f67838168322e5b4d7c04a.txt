commit 9f7f62221c0fedb988f67838168322e5b4d7c04a
Author: k-fish <kevan.fisher@sentry.io>
Date:   Tue Jun 16 10:58:25 2020 -0700

    ref(ts): Convert `<SearchBar>` to typescript (#19347)
    
    * ref(ts): Convert `<SearchBar>` to typescript
    
    Converts events SearchBar to typescript. Used 'any' for Field to get around propType to typescript issues. Also pull a null guard for calling clear on cache instead of modifying memoize.
    
    * Fixed types and some call site implementation as some types were incompatible (eg. projectIds). Removed passed in help prop as it does not appear to be a valid prop for SearchBar. Removed location that was passed in which also was not consumed.
    
    * Replace if null guard with optional chaining
    
    * Extract tagCollection into app/types/index
    
    * Fix not using proper propTypes
    
    Co-authored-by: k-fish <k-fish@users.noreply.github.com>

diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
index 1d601280e6..b4a5de4e38 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
@@ -25,7 +25,7 @@ import theme from 'app/utils/theme';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import {Client} from 'app/api';
-import {SavedSearch, LightWeightOrganization} from 'app/types';
+import {LightWeightOrganization, SavedSearch, Tag} from 'app/types';
 import {
   fetchRecentSearches,
   pinSearch,
@@ -40,7 +40,7 @@ import {
 } from 'app/constants';
 
 import SearchDropdown from './searchDropdown';
-import {SearchItem, SearchType, SearchGroup, Tag, ItemType} from './types';
+import {SearchItem, SearchType, SearchGroup, ItemType} from './types';
 import {
   addSpace,
   removeSpace,
@@ -215,7 +215,7 @@ type Props = {
    * is because we don't want to treat environment as a tag in some places
    * such as the stream view where it is a top level concept
    */
-  excludeEnvironment: boolean;
+  excludeEnvironment?: boolean;
 };
 
 type State = {
@@ -623,7 +623,7 @@ class SmartSearchBar extends React.Component<Props, State> {
    * with results
    */
   getPredefinedTagValues = (tag: Tag, query: string): SearchItem[] =>
-    tag.values
+    (tag.values ?? [])
       .filter(value => value.indexOf(query) > -1)
       .map(value => ({
         value,
diff --git a/src/sentry/static/sentry/app/stores/tagStore.tsx b/src/sentry/static/sentry/app/stores/tagStore.tsx
index a8d3cf1e21..c644253798 100644
--- a/src/sentry/static/sentry/app/stores/tagStore.tsx
+++ b/src/sentry/static/sentry/app/stores/tagStore.tsx
@@ -1,7 +1,7 @@
 import Reflux from 'reflux';
 import reduce from 'lodash/reduce';
 
-import {Tag} from 'app/types';
+import {Tag, TagCollection} from 'app/types';
 import TagActions from 'app/actions/tagActions';
 
 // This list is only used on issues. Events/discover
@@ -50,8 +50,6 @@ const BUILTIN_TAGS = [
   return acc;
 }, {});
 
-type TagCollection = {[key: string]: Tag};
-
 type TagStoreInterface = {
   state: TagCollection;
   getBuiltInTags: () => TagCollection;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 99bc75f472..86c1cec975 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1136,6 +1136,8 @@ export type Tag = {
   predefined?: boolean;
 };
 
+export type TagCollection = {[key: string]: Tag};
+
 export type TagValue = {
   count: number;
   name: string;
diff --git a/src/sentry/static/sentry/app/utils/withIssueTags.tsx b/src/sentry/static/sentry/app/utils/withIssueTags.tsx
index be5f1a947a..d258038498 100644
--- a/src/sentry/static/sentry/app/utils/withIssueTags.tsx
+++ b/src/sentry/static/sentry/app/utils/withIssueTags.tsx
@@ -6,9 +6,7 @@ import assign from 'lodash/assign';
 import getDisplayName from 'app/utils/getDisplayName';
 import MemberListStore from 'app/stores/memberListStore';
 import TagStore from 'app/stores/tagStore';
-import {User, Tag} from 'app/types';
-
-type TagCollection = {[key: string]: Tag};
+import {User, TagCollection} from 'app/types';
 
 type InjectedTagsProps = {
   tags: TagCollection;
diff --git a/src/sentry/static/sentry/app/utils/withTags.tsx b/src/sentry/static/sentry/app/utils/withTags.tsx
index eb91a5b590..eb68dd24ce 100644
--- a/src/sentry/static/sentry/app/utils/withTags.tsx
+++ b/src/sentry/static/sentry/app/utils/withTags.tsx
@@ -4,9 +4,7 @@ import createReactClass from 'create-react-class';
 
 import getDisplayName from 'app/utils/getDisplayName';
 import TagStore from 'app/stores/tagStore';
-import {Tag} from 'app/types';
-
-type TagCollection = {[key: string]: Tag};
+import {TagCollection} from 'app/types';
 
 type InjectedTagsProps = {
   tags: TagCollection;
diff --git a/src/sentry/static/sentry/app/views/events/searchBar.jsx b/src/sentry/static/sentry/app/views/events/searchBar.tsx
similarity index 77%
rename from src/sentry/static/sentry/app/views/events/searchBar.jsx
rename to src/sentry/static/sentry/app/views/events/searchBar.tsx
index 1969abf001..2bee7646e3 100644
--- a/src/sentry/static/sentry/app/views/events/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/events/searchBar.tsx
@@ -12,9 +12,11 @@ import {defined} from 'app/utils';
 import {fetchTagValues} from 'app/actionCreators/tags';
 import SentryTypes from 'app/sentryTypes';
 import SmartSearchBar, {SearchType} from 'app/components/smartSearchBar';
-import {FIELDS, TRACING_FIELDS} from 'app/utils/discover/fields';
+import {Field, FIELDS, TRACING_FIELDS} from 'app/utils/discover/fields';
 import withApi from 'app/utils/withApi';
 import withTags from 'app/utils/withTags';
+import {Client} from 'app/api';
+import {Organization, TagCollection} from 'app/types';
 
 const SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(
   `^${NEGATION_OPERATOR}|\\${SEARCH_WILDCARD}`,
@@ -25,25 +27,34 @@ const FIELD_TAGS = Object.fromEntries(
   Object.keys(FIELDS).map(item => [item, {key: item, name: item}])
 );
 
-class SearchBar extends React.PureComponent {
-  static propTypes = {
+type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {
+  api: Client;
+  organization: Organization;
+  tags: TagCollection;
+  omitTags?: string[];
+  projectIds?: number[] | Readonly<number[]>;
+  fields?: Readonly<Field[]>;
+};
+
+class SearchBar extends React.PureComponent<SearchBarProps> {
+  static propTypes: any = {
     api: PropTypes.object,
     organization: SentryTypes.Organization,
     tags: PropTypes.objectOf(SentryTypes.Tag),
-    omitTags: PropTypes.arrayOf(PropTypes.string),
-    projectIds: PropTypes.arrayOf(PropTypes.number),
-    fields: PropTypes.arrayOf(PropTypes.object),
+    omitTags: PropTypes.arrayOf(PropTypes.string.isRequired),
+    projectIds: PropTypes.arrayOf(PropTypes.number.isRequired),
+    fields: PropTypes.arrayOf(PropTypes.object.isRequired) as any,
   };
 
   componentDidMount() {
     // Clear memoized data on mount to make tests more consistent.
-    this.getEventFieldValues.cache.clear();
+    this.getEventFieldValues.cache.clear?.();
   }
 
   componentDidUpdate(prevProps) {
     if (!isEqual(this.props.projectIds, prevProps.projectIds)) {
       // Clear memoized data when projects change.
-      this.getEventFieldValues.cache.clear();
+      this.getEventFieldValues.cache.clear?.();
     }
   }
 
@@ -52,15 +63,16 @@ class SearchBar extends React.PureComponent {
    * with data when ready
    */
   getEventFieldValues = memoize(
-    (tag, query, endpointParams) => {
+    (tag, query, endpointParams): Promise<string[]> => {
       const {api, organization, projectIds} = this.props;
+      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);
 
       return fetchTagValues(
         api,
         organization.slug,
         tag.key,
         query,
-        projectIds,
+        projectIdStrings,
         endpointParams
       ).then(
         results =>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 2a120b968c..9fdc637fca 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -26,6 +26,7 @@ import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 import {ContentBox, Main, Side} from 'app/utils/discover/styles';
 import {generateQueryWithTag} from 'app/utils';
 import localStorage from 'app/utils/localStorage';
+import {decodeScalar} from 'app/utils/queryString';
 
 import {DEFAULT_EVENT_VIEW} from './data';
 import Table from './table';
@@ -255,7 +256,7 @@ class Results extends React.Component<Props, State> {
   render() {
     const {organization, location, router, api} = this.props;
     const {eventView, error, errorCode, totalValues, showTags} = this.state;
-    const query = location.query.query || '';
+    const query = decodeScalar(location.query.query) || '';
     const title = this.getDocumentTitle();
 
     return (
diff --git a/src/sentry/static/sentry/app/views/performance/landing.tsx b/src/sentry/static/sentry/app/views/performance/landing.tsx
index 3f8dddd6ea..5c31a44ca2 100644
--- a/src/sentry/static/sentry/app/views/performance/landing.tsx
+++ b/src/sentry/static/sentry/app/views/performance/landing.tsx
@@ -243,7 +243,6 @@ class PerformanceLanding extends React.Component<Props, State> {
                   <StyledSearchBar
                     organization={organization}
                     projectIds={eventView.project}
-                    location={location}
                     query={filterString}
                     fields={eventView.fields}
                     onSearch={this.handleSearch}
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index 712c6942cb..9cb776dc14 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -13,6 +13,7 @@ import EventView from 'app/utils/discover/eventView';
 import {ContentBox, HeaderBox, Main, Side} from 'app/utils/discover/styles';
 import Tags from 'app/views/eventsV2/tags';
 import SearchBar from 'app/views/events/searchBar';
+import {decodeScalar} from 'app/utils/queryString';
 
 import TransactionList from './transactionList';
 import UserStats from './userStats';
@@ -72,7 +73,7 @@ class SummaryContent extends React.Component<Props> {
 
   render() {
     const {transactionName, location, eventView, organization, totalValues} = this.props;
-    const query = location.query.query || '';
+    const query = decodeScalar(location.query.query) || '';
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
index cfb5938ec9..5c3fa7029d 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
@@ -138,7 +138,6 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
                     </SearchEventTypeNote>
                   </Tooltip>
                 }
-                help={t('Choose which metric to trigger on')}
                 omitTags={['event.type']}
                 disabled={disabled}
                 useFormWrapper={false}
diff --git a/tests/js/spec/views/events/searchBar.spec.jsx b/tests/js/spec/views/events/searchBar.spec.jsx
index 93a9e2bead..74a0999beb 100644
--- a/tests/js/spec/views/events/searchBar.spec.jsx
+++ b/tests/js/spec/views/events/searchBar.spec.jsx
@@ -78,7 +78,7 @@ describe('SearchBar', function() {
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
-      expect.objectContaining({query: {project: [1, 2], statsPeriod: '14d'}})
+      expect.objectContaining({query: {project: ['1', '2'], statsPeriod: '14d'}})
     );
 
     await tick();
@@ -113,7 +113,7 @@ describe('SearchBar', function() {
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
-      expect.objectContaining({query: {project: [1, 2], statsPeriod: '14d'}})
+      expect.objectContaining({query: {project: ['1', '2'], statsPeriod: '14d'}})
     );
 
     expect(wrapper.find('SearchDropdown').prop('searchSubstring')).toEqual('');
@@ -194,7 +194,7 @@ describe('SearchBar', function() {
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
-      expect.objectContaining({query: {project: [1, 2], statsPeriod: '14d'}})
+      expect.objectContaining({query: {project: ['1', '2'], statsPeriod: '14d'}})
     );
     selectFirstAutocompleteItem(wrapper);
     expect(wrapper.find('input').prop('value')).toBe('!gpu:*"Nvidia 1080ti" ');
diff --git a/tests/js/spec/views/performance/landing.spec.jsx b/tests/js/spec/views/performance/landing.spec.jsx
index 01594af5e0..c5f8a6ecba 100644
--- a/tests/js/spec/views/performance/landing.spec.jsx
+++ b/tests/js/spec/views/performance/landing.spec.jsx
@@ -144,10 +144,10 @@ describe('Performance > Landing', function() {
 
   it('does not render onboarding for "my projects"', async function() {
     const projects = [
-      TestStubs.Project({id: 1, firstTransactionEvent: false}),
-      TestStubs.Project({id: 2, firstTransactionEvent: true}),
+      TestStubs.Project({id: '1', firstTransactionEvent: false}),
+      TestStubs.Project({id: '2', firstTransactionEvent: true}),
     ];
-    const data = initializeData(projects, {project: [-1]});
+    const data = initializeData(projects, {project: ['-1']});
 
     const wrapper = mountWithTheme(
       <PerformanceLanding
