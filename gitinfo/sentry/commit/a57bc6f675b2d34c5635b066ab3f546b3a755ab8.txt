commit a57bc6f675b2d34c5635b066ab3f546b3a755ab8
Author: josh <josh@jrl.ninja>
Date:   Wed Apr 29 07:25:49 2020 +0000

    feat: devservices up cherry picker (#18514)

diff --git a/src/sentry/runner/commands/devservices.py b/src/sentry/runner/commands/devservices.py
index ebf8c5936d..40a29d1fb8 100644
--- a/src/sentry/runner/commands/devservices.py
+++ b/src/sentry/runner/commands/devservices.py
@@ -77,7 +77,7 @@ def attach(project, fast, service):
     client = get_docker_client()
     containers = _prepare_containers(project, silent=True)
     if service not in containers:
-        raise click.ClickException("Service {} is not known or not enabled.".format(service))
+        raise click.ClickException("Service `{}` is not known or not enabled.".format(service))
 
     container = _start_service(client, service, containers, project, fast=fast, always_start=True)
 
@@ -97,29 +97,41 @@ def attach(project, fast, service):
 
 
 @devservices.command()
+@click.argument("services", nargs=-1)
 @click.option("--project", default="sentry")
 @click.option("--exclude", multiple=True, help="Services to ignore and not run.")
 @click.option("--fast", is_flag=True, default=False, help="Never pull and reuse containers.")
-def up(project, exclude, fast):
+def up(services, project, exclude, fast):
     """
     Run/update dependent services.
-    """
 
+    The default is everything, however you may pass positional arguments to specify
+    an explicit list of services to bring up.
+    """
     os.environ["SENTRY_SKIP_BACKEND_VALIDATION"] = "1"
 
-    exclude = set(chain.from_iterable(x.split(",") for x in exclude))
-
     from sentry.runner import configure
 
     configure()
 
-    from django.conf import settings
-
-    client = get_docker_client()
-
-    get_or_create(client, "network", project)
+    containers = _prepare_containers(project, silent=True)
 
-    containers = _prepare_containers(project)
+    if services:
+        selected_containers = {}
+        for service in services:
+            if service not in containers:
+                click.secho(
+                    "Service `{}` is not known or not enabled.\n".format(service),
+                    err=True,
+                    fg="red",
+                )
+                click.secho(
+                    "Services that are available:\n" + "\n".join(containers.keys()) + "\n",
+                    err=True,
+                )
+                raise click.Abort()
+            selected_containers[service] = containers[service]
+        containers = selected_containers
 
     if fast:
         click.secho(
@@ -128,13 +140,13 @@ def up(project, exclude, fast):
             fg="red",
         )
 
-    for name, options in settings.SENTRY_DEVSERVICES.items():
-        if name in exclude:
-            continue
+    client = get_docker_client()
+    get_or_create(client, "network", project)
 
-        if name not in containers:
+    exclude = set(chain.from_iterable(x.split(",") for x in exclude))
+    for name, container_options in containers.items():
+        if name in exclude:
             continue
-
         _start_service(client, name, containers, project, fast=fast)
 
 
