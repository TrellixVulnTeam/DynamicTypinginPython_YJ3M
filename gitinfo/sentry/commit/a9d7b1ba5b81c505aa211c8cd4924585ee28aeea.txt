commit a9d7b1ba5b81c505aa211c8cd4924585ee28aeea
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Fri Oct 20 12:51:16 2017 -0500

    ref(tags): Extract tag related models into tagstore's legacy backend (#6327)

diff --git a/src/sentry/api/serializers/models/grouptagkey.py b/src/sentry/api/serializers/models/grouptagkey.py
deleted file mode 100644
index dd2ac8431c..0000000000
--- a/src/sentry/api/serializers/models/grouptagkey.py
+++ /dev/null
@@ -1,29 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from sentry import tagstore
-from sentry.api.serializers import Serializer, register
-from sentry.models import GroupTagKey
-
-
-@register(GroupTagKey)
-class GroupTagKeySerializer(Serializer):
-    def get_attrs(self, item_list, user):
-        result = {}
-        for item in item_list:
-            key = tagstore.get_standardized_key(item.key)
-            result[item] = {
-                'name': tagstore.get_tag_key_label(item.key),
-                'key': key,
-            }
-
-        return result
-
-    def serialize(self, obj, attrs, user):
-        return {
-            'id': six.text_type(obj.id),
-            'name': attrs['name'],
-            'key': attrs['key'],
-            'uniqueValues': obj.values_seen,
-        }
diff --git a/src/sentry/api/serializers/models/grouptagvalue.py b/src/sentry/api/serializers/models/grouptagvalue.py
deleted file mode 100644
index d839f623e5..0000000000
--- a/src/sentry/api/serializers/models/grouptagvalue.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from sentry import tagstore
-from sentry.api.serializers import Serializer, register
-from sentry.models import GroupTagValue
-
-
-@register(GroupTagValue)
-class GroupTagValueSerializer(Serializer):
-    def get_attrs(self, item_list, user):
-        result = {}
-        for item in item_list:
-            result[item] = {
-                'name': tagstore.get_tag_value_label(item.key, item.value),
-            }
-
-        return result
-
-    def serialize(self, obj, attrs, user):
-        return {
-            'id': six.text_type(obj.id),
-            'name': attrs['name'],
-            'key': tagstore.get_standardized_key(obj.key),
-            'value': obj.value,
-            'count': obj.times_seen,
-            'lastSeen': obj.last_seen,
-            'firstSeen': obj.first_seen,
-        }
diff --git a/src/sentry/api/serializers/models/tagkey.py b/src/sentry/api/serializers/models/tagkey.py
deleted file mode 100644
index 8ea3a7ff9a..0000000000
--- a/src/sentry/api/serializers/models/tagkey.py
+++ /dev/null
@@ -1,18 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from sentry import tagstore
-from sentry.api.serializers import Serializer, register
-from sentry.models import TagKey
-
-
-@register(TagKey)
-class TagKeySerializer(Serializer):
-    def serialize(self, obj, attrs, user):
-        return {
-            'id': six.text_type(obj.id),
-            'key': tagstore.get_standardized_key(obj.key),
-            'name': tagstore.get_tag_key_label(obj.key),
-            'uniqueValues': obj.values_seen,
-        }
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
index 48386d1598..668eeb034b 100644
--- a/src/sentry/api/serializers/models/tagvalue.py
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -2,31 +2,8 @@ from __future__ import absolute_import
 
 import six
 
-from sentry import tagstore
-from sentry.api.serializers import Serializer, register, serialize
-from sentry.models import EventUser, TagValue
-
-
-@register(TagValue)
-class TagValueSerializer(Serializer):
-    def get_attrs(self, item_list, user):
-        result = {}
-        for item in item_list:
-            result[item] = {
-                'name': tagstore.get_tag_value_label(item.key, item.value),
-            }
-        return result
-
-    def serialize(self, obj, attrs, user):
-        return {
-            'id': six.text_type(obj.id),
-            'key': tagstore.get_standardized_key(obj.key),
-            'name': attrs['name'],
-            'value': obj.value,
-            'count': obj.times_seen,
-            'lastSeen': obj.last_seen,
-            'firstSeen': obj.first_seen,
-        }
+from sentry.api.serializers import Serializer, serialize
+from sentry.models import EventUser
 
 
 class EnvironmentTagValueSerializer(Serializer):
diff --git a/src/sentry/deletions/__init__.py b/src/sentry/deletions/__init__.py
index 23b1be30c7..2b376d0312 100644
--- a/src/sentry/deletions/__init__.py
+++ b/src/sentry/deletions/__init__.py
@@ -43,7 +43,6 @@ def load_defaults():
     default_manager.register(models.EnvironmentProject, BulkModelDeletionTask)
     default_manager.register(models.Event, defaults.EventDeletionTask)
     default_manager.register(models.EventMapping, BulkModelDeletionTask)
-    default_manager.register(models.EventTag, BulkModelDeletionTask)
     default_manager.register(models.EventUser, BulkModelDeletionTask)
     default_manager.register(models.Group, defaults.GroupDeletionTask)
     default_manager.register(models.GroupAssignee, BulkModelDeletionTask)
@@ -60,8 +59,6 @@ def load_defaults():
     default_manager.register(models.GroupShare, BulkModelDeletionTask)
     default_manager.register(models.GroupSnooze, BulkModelDeletionTask)
     default_manager.register(models.GroupSubscription, BulkModelDeletionTask)
-    default_manager.register(models.GroupTagKey, BulkModelDeletionTask)
-    default_manager.register(models.GroupTagValue, BulkModelDeletionTask)
     default_manager.register(models.Organization, defaults.OrganizationDeletionTask)
     default_manager.register(models.OrganizationMemberTeam, BulkModelDeletionTask)
     default_manager.register(models.Project, defaults.ProjectDeletionTask)
@@ -70,8 +67,6 @@ def load_defaults():
     default_manager.register(models.Repository, defaults.RepositoryDeletionTask)
     default_manager.register(models.SavedSearch, BulkModelDeletionTask)
     default_manager.register(models.SavedSearchUserDefault, BulkModelDeletionTask)
-    default_manager.register(models.TagKey, defaults.TagKeyDeletionTask)
-    default_manager.register(models.TagValue, BulkModelDeletionTask)
     default_manager.register(models.Team, defaults.TeamDeletionTask)
     default_manager.register(models.UserReport, BulkModelDeletionTask)
 
diff --git a/src/sentry/deletions/base.py b/src/sentry/deletions/base.py
index 4feba65085..e4559d4c08 100644
--- a/src/sentry/deletions/base.py
+++ b/src/sentry/deletions/base.py
@@ -63,6 +63,12 @@ class BaseDeletionTask(object):
             # ModelRelation(Model, {'parent_id__in': [i.id for id in instance_list]})
         ]
 
+    def extend_relations(self, child_relations, obj):
+        return child_relations
+
+    def extend_relations_bulk(self, child_relations, obj_list):
+        return child_relations
+
     def filter_relations(self, child_relations):
         if not self.skip_models or not child_relations:
             return child_relations
@@ -80,6 +86,7 @@ class BaseDeletionTask(object):
         self.mark_deletion_in_progress(instance_list)
 
         child_relations = self.get_child_relations_bulk(instance_list)
+        child_relations = self.extend_relations_bulk(child_relations, instance_list)
         child_relations = self.filter_relations(child_relations)
         if child_relations:
             has_more = self.delete_children(child_relations)
@@ -88,6 +95,7 @@ class BaseDeletionTask(object):
 
         for instance in instance_list:
             child_relations = self.get_child_relations(instance)
+            child_relations = self.extend_relations(child_relations, instance)
             child_relations = self.filter_relations(child_relations)
             if child_relations:
                 has_more = self.delete_children(child_relations)
@@ -138,6 +146,17 @@ class ModelDeletionTask(BaseDeletionTask):
             type(self), self.model, self.query, self.order_by, self.transaction_id, self.actor_id,
         )
 
+    def extend_relations(self, child_relations, obj):
+        from sentry.deletions import default_manager
+
+        return child_relations + [rel(obj) for rel in default_manager.dependencies[self.model]]
+
+    def extend_relations_bulk(self, child_relations, obj_list):
+        from sentry.deletions import default_manager
+
+        return child_relations + [rel(obj_list)
+                                  for rel in default_manager.bulk_dependencies[self.model]]
+
     def chunk(self, num_shards=None, shard_id=None):
         """
         Deletes a chunk of this instance's data. Return ``True`` if there is
diff --git a/src/sentry/deletions/defaults/event.py b/src/sentry/deletions/defaults/event.py
index 8e01c6c4eb..33fa94f569 100644
--- a/src/sentry/deletions/defaults/event.py
+++ b/src/sentry/deletions/defaults/event.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import, print_function
 
 from sentry import nodestore
 
-from ..base import (BaseDeletionTask, BaseRelation, ModelDeletionTask, ModelRelation)
+from ..base import (BaseDeletionTask, BaseRelation, ModelDeletionTask)
 
 
 class NodeDeletionTask(BaseDeletionTask):
@@ -17,16 +17,6 @@ class NodeDeletionTask(BaseDeletionTask):
 
 class EventDeletionTask(ModelDeletionTask):
     def get_child_relations_bulk(self, instance_list):
-        from sentry.models import EventTag
-
         node_ids = [i.data.id for i in instance_list]
-        event_ids = [i.id for i in instance_list]
-
-        return [
-            BaseRelation({
-                'nodes': node_ids
-            }, NodeDeletionTask),
-            ModelRelation(EventTag, {
-                'event_id__in': event_ids,
-            }, ModelDeletionTask),
-        ]
+
+        return [BaseRelation({'nodes': node_ids}, NodeDeletionTask)]
diff --git a/src/sentry/deletions/defaults/group.py b/src/sentry/deletions/defaults/group.py
index 5de9a17e27..74d4bc4c94 100644
--- a/src/sentry/deletions/defaults/group.py
+++ b/src/sentry/deletions/defaults/group.py
@@ -12,7 +12,6 @@ class GroupDeletionTask(ModelDeletionTask):
         model_list = (
             # prioritize GroupHash
             models.GroupHash,
-            models.EventTag,
             models.EventMapping,
             models.GroupAssignee,
             models.GroupCommitResolution,
@@ -25,14 +24,13 @@ class GroupDeletionTask(ModelDeletionTask):
             models.GroupSeen,
             models.GroupShare,
             models.GroupSnooze,
-            models.GroupTagValue,
-            models.GroupTagKey,
             models.GroupEmailThread,
             models.GroupSubscription,
             models.UserReport,
             # Event is last as its the most time consuming
             models.Event,
         )
+
         relations.extend([ModelRelation(m, {'group_id': instance.id}) for m in model_list])
 
         return relations
diff --git a/src/sentry/deletions/defaults/project.py b/src/sentry/deletions/defaults/project.py
index e8669e7006..bdb50b934f 100644
--- a/src/sentry/deletions/defaults/project.py
+++ b/src/sentry/deletions/defaults/project.py
@@ -15,12 +15,12 @@ class ProjectDeletionTask(ModelDeletionTask):
         # in bulk
         model_list = (
             models.Activity, models.EnvironmentProject, models.EventMapping, models.EventUser,
-            models.EventTag, models.GroupAssignee, models.GroupBookmark, models.GroupEmailThread,
+            models.GroupAssignee, models.GroupBookmark, models.GroupEmailThread,
             models.GroupHash, models.GroupRelease, models.GroupRuleStatus, models.GroupSeen,
-            models.GroupShare, models.GroupSubscription, models.GroupTagKey, models.GroupTagValue,
-            models.ProjectBookmark, models.ProjectKey, models.SavedSearchUserDefault,
-            models.SavedSearch, models.TagKey, models.TagValue, models.UserReport,
+            models.GroupShare, models.GroupSubscription, models.ProjectBookmark, models.ProjectKey,
+            models.SavedSearchUserDefault, models.SavedSearch, models.UserReport,
         )
+
         relations.extend(
             [
                 ModelRelation(m, {'project_id': instance.id}, BulkModelDeletionTask)
diff --git a/src/sentry/deletions/manager.py b/src/sentry/deletions/manager.py
index e4a5073a73..983625266b 100644
--- a/src/sentry/deletions/manager.py
+++ b/src/sentry/deletions/manager.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+from collections import defaultdict
+
 __all__ = ['DeletionTaskManager']
 
 
@@ -7,6 +9,8 @@ class DeletionTaskManager(object):
     def __init__(self, default_task=None):
         self.tasks = {}
         self.default_task = default_task
+        self.dependencies = defaultdict(set)
+        self.bulk_dependencies = defaultdict(set)
 
     def get(self, task=None, **kwargs):
         if task is None:
@@ -19,3 +23,9 @@ class DeletionTaskManager(object):
 
     def register(self, model, task):
         self.tasks[model] = task
+
+    def add_dependencies(self, model, dependencies):
+        self.dependencies[model] |= set(dependencies)
+
+    def add_bulk_dependencies(self, model, dependencies):
+        self.bulk_dependencies[model] |= set(dependencies)
diff --git a/src/sentry/models/grouptagkey.py b/src/sentry/models/grouptagkey.py
deleted file mode 100644
index 60ecf2952c..0000000000
--- a/src/sentry/models/grouptagkey.py
+++ /dev/null
@@ -1,38 +0,0 @@
-"""
-sentry.models.grouptagkey
-~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.db import models
-
-from sentry.constants import MAX_TAG_KEY_LENGTH
-from sentry.db.models import (
-    Model, BoundedPositiveIntegerField, BaseManager, sane_repr
-)
-
-
-class GroupTagKey(Model):
-    """
-    Stores a unique tag key name for a group.
-
-    An example key might be "url" or "server_name".
-    """
-    __core__ = False
-
-    project_id = BoundedPositiveIntegerField(db_index=True, null=True)
-    group_id = BoundedPositiveIntegerField(db_index=True)
-    key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
-    values_seen = BoundedPositiveIntegerField(default=0)
-
-    objects = BaseManager()
-
-    class Meta:
-        app_label = 'sentry'
-        db_table = 'sentry_grouptagkey'
-        unique_together = (('project_id', 'group_id', 'key'), )
-
-    __repr__ = sane_repr('project_id', 'group_id', 'key')
diff --git a/src/sentry/models/grouptagvalue.py b/src/sentry/models/grouptagvalue.py
deleted file mode 100644
index f6ed145477..0000000000
--- a/src/sentry/models/grouptagvalue.py
+++ /dev/null
@@ -1,48 +0,0 @@
-"""
-sentry.models.grouptagvalue
-~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.db import models
-from django.utils import timezone
-
-from sentry.constants import MAX_TAG_KEY_LENGTH, MAX_TAG_VALUE_LENGTH
-from sentry.db.models import (
-    Model, BoundedPositiveIntegerField, BaseManager, sane_repr)
-
-
-class GroupTagValue(Model):
-    """
-    Stores the total number of messages seen by a group matching
-    the given filter.
-    """
-    __core__ = False
-
-    project_id = BoundedPositiveIntegerField(db_index=True, null=True)
-    group_id = BoundedPositiveIntegerField(db_index=True)
-    times_seen = BoundedPositiveIntegerField(default=0)
-    key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
-    value = models.CharField(max_length=MAX_TAG_VALUE_LENGTH)
-    last_seen = models.DateTimeField(
-        default=timezone.now, db_index=True, null=True)
-    first_seen = models.DateTimeField(
-        default=timezone.now, db_index=True, null=True)
-
-    objects = BaseManager()
-
-    class Meta:
-        app_label = 'sentry'
-        db_table = 'sentry_messagefiltervalue'
-        unique_together = (('group_id', 'key', 'value'), )
-        index_together = (('project_id', 'key', 'value', 'last_seen'), )
-
-    __repr__ = sane_repr('project_id', 'group_id', 'key', 'value')
-
-    def save(self, *args, **kwargs):
-        if not self.first_seen:
-            self.first_seen = self.last_seen
-        super(GroupTagValue, self).save(*args, **kwargs)
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index a897ba9187..6c520f7d54 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -10,12 +10,10 @@ from django.db.models.signals import post_syncdb, post_save
 from functools import wraps
 from pkg_resources import parse_version as Version
 
-from sentry import options, tagstore
+from sentry import options
 from sentry.models import (
-    Organization, OrganizationMember, Project, User, Team, ProjectKey, TagValue,
-    GroupTagValue
+    Organization, OrganizationMember, Project, User, Team, ProjectKey
 )
-from sentry.signals import buffer_incr_complete
 from sentry.utils import db
 
 PROJECT_SEQUENCE_FIX = """
@@ -139,33 +137,6 @@ def create_keys_for_project(instance, created, **kwargs):
         )
 
 
-@buffer_incr_complete.connect(sender=TagValue, weak=False)
-def record_project_tag_count(filters, created, **kwargs):
-    if not created:
-        return
-
-    # TODO(dcramer): remove in 7.6.x
-    project_id = filters.get('project_id')
-    if not project_id:
-        project_id = filters['project'].id
-
-    tagstore.incr_tag_key_values_seen(project_id, filters['key'])
-
-
-@buffer_incr_complete.connect(sender=GroupTagValue, weak=False)
-def record_group_tag_count(filters, created, extra, **kwargs):
-    if not created:
-        return
-
-    project_id = extra.get('project_id')
-    if not project_id:
-        project_id = extra['project']
-
-    group_id = filters['group_id']
-
-    tagstore.incr_group_tag_key_values_seen(project_id, group_id, filters['key'])
-
-
 # Anything that relies on default objects that may not exist with default
 # fields should be wrapped in handle_db_failure
 post_syncdb.connect(
diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 674f9916f5..0aa2f67bfd 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -4,7 +4,7 @@ from django.db import IntegrityError, transaction
 from django.db.models.signals import post_save
 
 from sentry.models import (
-    Activity, Commit, GroupAssignee, GroupCommitResolution, Project, Release, TagValue
+    Activity, Commit, GroupAssignee, GroupCommitResolution, Project, Release
 )
 from sentry.tasks.clear_expired_resolutions import clear_expired_resolutions
 
@@ -92,10 +92,6 @@ post_save.connect(
     resolve_group_resolutions, sender=Release, dispatch_uid="resolve_group_resolutions", weak=False
 )
 
-post_save.connect(
-    ensure_release_exists, sender=TagValue, dispatch_uid="ensure_release_exists", weak=False
-)
-
 post_save.connect(
     resolved_in_commit,
     sender=Commit,
diff --git a/src/sentry/runner/commands/cleanup.py b/src/sentry/runner/commands/cleanup.py
index 059068a0d9..4a49d2e50c 100644
--- a/src/sentry/runner/commands/cleanup.py
+++ b/src/sentry/runner/commands/cleanup.py
@@ -17,6 +17,11 @@ from django.utils import timezone
 from sentry.runner.decorators import configuration, log_options
 
 
+# allows services like tagstore to add their own (abstracted) models
+# to cleanup
+EXTRA_BULK_QUERY_DELETES = []
+
+
 def get_project(value):
     from sentry.models import Project
 
@@ -90,21 +95,22 @@ def create_deletion_task(days, project_id, model, dtfield, order_by):
         else:
             query['project_id'] = project_id
 
+    skip_models = [
+        # Handled by other parts of cleanup
+        models.Event,
+        models.EventMapping,
+        models.Group,
+        models.GroupEmailThread,
+        models.GroupRuleStatus,
+        # Handled by TTL
+        similarity.features,
+    ] + [b[0] for b in EXTRA_BULK_QUERY_DELETES]
+
     task = deletions.get(
         model=model,
         query=query,
         order_by=order_by,
-        skip_models=[
-            # Handled by other parts of cleanup
-            models.Event,
-            models.EventMapping,
-            models.EventTag,
-            models.GroupEmailThread,
-            models.GroupRuleStatus,
-            models.GroupTagValue,
-            # Handled by TTL
-            similarity.features,
-        ],
+        skip_models=skip_models,
         transaction_id=uuid4().hex,
     )
 
@@ -189,13 +195,10 @@ def cleanup(days, project, concurrency, max_procs, silent, model, router, timed)
 
     # Deletions that use `BulkDeleteQuery` (and don't need to worry about child relations)
     # (model, datetime_field, order_by)
-    BULK_QUERY_DELETES = (
+    BULK_QUERY_DELETES = [
         (models.GroupEmailThread, 'date', None),
         (models.GroupRuleStatus, 'date_added', None),
-        (models.GroupTagValue, 'last_seen', None),
-        (models.TagValue, 'last_seen', None),
-        (models.EventTag, 'date_added', 'date_added'),
-    )
+    ] + EXTRA_BULK_QUERY_DELETES
 
     # Deletions that use the `deletions` code path (which handles their child relations)
     # (model, datetime_field, order_by)
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index f086c2dc3a..2eae8d5a34 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -318,13 +318,13 @@ def initialize_app(config, skip_service_validation=False):
 
 def setup_services(validate=True):
     from sentry import (
-        analytics, buffer, digests, newsletter, nodestore, quotas, ratelimits, search, tsdb
+        analytics, buffer, digests, newsletter, nodestore, quotas, ratelimits, search, tagstore, tsdb
     )
     from .importer import ConfigurationError
     from sentry.utils.settings import reraise_as
 
     service_list = (
-        analytics, buffer, digests, newsletter, nodestore, quotas, ratelimits, search, tsdb,
+        analytics, buffer, digests, newsletter, nodestore, quotas, ratelimits, search, tagstore, tsdb,
     )
 
     for service in service_list:
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index a1857c9418..f0451ffa65 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -80,6 +80,7 @@ class TagStorage(Service):
         'get_group_tag_values_for_users',
         'get_tags_for_search_filter',
         'get_event_tag_qs',
+        'update_group_tag_key_values_seen',
     )
 
     def is_valid_key(self, key):
@@ -356,3 +357,9 @@ class TagStorage(Service):
         >>> get_event_tag_qs(event_id=1, key_id=2)
         """
         raise NotImplementedError
+
+    def update_group_tag_key_values_seen(self, group_ids):
+        """
+        >>> update_group_tag_key_values_seen([1, 2])
+        """
+        raise NotImplementedError
diff --git a/src/sentry/tagstore/legacy/__init__.py b/src/sentry/tagstore/legacy/__init__.py
index 4a16473e56..0ca0014862 100644
--- a/src/sentry/tagstore/legacy/__init__.py
+++ b/src/sentry/tagstore/legacy/__init__.py
@@ -8,3 +8,5 @@ sentry.tagstore.legacy
 from __future__ import absolute_import
 
 from .backend import LegacyTagStorage  # NOQA
+from .receivers import *  # NOQA
+from .tasks import *  # NOQA
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index d764b35e52..7be0b02249 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -20,14 +20,58 @@ from six.moves import reduce
 
 from sentry import buffer
 from sentry.tagstore import TagKeyStatus
-from sentry.models import EventTag, GroupTagKey, GroupTagValue, TagKey, TagValue
 from sentry.tagstore.base import TagStorage
 from sentry.utils import db
 from sentry.utils.cache import cache
-from sentry.tasks.deletion import delete_tag_key
+
+from .models import EventTag, GroupTagKey, GroupTagValue, TagKey, TagValue
 
 
 class LegacyTagStorage(TagStorage):
+    def setup(self):
+        from sentry.deletions import default_manager
+        from sentry.deletions.defaults import BulkModelDeletionTask
+        from sentry.deletions.base import ModelRelation, ModelDeletionTask
+        from sentry.models import Group, Project, Event
+        from sentry.runner.commands import cleanup
+        from sentry.tasks import merge
+
+        from .deletions import TagKeyDeletionTask
+
+        default_manager.register(TagKey, TagKeyDeletionTask)
+        default_manager.register(TagValue, BulkModelDeletionTask)
+        default_manager.register(GroupTagKey, BulkModelDeletionTask)
+        default_manager.register(GroupTagValue, BulkModelDeletionTask)
+        default_manager.register(EventTag, BulkModelDeletionTask)
+
+        default_manager.add_dependencies(Group, [
+            lambda instance: ModelRelation(EventTag, {'group_id': instance.id}),
+            lambda instance: ModelRelation(GroupTagKey, {'group_id': instance.id}),
+            lambda instance: ModelRelation(GroupTagValue, {'group_id': instance.id}),
+        ])
+        default_manager.add_dependencies(Project, [
+            lambda instance: ModelRelation(TagKey, {'project_id': instance.id}),
+            lambda instance: ModelRelation(TagValue, {'project_id': instance.id}),
+            lambda instance: ModelRelation(GroupTagKey, {'project_id': instance.id}),
+            lambda instance: ModelRelation(GroupTagValue, {'project_id': instance.id}),
+        ])
+        default_manager.add_bulk_dependencies(Event, [
+            lambda instance_list: ModelRelation(EventTag,
+                                                {'event_id__in': [i.id for i in instance_list]},
+                                                ModelDeletionTask),
+        ])
+
+        cleanup.EXTRA_BULK_QUERY_DELETES += [
+            (GroupTagValue, 'last_seen', None),
+            (TagValue, 'last_seen', None),
+            (EventTag, 'date_added', 'date_added'),
+        ]
+
+        merge.EXTRA_MERGE_MODELS += [
+            GroupTagValue,
+            GroupTagKey,
+        ]
+
     def create_tag_key(self, project_id, key, **kwargs):
         return TagKey.objects.create(project_id=project_id, key=key, **kwargs)
 
@@ -207,6 +251,8 @@ class LegacyTagStorage(TagStorage):
         return list(qs)
 
     def delete_tag_key(self, project_id, key):
+        from .tasks import delete_tag_key
+
         tagkey = self.get_tag_key(project_id, key, status=None)
 
         updated = TagKey.objects.filter(
@@ -502,3 +548,14 @@ class LegacyTagStorage(TagStorage):
 
     def get_event_tag_qs(self, **kwargs):
         return EventTag.objects.filter(**kwargs)
+
+    def update_group_tag_key_values_seen(self, group_ids):
+        instances = self.get_group_tag_keys(group_ids)
+        for instance in instances:
+            instance.update(
+                values_seen=GroupTagValue.objects.filter(
+                    project_id=instance.project_id,
+                    group_id=instance.group_id,
+                    key=instance.key,
+                ).count(),
+            )
diff --git a/src/sentry/deletions/defaults/tagkey.py b/src/sentry/tagstore/legacy/deletions.py
similarity index 72%
rename from src/sentry/deletions/defaults/tagkey.py
rename to src/sentry/tagstore/legacy/deletions.py
index 8a5390a8f4..cff982bcef 100644
--- a/src/sentry/deletions/defaults/tagkey.py
+++ b/src/sentry/tagstore/legacy/deletions.py
@@ -1,11 +1,18 @@
+"""
+sentry.tagstore.legacy.deletions
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
 from __future__ import absolute_import, print_function
 
-from ..base import ModelDeletionTask, ModelRelation
+from sentry.deletions.base import ModelDeletionTask, ModelRelation
 
 
 class TagKeyDeletionTask(ModelDeletionTask):
     def get_child_relations(self, instance):
-        from sentry.models import (EventTag, GroupTagKey, GroupTagValue, TagValue)
+        from .models import (EventTag, GroupTagKey, GroupTagValue, TagValue)
 
         # in bulk
         model_list = (GroupTagValue, GroupTagKey, TagValue)
diff --git a/src/sentry/tagstore/legacy/models/__init__.py b/src/sentry/tagstore/legacy/models/__init__.py
new file mode 100644
index 0000000000..4f53536d91
--- /dev/null
+++ b/src/sentry/tagstore/legacy/models/__init__.py
@@ -0,0 +1,13 @@
+"""
+sentry.tagstore.legacy.models
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/models/eventtag.py b/src/sentry/tagstore/legacy/models/eventtag.py
similarity index 83%
rename from src/sentry/models/eventtag.py
rename to src/sentry/tagstore/legacy/models/eventtag.py
index 8f90589993..ddb36fa310 100644
--- a/src/sentry/models/eventtag.py
+++ b/src/sentry/tagstore/legacy/models/eventtag.py
@@ -1,3 +1,10 @@
+"""
+sentry.tagstore.legacy.models.eventtag
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
 from __future__ import absolute_import
 
 from django.db import models
diff --git a/src/sentry/tagstore/legacy/models/grouptagkey.py b/src/sentry/tagstore/legacy/models/grouptagkey.py
new file mode 100644
index 0000000000..90a70b704e
--- /dev/null
+++ b/src/sentry/tagstore/legacy/models/grouptagkey.py
@@ -0,0 +1,83 @@
+"""
+sentry.tagstore.legacy.models.grouptagkey
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import six
+
+from django.db import models, router, transaction, DataError
+
+from sentry.api.serializers import Serializer, register
+from sentry.constants import MAX_TAG_KEY_LENGTH
+from sentry.db.models import (
+    Model, BoundedPositiveIntegerField, BaseManager, sane_repr
+)
+
+
+class GroupTagKey(Model):
+    """
+    Stores a unique tag key name for a group.
+
+    An example key might be "url" or "server_name".
+    """
+    __core__ = False
+
+    project_id = BoundedPositiveIntegerField(db_index=True, null=True)
+    group_id = BoundedPositiveIntegerField(db_index=True)
+    key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
+    values_seen = BoundedPositiveIntegerField(default=0)
+
+    objects = BaseManager()
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_grouptagkey'
+        unique_together = (('project_id', 'group_id', 'key'), )
+
+    __repr__ = sane_repr('project_id', 'group_id', 'key')
+
+    def merge_counts(self, new_group):
+        from sentry.tagstore.legacy.models import GroupTagValue
+
+        try:
+            with transaction.atomic(using=router.db_for_write(GroupTagKey)):
+                GroupTagKey.objects.filter(
+                    group_id=new_group.id,
+                    key=self.key,
+                ).update(
+                    values_seen=GroupTagValue.objects.filter(
+                        group_id=new_group.id,
+                        key=self.key,
+                    ).count()
+                )
+        except DataError:
+            # it's possible to hit an out of range value for counters
+            pass
+
+
+@register(GroupTagKey)
+class GroupTagKeySerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        from sentry import tagstore
+
+        result = {}
+        for item in item_list:
+            key = tagstore.get_standardized_key(item.key)
+            result[item] = {
+                'name': tagstore.get_tag_key_label(item.key),
+                'key': key,
+            }
+
+        return result
+
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.id),
+            'name': attrs['name'],
+            'key': attrs['key'],
+            'uniqueValues': obj.values_seen,
+        }
diff --git a/src/sentry/tagstore/legacy/models/grouptagvalue.py b/src/sentry/tagstore/legacy/models/grouptagvalue.py
new file mode 100644
index 0000000000..bd6fd6bad7
--- /dev/null
+++ b/src/sentry/tagstore/legacy/models/grouptagvalue.py
@@ -0,0 +1,95 @@
+"""
+sentry.tagstore.legacy.models.grouptagvalue
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import six
+
+from django.db import models, router, transaction, DataError
+from django.utils import timezone
+
+from sentry.api.serializers import Serializer, register
+from sentry.constants import MAX_TAG_KEY_LENGTH, MAX_TAG_VALUE_LENGTH
+from sentry.db.models import (
+    Model, BoundedPositiveIntegerField, BaseManager, sane_repr)
+
+
+class GroupTagValue(Model):
+    """
+    Stores the total number of messages seen by a group matching
+    the given filter.
+    """
+    __core__ = False
+
+    project_id = BoundedPositiveIntegerField(db_index=True, null=True)
+    group_id = BoundedPositiveIntegerField(db_index=True)
+    times_seen = BoundedPositiveIntegerField(default=0)
+    key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
+    value = models.CharField(max_length=MAX_TAG_VALUE_LENGTH)
+    last_seen = models.DateTimeField(
+        default=timezone.now, db_index=True, null=True)
+    first_seen = models.DateTimeField(
+        default=timezone.now, db_index=True, null=True)
+
+    objects = BaseManager()
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_messagefiltervalue'
+        unique_together = (('group_id', 'key', 'value'), )
+        index_together = (('project_id', 'key', 'value', 'last_seen'), )
+
+    __repr__ = sane_repr('project_id', 'group_id', 'key', 'value')
+
+    def save(self, *args, **kwargs):
+        if not self.first_seen:
+            self.first_seen = self.last_seen
+        super(GroupTagValue, self).save(*args, **kwargs)
+
+    def merge_counts(self, new_group):
+        try:
+            with transaction.atomic(using=router.db_for_write(GroupTagValue)):
+                new_obj = GroupTagValue.objects.get(
+                    group_id=new_group.id,
+                    key=self.key,
+                    value=self.value,
+                )
+                new_obj.update(
+                    first_seen=min(new_obj.first_seen, self.first_seen),
+                    last_seen=max(new_obj.last_seen, self.last_seen),
+                    times_seen=new_obj.times_seen + self.times_seen,
+                )
+        except DataError:
+            # it's possible to hit an out of range value for counters
+            pass
+
+
+@register(GroupTagValue)
+class GroupTagValueSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        from sentry import tagstore
+
+        result = {}
+        for item in item_list:
+            result[item] = {
+                'name': tagstore.get_tag_value_label(item.key, item.value),
+            }
+
+        return result
+
+    def serialize(self, obj, attrs, user):
+        from sentry import tagstore
+
+        return {
+            'id': six.text_type(obj.id),
+            'name': attrs['name'],
+            'key': tagstore.get_standardized_key(obj.key),
+            'value': obj.value,
+            'count': obj.times_seen,
+            'lastSeen': obj.last_seen,
+            'firstSeen': obj.first_seen,
+        }
diff --git a/src/sentry/models/tagkey.py b/src/sentry/tagstore/legacy/models/tagkey.py
similarity index 72%
rename from src/sentry/models/tagkey.py
rename to src/sentry/tagstore/legacy/models/tagkey.py
index 093a73b92a..ba164ab542 100644
--- a/src/sentry/models/tagkey.py
+++ b/src/sentry/tagstore/legacy/models/tagkey.py
@@ -1,15 +1,19 @@
 """
-sentry.models.tagkey
+sentry.tagstore.legacy.models.tagkey
 ~~~~~~~~~~~~~~~~~~~~
 
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
 from __future__ import absolute_import, print_function
 
+import six
+
 from django.db import models
 from django.utils.translation import ugettext_lazy as _
 
+from sentry.api.serializers import Serializer, register
 from sentry.tagstore import TagKeyStatus
 from sentry.constants import MAX_TAG_KEY_LENGTH
 from sentry.db.models import (Model, BoundedPositiveIntegerField, sane_repr)
@@ -50,3 +54,16 @@ class TagKey(Model):
         return {
             'key': self.key,
         }
+
+
+@register(TagKey)
+class TagKeySerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        from sentry import tagstore
+
+        return {
+            'id': six.text_type(obj.id),
+            'key': tagstore.get_standardized_key(obj.key),
+            'name': tagstore.get_tag_key_label(obj.key),
+            'uniqueValues': obj.values_seen,
+        }
diff --git a/src/sentry/models/tagvalue.py b/src/sentry/tagstore/legacy/models/tagvalue.py
similarity index 61%
rename from src/sentry/models/tagvalue.py
rename to src/sentry/tagstore/legacy/models/tagvalue.py
index 5f0b57c643..995ad83997 100644
--- a/src/sentry/models/tagvalue.py
+++ b/src/sentry/tagstore/legacy/models/tagvalue.py
@@ -1,15 +1,18 @@
 """
-sentry.models.tagvalue
+sentry.tagstore.legacy.models.tagvalue
 ~~~~~~~~~~~~~~~~~~~~~~
 
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
 from __future__ import absolute_import, print_function
 
+import six
+
 from django.db import models
 from django.utils import timezone
 
+from sentry.api.serializers import Serializer, register
 from sentry.constants import MAX_TAG_KEY_LENGTH, MAX_TAG_VALUE_LENGTH
 from sentry.db.models import (
     Model, BoundedPositiveIntegerField, GzippedDictField, BaseManager, sane_repr
@@ -46,3 +49,29 @@ class TagValue(Model):
         from sentry import tagstore
 
         return tagstore.get_tag_value_label(self.key, self.value)
+
+
+@register(TagValue)
+class TagValueSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        from sentry import tagstore
+
+        result = {}
+        for item in item_list:
+            result[item] = {
+                'name': tagstore.get_tag_value_label(item.key, item.value),
+            }
+        return result
+
+    def serialize(self, obj, attrs, user):
+        from sentry import tagstore
+
+        return {
+            'id': six.text_type(obj.id),
+            'key': tagstore.get_standardized_key(obj.key),
+            'name': attrs['name'],
+            'value': obj.value,
+            'count': obj.times_seen,
+            'lastSeen': obj.last_seen,
+            'firstSeen': obj.first_seen,
+        }
diff --git a/src/sentry/tagstore/legacy/receivers.py b/src/sentry/tagstore/legacy/receivers.py
new file mode 100644
index 0000000000..49748bdc1a
--- /dev/null
+++ b/src/sentry/tagstore/legacy/receivers.py
@@ -0,0 +1,51 @@
+"""
+sentry.tagstore.legacy.receivers
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from django.db.models.signals import post_save
+
+from sentry.signals import buffer_incr_complete
+from sentry.receivers.releases import ensure_release_exists
+
+from .models import TagValue, GroupTagValue
+
+
+@buffer_incr_complete.connect(sender=TagValue, weak=False)
+def record_project_tag_count(filters, created, **kwargs):
+    from sentry import tagstore
+
+    if not created:
+        return
+
+    # TODO(dcramer): remove in 7.6.x
+    project_id = filters.get('project_id')
+    if not project_id:
+        project_id = filters['project'].id
+
+    tagstore.incr_tag_key_values_seen(project_id, filters['key'])
+
+
+@buffer_incr_complete.connect(sender=GroupTagValue, weak=False)
+def record_group_tag_count(filters, created, extra, **kwargs):
+    from sentry import tagstore
+
+    if not created:
+        return
+
+    project_id = extra.get('project_id')
+    if not project_id:
+        project_id = extra['project']
+
+    group_id = filters['group_id']
+
+    tagstore.incr_group_tag_key_values_seen(project_id, group_id, filters['key'])
+
+
+post_save.connect(
+    ensure_release_exists, sender=TagValue, dispatch_uid="ensure_release_exists", weak=False
+)
diff --git a/src/sentry/tagstore/legacy/tasks.py b/src/sentry/tagstore/legacy/tasks.py
new file mode 100644
index 0000000000..1dfa97a44e
--- /dev/null
+++ b/src/sentry/tagstore/legacy/tasks.py
@@ -0,0 +1,43 @@
+"""
+sentry.tagstore.legacy.tasks
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from uuid import uuid4
+
+from sentry.exceptions import DeleteAborted
+from sentry.tasks.base import instrumented_task, retry
+from sentry.tasks.deletion import MAX_RETRIES
+
+
+@instrumented_task(
+    name='sentry.tagstore.legacy.tasks.delete_tag_key',
+    queue='cleanup',
+    default_retry_delay=60 * 5,
+    max_retries=MAX_RETRIES
+)
+@retry(exclude=(DeleteAborted, ))
+def delete_tag_key(object_id, transaction_id=None, **kwargs):
+    from sentry import deletions
+
+    from .models import TagKey
+
+    task = deletions.get(
+        model=TagKey,
+        query={
+            'id': object_id,
+        },
+        transaction_id=transaction_id or uuid4().hex,
+    )
+    has_more = task.chunk()
+    if has_more:
+        delete_tag_key.apply_async(
+            kwargs={'object_id': object_id,
+                    'transaction_id': transaction_id},
+            countdown=15,
+        )
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index e9ebbf32cd..2af2183f8c 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -267,33 +267,6 @@ def delete_group(object_id, transaction_id=None, **kwargs):
         )
 
 
-@instrumented_task(
-    name='sentry.tasks.deletion.delete_tag_key',
-    queue='cleanup',
-    default_retry_delay=60 * 5,
-    max_retries=MAX_RETRIES
-)
-@retry(exclude=(DeleteAborted, ))
-def delete_tag_key(object_id, transaction_id=None, **kwargs):
-    from sentry import deletions
-    from sentry.models import TagKey
-
-    task = deletions.get(
-        model=TagKey,
-        query={
-            'id': object_id,
-        },
-        transaction_id=transaction_id or uuid4().hex,
-    )
-    has_more = task.chunk()
-    if has_more:
-        delete_tag_key.apply_async(
-            kwargs={'object_id': object_id,
-                    'transaction_id': transaction_id},
-            countdown=15,
-        )
-
-
 @instrumented_task(
     name='sentry.tasks.deletion.delete_api_application',
     queue='cleanup',
diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index 9f0621b72e..b84ea3c414 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -22,6 +22,9 @@ logger = logging.getLogger('sentry.merge')
 delete_logger = logging.getLogger('sentry.deletions.async')
 
 
+EXTRA_MERGE_MODELS = []
+
+
 @instrumented_task(
     name='sentry.tasks.merge.merge_group',
     queue='merge',
@@ -39,8 +42,6 @@ def merge_group(
         GroupHash,
         GroupRuleStatus,
         GroupSubscription,
-        GroupTagKey,
-        GroupTagValue,
         EventMapping,
         Event,
         UserReport,
@@ -95,9 +96,9 @@ def merge_group(
             }
         )
 
-    model_list = (
-        Activity, GroupAssignee, GroupHash, GroupRuleStatus, GroupSubscription, GroupTagValue,
-        GroupTagKey, EventMapping, Event, UserReport, GroupRedirect, GroupMeta,
+    model_list = tuple(EXTRA_MERGE_MODELS) + (
+        Activity, GroupAssignee, GroupHash, GroupRuleStatus, GroupSubscription,
+        EventMapping, Event, UserReport, GroupRedirect, GroupMeta,
     )
 
     has_more = merge_objects(
@@ -245,8 +246,6 @@ def _rehash_group_events(group, limit=100):
 
 
 def merge_objects(models, group, new_group, limit=1000, logger=None, transaction_id=None):
-    from sentry.models import GroupTagKey, GroupTagValue
-
     has_more = False
     for model in models:
         all_fields = model._meta.get_all_field_names()
@@ -269,33 +268,9 @@ def merge_objects(models, group, new_group, limit=1000, logger=None, transaction
 
             if delete:
                 # Before deleting, we want to merge in counts
-                try:
-                    if model == GroupTagKey:
-                        with transaction.atomic(using=router.db_for_write(model)):
-                            model.objects.filter(
-                                group_id=new_group.id,
-                                key=obj.key,
-                            ).update(
-                                values_seen=GroupTagValue.objects.filter(
-                                    group_id=new_group.id,
-                                    key=obj.key,
-                                ).count()
-                            )
-                    elif model == GroupTagValue:
-                        with transaction.atomic(using=router.db_for_write(model)):
-                            new_obj = model.objects.get(
-                                group_id=new_group.id,
-                                key=obj.key,
-                                value=obj.value,
-                            )
-                            new_obj.update(
-                                first_seen=min(new_obj.first_seen, obj.first_seen),
-                                last_seen=max(new_obj.last_seen, obj.last_seen),
-                                times_seen=new_obj.times_seen + obj.times_seen,
-                            )
-                except DataError:
-                    # it's possible to hit an out of range value for counters
-                    pass
+                if hasattr(model, 'merge_counts'):
+                    obj.merge_counts(new_group)
+
                 obj_id = obj.id
                 obj.delete()
                 if logger is not None:
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index 06809d5b60..1efad35c40 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -14,7 +14,7 @@ from sentry.event_manager import (
 )
 from sentry.models import (
     Activity, Environment, Event, EventMapping, EventUser, Group, GroupHash, GroupRelease,
-    GroupTagValue, Project, Release, UserReport
+    Project, Release, UserReport
 )
 from sentry.similarity import features
 from sentry.tasks.base import instrumented_task
@@ -460,18 +460,6 @@ def repair_denormalizations(caches, project, events):
         features.record([event])
 
 
-def update_tag_value_counts(id_list):
-    instances = tagstore.get_group_tag_keys(id_list)
-    for instance in instances:
-        instance.update(
-            values_seen=GroupTagValue.objects.filter(
-                project_id=instance.project_id,
-                group_id=instance.group_id,
-                key=instance.key,
-            ).count(),
-        )
-
-
 def lock_hashes(project_id, source_id, fingerprints):
     with transaction.atomic():
         eligible_hashes = list(
@@ -545,7 +533,7 @@ def unmerge(
 
     # If there are no more events to process, we're done with the migration.
     if not events:
-        update_tag_value_counts([source_id, destination_id])
+        tagstore.update_group_tag_key_values_seen([source_id, destination_id])
         unlock_hashes(project_id, fingerprints)
         return destination_id
 
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_details.py b/tests/sentry/api/endpoints/test_project_tagkey_details.py
index aefacec67e..e9f1551177 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_details.py
@@ -38,7 +38,7 @@ class ProjectTagKeyDetailsTest(APITestCase):
 
 
 class ProjectTagKeyDeleteTest(APITestCase):
-    @mock.patch('sentry.tagstore.legacy.backend.delete_tag_key')
+    @mock.patch('sentry.tagstore.legacy.tasks.delete_tag_key')
     def test_simple(self, mock_delete_tag_key):
         project = self.create_project()
         tagkey = tagstore.create_tag_key(project_id=project.id, key='foo')
diff --git a/tests/sentry/runner/commands/test_cleanup.py b/tests/sentry/runner/commands/test_cleanup.py
index 78a08d1a26..474fb3bc64 100644
--- a/tests/sentry/runner/commands/test_cleanup.py
+++ b/tests/sentry/runner/commands/test_cleanup.py
@@ -2,7 +2,8 @@
 
 from __future__ import absolute_import
 
-from sentry.models import Event, Group, GroupTagKey, GroupTagValue, TagValue
+from sentry.models import Event, Group
+from sentry.tagstore.legacy.models import GroupTagKey, GroupTagValue, TagValue
 from sentry.runner.commands.cleanup import cleanup
 from sentry.testutils import CliTestCase
 
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index ecb8abc1b2..25c371a2ee 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -18,7 +18,7 @@ from sentry.models import (
 from sentry.plugins.providers.dummy.repository import DummyRepositoryProvider
 from sentry.tasks.deletion import (
     delete_api_application, delete_group, delete_organization, delete_project, delete_repository,
-    delete_tag_key, delete_team, generic_delete, revoke_api_tokens
+    delete_team, generic_delete, revoke_api_tokens
 )
 from sentry.testutils import TestCase
 
@@ -184,6 +184,8 @@ class DeleteProjectTest(TestCase):
 
 class DeleteTagKeyTest(TestCase):
     def test_simple(self):
+        from sentry.tagstore.legacy.tasks import delete_tag_key
+
         team = self.create_team(name='test', slug='test')
         project = self.create_project(team=team, name='test1', slug='test1')
         group = self.create_group(project=project)
