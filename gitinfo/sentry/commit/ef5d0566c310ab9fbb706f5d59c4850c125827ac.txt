commit ef5d0566c310ab9fbb706f5d59c4850c125827ac
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue Jun 30 11:34:26 2020 -0700

    ref(vercel): Add uninstall hook endpoint (#19606)
    
    * basic uninstall endpoint
    
    * add tests
    
    * more words
    
    * delete & 204
    
    * fix test

diff --git a/src/sentry/integrations/vercel/uninstall.py b/src/sentry/integrations/vercel/uninstall.py
new file mode 100644
index 0000000000..623e0022d9
--- /dev/null
+++ b/src/sentry/integrations/vercel/uninstall.py
@@ -0,0 +1,96 @@
+from __future__ import absolute_import
+
+import logging
+
+from django.views.decorators.csrf import csrf_exempt
+from sentry.api.base import Endpoint
+from sentry.models import AuditLogEntryEvent, Integration, OrganizationIntegration, Organization
+from sentry.utils.audit import create_audit_entry
+from sentry.web.decorators import transaction_start
+
+logger = logging.getLogger("sentry.integrations.vercel.uninstall")
+
+
+class VercelUninstallEndpoint(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    @csrf_exempt
+    def dispatch(self, request, *args, **kwargs):
+        return super(VercelUninstallEndpoint, self).dispatch(request, *args, **kwargs)
+
+    @transaction_start("VercelUninstallEndpoint")
+    def delete(self, request):
+        # userId should always be present
+        external_id = request.data.get("teamId") or request.data.get("userId")
+        configuration_id = request.data.get("configurationId")
+
+        try:
+            integration = Integration.objects.get(provider="vercel", external_id=external_id)
+        except Integration.DoesNotExist:
+            logger.info(
+                "vercel.uninstall.missing-integration",
+                extra={"configuration_id": configuration_id, "external_id": external_id},
+            )
+            return self.respond(status=404)
+
+        orgs = integration.organizations.all()
+
+        if len(orgs) == 1:
+            create_audit_entry(
+                request=request,
+                organization=orgs[0],
+                target_object=integration.id,
+                event=AuditLogEntryEvent.INTEGRATION_REMOVE,
+                # TODO(meredith): If we create vercel identities from the userId
+                # we could attempt to find the user in Sentry and pass that in for
+                # the actor instead.
+                actor_label="Vercel User",
+                data={"provider": integration.provider, "name": integration.name},
+            )
+            integration.delete()
+            return self.respond(status=204)
+
+        configuration = integration.metadata["configurations"].pop(configuration_id)
+        if configuration_id == integration.metadata["installation_id"]:
+            # if we are uninstalling a primary configuration, and there are
+            # multiple orgs connected to this integration we must update
+            # the crendentials (access_token, webhook_id etc)
+            next_config_id, next_config = integration.metadata["configurations"].items()[0]
+
+            integration.metadata["access_token"] = next_config["access_token"]
+            integration.metadata["webhook_id"] = next_config["webhook_id"]
+            integration.metadata["installation_id"] = next_config_id
+
+        try:
+            OrganizationIntegration.objects.get(
+                organization_id=configuration["organization_id"], integration_id=integration.id
+            ).delete()
+        except OrganizationIntegration.DoesNotExist:
+            logger.error(
+                "vercel.uninstall.missing-org-integration",
+                extra={
+                    "configuration_id": configuration_id,
+                    "external_id": external_id,
+                    "integration_id": integration.id,
+                    "organization_id": configuration["organization_id"],
+                },
+            )
+            return self.respond(status=404)
+
+        integration.save()
+
+        organization = Organization.objects.get(id=configuration["organization_id"])
+        create_audit_entry(
+            request=request,
+            organization=organization,
+            target_object=integration.id,
+            event=AuditLogEntryEvent.INTEGRATION_REMOVE,
+            # TODO(meredith): If we create vercel identities from the userId
+            # we could attempt to find the user in Sentry and pass that in for
+            # the actor instead.
+            actor_label="Vercel User",
+            data={"provider": integration.provider, "name": integration.name},
+        )
+
+        return self.respond(status=204)
diff --git a/src/sentry/integrations/vercel/urls.py b/src/sentry/integrations/vercel/urls.py
index 07f9961536..dcd4d1777f 100644
--- a/src/sentry/integrations/vercel/urls.py
+++ b/src/sentry/integrations/vercel/urls.py
@@ -3,10 +3,12 @@ from __future__ import absolute_import, print_function
 from django.conf.urls import url
 
 from .webhook import VercelWebhookEndpoint
+from .uninstall import VercelUninstallEndpoint
 from sentry.web.frontend.vercel_extension_configuration import VercelExtensionConfigurationView
 
 
 urlpatterns = [
     url(r"^webhook/$", VercelWebhookEndpoint.as_view()),
     url(r"^configure/$", VercelExtensionConfigurationView.as_view()),
+    url(r"^delete/$", VercelUninstallEndpoint.as_view()),
 ]
diff --git a/tests/sentry/integrations/vercel/test_uninstall.py b/tests/sentry/integrations/vercel/test_uninstall.py
new file mode 100644
index 0000000000..2d9fef32f1
--- /dev/null
+++ b/tests/sentry/integrations/vercel/test_uninstall.py
@@ -0,0 +1,154 @@
+from __future__ import absolute_import
+
+from sentry.models import (
+    Integration,
+    OrganizationIntegration,
+)
+from sentry.testutils import APITestCase
+
+
+PRIMARY_UNINSTALL_RESPONSE = """{
+    "configurationId": "my_config_id",
+    "teamId": "vercel_team_id",
+    "userId": "vercel_user_id"
+}"""
+
+NONPRIMARY_UNINSTALL_RESPONSE = """{
+    "configurationId": "my_config_id2",
+    "teamId": "vercel_team_id",
+    "userId": "vercel_user_id"
+}"""
+
+USERID_UNINSTALL_RESPONSE = """{
+    "configurationId": "my_config_id",
+    "teamId": null,
+    "userId": "vercel_user_id"
+}"""
+
+
+class VercelUninstallTest(APITestCase):
+    def setUp(self):
+        self.url = "/extensions/vercel/delete/"
+        self.second_org = self.create_organization(name="Blah", owner=self.user)
+        metadata = {
+            "access_token": "my_access_token",
+            "installation_id": "my_config_id",
+            "webhook_id": "my_webhook_id",
+            "configurations": {
+                "my_config_id": {
+                    "access_token": "my_access_token",
+                    "webhook_id": "my_webhook_id",
+                    "organization_id": self.organization.id,
+                },
+                "my_config_id2": {
+                    "access_token": "my_access_token2",
+                    "webhook_id": "my_webhook_id2",
+                    "organization_id": self.second_org.id,
+                },
+            },
+        }
+        self.integration = Integration.objects.create(
+            provider="vercel",
+            external_id="vercel_team_id",
+            name="My Vercel Team",
+            metadata=metadata,
+        )
+        self.integration.add_organization(self.organization)
+        self.integration.add_organization(self.second_org)
+
+    def test_uninstall_primary_configuration(self):
+        """
+        Test uninstalling the configuration whose credentials
+            * access_token
+            * webhook_id
+            * installation_id
+        are used in the primary metadata for the integration.
+        """
+
+        assert len(OrganizationIntegration.objects.all()) == 2
+
+        response = self.client.delete(
+            path=self.url, data=PRIMARY_UNINSTALL_RESPONSE, content_type="application/json",
+        )
+
+        assert response.status_code == 204
+        assert len(OrganizationIntegration.objects.all()) == 1
+
+        integration = Integration.objects.get(id=self.integration.id)
+        assert integration.metadata == {
+            "access_token": "my_access_token2",
+            "installation_id": "my_config_id2",
+            "webhook_id": "my_webhook_id2",
+            "configurations": {
+                "my_config_id2": {
+                    "access_token": "my_access_token2",
+                    "webhook_id": "my_webhook_id2",
+                    "organization_id": self.second_org.id,
+                }
+            },
+        }
+
+    def test_uninstall_non_primary_configuration(self):
+        """
+        Test uninstalling a configuration that is only stored
+        in the "configurations" metadata.
+        """
+
+        assert len(OrganizationIntegration.objects.all()) == 2
+
+        response = self.client.delete(
+            path=self.url, data=NONPRIMARY_UNINSTALL_RESPONSE, content_type="application/json",
+        )
+
+        assert response.status_code == 204
+        assert len(OrganizationIntegration.objects.all()) == 1
+
+        integration = Integration.objects.get(id=self.integration.id)
+        assert integration.metadata == {
+            "access_token": "my_access_token",
+            "installation_id": "my_config_id",
+            "webhook_id": "my_webhook_id",
+            "configurations": {
+                "my_config_id": {
+                    "access_token": "my_access_token",
+                    "webhook_id": "my_webhook_id",
+                    "organization_id": self.organization.id,
+                }
+            },
+        }
+
+    def test_uninstall_single_configuration(self):
+        """
+        Test uninstalling an integration with only one organization
+        associated with it.
+        """
+        org = self.create_organization(owner=self.user)
+        metadata = {
+            "access_token": "my_access_token",
+            "installation_id": "my_config_id",
+            "webhook_id": "my_webhook_id",
+            "configurations": {
+                "my_config_id": {
+                    "access_token": "my_access_token",
+                    "webhook_id": "my_webhook_id",
+                    "organization_id": org.id,
+                }
+            },
+        }
+        integration = Integration.objects.create(
+            provider="vercel",
+            external_id="vercel_user_id",
+            name="My Vercel Team",
+            metadata=metadata,
+        )
+        integration.add_organization(org)
+
+        response = self.client.delete(
+            path=self.url, data=USERID_UNINSTALL_RESPONSE, content_type="application/json",
+        )
+
+        assert response.status_code == 204
+        assert not Integration.objects.filter(id=integration.id).exists()
+        assert not OrganizationIntegration.objects.filter(
+            integration_id=integration.id, organization_id=org.id
+        ).exists()
