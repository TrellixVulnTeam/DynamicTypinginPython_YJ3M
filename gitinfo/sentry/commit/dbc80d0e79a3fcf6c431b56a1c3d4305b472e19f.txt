commit dbc80d0e79a3fcf6c431b56a1c3d4305b472e19f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jul 13 11:44:10 2018 -0700

    fix(discover): Use proper column name for tags (#9030)
    
    Should be `tags[foo]` rather than `foo` since tags can have the same name as
    columns, and validation rules are different.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index 82e0e2d53c..5f7de7985e 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -1,21 +1,21 @@
 const PROMOTED_TAGS = [
-  {name: 'level', type: 'string'},
-  {name: 'logger', type: 'string'},
-  {name: 'server_name', type: 'string'},
-  {name: 'transaction', type: 'string'},
-  {name: 'environment', type: 'string'},
-  {name: 'site', type: 'string'},
-  {name: 'url', type: 'string'},
-  {name: 'app_device', type: 'string'},
-  {name: 'device', type: 'string'},
-  {name: 'device_family', type: 'string'},
-  {name: 'runtime', type: 'string'},
-  {name: 'runtime_name', type: 'string'},
-  {name: 'browser', type: 'string'},
-  {name: 'browser_name', type: 'string'},
-  {name: 'os', type: 'string'},
-  {name: 'os_name', type: 'string'},
-  {name: 'os_rooted', type: 'number'},
+  {name: 'tags[level]', type: 'string'},
+  {name: 'tags[logger]', type: 'string'},
+  {name: 'tags[server_name]', type: 'string'},
+  {name: 'tags[transaction]', type: 'string'},
+  {name: 'tags[environment]', type: 'string'},
+  {name: 'tags[site]', type: 'string'},
+  {name: 'tags[url]', type: 'string'},
+  {name: 'tags[app_device]', type: 'string'},
+  {name: 'tags[device]', type: 'string'},
+  {name: 'tags[device_family]', type: 'string'},
+  {name: 'tags[runtime]', type: 'string'},
+  {name: 'tags[runtime_name]', type: 'string'},
+  {name: 'tags[browser]', type: 'string'},
+  {name: 'tags[browser_name]', type: 'string'},
+  {name: 'tags[os]', type: 'string'},
+  {name: 'tags[os_name]', type: 'string'},
+  {name: 'tags[os_rooted]', type: 'number'},
 ];
 
 const COLUMNS = [
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 4c528f6ab9..5fd88198e4 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -68,7 +68,7 @@ export default function createQueryBuilder(initial = {}, organization) {
       end: moment().format(DATE_TIME_FORMAT),
     })
       .then(res => {
-        tags = res.data[0].tags_key.map(tag => ({name: tag, type: 'string'}));
+        tags = res.data[0].tags_key.map(tag => ({name: `tags[${tag}]`, type: 'string'}));
       })
       .catch(err => {
         tags = PROMOTED_TAGS;
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index 4a9d5b63fa..7881440ae0 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -50,10 +50,16 @@ describe('Query Builder', function() {
         })
       );
 
-      expect(queryBuilder.getColumns()).toContainEqual({name: 'tag1', type: 'string'});
-      expect(queryBuilder.getColumns()).toContainEqual({name: 'tag2', type: 'string'});
+      expect(queryBuilder.getColumns()).toContainEqual({
+        name: 'tags[tag1]',
+        type: 'string',
+      });
+      expect(queryBuilder.getColumns()).toContainEqual({
+        name: 'tags[tag2]',
+        type: 'string',
+      });
       expect(queryBuilder.getColumns()).not.toContainEqual({
-        name: 'environment',
+        name: 'tags[environment]',
         type: 'string',
       });
     });
@@ -72,11 +78,11 @@ describe('Query Builder', function() {
       expect(discoverMock).toHaveBeenCalled();
 
       expect(queryBuilder.getColumns()).toContainEqual({
-        name: 'environment',
+        name: 'tags[environment]',
         type: 'string',
       });
       expect(queryBuilder.getColumns()).not.toContainEqual({
-        name: 'tag1',
+        name: 'tags[tag1]',
         type: 'string',
       });
     });
