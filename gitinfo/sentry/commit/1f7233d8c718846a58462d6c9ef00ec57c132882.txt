commit 1f7233d8c718846a58462d6c9ef00ec57c132882
Author: William Mak <william@wmak.io>
Date:   Tue Feb 4 14:01:48 2020 -0500

    feat(discover) - Adding error states to events
    
    - When the graph errors, show a warning symbol
    - When the facet map errors, show a warning symbol
    - Moving the error alert to the top of the page instead, since errors
      apply to the whole page
      - TODO: This alert needs to move from InlineSVG to the new icons since
        it currently has error-circle instead of IconWarning

diff --git a/src/sentry/static/sentry/app/components/emptyStateWarning.tsx b/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
index ba830929b8..a7b3d76867 100644
--- a/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
+++ b/src/sentry/static/sentry/app/components/emptyStateWarning.tsx
@@ -3,19 +3,20 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import HeroIcon from 'app/components/heroIcon';
-import InlineSvg from 'app/components/inlineSvg';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import {IconWarning} from 'app/icons';
+import theme from 'app/utils/theme';
 
 type Props = {
   small?: boolean;
-  children: React.ReactNode;
+  children?: React.ReactNode;
 };
 
 const EmptyStateWarning = ({small = false, children}: Props) =>
   small ? (
     <EmptyMessage>
       <SmallMessage>
-        <InlineSvg src="icon-circle-exclamation" width="34px" />
+        <IconWarning color={theme.gray2} size="lg" />
         {children}
       </SmallMessage>
     </EmptyMessage>
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index a95a966931..341e2b9bc5 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -9,6 +9,8 @@ import FeatureDisabled from 'app/components/acl/featureDisabled';
 import Hovercard from 'app/components/hovercard';
 import InlineSvg from 'app/components/inlineSvg';
 import LoadingIndicator from 'app/components/loadingIndicator';
+import {IconWarning} from 'app/icons';
+import theme from 'app/utils/theme';
 
 import {
   GridColumn,
@@ -30,7 +32,6 @@ import {
   GridBody,
   GridBodyCell,
   GridBodyCellStatus,
-  GridStatusErrorAlert,
   GridResizer,
 } from './styles';
 import GridHeadCell from './gridHeadCell';
@@ -492,14 +493,10 @@ class GridEditable<
   };
 
   renderError() {
-    const {error} = this.props;
-
     return (
       <GridRow>
         <GridBodyCellStatus>
-          <GridStatusErrorAlert type="error" icon="icon-circle-exclamation">
-            {error}
-          </GridStatusErrorAlert>
+          <IconWarning color={theme.gray2} size="lg" />
         </GridBodyCellStatus>
       </GridRow>
     );
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index e008496fa1..d9be822f4b 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
-import Alert from 'app/components/alert';
 import InlineSvg from 'app/components/inlineSvg';
 import {Panel, PanelBody} from 'app/components/panels';
 import space from 'app/styles/space';
@@ -315,10 +314,6 @@ export const GridBodyCellStatus = props => (
     <GridStatusFloat>{props.children}</GridStatusFloat>
   </GridStatusWrapper>
 );
-export const GridStatusErrorAlert = styled(Alert)`
-  width: 100%;
-  margin: ${space(2)};
-`;
 
 /**
  * We have a fat GridResizer and we use the ::after pseudo-element to draw
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index e7513b02e7..8f04b8774f 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -13,6 +13,8 @@ import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import {callIfFunction} from 'app/utils/callIfFunction';
+import {IconWarning} from 'app/icons';
+import theme from 'app/utils/theme';
 
 import EventsRequest from './utils/eventsRequest';
 import YAxisSelector from './yAxisSelector';
@@ -166,10 +168,17 @@ class EventsChart extends React.Component {
             includePrevious={includePrevious}
             yAxis={yAxis}
           >
-            {({loading, reloading, timeseriesData, previousTimeseriesData}) => {
+            {({loading, reloading, errored, timeseriesData, previousTimeseriesData}) => {
               return (
                 <ReleaseSeries utc={utc} api={api} projects={projects}>
                   {({releaseSeries}) => {
+                    if (errored) {
+                      return (
+                        <ErrorPanel>
+                          <IconWarning color={theme.gray2} size="lg" />
+                        </ErrorPanel>
+                      );
+                    }
                     if (loading && !reloading) {
                       return <LoadingPanel data-test-id="events-request-loading" />;
                     }
@@ -239,3 +248,17 @@ const TransparentLoadingMask = styled(LoadingMask)`
   opacity: 0.4;
   z-index: 1;
 `;
+
+const ErrorPanel = styled('div')`
+  display: flex;
+  justify-content: center;
+  align-items: center;
+
+  flex: 1;
+  flex-shrink: 0;
+  overflow: hidden;
+  height: 200px;
+  position: relative;
+  border-color: transparent;
+  margin-bottom: 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index e72085c145..67b5e6a921 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -27,6 +27,7 @@ import getDynamicText from 'app/utils/getDynamicText';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
+import Alert from 'app/components/alert';
 
 import Table from './table';
 import Tags from './tags';
@@ -49,16 +50,18 @@ type Props = {
 
 type State = {
   eventView: EventView;
+  error: string;
 };
 
 class Results extends React.Component<Props, State> {
-  static getDerivedStateFromProps(nextProps: Props): State {
+  static getDerivedStateFromProps(nextProps: Props, prevState: State): State {
     const eventView = EventView.fromLocation(nextProps.location);
-    return {eventView};
+    return {eventView, error: prevState.error};
   }
 
   state = {
     eventView: EventView.fromLocation(this.props.location),
+    error: '',
   };
 
   componentDidMount() {
@@ -129,9 +132,24 @@ class Results extends React.Component<Props, State> {
     return <Tags eventView={eventView} organization={organization} location={location} />;
   };
 
+  renderError = error => {
+    if (!error) {
+      return '';
+    }
+    return (
+      <Alert type="error" icon="icon-circle-exclamation">
+        {error}
+      </Alert>
+    );
+  };
+
+  setError = error => {
+    this.setState({error});
+  };
+
   render() {
     const {organization, location, router} = this.props;
-    const {eventView} = this.state;
+    const {eventView, error} = this.state;
     const query = location.query.query || '';
     const title = this.getDocumentTitle();
 
@@ -162,6 +180,7 @@ class Results extends React.Component<Props, State> {
             />
             <StyledPageContent>
               <Top>
+                {this.renderError(error)}
                 <StyledSearchBar
                   organization={organization}
                   projectIds={eventView.project}
@@ -193,6 +212,7 @@ class Results extends React.Component<Props, State> {
                   eventView={eventView}
                   location={location}
                   title={title}
+                  setError={this.setError}
                 />
               </Main>
               <Side eventView={eventView}>{this.renderTagsTable()}</Side>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index f9b6373ab0..89d8dbd612 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -21,6 +21,7 @@ type TableProps = {
   eventView: EventView;
   organization: Organization;
   tags: {[key: string]: Tag};
+  setError: (string) => void;
   title: string;
 };
 
@@ -87,7 +88,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
   };
 
   fetchData = () => {
-    const {eventView, organization, location} = this.props;
+    const {eventView, organization, location, setError} = this.props;
     const url = `/organizations/${organization.slug}/eventsv2/`;
 
     const tableFetchID = Symbol('tableFetchID');
@@ -126,6 +127,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
           pageLinks: null,
           tableData: null,
         });
+        setError(err.responseJSON.detail);
       });
   };
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index 1ab9967f33..61da7952ae 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -31,6 +31,7 @@ type State = {
   loading: boolean;
   tags: Tag[];
   totalValues: null | number;
+  error: string;
 };
 
 class Tags extends React.Component<Props, State> {
@@ -45,6 +46,7 @@ class Tags extends React.Component<Props, State> {
     loading: true,
     tags: [],
     totalValues: null,
+    error: '',
   };
 
   componentDidMount() {
@@ -85,6 +87,7 @@ class Tags extends React.Component<Props, State> {
       })
       .catch(err => {
         Sentry.captureException(err);
+        this.setState({loading: false, error: err});
       });
   };
 
@@ -139,15 +142,26 @@ class Tags extends React.Component<Props, State> {
     );
   }
 
+  renderBody = () => {
+    const {loading, error, tags} = this.state;
+    if (loading) {
+      return this.renderPlaceholders();
+    }
+    if (error) {
+      return <EmptyStateWarning small />;
+    }
+    if (tags.length > 0) {
+      return tags.map(tag => this.renderTag(tag));
+    } else {
+      return <EmptyStateWarning small>{t('No tags')}</EmptyStateWarning>;
+    }
+  };
+
   render() {
     return (
       <TagSection>
         <StyledHeading>{t('Event Tag Summary')}</StyledHeading>
-        {this.state.loading && this.renderPlaceholders()}
-        {this.state.tags.length > 0 && this.state.tags.map(tag => this.renderTag(tag))}
-        {!this.state.loading && !this.state.tags.length && (
-          <EmptyStateWarning small>{t('No tags')}</EmptyStateWarning>
-        )}
+        {this.renderBody()}
       </TagSection>
     );
   }
