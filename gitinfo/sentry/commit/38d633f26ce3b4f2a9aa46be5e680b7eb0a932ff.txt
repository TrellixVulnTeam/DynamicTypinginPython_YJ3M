commit 38d633f26ce3b4f2a9aa46be5e680b7eb0a932ff
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Jan 13 12:09:40 2020 -0500

    fix(discoverV1): Properly pass the date range when fetching DiscoverV1 queries (#16403)
    
    Closes ISSUE-653

diff --git a/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx b/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
index 4c809b9c7c..61fede795e 100644
--- a/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
+++ b/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
@@ -150,7 +150,7 @@ export default function createQueryBuilder(
     const projects = query.projects.length ? query.projects : defaultProjectIds;
 
     // Default to DEFAULT_STATS_PERIOD when no date range selected (either relative or absolute)
-    const {statsPeriod, start, end} = getParams(query);
+    const {statsPeriod, start, end} = getParams({...query, statsPeriod: query.range});
     const hasAbsolute = start && end;
     const daterange = {
       ...(hasAbsolute && {start, end}),
@@ -247,7 +247,7 @@ export default function createQueryBuilder(
       return Promise.reject(new Error('Start date cannot be after end date'));
     }
 
-    const {start, end, statsPeriod} = getParams(data);
+    const {start, end, statsPeriod} = getParams({...data, statsPeriod: data.range});
 
     if (start && end) {
       data.start = start;
@@ -296,7 +296,7 @@ export default function createQueryBuilder(
       return Promise.reject(new Error('Start date cannot be after end date'));
     }
 
-    const {start, end, statsPeriod} = getParams(data);
+    const {start, end, statsPeriod} = getParams({...data, statsPeriod: data.range});
 
     if (start && end) {
       data.start = start;
diff --git a/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx b/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
index fea4f0e353..2d504d347b 100644
--- a/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
+++ b/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
@@ -206,7 +206,7 @@ describe('OverviewDashboard', function() {
         data: expect.objectContaining({
           environments: [],
           projects: [2, 3],
-          range: '14d',
+          range: '7d',
 
           fields: [],
           conditions: [],
diff --git a/tests/js/spec/views/discover/index.spec.jsx b/tests/js/spec/views/discover/index.spec.jsx
index 684ccbbfe9..39329360df 100644
--- a/tests/js/spec/views/discover/index.spec.jsx
+++ b/tests/js/spec/views/discover/index.spec.jsx
@@ -243,7 +243,7 @@ describe('DiscoverContainer', function() {
         expect.anything(),
         expect.objectContaining({
           data: expect.objectContaining({
-            range: '14d',
+            range: '7d',
             start: null,
             end: null,
             utc: null,
diff --git a/tests/js/spec/views/discover/queryBuilder.spec.jsx b/tests/js/spec/views/discover/queryBuilder.spec.jsx
index 291a7303a9..6944e02dd9 100644
--- a/tests/js/spec/views/discover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/discover/queryBuilder.spec.jsx
@@ -71,7 +71,7 @@ describe('Query Builder', function() {
             aggregations: [['count()', null, 'count']],
             orderby: '-count',
             projects: [2],
-            range: '14d',
+            range: '90d',
             turbo: true,
           }),
         })
@@ -116,7 +116,7 @@ describe('Query Builder', function() {
             aggregations: [['count()', null, 'count']],
             orderby: '-count',
             projects: [1, 2],
-            range: '14d',
+            range: '90d',
             turbo: true,
           }),
         })
@@ -162,7 +162,7 @@ describe('Query Builder', function() {
             aggregations: [['count()', null, 'count']],
             orderby: '-count',
             projects: [1, 2],
-            range: '14d',
+            range: '90d',
             turbo: true,
           }),
         })
