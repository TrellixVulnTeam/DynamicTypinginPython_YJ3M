commit 39deda3b397cd65befaa8d9fbd8998e95ef607d3
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jan 17 13:40:27 2019 -0800

    feat(dashboards): Dashboard Details Endpoint (get, delete). (#11398)
    
    * quick outline of details endpoint.
    
    * Added json blob and widget serializer.
    
    * fleshed out put method.
    
    * added widget data source
    
    * Added reviewsed serializers, and tests.
    
    * removed json field addition from this pr.
    
    * renamed test file to fix misspelling.
    
    * revised drf serializers.
    
    * got get method working.
    
    * Making changes to accomodate put function. Tests not yet passing.
    
    * Added tests cases to be.
    
    * Removed put method as it's more intensive.
    
    * Got tests working.
    
    * removed serializer as it's in another branch.
    
    * changed url
    
    * made changes to serializer to make it more modular.
    
    * removed call to serializer.
    
    * Added OrganizationDashboardEndpoint

diff --git a/src/sentry/api/bases/__init__.py b/src/sentry/api/bases/__init__.py
index 274560b718..e75bb11a9a 100644
--- a/src/sentry/api/bases/__init__.py
+++ b/src/sentry/api/bases/__init__.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from .group import *  # NOQA
+from .dashboard import *  # NOQA
 from .organization import *  # NOQA
 from .organization_events import *  # NOQA
 from .organizationissues import *  # NOQA
diff --git a/src/sentry/api/bases/dashboard.py b/src/sentry/api/bases/dashboard.py
new file mode 100644
index 0000000000..db67ce2469
--- /dev/null
+++ b/src/sentry/api/bases/dashboard.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import
+
+from sentry.api.bases.organization import (
+    OrganizationEndpoint
+)
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Dashboard
+
+
+class OrganizationDashboardEndpoint(OrganizationEndpoint):
+    def convert_args(self, request, organization_slug, dashboard_id, *args, **kwargs):
+        args, kwargs = super(OrganizationDashboardEndpoint,
+                             self).convert_args(request, organization_slug)
+
+        try:
+            kwargs['dashboard'] = self._get_dashboard(request, kwargs['organization'], dashboard_id)
+        except Dashboard.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return (args, kwargs)
+
+    def _get_dashboard(self, request, organization, dashboard_id):
+        return Dashboard.objects.get(
+            id=dashboard_id,
+            organization_id=organization.id
+        )
diff --git a/src/sentry/api/endpoints/organization_dashboard_details.py b/src/sentry/api/endpoints/organization_dashboard_details.py
new file mode 100644
index 0000000000..e5b148a10b
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_dashboard_details.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from sentry.api.base import DocSection
+from sentry.api.bases.dashboard import (
+    OrganizationDashboardEndpoint
+)
+from sentry.api.serializers import serialize
+from sentry.models import ObjectStatus
+
+
+class OrganizationDashboardDetailsEndpoint(OrganizationDashboardEndpoint):
+
+    doc_section = DocSection.ORGANIZATIONS
+
+    def get(self, request, organization, dashboard):
+        """
+        Retrieve an Organization's Dashboard
+        ````````````````````````````````````
+
+        Return details on an individual organization's dashboard.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          dashboard belongs to.
+        :pparam int dashboard_id: the id of the dashboard.
+        :auth: required
+        """
+
+        return self.respond(serialize(dashboard, request.user))
+
+    def delete(self, request, organization, dashboard):
+        """
+        Delete an Organization's Dashboard
+        ```````````````````````````````````
+
+        Delete an individual organization's dashboard.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          dashboard belongs to.
+        :pparam int dashboard_id: the id of the dashboard.
+        :auth: required
+        """
+
+        dashboard.status = ObjectStatus.PENDING_DELETION
+        dashboard.save()
+
+        return self.respond(status=204)
diff --git a/src/sentry/api/serializers/models/dashboard.py b/src/sentry/api/serializers/models/dashboard.py
new file mode 100644
index 0000000000..9e077c4a16
--- /dev/null
+++ b/src/sentry/api/serializers/models/dashboard.py
@@ -0,0 +1,79 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import Dashboard, Widget, WidgetDataSource, WidgetDisplayTypes
+
+
+@register(Widget)
+class WidgetSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        result = {}
+        data_sources = serialize(list(WidgetDataSource.objects.filter(
+            widget_id__in=[i.id for i in item_list],
+        )))
+
+        for widget in item_list:
+            widget_data_sources = [
+                d for d in data_sources if d['widgetId'] == six.text_type(
+                    widget.id)]
+            result[widget] = {'dataSources': widget_data_sources}
+
+        return result
+
+    def serialize(self, obj, attrs, user, *args, **kwargs):
+        return {
+            'id': six.text_type(obj.id),
+            'order': six.text_type(obj.order),
+            'title': obj.title,
+            'displayType': WidgetDisplayTypes.get_type_name(obj.display_type),
+            'displayOptions': obj.display_options,
+            'dateAdded': obj.date_added,
+            'dashboardId': six.text_type(obj.dashboard_id),
+            'dataSources': attrs['dataSources'],
+        }
+
+
+@register(WidgetDataSource)
+class WidgetDataSourceSerializer(Serializer):
+
+    def serialize(self, obj, attrs, user, *args, **kwargs):
+        return {
+            'id': six.text_type(obj.id),
+            'type': obj.type,
+            'name': obj.name,
+            'data': obj.data,
+            'order': six.text_type(obj.order),
+            'widgetId': six.text_type(obj.widget_id),
+        }
+
+
+@register(Dashboard)
+class DashboardWithWidgetsSerializer(Serializer):
+
+    def get_attrs(self, item_list, user):
+        result = {}
+
+        widgets = serialize(list(Widget.objects.filter(
+            dashboard_id__in=[i.id for i in item_list]
+        )))
+
+        for dashboard in item_list:
+            dashboard_widgets = [
+                w for w in widgets if w['dashboardId'] == six.text_type(
+                    dashboard.id)]
+            result[dashboard] = {'widgets': dashboard_widgets}
+
+        return result
+
+    def serialize(self, obj, attrs, user, *args, **kwargs):
+        data = {
+            'id': six.text_type(obj.id),
+            'title': obj.title,
+            'organization': six.text_type(obj.organization.id),
+            'dateAdded': obj.date_added,
+            'createdBy': six.text_type(obj.created_by.id),
+            'widgets': attrs['widgets']
+        }
+        return data
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d01f65984d..b56509ca14 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -63,6 +63,7 @@ from .endpoints.organization_discover_saved_queries import OrganizationDiscoverS
 from .endpoints.organization_discover_saved_query_detail import OrganizationDiscoverSavedQueryDetailEndpoint
 from .endpoints.organization_events import OrganizationEventsEndpoint, OrganizationEventsMetaEndpoint, OrganizationEventsStatsEndpoint
 from .endpoints.organization_group_index import OrganizationGroupIndexEndpoint
+from .endpoints.organization_dashboard_details import OrganizationDashboardDetailsEndpoint
 from .endpoints.organization_health import OrganizationHealthTopEndpoint, OrganizationHealthGraphEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_environments import OrganizationEnvironmentsEndpoint
@@ -411,6 +412,11 @@ urlpatterns = patterns(
         OrganizationDiscoverSavedQueryDetailEndpoint.as_view(),
         name='sentry-api-0-organization-discover-saved-query-detail'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/dashboards/(?P<dashboard_id>[^\/]+)/$',
+        OrganizationDashboardDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-dashboard-details',
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/health/top/$',
         OrganizationHealthTopEndpoint.as_view(),
diff --git a/src/sentry/models/widget.py b/src/sentry/models/widget.py
index 3b18d24451..7b41d3765f 100644
--- a/src/sentry/models/widget.py
+++ b/src/sentry/models/widget.py
@@ -8,7 +8,21 @@ from sentry.constants import ObjectStatus
 from sentry.db.models import BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 
 
-class WidgetDisplayTypes(object):
+class TypesClass(object):
+    TYPES = []
+
+    @classmethod
+    def as_choices(cls):
+        return cls.TYPES
+
+    @classmethod
+    def get_type_name(cls, num):
+        for id, name in cls.TYPES:
+            if id == num:
+                return name
+
+
+class WidgetDisplayTypes(TypesClass):
     LINE_CHART = 0
     AREA_CHART = 1
     STACKED_AREA_CHART = 2
@@ -17,29 +31,25 @@ class WidgetDisplayTypes(object):
     TABLE = 5
     WORLD_MAP = 6
     PERCENTAGE_AREA_CHART = 7
-
-    @classmethod
-    def as_choices(cls):
-        return [
-            (cls.LINE_CHART, 'line'),
-            (cls.AREA_CHART, 'area'),
-            (cls.STACKED_AREA_CHART, 'stacked_area'),
-            (cls.BAR_CHART, 'bar'),
-            (cls.PIE_CHART, 'pie'),
-            (cls.TABLE, 'table'),
-            (cls.WORLD_MAP, 'world_map'),
-            (cls.PERCENTAGE_AREA_CHART, 'percentage_area_chart')
-        ]
-
-
-class WidgetDataSourceTypes(object):
+    TYPES = [
+        (LINE_CHART, 'line'),
+        (AREA_CHART, 'area'),
+        (STACKED_AREA_CHART, 'stacked_area'),
+        (BAR_CHART, 'bar'),
+        (PIE_CHART, 'pie'),
+        (TABLE, 'table'),
+        (WORLD_MAP, 'world_map'),
+        (PERCENTAGE_AREA_CHART, 'percentage_area_chart')
+    ]
+    TYPE_NAMES = [t[1] for t in TYPES]
+
+
+class WidgetDataSourceTypes(TypesClass):
     DISCOVER_SAVED_SEARCH = 0
-
-    @classmethod
-    def as_choices(cls):
-        return [
-            (cls.DISCOVER_SAVED_SEARCH, 'discover_saved_search'),
-        ]
+    TYPES = [
+        (DISCOVER_SAVED_SEARCH, 'discover_saved_search'),
+    ]
+    TYPE_NAMES = [t[1] for t in TYPES]
 
 
 class WidgetDataSource(Model):
diff --git a/tests/sentry/api/endpoints/test_organization_dashboard_details.py b/tests/sentry/api/endpoints/test_organization_dashboard_details.py
new file mode 100644
index 0000000000..287e81a23c
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_dashboard_details.py
@@ -0,0 +1,154 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+from sentry.models import Dashboard, ObjectStatus, Widget, WidgetDataSource, WidgetDataSourceTypes, WidgetDisplayTypes
+from sentry.testutils import APITestCase
+
+
+class OrganizationDashboardDetailsTestCase(APITestCase):
+    def setUp(self):
+        super(OrganizationDashboardDetailsTestCase, self).setUp()
+        self.login_as(self.user)
+        self.dashboard = Dashboard.objects.create(
+            title='Dashboard 1',
+            created_by=self.user,
+            organization=self.organization,
+        )
+        self.widget_1 = Widget.objects.create(
+            dashboard=self.dashboard,
+            order=1,
+            title='Widget 1',
+            display_type=WidgetDisplayTypes.LINE_CHART,
+        )
+        self.widget_2 = Widget.objects.create(
+            dashboard=self.dashboard,
+            order=2,
+            title='Widget 2',
+            display_type=WidgetDisplayTypes.TABLE,
+        )
+        self.anon_users_query = {
+            'name': 'anonymousUsersAffectedQuery',
+            'fields': [],
+            'conditions': [['user.email', 'IS NULL', None]],
+            'aggregations': [['count()', None, 'Anonymous Users']],
+            'limit': 1000,
+            'orderby': '-time',
+            'groupby': ['time'],
+            'rollup': 86400,
+        }
+        self.known_users_query = {
+            'name': 'knownUsersAffectedQuery',
+            'fields': [],
+            'conditions': [['user.email', 'IS NOT NULL', None]],
+            'aggregations': [['uniq', 'user.email', 'Known Users']],
+            'limit': 1000,
+            'orderby': '-time',
+            'groupby': ['time'],
+            'rollup': 86400,
+        }
+        self.geo_erorrs_query = {
+            'name': 'errorsByGeo',
+            'fields': ['geo.country_code'],
+            'conditions': [['geo.country_code', 'IS NOT NULL', None]],
+            'aggregations': [['count()', None, 'count']],
+            'limit': 10,
+            'orderby': '-count',
+            'groupby': ['geo.country_code'],
+        }
+        self.widget_1_data_1 = WidgetDataSource.objects.create(
+            widget=self.widget_1,
+            type=WidgetDataSourceTypes.DISCOVER_SAVED_SEARCH,
+            name='anonymousUsersAffectedQuery',
+            data=self.anon_users_query,
+            order=1,
+        )
+        self.widget_1_data_2 = WidgetDataSource.objects.create(
+            widget=self.widget_1,
+            type=WidgetDataSourceTypes.DISCOVER_SAVED_SEARCH,
+            name='knownUsersAffectedQuery',
+            data=self.known_users_query,
+            order=2,
+        )
+        self.widget_2_data_1 = WidgetDataSource.objects.create(
+            widget=self.widget_2,
+            type=WidgetDataSourceTypes.DISCOVER_SAVED_SEARCH,
+            name='errorsByGeo',
+            data=self.geo_erorrs_query,
+            order=1,
+        )
+
+    def url(self, dashboard_id):
+        return reverse(
+            'sentry-api-0-organization-dashboard-details',
+            kwargs={
+                'organization_slug': self.organization.slug,
+                'dashboard_id': dashboard_id,
+            }
+        )
+
+    def sort_by_order(self, widgets):
+        def get_order(x):
+            try:
+                return x['order']
+            except TypeError:
+                return x.order
+
+        return sorted(widgets, key=get_order)
+
+    def assert_widget(self, data, expected_widget):
+        assert data['id'] == six.text_type(expected_widget.id)
+        assert data['title'] == expected_widget.title
+        assert data['displayType'] == WidgetDisplayTypes.get_type_name(expected_widget.display_type)
+        assert data['displayOptions'] == expected_widget.display_options
+
+    def assert_dashboard(self, data, dashboard):
+        assert data['id'] == six.text_type(dashboard.id)
+        assert data['organization'] == six.text_type(dashboard.organization.id)
+        assert data['title'] == dashboard.title
+        assert data['createdBy'] == six.text_type(dashboard.created_by.id)
+
+    def assert_widget_data_source(self, data, widget_data_source):
+        assert data['id'] == six.text_type(widget_data_source.id)
+        assert data['type'] == widget_data_source.type
+        assert data['name'] == widget_data_source.name
+        assert data['data'] == widget_data_source.data
+        assert data['order'] == six.text_type(widget_data_source.order)
+
+
+class OrganizationDashboardDetailsGetTest(OrganizationDashboardDetailsTestCase):
+    def test_get(self):
+        response = self.client.get(self.url(self.dashboard.id))
+        assert response.status_code == 200, response.content
+
+        self.assert_dashboard(response.data, self.dashboard)
+        assert len(response.data['widgets']) == 2
+        widgets = self.sort_by_order(response.data['widgets'])
+        self.assert_widget(widgets[0], self.widget_1)
+        self.assert_widget(widgets[1], self.widget_2)
+
+        widget_1_data_sources = self.sort_by_order(widgets[0]['dataSources'])
+        assert len(widget_1_data_sources) == 2
+        self.assert_widget_data_source(widget_1_data_sources[0], self.widget_1_data_1)
+        self.assert_widget_data_source(widget_1_data_sources[1], self.widget_1_data_2)
+
+        assert len(widgets[1]['dataSources']) == 1
+        self.assert_widget_data_source(widgets[1]['dataSources'][0], self.widget_2_data_1)
+
+    def test_dashboard_does_not_exist(self):
+        response = self.client.get(self.url(1234567890))
+        assert response.status_code == 404
+        assert response.data == {u'detail': 'The requested resource does not exist'}
+
+
+class OrganizationDashboardDetailsDeleteTest(OrganizationDashboardDetailsTestCase):
+    def test_delete(self):
+        response = self.client.delete(self.url(self.dashboard.id))
+        assert response.status_code == 204
+        assert Dashboard.objects.get(id=self.dashboard.id).status == ObjectStatus.PENDING_DELETION
+
+    def test_dashboard_does_not_exist(self):
+        response = self.client.delete(self.url(1234567890))
+        assert response.status_code == 404
+        assert response.data == {u'detail': 'The requested resource does not exist'}
