commit 06160bcc0fecef796e3b4e4f0c9ba871b2abc780
Author: Alex Gaynor <alex.gaynor@gmail.com>
Date:   Sat May 10 11:06:21 2014 -0700

    Fixed some typos throughout the codebase

diff --git a/conftest.py b/conftest.py
index 94e43a8777..38f9336605 100644
--- a/conftest.py
+++ b/conftest.py
@@ -80,8 +80,8 @@ def pytest_configure(config):
     settings.SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'
     settings.SENTRY_TSDB_OPTIONS = {}
 
-    # django mail uses socket.getfqdn which doesnt play nice if our
-    # networking isnt stable
+    # django mail uses socket.getfqdn which doesn't play nice if our
+    # networking isn't stable
     patcher = mock.patch('socket.getfqdn', return_value='localhost')
     patcher.start()
 
diff --git a/docs/developer/client/index.rst b/docs/developer/client/index.rst
index f49fbc5516..17e94f4486 100644
--- a/docs/developer/client/index.rst
+++ b/docs/developer/client/index.rst
@@ -338,7 +338,7 @@ See :doc:`../interfaces/index` for information on Sentry's builtin interfaces an
 Authentication
 --------------
 
-An authentication header is expected to be sent along with the message body, which acts as as an ownership identifier::
+An authentication header is expected to be sent along with the message body, which acts as an ownership identifier::
 
     X-Sentry-Auth: Sentry sentry_version=5,
     sentry_client=<client version, arbitrary>,
diff --git a/docs/performance/index.rst b/docs/performance/index.rst
index 70638ea9ca..89b534b1b7 100644
--- a/docs/performance/index.rst
+++ b/docs/performance/index.rst
@@ -22,9 +22,9 @@ With that in mind, we recommend the following changes to (some) default configur
 Web Server
 ----------
 
-Switching off of the default Sentry worker model and to uWSGI + emporer mode can yield very good results.
+Switching off of the default Sentry worker model and to uWSGI + emperor mode can yield very good results.
 
-If you're using supervisord, you can easily implement emporer mode and uWSGI yourself by doing something along the lines of:
+If you're using supervisord, you can easily implement emperor mode and uWSGI yourself by doing something along the lines of:
 
 ::
 
@@ -101,7 +101,7 @@ Once you're running multiple processes, you'll of course need to also configure
 	  }
 	}
 
-See uWSGI's official documentation for emporer mode details.
+See uWSGI's official documentation for emperor mode details.
 
 
 Celery
diff --git a/docs/queue/index.rst b/docs/queue/index.rst
index ce0ae6c731..0f99808a15 100644
--- a/docs/queue/index.rst
+++ b/docs/queue/index.rst
@@ -19,7 +19,7 @@ which is the worker manager process of the Celery library.
 
     sentry celery worker -B
 
-.. note:: You will need to run both celery workers and celerybeat. In our example, the -B flag runs a beat instance (in addition to the worker), but in production you may want to run them seperately.
+.. note:: You will need to run both celery workers and celerybeat. In our example, the -B flag runs a beat instance (in addition to the worker), but in production you may want to run them separately.
 
 We again recommend running this as a service. Below is an example configuration with supervisor:
 
diff --git a/docs/quickstart/index.rst b/docs/quickstart/index.rst
index a013627efd..8dc72e45d4 100644
--- a/docs/quickstart/index.rst
+++ b/docs/quickstart/index.rst
@@ -369,7 +369,7 @@ slightly better).
 Enabling Social Auth
 --------------------
 
-Most of the time it doesnt really matter **how** someone authenticates to the service, so much as it that they do. In
+Most of the time it doesn't really matter **how** someone authenticates to the service, so much as it that they do. In
 these cases, Sentry provides tight integrated with several large social services, including: Twitter, Facebook, Google,
 and GitHub. Enabling this is as simple as setting up an application with the respective services, and configuring a
 couple values in your ``sentry.conf.py`` file.
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 6a35766bc0..c0be81d933 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -17,7 +17,7 @@ class GroupDetailsEndpoint(Endpoint):
         for item in activity_qs[:num * 2]:
             sig = (item.event_id, item.type, item.ident, item.user_id)
             # TODO: we could just generate a signature (hash(text)) for notes
-            # so theres no special casing
+            # so there's no special casing
             if item.type == Activity.NOTE:
                 activity.append(item)
             elif sig not in activity_items:
diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index 9f4764ef7b..c2d354f653 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -85,10 +85,10 @@ class Paginator(object):
             results = [r for r in reversed(results[:limit + 1])]
             num_results = len(results)
         elif cursor_offset or offset:
-            # It's likely that theres a previous page if they passed us either offset values
+            # It's likely that there's a previous page if they passed us either offset values
             has_prev = True
         else:
-            # we dont know
+            # we don't know
             has_prev = False
 
         # Default cursor if not present
@@ -135,7 +135,7 @@ class Paginator(object):
             else:
                 i = 0
 
-            # if we iterated every result and the offset didnt change, we need
+            # if we iterated every result and the offset didn't change, we need
             # to simply add the current offset to our total results (visible)
             if prev_cursor_offset == cursor_offset:
                 prev_offset = offset + i
@@ -149,7 +149,7 @@ class Paginator(object):
         # Truncate the list to our original result size now that we've determined the next page
         results = results[:limit]
 
-        # XXX: We convert datetimes to unix_time and bump 7 decimal places so we dont
+        # XXX: We convert datetimes to unix_time and bump 7 decimal places so we don't
         # have to worry about float point restrictions. This conversion is also handled
         # in the CursorTimestamp validator
         if isinstance(next_cursor_offset, datetime.datetime):
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index e9b0188b7d..c3eee516db 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -604,7 +604,7 @@ SENTRY_MAX_VARIABLE_SIZE = 512
 # characters
 SENTRY_MAX_EXTRA_VARIABLE_SIZE = 4096
 
-# For various attributes we dont limit the entire attribute on size, but the
+# For various attributes we don't limit the entire attribute on size, but the
 # individual item. In those cases we also want to limit the maximum number of
 # keys
 SENTRY_MAX_DICTIONARY_ITEMS = 50
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index ca2fc99336..66e2b84b7a 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -626,7 +626,7 @@ class Stacktrace(Interface):
         if len(frames) == system_frames:
             system_frames = 0
 
-        # if theres no system frames, pretend they're all part of the app
+        # if there's no system frames, pretend they're all part of the app
         if not system_frames:
             for frame in frames:
                 frame['in_app'] = True
diff --git a/src/sentry/testutils/asserts.py b/src/sentry/testutils/asserts.py
index 9053fd669f..6d596170c4 100644
--- a/src/sentry/testutils/asserts.py
+++ b/src/sentry/testutils/asserts.py
@@ -8,5 +8,5 @@ sentry.testutils.asserts
 
 
 def assert_date_resembles(one, two):
-    # this is mostly intended to handle discrepencies between mysql/postgres
+    # this is mostly intended to handle discrepancies between mysql/postgres
     assert one.replace(microsecond=0) == two.replace(microsecond=0)
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index e2025d6cf2..8db5317f47 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -107,7 +107,7 @@ class RangeQuerySetWrapper(object):
 class EverythingCollector(Collector):
     """
     More or less identical to the default Django collector except we always
-    return relations (even when they shouldnt matter).
+    return relations (even when they shouldn't matter).
     """
     def collect(self, objs, source=None, nullable=False, collect_related=True,
                 source_attr=None, reverse_dependency=False):
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index 41f3311b6a..0e3d3ea05f 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -87,7 +87,7 @@ def trim_dict(value, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwargs):
 
 
 def trim_frames(stacktrace, max_frames=settings.SENTRY_MAX_STACKTRACE_FRAMES):
-    # TODO: this doesnt account for cases where the client has already omitted
+    # TODO: this doesn't account for cases where the client has already omitted
     # frames
     frames = stacktrace['frames']
     frames_len = len(frames)
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 1084528c76..80aa566f1e 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -138,7 +138,7 @@ class AccountSettingsForm(forms.Form):
         self.user = user
         super(AccountSettingsForm, self).__init__(*args, **kwargs)
 
-        # dont show username field if its the same as their email address
+        # don't show username field if its the same as their email address
         if self.user.email == self.user.username:
             del self.fields['username']
 
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 449687de52..7945cf622f 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -418,7 +418,7 @@ def group(request, team, project, group, event_id=None):
     for item in activity_qs.filter(group=group)[:20]:
         sig = (item.event_id, item.type, item.ident, item.user_id)
         # TODO: we could just generate a signature (hash(text)) for notes
-        # so theres no special casing
+        # so there's no special casing
         if item.type == Activity.NOTE:
             activity.append(item)
         elif sig not in activity_items:
diff --git a/tests/sentry/buffer/base/tests.py b/tests/sentry/buffer/base/tests.py
index 2d4e845013..058b9bb7bd 100644
--- a/tests/sentry/buffer/base/tests.py
+++ b/tests/sentry/buffer/base/tests.py
@@ -36,7 +36,7 @@ class BufferTest(TestCase):
         group = Group.objects.create(project=Project(id=1))
         columns = {'times_seen': 1}
         filters = {'pk': group.pk}
-        # strip micrseconds because MySQL doesnt seem to handle them correctly
+        # strip micrseconds because MySQL doesn't seem to handle them correctly
         the_date = (timezone.now() + timedelta(days=5)).replace(microsecond=0)
         self.buf.process(Group, columns, filters, {'last_seen': the_date})
         group_ = Group.objects.get(pk=group.pk)
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index c97313e85e..87aea52c39 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -50,7 +50,7 @@ class SentryManagerTest(TestCase):
         self.assertEquals(event.project_id, 1)
 
     def test_valid_timestamp_without_tz(self):
-        # TODO: this doesnt error, but it will throw a warning. What should we do?
+        # TODO: this doesn't error, but it will throw a warning. What should we do?
         with self.settings(USE_TZ=True):
             date = datetime.datetime.utcnow()
             event = Group.objects.from_kwargs(1, message='foo', timestamp=date)
@@ -85,7 +85,7 @@ class SentryManagerTest(TestCase):
         self.assertEquals(event.project_id, 1)
         self.assertEquals(Event.objects.count(), 1)
 
-        # ensure that calling it again doesnt raise a db error
+        # ensure that calling it again doesn't raise a db error
         Group.objects.from_kwargs(1, event_id=1, message='foo')
         self.assertEquals(Event.objects.count(), 1)
 
diff --git a/tests/sentry/utils/query/tests.py b/tests/sentry/utils/query/tests.py
index d11eac17e2..6e0ee55ec6 100644
--- a/tests/sentry/utils/query/tests.py
+++ b/tests/sentry/utils/query/tests.py
@@ -25,5 +25,5 @@ class MergeIntoTest(TestCase):
         assert Project.objects.get(id=project_2.id).owner == user_2
         assert list(ag.members.all()) == [user_2]
 
-        # make sure we didnt remove the instance
+        # make sure we didn't remove the instance
         assert User.objects.filter(id=user_1.id).exists()
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index af5f98cd5e..cafe6fa780 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -287,7 +287,7 @@ class RecoverPasswordTest(TestCase):
 
     def test_invalid_username(self):
         resp = self.client.post(self.path, {
-            'user': 'nonexistant'
+            'user': 'nonexistent'
         })
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/account/recover/index.html')
