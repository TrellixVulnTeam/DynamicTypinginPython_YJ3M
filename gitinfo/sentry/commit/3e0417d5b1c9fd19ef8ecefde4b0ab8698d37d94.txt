commit 3e0417d5b1c9fd19ef8ecefde4b0ab8698d37d94
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue May 14 10:29:58 2019 -0700

    feat(incidents): Fix "event count" and "users affected" on Incident Details (#13186)
    
    * fix/update some propType issues.
    * fix IncidentsList
    * add duration calc
    * fix status dropdown menu overlap

diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index a7fe539a57..610a32a9f6 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -397,20 +397,13 @@ export const SavedSearch = PropTypes.shape({
 
 export const Incident = PropTypes.shape({
   id: PropTypes.string.isRequired,
-  identifier: PropTypes.string.isRequired,
+  identifier: PropTypes.number.isRequired,
   title: PropTypes.string.isRequired,
   status: PropTypes.number.isRequired,
   query: PropTypes.string,
   projects: PropTypes.array.isRequired,
-  eventCount: PropTypes.number.isRequired,
-  usersAffected: PropTypes.number.isRequired,
-  suspects: PropTypes.arrayOf(
-    PropTypes.shape({
-      id: PropTypes.string,
-      type: PropTypes.string,
-      likelihood: PropTypes.string,
-    })
-  ).isRequired,
+  totalEvents: PropTypes.number.isRequired,
+  uniqueUsers: PropTypes.number.isRequired,
   isSubscribed: PropTypes.bool.isRequired,
 });
 
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
index 1168077cc0..fa68afe022 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
@@ -13,7 +13,6 @@ import SubscribeButton from 'app/components/subscribeButton';
 import DropdownControl from 'app/components/dropdownControl';
 import MenuItem from 'app/components/menuItem';
 import Access from 'app/components/acl/access';
-import DropdownButton from 'app/components/dropdownButton';
 
 import Status from '../status';
 import {isOpen} from '../utils';
@@ -36,17 +35,7 @@ export default class DetailsHeader extends React.Component {
         access={['org:write']}
         renderNoAccessMessage={() => <Status incident={incident} />}
       >
-        <DropdownControl
-          button={
-            // eslint-disable-next-line no-shadow
-            ({getActorProps, isOpen}) => (
-              <DropdownButton {...getActorProps()} isOpen={isOpen}>
-                <Status incident={incident} />
-              </DropdownButton>
-            )
-          }
-          menuWidth="160px"
-        >
+        <DropdownControl label={<Status incident={incident} />} menuWidth="160px">
           <StyledMenuItem onSelect={onStatusChange}>
             {isIncidentOpen ? t('Close this incident') : t('Reopen this incident')}
           </StyledMenuItem>
@@ -80,17 +69,17 @@ export default class DetailsHeader extends React.Component {
             </HeaderItem>
             <HeaderItem>
               <ItemTitle>{t('Event count')}</ItemTitle>
-              <ItemValue>{incident.eventCount}</ItemValue>
+              <ItemValue>{incident.totalEvents}</ItemValue>
             </HeaderItem>
             <HeaderItem>
               <ItemTitle>{t('Users affected')}</ItemTitle>
-              <ItemValue>{incident.usersAffected}</ItemValue>
+              <ItemValue>{incident.uniqueUsers}</ItemValue>
             </HeaderItem>
             <HeaderItem>
               <ItemTitle>{t('Notifications')}</ItemTitle>
               <ItemValue>
                 <SubscribeButton
-                  isSubscribed={incident.isSubscribed}
+                  isSubscribed={!!incident.isSubscribed}
                   onClick={onSubscriptionChange}
                 />
               </ItemValue>
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
index 2d61dbb160..9f435a1bde 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
@@ -1,18 +1,20 @@
-import React from 'react';
+import {omit} from 'lodash';
 import DocumentTitle from 'react-document-title';
+import React from 'react';
+import moment from 'moment';
 import styled from 'react-emotion';
-import {omit} from 'lodash';
 
+import {PageContent, PageHeader} from 'app/styles/organization';
+import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
-import Link from 'app/components/links/link';
+import BetaTag from 'app/components/betaTag';
 import Button from 'app/components/button';
+import Duration from 'app/components/duration';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
-import Pagination from 'app/components/pagination';
-import {PageContent, PageHeader} from 'app/styles/organization';
+import Link from 'app/components/links/link';
 import PageHeading from 'app/components/pageHeading';
-import BetaTag from 'app/components/betaTag';
+import Pagination from 'app/components/pagination';
 import space from 'app/styles/space';
 
 import Status from '../status';
@@ -35,6 +37,11 @@ class OrganizationIncidentsBody extends AsyncComponent {
 
   renderListItem(incident) {
     const {orgId} = this.props.params;
+    const duration = moment
+      .duration(
+        moment(incident.dateClosed || new Date()).diff(moment(incident.dateStarted))
+      )
+      .as('seconds');
 
     return (
       <PanelItem key={incident.id}>
@@ -43,9 +50,11 @@ class OrganizationIncidentsBody extends AsyncComponent {
             {incident.title}
           </Link>
           <Status incident={incident} />
-          <div>{incident.duration}</div>
-          <div>{incident.usersAffected}</div>
-          <div>{incident.eventCount}</div>
+          <div>
+            <Duration seconds={duration} />
+          </div>
+          <div>{incident.uniqueUsers}</div>
+          <div>{incident.totalEvents}</div>
         </TableLayout>
       </PanelItem>
     );
diff --git a/tests/js/fixtures/incident.js b/tests/js/fixtures/incident.js
index 0e2fe6ea57..bf32fc3a59 100644
--- a/tests/js/fixtures/incident.js
+++ b/tests/js/fixtures/incident.js
@@ -1,13 +1,12 @@
 export function Incident(params) {
   return {
-    id: '123',
-    identifier: '123',
+    id: '321',
+    identifier: 123,
     title: 'Too many Chrome errors',
     status: 0,
     projects: [],
-    suspects: [],
-    eventCount: 100,
-    usersAffected: 20,
+    totalEvents: 100,
+    uniqueUsers: 20,
     isSubscribed: true,
     ...params,
   };
diff --git a/tests/js/spec/views/organizationIncidents/list/index.spec.jsx b/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
index 52d8223ad8..f6d1c6e108 100644
--- a/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
@@ -13,8 +13,8 @@ describe('OrganizationIncidentsList', function() {
     mock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/',
       body: [
-        TestStubs.Incident({id: '1', identifier: '1', title: 'First incident'}),
-        TestStubs.Incident({id: '2', identifier: '1', title: 'Second incident'}),
+        TestStubs.Incident({id: '123', identifier: 1, title: 'First incident'}),
+        TestStubs.Incident({id: '342', identifier: 2, title: 'Second incident'}),
       ],
     });
   });
