commit ff1ddbca0cfe6cb748610b6287d318589b1413b8
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 1 12:43:44 2010 -0700

    Move JS calls into a single function call. You can now resolve errors (semi race condition display bug needs fixed).

diff --git a/sentry/media/scripts/global.js b/sentry/media/scripts/global.js
index fe766cd1ff..a982ed23bf 100644
--- a/sentry/media/scripts/global.js
+++ b/sentry/media/scripts/global.js
@@ -54,11 +54,29 @@ $.fn.setAllToMaxHeight = function(){
 	return this.height( Math.max.apply(this, $.map( this , function(e){ return $(e).height() }) ) );
 }
 
+function sentryResolve(gid){
+    $.ajax({
+        url: SENTRY_JS_API_URL,
+        type: 'post',
+        dataType: 'json',
+        data: {
+            op: 'resolve',
+            gid: gid,
+        },
+        success: function(groups){
+            for (var gid in groups) {
+                $('#group_' + gid).remove();
+            }
+        }
+    });
+}
 function sentryRefresh(){
     $.ajax({
-      url: './',
+      url: SENTRY_JS_API_URL,
+      type: 'get',
       dataType: 'json',
       data: {
+          op: 'poll',
           logger: '{{ logger }}',
           server_name: '{{ server_name }}',
           level: '{{ level }}'
diff --git a/sentry/media/styles/global.css b/sentry/media/styles/global.css
index d76dae9090..2ffc8243bc 100644
--- a/sentry/media/styles/global.css
+++ b/sentry/media/styles/global.css
@@ -226,12 +226,26 @@ dl.flat dd {
 .messages .hidden {
 	position: absolute;
 	right: 15px;
-	top: 0px;
+	top: 20px;
 	color: #fff;
-	font-size: 55px;
 }
 .messages li:hover .hidden {
-	color: #fff;
+	color: #000;
+	background: #ccc;
+	border-top: 1px solid #ddd;
+	border-left: 1px solid #ddd;
+	border-right: 1px solid #aaa;
+	border-bottom: 1px solid #aaa;
+	padding: 5px;
+	text-decoration: none;
+	-webkit-border-radius: 3px;
+	-moz-border-radius: 3px;
+	border-radius: 3px;
+}
+.messages li:hover .hidden:hover {
+	border-top: 1px solid #eee;
+	border-left: 1px solid #eee;
+    background-color: #ddd;
 }
 .priority-veryhigh .count {
 	background: #e22e2e;
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index c3931e494d..f2511e2982 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -7,6 +7,9 @@
 		<meta http-equiv="content-type" content="text/html; charset=utf-8"> 
 		<meta name="robots" content="NONE,NOARCHIVE">
 		<title>{% block title %}Django Sentry{% endblock %}</title> 
+		<script type="text/javascript">
+		SENTRY_JS_API_URL = '{% url sentry-ajax %}';
+		</script>
 		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
 		<script type="text/javascript" src="{% url sentry-media "scripts/jquery.animate-colors-min.js" %}"></script>		
 		<script type="text/javascript" src="{% url sentry-media "scripts/global.js" %}"></script>		
diff --git a/sentry/templates/sentry/partial/_group.html b/sentry/templates/sentry/partial/_group.html
index 2028b58e26..65d242fce1 100644
--- a/sentry/templates/sentry/partial/_group.html
+++ b/sentry/templates/sentry/partial/_group.html
@@ -6,5 +6,5 @@
 	<span class="last_seen">{{ group.last_seen|timesince }} ago</span>
 	<p class="message"><span class="tag tag-level">{{ group.get_level_display }}</span> {{ group.error }}</p>
 	<pre class="traceback">{{ group.shortened_traceback }}</pre>
-	<span class="hidden">&raquo;</span>
+	<a href="javascript:void(0)" onclick="sentryResolve({{ group.pk }});" class="hidden">Resolve</a>
 </li>
\ No newline at end of file
diff --git a/sentry/urls.py b/sentry/urls.py
index 9faddd4213..f321741b65 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -16,6 +16,7 @@ urlpatterns = patterns('',
     url(r'^feeds/%s/summaries.xml$' % hashed_secret, SummaryFeed(), name='sentry-feed-summaries'),
     url(r'^group/(\d+)$', views.group, name='sentry-group'),
     url(r'^$', views.index, name='sentry'),
+    url(r'^jsapi/$', views.ajax_handler, name='sentry-ajax'),
     url(r'^_media/(?P<path>.*)$', 'django.views.static.serve',
         {'document_root': os.path.join(SENTRY_ROOT, 'media')}, name='sentry-media'),
 )
diff --git a/sentry/views.py b/sentry/views.py
index 836fddccd7..f5589c8271 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -1,6 +1,6 @@
 # TODO: login
 from django.db.models import Count
-from django.http import HttpResponse
+from django.http import HttpResponse, HttpResponseForbidden
 from django.shortcuts import render_to_response
 from django.template.loader import render_to_string
 from django.utils import simplejson
@@ -24,8 +24,13 @@ def index(request):
     logger = request.GET.get('logger')
     server_name = request.GET.get('server_name') or ''
     level = request.GET.get('level') or ''
+    
+    try:
+        page = int(request.GET.get('p', 1))
+    except (TypeError, ValueError):
+        page = 1
 
-    realtime = not (request.GET.get('p') > 1)
+    realtime = page == 1
 
     if logger not in logger_names:
         logger = ''
@@ -65,18 +70,6 @@ def index(request):
         message_list = message_list.filter(message_set__server_name=server_name).distinct()
         chart_qs = chart_qs.filter(server_name=server_name)
 
-    if request.is_ajax():
-        # Returns the first page's worth of groups
-        data = simplejson.dumps([
-            (m.pk, {
-                'html': render_to_string('sentry/partial/_group.html', {'group': m, 'priority': p}),
-                'count': m.times_seen,
-                'priority': p,
-            }) for m, p in with_priority(message_list[0:15])])
-        response = HttpResponse(data)
-        response['Content-Type'] = 'application/json'
-        return response
-
     rows = dict(chart_qs)
     if rows:
         max_y = max(rows.values())
@@ -95,6 +88,63 @@ def index(request):
 
     return render_to_response('sentry/index.html', locals())
 
+def ajax_handler(request):
+    op = request.REQUEST.get('op')
+    if op == 'poll':
+        logger_names = SortedDict((l, l) for l in GroupedMessage.objects.values_list('logger', flat=True).distinct())
+        server_names = SortedDict((l, l) for l in Message.objects.values_list('server_name', flat=True).distinct())
+        level_names = SortedDict((str(k), v) for k, v in LOG_LEVELS)
+
+        logger = request.GET.get('logger')
+        server_name = request.GET.get('server_name') or ''
+        level = request.GET.get('level') or ''
+
+        realtime = not (request.GET.get('p') > 1)
+
+        if logger not in logger_names:
+            logger = ''
+
+        if server_name not in server_names:
+            server_name = ''
+
+        if level not in level_names:
+            level = ''
+        
+        message_list = GroupedMessage.objects.filter(
+            status=0,
+        ).extra(
+            select={
+                'score': 'times_seen / (pow((floor(extract(epoch from now() - last_seen) / 3600) + 2), 1.25) + 1)',
+            }
+        ).order_by('-score', '-last_seen')
+
+        if logger:
+            message_list = message_list.filter(logger=logger)
+
+        if level:
+            message_list = message_list.filter(level=level)
+
+        if server_name:
+            message_list = message_list.filter(message_set__server_name=server_name).distinct()
+        
+        data = [
+            (m.pk, {
+                'html': render_to_string('sentry/partial/_group.html', {'group': m, 'priority': p}),
+                'count': m.times_seen,
+                'priority': p,
+            }) for m, p in with_priority(message_list[0:15])]
+
+    elif op == 'resolve':
+        gid = request.POST.get('gid')
+        if not gid:
+            return HttpResponseForbidden()
+        GroupedMessage.objects.filter(pk=gid).update(status=1)
+        data = {gid: 1}
+        
+    response = HttpResponse(simplejson.dumps(data))
+    response['Content-Type'] = 'application/json'
+    return response
+
 def group(request, group_id):
     group = GroupedMessage.objects.get(pk=group_id)
 
