commit f7c762d8d821268d7e16257b38cc4e35e5c01fbd
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Sep 20 10:35:21 2018 -0700

    feat(discover): Add ability to create saved query (#9805)

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 6e17a72006..a0e521f9ea 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -129,13 +129,6 @@ class OrganizationAuthProviderPermission(OrganizationPermission):
     }
 
 
-class OrganizationDiscoverPermission(OrganizationPermission):
-    scope_map = {
-        'GET': ['org:read', 'project:read'],
-        'POST': ['org:read', 'project:read'],
-    }
-
-
 class OrganizationEndpoint(Endpoint):
     permission_classes = (OrganizationPermission, )
 
diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index 9983ff4d53..f3fb5f2f00 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -13,7 +13,7 @@ from sentry.utils.dates import (
 )
 
 from sentry.api.serializers.rest_framework import ListField
-from sentry.api.bases.organization import OrganizationDiscoverPermission
+from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
 from sentry.models import Project, ProjectStatus, OrganizationMember, OrganizationMemberTeam
 from sentry.utils import snuba
@@ -21,6 +21,12 @@ from sentry import roles
 from sentry import features
 
 
+class OrganizationDiscoverQueryPermission(OrganizationPermission):
+    scope_map = {
+        'POST': ['org:read', 'project:read'],
+    }
+
+
 class DiscoverQuerySerializer(serializers.Serializer):
     projects = ListField(
         child=serializers.IntegerField(),
@@ -164,7 +170,7 @@ class DiscoverQuerySerializer(serializers.Serializer):
 
 
 class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
-    permission_classes = (OrganizationDiscoverPermission, )
+    permission_classes = (OrganizationDiscoverQueryPermission, )
 
     def do_query(self, start, end, groupby, **kwargs):
 
diff --git a/src/sentry/api/endpoints/organization_discover_saved_queries.py b/src/sentry/api/endpoints/organization_discover_saved_queries.py
index 87875cb607..65949d904e 100644
--- a/src/sentry/api/endpoints/organization_discover_saved_queries.py
+++ b/src/sentry/api/endpoints/organization_discover_saved_queries.py
@@ -1,17 +1,81 @@
 from __future__ import absolute_import
 
-from sentry.api.bases.organization import OrganizationDiscoverPermission
-from sentry.api.bases import OrganizationEndpoint
-from sentry.models import DiscoverSavedQuery
+from rest_framework import serializers
+from rest_framework.response import Response
 
 from sentry.api.serializers import serialize
-from rest_framework.response import Response
+from sentry.api.serializers.rest_framework import ListField
+
+
+from sentry.api.bases.organization import OrganizationPermission
+from sentry.api.bases import OrganizationEndpoint
+from sentry.models import DiscoverSavedQuery
 
 from sentry import features
 
 
+class DiscoverSavedQueriesSerializer(serializers.Serializer):
+    name = serializers.CharField(required=True)
+    projects = ListField(
+        child=serializers.IntegerField(),
+        required=False,
+        allow_null=True,
+        default=[]
+    )
+    start = serializers.DateTimeField(required=False)
+    end = serializers.DateTimeField(required=False)
+    range = serializers.CharField(required=False)
+    fields = ListField(
+        child=serializers.CharField(),
+        required=False,
+        allow_null=True,
+    )
+    limit = serializers.IntegerField(min_value=0, max_value=1000, required=False)
+    rollup = serializers.IntegerField(required=False)
+    orderby = serializers.CharField(required=False)
+    conditions = ListField(
+        child=ListField(),
+        required=False,
+        allow_null=True,
+    )
+    aggregations = ListField(
+        child=ListField(),
+        required=False,
+        allow_null=True,
+        default=[]
+    )
+    groupby = ListField(
+        child=serializers.CharField(),
+        required=False,
+        allow_null=True,
+    )
+
+    def validate(self, data):
+        query = {}
+        query_keys = [
+            'fields',
+            'conditions',
+            'aggregations',
+            'range',
+            'start',
+            'end',
+            'orderby',
+            'limit'
+        ]
+
+        for key in query_keys:
+            if data.get(key) is not None:
+                query[key] = data[key]
+
+        return {
+            'name': data['name'],
+            'project_ids': data['projects'],
+            'query': query,
+        }
+
+
 class OrganizationDiscoverSavedQueriesEndpoint(OrganizationEndpoint):
-    permission_classes = (OrganizationDiscoverPermission, )
+    permission_classes = (OrganizationPermission, )
 
     def get(self, request, organization):
         """
@@ -20,10 +84,32 @@ class OrganizationDiscoverSavedQueriesEndpoint(OrganizationEndpoint):
         if not features.has('organizations:discover', organization, actor=request.user):
             return self.respond(status=404)
 
-        saved_queries = list(
-            DiscoverSavedQuery.objects.filter(
-                organization=organization,
-            ).order_by('name')
-        )
+        saved_queries = list(DiscoverSavedQuery.objects.filter(
+            organization=organization,
+        ).all().prefetch_related('projects').order_by('name'))
 
         return Response(serialize(saved_queries), status=200)
+
+    def post(self, request, organization):
+        """
+        Create a saved query
+        """
+        if not features.has('organizations:discover', organization, actor=request.user):
+            return self.respond(status=404)
+
+        serializer = DiscoverSavedQueriesSerializer(data=request.DATA)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        data = serializer.object
+
+        model = DiscoverSavedQuery.objects.create(
+            organization=organization,
+            name=data['name'],
+            query=data['query'],
+        )
+
+        model.add_projects(data['project_ids'])
+
+        return Response(serialize(model), status=201)
diff --git a/src/sentry/api/serializers/models/discoversavedquery.py b/src/sentry/api/serializers/models/discoversavedquery.py
index a3145fee84..07f7d7622e 100644
--- a/src/sentry/api/serializers/models/discoversavedquery.py
+++ b/src/sentry/api/serializers/models/discoversavedquery.py
@@ -8,10 +8,28 @@ from sentry.models import DiscoverSavedQuery
 @register(DiscoverSavedQuery)
 class DiscoverSavedQuerySerializer(Serializer):
     def serialize(self, obj, attrs, user, *args, **kwargs):
-        return {
+
+        query_keys = [
+            'fields',
+            'conditions',
+            'aggregations',
+            'range',
+            'start',
+            'end',
+            'orderby',
+            'limit'
+        ]
+
+        data = {
             'id': six.text_type(obj.id),
             'name': obj.name,
-            'query': obj.query,
+            'projects': [project.id for project in obj.projects.all()],
             'dateCreated': obj.date_created,
             'dateUpdated': obj.date_updated,
         }
+
+        for key in query_keys:
+            if obj.query.get(key) is not None:
+                data[key] = obj.query[key]
+
+        return data
diff --git a/tests/snuba/test_organization_discover_saved_queries.py b/tests/snuba/test_organization_discover_saved_queries.py
index 2dd49cbbc3..0f85eef076 100644
--- a/tests/snuba/test_organization_discover_saved_queries.py
+++ b/tests/snuba/test_organization_discover_saved_queries.py
@@ -10,10 +10,9 @@ from sentry.models import DiscoverSavedQuery
 class OrganizationDiscoverSavedQueriesTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationDiscoverSavedQueriesTest, self).setUp()
-
         self.login_as(user=self.user)
         self.org = self.create_organization(owner=self.user)
-        project_ids = [
+        self.project_ids = [
             self.create_project(organization=self.org).id,
             self.create_project(organization=self.org).id
         ]
@@ -26,7 +25,7 @@ class OrganizationDiscoverSavedQueriesTest(APITestCase, SnubaTestCase):
         model = DiscoverSavedQuery.objects.create(
             organization=self.org, name="Test query", query=query)
 
-        model.add_projects(project_ids)
+        model.add_projects(self.project_ids)
 
     def test_get(self):
         with self.feature('organizations:discover'):
@@ -36,3 +35,28 @@ class OrganizationDiscoverSavedQueriesTest(APITestCase, SnubaTestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert response.data[0]['name'] == 'Test query'
+        assert response.data[0]['projects'] == self.project_ids
+        assert response.data[0]['fields'] == ['test']
+        assert response.data[0]['conditions'] == []
+        assert response.data[0]['limit'] == 10
+
+    def test_post(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-saved-queries', args=[self.org.slug])
+            response = self.client.post(url, {
+                'name': 'New query',
+                'projects': self.project_ids,
+                'fields': [],
+                'range': '24h',
+                'limit': 20,
+                'conditions': [],
+                'aggregations': [],
+                'orderby': '-time',
+            })
+
+        assert response.status_code == 201, response.content
+        assert response.data['name'] == 'New query'
+        assert response.data['projects'] == self.project_ids
+        assert response.data['range'] == '24h'
+        assert not hasattr(response.data, 'start')
+        assert not hasattr(response.data, 'end')
