commit d9400b6dbb5bb043cb46dc435fc0a218402cbf15
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 18 15:14:16 2016 -0700

    [plugins] support multiple identities
    
    This allows the same identity to be associated with multiple accounts in Sentry.

diff --git a/src/social_auth/backends/pipeline/social.py b/src/social_auth/backends/pipeline/social.py
index eee81cf7bc..74a18b81bb 100644
--- a/src/social_auth/backends/pipeline/social.py
+++ b/src/social_auth/backends/pipeline/social.py
@@ -1,31 +1,20 @@
 from __future__ import absolute_import
 
 from django.db import IntegrityError
-from django.utils.translation import ugettext
 
 from social_auth.models import UserSocialAuth
-from social_auth.exceptions import AuthAlreadyAssociated
 
 
-def social_auth_user(backend, uid, user=None, *args, **kwargs):
-    """Return UserSocialAuth account for backend/uid pair or None if it
-    doesn't exists.
-
-    Raise AuthAlreadyAssociated if UserSocialAuth entry belongs to another
-    user.
+def social_auth_user(backend, uid, user, *args, **kwargs):
     """
-    social_user = UserSocialAuth.get_social_auth(backend.name, uid)
-    if social_user:
-        if user and social_user.user != user:
-            msg = ugettext('This %(provider)s account is already in use.')
-            raise AuthAlreadyAssociated(backend, msg % {
-                'provider': backend.name
-            })
-        elif not user:
-            user = social_user.user
-    return {'social_user': social_user,
-            'user': user,
-            'new_association': False}
+    Return UserSocialAuth details.
+    """
+    social_user = UserSocialAuth.get_social_auth(backend.name, uid, user)
+    return {
+        'social_user': social_user,
+        'user': user,
+        'new_association': False
+    }
 
 
 def associate_user(backend, user, uid, social_user=None, *args, **kwargs):
@@ -53,7 +42,7 @@ def load_extra_data(backend, details, response, uid, user, social_user=None,
     extra_data field.
     """
     social_user = (social_user or
-                   UserSocialAuth.get_social_auth(backend.name, uid))
+                   UserSocialAuth.get_social_auth(backend.name, uid, user))
     if social_user:
         extra_data = backend.extra_data(user, uid, response, details)
         if kwargs.get('original_email') and 'email' not in extra_data:
diff --git a/src/social_auth/exceptions.py b/src/social_auth/exceptions.py
index 08b9f0501f..57324d5adf 100644
--- a/src/social_auth/exceptions.py
+++ b/src/social_auth/exceptions.py
@@ -89,11 +89,6 @@ class AuthStateForbidden(AuthException):
         return ugettext(u'Wrong state parameter given.')
 
 
-class AuthAlreadyAssociated(AuthException):
-    """A different user has already associated the target social account"""
-    pass
-
-
 class AuthTokenRevoked(AuthException):
     """User revoked the access_token in the provider."""
     def __unicode__(self):
diff --git a/src/social_auth/models.py b/src/social_auth/models.py
index 428c97f0d9..70aef14754 100644
--- a/src/social_auth/models.py
+++ b/src/social_auth/models.py
@@ -38,7 +38,7 @@ class UserSocialAuth(models.Model):
 
     class Meta:
         """Meta data"""
-        unique_together = ('provider', 'uid')
+        unique_together = ('provider', 'uid', 'user')
         app_label = 'social_auth'
 
     def __unicode__(self):
@@ -181,10 +181,15 @@ class UserSocialAuth(models.Model):
         return cls.objects.create(user=user, uid=uid, provider=provider)
 
     @classmethod
-    def get_social_auth(cls, provider, uid):
+    def get_social_auth(cls, provider, uid, user):
         try:
-            return cls.objects.select_related('user').get(provider=provider,
-                                                          uid=uid)
+            instance = cls.objects.get(
+                provider=provider,
+                uid=uid,
+                user=user,
+            )
+            instance.user = user
+            return instance
         except UserSocialAuth.DoesNotExist:
             return None
 
diff --git a/src/social_auth/south_migrations/0003_auto__del_nonce__del_unique_nonce_server_url_timestamp_salt__del_assoc.py b/src/social_auth/south_migrations/0003_auto__del_nonce__del_unique_nonce_server_url_timestamp_salt__del_assoc.py
new file mode 100644
index 0000000000..bb6719c45f
--- /dev/null
+++ b/src/social_auth/south_migrations/0003_auto__del_nonce__del_unique_nonce_server_url_timestamp_salt__del_assoc.py
@@ -0,0 +1,80 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Removing unique constraint on 'Association', fields ['server_url', 'handle']
+        db.delete_unique(u'social_auth_association', ['server_url', 'handle'])
+
+        # Removing unique constraint on 'Nonce', fields ['server_url', 'timestamp', 'salt']
+        db.delete_unique(u'social_auth_nonce', ['server_url', 'timestamp', 'salt'])
+
+        # Deleting model 'Nonce'
+        db.delete_table(u'social_auth_nonce')
+
+        # Deleting model 'Association'
+        db.delete_table(u'social_auth_association')
+
+
+    def backwards(self, orm):
+        # Adding model 'Nonce'
+        db.create_table(u'social_auth_nonce', (
+            ('timestamp', self.gf('django.db.models.fields.IntegerField')(db_index=True)),
+            ('salt', self.gf('django.db.models.fields.CharField')(max_length=40)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('server_url', self.gf('django.db.models.fields.CharField')(max_length=255)),
+        ))
+        db.send_create_signal('social_auth', ['Nonce'])
+
+        # Adding unique constraint on 'Nonce', fields ['server_url', 'timestamp', 'salt']
+        db.create_unique(u'social_auth_nonce', ['server_url', 'timestamp', 'salt'])
+
+        # Adding model 'Association'
+        db.create_table(u'social_auth_association', (
+            ('secret', self.gf('django.db.models.fields.CharField')(max_length=255)),
+            ('handle', self.gf('django.db.models.fields.CharField')(max_length=255)),
+            ('lifetime', self.gf('django.db.models.fields.IntegerField')()),
+            ('issued', self.gf('django.db.models.fields.IntegerField')(db_index=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('assoc_type', self.gf('django.db.models.fields.CharField')(max_length=64)),
+            ('server_url', self.gf('django.db.models.fields.CharField')(max_length=255)),
+        ))
+        db.send_create_signal('social_auth', ['Association'])
+
+        # Adding unique constraint on 'Association', fields ['server_url', 'handle']
+        db.create_unique(u'social_auth_association', ['server_url', 'handle'])
+
+
+    models = {
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_password_expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_password_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'social_auth.usersocialauth': {
+            'Meta': {'unique_together': "(('provider', 'uid'),)", 'object_name': 'UserSocialAuth'},
+            'extra_data': ('social_auth.fields.JSONField', [], {'default': "'{}'"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'uid': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'social_auth'", 'to': "orm['sentry.User']"})
+        }
+    }
+
+    complete_apps = ['social_auth']
\ No newline at end of file
diff --git a/src/social_auth/south_migrations/0004_auto__del_unique_usersocialauth_provider_uid__add_unique_usersocialaut.py b/src/social_auth/south_migrations/0004_auto__del_unique_usersocialauth_provider_uid__add_unique_usersocialaut.py
new file mode 100644
index 0000000000..d17ac51205
--- /dev/null
+++ b/src/social_auth/south_migrations/0004_auto__del_unique_usersocialauth_provider_uid__add_unique_usersocialaut.py
@@ -0,0 +1,53 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Removing unique constraint on 'UserSocialAuth', fields ['provider', 'uid']
+        db.delete_unique(u'social_auth_usersocialauth', ['provider', 'uid'])
+
+        # Adding unique constraint on 'UserSocialAuth', fields ['provider', 'uid', 'user']
+        db.create_unique(u'social_auth_usersocialauth', ['provider', 'uid', 'user_id'])
+
+
+    def backwards(self, orm):
+        # Removing unique constraint on 'UserSocialAuth', fields ['provider', 'uid', 'user']
+        db.delete_unique(u'social_auth_usersocialauth', ['provider', 'uid', 'user_id'])
+
+        # Adding unique constraint on 'UserSocialAuth', fields ['provider', 'uid']
+        db.create_unique(u'social_auth_usersocialauth', ['provider', 'uid'])
+
+
+    models = {
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_password_expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_password_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'social_auth.usersocialauth': {
+            'Meta': {'unique_together': "(('provider', 'uid', 'user'),)", 'object_name': 'UserSocialAuth'},
+            'extra_data': ('social_auth.fields.JSONField', [], {'default': "'{}'"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'uid': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'social_auth'", 'to': "orm['sentry.User']"})
+        }
+    }
+
+    complete_apps = ['social_auth']
\ No newline at end of file
diff --git a/src/social_auth/views.py b/src/social_auth/views.py
index 3bd9cb1c31..a1930d7baa 100644
--- a/src/social_auth/views.py
+++ b/src/social_auth/views.py
@@ -17,7 +17,7 @@ from django.contrib.auth.decorators import login_required
 from django.contrib import messages
 from django.views.decorators.csrf import csrf_exempt
 
-from social_auth.exceptions import AuthAlreadyAssociated, AuthException
+from social_auth.exceptions import AuthException
 from social_auth.utils import (
     setting, backend_setting, clean_partial_pipeline)
 from social_auth.decorators import dsa_view
@@ -72,14 +72,6 @@ def complete(request, backend, *args, **kwargs):
 
     try:
         user = auth_complete(request, backend, request.user, *args, **kwargs)
-    except AuthAlreadyAssociated:
-        messages.add_message(
-            request, messages.ERROR,
-            'This {} identity is already associated with another account.'.format(
-                settings.AUTH_PROVIDER_LABELS.get(backend_name, backend_name),
-            )
-        )
-        user = None
     except AuthException as exc:
         messages.add_message(
             request, messages.ERROR,
