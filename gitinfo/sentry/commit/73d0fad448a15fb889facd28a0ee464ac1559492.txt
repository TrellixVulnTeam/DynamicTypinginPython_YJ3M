commit 73d0fad448a15fb889facd28a0ee464ac1559492
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jan 7 01:50:05 2012 -0800

    Initial code for toggling bookmarks and a refactor of the API views

diff --git a/bootstrap/lib/sentry.less b/bootstrap/lib/sentry.less
index 0f68838b7d..9c4352388c 100644
--- a/bootstrap/lib/sentry.less
+++ b/bootstrap/lib/sentry.less
@@ -217,3 +217,39 @@ td table.vars {
     height: 120px;
   }
 }
+
+.messages {
+  list-style: none;
+  margin-left: 0;
+  > li {
+    list-style: none;
+    clear: both;
+    padding: 8px;
+    position: relative;
+    padding-right: 50px;
+    overflow: hidden;
+    ul.actions {
+      list-style: none;
+      margin: 0;
+      padding: 0;
+      position: absolute;
+      right: 8px;
+      top: 8px;
+      list-style-type: none;
+      visibility: hidden;
+      > li {
+        margin-bottom: 6px;
+        .btn {
+          padding: 5px 7px 5px;
+          width: 8px;
+          text-align: center;
+        }
+      }
+    }
+    &:hover {
+      .actions {
+        visibility: visible;
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/sentry/static/scripts/global.js b/sentry/static/scripts/global.js
index 1e0841b810..8fe3959860 100644
--- a/sentry/static/scripts/global.js
+++ b/sentry/static/scripts/global.js
@@ -28,7 +28,7 @@ if (Sentry === undefined) {
 
     Sentry.options = {
         mediaUrl: '/media/',
-        apiUrl: '/api/',
+        urlMap: {},
         defaultImage: '/media/images/sentry.png'
     };
 
@@ -42,12 +42,9 @@ if (Sentry === undefined) {
     Sentry.stream.clear = function() {
         if (confirm("Are you sure you want to mark all your stream as resolved?")) {
             $.ajax({
-                url: Sentry.options.apiUrl,
+                url: Sentry.options.urlMap.clear,
                 type: 'post',
                 dataType: 'json',
-                data: {
-                    op: 'clear'
-                },
                 success: function(groups){
                     window.location.reload();
                 }
@@ -59,11 +56,10 @@ if (Sentry === undefined) {
             remove = true;
         }
         $.ajax({
-            url: Sentry.options.apiUrl,
+            url: Sentry.options.urlMap.resolve,
             type: 'post',
             dataType: 'json',
             data: {
-                op: 'resolve',
                 gid: gid
             },
             success: function(groups){
@@ -79,6 +75,19 @@ if (Sentry === undefined) {
             }
         });
     };
+    Sentry.stream.bookmark = function(gid){
+        $.ajax({
+            url: Sentry.options.urlMap.bookmark,
+            type: 'post',
+            dataType: 'json',
+            data: {
+                gid: gid
+            },
+            success: function(data){
+                var is_bookmarked = data.bookmarked;
+            }
+        });
+    };
 
     Sentry.realtime = {};
     Sentry.realtime.options = {
@@ -114,9 +123,8 @@ if (Sentry === undefined) {
         }
         data = getQueryParams();
         data.view_id = Sentry.realtime.options.viewId || undefined;
-        data.op = 'poll';
         $.ajax({
-            url: Sentry.options.apiUrl,
+            url: Sentry.options.urlMap.poll,
             type: 'get',
             dataType: 'json',
             data: data,
@@ -127,8 +135,7 @@ if (Sentry === undefined) {
                 for (var i=groups.length-1, el, row; (el=groups[i]); i--) {
                     var id = el[0];
                     var data = el[1];
-                    var url = Sentry.options.apiUrl + '?' + $.param({
-                        op: 'notification',
+                    var url = Sentry.options.urlMap.notification + '?' + $.param({
                         count: data.count,
                         title: data.title,
                         message: data.message,
diff --git a/sentry/static/styles/bootstrap.css b/sentry/static/styles/bootstrap.css
index da5905d9d8..0d9b0bcc42 100644
--- a/sentry/static/styles/bootstrap.css
+++ b/sentry/static/styles/bootstrap.css
@@ -6,7 +6,7 @@
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Designed and built with all the love in the world @twitter by @mdo and @fat.
- * Date: Fri Jan  6 03:20:02 PST 2012
+ * Date: Sat Jan  7 01:49:48 PST 2012
  */
 /* Reset.less
  * Props to Eric Meyer (meyerweb.com) for his CSS reset file. We're using an adapted version here	that cuts out some of the reset HTML elements we will never need here (i.e., dfn, samp, etc).
@@ -2749,3 +2749,36 @@ td table.vars {
 .sparkline-grid .sparkline {
   height: 120px;
 }
+.messages {
+  list-style: none;
+  margin-left: 0;
+}
+.messages > li {
+  list-style: none;
+  clear: both;
+  padding: 8px;
+  position: relative;
+  padding-right: 50px;
+  overflow: hidden;
+}
+.messages > li ul.actions {
+  list-style: none;
+  margin: 0;
+  padding: 0;
+  position: absolute;
+  right: 8px;
+  top: 8px;
+  list-style-type: none;
+  visibility: hidden;
+}
+.messages > li ul.actions > li {
+  margin-bottom: 6px;
+}
+.messages > li ul.actions > li .btn {
+  padding: 5px 7px 5px;
+  width: 8px;
+  text-align: center;
+}
+.messages > li:hover .actions {
+  visibility: visible;
+}
diff --git a/sentry/static/styles/bootstrap.min.css b/sentry/static/styles/bootstrap.min.css
index 8d311e599d..8a98dbb06f 100644
--- a/sentry/static/styles/bootstrap.min.css
+++ b/sentry/static/styles/bootstrap.min.css
@@ -395,3 +395,5 @@ td table.vars{margin-bottom:0;}
 .sparkline-grid a:hover{border-color:#0069d6;-webkit-box-shadow:0 1px 4px rgba(0, 105, 214, 0.25);-moz-box-shadow:0 1px 4px rgba(0, 105, 214, 0.25);box-shadow:0 1px 4px rgba(0, 105, 214, 0.25);}
 .sparkline-grid a{width:250px;height:160px;display:inline-block;text-align:center;}
 .sparkline-grid .sparkline{height:120px;}
+.messages{list-style:none;margin-left:0;}.messages>li{list-style:none;clear:both;padding:8px;position:relative;padding-right:50px;overflow:hidden;}.messages>li ul.actions{list-style:none;margin:0;padding:0;position:absolute;right:8px;top:8px;list-style-type:none;visibility:hidden;}.messages>li ul.actions>li{margin-bottom:6px;}.messages>li ul.actions>li .btn{padding:5px 7px 5px;width:8px;text-align:center;}
+.messages>li:hover .actions{visibility:visible;}
diff --git a/sentry/static/styles/global.css b/sentry/static/styles/global.css
index a29245da9a..24c65e56d8 100644
--- a/sentry/static/styles/global.css
+++ b/sentry/static/styles/global.css
@@ -227,8 +227,6 @@ dl.flat dd {
 }
 
 /* message list */
-.messages { list-style: none; margin-left: 0; }
-.messages li { list-style: none; }
 .messages .no-messages {
     font-weight: bold;
 }
@@ -265,16 +263,6 @@ dl.flat dd {
 
 .messages .tag { display: inline-block; padding: 2px 5px; background: #F5F5F5; -moz-border-radius: 4px; border-radius: 4px; margin-right: 5px;}
 .messages .traceback { display: none; }
-.messages li { clear: both; padding: 8px; position: relative; padding-right: 50px; overflow: hidden; }
-.messages .hidden {
-    position: absolute;
-    right: 15px;
-    top: 21px;
-    visibility: hidden;
-}
-.messages li:hover .hidden {
-    visibility: visible;
-}
 
 .messages .row_link {
     top: 0;
@@ -312,33 +300,6 @@ dl.flat dd {
 .messages .active .last_seen,
 .messages li:hover .time_spent,
 .messages .active .time_spent { color: #777; }
-
-.button {
-    cursor: pointer;
-    display: inline-block;
-    color: #888;
-    padding: 5px 8px 5px 8px;
-    font-size: 12px;
-    line-height: 12px;
-    border:1px solid #C5C5C5;
-    text-decoration: none;
-    -webkit-border-radius: 5px;
-    -moz-border-radius: 5px;
-    border-radius: 5px;
-    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#FFF', endColorstr='#DCDCDC'); /* for IE */
-    background: -webkit-gradient(linear, left top, left bottom, from(#FFF), to(#DCDCDC)); /* for webkit browsers */
-    background:-moz-linear-gradient(center top , #FFFFFF 0pt, #DCDCDC 100%) repeat scroll 0 0 transparent;
-}
-
-.button:hover {
-    border:1px solid #3079d0;
-    color: #fff;
-    text-shadow: 0 -1px 0 #3079d0;
-    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#4da2e5', endColorstr='#3079d0'); /* for IE */
-    background: -webkit-gradient(linear, left top, left bottom, from(#4da2e5), to(#3079d0)); /* for webkit browsers */
-    background: -moz-linear-gradient(top,  #4da2e5,  #3079d0); /* for firefox 3.6+ */
-
-}
 .priority-veryhigh .count {
     background: #e22e2e;
     -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.2);
diff --git a/sentry/templates/sentry/dashboard.html b/sentry/templates/sentry/dashboard.html
index e188835a0d..0f52a19da7 100644
--- a/sentry/templates/sentry/dashboard.html
+++ b/sentry/templates/sentry/dashboard.html
@@ -15,7 +15,7 @@
                     <li>
                         <a href="{% url sentry project.pk %}">
                             <h3>{{ project.name }}</h3>
-                            <div class="sparkline" data-project="{{ project.pk }}" data-api-url="{% url sentry-ajax project.pk %}"></div>
+                            <div class="sparkline" data-project="{{ project.pk }}"></div>
                         </a>
                     </li>
                 {% endfor %}
diff --git a/sentry/templates/sentry/groups/details.html b/sentry/templates/sentry/groups/details.html
index 629f4c020d..8d41305ff1 100644
--- a/sentry/templates/sentry/groups/details.html
+++ b/sentry/templates/sentry/groups/details.html
@@ -5,15 +5,6 @@
 
 {% block title %}{{ group.error }} | {{ block.super }}{% endblock %}
 
-{% block meta %}
-    {{ block.super }}
-    <script>
-    Sentry.config({
-        apiUrl: '{% url sentry-ajax project.id %}'
-    });
-    </script>
-{% endblock %}
-
 {% block heading %}
     {% trans "Event Details" %} <small>{{ group.error }}</small>
 {% endblock %}
@@ -82,7 +73,7 @@
             <ul class="dropdown-menu">
                 {# We're going to move these to the resolve action location #}
                 {% if group.status == 0 %}
-                    <li><a href="{% url sentry-ajax group.project_id %}?op=resolve&amp;gid={{ group.pk|safe }}">{% trans "&#10003; Mark as Resolved" %}</a></li>
+                    <li><a href="javascript:void(0)">{% trans "&#10003; Mark as Resolved" %}</a></li>
                 {% else %}
                     <li class="disabled"><a>{% trans "&#10003; Already Resolved" %}</a></li>
                 {% endif %}
diff --git a/sentry/templates/sentry/groups/group_list.html b/sentry/templates/sentry/groups/group_list.html
index 3131b03ea2..2a9030da84 100644
--- a/sentry/templates/sentry/groups/group_list.html
+++ b/sentry/templates/sentry/groups/group_list.html
@@ -6,9 +6,6 @@
 {% block meta %}
     {{ block.super }}
     <script>
-    Sentry.config({
-        apiUrl: '{% url sentry-ajax project.id %}',
-    });
     {% if has_realtime %}
         Sentry.realtime.config({
             projectId: {{ project.pk }},
@@ -93,7 +90,7 @@
             </ul>
         </li>
         <li class="pull-right">
-            <a href="{% url sentry-ajax project.pk %}?op=clear" onclick="Sentry.stream.clear();return false;">{% trans "Resolve Feed" %}</a>
+            <a href="javascript:void(0)" onclick="Sentry.stream.clear();">{% trans "Resolve Feed" %}</a>
         </li>
         <li class="pull-right">
             <a href="javascript:void(0)" id="sentry_realtime" class="realtime-play" onclick="Sentry.realtime.pause();">{% trans "Pause Feed" %}</a>
diff --git a/sentry/templates/sentry/layout.html b/sentry/templates/sentry/layout.html
index b759ff33db..6d75c9b406 100644
--- a/sentry/templates/sentry/layout.html
+++ b/sentry/templates/sentry/layout.html
@@ -34,7 +34,19 @@
             mediaUrl: '{% url sentry-media '' %}',
             defaultImage: '{% url sentry-media 'images/sentry.png' %}'
         });
-        </script>
+        {% if project %}
+        Sentry.config({
+            urlMap: {
+                notification: '{% url sentry-api-notification project.pk %}',
+                resolve: '{% url sentry-api-resolve project.pk %}',
+                clear: '{% url sentry-api-clear project.pk %}',
+                poll: '{% url sentry-api-poll project.pk %}',
+                bookmark: '{% url sentry-api-bookmark project.pk %}',
+                chart: '{% url sentry-api-chart project.pk %}',
+            }
+        });
+        {% endif %}
+            </script>
 
         {% block meta %}
         {% endblock %}
diff --git a/sentry/templates/sentry/partial/_group.html b/sentry/templates/sentry/partial/_group.html
index ed15221f4e..d23f500ecf 100644
--- a/sentry/templates/sentry/partial/_group.html
+++ b/sentry/templates/sentry/partial/_group.html
@@ -20,7 +20,14 @@
         {{ group.error }}
     </p>
     <a href="{% url sentry-group group.project_id group.pk %}" class="row_link"></a>
-    {% if group.status == 0 %}
-        <a href="{% url sentry-ajax group.project_id %}?op=resolve&amp;gid={{ group.pk|safe }}" onclick="Sentry.stream.resolve({{ group.pk|safe }});return false;" class="button resolve_button hidden">&#10003;</a>
-    {% endif %}
+    <ul class="actions">
+        <li>
+            {% if group.status == 0 %}
+                <a href="javascript:void(0)" onclick="Sentry.stream.resolve({{ group.pk|safe }});" class="btn small">&#10003;</a>
+            {% else %}
+                <a href="javascript:void(0)" class="btn disabled small">&#10003;</a>
+            {% endif %}
+        </li>
+        <li><a href="javascript:void(0)" onclick="Sentry.stream.bookmark({{ group.pk|safe }});" class="btn small">&#9829;</a></li>
+    </ul>
 </li>
diff --git a/sentry/web/api.py b/sentry/web/api.py
index a4202b606d..467ad6fd5b 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -6,14 +6,23 @@ sentry.web.views
 :license: BSD, see LICENSE for more details.
 """
 
-from django.http import HttpResponse
+from django.db.models import Q
+from django.http import HttpResponse, HttpResponseBadRequest, \
+  HttpResponseForbidden
 from django.views.decorators.csrf import csrf_exempt
 from django.views.decorators.http import require_http_methods
 
+from sentry.conf import settings
 from sentry.coreapi import project_from_auth_vars, project_from_api_key_and_id, \
   project_from_id, decode_and_decompress_data, safely_load_json_string, \
   ensure_valid_project_id, insert_data_to_database, APIError, APIUnauthorized, \
   extract_auth_vars
+from sentry.models import Group, GroupBookmark, Project, View
+from sentry.utils import json
+from sentry.web.decorators import has_access
+from sentry.web.frontend.groups import _get_group_list
+from sentry.web.helpers import render_to_response, \
+  get_project_list, render_to_string
 
 
 @csrf_exempt
@@ -45,3 +54,144 @@ def store(request):
         return HttpResponse(error.msg, status=error.http_status)
     return HttpResponse('')
 
+
+@csrf_exempt
+@has_access
+def notification(request, project):
+    return render_to_response('sentry/partial/_notification.html', request.GET)
+
+
+@csrf_exempt
+@has_access
+def poll(request, project):
+    offset = 0
+    limit = settings.MESSAGES_PER_PAGE
+
+    view_id = request.GET.get('view_id')
+    if view_id:
+        try:
+            view = View.objects.get(pk=view_id)
+        except View.DoesNotExist:
+            return HttpResponseBadRequest()
+    else:
+        view = None
+
+    filters, event_list = _get_group_list(
+        request=request,
+        project=project,
+        view=view,
+    )
+
+    data = [
+        (m.pk, {
+            'html': render_to_string('sentry/partial/_group.html', {
+                'group': m,
+                'request': request,
+            }).strip(),
+            'title': m.message_top(),
+            'message': m.error(),
+            'level': m.get_level_display(),
+            'logger': m.logger,
+            'count': m.times_seen,
+        }) for m in event_list[offset:limit]]
+
+    response = HttpResponse(json.dumps(data))
+    response['Content-Type'] = 'application/json'
+    return response
+
+
+@csrf_exempt
+@has_access
+def resolve(request, project):
+    gid = request.REQUEST.get('gid')
+    if not gid:
+        return HttpResponseForbidden()
+    try:
+        group = Group.objects.get(pk=gid)
+    except Group.DoesNotExist:
+        return HttpResponseForbidden()
+
+    if group.project and group.project.pk not in get_project_list(request.user):
+        return HttpResponseForbidden()
+
+    Group.objects.filter(pk=group.pk).update(status=1)
+    group.status = 1
+
+    data = [
+        (m.pk, {
+            'html': render_to_string('sentry/partial/_group.html', {
+                'group': m,
+                'request': request,
+            }).strip(),
+            'count': m.times_seen,
+        }) for m in [group]]
+
+    response = HttpResponse(json.dumps(data))
+    response['Content-Type'] = 'application/json'
+    return response
+
+
+@csrf_exempt
+@has_access
+def bookmark(request, project):
+    gid = request.REQUEST.get('gid')
+    if not gid:
+        return HttpResponseForbidden()
+    try:
+        group = Group.objects.get(pk=gid)
+    except Group.DoesNotExist:
+        return HttpResponseForbidden()
+
+    if group.project and group.project.pk not in get_project_list(request.user):
+        return HttpResponseForbidden()
+
+    gb, created = GroupBookmark.objects.get_or_create(
+        project=group.project,
+        user=request.user,
+        group=group,
+    )
+    if not created:
+        gb.delete()
+
+    response = HttpResponse({'bookmarked': not created})
+    response['Content-Type'] = 'application/json'
+    return response
+
+
+@csrf_exempt
+@has_access
+def clear(request, project):
+    projects = get_project_list(request.user)
+
+    event_list = Group.objects.filter(Q(project__in=projects.keys()) | Q(project__isnull=True))
+
+    event_list.update(status=1)
+
+    data = []
+    response = HttpResponse(json.dumps(data))
+    response['Content-Type'] = 'application/json'
+    return response
+
+
+@csrf_exempt
+@has_access
+def chart(request, project):
+    gid = request.REQUEST.get('gid')
+    days = int(request.REQUEST.get('days', '90'))
+
+    if gid:
+        try:
+            group = Group.objects.get(pk=gid)
+        except Group.DoesNotExist:
+            return HttpResponseForbidden()
+
+        if group.project and group.project.pk not in get_project_list(request.user):
+            return HttpResponseForbidden()
+
+        data = Group.objects.get_chart_data(group, max_days=days)
+    else:
+        data = Project.objects.get_chart_data(project, max_days=days)
+
+    response = HttpResponse(json.dumps(data))
+    response['Content-Type'] = 'application/json'
+    return response
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 1b6e32adfb..a0da0975e9 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -10,23 +10,18 @@ import datetime
 import re
 
 from django.core.urlresolvers import reverse
-from django.db.models import Q
-from django.http import HttpResponse, HttpResponseBadRequest, \
-    HttpResponseForbidden, HttpResponseRedirect, Http404
+from django.http import HttpResponse, \
+  HttpResponseRedirect, Http404
 from django.shortcuts import get_object_or_404
-from django.template.loader import render_to_string
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
-from django.views.decorators.csrf import csrf_exempt
 
-from sentry.conf import settings
 from sentry.filters import Filter
-from sentry.models import Group, Event, Project, View
+from sentry.models import Group, Event, View
 from sentry.utils import json, has_trending
 from sentry.web.decorators import has_access, login_required
-from sentry.web.helpers import render_to_response, \
-    get_project_list
+from sentry.web.helpers import render_to_response
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$', re.I)
 event_re = re.compile(r'^(?P<event_id>[a-z0-9]{32})\$(?P<checksum>[a-z0-9]{32})$', re.I)
@@ -110,125 +105,6 @@ def _get_group_list(request, project, view=None):
     return filters, event_list
 
 
-@login_required
-@csrf_exempt
-@has_access
-def ajax_handler(request, project):
-    # TODO: remove this awful idea of an API
-    op = request.REQUEST.get('op')
-
-    def notification(request, project):
-        return render_to_response('sentry/partial/_notification.html', request.GET)
-
-    def poll(request, project):
-        offset = 0
-        limit = settings.MESSAGES_PER_PAGE
-
-        view_id = request.GET.get('view_id')
-        if view_id:
-            try:
-                view = View.objects.get(pk=view_id)
-            except View.DoesNotExist:
-                return HttpResponseRedirect(reverse('sentry', args=[project.pk]))
-        else:
-            view = None
-
-        filters, event_list = _get_group_list(
-            request=request,
-            project=project,
-            view=view,
-        )
-
-        data = [
-            (m.pk, {
-                'html': render_to_string('sentry/partial/_group.html', {
-                    'group': m,
-                    'request': request,
-                }).strip(),
-                'title': m.message_top(),
-                'message': m.error(),
-                'level': m.get_level_display(),
-                'logger': m.logger,
-                'count': m.times_seen,
-            }) for m in event_list[offset:limit]]
-
-        response = HttpResponse(json.dumps(data))
-        response['Content-Type'] = 'application/json'
-        return response
-
-    def resolve(request, project):
-        gid = request.REQUEST.get('gid')
-        if not gid:
-            return HttpResponseForbidden()
-        try:
-            group = Group.objects.get(pk=gid)
-        except Group.DoesNotExist:
-            return HttpResponseForbidden()
-
-        if group.project and group.project.pk not in get_project_list(request.user):
-            return HttpResponseForbidden()
-
-        Group.objects.filter(pk=group.pk).update(status=1)
-        group.status = 1
-
-        if not request.is_ajax():
-            return HttpResponseRedirect(request.META.get('HTTP_REFERER') or reverse('sentry'))
-
-        data = [
-            (m.pk, {
-                'html': render_to_string('sentry/partial/_group.html', {
-                    'group': m,
-                    'request': request,
-                }).strip(),
-                'count': m.times_seen,
-            }) for m in [group]]
-
-        response = HttpResponse(json.dumps(data))
-        response['Content-Type'] = 'application/json'
-        return response
-
-    def clear(request, project):
-        projects = get_project_list(request.user)
-
-        event_list = Group.objects.filter(Q(project__in=projects.keys()) | Q(project__isnull=True))
-
-        event_list.update(status=1)
-
-        if not request.is_ajax():
-            return HttpResponseRedirect(request.META.get('HTTP_REFERER') or reverse('sentry'))
-
-        data = []
-        response = HttpResponse(json.dumps(data))
-        response['Content-Type'] = 'application/json'
-        return response
-
-    def chart(request, project):
-        gid = request.REQUEST.get('gid')
-        days = int(request.REQUEST.get('days', '90'))
-
-        if gid:
-            try:
-                group = Group.objects.get(pk=gid)
-            except Group.DoesNotExist:
-                return HttpResponseForbidden()
-
-            if group.project and group.project.pk not in get_project_list(request.user):
-                return HttpResponseForbidden()
-
-            data = Group.objects.get_chart_data(group, max_days=days)
-        else:
-            data = Project.objects.get_chart_data(project, max_days=days)
-
-        response = HttpResponse(json.dumps(data))
-        response['Content-Type'] = 'application/json'
-        return response
-
-    if op in ['notification', 'poll', 'resolve', 'clear', 'chart']:
-        return locals()[op](request, project)
-    else:
-        return HttpResponseBadRequest()
-
-
 @login_required
 @has_access
 def search(request, project):
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index b8a6e18fdc..744f010302 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -74,7 +74,12 @@ urlpatterns = patterns('',
 
     # JS
 
-    url(r'^(?P<project_id>\d+)/jsapi$', groups.ajax_handler, name='sentry-ajax'),
+    url(r'^(?P<project_id>\d+)/api/notification/$', api.notification, name='sentry-api-notification'),
+    url(r'^(?P<project_id>\d+)/api/poll/$', api.poll, name='sentry-api-poll'),
+    url(r'^(?P<project_id>\d+)/api/resolve/$', api.resolve, name='sentry-api-resolve'),
+    url(r'^(?P<project_id>\d+)/api/bookmark/$', api.bookmark, name='sentry-api-bookmark'),
+    url(r'^(?P<project_id>\d+)/api/clear/$', api.clear, name='sentry-api-clear'),
+    url(r'^(?P<project_id>\d+)/api/chart/$', api.chart, name='sentry-api-chart'),
 
     # Project specific
 
