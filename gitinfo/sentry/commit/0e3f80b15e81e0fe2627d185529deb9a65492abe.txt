commit 0e3f80b15e81e0fe2627d185529deb9a65492abe
Author: Matej Minar <matej.minar@sentry.io>
Date:   Mon Mar 16 21:54:17 2020 +0100

    ref(ui): Extracted components from events chart to be used elsewhere (#17706)

diff --git a/src/sentry/static/sentry/app/components/charts/components/errorPanel.tsx b/src/sentry/static/sentry/app/components/charts/components/errorPanel.tsx
new file mode 100644
index 0000000000..f430ef5498
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/components/errorPanel.tsx
@@ -0,0 +1,17 @@
+import styled from '@emotion/styled';
+
+const ErrorPanel = styled('div')`
+  display: flex;
+  justify-content: center;
+  align-items: center;
+
+  flex: 1;
+  flex-shrink: 0;
+  overflow: hidden;
+  height: 200px;
+  position: relative;
+  border-color: transparent;
+  margin-bottom: 0;
+`;
+
+export default ErrorPanel;
diff --git a/src/sentry/static/sentry/app/components/charts/components/transparentLoadingMask.tsx b/src/sentry/static/sentry/app/components/charts/components/transparentLoadingMask.tsx
new file mode 100644
index 0000000000..68dc883708
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/components/transparentLoadingMask.tsx
@@ -0,0 +1,15 @@
+import styled from '@emotion/styled';
+
+import LoadingMask from 'app/components/loadingMask';
+
+type Props = {
+  visible: boolean;
+};
+
+const TransparentLoadingMask = styled(LoadingMask)<Props>`
+  ${p => !p.visible && 'display: none;'};
+  opacity: 0.4;
+  z-index: 1;
+`;
+
+export default TransparentLoadingMask;
diff --git a/src/sentry/static/sentry/app/components/charts/transitionChart.tsx b/src/sentry/static/sentry/app/components/charts/transitionChart.tsx
new file mode 100644
index 0000000000..d2c1414644
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/transitionChart.tsx
@@ -0,0 +1,98 @@
+import React from 'react';
+
+import LoadingPanel from 'app/views/events/loadingPanel';
+
+type Props = {
+  reloading: boolean;
+  loading: boolean;
+};
+
+type State = {
+  prevReloading: boolean;
+  prevLoading: boolean;
+  key: number;
+};
+
+class TransitionChart extends React.Component<Props, State> {
+  state = {
+    prevReloading: this.props.reloading,
+    prevLoading: this.props.loading,
+    key: 1,
+  };
+
+  static getDerivedStateFromProps(props: Props, state: State) {
+    // Transitions are controlled using variables called:
+    // - loading and,
+    // - reloading (also called pending in other apps)
+    //
+    // This component remounts the chart to ensure the stable transition
+    // from one data set to the next.
+
+    const prevReloading = state.prevReloading;
+    const nextReloading = props.reloading;
+
+    const prevLoading = state.prevLoading;
+    const nextLoading = props.loading;
+
+    // whenever loading changes, we explicitly remount the children by updating
+    // the key prop; regardless of what state reloading is in
+    if (prevLoading !== nextLoading) {
+      return {
+        prevReloading: nextReloading,
+        prevLoading: nextLoading,
+        key: state.key + 1,
+      };
+    }
+
+    // invariant: prevLoading === nextLoading
+
+    // if loading is true, and hasn't changed from the previous re-render,
+    // do not remount the children.
+    if (nextLoading) {
+      return {
+        prevReloading: nextReloading,
+        prevLoading: nextLoading,
+        key: state.key,
+      };
+    }
+
+    // invariant: loading is false
+
+    // whenever the chart is transitioning from the reloading (pending) state to a non-loading state,
+    // remount the children
+    if (prevReloading && !nextReloading) {
+      return {
+        prevReloading: nextReloading,
+        prevLoading: nextLoading,
+        key: state.key + 1,
+      };
+    }
+
+    // do not remount the children in these remaining cases:
+    // !prevReloading && !nextReloading (re-render with no prop change)
+    // prevReloading && nextReloading (re-render with no prop change)
+    // !prevReloading && nextReloading (from loaded to pending state)
+
+    return {
+      prevReloading: nextReloading,
+      prevLoading: nextLoading,
+      key: state.key,
+    };
+  }
+
+  render() {
+    const {loading, reloading} = this.props;
+
+    if (loading && !reloading) {
+      return <LoadingPanel data-test-id="events-request-loading" />;
+    }
+
+    // We make use of the key prop to explicitly remount the children
+    // https://reactjs.org/docs/lists-and-keys.html#keys
+    return (
+      <React.Fragment key={String(this.state.key)}>{this.props.children}</React.Fragment>
+    );
+  }
+}
+
+export default TransitionChart;
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index 9f57c6b3a2..4474415d05 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -1,19 +1,19 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import isEqual from 'lodash/isEqual';
-import styled from '@emotion/styled';
 
 import {getInterval} from 'app/components/charts/utils';
 import ChartZoom from 'app/components/charts/chartZoom';
 import AreaChart from 'app/components/charts/areaChart';
-import LoadingMask from 'app/components/loadingMask';
-import LoadingPanel from 'app/views/events/loadingPanel';
+import TransitionChart from 'app/components/charts/transitionChart';
 import ReleaseSeries from 'app/components/charts/releaseSeries';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
+import TransparentLoadingMask from 'app/components/charts/components/transparentLoadingMask';
+import ErrorPanel from 'app/components/charts/components/errorPanel';
 
 import EventsRequest from './utils/eventsRequest';
 
@@ -94,93 +94,6 @@ class EventsAreaChart extends React.Component {
   }
 }
 
-class TransitionChart extends React.Component {
-  static propTypes = {
-    reloading: PropTypes.bool,
-    loading: PropTypes.bool,
-  };
-
-  state = {
-    prevReloading: this.props.reloading,
-    prevLoading: this.props.loading,
-    key: 1,
-  };
-
-  static getDerivedStateFromProps(props, state) {
-    // Transitions are controlled using variables called:
-    // - loading and,
-    // - reloading (also called pending in other apps)
-    //
-    // This component remounts the chart to ensure the stable transition
-    // from one data set to the next.
-
-    const prevReloading = state.prevReloading;
-    const nextReloading = props.reloading;
-
-    const prevLoading = state.prevLoading;
-    const nextLoading = props.loading;
-
-    // whenever loading changes, we explicitly remount the children by updating
-    // the key prop; regardless of what state reloading is in
-    if (prevLoading !== nextLoading) {
-      return {
-        prevReloading: nextReloading,
-        prevLoading: nextLoading,
-        key: state.key + 1,
-      };
-    }
-
-    // invariant: prevLoading === nextLoading
-
-    // if loading is true, and hasn't changed from the previous re-render,
-    // do not remount the children.
-    if (nextLoading) {
-      return {
-        prevReloading: nextReloading,
-        prevLoading: nextLoading,
-        key: state.key,
-      };
-    }
-
-    // invariant: loading is false
-
-    // whenever the chart is transitioning from the reloading (pending) state to a non-loading state,
-    // remount the children
-    if (prevReloading && !nextReloading) {
-      return {
-        prevReloading: nextReloading,
-        prevLoading: nextLoading,
-        key: state.key + 1,
-      };
-    }
-
-    // do not remount the children in these remaining cases:
-    // !prevReloading && !nextReloading (re-render with no prop change)
-    // prevReloading && nextReloading (re-render with no prop change)
-    // !prevReloading && nextReloading (from loaded to pending state)
-
-    return {
-      prevReloading: nextReloading,
-      prevLoading: nextLoading,
-      key: state.key,
-    };
-  }
-
-  render() {
-    const {loading, reloading} = this.props;
-
-    if (loading && !reloading) {
-      return <LoadingPanel data-test-id="events-request-loading" />;
-    }
-
-    // We make use of the key prop to explicitly remount the children
-    // https://reactjs.org/docs/lists-and-keys.html#keys
-    return (
-      <React.Fragment key={String(this.state.key)}>{this.props.children}</React.Fragment>
-    );
-  }
-}
-
 class EventsChart extends React.Component {
   static propTypes = {
     api: PropTypes.object,
@@ -302,23 +215,3 @@ const EventsChartContainer = withGlobalSelection(
 
 export default EventsChartContainer;
 export {EventsChart, EventsAreaChart};
-
-const TransparentLoadingMask = styled(LoadingMask)`
-  ${p => !p.visible && 'display: none;'};
-  opacity: 0.4;
-  z-index: 1;
-`;
-
-const ErrorPanel = styled('div')`
-  display: flex;
-  justify-content: center;
-  align-items: center;
-
-  flex: 1;
-  flex-shrink: 0;
-  overflow: hidden;
-  height: 200px;
-  position: relative;
-  border-color: transparent;
-  margin-bottom: 0;
-`;
