commit 6949774a76e73611d1dfdc086d5c90a8a92bc289
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 11 12:46:13 2016 -0800

    Added basic support for project bound counters

diff --git a/src/sentry/migrations/0235_auto__add_counter__add_unique_counter_project_ident.py b/src/sentry/migrations/0235_auto__add_counter__add_unique_counter_project_ident.py
index bbaa928376..5bc36512e9 100644
--- a/src/sentry/migrations/0235_auto__add_counter__add_unique_counter_project_ident.py
+++ b/src/sentry/migrations/0235_auto__add_counter__add_unique_counter_project_ident.py
@@ -25,29 +25,31 @@ class Migration(SchemaMigration):
             db.execute('''
                 create function sentry_increment_project_counter(
                     project bigint, counter text, delta int) returns int as $$
+                declare
+                  new_val int;
                 begin
                   loop
                     update sentry_projectcounter set value = value + delta
                      where project_id = project
-                       and ident = counter returning counter into new_val;
+                       and ident = counter returning value into new_val;
                     if found then
                       return new_val;
                     end if;
                     begin
                       insert into sentry_projectcounter(project_id, ident, value)
                            values (project, counter, delta)
-                        returning counter into new_val;
+                        returning value into new_val;
                       return new_val;
                     exception when unique_violation then
                     end;
-                  end loop
+                  end loop;
                 end
                 $$ language plpgsql;
             ''')
 
     def backwards(self, orm):
         if 'postgres' in settings.DATABASES['default']['ENGINE']:
-            db.execute('drop function sentry_increment_project_counter')
+            db.execute('drop function sentry_increment_project_counter(bigint, text, int);')
 
         # Removing unique constraint on 'Counter', fields ['project', 'ident']
         db.delete_unique('sentry_projectcounter', ['project_id', 'ident'])
diff --git a/src/sentry/models/counter.py b/src/sentry/models/counter.py
index 99df23a0bc..0ab0d188ba 100644
--- a/src/sentry/models/counter.py
+++ b/src/sentry/models/counter.py
@@ -35,29 +35,49 @@ class Counter(Model):
         app_label = 'sentry'
         db_table = 'sentry_projectcounter'
 
+    @classmethod
+    def increment(cls, project, name, delta=1):
+        """Increments a counter.  This can never decrement."""
+        if delta <= 0:
+            raise ValueError('There is only one way, and that\'s up.')
 
-def increment_counter(project, name, delta=1):
-    """Increments a counter.  This can never decrement."""
-    if delta <= 0:
-        raise ValueError('There is only one way, and that\'s up.')
-
-    cur = connection.cursor()
-
-    if db.is_postgres():
-        cur.execute('''
-            select sentry_increment_project_counter(%s, %s, %s)
-        ''', [project.id, name, delta])
-    elif db.is_sqlite():
-        pass
-    elif db.is_mysql():
-        cur.execute('''
-            insert into sentry_projectcounter
-                        (project_id, ident, value)
-                 values (%s, %s, @new_val := %s)
-       on duplicate key
-                 update value = @new_val := value + %s;
-                 select @new_val;
-        ''', [project.id, name, delta, delta])
-        return cur.fetchone()[0]
-    else:
-        raise AssertionError("Not implemented database engine path")
+        cur = connection.cursor()
+        try:
+            if db.is_postgres():
+                cur.execute('''
+                    select sentry_increment_project_counter(%s, %s, %s)
+                ''', [project.id, name, delta])
+            elif db.is_sqlite():
+                value = cur.execute('''
+                    insert or ignore into sentry_projectcounter
+                      (project_id, ident, value) values (%s, %s, 0);
+                ''', [project.id, name])
+                value = cur.execute('''
+                    select value from sentry_projectcounter
+                     where project_id = %s and ident = %s
+                ''', [project.id, name]).fetchone()[0]
+                while 1:
+                    cur.execute('''
+                        update sentry_projectcounter
+                           set value = value + %s
+                         where project_id = %s and ident = %s;
+                    ''', [delta, project.id, name])
+                    changes = cur.execute('''
+                        select changes();
+                    ''').fetchone()[0]
+                    if changes != 0:
+                        return value + delta
+            elif db.is_mysql():
+                cur.execute('''
+                    insert into sentry_projectcounter
+                                (project_id, ident, value)
+                         values (%s, %s, @new_val := %s)
+               on duplicate key
+                         update value = @new_val := value + %s;
+                         select @new_val;
+                ''', [project.id, name, delta, delta])
+                return cur.fetchone()[0]
+            else:
+                raise AssertionError("Not implemented database engine path")
+        finally:
+            cur.close()
diff --git a/tests/sentry/models/test_projectcounter.py b/tests/sentry/models/test_projectcounter.py
new file mode 100644
index 0000000000..b486aaea4b
--- /dev/null
+++ b/tests/sentry/models/test_projectcounter.py
@@ -0,0 +1,18 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.models import Counter
+from sentry.testutils import TestCase
+
+
+class ProjectCounterTest(TestCase):
+
+    def test_increment(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        project = self.create_project(team=team)
+
+        assert Counter.increment(project, 'demo', 42) == 42
+        assert Counter.increment(project, 'demo', 1) == 43
