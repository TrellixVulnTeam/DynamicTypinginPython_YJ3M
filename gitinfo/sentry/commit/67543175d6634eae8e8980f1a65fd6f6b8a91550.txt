commit 67543175d6634eae8e8980f1a65fd6f6b8a91550
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed Jun 20 15:05:10 2018 -0700

    feat(integrations): Add assignee sync from sentry to JIRA (#8780)

diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index 31ee96bf6a..d8f143ec15 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -34,6 +34,7 @@ class JiraApiClient(ApiClient):
     VERSIONS_URL = '/rest/api/2/project/%s/versions'
     USERS_URL = '/rest/api/2/user/assignable/search'
     SERVER_INFO_URL = '/rest/api/2/serverInfo'
+    ASSIGN_URL = '/rest/api/2/issue/%s/assignee'
 
     def __init__(self, base_url, shared_secret):
         self.base_url = base_url
@@ -125,6 +126,12 @@ class JiraApiClient(ApiClient):
     def search_users_for_project(self, project, username):
         return self.get(self.USERS_URL, params={'project': project, 'username': username})
 
+    def search_users_for_issue(self, issue_key, email):
+        # not actully in the official documentation, but apparently
+        # you can pass email as the username param see:
+        # https://community.atlassian.com/t5/Answers-Developer-Questions/JIRA-Rest-API-find-JIRA-user-based-on-user-s-email-address/qaq-p/532715
+        return self.get(self.USERS_URL, params={'issueKey': issue_key, 'username': email})
+
     def create_issue(self, raw_form_data):
         data = {'fields': raw_form_data}
         return self.post(self.CREATE_URL, data=data)
@@ -134,3 +141,6 @@ class JiraApiClient(ApiClient):
 
     def get_valid_statuses(self):
         return self.request('GET', self.STATUS_URL)
+
+    def assign_issue(self, key, username):
+        return self.put(self.ASSIGN_URL % key, data={'name': username})
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index ceb53f6ea5..6b22d34e16 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import logging
 from six.moves.urllib.parse import quote_plus
 
 from django.core.urlresolvers import reverse
@@ -13,6 +14,7 @@ from sentry.integrations.issues import IssueSyncMixin
 
 from .client import JiraApiClient
 
+logger = logging.getLogger('sentry.integrations.jira')
 
 alert_link = {
     'text': 'Visit the **Atlassian Marketplace** to install this integration.',
@@ -407,6 +409,53 @@ class JiraIntegration(Integration, IssueSyncMixin):
             'key': issue_key,
         }
 
+    def sync_assignee_outbound(self, external_issue, user, assign=True, **kwargs):
+        """
+        Propagate a sentry issue's assignee to a jira issue's assignee
+        """
+        client = self.get_client()
+
+        jira_user = None
+        if assign:
+            for ue in user.emails.filter(is_verified=True):
+                try:
+                    res = client.search_users_for_issue(external_issue.key, ue.email)
+                except (ApiUnauthorized, ApiError):
+                    continue
+                try:
+                    jira_user = [
+                        r for r in res if r['emailAddress'] == ue.email
+                    ][0]
+                except IndexError:
+                    pass
+                else:
+                    break
+
+            if jira_user is None:
+                # TODO(jess): do we want to email people about these types of failures?
+                logger.info(
+                    'jira.assignee-not-found',
+                    extra={
+                        'integration_id': external_issue.integration_id,
+                        'user_id': user.id,
+                        'issue_key': external_issue.key,
+                    }
+                )
+                return
+
+        try:
+            client.assign_issue(external_issue.key, jira_user and jira_user['name'])
+        except (ApiUnauthorized, ApiError):
+            # TODO(jess): do we want to email people about these types of failures?
+            logger.info(
+                'jira.failed-to-assign',
+                extra={
+                    'integration_id': external_issue.integration_id,
+                    'user_id': user.id,
+                    'issue_key': external_issue.key,
+                }
+            )
+
 
 class JiraIntegrationProvider(IntegrationProvider):
     key = 'jira'
