commit 83e8cc1506ea23db63211fc8870a7ee3bbaf3167
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 29 13:16:00 2015 -0700

    Make plugin list available in sidebar

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 2e8f37fa12..5eeb18f5ca 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -10,8 +10,10 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, Project, ProjectStatus
+from sentry.plugins import plugins
 from sentry.tasks.deletion import delete_project
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.utils.safe import safe_execute
 
 
 @scenario('GetProject')
@@ -81,6 +83,16 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         :pparam string project_slug: the slug of the project to delete.
         :auth: required
         """
+        active_plugins = [
+            {
+                'name': plugin.get_title(),
+                'id': plugin.slug,
+            }
+            for plugin in plugins.configurable_for_project(project, version=None)
+            if safe_execute(plugin.is_enabled, project)
+            and safe_execute(plugin.has_project_conf)
+        ]
+
         data = serialize(project, request.user)
         data['options'] = {
             'sentry:origins': '\n'.join(project.get_option('sentry:origins', ['*']) or []),
@@ -88,6 +100,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:scrub_data': bool(project.get_option('sentry:scrub_data', True)),
             'sentry:sensitive_fields': project.get_option('sentry:sensitive_fields', []),
         }
+        data['activePlugins'] = active_plugins
         data['team'] = serialize(project.team, request.user)
         data['organization'] = serialize(project.organization, request.user)
 
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 3a97876f50..1dabcabe97 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -1,10 +1,16 @@
 import React from "react";
 import Router from "react-router";
 
+import api from "../../api";
 import ConfigStore from "../../stores/configStore";
 import ListLink from "../../components/listLink";
+import LoadingError from "../../components/loadingError";
+import LoadingIndicator from "../../components/loadingIndicator";
+import RouteMixin from "../../mixins/routeMixin";
 
 const ProjectSettings = React.createClass({
+  mixins: [RouteMixin],
+
   contextTypes: {
     router: React.PropTypes.func
   },
@@ -15,6 +21,46 @@ const ProjectSettings = React.createClass({
 
   componentWillMount() {
     this.props.setProjectNavSection('settings');
+    this.fetchData();
+  },
+
+  routeDidChange(nextPath, nextParams) {
+    var params = this.context.router.getCurrentParams();
+    if (nextParams.projectId != params.projectId ||
+        nextParams.orgId != params.orgId) {
+      this.setState({
+        loading: true,
+        error: false
+      }, this.fetchData);
+    }
+  },
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      project: null
+    };
+  },
+
+  fetchData() {
+    var params = this.context.router.getCurrentParams();
+
+    api.request(`/projects/${params.orgId}/${params.projectId}/`, {
+      success: (data) => {
+        this.setState({
+          project: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
   },
 
   render() {
@@ -22,6 +68,12 @@ const ProjectSettings = React.createClass({
     let urlPrefix = ConfigStore.get('urlPrefix');
     let params = this.context.router.getCurrentParams();
     let settingsUrlRoot = `${urlPrefix}/${params.orgId}/${params.projectId}/settings`;
+    let project = this.state.project;
+
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
 
     return (
       <div className="row">
@@ -40,10 +92,18 @@ const ProjectSettings = React.createClass({
             <ListLink to="projectInstall" params={params}>Instructions</ListLink>
             <li><a href={`${settingsUrlRoot}/keys/`}>Client Keys</a></li>
           </ul>
+          <h6 className="nav-header">Integrations</h6>
+          <ul className="nav nav-stacked">
+            <li><a href={`${settingsUrlRoot}/plugins/`}>All Integrations</a></li>
+            {project.activePlugins.map((plugin) => {
+              return <li><a href={`${settingsUrlRoot}/plugins/${plugin.id}/`}>{plugin.name}</a></li>;
+            })}
+          </ul>
         </div>
         <div className="col-md-10">
           <Router.RouteHandler
               setProjectNavSection={this.setProjectNavSection}
+              project={project}
               {...this.props} />
         </div>
       </div>
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 8c71eda60e..174001858b 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -191,7 +191,7 @@
     <h6 class="nav-header">{% trans "Integrations" %}</h6>
     <ul class="nav nav-stacked">
       <li class="{% if page == 'plugins' %} active{% endif %}">
-        <a href="{% url 'sentry-manage-project-plugins' project.organization.slug project.slug %}">{% trans "All Integrations" %} ({{ PLUGINS|length }})</a>
+        <a href="{% url 'sentry-manage-project-plugins' project.organization.slug project.slug %}">{% trans "All Integrations" %}</a>
       </li>
     {% for p in plugins %}
       <li{% if page == 'plugin' and plugin.slug == p.slug %} class="active"{% endif %}>
