commit d29959baaa6281e4c85dca3d873bd8309268c52e
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Sep 23 19:05:19 2015 -0700

    Do filter in python, and add more test cases

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 351b888a51..500838462f 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -44,27 +44,28 @@ class EventDetailsEndpoint(Endpoint):
         # HACK(dcramer): work around lack of unique sorting on datetime
         base_qs = Event.objects.filter(
             group=event.group_id,
-        )
+        ).exclude(id=event.id)
         try:
-            next_event = sorted(
+            gt = lambda x: x.id > event.id
+            next_event = filter(gt, sorted(
                 base_qs.filter(
-                    id__gt=event.id,
                     datetime__gte=event.datetime,
                 ).order_by('datetime')[0:5],
                 key=lambda x: (x.datetime, x.id),
-            )[0]
+            ))[0]
         except IndexError:
             next_event = None
 
         try:
-            prev_event = sorted(
+            lt = lambda x: x.id < event.id
+            prev_event = filter(lt, sorted(
                 base_qs.filter(
                     id__lt=event.id,
                     datetime__lte=event.datetime,
                 ).order_by('-datetime')[0:5],
                 key=lambda x: (x.datetime, x.id),
                 reverse=True,
-            )[0]
+            ))[0]
         except IndexError:
             prev_event = None
 
diff --git a/tests/sentry/api/endpoints/test_event_details.py b/tests/sentry/api/endpoints/test_event_details.py
index 6f569fd3a6..bae789f4e6 100644
--- a/tests/sentry/api/endpoints/test_event_details.py
+++ b/tests/sentry/api/endpoints/test_event_details.py
@@ -69,55 +69,95 @@ class EventDetailsTest(APITestCase):
 
         group = self.create_group()
         created = datetime(2013, 8, 13, 3, 8, 24)
-        prev_event = self.create_event(
+        events = []
+        events.append(self.create_event(
             event_id='a',
             group=group,
             datetime=created,
-        )
-        cur_event = self.create_event(
+        ))
+        events.append(self.create_event(
             event_id='b',
             group=group,
             datetime=created,
-        )
-        next_event = self.create_event(
+        ))
+        events.append(self.create_event(
             event_id='c',
             group=group,
             datetime=created,
-        )
+        ))
+        events.append(self.create_event(
+            event_id='d',
+            group=group,
+            datetime=created,
+        ))
+        events.append(self.create_event(
+            event_id='e',
+            group=group,
+            datetime=created,
+        ))
 
+        # First event, no prev
         url = reverse('sentry-api-0-event-details', kwargs={
-            'event_id': cur_event.id,
+            'event_id': events[0].id,
         })
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(cur_event.id)
-        assert response.data['nextEventID'] == str(next_event.id)
-        assert response.data['previousEventID'] == str(prev_event.id)
+        assert response.data['id'] == str(events[0].id)
+        assert response.data['nextEventID'] == str(events[1].id)
+        assert response.data['previousEventID'] is None
         assert response.data['groupID'] == group.id
         assert not response.data['userReport']
 
+        # Middle event, has prev and next
         url = reverse('sentry-api-0-event-details', kwargs={
-            'event_id': prev_event.id,
+            'event_id': events[1].id,
         })
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(prev_event.id)
-        assert response.data['nextEventID'] == str(cur_event.id)
-        assert response.data['previousEventID'] is None
+        assert response.data['id'] == str(events[1].id)
+        assert response.data['nextEventID'] == str(events[2].id)
+        assert response.data['previousEventID'] == str(events[0].id)
         assert response.data['groupID'] == group.id
         assert not response.data['userReport']
 
+        # Middle event, has prev and next
         url = reverse('sentry-api-0-event-details', kwargs={
-            'event_id': next_event.id,
+            'event_id': events[2].id,
         })
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(next_event.id)
+        assert response.data['id'] == str(events[2].id)
+        assert response.data['nextEventID'] == str(events[3].id)
+        assert response.data['previousEventID'] == str(events[1].id)
+        assert response.data['groupID'] == group.id
+        assert not response.data['userReport']
+
+        # Middle event, has prev and next
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': events[3].id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(events[3].id)
+        assert response.data['nextEventID'] == str(events[4].id)
+        assert response.data['previousEventID'] == str(events[2].id)
+        assert response.data['groupID'] == group.id
+        assert not response.data['userReport']
+
+        # Last event, no next
+        url = reverse('sentry-api-0-event-details', kwargs={
+            'event_id': events[4].id,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(events[4].id)
         assert response.data['nextEventID'] is None
-        assert response.data['previousEventID'] == str(cur_event.id)
+        assert response.data['previousEventID'] == str(events[3].id)
         assert response.data['groupID'] == group.id
         assert not response.data['userReport']
 
