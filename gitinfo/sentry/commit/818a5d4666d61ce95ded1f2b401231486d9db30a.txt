commit 818a5d4666d61ce95ded1f2b401231486d9db30a
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 21 00:39:43 2013 -0800

    More various fixes for url changes

diff --git a/src/sentry/templates/sentry/dashboard.html b/src/sentry/templates/sentry/dashboard.html
index 5e723acfa5..379943a317 100644
--- a/src/sentry/templates/sentry/dashboard.html
+++ b/src/sentry/templates/sentry/dashboard.html
@@ -41,7 +41,7 @@
             </div>
         {% else %}
             {% if can_create_projects %}
-                {% url sentry-new-project as link %}
+                {% url sentry-new-project team.slug as link %}
                 <div class="alert alert-info">{% blocktrans %}You do not have access to any projects. Would you like to <a href="{{ link }}">create a new project</a>?{% endblocktrans %}</div>
             {% else %}
                 <div class="alert alert-notice">{% trans "You do not have access to any projects. Ask an administrator to add you as a member." %}</div>
@@ -63,7 +63,7 @@
         </ul>
         <div style="margin-bottom:13px;">
             {% if can_create_projects %}
-                <a href="{% url sentry-new-project %}" class="btn btn-primary" style="padding-top: 3px; padding-bottom: 3px; margin-top: 5px; display: block; text-align: center;">{% trans "New project" %}</a>
+                <a href="{% url sentry-new-project team.slug %}" class="btn btn-primary" style="padding-top: 3px; padding-bottom: 3px; margin-top: 5px; display: block; text-align: center;">{% trans "New project" %}</a>
             {% endif %}
             {% if project_list|length > 10 %}
                 <a href="{% url sentry-project-list team.slug %}" class="btn btn-small">{% blocktrans with PROJECT_LIST|length as count %}View all <strong>{{ count }}</strong> projects{% endblocktrans %}</a>
diff --git a/src/sentry/templates/sentry/events/event_list.html b/src/sentry/templates/sentry/events/event_list.html
index d0be45f2c8..47f008257c 100644
--- a/src/sentry/templates/sentry/events/event_list.html
+++ b/src/sentry/templates/sentry/events/event_list.html
@@ -8,7 +8,7 @@
 {% block breadcrumb %}
     {{ block.super }}
     <li class="divider"></li>
-    <li><a href="{% url sentry-events project.id %}">{% trans "Stream" %}</a></li>
+    <li><a href="{% url sentry-events project.team.slug project.id %}">{% trans "Stream" %}</a></li>
 {% endblock %}
 
 {% block sidebar %}
diff --git a/src/sentry/templates/sentry/header.html b/src/sentry/templates/sentry/header.html
index 50e4f777d1..fc9323a926 100644
--- a/src/sentry/templates/sentry/header.html
+++ b/src/sentry/templates/sentry/header.html
@@ -37,8 +37,6 @@
                                 <ul class="dropdown-menu">
                                     <li><a href="{% url sentry-account-settings %}">{% trans "Account" %}</a></li>
                                     <li class="divider">
-                                    <li><a href="{% url sentry-project-list %}">{% trans "Projects" %}</a></li>
-                                    <li><a href="{% url sentry-team-list %}">{% trans "Teams" %}</a></li>
                                     {% if request.user.is_staff %}
                                         <li><a href="{% url sentry-admin-status %}">{% trans "Admin" %}</a></li>
                                     {% endif %}
diff --git a/src/sentry/templates/sentry/projects/base.html b/src/sentry/templates/sentry/projects/base.html
index 3c36a1781e..f3472ed43a 100644
--- a/src/sentry/templates/sentry/projects/base.html
+++ b/src/sentry/templates/sentry/projects/base.html
@@ -12,12 +12,12 @@
 
 {% block page_header %}
     {% if can_create_projects %}
-        <a href="{% url sentry-new-project %}" class="btn pull-right btn-primary">{% trans "Create a new project" %}</a>
+        <a href="{% url sentry-new-project team.slug %}" class="btn pull-right btn-primary">{% trans "Create a new project" %}</a>
     {% endif %}
     <ul class="breadcrumb">
         <li><a href="{% url sentry %}" class="dashboard-btn" title="{% trans "Dashboard" %}"><i aria-hidden="true" class="icon-list"></i></a></li>
         <li class="divider"></li>
-        <li><a href="{% url sentry-project-list %}">{% trans "Projects" %}</a></li>
+        <li><a href="{% url sentry-project-list team.slug %}">{% trans "Projects" %}</a></li>
         {% block breadcrumb %}{% endblock %}
     </ul>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/projects/cannot_create_teams.html b/src/sentry/templates/sentry/projects/cannot_create_teams.html
index cd47454c4a..1fbddd5f8e 100644
--- a/src/sentry/templates/sentry/projects/cannot_create_teams.html
+++ b/src/sentry/templates/sentry/projects/cannot_create_teams.html
@@ -7,7 +7,7 @@
 {% block breadcrumb %}
     {{ block.super }}
     <li class="divider"></li>
-    <li><a href="{% url sentry-new-project %}">{% trans "New Project" %}</a></li>
+    <li><a href="{% url sentry-new-project team.slug %}">{% trans "New Project" %}</a></li>
 {% endblock %}
 
 {% block main %}
diff --git a/src/sentry/templates/sentry/projects/list.html b/src/sentry/templates/sentry/projects/list.html
index de954680ed..2cacbb57fd 100644
--- a/src/sentry/templates/sentry/projects/list.html
+++ b/src/sentry/templates/sentry/projects/list.html
@@ -10,11 +10,11 @@
 
 {% block page_header %}
     {% if can_create_projects %}
-        <a href="{% url sentry-new-project %}" class="btn pull-right btn-primary">{% trans "Create a new project" %}</a>
+        <a href="{% url sentry-new-project team.slug %}" class="btn pull-right btn-primary">{% trans "Create a new project" %}</a>
     {% endif %}
 
     <ul class="breadcrumb">
-        <li><a href="{% url sentry-project-list %}">{% trans "Projects" %}</a></li>
+        <li><a href="{% url sentry-project-list team.slug %}">{% trans "Projects" %}</a></li>
         {% block breadcrumb %}{% endblock %}
     </ul>
 {% endblock %}
@@ -42,7 +42,7 @@
                     {% for project in PROJECT_LIST %}
                         <tr>
                             <td>
-                                <a href="{% url sentry-manage-project project.slug %}">{{ project.name }}</a> <small>(<a href="{% url sentry project.slug %}">{% trans "Stream" %}</a>)</small><br/>
+                                <a href="{% url sentry-manage-project project.team.slug project.slug %}">{{ project.name }}</a> <small>(<a href="{% url sentry project.slug %}">{% trans "Stream" %}</a>)</small><br/>
                                 {% if project.member_dsn %}
                                     <small><code class="clippy">{{ project.member_dsn }}</code></small>
                                 {% endif %}
diff --git a/src/sentry/templates/sentry/projects/new.html b/src/sentry/templates/sentry/projects/new.html
index 772cc5c8ad..9fbdf22003 100644
--- a/src/sentry/templates/sentry/projects/new.html
+++ b/src/sentry/templates/sentry/projects/new.html
@@ -8,7 +8,7 @@
 {% block breadcrumb %}
     {{ block.super }}
     <li class="divider"></li>
-    <li><a href="{% url sentry-new-project %}">{% trans "New Project" %}</a></li>
+    <li><a href="{% url sentry-new-project team.slug %}">{% trans "New Project" %}</a></li>
 {% endblock %}
 
 {% block main %}
diff --git a/src/sentry/templates/sentry/teams/new.html b/src/sentry/templates/sentry/teams/new.html
index 4cfe134e28..c2cc93aaa0 100644
--- a/src/sentry/templates/sentry/teams/new.html
+++ b/src/sentry/templates/sentry/teams/new.html
@@ -6,7 +6,7 @@
 
 {% block breadcrumb %}
     <li class="divider"></li>
-    <li><a href="{% url sentry-new-project %}">{% trans "New Team" %}</a></li>
+    <li><a href="{% url sentry-new-project team.slug %}">{% trans "New Team" %}</a></li>
 {% endblock %}
 
 {% block main %}
diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index 7f97d38b6f..350cff19dd 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -28,7 +28,8 @@ from django.test import TestCase, TransactionTestCase
 from django.test.client import Client
 from django.utils.importlib import import_module
 
-from sentry.models import Project, ProjectOption, Option, Team
+from sentry.models import (Project, ProjectOption, Option, Team, Group,
+    Event)
 
 
 def with_settings(**mapping):
@@ -111,6 +112,22 @@ class BaseTestCase(Exam):
             team=self.team,
         )
 
+    @fixture
+    def group(self):
+        return Group.objects.create(
+            message='Foo bar',
+            project=self.project,
+        )
+
+    @fixture
+    def event(self):
+        return Event.objects.create(
+            event_id='a' * 32,
+            group=self.group,
+            message='Foo bar',
+            project=self.project,
+        )
+
     def assertRequiresAuthentication(self, path, method='GET'):
         resp = getattr(self.client, method.lower())(path)
         assert resp.status_code == 302
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 51aa6be9bf..2af93e9b66 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -672,8 +672,16 @@ def crossdomain_xml_index(request):
     return response
 
 
-@has_access
-def crossdomain_xml(request, project):
+def crossdomain_xml(request, project_id):
+    if project_id.isdigit():
+        lookup = {'id': project_id}
+    else:
+        lookup = {'slug': project_id}
+    try:
+        project = Project.objects.get_from_cache(**lookup)
+    except Project.DoesNotExist:
+        return HttpResponse(status_code=404)
+
     origin_list = get_origins(project)
     if origin_list == '*':
         origin_list = [origin_list]
diff --git a/src/sentry/web/frontend/events.py b/src/sentry/web/frontend/events.py
index 50a2f18159..0f13497e5d 100644
--- a/src/sentry/web/frontend/events.py
+++ b/src/sentry/web/frontend/events.py
@@ -23,7 +23,7 @@ from sentry.web.forms import ReplayForm
 
 @login_required
 @has_access
-def event_list(request, project):
+def event_list(request, team, project):
     filters = []
     for cls in get_filters(Event, project):
         try:
@@ -49,6 +49,7 @@ def event_list(request, project):
     has_realtime = False
 
     return render_to_response('sentry/events/event_list.html', {
+        'team': team,
         'project': project,
         'has_realtime': has_realtime,
         'event_list': event_list,
@@ -58,9 +59,9 @@ def event_list(request, project):
     }, request)
 
 
-@login_required
+@has_access
 @csrf_protect
-def replay_event(request, project_id, event_id):
+def replay_event(request, team, project, event_id, group_id=None):
     try:
         event = Event.objects.get(pk=event_id)
     except Event.DoesNotExist:
@@ -101,7 +102,8 @@ def replay_event(request, project_id, event_id):
         result = None
 
     context = {
-        'project': event.project,
+        'team': team,
+        'project': project,
         'group': event.group,
         'event': event,
         'form': form,
diff --git a/src/sentry/web/frontend/generic.py b/src/sentry/web/frontend/generic.py
index a1b811eb10..bd0276f4ef 100644
--- a/src/sentry/web/frontend/generic.py
+++ b/src/sentry/web/frontend/generic.py
@@ -11,29 +11,21 @@ from django.conf import settings as dj_settings
 from django.core.urlresolvers import reverse
 
 from sentry.conf import settings
-from sentry.permissions import can_create_projects
+from sentry.models import Team
 from sentry.web.decorators import login_required
-from sentry.web.helpers import get_login_url, get_project_list, \
-  render_to_response
 
 STATIC_PATH_CACHE = {}
 
 
 @login_required
 def dashboard(request, template='dashboard.html'):
-    project_list = get_project_list(request.user, key='slug')
-    has_projects = len(project_list) > 1 or (len(project_list) == 1 and project_list.values()[0].pk != settings.PROJECT)
+    team_list = Team.objects.get_for_user(request.user)
+    if not team_list:
+        return HttpResponseRedirect(reverse('sentry-new-team'))
 
-    if not has_projects:
-        if not request.user.is_authenticated():
-            request.session['_next'] = request.get_full_path()
-            return HttpResponseRedirect(get_login_url())
-        elif can_create_projects(request.user):
-            return HttpResponseRedirect(reverse('sentry-new-project'))
-
-    return render_to_response('sentry/%s' % template, {
-        'project_list': project_list.values(),
-    }, request)
+    # Redirect to first team
+    # TODO: maybe store this in a cookie and redirect to last seen team?
+    return HttpResponseRedirect(reverse('sentry', args=[team_list.values()[0].slug]))
 
 
 def wall_display(request):
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index be2de1f13e..8bac7a7ef8 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -147,12 +147,13 @@ def _get_group_list(request, project):
 @login_required
 @has_access
 def dashboard(request, team):
-    project_list = Project.objects.filter(team=team)
-    has_projects = len(project_list) > 1 or (len(project_list) == 1 and project_list.values()[0].pk != settings.PROJECT)
+    project_list = list(Project.objects.filter(team=team))
 
-    if not has_projects:
-        if can_create_projects(request.user, team=team):
-            return HttpResponseRedirect(reverse('sentry-new-project'))
+    if not project_list and can_create_projects(request.user, team=team):
+        return HttpResponseRedirect(reverse('sentry-new-project', args=[team.slug]))
+
+    for project in project_list.values():
+        project.team = team
 
     return render_to_response('sentry/dashboard.html', {
         'team': team,
@@ -361,6 +362,7 @@ def group_event_details(request, team, project, group, event_id):
         prev_event = None
 
     return render_to_response('sentry/groups/event.html', {
+        'team': team,
         'project': project,
         'page': 'event',
         'group': group,
@@ -400,4 +402,9 @@ def group_plugin_action(request, team, project, group_id, slug):
     response = plugin.get_view_response(request, group)
     if response:
         return response
-    return HttpResponseRedirect(request.META.get('HTTP_REFERER') or reverse('sentry', kwargs={'project_id': group.project.slug}))
+
+    redirect = request.META.get('HTTP_REFERER') or reverse('sentry', kwargs={
+        'team_slug': team.slug,
+        'project_id': group.project.slug
+    })
+    return HttpResponseRedirect(redirect)
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 141f8f53de..2c6a07495d 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -146,7 +146,7 @@ def remove_project(request, project):
         else:
             raise ValueError(removal_type)
 
-        return HttpResponseRedirect(reverse('sentry-project-list'))
+        return HttpResponseRedirect(reverse('sentry-project-list', args=[project.team.slug]))
 
     context = csrf(request)
     context.update({
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index c7d3be324e..a8a01cefc6 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -77,8 +77,9 @@ urlpatterns = patterns('',
         name='sentry-accept-invite'),
 
     # Settings - Projects
-    url(r'^account/projects/$', projects.project_list, name='sentry-project-list'),
-    url(r'^account/projects/new/$', projects.new_project, name='sentry-new-project'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/projects/$', projects.project_list, name='sentry-project-list'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/projects/new/$', projects.new_project, name='sentry-new-project'),
+
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/$', projects.manage_project,
         name='sentry-manage-project'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/$', docs.client_help,
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 033133726a..2098fb0c17 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -26,21 +26,6 @@ class DashboardTest(BaseViewTest):
     def path(self):
         return reverse('sentry')
 
-    def test_redirects_to_new_project_when_no_projects(self):
-        self.login()
-
-        resp = self.client.get(self.path, follow=True)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/projects/new.html')
-
-    def test_shows_dashboard_with_a_project(self):
-        self.login()
-
-        Project.objects.create(name='foo', owner=self.user)
-        resp = self.client.get(reverse('sentry'), follow=True)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/dashboard.html')
-
     def test_requires_authentication(self):
         resp = self.client.get(reverse('sentry'), follow=True)
         self.assertEquals(resp.status_code, 200)
@@ -115,94 +100,206 @@ class StatsTest(BaseViewTest):
         self.assertTemplateUsed(resp, 'sentry/admin/stats.html')
 
 
-class SentryViewsTest(BaseViewTest):
-    fixtures = ['tests/fixtures/views.json']
-
-    @before
-    def login_user(self):
-        self.login_as(self.user)
-
-    def test_stream_loads(self):
-        resp = self.client.get(reverse('sentry-stream', kwargs={'project_id': 1}))
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
+class GroupDetailsTest(BaseViewTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-group', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+        })
 
-    def test_group_details(self):
-        resp = self.client.get(reverse('sentry-group', kwargs={'project_id': 1, 'group_id': 2}))
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/details.html')
         assert 'group' in resp.context
         assert 'project' in resp.context
-        assert resp.context['group'].id == 2
-        assert resp.context['project'].id == 1
+        assert 'team' in resp.context
+        assert resp.context['group'] == self.group
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+
+
+class GroupListTest(BaseViewTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-stream', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+        })
 
-    def test_group_event_list(self):
-        resp = self.client.get(reverse('sentry-group-events', kwargs={'project_id': 1, 'group_id': 2}))
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
+        assert 'project' in resp.context
+        assert 'team' in resp.context
+        assert 'event_list' in resp.context
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+
+
+class GroupEventListTest(BaseViewTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-events', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
         assert 'group' in resp.context
         assert 'project' in resp.context
+        assert 'team' in resp.context
         assert 'event_list' in resp.context
-        assert resp.context['group'].id == 2
-        assert resp.context['project'].id == 1
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+        assert resp.context['group'] == self.group
+
 
-    def test_group_tag_list(self):
-        resp = self.client.get(reverse('sentry-group-tags', kwargs={'project_id': 1, 'group_id': 2}))
+class GroupTagListTest(BaseViewTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-tags', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/tag_list.html')
         assert 'group' in resp.context
         assert 'project' in resp.context
+        assert 'team' in resp.context
         assert 'tag_list' in resp.context
-        assert resp.context['group'].id == 2
-        assert resp.context['project'].id == 1
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+        assert resp.context['group'] == self.group
+
 
-    def test_group_message_details(self):
-        resp = self.client.get(reverse('sentry-group-event', kwargs={'project_id': 1, 'group_id': 2, 'event_id': 4}))
+class GroupEventDetailsTest(BaseViewTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-event', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+            'event_id': self.event.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/groups/event.html')
         assert 'group' in resp.context
         assert 'project' in resp.context
+        assert 'team' in resp.context
         assert 'event' in resp.context
-        assert resp.context['group'].id == 2
-        assert resp.context['project'].id == 1
-        assert resp.context['event'].id == 4
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+        assert resp.context['group'] == self.group
+        assert resp.context['event'] == self.event
 
-    def test_group_json_multi(self):
-        resp = self.client.get(reverse('sentry-group-events-json', kwargs={'project_id': 1, 'group_id': 2}))
-        self.assertEquals(resp.status_code, 200)
-        self.assertEquals(resp['Content-Type'], 'application/json')
-        self.assertEquals(json.loads(resp.content)[0]['level'], 'error')
-        resp = self.client.get(reverse('sentry-group-events-json', kwargs={'project_id': 1, 'group_id': 2}), {'limit': 1})
-        self.assertEquals(resp.status_code, 200)
-        resp = self.client.get(reverse('sentry-group-events-json', kwargs={'project_id': 1, 'group_id': 2}), {'limit': settings.MAX_JSON_RESULTS + 1})
-        self.assertEquals(resp.status_code, 400)
 
-    def test_group_events_details_json(self):
-        resp = self.client.get(reverse('sentry-group-event-json', kwargs={'project_id': 1, 'group_id': 2, 'event_id_or_latest': 'latest'}))
-        self.assertEquals(resp.status_code, 200)
-        self.assertEquals(resp['Content-Type'], 'application/json')
-        self.assertEquals(json.loads(resp.content)['level'], 'error')
+class GroupEventListJsonTest(BaseViewTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-events-json', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+        })
 
-    def test_manage_users(self):
-        resp = self.client.get(reverse('sentry-admin-users'), follow=True)
-        self.assertEquals(resp.status_code, 200)
+    def test_does_render(self):
+        self.login()
+        # HACK: force fixture creation
+        self.event
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        assert resp['Content-Type'] == 'application/json'
+        data = json.loads(resp.content)
+        assert len(data) == 1
+        assert data[0]['id'] == str(self.event.event_id)
+
+    def test_does_not_allow_beyond_limit(self):
+        self.login()
+        resp = self.client.get(self.path, {'limit': settings.MAX_JSON_RESULTS + 1})
+        assert resp.status_code == 400
+
+
+class GroupEventJsonTest(BaseViewTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-event-json', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+            'event_id_or_latest': self.event.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        assert resp['Content-Type'] == 'application/json'
+        data = json.loads(resp.content)
+        assert data['id'] == self.event.event_id
+
+
+class ManageUsersTest(BaseViewTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-admin-users')
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/admin/users/list.html')
 
-    def test_event_list(self):
-        resp = self.client.get(reverse('sentry-events', kwargs={'project_id': self.project.id}))
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/events/event_list.html')
 
-    def test_replay_event(self):
-        # bad event_id
-        resp = self.client.get(reverse('sentry-replay', kwargs={'project_id': self.project.id, 'event_id': 1}))
-        self.assertEquals(resp.status_code, 302)
+# class ReplayTest(BaseViewTest):
+#     @fixture
+#     def path(self):
+#         return reverse('sentry-replay', kwargs={
+#             'team_slug': self.team.slug,
+#             'project_id': self.project.slug,
+#             'group_id': self.group.id,
+#             'event_id': self.id,
+#         })
 
-        # valid params
-        # self.client.login(username='admin', password='admin')
-        # resp = self.client.get(reverse('sentry-replay', kwargs={'project_id': 1, 'event_id': 4}))
-        # self.assertEquals(resp.status_code, 200)
-        # self.assertTemplateUsed(resp, 'sentry/events/replay.html')
+#     def test_does_render(self):
+#         self.login()
+#         resp = self.client.get(self.id)
+#         self.assertEquals(resp.status_code, 200)
+#         self.assertTemplateUsed(resp, 'sentry/events/replay.html')
+
+
+class EventListTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-events', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.id,
+        })
+
+    def test_does_render(self):
+        self.login_as(self.user)
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/events/event_list.html')
 
 
 class PermissionBase(TestCase):
@@ -281,29 +378,12 @@ class PermissionBase(TestCase):
             self.assertTemplateNotUsed(resp, template)
 
 
-class ProjectListTest(PermissionBase):
-    template = 'sentry/projects/list.html'
+class NewTeamProjectTest(PermissionBase):
+    template = 'sentry/teams/projects/new.html'
 
     @fixture
     def path(self):
-        return reverse('sentry-project-list')
-
-    def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, self.admin.username)
-
-    def test_user_can_load(self):
-        self._assertPerm(self.path, self.template, self.nobody.username)
-
-    def test_anonymous_cannot_load(self):
-        self._assertPerm(self.path, self.template, None, False)
-
-
-class NewProjectTest(PermissionBase):
-    template = 'sentry/projects/new.html'
-
-    @fixture
-    def path(self):
-        return reverse('sentry-new-project')
+        return reverse('sentry-new-project', args=[self.team.slug])
 
     def test_admin_can_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
@@ -321,10 +401,6 @@ class NewProjectTest(PermissionBase):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
             self._assertPerm(self.path, self.template, self.admin.username)
 
-    def test_public_creation_user_can_load(self):
-        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
-            self._assertPerm(self.path, self.template, self.nobody.username)
-
     def test_public_anonymous_cannot_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
             self._assertPerm(self.path, self.template, None, False)
