commit af314b134c8f627055c3973df6b5a20a17b53386
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Mon Jul 9 10:51:12 2018 +0200

    feat: Prepare loader for primetime (#8955)

diff --git a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
index 43869e3730..d69690629e 100644
--- a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
@@ -1,5 +1,4 @@
-{% load sentry_helpers %}
-// Sentry Loader
+{% load sentry_helpers %}// Sentry Loader
 (function(_window, _document, _script, _onerror, _onunhandledrejection) {
   // Create a namespace and attach function that will store captured exception
   // Because functions are also objects, we can attach the queue itself straight to it and save some bytes
@@ -49,8 +48,18 @@
 
       var data = queue.data;
       var SDK = _window.Sentry;
+
       // Configure it using provided DSN and config object
-      SDK.init({{ config|to_json|safe }});
+      var options = {{ config|to_json|safe }};
+      for (var key in window.SENTRY_OPTIONS) {
+        options[key] = SENTRY_OPTIONS[key];
+      }
+      SDK.init(options);
+
+      var event = document.createEvent('HTMLEvents');
+      event.initEvent('sentryLoaded', true, true);
+      document.dispatchEvent(event);
+
       // Because we installed the SDK, at this point we have an access to TraceKit's handler,
       // which can take care of browser differences (eg. missing exception argument in onerror)
       var tracekitErrorHandler = _window[_onerror];
@@ -59,7 +68,7 @@
       if (data.length) {
         for (var i = 0; i < data.length; i++) {
           if (data[i].e) {
-            tracekitErrorHandler(data[i].e);
+            tracekitErrorHandler.apply(_window, data[i].e);
           } else if (data[i].p) {
             SDK.captureException(data[i].p);
           }
diff --git a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
index b6bb08b4e2..919fccb014 100644
--- a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
@@ -1,2 +1,2 @@
-{% load sentry_helpers %}(function(c,a,g,e,h){var f=function(b){f.data.push(b)};f.data=[];var k=c[e];c[e]=function(b,a,e,d,h){f({e:[].slice.call(arguments)});k&&k.apply(c,arguments)};var l=c[h];c[h]=function(b){f({p:b.reason});l&&l.apply(c,arguments)};var m=a.getElementsByTagName(g)[0];a=a.createElement(g);a.src="{{ jsSdkUrl|safe }}";a.crossorigin="anonymous";a.addEventListener("load",function(){try{c[e]=k;c[h]=l;var b=f.data,a=c.Sentry;a.init({{ config|to_json|safe }});
-var g=c[e];if(b.length)for(var d=0;d<b.length;d++)b[d].e?g(b[d].e):b[d].p&&a.captureException(b[d].p)}catch(n){console.log(n)}});m.parentNode.insertBefore(a,m)})(window,document,"script","onerror","onunhandledrejection");
+{% load sentry_helpers %}(function(a,b,e,f,h){var g=function(a){g.data.push(a)};g.data=[];var l=a[f];a[f]=function(d,b,c,f,h){g({e:[].slice.call(arguments)});l&&l.apply(a,arguments)};var n=a[h];a[h]=function(d){g({p:d.reason});n&&n.apply(a,arguments)};var k=b.getElementsByTagName(e)[0];b=b.createElement(e);b.src="{{ jsSdkUrl|safe }}";b.crossorigin="anonymous";b.addEventListener("load",function(){try{a[f]=l;a[h]=n;var d=g.data,b=a.Sentry,c={{ config|to_json|safe }},
+m;for(m in window.SENTRY_OPTIONS)c[m]=SENTRY_OPTIONS[m];b.init(c);var e=document.createEvent("HTMLEvents");e.initEvent("sentryLoaded",!0,!0);document.dispatchEvent(e);var k=a[f];if(d.length)for(c=0;c<d.length;c++)d[c].e?k.apply(a,d[c].e):d[c].p&&b.captureException(d[c].p)}catch(p){console.log(p)}});k.parentNode.insertBefore(b,k)})(window,document,"script","onerror","onunhandledrejection");
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index e3ee8b3a3b..6c4416d50e 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -11,6 +11,7 @@ import functools
 import os.path
 from collections import namedtuple
 from datetime import timedelta
+from random import randint
 
 import pytz
 import six
@@ -430,3 +431,10 @@ def soft_break(value, length):
         length,
         functools.partial(soft_hyphenate, length=max(length // 10, 10)),
     )
+
+
+@register.assignment_tag
+def random_int(a, b=None):
+    if b is None:
+        a, b = 0, a
+    return randint(a, b)
