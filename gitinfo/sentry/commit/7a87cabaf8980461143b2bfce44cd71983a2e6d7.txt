commit 7a87cabaf8980461143b2bfce44cd71983a2e6d7
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 14 10:58:28 2012 -0800

    Correctly handle optional lineno in get_stacktrace

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index f2d8d5da81..2912dfb02b 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -338,12 +338,13 @@ class Stacktrace(Interface):
             'Stacktrace (most recent call last):', '',
         ]
         for frame in self.frames:
+            pieces = ['  File "%(filename)s"']
+            if 'lineno' in frame:
+                pieces.append(', line %(lineno)s')
             if 'function' in frame:
-                result.append('  File "%(filename)s", line %(lineno)s, in %(function)s' % frame)
-            elif 'lineno' in frame:
-                result.append('  File "%(filename)s", line %(lineno)s' % frame)
-            else:
-                result.append('  File "%(filename)s"')
+                pieces.append(', in %(function)s')
+
+            result.append(''.join(pieces) % frame)
             if 'context_line' in frame:
                 result.append('    %s' % frame['context_line'].strip())
 
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index 63c688fc4b..8ab6ff864f 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -99,3 +99,22 @@ class StacktraceTest(TestCase):
         result = interface.to_html(event)
         get_traceback.assert_called_once_with(event)
         self.assertTrue('<div id="traceback" class="module">' in result)
+
+    def test_get_stacktrace_with_only_filename(self):
+        event = mock.Mock(spec=Event)
+        interface = Stacktrace(frames=[{'filename': 'foo'}, {'filename': 'bar'}])
+        result = interface.get_stacktrace(event)
+        self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo"\n  File "bar"')
+
+    def test_get_stacktrace_with_filename_and_function(self):
+        event = mock.Mock(spec=Event)
+        interface = Stacktrace(frames=[{'filename': 'foo', 'function': 'biz'}, {'filename': 'bar', 'function': 'baz'}])
+        result = interface.get_stacktrace(event)
+        self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo", in biz\n  File "bar", in baz')
+
+    def test_get_stacktrace_with_filename_function_lineno_and_context(self):
+        event = mock.Mock(spec=Event)
+        interface = Stacktrace(frames=[{'filename': 'foo', 'function': 'biz', 'lineno': 3, 'context_line': '  def foo(r):'},
+            {'filename': 'bar', 'function': 'baz', 'lineno': 5, 'context_line': '    return None'}])
+        result = interface.get_stacktrace(event)
+        self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo", line 3, in biz\n    def foo(r):\n  File "bar", line 5, in baz\n    return None')
