commit 5fe3b2d2183c330c9dcefe974653a6640381f790
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Mar 19 10:41:56 2019 +0100

    ref: Upgrade to symbolic 6.0.0 (#12390)

diff --git a/requirements-base.txt b/requirements-base.txt
index 422d4e24b0..1f35d05e1f 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -65,7 +65,7 @@ sqlparse>=0.1.16,<0.2.0
 statsd>=3.1.0,<3.2.0
 strict-rfc3339>=0.7
 structlog==16.1.0
-symbolic>=5.8.1,<6.0.0
+symbolic>=6.0.0,<7.0.0
 toronado>=0.0.11,<0.1.0
 ua-parser>=0.6.1,<0.8.0
 # for bitbucket client
diff --git a/src/sentry/api/endpoints/debug_files.py b/src/sentry/api/endpoints/debug_files.py
index 66cefac152..5b846c0885 100644
--- a/src/sentry/api/endpoints/debug_files.py
+++ b/src/sentry/api/endpoints/debug_files.py
@@ -16,7 +16,7 @@ from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.content_negotiation import ConditionalContentNegotiation
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.constants import KNOWN_DIF_TYPES
+from sentry.constants import KNOWN_DIF_FORMATS
 from sentry.models import ChunkFileState, FileBlobOwner, ProjectDebugFile, \
     create_files_from_dif_zip, get_assemble_status, set_assemble_status
 from sentry.utils import json
@@ -109,10 +109,10 @@ class DebugFilesEndpoint(ProjectEndpoint):
                 | Q(cpu_name__icontains=query) \
                 | Q(file__headers__icontains=query)
 
-            KNOWN_DIF_TYPES_REVERSE = dict((v, k) for (k, v) in six.iteritems(KNOWN_DIF_TYPES))
-            dif_type = KNOWN_DIF_TYPES_REVERSE.get(query)
-            if dif_type:
-                q |= Q(file__headers__icontains=dif_type)
+            KNOWN_DIF_FORMATS_REVERSE = dict((v, k) for (k, v) in six.iteritems(KNOWN_DIF_FORMATS))
+            file_format = KNOWN_DIF_FORMATS_REVERSE.get(query)
+            if file_format:
+                q |= Q(file__headers__icontains=file_format)
 
             queryset = queryset.filter(q)
 
diff --git a/src/sentry/api/serializers/models/debug_file.py b/src/sentry/api/serializers/models/debug_file.py
index be621b1e36..f41eae8c6d 100644
--- a/src/sentry/api/serializers/models/debug_file.py
+++ b/src/sentry/api/serializers/models/debug_file.py
@@ -15,7 +15,7 @@ class DebugFileSerializer(Serializer):
             'debugId': obj.debug_id,
             'cpuName': obj.cpu_name,
             'objectName': obj.object_name,
-            'symbolType': obj.dif_type,
+            'symbolType': obj.file_format,
             'headers': obj.file.headers,
             'size': obj.file.size,
             'sha1': obj.file.checksum,
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 84462b8cc3..a9d76edf07 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -220,7 +220,7 @@ FILTER_MASK = '[Filtered]'
 MAX_SYM = 256
 
 # Known debug information file mimetypes
-KNOWN_DIF_TYPES = {
+KNOWN_DIF_FORMATS = {
     'text/x-breakpad': 'breakpad',
     'application/x-mach-binary': 'macho',
     'application/x-elf-binary': 'elf',
diff --git a/src/sentry/lang/java/plugin.py b/src/sentry/lang/java/plugin.py
index e62ec9d7c0..ffcd646cfa 100644
--- a/src/sentry/lang/java/plugin.py
+++ b/src/sentry/lang/java/plugin.py
@@ -56,7 +56,7 @@ class JavaStacktraceProcessor(StacktraceProcessor):
             if dif_path is None:
                 error_type = EventError.PROGUARD_MISSING_MAPPING
             else:
-                view = ProguardMappingView.from_path(dif_path)
+                view = ProguardMappingView.open(dif_path)
                 if not view.has_line_info:
                     error_type = EventError.PROGUARD_MISSING_LINENO
                 else:
diff --git a/src/sentry/lang/native/cfi.py b/src/sentry/lang/native/cfi.py
index ce5a1a2553..b8996f14f7 100644
--- a/src/sentry/lang/native/cfi.py
+++ b/src/sentry/lang/native/cfi.py
@@ -47,7 +47,7 @@ class ThreadRef(object):
             return None
 
         return (
-            module.id,
+            module.debug_id,
             rebase_addr(frame['instruction_addr'], module)
         )
 
@@ -103,7 +103,7 @@ class ThreadRef(object):
 
         values = []
         for module, frame in self.resolved_frames:
-            module_id = module and module.id
+            module_id = module and module.debug_id
             addr = frame['instruction_addr']
             if module:
                 addr = '0x%x' % rebase_addr(addr, module)
@@ -242,7 +242,7 @@ def reprocess_minidump_with_cfi(data):
         return handle.result()
 
     # Determine modules loaded into the process during the crash
-    debug_ids = [module.id for module in handle.iter_modules()]
+    debug_ids = [module.debug_id for module in handle.iter_modules()]
     if not debug_ids:
         return handle.result()
 
diff --git a/src/sentry/lang/native/minidump.py b/src/sentry/lang/native/minidump.py
index 8d15cae705..d85ee52a09 100644
--- a/src/sentry/lang/native/minidump.py
+++ b/src/sentry/lang/native/minidump.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
 from django.core.files.uploadedfile import InMemoryUploadedFile, TemporaryUploadedFile
-from symbolic import arch_from_breakpad, ProcessState, id_from_breakpad
+
 import dateutil.parser as dp
-from sentry.utils.safe import get_path
 import logging
-import msgpack
-from msgpack import UnpackException, ExtraData
+from msgpack import unpack, Unpacker, UnpackException, ExtraData
+from symbolic import normalize_arch, ProcessState, id_from_breakpad
+
+from sentry.utils.safe import get_path
 
 minidumps_logger = logging.getLogger('sentry.minidumps')
 
@@ -54,7 +55,7 @@ def merge_process_state_event(data, state, cfi=None):
     os['name'] = MINIDUMP_OS_TYPES.get(info.os_name, info.os_name)
     os['version'] = info.os_version
     os['build'] = info.os_build
-    device['arch'] = arch_from_breakpad(info.cpu_family)
+    device['arch'] = normalize_arch(info.cpu_family)
 
     # We can extract stack traces here already but since CFI is not
     # available yet (without debug symbols), the stackwalker will
@@ -110,7 +111,7 @@ def merge_attached_event(mpack_event, data):
         return
 
     try:
-        event = msgpack.unpack(mpack_event)
+        event = unpack(mpack_event)
     except (UnpackException, ExtraData) as e:
         minidumps_logger.exception(e)
         return
@@ -127,7 +128,7 @@ def merge_attached_breadcrumbs(mpack_breadcrumbs, data):
         return
 
     try:
-        unpacker = msgpack.Unpacker(mpack_breadcrumbs)
+        unpacker = Unpacker(mpack_breadcrumbs)
         breadcrumbs = list(unpacker)
     except (UnpackException, ExtraData) as e:
         minidumps_logger.exception(e)
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index c4246bda6a..194438d10f 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -113,7 +113,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         processable_frame.data = {
             'instruction_addr': instr_addr,
             'obj': obj,
-            'debug_id': obj.id if obj is not None else None,
+            'debug_id': obj.debug_id if obj is not None else None,
             'symbolserver_match': None,
         }
 
@@ -125,7 +125,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                     # the address for the cache key to be within the image
                     # the same way as we do it in the symbolizer.
                     rebase_addr(instr_addr, obj),
-                    obj.id,
+                    obj.debug_id,
                     obj.arch,
                     obj.size,
                 )
@@ -162,13 +162,13 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             # uuid.  If we encounter things with an age appended or
             # similar we need to skip.
             try:
-                uuid.UUID(obj.id)
+                uuid.UUID(obj.debug_id)
             except (ValueError, TypeError):
                 continue
 
             to_lookup.append(
                 {
-                    'object_uuid': obj.id,
+                    'object_uuid': obj.debug_id,
                     'object_name': obj.name or '<unknown>',
                     'addr': '0x%x' % rebase_addr(pf.data['instruction_addr'], obj)
                 }
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 57adf8c24c..8a6a883f0a 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -63,7 +63,7 @@ class SymbolicationFailed(Exception):
         self.image_name = None
         self.image_path = None
         if obj is not None:
-            self.image_uuid = six.text_type(obj.id)
+            self.image_uuid = six.text_type(obj.debug_id)
             if obj.name:
                 self.image_path = obj.name
                 self.image_name = image_name(obj.name)
@@ -222,13 +222,13 @@ class Symbolizer(object):
         return obj.name and _sim_platform_re.search(obj.name) is not None
 
     def _symbolize_app_frame(self, instruction_addr, obj, sdk_info=None, trust=None):
-        symcache = self.symcaches.get(obj.id)
+        symcache = self.symcaches.get(obj.debug_id)
         if symcache is None:
             # In case we know what error happened on symcache conversion
             # we can report it to the user now.
-            if obj.id in self.symcaches_conversion_errors:
+            if obj.debug_id in self.symcaches_conversion_errors:
                 raise SymbolicationFailed(
-                    message=self.symcaches_conversion_errors[obj.id],
+                    message=self.symcaches_conversion_errors[obj.debug_id],
                     type=EventError.NATIVE_BAD_DSYM,
                     obj=obj
                 )
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index eaa8a61710..5c0471ceaf 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -5,7 +5,7 @@ import six
 import logging
 
 from collections import namedtuple
-from symbolic import parse_addr, arch_from_macho, arch_is_known
+from symbolic import parse_addr
 
 from sentry.interfaces.contexts import DeviceContextType
 from sentry.utils.safe import get_path
@@ -61,23 +61,7 @@ def cpu_name_from_data(data):
     if device and device.get('arch'):
         return device['arch']
 
-    # TODO: kill this here.  we want to not support that going forward
-    unique_cpu_name = None
-    for img in get_path(data, 'debug_meta', 'images', filter=True, default=()):
-        if img.get('arch') and arch_is_known(img['arch']):
-            cpu_name = img['arch']
-        elif img.get('cpu_type') is not None \
-                and img.get('cpu_subtype') is not None:
-            cpu_name = arch_from_macho(img['cpu_type'], img['cpu_subtype'])
-        else:
-            cpu_name = None
-        if unique_cpu_name is None:
-            unique_cpu_name = cpu_name
-        elif unique_cpu_name != cpu_name:
-            unique_cpu_name = None
-            break
-
-    return unique_cpu_name
+    return None
 
 
 def rebase_addr(instr_addr, obj):
diff --git a/src/sentry/models/debugfile.py b/src/sentry/models/debugfile.py
index 19e7ec3ea3..e0a6673a45 100644
--- a/src/sentry/models/debugfile.py
+++ b/src/sentry/models/debugfile.py
@@ -23,14 +23,14 @@ from jsonfield import JSONField
 from django.db import models, transaction, IntegrityError
 from django.db.models.fields.related import OneToOneRel
 
-from symbolic import FatObject, SymbolicError, ObjectErrorUnsupportedObject, \
+from symbolic import Archive, SymbolicError, ObjectErrorUnsupportedObject, \
     SYMCACHE_LATEST_VERSION, SymCache, SymCacheErrorMissingDebugInfo, \
     SymCacheErrorMissingDebugSection, CfiCache, CfiErrorMissingDebugInfo, \
     CFICACHE_LATEST_VERSION
 
 from sentry import options
 from sentry.cache import default_cache
-from sentry.constants import KNOWN_DIF_TYPES
+from sentry.constants import KNOWN_DIF_FORMATS
 from sentry.db.models import FlexibleForeignKey, Model, \
     sane_repr, BaseManager, BoundedPositiveIntegerField
 from sentry.models.file import File
@@ -51,7 +51,7 @@ ONE_DAY_AND_A_HALF = int(ONE_DAY * 1.5)
 # 10 minutes is assumed to be a reasonable value here.
 CONVERSION_ERROR_TTL = 60 * 10
 
-DIF_MIMETYPES = dict((v, k) for k, v in KNOWN_DIF_TYPES.items())
+DIF_MIMETYPES = dict((v, k) for k, v in KNOWN_DIF_FORMATS.items())
 
 _proguard_file_re = re.compile(r'/proguard/(?:mapping-)?(.*?)\.txt$')
 
@@ -175,19 +175,19 @@ class ProjectDebugFile(Model):
     __repr__ = sane_repr('object_name', 'cpu_name', 'debug_id')
 
     @property
-    def dif_type(self):
+    def file_format(self):
         ct = self.file.headers.get('Content-Type', 'unknown').lower()
-        return KNOWN_DIF_TYPES.get(ct, 'unknown')
+        return KNOWN_DIF_FORMATS.get(ct, 'unknown')
 
     @property
     def file_extension(self):
-        if self.dif_type == 'breakpad':
+        if self.file_format == 'breakpad':
             return '.sym'
-        if self.dif_type == 'macho':
+        if self.file_format == 'macho':
             return '.dSYM'
-        if self.dif_type == 'proguard':
+        if self.file_format == 'proguard':
             return '.txt'
-        if self.dif_type == 'elf':
+        if self.file_format == 'elf':
             return '.debug'
 
         return ''
@@ -318,7 +318,7 @@ class ProjectSymCacheFile(ProjectCacheFile):
     def computes_from(cls, debug_file):
         if debug_file.data is None:
             # Compatibility with legacy DIFs before features were introduced
-            return debug_file.dif_type in ('breakpad', 'macho', 'elf')
+            return debug_file.file_format in ('breakpad', 'macho', 'elf')
         return super(ProjectSymCacheFile, cls).computes_from(debug_file)
 
     @property
@@ -370,21 +370,21 @@ def clean_redundant_difs(project, debug_id):
             all_features.update(dif.features)
 
 
-def create_dif_from_id(project, dif_type, cpu_name, debug_id, data,
+def create_dif_from_id(project, file_format, arch, debug_id, data,
                        basename, fileobj=None, file=None):
     """This creates a mach dsym file or proguard mapping from the given
     debug id and open file object to a debug file.  This will not verify the
     debug id(intentionally so).  Use `create_files_from_dif_zip` for doing
     everything.
     """
-    if dif_type == 'proguard':
+    if file_format == 'proguard':
         object_name = 'proguard-mapping'
-    elif dif_type in ('macho', 'elf'):
+    elif file_format in ('macho', 'elf'):
         object_name = basename
-    elif dif_type == 'breakpad':
+    elif file_format == 'breakpad':
         object_name = basename[:-4] if basename.endswith('.sym') else basename
     else:
-        raise TypeError('unknown dif type %r' % (dif_type, ))
+        raise TypeError('unknown dif type %r' % (file_format, ))
 
     if file is not None:
         checksum = file.checksum
@@ -413,18 +413,18 @@ def create_dif_from_id(project, dif_type, cpu_name, debug_id, data,
         file = File.objects.create(
             name=debug_id,
             type='project.dif',
-            headers={'Content-Type': DIF_MIMETYPES[dif_type]},
+            headers={'Content-Type': DIF_MIMETYPES[file_format]},
         )
         file.putfile(fileobj)
     else:
         file.type = 'project.dif'
-        file.headers['Content-Type'] = DIF_MIMETYPES[dif_type]
+        file.headers['Content-Type'] = DIF_MIMETYPES[file_format]
         file.save()
 
     dif = ProjectDebugFile.objects.create(
         file=file,
         debug_id=debug_id,
-        cpu_name=cpu_name,
+        cpu_name=arch,
         object_name=object_name,
         project=project,
         data=data,
@@ -460,8 +460,8 @@ def _analyze_progard_filename(filename):
 
 def detect_dif_from_path(path):
     """This detects which kind of dif(Debug Information File) the path
-    provided is. It returns an array since a FatObject can contain more than
-    on dif.
+    provided is. It returns an array since an Archive can contain more than
+    one Object.
     """
     # proguard files (proguard/UUID.txt) or
     # (proguard/mapping-UUID.txt).
@@ -469,16 +469,16 @@ def detect_dif_from_path(path):
     if proguard_id is not None:
         data = {'features': ['mapping']}
         return [(
-            'proguard',   # dif type
+            'proguard',   # file format
             'any',        # architecture
-            proguard_id,  # debug_id
+            proguard_id,  # debug id
             path,         # basepath
             data,         # extra data
         )]
 
     # native debug information files (MachO, ELF or Breakpad)
     try:
-        fo = FatObject.from_path(path)
+        archive = Archive.open(path)
     except ObjectErrorUnsupportedObject as e:
         raise BadDif("Unsupported debug information file: %s" % e)
     except SymbolicError as e:
@@ -486,27 +486,27 @@ def detect_dif_from_path(path):
         raise BadDif("Invalid debug information file: %s" % e)
     else:
         objs = []
-        for obj in fo.iter_objects():
+        for obj in archive.iter_objects():
             data = {
-                'type': obj.type,
+                'type': obj.kind,
                 'features': list(obj.features),
             }
-            objs.append((obj.kind, obj.arch, obj.id, path, data))
+            objs.append((obj.file_format, obj.arch, obj.debug_id, path, data))
         return objs
 
 
 def create_debug_file_from_dif(to_create, project, overwrite_filename=None):
-    """Create a ProjectDebugFile from a dif(Debug Information File) and
+    """Create a ProjectDebugFile from a dif (Debug Information File) and
     return an array of created objects.
     """
     rv = []
-    for dif_type, cpu, debug_id, filename, data in to_create:
+    for file_format, arch, debug_id, filename, data in to_create:
         with open(filename, 'rb') as f:
             result_filename = os.path.basename(filename)
             if overwrite_filename is not None:
                 result_filename = overwrite_filename
             dif, created = create_dif_from_id(
-                project, dif_type, cpu, debug_id, data,
+                project, file_format, arch, debug_id, data,
                 result_filename, fileobj=f
             )
             if created:
@@ -577,6 +577,7 @@ class DIFCache(object):
         blob store."""
         cachefiles, conversion_errors = self._get_caches_impl(
             project, debug_ids, ProjectSymCacheFile, on_dif_referenced)
+
         symcaches = self._load_cachefiles_via_fs(project, cachefiles, SymCache)
         if with_conversion_errors:
             return symcaches, dict((k, v) for k, v in conversion_errors.items())
@@ -729,22 +730,22 @@ class DIFCache(object):
         if not cls.computes_from(debug_file):
             return None, None, None
 
-        # Locate the object inside the FatObject. Since we have keyed debug
+        # Locate the object inside the Archive. Since we have keyed debug
         # files by debug_id, we expect a corresponding object. Otherwise, we
         # fail silently, just like with missing symbols.
         try:
-            fo = FatObject.from_path(path)
-            o = fo.get_object(id=debug_id)
-            if o is None:
+            archive = Archive.open(path)
+            obj = archive.get_object(debug_id=debug_id)
+            if obj is None:
                 return None, None, None
 
             # Check features from the actual object file, if this is a legacy
             # DIF where features have not been extracted yet.
             if (debug_file.data or {}).get('features') is None:
-                if o.features < set(cls.required_features):
+                if not set(cls.required_features) <= obj.features:
                     return None, None, None
 
-            cache = cls.cache_cls.from_object(o)
+            cache = cls.cache_cls.from_object(obj)
         except SymbolicError as e:
             if not isinstance(e, cls.ignored_errors):
                 logger.error('dsymfile.%s-build-error' % cls.cache_name,
@@ -770,7 +771,7 @@ class DIFCache(object):
                     cache_file=file,
                     debug_file=debug_file,
                     checksum=debug_file.file.checksum,
-                    version=cache.file_format_version,
+                    version=cache.version,
                 ), cache, None
         except IntegrityError:
             file.delete()
@@ -824,7 +825,7 @@ class DIFCache(object):
                 if stat.st_ctime < now - ONE_DAY:
                     os.utime(cachefile_path, (now, now))
 
-            rv[debug_id] = cls.from_path(cachefile_path)
+            rv[debug_id] = cls.open(cachefile_path)
         return rv
 
     def clear_old_entries(self):
diff --git a/src/sentry/tasks/assemble.py b/src/sentry/tasks/assemble.py
index 2a0f065c8b..6f86338e71 100644
--- a/src/sentry/tasks/assemble.py
+++ b/src/sentry/tasks/assemble.py
@@ -52,9 +52,9 @@ def assemble_dif(project_id, name, checksum, chunks, **kwargs):
                                     % len(result))
                 return
 
-            dif_type, cpu, file_id, filename, data = result[0]
+            file_format, arch, file_id, filename, data = result[0]
             dif, created = debugfile.create_dif_from_id(
-                project, dif_type, cpu, file_id, data,
+                project, file_format, arch, file_id, data,
                 os.path.basename(name),
                 file=file)
             indicate_success = True
diff --git a/tests/sentry/api/endpoints/test_dif_assemble.py b/tests/sentry/api/endpoints/test_dif_assemble.py
index d7429dda7e..83998aae87 100644
--- a/tests/sentry/api/endpoints/test_dif_assemble.py
+++ b/tests/sentry/api/endpoints/test_dif_assemble.py
@@ -315,4 +315,5 @@ class DifAssembleEndpoint(APITestCase):
 
         assert response.status_code == 200, response.content
         assert response.data[total_checksum]['state'] == ChunkFileState.ERROR
-        assert response.data[total_checksum]['detail'].startswith('Invalid debug information file')
+        assert response.data[total_checksum]['detail'].startswith(
+            'Unsupported debug information file')
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index 9251d9bf41..7d72775199 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -1294,8 +1294,7 @@ class RealResolvingIntegrationTest(TestCase):
         frames = bt.frames
 
         assert frames[0].function == 'main'
-        # NOTE: Breakpad symbols only contain entire paths
-        assert frames[0].filename == 'c:\\projects\\breakpad-tools\\windows\\crash\\main.cpp'
+        assert frames[0].filename == 'main.cpp'
         assert frames[0].abs_path == 'c:\\projects\\breakpad-tools\\windows\\crash\\main.cpp'
         assert frames[0].lineno == 35
 
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index 1033dc2913..d5117c902e 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -2,10 +2,10 @@ from __future__ import absolute_import
 
 from mock import patch
 
-from sentry.testutils import TestCase
 from sentry.lang.native.plugin import NativeStacktraceProcessor
 from sentry.lang.native.symbolizer import Symbolizer
 from sentry.stacktraces import process_stacktraces
+from sentry.testutils import TestCase
 
 OBJECT_NAME = (
     "/var/containers/Bundle/Application/B33C37A8-F933-4B6B-9FFA-152282BFDF13/"
@@ -158,12 +158,14 @@ class BasicResolvingFileTest(TestCase):
             },
             "contexts": {
                 "device": {
+                    "type": "device",
                     "model_id": "N102AP",
                     "model": "iPod7,1",
                     "arch": "arm64",
                     "family": "iPod"
                 },
                 "os": {
+                    "type": "os",
                     "version": "9.3.2",
                     "rooted": False,
                     "build": "13F69",
diff --git a/tests/sentry/models/test_debugfile.py b/tests/sentry/models/test_debugfile.py
index a5cc748d37..c9d4aaced0 100644
--- a/tests/sentry/models/test_debugfile.py
+++ b/tests/sentry/models/test_debugfile.py
@@ -158,8 +158,8 @@ class CreateDebugFileTest(APITestCase):
     def create_dif(self, **kwargs):
         args = {
             'project': self.project,
-            'dif_type': 'macho',
-            'cpu_name': 'x86_64',
+            'file_format': 'macho',
+            'arch': 'x86_64',
             'debug_id': '67e9247c-814e-392b-a027-dbde6748fcbf',
             'data': {'features': ['debug']},
             'basename': 'crash.dsym',
@@ -350,7 +350,7 @@ class SymCacheTest(TestCase):
 
         symcaches = ProjectDebugFile.difcache.get_symcaches(self.project, [debug_id])
         assert debug_id in symcaches
-        assert symcaches[debug_id].id == debug_id
+        assert symcaches[debug_id].debug_id == debug_id
 
     def test_miss_symcache_without_feature(self):
         debug_id = '67e9247c-814e-392b-a027-dbde6748fcbf'
@@ -375,12 +375,12 @@ class SymCacheTest(TestCase):
         self.create_dif_from_path(
             path=os.path.join(os.path.dirname(__file__), 'fixtures', 'crash.dsym'),
             debug_id=debug_id,
-            dif_type='macho',  # XXX: Needed for legacy compatibility check
+            file_format='macho',  # XXX: Needed for legacy compatibility check
         )
 
         symcaches = ProjectDebugFile.difcache.get_symcaches(self.project, [debug_id])
         assert debug_id in symcaches
-        assert symcaches[debug_id].id == debug_id
+        assert symcaches[debug_id].debug_id == debug_id
 
     def test_create_symcache_with_feature(self):
         debug_id = '67e9247c-814e-392b-a027-dbde6748fcbf'
@@ -392,14 +392,14 @@ class SymCacheTest(TestCase):
 
         symcaches = ProjectDebugFile.difcache.get_symcaches(self.project, [debug_id])
         assert debug_id in symcaches
-        assert symcaches[debug_id].id == debug_id
+        assert symcaches[debug_id].debug_id == debug_id
 
     def test_skip_symcache_without_feature(self):
         debug_id = '1ddb3423-950a-3646-b17b-d4360e6acfc9'
         self.create_dif_from_path(
             path=os.path.join(os.path.dirname(__file__), 'fixtures', 'crash'),
             debug_id=debug_id,
-            dif_type='macho',
+            file_format='macho',
         )
 
         symcaches = ProjectDebugFile.difcache.get_symcaches(self.project, [debug_id])
@@ -429,8 +429,8 @@ class SymCacheTest(TestCase):
 
         symcaches = ProjectDebugFile.difcache.get_symcaches(self.project, [debug_id])
         assert debug_id in symcaches
-        assert symcaches[debug_id].id == debug_id
-        assert symcaches[debug_id].is_latest_file_format
+        assert symcaches[debug_id].debug_id == debug_id
+        assert symcaches[debug_id].is_latest_version
         assert not ProjectSymCacheFile.objects.filter(id=old_cache.id, version=1).exists()
 
     def test_get_symcache_on_referenced(self):
@@ -552,7 +552,7 @@ class CfiCacheTest(TestCase):
         self.create_dif_from_path(
             path=os.path.join(os.path.dirname(__file__), 'fixtures', 'crash.dsym'),
             debug_id=debug_id,
-            dif_type='macho',
+            file_format='macho',
         )
 
         symcaches = ProjectDebugFile.difcache.get_cficaches(self.project, [debug_id])
@@ -583,7 +583,7 @@ class CfiCacheTest(TestCase):
 
         cficaches = ProjectDebugFile.difcache.get_cficaches(self.project, [debug_id])
         assert debug_id in cficaches
-        assert cficaches[debug_id].is_latest_file_format
+        assert cficaches[debug_id].is_latest_version
         assert not ProjectCfiCacheFile.objects.filter(id=old_cache.id, version=0).exists()
 
     def test_get_cficache_on_referenced(self):
