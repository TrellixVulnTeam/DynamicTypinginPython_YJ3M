commit 3626b06cf0aaeaf8da05094f16e5e628e9869625
Author: Matte Noble <me@mattenoble.com>
Date:   Thu Feb 7 12:31:53 2019 -0800

    feat(app-platform): Issue Assigned Webhook (#11775)

diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 81521ec73c..ccf1df922d 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -25,7 +25,12 @@ from sentry.db.models import (
 # listening to a list of specific events. This is a mapping of what those
 # specific events are for each resource.
 EVENT_EXPANSION = {
-    'issue': ['issue.created', 'issue.resolved'],
+    'issue': [
+        'issue.created',
+        'issue.resolved',
+        'issue.ignored',
+        'issue.assigned',
+    ],
 }
 
 # We present Webhook Subscriptions per-resource (Issue, Project, etc.), not
diff --git a/src/sentry/receivers/sentry_apps.py b/src/sentry/receivers/sentry_apps.py
index a6b8604d8d..42f2e704e7 100644
--- a/src/sentry/receivers/sentry_apps.py
+++ b/src/sentry/receivers/sentry_apps.py
@@ -3,9 +3,10 @@ from __future__ import absolute_import
 from django.db.models.signals import post_save
 from django.dispatch import receiver
 
-from sentry.models import Group, Organization
+from sentry.models import Group, GroupAssignee, Organization
 from sentry.signals import (
     issue_ignored,
+    issue_assigned,
     issue_resolved,
     issue_resolved_in_release,
     resolved_with_commit,
@@ -31,30 +32,54 @@ def issue_saved(sender, instance, created, **kwargs):
     )
 
 
+@issue_assigned.connect(weak=False)
+def send_issue_assigned_webhook(project, group, user, **kwargs):
+    assignee = GroupAssignee.objects.get(
+        group_id=group.id,
+    ).assigned_actor()
+
+    actor = assignee.resolve()
+
+    data = {
+        'assignee': {
+            'type': assignee.type.__name__.lower(),
+            'name': actor.name,
+            'id': actor.id,
+        }
+    }
+
+    org = project.organization
+
+    if hasattr(actor, 'email') and not org.flags.enhanced_privacy:
+        data['assignee']['email'] = actor.email
+
+    send_workflow_webhooks(org, group, user, 'issue.assigned', data=data)
+
+
 @issue_resolved_in_release.connect(weak=False)
-def issue_resolved_in_release(project, group, user, resolution_type, **kwargs):
+def send_issue_resolved_in_release_webhook(project, group, user, resolution_type, **kwargs):
     send_workflow_webhooks(
         project.organization,
         group,
         user,
         'issue.resolved',
-        {'resolution_type': 'resolved_in_release'},
+        data={'resolution_type': 'resolved_in_release'},
     )
 
 
 @issue_resolved.connect(weak=False)
-def issue_resolved(project, group, user, **kwargs):
+def send_issue_resolved_webhook(project, group, user, **kwargs):
     send_workflow_webhooks(
         project.organization,
         group,
         user,
         'issue.resolved',
-        {'resolution_type': 'resolved'},
+        data={'resolution_type': 'resolved'},
     )
 
 
 @issue_ignored.connect(weak=False)
-def issue_ignored(project, user, group_list, **kwargs):
+def send_issue_ignored_webhook(project, user, group_list, **kwargs):
     for issue in group_list:
         send_workflow_webhooks(
             project.organization,
@@ -65,14 +90,14 @@ def issue_ignored(project, user, group_list, **kwargs):
 
 
 @resolved_with_commit.connect(weak=False)
-def resolved_with_commit(organization_id, group, user, **kwargs):
+def send_resolved_with_commit_webhook(organization_id, group, user, **kwargs):
     organization = Organization.objects.get(id=organization_id)
     send_workflow_webhooks(
         organization,
         group,
         user,
         'issue.resolved',
-        {'resolution_type': 'resolved_in_commit'},
+        data={'resolution_type': 'resolved_in_commit'},
     )
 
 
diff --git a/tests/sentry/mediators/service_hooks/test_creator.py b/tests/sentry/mediators/service_hooks/test_creator.py
index 58b0bf6521..a22aa824a8 100644
--- a/tests/sentry/mediators/service_hooks/test_creator.py
+++ b/tests/sentry/mediators/service_hooks/test_creator.py
@@ -37,10 +37,21 @@ class TestCreator(TestCase):
     def test_expands_resource_events_to_specific_events(self):
         self.creator.events = ['issue']
         service_hook = self.creator.call()
-        assert set(service_hook.events) == set(['issue.created', 'issue.resolved'])
+
+        assert set(service_hook.events) == set([
+            'issue.created',
+            'issue.resolved',
+            'issue.ignored',
+            'issue.assigned',
+        ])
 
     def test_expand_events(self):
-        assert expand_events(['issue']) == set(['issue.created', 'issue.resolved'])
+        assert expand_events(['issue']) == set([
+            'issue.created',
+            'issue.resolved',
+            'issue.ignored',
+            'issue.assigned',
+        ])
 
     def test_consolidate_events(self):
         assert consolidate_events(['issue.created']) == set(['issue'])
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index 117b403614..8b8bd7ad2b 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import json
 from django.utils import timezone
 
-from sentry.models import FeatureAdoption, GroupTombstone, Rule
+from sentry.models import FeatureAdoption, GroupAssignee, GroupTombstone, Rule
 from sentry.plugins import IssueTrackingPlugin2, NotificationPlugin
 from sentry.signals import (
     alert_rule_created,
@@ -634,6 +634,12 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete
 
     def test_assignment(self):
+        GroupAssignee.objects.create(
+            group_id=self.group.id,
+            user_id=self.user.id,
+            project_id=self.project.id,
+        )
+
         issue_assigned.send(
             project=self.project,
             group=self.group,
diff --git a/tests/sentry/receivers/test_sentry_apps.py b/tests/sentry/receivers/test_sentry_apps.py
index fff38da00d..8a89745a70 100644
--- a/tests/sentry/receivers/test_sentry_apps.py
+++ b/tests/sentry/receivers/test_sentry_apps.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from mock import patch
 
-from sentry.models import Commit, GroupLink, Repository, Release
+from sentry.models import Commit, GroupAssignee, GroupLink, Repository, Release
 from sentry.testutils import APITestCase, TestCase
 from sentry.testutils.helpers.faux import faux
 
@@ -191,3 +191,66 @@ class TestIssueWorkflowNotifications(APITestCase):
             user_id=self.user.id,
             data={},
         )
+
+
+@patch('sentry.tasks.sentry_apps.workflow_notification.delay')
+class TestIssueAssigned(APITestCase):
+    def setUp(self):
+        self.issue = self.create_group(project=self.project)
+
+        self.sentry_app = self.create_sentry_app(events=['issue.assigned'])
+
+        self.install = self.create_sentry_app_installation(
+            organization=self.organization,
+            slug=self.sentry_app.slug,
+        )
+
+        self.assignee = self.create_user(name='Bert', email='bert@example.com')
+
+    def test_after_issue_assigned(self, delay):
+        GroupAssignee.objects.assign(
+            self.issue,
+            self.assignee,
+            self.user,
+        )
+
+        assert faux(delay).called_with(
+            installation_id=self.install.id,
+            issue_id=self.issue.id,
+            type='assigned',
+            user_id=self.user.id,
+            data={
+                'assignee': {
+                    'type': 'user',
+                    'name': self.assignee.name,
+                    'email': self.assignee.email,
+                    'id': self.assignee.id,
+                },
+            },
+        )
+
+    def test_after_issue_assigned_with_enhanced_privacy(self, delay):
+        org = self.issue.project.organization
+        org.flags.enhanced_privacy = True
+        org.save()
+
+        GroupAssignee.objects.assign(
+            self.issue,
+            self.assignee,
+            self.user,
+        )
+
+        assert faux(delay).called_with(
+            installation_id=self.install.id,
+            issue_id=self.issue.id,
+            type='assigned',
+            user_id=self.user.id,
+            data={
+                # Excludes email address
+                'assignee': {
+                    'type': 'user',
+                    'name': self.assignee.name,
+                    'id': self.assignee.id,
+                },
+            },
+        )
