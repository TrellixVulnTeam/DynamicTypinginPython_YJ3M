commit c33d4698f11e60daed39a5d7e2b511ff7617c4b2
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 10 13:42:16 2015 -0700

    Improve error handling on organization member details

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 55c563d1e7..8a11f65b63 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -4,11 +4,18 @@ from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, AuthProvider, OrganizationMember,
     OrganizationMemberType
 )
 
+ERR_INSUFFICIENT_ROLE = 'You cannot remove a member who has more access than you.'
+
+ERR_ONLY_OWNER = 'You cannot remove the only remaining owner of the organization.'
+
+ERR_UNINVITABLE = 'You cannot send an invitation to a user who is already a full member.'
+
 
 class OrganizationMemberSerializer(serializers.Serializer):
     reinvite = serializers.BooleanField()
@@ -36,7 +43,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
                 id=member_id,
             ).select_related('user').get()
         except OrganizationMember.DoesNotExist:
-            return Response(status=404)
+            raise ResourceDoesNotExist
 
         serializer = OrganizationMemberSerializer(data=request.DATA, partial=True)
         if not serializer.is_valid():
@@ -56,7 +63,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
                 om.send_sso_link_email()
             else:
                 # TODO(dcramer): proper error message
-                return Response(status=400)
+                return Response({'detail': ERR_UNINVITABLE}, status=400)
         return Response(status=204)
 
     def delete(self, request, organization, member_id):
@@ -72,13 +79,15 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
             om = OrganizationMember.objects.filter(
                 organization=organization,
                 id=member_id,
-                type__gte=authorizing_access,
             ).select_related('user').get()
         except OrganizationMember.DoesNotExist:
-            return Response(status=404)
+            raise ResourceDoesNotExist
+
+        if om.type < authorizing_access:
+            return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
 
         if self._is_only_owner(om):
-            return Response(status=403)
+            return Response({'detail': ERR_ONLY_OWNER}, status=403)
 
         audit_data = om.get_audit_log_data()
 
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
index 015c136e83..d1cc079293 100644
--- a/src/sentry/templates/sentry/organization-members.html
+++ b/src/sentry/templates/sentry/organization-members.html
@@ -103,8 +103,12 @@
       success: function() {
         $this.parents('tr').remove();
       },
-      error: function() {
-        alert('There was an error while trying to remove the member.');
+      error: function(xhr) {
+        if (xhr.responseJSON) {
+          alert('Unable to remove team member: ' + xhr.responseJSON.detail);
+        } else {
+          alert('There was an error while trying to remove the member.');
+        }
       }
     });
   });
