commit 7caf184c925fe4b72e831fadf62c70bd356dd394
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 8 13:05:26 2013 -0700

    Remove unused code

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 8b3db0e022..b3cb969087 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -21,7 +21,6 @@ from sentry.app import env
 from sentry.conf import settings
 from sentry.exceptions import InvalidTimestamp
 from sentry.models import Project, ProjectKey, TeamMember, Team, User
-from sentry.plugins import plugins
 from sentry.tasks.store import preprocess_event
 from sentry.utils import is_float, json
 from sentry.utils.auth import parse_auth_header
@@ -135,92 +134,16 @@ def project_from_auth_vars(auth_vars):
         except Team.DoesNotExist:
             raise APIUnauthorized('Member does not have access to project')
 
-        try:
-            TeamMember.objects.get(team=team, user=pk.user_id, is_active=True)
-        except TeamMember.DoesNotExist:
-            raise APIUnauthorized('Member does not have access to project')
-
-        # We have to refetch this as it may have been caught
-        pk.user = User.objects.get(id=pk.user_id)
-        if not pk.user.is_active:
-            raise APIUnauthorized('Account is not active')
-
-    return project, pk.user
-
-
-def project_from_api_key_and_id(api_key, project_id):
-    """
-    Given a public api key and a project id returns
-    a project instance or throws APIUnauthorized.
-    """
-    try:
-        pk = ProjectKey.objects.get_from_cache(public_key=api_key)
-    except ProjectKey.DoesNotExist:
-        raise APIUnauthorized('Invalid api key')
-
-    if str(project_id).isdigit():
-        if str(pk.project_id) != str(project_id):
-            raise APIUnauthorized('Invalid project id')
-    else:
-        if str(pk.project.slug) != str(project_id):
-            raise APIUnauthorized('Invalid project id')
-
-    project = Project.objects.get_from_cache(pk=pk.project_id)
-
-    if pk.user:
-        team = Team.objects.get_from_cache(pk=project.team_id)
-
-        try:
-            tm = TeamMember.objects.get(team=team, user=pk.user, is_active=True)
-        except TeamMember.DoesNotExist:
-            raise APIUnauthorized('Member does not have access to project')
-
         # We have to refetch this as it may have been caught
         pk.user = User.objects.get_from_cache(id=pk.user_id)
         if not pk.user.is_active:
             raise APIUnauthorized('Account is not active')
 
-        tm.project = project
-
-        result = plugins.first('has_perm', tm.user, 'create_event', project)
-        if result is False:
-            raise APIForbidden('Creation of this event was blocked')
-
-    return project
-
-
-def project_from_id(request):
-    """
-    Given a request returns a project instance or throws
-    APIUnauthorized.
-    """
-    if not request.user.is_active:
-        raise APIUnauthorized('Account is not active')
-
-    try:
-        project = Project.objects.get_from_cache(pk=request.GET['project_id'])
-    except Project.DoesNotExist:
-        raise APIUnauthorized('Invalid project')
-
-    try:
-        team = Team.objects.get_from_cache(pk=project.team_id)
-    except Project.DoesNotExist:
-        raise APIUnauthorized('Member does not have access to project')
+        if not TeamMember.objects.filter(
+                team=team, user=pk.user_id, is_active=True).exists():
+            raise APIUnauthorized('Member does not have access to project')
 
-    try:
-        TeamMember.objects.get(
-            user=request.user,
-            team=team,
-            is_active=True,
-        )
-    except TeamMember.DoesNotExist:
-        raise APIUnauthorized('Member does not have access to project')
-
-    result = plugins.first('has_perm', request.user, 'create_event', project)
-    if result is False:
-        raise APIForbidden('Creation of this event was blocked')
-
-    return project
+    return project, pk.user
 
 
 def decode_and_decompress_data(encoded_data):
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index cd7ab5db10..37c6828d05 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -7,7 +7,7 @@ import mock
 
 from sentry.models import Project, User
 from sentry.exceptions import InvalidTimestamp
-from sentry.coreapi import (project_from_id, project_from_api_key_and_id,
+from sentry.coreapi import (
     extract_auth_vars, project_from_auth_vars, APIUnauthorized, APIForbidden,
     process_data_timestamp, validate_data, INTERFACE_ALIASES)
 from sentry.testutils import TestCase
@@ -38,68 +38,6 @@ class InterfaceAliasesTest(BaseAPITest):
         assert INTERFACE_ALIASES['template'] == 'sentry.interfaces.Template'
 
 
-class ProjectFromIdTest(BaseAPITest):
-    def test_valid(self):
-        request = mock.Mock()
-        request.user = self.user
-        request.GET = {'project_id': self.project.id}
-
-        project = project_from_id(request)
-
-        self.assertEquals(project, self.project)
-
-    def test_invalid_project_id(self):
-        request = mock.Mock()
-        request.user = self.user
-        request.GET = {'project_id': 10000}
-
-        self.assertRaises(APIUnauthorized, project_from_id, request)
-
-    def test_inactive_user(self):
-        request = mock.Mock()
-        request.user = self.user
-        request.user.is_active = False
-        request.GET = {'project_id': self.project.id}
-
-        self.assertRaises(APIUnauthorized, project_from_id, request)
-
-    def test_inactive_member(self):
-        request = mock.Mock()
-        request.user = self.user
-        request.GET = {'project_id': self.project.id}
-
-        self.pm.is_active = False
-        self.pm.save()
-
-        self.assertRaises(APIUnauthorized, project_from_id, request)
-
-
-class ProjectFromApiKeyAndIdTest(BaseAPITest):
-    def test_valid(self):
-        api_key = self.pk.public_key
-        project = project_from_api_key_and_id(api_key, self.project.id)
-        self.assertEquals(project, self.project)
-
-    def test_invalid_project_id(self):
-        self.assertRaises(APIUnauthorized, project_from_api_key_and_id, self.pk.public_key, 10000)
-
-    def test_invalid_api_key(self):
-        self.assertRaises(APIUnauthorized, project_from_api_key_and_id, 1, self.project.id)
-
-    def test_inactive_user(self):
-        user = self.pm.user
-        user.is_active = False
-        user.save()
-
-        self.assertRaises(APIUnauthorized, project_from_api_key_and_id, self.pk.public_key, self.project.id)
-
-    def test_inactive_member(self):
-        self.pm.is_active = False
-        self.pm.save()
-
-        self.assertRaises(APIUnauthorized, project_from_api_key_and_id, self.pk.public_key, self.project.id)
-
-
 class ExtractAuthVarsTest(BaseAPITest):
     def test_valid(self):
         request = mock.Mock()
