commit 80c38620a17ffcf77d17b9fd13cc1e0de81cf7e9
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Dec 14 22:00:50 2012 -0800

    Switch to py.test

diff --git a/conftest.py b/conftest.py
new file mode 100644
index 0000000000..a77fbde79a
--- /dev/null
+++ b/conftest.py
@@ -0,0 +1,38 @@
+from django.conf import settings
+import base64
+import os
+import os.path
+
+
+def pytest_configure(config):
+    if not settings.configured:
+        os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.conf.server'
+
+    test_db = os.environ.get('DB', 'sqlite')
+    if test_db == 'mysql':
+        settings.DATABASES['default'].update({
+            'ENGINE': 'django.db.backends.mysql',
+            'NAME': 'sentry',
+            'USER': 'root',
+        })
+    elif test_db == 'postgres':
+        settings.DATABASES['default'].update({
+            'ENGINE': 'django.db.backends.postgresql_psycopg2',
+            'USER': 'postgres',
+            'NAME': 'sentry',
+            'OPTIONS': {
+                'autocommit': True,
+            }
+        })
+    elif test_db == 'sqlite':
+        settings.DATABASES['default'].update({
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        })
+
+    # override a few things with our test specifics
+    settings.INSTALLED_APPS = tuple(settings.INSTALLED_APPS) + (
+        'tests',
+    )
+    settings.SENTRY_KEY = base64.b64encode(os.urandom(40))
+    settings.SENTRY_PUBLIC = False
diff --git a/runtests.py b/runtests.py
index 2b910b3953..e02e1df529 100644
--- a/runtests.py
+++ b/runtests.py
@@ -1,75 +1,15 @@
 #!/usr/bin/env python
-import base64
-# import logging
-import os
 import sys
-import warnings
-from os.path import dirname, abspath
-from optparse import OptionParser
 
-sys.path.insert(0, dirname(abspath(__file__)))
 
-# logging.basicConfig(level=logging.DEBUG)
+def runtests(args=None):
+    import pytest
 
-# Force all warnings in Django or Sentry to throw exceptions
-warnings.filterwarnings('error', '', RuntimeWarning, module=r'^(sentry|django).*')
+    if args is None:
+        args = ['tests']
 
-from django.conf import settings
+    sys.exit(pytest.main(args))
 
-if not settings.configured:
-    os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.conf.server'
-
-test_db = os.environ.get('DB', 'sqlite')
-if test_db == 'mysql':
-    settings.DATABASES['default'].update({
-        'ENGINE': 'django.db.backends.mysql',
-        'NAME': 'sentry',
-        'USER': 'root',
-    })
-elif test_db == 'postgres':
-    settings.DATABASES['default'].update({
-        'ENGINE': 'django.db.backends.postgresql_psycopg2',
-        'USER': 'postgres',
-        'NAME': 'sentry',
-        'OPTIONS': {
-            'autocommit': True,
-        }
-    })
-elif test_db == 'sqlite':
-    settings.DATABASES['default'].update({
-        'ENGINE': 'django.db.backends.sqlite3',
-        'NAME': ':memory:',
-    })
-
-# override a few things with our test specifics
-settings.INSTALLED_APPS = tuple(settings.INSTALLED_APPS) + (
-    'tests',
-)
-settings.SENTRY_KEY = base64.b64encode(os.urandom(40))
-settings.SENTRY_PUBLIC = False
-
-from django_nose import NoseTestSuiteRunner
-
-
-def runtests(*test_args, **kwargs):
-    if 'south' in settings.INSTALLED_APPS:
-        from south.management.commands import patch_for_test_db_setup
-        patch_for_test_db_setup()
-
-    if not test_args:
-        test_args = ['tests']
-
-    kwargs.setdefault('interactive', False)
-
-    test_runner = NoseTestSuiteRunner(**kwargs)
-
-    failures = test_runner.run_tests(test_args)
-    sys.exit(failures)
 
 if __name__ == '__main__':
-    parser = OptionParser()
-    parser.add_option('--verbosity', dest='verbosity', action='store', default=1, type=int)
-    parser.add_options(NoseTestSuiteRunner.options)
-    (options, args) = parser.parse_args()
-
-    runtests(*args, **options.__dict__)
+    runtests(sys.argv)
diff --git a/setup.cfg b/setup.cfg
index 8b9a8ff6b0..f06b45e4ee 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,2 +1,5 @@
 [nosetests]
-logging-clear-handlers=
\ No newline at end of file
+logging-clear-handlers=
+
+[pytest]
+python_files=test*.py
diff --git a/setup.py b/setup.py
index 2b1896f7db..50fc195bc7 100755
--- a/setup.py
+++ b/setup.py
@@ -35,10 +35,10 @@ for m in ('multiprocessing', 'billiard'):
         pass
 
 tests_require = [
-    'django-nose==1.1',
-    'eventlet==0.9.16',
-    'nose==1.2.1',
-    'nydus==0.9.0',
+    'eventlet',
+    'pytest',
+    'pytest-django',
+    'nydus',
     'mock>=0.8.0',
     'redis',
     'unittest2',
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 55bc3aafe2..8c850aeeaa 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -4,13 +4,13 @@ from __future__ import absolute_import
 
 import datetime
 import mock
+import pytest
 
 from django.utils import timezone
-from nose.plugins.skip import SkipTest
 from sentry.interfaces import Interface
 from sentry.models import Event, Group, Project, MessageCountByMinute, ProjectCountByMinute, \
   SearchDocument
-from sentry.utils.db import has_trending
+from sentry.utils.db import has_trending  # NOQA
 from sentry.testutils import TestCase
 
 
@@ -226,11 +226,8 @@ class SearchManagerTest(TestCase):
         self.assertEquals(results[0].id, doc.id)
 
 
+@pytest.mark.skipif('not has_trending()')
 class TrendsTest(TestCase):
-    def setUp(self):
-        if not has_trending():
-            raise SkipTest('This database does not support trends.')
-
     def test_accelerated_works_at_all(self):
         now = timezone.now() - datetime.timedelta(minutes=5)
         project = Project.objects.all()[0]
