commit 445f0d7d9a26db6d467eb4247e811782362b6ba9
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 14 13:46:40 2015 -0800

    Working flash components

diff --git a/src/sentry/static/sentry/app-react/actions/alertActions.jsx b/src/sentry/static/sentry/app-react/actions/alertActions.jsx
new file mode 100644
index 0000000000..e3637b950b
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/actions/alertActions.jsx
@@ -0,0 +1,7 @@
+/** @jsx React.DOM */
+
+var Reflux = require("reflux");
+
+var alertActions = Reflux.createActions(["addAlert", "closeAlert"]);
+
+module.exports = alertActions;
diff --git a/src/sentry/static/sentry/app-react/components/alertMessage.jsx b/src/sentry/static/sentry/app-react/components/alertMessage.jsx
new file mode 100644
index 0000000000..dd04fb25b2
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/components/alertMessage.jsx
@@ -0,0 +1,35 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Reflux = require("reflux");
+var alertActions = require('../actions/alertActions');
+
+var AlertMessage = React.createClass({
+  propTypes: {
+    type: React.PropTypes.string,
+    children: React.PropTypes.any.isRequired
+  },
+
+  closeAlert: function() {
+    alertActions.closeAlert(this);
+  },
+
+  render: function() {
+    var className = this.props.className || 'alert';
+    if (this.props.type !== '') {
+      className += ' alert-' + this.props.type;
+    }
+
+    return (
+      <div className={className}>
+        <button type="button" className="close" aria-label="Close"
+                onClick={this.closeAlert}>
+          <span aria-hidden="true">&times;</span>
+        </button>
+        {this.props.children}
+      </div>
+    );
+  }
+});
+
+module.exports = AlertMessage;
diff --git a/src/sentry/static/sentry/app-react/components/alerts.jsx b/src/sentry/static/sentry/app-react/components/alerts.jsx
new file mode 100644
index 0000000000..dff07670d0
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/components/alerts.jsx
@@ -0,0 +1,30 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Reflux = require("reflux");
+
+var alertStore = require('../stores/alertStore');
+var AlertMessage = require('./alertMessage');
+
+var Alerts = React.createClass({
+  mixins: [Reflux.connect(alertStore, "alerts")],
+
+  getInitialState: function() {
+      return {
+          alerts: []
+      };
+  },
+
+  render: function() {
+    return (
+      <div {...this.props}>
+        {this.state.alerts.map(function(alert, key) {
+           return <div key={key}>{alert}</div>;
+        })}
+      </div>
+    );
+  }
+});
+
+
+module.exports = Alerts;
diff --git a/src/sentry/static/sentry/app-react/components/stream.jsx b/src/sentry/static/sentry/app-react/components/stream.jsx
index 28a2eded55..00a9d633a6 100644
--- a/src/sentry/static/sentry/app-react/components/stream.jsx
+++ b/src/sentry/static/sentry/app-react/components/stream.jsx
@@ -2,6 +2,7 @@
 var React = require("react");
 var $ = require("jquery");
 
+var alertActions = require("../actions/alertActions");
 var BarChart = require("./barChart");
 var Count = require("./count");
 var StreamActions = require('./streamActions');
@@ -215,7 +216,7 @@ var Stream = React.createClass({
     return this.actionAggregates(aggList, {
       method: 'DELETE',
       success: function() {
-        flash('success', 'The selected events have been scheduled for deletion.');
+        alertActions.addAlert('The selected events have been scheduled for deletion.', 'success');
       }
     });
   },
@@ -223,7 +224,7 @@ var Stream = React.createClass({
     return this.actionAggregates(aggList, {
       data: {merge: 1},
       success: function() {
-        flash('success', 'The selected events have been scheduled to merge.');
+        alertActions.addAlert('The selected events have been scheduled for merge.', 'success');
       }
     });
   },
diff --git a/src/sentry/static/sentry/app-react/main.jsx b/src/sentry/static/sentry/app-react/main.jsx
index 312ed031c2..feaba28b85 100644
--- a/src/sentry/static/sentry/app-react/main.jsx
+++ b/src/sentry/static/sentry/app-react/main.jsx
@@ -49,5 +49,6 @@ module.exports = {
   Raven: require("raven-js"),
   React: require("react"),
 
+  Alerts: require("./components/alerts"),
   Stream: require("./components/stream")
 };
diff --git a/src/sentry/static/sentry/app-react/stores/alertStore.jsx b/src/sentry/static/sentry/app-react/stores/alertStore.jsx
new file mode 100644
index 0000000000..c90fa2e2f6
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/stores/alertStore.jsx
@@ -0,0 +1,34 @@
+/** @jsx React.DOM */
+
+var Reflux = require("reflux");
+
+var AlertMessage = require('../components/alertMessage');
+var alertActions = require('../actions/alertActions');
+
+var alertStore = Reflux.createStore({
+  listenables: alertActions,
+
+  init: function() {
+    this.alerts = [];
+  },
+
+  onAddAlert: function(message, type){
+    if (React.isValidElement(message)) {
+      this.alerts.push(message);
+    } else {
+      this.alerts.push(<AlertMessage type={type}>{message}</AlertMessage>);
+    }
+    this.trigger(this.alerts);
+  },
+
+  onCloseAlert: function(alert){
+    this.alerts = this.alerts.filter(function(item){
+      // XXX(dcramer): there is likely a safer way to do this that isnt using
+      // what seems to be a private operator
+      return item !== alert._currentElement;
+    });
+    this.trigger(this.alerts);
+  }
+});
+
+module.exports = alertStore;
diff --git a/src/sentry/templates/sentry/partial/alerts.html b/src/sentry/templates/sentry/partial/alerts.html
index c808bb5f6a..2df26cafa3 100644
--- a/src/sentry/templates/sentry/partial/alerts.html
+++ b/src/sentry/templates/sentry/partial/alerts.html
@@ -1,5 +1,12 @@
 {% load sentry_helpers %}
-<flash-messages></flash-messages>
+<div id="blk_alerts" class="messages-container"></div>
+<script>
+$(function(){
+  React.render(React.createFactory(Alerts)({
+     className: "alert-list"
+  }), document.getElementById('blk_alerts'));
+});
+</script>
 {% if messages %}
 <div id="messages">
     {% for message in messages %}
