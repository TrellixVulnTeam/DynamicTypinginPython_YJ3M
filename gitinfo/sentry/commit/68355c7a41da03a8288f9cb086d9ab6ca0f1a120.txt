commit 68355c7a41da03a8288f9cb086d9ab6ca0f1a120
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Nov 7 11:20:25 2018 -0800

    feat(discover): Add external event field names that map to snuba columns (#10426)
    
    Note that this does not change the name of any tags columns (that use the
    prefix tags[...]). These are currently all just loaded dynamically and not
    renamed in any way.
    
    Also fixes the types of some device columns incorrectly marked as strings previously.

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index daf057e2b3..f83c88d89b 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -123,14 +123,14 @@ class DiscoverQuerySerializer(serializers.Serializer):
         return attrs
 
     def validate_conditions(self, attrs, source):
-        # Handle exception_stacks, exception_frames
+        # Handle error (exception_stacks), stack(exception_frames)
         if attrs.get(source):
             conditions = [self.get_condition(condition) for condition in attrs[source]]
             attrs[source] = conditions
         return attrs
 
     def get_array_field(self, field):
-        pattern = r"^(exception_stacks|exception_frames)\..+"
+        pattern = r"^(error|stack)\..+"
         return re.search(pattern, field)
 
     def get_condition(self, condition):
@@ -258,8 +258,9 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                 aggregation[1] = 'project_id'
 
         if not kwargs['aggregations']:
+
             data_fn = partial(
-                snuba.raw_query,
+                snuba.transform_aliases_and_query,
                 referrer='discover',
                 **kwargs
             )
@@ -270,7 +271,7 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                 max_per_page=1000
             )
         else:
-            snuba_results = snuba.raw_query(
+            snuba_results = snuba.transform_aliases_and_query(
                 referrer='discover',
                 **kwargs
             )
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
index c97f194a5d..a3ae01f832 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
@@ -72,7 +72,9 @@ export function getInternal(external) {
 */
 function getAlias(columnName) {
   const tagMatch = columnName.match(/^tags\[(.+)]$/);
-  return tagMatch ? `tags_${tagMatch[1].replace(/[.:-]/, '_')}` : columnName;
+  return tagMatch
+    ? `tags_${tagMatch[1].replace(/[.:-]/, '_')}`
+    : columnName.replace('.', '_');
 }
 
 /**
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index a0f53ae86b..bf1aa96700 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -41,45 +41,45 @@ export const COLUMNS = [
   {name: 'timestamp', type: TYPES.DATETIME},
   {name: 'received', type: TYPES.DATETIME},
 
-  {name: 'user_id', type: TYPES.STRING},
-  {name: 'username', type: TYPES.STRING},
-  {name: 'email', type: TYPES.STRING},
-  {name: 'ip_address', type: TYPES.STRING},
+  {name: 'user.id', type: TYPES.STRING},
+  {name: 'user.username', type: TYPES.STRING},
+  {name: 'user.email', type: TYPES.STRING},
+  {name: 'user.ip', type: TYPES.STRING},
 
-  {name: 'sdk_name', type: TYPES.STRING},
-  {name: 'sdk_version', type: TYPES.STRING},
+  {name: 'sdk.name', type: TYPES.STRING},
+  {name: 'sdk.version', type: TYPES.STRING},
   {name: 'tags_key', type: TYPES.STRING},
   {name: 'tags_value', type: TYPES.STRING},
   {name: 'contexts.key', type: TYPES.STRING},
   {name: 'contexts.value', type: TYPES.STRING},
-  {name: 'http_method', type: TYPES.STRING},
-  {name: 'http_referer', type: TYPES.STRING},
-  {name: 'os_build', type: TYPES.STRING},
-  {name: 'os_kernel_version', type: TYPES.STRING},
-  {name: 'device_name', type: TYPES.STRING},
-  {name: 'device_brand', type: TYPES.STRING},
-  {name: 'device_locale', type: TYPES.STRING},
-  {name: 'device_uuid', type: TYPES.STRING},
-  {name: 'device_model_id', type: TYPES.STRING},
-  {name: 'device_arch', type: TYPES.STRING},
-  {name: 'device_battery_level', type: TYPES.NUMBER},
-  {name: 'device_orientation', type: TYPES.STRING},
-  {name: 'device_simulator', type: TYPES.STRING},
-  {name: 'device_online', type: TYPES.STRING},
-  {name: 'device_charging', type: TYPES.STRING},
-  {name: 'exception_stacks.type', type: TYPES.STRING},
-  {name: 'exception_stacks.value', type: TYPES.STRING},
-  {name: 'exception_stacks.mechanism_type', type: TYPES.STRING},
-  {name: 'exception_stacks.mechanism_handled', type: TYPES.STRING},
-  {name: 'exception_frames.abs_path', type: TYPES.STRING},
-  {name: 'exception_frames.filename', type: TYPES.STRING},
-  {name: 'exception_frames.package', type: TYPES.STRING},
-  {name: 'exception_frames.module', type: TYPES.STRING},
-  {name: 'exception_frames.function', type: TYPES.STRING},
-  {name: 'exception_frames.in_app', type: TYPES.BOOLEAN},
-  {name: 'exception_frames.colno', type: TYPES.STRING},
-  {name: 'exception_frames.lineno', type: TYPES.STRING},
-  {name: 'exception_frames.stack_level', type: TYPES.STRING},
+  {name: 'http.method', type: TYPES.STRING},
+  {name: 'http.url', type: TYPES.STRING},
+  {name: 'os.build', type: TYPES.STRING},
+  {name: 'os.kernel_version', type: TYPES.STRING},
+  {name: 'device.name', type: TYPES.STRING},
+  {name: 'device.brand', type: TYPES.STRING},
+  {name: 'device.locale', type: TYPES.STRING},
+  {name: 'device.uuid', type: TYPES.STRING},
+  {name: 'device.model_id', type: TYPES.STRING},
+  {name: 'device.arch', type: TYPES.STRING},
+  {name: 'device.battery_level', type: TYPES.NUMBER},
+  {name: 'device.orientation', type: TYPES.STRING},
+  {name: 'device.simulator', type: TYPES.BOOLEAN},
+  {name: 'device.online', type: TYPES.BOOLEAN},
+  {name: 'device.charging', type: TYPES.BOOLEAN},
+  {name: 'error.type', type: TYPES.STRING},
+  {name: 'error.value', type: TYPES.STRING},
+  {name: 'error.mechanism_type', type: TYPES.STRING},
+  {name: 'error.mechanism_handled', type: TYPES.STRING},
+  {name: 'stack.abs_path', type: TYPES.STRING},
+  {name: 'stack.filename', type: TYPES.STRING},
+  {name: 'stack.package', type: TYPES.STRING},
+  {name: 'stack.module', type: TYPES.STRING},
+  {name: 'stack.function', type: TYPES.STRING},
+  {name: 'stack.in_app', type: TYPES.BOOLEAN},
+  {name: 'stack.colno', type: TYPES.STRING},
+  {name: 'stack.lineno', type: TYPES.STRING},
+  {name: 'stack.stack_level', type: TYPES.STRING},
 ];
 
 export const CONDITION_OPERATORS = [
@@ -96,6 +96,6 @@ export const CONDITION_OPERATORS = [
   'NOT LIKE',
 ];
 
-export const ARRAY_FIELD_PREFIXES = ['exception_stacks', 'exception_frames'];
+export const ARRAY_FIELD_PREFIXES = ['error', 'stack'];
 
 export const NUMBER_OF_SERIES_BY_DAY = 10;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx
index c0d203a27d..626baaacac 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx
@@ -38,9 +38,9 @@ export default class Intro extends React.Component {
       {
         description: t('Top exception types'),
         query: {
-          fields: ['exception_stacks.type'],
+          fields: ['error.type'],
           aggregations: [['count()', null, 'count']],
-          conditions: [['exception_stacks.type', 'IS NOT NULL', null]],
+          conditions: [['error.type', 'IS NOT NULL', null]],
           limit: 1000,
           orderby: '-count',
         },
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 10023ba9f1..175c8ef2ba 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -28,6 +28,50 @@ from functools import reduce
 MAX_ISSUES = 500
 MAX_HASHES = 5000
 
+SENTRY_SNUBA_MAP = {
+    # user
+    'user.id': 'user_id',
+    'user.email': 'email',
+    'user.username': 'username',
+    'user.ip': 'ip_address',
+    # sdk
+    'sdk.name': 'sdk_name',
+    'sdk.version': 'sdk_version',
+    # http
+    'http.method': 'http_method',
+    'http.url': 'http_referer',
+    # os
+    'os.build': 'os_build',
+    'os.kernel_version': 'os_kernel_version',
+    # device
+    'device.name': 'device_name',
+    'device.brand': 'device_brand',
+    'device.locale': 'device_locale',
+    'device.uuid': 'device_uuid',
+    'device.model_id': 'device_model_id',
+    'device.arch': 'device_arch',
+    'device.battery_level': 'device_battery_level',
+    'device.orientation': 'device_orientation',
+    'device.simulator': 'device_orientation',
+    'device.online': 'device_online',
+    'device.charging': 'device_charging',
+
+    # error, stack
+    'error.type': 'exception_stacks.type',
+    'error.value': 'exception_stacks.value',
+    'error.mechanism_type': 'exception_stacks.mechanism_type',
+    'error.mechanism_handled': 'exception_stacks.mechanism_handled',
+    'stack.abs_path': 'exception_frames.abs_path',
+    'stack.filename': 'exception_frames.filename',
+    'stack.package': 'exception_frames.package',
+    'stack.module': 'exception_frames.module',
+    'stack.function': 'exception_frames.function',
+    'stack.in_app': 'exception_frames.in_app',
+    'stack.colno': 'exception_frames.colno',
+    'stack.lineno': 'exception_frames.lineno',
+    'stack.stack_level': 'exception_frames.stack_level',
+}
+
 
 class SnubaError(Exception):
     pass
@@ -58,6 +102,79 @@ _snuba_pool = urllib3.connectionpool.connection_from_url(
 )
 
 
+def transform_aliases_and_query(**kwargs):
+    """
+    Convert aliases in selected_columns, groupby, aggregation, conditions,
+    orderby and arrayjoin fields to their internal Snuba format and post the
+    query to Snuba. Convert back translated aliases before returning snuba
+    results.
+    """
+
+    arrayjoin_map = {
+        'error': 'exception_stacks',
+        'stack': 'exception_frames',
+    }
+
+    translated_columns = {}
+
+    selected_columns = kwargs['selected_columns']
+    groupby = kwargs['groupby']
+    aggregations = kwargs['aggregations']
+    conditions = kwargs['conditions'] or []
+
+    for (idx, col) in enumerate(selected_columns):
+        match = SENTRY_SNUBA_MAP.get(col)
+        if match:
+            selected_columns[idx] = match
+            translated_columns[match] = col
+
+    for (idx, col) in enumerate(groupby):
+        match = SENTRY_SNUBA_MAP.get(col)
+        if match:
+            groupby[idx] = match
+            translated_columns[match] = col
+
+    for aggregation in aggregations or []:
+        if len(aggregation) and SENTRY_SNUBA_MAP.get(aggregation[1]):
+            aggregation[1] = SENTRY_SNUBA_MAP[aggregation[1]]
+
+    def handle_condition(cond):
+        if isinstance(cond, (list, tuple)) and len(cond):
+            if (isinstance(cond[0], (list, tuple))):
+                cond[0] = handle_condition(cond[0])
+            elif len(cond) == 3:
+                # map column name
+                cond[0] = SENTRY_SNUBA_MAP.get(cond[0], cond[0])
+            elif len(cond) == 2:
+                # map function arguments
+                cond[1] = [SENTRY_SNUBA_MAP.get(arg, arg) for arg in cond[1]]
+        return cond
+
+    kwargs['conditions'] = [handle_condition(condition) for condition in conditions]
+
+    order_by_column = kwargs['orderby'].lstrip('-')
+    kwargs['orderby'] = u'{}{}'.format(
+        '-' if kwargs['orderby'].startswith('-') else '',
+        SENTRY_SNUBA_MAP.get(order_by_column, order_by_column)
+    ) or None
+
+    kwargs['arrayjoin'] = arrayjoin_map.get(kwargs['arrayjoin'], kwargs['arrayjoin'])
+
+    result = raw_query(**kwargs)
+
+    # Translate back columns that were converted to snuba format
+    for col in result['meta']:
+        col['name'] = translated_columns.get(col['name'], col['name'])
+
+    def get_row(row):
+        return {translated_columns.get(key, key): value for key, value in row.items()}
+
+    if len(translated_columns):
+        result['data'] = [get_row(row) for row in result['data']]
+
+    return result
+
+
 def raw_query(start, end, groupby=None, conditions=None, filter_keys=None,
               aggregations=None, rollup=None, arrayjoin=None, limit=None, offset=None,
               orderby=None, having=None, referrer=None, is_grouprelease=False,
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
index f8c9a03683..bba05111ab 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
@@ -14,8 +14,8 @@ describe('Aggregation', function() {
           expectedTextValue: 'uniq(environment)',
         },
         {
-          value: ['avg', 'device_battery_level', 'avg_device_battery_level'],
-          expectedTextValue: 'avg(device_battery_level)',
+          value: ['avg', 'device.battery_level', 'avg_device_battery_level'],
+          expectedTextValue: 'avg(device.battery_level)',
         },
         {
           value: ['uniq', 'tags[message]', 'uniq_tags_message'],
@@ -38,7 +38,7 @@ describe('Aggregation', function() {
       const cols = [
         {name: 'col1', type: 'string'},
         {name: 'col2', type: 'number'},
-        {name: 'exception_stacks.type', type: 'string'},
+        {name: 'error.type', type: 'string'},
       ];
       wrapper = mount(
         <Aggregation value={[null, null, null]} onChange={jest.fn()} columns={cols} />
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
index cc3a9832f1..de1a079e54 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
@@ -16,8 +16,8 @@ const aggregationList = [
     external: ['uniq', 'message', 'uniq_message'],
   },
   {
-    internal: 'avg(device_battery_level)',
-    external: ['avg', 'device_battery_level', 'avg_device_battery_level'],
+    internal: 'avg(device.battery_level)',
+    external: ['avg', 'device.battery_level', 'avg_device_battery_level'],
   },
   {
     internal: 'uniq(tags[server_name])',
@@ -48,21 +48,30 @@ describe('Aggregations', function() {
     it('validates count', function() {
       expect(isValidAggregation(['count()', null, 'count'], COLUMNS)).toEqual(true);
       expect(isValidAggregation(['count', null, 'count'], COLUMNS)).toEqual(false);
-      expect(isValidAggregation(['count()', 'email', 'count'], COLUMNS)).toEqual(false);
+      expect(isValidAggregation(['count()', 'user.email', 'count'], COLUMNS)).toEqual(
+        false
+      );
     });
 
     it('validates uniq', function() {
-      expect(isValidAggregation(['uniq', 'email', 'uniq_email'], COLUMNS)).toEqual(true);
+      expect(
+        isValidAggregation(['uniq', 'user.email', 'uniq_user_email'], COLUMNS)
+      ).toEqual(true);
 
       expect(isValidAggregation(['uniq', 'mail', 'uniq_mail'], COLUMNS)).toEqual(false);
     });
 
     it('validates avg', function() {
       expect(
-        isValidAggregation(['avg', 'device_battery_level', 'avg_email'], COLUMNS)
+        isValidAggregation(
+          ['avg', 'device.battery_level', 'avg_device_battery_level'],
+          COLUMNS
+        )
       ).toEqual(true);
 
-      expect(isValidAggregation(['avg', 'email', 'avg_email'], COLUMNS)).toEqual(false);
+      expect(
+        isValidAggregation(['avg', 'user.email', 'avg_user_email'], COLUMNS)
+      ).toEqual(false);
     });
   });
 });
diff --git a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
index df59b4cac3..dbb969b2e4 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
@@ -8,11 +8,11 @@ describe('Condition', function() {
     it('renders text', function() {
       const data = [
         {value: [null, null, null], expectedText: 'Add condition...'},
-        {value: ['device_name', '=', 'test'], expectedText: 'device_name = test'},
-        {value: ['device_name', 'IS NULL', null], expectedText: 'device_name IS NULL'},
+        {value: ['device.name', '=', 'test'], expectedText: 'device.name = test'},
+        {value: ['device.name', 'IS NULL', null], expectedText: 'device.name IS NULL'},
         {
-          value: ['device_battery_level', '>', 5],
-          expectedText: 'device_battery_level > 5',
+          value: ['device.battery_level', '>', 5],
+          expectedText: 'device.battery_level > 5',
         },
       ];
       data.forEach(function(condition) {
@@ -31,7 +31,7 @@ describe('Condition', function() {
         {name: 'col1', type: 'string'},
         {name: 'col2', type: 'number'},
         {name: 'col3', type: 'datetime'},
-        {name: 'exception_stacks.type', type: 'string'},
+        {name: 'error.type', type: 'string'},
       ];
       wrapper = mount(
         <Condition value={[null, null, null]} onChange={jest.fn()} columns={columns} />
@@ -70,10 +70,10 @@ describe('Condition', function() {
     });
 
     it('limits operators to = and != for array fields', function() {
-      const options = wrapper.instance().filterOptions([], 'exception_stacks.type');
+      const options = wrapper.instance().filterOptions([], 'error.type');
       expect(options).toHaveLength(2);
-      expect(options[0].value).toEqual('exception_stacks.type =');
-      expect(options[1].value).toEqual('exception_stacks.type !=');
+      expect(options[0].value).toEqual('error.type =');
+      expect(options[1].value).toEqual('error.type !=');
     });
   });
 
diff --git a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
index 5954e554ac..982ff04f97 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
@@ -12,20 +12,20 @@ const conditionList = [
     external: ['message', 'LIKE', '%test%'],
   },
   {
-    internal: 'user_id = USER_1',
-    external: ['user_id', '=', 'USER_1'],
+    internal: 'user.id = USER_1',
+    external: ['user.id', '=', 'USER_1'],
   },
   {
     internal: 'message IS NOT NULL',
     external: ['message', 'IS NOT NULL', null],
   },
   {
-    internal: 'device_battery_level = 3',
-    external: ['device_battery_level', '=', 3],
+    internal: 'device.battery_level = 3',
+    external: ['device.battery_level', '=', 3],
   },
   {
-    internal: 'device_battery_level >= 0',
-    external: ['device_battery_level', '>=', 0],
+    internal: 'device.battery_level >= 0',
+    external: ['device.battery_level', '>=', 0],
   },
   {
     internal: 'message NOT LIKE something%',
@@ -36,12 +36,12 @@ const conditionList = [
     external: ['message', 'LIKE', null],
   },
   {
-    internal: 'exception_frames.in_app = true',
-    external: ['exception_frames.in_app', '=', true],
+    internal: 'stack.in_app = true',
+    external: ['stack.in_app', '=', true],
   },
   {
-    internal: 'exception_frames.in_app = false',
-    external: ['exception_frames.in_app', '=', false],
+    internal: 'stack.in_app = false',
+    external: ['stack.in_app', '=', false],
   },
 ];
 
@@ -64,22 +64,20 @@ describe('Conditions', function() {
 
   describe('isValidCondition()', function() {
     it('validates column name exists', function() {
-      expect(isValidCondition(['device_name', '=', 'something'], COLUMNS)).toBe(true);
-      expect(isValidCondition(['device__name', '=', 'something'], COLUMNS)).toBe(false);
+      expect(isValidCondition(['device.name', '=', 'something'], COLUMNS)).toBe(true);
+      expect(isValidCondition(['device_name', '=', 'something'], COLUMNS)).toBe(false);
     });
 
     it('validates column type', function() {
-      expect(isValidCondition(['device_battery_level', '=', 5], COLUMNS)).toBe(true);
-      expect(isValidCondition(['device_battery_level', '=', '5'], COLUMNS)).toBe(false);
+      expect(isValidCondition(['device.battery_level', '=', 5], COLUMNS)).toBe(true);
+      expect(isValidCondition(['device.battery_level', '=', '5'], COLUMNS)).toBe(false);
     });
 
     it('validates operator', function() {
-      expect(isValidCondition(['device_name', 'LIKE', '%something%'], COLUMNS)).toBe(
+      expect(isValidCondition(['device.name', 'LIKE', '%something%'], COLUMNS)).toBe(
         true
       );
-      expect(isValidCondition(['device__name', 'iS', '%something%'], COLUMNS)).toBe(
-        false
-      );
+      expect(isValidCondition(['device_name', 'iS', '%something%'], COLUMNS)).toBe(false);
     });
   });
 });
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
index c42be6b757..8a0a4b4753 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
@@ -49,49 +49,49 @@ describe('Utils', function() {
   it('getChartDataByDay()', function() {
     const raw = [
       {
-        'exception_stacks.type': 'ZeroDivisionError',
+        'error.type': 'ZeroDivisionError',
         platform: 'python',
         count: 6,
         time: 1531094400,
       },
       {
-        'exception_stacks.type': 'Type Error',
+        'error.type': 'Type Error',
         platform: 'javascript',
         count: 6,
         time: 1531094400,
       },
       {
-        'exception_stacks.type': 'Exception',
+        'error.type': 'Exception',
         platform: 'php',
         count: 6,
         time: 1531094400,
       },
       {
-        'exception_stacks.type': 'SnubaError',
+        'error.type': 'SnubaError',
         platform: 'python',
         count: 14,
         time: 1531094400,
       },
       {
-        'exception_stacks.type': 'ZeroDivisionError',
+        'error.type': 'ZeroDivisionError',
         platform: 'python',
         count: 20,
         time: 1531180800,
       },
       {
-        'exception_stacks.type': 'Type Error',
+        'error.type': 'Type Error',
         platform: 'javascript',
         count: 5,
         time: 1532070000,
       },
       {
-        'exception_stacks.type': 'Exception',
+        'error.type': 'Exception',
         platform: 'php',
         count: 8,
         time: 1532070000,
       },
       {
-        'exception_stacks.type': 'SnubaError',
+        'error.type': 'SnubaError',
         platform: 'python',
         count: 30,
         time: 1532070000,
@@ -100,7 +100,7 @@ describe('Utils', function() {
 
     const query = {
       aggregations: [['count()', null, 'count']],
-      fields: ['platform', 'exception_stacks.type'],
+      fields: ['platform', 'error.type'],
     };
 
     const expected = [
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index 5e8acbc0cc..a9ec5875d9 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -119,8 +119,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
             response = self.client.post(url, {
                 'projects': [self.project.id],
-                'fields': ['message', 'platform', 'exception_frames.in_app'],
-                'conditions': [['exception_frames.in_app', '=', True]],
+                'fields': ['message', 'platform', 'stack.in_app'],
+                'conditions': [['stack.in_app', '=', True]],
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
@@ -136,21 +136,21 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
             response = self.client.post(url, {
                 'projects': [self.project.id],
-                'fields': ['message', 'exception_stacks.type'],
+                'fields': ['message', 'error.type'],
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now() + timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 1
-        assert response.data['data'][0]['exception_stacks.type'] == 'ValidationError'
+        assert response.data['data'][0]['error.type'] == 'ValidationError'
 
     def test_array_condition_equals(self):
         with self.feature('organizations:discover'):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
             response = self.client.post(url, {
                 'projects': [self.project.id],
-                'conditions': [['exception_stacks.type', '=', 'ValidationError']],
+                'conditions': [['error.type', '=', 'ValidationError']],
                 'fields': ['message'],
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
@@ -164,7 +164,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
             response = self.client.post(url, {
                 'projects': [self.project.id],
-                'conditions': [['exception_stacks.type', '!=', 'ValidationError']],
+                'conditions': [['error.type', '!=', 'ValidationError']],
                 'fields': ['message'],
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
