commit 736f6f26d1885356f457023b55ce94e9d06ae3f6
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Jan 22 13:20:36 2020 -0800

    feat(integrations): first-party integration analytics (#16508)

diff --git a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
index 7bf0ef5315..7c30644ce5 100644
--- a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
@@ -75,6 +75,20 @@ class IntegrationDetailsModal extends React.Component<Props> {
     this.props.onAddIntegration(integration);
   };
 
+  handleExternalInstall = () => {
+    const {closeModal, provider, organization} = this.props;
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.installation_start',
+        eventName: 'Integrations: Installation Start',
+        integration: provider.key,
+        integration_type: 'first_party',
+      },
+      organization
+    );
+    closeModal();
+  };
+
   featureTags(features: string[]) {
     return features.map(feature => (
       <StyledTag key={feature}>{feature.replace(/-/g, ' ')}</StyledTag>
@@ -115,7 +129,7 @@ class IntegrationDetailsModal extends React.Component<Props> {
         <Button
           icon="icon-exit"
           href={metadata.aspects.externalInstall.url}
-          onClick={closeModal}
+          onClick={this.handleExternalInstall}
           external
           {...buttonProps}
           {...p}
@@ -189,6 +203,7 @@ class IntegrationDetailsModal extends React.Component<Props> {
                     <AddButton
                       data-test-id="add-button"
                       disabled={disabled || !hasAccess}
+                      organization={organization}
                     />
                   </Tooltip>
                 )}
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 52054ba67f..33ef99963e 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -19,12 +19,30 @@ export const getAnalyticsSessionId = () => {
   return window.sessionStorage.getItem(INTEGRATIONS_ANALYTICS_SESSION_KEY);
 };
 
-type SingleIntegrationEvent = {
+type ModalOpenEvent = {
   eventKey: 'integrations.install_modal_opened';
   eventName: 'Integrations: Install Modal Opened';
+  already_installed: boolean; //need this field for the modal open event but not other events
+};
+
+type OtherSingleIntegrationEvents = {
+  eventKey:
+    | 'integrations.installation_start'
+    | 'integrations.installation_complete'
+    | 'integrations.details_viewed'
+    | 'integrations.uninstall_clicked'
+    | 'integrations.uninstall_completed';
+  eventName:
+    | 'Integrations: Installation Start'
+    | 'Integrations: Installation Complete'
+    | 'Integrations: Details Viewed'
+    | 'Integrations: Uninstall Clicked'
+    | 'Integrations: Uninstall Completed';
+};
+
+type SingleIntegrationEvent = (ModalOpenEvent | OtherSingleIntegrationEvents) & {
   integration: string; //the slug
   integration_type: 'sentry_app' | 'plugin' | 'first_party';
-  already_installed: boolean;
 };
 
 //TODO(Steve): hook up events
@@ -35,7 +53,11 @@ type MultipleIntegrationsEvent = {
 };
 
 type IntegrationsEventParams = (MultipleIntegrationsEvent | SingleIntegrationEvent) & {
-  view?: 'external_install' | 'integrations_page' | 'legacy_integrations';
+  view?:
+    | 'external_install'
+    | 'integrations_page'
+    | 'legacy_integrations'
+    | 'integrations_directory';
 } & Parameters<Hooks['analytics:track-event']>[0];
 
 /**
@@ -45,17 +67,25 @@ type IntegrationsEventParams = (MultipleIntegrationsEvent | SingleIntegrationEve
  */
 export const trackIntegrationEvent = (
   analtyicsParams: IntegrationsEventParams,
-  org: Organization,
+  org?: Organization, //we should pass in org whenever we can but not every place guarantees this
   options?: {startSession: boolean}
 ) => {
   const {startSession} = options || {};
   const sessionId = startSession ? startAnalyticsSession() : getAnalyticsSessionId();
   const fullParams = {
     analytics_session_id: sessionId,
-    organization_id: org.id,
-    role: org.role,
+    organization_id: org?.id,
+    role: org?.role,
+    integration_directory_active: false, //TODO: should be configurable
     ...analtyicsParams,
   };
+
+  //TODO(steve): remove once we pass in org always
+  if (!org) {
+    // eslint-disable-next-line no-console
+    console.warn(`Organization absent from event ${analtyicsParams.eventName}`);
+  }
+
   //could put this into a debug method or for the main trackAnalyticsEvent event
   if (window.localStorage.getItem('DEBUG') === '1') {
     // eslint-disable-next-line no-console
diff --git a/src/sentry/static/sentry/app/views/integrationInstallation.tsx b/src/sentry/static/sentry/app/views/integrationInstallation.tsx
index e8513bf359..ca90b5d2b1 100644
--- a/src/sentry/static/sentry/app/views/integrationInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/integrationInstallation.tsx
@@ -129,7 +129,10 @@ export default class IntegrationInstallation extends AsyncView<Props, State> {
 
   renderBody() {
     const {organization, selectedOrg} = this.state;
-    const choices = this.state.organizations.map(org => [org.slug, org.slug]);
+    const choices = this.state.organizations.map((org: Organization) => [
+      org.slug,
+      org.slug,
+    ]);
 
     const featureListHooks = HookStore.get('integrations:feature-gates');
     const FeatureList = featureListHooks.length
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
index 0b5983b3ab..cb0e54d909 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
@@ -2,9 +2,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import queryString from 'query-string';
 
-import {IntegrationProvider, Integration} from 'app/types';
+import {IntegrationProvider, Integration, Organization} from 'app/types';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 
 type Props = {
   children: (
@@ -14,6 +16,7 @@ type Props = {
   onInstall: (data: Integration) => void;
   reinstallId?: string;
   account?: string;
+  organization?: Organization; //for analytics
 };
 
 export default class AddIntegration extends React.Component<Props> {
@@ -23,6 +26,7 @@ export default class AddIntegration extends React.Component<Props> {
     onInstall: PropTypes.func.isRequired,
     reinstallId: PropTypes.string,
     account: PropTypes.string,
+    organization: SentryTypes.Organization,
   };
 
   componentDidMount() {
@@ -62,6 +66,15 @@ export default class AddIntegration extends React.Component<Props> {
   }
 
   openDialog = (urlParams?: {[key: string]: string}) => {
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.installation_start',
+        eventName: 'Integrations: Installation Start',
+        integration: this.props.provider.key,
+        integration_type: 'first_party',
+      },
+      this.props.organization
+    );
     const name = 'sentryAddIntegration';
     const {url, width, height} = this.props.provider.setupDialog;
     const {left, top} = this.computeCenteredWindow(width, height);
@@ -104,6 +117,15 @@ export default class AddIntegration extends React.Component<Props> {
       return;
     }
     this.props.onInstall(data);
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.installation_complete',
+        eventName: 'Integrations: Installation Complete',
+        integration: this.props.provider.key,
+        integration_type: 'first_party',
+      },
+      this.props.organization
+    );
     addSuccessMessage(t('%s added', this.props.provider.name));
   };
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
index 0d5620dc68..ae068312e5 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
@@ -5,13 +5,15 @@ import {t} from 'app/locale';
 import AddIntegration from 'app/views/organizationIntegrations/addIntegration';
 import Button from 'app/components/button';
 import Tooltip from 'app/components/tooltip';
-import {IntegrationProvider, Integration} from 'app/types';
+import {IntegrationProvider, Integration, Organization} from 'app/types';
+import SentryTypes from 'app/sentryTypes';
 
 type Props = {
   provider: IntegrationProvider;
   onAddIntegration: (data: Integration) => void;
   buttonText?: string;
   reinstall?: boolean;
+  organization?: Organization; //for analytics
 } & React.ComponentProps<typeof Button>;
 
 export default class AddIntegrationButton extends React.Component<Props> {
@@ -20,6 +22,7 @@ export default class AddIntegrationButton extends React.Component<Props> {
     onAddIntegration: PropTypes.func.isRequired,
     buttonText: PropTypes.string,
     reinstall: PropTypes.bool,
+    organization: SentryTypes.Organization,
   };
 
   render() {
@@ -27,6 +30,7 @@ export default class AddIntegrationButton extends React.Component<Props> {
       provider,
       buttonText,
       onAddIntegration,
+      organization,
       reinstall,
       ...buttonProps
     } = this.props;
@@ -39,7 +43,11 @@ export default class AddIntegrationButton extends React.Component<Props> {
         disabled={provider.canAdd}
         title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}
       >
-        <AddIntegration provider={provider} onInstall={onAddIntegration}>
+        <AddIntegration
+          provider={provider}
+          onInstall={onAddIntegration}
+          organization={organization}
+        >
           {onClick => (
             <Button
               disabled={!provider.canAdd}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
index e164995d80..97b27965bc 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
@@ -16,7 +16,7 @@ import {
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {RequestOptions} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
-import {analytics} from 'app/utils/analytics';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 import {removeSentryApp} from 'app/actionCreators/sentryApps';
 import {sortArray} from 'app/utils';
 import {t} from 'app/locale';
@@ -69,10 +69,28 @@ class OrganizationIntegrations extends AsyncComponent<
     organization: SentryTypes.Organization,
   };
 
-  componentDidMount() {
-    analytics('integrations.index_viewed', {
-      org_id: parseInt(this.props.organization.id, 10),
+  onLoadAllEndpointsSuccess() {
+    //count the number of installed apps
+    const {integrations, publishedApps} = this.state;
+    const integrationsInstalled = new Set();
+    //add installed integrations
+    integrations.forEach((integration: Integration) => {
+      integrationsInstalled.add(integration.provider.key);
     });
+    //add sentry apps
+    publishedApps.filter(this.getAppInstall).forEach((sentryApp: SentryApp) => {
+      integrationsInstalled.add(sentryApp.slug);
+    });
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.index_viewed',
+        eventName: 'Integrations: Index Page Viewed',
+        integrations_installed: integrationsInstalled.size,
+        view: 'integrations_page',
+      },
+      this.props.organization,
+      {startSession: true}
+    );
   }
 
   getEndpoints(): ([string, string, any] | [string, string])[] {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
index 8f51cd18fa..a1435f6e5d 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
@@ -10,12 +10,14 @@ import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
 import Tooltip from 'app/components/tooltip';
-import {IntegrationProvider, Integration} from 'app/types';
+import {IntegrationProvider, Integration, Organization} from 'app/types';
+import SentryTypes from 'app/sentryTypes';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 
 const CONFIGURABLE_FEATURES = ['commits', 'alert-rule'];
 
 export type Props = {
-  orgId: string;
+  organization: Organization;
   provider: IntegrationProvider;
   integration: Integration;
   onRemove: (integration: Integration) => void;
@@ -26,7 +28,7 @@ export type Props = {
 
 export default class InstalledIntegration extends React.Component<Props> {
   static propTypes = {
-    orgId: PropTypes.string.isRequired,
+    organization: SentryTypes.Organization.isRequired,
     provider: PropTypes.object.isRequired,
     integration: PropTypes.object.isRequired,
     onRemove: PropTypes.func.isRequired,
@@ -57,6 +59,18 @@ export default class InstalledIntegration extends React.Component<Props> {
     this.props.onReinstallIntegration(activeIntegration);
   };
 
+  handleUninstallClick = () => {
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.uninstall_clicked',
+        eventName: 'Integrations: Uninstall Clicked',
+        integration: this.props.provider.key,
+        integration_type: 'first_party',
+      },
+      this.props.organization
+    );
+  };
+
   getRemovalBodyAndText(aspects) {
     if (aspects && aspects.removal_dialog) {
       return {
@@ -73,6 +87,19 @@ export default class InstalledIntegration extends React.Component<Props> {
     }
   }
 
+  handleRemove(integration: Integration) {
+    this.props.onRemove(integration);
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.uninstall_completed',
+        eventName: 'Integrations: Uninstall Completed',
+        integration: this.props.provider.key,
+        integration_type: 'first_party',
+      },
+      this.props.organization
+    );
+  }
+
   get removeConfirmProps() {
     const {integration} = this.props;
     const {body, actionText} = this.getRemovalBodyAndText(integration.provider.aspects);
@@ -88,7 +115,7 @@ export default class InstalledIntegration extends React.Component<Props> {
     return {
       message,
       confirmText: actionText,
-      onConfirm: () => this.props.onRemove(integration),
+      onConfirm: () => this.handleRemove(integration),
     };
   }
 
@@ -112,7 +139,7 @@ export default class InstalledIntegration extends React.Component<Props> {
   }
 
   render() {
-    const {className, integration, provider, orgId} = this.props;
+    const {className, integration, provider, organization} = this.props;
 
     const removeConfirmProps =
       integration.status === 'active' && integration.provider.canDisable
@@ -146,7 +173,7 @@ export default class InstalledIntegration extends React.Component<Props> {
                     borderless
                     icon="icon-settings"
                     disabled={!this.hasConfiguration() || !hasAccess}
-                    to={`/settings/${orgId}/integrations/${provider.key}/${integration.id}/`}
+                    to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}
                     data-test-id="integration-configure-button"
                   >
                     Configure
@@ -155,7 +182,12 @@ export default class InstalledIntegration extends React.Component<Props> {
               )}
             </div>
             <div>
-              <Confirm priority="danger" disabled={!hasAccess} {...removeConfirmProps}>
+              <Confirm
+                priority="danger"
+                onConfirming={this.handleUninstallClick}
+                disabled={!hasAccess}
+                {...removeConfirmProps}
+              >
                 <StyledButton
                   disabled={!hasAccess}
                   borderless
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
index b442fa8bbf..85af39b599 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
@@ -103,7 +103,7 @@ export default class ProviderRow extends React.Component<Props> {
     return this.integrations.map(integration => (
       <StyledInstalledIntegration
         key={integration.id}
-        orgId={this.props.orgId}
+        organization={this.context.organization}
         provider={this.props.provider}
         integration={integration}
         onRemove={this.props.onRemove}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
index 941543ea7a..b41d8f284a 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import {RouteComponentProps} from 'react-router/lib/Router';
 
-import {analytics} from 'app/utils/analytics';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import AddIntegration from 'app/views/organizationIntegrations/addIntegration';
@@ -15,6 +14,7 @@ import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import withOrganization from 'app/utils/withOrganization';
 import {Organization, Integration, IntegrationProvider} from 'app/types';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 
 type RouteParams = {
   orgId: string;
@@ -41,10 +41,15 @@ class ConfigureIntegration extends AsyncView<Props, State> {
     if (stateKey !== 'integration') {
       return;
     }
-    analytics('integrations.details_viewed', {
-      org_id: parseInt(this.props.organization.id, 10),
-      integration: data.provider.key,
-    });
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.details_viewed',
+        eventName: 'Integrations: Details Viewed',
+        integration: data.provider.key,
+        integration_type: 'first_party',
+      },
+      this.props.organization
+    );
   }
 
   getTitle() {
diff --git a/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap b/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
index ed7ced634b..0efd097410 100644
--- a/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
+++ b/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
@@ -555,11 +555,67 @@ exports[`IntegrationDetailsModal renders simple integration 1`] = `
               <AddButton
                 data-test-id="add-button"
                 disabled={false}
+                organization={
+                  Object {
+                    "access": Array [
+                      "org:read",
+                      "org:write",
+                      "org:admin",
+                      "org:integrations",
+                      "project:read",
+                      "project:write",
+                      "project:admin",
+                      "team:read",
+                      "team:write",
+                      "team:admin",
+                    ],
+                    "features": Array [],
+                    "id": "3",
+                    "name": "Organization Name",
+                    "onboardingTasks": Array [],
+                    "projects": Array [],
+                    "scrapeJavaScript": true,
+                    "slug": "org-slug",
+                    "status": Object {
+                      "id": "active",
+                      "name": "active",
+                    },
+                    "teams": Array [],
+                  }
+                }
               >
                 <AddIntegrationButton
                   data-test-id="add-button"
                   disabled={false}
                   onAddIntegration={[Function]}
+                  organization={
+                    Object {
+                      "access": Array [
+                        "org:read",
+                        "org:write",
+                        "org:admin",
+                        "org:integrations",
+                        "project:read",
+                        "project:write",
+                        "project:admin",
+                        "team:read",
+                        "team:write",
+                        "team:admin",
+                      ],
+                      "features": Array [],
+                      "id": "3",
+                      "name": "Organization Name",
+                      "onboardingTasks": Array [],
+                      "projects": Array [],
+                      "scrapeJavaScript": true,
+                      "slug": "org-slug",
+                      "status": Object {
+                        "id": "active",
+                        "name": "active",
+                      },
+                      "teams": Array [],
+                    }
+                  }
                   priority="primary"
                   provider={
                     Object {
@@ -611,6 +667,34 @@ exports[`IntegrationDetailsModal renders simple integration 1`] = `
                   >
                     <AddIntegration
                       onInstall={[Function]}
+                      organization={
+                        Object {
+                          "access": Array [
+                            "org:read",
+                            "org:write",
+                            "org:admin",
+                            "org:integrations",
+                            "project:read",
+                            "project:write",
+                            "project:admin",
+                            "team:read",
+                            "team:write",
+                            "team:admin",
+                          ],
+                          "features": Array [],
+                          "id": "3",
+                          "name": "Organization Name",
+                          "onboardingTasks": Array [],
+                          "projects": Array [],
+                          "scrapeJavaScript": true,
+                          "slug": "org-slug",
+                          "status": Object {
+                            "id": "active",
+                            "name": "active",
+                          },
+                          "teams": Array [],
+                        }
+                      }
                       provider={
                         Object {
                           "canAdd": true,
