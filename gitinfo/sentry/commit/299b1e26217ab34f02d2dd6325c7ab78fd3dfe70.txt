commit 299b1e26217ab34f02d2dd6325c7ab78fd3dfe70
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Mar 20 11:25:41 2015 -0700

    Expose sensitive_fields in project settings

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index a348a2ec7e..01aadc777e 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -223,3 +223,12 @@ CLIENT_RESERVED_ATTRS = (
     'platform',
     'release',
 )
+
+DEFAULT_SCRUBBED_FIELDS = (
+    'password',
+    'secret',
+    'passwd',
+    'authorization',
+    'api_key',
+    'apikey',
+)
diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
index 90c8f0cb2b..9782a61964 100644
--- a/src/sentry/static/sentry/scripts/app.js
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -536,6 +536,14 @@
 
             app.utils.makeSearchableUsersInput('form input[name=owner]');
 
+            $("input[name='scrub_data']").change(function(){
+                if ($(this).is(':checked')) {
+                    $("#div_id_sensitive_fields").show();
+                } else {
+                    $("#div_id_sensitive_fields").hide();
+                }
+            }).change();
+
             $("input[type=range]").each(_.bind(function loop(n, el){
                 var $el = $(el),
                     min = parseInt($el.attr('min'), 10),
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index ab18242800..6016be265b 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -32,6 +32,7 @@
                 <div><legend>{% trans "Event Settings" %}</legend></div>
                 {{ form.resolve_age|as_crispy_field }}
                 {{ form.scrub_data|as_crispy_field }}
+                {{ form.sensitive_fields|as_crispy_field }}
                 {{ form.scrub_ip_address|as_crispy_field }}
                 {% if form.public %}
                     {{ form.public|as_crispy_field }}
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 3565138ab7..1a00d4d365 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -10,6 +10,8 @@ from __future__ import absolute_import
 import re
 import six
 
+from sentry.constants import DEFAULT_SCRUBBED_FIELDS
+
 
 def varmap(func, var, context=None, name=None):
     """
@@ -41,13 +43,13 @@ class SensitiveDataFilter(object):
     and API keys in frames, http, and basic extra data.
     """
     MASK = '*' * 8
-    DEFAULT_FIELDS = frozenset([
-        'password', 'secret', 'passwd', 'authorization', 'api_key', 'apikey'
-    ])
     VALUES_RE = re.compile(r'\b(?:\d[ -]*?){13,16}\b')
 
-    def __init__(self, additional_fields=[]):
-        self.fields = frozenset(self.DEFAULT_FIELDS | set(additional_fields))
+    def __init__(self, fields=None):
+        if fields:
+            self.fields = DEFAULT_SCRUBBED_FIELDS + tuple(fields)
+        else:
+            self.fields = DEFAULT_SCRUBBED_FIELDS
 
     def apply(self, data):
         if 'stacktrace' in data:
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 0a708e4b31..23ee21a21e 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -380,7 +380,7 @@ class StoreView(APIView):
 
         if project.get_option('sentry:scrub_data', True):
             # We filter data immediately before it ever gets into the queue
-            inst = SensitiveDataFilter(project.get_option('sentry:sensitive_fields', []))
+            inst = SensitiveDataFilter(project.get_option('sentry:sensitive_fields', None))
             inst.apply(data)
 
         if scrub_ip_address:
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 2dd8fe40b3..eca0645ecf 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -74,6 +74,16 @@ class EditProjectForm(forms.ModelForm):
         help_text=_('Apply server-side data scrubbing to prevent things like passwords and credit cards from being stored.'),
         required=False
     )
+    sensitive_fields = forms.CharField(
+        label=_('Additional sensitive fields'),
+        help_text=_('Additional field names to match against when scrubbing data. Separate multiple entries with a newline.'),
+        widget=forms.Textarea(attrs={
+            'placeholder': mark_safe(_('e.g. email')),
+            'class': 'span8',
+            'rows': '3',
+        }),
+        required=False,
+    )
     scrub_ip_address = forms.BooleanField(
         label=_('Don\'t store IP Addresses'),
         help_text=_('Prevent IP addresses from being stored for new events.'),
@@ -115,6 +125,13 @@ class EditProjectForm(forms.ModelForm):
 
         return choices
 
+    def clean_sensitive_fields(self):
+        value = self.cleaned_data.get('sensitive_fields')
+        if not value:
+            return
+
+        return filter(bool, (v.strip() for v in value.split('\n')))
+
     def clean_team(self):
         value = self.cleaned_data.get('team')
         if not value:
@@ -196,6 +213,7 @@ class ProjectSettingsView(ProjectView):
                 'token': security_token,
                 'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
                 'scrub_data': bool(project.get_option('sentry:scrub_data', True)),
+                'sensitive_fields': '\n'.join(project.get_option('sentry:sensitive_fields', None) or []),
                 'scrub_ip_address': bool(project.get_option('sentry:scrub_ip_address', False)),
             },
         )
@@ -205,7 +223,8 @@ class ProjectSettingsView(ProjectView):
 
         if form.is_valid():
             project = form.save()
-            for opt in ('origins', 'resolve_age', 'scrub_data', 'scrub_ip_address', 'token'):
+            for opt in ('origins', 'resolve_age', 'scrub_data', 'sensitive_fields',
+                        'scrub_ip_address', 'token'):
                 value = form.cleaned_data.get(opt)
                 if value is None:
                     project.delete_option('sentry:%s' % (opt,))
