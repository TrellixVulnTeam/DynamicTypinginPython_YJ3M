commit 9e8f9281bcf8b7af8b8f42d9aede2f5946281ea6
Author: Matej Minar <matej.minar@sentry.io>
Date:   Thu Apr 23 13:59:19 2020 +0200

    ref(ui): Convert ProjectDebugFiles to typescript (#18403)
    
    This PR refactors ProjectDebugFiles view. I did three main changes, each in a separate commit so that it's easier to review them:
    
    - converted component to typescript + few es6 goodies
    - split the large file into multiple smaller, more readable ones + few es6 goodies
    - replaced reflexbox and classNames with styled components
    
    I've noticed a few more issues on this page - I would like to tackle them in followup PRs.

diff --git a/src/sentry/static/sentry/app/components/panels/index.tsx b/src/sentry/static/sentry/app/components/panels/index.tsx
index 90207e0ece..fc5dce32f7 100644
--- a/src/sentry/static/sentry/app/components/panels/index.tsx
+++ b/src/sentry/static/sentry/app/components/panels/index.tsx
@@ -5,6 +5,6 @@ import PanelFooter from 'app/components/panels/panelFooter';
 import PanelItem from 'app/components/panels/panelItem';
 import PanelAlert from 'app/components/panels/panelAlert';
 
-export {default as PanelTable} from 'app/components/panels/panelTable';
+export {default as PanelTable, PanelTableHeader} from 'app/components/panels/panelTable';
 
 export {Panel, PanelHeader, PanelBody, PanelFooter, PanelItem, PanelAlert};
diff --git a/src/sentry/static/sentry/app/components/panels/panelTable.tsx b/src/sentry/static/sentry/app/components/panels/panelTable.tsx
index 578ea7857a..2fed8d8e7d 100644
--- a/src/sentry/static/sentry/app/components/panels/panelTable.tsx
+++ b/src/sentry/static/sentry/app/components/panels/panelTable.tsx
@@ -139,7 +139,7 @@ const Wrapper = styled(Panel, {
   }
 `;
 
-const PanelTableHeader = styled('div')`
+export const PanelTableHeader = styled('div')`
   color: ${p => p.theme.gray3};
   font-size: 13px;
   font-weight: 600;
diff --git a/src/sentry/static/sentry/app/views/settings/components/tag.jsx b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
index e26cfb02ce..d900a7be6c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/tag.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
@@ -19,7 +19,15 @@ const getBorder = p =>
     : '';
 
 const Tag = styled(
-  ({children, icon, priority: _priority, size: _size, border: _border, ...props}) => (
+  ({
+    children,
+    icon,
+    inline: _inline,
+    priority: _priority,
+    size: _size,
+    border: _border,
+    ...props
+  }) => (
     <div {...props}>
       {icon && <StyledInlineSvg src={icon} size="12px" />}
       {children}
diff --git a/src/sentry/static/sentry/app/views/settings/projectDebugFiles.jsx b/src/sentry/static/sentry/app/views/settings/projectDebugFiles.jsx
deleted file mode 100644
index 921e3ddbb0..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectDebugFiles.jsx
+++ /dev/null
@@ -1,290 +0,0 @@
-import {Box, Flex} from 'reflexbox';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
-import {fields} from 'app/data/forms/projectDebugFiles';
-import {t} from 'app/locale';
-import Access from 'app/components/acl/access';
-import AsyncComponent from 'app/components/asyncComponent';
-import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
-import Button from 'app/components/button';
-import Confirm from 'app/components/confirm';
-import {IconDelete} from 'app/icons/iconDelete';
-import Form from 'app/views/settings/components/forms/form';
-import JsonForm from 'app/views/settings/components/forms/jsonForm';
-import PermissionAlert from 'app/views/settings/project/permissionAlert';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import FileSize from 'app/components/fileSize';
-import Pagination from 'app/components/pagination';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import Tag from 'app/views/settings/components/tag';
-import TextBlock from 'app/views/settings/components/text/textBlock';
-import TimeSince from 'app/components/timeSince';
-import Tooltip from 'app/components/tooltip';
-import space from 'app/styles/space';
-
-function getFileType(dsym) {
-  switch (dsym.data && dsym.data.type) {
-    case 'exe':
-      return t('executable');
-    case 'dbg':
-      return t('debug companion');
-    case 'lib':
-      return t('dynamic library');
-    default:
-      return null;
-  }
-}
-
-function getFeatureTooltip(feature) {
-  switch (feature) {
-    case 'symtab':
-      return t(
-        'Symbol tables are used as a fallback when full debug information is not available'
-      );
-    case 'debug':
-      return t(
-        'Debug information provides function names and resolves inlined frames during symbolication'
-      );
-    case 'unwind':
-      return t(
-        'Stack unwinding information improves the quality of stack traces extracted from minidumps'
-      );
-    case 'sources':
-      return t(
-        'Source code information allows Sentry to display source code context for stack frames'
-      );
-    default:
-      return null;
-  }
-}
-
-const DebugSymbolDetails = styled('div')`
-  margin-top: 4px;
-`;
-
-class ProjectDebugSymbols extends AsyncComponent {
-  static contextTypes = {
-    organization: PropTypes.object.isRequired,
-  };
-
-  getEndpoints() {
-    const {orgId, projectId} = this.props.params;
-    const {organization} = this.context;
-    const features = new Set(organization.features);
-
-    const endpoints = [
-      ['project', `/projects/${orgId}/${projectId}/`],
-      [
-        'debugFiles',
-        `/projects/${orgId}/${projectId}/files/dsyms/`,
-        {query: {query: this.props.location.query.query}},
-      ],
-    ];
-
-    if (features.has('symbol-sources')) {
-      endpoints.push(['builtinSymbolSources', '/builtin-symbol-sources/']);
-    }
-
-    return endpoints;
-  }
-
-  onDelete(id) {
-    const {orgId, projectId} = this.props.params;
-    this.setState({
-      loading: true,
-    });
-    this.api.request(`/projects/${orgId}/${projectId}/files/dsyms/?id=${id}`, {
-      method: 'DELETE',
-      complete: () => this.fetchData(),
-    });
-  }
-
-  renderNoQueryResults() {
-    return (
-      <EmptyStateWarning>
-        <p>{t('Sorry, no releases match your filters.')}</p>
-      </EmptyStateWarning>
-    );
-  }
-
-  renderEmpty() {
-    return (
-      <EmptyStateWarning>
-        <p>{t('There are no debug symbols for this project.')}</p>
-      </EmptyStateWarning>
-    );
-  }
-
-  renderDsyms() {
-    const {orgId, projectId} = this.props.params;
-
-    const rows = this.state.debugFiles.map((dsym, key) => {
-      const url = `${this.api.baseUrl}/projects/${orgId}/${projectId}/files/dsyms/?id=${dsym.id}`;
-      const fileType = getFileType(dsym);
-      const symbolType = fileType ? `${dsym.symbolType} ${fileType}` : dsym.symbolType;
-      const features = dsym.data && dsym.data.features;
-
-      return (
-        <PanelItem key={key} alignItems="center" px={2} py={1}>
-          <Box width={4.5 / 12}>
-            <code className="small">{dsym.debugId || dsym.uuid}</code>
-            <Flex mt="4px">
-              <Box width={4 / 12} pl="2px">
-                <p className="m-b-0 text-light small">
-                  <FileSize bytes={dsym.size} />
-                </p>
-              </Box>
-              <Box width={8 / 12} pl={1}>
-                <p className="m-b-0 text-light small">
-                  <span className="icon icon-clock" />{' '}
-                  <TimeSince date={dsym.dateCreated} />
-                </p>
-              </Box>
-            </Flex>
-          </Box>
-          <Box flex="1">
-            {dsym.symbolType === 'proguard' && dsym.objectName === 'proguard-mapping'
-              ? '-'
-              : dsym.objectName}
-            <DebugSymbolDetails className="text-light small">
-              {dsym.symbolType === 'proguard' && dsym.cpuName === 'any'
-                ? 'proguard mapping'
-                : `${dsym.cpuName} (${symbolType})`}
-
-              {features &&
-                features.map(feature => (
-                  <Tooltip key={feature} title={getFeatureTooltip(feature)}>
-                    <Tag inline>{feature}</Tag>
-                  </Tooltip>
-                ))}
-            </DebugSymbolDetails>
-          </Box>
-          <Box>
-            <Access access={['project:releases']}>
-              {({hasAccess}) => (
-                <Button
-                  size="xsmall"
-                  icon="icon-download"
-                  href={url}
-                  disabled={!hasAccess}
-                  css={{
-                    marginRight: space(0.5),
-                  }}
-                >
-                  {t('Download')}
-                </Button>
-              )}
-            </Access>
-            <Access access={['project:write']}>
-              {({hasAccess}) => (
-                <Tooltip
-                  disabled={hasAccess}
-                  title={t('You do not have permission to delete debug files.')}
-                >
-                  <Confirm
-                    title={t('Delete')}
-                    message={t('Are you sure you wish to delete this file?')}
-                    onConfirm={() => this.onDelete(dsym.id)}
-                    disabled={!hasAccess}
-                  >
-                    <Button
-                      priority="danger"
-                      icon={<IconDelete size="xs" />}
-                      size="xsmall"
-                      disabled={!hasAccess}
-                    />
-                  </Confirm>
-                </Tooltip>
-              )}
-            </Access>
-          </Box>
-        </PanelItem>
-      );
-    });
-
-    return rows;
-  }
-
-  renderDebugSymbols() {
-    return this.state.debugFiles.length > 0 ? this.renderDsyms() : this.renderEmpty();
-  }
-
-  renderBody() {
-    const {orgId, projectId} = this.props.params;
-    const {organization} = this.context;
-    const {project} = this.state;
-    const features = new Set(organization.features);
-    const access = new Set(organization.access);
-
-    const fieldProps = {
-      organization,
-      builtinSymbolSources: this.state.builtinSymbolSources,
-    };
-
-    return (
-      <React.Fragment>
-        <SentryDocumentTitle objSlug={projectId} title={t('Debug Files')} />
-
-        <SettingsPageHeader title={t('Debug Information Files')} />
-
-        <TextBlock>
-          {t(`
-            Debug information files are used to convert addresses and minified
-            function names from native crash reports into function names and
-            locations.
-          `)}
-        </TextBlock>
-
-        {features.has('symbol-sources') && (
-          <React.Fragment>
-            <PermissionAlert />
-
-            <Form
-              saveOnBlur
-              allowUndo
-              initialData={project}
-              apiMethod="PUT"
-              apiEndpoint={`/projects/${orgId}/${projectId}/`}
-            >
-              <JsonForm
-                access={access}
-                features={features}
-                title={t('External Sources')}
-                disabled={!access.has('project:write')}
-                fields={[fields.symbolSources, fields.builtinSymbolSources]}
-                additionalFieldProps={fieldProps}
-              />
-            </Form>
-          </React.Fragment>
-        )}
-
-        <TextBlock>
-          {t('This list contains all uploaded debug information files:')}
-        </TextBlock>
-
-        <Panel>
-          <PanelHeader hasButtons>
-            <Box width={4.5 / 12}>{t('Debug ID')}</Box>
-            <Box minWidth="auto" flex="1">
-              {t('Name')}
-            </Box>
-            <Box>
-              {this.renderSearchInput({
-                updateRoute: true,
-                placeholder: t('Search DIFs'),
-                className: 'search',
-              })}
-            </Box>
-          </PanelHeader>
-          <PanelBody>{this.renderDebugSymbols()}</PanelBody>
-        </Panel>
-        <Pagination pageLinks={this.state.debugFilesPageLinks} />
-      </React.Fragment>
-    );
-  }
-}
-
-export default ProjectDebugSymbols;
diff --git a/src/sentry/static/sentry/app/views/settings/projectDebugFiles/debugFileRow.tsx b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/debugFileRow.tsx
new file mode 100644
index 0000000000..07417e9431
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/debugFileRow.tsx
@@ -0,0 +1,163 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import TimeSince from 'app/components/timeSince';
+import Tooltip from 'app/components/tooltip';
+import Tag from 'app/views/settings/components/tag';
+import FileSize from 'app/components/fileSize';
+import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
+import {IconDelete, IconClock, IconDownload} from 'app/icons';
+import Access from 'app/components/acl/access';
+import ButtonBar from 'app/components/buttonBar';
+
+import {getFileType, getFeatureTooltip} from './utils';
+import {DebugFile} from './types';
+
+type Props = {
+  debugFile: DebugFile;
+  downloadUrl: string;
+  onDelete: (id: string) => void;
+};
+
+const DebugFileRow = ({debugFile, downloadUrl, onDelete}: Props) => {
+  const {
+    id,
+    data,
+    debugId,
+    uuid,
+    size,
+    dateCreated,
+    objectName,
+    cpuName,
+    symbolType,
+  } = debugFile;
+  const fileType = getFileType(debugFile);
+  const {features} = data || {};
+
+  return (
+    <React.Fragment>
+      <Column>
+        <DebugId>{debugId || uuid}</DebugId>
+        <TimeAndSizeWrapper>
+          <StyledFileSize bytes={size} />
+          <TimeWrapper>
+            <IconClock size="xs" />
+            <TimeSince date={dateCreated} />
+          </TimeWrapper>
+        </TimeAndSizeWrapper>
+      </Column>
+      <Column>
+        <Name>
+          {symbolType === 'proguard' && objectName === 'proguard-mapping'
+            ? '\u2015'
+            : objectName}
+        </Name>
+        <Details>
+          {symbolType === 'proguard' && cpuName === 'any'
+            ? t('proguard mapping')
+            : `${cpuName} (${symbolType}${fileType && ` ${fileType}`})`}
+
+          {features &&
+            features.map(feature => (
+              <Tooltip key={feature} title={getFeatureTooltip(feature)}>
+                <Tag inline>{feature}</Tag>
+              </Tooltip>
+            ))}
+        </Details>
+      </Column>
+      <RightColumn>
+        <ButtonBar gap={0.5}>
+          <Access access={['project:releases']}>
+            {({hasAccess}) => (
+              <Button
+                size="xsmall"
+                icon={<IconDownload size="xs" />}
+                href={downloadUrl}
+                disabled={!hasAccess}
+              >
+                {t('Download')}
+              </Button>
+            )}
+          </Access>
+          <Access access={['project:write']}>
+            {({hasAccess}) => (
+              <Tooltip
+                disabled={hasAccess}
+                title={t('You do not have permission to delete debug files.')}
+              >
+                <Confirm
+                  confirmText={t('Delete')}
+                  message={t('Are you sure you wish to delete this file?')}
+                  onConfirm={() => onDelete(id)}
+                  disabled={!hasAccess}
+                >
+                  <Button
+                    priority="danger"
+                    icon={<IconDelete size="xs" />}
+                    size="xsmall"
+                    disabled={!hasAccess}
+                  />
+                </Confirm>
+              </Tooltip>
+            )}
+          </Access>
+        </ButtonBar>
+      </RightColumn>
+    </React.Fragment>
+  );
+};
+
+const Column = styled('div')`
+  display: flex;
+  flex-direction: column;
+  align-items: flex-start;
+  justify-content: center;
+`;
+
+const RightColumn = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+  align-items: center;
+`;
+
+const DebugId = styled('code')`
+  display: inline-block;
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin-bottom: ${space(1.5)};
+`;
+
+const TimeAndSizeWrapper = styled('div')`
+  width: 100%;
+  display: flex;
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray3};
+`;
+
+const StyledFileSize = styled(FileSize)`
+  flex: 1;
+  padding-left: ${space(0.5)};
+`;
+
+const TimeWrapper = styled('div')`
+  display: grid;
+  grid-gap: ${space(0.5)};
+  grid-template-columns: min-content 1fr;
+  flex: 2;
+  align-items: center;
+  padding-left: ${space(0.5)};
+`;
+
+const Name = styled('div')`
+  font-size: ${p => p.theme.fontSizeMedium};
+  margin-bottom: ${space(1.5)};
+`;
+
+const Details = styled('div')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray3};
+`;
+
+export default DebugFileRow;
diff --git a/src/sentry/static/sentry/app/views/settings/projectDebugFiles/index.tsx b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/index.tsx
new file mode 100644
index 0000000000..e8c8f3ab45
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/index.tsx
@@ -0,0 +1,168 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {PanelTable, PanelTableHeader} from 'app/components/panels';
+import {fields} from 'app/data/forms/projectDebugFiles';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import Form from 'app/views/settings/components/forms/form';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import PermissionAlert from 'app/views/settings/project/permissionAlert';
+import Pagination from 'app/components/pagination';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+import {Organization, Project} from 'app/types';
+import routeTitleGen from 'app/utils/routeTitle';
+
+import {DebugFile, BuiltinSymbolSource} from './types';
+import DebugFileRow from './debugFileRow';
+
+type Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {
+  organization: Organization;
+  project: Project;
+};
+
+type State = AsyncView['state'] & {
+  debugFiles: DebugFile[];
+  builtinSymbolSources?: BuiltinSymbolSource[];
+};
+
+class ProjectDebugSymbols extends AsyncView<Props, State> {
+  getTitle() {
+    const {projectId} = this.props.params;
+
+    return routeTitleGen(t('Debug Files'), projectId, false);
+  }
+
+  getEndpoints() {
+    const {organization, params, location} = this.props;
+    const {orgId, projectId} = params;
+
+    const endpoints: ReturnType<AsyncView['getEndpoints']> = [
+      [
+        'debugFiles',
+        `/projects/${orgId}/${projectId}/files/dsyms/`,
+        {query: {query: location.query.query}},
+      ],
+    ];
+
+    if (organization.features.includes('symbol-sources')) {
+      endpoints.push(['builtinSymbolSources', '/builtin-symbol-sources/']);
+    }
+
+    return endpoints;
+  }
+
+  onDelete(id: string) {
+    const {orgId, projectId} = this.props.params;
+
+    this.setState({
+      loading: true,
+    });
+
+    this.api.request(`/projects/${orgId}/${projectId}/files/dsyms/?id=${id}`, {
+      method: 'DELETE',
+      complete: () => this.fetchData(),
+    });
+  }
+
+  renderDebugFiles() {
+    const {debugFiles} = this.state;
+    const {orgId, projectId} = this.props.params;
+
+    return debugFiles.map(debugFile => {
+      const downloadUrl = `${this.api.baseUrl}/projects/${orgId}/${projectId}/files/dsyms/?id=${debugFile.id}`;
+
+      return (
+        <DebugFileRow
+          debugFile={debugFile}
+          downloadUrl={downloadUrl}
+          onDelete={this.onDelete}
+          key={debugFile.id}
+        />
+      );
+    });
+  }
+
+  renderBody() {
+    const {organization, project, params} = this.props;
+    const {builtinSymbolSources, debugFiles, debugFilesPageLinks} = this.state;
+    const {orgId, projectId} = params;
+    const {features, access} = organization;
+
+    const fieldProps = {
+      organization,
+      builtinSymbolSources,
+    };
+
+    return (
+      <React.Fragment>
+        <SettingsPageHeader title={t('Debug Information Files')} />
+
+        <TextBlock>
+          {t(`
+            Debug information files are used to convert addresses and minified
+            function names from native crash reports into function names and
+            locations.
+          `)}
+        </TextBlock>
+
+        {features.includes('symbol-sources') && (
+          <React.Fragment>
+            <PermissionAlert />
+
+            <Form
+              saveOnBlur
+              allowUndo
+              initialData={project}
+              apiMethod="PUT"
+              apiEndpoint={`/projects/${orgId}/${projectId}/`}
+            >
+              <JsonForm
+                features={new Set(features)}
+                title={t('External Sources')}
+                disabled={!access.includes('project:write')}
+                fields={[fields.symbolSources, fields.builtinSymbolSources]}
+                additionalFieldProps={fieldProps}
+              />
+            </Form>
+          </React.Fragment>
+        )}
+
+        <TextBlock>
+          {t('This list contains all uploaded debug information files:')}
+        </TextBlock>
+
+        <StyledPanelTable
+          headers={[
+            t('Debug ID'),
+            t('Name'),
+            this.renderSearchInput({
+              updateRoute: true,
+              placeholder: t('Search DIFs'),
+            }),
+          ]}
+          emptyMessage={t('There are no debug symbols for this project.')}
+          isEmpty={debugFiles.length === 0}
+        >
+          {this.renderDebugFiles()}
+        </StyledPanelTable>
+
+        <Pagination pageLinks={debugFilesPageLinks} />
+      </React.Fragment>
+    );
+  }
+}
+
+const StyledPanelTable = styled(PanelTable)`
+  grid-template-columns: 1fr 1.3fr auto;
+  ${PanelTableHeader} {
+    padding: ${space(1)} ${space(2)};
+    display: flex;
+    align-items: center;
+  }
+`;
+
+export default ProjectDebugSymbols;
diff --git a/src/sentry/static/sentry/app/views/settings/projectDebugFiles/types.tsx b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/types.tsx
new file mode 100644
index 0000000000..2ddebcae58
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/types.tsx
@@ -0,0 +1,34 @@
+export enum DebugFileType {
+  EXE = 'exe',
+  DBG = 'dbg',
+  LIB = 'lib',
+}
+
+export enum DebugFileFeature {
+  SYMTAB = 'symtab',
+  DEBUG = 'debug',
+  UNWIND = 'unwind',
+  SOURCES = 'sources',
+}
+
+export type BuiltinSymbolSource = {
+  hidden: boolean;
+  id: string;
+  name: string;
+  sentry_key: string;
+};
+
+export type DebugFile = {
+  codeId: string;
+  cpuName: string;
+  dateCreated: string;
+  debugId: string;
+  headers: Record<string, string>;
+  id: string;
+  objectName: string;
+  sha1: string;
+  size: number;
+  symbolType: string;
+  uuid: string;
+  data?: {type: DebugFileType; features: DebugFileFeature[]};
+};
diff --git a/src/sentry/static/sentry/app/views/settings/projectDebugFiles/utils.tsx b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/utils.tsx
new file mode 100644
index 0000000000..09f0e2427c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/utils.tsx
@@ -0,0 +1,39 @@
+import {t} from 'app/locale';
+
+import {DebugFile, DebugFileFeature, DebugFileType} from './types';
+
+export function getFileType(dsym: DebugFile) {
+  switch (dsym.data?.type) {
+    case DebugFileType.EXE:
+      return t('executable');
+    case DebugFileType.DBG:
+      return t('debug companion');
+    case DebugFileType.LIB:
+      return t('dynamic library');
+    default:
+      return null;
+  }
+}
+
+export function getFeatureTooltip(feature: DebugFileFeature) {
+  switch (feature) {
+    case DebugFileFeature.SYMTAB:
+      return t(
+        'Symbol tables are used as a fallback when full debug information is not available'
+      );
+    case DebugFileFeature.DEBUG:
+      return t(
+        'Debug information provides function names and resolves inlined frames during symbolication'
+      );
+    case DebugFileFeature.UNWIND:
+      return t(
+        'Stack unwinding information improves the quality of stack traces extracted from minidumps'
+      );
+    case DebugFileFeature.SOURCES:
+      return t(
+        'Source code information allows Sentry to display source code context for stack frames'
+      );
+    default:
+      return null;
+  }
+}
diff --git a/tests/js/sentry-test/fixtures/debugFile.js b/tests/js/sentry-test/fixtures/debugFile.js
new file mode 100644
index 0000000000..78a27249da
--- /dev/null
+++ b/tests/js/sentry-test/fixtures/debugFile.js
@@ -0,0 +1,22 @@
+export function DebugFile(params) {
+  return {
+    objectName: 'libS.so',
+    symbolType: 'elf',
+    dateCreated: '2010-04-23T02:08:51.179486Z',
+    debugId: '2oihoi4h5ioh34534oi5h',
+    data: {
+      type: 'lib',
+      features: ['unwind'],
+    },
+    id: '12345',
+    size: 12345,
+    sha1: '3245klnlk342n5kln3kl45n',
+    uuid: '3425bkjb234k5jb234jk5',
+    cpuName: 'arm64',
+    headers: {
+      'Content-Type': 'application/x-elf-binary',
+    },
+    codeId: '12312k3jh123',
+    ...params,
+  };
+}
diff --git a/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
deleted file mode 100644
index acda02cf16..0000000000
--- a/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
+++ /dev/null
@@ -1,336 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`ProjectDebugFiles renders 1`] = `
-<ProjectDebugSymbols
-  location={
-    Object {
-      "query": Object {},
-    }
-  }
-  params={
-    Object {
-      "orgId": "org",
-      "projectId": "project",
-    }
-  }
->
-  <SentryDocumentTitle
-    objSlug="project"
-    title="Debug Files"
-  >
-    <SideEffect(DocumentTitle)
-      title="Debug Files - project - Sentry"
-    >
-      <DocumentTitle
-        title="Debug Files - project - Sentry"
-      />
-    </SideEffect(DocumentTitle)>
-  </SentryDocumentTitle>
-  <StyledSettingsPageHeading
-    noTitleStyles={false}
-    title="Debug Information Files"
-  >
-    <SettingsPageHeading
-      className="css-xtfhnp-StyledSettingsPageHeading e1uay4fd4"
-      noTitleStyles={false}
-      title="Debug Information Files"
-    >
-      <div
-        className="css-xtfhnp-StyledSettingsPageHeading e1uay4fd4"
-      >
-        <TitleAndActions>
-          <div
-            className="css-ifzfc5-TitleAndActions e1uay4fd0"
-          >
-            <Title
-              styled={false}
-            >
-              <div
-                className="css-120v9s3-Title e1uay4fd1"
-              >
-                <HeaderTitle>
-                  <h4
-                    className="css-186zxqn-HeaderTitle eqkydle2"
-                  >
-                    Debug Information Files
-                  </h4>
-                </HeaderTitle>
-              </div>
-            </Title>
-          </div>
-        </TitleAndActions>
-      </div>
-    </SettingsPageHeading>
-  </StyledSettingsPageHeading>
-  <TextBlock>
-    <div
-      className="css-1j3tvli-TextBlock e1x1lar10"
-    >
-      
-            Debug information files are used to convert addresses and minified
-            function names from native crash reports into function names and
-            locations.
-          
-    </div>
-  </TextBlock>
-  <TextBlock>
-    <div
-      className="css-1j3tvli-TextBlock e1x1lar10"
-    >
-      This list contains all uploaded debug information files:
-    </div>
-  </TextBlock>
-  <Panel>
-    <Component
-      className="css-1xbmlp0-Panel e119nu470"
-    >
-      <div
-        className="css-1xbmlp0-Panel e119nu470"
-      >
-        <PanelHeader
-          hasButtons={true}
-        >
-          <div
-            className="css-8yda21-PanelHeader en8g1d30"
-          >
-            <Styled(div)
-              width={0.375}
-            >
-              <div
-                className="css-1xtl59v"
-              >
-                Debug ID
-              </div>
-            </Styled(div)>
-            <Styled(div)
-              flex="1"
-              minWidth="auto"
-            >
-              <div
-                className="css-gzhknm"
-              >
-                Name
-              </div>
-            </Styled(div)>
-            <Styled(div)>
-              <div
-                className="css-vurnku"
-              >
-                <withRouter(AsyncComponentSearchInput)
-                  api={
-                    Client {
-                      "_chain": [Function],
-                      "_wrapRequest": [Function],
-                      "bulkUpdate": [Function],
-                      "handleRequestError": [Function],
-                      "hasProjectBeenRenamed": [Function],
-                    }
-                  }
-                  className="search"
-                  onError={[Function]}
-                  onSuccess={[Function]}
-                  placeholder="Search DIFs"
-                  updateRoute={true}
-                  url="/projects/org/project/"
-                >
-                  <AsyncComponentSearchInput
-                    api={
-                      Client {
-                        "_chain": [Function],
-                        "_wrapRequest": [Function],
-                        "bulkUpdate": [Function],
-                        "handleRequestError": [Function],
-                        "hasProjectBeenRenamed": [Function],
-                      }
-                    }
-                    className="search"
-                    debounceWait={200}
-                    location={
-                      Object {
-                        "query": Object {},
-                      }
-                    }
-                    onError={[Function]}
-                    onSuccess={[Function]}
-                    placeholder="Search DIFs"
-                    router={
-                      Object {
-                        "createHref": [MockFunction],
-                        "go": [MockFunction],
-                        "goBack": [MockFunction],
-                        "goForward": [MockFunction],
-                        "isActive": [MockFunction],
-                        "listen": [MockFunction],
-                        "location": Object {
-                          "query": Object {},
-                        },
-                        "push": [MockFunction],
-                        "replace": [MockFunction],
-                        "setRouteLeaveHook": [MockFunction],
-                      }
-                    }
-                    updateRoute={true}
-                    url="/projects/org/project/"
-                  >
-                    <Form
-                      onSubmit={[Function]}
-                    >
-                      <form
-                        className="css-1i180od-Form e6xwo1"
-                        onSubmit={[Function]}
-                      >
-                        <Input
-                          className="search"
-                          onChange={[Function]}
-                          placeholder="Search DIFs"
-                          value=""
-                        >
-                          <input
-                            className="search css-17dbz9s-Input e1xej46s0"
-                            onChange={[Function]}
-                            placeholder="Search DIFs"
-                            value=""
-                          />
-                        </Input>
-                      </form>
-                    </Form>
-                  </AsyncComponentSearchInput>
-                </withRouter(AsyncComponentSearchInput)>
-              </div>
-            </Styled(div)>
-          </div>
-        </PanelHeader>
-        <PanelBody
-          flexible={false}
-          withPadding={false}
-        >
-          <FlexBox
-            withPadding={false}
-          >
-            <div
-              className="css-1ehogmz-FlexBox e1vnwt6f0"
-            >
-              <EmptyStateWarning>
-                <EmptyStreamWrapper
-                  data-test-id="empty-state"
-                >
-                  <div
-                    className="css-15oag6i-EmptyStreamWrapper e1107k000"
-                    data-test-id="empty-state"
-                  >
-                    <HeroIcon
-                      size="54"
-                      src="icon-circle-exclamation"
-                    >
-                      <ForwardRef
-                        className="css-5ipi7e-InlineSvg-HeroIcon e1csd7tf0"
-                        size="54"
-                        src="icon-circle-exclamation"
-                      >
-                        <svg
-                          className="css-5ipi7e-InlineSvg-HeroIcon e1csd7tf0"
-                          height="54"
-                          viewBox={Object {}}
-                          width="54"
-                        >
-                          <use
-                            href="#test"
-                            xlinkHref="#test"
-                          />
-                        </svg>
-                      </ForwardRef>
-                    </HeroIcon>
-                    <p>
-                      There are no debug symbols for this project.
-                    </p>
-                  </div>
-                </EmptyStreamWrapper>
-              </EmptyStateWarning>
-            </div>
-          </FlexBox>
-        </PanelBody>
-      </div>
-    </Component>
-  </Panel>
-  <Styled(Pagination)
-    onCursor={[Function]}
-  >
-    <Pagination
-      className="css-yneqnx e1vkspke0"
-      onCursor={[Function]}
-    />
-  </Styled(Pagination)>
-</ProjectDebugSymbols>
-`;
-
-exports[`ProjectDebugFiles renders empty 1`] = `
-<Fragment>
-  <SentryDocumentTitle
-    objSlug="project"
-    title="Debug Files"
-  />
-  <StyledSettingsPageHeading
-    noTitleStyles={false}
-    title="Debug Information Files"
-  />
-  <TextBlock>
-    
-            Debug information files are used to convert addresses and minified
-            function names from native crash reports into function names and
-            locations.
-          
-  </TextBlock>
-  <TextBlock>
-    This list contains all uploaded debug information files:
-  </TextBlock>
-  <Panel>
-    <PanelHeader
-      hasButtons={true}
-    >
-      <Styled(div)
-        width={0.375}
-      >
-        Debug ID
-      </Styled(div)>
-      <Styled(div)
-        flex="1"
-        minWidth="auto"
-      >
-        Name
-      </Styled(div)>
-      <Styled(div)>
-        <withRouter(AsyncComponentSearchInput)
-          api={
-            Client {
-              "_chain": [Function],
-              "_wrapRequest": [Function],
-              "bulkUpdate": [Function],
-              "handleRequestError": [Function],
-              "hasProjectBeenRenamed": [Function],
-            }
-          }
-          className="search"
-          onError={[Function]}
-          onSuccess={[Function]}
-          placeholder="Search DIFs"
-          updateRoute={true}
-          url="/projects/org/project/"
-        />
-      </Styled(div)>
-    </PanelHeader>
-    <PanelBody
-      flexible={false}
-      withPadding={false}
-    >
-      <EmptyStateWarning>
-        <p>
-          There are no debug symbols for this project.
-        </p>
-      </EmptyStateWarning>
-    </PanelBody>
-  </Panel>
-  <Styled(Pagination)
-    onCursor={[Function]}
-  />
-</Fragment>
-`;
diff --git a/tests/js/spec/views/projectDebugFiles.spec.jsx b/tests/js/spec/views/projectDebugFiles.spec.jsx
deleted file mode 100644
index 0ee2d9f0d0..0000000000
--- a/tests/js/spec/views/projectDebugFiles.spec.jsx
+++ /dev/null
@@ -1,54 +0,0 @@
-import React from 'react';
-
-import {shallow, mount} from 'sentry-test/enzyme';
-import {Client} from 'app/api';
-import ProjectDebugFiles from 'app/views/settings/projectDebugFiles';
-
-const ENDPOINT = '/projects/org/project/files/dsyms/';
-
-describe('ProjectDebugFiles', function() {
-  beforeEach(function() {
-    Client.clearMockResponses();
-    Client.addMockResponse({
-      url: '/projects/org/project/',
-      body: {},
-    });
-  });
-
-  it('renders empty', function() {
-    Client.addMockResponse({
-      url: ENDPOINT,
-      body: [],
-    });
-    const wrapper = shallow(
-      <ProjectDebugFiles
-        params={{orgId: 'org', projectId: 'project'}}
-        location={{query: {}}}
-      />,
-      TestStubs.routerContext()
-    );
-
-    expect(wrapper).toMatchSnapshot();
-  });
-
-  it('renders', function() {
-    Client.addMockResponse({
-      url: ENDPOINT,
-      body: TestStubs.DebugSymbols(),
-    });
-    Client.addMockResponse({
-      url: ENDPOINT,
-      method: 'PUT',
-    });
-
-    const wrapper = mount(
-      <ProjectDebugFiles
-        params={{orgId: 'org', projectId: 'project'}}
-        location={{query: {}}}
-      />,
-      TestStubs.routerContext()
-    );
-
-    expect(wrapper).toMatchSnapshot();
-  });
-});
diff --git a/tests/js/spec/views/settings/projectDebugFiles.spec.jsx b/tests/js/spec/views/settings/projectDebugFiles.spec.jsx
new file mode 100644
index 0000000000..e1c39a0237
--- /dev/null
+++ b/tests/js/spec/views/settings/projectDebugFiles.spec.jsx
@@ -0,0 +1,53 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+import {initializeOrg} from 'sentry-test/initializeOrg';
+import ProjectDebugFiles from 'app/views/settings/projectDebugFiles';
+
+describe('ProjectDebugFiles', function() {
+  const {organization, project, routerContext} = initializeOrg({});
+
+  const props = {
+    organization,
+    params: {orgId: organization.slug, projectId: project.slug},
+    location: {
+      query: {
+        query: '',
+      },
+    },
+  };
+
+  const endpoint = `/projects/${organization.slug}/${project.slug}/files/dsyms/`;
+
+  it('renders', async function() {
+    MockApiClient.addMockResponse({
+      url: endpoint,
+      body: [TestStubs.DebugFile()],
+    });
+
+    const wrapper = mountWithTheme(<ProjectDebugFiles {...props} />, routerContext);
+
+    const items = wrapper.find('DebugFileRow');
+
+    expect(items).toHaveLength(1);
+    expect(
+      items
+        .at(0)
+        .find('Name')
+        .text()
+    ).toBe('libS.so');
+  });
+
+  it('renders empty', async function() {
+    MockApiClient.addMockResponse({
+      url: endpoint,
+      body: [],
+    });
+
+    const wrapper = mountWithTheme(<ProjectDebugFiles {...props} />, routerContext);
+
+    expect(wrapper.find('EmptyStateWarning').text()).toBe(
+      'There are no debug symbols for this project.'
+    );
+  });
+});
