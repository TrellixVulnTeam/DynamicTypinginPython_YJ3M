commit 6f3c5d56c86cdbe8f4b9d54f8747b06294eabe97
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 5 23:53:27 2015 -0700

    Fix behavior with reverse paginator

diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index 35646c890e..524fb9d273 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -104,7 +104,7 @@ class BasePaginator(object):
         results = list(queryset[cursor.offset:stop])
 
         if cursor.is_prev:
-            results = results[1:][::-1]
+            results = results[::-1]
 
         return build_cursor(
             results=results,
@@ -130,10 +130,10 @@ class DateTimePaginator(BasePaginator):
 
     def get_item_key(self, item):
         value = getattr(item, self.key)
-        value = float(value.strftime('%s.%f'))
+        value = float(value.strftime('%s.%f')) * self.multiplier
         if self.desc:
-            return math.ceil(value * self.multiplier)
-        return math.floor(value * self.multiplier)
+            return math.ceil(value)
+        return math.floor(value)
 
     def value_from_cursor(self, cursor):
         return datetime.fromtimestamp(
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 82b668b427..d86b114234 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -50,6 +50,10 @@ class GroupListTest(APITestCase):
             checksum='b' * 32,
             last_seen=now,
         )
+        group3 = self.create_group(
+            checksum='c' * 32,
+            last_seen=now - timedelta(seconds=1),
+        )
 
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-project-group-index', kwargs={
@@ -75,41 +79,39 @@ class GroupListTest(APITestCase):
         links = self._parse_links(response['Link'])
 
         assert links['previous']['results'] == 'true'
-        assert links['next']['results'] == 'false'
+        assert links['next']['results'] == 'true'
 
-        # TODO(dcramer): previous links are known to not be functioning
-        # correctly
-        # print(links['previous']['cursor'])
-        # response = self.client.get(links['previous']['href'], format='json')
-        # assert response.status_code == 200
-        # assert len(response.data) == 1
-        # assert response.data[0]['id'] == str(group2.id)
+        print(links['previous']['cursor'])
+        response = self.client.get(links['previous']['href'], format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(group2.id)
 
-        # links = self._parse_links(response['Link'])
+        links = self._parse_links(response['Link'])
 
-        # assert links['previous']['results'] == 'false'
-        # assert links['next']['results'] == 'true'
+        assert links['previous']['results'] == 'false'
+        assert links['next']['results'] == 'true'
 
-        # print(links['previous']['cursor'])
-        # response = self.client.get(links['previous']['href'], format='json')
-        # assert response.status_code == 200
-        # assert len(response.data) == 0
+        print(links['previous']['cursor'])
+        response = self.client.get(links['previous']['href'], format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 0
 
-        # group3 = self.create_group(
-        #     checksum='c' * 32,
-        #     last_seen=now + timedelta(seconds=1),
-        # )
+        group3 = self.create_group(
+            checksum='c' * 32,
+            last_seen=now + timedelta(seconds=1),
+        )
 
-        # links = self._parse_links(response['Link'])
+        links = self._parse_links(response['Link'])
 
-        # assert links['previous']['results'] == 'false'
-        # assert links['next']['results'] == 'true'
+        assert links['previous']['results'] == 'false'
+        assert links['next']['results'] == 'true'
 
-        # print(links['previous']['cursor'])
-        # response = self.client.get(links['previous']['href'], format='json')
-        # assert response.status_code == 200
-        # assert len(response.data) == 1
-        # assert response.data[0]['id'] == str(group3.id)
+        print(links['previous']['cursor'])
+        response = self.client.get(links['previous']['href'], format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(group3.id)
 
     def test_stats_period(self):
         # TODO(dcramer): this test really only checks if validation happens
