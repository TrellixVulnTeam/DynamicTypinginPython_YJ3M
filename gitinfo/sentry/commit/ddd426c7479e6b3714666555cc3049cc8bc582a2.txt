commit ddd426c7479e6b3714666555cc3049cc8bc582a2
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed Feb 26 18:05:14 2020 -0800

    perf(incidents): Cache fetching active incident in subscription processor.
    
    This gets called whenever we have a value that hits a trigger. We could potentially have incidents
    that fire and stay above a trigger for a long time, so it's a good idea to cache here.

diff --git a/bin/load-mocks b/bin/load-mocks
index 276dcea7f4..5b9267a4c3 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -668,7 +668,7 @@ def main(num_events=1, extra_events=False):
                 create_alert_rule_trigger(alert_rule, "critical", AlertRuleThresholdType.ABOVE, 10)
                 create_incident(
                     org,
-                    type=IncidentType.DETECTED,
+                    type_=IncidentType.DETECTED,
                     title="My Incident",
                     query="",
                     date_started=datetime.utcnow().replace(tzinfo=utc),
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 4e2fa6da3a..7a16548e03 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -6,6 +6,7 @@ from uuid import uuid4
 
 import six
 from django.db import transaction
+from django.db.models.signals import post_save
 from django.utils import timezone
 
 from sentry import analytics
@@ -54,7 +55,7 @@ class InvalidTriggerActionError(Exception):
 
 def create_incident(
     organization,
-    type,
+    type_,
     title,
     query,
     aggregation,
@@ -81,7 +82,7 @@ def create_incident(
             organization=organization,
             detection_uuid=detection_uuid,
             status=IncidentStatus.OPEN.value,
-            type=type.value,
+            type=type_.value,
             title=title,
             query=query,
             aggregation=aggregation.value,
@@ -90,9 +91,16 @@ def create_incident(
             alert_rule=alert_rule,
         )
         if projects:
-            IncidentProject.objects.bulk_create(
-                [IncidentProject(incident=incident, project=project) for project in projects]
-            )
+            incident_projects = [
+                IncidentProject(incident=incident, project=project) for project in projects
+            ]
+            IncidentProject.objects.bulk_create(incident_projects)
+            # `bulk_create` doesn't send `post_save` signals, so we manually fire them here.
+            for incident_project in incident_projects:
+                post_save.send(
+                    sender=type(incident_project), instance=incident_project, created=True
+                )
+
         if groups:
             IncidentGroup.objects.bulk_create(
                 [IncidentGroup(incident=incident, group=group) for group in groups]
@@ -103,7 +111,7 @@ def create_incident(
             "incident.created",
             incident_id=incident.id,
             organization_id=incident.organization_id,
-            incident_type=type.value,
+            incident_type=type_.value,
         )
 
     return incident
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index 8779e54e55..cdc11a158c 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -56,9 +56,55 @@ class IncidentSeen(Model):
 
 
 class IncidentManager(BaseManager):
+    CACHE_KEY = "incidents:active:%s:%s"
+
     def fetch_for_organization(self, organization, projects):
         return self.filter(organization=organization, projects__in=projects).distinct()
 
+    @classmethod
+    def _build_active_incident_cache_key(self, alert_rule_id, project_id):
+        return self.CACHE_KEY % (alert_rule_id, project_id)
+
+    def get_active_incident(self, alert_rule, project):
+        cache_key = self._build_active_incident_cache_key(alert_rule.id, project.id)
+        incident = cache.get(cache_key)
+        if incident is None:
+            try:
+                incident = (
+                    Incident.objects.filter(
+                        type=IncidentType.ALERT_TRIGGERED.value,
+                        alert_rule=alert_rule,
+                        projects=project,
+                    )
+                    .exclude(status=IncidentStatus.CLOSED.value)
+                    .order_by("-date_added")[0]
+                )
+            except IndexError:
+                # Set this to False so that we can have a negative cache as well.
+                incident = False
+            cache.set(cache_key, incident)
+            if incident is False:
+                incident = None
+        elif not incident:
+            # If we had a falsey not None value in the cache, then we stored that there
+            # are no current active incidents. Just set to None
+            incident = None
+
+        return incident
+
+    @classmethod
+    def clear_active_incident_cache(cls, instance, **kwargs):
+        for project in instance.projects.all():
+            cache.delete(cls._build_active_incident_cache_key(instance.alert_rule_id, project.id))
+
+    @classmethod
+    def clear_active_incident_project_cache(cls, instance, **kwargs):
+        cache.delete(
+            cls._build_active_incident_cache_key(
+                instance.incident.alert_rule_id, instance.project_id
+            )
+        )
+
     @TimedRetryPolicy.wrap(timeout=5, exceptions=(IntegrityError,))
     def create(self, organization, **kwargs):
         """
@@ -558,3 +604,7 @@ post_delete.connect(AlertRuleTriggerManager.clear_alert_rule_trigger_cache, send
 post_save.connect(AlertRuleTriggerManager.clear_alert_rule_trigger_cache, sender=AlertRule)
 post_save.connect(AlertRuleTriggerManager.clear_trigger_cache, sender=AlertRuleTrigger)
 post_delete.connect(AlertRuleTriggerManager.clear_trigger_cache, sender=AlertRuleTrigger)
+
+post_save.connect(IncidentManager.clear_active_incident_cache, sender=Incident)
+post_save.connect(IncidentManager.clear_active_incident_project_cache, sender=IncidentProject)
+post_delete.connect(IncidentManager.clear_active_incident_project_cache, sender=IncidentProject)
diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index 7b2bd8af27..e9611f9744 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -71,19 +71,9 @@ class SubscriptionProcessor(object):
     @property
     def active_incident(self):
         if not hasattr(self, "_active_incident"):
-            try:
-                # Fetch the active incident if one exists for this alert rule.
-                self._active_incident = (
-                    Incident.objects.filter(
-                        type=IncidentType.ALERT_TRIGGERED.value,
-                        alert_rule=self.alert_rule,
-                        projects=self.subscription.project,
-                    )
-                    .exclude(status=IncidentStatus.CLOSED.value)
-                    .order_by("-date_added")[0]
-                )
-            except IndexError:
-                self._active_incident = None
+            self._active_incident = Incident.objects.get_active_incident(
+                self.alert_rule, self.subscription.project
+            )
         return self._active_incident
 
     @active_incident.setter
diff --git a/tests/acceptance/test_incidents.py b/tests/acceptance/test_incidents.py
index d07940bd59..4c0137b27a 100644
--- a/tests/acceptance/test_incidents.py
+++ b/tests/acceptance/test_incidents.py
@@ -39,7 +39,7 @@ class OrganizationIncidentsListTest(AcceptanceTestCase, SnubaTestCase):
 
         incident = create_incident(
             self.organization,
-            type=IncidentType.DETECTED,
+            type_=IncidentType.DETECTED,
             title="Incident #1",
             query="hello",
             aggregation=QueryAggregations.TOTAL,
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 53c85f75fd..73373cc240 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -98,7 +98,7 @@ class CreateIncidentTest(TestCase):
         self.record_event.reset_mock()
         incident = create_incident(
             self.organization,
-            type=incident_type,
+            type_=incident_type,
             title=title,
             query=query,
             aggregation=aggregation,
diff --git a/tests/sentry/incidents/test_models.py b/tests/sentry/incidents/test_models.py
index a3082c046b..d1175818a3 100644
--- a/tests/sentry/incidents/test_models.py
+++ b/tests/sentry/incidents/test_models.py
@@ -156,6 +156,78 @@ class AlertRuleTriggerClearCacheTest(TestCase):
         ) is None
 
 
+class ActiveIncidentClearCacheTest(TestCase):
+    def setUp(self):
+        self.alert_rule = self.create_alert_rule()
+        self.trigger = self.create_alert_rule_trigger(self.alert_rule)
+
+    def test_negative_cache(self):
+        assert (
+            cache.get(
+                Incident.objects._build_active_incident_cache_key(
+                    self.alert_rule.id, self.project.id
+                )
+            )
+            is None
+        )
+        Incident.objects.get_active_incident(self.alert_rule, self.project)
+        assert (
+            cache.get(
+                Incident.objects._build_active_incident_cache_key(
+                    self.alert_rule.id, self.project.id
+                )
+            )
+            is False
+        )
+        self.create_incident(status=IncidentStatus.CLOSED.value)
+        self.alert_rule.save()
+        assert (
+            cache.get(
+                Incident.objects._build_active_incident_cache_key(
+                    self.alert_rule.id, self.project.id
+                )
+            )
+        ) is False
+
+    def test_cache(self):
+        assert (
+            cache.get(
+                Incident.objects._build_active_incident_cache_key(
+                    self.alert_rule.id, self.project.id
+                )
+            )
+            is None
+        )
+        active_incident = self.create_incident(alert_rule=self.alert_rule, projects=[self.project])
+        Incident.objects.get_active_incident(self.alert_rule, self.project)
+        assert (
+            cache.get(
+                Incident.objects._build_active_incident_cache_key(
+                    self.alert_rule.id, self.project.id
+                )
+            )
+            == active_incident
+        )
+        active_incident = self.create_incident(alert_rule=self.alert_rule, projects=[self.project])
+        assert (
+            cache.get(
+                Incident.objects._build_active_incident_cache_key(
+                    self.alert_rule.id, self.project.id
+                )
+            )
+            is None
+        )
+        Incident.objects.get_active_incident(self.alert_rule, self.project)
+        assert (
+            cache.get(
+                Incident.objects._build_active_incident_cache_key(
+                    self.alert_rule.id, self.project.id
+                )
+            )
+            == active_incident
+        )
+
+
 class IncidentCreationTest(TestCase):
     def test_simple(self):
         title = "hello"
