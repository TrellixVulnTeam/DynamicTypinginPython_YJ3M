commit 4af29e8f2350e20c28a6933354e4f42437b4ba42
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Feb 6 11:22:38 2018 -0800

    feat(sourcemaps): Cache Sourcemaps based on Cache-Control header with set Min and Max (#7169)
    
    * decode error
    
    * Corrected the header to use result.header. Removed get_header function since they're guarenteed to be lower case in the header. Used CACHE_CONTROL_RE.search instead of re.search
    
    * Changed variable in cache-control to be the header rather than the header key.

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 6415ddf33c..27e881d202 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -56,6 +56,9 @@ CLEAN_MODULE_RE = re.compile(
 VERSION_RE = re.compile(r'^[a-f0-9]{32}|[a-f0-9]{40}$', re.I)
 NODE_MODULES_RE = re.compile(r'\bnode_modules/')
 SOURCE_MAPPING_URL_RE = re.compile(r'\/\/# sourceMappingURL=(.*)$')
+CACHE_CONTROL_RE = re.compile(r'max-age=(\d+)')
+CACHE_CONTROL_MAX = 7200
+CACHE_CONTROL_MIN = 60
 # the maximum number of remote resources (i.e. source files) that should be
 # fetched
 MAX_RESOURCE_FETCHES = 100
@@ -331,7 +334,14 @@ def fetch_file(url, project=None, release=None, dist=None, allow_scraping=True):
         with metrics.timer('sourcemaps.fetch'):
             result = http.fetch_file(url, headers=headers, verify_ssl=verify_ssl)
             z_body = zlib.compress(result.body)
-            cache.set(cache_key, (url, result.headers, z_body, result.status, result.encoding), 60)
+            cache.set(
+                cache_key,
+                (url,
+                 result.headers,
+                 z_body,
+                 result.status,
+                 result.encoding),
+                get_max_age(result.headers))
 
     # If we did not get a 200 OK we just raise a cannot fetch here.
     if result.status != 200:
@@ -381,6 +391,17 @@ def fetch_file(url, project=None, release=None, dist=None, allow_scraping=True):
     return result
 
 
+def get_max_age(headers):
+    cache_control = headers.get('cache-control')
+    max_age = CACHE_CONTROL_MIN
+
+    if cache_control:
+        match = CACHE_CONTROL_RE.search(cache_control)
+        if match:
+            max_age = max(CACHE_CONTROL_MIN, int(match.group(1)))
+    return min(max_age, CACHE_CONTROL_MAX)
+
+
 def fetch_sourcemap(url, project=None, release=None, dist=None, allow_scraping=True):
     if is_data_uri(url):
         try:
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 0f0aaff05c..0164f22aba 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -1,5 +1,3 @@
-# -*- coding: utf-8 -*-
-
 from __future__ import absolute_import
 
 import pytest
@@ -20,6 +18,9 @@ from sentry.lang.javascript.processor import (
     trim_line,
     fetch_release_file,
     UnparseableSourcemap,
+    get_max_age,
+    CACHE_CONTROL_MAX,
+    CACHE_CONTROL_MIN,
 )
 from sentry.lang.javascript.errormapping import (rewrite_exception, REACT_MAPPING_URL)
 from sentry.models import File, Release, ReleaseFile, EventError
@@ -28,10 +29,10 @@ from sentry.utils.strings import truncatechars
 
 base64_sourcemap = 'data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhcImhlbGxvLCBXb3JsZCFcIikiXX0='
 
-unicode_body = u"""function add(a, b) {
+unicode_body = b"""function add(a, b) {
     "use strict";
-    return a + b; // fôo
-}"""
+    return a + b; // f\xc3\xb4o
+}""".decode('utf-8')
 
 
 class FetchReleaseFileTest(TestCase):
@@ -267,7 +268,7 @@ class FetchFileTest(TestCase):
         responses.add(
             responses.GET,
             'http://example.com',
-            body=u'"fôo bar"'.encode('utf-8'),
+            body=b'"f\xc3\xb4o bar"'.decode('utf-8'),
             content_type='application/json; charset=utf-8'
         )
 
@@ -297,6 +298,48 @@ class FetchFileTest(TestCase):
         assert exc.value.data['url'] == url
 
 
+class CacheControlTest(TestCase):
+    def test_simple(self):
+        headers = {'content-type': 'application/json', 'cache-control': 'max-age=120'}
+        assert get_max_age(headers) == 120
+
+    def test_max_and_min(self):
+        headers = {'content-type': 'application/json',
+                   'cache-control': 'max-age=%s' % CACHE_CONTROL_MAX}
+        assert get_max_age(headers) == CACHE_CONTROL_MAX
+
+        headers = {'content-type': 'application/json',
+                   'cache-control': 'max-age=%s' % CACHE_CONTROL_MIN}
+        assert get_max_age(headers) == CACHE_CONTROL_MIN
+
+    def test_out_of_bounds(self):
+        greater_than_max = CACHE_CONTROL_MAX + 1
+        headers = {'content-type': 'application/json',
+                   'cache-control': 'max-age=%s' % greater_than_max}
+        assert get_max_age(headers) == CACHE_CONTROL_MAX
+
+        less_than_min = CACHE_CONTROL_MIN - 1
+        headers = {'content-type': 'application/json',
+                   'cache-control': 'max-age=%s' % less_than_min}
+        assert get_max_age(headers) == CACHE_CONTROL_MIN
+
+    def test_no_cache_control(self):
+        headers = {'content-type': 'application/json'}
+        assert get_max_age(headers) == CACHE_CONTROL_MIN
+
+    def test_additional_cache_control_values(self):
+        headers = {'content-type': 'application/json',
+                   'cache-control': 'private, s-maxage=60, max-age=120'}
+        assert get_max_age(headers) == 120
+
+    def test_valid_input(self):
+        headers = {'content-type': 'application/json', 'cache-control': 'max-age=12df0sdgfjhdgf'}
+        assert get_max_age(headers) == CACHE_CONTROL_MIN
+
+        headers = {'content-type': 'application/json', 'cache-control': 'max-age=df0sdgfjhdgf'}
+        assert get_max_age(headers) == CACHE_CONTROL_MIN
+
+
 class DiscoverSourcemapTest(TestCase):
     # discover_sourcemap(result)
     def test_simple(self):
@@ -673,7 +716,7 @@ class ErrorMappingTest(TestCase):
                         'InvariantViolation',
                         'value': (
                             u'Minified React error #108; visit http://facebook'
-                            u'.github.io/react/docs/error-decoder.html?…'
+                            u'.github.io/react/docs/error-decoder.html?\u2026'
                         ),
                         'stacktrace': {
                             'frames': [
