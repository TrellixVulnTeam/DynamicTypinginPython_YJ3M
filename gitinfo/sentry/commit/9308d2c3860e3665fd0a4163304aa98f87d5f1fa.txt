commit 9308d2c3860e3665fd0a4163304aa98f87d5f1fa
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jul 5 10:23:01 2018 -0700

    feat(integrations): Vsts status sync outbound (#8923)
    
    * added vsts status sync outbound
    
    * Added self to example integration method.:
    
    * Added test and modified existing tests to pass.
    
    * Added error to logger.

diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index ae1388edf7..fe1b82329b 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -65,7 +65,7 @@ class ExampleIntegration(Integration, IssueSyncMixin):
     def sync_assignee_outbound(self, external_issue, user, assign=True, **kwargs):
         pass
 
-    def sync_status_outbound(external_issue, is_resolved):
+    def sync_status_outbound(self, external_issue, is_resolved, project_id):
         pass
 
 
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 756d73b6cc..198b5565f5 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -119,7 +119,7 @@ class IssueSyncMixin(object):
         """
         raise NotImplementedError
 
-    def sync_status_outbound(self, external_issue, is_resolved, **kwargs):
+    def sync_status_outbound(self, external_issue, is_resolved, project_id, **kwargs):
         """
         Propagate a sentry issue's status to a linked issue's status.
         """
diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index 6ba47d7d19..4be71e312f 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -9,6 +9,7 @@ FIELD_MAP = {
     'comment': '/fields/System.History',
     'link': '/relations/-',
     'assigned_to': '/fields/System.AssignedTo',
+    'state': '/fields/System.State',
 }
 INVALID_ACCESS_TOKEN = 'HTTP 400 (invalid_request): The access token is not valid'
 
@@ -89,11 +90,11 @@ class VstsApiClient(ApiClient, OAuth2RefreshMixin):
         )
 
     def update_work_item(self, instance, id, title=UNSET, description=UNSET, link=UNSET,
-                         comment=UNSET, assigned_to=UNSET):
+                         comment=UNSET, assigned_to=UNSET, state=UNSET):
         data = []
 
         for f_name, f_value in (('title', title), ('description', description),
-                                ('link', link), ('assigned_to', assigned_to)):
+                                ('link', link), ('assigned_to', assigned_to), ('state', state)):
             if f_name == 'link':
                 # XXX: Link is not yet used, as we can't explicitly bind it to Sentry.
                 continue
diff --git a/src/sentry/integrations/vsts/issues.py b/src/sentry/integrations/vsts/issues.py
index 6930cba5a0..deea9ada22 100644
--- a/src/sentry/integrations/vsts/issues.py
+++ b/src/sentry/integrations/vsts/issues.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from mistune import markdown
 
-
+from sentry.models import ProjectIntegration
 from sentry.integrations.issues import IssueSyncMixin
 
 from sentry.integrations.exceptions import ApiUnauthorized, ApiError
@@ -131,3 +131,28 @@ class VstsIssueSync(IssueSyncMixin):
                     'issue_key': external_issue.key,
                 }
             )
+
+    def sync_status_outbound(self, external_issue, is_resolved, project_id, **kwargs):
+        project_integration = ProjectIntegration.objects.get(
+            integration_id=external_issue.integration_id,
+            project_id=project_id,
+        )
+
+        status_name = 'resolve_status' if is_resolved else 'regression_status'
+        try:
+            status = project_integration.config[status_name]
+        except KeyError:
+            return
+        try:
+            self.get_client().update_work_item(
+                self.instance, external_issue.key, state=status)
+        except (ApiUnauthorized, ApiError) as error:
+            self.logger.info(
+                'vsts.failed-to-change-status',
+                extra={
+                    'integration_id': external_issue.integration_id,
+                    'is_resolved': is_resolved,
+                    'issue_key': external_issue.key,
+                    'exception': error,
+                }
+            )
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index b404c21b07..980e510740 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -61,17 +61,21 @@ def sync_assignee_outbound(external_issue_id, user_id, assign, **kwargs):
 @retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist))
 def sync_status_outbound(group_id, external_issue_id, **kwargs):
     try:
-        group_status = Group.objects.filter(
+        group = Group.objects.filter(
             id=group_id,
             status__in=[GroupStatus.UNRESOLVED, GroupStatus.RESOLVED],
-        ).values_list('status', flat=True)[0]
+        )[0]
     except IndexError:
         return
 
     external_issue = ExternalIssue.objects.get(id=external_issue_id)
     integration = Integration.objects.get(id=external_issue.integration_id)
-    integration.get_installation().sync_status_outbound(
-        external_issue, group_status == GroupStatus.RESOLVED,
+    installation = integration.get_installation(
+        organization_id=external_issue.organization_id,
+        project_id=group.project_id,
+    )
+    installation.sync_status_outbound(
+        external_issue, group.status == GroupStatus.RESOLVED, group.project_id
     )
 
 
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 84dafac85f..6b49f21c5b 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -440,7 +440,9 @@ class GroupUpdateTest(APITestCase):
             name='Example',
         )
         integration.add_organization(org.id)
-
+        integration.add_project(
+            self.project.id, {
+                'resolve_status': 'Resolved', 'resolve_when': 'Resolved'})
         group = self.create_group(status=GroupStatus.UNRESOLVED, organization=org)
         external_issue = ExternalIssue.objects.get_or_create(
             organization_id=org.id,
@@ -482,7 +484,7 @@ class GroupUpdateTest(APITestCase):
                     'statusDetails': {},
                 }
                 mock_sync_status_outbound.assert_called_once_with(
-                    external_issue, True
+                    external_issue, True, group.project_id
                 )
 
         response = self.client.get(
@@ -501,6 +503,9 @@ class GroupUpdateTest(APITestCase):
             name='Example',
         )
         integration.add_organization(org.id)
+        integration.add_project(
+            group.project_id, {
+                'resolve_status': 'Resolved', 'resolve_when': 'Resolved'})
         GroupResolution.objects.create(
             group=group,
             release=release,
@@ -550,7 +555,7 @@ class GroupUpdateTest(APITestCase):
                     is_active=True,
                 ).exists()
                 mock_sync_status_outbound.assert_called_once_with(
-                    external_issue, False
+                    external_issue, False, group.project_id
                 )
 
     def test_self_assign_issue(self):
diff --git a/tests/sentry/integrations/vsts/test_issues.py b/tests/sentry/integrations/vsts/test_issues.py
index f67aa03877..40a3b78440 100644
--- a/tests/sentry/integrations/vsts/test_issues.py
+++ b/tests/sentry/integrations/vsts/test_issues.py
@@ -20,9 +20,6 @@ class VstsIssueSycnTest(TestCase):
         return RequestFactory()
 
     def setUp(self):
-        self.user = self.create_user()
-        self.organization = self.create_organization(owner=self.user)
-
         model = Integration.objects.create(
             provider='vsts',
             external_id='vsts_external_id',
@@ -45,6 +42,15 @@ class VstsIssueSycnTest(TestCase):
             }
         )
         model.add_organization(self.organization.id, identity.id)
+        self.config = {
+            'resolve_status': 'Resolved',
+            'resolve_when': 'Resolved',
+            'regression_status': 'Active',
+            'sync_comments': True,
+            'sync_forward_assignment': True,
+            'sync_reverse_assignment': True,
+        }
+        model.add_project(self.project.id, self.config)
         self.integration = VstsIntegration(model, self.organization.id)
         self.issue_id = 309
 
@@ -145,3 +151,33 @@ class VstsIssueSycnTest(TestCase):
         assert responses.calls[0].response.status_code == 200
         assert responses.calls[1].request.url == 'https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workitems/%d' % vsts_work_item_id
         assert responses.calls[1].response.status_code == 200
+
+    @responses.activate
+    def test_sync_status_outbound(self):
+        vsts_work_item_id = 5
+        responses.add(
+            responses.PATCH,
+            'https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workitems/%d' % vsts_work_item_id,
+            body=WORK_ITEM_RESPONSE,
+            content_type='application/json',
+        )
+        responses.add(
+            responses.GET,
+            'https://fabrikam-fiber-inc.vssps.visualstudio.com/_apis/graph/users',
+            body=GET_USERS_RESPONSE,
+            content_type='application/json',
+        )
+
+        external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.integration.model.id,
+            key=vsts_work_item_id,
+            title='I\'m a title!',
+            description='I\'m a description.'
+        )
+        self.integration.sync_status_outbound(external_issue, True, self.project.id)
+        assert len(responses.calls) == 1
+        req = responses.calls[0].request
+        assert req.url == 'https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workitems/%d' % vsts_work_item_id
+        assert req.body == '[{"path": "/fields/System.State", "value": "Resolved", "op": "replace"}]'
+        assert responses.calls[0].response.status_code == 200
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index b04f8df752..387065484a 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -529,6 +529,9 @@ class EventManagerTest(TransactionTestCase):
             name='Example',
         )
         integration.add_organization(org.id)
+        integration.add_project(
+            group.project_id, {
+                'resolve_status': 'Resolved', 'resolve_when': 'Resolved'})
         external_issue = ExternalIssue.objects.get_or_create(
             organization_id=org.id,
             integration_id=integration.id,
@@ -589,7 +592,7 @@ class EventManagerTest(TransactionTestCase):
                 )
                 event = manager.save(1)
                 mock_sync_status_outbound.assert_called_once_with(
-                    external_issue, False
+                    external_issue, False, event.group.project_id
                 )
                 assert event.group_id == group.id
 
