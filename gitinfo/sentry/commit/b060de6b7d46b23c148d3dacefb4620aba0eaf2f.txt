commit b060de6b7d46b23c148d3dacefb4620aba0eaf2f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jul 5 15:34:10 2018 -0700

     feat(discover): Add conditions UI and basic validation (#8867)
    
    Closes APP-391

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx
deleted file mode 100644
index 03ebc6e2ee..0000000000
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx
+++ /dev/null
@@ -1,215 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import styled from 'react-emotion';
-import {Flex, Box} from 'grid-emotion';
-
-import Link from 'app/components/link';
-import TextField from 'app/components/forms/textField';
-import SelectField from 'app/components/forms/selectField';
-
-import {t} from 'app/locale';
-
-import {CONDITION_OPERATORS} from './data';
-
-export default class Conditions extends React.Component {
-  static propTypes = {
-    value: PropTypes.arrayOf(PropTypes.array).isRequired,
-    onChange: PropTypes.func.isRequired,
-    columns: PropTypes.array,
-  };
-
-  constructor(props) {
-    super(props);
-    this.state = {
-      editIndex: null,
-    };
-  }
-
-  addRow() {
-    const idx = this.props.value.length;
-    this.setState({
-      editIndex: idx,
-    });
-    this.props.onChange([...this.props.value, [null, null, null]]);
-  }
-
-  removeRow(idx) {
-    const conditions = this.props.value.slice();
-    conditions.splice(idx, 1);
-    this.props.onChange(conditions);
-  }
-
-  updateCondition(idx, conditionIdx, val) {
-    const conditions = this.props.value.slice();
-    conditions[conditionIdx][idx] = val;
-
-    // Handle IS NULL and IS NOT NULL
-    const specialClauses = new Set(['IS NULL', 'IS NOT NULL']);
-    if (idx === 1 && specialClauses.has(val)) {
-      conditions[conditionIdx][2] = null;
-    }
-
-    // Handle IN condition
-    if (idx === 1 && val === 'IN') {
-      if (typeof conditions[conditionIdx][2] === 'string') {
-        conditions[conditionIdx][2] = conditions[conditionIdx][2].split(',');
-      } else if (!Array.isArray(conditions[conditionIdx][2])) {
-        conditions[conditionIdx][2] = [];
-      }
-    }
-
-    if (idx === 2 && conditions[conditionIdx][1] === 'IN') {
-      conditions[conditionIdx][2] = conditions[conditionIdx][2]
-        .split(',')
-        .map(condition => {
-          const col = this.props.columns.find(
-            ({name}) => name === conditions[conditionIdx][0]
-          );
-          return col.type === 'number' ? parseInt(condition, 10) : condition;
-        });
-    }
-
-    this.props.onChange(conditions);
-  }
-
-  getConditionOperators(condition) {
-    const stringOperators = new Set(['=', '!=', 'IN', 'IS NULL', 'IS NOT NULL', 'LIKE']);
-
-    return CONDITION_OPERATORS.filter(op => {
-      const col = this.props.columns.find(({name}) => name === condition[0]);
-      if (col && col.type === 'string') {
-        return stringOperators.has(op);
-      } else {
-        return true;
-      }
-    }).map(op => ({
-      value: op,
-      label: op,
-    }));
-  }
-
-  renderValueField(condition, idx) {
-    const showValueField = condition[1] !== 'IS NULL' && condition[1] !== 'IS NOT NULL';
-
-    if (!showValueField) return null;
-
-    if (condition[1] === 'IN') {
-      const value = condition[2].map(val => val.toString()).join(',');
-
-      return (
-        <TextField
-          name="condition-3"
-          placeholder={t('Add comma separated values')}
-          value={value}
-          onChange={val => this.updateCondition(2, idx, val)}
-        />
-      );
-    } else {
-      return (
-        <TextField
-          name="condition-3"
-          value={condition[2]}
-          onChange={val => this.updateCondition(2, idx, val)}
-        />
-      );
-    }
-  }
-
-  saveRow(condition, idx) {
-    const conditions = this.props.value.slice();
-    conditions[idx] = condition;
-    this.props.onChange(conditions);
-    this.setState({
-      editIndex: null,
-    });
-  }
-
-  renderCondition(condition, idx) {
-    const {columns} = this.props;
-
-    if (this.state.editIndex === idx) {
-      return (
-        <React.Fragment>
-          <Box w={1 / 3} pr={1}>
-            <SelectField
-              name="condition-1"
-              options={columns.map(({name}) => ({
-                value: name,
-                label: name,
-              }))}
-              value={condition[0]}
-              onChange={val => this.updateCondition(0, idx, val)}
-            />
-          </Box>
-          <Box w={1 / 3} pr={1}>
-            <SelectField
-              name="condition-2"
-              options={this.getConditionOperators(condition)}
-              value={condition[1]}
-              onChange={val => this.updateCondition(1, idx, val)}
-            />
-          </Box>
-          <Box w={1 / 3} pr={1}>
-            {this.renderValueField(condition, idx)}
-          </Box>
-          <Box>
-            <Save
-              className="icon-circle-check"
-              onClick={() => this.saveRow(condition, idx)}
-              style={{lineHeight: '37px'}}
-            />
-            <a
-              className="icon-circle-cross"
-              style={{lineHeight: '37px'}}
-              onClick={() => this.removeRow(idx)}
-            />
-          </Box>
-        </React.Fragment>
-      );
-    } else {
-      return (
-        <ConditionLink onClick={() => this.setState({editIndex: idx})}>
-          {condition.join(' ')}
-        </ConditionLink>
-      );
-    }
-  }
-
-  render() {
-    const {value} = this.props;
-    return (
-      <div>
-        <div>
-          <strong>{t('Conditions')}</strong>
-          <Add>
-            (<Link onClick={() => this.addRow()}>{t('Add')}</Link>)
-          </Add>
-        </div>
-        {!value.length && 'None, showing all events'}
-        {value.map((condition, idx) => (
-          <Flex key={idx}>{this.renderCondition(condition, idx)}</Flex>
-        ))}
-      </div>
-    );
-  }
-}
-
-const Add = styled.span`
-  font-style: italic;
-  text-decoration: underline;
-  margin-left: 4px;
-  font-size: 13px;
-  line-height: 16px;
-  color: ${p => p.theme.gray1};
-`;
-
-const ConditionLink = styled(Link)`
-  margin: 16px 0;
-`;
-
-const Save = styled(Link)`
-  color: ${p => p.theme.green};
-  :hover {
-    color: ${p => p.theme.greenDark};
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
new file mode 100644
index 0000000000..27c20d3777
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
@@ -0,0 +1,184 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {Box} from 'grid-emotion';
+
+import SelectControl from 'app/components/forms/selectControl';
+
+import {getInternal, getExternal, isValidCondition} from './utils';
+import {CONDITION_OPERATORS} from '../data';
+
+export default class Condition extends React.Component {
+  static propTypes = {
+    value: PropTypes.array.isRequired,
+    onChange: PropTypes.func.isRequired,
+    columns: PropTypes.arrayOf(
+      PropTypes.shape({name: PropTypes.string, type: PropTypes.string})
+    ).isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      selectedColumn: null,
+      selectedOperator: null,
+    };
+  }
+
+  focus() {
+    this.select.focus();
+  }
+
+  handleChange = option => {
+    const external = getExternal(option.value, this.props.columns);
+
+    if (isValidCondition(external, this.props.columns)) {
+      this.props.onChange(external);
+      return;
+    }
+
+    if (new Set(this.props.columns.map(({name}) => name)).has(external[0])) {
+      this.setState({selectedColumn: external[0]}, this.focus);
+    }
+
+    if (new Set(CONDITION_OPERATORS).has(external[1])) {
+      this.setState({selectedOperator: external[1]}, this.focus);
+    }
+  };
+
+  handleClose = () => {
+    this.setState({selectedColumn: null, selectedOperator: null});
+  };
+
+  getOptions() {
+    const currentValue = getInternal(this.props.value);
+    return [{label: currentValue, value: currentValue}];
+  }
+
+  getConditionsForColumn(colName) {
+    const column = this.props.columns.find(({name}) => name === colName);
+    const colType = column ? column.type : 'string';
+    const numberOnlyOperators = new Set(['>', '<', '>=', '<=']);
+    const stringOnlyOperators = new Set(['LIKE']);
+
+    return CONDITION_OPERATORS.filter(operator => {
+      if (colType === 'number') {
+        return !stringOnlyOperators.has(operator);
+      } else {
+        return !numberOnlyOperators.has(operator);
+      }
+    });
+  }
+
+  filterOptions = (options, input) => {
+    input =
+      input ||
+      `${this.state.selectedColumn || ''} ${this.state.selectedOperator || ''}`.trim();
+
+    let optionList = options;
+    const external = getExternal(input, this.props.columns);
+    const isValid = isValidCondition(external, this.props.columns);
+
+    if (isValid) {
+      return [];
+    }
+
+    const hasSelectedColumn = external[0] !== null || this.state.selectedColumn !== null;
+    const hasSelectedOperator =
+      external[1] !== null || this.state.selectedOperator !== null;
+
+    if (!hasSelectedColumn) {
+      optionList = this.props.columns.map(({name}) => ({
+        value: `${name}`,
+        label: `${name}...`,
+      }));
+    }
+
+    if (hasSelectedColumn && !hasSelectedOperator) {
+      const selectedColumn = external[0] || this.state.selectedColumn;
+      optionList = this.getConditionsForColumn(selectedColumn).map(op => {
+        const value = `${external[0] || this.state.selectedColumn} ${op}`;
+        return {
+          value,
+          label: value,
+        };
+      });
+    }
+
+    return optionList.filter(({label}) => label.includes(input));
+  };
+
+  isValidNewOption = ({label}) => {
+    return isValidCondition(getExternal(label, this.props.columns), this.props.columns);
+  };
+
+  inputRenderer = props => {
+    let val = `${this.state.selectedColumn || ''} ${this.state.selectedOperator ||
+      ''}`.trim();
+
+    return (
+      <input
+        type="text"
+        {...props}
+        value={props.value || val}
+        style={{width: '100%', border: 0}}
+      />
+    );
+  };
+
+  valueRenderer = option => {
+    const hideValue = this.state.selectedColumn || this.state.selectedOperator;
+
+    return hideValue ? '' : option.value;
+  };
+
+  shouldKeyDownEventCreateNewOption = keyCode => {
+    const createKeyCodes = new Set([13, 9]); // ENTER, TAB
+    return createKeyCodes.has(keyCode);
+  };
+
+  onInputChange = value => {
+    const external = getExternal(value, this.props.columns);
+
+    if (!external[0] && this.state.selectedColumn) {
+      this.setState({
+        selectedColumn: null,
+      });
+    }
+
+    if (!external[1] && this.state.selectedOperator) {
+      this.setState({
+        selectedOperator: null,
+      });
+    }
+
+    return value;
+  };
+
+  render() {
+    return (
+      <Box w={1}>
+        <SelectControl
+          forwardedRef={ref => (this.select = ref)}
+          value={getInternal(this.props.value)}
+          options={this.getOptions()}
+          filterOptions={this.filterOptions}
+          onChange={this.handleChange}
+          closeOnSelect={true}
+          openOnFocus={true}
+          autoBlur={true}
+          clearable={false}
+          backspaceRemoves={false}
+          deleteRemoves={false}
+          onClose={this.handleClose}
+          creatable={true}
+          promptTextCreator={text => text}
+          isValidNewOption={this.isValidNewOption}
+          inputRenderer={this.inputRenderer}
+          valueRenderer={this.valueRenderer}
+          shouldKeyDownEventCreateNewOption={this.shouldKeyDownEventCreateNewOption}
+          onInputChange={this.onInputChange}
+        />
+      </Box>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx
new file mode 100644
index 0000000000..85c92ca09e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx
@@ -0,0 +1,86 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import {Flex, Box} from 'grid-emotion';
+
+import Link from 'app/components/link';
+import InlineSvg from 'app/components/inlineSvg';
+import {t} from 'app/locale';
+
+import Condition from './condition';
+
+export default class Conditions extends React.Component {
+  static propTypes = {
+    value: PropTypes.arrayOf(PropTypes.array).isRequired,
+    onChange: PropTypes.func.isRequired,
+    columns: PropTypes.array,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      editIndex: null,
+    };
+  }
+
+  addRow() {
+    const idx = this.props.value.length;
+    this.setState({
+      editIndex: idx,
+    });
+    this.props.onChange([...this.props.value, [null, null, null]]);
+  }
+
+  removeRow(idx) {
+    const conditions = this.props.value.slice();
+    conditions.splice(idx, 1);
+    this.props.onChange(conditions);
+  }
+
+  handleChange(val, idx) {
+    const conditions = this.props.value.slice();
+
+    conditions[idx] = val;
+
+    this.props.onChange(conditions);
+  }
+
+  render() {
+    const {value, columns} = this.props;
+
+    return (
+      <div>
+        <div>
+          <strong>{t('Conditions')}</strong>
+          <Add>
+            (<Link onClick={() => this.addRow()}>{t('Add')}</Link>)
+          </Add>
+        </div>
+        {!value.length && 'None, showing all events'}
+        {value.map((condition, idx) => (
+          <Flex key={idx}>
+            <Condition
+              value={condition}
+              onChange={val => this.handleChange(val, idx)}
+              columns={columns}
+            />
+            <Box ml={1}>
+              <a onClick={() => this.removeRow(idx)}>
+                <InlineSvg src="icon-circle-close" height="38px" />
+              </a>
+            </Box>
+          </Flex>
+        ))}
+      </div>
+    );
+  }
+}
+
+const Add = styled.span`
+  font-style: italic;
+  text-decoration: underline;
+  margin-left: 4px;
+  font-size: 13px;
+  line-height: 16px;
+  color: ${p => p.theme.gray1};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
new file mode 100644
index 0000000000..092f743eda
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
@@ -0,0 +1,86 @@
+import {CONDITION_OPERATORS} from '../data';
+
+const specialConditions = new Set(['IS NULL', 'IS NOT NULL']);
+
+/**
+ * Returns true if a condition is valid and false if not
+ *
+ * @param {Array} condition Condition in external Snuba format
+ * @param {Object} cols List of column objects
+ * @param {String} cols.name Column name
+ * @param {String} cols.type Type of column
+ * @returns {Boolean} True if valid condition, false if not
+ */
+export function isValidCondition(condition, cols) {
+  const allOperators = new Set(CONDITION_OPERATORS);
+  const columns = new Set(cols.map(({name}) => name));
+
+  const isColValid = columns.has(condition[0]);
+  const isOperatorValid = allOperators.has(condition[1]);
+
+  const isValueValid =
+    specialConditions.has(condition[1]) ||
+    typeof condition[2] === (cols.find(col => col.name === condition[0]) || {}).type;
+
+  return isColValid && isOperatorValid && isValueValid;
+}
+
+/***
+* Converts external Snuba format to internal format for dropdown
+*
+* @param {Array} condition Condition in external Snuba format
+* @param {Array} cols List of columns with name and type e.g. {name: 'message', type: 'string}
+* @returns {String}
+*/
+export function getInternal(external) {
+  return external.join(' ').trim();
+}
+
+/***
+* Converts internal dropdown format to external Snuba format
+*
+* @param {String} internal Condition in internal format
+* @param {Array} {Array} cols List of columns with name and type e.g. {name: 'message', type: 'string}
+* @returns {Array} condition Condition in external Snuba format
+*/
+export function getExternal(internal, columns) {
+  internal = internal || '';
+  const external = [null, null, null];
+
+  // Validate column
+  const colValue = internal.split(' ')[0];
+  if (new Set(columns.map(({name}) => name)).has(colValue)) {
+    external[0] = colValue;
+  }
+
+  // Validate operator
+  const remaining = (external[0] !== null
+    ? internal.replace(external[0], '')
+    : internal
+  ).trim();
+
+  // Check IS NULL and IS NOT NULL first
+  if (specialConditions.has(remaining)) {
+    external[1] = remaining;
+  } else {
+    const operatorMatch = remaining.match(/^([^\s]+).*$/);
+    const operatorValue = operatorMatch ? operatorMatch[1] : null;
+
+    if (new Set(CONDITION_OPERATORS).has(operatorValue)) {
+      external[1] = operatorValue;
+    }
+  }
+
+  // Validate value and convert to correct type
+  if (external[0] && external[1] && !specialConditions.has(external[1])) {
+    const valuesMatch = internal.match(/^[a-zA-Z0-9_\.:-]+ [^\s]+ (.*)$/);
+    external[2] = valuesMatch ? valuesMatch[1] : null;
+    const type = columns.find(({name}) => name === colValue).type;
+
+    if (type === 'number') {
+      external[2] = parseInt(external[2], 10) || null;
+    }
+  }
+
+  return external;
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index 6124436b07..f8b86c510f 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -34,13 +34,13 @@ const COLUMNS = [
   {name: 'device_charging', type: 'string'},
   {name: 'event_id', type: 'string'},
   {name: 'project_id', type: 'string'},
-  {name: 'timestamp', type: 'datetime'},
+  {name: 'timestamp', type: 'string'}, // TODO: handling datetime as string for now
   {name: 'deleted', type: 'number'},
   {name: 'retention_days', type: 'number'},
   {name: 'platform', type: 'string'},
   {name: 'message', type: 'string'},
   {name: 'primary_hash', type: 'string'},
-  {name: 'received', type: 'datetime'},
+  {name: 'received', type: 'string'}, // TODO: handling datetime as string for now
   {name: 'user_id', type: 'string'},
   {name: 'username', type: 'string'},
   {name: 'email', type: 'string'},
@@ -75,7 +75,7 @@ const CONDITION_OPERATORS = [
   '<=',
   '=',
   '!=',
-  'IN',
+  // 'IN', commented out since condition input doesn't support arrays yet :(
   'IS NULL',
   'IS NOT NULL',
   'LIKE',
diff --git a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
new file mode 100644
index 0000000000..8fcca95312
--- /dev/null
+++ b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
@@ -0,0 +1,92 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import Condition from 'app/views/organizationDiscover/conditions/condition';
+
+describe('Condition', function() {
+  describe('render()', function() {
+    it('renders text', function() {
+      const conditionsList = [
+        {value: ['device_name', '=', 'test'], expectedText: 'device_name = test'},
+        {value: ['device_name', 'IS NULL', null], expectedText: 'device_name IS NULL'},
+        {
+          value: ['device_battery_level', '>', 5],
+          expectedText: 'device_battery_level > 5',
+        },
+      ];
+      conditionsList.forEach(function(condition) {
+        const wrapper = mount(
+          <Condition value={condition.value} onChange={jest.fn()} columns={[]} />
+        );
+        expect(wrapper.text()).toBe(condition.expectedText);
+      });
+    });
+  });
+
+  describe('filterOptions()', function() {
+    let wrapper;
+    beforeEach(function() {
+      const columns = [{name: 'col1', type: 'string'}, {name: 'col2', type: 'number'}];
+      wrapper = mount(
+        <Condition value={[null, null, null]} onChange={jest.fn()} columns={columns} />
+      );
+    });
+
+    it('renders column name options if no input', function() {
+      const options = wrapper.instance().filterOptions([], '');
+      expect(options[0]).toEqual({value: 'col1', label: 'col1...'});
+      expect(options[1]).toEqual({value: 'col2', label: 'col2...'});
+    });
+
+    it('renders operator options for string column', function() {
+      const options = wrapper.instance().filterOptions([], 'col1');
+      expect(options).toHaveLength(5);
+      expect(options[0]).toEqual({value: 'col1 =', label: 'col1 ='});
+    });
+
+    it('renders operator options for number column', function() {
+      const options = wrapper.instance().filterOptions([], 'col2');
+      expect(options).toHaveLength(8);
+      expect(options[0]).toEqual({value: 'col2 >', label: 'col2 >'});
+    });
+  });
+
+  describe('handleChange()', function() {
+    let wrapper, focusSpy;
+    let onChangeMock = jest.fn();
+    beforeEach(function() {
+      focusSpy = jest.spyOn(Condition.prototype, 'focus');
+      const columns = [{name: 'col1', type: 'string'}, {name: 'col2', type: 'number'}];
+      wrapper = mount(
+        <Condition value={[null, null, null]} onChange={onChangeMock} columns={columns} />
+      );
+    });
+
+    afterEach(function() {
+      jest.clearAllMocks();
+    });
+
+    it('handles valid final conditions', function() {
+      const conditionList = [
+        'col1 = test',
+        'col2 > 3',
+        'col1 LIKE %something%',
+        'col2 IS NULL',
+      ];
+      conditionList.forEach(function(value) {
+        wrapper.instance().handleChange({value});
+        expect(onChangeMock).toHaveBeenCalled();
+        expect(focusSpy).not.toHaveBeenCalled();
+      });
+    });
+
+    it('handles intermediate condition states', function() {
+      const conditionList = ['col1', 'col2', 'col2 <'];
+      conditionList.forEach(function(value) {
+        wrapper.instance().handleChange({value});
+        expect(onChangeMock).not.toHaveBeenCalled();
+        expect(focusSpy).toHaveBeenCalled();
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
new file mode 100644
index 0000000000..d67ab27e17
--- /dev/null
+++ b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
@@ -0,0 +1,61 @@
+import {
+  getInternal,
+  getExternal,
+  isValidCondition,
+} from 'app/views/organizationDiscover/conditions/utils';
+
+import {COLUMNS} from 'app/views/organizationDiscover/data';
+
+const conditionList = [
+  {
+    internal: 'message LIKE %test%',
+    external: ['message', 'LIKE', '%test%'],
+  },
+  {
+    internal: 'user_id = USER_1',
+    external: ['user_id', '=', 'USER_1'],
+  },
+  {
+    internal: 'message IS NOT NULL',
+    external: ['message', 'IS NOT NULL', null],
+  },
+  {
+    internal: 'retention_days = 3',
+    external: ['retention_days', '=', 3],
+  },
+];
+
+describe('Conditions', function() {
+  it('getExternal()', function() {
+    conditionList.forEach(({internal, external}) => {
+      expect(getExternal(internal, COLUMNS)).toEqual(external);
+    });
+  });
+
+  it('getInternal()', function() {
+    conditionList.forEach(({internal, external}) => {
+      expect(getInternal(external, COLUMNS)).toEqual(internal);
+    });
+  });
+
+  describe('isValidCondition()', function() {
+    it('validates column name exists', function() {
+      expect(isValidCondition(['device_name', '=', 'something'], COLUMNS)).toBe(true);
+      expect(isValidCondition(['device__name', '=', 'something'], COLUMNS)).toBe(false);
+    });
+
+    it('validates column type', function() {
+      expect(isValidCondition(['device_battery_level', '=', 5], COLUMNS)).toBe(true);
+      expect(isValidCondition(['device_battery_level', '=', '5'], COLUMNS)).toBe(false);
+    });
+
+    it('validates operator', function() {
+      expect(isValidCondition(['device_name', 'LIKE', '%something%'], COLUMNS)).toBe(
+        true
+      );
+      expect(isValidCondition(['device__name', 'iS', '%something%'], COLUMNS)).toBe(
+        false
+      );
+    });
+  });
+});
