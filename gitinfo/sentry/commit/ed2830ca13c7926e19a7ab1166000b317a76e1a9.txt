commit ed2830ca13c7926e19a7ab1166000b317a76e1a9
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 29 23:17:40 2013 -0800

    Add aliases for interfaces

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 492d7047f2..e0d5f748d6 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -34,6 +34,14 @@ logger = logging.getLogger('sentry.coreapi.errors')
 MAX_CULPRIT_LENGTH = 200
 MAX_MESSAGE_LENGTH = 1000
 
+INTERFACE_ALIASES = {
+    'exception': 'sentry.interfaces.Exception',
+    'request': 'sentry.interfaces.Http',
+    'user': 'sentry.interfaces.User',
+    'stacktrace': 'sentry.interfaces.Stacktrace',
+    'template': 'sentry.interfaces.Template',
+}
+
 RESERVED_FIELDS = (
     'project',
     'event_id',
@@ -295,25 +303,27 @@ def validate_data(project, data, client=None):
         if k in RESERVED_FIELDS:
             continue
 
-        if '.' not in k:
-            logger.info('Ignoring unknown attribute %r passed by client %r',
+        if not data[k]:
+            logger.info('Ignoring empty interface %r passed by client %r',
                 k, client or '<unknown client>', extra={'request': env.request})
             del data[k]
             continue
 
-        if not data[k]:
-            logger.info('Ignoring empty interface %r passed by client %r',
+        import_path = INTERFACE_ALIASES.get(k, k)
+
+        if '.' not in import_path:
+            logger.info('Ignoring unknown attribute %r passed by client %r',
                 k, client or '<unknown client>', extra={'request': env.request})
             del data[k]
             continue
 
         try:
-            interface = import_string(k)
+            interface = import_string(import_path)
         except (ImportError, AttributeError), e:
             raise InvalidInterface('%r is not a valid interface name: %s' % (k, e))
 
         try:
-            data[k] = interface(**data[k]).serialize()
+            data[import_path] = interface(**data.pop(k)).serialize()
         except Exception, e:
             logger.error('Client %r passed an invalid value for interface %r',
                 client or '<unknown client>',
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 563791463a..9d491f2a68 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -9,10 +9,9 @@ from django.contrib.auth.models import User
 
 from sentry.models import Project
 from sentry.exceptions import InvalidTimestamp, InvalidInterface, InvalidData
-from sentry.coreapi import project_from_id, project_from_api_key_and_id, \
-  extract_auth_vars, project_from_auth_vars, APIUnauthorized, \
-  APIForbidden, process_data_timestamp, \
-  insert_data_to_database, validate_data
+from sentry.coreapi import (project_from_id, project_from_api_key_and_id,
+    extract_auth_vars, project_from_auth_vars, APIUnauthorized, APIForbidden,
+    process_data_timestamp, insert_data_to_database, validate_data, INTERFACE_ALIASES)
 from sentry.testutils import TestCase
 
 
@@ -24,6 +23,23 @@ class BaseAPITest(TestCase):
         self.pk = self.project.key_set.get_or_create(user=self.user)[0]
 
 
+class InterfaceAliasesTest(BaseAPITest):
+    def test_http(self):
+        assert INTERFACE_ALIASES['request'] == 'sentry.interfaces.Http'
+
+    def test_user(self):
+        assert INTERFACE_ALIASES['user'] == 'sentry.interfaces.User'
+
+    def test_exception(self):
+        assert INTERFACE_ALIASES['exception'] == 'sentry.interfaces.Exception'
+
+    def test_stacktrace(self):
+        assert INTERFACE_ALIASES['stacktrace'] == 'sentry.interfaces.Stacktrace'
+
+    def test_template(self):
+        assert INTERFACE_ALIASES['template'] == 'sentry.interfaces.Template'
+
+
 class ProjectFromIdTest(BaseAPITest):
     def test_valid(self):
         request = mock.Mock()
@@ -268,6 +284,22 @@ class ValidateDataTest(BaseAPITest):
                 'tests.manager.tests.DummyInterface': {'foo': 'bar'}
             })
 
+    @mock.patch('sentry.coreapi.import_string')
+    def test_an_alias_maps_correctly(self, import_string):
+        alias, full_path = INTERFACE_ALIASES.items()[0]
+
+        result = validate_data(self.project, {
+            'project': self.project.id,
+            'message': 'foo',
+            alias: {'foo': 'bar'},
+        })
+        import_string.assert_called_once_with(full_path)
+        interface = import_string.return_value
+        interface.assert_called_once_with(foo='bar')
+        assert alias not in result
+        assert full_path in result
+        assert result[full_path] == interface.return_value.serialize.return_value
+
     def test_log_level_as_string(self):
         data = validate_data(self.project, {
             'project': self.project.id,
