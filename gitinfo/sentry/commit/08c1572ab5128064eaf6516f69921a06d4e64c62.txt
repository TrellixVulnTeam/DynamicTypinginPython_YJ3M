commit 08c1572ab5128064eaf6516f69921a06d4e64c62
Author: josh <josh@jrl.ninja>
Date:   Thu Jan 16 21:20:36 2020 +0000

    feat: disable redundant content-length middleware on django 1.11+ (#16478)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 0194581f60..f2a6c5f351 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -249,6 +249,11 @@ USE_L10N = True
 
 USE_TZ = True
 
+# CAVEAT: If you're adding a middleware that modifies a response's content,
+# and appears before CommonMiddleware, you must either reorder your middleware
+# so that responses aren't modified after Content-Length is set, or have the
+# response modifying middleware reset the Content-Length header.
+# This is because CommonMiddleware Sets the Content-Length header for non-streaming responses.
 MIDDLEWARE_CLASSES = (
     "sentry.middleware.proxy.ChunkedMiddleware",
     "sentry.middleware.proxy.DecompressBodyMiddleware",
diff --git a/src/sentry/middleware/proxy.py b/src/sentry/middleware/proxy.py
index 56a7ce7aac..51ad0d57fd 100644
--- a/src/sentry/middleware/proxy.py
+++ b/src/sentry/middleware/proxy.py
@@ -12,7 +12,9 @@ try:
 except ImportError:
     has_uwsgi = False
 
+from django import VERSION
 from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
 
 logger = logging.getLogger(__name__)
 Z_CHUNK = 1024 * 8
@@ -110,8 +112,6 @@ class GzipDecoder(ZDecoder):
 class SetRemoteAddrFromForwardedFor(object):
     def __init__(self):
         if not getattr(settings, "SENTRY_USE_X_FORWARDED_FOR", True):
-            from django.core.exceptions import MiddlewareNotUsed
-
             raise MiddlewareNotUsed
 
     def _remove_port_number(self, ip_address):
@@ -140,8 +140,6 @@ class SetRemoteAddrFromForwardedFor(object):
 class ChunkedMiddleware(object):
     def __init__(self):
         if not has_uwsgi:
-            from django.core.exceptions import MiddlewareNotUsed
-
             raise MiddlewareNotUsed
 
     def process_request(self, request):
@@ -188,6 +186,11 @@ class ContentLengthHeaderMiddleware(object):
     Ensure that we have a proper Content-Length/Transfer-Encoding header
     """
 
+    def __init__(self):
+        # TODO(joshuarli): we can remove this middleware entirely once we're on 1.11
+        if VERSION[:2] >= (1, 11):
+            raise MiddlewareNotUsed
+
     def process_response(self, request, response):
         if "Transfer-Encoding" in response or "Content-Length" in response:
             return response
diff --git a/tests/sentry/middleware/test_proxy.py b/tests/sentry/middleware/test_proxy.py
index 80a09ecedc..53c18b9c63 100644
--- a/tests/sentry/middleware/test_proxy.py
+++ b/tests/sentry/middleware/test_proxy.py
@@ -1,12 +1,16 @@
 from __future__ import absolute_import
 
 from exam import fixture
+from django import VERSION
 from django.http import HttpRequest, HttpResponse, StreamingHttpResponse
+import pytest
 
 from sentry.testutils import TestCase
 from sentry.middleware.proxy import ContentLengthHeaderMiddleware, SetRemoteAddrFromForwardedFor
 
 
+# TODO(joshuarli): we can remove this entirely once we're on 1.11
+@pytest.mark.skipif(VERSION[:2] >= (1, 11), reason="middleware not used on Django 1.11+")
 class ContentLengthHeaderMiddlewareTest(TestCase):
     middleware = fixture(ContentLengthHeaderMiddleware)
 
