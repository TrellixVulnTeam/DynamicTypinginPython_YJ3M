commit 2e2c2d1743e2959d60fa13ca6ef4a5209b0b5f55
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Oct 5 17:45:28 2015 -0700

    Remove gulp (all done via webpack now)

diff --git a/Makefile b/Makefile
index f4ac9cfcd0..72ed9c38e4 100644
--- a/Makefile
+++ b/Makefile
@@ -40,7 +40,7 @@ build: locale
 
 clean:
 	@echo "--> Cleaning static cache"
-	${NPM_ROOT}/.bin/gulp clean
+	rm dist/*
 	@echo "--> Cleaning pyc files"
 	find . -name "*.pyc" -delete
 	@echo ""
diff --git a/gulpfile.js b/gulpfile.js
deleted file mode 100644
index 8faa38e46b..0000000000
--- a/gulpfile.js
+++ /dev/null
@@ -1,95 +0,0 @@
-"use strict";
-
-var gulp = require("gulp"),
-    gp_clean = require("gulp-clean"),
-    gp_concat = require("gulp-concat"),
-    gp_less = require("gulp-less"),
-    gp_util = require("gulp-util"),
-    gp_watch = require("gulp-watch"),
-    path = require("path");
-
-var staticPrefix = "src/sentry/static/sentry",
-    distPath = staticPrefix + "/dist";
-
-// Workaround for https://github.com/gulpjs/gulp/issues/71
-var origSrc = gulp.src;
-gulp.src = function () {
-    return fixPipe(origSrc.apply(this, arguments));
-};
-function fixPipe(stream) {
-    var origPipe = stream.pipe;
-    stream.pipe = function (dest) {
-        arguments[0] = dest.on('error', function (error) {
-            var nextStreams = dest._nextStreams;
-            if (nextStreams) {
-                nextStreams.forEach(function (nextStream) {
-                    nextStream.emit('error', error.toString());
-                });
-            } else if (dest.listeners('error').length === 1) {
-                throw error;
-            }
-        });
-        var nextStream = fixPipe(origPipe.apply(this, arguments));
-        (this._nextStreams || (this._nextStreams = [])).push(nextStream);
-        return nextStream;
-    };
-    return stream;
-}
-
-function file(name) {
-  return path.join(__dirname, staticPrefix, name);
-}
-
-function buildCssCompileTask(name, fileList) {
-  return function(){
-    gulp.src(fileList)
-    .pipe(gp_less({
-        paths: ['node_modules/bootstrap/less']
-    }))
-    .pipe(gp_concat(name))
-    .pipe(gulp.dest(distPath))
-    .on("error", gp_util.log);
-  };
-}
-
-gulp.task("clean", function () {
-  return gulp.src(distPath, {read: false})
-    .pipe(gp_clean())
-    .on("error", gp_util.log);
-});
-
-
-gulp.task("dist:css:sentry", buildCssCompileTask("sentry.css", [file("less/sentry.less")]))
-
-gulp.task("dist:css:wall", buildCssCompileTask("wall.css", [file("less/wall.less")]))
-
-gulp.task("dist:css:platformicons", buildCssCompileTask("platformicons.css", ['node_modules/platformicons/platformicons/platformicons.css']))
-
-gulp.task("dist:css", ["dist:css:sentry", "dist:css:wall", "dist:css:platformicons"]);
-
-gulp.task("dist", ["dist:css", "platformicons"]);
-
-gulp.task("watch:css:sentry", ["dist:css:sentry"], function(){
-  return gp_watch(file("less/**/*.less"), function(){
-    gulp.start("dist:css:sentry");
-  });
-});
-
-gulp.task("watch:css:wall", ["dist:css:wall"], function(){
-  return gp_watch(file("less/wall.less"), function(){
-    gulp.start("dist:css:wall");
-  });
-});
-
-gulp.task('platformicons', function() {
-  return gulp.src(['!node_modules/platformicons/platformicons/platformicons.css', 'node_modules/platformicons/platformicons/*'])
-  .pipe(gulp.dest(distPath));
-});
-
-gulp.task("watch:css", ["watch:css:sentry", "watch:css:wall"]);
-
-gulp.task("watch", function(){
-  return gulp.start(["watch:css"]);
-});
-
-gulp.task("default", ["dist"]);
diff --git a/package.json b/package.json
index 38d8851c72..64e0242ce8 100644
--- a/package.json
+++ b/package.json
@@ -15,13 +15,6 @@
     "eslint-plugin-react": "^3.3.0",
     "extract-text-webpack-plugin": "^0.8.2",
     "file-loader": "^0.8.4",
-    "gulp": "^3.8.11",
-    "gulp-clean": "^0.3.1",
-    "gulp-concat": "^2.4.2",
-    "gulp-less": "^1.3.9",
-    "gulp-react": "^2.0.0",
-    "gulp-util": "^3.0.1",
-    "gulp-watch": "^3.0.0",
     "jquery": "^2.1.3",
     "json-loader": "^0.5.2",
     "less": "^2.3.1",
@@ -49,7 +42,7 @@
   "APIMethod": "stub",
   "proxyURL": "http://localhost:8000",
   "scripts": {
-    "postinstall": "node_modules/.bin/gulp dist",
+    "postinstall": "node_modules/.bin/webpack -p",
     "test": "node_modules/karma/bin/karma start tests/karma.conf.js --single-run",
     "test-watch": "node_modules/karma/bin/karma start tests/karma.conf.js",
     "lint": "node_modules/.bin/eslint tests/js src/sentry/static/sentry/app --ext .jsx"
diff --git a/setup.py b/setup.py
index ff9793cefa..397a97a355 100755
--- a/setup.py
+++ b/setup.py
@@ -171,10 +171,6 @@ class BuildStatic(Command):
         log.info("running [npm install --quiet]")
         check_output(['npm', 'install', '--quiet'], cwd=work_path)
 
-        log.info("running [gulp dist]")
-        check_output([os.path.join('node_modules', '.bin', 'gulp'), 'dist'],
-                     cwd=work_path)
-
         # Enable React production optimization
         os.environ['NODE_ENV'] = 'production'
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 57909ce136..378a801e90 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -822,7 +822,6 @@ SENTRY_API_RESPONSE_DELAY = 0
 
 # Watchers for various application purposes (such as compiling static media)
 SENTRY_WATCHERS = (
-    [os.path.join(NODE_MODULES_ROOT, '.bin', 'gulp'), 'watch'],
     [os.path.join(NODE_MODULES_ROOT, '.bin', 'webpack'), '-d', '--watch',
      "--config={}".format(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js"))],
 )
