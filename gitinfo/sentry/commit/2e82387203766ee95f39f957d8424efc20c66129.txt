commit 2e82387203766ee95f39f957d8424efc20c66129
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed Jan 11 13:31:24 2017 +0100

    Validate release filename and header on upload (#4749)
    
    * Validate release filename and header on upload
    
    * Shorten regex
    
    * Move re.compile to module level
    
    * Use canonical syntax for regex search

diff --git a/src/sentry/api/endpoints/release_files.py b/src/sentry/api/endpoints/release_files.py
index 7fee7d0e91..437dbf8fc2 100644
--- a/src/sentry/api/endpoints/release_files.py
+++ b/src/sentry/api/endpoints/release_files.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import re
 from django.db import IntegrityError, transaction
 from six import BytesIO
 from rest_framework.negotiation import DefaultContentNegotiation
@@ -15,6 +16,7 @@ from sentry.models import File, Release, ReleaseFile
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 ERR_FILE_EXISTS = 'A file matching this name already exists for the given release'
+_filename_re = re.compile(r"[\n\t\r\f\v\\]")
 
 
 @scenario('UploadReleaseFile')
@@ -147,8 +149,12 @@ class ReleaseFilesEndpoint(ProjectEndpoint):
         full_name = request.DATA.get('name', fileobj.name)
         if not full_name:
             return Response({'detail': 'File name must be specified'}, status=400)
+
         name = full_name.rsplit('/', 1)[-1]
 
+        if _filename_re.search(name):
+            return Response({'detail': 'File name must not contain special whitespace characters'}, status=400)
+
         headers = {
             'Content-Type': fileobj.content_type,
         }
@@ -158,6 +164,8 @@ class ReleaseFilesEndpoint(ProjectEndpoint):
             except ValueError:
                 return Response({'detail': 'header value was not formatted correctly'}, status=400)
             else:
+                if _filename_re.search(v):
+                    return Response({'detail': 'header value must not contain special whitespace characters'}, status=400)
                 headers[k] = v.strip()
 
         file = File.objects.create(
diff --git a/tests/sentry/api/endpoints/test_release_files.py b/tests/sentry/api/endpoints/test_release_files.py
index 2a52ec6a53..c2c9de00c3 100644
--- a/tests/sentry/api/endpoints/test_release_files.py
+++ b/tests/sentry/api/endpoints/test_release_files.py
@@ -132,6 +132,33 @@ class ReleaseFileCreateTest(APITestCase):
 
         assert response.status_code == 400, response.content
 
+    def test_invalid_name(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            project=project,
+            organization_id=project.organization_id,
+            version='1',
+        )
+        release.add_project(project)
+
+        url = reverse('sentry-api-0-release-files', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'version': release.version,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.post(url, {
+            'name': 'http://exa\tmple.com/applic\nati\ron.js\n',
+            'header': 'X-SourceMap: http://example.com/test.map.js',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
+                                       content_type='application/javascript'),
+        }, format='multipart')
+
+        assert response.status_code == 400, response.content
+
     def test_bad_headers(self):
         project = self.create_project(name='foo')
 
@@ -159,6 +186,15 @@ class ReleaseFileCreateTest(APITestCase):
 
         assert response.status_code == 400, response.content
 
+        response = self.client.post(url, {
+            'name': 'http://example.com/application.js',
+            'header': 'X-SourceMap: http://example.com/\r\n\ntest.map.js\n',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
+                                       content_type='application/javascript'),
+        }, format='multipart')
+
+        assert response.status_code == 400, response.content
+
     def test_duplicate_file(self):
         project = self.create_project(name='foo')
 
