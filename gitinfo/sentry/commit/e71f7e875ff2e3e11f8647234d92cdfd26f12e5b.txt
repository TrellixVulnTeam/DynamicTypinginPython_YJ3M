commit e71f7e875ff2e3e11f8647234d92cdfd26f12e5b
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 10 13:28:28 2014 -0700

    Update stream to maintain cursors and sorting

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 9b5df2e17f..e98c705c50 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -9,6 +9,7 @@ from rest_framework.views import APIView
 from urllib2 import quote
 
 from sentry.tsdb.base import ROLLUPS
+from sentry.utils.cursors import Cursor
 
 from .authentication import KeyAuthentication
 from .paginator import Paginator
@@ -33,9 +34,29 @@ class Endpoint(APIView):
     renderer_classes = (JSONRenderer,)
     parser_classes = (JSONParser,)
 
+    def build_cursor_link(self, request, name, cursor):
+        querystring = u'&'.join(
+            u'{0}={1}'.format(quote(k), quote(v))
+            for k, v in request.GET.iteritems()
+            if k != 'cursor'
+        )
+        base_url = request.build_absolute_uri(request.path)
+        if querystring:
+            base_url = '{0}?{1}'.format(base_url, querystring)
+        else:
+            base_url = base_url + '?'
+
+        return LINK_HEADER.format(
+            uri=base_url,
+            cursor=str(cursor),
+            name=name,
+        )
+
     def paginate(self, request, on_results=lambda x: x, **kwargs):
-        input_cursor = request.GET.get('cursor')
         per_page = int(request.GET.get('per_page', 100))
+        input_cursor = request.GET.get('cursor')
+        if input_cursor:
+            input_cursor = Cursor.from_string(input_cursor)
 
         assert per_page <= 100
 
@@ -48,33 +69,11 @@ class Endpoint(APIView):
         # map results based on callback
         results = on_results(cursor_result.results)
 
-        links = [
-            ('previous', str(cursor_result.prev)),
-            ('next', str(cursor_result.next)),
-        ]
-
-        querystring = u'&'.join(
-            u'{0}={1}'.format(quote(k), quote(v))
-            for k, v in request.GET.iteritems()
-            if k != 'cursor'
-        )
-        base_url = request.build_absolute_uri(request.path)
-        if querystring:
-            base_url = '{0}?{1}'.format(base_url, querystring)
-        else:
-            base_url = base_url + '?'
-
-        link_values = []
-        for name, cursor in links:
-            link_values.append(LINK_HEADER.format(
-                uri=base_url,
-                cursor=cursor,
-                name=name,
-            ))
-
         headers = {}
-        if link_values:
-            headers['Link'] = ', '.join(link_values)
+        headers['Link'] = ', '.join([
+            self.build_cursor_link(request, 'previous', cursor_result.prev),
+            self.build_cursor_link(request, 'next', cursor_result.next),
+        ])
 
         return Response(results, headers=headers)
 
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 71c4a08a1d..a28c5a2ef4 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -18,6 +18,7 @@ from sentry.models import (
     Activity, Group, GroupBookmark, GroupMeta, Project, TagKey
 )
 from sentry.search.utils import parse_query
+from sentry.utils.cursors import Cursor
 from sentry.utils.dates import parse_date
 
 
@@ -100,22 +101,28 @@ class ProjectGroupIndexEndpoint(Endpoint):
         # TODO: proper pagination support
         cursor = request.GET.get('cursor')
         if cursor:
-            query_kwargs['cursor'] = cursor
+            query_kwargs['cursor'] = Cursor.from_string(cursor)
 
         query = request.GET.get('query', 'is:unresolved')
         if query is not None:
             query_kwargs.update(parse_query(query, request.user))
 
-        results = list(search.query(**query_kwargs))
+        results = search.query(**query_kwargs)
 
         GroupMeta.objects.populate_cache(results)
 
         # TODO(dcramer): we need create a public API for 'sort_value'
-        context = serialize(results, request.user)
+        context = serialize(list(results), request.user)
         for group, data in zip(results, context):
             data['sortWeight'] = group.sort_value
 
-        return Response(context)
+        headers = {}
+        headers['Link'] = ', '.join([
+            self.build_cursor_link(request, 'previous', results.prev),
+            self.build_cursor_link(request, 'next', results.next),
+        ])
+
+        return Response(context, headers=headers)
 
     def put(self, request, project_id):
         """
diff --git a/src/sentry/static/sentry/app/controllers/projectStream.js b/src/sentry/static/sentry/app/controllers/projectStream.js
index c9f7fa1e11..d4b7d002ed 100644
--- a/src/sentry/static/sentry/app/controllers/projectStream.js
+++ b/src/sentry/static/sentry/app/controllers/projectStream.js
@@ -65,17 +65,24 @@
   SentryApp.controller('ProjectStreamCtrl', [
     '$http', '$modal', '$scope', '$timeout', 'Collection', 'GroupModel', 'selectedProject',
     function($http, $modal, $scope, $timeout, Collection, GroupModel, selectedProject) {
-      var timeoutId;
+      var timeoutId,
+          pollingCursor,
+          params = app.utils.getQueryParams(),
+          endpoint = getEndpoint(selectedProject, params);
+
       var pollForChanges = function() {
-        var params = app.utils.getQueryParams();
-        var endpoint = getEndpoint(selectedProject, params);
         $http.get(endpoint)
-          .success(function(data){
-            var duration = $scope.chartDuration;
-            data = $.map(data, GroupModel);
-            angular.forEach(data, function(group){
-              group.activeChartData = group.stats[duration];
-            });
+          .success(function(data, code, headers){
+            if (data.length) {
+              var duration = $scope.chartDuration;
+              data = $.map(data, GroupModel);
+              angular.forEach(data, function(group){
+                group.activeChartData = group.stats[duration];
+              });
+
+              var links = app.utils.parseLinkHeader(headers('Link'));
+              endpoint = links.previous;
+            }
 
             $timeout(function(){
               $scope.groupList.extend(data);
diff --git a/src/sentry/static/sentry/app/utils.js b/src/sentry/static/sentry/app/utils.js
index d0ef3a7b73..aed66d0c11 100644
--- a/src/sentry/static/sentry/app/utils.js
+++ b/src/sentry/static/sentry/app/utils.js
@@ -110,6 +110,23 @@
             return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
         },
 
+        parseLinkHeader: function(header) {
+          if (header === null) {
+            return {};
+          }
+
+          var header_vals = header.split(','),
+              links = {};
+
+          $.each(header_vals, function(_, val){
+              var match = /<([^>]+)>; rel="([^"]+)"/g.exec(val);
+
+              links[match[2]] = match[1];
+          });
+
+          return links;
+        },
+
         getSearchUsersUrl: function(){
             return appConfig.urlPrefix + '/api/' + appConfig.selectedTeam.slug + '/users/search/';
         },
diff --git a/src/sentry/utils/cursors.py b/src/sentry/utils/cursors.py
index cf223fccc6..06f0f85d9d 100644
--- a/src/sentry/utils/cursors.py
+++ b/src/sentry/utils/cursors.py
@@ -25,6 +25,10 @@ class Cursor(object):
         return '<%s: value=%s offset=%s is_prev=%s>' % (
             type(self), self.value, self.offset, int(self.is_prev))
 
+    @classmethod
+    def from_string(cls, value):
+        return cls(*value.split(':'))
+
 
 class CursorResult(Sequence):
     def __init__(self, results, next, prev, has_next=None, has_prev=None):
