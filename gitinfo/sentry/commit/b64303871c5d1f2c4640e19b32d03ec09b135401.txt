commit b64303871c5d1f2c4640e19b32d03ec09b135401
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Feb 25 16:20:17 2020 -0800

    ref(ui): Refactor/fix `<RuleNode>` to not trigger side effects during update (#17278)
    
    I was initially trying to just fix some `console.error` during test and then found a React warning about triggering side effects during updates (e.g. setState inside of a `render()`). I did not know what was causing this as we definitely do not `setState()` in render. I ended up ~making a few components `PureComponents` and the necessary~ refactoring of props that were passed inline functions.
    
    The actual problem was that in `RuleNode`, where we create components based on the backend field configuration, if we add a field that has an initial value (or is a select field with choices), it will call the `onPropertyChange` callback and trigger a sideeffect (`setState()`) that throws this warning. Moved that logic into the `onAddRow` handler instead.

diff --git a/src/sentry/static/sentry/app/types/alerts.tsx b/src/sentry/static/sentry/app/types/alerts.tsx
index 7cdfcf224a..f5da9b7b9e 100644
--- a/src/sentry/static/sentry/app/types/alerts.tsx
+++ b/src/sentry/static/sentry/app/types/alerts.tsx
@@ -1,3 +1,21 @@
+export type IssueAlertRuleFormField =
+  | {
+      type: 'choice';
+      choices?: [string, string][];
+      initial?: string;
+      placeholder?: string;
+    }
+  | {
+      type: 'string';
+      initial?: string;
+      placeholder?: string;
+    }
+  | {
+      type: 'number';
+      placeholder?: number | string;
+      initial?: string;
+    };
+
 /**
  * These templates that tell the UI how to render the action or condition
  * and what fields it needs
@@ -7,20 +25,7 @@ export type IssueAlertRuleActionTemplate = {
   label: string;
   enabled: boolean;
   formFields?: {
-    [key: string]:
-      | {
-          type: 'choice';
-          choices: [string, string][];
-          placeholder?: string;
-        }
-      | {
-          type: 'string';
-          placeholder?: string;
-        }
-      | {
-          type: 'number';
-          placeholder?: number | string;
-        };
+    [key: string]: IssueAlertRuleFormField;
   };
 };
 export type IssueAlertRuleConditionTemplate = IssueAlertRuleActionTemplate;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index 17ccaf2e5d..c3ff6cb078 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -213,54 +213,80 @@ class IssueRuleEditor extends AsyncView<Props, State> {
     });
   };
 
-  handlePropertyChange = (type: ConditionOrAction) => {
-    return (idx: number) => {
-      return (prop: string, val: string) => {
-        this.setState(state => {
-          const rule = {...state.rule} as IssueAlertRule;
-          rule[type][idx][prop] = val;
-          return {rule};
-        });
-      };
-    };
+  handlePropertyChange = (
+    type: ConditionOrAction,
+    idx: number,
+    prop: string,
+    val: string
+  ) => {
+    this.setState(state => {
+      const rule = {...state.rule} as IssueAlertRule;
+      rule[type][idx][prop] = val;
+      return {rule};
+    });
   };
 
-  handleAddRow = (type: ConditionOrAction) => {
-    return id => {
-      this.setState(state => {
-        const rule = {
-          ...state.rule,
-          [type]: [...(state.rule ? state.rule[type] : []), {id}],
-        } as IssueAlertRule;
-
-        return {
-          rule,
-        };
-      });
-    };
+  handleAddRow = (type: ConditionOrAction, id: string) => {
+    this.setState(state => {
+      const configuration = this.state.configs?.[type]?.find(c => c.id === id);
+
+      // Set initial configuration
+      const initialValue = configuration?.formFields
+        ? Object.fromEntries(
+            Object.entries(configuration.formFields)
+              // TODO(ts): Doesn't work if I cast formField as IssueAlertRuleFormField
+              .map(([key, formField]: [string, any]) => [
+                key,
+                formField?.initial ?? formField?.choices?.[0]?.[0],
+              ])
+              .filter(([, initial]) => !!initial)
+          )
+        : {};
+      const newRule = {
+        id,
+        ...initialValue,
+      };
+
+      const rule = {
+        ...state.rule,
+        [type]: [...(state.rule ? state.rule[type] : []), newRule],
+      } as IssueAlertRule;
+
+      return {
+        rule,
+      };
+    });
   };
 
-  handleDeleteRow = (type: ConditionOrAction) => {
-    return (idx: number) => {
-      this.setState(prevState => {
-        const newTypeList = prevState.rule ? [...prevState.rule[type]] : [];
+  handleDeleteRow = (type: ConditionOrAction, idx: number) => {
+    this.setState(prevState => {
+      const newTypeList = prevState.rule ? [...prevState.rule[type]] : [];
 
-        if (prevState.rule) {
-          newTypeList.splice(idx, 1);
-        }
+      if (prevState.rule) {
+        newTypeList.splice(idx, 1);
+      }
 
-        const rule = {
-          ...prevState.rule,
-          [type]: newTypeList,
-        } as IssueAlertRule;
+      const rule = {
+        ...prevState.rule,
+        [type]: newTypeList,
+      } as IssueAlertRule;
 
-        return {
-          rule,
-        };
-      });
-    };
+      return {
+        rule,
+      };
+    });
   };
 
+  handleAddCondition = (id: string) => this.handleAddRow('conditions', id);
+  handleAddAction = (id: string) => this.handleAddRow('actions', id);
+  handleDeleteCondition = (ruleIndex: number) =>
+    this.handleDeleteRow('conditions', ruleIndex);
+  handleDeleteAction = (ruleIndex: number) => this.handleDeleteRow('actions', ruleIndex);
+  handleChangeConditionProperty = (ruleIndex: number, prop: string, val: string) =>
+    this.handlePropertyChange('conditions', ruleIndex, prop, val);
+  handleChangeActionProperty = (ruleIndex: number, prop: string, val: string) =>
+    this.handlePropertyChange('actions', ruleIndex, prop, val);
+
   renderLoading() {
     return this.renderBody();
   }
@@ -370,9 +396,9 @@ class IssueRuleEditor extends AsyncView<Props, State> {
                   nodes={this.state.configs?.conditions ?? null}
                   items={conditions || []}
                   placeholder={t('Add a condition...')}
-                  onPropertyChange={this.handlePropertyChange('conditions')}
-                  onAddRow={this.handleAddRow('conditions')}
-                  onDeleteRow={this.handleDeleteRow('conditions' as const)}
+                  onPropertyChange={this.handleChangeConditionProperty}
+                  onAddRow={this.handleAddCondition}
+                  onDeleteRow={this.handleDeleteCondition}
                 />
               </PanelRuleItem>
 
@@ -389,9 +415,9 @@ class IssueRuleEditor extends AsyncView<Props, State> {
                   nodes={this.state.configs?.actions ?? null}
                   items={actions || []}
                   placeholder={t('Add an action...')}
-                  onPropertyChange={this.handlePropertyChange('actions')}
-                  onAddRow={this.handleAddRow('actions')}
-                  onDeleteRow={this.handleDeleteRow('actions')}
+                  onPropertyChange={this.handleChangeActionProperty}
+                  onAddRow={this.handleAddAction}
+                  onDeleteRow={this.handleDeleteAction}
                 />
               </PanelRuleItem>
             </PanelBody>
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
index fa55188abc..53a5a2b0fc 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
@@ -21,17 +21,23 @@ type FormField = {
 };
 
 type Props = {
+  index: number;
   node?: IssueAlertRuleActionTemplate | IssueAlertRuleConditionTemplate | null;
   data?: IssueAlertRuleAction | IssueAlertRuleCondition;
-  onDelete: () => void;
-  onPropertyChange: (name: string, value: string) => void;
+  onDelete: (rowIndex: number) => void;
+  onPropertyChange: (rowIndex: number, name: string, value: string) => void;
 };
 
 class RuleNode extends React.Component<Props> {
+  handleDelete = () => {
+    const {index, onDelete} = this.props;
+    onDelete(index);
+  };
+
   getChoiceField = (name: string, fieldConfig: FormField) => {
     // Select the first item on this list
     // If it's not yet defined, call onPropertyChange to make sure the value is set on state
-    const {data, onPropertyChange} = this.props;
+    const {data, index, onPropertyChange} = this.props;
     let initialVal;
 
     if (data) {
@@ -41,7 +47,6 @@ class RuleNode extends React.Component<Props> {
         } else {
           initialVal = fieldConfig.choices[0][0];
         }
-        onPropertyChange(name, initialVal);
       } else {
         initialVal = data[name];
       }
@@ -68,13 +73,13 @@ class RuleNode extends React.Component<Props> {
           }),
         }}
         choices={choices}
-        onChange={({value}) => this.props.onPropertyChange(name, value)}
+        onChange={({value}) => onPropertyChange(index, name, value)}
       />
     );
   };
 
   getTextField = (name: string, fieldConfig: FormField) => {
-    const {data, onPropertyChange} = this.props;
+    const {data, index, onPropertyChange} = this.props;
 
     return (
       <InlineInput
@@ -83,14 +88,14 @@ class RuleNode extends React.Component<Props> {
         value={(data && data[name]) ?? ''}
         placeholder={`${fieldConfig.placeholder}`}
         onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
-          onPropertyChange(name, e.target.value)
+          onPropertyChange(index, name, e.target.value)
         }
       />
     );
   };
 
   getNumberField = (name: string, fieldConfig: FormField) => {
-    const {data, onPropertyChange} = this.props;
+    const {data, index, onPropertyChange} = this.props;
 
     return (
       <InlineInput
@@ -99,7 +104,7 @@ class RuleNode extends React.Component<Props> {
         value={(data && data[name]) ?? ''}
         placeholder={`${fieldConfig.placeholder}`}
         onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
-          onPropertyChange(name, e.target.value)
+          onPropertyChange(index, name, e.target.value)
         }
       />
     );
@@ -123,9 +128,9 @@ class RuleNode extends React.Component<Props> {
 
     const {label, formFields} = node;
 
-    const parts = label.split(/({\w+})/).map(part => {
+    const parts = label.split(/({\w+})/).map((part, i) => {
       if (!/^{\w+}$/.test(part)) {
-        return <Separator>{part}</Separator>;
+        return <Separator key={i}>{part}</Separator>;
       }
 
       const key = part.slice(1, -1);
@@ -157,7 +162,7 @@ class RuleNode extends React.Component<Props> {
   }
 
   render() {
-    const {data, onDelete} = this.props;
+    const {data} = this.props;
 
     return (
       <RuleRow>
@@ -165,7 +170,7 @@ class RuleNode extends React.Component<Props> {
         {this.renderRow()}
         <DeleteButton
           label={t('Delete Node')}
-          onClick={onDelete}
+          onClick={this.handleDelete}
           type="button"
           size="small"
           icon="icon-trash"
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
index 22f1977f05..6eb486c2ac 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
@@ -22,10 +22,9 @@ type Props = {
   // Placeholder for select control
   placeholder: string;
 
-  onPropertyChange: (ruleIndex: number) => (prop: string, val: string) => void;
+  onPropertyChange: (ruleIndex: number, prop: string, val: string) => void;
 
-  // TODO(ts): Type value
-  onAddRow: (value: unknown) => void;
+  onAddRow: (value: string) => void;
 
   onDeleteRow: (ruleIndex: number) => void;
 };
@@ -69,10 +68,11 @@ class RuleNodeList extends React.Component<Props> {
               return (
                 <RuleNode
                   key={idx}
+                  index={idx}
                   node={this.getNode(item.id)}
-                  onDelete={() => onDeleteRow(idx)}
+                  onDelete={onDeleteRow}
                   data={item}
-                  onPropertyChange={onPropertyChange(idx)}
+                  onPropertyChange={onPropertyChange}
                 />
               );
             })}
