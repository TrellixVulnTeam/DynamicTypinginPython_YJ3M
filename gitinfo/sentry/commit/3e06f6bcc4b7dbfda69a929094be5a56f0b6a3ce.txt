commit 3e06f6bcc4b7dbfda69a929094be5a56f0b6a3ce
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jan 2 11:54:08 2018 -0800

    feat: Add update method for user notification (#6835)

diff --git a/src/sentry/api/endpoints/user_notification_details.py b/src/sentry/api/endpoints/user_notification_details.py
index 929a41b299..b65be97a9e 100644
--- a/src/sentry/api/endpoints/user_notification_details.py
+++ b/src/sentry/api/endpoints/user_notification_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from collections import defaultdict
 
 from sentry.api.bases.user import UserEndpoint
@@ -9,12 +11,34 @@ from sentry.api.serializers import serialize, Serializer
 
 from rest_framework.response import Response
 
-USER_OPTION_DEFAULTS = {
-    'deploy-emails': UserOptionValue.committed_deploys_only,  # '3'
-    'self_notifications': UserOptionValue.all_conversations,  # '0'
-    'self_assign_issue': UserOptionValue.all_conversations,  # '0'
-    'subscribe_by_default': UserOptionValue.participating_only,  # '1'
-    'workflow:notifications': UserOptionValue.all_conversations,  # '0
+from rest_framework import serializers
+
+USER_OPTION_SETTINGS = {
+    'deployNotifications': {
+        'key': 'deploy-emails',
+        'default': UserOptionValue.committed_deploys_only,  # '3'
+        'type': int,
+    },
+    'personalActivityNotifications': {
+        'key': 'self_notifications',
+        'default': UserOptionValue.all_conversations,  # '0'
+        'type': bool,
+    },
+    'selfAssignOnResolve': {
+        'key': 'self_assign_issue',
+        'default': UserOptionValue.all_conversations,  # '0'
+        'type': bool,
+    },
+    'subscribeByDefault': {
+        'key': 'subscribe_by_default',
+        'default': UserOptionValue.participating_only,  # '1'
+        'type': bool,
+    },
+    'workflowNotifications': {
+        'key': 'workflow:notifications',
+        'default': UserOptionValue.all_conversations,  # '0'
+        'type': int,
+    }
 }
 
 
@@ -36,20 +60,40 @@ class UserNotificationsSerializer(Serializer):
         raw_data = {option.key: option.value for option in attrs}
 
         data = {}
-        for key in USER_OPTION_DEFAULTS:
-            data[key] = raw_data.get(key, USER_OPTION_DEFAULTS[key])
+        for key in USER_OPTION_SETTINGS:
+            uo = USER_OPTION_SETTINGS[key]
+            val = raw_data.get(uo['key'], uo['default'])
+            if (uo['type'] == bool):
+                data[key] = bool(int(val))  # '1' is true, '0' is false
+            elif (uo['type'] == int):
+                data[key] = int(val)
+
+        return data
+
 
-        # for the boolean values, '1' is true, '0' is false
-        return {
-            'deployNotifications': int(data.get('deploy-emails')),
-            'personalActivityNotifications': bool(int(data.get('self_notifications'))),
-            'selfAssignOnResolve': bool(int(data.get('self_assign_issue'))),
-            'subscribeByDefault': bool(int(data.get('subscribe_by_default'))),
-            'workflowNotifications': int(data.get('workflow:notifications'))
-        }
+class UserNotificationDetailsSerializer(serializers.Serializer):
+    deployNotifications = serializers.IntegerField(required=False, min_value=2, max_value=4)
+    personalActivityNotifications = serializers.BooleanField(required=False)
+    selfAssignOnResolve = serializers.BooleanField(required=False)
+    subscribeByDefault = serializers.BooleanField(required=False)
+    workflowNotifications = serializers.IntegerField(required=False, min_value=0, max_value=2)
 
 
 class UserNotificationDetailsEndpoint(UserEndpoint):
     def get(self, request, user):
         serialized = serialize(user, request.user, UserNotificationsSerializer())
         return Response(serialized)
+
+    def put(self, request, user):
+        serializer = UserNotificationDetailsSerializer(data=request.DATA)
+
+        if serializer.is_valid():
+            for key in serializer.object:
+                db_key = USER_OPTION_SETTINGS[key]['key']
+                val = six.text_type(int(serializer.object[key]))
+                (uo, created) = UserOption.objects.get_or_create(user=user, key=db_key, project=None)
+                uo.update(value=val)
+
+            return self.get(request, user)
+        else:
+            return Response(serializer.errors, status=400)
diff --git a/tests/sentry/api/endpoints/test_user_notification_details.py b/tests/sentry/api/endpoints/test_user_notification_details.py
index c1995ca0ba..609eead9a9 100644
--- a/tests/sentry/api/endpoints/test_user_notification_details.py
+++ b/tests/sentry/api/endpoints/test_user_notification_details.py
@@ -5,7 +5,7 @@ from sentry.testutils import APITestCase
 from django.core.urlresolvers import reverse
 
 
-class UserListTest(APITestCase):
+class UserNotificationDetailsTest(APITestCase):
     def test_lookup_self(self):
         user = self.create_user(email='a@example.com')
 
@@ -68,3 +68,43 @@ class UserListTest(APITestCase):
         assert resp.data.get('selfAssignOnResolve') is False
         assert resp.data.get('subscribeByDefault') is True
         assert resp.data.get('workflowNotifications') == 0
+
+    def test_saves_and_returns_values(self):
+        user = self.create_user(email='a@example.com')
+        self.login_as(user=user)
+
+        url = reverse(
+            'sentry-api-0-user-notifications', kwargs={
+                'user_id': 'me',
+            }
+        )
+
+        resp = self.client.put(url, format='json', data={
+            'deployNotifications': 2,
+            'personalActivityNotifications': True,
+            'selfAssignOnResolve': True
+        })
+
+        assert resp.status_code == 200
+
+        assert resp.data.get('deployNotifications') == 2
+        assert resp.data.get('personalActivityNotifications') is True
+        assert resp.data.get('selfAssignOnResolve') is True
+        assert resp.data.get('subscribeByDefault') is True
+        assert resp.data.get('workflowNotifications') == 0
+
+    def test_reject_invalid_values(self):
+        user = self.create_user(email='a@example.com')
+        self.login_as(user=user)
+
+        url = reverse(
+            'sentry-api-0-user-notifications', kwargs={
+                'user_id': 'me',
+            }
+        )
+
+        resp = self.client.put(url, format='json', data={
+            'deployNotifications': 6
+        })
+
+        assert resp.status_code == 400
