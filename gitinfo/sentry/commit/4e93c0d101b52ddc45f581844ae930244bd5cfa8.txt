commit 4e93c0d101b52ddc45f581844ae930244bd5cfa8
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Fri May 12 10:14:06 2017 -0700

    prevent people from creating blank release versions fixes SENTRY-3C0 (#5382)
    
    * prevent people from creating blank release versions fixes SENTRY-3C0
    
    * simplify validation method

diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index bd466dc5e9..d0046ff273 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -54,7 +54,7 @@ class ReleaseSerializer(serializers.Serializer):
 
     def validate_version(self, attrs, source):
         value = attrs[source]
-        if any(c in value for c in BAD_RELEASE_CHARS) or value in ('.', '..'):
+        if not Release.is_valid_version(value):
             raise serializers.ValidationError('Invalid value for release')
         return attrs
 
diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index 6577c524e4..dd938ebb9a 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -49,3 +49,7 @@ class PluginIdentityRequired(PluginError):
 
 class InvalidIdentity(Exception):
     pass
+
+
+class HookValidationError(Exception):
+    pass
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 11d18a6d83..f742b0427f 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -26,6 +26,7 @@ logger = logging.getLogger(__name__)
 
 _sha1_re = re.compile(r'^[a-f0-9]{40}$')
 _dotted_path_prefix_re = re.compile(r'^([a-z][a-z0-9-]+)(\.[a-z][a-z0-9-]+)+-')
+BAD_RELEASE_CHARS = '\n\f\t/'
 
 
 class ReleaseProject(Model):
@@ -73,6 +74,10 @@ class Release(Model):
 
     __repr__ = sane_repr('organization', 'version')
 
+    @staticmethod
+    def is_valid_version(value):
+        return not (any(c in value for c in BAD_RELEASE_CHARS) or value in ('.', '..') or not value)
+
     @classmethod
     def get_cache_key(cls, organization_id, version):
         return 'release:3:%s:%s' % (organization_id, md5_text(version).hexdigest())
diff --git a/src/sentry/plugins/interfaces/releasehook.py b/src/sentry/plugins/interfaces/releasehook.py
index 2ad17cf15b..0941b90ed4 100644
--- a/src/sentry/plugins/interfaces/releasehook.py
+++ b/src/sentry/plugins/interfaces/releasehook.py
@@ -13,6 +13,7 @@ __all__ = ['ReleaseHook']
 from django.db import IntegrityError, transaction
 from django.utils import timezone
 
+from sentry.exceptions import HookValidationError
 from sentry.models import Activity, Release
 
 
@@ -21,6 +22,9 @@ class ReleaseHook(object):
         self.project = project
 
     def start_release(self, version, **values):
+        if not Release.is_valid_version(version):
+            raise HookValidationError('Invalid release version: %s' % version)
+
         try:
             with transaction.atomic():
                 release = Release.objects.create(
@@ -46,6 +50,9 @@ class ReleaseHook(object):
 
         Calling this method will remove all existing commit history.
         """
+        if not Release.is_valid_version(version):
+            raise HookValidationError('Invalid release version: %s' % version)
+
         project = self.project
         try:
             with transaction.atomic():
@@ -66,6 +73,8 @@ class ReleaseHook(object):
         pass
 
     def finish_release(self, version, **values):
+        if not Release.is_valid_version(version):
+            raise HookValidationError('Invalid release version: %s' % version)
 
         values.setdefault('date_released', timezone.now())
         try:
diff --git a/src/sentry/web/frontend/release_webhook.py b/src/sentry/web/frontend/release_webhook.py
index 8fadae1a99..4c2092152f 100644
--- a/src/sentry/web/frontend/release_webhook.py
+++ b/src/sentry/web/frontend/release_webhook.py
@@ -13,6 +13,7 @@ from django.utils.crypto import constant_time_compare
 from django.utils.decorators import method_decorator
 
 from sentry.api import client
+from sentry.exceptions import HookValidationError
 from sentry.models import ApiKey, Project, ProjectOption
 from sentry.plugins import plugins
 from sentry.utils import json
@@ -96,6 +97,13 @@ class ReleaseWebhookView(View):
 
         cls = plugin.get_release_hook()
         hook = cls(project)
-        hook.handle(request)
+        try:
+            hook.handle(request)
+        except HookValidationError as exc:
+            return HttpResponse(
+                status=400,
+                content=json.dumps({'error': six.text_type(exc)}),
+                content_type='application/json',
+            )
 
         return HttpResponse(status=204)
diff --git a/tests/sentry/plugins/interfaces/test_releasehook.py b/tests/sentry/plugins/interfaces/test_releasehook.py
index 126e95c026..5fe316fe7e 100644
--- a/tests/sentry/plugins/interfaces/test_releasehook.py
+++ b/tests/sentry/plugins/interfaces/test_releasehook.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import, print_function
 
 __all__ = ['ReleaseHook']
 
+from sentry.exceptions import HookValidationError
 from sentry.models import Commit, Release, ReleaseProject
 from sentry.plugins import ReleaseHook
 from sentry.testutils import TestCase
@@ -30,6 +31,40 @@ class StartReleaseTest(TestCase):
         assert release.organization
         assert ReleaseProject.objects.get(release=release, project=project)
 
+    def test_bad_version(self):
+        project = self.create_project()
+        hook = ReleaseHook(project)
+
+        version = ''
+        with self.assertRaises(HookValidationError):
+            hook.start_release(version)
+
+        with self.assertRaises(HookValidationError):
+            hook.finish_release(version)
+
+        with self.assertRaises(HookValidationError):
+            hook.set_commits(version, [])
+
+        version = '.'
+        with self.assertRaises(HookValidationError):
+            hook.start_release(version)
+
+        with self.assertRaises(HookValidationError):
+            hook.finish_release(version)
+
+        with self.assertRaises(HookValidationError):
+            hook.set_commits(version, [])
+
+        version = '..'
+        with self.assertRaises(HookValidationError):
+            hook.start_release(version)
+
+        with self.assertRaises(HookValidationError):
+            hook.finish_release(version)
+
+        with self.assertRaises(HookValidationError):
+            hook.set_commits(version, [])
+
     def test_update_release(self):
         project = self.create_project()
         version = 'bbee5b51f84611e4b14834363b8514c2'
