commit 0e140377280b312a12604b596b650b2e614769aa
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Apr 15 11:51:37 2019 -0700

    ref(app-platform): New 'Open In' UI  (#12621)
    
    * new link interface
    
    * add SentryAppComponentsStore
    
    * use components store in external issue list

diff --git a/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.jsx b/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.jsx
new file mode 100644
index 0000000000..cb520827f0
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.jsx
@@ -0,0 +1,9 @@
+import SentryAppComponentsActions from 'app/actions/sentryAppComponentActions';
+
+export function fetchSentryAppComponents(api, orgSlug, projectId) {
+  const componentsUri = `/organizations/${orgSlug}/sentry-app-components/?projectId=${projectId}`;
+
+  const promise = api.requestPromise(componentsUri);
+  promise.then(res => SentryAppComponentsActions.loadComponents(res));
+  return promise;
+}
diff --git a/src/sentry/static/sentry/app/actions/sentryAppComponentActions.jsx b/src/sentry/static/sentry/app/actions/sentryAppComponentActions.jsx
new file mode 100644
index 0000000000..6607829a96
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/sentryAppComponentActions.jsx
@@ -0,0 +1,3 @@
+import Reflux from 'reflux';
+
+export default Reflux.createActions(['loadComponents']);
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
index d3c4d0460c..c5e0f1036b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
@@ -1,27 +1,28 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import SentryTypes from 'app/sentryTypes';
+import classNames from 'classnames';
 import {defined} from 'app/utils';
-import OpenInButton from 'app/components/events/interfaces/openInButton';
+import styled from 'react-emotion';
 
-const ContextLine = function(props) {
-  const {line, isActive, filename, group} = props;
-  let liClassName = 'expandable';
-  if (isActive) {
-    liClassName += ' active';
-  }
+const Context = styled('div')`
+  display: inline;
+`;
 
+const ContextLine = function(props) {
+  const {line, isActive, className} = props;
   let lineWs = '';
   let lineCode = '';
   if (defined(line[1]) && line[1].match) {
     [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
   }
-
+  const Component = !props.children ? React.Fragment : Context;
   return (
-    <li className={liClassName} key={line[0]}>
-      <span className="ws">{lineWs}</span>
-      <span className="contextline">{lineCode}</span>
-      {isActive && <OpenInButton filename={filename} lineNo={line[0]} group={group} />}
+    <li className={classNames(className, 'expandable', {active: isActive})} key={line[0]}>
+      <Component>
+        <span className="ws">{lineWs}</span>
+        <span className="contextline">{lineCode}</span>
+      </Component>
+      {props.children}
     </li>
   );
 };
@@ -29,8 +30,6 @@ const ContextLine = function(props) {
 ContextLine.propTypes = {
   line: PropTypes.array.isRequired,
   isActive: PropTypes.bool,
-  filename: PropTypes.string,
-  group: SentryTypes.Group,
 };
 
 export default ContextLine;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 60bb4acbdc..622300bf53 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,10 +1,9 @@
 import PropTypes from 'prop-types';
-import SentryTypes from 'app/sentryTypes';
 import React from 'react';
 import _ from 'lodash';
 import classNames from 'classnames';
 import createReactClass from 'create-react-class';
-import styled from 'react-emotion';
+import styled, {css} from 'react-emotion';
 
 import {defined, objectIsEmpty, isUrl} from 'app/utils';
 import {t} from 'app/locale';
@@ -16,6 +15,8 @@ import FrameVariables from 'app/components/events/interfaces/frameVariables';
 import StrictClick from 'app/components/strictClick';
 import Tooltip from 'app/components/tooltip';
 import Truncate from 'app/components/truncate';
+import OpenInContextLine from 'app/components/events/interfaces/openInContextLine';
+import SentryAppComponentsStore from 'app/stores/sentryAppComponentsStore';
 import space from 'app/styles/space';
 
 export function trimPackage(pkg) {
@@ -37,7 +38,6 @@ const Frame = createReactClass({
     isOnlyFrame: PropTypes.bool,
     timesRepeated: PropTypes.number,
     registers: PropTypes.objectOf(PropTypes.string.isRequired),
-    group: SentryTypes.Group,
   },
 
   getDefaultProps() {
@@ -126,6 +126,10 @@ const Frame = createReactClass({
     evt.stopPropagation();
   },
 
+  getSentryAppComponents() {
+    return SentryAppComponentsStore.getComponentByType('stacktrace-link');
+  },
+
   renderDefaultTitle() {
     const data = this.props.data;
     const title = [];
@@ -236,7 +240,6 @@ const Frame = createReactClass({
 
   renderContext() {
     const data = this.props.data;
-    const group = this.props.group;
     let context = '';
     const {isExpanded} = this.state;
 
@@ -266,14 +269,36 @@ const Frame = createReactClass({
 
           {data.context &&
             contextLines.map((line, index) => {
+              const isActive = data.lineNo === line[0];
+              const components = this.getSentryAppComponents();
+              const hasComponents = isActive && components.length > 0;
+              const className = hasComponents
+                ? css`
+                    background: inherit;
+                    padding: 0;
+                    text-indent: 20px;
+                    z-index: 1000;
+                  `
+                : css`
+                    background: inherit;
+                    padding: 0 20px;
+                  `;
               return (
                 <ContextLine
                   key={index}
                   line={line}
-                  isActive={data.lineNo === line[0]}
-                  filename={data.filename}
-                  group={group}
-                />
+                  isActive={isActive}
+                  className={className}
+                >
+                  {hasComponents && (
+                    <OpenInContextLine
+                      key={index}
+                      lineNo={line[0]}
+                      filename={data.filename}
+                      components={components}
+                    />
+                  )}
+                </ContextLine>
               );
             })}
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx b/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx
deleted file mode 100644
index a695bb99ab..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx
+++ /dev/null
@@ -1,103 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import SentryTypes from 'app/sentryTypes';
-import Button from 'app/components/button';
-import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
-import styled from 'react-emotion';
-import {t} from 'app/locale';
-
-import withApi from 'app/utils/withApi';
-import withLatestContext from 'app/utils/withLatestContext';
-
-class OpenInButton extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization,
-    lineNo: PropTypes.number,
-    filename: PropTypes.string,
-    group: SentryTypes.Group,
-  };
-
-  constructor(props) {
-    super(props);
-    this.state = {
-      loading: false,
-      error: false,
-      components: [],
-    };
-  }
-
-  componentWillMount() {
-    this.fetchIssueLinkComponents();
-  }
-
-  fetchIssueLinkComponents() {
-    const {api, organization, group} = this.props;
-    const hasOrganization = !!organization;
-    const hasSentryApps =
-      hasOrganization && new Set(organization.features).has('sentry-apps');
-
-    if (hasSentryApps && group && group.project && group.project.id) {
-      api
-        .requestPromise(
-          `/organizations/${
-            organization.slug
-          }/sentry-app-components/?filter=stacktrace-link&projectId=${group.project.id}`
-        )
-        .then(data => {
-          if (data.length) {
-            this.setState({components: data});
-          }
-        })
-        .catch(error => {
-          return;
-        });
-    }
-  }
-
-  getUrl() {
-    const {components} = this.state;
-    const {filename, lineNo} = this.props;
-
-    const queryParams = {
-      lineNo,
-      filename,
-    };
-    return addQueryParamsToExistingUrl(components[0].schema.url, queryParams);
-  }
-
-  render() {
-    const {components} = this.state;
-    if (!components.length) {
-      return null;
-    }
-
-    const url = this.getUrl();
-    return (
-      <StyledButtonContainer>
-        <StyledButton href={url} size="small" priority="primary">
-          {t(`Debug In ${components[0].sentryApp.name}`)}
-        </StyledButton>
-      </StyledButtonContainer>
-    );
-  }
-}
-
-export {OpenInButton};
-const OpenInButtonComponent = withLatestContext(OpenInButton);
-export default withApi(OpenInButtonComponent);
-
-const StyledButtonContainer = styled('div')`
-  height: 0;
-  position: relative;
-`;
-
-const StyledButton = styled(Button)`
-  position: absolute;
-  z-index: ${p => p.theme.zIndex.header};
-  height: 36px;
-  line-height: 1.5;
-  padding: 0px 5px;
-  top: -31px;
-  right: 30px;
-`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/openInContextLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/openInContextLine.jsx
new file mode 100644
index 0000000000..e44040f1e5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/openInContextLine.jsx
@@ -0,0 +1,77 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import SentryAppIcon from 'app/components/sentryAppIcon';
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
+import styled from 'react-emotion';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+
+class OpenInContextLine extends React.Component {
+  static propTypes = {
+    lineNo: PropTypes.number,
+    filename: PropTypes.string,
+    components: PropTypes.array,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      loading: false,
+      error: false,
+    };
+  }
+
+  getUrl() {
+    const {filename, lineNo, components} = this.props;
+
+    const queryParams = {
+      lineNo,
+      filename,
+    };
+    return addQueryParamsToExistingUrl(components[0].schema.url, queryParams);
+  }
+
+  render() {
+    const {components} = this.props;
+    const url = this.getUrl();
+    return (
+      <OpenInContainer>
+        <span>{t('Open this line in:')}</span>
+        <OpenInLink data-test-id="stacktrace-link" href={url}>
+          <OpenInIcon slug={components[0].sentryApp.slug} />
+          <OpenInName>{t(`${components[0].sentryApp.name}`)}</OpenInName>
+        </OpenInLink>
+      </OpenInContainer>
+    );
+  }
+}
+
+export default OpenInContextLine;
+
+const OpenInContainer = styled('div')`
+  font-family: ${p => p.theme.text.family};
+  font-size: 13px;
+  padding: 3px;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  background-color: white;
+  color: ${p => p.theme.purple2};
+  box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);
+`;
+
+const OpenInIcon = styled(SentryAppIcon)`
+  vertical-align: text-top;
+  height: 15px;
+  width: 15px;
+  margin-left: ${space(1)};
+`;
+
+const OpenInLink = styled('a')`
+  color: ${p => p.theme.gray2};
+  cursor: pointer;
+`;
+
+const OpenInName = styled('span')`
+  font-weight: bold;
+  color: ${p => p.theme.gray3};
+  margin-left: 5px;
+`;
diff --git a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
index f33c2c3b7d..66d09a0cde 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
@@ -13,6 +13,7 @@ import PluginActions from 'app/components/group/pluginActions';
 import {Box} from 'grid-emotion';
 import {t} from 'app/locale';
 import SentryAppInstallationStore from 'app/stores/sentryAppInstallationsStore';
+import SentryAppComponentsStore from 'app/stores/sentryAppComponentsStore';
 import ExternalIssueStore from 'app/stores/externalIssueStore';
 
 class ExternalIssueList extends AsyncComponent {
@@ -45,6 +46,7 @@ class ExternalIssueList extends AsyncComponent {
     this.unsubscribables = [
       SentryAppInstallationStore.listen(this.onSentryAppInstallationChange),
       ExternalIssueStore.listen(this.onExternalIssueChange),
+      SentryAppComponentsStore.listen(this.onSentryAppComponentsChange),
     ];
 
     this.fetchSentryAppData();
@@ -63,6 +65,11 @@ class ExternalIssueList extends AsyncComponent {
     this.setState({externalIssues});
   };
 
+  onSentryAppComponentsChange = sentryAppComponents => {
+    const components = sentryAppComponents.filter(c => c.type == 'issue-link');
+    this.setState({components});
+  };
+
   // We want to do this explicitly so that we can handle errors gracefully,
   // instead of the entire component not rendering.
   //
@@ -71,7 +78,7 @@ class ExternalIssueList extends AsyncComponent {
   // control over those services.
   //
   fetchSentryAppData() {
-    const {api, orgId, group, project, organization} = this.props;
+    const {api, group, project, organization} = this.props;
 
     if (project && project.id && organization) {
       const features = new Set(organization.features);
@@ -80,19 +87,6 @@ class ExternalIssueList extends AsyncComponent {
         return;
       }
 
-      api
-        .requestPromise(
-          `/organizations/${orgId}/sentry-app-components/?filter=issue-link&projectId=${
-            project.id
-          }`
-        )
-        .then(data => {
-          this.setState({components: data});
-        })
-        .catch(error => {
-          return;
-        });
-
       api
         .requestPromise(`/groups/${group.id}/external-issues/`)
         .then(data => {
@@ -126,13 +120,12 @@ class ExternalIssueList extends AsyncComponent {
   renderSentryAppIssues() {
     const {externalIssues, sentryAppInstallations, components} = this.state;
     const {group} = this.props;
-    const issueLinkComponents = components.filter(c => c.type === 'issue-link');
 
-    if (issueLinkComponents.length == 0) {
+    if (components.length == 0) {
       return null;
     }
 
-    return issueLinkComponents.map(component => {
+    return components.map(component => {
       const {sentryApp} = component;
 
       const installation = sentryAppInstallations.find(
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
index 383944e295..5914aa5557 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
@@ -6,7 +6,8 @@ import styled from 'react-emotion';
 import withApi from 'app/utils/withApi';
 import InlineSvg from 'app/components/inlineSvg';
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
-import {IntegrationLink, IntegrationIcon} from 'app/components/issueSyncListElement';
+import {IntegrationLink} from 'app/components/issueSyncListElement';
+import SentryAppIcon from 'app/components/sentryAppIcon';
 import SentryAppExternalIssueForm from 'app/components/group/sentryAppExternalIssueForm';
 import NavTabs from 'app/components/navTabs';
 import {t, tct} from 'app/locale';
@@ -88,22 +89,12 @@ class SentryAppExternalIssueActions extends React.Component {
     this.hideModal();
   };
 
-  iconExists() {
-    try {
-      require(`../../icons/icon-${this.props.sentryAppComponent.sentryApp.slug}.svg`);
-      return true;
-    } catch (err) {
-      return false;
-    }
-  }
-
   get link() {
     const {sentryAppComponent} = this.props;
     const {externalIssue} = this.state;
     const name = sentryAppComponent.sentryApp.name;
 
     let url = '#';
-    let icon = 'icon-generic-box';
     let displayName = tct('Link [name] Issue', {name});
 
     if (externalIssue) {
@@ -111,14 +102,10 @@ class SentryAppExternalIssueActions extends React.Component {
       displayName = externalIssue.displayName;
     }
 
-    if (this.iconExists()) {
-      icon = `icon-${sentryAppComponent.sentryApp.slug}`;
-    }
-
     return (
       <IssueLinkContainer>
         <IssueLink>
-          <IntegrationIcon src={icon} />
+          <StyledSentryAppIcon slug={sentryAppComponent.sentryApp.slug} />
           <IntegrationLink onClick={this.showModal} href={url}>
             {displayName}
           </IntegrationLink>
@@ -173,6 +160,14 @@ class SentryAppExternalIssueActions extends React.Component {
   }
 }
 
+const StyledSentryAppIcon = styled(SentryAppIcon)`
+  color: ${p => p.theme.gray4};
+  width: ${space(3)};
+  height: ${space(3)};
+  cursor: pointer;
+  flex-shrink: 0;
+`;
+
 const IssueLink = styled('div')`
   display: flex;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/components/sentryAppIcon.jsx b/src/sentry/static/sentry/app/components/sentryAppIcon.jsx
new file mode 100644
index 0000000000..84785a06da
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/sentryAppIcon.jsx
@@ -0,0 +1,26 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import InlineSvg from 'app/components/inlineSvg';
+
+export default class SentryAppIcon extends React.Component {
+  static propTypes = {
+    slug: PropTypes.string.isRequired,
+  };
+
+  iconExists() {
+    try {
+      require(`../icons/icon-${this.props.slug}.svg`);
+      return true;
+    } catch (err) {
+      return false;
+    }
+  }
+
+  render() {
+    let icon = 'icon-generic-box';
+    if (this.iconExists()) {
+      icon = `icon-${this.props.slug}`;
+    }
+    return <InlineSvg {...this.props} src={icon} />;
+  }
+}
diff --git a/src/sentry/static/sentry/app/icons/icon-rookout.svg b/src/sentry/static/sentry/app/icons/icon-rookout.svg
new file mode 100644
index 0000000000..c4a99ca453
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-rookout.svg
@@ -0,0 +1 @@
+<svg width="75" height="89" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><path d="M47.5.7C46.8 1.9 46 3 45 3.9c-2.1 1.7-4.8 1.9-7.4 1.7h-.2c-8.6 0-15.6 7-15.6 15.6v6.9l-.3.3c-3.9 3.4-5.4 8.2-5.4 13.2 0 5.6 2.1 11.6 5.2 16.6h-9.8c-3 0-5.2-1.7-6-4.3H0v.7c0 6.7 5.4 9.7 11.3 9.7h12.5l-2.6 9.5c-.7 2.4-.7 5.1.5 7.4.9 1.7 2.4 3 4.3 3.4 1.3.3 2.7.2 4-.3l.8-.3.4.7.6.9c1.4 1.8 3.5 2.9 5.8 2.9s4.4-1.1 5.8-2.9l.6-.9.4-.7.8.3c1.2.5 2.6.6 3.9.3 1.9-.5 3.4-1.7 4.3-3.4 1.2-2.3 1.1-5 .4-7.4l-2.6-9.5h12.5c5.9 0 11.3-3 11.3-9.7V54h-5.6c-.8 2.6-3 4.3-6 4.3h-9.8c3.1-5 5.2-11 5.2-16.6 0-5.1-1.5-9.8-5.4-13.2l-.1-.1 7.6-4.9c-1.2-3.4-6.4-7.9-9.2-9.4-.4-.9-.9-1.7-1.5-2.4l-.4-.4.2-.5c1.1-2.9-.8-7.3-2.5-10.1" fill="#54476E"/><path d="M48.5 64.4l2.8 10.2c2.2 8.1-5.6 10.8-8.5 3.9.5 10.3-11.1 10.3-10.6 0-2.8 6.9-10.8 4.2-8.6-3.9l2.8-10.2h1.5c3.3 0 5.9 1.8 6.7 5.1h5.7c.8-3.3 3.3-5.1 6.7-5.1h1.5zm-9.7-50c2.6 0 4.7 2.1 4.7 4.7s-2.1 4.7-4.7 4.7-4.7-2.1-4.7-4.7 2.1-4.7 4.7-4.7zm11.8 15c3.6 2.5 5.8 6.4 5.8 12.3 0 4.5-1.5 9.4-4 13.7-.6-.4-1.5-.4-2.7-.6-.7-.1-1.3-.8-2.5-.8-1.3 0-1.9.7-2.6.8-1.4.2-2.3.1-2.9.7-.4.4-.7 1.2-.8 1.8 0 .3-.1.7-.1 1.1v1.1c-1.1.6-2 1.6-2.7 3l-.6 1-.6-1c-.8-1.5-1.7-2.4-2.7-3.1v-1.1c0-.4 0-.8-.1-1.1-.1-.6-.3-1.4-.8-1.8-.6-.6-1.5-.5-2.9-.7-.7-.1-1.3-.8-2.6-.8s-1.8.7-2.5.8c-1.2.2-2.1.2-2.7.6-2.4-4.3-4-9.2-4-13.7 0-5.8 2.2-9.8 5.8-12.3l3.3-2.1c.8-.5.9-1.1-.4-1l-3 .3v-5.4C24.3 13.9 30.2 8 37.4 8c0 0 8.2.4 9.8-3.2 1.5 2.9.7 5.3-.8 6.7 1.2.5 2.2 1.8 3 3.3-3 4.3-3.1 11 1.2 14.6z" fill="#AF6BD6"/><path d="M22.6 55.4c-2.4-4.3-4-9.2-4-13.7 0-5.8 2.2-9.8 5.8-12.3l3.3-2.1c.8-.5.9-1.1-.4-1l-3 .3v-5.4c0-4.6 2.4-8.6 6-11-4.8 5.6-2 14.9 2.8 17.3-11.7 7.2-8.1 17.4-2.8 27.2-.7-.1-1.3-.7-2.5-.7-1.3 0-1.8.7-2.5.8-1.2.2-2.1.2-2.7.6zM47.2 5c1.5 2.9.7 5.3-.8 6.7-.8-.3-1.2-.5-1.9-.6-.2 0-.3-.3 0-.5 1.7-1.2 2.8-2.8 2.7-5.6zm-9.3 81.2c-2.9.2-5.9-2.3-5.7-7.7-2.8 6.9-10.8 4.2-8.6-3.9l2.8-10.2h1.5c3.3 0 5.9 1.8 6.7 5.1h5.6v.1c-2.7 5.5-2.3 10.7-2.3 16.6z" fill="#8C55B7"/><path d="M37.5 33.2c6.6 0 12 5 12 13.5 0 2.5-.6 5.1-1.6 7.4-.3-.1-.5-.1-.8-.1-1.3 0-1.9.7-2.6.8-1.4.2-2.3.1-2.9.7-.4.4-.7 1.2-.8 1.8 0 .3-.1.7-.1 1.1v1.1c-1.1.6-2 1.6-2.7 3l-.6 1-.6-1c-.8-1.5-1.7-2.4-2.7-3.1v-1.1c0-.4 0-.8-.1-1.1-.1-.6-.3-1.4-.8-1.8-.6-.6-1.5-.5-2.9-.7-.7-.1-1.3-.8-2.6-.8-.3 0-.5 0-.7.1-1-2.3-1.6-4.9-1.6-7.4.1-8.4 5.4-13.4 12.1-13.4" fill="#FFF"/><path d="M54.9 19c-1.3-1.2-2.8-2.2-4.2-3-1.2 2.1-1.6 4.1-1.5 5.8.1 2.1.8 3.9 1.7 5l7.2-4.2c-.9-1.2-2-2.5-3.2-3.6" fill="#FFB03F" fill-rule="nonzero"/><path d="M49.4 23.8c.3 1.3.9 2.3 1.5 3.1l7.2-4.2c-2.8.8-5.8 1.2-8.7 1.1" fill="#ED9140" fill-rule="nonzero"/><path d="M56.5 21.7c-1.3-1.7-2.9-2.9-5-4.2-.4.5-.6 1.1-.7 1.8 1.9.7 3.8 1.5 5.7 2.4" fill="#FFCE92" fill-rule="nonzero"/><path d="M40.3 16c.8 0 1.5.7 1.5 1.5s-.7 1.5-1.5 1.5-1.5-.7-1.5-1.5c-.1-.9.6-1.5 1.5-1.5" fill="#FFF"/><path d="M28.6 56.4c-.2-.2-.5-.3-.8-.3-.3 0-.5.1-.7.3-.2.2-.3.4-.3.7v4.8c0 .3.1.5.3.7.2.2.5.3.7.3.3 0 .5-.1.7-.3.2-.2.3-.4.3-.7v-4.8c.1-.3 0-.6-.2-.7zm-3.9 0c-.1 0-.1 0 0 0-.4 0-.7.2-.9.4-.2.2-.4.5-.4.8 0 .3-.1.6-.1.9v2.7c0 .3.2.6.4.8.2.2.5.4.8.4h.1c.2 0 .4-.1.6-.3.2-.2.3-.4.3-.7v-4.1c0-.3-.1-.5-.3-.7-.1-.1-.3-.2-.5-.2zm7.2.5c-.2-.2-.5-.4-.8-.4H31c-.2 0-.4.1-.6.3-.2.2-.3.4-.3.7v4.3c0 .3.1.5.3.7.1.2.3.2.5.3h.1c.3 0 .6-.2.8-.4.2-.2.4-.6.5-.9 0-.3.1-.6.1-.9v-1.8c0-.3 0-.6-.1-.9 0-.5-.2-.8-.4-1z" fill="#ED9140" fill-rule="nonzero"/><path d="M29 59.8c-.3.5-.7.8-1.1.8-.4 0-.8-.3-1.1-.9V57.1c0-.3.1-.5.3-.7.2-.2.5-.3.7-.3.3 0 .6.1.8.3.2.2.3.4.3.7v2.4l.1.3zm-3.5-.5c-.3.5-.7.7-1.1.7-.5 0-.9-.4-1.2-.9v-.6c0-.3 0-.6.1-.9 0-.3.2-.6.4-.8.2-.2.5-.4.8-.4h.1c.2 0 .4.1.6.3.2.2.3.4.3.7v1.9zm6.4-2.4c-.2-.2-.5-.4-.8-.4H31c-.2 0-.4.1-.6.3-.2.2-.3.4-.3.7v1.7c.3.5.7.9 1.1.9.4 0 .8-.3 1.1-.8v-.6c0-.3 0-.6-.1-.9.1-.4-.1-.7-.3-.9z" fill="#FFB03F" fill-rule="nonzero"/><path d="M46.3 56.4c.2-.2.5-.3.8-.3.3 0 .5.1.7.3.2.2.3.4.3.7v4.8c0 .3-.1.5-.3.7-.2.2-.5.3-.7.3-.3 0-.5-.1-.7-.3-.3-.1-.4-.4-.4-.6v-4.8c0-.4.1-.7.3-.8zm4 0c.4 0 .7.2.9.4.2.2.4.5.4.8 0 .3.1.6.1.9v2.7c0 .3-.2.6-.4.8-.2.2-.5.4-.8.4h-.1c-.2 0-.4-.1-.6-.3-.2-.2-.3-.4-.3-.7v-4.1c0-.3.1-.5.3-.7 0-.1.2-.2.5-.2zm-7.3.5c.2-.2.5-.4.8-.4h.1c.2 0 .4.1.6.3.2.2.3.4.3.7v4.3c0 .3-.1.5-.3.7-.1.2-.3.2-.5.3h-.1c-.3 0-.6-.2-.8-.4-.2-.2-.4-.6-.5-.9 0-.3-.1-.6-.1-.9v-1.8c0-.3 0-.6.1-.9 0-.5.2-.8.4-1z" fill="#ED9140" fill-rule="nonzero"/><path d="M46 59.8c.3.5.7.8 1.1.8.4 0 .8-.3 1.1-.9V57.1c0-.3-.1-.5-.3-.7-.2-.2-.5-.3-.7-.3-.3 0-.6.1-.8.3-.2.2-.3.4-.3.7v2.4l-.1.3zm3.4-.5c.3.5.7.7 1.1.7.5 0 .9-.4 1.2-.9v-.6c0-.3 0-.6-.1-.9 0-.3-.2-.6-.4-.8-.2-.2-.5-.4-.8-.4h-.1c-.2 0-.4.1-.6.3-.2.2-.3.4-.3.7v1.9zM43 56.9c.2-.2.5-.4.8-.4h.1c.2 0 .4.1.6.3.2.2.3.4.3.7v1.7c-.3.5-.7.9-1.1.9-.4 0-.8-.3-1.1-.8v-.6c0-.3 0-.6.1-.9-.1-.4.1-.7.3-.9z" fill="#FFB03F" fill-rule="nonzero"/><circle fill="#AF6BD6" cx="39.3" cy="18.8" r="5.4"/><circle fill="#54476E" cx="38.9" cy="18.9" r="3.9"/><circle fill="#FFF" cx="40.2" cy="17.4" r="1.3"/></g></svg>
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.jsx b/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.jsx
new file mode 100644
index 0000000000..d62dbe65d4
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.jsx
@@ -0,0 +1,35 @@
+import Reflux from 'reflux';
+import SentryAppComponentsActions from 'app/actions/sentryAppComponentActions';
+
+const SentryAppComponentsStore = Reflux.createStore({
+  init() {
+    this.items = [];
+    this.listenTo(SentryAppComponentsActions.loadComponents, this.onLoadComponents);
+  },
+
+  getInitialState() {
+    return this.items;
+  },
+
+  onLoadComponents(items) {
+    this.items = items;
+    this.trigger(items);
+  },
+
+  get(uuid) {
+    return this.items.find(item => item.uuid === uuid);
+  },
+
+  getAll() {
+    return this.items;
+  },
+
+  getComponentByType(type) {
+    if (!type) {
+      return this.getAll();
+    }
+    return this.items.filter(item => item.type == type);
+  },
+});
+
+export default SentryAppComponentsStore;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx
index c85ff75e85..373abcf1b8 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx
@@ -14,6 +14,7 @@ import MutedBox from 'app/components/mutedBox';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import fetchSentryAppInstallations from 'app/utils/fetchSentryAppInstallations';
+import {fetchSentryAppComponents} from 'app/actionCreators/sentryAppComponents';
 
 import GroupEventToolbar from './eventToolbar';
 import {fetchGroupEventAndMarkSeen, getEventEnvironment} from './utils';
@@ -83,6 +84,7 @@ class GroupEventDetails extends React.Component {
     const groupId = group.id;
     const orgSlug = organization.slug;
     const projSlug = project.slug;
+    const projectId = project.id;
 
     this.setState({
       loading: true,
@@ -112,6 +114,7 @@ class GroupEventDetails extends React.Component {
 
       if (features.has('sentry-apps')) {
         fetchSentryAppInstallations(api, orgSlug);
+        fetchSentryAppComponents(api, orgSlug, projectId);
       }
     }
   };
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 18da0e7643..e8ec98a18c 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1527,7 +1527,6 @@ div.traceback > ul {
       padding: 8px 0;
 
       > li {
-        padding: 0 20px;
         background: inherit;
       }
 
@@ -1722,7 +1721,6 @@ div.traceback > ul {
     }
 
     > li {
-      padding-left: 15px;
       font-family: @font-family-code;
       color: #222;
       background-color: #f6f7f8;
diff --git a/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap b/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
index 1e3bb01c81..a873533b53 100644
--- a/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
+++ b/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
@@ -3,6 +3,7 @@
 exports[`Frame renderContext() should render context lines 1`] = `
 Array [
   <ContextLine
+    className="css-oxid1h-className"
     isActive={false}
     key="0"
     line={
@@ -13,6 +14,7 @@ Array [
     }
   />,
   <ContextLine
+    className="css-oxid1h-className"
     isActive={false}
     key="1"
     line={
@@ -23,6 +25,7 @@ Array [
     }
   />,
   <ContextLine
+    className="css-oxid1h-className"
     isActive={false}
     key="2"
     line={
diff --git a/tests/js/spec/components/events/interfaces/openInButton.spec.jsx b/tests/js/spec/components/events/interfaces/openInButton.spec.jsx
deleted file mode 100644
index 3b9bf60447..0000000000
--- a/tests/js/spec/components/events/interfaces/openInButton.spec.jsx
+++ /dev/null
@@ -1,142 +0,0 @@
-import React from 'react';
-import {Client} from 'app/api';
-import {mount} from 'enzyme';
-import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
-
-import {OpenInButton} from 'app/components/events/interfaces/openInButton';
-
-describe('OpenInButton', function() {
-  const api = new Client();
-  const filename = '/sentry/app.py';
-  const lineNo = 123;
-  const org = TestStubs.Organization({features: ['sentry-apps']});
-  const group = TestStubs.Group();
-  const install = TestStubs.SentryAppInstallation();
-
-  beforeEach(() => {
-    Client.clearMockResponses();
-  });
-
-  describe('with stacktrace-link component', function() {
-    it('renders button', async function() {
-      Client.addMockResponse({
-        method: 'GET',
-        url: `/organizations/${
-          org.slug
-        }/sentry-app-components/?filter=stacktrace-link&projectId=${group.project.id}`,
-        body: [
-          {
-            uuid: 'ed517da4-a324-44c0-aeea-1894cd9923fb',
-            type: 'stacktrace-link',
-            schema: {
-              uri: '/redirection',
-              url: `http://localhost:5000/redirection?installationId=${
-                install.uuid
-              }&projectSlug=${group.project.slug}`,
-            },
-            sentryApp: {
-              uuid: 'b468fed3-afba-4917-80d6-bdac99c1ec05',
-              slug: 'foo',
-              name: 'Foo',
-            },
-          },
-        ],
-      });
-      const wrapper = mount(
-        <OpenInButton
-          api={api}
-          organization={org}
-          group={group}
-          filename={filename}
-          lineNo={lineNo}
-        />,
-        TestStubs.routerContext()
-      );
-      await tick();
-      wrapper.update();
-      expect(wrapper.state().components[0].schema.url).toEqual(
-        `http://localhost:5000/redirection?installationId=${install.uuid}&projectSlug=${
-          group.project.slug
-        }`
-      );
-      const baseUrl = 'http://localhost:5000/redirection';
-      const queryParams = {
-        installationId: install.uuid,
-        projectSlug: group.project.slug,
-        lineNo,
-        filename,
-      };
-      const url = addQueryParamsToExistingUrl(baseUrl, queryParams);
-      expect(wrapper.find('Button').prop('href')).toEqual(url);
-      expect(wrapper.find('Button').text()).toEqual('Debug In Foo');
-    });
-  });
-
-  describe('without stacktrace-link component', function() {
-    it('renders button', async function() {
-      Client.addMockResponse({
-        method: 'GET',
-        url: `/organizations/${
-          org.slug
-        }/sentry-app-components/?filter=stacktrace-link&projectId=${group.project.id}`,
-        body: [],
-      });
-      const wrapper = mount(
-        <OpenInButton
-          api={api}
-          organization={org}
-          group={group}
-          filename={filename}
-          lineNo={lineNo}
-        />,
-        TestStubs.routerContext()
-      );
-      await tick();
-      wrapper.update();
-      expect(wrapper.state().components).toEqual([]);
-      expect(wrapper.find('Button').exists()).toEqual(false);
-    });
-  });
-
-  describe('without group prop passed', function() {
-    it('does not make api request', async function() {
-      const response = Client.addMockResponse({
-        method: 'GET',
-        url: `/organizations/${
-          org.slug
-        }/sentry-app-components/?filter=stacktrace-link&projectId=${group.project.id}`,
-        body: [],
-      });
-      const wrapper = mount(
-        <OpenInButton api={api} organization={org} filename={filename} lineNo={lineNo} />,
-        TestStubs.routerContext()
-      );
-      await tick();
-      wrapper.update();
-      expect(wrapper.state().components).toEqual([]);
-      expect(wrapper.find('Button').exists()).toEqual(false);
-      expect(response).not.toHaveBeenCalled();
-    });
-  });
-
-  describe('without organization prop passed', function() {
-    it('does not make api request', async function() {
-      const response = Client.addMockResponse({
-        method: 'GET',
-        url: `/organizations/${
-          org.slug
-        }/sentry-app-components/?filter=stacktrace-link&projectId=${group.project.id}`,
-        body: [],
-      });
-      const wrapper = mount(
-        <OpenInButton api={api} filename={filename} lineNo={lineNo} />,
-        TestStubs.routerContext()
-      );
-      await tick();
-      wrapper.update();
-      expect(wrapper.state().components).toEqual([]);
-      expect(wrapper.find('Button').exists()).toEqual(false);
-      expect(response).not.toHaveBeenCalled();
-    });
-  });
-});
diff --git a/tests/js/spec/components/events/interfaces/openInContextLine.spec.jsx b/tests/js/spec/components/events/interfaces/openInContextLine.spec.jsx
new file mode 100644
index 0000000000..ca902340a8
--- /dev/null
+++ b/tests/js/spec/components/events/interfaces/openInContextLine.spec.jsx
@@ -0,0 +1,54 @@
+import React from 'react';
+import {mount} from 'enzyme';
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
+
+import OpenInContextLine from 'app/components/events/interfaces/openInContextLine';
+
+describe('OpenInContextLine', function() {
+  const filename = '/sentry/app.py';
+  const group = TestStubs.Group();
+  const install = TestStubs.SentryAppInstallation();
+  const components = [
+    {
+      uuid: 'ed517da4-a324-44c0-aeea-1894cd9923fb',
+      type: 'stacktrace-link',
+      schema: {
+        uri: '/redirection',
+        url: `http://localhost:5000/redirection?installationId=${
+          install.uuid
+        }&projectSlug=${group.project.slug}`,
+      },
+      sentryApp: {
+        uuid: 'b468fed3-afba-4917-80d6-bdac99c1ec05',
+        slug: 'foo',
+        name: 'Foo',
+      },
+    },
+  ];
+
+  const lineNo = 233;
+
+  describe('with stacktrace-link component', function() {
+    it('renders button', function() {
+      const wrapper = mount(
+        <OpenInContextLine filename={filename} lineNo={lineNo} components={components} />,
+        TestStubs.routerContext()
+      );
+      expect(wrapper.props().components[0].schema.url).toEqual(
+        `http://localhost:5000/redirection?installationId=${install.uuid}&projectSlug=${
+          group.project.slug
+        }`
+      );
+      const baseUrl = 'http://localhost:5000/redirection';
+      const queryParams = {
+        installationId: install.uuid,
+        projectSlug: group.project.slug,
+        lineNo,
+        filename,
+      };
+      const url = addQueryParamsToExistingUrl(baseUrl, queryParams);
+      expect(wrapper.find('a[data-test-id="stacktrace-link"]').prop('href')).toEqual(url);
+      expect(wrapper.find('a[data-test-id="stacktrace-link"]').text()).toEqual('Foo');
+    });
+  });
+});
diff --git a/tests/js/spec/views/groupDetails/groupEventDetails.spec.jsx b/tests/js/spec/views/groupDetails/groupEventDetails.spec.jsx
index 2eb96e64ee..8ac5bbf29f 100644
--- a/tests/js/spec/views/groupDetails/groupEventDetails.spec.jsx
+++ b/tests/js/spec/views/groupDetails/groupEventDetails.spec.jsx
@@ -77,6 +77,11 @@ describe('groupEventDetails', () => {
       url: `/organizations/${org.slug}/sentry-app-installations/`,
       body: [],
     });
+
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/sentry-app-components/?projectId=${project.id}`,
+      body: [],
+    });
   });
 
   afterEach(function() {
@@ -176,4 +181,28 @@ describe('groupEventDetails', () => {
 
     expect(request).toHaveBeenCalledTimes(1);
   });
+
+  it('loads sentry app components when flagged in', () => {
+    const request = MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/sentry-app-components/?projectId=${project.id}`,
+      body: [],
+    });
+
+    org.features = ['sentry-apps'];
+    project.organization = org;
+
+    mount(
+      <GroupEventDetails
+        group={group}
+        project={project}
+        organization={org}
+        environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+        params={{}}
+        location={{}}
+      />,
+      routerContext
+    );
+
+    expect(request).toHaveBeenCalledTimes(1);
+  });
 });
