commit 17bf005b1c51ea20e617ed9c273c68eabd718260
Author: David Wang <davidw1339@gmail.com>
Date:   Wed Oct 30 11:36:25 2019 -0700

    made it so that with teams for user will only fetch when necessary (#15311)

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 4f313dadca..221b92ab9c 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -58,6 +58,8 @@ export type Team = {
   isMember: boolean;
 };
 
+export type TeamWithProjects = Team & {projects: Project[]};
+
 // This type is incomplete
 export type EventMetadata = {
   value?: string;
diff --git a/src/sentry/static/sentry/app/views/projectsDashboard/getProjectsByTeams.tsx b/src/sentry/static/sentry/app/utils/getProjectsByTeams.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/projectsDashboard/getProjectsByTeams.tsx
rename to src/sentry/static/sentry/app/utils/getProjectsByTeams.tsx
diff --git a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
index d8e5fc8fac..08aa99ab9f 100644
--- a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
+++ b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
@@ -2,9 +2,10 @@ import React from 'react';
 import _ from 'lodash';
 
 import {Client} from 'app/api';
-import {Team, Organization} from 'app/types';
+import {Organization, Project, Team, TeamWithProjects} from 'app/types';
 import getDisplayName from 'app/utils/getDisplayName';
-import ProjectActions from 'app/actions/projectActions';
+import getProjectsByTeams from 'app/utils/getProjectsByTeams';
+import ConfigStore from 'app/stores/configStore';
 import TeamActions from 'app/actions/teamActions';
 
 // We require these props when using this HOC
@@ -14,7 +15,7 @@ type DependentProps = {
 };
 
 type InjectedTeamsProps = {
-  teams: Team[];
+  teams: TeamWithProjects[];
   loadingTeams: boolean;
   error: Error | null;
 };
@@ -39,21 +40,29 @@ const withTeamsForUser = <P extends InjectedTeamsProps>(
     }
 
     async fetchTeams() {
+      // check if we can use organization teams/projects instead of fetching data
+      const {projects, teams} = this.props.organization;
+      if (projects && teams) {
+        // populate teams with projects information for use by wrapped components
+        this.populateTeamsWithProjects(teams, projects);
+        return;
+      }
+
       this.setState({
         loadingTeams: true,
       });
       try {
-        const teams = await this.props.api.requestPromise(this.getUsersTeamsEndpoint());
+        const teamsWithProjects: TeamWithProjects[] = await this.props.api.requestPromise(
+          this.getUsersTeamsEndpoint()
+        );
         this.setState({
-          teams,
+          teams: teamsWithProjects,
           loadingTeams: false,
         });
 
-        // also fill up TeamStore and ProjectStore so org context does not have
-        // to refetch org details due to lack of teams/projects
-        const projects = _.uniqBy(_.flatten(teams.map(team => team.projects)), 'id');
-        ProjectActions.loadProjects(projects);
-        TeamActions.loadTeams(teams);
+        // also fill up TeamStore so org context does not have to refetch org
+        // details due to lack of teams/projects
+        TeamActions.loadTeams(teamsWithProjects);
       } catch (error) {
         this.setState({
           error,
@@ -62,6 +71,19 @@ const withTeamsForUser = <P extends InjectedTeamsProps>(
       }
     }
 
+    populateTeamsWithProjects(teams: Team[], projects: Project[]) {
+      const {isSuperuser} = ConfigStore.get('user');
+      const {projectsByTeam} = getProjectsByTeams(teams, projects, isSuperuser);
+      const teamsWithProjects: TeamWithProjects[] = teams.map(team => {
+        const teamProjects = projectsByTeam[team.slug] || [];
+        return {...team, projects: teamProjects};
+      });
+      this.setState({
+        teams: teamsWithProjects,
+        loadingTeams: false,
+      });
+    }
+
     getUsersTeamsEndpoint() {
       return `/organizations/${this.props.organization.slug}/user-teams/`;
     }
diff --git a/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx b/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
index 1ef9fa635f..b0c142ce62 100644
--- a/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectsDashboard/index.jsx
@@ -14,6 +14,7 @@ import PageHeading from 'app/components/pageHeading';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import ProjectsStatsStore from 'app/stores/projectsStatsStore';
 import SentryTypes from 'app/sentryTypes';
+import getProjectsByTeams from 'app/utils/getProjectsByTeams';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 import profiler from 'app/utils/profiler';
 import space from 'app/styles/space';
@@ -23,7 +24,6 @@ import withTeams from 'app/utils/withTeams';
 
 import Resources from './resources';
 import TeamSection from './teamSection';
-import getProjectsByTeams from './getProjectsByTeams';
 
 class Dashboard extends React.Component {
   static propTypes = {
diff --git a/tests/js/spec/views/projectsDashboard/getProjectsByTeams.spec.jsx b/tests/js/spec/utils/getProjectsByTeams.spec.jsx
similarity index 89%
rename from tests/js/spec/views/projectsDashboard/getProjectsByTeams.spec.jsx
rename to tests/js/spec/utils/getProjectsByTeams.spec.jsx
index 73df16f13a..7271f638d7 100644
--- a/tests/js/spec/views/projectsDashboard/getProjectsByTeams.spec.jsx
+++ b/tests/js/spec/utils/getProjectsByTeams.spec.jsx
@@ -1,4 +1,4 @@
-import getProjectsByTeams from 'app/views/projectsDashboard/getProjectsByTeams';
+import getProjectsByTeams from 'app/utils/getProjectsByTeams';
 
 describe('getProjectsByTeams', function() {
   let projectsByTeams;
diff --git a/tests/js/spec/utils/withTeamsForUser.spec.jsx b/tests/js/spec/utils/withTeamsForUser.spec.jsx
index 0b1f327b78..935c3b4a47 100644
--- a/tests/js/spec/utils/withTeamsForUser.spec.jsx
+++ b/tests/js/spec/utils/withTeamsForUser.spec.jsx
@@ -8,6 +8,8 @@ import withTeamsForUser from 'app/utils/withTeamsForUser';
 describe('withUserTeams HoC', function() {
   const api = new MockApiClient();
   const organization = TestStubs.Organization();
+  delete organization.projects;
+  delete organization.teams;
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -62,10 +64,34 @@ describe('withUserTeams HoC', function() {
         .prop('teams')
     ).toEqual(mockTeams);
 
-    expect(ProjectActions.loadProjects).toHaveBeenCalledWith([
-      mockProjectB,
-      mockProjectA,
-    ]);
     expect(TeamActions.loadTeams).toHaveBeenCalledWith(mockTeams);
   });
+
+  it('does not fetch teams if information is in organization', async function() {
+    const mockTeam = TestStubs.Team();
+    const mockProjects = [TestStubs.Project({teams: [mockTeam]})];
+    const mockOrg = TestStubs.Organization({teams: [mockTeam], projects: mockProjects});
+
+    const getTeamsMock = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/user-teams/`,
+      body: [mockTeam],
+    });
+
+    const MyComponent = () => null;
+    const Container = withTeamsForUser(MyComponent);
+    const wrapper = mount(<Container organization={mockOrg} api={api} />);
+    await tick();
+
+    const expectedTeams = [{...mockTeam, projects: mockProjects}];
+
+    expect(
+      wrapper
+        .update()
+        .find('MyComponent')
+        .prop('teams')
+    ).toEqual(expectedTeams);
+
+    // ensure no request was made to get teams
+    expect(getTeamsMock).not.toHaveBeenCalled();
+  });
 });
