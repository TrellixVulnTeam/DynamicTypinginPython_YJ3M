commit c182cd21674563e264ae0d78f5ee98b75125c127
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 9 12:59:14 2017 +0100

    Added support for partially symbolicated raw cocoa stacks

diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index 3fc1a285a1..c811211e2a 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -26,7 +26,7 @@ class AppleCrashReport(object):
         return '\n\n'.join(rv) + '\n\nEOF'
 
     def _get_meta_header(self):
-        return "OS Version: {} {} ({})\nReport Version: {}".format(
+        return 'OS Version: %s %s (%s)\nReport Version: %s' % (
             self.context.get('os').get('name'),
             self.context.get('os').get('version'),
             self.context.get('os').get('build'),
@@ -38,79 +38,58 @@ class AppleCrashReport(object):
         if self.exception and self.exception[0]:
             # We only have one exception at a time
             exception = self.exception[0]
-            signal = ""
+            signal = ''
             if (exception
-                .get('mechanism')
-                .get('posix_signal')
+                .get('mechanism', {})
+                .get('posix_signal', {})
                 .get('name')
                ):
-                signal = ' ({})'.format(
-                    exception
-                    .get('mechanism')
-                    .get('posix_signal')
-                    .get('name')
-                )
+                signal = ' (%s)' % \
+                    exception['mechanism']['posix_signal']['name']
 
-            name = ""
+            name = ''
             if (exception
-                .get('mechanism')
-                .get('mach_exception')
+                .get('mechanism', {})
+                .get('mach_exception', {})
                 .get('exception_name')
                ):
-                name = '{}'.format(
-                    exception
-                    .get('mechanism')
-                    .get('mach_exception')
-                    .get('exception_name')
-                )
+                name = exception['mechanism']['mach_exception']['exception_name']
 
             if name or signal:
-                rv.append('Exception Type: {}{}'.format(
+                rv.append('Exception Type: %s%s' % (
                     name,
                     signal
                 ))
 
-            exc_name = ""
+            exc_name = ''
             if (exception
-                .get('mechanism')
-                .get('posix_signal')
+                .get('mechanism', {})
+                .get('posix_signal', {})
                 .get('code_name')
                ):
-                exc_name = '{}'.format(
-                    exception
-                    .get('mechanism')
-                    .get('posix_signal')
-                    .get('code_name')
-                )
+                exc_name = exception['mechanism']['posix_signal']['code_name']
 
-            exc_addr = ""
+            exc_addr = ''
             if (exception
-                .get('mechanism')
+                .get('mechanism', {})
                 .get('relevant_address')
                ):
-                exc_addr = ' at {}'.format(
-                    exception
-                    .get('mechanism')
-                    .get('relevant_address')
-                )
+                exc_addr = ' at %s' % exception['mechanism']['relevant_address']
 
             if exc_name and exc_addr:
-                rv.append('Exception Codes: {}{}'.format(
+                rv.append('Exception Codes: %s%s' % (
                     exc_name,
                     exc_addr
                 ))
 
             if exception.get('thread_id') is not None:
-                rv.append('Crashed Thread: {}'.format(
-                    exception.get('thread_id')
-                ))
+                rv.append('Crashed Thread: %s' % exception['thread_id'])
 
             if exception.get('value'):
-                rv.append('\nApplication Specific Information:\n{}'.format(
-                    exception.get('value')
-                ))
+                rv.append('\nApplication Specific Information:\n%s' %
+                    exception['value'])
 
-        return "\n".join(rv)
+        return '\n'.join(rv)
 
     def get_threads_apple_string(self):
         rv = []
@@ -118,7 +97,7 @@ class AppleCrashReport(object):
             thread_string = self.get_thread_apple_string(thread)
             if thread_string is not None:
                 rv.append(thread_string)
-        return "\n\n".join(rv)
+        return '\n\n'.join(rv)
 
     def get_thread_apple_string(self, thread):
         rv = []
@@ -140,40 +119,43 @@ class AppleCrashReport(object):
 
         if len(rv) == 0:
             return None  # No frames in thread, so we remove thread
-        thread_string = 'Thread {} name: {}\n'.format(thread['id'],
-            thread['name'] and thread['name'] or ''
+        thread_string = 'Thread %s name: %s\n' % (
+            thread['id'],
+            thread.get('name') and thread['name'] or ''
         )
-        if thread['crashed']:
-            thread_string += 'Thread {} Crashed:\n'.format(thread['id'])
-        return thread_string + "\n".join(rv)
+        if thread.get('crashed'):
+            thread_string += 'Thread %s Crashed:\n' % thread['id']
+        return thread_string + '\n'.join(rv)
 
     def _convert_frame_to_apple_string(self, frame, number=0):
         if frame.get('instruction_addr') is None:
             return None
-        slide_value = self._get_slide_value(frame['image_addr'])
-        instruction_addr = slide_value + parse_addr(frame['instruction_addr'])
-        image_addr = slide_value + parse_addr(frame['image_addr'])
+        slide_value = self._get_slide_value(frame.get('image_addr'))
+        instruction_addr = slide_value + parse_addr(frame.get('instruction_addr'))
+        image_addr = slide_value + parse_addr(frame.get('image_addr'))
         offset = ''
-        if frame['image_addr'] is not None and not self.symbolicated:
-            offset = ' + {}'.format(
-                instruction_addr - slide_value - parse_addr(frame['symbol_addr'])
+        if frame.get('image_addr') is not None and \
+           (not self.symbolicated or (frame.get('function') or '<unknown>') == '<unknown>'):
+            offset = ' + %s' % (
+                instruction_addr - slide_value - parse_addr(
+                    frame.get('symbol_addr'))
             )
         symbol = hex(image_addr)
         if self.symbolicated:
             file = ''
             if frame.get('filename') and frame.get('lineno'):
-                file = " ({}:{})".format(
-                    frame['filename'],
+                file = ' (%s:%s)' % (
+                    frame.get('filename') or '<unknown>',
                     frame['lineno']
                 )
-            symbol = "{}{}".format(
-                frame['function'],
+            symbol = '%s%s' % (
+                frame.get('function') or '<unknown>',
                 file
             )
-        return "{}{}{}{}{}".format(
-            str(number).ljust(4, " "),
-            frame['package'].rsplit('/', 1)[-1].ljust(32, " "),
-            hex(instruction_addr).ljust(20, " "),
+        return '%s%s%s%s%s' % (
+            str(number).ljust(4, ' '),
+            (frame.get('package') or '<unknown>').rsplit('/', 1)[-1].ljust(32, ' '),
+            hex(instruction_addr).ljust(20, ' '),
             symbol,
             offset
         )
@@ -193,12 +175,12 @@ class AppleCrashReport(object):
             self._convert_debug_meta_to_binary_image_row(debug_image=i),
             sorted(self.debug_images, key=lambda i: parse_addr(i['image_addr'])
         ))
-        return "Binary Images:\n" + "\n".join(binary_images)
+        return 'Binary Images:\n' + '\n'.join(binary_images)
 
     def _convert_debug_meta_to_binary_image_row(self, debug_image):
         slide_value = parse_addr(debug_image['image_vmaddr'])
         image_addr = parse_addr(debug_image['image_addr']) + slide_value
-        return "{} - {} {} {}  <{}> {}".format(
+        return '%s - %s %s %s  <%s> %s' % (
             hex(image_addr),
             hex(image_addr + debug_image['image_size'] - 1),
             debug_image['name'].rsplit('/', 1)[-1],
diff --git a/tests/sentry/lang/native/test_applecrashreport.py b/tests/sentry/lang/native/test_applecrashreport.py
index 76d71dcd0b..708f4be5a4 100644
--- a/tests/sentry/lang/native/test_applecrashreport.py
+++ b/tests/sentry/lang/native/test_applecrashreport.py
@@ -76,6 +76,76 @@ Thread 2 name: com.apple.test\n\
 1   SwiftExample                    0xf6cd4             0xf0000 + 60'
 
 
+def test_get_threads_apple_string_symbolicated():
+    acr = AppleCrashReport(symbolicated=True, threads=[
+        {'crashed': True,
+        'current': True,
+        'id': 1,
+        'name': None,
+        'stacktrace': {'frames': [
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+             'colno': 0,
+             'filename': 'SentrySwizzle.swift',
+             'function': '@objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+             'image_addr': '0x2c8000',
+             'in_app': False,
+             'instruction_addr': '0x31caa4',
+             'lineno': 0,
+             'object_addr': '0x2c8000',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+             'symbol': '_TToFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+             'symbol_addr': '0x31ca38'},
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+             'colno': 84,
+             'filename': 'SentrySwizzle.swift',
+             'function': 'UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+             'image_addr': '0x2c8000',
+             'in_app': False,
+             'instruction_addr': '0x31c3e8',
+             'lineno': 92,
+             'object_addr': '0x2c8000',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+             'symbol': '_TFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+             'symbol_addr': '0x31b9f8'}]
+        }},
+        {'crashed': False,
+        'current': False,
+        'id': 2,
+        'name': 'com.apple.test',
+        'stacktrace': {'frames': [
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
+             'colno': 0,
+             'filename': 'ViewController.swift',
+             'function': '@objc ViewController.onClickFatalError(AnyObject) -> ()',
+             'image_addr': '0xf0000',
+             'in_app': True,
+             'instruction_addr': '0xf6cd4',
+             'lineno': 0,
+             'object_addr': '0xf0000',
+             'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
+             'symbol': '_TToFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
+             'symbol_addr': '0xf6c98'},
+            {'colno': 36,
+             'image_addr': '0xf0000',
+             'in_app': True,
+             'instruction_addr': '0xf6c78',
+             'lineno': 110,
+             'object_addr': '0xf0000',
+             'symbol_addr': '0xf6c04'}]
+        }},
+    ])
+    threads = acr.get_threads_apple_string()
+    assert threads.rstrip() == '''\
+Thread 1 name: \n\
+Thread 1 Crashed:
+0   SentrySwift                     0x31c3e8            UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool (SentrySwizzle.swift:92)
+1   SentrySwift                     0x31caa4            @objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool
+
+Thread 2 name: com.apple.test
+0   <unknown>                       0xf6c78             <unknown> + 116
+1   SwiftExample                    0xf6cd4             @objc ViewController.onClickFatalError(AnyObject) -> ()'''
+
+
 # 0   libswiftCore.dylib              0x0000000100556cc4 0x1003f8000 + 1436868
 # 1   libswiftCore.dylib              0x0000000100556cc4 0x1003f8000 + 1436868
 # 2   SentrySwift                     0x0000000100312308 @objc SentryClient.crash() -> () (Sentry.swift:0)
