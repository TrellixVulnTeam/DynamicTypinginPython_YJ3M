commit a779ffd04179b8f15606c5b55ba6f2f773d17051
Author: ted kaemming <ted@kaemming.com>
Date:   Mon Jul 24 15:57:48 2017 -0700

    Add `flush` to similarity index. (#5761)

diff --git a/src/sentry/scripts/similarity/index.lua b/src/sentry/scripts/similarity/index.lua
index 40f348d75f..74386610c4 100644
--- a/src/sentry/scripts/similarity/index.lua
+++ b/src/sentry/scripts/similarity/index.lua
@@ -219,12 +219,19 @@ end
 
 -- Key Generation
 
-local function get_bucket_frequency_key(configuration, index, time, band, item)
+local function get_key_prefix(configuration, index)
     return string.format(
-        '%s:%s:f:%s:%s:%s:%s',
+        '%s:%s:%s',
         configuration.namespace,
         configuration.scope,
-        index,
+        index
+    )
+end
+
+local function get_bucket_frequency_key(configuration, index, time, band, item)
+    return string.format(
+        '%s:f:%s:%s:%s',
+        get_key_prefix(configuration, index),
         time,
         band,
         item
@@ -233,10 +240,8 @@ end
 
 local function get_bucket_membership_key(configuration, index, time, band, bucket)
     return string.format(
-        '%s:%s:m:%s:%s:%s:%s',
-        configuration.namespace,
-        configuration.scope,
-        index,
+        '%s:m:%s:%s:%s',
+        get_key_prefix(configuration, index),
         time,
         band,
         bucket
@@ -897,6 +902,34 @@ local commands = {
                 end
             )
         end
+    ),
+    SCAN = takes_configuration(
+        function (configuration, arguments)
+            local arguments = build_variadic_argument_parser({
+                {"index", identity},
+                {"cursor", identity},
+                {"count", identity},
+            })(arguments)
+            return table.imap(
+                arguments,
+                function (argument)
+                    return redis.call(
+                        'SCAN',
+                        argument.cursor,
+                        'MATCH',
+                        string.format(
+                            '%s:*',
+                            get_key_prefix(
+                                configuration,
+                                argument.index
+                            )
+                        ),
+                        'COUNT',
+                        argument.count
+                    )
+                end
+            )
+        end
     )
 }
 
diff --git a/src/sentry/similarity/features.py b/src/sentry/similarity/features.py
index 0b9a6553d9..4e89d6ff0f 100644
--- a/src/sentry/similarity/features.py
+++ b/src/sentry/similarity/features.py
@@ -221,3 +221,9 @@ class FeatureSet(object):
             self.__get_scope(group.project),
             [(self.aliases[label], key) for label in self.features.keys()],
         )
+
+    def flush(self, project=None):
+        return self.index.flush(
+            '*' if project is None else self.__get_scope(project),
+            self.aliases.values(),
+        )
diff --git a/src/sentry/similarity/index.py b/src/sentry/similarity/index.py
index ac7d153054..693ca7bf77 100644
--- a/src/sentry/similarity/index.py
+++ b/src/sentry/similarity/index.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import itertools
 import time
 
 from sentry.utils.iterators import chunked
@@ -13,6 +14,10 @@ def band(n, value):
     return list(chunked(value, len(value) / n))
 
 
+def flatten(value):
+    return list(itertools.chain.from_iterable(value))
+
+
 class MinHashIndex(object):
     def __init__(self, cluster, namespace, signature_builder, bands, interval, retention):
         self.cluster = cluster
@@ -160,6 +165,52 @@ class MinHashIndex(object):
             arguments,
         )
 
+    def scan(self, scope, indices, batch=1000, timestamp=None):
+        if timestamp is None:
+            timestamp = int(time.time())
+
+        arguments = [
+            'SCAN',
+            timestamp,
+            self.namespace,
+            self.bands,
+            self.interval,
+            self.retention,
+            scope,
+        ]
+
+        clients = map(
+            self.cluster.get_local_client,
+            self.cluster.hosts,
+        )
+
+        for client in clients:
+            cursors = {idx: 0 for idx in indices}
+            while cursors:
+                requests = []
+                for idx, cursor in cursors.items():
+                    requests.append([idx, cursor, batch])
+
+                responses = index(
+                    client,
+                    [],
+                    arguments + flatten(requests),
+                )
+
+                for (idx, _, _), (cursor, chunk) in zip(requests, responses):
+                    cursor = int(cursor)
+                    if cursor == 0:
+                        del cursors[idx]
+                    else:
+                        cursors[idx] = cursor
+
+                    yield client, idx, chunk
+
+    def flush(self, scope, indices, batch=1000, timestamp=None):
+        for client, index, chunk in self.scan(scope, indices, batch, timestamp):
+            if chunk:
+                client.delete(*chunk)
+
     def export(self, scope, items, timestamp=None):
         if timestamp is None:
             timestamp = int(time.time())
diff --git a/tests/sentry/similarity/test_index.py b/tests/sentry/similarity/test_index.py
index 7bde9c14dd..0d25ea48b3 100644
--- a/tests/sentry/similarity/test_index.py
+++ b/tests/sentry/similarity/test_index.py
@@ -117,3 +117,21 @@ class MinHashIndexTestCase(TestCase):
             assert sum(
                 sum(dict(bucket_frequencies).values()) for index, bucket_frequencies in band
             ) == 2
+
+    def test_flush_scoped(self):
+        self.index.record('example', '1', [('index', ['foo', 'bar'])])
+        assert self.index.classify('example', [('index', ['foo', 'bar'])])[0] == [
+            ('1', 1.0),
+        ]
+
+        self.index.flush('example', ['index'])
+        assert self.index.classify('example', [('index', ['foo', 'bar'])])[0] == []
+
+    def test_flush_unscoped(self):
+        self.index.record('example', '1', [('index', ['foo', 'bar'])])
+        assert self.index.classify('example', [('index', ['foo', 'bar'])])[0] == [
+            ('1', 1.0),
+        ]
+
+        self.index.flush('*', ['index'])
+        assert self.index.classify('example', [('index', ['foo', 'bar'])])[0] == []
