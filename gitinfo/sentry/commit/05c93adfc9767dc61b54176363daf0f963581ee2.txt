commit 05c93adfc9767dc61b54176363daf0f963581ee2
Author: Ayesha Omarali <ayesha.omarali@gmail.com>
Date:   Tue Oct 23 17:05:06 2018 -0700

    feat(discover): Add Pagination to Tables (#10092)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 272e9554af..7f62046d39 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -223,7 +223,7 @@ class Endpoint(APIView):
 
     def paginate(
         self, request, on_results=None, paginator=None,
-        paginator_cls=Paginator, default_per_page=100, **paginator_kwargs
+        paginator_cls=Paginator, default_per_page=100, max_per_page=100, **paginator_kwargs
     ):
         assert (paginator and not paginator_kwargs) or (paginator_cls and paginator_kwargs)
 
@@ -234,7 +234,7 @@ class Endpoint(APIView):
         else:
             input_cursor = None
 
-        assert per_page <= max(100, default_per_page)
+        assert per_page <= max(max_per_page, default_per_page)
 
         if not paginator:
             paginator = paginator_cls(**paginator_kwargs)
diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index 2d033c50e2..7ef9563ad4 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import re
 import six
+from functools32 import partial
 from copy import deepcopy
 
 from django.utils import timezone
@@ -16,6 +17,7 @@ from sentry.utils.dates import (
 from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
+from sentry.api.paginator import GenericOffsetPaginator
 from sentry.models import Project, ProjectStatus, OrganizationMember, OrganizationMemberTeam
 from sentry.utils import snuba
 from sentry import roles
@@ -170,31 +172,7 @@ class DiscoverQuerySerializer(serializers.Serializer):
 class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationDiscoverQueryPermission, )
 
-    def do_query(self, projects, **kwargs):
-        requested_query = deepcopy(kwargs)
-
-        selected_columns = kwargs['selected_columns']
-        groupby_columns = kwargs['groupby']
-
-        if 'project_name' in requested_query['selected_columns']:
-            selected_columns.remove('project_name')
-            if 'project_id' not in selected_columns:
-                selected_columns.append('project_id')
-
-        if 'project_name' in requested_query['groupby']:
-            groupby_columns.remove('project_name')
-            if 'project_id' not in groupby_columns:
-                groupby_columns.append('project_id')
-
-        for aggregation in kwargs['aggregations']:
-            if aggregation[1] == 'project_name':
-                aggregation[1] = 'project_id'
-
-        snuba_results = snuba.raw_query(
-            referrer='discover',
-            **kwargs
-        )
-
+    def handle_results(self, snuba_results, requested_query, projects):
         if 'project_name' in requested_query['selected_columns']:
             project_name_index = requested_query['selected_columns'].index('project_name')
             snuba_results['meta'].insert(project_name_index, {'name': 'project_name'})
@@ -221,11 +199,53 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                 if 'project_id' not in requested_query['groupby']:
                     del result['project_id']
 
-        # Only return the meta propety "name"
+        # Only return the meta property "name"
         snuba_results['meta'] = [{'name': field['name']} for field in snuba_results['meta']]
-
         return snuba_results
 
+    def do_query(self, projects, request, **kwargs):
+        requested_query = deepcopy(kwargs)
+
+        selected_columns = kwargs['selected_columns']
+        groupby_columns = kwargs['groupby']
+
+        if 'project_name' in requested_query['selected_columns']:
+            selected_columns.remove('project_name')
+            if 'project_id' not in selected_columns:
+                selected_columns.append('project_id')
+
+        if 'project_name' in requested_query['groupby']:
+            groupby_columns.remove('project_name')
+            if 'project_id' not in groupby_columns:
+                groupby_columns.append('project_id')
+
+        for aggregation in kwargs['aggregations']:
+            if aggregation[1] == 'project_name':
+                aggregation[1] = 'project_id'
+
+        if not kwargs['aggregations']:
+            data_fn = partial(
+                snuba.raw_query,
+                referrer='discover',
+                **kwargs
+            )
+            return self.paginate(
+                request=request,
+                on_results=lambda results: self.handle_results(results, requested_query, projects),
+                paginator=GenericOffsetPaginator(data_fn=data_fn),
+                max_per_page=1000
+            )
+        else:
+            snuba_results = snuba.raw_query(
+                referrer='discover',
+                **kwargs
+            )
+            return Response(self.handle_results(
+                snuba_results,
+                requested_query,
+                projects,
+            ), status=200)
+
     def post(self, request, organization):
 
         if not features.has('organizations:discover', organization, actor=request.user):
@@ -262,7 +282,7 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                 if field not in groupby:
                     groupby.append(field)
 
-        results = self.do_query(
+        return self.do_query(
             projects=projects_map,
             start=serialized.get('start'),
             end=serialized.get('end'),
@@ -275,6 +295,5 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
             rollup=serialized.get('rollup'),
             filter_keys={'project_id': serialized.get('projects')},
             arrayjoin=serialized.get('arrayjoin'),
+            request=request,
         )
-
-        return Response(results, status=200)
diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index 75c46234a0..13d316814a 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -344,6 +344,9 @@ class GenericOffsetPaginator(object):
 
     It is potentially less performant than a ranged query solution that might
     not to have to look at as many rows.
+
+    Can either take data as a list or dictionary with data as value in order to
+    return full object if necessary. (if isinstance statement)
     """
 
     def __init__(self, data_fn):
@@ -354,9 +357,17 @@ class GenericOffsetPaginator(object):
         offset = cursor.offset if cursor is not None else 0
         # Request 1 more than limit so we can tell if there is another page
         data = self.data_fn(offset=offset, limit=limit + 1)
-        has_more = (len(data) == limit + 1)
-        if has_more:
-            data.pop()
+
+        if isinstance(data, list):
+            has_more = len(data) == limit + 1
+            if has_more:
+                data.pop()
+        elif isinstance(data.get('data'), list):
+            has_more = len(data['data']) == limit + 1
+            if has_more:
+                data['data'].pop()
+        else:
+            raise NotImplementedError
 
         # Since we are not issuing ranged queries, our cursors always have
         # `value=0` (ie. all rows have the same value), and so offset naturally
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 036b030f4e..057206a89b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -169,6 +169,20 @@ export default class OrganizationDiscover extends React.Component {
       });
   };
 
+  onFetchPage(nextOrPrev) {
+    this.setState({isFetchingQuery: true});
+    return this.state.resultManager
+      .fetchPage(nextOrPrev)
+      .then(data => {
+        this.setState({data, isFetchingQuery: false});
+      })
+      .catch(err => {
+        const message = (err && err.message) || t('An error occurred');
+        addErrorMessage(message);
+        this.setState({isFetchingQuery: false});
+      });
+  }
+
   toggleSidebar = view => {
     if (view !== this.state.view) {
       this.setState({view});
@@ -374,6 +388,7 @@ export default class OrganizationDiscover extends React.Component {
                 organization={organization}
                 savedQuery={savedQuery}
                 queryBuilder={queryBuilder}
+                onFetchPage={this.onFetchPage.bind(this)}
               />
             )}
             {!shouldDisplayResult && <Intro updateQuery={this.updateFields} />}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index e5569d7da6..6f5a841355 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -51,7 +51,7 @@ export default function createQueryBuilder(initial = {}, organization) {
   };
 
   /**
-   * Loads tags keys for user's projectsand updates `tags` with the result.
+   * Loads tags keys for user's projects and updates `tags` with the result.
    * If the request fails updates `tags` to be the hardcoded list of predefined
    * promoted tags.
    *
@@ -164,9 +164,10 @@ export default function createQueryBuilder(initial = {}, organization) {
    * @param {Object} [data] Optional field to provide data to fetch
    * @returns {Promise<Object|Error>}
    */
-  function fetch(data) {
+  function fetch(data, cursor = '0:0:1') {
     const api = new Client();
-    const endpoint = `/organizations/${organization.slug}/discover/query/`;
+    const limit = data.limit || 1000;
+    const endpoint = `/organizations/${organization.slug}/discover/query/?per_page=${limit}&cursor=${cursor}`;
 
     data = data || getExternal();
 
@@ -186,11 +187,12 @@ export default function createQueryBuilder(initial = {}, organization) {
     }
 
     return api
-      .requestPromise(endpoint, {
-        method: 'POST',
-        data,
+      .requestPromise(endpoint, {includeAllArgs: true, method: 'POST', data})
+      .then(([responseData, _, utils]) => {
+        responseData.pageLinks = utils.getResponseHeader('Link');
+        return responseData;
       })
-      .catch(() => {
+      .catch(err => {
         throw new Error(t('An error occurred'));
       });
   }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index ded80c879e..54118eaff9 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -15,6 +15,7 @@ import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 
 import {getChartData, getChartDataByDay, downloadAsCsv, generateQueryName} from './utils';
 import {createSavedQuery} from '../utils';
+import Pagination from './pagination';
 import Table from './table';
 import {
   Heading,
@@ -32,6 +33,7 @@ export default class Result extends React.Component {
     data: PropTypes.object.isRequired,
     queryBuilder: PropTypes.object.isRequired,
     savedQuery: SentryTypes.DiscoverSavedQuery, // Provided if it's a saved search
+    onFetchPage: PropTypes.func.isRequired,
   };
 
   constructor() {
@@ -206,7 +208,12 @@ export default class Result extends React.Component {
   }
 
   render() {
-    const {data: {baseQuery, byDayQuery}, savedQuery} = this.props;
+    const {
+      data: {baseQuery, byDayQuery},
+      savedQuery,
+      onFetchPage,
+    } = this.props;
+
     const {view} = this.state;
 
     const basicChartData = getChartData(baseQuery.data.data, baseQuery.query);
@@ -232,7 +239,19 @@ export default class Result extends React.Component {
           {this.renderToggle()}
         </Flex>
 
-        {view === 'table' && <Table data={baseQuery.data} query={baseQuery.query} />}
+        {view === 'table' && (
+          <div>
+            <Table data={baseQuery.data} query={baseQuery.query} />
+            {!baseQuery.query.aggregations.length && (
+              <Pagination
+                previous={baseQuery.previous}
+                next={baseQuery.next}
+                getNextPage={() => onFetchPage('next')}
+                getPreviousPage={() => onFetchPage('previous')}
+              />
+            )}
+          </div>
+        )}
         {view === 'line' && (
           <ChartWrapper>
             <LineChart
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx
new file mode 100644
index 0000000000..eb81ba076e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx
@@ -0,0 +1,43 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import {Flex} from 'grid-emotion';
+
+import Button from 'app/components/button';
+
+export default class Pagination extends React.Component {
+  static propTypes = {
+    getNextPage: PropTypes.func.isRequired,
+    getPreviousPage: PropTypes.func.isRequired,
+    previous: PropTypes.object,
+    next: PropTypes.object,
+  };
+
+
+  render() {
+    const {getPreviousPage, getNextPage, previous, next} = this.props;
+
+    return (
+      <PaginationButtons className="btn-group">
+        <Button
+          className="btn"
+          disabled={previous && !previous.results}
+          size="xsmall"
+          icon="icon-chevron-left"
+          onClick={getPreviousPage}
+        />
+        <Button
+          className="btn"
+          disabled={next && !next.results}
+          size="xsmall"
+          icon="icon-chevron-right"
+          onClick={getNextPage}
+        />
+      </PaginationButtons>
+    );
+  }
+}
+
+const PaginationButtons = styled(Flex)`
+  justify-content: flex-end;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
index c7e39e6f35..e24ee877c0 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
@@ -4,21 +4,52 @@
  * This function is responsible for fetching and storing result data for
  * result tables and visualizations.
  */
+import parseLinkHeader from 'app/utils/parseLinkHeader';
+
 export default function createResultManager(queryBuilder) {
-  const data = {
-    baseQuery: {query: null, data: null},
-    byDayQuery: {query: null, data: null},
-  };
+  let data = getDefault();
 
   return {
     getAll,
     fetchAll,
     reset,
     shouldDisplayResult,
+    fetchPage,
   };
 
   /**
-   * Returns data for all relevant visuzlizations.
+   * Returns data of next or previous page
+   * @param {String} pageToFetch
+   * @returns {Promise<Object>}
+   */
+  function fetchPage(pageToFetch) {
+    const query = queryBuilder.getExternal();
+    const baseQuery = queryBuilder.getQueryByType(query, 'baseQuery');
+
+    let results, cursor;
+
+    if (data.baseQuery[pageToFetch]) {
+      results = data.baseQuery[pageToFetch].results;
+      cursor = data.baseQuery[pageToFetch].cursor;
+    }
+
+    if (results) {
+      return queryBuilder.fetch(baseQuery, cursor).then(resp => {
+        data.baseQuery.query = query;
+        data.baseQuery.data = resp;
+        if (resp.pageLinks) {
+          const links = parseLinkHeader(resp.pageLinks);
+          data.baseQuery.next = links.next;
+          data.baseQuery.previous = links.previous;
+        }
+        return data;
+      });
+    }
+    return Promise.reject(new Error('No New Page Available'));
+  }
+
+  /**
+   * Returns data for all relevant visualizations.
    *
    * @returns {Promise<Object>}
    */
@@ -27,7 +58,7 @@ export default function createResultManager(queryBuilder) {
   }
 
   /**
-   * Fetches data for all relevant visuzlizations.
+   * Fetches data for all relevant visualizations.
    * Always fetches base query data, and fetches by-day data only if the
    * current query contains an aggregation.
    *
@@ -50,6 +81,11 @@ export default function createResultManager(queryBuilder) {
     return Promise.all(promises).then(resp => {
       data.baseQuery.query = query;
       data.baseQuery.data = resp[0];
+      if (resp[0].pageLinks) {
+        const links = parseLinkHeader(resp[0].pageLinks);
+        data.baseQuery.next = links.next;
+        data.baseQuery.previous = links.previous;
+      }
 
       if (hasAggregations) {
         data.byDayQuery.query = byDayQuery;
@@ -58,7 +94,6 @@ export default function createResultManager(queryBuilder) {
         data.byDayQuery.query = null;
         data.byDayQuery.data = null;
       }
-
       return data;
     });
   }
@@ -69,13 +104,23 @@ export default function createResultManager(queryBuilder) {
    * @returns {Void}
    */
   function reset() {
-    for (let key in data) {
-      data[key] = {query: null, data: null};
-    }
+    data = getDefault();
+  }
+
+  /**
+   * Resets all data
+   *
+   * @returns {Object}
+   */
+  function getDefault() {
+    return {
+      baseQuery: {query: null, data: null, next: null, previous: null},
+      byDayQuery: {query: null, data: null},
+    };
   }
 
   /**
-   * Returns a boolean indicating whether the result whould be displayed.
+   * Returns a boolean indicating whether the result should be displayed.
    * If there is base data available this is true.
    *
    * @returns {Boolean}
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 3bef8716bc..25ec1205ee 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -27,6 +27,7 @@ describe('Discover', function() {
       };
       queryBuilder.fetch = jest.fn(() => Promise.resolve(mockResponse));
     });
+
     it('auto-runs saved query', async function() {
       wrapper = mount(
         <Discover
@@ -84,6 +85,61 @@ describe('Discover', function() {
     });
   });
 
+  describe('Pagination', function() {
+    let wrapper, firstPageMock, secondPageMock;
+
+    beforeEach(function() {
+      firstPageMock = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
+        method: 'POST',
+        body: {timing: {}, data: [], meta: []},
+        headers: {Link: '<api/0/organizations/sentry/discover/query/?per_page=2&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", <api/0/organizations/sentry/discover/query/?per_page=2&cursor=0:2:0>; rel="next"; results="true"; cursor="0:1000:0"'}
+      });
+
+      secondPageMock = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:1000:0',
+        method: 'POST',
+        body: {timing: {}, data: [], meta: []},
+      });
+
+      wrapper = mount(
+        <Discover
+          queryBuilder={queryBuilder}
+          organization={organization}
+          params={{}}
+          updateSavedQueryData={() => {}}
+        />,
+        TestStubs.routerContext()
+      );
+    });
+
+    it('can go to next page', async function(){
+      wrapper.instance().runQuery();
+      await tick();
+      wrapper.update();
+      wrapper.find('PaginationButtons').find('Button').at(1).simulate('click');
+      expect(firstPageMock).toHaveBeenCalledTimes(1);
+      expect(secondPageMock).toHaveBeenCalledTimes(1);
+    });
+
+    it('can\'t go back', async function() {
+      wrapper.instance().runQuery();
+      await tick();
+      wrapper.update();
+      expect(wrapper.find('PaginationButtons').find('Button').at(0).prop('disabled')).toBe(true);
+      wrapper.find('PaginationButtons').find('Button').at(0).simulate('click');
+      expect(firstPageMock).toHaveBeenCalledTimes(1);
+    });
+
+    it('does not paginate on aggregate', async function(){
+      wrapper.instance().updateField('aggregations', [['count()', null, 'count']]);
+      wrapper.instance().runQuery();
+      await tick();
+      wrapper.update();
+      expect(wrapper.find('Pagination').exists()).toBe(false);
+    });
+  });
+
   describe('runQuery()', function() {
     const mockResponse = {timing: {}, data: [], meta: []};
     let wrapper;
@@ -107,6 +163,7 @@ describe('Discover', function() {
       expect(queryBuilder.fetch).toHaveBeenCalledTimes(1);
       expect(queryBuilder.fetch).toHaveBeenCalledWith(queryBuilder.getExternal());
       expect(wrapper.state().data.baseQuery.data).toEqual(mockResponse);
+
     });
 
     it('always requests event_id and project_id for basic queries', async function() {
diff --git a/tests/js/spec/views/organizationDiscover/index.spec.jsx b/tests/js/spec/views/organizationDiscover/index.spec.jsx
index 44989c13ea..fc1b9ce30d 100644
--- a/tests/js/spec/views/organizationDiscover/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/index.spec.jsx
@@ -17,7 +17,7 @@ describe('OrganizationDiscoverContainer', function() {
     });
     beforeEach(async function() {
       MockApiClient.addMockResponse({
-        url: '/organizations/org-slug/discover/query/',
+        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         method: 'POST',
         body: {
           data: [{tags_key: 'tag1', count: 5}, {tags_key: 'tag2', count: 1}],
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index 7ed5b23913..4ed70e5450 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -26,7 +26,7 @@ describe('Query Builder', function() {
 
     it('loads tags', async function() {
       const discoverMock = MockApiClient.addMockResponse({
-        url: '/organizations/org-slug/discover/query/',
+        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         method: 'POST',
         body: {
           data: [{tags_key: 'tag1', count: 5}, {tags_key: 'tag2', count: 1}],
@@ -39,7 +39,7 @@ describe('Query Builder', function() {
       await queryBuilder.load();
 
       expect(discoverMock).toHaveBeenCalledWith(
-        '/organizations/org-slug/discover/query/',
+        '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         expect.objectContaining({
           data: expect.objectContaining({
             fields: ['tags_key'],
@@ -67,7 +67,7 @@ describe('Query Builder', function() {
 
     it('loads hardcoded tags when API request fails', async function() {
       const discoverMock = MockApiClient.addMockResponse({
-        url: '/organizations/org-slug/discover/query/',
+        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         method: 'POST',
       });
       const queryBuilder = createQueryBuilder(
@@ -98,8 +98,13 @@ describe('Query Builder', function() {
         TestStubs.Organization({projects: [TestStubs.Project()]})
       );
       discoverMock = MockApiClient.addMockResponse({
-        url: '/organizations/org-slug/discover/query/',
+        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         method: 'POST',
+        body: {
+          data: [],
+          timing: {},
+          meta: [],
+        },
       });
     });
 
@@ -111,7 +116,7 @@ describe('Query Builder', function() {
       const data = {projects: [1], fields: ['event_id']};
       await queryBuilder.fetch(data);
       expect(discoverMock).toHaveBeenCalledWith(
-        '/organizations/org-slug/discover/query/',
+        '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         expect.objectContaining({
           data,
         })
diff --git a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
index 4e9aef26a1..e03fb7f0a9 100644
--- a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
@@ -92,7 +92,8 @@ describe('Result', function() {
           data={data}
           organization={organization}
           savedQuery={TestStubs.DiscoverSavedQuery()}
-        />
+        />,
+        TestStubs.routerContext()
       );
     });
 
diff --git a/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx b/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
index e9cc212530..6d069bc45f 100644
--- a/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
@@ -12,7 +12,7 @@ describe('Result manager', function() {
     resultManager = createResultManager(queryBuilder);
 
     discoverMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/discover/query/',
+      url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
       method: 'POST',
       body: {
         data: [],
@@ -36,7 +36,7 @@ describe('Result manager', function() {
       await resultManager.fetchAll();
       expect(discoverMock).toHaveBeenCalledTimes(1);
       expect(discoverMock).toHaveBeenCalledWith(
-        '/organizations/org-slug/discover/query/',
+        '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         expect.objectContaining({
           data: expect.objectContaining({
             fields: ['event_id', 'project_id', 'message'],
@@ -50,7 +50,7 @@ describe('Result manager', function() {
       await resultManager.fetchAll();
       expect(discoverMock).toHaveBeenCalledTimes(2);
       expect(discoverMock).toHaveBeenCalledWith(
-        '/organizations/org-slug/discover/query/',
+        '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         expect.objectContaining({
           data: expect.objectContaining({
             aggregations: [['count()', null, 'count']],
