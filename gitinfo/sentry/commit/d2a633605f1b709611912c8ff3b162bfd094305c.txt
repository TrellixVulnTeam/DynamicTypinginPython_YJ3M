commit d2a633605f1b709611912c8ff3b162bfd094305c
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Oct 9 18:22:45 2019 -0700

    ref(members): Move invitation validation to serializer (#15027)

diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index beda7e9312..2687bf7093 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 import six
 
-from django.db import transaction, IntegrityError
+from django.db import transaction
 from django.db.models import Q
 from rest_framework import serializers
 from rest_framework.response import Response
@@ -28,6 +28,18 @@ from .organization_member_details import get_allowed_roles
 from sentry.utils.retries import TimedRetryPolicy
 
 
+@transaction.atomic
+def save_team_assignments(organization_member, teams):
+    # teams may be empty
+    OrganizationMemberTeam.objects.filter(organizationmember=organization_member).delete()
+    OrganizationMemberTeam.objects.bulk_create(
+        [
+            OrganizationMemberTeam(team=team, organizationmember=organization_member)
+            for team in teams
+        ]
+    )
+
+
 class MemberPermission(OrganizationPermission):
     scope_map = {
         "GET": ["member:read", "member:write", "member:admin"],
@@ -40,24 +52,44 @@ class MemberPermission(OrganizationPermission):
 class OrganizationMemberSerializer(serializers.Serializer):
     email = AllowedEmailField(max_length=75, required=True)
     role = serializers.ChoiceField(choices=roles.get_choices(), required=True)
-    teams = ListField(required=False, allow_null=False)
+    teams = ListField(required=False, allow_null=False, default=[])
     sendInvite = serializers.BooleanField(required=False, default=True, write_only=True)
 
+    def validate_email(self, email):
+        if OrganizationMember.objects.filter(
+            Q(email=email)
+            | Q(
+                organization=self.context["organization"],
+                user__email__iexact=email,
+                user__is_active=True,
+            )
+        ).exists():
+            raise serializers.ValidationError("The user %s is already a member" % email)
 
-class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
-    permission_classes = (MemberPermission,)
+        return email
 
-    @transaction.atomic
-    def save_team_assignments(self, organization_member, teams):
-        # teams may be empty
-        OrganizationMemberTeam.objects.filter(organizationmember=organization_member).delete()
-        OrganizationMemberTeam.objects.bulk_create(
-            [
-                OrganizationMemberTeam(team=team, organizationmember=organization_member)
-                for team in teams
-            ]
+    def validate_teams(self, teams):
+        valid_teams = list(
+            Team.objects.filter(
+                organization=self.context["organization"], status=TeamStatus.VISIBLE, slug__in=teams
+            )
         )
 
+        if len(valid_teams) != len(teams):
+            raise serializers.ValidationError("Invalid teams")
+
+        return valid_teams
+
+    def validate_role(self, role):
+        if role not in {r.id for r in self.context["allowed_roles"]}:
+            raise serializers.ValidationError("You do not have permission to invite that role.")
+
+        return role
+
+
+class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
+    permission_classes = (MemberPermission,)
+
     def get(self, request, organization):
         queryset = (
             OrganizationMember.objects.filter(
@@ -117,48 +149,23 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
 
         :auth: required
         """
-        # TODO: If the member already exists, should this still update the role and team?
-        # For now, it doesn't, but simply returns the existing object
-
         if not features.has("organizations:invite-members", organization, actor=request.user):
             return Response(
                 {"organization": "Your organization is not allowed to invite members"}, status=403
             )
 
-        serializer = OrganizationMemberSerializer(data=request.data)
+        _, allowed_roles = get_allowed_roles(request, organization)
+
+        serializer = OrganizationMemberSerializer(
+            data=request.data,
+            context={"organization": organization, "allowed_roles": allowed_roles},
+        )
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
         result = serializer.validated_data
 
-        _, allowed_roles = get_allowed_roles(request, organization)
-
-        # ensure listed teams are real teams
-        if result.get("teams"):
-            teams = list(
-                Team.objects.filter(
-                    organization=organization, status=TeamStatus.VISIBLE, slug__in=result["teams"]
-                )
-            )
-            if len(set(result["teams"])) != len(teams):
-                return Response({"teams": "Invalid team"}, 400)
-        else:
-            teams = []
-
-        if not result["role"] in {r.id for r in allowed_roles}:
-            return Response({"role": "You do not have permission to invite that role."}, 403)
-
-        # This is needed because `email` field is case sensitive, but from a user perspective,
-        # Sentry treats email as case-insensitive (Eric@example.com equals eric@example.com).
-
-        existing = OrganizationMember.objects.filter(
-            organization=organization, user__email__iexact=result["email"], user__is_active=True
-        ).exists()
-
-        if existing:
-            return Response({"email": "The user %s is already a member" % result["email"]}, 409)
-
         om = OrganizationMember(
             organization=organization,
             email=result["email"],
@@ -169,22 +176,20 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
         if settings.SENTRY_ENABLE_INVITES:
             om.token = om.generate_token()
 
-        try:
-            with transaction.atomic():
-                om.save()
-        except IntegrityError:
-            return Response({"email": "The user %s is already a member" % result["email"]}, 409)
+        with transaction.atomic():
+            om.save()
 
-        if teams:
+        if result["teams"]:
             lock = locks.get(u"org:member:{}".format(om.id), duration=5)
             with TimedRetryPolicy(10)(lock.acquire):
-                self.save_team_assignments(om, teams)
+                save_team_assignments(om, result["teams"])
 
         if settings.SENTRY_ENABLE_INVITES and result.get("sendInvite"):
             om.send_invite_email()
             member_invited.send_robust(
                 member=om, user=request.user, sender=self, referrer=request.data.get("referrer")
             )
+
         self.create_audit_entry(
             request=request,
             organization_id=organization.id,
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index 060fcedd7b..a61c3bab6e 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -173,7 +173,7 @@ class OrganizationMemberListTest(APITestCase):
                 self.url, {"email": user.email, "role": "member", "teams": [self.team.slug]}
             )
 
-        assert resp.status_code == 409
+        assert resp.status_code == 400
 
         member = OrganizationMember.objects.get(id=member.id)
 
@@ -224,7 +224,7 @@ class OrganizationMemberListTest(APITestCase):
             self.url, {"email": "eric@localhost", "role": "owner", "teams": [self.team.slug]}
         )
 
-        assert response.status_code == 403
+        assert response.status_code == 400
 
         response = self.client.post(
             self.url, {"email": "eric@localhost", "role": "manager", "teams": [self.team.slug]}
@@ -235,7 +235,7 @@ class OrganizationMemberListTest(APITestCase):
             self.url, {"email": "eric@localhost", "role": "member", "teams": [self.team.slug]}
         )
 
-        assert response.status_code == 409
+        assert response.status_code == 400
 
     def test_admin_invites(self):
         admin_user = self.create_user("admin22@localhost")
