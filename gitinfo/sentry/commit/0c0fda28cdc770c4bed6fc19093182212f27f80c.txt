commit 0c0fda28cdc770c4bed6fc19093182212f27f80c
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Dec 19 11:28:42 2017 -0800

    fix(filters): Include Exception interface in message filter checks (#6672)

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index bc51a7a715..abf29a129e 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -331,6 +331,11 @@ class ClientApiHelper(object):
         if error_message and not is_valid_error_message(project, error_message):
             return (True, FilterStatKeys.ERROR_MESSAGE)
 
+        for exception_interface in data.get('sentry.interfaces.Exception', {}).get('values', []):
+            message = u': '.join(filter(None, map(exception_interface.get, ['type', 'value'])))
+            if message and not is_valid_error_message(project, message):
+                return (True, FilterStatKeys.ERROR_MESSAGE)
+
         for filter_cls in filters.all():
             filter_obj = filter_cls(project)
             if filter_obj.is_enabled() and filter_obj.test(data):
diff --git a/tests/sentry/test_coreapi.py b/tests/sentry/test_coreapi.py
new file mode 100644
index 0000000000..ff0b2be124
--- /dev/null
+++ b/tests/sentry/test_coreapi.py
@@ -0,0 +1,52 @@
+from __future__ import absolute_import
+from collections import namedtuple
+
+import mock
+from sentry.coreapi import ClientApiHelper
+from sentry.testutils import TestCase
+from sentry.utils.data_filters import FilterStatKeys
+
+
+class ClientApiHelperTestCase(TestCase):
+    @mock.patch('sentry.coreapi.is_valid_error_message')
+    def test_should_filter_message(self, mock_is_valid_error_message):
+
+        TestItem = namedtuple('TestItem', 'value formatted result')
+
+        helper = ClientApiHelper()
+
+        items = [
+            TestItem(
+                {'type': 'UnfilteredException'},
+                'UnfilteredException',
+                True,
+            ),
+            TestItem(
+                {'value': 'This is an unfiltered exception.'},
+                'This is an unfiltered exception.',
+                True,
+            ),
+            TestItem(
+                {'type': 'UnfilteredException', 'value': 'This is an unfiltered exception.'},
+                'UnfilteredException: This is an unfiltered exception.',
+                True,
+            ),
+            TestItem(
+                {'type': 'FilteredException', 'value': 'This is a filtered exception.'},
+                'FilteredException: This is a filtered exception.',
+                False,
+            ),
+        ]
+
+        data = {
+            'sentry.interfaces.Exception': {
+                'values': [item.value for item in items]
+            },
+        }
+
+        mock_is_valid_error_message.side_effect = [item.result for item in items]
+
+        assert helper.should_filter(self.project, data) == (True, FilterStatKeys.ERROR_MESSAGE)
+
+        assert mock_is_valid_error_message.call_args_list == [
+            mock.call(self.project, item.formatted) for item in items]
