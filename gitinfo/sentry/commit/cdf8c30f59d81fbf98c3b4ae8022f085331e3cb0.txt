commit cdf8c30f59d81fbf98c3b4ae8022f085331e3cb0
Author: Mark Story <mark@sentry.io>
Date:   Mon Nov 18 11:20:03 2019 -0500

    ref(discover) Remove EventViewV1 (#15625)
    
    We don't need to have two internal formats for event views. This code is
    no longer necessary.

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 5385cc0b8e..b62846bb1b 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -391,18 +391,6 @@ export type AccessRequest = {
   member: Member;
 };
 
-export type EventViewv1 = {
-  name: string;
-  data: {
-    fields: string[];
-    fieldnames: string[];
-    sort: string[];
-    query?: string;
-  };
-  tags: string[];
-  statsPeriod?: string;
-};
-
 export type Repository = {
   dateCreated: string;
   externalSlug: string;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index e35274b9fe..b2d9fbbd55 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -11,8 +11,9 @@ import UserBadge from 'app/components/idBadge/userBadge';
 import getDynamicText from 'app/utils/getDynamicText';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import pinIcon from 'app/../images/location-pin.png';
-import {EventViewv1, Organization} from 'app/types';
+import {Organization} from 'app/types';
 import Duration from 'app/components/duration';
+import {NewQuery} from 'app/stores/discoverSavedQueriesStore';
 
 import {QueryLink} from './styles';
 import {generateEventDetailsRoute, generateEventSlug} from './eventDetails/utils';
@@ -20,113 +21,121 @@ import {generateEventDetailsRoute, generateEventSlug} from './eventDetails/utils
 export const PIN_ICON = `image://${pinIcon}`;
 export const AGGREGATE_ALIASES = ['p95', 'p75', 'last_seen', 'latest_event'] as const;
 
-export const DEFAULT_EVENT_VIEW_V1: Readonly<EventViewv1> = {
+export const DEFAULT_EVENT_VIEW: Readonly<NewQuery> = {
+  id: undefined,
   name: t('All Events'),
-  data: {
-    fields: ['title', 'event.type', 'project', 'user', 'timestamp'],
-    fieldnames: ['title', 'type', 'project', 'user', 'time'],
-    sort: ['-timestamp'],
-  },
+  query: '',
+  projects: [],
+  fields: ['title', 'event.type', 'project', 'user', 'timestamp'],
+  fieldnames: ['title', 'type', 'project', 'user', 'time'],
+  orderby: '-timestamp',
+  version: 2,
   tags: ['event.type', 'release', 'project.name', 'user.email', 'user.ip', 'environment'],
 };
 
-export const TRANSACTION_VIEWS: Readonly<Array<EventViewv1>> = [
+export const TRANSACTION_VIEWS: Readonly<Array<NewQuery>> = [
   {
+    id: undefined,
     name: t('Transactions'),
-    data: {
-      fields: [
-        'transaction',
-        'project',
-        'count(id)',
-        'avg(transaction.duration)',
-        'p75',
-        'p95',
-      ],
-      fieldnames: ['transaction', 'project', '# of events', 'avg', '75th', '95th'],
-      sort: ['-count_id'],
-      query: 'event.type:transaction',
-    },
+    fields: [
+      'transaction',
+      'project',
+      'count(id)',
+      'avg(transaction.duration)',
+      'p75',
+      'p95',
+    ],
+    fieldnames: ['transaction', 'project', '# of events', 'avg', '75th', '95th'],
+    orderby: '-count_id',
+    query: 'event.type:transaction',
     tags: ['release', 'project.name', 'user.email', 'user.ip', 'environment'],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Transactions by User'),
-    data: {
-      fields: [
-        'user',
-        'count(id)',
-        'count_unique(transaction)',
-        'avg(transaction.duration)',
-        'p75',
-        'p95',
-      ],
-      fieldnames: ['user', '# of events', 'unique transactions', 'avg', '75th', '95th'],
-      sort: ['-count_id'],
-      query: 'event.type:transaction',
-    },
+    fields: [
+      'user',
+      'count(id)',
+      'count_unique(transaction)',
+      'avg(transaction.duration)',
+      'p75',
+      'p95',
+    ],
+    fieldnames: ['user', '# of events', 'unique transactions', 'avg', '75th', '95th'],
+    orderby: '-count_id',
+    query: 'event.type:transaction',
     tags: ['release', 'project.name', 'user.email', 'user.ip', 'environment'],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Transactions by Region'),
-    data: {
-      fields: ['geo.region', 'count(id)', 'avg(transaction.duration)', 'p75', 'p95'],
-      fieldnames: ['Region', '# of events', 'avg', '75th', '95th'],
-      sort: ['-count_id'],
-      query: 'event.type:transaction',
-    },
+    fields: ['geo.region', 'count(id)', 'avg(transaction.duration)', 'p75', 'p95'],
+    fieldnames: ['Region', '# of events', 'avg', '75th', '95th'],
+    orderby: '-count_id',
+    query: 'event.type:transaction',
     tags: ['release', 'project.name', 'user.email', 'user.ip', 'environment'],
+    projects: [],
+    version: 2,
   },
 ];
 
-export const ALL_VIEWS: Readonly<Array<EventViewv1>> = [
-  DEFAULT_EVENT_VIEW_V1,
+export const ALL_VIEWS: Readonly<Array<NewQuery>> = [
+  DEFAULT_EVENT_VIEW,
   {
+    id: undefined,
     name: t('Project Summary'),
-    data: {
-      fields: ['project', 'count(id)', 'count_unique(issue.id)'],
-      fieldnames: ['project', '# of events', 'unique errors'],
-      sort: ['-count_id'],
-      query: 'event.type:error',
-    },
+    fields: ['project', 'count(id)', 'count_unique(issue.id)'],
+    fieldnames: ['project', '# of events', 'unique errors'],
+    orderby: '-count_id',
+    query: 'event.type:error',
     tags: ['error.type', 'project.name', 'release', 'environment'],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Errors'),
-    data: {
-      fields: ['title', 'count(id)', 'count_unique(user)', 'project', 'last_seen'],
-      fieldnames: ['error', '# of events', 'users', 'project', 'last seen'],
-      sort: ['-count_id', '-title'],
-      query: 'event.type:error',
-    },
+    fields: ['title', 'count(id)', 'count_unique(user)', 'project', 'last_seen'],
+    fieldnames: ['error', '# of events', 'users', 'project', 'last seen'],
+    orderby: '-count_id',
+    query: 'event.type:error',
     tags: ['project.name', 'release', 'environment'],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Errors by URL'),
-    data: {
-      fields: ['url', 'count(id)', 'count_unique(issue.id)'],
-      fieldnames: ['URL', '# of events', 'unique errors'],
-      sort: ['-count_id'],
-      query: 'event.type:error',
-    },
+    fields: ['url', 'count(id)', 'count_unique(issue.id)'],
+    fieldnames: ['URL', '# of events', 'unique errors'],
+    orderby: '-count_id',
+    query: 'event.type:error',
     tags: ['error.type', 'project.name', 'url', 'release', 'environment'],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Errors by User'),
-    data: {
-      fields: ['user', 'count(id)', 'count_unique(issue.id)'],
-      fieldnames: ['User', '# of events', 'unique errors'],
-      sort: ['-count_id'],
-      query: 'event.type:error',
-    },
+    fields: ['user', 'count(id)', 'count_unique(issue.id)'],
+    fieldnames: ['User', '# of events', 'unique errors'],
+    orderby: '-count_id',
+    query: 'event.type:error',
     tags: ['user.id', 'project.name', 'url', 'release', 'environment'],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Content Security Policy (CSP)'),
-    data: {
-      fields: ['title', 'count(id)', 'count_unique(user)', 'project', 'last_seen'],
-      fieldnames: ['csp', '# of events', 'users', 'project', 'last seen'],
-      sort: ['-count_id', '-title'],
-      query: 'event.type:csp',
-    },
+    fields: ['title', 'count(id)', 'count_unique(user)', 'project', 'last_seen'],
+    fieldnames: ['csp', '# of events', 'users', 'project', 'last seen'],
+    orderby: '-count_id',
+    query: 'event.type:csp',
     tags: [
       'project.name',
       'blocked-uri',
@@ -136,15 +145,16 @@ export const ALL_VIEWS: Readonly<Array<EventViewv1>> = [
       'release',
       'environment',
     ],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Content Security Policy (CSP) Report by Directive'),
-    data: {
-      fields: ['effective-directive', 'count(id)', 'count_unique(title)'],
-      fieldnames: ['directive', '# of events', 'reports'],
-      sort: ['-count_id'],
-      query: 'event.type:csp',
-    },
+    fields: ['effective-directive', 'count(id)', 'count_unique(title)'],
+    fieldnames: ['directive', '# of events', 'reports'],
+    orderby: '-count_id',
+    query: 'event.type:csp',
     tags: [
       'project.name',
       'blocked-uri',
@@ -153,15 +163,16 @@ export const ALL_VIEWS: Readonly<Array<EventViewv1>> = [
       'release',
       'environment',
     ],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Content Security Policy (CSP) Report by Blocked URI'),
-    data: {
-      fields: ['blocked-uri', 'count(id)'],
-      fieldnames: ['URI', '# of events'],
-      sort: ['-count_id'],
-      query: 'event.type:csp',
-    },
+    fields: ['blocked-uri', 'count(id)'],
+    fieldnames: ['URI', '# of events'],
+    orderby: '-count_id',
+    query: 'event.type:csp',
     tags: [
       'project.name',
       'blocked-uri',
@@ -170,15 +181,16 @@ export const ALL_VIEWS: Readonly<Array<EventViewv1>> = [
       'release',
       'environment',
     ],
+    projects: [],
+    version: 2,
   },
   {
+    id: undefined,
     name: t('Content Security Policy (CSP) Report by User'),
-    data: {
-      fields: ['user', 'count(id)', 'count_unique(title)'],
-      fieldnames: ['User', '# of events', 'reports'],
-      sort: ['-count_id'],
-      query: 'event.type:csp',
-    },
+    fields: ['user', 'count(id)', 'count_unique(title)'],
+    fieldnames: ['User', '# of events', 'reports'],
+    orderby: '-count_id',
+    query: 'event.type:csp',
     tags: [
       'project.name',
       'blocked-uri',
@@ -187,6 +199,8 @@ export const ALL_VIEWS: Readonly<Array<EventViewv1>> = [
       'release',
       'environment',
     ],
+    projects: [],
+    version: 2,
   },
 ];
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index ff5ae11e87..53928ecf6c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -6,7 +6,6 @@ import isEqual from 'lodash/isEqual';
 import moment from 'moment';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
-import {EventViewv1} from 'app/types';
 import {SavedQuery as LegacySavedQuery} from 'app/views/discover/types';
 import {SavedQuery, NewQuery} from 'app/stores/discoverSavedQueriesStore';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
@@ -271,12 +270,12 @@ const decodeScalar = (
 };
 
 function isLegacySavedQuery(
-  query: LegacySavedQuery | SavedQuery
+  query: LegacySavedQuery | NewQuery
 ): query is LegacySavedQuery {
   return (query as LegacySavedQuery).conditions !== undefined;
 }
 
-const queryStringFromSavedQuery = (saved: LegacySavedQuery | SavedQuery): string => {
+const queryStringFromSavedQuery = (saved: NewQuery | LegacySavedQuery): string => {
   if (!isLegacySavedQuery(saved) && saved.query) {
     return saved.query || '';
   }
@@ -382,37 +381,7 @@ class EventView {
     });
   }
 
-  static fromEventViewv1(eventViewV1: EventViewv1): EventView {
-    const fields = eventViewV1.data.fields.map((fieldName: string, index: number) => {
-      return {
-        field: fieldName,
-        title: eventViewV1.data.fieldnames[index],
-      };
-    });
-
-    const {start, end, statsPeriod} = getParams({
-      start: undefined,
-      end: undefined,
-      statsPeriod: eventViewV1.statsPeriod,
-    });
-
-    return new EventView({
-      fields,
-      id: undefined,
-      name: eventViewV1.name,
-      sorts: fromSorts(eventViewV1.data.sort),
-      tags: eventViewV1.tags,
-      query: eventViewV1.data.query || '',
-      project: [],
-      environment: [],
-      start: decodeScalar(start),
-      end: decodeScalar(end),
-      statsPeriod: decodeScalar(statsPeriod),
-      yAxis: undefined,
-    });
-  }
-
-  static fromSavedQuery(saved: SavedQuery | LegacySavedQuery): EventView {
+  static fromSavedQuery(saved: NewQuery | LegacySavedQuery): EventView {
     let fields, yAxis;
     if (isLegacySavedQuery(saved)) {
       fields = saved.fields.map(field => {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index ebab720266..85d089777b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -26,7 +26,7 @@ import Events from './events';
 import SavedQueryButtonGroup from './savedQuery';
 import EventView from './eventView';
 import EventInputName from './eventInputName';
-import {DEFAULT_EVENT_VIEW_V1} from './data';
+import {DEFAULT_EVENT_VIEW} from './data';
 import QueryList from './queryList';
 import DiscoverBreadcrumb from './breadcrumb';
 import {generateTitle} from './utils';
@@ -84,7 +84,7 @@ class DiscoverLanding extends React.Component<Props> {
       return null;
     }
 
-    const eventView = EventView.fromEventViewv1(DEFAULT_EVENT_VIEW_V1);
+    const eventView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
 
     const to = {
       pathname: location.pathname,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index 7583ea34f0..4329bbd957 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -74,8 +74,8 @@ class QueryList extends React.Component<Props> {
       views = [...ALL_VIEWS, ...TRANSACTION_VIEWS];
     }
 
-    const list = views.map((eventViewv1, index) => {
-      const eventView = EventView.fromEventViewv1(eventViewv1);
+    const list = views.map((view, index) => {
+      const eventView = EventView.fromSavedQuery(view);
       const to = {
         pathname: location.pathname,
         query: {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index a66c898bfa..aeebd5cfa1 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -10,7 +10,7 @@ import withApi from 'app/utils/withApi';
 import Pagination from 'app/components/pagination';
 import {fetchOrganizationTags} from 'app/actionCreators/tags';
 
-import {DEFAULT_EVENT_VIEW_V1} from '../data';
+import {DEFAULT_EVENT_VIEW} from '../data';
 import EventView, {isAPIPayloadSimilar} from '../eventView';
 import TableView from './tableView';
 import {TableData} from './types';
@@ -53,7 +53,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
     const {location, eventView} = this.props;
 
     if (!eventView.isValid()) {
-      const nextEventView = EventView.fromEventViewv1(DEFAULT_EVENT_VIEW_V1);
+      const nextEventView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
 
       browserHistory.replace({
         pathname: location.pathname,
diff --git a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
index e5d9f58d81..09c73ee68e 100644
--- a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
@@ -3,12 +3,12 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 
 import EventDetails from 'app/views/eventsV2/eventDetails';
-import {ALL_VIEWS, DEFAULT_EVENT_VIEW_V1} from 'app/views/eventsV2/data';
+import {ALL_VIEWS, DEFAULT_EVENT_VIEW} from 'app/views/eventsV2/data';
 import EventView from 'app/views/eventsV2/eventView';
 
 describe('EventsV2 > EventDetails', function() {
-  const allEventsView = EventView.fromEventViewv1(DEFAULT_EVENT_VIEW_V1);
-  const errorsView = EventView.fromEventViewv1(
+  const allEventsView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
+  const errorsView = EventView.fromSavedQuery(
     ALL_VIEWS.find(view => view.name === 'Errors')
   );
 
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index 8a973945a2..a2b03396f4 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -33,12 +33,12 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
   };
 
   const errorsQuery = ALL_VIEWS.find(view => view.name === 'Errors');
-  const errorsView = EventView.fromEventViewv1(errorsQuery);
+  const errorsView = EventView.fromSavedQuery(errorsQuery);
 
-  const errorsViewSaved = EventView.fromEventViewv1(errorsQuery);
+  const errorsViewSaved = EventView.fromSavedQuery(errorsQuery);
   errorsViewSaved.id = '1';
 
-  const errorsViewModified = EventView.fromEventViewv1(errorsQuery);
+  const errorsViewModified = EventView.fromSavedQuery(errorsQuery);
   errorsViewModified.id = '1';
   errorsViewModified.name = 'Modified Name';
   errorsViewModified.fields[0].title = 'Modified Field Name';
diff --git a/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
index c5dfaaac13..91d4e6de44 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
@@ -12,7 +12,7 @@ describe('SavedQueries API helpers', () => {
   const organization = TestStubs.Organization();
 
   const errorsQuery = ALL_VIEWS.find(view => view.name === 'Errors');
-  const errorsView = EventView.fromEventViewv1(errorsQuery);
+  const errorsView = EventView.fromSavedQuery(errorsQuery);
   errorsView.id = '1'; // set id manually as errorsView.id is undefined
 
   afterEach(() => {
