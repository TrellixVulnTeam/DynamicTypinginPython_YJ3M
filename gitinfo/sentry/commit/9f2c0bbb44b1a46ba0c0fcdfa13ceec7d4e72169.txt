commit 9f2c0bbb44b1a46ba0c0fcdfa13ceec7d4e72169
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Wed Sep 14 11:00:31 2016 -0700

    Prevent reports without aggregate values from inclusion in organization reports. (#4122)

diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index d0f1b44071..ccc8805e0f 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -568,6 +568,12 @@ def user_subscribed_to_organization_reports(user, organization):
 class Skipped(object):
     NotSubscribed = object()
     NoProjects = object()
+    NoReports = object()
+
+
+def has_valid_aggregates(interval, (project, report)):
+    _, aggregates, _, _ = report
+    return any(bool(value) for value in aggregates)
 
 
 @instrumented_task(
@@ -587,9 +593,7 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
 
     projects = set()
     for team in Team.objects.get_for_user(organization, user):
-        projects.update(
-            Project.objects.get_for_user(team, user, _skip_team_check=True),
-        )
+        projects.update(Project.objects.get_for_user(team, user, _skip_team_check=True))
 
     if not projects:
         logger.debug(
@@ -599,6 +603,36 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
         )
         return Skipped.NoProjects
 
+    interval = _to_interval(timestamp, duration)
+    projects = list(projects)
+
+    inclusion_predicates = [
+        has_valid_aggregates,
+    ]
+
+    reports = [
+        report for project, report in
+        filter(
+            lambda item: all(predicate(interval, item) for predicate in inclusion_predicates),
+            zip(
+                projects,
+                backend.fetch(  # TODO: This should handle missing data gracefully, maybe?
+                    timestamp,
+                    duration,
+                    organization,
+                    projects,
+                ),
+            )
+        )
+    ]
+
+    if not reports:
+        logger.debug('Skipping report for %r to %r, no qualifying reports to deliver.',
+            organization,
+            user,
+        )
+        return Skipped.NoReports
+
     message = build_message(
         timestamp,
         duration,
@@ -606,12 +640,7 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
         user,
         reduce(
             merge_reports,
-            backend.fetch(  # TODO: This should handle missing data gracefully, maybe?
-                timestamp,
-                duration,
-                organization,
-                projects,
-            ),
+            reports,
         )
     )
 
diff --git a/tests/sentry/tasks/test_reports.py b/tests/sentry/tasks/test_reports.py
index 7f62464cee..04f969c085 100644
--- a/tests/sentry/tasks/test_reports.py
+++ b/tests/sentry/tasks/test_reports.py
@@ -1,20 +1,29 @@
 from __future__ import absolute_import
 
 import functools
+from datetime import datetime, timedelta
 
 import mock
 import pytest
+import pytz
 from django.core import mail
 
+from sentry.app import tsdb
 from sentry.models import Project, UserOption
 from sentry.tasks.reports import (
-    DISABLED_ORGANIZATIONS_USER_OPTION_KEY, Skipped, change, clean_series,
-    deliver_organization_user_report, merge_mappings, merge_sequences,
-    merge_series, prepare_reports, safe_add,
+    DISABLED_ORGANIZATIONS_USER_OPTION_KEY, Skipped, change,
+    clean_series, deliver_organization_user_report, has_valid_aggregates,
+    merge_mappings, merge_sequences, merge_series, prepare_reports, safe_add,
     user_subscribed_to_organization_reports
 )
 from sentry.testutils.cases import TestCase
-from sentry.utils.dates import to_datetime
+from sentry.utils.dates import to_datetime, to_timestamp
+
+
+@pytest.yield_fixture(scope="module")
+def interval():
+    stop = datetime(2016, 9, 12, tzinfo=pytz.utc)
+    yield stop - timedelta(days=7), stop
 
 
 def test_change():
@@ -156,11 +165,35 @@ def test_clean_series_rejects_offset_timestamp():
         )
 
 
+def test_has_valid_aggregates(interval):
+    project = None  # parameter is unused
+
+    def make_report(aggregates):
+        return None, aggregates, None, None
+
+    assert has_valid_aggregates(
+        interval,
+        (project, make_report([None] * 4)),
+    ) is False
+
+    assert has_valid_aggregates(
+        interval,
+        (project, make_report([0] * 4)),
+    ) is False
+
+    assert has_valid_aggregates(
+        interval,
+        (project, make_report([1, 0, 0, 0])),
+    ) is True
+
+
 class ReportTestCase(TestCase):
     @mock.patch('sentry.features.has')
     def test_integration(self, has_feature):
         Project.objects.all().delete()
 
+        now = datetime(2016, 9, 12, tzinfo=pytz.utc)
+
         has_feature.side_effect = lambda name, *a, **k: {
             'organizations:reports:deliver': True,
             'organizations:reports:prepare': True,
@@ -171,10 +204,16 @@ class ReportTestCase(TestCase):
             team=self.team,
         )
 
+        tsdb.incr(
+            tsdb.models.project,
+            project.id,
+            now - timedelta(days=1),
+        )
+
         member_set = set(project.team.member_set.all())
 
         with self.tasks():
-            prepare_reports()
+            prepare_reports(timestamp=to_timestamp(now))
             assert len(mail.outbox) == len(member_set) == 1
 
             message = mail.outbox[0]
