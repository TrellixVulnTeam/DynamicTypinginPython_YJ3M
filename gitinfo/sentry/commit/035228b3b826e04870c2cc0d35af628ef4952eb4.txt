commit 035228b3b826e04870c2cc0d35af628ef4952eb4
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Jun 25 11:07:27 2018 -0700

    fix(utils): unify stringifyRouteList and getRouteStringFromRoutes (#8833)

diff --git a/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx b/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx
index a7041ef95a..3729a7e35f 100644
--- a/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx
+++ b/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx
@@ -1,7 +1,7 @@
 import Reflux from 'reflux';
 
-import {stringifyRouteList} from 'app/utils';
 import SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 const SettingsBreadcrumbStore = Reflux.createStore({
   init() {
@@ -19,12 +19,12 @@ const SettingsBreadcrumbStore = Reflux.createStore({
   },
 
   onUpdateRouteMap({routes, title}) {
-    this.pathMap[stringifyRouteList(routes)] = title;
+    this.pathMap[getRouteStringFromRoutes(routes)] = title;
     this.trigger(this.pathMap);
   },
 
   onTrimMappings(routes) {
-    const routePath = stringifyRouteList(routes);
+    const routePath = getRouteStringFromRoutes(routes);
     for (const fullPath in this.pathMap) {
       if (!routePath.startsWith(fullPath)) delete this.pathMap[fullPath];
     }
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 05a12ab5e7..e215b1ef30 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -220,13 +220,6 @@ export function sortProjects(projects) {
   return projects.sort(projectDisplayCompare);
 }
 
-// Map a routes list into a string
-export const stringifyRouteList = routes =>
-  routes
-    .filter(r => r.path)
-    .map(r => r.path.replace(/\/$/, ''))
-    .join('') + '/';
-
 //build actorIds
 export const buildUserId = id => `user:${id}`;
 export const buildTeamId = id => `team:${id}`;
diff --git a/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx b/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx
index e7029aa720..cb7e7a6347 100644
--- a/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx
+++ b/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx
@@ -12,10 +12,10 @@ export default function getRouteStringFromRoutes(routes) {
   // Strip the first route (path: '/') since the subsequent children routes
   // are all absolute paths
   return (
+    '/' +
     routes
-      .splice(1)
-      .filter(({path}) => path)
-      .map(({path}) => path)
-      .join('') || ''
+      .filter(r => r.path)
+      .map(r => r.path.replace(/^\//, ''))
+      .join('')
   );
 }
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
index ea0145d030..ecf8705d13 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
@@ -4,7 +4,6 @@ import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
-import {stringifyRouteList} from 'app/utils';
 import Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';
 import Divider from 'app/views/settings/components/settingsBreadcrumb/divider';
 import InlineSvg from 'app/components/inlineSvg';
@@ -15,6 +14,7 @@ import SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';
 import SettingsBreadcrumbStore from 'app/stores/settingsBreadcrumbStore';
 import TeamCrumb from 'app/views/settings/components/settingsBreadcrumb/teamCrumb';
 import TextLink from 'app/components/textLink';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 import recreateRoute from 'app/utils/recreateRoute';
 
 const MENUS = {
@@ -54,7 +54,7 @@ class SettingsBreadcrumb extends React.Component {
         </LogoLink>
         {routes.map((route, i) => {
           if (!route.name) return null;
-          let pathTitle = pathMap[stringifyRouteList(routes.slice(0, i + 1))];
+          let pathTitle = pathMap[getRouteStringFromRoutes(routes.slice(0, i + 1))];
           let isLast = i === lastRouteIndex;
           let createMenu = MENUS[route.name];
           let Menu = typeof createMenu === 'function' && createMenu;
diff --git a/tests/js/spec/utils/getRouteStringFromRoutes.spec.jsx b/tests/js/spec/utils/getRouteStringFromRoutes.spec.jsx
index a2e3f29f05..740b9d97c0 100644
--- a/tests/js/spec/utils/getRouteStringFromRoutes.spec.jsx
+++ b/tests/js/spec/utils/getRouteStringFromRoutes.spec.jsx
@@ -10,7 +10,7 @@ describe('getRouteStringFromRoutes', function() {
   ];
   it('can get a route string from routes array and skips routes that do not have a path', function() {
     expect(getRouteStringFromRoutes(routes)).toBe(
-      '/:orgId//organizations/:orgId/api-keys/'
+      '/:orgId/organizations/:orgId/api-keys/'
     );
   });
 
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
index bef9b7372a..5ea20c3367 100644
--- a/tests/js/spec/utils/utils.spec.jsx
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -4,7 +4,6 @@ import {
   parseRepo,
   explodeSlug,
   sortProjects,
-  stringifyRouteList,
 } from 'app/utils';
 
 describe('utils.valueIsEqual', function() {
@@ -235,16 +234,3 @@ describe('utils.projectDisplayCompare', function() {
     ]);
   });
 });
-
-describe('utils.stringifyRouteList', function() {
-  it('converts a routes list into a string', function() {
-    const routes = [
-      {path: '/one/'},
-      {path: '/two/'},
-      {path: undefined},
-      {path: '/three/'},
-      {path: '/:someKey/'},
-    ];
-    expect(stringifyRouteList(routes)).toEqual('/one/two/three/:someKey/');
-  });
-});
