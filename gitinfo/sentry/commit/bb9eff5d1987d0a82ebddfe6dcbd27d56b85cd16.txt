commit bb9eff5d1987d0a82ebddfe6dcbd27d56b85cd16
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Nov 15 10:53:13 2018 -0800

    feat(discover): Allow lowercase condition operator input (#10603)
    
    Transforms condition operators to uppercase if entered as lowercase
    Applies to IS NULL, IS NOT NULL, LIKE, NOT LIKE

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
index f279e6d57a..261cf671b3 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
@@ -4,7 +4,7 @@ import {Box} from 'grid-emotion';
 import {t} from 'app/locale';
 import SelectControl from 'app/components/forms/selectControl';
 
-import {getInternal, getExternal, isValidCondition} from './utils';
+import {getInternal, getExternal, isValidCondition, ignoreCase} from './utils';
 import {CONDITION_OPERATORS, ARRAY_FIELD_PREFIXES} from '../data';
 import {PlaceholderText} from '../styles';
 
@@ -86,8 +86,8 @@ export default class Condition extends React.Component {
     });
   }
 
-  filterOptions = (options, input) => {
-    input = input || this.state.inputValue;
+  filterOptions = options => {
+    const input = this.state.inputValue;
 
     let optionList = options;
     const external = getExternal(input, this.props.columns);
@@ -122,6 +122,7 @@ export default class Condition extends React.Component {
   };
 
   isValidNewOption = ({label}) => {
+    label = ignoreCase(label);
     return isValidCondition(getExternal(label, this.props.columns), this.props.columns);
   };
 
@@ -148,12 +149,20 @@ export default class Condition extends React.Component {
 
   handleInputChange = value => {
     this.setState({
-      inputValue: value,
+      inputValue: ignoreCase(value),
     });
 
     return value;
   };
 
+  newOptionCreator = ({label, labelKey, valueKey}) => {
+    label = ignoreCase(label);
+    return {
+      [valueKey]: label,
+      [labelKey]: label,
+    };
+  };
+
   render() {
     return (
       <Box w={1}>
@@ -179,6 +188,7 @@ export default class Condition extends React.Component {
           promptTextCreator={text => text}
           shouldKeyDownEventCreateNewOption={this.shouldKeyDownEventCreateNewOption}
           disabled={this.props.disabled}
+          newOptionCreator={this.newOptionCreator}
         />
       </Box>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
index 0cbce90a4c..b2db1dab12 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
@@ -107,3 +107,35 @@ export function getExternal(internal, columns) {
 
   return external;
 }
+
+/**
+* Transform casing of condition operators to uppercase. Applies to the operators
+* IS NULL, IS NOT NULL, LIKE and NOT LIKE
+*
+* @param {String} input Condition string as input by user
+* @returns {String}
+*/
+
+export function ignoreCase(input = '') {
+  const colName = input.split(' ')[0];
+
+  // Strip column name from the start
+  const match = input.match(/^[\w._]+\s(.*)/);
+  let remaining = match ? match[1] : null;
+
+  if (!remaining) {
+    return input;
+  }
+
+  for (let i = 0; i < CONDITION_OPERATORS.length; i++) {
+    const operator = CONDITION_OPERATORS[i];
+
+    if (operator.startsWith(remaining.toUpperCase())) {
+      return `${colName} ${remaining.toUpperCase()}`;
+    } else if (remaining.toUpperCase().startsWith(operator)) {
+      return `${colName} ${operator} ${remaining.slice(operator.length + 1)}`;
+    }
+  }
+
+  return input;
+}
diff --git a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
index dbb969b2e4..f1810414ca 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
@@ -45,19 +45,22 @@ describe('Condition', function() {
     });
 
     it('renders operator options for string column', function() {
-      const options = wrapper.instance().filterOptions([], 'col1');
+      wrapper.setState({inputValue: 'col1'});
+      const options = wrapper.instance().filterOptions([]);
       expect(options).toHaveLength(6);
       expect(options[0]).toEqual({value: 'col1 =', label: 'col1 ='});
     });
 
     it('renders operator options for number column', function() {
-      const options = wrapper.instance().filterOptions([], 'col2');
+      wrapper.setState({inputValue: 'col2'});
+      const options = wrapper.instance().filterOptions([]);
       expect(options).toHaveLength(8);
       expect(options[0]).toEqual({value: 'col2 >', label: 'col2 >'});
     });
 
     it('renders operator options for datetime column', function() {
-      const options = wrapper.instance().filterOptions([], 'col3');
+      wrapper.setState({inputValue: 'col3'});
+      const options = wrapper.instance().filterOptions([]);
       expect(options).toHaveLength(8);
       expect(options[0]).toEqual({value: 'col3 >', label: 'col3 >'});
       expect(options[1]).toEqual({value: 'col3 <', label: 'col3 <'});
@@ -70,7 +73,8 @@ describe('Condition', function() {
     });
 
     it('limits operators to = and != for array fields', function() {
-      const options = wrapper.instance().filterOptions([], 'error.type');
+      wrapper.setState({inputValue: 'error.type'});
+      const options = wrapper.instance().filterOptions([]);
       expect(options).toHaveLength(2);
       expect(options[0].value).toEqual('error.type =');
       expect(options[1].value).toEqual('error.type !=');
diff --git a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
index 7037f3bc00..5ef5d222ce 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/utils.spec.jsx
@@ -2,6 +2,7 @@ import {
   getInternal,
   getExternal,
   isValidCondition,
+  ignoreCase,
 } from 'app/views/organizationDiscover/conditions/utils';
 
 import {COLUMNS} from 'app/views/organizationDiscover/data';
@@ -80,4 +81,35 @@ describe('Conditions', function() {
       expect(isValidCondition(['device_name', 'iS', '%something%'], COLUMNS)).toBe(false);
     });
   });
+
+  describe('ignoreCase()', function() {
+    const conditionCases = [
+      {
+        input: '',
+        output: '',
+      },
+      {
+        input: 'event_id like %test%',
+        output: 'event_id LIKE %test%',
+      },
+      {
+        input: 'event_id IS Nul',
+        output: 'event_id IS NUL',
+      },
+      {
+        input: 'event_id = asdf',
+        output: 'event_id = asdf',
+      },
+      {
+        input: 'event_id IS not null',
+        output: 'event_id IS NOT NULL',
+      },
+    ];
+
+    it('uppercases condition operators', function() {
+      conditionCases.forEach(({input, output}) => {
+        expect(ignoreCase(input)).toBe(output);
+      });
+    });
+  });
 });
