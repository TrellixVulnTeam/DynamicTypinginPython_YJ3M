commit 1d10dc37d88f93e54f8b7fb48174cf2675e73fcb
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 12 16:46:50 2013 -0800

    Remove Alert.users and add Alert.maybe_alert

diff --git a/src/sentry/migrations/0091_auto__add_alert.py b/src/sentry/migrations/0091_auto__add_alert.py
index 2d5df6e5ec..5510c12970 100644
--- a/src/sentry/migrations/0091_auto__add_alert.py
+++ b/src/sentry/migrations/0091_auto__add_alert.py
@@ -19,22 +19,11 @@ class Migration(SchemaMigration):
         ))
         db.send_create_signal('sentry', ['Alert'])
 
-        # Adding M2M table for field users on 'Alert'
-        db.create_table('sentry_alert_users', (
-            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
-            ('alert', models.ForeignKey(orm['sentry.alert'], null=False)),
-            ('user', models.ForeignKey(orm['auth.user'], null=False))
-        ))
-        db.create_unique('sentry_alert_users', ['alert_id', 'user_id'])
-
 
     def backwards(self, orm):
         # Deleting model 'Alert'
         db.delete_table('sentry_alert')
 
-        # Removing M2M table for field users on 'Alert'
-        db.delete_table('sentry_alert_users')
-
 
     models = {
         'auth.group': {
@@ -116,7 +105,6 @@ class Migration(SchemaMigration):
             'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
             'message': ('django.db.models.fields.TextField', [], {}),
             'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'users': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.User']", 'symmetrical': 'False'})
         },
         'sentry.event': {
             'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
diff --git a/src/sentry/models.py b/src/sentry/models.py
index a9be7e8ba8..032c1c8622 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -1028,13 +1028,32 @@ class Activity(Model):
 class Alert(Model):
     project = models.ForeignKey(Project)
     group = models.ForeignKey(Group, null=True)
-    users = models.ManyToManyField(User)
     datetime = models.DateTimeField(default=timezone.now)
     message = models.TextField()
     data = GzippedDictField(null=True)
 
     __repr__ = sane_repr('project_id', 'group_id', 'datetime')
 
+    @classmethod
+    def maybe_alert(cls, project_id, message, group_id=None):
+        now = timezone.now()
+        manager = cls.objects
+        # We only create an alert based on:
+        # - an alert for the project hasn't been created in the last 30 minutes
+        # - an alert for the event hasn't been created in the last 60 minutes
+        if manager.filter(project=project_id, datetime__gte=now - timedelta(minutes=30)).exists():
+            return
+
+        if manager.filter(project=project_id, group=group_id, datetime__gte=now - timedelta(minutes=60)).exists():
+            return
+
+        return manager.create(
+            project_id=project_id,
+            group_id=group_id,
+            datetime=now,
+            message=message,
+        )
+
 
 ### django-indexer
 
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index de7e6910e3..819820d367 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -76,7 +76,7 @@ def check_project_alerts(project_id, when, count, **kwargs):
     and if over a given threshold, create an alert.
     """
     from sentry.constants import MINUTE_NORMALIZATION
-    from sentry.models import ProjectCountByMinute
+    from sentry.models import ProjectCountByMinute, Alert
 
     # number of 15 minute intervals to capture
     intervals = 8
@@ -100,5 +100,9 @@ def check_project_alerts(project_id, when, count, **kwargs):
     threshold = 300
     if count / previous * 100 > threshold:
         # we could raise an alert here!
+        Alert.maybe_alert(
+            project_id=project_id,
+            message='Rate of events per minute increased from %s to %s' % (previous, count),
+        )
         return True
     return False
