commit 1f6335408c9971f245b7d46c2099fc68c598ab64
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Jun 18 08:47:23 2020 -0700

    feat(vercel): update installation flow to handle multi-org and logged out users (#19400)

diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index 8044f6a6b1..6983381559 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -157,6 +157,9 @@ class IntegrationPipeline(Pipeline):
         org_integration = self.integration.add_organization(
             self.organization, self.request.user, default_auth_id=default_auth_id
         )
+        return self._dialog_success(org_integration)
+
+    def _dialog_success(self, org_integration):
         return self._dialog_response(serialize(org_integration, self.request.user), True)
 
     def _dialog_response(self, data, success):
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 77c56c5cc0..340a1a3bd9 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1034,6 +1034,15 @@ function routes() {
           }
         />
 
+        <Route
+          path="/extensions/:integrationSlug/link/"
+          getComponent={(_loc, cb) =>
+            import(
+              /* webpackChunkName: "IntegrationOrganizationLink" */ 'app/views/integrationOrganizationLink'
+            ).then(lazyLoad(cb))
+          }
+        />
+
         <Route
           path="/sentry-apps/:sentryAppSlug/external-install/"
           componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/integrationOrganizationLink.tsx b/src/sentry/static/sentry/app/views/integrationOrganizationLink.tsx
new file mode 100644
index 0000000000..a3359bc2d0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/integrationOrganizationLink.tsx
@@ -0,0 +1,284 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+import styled from '@emotion/styled';
+import {urlEncode} from '@sentry/utils';
+import {components} from 'react-select';
+
+import {Organization, IntegrationProvider} from 'app/types';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t, tct} from 'app/locale';
+import {
+  trackIntegrationEvent,
+  getIntegrationFeatureGate,
+  SingleIntegrationEvent,
+} from 'app/utils/integrationUtil';
+import Alert from 'app/components/alert';
+import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
+import Field from 'app/views/settings/components/forms/field';
+import NarrowLayout from 'app/components/narrowLayout';
+import SelectControl from 'app/components/forms/selectControl';
+import IdBadge from 'app/components/idBadge';
+import LoadingIndicator from 'app/components/loadingIndicator';
+
+//installationId present for Github flow
+type Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;
+
+type State = AsyncView['state'] & {
+  selectedOrgSlug?: string;
+  organization?: Organization;
+  provider?: IntegrationProvider;
+};
+
+export default class IntegrationOrganizationLink extends AsyncView<Props, State> {
+  getEndpoints(): [string, string][] {
+    return [['organizations', '/organizations/']];
+  }
+
+  getTitle() {
+    return t('Choose Installation Organization');
+  }
+
+  trackIntegrationEvent = (
+    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'>,
+    startSession?: boolean
+  ) => {
+    const {organization, provider} = this.state;
+    //should have these set but need to make TS happy
+    if (!organization || !provider) {
+      return;
+    }
+
+    trackIntegrationEvent(
+      {
+        ...options,
+        integration_type: 'first_party',
+        integration: provider.key,
+        //We actually don't know if it's installed but neither does the user in the view and multiple installs is possible
+        already_installed: false,
+        view: 'external_install',
+      },
+      organization,
+      {startSession: !!startSession}
+    );
+  };
+
+  trackOpened() {
+    this.trackIntegrationEvent(
+      {
+        eventKey: 'integrations.integration_viewed',
+        eventName: 'Integrations: Integration Viewed',
+      },
+      true
+    );
+  }
+
+  trackInstallationStart() {
+    this.trackIntegrationEvent({
+      eventKey: 'integrations.installation_start',
+      eventName: 'Integrations: Installation Start',
+    });
+  }
+
+  get integrationSlug() {
+    return this.props.params.integrationSlug;
+  }
+
+  get queryParams() {
+    return this.props.location.query;
+  }
+
+  getOrgBySlug = (orgSlug: string): Organization | undefined => {
+    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);
+  };
+
+  onSelectOrg = async ({value: orgSlug}: {value: string}) => {
+    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});
+
+    try {
+      const [organization, {providers}]: [
+        Organization,
+        {providers: IntegrationProvider[]}
+      ] = await Promise.all([
+        this.api.requestPromise(`/organizations/${orgSlug}/`),
+        this.api.requestPromise(
+          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`
+        ),
+      ]);
+      // should never happen with a valid provider
+      if (providers.length === 0) {
+        throw new Error('Invalid provider');
+      }
+      this.setState(
+        {organization, reloading: false, provider: providers[0]},
+        this.trackOpened
+      );
+    } catch (_err) {
+      addErrorMessage(t('Failed to retrieve organization or integration details'));
+      this.setState({reloading: false});
+    }
+  };
+
+  hasAccess = () => {
+    const {organization} = this.state;
+    return organization?.access.includes('org:integrations');
+  };
+
+  renderAddButton(onClick: React.ComponentProps<typeof Button>['onClick']) {
+    const {organization, provider} = this.state;
+    // should never happen but we need this check for TS
+    if (!provider) {
+      return null;
+    }
+    return (
+      <Button
+        priority="primary"
+        disabled={!organization || !this.hasAccess()}
+        onClick={onClick}
+      >
+        {t('Install %s', provider.name)}
+      </Button>
+    );
+  }
+
+  renderAddButtonContainer() {
+    // TOOD: Implement for Github
+    if (this.props.params.installationId) {
+      throw new Error('Not implemented yet');
+    }
+    return this.renderAddButton(() => {
+      // add the selected org to the query parameters and then redirect back to configure
+      const {selectedOrgSlug} = this.state;
+      const query = {orgSlug: selectedOrgSlug, ...this.queryParams};
+      this.trackInstallationStart();
+      window.location.assign(`/extensions/vercel/configure/?${urlEncode(query)}`);
+    });
+  }
+
+  customOption = orgProps => {
+    const organization = this.getOrgBySlug(orgProps.value);
+    if (!organization) {
+      return null;
+    }
+    return (
+      <components.Option {...orgProps}>
+        <IdBadge
+          organization={organization}
+          avatarSize={20}
+          displayName={organization.name}
+          avatarProps={{consistentWidth: true}}
+        />
+      </components.Option>
+    );
+  };
+
+  customValueContainer = containerProps => {
+    const valueList = containerProps.getValue();
+    //if no value set, we want to return the default component that is rendered
+    if (valueList.length === 0) {
+      return <components.ValueContainer {...containerProps} />;
+    }
+    const orgSlug = valueList[0].value;
+    const organization = this.getOrgBySlug(orgSlug);
+    if (!organization) {
+      return <components.ValueContainer {...containerProps} />;
+    }
+    return (
+      <components.ValueContainer {...containerProps}>
+        <IdBadge
+          organization={organization}
+          avatarSize={20}
+          displayName={organization.name}
+          avatarProps={{consistentWidth: true}}
+        />
+      </components.ValueContainer>
+    );
+  };
+
+  renderBottom() {
+    const {organization, selectedOrgSlug, provider, reloading} = this.state;
+    const {FeatureList} = getIntegrationFeatureGate();
+    if (reloading) {
+      return <LoadingIndicator />;
+    }
+
+    return (
+      <React.Fragment>
+        {selectedOrgSlug && organization && !this.hasAccess() && (
+          <Alert type="error" icon="icon-circle-exclamation">
+            <p>
+              {tct(
+                `You do not have permission to install integrations in
+                [organization]. Ask an organization owner or manager to
+                visit this page to finish installing this integration.`,
+                {organization: <strong>{organization.slug}</strong>}
+              )}
+            </p>
+            <InstallLink>{window.location.href}</InstallLink>
+          </Alert>
+        )}
+
+        {provider && organization && this.hasAccess() && FeatureList && (
+          <React.Fragment>
+            <p>
+              {tct(
+                'The following features will be available for [organization] when installed.',
+                {organization: <strong>{organization.slug}</strong>}
+              )}
+            </p>
+            <FeatureList
+              organization={organization}
+              features={provider.metadata.features}
+              provider={provider}
+            />
+          </React.Fragment>
+        )}
+
+        <div className="form-actions">{this.renderAddButtonContainer()}</div>
+      </React.Fragment>
+    );
+  }
+
+  renderBody() {
+    const {selectedOrgSlug} = this.state;
+    const options = this.state.organizations.map((org: Organization) => ({
+      value: org.slug,
+      label: org.name,
+    }));
+
+    return (
+      <NarrowLayout>
+        <h3>{t('Finish integration installation')}</h3>
+        <p>
+          {tct(
+            `Please pick a specific [organization:organization] to link with
+            your integration installation of [integation].`,
+            {
+              organization: <strong />,
+              integation: <strong>{this.integrationSlug}</strong>,
+            }
+          )}
+        </p>
+
+        <Field label={t('Organization')} inline={false} stacked required>
+          <SelectControl
+            onChange={this.onSelectOrg}
+            value={selectedOrgSlug}
+            placeholder={t('Select an organization')}
+            options={options}
+            components={{
+              Option: this.customOption,
+              ValueContainer: this.customValueContainer,
+            }}
+          />
+        </Field>
+        {this.renderBottom()}
+      </NarrowLayout>
+    );
+  }
+}
+
+const InstallLink = styled('pre')`
+  margin-bottom: 0;
+  background: #fbe3e1;
+`;
diff --git a/src/sentry/web/frontend/integration_extension_configuration.py b/src/sentry/web/frontend/integration_extension_configuration.py
new file mode 100644
index 0000000000..002f1a84a7
--- /dev/null
+++ b/src/sentry/web/frontend/integration_extension_configuration.py
@@ -0,0 +1,81 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from django.utils.http import urlencode
+from django.http import HttpResponseRedirect
+
+from sentry.integrations.pipeline import IntegrationPipeline
+from sentry.web.frontend.base import BaseView
+from sentry.models import Organization
+
+
+class ExternalIntegrationPipeline(IntegrationPipeline):
+    def _dialog_success(self, _org_integration):
+        org_slug = self.organization.slug
+        provider = self.provider.integration_key
+        integration_id = self.integration.id
+        # add in param string if we have a next page
+        param_string = ""
+        if "next" in self.request.GET:
+            param_string = u"?%s" % urlencode({"next": self.request.GET["next"]})
+
+        redirect_uri = u"/settings/%s/integrations/%s/%s/%s" % (
+            org_slug,
+            provider,
+            integration_id,
+            param_string,
+        )
+        return HttpResponseRedirect(redirect_uri)
+
+
+class IntegrationExtensionConfigurationView(BaseView):
+    auth_required = False
+
+    def get(self, request, *args, **kwargs):
+        if not request.user.is_authenticated():
+            configure_uri = u"/extensions/{}/configure/?{}".format(
+                self.provider, urlencode(request.GET.dict()),
+            )
+
+            redirect_uri = u"{}?{}".format(
+                reverse("sentry-login"), urlencode({"next": configure_uri})
+            )
+
+            return self.redirect(redirect_uri)
+
+        # check if we have one org
+        organization = None
+        if request.user.get_orgs().count() == 1:
+            organization = request.user.get_orgs()[0]
+        # if we have an org slug in the query param, use that org
+        elif "orgSlug" in request.GET:
+            organization = Organization.objects.get(slug=request.GET["orgSlug"])
+
+        if organization:
+            # if org does not have the feature, redirect
+            if not self.is_enabled_for_org(organization, request.user):
+                return self.redirect("/")
+
+            # TODO(steve): we probably should check the user has permissions and show an error page if not
+            pipeline = self.init_pipeline(request, organization, request.GET.dict())
+            return pipeline.current_step()
+
+        return self.redirect(
+            u"/extensions/{}/link/?{}".format(self.provider, urlencode(request.GET.dict()))
+        )
+
+    def init_pipeline(self, request, organization, params):
+        pipeline = ExternalIntegrationPipeline(
+            request=request, organization=organization, provider_key=self.external_provider_key
+        )
+
+        pipeline.initialize()
+        pipeline.bind_state(self.provider, self.map_params_to_state(params))
+
+        return pipeline
+
+    def map_params_to_state(self, params):
+        return params
+
+    def is_enabled_for_org(self, _org, _user):
+        return True
diff --git a/src/sentry/web/frontend/vercel_extension_configuration.py b/src/sentry/web/frontend/vercel_extension_configuration.py
index 90018f5703..94b823f710 100644
--- a/src/sentry/web/frontend/vercel_extension_configuration.py
+++ b/src/sentry/web/frontend/vercel_extension_configuration.py
@@ -1,32 +1,13 @@
 from __future__ import absolute_import
 
 
-from sentry.integrations.pipeline import IntegrationPipeline
-from sentry.web.frontend.base import BaseView
 from sentry import features
+from .integration_extension_configuration import IntegrationExtensionConfigurationView
 
 
-class VercelExtensionConfigurationView(BaseView):
-    auth_required = False
+class VercelExtensionConfigurationView(IntegrationExtensionConfigurationView):
+    provider = "vercel"
+    external_provider_key = "vercel"
 
-    def get(self, request, *args, **kwargs):
-        # TODO: check org and login status
-        org = request.user.get_orgs()[0]
-
-        # if org does not have the feature, redirect
-        if not features.has("organizations:integrations-vercel", org, actor=request.user):
-            return self.redirect("/")
-
-        pipeline = self.init_pipeline(request, org, request.GET)
-
-        return pipeline.current_step()
-
-    def init_pipeline(self, request, organization, params):
-        pipeline = IntegrationPipeline(
-            request=request, organization=organization, provider_key="vercel"
-        )
-
-        pipeline.initialize()
-        pipeline.bind_state("vercel", params)
-
-        return pipeline
+    def is_enabled_for_org(self, org, user):
+        return features.has("organizations:integrations-vercel", org, actor=user)
diff --git a/src/sentry/web/frontend/vsts_extension_configuration.py b/src/sentry/web/frontend/vsts_extension_configuration.py
index 483e59051a..3a231a1a13 100644
--- a/src/sentry/web/frontend/vsts_extension_configuration.py
+++ b/src/sentry/web/frontend/vsts_extension_configuration.py
@@ -8,6 +8,7 @@ from sentry.models import Organization
 from sentry.web.frontend.base import BaseView
 
 
+# TODO(Steve): use IntegrationExtensionConfigurationView
 class VstsExtensionConfigurationView(BaseView):
     auth_required = False
 
diff --git a/tests/js/sentry-test/fixtures/vercelIntegration.js b/tests/js/sentry-test/fixtures/vercelIntegration.js
new file mode 100644
index 0000000000..2e77873146
--- /dev/null
+++ b/tests/js/sentry-test/fixtures/vercelIntegration.js
@@ -0,0 +1,29 @@
+export const VercelProvider = () => ({
+  setupDialog: {
+    url: '/organizations/sentry/integrations/vercel/setup/',
+    width: 600,
+    height: 600,
+  },
+  canAdd: true,
+  canDisable: false,
+  name: 'Vercel',
+  key: 'vercel',
+  features: ['deployment'],
+  slug: 'vercel',
+  metadata: {
+    description: 'VERCEL DESC',
+    features: [
+      {
+        featureGate: 'integrations-deployment',
+        description: 'DEPLOYMENT DESCRIPTION',
+      },
+    ],
+    author: 'The Sentry Team',
+    noun: 'Installation',
+    issue_url:
+      'https://github.com/getsentry/sentry/issues/new?title=Vercel%20Integration:%20&labels=Component%3A%20Integrations',
+    source_url:
+      'https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/vercel',
+    aspects: {},
+  },
+});
diff --git a/tests/js/spec/views/integrationOrganizationLink.spec.jsx b/tests/js/spec/views/integrationOrganizationLink.spec.jsx
new file mode 100644
index 0000000000..c995efb315
--- /dev/null
+++ b/tests/js/spec/views/integrationOrganizationLink.spec.jsx
@@ -0,0 +1,75 @@
+import React from 'react';
+import pick from 'lodash/pick';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+import {selectByValue} from 'sentry-test/select-new';
+
+import IntegrationOrganizationLink from 'app/views/integrationOrganizationLink';
+
+describe('IntegrationOrganizationLink', () => {
+  let wrapper,
+    getOrgsMock,
+    getOrgMock,
+    getProviderMock,
+    getMountedComponent,
+    org1,
+    org1Lite,
+    org2,
+    org2Lite;
+  beforeEach(() => {
+    MockApiClient.clearMockResponses();
+    org1 = TestStubs.Organization({
+      slug: 'org1',
+      name: 'Organization 1',
+    });
+
+    org2 = TestStubs.Organization({
+      slug: 'org2',
+      name: 'Organization 2',
+    });
+
+    org1Lite = pick(org1, ['slug', 'name', 'id']);
+    org2Lite = pick(org2, ['slug', 'name', 'id']);
+
+    getOrgsMock = MockApiClient.addMockResponse({
+      url: '/organizations/',
+      body: [org1Lite, org2Lite],
+    });
+
+    getMountedComponent = () =>
+      mountWithTheme(
+        <IntegrationOrganizationLink params={{integrationSlug: 'vercel'}} />,
+        TestStubs.routerContext()
+      );
+  });
+
+  it('selecting org from dropdown loads the org through the API', async () => {
+    getOrgMock = MockApiClient.addMockResponse({
+      url: `/organizations/${org2.slug}/`,
+      body: org2,
+    });
+
+    getProviderMock = MockApiClient.addMockResponse({
+      url: `/organizations/${org2.slug}/config/integrations/?provider_key=vercel`,
+      body: {providers: [TestStubs.VercelProvider()]},
+    });
+
+    wrapper = getMountedComponent();
+
+    expect(getOrgsMock).toHaveBeenCalled();
+    expect(getOrgMock).not.toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    selectByValue(wrapper, org2.slug, {control: true});
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.state('selectedOrgSlug')).toBe(org2.slug);
+    expect(wrapper.state('organization')).toBe(org2);
+    expect(getProviderMock).toHaveBeenCalled();
+    expect(getOrgMock).toHaveBeenCalled();
+  });
+});
diff --git a/tests/sentry/web/frontend/test_vercel_extension_configuration.py b/tests/sentry/web/frontend/test_vercel_extension_configuration.py
new file mode 100644
index 0000000000..5638a7c1ce
--- /dev/null
+++ b/tests/sentry/web/frontend/test_vercel_extension_configuration.py
@@ -0,0 +1,102 @@
+from __future__ import absolute_import
+
+import responses
+from six.moves.urllib.parse import parse_qs
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import TestCase
+from sentry.models import OrganizationMember
+
+
+class VercelExtensionConfigurationTest(TestCase):
+    @property
+    def path(self):
+        return reverse("vercel-extension-configuration")
+
+    def setUp(self):
+        self.user = self.create_user()
+        self.org = self.create_organization()
+
+        OrganizationMember.objects.create(user=self.user, organization=self.org)
+
+        responses.reset()
+        # need oauth mocks
+        access_json = {
+            "user_id": "my_user_id",
+            "access_token": "my_access_token",
+            "installation_id": "my_config_id",
+        }
+        responses.add(
+            responses.POST, "https://api.vercel.com/v2/oauth/access_token", json=access_json
+        )
+
+        responses.add(
+            responses.GET,
+            "https://api.vercel.com/www/user",
+            json={"user": {"name": "my_user_name"}},
+        )
+
+        responses.add(
+            responses.GET, "https://api.vercel.com/v4/projects/", json={"projects": []},
+        )
+
+        responses.add(
+            responses.POST,
+            "https://api.vercel.com/v1/integrations/webhooks",
+            json={"id": "webhook-id"},
+        )
+
+        self.params = {
+            "configurationId": "config_id",
+            "code": "my-code",
+            "next": "https://example.com",
+        }
+
+    @responses.activate
+    def test_logged_in_one_org(self):
+        self.login_as(self.user)
+
+        with self.feature("organizations:integrations-vercel"):
+            resp = self.client.get(self.path, self.params)
+
+            mock_request = responses.calls[0].request
+            req_params = parse_qs(mock_request.body)
+            assert req_params["code"] == ["my-code"]
+
+            # Goes straight to Vercel OAuth
+            assert resp.status_code == 302
+
+    def test_logged_in_many_orgs(self):
+        self.login_as(self.user)
+
+        org = self.create_organization()
+        OrganizationMember.objects.create(user=self.user, organization=org)
+
+        resp = self.client.get(self.path, self.params)
+
+        assert resp.status_code == 302
+        assert "/extensions/vercel/link/" in resp.url
+
+    @responses.activate
+    def test_choose_org(self):
+        self.login_as(self.user)
+
+        org = self.create_organization()
+        OrganizationMember.objects.create(user=self.user, organization=org)
+        self.params["orgSlug"] = org.slug
+
+        with self.feature("organizations:integrations-vercel"):
+            resp = self.client.get(self.path, self.params)
+            # Goes straight to Vercel OAuth
+            assert resp.status_code == 302
+
+    def test_logged_out(self):
+        resp = self.client.get(self.path, self.params)
+
+        assert resp.status_code == 302
+        assert "/auth/login/" in resp.url
+        # URL encoded post-login redirect URL=
+        assert (
+            "next=%2Fextensions%2Fvercel%2Fconfigure%2F%3FconfigurationId%3Dconfig_id%26code%3Dmy-code%26next%3Dhttps%253A%252F%252Fexample.com"
+            in resp.url
+        )
