commit c886882624d369e13d27957abbc694652dff20b8
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Dec 21 10:31:33 2017 -0800

    feat(settings): Change org members view to react (#6308)
    
    * feat(settings): Change org members view to react
    
    Changed member details to react

diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index bbe94dcb08..090a9ae31d 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -33,7 +33,7 @@ const OrgSettingsMenu = ({access, org, features}) => {
       <h6 className="nav-header with-divider">{t('Manage')}</h6>
       <ul className="nav nav-stacked">
         {access.has('org:read') && (
-          <RouterOrBrowserLink isRouter={hasNewSettings} path={`${pathPrefix}/members/`}>
+          <ListLink to={`${pathPrefix}/members/`}>
             {t('Members')}&nbsp;
             {access.has('org:write') &&
               org.pendingAccessRequests > 0 && (
@@ -41,7 +41,7 @@ const OrgSettingsMenu = ({access, org, features}) => {
                   {org.pendingAccessRequests}
                 </span>
               )}
-          </RouterOrBrowserLink>
+          </ListLink>
         )}
         {features.has('sso') &&
           access.has('org:admin') && (
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 4df3b4b895..8db323e81a 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -318,11 +318,13 @@ function routes() {
     />,
 
     <Route key="members" path="members/" name="Members">
-      <IndexRoute component={
-        HookStore.get('component:org-members-view').length ?
-          HookStore.get('component:org-members-view')[0]() :
-          OrganizationMembersView
-      } />
+      <IndexRoute
+        component={
+          HookStore.get('component:org-members-view').length
+            ? HookStore.get('component:org-members-view')[0]()
+            : OrganizationMembersView
+        }
+      />
       <Route path="new/" name="Invite" component={errorHandler(InviteMember)} />,
       <Route
         path=":memberId/"
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberDetail.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberDetail.jsx
index 015851f19e..f352514b95 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberDetail.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberDetail.jsx
@@ -64,15 +64,15 @@ class OrganizationMemberDetail extends AsyncView {
       data: this.state.member,
     })
       .then(() => {
-        IndicatorStore.add('Saved', 'success', {duration: 5000});
-        let members = recreateRoute('', {
+        IndicatorStore.addSuccess('Saved');
+        let members = recreateRoute('members/', {
           routes: this.props.routes,
           params: this.props.params,
           stepBack: -1,
         });
         browserHistory.push(members);
       })
-      .catch(() => IndicatorStore.add('Could not save...', 'error', {duration: 5000}))
+      .catch(() => IndicatorStore.addError('Could not save...'))
       .then(() => {
         IndicatorStore.remove(indicator);
         this.setState({busy: false});
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx b/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx
index 38cce40408..52fbe54453 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx
@@ -1,11 +1,12 @@
+import {Link} from 'react-router';
 import React from 'react';
 
+import {t} from '../../../locale';
 import ApiMixin from '../../../mixins/apiMixin';
 import Avatar from '../../../components/avatar';
 import LoadingError from '../../../components/loadingError';
 import LoadingIndicator from '../../../components/loadingIndicator';
 import OrganizationState from '../../../mixins/organizationState';
-import {t} from '../../../locale';
 
 const TeamMembers = React.createClass({
   mixins: [ApiMixin, OrganizationState],
@@ -70,12 +71,12 @@ const TeamMembers = React.createClass({
       <div>
         <div style={{marginBottom: 20}} className="clearfix">
           {access.has('org:write') ? (
-            <a
+            <Link
               className="btn btn-primary btn-sm pull-right"
-              href={`${memberPrefix}/new/`}
+              to={`${memberPrefix}/new/`}
             >
               <span className="icon-plus" /> {t('Invite Member')}
-            </a>
+            </Link>
           ) : (
             <a
               className="btn btn-primary btn-sm btn-disabled tip pull-right"
@@ -104,7 +105,7 @@ const TeamMembers = React.createClass({
                   <td className="table-user-info">
                     <Avatar user={member} size={80} />
                     <h5>
-                      <a href={`${memberPrefix}/${member.id}/`}>{member.email}</a>
+                      <Link to={`${memberPrefix}/${member.id}/`}>{member.email}</Link>
                     </h5>
                     {member.email}
                   </td>
diff --git a/src/sentry/static/sentry/less/organization.less b/src/sentry/static/sentry/less/organization.less
index 0e82dffd3d..558278a9b1 100644
--- a/src/sentry/static/sentry/less/organization.less
+++ b/src/sentry/static/sentry/less/organization.less
@@ -505,14 +505,6 @@ table.project-list {
     font-size: 13px;
   }
 
-  .icon-exit {
-    font-size: 14px;
-    position: relative;
-    top: 2px;
-    margin-right: -2px;
-    margin-left: -2px;
-  }
-
   .member-role-highlight {
     td {
       background-color: @alert-info-bg-color;
diff --git a/src/sentry/templates/sentry/organization-member-details.html b/src/sentry/templates/sentry/organization-member-details.html
deleted file mode 100644
index 1876658afd..0000000000
--- a/src/sentry/templates/sentry/organization-member-details.html
+++ /dev/null
@@ -1,112 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Member Details" %} | {{ block.super }}{% endblock %}
-
-{% block modal_header_link %}
-  {% url 'sentry-organization-members' organization.slug %}
-{% endblock %}
-
-{% block modal_header_extra %}
-  <span class="back-to">Back to Member List</span>
-{% endblock %}
-
-{% block main %}
-  <h2 class="p-b-1 m-b-1 b-b-1">
-    {{ member.get_display_name }}
-    <br><small>Member Settings</small>
-  </h2>
-
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "Basics" %}</h3>
-    </div>
-
-    <div class="box-content with-padding">
-      <div class="row" style="margin-bottom:10px">
-        <div class="col-md-6">
-          <div class="control-group">
-            <label>{% trans "Email" %}</label>
-            <div class="controls">
-              <a href="mailto:{{ member.get_email }}">{{ member.get_email }}</a>
-            </div>
-          </div>
-        </div>
-        <div class="col-md-3">
-          <div class="control-group">
-            <label>{% trans "Status" %}</label>
-            <div class="controls">
-              {% if member.is_pending %}
-                Invited
-              {% else %}
-                Active
-              {% endif %}
-            </div>
-          </div>
-        </div>
-        <div class="col-md-3">
-          <div class="control-group">
-            <label>{% trans "Added" %}</label>
-            <div class="controls">
-              {{ member.date_added|date }}
-            </div>
-          </div>
-        </div>
-      </div>
-    </div>
-  </div>
-
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "Role" %}</h3>
-    </div>
-    <div class="box-content with-padding">
-      <ul class="radio-inputs">
-        {% for role in role_list %}
-          <li class="radio disabled">
-            <label>
-              <input type="radio" name="role" value="{{ role.id }}"
-                     disabled {% if role.id == member.role %} checked{% endif %} />
-              {{ role.name }}
-              <div class="help-block">{{ role.desc|linebreaksbr }}</div>
-            </label>
-          </li>
-        {% endfor %}
-      </ul>
-    </div>
-  </div>
-
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "Teams" %}</h3>
-    </div>
-    <div class="box-content with-padding">
-      <fieldset class="team-choices row">
-        {% for team in all_teams %}
-          <div class="control-group col-md-4">
-            <div class="controls">
-              <label class="checkbox">
-                <input type="checkbox" disabled="disabled"
-                       class="checkboxinput"{% if team in enabled_teams %} checked="checked"{% endif %}>
-                  {{ team.name }}
-                </label>
-            </div>
-          </div>
-        {% endfor %}
-      </fieldset>
-    </div>
-  </div>
-
-  <div class="form-actions">
-    <div class="alert alert-block alert-info">
-      {% if member.user == user %}
-        <p>You cannot make changes to your own membership.</p>
-      {% else %}
-        <p>You cannot make changes to this member as you do not have the right permissions.</p>
-      {% endif %}
-    </div>
-  </div>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/organization-member-settings.html b/src/sentry/templates/sentry/organization-member-settings.html
deleted file mode 100644
index 2095c9f8c6..0000000000
--- a/src/sentry/templates/sentry/organization-member-settings.html
+++ /dev/null
@@ -1,112 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Member Settings" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  <div class="page-header">
-    <a class="back-arrow" style="top: 0px;" href="{% url 'sentry-organization-members' organization.slug %}"><span class="icon-arrow-left"></span></a>
-    <h2>
-      {{ member.get_display_name }}
-      <br><small>Member Settings</small>
-    </h2>
-  </div>
-
-  <form class="form-stacked" action="" method="post">
-    {% csrf_token %}
-
-    {% if form.errors %}
-      <div class="alert alert-block alert-error">{% trans "Please correct the errors below." %}</div>
-    {% endif %}
-
-    {{ form|as_crispy_errors }}
-
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Basics" %}</h3>
-      </div>
-
-      <div class="box-content with-padding">
-        <div class="row" style="margin-bottom:10px">
-          <div class="col-md-6">
-            <div class="control-group">
-              <label>{% trans "Email" %}</label>
-              <div class="controls">
-                <a href="mailto:{{ member.get_email }}">{{ member.get_email }}</a>
-              </div>
-            </div>
-          </div>
-          <div class="col-md-3">
-            <div class="control-group">
-              <label>{% trans "Status" %}</label>
-              <div class="controls">
-                {% if member.is_pending %}
-                  <em>Invitation Pending</em>
-                {% else %}
-                  Active
-                {% endif %}
-              </div>
-            </div>
-          </div>
-          <div class="col-md-3">
-            <div class="control-group">
-              <label>{% trans "Added" %}</label>
-              <div class="controls">
-                {{ member.date_added|date }}
-              </div>
-            </div>
-          </div>
-        </div>
-        {% if invite_link %}
-          <div class="form-actions">
-            <div class="control-group">
-              <label>{% trans "Invite Link" %}</label>
-              <div class="controls">
-                <code class="auto-select form-control" style="overflow: auto">{{ invite_link }}</code>
-              </div>
-              <p class="help-block">This unique invite link may only be used by this member.</p>
-            </div>
-            <div class="align-right">
-              <button type="submit" name="op" value="regenerate" class="btn btn-default">{% trans "Generate New Invite" %}</button>
-              <button type="submit" name="op" value="reinvite" class="btn btn-default">{% trans "Resend Invite" %}</button>
-            </div>
-          </div>
-        {% endif %}
-      </div>
-    </div>
-
-    {% include "sentry/partial/members/_roles.html" %}
-    {% include "sentry/partial/members/_teams.html" %}
-
-    <div class="form-actions">
-      <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-    </div>
-  </form>
-{% endblock %}
-
-{% block content_after %}
-  <script>
-  $(function(){
-    var selector = $('.team-choices input[type=checkbox]');
-    var selectedTeams = $('.team-choices input[type=checkbox]:checked').slice(0);
-    $('#id_has_global_access').change(function(){
-      var $this = $(this);
-      var checked = $this.is(':checked');
-
-      if (checked) {
-        selectedTeams = $('.team-choices input[type=checkbox]:checked').slice(0);
-        selector.prop('checked', true);
-      } else {
-        selector.prop('checked', false);
-        $(selectedTeams).prop('checked', true);
-        selectedTeams = [];
-      }
-
-      $('.team-choices').prop('disabled', checked);
-    }).change();
-  });
-  </script>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
deleted file mode 100644
index 813a981732..0000000000
--- a/src/sentry/templates/sentry/organization-members.html
+++ /dev/null
@@ -1,238 +0,0 @@
-{% extends "sentry/bases/organization.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_avatars %}
-{% load sentry_helpers %}
-{% load sentry_features %}
-
-{% block title %}{% trans "Members" %} | {{ block.super }}{% endblock %}
-
-{% block org_members_nav %}active{% endblock %}
-
-{% block main %}
-  {% if can_add_members %}
-    <a class="btn btn-primary btn-sm pull-right" href="{% url 'sentry-create-organization-member' organization.slug %}">
-      <span class="icon-plus"></span> {% trans "Invite Member" %}
-    </a>
-  {% else %}
-    <a class="btn btn-primary btn-sm btn-disabled tip pull-right"
-       title="{% trans "You do not have enough permission to add new members" %}">
-      <span class="icon-plus"></span> {% trans "Invite Member" %}
-    </a>
-  {% endif %}
-
-  <h3>{% trans "Members" %}</h3>
-
-  {% if request_list %}
-  <div class="panel panel-default horizontal-scroll">
-    <table class="table" id="access_request_list">
-      <thead>
-        <tr>
-          <th colspan="2">{% trans "Pending Access Requests" %}</th>
-        </tr>
-      </thead>
-      <tbody>
-      {% for access_request in request_list %}
-        <tr>
-          <td>
-            <strong>{{ access_request.member.user.get_display_name }}</strong> requests access to the <strong>{{ access_request.team.name }}</strong> team.
-          </td>
-          <td class="align-right">
-            <a href="#" class="btn btn-primary btn-sm"
-                   data-action="approve" data-id="{{ access_request.id }}">Approve</a>
-            <a href="#" class="btn btn-default btn-sm"
-                   data-action="deny" data-id="{{ access_request.id }}">Deny</a>
-          </td>
-        </tr>
-        {% endfor %}
-      </tbody>
-    </table>
-  </div>
-  {% elif ref == 'access-requests' %}
-    <div class="well">
-      <p>{% trans "All pending access requests have been taken care of." %}</p>
-    </div>
-  {% endif %}
-
-  <div class="panel panel-default horizontal-scroll">
-    <table class="table member-list">
-      <colgroup>
-        {% if can_remove_members or members_can_leave %}
-        <!-- 4 column -->
-        <col width="45%"/>
-        <col width="15%"/>
-        <col width="15%"/>
-        <col width="25%"/>
-        {% else %}
-        <!-- 3 column -->
-        <col width="60%"/>
-        <col width="20%"/>
-        <col width="20%"/>
-        {% endif %}
-      </colgroup>
-      <thead>
-        <tr>
-          <th>{% trans "Member" %}</th>
-          <th>&nbsp;</th>
-          <th class="squash">{% trans "Role" %}</th>
-          {% if can_remove_members or member_can_leave %}
-            <th class="squash">&nbsp;</th>
-          {% endif %}
-        </tr>
-      </thead>
-      <tbody>
-        {% for member, needs_sso, has_2fa in member_list %}
-          <tr {% if member.role == request.GET.role %}class="member-role-highlight"{% endif %}>
-            <td class="table-user-info">
-              {% avatar member %}
-              <h5><a href="{% url 'sentry-organization-member-settings' organization.slug member.id %}">
-                {{ member.get_display_name }}
-              </a></h5>
-              {{ member.get_email }}
-              <br />
-            </td>
-            <td class="status">
-              {% if needs_sso or member.is_pending %}
-                {% if member.is_pending %}
-                  <strong>Invited</strong>
-                {% else %}
-                  <strong>Missing SSO Link</strong>
-                {% endif %}
-                <br>
-                {% if can_add_members %}
-                <a href="javascript:void(0)" class="resend-invite btn btn-sm btn-primary" data-member-id="{{ member.id }}" style="padding: 0 4px; margin-top: 2px">Resend invite</a>
-                {% endif %}
-              {% elif not has_2fa %}
-                <span style="color:#B64236;" class="icon-exclamation tip" title="{% trans "Two-factor auth not enabled" %}"></span>
-              {% endif %}
-            </td>
-            <td class="squash">{{ member.get_role_display }}</td>
-            {% if can_remove_members or member_can_leave %}
-            <td class="align-right squash">
-              <a href="{% url 'sentry-organization-member-settings' organization.slug member.id %}"
-                 class="btn btn-default btn-sm">
-                {% trans "Details" %}
-              </a>
-              {% if member.user != request.user %}
-                {% if can_remove_members %}
-                  <a href="javascript:void(0)" class="btn btn-danger btn-sm remove-member"
-                      data-member-id="{{ member.id }}">
-                    <span class="icon icon-trash"></span> &nbsp;{% trans "Remove" %}
-                  </a>
-                {% else %}
-                  <a href="javascript:void(0)" class="btn btn-sm btn-disabled tip"
-                     title="You do not have access to remove this member.">
-                    <span class="icon icon-trash"></span> &nbsp;{% trans "Remove" %}
-                  </a>
-                {% endif %}
-              {% elif member.user == request.user %}
-                {% if member_can_leave %}
-                  <a href="javascript:void(0)" class="btn btn-danger btn-sm remove-member"
-                      data-member-id="{{ member.id }}"
-                      data-message="Are you sure you wish to leave this organization?">
-                    <span class="icon icon-exit"></span> &nbsp;Leave
-                  </a>
-                {% else %}
-                  <a href="javascript:void(0)" class="btn btn-sm btn-disabled tip"
-                     title="You cannot leave this organization as you are the only owner.">
-                    <span class="icon icon-exit"></span> &nbsp;Leave
-                  </a>
-                {% endif %}
-              {% endif %}
-            </td>
-            {% endif %}
-          </tr>
-        {% endfor %}
-      </tbody>
-    </table>
-  </div>
-{% endblock %}
-
-{% block content_after %}
-  <style>
-  .member-list form {
-    display: inline-block;
-  }
-  </style>
-  <script>
-  $('.remove-member').click(function(){
-    var $this = $(this);
-    var msg = $this.data('message') || 'Are you sure you wish to remove this member?';
-
-    if (!confirm(msg)) {
-      return;
-    }
-
-    $.ajax({
-      url: '{{ URL_PREFIX }}/api/0/organizations/{{ organization.slug }}/members/' + $this.data('member-id') + '/',
-      method: 'DELETE',
-      success: function() {
-        $this.parents('tr').remove();
-      },
-      error: function(xhr) {
-        if (xhr.responseJSON) {
-          alert('Unable to remove member: ' + xhr.responseJSON.detail);
-        } else {
-          alert('There was an error while trying to remove the member.');
-        }
-      }
-    });
-  });
-
-  $('.resend-invite').click(function(){
-    var $link = $(this);
-    var $loader = $('<span class="icon-spinner spin"></span>');
-
-    $link.replaceWith($loader);
-
-    $.ajax({
-      url: '{{ URL_PREFIX }}/api/0/organizations/{{ organization.slug }}/members/' + $link.data('member-id') + '/',
-      data: JSON.stringify({
-        reinvite: 1,
-      }),
-      contentType: 'application/json',
-      method: 'PUT',
-      success: function() {
-        $loader.replaceWith('<span>Sent!</span>');
-      },
-      error: function() {
-        $loader.replaceWith($link);
-        alert('There was an error while trying to reinvite the member.');
-      }
-    });
-  });
-
-  $('#access_request_list a').click(function(e){
-    var $el = $(this),
-        $row = $el.parents('tr');
-    if (!$el.data('action')) {
-      return;
-    }
-    e.preventDefault();
-
-    $row.addClass('loading');
-    $('a', $row).attr('disabled', true);
-
-    $.ajax({
-      method: 'PUT',
-      url: '{{ URL_PREFIX }}/api/0/organizations/{{ organization.slug }}/access-requests/' + $el.data('id') + '/',
-      contentType: 'application/json',
-      data: JSON.stringify({
-        isApproved: $el.data('action') === 'approve'
-      }),
-      success: function() {
-        $row.remove();
-        if (!$('#access_request_list tbody tr').length) {
-          $('#access_request_list').remove();
-        }
-      },
-      error: function() {
-        window.alert('We were unable to act on the access request. Maybe someone else beat you to it?');
-        $('a', $row).attr('disabled', false);
-      }
-    });
-  });
-  $('.tip').tooltip();
-  </script>
-{% endblock %}
diff --git a/src/sentry/web/forms/base_organization_member.py b/src/sentry/web/forms/base_organization_member.py
deleted file mode 100644
index 9ae436efa8..0000000000
--- a/src/sentry/web/forms/base_organization_member.py
+++ /dev/null
@@ -1,47 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.db import transaction
-
-from sentry.models import (
-    OrganizationMember,
-    OrganizationMemberTeam,
-    Team,
-)
-
-
-class BaseOrganizationMemberForm(forms.ModelForm):
-    """
-    Base form used by AddOrganizationMemberForm, InviteOrganizationMemberForm,
-    and EditOrganizationMemberForm
-    """
-    teams = forms.ModelMultipleChoiceField(
-        queryset=Team.objects.none(),
-        widget=forms.CheckboxSelectMultiple(),
-        required=False,
-    )
-    role = forms.ChoiceField()
-
-    class Meta:
-        fields = ('role', )
-        model = OrganizationMember
-
-    def __init__(self, *args, **kwargs):
-        allowed_roles = kwargs.pop('allowed_roles')
-        all_teams = kwargs.pop('all_teams')
-
-        super(BaseOrganizationMemberForm, self).__init__(*args, **kwargs)
-
-        self.fields['role'].choices = ((r.id, r.name) for r in allowed_roles)
-
-        self.fields['teams'].queryset = all_teams
-
-    @transaction.atomic
-    def save_team_assignments(self, organization_member):
-        OrganizationMemberTeam.objects.filter(organizationmember=organization_member).delete()
-        OrganizationMemberTeam.objects.bulk_create(
-            [
-                OrganizationMemberTeam(team=team, organizationmember=organization_member)
-                for team in self.cleaned_data['teams']
-            ]
-        )
diff --git a/src/sentry/web/forms/edit_organization_member.py b/src/sentry/web/forms/edit_organization_member.py
deleted file mode 100644
index bfacb7365c..0000000000
--- a/src/sentry/web/forms/edit_organization_member.py
+++ /dev/null
@@ -1,26 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.models import (
-    AuditLogEntry,
-    AuditLogEntryEvent,
-)
-from sentry.web.forms.base_organization_member import BaseOrganizationMemberForm
-
-
-class EditOrganizationMemberForm(BaseOrganizationMemberForm):
-    def save(self, actor, organization, ip_address=None):
-        om = super(EditOrganizationMemberForm, self).save()
-
-        self.save_team_assignments(om)
-
-        AuditLogEntry.objects.create(
-            organization=organization,
-            actor=actor,
-            ip_address=ip_address,
-            target_object=om.id,
-            target_user=om.user,
-            event=AuditLogEntryEvent.MEMBER_EDIT,
-            data=om.get_audit_log_data(),
-        )
-
-        return om
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
deleted file mode 100644
index 114d63e7ff..0000000000
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ /dev/null
@@ -1,114 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.db.models import Q
-from django.utils.translation import ugettext_lazy as _, ugettext
-
-from sentry import roles
-from sentry.models import OrganizationMember, OrganizationMemberTeam, \
-    Team, TeamStatus
-from sentry.utils import auth
-from sentry.web.frontend.base import OrganizationView
-from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
-
-
-class OrganizationMemberSettingsView(OrganizationView):
-    def get_form(self, request, member, all_teams, allowed_roles):
-        return EditOrganizationMemberForm(
-            data=request.POST or None,
-            instance=member,
-            all_teams=all_teams,
-            allowed_roles=allowed_roles,
-            initial={
-                'role':
-                member.role,
-                'teams':
-                Team.objects.filter(
-                    id__in=OrganizationMemberTeam.objects.filter(
-                        organizationmember=member,
-                    ).values('team'),
-                ),
-            },
-        )
-
-    def resend_invite(self, request, organization, member, regen=False):
-        if regen:
-            member.update(token=member.generate_token())
-            messages.success(
-                request,
-                ugettext('A new invitation has been generated and sent to %(email)s') % {
-                    'organization': organization.name,
-                    'email': member.email,
-                }
-            )
-        else:
-            messages.success(
-                request,
-                ugettext('An invitation to join %(organization)s has been sent to %(email)s') % {
-                    'organization': organization.name,
-                    'email': member.email,
-                }
-            )
-
-        member.send_invite_email()
-
-        redirect = reverse(
-            'sentry-organization-member-settings', args=[organization.slug, member.id]
-        )
-
-        return self.redirect(redirect)
-
-    def view_member(self, request, organization, member, all_teams):
-        context = {
-            'member': member,
-            'enabled_teams': set(member.teams.all()),
-            'all_teams': all_teams,
-            'role_list': roles.get_all(),
-        }
-
-        return self.respond('sentry/organization-member-details.html', context)
-
-    def handle(self, request, organization, member_id):
-        try:
-            member = OrganizationMember.objects.get(
-                Q(user__is_active=True) | Q(user__isnull=True),
-                organization=organization,
-                id=member_id,
-            )
-        except OrganizationMember.DoesNotExist:
-            return self.redirect(auth.get_login_url())
-
-        if request.POST.get('op') == 'reinvite' and member.is_pending:
-            return self.resend_invite(request, organization, member)
-        elif request.POST.get('op') == 'regenerate' and member.is_pending:
-            return self.resend_invite(request, organization, member, regen=True)
-
-        can_admin, allowed_roles = self.get_allowed_roles(request, organization, member)
-
-        all_teams = Team.objects.filter(organization=organization, status=TeamStatus.VISIBLE)
-
-        if member.user == request.user or not can_admin:
-            return self.view_member(request, organization, member, all_teams)
-
-        form = self.get_form(request, member, all_teams, allowed_roles)
-        if form.is_valid():
-            member = form.save(request.user, organization, request.META['REMOTE_ADDR'])
-
-            messages.add_message(request, messages.SUCCESS, _('Your changes were saved.'))
-
-            redirect = reverse(
-                'sentry-organization-member-settings', args=[organization.slug, member.id]
-            )
-
-            return self.redirect(redirect)
-
-        context = {
-            'member': member,
-            'form': form,
-            'invite_link': member.get_invite_link(),
-            'role_list': [(r, r in allowed_roles) for r in roles.get_all()],
-            'all_teams': all_teams
-        }
-
-        return self.respond('sentry/organization-member-settings.html', context)
diff --git a/src/sentry/web/frontend/organization_members.py b/src/sentry/web/frontend/organization_members.py
deleted file mode 100644
index db7c9a23e9..0000000000
--- a/src/sentry/web/frontend/organization_members.py
+++ /dev/null
@@ -1,78 +0,0 @@
-from __future__ import absolute_import
-
-from django.db.models import Q
-
-from sentry import roles
-from sentry.models import (
-    AuthProvider, Authenticator, OrganizationAccessRequest, OrganizationMember
-)
-from sentry.web.frontend.base import OrganizationView
-
-
-def get_template_context(request, organization):
-    queryset = OrganizationMember.objects.filter(
-        Q(user__is_active=True) | Q(user__isnull=True),
-        organization=organization,
-    ).select_related('user')
-
-    queryset = sorted(queryset, key=lambda x: x.email or x.user.get_display_name())
-
-    try:
-        auth_provider = AuthProvider.objects.get(organization=organization)
-    except AuthProvider.DoesNotExist:
-        auth_provider = None
-
-    oms = list(queryset)
-
-    authenticators = Authenticator.objects.bulk_users_have_2fa([om.user_id for om in oms])
-
-    member_list = []
-    for om in oms:
-        needs_sso = bool(auth_provider and not getattr(om.flags, 'sso:linked'))
-        member_list.append((om, needs_sso, authenticators[om.user_id]))
-
-    # if the member is not the only owner we allow them to leave the org
-    member_can_leave = any(
-        1 for om, _, _ in member_list
-        if
-        (om.role == roles.get_top_dog().id and om.user != request.user and om.user is not None)
-    )
-
-    # TODO(dcramer): ideally member:write could approve
-    can_approve_requests_globally = request.access.has_scope('org:write')
-    can_add_members = request.access.has_scope('org:write')
-    can_remove_members = request.access.has_scope('member:admin')
-
-    # pending requests
-    if can_approve_requests_globally:
-        access_requests = list(
-            OrganizationAccessRequest.objects.filter(
-                team__organization=organization,
-                member__user__is_active=True,
-            ).select_related('team', 'member__user')
-        )
-    elif request.access.has_scope('team:write') and request.access.teams:
-        access_requests = list(
-            OrganizationAccessRequest.objects.filter(
-                member__user__is_active=True,
-                team__in=request.access.teams,
-            ).select_related('team', 'member__user')
-        )
-    else:
-        access_requests = []
-
-    return {
-        'org_has_sso': auth_provider is not None,
-        'member_list': member_list,
-        'request_list': access_requests,
-        'ref': request.GET.get('ref'),
-        'can_add_members': can_add_members,
-        'can_remove_members': can_remove_members,
-        'member_can_leave': member_can_leave,
-    }
-
-
-class OrganizationMembersView(OrganizationView):
-    def handle(self, request, organization):
-        context = get_template_context(request, organization)
-        return self.respond('sentry/organization-members.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index b609f584d0..3c6f4bc4e0 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -38,12 +38,9 @@ from sentry.web.frontend.oauth_token import OAuthTokenView
 from sentry.auth.providers.saml2 import SAML2AcceptACSView, SAML2SLSView, SAML2MetadataView
 from sentry.web.frontend.organization_auth_settings import \
     OrganizationAuthSettingsView
-from sentry.web.frontend.organization_member_settings import \
-    OrganizationMemberSettingsView
 from sentry.web.frontend.organization_integration_setup import \
     OrganizationIntegrationSetupView
 from sentry.web.frontend.out import OutView
-from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
 from sentry.web.frontend.reactivate_account import ReactivateAccountView
@@ -364,7 +361,7 @@ urlpatterns += patterns(
     ),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/members/$',
-        OrganizationMembersView.as_view(),
+        react_page_view,
         name='sentry-organization-members'
     ),
     url(
@@ -374,7 +371,7 @@ urlpatterns += patterns(
     ),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/members/(?P<member_id>\d+)/$',
-        OrganizationMemberSettingsView.as_view(),
+        react_page_view,
         name='sentry-organization-member-settings'
     ),
     url(
diff --git a/tests/acceptance/test_member_list.py b/tests/acceptance/test_member_list.py
index ff2dc7bed4..33a0590ab6 100644
--- a/tests/acceptance/test_member_list.py
+++ b/tests/acceptance/test_member_list.py
@@ -32,4 +32,5 @@ class ListOrganizationMembersTest(AcceptanceTestCase):
 
     def test_list(self):
         self.browser.get('/organizations/{}/members/'.format(self.org.slug))
+        self.browser.wait_until_not('.loading-indicator')
         self.browser.snapshot(name='list organization members')
diff --git a/tests/sentry/api/endpoints/test_organization_access_requests.py b/tests/sentry/api/endpoints/test_organization_access_requests.py
index 3b20fe58e8..313a38406b 100644
--- a/tests/sentry/api/endpoints/test_organization_access_requests.py
+++ b/tests/sentry/api/endpoints/test_organization_access_requests.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import OrganizationAccessRequest
@@ -35,6 +37,56 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
         assert len(resp.data) == 1
         assert resp.data[0]['member']['email'] == 'bar@example.com'
 
+    def test_admin_can_list_access_requests(self):
+        organization = self.create_organization(
+            name='foo',
+            owner=self.user,
+            flags=0,  # kill default allow_joinleave
+        )
+        team_1 = self.create_team(name='foo', organization=organization)
+
+        # team which this team_admin user is not an admin of
+        team_2 = self.create_team(name='bar', organization=organization)
+
+        team_admin = self.create_user('admin@example.com')
+        self.create_member(
+            organization=organization,
+            user=team_admin,
+            role='admin',
+            teams=[team_1],
+        )
+
+        other_user = self.create_user('bar@example.com')
+        other_member = self.create_member(
+            organization=organization,
+            user=other_user,
+            role='member',
+            teams=[],
+        )
+
+        request_1 = OrganizationAccessRequest.objects.create(
+            member=other_member,
+            team=team_1,
+        )
+        OrganizationAccessRequest.objects.create(
+            member=other_member,
+            team=team_2,
+        )
+
+        path = reverse('sentry-api-0-organization-access-requests', args=[organization.slug])
+
+        self.login_as(team_admin)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+
+        # There are requests to two diff teams, make sure we only get the one user is team admin for
+        assert len(resp.data) == 1
+        assert resp.data[0]['member']['id'] == six.text_type(other_member.id)
+        assert resp.data[0]['member']['id'] == six.text_type(request_1.member_id)
+        assert resp.data[0]['team']['id'] == six.text_type(request_1.team_id)
+
     def test_member_empty_results(self):
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/web/forms/test_base_organization_member.py b/tests/sentry/web/forms/test_base_organization_member.py
deleted file mode 100644
index 4dfb560983..0000000000
--- a/tests/sentry/web/forms/test_base_organization_member.py
+++ /dev/null
@@ -1,39 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.web.forms.base_organization_member import BaseOrganizationMemberForm
-from sentry.testutils import TestCase
-
-from sentry.roles.manager import Role
-from sentry.models import (
-    Team,
-    OrganizationMemberTeam,
-)
-
-
-class BaseOrganizationMemberFormTest(TestCase):
-    def test_save_team_assignments(self):
-        organization = self.create_organization(
-            owner=self.create_user('owner@example.com'),
-        )
-        team1 = self.create_team(name='team1', organization=organization)
-        team2 = self.create_team(name='team2', organization=organization)
-        some_user = self.create_user('someuser@example.com')
-        user_org_membership = self.create_member(
-            teams=[team1], user=some_user, organization=organization
-        )
-
-        form = BaseOrganizationMemberForm(
-            data={'teams': [team2.id],
-                  'role': 'member'},
-            all_teams=Team.objects.filter(organization=organization),
-            allowed_roles=[Role(1, 'member', 'Member')]
-        )
-        assert form.is_valid()
-
-        form.save_team_assignments(user_org_membership)
-
-        assigned_teams = OrganizationMemberTeam.objects.filter(
-            organizationmember=user_org_membership
-        )
-        assert len(assigned_teams) == 1
-        assert assigned_teams[0].team_id == team2.id
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
deleted file mode 100644
index 425700c1c0..0000000000
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ /dev/null
@@ -1,295 +0,0 @@
-from __future__ import absolute_import
-
-from django.core import mail
-from django.core.urlresolvers import reverse
-
-from sentry.models import AuditLogEntry, AuditLogEntryEvent, OrganizationMember
-from sentry.testutils import TestCase, PermissionTestCase
-
-
-class OrganizationMemberSettingsPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(OrganizationMemberSettingsPermissionTest, self).setUp()
-        member = self.create_user()
-        om = self.create_member(user=member, organization=self.organization)
-        self.path = reverse(
-            'sentry-organization-member-settings', args=[self.organization.slug, om.id]
-        )
-
-    def test_non_member_cannot_load(self):
-        self.assert_non_member_cannot_access(self.path)
-
-    def test_member_can_load(self):
-        self.assert_member_can_access(self.path)
-
-
-class OrganizationMemberSettingsTest(TestCase):
-    def test_renders_with_context(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
-
-        user = self.create_user('bar@example.com')
-        member = self.create_member(
-            organization=organization,
-            user=user,
-            role='member',
-            teams=[team_2],
-        )
-
-        path = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
-
-        self.login_as(self.user)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/organization-member-settings.html')
-
-        assert resp.context['organization'] == organization
-        assert resp.context['member'] == member
-        assert resp.context['form']
-
-    def test_setting_role(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
-
-        user = self.create_user('bar@example.com')
-        member = OrganizationMember.objects.create(
-            organization=organization,
-            user=user,
-            role='member',
-        )
-
-        path = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
-
-        self.login_as(self.user)
-
-        resp = self.client.post(path, {
-            'teams': [team_1.id, team_2.id],
-            'role': 'admin',
-        })
-
-        assert resp.status_code == 302
-
-        member = OrganizationMember.objects.get(id=member.id)
-
-        assert member.role == 'admin'
-
-        assert member.teams.count() == 2
-
-        ale = AuditLogEntry.objects.get(
-            organization=organization,
-            event=AuditLogEntryEvent.MEMBER_EDIT,
-        )
-
-        assert ale.actor == self.user
-        assert ale.target_object == member.id
-        assert ale.target_user == user
-        assert ale.data
-
-    def test_setting_teams(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
-
-        user = self.create_user('bar@example.com')
-        member = OrganizationMember.objects.create(
-            organization=organization,
-            user=user,
-            role='member',
-        )
-
-        path = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
-
-        self.login_as(self.user)
-
-        resp = self.client.post(path, {
-            'teams': [team_1.id, team_2.id],
-            'role': 'member',
-        })
-
-        assert resp.status_code == 302, resp.context['form'].errors
-
-        member = OrganizationMember.objects.get(id=member.id)
-        assert member.role == 'member'
-
-        teams = list(member.teams.all())
-        assert team_1 in teams
-        assert team_2 in teams
-        assert len(teams) == 2
-
-        ale = AuditLogEntry.objects.get(
-            organization=organization,
-            event=AuditLogEntryEvent.MEMBER_EDIT,
-        )
-
-        assert ale.actor == self.user
-        assert ale.target_object == member.id
-        assert ale.target_user == user
-        assert ale.data
-
-    def test_reinvite(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-
-        member = OrganizationMember.objects.create(
-            organization=organization,
-            email='bar@example.com',
-        )
-
-        path = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
-
-        self.login_as(self.user)
-
-        with self.tasks():
-            resp = self.client.post(path, {
-                'op': 'reinvite',
-            })
-
-        assert resp.status_code == 302
-
-        assert len(mail.outbox) == 1
-        assert mail.outbox[0].to == ['bar@example.com']
-        assert mail.outbox[0].subject == 'Join foo in using Sentry'
-
-    def test_cannot_edit_yourself(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        member = OrganizationMember.objects.get(
-            organization=organization,
-            user=self.user,
-        )
-
-        path = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
-
-        self.login_as(self.user)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/organization-member-details.html')
-
-        assert resp.context['organization'] == organization
-        assert resp.context['member'] == member
-
-    def test_admin_cant_edit(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        member = self.create_user('foo@example.com', is_superuser=False)
-        owner_om = OrganizationMember.objects.get(
-            organization=organization,
-            user=self.user,
-        )
-
-        OrganizationMember.objects.create(
-            organization=organization,
-            user=member,
-            role='admin',
-        )
-
-        path = reverse('sentry-organization-member-settings', args=[organization.slug, owner_om.id])
-
-        self.login_as(member)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/organization-member-details.html')
-
-        assert resp.context['organization'] == organization
-        assert resp.context['member'] == owner_om
-
-    def test_member_cant_edit(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        member = self.create_user('foo@example.com', is_superuser=False)
-        owner_om = OrganizationMember.objects.get(
-            organization=organization,
-            user=self.user,
-        )
-
-        OrganizationMember.objects.create(
-            organization=organization,
-            user=member,
-            role='member',
-        )
-
-        path = reverse('sentry-organization-member-settings', args=[organization.slug, owner_om.id])
-
-        self.login_as(member)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/organization-member-details.html')
-
-        assert resp.context['organization'] == organization
-        assert resp.context['member'] == owner_om
-
-    def test_manager_cant_assign_owner(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-
-        manager = self.create_user('bar@example.com')
-        OrganizationMember.objects.create(
-            organization=organization,
-            user=manager,
-            role='manager',
-        )
-
-        member = self.create_user('baz@example.com')
-        member_om = OrganizationMember.objects.create(
-            organization=organization,
-            user=member,
-            role='member',
-        )
-
-        path = reverse(
-            'sentry-organization-member-settings', args=[organization.slug, member_om.id]
-        )
-
-        self.login_as(manager)
-
-        resp = self.client.post(path, {
-            'role': 'owner',
-        })
-
-        assert resp.status_code == 200
-
-        member = OrganizationMember.objects.get(id=member_om.id)
-
-        assert member.role == 'member'
-
-    def test_manager_cant_downgrade_owner(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-
-        manager = self.create_user('bar@example.com')
-        OrganizationMember.objects.create(
-            organization=organization,
-            user=manager,
-            role='manager',
-        )
-
-        member = self.create_user('baz@example.com')
-        member_om = OrganizationMember.objects.create(
-            organization=organization,
-            user=member,
-            role='owner',
-        )
-
-        path = reverse(
-            'sentry-organization-member-settings', args=[organization.slug, member_om.id]
-        )
-
-        self.login_as(manager)
-
-        resp = self.client.post(path, {
-            'role': 'manager',
-        })
-
-        assert resp.status_code == 200
-
-        member = OrganizationMember.objects.get(id=member_om.id)
-
-        assert member.role == 'owner'
diff --git a/tests/sentry/web/frontend/test_organization_members.py b/tests/sentry/web/frontend/test_organization_members.py
deleted file mode 100644
index 8e49cd0bb5..0000000000
--- a/tests/sentry/web/frontend/test_organization_members.py
+++ /dev/null
@@ -1,108 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import OrganizationAccessRequest, OrganizationMember, TotpInterface
-from sentry.testutils import TestCase, PermissionTestCase
-
-
-class OrganizationMembersPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(OrganizationMembersPermissionTest, self).setUp()
-        self.path = reverse('sentry-organization-members', args=[self.organization.slug])
-
-    def test_member_can_load(self):
-        self.assert_member_can_access(self.path)
-
-    def test_non_member_cannot_load(self):
-        self.assert_non_member_cannot_access(self.path)
-
-
-class OrganizationMembersTest(TestCase):
-    def test_renders_with_context(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
-
-        owner = self.user
-        member = self.create_user('bar@example.com')
-
-        TotpInterface().enroll(member)
-
-        owner_om = OrganizationMember.objects.get(
-            organization=organization,
-            user=owner,
-        )
-
-        member_om = self.create_member(
-            organization=organization,
-            user=member,
-            role='member',
-            teams=[team_2],
-        )
-
-        path = reverse('sentry-organization-members', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/organization-members.html')
-
-        assert resp.context['organization'] == organization
-        member_list = sorted(resp.context['member_list'], key=lambda x: x[0].id)
-
-        assert member_list == [
-            (owner_om, False, False),
-            (member_om, False, True),
-        ]
-
-    def test_shows_access_requests_for_team_admin(self):
-        organization = self.create_organization(
-            name='foo',
-            owner=self.user,
-            flags=0,  # kill default allow_joinleave
-        )
-        team_1 = self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
-
-        team_admin = self.create_user('admin@example.com')
-        self.create_member(
-            organization=organization,
-            user=team_admin,
-            role='admin',
-            teams=[team_1],
-        )
-
-        other_user = self.create_user('bar@example.com')
-        other_member = self.create_member(
-            organization=organization,
-            user=other_user,
-            role='member',
-            teams=[],
-        )
-
-        request_1 = OrganizationAccessRequest.objects.create(
-            member=other_member,
-            team=team_1,
-        )
-        OrganizationAccessRequest.objects.create(
-            member=other_member,
-            team=team_2,
-        )
-
-        path = reverse('sentry-organization-members', args=[organization.slug])
-
-        self.login_as(team_admin)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/organization-members.html')
-
-        assert resp.context['organization'] == organization
-        assert len(resp.context['request_list']) == 1
-        assert resp.context['request_list'][0] == request_1
