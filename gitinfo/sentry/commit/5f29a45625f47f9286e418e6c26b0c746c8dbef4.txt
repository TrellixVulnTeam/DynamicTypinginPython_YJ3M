commit 5f29a45625f47f9286e418e6c26b0c746c8dbef4
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jan 26 11:12:47 2018 -0800

    feat(environments): Environment toggle uses default values (#7075)

diff --git a/src/sentry/static/sentry/app/actionCreators/environments.jsx b/src/sentry/static/sentry/app/actionCreators/environments.jsx
index 4d60745062..ac78fb953d 100644
--- a/src/sentry/static/sentry/app/actionCreators/environments.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/environments.jsx
@@ -7,3 +7,11 @@ export function setActiveEnvironment(environment) {
 export function clearActiveEnvironment() {
   EnvironmentActions.clearActive();
 }
+
+export function loadEnvironments(data) {
+  EnvironmentActions.loadData(data);
+}
+
+export function setDefaultEnvironment(env) {
+  EnvironmentActions.setDefault(env);
+}
diff --git a/src/sentry/static/sentry/app/actions/environmentActions.jsx b/src/sentry/static/sentry/app/actions/environmentActions.jsx
index cbe6085034..12c37fb3b9 100644
--- a/src/sentry/static/sentry/app/actions/environmentActions.jsx
+++ b/src/sentry/static/sentry/app/actions/environmentActions.jsx
@@ -1,5 +1,10 @@
 import Reflux from 'reflux';
 
-let AlertActions = Reflux.createActions(['setActive', 'clearActive']);
+let EnvironmentActions = Reflux.createActions([
+  'setActive',
+  'clearActive',
+  'loadData',
+  'setDefault',
+]);
 
-export default AlertActions;
+export default EnvironmentActions;
diff --git a/src/sentry/static/sentry/app/stores/environmentStore.jsx b/src/sentry/static/sentry/app/stores/environmentStore.jsx
index a6dc07baae..5401a7d31f 100644
--- a/src/sentry/static/sentry/app/stores/environmentStore.jsx
+++ b/src/sentry/static/sentry/app/stores/environmentStore.jsx
@@ -1,6 +1,10 @@
 import Reflux from 'reflux';
 import {toTitleCase} from '../utils';
+
 import ProjectActions from '../actions/projectActions';
+import EnvironmentActions from '../actions/environmentActions';
+
+import {setDefaultEnvironment} from '../actionCreators/environments';
 
 const PRODUCTION_ENV_NAMES = new Set([
   'production',
@@ -17,6 +21,7 @@ const EnvironmentStore = Reflux.createStore({
   init() {
     this.items = [];
     this.defaultEnvironment = null;
+    this.listenTo(EnvironmentActions.loadData, this.loadInitialData);
     this.listenTo(ProjectActions.setActive, this.onSetActiveProject);
   },
 
@@ -32,6 +37,9 @@ const EnvironmentStore = Reflux.createStore({
       },
     }));
     this.trigger(this.items, 'initial');
+
+    // Update the default environment in the latest context store
+    setDefaultEnvironment(this.getDefault());
   },
 
   getByName(name) {
diff --git a/src/sentry/static/sentry/app/stores/latestContextStore.jsx b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
index 0191d0e903..e110386cb2 100644
--- a/src/sentry/static/sentry/app/stores/latestContextStore.jsx
+++ b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
@@ -23,6 +23,7 @@ const LatestContextStore = Reflux.createStore({
     this.listenTo(OrganizationsActions.update, this.onUpdateOrganization);
     this.listenTo(EnvironmentActions.setActive, this.onSetActiveEnvironment);
     this.listenTo(EnvironmentActions.clearActive, this.onClearActiveEnvironment);
+    this.listenTo(EnvironmentActions.setDefault, this.onSetActiveEnvironment);
   },
 
   reset() {
@@ -62,7 +63,6 @@ const LatestContextStore = Reflux.createStore({
     } else if (!this.state.project || this.state.project.slug !== project.slug) {
       // Update only if different
       this.state.project = {...project};
-      this.state.environment = null;
     }
 
     this.trigger(this.state);
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index 76b19ec753..20efa8ef80 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -5,7 +5,7 @@ import Reflux from 'reflux';
 import DocumentTitle from 'react-document-title';
 
 import ApiMixin from '../../mixins/apiMixin';
-import EnvironmentStore from '../../stores/environmentStore';
+
 import MemberListStore from '../../stores/memberListStore';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
@@ -14,6 +14,7 @@ import OrganizationState from '../../mixins/organizationState';
 import SentryTypes from '../../proptypes';
 import TeamStore from '../../stores/teamStore';
 import ProjectsStore from '../../stores/projectsStore';
+import {loadEnvironments} from '../../actionCreators/environments';
 import {setActiveProject} from '../../actionCreators/projects';
 import {t} from '../../locale';
 
@@ -191,9 +192,7 @@ const ProjectContext = createReactClass({
       });
 
       this.api.request(this.getEnvironmentListEndpoint(), {
-        success: data => {
-          EnvironmentStore.loadInitialData(data);
-        },
+        success: loadEnvironments,
       });
 
       this.setState({
