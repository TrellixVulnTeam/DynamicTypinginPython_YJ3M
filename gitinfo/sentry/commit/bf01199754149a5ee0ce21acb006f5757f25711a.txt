commit bf01199754149a5ee0ce21acb006f5757f25711a
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Jun 15 13:53:00 2020 -0400

    feat(apm): Add per-cell enhancements to the Performance page (#19255)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/cellAction.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/cellAction.tsx
index d764ebbf63..e4728ec246 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/cellAction.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/cellAction.tsx
@@ -1,25 +1,18 @@
 import React from 'react';
 import ReactDOM from 'react-dom';
 import styled from '@emotion/styled';
-import {browserHistory} from 'react-router';
 import * as PopperJS from 'popper.js';
 import {Manager, Reference, Popper} from 'react-popper';
 
 import {t} from 'app/locale';
 import {defined} from 'app/utils';
 import {IconEllipsis} from 'app/icons';
-import EventView, {MetaType} from 'app/utils/discover/eventView';
 import space from 'app/styles/space';
-import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
-import {OrganizationSummary, Project} from 'app/types';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {getAggregateAlias} from 'app/utils/discover/fields';
-import {transactionSummaryRouteWithQuery} from 'app/views/performance/transactionSummary/utils';
-import withProjects from 'app/utils/withProjects';
 
 import {TableColumn, TableDataRow} from './types';
 
-enum Actions {
+export enum Actions {
   ADD = 'add',
   EXCLUDE = 'exclude',
   SHOW_GREATER_THAN = 'show_greater_than',
@@ -29,13 +22,13 @@ enum Actions {
 }
 
 type Props = {
-  eventView: EventView;
-  organization: OrganizationSummary;
-  projects: Project[];
   column: TableColumn<keyof TableDataRow>;
   dataRow: TableDataRow;
-  tableMeta: MetaType;
   children: React.ReactNode;
+  handleCellAction: (action: Actions, value: React.ReactText) => void;
+
+  // allow list of actions to display on the context menu
+  allowActions?: Actions[];
 };
 
 type State = {
@@ -104,128 +97,46 @@ class CellAction extends React.Component<Props, State> {
     });
   };
 
-  handleCellAction = (action: Actions, value: React.ReactText) => {
-    const {eventView, column, organization, tableMeta, projects, dataRow} = this.props;
-
-    const query = tokenizeSearch(eventView.query);
-
-    let nextView = eventView.clone();
-
-    trackAnalyticsEvent({
-      eventKey: 'discover_v2.results.cellaction',
-      eventName: 'Discoverv2: Cell Action Clicked',
-      organization_id: parseInt(organization.id, 10),
-      action,
-    });
-
-    switch (action) {
-      case Actions.ADD:
-        // Remove exclusion if it exists.
-        delete query[`!${column.name}`];
-        query[column.name] = [`${value}`];
-        break;
-      case Actions.EXCLUDE:
-        // Remove positive if it exists.
-        delete query[column.name];
-        // Negations should stack up.
-        const negation = `!${column.name}`;
-        if (!query.hasOwnProperty(negation)) {
-          query[negation] = [];
-        }
-        query[negation].push(`${value}`);
-        break;
-      case Actions.SHOW_GREATER_THAN: {
-        // Remove query token if it already exists
-        delete query[column.name];
-        query[column.name] = [`>${value}`];
-        const field = {field: column.name, width: column.width};
-
-        // sort descending order
-        nextView = nextView.sortOnField(field, tableMeta, 'desc');
-
-        break;
-      }
-      case Actions.SHOW_LESS_THAN: {
-        // Remove query token if it already exists
-        delete query[column.name];
-        query[column.name] = [`<${value}`];
-        const field = {field: column.name, width: column.width};
-
-        // sort ascending order
-        nextView = nextView.sortOnField(field, tableMeta, 'asc');
-
-        break;
-      }
-      case Actions.TRANSACTION: {
-        const maybeProject = projects.find(project => project.slug === dataRow.project);
-
-        const projectID = maybeProject ? [maybeProject.id] : undefined;
-
-        const next = transactionSummaryRouteWithQuery({
-          orgSlug: organization.slug,
-          transaction: String(value),
-          projectID,
-          query: {},
-        });
-
-        browserHistory.push(next);
-        return;
-      }
-      case Actions.RELEASE: {
-        const maybeProject = projects.find(project => {
-          return project.slug === dataRow.project;
-        });
-
-        browserHistory.push({
-          pathname: `/organizations/${organization.slug}/releases/${encodeURIComponent(
-            value
-          )}/`,
-          query: {
-            ...nextView.getGlobalSelection(),
-
-            project: maybeProject ? maybeProject.id : undefined,
-          },
-        });
-
-        return;
-      }
-      default:
-        throw new Error(`Unknown action type. ${action}`);
-    }
-    nextView.query = stringifyQueryObject(query);
-
-    browserHistory.push(nextView.getResultsViewUrlTarget(organization.slug));
-  };
-
   handleMenuToggle = (event: React.MouseEvent<HTMLButtonElement>) => {
     event.preventDefault();
     this.setState({isOpen: !this.state.isOpen});
   };
 
   renderMenuButtons() {
-    const {dataRow, column} = this.props;
+    const {dataRow, column, handleCellAction, allowActions} = this.props;
 
     const fieldAlias = getAggregateAlias(column.name);
     const value = dataRow[fieldAlias];
 
     const actions: React.ReactNode[] = [];
 
+    function addMenuItem(action: Actions, menuItem: React.ReactNode) {
+      if (
+        (Array.isArray(allowActions) && allowActions.includes(action)) ||
+        !allowActions
+      ) {
+        actions.push(menuItem);
+      }
+    }
+
     if (column.type !== 'duration') {
-      actions.push(
+      addMenuItem(
+        Actions.ADD,
         <ActionItem
           key="add-to-filter"
           data-test-id="add-to-filter"
-          onClick={() => this.handleCellAction(Actions.ADD, value)}
+          onClick={() => handleCellAction(Actions.ADD, value)}
         >
           {t('Add to filter')}
         </ActionItem>
       );
 
-      actions.push(
+      addMenuItem(
+        Actions.EXCLUDE,
         <ActionItem
           key="exclude-from-filter"
           data-test-id="exclude-from-filter"
-          onClick={() => this.handleCellAction(Actions.EXCLUDE, value)}
+          onClick={() => handleCellAction(Actions.EXCLUDE, value)}
         >
           {t('Exclude from filter')}
         </ActionItem>
@@ -233,21 +144,23 @@ class CellAction extends React.Component<Props, State> {
     }
 
     if (column.type !== 'string' && column.type !== 'boolean') {
-      actions.push(
+      addMenuItem(
+        Actions.SHOW_GREATER_THAN,
         <ActionItem
           key="show-values-greater-than"
           data-test-id="show-values-greater-than"
-          onClick={() => this.handleCellAction(Actions.SHOW_GREATER_THAN, value)}
+          onClick={() => handleCellAction(Actions.SHOW_GREATER_THAN, value)}
         >
           {t('Show values greater than')}
         </ActionItem>
       );
 
-      actions.push(
+      addMenuItem(
+        Actions.SHOW_LESS_THAN,
         <ActionItem
           key="show-values-less-than"
           data-test-id="show-values-less-than"
-          onClick={() => this.handleCellAction(Actions.SHOW_LESS_THAN, value)}
+          onClick={() => handleCellAction(Actions.SHOW_LESS_THAN, value)}
         >
           {t('Show values less than')}
         </ActionItem>
@@ -255,11 +168,12 @@ class CellAction extends React.Component<Props, State> {
     }
 
     if (column.column.kind === 'field' && column.column.field === 'transaction') {
-      actions.push(
+      addMenuItem(
+        Actions.TRANSACTION,
         <ActionItem
           key="transaction-summary"
           data-test-id="transaction-summary"
-          onClick={() => this.handleCellAction(Actions.TRANSACTION, value)}
+          onClick={() => handleCellAction(Actions.TRANSACTION, value)}
         >
           {t('Go to summary')}
         </ActionItem>
@@ -267,11 +181,12 @@ class CellAction extends React.Component<Props, State> {
     }
 
     if (column.column.kind === 'field' && column.column.field === 'release') {
-      actions.push(
+      addMenuItem(
+        Actions.RELEASE,
         <ActionItem
           key="release"
           data-test-id="release"
-          onClick={() => this.handleCellAction(Actions.RELEASE, value)}
+          onClick={() => handleCellAction(Actions.RELEASE, value)}
         >
           {t('Go to release')}
         </ActionItem>
@@ -387,7 +302,7 @@ class CellAction extends React.Component<Props, State> {
   }
 }
 
-export default withProjects(CellAction);
+export default CellAction;
 
 const Container = styled('div')`
   position: relative;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 37a3f17998..fd2d19750b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -3,7 +3,7 @@ import styled from '@emotion/styled';
 import {browserHistory} from 'react-router';
 import {Location, LocationDescriptorObject} from 'history';
 
-import {Organization, OrganizationSummary} from 'app/types';
+import {Organization, OrganizationSummary, Project} from 'app/types';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import GridEditable, {
   COL_WIDTH_UNDEFINED,
@@ -23,17 +23,21 @@ import EventView, {
 import {Column} from 'app/utils/discover/fields';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 import {generateEventSlug, eventDetailsRouteWithEventView} from 'app/utils/discover/urls';
+import withProjects from 'app/utils/withProjects';
+import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
+import {transactionSummaryRouteWithQuery} from 'app/views/performance/transactionSummary/utils';
 
 import {getExpandedResults, pushEventViewToLocation} from '../utils';
 import ColumnEditModal, {modalCss} from './columnEditModal';
 import {TableColumn, TableData, TableDataRow} from './types';
 import HeaderCell from './headerCell';
-import CellAction from './cellAction';
+import CellAction, {Actions} from './cellAction';
 import TableActions from './tableActions';
 
 export type TableViewProps = {
   location: Location;
   organization: Organization;
+  projects: Project[];
 
   isLoading: boolean;
   error: string | null;
@@ -212,11 +216,9 @@ class TableView extends React.Component<TableViewProps> {
           tableMeta={tableData.meta}
         >
           <CellAction
-            organization={organization}
-            eventView={eventView}
             column={column}
             dataRow={dataRow}
-            tableMeta={tableData.meta}
+            handleCellAction={this.handleCellAction(dataRow, column, tableData.meta)}
           >
             {fieldRenderer(dataRow, {organization, location})}
           </CellAction>
@@ -227,11 +229,9 @@ class TableView extends React.Component<TableViewProps> {
     // Scalar fields offer cell actions to build queries.
     return (
       <CellAction
-        organization={organization}
-        eventView={eventView}
         column={column}
         dataRow={dataRow}
-        tableMeta={tableData.meta}
+        handleCellAction={this.handleCellAction(dataRow, column, tableData.meta)}
       >
         {fieldRenderer(dataRow, {organization, location})}
       </CellAction>
@@ -255,6 +255,105 @@ class TableView extends React.Component<TableViewProps> {
     );
   };
 
+  handleCellAction = (
+    dataRow: TableDataRow,
+    column: TableColumn<keyof TableDataRow>,
+    tableMeta: MetaType
+  ) => {
+    return (action: Actions, value: React.ReactText) => {
+      const {eventView, organization, projects} = this.props;
+
+      const query = tokenizeSearch(eventView.query);
+
+      let nextView = eventView.clone();
+
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.results.cellaction',
+        eventName: 'Discoverv2: Cell Action Clicked',
+        organization_id: parseInt(organization.id, 10),
+        action,
+      });
+
+      switch (action) {
+        case Actions.ADD:
+          // Remove exclusion if it exists.
+          delete query[`!${column.name}`];
+          query[column.name] = [`${value}`];
+          break;
+        case Actions.EXCLUDE:
+          // Remove positive if it exists.
+          delete query[column.name];
+          // Negations should stack up.
+          const negation = `!${column.name}`;
+          if (!query.hasOwnProperty(negation)) {
+            query[negation] = [];
+          }
+          query[negation].push(`${value}`);
+          break;
+        case Actions.SHOW_GREATER_THAN: {
+          // Remove query token if it already exists
+          delete query[column.name];
+          query[column.name] = [`>${value}`];
+          const field = {field: column.name, width: column.width};
+
+          // sort descending order
+          nextView = nextView.sortOnField(field, tableMeta, 'desc');
+
+          break;
+        }
+        case Actions.SHOW_LESS_THAN: {
+          // Remove query token if it already exists
+          delete query[column.name];
+          query[column.name] = [`<${value}`];
+          const field = {field: column.name, width: column.width};
+
+          // sort ascending order
+          nextView = nextView.sortOnField(field, tableMeta, 'asc');
+
+          break;
+        }
+        case Actions.TRANSACTION: {
+          const maybeProject = projects.find(project => project.slug === dataRow.project);
+
+          const projectID = maybeProject ? [maybeProject.id] : undefined;
+
+          const next = transactionSummaryRouteWithQuery({
+            orgSlug: organization.slug,
+            transaction: String(value),
+            projectID,
+            query: {},
+          });
+
+          browserHistory.push(next);
+          return;
+        }
+        case Actions.RELEASE: {
+          const maybeProject = projects.find(project => {
+            return project.slug === dataRow.project;
+          });
+
+          browserHistory.push({
+            pathname: `/organizations/${organization.slug}/releases/${encodeURIComponent(
+              value
+            )}/`,
+            query: {
+              ...nextView.getGlobalSelection(),
+
+              project: maybeProject ? maybeProject.id : undefined,
+            },
+          });
+
+          return;
+        }
+        default:
+          throw new Error(`Unknown action type. ${action}`);
+      }
+      nextView.query = stringifyQueryObject(query);
+
+      browserHistory.push(nextView.getResultsViewUrlTarget(organization.slug));
+    };
+  };
+
   handleUpdateColumns = (columns: Column[]): void => {
     const {organization, eventView} = this.props;
 
@@ -387,4 +486,4 @@ const StyledIcon = styled(IconStack)`
   vertical-align: middle;
 `;
 
-export default TableView;
+export default withProjects(TableView);
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index 423c07df8b..ab9073451f 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -1,17 +1,24 @@
 import React from 'react';
 import {Location, LocationDescriptorObject} from 'history';
+import * as ReactRouter from 'react-router';
 
 import {Organization, Project} from 'app/types';
 import Pagination from 'app/components/pagination';
 import Link from 'app/components/links/link';
-import EventView, {EventData, isFieldSortable} from 'app/utils/discover/eventView';
+import EventView, {
+  EventData,
+  isFieldSortable,
+  MetaType,
+} from 'app/utils/discover/eventView';
 import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
 import GridEditable, {COL_WIDTH_UNDEFINED, GridColumn} from 'app/components/gridEditable';
 import SortLink from 'app/components/gridEditable/sortLink';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
+import CellAction, {Actions} from 'app/views/eventsV2/table/cellAction';
 import DiscoverQuery from 'app/utils/discover/discoverQuery';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
+import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
 
 import {transactionSummaryRouteWithQuery} from './transactionSummary/utils';
 import {COLUMN_TITLES} from './data';
@@ -55,19 +62,122 @@ class Table extends React.Component<Props, State> {
     widths: [],
   };
 
-  renderBodyCell = (tableMeta: TableData['meta']) => {
+  handleCellAction = (column: TableColumn<keyof TableDataRow>, tableMeta: MetaType) => {
+    return (action: Actions, value: React.ReactText) => {
+      const {eventView, location, organization} = this.props;
+
+      let nextLocationQuery: Location['query'] = {};
+      const searchConditions = tokenizeSearch(eventView.query);
+
+      // remove any event.type queries since it is implied to apply to only transactions
+      delete searchConditions['event.type'];
+
+      trackAnalyticsEvent({
+        eventKey: 'performance_views.overview.cellaction',
+        eventName: 'Performance Views: Cell Action Clicked',
+        organization_id: parseInt(organization.id, 10),
+        action,
+      });
+
+      switch (action) {
+        case Actions.ADD: {
+          // Remove exclusion if it exists.
+          delete searchConditions[`!${column.name}`];
+          searchConditions[column.name] = [`${value}`];
+
+          nextLocationQuery = {
+            query: stringifyQueryObject(searchConditions),
+          };
+
+          break;
+        }
+        case Actions.EXCLUDE: {
+          // Remove positive if it exists.
+          delete searchConditions[column.name];
+          // Negations should stack up.
+          const negation = `!${column.name}`;
+          if (!searchConditions.hasOwnProperty(negation)) {
+            searchConditions[negation] = [];
+          }
+          searchConditions[negation].push(`${value}`);
+
+          nextLocationQuery = {
+            query: stringifyQueryObject(searchConditions),
+          };
+
+          break;
+        }
+        case Actions.SHOW_GREATER_THAN: {
+          // Remove query token if it already exists
+          delete searchConditions[column.name];
+          searchConditions[column.name] = [`>${value}`];
+          const field = {field: column.name, width: column.width};
+
+          // sort descending order
+          const nextEventView = eventView.sortOnField(field, tableMeta, 'desc');
+          const queryStringObject = nextEventView.generateQueryStringObject();
+
+          nextLocationQuery = {
+            query: stringifyQueryObject(searchConditions),
+            sort: queryStringObject.sort,
+          };
+
+          break;
+        }
+        case Actions.SHOW_LESS_THAN: {
+          // Remove query token if it already exists
+          delete searchConditions[column.name];
+          searchConditions[column.name] = [`<${value}`];
+          const field = {field: column.name, width: column.width};
+
+          // sort ascending order
+          const nextEventView = eventView.sortOnField(field, tableMeta, 'asc');
+          const queryStringObject = nextEventView.generateQueryStringObject();
+
+          nextLocationQuery = {
+            query: stringifyQueryObject(searchConditions),
+            sort: queryStringObject.sort,
+          };
+
+          break;
+        }
+        default:
+          throw new Error(`Unknown action type. ${action}`);
+      }
+
+      ReactRouter.browserHistory.push({
+        pathname: location.pathname,
+        query: {
+          ...location.query,
+          cursor: undefined,
+          ...nextLocationQuery,
+        },
+      });
+    };
+  };
+
+  renderBodyCell = (tableData: TableData | null) => {
     const {eventView, organization, projects, location, summaryConditions} = this.props;
 
     return (
       column: TableColumn<keyof TableDataRow>,
       dataRow: TableDataRow
     ): React.ReactNode => {
-      if (!tableMeta) {
-        return null;
+      if (!tableData || !tableData.meta) {
+        return dataRow[column.key];
       }
+      const tableMeta = tableData.meta;
+
       const field = String(column.key);
       const fieldRenderer = getFieldRenderer(field, tableMeta);
-      let rendered = fieldRenderer(dataRow, {organization, location});
+      const rendered = fieldRenderer(dataRow, {organization, location});
+
+      const allowActions = [
+        Actions.ADD,
+        Actions.EXCLUDE,
+        Actions.SHOW_GREATER_THAN,
+        Actions.SHOW_LESS_THAN,
+      ];
 
       if (field === 'transaction') {
         const projectID = getProjectID(dataRow, projects);
@@ -81,14 +191,35 @@ class Table extends React.Component<Props, State> {
           projectID,
         });
 
-        rendered = (
-          <Link to={target} onClick={this.handleSummaryClick}>
-            {rendered}
-          </Link>
+        return (
+          <CellAction
+            column={column}
+            dataRow={dataRow}
+            handleCellAction={this.handleCellAction(column, tableData.meta)}
+            allowActions={allowActions}
+          >
+            <Link to={target} onClick={this.handleSummaryClick}>
+              {rendered}
+            </Link>
+          </CellAction>
         );
       }
 
-      return rendered;
+      if (field.startsWith('user_misery')) {
+        // don't display per cell actions for user_misery
+        return rendered;
+      }
+
+      return (
+        <CellAction
+          column={column}
+          dataRow={dataRow}
+          handleCellAction={this.handleCellAction(column, tableData.meta)}
+          allowActions={allowActions}
+        >
+          {rendered}
+        </CellAction>
+      );
     };
   };
 
@@ -180,7 +311,7 @@ class Table extends React.Component<Props, State> {
                 grid={{
                   onResizeColumn: this.handleResizeColumn,
                   renderHeadCell: this.renderHeadCell(tableData?.meta) as any,
-                  renderBodyCell: this.renderBodyCell(tableData?.meta) as any,
+                  renderBodyCell: this.renderBodyCell(tableData) as any,
                 }}
                 location={location}
               />
diff --git a/tests/js/spec/views/eventsV2/table/cellAction.spec.jsx b/tests/js/spec/views/eventsV2/table/cellAction.spec.jsx
index 7ab79fec10..3a153e1bc9 100644
--- a/tests/js/spec/views/eventsV2/table/cellAction.spec.jsx
+++ b/tests/js/spec/views/eventsV2/table/cellAction.spec.jsx
@@ -1,13 +1,11 @@
 import React from 'react';
-import {browserHistory} from 'react-router';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
-import {initializeOrg} from 'sentry-test/initializeOrg';
 
 import CellAction from 'app/views/eventsV2/table/cellAction';
 import EventView from 'app/utils/discover/eventView';
 
-function makeWrapper(eventView, initial, columnIndex = 0) {
+function makeWrapper(eventView, handleCellAction, columnIndex = 0) {
   const data = {
     transaction: 'best-transaction',
     count: 19,
@@ -16,10 +14,10 @@ function makeWrapper(eventView, initial, columnIndex = 0) {
   };
   return mountWithTheme(
     <CellAction
-      organization={initial.organization}
       dataRow={data}
       eventView={eventView}
       column={eventView.getColumns()[columnIndex]}
+      handleCellAction={handleCellAction}
     >
       <strong>some content</strong>
     </CellAction>
@@ -43,10 +41,9 @@ describe('Discover -> CellAction', function() {
     },
   };
   const view = EventView.fromLocation(location);
-  const initial = initializeOrg();
 
   describe('hover menu button', function() {
-    const wrapper = makeWrapper(view, initial);
+    const wrapper = makeWrapper(view);
 
     it('shows no menu by default', function() {
       expect(wrapper.find('MenuButton')).toHaveLength(0);
@@ -62,7 +59,7 @@ describe('Discover -> CellAction', function() {
   });
 
   describe('opening the menu', function() {
-    const wrapper = makeWrapper(view, initial);
+    const wrapper = makeWrapper(view);
     wrapper.find('Container').simulate('mouseEnter');
 
     it('toggles the menu on click', function() {
@@ -77,117 +74,86 @@ describe('Discover -> CellAction', function() {
 
   describe('per cell actions', function() {
     let wrapper;
+    let handleCellAction;
     beforeEach(function() {
-      wrapper = makeWrapper(view, initial);
+      handleCellAction = jest.fn();
+      wrapper = makeWrapper(view, handleCellAction);
       // Show button and menu.
       wrapper.find('Container').simulate('mouseEnter');
       wrapper.find('MenuButton').simulate('click');
-
-      browserHistory.push.mockReset();
     });
 
     it('add button appends condition', function() {
       wrapper.find('button[data-test-id="add-to-filter"]').simulate('click');
 
-      expect(browserHistory.push).toHaveBeenCalledWith({
-        pathname: '/organizations/org-slug/discover/results/',
-        query: expect.objectContaining({
-          query: 'event.type:transaction transaction:best-transaction',
-        }),
-      });
+      expect(handleCellAction).toHaveBeenCalledWith('add', 'best-transaction');
     });
 
     it('exclude button adds condition', function() {
       wrapper.find('button[data-test-id="exclude-from-filter"]').simulate('click');
 
-      expect(browserHistory.push).toHaveBeenCalledWith({
-        pathname: '/organizations/org-slug/discover/results/',
-        query: expect.objectContaining({
-          query: 'event.type:transaction !transaction:best-transaction',
-        }),
-      });
+      expect(handleCellAction).toHaveBeenCalledWith('exclude', 'best-transaction');
     });
 
     it('exclude button appends exclusions', function() {
       const excludeView = EventView.fromLocation({
         query: {...location.query, query: '!transaction:nope'},
       });
-      wrapper = makeWrapper(excludeView, initial);
+      wrapper = makeWrapper(excludeView, handleCellAction);
       // Show button and menu.
       wrapper.find('Container').simulate('mouseEnter');
       wrapper.find('MenuButton').simulate('click');
       wrapper.find('button[data-test-id="exclude-from-filter"]').simulate('click');
 
-      expect(browserHistory.push).toHaveBeenCalledWith({
-        pathname: '/organizations/org-slug/discover/results/',
-        query: expect.objectContaining({
-          query: '!transaction:nope !transaction:best-transaction',
-        }),
-      });
+      expect(handleCellAction).toHaveBeenCalledWith('exclude', 'best-transaction');
     });
 
     it('go to summary button goes to transaction summary page', function() {
       wrapper.find('button[data-test-id="transaction-summary"]').simulate('click');
 
-      expect(browserHistory.push).toHaveBeenCalledWith({
-        pathname: '/organizations/org-slug/performance/summary/',
-        query: expect.objectContaining({
-          query: undefined,
-          project: undefined,
-          transaction: 'best-transaction',
-        }),
-      });
+      expect(handleCellAction).toHaveBeenCalledWith('transaction', 'best-transaction');
     });
 
     it('go to release button goes to release health page', function() {
-      wrapper = makeWrapper(view, initial, 3);
+      wrapper = makeWrapper(view, handleCellAction, 3);
       // Show button and menu.
       wrapper.find('Container').simulate('mouseEnter');
       wrapper.find('MenuButton').simulate('click');
 
       wrapper.find('button[data-test-id="release"]').simulate('click');
 
-      expect(browserHistory.push).toHaveBeenCalledWith({
-        pathname:
-          '/organizations/org-slug/releases/F2520C43515BD1F0E8A6BD46233324641A370BF6/',
-        query: expect.objectContaining({
-          project: undefined,
-        }),
-      });
+      expect(handleCellAction).toHaveBeenCalledWith(
+        'release',
+        'F2520C43515BD1F0E8A6BD46233324641A370BF6'
+      );
     });
 
     it('greater than button adds condition', function() {
-      wrapper = makeWrapper(view, initial, 2);
+      wrapper = makeWrapper(view, handleCellAction, 2);
       // Show button and menu.
       wrapper.find('Container').simulate('mouseEnter');
       wrapper.find('MenuButton').simulate('click');
 
       wrapper.find('button[data-test-id="show-values-greater-than"]').simulate('click');
 
-      expect(browserHistory.push).toHaveBeenCalledWith({
-        pathname: '/organizations/org-slug/discover/results/',
-        query: expect.objectContaining({
-          query: 'event.type:transaction timestamp:>2020-06-09T01:46:25+00:00',
-          sort: ['-timestamp'],
-        }),
-      });
+      expect(handleCellAction).toHaveBeenCalledWith(
+        'show_greater_than',
+        '2020-06-09T01:46:25+00:00'
+      );
     });
 
     it('less than button adds condition', function() {
-      wrapper = makeWrapper(view, initial, 2);
+      wrapper = makeWrapper(view, handleCellAction, 2);
       // Show button and menu.
       wrapper.find('Container').simulate('mouseEnter');
       wrapper.find('MenuButton').simulate('click');
 
       wrapper.find('button[data-test-id="show-values-less-than"]').simulate('click');
 
-      expect(browserHistory.push).toHaveBeenCalledWith({
-        pathname: '/organizations/org-slug/discover/results/',
-        query: expect.objectContaining({
-          query: 'event.type:transaction timestamp:<2020-06-09T01:46:25+00:00',
-          sort: ['timestamp'],
-        }),
-      });
+      expect(handleCellAction).toHaveBeenCalledWith(
+        'show_less_than',
+        '2020-06-09T01:46:25+00:00'
+      );
     });
   });
 });
