commit db1fb15e9864a27857b91cd040f6d8e2ae600ffb
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Sep 13 11:12:30 2018 +0200

    feat: Loader UI (#9693)
    
    * feat: Add jsloader feature flag, Add selector for sdk version
    
    * feat: Calculate browser SDK version
    
    * feat: Set default version to latest
    
    * feat: Default is highest number.x version for new DSN
    
    * fix: Add 4.x as default
    
    * fix: Tests
    
    * fix: Tests
    
    * feat: Make showReportDialog forceload optional
    
    * feat: Make calls to init optional
    
    * feat: Add check for %s in config var

diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index 0fce88bfc0..c9fba3fcb2 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -11,6 +11,10 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.loader.browsersdkversion import (
+    DEFAULT_VERSION,
+    get_browser_sdk_version_choices
+)
 
 
 @scenario('DeleteClientKey')
@@ -43,6 +47,9 @@ class KeySerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=False)
     isActive = serializers.BooleanField(required=False)
     rateLimit = RateLimitSerializer(required=False)
+    browserSdkVersion = serializers.ChoiceField(
+        choices=get_browser_sdk_version_choices(), required=False
+    )
 
 
 class ProjectKeyDetailsEndpoint(ProjectEndpoint):
@@ -92,6 +99,11 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
             if result.get('name'):
                 key.label = result['name']
 
+            if result.get('browserSdkVersion') == '':
+                key.data = {'browserSdkVersion': DEFAULT_VERSION}
+            else:
+                key.data = {'browserSdkVersion': result.get('browserSdkVersion', DEFAULT_VERSION)}
+
             if result.get('isActive') is True:
                 key.status = ProjectKeyStatus.ACTIVE
             elif result.get('isActive') is False:
diff --git a/src/sentry/api/endpoints/project_keys.py b/src/sentry/api/endpoints/project_keys.py
index 19db2f9b7e..6af275ea3b 100644
--- a/src/sentry/api/endpoints/project_keys.py
+++ b/src/sentry/api/endpoints/project_keys.py
@@ -9,6 +9,7 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.loader.browsersdkversion import get_highest_browser_sdk_version
 
 
 @scenario('ListClientKeys')
@@ -97,6 +98,7 @@ class ProjectKeysEndpoint(ProjectEndpoint):
                 label=result.get('name'),
                 public_key=result.get('public'),
                 secret_key=result.get('secret'),
+                data={'browserSdkVersion': get_highest_browser_sdk_version()}
             )
 
             self.create_audit_entry(
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 947542c5fd..38087330a7 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -141,6 +141,8 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             feature_list.append('unreleased-changes')
         if features.has('organizations:relay', obj, actor=user):
             feature_list.append('relay')
+        if features.has('organizations:js-loader', obj, actor=user):
+            feature_list.append('js-loader')
         if features.has('organizations:health', obj, actor=user):
             feature_list.append('health')
         if features.has('organizations:discover', obj, actor=user):
diff --git a/src/sentry/api/serializers/models/project_key.py b/src/sentry/api/serializers/models/project_key.py
index 28f0655cdf..f2f3a3ee8f 100644
--- a/src/sentry/api/serializers/models/project_key.py
+++ b/src/sentry/api/serializers/models/project_key.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, register
+from sentry.loader.browsersdkversion import (
+    get_selected_browser_sdk_version, get_browser_sdk_version_choices
+)
 from sentry.models import ProjectKey
 
 
@@ -29,6 +32,10 @@ class ProjectKeySerializer(Serializer):
                 'minidump': obj.minidump_endpoint,
                 'cdn': obj.js_sdk_loader_cdn_url,
             },
+            'browserSdkVersion': get_selected_browser_sdk_version(obj),
+            'browserSdk': {
+                'choices': get_browser_sdk_version_choices(),
+            },
             'dateCreated': obj.date_added,
         }
         return d
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index f2b0e23f36..f99b3baf2e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -784,6 +784,7 @@ SENTRY_FEATURES = {
     'organizations:unreleased-changes': False,
     'organizations:suggested-commits': True,
     'organizations:relay': False,
+    'organizations:js-loader': False,
     'organizations:health': False,
     'organizations:discover': False,
     'projects:global-events': False,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 48dafed034..42a5ec71b4 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -33,6 +33,7 @@ default_manager.add('organizations:new-teams', OrganizationFeature)  # NOQA
 default_manager.add('organizations:unreleased-changes', OrganizationFeature)  # NOQA
 default_manager.add('organizations:environments', OrganizationFeature)  # NOQA
 default_manager.add('organizations:relay', OrganizationFeature)  # NOQA
+default_manager.add('organizations:js-loader', OrganizationFeature)  # NOQA
 default_manager.add('organizations:health', OrganizationFeature)  # NOQA
 default_manager.add('organizations:discover', OrganizationFeature)  # NOQA
 default_manager.add('projects:similarity-view', ProjectFeature)  # NOQA
diff --git a/src/sentry/loader/__init__.py b/src/sentry/loader/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/loader/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/loader/browsersdkversion.py b/src/sentry/loader/browsersdkversion.py
new file mode 100644
index 0000000000..a42c6d3de6
--- /dev/null
+++ b/src/sentry/loader/browsersdkversion.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+import re
+
+from django.conf import settings
+
+
+_version_regexp = re.compile(r'\d+')
+DEFAULT_VERSION = '4.x'
+
+
+def get_highest_browser_sdk_version():
+    return max(get_browser_sdk_version_versions(),
+               key=lambda version: int(_version_regexp.match(version).group(
+                   0)) if _version_regexp.search(version) else -1
+               )
+
+
+def get_browser_sdk_version_versions():
+    # TODO(hazat): do request here to fetch versions
+    return ['latest', DEFAULT_VERSION]
+
+
+def get_browser_sdk_version_choices():
+    rv = []
+    for version in get_browser_sdk_version_versions():
+        rv.append((version, version))
+    return tuple(rv)
+
+
+def get_browser_sdk_version(project_key):
+    # TODO(hazat): Right now we are only returing our conf version
+    selected_version = get_selected_browser_sdk_version(project_key)
+    if selected_version == DEFAULT_VERSION:
+        return settings.JS_SDK_LOADER_SDK_VERSION
+    return settings.JS_SDK_LOADER_SDK_VERSION
+
+
+def get_selected_browser_sdk_version(project_key):
+    return project_key.data.get('browserSdkVersion', DEFAULT_VERSION)
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index 91e6eba44b..ca68be9ba9 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -30,6 +30,7 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
 import ProjectKeyCredentials from 'app/views/settings/project/projectKeys/projectKeyCredentials';
 import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
+import SelectField from 'app/views/settings/components/forms/selectField';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import StackedBarChart from 'app/components/stackedBarChart';
@@ -382,7 +383,6 @@ const KeySettings = createReactClass({
         {jsSdkLoaderEnabled && (
           <Form
             saveOnBlur
-            allowUndo
             apiEndpoint={apiEndpoint}
             apiMethod="PUT"
             initialData={data}
@@ -398,6 +398,15 @@ const KeySettings = createReactClass({
                   <TextCopyInput>{`<script src='${data.dsn
                     .cdn}'></script>`}</TextCopyInput>
                 </Field>
+                <SelectField
+                  name="browserSdkVersion"
+                  choices={data.browserSdk.choices}
+                  placeholder={t('4.x')}
+                  allowClear={false}
+                  help={t(
+                    'Select the version of the SDK that should be loaded'
+                  )}
+                />
               </PanelBody>
             </Panel>
           </Form>
@@ -481,7 +490,7 @@ export default class ProjectKeyDetails extends AsyncView {
     let features = new Set(project.features);
     let hasRateLimitsEnabled = features.has('rate-limits');
     let orgFeatures = new Set(organization.features);
-    let hasjsSdkLoaderEnabled = orgFeatures.has('relay');
+    let hasjsSdkLoaderEnabled = orgFeatures.has('js-loader');
 
     return (
       <div className="ref-key-details">
diff --git a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
index ca6d2618ce..7eb4772bda 100644
--- a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
@@ -20,7 +20,9 @@
     // content.p = promise rejection
     // content.f = function call the Sentry
     if (
-      (content.e || content.p || (content.f && content.f.indexOf('capture') > -1)) &&
+      (content.e || content.p ||
+        (content.f && content.f.indexOf('capture') > -1) ||
+        (content.f && content.f.indexOf('showReportDialog') > -1)) &&
       lazy
     ) {
       // We only want to lazy inject/load the sdk bundle if
@@ -89,9 +91,16 @@
 
       // We want to replay all calls to Sentry first to make sure init is called before
       // we call all our internal error handlers
+      var firstInitCall = false;
       for (var i = 0; i < data.length; i++) {
         if (data[i].f) {
           var call = data[i];
+          if (firstInitCall === false && call.f !== 'init') {
+            // First call always has to be init, this is a conveniece for the user
+            // so call to init is optional
+            SDK.init();
+          }
+          firstInitCall = true;
           SDK[call.f].apply(SDK, call.a);
         }
       }
@@ -140,6 +149,7 @@
     'captureException',
     'captureEvent',
     'configureScope',
+    'showReportDialog',
   ].forEach(function(f) {
     _window[_namespace][f] = function() {
       queue({f: f, a: arguments});
diff --git a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
index 2d9e88354a..2063e037d4 100644
--- a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
+++ b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
@@ -1,3 +1,3 @@
-{% load sentry_helpers %}(function(d,t,u,k,l,m,y,z,v){function n(a){if(!w){w=!0;var g=t.getElementsByTagName(u)[0],c=t.createElement(u);c.src=z;c.crossorigin="anonymous";c.addEventListener("load",function(){try{d[k]=p;d[l]=q;var b=d[m],c=b.init;b.init=function(a){for(var b in a)Object.prototype.hasOwnProperty.call(a,b)&&(v[b]=a[b]);c(v)};C(a,b)}catch(A){console.error(A)}});g.parentNode.insertBefore(c,g)}}function C(a,g){try{a&&a();for(var c=h.data,b=0;b<c.length;b++)if(c[b].f){var e=c[b];g[e.f].apply(g,e.a)}var f=d[k];for(b=
-0;b<c.length;b++)c[b].e?f.apply(d,c[b].e):c[b].p&&g.captureException(c[b].p)}catch(B){console.error(B)}}for(var e=!0,x=!1,f=0;f<document.scripts.length;f++)if(-1<document.scripts[f].src.indexOf(y)){e="no"!==document.scripts[f].dataset.lazy;break}var w=!1,r,h=function(a){(a.e||a.p||a.f&&-1<a.f.indexOf("capture"))&&e&&n(r);h.data.push(a)};h.data=[];d[m]={onLoad:function(a){e&&!x?r=a:n(a)},forceLoad:function(){x=!0;e&&setTimeout(function(){n(r)})}};"init addBreadcrumb captureMessage captureException captureEvent configureScope".split(" ").forEach(function(a){d[m][a]=
-function(){h({f:a,a:arguments})}});var p=d[k];d[k]=function(a,e,c,b,f){h({e:[].slice.call(arguments)});p&&p.apply(d,arguments)};var q=d[l];d[l]=function(a){h({p:a.reason});q&&q.apply(d,arguments)}})(window,document,"script","onerror","onunhandledrejection","Sentry","{{ publicKey|safe }}","{{ jsSdkUrl|safe }}",{{ config|to_json|safe }});
+{% load sentry_helpers %}(function(d,u,v,l,m,n,z,A,w){function p(a){if(!x){x=!0;var e=u.getElementsByTagName(v)[0],b=u.createElement(v);b.src=A;b.crossorigin="anonymous";b.addEventListener("load",function(){try{d[l]=q;d[m]=r;var b=d[n],c=b.init;b.init=function(a){for(var b in a)Object.prototype.hasOwnProperty.call(a,b)&&(w[b]=a[b]);c(w)};B(a,b)}catch(k){console.error(k)}});e.parentNode.insertBefore(b,e)}}function B(a,e){try{a&&a();for(var b=g.data,f=!1,c=0;c<b.length;c++)if(b[c].f){var k=b[c];!1===f&&"init"!==k.f&&e.init();
+f=!0;e[k.f].apply(e,k.a)}var h=d[l];for(c=0;c<b.length;c++)b[c].e?h.apply(d,b[c].e):b[c].p&&e.captureException(b[c].p)}catch(C){console.error(C)}}for(var f=!0,y=!1,h=0;h<document.scripts.length;h++)if(-1<document.scripts[h].src.indexOf(z)){f="no"!==document.scripts[h].dataset.lazy;break}var x=!1,t,g=function(a){(a.e||a.p||a.f&&-1<a.f.indexOf("capture")||a.f&&-1<a.f.indexOf("showReportDialog"))&&f&&p(t);g.data.push(a)};g.data=[];d[n]={onLoad:function(a){f&&!y?t=a:p(a)},forceLoad:function(){y=!0;f&&
+setTimeout(function(){p(t)})}};"init addBreadcrumb captureMessage captureException captureEvent configureScope showReportDialog".split(" ").forEach(function(a){d[n][a]=function(){g({f:a,a:arguments})}});var q=d[l];d[l]=function(a,e,b,f,c){g({e:[].slice.call(arguments)});q&&q.apply(d,arguments)};var r=d[m];d[m]=function(a){g({p:a.reason});r&&r.apply(d,arguments)}})(window,document,"script","onerror","onunhandledrejection","Sentry","{{ publicKey|safe }}","{{ jsSdkUrl|safe }}",{{ config|to_json|safe }});
diff --git a/src/sentry/web/frontend/js_sdk_loader.py b/src/sentry/web/frontend/js_sdk_loader.py
index d4c8da307e..1c7e43ccee 100644
--- a/src/sentry/web/frontend/js_sdk_loader.py
+++ b/src/sentry/web/frontend/js_sdk_loader.py
@@ -7,6 +7,7 @@ from sentry.relay import config
 from sentry.models import ProjectKey
 from sentry.web.frontend.base import BaseView
 from sentry.web.helpers import render_to_response
+from sentry.loader.browsersdkversion import get_browser_sdk_version
 
 
 CACHE_CONTROL = 'public, max-age=30, s-maxage=60, stale-while-revalidate=315360000, stale-if-error=315360000'
@@ -24,7 +25,14 @@ class JavaScriptSdkLoader(BaseView):
         except ProjectKey.DoesNotExist:
             raise Http404
 
-        sdk_url = settings.JS_SDK_LOADER_DEFAULT_SDK_URL
+        sdk_version = get_browser_sdk_version(key)
+        try:
+            if '%s' in settings.JS_SDK_LOADER_DEFAULT_SDK_URL:
+                sdk_url = settings.JS_SDK_LOADER_DEFAULT_SDK_URL % (sdk_version, )
+            else:
+                sdk_url = settings.JS_SDK_LOADER_DEFAULT_SDK_URL
+        except TypeError:
+            sdk_url = ''  # It fails if it cannot inject the version in the string
 
         if not sdk_url:
             tmpl = 'sentry/js-sdk-loader-noop.js.tmpl'
@@ -43,6 +51,6 @@ class JavaScriptSdkLoader(BaseView):
 
         response['Cache-Control'] = CACHE_CONTROL
         response['Surrogate-Key'] = 'project/%s sdk/%s sdk-loader' % (
-            key.project_id, settings.JS_SDK_LOADER_SDK_VERSION)
+            key.project_id, sdk_version)
 
         return response
diff --git a/tests/sentry/loader/__init__.py b/tests/sentry/loader/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/loader/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/loader/test_browsersdkversion.py b/tests/sentry/loader/test_browsersdkversion.py
new file mode 100644
index 0000000000..44d64ab2dd
--- /dev/null
+++ b/tests/sentry/loader/test_browsersdkversion.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase
+from sentry.loader.browsersdkversion import (
+    get_highest_browser_sdk_version,
+    get_browser_sdk_version_versions
+)
+
+
+class BrowserSdkVersionTestCase(TestCase):
+    def test_get_browser_sdk_version_versions(self):
+        assert 'latest' in get_browser_sdk_version_versions()
+        assert '4.x' in get_browser_sdk_version_versions()
+
+    def test_get_highest_browser_sdk_version(self):
+        assert get_highest_browser_sdk_version() == '4.x'
diff --git a/tests/sentry/web/frontend/test_js_sdk_loader.py b/tests/sentry/web/frontend/test_js_sdk_loader.py
index 8cd0f40333..99e01f364d 100644
--- a/tests/sentry/web/frontend/test_js_sdk_loader.py
+++ b/tests/sentry/web/frontend/test_js_sdk_loader.py
@@ -11,7 +11,7 @@ class JavaScriptSdkLoaderTest(TestCase):
     @fixture
     def path(self):
         settings.JS_SDK_LOADER_SDK_VERSION = '0.5.2'
-        settings.JS_SDK_LOADER_DEFAULT_SDK_URL = 'https://s3.amazonaws.com/getsentry-cdn/@sentry/browser/%s/bundle.min.js' % settings.JS_SDK_LOADER_SDK_VERSION
+        settings.JS_SDK_LOADER_DEFAULT_SDK_URL = 'https://s3.amazonaws.com/getsentry-cdn/@sentry/browser/%s/bundle.min.js'
         return reverse('sentry-js-sdk-loader', args=[self.projectkey.public_key])
 
     def test_404(self):
@@ -24,12 +24,20 @@ class JavaScriptSdkLoaderTest(TestCase):
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/js-sdk-loader-noop.js.tmpl')
 
+    def test_no_replace(self):
+        settings.JS_SDK_LOADER_SDK_VERSION = '0.5.2'
+        settings.JS_SDK_LOADER_DEFAULT_SDK_URL = 'https://s3.amazonaws.com/getsentry-cdn/@sentry/browser/0.0.0/bundle.min.js'
+        resp = self.client.get(reverse('sentry-js-sdk-loader', args=[self.projectkey.public_key]))
+        assert resp.status_code == 200
+        self.assertIn(settings.JS_SDK_LOADER_DEFAULT_SDK_URL, resp.content)
+        self.assertTemplateUsed(resp, 'sentry/js-sdk-loader.js.tmpl')
+
     def test_renders_js_loader(self):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/js-sdk-loader.js.tmpl')
         self.assertIn(self.projectkey.public_key, resp.content)
-        self.assertIn(settings.JS_SDK_LOADER_DEFAULT_SDK_URL, resp.content)
+        self.assertIn('bundle.min.js', resp.content)
 
     def test_minified(self):
         resp = self.client.get(self.path)
@@ -43,7 +51,7 @@ class JavaScriptSdkLoaderTest(TestCase):
         assert min_resp.status_code == 200
         self.assertTemplateUsed(min_resp, 'sentry/js-sdk-loader.min.js.tmpl')
         self.assertIn(self.projectkey.public_key, min_resp.content)
-        self.assertIn(settings.JS_SDK_LOADER_DEFAULT_SDK_URL, min_resp.content)
+        self.assertIn('bundle.min.js', min_resp.content)
         assert len(resp.content) > len(min_resp.content)
 
     def test_headers(self):
