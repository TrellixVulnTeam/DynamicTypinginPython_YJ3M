commit 95b636edd132e8360d5742059721c53dffce0ea5
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Tue Jun 16 14:16:13 2020 +0200

    ref(pii): Add Placeholder field (#19336)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx
index 788142487c..552e821c0d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx
@@ -1,11 +1,4 @@
-import {
-  RuleType,
-  MethodType,
-  Rule,
-  PiiConfig,
-  Applications,
-  RuleWithoutRegex,
-} from './types';
+import {RuleType, MethodType, Rule, PiiConfig, Applications, RuleDefault} from './types';
 
 // Remap PII config format to something that is more usable in React. Ideally
 // we would stop doing this at some point and make some updates to how we
@@ -24,6 +17,7 @@ function convertRelayPiiConfig(relayPiiConfig?: string) {
     for (const rule of applications[application]) {
       const resolvedRule = rules[rule];
       const id = convertedRules.length;
+      const source = application;
 
       if (!resolvedRule) {
         // Convert a "built-in" rule like "@anything:remove" to an object {
@@ -31,13 +25,11 @@ function convertRelayPiiConfig(relayPiiConfig?: string) {
         //   method: "remove"
         // }
         if (rule[0] === '@') {
-          const [type, method] = rule.slice(1).split(':') as [RuleType, MethodType];
-          convertedRules.push({
-            id,
-            method,
-            type,
-            source: application,
-          } as RuleWithoutRegex);
+          const [type, method] = rule.slice(1).split(':') as [
+            RuleDefault['type'],
+            RuleDefault['method']
+          ];
+          convertedRules.push({id, method, type, source});
         }
         continue;
       }
@@ -45,18 +37,41 @@ function convertRelayPiiConfig(relayPiiConfig?: string) {
       const {type, redaction} = resolvedRule;
       const method = redaction.method as MethodType;
 
+      if (method === MethodType.REPLACE && resolvedRule.type === RuleType.PATTERN) {
+        convertedRules.push({
+          id,
+          method: MethodType.REPLACE,
+          type: RuleType.PATTERN,
+          source,
+          placeholder: redaction?.text,
+          pattern: resolvedRule.pattern,
+        });
+        continue;
+      }
+
+      if (method === MethodType.REPLACE) {
+        convertedRules.push({
+          id,
+          method: MethodType.REPLACE,
+          type,
+          source,
+          placeholder: redaction?.text,
+        });
+        continue;
+      }
+
       if (resolvedRule.type === RuleType.PATTERN) {
         convertedRules.push({
           id,
           method,
           type: RuleType.PATTERN,
-          source: application,
-          pattern: resolvedRule?.pattern,
+          source,
+          pattern: resolvedRule.pattern,
         });
         continue;
       }
 
-      convertedRules.push({id, method, type, source: application});
+      convertedRules.push({id, method, type, source});
     }
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
index 519c229278..979fe67199 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/dialog.tsx
@@ -92,7 +92,12 @@ class Dialog extends React.Component<Props, State> {
   ) => {
     const rule: Rule = {...this.state.rule, [stateProperty]: value};
 
+    if (rule.type === RuleType.PATTERN) {
+      rule.pattern = rule?.pattern || '';
+    }
+
     if (rule.type !== RuleType.PATTERN) {
+      // TODO(Priscila): Improve this logic
       // @ts-ignore
       delete rule?.pattern;
       this.clearError('pattern');
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
index 99e6e46668..343cb08103 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/form.tsx
@@ -30,6 +30,7 @@ type Props<R extends Rule, K extends KeysOfUnion<R>> = {
   sourceSuggestions?: Array<SourceSuggestion>;
   eventId?: EventId;
 };
+
 const Form = ({
   rule,
   errors,
@@ -42,37 +43,51 @@ const Form = ({
   const {source, type, method} = rule;
   return (
     <Wrapper>
-      <WrapperSelectFields>
-        <FormField label={t('Method')} tooltipInfo={t('What to do')}>
-          <SelectField
-            placeholder={t('Select method')}
-            name="method"
-            options={sortBy(Object.values(MethodType)).map(value => ({
-              ...getMethodLabel(value),
-              value,
-            }))}
-            value={method}
-            onChange={({value}) => onChange('method', value)}
-          />
-        </FormField>
+      <FormField label={t('Method')} tooltipInfo={t('What to do')}>
+        <SelectField
+          placeholder={t('Select method')}
+          name="method"
+          options={sortBy(Object.values(MethodType)).map(value => ({
+            ...getMethodLabel(value),
+            value,
+          }))}
+          value={method}
+          onChange={({value}) => onChange('method', value)}
+        />
+      </FormField>
+      {rule.method === MethodType.REPLACE && (
         <FormField
-          label={t('Data Type')}
-          tooltipInfo={t(
-            'What to look for. Use an existing pattern or define your own using regular expressions.'
-          )}
+          label={t('Custom Placeholder (Optional)')}
+          tooltipInfo={t('It will replace the default placeholder [Filtered]')}
+          isFullWidth
         >
-          <SelectField
-            placeholder={t('Select type')}
-            name="type"
-            options={sortBy(Object.values(RuleType)).map(value => ({
-              label: getRuleLabel(value),
-              value,
-            }))}
-            value={type}
-            onChange={({value}) => onChange('type', value)}
+          <Placeholder
+            name="placeholder"
+            placeholder={`[${t('Filtered')}]`}
+            onChange={(value: string) => {
+              onChange('placeholder', value);
+            }}
+            value={rule.placeholder}
           />
         </FormField>
-      </WrapperSelectFields>
+      )}
+      <FormField
+        label={t('Data Type')}
+        tooltipInfo={t(
+          'What to look for. Use an existing pattern or define your own using regular expressions.'
+        )}
+      >
+        <SelectField
+          placeholder={t('Select type')}
+          name="type"
+          options={sortBy(Object.values(RuleType)).map(value => ({
+            label: getRuleLabel(value),
+            value,
+          }))}
+          value={type}
+          onChange={({value}) => onChange('type', value)}
+        />
+      </FormField>
       {rule.type === RuleType.PATTERN && (
         <FormField
           label={t('Regex matches')}
@@ -122,20 +137,20 @@ const Wrapper = styled('div')`
   grid-row-gap: ${space(2)};
 `;
 
-const WrapperSelectFields = styled('div')`
-  display: grid;
-  grid-gap: ${space(2)};
-  grid-template-columns: 1fr;
-  @media (min-width: ${p => p.theme.breakpoints[0]}) {
-    grid-template-columns: auto auto;
+const StyledTextField = styled(TextField)`
+  height: 40px;
+  input {
+    height: 40px;
   }
 `;
 
-const RegularExpression = styled(TextField)`
+const Placeholder = styled(StyledTextField)`
+  margin-bottom: 0;
+`;
+
+const RegularExpression = styled(StyledTextField)`
   font-size: ${p => p.theme.fontSizeSmall};
-  height: 40px;
   input {
-    height: 40px;
     font-family: ${p => p.theme.text.familyMono};
   }
 `;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceSuggestionExamples.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceSuggestionExamples.tsx
index 74c7e93902..1c1d857c03 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceSuggestionExamples.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/form/sourceSuggestionExamples.tsx
@@ -16,9 +16,7 @@ type State = {
 };
 
 class SourceSuggestionExamples extends React.Component<Props, State> {
-  state: State = {
-    isOpen: false,
-  };
+  state: State = {isOpen: false};
 
   toggleModal = () => {
     this.setState({isOpen: !this.state.isOpen});
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
index 373a37e1fe..825a834640 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/index.tsx
@@ -94,9 +94,8 @@ class DataScrubbing<T extends ProjectId = undefined> extends React.Component<
 
     if (isProjectLevel) {
       try {
-        const convertedRules = convertRelayPiiConfig(organization.relayPiiConfig);
         this.setState({
-          orgRules: convertedRules,
+          orgRules: convertRelayPiiConfig(organization.relayPiiConfig),
         });
       } catch {
         addErrorMessage(t('Unable to load organization rules'));
@@ -192,7 +191,7 @@ class DataScrubbing<T extends ProjectId = undefined> extends React.Component<
         this.setState(prevState => ({
           errors: {
             ...prevState.errors,
-            customRegex: error.message,
+            pattern: error.message,
           },
         }));
         break;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
index fc3be23580..2a53efd196 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/rulesList.tsx
@@ -8,7 +8,7 @@ import {IconDelete, IconEdit} from 'app/icons';
 import Button from 'app/components/button';
 
 import {getMethodLabel, getRuleLabel} from './utils';
-import {RuleType, Rule} from './types';
+import {RuleType, MethodType, Rule} from './types';
 
 type Props = {
   rules: Array<Rule>;
@@ -17,6 +17,31 @@ type Props = {
   disabled?: boolean;
 };
 
+const getListItemDescription = (rule: Rule) => {
+  const {method, type, source} = rule;
+  const methodLabel = getMethodLabel(method);
+  const typeLabel = getRuleLabel(type);
+
+  const descriptionDetails: Array<string> = [];
+
+  descriptionDetails.push(`[${methodLabel.label}]`);
+
+  if (rule.method === MethodType.REPLACE && rule.placeholder) {
+    descriptionDetails.push(`with [${rule.placeholder}]`);
+  }
+
+  descriptionDetails.push(`[${typeLabel}]`);
+
+  if (rule.type === RuleType.PATTERN) {
+    descriptionDetails[descriptionDetails.length - 1] =
+      descriptionDetails.length === 3
+        ? `${t('using')} [${rule.pattern}]`
+        : `[${rule.pattern}]`;
+  }
+
+  return `${descriptionDetails.join(' ')} ${t('from')} [${source}]`;
+};
+
 const RulesList = React.forwardRef(function RulesList(
   {rules, onShowEditRuleModal, onDeleteRule, disabled}: Props,
   ref: React.Ref<HTMLUListElement>
@@ -24,15 +49,10 @@ const RulesList = React.forwardRef(function RulesList(
   return (
     <List ref={ref} isDisabled={disabled}>
       {rules.map(rule => {
-        const {id, method, type, source} = rule;
-        const methodLabel = getMethodLabel(method);
-        const typeLabel = getRuleLabel(type);
-        const typeDescription = rule.type === RuleType.PATTERN ? rule.pattern : typeLabel;
+        const {id} = rule;
         return (
           <ListItem key={id}>
-            <TextOverflow>
-              {`[${methodLabel.label}] [${typeDescription}] ${t('from')} [${source}]`}
-            </TextOverflow>
+            <TextOverflow>{getListItemDescription(rule)}</TextOverflow>
             {onShowEditRuleModal && (
               <Button
                 label={t('Edit Rule')}
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/submitRules.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/submitRules.tsx
index effb9c5a33..ce63fb2722 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/submitRules.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/submitRules.tsx
@@ -1,17 +1,39 @@
 import {Client} from 'app/api';
 
-import {RuleType, PiiConfig, Applications, Rule} from './types';
+import {RuleType, MethodType, PiiConfig, Applications, Rule} from './types';
+
+function getSubmitFormatRule(rule: Rule): PiiConfig {
+  if (rule.type === RuleType.PATTERN && rule.method === MethodType.REPLACE) {
+    return {
+      type: rule.type,
+      pattern: rule.pattern,
+      redaction: {
+        method: rule.method,
+        text: rule?.placeholder,
+      },
+    };
+  }
 
-function getCustomRule(rule: Rule): PiiConfig {
   if (rule.type === RuleType.PATTERN) {
     return {
       type: rule.type,
-      pattern: rule?.pattern,
+      pattern: rule.pattern,
       redaction: {
         method: rule.method,
       },
     };
   }
+
+  if (rule.method === MethodType.REPLACE) {
+    return {
+      type: rule.type,
+      redaction: {
+        method: rule.method,
+        text: rule?.placeholder,
+      },
+    };
+  }
+
   return {
     type: rule.type,
     redaction: {
@@ -22,12 +44,12 @@ function getCustomRule(rule: Rule): PiiConfig {
 
 function submitRules(api: Client, endpoint: string, rules: Array<Rule>) {
   const applications: Applications = {};
-  const customRules: Record<string, PiiConfig> = {};
+  const submitFormatRules: Record<string, PiiConfig> = {};
 
   for (let i = 0; i < rules.length; i++) {
     const rule = rules[i];
     const ruleId = String(i);
-    customRules[ruleId] = getCustomRule(rule);
+    submitFormatRules[ruleId] = getSubmitFormatRule(rule);
 
     if (!applications[rule.source]) {
       applications[rule.source] = [];
@@ -38,7 +60,7 @@ function submitRules(api: Client, endpoint: string, rules: Array<Rule>) {
     }
   }
 
-  const piiConfig = {rules: customRules, applications};
+  const piiConfig = {rules: submitFormatRules, applications};
 
   return api.requestPromise(endpoint, {
     method: 'PUT',
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
index 30c423b2fb..d9a05556aa 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/types.tsx
@@ -51,16 +51,10 @@ export type SourceSuggestion = {
 
 type RuleBase = {
   id: number;
-  method: MethodType;
   source: string;
 };
 
-export type RuleRegex = {
-  type: RuleType.PATTERN;
-  pattern: string;
-} & RuleBase;
-
-export type RuleWithoutRegex = {
+export type RuleDefault = RuleBase & {
   type:
     | RuleType.CREDITCARD
     | RuleType.PASSWORD
@@ -74,30 +68,62 @@ export type RuleWithoutRegex = {
     | RuleType.USER_PATH
     | RuleType.MAC
     | RuleType.ANYTHING;
-} & RuleBase;
+  method: MethodType.MASK | MethodType.REMOVE | MethodType.HASH;
+};
 
-export type Rule = RuleRegex | RuleWithoutRegex;
+export type RulePattern = RuleBase & {
+  type: RuleType.PATTERN;
+  pattern: string;
+} & Pick<RuleDefault, 'method'>;
+
+export type RuleReplace = RuleBase & {
+  method: MethodType.REPLACE;
+  placeholder?: string;
+} & Pick<RuleDefault, 'type'>;
 
 export type KeysOfUnion<T> = T extends any ? keyof T : never;
 
+export type RuleReplaceAndPattern = Omit<RulePattern, 'method'> &
+  Omit<RuleReplace, 'type'>;
+
+export type Rule = RuleDefault | RuleReplace | RulePattern | RuleReplaceAndPattern;
+
 export type EventId = {
   value: string;
   status?: EventIdStatus;
 };
 
-type PiiConfigBase = {
+type PiiConfigDefault = {
+  type: RuleDefault['type'];
+  redaction: {
+    method: RuleDefault['method'];
+  };
+};
+
+type PiiConfigReplace = {
+  type: RuleReplace['type'];
   redaction: {
-    method: MethodType;
+    method: RuleReplace['method'];
+    text?: string;
   };
 };
 
-type PiiConfigRegex = Pick<RuleRegex, 'type'> & {
+type PiiConfigPattern = {
+  type: RulePattern['type'];
   pattern: string;
-} & PiiConfigBase;
+  redaction: {
+    method: RulePattern['method'];
+  };
+};
 
-type PiiConfigWithoutRegex = Pick<RuleWithoutRegex, 'type'> & PiiConfigBase;
+type PiiConfigRelaceAndPattern = Omit<PiiConfigPattern, 'redaction'> &
+  Pick<PiiConfigReplace, 'redaction'>;
 
-export type PiiConfig = PiiConfigWithoutRegex | PiiConfigRegex;
+export type PiiConfig =
+  | PiiConfigDefault
+  | PiiConfigPattern
+  | PiiConfigReplace
+  | PiiConfigRelaceAndPattern;
 
 export type Applications = Record<string, Array<string>>;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/utils.tsx
index bb87c3bb4a..edb16b785d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/utils.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataScrubbing/utils.tsx
@@ -55,7 +55,7 @@ function getMethodLabel(type: MethodType) {
     case MethodType.REPLACE:
       return {
         label: t('Replace'),
-        description: t('Replace with [Filtered]'),
+        description: t('Replace with Placeholder'),
       };
     default:
       return {
