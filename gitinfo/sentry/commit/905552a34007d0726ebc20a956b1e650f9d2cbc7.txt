commit 905552a34007d0726ebc20a956b1e650f9d2cbc7
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Feb 7 13:55:53 2018 -0800

    ref(teams): Remove team from project context

diff --git a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
index 144d96ebcd..5ca0d1ca55 100644
--- a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
@@ -3,6 +3,7 @@ import React from 'react';
 
 import createReactClass from 'create-react-class';
 
+import EmptyMessage from '../views/settings/components/emptyMessage';
 import IndicatorStore from '../stores/indicatorStore';
 import {joinTeam} from '../actionCreators/teams';
 import ApiMixin from '../mixins/apiMixin';
@@ -13,19 +14,25 @@ const MissingProjectMembership = createReactClass({
 
   propTypes: {
     organization: PropTypes.object.isRequired,
-    team: PropTypes.object.isRequired,
+    projectId: PropTypes.string.isRequired,
   },
 
   mixins: [ApiMixin],
 
   getInitialState() {
+    let {organization, projectId} = this.props;
+    let project = organization.projects.filter(p => {
+      return p.slug === projectId;
+    })[0];
+
     return {
       loading: false,
       error: false,
+      project,
     };
   },
 
-  joinTeam() {
+  joinTeam(team) {
     this.setState({
       loading: true,
     });
@@ -34,7 +41,7 @@ const MissingProjectMembership = createReactClass({
       this.api,
       {
         orgId: this.props.organization.slug,
-        teamId: this.props.team.slug,
+        teamId: team.slug,
       },
       {
         success: () => {
@@ -57,40 +64,85 @@ const MissingProjectMembership = createReactClass({
     );
   },
 
+  renderJoinTeam(team, features) {
+    if (this.state.loading) {
+      return <a className="btn btn-default btn-loading btn-disabled">...</a>;
+    } else if (team.isPending) {
+      return <a className="btn btn-default btn-disabled">{t('Request Pending')}</a>;
+    } else if (features.has('open-membership')) {
+      return (
+        <a className="btn btn-default" onClick={this.joinTeam.bind(this, team)}>
+          {t('Join Team')}
+        </a>
+      );
+    }
+    return (
+      <a className="btn btn-default" onClick={this.joinTeam.bind(this, team)}>
+        {t('Request Access')}
+      </a>
+    );
+  },
+
+  renderExplanation(features) {
+    if (features.has('internal-catchall')) {
+      if (features.has('open-membership')) {
+        return t('To view this data you must one of the following teams.');
+      } else {
+        return t(
+          'To view this data you must first request access to one of the following teams:'
+        );
+      }
+    }
+
+    let {project} = this.state;
+    let {team} = project;
+    if (features.has('open-membership')) {
+      return t('To view this data you must first join the %s team.', team.name);
+    }
+
+    return t(
+      'To view this data you must first request access to the %s team.',
+      team.name
+    );
+  },
+
+  renderJoinTeams(features) {
+    let {teams} = this.state.project;
+    if (!teams.length) {
+      return (
+        <EmptyMessage>
+          {t(
+            'No teams have access to this project yet. Ask an admin to add your team to this project.'
+          )}
+        </EmptyMessage>
+      );
+    }
+
+    return teams.map(team => {
+      return (
+        <p key={team.slug}>
+          {team.name}: {this.renderJoinTeam(team, features)}
+        </p>
+      );
+    });
+  },
+
   render() {
-    let {organization, team} = this.props;
-    let openMembership = organization.features.indexOf('open-membership') !== -1;
+    let {organization} = this.props;
+    let {team} = this.state.project;
+    let features = new Set(organization.features);
 
     return (
       <div className="container">
         <div className="box alert-box">
           <span className="icon icon-exclamation" />
-          <p>{"You're not a member of this project."}</p>
-          {openMembership ? (
-            <p>{t('To view this data you must first join the %s team.', team.name)}</p>
+          <p>{t("You're not a member of this project.")}</p>
+          <p>{this.renderExplanation(features)}</p>
+          {features.has('internal-catchall') ? (
+            this.renderJoinTeams(features)
           ) : (
-            <p>
-              {t(
-                'To view this data you must first request access to the %s team.',
-                team.name
-              )}
-            </p>
+            <p>{this.renderJoinTeam(team, features)}</p>
           )}
-          <p>
-            {this.state.loading ? (
-              <a className="btn btn-default btn-loading btn-disabled">...</a>
-            ) : team.isPending ? (
-              <a className="btn btn-default btn-disabled">{t('Request Pending')}</a>
-            ) : openMembership ? (
-              <a className="btn btn-default" onClick={this.joinTeam}>
-                {t('Join Team')}
-              </a>
-            ) : (
-              <a className="btn btn-default" onClick={this.joinTeam}>
-                {t('Request Access')}
-              </a>
-            )}
-          </p>
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/mixins/projectState.jsx b/src/sentry/static/sentry/app/mixins/projectState.jsx
index d2fdfdbf04..46eca65aea 100644
--- a/src/sentry/static/sentry/app/mixins/projectState.jsx
+++ b/src/sentry/static/sentry/app/mixins/projectState.jsx
@@ -1,8 +1,8 @@
 import SentryTypes from '../proptypes';
-import TeamState from './teamState';
+import OrganizationState from './organizationState';
 
 let ProjectState = {
-  mixins: [TeamState],
+  mixins: [OrganizationState],
 
   contextTypes: {
     project: SentryTypes.Project,
diff --git a/src/sentry/static/sentry/app/mixins/teamState.jsx b/src/sentry/static/sentry/app/mixins/teamState.jsx
deleted file mode 100644
index 2a81c9d7db..0000000000
--- a/src/sentry/static/sentry/app/mixins/teamState.jsx
+++ /dev/null
@@ -1,16 +0,0 @@
-import SentryTypes from '../proptypes';
-import OrganizationState from './organizationState';
-
-let TeamState = {
-  mixins: [OrganizationState],
-
-  contextTypes: {
-    team: SentryTypes.Team.isRequired,
-  },
-
-  getTeam() {
-    return this.context.team;
-  },
-};
-
-export default TeamState;
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index c50d80bc8f..9b956e78f7 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -12,7 +12,6 @@ import LoadingIndicator from '../../components/loadingIndicator';
 import MissingProjectMembership from '../../components/missingProjectMembership';
 import OrganizationState from '../../mixins/organizationState';
 import SentryTypes from '../../proptypes';
-import TeamStore from '../../stores/teamStore';
 import ProjectsStore from '../../stores/projectsStore';
 import {loadEnvironments} from '../../actionCreators/environments';
 import {setActiveProject} from '../../actionCreators/projects';
@@ -25,8 +24,8 @@ const ERROR_TYPES = {
 };
 
 /**
- * Higher-order component that sets `project` and `team` as child context
- * values to be accessed by child elements.
+ * Higher-order component that sets `project` as a child context
+ * value to be accessed by child elements.
  *
  * Additionally delays rendering of children until project XHR has finished
  * and context is populated.
@@ -41,13 +40,11 @@ const ProjectContext = createReactClass({
 
   childContextTypes: {
     project: SentryTypes.Project,
-    team: SentryTypes.Team,
   },
 
   mixins: [
     ApiMixin,
     Reflux.connect(MemberListStore, 'memberList'),
-    Reflux.listenTo(TeamStore, 'onTeamChange'),
     Reflux.listenTo(ProjectsStore, 'onProjectChange'),
     OrganizationState,
   ],
@@ -59,7 +56,6 @@ const ProjectContext = createReactClass({
       errorType: null,
       memberList: [],
       project: null,
-      team: null,
       projectNavSection: null,
     };
   },
@@ -67,7 +63,6 @@ const ProjectContext = createReactClass({
   getChildContext() {
     return {
       project: this.state.project,
-      team: this.state.team,
     };
   },
 
@@ -109,19 +104,10 @@ const ProjectContext = createReactClass({
   },
 
   getTitle() {
-    if (this.state.project) return this.state.team.name + ' / ' + this.state.project.name;
+    if (this.state.project) return this.state.project.name;
     return 'Sentry';
   },
 
-  onTeamChange(itemIds) {
-    if (!this.state.team) return;
-    if (!itemIds.has(this.state.team.id)) return;
-
-    this.setState({
-      team: {...TeamStore.getById(this.state.team.id)},
-    });
-  },
-
   onProjectChange(projectIds) {
     if (!this.state.project) return;
     if (!projectIds.has(this.state.project.id)) return;
@@ -135,30 +121,25 @@ const ProjectContext = createReactClass({
     let {projectId} = this.props;
     let projectSlug = projectId;
     let activeProject = null;
-    let activeTeam = null;
     let org = this.context.organization;
-    org.teams.forEach(team => {
-      team.projects.forEach(project => {
-        if (project.slug == projectSlug) {
-          activeProject = project;
-          activeTeam = team;
-        }
-      });
+    org.projects.forEach(project => {
+      if (project.slug == projectSlug) {
+        activeProject = project;
+      }
     });
-    return [activeTeam, activeProject];
+    return activeProject;
   },
 
   fetchData() {
     let {orgId, projectId} = this.props;
     // we fetch core access/information from the global organization data
-    let [activeTeam, activeProject] = this.identifyProject();
-    let hasAccess = activeTeam && activeTeam.hasAccess;
+    let activeProject = this.identifyProject();
+    let hasAccess = activeProject && activeProject.hasAccess;
 
     this.setState({
       loading: true,
       // we bind project initially, but it'll rebind
       project: activeProject,
-      team: activeTeam,
     });
 
     if (activeProject && hasAccess) {
@@ -168,7 +149,6 @@ const ProjectContext = createReactClass({
           this.setState({
             loading: false,
             project: data,
-            team: data.team,
             error: false,
             errorType: null,
           });
@@ -198,7 +178,7 @@ const ProjectContext = createReactClass({
       this.setState({
         loading: false,
       });
-    } else if (activeTeam && !activeTeam.isMember) {
+    } else if (activeProject && !activeProject.isMember) {
       this.setState({
         loading: false,
         error: true,
@@ -247,8 +227,7 @@ const ProjectContext = createReactClass({
           return (
             <MissingProjectMembership
               organization={this.getOrganization()}
-              team={this.state.team}
-              project={this.state.project}
+              projectId={this.state.project.slug}
             />
           );
         default:
diff --git a/src/sentry/static/sentry/app/views/releaseDetails.jsx b/src/sentry/static/sentry/app/views/releaseDetails.jsx
index 37fb12ad8d..72e6b74164 100644
--- a/src/sentry/static/sentry/app/views/releaseDetails.jsx
+++ b/src/sentry/static/sentry/app/views/releaseDetails.jsx
@@ -52,9 +52,8 @@ const ReleaseDetails = createReactClass({
 
   getTitle() {
     let project = this.getProject();
-    let team = this.getTeam();
     let params = this.props.params;
-    return 'Release ' + params.version + ' | ' + team.name + ' / ' + project.name;
+    return 'Release ' + params.version + ' | ' + project.name;
   },
 
   fetchData() {
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
index afcafe4dcd..6d22ae7a8a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
@@ -117,7 +117,6 @@ const ProjectCrumb = withProjects(
 
 ProjectCrumb.displayName = 'ProjectCrumb';
 ProjectCrumb.propTypes = {
-  team: SentryTypes.Team,
   organizationDetails: SentryTypes.Organization,
   routes: PropTypes.array,
   route: PropTypes.object,
@@ -172,7 +171,6 @@ class SettingsBreadcrumb extends React.Component {
 
   static contextTypes = {
     organization: SentryTypes.Organization,
-    team: SentryTypes.Team,
   };
 
   render() {
@@ -205,7 +203,6 @@ class SettingsBreadcrumb extends React.Component {
           return (
             <CrumbPicker
               key={`${route.name}:${route.path}`}
-              team={this.context.team}
               routes={routes}
               params={params}
               route={route}
diff --git a/tests/acceptance/test_create_project.py b/tests/acceptance/test_create_project.py
index d272e067ef..d68ed69283 100644
--- a/tests/acceptance/test_create_project.py
+++ b/tests/acceptance/test_create_project.py
@@ -30,7 +30,7 @@ class CreateProjectTest(AcceptanceTestCase):
         self.browser.snapshot(name='create project')
 
         self.browser.click('.new-project-submit')
-        self.browser.wait_until(title='Mariachi Band / Java')
+        self.browser.wait_until(title='Java')
 
         project = Project.objects.get(organization=self.org)
         assert project.name == 'Java'
diff --git a/tests/js/spec/components/group/releaseStats.spec.jsx b/tests/js/spec/components/group/releaseStats.spec.jsx
index aae3560745..beaf615c71 100644
--- a/tests/js/spec/components/group/releaseStats.spec.jsx
+++ b/tests/js/spec/components/group/releaseStats.spec.jsx
@@ -12,7 +12,6 @@ describe('GroupReleaseStats', function() {
         context: {
           organization: TestStubs.Organization(),
           project: TestStubs.Project(),
-          team: TestStubs.Team(),
           group: TestStubs.Group(),
         },
       }
diff --git a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
index 10b03a335d..db7bcbf378 100644
--- a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
@@ -83,10 +83,10 @@ exports[`Configure should render correctly render() should render platform docs
         }
       >
         <SideEffect(DocumentTitle)
-          title="undefined / Test Project"
+          title="Test Project"
         >
           <DocumentTitle
-            title="undefined / Test Project"
+            title="Test Project"
           >
             <ProjectDocsContext>
               <LoadingIndicator>
diff --git a/tests/js/spec/views/onboarding/configure/index.spec.jsx b/tests/js/spec/views/onboarding/configure/index.spec.jsx
index 8ca9941943..acd1b02586 100644
--- a/tests/js/spec/views/onboarding/configure/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/configure/index.spec.jsx
@@ -85,6 +85,20 @@ describe('Configure should render correctly', function() {
           organization: {
             id: '1337',
             slug: 'testOrg',
+            projects: [
+              {
+                name: 'Test Project',
+                slug: 'testProject',
+                id: 'testProject',
+                hasAccess: true,
+                teams: [
+                  {
+                    id: 'coolteam',
+                    hasAccess: true,
+                  },
+                ],
+              },
+            ],
             teams: [
               {
                 id: 'coolteam',
diff --git a/tests/js/spec/views/projectPluginDetails.spec.jsx b/tests/js/spec/views/projectPluginDetails.spec.jsx
index 4d5f361b06..7d28b4a930 100644
--- a/tests/js/spec/views/projectPluginDetails.spec.jsx
+++ b/tests/js/spec/views/projectPluginDetails.spec.jsx
@@ -53,12 +53,10 @@ describe('ProjectPluginDetails', function() {
       {
         context: {
           router: TestStubs.router(),
-          team: TestStubs.Team(),
         },
 
         childContextTypes: {
           router: PropTypes.object,
-          team: PropTypes.object,
         },
       }
     );
@@ -81,12 +79,10 @@ describe('ProjectPluginDetails', function() {
       {
         context: {
           router: TestStubs.router(),
-          team: TestStubs.Team(),
         },
 
         childContextTypes: {
           router: PropTypes.object,
-          team: PropTypes.object,
         },
       }
     );
diff --git a/tests/js/spec/views/projectPlugins/index.spec.jsx b/tests/js/spec/views/projectPlugins/index.spec.jsx
index c8c0874a5e..f255f9a666 100644
--- a/tests/js/spec/views/projectPlugins/index.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/index.spec.jsx
@@ -33,12 +33,10 @@ describe('ProjectPluginsContainer', function() {
       {
         context: {
           router: TestStubs.router(),
-          team: TestStubs.Team(),
         },
 
         childContextTypes: {
           router: PropTypes.object,
-          team: PropTypes.object,
         },
       }
     );
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
index a0480383f2..ac6309ff0c 100644
--- a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
@@ -47,11 +47,9 @@ describe('PluginNavigation Integration', function() {
         </div>,
         {
           context: {
-            team: TestStubs.Team(),
             router: TestStubs.router(),
           },
           childContextTypes: {
-            team: PropTypes.object,
             router: PropTypes.object,
           },
         }
