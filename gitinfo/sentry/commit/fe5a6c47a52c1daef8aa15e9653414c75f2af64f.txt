commit fe5a6c47a52c1daef8aa15e9653414c75f2af64f
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 4 21:28:52 2013 -0700

    First pass at ChainedException

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 9acd5c8464..b2c2aed4ac 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -607,26 +607,41 @@ class Exception(Interface):
     >>>     "module": "__builtins__"
     >>> }
     """
-    attrs = ('value', 'type', 'module')
+    attrs = ('value', 'type', 'module', 'stacktrace')
 
     score = 900
     display_score = 1200
 
-    def __init__(self, value, type=None, module=None):
+    def __init__(self, value, type=None, module=None, stacktrace=None):
         # A human readable value for the exception
         self.value = value
         # The exception type name (e.g. TypeError)
         self.type = type
         # Optional module of the exception type (e.g. __builtin__)
         self.module = module
+        # Optional bound stacktrace interface
+        self.stacktrace = stacktrace
 
     def serialize(self):
+        if self.stacktrace:
+            stacktrace = self.stacktrace.serialize()
+        else:
+            stacktrace = None
+
         return {
             'type': self.type,
             'value': self.value,
             'module': self.module,
+            'stacktrace': stacktrace,
         }
 
+    def unserialize(self, data):
+        if data.get('stacktrace'):
+            data['stacktrace'] = unserialize(Stacktrace, data['stacktrace'])
+        else:
+            data['stacktrace'] = None
+        return data
+
     def get_hash(self):
         return filter(bool, [self.type, self.value])
 
@@ -954,3 +969,28 @@ class User(Interface):
         return {
             'text': tokens
         }
+
+
+class ChainedException(Interface):
+    attrs = ('exceptions',)
+    score = 2000
+
+    def __init__(self, exceptions):
+        self.exceptions = [Exception(**e) for e in exceptions]
+
+    def validate(self):
+        for exception in self.exceptions:
+            # ensure we've got the correct required values
+            assert exception.is_valid()
+
+    def serialize(self):
+        return {
+            'exceptions': map(Exception.serialize, self.exceptions),
+        }
+
+    def unserialize(self, data):
+        data['exceptions'] = unserialize(Exception, data['exceptions'])
+        return data
+
+    def get_composite_hash(self, interfaces):
+        return self.exceptions[0].get_composite_hash(interfaces)
diff --git a/tests/sentry/interfaces/exception/tests.py b/tests/sentry/interfaces/exception/tests.py
index 3785fc5f17..ab423cfeee 100644
--- a/tests/sentry/interfaces/exception/tests.py
+++ b/tests/sentry/interfaces/exception/tests.py
@@ -21,6 +21,7 @@ class ExceptionTest(TestCase):
             'type': self.interface.type,
             'value': self.interface.value,
             'module': self.interface.module,
+            'stacktrace': None,
         }
 
     def test_get_hash(self):
