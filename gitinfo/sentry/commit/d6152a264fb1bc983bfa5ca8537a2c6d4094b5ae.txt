commit d6152a264fb1bc983bfa5ca8537a2c6d4094b5ae
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 4 15:11:34 2012 +0200

    Filter classes are now generated dynamically for tags

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 1e5ebf2156..de2063191f 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -18,9 +18,6 @@ MODULE_ROOT = os.path.dirname(__import__('sentry').__file__)
 DEBUG = False
 
 FILTERS = (
-    'sentry.filters.StatusFilter',
-    'sentry.filters.LoggerFilter',
-    'sentry.filters.LevelFilter',
 )
 
 KEY = None
diff --git a/sentry/filters/base.py b/sentry/filters/base.py
index 29edf7f2a9..396536462b 100644
--- a/sentry/filters/base.py
+++ b/sentry/filters/base.py
@@ -86,3 +86,19 @@ class EventFilter(Filter):
 
 class GroupFilter(Filter):
     types = [Group]
+
+
+class TagFilter(Filter):
+    def get_query_set(self, queryset):
+        col, val = self.get_column(), self.get_value()
+        if queryset.model == Event:
+            queryset = queryset.filter(**dict(
+                group__messagefiltervalue__key=col,
+                group__messagefiltervalue__value=val,
+            ))
+        else:
+            queryset = queryset.filter(**dict(
+                messagefiltervalue__key=col,
+                messagefiltervalue__value=val,
+            ))
+        return queryset.distinct()
diff --git a/sentry/filters/helpers.py b/sentry/filters/helpers.py
index 212b0adf92..d2d058bcfe 100644
--- a/sentry/filters/helpers.py
+++ b/sentry/filters/helpers.py
@@ -13,11 +13,15 @@ __all__ = ('get_filters',)
 
 import logging
 
+from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
+from sentry.filters.base import TagFilter
 from sentry.plugins import plugins
+from sentry.models import ProjectOption
 
 
 FILTER_CACHE = {}
+TAG_FILTER_CACHE = {}
 
 
 def get_filters(model=None, project=None):
@@ -37,6 +41,18 @@ def get_filters(model=None, project=None):
             FILTER_CACHE[class_path] = cls
         filter_list.append(FILTER_CACHE[class_path])
 
+    if project:
+        for tag in ProjectOption.objects.get_value(project, 'tags'):
+            if tag not in TAG_FILTER_CACHE:
+                # Generate a new filter class because we are lazy and do
+                # not want to rewrite code
+                class new(TagFilter):
+                    label = _(tag.replace('_', ' ').title())
+                    column = tag
+                new.__name__ = '__%sGeneratedFilter' % str(tag)
+                TAG_FILTER_CACHE[tag] = new
+            filter_list.append(TAG_FILTER_CACHE[tag])
+
     # Add plugin-provided filters
     for plugin in plugins.all():
         if not plugin.is_enabled(project):
diff --git a/sentry/plugins/bases/tag.py b/sentry/plugins/bases/tag.py
index 2a35e406d9..9b2c8b0f0d 100644
--- a/sentry/plugins/bases/tag.py
+++ b/sentry/plugins/bases/tag.py
@@ -6,36 +6,11 @@ sentry.plugins.bases.tag
 :license: BSD, see LICENSE for more details.
 """
 from sentry import app
-from sentry.filters import Filter
-from sentry.models import Event, FilterValue, MessageFilterValue
+from sentry.models import FilterValue, MessageFilterValue
 from sentry.plugins import Plugin
 from django.db.models import Sum
 
 
-def create_tag_filter(plugin):
-    class TagFilter(Filter):
-        label = plugin.tag_label
-        column = plugin.tag
-
-        def get_query_set(self, queryset):
-            col, val = self.get_column(), self.get_value()
-            if queryset.model == Event:
-                queryset = queryset.filter(**dict(
-                    group__messagefiltervalue__key=col,
-                    group__messagefiltervalue__value=val,
-                ))
-            else:
-                queryset = queryset.filter(**dict(
-                    messagefiltervalue__key=col,
-                    messagefiltervalue__value=val,
-                ))
-            return queryset.distinct()
-
-    TagFilter.__name__ = plugin.tag.title() + 'TagFilter'
-
-    return TagFilter
-
-
 class TagPlugin(Plugin):
     tag = None
     tag_label = None
@@ -105,8 +80,3 @@ class TagPlugin(Plugin):
             }, {
                 'last_seen': group.last_seen,
             })
-
-    def get_filters(self, project=None, **kwargs):
-        if not hasattr(type(self), '_filter_class'):
-            self._filter_class = create_tag_filter(self)
-        return [self._filter_class]
diff --git a/sentry/plugins/sentry_servers/models.py b/sentry/plugins/sentry_servers/models.py
index b026ec4a9c..05b81d2f2d 100644
--- a/sentry/plugins/sentry_servers/models.py
+++ b/sentry/plugins/sentry_servers/models.py
@@ -9,23 +9,10 @@ import sentry
 
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.filters import Filter
-from sentry.models import Event
 from sentry.plugins import register
 from sentry.plugins.bases.tag import TagPlugin
 
 
-class ServerNameFilter(Filter):
-    label = _('Server Name')
-    column = 'server_name'
-
-    def get_query_set(self, queryset):
-        if queryset.model == Event:
-            return queryset.filter(server_name=self.get_value()).distinct()
-        else:
-            return queryset.filter(event_set__server_name=self.get_value()).distinct()
-
-
 class ServersPlugin(TagPlugin):
     """
     Adds additional support for showing information about servers including:
@@ -46,7 +33,4 @@ class ServersPlugin(TagPlugin):
             return []
         return [event.server_name]
 
-    def get_filters(self, project=None, **kwargs):
-        return [ServerNameFilter]
-
 register(ServersPlugin)
diff --git a/sentry/plugins/sentry_sites/models.py b/sentry/plugins/sentry_sites/models.py
index 932c15a023..4e294b463e 100644
--- a/sentry/plugins/sentry_sites/models.py
+++ b/sentry/plugins/sentry_sites/models.py
@@ -9,23 +9,10 @@ import sentry
 
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.filters import Filter
-from sentry.models import Event
 from sentry.plugins import register
 from sentry.plugins.bases.tag import TagPlugin
 
 
-class SiteFilter(Filter):
-    label = _('Site')
-    column = 'site'
-
-    def get_query_set(self, queryset):
-        if queryset.model == Event:
-            return queryset.filter(site=self.get_value()).distinct()
-        else:
-            return queryset.filter(event_set__site=self.get_value()).distinct()
-
-
 class SitesPlugin(TagPlugin):
     """
     Adds additional support for showing information about sites including:
@@ -46,7 +33,4 @@ class SitesPlugin(TagPlugin):
             return []
         return [event.site]
 
-    def get_filters(self, project=None, **kwargs):
-        return [SiteFilter]
-
 register(SitesPlugin)
