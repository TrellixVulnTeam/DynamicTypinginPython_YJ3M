commit 9a5a30eadb0ebf3d243ef38ecdab63389a54e171
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 12 13:27:38 2010 -0700

    Several more fixes and improved tests. Added support to log full exception info via logging clauses.

diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
index 7123fa7e78..eb81781863 100644
--- a/djangodblog/__init__.py
+++ b/djangodblog/__init__.py
@@ -1 +1 @@
-__version__ = (1, 7, 0)
\ No newline at end of file
+__version__ = (1, 7, 1)
\ No newline at end of file
diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index ed9cb44d8d..5f9f697166 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -82,11 +82,16 @@ class DBLogManager(models.Manager):
         for k in ('url',):
             if k not in kwargs:
                 kwargs[k] = record.__dict__.get(k)
+        kwargs.update({
+            'logger': record.name,
+            'level': record.levelno,
+            'message': record.getMessage(),
+        })
+        if record.exc_info:
+            return self.create_from_exception(*record.exc_info[1:2], **kwargs)
+
         return self._create(
-            logger=record.name,
-            level=record.levelno,
             traceback=record.exc_text,
-            message=record.getMessage(),
             **kwargs
         )
 
@@ -125,14 +130,16 @@ class DBLogManager(models.Manager):
         reporter = ExceptionReporter(None, exc_type, exc_value, traceback)
         frames = to_unicode(reporter.get_traceback_frames())
 
-        data = kwargs.get('data', {})
+        data = kwargs.pop('data', {})
         data['exc'] = base64.b64encode(pickle.dumps([exc_type.__class__.__module__, exc_value.args, frames]))
 
         tb_message = '\n'.join(traceback_mod.format_exception(exc_type, exc_value, traceback))
 
+        kwargs.setdefault('message', smart_unicode(exc_value))
+
         return self._create(
             class_name=exc_type.__name__,
             traceback=tb_message,
-            message=smart_unicode(exc_value),
+            data=data,
             **kwargs
         )
\ No newline at end of file
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index e8c9ed8e4b..cb6b3fcdad 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -8,7 +8,9 @@ from django.utils.encoding import smart_unicode
 from djangodblog.models import Error, ErrorBatch
 from djangodblog.middleware import DBLogMiddleware
 from djangodblog.utils import JSONDictField
+
 import logging
+import sys
 
 class RequestFactory(Client):
     # Used to generate request objects.
@@ -104,7 +106,17 @@ class DBLogTestCase(TestCase):
         last = Error.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.url, 'http://example.com')
         
-        
+        try:
+            raise ValueError('This is a test ValueError')
+        except ValueError:
+            logger.info('This is a test info with an exception', exc_info=sys.exc_info())
+            cur = (Error.objects.count(), ErrorBatch.objects.count())
+            self.assertEquals(cur, (6, 5), 'Assumed logs failed to save. %s' % (cur,))
+            last = Error.objects.all().order_by('-id')[0:1].get()
+            self.assertEquals(last.class_name, 'ValueError')
+            self.assertEquals(last.message, 'This is a test info with an exception')
+            self.assertTrue(last.data.get('exc'))
+            
         logger = logging.getLogger()
         logger.removeHandler(dblog_handler)
     
@@ -139,9 +151,18 @@ class DBLogTestCase(TestCase):
             Error.objects.create_from_exception(exc)
         else:
             self.fail('Unable to create `Error` entry.')
+
+        try:
+            Error.objects.get(id=999999989)
+        except Error.DoesNotExist, exc:
+            error = Error.objects.create_from_exception()
+            self.assertTrue(error.data.get('exc'))
+        else:
+            self.fail('Unable to create `Error` entry.')
+
         
         cur = (Error.objects.count(), ErrorBatch.objects.count())
-        self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
+        self.assertEquals(cur, (2, 2), 'Assumed logs failed to save. %s' % (cur,))
         last = Error.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
@@ -151,7 +172,7 @@ class DBLogTestCase(TestCase):
         Error.objects.create_from_text('This is an error', level=logging.DEBUG)
         
         cur = (Error.objects.count(), ErrorBatch.objects.count())
-        self.assertEquals(cur, (2, 2), 'Assumed logs failed to save. %s' % (cur,))
+        self.assertEquals(cur, (3, 3), 'Assumed logs failed to save. %s' % (cur,))
         last = Error.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.level, logging.DEBUG)
