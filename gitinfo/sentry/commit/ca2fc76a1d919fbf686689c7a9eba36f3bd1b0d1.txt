commit ca2fc76a1d919fbf686689c7a9eba36f3bd1b0d1
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon May 20 14:03:59 2019 -0700

    feat(search): Convert SearchBoolean to Snuba  (#13133)
    
    * Created first draft of parsing search boolean. Tests are passing.
    
    * Update src/sentry/api/event_search.py
    
    Co-Authored-By: Mark Story <mark@mark-story.com>
    
    * removed special case test
    
    * Removed comment. and added str to messages for linter

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 7c796f85c9..22040e6755 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -149,13 +149,6 @@ class InvalidSearchQuery(Exception):
     pass
 
 
-def has_boolean_search_terms(search_terms):
-    for term in search_terms:
-        if isinstance(term, SearchBoolean):
-            return True
-    return False
-
-
 class SearchBoolean(namedtuple('SearchBoolean', 'left_term operator right_term')):
     BOOLEAN_AND = "AND"
     BOOLEAN_OR = "OR"
@@ -347,7 +340,7 @@ class SearchVisitor(NodeVisitor):
             try:
                 search_value = parse_datetime_string(search_value)
             except InvalidQuery as exc:
-                raise InvalidSearchQuery(exc.message)
+                raise InvalidSearchQuery(six.text_type(exc))
             return SearchFilter(search_key, operator, SearchValue(search_value))
         else:
             search_value = operator + search_value if operator != '=' else search_value
@@ -359,7 +352,7 @@ class SearchVisitor(NodeVisitor):
             try:
                 from_val, to_val = parse_datetime_range(value.text)
             except InvalidQuery as exc:
-                raise InvalidSearchQuery(exc.message)
+                raise InvalidSearchQuery(six.text_type(exc))
 
             # TODO: Handle negations
             if from_val is not None:
@@ -383,7 +376,7 @@ class SearchVisitor(NodeVisitor):
         try:
             from_val, to_val = parse_datetime_value(date_value)
         except InvalidQuery as exc:
-            raise InvalidSearchQuery(exc.message)
+            raise InvalidSearchQuery(six.text_type(exc))
 
         # TODO: Handle negations here. This is tricky because these will be
         # separate filters, and to negate this range we need (< val or >= val).
@@ -489,6 +482,27 @@ def parse_search_query(query):
     return SearchVisitor().visit(tree)
 
 
+def convert_search_boolean_to_snuba_query(search_boolean):
+    def convert_term(term):
+        if isinstance(term, SearchFilter):
+            return convert_search_filter_to_snuba_query(term)
+        elif isinstance(term, SearchBoolean):
+            return convert_search_boolean_to_snuba_query(term)
+        else:
+            raise InvalidSearchQuery(
+                'Attempted to convert term of unrecognized type %s into a snuba expression' %
+                term.__class__.__name__)
+
+    if not search_boolean:
+        return search_boolean
+
+    left = convert_term(search_boolean.left_term)
+    right = convert_term(search_boolean.right_term)
+    operator = search_boolean.operator.lower()
+
+    return [operator, [left, right]]
+
+
 def convert_endpoint_params(params):
     return [
         SearchFilter(
@@ -579,10 +593,10 @@ def convert_search_filter_to_snuba_query(search_filter):
 
 def get_snuba_query_args(query=None, params=None):
     # NOTE: this function assumes project permissions check already happened
-    parsed_filters = []
+    parsed_terms = []
     if query is not None:
         try:
-            parsed_filters = parse_search_query(query)
+            parsed_terms = parse_search_query(query)
         except ParseError as e:
             raise InvalidSearchQuery(
                 u'Parse error: %r (column %d)' % (e.expr.name, e.column())
@@ -595,29 +609,26 @@ def get_snuba_query_args(query=None, params=None):
 
     # Keys included as url params take precedent if same key is included in search
     if params is not None:
-        parsed_filters.extend(convert_endpoint_params(params))
+        parsed_terms.extend(convert_endpoint_params(params))
 
     kwargs = {
         'conditions': [],
         'filter_keys': {},
     }
 
-    # TODO(lb): remove when boolean terms fully functional
-    if has_boolean_search_terms(parsed_filters):
-        kwargs['has_boolean_terms'] = True
-
-    for _filter in parsed_filters:
-        # TODO(lb): remove when boolean terms fully functional
-        if isinstance(_filter, SearchBoolean):
-            continue
+    for term in parsed_terms:
+        if isinstance(term, SearchFilter):
+            snuba_name = term.key.snuba_name
 
-        snuba_name = _filter.key.snuba_name
-
-        if snuba_name in ('start', 'end'):
-            kwargs[snuba_name] = _filter.value.value
-        elif snuba_name in ('project_id', 'issue'):
-            kwargs['filter_keys'][snuba_name] = _filter.value.value
-        else:
-            converted_filter = convert_search_filter_to_snuba_query(_filter)
-            kwargs['conditions'].append(converted_filter)
+            if snuba_name in ('start', 'end'):
+                kwargs[snuba_name] = term.value.value
+            elif snuba_name in ('project_id', 'issue'):
+                kwargs['filter_keys'][snuba_name] = term.value.value
+            else:
+                converted_filter = convert_search_filter_to_snuba_query(term)
+                kwargs['conditions'].append(converted_filter)
+        else:  # SearchBoolean
+            # TODO(lb): remove when boolean terms fully functional
+            kwargs['has_boolean_terms'] = True
+            kwargs['conditions'].append(convert_search_boolean_to_snuba_query(term))
     return kwargs
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 3cedc505b5..c8ba12bcf3 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1066,6 +1066,64 @@ class GetSnubaQueryArgsTest(TestCase):
         with pytest.raises(InvalidSearchQuery):
             get_snuba_query_args('(user.email:foo@example.com OR user.email:bar@example.com')
 
+    def test_boolean_term_simple(self):
+        assert get_snuba_query_args('user.email:foo@example.com AND user.email:bar@example.com') == {
+            'conditions': [
+                ['and', [
+                    ['email', '=', 'foo@example.com'],
+                    ['email', '=', 'bar@example.com']
+                ]]
+            ],
+            'filter_keys': {},
+            'has_boolean_terms': True,
+        }
+        assert get_snuba_query_args('user.email:foo@example.com OR user.email:bar@example.com') == {
+            'conditions': [
+                ['or', [
+                    ['email', '=', 'foo@example.com'],
+                    ['email', '=', 'bar@example.com']
+                ]]
+            ],
+            'filter_keys': {},
+            'has_boolean_terms': True,
+        }
+        assert get_snuba_query_args(
+            'user.email:foo@example.com AND user.email:bar@example.com OR user.email:foobar@example.com AND user.email:hello@example.com AND user.email:hi@example.com OR user.email:foo@example.com AND user.email:bar@example.com OR user.email:foobar@example.com AND user.email:hello@example.com AND user.email:hi@example.com'
+        ) == {
+            'conditions': [
+                ['or', [
+                    ['and', [
+                        ['email', '=', 'foo@example.com'],
+                        ['email', '=', 'bar@example.com']
+                    ]],
+                    ['or', [
+                        ['and', [
+                            ['email', '=', 'foobar@example.com'],
+                            ['and', [
+                                ['email', '=', 'hello@example.com'],
+                                ['email', '=', 'hi@example.com']
+                            ]]
+                        ]],
+                        ['or', [
+                            ['and', [
+                                ['email', '=', 'foo@example.com'],
+                                ['email', '=', 'bar@example.com']
+                            ]],
+                            ['and', [
+                                ['email', '=', 'foobar@example.com'],
+                                ['and', [
+                                    ['email', '=', 'hello@example.com'],
+                                    ['email', '=', 'hi@example.com']
+                                ]]
+                            ]]
+                        ]]
+                    ]]
+                ]]
+            ],
+            'filter_keys': {},
+            'has_boolean_terms': True,
+        }
+
 
 class ConvertEndpointParamsTests(TestCase):
     def test_simple(self):
