commit ed5b88bc4ba66994c112d6076f3d9d14a1b2f9e0
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon May 27 15:54:36 2019 +0200

    ref(native): No longer use framecache (#13413)
    
    In preparation for #13412, see what happens when we no longer use frame caches.

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index a3153f46c9..fc589fe590 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -135,20 +135,6 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             'symbolicator_match': []
         }
 
-        if obj is not None:
-            processable_frame.set_cache_key_from_values(
-                (
-                    FRAME_CACHE_VERSION,
-                    # Because the images can move around, we want to rebase
-                    # the address for the cache key to be within the image
-                    # the same way as we do it in symbolicator
-                    rebase_addr(instr_addr, obj),
-                    obj.debug_id,
-                    obj.arch,
-                    obj.size,
-                )
-            )
-
     def preprocess_step(self, processing_task):
         if not self.available:
             return False
@@ -297,28 +283,21 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             obj = processable_frame.data['obj']
             raw_frame['package'] = obj and obj.code_file or None
 
-        if processable_frame.cache_value is None:
-            symbolicator_match = processable_frame.data['symbolicator_match']
+        symbolicator_match = processable_frame.data['symbolicator_match']
+
+        if not any(x["status"] != "symbolicated" for x in symbolicator_match):
+            symbolicated_frames = symbolicator_match
+        else:
+            symbolicated_frames = convert_ios_symbolserver_match(
+                processable_frame.data['instruction_addr'],
+                processable_frame.data['symbolserver_match']
+            )
 
-            if not any(x["status"] != "symbolicated" for x in symbolicator_match):
-                symbolicated_frames = symbolicator_match
+        if not symbolicated_frames:
+            if raw_frame.get('trust') == 'scan':
+                return [], [raw_frame], []
             else:
-                symbolicated_frames = convert_ios_symbolserver_match(
-                    processable_frame.data['instruction_addr'],
-                    processable_frame.data['symbolserver_match']
-                )
-
-            if not symbolicated_frames:
-                if raw_frame.get('trust') == 'scan':
-                    return [], [raw_frame], []
-                else:
-                    return None, [raw_frame], []
-
-            _ignored = None  # Used to be in_app
-            processable_frame.set_cache_value([_ignored, symbolicated_frames])
-
-        else:  # processable_frame.cache_value is present
-            _ignored, symbolicated_frames = processable_frame.cache_value
+                return None, [raw_frame], []
 
         new_frames = []
         for sfrm in symbolicated_frames:
