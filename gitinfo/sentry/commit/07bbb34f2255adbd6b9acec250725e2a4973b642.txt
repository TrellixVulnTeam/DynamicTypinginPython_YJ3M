commit 07bbb34f2255adbd6b9acec250725e2a4973b642
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 17 19:42:53 2015 -0800

    Implement remaining permissions

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 91abc49951..95d4334205 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+__all__ = ['DocSection', 'Endpoint', 'StatsMixin']
+
 from datetime import datetime, timedelta
 from django.utils.http import urlquote
 from django.views.decorators.csrf import csrf_exempt
@@ -127,7 +129,7 @@ class Endpoint(APIView):
         return Response(results, headers=headers)
 
 
-class BaseStatsEndpoint(Endpoint):
+class StatsMixin(object):
     def _parse_args(self, request):
         resolution = request.GET.get('resolution')
         if resolution:
diff --git a/src/sentry/api/bases/group.py b/src/sentry/api/bases/group.py
new file mode 100644
index 0000000000..2d1ac43527
--- /dev/null
+++ b/src/sentry/api/bases/group.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from sentry.api.base import Endpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.permissions import ScopedPermission
+from sentry.models import Group
+
+
+class GroupPermission(ScopedPermission):
+    scope_map = {
+        'GET': ['event:read', 'event:write', 'event:delete'],
+        'POST': ['event:write', 'event:delete'],
+        'PUT': ['event:write', 'event:delete'],
+        'DELETE': ['event:delete'],
+    }
+
+    def has_object_permission(self, request, view, group):
+        if request.auth:
+            return request.auth.organization_id == group.project.organization_id
+        if request.user.is_superuser:
+            return True
+        return group.project.has_access(request.user, self.access_map[request.method])
+
+
+class GroupEndpoint(Endpoint):
+    permission_classes = (GroupPermission,)
+
+    def convert_args(self, request, group_id, *args, **kwargs):
+        try:
+            group = Group.objects.get_from_cache(
+                id=group_id,
+            )
+        except Group.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        self.check_object_permissions(request, group)
+
+        kwargs['group'] = group
+        return (args, kwargs)
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index a15268ee71..04b341d5ea 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -17,6 +17,8 @@ class OrganizationPermission(ScopedPermission):
     def has_object_permission(self, request, view, organization):
         if request.auth:
             return request.auth.organization_id == organization.organization_id
+        if request.user.is_superuser:
+            return True
         return organization.has_access(request.user, self.access_map[request.method])
 
 
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index ede30c1382..a045f10f62 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -17,6 +17,8 @@ class ProjectPermission(ScopedPermission):
     def has_object_permission(self, request, view, project):
         if request.auth:
             return request.auth.organization_id == project.organization_id
+        if request.user.is_superuser:
+            return True
         return project.has_access(request.user, self.access_map[request.method])
 
 
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index 292519c25d..8a2037b23c 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -17,6 +17,8 @@ class TeamPermission(ScopedPermission):
     def has_object_permission(self, request, view, team):
         if request.auth:
             return request.auth.organization_id == team.organization_id
+        if request.user.is_superuser:
+            return True
         return team.has_access(request.user, self.access_map[request.method])
 
 
diff --git a/src/sentry/api/bases/user.py b/src/sentry/api/bases/user.py
new file mode 100644
index 0000000000..aab17134f3
--- /dev/null
+++ b/src/sentry/api/bases/user.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+from sentry.api.base import Endpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.permissions import ScopedPermission
+from sentry.models import User
+
+
+class UserPermission(ScopedPermission):
+    def has_object_permission(self, request, view, user):
+        if request.auth:
+            return False
+        if request.user.is_superuser:
+            return True
+        return request.user == user
+
+
+class UserEndpoint(Endpoint):
+    permission_classes = (UserPermission,)
+
+    def convert_args(self, request, user_id, *args, **kwargs):
+        try:
+            if user_id == 'me':
+                if not request.user.is_authenticated():
+                    raise ResourceDoesNotExist
+                user_id = request.user.id
+
+            user = User.objects.get(
+                id=user_id,
+            )
+        except User.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        self.check_object_permissions(request, user)
+
+        kwargs['user'] = user
+        return (args, kwargs)
diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index 394b9930b1..cba49d66c3 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django.contrib.auth import login, logout
 from rest_framework.response import Response
 
+from sentry.api import client
 from sentry.api.authentication import QuietBasicAuthentication
 from sentry.api.base import DocSection, Endpoint
 
@@ -18,6 +19,8 @@ class AuthIndexEndpoint(Endpoint):
 
     authentication_classes = [QuietBasicAuthentication]
 
+    permission_classes = ()
+
     doc_section = DocSection.ACCOUNTS
 
     def post(self, request):
@@ -35,11 +38,7 @@ class AuthIndexEndpoint(Endpoint):
         # Must use the real request object that Django knows about
         login(request._request, request.user)
 
-        # TODO: make internal request to UserDetailsEndpoint
-        from sentry.api.endpoints.user_details import UserDetailsEndpoint
-        endpoint = UserDetailsEndpoint()
-        response = endpoint.get(request, user_id=request.user.id)
-        return response
+        return client.get('/users/me/', request.user, request.auth)
 
     def delete(self, request, *args, **kwargs):
         """
diff --git a/src/sentry/api/endpoints/broadcast_index.py b/src/sentry/api/endpoints/broadcast_index.py
index b1de42cd9d..66949f6b07 100644
--- a/src/sentry/api/endpoints/broadcast_index.py
+++ b/src/sentry/api/endpoints/broadcast_index.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from rest_framework.permissions import IsAuthenticated
 from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
@@ -8,6 +9,8 @@ from sentry.models import Broadcast
 
 
 class BroadcastIndexEndpoint(Endpoint):
+    permission_classes = (IsAuthenticated,)
+
     def get(self, request):
         broadcasts = list(Broadcast.objects.filter(is_active=True))
 
diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index b91b7edd28..debc8ea6cc 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection, Endpoint
-from sentry.api.permissions import assert_perm
+from sentry.api.bases.group import GroupPermission
 from sentry.api.serializers import serialize
 from sentry.models import Event
 
@@ -11,6 +11,8 @@ from sentry.models import Event
 class EventDetailsEndpoint(Endpoint):
     doc_section = DocSection.EVENTS
 
+    permission_classes = (GroupPermission,)
+
     def get(self, request, event_id):
         """
         Retrieve an event
@@ -24,7 +26,7 @@ class EventDetailsEndpoint(Endpoint):
             id=event_id
         )
 
-        assert_perm(event, request.user, request.auth)
+        self.check_object_permissions(request, event.group)
 
         Event.objects.bind_nodes([event], 'data')
 
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index b354c42615..e8473b6855 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -4,9 +4,9 @@ from django.utils import timezone
 from rest_framework import serializers
 from rest_framework.response import Response
 
-from sentry.api.base import DocSection, Endpoint
+from sentry.api.base import DocSection
+from sentry.api.bases.group import GroupEndpoint
 from sentry.api.fields import UserField
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.constants import STATUS_CHOICES
 from sentry.db.models.query import create_or_update
@@ -25,7 +25,7 @@ class GroupSerializer(serializers.Serializer):
     assignedTo = UserField()
 
 
-class GroupDetailsEndpoint(Endpoint):
+class GroupDetailsEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
     def _get_activity(self, request, group, num=7):
@@ -63,7 +63,7 @@ class GroupDetailsEndpoint(Endpoint):
         ], key=lambda ls: ls[1], reverse=True)
         return [s[0] for s in seen_by]
 
-    def get(self, request, group_id):
+    def get(self, request, group):
         """
         Retrieve an aggregate
 
@@ -72,12 +72,6 @@ class GroupDetailsEndpoint(Endpoint):
             {method} {path}
 
         """
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
         data = serialize(group, request.user)
 
         # TODO: these probably should be another endpoint
@@ -107,7 +101,7 @@ class GroupDetailsEndpoint(Endpoint):
 
         return Response(data)
 
-    def put(self, request, group_id):
+    def put(self, request, group):
         """
         Update an aggregate
 
@@ -126,13 +120,6 @@ class GroupDetailsEndpoint(Endpoint):
         - assignedTo: user
 
         """
-
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
         serializer = GroupSerializer(data=request.DATA, partial=True)
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
@@ -248,7 +235,7 @@ class GroupDetailsEndpoint(Endpoint):
 
         return Response(serialize(group, request.user))
 
-    def delete(self, request, group_id):
+    def delete(self, request, group):
         """
         Delete an aggregate
 
@@ -258,12 +245,6 @@ class GroupDetailsEndpoint(Endpoint):
         """
         from sentry.tasks.deletion import delete_group
 
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
         delete_group.delay(object_id=group.id)
 
         return Response(status=202)
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 8c8cca6c30..5ea10957b7 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -1,15 +1,15 @@
 from __future__ import absolute_import
 
-from sentry.api.base import DocSection, Endpoint
-from sentry.api.permissions import assert_perm
+from sentry.api.base import DocSection
+from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import Event, Group
+from sentry.models import Event
 
 
-class GroupEventsEndpoint(Endpoint):
+class GroupEventsEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
-    def get(self, request, group_id):
+    def get(self, request, group):
         """
         List an aggregate's available samples
 
@@ -18,11 +18,6 @@ class GroupEventsEndpoint(Endpoint):
             {method} {path}
 
         """
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
 
         events = Event.objects.filter(
             group=group
diff --git a/src/sentry/api/endpoints/group_events_latest.py b/src/sentry/api/endpoints/group_events_latest.py
index 70dd6bcc9d..622c5a7ee6 100644
--- a/src/sentry/api/endpoints/group_events_latest.py
+++ b/src/sentry/api/endpoints/group_events_latest.py
@@ -3,17 +3,11 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
-from sentry.models import Group
+from sentry.api.bases.group import GroupEndpoint
 
 
-class GroupEventsLatestEndpoint(Endpoint):
-    def get(self, request, group_id):
-        group = Group.objects.get(id=group_id)
-
-        assert_perm(group, request.user, request.auth)
-
+class GroupEventsLatestEndpoint(GroupEndpoint):
+    def get(self, request, group):
         event = group.get_latest_event()
 
         return HttpResponseRedirect(reverse('sentry-api-0-event-details', kwargs={
diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index dad1461ef7..82d37d8050 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -6,10 +6,9 @@ from django.utils import timezone
 from rest_framework import status
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
+from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import Group, Activity
+from sentry.models import Activity
 from sentry.utils.functional import extract_lazy_object
 
 
@@ -17,14 +16,8 @@ class NewNoteForm(forms.Form):
     text = forms.CharField()
 
 
-class GroupNotesEndpoint(Endpoint):
-    def get(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
+class GroupNotesEndpoint(GroupEndpoint):
+    def get(self, request, group):
         notes = Activity.objects.filter(
             group=group,
             type=Activity.NOTE,
@@ -38,13 +31,7 @@ class GroupNotesEndpoint(Endpoint):
             on_results=lambda x: serialize(x, request.user),
         )
 
-    def post(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
+    def post(self, request, group):
         form = NewNoteForm(request.DATA)
         if not form.is_valid():
             return Response('{"error": "form"}', status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/group_stats.py b/src/sentry/api/endpoints/group_stats.py
index 0f6a68f7ff..9df5571588 100644
--- a/src/sentry/api/endpoints/group_stats.py
+++ b/src/sentry/api/endpoints/group_stats.py
@@ -3,19 +3,12 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.app import tsdb
-from sentry.api.base import BaseStatsEndpoint
-from sentry.api.permissions import assert_perm
-from sentry.models import Group
+from sentry.api.base import StatsMixin
+from sentry.api.bases.group import GroupEndpoint
 
 
-class GroupStatsEndpoint(BaseStatsEndpoint):
-    def get(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
+class GroupStatsEndpoint(GroupEndpoint, StatsMixin):
+    def get(self, request, group):
         data = tsdb.get_range(
             model=tsdb.models.group,
             keys=[group.id],
diff --git a/src/sentry/api/endpoints/group_tags.py b/src/sentry/api/endpoints/group_tags.py
index 2629cae1cb..9372832ef0 100644
--- a/src/sentry/api/endpoints/group_tags.py
+++ b/src/sentry/api/endpoints/group_tags.py
@@ -6,13 +6,12 @@ from django.db.models import Sum
 from django.utils import timezone
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
-from sentry.models import Group, GroupTagValue, GroupTagKey, TagKey
+from sentry.api.bases.group import GroupEndpoint
+from sentry.models import GroupTagValue, GroupTagKey, TagKey
 from sentry.utils import db
 
 
-class GroupTagsEndpoint(Endpoint):
+class GroupTagsEndpoint(GroupEndpoint):
     def _get_value_count(self, group_id, key):
         if db.is_postgres():
             # This doesnt guarantee percentage is accurate, but it does ensure
@@ -46,13 +45,7 @@ class GroupTagsEndpoint(Endpoint):
             last_seen__gte=cutoff,
         )[:num]
 
-    def get(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
+    def get(self, request, group):
         tag_keys = TagKey.objects.filter(
             project=group.project,
             key__in=GroupTagKey.objects.filter(
@@ -63,8 +56,8 @@ class GroupTagsEndpoint(Endpoint):
         # O(N) db access
         data = []
         for tag_key in tag_keys:
-            total_values = self._get_value_count(group_id, tag_key.key)
-            top_values = self._get_top_values(group_id, tag_key.key)
+            total_values = self._get_value_count(group.id, tag_key.key)
+            top_values = self._get_top_values(group.id, tag_key.key)
 
             data.append({
                 'id': tag_key.id,
diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index b0883f7e5a..39d7ca75ab 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -3,18 +3,15 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.app import tsdb
-from sentry.api.base import BaseStatsEndpoint, DocSection
-from sentry.api.bases.organization import OrganizationPermission
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.models import Organization, Project, Team
+from sentry.api.base import DocSection, StatsMixin
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.models import Project, Team
 
 
-class OrganizationStatsEndpoint(BaseStatsEndpoint):
+class OrganizationStatsEndpoint(OrganizationEndpoint, StatsMixin):
     doc_section = DocSection.ORGANIZATIONS
 
-    permission_classes = (OrganizationPermission,)
-
-    def get(self, request, organization_slug):
+    def get(self, request, organization):
         """
         Retrieve event counts for an organization
 
@@ -37,15 +34,6 @@ class OrganizationStatsEndpoint(BaseStatsEndpoint):
         **Note:** resolution should not be used unless you're familiar with Sentry
         internals as it's restricted to pre-defined values.
         """
-        try:
-            organization = Organization.objects.get_from_cache(
-                slug=organization_slug,
-            )
-        except Organization.DoesNotExist:
-            raise ResourceDoesNotExist
-
-        self.check_object_permissions(request, organization)
-
         group = request.GET.get('group')
         if not group:
             keys = [organization.id]
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index ea4a151320..a6ab27c6ec 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -3,18 +3,14 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.app import tsdb
-from sentry.api.base import BaseStatsEndpoint, DocSection
-from sentry.api.bases.project import ProjectPermission
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.models import Project
+from sentry.api.base import DocSection, StatsMixin
+from sentry.api.bases.project import ProjectEndpoint
 
 
-class ProjectStatsEndpoint(BaseStatsEndpoint):
+class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
     doc_section = DocSection.PROJECTS
 
-    permission_classes = (ProjectPermission,)
-
-    def get(self, request, project_id):
+    def get(self, request, project):
         """
         Retrieve event counts for a project
 
@@ -36,15 +32,6 @@ class ProjectStatsEndpoint(BaseStatsEndpoint):
         **Note:** resolution should not be used unless you're familiar with Sentry
         internals as it's restricted to pre-defined values.
         """
-        try:
-            project = Project.objects.get_from_cache(
-                id=project_id,
-            )
-        except Project.DoesNotExist:
-            raise ResourceDoesNotExist
-
-        self.check_object_permissions(request, project)
-
         data = tsdb.get_range(
             model=tsdb.models.project,
             keys=[project.id],
diff --git a/src/sentry/api/endpoints/release_details.py b/src/sentry/api/endpoints/release_details.py
index 7b853443df..d39a8d786b 100644
--- a/src/sentry/api/endpoints/release_details.py
+++ b/src/sentry/api/endpoints/release_details.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection, Endpoint
-from sentry.api.permissions import assert_perm
+from sentry.api.bases.project import ProjectPermission
 from sentry.api.serializers import serialize
 from sentry.models import Release
 
@@ -11,6 +11,8 @@ from sentry.models import Release
 class ReleaseDetailsEndpoint(Endpoint):
     doc_section = DocSection.RELEASES
 
+    permission_classes = (ProjectPermission,)
+
     def get(self, request, release_id):
         """
         Retrieve an release
@@ -22,6 +24,6 @@ class ReleaseDetailsEndpoint(Endpoint):
         """
         release = Release.objects.get(id=release_id)
 
-        assert_perm(release, request.user, request.auth)
+        self.check_object_permissions(request, release.project)
 
         return Response(serialize(release, request.user))
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
index c83549a686..bdc137c177 100644
--- a/src/sentry/api/endpoints/team_stats.py
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -4,18 +4,15 @@ from rest_framework.response import Response
 from six.moves import range
 
 from sentry.app import tsdb
-from sentry.api.base import BaseStatsEndpoint, DocSection
-from sentry.api.bases.team import TeamPermission
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.models import Team, Project
+from sentry.api.base import DocSection, StatsMixin
+from sentry.api.bases.team import TeamEndpoint
+from sentry.models import Project
 
 
-class TeamStatsEndpoint(BaseStatsEndpoint):
+class TeamStatsEndpoint(TeamEndpoint, StatsMixin):
     doc_section = DocSection.TEAMS
 
-    permission_classes = (TeamPermission,)
-
-    def get(self, request, organization_slug, team_slug):
+    def get(self, request, team):
         """
         Retrieve event counts for a team
 
@@ -37,16 +34,6 @@ class TeamStatsEndpoint(BaseStatsEndpoint):
         **Note:** resolution should not be used unless you're familiar with Sentry
         internals as it's restricted to pre-defined values.
         """
-        try:
-            team = Team.objects.get(
-                organization__slug=organization_slug,
-                slug=team_slug,
-            )
-        except Team.DoesNotExist:
-            raise ResourceDoesNotExist
-
-        self.check_object_permissions(request, team)
-
         projects = Project.objects.get_for_user(
             team=team,
             user=request.user,
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index d990aa3664..583e1778f1 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -3,9 +3,8 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.user import UserEndpoint
 from sentry.api.decorators import sudo_required
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.models import User
 
@@ -18,28 +17,14 @@ class UserSerializer(serializers.ModelSerializer):
         fields = ('name', 'email')
 
 
-class UserDetailsEndpoint(Endpoint):
-    def get(self, request, user_id):
-        if user_id == 'me':
-            user_id = request.user.id
-
-        user = User.objects.get(id=user_id)
-
-        assert_perm(user, request.user, request.auth)
-
+class UserDetailsEndpoint(UserEndpoint):
+    def get(self, request, user):
         data = serialize(user, request.user)
 
         return Response(data)
 
     @sudo_required
-    def put(self, request, user_id):
-        if user_id == 'me':
-            user_id = request.user.id
-
-        user = User.objects.get(id=user_id)
-
-        assert_perm(user, request.user, request.auth)
-
+    def put(self, request, user):
         serializer = UserSerializer(user, data=request.DATA, partial=True)
 
         if serializer.is_valid():
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 99eb8387fc..dd8deb154a 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -1,12 +1,8 @@
 from __future__ import absolute_import
 
 from rest_framework import permissions
-from rest_framework.exceptions import PermissionDenied
 
-from sentry.models import (
-    Organization, OrganizationMember, OrganizationMemberType, Project,
-    ProjectKey, Team, User
-)
+from sentry.models import OrganizationMemberType, ProjectKey
 
 
 class NoPermission(permissions.BasePermission):
@@ -47,47 +43,3 @@ class ScopedPermission(permissions.BasePermission):
 
     def is_project_key(self, request):
         return isinstance(request.auth, ProjectKey)
-
-
-def has_perm(object, user, project_key, access=OrganizationMemberType.MEMBER):
-    if not project_key and user.is_superuser:
-        return True
-
-    # TODO: abstract this into a permission registry
-    if type(object) == User:
-        return object == user
-
-    if type(object) == Team:
-        if project_key:
-            return object == project_key.project.team and access == OrganizationMemberType.MEMBER
-        return object in Team.objects.get_for_user(
-            organization=object.organization,
-            user=user,
-            access=access
-        )
-
-    if type(object) == Organization:
-        return OrganizationMember.objects.filter(
-            organization=object,
-            type__lte=access,
-            user=user,
-        ).exists()
-
-    if hasattr(object, 'project'):
-        object = object.project
-
-    if type(object) == Project:
-        if project_key:
-            return object == project_key.project and access == OrganizationMemberType.MEMBER
-        return object in Project.objects.get_for_user(
-            team=object.team,
-            user=user,
-            access=access,
-        )
-
-    raise TypeError(type(object))
-
-
-def assert_perm(*args, **kwargs):
-    if not has_perm(*args, **kwargs):
-        raise PermissionDenied
diff --git a/tests/sentry/api/endpoints/test_team_details.py b/tests/sentry/api/endpoints/test_team_details.py
index cf7ee6b2b5..a48e8e3023 100644
--- a/tests/sentry/api/endpoints/test_team_details.py
+++ b/tests/sentry/api/endpoints/test_team_details.py
@@ -40,7 +40,7 @@ class TeamUpdateTest(APITestCase):
 
 class TeamDeleteTest(APITestCase):
     @patch('sentry.api.endpoints.team_details.delete_team')
-    def test_as_admin(self, delete_team):
+    def test_as_owner(self, delete_team):
         org = self.create_organization()
         team = self.create_team(organization=org)
         project = self.create_project(team=team)  # NOQA
@@ -50,7 +50,7 @@ class TeamDeleteTest(APITestCase):
         org.member_set.create(
             user=user,
             has_global_access=True,
-            type=OrganizationMemberType.ADMIN,
+            type=OrganizationMemberType.OWNER,
         )
 
         self.login_as(user)
@@ -74,7 +74,7 @@ class TeamDeleteTest(APITestCase):
             countdown=60 * 5,
         )
 
-    def test_as_member(self):
+    def test_as_admin(self):
         org = self.create_organization(owner=self.user)
         team = self.create_team(organization=org)
         project = self.create_project(team=team)  # NOQA
@@ -85,7 +85,7 @@ class TeamDeleteTest(APITestCase):
             organization=org,
             user=user,
             defaults={
-                'type': OrganizationMemberType.MEMBER,
+                'type': OrganizationMemberType.ADMIN,
             }
         )
 
diff --git a/tests/sentry/api/test_permissions.py b/tests/sentry/api/test_permissions.py
deleted file mode 100644
index d18f718bdf..0000000000
--- a/tests/sentry/api/test_permissions.py
+++ /dev/null
@@ -1,84 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.api.permissions import has_perm
-from sentry.constants import MEMBER_USER, MEMBER_ADMIN
-from sentry.models import OrganizationMemberType
-from sentry.testutils import TestCase
-
-
-class BasePermissionTest(TestCase):
-    def setUp(self):
-        super(BasePermissionTest, self).setUp()
-        self.nonmember = self.create_user(is_superuser=False, email='a@example.com')
-        self.admin = self.create_user(is_superuser=False, email='b@example.com')
-        self.member = self.create_user(is_superuser=False, email='c@example.com')
-        self.organization = self.create_organization(owner=self.admin)
-        self.team = self.create_team(organization=self.organization, name='a')
-
-        self.organization.member_set.get_or_create(
-            user=self.member, type=OrganizationMemberType.MEMBER)
-        self.organization.member_set.get_or_create(
-            user=self.admin, type=OrganizationMemberType.OWNER)
-
-
-class TeamPermissionTest(BasePermissionTest):
-    def test_basic_user(self):
-        assert not has_perm(self.team, self.nonmember, None, MEMBER_USER)
-        assert not has_perm(self.team, self.nonmember, None, MEMBER_ADMIN)
-
-    def test_admin(self):
-        assert has_perm(self.team, self.admin, None, MEMBER_USER)
-        assert has_perm(self.team, self.admin, None, MEMBER_ADMIN)
-
-    def test_member(self):
-        assert has_perm(self.team, self.member, None, MEMBER_USER)
-        assert not has_perm(self.team, self.member, None, MEMBER_ADMIN)
-
-
-class ProjectPermissionTest(BasePermissionTest):
-    def setUp(self):
-        super(ProjectPermissionTest, self).setUp()
-        self.project = self.create_project(team=self.team, name='a')
-        self.key = self.create_project_key(project=self.project, user=self.member)
-
-    def test_basic_user(self):
-        assert not has_perm(self.project, self.nonmember, None, MEMBER_USER)
-        assert not has_perm(self.project, self.nonmember, None, MEMBER_ADMIN)
-
-    def test_admin(self):
-        assert has_perm(self.project, self.admin, None, MEMBER_USER)
-        assert has_perm(self.project, self.admin, None, MEMBER_ADMIN)
-
-    def test_member(self):
-        assert has_perm(self.project, self.member, None, MEMBER_USER)
-        assert not has_perm(self.project, self.member, None, MEMBER_ADMIN)
-
-    def test_project_key(self):
-        assert has_perm(self.project, self.member, self.key, MEMBER_USER)
-        assert not has_perm(self.project, self.member, self.key, MEMBER_ADMIN)
-
-
-class GroupPermissionTest(BasePermissionTest):
-    def setUp(self):
-        super(GroupPermissionTest, self).setUp()
-        self.project = self.create_project(team=self.team, name='a')
-        self.key = self.create_project_key(project=self.project, user=self.member)
-        self.group = self.create_group(project=self.project)
-
-    def test_basic_user(self):
-        assert not has_perm(self.group, self.nonmember, None, MEMBER_USER)
-        assert not has_perm(self.group, self.nonmember, None, MEMBER_ADMIN)
-
-    def test_admin(self):
-        assert has_perm(self.group, self.admin, None, MEMBER_USER)
-        assert has_perm(self.group, self.admin, None, MEMBER_ADMIN)
-
-    def test_member(self):
-        assert has_perm(self.group, self.member, None, MEMBER_USER)
-        assert not has_perm(self.group, self.member, None, MEMBER_ADMIN)
-
-    def test_project_key(self):
-        assert has_perm(self.group, self.nonmember, self.key, MEMBER_USER)
-        assert not has_perm(self.group, self.nonmember, self.key, MEMBER_ADMIN)
