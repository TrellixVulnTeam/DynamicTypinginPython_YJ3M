commit 657a444e032c5d10da5458a14fdef825889d28c3
Author: Si Feng <si@feng.si>
Date:   Thu Jun 23 15:38:43 2016 -0700

    Fix invalid whitespace char in release version

diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 6eb18d5728..375a5d3cf6 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -1,4 +1,5 @@
 from __future__ import absolute_import
+import string
 
 from django.db import IntegrityError, transaction
 from django.utils import timezone
@@ -43,6 +44,12 @@ class ReleaseSerializer(serializers.Serializer):
     dateStarted = serializers.DateTimeField(required=False)
     dateReleased = serializers.DateTimeField(required=False)
 
+    def validate_version(self, attrs, source):
+        value = attrs[source]
+        if not set(value).isdisjoint(set(string.whitespace)):
+            raise serializers.ValidationError('Enter a valid value')
+        return attrs
+
 
 class ProjectReleasesEndpoint(ProjectEndpoint):
     doc_section = DocSection.RELEASES
diff --git a/tests/sentry/api/endpoints/test_project_releases.py b/tests/sentry/api/endpoints/test_project_releases.py
index 58d0b4aaca..47b889ccf3 100644
--- a/tests/sentry/api/endpoints/test_project_releases.py
+++ b/tests/sentry/api/endpoints/test_project_releases.py
@@ -112,6 +112,54 @@ class ProjectReleaseCreateTest(APITestCase):
 
         assert response.status_code == 400, response.content
 
+    def test_version_whitespace(self):
+        self.login_as(user=self.user)
+
+        team = self.create_team()
+        project = self.create_project(team=team, name='foo')
+
+        url = reverse('sentry-api-0-project-releases', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+        response = self.client.post(url, data={
+            'version': '1.2.3\n',
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '\n1.2.3',
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.\n2.3',
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.2.3\f',
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.2.3\t',
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.2.3',
+        })
+        assert response.status_code == 201, response.content
+        assert response.data['version'] == '1.2.3'
+
+        release = Release.objects.get(
+            project=project,
+            version=response.data['version'],
+        )
+        assert not release.owner
+
     def test_features(self):
         self.login_as(user=self.user)
 
