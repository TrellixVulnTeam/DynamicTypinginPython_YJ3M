commit a66d78a8039ea796db053988a6b10b04d500e25e
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Nov 6 21:27:47 2014 -0800

    Fix remove team tests/behavior

diff --git a/src/sentry/web/frontend/remove_team.py b/src/sentry/web/frontend/remove_team.py
index 6cad38d4a4..4abc723b83 100644
--- a/src/sentry/web/frontend/remove_team.py
+++ b/src/sentry/web/frontend/remove_team.py
@@ -20,7 +20,9 @@ class RemoveTeamView(TeamView):
     required_access = OrganizationMemberType.ADMIN
 
     def get_form(self, request):
-        return RemoveTeamForm(request.POST or None)
+        if request.method == 'POST':
+            return RemoveTeamForm(request.POST)
+        return RemoveTeamForm(None)
 
     def get(self, request, organization, team):
         form = self.get_form(request)
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index 2d48fa3f34..14277543b4 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -2,13 +2,11 @@
 
 from __future__ import absolute_import
 
-import mock
-
 from django.core.urlresolvers import reverse
 from exam import before, fixture
 
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
-from sentry.models import Team, User
+from sentry.models import User
 from sentry.testutils import TestCase
 
 
@@ -32,31 +30,6 @@ class BaseTeamTest(TestCase):
         self.login_as(self.user)
 
 
-class RemoveTeamTest(BaseTeamTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-remove-team', args=[self.team.slug])
-
-    @mock.patch('sentry.web.frontend.teams.can_remove_team', mock.Mock(return_value=False))
-    def test_missing_permission(self):
-        resp = self.client.post(self.path)
-        self.assertEquals(resp.status_code, 302)
-        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry'))
-
-    @mock.patch('sentry.web.frontend.teams.can_remove_team', mock.Mock(return_value=True))
-    def test_loads(self):
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/teams/remove.html')
-
-    @mock.patch('sentry.web.frontend.teams.can_remove_team', mock.Mock(return_value=True))
-    def test_valid_params(self):
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry')
-        assert not Team.objects.filter(pk=self.team.pk).exists()
-
-
 class ManageProjectsTest(BaseTeamTest):
     @fixture
     def path(self):
diff --git a/tests/sentry/web/frontend/test_remove_team.py b/tests/sentry/web/frontend/test_remove_team.py
new file mode 100644
index 0000000000..9352f78b8b
--- /dev/null
+++ b/tests/sentry/web/frontend/test_remove_team.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+import mock
+
+from django.core.urlresolvers import reverse
+from exam import before
+
+from sentry.models import Team, TeamStatus
+from sentry.testutils import TestCase
+
+
+class RemoveTeamTest(TestCase):
+    @before
+    def setup_fixtures(self):
+        owner = self.create_user(email='example@example.com')
+        organization = self.create_organization(owner=owner)
+        self.team = self.create_team(name='bar', organization=organization)
+        self.path = reverse('sentry-remove-team', args=[self.team.slug])
+        self.login_as(self.organization.owner)
+
+    @mock.patch('sentry.web.frontend.remove_team.can_remove_team', mock.Mock(return_value=True))
+    def test_does_load(self):
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/teams/remove.html')
+
+    @mock.patch('sentry.web.frontend.remove_team.can_remove_team', mock.Mock(return_value=False))
+    def test_missing_permission(self):
+        resp = self.client.post(self.path)
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver' + reverse('sentry')
+
+    @mock.patch('sentry.web.frontend.remove_team.can_remove_team', mock.Mock(return_value=True))
+    def test_valid_params(self):
+        resp = self.client.post(self.path)
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver' + reverse('sentry')
+
+        team = Team.objects.get(id=self.team.id)
+
+        assert team.status == TeamStatus.PENDING_DELETION
