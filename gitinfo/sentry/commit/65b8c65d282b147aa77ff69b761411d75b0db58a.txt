commit 65b8c65d282b147aa77ff69b761411d75b0db58a
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed Jun 26 10:50:54 2019 -0700

    ref: (Django 1.9) Bump djangorestframework to 3.0.5 as an intermediate step to get to 3.3.x
    
    Upgrade to next major version of django rest framework. This diff is fairly large, but this is the
    minimum set of changes I could make to have the upgrade pass. Mostly things are drop in renames,
    so there aren't really sweeping changes here.
    
    Things done:
    
    - serializer.object replaced with serializer.validated_data. For standard serializers this is a
      drop in replacement. For model serializers we get a dictionary rather than the instance, so need
      to translate usage accordingly.
    - on serializer fields, replace allow_none with allow_null
    - on field validation methods in serializers (ie validate_<fieldname>) change parameters to just
      value, rather than attrs, source. This means that values are just passed directly to the
      validation method rather than us having to look them up. In cases where we use attrs to look up
      other values we do so in validate
    - replaced uses of init_data with initial_data on serializers
    - add allow_blank and allow_null as necessary to replicate previous behaviour. These need to be
      specified explicitly now.
    - Replace uses of Serializer.base_fields with Serializer().fields. These are equivalent
    - Convert all WritableField classes to Field. Fields are now writeable by default.
    - Replace our vendorized ListField with the DRF version
    - For custom fields, rename from_native to to_internal_value, and to_native to to_representation.
      These are drop in replacement get_default_fields has been removed. get_fields works as a
      replacement, but doesn't operate in quite the same way, so restructed the validators for monitors.

diff --git a/.travis.yml b/.travis.yml
index a8799f1a59..77a0217192 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -120,6 +120,7 @@ matrix:
       name: 'Linter'
       env: TEST_SUITE=lint
       install:
+        - python setup.py install_egg_info
         - SENTRY_LIGHT_BUILD=1 pip install -U -e ".[dev,tests,optional]"
         - find "$NODE_DIR" -type d -empty -delete
         - nvm install
diff --git a/requirements-base.txt b/requirements-base.txt
index 532db716f9..e5f4712609 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -12,7 +12,7 @@ django-jsonfield>=0.9.13,<0.9.14
 django-picklefield>=0.3.0,<1.1.0
 django-sudo>=2.1.0,<3.0.0
 Django>=1.8,<1.9
-djangorestframework>=2.4.8,<2.5.0
+djangorestframework==3.0.5
 email-reply-parser>=0.2.0,<0.3.0
 enum34>=1.1.6,<1.2.0
 exam>=0.5.1
diff --git a/src/sentry/api/bases/avatar.py b/src/sentry/api/bases/avatar.py
index e03bd834c8..5933ec745b 100644
--- a/src/sentry/api/bases/avatar.py
+++ b/src/sentry/api/bases/avatar.py
@@ -59,7 +59,7 @@ class AvatarMixin(object):
         if not serializer.is_valid():
             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         self.model.save_avatar(
             relation={self.object_type: obj},
diff --git a/src/sentry/api/bases/discoversavedquery.py b/src/sentry/api/bases/discoversavedquery.py
index b878c3a0f8..f43432ec6d 100644
--- a/src/sentry/api/bases/discoversavedquery.py
+++ b/src/sentry/api/bases/discoversavedquery.py
@@ -10,20 +10,19 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
     projects = ListField(
         child=serializers.IntegerField(),
         required=False,
-        allow_null=True,
         default=[]
     )
-    start = serializers.DateTimeField(required=False)
-    end = serializers.DateTimeField(required=False)
-    range = serializers.CharField(required=False, allow_none=True)
+    start = serializers.DateTimeField(required=False, allow_null=True)
+    end = serializers.DateTimeField(required=False, allow_null=True)
+    range = serializers.CharField(required=False, allow_null=True)
     fields = ListField(
         child=serializers.CharField(),
         required=False,
         allow_null=True,
     )
-    limit = serializers.IntegerField(min_value=0, max_value=1000, required=False)
-    rollup = serializers.IntegerField(required=False)
-    orderby = serializers.CharField(required=False)
+    limit = serializers.IntegerField(min_value=0, max_value=1000, required=False, allow_null=True)
+    rollup = serializers.IntegerField(required=False, allow_null=True)
+    orderby = serializers.CharField(required=False, allow_null=True)
     conditions = ListField(
         child=ListField(),
         required=False,
@@ -32,7 +31,6 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
     aggregations = ListField(
         child=ListField(),
         required=False,
-        allow_null=True,
         default=[]
     )
     groupby = ListField(
@@ -41,9 +39,8 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
         allow_null=True,
     )
 
-    def validate_projects(self, attrs, source):
+    def validate_projects(self, projects):
         organization = self.context['organization']
-        projects = attrs[source]
 
         org_projects = set(Project.objects.filter(
             organization=organization,
@@ -54,7 +51,7 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
         if set(projects) != org_projects:
             raise PermissionDenied
 
-        return attrs
+        return projects
 
     def validate(self, data):
         query = {}
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index ebbbe1fbd8..35705fd941 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -152,9 +152,9 @@ class ProjectEndpoint(Endpoint):
     def handle_exception(self, request, exc):
         if isinstance(exc, ProjectMoved):
             response = Response({
-                'slug': exc.detail['extra']['slug'],
-                'detail': exc.detail
+                'slug': exc.detail['detail']['extra']['slug'],
+                'detail': exc.detail['detail']
             }, status=exc.status_code)
-            response['Location'] = exc.detail['extra']['url']
+            response['Location'] = exc.detail['detail']['extra']['url']
             return response
         return super(ProjectEndpoint, self).handle_exception(request, exc)
diff --git a/src/sentry/api/endpoints/api_application_details.py b/src/sentry/api/endpoints/api_application_details.py
index 232617a8b6..840d3602ed 100644
--- a/src/sentry/api/endpoints/api_application_details.py
+++ b/src/sentry/api/endpoints/api_application_details.py
@@ -31,14 +31,20 @@ class ApiApplicationSerializer(serializers.Serializer):
     homepageUrl = serializers.URLField(
         max_length=255,
         required=False,
+        allow_null=True,
+        allow_blank=True,
     )
     termsUrl = serializers.URLField(
         max_length=255,
         required=False,
+        allow_null=True,
+        allow_blank=True,
     )
     privacyUrl = serializers.URLField(
         max_length=255,
         required=False,
+        allow_null=True,
+        allow_blank=True,
     )
 
 
@@ -71,7 +77,7 @@ class ApiApplicationDetailsEndpoint(Endpoint):
         serializer = ApiApplicationSerializer(data=request.DATA, partial=True)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
             kwargs = {}
             if 'name' in result:
                 kwargs['name'] = result['name']
diff --git a/src/sentry/api/endpoints/api_tokens.py b/src/sentry/api/endpoints/api_tokens.py
index 70a3461181..130c18e66b 100644
--- a/src/sentry/api/endpoints/api_tokens.py
+++ b/src/sentry/api/endpoints/api_tokens.py
@@ -37,7 +37,7 @@ class ApiTokensEndpoint(Endpoint):
         serializer = ApiTokenSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             token = ApiToken.objects.create(
                 user=request.user,
diff --git a/src/sentry/api/endpoints/assistant.py b/src/sentry/api/endpoints/assistant.py
index 3720e7e06d..8f17c59337 100644
--- a/src/sentry/api/endpoints/assistant.py
+++ b/src/sentry/api/endpoints/assistant.py
@@ -24,15 +24,14 @@ class AssistantSerializer(serializers.Serializer):
     )
     useful = serializers.BooleanField()
 
-    def validate_guide_id(self, attrs, source):
-        value = attrs[source]
+    def validate_guide_id(self, value):
         valid_ids = manager.get_valid_ids()
 
         if not value:
             raise serializers.ValidationError('Assistant guide id is required')
         if value not in valid_ids:
             raise serializers.ValidationError('Not a valid assistant guide id')
-        return attrs
+        return value
 
 
 class AssistantEndpoint(Endpoint):
diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index b5485f0294..dadfb86e0b 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -106,14 +106,14 @@ class AuthIndexEndpoint(Endpoint):
         authenticated = False
 
         # See if we have a u2f challenge/response
-        if 'challenge' in validator.object and 'response' in validator.object:
+        if 'challenge' in validator.validated_data and 'response' in validator.validated_data:
             try:
                 interface = Authenticator.objects.get_interface(request.user, 'u2f')
                 if not interface.is_enrolled:
                     raise LookupError()
 
-                challenge = json.loads(validator.object['challenge'])
-                response = json.loads(validator.object['response'])
+                challenge = json.loads(validator.validated_data['challenge'])
+                response = json.loads(validator.validated_data['response'])
                 authenticated = interface.validate_response(request, challenge, response)
             except ValueError:
                 pass
@@ -122,7 +122,7 @@ class AuthIndexEndpoint(Endpoint):
 
         # attempt password authentication
         else:
-            authenticated = request.user.check_password(validator.object['password'])
+            authenticated = request.user.check_password(validator.validated_data['password'])
 
         # UI treats 401s by redirecting, this 401 should be ignored
         if not authenticated:
diff --git a/src/sentry/api/endpoints/broadcast_details.py b/src/sentry/api/endpoints/broadcast_details.py
index 453609ae5c..466d9e47c2 100644
--- a/src/sentry/api/endpoints/broadcast_details.py
+++ b/src/sentry/api/endpoints/broadcast_details.py
@@ -58,7 +58,7 @@ class BroadcastDetailsEndpoint(Endpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.object
+        result = validator.validated_data
 
         update_kwargs = {}
         if result.get('title'):
diff --git a/src/sentry/api/endpoints/broadcast_index.py b/src/sentry/api/endpoints/broadcast_index.py
index 14337a6f9b..1c90b80ace 100644
--- a/src/sentry/api/endpoints/broadcast_index.py
+++ b/src/sentry/api/endpoints/broadcast_index.py
@@ -116,7 +116,7 @@ class BroadcastIndexEndpoint(OrganizationEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.object
+        result = validator.validated_data
 
         queryset = Broadcast.objects.filter(
             is_active=True,
@@ -161,7 +161,7 @@ class BroadcastIndexEndpoint(OrganizationEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.object
+        result = validator.validated_data
 
         with transaction.atomic():
             broadcast = Broadcast.objects.create(
diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index 52dfb98f52..78c8e45656 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -47,7 +47,7 @@ class GroupNotesEndpoint(GroupEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
-        data = dict(serializer.object)
+        data = dict(serializer.validated_data)
 
         mentions = data.pop('mentions', [])
 
diff --git a/src/sentry/api/endpoints/group_notes_details.py b/src/sentry/api/endpoints/group_notes_details.py
index 57689d2c7d..0b2241a396 100644
--- a/src/sentry/api/endpoints/group_notes_details.py
+++ b/src/sentry/api/endpoints/group_notes_details.py
@@ -52,7 +52,7 @@ class GroupNotesDetailsEndpoint(GroupEndpoint):
 
         if serializer.is_valid():
             # Would be nice to have a last_modified timestamp we could bump here
-            note.data.update(dict(serializer.object))
+            note.data.update(dict(serializer.validated_data))
             note.save()
             if note.data.get('external_id'):
                 self.update_external_comment(request, group, note)
diff --git a/src/sentry/api/endpoints/monitor_checkin_details.py b/src/sentry/api/endpoints/monitor_checkin_details.py
index 254cc84ad5..baacc24a63 100644
--- a/src/sentry/api/endpoints/monitor_checkin_details.py
+++ b/src/sentry/api/endpoints/monitor_checkin_details.py
@@ -7,8 +7,9 @@ from rest_framework import serializers
 from sentry import features
 from sentry.api.authentication import DSNAuthentication
 from sentry.api.base import Endpoint
-from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.bases.project import ProjectPermission
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.serializers import serialize
 from sentry.models import Monitor, MonitorCheckIn, CheckInStatus, MonitorStatus, Project, ProjectKey, ProjectStatus
 from sentry.utils.sdk import configure_scope
@@ -22,7 +23,7 @@ class CheckInSerializer(serializers.Serializer):
             ('in_progress', CheckInStatus.IN_PROGRESS),
         ),
     )
-    duration = serializers.IntegerField(required=False)
+    duration = EmptyIntegerField(required=False, allow_null=True)
 
 
 class MonitorCheckInDetailsEndpoint(Endpoint):
@@ -111,7 +112,7 @@ class MonitorCheckInDetailsEndpoint(Endpoint):
         if not serializer.is_valid():
             return self.respond(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         current_datetime = timezone.now()
         params = {
diff --git a/src/sentry/api/endpoints/monitor_checkins.py b/src/sentry/api/endpoints/monitor_checkins.py
index f6cceccefe..55094ca3de 100644
--- a/src/sentry/api/endpoints/monitor_checkins.py
+++ b/src/sentry/api/endpoints/monitor_checkins.py
@@ -5,6 +5,7 @@ from rest_framework import serializers
 
 from sentry.api.authentication import DSNAuthentication
 from sentry.api.bases.monitor import MonitorEndpoint
+from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.models import Monitor, MonitorCheckIn, MonitorStatus, CheckInStatus, ProjectKey
@@ -18,7 +19,7 @@ class CheckInSerializer(serializers.Serializer):
             ('in_progress', CheckInStatus.IN_PROGRESS),
         ),
     )
-    duration = serializers.IntegerField(required=False)
+    duration = EmptyIntegerField(required=False, allow_null=True)
 
 
 class MonitorCheckInsEndpoint(MonitorEndpoint):
@@ -69,7 +70,7 @@ class MonitorCheckInsEndpoint(MonitorEndpoint):
         if not serializer.is_valid():
             return self.respond(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         with transaction.atomic():
             checkin = MonitorCheckIn.objects.create(
diff --git a/src/sentry/api/endpoints/monitor_details.py b/src/sentry/api/endpoints/monitor_details.py
index 30a0328897..479e2b886f 100644
--- a/src/sentry/api/endpoints/monitor_details.py
+++ b/src/sentry/api/endpoints/monitor_details.py
@@ -51,7 +51,7 @@ class MonitorDetailsEndpoint(MonitorEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.data
+        result = validator.save()
 
         params = {}
         if 'name' in result:
diff --git a/src/sentry/api/endpoints/organization_access_request_details.py b/src/sentry/api/endpoints/organization_access_request_details.py
index 45a5400fdf..e7cc4aced0 100644
--- a/src/sentry/api/endpoints/organization_access_request_details.py
+++ b/src/sentry/api/endpoints/organization_access_request_details.py
@@ -108,7 +108,7 @@ class OrganizationAccessRequestDetailsEndpoint(OrganizationEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        is_approved = serializer.object.get('isApproved')
+        is_approved = serializer.validated_data.get('isApproved')
         if is_approved is None:
             return Response(status=400)
 
diff --git a/src/sentry/api/endpoints/organization_dashboard_details.py b/src/sentry/api/endpoints/organization_dashboard_details.py
index 2754271c92..8809e329f4 100644
--- a/src/sentry/api/endpoints/organization_dashboard_details.py
+++ b/src/sentry/api/endpoints/organization_dashboard_details.py
@@ -57,19 +57,14 @@ class WidgetSerializer(serializers.Serializer):
 
 
 class DashboardWithWidgetsSerializer(serializers.Serializer):
-    title = serializers.CharField(required=False)
+    title = serializers.CharField(required=False, allow_blank=True, allow_null=True)
     widgets = ListField(
         child=WidgetSerializer(),
         required=False,
         allow_null=True,
     )
 
-    def validate_widgets(self, attrs, source):
-        try:
-            widgets = attrs[source]
-        except KeyError:
-            return attrs
-
+    def validate_widgets(self, widgets):
         if len(widgets) != len(set([w['order'] for w in widgets])):
             raise ValidationError('Widgets must not have duplicate order values.')
 
@@ -83,7 +78,7 @@ class DashboardWithWidgetsSerializer(serializers.Serializer):
             raise ValidationError(
                 'All widgets must exist within this dashboard prior to reordering.')
 
-        return attrs
+        return widgets
 
 
 class OrganizationDashboardDetailsEndpoint(OrganizationDashboardEndpoint):
@@ -145,7 +140,7 @@ class OrganizationDashboardDetailsEndpoint(OrganizationDashboardEndpoint):
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
-        data = serializer.object
+        data = serializer.validated_data
         try:
             with transaction.atomic():
                 title = data.get('title')
diff --git a/src/sentry/api/endpoints/organization_dashboard_widget_details.py b/src/sentry/api/endpoints/organization_dashboard_widget_details.py
index 47f51be467..e88ce76fee 100644
--- a/src/sentry/api/endpoints/organization_dashboard_widget_details.py
+++ b/src/sentry/api/endpoints/organization_dashboard_widget_details.py
@@ -58,7 +58,7 @@ class OrganizationDashboardWidgetDetailsEndpoint(OrganizationDashboardWidgetEndp
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        data = serializer.object
+        data = serializer.validated_data
 
         with transaction.atomic():
             widget.update(
diff --git a/src/sentry/api/endpoints/organization_dashboard_widgets.py b/src/sentry/api/endpoints/organization_dashboard_widgets.py
index d0a83483e9..a55efc5b05 100644
--- a/src/sentry/api/endpoints/organization_dashboard_widgets.py
+++ b/src/sentry/api/endpoints/organization_dashboard_widgets.py
@@ -37,7 +37,7 @@ class OrganizationDashboardWidgetsEndpoint(OrganizationDashboardEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         try:
             with transaction.atomic():
diff --git a/src/sentry/api/endpoints/organization_dashboards.py b/src/sentry/api/endpoints/organization_dashboards.py
index 14dc477b12..96c3787d3f 100644
--- a/src/sentry/api/endpoints/organization_dashboards.py
+++ b/src/sentry/api/endpoints/organization_dashboards.py
@@ -59,7 +59,7 @@ class OrganizationDashboardsEndpoint(OrganizationEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         try:
             with transaction.atomic():
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 83b2db1b77..1765f897cc 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -11,6 +11,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.fields import AvatarField
+from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models import organization as org_serializers
 from sentry.api.serializers.rest_framework import ListField
@@ -74,13 +75,23 @@ def update_organization_scenario(runner):
 class OrganizationSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=64)
     slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50)
-    accountRateLimit = serializers.IntegerField(
-        min_value=0, max_value=1000000, required=False)
-    projectRateLimit = serializers.IntegerField(
-        min_value=50, max_value=100, required=False)
-    avatar = AvatarField(required=False)
+    accountRateLimit = EmptyIntegerField(
+        min_value=0,
+        max_value=1000000,
+        required=False,
+        allow_null=True,
+    )
+    projectRateLimit = EmptyIntegerField(
+        min_value=50,
+        max_value=100,
+        required=False,
+        allow_null=True,
+    )
+    avatar = AvatarField(required=False, allow_null=True)
     avatarType = serializers.ChoiceField(
-        choices=(('upload', 'upload'), ('letter_avatar', 'letter_avatar'), ), required=False
+        choices=(('upload', 'upload'), ('letter_avatar', 'letter_avatar'), ),
+        required=False,
+        allow_null=True,
     )
 
     openMembership = serializers.BooleanField(required=False)
@@ -110,8 +121,7 @@ class OrganizationSerializer(serializers.Serializer):
         org = self.context['organization']
         return AuthProvider.objects.filter(organization=org).exists()
 
-    def validate_slug(self, attrs, source):
-        value = attrs[source]
+    def validate_slug(self, value):
         # Historically, the only check just made sure there was more than 1
         # character for the slug, but since then, there are many slugs that
         # fit within this new imposed limit. We're not fixing existing, but
@@ -129,30 +139,26 @@ class OrganizationSerializer(serializers.Serializer):
         ).exclude(id=self.context['organization'].id)
         if qs.exists():
             raise serializers.ValidationError('The slug "%s" is already in use.' % (value, ))
-        return attrs
+        return value
 
-    def validate_sensitiveFields(self, attrs, source):
-        value = attrs[source]
+    def validate_sensitiveFields(self, value):
         if value and not all(value):
             raise serializers.ValidationError('Empty values are not allowed.')
-        return attrs
+        return value
 
-    def validate_safeFields(self, attrs, source):
-        value = attrs[source]
+    def validate_safeFields(self, value):
         if value and not all(value):
             raise serializers.ValidationError('Empty values are not allowed.')
-        return attrs
+        return value
 
-    def validate_attachmentsRole(self, attrs, source):
-        value = attrs[source]
+    def validate_attachmentsRole(self, value):
         try:
             roles.get(value)
         except KeyError:
             raise serializers.ValidationError('Invalid role')
-        return attrs
+        return value
 
-    def validate_require2FA(self, attrs, source):
-        value = attrs[source]
+    def validate_require2FA(self, value):
         user = self.context['user']
         has_2fa = Authenticator.objects.user_has_2fa(user)
         if value and not has_2fa:
@@ -160,12 +166,9 @@ class OrganizationSerializer(serializers.Serializer):
 
         if value and self._has_sso_enabled():
             raise serializers.ValidationError(ERR_SSO_ENABLED)
-        return attrs
-
-    def validate_trustedRelays(self, attrs, source):
-        if not attrs[source]:
-            return attrs
+        return value
 
+    def validate_trustedRelays(self, value):
         from sentry import features
 
         organization = self.context['organization']
@@ -177,19 +180,19 @@ class OrganizationSerializer(serializers.Serializer):
             raise serializers.ValidationError(
                 'Organization does not have the relay feature enabled'
             )
-        return attrs
+        return value
 
-    def validate_accountRateLimit(self, attrs, source):
+    def validate_accountRateLimit(self, value):
         if not self._has_legacy_rate_limits:
             raise serializers.ValidationError(
                 'The accountRateLimit option cannot be configured for this organization')
-        return attrs
+        return value
 
-    def validate_projectRateLimit(self, attrs, source):
+    def validate_projectRateLimit(self, value):
         if not self._has_legacy_rate_limits:
             raise serializers.ValidationError(
                 'The accountRateLimit option cannot be configured for this organization')
-        return attrs
+        return value
 
     def validate(self, attrs):
         attrs = super(OrganizationSerializer, self).validate(attrs)
@@ -211,7 +214,7 @@ class OrganizationSerializer(serializers.Serializer):
         changed_data = {}
 
         for key, option, type_, default_value in ORG_OPTIONS:
-            if key not in self.init_data:
+            if key not in self.initial_data:
                 continue
             try:
                 option_inst = OrganizationOption.objects.get(
@@ -220,33 +223,33 @@ class OrganizationSerializer(serializers.Serializer):
                 OrganizationOption.objects.set_value(
                     organization=org,
                     key=option,
-                    value=type_(self.init_data[key]),
+                    value=type_(self.initial_data[key]),
                 )
 
-                if self.init_data[key] != default_value:
-                    changed_data[key] = u'to {}'.format(self.init_data[key])
+                if self.initial_data[key] != default_value:
+                    changed_data[key] = u'to {}'.format(self.initial_data[key])
             else:
-                option_inst.value = self.init_data[key]
+                option_inst.value = self.initial_data[key]
                 # check if ORG_OPTIONS changed
                 if option_inst.has_changed('value'):
                     old_val = option_inst.old_value('value')
                     changed_data[key] = u'from {} to {}'.format(old_val, option_inst.value)
                 option_inst.save()
 
-        if 'openMembership' in self.init_data:
-            org.flags.allow_joinleave = self.init_data['openMembership']
-        if 'allowSharedIssues' in self.init_data:
-            org.flags.disable_shared_issues = not self.init_data['allowSharedIssues']
-        if 'enhancedPrivacy' in self.init_data:
-            org.flags.enhanced_privacy = self.init_data['enhancedPrivacy']
-        if 'isEarlyAdopter' in self.init_data:
-            org.flags.early_adopter = self.init_data['isEarlyAdopter']
-        if 'require2FA' in self.init_data:
-            org.flags.require_2fa = self.init_data['require2FA']
-        if 'name' in self.init_data:
-            org.name = self.init_data['name']
-        if 'slug' in self.init_data:
-            org.slug = self.init_data['slug']
+        if 'openMembership' in self.initial_data:
+            org.flags.allow_joinleave = self.initial_data['openMembership']
+        if 'allowSharedIssues' in self.initial_data:
+            org.flags.disable_shared_issues = not self.initial_data['allowSharedIssues']
+        if 'enhancedPrivacy' in self.initial_data:
+            org.flags.enhanced_privacy = self.initial_data['enhancedPrivacy']
+        if 'isEarlyAdopter' in self.initial_data:
+            org.flags.early_adopter = self.initial_data['isEarlyAdopter']
+        if 'require2FA' in self.initial_data:
+            org.flags.require_2fa = self.initial_data['require2FA']
+        if 'name' in self.initial_data:
+            org.name = self.initial_data['name']
+        if 'slug' in self.initial_data:
+            org.slug = self.initial_data['slug']
 
         org_tracked_field = {
             'name': org.name,
@@ -275,14 +278,14 @@ class OrganizationSerializer(serializers.Serializer):
 
         org.save()
 
-        if 'avatar' in self.init_data or 'avatarType' in self.init_data:
+        if 'avatar' in self.initial_data or 'avatarType' in self.initial_data:
             OrganizationAvatar.save_avatar(
                 relation={'organization': org},
-                type=self.init_data.get('avatarType', 'upload'),
-                avatar=self.init_data.get('avatar'),
+                type=self.initial_data.get('avatarType', 'upload'),
+                avatar=self.initial_data.get('avatar'),
                 filename=u'{}.png'.format(org.slug),
             )
-        if 'require2FA' in self.init_data and self.init_data['require2FA'] is True:
+        if 'require2FA' in self.initial_data and self.initial_data['require2FA'] is True:
             org.handle_2fa_required(self.context['request'])
         return org, changed_data
 
@@ -293,9 +296,9 @@ class OwnerOrganizationSerializer(OrganizationSerializer):
 
     def save(self, *args, **kwargs):
         org = self.context['organization']
-        cancel_deletion = 'cancelDeletion' in self.init_data and org.status in DELETION_STATUSES
-        if 'defaultRole' in self.init_data:
-            org.default_role = self.init_data['defaultRole']
+        cancel_deletion = 'cancelDeletion' in self.initial_data and org.status in DELETION_STATUSES
+        if 'defaultRole' in self.initial_data:
+            org.default_role = self.initial_data['defaultRole']
         if cancel_deletion:
             org.status = OrganizationStatus.VISIBLE
         return super(OwnerOrganizationSerializer, self).save(*args, **kwargs)
diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index 9acb461d9b..6e7db5dd59 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -11,6 +11,7 @@ from rest_framework.response import Response
 from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
+from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.utils import get_date_range_from_params, InvalidParams
 from sentry.models import Project, ProjectStatus
@@ -31,16 +32,15 @@ class DiscoverQuerySerializer(serializers.Serializer):
         required=True,
         allow_null=False,
     )
-    start = serializers.CharField(required=False, allow_none=True)
-    end = serializers.CharField(required=False, allow_none=True)
-    range = serializers.CharField(required=False, allow_none=True)
-    statsPeriod = serializers.CharField(required=False, allow_none=True)
-    statsPeriodStart = serializers.CharField(required=False, allow_none=True)
-    statsPeriodEnd = serializers.CharField(required=False, allow_none=True)
+    start = serializers.CharField(required=False, allow_null=True)
+    end = serializers.CharField(required=False, allow_null=True)
+    range = serializers.CharField(required=False, allow_null=True)
+    statsPeriod = serializers.CharField(required=False, allow_null=True)
+    statsPeriodStart = serializers.CharField(required=False, allow_null=True)
+    statsPeriodEnd = serializers.CharField(required=False, allow_null=True)
     fields = ListField(
         child=serializers.CharField(),
         required=False,
-        allow_null=True,
         default=[],
     )
     conditionFields = ListField(
@@ -48,9 +48,9 @@ class DiscoverQuerySerializer(serializers.Serializer):
         required=False,
         allow_null=True,
     )
-    limit = serializers.IntegerField(min_value=0, max_value=10000, required=False)
-    rollup = serializers.IntegerField(required=False)
-    orderby = serializers.CharField(required=False, default="")
+    limit = EmptyIntegerField(min_value=0, max_value=10000, required=False, allow_null=True)
+    rollup = EmptyIntegerField(required=False, allow_null=True)
+    orderby = serializers.CharField(required=False, default="", allow_blank=True)
     conditions = ListField(
         child=ListField(),
         required=False,
@@ -59,7 +59,6 @@ class DiscoverQuerySerializer(serializers.Serializer):
     aggregations = ListField(
         child=ListField(),
         required=False,
-        allow_null=True,
         default=[]
     )
     groupby = ListField(
@@ -120,16 +119,13 @@ class DiscoverQuerySerializer(serializers.Serializer):
 
         return data
 
-    def validate_conditions(self, attrs, source):
+    def validate_conditions(self, value):
         # Handle error (exception_stacks), stack(exception_frames)
-        if attrs.get(source):
-            conditions = [self.get_condition(condition) for condition in attrs[source]]
-            attrs[source] = conditions
-        return attrs
+        return [self.get_condition(condition) for condition in value]
 
-    def validate_aggregations(self, attrs, source):
+    def validate_aggregations(self, value):
         valid_functions = set(['count()', 'uniq', 'avg'])
-        requested_functions = set(agg[0] for agg in attrs[source])
+        requested_functions = set(agg[0] for agg in value)
 
         if not requested_functions.issubset(valid_functions):
             invalid_functions = ', '.join((requested_functions - valid_functions))
@@ -138,7 +134,7 @@ class DiscoverQuerySerializer(serializers.Serializer):
                 u'Invalid aggregate function - {}'.format(invalid_functions)
             )
 
-        return attrs
+        return value
 
     def get_array_field(self, field):
         pattern = r"^(error|stack)\..+"
@@ -294,7 +290,7 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
         if not features.has('organizations:discover', organization, actor=request.user):
             return Response(status=404)
 
-        requested_projects = request.DATA['projects']
+        requested_projects = request.data['projects']
 
         projects = list(Project.objects.filter(
             id__in=requested_projects,
@@ -307,12 +303,12 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
         if has_invalid_projects or not request.access.has_projects_access(projects):
             return Response("Invalid projects", status=403)
 
-        serializer = DiscoverQuerySerializer(data=request.DATA)
+        serializer = DiscoverQuerySerializer(data=request.data)
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        serialized = serializer.object
+        serialized = serializer.validated_data
 
         has_aggregations = len(serialized.get('aggregations')) > 0
 
diff --git a/src/sentry/api/endpoints/organization_discover_saved_queries.py b/src/sentry/api/endpoints/organization_discover_saved_queries.py
index 97481afc38..398ac53a41 100644
--- a/src/sentry/api/endpoints/organization_discover_saved_queries.py
+++ b/src/sentry/api/endpoints/organization_discover_saved_queries.py
@@ -40,7 +40,7 @@ class OrganizationDiscoverSavedQueriesEndpoint(OrganizationEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        data = serializer.object
+        data = serializer.validated_data
 
         model = DiscoverSavedQuery.objects.create(
             organization=organization,
diff --git a/src/sentry/api/endpoints/organization_discover_saved_query_detail.py b/src/sentry/api/endpoints/organization_discover_saved_query_detail.py
index 1fa2448e2d..51c56f2783 100644
--- a/src/sentry/api/endpoints/organization_discover_saved_query_detail.py
+++ b/src/sentry/api/endpoints/organization_discover_saved_query_detail.py
@@ -46,7 +46,7 @@ class OrganizationDiscoverSavedQueryDetailEndpoint(OrganizationEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        data = serializer.object
+        data = serializer.validated_data
 
         model.update(
             organization=organization,
diff --git a/src/sentry/api/endpoints/organization_incident_comment_details.py b/src/sentry/api/endpoints/organization_incident_comment_details.py
index df1f2852ae..61ed305d8e 100644
--- a/src/sentry/api/endpoints/organization_incident_comment_details.py
+++ b/src/sentry/api/endpoints/organization_incident_comment_details.py
@@ -18,7 +18,7 @@ from sentry.incidents.logic import (
 
 
 class CommentSerializer(serializers.Serializer):
-    comment = serializers.CharField(required=False)
+    comment = serializers.CharField(required=True)
 
 
 class CommentDetailsEndpoint(IncidentEndpoint):
@@ -77,7 +77,7 @@ class OrganizationIncidentCommentDetailsEndpoint(CommentDetailsEndpoint):
 
         serializer = CommentSerializer(data=request.DATA)
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             try:
                 comment = update_comment(
diff --git a/src/sentry/api/endpoints/organization_incident_comment_index.py b/src/sentry/api/endpoints/organization_incident_comment_index.py
index 69ce361a88..ccbfbb5229 100644
--- a/src/sentry/api/endpoints/organization_incident_comment_index.py
+++ b/src/sentry/api/endpoints/organization_incident_comment_index.py
@@ -18,7 +18,7 @@ from sentry.incidents.models import IncidentActivityType
 class CommentSerializer(serializers.Serializer, MentionsMixin):
     comment = serializers.CharField(required=True)
     mentions = ListField(child=ActorField(), required=False)
-    external_id = serializers.CharField(allow_none=True, required=False)
+    external_id = serializers.CharField(allow_null=True, required=False)
 
 
 class OrganizationIncidentCommentIndexEndpoint(IncidentEndpoint):
@@ -32,14 +32,14 @@ class OrganizationIncidentCommentIndexEndpoint(IncidentEndpoint):
         if serializer.is_valid():
             mentions = extract_user_ids_from_mentions(
                 organization.id,
-                serializer.object.get('mentions', []),
+                serializer.validated_data.get('mentions', []),
             )
             mentioned_user_ids = mentions['users'] | mentions['team_users']
             activity = create_incident_activity(
                 incident,
                 IncidentActivityType.COMMENT,
                 user=request.user,
-                comment=serializer.object['comment'],
+                comment=serializer.validated_data['comment'],
                 mentioned_user_ids=mentioned_user_ids,
             )
             return Response(serialize(activity, request.user), status=201)
diff --git a/src/sentry/api/endpoints/organization_incident_details.py b/src/sentry/api/endpoints/organization_incident_details.py
index ddf63b4039..9182df7374 100644
--- a/src/sentry/api/endpoints/organization_incident_details.py
+++ b/src/sentry/api/endpoints/organization_incident_details.py
@@ -18,19 +18,18 @@ from sentry.incidents.models import IncidentStatus
 
 class IncidentSerializer(serializers.Serializer):
     status = serializers.IntegerField()
-    comment = serializers.CharField(required=False)
+    comment = serializers.CharField(required=False, allow_null=True)
 
-    def validate_status(self, attrs, source):
-        value = attrs[source]
+    def validate_status(self, value):
         try:
-            attrs[source] = IncidentStatus(value)
+            value = IncidentStatus(value)
         except Exception:
             raise serializers.ValidationError(
                 'Invalid value for status. Valid values: {}'.format(
                     [e.value for e in IncidentStatus],
                 ),
             )
-        return attrs
+        return value
 
 
 class OrganizationIncidentDetailsEndpoint(IncidentEndpoint):
@@ -49,7 +48,7 @@ class OrganizationIncidentDetailsEndpoint(IncidentEndpoint):
     def put(self, request, organization, incident):
         serializer = IncidentSerializer(data=request.DATA)
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             try:
                 incident = update_incident_status(
diff --git a/src/sentry/api/endpoints/organization_incident_index.py b/src/sentry/api/endpoints/organization_incident_index.py
index aa42d093d6..f81b2e5271 100644
--- a/src/sentry/api/endpoints/organization_incident_index.py
+++ b/src/sentry/api/endpoints/organization_incident_index.py
@@ -25,41 +25,35 @@ class IncidentSerializer(serializers.Serializer):
     projects = ListField(
         child=serializers.CharField(),
         required=False,
-        allow_null=True,
         default=[],
     )
     groups = ListField(
         child=serializers.CharField(),
         required=True,
         allow_null=False,
-        default=[],
     )
     title = serializers.CharField(required=True)
-    query = serializers.CharField(required=False)
+    query = serializers.CharField(required=False, allow_blank=True, allow_null=True)
     dateStarted = serializers.DateTimeField(required=True)
-    dateDetected = serializers.DateTimeField(required=False)
+    dateDetected = serializers.DateTimeField(required=False, allow_null=True)
 
-    def validate_projects(self, attrs, source):
-        slugs = attrs[source]
+    def validate_projects(self, slugs):
         projects = Project.objects.filter(
             organization=self.context['organization'],
             slug__in=slugs,
         )
         if len(projects) != len(slugs):
             raise serializers.ValidationError('Invalid project slug(s)')
-        attrs[source] = list(projects)
-        return attrs
+        return list(projects)
 
-    def validate_groups(self, attrs, source):
-        group_ids = attrs[source]
+    def validate_groups(self, group_ids):
         groups = Group.objects.filter(
             project__organization=self.context['organization'],
             id__in=group_ids,
         ).select_related('project')
         if len(groups) != len(group_ids):
             raise serializers.ValidationError('Invalid group id(s)')
-        attrs[source] = list(groups)
-        return attrs
+        return list(groups)
 
 
 class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
@@ -101,13 +95,13 @@ class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
             return self.respond(status=404)
 
         serializer = IncidentSerializer(
-            data=request.DATA,
+            data=request.data,
             context={'organization': organization},
         )
 
         if serializer.is_valid():
 
-            result = serializer.object
+            result = serializer.validated_data
             groups = result['groups']
             all_projects = set(result['projects']) | set(g.project for g in result['groups'])
             if any(p for p in all_projects if not request.access.has_project_access(p)):
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index f079f8905f..9412dd86e6 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -41,11 +41,10 @@ class OrganizationSerializer(serializers.Serializer):
         if not (settings.TERMS_URL and settings.PRIVACY_URL):
             del self.fields['agreeTerms']
 
-    def validate_agreeTerms(self, attrs, source):
-        value = attrs[source]
+    def validate_agreeTerms(self, value):
         if not value:
             raise serializers.ValidationError('This attribute is required.')
-        return attrs
+        return value
 
 
 class OrganizationIndexEndpoint(Endpoint):
@@ -216,7 +215,7 @@ class OrganizationIndexEndpoint(Endpoint):
         serializer = OrganizationSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             try:
                 with transaction.atomic():
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 1ec649257b..9ce675eadf 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -150,7 +150,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
             auth_provider = None
 
         allowed_roles = None
-        result = serializer.object
+        result = serializer.validated_data
 
         # XXX(dcramer): if/when this expands beyond reinvite we need to check
         # access level
diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index d244d61a9a..f883d9f38a 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -116,7 +116,7 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         _, allowed_roles = get_allowed_roles(request, organization)
 
diff --git a/src/sentry/api/endpoints/organization_monitors.py b/src/sentry/api/endpoints/organization_monitors.py
index 5bfe188843..cc0a89d46b 100644
--- a/src/sentry/api/endpoints/organization_monitors.py
+++ b/src/sentry/api/endpoints/organization_monitors.py
@@ -118,7 +118,7 @@ class OrganizationMonitorsEndpoint(OrganizationEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.data
+        result = validator.validated_data
 
         monitor = Monitor.objects.create(
             project_id=result['project'].id,
diff --git a/src/sentry/api/endpoints/organization_pinned_searches.py b/src/sentry/api/endpoints/organization_pinned_searches.py
index 122edf959c..7432b319f4 100644
--- a/src/sentry/api/endpoints/organization_pinned_searches.py
+++ b/src/sentry/api/endpoints/organization_pinned_searches.py
@@ -21,12 +21,12 @@ class OrganizationSearchSerializer(serializers.Serializer):
     type = serializers.IntegerField(required=True)
     query = serializers.CharField(required=True)
 
-    def validate_type(self, attrs, source):
+    def validate_type(self, value):
         try:
-            SearchType(attrs[source])
+            SearchType(value)
         except ValueError as e:
             raise serializers.ValidationError(six.text_type(e))
-        return attrs
+        return value
 
 
 class OrganizationPinnedSearchEndpoint(OrganizationEndpoint):
@@ -36,7 +36,7 @@ class OrganizationPinnedSearchEndpoint(OrganizationEndpoint):
         serializer = OrganizationSearchSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
             SavedSearch.objects.create_or_update(
                 organization=organization,
                 name=PINNED_SEARCH_NAME,
diff --git a/src/sentry/api/endpoints/organization_recent_searches.py b/src/sentry/api/endpoints/organization_recent_searches.py
index 4eef9bd59d..e4273b9b96 100644
--- a/src/sentry/api/endpoints/organization_recent_searches.py
+++ b/src/sentry/api/endpoints/organization_recent_searches.py
@@ -78,7 +78,7 @@ class OrganizationRecentSearchesEndpoint(OrganizationEndpoint):
         serializer = RecentSearchSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             created = RecentSearch.objects.create_or_update(
                 organization=organization,
diff --git a/src/sentry/api/endpoints/organization_release_details.py b/src/sentry/api/endpoints/organization_release_details.py
index 06253a7cdd..855ac9bdaf 100644
--- a/src/sentry/api/endpoints/organization_release_details.py
+++ b/src/sentry/api/endpoints/organization_release_details.py
@@ -125,7 +125,7 @@ class OrganizationReleaseDetailsEndpoint(OrganizationReleasesBaseEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         was_released = bool(release.date_released)
 
diff --git a/src/sentry/api/endpoints/organization_release_file_details.py b/src/sentry/api/endpoints/organization_release_file_details.py
index ca13be7a3a..012d5e6893 100644
--- a/src/sentry/api/endpoints/organization_release_file_details.py
+++ b/src/sentry/api/endpoints/organization_release_file_details.py
@@ -116,7 +116,7 @@ class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         releasefile.update(
             name=result['name'],
diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index 0f7915ea19..f4351e6ae5 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -180,7 +180,7 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
         serializer = ReleaseSerializerWithProjects(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             allowed_projects = {
                 p.slug: p for p in self.get_projects(request, organization)
diff --git a/src/sentry/api/endpoints/organization_repository_details.py b/src/sentry/api/endpoints/organization_repository_details.py
index e47d94844d..c2e0d3ea64 100644
--- a/src/sentry/api/endpoints/organization_repository_details.py
+++ b/src/sentry/api/endpoints/organization_repository_details.py
@@ -12,6 +12,7 @@ from sentry.api.bases.organization import (
     OrganizationRepositoryPermission
 )
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.serializers import serialize
 from sentry.constants import ObjectStatus
 from sentry.models import Commit, Integration, Repository
@@ -30,7 +31,7 @@ class RepositorySerializer(serializers.Serializer):
         ('visible', 'visible'),
         ('active', 'active'),
     ))
-    integrationId = serializers.IntegerField(required=False)
+    integrationId = EmptyIntegerField(required=False, allow_null=True)
 
 
 class OrganizationRepositoryDetailsEndpoint(OrganizationEndpoint):
@@ -57,7 +58,7 @@ class OrganizationRepositoryDetailsEndpoint(OrganizationEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
         update_kwargs = {}
         if result.get('status'):
             if result['status'] in ('visible', 'active'):
diff --git a/src/sentry/api/endpoints/organization_searches.py b/src/sentry/api/endpoints/organization_searches.py
index 75b5459ab9..92f17fc063 100644
--- a/src/sentry/api/endpoints/organization_searches.py
+++ b/src/sentry/api/endpoints/organization_searches.py
@@ -92,7 +92,7 @@ class OrganizationSearchesEndpoint(OrganizationEndpoint):
         serializer = OrganizationSearchSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
             # Prevent from creating duplicate queries
             if SavedSearch.objects.filter(
                 Q(is_global=True) | Q(organization=organization, owner__isnull=True),
diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 541d0e3714..55c6e5720e 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -50,11 +50,17 @@ class OrganizationTeamsPermission(OrganizationPermission):
 
 
 class TeamSerializer(serializers.Serializer):
-    name = serializers.CharField(max_length=64, required=False)
+    name = serializers.CharField(
+        max_length=64,
+        required=False,
+        allow_null=True,
+        allow_blank=True,
+    )
     slug = serializers.RegexField(
         r'^[a-z0-9_\-]+$',
         max_length=50,
         required=False,
+        allow_null=True,
         error_messages={
             'invalid': _('Enter a valid slug consisting of lowercase letters, '
                          'numbers, underscores or hyphens.'),
@@ -131,7 +137,7 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
         serializer = TeamSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             try:
                 with transaction.atomic():
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 0ae62010be..b51684fdc2 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -16,9 +16,12 @@ from sentry.utils.data_filters import FilterTypes
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.decorators import sudo_required
+from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.project import DetailedProjectSerializer
-from sentry.api.serializers.rest_framework import ListField, OriginField
+from sentry.api.serializers.rest_framework.list import EmptyListField
+from sentry.api.serializers.rest_framework.list import ListField
+from sentry.api.serializers.rest_framework.origin import OriginField
 from sentry.constants import RESERVED_PROJECT_SLUGS
 from sentry.lang.native.symbolicator import parse_sources, InvalidSourcesError
 from sentry.models import (
@@ -89,62 +92,58 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
     digestsMaxDelay = serializers.IntegerField(min_value=60, max_value=3600)
     subjectPrefix = serializers.CharField(max_length=200)
     subjectTemplate = serializers.CharField(max_length=200)
-    securityToken = serializers.RegexField(r'^[-a-zA-Z0-9+/=\s]+$', max_length=255)
-    securityTokenHeader = serializers.RegexField(r'^[a-zA-Z0-9_\-]+$', max_length=20)
+    securityToken = serializers.RegexField(
+        r'^[-a-zA-Z0-9+/=\s]+$', max_length=255, allow_blank=True)
+    securityTokenHeader = serializers.RegexField(
+        r'^[a-zA-Z0-9_\-]+$', max_length=20, allow_blank=True)
     verifySSL = serializers.BooleanField(required=False)
 
-    defaultEnvironment = serializers.CharField(required=False, allow_none=True)
+    defaultEnvironment = serializers.CharField(required=False, allow_null=True, allow_blank=True)
     dataScrubber = serializers.BooleanField(required=False)
     dataScrubberDefaults = serializers.BooleanField(required=False)
     sensitiveFields = ListField(child=serializers.CharField(), required=False)
     safeFields = ListField(child=serializers.CharField(), required=False)
     storeCrashReports = serializers.BooleanField(required=False)
-    relayPiiConfig = serializers.CharField(required=False)
+    relayPiiConfig = serializers.CharField(required=False, allow_blank=True, allow_null=True)
     builtinSymbolSources = ListField(child=serializers.CharField(), required=False)
-    symbolSources = serializers.CharField(required=False)
+    symbolSources = serializers.CharField(required=False, allow_blank=True, allow_null=True)
     scrubIPAddresses = serializers.BooleanField(required=False)
-    groupingConfig = serializers.CharField(required=False)
-    groupingEnhancements = serializers.CharField(required=False)
-    groupingEnhancementsBase = serializers.CharField(required=False)
-    fingerprintingRules = serializers.CharField(required=False)
+    groupingConfig = serializers.CharField(required=False, allow_blank=True, allow_null=True)
+    groupingEnhancements = serializers.CharField(required=False, allow_blank=True, allow_null=True)
+    groupingEnhancementsBase = serializers.CharField(
+        required=False,
+        allow_blank=True,
+        allow_null=True,
+    )
+    fingerprintingRules = serializers.CharField(required=False, allow_blank=True, allow_null=True)
     scrapeJavaScript = serializers.BooleanField(required=False)
-    allowedDomains = ListField(child=OriginField(), required=False)
-    resolveAge = serializers.IntegerField(required=False)
-    platform = serializers.CharField(required=False)
+    allowedDomains = EmptyListField(child=OriginField(allow_blank=True), required=False)
+    resolveAge = EmptyIntegerField(required=False, allow_null=True)
+    platform = serializers.CharField(required=False, allow_null=True, allow_blank=True)
     copy_from_project = serializers.IntegerField(required=False)
 
-    def validate_digestsMinDelay(self, attrs, source):
-        max_delay = attrs['digestsMaxDelay'] if 'digestsMaxDelay' in attrs else self.context['project'].get_option(
+    def validate(self, data):
+        max_delay = data['digestsMaxDelay'] if 'digestsMaxDelay' in data else self.context['project'].get_option(
             'digests:mail:maximum_delay')
-
-        # allow min to be set if max is not set
-        if max_delay is not None and attrs[source] > max_delay:
-            raise serializers.ValidationError(
-                'The minimum delay on digests must be lower than the maximum.'
-            )
-        return attrs
-
-    def validate_digestsMaxDelay(self, attrs, source):
-        min_delay = attrs['digestsMinDelay'] if 'digestsMinDelay' in attrs else self.context['project'].get_option(
+        min_delay = data['digestsMinDelay'] if 'digestsMinDelay' in data else self.context['project'].get_option(
             'digests:mail:minimum_delay')
 
-        # allows max to be set if min is not set
-        if min_delay is not None and attrs[source] < min_delay:
+        if min_delay is not None and max_delay and max_delay is not None and min_delay > max_delay:
             raise serializers.ValidationError(
-                'The maximum delay on digests must be higher than the minimum.'
+                {'digestsMinDelay': 'The minimum delay on digests must be lower than the maximum.'}
             )
-        return attrs
 
-    def validate_allowedDomains(self, attrs, source):
-        attrs[source] = filter(bool, attrs[source])
-        if len(attrs[source]) == 0:
+        return data
+
+    def validate_allowedDomains(self, value):
+        value = filter(bool, value)
+        if len(value) == 0:
             raise serializers.ValidationError(
                 'Empty value will block all requests, use * to accept from all domains'
             )
-        return attrs
+        return value
 
-    def validate_slug(self, attrs, source):
-        slug = attrs[source]
+    def validate_slug(self, slug):
         if slug in RESERVED_PROJECT_SLUGS:
             raise serializers.ValidationError(
                 'The slug "%s" is reserved and not allowed.' %
@@ -156,13 +155,13 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
         ).exclude(id=project.id).first()
         if other is not None:
             raise serializers.ValidationError(
-                'Another project (%s) is already using that slug' % other.name
+                'Another project (%s) is already using that slug' % other.name,
             )
-        return attrs
+        return slug
 
-    def validate_relayPiiConfig(self, attrs, source):
-        if not attrs[source]:
-            return attrs
+    def validate_relayPiiConfig(self, value):
+        if not value:
+            return value
 
         from sentry import features
 
@@ -175,11 +174,11 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
             raise serializers.ValidationError(
                 'Organization does not have the relay feature enabled'
             )
-        return attrs
+        return value
 
-    def validate_builtinSymbolSources(self, attrs, source):
-        if not attrs[source]:
-            return attrs
+    def validate_builtinSymbolSources(self, value):
+        if not value:
+            return value
 
         from sentry import features
         organization = self.context['project'].organization
@@ -193,12 +192,11 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
                 'Organization is not allowed to set symbol sources'
             )
 
-        return attrs
+        return value
 
-    def validate_symbolSources(self, attrs, source):
-        sources_json = attrs[source]
+    def validate_symbolSources(self, sources_json):
         if not sources_json:
-            return attrs
+            return sources_json
 
         from sentry import features
         organization = self.context['project'].organization
@@ -214,37 +212,35 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
 
         try:
             sources = parse_sources(sources_json.strip())
-            attrs[source] = json.dumps(sources) if sources else ''
+            sources_json = json.dumps(sources) if sources else ''
         except InvalidSourcesError as e:
             raise serializers.ValidationError(e.message)
 
-        return attrs
+        return sources_json
 
-    def validate_groupingEnhancements(self, attrs, source):
-        if not attrs[source]:
-            return attrs
+    def validate_groupingEnhancements(self, value):
+        if not value:
+            return value
 
         try:
-            Enhancements.from_config_string(attrs[source])
+            Enhancements.from_config_string(value)
         except InvalidEnhancerConfig as e:
             raise serializers.ValidationError(e.message)
 
-        return attrs
+        return value
 
-    def validate_fingerprintingRules(self, attrs, source):
-        if not attrs[source]:
-            return attrs
+    def validate_fingerprintingRules(self, value):
+        if not value:
+            return value
 
         try:
-            FingerprintingRules.from_config_string(attrs[source])
+            FingerprintingRules.from_config_string(value)
         except InvalidFingerprintingConfig as e:
             raise serializers.ValidationError(e.message)
 
-        return attrs
-
-    def validate_copy_from_project(self, attrs, source):
-        other_project_id = attrs[source]
+        return value
 
+    def validate_copy_from_project(self, other_project_id):
         try:
             other_project = Project.objects.filter(
                 id=other_project_id,
@@ -267,7 +263,7 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
                     'Project settings cannot be copied from a project with a team you do not have write access to.'
                 )
 
-        return attrs
+        return other_project_id
 
 
 class RelaxedProjectPermission(ProjectPermission):
@@ -368,11 +364,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         if not has_project_write:
             # options isn't part of the serializer, but should not be editable by members
-            for key in chain(six.iterkeys(ProjectAdminSerializer.base_fields), ['options']):
+            for key in chain(six.iterkeys(ProjectAdminSerializer().fields), ['options']):
                 if request.DATA.get(key) and not result.get(key):
                     return Response(
                         {
diff --git a/src/sentry/api/endpoints/project_environment_details.py b/src/sentry/api/endpoints/project_environment_details.py
index 322bdafec7..69c703bd37 100644
--- a/src/sentry/api/endpoints/project_environment_details.py
+++ b/src/sentry/api/endpoints/project_environment_details.py
@@ -38,7 +38,7 @@ class ProjectEnvironmentDetailsEndpoint(ProjectEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        data = serializer.object
+        data = serializer.validated_data
         fields = {}
 
         if 'isHidden' in data:
diff --git a/src/sentry/api/endpoints/project_filter_details.py b/src/sentry/api/endpoints/project_filter_details.py
index 22ec2756d8..ddafb9879d 100644
--- a/src/sentry/api/endpoints/project_filter_details.py
+++ b/src/sentry/api/endpoints/project_filter_details.py
@@ -34,7 +34,7 @@ class ProjectFilterDetailsEndpoint(ProjectEndpoint):
 
         current_state = message_filters.get_filter_state(filter_id, project)
 
-        new_state = message_filters.set_filter_state(filter_id, project, serializer.object)
+        new_state = message_filters.set_filter_state(filter_id, project, serializer.validated_data)
         audit_log_state = AuditLogEntryEvent.PROJECT_ENABLE
 
         if filter_id == 'legacy-browsers':
diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index 8d2752111e..dd939d7c4e 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -8,6 +8,7 @@ from sentry import features
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
 from sentry.utils.apidocs import scenario, attach_scenarios
@@ -39,14 +40,14 @@ def update_key_scenario(runner):
 
 
 class RateLimitSerializer(serializers.Serializer):
-    count = serializers.IntegerField(min_value=0, required=False)
-    window = serializers.IntegerField(min_value=0, max_value=60 * 60 * 24, required=False)
+    count = EmptyIntegerField(min_value=0, required=False, allow_null=True)
+    window = EmptyIntegerField(min_value=0, max_value=60 * 60 * 24, required=False, allow_null=True)
 
 
 class KeySerializer(serializers.Serializer):
-    name = serializers.CharField(max_length=200, required=False)
+    name = serializers.CharField(max_length=200, required=False, allow_blank=True, allow_null=True)
     isActive = serializers.BooleanField(required=False)
-    rateLimit = RateLimitSerializer(required=False)
+    rateLimit = RateLimitSerializer(allow_null=True)
     browserSdkVersion = serializers.ChoiceField(
         choices=get_browser_sdk_version_choices(), required=False
     )
@@ -95,7 +96,7 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
         default_version = get_default_sdk_version_for_project(project)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             if result.get('name'):
                 key.label = result['name']
@@ -111,7 +112,14 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
                 key.status = ProjectKeyStatus.INACTIVE
 
             if features.has('projects:rate-limits', project):
-                if result.get('rateLimit', -1) is None:
+                ratelimit = result.get('rateLimit', -1)
+                if (
+                    ratelimit is None or
+                    ratelimit != - 1 and ratelimit and (
+                        ratelimit['count'] is None
+                        or ratelimit['window'] is None
+                    )
+                ):
                     key.rate_limit_count = None
                     key.rate_limit_window = None
                 elif result.get('rateLimit'):
diff --git a/src/sentry/api/endpoints/project_keys.py b/src/sentry/api/endpoints/project_keys.py
index 19db2f9b7e..f13278c763 100644
--- a/src/sentry/api/endpoints/project_keys.py
+++ b/src/sentry/api/endpoints/project_keys.py
@@ -28,9 +28,9 @@ def create_key_scenario(runner):
 
 
 class KeySerializer(serializers.Serializer):
-    name = serializers.CharField(max_length=200, required=False)
-    public = serializers.RegexField(r'^[a-f0-9]{32}$', required=False)
-    secret = serializers.RegexField(r'^[a-f0-9]{32}$', required=False)
+    name = serializers.CharField(max_length=200, required=False, allow_blank=True, allow_null=True)
+    public = serializers.RegexField(r'^[a-f0-9]{32}$', required=False, allow_null=True)
+    secret = serializers.RegexField(r'^[a-f0-9]{32}$', required=False, allow_null=True)
 
 
 class ProjectKeysEndpoint(ProjectEndpoint):
@@ -90,7 +90,7 @@ class ProjectKeysEndpoint(ProjectEndpoint):
         serializer = KeySerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             key = ProjectKey.objects.create(
                 project=project,
diff --git a/src/sentry/api/endpoints/project_ownership.py b/src/sentry/api/endpoints/project_ownership.py
index 5edf214270..bb99a043a3 100644
--- a/src/sentry/api/endpoints/project_ownership.py
+++ b/src/sentry/api/endpoints/project_ownership.py
@@ -15,20 +15,21 @@ from sentry.ownership.grammar import parse_rules, dump_schema, ParseError
 
 
 class ProjectOwnershipSerializer(serializers.Serializer):
-    raw = serializers.CharField()
+    raw = serializers.CharField(allow_blank=True)
     fallthrough = serializers.BooleanField()
     autoAssignment = serializers.BooleanField()
 
-    def validate_raw(self, attrs, source):
-        if not attrs[source].strip():
+    def validate(self, attrs):
+        if not attrs.get('raw', '').strip():
             return attrs
         try:
-            rules = parse_rules(attrs[source])
+            rules = parse_rules(attrs['raw'])
         except ParseError as e:
             raise serializers.ValidationError(
-                u'Parse error: %r (line %d, column %d)' % (
+                {'raw': u'Parse error: %r (line %d, column %d)' % (
                     e.expr.name, e.line(), e.column()
-                ))
+                )}
+            )
 
         schema = dump_schema(rules)
 
@@ -45,7 +46,7 @@ class ProjectOwnershipSerializer(serializers.Serializer):
 
         if bad_actors:
             raise serializers.ValidationError(
-                u'Invalid rule owners: {}'.format(", ".join(bad_actors))
+                {'raw': u'Invalid rule owners: {}'.format(", ".join(bad_actors))}
             )
 
         attrs['schema'] = schema
@@ -55,18 +56,18 @@ class ProjectOwnershipSerializer(serializers.Serializer):
         ownership = self.context['ownership']
 
         changed = False
-        if 'raw' in self.object:
-            raw = self.object['raw']
+        if 'raw' in self.validated_data:
+            raw = self.validated_data['raw']
             if not raw.strip():
                 raw = None
 
             if ownership.raw != raw:
                 ownership.raw = raw
-                ownership.schema = self.object.get('schema')
+                ownership.schema = self.validated_data.get('schema')
                 changed = True
 
-        if 'fallthrough' in self.object:
-            fallthrough = self.object['fallthrough']
+        if 'fallthrough' in self.validated_data:
+            fallthrough = self.validated_data['fallthrough']
             if ownership.fallthrough != fallthrough:
                 ownership.fallthrough = fallthrough
                 changed = True
@@ -83,7 +84,7 @@ class ProjectOwnershipSerializer(serializers.Serializer):
         return ownership
 
     def __modify_auto_assignment(self, ownership):
-        auto_assignment = self.object.get('autoAssignment')
+        auto_assignment = self.validated_data.get('autoAssignment')
 
         if auto_assignment is None:
             return False
diff --git a/src/sentry/api/endpoints/project_release_details.py b/src/sentry/api/endpoints/project_release_details.py
index 8055a088bf..b78e953ee2 100644
--- a/src/sentry/api/endpoints/project_release_details.py
+++ b/src/sentry/api/endpoints/project_release_details.py
@@ -79,7 +79,7 @@ class ProjectReleaseDetailsEndpoint(ProjectEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         was_released = bool(release.date_released)
 
diff --git a/src/sentry/api/endpoints/project_release_file_details.py b/src/sentry/api/endpoints/project_release_file_details.py
index a28591fb03..8a6246b5a6 100644
--- a/src/sentry/api/endpoints/project_release_file_details.py
+++ b/src/sentry/api/endpoints/project_release_file_details.py
@@ -165,11 +165,9 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
-        releasefile.update(
-            name=result['name'],
-        )
+        releasefile.update(name=result['name'])
 
         return Response(serialize(releasefile, request.user))
 
diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 74545319ef..87700f2858 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -107,7 +107,7 @@ class ProjectReleasesEndpoint(ProjectEndpoint, EnvironmentMixin):
         serializer = ReleaseWithVersionSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             # release creation is idempotent to simplify user
             # experiences
diff --git a/src/sentry/api/endpoints/project_rule_details.py b/src/sentry/api/endpoints/project_rule_details.py
index 0a2f8b1666..4284ca825c 100644
--- a/src/sentry/api/endpoints/project_rule_details.py
+++ b/src/sentry/api/endpoints/project_rule_details.py
@@ -5,7 +5,7 @@ from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint, ProjectSettingPermission
 from sentry.api.serializers import serialize
-from sentry.api.serializers.rest_framework import RuleSerializer
+from sentry.api.serializers.rest_framework.rule import RuleSerializer
 from sentry.models import AuditLogEntryEvent, Rule, RuleStatus
 
 
@@ -49,10 +49,6 @@ class ProjectRuleDetailsEndpoint(ProjectEndpoint):
         )
 
         serializer = RuleSerializer(
-            {
-                'actionMatch': rule.data.get('action_match') or Rule.DEFAULT_ACTION_MATCH,
-                'frequency': rule.data.get('frequency') or Rule.DEFAULT_FREQUENCY,
-            },
             context={'project': project},
             data=request.DATA,
             partial=True
diff --git a/src/sentry/api/endpoints/project_search_details.py b/src/sentry/api/endpoints/project_search_details.py
index 4e85d87dd8..1f7ff4823f 100644
--- a/src/sentry/api/endpoints/project_search_details.py
+++ b/src/sentry/api/endpoints/project_search_details.py
@@ -75,7 +75,7 @@ class ProjectSearchDetailsEndpoint(ProjectEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         kwargs = {}
         if result.get('name'):
diff --git a/src/sentry/api/endpoints/project_searches.py b/src/sentry/api/endpoints/project_searches.py
index b31f831bb1..924e32069e 100644
--- a/src/sentry/api/endpoints/project_searches.py
+++ b/src/sentry/api/endpoints/project_searches.py
@@ -54,7 +54,7 @@ class ProjectSearchesEndpoint(ProjectEndpoint):
         serializer = SavedSearchSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             with transaction.atomic():
                 try:
diff --git a/src/sentry/api/endpoints/project_servicehook_details.py b/src/sentry/api/endpoints/project_servicehook_details.py
index be03074a48..f000263d15 100644
--- a/src/sentry/api/endpoints/project_servicehook_details.py
+++ b/src/sentry/api/endpoints/project_servicehook_details.py
@@ -67,7 +67,7 @@ class ProjectServiceHookDetailsEndpoint(ProjectEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=status.HTTP_400_BAD_REQUEST)
 
-        result = validator.object
+        result = validator.validated_data
 
         updates = {}
         if result.get('events') is not None:
diff --git a/src/sentry/api/endpoints/project_servicehooks.py b/src/sentry/api/endpoints/project_servicehooks.py
index a3b30656bc..c0452ccc43 100644
--- a/src/sentry/api/endpoints/project_servicehooks.py
+++ b/src/sentry/api/endpoints/project_servicehooks.py
@@ -121,7 +121,7 @@ class ProjectServiceHooksEndpoint(ProjectEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=status.HTTP_400_BAD_REQUEST)
 
-        result = validator.object
+        result = validator.validated_data
 
         with transaction.atomic():
             hook = service_hooks.Creator.run(
diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 703422facd..bda5bbb8b2 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -134,23 +134,24 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
         if not serializer.is_valid():
             return self.respond(serializer.errors, status=400)
 
-        report = serializer.object
+        report = serializer.validated_data
+
         # XXX(dcramer): enforce case insensitivty by coercing this to a lowercase string
-        report.event_id = report.event_id.lower()
-        report.project = project
+        report['event_id'] = report['event_id'].lower()
+        report['project'] = project
 
         # TODO(dcramer): we should probably create the user if they dont
         # exist, and ideally we'd also associate that with the event
         euser = self.find_event_user(report)
-        if euser and not euser.name and report.name:
-            euser.update(name=report.name)
+        if euser and not euser.name and report['name']:
+            euser.update(name=report['name'])
         if euser:
-            report.event_user_id = euser.id
+            report['event_user_id'] = euser.id
 
-        event = Event.objects.from_event_id(report.event_id, project.id)
+        event = Event.objects.from_event_id(report['event_id'], project.id)
         if not event:
             try:
-                report.group = Group.objects.from_event_id(project, report.event_id)
+                report['group'] = Group.objects.from_event_id(project, report['event_id'])
             except Group.DoesNotExist:
                 pass
         else:
@@ -160,12 +161,12 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
                 return self.respond(
                     {'detail': 'Feedback for this event cannot be modified.'}, status=409)
 
-            report.environment = event.get_environment()
-            report.group = event.group
+            report['environment'] = event.get_environment()
+            report['group'] = event.group
 
         try:
             with transaction.atomic():
-                report.save()
+                report_instance = UserReport.objects.create(**report)
         except IntegrityError:
             # There was a duplicate, so just overwrite the existing
             # row with the new one. The only way this ever happens is
@@ -174,8 +175,8 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
             # more reasonable than just hard erroring and is more
             # expected.
             existing_report = UserReport.objects.get(
-                project=report.project,
-                event_id=report.event_id,
+                project=report['project'],
+                event_id=report['event_id'],
             )
 
             # if the existing report was submitted more than 5 minutes ago, we dont
@@ -185,38 +186,38 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
                     {'detail': 'Feedback for this event cannot be modified.'}, status=409)
 
             existing_report.update(
-                name=report.name,
-                email=report.email,
-                comments=report.comments,
+                name=report['name'],
+                email=report['email'],
+                comments=report['comments'],
                 date_added=timezone.now(),
                 event_user_id=euser.id if euser else None,
             )
-            report = existing_report
+            report_instance = existing_report
 
         else:
-            if report.group:
-                report.notify()
+            if report_instance.group:
+                report_instance.notify()
 
-        user_feedback_received.send(project=report.project, group=report.group, sender=self)
+        user_feedback_received.send(project=report_instance.project, group=report_instance.group, sender=self)
 
-        return self.respond(serialize(report, request.user, UserReportWithGroupSerializer(
+        return self.respond(serialize(report_instance, request.user, UserReportWithGroupSerializer(
             environment_func=self._get_environment_func(
                 request, project.organization_id)
         )))
 
-    def find_event_user(self, report):
+    def find_event_user(self, report_data):
         try:
             event = Event.objects.get(
-                group_id=report.group_id,
-                event_id=report.event_id,
+                group_id=report_data.get('group_id'),
+                event_id=report_data['event_id'],
             )
         except Event.DoesNotExist:
-            if not report.email:
+            if not report_data.get('email'):
                 return None
             try:
                 return EventUser.objects.filter(
-                    project_id=report.project_id,
-                    email=report.email,
+                    project_id=report_data['project'].id,
+                    email=report_data['email'],
                 )[0]
             except IndexError:
                 return None
@@ -227,7 +228,7 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
 
         try:
             return EventUser.for_tags(
-                project_id=report.project_id,
+                project_id=report_data['project'].id,
                 values=[tag],
             )[tag]
         except KeyError:
diff --git a/src/sentry/api/endpoints/prompts_activity.py b/src/sentry/api/endpoints/prompts_activity.py
index df0a2b1477..33a24d5d7f 100644
--- a/src/sentry/api/endpoints/prompts_activity.py
+++ b/src/sentry/api/endpoints/prompts_activity.py
@@ -27,12 +27,12 @@ class PromptsActivitySerializer(serializers.Serializer):
         required=True,
     )
 
-    def validate_feature(self, attrs, source):
-        if attrs[source] is None:
+    def validate_feature(self, value):
+        if value is None:
             raise serializers.ValidationError('Must specify feature name')
-        if attrs[source] not in PROMPTS:
+        if value not in PROMPTS:
             raise serializers.ValidationError('Not a valid feature prompt')
-        return attrs
+        return value
 
 
 class PromptsActivityEndpoint(Endpoint):
@@ -69,7 +69,7 @@ class PromptsActivityEndpoint(Endpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        serialized = serializer.object
+        serialized = serializer.validated_data
         feature = serialized['feature']
         status = serialized['status']
 
diff --git a/src/sentry/api/endpoints/release_deploys.py b/src/sentry/api/endpoints/release_deploys.py
index b8a030170d..6b5f753026 100644
--- a/src/sentry/api/endpoints/release_deploys.py
+++ b/src/sentry/api/endpoints/release_deploys.py
@@ -16,17 +16,16 @@ from sentry.signals import deploy_created
 
 
 class DeploySerializer(serializers.Serializer):
-    name = serializers.CharField(max_length=64, required=False)
+    name = serializers.CharField(max_length=64, required=False, allow_blank=True, allow_null=True)
     environment = serializers.CharField(max_length=64)
-    url = serializers.URLField(required=False)
-    dateStarted = serializers.DateTimeField(required=False)
-    dateFinished = serializers.DateTimeField(required=False)
+    url = serializers.URLField(required=False, allow_blank=True, allow_null=True)
+    dateStarted = serializers.DateTimeField(required=False, allow_null=True)
+    dateFinished = serializers.DateTimeField(required=False, allow_null=True)
 
-    def validate_environment(self, attrs, source):
-        value = attrs[source]
+    def validate_environment(self, value):
         if not Environment.is_valid_name(value):
             raise serializers.ValidationError('Invalid value for environment')
-        return attrs
+        return value
 
 
 class ReleaseDeploysEndpoint(OrganizationReleasesBaseEndpoint):
@@ -99,7 +98,7 @@ class ReleaseDeploysEndpoint(OrganizationReleasesBaseEndpoint):
 
         if serializer.is_valid():
             projects = list(release.projects.all())
-            result = serializer.object
+            result = serializer.validated_data
 
             env = Environment.objects.get_or_create(
                 name=result['environment'],
diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index e0121b212b..80e37eb592 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -26,37 +26,29 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
 
             return Response(status=404)
 
-        data = {
-            'user': request.user,
-            'sentry_app': sentry_app,
-            'name': request.json_body.get('name'),
-            'status': request.json_body.get('status'),
-            'author': request.json_body.get('author'),
-            'webhookUrl': request.json_body.get('webhookUrl'),
-            'redirectUrl': request.json_body.get('redirectUrl'),
-            'isAlertable': request.json_body.get('isAlertable'),
-            'scopes': request.json_body.get('scopes'),
-            'events': request.json_body.get('events'),
-            'schema': request.json_body.get('schema'),
-            'overview': request.json_body.get('overview'),
-        }
-
         serializer = SentryAppSerializer(
-            instance=sentry_app,
-            data=data,
+            sentry_app,
+            data=request.data,
             partial=True,
         )
 
         if serializer.is_valid():
-            result = serializer.object
-
-            data['redirect_url'] = data['redirectUrl']
-            data['webhook_url'] = data['webhookUrl']
-            data['is_alertable'] = data['isAlertable']
-            data['scopes'] = result.get('scopes')
-            data['events'] = result.get('events')
+            result = serializer.validated_data
 
-            updated_app = Updater.run(**data)
+            updated_app = Updater.run(
+                user=request.user,
+                sentry_app=sentry_app,
+                name=result.get('name'),
+                author=result.get('author'),
+                status=result.get('status'),
+                webhook_url=result.get('webhookUrl'),
+                redirect_url=result.get('redirectUrl'),
+                is_alertable=result.get('isAlertable'),
+                scopes=result.get('scopes'),
+                events=result.get('events'),
+                schema=result.get('schema'),
+                overview=result.get('overview'),
+            )
 
             return Response(serialize(updated_app, request.user))
         return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/sentry_app_installations.py b/src/sentry/api/endpoints/sentry_app_installations.py
index 9f26aba775..48b65cf0f2 100644
--- a/src/sentry/api/endpoints/sentry_app_installations.py
+++ b/src/sentry/api/endpoints/sentry_app_installations.py
@@ -51,7 +51,7 @@ class SentryAppInstallationsEndpoint(SentryAppInstallationsBaseEndpoint):
 
         install = Creator.run(
             organization=organization,
-            slug=serializer.object.get('slug'),
+            slug=serializer.validated_data.get('slug'),
             user=request.user,
             request=request,
         )
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index 4e2a34ea07..10f039b37d 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -40,15 +40,14 @@ class TeamSerializer(serializers.ModelSerializer):
         model = Team
         fields = ('name', 'slug')
 
-    def validate_slug(self, attrs, source):
-        value = attrs[source]
+    def validate_slug(self, value):
         qs = Team.objects.filter(
             slug=value,
-            organization=self.object.organization,
-        ).exclude(id=self.object.id)
+            organization=self.instance.organization,
+        ).exclude(id=self.instance.id)
         if qs.exists():
             raise serializers.ValidationError('The slug "%s" is already in use.' % (value, ))
-        return attrs
+        return value
 
 
 class TeamDetailsEndpoint(TeamEndpoint):
diff --git a/src/sentry/api/endpoints/team_projects.py b/src/sentry/api/endpoints/team_projects.py
index 827bce3449..76ee922919 100644
--- a/src/sentry/api/endpoints/team_projects.py
+++ b/src/sentry/api/endpoints/team_projects.py
@@ -33,8 +33,8 @@ def create_project_scenario(runner):
 
 class ProjectSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=64, required=True)
-    slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50, required=False)
-    platform = serializers.CharField(required=False)
+    slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50, required=False, allow_null=True)
+    platform = serializers.CharField(required=False, allow_blank=True, allow_null=True)
 
 
 # While currently the UI suggests teams are a parent of a project, in reality
@@ -131,7 +131,7 @@ class TeamProjectsEndpoint(TeamEndpoint, EnvironmentMixin):
         serializer = ProjectSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            result = serializer.object
+            result = serializer.validated_data
 
             try:
                 with transaction.atomic():
diff --git a/src/sentry/api/endpoints/user_appearance.py b/src/sentry/api/endpoints/user_appearance.py
index ad5ce0ca8a..2ba552340e 100644
--- a/src/sentry/api/endpoints/user_appearance.py
+++ b/src/sentry/api/endpoints/user_appearance.py
@@ -79,7 +79,7 @@ class UserAppearanceEndpoint(UserEndpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        result = serializer.object
+        result = serializer.validated_data
 
         # map API keys to keys in model
         key_map = {
diff --git a/src/sentry/api/endpoints/user_authenticator_enroll.py b/src/sentry/api/endpoints/user_authenticator_enroll.py
index 477108443f..d93793be5f 100644
--- a/src/sentry/api/endpoints/user_authenticator_enroll.py
+++ b/src/sentry/api/endpoints/user_authenticator_enroll.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from rest_framework import serializers, status
+from rest_framework.fields import SkipField
 from rest_framework.response import Response
 
 import logging
@@ -23,12 +24,8 @@ SEND_SMS_ERR = {'details': 'Error sending SMS'}
 class BaseRestSerializer(serializers.Serializer):
     # Fields needed to accept an org invite
     # pending 2FA enrollment
-    memberId = serializers.CharField(
-        required=False
-    )
-    token = serializers.CharField(
-        required=False,
-    )
+    memberId = serializers.CharField(required=False, allow_null=True, allow_blank=True)
+    token = serializers.CharField(required=False, allow_null=True, allow_blank=True)
 
 
 class TotpRestSerializer(BaseRestSerializer):
@@ -51,6 +48,8 @@ class SmsRestSerializer(BaseRestSerializer):
         label='Authenticator code',
         help_text='Code from authenticator',
         required=False,
+        allow_null=True,
+        allow_blank=True,
         max_length=20
     )
 
@@ -59,6 +58,8 @@ class U2fRestSerializer(BaseRestSerializer):
     deviceName = serializers.CharField(
         label='Device name',
         required=False,
+        allow_null=True,
+        allow_blank=True,
         max_length=60,
         default=lambda: petname.Generate(2, ' ', letters=10).title(),
     )
@@ -82,11 +83,24 @@ serializer_map = {
 def get_serializer_field_metadata(serializer, fields=None):
     """Returns field metadata for serializer"""
     meta = []
-    for field in serializer.base_fields:
-        if (fields is None or field in fields) and field not in hidden_fields:
-            serialized_field = dict(serializer.base_fields[field].metadata())
-            serialized_field['name'] = field
-            serialized_field['defaultValue'] = serializer.base_fields[field].get_default_value()
+    for field_name, field in serializer.fields.items():
+        if (fields is None or field_name in fields) and field_name not in hidden_fields:
+            try:
+                default = field.get_default()
+            except SkipField:
+                default = None
+            serialized_field = {
+                'name': field_name,
+                'defaultValue': default,
+                'read_only': field.read_only,
+                'required': field.required,
+                'type': 'string',
+            }
+            if hasattr(field, 'max_length') and field.max_length:
+                serialized_field['max_length'] = field.max_length
+            if field.label:
+                serialized_field['label'] = field.label
+
             meta.append(serialized_field)
 
     return meta
@@ -117,7 +131,7 @@ class UserAuthenticatorEnrollEndpoint(UserEndpoint):
         # - display configuration form
         response = serialize(interface)
         response['form'] = get_serializer_field_metadata(
-            serializer_map[interface_id]
+            serializer_map[interface_id]()
         )
 
         # U2fInterface has no 'secret' attribute
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index 8c2b079fef..837994012a 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -53,26 +53,25 @@ class UserOptionsSerializer(serializers.Serializer):
 
 
 class BaseUserSerializer(serializers.ModelSerializer):
-    def validate_username(self, attrs, source):
-        value = attrs[source]
-        if User.objects.filter(username__iexact=value).exclude(id=self.object.id).exists():
+    def validate_username(self, value):
+        if User.objects.filter(username__iexact=value).exclude(id=self.instance.id).exists():
             raise serializers.ValidationError('That username is already in use.')
-        return attrs
+        return value
 
     def validate(self, attrs):
         attrs = super(BaseUserSerializer, self).validate(attrs)
 
-        if self.object.email == self.object.username:
-            if attrs.get('username', self.object.email) != self.object.email:
+        if self.instance.email == self.instance.username:
+            if attrs.get('username', self.instance.email) != self.instance.email:
                 # ... this probably needs to handle newsletters and such?
                 attrs.setdefault('email', attrs['username'])
 
         return attrs
 
-    def restore_object(self, attrs, instance=None):
-        instance = super(BaseUserSerializer, self).restore_object(attrs, instance)
-        instance.is_active = attrs.get('isActive', instance.is_active)
-        return instance
+    def update(self, instance, validated_data):
+        if 'isActive' not in validated_data:
+            validated_data['isActive'] = instance.is_active
+        return super(BaseUserSerializer, self).update(instance, validated_data)
 
 
 class UserSerializer(BaseUserSerializer):
@@ -151,7 +150,7 @@ class UserDetailsEndpoint(UserEndpoint):
             'clock24Hours': 'clock_24_hours',
         }
 
-        options_result = serializer_options.object
+        options_result = serializer_options.validated_data
 
         for key in key_map:
             if key in options_result:
@@ -196,7 +195,7 @@ class UserDetailsEndpoint(UserEndpoint):
             })
 
         avail_org_slugs = set([o['organization'].slug for o in org_results])
-        orgs_to_remove = set(serializer.object.get('organizations')).intersection(avail_org_slugs)
+        orgs_to_remove = set(serializer.validated_data.get('organizations')).intersection(avail_org_slugs)
 
         for result in org_results:
             if result['single_owner']:
diff --git a/src/sentry/api/endpoints/user_emails.py b/src/sentry/api/endpoints/user_emails.py
index 50706955aa..5b2c48b2dd 100644
--- a/src/sentry/api/endpoints/user_emails.py
+++ b/src/sentry/api/endpoints/user_emails.py
@@ -81,7 +81,7 @@ class UserEmailsEndpoint(UserEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.object
+        result = validator.validated_data
         email = result['email'].lower().strip()
 
         try:
@@ -119,7 +119,7 @@ class UserEmailsEndpoint(UserEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.object
+        result = validator.validated_data
         old_email = user.email.lower()
         new_email = result['email'].lower()
 
@@ -209,7 +209,7 @@ class UserEmailsEndpoint(UserEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        email = validator.object['email']
+        email = validator.validated_data['email']
         primary_email = UserEmail.get_primary_email(user)
         del_email = UserEmail.objects.filter(user=user, email__iexact=email).first()
 
diff --git a/src/sentry/api/endpoints/user_emails_confirm.py b/src/sentry/api/endpoints/user_emails_confirm.py
index a01eeba735..7a1353d5fe 100644
--- a/src/sentry/api/endpoints/user_emails_confirm.py
+++ b/src/sentry/api/endpoints/user_emails_confirm.py
@@ -61,7 +61,7 @@ class UserEmailsConfirmEndpoint(UserEndpoint):
         # If email is specified then try to only send one confirmation email
         try:
             email_to_send = UserEmail.objects.get(
-                user=user, email=serializer.object['email'].lower().strip())
+                user=user, email=serializer.validated_data['email'].lower().strip())
         except UserEmail.DoesNotExist:
             return InvalidEmailResponse()
         else:
diff --git a/src/sentry/api/endpoints/user_notification_details.py b/src/sentry/api/endpoints/user_notification_details.py
index 3183437bc3..dd1046cc50 100644
--- a/src/sentry/api/endpoints/user_notification_details.py
+++ b/src/sentry/api/endpoints/user_notification_details.py
@@ -5,9 +5,10 @@ import six
 from collections import defaultdict
 
 from sentry.api.bases.user import UserEndpoint
+from sentry.api.fields.empty_integer import EmptyIntegerField
+from sentry.api.serializers import serialize, Serializer
 from sentry.models import UserOption, UserOptionValue
 
-from sentry.api.serializers import serialize, Serializer
 
 from rest_framework.response import Response
 
@@ -75,11 +76,21 @@ class UserNotificationsSerializer(Serializer):
 
 
 class UserNotificationDetailsSerializer(serializers.Serializer):
-    deployNotifications = serializers.IntegerField(required=False, min_value=2, max_value=4)
+    deployNotifications = EmptyIntegerField(
+        required=False,
+        min_value=2,
+        max_value=4,
+        allow_null=True,
+    )
     personalActivityNotifications = serializers.BooleanField(required=False)
     selfAssignOnResolve = serializers.BooleanField(required=False)
     subscribeByDefault = serializers.BooleanField(required=False)
-    workflowNotifications = serializers.IntegerField(required=False, min_value=0, max_value=2)
+    workflowNotifications = EmptyIntegerField(
+        required=False,
+        min_value=0,
+        max_value=2,
+        allow_null=True,
+    )
 
 
 class UserNotificationDetailsEndpoint(UserEndpoint):
@@ -91,9 +102,9 @@ class UserNotificationDetailsEndpoint(UserEndpoint):
         serializer = UserNotificationDetailsSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            for key in serializer.object:
+            for key in serializer.validated_data:
                 db_key = USER_OPTION_SETTINGS[key]['key']
-                val = six.text_type(int(serializer.object[key]))
+                val = six.text_type(int(serializer.validated_data[key]))
                 (uo, created) = UserOption.objects.get_or_create(
                     user=user, key=db_key, project=None, organization=None)
                 uo.update(value=val)
diff --git a/src/sentry/api/endpoints/user_password.py b/src/sentry/api/endpoints/user_password.py
index edc95c5afb..62be898ca6 100644
--- a/src/sentry/api/endpoints/user_password.py
+++ b/src/sentry/api/endpoints/user_password.py
@@ -6,34 +6,30 @@ from rest_framework.response import Response
 
 from sentry.api.bases.user import UserEndpoint
 from sentry.auth import password_validation
-from sentry.models import User
 from sentry.security import capture_security_activity
 
 
-class UserPasswordSerializer(serializers.ModelSerializer):
+class UserPasswordSerializer(serializers.Serializer):
     password = serializers.CharField(required=True)
     passwordNew = serializers.CharField(required=True)
     passwordVerify = serializers.CharField(required=True)
 
-    class Meta:
-        model = User
-        fields = ('password', 'passwordNew', 'passwordVerify', )
-
-    def validate_password(self, attrs, source):
-        if self.context['has_usable_password'] and not self.object.check_password(
-                attrs.get('password')):
+    def validate_password(self, value):
+        user = self.context['user']
+        if user.has_usable_password and not user.check_password(value):
             raise serializers.ValidationError('The password you entered is not correct.')
-        return attrs
+        return value
 
-    def validate_passwordNew(self, attrs, source):
+    def validate_passwordNew(self, value):
         # this will raise a ValidationError if password is invalid
-        password_validation.validate_password(attrs[source])
+        password_validation.validate_password(value)
+        user = self.context['user']
 
-        if self.context['is_managed']:
+        if user.is_managed:
             raise serializers.ValidationError(
                 'This account is managed and the password cannot be changed via Sentry.')
 
-        return attrs
+        return value
 
     def validate(self, attrs):
         attrs = super(UserPasswordSerializer, self).validate(attrs)
@@ -51,21 +47,17 @@ class UserPasswordEndpoint(UserEndpoint):
         # pass some context to serializer otherwise when we create a new serializer instance,
         # user.password gets set to new plaintext password from request and
         # `user.has_usable_password` becomes False
-        serializer = UserPasswordSerializer(user, data=request.DATA, context={
-            'is_managed': user.is_managed,
-            'has_usable_password': user.has_usable_password(),
-        })
+        serializer = UserPasswordSerializer(data=request.data, context={'user': user})
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
-        result = serializer.object
+        result = serializer.validated_data
 
-        user.set_password(result.passwordNew)
+        user.set_password(result['passwordNew'])
         user.refresh_session_nonce(request._request)
         user.clear_lost_passwords()
-
-        user = serializer.save()
+        user.save()
 
         capture_security_activity(
             account=user,
diff --git a/src/sentry/api/endpoints/user_subscriptions.py b/src/sentry/api/endpoints/user_subscriptions.py
index b1a2dfd25e..dd6926965c 100644
--- a/src/sentry/api/endpoints/user_subscriptions.py
+++ b/src/sentry/api/endpoints/user_subscriptions.py
@@ -60,7 +60,7 @@ class UserSubscriptionsEndpoint(UserEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.object
+        result = validator.validated_data
         email = UserEmail.get_primary_email(user)
 
         kwargs = {
@@ -90,7 +90,7 @@ class UserSubscriptionsEndpoint(UserEndpoint):
         if not validator.is_valid():
             return self.respond(validator.errors, status=400)
 
-        result = validator.object
+        result = validator.validated_data
         email = UserEmail.get_primary_email(user)
 
         kwargs = {
diff --git a/src/sentry/api/exceptions.py b/src/sentry/api/exceptions.py
index c50cf270cf..1f068f3e09 100644
--- a/src/sentry/api/exceptions.py
+++ b/src/sentry/api/exceptions.py
@@ -15,6 +15,10 @@ class SentryAPIException(APIException):
     message = ''
 
     def __init__(self, code=None, message=None, detail=None, **kwargs):
+        # Note that we no longer call the base `__init__` here. This is because
+        # DRF now forces all detail messages that subclass `APIException` to a
+        # string, which breaks our format.
+        # https://www.django-rest-framework.org/community/3.0-announcement/#miscellaneous-notes
         if detail is None:
             detail = {
                 'code': code or self.code,
@@ -22,7 +26,7 @@ class SentryAPIException(APIException):
                 'extra': kwargs,
             }
 
-        super(SentryAPIException, self).__init__(detail=detail)
+        self.detail = {'detail': detail}
 
 
 class ProjectMoved(SentryAPIException):
@@ -64,7 +68,7 @@ class SudoRequired(SentryAPIException):
         super(SudoRequired, self).__init__(username=user.username)
 
 
-class TwoFactorRequired(APIException):
+class TwoFactorRequired(SentryAPIException):
     status_code = status.HTTP_401_UNAUTHORIZED
     code = '2fa-required'
     message = 'Organization requires two-factor authentication to be enabled'
diff --git a/src/sentry/api/fields/actor.py b/src/sentry/api/fields/actor.py
index ff9fac9fbf..df73b39e70 100644
--- a/src/sentry/api/fields/actor.py
+++ b/src/sentry/api/fields/actor.py
@@ -74,11 +74,11 @@ class Actor(namedtuple('Actor', 'id type')):
         }
 
 
-class ActorField(serializers.WritableField):
-    def to_native(self, obj):
-        return obj.get_actor_id()
+class ActorField(serializers.Field):
+    def to_representation(self, value):
+        return value.get_actor_id()
 
-    def from_native(self, data):
+    def to_internal_value(self, data):
         if not data:
             return None
 
diff --git a/src/sentry/api/fields/avatar.py b/src/sentry/api/fields/avatar.py
index a7ce88817c..51d9bb454c 100644
--- a/src/sentry/api/fields/avatar.py
+++ b/src/sentry/api/fields/avatar.py
@@ -3,22 +3,23 @@ from __future__ import absolute_import
 from base64 import b64decode
 from django.conf import settings
 from rest_framework import serializers
-from rest_framework.exceptions import APIException
 from PIL import Image
 from six import BytesIO
 
+from sentry.api.exceptions import SentryAPIException
+
 MIN_DIMENSION = 256
 
 MAX_DIMENSION = 1024
 
 
-class ImageTooLarge(APIException):
+class ImageTooLarge(SentryAPIException):
     status_code = 413
     default_detail = 'Image too large'
     default_code = 'too_large'
 
 
-class AvatarField(serializers.WritableField):
+class AvatarField(serializers.Field):
     def __init__(
         self,
         max_size=settings.SENTRY_MAX_AVATAR_SIZE,
@@ -31,12 +32,12 @@ class AvatarField(serializers.WritableField):
         self.min_dimension = min_dimension
         self.max_dimension = max_dimension
 
-    def to_native(self, obj):
-        if not obj:
+    def to_representation(self, value):
+        if not value:
             return ''
-        return obj.getvalue()
+        return value.getvalue()
 
-    def from_native(self, data):
+    def to_internal_value(self, data):
         if not data:
             return None
         data = b64decode(data)
diff --git a/src/sentry/api/fields/empty_decimal.py b/src/sentry/api/fields/empty_decimal.py
new file mode 100644
index 0000000000..7f32a53d9d
--- /dev/null
+++ b/src/sentry/api/fields/empty_decimal.py
@@ -0,0 +1,22 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.fields import empty
+
+
+class EmptyDecimalField(serializers.DecimalField):
+    """
+    DRF used to translate a blank field as a null decimal, but after 3.x it
+    doesn't accept an empty string as a value. We rely on this behaviour in some
+    cases, so this restores it.
+    """
+
+    def to_internal_value(self, data):
+        if data == '':
+            return None
+        return super(EmptyDecimalField, self).to_internal_value(data)
+
+    def run_validation(self, data=empty):
+        if data == '':
+            return None
+        return super(EmptyDecimalField, self).run_validation(data)
diff --git a/src/sentry/api/fields/empty_integer.py b/src/sentry/api/fields/empty_integer.py
new file mode 100644
index 0000000000..4b75357593
--- /dev/null
+++ b/src/sentry/api/fields/empty_integer.py
@@ -0,0 +1,22 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.fields import empty
+
+
+class EmptyIntegerField(serializers.IntegerField):
+    """
+    DRF used to translate a blank field as a null integer, but after 3.x it
+    doesn't accept an empty string as a value. We rely on this behaviour in some
+    cases, so this restores it.
+    """
+
+    def to_internal_value(self, data):
+        if data == '':
+            return None
+        return super(EmptyIntegerField, self).to_internal_value(data)
+
+    def run_validation(self, data=empty):
+        if data == '':
+            return None
+        return super(EmptyIntegerField, self).run_validation(data)
diff --git a/src/sentry/api/fields/multiplechoice.py b/src/sentry/api/fields/multiplechoice.py
index 737d372a1a..3e0c2ab60c 100644
--- a/src/sentry/api/fields/multiplechoice.py
+++ b/src/sentry/api/fields/multiplechoice.py
@@ -3,14 +3,21 @@ from __future__ import absolute_import
 from rest_framework import serializers
 
 
-class MultipleChoiceField(serializers.WritableField):
+class MultipleChoiceField(serializers.Field):
     error_messages = {
         'invalid_choice':
         ('Select a valid choice. {value} is not one of '
          'the available choices.'),
     }
 
-    def from_native(self, data):
+    def __init__(self, choices=None, *args, **kwargs):
+        self.choices = set(choices or ())
+        super(MultipleChoiceField, self).__init__(*args, **kwargs)
+
+    def to_representation(self, value):
+        return value
+
+    def to_internal_value(self, data):
         if isinstance(data, list):
             for item in data:
                 if item not in self.choices:
@@ -21,10 +28,3 @@ class MultipleChoiceField(serializers.WritableField):
                     )
             return data
         raise serializers.ValidationError('Please provide a valid list.')
-
-    def to_native(self, value):
-        return value
-
-    def __init__(self, choices=None, *args, **kwargs):
-        self.choices = set(choices or ())
-        super(MultipleChoiceField, self).__init__(*args, **kwargs)
diff --git a/src/sentry/api/fields/user.py b/src/sentry/api/fields/user.py
index 4a7bdeb1f0..89f1664987 100644
--- a/src/sentry/api/fields/user.py
+++ b/src/sentry/api/fields/user.py
@@ -8,11 +8,11 @@ from sentry.models import User
 from sentry.utils.auth import find_users
 
 
-class UserField(serializers.WritableField):
-    def to_native(self, obj):
-        return obj.username
+class UserField(serializers.Field):
+    def to_representation(self, value):
+        return value.username
 
-    def from_native(self, data):
+    def to_internal_value(self, data):
         if not data:
             return None
 
diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index deb2432321..1cc1d87faa 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -149,11 +149,10 @@ class InCommitValidator(serializers.Serializer):
     commit = serializers.CharField(required=True)
     repository = serializers.CharField(required=True)
 
-    def validate_repository(self, attrs, source):
-        value = attrs[source]
+    def validate_repository(self, value):
         project = self.context['project']
         try:
-            attrs[source] = Repository.objects.get(
+            value = Repository.objects.get(
                 organization_id=project.organization_id,
                 name=value,
             )
@@ -161,7 +160,7 @@ class InCommitValidator(serializers.Serializer):
             raise serializers.ValidationError(
                 'Unable to find the given repository.'
             )
-        return attrs
+        return value
 
     def validate(self, attrs):
         attrs = super(InCommitValidator, self).validate(attrs)
@@ -199,12 +198,11 @@ class StatusDetailsValidator(serializers.Serializer):
     # in minutes, max of one week
     ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)
 
-    def validate_inRelease(self, attrs, source):
-        value = attrs[source]
+    def validate_inRelease(self, value):
         project = self.context['project']
         if value == 'latest':
             try:
-                attrs[source] = Release.objects.filter(
+                value = Release.objects.filter(
                     projects=project,
                     organization_id=project.organization_id,
                 ).extra(select={
@@ -216,7 +214,7 @@ class StatusDetailsValidator(serializers.Serializer):
                 )
         else:
             try:
-                attrs[source] = Release.objects.get(
+                value = Release.objects.get(
                     projects=project,
                     organization_id=project.organization_id,
                     version=value,
@@ -225,12 +223,12 @@ class StatusDetailsValidator(serializers.Serializer):
                 raise serializers.ValidationError(
                     'Unable to find a release with the given version.'
                 )
-        return attrs
+        return value
 
-    def validate_inNextRelease(self, attrs, source):
+    def validate_inNextRelease(self, value):
         project = self.context['project']
         try:
-            attrs[source] = Release.objects.filter(
+            value = Release.objects.filter(
                 projects=project,
                 organization_id=project.organization_id,
             ).extra(select={
@@ -240,7 +238,7 @@ class StatusDetailsValidator(serializers.Serializer):
             raise serializers.ValidationError(
                 'No release data present in the system to form a basis for \'Next Release\''
             )
-        return attrs
+        return value
 
 
 class GroupValidator(serializers.Serializer):
@@ -265,8 +263,7 @@ class GroupValidator(serializers.Serializer):
     # TODO(dcramer): remove in 9.0
     snoozeDuration = serializers.IntegerField()
 
-    def validate_assignedTo(self, attrs, source):
-        value = attrs[source]
+    def validate_assignedTo(self, value):
         if value and value.type is User and not self.context['project'].member_set.filter(
                 user_id=value.id).exists():
             raise serializers.ValidationError(
@@ -277,7 +274,7 @@ class GroupValidator(serializers.Serializer):
             raise serializers.ValidationError(
                 'Cannot assign to a team without access to the project')
 
-        return attrs
+        return value
 
     def validate(self, attrs):
         attrs = super(GroupValidator, self).validate(attrs)
@@ -472,7 +469,7 @@ def update_groups(request, projects, organization_id, search_fn):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-    result = dict(serializer.object)
+    result = dict(serializer.validated_data)
 
     # so we won't have to requery for each group
     project_lookup = {p.id: p for p in projects}
diff --git a/src/sentry/api/serializers/rest_framework/commit.py b/src/sentry/api/serializers/rest_framework/commit.py
index 2d78c21b38..c8f17f7b58 100644
--- a/src/sentry/api/serializers/rest_framework/commit.py
+++ b/src/sentry/api/serializers/rest_framework/commit.py
@@ -9,20 +9,34 @@ class CommitPatchSetSerializer(serializers.Serializer):
     path = serializers.CharField(max_length=255)
     type = serializers.CharField(max_length=1)
 
-    def validate_type(self, attrs, source):
-        value = attrs[source]
+    def validate_type(self, value):
         if not CommitFileChange.is_valid_type(value):
             raise serializers.ValidationError('Commit patch_set type %s is not supported.' % value)
-        return attrs
+        return value
 
 
 class CommitSerializer(serializers.Serializer):
     id = serializers.CharField(max_length=64)
-    repository = serializers.CharField(max_length=64, required=False)
-    message = serializers.CharField(required=False)
-    author_name = serializers.CharField(max_length=128, required=False)
-    author_email = serializers.EmailField(max_length=75, required=False)
-    timestamp = serializers.DateTimeField(required=False)
+    repository = serializers.CharField(
+        max_length=64,
+        required=False,
+        allow_null=True,
+        allow_blank=True,
+    )
+    message = serializers.CharField(required=False, allow_null=True, allow_blank=True)
+    author_name = serializers.CharField(
+        max_length=128,
+        required=False,
+        allow_null=True,
+        allow_blank=True,
+    )
+    author_email = serializers.EmailField(
+        max_length=75,
+        required=False,
+        allow_null=True,
+        allow_blank=True,
+    )
+    timestamp = serializers.DateTimeField(required=False, allow_null=True)
     patch_set = ListField(
         child=CommitPatchSetSerializer(required=False),
         required=False,
diff --git a/src/sentry/api/serializers/rest_framework/group_notes.py b/src/sentry/api/serializers/rest_framework/group_notes.py
index 454682331a..b88ec3df53 100644
--- a/src/sentry/api/serializers/rest_framework/group_notes.py
+++ b/src/sentry/api/serializers/rest_framework/group_notes.py
@@ -10,4 +10,4 @@ from sentry.api.serializers.rest_framework.mentions import MentionsMixin
 class NoteSerializer(serializers.Serializer, MentionsMixin):
     text = serializers.CharField()
     mentions = ListField(child=ActorField(), required=False)
-    external_id = serializers.CharField(allow_none=True, required=False)
+    external_id = serializers.CharField(allow_null=True, required=False)
diff --git a/src/sentry/api/serializers/rest_framework/json.py b/src/sentry/api/serializers/rest_framework/json.py
index 924e7206f6..54c3df9b0f 100644
--- a/src/sentry/api/serializers/rest_framework/json.py
+++ b/src/sentry/api/serializers/rest_framework/json.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
 from django.utils.translation import ugettext_lazy as _
-from rest_framework.serializers import WritableField, ValidationError
+from rest_framework.serializers import (
+    Field,
+    ValidationError,
+)
 from sentry.utils import json
 
 # JSONField taken from Django rest framework version 3.9.0
@@ -10,12 +13,12 @@ from sentry.utils import json
 # for more information
 
 
-class JSONField(WritableField):
+class JSONField(Field):
     default_error_messages = {
         'invalid': _('Value must be valid JSON.')
     }
 
-    def from_native(self, data):
+    def to_internal_value(self, data):
         try:
             json.dumps(data)
         except (TypeError, ValueError):
diff --git a/src/sentry/api/serializers/rest_framework/list.py b/src/sentry/api/serializers/rest_framework/list.py
index c538e46aa0..daf0c3d2a5 100644
--- a/src/sentry/api/serializers/rest_framework/list.py
+++ b/src/sentry/api/serializers/rest_framework/list.py
@@ -1,85 +1,10 @@
 from __future__ import absolute_import
 
-import six
+from rest_framework.serializers import ListField  # NOQA
 
-from collections import defaultdict
-from rest_framework.serializers import WritableField, ValidationError
 
-
-class ListField(WritableField):
-    def __init__(self, child=None, allow_null=True, **kwargs):
-        if child:
-            assert isinstance(child, WritableField)
-        self.child = child
-        self.allow_null = allow_null
-        super(ListField, self).__init__(**kwargs)
-        self._child_errors = defaultdict(list)
-
-    def initialize(self, parent, field_name):
-        super(ListField, self).initialize(parent, field_name)
-        if self.child:
-            self.child._errors = []
-            self._child_errors = defaultdict(list)
-            self.child.initialize(parent, field_name)
-
-    def to_native(self, value):
-        return value
-
-    def from_native(self, value):
-        if value is None:
-            return None
-
-        if not value:
-            return []
-
-        if not isinstance(value, list):
-            msg = 'Incorrect type. Expected a list, but got %s'
-            raise ValidationError(msg % type(value).__name__)
-
-        if self.child is None:
-            return value
-
-        children = []
-        for item in value:
-            children.append(self.child.from_native(item))
-            self.add_child_errors()
-        return children
-
-    def format_child_errors(self):
-        errors = []
-        for k, v in six.iteritems(self._child_errors):
-            errors.append('%s: %s' % (k, v[0]))
-        return ', '.join(errors)
-
-    def validate(self, value):
-        # Allow empty lists when required=True unless child is also marked as required
-        if (value is None and self.required) or \
-                (not value and self.required and self.child and self.child.required):
-            raise ValidationError(self.error_messages['required'])
-
-        if not isinstance(value, list):
-            msg = 'Incorrect type. Expected a list, but got %s'
-            raise ValidationError(msg % type(value).__name__)
-
-        if self.child:
-            # the `self.child.from_native` call might have already
-            # validated/changed data so check for child errors first
-            if self._child_errors:
-                raise ValidationError(self.format_child_errors())
-            for item in value:
-                if item is None and not self.allow_null:
-                    raise ValidationError('Incorrect type. Expected value, but got null')
-                self.child.validate(item)
-                self.add_child_errors()
-
-    def run_validators(self, value):
-        if self.child:
-            for item in value:
-                self.child.run_validators(item)
-                self.add_child_errors()
-
-    def add_child_errors(self):
-        if not isinstance(self.child._errors, dict):
-            return
-        for k, v in six.iteritems(self.child._errors):
-            self._child_errors[k] += v
+class EmptyListField(ListField):
+    def to_internal_value(self, data):
+        if data == '':
+            return ''
+        return super(EmptyListField, self).to_internal_value(data)
diff --git a/src/sentry/api/serializers/rest_framework/mentions.py b/src/sentry/api/serializers/rest_framework/mentions.py
index 1378a052e6..61c1e9baa0 100644
--- a/src/sentry/api/serializers/rest_framework/mentions.py
+++ b/src/sentry/api/serializers/rest_framework/mentions.py
@@ -51,10 +51,9 @@ def seperate_resolved_actors(actors):
 
 
 class MentionsMixin(object):
-    def validate_mentions(self, attrs, source):
-        if source in attrs and 'projects' in self.context:
+    def validate_mentions(self, mentions):
+        if mentions and 'projects' in self.context:
 
-            mentions = attrs[source]
             seperated_actors = seperate_actors(mentions)
             # Validate that all mentioned users exist and are on the project.
             users = seperated_actors['users']
@@ -79,4 +78,4 @@ class MentionsMixin(object):
                 raise serializers.ValidationError(
                     'Mentioned team not found or not associated with project')
 
-        return attrs
+        return mentions
diff --git a/src/sentry/api/serializers/rest_framework/origin.py b/src/sentry/api/serializers/rest_framework/origin.py
index 39105c4de1..165699f9c0 100644
--- a/src/sentry/api/serializers/rest_framework/origin.py
+++ b/src/sentry/api/serializers/rest_framework/origin.py
@@ -9,8 +9,8 @@ class OriginField(serializers.CharField):
     # Special case origins that don't fit the normal regex pattern, but are valid
     WHITELIST_ORIGINS = ('*')
 
-    def from_native(self, data):
-        rv = super(OriginField, self).from_native(data)
+    def to_internal_value(self, data):
+        rv = super(OriginField, self).to_internal_value(data)
         if not rv:
             return
         if not self.is_valid_origin(rv):
diff --git a/src/sentry/api/serializers/rest_framework/project.py b/src/sentry/api/serializers/rest_framework/project.py
index 14fb7779cb..f3bc4b8362 100644
--- a/src/sentry/api/serializers/rest_framework/project.py
+++ b/src/sentry/api/serializers/rest_framework/project.py
@@ -7,11 +7,11 @@ from sentry.models import Project
 ValidationError = serializers.ValidationError
 
 
-class ProjectField(serializers.WritableField):
-    def to_native(self, obj):
-        return obj
+class ProjectField(serializers.Field):
+    def to_representation(self, value):
+        return value
 
-    def from_native(self, data):
+    def to_internal_value(self, data):
         try:
             project = Project.objects.get(
                 organization=self.context['organization'],
diff --git a/src/sentry/api/serializers/rest_framework/release.py b/src/sentry/api/serializers/rest_framework/release.py
index cba3fa3d57..b013c040ba 100644
--- a/src/sentry/api/serializers/rest_framework/release.py
+++ b/src/sentry/api/serializers/rest_framework/release.py
@@ -11,19 +11,27 @@ from sentry.models import Release
 class ReleaseHeadCommitSerializerDeprecated(serializers.Serializer):
     currentId = serializers.CharField(max_length=MAX_COMMIT_LENGTH)
     repository = serializers.CharField(max_length=64)
-    previousId = serializers.CharField(max_length=MAX_COMMIT_LENGTH, required=False)
+    previousId = serializers.CharField(
+        max_length=MAX_COMMIT_LENGTH,
+        required=False,
+        allow_null=True,
+    )
 
 
 class ReleaseHeadCommitSerializer(serializers.Serializer):
     commit = serializers.CharField()
     repository = serializers.CharField(max_length=200)
-    previousCommit = serializers.CharField(max_length=MAX_COMMIT_LENGTH, required=False)
-
-    def validate_commit(self, attrs, source):
+    previousCommit = serializers.CharField(
+        max_length=MAX_COMMIT_LENGTH,
+        required=False,
+        allow_null=True,
+        allow_blank=True,
+    )
+
+    def validate_commit(self, value):
         """
         Value can be either a single commit or a commit range (1a2b3c..6f5e4d)
         """
-        value = attrs[source]
 
         if COMMIT_RANGE_DELIMITER in value:
             startCommit, endCommit = value.split(COMMIT_RANGE_DELIMITER)
@@ -38,20 +46,25 @@ class ReleaseHeadCommitSerializer(serializers.Serializer):
                     'Start or end commit too long - max is %s chars each' %
                     MAX_COMMIT_LENGTH)
 
-            return attrs
+            return value
 
         if len(value) > MAX_COMMIT_LENGTH:
             raise serializers.ValidationError(
                 'Commit too long - max is %s chars' %
                 MAX_COMMIT_LENGTH)
 
-        return attrs
+        return value
 
 
 class ReleaseSerializer(serializers.Serializer):
-    ref = serializers.CharField(max_length=MAX_VERSION_LENGTH, required=False)
-    url = serializers.URLField(required=False)
-    dateReleased = serializers.DateTimeField(required=False)
+    ref = serializers.CharField(
+        max_length=MAX_VERSION_LENGTH,
+        required=False,
+        allow_null=True,
+        allow_blank=True,
+    )
+    url = serializers.URLField(required=False, allow_null=True, allow_blank=True)
+    dateReleased = serializers.DateTimeField(required=False, allow_null=True)
     commits = ListField(child=CommitSerializer(), required=False, allow_null=False)
 
 
@@ -59,8 +72,7 @@ class ReleaseWithVersionSerializer(ReleaseSerializer):
     version = serializers.CharField(max_length=MAX_VERSION_LENGTH, required=True)
     owner = UserField(required=False)
 
-    def validate_version(self, attrs, source):
-        value = attrs[source]
+    def validate_version(self, value):
         if not Release.is_valid_version(value):
             raise serializers.ValidationError('Release with name %s is not allowed' % value)
-        return attrs
+        return value
diff --git a/src/sentry/api/serializers/rest_framework/rule.py b/src/sentry/api/serializers/rest_framework/rule.py
index b6c4168ba0..c0978f1fb4 100644
--- a/src/sentry/api/serializers/rest_framework/rule.py
+++ b/src/sentry/api/serializers/rest_framework/rule.py
@@ -12,15 +12,15 @@ from . import ListField
 ValidationError = serializers.ValidationError
 
 
-class RuleNodeField(serializers.WritableField):
+class RuleNodeField(serializers.Field):
     def __init__(self, type):
         super(RuleNodeField, self).__init__()
         self.type_name = type
 
-    def to_native(self, obj):
-        return obj
+    def to_representation(self, value):
+        return value
 
-    def from_native(self, data):
+    def to_internal_value(self, data):
         if not isinstance(data, dict):
             msg = 'Incorrect type. Expected a mapping, but got %s'
             raise ValidationError(msg % type(data).__name__)
@@ -61,7 +61,7 @@ class RuleNodeField(serializers.WritableField):
 
 class RuleSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=64)
-    environment = serializers.CharField(max_length=64, required=False, allow_none=True)
+    environment = serializers.CharField(max_length=64, required=False, allow_null=True)
     actionMatch = serializers.ChoiceField(
         choices=(('all', 'all'), ('any', 'any'), ('none', 'none'), )
     )
@@ -73,48 +73,44 @@ class RuleSerializer(serializers.Serializer):
     )
     frequency = serializers.IntegerField(min_value=5, max_value=60 * 24 * 30)
 
-    def validate_environment(self, attrs, source):
-        name = attrs.get(source)
-        if name is None:
-            return attrs
+    def validate_environment(self, environment):
+        if environment is None:
+            return environment
 
         try:
-            attrs['environment'] = Environment.get_for_organization_id(
+            environment = Environment.get_for_organization_id(
                 self.context['project'].organization_id,
-                name,
+                environment,
             ).id
         except Environment.DoesNotExist:
             raise serializers.ValidationError(u'This environment has not been created.')
 
-        return attrs
+        return environment
 
-    def validate_conditions(self, attrs, source):
-        name = attrs.get(source)
-        if not name:
+    def validate_conditions(self, value):
+        if not value:
             raise serializers.ValidationError(u'Must select a condition')
+        return value
 
-        return attrs
-
-    def validate_actions(self, attrs, source):
-        name = attrs.get(source)
-        if not name:
+    def validate_actions(self, value):
+        if not value:
             raise serializers.ValidationError(u'Must select an action')
-
-        return attrs
+        return value
 
     def save(self, rule):
         rule.project = self.context['project']
-        if 'environment' in self.data:
-            rule.environment_id = self.data['environment']
-        if self.data.get('name'):
-            rule.label = self.data['name']
-        if self.data.get('actionMatch'):
-            rule.data['action_match'] = self.data['actionMatch']
-        if self.data.get('actions') is not None:
-            rule.data['actions'] = self.data['actions']
-        if self.data.get('conditions') is not None:
-            rule.data['conditions'] = self.data['conditions']
-        if self.data.get('frequency'):
-            rule.data['frequency'] = self.data['frequency']
+        if 'environment' in self.validated_data:
+            environment = self.validated_data['environment']
+            rule.environment_id = int(environment) if environment else environment
+        if self.validated_data.get('name'):
+            rule.label = self.validated_data['name']
+        if self.validated_data.get('actionMatch'):
+            rule.data['action_match'] = self.validated_data['actionMatch']
+        if self.validated_data.get('actions') is not None:
+            rule.data['actions'] = self.validated_data['actions']
+        if self.validated_data.get('conditions') is not None:
+            rule.data['conditions'] = self.validated_data['conditions']
+        if self.validated_data.get('frequency'):
+            rule.data['frequency'] = self.validated_data['frequency']
         rule.save()
         return rule
diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index 2943061440..98424d9116 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -11,8 +11,8 @@ from sentry.models import ApiScopes, SentryApp
 from sentry.models.sentryapp import VALID_EVENT_RESOURCES, REQUIRED_EVENT_PERMISSIONS
 
 
-class ApiScopesField(serializers.WritableField):
-    def validate(self, data):
+class ApiScopesField(serializers.Field):
+    def to_internal_value(self, data):
         valid_scopes = ApiScopes()
 
         if not data:
@@ -21,10 +21,11 @@ class ApiScopesField(serializers.WritableField):
         for scope in data:
             if scope not in valid_scopes:
                 raise ValidationError(u'{} not a valid scope'.format(scope))
+        return data
 
 
-class EventListField(serializers.WritableField):
-    def validate(self, data):
+class EventListField(serializers.Field):
+    def to_internal_value(self, data):
         if not data:
             return
 
@@ -32,70 +33,67 @@ class EventListField(serializers.WritableField):
             raise ValidationError(u'Invalid event subscription: {}'.format(
                 ', '.join(set(data).difference(VALID_EVENT_RESOURCES))
             ))
+        return data
 
 
-class SchemaField(serializers.WritableField):
-    def validate(self, data):
-        if not data or data == {}:
+class SchemaField(serializers.Field):
+    def to_internal_value(self, data):
+        if not data:
             return
 
         try:
             validate_schema(data)
         except SchemaValidationError as e:
             raise ValidationError(e.message)
+        return data
 
 
 class URLField(serializers.URLField):
-    def validate(self, url):
+    def to_internal_value(self, url):
         # The Django URLField doesn't distinguish between different types of
         # invalid URLs, so do any manual checks here to give the User a better
         # error message.
         if url and not url.startswith('http'):
             raise ValidationError('URL must start with http[s]://')
-
-        super(URLField, self).validate(url)
+        return url
 
 
 class SentryAppSerializer(Serializer):
     name = serializers.CharField()
     author = serializers.CharField()
-    scopes = ApiScopesField()
-    status = serializers.CharField(required=False)
-    events = EventListField(required=False)
-    schema = SchemaField(required=False)
+    scopes = ApiScopesField(allow_null=True)
+    status = serializers.CharField(required=False, allow_null=True)
+    events = EventListField(required=False, allow_null=True)
+    schema = SchemaField(required=False, allow_null=True)
     webhookUrl = URLField()
-    redirectUrl = URLField(required=False)
-    isAlertable = serializers.BooleanField(required=False)
-    overview = serializers.CharField(required=False)
+    redirectUrl = URLField(required=False, allow_null=True, allow_blank=True)
+    isAlertable = serializers.BooleanField(required=False, default=False)
+    overview = serializers.CharField(required=False, allow_null=True)
 
-    def __init__(self, instance=None, *args, **kwargs):
-        self.instance = instance
-        super(SentryAppSerializer, self).__init__(*args, **kwargs)
+    def validate_name(self, value):
+        if not value:
+            return value
 
-    def validate_name(self, attrs, source):
-        if not attrs.get('name'):
-            return attrs
-
-        queryset = SentryApp.with_deleted.filter(slug=slugify(attrs['name']))
+        queryset = SentryApp.with_deleted.filter(slug=slugify(value))
 
         if self.instance:
             queryset = queryset.exclude(id=self.instance.id)
 
         if queryset.exists():
             raise ValidationError(
-                u'Name {} is already taken, please use another.'.format(attrs['name'])
+                u'Name {} is already taken, please use another.'.format(value)
             )
-        return attrs
+        return value
 
-    def validate_events(self, attrs, source):
+    def validate(self, attrs):
         if not attrs.get('scopes'):
             return attrs
 
-        for resource in attrs.get(source):
+        for resource in attrs.get('events'):
             needed_scope = REQUIRED_EVENT_PERMISSIONS[resource]
             if needed_scope not in attrs['scopes']:
-                raise ValidationError(
-                    u'{} webhooks require the {} permission.'.format(resource, needed_scope),
-                )
+                raise ValidationError({
+                    'events': u'{} webhooks require the {} permission.'.format(resource, needed_scope),
+                })
 
         return attrs
diff --git a/src/sentry/api/serializers/rest_framework/widget.py b/src/sentry/api/serializers/rest_framework/widget.py
index accbc4786e..b6f1ee2d5c 100644
--- a/src/sentry/api/serializers/rest_framework/widget.py
+++ b/src/sentry/api/serializers/rest_framework/widget.py
@@ -22,12 +22,11 @@ class WidgetDataSourceSerializer(serializers.Serializer):
     type = serializers.CharField(required=True)
     order = serializers.IntegerField(required=True)
 
-    def validate_type(self, attrs, source):
-        type = attrs[source]
+    def validate_type(self, type):
         if type not in WidgetDataSourceTypes.TYPE_NAMES:
             raise ValidationError('Widget data source type %s not recognized.' % type)
-        attrs[source] = WidgetDataSourceTypes.get_id_for_type_name(type)
-        return attrs
+        type = WidgetDataSourceTypes.get_id_for_type_name(type)
+        return type
 
     def validate(self, data):
         super(WidgetDataSourceSerializer, self).validate(data)
@@ -50,10 +49,8 @@ class WidgetSerializer(serializers.Serializer):
         allow_null=True,
     )
 
-    def validate_displayType(self, attrs, source):
-        display_type = attrs[source]
+    def validate_displayType(self, display_type):
         if display_type not in WidgetDisplayTypes.TYPE_NAMES:
             raise ValidationError('Widget displayType %s not recognized.' % display_type)
 
-        attrs[source] = WidgetDisplayTypes.get_id_for_type_name(display_type)
-        return attrs
+        return WidgetDisplayTypes.get_id_for_type_name(display_type)
diff --git a/src/sentry/api/validators/broadcast.py b/src/sentry/api/validators/broadcast.py
index 01f0e69318..a5c4c498be 100644
--- a/src/sentry/api/validators/broadcast.py
+++ b/src/sentry/api/validators/broadcast.py
@@ -12,5 +12,5 @@ class AdminBroadcastValidator(BroadcastValidator):
     message = serializers.CharField(max_length=256, required=True)
     link = serializers.URLField(required=True)
     isActive = serializers.BooleanField(required=False)
-    dateExpires = serializers.DateTimeField(required=False)
+    dateExpires = serializers.DateTimeField(required=False, allow_null=True)
     cta = serializers.CharField(max_length=256, required=True)
diff --git a/src/sentry/api/validators/monitor.py b/src/sentry/api/validators/monitor.py
index e1796719fb..3767f44234 100644
--- a/src/sentry/api/validators/monitor.py
+++ b/src/sentry/api/validators/monitor.py
@@ -8,6 +8,7 @@ from django.core.exceptions import ValidationError
 from rest_framework import serializers
 
 from sentry.models import MonitorStatus, MonitorType, ScheduleType
+from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.serializers.rest_framework.project import ProjectField
 
 
@@ -38,27 +39,31 @@ NONSTANDARD_CRONTAB_SCHEDULES = {
 }
 
 
+class ObjectField(serializers.Field):
+    def to_internal_value(self, data):
+        return data
+
+
 class CronJobValidator(serializers.Serializer):
     schedule_type = serializers.ChoiceField(
         choices=zip(SCHEDULE_TYPES.keys(), SCHEDULE_TYPES.keys()),
     )
-    schedule = serializers.WritableField()
-    checkin_margin = serializers.IntegerField(required=False)
-    max_runtime = serializers.IntegerField(required=False)
+    schedule = ObjectField()
+    checkin_margin = EmptyIntegerField(required=False, default=None)
+    max_runtime = EmptyIntegerField(required=False, default=None)
 
-    def validate_schedule_type(self, attrs, source):
-        value = attrs[source]
+    def validate_schedule_type(self, value):
         if value:
-            attrs[source] = SCHEDULE_TYPES[value]
-        return attrs
+            value = SCHEDULE_TYPES[value]
+        return value
 
-    def validate_schedule(self, attrs, source):
+    def validate(self, attrs):
         if 'schedule_type' in attrs:
             schedule_type = attrs['schedule_type']
         else:
-            schedule_type = self.object['schedule_type']
+            schedule_type = self.instance['schedule_type']
 
-        value = attrs[source]
+        value = attrs.get('schedule')
         if not value:
             return attrs
 
@@ -69,7 +74,7 @@ class CronJobValidator(serializers.Serializer):
             if not isinstance(value[0], int):
                 raise ValidationError('Invalid value for schedule unit count (index 0)')
             if value[1] not in INTERVAL_NAMES:
-                raise ValidationError('Invalid value for schedlue unit name (index 1)')
+                raise ValidationError('Invalid value for schedule unit name (index 1)')
         elif schedule_type == ScheduleType.CRONTAB:
             # type: str schedule
             if not isinstance(value, six.string_types):
@@ -82,7 +87,7 @@ class CronJobValidator(serializers.Serializer):
                     raise ValidationError('Schedule was not parseable')
             if not croniter.is_valid(value):
                 raise ValidationError('Schedule was not parseable')
-            attrs[source] = value
+            attrs['schedule'] = value
         return attrs
 
 
@@ -96,27 +101,46 @@ class MonitorValidator(serializers.Serializer):
     type = serializers.ChoiceField(
         choices=zip(MONITOR_TYPES.keys(), MONITOR_TYPES.keys())
     )
+    config = ObjectField()
 
-    def get_default_fields(self):
-        type = self.init_data.get('type', self.object.get('type') if self.object else None)
+    def validate(self, attrs):
+        attrs = super(MonitorValidator, self).validate(attrs)
+        type = self.instance['type'] if self.instance else self.initial_data.get('type')
         if type in MONITOR_TYPES:
             type = MONITOR_TYPES[type]
         if type == MonitorType.CRON_JOB:
-            config = CronJobValidator()
+            validator = CronJobValidator(
+                instance=self.instance.get('config', {}) if self.instance else {},
+                data=attrs.get('config', {}),
+                partial=self.partial,
+            )
+            validator.is_valid(raise_exception=True)
+            attrs['config'] = validator.validated_data
         elif not type:
-            return {}
+            return attrs
         else:
             raise NotImplementedError
-        return {'config': config}
+        return attrs
 
-    def validate_status(self, attrs, source):
-        value = attrs[source]
+    def validate_status(self, value):
         if value:
-            attrs[source] = MONITOR_STATUSES[value]
-        return attrs
+            value = MONITOR_STATUSES[value]
+        return value
 
-    def validate_type(self, attrs, source):
-        value = attrs[source]
+    def validate_type(self, value):
         if value:
-            attrs[source] = MONITOR_TYPES[value]
-        return attrs
+            value = MONITOR_TYPES[value]
+        return value
+
+    def update(self, instance, validated_data):
+        has_config = 'config' in instance or 'config' in validated_data
+        if has_config:
+            config = instance.get('config', {})
+            config.update(validated_data.get('config', {}))
+        instance.update(validated_data)
+        if has_config:
+            instance['config'] = config
+        return instance
+
+    def create(self, validated_data):
+        return validated_data
diff --git a/src/sentry/api/validators/servicehook.py b/src/sentry/api/validators/servicehook.py
index 51f9f4b619..36abd296b1 100644
--- a/src/sentry/api/validators/servicehook.py
+++ b/src/sentry/api/validators/servicehook.py
@@ -18,10 +18,9 @@ class ServiceHookValidator(serializers.Serializer):
     ), required=False, default=0)
     isActive = serializers.BooleanField(required=False, default=True)
 
-    def validate_events(self, attrs, source):
-        value = attrs[source]
+    def validate_events(self, value):
         if value:
             for event in value:
                 if event not in SERVICE_HOOK_EVENTS:
                     raise serializers.ValidationError(u'Invalid event name: {}'.format(event))
-        return attrs
+        return value
diff --git a/src/sentry/relay/changesets/store_v7.py b/src/sentry/relay/changesets/store_v7.py
index 455282ec66..d1188a2e9f 100644
--- a/src/sentry/relay/changesets/store_v7.py
+++ b/src/sentry/relay/changesets/store_v7.py
@@ -32,7 +32,7 @@ class StoreV7(BaseChangeset):
         if not self.public_key:
             raise ChangesetError('Missing public key')
 
-        result = serializer.object
+        result = serializer.validated_data
 
         try:
             Project.objects.filter(
diff --git a/src/sentry/relay/queries/get_project_config.py b/src/sentry/relay/queries/get_project_config.py
index ea96eb4176..16313c2637 100644
--- a/src/sentry/relay/queries/get_project_config.py
+++ b/src/sentry/relay/queries/get_project_config.py
@@ -18,7 +18,7 @@ class GetProjectConfig(BaseQuery):
         if not serializer.is_valid():
             raise InvalidQuery(str(serializer.errors).splitlines()[0])
 
-        result = serializer.object
+        result = serializer.validated_data
 
         try:
             project = Project.objects.filter(
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index bc6eb6cb76..367e4876ad 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -120,7 +120,7 @@ class GroupNoteCreateTest(APITestCase):
                   'mentions': [u'%s' % user_id]}
         )
 
-        assert response.content == '{"mentions": ["Cannot mention a non team member"]}'
+        assert response.data == {"mentions": ["Cannot mention a non team member"]}
 
     def test_with_team_mentions(self):
         user = self.create_user(email='redTeamUser@example.com')
@@ -156,7 +156,8 @@ class GroupNoteCreateTest(APITestCase):
         )
         assert response.status_code == 400, response.content
 
-        assert response.content == '{"mentions": ["Mentioned team not found or not associated with project"]}'
+        assert response.data == {
+            "mentions": ["Mentioned team not found or not associated with project"]}
 
         # mentioning a team in the project returns 201
         response = self.client.post(
diff --git a/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py b/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py
index eb20af54a5..633af84dcc 100644
--- a/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py
+++ b/tests/sentry/api/endpoints/test_organization_dashboard_widget_details.py
@@ -138,8 +138,8 @@ class OrganizationDashboardWidgetDetailsPutTestCase(OrganizationDashboardWidgetD
             }],
         )
         assert response.status_code == 400
-        assert response.data == {'dataSources': [
-            u'type: Widget data source type not-real-type not recognized.']}
+        assert response.data == {'dataSources':
+                                 {'type': ['Widget data source type not-real-type not recognized.']}}
 
     def test_does_not_exists(self):
         response = self.get_response(
diff --git a/tests/sentry/api/endpoints/test_organization_dashboard_widgets.py b/tests/sentry/api/endpoints/test_organization_dashboard_widgets.py
index 3429e3ec79..09c57be85d 100644
--- a/tests/sentry/api/endpoints/test_organization_dashboard_widgets.py
+++ b/tests/sentry/api/endpoints/test_organization_dashboard_widgets.py
@@ -150,5 +150,6 @@ class OrganizationDashboardWidgetsPostTestCase(OrganizationDashboardWidgetTestCa
             }],
         )
         assert response.status_code == 400
-        assert response.data == {'dataSources': [
-            u'type: Widget data source type not-real-type not recognized.']}
+        assert response.data == {
+            'dataSources': {
+                'type': ['Widget data source type not-real-type not recognized.']}}
diff --git a/tests/sentry/api/endpoints/test_organization_release_details.py b/tests/sentry/api/endpoints/test_organization_release_details.py
index 87baa88243..88f4892566 100644
--- a/tests/sentry/api/endpoints/test_organization_release_details.py
+++ b/tests/sentry/api/endpoints/test_organization_release_details.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 import unittest
 from mock import patch
 from datetime import datetime
+
+import pytz
 from django.core.urlresolvers import reverse
 
 from sentry.constants import MAX_VERSION_LENGTH
@@ -679,7 +681,7 @@ class ReleaseDeleteTest(APITestCase):
             }
         )
         assert response.status_code == 400
-        assert response.data == {'commits': ['id: This field is required.']}
+        assert response.data == {'commits': {'id': ['This field is required.']}}
 
 
 class ReleaseSerializerTest(unittest.TestCase):
@@ -728,10 +730,10 @@ class ReleaseSerializerTest(unittest.TestCase):
         assert sorted(serializer.fields.keys()) == sorted(
             ['ref', 'url', 'dateReleased', 'commits', 'headCommits', 'refs'])
 
-        result = serializer.object
+        result = serializer.validated_data
         assert result['ref'] == self.ref
         assert result['url'] == self.url
-        assert result['dateReleased'] == datetime(1000, 10, 10, 6, 6)
+        assert result['dateReleased'] == datetime(1000, 10, 10, 6, 6, tzinfo=pytz.UTC)
         assert result['commits'] == self.commits
         assert result['headCommits'] == self.headCommits
         assert result['refs'] == self.refs
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 777ef641e3..0198d8bcd7 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -7,6 +7,8 @@ from datetime import (
     datetime,
     timedelta,
 )
+
+import pytz
 from django.core.urlresolvers import reverse
 from exam import fixture
 
@@ -1401,15 +1403,15 @@ class ReleaseSerializerWithProjectsTest(TestCase):
             'projects': self.projects,
         })
 
-        assert serializer.is_valid()
+        assert serializer.is_valid(), serializer.errors
         assert sorted(serializer.fields.keys()) == sorted(
             ['version', 'owner', 'ref', 'url', 'dateReleased', 'commits', 'headCommits', 'refs', 'projects'])
-        result = serializer.object
+        result = serializer.validated_data
         assert result['version'] == self.version
         assert result['owner'] == self.user
         assert result['ref'] == self.ref
         assert result['url'] == self.url
-        assert result['dateReleased'] == datetime(1000, 10, 10, 6, 6)
+        assert result['dateReleased'] == datetime(1000, 10, 10, 6, 6, tzinfo=pytz.UTC)
         assert result['commits'] == self.commits
         assert result['headCommits'] == self.headCommits
         assert result['refs'] == self.refs
@@ -1421,7 +1423,7 @@ class ReleaseSerializerWithProjectsTest(TestCase):
             'projects': self.projects,
         })
         assert serializer.is_valid()
-        result = serializer.object
+        result = serializer.validated_data
         assert result['version'] == self.version
         assert result['projects'] == self.projects
 
@@ -1533,7 +1535,7 @@ class ReleaseHeadCommitSerializerTest(TestCase):
         assert serializer.is_valid()
         assert sorted(serializer.fields.keys()) == sorted(
             ['commit', 'previousCommit', 'repository'])
-        result = serializer.object
+        result = serializer.validated_data
         assert result['commit'] == self.commit
         assert result['previousCommit'] == self.prev_commit
         assert result['repository'] == self.repo_name
diff --git a/tests/sentry/api/endpoints/test_organization_repository_details.py b/tests/sentry/api/endpoints/test_organization_repository_details.py
index ccf4fdf27a..df8879956c 100644
--- a/tests/sentry/api/endpoints/test_organization_repository_details.py
+++ b/tests/sentry/api/endpoints/test_organization_repository_details.py
@@ -340,5 +340,5 @@ class OrganizationRepositoryDeleteTest(APITestCase):
         })
 
         assert response.status_code == 400
-        assert response.data == {'integrationId': ['Enter a whole number.']}
+        assert response.data == {'integrationId': ['A valid integer is required.']}
         assert Repository.objects.get(id=repo.id).name == 'example'
diff --git a/tests/sentry/api/endpoints/test_organization_searches.py b/tests/sentry/api/endpoints/test_organization_searches.py
index e8d0dc60bb..c3397c09ea 100644
--- a/tests/sentry/api/endpoints/test_organization_searches.py
+++ b/tests/sentry/api/endpoints/test_organization_searches.py
@@ -237,4 +237,4 @@ class CreateOrganizationSearchesTest(APITestCase):
             query='',
         )
         assert resp.status_code == 400
-        assert 'This field is required' in resp.data['query'][0]
+        assert 'This field may not be blank.' == resp.data['query'][0]
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index ff74f381c9..1c778b1b72 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -464,17 +464,13 @@ class ProjectUpdateTest(APITestCase):
         assert resp.data['allowedDomains'] == ['foobar.com', 'https://example.com']
 
         # cannot be empty
-        resp = self.client.put(self.path, data={
-            'allowedDomains': '',
-        })
+        resp = self.client.put(self.path, data={'allowedDomains': ''})
         assert resp.status_code == 400, resp.content
         assert self.project.get_option('sentry:origins') == ['foobar.com', 'https://example.com']
         assert resp.data['allowedDomains'] == [
             'Empty value will block all requests, use * to accept from all domains']
 
-        resp = self.client.put(self.path, data={
-            'allowedDomains': ['*', ''],
-        })
+        resp = self.client.put(self.path, data={'allowedDomains': ['*', '']})
         assert resp.status_code == 200, resp.content
         assert self.project.get_option('sentry:origins') == ['*']
         assert resp.data['allowedDomains'] == ['*']
diff --git a/tests/sentry/api/endpoints/test_project_key_details.py b/tests/sentry/api/endpoints/test_project_key_details.py
index 8b796ee50c..4c8375d156 100644
--- a/tests/sentry/api/endpoints/test_project_key_details.py
+++ b/tests/sentry/api/endpoints/test_project_key_details.py
@@ -41,7 +41,7 @@ class UpdateProjectKeyTest(APITestCase):
             }
         )
         response = self.client.put(url, {'rateLimit': None})
-        assert response.status_code == 200
+        assert response.status_code == 200, response.content
         key = ProjectKey.objects.get(id=key.id)
         assert key.rate_limit_count is None
         assert key.rate_limit_window is None
@@ -68,6 +68,28 @@ class UpdateProjectKeyTest(APITestCase):
         assert key.rate_limit_count == 1
         assert key.rate_limit_window == 60
 
+    def test_remove_rate_limit(self):
+        project = self.create_project()
+        key = ProjectKey.objects.create(
+            project=project,
+            rate_limit_window=60,
+            rate_limit_count=1,
+        )
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-project-key-details',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+                'key_id': key.public_key,
+            }
+        )
+        response = self.client.put(url, {'rateLimit': {'count': "", 'window': 300}})
+        assert response.status_code == 200
+        key = ProjectKey.objects.get(id=key.id)
+        assert key.rate_limit_count is None
+        assert key.rate_limit_window is None
+
     def test_simple_rate_limit(self):
         project = self.create_project()
         key = ProjectKey.objects.create(
diff --git a/tests/sentry/api/endpoints/test_project_ownership.py b/tests/sentry/api/endpoints/test_project_ownership.py
index a06024aca6..20076f71df 100644
--- a/tests/sentry/api/endpoints/test_project_ownership.py
+++ b/tests/sentry/api/endpoints/test_project_ownership.py
@@ -93,18 +93,18 @@ class ProjectOwnershipEndpointTestCase(APITestCase):
             'raw': '*.js idont@exist.com #tiger-team',
         })
         assert resp.status_code == 400
-        assert resp.content == '{"raw": ["Invalid rule owners: idont@exist.com"]}'
+        assert resp.data == {"raw": ["Invalid rule owners: idont@exist.com"]}
 
     def test_invalid_team(self):
         resp = self.client.put(self.path, {
             'raw': '*.js admin@localhost #faketeam',
         })
         assert resp.status_code == 400
-        assert resp.content == '{"raw": ["Invalid rule owners: #faketeam"]}'
+        assert resp.data == {"raw": ["Invalid rule owners: #faketeam"]}
 
     def test_invalid_mixed(self):
         resp = self.client.put(self.path, {
             'raw': '*.js idont@exist.com admin@localhost #faketeam #tiger-team',
         })
         assert resp.status_code == 400
-        assert resp.content == '{"raw": ["Invalid rule owners: idont@exist.com, #faketeam"]}'
+        assert resp.data == {"raw": ["Invalid rule owners: idont@exist.com, #faketeam"]}
diff --git a/tests/sentry/api/endpoints/test_project_release_details.py b/tests/sentry/api/endpoints/test_project_release_details.py
index 8ea344bbf0..d758cfbd5a 100644
--- a/tests/sentry/api/endpoints/test_project_release_details.py
+++ b/tests/sentry/api/endpoints/test_project_release_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 import unittest
+
+import pytz
 from datetime import datetime
 from django.core.urlresolvers import reverse
 
@@ -277,10 +279,10 @@ class ReleaseSerializerTest(unittest.TestCase):
         assert serializer.is_valid()
         assert sorted(serializer.fields.keys()) == sorted(['ref', 'url', 'dateReleased', 'commits'])
 
-        result = serializer.object
+        result = serializer.validated_data
         assert result['ref'] == self.ref
         assert result['url'] == self.url
-        assert result['dateReleased'] == datetime(1000, 10, 10, 6, 6)
+        assert result['dateReleased'] == datetime(1000, 10, 10, 6, 6, tzinfo=pytz.UTC)
         assert result['commits'] == self.commits
 
     def test_fields_not_required(self):
@@ -288,7 +290,7 @@ class ReleaseSerializerTest(unittest.TestCase):
         assert serializer.is_valid()
 
     def test_do_not_allow_null_commits(self):
-        serializer = ReleaseSerializer({
+        serializer = ReleaseSerializer(data={
             'commits': None,
         })
         assert not serializer.is_valid()
diff --git a/tests/sentry/api/endpoints/test_project_releases.py b/tests/sentry/api/endpoints/test_project_releases.py
index ee5f8df4c1..53bcb394d4 100644
--- a/tests/sentry/api/endpoints/test_project_releases.py
+++ b/tests/sentry/api/endpoints/test_project_releases.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
 from datetime import datetime, timedelta
+
+import pytz
 from django.utils import timezone
 from django.core.urlresolvers import reverse
 from exam import fixture
@@ -690,8 +692,9 @@ class ProjectReleaseCreateCommitPatch(ReleaseCommitPatchTest):
         )
 
         assert response.status_code == 400
-        assert response.data == {
-            'commits': [u'patch_set: type: Commit patch_set type Z is not supported.']}
+        assert dict(response.data) == {
+            'commits': {'patch_set': {'type': ['Commit patch_set type Z is not supported.']}},
+        }
 
 
 class ReleaseSerializerTest(TestCase):
@@ -720,12 +723,12 @@ class ReleaseSerializerTest(TestCase):
         assert sorted(serializer.fields.keys()) == sorted(
             ['version', 'owner', 'ref', 'url', 'dateReleased', 'commits'])
 
-        result = serializer.object
+        result = serializer.validated_data
         assert result['version'] == self.version
         assert result['owner'] == self.user
         assert result['ref'] == self.ref
         assert result['url'] == self.url
-        assert result['dateReleased'] == datetime(1000, 10, 10, 6, 6)
+        assert result['dateReleased'] == datetime(1000, 10, 10, 6, 6, tzinfo=pytz.UTC)
         assert result['commits'] == self.commits
 
     def test_fields_not_required(self):
diff --git a/tests/sentry/api/serializers/rest_framework/test_json.py b/tests/sentry/api/serializers/rest_framework/test_json.py
index fe54af4034..e2e734a712 100644
--- a/tests/sentry/api/serializers/rest_framework/test_json.py
+++ b/tests/sentry/api/serializers/rest_framework/test_json.py
@@ -16,7 +16,6 @@ class JSONFieldTest(TestCase):
         serializer = DummySerializer(data={'json_field': data})
         assert serializer.is_valid() is False
         assert serializer.errors == {'json_field': [u'Value must be valid JSON.']}
-        assert serializer.object is None
 
     def test_valid_json(self):
         data = {
@@ -27,7 +26,7 @@ class JSONFieldTest(TestCase):
 
         serializer = DummySerializer(data={'json_field': data})
         assert serializer.is_valid()
-        assert serializer.object == {
+        assert serializer.validated_data == {
             'json_field': {
                 'id': '1234',
                 'name': 'json-tester',
diff --git a/tests/sentry/api/serializers/rest_framework/test_list.py b/tests/sentry/api/serializers/rest_framework/test_list.py
deleted file mode 100644
index 1ec851c8f8..0000000000
--- a/tests/sentry/api/serializers/rest_framework/test_list.py
+++ /dev/null
@@ -1,192 +0,0 @@
-from __future__ import absolute_import
-from sentry.api.serializers.rest_framework import ListField, ValidationError
-
-from rest_framework import serializers
-
-from sentry.testutils import TestCase, APITestCase
-
-
-class ListFieldTest(TestCase):
-    def assert_success(self, serializer, value):
-        assert serializer.is_valid()
-        assert not serializer.errors
-        assert serializer.object == value
-
-    def assert_unsuccessful(self, serializer, errors):
-        assert not serializer.is_valid()
-        assert serializer.errors == errors
-        assert serializer.object is None
-
-    def test_simple(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(child=serializers.IntegerField())
-        serializer = DummySerializer(data={'list_field': [1, 2, 3]})
-        self.assert_success(serializer, {'list_field': [1, 2, 3]})
-
-    def test_simple_invalid(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(child=serializers.IntegerField())
-        serializer = DummySerializer(data={'list_field': [1, 'q', 3]})
-        self.assert_unsuccessful(serializer, {'list_field': ['Enter a whole number.']})
-
-    def test_single_element_list(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(child=serializers.IntegerField())
-        serializer = DummySerializer(data={'list_field': [1]})
-        self.assert_success(serializer, {'list_field': [1]})
-
-    def test_empty_list_child_required(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(required=False, child=serializers.IntegerField())
-        serializer = DummySerializer(data={'list_field': []})
-        self.assert_success(serializer, {'list_field': []})
-
-    def test_empty_list_child_required_default_value(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(default=[], required=False, child=serializers.IntegerField())
-        serializer = DummySerializer(data={'list_field': []})
-        self.assert_success(serializer, {'list_field': []})
-
-    def test_empty_list_child_required_complex_object(self):
-        class DummyChildSerializer(serializers.Serializer):
-            name = serializers.CharField()
-            age = serializers.IntegerField()
-
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(required=False, child=DummyChildSerializer())
-        serializer = DummySerializer(data={'list_field': []})
-        self.assert_success(serializer, {'list_field': []})
-
-    def test_empty_list_child_not_required_complex_object(self):
-        class DummyChildSerializer(serializers.Serializer):
-            name = serializers.CharField()
-            age = serializers.IntegerField()
-
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(required=False, child=DummyChildSerializer(required=False))
-        serializer = DummySerializer(data={'list_field': []})
-        self.assert_success(serializer, {'list_field': []})
-
-    def test_empty_list_child_not_required_complex_object_with_default(self):
-        class DummyChildSerializer(serializers.Serializer):
-            name = serializers.CharField()
-            age = serializers.IntegerField()
-
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(
-                default=[],
-                required=False,
-                child=DummyChildSerializer(
-                    required=False))
-        serializer = DummySerializer(data={'list_field': []})
-        self.assert_success(serializer, {'list_field': []})
-
-    def test_empty_list(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(required=False, child=serializers.IntegerField(required=False))
-        serializer = DummySerializer(data={'list_field': []})
-        self.assert_success(serializer, {'list_field': []})
-
-    def test_checks_required(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(child=serializers.IntegerField())
-        serializer = DummySerializer(data={})
-        self.assert_unsuccessful(serializer, {'list_field': [u'This field is required.']})
-
-    def test_allows_no_object_with_not_required(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(child=serializers.IntegerField(), required=False)
-        serializer = DummySerializer(data={})
-        self.assert_success(serializer, {})
-
-    def test_allows_object_with_not_required(self):
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(child=serializers.IntegerField(), required=False)
-        serializer = DummySerializer(data={'list_field': [1, 2, 3]})
-        self.assert_success(serializer, {'list_field': [1, 2, 3]})
-
-
-class ListFieldMultipleValuesTest(APITestCase):
-    def setUp(self):
-        super(ListFieldMultipleValuesTest, self).setUp()
-
-        class DummyChildSerializer(serializers.Serializer):
-            age = serializers.IntegerField()
-
-            def validate_age(self, attrs, source):
-                age = attrs[source]
-                if age > 5:
-                    raise ValidationError('age %d is not allowed' % age)
-                return attrs
-
-        class DummySerializer(serializers.Serializer):
-            list_field = ListField(
-                required=False,
-                child=DummyChildSerializer(required=False),
-                allow_null=True,
-            )
-            name = serializers.CharField()
-
-        self.serializer_class = DummySerializer
-
-    def test_simple(self):
-        serializer = self.serializer_class(data={
-            'name': 'John',
-            'list_field': [{'age': 200}]
-        })
-        assert not serializer.is_valid()
-
-    def test_incorrect_value_before_correct_value(self):
-        serializer = self.serializer_class(data={
-            'name': 'John',
-            'list_field': [
-                {'age': 200}, {'age': 3}
-            ]
-        })
-        assert not serializer.is_valid()
-        assert serializer._errors == {'list_field': [u'age: age 200 is not allowed']}
-
-    def test_correct_value_before_incorrect_value(self):
-        serializer = self.serializer_class(data={
-            'name': 'John',
-            'list_field': [
-                {'age': 3}, {'age': 200}
-            ]
-        })
-        assert not serializer.is_valid()
-        assert serializer._errors == {'list_field': [u'age: age 200 is not allowed']}
-
-    def test_mulitple_errors_in_child(self):
-        serializer = self.serializer_class(data={
-            'name': 'John',
-            'list_field': [
-                {'age': 3}, {'age': 200}, {'age': 5000}, {'age': 20}, {'age': 1}
-            ]
-        })
-        assert not serializer.is_valid()
-        assert serializer.fields['list_field']._child_errors == {
-            'age': ['age 200 is not allowed', 'age 5000 is not allowed', 'age 20 is not allowed']}
-        assert serializer._errors == {'list_field': ['age: age 200 is not allowed']}
-
-    def test_clears_child_errors_between_use_empty_list(self):
-        serializer = self.serializer_class(data={
-            'name': 'John',
-            'list_field': [{'age': 200}]
-        })
-        assert not serializer.is_valid()
-        serializer = self.serializer_class(data={
-            'name': 'John',
-            'list_field': []
-        })
-        assert serializer.is_valid()
-
-    def test_clears_child_errors_between_use_not_supplied(self):
-        serializer = self.serializer_class(data={
-            'name': 'John',
-            'list_field': [{'age': 200}]
-        })
-        assert not serializer.is_valid()
-        serializer = self.serializer_class(data={
-            'name': 'John',
-        })
-        assert serializer.is_valid()
diff --git a/tests/sentry/api/serializers/test_fields.py b/tests/sentry/api/serializers/test_fields.py
index 7ba3623ef8..9fcc5d4bd6 100644
--- a/tests/sentry/api/serializers/test_fields.py
+++ b/tests/sentry/api/serializers/test_fields.py
@@ -33,7 +33,7 @@ class TestListField(TestCase):
 
         serializer = DummySerializer(data=data)
         assert serializer.is_valid()
-        assert serializer.object == {
+        assert serializer.validated_data == {
             'a_field': [{
                 'b_field': 'abcdefg',
                 'd_field': 'gfedcba',
@@ -47,9 +47,7 @@ class TestListField(TestCase):
 
         serializer = DummySerializer(data=data)
         assert not serializer.is_valid()
-        assert serializer.errors == {
-            'a_field': ['non_field_errors: No input provided'],
-        }
+        assert serializer.errors == {'a_field': ['This field may not be null.']}
 
     def test_child_validates(self):
         data = {
@@ -60,7 +58,7 @@ class TestListField(TestCase):
 
         serializer = DummySerializer(data=data)
         assert not serializer.is_valid()
-        assert serializer.errors == {'a_field': [u'd_field: This field is required.']}
+        assert serializer.errors == {'a_field': {'d_field': ['This field is required.']}}
 
 
 class TestActorField(TestCase):
@@ -72,8 +70,8 @@ class TestActorField(TestCase):
         serializer = DummySerializer(data=data)
         assert serializer.is_valid()
 
-        assert serializer.object['actor_field'].type == User
-        assert serializer.object['actor_field'].id == 1
+        assert serializer.validated_data['actor_field'].type == User
+        assert serializer.validated_data['actor_field'].id == 1
 
     def test_legacy_user_fallback(self):
         data = {
@@ -83,8 +81,8 @@ class TestActorField(TestCase):
         serializer = DummySerializer(data=data)
         assert serializer.is_valid()
 
-        assert serializer.object['actor_field'].type == User
-        assert serializer.object['actor_field'].id == 1
+        assert serializer.validated_data['actor_field'].type == User
+        assert serializer.validated_data['actor_field'].id == 1
 
     def test_team(self):
         data = {
@@ -93,8 +91,8 @@ class TestActorField(TestCase):
 
         serializer = DummySerializer(data=data)
         assert serializer.is_valid()
-        assert serializer.object['actor_field'].type == Team
-        assert serializer.object['actor_field'].id == 1
+        assert serializer.validated_data['actor_field'].type == Team
+        assert serializer.validated_data['actor_field'].id == 1
 
     def test_validates(self):
         data = {
diff --git a/tests/sentry/api/serializers/test_release.py b/tests/sentry/api/serializers/test_release.py
index 32954ec91e..6790da8a7c 100644
--- a/tests/sentry/api/serializers/test_release.py
+++ b/tests/sentry/api/serializers/test_release.py
@@ -463,7 +463,7 @@ class ReleaseRefsSerializerTest(TestCase):
 
         assert not serializer.is_valid()
         assert serializer.errors == {
-            'refs': ['non_field_errors: No input provided'],
+            'refs': ['This field may not be null.'],
         }
 
         # test good refs
diff --git a/tests/sentry/integrations/bitbucket/test_search.py b/tests/sentry/integrations/bitbucket/test_search.py
index 42facc1486..38d78f3d9b 100644
--- a/tests/sentry/integrations/bitbucket/test_search.py
+++ b/tests/sentry/integrations/bitbucket/test_search.py
@@ -103,4 +103,4 @@ class BitbucketSearchEndpointTest(APITestCase):
             }
         )
         assert resp.status_code == 400
-        assert resp.content == '{"detail": "Bitbucket Repository has no issue tracker."}'
+        assert resp.data == {"detail": "Bitbucket Repository has no issue tracker."}
diff --git a/tests/snuba/api/endpoints/test_group_events.py b/tests/snuba/api/endpoints/test_group_events.py
index d75ad53ee3..f558ef45c5 100644
--- a/tests/snuba/api/endpoints/test_group_events.py
+++ b/tests/snuba/api/endpoints/test_group_events.py
@@ -372,4 +372,7 @@ class GroupEventsTest(APITestCase, SnubaTestCase):
             url = u'/api/0/issues/{}/events/?query={}'.format(group.id, query)
             response = self.client.get(url, format='json')
             assert response.status_code == 400
-            assert response.content == '{"detail": "Boolean search operator OR and AND not allowed in this search."}'
+            assert response.data == {
+                'detail':
+                'Boolean search operator OR and AND not allowed in this search.',
+            }
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index d089a17385..5d38f2bc7e 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -584,7 +584,9 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         for query in ['title:hi OR title:hello', 'title:hi AND title:hello']:
             response = self.client.get(url, {'query': query}, format='json')
             assert response.status_code == 400
-            assert response.content == '{"detail": "Boolean search operator OR and AND not allowed in this search."}'
+            assert response.data == {
+                'detail': 'Boolean search operator OR and AND not allowed in this search.',
+            }
 
     def test_group_filtering(self):
         user = self.create_user()
diff --git a/tests/snuba/api/endpoints/test_organization_group_index.py b/tests/snuba/api/endpoints/test_organization_group_index.py
index 3e78681e82..47cd36c926 100644
--- a/tests/snuba/api/endpoints/test_organization_group_index.py
+++ b/tests/snuba/api/endpoints/test_organization_group_index.py
@@ -1179,7 +1179,7 @@ class GroupUpdateTest(APITestCase, SnubaTestCase):
             statusDetails={'inCommit': {'commit': 'a' * 40, 'repository': repo.name}},
         )
         assert response.status_code == 400
-        assert response.data['statusDetails'][0]['inCommit'][0]['commit']
+        assert response.data['statusDetails']['inCommit']['commit'][0] == 'Unable to find the given commit.'
 
     def test_set_unresolved(self):
         release = self.create_release(project=self.project, version='abc')
diff --git a/tests/snuba/api/endpoints/test_project_group_index.py b/tests/snuba/api/endpoints/test_project_group_index.py
index 55baece15e..492a346646 100644
--- a/tests/snuba/api/endpoints/test_project_group_index.py
+++ b/tests/snuba/api/endpoints/test_project_group_index.py
@@ -1140,7 +1140,7 @@ class GroupUpdateTest(APITestCase, SnubaTestCase):
             format='json'
         )
         assert response.status_code == 400
-        assert response.data['statusDetails'][0]['inCommit'][0]['commit']
+        assert response.data['statusDetails']['inCommit']['commit'][0] == 'Unable to find the given commit.'
 
     def test_set_unresolved(self):
         release = self.create_release(project=self.project, version='abc')
