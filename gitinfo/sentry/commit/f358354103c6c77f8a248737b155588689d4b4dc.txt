commit f358354103c6c77f8a248737b155588689d4b4dc
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Oct 16 11:16:10 2019 -0700

    fix(apm): Close correct transaction span (#15100)
    
    Previously, it was possible to have `startTransaction` start a span due to in app navigation, but instead of closing the previous transaction span that was created this way, it was finishing a different span (whatever was called immediately before navigation)

diff --git a/src/sentry/static/sentry/app/utils/apm.jsx b/src/sentry/static/sentry/app/utils/apm.jsx
index a0f8176123..20a14e3854 100644
--- a/src/sentry/static/sentry/app/utils/apm.jsx
+++ b/src/sentry/static/sentry/app/utils/apm.jsx
@@ -4,6 +4,7 @@ import * as Sentry from '@sentry/browser';
 let firstPageLoad = true;
 let flushTransactionTimeout = undefined;
 let wasInterrupted = false;
+let currentTransactionSpan = null;
 
 const TRANSACTION_TIMEOUT = 5000;
 const requests = new Set([]);
@@ -20,22 +21,16 @@ function startTransaction() {
       return;
     }
 
-    // If there's a previous span open, finish it
-    // TODO(apm): I think this is wrong, we probably only want to finish the spans
-    // that we start in this function and in `startApm()`
-    //
-    // i.e. it could close out a span of an API request
-    const prevTransactionSpan = scope.getSpan();
-    if (prevTransactionSpan) {
-      prevTransactionSpan.finish();
+    // If there's a previous transaction span open, finish it
+    if (currentTransactionSpan) {
+      currentTransactionSpan.finish();
     }
 
-    scope.setSpan(
-      Sentry.startSpan({
-        op: 'navigation',
-        sampled: true,
-      })
-    );
+    currentTransactionSpan = Sentry.startSpan({
+      op: 'navigation',
+      sampled: true,
+    });
+    scope.setSpan(currentTransactionSpan);
     scope.setTag('ui.nav', 'navigation');
   });
 
@@ -66,13 +61,11 @@ export function finishTransaction(delay = TRANSACTION_TIMEOUT) {
   }
 
   flushTransactionTimeout = setTimeout(() => {
-    Sentry.configureScope(scope => {
-      const span = scope.getSpan();
-      if (span) {
-        span.finish();
-        firstPageLoad = false;
-      }
-    });
+    if (currentTransactionSpan) {
+      currentTransactionSpan.finish();
+      currentTransactionSpan = null;
+      firstPageLoad = false;
+    }
   }, delay);
 }
 
@@ -136,12 +129,11 @@ export function setTransactionName(name) {
  */
 export function startApm() {
   Sentry.configureScope(scope => {
-    scope.setSpan(
-      Sentry.startSpan({
-        op: 'pageload',
-        sampled: true,
-      })
-    );
+    currentTransactionSpan = Sentry.startSpan({
+      op: 'pageload',
+      sampled: true,
+    });
+    scope.setSpan(currentTransactionSpan);
     scope.setTag('ui.nav', 'pageload');
   });
   startTransaction();
