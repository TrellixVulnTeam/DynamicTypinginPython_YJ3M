commit d9307dec2a0d8d700211e84df06038006b6e2d28
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Fri Aug 26 07:08:04 2016 -1000

    Rehaul deletion logging. (#4014)
    
    * Rehaul deletion logging.
    
    * Support changes in tests.
    
    * better way to bulk delete and log.
    
    * Change name to model_name.
    
    * use origianl query.

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index e3f92caa45..ae12d43754 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -161,7 +161,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
             return Response({'detail': ERR_DEFAULT_ORG}, status=400)
 
         transaction_id = uuid4().hex
-        logging.getLogger('sentry.deletions').info('remove.organization', extra={
+        logging.getLogger('sentry.deletions.api').info('organization.remove.queued', extra={
             'organization_id': organization.id,
             'organization_slug': organization.slug,
             'actor_id': request.user.id,
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 47de373593..c312e6bfc8 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import logging
+from uuid import uuid4
 
 from datetime import timedelta
 from django.db import IntegrityError, transaction
@@ -286,9 +287,16 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             return Response('{"error": "Cannot remove projects internally used by Sentry."}',
                             status=status.HTTP_403_FORBIDDEN)
 
-        logging.getLogger('sentry.deletions').info(
-            'Project %s/%s (id=%s) removal requested by user (id=%s)',
-            project.organization.slug, project.slug, project.id, request.user.id)
+        transaction_id = uuid4().hex
+        logging.getLogger('sentry.deletions.api').info('project.remove.queued', extra={
+            'organization_id': project.organization.id,
+            'organization_slug': project.organization.slug,
+            'project_id': project.id,
+            'project_slug': project.slug,
+            'actor_id': request.user.id,
+            'transaction_id': transaction_id,
+            'ip_address': request.META['REMOTE_ADDR'],
+        })
 
         updated = Project.objects.filter(
             id=project.id,
@@ -296,7 +304,10 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         ).update(status=ProjectStatus.PENDING_DELETION)
         if updated:
             delete_project.apply_async(
-                kwargs={'object_id': project.id},
+                kwargs={
+                    'object_id': project.id,
+                    'transaction_id': transaction_id,
+                },
                 countdown=3600,
             )
 
@@ -306,6 +317,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 target_object=project.id,
                 event=AuditLogEntryEvent.PROJECT_REMOVE,
                 data=project.get_audit_log_data(),
+                transaction_id=transaction_id,
             )
 
         return Response(status=204)
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index b68be15d2f..78e5a545bc 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import logging
+from uuid import uuid4
 
 from rest_framework import serializers, status
 from rest_framework.response import Response
@@ -120,9 +121,16 @@ class TeamDetailsEndpoint(TeamEndpoint):
         immediate.  However once deletion has begun the state of a project
         changes and will be hidden from most public views.
         """
-        logging.getLogger('sentry.deletions').info(
-            'Team %s/%s (id=%s) removal requested by user (id=%s)',
-            team.organization.slug, team.slug, team.id, request.user.id)
+        transaction_id = uuid4().hex
+        logging.getLogger('sentry.deletions.api').info('team.remove.queued', extra={
+            'organization_id': team.organization.id,
+            'organization_slug': team.organization.slug,
+            'team_id': team.id,
+            'team_slug': team.slug,
+            'actor_id': request.user.id,
+            'transaction_id': transaction_id,
+            'ip_address': request.META['REMOTE_ADDR'],
+        })
 
         updated = Team.objects.filter(
             id=team.id,
@@ -130,7 +138,10 @@ class TeamDetailsEndpoint(TeamEndpoint):
         ).update(status=TeamStatus.PENDING_DELETION)
         if updated:
             delete_team.apply_async(
-                kwargs={'object_id': team.id},
+                kwargs={
+                    'object_id': team.id,
+                    'transaction_id': transaction_id,
+                },
                 countdown=3600,
             )
 
@@ -140,6 +151,7 @@ class TeamDetailsEndpoint(TeamEndpoint):
                 target_object=team.id,
                 event=AuditLogEntryEvent.TEAM_REMOVE,
                 data=team.get_audit_log_data(),
+                transaction_id=transaction_id,
             )
 
         return Response(status=204)
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 21e4cce7ef..36380e6b4c 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -15,7 +15,7 @@ from sentry.signals import pending_delete
 from sentry.tasks.base import instrumented_task, retry
 from sentry.utils.query import bulk_delete_objects
 
-logger = logging.getLogger('sentry.deletions')
+logger = logging.getLogger('sentry.deletions.async')
 
 
 @instrumented_task(name='sentry.tasks.deletion.delete_organization', queue='cleanup',
@@ -39,7 +39,7 @@ def delete_organization(object_id, transaction_id=None, continuous=True, **kwarg
         pending_delete.send(sender=Organization, instance=o)
 
     for team in Team.objects.filter(organization=o).exclude(status=TeamStatus.DELETION_IN_PROGRESS).order_by('id')[:1]:
-        logger.info('remove.team', extra={
+        logger.info('team.remove.queued', extra={
             'team_id': team.id,
             'organization_id': o.id,
             'transaction_id': transaction_id,
@@ -63,7 +63,12 @@ def delete_organization(object_id, transaction_id=None, continuous=True, **kwarg
                 countdown=15,
             )
         return
+    o_id = o.id
     o.delete()
+    logger.info('organization.remove.deleted', extra={
+        'organization_id': o_id,
+        'transaction_id': transaction_id,
+    })
 
 
 @instrumented_task(name='sentry.tasks.deletion.delete_team', queue='cleanup',
@@ -86,7 +91,7 @@ def delete_team(object_id, transaction_id=None, continuous=True, **kwargs):
 
     # Delete 1 project at a time since this is expensive by itself
     for project in Project.objects.filter(team=t).exclude(status=ProjectStatus.DELETION_IN_PROGRESS).order_by('id')[:1]:
-        logger.info('remove.project', extra={
+        logger.info('project.remove.queued', extra={
             'project_id': project.id,
             'team_id': t.id,
             'transaction_id': transaction_id,
@@ -100,7 +105,12 @@ def delete_team(object_id, transaction_id=None, continuous=True, **kwargs):
             )
         return
 
+    t_id = t.id
     t.delete()
+    logger.info('team.remove.deleted', extra={
+        'team_id': t_id,
+        'transaction_id': transaction_id,
+    })
 
 
 @instrumented_task(name='sentry.tasks.deletion.delete_project', queue='cleanup',
@@ -129,7 +139,13 @@ def delete_project(object_id, transaction_id=None, continuous=True, **kwargs):
         p.update(status=ProjectStatus.DELETION_IN_PROGRESS)
 
     # Immediately revoke keys
+    project_keys = list(ProjectKey.objects.filter(project_id=object_id).values_list('id', flat=True))
     ProjectKey.objects.filter(project_id=object_id).delete()
+    for key_id in project_keys:
+        logger.info('projectkey.remove.deleted', extra={
+            'projectkey_id': key_id,
+            'transaction_id': transaction_id,
+        })
 
     model_list = (
         Activity, EventMapping, EventUser, GroupAssignee, GroupBookmark,
@@ -184,7 +200,12 @@ def delete_project(object_id, transaction_id=None, continuous=True, **kwargs):
                 )
             return
 
+    p_id = p.id
     p.delete()
+    logger.info('project.remove.deleted', extra={
+        'project_id': p_id,
+        'transaction_id': transaction_id,
+    })
 
 
 @instrumented_task(name='sentry.tasks.deletion.delete_group', queue='cleanup',
@@ -231,7 +252,12 @@ def delete_group(object_id, transaction_id=None, continuous=True, **kwargs):
                 countdown=15,
             )
         return
+    g_id = group.id
     group.delete()
+    logger.info('group.remove.deleted', extra={
+        'group_id': g_id,
+        'transaction_id': transaction_id,
+    })
 
 
 @instrumented_task(name='sentry.tasks.deletion.delete_tag_key', queue='cleanup',
@@ -274,7 +300,12 @@ def delete_tag_key(object_id, transaction_id=None, continuous=True, **kwargs):
             )
         return
 
+    tagkey_id = tagkey.id
     tagkey.delete()
+    logger.info('tagkey.remove.deleted', extra={
+        'tagkey_id': tagkey_id,
+        'transaction_id': transaction_id,
+    })
 
 
 def delete_events(relation, transaction_id=None, limit=100, logger=None):
@@ -283,7 +314,9 @@ def delete_events(relation, transaction_id=None, limit=100, logger=None):
 
     has_more = False
     if logger is not None:
-        logger.info('remove.event', extra=dict(
+        # The only reason this is a different log statement is that logging every
+        # single event that gets deleted in the relation will destroy disks.
+        logger.info('event.remove.deleted', extra=dict(
             relation.items() + [('transaction_id', transaction_id)],
         ))
 
@@ -307,12 +340,15 @@ def delete_objects(models, relation, transaction_id=None, limit=100, logger=None
     # This handles cascades properly
     has_more = False
     for model in models:
-        if logger is not None:
-            logger.info('remove.%s' % model.__name__.lower(), extra=dict(
-                relation.items() + [('transaction_id', transaction_id)],
-            ))
         for obj in model.objects.filter(**relation)[:limit]:
+            obj_id = obj.id
+            model_name = type(obj).__name__.lower()
             obj.delete()
+            if logger is not None:
+                logger.info('%s.remove.deleted' % model_name, extra={
+                    'transaction_id': transaction_id,
+                    '%s_id' % model_name: obj_id,
+                })
             has_more = True
 
         if has_more:
diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index 22edcd8543..0588d6c51a 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -18,7 +18,7 @@ from sentry.tasks.deletion import delete_group
 
 # TODO(dcramer): probably should have a new logger for this, but it removes data
 # so lets bundle under deletions
-logger = logging.getLogger('sentry.deletions')
+logger = logging.getLogger('sentry.deletions.merge')
 
 
 @instrumented_task(name='sentry.tasks.merge.merge_group', queue='merge',
@@ -167,10 +167,9 @@ def merge_objects(models, group, new_group, limit=1000,
     has_more = False
     for model in models:
         if logger is not None:
-            logger.info('model.merge', extra={
-                'model': model.__name__,
-                'group_id': group.id,
-                'new_group_id': new_group.id
+            logger.info('%s.merge' % model.__name__.lower(), extra={
+                'group_id.old': group.id,
+                'group_id.new': new_group.id
             })
         all_fields = model._meta.get_all_field_names()
         has_group = 'group' in all_fields
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index 222882e86f..371dad489d 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -277,7 +277,7 @@ def bulk_delete_objects(model, limit=10000, transaction_id=None, logger=None, **
         params.append(value)
 
     if logger is not None:
-        logger.info('remove.%s' % model.__name__.lower(), extra={
+        logger.info('%s.remove.deleted' % model.__name__.lower(), extra={
             column: value,
             'transaction_id': transaction_id,
         })
diff --git a/src/sentry/web/frontend/remove_account.py b/src/sentry/web/frontend/remove_account.py
index eae3e2901a..ee5eb14344 100644
--- a/src/sentry/web/frontend/remove_account.py
+++ b/src/sentry/web/frontend/remove_account.py
@@ -51,9 +51,10 @@ class RemoveAccountView(BaseView):
                 if result['single_owner']:
                     orgs_to_remove.add(result['organization'].slug)
 
-            logging.getLogger('sentry.deletions').info(
-                'User (id=%s) removal requested by self',
-                request.user.id)
+            logging.getLogger('sentry.deletions.ui').info('user.deactivate', extra={
+                'actor_id': request.user.id,
+                'ip_address': request.META['REMOTE_ADDR'],
+            })
 
             for org_slug in orgs_to_remove:
                 client.delete('/organizations/{}/'.format(org_slug),
diff --git a/src/sentry/web/frontend/remove_organization.py b/src/sentry/web/frontend/remove_organization.py
index b8a8fe7bd7..bc8bea862f 100644
--- a/src/sentry/web/frontend/remove_organization.py
+++ b/src/sentry/web/frontend/remove_organization.py
@@ -40,7 +40,7 @@ class RemoveOrganizationView(OrganizationView):
         form = self.get_form(request, organization)
         if form.is_valid():
             transaction_id = uuid4().hex
-            logging.getLogger('sentry.deletions').info('remove.organization', extra={
+            logging.getLogger('sentry.deletions.ui').info('organization.remove.queued', extra={
                 'organization_id': organization.id,
                 'organization_slug': organization.slug,
                 'actor_id': request.user.id,
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index ffd6d9920b..fc046622d8 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -182,8 +182,13 @@ class ProjectUpdateTest(APITestCase):
 
 
 class ProjectDeleteTest(APITestCase):
+    @mock.patch('sentry.api.endpoints.project_details.uuid4')
     @mock.patch('sentry.api.endpoints.project_details.delete_project')
-    def test_simple(self, mock_delete_project):
+    def test_simple(self, mock_delete_project, mock_uuid4):
+        class uuid(object):
+            hex = 'abc123'
+
+        mock_uuid4.return_value = uuid
         project = self.create_project()
 
         self.login_as(user=self.user)
@@ -199,7 +204,10 @@ class ProjectDeleteTest(APITestCase):
         assert response.status_code == 204
 
         mock_delete_project.apply_async.assert_called_once_with(
-            kwargs={'object_id': project.id},
+            kwargs={
+                'object_id': project.id,
+                'transaction_id': 'abc123',
+            },
             countdown=3600,
         )
 
diff --git a/tests/sentry/api/endpoints/test_team_details.py b/tests/sentry/api/endpoints/test_team_details.py
index aa0497f43a..9bb31880fc 100644
--- a/tests/sentry/api/endpoints/test_team_details.py
+++ b/tests/sentry/api/endpoints/test_team_details.py
@@ -41,8 +41,14 @@ class TeamUpdateTest(APITestCase):
 
 
 class TeamDeleteTest(APITestCase):
+    @patch('sentry.api.endpoints.team_details.uuid4')
     @patch('sentry.api.endpoints.team_details.delete_team')
-    def test_can_remove_as_team_admin(self, delete_team):
+    def test_can_remove_as_team_admin(self, delete_team, mock_uuid4):
+        class uuid(object):
+            hex = 'abc123'
+
+        mock_uuid4.return_value = uuid
+
         org = self.create_organization()
         team = self.create_team(organization=org)
         project = self.create_project(team=team)  # NOQA
@@ -73,7 +79,10 @@ class TeamDeleteTest(APITestCase):
         assert team.status == TeamStatus.PENDING_DELETION
 
         delete_team.apply_async.assert_called_once_with(
-            kwargs={'object_id': team.id},
+            kwargs={
+                'object_id': team.id,
+                'transaction_id': 'abc123',
+            },
             countdown=3600,
         )
 
