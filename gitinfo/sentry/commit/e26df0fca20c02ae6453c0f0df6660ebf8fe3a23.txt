commit e26df0fca20c02ae6453c0f0df6660ebf8fe3a23
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Feb 4 18:11:29 2020 -0800

    perf(subscriptions): Use cache when fetching `QuerySubscription` in `QuerySubscriptionConsumer`
    
    This will get called every minute for each subscription, and subscriptions will rarely change, so
    this makes sense. Afaict, we auto clear the cache on `post_save` and `post_delete` as part of the
    manager, so this should be fine regardless.

diff --git a/src/sentry/snuba/models.py b/src/sentry/snuba/models.py
index 4ae8506478..a105179639 100644
--- a/src/sentry/snuba/models.py
+++ b/src/sentry/snuba/models.py
@@ -1,11 +1,13 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
 from enum import Enum
 
 from django.db import models
 from django.utils import timezone
 
 from sentry.db.models import FlexibleForeignKey, Model
+from sentry.db.models.manager import BaseManager
 
 
 class QueryAggregations(Enum):
@@ -31,6 +33,10 @@ class QuerySubscription(Model):
     resolution = models.IntegerField()
     date_added = models.DateTimeField(default=timezone.now)
 
+    objects = BaseManager(
+        cache_fields=("pk", "subscription_id"), cache_ttl=int(timedelta(hours=1).total_seconds())
+    )
+
     class Meta:
         app_label = "sentry"
         db_table = "sentry_querysubscription"
diff --git a/src/sentry/snuba/query_subscription_consumer.py b/src/sentry/snuba/query_subscription_consumer.py
index 7b70f2e4a1..7390941379 100644
--- a/src/sentry/snuba/query_subscription_consumer.py
+++ b/src/sentry/snuba/query_subscription_consumer.py
@@ -140,7 +140,7 @@ class QuerySubscriptionConsumer(object):
             return
 
         try:
-            subscription = QuerySubscription.objects.get(
+            subscription = QuerySubscription.objects.get_from_cache(
                 subscription_id=contents["subscription_id"]
             )
         except QuerySubscription.DoesNotExist:
