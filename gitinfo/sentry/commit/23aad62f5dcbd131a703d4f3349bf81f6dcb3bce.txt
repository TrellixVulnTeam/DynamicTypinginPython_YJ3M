commit 23aad62f5dcbd131a703d4f3349bf81f6dcb3bce
Author: Mark Story <mark@sentry.io>
Date:   Wed Oct 30 12:54:14 2019 -0400

    fix(discover) Fix incorrectly handled project_id condition (#15312)
    
    The project_id condition was being mishandled in a few ways. First the
    values were not cast to a int causing queries to fail due to type
    mismatches downstream. In addition to that the safe project list was
    being extended with the user's query which could allow unsafe queries to
    be created. Both of these problems are solved by handling user data and
    validated `filter_keys` separately. The `issue.id` condition is still
    pushed into `filter_keys` as group_ids also have project_id conditions
    applied.
    
    Update incidents to use the `group_ids` parameter, and also add
    compatibility for `issue.id` in case other usage gets merged in before
    I merge.
    
    Fixes SENTRY-D5T
    Fixes SENTRY-D5S
    Fixes SENTRY-D5R

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 9c24e9b097..56054faefc 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -77,7 +77,7 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
             ).distinct()
             if any(p for p in projects if not request.access.has_project_access(p)):
                 raise PermissionDenied
-            params["issue.id"] = list(group_ids)
+            params["group_ids"] = list(group_ids)
             params["project_id"] = list(set([p.id for p in projects] + params["project_id"]))
 
         query = request.GET.get("query")
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 432d6a1b2e..e246df2790 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -73,7 +73,7 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
         default_end = timezone.now()
         default_start = default_end - timedelta(days=90)
         params = {
-            "issue.id": [group.id],
+            "group_ids": [group.id],
             "project_id": [group.project_id],
             "start": start if start else default_start,
             "end": end if end else default_end,
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 1400c04ada..f36b8531e2 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -154,7 +154,7 @@ SEARCH_MAP = {
 SEARCH_MAP.update(**DATASETS[Dataset.Transactions])
 SEARCH_MAP.update(**DATASETS[Dataset.Events])
 
-no_conversion = set(["project_id", "start", "end"])
+no_conversion = set(["start", "end"])
 
 PROJECT_KEY = "project.name"
 
@@ -210,12 +210,14 @@ class SearchVisitor(NodeVisitor):
     key_mappings = {}
     numeric_keys = set(
         [
+            "project_id",
+            "project.id",
+            "issue.id",
             "device.battery_level",
             "device.charging",
             "device.online",
             "device.simulator",
             "error.handled",
-            "issue.id",
             "stack.colno",
             "stack.in_app",
             "stack.lineno",
@@ -526,10 +528,6 @@ def convert_search_boolean_to_snuba_query(search_boolean):
     return [operator, [left, right]]
 
 
-def convert_endpoint_params(params):
-    return [SearchFilter(SearchKey(key), "=", SearchValue(params[key])) for key in params]
-
-
 def convert_search_filter_to_snuba_query(search_filter):
     name = search_filter.key.name
     value = search_filter.value.value
@@ -626,10 +624,6 @@ def get_filter(query=None, params=None):
         except ParseError as e:
             raise InvalidSearchQuery(u"Parse error: %r (column %d)" % (e.expr.name, e.column()))
 
-    # Keys included as url params take precedent if same key is included in search
-    if params is not None:
-        parsed_terms.extend(convert_endpoint_params(params))
-
     kwargs = {"start": None, "end": None, "conditions": [], "project_ids": [], "group_ids": []}
 
     projects = {}
@@ -642,26 +636,41 @@ def get_filter(query=None, params=None):
             for p in Project.objects.filter(id__in=params["project_id"]).values("id", "slug")
         }
 
+    def to_list(value):
+        if isinstance(value, list):
+            return value
+        return [value]
+
     for term in parsed_terms:
         if isinstance(term, SearchFilter):
             name = term.key.name
-            if term.key.name == PROJECT_KEY:
+            if name == PROJECT_KEY:
                 condition = ["project_id", "=", projects.get(term.value.value)]
                 kwargs["conditions"].append(condition)
-            elif name in ("start", "end"):
-                kwargs[name] = term.value.value
-            elif name in ("project_id", "issue.id"):
-                if name == "issue.id":
-                    name = "group_ids"
-                if name == "project_id":
-                    name = "project_ids"
-                value = term.value.value
-                if isinstance(value, int):
-                    value = [value]
-                kwargs[name].extend(value)
+            elif name == "issue.id":
+                kwargs["group_ids"].extend(to_list(term.value.value))
             else:
                 converted_filter = convert_search_filter_to_snuba_query(term)
-                kwargs["conditions"].append(converted_filter)
+                if converted_filter:
+                    kwargs["conditions"].append(converted_filter)
+
+    # Keys included as url params take precedent if same key is included in search
+    # They are also considered safe and to have had access rules applied unlike conditions
+    # from the query string.
+    if params:
+        for key in ("start", "end"):
+            kwargs[key] = params.get(key, None)
+        # OrganizationEndpoint.get_filter() uses project_id, but eventstore.Filter uses project_ids
+        if "project_id" in params:
+            kwargs["project_ids"] = params["project_id"]
+        if "environment" in params:
+            term = SearchFilter(SearchKey("environment"), "=", SearchValue(params["environment"]))
+            kwargs["conditions"].append(convert_search_filter_to_snuba_query(term))
+        if "group_ids" in params:
+            kwargs["group_ids"] = to_list(params["group_ids"])
+        # Deprecated alias, use `group_ids` instead
+        if "issue.id" in params:
+            kwargs["group_ids"] = to_list(params["issue.id"])
 
     return eventstore.Filter(**kwargs)
 
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index f3f0619658..30b01a9e08 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -132,7 +132,7 @@ def calculate_incident_start(query, projects, groups):
     """
     params = {}
     if groups:
-        params["issue.id"] = [g.id for g in groups]
+        params["group_ids"] = [g.id for g in groups]
         end = max(g.last_seen for g in groups) + timedelta(seconds=1)
     else:
         end = timezone.now()
@@ -423,7 +423,7 @@ def bulk_build_incident_query_params(incidents, start=None, end=None):
         }
         group_ids = incident_groups[incident.id]
         if group_ids:
-            params["issue.id"] = group_ids
+            params["group_ids"] = group_ids
         project_ids = incident_projects[incident.id]
         if project_ids:
             params["project_id"] = project_ids
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 1235c99cf2..17f687f945 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -10,7 +10,6 @@ from django.utils import timezone
 from freezegun import freeze_time
 
 from sentry.api.event_search import (
-    convert_endpoint_params,
     event_search_grammar,
     get_filter,
     resolve_field_list,
@@ -485,6 +484,14 @@ class ParseSearchQueryTest(unittest.TestCase):
             )
         ]
 
+    def test_invalid_numeric_fields(self):
+        invalid_queries = ["project.id:one", "issue.id:two", "transaction.duration:>hotdog"]
+        for invalid_query in invalid_queries:
+            with self.assertRaises(
+                InvalidSearchQuery, expected_regex="Invalid format for numeric search"
+            ):
+                parse_search_query(invalid_query)
+
     def test_quotes_filtered_on_raw(self):
         # Enclose the full raw query? Strip it.
         assert parse_search_query('thinger:unknown "what is this?"') == [
@@ -982,37 +989,6 @@ class GetSnubaQueryArgsTest(TestCase):
         filter.project_ids == [p1.id, p2.id]
 
 
-class ConvertEndpointParamsTests(unittest.TestCase):
-    def test_simple(self):
-        assert convert_endpoint_params(
-            {
-                "project_id": [1, 2, 3],
-                "start": datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc),
-                "end": datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc),
-            }
-        ) == [
-            SearchFilter(
-                key=SearchKey(name="start"),
-                operator="=",
-                value=SearchValue(
-                    raw_value=datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc)
-                ),
-            ),
-            SearchFilter(
-                key=SearchKey(name="project_id"),
-                operator="=",
-                value=SearchValue(raw_value=[1, 2, 3]),
-            ),
-            SearchFilter(
-                key=SearchKey(name="end"),
-                operator="=",
-                value=SearchValue(
-                    raw_value=datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc)
-                ),
-            ),
-        ]
-
-
 class ResolveFieldListTest(unittest.TestCase):
     def test_non_string_field_error(self):
         fields = [["any", "thing", "lol"]]
@@ -1334,10 +1310,7 @@ class GetReferenceEventConditionsTest(SnubaTestCase, TestCase):
         self.conditions["groupby"] = ["gpu.name", "browser.name"]
         slug = "{}:{}".format(self.project.slug, event.event_id)
         result = get_reference_event_conditions(self.organization, self.conditions, slug)
-        assert result == [
-            ["gpu.name", "=", "nvidia 8600"],
-            ["browser.name", "=", "Firefox"],
-        ]
+        assert result == [["gpu.name", "=", "nvidia 8600"], ["browser.name", "=", "Firefox"]]
 
     def test_issue_field(self):
         event = self.store_event(
diff --git a/tests/snuba/api/endpoints/test_group_events.py b/tests/snuba/api/endpoints/test_group_events.py
index 5a2453c39e..c2aa6f52ad 100644
--- a/tests/snuba/api/endpoints/test_group_events.py
+++ b/tests/snuba/api/endpoints/test_group_events.py
@@ -288,6 +288,4 @@ class GroupEventsTest(APITestCase, SnubaTestCase):
             response = self.client.get(url, format="json")
             assert response.status_code == 200, response.content
             assert len(response.data) == 1, response.data
-            assert sorted(map(lambda x: x["eventID"], response.data)) == sorted(
-                [six.text_type(event.event_id)]
-            )
+            assert map(lambda x: x["eventID"], response.data) == [six.text_type(event.event_id)]
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 8a47f59764..ef68867853 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import six
 from six.moves.urllib.parse import urlencode
 
 from django.utils import timezone
@@ -596,3 +597,31 @@ class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
         self.assert_events_in_response(
             response, [event_1.event_id, event_2.event_id, event_3.event_id, event_4.event_id]
         )
+
+    def test_project_id_filter(self):
+        team = self.create_team(organization=self.organization, members=[self.user])
+        project = self.create_project(organization=self.organization, teams=[team])
+        self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "message": "best event",
+                "timestamp": iso_format(self.min_ago),
+            },
+            project_id=project.id,
+        )
+        url = reverse(
+            "sentry-api-0-organization-events", kwargs={"organization_slug": self.organization.slug}
+        )
+
+        self.login_as(user=self.user)
+        response = self.client.get(
+            url, {"query": "project_id:{}".format(project.id)}, format="json"
+        )
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]["projectID"] == six.text_type(project.id)
+
+        response = self.client.get(url, {"query": "project_id:9"}, format="json")
+        # project_id filter should apply
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 0
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index e1e142821a..6e61210a0d 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -321,3 +321,18 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
         # We could get more results depending on where the 30 min
         # windows land.
         assert len(items) >= 3
+
+    def test_project_id_query_filter(self):
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "end": iso_format(before_now()),
+                    "start": iso_format(before_now(hours=2)),
+                    "query": "project_id:1",
+                    "interval": "30m",
+                    "yAxis": "count()",
+                },
+            )
+        assert response.status_code == 200
