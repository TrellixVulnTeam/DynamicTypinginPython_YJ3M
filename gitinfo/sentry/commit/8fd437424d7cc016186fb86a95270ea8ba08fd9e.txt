commit 8fd437424d7cc016186fb86a95270ea8ba08fd9e
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri May 10 09:38:40 2019 -0700

    feat(incidents): Add incident status functionality (#13140)
    
    Closes SEN-559

diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
index d7876c8d5f..e5c3875e97 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
@@ -10,14 +10,51 @@ import InlineSvg from 'app/components/inlineSvg';
 import {PageHeader} from 'app/styles/organization';
 import space from 'app/styles/space';
 import SubscribeButton from 'app/components/subscribeButton';
+import DropdownControl from 'app/components/dropdownControl';
+import MenuItem from 'app/components/menuItem';
+import Access from 'app/components/acl/access';
+import DropdownButton from 'app/components/dropdownButton';
+
+import Status from '../status';
+import {isOpen} from '../utils';
 
 export default class IncidentHeader extends React.Component {
   static propTypes = {
     incident: SentryTypes.Incident,
     params: PropTypes.object.isRequired,
     onSubscriptionChange: PropTypes.func.isRequired,
+    onStatusChange: PropTypes.func.isRequired,
   };
 
+  renderStatus() {
+    const {incident, onStatusChange} = this.props;
+
+    const isIncidentOpen = isOpen(incident);
+
+    return (
+      <Access
+        access={['org:write']}
+        renderNoAccessMessage={() => <Status incident={incident} />}
+      >
+        <DropdownControl
+          button={
+            // eslint-disable-next-line no-shadow
+            ({getActorProps, isOpen}) => (
+              <DropdownButton {...getActorProps()} isOpen={isOpen}>
+                <Status incident={incident} />
+              </DropdownButton>
+            )
+          }
+          menuWidth="160px"
+        >
+          <StyledMenuItem onSelect={onStatusChange}>
+            {isIncidentOpen ? t('Close this incident') : t('Reopen this incident')}
+          </StyledMenuItem>
+        </DropdownControl>
+      </Access>
+    );
+  }
+
   render() {
     const {incident, params, onSubscriptionChange} = this.props;
 
@@ -37,6 +74,10 @@ export default class IncidentHeader extends React.Component {
         </HeaderItem>
         {incident && (
           <GroupedHeaderItems>
+            <HeaderItem>
+              <ItemTitle>{t('Status')}</ItemTitle>
+              <ItemValue>{this.renderStatus()}</ItemValue>
+            </HeaderItem>
             <HeaderItem>
               <ItemTitle>{t('Event count')}</ItemTitle>
               <ItemValue>{incident.eventCount}</ItemValue>
@@ -104,3 +145,9 @@ const Chevron = styled(InlineSvg)`
   color: ${p => p.theme.gray1};
   margin: 0 ${space(0.5)};
 `;
+
+const StyledMenuItem = styled(MenuItem)`
+  font-size: ${p => p.theme.fontSizeMedium};
+  text-align: left;
+  padding: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx
index f1c6548639..32c7c4a1db 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx
@@ -10,7 +10,13 @@ import {t} from 'app/locale';
 
 import IncidentHeader from './header';
 import Incidents from './incidents';
-import {fetchIncident, updateSubscription} from '../utils';
+import {
+  INCIDENT_STATUS,
+  fetchIncident,
+  updateSubscription,
+  updateStatus,
+  isOpen,
+} from '../utils';
 
 class OrganizationIncidentDetails extends React.Component {
   static propTypes = {
@@ -48,19 +54,45 @@ class OrganizationIncidentDetails extends React.Component {
       params: {orgId, incidentId},
     } = this.props;
 
-    const isSubscribed = !this.state.incident.isSubscribed;
+    const isSubscribed = this.state.incident.isSubscribed;
 
-    updateSubscription(api, orgId, incidentId, isSubscribed)
-      .then(() => {
-        this.setState(state => ({
-          incident: {...state.incident, isSubscribed},
-        }));
-      })
-      .catch(() => {
-        addErrorMessage(
-          t('An error occurred, your subscription status was not changed.')
-        );
-      });
+    const newIsSubscribed = !isSubscribed;
+
+    this.setState(state => ({
+      incident: {...state.incident, isSubscribed: newIsSubscribed},
+    }));
+
+    updateSubscription(api, orgId, incidentId, isSubscribed).catch(() => {
+      this.setState(state => ({
+        incident: {...state.incident, isSubscribed},
+      }));
+      addErrorMessage(t('An error occurred, your subscription status was not changed.'));
+    });
+  };
+
+  handleStatusChange = () => {
+    const {
+      api,
+      params: {orgId, incidentId},
+    } = this.props;
+
+    const {status} = this.state.incident;
+
+    const newStatus = isOpen(this.state.incident)
+      ? INCIDENT_STATUS.CLOSED
+      : INCIDENT_STATUS.CREATED;
+
+    this.setState(state => ({
+      incident: {...state.incident, newStatus},
+    }));
+
+    updateStatus(api, orgId, incidentId, status).catch(() => {
+      this.setState(state => ({
+        incident: {...state.incident, status},
+      }));
+
+      addErrorMessage(t('An error occurred, your incident status was not changed.'));
+    });
   };
 
   render() {
@@ -72,6 +104,7 @@ class OrganizationIncidentDetails extends React.Component {
           params={this.props.params}
           incident={incident}
           onSubscriptionChange={this.handleSubscriptionChange}
+          onStatusChange={this.handleStatusChange}
         />
         {incident && <Incidents incident={incident} />}
         {isLoading && (
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx
index 9e67cc8253..2f277fc098 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx
@@ -1,3 +1,4 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
@@ -10,17 +11,19 @@ import {isOpen} from './utils';
 
 export default class Status extends React.Component {
   static propTypes = {
+    className: PropTypes.string,
     incident: SentryTypes.Incident.isRequired,
   };
 
   render() {
-    const isIncidentOpen = isOpen(this.props.incident);
+    const {className, incident} = this.props;
+    const isIncidentOpen = isOpen(incident);
 
     const icon = isIncidentOpen ? 'icon-circle-exclamation' : 'icon-circle-check';
     const text = isIncidentOpen ? t('Open') : t('Closed');
 
     return (
-      <Container>
+      <Container className={className}>
         <Icon src={icon} isOpen={isIncidentOpen} />
         {text}
       </Container>
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
index 296a5518e6..985a765191 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
@@ -1,3 +1,9 @@
+export const INCIDENT_STATUS = {
+  DETECTED: 0,
+  CREATED: 1,
+  CLOSED: 2,
+};
+
 export function fetchIncident(api, orgId, incidentId) {
   return api.requestPromise(`/organizations/${orgId}/incidents/${incidentId}/`);
 }
@@ -11,6 +17,15 @@ export function updateSubscription(api, orgId, incidentId, isSubscribed) {
   });
 }
 
+export function updateStatus(api, orgId, incidentId, status) {
+  return api.requestPromise(`/organizations/${orgId}/incidents/${incidentId}/`, {
+    method: 'PUT',
+    data: {
+      status,
+    },
+  });
+}
+
 /**
  * Is incident open?
  *
@@ -20,10 +35,10 @@ export function updateSubscription(api, orgId, incidentId, isSubscribed) {
 
 export function isOpen(incident) {
   switch (incident.status) {
-    case 2: // closed
+    case INCIDENT_STATUS.CLOSED:
       return false;
-    case 0: // detected
-    case 1: // created
+    case INCIDENT_STATUS.DETECTED:
+    case INCIDENT_STATUS.CREATED:
     default:
       return true;
   }
