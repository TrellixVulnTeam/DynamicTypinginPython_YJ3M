commit 57ca4d037177e6828e53519039f682bc1fb4b06b
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 15 16:08:46 2015 -0700

    Various improvements to error embed
    
    - Refactor some JS code in prep for public API
    - Add attachOnLoad option
    - Add parent option
    - Add CORS support

diff --git a/src/sentry/templates/sentry/error-page-embed.js b/src/sentry/templates/sentry/error-page-embed.js
index 609a3de74c..620d74ad82 100644
--- a/src/sentry/templates/sentry/error-page-embed.js
+++ b/src/sentry/templates/sentry/error-page-embed.js
@@ -1,12 +1,21 @@
 (function(window, document, JSON){
   'use strict';
+  // TODO(dcramer): expose API for building a new error embed so things like
+  // JS applications can render this on demand
+  /**
+    window.sentryConfig = {
+      dsn: 'http://public@example.com/1',
+      eventId: '...',
+      attachOnLoad: true,
+      parent: document.body
+    };
+   */
 
   var GENERIC_ERROR = '<p class="message-error">An unknown error occurred while submitting your report. Please try again.</p>';
   var FORM_ERROR = '<p class="message-error">Some fields were invalid. Please correct the errors and try again.</p>';
 
   var template = {{ template }};
   var endpoint = {{ endpoint }};
-  var options = window.sentryConfig;
   var encode = window.encodeURIComponent;
 
   var escape = function(str) {
@@ -27,11 +36,72 @@
       : f();
   };
 
-  var close = function() {
-    document.body.removeChild(child);
+  var SentryErrorEmbed = function(options) {
+    this.build();
+  };
+
+  SentryErrorEmbed.prototype.build = function() {
+    this.element = document.createElement('div');
+    this.element.className = 'sentry-error-embed-wrapper';
+    this.element.innerHTML = template;
+    this.element.onclick = function(e){
+      if (e.target !== this.element) return;
+      close();
+    }.bind(this);
+
+    this._form = this.element.getElementsByTagName('form')[0];
+    this._form.onsumbit = function(e) {
+      e.preventDefault();
+      this.submit(this.serialize());
+    }.bind(this);
+
+    this._submitBtn = this.element.getElementsByTagName('button')[0]
+    this._submitBtn.onclick = function(e) {
+      e.preventDefault();
+      this.submit(this.serialize());
+    }.bind(this);
+
+    var divTags = this._form.getElementsByTagName('div');
+    for (var i = 0; i < divTags.length; i++) {
+      if (divTags[i].className === 'error-wrapper') {
+        this._errorWrapper = divTags[i];
+      }
+      if (divTags[i].className === 'form-content') {
+        this._formContent = divTags[i];
+      }
+    }
+
+    var linkTags = this.element.getElementsByTagName('a');
+    for (var i = 0; i < linkTags.length; i++) {
+      if (linkTags[i].className === 'close') {
+        linkTags[i].onclick = function(e) {
+          e.preventDefault();
+          this.close();
+        }.bind(this);
+      }
+    }
+
+    this._formMap = {};
+    var node;
+    for (var i = 0; i < this._form.elements.length; i++) {
+      node = this._form.elements[i];
+      this._formMap[node.name] = node.parentNode;
+    }
+  };
+
+  SentryErrorEmbed.prototype.serialize = function() {
+    return serialize(this._form);
+  };
+
+  SentryErrorEmbed.prototype.close = function() {
+    this.element.parentNode.removeChild(this.element);
   };
 
-  var submit = function(body) {
+  SentryErrorEmbed.prototype.submit = function(body) {
+    if (this._submitInProgress)
+      return;
+    this._submitInProgress = true;
+
     var xhr;
     if (window.XMLHttpRequest) {
       // code for IE7+, Firefox, Chrome, Opera, Safari
@@ -44,13 +114,14 @@
     xhr.onreadystatechange = function() {
       if (xhr.readyState === XMLHttpRequest.DONE) {
         if (xhr.status === 200) {
-          formContent.innerHTML = '<p class="message-success">Your report has been sent. Thank you!</p>';
-          submitBtn.parentNode.removeChild(submitBtn);
+          this._errorWrapper.innerHTML = '';
+          this._formContent.innerHTML = '<p class="message-success">Your report has been sent. Thank you!</p>';
+          this._submitBtn.parentNode.removeChild(this._submitBtn);
         } else if (xhr.status == 400) {
           var data = JSON.parse(xhr.responseText);
           var node;
-          for (var key in formMap) {
-            node = formMap[key]
+          for (var key in this._formMap) {
+            node = this._formMap[key]
             if (data.errors[key]) {
               if (!/form-errors/.test(node.className)) {
                 node.className += " form-errors";
@@ -59,65 +130,27 @@
               node.className = node.className.replace(/form-errors/, "");
             }
           }
-          errorWrapper.innerHTML = FORM_ERROR;
+          this._errorWrapper.innerHTML = FORM_ERROR;
         } else {
-          errorWrapper.innerHTML = GENERIC_ERROR;
+          this._errorWrapper.innerHTML = GENERIC_ERROR;
         }
+        this._submitInProgress = false;
       }
-    }
+    }.bind(this);
     xhr.open("POST", endpoint, true);
     xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
     xhr.send(body);
   };
 
-  var child = document.createElement('div');
-  child.className = 'sentry-error-embed-wrapper';
-  child.innerHTML = template;
-  child.onclick = function(e){
-    if (e.target !== child) return;
-    close();
-  };
-
-  var form = child.getElementsByTagName('form')[0];
-  form.onsumbit = function(e) {
-    e.preventDefault();
-    submit(serialize(form));
+  SentryErrorEmbed.prototype.attach = function(parent) {
+    parent.appendChild(this.element);
   };
 
-  var submitBtn = child.getElementsByTagName('button')[0]
-  submitBtn.onclick = function(e) {
-    e.preventDefault();
-    submit(serialize(form));
-  };
-
-  var errorWrapper;
-  var formContent;
-  var divTags = form.getElementsByTagName('div');
-  for (var i = 0; i < divTags.length; i++) {
-    if (divTags[i].className === 'error-wrapper') {
-      errorWrapper = divTags[i];
-    }
-    if (divTags[i].className === 'form-content') {
-      formContent = divTags[i];
-    }
-  }
-
-  var linkTags = child.getElementsByTagName('a');
-  for (var i = 0; i < linkTags.length; i++) {
-    if (linkTags[i].className === 'close') {
-      linkTags[i].onclick = function(e) {
-        e.preventDefault();
-        close();
-      }
-    }
-  }
-
-  var formMap = {};
-  for (var i = 0; i < form.elements.length; i++) {
-    formMap[form.elements[i].name] = form.elements[i].parentNode;
+  var options = window.sentryConfig;
+  var embed = new SentryErrorEmbed(options);
+  if (options.attachOnLoad !== false) {
+    onReady(function(){
+      embed.attach(options.parent || document.body);
+    });
   }
-
-  onReady(function(){
-    document.body.appendChild(child);
-  });
 }(window, document, JSON));
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index 319130b46a..3edae3c6f1 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -43,31 +43,46 @@ class ErrorPageEmbedView(View):
     def _get_origin(self, request):
         return request.META.get('HTTP_ORIGIN', request.META.get('HTTP_REFERER'))
 
+    def _json_response(self, request, context=None, status=200):
+        if context:
+            content = json.dumps(context)
+        else:
+            content = ''
+        response = HttpResponse(content, status=status, content_type='application/json')
+        response['Access-Control-Allow-Origin'] = request.META.get('HTTP_ORIGIN', '')
+        response['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
+        response['Access-Control-Max-Age'] = '1000'
+        response['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-Requested-With'
+        return response
+
     @csrf_exempt
     def dispatch(self, request):
-        # TODO(dcramer): since we cant use a csrf cookie we should at the very
-        # least sign the request / add some kind of nonce
-        initial = {
-            'name': request.GET.get('name'),
-            'email': request.GET.get('email'),
-        }
-
         try:
             event_id = request.GET['eventId']
         except KeyError:
-            return HttpResponse(status=400)
+            return self._json_response(request, status=400)
 
         key = self._get_project_key(request)
         if not key:
-            return HttpResponse(status=404)
+            return self._json_response(request, status=404)
 
         origin = self._get_origin(request)
         if not origin:
-            return HttpResponse(status=403)
+            return self._json_response(request, status=403)
 
         if not is_valid_origin(origin, key.project):
             return HttpResponse(status=403)
 
+        if request.method == 'OPTIONS':
+            return self._json_response(request)
+
+        # TODO(dcramer): since we cant use a csrf cookie we should at the very
+        # least sign the request / add some kind of nonce
+        initial = {
+            'name': request.GET.get('name'),
+            'email': request.GET.get('email'),
+        }
+
         form = UserReportForm(request.POST if request.method == 'POST' else None,
                               initial=initial)
         if form.is_valid():
@@ -85,9 +100,9 @@ class ErrorPageEmbedView(View):
             report.save()
             return HttpResponse(status=200)
         elif request.method == 'POST':
-            return HttpResponse(json.dumps({
+            return self._json_response(request, {
                 "errors": dict(form.errors),
-            }), status=400, content_type='application/json')
+            }, status=400)
 
         template = render_to_string('sentry/error-page-embed.html', {
             'form': form,
