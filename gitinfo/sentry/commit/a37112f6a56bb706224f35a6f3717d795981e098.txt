commit a37112f6a56bb706224f35a6f3717d795981e098
Author: Filippo Pacifici <fpacifici@sentry.io>
Date:   Mon Jul 15 10:16:50 2019 -0700

    feat(issueless events) Skip group specific phases in post_process for issueless events (#13899)
    
    Makes event_processed signal independent from event group, so it can work with issueless events as well.
    It also tracks down through stats the case where the event platform and group platform do not match

diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index a49a6d72e4..30d1ea0e7b 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -57,12 +57,14 @@ def record_first_event(project, **kwargs):
 
 
 @event_processed.connect(weak=False)
-def record_event_processed(project, group, event, **kwargs):
+def record_event_processed(project, event, **kwargs):
     feature_slugs = []
 
+    platform = event.group.platform if event.group else event.platform
+
     # Platform
-    if group.platform in manager.location_slugs('language'):
-        feature_slugs.append(group.platform)
+    if platform in manager.location_slugs('language'):
+        feature_slugs.append(platform)
 
     # Release Tracking
     if event.get_tag('sentry:release'):
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index bd0b9f1f20..a126502abb 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -199,7 +199,7 @@ def record_member_joined(member, organization, **kwargs):
 
 
 @event_processed.connect(weak=False)
-def record_release_received(project, group, event, **kwargs):
+def record_release_received(project, event, **kwargs):
     if not event.get_tag('sentry:release'):
         return
 
@@ -221,7 +221,7 @@ def record_release_received(project, group, event, **kwargs):
 
 
 @event_processed.connect(weak=False)
-def record_user_context_received(project, group, event, **kwargs):
+def record_user_context_received(project, event, **kwargs):
     user_context = event.data.get('user')
     if not user_context:
         return
@@ -247,7 +247,7 @@ def record_user_context_received(project, group, event, **kwargs):
 
 
 @event_processed.connect(weak=False)
-def record_sourcemaps_received(project, group, event, **kwargs):
+def record_sourcemaps_received(project, event, **kwargs):
     if not has_sourcemap(event):
         return
 
diff --git a/src/sentry/receivers/similarity.py b/src/sentry/receivers/similarity.py
index 68f7621346..7d9f66022b 100644
--- a/src/sentry/receivers/similarity.py
+++ b/src/sentry/receivers/similarity.py
@@ -6,7 +6,7 @@ from sentry.similarity import features as similarity_features
 
 
 @event_processed.connect(weak=False)
-def record(project, group, event, **kwargs):
+def record(project, event, **kwargs):
     if not feature_flags.has('projects:similarity-indexing', project):
         return
 
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 76e19887fe..ffc2e943e4 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -60,7 +60,7 @@ event_dropped = BetterSignal(providing_args=["ip", "data", "project", "reason_co
 event_filtered = BetterSignal(providing_args=["ip", "data", "project"])
 event_received = BetterSignal(providing_args=["ip", "project"])
 pending_delete = BetterSignal(providing_args=['instance', 'actor'])
-event_processed = BetterSignal(providing_args=['project', 'group', 'event'])
+event_processed = BetterSignal(providing_args=['project', 'event'])
 event_saved = BetterSignal(providing_args=["project"])
 
 # Organization Onboarding Signals
diff --git a/src/sentry/similarity/features.py b/src/sentry/similarity/features.py
index 7e23027806..cfa75dc438 100644
--- a/src/sentry/similarity/features.py
+++ b/src/sentry/similarity/features.py
@@ -102,7 +102,6 @@ class FeatureSet(object):
 
         items = []
         for event in events:
-            # TODO: how we index events?
             if not event.group_id:
                 continue
             for label, features in self.extract(event).items():
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 5cda7007ce..b21553670e 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -87,8 +87,7 @@ def _should_send_error_created_hooks(project):
 
 def _capture_stats(event, is_new):
     # TODO(dcramer): limit platforms to... something?
-    group = event.group
-    platform = group.platform
+    platform = event.group.platform if event.group else event.platform
     if not platform:
         return
     platform = platform.split('-', 1)[0].split('_', 1)[0]
@@ -103,6 +102,16 @@ def _capture_stats(event, is_new):
     metrics.incr(u'events.processed.{platform}'.format(platform=platform), skip_internal=False)
     metrics.timing('events.size.data', event.size, tags=tags)
 
+    # This is an experiment to understand whether we have, in production,
+    # mismatches between event and group before we permanently rely on events
+    # for project and platform. before adding some more verbose logging ont this
+    # case, using a stats will give us a sense of the magnitude of the problem.
+    if event.group:
+        if event.group.platform != event.platform:
+            metrics.incr('events.platform_mismatch', tags=tags)
+        if event.group.project_id != event.project_id:
+            metrics.incr('events.project_mismatch')
+
 
 def check_event_already_post_processed(event):
     cluster_key = getattr(settings, 'SENTRY_POST_PROCESSING_LOCK_REDIS_CLUSTER', None)
@@ -178,7 +187,12 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
 
         handle_owner_assignment(event.project, event.group, event)
 
-        rp = RuleProcessor(event, is_new, is_regression, is_new_group_environment, has_reappeared)
+        rp = RuleProcessor(
+            event,
+            is_new,
+            is_regression,
+            is_new_group_environment,
+            has_reappeared)
         has_alert = False
         # TODO(dcramer): ideally this would fanout, but serializing giant
         # objects back and forth isn't super efficient
@@ -228,7 +242,6 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
         event_processed.send_robust(
             sender=post_process_group,
             project=event.project,
-            group=event.group,
             event=event,
             primary_hash=kwargs.get('primary_hash'),
         )
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index e5529060ca..7b4ca226ac 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -156,6 +156,9 @@ class Fixtures(object):
             group = self.group
         return Factories.create_event(event_id=event_id, group=group, *args, **kwargs)
 
+    def create_issueless_event(self, event_id=None, *args, **kwargs):
+        return Factories.create_event(event_id=event_id, group=None, *args, **kwargs)
+
     def store_event(self, *args, **kwargs):
         return Factories.store_event(*args, **kwargs)
 
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index a88f4f6bdb..b059ea2d23 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -42,19 +42,13 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete is None
 
     def test_all_passed_feature_slugs_are_complete(self):
-        group1 = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         event1 = self.create_full_event()
-        group2 = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         event2 = self.create_full_event(event_id='b')
         event_processed.send(
-            project=self.project, group=group1, event=event1, sender=type(self.project)
+            project=self.project, event=event1, sender=type(self.project)
         )
         event_processed.send(
-            project=self.project, group=group2, event=event2, sender=type(self.project)
+            project=self.project, event=event2, sender=type(self.project)
         )
 
         feature_complete = FeatureAdoption.objects.get_by_slug(
@@ -81,9 +75,9 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='javascript', message='javascript error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'javascript'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         js = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="javascript")
@@ -93,9 +87,9 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='python', message='python error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group)
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         python = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="python")
@@ -105,9 +99,9 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='node', message='node error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'node'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         node = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="node")
@@ -117,9 +111,9 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='ruby', message='ruby error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'ruby'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         ruby = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="ruby")
@@ -129,9 +123,9 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='java', message='java error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'java'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         java = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="java")
@@ -141,9 +135,9 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='cocoa', message='cocoa error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'cocoa'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         cocoa = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="cocoa")
@@ -153,29 +147,33 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='objc', message='objc error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'objc'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         objc = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="objc")
         assert objc.complete
 
     def test_php(self):
-        group = self.create_group(project=self.project, platform='php', message='php error message')
-        event = self.create_event()
+        group = self.create_group(
+            project=self.project, platform='php', message='php error message'
+        )
+        event = self.create_event(group=group, data={'platform': 'php'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         php = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="php")
         assert php.complete
 
     def test_go(self):
-        group = self.create_group(project=self.project, platform='go', message='go error message')
-        event = self.create_event()
+        group = self.create_group(
+            project=self.project, platform='go', message='go error message'
+        )
+        event = self.create_event(group=group, data={'platform': 'go'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         go = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="go")
@@ -183,21 +181,23 @@ class FeatureAdoptionTest(TestCase):
 
     def test_csharp(self):
         group = self.create_group(
-            project=self.project, platform='csharp', message='C# error message'
+            project=self.project, platform='csharp', message='csharp error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'csharp'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         csharp = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="csharp")
         assert csharp.complete
 
     def test_perl(self):
-        group = self.create_group(project=self.project, platform='perl', message='C# error message')
-        event = self.create_event()
+        group = self.create_group(
+            project=self.project, platform='perl', message='perl error message'
+        )
+        event = self.create_event(group=group, data={'platform': 'perl'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         perl = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="perl")
@@ -205,21 +205,23 @@ class FeatureAdoptionTest(TestCase):
 
     def test_elixir(self):
         group = self.create_group(
-            project=self.project, platform='elixir', message='C# error message'
+            project=self.project, platform='elixir', message='elixir error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'elixir'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         elixir = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="elixir")
         assert elixir.complete
 
     def test_cfml(self):
-        group = self.create_group(project=self.project, platform='cfml', message='C# error message')
-        event = self.create_event()
+        group = self.create_group(
+            project=self.project, platform='cfml', message='cfml error message'
+        )
+        event = self.create_event(group=group, data={'platform': 'cfml'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         cfml = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="cfml")
@@ -227,33 +229,32 @@ class FeatureAdoptionTest(TestCase):
 
     def test_groovy(self):
         group = self.create_group(
-            project=self.project, platform='groovy', message='C# error message'
+            project=self.project, platform='groovy', message='groovy error message'
         )
-        event = self.create_event()
+        event = self.create_event(group=group, data={'platform': 'groovy'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         groovy = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="groovy")
         assert groovy.complete
 
     def test_csp(self):
-        group = self.create_group(project=self.project, platform='csp', message='C# error message')
-        event = self.create_event()
+        group = self.create_group(
+            project=self.project, platform='csp', message='csp error message'
+        )
+        event = self.create_event(group=group, data={'platform': 'csp'})
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         csp = FeatureAdoption.objects.get_by_slug(organization=self.organization, slug="csp")
         assert csp.complete
 
     def test_release_tracking(self):
-        group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         event = self.create_full_event()
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         release_tracking = FeatureAdoption.objects.get_by_slug(
@@ -262,12 +263,9 @@ class FeatureAdoptionTest(TestCase):
         assert release_tracking
 
     def test_environment_tracking(self):
-        group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         event = self.create_full_event()
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         environment_tracking = FeatureAdoption.objects.get_by_slug(
@@ -279,9 +277,9 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='javascript', message='javascript error message'
         )
-        event = self.create_full_event()
+        event = self.create_full_event(group=group)
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         javascript = FeatureAdoption.objects.get_by_slug(
@@ -305,12 +303,9 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete
 
     def test_user_tracking(self):
-        group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         event = self.create_full_event()
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         feature_complete = FeatureAdoption.objects.get_by_slug(
@@ -404,14 +399,11 @@ class FeatureAdoptionTest(TestCase):
                     ]
                 }
             }"""
-        group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         userless_event = self.create_event(
             event_id='a', platform='javascript', data=json.loads(userless_payload)
         )
         event_processed.send(
-            project=self.project, group=group, event=userless_event, sender=type(self.project)
+            project=self.project, event=userless_event, sender=type(self.project)
         )
 
         feature_complete = FeatureAdoption.objects.get_by_slug(
@@ -504,14 +496,11 @@ class FeatureAdoptionTest(TestCase):
                     ]
                 }
             }"""
-        group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         envless_event = self.create_event(
             event_id='a', platform='javascript', data=json.loads(envless_payload)
         )
         event_processed.send(
-            project=self.project, group=group, event=envless_event, sender=type(self.project)
+            project=self.project, event=envless_event, sender=type(self.project)
         )
 
         feature_complete = FeatureAdoption.objects.get_by_slug(
@@ -520,14 +509,11 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete is None
 
     def test_custom_tags(self):
-        group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         event = self.create_full_event()
         event.data['tags'].append(('foo', 'bar'))
         assert event.get_tag('foo') == 'bar'
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         custom_tags = FeatureAdoption.objects.get_by_slug(
@@ -536,12 +522,9 @@ class FeatureAdoptionTest(TestCase):
         assert custom_tags
 
     def test_source_maps(self):
-        group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         event = self.create_full_event()
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         source_maps = FeatureAdoption.objects.get_by_slug(
@@ -550,12 +533,9 @@ class FeatureAdoptionTest(TestCase):
         assert source_maps
 
     def test_breadcrumbs(self):
-        group = self.create_group(
-            project=self.project, platform='javascript', message='javascript error message'
-        )
         event = self.create_full_event()
         event_processed.send(
-            project=self.project, group=group, event=event, sender=type(self.project)
+            project=self.project, event=event, sender=type(self.project)
         )
 
         breadcrumbs = FeatureAdoption.objects.get_by_slug(
@@ -574,7 +554,7 @@ class FeatureAdoptionTest(TestCase):
             sender=type(self.project),
         )
         event_processed.send(
-            project=self.project, group=simple_event.group, event=simple_event, sender=type(
+            project=self.project, event=simple_event, sender=type(
                 self.project)
         )
 
@@ -589,7 +569,7 @@ class FeatureAdoptionTest(TestCase):
 
         full_event = self.create_full_event()
         event_processed.send(
-            project=self.project, group=full_event.group, event=full_event, sender=type(
+            project=self.project, event=full_event, sender=type(
                 self.project)
         )
 
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 132d81ad9d..dc51b32471 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -89,7 +89,7 @@ class OrganizationOnboardingTaskTest(TestCase):
         now = timezone.now()
         project = self.create_project(first_event=now)
         event = self.create_full_event()
-        event_processed.send(project=project, group=self.group, event=event, sender=type(project))
+        event_processed.send(project=project, event=event, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(
             organization=project.organization,
@@ -272,7 +272,7 @@ class OrganizationOnboardingTaskTest(TestCase):
         event = self.create_full_event(project=project)
         member = self.create_member(organization=self.organization, teams=[self.team], user=user)
 
-        event_processed.send(project=project, group=event.group, event=event, sender=type(project))
+        event_processed.send(project=project, event=event, sender=type(project))
         project_created.send(project=project, user=user, sender=type(project))
         project_created.send(project=second_project, user=user, sender=type(second_project))
 
