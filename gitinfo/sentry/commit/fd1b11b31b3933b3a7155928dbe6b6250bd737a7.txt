commit fd1b11b31b3933b3a7155928dbe6b6250bd737a7
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jan 13 11:52:11 2020 -0800

    feat(ui): Update Alerts list design (#16383)
    
    * Change title and column name to "Alerts"
    * Change design of status badges and add a placeholder for severity
    * Change date format to MM/DD/YYYY (accounts for locale)

diff --git a/src/sentry/static/sentry/app/views/incidents/list/index.tsx b/src/sentry/static/sentry/app/views/incidents/list/index.tsx
index 6ac798fa83..42e1c7a3b4 100644
--- a/src/sentry/static/sentry/app/views/incidents/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/list/index.tsx
@@ -69,7 +69,7 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
           </TitleAndSparkLine>
           <Status incident={incident} />
           <div>
-            {started.format('LL')}
+            {started.format('L')}
             <LightDuration seconds={getDynamicText({value: duration, fixed: 1200})} />
           </div>
           <NumericColumn>
@@ -103,9 +103,12 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
         <Panel>
           <PanelHeader>
             <TableLayout>
-              <div>{t('Incident')}</div>
+              <TitleAndSparkLine>
+                <div>{t('Alert')}</div>
+                <div>{t('Trend')}</div>
+              </TitleAndSparkLine>
               <div>{t('Status')}</div>
-              <div>{t('Started')}</div>
+              <div>{t('Start time (duration)')}</div>
               <NumericColumn>{t('Users affected')}</NumericColumn>
               <NumericColumn>{t('Total events')}</NumericColumn>
             </TableLayout>
@@ -140,11 +143,11 @@ class IncidentsListContainer extends React.Component<Props> {
     const status = query.status === undefined ? DEFAULT_QUERY_STATUS : query.status;
 
     return (
-      <DocumentTitle title={`Incidents - ${orgId} - Sentry`}>
+      <DocumentTitle title={`Alerts- ${orgId} - Sentry`}>
         <PageContent>
           <PageHeader>
             <PageHeading>
-              {t('Incidents')} <BetaTag />
+              {t('Alerts')} <BetaTag />
             </PageHeading>
 
             <Actions>
diff --git a/src/sentry/static/sentry/app/views/incidents/status.tsx b/src/sentry/static/sentry/app/views/incidents/status.tsx
index 475171d96e..7e0880ac28 100644
--- a/src/sentry/static/sentry/app/views/incidents/status.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/status.tsx
@@ -25,24 +25,71 @@ export default class Status extends React.Component<Props> {
     const {className, incident} = this.props;
     const isIncidentOpen = isOpen(incident);
 
-    const icon = isIncidentOpen ? 'icon-circle-exclamation' : 'icon-circle-check';
-    const text = isIncidentOpen ? t('Open') : t('Closed');
+    // TODO(incidents): Make this work
+    const status = !isIncidentOpen
+      ? 'resolved'
+      : Math.random() < 0.5
+      ? 'critical'
+      : 'warning';
+    const isResolved = status === 'resolved';
+    const isCritical = status === 'critical';
+
+    const icon = isResolved
+      ? 'icon-circle-check'
+      : isCritical
+      ? 'icon-circle-exclamation'
+      : 'icon-warning-sm';
+
+    const text = isResolved ? t('Resolved') : isCritical ? t('Critical') : t('Warning');
 
     return (
-      <Wrapper className={className}>
-        <Icon src={icon} isOpen={isIncidentOpen} />
+      <Wrapper status={status} className={className}>
+        <Icon src={icon} status={status} isOpen={isIncidentOpen} />
         {text}
       </Wrapper>
     );
   }
 }
 
-const Wrapper = styled('div')`
+type StatusType = 'warning' | 'critical' | 'resolved';
+
+type WrapperProps = {status: StatusType};
+
+function getHighlight({theme, status}) {
+  if (status === 'resolved') {
+    return theme.greenDark;
+  } else if (status === 'warning') {
+    return theme.yellowDark;
+  }
+
+  return theme.redDark;
+}
+
+function getColor({theme, status}) {
+  if (status === 'resolved') {
+    return theme.greenLightest;
+  } else if (status === 'warning') {
+    return theme.yellowLightest;
+  }
+
+  return theme.redLightest;
+}
+
+const Wrapper = styled('div')<WrapperProps>`
   display: flex;
   align-items: center;
+  justify-self: flex-start;
+  background-color: ${getColor};
+  border: 1px solid ${getHighlight};
+  border-radius: ${p => p.theme.borderRadius};
+  color: ${getHighlight};
+  padding: 0 ${space(0.5)};
+  font-size: ${p => p.theme.fontSizeSmall};
+  text-transform: uppercase;
 `;
 
-const Icon = styled(InlineSvg)<{isOpen: boolean}>`
-  color: ${p => (p.isOpen ? p.theme.error : p.theme.success)};
+const Icon = styled(InlineSvg)<WrapperProps & {isOpen: boolean}>`
+  color: ${getHighlight};
   margin-right: ${space(0.5)};
+  font-size: ${p => p.theme.fontSizeMedium};
 `;
diff --git a/tests/js/spec/views/incidents/details/index.spec.jsx b/tests/js/spec/views/incidents/details/index.spec.jsx
index 407906151c..51b0f115b9 100644
--- a/tests/js/spec/views/incidents/details/index.spec.jsx
+++ b/tests/js/spec/views/incidents/details/index.spec.jsx
@@ -108,7 +108,7 @@ describe('IncidentDetails', function() {
 
     expect(activitiesList).toHaveBeenCalledTimes(1);
 
-    expect(wrapper.find('Status').text()).toBe('Open');
+    expect(wrapper.find('Status').text()).not.toBe('Resolved');
     wrapper.find('[data-test-id="status-dropdown"] DropdownButton').simulate('click');
     wrapper
       .find('[data-test-id="status-dropdown"] MenuItem a')
@@ -126,7 +126,7 @@ describe('IncidentDetails', function() {
 
     // Refresh activities list since status changes also creates an activity
     expect(activitiesList).toHaveBeenCalledTimes(2);
-    expect(wrapper.find('Status').text()).toBe('Closed');
+    expect(wrapper.find('Status').text()).toBe('Resolved');
   });
 
   it('toggles subscribe status with Subscribe button', async function() {
