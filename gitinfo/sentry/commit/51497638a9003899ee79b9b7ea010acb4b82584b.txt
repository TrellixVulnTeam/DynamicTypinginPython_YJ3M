commit 51497638a9003899ee79b9b7ea010acb4b82584b
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat May 14 02:32:41 2016 +0200

    Added initial configuration flow for 2fa

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 789e7ac4de..d353142b7f 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -24,45 +24,49 @@ from sentry.utils.otp import generate_secret_key, TOTP
 
 class AuthenticatorManager(BaseManager):
 
-    def get_for_user(self, user):
-        return Authenticator.objects.filter(user=user)
+    def all_interfaces_for_user(self, user, return_missing=False):
+        _sort = lambda x: sorted(x, key=lambda x: (x.type == 0, x.type))
+        rv = [x.interface for x in Authenticator.objects.filter(user=user)]
+        if not return_missing:
+            return _sort(rv)
+        rvm = dict(AUTHENTICATOR_INTERFACES)
+        for iface in rv:
+            rvm.pop(iface.interface_id, None)
+        return _sort(rv), _sort([x() for x in rvm.values()])
+
+    def get_interface(self, user, interface_id):
+        interface = AUTHENTICATOR_INTERFACES.get(interface_id)
+        if interface is None:
+            raise Authenticator.DoesNotExist()
+        try:
+            return Authenticator.objects.get(
+                user=user,
+                type=interface.type,
+            ).interface
+        except Authenticator.DoesNotExist:
+            return interface()
 
     def user_has_2fa(self, user):
         return Authenticator.objects.filter(user=user).first() is not None
 
     def validate_otp(self, user, otp):
-        for auth in self.get_for_user(user):
-            if auth.interface.validate_otp(otp):
+        for interface in self.all_interfaces_for_user(user):
+            if interface.validate_otp(otp):
+                auth = interface.authenticator
+                auth.last_used_at = timezone.now()
                 auth.save()
                 return True
         return False
 
-    def create_totp(self, user):
-        return Authenticator.objects.create(
-            user=user,
-            type=TotpInterface.type,
-            config={
-                'secret': generate_secret_key(),
-            }
-        )
-
-    def create_recovery_codes(self, user):
-        return Authenticator.objects.create(
-            user=user,
-            type=RecoveryCodeInterface.type,
-            config={
-                'salt': os.urandom(16).encode('hex'),
-                'used': 0,
-            }
-        )
-
 
 AUTHENTICATOR_INTERFACES = {}
+AUTHENTICATOR_INTERFACES_BY_TYPE = {}
 AUTHENTICATOR_CHOICES = []
 
 
 def register_authenticator(cls):
-    AUTHENTICATOR_INTERFACES[cls.type] = cls
+    AUTHENTICATOR_INTERFACES[cls.interface_id] = cls
+    AUTHENTICATOR_INTERFACES_BY_TYPE[cls.type] = cls
     AUTHENTICATOR_CHOICES.append((cls.type, cls.name))
     return cls
 
@@ -72,13 +76,40 @@ class AuthenticatorInterface(object):
     interface_id = None
     name = None
     description = None
+    enroll_button = _('Enroll')
+    configure_button = _('Configure')
+    remove_button = _('Remove')
+
+    def __init__(self, authenticator=None):
+        if authenticator is None:
+            self.authenticator = None
+        else:
+            self.authenticator = authenticator
 
-    def __init__(self, authenticator):
-        self.authenticator = authenticator
+    @property
+    def is_enrolled(self):
+        return self.authenticator is not None
 
     @property
     def config(self):
-        return self.authenticator.config
+        if self.authenticator is not None:
+            return self.authenticator.config
+        rv = getattr(self, '_unbound_config', None)
+        if rv is None:
+            rv = self._unbound_config = self.generate_new_config()
+        return rv
+
+    def generate_new_config(self):
+        return {}
+
+    def enroll(self, user):
+        if self.authenticator is not None:
+            raise RuntimeError('Already enrolled')
+        self.authenticator = Authenticator.objects.create(
+            user=user,
+            type=self.type,
+            config=self.config,
+        )
 
     def validate_otp(self, otp):
         return False
@@ -92,19 +123,31 @@ class RecoveryCodeInterface(AuthenticatorInterface):
     description = _('Recovery codes can be used to access your account in the '
                     'event you lose access to your device and cannot '
                     'receive two-factor authentication codes.')
+    enroll_button = _('Activate')
+    configure_button = _('View Codes')
 
-    def __init__(self, authenticator):
+    def __init__(self, authenticator=None):
         AuthenticatorInterface.__init__(self, authenticator)
-        self.codes = []
-        h = hmac.new(self.config['salt'], None, hashlib.sha1)
-        for x in xrange(10):
-            h.update('%s|' % x)
-            self.codes.append(base64.b32encode(h.digest())[:8])
+
+    def get_codes(self):
+        rv = []
+        if self.is_enrolled:
+            h = hmac.new(self.config['salt'], None, hashlib.sha1)
+            for x in xrange(10):
+                h.update('%s|' % x)
+                rv.append(base64.b32encode(h.digest())[:8])
+        return rv
+
+    def generate_new_config(self):
+        return {
+            'salt': os.urandom(16).encode('hex'),
+            'used': 0,
+        }
 
     def validate_otp(self, otp):
         mask = self.config['used']
         code = otp.strip().replace('-', '').upper()
-        for idx, ref_code in enumerate(self.codes):
+        for idx, ref_code in enumerate(self.get_codes()):
             if code == ref_code:
                 if mask & (1 << idx):
                     break
@@ -115,7 +158,7 @@ class RecoveryCodeInterface(AuthenticatorInterface):
     def get_unused_codes(self):
         mask = self.config['used']
         rv = []
-        for idx, code in enumerate(self.codes):
+        for idx, code in enumerate(self.get_codes()):
             if not mask & (1 << idx):
                 rv.append(code[:4] + '-' + code[4:])
         return rv
@@ -125,15 +168,24 @@ class RecoveryCodeInterface(AuthenticatorInterface):
 class TotpInterface(AuthenticatorInterface):
     type = 1
     interface_id = 'totp'
-    name = _('Authenticator Application')
+    name = _('Authenticator App')
     description = _('An authenticator application that supports TOTP (like '
                     'Google Authenticator or 1Password) can be used to '
                     'conveniently secure your account.  A new token is '
                     'generated every 30 seconds.')
 
+    def generate_new_config(self):
+        return {
+            'secret': generate_secret_key(),
+        }
+
     def validate_otp(self, otp):
         return TOTP(self.config['secret']).verify(otp)
 
+    def get_provision_qrcode(self, user, issuer=None):
+        return TOTP(self.config['secret']).get_provision_qrcode(
+            user, issuer=issuer)
+
 
 class Authenticator(BaseModel):
     id = BoundedAutoField(primary_key=True)
@@ -153,7 +205,7 @@ class Authenticator(BaseModel):
 
     @cached_property
     def interface(self):
-        return AUTHENTICATOR_INTERFACES[self.type](self)
+        return AUTHENTICATOR_INTERFACES_BY_TYPE[self.type](self)
 
     def __repr__(self):
         return '<Authenticator user=%r interface=%r>' % (
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index f3c4a9f364..2a0d303f67 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -3214,6 +3214,25 @@ ul.tag-list {
   }
 }
 
+/**
+* QR Code
+* ============================================================================
+*/
+div.qrcode {
+  table {
+    border-spacing: 0;
+    margin: 40px auto;
+    td {
+      width: 5px;
+      height: 5px;
+
+      &.black {
+        background: black;
+      }
+    }
+  }
+}
+
 /**
  * Error level colors
  * ============================================================================
diff --git a/src/sentry/templates/sentry/account/twofactor.html b/src/sentry/templates/sentry/account/twofactor.html
index fd5562f98a..24565e0997 100644
--- a/src/sentry/templates/sentry/account/twofactor.html
+++ b/src/sentry/templates/sentry/account/twofactor.html
@@ -1,41 +1,51 @@
 {% extends "sentry/bases/account.html" %}
 
-{% load crispy_forms_tags %}
 {% load i18n %}
 {% load sentry_helpers %}
 
 {% block title %}{% trans "Two-Factor Authentication Settings" %} | {{ block.super }}{% endblock %}
 
 {% block main %}
-    <form action="" method="post">
-        {% csrf_token %}
-        <legend style="margin-top: 0;">{% trans "Two-Factor Authentication" %}</legend>
+  <legend style="margin-top: 0;">{% trans "Two-Factor Authentication" %}</legend>
 
-        <div class="account-settings-overview">
-          <p>
-            Two-factor authentication improves your security by requiring an authentication
-            code in addition to your password.
-            {% if has_2fa %}
-              <strong>2FA is currently enabled</strong>.
-            {% else %}
-              <strong>2FA is currently disabled</strong>.
-            {% endif %}
-          </p>
-          {% for auth in active_authenticators %}
-            <h4>{{ auth.name }}</h4>
-            <p>{{ auth.description }}</p>
-            <p><button type="submit" class="btn btn-default">{% trans "Remove" %}</button></p>
-          {% endfor %}
-          {% if missing_authenticators %}
-            <ul>
-              {% for auth in missing_authenticators %}
-                <li><button class="btn btn-primary btn-sm" name="add_{{ auth.interface_id }}">Add {{ auth.name }}</button></li>
-              {% endfor %}
-            </ul>
-          {% endif %}
-        </div>
-        <fieldset class="form-actions">
-            <button type="submit" name="back" class="btn btn-default">{% trans "Back" %}</button>
-        </fieldset>
-    </form>
+  <p>
+    Two-factor authentication improves your security by requiring an authentication
+    code in addition to your password.
+    {% if has_2fa %}
+      <strong>2FA is currently enabled</strong>.
+    {% else %}
+      <strong>2FA is currently disabled</strong>.
+    {% endif %}
+  </p>
+  {% for auth in active_authenticators %}
+    <div class="well">
+      <h4>{{ auth.name }}</h4>
+      <p>{{ auth.description }}</p>
+      {% if auth.configure_button %}
+        <a href="{{ auth.interface_id }}/" class="btn btn-default btn-sm">{{ auth.configure_button }}</a>
+      {% endif %}
+      {% if auth.remove_button %}
+        <form action="{{ auth.interface_id }}/" method="post" style="display: inline">
+          {% csrf_token %}
+          <button type="submit" name="remove"
+            class="btn btn-default btn-sm">{{ auth.remove_button }}</button>
+        </form>
+      {% endif %}
+    </div>
+  {% endfor %}
+  {% if missing_authenticators %}
+    <p>Add more methods:</p>
+    <ul>
+      {% for auth in missing_authenticators %}
+        <li><a href="{{ auth.interface_id }}/" class="btn btn-primary btn-sm">{{ auth.name }}</a></li>
+      {% endfor %}
+    </ul>
+  {% endif %}
+
+  <form action="" method="post" class="form-stacked">
+    {% csrf_token %}
+    <fieldset class="form-actions">
+      <button type="submit" name="back" class="btn btn-default">{% trans "Back" %}</button>
+    </fieldset>
+  </form>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/configure.html b/src/sentry/templates/sentry/account/twofactor/configure.html
new file mode 100644
index 0000000000..8d99b8f658
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor/configure.html
@@ -0,0 +1,31 @@
+{% extends "sentry/bases/twofactor_settings.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block twofactor_body %}
+  {% if auth.is_enrolled %}
+    <p><strong>Method is enabled</strong></p>
+  {% else %}
+    <p><em>Method is currently not enabled</em></p>
+  {% endif %}
+
+  {% block twofactor_info %}
+  <p>
+    {{ auth.description }}
+  </p>
+  {% endblock %}
+
+  <fieldset class="form-actions">
+    <form action="" method="post" style="display: inline">
+      {% csrf_token %}
+    {% if not auth.is_enrolled %}
+      <button type="submit" name="enroll" class="btn btn-primary">{{ auth.enroll_button }}</button>
+    {% else %}
+      <button type="submit" name="remove"
+        class="btn btn-default">{{ auth.remove_button }}</button>
+    {% endif %}
+    </form>
+    <a href="{% url 'sentry-account-settings-2fa' %}" class="btn btn-default">{% trans "Back" %}</a>
+  </fieldset>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/configure_recovery.html b/src/sentry/templates/sentry/account/twofactor/configure_recovery.html
new file mode 100644
index 0000000000..afc1b1ef5d
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor/configure_recovery.html
@@ -0,0 +1,14 @@
+{% extends "sentry/account/twofactor/configure.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block twofactor_info %}
+  {{ block.super }}
+
+  {% if auth.is_enrolled %}
+  <h4>Unused Codes</h4>
+  <pre>{% for code in auth.get_unused_codes %}{{ code }}
+{% endfor %}</pre>
+  {% endif %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/enroll_totp.html b/src/sentry/templates/sentry/account/twofactor/enroll_totp.html
new file mode 100644
index 0000000000..5f2253a825
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor/enroll_totp.html
@@ -0,0 +1,42 @@
+{% extends "sentry/bases/twofactor_settings.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block twofactor_title %}{% trans "Enrollment: " %} {{ auth.name }}{% endblock %}
+{% block twofactor_body %}
+  <p>
+    To enroll use an application on your phone to get two-factor
+    authentication codes when prompted.  Scan the below QR code
+    and then enter a code to confirm the enrollment.
+  </p>
+  <div class="qrcode">
+    <table>
+      {% for row in provision_qrcode %}
+        <tr>
+          {% for cell in row %}
+            <td class="{% if cell %}black{% else %}white{% endif %}"></td>
+          {% endfor %}
+        </tr>
+      {% endfor %}
+    </table>
+  </div>
+  <fieldset class="form-actions">
+    <form action="" method="post">
+      {% csrf_token %}
+
+      {{ otp_form|as_crispy_errors }}
+      {% for field in otp_form %}
+        {{ field|as_crispy_field }}
+      {% endfor %}
+
+      <input type="hidden" name="enroll">
+      <input type="hidden" name="totp_secret" value="{{ auth.config.secret }}">
+      <div>
+        <a href="{% url 'sentry-account-settings-2fa-totp' %}" class="btn btn-default">{% trans "Cancel" %}</a>
+        <button type="submit" class="btn btn-primary">{% trans "Confirm" %}</button> 
+      </div>
+    </form>
+  </fieldset>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/remove.html b/src/sentry/templates/sentry/account/twofactor/remove.html
new file mode 100644
index 0000000000..f51aa3a313
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor/remove.html
@@ -0,0 +1,22 @@
+{% extends "sentry/bases/twofactor_settings.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block twofactor_title %}{% trans "Remove Method:" %} {{ auth.name }}{% endblock %}
+{% block twofactor_body %}
+  <p>
+    Do you want to remove the method?  You will no longer be able to
+    use it for two-factor authentication afterwards.  Removing the last
+    authenticator removes two-factor authentication.
+  </p>
+
+  <form action="" method="post" class="form-stacked">
+    {% csrf_token %}
+    <input type="hidden" name="remove" value="1">
+    <fieldset class="form-actions">
+      <button type="submit" name="yes" class="btn btn-default btn-primary">{% trans "Yes" %}</button>
+      <button type="submit" name="no" class="btn btn-default">{% trans "No" %}</button>
+    </fieldset>
+  </form>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/twofactor_settings.html b/src/sentry/templates/sentry/bases/twofactor_settings.html
new file mode 100644
index 0000000000..66edc3dc3f
--- /dev/null
+++ b/src/sentry/templates/sentry/bases/twofactor_settings.html
@@ -0,0 +1,11 @@
+{% extends "sentry/bases/account.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{{ auth.name }} | {{ block.super }}{% endblock %}
+
+{% block main %}
+  <legend style="margin-top: 0;">{% block twofactor_title %}{% trans "Method:" %} {{ auth.name }}{% endblock %}</legend>
+  {% block twofactor_body %}{% endblock %}
+{% endblock %}
diff --git a/src/sentry/utils/otp.py b/src/sentry/utils/otp.py
index f9f060ab38..5d19e232b8 100644
--- a/src/sentry/utils/otp.py
+++ b/src/sentry/utils/otp.py
@@ -56,33 +56,6 @@ def _get_ts(ts):
     return int(ts)
 
 
-class _OTPQR(object):
-
-    def __init__(self, qr):
-        self._qr = qr
-        self._matrix = qr.get_matrix()
-
-    def __iter__(self):
-        return iter(self._matrix)
-
-    def __getitem__(self, item):
-        if isinstance(item, tuple):
-            x, y = item
-            return self._matrix[y][x]
-        return self._matrix[item]
-
-    def as_html_table(self, class_='qrcode'):
-        rows = []
-        for row in self:
-            rows.append('<tr>%s</tr>' % ''.join(
-                '<td class="%s"></td>' % (x and 'filled' or 'empty')
-                for x in row))
-        return '<table class="%s">%s</table>' % (
-            class_,
-            '\n'.join(rows),
-        )
-
-
 class TOTP(object):
 
     def __init__(self, secret=None, digits=6, interval=30):
@@ -130,6 +103,6 @@ class TOTP(object):
         return rv
 
     def get_provision_qrcode(self, user, issuer=None):
-        qr = qrcode.QRCode()
-        qr.make(self.get_provision_url(user, issuer=issuer))
-        return _OTPQR(qr)
+        qr = qrcode.QRCode(border=0)
+        qr.add_data(self.get_provision_url(user, issuer=issuer))
+        return qr.get_matrix()
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 89dd4d6830..f06d3e8e42 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -12,6 +12,7 @@ import itertools
 from django.contrib import messages
 from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
 from django.db import transaction
 from django.http import HttpResponseRedirect
 from django.views.decorators.cache import never_cache
@@ -20,9 +21,7 @@ from django.utils import timezone
 from sudo.decorators import sudo_required
 
 from sentry.models import (
-    LostPasswordHash, Project, ProjectStatus, UserOption, Authenticator,
-    AUTHENTICATOR_INTERFACES
-)
+    LostPasswordHash, Project, ProjectStatus, UserOption, Authenticator)
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required
 from sentry.web.forms.accounts import (
@@ -145,22 +144,18 @@ def settings(request):
 @sudo_required
 @transaction.atomic
 def twofactor_settings(request):
-    missing_authenticators = AUTHENTICATOR_INTERFACES.copy()
-    active_authenticators = Authenticator.objects.get_for_user(request.user)
-    for auth in active_authenticators:
-        missing_authenticators.pop(auth.interface_id, None)
-    missing_authenticators = [{
-        'interface_id': x.interface_id,
-        'name': x.name,
-    } for x in sorted(missing_authenticators.values(),
-                      key=lambda x: (x.type == 0, x.type))]
+    active, missing = Authenticator.objects.all_interfaces_for_user(
+        request.user, return_missing=True)
+
+    if request.method == 'POST' and 'back' in request.POST:
+        return HttpResponseRedirect(reverse('sentry-account-settings'))
 
     context = csrf(request)
     context.update({
         'page': 'settings',
-        'has_2fa': len(active_authenticators) > 0,
-        'active_authenticators': active_authenticators,
-        'missing_authenticators': missing_authenticators,
+        'has_2fa': len(active) > 0,
+        'active_authenticators': active,
+        'missing_authenticators': missing,
     })
     return render_to_response('sentry/account/twofactor.html', context, request)
 
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
new file mode 100644
index 0000000000..f9bd60edc3
--- /dev/null
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -0,0 +1,88 @@
+from django.db import transaction
+from django.http import HttpResponseRedirect
+from django.core.urlresolvers import reverse
+from django.views.decorators.csrf import csrf_protect
+from django.views.decorators.cache import never_cache
+from django.utils.decorators import method_decorator
+from django.core.context_processors import csrf
+
+from sudo.decorators import sudo_required
+
+from sentry.models import Authenticator
+from sentry.web.frontend.base import BaseView
+from sentry.web.decorators import login_required
+from sentry.web.helpers import render_to_response
+from sentry.web.forms.accounts import TwoFactorForm
+
+
+class TwoFactorSettingsView(BaseView):
+    interface_id = None
+    configure_template = 'sentry/account/twofactor/configure.html'
+
+    @method_decorator(csrf_protect)
+    @method_decorator(never_cache)
+    @method_decorator(login_required)
+    @method_decorator(sudo_required)
+    @method_decorator(transaction.atomic)
+    def handle(self, request):
+        interface = Authenticator.objects.get_interface(
+            request.user, self.interface_id)
+        if 'remove' in request.POST:
+            return self.remove(request, interface)
+        return self.configure(request, interface)
+
+    def make_context(self, request, interface):
+        context = csrf(request)
+        context['auth'] = interface
+        context['page'] = 'settings'
+        return context
+
+    def remove(self, request, interface):
+        if 'no' in request.POST or \
+           not interface.is_enrolled:
+            return HttpResponseRedirect(reverse('sentry-account-settings-2fa'))
+        elif 'yes' in request.POST:
+            interface.authenticator.delete()
+            return HttpResponseRedirect(reverse('sentry-account-settings-2fa'))
+        context = self.make_context(request, interface)
+        return render_to_response('sentry/account/twofactor/remove.html',
+                                  context, request)
+
+    def enroll(self, request, interface):
+        interface.enroll(request.user)
+        return HttpResponseRedirect(request.path)
+
+    def configure(self, request, interface):
+        if 'enroll' in request.POST and not interface.is_enrolled:
+            return self.enroll(request, interface)
+        context = self.make_context(request, interface)
+        return render_to_response(self.configure_template,
+                                  context, request)
+
+
+class RecoveryCodeSettingsView(TwoFactorSettingsView):
+    interface_id = 'recovery'
+    configure_template = 'sentry/account/twofactor/configure_recovery.html'
+
+
+class TotpSettingsView(TwoFactorSettingsView):
+    interface_id = 'totp'
+
+    def enroll(self, request, interface):
+        totp_secret = request.POST.get('totp_secret')
+        if totp_secret is not None:
+            interface.config['secret'] = totp_secret
+
+        form = TwoFactorForm(request.POST)
+        if 'otp' in request.POST and form.is_valid():
+            if interface.validate_otp(form.cleaned_data['otp']):
+                return TwoFactorSettingsView.enroll(self, request, interface)
+            else:
+                form.errors['__all__'] = ['Invalid confirmation code.']
+
+        context = self.make_context(request, interface)
+        context['otp_form'] = form
+        context['provision_qrcode'] = interface.get_provision_qrcode(
+            request.user.email)
+        return render_to_response('sentry/account/twofactor/enroll_totp.html',
+                                  context, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index df87271e89..a541bb27d9 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -13,7 +13,7 @@ from django.http import HttpResponse
 from django.views.generic import RedirectView
 
 from sentry.web import api
-from sentry.web.frontend import accounts, admin, generic
+from sentry.web.frontend import accounts, admin, generic, accounts_twofactor
 from sentry.web.frontend.accept_organization_invite import \
     AcceptOrganizationInviteView
 from sentry.web.frontend.admin_queue import AdminQueueView
@@ -188,6 +188,12 @@ urlpatterns += patterns(
         name='sentry-account-settings'),
     url(r'^account/settings/2fa/$', accounts.twofactor_settings,
         name='sentry-account-settings-2fa'),
+    url(r'^account/settings/2fa/recovery/$',
+        accounts_twofactor.RecoveryCodeSettingsView.as_view(),
+        name='sentry-account-settings-2fa-recovery'),
+    url(r'^account/settings/2fa/totp/$',
+        accounts_twofactor.TotpSettingsView.as_view(),
+        name='sentry-account-settings-2fa-totp'),
     url(r'^account/settings/avatar/$', accounts.avatar_settings,
         name='sentry-account-settings-avatar'),
     url(r'^account/settings/appearance/$', accounts.appearance_settings,
