commit 11e1fdb42bbd0dd0b8466cb2fd857c50436f4ee7
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Thu Feb 20 14:33:02 2020 -0800

    feat(workflow/projectCreation): Add default value to event threshold (#17142)
    
    UI changes to reduce user confusion. Placeholder value has been interpreted as pre-filled or default values.

diff --git a/src/sentry/static/sentry/app/views/projectInstall/issueAlertOptions.tsx b/src/sentry/static/sentry/app/views/projectInstall/issueAlertOptions.tsx
index 239832fedc..c186bbc15b 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/issueAlertOptions.tsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/issueAlertOptions.tsx
@@ -35,6 +35,8 @@ const METRIC_CONDITION_MAP = {
   [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,
 } as const;
 
+const DEFAULT_THRESHOLD_VALUE: string = '10';
+
 type StateUpdater = (updatedData: RequestDataFragment) => void;
 type Props = AsyncComponent['props'] & {
   organization: Organization;
@@ -44,7 +46,6 @@ type Props = AsyncComponent['props'] & {
 type State = AsyncComponent['state'] & {
   conditions: any;
   intervalChoices: [string, string][] | undefined;
-  placeholder: string;
   threshold: string;
   interval: string;
   alertSetting: string;
@@ -95,10 +96,7 @@ function unpackConditions(conditions: any[]) {
   const intervalChoices = conditions
     .map(condition => condition.formFields?.interval?.choices)
     .reduce(equalityReducer);
-  const placeholder = conditions
-    .map(condition => condition.formFields?.value?.placeholder)
-    .reduce(equalityReducer);
-  return {intervalChoices, placeholder, interval: intervalChoices?.[0]?.[0]};
+  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};
 }
 
 class IssueAlertOptions extends AsyncComponent<Props, State> {
@@ -110,8 +108,7 @@ class IssueAlertOptions extends AsyncComponent<Props, State> {
       alertSetting: `${Actions.CUSTOMIZED_ALERTS}`,
       metric: MetricValues.ERRORS,
       interval: '',
-      placeholder: '',
-      threshold: '',
+      threshold: DEFAULT_THRESHOLD_VALUE,
     };
   }
 
@@ -143,8 +140,8 @@ class IssueAlertOptions extends AsyncComponent<Props, State> {
             type="number"
             min="0"
             name=""
+            placeholder={DEFAULT_THRESHOLD_VALUE}
             value={this.state.threshold}
-            placeholder={this.state.placeholder}
             key={name}
             onChange={threshold =>
               this.setStateAndUpdateParents({threshold: threshold.target.value})
@@ -249,15 +246,13 @@ class IssueAlertOptions extends AsyncComponent<Props, State> {
       return;
     }
 
-    const {intervalChoices, placeholder, interval} = unpackConditions(conditions);
-    if (!intervalChoices || !placeholder || !interval) {
+    const {intervalChoices, interval} = unpackConditions(conditions);
+    if (!intervalChoices || !interval) {
       Sentry.withScope(scope => {
         scope.setExtra('props', this.props);
         scope.setExtra('state', this.state);
         Sentry.captureException(
-          new Error(
-            'Interval choices or value placeholder sent from API endpoint is inconsistent or empty'
-          )
+          new Error('Interval choices or sent from API endpoint is inconsistent or empty')
         );
       });
       this.setStateAndUpdateParents({conditions: undefined});
@@ -267,7 +262,6 @@ class IssueAlertOptions extends AsyncComponent<Props, State> {
     this.setStateAndUpdateParents({
       conditions,
       intervalChoices,
-      placeholder,
       interval,
     });
   }
diff --git a/tests/js/spec/views/projectInstall/createProject.spec.jsx b/tests/js/spec/views/projectInstall/createProject.spec.jsx
index aaf13fd50c..975f2c8ce0 100644
--- a/tests/js/spec/views/projectInstall/createProject.spec.jsx
+++ b/tests/js/spec/views/projectInstall/createProject.spec.jsx
@@ -195,6 +195,12 @@ describe('CreateProject', function() {
         .find('PlatformCard')
         .first()
         .simulate('click');
+      expectSubmitButtonToBeDisabled(false);
+
+      wrapper
+        .find('input[data-test-id="range-input"]')
+        .first()
+        .simulate('change', {target: {value: ''}});
       expectSubmitButtonToBeDisabled(true);
 
       wrapper
diff --git a/tests/js/spec/views/projectInstall/issueAlertOptions.spec.jsx b/tests/js/spec/views/projectInstall/issueAlertOptions.spec.jsx
index a7c3999777..1567fb6544 100644
--- a/tests/js/spec/views/projectInstall/issueAlertOptions.spec.jsx
+++ b/tests/js/spec/views/projectInstall/issueAlertOptions.spec.jsx
@@ -76,13 +76,13 @@ describe('IssueAlertOptions', function() {
     expect(wrapper.find('RadioLineItem')).toHaveLength(2);
   });
 
-  it('should render only the `Default Rule` and `Create Later` option on responses with different placeholder values', () => {
+  it('should render all(three) options on responses with different placeholder values', () => {
     MockApiClient.addMockResponse({
       url: URL,
       body: MOCK_RESP_INCONSISTENT_PLACEHOLDERS,
     });
     const wrapper = mountWithTheme(<IssueAlertOptions {...props} />, routerContext);
-    expect(wrapper.find('RadioLineItem')).toHaveLength(2);
+    expect(wrapper.find('RadioLineItem')).toHaveLength(3);
   });
 
   it('should ignore conditions that are not `sentry.rules.conditions.event_frequency.EventFrequencyCondition` and `sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition` ', () => {
@@ -114,16 +114,25 @@ describe('IssueAlertOptions', function() {
 
     const wrapper = mountWithTheme(<IssueAlertOptions {...props} />, routerContext);
 
-    expect(wrapper.find('input[data-test-id="range-input"]').props().placeholder).toBe(
-      100
-    );
-
     [
       ['metric-select-control', ['occurrences of', 'users affected by']],
       [
         'interval-select-control',
         ['one minute', 'one hour', 'one day', 'one week', '30 days'],
       ],
-    ].forEach(tuple => selectControlVerifier(wrapper, tuple[0], tuple[1]));
+    ].forEach(([dataTestId, options]) =>
+      selectControlVerifier(wrapper, dataTestId, options)
+    );
+  });
+
+  it('should pre-fill threshold value after a valid server response', () => {
+    MockApiClient.addMockResponse({
+      url: URL,
+      body: MOCK_RESP_VERBOSE,
+    });
+
+    const wrapper = mountWithTheme(<IssueAlertOptions {...props} />, routerContext);
+
+    expect(wrapper.find('input[data-test-id="range-input"]').props().value).toBe('10');
   });
 });
