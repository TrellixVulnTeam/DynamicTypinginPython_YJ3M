commit 0336897b53b17e960d373a4676b8ea721829a0ea
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 5 14:49:24 2018 -0700

    feat: Disable beacon in debug mode
    
    Additionally clean up logging within beacon to use standard event methodology.

diff --git a/src/sentry/tasks/beacon.py b/src/sentry/tasks/beacon.py
index e0acb08305..45afcfaebf 100644
--- a/src/sentry/tasks/beacon.py
+++ b/src/sentry/tasks/beacon.py
@@ -38,16 +38,20 @@ def send_beacon():
     from sentry import options
     from sentry.models import Broadcast, Organization, Project, Team, User
 
-    if not settings.SENTRY_BEACON:
-        logger.info('Not sending beacon (disabled)')
-        return
-
     install_id = options.get('sentry:install-id')
     if not install_id:
-        logger.info('Generated installation ID: %s', install_id)
         install_id = sha1(uuid4().bytes).hexdigest()
+        logger.info('beacon.generated-install-id', extra={'install_id': install_id})
         options.set('sentry:install-id', install_id)
 
+    if not settings.SENTRY_BEACON:
+        logger.info('beacon.skipped', extra={'install_id': install_id, 'reason': 'disabled'})
+        return
+
+    if settings.DEBUG:
+        logger.info('beacon.skipped', extra={'install_id': install_id, 'reason': 'debug'})
+        return
+
     end = timezone.now()
     events_24h = tsdb.get_sums(
         model=tsdb.models.internal,
@@ -85,8 +89,10 @@ def send_beacon():
         request = safe_urlopen(BEACON_URL, json=payload, timeout=5)
         response = safe_urlread(request)
     except Exception:
-        logger.warning('Failed sending beacon', exc_info=True)
+        logger.warning('beacon.failed', exc_info=True, extra={'install_id': install_id})
         return
+    else:
+        logger.info('beacon.sent', extra={'install_id': install_id})
 
     data = json.loads(response)
 
diff --git a/tests/sentry/tasks/test_beacon.py b/tests/sentry/tasks/test_beacon.py
index ddf42e49f5..d20f142eb2 100644
--- a/tests/sentry/tasks/test_beacon.py
+++ b/tests/sentry/tasks/test_beacon.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import, print_function
 
 import json
+import responses
 import sentry
 
 from mock import patch
@@ -16,6 +17,7 @@ class SendBeaconTest(TestCase):
     @patch('sentry.tasks.beacon.get_all_package_versions')
     @patch('sentry.tasks.beacon.safe_urlopen')
     @patch('sentry.tasks.beacon.safe_urlread')
+    @responses.activate
     def test_simple(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):
         mock_get_all_package_versions.return_value = {'foo': '1.0'}
         safe_urlread.return_value = json.dumps({
@@ -58,6 +60,7 @@ class SendBeaconTest(TestCase):
     @patch('sentry.tasks.beacon.get_all_package_versions')
     @patch('sentry.tasks.beacon.safe_urlopen')
     @patch('sentry.tasks.beacon.safe_urlread')
+    @responses.activate
     def test_anonymous(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):
         mock_get_all_package_versions.return_value = {'foo': '1.0'}
         safe_urlread.return_value = json.dumps({
@@ -99,6 +102,7 @@ class SendBeaconTest(TestCase):
     @patch('sentry.tasks.beacon.get_all_package_versions')
     @patch('sentry.tasks.beacon.safe_urlopen')
     @patch('sentry.tasks.beacon.safe_urlread')
+    @responses.activate
     def test_with_broadcasts(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):
         broadcast_id = uuid4().hex
         mock_get_all_package_versions.return_value = {}
@@ -141,3 +145,27 @@ class SendBeaconTest(TestCase):
         broadcast = Broadcast.objects.get(upstream_id=broadcast_id)
 
         assert not broadcast.is_active
+
+    @patch('sentry.tasks.beacon.get_all_package_versions')
+    @patch('sentry.tasks.beacon.safe_urlopen')
+    @patch('sentry.tasks.beacon.safe_urlread')
+    @responses.activate
+    def test_disabled(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):
+        mock_get_all_package_versions.return_value = {'foo': '1.0'}
+
+        with self.settings(SENTRY_BEACON=False):
+            send_beacon()
+
+        assert not safe_urlopen.mock_calls
+
+    @patch('sentry.tasks.beacon.get_all_package_versions')
+    @patch('sentry.tasks.beacon.safe_urlopen')
+    @patch('sentry.tasks.beacon.safe_urlread')
+    @responses.activate
+    def test_debug(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):
+        mock_get_all_package_versions.return_value = {'foo': '1.0'}
+
+        with self.settings(DEBUG=True):
+            send_beacon()
+
+        assert not safe_urlopen.mock_calls
