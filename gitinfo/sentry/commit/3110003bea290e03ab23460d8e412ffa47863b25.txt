commit 3110003bea290e03ab23460d8e412ffa47863b25
Author: Ryan Skonnord <ryan.skonnord@sentry.io>
Date:   Thu Jun 25 11:51:26 2020 -0700

    test(group_details): Add unit test for current_release (#19333)

diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index ad7e7df5b9..bbe492e017 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -268,8 +268,12 @@ class Factories(object):
     @staticmethod
     def create_environment(project, **kwargs):
         name = kwargs.get("name", petname.Generate(3, " ", letters=10)[:64])
+
+        organization = kwargs.get("organization")
+        organization_id = organization.id if organization else project.organization_id
+
         env = Environment.objects.create(
-            organization_id=project.organization_id, project_id=project.id, name=name
+            organization_id=organization_id, project_id=project.id, name=name
         )
         env.add_project(project, is_hidden=kwargs.get("is_hidden"))
         return env
diff --git a/src/sentry/testutils/helpers/datetime.py b/src/sentry/testutils/helpers/datetime.py
index 9e010fefe3..7b455e1c23 100644
--- a/src/sentry/testutils/helpers/datetime.py
+++ b/src/sentry/testutils/helpers/datetime.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 from datetime import datetime, timedelta
 import time
 
+from django.utils import timezone
+
 __all__ = ["iso_format", "before_now", "timestamp_format"]
 
 
@@ -16,3 +18,14 @@ def before_now(**kwargs):
 
 def timestamp_format(datetime):
     return time.mktime(datetime.utctimetuple()) + datetime.microsecond / 1e6
+
+
+class MockClock(object):
+    """Returns a distinct, increasing timestamp each time it is called."""
+
+    def __init__(self, initial=None):
+        self.time = initial or timezone.now()
+
+    def __call__(self):
+        self.time += timedelta(seconds=1)
+        return self.time
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index f32245c182..31d8d4ce07 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -15,6 +15,7 @@ from sentry.models import (
     GroupHash,
     GroupAssignee,
     GroupBookmark,
+    GroupRelease,
     GroupResolution,
     GroupSeen,
     GroupSnooze,
@@ -23,9 +24,11 @@ from sentry.models import (
     GroupTombstone,
     GroupMeta,
     Release,
+    ReleaseEnvironment,
     Integration,
 )
 from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import MockClock
 from sentry.plugins.base import plugins
 
 
@@ -95,6 +98,83 @@ class GroupDetailsTest(APITestCase, SnubaTestCase):
         assert response.data["firstRelease"] is None
         assert response.data["lastRelease"] is None
 
+    def _test_current_release(self, group_seen_on_latest_release):
+        clock = MockClock()
+
+        # Create several of everything, to exercise all filtering clauses.
+
+        def set_up_organization():
+            organization = self.create_organization()
+
+            team = self.create_team(organization=organization)
+            self.create_team_membership(team=team, user=self.user)
+
+            prod = self.create_environment(name="production", organization=organization)
+            dev = self.create_environment(name="development", organization=organization)
+            environments = (prod, dev)
+
+            def set_up_project():
+                project = self.create_project(organization=organization, teams=[team])
+                for environment in environments:
+                    environment.add_project(project)
+
+                def set_up_release():
+                    release = self.create_release(project=project)
+                    for environment in environments:
+                        ReleaseEnvironment.get_or_create(project, release, environment, clock())
+                    return release
+
+                groups = [self.create_group(project=project) for i in range(3)]
+                target_group = groups[1]
+
+                early_release = set_up_release()
+                later_release = set_up_release()
+
+                def seen_on(group, release, environment):
+                    return GroupRelease.get_or_create(group, release, environment, clock())
+
+                def set_up_group_releases(environment):
+                    for release in (early_release, later_release):
+                        for group in groups:
+                            if group != target_group:
+                                seen_on(group, release, environment)
+
+                    latest_seen = seen_on(target_group, early_release, environment)
+                    if group_seen_on_latest_release:
+                        latest_seen = seen_on(target_group, later_release, environment)
+                    return latest_seen
+
+                target_group_release = set_up_group_releases(prod)
+                set_up_group_releases(dev)
+
+                return project, target_group, target_group_release
+
+            set_up_project()
+            target_project, target_group, target_group_release = set_up_project()
+            set_up_project()
+
+            return organization, target_project, target_group, target_group_release
+
+        set_up_organization()
+        target_org, target_project, target_group, latest_seen = set_up_organization()
+        set_up_organization()
+
+        self.login_as(user=self.user)
+        url = u"/api/0/issues/{}/".format(target_group.id)
+        response = self.client.get(url, {"environment": "production"}, format="json")
+        assert response.status_code == 200
+        return response.data["currentRelease"], latest_seen
+
+    def test_current_release_has_group(self):
+        current_release, group_release = self._test_current_release(True)
+        assert current_release is not None
+        assert current_release["firstSeen"] == group_release.first_seen
+        assert current_release["lastSeen"] == group_release.last_seen
+
+    def test_current_release_is_later(self):
+        current_release, group_release = self._test_current_release(False)
+        assert current_release is None
+
     def test_pending_delete_pending_merge_excluded(self):
         group1 = self.create_group(status=GroupStatus.PENDING_DELETION)
         group2 = self.create_group(status=GroupStatus.DELETION_IN_PROGRESS)
