commit 1b2cce0a6a304ce5896df98f042530e47baf1a6d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sun Mar 6 18:09:17 2016 +0100

    Improved word detection in call sign migration

diff --git a/src/sentry/migrations/0242_prefill_callsigns.py b/src/sentry/migrations/0242_prefill_callsigns.py
index a42e97a111..6425c7137d 100644
--- a/src/sentry/migrations/0242_prefill_callsigns.py
+++ b/src/sentry/migrations/0242_prefill_callsigns.py
@@ -6,9 +6,7 @@ from south.utils import datetime_utils as datetime
 from south.db import db
 from south.v2 import DataMigration
 from django.db import models, transaction
-
-
-_letters_re = re.compile(r'[A-Z]+')
+from sentry.utils.strings import tokens_from_name
 
 
 class RollbackLocally(Exception):
@@ -25,7 +23,10 @@ def catchable_atomic():
 
 
 def iter_callsign_choices(project):
-    words = _letters_re.findall(project.name.upper())
+    words = list(x.upper() for x in tokens_from_name(
+        project.name, remove_digits=True))
+    if not words:
+        words = ['AA']
     bits = []
 
     if len(words) == 2:
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index cced6b48f3..f0ae27c623 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -17,6 +17,10 @@ import six
 
 
 _callsign_re = re.compile(r'^[A-Z]{2,6}$')
+_word_sep_re = re.compile(r'[\s.;,_-]+(?u)')
+_camelcase_re = re.compile(
+    r'(?:[A-Z]{2,}(?=[A-Z]))|(?:[A-Z][a-z0-9]+)|(?:[a-z0-9]+)')
+_digit_re = re.compile(r'\d+')
 
 
 def truncatechars(value, arg):
@@ -100,3 +104,32 @@ def validate_callsign(value):
     if _callsign_re.match(callsign) is None:
         return None
     return callsign
+
+
+def split_camelcase(word):
+    pieces = _camelcase_re.findall(word)
+
+    # Unicode characters or some stuff, ignore it.
+    if sum(len(x) for x in pieces) != len(word):
+        yield word
+    else:
+        for piece in pieces:
+            yield piece
+
+
+def split_any_wordlike(value, handle_camelcase=False):
+    for word in _word_sep_re.split(value):
+        if handle_camelcase:
+            for chunk in split_camelcase(word):
+                yield chunk
+        else:
+            yield word
+
+
+def tokens_from_name(value, remove_digits=False):
+    for word in split_any_wordlike(value, handle_camelcase=True):
+        if remove_digits:
+            word = _digit_re.sub('', word)
+        word = word.lower()
+        if word:
+            yield word
diff --git a/tests/sentry/utils/test_strings.py b/tests/sentry/utils/test_strings.py
index 9886793b62..6f10b12c56 100644
--- a/tests/sentry/utils/test_strings.py
+++ b/tests/sentry/utils/test_strings.py
@@ -2,6 +2,7 @@ import functools
 from sentry.utils.strings import (
     soft_break,
     soft_hyphenate,
+    tokens_from_name,
 )
 
 
@@ -18,3 +19,15 @@ def test_soft_break_and_hyphenate():
     hyphenate = functools.partial(soft_hyphenate, length=6)
     assert soft_break('com.reallyreallyreally.long.path', 6, hyphenate) == \
         ZWSP.join(['com.', SHY.join(['really'] * 3) + '.', 'long.', 'path'])
+
+
+def test_tokens_from_name():
+    assert list(tokens_from_name('MyHTTPProject42')) == [
+        'my', 'http', 'project42']
+    assert list(tokens_from_name('MyHTTPProject42', remove_digits=True)) == [
+        'my', 'http', 'project']
+    assert list(tokens_from_name('MyHTTPProject Awesome 42 Stuff')) == [
+        'my', 'http', 'project', 'awesome', '42', 'stuff']
+    assert list(tokens_from_name('MyHTTPProject Awesome 42 Stuff',
+                                 remove_digits=True)) == [
+        'my', 'http', 'project', 'awesome', 'stuff']
