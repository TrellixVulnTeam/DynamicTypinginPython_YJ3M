commit aa1eed38a7170855515c78f959e0ceb6f33c4e6f
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 19 17:05:56 2015 -0800

    Support custom protocols in origins

diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index ec58d36c4a..caefc275a9 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -117,10 +117,20 @@ def is_valid_origin(origin, project=None):
 
     for valid in allowed:
         if '://' in valid:
-            # Support partial uri matches that may include path
-            if origin.startswith(valid):
-                return True
-            continue
+            scheme, valid = valid.split('://', 1)
+            if parsed.scheme != scheme:
+                continue
+
+        # Support partial uri matches that may include path
+        if '/' in valid and origin.startswith(valid):
+            return True
+
+        if valid == '*':
+            return True
+
+        # Support matches ending with glob
+        if valid.endswith('*'):
+            valid = valid[:-1]
 
         if valid[:2] == '*.':
             # check foo.domain.com and domain.com
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index ebd8beb9cf..438c208f32 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -154,3 +154,24 @@ class IsValidOriginTestCase(TestCase):
     def test_null_invalid_graceful_with_domains(self):
         result = self.isValidOrigin('null', ['http://example.com'])
         self.assertEquals(result, False)
+
+    def test_custom_protocol_with_location(self):
+        result = self.isValidOrigin('sp://custom-thing/foo/bar', ['sp://custom-thing'])
+        assert result is True
+
+        result = self.isValidOrigin('sp://custom-thing-two/foo/bar', ['sp://custom-thing'])
+        assert result is False
+
+    def test_custom_protocol_without_location(self):
+        result = self.isValidOrigin('sp://custom-thing/foo/bar', ['sp://*'])
+        assert result is True
+
+        result = self.isValidOrigin('dp://custom-thing/foo/bar', ['sp://'])
+        assert result is False
+
+    def test_custom_protocol_with_domainish_match(self):
+        result = self.isValidOrigin('sp://custom-thing.foobar/foo/bar', ['sp://*.foobar'])
+        assert result is True
+
+        result = self.isValidOrigin('sp://custom-thing.bizbaz/foo/bar', ['sp://*.foobar'])
+        assert result is False
