commit b5d681859b2fc9e11778a855c80f0dc0cbcc0cf4
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 13 11:49:04 2015 -0800

    Remove access group creation endpoint

diff --git a/src/sentry/api/endpoints/team_access_group_index.py b/src/sentry/api/endpoints/team_access_group_index.py
index e8b4200cd6..d4e7031fc3 100644
--- a/src/sentry/api/endpoints/team_access_group_index.py
+++ b/src/sentry/api/endpoints/team_access_group_index.py
@@ -1,53 +1,13 @@
 from __future__ import absolute_import
 
-from rest_framework import serializers, status
 from rest_framework.response import Response
 
 from sentry.api.bases.team import TeamEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import MEMBER_ADMIN, MEMBER_SYSTEM, MEMBER_USER
 from sentry.models import AccessGroup
 
 
-class AccessTypeField(serializers.ChoiceField):
-    DEFAULT_CHOICES = (
-        (MEMBER_USER, 'User'),
-        (MEMBER_ADMIN, 'Admin'),
-    )
-
-    def __init__(self, choices=DEFAULT_CHOICES, *args, **kwargs):
-        super(AccessTypeField, self).__init__(choices=choices, *args, **kwargs)
-
-    def to_native(self, obj):
-        if obj == MEMBER_ADMIN:
-            return 'admin'
-        elif obj == MEMBER_USER:
-            return 'user'
-        elif obj == MEMBER_SYSTEM:
-            return 'agent'
-        else:
-            raise ValueError(obj)
-
-    def from_native(self, obj):
-        if obj == 'admin':
-            return MEMBER_ADMIN
-        elif obj == 'user':
-            return MEMBER_USER
-        elif obj == 'agent':
-            return MEMBER_SYSTEM
-        else:
-            raise ValueError(obj)
-
-
-class AccessGroupSerializer(serializers.ModelSerializer):
-    type = AccessTypeField()
-
-    class Meta:
-        model = AccessGroup
-        fields = ('name', 'type')
-
-
 class TeamAccessGroupIndexEndpoint(TeamEndpoint):
     def get(self, request, team):
         assert_perm(team, request.user, request.auth)
@@ -55,16 +15,3 @@ class TeamAccessGroupIndexEndpoint(TeamEndpoint):
         data = sorted(AccessGroup.objects.filter(team=team), key=lambda x: x.name)
 
         return Response(serialize(data, request.user))
-
-    def post(self, request, team):
-        assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
-
-        serializer = AccessGroupSerializer(data=request.DATA)
-
-        if serializer.is_valid():
-            access_group = serializer.object
-            access_group.team = team
-            access_group.managed = False
-            access_group.save()
-            return Response(serialize(access_group, request.user), status=201)
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/tests/sentry/api/endpoints/test_team_access_group_index.py b/tests/sentry/api/endpoints/test_team_access_group_index.py
index 3d9af83b75..c39bdc21f3 100644
--- a/tests/sentry/api/endpoints/test_team_access_group_index.py
+++ b/tests/sentry/api/endpoints/test_team_access_group_index.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
-from sentry.constants import MEMBER_USER
 from sentry.models import AccessGroup
 from sentry.testutils import APITestCase
 
@@ -23,23 +22,3 @@ class TeamAccessGroupIndexTest(APITestCase):
         assert len(response.data) == 2
         assert response.data[0]['id'] == str(group_1.id)
         assert response.data[1]['id'] == str(group_2.id)
-
-
-class TeamAccessGroupCreateTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-        team = self.create_team(slug='baz')
-        url = reverse('sentry-api-0-team-access-group-index', kwargs={
-            'organization_slug': team.organization.slug,
-            'team_slug': team.slug,
-        })
-        resp = self.client.post(url, data={
-            'name': 'hello world',
-            'type': 'user',
-        })
-        assert resp.status_code == 201, resp.content
-        access_group = AccessGroup.objects.get(id=resp.data['id'])
-        assert access_group.name == 'hello world'
-        assert access_group.type == MEMBER_USER
-        assert access_group.managed is False
-        assert access_group.team == team
