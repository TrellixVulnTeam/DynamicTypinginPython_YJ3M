commit 1ee86f45b941cf1ee2a006fa3585cb6f502823b8
Author: Matte Noble <me@mattenoble.com>
Date:   Mon Oct 8 09:59:37 2018 -0700

    feat(auth): Client ID & Secret authentication (#9915)
    
    * feat(auth): Client ID & Secret authentication
    
    * Parse request body JSON when possible.
    
    As part of the request initialization in API endpoints, we parse the
    request body when it's content-type is JSON and not empty.
    
    This adds a `json_body` attribute to `request` in the endpoint. It will
    always be set - if the body was empty or non-JSON, it will be None.

diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index 071c86d17b..12a485aaa3 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
 from django.contrib.auth.models import AnonymousUser
+from django.utils.crypto import constant_time_compare
 from rest_framework.authentication import (BasicAuthentication, get_authorization_header)
 from rest_framework.exceptions import AuthenticationFailed
 
 from sentry.app import raven
-from sentry.models import ApiKey, ApiToken, Relay
+from sentry.models import ApiApplication, ApiKey, ApiToken, Relay
 from sentry.relay.utils import get_header_relay_id, get_header_relay_signature
 
 import semaphore
@@ -69,6 +70,42 @@ class ApiKeyAuthentication(QuietBasicAuthentication):
         return (AnonymousUser(), key)
 
 
+class ClientIdSecretAuthentication(QuietBasicAuthentication):
+    """
+    Authenticates a Sentry Application using its Client ID and Secret
+
+    This will be the method by which we identify which Sentry Application is
+    making the request, for any requests not scoped to an installation.
+
+    For example, the request to exchange a Grant Code for an Api Token.
+    """
+
+    def authenticate(self, request):
+        if not request.json_body:
+            raise AuthenticationFailed('Invalid request')
+
+        client_id = request.json_body.get('client_id')
+        client_secret = request.json_body.get('client_secret')
+
+        invalid_pair_error = AuthenticationFailed('Invalid Client ID / Secret pair')
+
+        if not client_id or not client_secret:
+            raise invalid_pair_error
+
+        try:
+            application = ApiApplication.objects.get(client_id=client_id)
+        except ApiApplication.DoesNotExist:
+            raise invalid_pair_error
+
+        if not constant_time_compare(application.client_secret, client_secret):
+            raise invalid_pair_error
+
+        try:
+            return (application.sentry_app.proxy_user, None)
+        except Exception:
+            raise invalid_pair_error
+
+
 class TokenAuthentication(QuietBasicAuthentication):
     def authenticate(self, request):
         auth = get_authorization_header(request).split()
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 6c57a933c4..7473f7f015 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -16,6 +16,7 @@ from rest_framework.parsers import JSONParser
 from rest_framework.renderers import JSONRenderer
 from rest_framework.response import Response
 from rest_framework.views import APIView
+from simplejson import JSONDecodeError
 
 from sentry import tsdb
 from sentry.app import raven
@@ -25,6 +26,8 @@ from sentry.utils.cursors import Cursor
 from sentry.utils.dates import to_datetime
 from sentry.utils.http import absolute_uri, is_valid_origin
 from sentry.utils.audit import create_audit_entry
+from sentry.utils import json
+
 
 from .authentication import ApiKeyAuthentication, TokenAuthentication
 from .paginator import Paginator
@@ -101,6 +104,29 @@ class Endpoint(APIView):
     def create_audit_entry(self, request, transaction_id=None, **kwargs):
         return create_audit_entry(request, transaction_id, audit_logger, **kwargs)
 
+    def load_json_body(self, request):
+        """
+        Attempts to load the request body when it's JSON.
+
+        The end result is ``request.json_body`` having a value. When it can't
+        load the body as JSON, for any reason, ``request.json_body`` is None.
+
+        The request flow is unaffected and no exceptions are ever raised.
+        """
+
+        request.json_body = None
+
+        if request.META.get('CONTENT_TYPE') != 'application/json':
+            return
+
+        if not len(request.body):
+            return
+
+        try:
+            request.json_body = json.loads(request.body)
+        except JSONDecodeError:
+            return
+
     def initialize_request(self, request, *args, **kwargs):
         rv = super(Endpoint, self).initialize_request(request, *args, **kwargs)
         # If our request is being made via our internal API client, we need to
@@ -121,6 +147,7 @@ class Endpoint(APIView):
         self.args = args
         self.kwargs = kwargs
         request = self.initialize_request(request, *args, **kwargs)
+        self.load_json_body(request)
         self.request = request
         self.headers = self.default_response_headers  # deprecate?
 
diff --git a/tests/sentry/api/test_authentication.py b/tests/sentry/api/test_authentication.py
new file mode 100644
index 0000000000..c31792057c
--- /dev/null
+++ b/tests/sentry/api/test_authentication.py
@@ -0,0 +1,80 @@
+from __future__ import absolute_import
+
+from django.http import HttpRequest
+from rest_framework.exceptions import AuthenticationFailed
+
+from sentry.api.authentication import ClientIdSecretAuthentication
+from sentry.mediators.sentry_apps import Creator
+from sentry.testutils import TestCase
+
+
+class TestClientIdSecretAuthentication(TestCase):
+    def setUp(self):
+        super(TestClientIdSecretAuthentication, self).setUp()
+
+        self.auth = ClientIdSecretAuthentication()
+
+        self.sentry_app = Creator.run(
+            name="foo",
+            user=self.user,
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+
+        self.api_app = self.sentry_app.application
+
+    def test_authenticate(self):
+        request = HttpRequest()
+        request.json_body = {
+            'client_id': self.api_app.client_id,
+            'client_secret': self.api_app.client_secret,
+        }
+
+        user, _ = self.auth.authenticate(request)
+
+        assert user == self.sentry_app.proxy_user
+
+    def test_without_json_body(self):
+        request = HttpRequest()
+        request.json_body = None
+
+        with self.assertRaises(AuthenticationFailed):
+            self.auth.authenticate(request)
+
+    def test_missing_client_id(self):
+        request = HttpRequest()
+        request.json_body = {
+            'client_secret': self.api_app.client_secret,
+        }
+
+        with self.assertRaises(AuthenticationFailed):
+            self.auth.authenticate(request)
+
+    def test_missing_client_secret(self):
+        request = HttpRequest()
+        request.json_body = {
+            'client_id': self.api_app.client_id,
+        }
+
+        with self.assertRaises(AuthenticationFailed):
+            self.auth.authenticate(request)
+
+    def test_incorrect_client_id(self):
+        request = HttpRequest()
+        request.json_body = {
+            'client_id': 'notit',
+            'client_secret': self.api_app.client_secret,
+        }
+
+        with self.assertRaises(AuthenticationFailed):
+            self.auth.authenticate(request)
+
+    def test_incorrect_client_secret(self):
+        request = HttpRequest()
+        request.json_body = {
+            'client_id': self.api_app.client_id,
+            'client_secret': 'notit',
+        }
+
+        with self.assertRaises(AuthenticationFailed):
+            self.auth.authenticate(request)
diff --git a/tests/sentry/api/test_base.py b/tests/sentry/api/test_base.py
index 92ceae2b91..761dba5b41 100644
--- a/tests/sentry/api/test_base.py
+++ b/tests/sentry/api/test_base.py
@@ -40,3 +40,40 @@ class EndpointTest(APITestCase):
         assert response.status_code == 200, response.content
 
         assert response['Access-Control-Allow-Origin'] == 'http://example.com'
+
+
+class EndpointJSONBodyTest(APITestCase):
+    def setUp(self):
+        super(EndpointJSONBodyTest, self).setUp()
+
+        self.request = HttpRequest()
+        self.request.method = 'GET'
+        self.request.META['CONTENT_TYPE'] = 'application/json'
+
+    def test_json(self):
+        self.request._body = '{"foo":"bar"}'
+
+        Endpoint().load_json_body(self.request)
+
+        assert self.request.json_body == {'foo': 'bar'}
+
+    def test_invalid_json(self):
+        self.request._body = 'hello'
+
+        Endpoint().load_json_body(self.request)
+
+        assert not self.request.json_body
+
+    def test_empty_request_body(self):
+        self.request._body = ''
+
+        Endpoint().load_json_body(self.request)
+
+        assert not self.request.json_body
+
+    def test_non_json_content_type(self):
+        self.request.META['CONTENT_TYPE'] = 'text/plain'
+
+        Endpoint().load_json_body(self.request)
+
+        assert not self.request.json_body
