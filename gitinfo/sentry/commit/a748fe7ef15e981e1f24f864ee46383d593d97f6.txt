commit a748fe7ef15e981e1f24f864ee46383d593d97f6
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 7 13:19:01 2015 -0700

    Add basic tests for organization login

diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index c3d931065f..f4ed10a138 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -69,6 +69,7 @@ class AuthOrganizationLoginView(BaseView):
         provider = auth_provider.get_provider()
 
         context = {
+            'CAN_REGISTER': False,
             'organization': organization,
             'provider_key': provider.key,
             'provider_name': provider.name,
diff --git a/tests/sentry/web/frontend/test_organization_auth_login.py b/tests/sentry/web/frontend/test_organization_auth_login.py
new file mode 100644
index 0000000000..258aad4019
--- /dev/null
+++ b/tests/sentry/web/frontend/test_organization_auth_login.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import AuthProvider
+from sentry.testutils import AuthProviderTestCase
+
+
+class OrganizationAuthSettingsTest(AuthProviderTestCase):
+    def test_renders_basic_login_form(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/organization-login.html')
+
+        assert resp.context['form']
+        assert 'provider_key' not in resp.context
+        assert resp.context['CAN_REGISTER']
+
+    def test_renders_auth_provider(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        resp = self.client.get(path)
+
+        self.assertTemplateUsed(resp, 'sentry/organization-login.html')
+
+        assert 'form' not in resp.context
+        assert resp.context['provider_key'] == 'dummy'
+        assert not resp.context['CAN_REGISTER']
