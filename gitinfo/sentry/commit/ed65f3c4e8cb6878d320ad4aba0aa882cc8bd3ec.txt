commit ed65f3c4e8cb6878d320ad4aba0aa882cc8bd3ec
Author: adhiraj <693121+adhiraj@users.noreply.github.com>
Date:   Tue Jul 3 13:21:32 2018 -0700

    feat(integrations): Prep for login-with-VSTS (#8872)
    
    * feat(integrations): Prep for login-with-VSTS
    
    - Sets the identity's external id to the user ID
    - Moves AccountConfigView() from the identity pipeline into the integrations pipeline
    - Adds a build_identity method that will be used by the login flow

diff --git a/src/sentry/identity/vsts/provider.py b/src/sentry/identity/vsts/provider.py
index e80b42f0ed..a145a63c45 100644
--- a/src/sentry/identity/vsts/provider.py
+++ b/src/sentry/identity/vsts/provider.py
@@ -1,16 +1,26 @@
 from __future__ import absolute_import
 
-from django import forms
+from sentry import http, options
 
-from sentry import http
-from sentry import options
-
-from sentry.web.helpers import render_to_response
 from sentry.identity.oauth2 import OAuth2Provider, OAuth2LoginView, OAuth2CallbackView
-from sentry.pipeline import PipelineView
 from sentry.utils.http import absolute_uri
 
 
+def get_user_info(access_token):
+    session = http.build_session()
+    resp = session.get(
+        'https://app.vssps.visualstudio.com/_apis/profile/profiles/me?api-version=1.0',
+        headers={
+            'Accept': 'application/json',
+            'Authorization': 'bearer %s' % access_token,
+        },
+    )
+    resp.raise_for_status()
+    resp = resp.json()
+
+    return resp
+
+
 class VSTSIdentityProvider(OAuth2Provider):
     key = 'vsts'
     name = 'Visual Studio Team Services'
@@ -48,7 +58,6 @@ class VSTSIdentityProvider(OAuth2Provider):
                 client_id=self.get_oauth_client_id(),
                 client_secret=self.get_oauth_client_secret(),
             ),
-            AccountConfigView(),
         ]
 
     def get_refresh_token_headers(self):
@@ -69,6 +78,20 @@ class VSTSIdentityProvider(OAuth2Provider):
             'redirect_uri': absolute_uri(oauth_redirect_url),
         }
 
+    def build_identity(self, data):
+        data = data['data']
+        user = get_user_info(data['access_token'])
+
+        return {
+            'type': 'vsts',
+            'id': user['id'],
+            'email': user['emailAddress'],
+            'email_verified': True,
+            'name': user['displayName'],
+            'scopes': sorted(self.oauth_scopes),
+            'data': self.get_oauth_data(data),
+        }
+
 
 class VSTSOAuth2CallbackView(OAuth2CallbackView):
 
@@ -95,57 +118,3 @@ class VSTSOAuth2CallbackView(OAuth2CallbackView):
         if req.headers['Content-Type'].startswith('application/x-www-form-urlencoded'):
             return dict(parse_qsl(body))
         return json.loads(body)
-
-
-class AccountForm(forms.Form):
-    def __init__(self, accounts, *args, **kwargs):
-        super(AccountForm, self).__init__(*args, **kwargs)
-        self.fields['account'] = forms.ChoiceField(
-            choices=[(acct['AccountId'], acct['AccountName']) for acct in accounts],
-            label='Account',
-            help_text='VS Team Services account (account.visualstudio.com).',
-        )
-
-
-class AccountConfigView(PipelineView):
-    def dispatch(self, request, pipeline):
-        if 'account' in request.POST:
-            account_id = request.POST.get('account')
-            accounts = pipeline.fetch_state(key='accounts')
-            account = self.get_account_from_id(account_id, accounts)
-            if account is not None:
-                pipeline.bind_state('account', account)
-                pipeline.bind_state('instance', account['AccountName'] + '.visualstudio.com')
-                return pipeline.next_step()
-
-        access_token = pipeline.fetch_state(key='data')['access_token']
-        accounts = self.get_accounts(access_token)
-        pipeline.bind_state('accounts', accounts)
-        account_form = AccountForm(accounts)
-        return render_to_response(
-            template='sentry/integrations/vsts-config.html',
-            context={
-                'form': account_form,
-            },
-            request=request,
-        )
-
-    def get_account_from_id(self, account_id, accounts):
-        for account in accounts:
-            if account['AccountId'] == account_id:
-                return account
-        return None
-
-    def get_accounts(self, access_token):
-        session = http.build_session()
-        url = 'https://app.vssps.visualstudio.com/_apis/accounts'
-        response = session.get(
-            url,
-            headers={
-                'Content-Type': 'application/json',
-                'Authorization': 'Bearer %s' % access_token,
-            },
-        )
-        if response.status_code == 200:
-            return response.json()
-        return None
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index f8edf8a24b..7f4254d9ae 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -2,14 +2,18 @@ from __future__ import absolute_import
 from time import time
 import logging
 
+from django import forms
 from django.utils.translation import ugettext as _
 
+from sentry import http
 from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.exceptions import ApiError
 from sentry.integrations.vsts.issues import VstsIssueSync
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
-from sentry.identity.vsts import VSTSIdentityProvider
+from sentry.identity.vsts import VSTSIdentityProvider, get_user_info
+from sentry.pipeline import PipelineView
+from sentry.web.helpers import render_to_response
 from sentry.utils.http import absolute_uri
 from .client import VstsApiClient
 from .repository import VstsRepositoryProvider
@@ -153,26 +157,26 @@ class VstsIntegrationProvider(IntegrationProvider):
 
         return [
             identity_pipeline_view,
+            AccountConfigView(),
         ]
 
     def build_integration(self, state):
         data = state['identity']['data']
-        account = state['identity']['account']
-        instance = state['identity']['instance']
-
+        account = state['account']
+        instance = state['instance']
+        user = get_user_info(data['access_token'])
         scopes = sorted(VSTSIdentityProvider.oauth_scopes)
+
         return {
             'name': account['AccountName'],
             'external_id': account['AccountId'],
             'metadata': {
                 'domain_name': instance,
-                'scopes': scopes,
             },
-            # TODO(LB): Change this to a Microsoft account as opposed to a VSTS workspace
             'user_identity': {
                 'type': 'vsts',
-                'external_id': account['AccountId'],
-                'scopes': [],
+                'external_id': user['id'],
+                'scopes': scopes,
                 'data': self.get_oauth_data(data),
             },
         }
@@ -196,3 +200,57 @@ class VstsIntegrationProvider(IntegrationProvider):
             VstsRepositoryProvider,
             id='integrations:vsts',
         )
+
+
+class AccountConfigView(PipelineView):
+    def dispatch(self, request, pipeline):
+        if 'account' in request.POST:
+            account_id = request.POST.get('account')
+            accounts = pipeline.fetch_state(key='accounts')
+            account = self.get_account_from_id(account_id, accounts)
+            if account is not None:
+                pipeline.bind_state('account', account)
+                pipeline.bind_state('instance', account['AccountName'] + '.visualstudio.com')
+                return pipeline.next_step()
+
+        access_token = pipeline.fetch_state(key='data')['access_token']
+        accounts = self.get_accounts(access_token)
+        pipeline.bind_state('accounts', accounts)
+        account_form = AccountForm(accounts)
+        return render_to_response(
+            template='sentry/integrations/vsts-config.html',
+            context={
+                'form': account_form,
+            },
+            request=request,
+        )
+
+    def get_account_from_id(self, account_id, accounts):
+        for account in accounts:
+            if account['AccountId'] == account_id:
+                return account
+        return None
+
+    def get_accounts(self, access_token):
+        session = http.build_session()
+        url = 'https://app.vssps.visualstudio.com/_apis/accounts'
+        response = session.get(
+            url,
+            headers={
+                'Content-Type': 'application/json',
+                'Authorization': 'Bearer %s' % access_token,
+            },
+        )
+        if response.status_code == 200:
+            return response.json()
+        return None
+
+
+class AccountForm(forms.Form):
+    def __init__(self, accounts, *args, **kwargs):
+        super(AccountForm, self).__init__(*args, **kwargs)
+        self.fields['account'] = forms.ChoiceField(
+            choices=[(acct['AccountId'], acct['AccountName']) for acct in accounts],
+            label='Account',
+            help_text='VS Team Services account (account.visualstudio.com).',
+        )
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index d56ccc56fe..64ddb11ea1 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -13,9 +13,21 @@ from sentry.testutils import APITestCase, TestCase
 class VstsIntegrationProviderTest(TestCase):
     def setUp(self):
         self.integration = VstsIntegrationProvider()
+        responses.add(
+            responses.GET,
+            'https://app.vssps.visualstudio.com/_apis/profile/profiles/me?api-version=1.0',
+            json={
+                'id': 'user1',
+                'displayName': 'Sentry User',
+                'emailAddress': 'sentry@user.com',
+            },
+        )
 
+    @responses.activate
     def test_build_integration(self):
         state = {
+            'account': {'AccountName': 'sentry', 'AccountId': '123435'},
+            'instance': 'sentry.visualstudio.com',
             'identity': {
                 'data': {
                     'access_token': 'xxx-xxxx',
@@ -23,19 +35,17 @@ class VstsIntegrationProviderTest(TestCase):
                     'refresh_token': 'rxxx-xxxx',
                     'token_type': 'jwt-bearer',
                 },
-                'account': {'AccountName': 'sentry', 'AccountId': '123435'},
-                'instance': 'sentry.visualstudio.com',
             },
         }
         integration_dict = self.integration.build_integration(state)
         assert integration_dict['name'] == 'sentry'
         assert integration_dict['external_id'] == '123435'
-        assert integration_dict['metadata']['scopes'] == list(VSTSIdentityProvider.oauth_scopes)
         assert integration_dict['metadata']['domain_name'] == 'sentry.visualstudio.com'
 
         assert integration_dict['user_identity']['type'] == 'vsts'
-        assert integration_dict['user_identity']['external_id'] == '123435'
-        assert integration_dict['user_identity']['scopes'] == []
+        assert integration_dict['user_identity']['external_id'] == 'user1'
+        assert integration_dict['user_identity']['scopes'] == sorted(
+            VSTSIdentityProvider.oauth_scopes)
 
         assert integration_dict['user_identity']['data']['access_token'] == 'xxx-xxxx'
         assert isinstance(integration_dict['user_identity']['data']['expires'], int)
diff --git a/tests/sentry/integrations/vsts/test_provider.py b/tests/sentry/integrations/vsts/test_provider.py
index a253f2c524..63fe23224d 100644
--- a/tests/sentry/integrations/vsts/test_provider.py
+++ b/tests/sentry/integrations/vsts/test_provider.py
@@ -3,7 +3,8 @@ from __future__ import absolute_import
 from mock import Mock
 import responses
 from django.http import HttpRequest
-from sentry.identity.vsts.provider import VSTSOAuth2CallbackView, AccountConfigView, AccountForm, VSTSIdentityProvider
+from sentry.identity.vsts.provider import VSTSOAuth2CallbackView, VSTSIdentityProvider
+from sentry.integrations.vsts.integration import AccountConfigView, AccountForm
 from sentry.testutils import TestCase
 from six.moves.urllib.parse import parse_qs
 from sentry.utils.http import absolute_uri
