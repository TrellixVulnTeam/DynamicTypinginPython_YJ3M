commit 954b10e2acfb63817546004b5738a6002d39f9bb
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Feb 26 00:37:18 2012 -0800

    Change from Kombu to Celery

diff --git a/docs/queue/index.rst b/docs/queue/index.rst
index 2d0c9a3ce3..60ac1870be 100644
--- a/docs/queue/index.rst
+++ b/docs/queue/index.rst
@@ -7,13 +7,15 @@ of writing it to the database immediately, it sends a job to the queue so
 that the request can be returned right away, and the background workers
 handle actually saving that data.
 
-Run a Worker
-------------
+.. note:: As of version 3.3.0 the queue is now powered by Celery.
 
-Workers can be run by using the Sentry CLI. Specifically, you pass the 'worker'
-service to the start command::
+Running a Worker
+------------~~~~
 
-    sentry start worker
+Workers can be run by using the Sentry CLI. Specifically, you call out to celeryd,
+which the worker manager process of the Celery library.
+
+    sentry celeryd
 
 Enable the Queue
 ----------------
diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index 56981dcc9d..8d8ed313cb 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -104,6 +104,7 @@ INSTALLED_APPS = (
     'django.contrib.sites',
     # 'django.contrib.messages',
 
+    'djcelery',
     'kombu.transport.django',
     'raven.contrib.django',
     'sentry',
@@ -116,6 +117,10 @@ INSTALLED_APPS = (
 
 ADMIN_MEDIA_PREFIX = '/_admin_media/'
 
+# Queue configuration
+
+BROKER_URL = "django://"
+
 # Sentry and Raven configuration
 
 SENTRY_PUBLIC = True
@@ -145,3 +150,7 @@ logger.addHandler(handler)
 sentry_handler = SentryHandler()
 sentry_handler.setLevel(logging.ERROR)
 setup_logging(sentry_handler)
+
+# Configure celery
+import djcelery
+djcelery.setup_loader()
diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 49553d0faf..3bde58f9fa 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -19,11 +19,12 @@ import zlib
 from django.utils.encoding import smart_str
 
 from sentry.conf import settings
-from sentry.exceptions import InvalidData, InvalidInterface
-from sentry.models import Group, ProjectMember
-from sentry.queue.client import delay
+# from sentry.exceptions import InvalidData, InvalidInterface
+from sentry.models import ProjectMember
+from sentry.tasks.store import store_event
 from sentry.utils import is_float, json
 from sentry.utils.auth import get_signature, parse_auth_header
+from sentry.utils.queue import maybe_delay
 
 logger = logging.getLogger('sentry.errors.coreapi')
 
@@ -203,12 +204,5 @@ def validate_data(project, data):
     return data
 
 
-def really_insert_data(data):
-    try:
-        Group.objects.from_kwargs(**data)
-    except (InvalidInterface, InvalidData), e:
-        raise APIError(e)
-
-
 def insert_data_to_database(data):
-    delay(really_insert_data, data)
+    maybe_delay(store_event, data=data)
diff --git a/sentry/management/commands/cleanup.py b/sentry/management/commands/cleanup.py
index fa85fd792c..071bfbe8db 100644
--- a/sentry/management/commands/cleanup.py
+++ b/sentry/management/commands/cleanup.py
@@ -25,7 +25,7 @@ class Command(BaseCommand):
 
     def handle(self, **options):
         import logging
-        from sentry.queue.tasks.cleanup import cleanup
+        from sentry.tasks.cleanup import cleanup
 
         level = options['level']
 
diff --git a/sentry/management/commands/start.py b/sentry/management/commands/start.py
index a457c343ab..670b65d1a2 100644
--- a/sentry/management/commands/start.py
+++ b/sentry/management/commands/start.py
@@ -23,14 +23,16 @@ class Command(BaseCommand):
     )
 
     def handle(self, service_name='http', **options):
-        from sentry.services import http, worker, udp
+        from sentry.services import http, udp
 
         services = {
             'http': http.SentryHTTPServer,
-            'worker': worker.SentryWorker,
             'udp': udp.SentryUDPServer,
         }
 
+        if service_name == 'worker':
+            raise CommandError('The ``worker`` service has been replaced with ``celeryd``.')
+
         # Ensure we perform an upgrade before starting any service
         print "Performing upgrade before service startup..."
         call_command('upgrade', verbosity=0)
diff --git a/sentry/manager.py b/sentry/manager.py
index e310c281f3..fa88535819 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -23,11 +23,11 @@ from sentry.conf import settings
 from sentry.exceptions import InvalidInterface, InvalidData
 from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
+from sentry.tasks.index import index_event
 from sentry.utils import get_db_engine
 from sentry.utils.charts import has_charts
 from sentry.utils.dates import utc_to_local, get_sql_date_trunc
-from sentry.queue.client import delay
-from sentry.queue.tasks.index import index_event
+from sentry.utils.queue import maybe_delay
 
 logger = logging.getLogger('sentry.errors')
 
@@ -351,7 +351,7 @@ class GroupManager(models.Manager, ChartMixin):
 
         if settings.USE_SEARCH:
             try:
-                delay(index_event, event)
+                maybe_delay(index_event, event)
             except Exception, e:
                 transaction.rollback_unless_managed(using=group._state.db)
                 logger.exception(u'Error indexing document: %s', e)
diff --git a/sentry/queue/client.py b/sentry/queue/client.py
deleted file mode 100644
index 5be8d32b6d..0000000000
--- a/sentry/queue/client.py
+++ /dev/null
@@ -1,64 +0,0 @@
-"""
-sentry.queue.client
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.conf import settings
-from sentry.queue.queues import task_queues, task_exchange
-
-
-from kombu import BrokerConnection
-from kombu.common import maybe_declare
-from kombu.pools import producers
-
-
-class Broker(object):
-    def __init__(self, config):
-        self.config = config
-
-    def _get_connection(self):
-        if hasattr(self, '_connection'):
-            return self._connection
-
-        self._connection = BrokerConnection(**self.config)
-
-        with producers[self.connection].acquire(block=False) as producer:
-            for queue in task_queues:
-                maybe_declare(queue, producer.channel)
-
-        return self._connection
-
-    connection = property(_get_connection)
-
-    def delay(self, func, *args, **kwargs):
-        payload = {
-            "func": func,
-            "args": args,
-            "kwargs": kwargs,
-        }
-
-        with producers[self.connection].acquire(block=False) as producer:
-            producer.publish(payload,
-                exchange=task_exchange,
-                serializer="pickle",
-                compression="bzip2",
-                queue='sentry.default',
-                routing_key='sentry.default',
-            )
-
-
-class EagerBroker(Broker):
-    """
-    Executes tasks within the same process.
-    """
-    def delay(self, func, *args, **kwargs):
-        return func(*args, **kwargs)
-
-if not settings.USE_QUEUE:
-    broker = EagerBroker(settings.QUEUE)
-else:
-    broker = Broker(settings.QUEUE)
-delay = broker.delay
diff --git a/sentry/queue/queues.py b/sentry/queue/queues.py
deleted file mode 100644
index 9f4d14401a..0000000000
--- a/sentry/queue/queues.py
+++ /dev/null
@@ -1,14 +0,0 @@
-"""
-sentry.queue.queues
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from kombu import Exchange, Queue
-
-# All queues should be prefixed with "sentry."
-task_exchange = Exchange("tasks", type="direct")
-task_queues = [
-    Queue("sentry.default", task_exchange, routing_key="sentry.default"),
-]
diff --git a/sentry/queue/tasks/__init__.py b/sentry/queue/tasks/__init__.py
deleted file mode 100644
index 402c77d3b7..0000000000
--- a/sentry/queue/tasks/__init__.py
+++ /dev/null
@@ -1,7 +0,0 @@
-"""
-sentry.queue.tasks
-~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
diff --git a/sentry/queue/tasks/index.py b/sentry/queue/tasks/index.py
deleted file mode 100644
index 96fe5db418..0000000000
--- a/sentry/queue/tasks/index.py
+++ /dev/null
@@ -1,4 +0,0 @@
-def index_event(event, **kwargs):
-    from sentry.models import SearchDocument
-
-    SearchDocument.objects.index(event)
diff --git a/sentry/queue/worker.py b/sentry/queue/worker.py
deleted file mode 100644
index a3ed28ce7a..0000000000
--- a/sentry/queue/worker.py
+++ /dev/null
@@ -1,35 +0,0 @@
-"""
-sentry.queue.worker
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from kombu.mixins import ConsumerMixin
-from kombu.utils import kwdict
-
-from sentry.queue.queues import task_queues
-
-import logging
-
-
-class Worker(ConsumerMixin):
-    def __init__(self, connection):
-        self.connection = connection
-        self.logger = logging.getLogger(__name__)
-
-    def get_consumers(self, Consumer, channel):
-        return [Consumer(queues=task_queues,
-                         callbacks=[self.process_task])]
-
-    def process_task(self, body, message):
-        func = body["func"]
-        args = body["args"]
-        kwargs = body["kwargs"]
-        self.logger.info("Got task: %r", func.__name__)
-        try:
-            func(*args, **kwdict(kwargs))
-        except Exception, exc:
-            self.logger.error("task raised exception: %r", exc, exc_info=True)
-        message.ack()
-
diff --git a/sentry/services/worker.py b/sentry/services/worker.py
deleted file mode 100644
index 054ff8e658..0000000000
--- a/sentry/services/worker.py
+++ /dev/null
@@ -1,23 +0,0 @@
-"""
-sentry.services.worker
-~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from sentry.services.base import Service
-
-
-class SentryWorker(Service):
-    name = 'worker'
-
-    def run(self):
-        import eventlet
-        eventlet.patcher.monkey_patch()
-        from sentry.queue.client import broker
-        from sentry.queue.worker import Worker
-
-        try:
-            Worker(broker.connection).run()
-        except KeyboardInterrupt:
-            print("bye bye")
diff --git a/sentry/queue/__init__.py b/sentry/tasks/__init__.py
similarity index 60%
rename from sentry/queue/__init__.py
rename to sentry/tasks/__init__.py
index 6cdc82b13f..9d136d4cb8 100644
--- a/sentry/queue/__init__.py
+++ b/sentry/tasks/__init__.py
@@ -1,7 +1,11 @@
 """
-sentry.queue
+sentry.tasks
 ~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
+import sentry.tasks.cleanup
+import sentry.tasks.index
+import sentry.tasks.store
diff --git a/sentry/queue/tasks/cleanup.py b/sentry/tasks/cleanup.py
similarity index 96%
rename from sentry/queue/tasks/cleanup.py
rename to sentry/tasks/cleanup.py
index 5712ddf66a..d7479e81e7 100644
--- a/sentry/queue/tasks/cleanup.py
+++ b/sentry/tasks/cleanup.py
@@ -1,14 +1,17 @@
 """
-sentry.queue.tasks.cleanup
-~~~~~~~~~~~~~~~~~~~~~~~~~~
+sentry.tasks.cleanup
+~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
 
+from celery.task import task
 
+
+@task(ignore_result=True)
 def cleanup(days=30, logger=None, site=None, server=None, level=None,
-            project=None, resolved=None):
+            project=None, resolved=None, **kwargs):
     """
     Deletes a portion of the trailing data in Sentry based on
     their creation dates. For example, if ``days`` is 30, this
diff --git a/sentry/tasks/index.py b/sentry/tasks/index.py
new file mode 100644
index 0000000000..5bd62e30d0
--- /dev/null
+++ b/sentry/tasks/index.py
@@ -0,0 +1,16 @@
+"""
+sentry.tasks.index
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from celery.task import task
+
+
+@task(ignore_result=True)
+def index_event(event, **kwargs):
+    from sentry.models import SearchDocument
+
+    SearchDocument.objects.index(event)
diff --git a/sentry/tasks/store.py b/sentry/tasks/store.py
new file mode 100644
index 0000000000..cee3ccf13d
--- /dev/null
+++ b/sentry/tasks/store.py
@@ -0,0 +1,19 @@
+"""
+sentry.tasks.store
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from celery.task import task
+
+
+@task(ignore_result=True)
+def store_event(data, **kwargs):
+    """
+    Saves an event to the database.
+    """
+    from sentry.models import Group
+
+    Group.objects.from_kwargs(**data)
diff --git a/sentry/utils/queue.py b/sentry/utils/queue.py
new file mode 100644
index 0000000000..af784e22e2
--- /dev/null
+++ b/sentry/utils/queue.py
@@ -0,0 +1,15 @@
+"""
+sentry.utils.queue
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from sentry.conf import settings
+
+
+def maybe_delay(func, *args, **kwargs):
+    if settings.USE_QUEUE:
+        return func.delay(*args, **kwargs)
+    return func(*args, **kwargs)
diff --git a/setup.py b/setup.py
index f83cd67c86..0a0d89bc1a 100755
--- a/setup.py
+++ b/setup.py
@@ -32,12 +32,12 @@ tests_require = [
 install_requires = [
     'cssutils>=0.9.9',
     'BeautifulSoup>=3.2.1',
+    'django-celery>=2.5.0,<3.0',
     'Django>=1.2,<1.4',
     'django-indexer>=0.3.0',
     'django-paging>=0.2.4',
     'django-templatetag-sugar>=0.1.0',
     'eventlet>=0.9.15',
-    'kombu>=2.1.0,<3.0',
     'gunicorn>=0.13.4',
     'logan>=0.2.1',
     'pynliner>=0.4.0',
diff --git a/tests/sentry/tasks/cleanup/tests.py b/tests/sentry/tasks/cleanup/tests.py
index a6134661a2..6587d61166 100644
--- a/tests/sentry/tasks/cleanup/tests.py
+++ b/tests/sentry/tasks/cleanup/tests.py
@@ -6,6 +6,7 @@ import logging
 
 from sentry.models import Event, Group, MessageCountByMinute, \
   MessageFilterValue
+from sentry.tasks.cleanup import cleanup
 from tests.base import TestCase
 
 
@@ -13,8 +14,6 @@ class SentryCleanupTest(TestCase):
     fixtures = ['tests/fixtures/cleanup.json']
 
     def test_simple(self):
-        from sentry.queue.tasks.cleanup import cleanup
-
         cleanup(days=1)
 
         self.assertEquals(Event.objects.count(), 0)
@@ -23,8 +22,6 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_logger(self):
-        from sentry.queue.tasks.cleanup import cleanup
-
         cleanup(days=1, logger='sentry')
 
         self.assertEquals(Event.objects.count(), 8)
@@ -51,8 +48,6 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_server_name(self):
-        from sentry.queue.tasks.cleanup import cleanup
-
         cleanup(days=1, server='dcramer.local')
 
         self.assertEquals(Event.objects.count(), 2)
@@ -68,8 +63,6 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_level(self):
-        from sentry.queue.tasks.cleanup import cleanup
-
         cleanup(days=1, level=logging.ERROR)
 
         self.assertEquals(Event.objects.count(), 1)
